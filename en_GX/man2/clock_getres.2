.\" Copyright (c) 2003 Nick Clifford (zaf@nrc.co.nz), Jan 25, 2003
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl), Aug 24, 2003
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2003-08-23 Martin Schulze <joey@infodrom.org> improvements
.\" 2003-08-24 aeb, big-ass parts rewritten
.\" 2004-08-06 Christoph Lameta <clameter@sgi.com>, SMP note
.\"
.TH CLOCK_GETRES 2 2013-02-25 "" "Linux Programmerz Manual"
.SH NAME
clock_getres, clock_gettime, clock_settime \- clock n' time functions
.SH SYNOPSIS
.B #include <time.h>
.sp
.BI "int clock_getres(clockid_t " clk_id ", struct timespec *" res );

.BI "int clock_gettime(clockid_t " clk_id ", struct timespec *" tp );

.BI "int clock_settime(clockid_t " clk_id ", const struct timespec *" tp );
.sp
Link wit \fI\-lrt\fP (only fo' glibc versions before 2.17).
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR clock_getres (),
.BR clock_gettime (),
.BR clock_settime ():
.RS
_POSIX_C_SOURCE\ >=\ 199309L
.RE
.ad b
.SH DESCRIPTION
Da function
.BR clock_getres ()
findz tha resolution (precision) of tha specified clock
.IR clk_id ,
and, if
.I res
is non-NULL, stores it up in tha \fIstruct timespec\fP pointed ta by
.IR res .
Da resolution of clocks dependz on tha implementation n' cannot be
configured by a particular process.
If tha time value pointed ta by tha argument
.I tp
of
.BR clock_settime ()
is not a multiple of
.IR res ,
then it is truncated ta a multiple of
.IR res .
.PP
Da functions
.BR clock_gettime ()
and
.BR clock_settime ()
retrieve n' set tha time of tha specified clock
.IR clk_id .
.PP
The
.I res
and
.I tp
arguments are
.I timespec
structures, as specified in
.IR <time.h> :
.sp
.in +4n
.nf
struct timespec {
    time_t   tv_sec;        /* secondz */
    long     tv_nsec;       /* nanosecondz */
};
.fi
.in
.PP
The
.I clk_id
argument is tha identifier of tha particular clock on which ta act.
A clock may be system-wide n' hence visible fo' all processes, or
per-process if it measures time only within a single process.
.LP
All implementations support tha system-wide real-time clock,
which is identified by
.BR CLOCK_REALTIME .
Its time represents secondz n' nanosecondz since tha Epoch.
When its time is chizzled, timers fo' a relatizzle interval are
unaffected yo, but timers fo' a absolute point up in time is affected.
.LP
Mo' clocks may be implemented.
Da interpretation of the
correspondin time joints n' tha effect on timers is unspecified.
.LP
Sufficiently recent versionz of glibc n' tha Linux kernel
support tha followin clocks:
.TP
.B CLOCK_REALTIME
System-wide clock dat measures real (i.e., wall-clock) time.
Settin dis clock requires appropriate privileges.
This clock be affected by discontinuous jumps up in tha system time
(e.g., if tha system administrator manually chizzlez tha clock),
and by tha incremenstrual adjustments performed by
.BR adjtime (3)
and NTP.
.TP
.BR CLOCK_REALTIME_COARSE " (since Linux 2.6.32; Linux-specific)"
.\" Added up in commit da15cfdae03351c689736f8d142618592e3cebc3
A fasta but less precise version of
.BR CLOCK_REALTIME .
Use when you need straight-up fast yo, but not fine-grained timestamps.
.TP
.TP
.B CLOCK_MONOTONIC
Clock dat cannot be set n' represents monotonic time since
some unspecified startin point.
This clock aint affected by discontinuous jumps up in tha system time
(e.g., if tha system administrator manually chizzlez tha clock),
but be affected by tha incremenstrual adjustments performed by
.BR adjtime (3)
and NTP.
.TP
.BR CLOCK_MONOTONIC_COARSE " (since Linux 2.6.32; Linux-specific)"
.\" Added up in commit da15cfdae03351c689736f8d142618592e3cebc3
A fasta but less precise version of
.BR CLOCK_MONOTONIC .
Use when you need straight-up fast yo, but not fine-grained timestamps.
.TP
.BR CLOCK_MONOTONIC_RAW " (since Linux 2.6.28; Linux-specific)"
.\" Added up in commit 2d42244ae71d6c7b0884b5664cf2eda30fb2ae68, Jizzy Stultz
Similar to
.BR CLOCK_MONOTONIC ,
but serves up access ta a raw hardware-based time
that aint subject ta NTP adjustments or
the incremenstrual adjustments performed by
.BR adjtime (3).
.TP
.BR CLOCK_BOOTTIME " (since Linux 2.6.39; Linux-specific)"
.\" commit 7fdd7f89006dd5a4c702fa0ce0c272345fa44ae0
.\" commit 70a08cca1227dc31c784ec930099a4417a06e7d0
Identical to
.BR CLOCK_MONOTONIC ,
except it also includes any time dat tha system is suspended.
This allows applications ta git a suspend-aware monotonic clock
without havin ta deal wit tha complications of
.BR CLOCK_REALTIME ,
which may have discontinuitizzles if tha time is chizzled using
.BR settimeofdizzle (2).
.TP
.B CLOCK_PROCESS_CPUTIME_ID
High-resolution per-process timer from tha CPU.
.TP
.B CLOCK_THREAD_CPUTIME_ID
Thread-specific CPU-time clock.
.SH RETURN VALUE
.BR clock_gettime (),
.BR clock_settime ()
and
.BR clock_getres ()
return 0 fo' success, or \-1 fo' failure (in which case
.I errno
is set appropriately).
.SH ERRORS
.TP
.B EFAULT
.I tp
points outside tha accessible address space.
.TP
.B EINVAL
The
.I clk_id
specified aint supported on dis system.
.\" Linux also gives dis error on attempts ta set CLOCK_PROCESS_CPUTIME_ID
.\" n' CLOCK_THREAD_CPUTIME_ID, when probably tha proper error should be
.\" EPERM.
.TP
.B EPERM
.BR clock_settime ()
does not have permission ta set tha clock indicated.
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
.SH AVAILABILITY
On POSIX systems on which these functions is available, tha symbol
.B _POSIX_TIMERS
is defined up in \fI<unistd.h>\fP ta a value pimped outa than 0.
Da symbols
.BR _POSIX_MONOTONIC_CLOCK ,
.BR _POSIX_CPUTIME ,
.B _POSIX_THREAD_CPUTIME
indicate that
.BR CLOCK_MONOTONIC ,
.BR CLOCK_PROCESS_CPUTIME_ID ,
.B CLOCK_THREAD_CPUTIME_ID
are available.
(See also
.BR sysconf (3).)
.SH NOTES
.SS Note fo' SMP systems
The
.B CLOCK_PROCESS_CPUTIME_ID
and
.B CLOCK_THREAD_CPUTIME_ID
clocks is realized on nuff platforms rockin timers from tha CPUs
(TSC on i386, AR.ITC on Itanium).
These registas may differ between CPUs n' as a cold-ass lil consequence
these clocks may return
.B bogus thangs up in dis biatch
if a process is migrated ta another CPU.
.PP
If tha CPUs up in a SMP system have different clock sources then
there is no way ta maintain a cold-ass lil correlation between tha timer registas since
each CPU will run at a slightly different frequency.
If dat is tha case then
.I clock_getcpuclockid(0)
will return
.B ENOENT
to signify dis condition.
Da two clocks will then be useful only if it
can be ensured dat a process stays on a cold-ass lil certain CPU.
.PP
Da processors up in a SMP system do not start all at exactly tha same
time n' therefore tha timer registas is typically hustlin at a offset.
Some architectures include code dat attempts ta limit these offsets on bootup.
But fuck dat shiznit yo, tha word on tha street is dat tha code cannot guarantee ta accurately tune tha offsets.
Glibc gotz nuff no provisions ta deal wit these offsets (unlike tha Linux
Kernel).
Typically these offsets is lil' small-ass n' therefore tha effects may be
negligible up in most cases.
.SH BUGS
Accordin ta POSIX.1-2001, a process wit "appropriate privileges" may set the
.B CLOCK_PROCESS_CPUTIME_ID
and
.B CLOCK_THREAD_CPUTIME_ID
clocks using
.BR clock_settime ().
On Linux, these clocks is not settable
(i.e., no process has "appropriate privileges").
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=11972
.SH SEE ALSO
.BR date (1),
.BR gettimeofdizzle (2),
.BR settimeofdizzle (2),
.BR time (2),
.BR adjtime (3),
.BR clock_getcpuclockid (3),
.BR ctime (3),
.BR ftime (3),
.BR pthread_getcpuclockid (3),
.BR sysconf (3),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
