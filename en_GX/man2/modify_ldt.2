.\" Copyright (c) 1995 Mike Chastain (mec@duracef.shout.net), 22 July 1995.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH MODIFY_LDT 2 2012-07-13 "Linux" "Linux Programmerz Manual"
.SH NAME
modify_ldt \- git or set ldt
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.sp
.BI "int modify_ldt(int " "func" ", void *" "ptr" ", unsigned long " "bytecount" );
.fi

.IR Note :
There is no glibc wrapper fo' dis system call; peep NOTES.
.SH DESCRIPTION
.BR modify_ldt ()
readz or writes tha local descriptor table (ldt) fo' a process.
Da ldt be a per-process memory pimpment table used by tha i386 processor.
For mo' shiznit on dis table, peep a Intel 386 processor handbook.
.PP
When
.I func
is 0,
.BR modify_ldt ()
readz tha ldt tha fuck into tha memory pointed ta by
.IR ptr .
Da number of bytes read is tha smalla of
.I bytecount
and tha actual size of tha ldt.
.PP
When
.I func
is 1,
.BR modify_ldt ()
modifies one ldt entry.
.I ptr
points ta a
.I user_desc
structure
and
.I bytecount
must equal tha size of dis structure.
.\"
.\" FIXME ? say suttin' bout func == 2 n' func == 0x11?
.\" In Linux 2.4, func == 2 returned "the default ldt"
.\" In Linux 2.6, func == 2 be a nop, returnin a zeroed up structure.
.\" Linux 2.4 n' 2.6 implement a operation fo' func == 0x11

The
.I user_desc
structure is defined up in \fI<asm/ldt.h>\fP as:
.in +4n
.nf

struct user_desc {
    unsigned int  entry_number;
    unsigned long base_addr;
    unsigned int  limit;
    unsigned int  seg_32bit:1;
    unsigned int  contents:2;
    unsigned int  read_exec_only:1;
    unsigned int  limit_in_pages:1;
    unsigned int  seg_not_present:1;
    unsigned int  useable:1;
};
.fi
.in
.PP
In Linux 2.4 n' earlier, dis structure was named
.IR modify_ldt_ldt_s .
.\" .PP
.\" Da ldt is specific fo' tha callin process fo' realz. Any attempts ta chizzle
.\" tha ldt ta include tha address space of another process or tha kernel
.\" will result up in a segmentation violation when tryin ta access tha memory
.\" outside of tha process address space. Da memory protection is enforced
.\" all up in tha pagin layer.
.SH RETURN VALUE
On success,
.BR modify_ldt ()
returns either tha actual number of bytes read (for reading)
or 0 (for writing).
On failure,
.BR modify_ldt ()
returns \-1 n' sets
.I errno
to indicate tha error.
.SH ERRORS
.TP
.B EFAULT
.I ptr
points outside tha address space.
.TP
.B EINVAL
.I ptr
is 0,
or
.I func
is 1 and
.I bytecount
is not equal ta tha size of tha structure
.IR modify_ldt_ldt_s ,
or
.I func
is 1 n' tha freshly smoked up ldt entry has invalid joints.
.TP
.B ENOSYS
.I func
is neither 0 nor 1.
.SH CONFORMING TO
This call is Linux-specific n' should not be used up in programs intended
to be portable.
.SH NOTES
Glibc do not provide a wrapper fo' dis system call; call it using
.BR syscall (2).
.SH SEE ALSO
.BR vm86 (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
