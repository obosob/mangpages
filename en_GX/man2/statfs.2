.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified 2003-08-17 by Walta Harms
.\" Modified 2004-06-23 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.TH STATFS 2 2010-11-21 "Linux" "Linux Programmerz Manual"
.SH NAME
statfs, fstatfs \- git file system statistics
.SH SYNOPSIS
.BR "#include <sys/vfs.h>    " "/* or <sys/statfs.h> */"
.sp
.BI "int statfs(const char *" path ", struct statfs *" buf );
.br
.BI "int fstatfs(int " fd ", struct statfs *" buf );
.SH DESCRIPTION
Da function
.BR statfs ()
returns shiznit on some mounted file system.
.I path
is tha pathname of any file within tha mounted file system.
.I buf
is a pointa ta a
.I statfs
structure defined approximately as bigs up:

.in +4n
.nf
#if __WORDSIZE == 32		/* System word size */
# define __SWORD_TYPE           int
#else /* __WORDSIZE == 64 */
# define __SWORD_TYPE		long int
#endif

struct statfs {
    __SWORD_TYPE f_type;    /* type of file system (see below) */
    __SWORD_TYPE f_bsize;   /* optimal transfer block size */
    fsblkcnt_t   f_blocks;  /* total data blocks up in file system */
    fsblkcnt_t   f_bfree;   /* free blocks up in fs */
    fsblkcnt_t   f_bavail;  /* free blocks available to
                               unprivileged user */
    fsfilcnt_t   f_files;   /* total file nodes up in file system */
    fsfilcnt_t   f_ffree;   /* free file nodes up in fs */
    fsid_t       f_fsid;    /* file system id */
    __SWORD_TYPE f_namelen; /* maximum length of filenames */
    __SWORD_TYPE f_frsize;  /* fragment size (since Linux 2.6) */
    __SWORD_TYPE f_spare[5];
};

File system types:

   ADFS_SUPER_MAGIC      0xadf5
   AFFS_SUPER_MAGIC      0xADFF
   BEFS_SUPER_MAGIC      0x42465331
   BFS_MAGIC             0x1BADFACE
   CIFS_MAGIC_NUMBER     0xFF534D42
   CODA_SUPER_MAGIC      0x73757245
   COH_SUPER_MAGIC       0x012FF7B7
   CRAMFS_MAGIC          0x28cd3d45
   DEVFS_SUPER_MAGIC     0x1373
   EFS_SUPER_MAGIC       0x00414A53
   EXT_SUPER_MAGIC       0x137D
   EXT2_OLD_SUPER_MAGIC  0xEF51
   EXT2_SUPER_MAGIC      0xEF53
   EXT3_SUPER_MAGIC      0xEF53
   EXT4_SUPER_MAGIC      0xEF53
   HFS_SUPER_MAGIC       0x4244
   HPFS_SUPER_MAGIC      0xF995E849
   HUGETLBFS_MAGIC       0x958458f6
   ISOFS_SUPER_MAGIC     0x9660
   JFFS2_SUPER_MAGIC     0x72b6
   JFS_SUPER_MAGIC       0x3153464a
   MINIX_SUPER_MAGIC     0x137F /* orig. minix */
   MINIX_SUPER_MAGIC2    0x138F /* 30 char minix */
   MINIX2_SUPER_MAGIC    0x2468 /* minix V2 */
   MINIX2_SUPER_MAGIC2   0x2478 /* minix V2, 30 char names */
   MSDOS_SUPER_MAGIC     0x4d44
   NCP_SUPER_MAGIC       0x564c
   NFS_SUPER_MAGIC       0x6969
   NTFS_SB_MAGIC         0x5346544e
   OPENPROM_SUPER_MAGIC  0x9fa1
   PROC_SUPER_MAGIC      0x9fa0
   QNX4_SUPER_MAGIC      0x002f
   REISERFS_SUPER_MAGIC  0x52654973
   ROMFS_MAGIC           0x7275
   SMB_SUPER_MAGIC       0x517B
   SYSV2_SUPER_MAGIC     0x012FF7B6
   SYSV4_SUPER_MAGIC     0x012FF7B5
   TMPFS_MAGIC           0x01021994
   UDF_SUPER_MAGIC       0x15013346
   UFS_MAGIC             0x00011954
   STDDEVICE_SUPER_MAGIC 0x9fa2
   VXFS_SUPER_MAGIC      0xa501FCF5
   XENIX_SUPER_MAGIC     0x012FF7B4
   XFS_SUPER_MAGIC       0x58465342
   _XIAFS_SUPER_MAGIC    0x012FD16D
.fi
.in
.PP
No Muthafucka knows what
.I f_fsid
is supposed ta contain (but peep below).
.PP
Fieldz dat is undefined fo' a particular file system is set ta 0.
.BR fstatfs ()
returns tha same ol' dirty shiznit bout a open file referenced by descriptor
.IR fd .
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
.RB ( statfs ())
Search permission is denied fo' a cold-ass lil component of tha path prefix of
.IR path .
(See also
.BR path_resolution (7).)
.TP
.B EBADF
.RB ( fstatfs ())
.I fd
is not a valid open file descriptor.
.TP
.B EFAULT
.I buf
or
.I path
points ta a invalid address.
.TP
.B EINTR
This call was interrupted by a signal.
.TP
.B EIO
An I/O error occurred while readin from tha file system.
.TP
.B ELOOP
.RB ( statfs ())
Too nuff symbolic links was encountered up in translating
.IR path .
.TP
.B ENAMETOOLONG
.RB ( statfs ())
.I path
is too long.
.TP
.B ENOENT
.RB ( statfs ())
Da file referred ta by
.I path
does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSYS
Da file system do not support dis call.
.TP
.B ENOTDIR
.RB ( statfs ())
A component of tha path prefix of
.I path
is not a gangbangin' finger-lickin' directory.
.TP
.B EOVERFLOW
Some joints was too big-ass ta be represented up in tha returned struct.
.SH CONFORMING TO
Linux-specific.
Da Linux
.BR statfs ()
was inspired by tha 4.4BSD one
(but they do not use tha same structure).
.SH NOTES
Da original gangsta Linux
.BR statfs ()
and
.BR fstatfs ()
system calls was not designed wit mad big-ass file sizes up in mind.
Subsequently, Linux 2.6
added new
.BR statfs64 ()
and
.BR fstatfs64 ()
system calls dat employ a freshly smoked up structure,
.IR statfs64 .
Da freshly smoked up structure gotz nuff tha same ol' dirty fieldz as tha original
.I statfs
structure yo, but tha sizez of various fieldz is increased,
to accommodate big-ass file sizes.
Da glibc
.BR statfs ()
and
.BR fstatfs ()
wrapper functions transparently deal wit tha kernel differences.

Some systems only have \fI<sys/vfs.h>\fP, other systems also have
\fI<sys/statfs.h>\fP, where tha forma includes tha latter.
So it seems
includin tha forma is tha dopest chizzle.

LSB has deprecated tha library calls
.BR statfs ()
and
.BR fstatfs ()
and  drops some lyrics ta our asses ta use
.BR statvfs (2)
and
.BR fstatvfs (2)
instead.
.SS Da f_fsid field
Solaris, Irix n' POSIX gotz a system call
.BR statvfs (2)
that returns a
.I "struct statvfs"
(defined in
.IR <sys/statvfs.h> )
containin an
.I "unsigned long"
.IR f_fsid .
Linux, SunOS, HP-UX, 4.4BSD gotz a system call
.BR statfs ()
that returns a
.I "struct statfs"
(defined in
.IR <sys/vfs.h> )
containin a
.I fsid_t
.IR f_fsid ,
where
.I fsid_t
is defined as
.IR "struct { int val[2]; }" .
Da same holdz fo' FreeBSD, except dat it uses tha include file
.IR <sys/mount.h> .

Da general scam is that
.I f_fsid
gotz nuff some random shiznit such dat tha pair
.RI ( f_fsid , ino )
uniquely determines a gangbangin' file.
Some operatin systems use (a variation on) tha thang number, or tha thang number
combined wit tha file-system type.
Several OSes restrict givin up the
.I f_fsid
field ta tha superuser only (and zero it fo' unprivileged users),
because dis field is used up in tha filehandle of tha file system
when NFS-exported, n' givin it up be a securitizzle concern.
.LP
Under some operatin systems the
.I fsid
can be used as second argument ta the
.BR sysfs (2)
system call.
.SH SEE ALSO
.BR stat (2),
.BR statvfs (2),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
