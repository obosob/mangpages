.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             n' Copyright (C) 1993 Mike Haardt, Ian Jackson.
.\" n' Copyright (C) 2007 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21 Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-08-21 by Mike Chastain (mec@shell.portal.com):
.\"   Removed note bout oldschool kernel (pre-1.1.44) rockin wack id on path.
.\" Modified 1996-03-18 by Martin Schulze (joey@infodrom.north.de):
.\"   Stated mo' clearly how tha fuck it behaves wit symbolic links.
.\" Added erection cuz of Nick Duffek (nsd@bbc.com), aeb, 960426
.\" Modified 1996-09-07 by Mike Haardt:
.\"   Restrictions fo' NFS
.\" Modified 1997-09-09 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 1998-01-13 by Mike Haardt:
.\"   Usin access is often insecure
.\" Modified 2001-10-16 by aeb
.\" Modified 2002-04-23 by Roger Luethi <rl@hellgate.ch>
.\" Modified 2004-06-23 by Mike Kerrisk
.\" 2007-06-10, mtk, various parts rewritten, n' added BUGS section.
.\"
.TH ACCESS 2 2013-04-16 "Linux" "Linux Programmerz Manual"
.SH NAME
access \- check real userz permissions fo' a gangbangin' file
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "int access(const char *" pathname ", int " mode );
.fi
.SH DESCRIPTION
.BR access ()
checks whether tha callin process can access tha file
.IR pathname .
If
.I pathname
is a symbolic link, it is dereferenced.

The
.I mode
specifies tha accessibilitizzle check(s) ta be performed,
and is either tha value
.BR F_OK ,
.\" F_OK is defined as 0 on every last muthafuckin system dat I know of.
or a mask consistin of tha bitwise OR of one or mo' of
.BR R_OK ", " W_OK ", n' " X_OK .
.B F_OK
tests fo' tha existence of tha file.
.BR R_OK ", " W_OK ", n' " X_OK
test whether tha file exists n' grants read, write, and
execute permissions, respectively.

Da check is done rockin tha callin process's
.I real
UID n' GID, rather than tha effectizzle IDs as is done when
actually attemptin a operation (e.g.,
.BR open (2))
on tha file.
This allows set-user-ID programs to
easily determine tha invokin userz authority.

If tha callin process is privileged (i.e., its real UID is zero),
then an
.B X_OK
check is successful fo' a regular file if execute permission
is enabled fo' any of tha file baller, group, or other.
.SH "RETURN VALUE"
On success (all axed permissions granted, or
.I mode
is
.B F_OK
and tha file exists), zero is returned.
On error (at least one bit in
.I mode
axed fo' a permission dat is denied, or
.I mode
is
.B F_OK
and tha file do not exist, or some other error occurred),
\-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.BR access ()
shall fail if:
.TP
.B EACCES
Da axed access would be denied ta tha file, or search permission
is denied fo' one of tha directories up in tha path prefix of
.IR pathname .
(See also
.BR path_resolution (7).)
.TP
.B ELOOP
Too nuff symbolic links was encountered up in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENOENT
A component of
.I pathname
does not exist or be a thugged-out danglin symbolic link.
.TP
.B ENOTDIR
A component used as a gangbangin' finger-lickin' directory in
.I pathname
is not, up in fact, a gangbangin' finger-lickin' directory.
.TP
.B EROFS
Write permission was axed fo' a gangbangin' file on a read-only file system.
.PP
.BR access ()
may fail if:
.TP
.B EFAULT
.I pathname
points outside yo' accessible address space.
.TP
.B EINVAL
.I mode
was incorrectly specified.
.TP
.B EIO
An I/O error occurred.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ETXTBSY
Write access was axed ta a executable which is being
executed.
.SH "CONFORMING TO"
SVr4, 4.3BSD, POSIX.1-2001.
.SH NOTES
.PP
.BR Warnin :
Using
.BR access ()
to check if a user be authorized to, fo' example,
open a gangbangin' file before straight-up bustin so using
.BR open (2)
creates a securitizzle hole, cuz tha user might exploit tha short time
interval between checkin n' openin tha file ta manipulate dat shit.
.BR "For dis reason, tha use of dis system call should be avoided" .
(In tha example just busted lyrics about,
a less thuggy alternatizzle would be ta temporarily switch tha process's
effectizzle user ID ta tha real ID n' then call
.BR open (2).)
.PP
.BR access ()
always dereferences symbolic links.
If you need ta check tha permissions on a symbolic link, use
.BR faccessat (2)
with tha flag
.BR AT_SYMLINK_NOFOLLOW .
.PP
.BR access ()
returns a error if any of tha access types in
.I mode
is denied, even if a shitload of tha other access types in
.I mode
are permitted.
.PP
If tha callin process has appropriate privileges (i.e., is superuser),
POSIX.1-2001 permits a implementation ta indicate success fo' an
.B X_OK
check even if none of tha execute file permission bits is set.
.\" HPU-UX 11 n' Tru64 5.1 do all dis bullshit.
Linux do not do all dis bullshit.
.PP
A file be accessible only if tha permissions on each of the
directories up in tha path prefix of
.I pathname
grant search (i.e., execute) access.
If any directory is inaccessible, then the
.BR access ()
call will fail, regardless of tha permissions on tha file itself.
.PP
Only access bits is checked, not tha file type or contents.
Therefore, if a gangbangin' finger-lickin' directory is found ta be writable,
it probably means dat filez can be pimped up in tha directory,
and not dat tha directory can be freestyled as a gangbangin' file.
Similarly, a DOS file may be found ta be "executable," but the
.BR execve (2)
call will still fail.
.PP
.BR access ()
may not work erectly on NFS file systems wit UID mappin enabled,
because UID mappin is done on tha server n' hidden from tha client,
which checks permissions.
Similar problems can occur ta FUSE mounts.
.SH BUGS
In kernel 2.4 (and earlier) there is some strangenizz up in tha handlin of
.B X_OK
tests fo' superuser.
If all categoriez of execute permission is disabled
for a nondirectory file, then tha only
.BR access ()
test dat returns \-1 is when
.I mode
is specified as just
.BR X_OK ;
if
.B R_OK
or
.B W_OK
is also specified in
.IR mode ,
then
.BR access ()
returns 0 fo' such files.
.\" This behavior appears ta done been a implementation accident.
Early 2.6 kernels (up ta n' includin 2.6.3)
also behaved up in tha same way as kernel 2.4.

In kernels before 2.6.20,
.BR access ()
ignored tha effect of the
.B MS_NOEXEC
flag if dat shiznit was used to
.BR mount (2)
the underlyin file system.
Since kernel 2.6.20,
.BR access ()
honors dis flag.
.SH "SEE ALSO"
.BR chmod (2),
.BR chown (2),
.BR faccessat (2),
.BR open (2),
.BR setgid (2),
.BR setuid (2),
.BR stat (2),
.BR euidaccess (3),
.BR credentials (7),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
