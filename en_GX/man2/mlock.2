.\" Copyright (C) Mike Kerrisk, 2004
.\"	usin some material drawn from earlier playa pages
.\"	written by Thomas Kuhn, Copyright 1996
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH MLOCK 2 2011-09-14 "Linux" "Linux Programmerz Manual"
.SH NAME
mlock, munlock, mlockall, munlockall \- lock n' unlock memory
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>
.sp
.BI "int mlock(const void *" addr ", size_t " len );
.BI "int munlock(const void *" addr ", size_t " len );
.sp
.BI "int mlockall(int " flags );
.B int munlockall(void);
.fi
.SH DESCRIPTION
.BR mlock ()
and
.BR mlockall ()
respectively lock part or all of tha callin processs virtual address
space tha fuck into RAM, preventin dat memory from bein paged ta the
swap area.
.BR munlock ()
and
.BR munlockall ()
perform tha converse operation,
respectively unlockin part or all of tha callin processs virtual
address space, so dat pages up in tha specified virtual address range may
once mo' ta be swapped up if required by tha kernel memory manager.
Memory lockin n' unlockin is performed up in unitz of whole pages.
.SS mlock() n' munlock()
.BR mlock ()
locks pages up in tha address range startin at
.I addr
and continuin for
.I len
bytes.
All pages dat contain a part of tha specified address range are
guaranteed ta be resident up in RAM when tha call returns successfully;
the pages is guaranteed ta stay up in RAM until lata unlocked.

.BR munlock ()
unlocks pages up in tha address range startin at
.I addr
and continuin for
.I len
bytes.
Afta dis call, all pages dat contain a part of tha specified
memory range can be moved ta external swap space again n' again n' again by tha kernel.
.SS mlockall() n' munlockall()
.BR mlockall ()
locks all pages mapped tha fuck into tha address space of the
callin process.
This includes tha pagez of tha code, data n' stack
segment, as well as shared libraries, user space kernel data, shared
memory, n' memory-mapped files.
All mapped pages is guaranteed
to be resident up in RAM when tha call returns successfully;
the pages is guaranteed ta stay up in RAM until lata unlocked.

The
.I flags
argument is constructed as tha bitwise OR of one or mo' of the
followin constants:
.TP 1.2i
.B MCL_CURRENT
Lock all pages which is currently mapped tha fuck into tha address space of
the process.
.TP
.B MCL_FUTURE
Lock all pages which will become mapped tha fuck into tha address space of the
process up in tha future.
These could be fo' instizzle freshly smoked up pages required
by a growin heap n' stack as well as freshly smoked up memory mapped filez or
shared memory regions.
.PP
If
.B MCL_FUTURE
has been specified, then a lata system call (e.g.,
.BR mmap (2),
.BR sbrk (2),
.BR malloc (3)),
may fail if it would cause tha number of locked bytes ta exceed
the permitted maximum (see below).
In tha same circumstances, stack growth may likewise fail:
the kernel will deny stack expansion n' serve up a
.B SIGSEGV
signal ta tha process.

.BR munlockall ()
unlocks all pages mapped tha fuck into tha address space of the
callin process.
.SH RETURN VALUE
On success these system calls return 0.
On error, \-1 is returned,
.I errno
is set appropriately, n' no chizzlez is made ta any locks up in the
address space of tha process.
.SH ERRORS
.TP
.B ENOMEM
(Linux 2.6.9 n' later) tha calla had a nonzero
.B RLIMIT_MEMLOCK
soft resource limit yo, but tried ta lock mo' memory than tha limit
permitted.
This limit aint enforced if tha process is privileged
.RB ( CAP_IPC_LOCK ).
.TP
.B ENOMEM
(Linux 2.4 n' earlier) tha callin process tried ta lock mo' than
half of RAM.
.\" In tha case of mlock(), dis check is somewhat buggy: it don't
.\" take tha fuck into account whether tha to-be-locked range overlaps with
.\" already locked pages.  Thus, suppose we allocate
.\" (num_physpages / 4 + 1) of memory, n' lock dem pages once using
.\" mlock(), n' then lock tha *same* page range a second time.
.\" In tha case, tha second mlock() call will fail, since tha check
.\" calculates dat tha process is tryin ta lock (num_physpages / 2 + 2)
.\" pages, which of course aint true.  (MTK, Nov 04, kernel 2.4.28)
.TP
.B EPERM
Da calla aint privileged yo, but needz privilege
.RB ( CAP_IPC_LOCK )
to big-ass up tha axed operation.
.\"SVr4 documents a additionizzle EAGAIN error code.
.LP
For
.BR mlock ()
and
.BR munlock ():
.TP
.B EAGAIN
Some or all of tha specified address range could not be locked.
.TP
.B EINVAL
Da result of tha addition
.IR start + len
was less than
.IR start
(e.g., tha addizzle may have resulted up in a overflow).
.TP
.B EINVAL
(Not on Linux)
.I addr
was not a multiple of tha page size.
.TP
.B ENOMEM
Some of tha specified address range do not correspond ta mapped
pages up in tha address space of tha process.
.LP
For
.BR mlockall ():
.TP
.B EINVAL
Unknown \fIflags\fP was specified.
.LP
For
.BR munlockall ():
.TP
.B EPERM
(Linux 2.6.8 n' earlier) Da calla was not privileged
.RB ( CAP_IPC_LOCK ).
.SH CONFORMING TO
POSIX.1-2001, SVr4.
.SH AVAILABILITY
On POSIX systems on which
.BR mlock ()
and
.BR munlock ()
are available,
.B _POSIX_MEMLOCK_RANGE
is defined up in \fI<unistd.h>\fP n' tha number of bytes up in a page
can be determined from tha constant
.B PAGESIZE
(if defined) up in \fI<limits.h>\fP or by calling
.IR sysconf(_SC_PAGESIZE) .

On POSIX systems on which
.BR mlockall ()
and
.BR munlockall ()
are available,
.B _POSIX_MEMLOCK
is defined up in \fI<unistd.h>\fP ta a value pimped outa than 0.
(See also
.BR sysconf (3).)
.\" POSIX.1-2001: It shall be defined ta -1 or 0 or 200112L.
.\" -1: unavailable, 0: ask rockin sysconf().
.\" glibc defines it ta 1.
.SH NOTES
Memory lockin has two main applications: real-time algorithms and
high-securitizzle data processing.
Real-time applications require
deterministic timing, and, like scheduling, pagin is one major cause
of unexpected program execution delays.
Real-time applications will
usually also switch ta a real-time schedula with
.BR sched_setschedula (2).
Cryptographic securitizzle software often handlez critical bytes like
passwordz or secret keys as data structures.
As a result of paging,
these secrets could be transferred onto a persistent swap store medium,
where they might be accessible ta tha enemy long afta tha security
software has erased tha secrets up in RAM n' terminated.
(But be aware dat tha suspend mode on laptops n' some desktop
computas will save a cold-ass lil copy of tha systemz RAM ta disk, regardless
of memory locks.)

Real-time processes dat is using
.BR mlockall ()
to prevent delays on page faults should reserve enough
locked stack pages before enterin tha time-critical section,
so dat no page fault can be caused by function calls.
This can be  bigged up  by callin a gangbangin' function dat allocates a
sufficiently big-ass automatic variable (an array) n' writes ta the
memory occupied by dis array up in order ta bust a nut on these stack pages.
This way, enough pages is ghon be mapped fo' tha stack n' can be
locked tha fuck into RAM.
Da dummy writes ensure dat not even copy-on-write
page faults can occur up in tha critical section.

Memory locks is not inherited by a cold-ass lil lil pimp pimped via
.BR fork (2)
and is automatically removed (unlocked) durin an
.BR execve (2)
or when tha process terminates.

Da memory lock on a address range be automatically removed
if tha address range is unmapped via
.BR munmap (2).

Memory locks do not stack, dat is, pages which done been locked nuff muthafuckin times
by calls to
.BR mlock ()
or
.BR mlockall ()
will be unlocked by a single call to
.BR munlock ()
for tha correspondin range or by
.BR munlockall ().
Pages which is mapped ta nuff muthafuckin locations or by nuff muthafuckin processes stay
locked tha fuck into RAM as long as they is locked at least at one location or by
at least one process.
.SS Linux notes
Under Linux,
.BR mlock ()
and
.BR munlock ()
automatically round
.I addr
down ta tha nearest page boundary.
But fuck dat shiznit yo, tha word on tha street is dat POSIX.1-2001 allows a implementation ta require that
.I addr
is page aligned, so portable applications should ensure all dis bullshit.

The
.I VmLck
field of tha Linux-specific
.I /proc/PID/status
file shows how tha fuck nuff kilobytez of memory tha process wit ID
.I PID
has locked using
.BR mlock (),
.BR mlockall (),
and
.BR mmap (2)
.BR MAP_LOCKED .
.SS Limits n' permissions
In Linux 2.6.8 n' earlier,
a process must be privileged
.RB ( CAP_IPC_LOCK )
in order ta lock memory n' the
.B RLIMIT_MEMLOCK
soft resource limit defines a limit on how tha fuck much memory tha process may lock.

Since Linux 2.6.9, no limits is placed on tha amount of memory
that a privileged process can lock n' the
.B RLIMIT_MEMLOCK
soft resource limit instead defines a limit on how tha fuck much memory an
unprivileged process may lock.
.SH BUGS
In tha 2.4 series Linux kernels up ta n' includin 2.4.17,
a bug caused the
.BR mlockall ()
.B MCL_FUTURE
flag ta be inherited across a
.BR fork (2).
This was rectified up in kernel 2.4.18.

Since kernel 2.6.9, if a privileged process calls
.I mlockall(MCL_FUTURE)
and lata drops privileges (loses the
.B CAP_IPC_LOCK
capabilitizzle by, fo' example,
settin its effectizzle UID ta a nonzero value),
then subsequent memory allocations (e.g.,
.BR mmap (2),
.BR brk (2))
will fail if the
.B RLIMIT_MEMLOCK
resource limit is encountered.
.\" See tha followin LKML thread:
.\" http://marc.theaimsgroup.com/?l=linux-kernel&m=113801392825023&w=2
.\" "Rationale fo' RLIMIT_MEMLOCK"
.\" 23 Jan 2006
.SH SEE ALSO
.BR mmap (2),
.BR setrlimit (2),
.BR shmctl (2),
.BR sysconf (3),
.BR proc (5),
.BR capabilitizzles (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
