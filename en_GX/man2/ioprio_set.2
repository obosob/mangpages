.\" Copyright (c) Internationistic Businizz Machines orp., 2006
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" This program is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Right back up in yo muthafuckin ass. See
.\" tha GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" HISTORY:
.\" 2006-04-27, pimped by Eduardo M. Fleury <efleury@br.ibm.com>
.\" wit various additions by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\"
.TH IOPRIO_SET 2 2013-02-12 "Linux" "Linux Programmerz Manual"
.SH NAME
ioprio_get, ioprio_set \- get/set I/O schedulin class n' priority
.SH SYNOPSIS
.nf
.BI "int ioprio_get(int " which ", int " whoz ass );
.BI "int ioprio_set(int " which ", int " whoz ass ", int " ioprio );
.fi

.IR Note :
There is no glibc wrappers fo' these system calls; peep NOTES.
.SH DESCRIPTION
The
.BR ioprio_get ()
and
.BR ioprio_set ()
system calls respectively git n' set tha I/O schedulin class and
prioritizzle of one or mo' threads.

The
.I which
and
.I who
arguments identify tha thread(s) on which tha system
calls operate.
The
.I which
argument determines how
.I who
is interpreted, n' has one of tha followin joints:
.TP
.B IOPRIO_WHO_PROCESS
.I who
is a process ID or thread ID identifyin a single process or thread.
If
.I who
is 0, then operate on tha callin thread.
.TP
.B IOPRIO_WHO_PGRP
.I who
is a process crew ID identifyin all tha thugz of a process group.
If
.I who
is 0, then operate on tha process crew of which tha calla be a member.
.TP
.B IOPRIO_WHO_USER
.I who
is a user ID identifyin all of tha processes that
have a matchin real UID.
.\" FIXME who==0 need ta be documented,
.\" See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=652443
.PP
If
.I which
is specified as
.B IOPRIO_WHO_PGRP
or
.B IOPRIO_WHO_USER
when calling
.BR ioprio_get (),
and mo' than one process matches
.IR whoz ass ,
then tha returned prioritizzle is ghon be tha highest one found among
all of tha matchin processes.
One prioritizzle is holla'd ta be
higher than another one if it belongs ta a higher priority
class
.RB ( IOPRIO_CLASS_RT
is tha highest prioritizzle class;
.B IOPRIO_CLASS_IDLE
is tha lowest)
or if it belongs ta tha same prioritizzle class as tha other process but
has a higher prioritizzle level (a lower prioritizzle number means a
higher prioritizzle level).

The
.I ioprio
argument given to
.BR ioprio_set ()
is a lil' bit mask dat specifies both tha schedulin class n' the
prioritizzle ta be assigned ta tha target process(es).
Da followin macros is used fo' assemblin n' dissecting
.I ioprio
values:
.TP
.BI IOPRIO_PRIO_VALUE( class ", " data )
Given a scheduling
.I class
and priority
.RI ( data ),
this macro combines tha two joints ta produce an
.I ioprio
value, which is returned as tha result of tha macro.
.TP
.BI IOPRIO_PRIO_CLASS( mask )
Given
.I mask
(an
.I ioprio
value), dis macro returns its I/O class component, dat is,
one of tha joints
.BR IOPRIO_CLASS_RT ,
.BR IOPRIO_CLASS_BE ,
or
.BR IOPRIO_CLASS_IDLE .
.TP
.BI IOPRIO_PRIO_DATA( mask )
Given
.I mask
(an
.I ioprio
value), dis macro returns its priority
.RI ( data )
component.
.PP
See tha NOTES section fo' more
information on schedulin classes n' priorities.

I/O prioritizzles is supported fo' readz n' fo' synchronous
.RB ( O_DIRECT ,
.BR O_SYNC )
writes.
I/O prioritizzles is not supported fo' asynchronous
writes cuz they is issued outside tha context of tha program
dirtyin tha memory, n' thus program-specific prioritizzles do not apply.
.SH RETURN VALUE
On success,
.BR ioprio_get ()
returns the
.I ioprio
value of tha process wit highest I/O prioritizzle of any of tha processes
that match tha criteria specified in
.I which
and
.IR whoz ass .
On error, \-1 is returned, and
.I errno
is set ta indicate tha error.
.PP
On success,
.BR ioprio_set ()
returns 0.
On error, \-1 is returned, and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EINVAL
Invalid value for
.I which
or
.IR ioprio .
Refer ta tha NOTES section fo' available scheduler
classes n' prioritizzle levels for
.IR ioprio .
.TP
.B EPERM
Da callin process aint gots tha privilege needed ta assign this
.I ioprio
to tha specified process(es).
See tha NOTES section fo' mo' shiznit on required
privileges for
.BR ioprio_set ().
.TP
.B ESRCH
No process(es) could be found dat matched tha justification in
.I which
and
.IR whoz ass .
.SH VERSIONS
These system calls done been available on Linux since
kernel 2.6.13.
.SH CONFORMING TO
These system calls is Linux-specific.
.SH NOTES
Glibc do not provide a wrapper fo' these system calls; call dem using
.BR syscall (2).

Two or mo' processes or threadz can share a I/O context.
This is ghon be tha case when
.BR clone (2)
was called wit the
.B CLONE_IO
flag.
But fuck dat shiznit yo, tha word on tha street is dat by default, tha distinct threadz of a process will
.B not
share tha same I/O context.
This means dat if you wanna chizzle tha I/O
prioritizzle of all threadz up in a process, you may need ta call
.BR ioprio_set ()
on each of tha threads.
Da thread ID dat you would need fo' dis operation
is tha one dat is returned by
.BR gettid (2)
or
.BR clone (2).

These system calls have a effect only when used
in conjunction wit a I/O schedula dat supports I/O priorities.
As at kernel 2.6.17 tha only such schedula is tha All Out Fair Queuing
(CFQ) I/O scheduler.
.SS Selectin a I/O scheduler
I/O Schedulaz is selected on a per-device basis via tha special
file
.IR /sys/block/<device>/queue/schedula .

One can view tha current I/O schedula via the
.I /sys
file system.
For example, tha followin command
displays a list of all schedulaz currently loaded up in tha kernel:
.sp
.RS
.nf
.RB "$" " pussaaaaay /sys/block/hda/queue/scheduler"
noop anticipatory deadline [cfq]
.fi
.RE
.sp
Da schedula surrounded by brackets is tha one actually
in use fo' tha device
.RI ( hda
in tha example).
Settin another schedula is done by freestylin tha name of the
new schedula ta dis file.
For example, tha followin command will set the
schedula fo' the
.I hda
device to
.IR cfq :
.sp
.RS
.nf
.RB "$" " su"
Password:
.RB "#" " echo cfq > /sys/block/hda/queue/scheduler"
.fi
.RE
.SS Da All Out Fair Queuin (CFQ) I/O scheduler
Since v3 (aka CFQ Time Sliced) CFQ implements
I/O sick levels similar ta them
of CPU scheduling.
These sick levels is grouped up in three schedulin classes
each one containin one or mo' prioritizzle levels:
.TP
.BR IOPRIO_CLASS_RT " (1)"
This is tha real-time I/O class.
This schedulin class is given
higher prioritizzle than any other class:
processes from dis class are
given first access ta tha disk every last muthafuckin time.
Thus dis I/O class need ta be used wit some
care: one I/O real-time process can starve tha entire system.
Within tha real-time class,
there is 8 levelz of class data (priority) dat determine exactly
how much time dis process needz tha disk fo' on each service.
Da highest real-time prioritizzle level is 0; tha lowest is 7.
In tha future dis might chizzle ta be mo' directly mappable to
performance, by passin up in a thugged-out desired data rate instead.
.TP
.BR IOPRIO_CLASS_BE " (2)"
This is tha best-effort schedulin class,
which is tha default fo' any process
that aint set a specific I/O priority.
Da class data (priority) determines how tha fuck much
I/O bandwidth tha process will get.
Best-effort prioritizzle levels is analogous ta CPU sick joints
(see
.BR getprioritizzle (2)).
Da prioritizzle level determines a prioritizzle relative
to other processes up in tha best-effort schedulin class.
Prioritizzle levels range from 0 (highest) ta 7 (lowest).
.TP
.BR IOPRIO_CLASS_IDLE " (3)"
This is tha idle schedulin class.
Processes hustlin at dis level only git I/O
time when no-one else needz tha disk.
Da idle class has no class data.
Attention is required when assignin dis prioritizzle class ta a process,
since it may become starved if higher prioritizzle processes are
constantly accessin tha disk.
.PP
Refer to
.I Documentation/block/ioprio.txt
for mo' shiznit on tha CFQ I/O Schedula n' a example program.
.SS Required permissions ta set I/O priorities
Permission ta chizzle a processs prioritizzle is granted or denied based
on two assertions:
.TP
.B "Process ballership"
An unprivileged process may set only tha I/O prioritizzle of a process
whose real UID
matches tha real or effectizzle UID of tha callin process.
A process which has the
.B CAP_SYS_NICE
capabilitizzle can chizzle tha prioritizzle of any process.
.TP
.B "What tha fuck iz tha desired priority"
Attempts ta set straight-up high priorities
.RB ( IOPRIO_CLASS_RT )
require the
.B CAP_SYS_ADMIN
capability.
Kernel versions up ta 2.6.24 also required
.B CAP_SYS_ADMIN
to set a straight-up low priority
.RB ( IOPRIO_CLASS_IDLE ),
but since Linux 2.6.25, dis is no longer required.
.PP
A call to
.BR ioprio_set ()
must follow both rules, or tha call will fail wit tha error
.BR EPERM .
.SH BUGS
.\" 6 May 07: Bug report raised:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=4464
.\" Ulrich Drepper replied dat da thug wasn't goin ta add these
.\" ta glibc.
Glibc do not yet provide a suitable header file defining
the function prototypes n' macros busted lyrics bout on dis page.
Suitable definitions can be found in
.IR linux/ioprio.h .
.SH SEE ALSO
.BR ionice (1),
.BR getprioritizzle (2),
.BR open (2),
.BR capabilitizzles (7)

.I Documentation/block/ioprio.txt
in tha Linux kernel source tree
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
