'\" t
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                 n' Copyright (C) 1993 Mike Haardt, Ian Jackson;
.\"                 n' Copyright (C) 1998 Jizzy Lokier;
.\"                 n' Copyright (C) 2002-2010 Mike Kerrisk.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-09-26 by Andries Brouwer <aeb@cwi.nl>
.\" n' again n' again n' again on 960413 n' 980804 n' 981223.
.\" Modified 1998-12-11 by Jizzy Lokier <jamie@imbolc.ucc.ie>
.\" Applied erection by Christian Ehrhardt - aeb, 990712
.\" Modified 2002-04-23 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on F_SETFL n' O_DIRECT
.\"	Complete rewrite + expansion of material on file locking
.\"	Incorporated description of F_NOTIFY, drawin on
.\"		Stephen Rothwellz notes up in Documentation/dnotify.txt.
.\"	Added description of F_SETLEASE n' F_GETLEASE
.\" Corrected n' polished, aeb, 020527.
.\" Modified 2004-03-03 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"     Modified description of file leases: fixed some errorz of detail
.\"     Replaced tha term "lease contestant" by "lease breaker"
.\" Modified, 27 May 2004, Mike Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capabilitizzle requirements
.\" Modified 2004-12-08, added O_NOATIME afta note from Martin Pool
.\" 2004-12-10, mtk, noted F_GETOWN bug afta suggestion from aeb.
.\" 2005-04-08 Jizzy Lokier <jamie@shareable.org>, mtk
.\"	Described behavior of F_SETOWN/F_SETSIG in
.\"	multithreaded processes, n' generally cleaned
.\"	up tha rap of F_SETOWN.
.\" 2005-05-20, Johannes Nicolai <johannes.nicolai@hpi.uni-potsdam.de>,
.\"	mtk: Noted F_SETOWN bug fo' socket file descriptor up in Linux 2.4
.\"	and earlier n' shit.  Added text on permissions required ta bust signal.
.\" 2009-09-30, Mike Kerrisk
.\"     Note obsolete F_SETOWN behavior wit threads.
.\"     Document F_SETOWN_EX n' F_GETOWN_EX
.\" 2010-06-17, Mike Kerrisk
.\"	Document F_SETPIPE_SZ n' F_GETPIPE_SZ.
.\"
.TH FCNTL 2 2012-04-15 "Linux" "Linux Programmerz Manual"
.SH NAME
fcntl \- manipulate file descriptor
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.B #include <fcntl.h>
.sp
.BI "int fcntl(int " fd ", int " cmd ", ... /* " arg " */ );"
.fi
.SH DESCRIPTION
.BR fcntl ()
performs one of tha operations busted lyrics bout below on tha open file descriptor
.IR fd .
Da operation is determined by
.IR cmd .

.BR fcntl ()
can take a optionizzle third argument.
Whether or not dis argument is required is determined by
.IR cmd .
Da required argument type is indicated up in parentheses afta each
.I cmd
name (in most cases, tha required type is
.IR int ,
and we identify tha argument rockin tha name
.IR arg ),
or
.I void
is specified if tha argument aint required.
.SS Duplicatin a gangbangin' file descriptor
.TP
.BR F_DUPFD " (\fIint\fP)"
Find tha lowest numbered available file descriptor
greata than or equal to
.I arg
and make it be a cold-ass lil copy of
.IR fd .
This is different from
.BR dup2 (2),
which uses exactly tha descriptor specified.
.IP
On success, tha freshly smoked up descriptor is returned.
.IP
See
.BR dup (2)
for further details.
.TP
.BR F_DUPFD_CLOEXEC " (\fIint\fP; since Linux 2.6.24)"
As for
.BR F_DUPFD ,
but additionally set the
close-on-exec flag fo' tha duplicate descriptor.
Specifyin dis flag permits a program ta avoid a additional
.BR fcntl ()
.B F_SETFD
operation ta set the
.B FD_CLOEXEC
flag.
For a explanation of why dis flag is useful,
see tha description of
.B O_CLOEXEC
in
.BR open (2).
.SS File descriptor flags
Da followin commandz manipulate tha flags associated with
a file descriptor.
Currently, only one such flag is defined:
.BR FD_CLOEXEC ,
the close-on-exec flag.
If the
.B FD_CLOEXEC
bit is 0, tha file descriptor will remain open across an
.BR execve (2),
otherwise it is ghon be closed.
.TP
.BR F_GETFD " (\fIvoid\fP)"
Read tha file descriptor flags;
.I arg
is ignored.
.TP
.BR F_SETFD " (\fIint\fP)"
Set tha file descriptor flags ta tha value specified by
.IR arg .
.SS File status flags
Each open file description has certain associated status flags,
initialized by
.BR open (2)
.\" or
.\" .BR creat (2),
and possibly modified by
.BR fcntl ().
Duplicated file descriptors
(made with
.BR dup (2),
.BR fcntl (F_DUPFD),
.BR fork (2),
etc.) refer ta tha same open file description, n' thus
share tha same file status flags.

Da file status flags n' they semantics is busted lyrics bout in
.BR open (2).
.TP
.BR F_GETFL " (\fIvoid\fP)"
Git tha file access mode n' tha file status flags;
.I arg
is ignored.
.TP
.BR F_SETFL " (\fIint\fP)"
Set tha file status flags ta tha value specified by
.IR arg .
File access mode
.RB ( O_RDONLY ", " O_WRONLY ", " O_RDWR )
and file creation flags
(i.e.,
.BR O_CREAT ", " O_EXCL ", " O_NOCTTY ", " O_TRUNC )
in
.I arg
are ignored.
On Linux dis command can chizzle only the
.BR O_APPEND ,
.BR O_ASYNC ,
.BR O_DIRECT ,
.BR O_NOATIME ,
and
.B O_NONBLOCK
flags.
.\" FIXME  fo' realz. Accordin ta POSIX.1-2001, O_SYNC should also be modifiable
.\" via fcntl(2) yo, but currently Linux do not permit this
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=5994
.SS Advisory locking
.BR F_GETLK ", " F_SETLK " n' " F_SETLKW
are used ta acquire, release, n' test fo' tha existence of record
locks (also known as file-segment or file-region locks).
Da third argument,
.IR lock ,
is a pointa ta a structure dat has at least tha followin fields
(in unspecified order).
.in +4n
.nf
.sp
struct flock {
    ...
    short l_type;    /* Type of lock: F_RDLCK,
                        F_WRLCK, F_UNLCK */
    short l_whence;  /* How tha fuck ta interpret l_start:
                        SEEK_SET, SEEK_CUR, SEEK_END */
    off_t l_start;   /* Startin offset fo' lock */
    off_t l_len;     /* Number of bytes ta lock */
    pid_t l_pid;     /* PID of process blockin our lock
                        (F_GETLK only) */
    ...
};
.fi
.in
.P
The
.IR l_whence ", " l_start ", n' " l_len
fieldz of dis structure specify tha range of bytes we wish ta lock.
Bytes past tha end of tha file may be locked,
but not bytes before tha start of tha file.

.I l_start
is tha startin offset fo' tha lock, n' is interpreted
relatizzle ta either:
the start of tha file (if
.I l_whence
is
.BR SEEK_SET );
the current file offset (if
.I l_whence
is
.BR SEEK_CUR );
or tha end of tha file (if
.I l_whence
is
.BR SEEK_END ).
In tha final two cases,
.I l_start
can be a wack number provided the
offset do not lie before tha start of tha file.

.I l_len
specifies tha number of bytes ta be locked.
If
.I l_len
is positive, then tha range ta be locked covers bytes
.I l_start
up ta n' including
.IR l_start + l_len \- 1 .
Specifyin 0 for
.I l_len
has tha special meaning: lock all bytes startin at the
location specified by
.IR l_whence " n' " l_start
all up in ta tha end of file, no matta how tha fuck big-ass tha file grows.

POSIX.1-2001 allows (but do not require)
an implementation ta support a negative
.I l_len
value; if
.I l_len
is negative, tha interval busted lyrics bout by
.I lock
covers bytes
.IR l_start + l_len
up ta n' including
.IR l_start \-1.
This is supported by Linux since kernel versions 2.4.21 n' 2.5.49.

The
.I l_type
field can be used ta place a read
.RB ( F_RDLCK )
or a write
.RB ( F_WRLCK )
lock on a gangbangin' file.
Any number of processes may hold a read lock (shared lock)
on a gangbangin' file region yo, but only one process may hold a write lock
(exclusive lock).
An exclusive lock excludes all other locks,
both shared n' exclusive.
A single process can hold only one type of lock on a gangbangin' file region;
if a freshly smoked up lock be applied ta a already-locked region,
then tha existin lock is converted ta tha freshly smoked up lock type.
(Such conversions may involve splitting, shrinking, or coalescin with
an existin lock if tha byte range specified by tha freshly smoked up lock do not
precisely coincizzle wit tha range of tha existin lock.)
.TP
.BR F_SETLK " (\fIstruct flock *\fP)"
Acquire a lock (when
.I l_type
is
.B F_RDLCK
or
.BR F_WRLCK )
or release a lock (when
.I l_type
is
.BR F_UNLCK )
on tha bytes specified by the
.IR l_whence ", " l_start ", n' " l_len
fieldz of
.IR lock .
If a cold-ass lil conflictin lock is held by another process,
this call returns \-1 n' sets
.I errno
to
.B EACCES
or
.BR EAGAIN .
.TP
.BR F_SETLKW " (\fIstruct flock *\fP)"
As for
.BR F_SETLK ,
but if a cold-ass lil conflictin lock is held on tha file, then wait fo' that
lock ta be busted out.
If a signal is caught while waiting, then tha call is interrupted
and (afta tha signal handlez has returned)
returns immediately (with return value \-1 and
.I errno
set to
.BR EINTR ;
see
.BR signal (7)).
.TP
.BR F_GETLK " (\fIstruct flock *\fP)"
On input ta dis call,
.I lock
raps on some lock we wanna place on tha file.
If tha lock could be placed,
.BR fcntl ()
does not straight-up place it yo, but returns
.B F_UNLCK
in the
.I l_type
field of
.I lock
and leaves tha other fieldz of tha structure unchanged.
If one or mo' incompatible locks would prevent
this lock bein placed, then
.BR fcntl ()
returns details bout one of these locks up in the
.IR l_type ", " l_whence ", " l_start ", n' " l_len
fieldz of
.I lock
and sets
.I l_pid
to be tha PID of tha process holdin dat lock.
.P
In order ta place a read lock,
.I fd
must be open fo' reading.
In order ta place a write lock,
.I fd
must be open fo' writing.
To place both typez of lock, open a gangbangin' file read-write.
.P
As well as bein removed by a explicit
.BR F_UNLCK ,
record locks is automatically busted out when tha process
terminates or if it closes
.I any
file descriptor referrin ta a gangbangin' file on which locks is held.
.\" (Additionizzle file descriptors referrin ta tha same file
.\" may done been obtained by calls to
.\" .BR open "(2), " dup "(2), " dup2 "(2), or " fcntl ().)
This is bad: it means dat a process can lose tha locks on
a file like
.I /etc/passwd
or
.I /etc/mtab
when fo' some reason a library function decides ta open, read
and close dat shit.
.P
Record locks is not inherited by a cold-ass lil lil pimp pimped via
.BR fork (2),
but is preserved across an
.BR execve (2).
.P
Because of tha bufferin performed by the
.BR stdio (3)
library, tha use of record lockin wit routines up in dat package
should be avoided; use
.BR read (2)
and
.BR write (2)
instead.
.SS Mandatory locking
(Non-POSIX.)
Da above record locks may be either advisory or mandatory,
and is advisory by default.

Advisory locks is not enforced n' is useful only between
cooperatin processes.

Mandatory locks is enforced fo' all processes.
If a process tries ta big-ass up a incompatible access (e.g.,
.BR read (2)
or
.BR write (2))
on a gangbangin' file region dat has a incompatible mandatory lock,
then tha result dependz upon whether the
.B O_NONBLOCK
flag is enabled fo' its open file description.
If the
.B O_NONBLOCK
flag aint enabled, then
system call is blocked until tha lock is removed
or converted ta a mode dat is compatible wit tha access.
If the
.B O_NONBLOCK
flag is enabled, then tha system call fails wit tha error
.BR EAGAIN .

To make use of mandatory locks, mandatory lockin must be enabled
both on tha file system dat gotz nuff tha file ta be locked,
and on tha file itself.
Mandatory lockin is enabled on a gangbangin' file system
usin tha "\-o mand" option to
.BR mount (8),
or the
.B MS_MANDLOCK
flag for
.BR mount (2).
Mandatory lockin is enabled on a gangbangin' file by disabling
group execute permission on tha file n' enablin tha set-group-ID
permission bit (see
.BR chmod (1)
and
.BR chmod (2)).

Da Linux implementation of mandatory lockin is unreliable.
See BUGS below.
.SS Managin signals
.BR F_GETOWN ,
.BR F_SETOWN ,
.BR F_GETOWN_EX ,
.BR F_SETOWN_EX ,
.BR F_GETSIG
and
.B F_SETSIG
are used ta manage I/O availabilitizzle signals:
.TP
.BR F_GETOWN " (\fIvoid\fP)"
Return (as tha function result)
the process ID or process crew currently receiving
.B SIGIO
and
.B SIGURG
signals fo' events on file descriptor
.IR fd .
Process IDs is returned as positizzle joints;
process crew IDs is returned as wack joints (but peep BUGS below).
.I arg
is ignored.
.TP
.BR F_SETOWN " (\fIint\fP)"
Set tha process ID or process crew ID dat will receive
.B SIGIO
and
.B SIGURG
signals fo' events on file descriptor
.IR fd
to tha ID given in
.IR arg .
A process ID is specified as a positizzle value;
a process crew ID is specified as a wack value.
Most commonly, tha callin process specifies itself as tha baller
(that is,
.I arg
is specified as
.BR getpid (2)).

.\" From glibc.info:
If you set the
.B O_ASYNC
status flag on a gangbangin' file descriptor by rockin the
.B F_SETFL
command of
.BR fcntl (),
a
.B SIGIO
signal is busted whenever input or output becomes possible
on dat file descriptor.
.B F_SETSIG
can be used ta obtain delivery of a signal other than
.BR SIGIO .
If dis permission check fails, then tha signal is
silently discarded.

Sendin a signal ta tha balla process (group) specified by
.B F_SETOWN
is subject ta tha same permissions checks as is busted lyrics bout for
.BR bust a cap up in (2),
where tha bustin  process is tha one dat employs
.B F_SETOWN
(but peep BUGS below).

If tha file descriptor
.I fd
refers ta a socket,
.B F_SETOWN
also selects
the recipient of
.B SIGURG
signals dat is served up when out-of-band
data arrives on dat socket.
.RB ( SIGURG
is busted up in any thang where
.BR select (2)
would report tha socket as havin a "exceptionizzle condition".)
.\" Da followin appears ta be rubbish.  It don't seem to
.\" be legit accordin ta tha kernel source, n' I can write
.\" a program dat gets a terminal-generated SIGIO even though
.\" it aint tha foreground process crew of tha terminal.
.\" -- MTK, 8 Apr 05
.\"
.\" If tha file descriptor
.\" .I fd
.\" refers ta a terminal device, then SIGIO
.\" signals is busted ta tha foreground process crew of tha terminal.

Da followin was legit up in 2.6.x kernels up ta n' including
kernel 2.6.11:
.RS
.IP
If a nonzero value is given to
.B F_SETSIG
in a multithreaded process hustlin wit a threadin library
that supports thread crews (e.g., NPTL),
then a positizzle value given to
.B F_SETOWN
has a gangbangin' finger-lickin' different meaning:
.\" Da relevant place up in tha (2.6) kernel source is the
.\" 'switch' up in fs/fcntl.c::send_sigio_to_task() -- MTK, Apr 2005
instead of bein a process ID identifyin a whole process,
it be a thread ID identifyin a specific thread within a process.
Consequently, it may be necessary ta pass
.B F_SETOWN
the result of
.BR gettid (2)
instead of
.BR getpid (2)
to git sensible thangs up in dis biatch when
.B F_SETSIG
is used.
(In current Linux threadin implementations,
a main threadz thread ID is tha same ol' dirty as its process ID.
This means dat a single-threaded program can equally use
.BR gettid (2)
or
.BR getpid (2)
in dis scenario.)
Note, however, dat tha statements up in dis paragraph do not apply
to the
.B SIGURG
signal generated fo' out-of-band data on a socket:
this signal be always busted ta either a process or a process group,
dependin on tha value given to
.BR F_SETOWN .
.\" send_sigurg()/send_sigurg_to_task() bypasses
.\" kill_fasync()/send_sigio()/send_sigio_to_task()
.\" ta directly call send_group_sig_info()
.\"	-- MTK, Apr 2005 (kernel 2.6.11)
.RE
.IP
Da above behavior was accidentally dropped up in Linux 2.6.12,
and won't be restored.
From Linux 2.6.32 onward, use
.BR F_SETOWN_EX
to target
.B SIGIO
and
.B SIGURG
signals at a particular thread.
.TP
.BR F_GETOWN_EX " (struct f_baller_ex *) (since Linux 2.6.32)"
Return tha current file descriptor balla settings
as defined by a previous
.BR F_SETOWN_EX
operation.
Da shiznit is returned up in tha structure pointed ta by
.IR arg ,
which has tha followin form:
.nf
.in +4n

struct f_baller_ex {
    int   type;
    pid_t pid;
};

.in
.fi
The
.I type
field gonna git one of tha joints
.BR F_OWNER_TID ,
.BR F_OWNER_PID ,
or
.BR F_OWNER_PGRP .
The
.I pid
field be a positizzle integer representin a thread ID, process ID,
or process crew ID.
See
.B F_SETOWN_EX
for mo' details.
.TP
.BR F_SETOWN_EX " (struct f_baller_ex *) (since Linux 2.6.32)"
This operation performs a similar task to
.BR F_SETOWN .
It allows tha calla ta direct I/O availabilitizzle signals
to a specific thread, process, or process group.
Da calla specifies tha target of signals via
.IR arg ,
which be a pointa ta a
.IR f_baller_ex
structure.
The
.I type
field has one of tha followin joints, which define how
.I pid
is interpreted:
.RS
.TP
.BR F_OWNER_TID
Send tha signal ta tha thread whose thread ID
(the value returned by a cold-ass lil call to
.BR clone (2)
or
.BR gettid (2))
is specified in
.IR pid .
.TP
.BR F_OWNER_PID
Send tha signal ta tha process whose ID
is specified in
.IR pid .
.TP
.BR F_OWNER_PGRP
Send tha signal ta tha process crew whose ID
is specified in
.IR pid .
(Note that, unlike with
.BR F_SETOWN ,
a process crew ID is specified as a positizzle value here.)
.RE
.TP
.BR F_GETSIG " (\fIvoid\fP)"
Return (as tha function result)
the signal busted when input or output becomes possible.
A value of zero means
.B SIGIO
is sent.
Any other value (including
.BR SIGIO )
is the
signal busted instead, n' up in dis case additionizzle info be available to
the signal handlez if installed with
.BR SA_SIGINFO .
.I arg
is ignored.
.TP
.BR F_SETSIG " (\fIint\fP)"
Set tha signal busted when input or output becomes possible
to tha value given in
.IR arg .
A value of zero means ta bust tha default
.B SIGIO
signal.
Any other value (including
.BR SIGIO )
is tha signal ta bust instead, n' up in dis case additionizzle info
is available ta tha signal handlez if installed with
.BR SA_SIGINFO .
.\"
.\" Da followin was legit only up until 2.6.11:
.\"
.\" Additionally, passin a nonzero value to
.\" .B F_SETSIG
.\" chizzlez tha signal recipient from a whole process ta a specific thread
.\" within a process.
.\" See tha description of
.\" .B F_SETOWN
.\" fo' mo' details.

By using
.B F_SETSIG
with a nonzero value, n' setting
.B SA_SIGINFO
for the
signal handlez (see
.BR sigaction (2)),
extra shiznit bout I/O events is passed to
the handlez up in a
.I siginfo_t
structure.
If the
.I si_code
field indicates tha source is
.BR SI_SIGIO ,
the
.I si_fd
field gives tha file descriptor associated wit tha event.
Otherwise,
there is no indication which file descriptors is pending, n' you
should use tha usual mechanisms
.RB ( select (2),
.BR poll (2),
.BR read (2)
with
.B O_NONBLOCK
set etc.) ta determine which file descriptors is available fo' I/O.

By selectin a real time signal (value >=
.BR SIGRTMIN ),
multiple I/O events may be queued rockin tha same signal numbers.
(Queuin is dependent on available memory).
Extra shiznit be available
if
.B SA_SIGINFO
is set fo' tha signal handlez, as above.

Note dat Linux imposes a limit on the
number of real-time signals dat may be queued ta a
process (see
.BR getrlimit (2)
and
.BR signal (7))
and if dis limit is reached, then tha kernel reverts to
delivering
.BR SIGIO ,
and dis signal is served up ta tha entire
process rather than ta a specific thread.
.\" See fs/fcntl.c::send_sigio_to_task() (2.4/2.6) sources -- MTK, Apr 05
.PP
Usin these mechanisms, a program can implement straight-up asynchronous I/O
without using
.BR select (2)
or
.BR poll (2)
most of tha time.
.PP
Da use of
.BR O_ASYNC ,
.BR F_GETOWN ,
.B F_SETOWN
is specific ta BSD n' Linux.
.BR F_GETOWN_EX ,
.BR F_SETOWN_EX ,
.BR F_GETSIG ,
and
.B F_SETSIG
are Linux-specific.
POSIX has asynchronous I/O n' the
.I aio_sigevent
structure ta big up similar thangs; these is also available
in Linux as part of tha GNU C Library (Glibc).
.SS Leases
.B F_SETLEASE
and
.B F_GETLEASE
(Linux 2.4 onward) is used (respectively) ta establish a freshly smoked up lease,
and retrieve tha current lease, on tha open file description
referred ta by tha file descriptor
.IR fd .
A file lease serves up a mechanizzle whereby tha process holding
the lease (the "lease holder") is notified (via delivery of a signal)
when a process (the "lease breaker") tries to
.BR open (2)
or
.BR truncate (2)
the file referred ta by dat file descriptor.
.TP
.BR F_SETLEASE " (\fIint\fP)"
Set or remove a gangbangin' file lease accordin ta which of tha following
values is specified up in tha integer
.IR arg :
.RS
.TP
.B F_RDLCK
Take up a read lease.
This will cause tha callin process ta be notified when
the file is opened fo' freestylin or is truncated.
.\" Da followin became legit up in kernel 2.6.10:
.\" See tha man-pages-2.09 Chizzlelog fo' further info.
A read lease can be placed only on a gangbangin' file descriptor that
is opened read-only.
.TP
.B F_WRLCK
Take up a write lease.
This will cause tha calla ta be notified when
the file is opened fo' readin or freestylin or is truncated.
A write lease may be placed on a gangbangin' file only if there be no
other open file descriptors fo' tha file.
.TP
.B F_UNLCK
Remove our lease from tha file.
.RE
.P
Leases is associated wit a open file description (see
.BR open (2)).
This means dat duplicate file descriptors (created by, fo' example,
.BR fork (2)
or
.BR dup (2))
refer ta tha same lease, n' dis lease may be modified
or busted out rockin any of these descriptors.
Furthermore, tha lease is busted out by either a explicit
.B F_UNLCK
operation on any of these duplicate descriptors, or when all
such descriptors done been closed.
.P
Leases may be taken up only on regular files.
An unprivileged process may take up a lease only on a gangbangin' file whose
UID (baller) matches tha file system UID of tha process.
A process wit the
.B CAP_LEASE
capabilitizzle may take up leases on arbitrary files.
.TP
.BR F_GETLEASE " (\fIvoid\fP)"
Indicates what tha fuck type of lease be associated wit tha file descriptor
.I fd
by returnin either
.BR F_RDLCK ", " F_WRLCK ", or " F_UNLCK ,
indicating, respectively, a read lease , a write lease, or no lease.
.I arg
is ignored.
.PP
When a process (the "lease breaker") performs an
.BR open (2)
or
.BR truncate (2)
that conflicts wit a lease established via
.BR F_SETLEASE ,
the system call is blocked by tha kernel and
the kernel notifies tha lease holda by bustin  it a signal
.RB ( SIGIO
by default).
Da lease holda should respond ta receipt of dis signal by bustin
whatever cleanup is required up in preparation fo' tha file ta be
accessed by another process (e.g., flushin cached buffers) and
then either remove or downgrade its lease.
A lease is removed by struttin an
.B F_SETLEASE
command specifying
.I arg
as
.BR F_UNLCK .
If tha lease holda currently holdz a write lease on tha file,
and tha lease breaker is openin tha file fo' reading,
then it is sufficient fo' tha lease holda ta downgrade
the lease ta a read lease.
This is done by struttin an
.B F_SETLEASE
command specifying
.I arg
as
.BR F_RDLCK .

If tha lease holda fails ta downgrade or remove tha lease within
the number of secondz specified in
.I /proc/sys/fs/lease-break-time
then tha kernel forcibly removes or downgrades tha lease holderz lease.

Once a lease break has been initiated,
.B F_GETLEASE
returns tha target lease type (either
.B F_RDLCK
or
.BR F_UNLCK ,
dependin on what tha fuck would be compatible wit tha lease breaker)
until tha lease holda voluntarily downgrades or removes tha lease or
the kernel forcibly do so afta tha lease break timer expires.

Once tha lease has been voluntarily or forcibly removed or downgraded,
and assumin tha lease breaker has not unblocked its system call,
the kernel permits tha lease breakerz system call ta proceed.

If tha lease breakerz blocked
.BR open (2)
or
.BR truncate (2)
is interrupted by a signal handlez,
then tha system call fails wit tha error
.BR EINTR ,
but tha other steps still occur as busted lyrics bout above.
If tha lease breaker is capped by a signal while blocked in
.BR open (2)
or
.BR truncate (2),
then tha other steps still occur as busted lyrics bout above.
If tha lease breaker specifies the
.B O_NONBLOCK
flag when calling
.BR open (2),
then tha call immediately fails wit tha error
.BR EWOULDBLOCK ,
but tha other steps still occur as busted lyrics bout above.

Da default signal used ta notify tha lease holda is
.BR SIGIO ,
but dis can be chizzled rockin the
.B F_SETSIG
command to
.BR fcntl ().
If a
.B F_SETSIG
command is performed (even one specifying
.BR SIGIO ),
and tha signal
handlez is established using
.BR SA_SIGINFO ,
then tha handlez will receive a
.I siginfo_t
structure as its second argument, n' the
.I si_fd
field of dis argument will hold tha descriptor of tha leased file
that has been accessed by another process.
(This is useful if tha calla holdz leases against multiple files).
.SS File n' directory chizzle notification (dnotify)
.TP
.BR F_NOTIFY " (\fIint\fP)"
(Linux 2.4 onward)
Provide notification when tha directory referred ta by
.I fd
or any of tha filez dat it gotz nuff is chizzled.
Da events ta be notified is specified in
.IR arg ,
which be a lil' bit mask specified by ORin together zero or mo' of
the followin bits:
.RS
.sp
.PD 0
.TP 12
.B DN_ACCESS
A file was accessed (read, pread, readv)
.TP
.B DN_MODIFY
A file was modified (write, pwrite, writev, truncate, ftruncate).
.TP
.B DN_CREATE
A file was pimped (open, creat, mknod, mkdir, link, symlink, rename).
.TP
.B DN_DELETE
A file was unlinked (unlink, rename ta another directory, rmdir).
.TP
.B DN_RENAME
A file was renamed within dis directory (rename).
.TP
.B DN_ATTRIB
Da attributez of a gangbangin' file was chizzled (chown, chmod, utime[s]).
.PD
.RE
.IP
(In order ta obtain these definitions, the
.B _GNU_SOURCE
feature test macro must be defined before including
.I any
header files.)

Directory notifications is normally "one-shot", n' tha application
must reregista ta receive further notifications.
Alternatively, if
.B DN_MULTISHOT
is included in
.IR arg ,
then notification will remain up in effect until explicitly removed.

.\" Da followin do seem a skanky API-design chizzle...
A series of
.B F_NOTIFY
requests is cumulative, wit tha events in
.I arg
bein added ta tha set already monitored.
To disable notification of all events, make an
.B F_NOTIFY
call specifying
.I arg
as 0.

Notification occurs via delivery of a signal.
Da default signal is
.BR SIGIO ,
but dis can be chizzled rockin the
.B F_SETSIG
command to
.BR fcntl ().
In tha latta case, tha signal handlez receives a
.I siginfo_t
structure as its second argument (if tha handlez was
established using
.BR SA_SIGINFO )
and the
.I si_fd
field of dis structure gotz nuff tha file descriptor which
generated tha notification (useful when establishin notification
on multiple directories).

Especially when using
.BR DN_MULTISHOT ,
a real time signal should be used fo' notification,
so dat multiple notifications can be queued.

.B NOTE:
New applications should use the
.I inotify
interface (available since kernel 2.6.13),
which serves up a much superior intercourse fo' obtainin notifications of
file system events.
See
.BR inotify (7).
.SS Changin tha capacitizzle of a pipe
.TP
.BR F_SETPIPE_SZ " (\fIint\fP; since Linux 2.6.35)"
Change tha capacitizzle of tha pipe referred ta by
.I fd
to be at least
.I arg
bytes.
An unprivileged process can adjust tha pipe capacitizzle ta any value
between tha system page size n' tha limit defined in
.IR /proc/sys/fs/pipe-max-size
(see
.BR proc (5)).
Attempts ta set tha pipe capacitizzle below tha page size is silently
rounded up ta tha page size.
Attempts by a unprivileged process ta set tha pipe capacitizzle above tha limit in
.IR /proc/sys/fs/pipe-max-size
yield tha error
.BR EPERM ;
a privileged process
.RB ( CAP_SYS_RESOURCE )
can override tha limit.
When allocatin tha buffer fo' tha pipe,
the kernel may bust a cold-ass lil capacitizzle larger than
.IR arg ,
if dat is convenient fo' tha implementation.
The
.B F_GETPIPE_SZ
operation returns tha actual size used.
Attemptin ta set tha pipe capacitizzle smalla than tha amount
of buffer space currently used ta store data produces tha error
.BR EBUSY .
.TP
.BR F_GETPIPE_SZ " (\fIvoid\fP; since Linux 2.6.35)"
Return (as tha function result) tha capacitizzle of tha pipe referred ta by
.IR fd .
.SH RETURN VALUE
For a successful call, tha return value dependz on tha operation:
.TP 0.9i
.B F_DUPFD
Da freshly smoked up descriptor.
.TP
.B F_GETFD
Value of file descriptor flags.
.TP
.B F_GETFL
Value of file status flags.
.TP
.B F_GETLEASE
Type of lease held on file descriptor.
.TP
.B F_GETOWN
Value of descriptor baller.
.TP
.B F_GETSIG
Value of signal busted when read or write becomes possible, or zero
for traditional
.B SIGIO
behavior.
.TP
.B F_GETPIPE_SZ
Da pipe capacity.
.TP
All other commands
Zero.
.PP
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.BR EACCES " or " EAGAIN
Operation is prohibited by locks held by other processes.
.TP
.B EAGAIN
Da operation is prohibited cuz tha file has been memory-mapped by
another process.
.TP
.B EBADF
.I fd
is not a open file descriptor, or tha command was
.B F_SETLK
or
.B F_SETLKW
and tha file descriptor open mode don't match wit the
type of lock requested.
.TP
.B EDEADLK
Dat shiznit was detected dat tha specified
.B F_SETLKW
command would cause a thugged-out deadlock.
.TP
.B EFAULT
.I lock
is outside yo' accessible address space.
.TP
.B EINTR
For
.BR F_SETLKW ,
the command was interrupted by a signal; see
.BR signal (7).
For
.BR F_GETLK " n' " F_SETLK ,
the command was interrupted by a signal before tha lock was checked or
acquired.
Most likely when lockin a remote file (e.g., lockin over
NFS) yo, but can sometimes happen locally.
.TP
.B EINVAL
For
.BR F_DUPFD ,
.I arg
is wack or is pimped outa than tha maximum allowable value.
For
.BR F_SETSIG ,
.I arg
is not a allowable signal number.
.TP
.B EMFILE
For
.BR F_DUPFD ,
the process already has tha maximum number of file descriptors open.
.TP
.B ENOLCK
Too nuff segment locks open, lock table is full, or a remote locking
protocol failed (e.g., lockin over NFS).
.TP
.B EPERM
Attempted ta clear the
.B O_APPEND
flag on a gangbangin' file dat has tha append-only attribute set.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
Only tha operations
.BR F_DUPFD ,
.BR F_GETFD ,
.BR F_SETFD ,
.BR F_GETFL ,
.BR F_SETFL ,
.BR F_GETLK ,
.BR F_SETLK
and
.BR F_SETLKW ,
are specified up in POSIX.1-2001.

.BR F_GETOWN
and
.B F_SETOWN
are specified up in POSIX.1-2001.
(To git they definitions, define
.BR BSD_SOURCE ,
or
.BR _XOPEN_SOURCE
with tha value 500 or pimped outer, or define
.BR _POSIX_C_SOURCE
with tha value 200809L or pimped outer.)

.B F_DUPFD_CLOEXEC
is specified up in POSIX.1-2008.
(To git dis definition, define
.B _POSIX_C_SOURCE
with tha value 200809L or pimped outer, or
.B _XOPEN_SOURCE
with tha value 700 or pimped outer.)

.BR F_GETOWN_EX ,
.BR F_SETOWN_EX ,
.BR F_SETPIPE_SZ ,
.BR F_GETPIPE_SZ ,
.BR F_GETSIG ,
.BR F_SETSIG ,
.BR F_NOTIFY ,
.BR F_GETLEASE ,
and
.B F_SETLEASE
are Linux-specific.
(Define the
.B _GNU_SOURCE
macro ta obtain these definitions.)
.\" .PP
.\" SVr4 documents additionizzle EIO, ENOLINK n' EOVERFLOW error conditions.
.SH NOTES
Da original gangsta Linux
.BR fcntl ()
system call was not designed ta handle big-ass file offsets
(in the
.I flock
structure).
Consequently, an
.BR fcntl64 ()
system call was added up in Linux 2.4.
Da newer system call employs a gangbangin' finger-lickin' different structure fo' file locking,
.IR flock64 ,
and correspondin commands,
.BR F_GETLK64 ,
.BR F_SETLK64 ,
and
.BR F_SETLKW64 .
But fuck dat shiznit yo, tha word on tha street is dat these details can be ignored by applications rockin glibc, whose
.BR fcntl ()
wrapper function transparently employs tha mo' recent system call
where it be available.

Da errors returned by
.BR dup2 (2)
are different from dem returned by
.BR F_DUPFD .

Since kernel 2.0, there is no interaction between tha typez of lock
placed by
.BR flock (2)
and
.BR fcntl ().

Several systems have mo' fieldz in
.I "struct flock"
such as, fo' example,
.IR l_sysid .
.\" e.g., Solaris 8 documents dis field up in fcntl(2), n' Irix 6.5
.\" documents it up in fcntl(5).  mtk, May 2007
Clearly,
.I l_pid
alone aint goin ta be straight-up useful if tha process holdin tha lock
may live on a gangbangin' finger-lickin' different machine.
.SH BUGS
A limitation of tha Linux system call conventions on some
architectures (notably i386) means dat if a (negative)
process crew ID ta be returned by
.B F_GETOWN
falls up in tha range \-1 ta \-4095, then tha return value is wrongly
interpreted by glibc as a error up in tha system call;
.\" glibc source: sysdeps/unix/sysv/linux/i386/sysdep.h
that is, tha return value of
.BR fcntl ()
will be \-1, and
.I errno
will contain tha (positive) process crew ID.
Da Linux-specific
.BR F_GETOWN_EX
operation avoidz dis problem.
.\" mtk, Dec 04: some limited testin on alpha n' ia64 seems to
.\" indicate dat ANY wack PGID value will cause F_GETOWN
.\" ta misinterpret tha return as a error. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Some other architectures
.\" seem ta have tha same range check as i386.
Since glibc version 2.11, glibc make tha kernel
.B F_GETOWN
problem invisible by implementing
.B F_GETOWN
using
.BR F_GETOWN_EX .

In Linux 2.4 n' earlier, there is bug dat can occur
when a unprivileged process uses
.B F_SETOWN
to specify tha baller
of a socket file descriptor
as a process (group) other than tha caller.
In dis case,
.BR fcntl ()
can return \-1 with
.I errno
set to
.BR EPERM ,
even when tha balla process (group) is one dat tha caller
has permission ta bust signals to.
Despite dis error return, tha file descriptor balla is set,
and signals is ghon be busted ta tha baller.

Da implementation of mandatory lockin up in all known versionz of Linux
is subject ta race conditions which render it unreliable:
.\" http://marc.info/?l=linux-kernel&m=119013491707153&w=2
a
.BR write (2)
call dat overlaps wit a lock may modify data afta tha mandatory lock is
acquired;
a
.BR read (2)
call dat overlaps wit a lock may detect chizzlez ta data dat was made
only afta a write lock was acquired.
Similar races exist between mandatory locks and
.BR mmap (2).
It be therefore inadvisable ta rely on mandatory locking.
.SH SEE ALSO
.BR dup2 (2),
.BR flock (2),
.BR open (2),
.BR socket (2),
.BR lockf (3),
.BR capabilitizzles (7),
.BR feature_test_macros (7)

.IR locks.txt ,
.IR mandatory-locking.txt ,
and
.I dnotify.txt
in tha Linux kernel source directory
.IR Documentation/filesystems/
(on olda kernels, these filez is directly under the
.I Documentation/
directory, and
.I mandatory-locking.txt
is called
.IR mandatory.txt )
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
