.\" Copyright (c) 2005 Mike Kerrisk
.\" based on earlier work by faith@cs.unc.edu and
.\" Mike Battersby <mib@deakin.edu.au>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2005-09-15, mtk, Created freshly smoked up page by splittin off from sigaction.2
.\"
.TH SIGSUSPEND 2 2013-04-19 "Linux" "Linux Programmerz Manual"
.SH NAME
sigsuspend \- wait fo' a signal
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigsuspend(const sigset_t *" mask );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigsuspend ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
.BR sigsuspend ()
temporarily replaces tha signal mask of tha callin process wit the
mask given by
.I mask
and then suspendz tha process until delivery of a signal whose
action is ta invoke a signal handlez or ta terminizzle a process.

If tha signal terminates tha process, then
.BR sigsuspend ()
does not return.
If tha signal is caught, then
.BR sigsuspend ()
returns afta tha signal handlez returns,
and tha signal mask is restored ta tha state before tha call to
.BR sigsuspend ().

It aint possible ta block
.B SIGKILL
or
.BR SIGSTOP ;
specifyin these signals in
.IR mask ,
has no effect on tha processs signal mask.
.SH RETURN VALUE
.BR sigsuspend ()
always returns \-1, with
.I errno
set ta inndicate tha error (normally,
.BR EINTR ).
.SH ERRORS
.TP
.B EFAULT
.I mask
points ta memory which aint a valid part of tha process address space.
.TP
.B EINTR
Da call was interrupted by a signal.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
.PP
Normally,
.BR sigsuspend ()
is used up in conjunction with
.BR sigprocmask (2)
in order ta prevent delivery of a signal durin tha execution of a
critical code section.
Da calla first blocks tha signals with
.BR sigprocmask (2).
When tha critical code has completed, tha calla then waits fo' the
signals by calling
.BR sigsuspend ()
with tha signal mask dat was returned by
.BR sigprocmask (2)
(in the
.I oldset
argument).
.PP
See
.BR sigsetops (3)
for details on manipulatin signal sets.
.SH SEE ALSO
.BR bust a cap up in (2),
.BR pause (2),
.BR sigaction (2),
.BR signal (2),
.BR sigprocmask (2),
.BR sigwaitinfo (2),
.BR sigsetops (3),
.BR sigwait (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
