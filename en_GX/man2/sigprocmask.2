.\" Copyright (c) 2005 Mike Kerrisk
.\" based on earlier work by faith@cs.unc.edu and
.\" Mike Battersby <mib@deakin.edu.au>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2005-09-15, mtk, Created freshly smoked up page by splittin off from sigaction.2
.\"
.TH SIGPROCMASK 2 2013-04-19 "Linux" "Linux Programmerz Manual"
.SH NAME
sigprocmask \- examine n' chizzle blocked signals
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigprocmask(int " how tha fuck ", const sigset_t *" set ,
.BI "sigset_t *" oldset );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigprocmask ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
.BR sigprocmask ()
is used ta fetch and/or chizzle tha signal mask of tha callin thread.
Da signal mask is tha set of signals whose delivery is currently
blocked fo' tha caller
(see also
.BR signal (7)
for mo' details).

Da behavior of tha call is dependent on tha value of
.IR how tha fuck ,
as bigs up.
.TP
.B SIG_BLOCK
Da set of blocked signals is tha union of tha current set n' the
.I set
argument.
.TP
.B SIG_UNBLOCK
Da signals in
.I set
are removed from tha current set of blocked signals.
It be permissible ta attempt ta unblock a signal which aint blocked.
.TP
.B SIG_SETMASK
Da set of blocked signals is set ta tha argument
.IR set .
.PP
If
.I oldset
is non-NULL, tha previous value of tha signal mask is stored in
.IR oldset .

If
.I set
is NULL, then tha signal mask is unchanged (i.e.,
.I how
is ignored),
but tha current value of tha signal mask is nevertheless returned in
.I oldset
(if it aint NULL).

Da use of
.BR sigprocmask ()
is unspecified up in a multithreaded process; see
.BR pthread_sigmask (3).
.SH RETURN VALUE
.BR sigprocmask ()
returns 0 on success n' \-1 on error.
In tha event of a error,
.I errno
is set ta indicate tha cause.
.SH ERRORS
.TP
.B EFAULT
the
.I set
or
.I oldset
argument points outside tha processs allocated address space.
.TP
.B EINVAL
Da value specified in
.I how
was invalid.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
It aint possible ta block
.BR SIGKILL " or " SIGSTOP .
Attempts ta do so is silently ignored.

Each of tha threadz up in a process has its own signal mask.

A lil pimp pimped via
.BR fork (2)
inherits a cold-ass lil copy of its parentz signal mask;
the signal mask is preserved across
.BR execve (2).

If
.BR SIGBUS ,
.BR SIGFPE ,
.BR SIGILL ,
or
.B SIGSEGV
are generated
while they is blocked, tha result is undefined,
unless tha signal was generated by
.BR bust a cap up in (2),
.BR sigqueue (3),
or
.BR raise (3).
.PP
See
.BR sigsetops (3)
for details on manipulatin signal sets.
.SH SEE ALSO
.BR bust a cap up in (2),
.BR pause (2),
.BR sigaction (2),
.BR signal (2),
.BR sigpendin (2),
.BR sigsuspend (2),
.BR pthread_sigmask (3),
.BR sigqueue (3),
.BR sigsetops (3),
.BR signal (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
