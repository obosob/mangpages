.\" Copyright (c) Internationistic Businizz Machines Corp., 2006
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" This program is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Right back up in yo muthafuckin ass. See
.\" tha GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" HISTORY:
.\" 2005-09-28, pimped by Arnd Bergmann <arndb@de.ibm.com>
.\" 2006-06-16, revised by Eduardo M. Fleury <efleury@br.ibm.com>
.\" 2007-07-10, some polishin by mtk
.\" 2007-09-28, thugged-out shiznit fo' newer kernels by Jeremy Kerr <jk@ozlabs.org>
.\"
.TH SPU_CREATE 2 2012-08-05 Linux "Linux Programmerz Manual"
.SH NAME
spu_create \- create a freshly smoked up spu context
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/spu.h>

.BI "int spu_create(const char *" pathname ", int " flags ", mode_t " mode ");"
.BI "int spu_create(const char *" pathname ", int " flags ", mode_t " mode ","
.BI "               int " neighbor_fd ");"
.fi

.IR Note :
There is no glibc wrapper fo' dis system call; peep NOTES.
.SH DESCRIPTION
The
.BR spu_create ()
system call is used on PowerPC machines dat implement the
Cell Broadband Engine Architecture up in order ta access Synergistic
Processor Units (SPUs).
It creates a freshly smoked up logical context fo' a SPU in
.I pathname
and returns a gangbangin' file descriptor associated wit dat shit.
.I pathname
must refer ta a nonexistent directory up in tha mount point of
the SPU file system
.RB ( spufs ).
If
.BR spu_create ()
is successful, a gangbangin' finger-lickin' directory is pimped at
.I pathname
and it is populated wit tha filez busted lyrics bout in
.BR spufs (7).

When a cold-ass lil context is pimped,
the returned file descriptor can only be passed to
.BR spu_run (2),
used as the
.I dirfd
argument ta the
.B *at
family of system calls (e.g.,
.BR openat (2)),
or closed;
other operations is not defined.
A logical SPU
context is destroyed (along wit all filez pimped within tha context's
.I pathname
directory) once tha last reference ta tha context has gone;
this probably occurs when tha file descriptor returned by
.BR spu_create ()
is closed.

The
.I flags
argument can be zero or any bitwise OR-ed
combination of tha followin constants:
.TP
.B SPU_CREATE_EVENTS_ENABLED
Rather than rockin signals fo' reportin DMA errors, use the
.I event
argument to
.BR spu_run (2).
.TP
.B SPU_CREATE_GANG
Smoke a SPU gang instead of a cold-ass lil context.
(A gang be a crew of SPU contexts dat are
functionally related ta each other n' which share common scheduling
parameters\(emprioritizzle n' policy.
In tha future, gang schedulin may be implemented causing
the crew ta be switched up in n' up as a single unit.)

A freshly smoked up directory is ghon be pimped all up in tha location specified by the
.I pathname
argument.
This gang may be used ta hold other SPU contexts, by providing
a pathname dat is within tha gang directory ta further calls to
.BR spu_create ().
.TP
.B SPU_CREATE_NOSCHED
Smoke a cold-ass lil context dat aint affected by tha SPU scheduler.
Once tha context is run,
it aint gonna be scheduled up until it is destroyed by
the bustin process.

Because tha context cannot be removed from tha SPU, some functionality
is disabled for
.BR SPU_CREATE_NOSCHED
contexts.
Only a subset of tha filez will be
available up in dis context directory in
.BR spufs .
Additionally,
.BR SPU_CREATE_NOSCHED
contexts cannot dump a cold-ass lil core file when crashing.

Creating
.BR SPU_CREATE_NOSCHED
contexts requires the
.B CAP_SYS_NICE
capability.
.TP
.B SPU_CREATE_ISOLATE
Smoke a isolated SPU context.
Isolated contexts is protected from some
PPE (PowerPC Processin Element)
operations,
like fuckin access ta tha SPU local store n' tha NPC register.

Creating
.B SPU_CREATE_ISOLATE
contexts also requires the
.B SPU_CREATE_NOSCHED
flag.
.TP
.B SPU_CREATE_AFFINITY_SPU
Smoke a cold-ass lil context wit affinitizzle ta another SPU context.
This affinitizzle shiznit is used within tha SPU schedulin algorithm.
Usin dis flag requires dat a gangbangin' file descriptor referrin to
the other SPU context be passed up in the
.I neighbor_fd
argument.
.TP
.B SPU_CREATE_AFFINITY_MEM
Smoke a cold-ass lil context wit affinitizzle ta system memory.
This affinitizzle shiznit
is used within tha SPU schedulin algorithm.
.PP
The
.I mode
argument (minus any bits set up in tha process's
.BR umask (2))
specifies tha permissions used fo' bustin tha freshly smoked up directory in
.BR spufs .
See
.BR stat (2)
for a gangbangin' full list of tha possible
.I mode
values.
.SH RETURN VALUE
On success,
.BR spu_create ()
returns a freshly smoked up file descriptor.
On error, \-1 is returned, and
.I errno
is set ta one of tha error codes listed below.
.SH ERRORS
.TP
.B EACCES
Da current user aint gots write access ta the
.BR spufs (7)
mount point.
.TP
.B EEXIST
An SPU context already exists all up in tha given path name.
.TP
.B EFAULT
.I pathname
is not a valid strang pointa up in the
callin processs address space.
.TP
.B EINVAL
.I pathname
is not a gangbangin' finger-lickin' directory up in the
.BR spufs (7)
mount point, or invalid flags done been provided.
.TP
.B ELOOP
Too nuff symbolic links was found while resolving
.IR pathname .
.TP
.B EMFILE
Da process has reached its maximum open filez limit.
.TP
.B ENAMETOOLONG
.I pathname
is too long.
.TP
.B ENFILE
Da system has reached tha global open filez limit.
.TP
.B ENODEV
An isolated context was axed yo, but tha hardware do not support
SPU isolation.
.TP
.B ENOENT
Part of
.I pathname
could not be resolved.
.TP
.B ENOMEM
Da kernel could not allocate all resources required.
.TP
.B ENOSPC
There is not enough SPU resources available ta create
a freshly smoked up context or tha user-specific limit fo' tha number
of SPU contexts has been reached.
.TP
.B ENOSYS
Da functionalitizzle aint provided by tha current system, cuz
either tha hardware do not provide SPUs or tha spufs module is not
loaded.
.TP
.B ENOTDIR
A part of
.I pathname
is not a gangbangin' finger-lickin' directory.
.TP
.B EPERM
The
.I SPU_CREATE_NOSCHED
flag has been given yo, but tha user aint gots the
.B CAP_SYS_NICE
capability.
.SH FILES
.I pathname
must point ta a location beneath tha mount point of
.BR spufs .
By convention, it gets mounted in
.IR /spu .
.SH VERSIONS
The
.BR spu_create ()
system call was added ta Linux up in kernel 2.6.16.
.SH CONFORMING TO
This call is Linux-specific n' implemented only on tha PowerPC
architecture.
Programs rockin dis system call is not portable.
.SH NOTES
Glibc do not provide a wrapper fo' dis system call; call it using
.BR syscall (2).
Note however, that
.BR spu_create ()
is meant ta be used from libraries dat implement a mo' abstract
interface ta SPUs, not ta be used from regular applications.
See
.UR http://www.bsc.es\:/projects\:/deepcomputing\:/linuxoncell/
.UE
for tha recommended libraries.
.SH EXAMPLE
See
.BR spu_run (2)
for a example of tha use of
.BR spu_create ()
.SH SEE ALSO
.BR close (2),
.BR spu_run (2),
.BR capabilitizzles (7),
.BR spufs (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
