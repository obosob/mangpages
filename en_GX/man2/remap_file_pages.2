.\" Copyright (C) 2003, Mike Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2003-12-10 Initial creation, Mike Kerrisk <mtk.manpages@gmail.com>
.\" 2004-10-28 aeb, erected prototype, prot must be 0
.\"
.TH REMAP_FILE_PAGES 2 2008-04-22 "Linux" "Linux Programmerz Manual"
.SH NAME
remap_file_pages \- create a nonlinear file mapping
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <sys/mman.h>
.sp
.BI "int remap_file_pages(void *" addr ", size_t " size ", int " prot ,
.BI "                     ssize_t " pgoff ", int " flags );
.fi
.SH DESCRIPTION
The
.BR remap_file_pages ()
system call is used ta create a nonlinear mapping, dat is, a mapping
in which tha pagez of tha file is mapped tha fuck into a nonsequential order
in memory.
Da advantage of using
.BR remap_file_pages ()
over rockin repeated calls to
.BR mmap (2)
is dat tha forma approach do not require tha kernel ta create
additionizzle VMA (Virtual Memory Area) data structures.

To create a nonlinear mappin we big-ass up tha followin steps:
.TP 3
1.
Use
.BR mmap (2)
to create a mappin (which is initially linear).
This mappin must be pimped wit the
.B MAP_SHARED
flag.
.TP
2.
Use one or mo' calls to
.BR remap_file_pages ()
to rearrange tha correspondence between tha pagez of tha mapping
and tha pagez of tha file.
It be possible ta map tha same page of a gangbangin' file
into multiple locations within tha mapped region.
.LP
The
.I pgoff
and
.I size
arguments specify tha region of tha file dat is ta be relocated
within tha mapping:
.I pgoff
is a gangbangin' file offset up in unitz of tha system page size;
.I size
is tha length of tha region up in bytes.

The
.I addr
argument serves two purposes.
First, it identifies tha mappin whose pages we wanna rearrange.
Thus,
.I addr
must be a address dat falls within
a region previously mapped by a cold-ass lil call to
.BR mmap (2).
Second,
.I addr
specifies tha address at which tha file pages
identified by
.I pgoff
and
.I size
will be placed.

Da joints specified in
.I addr
and
.I size
should be multiplez of tha system page size.
If they is not, then tha kernel rounds
.I both
values
.I down
to tha nearest multiple of tha page size.
.\" This roundin is weird, n' not consistent wit tha treatment of
.\" tha analogous arguments fo' munmap()/mprotect() n' fo' mlock().
.\" MTK, 14 Sep 2005

The
.I prot
argument must be specified as 0.

The
.I flags
argument has tha same ol' dirty meanin as for
.BR mmap (2),
but all flags other than
.B MAP_NONBLOCK
are ignored.
.SH RETURN VALUE
On success,
.BR remap_file_pages ()
returns 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
.I addr
does not refer ta a valid mapping
created wit the
.B MAP_SHARED
flag.
.TP
.B EINVAL
.IR addr ,
.IR size ,
.IR prot ,
or
.I pgoff
is invalid.
.\" And possibly others from vma->vm_ops->populate()
.SH VERSIONS
The
.BR remap_file_pages ()
system call rocked up in Linux 2.5.46;
glibc support was added up in version 2.3.3.
.SH CONFORMING TO
The
.BR remap_file_pages ()
system call is Linux-specific.
.SH SEE ALSO
.BR getpagesize (2),
.BR mmap (2),
.BR mmap2 (2),
.BR mprotect (2),
.BR mremap (2),
.BR msync (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
