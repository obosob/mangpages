.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             n' Copyright (C) 1993 Mike Haardt, Ian Jackson.
.\" n' Copyright (C) 2007 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 13:35:59 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 17:19:01 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sat Jan 13 12:58:08 1996 by Mike Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" 2001-12-13 added remark by Zack Weinberg
.\" 2007-06-18 mtk:
.\"    	Added details bout seekable filez n' file offset.
.\"	Noted dat write() may write less than 'count' bytes, and
.\"	gave some examplez of why dis might occur.
.\"	Noted what tha fuck happens if write() is interrupted by a signal.
.\"
.TH WRITE 2 2013-01-27 "Linux" "Linux Programmerz Manual"
.SH NAME
write \- write ta a gangbangin' file descriptor
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "ssize_t write(int " fd ", const void *" buf ", size_t " count );
.SH DESCRIPTION
.BR write ()
writes up to
.I count
bytes from tha buffer pointed
.I buf
to tha file referred ta by tha file descriptor
.IR fd .

Da number of bytes freestyled may be less than
.I count
if, fo' example,
there is insufficient space on tha underlyin physical medium, or the
.B RLIMIT_FSIZE
resource limit is encountered (see
.BR setrlimit (2)),
or tha call was interrupted by a signal
handlez afta havin freestyled less than
.I count
bytes.
(See also
.BR pipe (7).)

For a seekable file (i.e., one ta which
.BR lseek (2)
may be applied, fo' example, a regular file)
writin takes place all up in tha current file offset,
and tha file offset is incremented by
the number of bytes straight-up written.
If tha file was
.BR open (2)ed
with
.BR O_APPEND ,
the file offset is first set ta tha end of tha file before writing.
Da adjustment of tha file offset n' tha write operation
are performed as a atomic step.

POSIX requires dat a
.BR read (2)
which can be proved ta occur afta a
.BR write ()
has returned returns tha freshly smoked up data.
Note dat not all file systems is POSIX conforming.
.SH RETURN VALUE
On success, tha number of bytes freestyled is returned (zero indicates
nothang was written).
On error, \-1 is returned, n' \fIerrno\fP is set
appropriately.

If \fIcount\fP is zero and
.I fd
refers ta a regular file, then
.BR write ()
may return a gangbangin' failure status if one of tha errors below is detected.
If no errors is detected,
0 is ghon be returned without causin any other effect.
If
\fIcount\fP is zero and
.I fd
refers ta a gangbangin' file other than a regular file,
the thangs up in dis biatch is not specified.
.SH ERRORS
.TP
.B EAGAIN
Da file descriptor
.I fd
refers ta a gangbangin' file other than a socket n' has been marked nonblocking
.RB ( O_NONBLOCK ),
and tha write would block.
.TP
.BR EAGAIN " or " EWOULDBLOCK
.\" Actually EAGAIN on Linux
Da file descriptor
.I fd
refers ta a socket n' has been marked nonblocking
.RB ( O_NONBLOCK ),
and tha write would block.
POSIX.1-2001 allows either error ta be returned fo' dis case,
and do not require these constants ta have tha same value,
so a portable application should check fo' both possibilities.
.TP
.B EBADF
.I fd
is not a valid file descriptor or aint open fo' writing.
.TP
.B EDESTADDRREQ
.I fd
refers ta a thugged-out datagram socket fo' which a peer address has not been set using
.BR connect (2).
.TP
.B EDQUOT
Da userz quota of disk blocks on tha file system containin tha file
referred ta by
.I fd
has been exhausted.
.TP
.B EFAULT
.I buf
is outside yo' accessible address space.
.TP
.B ESTDG
An attempt was made ta write a gangbangin' file dat exceedz tha implementation-defined
maximum file size or tha processs file size limit,
or ta write at a posizzle past tha maximum allowed offset.
.TP
.B EINTR
Da call was interrupted by a signal before any data was written; see
.BR signal (7).
.TP
.B EINVAL
.I fd
is attached ta a object which is unsuitable fo' writing;
or tha file was opened wit the
.B O_DIRECT
flag, n' either tha address specified in
.IR buf ,
the value specified in
.IR count ,
or tha current file offset aint suitably aligned.
.TP
.B EIO
A low-level I/O error occurred while modifyin tha inode.
.TP
.B ENOSPC
Da thang containin tha file referred ta by
.I fd
has no room fo' tha data.
.TP
.B EPIPE
.I fd
is connected ta a pipe or socket whose readin end is closed.
When dis happens tha freestylin process will also receive a
.B SIGPIPE
signal.
(Thus, tha write return value is peeped only if tha program
catches, blocks or ignores dis signal.)
.PP
Other errors may occur, dependin on tha object connected to
.IR fd .
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
.\" SVr4 documents additionizzle error
.\" conditions EDEADLK, ENOLCK, ENOLNK, ENOSR, ENXIO, or ERANGE.

Under SVr4 a write may be interrupted n' return
.B EINTR
at any point,
not just before any data is written.
.SH NOTES
A successful return from
.BR write ()
does not make any guarantee dat data has been committed ta disk.
In fact, on some buggy implementations, it do not even guarantee
that space has successfully been reserved fo' tha data.
Da only way ta be shizzle is ta call
.BR fsync (2)
afta yo ass is done freestylin all yo' data.

If a
.BR write ()
is interrupted by a signal handlez before any bytes is written,
then tha call fails wit tha error
.BR EINTR ;
if it is interrupted afta at least one byte has been written,
the call succeeds, n' returns tha number of bytes written.
.SH SEE ALSO
.BR close (2),
.BR fcntl (2),
.BR fsync (2),
.BR ioctl (2),
.BR lseek (2),
.BR open (2),
.BR pwrite (2),
.BR read (2),
.BR select (2),
.BR writev (2),
.BR fwrite (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
