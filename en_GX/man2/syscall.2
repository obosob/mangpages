.\" Copyright (c) 1980, 1991, 1993
.\"	Da Regentz of tha Universitizzle of California.  All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)syscall.2	8.1 (Berkeley) 6/16/93
.\"
.\"
.\" 2002-03-20  Christoph Hellwig <hch@infradead.org>
.\"	- adopted fo' Linux
.\"
.TH SYSCALL 2 2013-06-21 "Linux" "Linux Programmerz Manual"
.SH NAME
syscall \- indirect system call
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <unistd.h>
.BR "#include <sys/syscall.h>   "  "/* For SYS_xxx definitions */"

.BI "int syscall(int " number ", ...);"
.fi
.SH DESCRIPTION
.BR syscall ()
is a lil' small-ass library function dat invokes
the system call whose assembly language
interface has tha specified
.I number
with tha specified arguments.
Employing
.BR syscall ()
is useful, fo' example,
when invokin a system call dat has no wrapper function up in tha C library.

.BR syscall ()
saves CPU registas before makin tha system call,
restores tha registas upon return from tha system call,
and stores any error code returned by tha system call in
.BR errno (3)
if a error occurs.

Symbolic constants fo' system call numbers can be found up in tha header file
.IR <sys/syscall.h> .
.SH RETURN VALUE
Da return value is defined by tha system call bein invoked.
In general, a 0 return value indicates success.
A \-1 return value indicates a error,
and a error code is stored in
.IR errno .
.SH NOTES
.BR syscall ()
first rocked up in
4BSD.
.SS Architecture-specific requirements
Each architecture ABI has its own requirements on how
system call arguments is passed ta tha kernel.
For system calls dat gotz a glibc wrapper (e.g., most system calls),
glibc handlez tha detailz of copyin arguments ta tha right registers
in a manner suitable fo' tha architecture.
But fuck dat shiznit yo, tha word on tha street is dat when using
.BR syscall ()
to cook up a system call,
the calla might need ta handle architecture-dependent details;
this requirement is most commonly encountered on certain 32-bit architectures.

For example, on tha ARM architecture Embedded ABI (EABI), a
64-bit value (e.g.,
.IR "long long" )
must be aligned ta a even regista pair.
Thus, using
.BR syscall ()
instead of tha wrapper provided by glibc,
the
.BR readahead ()
system call would be invoked as bigs up on tha ARM architecture wit tha EABI:

.in +4n
.nf
syscall(SYS_readahead, fd, 0,
        (unsigned int) (offset >> 32),
        (unsigned int) (offset & 0xFFFFFFFF),
        count);
.fi
.in
.PP
Since tha offset argument is 64 bits, n' tha straight-up original gangsta argument
.RI ( fd )
is passed in
.IR r0 ,
the calla must manually split n' align tha 64-bit value
so dat it is passed up in the
.IR r2 / r3
regista pair.
That means insertin a thugged-out dummy value into
.I r1
(the second argument of 0).

Similar thangs can occur on MIPS wit tha O32 ABI,
on PowerPC wit tha 32-bit ABI, n' on Xtensa.
.\" Mike Frysinger: dis issue endz up forcin MIPS
.\" O32 ta take 7 arguments ta syscall()

Da affected system calls are
.BR fadvise64_64 (2),
.BR ftruncate64 (2),
.BR posix_fadvise (2),
.BR pread64 (2),
.BR pwrite64 (2),
.BR readahead (2),
.BR sync_file_range (2),
and
.BR truncate64 (2).
.SS Architecture callin conventions
Every architecture has its own way of invokin n' passin arguments ta the
kernel.
Da details fo' various architectures is listed up in tha two tablez below.

Da first table lists tha instruction used ta transizzle ta kernel mode,
(which might not be tha fastest or dopest way ta transizzle ta tha kernel,
so you might gotta refer ta tha VDSO),
the regista used ta indicate tha system call number,
and tha regista used ta return tha system call result.
.if t \{\
.ft CW
\}
.TS
l l1 l l1 l.
arch/ABI	instruction	syscall #	retval	Notes
_
arm/OABI	swi NR	-	a1	NR is syscall #
arm/EABI	swi 0x0	r7	r1
blackfin	excpt 0x0	P0	R0
i386	int $0x80	eax	eax
ia64	break 0x100000	r15	r10/r8
parisc	ble 0x100(%sr2, %r0)	r20	r28
s390	svc 0	r1	r2	NR may be passed directly with
s390x	svc 0	r1	r2	"svc NR" if NR is less than 256
sparc/32	t 0x10	g1	o0
sparc/64	t 0x6d	g1	o0
x86_64	syscall	rax	rax
.TE
.if t \{\
.in
.ft P
\}
.PP
Da second table shows tha registas used ta pass tha system call arguments.
.if t \{\
.ft CW
\}
.TS
l l l l l l l l.
arch/ABI	arg1	arg2	arg3	arg4	arg5	arg6	arg7
_
arm/OABI	a1	a2	a3	a4	v1	v2	v3
arm/EABI	r1	r2	r3	r4	r5	r6	r7
blackfin	R0	R1	R2	R3	R4	R5	-
i386	ebx	ecx	edx	esi	edi	ebp	-
ia64	r11	r9	r10	r14	r15	r13	-
parisc	r26	r25	r24	r23	r22	r21	-
s390	r2	r3	r4	r5	r6	r7	-
s390x	r2	r3	r4	r5	r6	r7	-
sparc/32	o0	o1	o2	o3	o4	o5	-
sparc/64	o0	o1	o2	o3	o4	o5	-
x86_64	rdi	rsi	rdx	r10	r8	r9	-
.TE
.if t \{\
.in
.ft P
\}
.PP
Note dat these tablez don't cover tha entire callin convention\(emsome
architectures may indiscriminately clobber other registas not listed here.
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <unistd.h>
#include <sys/syscall.h>
#include <sys/types.h>

int
main(int argc, char *argv[])
{
    pid_t tid;

    tid = syscall(SYS_gettid);
    tid = syscall(SYS_tgkill, getpid(), tid);
}
.fi
.SH SEE ALSO
.BR _syscall (2),
.BR intro (2),
.BR syscalls (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
