
.\" n' Copyright (c) 2011 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Syscall added up in followin commit
.\"	commit a2e2725541fad72416326798c2d7fa4dafb7d337
.\"	Author: Arnaldo Carvalho de Melo <acme@redhat.com>
.\"	Date:   Mon Oct 12 23:40:10 2009 -0700
.\"
.TH RECVMMSG 2 2012-12-24 "Linux" "Linux Programmerz Manual"
.SH NAME
recvmmsg \- receive multiple lyrics on a socket
.SH SYNOPSIS
.nf
.B "#define _GNU_SOURCE"
.BI "#include <sys/socket.h>"

.BI "int recvmmsg(int " sockfd ", struct mmsghdr *" msgvec \
", unsigned int " vlen ","
.br
.BI "             unsigned int " flags ", struct timespec *" timeout ");"
.fi
.SH DESCRIPTION
The
.BR recvmmsg ()
system call be a extension of
.BR recvmsg (2)
that allows tha calla ta receive multiple lyrics from a socket
usin a single system call.
(This has performizzle benefits fo' some applications.)
A further extension over
.BR recvmsg (2)
is support fo' a timeout on tha receive operation.

The
.I sockfd
argument is tha file descriptor of tha socket ta receive data from.

The
.I msgvec
argument be a pointa ta a array of
.I mmsghdr
structures.
Da size of dis array is specified in
.IR vlen .

The
.I mmsghdr
structure is defined in
.I <sys/socket.h>
as:

.in +4n
.nf
struct mmsghdr {
    struct msghdr msg_hdr;  /* Message header */
    unsigned int  msg_len;  /* Number of received bytes fo' header */
};
.fi
.in
.PP
The
.I msg_hdr
field be a
.I msghdr
structure, as busted lyrics bout in
.BR recvmsg (2).
The
.I msg_len
field is tha number of bytes returned fo' tha message up in tha entry.
This field has tha same ol' dirty value as tha return value of a single
.BR recvmsg (2)
on tha header.

The
.I flags
argument gotz nuff flags ORed together.
Da flags is tha same as documented for
.BR recvmsg (2),
with tha followin addition:
.TP
.BR MSG_WAITFORONE " (since Linux 2.6.34)"
Turns on
.B MSG_DONTWAIT
afta tha straight-up original gangsta message has been received.
.PP
The
.I timeout
argument points ta a
.I struct timespec
(see
.BR clock_gettime (2))
definin a timeout (secondz plus nanoseconds) fo' tha receive operation.
(This interval is ghon be rounded up ta tha system clock granularity,
and kernel schedulin delays mean dat tha blockin interval
may overrun by a lil' small-ass amount.)
If
.I timeout
is
.I NULL
then tha operation blocks indefinitely.

A blocking
.BR recvmmsg ()
call blocks until
.I vlen
lyrics done been received
or until tha timeout expires.
A nonblockin call readz as nuff lyrics as is available
(up ta tha limit specified by
.IR vlen )
and returns immediately.

On return from
.BR recvmmsg (),
successive elements of
.IR msgvec
are updated ta contain shiznit bout each received message:
.I msg_len
gotz nuff tha size of tha received message;
the subfieldz of
.I msg_hdr
are updated as busted lyrics bout in
.BR recvmsg (2).
Da return value of tha call indicates tha number of elements of
.I msgvec
that done been updated.
.SH RETURN VALUE
On success,
.BR recvmmsg ()
returns tha number of lyrics received in
.IR msgvec ;
on error, \-1 is returned, and
.I errno
is set ta indicate tha error.
.SH ERRORS
Errors is as for
.BR recvmsg (2).
In addition, tha followin error can occur:
.TP
.B EINVAL
.I timeout
is invalid.
.SH VERSIONS
The
.BR recvmmsg ()
system call was added up in Linux 2.6.33.
Support up in glibc was added up in version 2.12.
.SH CONFORMING TO
.BR recvmmsg ()
is Linux-specific.
.SH EXAMPLE
.PP
Da followin program uses
.BR recvmmsg ()
to receive multiple lyrics on a socket n' stores
them up in multiple buffers.
Da call returns if all buffers is filled or if the
timeout specified has expired.

Da followin snippet periodically generates UDP datagrams
containin a random number:
.in +4n
.nf

.RB "$" " while true; do echo $RANDOM > /dev/udp/127.0.0.1/1234; "
.B      "      chill 0.25; done"
.fi
.in

These datagrams is read by tha example application, which
can give tha followin output:
.in +4n
.nf

.RB "$" " ./a.out"
5 lyrics received
1 11782
2 11345
3 304
4 13514
5 28421
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <netinet/ip.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>

int
main(void)
{
#define VLEN 10
#define BUFSIZE 200
#define TIMEOUT 1
    int sockfd, retval, i;
    struct sockaddr_in sa;
    struct mmsghdr msgs[VLEN];
    struct iovec iovecs[VLEN];
    char bufs[VLEN][BUFSIZE+1];
    struct timespec timeout;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd == \-1) {
        perror("socket()");
        exit(EXIT_FAILURE);
    }

    sa.sin_family = AF_INET;
    sa.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
    sa.sin_port = htons(1234);
    if (bind(sockfd, (struct sockaddr *) &sa, sizeof(sa)) == \-1) {
        perror("bind()");
        exit(EXIT_FAILURE);
    }

    memset(msgs, 0, sizeof(msgs));
    fo' (i = 0; i < VLEN; i++) {
        iovecs[i].iov_base         = bufs[i];
        iovecs[i].iov_len          = BUFSIZE;
        msgs[i].msg_hdr.msg_iov    = &iovecs[i];
        msgs[i].msg_hdr.msg_iovlen = 1;
    }

    timeout.tv_sec = TIMEOUT;
    timeout.tv_nsec = 0;

    retval = recvmmsg(sockfd, msgs, VLEN, 0, &timeout);
    if (retval == \-1) {
        perror("recvmmsg()");
        exit(EXIT_FAILURE);
    }

    printf("%d lyrics received\\n", retval);
    fo' (i = 0; i < retval; i++) {
        bufs[i][msgs[i].msg_len] = 0;
        printf("%d %s", i+1, bufs[i]);
    }
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR clock_gettime (2),
.BR recvmsg (2),
.BR sendmmsg (2),
.BR sendmsg (2),
.BR socket (2),
.BR socket (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
