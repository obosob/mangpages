
.\" n' Copyright (C) 1994 Andries E. Brouwer <aeb@cwi.nl>
.\" n' Copyright (C) 2002, 2005 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified 1996-11-04 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-10-13 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on oldschool behavior of MS_NOSUID
.\" Modified 2002-05-16 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Extensive chizzlez n' additions
.\" Modified 2002-05-27 by aeb
.\" Modified 2002-06-11 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Enhanced descriptionz of MS_MOVE, MS_BIND, n' MS_REMOUNT
.\" Modified 2004-06-17 by Mike Kerrisk <mtk.manpages@gmail.com>
.\" 2005-05-18, mtk, Added MNT_EXPIRE, plus all dem other tidy-ups.
.\" 2008-10-06, mtk: move umount*() material tha fuck into separate umount.2 page.
.\" 2008-10-06, mtk: Add rap of namespaces.
.\"
.TH MOUNT 2 2012-07-05 "Linux" "Linux Programmerz Manual"
.SH NAME
mount \- mount file system
.SH SYNOPSIS
.nf
.B "#include <sys/mount.h>"
.sp
.BI "int mount(const char *" source ", const char *" target ,
.BI "          const char *" filesystemtype ", unsigned long " mountflags ,
.BI "          const void *" data );
.fi
.SH DESCRIPTION
.BR mount ()
attaches tha file system specified by
.I source
(which is often a thang name yo, but can also be a gangbangin' finger-lickin' directory name
or a thugged-out dummy) ta tha directory specified by
.IR target .

Appropriate privilege (Linux: the
.B CAP_SYS_ADMIN
capability) is required ta mount file systems.

Since Linux 2.4 a single file system can be visible at
multiple mount points, n' multiple mounts can be stacked
on tha same mount point.
.\" Multiple mounts on same mount point: since 2.3.99pre7.

Values fo' the
.I filesystemtype
argument supported by tha kernel is listed in
.I /proc/filesystems
(e.g., "minix", "ext2", "ext3", "jfs", "xfs", "reiserfs",
"msdos", "proc", "nfs", "iso9660").
Further types may become available when tha appropriate modules
are loaded.

The
.I mountflags
argument may have tha magic number 0xC0ED (\fBMS_MGC_VAL\fP)
in tha top 16 bits (this was required up in kernel versions prior ta 2.4 yo, but
is no longer required n' ignored if specified),
and various mount flags
.\" (as defined up in \fI<linux/fs.h>\fP fo' libc4 n' libc5
.\" n' up in \fI<sys/mount.h>\fP fo' glibc2)
in tha low order 16 bits:
.\" FIXME 2.6.15 added flags fo' "shared subtree" functionality:
.\" MS_UNBINDABLE, MS_PRIVATE, MS_SHARED, MS_SLAVE
.\"
.\"	MS_PRIVATE.
.\"		All mounts is private by default. Previously shared mouns
.\"		can be remarked PRIVATE.
.\"	MS_SHARED
.\"		Mount points dat is marked SHARED propagate mount events
.\"		to one another afta bin cloned.
.\"	MS_SLAVE
.\"		A previously shared mount point can be marked SALVE, meaning
.\"		it receives propagated events yo, but do not propagate events.
.\"	MS_UNBINDABLE
.\"		mounts cannot be bound tha fuck into other places, n' aint gonna be
.\"		propagated tha fuck into freshly smoked up subtrees	
.\"	mount --make-rshared ==> MS_SHARED | MS_REC
.\"
.\" These settings is visible up in proc/mountinfo
.\"
.\"
.\" These need ta be documented on dis page.
.\" See:
.\" Documentation/filesystems/sharedsubtree.txt
.\"
.\" http://lwn.net/Articles/159077/
.\"
.\" http://myweb.sudhaa.com:2022/~ram/sharedsubtree/paper/sharedsubtree.1.pdf
.\" Shared-Subtree Concept, Implementation, n' Applications up in Linux
.\" Al Viro viro@ftp.linux.org.uk
.\" Ram Pai linuxram@us.ibm.com
.\"
.\" http://foss.in/2005/slides/sharedsubtree1.pdf
.\" Shared Subtree Concept n' Implementation up in tha Linux Kernel
.\" Ram Pai
.\"
.\" http://www.ibm.com/developerworks/linux/library/l-mount-namespaces/index.html
.\"     Applyin mount namespaces
.\"
.\"     Uncover practical applications fo' advanced Linux mounts features
.\"     Serge E yo. Hallyn (sergeh@us.ibm.com), Software Engineer, IBM???
.\"     Ram Pai (linuxram@us.ibm.com), Software Engineer, IBM
.\"     Date:  17 Sep 2007
.\"
.\" 2.6.25 Added MS_I_VERSION, which need ta be documented.
.\"
.TP
.BR MS_BIND " (Linux 2.4 onward)"
.\" since 2.4.0-test9
Perform a funky-ass bind mount, bustin a gangbangin' file or a gangbangin' finger-lickin' directory subtree visible at
another point within a gangbangin' file system.
Bind mounts may cross file system boundaries n' span
.BR chroot (2)
jails.
The
.IR filesystemtype
and
.IR data
arguments is ignored.
Up until Linux 2.6.26,
.I mountflags
was also ignored
.\" wit tha exception of tha "hidden" MS_REC mountflags bit
(the bind mount has tha same ol' dirty mount options as
the underlyin mount point).
.TP
.BR MS_DIRSYNC " (since Linux 2.5.19)"
Make directory chizzlez on dis file system synchronous.
(This property can be obtained fo' individual directories
or subtrees using
.BR chattr (1).)
.TP
.B MS_MANDLOCK
Permit mandatory lockin on filez up in dis file system.
(Mandatory lockin must still be enabled on a per-file basis,
as busted lyrics bout in
.BR fcntl (2).)
.\" FIXME Say mo' bout MS_MOVE
.TP
.B MS_MOVE
Move a subtree.
.I source
specifies a existin mount point and
.I target
specifies tha freshly smoked up location.
Da move be atomic: at no point is tha subtree unmounted.
The
.IR filesystemtype ", " mountflags ", n' " data
arguments is ignored.
.TP
.B MS_NOATIME
Do not update access times fo' (all types of) filez on dis file system.
.TP
.B MS_NODEV
Do not allow access ta devices (special files) on dis file system.
.TP
.B MS_NODIRATIME
Do not update access times fo' directories on dis file system.
This flag serves up a subset of tha functionalitizzle provided by
.BR MS_NOATIME ;
that is,
.BR MS_NOATIME
implies
.BR MS_NODIRATIME .
.TP
.B MS_NOEXEC
Do not allow programs ta be executed from dis file system.
.\" (Possibly useful fo' a gangbangin' file system dat gotz nuff non-Linux executables.
.\" Often used as a securitizzle feature, e.g., ta make shizzle dat restricted
.\" playas cannot execute filez uploaded rockin ftp or so.)
.TP
.B MS_NOSUID
Do not honor set-user-ID n' set-group-ID bits when executing
programs from dis file system.
.\" (This be a securitizzle feature ta prevent playas executin set-user-ID and
.\" set-group-ID programs from removable disk devices.)
.TP
.B MS_RDONLY
Mount file system read-only.
.\"
.\" FIXME Document MS_REC, available since 2.4.11.
.\" This flag has meanin up in conjunction wit MS_BIND and
.\" also wit tha shared subtree flags.
.TP
.BR MS_RELATIME " (Since Linux 2.6.20)"
When a gangbangin' file on dis file system be accessed,
update tha filez last access time (atime) only if tha current value
of atime is less than or equal ta tha filez last modification time (mtime)
or last status chizzle time (ctime).
This option is useful fo' programs, such as
.BR mutt (1),
that need ta know when a gangbangin' file has been read since dat shiznit was last modified.
Since Linux 2.6.30, tha kernel defaults ta tha behavior provided
by dis flag (unless
.BR MS_NOATIME
was specified), n' the
.B MS_STRICTATIME
flag is required ta obtain traditionizzle semantics.
In addition, since Linux 2.6.30,
the filez last access time be always updated if it
is mo' than 1 dizzle old.
.\" Matthew Garrett notes up in tha patch dat added dis behavior
.\" dat dis lets utilitizzles like fuckin tmpreaper (which deletes
.\" filez based on last acces time) work erectly.
.TP
.B MS_REMOUNT
Remount a existin mount.
This allows you ta chizzle the
.I mountflags
and
.I data
of a existin mount without havin ta unmount n' remount tha file system.
.I target
should be tha same value specified up in tha initial
.BR mount ()
call;
.I source
and
.I filesystemtype
are ignored.

Da following
.I mountflags
can be chizzled:
.BR MS_RDONLY ,
.BR MS_SYNCHRONOUS ,
.BR MS_MANDLOCK ;
before kernel 2.6.16, tha followin could also be chizzled:
.B MS_NOATIME
and
.BR MS_NODIRATIME ;
and, additionally, before kernel 2.4.10, tha followin could also be chizzled:
.BR MS_NOSUID ,
.BR MS_NODEV ,
.BR MS_NOEXEC .
.TP
.BR MS_SILENT " (since Linux 2.6.17)"
Suppress tha display of certain
.RI ( printk ())
warnin lyrics up in tha kernel log.
This flag supersedes tha misnamed n' obsolete
.BR MS_VERBOSE
flag (available since Linux 2.4.12), which has tha same ol' dirty meaning.
.TP
.BR MS_STRICTATIME " (Since Linux 2.6.30)"
Always update tha last access time (atime) when filez on this
file system is accessed.
(This was tha default behavior before Linux 2.6.30.)
Specifyin dis flag overrides tha effect of settin the
.BR MS_NOATIME
and
.BR MS_RELATIME
flags.
.TP
.B MS_SYNCHRONOUS
Make writes on dis file system synchronous (as though
the
.B O_SYNC
flag to
.BR open (2)
was specified fo' all file opens ta dis file system).
.PP
From Linux 2.4 onward, the
.BR MS_NODEV ", " MS_NOEXEC ", n' " MS_NOSUID
flags is settable on a per-mount-point basis.
From kernel 2.6.16 onward,
.B MS_NOATIME
and
.B MS_NODIRATIME
are also settable on a per-mount-point basis.
The
.B MS_RELATIME
flag be also settable on a per-mount-point basis.
.PP
The
.I data
argument is interpreted by tha different file systems.
Typically it aint nuthin but a strang of comma-separated options
understood by dis file system.
See
.BR mount (8)
for detailz of tha options available fo' each filesystem type.
.SH "RETURN VALUE"
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
Da error joints given below result from filesystem type independent
errors.
Each file-system type may have its own special errors n' its
own special behavior.
See tha Linux kernel source code fo' details.
.TP
.B EACCES
A component of a path was not searchable.
(See also
.BR path_resolution (7).)
Or, mountin a read-only file system was attempted without givin the
.B MS_RDONLY
flag.
Or, tha block device
.I source
is located on a gangbangin' file system mounted wit the
.B MS_NODEV
option.
.\" mtk: Probably: write permission is required fo' MS_BIND, with
.\" tha error EPERM if not present; CAP_DAC_OVERRIDE is required.
.TP
.B EBUSY
.I source
is already mounted.
Or, it cannot be remounted read-only,
because it still holdz filez open fo' writing.
Or, it cannot be mounted on
.I target
because
.I target
is still busy (it is tha hustlin directory of some thread,
the mount point of another device, has open files, etc.).
.TP
.B EFAULT
One of tha pointa arguments points outside tha user address space.
.TP
.B EINVAL
.I source
had a invalid superblock.
Or, a remount
.RB ( MS_REMOUNT )
was attempted yo, but
.I source
was not already mounted on
.IR target .
Or, a move
.RB ( MS_MOVE )
was attempted yo, but
.I source
was not a mount point, or was \(aq/\(aq.
.TP
.B ELOOP
Too nuff links encountered durin pathname resolution.
Or, a move was attempted, while
.I target
is a thugged-out descendant of
.IR source .
.TP
.B EMFILE
(In case no block thang is required:)
Table of dummy devices is full.
.TP
.B ENAMETOOLONG
A pathname was longer than
.BR MAXPATHLEN .
.TP
.B ENODEV
.I filesystemtype
not configured up in tha kernel.
.TP
.B ENOENT
A pathname was empty or had a nonexistent component.
.TP
.B ENOMEM
Da kernel could not allocate a gangbangin' free page ta copy filenames or data into.
.TP
.B ENOTBLK
.I source
is not a funky-ass block thang (and a thang was required).
.TP
.B ENOTDIR
.IR target ,
or a prefix of
.IR source ,
is not a gangbangin' finger-lickin' directory.
.TP
.B ENXIO
Da major number of tha block device
.I source
is outta range.
.TP
.B EPERM
Da calla aint gots tha required privileges.
.SH VERSIONS
Da definitions of
.BR MS_DIRSYNC ,
.BR MS_MOVE ,
.BR MS_REC ,
.BR MS_RELATIME ,
and
.BR MS_STRICTATIME
were added ta glibc headaz up in version 2.12.
.\" FIXME: Definitionz of tha so-far-undocumented MS_UNBINDABLE, MS_PRIVATE,
.\"  MS_SHARED, n' MS_SLAVE was (also) only added ta glibc headaz up in 2.12.
.SH "CONFORMING TO"
This function is Linux-specific n' should not be used in
programs intended ta be portable.
.SH NOTES
Da original
.B MS_SYNC
flag was renamed
.B MS_SYNCHRONOUS
in 1.1.69
when a gangbangin' finger-lickin' different
.B MS_SYNC
was added ta \fI<mman.h>\fP.
.LP
Before Linux 2.4 a attempt ta execute a set-user-ID or set-group-ID program
on a gangbangin' file system mounted with
.B MS_NOSUID
would fail with
.BR EPERM .
Since Linux 2.4 tha set-user-ID n' set-group-ID bits are
just silently ignored up in dis case.
.\" Da chizzle is up in patch-2.4.0-prerelease.
.SS Per-process namespaces
Startin wit kernel 2.4.19, Linux provides
per-process mount namespaces.
A mount namespace is tha set of file system mounts that
are visible ta a process.
Mount-point namespaces can be (and probably are)
shared between multiple processes,
and chizzlez ta tha namespace (i.e., mounts n' unmounts) by one process
are visible ta all other processes pluggin tha same namespace.
(Da pre-2.4.19 Linux thang can be considered as one up in which
a single namespace was shared by every last muthafuckin process on tha system.)

A lil pimp process pimped by
.BR fork (2)
shares its parentz mount namespace;
the mount namespace is preserved across an
.BR execve (2).

A process can obtain a private mount namespace if:
it was pimped rockin the
.BR clone (2)
.BR CLONE_NEWNS
flag,
in which case its freshly smoked up namespace is initialized ta be a
.I copy
of tha namespace of tha process dat called
.BR clone (2);
or it calls
.BR unshare (2)
with the
.BR CLONE_NEWNS
flag,
which causes tha callerz mount namespace ta obtain a private copy
of tha namespace dat dat shiznit was previously pluggin wit other processes,
so dat future mounts n' unmounts by tha calla is invisible
to other processes (except lil pimp processes dat tha caller
subsequently creates) n' vice versa.

Da Linux-specific
.I /proc/PID/mounts
file exposes tha list of mount points up in tha mount
namespace of tha process wit tha specified ID; see
.BR proc (5)
for details.
.SH "SEE ALSO"
.BR umount (2),
.BR namespaces (7),
.BR path_resolution (7),
.BR mount (8),
.BR umount (8)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
