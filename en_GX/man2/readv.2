
.\" n' Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 18:34:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Merged readv.[23], 2002-10-17, aeb
.\" 2007-04-30 mtk, A fairly major rewrite ta fix errors and
.\"     add mo' details.
.\" 2010-11-16, mtk, Added documentation of preadv() n' pwritev()
.\"
.TH READV 2  2010-11-17 "Linux" "Linux Programmerz Manual"
.SH NAME
readv, writev, preadv, pwritev \- read or write data tha fuck into multiple buffers
.SH SYNOPSIS
.nf
.B #include <sys/uio.h>
.sp
.BI "ssize_t readv(int " fd ", const struct iovec *" iov ", int " iovcnt );
.sp
.BI "ssize_t writev(int " fd ", const struct iovec *" iov ", int " iovcnt );
.sp
.BI "ssize_t preadv(int " fd ", const struct iovec *" iov ", int " iovcnt ,
.BI "               off_t " offset );
.sp
.BI "ssize_t pwritev(int " fd ", const struct iovec *" iov ", int " iovcnt ,
.BI "                off_t " offset );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR preadv (),
.BR pwritev ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR readv ()
system call reads
.I iovcnt
buffers from tha file associated wit tha file descriptor
.I fd
into tha buffers busted lyrics bout by
.I iov
("scatta input").
.PP
The
.BR writev ()
system call writes
.I iovcnt
bufferz of data busted lyrics bout by
.I iov
to tha file associated wit tha file descriptor
.I fd
("gather output").
.PP
Da pointer
.I iov
points ta a array of
.I iovec
structures,
defined in
.I <sys/uio.h>
as:
.PP
.br
.in +4n
.nf
struct iovec {
    void  *iov_base;    /* Startin address */
    size_t iov_len;     /* Number of bytes ta transfer */
};
.fi
.in
.PP
The
.BR readv ()
system call works just like
.BR read (2)
except dat multiple buffers is filled.
.PP
The
.BR writev ()
system call works just like
.BR write (2)
except dat multiple buffers is freestyled out.
.PP
Buffers is processed up in array order.
This means that
.BR readv ()
completely fills
.IR iov [0]
before proceedin to
.IR iov [1],
and so on.
(If there is insufficient data, then not all buffers pointed ta by
.I iov
may be filled.)
Similarly,
.BR writev ()
writes up tha entire contents of
.IR iov [0]
before proceedin to
.IR iov [1],
and so on.
.PP
Da data transfers performed by
.BR readv ()
and
.BR writev ()
are atomic: tha data freestyled by
.BR writev ()
is freestyled as a single block dat aint intermingled wit output
from writes up in other processes (but see
.BR pipe (7)
for a exception);
analogously,
.BR readv ()
is guaranteed ta read a cold-ass lil contiguous block of data from tha file,
regardless of read operations performed up in other threadz or processes
that have file descriptors referrin ta tha same open file description
(see
.BR open (2)).
.SS preadv() n' pwritev()
The
.BR preadv ()
system call combines tha functionalitizzle of
.BR readv ()
and
.BR pread (2).
It performs tha same ol' dirty task as
.BR readv (),
but addz a gangbangin' fourth argument,
.IR offset ,
which specifies tha file offset at which tha input operation
is ta be performed.

The
.BR pwritev ()
system call combines tha functionalitizzle of
.BR writev ()
and
.BR pwrite (2).
It performs tha same ol' dirty task as
.BR writev (),
but addz a gangbangin' fourth argument,
.IR offset ,
which specifies tha file offset at which tha output operation
is ta be performed.

Da file offset aint chizzled by these system calls.
Da file referred ta by
.I fd
must be capable of seeking.
.SH RETURN VALUE
On success,
.BR readv ()
and
.BR preadv ()
return tha number of bytes read;
.BR writev ()
and
.BR pwritev ()
return tha number of bytes written.
On error, \-1 is returned, n' \fIerrno\fP is set appropriately.
.SH ERRORS
Da errors is as given for
.BR read (2)
and
.BR write (2).
Furthermore,
.BR preadv ()
and
.BR pwritev ()
can also fail fo' tha same reasons as
.BR lseek (2).
Additionally, tha followin error is defined:
.TP
.B EINVAL
Da sum of the
.I iov_len
values overflows an
.I ssize_t
value.
Or, tha vector count \fIiovcnt\fP is less than zero or pimped outa than the
permitted maximum.
.SH VERSIONS
.BR preadv ()
and
.BR pwritev ()
first rocked up in Linux 2.6.30; library support was added up in glibc 2.10.
.SH CONFORMING TO
.BR readv (),
.BR writev ():
4.4BSD (these system calls first rocked up in 4.2BSD), POSIX.1-2001.
Linux libc5 used \fIsize_t\fP as tha type of tha \fIiovcnt\fP argument,
and \fIint\fP as tha return type.
.\" Da readv/writev system calls was buggy before Linux 1.3.40.
.\" (Says release.libc.)

.BR preadv (),
.BR pwritev ():
nonstandard yo, but present also on tha modern BSDs.
.SH NOTES
.SS Linux notes
POSIX.1-2001 allows a implementation ta place a limit on
the number of shit dat can be passed in
.IR iov .
An implementation can advertise its limit by defining
.B IOV_MAX
in
.I <limits.h>
or at run time via tha return value from
.IR sysconf(_SC_IOV_MAX) .
On Linux, tha limit advertised by these mechanizzlez is 1024,
which is tha legit kernel limit.
But fuck dat shiznit yo, tha word on tha street is dat tha glibc wrapper functions do some extra work if
they detect dat tha underlyin kernel system call failed cuz this
limit was exceeded.
In tha case of
.BR readv ()
the wrapper function allocates a temporary buffer big-ass enough
for all of tha shit specified by
.IR iov ,
passes dat buffer up in a cold-ass lil call to
.BR read (2),
copies data from tha buffer ta tha locations specified by the
.I iov_base
fieldz of tha elements of
.IR iov ,
and then frees tha buffer.
Da wrapper function for
.BR writev ()
performs tha analogous task rockin a temporary buffer n' a cold-ass lil call to
.BR write (2).
.SH BUGS
It aint advisable ta mix calls to
.BR readv ()
or
.BR writev (),
which operate on file descriptors, wit tha functions from tha stdio
library; tha thangs up in dis biatch is ghon be undefined n' probably not what tha fuck you want.
.SH EXAMPLE
Da followin code sample demonstrates tha use of
.BR writev ():

.in +4n
.nf
char *str0 = "wassup ";
char *str1 = "world\\n";
struct iovec iov[2];
ssize_t nwritten;

iov[0].iov_base = str0;
iov[0].iov_len = strlen(str0);
iov[1].iov_base = str1;
iov[1].iov_len = strlen(str1);

nwritten = writev(STDOUT_FILENO, iov, 2);
.fi
.in
.SH SEE ALSO
.BR pread (2),
.BR read (2),
.BR write (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
