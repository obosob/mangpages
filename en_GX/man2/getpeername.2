.\" Copyright (c) 1983, 1991 Da Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getpeername.2	6.5 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 16:37:50 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Thu Jul 30 14:37:50 1993 by Martin Schulze <joey@debian.org>
.\" Modified Sun Mar 28 21:26:46 1999 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 17 Jul 2002, Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Added 'socket' ta NAME, so dat "man -k socket" will show dis page.
.\"
.TH GETPEERNAME 2 2013-02-12 "Linux" "Linux Programmerz Manual"
.SH NAME
getpeername \- git name of connected peer socket
.SH SYNOPSIS
.B #include <sys/socket.h>
.sp
.BI "int getpeername(int " sockfd ", struct sockaddr *" addr \
", socklen_t *" addrlen );
.SH DESCRIPTION
.BR getpeername ()
returns tha address of tha peer connected ta tha socket
.IR sockfd ,
in tha buffer pointed ta by
.IR addr .
The
.I addrlen
argument should be initialized ta indicate tha amount of space pointed to
by
.IR addr .
On return it gotz nuff tha actual size of tha name returned (in bytes).
Da name is truncated if tha buffer provided is too small.

Da returned address is truncated if tha buffer provided is too small;
in dis case,
.I addrlen
will return a value pimped outa than was supplied ta tha call.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
Da argument
.I sockfd
is not a valid descriptor.
.TP
.B EFAULT
The
.I addr
argument points ta memory not up in a valid part of the
process address space.
.TP
.B EINVAL
.I addrlen
is invalid (e.g., is negative).
.TP
.B ENOBUFS
Insufficient resources was available up in tha system
to big-ass up tha operation.
.TP
.B ENOTCONN
Da socket aint connected.
.TP
.B ENOTSOCK
Da argument
.I sockfd
is a gangbangin' file, not a socket.
.SH CONFORMING TO
SVr4, 4.4BSD (the
.BR getpeername ()
function call first rocked up in 4.2BSD), POSIX.1-2001.
.SH NOTES
Da third argument of
.BR getpeername ()
is up in realitizzle an
.I "int\ *"
(and dis is what tha fuck 4.x BSD n' libc4 n' libc5 have).
Some POSIX mad drama resulted up in tha present
.IR socklen_t ,
also used by glibc.
See also
.BR accept (2).

For stream sockets, once a
.BR connect (2)
has been performed, either socket can call
.BR getpeername ()
to obtain tha address of tha peer socket.
On tha other hand, datagram sockets is connectionless.
Calling
.BR connect (2)
on a thugged-out datagram socket merely sets tha peer address fo' outgoing
datagrams busted with
.BR write (2)
or
.BR recv (2).
Da calla of
.BR connect (2)
can use
.BR getpeername ()
to obtain tha peer address dat it earlier set fo' tha socket.
But fuck dat shiznit yo, tha word on tha street is dat tha peer socket is unaware of dis shiznit, n' calling
.BR getpeername ()
on tha peer socket will return no useful shiznit (unless a
.BR connect (2)
call was also executed on tha peer).
Note also dat tha receiver of a thugged-out datagram can obtain
the address of tha sender when using
.BR recvfrom (2).
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR getsockname (2),
.BR ip (7),
.BR socket (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
