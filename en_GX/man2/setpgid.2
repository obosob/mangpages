.\" Copyright (c) 1983, 1991 Regentz of tha Universitizzle of California.
.\" n' Copyright (C) 2007, Mike Kerrisk <mtk.manpages@gmail.com>
.\" All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getpgrp.2	6.4 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-04-15 by Mike Chastain <mec@shell.portal.com>:
.\"   Added 'getpgid'.
.\" Modified 1996-07-21 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1999-09-02 by Mike Haardt <michael@moria.de>
.\" Modified 2002-01-18 by Mike Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2003-01-20 by Andries Brouwer <aeb@cwi.nl>
.\" 2007-07-25, mtk, fairly substantial rewrites n' rearrangements
.\" of text.
.\"
.TH SETPGID 2 2013-07-31 "Linux" "Linux Programmerz Manual"
.SH NAME
setpgid, getpgid, setpgrp, getpgrp \- set/get process group
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int setpgid(pid_t " pid ", pid_t " pgid );
.br
.BI "pid_t getpgid(pid_t " pid );
.sp
.BR "pid_t getpgrp(void);" "                 /* POSIX.1 version */"
.br
.BI "pid_t getpgrp(pid_t " pid ");\ \ \ \ \ \ \ \ \ \ \ "
/* BSD version */
.sp
.BR "int setpgrp(void);" "                   /* System V version */"
.br
.BI "int setpgrp(pid_t " pid ", pid_t " pgid ");\ "
/* BSD version */
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.PD 0
.BR getpgid ():
.RS 4
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.sp
.BR setpgrp "() (POSIX.1):"
.nf
    _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
    _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.fi
.sp
.BR setpgrp "()\ (BSD),"
.BR getpgrp "()\ (BSD):"
.nf
    _BSD_SOURCE &&
        !\ (_POSIX_SOURCE || _POSIX_C_SOURCE || _XOPEN_SOURCE ||
           _XOPEN_SOURCE_EXTENDED || _GNU_SOURCE || _SVID_SOURCE)
.fi
.PD
.ad
.SH DESCRIPTION
All of these intercourses is available on Linux,
and is used fo' gettin n' settin the
process crew ID (PGID) of a process.
Da preferred, POSIX.1-specified wayz of bustin dis are:
.BR getpgrp (void),
for retrievin tha callin processs PGID; and
.BR setpgid (),
for settin a processs PGID.

.BR setpgid ()
sets tha PGID of tha process specified by
.I pid
to
.IR pgid .
If
.I pid
is zero, then tha process ID of tha callin process is used.
If
.I pgid
is zero, then tha PGID of tha process specified by
.I pid
is made tha same as its process ID.
If
.BR setpgid ()
is used ta move a process from one process
group ta another (as is done by some shells when bustin pipelines),
both process crews must be part of tha same session (see
.BR setsid (2)
and
.BR credentials (7)).
In dis case,
the \fIpgid\fP specifies a existin process crew ta be joined n' the
session ID of dat crew must match tha session ID of tha joinin process.

Da POSIX.1 version of
.BR getpgrp (),
which takes no arguments,
returns tha PGID of tha callin process.

.BR getpgid ()
returns tha PGID of tha process specified by
.IR pid .
If
.I pid
is zero, tha process ID of tha callin process is used.
(Retrievin tha PGID of a process other than tha calla is rarely
necessary, n' tha POSIX.1
.BR getpgrp ()
is preferred fo' dat task.)

Da System V-style
.BR setpgrp (),
which takes no arguments, is equivalent to
.IR "setpgid(0,\ 0)" .

Da BSD-specific
.BR setpgrp ()
call, which takes arguments
.I pid
and
.IR pgid ,
is equivalent to
.IR "setpgid(pid, pgid)" .
.\" Da legit BSD setpgrp() system call differs up in allowin tha PGID
.\" ta be set ta arbitrary joints, rather than bein restricted to
.\" PGIDs up in tha same session.

Da BSD-specific
.BR getpgrp ()
call, which takes a single
.I pid
argument, is equivalent to
.IR "getpgid(pid)" .
.SH RETURN VALUE
On success,
.BR setpgid ()
and
.BR setpgrp ()
return zero.
On error, \-1 is returned, and
.I errno
is set appropriately.

Da POSIX.1
.BR getpgrp ()
always returns tha PGID of tha caller.

.BR getpgid (),
and tha BSD-specific
.BR getpgrp ()
return a process crew on success.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
An attempt was made ta chizzle tha process crew ID
of one of tha lil pimpz of tha callin process n' tha lil pimp had
already performed an
.BR execve (2)
.RB ( setpgid (),
.BR setpgrp ()).
.TP
.B EINVAL
.I pgid
is less than 0
.RB ( setpgid (),
.BR setpgrp ()).
.TP
.B EPERM
An attempt was made ta move a process tha fuck into a process crew up in a
different session, or ta chizzle tha process
group ID of one of tha lil pimpz of tha callin process n' the
child was up in a gangbangin' finger-lickin' different session, or ta chizzle tha process crew ID of
a session leader
.RB ( setpgid (),
.BR setpgrp ()).
.TP
.B ESRCH
For
.BR getpgid ():
.I pid
does not match any process.
For
.BR setpgid ():
.I pid
is not tha callin process n' not a cold-ass lil lil pimp of tha callin process.
.SH CONFORMING TO
.BR setpgid ()
and tha version of
.BR getpgrp ()
with no arguments
conform ta POSIX.1-2001.

POSIX.1-2001 also specifies
.BR getpgid ()
and tha version of
.BR setpgrp ()
that takes no arguments.
(POSIX.1-2008 marks this
.BR setpgrp ()
specification as obsolete.)

Da version of
.BR getpgrp ()
with one argument n' tha version of
.BR setpgrp ()
that takes two arguments derive from 4.2BSD,
and is not specified by POSIX.1.
.SH NOTES
A lil pimp pimped via
.BR fork (2)
inherits its parentz process crew ID.
Da PGID is preserved across an
.BR execve (2).

Each process crew be a gangmember of a session n' each process be a
gangmember of tha session of which its process crew be a member.

A session can gotz a cold-ass lil controllin terminal.
At any time, one (and only one) of tha process groups
in tha session can be tha foreground process group
for tha terminal;
the remainin process crews is up in tha background.
If a signal is generated from tha terminal (e.g., typin the
interrupt key ta generate
.BR SIGINT ),
that signal is busted ta tha foreground process group.
(See
.BR termios (3)
for a thugged-out description of tha charactas dat generate signals.)
Only tha foreground process crew may
.BR read (2)
from tha terminal;
if a funky-ass background process crew tries to
.BR read (2)
from tha terminal, then tha crew is busted a
.B SIGTTIN
signal, which suspendz dat shit.
The
.BR tcgetpgrp (3)
and
.BR tcsetpgrp (3)
functions is used ta get/set tha foreground
process crew of tha controllin terminal.

The
.BR setpgid ()
and
.BR getpgrp ()
calls is used by programs such as
.BR bash (1)
to create process crews up in order ta implement shell thang control.

If a session has a cold-ass lil controllin terminal, n' the
.B CLOCAL
flag fo' dat terminal aint set,
and a terminal hangup occurs, then tha session leader is busted a
.BR SIGHUP .
If tha session leader exits, then a
.B SIGHUP
signal will also be busted ta each process up in tha foreground
process crew of tha controllin terminal.

If tha exit of tha process causes a process crew ta become orphaned,
and if any gangmember of tha newly orphaned process crew is stopped, then a
.B SIGHUP
signal followed by a
.B SIGCONT
signal is ghon be busted ta each process
in tha newly orphaned process group.
.\" exit.3 refers ta tha followin text:
An orphaned process crew is one up in which tha parent of
every gangmember of process crew is either itself also a member
of tha process crew or be a gangmember of a process group
in a gangbangin' finger-lickin' different session (see also
.BR credentials (7)).
.SH SEE ALSO
.BR getuid (2),
.BR setsid (2),
.BR tcgetpgrp (3),
.BR tcsetpgrp (3),
.BR termios (3),
.BR credentials (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
