'\" t
.\" Copyright (c) 1994,1995 Mike Battersby <mib@deakin.edu.au>
.\" n' Copyright 2004, 2005 Mike Kerrisk <mtk.manpages@gmail.com>
.\" based on work by faith@cs.unc.edu
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified, aeb, 960424
.\" Modified Fri Jan 31 17:31:20 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Sat May  8 17:40:19 1999 by Matthew Wilcox
.\"	add POSIX.1b signals
.\" Modified Sat Dec 29 01:44:52 2001 by Evan Jones <ejones@uwaterloo.ca>
.\"	SA_ONSTACK
.\" Modified 2004-11-11 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Added mention of SIGCONT under SA_NOCLDSTOP
.\"	Added SA_NOCLDWAIT
.\" Modified 2004-11-17 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Updated rap fo' POSIX.1-2001 n' SIGCHLD n' sa_flags.
.\"	Formattin fixes
.\" 2004-12-09, mtk, added SI_TKILL + other minor chizzles
.\" 2005-09-15, mtk, split sigpending(), sigprocmask(), sigsuspend()
.\"	out of dis page tha fuck into separate pages.
.\" 2010-06-11 Andi Kleen, add hwpoison signal extensions
.\" 2010-06-11 mtk, improvements ta rap of various siginfo_t fields.
.\"
.TH SIGACTION 2 2013-07-30 "Linux" "Linux Programmerz Manual"
.SH NAME
sigaction \- examine n' chizzle a signal action
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "int sigaction(int " signum ", const struct sigaction *" act ,
.BI "              struct sigaction *" oldact );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigaction ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE

.IR siginfo_t :
_POSIX_C_SOURCE >= 199309L
.ad b
.SH DESCRIPTION
The
.BR sigaction ()
system call is used ta chizzle tha action taken by a process on
receipt of a specific signal.
(See
.BR signal (7)
for a overview of signals.)
.PP
.I signum
specifies tha signal n' can be any valid signal except
.B SIGKILL
and
.BR SIGSTOP .
.PP
If
.I act
is non-NULL, tha freshly smoked up action fo' signal
.I signum
is installed from
.IR act .
If
.I oldact
is non-NULL, tha previous action is saved in
.IR oldact .
.PP
The
.I sigaction
structure is defined as suttin' like:
.sp
.in +4n
.nf
struct sigaction {
    void     (*sa_handlez)(int);
    void     (*sa_sigaction)(int, siginfo_t *, void *);
    sigset_t   sa_mask;
    int        sa_flags;
    void     (*sa_restorer)(void);
};
.fi
.in
.PP
On some architectures a union is involved: do not assign ta both
.I sa_handlez
and
.IR sa_sigaction .
.PP
The
.I sa_restorer
element is obsolete n' should not be used.
POSIX do not specify a
.I sa_restorer
element.
.PP
.I sa_handlez
specifies tha action ta be associated with
.I signum
and may be
.B SIG_DFL
for tha default action,
.B SIG_IGN
to ignore dis signal, or a pointa ta a signal handlin function.
This function receives tha signal number as its only argument.
.PP
If
.B SA_SIGINFO
is specified in
.IR sa_flags ,
then
.I sa_sigaction
(instead of
.IR sa_handlez )
specifies tha signal-handlin function for
.IR signum .
This function receives tha signal number as its first argument, a
pointa ta a
.I siginfo_t
as its second argument n' a pointa ta a
.I ucontext_t
(cast ta \fIvoid\ *\fP) as its third argument.
(Commonly, tha handlez function don't make any use of tha third argument.
See
.BR getcontext (3)
for further shiznit about
.IR ucontext_t .)
.PP
.I sa_mask
specifies a mask of signals which should be blocked
(i.e., added ta tha signal mask of tha thread up in which
the signal handlez is invoked)
durin execution of tha signal handlez.
In addition, tha signal which triggered tha handlez
will be blocked, unless the
.B SA_NODEFER
flag is used.
.PP
.I sa_flags
specifies a set of flags which modify tha behavior of tha signal.
It be formed by tha bitwise OR of zero or mo' of tha following:
.RS 4
.TP
.B SA_NOCLDSTOP
If
.I signum
is
.BR SIGCHLD ,
do not receive notification when lil pimp processes stop (i.e., when they
receive one of
.BR SIGSTOP ", " SIGTSTP ", " SIGTTIN
or
.BR SIGTTOU )
or resume (i.e., they receive
.BR SIGCONT )
(see
.BR wait (2)).
This flag is meaningful only when establishin a handlez for
.BR SIGCHLD .
.TP
.BR SA_NOCLDWAIT " (since Linux 2.6)"
.\" To be precise: Linux 2.5.60 -- MTK
If
.I signum
is
.BR SIGCHLD ,
do not transform lil pimps tha fuck into zombies when they terminate.
See also
.BR waitpid (2).
This flag is meaningful only when establishin a handlez for
.BR SIGCHLD ,
or when settin dat signalz disposizzle to
.BR SIG_DFL .

If the
.B SA_NOCLDWAIT
flag is set when establishin a handlez for
.BR SIGCHLD ,
POSIX.1 leaves it unspecified whether a
.B SIGCHLD
signal is generated when a cold-ass lil lil pimp process terminates.
On Linux, a
.B SIGCHLD
signal is generated up in dis case;
on some other implementations, it is not.
.TP
.B SA_NODEFER
Do not prevent tha signal from bein received from within its own signal
handlez.
This flag is meaningful only when establishin a signal handlez.
.B SA_NOMASK
is a obsolete, nonstandard synonym fo' dis flag.
.TP
.B SA_ONSTACK
Call tha signal handlez on a alternate signal stack provided by
.BR sigaltstack (2).
If a alternate stack aint available, tha default stack is ghon be used.
This flag is meaningful only when establishin a signal handlez.
.TP
.BR SA_RESETHAND
Restore tha signal action ta tha default upon entry ta tha signal handlez.
This flag is meaningful only when establishin a signal handlez.
.B SA_ONESHOT
is a obsolete, nonstandard synonym fo' dis flag.
.TP
.B SA_RESTART
Provide behavior compatible wit BSD signal semantics by makin certain
system calls restartable across signals.
This flag is meaningful only when establishin a signal handlez.
See
.BR signal (7)
for a gangbangin' finger-lickin' rap of system call restarting.
.TP
.BR SA_SIGINFO " (since Linux 2.2)"
Da signal handlez takes three arguments, not one.
In dis case,
.I sa_sigaction
should be set instead of
.IR sa_handlez .
This flag is meaningful only when establishin a signal handlez.
.\" (The
.\" .I sa_sigaction
.\" field was added up in Linux 2.1.86.)
.RE
.PP
The
.I siginfo_t
argument to
.I sa_sigaction
is a struct wit tha followin elements:
.sp
.in +4n
.nf
siginfo_t {
    int      si_signo;    /* Signal number */
    int      si_errno;    /* An errno value */
    int      si_code;     /* Signal code */
    int      si_trapno;   /* Trap number dat caused
                             hardware-generated signal
                             (unused on most architectures) */
.\" FIXME
.\" si_trapno seems ta be only used on SPARC n' Alpha;
.\" dis page could bust a lil mo' detail on its purpose there.
    pid_t    si_pid;      /* Sendin process ID */
    uid_t    si_uid;      /* Real user ID of bustin  process */
    int      si_status;   /* Exit value or signal */
    clock_t  si_utime;    /* User time consumed */
    clock_t  si_stime;    /* System time consumed */
    sigval_t si_value;    /* Signal value */
    int      si_int;      /* POSIX.1b signal */
    void    *si_ptr;      /* POSIX.1b signal */
    int      si_overrun;  /* Timer overrun count; POSIX.1b timers */
    int      si_timerid;  /* Timer ID; POSIX.1b timers */
.\" In tha kernel: si_tid
    void    *si_addr;     /* Memory location which caused fault */
    long     si_band;     /* Band event (was \fIint\fP in
                             glibc 2.3.2 n' earlier) */
    int      si_fd;       /* File descriptor */
    short    si_addr_lsb; /* Least dope bit of address
                             (since Linux 2.6.32) */
}
.fi
.in

.IR si_signo ", " si_errno " n' " si_code
are defined fo' all signals.
.RI ( si_errno
is generally unused on Linux.)
Da rest of tha struct may be a union, so dat one should
read only tha fieldz dat is meaningful fo' tha given signal:
.IP * 2
Signals busted with
.BR bust a cap up in (2)
and
.BR sigqueue (3)
fill in
.IR si_pid " n' " si_uid .
In addition, signals busted with
.BR sigqueue (3)
fill in
.IR si_int " n' " si_ptr
with tha joints specified by tha sender of tha signal;
see
.BR sigqueue (3)
for mo' details.
.IP *
Signals busted by POSIX.1b timers (since Linux 2.6) fill in
.I si_overrun
and
.IR si_timerid .
The
.I si_timerid
field be a internal ID used by tha kernel ta identify
the timer; it aint tha same as tha timer ID returned by
.BR timer_create (2).
The
.I si_overrun
field is tha timer overrun count;
this is tha same ol' dirty shiznit as is obtained by a cold-ass lil call to
.BR timer_getoverrun (2).
These fieldz is nonstandard Linux extensions.
.IP *
Signals busted fo' message queue notification (see tha description of
.B SIGEV_SIGNAL
in
.BR mq_notify (3))
fill in
.IR si_int / si_ptr ,
with the
.I sigev_value
supplied to
.BR mq_notify (3);
.IR si_pid ,
with tha process ID of tha message sender; and
.IR si_uid ,
with tha real user ID of tha message sender.
.IP *
.B SIGCHLD
fills in
.IR si_pid ", " si_uid ", " si_status ", " si_utime " n' " si_stime ,
providin shiznit bout tha child.
The
.I si_pid
field is tha process ID of tha child;
.I si_uid
is tha childz real user ID.
The
.I si_status
field gotz nuff tha exit statuz of tha lil pimp (if
.I si_code
is
.BR CLD_EXITED ),
or tha signal number dat caused tha process ta chizzle state.
The
.I si_utime
and
.I si_stime
contain tha user n' system CPU time used by tha lil pimp process;
these fieldz do not include tha times used by waited-for lil pimps (unlike
.BR getrusage (2)
and
.BR time (2)).
In kernels up ta 2.6, n' since 2.6.27, these fieldz report
CPU time up in units of
.IR sysconf(_SC_CLK_TCK) .
In 2.6 kernels before 2.6.27,
a bug meant dat these fieldz reported time up in units
of tha (configurable) system jiffy (see
.BR time (7)).
.\" FIXME .
.\" When si_utime n' si_stime where originally implemented, the
.\" measurement unit was HZ, which was tha same ol' dirty as clock ticks
.\" (sysconf(_SC_CLK_TCK)).  In 2.6, HZ became configurable, and
.\" was *still* used as tha unit ta return tha info these fields,
.\" wit tha result dat tha field joints depended on tha the
.\" configured HZ.  Of course, tha should done been measured in
.\" USER_HZ instead, so dat sysconf(_SC_CLK_TCK) could be used to
.\" convert ta seconds.  I gots a queued patch ta fix this:
.\" http://thread.gmane.org/gmane.linux.kernel/698061/ .
.\" This patch juiced it up tha fuck into 2.6.27.
.\" But note dat these fieldz still don't return tha times of
.\" waited-for lil pimps (as is done by getrusage() n' times()
.\" n' wait4()).  Solaris 8 do include lil pimp times.
.IP *
.BR SIGILL ,
.BR SIGFPE ,
.BR SIGSEGV ,
.BR SIGBUS ,
and
.BR SIGTRAP
fill in
.I si_addr
with tha address of tha fault.
.\" FIXME SIGTRAP also sets tha followin fo' ptrace_notify() ?
.\"     info.si_code = exit_code;
.\"     info.si_pid = task_pid_vnr(current);
.\"     info.si_uid = current_uid();  /* Real UID */
On some architectures,
these signals also fill up in the
.I si_trapno
filed.
Some suberrors of
.BR SIGBUS ,
in particular
.B BUS_MCEERR_AO
and
.BR BUS_MCEERR_AR ,
also fill in
.IR si_addr_lsb .
This field indicates tha least dope bit of tha reported address
and therefore tha extent of tha corruption.
For example, if a gangbangin' full page was corrupted,
.I si_addr_lsb
gotz nuff
.IR log2(sysconf(_SC_PAGESIZE)) .
.B BUS_MCERR_*
and
.I si_addr_lsb
are Linux-specific extensions.
.IP *
.BR SIGIO / SIGPOLL
(the two names is synonyms on Linux)
fills in
.IR si_band " n' " si_fd .
The
.I si_band
event be a lil' bit mask containin tha same joints as is filled up in the
.I revents
field by
.BR poll (2).
The
.I si_fd
field indicates tha file descriptor fo' which tha I/O event occurred.
.PP
.I si_code
is a value (not a lil' bit mask)
indicatin why dis signal was sent.
Da followin list shows tha joints which can be placed in
.I si_code
for any signal, along wit reason dat tha signal was generated.
.RS 4
.TP 15
.B SI_USER
.BR bust a cap up in (2)
.TP
.B SI_KERNEL
Sent by tha kernel.
.TP
.B SI_QUEUE
.BR sigqueue (3)
.TP
.B SI_TIMER
POSIX timer expired
.TP
.B SI_MESGQ
POSIX message queue state chizzled (since Linux 2.6.6); see
.BR mq_notify (3)
.TP
.B SI_ASYNCIO
AIO completed
.TP
.B SI_SIGIO
Queued
.B SIGIO
(only up in kernels up ta Linux 2.2; from Linux 2.4 onward
.BR SIGIO / SIGPOLL
fills in
.I si_code
as busted lyrics bout below).
.TP
.B SI_TKILL
.BR tkill (2)
or
.BR tgkill (2)
(since Linux 2.4.19)
.\" SI_DETHREAD is defined up in 2.6.9 sources yo, but aint implemented
.\" It appears ta done been a scam dat was tried durin 2.5.6
.\" all up in ta 2.5.24 n' then was backed out.
.RE
.PP
Da followin joints can be placed in
.I si_code
for a
.B SIGILL
signal:
.RS 4
.TP 15
.B ILL_ILLOPC
illegal opcode
.TP
.B ILL_ILLOPN
illegal operand
.TP
.B ILL_ILLADR
illegal addressin mode
.TP
.B ILL_ILLTRP
illegal trap
.TP
.B ILL_PRVOPC
privileged opcode
.TP
.B ILL_PRVREG
privileged register
.TP
.B ILL_COPROC
coprocessor error
.TP
.B ILL_BADSTK
internal stack error
.RE
.PP
Da followin joints can be placed in
.I si_code
for a
.B SIGFPE
signal:
.RS 4
.TP 15
.B FPE_INTDIV
integer divide by zero
.TP
.B FPE_INTOVF
integer overflow
.TP
.B FPE_FLTDIV
floating-point divide by zero
.TP
.B FPE_FLTOVF
floating-point overflow
.TP
.B FPE_FLTUND
floating-point underflow
.TP
.B FPE_FLTRES
floating-point inexact result
.TP
.B FPE_FLTINV
floating-point invalid operation
.TP
.B FPE_FLTSUB
subscript outta range
.RE
.PP
Da followin joints can be placed in
.I si_code
for a
.B SIGSEGV
signal:
.RS 4
.TP 15
.B SEGV_MAPERR
address not mapped ta object
.TP
.B SEGV_ACCERR
invalid permissions fo' mapped object
.RE
.PP
Da followin joints can be placed in
.I si_code
for a
.B SIGBUS
signal:
.RS 4
.TP 15
.B BUS_ADRALN
invalid address alignment
.TP
.B BUS_ADRERR
nonexistent physical address
.TP
.B BUS_OBJERR
object-specific hardware error
.TP
.BR BUS_MCEERR_AR " (since Linux 2.6.32)"
Hardware memory error consumed on a machine check; action required.
.TP
.BR BUS_MCEERR_AO " (since Linux 2.6.32)"
Hardware memory error detected up in process but not consumed; action optional.
.RE
.PP
Da followin joints can be placed in
.I si_code
for a
.B SIGTRAP
signal:
.RS 4
.TP 15
.B TRAP_BRKPT
process breakpoint
.TP
.B TRAP_TRACE
process trace trap
.TP
.BR TRAP_BRANCH " (since Linux 2.4)"
process taken branch trap
.TP
.BR TRAP_HWBKPT " (since Linux 2.4)"
hardware breakpoint/watchpoint
.RE
.PP
Da followin joints can be placed in
.I si_code
for a
.B SIGCHLD
signal:
.RS 4
.TP 15
.B CLD_EXITED
child has exited
.TP
.B CLD_KILLED
child was capped
.TP
.B CLD_DUMPED
child terminated abnormally
.TP
.B CLD_TRAPPED
traced lil pimp has trapped
.TP
.B CLD_STOPPED
child has stopped
.TP
.B CLD_CONTINUED
stopped lil pimp has continued (since Linux 2.6.9)
.RE
.PP
Da followin joints can be placed in
.I si_code
for a
.BR SIGIO / SIGPOLL
signal:
.RS 4
.TP 15
.B POLL_IN
data input available
.TP
.B POLL_OUT
output buffers available
.TP
.B POLL_MSG
input message available
.TP
.B POLL_ERR
I/O error
.TP
.B POLL_PRI
high prioritizzle input available
.TP
.B POLL_HUP
device disconnected
.RE
.SH RETURN VALUE
.BR sigaction ()
returns 0 on success; on error, \-1 is returned, and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EFAULT
.IR act " or " oldact
points ta memory which aint a valid part of tha process address space.
.TP
.B EINVAL
An invalid signal was specified.
This will also be generated if a attempt
is made ta chizzle tha action for
.BR SIGKILL " or " SIGSTOP ", "
which cannot be caught or ignored.
.SH CONFORMING TO
POSIX.1-2001, SVr4.
.\" SVr4 do not document tha EINTR condition.
.SH NOTES
A lil pimp pimped via
.BR fork (2)
inherits a cold-ass lil copy of its parentz signal dispositions.
Durin an
.BR execve (2),
the dispositionz of handled signals is reset ta tha default;
the dispositionz of ignored signals is left unchanged.

Accordin ta POSIX, tha behavior of a process is undefined afta it
ignores a
.BR SIGFPE ,
.BR SIGILL ,
or
.B SIGSEGV
signal dat was not generated by
.BR bust a cap up in (2)
or
.BR raise (3).
Integer division by zero has undefined result.
On some architectures it will generate a
.B SIGFPE
signal.
(Also dividin da most thugged-out wack integer by \-1 may generate
.BR SIGFPE .)
Ignorin dis signal might lead ta a endless loop.
.PP
POSIX.1-1990 disallowed settin tha action for
.B SIGCHLD
to
.BR SIG_IGN .
POSIX.1-2001 allows dis possibility, so dat ignoring
.B SIGCHLD
can be used ta prevent tha creation of zombies (see
.BR wait (2)).
Nevertheless, tha oldschool BSD n' System V behaviors fo' ignoring
.B SIGCHLD
differ, so dat tha only straight-up portable method of ensurin that
terminated lil pimps do not become zombies is ta catch the
.B SIGCHLD
signal n' big-ass up a
.BR wait (2)
or similar.
.PP
POSIX.1-1990 specified only
.BR SA_NOCLDSTOP .
POSIX.1-2001 added
.BR SA_NOCLDWAIT ,
.BR SA_RESETHAND ,
.BR SA_NODEFER ,
and
.BR SA_SIGINFO .
Use of these latta joints in
.I sa_flags
may be less portable up in applications intended fo' older
UNIX implementations.
.PP
The
.B SA_RESETHAND
flag is compatible wit tha SVr4 flag of tha same name.
.PP
The
.B SA_NODEFER
flag is compatible wit tha SVr4 flag of tha same name under kernels
1.3.9 n' newer.
On olda kernels tha Linux implementation
allowed tha receipt of any signal, not just tha one we is installing
(effectively overridin any
.I sa_mask
settings).
.PP
.BR sigaction ()
can be called wit a NULL second argument ta query tha current signal
handlez.
It can also be used ta check whether a given signal is valid for
the current machine by callin it wit NULL second n' third arguments.
.PP
It aint possible ta block
.BR SIGKILL " or " SIGSTOP
(by specifyin dem in
.IR sa_mask ).
Attempts ta do so is silently ignored.
.PP
See
.BR sigsetops (3)
for details on manipulatin signal sets.
.PP
See
.BR signal (7)
for a list of tha async-signal-safe functions dat can be
safely called inside from inside a signal handlez.
.SS Undocumented
Before tha introduction of
.B SA_SIGINFO
it was also possible ta git some additionizzle shiznit,
namely by rockin a
.I sa_handlez
with second argument of type
.IR "struct sigcontext".
See tha relevant Linux kernel sources fo' details.
This use is obsolete now, nahmeean?
.SH BUGS
In kernels up ta n' includin 2.6.13, specifying
.B SA_NODEFER
in
.I sa_flags
prevents not only tha served up signal from bein maxed during
execution of tha handlez yo, but also tha signals specified in
.IR sa_mask .
This bug was fixed up in kernel 2.6.14.
.SH EXAMPLE
See
.BR mprotect (2).
.SH SEE ALSO
.BR bust a cap up in (1),
.BR bust a cap up in (2),
.BR killpg (2),
.BR pause (2),
.BR restart_syscall (2),
.BR sigaltstack (2),
.BR signal (2),
.BR signalfd (2),
.BR sigpendin (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR wait (2),
.BR raise (3),
.BR siginterrupt (3),
.BR sigqueue (3),
.BR sigsetops (3),
.BR sigvec (3),
.BR core (5),
.BR signal (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
