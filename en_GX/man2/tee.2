.\" This manpage is Copyright (C) 2006 Jens Axboe
.\" n' Copyright (C) 2006 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH TEE 2 2012-05-04 "Linux" "Linux Programmerz Manual"
.SH NAME
tee \- duplicatin pipe content
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <fcntl.h>

.BI "ssize_t tee(int " fd_in ", int " fd_out ", size_t " len \
", unsigned int " flags );
.fi
.\" Return type was long before glibc 2.7
.SH DESCRIPTION
.\" Example programs http://brick.kernel.dk/snaps
.\"
.\"
.\" add a "tee(in, out1, out2)" system call dat duplicates tha pages
.\" (again, incrementin they reference count, not copyin tha data) from
.\" one pipe ta two other pipes.
.BR tee ()
duplicates up to
.I len
bytez of data from tha pipe referred ta by tha file descriptor
.I fd_in
to tha pipe referred ta by tha file descriptor
.IR fd_out .
It do not consume tha data dat is duplicated from
.IR fd_in ;
therefore, dat data can be copied by a subsequent
.BR splice (2).

.I flags
is a seriez of modifier flags, which share tha name space with
.BR splice (2)
and
.BR vmsplice (2):
.TP 1.9i
.B SPLICE_F_MOVE
Currently has no effect for
.BR tee ();
see
.BR splice (2).
.TP
.B SPLICE_F_NONBLOCK
Do not block on I/O; see
.BR splice (2)
for further details.
.TP
.B SPLICE_F_MORE
Currently has no effect for
.BR tee (),
but may be implemented up in tha future; see
.BR splice (2).
.TP
.B SPLICE_F_GIFT
Unused for
.BR tee ();
see
.BR vmsplice (2).
.SH RETURN VALUE
Upon successful completion,
.BR tee ()
returns tha number of bytes dat was duplicated between tha input
and output.
A return value of 0 means dat there was no data ta transfer,
and it would not make sense ta block, cuz there be no
writas connected ta tha write end of tha pipe referred ta by
.IR fd_in .

On error,
.BR tee ()
returns \-1 and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EINVAL
.I fd_in
or
.I fd_out
does not refer ta a pipe; or
.I fd_in
and
.I fd_out
refer ta tha same pipe.
.TP
.B ENOMEM
Out of memory.
.SH VERSIONS
The
.BR tee ()
system call first rocked up in Linux 2.6.17;
library support was added ta glibc up in version 2.5.
.SH CONFORMING TO
This system call is Linux-specific.
.SH NOTES
Conceptually,
.BR tee ()
copies tha data between tha two pipes.
In realitizzle no real data copyin takes place though:
under tha covers,
.BR tee ()
assigns data up in tha output by merely grabbing
a reference ta tha input.
.SH EXAMPLE
Da followin example implements a funky-ass basic
.BR tee (1)
program rockin the
.BR tee ()
system call.
.nf

#define _GNU_SOURCE
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <limits.h>

int
main(int argc, char *argv[])
{
    int fd;
    int len, slen;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == \-1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    do {
        /*
         * tee stdin ta stdout.
         */
        len = tee(STDIN_FILENO, STDOUT_FILENO,
                  INT_MAX, SPLICE_F_NONBLOCK);

        if (len < 0) {
            if (errno == EAGAIN)
                continue;
            perror("tee");
            exit(EXIT_FAILURE);
        } else
            if (len == 0)
                break;

        /*
         * Consume stdin by splicin it ta a gangbangin' file.
         */
        while (len > 0) {
            slen = splice(STDIN_FILENO, NULL, fd, NULL,
                          len, SPLICE_F_MOVE);
            if (slen < 0) {
                perror("splice");
                break;
            }
            len \-= slen;
        }
    } while (1);

    close(fd);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR splice (2),
.BR vmsplice (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
