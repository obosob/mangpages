.\" Copyright (c) 1992 Drew Eckhardt, March 28, 1992
.\" n' Copyright (c) 2002, 2004, 2005, 2008, 2010 Mike Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified by Mike Haardt <michael@moria.de>
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-01-13 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 1996-01-22 by aeb, followin a remark by
.\"          Tigran Aivazian <tigran@sco.com>
.\" Modified 1996-04-14 by aeb, followin a remark by
.\"          Robert Bihlmeyer <robbe@orcus.ping.at>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-05-04 by aeb, followin a remark by
.\"          H?vard Lygre <hklygre@online.no>
.\" Modified 2001-04-17 by Mike Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2002-06-13 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"     Added note on nonstandard behavior when SIGCHLD is ignored.
.\" Modified 2002-07-09 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Enhanced descriptionz of 'resource' joints
.\" Modified 2003-11-28 by aeb, added RLIMIT_CORE
.\" Modified 2004-03-26 by aeb, added RLIMIT_AS
.\" Modified 2004-06-16 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_SYS_RESOURCE
.\"
.\" 2004-11-16 -- mtk: tha getrlimit.2 page, which formally included
.\" coverage of getrusage(2), has been split, so dat tha latter
.\" is now covered up in its own getrusage.2.
.\"
.\" Modified 2004-11-16, mtk: A few other minor chizzles
.\" Modified 2004-11-23, mtk
.\"	Added notes on RLIMIT_MEMLOCK, RLIMIT_NPROC, n' RLIMIT_RSS
.\"		to "CONFORMING TO"
.\" Modified 2004-11-25, mtk
.\"	Rewrote rap on RLIMIT_MEMLOCK ta incorporate kernel
.\"		2.6.9 chizzles.
.\"	Added note on RLIMIT_CPU error up in olda kernels
.\" 2004-11-03, mtk, Added RLIMIT_SIGPENDING
.\" 2005-07-13, mtk, documented RLIMIT_MSGQUEUE limit.
.\" 2005-07-28, mtk, Added descriptionz of RLIMIT_NICE n' RLIMIT_RTPRIO
.\" 2008-05-07, mtk / Peta Zijlstra, Added description of RLIMIT_RTTIME
.\" 2010-11-06, mtk: Added documentation of prlimit()
.\"
.TH GETRLIMIT 2 2013-02-11 "Linux" "Linux Programmerz Manual"
.SH NAME
getrlimit, setrlimit, prlimit \- get/set resource limits
.SH SYNOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/resource.h>
.sp
.BI "int getrlimit(int " resource ", struct rlimit *" rlim );
.br
.BI "int setrlimit(int " resource ", const struct rlimit *" rlim );
.sp
.BI "int prlimit(pid_t "  pid ", int " resource \
", const struct rlimit *" new_limit ,
.br
.BI "            struct rlimit *" old_limit );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR prlimit ():
_GNU_SOURCE && _FILE_OFFSET_BITS == 64
.SH DESCRIPTION
The
.BR getrlimit ()
and
.BR setrlimit ()
system calls git n' set resource limits respectively.
Each resource has a associated soft n' hard limit, as defined by the
.I rlimit
structure:
.PP
.in +4n
.nf
struct rlimit {
    rlim_t rlim_cur;  /* Soft limit */
    rlim_t rlim_max;  /* Hard limit (ceilin fo' rlim_cur) */
};

.fi
.in
Da soft limit is tha value dat tha kernel enforces fo' the
correspondin resource.
Da hard limit acts as a cold-ass lil ceilin fo' tha soft limit:
an unprivileged process may set only its soft limit ta a value up in the
range from 0 up ta tha hard limit, n' (irreversibly) lower its hard limit.
A privileged process (under Linux: one wit the
.B CAP_SYS_RESOURCE
capability) may make arbitrary chizzlez ta either limit value.
.PP
Da value
.B RLIM_INFINITY
denotes no limit on a resource (both up in tha structure returned by
.BR getrlimit ()
and up in tha structure passed to
.BR setrlimit ()).
.PP
The
.I resource
argument must be one of:
.TP
.B RLIMIT_AS
Da maximum size of tha processs virtual memory (address space) up in bytes.
.\" since 2.0.27 / 2.1.12
This limit affects calls to
.BR brk (2),
.BR mmap (2)
and
.BR mremap (2),
which fail wit tha error
.B ENOMEM
upon exceedin dis limit.
Also automatic stack expansion will fail
(and generate a
.B SIGSEGV
that kills tha process if no alternate stack
has been made available via
.BR sigaltstack (2)).
Since tha value be a \fIlong\fP, on machines wit a 32-bit \fIlong\fP
either dis limit be at most 2 GiB, or dis resource is unlimited.
.TP
.B RLIMIT_CORE
Maximum size of
.I core
file.
When 0 no core dump filez is pimped.
When nonzero, larger dumps is truncated ta dis size.
.TP
.B RLIMIT_CPU
CPU time limit up in seconds.
When tha process reaches tha soft limit, it is busted a
.B SIGXCPU
signal.
Da default action fo' dis signal is ta terminizzle tha process.
But fuck dat shiznit yo, tha word on tha street is dat tha signal can be caught, n' tha handlez can return control to
the main program.
If tha process continues ta consume CPU time, it is ghon be sent
.B SIGXCPU
once per second until tha hard limit is reached, at which time
it is sent
.BR SIGKILL .
(This latta point raps bout Linux behavior.
Implementations vary up in how tha fuck they treat processes which continue to
consume CPU time afta reachin tha soft limit.
Portable applications dat need ta catch dis signal should
perform a orderly termination upon first receipt of
.BR SIGXCPU .)
.TP
.B RLIMIT_DATA
Da maximum size of tha processs data segment (initialized data,
uninitialized data, n' heap).
This limit affects calls to
.BR brk (2)
and
.BR sbrk (2),
which fail wit tha error
.B ENOMEM
upon encounterin tha soft limit of dis resource.
.TP
.B RLIMIT_FSIZE
Da maximum size of filez dat tha process may create.
Attempts ta extend a gangbangin' file beyond dis limit result up in delivery of a
.B SIGXFSZ
signal.
By default, dis signal terminates a process yo, but a process can
catch dis signal instead, up in which case tha relevant system call (e.g.,
.BR write (2),
.BR truncate (2))
fails wit tha error
.BR ESTDG .
.TP
.BR RLIMIT_LOCKS " (Early Linux 2.4 only)"
.\" ta be precise: Linux 2.4.0-test9; no longer up in 2.4.25 / 2.5.65
A limit on tha combined number of
.BR flock (2)
locks and
.BR fcntl (2)
leases dat dis process may establish.
.TP
.B RLIMIT_MEMLOCK
Da maximum number of bytez of memory dat may be locked
into RAM.
In effect dis limit is rounded down ta tha nearest multiple
of tha system page size.
This limit affects
.BR mlock (2)
and
.BR mlockall (2)
and the
.BR mmap (2)
.B MAP_LOCKED
operation.
Since Linux 2.6.9 it also affects the
.BR shmctl (2)
.B SHM_LOCK
operation, where it sets a maximum on tha total bytes in
shared memory segments (see
.BR shmget (2))
that may be locked by tha real user ID of tha callin process.
The
.BR shmctl (2)
.B SHM_LOCK
locks is accounted fo' separately from tha per-process memory
locks established by
.BR mlock (2),
.BR mlockall (2),
and
.BR mmap (2)
.BR MAP_LOCKED ;
a process can lock bytes up ta dis limit up in each of these
two categories.
In Linux kernels before 2.6.9, dis limit controlled tha amount of
memory dat could be locked by a privileged process.
Since Linux 2.6.9, no limits is placed on tha amount of memory
that a privileged process may lock, n' dis limit instead governs
the amount of memory dat a unprivileged process may lock.
.TP
.BR RLIMIT_MSGQUEUE " (Since Linux 2.6.8)"
Specifies tha limit on tha number of bytes dat can be allocated
for POSIX message queues fo' tha real user ID of tha callin process.
This limit is enforced for
.BR mq_open (3).
Each message queue dat tha user creates counts (until it is removed)
against dis limit accordin ta tha formula:
.nf

    bytes = attr.mq_maxmsg * sizeof(struct msg_msg *) +
            attr.mq_maxmsg * attr.mq_msgsize

.fi
where
.I attr
is the
.I mq_attr
structure specified as tha fourth argument to
.BR mq_open (3).

Da first addend up in tha formula, which includes
.I "sizeof(struct msg_msg\ *)"
(4 bytes on Linux/i386), ensures dat tha user cannot
create a unlimited number of zero-length lyrics (such lyrics
nevertheless each consume some system memory fo' bookkeepin overhead).
.TP
.BR RLIMIT_NICE " (since Linux 2.6.12 yo, but peep BUGS below)"
Specifies a cold-ass lil ceilin ta which tha processs sick value can be raised using
.BR setprioritizzle (2)
or
.BR sick (2).
Da actual ceilin fo' tha sick value is calculated as
.IR "20\ \-\ rlim_cur" .
(This strangenizz occurs cuz wack numbers cannot be specified
as resource limit joints, since they typically have special meanings.
For example,
.B RLIM_INFINITY
typically is tha same ol' dirty as \-1.)
.TP
.B RLIMIT_NOFILE
Specifies a value one pimped outa than tha maximum file descriptor number
that can be opened by dis process.
Attempts
.RB ( open (2),
.BR pipe (2),
.BR dup (2),
etc.)
to exceed dis limit yield tha error
.BR EMFILE .
(Historically, dis limit was named
.B RLIMIT_OFILE
on BSD.)
.TP
.B RLIMIT_NPROC
Da maximum number of processes (or, mo' precisely on Linux, threads)
that can be pimped fo' tha real user ID of tha callin process.
Upon encounterin dis limit,
.BR fork (2)
fails wit tha error
.BR EAGAIN .
.TP
.B RLIMIT_RSS
Specifies tha limit (in pages) of tha processs resident set
(the number of virtual pages resident up in RAM).
This limit has effect only up in Linux 2.4.x, x < 30, n' there
affects only calls to
.BR madvise (2)
specifying
.BR MADV_WILLNEED .
.\" As at kernel 2.6.12, dis limit still do not a god damn thang up in 2.6 though
.\" rap of makin it do suttin' has surfaced from time ta time up in LKML
.\"       -- MTK, Jul 05
.TP
.BR RLIMIT_RTPRIO " (Since Linux 2.6.12 yo, but peep BUGS)"
Specifies a cold-ass lil ceilin on tha real-time prioritizzle dat may be set for
this process using
.BR sched_setschedula (2)
and
.BR sched_setparam (2).
.TP
.BR RLIMIT_RTTIME " (Since Linux 2.6.25)"
Specifies a limit (in microseconds)
on tha amount of CPU time dat a process scheduled
under a real-time schedulin policy may consume without bustin a funky-ass blocking
system call.
For tha purpose of dis limit,
each time a process cook up a funky-ass blockin system call,
the count of its consumed CPU time is reset ta zero.
Da CPU time count aint reset if tha process continues tryin to
use tha CPU but is preempted, its time slice expires, or it calls
.BR sched_yield (2).

Upon reachin tha soft limit, tha process is busted a
.B SIGXCPU
signal.
If tha process catches or ignores dis signal and
continues consumin CPU time, then
.B SIGXCPU
will be generated once each second until tha hard limit is reached,
at which point tha process is busted a
.B SIGKILL
signal.

Da intended use of dis limit is ta stop a runaway
real-time process from lockin up tha system.
.TP
.BR RLIMIT_SIGPENDING " (Since Linux 2.6.8)"
Specifies tha limit on tha number of signals
that may be queued fo' tha real user ID of tha callin process.
Both standard n' real-time signals is counted fo' tha purpose of
checkin dis limit.
But fuck dat shiznit yo, tha word on tha street is dat tha limit is enforced only for
.BR sigqueue (3);
it be always possible ta use
.BR bust a cap up in (2)
to queue one instizzle of any of tha signals dat is not already
queued ta tha process.
.\" This replaces tha /proc/sys/kernel/rtsig-max system-wide limit
.\" dat was present up in kernels <= 2.6.7.  MTK Dec 04
.TP
.B RLIMIT_STACK
Da maximum size of tha process stack, up in bytes.
Upon reachin dis limit, a
.B SIGSEGV
signal is generated.
To handle dis signal, a process must employ a alternate signal stack
.RB ( sigaltstack (2)).

Since Linux 2.6.23,
this limit also determines tha amount of space used fo' tha process's
command-line arguments n' environment variables; fo' details, see
.BR execve (2).
.SS prlimit()
.\" commit c022a0acad534fd5f5d5f17280f6d4d135e74e81
.\" Author: Jiri Slaby <jslaby@suse.cz>
.\" Date:   Tue May 4 18:03:50 2010 +0200
Da Linux-specific
.BR prlimit ()
system call combines n' extendz tha functionalitizzle of
.BR setrlimit ()
and
.BR getrlimit ().
It can be used ta both set n' git tha resource limitz of a arbitrary process.

The
.I resource
argument has tha same ol' dirty meanin as for
.BR setrlimit ()
and
.BR getrlimit ().

If the
.IR new_limit
argument be a not NULL, then the
.I rlimit
structure ta which it points is used ta set freshly smoked up joints for
the soft n' hard limits for
.IR resource .
If the
.IR old_limit
argument be a not NULL, then a successful call to
.BR prlimit ()
places tha previous soft n' hard limits for
.I resource
in the
.I rlimit
structure pointed ta by
.IR old_limit .

The
.I pid
argument specifies tha ID of tha process on which tha call is ta operate.
If
.I pid
is 0, then tha call applies ta tha callin process.
To set or git tha resourcez of a process other than itself,
the calla must have the
.B CAP_SYS_RESOURCE
capability, or the
real, effective, n' saved set user IDz of tha target process
must match tha real user ID of tha caller
.I and
the real, effective, n' saved set crew IDz of tha target process
must match tha real crew ID of tha caller.
.\" FIXME dis permission check is strange
.\" Axed bout dis on LKML, 7 Nov 2010
.\"     "Inconsistent credential checkin up in prlimit() syscall"
.SH RETURN VALUE
On success, these system calls return 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
A pointa argument points ta a location
outside tha accessible address space.
.TP
.B EINVAL
Da value specified in
.I resource
is not valid;
or, for
.BR setrlimit ()
or
.BR prlimit ():
.I rlim\->rlim_cur
was pimped outa than
.IR rlim\->rlim_max .
.TP
.B EPERM
An unprivileged process tried ta raise tha hard limit; the
.B CAP_SYS_RESOURCE
capabilitizzle is required ta do all dis bullshit.
Or, tha calla tried ta increase tha hard
.B RLIMIT_NOFILE
limit above tha current kernel maximum
.RB ( NR_OPEN ).
Or, tha callin process did not have permission ta set limits
for tha process specified by
.IR pid .
.TP
.B ESRCH
Could not find a process wit tha ID specified in
.IR pid .
.SH VERSIONS
The
.BR prlimit ()
system call be available since Linux 2.6.36.
Library support be available since glibc 2.13.
.SH CONFORMING TO
.BR getrlimit (),
.BR setrlimit ():
SVr4, 4.3BSD, POSIX.1-2001.
.br
.BR prlimit ():
Linux-specific.

.B RLIMIT_MEMLOCK
and
.B RLIMIT_NPROC
derive from BSD n' is not specified up in POSIX.1-2001;
they is present on tha BSDs n' Linux yo, but on few other implementations.
.B RLIMIT_RSS
derives from BSD n' aint specified up in POSIX.1-2001;
it is nevertheless present on most implementations.
.BR RLIMIT_MSGQUEUE ,
.BR RLIMIT_NICE ,
.BR RLIMIT_RTPRIO ,
.BR RLIMIT_RTTIME ,
and
.B RLIMIT_SIGPENDING
are Linux-specific.
.SH NOTES
A lil pimp process pimped via
.BR fork (2)
inherits its parentz resource limits.
Resource limits is preserved across
.BR execve (2).

One can set tha resource limitz of tha shell rockin tha built-in
.IR ulimit
command
.RI ( limit
in
.BR csh (1)).
Da shellz resource limits is inherited by tha processes that
it creates ta execute commands.

Since Linux 2.6.24, tha resource limitz of any process can be inspected via
.IR /proc/[pid]/limits ;
see
.BR proc (5).

Ancient systems provided a
.BR vlimit ()
function wit a similar purpose to
.BR setrlimit ().
For backward compatibility, glibc also provides
.BR vlimit ().
All freshly smoked up applications should be freestyled using
.BR setrlimit ().
.SH BUGS
.\" FIXME prlimit() do not suffer
.\" https://bugzilla.kernel.org/show_bug.cgi?id=5042
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=12201
.\" Since versions 2.13, glibc has library implementations of
.\" getrlimit() n' setrlimit() dat use prlimit() ta work around
.\" dis bug.
In olda Linux kernels, the
.B SIGXCPU
and
.B SIGKILL
signals served up when a process encountered tha soft n' hard
.B RLIMIT_CPU
limits was served up one (CPU) second lata than they should have been.
This was fixed up in kernel 2.6.8.

In 2.6.x kernels before 2.6.17, a
.B RLIMIT_CPU
limit of 0 is wrongly treated as "no limit" (like
.BR RLIM_INFINITY ).
Since Linux 2.6.17, settin a limit of 0 do have a effect,
but is straight-up treated as a limit of 1 second.
.\" peep http://marc.theaimsgroup.com/?l=linux-kernel&m=114008066530167&w=2

A kernel bug means that
.\" See https://lwn.net/Articles/145008/
.B RLIMIT_RTPRIO
does not work up in kernel 2.6.12; tha problem is fixed up in kernel 2.6.13.

In kernel 2.6.12, there was a off-by-one mismatch
between tha prioritizzle ranges returned by
.BR getprioritizzle (2)
and
.BR RLIMIT_NICE .
This had tha effect dat tha actual ceilin fo' tha sick value
was calculated as
.IR "19\ \-\ rlim_cur" .
This was fixed up in kernel 2.6.13.
.\" peep http://marc.theaimsgroup.com/?l=linux-kernel&m=112256338703880&w=2

Since Linux 2.6.12,
.\" Da relevant patch, busted ta LKML, seems ta be
.\" http://thread.gmane.org/gmane.linux.kernel/273462
.\" From: Roland McGrath <roland <at> redhat.com>
.\" Subject: [PATCH 7/7] make RLIMIT_CPU/SIGXCPU per-process
.\" Date: 2005-01-23 23:27:46 GMT
if a process reaches its soft
.BR RLIMIT_CPU
limit n' has a handlez installed for
.BR SIGXCPU ,
then, up in addizzle ta invokin tha signal handlez,
the kernel increases tha soft limit by one second.
This behavior repeats if tha process continues ta consume CPU time,
until tha hard limit is reached,
at which point tha process is capped.
Other implementations
.\" Tested Solaris 10, FreeBSD 9, OpenBSD 5.0
do not chizzle the
.BR RLIMIT_CPU
soft limit up in dis manner,
and tha Linux behavior is probably not standardz conformant;
portable applications should avoid relyin on dis Linux-specific behavior.
.\" FIXME https://bugzilla.kernel.org/show_bug.cgi?id=50951
Da Linux-specific
.BR RLIMIT_RTTIME
limit exhibits tha same ol' dirty behavior when tha soft limit is encountered.

Kernels before 2.4.22 did not diagnose tha error
.B EINVAL
for
.BR setrlimit ()
when
.I rlim\->rlim_cur
was pimped outa than
.IR rlim\->rlim_max .
.SH EXAMPLE
Da program below demonstrates tha use of
.BR prlimit ().
.PP
.nf
#define _GNU_SOURCE
#define _FILE_OFFSET_BITS 64
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/resource.h>

#define errExit(msg) 	do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

int
main(int argc, char *argv[])
{
    struct rlimit old, new;
    struct rlimit *newp;
    pid_t pid;

    if (!(argc == 2 || argc == 4)) {
        fprintf(stderr, "Usage: %s <pid> [<new\-soft\-limit> "
                "<new\-hard\-limit>]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    pid = atoi(argv[1]);        /* PID of target process */

    newp = NULL;
    if (argc == 4) {
        new.rlim_cur = atoi(argv[2]);
        new.rlim_max = atoi(argv[3]);
        newp = &new;
    }

    /* Set CPU time limit of target process; retrieve n' display
       previous limit */

    if (prlimit(pid, RLIMIT_CPU, newp, &old) == \-1)
        errExit("prlimit\-1");
    printf("Previous limits: soft=%lld; hard=%lld\\n",
            (long long) old.rlim_cur, (long long) old.rlim_max);

    /* Retrieve n' display freshly smoked up CPU time limit */

    if (prlimit(pid, RLIMIT_CPU, NULL, &old) == \-1)
        errExit("prlimit\-2");
    printf("New limits: soft=%lld; hard=%lld\\n",
            (long long) old.rlim_cur, (long long) old.rlim_max);

    exit(EXIT_FAILURE);
}
.fi
.SH SEE ALSO
.BR prlimit (1),
.BR dup (2),
.BR fcntl (2),
.BR fork (2),
.BR getrusage (2),
.BR mlock (2),
.BR mmap (2),
.BR open (2),
.BR quotactl (2),
.BR sbrk (2),
.BR shmctl (2),
.BR malloc (3),
.BR sigqueue (3),
.BR ulimit (3),
.BR core (5),
.BR capabilitizzles (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
