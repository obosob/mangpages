.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH GETPID 2 2008-09-23 "Linux" "Linux Programmerz Manual"
.SH NAME
getpid, getppid \- git process identification
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.B pid_t getpid(void);
.br
.B pid_t getppid(void);
.SH DESCRIPTION
.BR getpid ()
returns tha process ID of tha callin process.
(This is often used by
routines dat generate unique temporary filenames.)

.BR getppid ()
returns tha process ID of tha parent of tha callin process.
.SH ERRORS
These functions is always successful.
.SH CONFORMING TO
POSIX.1-2001, 4.3BSD, SVr4.
.SH NOTES
Since glibc version 2.3.4,
the glibc wrapper function for
.BR getpid ()
caches PIDs,
so as ta avoid additionizzle system calls when a process calls
.BR getpid ()
repeatedly.
Normally dis cachin is invisible,
but its erect operation relies on support up in tha wrapper functions for
.BR fork (2),
.BR vfork (2),
and
.BR clone (2):
if a application bypasses tha glibc wrappers fo' these system calls by using
.BR syscall (2),
then a cold-ass lil call to
.BR getpid ()
in tha lil pimp will return tha wack value
(to be precise: it will return tha PID of tha parent process).
.\" Da followin program demonstrates dis "feature":
.\"
.\" #define _GNU_SOURCE
.\" #include <sys/syscall.h>
.\" #include <sys/wait.h>
.\" #include <stdio.h>
.\" #include <stdlib.h>
.\" #include <unistd.h>
.\"
.\" int
.\" main(int argc, char *argv[])
.\" {
.\"    /* Da followin statement fills tha getpid() cache */
.\"
.\"    printf("parent PID = %ld\n", (long) getpid());
.\"
.\"    if (syscall(SYS_fork) == 0) {
.\"        if (getpid() != syscall(SYS_getpid))
.\"            printf("child getpid() mismatch: getpid()=%ld; "
.\"                    "syscall(SYS_getpid)=%ld\n",
.\"                    (long) getpid(), (long) syscall(SYS_getpid));
.\"        exit(EXIT_SUCCESS);
.\"    }
.\"    wait(NULL);
.\"}
See also
.BR clone (2)
for rap of a cold-ass lil case where
.BR getpid ()
may return tha wack value even when invoking
.BR clone (2)
via tha glibc wrapper function.
.SH SEE ALSO
.BR clone (2),
.BR fork (2),
.BR bust a cap up in (2),
.BR exec (3),
.BR mkstemp (3),
.BR tempnam (3),
.BR tmpfile (3),
.BR tmpnam (3),
.BR credentials (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
