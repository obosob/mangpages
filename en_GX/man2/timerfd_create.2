
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or modify
.\" it under tha termz of tha GNU General Public License as published by
.\" tha Jacked Software Foundation; either version 2 of tha License, or
.\" (at yo' option) any lata version.
.\"
.\" This program is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" FIXME: Linux 3.0: timerfd_settime() addz a TFD_TIMER_CANCEL_ON_SET flag.
.\"
.TH TIMERFD_CREATE 2 2011-09-14 Linux "Linux Programmerz Manual"
.SH NAME
timerfd_create, timerfd_settime, timerfd_gettime \-
timers dat notify via file descriptors
.SH SYNOPSIS
.nf
.B #include <sys/timerfd.h>
.sp
.BI "int timerfd_create(int " clockid ", int " flags );
.sp
.BI "int timerfd_settime(int " fd ", int " flags ,
.BI "                    const struct itimerspec *" new_value ,
.BI "                    struct itimerspec *" old_value );
.sp
.BI "int timerfd_gettime(int " fd ", struct itimerspec *" curr_value );
.fi
.SH DESCRIPTION
These system calls create n' operate on a timer
that delivers timer expiration notifications via a gangbangin' file descriptor.
They provide a alternatizzle ta tha use of
.BR setitimer (2)
or
.BR timer_create (2),
with tha advantage dat tha file descriptor may be monitored by
.BR select (2),
.BR poll (2),
and
.BR epoll (7).

Da use of these three system calls be analogous ta tha use of
.BR timer_create (2),
.BR timer_settime (2),
and
.BR timer_gettime (2).
(There is no analog of
.BR timer_getoverrun (2),
since dat functionalitizzle is provided by
.BR read (2),
as busted lyrics bout below.)
.\"
.SS timerfd_create()
.BR timerfd_create ()
creates a freshly smoked up timer object,
and returns a gangbangin' file descriptor dat refers ta dat timer.
The
.I clockid
argument specifies tha clock dat is used ta mark tha progress
of tha timer, n' must be either
.B CLOCK_REALTIME
or
.BR CLOCK_MONOTONIC .
.B CLOCK_REALTIME
is a settable system-wide clock.
.B CLOCK_MONOTONIC
is a nonsettable clock dat aint affected
by discontinuous chizzlez up in tha system clock
(e.g., manual chizzlez ta system time).
Da current value of each of these clocks can be retrieved using
.BR clock_gettime (2).

Startin wit Linux 2.6.27, tha followin joints may be bitwise ORed in
.IR flags
to chizzle tha behavior of
.BR timerfd_create ():
.TP 14
.B TFD_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on tha freshly smoked up open file description.
Usin dis flag saves extra calls to
.BR fcntl (2)
to big up tha same result.
.TP
.B TFD_CLOEXEC
Set tha close-on-exec
.RB ( FD_CLOEXEC )
flag on tha freshly smoked up file descriptor.
See tha description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why dis may be useful.
.PP
In Linux versions up ta n' includin 2.6.26,
.I flags
must be specified as zero.
.SS timerfd_settime()
.BR timerfd_settime ()
arms (starts) or disarms (stops)
the timer referred ta by tha file descriptor
.IR fd .

The
.I new_value
argument specifies tha initial expiration n' interval fo' tha timer.
The
.I itimer
structure used fo' dis argument gotz nuff two fields,
each of which is up in turn a structure of type
.IR timespec :
.in +4n
.nf

struct timespec {
    time_t tv_sec;                /* Secondz */
    long   tv_nsec;               /* Nanosecondz */
};

struct itimerspec {
    struct timespec it_interval;  /* Interval fo' periodic timer */
    struct timespec it_value;     /* Initial expiration */
};
.fi
.in
.PP
.I new_value.it_value
specifies tha initial expiration of tha timer,
in secondz n' nanoseconds.
Settin either field of
.I new_value.it_value
to a nonzero value arms tha timer.
Settin both fieldz of
.I new_value.it_value
to zero disarms tha timer.

Settin one or both fieldz of
.I new_value.it_interval
to nonzero joints specifies tha period, up in secondz n' nanoseconds,
for repeated timer expirations afta tha initial expiration.
If both fieldz of
.I new_value.it_interval
are zero, tha timer expires just once, all up in tha time specified by
.IR new_value.it_value .

The
.I flags
argument is either 0, ta start a relatizzle timer
.RI ( new_value.it_value
specifies a time relatizzle ta tha current value of tha clock specified by
.IR clockid ),
or
.BR TFD_TIMER_ABSTIME ,
to start a absolute timer
.RI ( new_value.it_value
specifies a absolute time fo' tha clock specified by
.IR clockid ;
that is, tha timer will expire when tha value of that
clock reaches tha value specified in
.IR new_value.it_value ).

If the
.I old_value
argument aint NULL, then the
.I itimerspec
structure dat it points ta is used ta return tha settin of tha timer
that was current all up in tha time of tha call;
see tha description of
.BR timerfd_gettime ()
following.
.\"
.SS timerfd_gettime()
.BR timerfd_gettime ()
returns, in
.IR curr_value ,
an
.IR itimerspec
structure dat gotz nuff tha current settin of tha timer
referred ta by tha file descriptor
.IR fd .

The
.I it_value
field returns tha amount of time
until tha timer will next expire.
If both fieldz of dis structure is zero,
then tha timer is currently disarmed.
This field always gotz nuff a relatizzle value, regardless of whether the
.BR TFD_TIMER_ABSTIME
flag was specified when settin tha timer.

The
.I it_interval
field returns tha interval of tha timer.
If both fieldz of dis structure is zero,
then tha timer is set ta expire just once, all up in tha time specified by
.IR curr_value.it_value .
.SS Operatin on a timer file descriptor
Da file descriptor returned by
.BR timerfd_create ()
supports tha followin operations:
.TP
.BR read (2)
If tha timer has already expired one or mo' times since
its settings was last modified using
.BR timerfd_settime (),
or since tha last successful
.BR read (2),
then tha buffer given to
.BR read (2)
returns a unsigned 8-byte integer
.RI ( uint64_t )
containin tha number of expirations dat have occurred.
(Da returned value is up in host byte order,
i.e., tha natizzle byte order fo' integers on tha host machine.)
.IP
If no timer expirations have occurred all up in tha time of the
.BR read (2),
then tha call either blocks until tha next timer expiration,
or fails wit tha error
.B EAGAIN
if tha file descriptor has been made nonblocking
(via tha use of the
.BR fcntl (2)
.B F_SETFL
operation ta set the
.B O_NONBLOCK
flag).
.IP
A
.BR read (2)
will fail wit tha error
.B EINVAL
if tha size of tha supplied buffer is less than 8 bytes.
.TP
.BR poll "(2), " select "(2) (and similar)"
Da file descriptor is readable
(the
.BR select (2)
.I readfds
argument; the
.BR poll (2)
.B POLLIN
flag)
if one or mo' timer expirations have occurred.
.IP
Da file descriptor also supports tha other file-descriptor
multiplexin APIs:
.BR pselect (2),
.BR ppoll (2),
and
.BR epoll (7).
.TP
.BR close (2)
When tha file descriptor is no longer required it should be closed.
When all file descriptors associated wit tha same timer object
have been closed,
the timer is disarmed n' its resources is freed by tha kernel.
.\"
.SS fork(2) semantics
Afta a
.BR fork (2),
the lil pimp inherits a cold-ass lil copy of tha file descriptor pimped by
.BR timerfd_create ().
Da file descriptor refers ta tha same underlying
timer object as tha correspondin file descriptor up in tha parent,
and
.BR read (2)s
in tha lil pimp will return shiznit about
expirationz of tha timer.
.\"
.SS execve(2) semantics
A file descriptor pimped by
.BR timerfd_create ()
is preserved across
.BR execve (2),
and continues ta generate timer expirations if tha timer was armed.
.SH RETURN VALUE
On success,
.BR timerfd_create ()
returns a freshly smoked up file descriptor.
On error, \-1 is returned and
.I errno
is set ta indicate tha error.

.BR timerfd_settime ()
and
.BR timerfd_gettime ()
return 0 on success;
on error they return \-1, n' set
.I errno
to indicate tha error.
.SH ERRORS
.BR timerfd_create ()
can fail wit tha followin errors:
.TP
.B EINVAL
The
.I clockid
argument is neither
.B CLOCK_MONOTONIC
nor
.BR CLOCK_REALTIME ;
.TP
.B EINVAL
.I flags
is invalid;
or, up in Linux 2.6.26 or earlier,
.I flags
is nonzero.
.TP
.B EMFILE
Da per-process limit of open file descriptors has been reached.
.TP
.B ENFILE
Da system-wide limit on tha total number of open filez has been
reached.
.TP
.B ENODEV
Could not mount (internal) anonymous inode device.
.TP
.B ENOMEM
There was insufficient kernel memory ta create tha timer.
.PP
.BR timerfd_settime ()
and
.BR timerfd_gettime ()
can fail wit tha followin errors:
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B EFAULT
.IR new_value ,
.IR old_value ,
or
.I curr_value
is not valid a pointer.
.TP
.B EINVAL
.I fd
is not a valid timerfd file descriptor.
.PP
.BR timerfd_settime ()
can also fail wit tha followin errors:
.TP
.B EINVAL
.I new_value
is not properly initialized (one of the
.I tv_nsec
falls outside tha range zero ta 999,999,999).
.TP
.B EINVAL
.\" This case only checked since 2.6.29, n' 2.2.2[78].some-stable-version.
.\" In olda kernel versions, no check was made fo' invalid flags.
.I flags
is invalid.
.SH VERSIONS
These system calls is available on Linux since kernel 2.6.25.
Library support is provided by glibc since version 2.8.
.SH CONFORMING TO
These system calls is Linux-specific.
.SH BUGS
Currently,
.\" 2.6.29
.BR timerfd_create ()
supports fewer typez of clock IDs than
.BR timer_create (2).
.SH EXAMPLE
Da followin program creates a timer n' then monitors its progress.
Da program accepts up ta three command-line arguments.
Da first argument specifies tha number of secondz for
the initial expiration of tha timer.
Da second argument specifies tha interval fo' tha timer, up in seconds.
Da third argument specifies tha number of times tha program should
allow tha timer ta expire before terminating.
Da second n' third command-line arguments is optional.

Da followin shell session demonstrates tha use of tha program:
.in +4n
.nf

.RB "$" " a.out 3 1 100"
0.000: timer started
3.000: read: 1; total=1
4.000: read: 1; total=2
.BR "^Z " "                 # type control-Z ta suspend tha program"
[1]+  Stopped                 ./timerfd3_demo 3 1 100
.RB "$ " "fg" "                # Resume execution afta all dem seconds"
a.out 3 1 100
9.660: read: 5; total=7
10.000: read: 1; total=8
11.000: read: 1; total=9
.BR "^C " "                 # type control-C ta suspend tha program"
.fi
.in
.SS Program source
\&
.nf
.\" Da commented up code here is what tha fuck we currently need until
.\" tha required shiznit is up in glibc
.\"
.\"
.\"/* Link wit -lrt */
.\"#define _GNU_SOURCE
.\"#include <sys/syscall.h>
.\"#include <unistd.h>
.\"#include <time.h>
.\"#if defined(__i386__)
.\"#define __NR_timerfd_create 322
.\"#define __NR_timerfd_settime 325
.\"#define __NR_timerfd_gettime 326
.\"#endif
.\"
.\"static int
.\"timerfd_create(int clockid, int flags)
.\"{
.\"    return syscall(__NR_timerfd_create, clockid, flags);
.\"}
.\"
.\"static int
.\"timerfd_settime(int fd, int flags, struct itimerspec *new_value,
.\"        struct itimerspec *curr_value)
.\"{
.\"    return syscall(__NR_timerfd_settime, fd, flags, new_value,
.\"                   curr_value);
.\"}
.\"
.\"static int
.\"timerfd_gettime(int fd, struct itimerspec *curr_value)
.\"{
.\"    return syscall(__NR_timerfd_gettime, fd, curr_value);
.\"}
.\"
.\"#define TFD_TIMER_ABSTIME (1 << 0)
.\"
.\"////////////////////////////////////////////////////////////
#include <sys/timerfd.h>
#include <time.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>        /* Definizzle of uint64_t */

#define handle_error(msg) \\
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void
print_elapsed_time(void)
{
    static struct timespec start;
    struct timespec curr;
    static int first_call = 1;
    int secs, nsecs;

    if (first_call) {
        first_call = 0;
        if (clock_gettime(CLOCK_MONOTONIC, &start) == \-1)
            handle_error("clock_gettime");
    }

    if (clock_gettime(CLOCK_MONOTONIC, &curr) == \-1)
        handle_error("clock_gettime");

    secs = curr.tv_sec \- start.tv_sec;
    nsecs = curr.tv_nsec \- start.tv_nsec;
    if (nsecs < 0) {
        secs\-\-;
        nsecs += 1000000000;
    }
    printf("%d.%03d: ", secs, (nsecs + 500000) / 1000000);
}

int
main(int argc, char *argv[])
{
    struct itimerspec new_value;
    int max_exp, fd;
    struct timespec now;
    uint64_t exp, tot_exp;
    ssize_t s;

    if ((argc != 2) && (argc != 4)) {
        fprintf(stderr, "%s init\-secs [interval\-secs max\-exp]\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    if (clock_gettime(CLOCK_REALTIME, &now) == \-1)
        handle_error("clock_gettime");

    /* Smoke a CLOCK_REALTIME absolute timer wit initial
       expiration n' interval as specified up in command line */

    new_value.it_value.tv_sec = now, nahmeean?tv_sec + atoi(argv[1]);
    new_value.it_value.tv_nsec = now, nahmeean?tv_nsec;
    if (argc == 2) {
        new_value.it_interval.tv_sec = 0;
        max_exp = 1;
    } else {
        new_value.it_interval.tv_sec = atoi(argv[2]);
        max_exp = atoi(argv[3]);
    }
    new_value.it_interval.tv_nsec = 0;

    fd = timerfd_create(CLOCK_REALTIME, 0);
    if (fd == \-1)
        handle_error("timerfd_create");

    if (timerfd_settime(fd, TFD_TIMER_ABSTIME, &new_value, NULL) == \-1)
        handle_error("timerfd_settime");

    print_elapsed_time();
    printf("timer started\\n");

    fo' (tot_exp = 0; tot_exp < max_exp;) {
        s = read(fd, &exp, sizeof(uint64_t));
        if (s != sizeof(uint64_t))
            handle_error("read");

        tot_exp += exp;
        print_elapsed_time();
        printf("read: %llu; total=%llu\\n",
                (unsigned long long) exp,
                (unsigned long long) tot_exp);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR eventfd (2),
.BR poll (2),
.BR read (2),
.BR select (2),
.BR setitimer (2),
.BR signalfd (2),
.BR timer_create (2),
.BR timer_gettime (2),
.BR timer_settime (2),
.BR epoll (7),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
