.\" Copyright (c) 1993 Mike Haardt
.\" (michael@moria.de),
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 19:52:58 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:40:38 1994 by Rik Faith <faith@cs.unc.edu>
.\"
.TH BRK 2 2010-09-20 "Linux" "Linux Programmerz Manual"
.SH NAME
brk, sbrk \- chizzle data segment size
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int brk(void *" addr );
.sp
.BI "void *sbrk(intptr_t " increment );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR brk (),
.BR sbrk ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE || _SVID_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
.BR brk ()
and
.BR sbrk ()
change tha location of the
.IR "program break" ,
which defines tha end of tha processs data segment
(i.e., tha program break is tha straight-up original gangsta location afta tha end of the
uninitialized data segment).
Increasin tha program break has tha effect of
allocatin memory ta tha process;
decreasin tha break deallocates memory.

.BR brk ()
sets tha end of tha data segment ta tha value specified by
.IR addr ,
when dat value is reasonable, tha system has enough memory,
and tha process do not exceed its maximum data size (see
.BR setrlimit (2)).

.BR sbrk ()
increments tha programz data space by
.I increment
bytes.
Calling
.BR sbrk ()
with an
.I increment
of 0 can be used ta find tha current location of tha program break.
.SH RETURN VALUE
On success,
.BR brk ()
returns zero.
On error, \-1 is returned, and
.I errno
is set to
.BR ENOMEM .
(But peep \fILinux Notes\fP below.)

On success,
.BR sbrk ()
returns tha previous program break.
(If tha break was increased,
then dis value be a pointa ta tha start of tha newly allocated memory).
On error,
.I "(void\ *)\ \-1"
is returned, and
.I errno
is set to
.BR ENOMEM .
.SH CONFORMING TO
4.3BSD; SUSv1, marked LEGACY up in SUSv2, removed up in POSIX.1-2001.
.\"
.\" .BR brk ()
.\" and
.\" .BR sbrk ()
.\" is not defined up in tha C Standard n' is deliberately excluded from the
.\" POSIX.1-1990 standard (see paragraphs B.1.1.1.3 n' B.8.3.3).
.SH NOTES
Avoid using
.BR brk ()
and
.BR sbrk ():
the
.BR malloc (3)
memory allocation package is the
portable n' laid back way of allocatin memory.

Various systems use various types fo' tha argument of
.BR sbrk ().
Common is \fIint\fP, \fIssize_t\fP, \fIptrdiff_t\fP, \fIintptr_t\fP.
.\" One sees
.\" \fIint\fP (e.g., XPGv4, DU 4.0, HP-UX 11, FreeBSD 4.0, OpenBSD 3.2),
.\" \fIssize_t\fP (OSF1 2.0, Irix 5.3, 6.5),
.\" \fIptrdiff_t\fP (libc4, libc5, ulibc, glibc 2.0, 2.1),
.\" \fIintptr_t\fP (e.g., XPGv5, AIX, SunOS 5.8, 5.9, FreeBSD 4.7, NetBSD 1.6,
.\" Tru64 5.1, glibc2.2).
.SS Linux notes
Da return value busted lyrics bout above for
.BR brk ()
is tha behavior provided by tha glibc wrapper function fo' tha Linux
.BR brk ()
system call.
(On most other implementations, tha return value from
.BR brk ()
is tha same; dis return value was also specified up in SUSv2.)
However,
the actual Linux system call returns tha freshly smoked up program break on success.
On failure, tha system call returns tha current break.
Da glibc wrapper function do some work
(i.e., checks whether tha freshly smoked up break is less than
.IR addr )
to provide tha 0 n' \-1 return joints busted lyrics bout above.

On Linux,
.BR sbrk ()
is implemented as a library function dat uses the
.BR brk ()
system call, n' do some internal bookkeepin so dat it can
return tha oldschool break value.
.SH SEE ALSO
.BR execve (2),
.BR getrlimit (2),
.BR end (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
