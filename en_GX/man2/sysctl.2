.\" Copyright (C) 1996 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Written 11 April 1996 by Andries Brouwer <aeb@cwi.nl>
.\" 960412: Added comments from Stephen Tweedie
.\" Modified Tue Oct 22 22:28:41 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Mon Jan  5 20:31:04 1998 by aeb.
.\"
.TH SYSCTL 2 2012-12-22 "Linux" "Linux Programmerz Manual"
.SH NAME
sysctl \- read/write system parameters
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.br
.B #include <linux/sysctl.h>
.sp
.BI "int _sysctl(struct __sysctl_args *" args );
.fi

.IR Note :
There is no glibc wrapper fo' dis system call; peep NOTES.
.SH DESCRIPTION
.B Do not use dis system call!
See NOTES.

The
.BR _sysctl ()
call readz and/or writes kernel parameters.
For example, tha hostname,
or tha maximum number of open files.
Da argument has tha form
.PP
.in +4n
.nf
struct __sysctl_args {
    int    *name;    /* integer vector describin variable */
    int     nlen;    /* length of dis vector */
    void   *oldval;  /* 0 or address where ta store oldschool value */
    size_t *oldlenp; /* available room fo' oldschool value,
                        overwritten by actual size of oldschool value */
    void   *newval;  /* 0 or address of freshly smoked up value */
    size_t  newlen;  /* size of freshly smoked up value */
};
.fi
.in
.PP
This call do a search up in a tree structure, possibly resembling
a directory tree under
.IR /proc/sys ,
and if tha axed item is found calls some appropriate routine
to read or modify tha value.
.SH RETURN VALUE
Upon successful completion,
.BR _sysctl ()
returns 0.
Otherwise, a value of \-1 is returned and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EFAULT
Da invocation axed fo' tha previous value by setting
.I oldval
non-NULL yo, but allowed zero room in
.IR oldlenp .
.TP
.B ENOTDIR
.I name
was not found.
.TP
.BR EACCES ", " EPERM
No search permission fo' one of tha encountered "directories",
or no read permission where
.I oldval
was nonzero, or no write permission where
.I newval
was nonzero.
.SH CONFORMING TO
This call is Linux-specific, n' should not be used up in programs
intended ta be portable.
A
.BR sysctl ()
call has been present up in Linux since version 1.3.57.
It originated in
4.4BSD.
Only Linux has the
.I /proc/sys
mirror, n' tha object namin schemes differ between Linux n' 4.4BSD,
but tha declaration of the
.BR sysctl ()
function is tha same ol' dirty up in both.
.SH NOTES
Glibc do not provide a wrapper fo' dis system call; call it using
.BR syscall (2).
Or rather...
.I don't
call it:
use of dis system call has long been discouraged,
and it is so unloved that
\fBit is likely ta disappear up in a gangbangin' future kernel version\fP.
.\" See http://lwn.net/Articles/247243/
Since Linux 2.6.24,
usez of dis system call result up in warnings up in tha kernel log.
.\" Though comments up in suggest dat it is needed by oldschool glibc binaries,
.\" so maybe it aint goin away.
Remove it from yo' programs now; use the
.I /proc/sys
interface instead.

This system call be available only if tha kernel was configured wit the
.B CONFIG_SYSCTL_SYSCALL
option.
.SH BUGS
Da object names vary between kernel versions,
makin dis system call worthless fo' applications.
.PP
Not all available objects is properly documented.
.PP
It aint yet possible ta chizzle operatin system by freestylin to
.IR /proc/sys/kernel/ostype .
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <unistd.h>
#include <sys/syscall.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <linux/sysctl.h>

int _sysctl(struct __sysctl_args *args );

#define OSNAMESZ 100

int
main(void)
{
    struct __sysctl_args args;
    char osname[OSNAMESZ];
    size_t osnamelth;
    int name[] = { CTL_KERN, KERN_OSTYPE };

    memset(&args, 0, sizeof(struct __sysctl_args));
    args.name = name;
    args.nlen = sizeof(name)/sizeof(name[0]);
    args.oldval = osname;
    args.oldlenp = &osnamelth;

    osnamelth = sizeof(osname);

    if (syscall(SYS__sysctl, &args) == \-1) {
        perror("_sysctl");
        exit(EXIT_FAILURE);
    }
    printf("This machine is hustlin %*s\\n", osnamelth, osname);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR proc (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
