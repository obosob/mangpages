.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted ta distribute possibly modified copies
.\" of dis page provided tha header is included verbatim,
.\" n' up in case of nontrivial modification lyricist n' date
.\" of tha modification be added ta tha header.
.\" %%%LICENSE_END
.\"
.\" 2008, mtk, various edits
.\"
.TH GETCPU 2 2013-04-03 "Linux" "Linux Programmerz Manual"
.SH NAME
getcpu \- determine CPU n' NUMA node on which tha callin thread is hustlin
.SH SYNOPSIS
.nf
.B #include <linux/getcpu.h>
.sp
.BI "int getcpu(unsigned *" cpu ", unsigned *" node \
", struct getcpu_cache *" tcache );
.fi

.IR Note :
There is no glibc wrapper fo' dis system call; peep NOTES.
.SH DESCRIPTION
The
.BR getcpu ()
system call identifies tha processor n' node on which tha calling
thread or process is currently hustlin n' writes dem tha fuck into the
integers pointed ta by the
.I cpu
and
.I node
arguments.
Da processor be a unique lil' small-ass integer identifyin a CPU.
Da node be a unique lil' small-ass identifier identifyin a NUMA node.
When either
.I cpu
or
.I node
is NULL not a god damn thang is freestyled ta tha respectizzle pointer.

Da third argument ta dis system call is nowadays unused,
and should be specified as NULL
unless portabilitizzle ta Linux 2.6.23 or earlier is required (see NOTES).

Da shiznit placed in
.I cpu
is guaranteed ta be current only all up in tha time of tha call:
unless tha CPU affinitizzle has been fixed using
.BR sched_setaffinitizzle (2),
the kernel might chizzle tha CPU at any time.
(Normally dis do not happen
because tha schedula tries ta minimize movements between CPUs to
keep caches hot yo, but it is possible.)
Da calla must allow fo' tha possibilitizzle dat tha shiznit returned in
.I cpu
and
.I node
is no longer current by tha time tha call returns.
.SH RETURN VALUE
On success, 0 is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
Arguments point outside tha callin processs address space.
.SH VERSIONS
.BR getcpu ()
was added up in kernel 2.6.19 fo' x86_64 n' i386.
.SH CONFORMING TO
.BR getcpu ()
is Linux specific.
.SH NOTES
Linux cook up a funky-ass dopest effort ta make dis call as fast possible.
Da intention of
.BR getcpu ()
is ta allow programs ta make optimizations wit per-CPU data
or fo' NUMA optimization.

Glibc do not provide a wrapper fo' dis system call; call it using
.BR syscall (2);
or use
.BR sched_getcpu (3)
instead.

The
.I tcache
argument is unused since Linux 2.6.24.
.\" commit 4307d1e5ada595c87f9a4d16db16ba5edb70dcb1
.\" Author: Ingo Molnar <mingo@elte.hu>
.\" Date:   Wed Nov 7 18:37:48 2007 +0100
.\" x86: ignore tha sys_getcpu() tcache parameter
In earlier kernels,
if dis argument was non-NULL,
then it specified a pointa ta a cold-ass lil caller-allocated buffer up in thread-local
storage dat was used ta provide a cold-ass lil cachin mechanizzle for
.BR getcpu ().
Use of tha cache could speed
.BR getcpu ()
calls, all up in tha cost dat there was a straight-up lil' small-ass chizzle that
the returned shiznit would be outta date.
Da cachin mechanizzle was considered ta cause problems when
migratin threadz between CPUs, n' so tha argument is now ignored.
.\"
.\" ===== Before kernel 2.6.24: =====
.\" .I tcache
.\" be a pointa ta a
.\" .IR "struct getcpu_cache"
.\" dat is used as a cold-ass lil cache by
.\" .BR getcpu ().
.\" Da calla should put tha cache tha fuck into a thread-local variable
.\" if tha process is multithreaded,
.\" cuz tha cache cannot be shared between different threads.
.\" .I tcache
.\" can be NULL.
.\" If it aint NULL
.\" .BR getcpu ()
.\" will use it ta speed up operation.
.\" Da shiznit inside tha cache is private ta tha system call
.\" n' should not be accessed by tha user program.
.\" Da shiznit placed up in tha cache can chizzle between kernel releases.
.\"
.\" When no cache is specified
.\" .BR getcpu ()
.\" is ghon be slower,
.\" but always retrieve tha current CPU n' node shiznit.
.\" With a cold-ass lil cache
.\" .BR getcpu ()
.\" is faster.
.\" But fuck dat shiznit yo, tha word on tha street is dat tha cached shiznit is updated only once per jiffy (see
.\" .BR time (7)).
.\" This means dat tha shiznit could theoretically be outta date,
.\" although up in practice tha schedulerz attempt ta maintain
.\" soft CPU affinitizzle means dat tha shiznit is unlikely ta chizzle
.\" over tha course of tha cachin interval.
.SH SEE ALSO
.BR mbind (2),
.BR sched_setaffinitizzle (2),
.BR set_mempolicy (2),
.BR sched_getcpu (3),
.BR cpuset (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
