.\" Copyright (C) 2004 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH SET_TID_ADDRESS 2 2012-07-19 "Linux" "Linux Programmerz Manual"
.SH NAME
set_tid_address \- set pointa ta thread ID
.SH SYNOPSIS
.nf
.B #include <linux/unistd.h>
.sp
.BI "long set_tid_address(int *" tidptr );
.fi
.SH DESCRIPTION
For each process, tha kernel maintains two attributes (addresses) called
.I set_child_tid
and
.IR clear_child_tid .
These two attributes contain tha value NULL by default.
.TP
.I set_child_tid
If a process is started using
.BR clone (2)
with the
.B CLONE_CHILD_SETTID
flag,
.I set_child_tid
is set ta tha value passed up in the
.I ctid
argument of dat system call.
.IP
When
.I set_child_tid
is set, tha straight-up first thang tha freshly smoked up process do
is freestylin its PID at dis address.
.TP
.I clear_child_tid
If a process is started using
.BR clone (2)
with the
.B CLONE_CHILD_CLEARTID
flag,
.I clear_child_tid
is set ta tha value passed up in the
.I ctid
argument of dat system call.
.LP
Da system call
.BR set_tid_address ()
sets the
.I clear_child_tid
value fo' tha callin process to
.IR tidptr .
.LP
When a process whose
.I clear_child_tid
is not NULL terminates, then,
if tha process is pluggin memory wit other processes or threads,
then 0 is freestyled all up in tha address specified in
.I clear_child_tid
and tha kernel performs tha followin operation:

    futex(clear_child_tid, FUTEX_WAKE, 1, NULL, NULL, 0);

Da effect of dis operation is ta wake a single process that
is struttin a gangbangin' futex wait on tha memory location.
Errors from tha futex wake operation is ignored.
.SH RETURN VALUE
.BR set_tid_address ()
always returns tha PID of tha callin process.
.SH ERRORS
.BR set_tid_address ()
always succeeds.
.SH VERSIONS
This call is present since Linux 2.5.48.
Details as given here is valid since Linux 2.5.49.
.SH CONFORMING TO
This system call is Linux-specific.
.SH SEE ALSO
.BR clone (2),
.BR futex (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
