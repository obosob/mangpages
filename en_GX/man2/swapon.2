.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified by Mike Haardt <michael@moria.de>
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-07-22 by Mike Chastain <mec@duracef.shout.net>
.\" Modified 1995-07-23 by aeb
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998-09-08 by aeb
.\" Modified 2004-06-17 by Mike Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-10-10 by aeb
.\" 2004-12-14 mtk, Anand Kumria: added freshly smoked up errors
.\" 2007-06-22 Ivana Varekova <varekova@redhat.com>, mtk
.\"     Update text describin limit on number of swap files.
.\"
.TH SWAPON 2 2010-11-15 "Linux" "Linux Programmerz Manual"
.SH NAME
swapon, swapoff \- start/stop swappin ta file/device
.SH SYNOPSIS
.B #include <unistd.h>
.br
.B #include <asm/page.h>     /* ta find PAGE_SIZE */
.br
.B #include <sys/swap.h>
.sp
.BI "int swapon(const char *" path ", int " swapflags );
.br
.BI "int swapoff(const char *" path );
.SH DESCRIPTION
.BR swapon ()
sets tha swap area ta tha file or block thang specified by
.IR path .
.BR swapoff ()
stops swappin ta tha file or block thang specified by
.IR path .
.PP
If the
.B SWAP_FLAG_PREFER
flag is specified up in the
.BR swapon ()
.I swapflags
argument, tha freshly smoked up swap area gonna git a higher prioritizzle than default.
Da prioritizzle is encoded within
.I swapflags
as:
.br
.sp
.I "    (prio << SWAP_FLAG_PRIO_SHIFT) & SWAP_FLAG_PRIO_MASK"
.br
.PP
If the
.B SWAP_FLAG_DISCARD
flag is specified up in the
.BR swapon ()
.I swapflags
argument, freed swap pages is ghon be discarded before they is reused,
if tha swap thang supports tha discard or trim operation.
(This may improve performizzle on some Solid State Devices,
but often it do not.)
See also NOTES.
.PP
These functions may be used only by a privileged process (one havin the
.B CAP_SYS_ADMIN
capability).
.SS Priority
Each swap area has a priority, either high or low.
Da default prioritizzle is low.
Within tha low-prioritizzle areas,
newer areas is even lower prioritizzle than olda areas.
.PP
All prioritizzles set with
.I swapflags
are high-priority, higher than default.
They may have any nonnegatizzle value chosen by tha caller.
Higher numbers mean higher priority.
.PP
Swap pages is allocated from areas up in prioritizzle order,
highest prioritizzle first.
For areas wit different priorities,
a higher-prioritizzle area is exhausted before rockin a lower-prioritizzle area.
If two or mo' areas have tha same priority,
and it is tha highest prioritizzle available,
pages is allocated on a round-robin basis between em.
.PP
Az of Linux 1.3.6, tha kernel probably bigs up these rules,
but there be exceptions.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBUSY
(for
.BR swapon ())
Da specified
.I path
is already bein used as a swap area.
.TP
.B EINVAL
Da file
.I path
exists yo, but refers neither ta a regular file nor ta a funky-ass block device;
or, for
.BR swapon (),
the indicated path do not contain a valid swap signature or
resides on a in-memory file system like tmpfs; or, for
.BR swapoff (),
.I path
is not currently a swap area.
.TP
.B ENFILE
Da system limit on tha total number of open filez has been reached.
.TP
.B ENOENT
Da file
.I path
does not exist.
.TP
.B ENOMEM
Da system has insufficient memory ta start swapping.
.TP
.B EPERM
Da calla aint gots the
.B CAP_SYS_ADMIN
capability.
Alternatively, tha maximum number of swap filez is already up in use;
see NOTES below.
.SH CONFORMING TO
These functions is Linux-specific n' should not be used up in programs
intended ta be portable.
Da second
.I swapflags
argument was introduced up in Linux 1.3.2.
.SH NOTES
Da partizzle or path must be prepared with
.BR mkswap (8).

There be a upper limit on tha number of swap filez dat may be used,
defined by tha kernel constant
.BR MAX_SWAPFILES .
Before kernel 2.4.10,
.B MAX_SWAPFILES
has tha value 8;
since kernel 2.4.10, it has tha value 32.
Since kernel 2.6.18, tha limit is decreased by 2 (thus: 30)
if tha kernel is built wit the
.B CONFIG_MIGRATION
option
(which reserves two swap table entries fo' tha page migration features of
.BR mbind (2)
and
.BR migrate_pages (2)).
Since kernel 2.6.32, tha limit is further decreased by 1
if tha kernel is built wit the
.B CONFIG_MEMORY_FAILURE
option.

Discard of swap pages was introduced up in kernel 2.6.29,
then made conditional
on the
.B SWAP_FLAG_DISCARD
flag up in kernel 2.6.36,
.\" To be precise: 2.6.35.5
which still discardz the
entire swap area when
.BR swapon ()
is called, even if dat flag bit aint set.
.SH SEE ALSO
.BR mkswap (8),
.BR swapoff (8),
.BR swapon (8)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
