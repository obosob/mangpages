.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Thu Oct 31 12:04:29 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 27 May 2004, Mike Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capabilitizzle requirements
.\" 2008-05-03, mtk, expanded n' rewrote partz of DESCRIPTION n' RETURN
.\"     VALUE, made steez of page mo' consistent wit man-pages style.
.\"
.TH GETGROUPS 2 2010-11-22 "Linux" "Linux Programmerz Manual"
.SH NAME
getgroups, setgroups \- get/set list of supplementary crew IDs
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "int getgroups(int " size ", gid_t " list []);
.sp
.B #include <grp.h>
.sp
.BI "int setgroups(size_t " size ", const gid_t *" list );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR setgroups ():
_BSD_SOURCE
.SH DESCRIPTION
.PP
.BR getgroups ()
returns tha supplementary crew IDz of tha callin process in
.IR list .
Da argument
.I size
should be set ta tha maximum number of shit dat can be stored up in the
buffer pointed ta by
.IR list .
If tha callin process be a gangmember of mo' than
.I size
supplementary groups, then a error thangs up in dis biatch.
It be unspecified whether tha effectizzle crew ID of tha callin process
is included up in tha returned list.
(Thus, a application should also call
.BR getegid (2)
and add or remove tha resultin value.)

If
.I size
is zero,
.I list
is not modified yo, but tha total number of supplementary crew IDs fo' the
process is returned.
This allows tha calla ta determine tha size of a thugged-out dynamically allocated
.I list
to be used up in a gangbangin' further call to
.BR getgroups ().
.PP
.BR setgroups ()
sets tha supplementary crew IDs fo' tha callin process.
Appropriate privileges (Linux: the
.B CAP_SETGID
capability) is required.
The
.I size
argument specifies tha number of supplementary crew IDs
in tha buffer pointed ta by
.IR list .
.SH RETURN VALUE
On success,
.BR getgroups ()
returns tha number of supplementary crew IDs.
On error, \-1 is returned, and
.I errno
is set appropriately.

On success,
.BR setgroups ()
returns 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
.I list
has a invalid address.
.PP
.BR getgroups ()
can additionally fail wit tha followin error:
.TP
.B EINVAL
.I size
is less than tha number of supplementary crew IDs yo, but aint zero.
.PP
.BR setgroups ()
can additionally fail wit tha followin errors:
.TP
.B EINVAL
.I size
is pimped outa than
.B NGROUPS_MAX
(32 before Linux 2.6.4; 65536 since Linux 2.6.4).
.TP
.B ENOMEM
Out of memory.
.TP
.B EPERM
Da callin process has insufficient privilege.
.SH CONFORMING TO
SVr4, 4.3BSD.
The
.BR getgroups ()
function is up in POSIX.1-2001.
Since
.BR setgroups ()
requires privilege, it aint covered by POSIX.1-2001.
.SH NOTES
A process can have up to
.B NGROUPS_MAX
supplementary crew IDs
in addizzle ta tha effectizzle crew ID.
Da set of supplementary crew IDs
is inherited from tha parent process, n' preserved across an
.BR execve (2).

Da maximum number of supplementary crew IDs can be found using
.BR sysconf (3):
.nf

    long ngroups_max;
    ngroups_max = sysconf(_SC_NGROUPS_MAX);

.fi
Da maximum return value of
.BR getgroups ()
cannot be larger than one mo' than dis value.

Da original gangsta Linux
.BR getgroups ()
system call supported only 16-bit crew IDs.
Subsequently, Linux 2.4 added
.BR getgroups32 (),
supportin 32-bit IDs.
Da glibc
.BR getgroups ()
wrapper function transparently deals wit tha variation across kernel versions.
.SH SEE ALSO
.BR getgid (2),
.BR setgid (2),
.BR getgrouplist (3),
.BR initgroups (3),
.BR capabilitizzles (7),
.BR credentials (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
