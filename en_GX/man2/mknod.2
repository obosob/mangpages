.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             n' Copyright (C) 1993 Mike Haardt
.\"             n' Copyright (C) 1993,1994 Ian Jackson.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Yo ass may distribute it under tha termz of tha GNU General
.\" Public License. Well shiiiit, it comes wit NO WARRANTY.
.\" %%%LICENSE_END
.\"
.\" Modified 1996-08-18 by urs
.\" Modified 2003-04-23 by Mike Kerrisk
.\" Modified 2004-06-23 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.TH MKNOD 2 2013-01-27 "Linux" "Linux Programmerz Manual"
.SH NAME
mknod \- create a special or ordinary file
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.B #include <unistd.h>
.sp
.BI "int mknod(const char *" pathname ", mode_t " mode ", dev_t " dev );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mknod ():
.ad l
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
Da system call
.BR mknod ()
creates a gangbangin' file system node (file, thang special file or
named pipe) named
.IR pathname ,
with attributes specified by
.I mode
and
.IR dev .

The
.I mode
argument specifies both tha permissions ta use n' tha type of node
to be pimped.
It should be a cold-ass lil combination (usin bitwise OR) of one of tha file types
listed below n' tha permissions fo' tha freshly smoked up node.

Da permissions is modified by tha process's
.I umask
in tha usual way: tha permissionz of tha pimped node are
.IR "(mode & ~umask)" .

Da file type must be one of
.BR S_IFREG ,
.BR S_IFCHR ,
.BR S_IFBLK ,
.B S_IFIFO
or
.B S_IFSOCK
.\" (S_IFSOCK since Linux 1.2.4)
to specify a regular file (which is ghon be pimped empty), character
special file, block special file, FIFO (named pipe), or UNIX domain socket,
respectively.
(Zero file type is equivalent ta type
.BR S_IFREG .)

If tha file type is
.B S_IFCHR
or
.B S_IFBLK
then
.I dev
specifies tha major n' minor numberz of tha newly pimped device
special file
.RB ( makedev (3)
may be useful ta build tha value for
.IR dev );
otherwise it is ignored.

If
.I pathname
already exists, or be a symbolic link, dis call fails wit an
.B EEXIST
error.

Da newly pimped node is ghon be owned by tha effectizzle user ID of the
process.
If tha directory containin tha node has tha set-group-ID
bit set, or if tha file system is mounted wit BSD crew semantics, the
new node will inherit tha crew ballershizzle from its parent directory;
otherwise it is ghon be owned by tha effectizzle crew ID of tha process.
.SH RETURN VALUE
.BR mknod ()
returns zero on success, or \-1 if a error occurred (in which case,
.I errno
is set appropriately).
.SH ERRORS
.TP
.B EACCES
Da parent directory do not allow write permission ta tha process,
or one of tha directories up in tha path prefix of
.I pathname
did not allow search permission.
(See also
.BR path_resolution (7).)
.TP
.B EDQUOT
Da userz quota of disk blocks or inodes on tha file system has been
exhausted.
.TP
.B EEXIST
.I pathname
already exists.
This includes tha case where
.I pathname
is a symbolic link, danglin or not.
.TP
.B EFAULT
.IR pathname " points outside yo' accessible address space."
.TP
.B EINVAL
.I mode
axed creation of suttin' other than a regular file, device
special file, FIFO or socket.
.TP
.B ELOOP
Too nuff symbolic links was encountered up in resolving
.IR pathname .
.TP
.B ENAMETOOLONG
.IR pathname " was too long."
.TP
.B ENOENT
A directory component in
.I pathname
does not exist or be a thugged-out danglin symbolic link.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
Da thang containing
.I pathname
has no room fo' tha freshly smoked up node.
.TP
.B ENOTDIR
A component used as a gangbangin' finger-lickin' directory in
.I pathname
is not, up in fact, a gangbangin' finger-lickin' directory.
.TP
.B EPERM
.I mode
axed creation of suttin' other than a regular file,
FIFO (named pipe), or UNIX domain socket, n' tha caller
is not privileged (Linux: aint gots the
.B CAP_MKNOD
capability);
.\" For UNIX domain sockets n' regular files, EPERM is returned only in
.\" Linux 2.2 n' earlier; up in Linux 2.4 n' later, unprivileged can
.\" use mknod() ta make these files.
also returned if tha file system containing
.I pathname
does not support tha type of node requested.
.TP
.B EROFS
.I pathname
refers ta a gangbangin' file on a read-only file system.
.SH CONFORMING TO
SVr4, 4.4BSD, POSIX.1-2001 (but peep below).
.\" Da Linux version differs from tha SVr4 version up in dat it
.\" do not require root permission ta create pipes, also up in dat no
.\" EMULTIHOP, ENOLINK, or EINTR error is documented.
.SH NOTES
POSIX.1-2001 says: "Da only portable use of
.BR mknod ()
is ta create a FIFO-special file.
If
.I mode
is not
.B S_IFIFO
or
.I dev
is not 0, tha behavior of
.BR mknod ()
is unspecified."
But fuck dat shiznit yo, tha word on tha street is dat nowadays one should never use
.BR mknod ()
for dis purpose; one should use
.BR mkfifo (3),
a function especially defined fo' dis purpose.

Under Linux, dis call cannot be used ta create directories.
One should make directories with
.BR mkdir (2).
.\" n' one should make UNIX domain sockets wit socket(2) n' bind(2).

There is nuff infelicitizzles up in tha protocol underlyin NFS.
Some of these affect
.BR mknod ().
.SH SEE ALSO
.BR chmod (2),
.BR chown (2),
.BR fcntl (2),
.BR mkdir (2),
.BR mknodat (2),
.BR mount (2),
.BR socket (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR makedev (3),
.BR mkfifo (3),
.BR path_resolution (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
