.\" Copyright (C) 2003 Jacked Software Foundation, Inc.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" This file is distributed accordin ta tha GNU General Public License.
.\" %%%LICENSE_END
.\"
.TH IO_GETEVENTS 2 2013-04-08 "Linux" "Linux Programmerz Manual"
.SH NAME
io_getevents \- read asynchronous I/O events from tha completion queue
.SH SYNOPSIS
.nf
.BR "#include <linux/aio_abi.h>" "         /* Defines needed types */"
.BR "#include <linux/time.h>" "            /* Defines 'struct timespec' */"

.BI "int io_getevents(aio_context_t " ctx_id ", long " min_nr ", long " nr ,
.BI "                 struct io_event *" events \
", struct timespec *" timeout );
.fi

.IR Note :
There is no glibc wrapper fo' dis system call; peep NOTES.
.SH DESCRIPTION
.PP
The
.BR io_getevents ()
system call
attempts ta read at least \fImin_nr\fP events and
up ta \fInr\fP events from tha completion queue of tha AIO context
specified by \fIctx_id\fP.
Da \fItimeout\fP argument specifies tha amount of time ta wait fo' events,
where a NULL timeout waits until at least \fImin_nr\fP events
have been seen.
Note dat \fItimeout\fP is relative.
.SH RETURN VALUE
On success,
.BR io_getevents ()
returns tha number of events read: 0 if no events are
available, or less than \fImin_nr\fP if tha \fItimeout\fP has elapsed.
For tha failure return, peep NOTES.
.SH ERRORS
.TP
.B EFAULT
Either \fIevents\fP or \fItimeout\fP be a invalid pointer.
.TP
.B EINVAL
\fIctx_id\fP is invalid.
\fImin_nr\fP is outta range or \fInr\fP is
out of range.
.TP
.B EINTR
Interrupted by a signal handlez; see
.BR signal (7).
.TP
.B ENOSYS
.BR io_getevents ()
is not implemented on dis architecture.
.SH VERSIONS
.PP
Da asynchronous I/O system calls first rocked up in Linux 2.5.
.SH CONFORMING TO
.PP
.BR io_getevents ()
is Linux-specific n' should not be used in
programs dat is intended ta be portable.
.SH NOTES
Glibc do not provide a wrapper function fo' dis system call.
Yo ass could invoke it using
.BR syscall (2).
But instead, you probably wanna use the
.BR io_getevents ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.IR libaio .

Note dat the
.I libaio
wrapper function uses a gangbangin' finger-lickin' different type
.RI ( io_context_t )
.\" But glibc is confused, since <libaio.h> uses 'io_context_t' ta declare
.\" tha system call.
for the
.I ctx_id
argument.
Note also dat the
.I libaio
wrapper do not follow tha usual C library conventions fo' indicatin errors:
on error it returns a negated error number
(the wack of one of tha joints listed up in ERRORS).
If tha system call is invoked via
.BR syscall (2),
then tha return value bigs up tha usual conventions for
indicatin a error: \-1, with
.I errno
set ta a (positive) value dat indicates tha error.
.SH BUGS
An invalid
.IR ctx_id
may cause a segmentation fault instead of geneneratin tha error
.BR EINVAL .
.SH SEE ALSO
.PP
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio (7),
.BR time (7)
.\" .SH AUTHOR
.\" Kent Yoder.
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
