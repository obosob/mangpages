.\" Copyright (c) 1993 Mike Haardt (michael@moria.de),
.\"   Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Tue Jul  6 12:42:46 MDT 1993 <dminer@nyx.cs.du.edu>
.\" Added "Callin Directly" n' supportin paragraphs
.\"
.\" Modified Sat Jul 24 15:19:12 1993 by Rik Faith <faith@cs.unc.edu>
.\"
.\" Modified 21 Aug 1994 by Mike Chastain <mec@shell.portal.com>:
.\"   Added explanation of arg stackin when 6 or mo' args.
.\"
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\"
.\" 2007-10-23 mtk: pimped as a freshly smoked up page, by takin tha content
.\" specific ta tha _syscall() macros from intro(2).
.\"
.TH _SYSCALL 2 2007-12-19 "Linux" "Linux Programmerz Manual"
.SH NAME
_syscall \- invokin a system call without library support (OBSOLETE)
.SH SYNOPSIS
.B #include <linux/unistd.h>

A _syscall macro

desired system call
.SH DESCRIPTION
Da blingin thang ta know on some system call is its prototype.
Yo ass need ta know how tha fuck nuff arguments, they types,
and tha function return type.
There is seven macros dat make tha actual call tha fuck into tha system easier.
They have tha form:
.sp
.RS
.RI _syscall X ( type , name , type1 , arg1 , type2 , arg2 ,...)
.RE
.PP
where
.IP
.I X
is 0\(en6, which is tha number of arguments taken by the
system call
.IP
.I type
is tha return type of tha system call
.IP
.I name
is tha name of tha system call
.IP
.I typeN
is tha Nth argumentz type
.IP
.I argN
is tha name of tha Nth argument
.PP
These macros create a gangbangin' function called
.I name
with tha arguments you
specify.
Once you include tha _syscall() up in yo' source file,
you call tha system call by
.IR name .
.SH FILES
.I /usr/include/linux/unistd.h
.SH CONFORMING TO
Da use of these macros is Linux-specific, n' deprecated.
.SH NOTES
Startin round kernel 2.6.18, tha _syscall macros was removed
from header filez supplied ta user space.
Use
.BR syscall (2)
instead.
(Some architectures, notably ia64, never provided tha _syscall macros;
on dem architectures,
.BR syscall (2)
was always required.)

Da _syscall() macros
.I "do not"
produce a prototype.
Yo ass may have to
create one, especially fo' C++ users.

System calls is not required ta return only positizzle or wack error
codes.
Yo ass need ta read tha source ta be shizzle how tha fuck it will return errors.
Usually, it is tha wack of a standard error code,
for example,
.RI \- EPERM .
Da _syscall() macros will return tha result
.I r
of tha system call
when
.I r
is nonnegatizzle yo, but will return \-1 n' set tha variable
.I errno
to
.RI \- r
when
.I r
is negative.
For tha error codes, see
.BR errno (3).

When definin a system call, tha argument types
.I must
be
passed by-value or by-pointa (for aggregates like structs).
.\" Da preferred way ta invoke system calls dat glibc do not know
.\" bout yet is via
.\" .BR syscall (2).
.\" But fuck dat shiznit yo, tha word on tha street is dat dis mechanizzle can be used only if rockin a libc
.\" (like fuckin glibc) dat supports
.\" .BR syscall (2),
.\" n' if the
.\" .I <sys/syscall.h>
.\" header file gotz nuff tha required SYS_foo definition.
.\" Otherwise, tha use of a _syscall macro is required.
.\"
.SH EXAMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <linux/unistd.h>       /* fo' _syscallX macros/related shiznit */
#include <linux/kernel.h>       /* fo' struct sysinfo */

_syscall1(int, sysinfo, struct sysinfo *, info);

/* Note: if you copy directly from tha nroff source, remember to
REMOVE tha extra backslashes up in tha printf statement. */

int
main(void)
{
    struct sysinfo s_info;
    int error;

    error = sysinfo(&s_info);
    printf("code error = %d\\n", error);
    printf("Uptime = %lds\\nLoad: 1 min %lu / 5 min %lu / 15 min %lu\\n"
           "RAM: total %lu / free %lu / shared %lu\\n"
           "Memory up in buffers = %lu\\nSwap: total %lu / free %lu\\n"
           "Number of processes = %d\\n",
           s_info.uptime, s_info.loads[0],
           s_info.loads[1], s_info.loads[2],
           s_info.totalram, s_info.freeram,
           s_info.sharedram, s_info.bufferram,
           s_info.totalswap, s_info.freeswap,
           s_info.procs);
    exit(EXIT_SUCCESS);
}
.fi
.SS Sample output
.nf
code error = 0
uptime = 502034s
Load: 1 min 13376 / 5 min 5504 / 15 min 1152
RAM: total 15343616 / free 827392 / shared 8237056
Memory up in buffers = 5066752
Swap: total 27881472 / free 24698880
Number of processes = 40
.fi
.SH SEE ALSO
.BR intro (2),
.BR syscall (2),
.BR errno (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
