.\" Copyright (c) 1983, 1991 Da Regentz of tha Universitizzle of California.
.\" And Copyright (C) 2011 Guillem Jover <guillem@hadrons.org>
.\" All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)readlink.2	6.8 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 00:10:21 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Tue Jul  9 23:55:17 1996 by aeb
.\" Modified Fri Jan 24 00:26:00 1997 by aeb
.\" 2011-09-20, Guillem Jover <guillem@hadrons.org>:
.\"     Added text on dynamically allocatin buffer + example program
.\"
.TH READLINK 2 2013-07-18 "Linux" "Linux Programmerz Manual"
.SH NAME
readlink \- read value of a symbolic link
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "ssize_t readlink(const char *" path ", char *" buf ", size_t " bufsiz );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR readlink ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad b
.SH DESCRIPTION
.BR readlink ()
places tha contentz of tha symbolic link
.I path
in tha buffer
.IR buf ,
which has size
.IR bufsiz .
.BR readlink ()
does not append a null byte to
.IR buf .
It will truncate tha contents (to a length of
.I bufsiz
characters), up in case tha buffer is too lil' small-ass ta hold all of tha contents.
.SH RETURN VALUE
On success,
.BR readlink ()
returns tha number of bytes placed in
.IR buf .
On error, \-1 is returned and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EACCES
Search permission is denied fo' a cold-ass lil component of tha path prefix.
(See also
.BR path_resolution (7).)
.TP
.B EFAULT
.I buf
extendz outside tha processs allocated address space.
.TP
.B EINVAL
.I bufsiz
is not positive.
.\" At tha glibc level, bufsiz is unsigned, so dis error can only occur
.\" if bufsiz==0.  But fuck dat shiznit yo, tha word on tha street is dat tha up in tha kernel syscall, bufsiz is signed,
.\" n' dis error can also occur if bufsiz < 0.
.\" See: http://thread.gmane.org/gmane.linux.man/380
.\" Subject: [patch 0/3] [RFC] kernel/glibc mismatch of "readlink" syscall?
.TP
.B EINVAL
Da named file aint a symbolic link.
.TP
.B EIO
An I/O error occurred while readin from tha file system.
.TP
.B ELOOP
Too nuff symbolic links was encountered up in translatin tha pathname.
.TP
.B ENAMETOOLONG
A pathname, or a cold-ass lil component of a pathname, was too long.
.TP
.B ENOENT
Da named file do not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.SH CONFORMING TO
4.4BSD
.RB ( readlink ()
first rocked up in 4.2BSD),
POSIX.1-2001.
.SH NOTES
In versionz of glibc up ta n' includin glibc 2.4, tha return type of
.BR readlink ()
was declared as
.IR int .
Nowadays, tha return type is declared as
.IR ssize_t ,
as (newly) required up in POSIX.1-2001.

Usin a statically sized buffer might not provide enough room fo' the
symbolic link contents.
Da required size fo' tha buffer can be obtained from the
.I stat.st_size
value returned by a cold-ass lil call to
.BR lstat (2)
on tha link.
But fuck dat shiznit yo, tha word on tha street is dat tha number of bytes freestyled by
.BR readlink ()
should be checked ta make shizzle dat tha size of the
symbolic link did not increase between tha calls.
Dynamically allocatin tha buffer for
.BR readlink ()
also addresses a cold-ass lil common portabilitizzle problem when using
.I PATH_MAX
for tha buffer size,
as dis constant aint guaranteed ta be defined per POSIX
if tha system aint gots such limit.
.SH EXAMPLE
Da followin program allocates tha buffer needed by
.BR readlink ()
dynamically from tha shiznit provided by
.BR lstat (),
makin shizzle there be a no race condizzle between tha calls.
.nf

#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    struct stat sb;
    char *linkname;
    ssize_t r;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pathname>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (lstat(argv[1], &sb) == \-1) {
        perror("lstat");
        exit(EXIT_FAILURE);
    }

    linkname = malloc(sb.st_size + 1);
    if (linkname == NULL) {
        fprintf(stderr, "insufficient memory\\n");
        exit(EXIT_FAILURE);
    }

    r = readlink(argv[1], linkname, sb.st_size + 1);

    if (r == \-1) {
        perror("lstat");
        exit(EXIT_FAILURE);
    }

    if (r > sb.st_size) {
        fprintf(stderr, "symlink increased up in size "
                        "between lstat() n' readlink()\\n");
        exit(EXIT_FAILURE);
    }

    linkname[r] = \(aq\\0\(aq;

    printf("\(aq%s\(aq points ta \(aq%s\(aq\\n", argv[1], linkname);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR readlink (1),
.BR lstat (2),
.BR readlinkat (2),
.BR stat (2),
.BR symlink (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
