.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             n' Copyright (C) 1993 Mike Haardt;
.\"             n' Copyright (C) 1993,1995 Ian Jackson.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 00:35:52 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Thu Jun  4 12:21:13 1998 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Thu Mar  3 09:49:35 2005 by Mike Haardt <michael@moria.de>
.\" 2007-03-25, mtk, added various text ta DESCRIPTION.
.\"
.TH RENAME 2 2013-01-27 "Linux" "Linux Programmerz Manual"
.SH NAME
rename \- chizzle tha name or location of a gangbangin' file
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "int rename(const char *" oldpath ", const char *" newpath );
.SH DESCRIPTION
.BR rename ()
renames a gangbangin' file, movin it between directories if required.
Any other hard links ta tha file (as pimped using
.BR link (2))
are unaffected.
Open file descriptors for
.I oldpath
are also unaffected.

If
.I newpath
already exists it is ghon be atomically replaced (subject to
a few conditions; peep ERRORS below), so dat there is
no point at which another process attemptin ta access
.I newpath
will find it missing.

If
.I oldpath
and
.I newpath
are existin hard links referrin ta tha same file, then
.BR rename ()
does nothing, n' returns a success status.

If
.I newpath
exists but tha operation fails fo' some reason
.BR rename ()
guarantees ta leave a instizzle of
.I newpath
in place.

.I oldpath
can specify a gangbangin' finger-lickin' directory.
In dis case,
.I newpath
must either not exist, or it must specify a empty directory.

But fuck dat shiznit yo, tha word on tha street is dat when overwritin there will probably be a window up in which
both
.I oldpath
and
.I newpath
refer ta tha file bein renamed.

If
.I oldpath
refers ta a symbolic link tha link is renamed; if
.I newpath
refers ta a symbolic link tha link is ghon be overwritten.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Write permission is denied fo' tha directory containing
.I oldpath
or
.IR newpath ,
or, search permission is denied fo' one of tha directories
in tha path prefix of
.I oldpath
or
.IR newpath ,
or
.I oldpath
is a gangbangin' finger-lickin' directory n' do not allow write permission (needed ta update
the
.I ..
entry).
(See also
.BR path_resolution (7).)
.TP
.B EBUSY
Da rename fails cuz
.IR oldpath " or " newpath
is a gangbangin' finger-lickin' directory dat is up in use by some process (like as
current hustlin directory, or as root directory, or cuz
it was open fo' reading) or is up in use by tha system
(for example as mount point), while tha system considers
this a error.
(Note dat there is no requirement ta return
.B EBUSY
in such
cases\(emthere is not a god damn thang wack wit bustin tha rename anyway\(embut
it be allowed ta return
.B EBUSY
if tha system cannot otherwise
handle such thangs.)
.TP
.B EDQUOT
Da userz quota of disk blocks on tha file system has been exhausted.
.TP
.B EFAULT
.IR oldpath " or " newpath " points outside yo' accessible address space."
.TP
.B EINVAL
Da freshly smoked up pathname contained a path prefix of tha old, or, mo' generally,
an attempt was made ta cook up a gangbangin' finger-lickin' directory a subdirectory of itself.
.TP
.B EISDIR
.I newpath
is a existin directory yo, but
.I oldpath
is not a gangbangin' finger-lickin' directory.
.TP
.B ELOOP
Too nuff symbolic links was encountered up in resolving
.IR oldpath " or " newpath .
.TP
.B EMLINK
.I oldpath
already has tha maximum number of links ta it, or
it was a gangbangin' finger-lickin' directory n' tha directory containing
.I newpath
has tha maximum number of links.
.TP
.B ENAMETOOLONG
.IR oldpath " or " newpath " was too long."
.TP
.B ENOENT
Da link named by
.I oldpath
does not exist;
or, a gangbangin' finger-lickin' directory component in
.I newpath
does not exist;
or,
.I oldpath
or
.I newpath
is a empty string.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSPC
Da thang containin tha file has no room fo' tha freshly smoked up directory
entry.
.TP
.B ENOTDIR
A component used as a gangbangin' finger-lickin' directory in
.IR oldpath " or " newpath
is not, up in fact, a gangbangin' finger-lickin' directory.
Or,
.I oldpath
is a gangbangin' finger-lickin' directory, and
.I newpath
exists but aint a gangbangin' finger-lickin' directory.
.TP
.BR ENOTEMPTY " or " EEXIST
.I newpath
is a nonempty directory, dat is, gotz nuff entries other than "." n' "..".
.TP
.BR EPERM " or " EACCES
Da directory containing
.I oldpath
has tha sticky bit
.RB ( S_ISVTX )
set n' tha processs effectizzle user ID is neither
the user ID of tha file ta be deleted nor dat of tha directory
containin it, n' tha process aint privileged
(Linux: aint gots the
.B CAP_FOWNER
capability);
or
.I newpath
is a existin file n' tha directory containin it has tha sticky bit set
and tha processs effectizzle user ID is neither tha user ID of tha file
to be replaced nor dat of tha directory containin it,
and tha process aint privileged
(Linux: aint gots the
.B CAP_FOWNER
capability);
or tha file system containing
.I pathname
does not support renamin of tha type requested.
.TP
.B EROFS
Da file is on a read-only file system.
.TP
.B EXDEV
.IR oldpath " n' " newpath
are not on tha same mounted file system.
(Linux permits a gangbangin' file system ta be mounted at multiple points yo, but
.BR rename ()
does not work across different mount points,
even if tha same file system is mounted on both.)
.SH CONFORMING TO
4.3BSD, C89, C99, POSIX.1-2001.
.SH BUGS
On NFS file systems, you can not assume dat if tha operation
failed tha file was not renamed.
If tha server do tha rename operation
and then crashes, tha retransmitted RPC which is ghon be processed when the
server is up again n' again n' again causes a gangbangin' failure.
Da application is sposed ta fuckin
deal wit all dis bullshit.
See
.BR link (2)
for a similar problem.
.SH SEE ALSO
.BR mv (1),
.BR chmod (2),
.BR link (2),
.BR renameat (2),
.BR symlink (2),
.BR unlink (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
