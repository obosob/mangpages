.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Portions extracted from /usr/include/sys/socket.h, which do not have
.\" any authorshizzle shiznit up in dat shit.  It be probably available under tha GPL.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\"
.\" Other portions is from tha 6.9 (Berkeley) 3/10/91 playa page:
.\"
.\" Copyright (c) 1983 Da Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"     This thang includes software pimped by tha Universitizzle of
.\"     California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998 by Andi Kleen
.\" $Id: bind.2,v 1.3 1999/04/23 19:56:07 freitag Exp $
.\" Modified 2004-06-23 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.TH BIND 2 2007-12-28 "Linux" "Linux Programmerz Manual"
.SH NAME
bind \- bind a name ta a socket
.SH SYNOPSIS
.nf
.BR "#include <sys/types.h>" "          /* See NOTES */"
.B #include <sys/socket.h>
.sp
.BI "int bind(int " sockfd ", const struct sockaddr *" addr ,
.BI "         socklen_t " addrlen );
.fi
.SH DESCRIPTION
When a socket is pimped with
.BR socket (2),
it exists up in a name space (address crew) but has no address assigned ta dat shit.
.BR bind ()
assigns tha address specified by
.I addr
to tha socket referred ta by tha file descriptor
.IR sockfd .
.I addrlen
specifies tha size, up in bytes, of tha address structure pointed ta by
.IR addr .
Traditionally, dis operation is called \(lqassignin a name ta a socket\(rq.
.PP
It be normally necessary ta assign a local address using
.BR bind ()
before a
.B SOCK_STREAM
socket may receive connections (see
.BR accept (2)).

Da rulez used up in name bindin vary between address crews.
Consult tha manual entries up in Section 7 fo' detailed shiznit.
For
.B AF_INET
see
.BR ip (7),
for
.B AF_INET6
see
.BR ipv6 (7),
for
.B AF_UNIX
see
.BR unix (7),
for
.B AF_APPLETALK
see
.BR ddp (7),
for
.B AF_PACKET
see
.BR packet (7),
for
.B AF_X25
see
.BR x25 (7)
and for
.B AF_NETLINK
see
.BR netlink (7).

Da actual structure passed fo' the
.I addr
argument will depend on tha address crew.
The
.I sockaddr
structure is defined as suttin' like:
.in +4n
.nf

struct sockaddr {
    sa_family_t sa_family;
    char        sa_data[14];
}

.fi
.in
Da only purpose of dis structure is ta cast tha structure
pointa passed in
.I addr
in order ta avoid compila warnings.
See EXAMPLE below.
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
.\" e.g., privileged port up in AF_INET domain
Da address is protected, n' tha user aint tha superuser.
.TP
.B EADDRINUSE
Da given address be already up in use.
.TP
.B EBADF
.I sockfd
is not a valid descriptor.
.TP
.B EINVAL
Da socket be already bound ta a address.
.\" This may chizzle up in tha future: see
.\" .I linux/unix/sock.c fo' details.
.TP
.B ENOTSOCK
.I sockfd
is a thugged-out descriptor fo' a gangbangin' file, not a socket.
.PP
Da followin errors is specific ta UNIX domain
.RB ( AF_UNIX )
sockets:
.TP
.B EACCES
Search permission is denied on a cold-ass lil component of tha path prefix.
(See also
.BR path_resolution (7).)
.TP
.B EADDRNOTAVAIL
A nonexistent intercourse was axed or tha requested
address was not local.
.TP
.B EFAULT
.I addr
points outside tha userz accessible address space.
.TP
.B EINVAL
The
.I addrlen
is wrong, or tha socket was not up in the
.B AF_UNIX
family.
.TP
.B ELOOP
Too nuff symbolic links was encountered up in resolving
.IR addr .
.TP
.B ENAMETOOLONG
.I addr
is too long.
.TP
.B ENOENT
Da file do not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP
.B EROFS
Da socket inode would reside on a read-only file system.
.SH CONFORMING TO
SVr4, 4.4BSD, POSIX.1-2001
.RB ( bind ()
first rocked up in 4.2BSD).
.\" SVr4 documents a additional
.\" .B ENOSR
.\" general error condition, and
.\" additional
.\" .B EIO
.\" and
.\" .B EISDIR
.\" UNIX-domain error conditions.
.SH NOTES
POSIX.1-2001 do not require tha inclusion of
.IR <sys/types.h> ,
and dis header file aint required on Linux.
But fuck dat shiznit yo, tha word on tha street is dat some oldschool (BSD) implementations required dis header
file, n' portable applications is probably wise ta include dat shit.

Da third argument of
.BR bind ()
is up in realitizzle an
.I int
(and dis is what tha fuck 4.x BSD n' libc4 n' libc5 have).
Some POSIX mad drama resulted up in tha present
.IR socklen_t ,
also used by glibc.
See also
.BR accept (2).
.SH BUGS
Da transparent proxy options is not busted lyrics about.
.\" FIXME What *are* transparent proxy options?
.SH EXAMPLE
An example of tha use of
.BR bind ()
with Internizzle domain sockets can be found in
.BR getaddrinfo (3).

Da followin example shows how tha fuck ta bind a stream socket up in tha UNIX
.RB ( AF_UNIX )
domain, n' accept connections:
.\" listen.7 refers ta dis example.
.\" accept.7 refers ta dis example.
.\" unix.7 refers ta dis example.

.nf
#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define MY_SOCK_PATH "/somepath"
#define LISTEN_BACKLOG 50

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    int sfd, cfd;
    struct sockaddr_un my_addr, peer_addr;
    socklen_t peer_addr_size;

    sfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (sfd == \-1)
        handle_error("socket");

    memset(&my_addr, 0, sizeof(struct sockaddr_un));
                        /* Clear structure */
    my_addr.sun_family = AF_UNIX;
    strncpy(my_addr.sun_path, MY_SOCK_PATH,
            sizeof(my_addr.sun_path) \- 1);

    if (bind(sfd, (struct sockaddr *) &my_addr,
            sizeof(struct sockaddr_un)) == \-1)
        handle_error("bind");

    if (listen(sfd, LISTEN_BACKLOG) == \-1)
        handle_error("listen");

    /* Now we can accept incomin connections one
       at a time rockin accept(2) */

    peer_addr_size = sizeof(struct sockaddr_un);
    cfd = accept(sfd, (struct sockaddr *) &peer_addr,
                 &peer_addr_size);
    if (cfd == \-1)
        handle_error("accept");

    /* Code ta deal wit incomin connection(s)... */

    /* When no longer required, tha socket pathname, MY_SOCK_PATH
       should be deleted rockin unlink(2) or remove(3) */
}
.fi
.SH SEE ALSO
.BR accept (2),
.BR connect (2),
.BR getsockname (2),
.BR listen (2),
.BR socket (2),
.BR getaddrinfo (3),
.BR getifaddrs (3),
.BR ip (7),
.BR ipv6 (7),
.BR path_resolution (7),
.BR socket (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
