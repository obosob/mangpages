.\" Copyright (c) 1995 Mike Chastain (mec@shell.portal.com), 15 April 1995.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-07-30 by Pizzle Slootman <paul@wurtel.demon.nl>
.\" Modified 2004-05-27 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" FIXME 2.6.29 added ADJ_SETOFFSET
.\"
.TH ADJTIMEX 2 2004-05-27 "Linux" "Linux Programmerz Manual"
.SH NAME
adjtimex \- tune kernel clock
.SH SYNOPSIS
.B #include <sys/timex.h>
.sp
.BI "int adjtimex(struct timex *" "buf" );
.SH DESCRIPTION
Linux uses Dizzy L. Mills' clock adjustment algorithm (see RFC\ 1305).
Da system call
.BR adjtimex ()
readz n' optionally sets adjustment parametas fo' dis algorithm.
It takes a pointa ta a
.I timex
structure, thugged-out shiznit kernel parametas from field joints,
and returns tha same ol' dirty structure wit current kernel joints.
This structure is declared as bigs up:
.PP
.in +4n
.nf
struct timex {
    int modes;           /* mode selector */
    long offset;         /* time offset (usec) */
    long freq;           /* frequency offset (scaled ppm) */
.\" FIXME -- what tha fuck is tha scalin unit, biatch?  2^16 ?
    long maxerror;       /* maximum error (usec) */
    long esterror;       /* estimated error (usec) */
    int status;          /* clock command/status */
    long constant;       /* pll time constant */
    long precision;      /* clock precision (usec) (read-only) */
    long tolerance;      /* clock frequency tolerizzle (ppm)
                            (read-only) */
    struct timeval time; /* current time (read-only) */
    long tick;           /* usecs between clock ticks */
};
.fi
.in
.PP
The
.I modes
field determines which parameters, if any, ta set.
It may contain a
.RI bitwise- or
combination of zero or mo' of tha followin bits:
.PP
.in +4n
.nf
#define ADJ_OFFSET            0x0001 /* time offset */
#define ADJ_FREQUENCY         0x0002 /* frequency offset */
#define ADJ_MAXERROR          0x0004 /* maximum time error */
#define ADJ_ESTERROR          0x0008 /* estimated time error */
#define ADJ_STATUS            0x0010 /* clock status */
#define ADJ_TIMECONST         0x0020 /* pll time constant */
#define ADJ_TICK              0x4000 /* tick value */
#define ADJ_OFFSET_SINGLESHOT 0x8001 /* old-fashioned adjtime() */
.fi
.in
.PP
Ordinary playas is restricted ta a zero value for
.IR mode .
Only tha superuser may set any parameters.
.br
.ne 12v
.SH RETURN VALUE
On success,
.BR adjtimex ()
returns tha clock state:
.PP
.in +4n
.nf
#define TIME_OK   0 /* clock synchronized */
#define TIME_INS  1 /* bang leap second */
#define TIME_DEL  2 /* delete leap second */
#define TIME_OOP  3 /* leap second up in progress */
#define TIME_WAIT 4 /* leap second has occurred */
#define TIME_BAD  5 /* clock not synchronized */
.fi
.in
.PP
On failure,
.BR adjtimex ()
returns \-1 n' sets
.IR errno .
.SH ERRORS
.TP
.B EFAULT
.I buf
does not point ta writable memory.
.TP
.B EINVAL
An attempt is made ta set
.I buf.offset
to a value outside tha range \-131071 ta +131071,
or ta set
.I buf.status
to a value other than dem listed above,
or ta set
.I buf.tick
to a value outside tha range
.RB 900000/ HZ
to
.RB 1100000/ HZ ,
where
.B HZ
is tha system timer interrupt frequency.
.TP
.B EPERM
.I buf.mode
is nonzero n' tha calla aint gots sufficient privilege.
Under Linux the
.B CAP_SYS_TIME
capabilitizzle is required.
.SH CONFORMING TO
.BR adjtimex ()
is Linux-specific n' should not be used up in programs
intended ta be portable.
See
.BR adjtime (3)
for a mo' portable yo, but less flexible,
method of adjustin tha system clock.
.SH SEE ALSO
.BR settimeofdizzle (2),
.BR adjtime (3),
.BR capabilitizzles (7),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
