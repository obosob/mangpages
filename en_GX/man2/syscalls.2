
.\" wit some input from Stepan Kasal <kasal@ucw.cz>
.\"
.\" Some content retained from a earlier version of dis page:
.\" Copyright (C) 1998 Andries Brouwer (aeb@cwi.nl)
.\" Modifications fo' 2.2 n' 2.4 Copyright (C) 2002 Ian Redfern
.\" <redferni@logica.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH SYSCALLS 2 2013-04-17 "Linux" "Linux Programmerz Manual"
.SH NAME
syscalls \- Linux system calls
.SH SYNOPSIS
Linux system calls.
.SH DESCRIPTION
Da system call is tha fundamenstrual intercourse between a application
and tha Linux kernel.
.SS System calls n' library wrapper functions
System calls is generally not invoked directly,
but rather via wrapper functions up in glibc (or like some other library).
For detailz of direct invocation of a system call, see
.BR intro (2).
Often yo, but not always, tha name of tha wrapper function is tha same
as tha name of tha system call dat it invokes.
For example, glibc gotz nuff a gangbangin' function
.BR truncate ()
which invokes tha underlyin "truncate" system call.

Often tha glibc wrapper function is like thin, bustin lil work
other than copyin arguments ta tha right registers
before invokin tha system call,
and then setting
.I errno
appropriately afta tha system call has returned.
(These is tha same steps dat is performed by
.BR syscall (2),
which can be used ta invoke system calls
for which no wrapper function is provided.)
Note: system calls indicate a gangbangin' failure by returnin a wack error
number ta tha caller;
when dis happens,
the wrapper function negates tha returned error number
(to make it positive), copies it to
.IR errno ,
and returns \-1 ta tha calla of tha wrapper.

Sometimes, however, tha wrapper function do some extra work
before invokin tha system call.
For example, nowadays there be (for reasons busted lyrics bout below) two
related system calls,
.BR truncate (2)
and
.BR truncate64 (2),
and tha glibc
.BR truncate ()
wrapper function checks which of dem system calls
are provided by tha kernel n' determines which should be employed.
.SS System call list
Below be a list of tha Linux system calls.
In tha list, the
.I Kernel
column indicates tha kernel version
for dem system calls dat was freshly smoked up in Linux 2.2,
or have rocked up since dat kernel version.
Note tha followin points:
.IP * 3
Where no kernel version is indicated,
the system call rocked up in kernel 1.0 or earlier.
.IP *
Where a system call is marked "1.2"
this means tha system call probably rocked up in a 1.1.x kernel version,
and first rocked up in a stable kernel wit 1.2.
(Development of tha 1.2 kernel was initiated from a funky-ass branch of kernel
1.0.6 via tha 1.1.x unstable kernel series.)
.IP *
Where a system call is marked "2.0"
this means tha system call probably rocked up in a 1.3.x kernel version,
and first rocked up in a stable kernel wit 2.0.
(Development of tha 2.0 kernel was initiated from a funky-ass branch of kernel
1.2.x, somewhere round 1.2.10,
via tha 1.3.x unstable kernel series.)
.\" Was kernel 2.0 started from a funky-ass branch of 1.2.10?
.\" At least from tha timestampz of tha tarballs of
.\" of 1.2.10 n' 1.3.0, thatz how tha fuck it looks yo, but in
.\" fact tha diff don't seem straight-up clear, the
.\" 1.3.0 .tar.bz is much bigger (2.0 MB) than the
.\" 1.2.10 .tar.bz2 (1.8 MB), n' AEB points up the
.\" timestampz of some filez up in 1.3.0 seem ta be older
.\" than dem up in 1.2.10.  All of dis suggests
.\" dat there might not done been a cold-ass lil clean branch point.
.IP *
Where a system call is marked "2.2"
this means tha system call probably rocked up in a 2.1.x kernel version,
and first rocked up in a stable kernel wit 2.2.0.
(Development of tha 2.2 kernel was initiated from a funky-ass branch of kernel
2.0.21 via tha 2.1.x unstable kernel series.)
.IP *
Where a system call is marked "2.4"
this means tha system call probably rocked up in a 2.3.x kernel version,
and first rocked up in a stable kernel wit 2.4.0.
(Development of tha 2.4 kernel was initiated from a funky-ass branch of
kernel 2.2.8 via tha 2.3.x unstable kernel series.)
.IP *
Where a system call is marked "2.6"
this means tha system call probably rocked up in a 2.5.x kernel version,
and first rocked up in a stable kernel wit 2.6.0.
(Development of kernel 2.6 was initiated from a funky-ass branch
of kernel 2.4.15 via tha 2.5.x unstable kernel series.)
.IP *
Startin wit kernel 2.6.0, tha pimpment model chizzled,
and freshly smoked up system calls may step tha fuck up in each 2.6.x release.
In dis case, tha exact version number where tha system call rocked up
is shown.
This convention continues wit tha 3.x kernel series,
which followed on from kernel 2.6.39.
.IP *
In some cases, a system call was added ta a stable kernel
series afta it branched from tha previous stable kernel
series, n' then backported tha fuck into tha earlier stable kernel series.
For example some system calls dat rocked up in 2.6.x was also backported
into a 2.4.x release afta 2.4.15.
When dis is so, tha version where tha system call rocked up
in both of tha major kernel series is listed.
.PP
Da list of system calls dat is available as at kernel 3.9
(or up in all dem cases only on olda kernels) be as bigs up:
.\"
.\" Lookin at scripts/checksyscalls.sh up in tha kernel source is
.\" instructizzle bout x86 specifics.
.\"
.ad l
.TS
l l l
---
l l l.
\fBSystem call\fP	\fBKernel\fP	\fBNotes\fP

\fB_llseek\fP(2)	1.2
\fB_newselect\fP(2)	2.0
\fB_sysctl\fP(2)	2.0
\fBaccept\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBaccept4\fP(2)	2.6.28
\fBaccess\fP(2)	1.0
\fBacct\fP(2)	1.0
\fBadd_key\fP(2)	2.6.11
\fBadjtimex\fP(2)	1.0
\fBalarm\fP(2)	1.0
\fBalloc_hugepages\fP(2)	2.5.36	Removed up in 2.5.44
\fBbdflush\fP(2)	1.2	T{
Deprecated (does nothing)
.br
since 2.6
T}
\fBbind\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBbrk\fP(2)	1.0
\fBcacheflush\fP(2)	1.2	Not on x86
\fBcapget\fP(2)	2.2
\fBcapset\fP(2)	2.2
\fBchdir\fP(2)	1.0
\fBchmod\fP(2)	1.0
\fBchown\fP(2)	2.2	T{
See \fBchown\fP(2) for
.br
version details
T}
\fBchown32\fP(2)	2.4
\fBchroot\fP(2)	1.0
\fBclock_adjtime\fP(2)	2.6.39
\fBclock_getres\fP(2)	2.6
\fBclock_gettime\fP(2)	2.6
\fBclock_nanosleep\fP(2)	2.6
\fBclock_settime\fP(2)	2.6
\fBclone\fP(2)	1.0
\fBclose\fP(2)	1.0
\fBconnect\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBcreat\fP(2)	1.0
\fBcreate_module\fP(2)		Removed up in 2.6
\fBdelete_module\fP(2)	1.0
\fBdup\fP(2)	1.0
\fBdup2\fP(2)	1.0
\fBdup3\fP(2)	2.6.27
\fBepoll_create\fP(2)	2.6
\fBepoll_create1\fP(2)	2.6.27
\fBepoll_ctl\fP(2)	2.6
\fBepoll_pwait\fP(2)	2.6.19
\fBepoll_wait\fP(2)	2.6
\fBeventfd\fP(2)	2.6.22
\fBeventfd2\fP(2)	2.6.27
\fBexecve\fP(2)	1.0
\fBexit\fP(2)	1.0
\fBexit_group\fP(2)	2.6
\fBfaccessat\fP(2)	2.6.16
\fBfadvise64\fP(2)	2.6
.\" Implements \fBposix_fadvise\fP(2)
\fBfadvise64_64\fP(2)	2.6
\fBfallocate\fP(2)	2.6.23
\fBfanotify_init\fP(2)	2.6.37
\fBfanotify_mark\fP(2)	2.6.37
.\" Da fanotify calls was added up in Linux 2.6.36,
.\" but disabled while tha API was finalized.
\fBfchdir\fP(2)	1.0
\fBfchmod\fP(2)	1.0
\fBfchmodat\fP(2)	2.6.16
\fBfchown\fP(2)	1.0
\fBfchown32\fP(2)	2.4
\fBfchownat\fP(2)	2.6.16
\fBfcntl\fP(2)	1.0
\fBfcntl64\fP(2)	2.4
\fBfdatasync\fP(2)	2.0
\fBfgetxattr\fP(2)	2.6; 2.4.18
\fBfinit_module\fP(2)	3.8
\fBflistxattr\fP(2)	2.6; 2.4.18
\fBflock\fP(2)	2.0
\fBfork\fP(2)	1.0
\fBfree_hugepages\fP(2)	2.5.36	Removed up in 2.5.44
\fBfremovexattr\fP(2)	2.6; 2.4.18
\fBfsetxattr\fP(2)	2.6; 2.4.18
\fBfstat\fP(2)	1.0
\fBfstat64\fP(2)	2.4
\fBfstatat64\fP(2)	2.6.16
\fBfstatfs\fP(2)	1.0
\fBfstatfs64\fP(2)	2.6
\fBfsync\fP(2)	1.0	1.0
\fBftruncate\fP(2)	1.0
\fBftruncate64\fP(2)	2.4
\fBfutex\fP(2)	2.6
\fBfutimesat\fP(2)	2.6.16
\fBget_kernel_syms\fP(2)		Removed up in 2.6
\fBget_mempolicy\fP(2)	2.6.6
\fBget_robust_list\fP(2)	2.6.17
\fBget_thread_area\fP(2)	2.6
\fBgetcpu\fP(2)	2.6.19
\fBgetcwd\fP(2)	2.2
\fBgetdents\fP(2)	2.0
\fBgetdents64\fP(2)	2.4
\fBgetegid\fP(2)	1.0
\fBgetegid32\fP(2)	2.4
\fBgeteuid\fP(2)	1.0
\fBgeteuid32\fP(2)	2.4
\fBgetgid\fP(2)	1.0
\fBgetgid32\fP(2)	2.4
\fBgetgroups\fP(2)	1.0
\fBgetgroups32\fP(2)	2.4
\fBgetitimer\fP(2)	1.0
\fBgetpeername\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBgetpagesize\fP(2)	2.0	Not on x86
\fBgetpgid\fP(2)	1.0
\fBgetpgrp\fP(2)	1.0
\fBgetpid\fP(2)	1.0
\fBgetppid\fP(2)	1.0
\fBgetpriority\fP(2)	1.0
\fBgetresgid\fP(2)	2.2
\fBgetresgid32\fP(2)	2.4
\fBgetresuid\fP(2)	2.2
\fBgetresuid32\fP(2)	2.4
\fBgetrlimit\fP(2)	1.0
\fBgetrusage\fP(2)	1.0
\fBgetsid\fP(2)	2.0
\fBgetsockname\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBgetsockopt\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBgettid\fP(2)	2.4.11
\fBgettimeofday\fP(2)	1.0
\fBgetuid\fP(2)	1.0
\fBgetuid32\fP(2)	2.4
.\" \fBgetunwind\fP(2)	2.4.8	ia64; DEPRECATED
\fBgetxattr\fP(2)	2.6; 2.4.18
\fBinit_module\fP(2)	1.0
\fBinotify_add_watch\fP(2)	2.6.13
\fBinotify_init\fP(2)	2.6.13
\fBinotify_init1\fP(2)	2.6.27
\fBinotify_rm_watch\fP(2)	2.6.13
\fBio_cancel\fP(2)	2.6
\fBio_destroy\fP(2)	2.6
\fBio_getevents\fP(2)	2.6
\fBio_setup\fP(2)	2.6
\fBio_submit\fP(2)	2.6
\fBioctl\fP(2)	1.0
\fBioperm\fP(2)	1.0
\fBiopl\fP(2)	1.0
\fBioprio_get\fP(2)	2.6.13
\fBioprio_set\fP(2)	2.6.13
\fBipc\fP(2)	1.0
.\" Implements System V IPC calls
\fBkcmp\fP(2)	3.5
\fBkern_features\fP(2)	3.7	Sparc64
\fBkexec_load\fP(2)	2.6.13
.\" Da entry up in tha syscall table was reserved startin up in 2.6.7
.\" Was named sys_kexec_load() from 2.6.7 ta 2.6.16
\fBkeyctl\fP(2)	2.6.11
\fBkill\fP(2)	1.0
\fBlchown\fP(2)	1.0	T{
See \fBchown\fP(2) for
.br
version details
T}
\fBlchown32\fP(2)	2.4
\fBlgetxattr\fP(2)	2.6; 2.4.18
\fBlink\fP(2)	1.0
\fBlinkat\fP(2)	2.6.16
\fBlisten\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBlistxattr\fP(2)	2.6; 2.4.18
\fBllistxattr\fP(2)	2.6; 2.4.18
\fBlookup_dcookie\fP(2)	2.6
\fBlremovexattr\fP(2)	2.6; 2.4.18
\fBlseek\fP(2)	1.0
\fBlsetxattr\fP(2)	2.6; 2.4.18
\fBlstat\fP(2)	1.0
\fBlstat64\fP(2)	2.4
\fBmadvise\fP(2)	2.4
\fBmadvise1\fP(2)	2.4
\fBmbind\fP(2)	2.6.6
.\" \fBmemory_ordering\fP(2)	???	Sparc64
\fBmigrate_pages\fP(2)	2.6.16
\fBmincore\fP(2)	2.4
\fBmkdir\fP(2)	1.0
\fBmkdirat\fP(2)	2.6.16
\fBmknod\fP(2)	1.0
\fBmknodat\fP(2)	2.6.16
\fBmlock\fP(2)	2.0
\fBmlockall\fP(2)	2.0
\fBmmap\fP(2)	1.0
\fBmmap2\fP(2)	2.4
\fBmodify_ldt\fP(2)	1.0
\fBmount\fP(2)	1.0
\fBmove_pages\fP(2)	2.6.18
\fBmprotect\fP(2)	1.0
\fBmq_getsetattr\fP(2)	2.6.6
.\" Implements \fBmq_getattr\fP(3) n' \fBmq_setattr\fP(3)
\fBmq_notify\fP(2)	2.6.6
\fBmq_open\fP(2)	2.6.6
\fBmq_timedreceive\fP(2)	2.6.6
\fBmq_timedsend\fP(2)	2.6.6
\fBmq_unlink\fP(2)	2.6.6
\fBmremap\fP(2)	2.0
\fBmsgctl\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsgget\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsgrcv\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsgsnd\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBmsync\fP(2)	2.0
.\" \fBmultiplexer\fP(2)	??	__NR_multiplexer reserved on
.\"		PowerPC yo, but unimplemented?
\fBmunlock\fP(2)	2.0
\fBmunlockall\fP(2)	2.0
\fBmunmap\fP(2)	1.0
\fBname_to_handle_at\fP(2)	2.6.39
\fBnanosleep\fP(2)	2.0
\fBnfsservctl\fP(2)	2.2	Removed up in 3.1
\fBnice\fP(2)	1.0
\fBoldfstat\fP(2)	1.0
\fBoldlstat\fP(2)	1.0
\fBoldolduname\fP(2)	1.0
\fBoldstat\fP(2)	1.0
\fBolduname\fP(2)	1.0
\fBopen\fP(2)	1.0
\fBopen_by_handle_at\fP(2)	2.6.39
\fBopenat\fP(2)	2.6.16
\fBpause\fP(2)	1.0
\fBpciconfig_iobase\fP(2)	2.2.15; 2.4	Not on x86
.\" Alpha, PowerPC, ARM; not x86
\fBpciconfig_read\fP(2)	2.0.26; 2.2	Not on x86
.\" , PowerPC, ARM; not x86
\fBpciconfig_write\fP(2)	2.0.26; 2.2	Not on x86
.\" , PowerPC, ARM; not x86
\fBperf_event_open\fP(2)	2.6.31	T{
Was called perf_counter_open()
.br
in 2.6.31; renamed up in 2.6.32
T}
\fBpersonality\fP(2)	1.2
\fBperfctr\fP(2)	2.2	Sparc; removed up in 2.6.34
.\"	commit c7d5a0050773e98d1094eaa9f2a1a793fafac300 removed perfctr()
\fBperfmonctl\fP(2)	2.4	ia64
\fBpipe\fP(2)	1.0
\fBpipe2\fP(2)	2.6.27
\fBpivot_root\fP(2)	2.4
\fBpoll\fP(2)	2.0.36; 2.2
\fBppc_rtas\fP(2)		PowerPC only
\fBppoll\fP(2)	2.6.16
\fBprctl\fP(2)	2.2
\fBpread64\fP(2)		T{
Added as "pread" up in 2.2;
.br
renamed "pread64" up in 2.6
T}
\fBpreadv\fP(2)	2.6.30
\fBprlimit\fP(2)	2.6.36
\fBprocess_vm_readv\fP(2)	3.2
\fBprocess_vm_writev\fP(2)	3.2
\fBpselect6\fP(2)	2.6.16
.\" Implements \fBpselect\fP(2)
\fBptrace\fP(2)	1.0
\fBpwrite64\fP(2)		T{
Added as "pwrite" up in 2.2;
.br
renamed "pwrite64" up in 2.6
T}
\fBpwritev\fP(2)	2.6.30
\fBquery_module\fP(2)	2.2	Removed up in 2.6
\fBquotactl\fP(2)	1.0
\fBread\fP(2)	1.0
\fBreadahead\fP(2)	2.4.13
\fBreaddir\fP(2)	1.0
.\" Supersedes \fBgetdents\fP(2)
\fBreadlink\fP(2)	1.0
\fBreadlinkat\fP(2)	2.6.16
\fBreadv\fP(2)	2.0
\fBreboot\fP(2)	1.0
\fBrecv\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBrecvfrom\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBrecvmsg\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBrecvmmsg\fP(2)	2.6.33
\fBremap_file_pages\fP(2)	2.6
\fBremovexattr\fP(2)	2.6; 2.4.18
\fBrename\fP(2)	1.0
\fBrenameat\fP(2)	2.6.16
\fBrequest_key\fP(2)	2.6.11
\fBrestart_syscall\fP(2)	2.6
\fBrmdir\fP(2)	1.0
\fBrt_sigaction\fP(2)	2.2
\fBrt_sigpending\fP(2)	2.2
\fBrt_sigprocmask\fP(2)	2.2
\fBrt_sigqueueinfo\fP(2)	2.2
\fBrt_sigreturn\fP(2)	2.2
\fBrt_sigsuspend\fP(2)	2.2
\fBrt_sigtimedwait\fP(2)	2.2
\fBrt_tgsigqueueinfo\fP(2)	2.6.31
\fBs390_runtime_instr\fP(2)	3.7	s390 only
\fBsched_get_priority_max\fP(2)	2.0
\fBsched_get_priority_min\fP(2)	2.0
\fBsched_getaffinity\fP(2)	2.6
\fBsched_getparam\fP(2)	2.0
\fBsched_getscheduler\fP(2)	2.0
\fBsched_rr_get_interval\fP(2)	2.0
\fBsched_setaffinity\fP(2)	2.6
\fBsched_setparam\fP(2)	2.0
\fBsched_setscheduler\fP(2)	2.0
\fBsched_yield\fP(2)	2.0
\fBselect\fP(2)	1.0
\fBsemctl\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBsemget\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBsemop\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBsemtimedop\fP(2)	2.6; 2.4.22
\fBsend\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsendfile\fP(2)	2.2
\fBsendfile64\fP(2)	2.6; 2.4.19
\fBsendmmsg\fP(2)	3.0
\fBsendmsg\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsendto\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBset_mempolicy\fP(2)	2.6.6
\fBset_robust_list\fP(2)	2.6.17
\fBset_thread_area\fP(2)	2.6
\fBset_tid_address\fP(2)	2.6
.\" See http://lkml.org/lkml/2005/8/1/83
.\" "[PATCH] remove sys_set_zone_reclaim()"
\fBsetdomainname\fP(2)	1.0
\fBsetfsgid\fP(2)	1.2
\fBsetfsgid32\fP(2)	2.4
\fBsetfsuid\fP(2)	1.2
\fBsetfsuid32\fP(2)	2.4
\fBsetgid\fP(2)	1.0
\fBsetgid32\fP(2)	2.4
\fBsetgroups\fP(2)	1.0
\fBsetgroups32\fP(2)	2.4
\fBsethostname\fP(2)	1.0
\fBsetitimer\fP(2)	1.0
\fBsetns\fP(2)	3.0
\fBsetpgid\fP(2)	1.0
\fBsetpriority\fP(2)	1.0
\fBsetregid\fP(2)	1.0
\fBsetregid32\fP(2)	2.4
\fBsetresgid\fP(2)	2.2
\fBsetresgid32\fP(2)	2.4
\fBsetresuid\fP(2)	2.2
\fBsetresuid32\fP(2)	2.4
\fBsetreuid\fP(2)	1.0
\fBsetreuid32\fP(2)	2.4
\fBsetrlimit\fP(2)	1.0
\fBsetsid\fP(2)	1.0
\fBsetsockopt\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsettimeofday\fP(2)	1.0
\fBsetuid\fP(2)	1.0
\fBsetuid32\fP(2)	2.4
\fBsetup\fP(2)		Removed up in 2.2
\fBsetxattr\fP(2)	2.6; 2.4.18
\fBsgetmask\fP(2)	1.0
\fBshmat\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshmctl\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshmdt\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshmget\fP(2)	2.0	See notes on \fBipc\fP(2)
\fBshutdown\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsigaction\fP(2)	1.0
\fBsigaltstack\fP(2)	2.2
\fBsignal\fP(2)	1.0
\fBsignalfd\fP(2)	2.6.22
\fBsignalfd4\fP(2)	2.6.27
\fBsigpending\fP(2)	1.0
\fBsigprocmask\fP(2)	1.0
\fBsigreturn\fP(2)	1.0
\fBsigsuspend\fP(2)	1.0
\fBsocket\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsocketcall\fP(2)	1.0
.\" Implements BSD socket calls
\fBsocketpair\fP(2)	2.0	See notes on \fBsocketcall\fP(2)
\fBsplice\fP(2)	2.6.17
\fBspu_create\fP(2)	2.6.16	PowerPC only
\fBspu_run\fP(2)	2.6.16	PowerPC only
\fBssetmask\fP(2)	1.0
\fBstat\fP(2)	1.0
\fBstat64\fP(2)	2.4
\fBstatfs\fP(2)	1.0
\fBstatfs64\fP(2)	2.6
\fBstime\fP(2)	1.0
\fBsubpage_prot\fP(2)	2.6.25	PowerPC if
		CONFIG_PPC_64K_PAGES
\fBswapoff\fP(2)	1.0
\fBswapon\fP(2)	1.0
\fBsymlink\fP(2)	1.0
\fBsymlinkat\fP(2)	2.6.16
\fBsync\fP(2)	1.0
\fBsync_file_range\fP(2)	2.6.17
\fBsync_file_range2\fP(2)	2.6.22	T{
Architecture-specific
variant of \fBsync_file_range\fP(2)
T}
.\" PowerPC, ARM, tile
.\" First rocked up on ARM, as arm_sync_file_range() yo, but lata renamed
.\" \fBsys_debug_setcontext\fP(2)	???	PowerPC if CONFIG_PPC32
\fBsyncfs\fP(2)	2.6.39
\fBsysfs\fP(2)	1.2
\fBsysinfo\fP(2)	1.0
\fBsyslog\fP(2)	1.0
.\" glibc intercourse is \fBklogctl\fP(3)
\fBtee\fP(2)	2.6.17
\fBtgkill\fP(2)	2.6
\fBtime\fP(2)	1.0
\fBtimer_create\fP(2)	2.6
\fBtimer_delete\fP(2)	2.6
\fBtimer_getoverrun\fP(2)	2.6
\fBtimer_gettime\fP(2)	2.6
\fBtimer_settime\fP(2)	2.6
\fBtimerfd_create\fP(2)	2.6.25
\fBtimerfd_gettime\fP(2)	2.6.25
\fBtimerfd_settime\fP(2)	2.6.25
\fBtimes\fP(2)	1.0
\fBtkill\fP(2)	2.6; 2.4.22
\fBtruncate\fP(2)	1.0
\fBtruncate64\fP(2)	2.4
\fBugetrlimit\fP(2)	2.4
\fBumask\fP(2)	1.0
\fBumount\fP(2)	1.0
.\" sys_oldumount() -- __NR_umount
\fBumount2\fP(2)	2.2
.\" sys_umount() -- __NR_umount2
\fBuname\fP(2)	1.0
\fBunlink\fP(2)	1.0
\fBunlinkat\fP(2)	2.6.16
\fBunshare\fP(2)	2.6.16
\fBuselib\fP(2)	1.0
\fBustat\fP(2)	1.0
\fButime\fP(2)	1.0
\fButimensat\fP(2)	2.6.22
\fButimes\fP(2)	2.2
\fButrap_install\fP(2)	2.2	Sparc
\fBvfork\fP(2)	2.2
\fBvhangup\fP(2)	1.0
\fBvm86old\fP(2)	1.0	T{
Was "vm86"; renamed in
2.0.28/2.2
T}
\fBvm86\fP(2)	2.0.28; 2.2
\fBvmsplice\fP(2)	2.6.17
\fBwait4\fP(2)	1.0
\fBwaitid\fP(2)	2.6.10
\fBwaitpid\fP(2)	1.0
\fBwrite\fP(2)	1.0
\fBwritev\fP(2)	2.0
.TE
.ad
.PP
On nuff platforms, includin x86-32, socket calls is all multiplexed
(via glibc wrapper functions) through
.BR socketcall (2)
and similarly System V IPC calls is multiplexed through
.BR ipc (2).

Although slots is reserved fo' dem up in tha system call table,
the followin system calls is not implemented up in tha standard kernel:
.BR afs_syscall (2), \" __NR_afs_syscall is 53 on Linux 2.6.22/i386
.BR break (2),       \" __NR_break is 17 on Linux 2.6.22/i386
.BR ftime (2),       \" __NR_ftime is 35 on Linux 2.6.22/i386
.BR getpmsg (2),     \" __NR_getpmsg is 188 on Linux 2.6.22/i386
.BR gtty (2),        \" __NR_gtty is 32 on Linux 2.6.22/i386
.BR idle (2),        \" __NR_idle is 112 on Linux 2.6.22/i386
.BR lock (2),        \" __NR_lock is 53 on Linux 2.6.22/i386
.BR madvise1 (2),    \" __NR_madvise1 is 219 on Linux 2.6.22/i386
.BR mpx (2),         \" __NR_mpx is 66 on Linux 2.6.22/i386
.BR phys (2),        \" Slot has been reused
.BR prof (2),        \" __NR_prof is 44 on Linux 2.6.22/i386
.BR profil (2),      \" __NR_profil is 98 on Linux 2.6.22/i386
.BR putpmsg (2),     \" __NR_putpmsg is 189 on Linux 2.6.22/i386
.\" __NR_securitizzle is 223 on Linux 2.4/i386; absent on 2.6/i386, present
.\" on a cold-ass lil couple 2.6 architectures
.BR securitizzle (2),    \" __NR_securitizzle is 223 on Linux 2.4/i386
.\" Da securitizzle call is fo' future use.
.BR stty (2),        \" __NR_stty is 31 on Linux 2.6.22/i386
.BR tuxcall (2),     \" __NR_tuxcall is 184 on x86_64, also on PPC n' alpha
.BR ulimit (2),      \" __NR_ulimit is 58 on Linux 2.6.22/i386
and
.BR vserver (2)      \" __NR_vserver is 273 on Linux 2.6.22/i386
(see also
.BR unimplemented (2)).
However,
.BR ftime (3),
.BR profil (3)
and
.BR ulimit (3)
exist as library routines.
Da slot for
.BR phys (2)
is up in use since kernel 2.1.116 for
.BR umount (2);
.BR phys (2)
will never be implemented.
The
.BR getpmsg (2)
and
.BR putpmsg (2)
calls is fo' kernels patched ta support STREAMS,
and may never be up in tha standard kernel.

There was briefly
.BR set_zone_reclaim (2),
added up in Linux 2.6.13, n' removed up in 2.6.16;
this system call was never available ta user space.
.SH NOTES
.PP
Roughly bustin lyrics, tha code belongin ta tha system call
with number __NR_xxx defined in
.I /usr/include/asm/unistd.h
can be found up in tha Linux kernel source up in tha routine
.IR sys_xxx ().
(Da dispatch table fo' i386 can be found in
.IR /usr/src/linux/arch/i386/kernel/entry.S .)
There is nuff exceptions, however, mostly cuz
olda system calls was superseded by newer ones,
and dis has been treated somewhat unsystematically.
On platforms with
proprietary operating-system emulation,
like fuckin parisc, sparc, sparc64 n' alpha,
there is nuff additionizzle system calls; mips64 also gotz nuff a gangbangin' full
set of 32-bit system calls.

Over time, chizzlez ta tha intercoursez of some system calls have been
necessary.
One reason fo' such chizzlez was tha need ta increase tha size of
structures or scalar joints passed ta tha system call.
Because of these chizzles, there be now various groups
of related system calls
(e.g.,
.BR truncate (2)
and
.BR truncate64 (2))
which big-ass up similar tasks yo, but which vary in
details like fuckin tha size of they arguments.
(As noted earlier, applications is generally unaware of this:
the glibc wrapper functions do some work ta ensure dat tha right
system call is invoked, n' dat ABI compatibilitizzle is
preserved fo' oldschool binaries.)
Examplez of systems calls dat exist up in multiple versions are
the following:
.IP * 3
By now there be three different versions of
.BR stat (2):
.IR sys_stat ()
(slot
.IR __NR_oldstat ),
.IR sys_newstat ()
(slot
.IR __NR_stat ),
and
.IR sys_stat64 ()
(slot
.IR __NR_stat64 ),
with tha last bein da most thugged-out current.
.\" e.g., on 2.6.22/i386: __NR_oldstat 18, __NR_stat 106, __NR_stat64 195
.\" Da stat system calls deal wit three different data structures,
.\" defined up in include/asm-i386/stat.h: __old_kernel_stat, stat, stat64
A similar rap applies for
.BR lstat (2)
and
.BR fstat (2).
.IP *
Similarly, tha defines
.IR __NR_oldolduname ,
.IR __NR_olduname ,
and
.I __NR_uname
refer ta tha routines
.IR sys_olduname (),
.IR sys_uname ()
and
.IR sys_newuname ().
.IP *
In Linux 2.0, a freshly smoked up version of
.BR vm86 (2)
appeared, wit tha oldschool n' tha freshly smoked up kernel routines bein named
.IR sys_vm86old ()
and
.IR sys_vm86 ().
.IP *
In Linux 2.4, a freshly smoked up version of
.BR getrlimit (2)
appeared, wit tha oldschool n' tha freshly smoked up kernel routines bein named
.IR sys_old_getrlimit ()
(slot
.IR __NR_getrlimit )
and
.IR sys_getrlimit ()
(slot
.IR __NR_ugetrlimit ).
.IP *
Linux 2.4 increased tha size of user n' crew IDs from 16 ta 32 bits.
.\" 64-bit off_t chizzles: ftruncate64, *stat64,
.\" fcntl64 (because of tha flock structure), getdents64, *statfs64
To support dis chizzle, a range of system calls was added
(e.g.,
.BR chown32 (2),
.BR getuid32 (2),
.BR getgroups32 (2),
.BR setresuid32 (2)),
supersedin earlier callz of tha same name without the
"32" suffix.
.IP *
Linux 2.4 added support fo' applications on 32-bit architectures
to access big-ass filez (i.e., filez fo' which tha sizes and
file offsets can't be represented up in 32 bits.)
To support dis chizzle, replacements was required fo' system calls
that deal wit file offsets n' sizes.
Thus tha followin system calls was added:
.BR fcntl64 (2),
.BR ftruncate64 (2),
.BR getdents64 (2),
.BR stat64 (2),
.BR statfs64 (2),
and they analogs dat work wit file descriptors or
symbolic links.
These system calls supersede tha olda system calls
which, except up in tha case of tha "stat" calls,
have tha same name without tha "64" suffix.

On newer platforms dat only have 64-bit file access n' 32-bit uids
(e.g., alpha, ia64, s390x) there be no *64 or *32 calls.
Where tha *64 n' *32 calls exist, tha other versions is obsolete.
.IP *
The
.I rt_sig*
calls was added up in kernel 2.2 ta support tha addition
of real-time signals (see
.BR signal (7)).
These system calls supersede tha olda system callz of tha same
name without tha "rt_" prefix.
.IP *
The
.BR select (2)
and
.BR mmap (2)
system calls use five or mo' arguments,
which caused problems up in tha way
argument passin on tha i386 used ta be set up.
Thus, while other architectures have
.IR sys_select ()
and
.IR sys_mmap ()
correspondin to
.I __NR_select
and
.IR __NR_mmap ,
on i386 one finds
.IR old_select ()
and
.IR old_mmap ()
(routines dat bust a pointa ta a
argument block) instead.
These minutes passin five arguments
is not a problem any more, n' there be a
.I __NR__newselect
.\" (used by libc 6)
that correspondz directly to
.IR sys_select ()
and similarly
.IR __NR_mmap2 .
.\" .PP
.\" Two system call numbers,
.\" .IR __NR__llseek
.\" and
.\" .IR __NR__sysctl
.\" have a additionizzle underscore absent in
.\" .IR sys_llseek ()
.\" and
.\" .IR sys_sysctl ().
.\"
.\" In kernel 2.1.81,
.\" .BR lchown (2)
.\" and
.\" .BR chown (2)
.\" was swapped; dat is,
.\" .BR lchown (2)
.\" was added wit tha semantics dat was then current for
.\" .BR chown (2),
.\" n' tha semantics of tha latta call was chizzled ta what
.\" they is todizzle.
.SH SEE ALSO
.BR syscall (2),
.BR unimplemented (2),
.BR libc (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
