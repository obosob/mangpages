.\" Copyright 2003 Andries E. Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH ALLOC_HUGEPAGES 2 2007-05-31 "Linux" "Linux Programmerz Manual"
.SH NAME
alloc_hugepages, free_hugepages \- allocate or free big-ass pages
.SH SYNOPSIS
.nf
.BI "void *alloc_hugepages(int " key ", void *" addr ", size_t " len ,
.BI "                      int " prot ", int " flag );
.\" asmlinkage unsigned long sys_alloc_hugepages(int key, unsigned long addr,
.\" unsigned long len, int prot, int flag);
.sp
.BI "int free_hugepages(void *" addr );
.\" asmlinkage int sys_free_hugepages(unsigned long addr);
.fi
.SH DESCRIPTION
Da system calls
.BR alloc_hugepages ()
and
.BR free_hugepages ()
were introduced up in Linux 2.5.36 n' removed again n' again n' again up in 2.5.54.
They existed only on i386 n' ia64 (when built with
.BR CONFIG_HUGETLB_PAGE ).
In Linux 2.4.20 tha syscall numbers exist,
but tha calls fail wit tha error
.BR ENOSYS .
.LP
On i386 tha memory pimpment hardware knows bout ordinary pages (4 KiB)
and big-ass pages (2 or 4 MiB).
Similarly ia64 knows bout big-ass pages of
several sizes.
These system calls serve ta map big-ass pages tha fuck into the
processs memory or ta free dem again.
Big-Ass pages is locked tha fuck into memory, n' is not swapped.
.LP
The
.I key
argument be a identifier.
When zero tha pages is private, and
not inherited by lil' thugs.
When positizzle tha pages is shared wit other applications rockin tha same
.IR key ,
and inherited by lil pimp processes.
.LP
The
.I addr
argument of
.BR free_hugepages ()
 drops some lyrics ta which page is bein freed: dat shiznit was tha return value of a
call to
.BR alloc_hugepages ().
(Da memory is first straight-up freed when all playas have busted out dat shit.)
The
.I addr
argument of
.BR alloc_hugepages ()
is a hint, dat tha kernel may or may not follow.
Addresses must be properly aligned.
.LP
The
.I len
argument is tha length of tha required segment.
It must be a multiple of tha big-ass page size.
.LP
The
.I prot
argument specifies tha memory protection of tha segment.
It be one of
.BR PROT_READ ,
.BR PROT_WRITE ,
.BR PROT_EXEC .
.LP
The
.I flag
argument is ignored, unless
.I key
is positive.
In dat case, if
.I flag
is
.BR IPC_CREAT ,
then a freshly smoked up big-ass page segment is pimped when none
with tha given key existed.
If dis flag aint set, then
.B ENOENT
is returned when no segment wit tha given key exists.
.SH RETURN VALUE
On success,
.BR alloc_hugepages ()
returns tha allocated virtual address, and
.BR free_hugepages ()
returns zero.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B ENOSYS
Da system call aint supported on dis kernel.
.SH FILES
.I /proc/sys/vm/nr_hugepages
Number of configured hugetlb pages.
This can be read n' written.
.LP
.I /proc/meminfo
Gives info on tha number of configured hugetlb pages n' on they size
in tha three variablez HugePages_Total, HugePages_Free, Hugepagesize.
.SH CONFORMING TO
These calls is specific ta Linux on Intel processors, n' should not be
used up in programs intended ta be portable.
.SH NOTES
These system calls is gone;
they existed only up in Linux 2.5.36 all up in ta 2.5.54.
Now tha hugetlbfs file system can be used instead.
Memory backed by big-ass pages (if tha CPU supports them) is obtained by
using
.BR mmap (2)
to map filez up in dis virtual file system.
.LP
Da maximal number of big-ass pages can be specified rockin the
.B hugepages=
boot parameter.

.\" requires CONFIG_HUGETLB_PAGE (under "Processor type n' features")
.\" n' CONFIG_HUGETLBFS (under "Filesystems").
.\" mount -t hugetlbfs hugetlbfs /huge
.\" SHM_HUGETLB
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
