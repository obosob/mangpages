.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" n' Copyright (c) 1998 Andries Brouwer (aeb@cwi.nl)
.\" n' Copyright (c) 2007, 2008 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified by Mike Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-07-09 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-18 by Mike Haardt <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 2004-06-23 by Mike Kerrisk <mtk.manpages@gmail.com>
.\" 2007-07-08, mtk, added a example program; updated SYNOPSIS
.\" 2008-05-08, mtk, Describe rulez governin ballershizzle of freshly smoked up files
.\"     (bsdgroups versus sysvgroups, n' tha effect of tha parent
.\"     directoryz set-group-ID permission bit).
.\"
.TH CHOWN 2 2010-11-22 "Linux" "Linux Programmerz Manual"
.SH NAME
chown, fchown, lchown \- chizzle ballershizzle of a gangbangin' file
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "int chown(const char *" path ", uid_t " balla ", gid_t " crew );
.br
.BI "int fchown(int " fd ", uid_t " balla ", gid_t " crew );
.br
.BI "int lchown(const char *" path ", uid_t " balla ", gid_t " crew );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fchown (),
.BR lchown ():
.PD 0
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.ad
.PD
.SH DESCRIPTION
These system calls chizzle tha balla n' crew of a gangbangin' file.
They differ only up in how tha fuck tha file is specified:
.IP * 2
.BR chown ()
changes tha ballershizzle of tha file specified by
.IR path ,
which is dereferenced if it aint nuthin but a symbolic link.
.IP *
.BR fchown ()
changes tha ballershizzle of tha file referred ta by tha open file descriptor
.IR fd .
.IP *
.BR lchown ()
is like
.BR chown (),
but do not dereference symbolic links.
.PP
Only a privileged process (Linux: one wit the
.B CAP_CHOWN
capability) may chizzle tha balla of a gangbangin' file.
Da balla of a gangbangin' file may chizzle tha crew of tha file
to any crew of which dat balla be a member.
A privileged process (Linux: with
.BR CAP_CHOWN )
may chizzle tha crew arbitrarily.

If the
.I baller
or
.I group
is specified as \-1, then dat ID aint chizzled.

When tha balla or crew of a executable file are
changed by a unprivileged user the
.B S_ISUID
and
.B S_ISGID
mode bits is cleared.
POSIX do not specify whether
this also should happen when root do the
.BR chown ();
the Linux behavior dependz on tha kernel version.
.\" In Linux 2.0 kernels, superuser was like any suckas
.\" In 2.2, up ta 2.2.12, these bits was not cleared fo' superuser.
.\" Since 2.2.13, superuser is once mo' like any suckas.
In case of a non-group-executable file (i.e., one fo' which the
.B S_IXGRP
bit aint set) the
.B S_ISGID
bit indicates mandatory locking, n' aint cleared by a
.BR chown ().
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
Dependin on tha file system, other errors can be returned.
Da mo' general errors for
.BR chown ()
are listed below.
.TP
.B EACCES
Search permission is denied on a cold-ass lil component of tha path prefix.
(See also
.BR path_resolution (7).)
.TP
.B EFAULT
.I path
points outside yo' accessible address space.
.TP
.B ELOOP
Too nuff symbolic links was encountered up in resolving
.IR path .
.TP
.B ENAMETOOLONG
.I path
is too long.
.TP
.B ENOENT
Da file do not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP
.B EPERM
Da callin process did not have tha required permissions
(see above) ta chizzle balla and/or group.
.TP
.B EROFS
Da named file resides on a read-only file system.
.PP
Da general errors for
.BR fchown ()
are listed below:
.TP
.B EBADF
Da descriptor aint valid.
.TP
.B EIO
A low-level I/O error occurred while modifyin tha inode.
.TP
.B ENOENT
See above.
.TP
.B EPERM
See above.
.TP
.B EROFS
See above.
.SH CONFORMING TO
4.4BSD, SVr4, POSIX.1-2001.

Da 4.4BSD version can be
used only by tha superuser (that is, ordinary playas cannot give away files).
.\" chown():
.\" SVr4 documents EINVAL, EINTR, ENOLINK n' EMULTIHOP returns yo, but no
.\" ENOMEM.  POSIX.1 do not document ENOMEM or ELOOP error conditions.
.\" fchown():
.\" SVr4 documents additionizzle EINVAL, EIO, EINTR, n' ENOLINK
.\" error conditions.
.SH NOTES
Da original gangsta Linux
.BR chown (),
.BR fchown (),
and
.BR lchown ()
system calls supported only 16-bit user n' crew IDs.
Subsequently, Linux 2.4 added
.BR chown32 (),
.BR fchown32 (),
and
.BR lchown32 (),
supportin 32-bit IDs.
Da glibc
.BR chown (),
.BR fchown (),
and
.BR lchown ()
wrapper functions transparently deal wit tha variations across kernel versions.

When a freshly smoked up file is pimped (by, fo' example,
.BR open (2)
or
.BR mkdir (2)),
its balla is made tha same as tha file system user ID of the
bustin process.
Da crew of tha file dependz on a range of factors,
includin tha type of file system,
the options used ta mount tha file system,
and whether or not tha set-group-ID permission bit is enabled
on tha parent directory.
If tha file system supports the
.I "\-o\ grpid"
(or, synonymously
.IR "\-o\ bsdgroups" )
and
.I "\-o\ nogrpid"
(or, synonymously
.IR "\-o\ sysvgroups" )
.BR mount (8)
options, then tha rulez is as bigs up:
.IP * 2
If tha file system is mounted with
.IR "\-o\ grpid" ,
then tha crew of a freshly smoked up file is made
the same as dat of tha parent directory.
.IP *
If tha file system is mounted with
.IR "\-o\ nogrpid"
and tha set-group-ID bit is disabled on tha parent directory,
then tha crew of a freshly smoked up file is made tha same as the
processs file system GID.
.IP *
If tha file system is mounted with
.IR "\-o\ nogrpid"
and tha set-group-ID bit is enabled on tha parent directory,
then tha crew of a freshly smoked up file is made
the same as dat of tha parent directory.
.PP
As at Linux 2.6.25,
the
.IR "\-o\ grpid"
and
.IR "\-o\ nogrpid"
mount options is supported by ext2, ext3, ext4, n' XFS.
File systems dat don't support these mount options follow the
.IR "\-o\ nogrpid"
rules.
.PP
The
.BR chown ()
semantics is deliberately violated on NFS file systems
which have UID mappin enabled.
Additionally, tha semantics of all system
calls which access tha file contents is violated, cuz
.BR chown ()
may cause immediate access revocation on already open files.
Client side
cachin may lead ta a thugged-out delay between tha time where ballershizzle have
been chizzled ta allow access fo' a user n' tha time where tha file can
actually be accessed by tha user on other clients.

In versionz of Linux prior ta 2.1.81 (and distinct from 2.1.46),
.BR chown ()
did not follow symbolic links.
Since Linux 2.1.81,
.BR chown ()
does follow symbolic links, n' there be a freshly smoked up system call
.BR lchown ()
that do not follow symbolic links.
Since Linux 2.1.86, dis freshly smoked up call (that has tha same ol' dirty semantics
as tha old
.BR chown ())
has gots tha same syscall number, and
.BR chown ()
got tha newly introduced number.
.SH EXAMPLE
.PP
Da followin program chizzlez tha ballershizzle of tha file named in
its second command-line argument ta tha value specified up in its
first command-line argument.
Da freshly smoked up balla can be specified either as a numeric user ID,
or as a username (which is converted ta a user ID by using
.BR getpwnam (3)
to big-ass up a lookup up in tha system password file).
.nf

#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    uid_t uid;
    struct passwd *pwd;
    char *endptr;

    if (argc != 3 || argv[1][0] == \(aq\\0\(aq) {
        fprintf(stderr, "%s <baller> <file>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    uid = strtol(argv[1], &endptr, 10);  /* Allow a numeric strang */

    if (*endptr != \(aq\\0\(aq) {         /* Was not pure numeric strang */
        pwd = getpwnam(argv[1]);   /* Try gettin UID fo' username */
        if (pwd == NULL) {
            perror("getpwnam");
            exit(EXIT_FAILURE);
        }

        uid = pwd\->pw_uid;
    }

    if (chown(argv[2], uid, \-1) == \-1) {
        perror("chown");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR chmod (2),
.BR fchownat (2),
.BR flock (2),
.BR path_resolution (7),
.BR symlink (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
