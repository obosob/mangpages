.\" Copyright (c) 2009 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH TIMER_GETOVERRUN 2 2009-02-20 Linux "Linux Programmerz Manual"
.SH NAME
timer_getoverrun \- git overrun count fo' a POSIX per-process timer
.SH SYNOPSIS
.nf
.B  #include <time.h>

.BI "int timer_getoverrun(timer_t " timerid );
.fi

Link wit \fI\-lrt\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR timer_getoverrun ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR timer_getoverrun ()
returns tha "overrun count" fo' tha timer referred ta by
.IR timerid .
An application can use tha overrun count ta accurately calculate tha number
of timer expirations dat would have occurred over a given time interval.
Timer overruns can occur both when receivin expiration notifications
via signals
.RB ( SIGEV_SIGNAL ),
and via threads
.RB ( SIGEV_THREAD ).

When expiration notifications is served up via a signal,
overruns can occur as bigs up.
Regardless of whether or not a real-time signal is used for
timer notifications,
the system queues at most one signal per timer.
(This is tha behavior specified by POSIX.1-2001.
Da alternative, queuin one signal fo' each timer expiration,
could easily result up in overflowin tha allowed limits for
queued signals on tha system.)
Because of system schedulin delays,
or cuz tha signal may be temporarily blocked,
there can be a thugged-out delay between tha time when tha notification
signal is generated n' tha time when it
is served up (e.g., caught by a signal handlez) or accepted (e.g., using
.BR sigwaitinfo (2)).
In dis interval, further timer expirations may occur.
Da timer overrun count is tha number of additional
timer expirations dat occurred between tha time when tha signal
was generated n' when dat shiznit was served up or accepted.

Timer overruns can also occur when expiration notifications
are served up via invocation of a thread,
since there may be a arbitrary delay between a expiration of tha timer
and tha invocation of tha notification thread,
and up in dat delay interval, additionizzle timer expirations may occur
.SH RETURN VALUE
On success,
.BR timer_getoverrun ()
returns tha overrun count of tha specified timer;
this count may be 0 if no overruns have occurred.
On failure, \-1 is returned, and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EINVAL
.I timerid
is not a valid timer ID.
.SH VERSIONS
This system call be available since Linux 2.6.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
When timer notifications is served up via signals
.RB ( SIGEV_SIGNAL ),
on Linux it be also possible ta obtain tha overrun count via the
.I si_overrun
field of the
.I siginfo_t
structure (see
.BR sigaction (2)).
This allows a application ta avoid tha overhead of making
a system call ta obtain tha overrun count,
but be a nonportable extension ta POSIX.1-2001.

POSIX.1-2001 discusses timer overruns only up in tha context of
timer notifications rockin signals.
.\" FIXME  fo' realz. Austin bug filed, 11 Feb 09
.SH BUGS
POSIX.1-2001 specifies dat if tha timer overrun count
is equal ta or pimped outa than a implementation-defined maximum,
.BR DELAYTIMER_MAX ,
then
.BR timer_getoverrun ()
should return
.BR DELAYTIMER_MAX .
But fuck dat shiznit yo, tha word on tha street is dat Linux do not implement dis feature: instead,
if tha timer overrun value exceedz tha maximum representable integer,
the counta cycles, startin once mo' from low joints.
.\" Bug filed: http://bugzilla.kernel.org/show_bug.cgi?id=12665
.\" http://thread.gmane.org/gmane.linux.kernel/113276/
.SH EXAMPLE
See
.BR timer_create (2).
.SH SEE ALSO
.BR clock_gettime (2),
.BR sigaction (2),
.BR signalfd (2),
.BR sigwaitinfo (2),
.BR timer_create (2),
.BR timer_delete (2),
.BR timer_settime (2),
.BR signal (7),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
