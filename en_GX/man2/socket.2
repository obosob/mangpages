'\" t
.\" Copyright (c) 1983, 1991 Da Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     $Id: socket.2,v 1.4 1999/05/13 11:33:42 freitag Exp $
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998, 1999 by Andi Kleen <ak@muc.de>
.\" Modified 2002-07-17 by Mike Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-17 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.TH SOCKET 2 2009-01-19 "Linux" "Linux Programmerz Manual"
.SH NAME
socket \- create a endpoint fo' communication
.SH SYNOPSIS
.BR "#include <sys/types.h>" "          /* See NOTES */"
.br
.B #include <sys/socket.h>
.sp
.BI "int socket(int " domain ", int " type ", int " protocol );
.SH DESCRIPTION
.BR socket ()
creates a endpoint fo' communication n' returns a thugged-out descriptor.
.PP
The
.I domain
argument specifies a cold-ass lil communication domain; dis selects tha protocol
family which is ghon be used fo' communication.
These crews is defined in
.IR <sys/socket.h> .
Da currently understood formats include:
.TS
tab(:);
l l l.
Name:Purpose:Man page
T{
.BR AF_UNIX ", " AF_LOCAL
T}:T{
Local communication
T}:T{
.BR unix (7)
T}
T{
.B AF_INET
T}:IPv4 Internizzle protocols:T{
.BR ip (7)
T}
T{
.B AF_INET6
T}:IPv6 Internizzle protocols:T{
.BR ipv6 (7)
T}
T{
.B AF_IPX
T}:IPX \- Novell protocols:
T{
.B AF_NETLINK
T}:T{
Kernel user intercourse device
T}:T{
.BR netlink (7)
T}
T{
.B AF_X25
T}:ITU-T X.25 / ISO-8208 protocol:T{
.BR x25 (7)
T}
T{
.B AF_AX25
T}:T{
Amateur radio AX.25 protocol
T}:
T{
.B AF_ATMPVC
T}:Access ta raw ATM PVCs:
T{
.B AF_APPLETALK
T}:Appletalk:T{
.BR ddp (7)
T}
T{
.B AF_PACKET
T}:T{
Low level packet intercourse
T}:T{
.BR packet (7)
T}
.TE
.PP
Da socket has tha indicated
.IR type ,
which specifies tha communication semantics.
Currently defined types
are:
.TP 16
.B SOCK_STREAM
Provides sequenced, reliable, two-way, connection-based byte streams.
An out-of-band data transmission mechanizzle may be supported.
.TP
.B SOCK_DGRAM
Supports datagrams (connectionless, unreliable lyrics of a gangbangin' fixed
maximum length).
.TP
.B SOCK_SEQPACKET
Provides a sequenced, reliable, two-way connection-based data
transmission path fo' datagramz of fixed maximum length; a cold-ass lil thug is
required ta read a entire packet wit each input system call.
.TP
.B SOCK_RAW
Provides raw network protocol access.
.TP
.B SOCK_RDM
Provides a reliable datagram layer dat do not guarantee ordering.
.TP
.B SOCK_PACKET
Obsolete n' should not be used up in freshly smoked up programs;
see
.BR packet (7).
.PP
Some socket types may not be implemented by all protocol crews;
for example,
.B SOCK_SEQPACKET
is not implemented for
.BR AF_INET .
.PP
Since Linux 2.6.27, the
.I type
argument serves a second purpose:
in addizzle ta specifyin a socket type,
it may include tha bitwise OR of any of tha followin joints,
to modify tha behavior of
.BR socket ():
.TP 16
.B SOCK_NONBLOCK
Set the
.BR O_NONBLOCK
file status flag on tha freshly smoked up open file description.
Usin dis flag saves extra calls to
.BR fcntl (2)
to big up tha same result.
.TP
.B SOCK_CLOEXEC
Set tha close-on-exec
.RB ( FD_CLOEXEC )
flag on tha freshly smoked up file descriptor.
See tha description of the
.B O_CLOEXEC
flag in
.BR open (2)
for reasons why dis may be useful.
.PP
The
.I protocol
specifies a particular protocol ta be used wit tha socket.
Normally only a single protocol exists ta support a particular
socket type within a given protocol crew, up in which case
.I protocol
can be specified as 0.
But fuck dat shiznit yo, tha word on tha street is dat it is possible dat nuff protocols may exist, in
which case a particular protocol must be specified up in dis manner.
Da protocol number ta use is specific ta tha \*(lqcommunication domain\*(rq
in which communication is ta take place; see
.BR protocols (5).
See
.BR getprotoent (3)
on how tha fuck ta map protocol name strings ta protocol numbers.
.PP
Socketz of type
.B SOCK_STREAM
are full-duplex byte streams, similar ta pipes.
They do not preserve
record boundaries.
A stream socket must be in
a
.I connected
state before any data may be busted or received on dat shit.
A connection to
another socket is pimped wit a
.BR connect (2)
call.
Once connected, data may be transferred using
.BR read (2)
and
.BR write (2)
calls or some variant of the
.BR bust (2)
and
.BR recv (2)
calls.
When a session has been completed a
.BR close (2)
may be performed.
Out-of-band data may also be transmitted as busted lyrics bout in
.BR bust (2)
and received as busted lyrics bout in
.BR recv (2).
.PP
Da communications protocols which implement a
.B SOCK_STREAM
ensure dat data aint lost or duplicated.
If a piece of data fo' which
the peer protocol has buffer space cannot be successfully transmitted
within a reasonable length of time, then tha connection is considered
to be dead as fuckin fried chicken.
When
.B SO_KEEPALIVE
is enabled on tha socket tha protocol checks up in a protocol-specific
manner if tha other end is still kickin it.
A
.B SIGPIPE
signal is raised if a process sendz or receives
on a gangbangin' fucked up stream; dis causes naive processes,
which do not handle tha signal, ta exit.
.B SOCK_SEQPACKET
sockets employ tha same system calls as
.B SOCK_STREAM
sockets.
Da only difference is that
.BR read (2)
calls will return only tha amount of data requested,
and any data remainin up in tha arrivin packet is ghon be discarded.
Also all message boundaries up in incomin datagrams is preserved.
.PP
.B SOCK_DGRAM
and
.B SOCK_RAW
sockets allow bustin  of datagrams ta correspondents named in
.BR sendto (2)
calls.
Datagrams is generally received with
.BR recvfrom (2),
which returns tha next datagram along wit tha address of its sender.
.PP
.B SOCK_PACKET
is a obsolete socket type ta receive raw packets directly from the
device driver.
Use
.BR packet (7)
instead.
.PP
An
.BR fcntl (2)
.B F_SETOWN
operation can be used ta specify a process or process crew ta receive a
.B SIGURG
signal when tha out-of-band data arrives or
.B SIGPIPE
signal when a
.B SOCK_STREAM
connection breaks unexpectedly.
This operation may also be used ta set tha process or process group
that receives tha I/O n' asynchronous notification of I/O events via
.BR SIGIO .
Using
.B F_SETOWN
is equivalent ta an
.BR ioctl (2)
call wit the
.B FIOSETOWN
or
.B SIOCSPGRP
argument.
.PP
When tha network signals a error condizzle ta tha protocol module (e.g.,
usin a ICMP message fo' IP) tha pendin error flag is set fo' tha socket.
Da next operation on dis socket will return tha error code of tha pending
error.
For some protocols it is possible ta enable a per-socket error queue
to retrieve detailed shiznit bout tha error; see
.B IP_RECVERR
in
.BR ip (7).
.PP
Da operation of sockets is controlled by socket level
.IR options .
These options is defined in
.IR <sys/socket.h> .
Da functions
.BR setsockopt (2)
and
.BR getsockopt (2)
are used ta set n' git options, respectively.
.SH RETURN VALUE
On success, a gangbangin' file descriptor fo' tha freshly smoked up socket is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
Permission ta create a socket of tha specified type and/or protocol
is denied.
.TP
.B EAFNOSUPPORT
Da implementation do not support tha specified address crew.
.TP
.B EINVAL
Unknown protocol, or protocol crew not available.
.TP
.B EINVAL
.\" Since Linux 2.6.27
Invalid flags in
.IR type .
.TP
.B EMFILE
Process file table overflow.
.TP
.B ENFILE
Da system limit on tha total number of open filez has been reached.
.TP
.BR ENOBUFS " or " ENOMEM
Insufficient memory be available.
Da socket cannot be
created until sufficient resources is freed.
.TP
.B EPROTONOSUPPORT
Da protocol type or tha specified protocol is not
supported within dis domain.
.PP
Other errors may be generated by tha underlyin protocol modules.
.SH CONFORMING TO
4.4BSD, POSIX.1-2001.

The
.B SOCK_NONBLOCK
and
.B SOCK_CLOEXEC
flags is Linux-specific.

.BR socket ()
appeared up in 4.2BSD.
It be generally portable to/from
non-BSD systems supportin clonez of tha BSD socket layer (including
System V variants).
.SH NOTES
POSIX.1-2001 do not require tha inclusion of
.IR <sys/types.h> ,
and dis header file aint required on Linux.
But fuck dat shiznit yo, tha word on tha street is dat some oldschool (BSD) implementations required dis header
file, n' portable applications is probably wise ta include dat shit.

Da manifest constants used under 4.x BSD fo' protocol crews
are
.BR PF_UNIX ,
.BR PF_INET ,
and so on, while
.BR AF_UNIX ,
.BR AF_INET ,
and so on is used fo' address
families.
But fuck dat shiznit yo, tha word on tha street is dat already tha BSD playa page promises: "Da protocol
family generally is tha same ol' dirty as tha address crew", n' subsequent
standardz use AF_* all over dis biiiatch.
.SH EXAMPLE
An example of tha use of
.BR socket ()
is shown in
.BR getaddrinfo (3).
.SH SEE ALSO
.BR accept (2),
.BR bind (2),
.BR connect (2),
.BR fcntl (2),
.BR getpeername (2),
.BR getsockname (2),
.BR getsockopt (2),
.BR ioctl (2),
.BR listen (2),
.BR read (2),
.BR recv (2),
.BR select (2),
.BR bust (2),
.BR shutdown (2),
.BR socketpair (2),
.BR write (2),
.BR getprotoent (3),
.BR ip (7),
.BR socket (7),
.BR tcp (7),
.BR udp (7),
.BR unix (7)

\(lqAn Introductory 4.3BSD Interprocess Communication Tutorial\(rq
and
\(lqBSD Interprocess Communication Tutorial\(rq,
reprinted in
.I UNIX Programmerz Supplementary Documents Volume 1.
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
