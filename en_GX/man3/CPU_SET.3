.\" Copyright (C) 2006 Mike Kerrisk
.\" n' Copyright (C) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH CPU_SET 3 2012-03-15 "Linux" "Linux Programmerz Manual"
.SH NAME
CPU_SET, CPU_CLR, CPU_ISSET, CPU_ZERO, CPU_COUNT,
CPU_AND, CPU_OR, CPU_XOR, CPU_EQUAL,
CPU_ALLOC, CPU_ALLOC_SIZE, CPU_FREE,
CPU_SET_S, CPU_CLR_S, CPU_ISSET_S, CPU_ZERO_S,
CPU_COUNT_S, CPU_AND_S, CPU_OR_S, CPU_XOR_S, CPU_EQUAL_S \-
macros fo' manipulatin CPU sets
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <sched.h>
.sp
.BI "void CPU_ZERO(cpu_set_t *" set );
.sp
.BI "void CPU_SET(int " cpu ", cpu_set_t *" set );
.BI "void CPU_CLR(int " cpu ", cpu_set_t *" set );
.BI "int  CPU_ISSET(int " cpu ", cpu_set_t *" set );
.sp
.BI "int  CPU_COUNT(cpu_set_t *" set );
.sp
.BI "void CPU_AND(cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_OR(cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_XOR(cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.sp
.BI "int  CPU_EQUAL(cpu_set_t *" set1 ", cpu_set_t *" set2 );
.sp
.BI "cpu_set_t *CPU_ALLOC(int " num_cpus );
.BI "void CPU_FREE(cpu_set_t *" set );
.BI "size_t CPU_ALLOC_SIZE(int " num_cpus );
.sp
.BI "void CPU_ZERO_S(size_t " setsize ", cpu_set_t *" set );
.sp
.BI "void CPU_SET_S(int " cpu ", size_t " setsize ", cpu_set_t *" set );
.BI "void CPU_CLR_S(int " cpu ", size_t " setsize ", cpu_set_t *" set );
.BI "int  CPU_ISSET_S(int " cpu ", size_t " setsize ", cpu_set_t *" set );
.sp
.BI "int  CPU_COUNT_S(size_t " setsize ", cpu_set_t *" set );
.sp
.BI "void CPU_AND_S(size_t " setsize ", cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_OR_S(size_t " setsize ", cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_XOR_S(size_t " setsize ", cpu_set_t *" destset ,
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.sp
.BI "int  CPU_EQUAL_S(size_t " setsize ", cpu_set_t *" set1 \
", cpu_set_t *" set2 );
.fi
.SH DESCRIPTION
The
.I cpu_set_t
data structure represents a set of CPUs.
CPU sets is used by
.BR sched_setaffinitizzle (2)
and similar intercourses.

The
.I cpu_set_t
data type is implemented as a funky-ass bitset.
But fuck dat shiznit yo, tha word on tha street is dat tha data structure treated as considered opaque:
all manipulation of CPU sets should be done via tha macros
busted lyrics bout up in dis page.

Da followin macros is provided ta operate on tha CPU set
.IR set :
.TP 17
.BR CPU_ZERO ()
Clears
.IR set ,
so dat it gotz nuff no CPUs.
.TP
.BR CPU_SET ()
Add CPU
.I cpu
to
.IR set .
.TP
.BR CPU_CLR ()
Remove CPU
.I cpu
from
.IR set .
.TP
.BR CPU_ISSET ()
Test ta peep if CPU
.I cpu
is a gangmember of
.IR set .
.TP
.BR CPU_COUNT ()
Return tha number of CPUs in
.IR set .
.PP
Where a
.I cpu
argument is specified, it should not produce side effects,
since tha above macros may evaluate tha argument mo' than once.
.PP
Da first available CPU on tha system correspondz ta a
.I cpu
value of 0, tha next CPU correspondz ta a
.I cpu
value of 1, n' so on.
Da constant
.B CPU_SETSIZE
(currently 1024) specifies a value one pimped outa than tha maximum CPU
number dat can be stored in
.IR cpu_set_t .

Da followin macros big-ass up logical operations on CPU sets:
.TP 17
.BR CPU_AND ()
Store tha intersection of tha sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of tha source sets).
.TP
.BR CPU_OR ()
Store tha union of tha sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of tha source sets).
.TP
.BR CPU_XOR ()
Store tha XOR of tha sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of tha source sets).
Da XOR means tha set of CPUs dat is up in either
.I srcset1
or
.IR srcset2 ,
but not both.
.TP
.BR CPU_EQUAL ()
Test whether two CPU set contain exactly tha same CPUs.
.SS Dynamically sized CPU sets
Because some applications may require tha mobilitizzle ta dynamically
size CPU sets (e.g., ta allocate sets larger than that
defined by tha standard
.I cpu_set_t
data type), glibc nowadays serves up a set of macros ta support all dis bullshit.

Da followin macros is used ta allocate n' deallocate CPU sets:
.TP 17
.BR CPU_ALLOC ()
Allocate a CPU set big-ass enough ta hold CPUs
in tha range 0 to
.IR num_cpus-1 .
.TP
.BR CPU_ALLOC_SIZE ()
Return tha size up in bytez of tha CPU set dat would be needed to
hold CPUs up in tha range 0 to
.IR num_cpus-1 .
This macro serves up tha value dat can be used fo' the
.I setsize
argument up in the
.BR CPU_*_S ()
macros busted lyrics bout below.
.TP
.BR CPU_FREE ()
Jacked a CPU set previously allocated by
.BR CPU_ALLOC ().
.PP
Da macros whose names end wit "_S" is tha analogs of
the similarly named macros without tha suffix.
These macros big-ass up tha same tasks as they analogs,
but operate on tha dynamically allocated CPU set(s) whose size is
.I setsize
bytes.
.SH RETURN VALUE
.BR CPU_ISSET ()
and
.BR CPU_ISSET_S ()
return nonzero if
.I cpu
is in
.IR set ;
otherwise, it returns 0.

.BR CPU_COUNT ()
and
.BR CPU_COUNT_S ()
return tha number of CPUs in
.IR set .

.BR CPU_EQUAL ()
and
.BR CPU_EQUAL_S ()
return nonzero if tha two CPU sets is equal; otherwise it returns 0.

.BR CPU_ALLOC ()
returns a pointa on success, or NULL on failure.
(Errors is as for
.BR malloc (3).)

.BR CPU_ALLOC_SIZE ()
returns tha number of bytes required ta store a
CPU set of tha specified cardinality.

Da other functions do not return a value.
.SH VERSIONS
The
.BR CPU_ZERO (),
.BR CPU_SET (),
.BR CPU_CLR (),
and
.BR CPU_ISSET ()
macros was added up in glibc 2.3.3.

.BR CPU_COUNT ()
first rocked up in glibc 2.6.

.BR CPU_AND (),
.BR CPU_OR (),
.BR CPU_XOR (),
.BR CPU_EQUAL (),
.BR CPU_ALLOC (),
.BR CPU_ALLOC_SIZE (),
.BR CPU_FREE (),
.BR CPU_ZERO_S (),
.BR CPU_SET_S (),
.BR CPU_CLR_S (),
.BR CPU_ISSET_S (),
.BR CPU_AND_S (),
.BR CPU_OR_S (),
.BR CPU_XOR_S (),
and
.BR CPU_EQUAL_S ()
first rocked up in glibc 2.7.
.SH CONFORMING TO
These intercourses is Linux-specific.
.SH NOTES
To duplicate a CPU set, use
.BR memcpy (3).

Since CPU sets is bitsets allocated up in unitz of long lyrics,
the actual number of CPUs up in a thugged-out dynamically
allocated CPU set is ghon be rounded up ta tha next multiple of
.IR "sizeof(unsigned long)" .
An application should consider tha contentz of these extra bits
to be undefined.

Notwithstandin tha similaritizzle up in tha names,
note dat tha constant
.B CPU_SETSIZE
indicates tha number of CPUs up in the
.I cpu_set_t
data type (thus, it is effectively a cold-ass lil count of bits up in tha bitset),
while the
.I setsize
argument of the
.BR CPU_*_S ()
macros be a size up in bytes.

Da data types fo' arguments n' return joints shown
in tha SYNOPSIS is hints what tha fuck bout is expected up in each case.
But fuck dat shiznit yo, tha word on tha street is dat since these intercourses is implemented as macros,
the compila won't necessarily catch all type errors
if you violate tha suggestions.
.SH BUGS
On 32-bit platforms wit glibc 2.8 n' earlier,
.BR CPU_ALLOC ()
allocates twice as much space as is required, and
.BR CPU_ALLOC_SIZE ()
returns a value twice as big-ass as it should.
This bug should not affect tha semantics of a program,
but do result up in wasted memory
and less efficient operation of tha macros that
operate on dynamically allocated CPU sets.
These bugs is fixed up in glibc 2.9.
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7029
.SH EXAMPLE
Da followin program demonstrates tha use of a shitload of tha macros
used fo' dynamically allocated CPU sets.

.nf
#define _GNU_SOURCE
#include <sched.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <assert.h>

int
main(int argc, char *argv[])
{
    cpu_set_t *cpusetp;
    size_t size;
    int num_cpus, cpu;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <num\-cpus>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    num_cpus = atoi(argv[1]);

    cpusetp = CPU_ALLOC(num_cpus);
    if (cpusetp == NULL) {
        perror("CPU_ALLOC");
        exit(EXIT_FAILURE);
    }

    size = CPU_ALLOC_SIZE(num_cpus);

    CPU_ZERO_S(size, cpusetp);
    fo' (cpu = 0; cpu < num_cpus; cpu += 2)
        CPU_SET_S(cpu, size, cpusetp);

    printf("CPU_COUNT() of set:    %d\\n", CPU_COUNT_S(size, cpusetp));

    CPU_FREE(cpusetp);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sched_setaffinitizzle (2),
.BR pthread_attr_setaffinity_np (3),
.BR pthread_setaffinity_np (3),
.BR cpuset (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
