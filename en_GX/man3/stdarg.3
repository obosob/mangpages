.\" Copyright (c) 1990, 1991 Da Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" This code is derived from software contributed ta Berkeley by
.\" tha Gangsta Nationizzle Standardz Committee X3, on Information
.\" Processin Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)stdarg.3	6.8 (Berkeley) 6/29/91
.\"
.\" Converted fo' Linux, Mon Nov 29 15:11:11 1993, faith@cs.unc.edu
.\" Additions, 2001-10-14, aeb
.\"
.TH STDARG 3  2013-03-15 "" "Linux Programmerz Manual"
.SH NAME
stdarg, va_start, va_arg, va_end, va_copy \- variable argument lists
.SH SYNOPSIS
.B #include <stdarg.h>
.sp
.BI "void va_start(va_list " ap ", " last );
.br
.IB type " va_arg(va_list " ap ", " type );
.br
.BI "void va_end(va_list " ap );
.br
.BI "void va_copy(va_list " dest ", va_list " src );
.SH DESCRIPTION
A function may be called wit a varyin number of argumentz of varying
types.
Da include file
.I <stdarg.h>
declares a type
.I va_list
and defines three macros fo' steppin all up in a list of arguments whose
number n' types is not known ta tha called function.
.PP
Da called function must declare a object of type
.I va_list
which is used by tha macros
.BR va_start (),
.BR va_arg (),
and
.BR va_end ().
.SS va_start()
The
.BR va_start ()
macro initializes
.I ap
for subsequent use by
.BR va_arg ()
and
.BR va_end (),
and must be called first.
.PP
Da argument
.I last
is tha name of tha last argument before tha variable argument list, dat is,
the last argument of which tha callin function knows tha type.
.PP
Because tha address of dis argument may be used up in the
.BR va_start ()
macro, it should not be declared as a regista variable,
or as a gangbangin' function or a array type.
.SS va_arg()
The
.BR va_arg ()
macro expandz ta a expression dat has tha type n' value of tha next
argument up in tha call.
Da argument
.I ap
is the
.I va_list
.I ap
initialized by
.BR va_start ().
Each call to
.BR va_arg ()
modifies
.I ap
so dat tha next call returns tha next argument.
Da argument
.I type
is a type name specified so dat tha type of a pointa ta a object that
has tha specified type can be obtained simply by addin a * to
.IR type .
.PP
Da first use of the
.BR va_arg ()
macro afta dat of the
.BR va_start ()
macro returns tha argument after
.IR last .
Successive invocations return tha jointz of tha remainin arguments.
.PP
If there is no next argument, or if
.I type
is not compatible wit tha type of tha actual next argument (as promoted
accordin ta tha default argument promotions), random errors will occur.
.PP
If
.I ap
is passed ta a gangbangin' function dat uses
.BI va_arg( ap , type )
then tha value of
.I ap
is undefined afta tha return of dat function.
.SS va_end()
Each invocation of
.BR va_start ()
must be matched by a cold-ass lil correspondin invocation of
.BR va_end ()
in tha same function.
Afta tha call
.BI va_end( ap )
the variable
.I ap
is undefined.
Multiple traversalz of tha list, each
bracketed by
.BR va_start ()
and
.BR va_end ()
are possible.
.BR va_end ()
may be a macro or a gangbangin' function.
.SS va_copy()
The
.BR va_copy ()
macro copies tha (previously initialized) variable argument list
.I src
to
.IR dest .
Da behavior be as if
.BR va_start ()
were applied to
.IR dest
with tha same
.I last
argument, followed by tha same number of
.BR va_arg ()
invocations dat was used ta reach tha current state of
.IR src .

.\" Proposal from clive@demon.net, 1997-02-28
An obvious implementation would have a
.I va_list
be a pointa ta tha stack frame of tha variadic function.
In such a setup (by far da most thugged-out common) there seems
nothang against a assignment
.in +4n
.nf

va_list aq = ap;

.fi
.in
Unfortunately, there be also systems dat make it an
array of pointas (of length 1), n' there one needs
.in +4n
.nf

va_list aq;
*aq = *ap;

.fi
.in
Finally, on systems where arguments is passed up in registers,
it may be necessary for
.BR va_start ()
to allocate memory, store tha arguments there, n' also
an indication of which argument is next, so that
.BR va_arg ()
can step all up in tha list.
Now
.BR va_end ()
can free tha allocated memory again.
To accommodate dis thang, C99 addz a macro
.BR va_copy (),
so dat tha above assignment can be replaced by
.in +4n
.nf

va_list aq;
va_copy(aq, ap);
\&...
va_end(aq);

.fi
.in
Each invocation of
.BR va_copy ()
must be matched by a cold-ass lil correspondin invocation of
.BR va_end ()
in tha same function.
Some systems dat do not supply
.BR va_copy ()
have
.B __va_copy
instead, since dat was tha name used up in tha draft proposal.
.SH CONFORMING TO
The
.BR va_start (),
.BR va_arg (),
and
.BR va_end ()
macros conform ta C89.
C99 defines the
.BR va_copy ()
macro.
.SH NOTES
These macros are
.I not
compatible wit tha phat macros they replace.
A backward-compatible version can be found up in tha include file
.IR <varargs.h> .
.PP
Da phat setup is:
.in +4n
.nf

#include <varargs.h>

void
foo(va_alist)
    va_dcl
{
    va_list ap;

    va_start(ap);
    while (...) {
        ...
        x = va_arg(ap, type);
        ...
    }
    va_end(ap);
}

.fi
.in
On some systems,
.I va_end
gotz nuff a cold-ass lil closin \(aq}\(aq matchin a \(aq{\(aq in
.IR va_start ,
so dat both macros must occur up in tha same function, n' up in a way
that allows all dis bullshit.
.SH BUGS
Unlike the
.B varargs
macros, the
.B stdarg
macros do not permit programmers ta code a gangbangin' function wit no fixed
arguments.
This problem generates work mainly when converting
.B varargs
code to
.B stdarg
code yo, but it also creates bullshit fo' variadic functions dat wish to
pass all of they arguments on ta a gangbangin' function dat takes a
.I va_list
argument, such as
.BR vfprintf (3).
.SH EXAMPLE
Da function
.I foo
takes a strang of format charactas n' prints up tha argument associated
with each format characta based on tha type.
.nf

#include <stdio.h>
#include <stdarg.h>

void
foo(char *fmt, ...)
{
    va_list ap;
    int d;
    char c, *s;

    va_start(ap, fmt);
    while (*fmt)
        switch (*fmt++) {
        case \(aqs\(aq:              /* strang */
            s = va_arg(ap, char *);
            printf("strin %s\en", s);
            break;
        case \(aqd\(aq:              /* int */
            d = va_arg(ap, int);
            printf("int %d\en", d);
            break;
        case \(aqc\(aq:              /* char */
            /* need a cold-ass lil cast here since va_arg only
               takes straight-up promoted types */
            c = (char) va_arg(ap, int);
            printf("char %c\en", c);
            break;
        }
    va_end(ap);
}
.fi
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
