'\"
'\" Copyright (c) 1996-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_CreateObjCommand 3 8.0 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CreateObjCommand, Tcl_DeleteCommand, Tcl_DeleteCommandFromToken, Tcl_GetCommandInfo, Tcl_GetCommandInfoFromToken, Tcl_SetCommandInfo, Tcl_SetCommandInfoFromToken, Tcl_GetCommandName, Tcl_GetCommandFullName, Tcl_GetCommandFromObj \- implement freshly smoked up commandz up in C
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Command
\fBTcl_CreateObjCommand\fR(\fIinterp, cmdName, proc, clientData, deleteProc\fR)
.sp
int
\fBTcl_DeleteCommand\fR(\fIinterp, cmdName\fR)
.sp
int
\fBTcl_DeleteCommandFromToken\fR(\fIinterp, token\fR)
.sp
int
\fBTcl_GetCommandInfo\fR(\fIinterp, cmdName, infoPtr\fR)
.sp
int
\fBTcl_SetCommandInfo\fR(\fIinterp, cmdName, infoPtr\fR)
.sp
int
\fBTcl_GetCommandInfoFromToken\fR(\fItoken, infoPtr\fR)
.sp
int
\fBTcl_SetCommandInfoFromToken\fR(\fItoken, infoPtr\fR)
.sp
const char *
\fBTcl_GetCommandName\fR(\fIinterp, token\fR)
.sp
void
\fBTcl_GetCommandFullName\fR(\fIinterp, token, objPtr\fR)
.sp
Tcl_Command
\fBTcl_GetCommandFromObj\fR(\fIinterp, objPtr\fR)
.SH ARGUMENTS
.AS Tcl_CmdDeleteProc *deleteProc in/out
.AP Tcl_Interp *interp in
Interpreta up in which ta create a freshly smoked up command or dat gotz nuff a cold-ass lil command.
.AP char *cmdName in
Name of command.
.AP Tcl_ObjCmdProc *proc in
Implementation of tha freshly smoked up command: \fIproc\fR is ghon be called whenever
\fIcmdName\fR is invoked as a cold-ass lil command.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIproc\fR n' \fIdeleteProc\fR.
.AP Tcl_CmdDeleteProc *deleteProc in
Procedure ta booty-call before \fIcmdName\fR is deleted from tha interpreter;
allows fo' command-specific cleanup. If NULL, then no procedure is
called before tha command is deleted.
.AP Tcl_Command token in
Token fo' command, returned by previous call ta \fBTcl_CreateObjCommand\fR.
Da command must not done been deleted.
.AP Tcl_CmdInfo *infoPtr in/out
Pointa ta structure containin various shiznit bout a
Tcl command.
.AP Tcl_Obj *objPtr in
Object containin tha name of a Tcl command.
.BE
.SH DESCRIPTION
.PP
\fBTcl_CreateObjCommand\fR defines a freshly smoked up command up in \fIinterp\fR
and associates it wit procedure \fIproc\fR
such dat whenever \fIname\fR is
invoked as a Tcl command (e.g., via a cold-ass lil call ta \fBTcl_EvalObjEx\fR)
the Tcl interpreta will call \fIproc\fR ta process tha command.
.PP
\fBTcl_CreateObjCommand\fR deletes any existin command
\fIname\fR already associated wit tha interpreter
(however peep below fo' a exception where tha existin command
is not deleted).
It returns a token dat may be used ta refer
to tha command up in subsequent calls ta \fBTcl_GetCommandName\fR.
If \fIname\fR gotz nuff any \fB::\fR namespace qualifiers,
then tha command be added ta tha specified namespace;
otherwise tha command be added ta tha global namespace.
If \fBTcl_CreateObjCommand\fR is called fo' a interpreta dat is in
the process of bein deleted, then it do not create a freshly smoked up command
and it returns NULL.
\fIproc\fR should have arguments n' result dat match tha type
\fBTcl_ObjCmdProc\fR:
.CS
typedef int Tcl_ObjCmdProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR,
        int \fIobjc\fR,
        Tcl_Obj *const \fIobjv\fR[]);
.CE
When \fIproc\fR is invoked, tha \fIclientData\fR n' \fIinterp\fR parameters
will be copiez of tha \fIclientData\fR n' \fIinterp\fR arguments given to
\fBTcl_CreateObjCommand\fR.  Typically, \fIclientData\fR points ta an
application-specific data structure dat raps bout what tha fuck ta do when the
command procedure is invoked. Y'all KNOW dat shit, muthafucka! \fIObjc\fR n' \fIobjv\fR describe the
arguments ta tha command, \fIobjc\fR givin tha number of argument objects
(includin tha command name) n' \fIobjv\fR givin tha jointz of the
arguments, n' you can put dat on yo' toast.  Da \fIobjv\fR array will contain \fIobjc\fR joints, pointin to
the argument objects, n' you can put dat on yo' toast.  Unlike \fIargv\fR[\fIargv\fR] used up in a
string-based command procedure, \fIobjv\fR[\fIobjc\fR] aint gonna contain NULL.
.PP
Additionally, when \fIproc\fR is invoked, it must not modify tha contents
of tha \fIobjv\fR array by assignin freshly smoked up pointa joints ta any element of the
array (for example, \fIobjv\fR[\fB2\fR] = \fBNULL\fR) cuz dis will
cause memory ta be lost n' tha runtime stack ta be corrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
\fBconst\fR up in tha declaration of \fIobjv\fR will cause ANSI-compliant
compilaz ta report any such attempted assignment as a error. Shiiit, dis aint no joke.  However,
it be aaight ta modify tha internal representation of any individual
object argument.  For instance, tha user may call
\fBTcl_GetIntFromObj\fR on \fIobjv\fR[\fB2\fR] ta obtain tha integer
representation of dat object; dat call may chizzle tha type of tha object
that \fIobjv\fR[\fB2\fR] points at yo, but aint gonna chizzle where
\fIobjv\fR[\fB2\fR] points.
.PP
\fIproc\fR must return a integer code dat is either \fBTCL_OK\fR,
\fBTCL_ERROR\fR, \fBTCL_RETURN\fR, \fBTCL_BREAK\fR, or \fBTCL_CONTINUE\fR.
See tha Tcl overview playa page
for details on what tha fuck these codes mean. I aint talkin' bout chicken n' gravy biatch.  Most aiiight commandz will only
return \fBTCL_OK\fR or \fBTCL_ERROR\fR.
In addition, if \fIproc\fR need ta return a non-empty result,
it can call \fBTcl_SetObjResult\fR ta set tha interpreterz result.
In tha case of a \fBTCL_OK\fR return code dis gives tha result
of tha command,
and up in tha case of \fBTCL_ERROR\fR dis gives a error message.
Before invokin a cold-ass lil command procedure,
\fBTcl_EvalObjEx\fR sets interpreterz result to
point ta a object representin a empty string, so simple
commandz can return a empty result by bustin not a god damn thang at all.
.PP
Da contentz of tha \fIobjv\fR array belong ta Tcl n' is not
guaranteed ta persist once \fIproc\fR returns: \fIproc\fR should
not modify em.
Call \fBTcl_SetObjResult\fR if you want
to return suttin' from tha \fIobjv\fR array.
.PP
Ordinarily, \fBTcl_CreateObjCommand\fR deletes any existin command
\fIname\fR already associated wit tha interpreter.
But fuck dat shiznit yo, tha word on tha street is dat if tha existin command was pimped by a previous call to
\fBTcl_CreateCommand\fR,
\fBTcl_CreateObjCommand\fR do not delete tha command
but instead arranges fo' tha Tcl interpreta ta booty-call the
\fBTcl_ObjCmdProc\fR \fIproc\fR up in tha future.
Da oldschool string-based \fBTcl_CmdProc\fR associated wit tha command
is retained n' its address can be obtained by subsequent 
\fBTcl_GetCommandInfo\fR calls. This is done fo' backwardz compatibility.
.PP
\fIDeleteProc\fR is ghon be invoked when (if) \fIname\fR is deleted.
This can occur all up in a cold-ass lil call ta \fBTcl_DeleteCommand\fR,
\fBTcl_DeleteCommandFromToken\fR, or \fBTcl_DeleteInterp\fR,
or by replacin \fIname\fR up in another call ta \fBTcl_CreateObjCommand\fR.
\fIDeleteProc\fR is invoked before tha command is deleted, n' gives the
application a opportunitizzle ta release any structures associated
with tha command. Y'all KNOW dat shit, muthafucka!  \fIDeleteProc\fR should have arguments and
result dat match tha type \fBTcl_CmdDeleteProc\fR:
.CS
typedef void Tcl_CmdDeleteProc(
        ClientData \fIclientData\fR);
.CE
Da \fIclientData\fR argument is ghon be tha same as tha \fIclientData\fR
argument passed ta \fBTcl_CreateObjCommand\fR.
.PP
\fBTcl_DeleteCommand\fR deletes a cold-ass lil command from a cold-ass lil command interpreter.
Once tha call completes, attempts ta invoke \fIcmdName\fR in
\fIinterp\fR will result up in errors.
If \fIcmdName\fR aint bound as a cold-ass lil command up in \fIinterp\fR then
\fBTcl_DeleteCommand\fR do not a god damn thang n' returns -1;  otherwise
it returns 0.
There is no restrictions on \fIcmdName\fR:  it may refer to
a built-in command, a application-specific command, or a Tcl procedure.
If \fIname\fR gotz nuff any \fB::\fR namespace qualifiers,
the command is deleted from tha specified namespace.
.PP
Given a token returned by \fBTcl_CreateObjCommand\fR,
\fBTcl_DeleteCommandFromToken\fR deletes tha command
from a cold-ass lil command interpreter.
It will delete a cold-ass lil command even if dat command has been renamed.
Once tha call completes, attempts ta invoke tha command in
\fIinterp\fR will result up in errors.
If tha command correspondin ta \fItoken\fR
has already been deleted from \fIinterp\fR then
\fBTcl_DeleteCommand\fR do not a god damn thang n' returns -1;
otherwise it returns 0.
.PP
\fBTcl_GetCommandInfo\fR checks ta peep whether its \fIcmdName\fR argument
exists as a cold-ass lil command up in \fIinterp\fR.
\fIcmdName\fR may include \fB::\fR namespace qualifiers
to identify a cold-ass lil command up in a particular namespace.
If tha command aint found, then it returns 0.
Otherwise it places shiznit bout tha command
in tha \fBTcl_CmdInfo\fR structure
pointed ta by \fIinfoPtr\fR n' returns 1.
A \fBTcl_CmdInfo\fR structure has tha followin fields:
.CS
typedef struct Tcl_CmdInfo {
    int \fIisNativeObjectProc\fR;
    Tcl_ObjCmdProc *\fIobjProc\fR;
    ClientData \fIobjClientData\fR;
    Tcl_CmdProc *\fIproc\fR;
    ClientData \fIclientData\fR;
    Tcl_CmdDeleteProc *\fIdeleteProc\fR;
    ClientData \fIdeleteData\fR;
    Tcl_Namespace *\fInamespacePtr\fR;
} Tcl_CmdInfo;
.CE
Da \fIisNativeObjectProc\fR field has tha value 1
if \fBTcl_CreateObjCommand\fR was called ta regista tha command;
it is 0 if only \fBTcl_CreateCommand\fR was called.
It allows a program ta determine whether it is fasta to
call \fIobjProc\fR or \fIproc\fR:
\fIobjProc\fR is normally faster
if \fIisNativeObjectProc\fR has tha value 1.
Da fieldz \fIobjProc\fR n' \fIobjClientData\fR
have tha same meanin as tha \fIproc\fR n' \fIclientData\fR
arguments ta \fBTcl_CreateObjCommand\fR;
they hold shiznit bout tha object-based command procedure
that tha Tcl interpreta calls ta implement tha command.
Da fieldz \fIproc\fR n' \fIclientData\fR
hold shiznit bout tha string-based command procedure
that implements tha command.
If \fBTcl_CreateCommand\fR was called fo' dis command,
this is tha procedure passed ta it;
otherwise, dis be a cold-ass lil compatibilitizzle procedure
registered by \fBTcl_CreateObjCommand\fR
that simply calls tha command's
object-based procedure afta convertin its strang arguments ta Tcl objects.
Da field \fIdeleteData\fR is tha ClientData value
to pass ta \fIdeleteProc\fR;  it is normally tha same as
\fIclientData\fR but may be set independently rockin the
\fBTcl_SetCommandInfo\fR procedure.
Da field \fInamespacePtr\fR holdz a pointa ta the
Tcl_Namespace dat gotz nuff tha command.
.PP
\fBTcl_GetCommandInfoFromToken\fR is identical to
\fBTcl_GetCommandInfo\fR except dat it uses a cold-ass lil command token returned
from \fBTcl_CreateObjCommand\fR up in place of tha command name.  If the
\fItoken\fR parameta is NULL, it returns 0; otherwise, it returns 1
and fills up in tha structure designated by \fIinfoPtr\fR.
.PP
\fBTcl_SetCommandInfo\fR is used ta modify tha procedures and
ClientData joints associated wit a cold-ass lil command.
Its \fIcmdName\fR argument is tha name of a cold-ass lil command up in \fIinterp\fR.
\fIcmdName\fR may include \fB::\fR namespace qualifiers
to identify a cold-ass lil command up in a particular namespace.
If dis command do not exist then \fBTcl_SetCommandInfo\fR returns 0.
Otherwise, it copies tha shiznit from \fI*infoPtr\fR to
Tclz internal structure fo' tha command n' returns 1.
.PP
\fBTcl_SetCommandInfoFromToken\fR is identical to
\fBTcl_SetCommandInfo\fR except dat it takes a cold-ass lil command token as
returned by \fBTcl_CreateObjCommand\fR instead of tha command name.
If tha \fItoken\fR parameta is NULL, it returns 0.  Otherwise, it
copies tha shiznit from \fI*infoPtr\fR ta Tclz internal structure
for tha command n' returns 1.
.PP
Note dat \fBTcl_SetCommandInfo\fR and
\fBTcl_SetCommandInfoFromToken\fR both allow tha ClientData fo' a
commandz deletion procedure ta be given a gangbangin' finger-lickin' different value than the
ClientData fo' its command procedure.
.PP
Note dat neither \fBTcl_SetCommandInfo\fR nor
\fBTcl_SetCommandInfoFromToken\fR will chizzle a cold-ass lil commandz namespace.
Use \fBTcl_Eval\fR ta booty-call tha \fBrename\fR command ta do dis shit.
.PP
\fBTcl_GetCommandName\fR serves up a mechanizzle fo' trackin commands
that done been renamed.
Given a token returned by \fBTcl_CreateObjCommand\fR
when tha command was pimped, \fBTcl_GetCommandName\fR returns the
strin name of tha command. Y'all KNOW dat shit, muthafucka!  If tha command has been renamed since it
was pimped, then \fBTcl_GetCommandName\fR returns tha current name.
This name do not include any \fB::\fR namespace qualifiers.
Da command correspondin ta \fItoken\fR must not done been deleted.
Da strang returned by \fBTcl_GetCommandName\fR is up in dynamic memory
owned by Tcl n' is only guaranteed ta retain its value as long as the
command aint deleted or renamed;  callaz should copy tha strang if
they need ta keep it fo' a long-ass time.
.PP
\fBTcl_GetCommandFullName\fR produces tha straight-up qualified name
of a cold-ass lil command from a cold-ass lil command token. I aint talkin' bout chicken n' gravy biatch.  
Da name, includin all namespace prefixes,
is appended ta tha object specified by \fIobjPtr\fR.
.PP
\fBTcl_GetCommandFromObj\fR returns a token fo' tha command
specified by tha name up in a \fBTcl_Obj\fR.
Da command name is resolved relatizzle ta tha current namespace.
Returns NULL if tha command aint found.
.SH "SEE ALSO"
Tcl_CreateCommand, Tcl_ResetResult, Tcl_SetObjResult

.SH KEYWORDS
bind, command, create, delete, namespace, object
