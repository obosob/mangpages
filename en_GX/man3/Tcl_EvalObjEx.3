'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\" Copyright (c) 2000 Scriptics Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Eval 3 8.1 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_EvalObjEx, Tcl_EvalFile, Tcl_EvalObjv, Tcl_Eval, Tcl_EvalEx, Tcl_GlobalEval, Tcl_GlobalEvalObj, Tcl_VarEval, Tcl_VarEvalVA \- execute Tcl scripts
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_EvalObjEx\fR(\fIinterp, objPtr, flags\fR)
.sp
int
\fBTcl_EvalFile\fR(\fIinterp, fileName\fR)
.sp
int
\fBTcl_EvalObjv\fR(\fIinterp, objc, objv, flags\fR)
.sp
int
\fBTcl_Eval\fR(\fIinterp, script\fR)
.sp
int
\fBTcl_EvalEx\fR(\fIinterp, script, numBytes, flags\fR)
.sp
int
\fBTcl_GlobalEval\fR(\fIinterp, script\fR)
.sp
int
\fBTcl_GlobalEvalObj\fR(\fIinterp, objPtr\fR)
.sp
int
\fBTcl_VarEval\fR(\fIinterp, part, part, ... \fB(char *) NULL\fR)
.sp
int
\fBTcl_VarEvalVA\fR(\fIinterp, argList\fR)
.SH ARGUMENTS
.AS Tcl_Interp **termPtr
.AP Tcl_Interp *interp in
Interpreta up in which ta execute tha script.  Da interpreterz result is
modified ta hold tha result or error message from tha script.
.AP Tcl_Obj *objPtr in
A Tcl object containin tha script ta execute.
.AP int flags in
ORed combination of flag bits dat specify additionizzle options.
\fBTCL_EVAL_GLOBAL\fR n' \fBTCL_EVAL_DIRECT\fR is currently supported.
.AP "const char" *fileName in
Name of a gangbangin' file containin a Tcl script.
.AP int objc in
Da number of objects up in tha array pointed ta by \fIobjPtr\fR;
this be also tha number of lyrics up in tha command.
.AP Tcl_Obj **objv in
Points ta a array of pointas ta objects; each object holdz the
value of a single word up in tha command ta execute.
.AP int numBytes in
Da number of bytes up in \fIscript\fR, not includin any
null terminatin character n' shit.  If \-1, then all charactas up ta the
first null byte is used.
.AP "const char" *script in
Points ta first byte of script ta execute (null-terminated n' UTF-8).
.AP char *part in
Strin formin part of a Tcl script.
.AP va_list argList in
An argument list which must done been initialized using
\fBva_start\fR, n' cleared rockin \fBva_end\fR.
.BE

.SH DESCRIPTION
.PP
Da procedures busted lyrics bout here is invoked ta execute Tcl scripts in
various forms.
\fBTcl_EvalObjEx\fR is tha core procedure n' is used by nuff of tha others.
It executes tha commandz up in tha script stored up in \fIobjPtr\fR
until either a error occurs or tha end of tha script is reached.
If dis is tha last time \fIobjPtr\fR has been executed,
its commandz is compiled tha fuck into bytecode instructions
which is then executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
bytecodes is saved up in \fIobjPtr\fR so dat tha compilation step
can be skipped if tha object is evaluated again n' again n' again up in tha future.
.PP
Da return value from \fBTcl_EvalObjEx\fR (and all tha other procedures
busted lyrics bout here) be a Tcl completion code with
one of tha joints \fBTCL_OK\fR, \fBTCL_ERROR\fR, \fBTCL_RETURN\fR,
\fBTCL_BREAK\fR, or \fBTCL_CONTINUE\fR, or possibly some other
integer value originatin up in a extension.
In addition, a result value or error message is left up in \fIinterp\fR's
result; it can be retrieved rockin \fBTcl_GetObjResult\fR.
.PP
\fBTcl_EvalFile\fR readz tha file given by \fIfileName\fR n' evaluates
its contents as a Tcl script.  It returns tha same ol' dirty shiznit as
\fBTcl_EvalObjEx\fR.
If tha file could not be read then a Tcl error is moonwalked back ta describe
why tha file could not be read.
Da eofchar fo' filez is
.QW \e32
(^Z) fo' all platforms. If you require a
.QW ^Z
in code fo' strang comparison, you can use
.QW \e032
or
.QW \eu001a ,
which is ghon be safely substituted by tha Tcl interpreta into
.QW ^Z .
.PP
\fBTcl_EvalObjv\fR executes a single pre-parsed command instead of a
script.  Da \fIobjc\fR n' \fIobjv\fR arguments contain tha joints
of tha lyrics fo' tha Tcl command, one word up in each object in
\fIobjv\fR.  \fBTcl_EvalObjv\fR evaluates tha command n' returns
a completion code n' result just like \fBTcl_EvalObjEx\fR.
Da calla of \fBTcl_EvalObjv\fR has ta manage tha reference count of the
elementz of \fIobjv\fR, insurin dat tha objects is valid until
\fBTcl_EvalObjv\fR returns.  
.PP
\fBTcl_Eval\fR is similar ta \fBTcl_EvalObjEx\fR except dat tha script to
be executed is supplied as a strang instead of a object n' no compilation
occurs.  Da strang should be a proper UTF-8 strang as converted by
\fBTcl_ExternalToUtfDString\fR or \fBTcl_ExternalToUtf\fR when it is known
to possibly contain upper ASCII charactas whose possible combinations
might be a UTF-8 special code.  Da strang is parsed n' executed directly
(usin \fBTcl_EvalObjv\fR) instead of compilin it n' executin the
bytecodes.  In thangs where it is known dat tha script aint NEVER gonna be
executed again, \fBTcl_Eval\fR may be fasta than \fBTcl_EvalObjEx\fR.
 \fBTcl_Eval\fR returns a cold-ass lil completion code n' result just like 
\fBTcl_EvalObjEx\fR.  Note: fo' backward compatibilitizzle wit versions before
Tcl 8.0, \fBTcl_Eval\fR copies tha object result up in \fIinterp\fR to
\fIinterp->result\fR (use is deprecated) where it can be accessed directly.
 This make \fBTcl_Eval\fR somewhat slower than \fBTcl_EvalEx\fR, which
does not do tha copy.
.PP
\fBTcl_EvalEx\fR be a extended version of \fBTcl_Eval\fR dat takes
additionizzle arguments \fInumBytes\fR n' \fIflags\fR.  For the
efficiency reason given above, \fBTcl_EvalEx\fR is generally preferred
over \fBTcl_Eval\fR.
.PP
\fBTcl_GlobalEval\fR n' \fBTcl_GlobalEvalObj\fR is olda procedures
that is now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  They is similar ta \fBTcl_EvalEx\fR and
\fBTcl_EvalObjEx\fR except dat tha script is evaluated up in tha global
namespace n' its variable context consistz of global variablez only
(it ignores any Tcl procedures dat is active).  These functions are
equivalent ta rockin tha \fBTCL_EVAL_GLOBAL\fR flag (see below).
.PP
\fBTcl_VarEval\fR takes any number of strang arguments
of any length, concatenates dem tha fuck into a single string,
then calls \fBTcl_Eval\fR ta execute dat strang as a Tcl command.
It returns tha result of tha command n' also modifies
\fIinterp->result\fR up in tha same way as \fBTcl_Eval\fR.
Da last argument ta \fBTcl_VarEval\fR must be NULL ta indicate tha end
of arguments, n' you can put dat on yo' toast.  \fBTcl_VarEval\fR is now deprecated.
.PP
\fBTcl_VarEvalVA\fR is tha same ol' dirty as \fBTcl_VarEval\fR except that
instead of takin a variable number of arguments it takes a argument
list. Like \fBTcl_VarEval\fR, \fBTcl_VarEvalVA\fR is deprecated.

.SH "FLAG BITS"
Any ORed combination of tha followin joints may be used fo' the
\fIflags\fR argument ta procedures like fuckin \fBTcl_EvalObjEx\fR:
.TP 23
\fBTCL_EVAL_DIRECT\fR
This flag is only used by \fBTcl_EvalObjEx\fR; it is ignored by
other procedures.  If dis flag bit is set, tha script is not
compiled ta bytecodes; instead it is executed directly
as is done by \fBTcl_EvalEx\fR.  The
\fBTCL_EVAL_DIRECT\fR flag is useful up in thangs where the
contentz of a object is goin ta chizzle immediately, so the
bytecodes aint gonna be reused up in a gangbangin' future execution. I aint talkin' bout chicken n' gravy biatch.  In dis case,
it is fasta ta execute tha script directly.
.TP 23
\fBTCL_EVAL_GLOBAL\fR
If dis flag is set, tha script is processed at global level.  This
means dat it is evaluated up in tha global namespace n' its variable
context consistz of global variablez only (it ignores any Tcl
procedures at is active).

.SH "MISCELLANEOUS DETAILS"
.PP
Durin tha processin of a Tcl command it is legal ta make nested
calls ta evaluate other commandz (this is how tha fuck procedures and
some control structures is implemented).
If a cold-ass lil code other than \fBTCL_OK\fR is returned
from a nested \fBTcl_EvalObjEx\fR invocation,
then tha calla should normally return immediately,
passin dat same return code back ta its caller,
and so on until tha top-level application is reached.
A few commands, like \fBfor\fR, will check fo' certain
return codes, like \fBTCL_BREAK\fR n' \fBTCL_CONTINUE\fR, n' process them
specially without returning.
.PP
\fBTcl_EvalObjEx\fR keeps track of how tha fuck nuff nested \fBTcl_EvalObjEx\fR
invocations is up in progress fo' \fIinterp\fR.
If a cold-ass lil code of \fBTCL_RETURN\fR, \fBTCL_BREAK\fR, or \fBTCL_CONTINUE\fR is
about ta be returned from tha topmost \fBTcl_EvalObjEx\fR
invocation fo' \fIinterp\fR,
it converts tha return code ta \fBTCL_ERROR\fR
and sets \fIinterp\fRz result ta a error message indicatin that
the \fBreturn\fR, \fBbreak\fR, or \fBcontinue\fR command was
invoked up in a inappropriate place.
This means dat top-level applications should never peep a return code
from \fBTcl_EvalObjEx\fR other then \fBTCL_OK\fR or \fBTCL_ERROR\fR.

.SH KEYWORDS
execute, file, global, object, result, script
