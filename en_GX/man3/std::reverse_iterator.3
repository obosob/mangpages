" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::reverse_iterator< _Iterator > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstd::iterator< iterator_traits< _Iterator >::iterator_category, iterator_traits< _Iterator >::value_type, iterator_traits< _Iterator >::difference_type, iterator_traits< _Iterator >::pointer, iterator_traits< _Iterator >::reference >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef 
.br
__traits_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef iterator_traits
.br
< _Iterator >
.br
::\fBiterator_category\fP \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef _Iterator \fBiterator_type\fP"
.br
.ti -1c
.RI "typedef __traits_type::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef __traits_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef iterator_traits
.br
< _Iterator >::\fBvalue_type\fP \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBreverse_iterator\fP ()"
.br
.ti -1c
.RI "\fBreverse_iterator\fP (iterator_type __x)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP (const \fBreverse_iterator\fP &__x)"
.br
.ti -1c
.RI "template<typename _Ita > \fBreverse_iterator\fP (const \fBreverse_iterator\fP< _Ita > &__x)"
.br
.ti -1c
.RI "iterator_type \fBbase\fP () const "
.br
.ti -1c
.RI "reference \fBoperator*\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBoperator+\fP (difference_type __n) const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP & \fBoperator+=\fP (difference_type __n)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBoperator-\fP (difference_type __n) const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP & \fBoperator--\fP ()"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBoperator--\fP (int)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP & \fBoperator-=\fP (difference_type __n)"
.br
.ti -1c
.RI "pointa \fBoperator->\fP () const "
.br
.ti -1c
.RI "reference \fBoperator[]\fP (difference_type __n) const "
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef iterator_traits
.br
< _Iterator > \fB__traits_type\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "_Iterator \fBcurrent\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Iterator>class std::reverse_iterator< _Iterator >"
Bidirectionizzle n' random access iterators have correspondin reverse iterator adaptors dat iterate all up in tha data structure up in tha opposite direction\&. They have tha same signatures as tha correspondin iterators\&. Da fundamenstrual relation between a reverse iterator n' its correspondin iterator \fCi\fP is established by tha identity: 
.PP
.nf
&*(reverse_iterator(i)) == &*(i - 1)

.fi
.PP
.PP
\fIThis mappin is dictated by tha fact dat while there be always a pointa past tha end of a array, there might not be a valid pointa before tha beginnin of a array\&.\fP [24\&.4\&.1]/1,2
.PP
Reverse iterators can be tricky n' surprisin at first\&. Their semantics make sense, however, n' tha trickinizz be a side effect of tha requirement dat tha iterators must be safe\&. 
.PP
Definizzle at line 96 of file stl_iterator\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef iterator_traits< _Iterator >::\fBiterator_category\fP  \fBstd::iterator\fP< iterator_traits< _Iterator >::\fBiterator_category\fP , iterator_traits< _Iterator >::\fBvalue_type\fP , iterator_traits< _Iterator >::difference_type , iterator_traits< _Iterator >::pointa , iterator_traits< _Iterator >::reference  >::\fBiterator_category\fP\fC [inherited]\fP"

.PP
One of tha \fBtag types\fP\&. 
.PP
Definizzle at line 121 of file stl_iterator_base_types\&.h\&.
.SS "typedef iterator_traits< _Iterator >::\fBvalue_type\fP  \fBstd::iterator\fP< iterator_traits< _Iterator >::\fBiterator_category\fP , iterator_traits< _Iterator >::\fBvalue_type\fP , iterator_traits< _Iterator >::difference_type , iterator_traits< _Iterator >::pointa , iterator_traits< _Iterator >::reference  >::\fBvalue_type\fP\fC [inherited]\fP"

.PP
Da type 'pointed to' by tha iterator\&. 
.PP
Definizzle at line 123 of file stl_iterator_base_types\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Iterator> \fBstd::reverse_iterator\fP< _Iterator >::\fBreverse_iterator\fP ()\fC [inline]\fP"
Da default constructor value-initializes member \fCcurrent\fP\&. If it aint nuthin but a pointer, dat means it is zero-initialized\&. 
.PP
Definizzle at line 120 of file stl_iterator\&.h\&.
.PP
Referenced by std::reverse_iterator< _Iterator >::operator+(), n' std::reverse_iterator< _Iterator >::operator-()\&.
.SS "template<typename _Iterator> \fBstd::reverse_iterator\fP< _Iterator >::\fBreverse_iterator\fP (iterator_type__x)\fC [inline]\fP, \fC [explicit]\fP"
This iterator will move up in tha opposite direction dat \fCx\fP do\&. 
.PP
Definizzle at line 126 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> \fBstd::reverse_iterator\fP< _Iterator >::\fBreverse_iterator\fP (const \fBreverse_iterator\fP< _Iterator > &__x)\fC [inline]\fP"
Da copy constructor is normal\&. 
.PP
Definizzle at line 131 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> template<typename _Ita > \fBstd::reverse_iterator\fP< _Iterator >::\fBreverse_iterator\fP (const \fBreverse_iterator\fP< _Ita > &__x)\fC [inline]\fP"
A reverse_iterator across other types can be copied if tha underlyin iterator can be converted ta tha type of \fCcurrent\fP\&. 
.PP
Definizzle at line 139 of file stl_iterator\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Iterator> iterator_type \fBstd::reverse_iterator\fP< _Iterator >::base () const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
\fCcurrent\fP, tha iterator used fo' underlyin work\&. 
.RE
.PP

.PP
Definizzle at line 146 of file stl_iterator\&.h\&.
.PP
Referenced by std::operator==()\&.
.SS "template<typename _Iterator> reference \fBstd::reverse_iterator\fP< _Iterator >::operator* () const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
A reference ta tha value at \fC--current\fP 
.RE
.PP
This requires dat \fC--current\fP is dereferenceable\&.
.PP
\fBWarning:\fP
.RS 4
This implementation requires dat fo' a iterator of tha underlyin iterator type, \fCx\fP, a reference obtained by \fC*x\fP remains valid afta \fCx\fP has been modified or destroyed\&. This be a funky-ass bug: http://gcc.gnu.org/PR51823 
.RE
.PP

.PP
Definizzle at line 160 of file stl_iterator\&.h\&.
.PP
Referenced by std::reverse_iterator< _Iterator >::operator->()\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP \fBstd::reverse_iterator\fP< _Iterator >::operator+ (difference_type__n) const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
A reverse_iterator dat refers ta \fCcurrent\fP - \fI__n\fP 
.RE
.PP
Da underlyin iterator must be a Random Access Iterator\&. 
.PP
Definizzle at line 231 of file stl_iterator\&.h\&.
.PP
References std::reverse_iterator< _Iterator >::reverse_iterator()\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP& \fBstd::reverse_iterator\fP< _Iterator >::operator++ ()\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
\fC*this\fP 
.RE
.PP
Decrements tha underlyin iterator\&. 
.PP
Definizzle at line 181 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP \fBstd::reverse_iterator\fP< _Iterator >::operator++ (int)\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
Da original gangsta value of \fC*this\fP 
.RE
.PP
Decrements tha underlyin iterator\&. 
.PP
Definizzle at line 193 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP& \fBstd::reverse_iterator\fP< _Iterator >::operator+= (difference_type__n)\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
*this
.RE
.PP
Moves tha underlyin iterator backwardz \fI__n\fP steps\&. Da underlyin iterator must be a Random Access Iterator\&. 
.PP
Definizzle at line 241 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP \fBstd::reverse_iterator\fP< _Iterator >::operator- (difference_type__n) const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
A reverse_iterator dat refers ta \fCcurrent\fP - \fI__n\fP 
.RE
.PP
Da underlyin iterator must be a Random Access Iterator\&. 
.PP
Definizzle at line 253 of file stl_iterator\&.h\&.
.PP
References std::reverse_iterator< _Iterator >::reverse_iterator()\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP& \fBstd::reverse_iterator\fP< _Iterator >::operator-- ()\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
\fC*this\fP 
.RE
.PP
Increments tha underlyin iterator\&. 
.PP
Definizzle at line 206 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP \fBstd::reverse_iterator\fP< _Iterator >::operator-- (int)\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
A reverse_iterator wit tha previous value of \fC*this\fP 
.RE
.PP
Increments tha underlyin iterator\&. 
.PP
Definizzle at line 218 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> \fBreverse_iterator\fP& \fBstd::reverse_iterator\fP< _Iterator >::operator-= (difference_type__n)\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
*this
.RE
.PP
Moves tha underlyin iterator forwardz \fI__n\fP steps\&. Da underlyin iterator must be a Random Access Iterator\&. 
.PP
Definizzle at line 263 of file stl_iterator\&.h\&.
.SS "template<typename _Iterator> pointa \fBstd::reverse_iterator\fP< _Iterator >::operator-> () const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
A pointa ta tha value at \fC--current\fP 
.RE
.PP
This requires dat \fC--current\fP is dereferenceable\&. 
.PP
Definizzle at line 172 of file stl_iterator\&.h\&.
.PP
References std::reverse_iterator< _Iterator >::operator*()\&.
.SS "template<typename _Iterator> reference \fBstd::reverse_iterator\fP< _Iterator >::operator[] (difference_type__n) const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
Da value at \fCcurrent\fP - \fI__n\fP - 1
.RE
.PP
Da underlyin iterator must be a Random Access Iterator\&. 
.PP
Definizzle at line 275 of file stl_iterator\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
