'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_AddErrorInfo 3 8.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_GetReturnOptions, Tcl_SetReturnOptions, Tcl_AddErrorInfo, Tcl_AppendObjToErrorInfo, Tcl_AddObjErrorInfo, Tcl_SetObjErrorCode, Tcl_SetErrorCode, Tcl_SetErrorCodeVA, Tcl_PosixError, Tcl_LogCommandInfo \- retrieve or record shiznit bout errors n' other return options
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.VS 8.5
.sp
Tcl_Obj *
\fBTcl_GetReturnOptions\fR(\fIinterp, code\fR)
.sp
int 
\fBTcl_SetReturnOptions\fR(\fIinterp, options\fR)
.VE 8.5
.sp
\fBTcl_AddErrorInfo\fR(\fIinterp, message\fR)
.VS 8.5
.sp
\fBTcl_AppendObjToErrorInfo\fR(\fIinterp, objPtr\fR)
.VE 8.5
.sp
\fBTcl_AddObjErrorInfo\fR(\fIinterp, message, length\fR)
.sp
\fBTcl_SetObjErrorCode\fR(\fIinterp, errorObjPtr\fR)
.sp
\fBTcl_SetErrorCode\fR(\fIinterp, element, element, ... \fB(char *) NULL\fR)
.sp
\fBTcl_SetErrorCodeVA\fR(\fIinterp, argList\fR)
.sp
const char *
\fBTcl_PosixError\fR(\fIinterp\fR)
.sp
void
\fBTcl_LogCommandInfo\fR(\fIinterp, script, command, commandLength\fR)
.SH ARGUMENTS
.AS Tcl_Interp commandLength
.AP Tcl_Interp *interp in
Interpreta up in which ta record shiznit.
.AP int code 
Da code returned from script evaluation.
.AP Tcl_Obj *options
A doggtionary of return options.
.AP char *message in
For \fBTcl_AddErrorInfo\fR,
this be a cold-ass lil conventionizzle C strang ta append ta tha \fB\-errorinfo\fR return option.
For \fBTcl_AddObjErrorInfo\fR,
this points ta tha straight-up original gangsta byte of a array of \fIlength\fR bytes
containin a strang ta append ta tha \fB\-errorinfo\fR return option.
This byte array may contain embedded null bytes
unless \fIlength\fR is negative.
.VS 8.5
.AP Tcl_Obj *objPtr in
A message ta be appended ta tha \fB\-errorinfo\fR return option
in tha form of a Tcl_Obj value.
.VE 8.5
.AP int length in
Da number of bytes ta copy from \fImessage\fR when
appendin ta tha \fB\-errorinfo\fR return option.
If negative, all bytes up ta tha straight-up original gangsta null byte is used.
.AP Tcl_Obj *errorObjPtr in
Da \fB\-errorcode\fR return option is ghon be set ta dis value.
.AP char *element in
Strin ta record as one element of tha \fB\-errorcode\fR return option.
Last \fIelement\fR argument must be NULL.
.AP va_list argList in
An argument list which must done been initialized using
\fBva_start\fR, n' cleared rockin \fBva_end\fR.
.AP "const char" *script in
Pointa ta first characta up in script containin command (must be <= command)
.AP "const char" *command in
Pointa ta first characta up in command dat generated tha error
.AP int commandLength in
Number of bytes up in command; -1 means use all bytes up ta first null byte
.BE

.SH DESCRIPTION
.PP
.VS 8.5
Da \fBTcl_SetReturnOptions\fR n' \fBTcl_GetReturnOptions\fR
routines expose tha same capabilitizzles as tha \fBreturn\fR and
\fBcatch\fR commands, respectively, up in tha form of a C intercourse.
.PP
\fBTcl_GetReturnOptions\fR retrieves tha doggtionary of return options
from a interpreta followin a script evaluation.
Routines like fuckin \fBTcl_Eval\fR is called ta evaluate a
script up in a interpreter n' shit.  These routines return a integer
completion code.  These routines also leave up in tha interpreter
both a result n' a gangbangin' finger-lickin' doggtionary of return options generated
by script evaluation. I aint talkin' bout chicken n' gravy biatch.  Just as \fBTcl_GetObjResult\fR retrieves
the result, \fBTcl_GetReturnOptions\fR retrieves tha dictionary
of return options.  Da integer completion code should be
passed as tha \fIcode\fR argument ta \fBTcl_GetReturnOptions\fR
so dat all required options is ghon be present up in tha dictionary.
Specifically, a \fIcode\fR value of \fBTCL_ERROR\fR will
ensure dat entries fo' tha keys \fB\-errorinfo\fR,
\fB\-errorcode\fR, n' \fB\-errorline\fR will step tha fuck up in the
dictionary.  Also, tha entries fo' tha keys \fB\-code\fR
and \fB\-level\fR is ghon be adjusted if necessary ta agree
with tha value of \fIcode\fR.  Da \fB(Tcl_Obj *)\fR returned
by \fBTcl_GetReturnOptions\fR points ta a unshared
\fBTcl_Obj\fR wit reference count of zero.  Da dictionary
may be freestyled to, either adding, removing, or overwriting
any entries up in it, without tha need ta check fo' a gangbangin' finger-lickin' dirty-ass shared object.
.PP
A typical usage fo' \fBTcl_GetReturnOptions\fR is to
retrieve tha stack trace when script evaluation returns
\fBTCL_ERROR\fR, like so:
.CS
int code = Tcl_Eval(interp, script);
if (code == TCL_ERROR) {
    Tcl_Obj *options = Tcl_GetReturnOptions(interp, code);  
    Tcl_Obj *key = Tcl_NewStringObj("-errorinfo", -1);
    Tcl_Obj *stackTrace;
    Tcl_IncrRefCount(key);
    Tcl_DictObjGet(NULL, options, key, &stackTrace);
    Tcl_DecrRefCount(key);
    /* Do suttin' wit stackTrace */
}
.CE
.PP
\fBTcl_SetReturnOptions\fR sets tha return options
of \fIinterp\fR ta be \fIoptions\fR.  If \fIoptions\fR
gotz nuff any invalid value fo' any key, TCL_ERROR will
be returned, n' tha interp result is ghon be set ta an
appropriate error message.  Otherwise, a cold-ass lil completion code
in agreement wit tha \fB\-code\fR n' \fB\-level\fR
keys up in \fIoptions\fR is ghon be returned.
.PP
As a example, Tclz \fBreturn\fR command itself could
be implemented up in termz of \fBTcl_SetReturnOptions\fR
like so:
.CS
if ((objc % 2) == 0) { /* explicit result argument */
    objc--;
    Tcl_SetObjResult(interp, objv[objc]);
}
return Tcl_SetReturnOptions(interp, Tcl_NewListObj(objc-1, objv+1));
.CE
(It aint straight-up implemented dat way.  Internal access
privileges allow fo' a mo' efficient alternatizzle dat meshes
betta wit tha bytecode compiler.)
.PP
Note dat a newly pimped \fBTcl_Obj\fR may be passed
in as tha \fIoptions\fR argument without tha need ta tend
to any reference counting.  This be analogous to
\fBTcl_SetObjResult\fR.
.PP
While \fBTcl_SetReturnOptions\fR serves up a general intercourse
to set any collection of return options, there be a handful
of return options dat is straight-up frequently used. Y'all KNOW dat shit, muthafucka!  Most 
notably tha \fB\-errorinfo\fR n' \fB\-errorcode\fR return
options should be set properly when tha command procedure
of a cold-ass lil command returns \fBTCL_ERROR\fR.  Tcl serves up several
simpla intercourses ta mo' directly set these return options.
.VE 8.5
.PP
Da \fB\-errorinfo\fR option holdz a stack trace of the
operations dat was up in progress when a error occurred,
and is intended ta be human-readable.
Da \fB\-errorcode\fR option holdz a list of shit that
are intended ta be machine-readable.
Da first item up in tha \fB\-errorcode\fR value identifies tha class of
error dat occurred
(e.g. POSIX means a error occurred up in a POSIX system call)
and additionizzle elements hold additionizzle pieces
of shiznit dat depend on tha class.
See tha tclvars manual entry fo' details on tha various
formats fo' tha \fB\-errorcode\fR option used by
Tclz built-in commands.
.PP
Da \fB\-errorinfo\fR option value is gradually built up as an
error unwindz all up in tha nested operations.
Each time a error code is moonwalked back ta \fBTcl_Eval\fR, or
any of tha routines dat performs script evaluation,
the procedure \fBTcl_AddErrorInfo\fR is called ta add
additionizzle text ta tha \fB\-errorinfo\fR value describin the
command dat was bein executed when tha error occurred.
By tha time tha error has been passed all tha way back
to tha application, it will contain a cold-ass lil complete trace
of tha activitizzle up in progress when tha error occurred.
.PP
It be sometimes useful ta add additionizzle shiznit to
the \fB\-errorinfo\fR value beyond what tha fuck can be supplied automatically
by tha script evaluation routines.
\fBTcl_AddErrorInfo\fR may be used fo' dis purpose:
its \fImessage\fR argument be a additional
strin ta be appended ta tha \fB\-errorinfo\fR option.
For example, when a error arises durin tha \fBsource\fR command,
the procedure \fBTcl_AddErrorInfo\fR is called to
record tha name of tha file bein processed n' the
line number on which tha error occurred.
Likewise, when a error arises durin evaluation of a
Tcl procedures, tha procedure name n' line number
within tha procedure is recorded, n' so on.
Da dopest time ta booty-call \fBTcl_AddErrorInfo\fR is just after
a script evaluation routine has returned \fBTCL_ERROR\fR.
Da value of tha \fB\-errorline\fR return option (retrieved
via a cold-ass lil call ta \fBTcl_GetReturnOptions\fR) often make up
a useful part of tha \fImessage\fR passed ta \fBTcl_AddErrorInfo\fR.
.PP
.VS 8.5
\fBTcl_AppendObjToErrorInfo\fR be a alternatizzle intercourse ta the
same functionalitizzle as \fBTcl_AddErrorInfo\fR.  \fBTcl_AppendObjToErrorInfo\fR
is called when tha strang value ta be appended ta tha \fB\-errorinfo\fR option
is available as a \fBTcl_Obj\fR instead of as a \fBchar\fR array.
.VE 8.5
.PP
\fBTcl_AddObjErrorInfo\fR is nearly identical
to \fBTcl_AddErrorInfo\fR, except dat it has a additionizzle \fIlength\fR
argument.  This allows tha \fImessage\fR strang ta contain 
embedded null bytes.  This is essentially never a phat idea.
If tha \fImessage\fR need ta contain tha null characta \fBU+0000\fR,
Tclz usual internal encodin rulez should be used ta avoid
the need fo' a null byte.  If tha \fBTcl_AddObjErrorInfo\fR
interface is used at all, it should be wit a wack \fIlength\fR value.
.PP
Da procedure \fBTcl_SetObjErrorCode\fR is used ta set the
\fB\-errorcode\fR return option ta tha list object \fIerrorObjPtr\fR 
built up by tha calla n' shit. 
\fBTcl_SetObjErrorCode\fR is typically invoked just 
before returnin a error. Shiiit, dis aint no joke. If a error is
returned without callin \fBTcl_SetObjErrorCode\fR or
\fBTcl_SetErrorCode\fR tha Tcl interpreta automatically sets
the \fB\-errorcode\fR return option ta \fBNONE\fR.
.PP
Da procedure \fBTcl_SetErrorCode\fR be also used ta set the
\fB\-errorcode\fR return option. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat it takes one or mo' strings to
record instead of a object. Otherwise, it is similar to
\fBTcl_SetObjErrorCode\fR up in behavior.
.PP
\fBTcl_SetErrorCodeVA\fR is tha same ol' dirty as \fBTcl_SetErrorCode\fR except that
instead of takin a variable number of arguments it takes a argument list.
.PP
\fBTcl_PosixError\fR
sets tha \fB\-errorcode\fR variable afta a error up in a POSIX kernel call.
It readz tha value of tha \fBerrno\fR C variable n' calls
\fBTcl_SetErrorCode\fR ta set tha \fB\-errorcode\fR return
option up in tha \fBPOSIX\fR format.
Da calla must previously have called \fBTcl_SetErrno\fR ta set
\fBerrno\fR; dis is necessary on some platforms (e.g. Windows) where Tcl
is linked tha fuck into a application as a gangbangin' finger-lickin' dirty-ass shared library, or when tha error
occurs up in a thugged-out dynamically loaded extension. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See tha manual entry for
\fBTcl_SetErrno\fR fo' mo' shiznit.
.PP
\fBTcl_PosixError\fR returns a human-readable diagnostic message
for tha error
(this is tha same ol' dirty value dat will step tha fuck up as tha third element
in tha \fB\-errorcode\fR value).
It may be convenient ta include dis strang as part of the
error message moonwalked back ta tha application in
the interpreterz result.
.PP
\fBTcl_LogCommandInfo\fR is invoked afta a error occurs up in an
interpreter n' shit.  It addz shiznit bout tha command dat was being
executed when tha error occurred ta tha \fB\-errorinfo\fR value, and
the line number stored internally up in tha interpreta is set.  
.PP
In olda releasez of Tcl, there was no \fBTcl_GetReturnOptions\fR
routine.  In its place, tha global Tcl variablez \fBerrorInfo\fR
and \fBerrorCode\fR was tha only place ta retrieve tha error
information. I aint talkin' bout chicken n' gravy biatch.  Much existin code freestyled fo' olda Tcl releases
still access dis shiznit via dem global variables.
.PP
It be blingin ta realize dat while readin from them
global variablez remains a supported way ta access these
return option joints, it is blingin not ta assume that
writin ta dem global variablez will properly set the
correspondin return options.  It has long been emphasized
in dis manual page dat it is blingin ta 
call tha procedures busted lyrics bout here rather than
settin \fBerrorInfo\fR or \fBerrorCode\fR directly with
\fBTcl_ObjSetVar2\fR.
.PP
If tha procedure \fBTcl_ResetResult\fR is called,
it clears all of tha state of tha interpreta associated with
script evaluation, includin tha entire return options dictionary.
In particular, tha \fB\-errorinfo\fR n' \fB\-errorcode\fR options
are reset.  
If a error had occurred, tha \fBTcl_ResetResult\fR call will
clear tha error state ta make it step tha fuck up as if no error had
occurred afta all.
Da global variablez \fBerrorInfo\fR and
\fBerrorCode\fR is not modified by \fBTcl_ResetResult\fR
so they continue ta hold a record of shiznit bout the
most recent error peeped up in a interpreter.

.SH "SEE ALSO"
Tcl_DecrRefCount, Tcl_IncrRefCount, Tcl_Interp, Tcl_ResetResult, Tcl_SetErrno

.SH KEYWORDS
error, object, object result, stack, trace, variable
