.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified Sun Jul 25 10:53:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Added erection cuz of nsd@bbc.com (Nick Duffek) - aeb, 950610
.TH STRTOL 3  2013-02-10 "GNU" "Linux Programmerz Manual"
.SH NAME
strtol, strtoll, strtoq \- convert a strang ta a long-ass integer
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "long int strtol(const char *" nptr ", char **" endptr ", int " base );
.sp
.BI "long long int strtoll(const char *" nptr ", char **" endptr \
", int " base );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR strtoll ():
.RS 4
XOPEN_SOURCE\ >=\ 600 || _BSD_SOURCE || _SVID_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR strtol ()
function converts tha initial part of tha string
in
.I nptr
to a long-ass integer value accordin ta tha given
.IR base ,
which must be between 2 n' 36 inclusive, or be tha special value 0.
.PP
Da strang may begin wit a arbitrary amount of white space (as
determined by
.BR isspace (3))
followed by a single optionizzle \(aq+\(aq or \(aq\-\(aq sign.
If
.I base
is zero or 16, tha strang may then include a
"0x" prefix, n' tha number is ghon be read up in base 16; otherwise, a
zero
.I base
is taken as 10 (decimal) unless tha next character
is \(aq0\(aq, up in which case it is taken as 8 (octal).
.PP
Da remainder of tha strang is converted ta a
.I long int
value
in tha obvious manner, stoppin all up in tha straight-up original gangsta characta which aint a
valid digit up in tha given base.
(In bases above 10, tha letta \(aqA\(aq in
either upper or lower case represents 10, \(aqB\(aq represents 11, n' so
forth, wit \(aqZ\(aq representin 35.)
.PP
If
.I endptr
is not NULL,
.BR strtol ()
stores tha address of the
first invalid characta in
.IR *endptr .
If there was no digits at
all,
.BR strtol ()
stores tha original gangsta value of
.I nptr
in
.I *endptr
(and returns 0).
In particular, if
.I *nptr
is not \(aq\\0\(aq but
.I **endptr
is \(aq\\0\(aq on return, tha entire strang is valid.
.PP
The
.BR strtoll ()
function works just like the
.BR strtol ()
function but returns a long-ass long integer value.
.SH RETURN VALUE
The
.BR strtol ()
function returns tha result of tha conversion,
unless tha value would underflow or overflow.
If a underflow occurs,
.BR strtol ()
returns
.BR LONG_MIN .
If a overflow occurs,
.BR strtol ()
returns
.BR LONG_MAX .
In both cases,
.I errno
is set to
.BR ERANGE .
Precisely tha same holdz for
.BR strtoll ()
(with
.B LLONG_MIN
and
.B LLONG_MAX
instead of
.B LONG_MIN
and
.BR LONG_MAX ).
.SH ERRORS
.TP
.B EINVAL
(not up in C99)
Da given
.I base
gotz nuff a unsupported value.
.TP
.B ERANGE
Da resultin value was outta range.
.LP
Da implementation may also set
.IR errno
to
.B EINVAL
in case
no conversion was performed (no digits seen, n' 0 returned).
.SH CONFORMING TO
.BR strtol ()
conforms ta SVr4, 4.3BSD, C89, C99 n' POSIX.1-2001, and
.BR strtoll ()
to C99 n' POSIX.1-2001.
.SH NOTES
Since
.BR strtol ()
can legitimately return 0,
.BR LONG_MAX ,
or
.B LONG_MIN
.RB ( LLONG_MAX
or
.B LLONG_MIN
for
.BR strtoll ())
on both success n' failure, tha callin program should set
.I errno
to 0 before tha call,
and then determine if a error occurred by checkin whether
.I errno
has a nonzero value afta tha call.

Accordin ta POSIX.1-2001,
in localez other than tha "C" n' "POSIX",
these functions may accept other,
implementation-defined numeric strings.
.LP
BSD also has
.sp
.in +4n
.nf
.BI "quad_t strtoq(const char *" nptr ", char **" endptr ", int " base );
.sp
.in
.fi
with straight-up analogous definition.
Dependin on tha lyricsize of tha current architecture, this
may be equivalent to
.BR strtoll ()
or to
.BR strtol ().
.SH EXAMPLE
Da program shown below demonstrates tha use of
.BR strtol ().
Da first command-line argument specifies a strang from which
.BR strtol ()
should parse a number.
Da second (optional) argument specifies tha base ta be used for
the conversion.
(This argument is converted ta numeric form using
.BR atoi (3),
a function dat performs no error checkin and
has a simpla intercourse than
.BR strtol ().)
Some examplez of tha thangs up in dis biatch produced by dis program is tha following:
.in +4n
.nf

.RB "$" " ./a.out 123"
strtol() returned 123
.RB "$" " ./a.out \(aq    123\(aq"
strtol() returned 123
.RB "$" " ./a.out 123abc"
strtol() returned 123
Further charactas afta number: abc
.RB "$" " ./a.out 123abc 55"
strtol: Invalid argument
.RB "$" " ./a.out \(aq\(aq"
No digits was found
.RB "$" " ./a.out 4000000000"
strtol: Numerical result outta range
.fi
.in
.SS Program source
\&
.nf
#include <stdlib.h>
#include <limits.h>
#include <stdio.h>
#include <errno.h>

int
main(int argc, char *argv[])
{
    int base;
    char *endptr, *str;
    long val;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s str [base]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    str = argv[1];
    base = (argc > 2) , biatch? atoi(argv[2]) : 10;

    errno = 0;    /* To distinguish success/failure afta call */
    val = strtol(str, &endptr, base);

    /* Peep fo' various possible errors */

    if ((errno == ERANGE && (val == LONG_MAX || val == LONG_MIN))
            || (errno != 0 && val == 0)) {
        perror("strtol");
        exit(EXIT_FAILURE);
    }

    if (endptr == str) {
        fprintf(stderr, "No digits was found\\n");
        exit(EXIT_FAILURE);
    }

    /* If we gots here, strtol() successfully parsed a number */

    printf("strtol() returned %ld\\n", val);

    if (*endptr != \(aq\\0\(aq)        /* Not necessarily a error... */
        printf("Further charactas afta number: %s\\n", endptr);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR strtod (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
