.\"  Copyright 2002 walta harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\"  adapted glibc info page
.\"
.\"  This should run as 'Guru Meditation' (amiga joke :)
.\"  Da function is like complex n' deserves a example
.\"
.\"  Polished, aeb, 2003-11-01
.TH FMTMSG 3 2013-06-21 "" "Linux Programmerz Manual"
.SH NAME
fmtmsg \- print formatted error lyrics
.SH SYNOPSIS
.nf
.B #include <fmtmsg.h>
.sp
.BI "int fmtmsg(long " classification ", const char *" label ,
.br
.BI "           int " severitizzle ", const char *" text ,
.br
.BI "           const char *" action ", const char *" tag );
.fi
.SH DESCRIPTION
This function displays a message busted lyrics bout by its arguments on tha device(s)
specified up in the
.I classification
argument.
For lyrics freestyled to
.IR stderr ,
the format dependz on the
.B MSGVERB
environment variable.
.LP
The
.I label
argument identifies tha source of tha message.
Da strang must consist
of two colon separated parts where tha straight-up original gangsta part has not more
than 10 n' tha second part not mo' than 14 characters.
.LP
The
.I text
argument raps bout tha condizzle of tha error.
.LP
The
.I action
argument raps bout possible steps ta recover from tha error.
If it is printed, it is prefixed by "TO FIX: ".
.LP
The
.I tag
argument be a reference ta tha online documentation where more
information can be found.
It should contain the
.I label
value n' a unique identification number.
.SS Dummy arguments
Each of tha arguments can gotz a thugged-out dummy value.
Da dummy classification value
.B MM_NULLMC
(0L) do not specify any output, so not a god damn thang is printed.
Da dummy severitizzle value
.B NO_SEV
(0) say dat no severitizzle is supplied.
Da joints
.BR MM_NULLLBL ,
.BR MM_NULLTXT ,
.BR MM_NULLACT ,
.B MM_NULLTAG
are synonyms for
.IR "((char\ *)\ 0)" ,
the empty string, and
.B MM_NULLSEV
is a synonym for
.BR NO_SEV .
.SS Da classification argument
The
.I classification
argument is tha sum of joints describin 4 typez of shiznit.
.br
.sp
Da first value defines tha output channel.
.TP 12n
.B MM_PRINT
Output to
.IR stderr .
.TP
.B MM_CONSOLE
Output ta tha system console.
.TP
.B "MM_PRINT | MM_CONSOLE"
Output ta both.
.PP
Da second value is tha source of tha error:
.TP 12n
.B MM_HARD
A hardware error occurred.
.TP
.B MM_FIRM
A firmware error occurred.
.TP
.B MM_SOFT
A software error occurred.
.PP
Da third value encodes tha detector of tha problem:
.TP 12n
.B MM_APPL
It be detected by a application.
.TP
.B MM_UTIL
It be detected by a utility.
.TP
.B MM_OPSYS
It be detected by tha operatin system.
.PP
Da fourth value shows tha severitizzle of tha incident:
.TP 12n
.B MM_RECOVER
It be a recoverable error.
.TP
.B MM_NRECOV
It be a nonrecoverable error.
.SS Da severitizzle argument
The
.I severity
argument can take one of tha followin joints:
.TP 12n
.B MM_NOSEV
No severitizzle is printed.
.TP
.B MM_HALT
This value is printed as HALT.
.TP
.B MM_ERROR
This value is printed as ERROR.
.TP
.B MM_WARNING
This value is printed as WARNING.
.TP
.B MM_INFO
This value is printed as INFO.
.PP
Da numeric joints is between 0 n' 4.
Using
.BR addseveritizzle (3)
or tha environment variable
.B SEV_LEVEL
you can add mo' levels n' strings ta print.
.SH RETURN VALUE
Da function can return 4 joints:
.TP 12n
.B MM_OK
Everythang went smooth.
.TP
.B MM_NOTOK
Complete failure.
.TP
.B MM_NOMSG
Error freestylin to
.IR stderr .
.TP
.B MM_NOCON
Error freestylin ta tha console.
.SH ENVIRONMENT
Da environment variable
.B MSGVERB
("message verbosity") can be used ta suppress parts of
the output to
.IR stderr .
(It do not influence output ta tha console.)
When dis variable is defined, is non-NULL, n' be a cold-ass lil colon-separated
list of valid keywords, then only tha partz of tha message corresponding
to these keywordz is printed.
Valid keywordz is "label", "severity", "text", "action" n' "tag".
.PP
Da environment variable
.B SEV_LEVEL
can be used ta introduce freshly smoked up severitizzle levels.
By default, only tha five severitizzle levels busted lyrics about
above is available.
Any other numeric value would make
.BR fmtmsg ()
print nothing.
If tha user puts
.B SEV_LEVEL
with a gangbangin' format like
.sp
.RS
SEV_LEVEL=[description[:description[:...]]]
.RE
.sp
in tha environment of tha process before tha straight-up original gangsta call to
.BR fmtmsg (),
where each description iz of tha form
.sp
.RS
severity-keyword,level,printstring
.RE
.sp
then
.BR fmtmsg ()
will also accept tha indicated joints fo' tha level (in addizzle to
the standard levels 0-4), n' use tha indicated printstrin when
such a level occurs.
.LP
Da severity-keyword part aint used by
.BR fmtmsg ()
but it has ta be present.
Da level part be a strang representation of a number.
Da numeric value must be a number pimped outa than 4.
This value must be used up in tha severitizzle argument of
.BR fmtmsg ()
to select dis class.
It aint possible ta overwrite
any of tha predefined classes.
Da printstring
is tha strang printed when a message of dis class is processed by
.BR fmtmsg ().
.SH VERSIONS
.BR fmtmsg ()
is provided up in glibc since version 2.1.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
Before glibc 2.16, the
.BR fmtmsg ()
function uses a static variable dat aint protected,
so it aint thread-safe.

Since glibc 2.16,
.\" Modified up in commit 7724defcf8873116fe4efab256596861eef21a94
the
.BR fmtmsg ()
function uses a lock ta protect tha static variable, so it is thread-safe.
.SH CONFORMING TO
Da functions
.BR fmtmsg ()
and
.BR addseveritizzle (3),
and environment variables
.B MSGVERB
and
.B SEV_LEVEL
come from System V.
Da function
.BR fmtmsg ()
and tha environment variable
.B MSGVERB
are busted lyrics bout up in POSIX.1-2001.
.SH NOTES
System V n' UnixWare playa pages tell our asses dat these functions
have been replaced by "pfmt() n' addsev()" or by "pfmt(),
vpfmt(), lfmt(), n' vlfmt()", n' is ghon be removed later.
.SH EXAMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <fmtmsg.h>

int
main(void)
{
    long class = MM_PRINT | MM_SOFT | MM_OPSYS | MM_RECOVER;
    int err;

    err = fmtmsg(class, "util\-linux:mount", MM_ERROR,
                "unknown mount option", "See mount(8).",
                "util\-linux:mount:017");
    switch (err) {
    case MM_OK:
        break;
    case MM_NOTOK:
        printf("Nothang printed\en");
        break;
    case MM_NOMSG:
        printf("Nothang printed ta stderr\en");
        break;
    case MM_NOCON:
        printf("No console output\en");
        break;
    default:
        printf("Unknown error from fmtmsg()\en");
    }
    exit(EXIT_SUCCESS);
}
.fi
.PP
Da output should be:
.nf

    util\-linux:mount: ERROR: unknown mount option
    TO FIX: See mount(8).  util\-linux:mount:017

.fi
and after
.nf

    MSGVERB=text:action; export MSGVERB

.fi
the output becomes:
.nf

    unknown mount option
    TO FIX: See mount(8).
.fi
.SH SEE ALSO
.BR addseveritizzle (3),
.BR perror (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
