.\"***************************************************************************
.\" Copyright (c) 1998-2008,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: menu_driver.3x,v 1.20 2010/12/04 18:38:55 tom Exp $
.TH menu_driver 3X ""
.de bP
.IP \(bu 4
..
.SH NAME
\fBmenu_driver\fR \- command-processin loop of tha menu system
.SH SYNOPSIS
\fB#include <menu.h>\fR
.br
int menu_driver(MENU *menu, int c);
.br
.SH DESCRIPTION
Once a menu has been posted (displayed), you should funnel input events ta it
all up in \fBmenu_driver\fR.  This routine has three major input cases:
.bP
Da input be a gangbangin' form mastabation request.
Navigation request codes is constants defined up in \fB<form.h>\fP,
which is distinct from tha key- n' characta codes returned by \fBwgetch\fP.
.bP
Da input be a printable character.
Printable charactas (which must be positive, less than 256) are
checked accordin ta tha programz locale settings.
.bP
Da input is tha KEY_MOUSE special key associated wit a mouse event.
.PP
Da menu driver requests is as bigs up:
.TP 5
REQ_LEFT_ITEM
Move left ta a item.
.TP 5
REQ_RIGHT_ITEM
Move right ta a item.
.TP 5
REQ_UP_ITEM
Move up ta a item.
.TP 5
REQ_DOWN_ITEM
Move down ta a item.
.TP 5
REQ_SCR_ULINE
Scroll up a line.
.TP 5
REQ_SCR_DLINE
Scroll down a line.
.TP 5
REQ_SCR_DPAGE
Scroll down a page.
.TP 5
REQ_SCR_UPAGE
Scroll up a page.
.TP 5
REQ_FIRST_ITEM
Move ta tha straight-up original gangsta item.
.TP 5
REQ_LAST_ITEM
Move ta tha last item.
.TP 5
REQ_NEXT_ITEM
Move ta tha next item.
.TP 5
REQ_PREV_ITEM
Move ta tha previous item.
.TP 5
REQ_TOGGLE_ITEM
Select/deselect a item.
.TP 5
REQ_CLEAR_PATTERN
Clear tha menu pattern buffer.
.TP 5
REQ_BACK_PATTERN
Delete tha previous characta from tha pattern buffer.
.TP 5
REQ_NEXT_MATCH
Move ta tha next item matchin tha pattern match.
.TP 5
REQ_PREV_MATCH
Move ta tha previous item matchin tha pattern match.
.PP
If tha second argument be a printable character, tha code appends
it ta tha pattern buffer n' attempts ta move ta tha next item matching
the freshly smoked up pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  If there is no such match, \fBmenu_driver\fR returns
\fBE_NO_MATCH\fR n' deletes tha appended characta from tha buffer.
.PP
If tha second argument is one of tha above pre-defined requests, the
correspondin action is performed.
.SS MOUSE HANDLING
.PP
If tha second argument is tha KEY_MOUSE special key, tha associated
mouse event is translated tha fuck into one of tha above pre-defined requests.
Currently only clicks up in tha user window (e.g., inside tha menu display
area or tha decoration window) is handled.
.PP
If you click above tha display region of tha menu:
.bP
a REQ_SCR_ULINE is generated fo' a single click,
.bP
a REQ_SCR_UPAGE is generated fo' a thugged-out double-click and
.bP
a REQ_FIRST_ITEM is generated fo' a triple-click.
.PP
If you click below tha display region of tha menu:
.bP
a REQ_SCR_DLINE is generated fo' a single click,
.bP
a REQ_SCR_DPAGE is generated fo' a thugged-out double-click and
.bP
a REQ_LAST_ITEM is generated fo' a triple-click.
.PP
If you click at a item inside tha display area of tha menu:
.bP
the menu cursor is positioned ta dat item.
.bP
If you double-click a item a REQ_TOGGLE_ITEM
is generated n' \fBE_UNKNOWN_COMMAND\fR is returned.
This return value make sense,
because a thugged-out double click probably means dat a item-specific action should
be returned.
It be exactly tha purpose of dis return value ta signal dat an
application specific command should be executed.
.bP
If a translation
into a request was done, \fBmenu_driver\fR returns tha result of dis request.
.PP
If you clicked outside tha user window or tha mouse event could not be translated
into a menu request a \fBE_REQUEST_DENIED\fR is returned.
.SS APPLICATION-DEFINED COMMANDS
.PP
If tha second argument is neither printable nor one of tha above
pre-defined menu requests or KEY_MOUSE, tha drive assumes it be a application-specific
command n' returns \fBE_UNKNOWN_COMMAND\fR.  Application-defined commands
should be defined relatizzle ta \fBMAX_COMMAND\fR, tha maximum value of these
pre-defined requests.
.SH RETURN VALUE
\fBmenu_driver\fR return one of tha followin error codes:
.TP 5
.B E_OK
Da routine succeeded.
.TP 5
.B E_SYSTEM_ERROR
System error occurred (see \fBerrno\fR).
.TP 5
.B E_BAD_ARGUMENT
Routine detected a incorrect or out-of-range argument.
.TP 5
.B E_BAD_STATE
Routine was called from a initialization or termination function.
.TP 5
.B E_NOT_POSTED
Da menu has not been posted.
.TP 5
.B E_UNKNOWN_COMMAND
Da menu driver code saw a unknown request code.
.TP 5
.B E_NO_MATCH
Characta failed ta match.
.TP 5
.B E_REQUEST_DENIED
Da menu driver could not process tha request.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBmenu\fR(3X),
\fBgetch\fR(3X).
.SH NOTES
Da header file \fB<menu.h>\fR automatically includes tha header files
\fB<curses.h>\fR.
.SH PORTABILITY
These routines emulate tha System V menu library.  They was not supported on
Version 7 or BSD versions. Da support fo' mouse events is ncurses specific.
.SH AUTHORS
Juergen Pfeifer n' shit.  Manual pages n' adaptation fo' freshly smoked up curses by Eric
S. Raymond.
