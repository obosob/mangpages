.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::POP3 3"
.TH Mail::Box::POP3 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::POP3 \- handle POP3 foldaz as client
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::POP3
\&   be a Mail::Box::Net
\&   be a Mail::Box
\&   be a Mail::Reporter
\&
\& Mail::Box::POP3 is extended by
\&   Mail::Box::POP3s
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::POP3;
\& mah $folda = Mail::Box::POP3\->new(folda => $ENV{MAIL}, ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Maintain a gangbangin' folda which has its lyrics stored on a remote server n' shit.  The
communication between tha client application n' tha server is implemented
usin tha \s-1POP3\s0 protocol.  This class uses Mail::Transport::POP3 to
hide tha transhiznit of shiznit, n' focusses solely on tha erect
handlin of lyrics within a \s-1POP3\s0 folder.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.ie n .IP "overload: \fB""""\fR()" 4
.el .IP "overload: \fB``''\fR()" 4
.IX Item "overload: """"()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fB@{}\fR()" 4
.IX Item "overload: @{}()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fBcmp\fR()" 4
.IX Item "overload: cmp()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::POP3\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::POP3->new(OPTIONS)"
For authentications, you have three chizzles: specify a gangbangin' foldername which
resemblez a \s-1URL,\s0 or specify a pop-client object, or separate options
for user, password, pop-server n' server-port.
.Sp
.Vb 10
\& \-Option           \-\-Defined up in     \-\-Default
\&  access             Mail::Box        \*(Aqr\*(Aq
\&  authenticate                        \*(AqAUTO\*(Aq
\&  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
\&  body_type          Mail::Box        Mail::Message::Body::Lines
\&  coerce_options     Mail::Box        []
\&  create             Mail::Box        <not applicable>
\&  extract            Mail::Box        10240
\&  field_type         Mail::Box        undef
\&  fix_headaz        Mail::Box        <false>
\&  folda             Mail::Box        <not applicable>
\&  folderdir          Mail::Box        <not used>
\&  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
\&  head_type          Mail::Box        Mail::Message::Head::Complete
\&  keep_dups          Mail::Box        <false>
\&  lock_file          Mail::Box        undef
\&  lock_timeout       Mail::Box        1 hour
\&  lock_type          Mail::Box        \*(AqNONE\*(Aq
\&  lock_wait          Mail::Box        10 seconds
\&  locker             Mail::Box        undef
\&  log                Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  manager            Mail::Box        undef
\&  message_type       Mail::Box        Mail::Box::POP3::Message
\&  multipart_type     Mail::Box        Mail::Message::Body::Multipart
\&  password           Mail::Box::Net   undef
\&  pop_client                          undef
\&  remove_when_empty  Mail::Box        <false>
\&  save_on_exit       Mail::Box        <true>
\&  server_name        Mail::Box::Net   undef
\&  server_port        Mail::Box::Net   110
\&  trace              Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  trusted            Mail::Box        <false>
\&  username           Mail::Box::Net   undef
.Ve
.RS 4
.IP "access => \s-1MODE\s0" 2
.IX Item "access => MODE"
.PD 0
.IP "authenticate => '\s-1LOGIN\s0'|'\s-1APOP\s0'|'\s-1AUTO\s0'" 2
.IX Item "authenticate => 'LOGIN'|'APOP'|'AUTO'"
.PD
\&\s-1POP3\s0 can use two methodz of authentication: tha oldschool \s-1LOGIN\s0 protocol, which
transmits a username n' password up in plain text, n' tha newer \s-1APOP\s0
protocol which uses \s-1MD5\s0 encryption. I aint talkin' bout chicken n' gravy biatch.  \s-1APOP\s0 is therefore much better, however
not always supported by tha server n' shit.  With \s-1AUTO,\s0 first \s-1APOP\s0 is tried and
if dat fails \s-1LOGIN.\s0
.IP "body_delayed_type => \s-1CLASS\s0" 2
.IX Item "body_delayed_type => CLASS"
.PD 0
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "coerce_options => \s-1ARRAY\s0" 2
.IX Item "coerce_options => ARRAY"
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
.IP "extract => \s-1INTEGER\s0 | \s-1CODE\s0 | \s-1METHOD\s0 | '\s-1LAZY\s0'|'\s-1ALWAYS\s0'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "fix_headaz => \s-1BOOLEAN\s0" 2
.IX Item "fix_headaz => BOOLEAN"
.IP "folda => \s-1FOLDERNAME\s0" 2
.IX Item "folda => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => \s-1CLASS\s0" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "keep_dups => \s-1BOOLEAN\s0" 2
.IX Item "keep_dups => BOOLEAN"
.IP "lock_file => \s-1FILENAME\s0" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => \s-1SECONDS\s0" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => \s-1SECONDS\s0" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => \s-1OBJECT\s0" 2
.IX Item "locker => OBJECT"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1MANAGER\s0" 2
.IX Item "manager => MANAGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => \s-1CLASS\s0" 2
.IX Item "multipart_type => CLASS"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "pop_client => \s-1OBJECT\s0" 2
.IX Item "pop_client => OBJECT"
.PD
Yo ass may wanna specify yo' own pop-client object.  Da object
which is passed must extend Mail::Transport::POP3.
.IP "remove_when_empty => \s-1BOOLEAN\s0" 2
.IX Item "remove_when_empty => BOOLEAN"
.PD 0
.IP "save_on_exit => \s-1BOOLEAN\s0" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "server_name => \s-1HOSTNAME\s0" 2
.IX Item "server_name => HOSTNAME"
.IP "server_port => \s-1INTEGER\s0" 2
.IX Item "server_port => INTEGER"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.RE
.RS 4
.PD
.Sp
example:
.Sp
.Vb 2
\& mah $url = \*(Aqpop3://user:password@pop.xs4all.nl\*(Aq
\& mah $pop = Mail::Box::POP3\->new($url);
\&
\& mah $pop = $mgr\->open(type => \*(Aqpop3\*(Aq,
\&    username => \*(Aqmyname\*(Aq, password => \*(Aqmypassword\*(Aq,
\&    server_name => \*(Aqpop.xs4all.nl\*(Aq);
.Ve
.RE
.SS "Da folder"
.IX Subsection "Da folder"
.ie n .IP "$obj\->\fBaddMessage\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->addMessage(MESSAGE)"
It be impossible ta write lyrics ta tha average \s-1POP3\s0 server n' shit.  There are
extensions ta tha protocol which do permit it, however these is not
implemented (yet, patches welcome).
.Sp
\&\f(CW\*(C`undef\*(C'\fR is returned, n' a error displayed. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat no complaint is
given when tha \s-1MESSAGE\s0 is \f(CW\*(C`undef\*(C'\fR itself.
.Sp
.Vb 2
\& \-Option\-\-Defined in\-\-Default
\&  share   Mail::Box   <not used>
.Ve
.RS 4
.IP "share => \s-1BOOLEAN\s0" 2
.IX Item "share => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBaddLyrics\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddLyrics\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->addLyrics(MESSAGES)"
.PD
As useless as \fIaddMessage()\fR.  Da only aaight call ta dis method
is without any message.
.IP "Mail::Box::POP3\->\fBappendLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::POP3->appendLyrics(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->close(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->copyTo(FOLDER, OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->delete(OPTIONS)"
It aint possible ta delete a \s-1POP3\s0 folda remotely: tha dopest we can do
is remove all tha lyrics up in dat shit... which is tha action implemented here.
A notice is logged bout all dis bullshit.
.Sp
.Vb 2
\& \-Option   \-\-Defined in\-\-Default
\&  recursive  Mail::Box   <not used>
.Ve
.RS 4
.IP "recursive => \s-1BOOLEAN\s0" 2
.IX Item "recursive => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.IX Item "$obj->folderdir([DIRECTORY])"
.PD
See \*(L"\s-1METHODS\*(R"\s0 up in Mail::Box::Net
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBupdate\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBupdate\fR()" 4
.IX Item "$obj->update()"
\&\s-1NOT IMPLEMENTED YET\s0
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
See \*(L"Da folder\*(R" up in Mail::Box
.SS "Folda flags"
.IX Subsection "Folda flags"
.ie n .IP "$obj\->\fBaccess\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaccess\fR()" 4
.IX Item "$obj->access()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->modified([BOOLEAN])"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwritable\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwritable\fR()" 4
.IX Item "$obj->writable()"
See \*(L"Folda flags\*(R" up in Mail::Box
.SS "Da lyrics"
.IX Subsection "Da lyrics"
.ie n .IP "$obj\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.IX Item "$obj->current([NUMBER|MESSAGE|MESSAGE-ID])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfind\fR(MESSAGE-ID)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(MESSAGE-ID)" 4
.IX Item "$obj->find(MESSAGE-ID)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.IX Item "$obj->findFirstLabeled(LABEL, [BOOLEAN, [ARRAY-OF-MSGS]])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.IX Item "$obj->message(INDEX [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.IX Item "$obj->messageId(MESSAGE-ID [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageIds\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIds\fR()" 4
.IX Item "$obj->messageIds()"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.el .IP "\f(CW$obj\fR\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.IX Item "$obj->lyrics(['ALL',RANGE,'ACTIVE','DELETED',LABEL,!LABEL,FILTER])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->nrLyrics(OPTIONS)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.IX Item "$obj->scanForLyrics(MESSAGE, MESSAGE-IDS, TIMESPAN, WINDOW)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.SS "Sub-folders"
.IX Subsection "Sub-folders"
.ie n .IP "$obj\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->listSubFolders(OPTIONS)"
.PD 0
.IP "Mail::Box::POP3\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::POP3->listSubFolders(OPTIONS)"
.PD
Da standard \s-1POP3\s0 protocol do not support sub-folders, so an
empty list is ghon be returned up in any case.
.Sp
.Vb 5
\& \-Option    \-\-Defined up in     \-\-Default
\&  check       Mail::Box        <false>
\&  folda      Mail::Box        <from callin object>
\&  folderdir   Mail::Box        <from folder>
\&  skip_empty  Mail::Box        <false>
.Ve
.RS 4
.IP "check => \s-1BOOLEAN\s0" 2
.IX Item "check => BOOLEAN"
.PD 0
.IP "folda => \s-1FOLDERNAME\s0" 2
.IX Item "folda => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "skip_empty => \s-1BOOL\s0" 2
.IX Item "skip_empty => BOOL"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "$obj->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.IP "Mail::Box::POP3\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "Mail::Box::POP3->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->openRelatedFolder(OPTIONS)"
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->openSubFolder(OPTIONS)"
It aint possible ta open a sub-folda fo' a \s-1POP3\s0 folder, cuz that
is not supported by tha straight-up legit \s-1POP3\s0 protocol. In any case, \f(CW\*(C`undef\*(C'\fR
is moonwalked back ta indicate a gangbangin' failure.
.ie n .IP "$obj\->\fBtopFolderWithLyrics\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "$obj->topFolderWithLyrics()"
.PD 0
.IP "Mail::Box::POP3\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "Mail::Box::POP3->topFolderWithLyrics()"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->coerce(MESSAGE, OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBcreate\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->create(FOLDER, OPTIONS)"
.PD 0
.IP "Mail::Box::POP3\->\fBcreate\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "Mail::Box::POP3->create(FOLDER, OPTIONS)"
.PD
It aint possible ta create a freshly smoked up folda on a \s-1POP3\s0 server n' shit.  This method
will always return \f(CW\*(C`false\*(C'\fR.
.Sp
.Vb 2
\& \-Option   \-\-Defined in\-\-Default
\&  folderdir  Mail::Box   <not used>
.Ve
.RS 4
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.IX Item "$obj->determineBodyType(MESSAGE, HEAD)"
.PD
See \*(L"Internals\*(R" up in Mail::Box
.IP "Mail::Box::POP3\->\fBfoundIn\fR([\s-1FOLDERNAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::POP3->foundIn([FOLDERNAME], OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBgetHead\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHead\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->getHead(MESSAGE)"
Read tha header fo' tha specified message from tha remote server.
.ie n .IP "$obj\->\fBgetHeadAndBody\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHeadAndBody\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->getHeadAndBody(MESSAGE)"
Read all data fo' tha specified message from tha remote server.
.ie n .IP "$obj\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.IX Item "$obj->lineSeparator([STRING|'CR'|'LF'|'CRLF'])"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlocker\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocker\fR()" 4
.IX Item "$obj->locker()"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBpopClient\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBpopClient\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->popClient(OPTIONS)"
Returns tha pop client object.  This do not establish tha connection.
.Sp
.Vb 2
\& \-Option \-\-Default
\&  use_ssl  <false>
.Ve
.RS 4
.IP "use_ssl => \s-1BOOLEAN\s0" 2
.IX Item "use_ssl => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBread\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->read(OPTIONS)"
.PD
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->readLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->storeMessage(MESSAGE)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeThreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeUnthreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->updateLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->write(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->writeLyrics(OPTIONS)"
.Vb 2
\& \-Option  \-\-Defined in\-\-Default
\&  lyrics  Mail::Box   <required>
.Ve
.RS 4
.IP "lyrics => \s-1ARRAY\s0" 2
.IX Item "lyrics => ARRAY"
.RE
.RS 4
.RE
.SS "Other methods"
.IX Subsection "Other methods"
.PD 0
.ie n .IP "$obj\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "$obj->timespan2seconds(TIME)"
.IP "Mail::Box::POP3\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "Mail::Box::POP3->timespan2seconds(TIME)"
.PD
See \*(L"Other methods\*(R" up in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::POP3\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::POP3->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::POP3\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::POP3->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::POP3\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::POP3->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Different kindz of folders"
.IX Subsection "Different kindz of folders"
.SS "Available folda types"
.IX Subsection "Available folda types"
.SS "Folda class implementation"
.IX Subsection "Folda class implementation"
.SS "How tha fuck \s-1POP3\s0 foldaz work"
.IX Subsection "How tha fuck POP3 foldaz work"
Rfc1939 defines how tha fuck \s-1POP3\s0 works.  \s-1POP3\s0 be a straight-up simple protocol to
receive lyrics from a server ta a userz client.  \s-1POP3\s0 be also
really limited: it can only be used ta fetch lyrics yo, but has not
many ways ta limit tha amount of network traffic, like tha \s-1IMAP4\s0
protocol has.
.PP
One \s-1POP3\s0 account represents only one folder: there is no way of
sub-foldaz up in \s-1POP3.  POP3\s0 don't support freestylin (except for
some message status flags).
.SS "This implementation"
.IX Subsection "This implementation"
Da protocol specifics is implemented up in Mail::Transport::POP3,
written by Liz Mattijsen. I aint talkin' bout chicken n' gravy biatch.  That module do not use any of the
other \s-1POP3\s0 modulez available on \s-1CPAN\s0 fo' tha reason dat MailBox
tries ta be smarter: it is capable of re-establishin fucked up \s-1POP3\s0
connection when tha server supports UIDs.
.PP
Da implementation has shown ta work wit nuff different \s-1POP\s0 servers.
In tha test directory of tha distribution, yo big-ass booty is ghon find a small
server implementation, which is used ta test tha client.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot create \s-1POP3\s0 client fo' $name." 4
.el .IP "Error: Cannot create \s-1POP3\s0 client fo' \f(CW$name\fR." 4
.IX Item "Error: Cannot create POP3 client fo' $name."
Da connection ta tha \s-1POP3\s0 server cannot be established. Y'all KNOW dat shit, muthafucka!  Yo ass may see
more, related, error lyrics bout tha failure.
.ie n .IP "Error: Cannot find head back fo' $uidl on \s-1POP3\s0 server $name." 4
.el .IP "Error: Cannot find head back fo' \f(CW$uidl\fR on \s-1POP3\s0 server \f(CW$name\fR." 4
.IX Item "Error: Cannot find head back fo' $uidl on POP3 server $name."
Da server holla'd at ta have dis message yo, but when axed fo' its headers, no
single line was returned. Y'all KNOW dat shit, muthafucka!  Did tha message git destroyed?
.ie n .IP "Error: Cannot read body fo' $uidl on \s-1POP3\s0 server $name." 4
.el .IP "Error: Cannot read body fo' \f(CW$uidl\fR on \s-1POP3\s0 server \f(CW$name\fR." 4
.IX Item "Error: Cannot read body fo' $uidl on POP3 server $name."
Da messagez headaz is retreived from tha server yo, but tha body seems
to be lost.  Did tha message git destroyed between readin tha header
and readin tha body?
.ie n .IP "Warning: Chizzlez not freestyled ta read-only folda $self." 4
.el .IP "Warning: Chizzlez not freestyled ta read-only folda \f(CW$self\fR." 4
.IX Item "Warning: Chizzlez not freestyled ta read-only folda $self."
Yo ass have opened tha folda read-only \-\-which is tha default set
by new(access)\-\-, made modifications, n' now wanna close dat shit.
Set close(force) if you wanna overrule tha access mode, or close
the folda wit close(write) set ta \f(CW\*(C`NEVER\*(C'\fR.
.IP "Error: Copyin failed fo' one message." 4
.IX Item "Error: Copyin failed fo' one message."
For some reason, fo' instizzle disc full, removed by external process, or
read-protection, it is impossible ta copy one of tha lyrics.  Copyin will
proceed fo' tha other lyrics.
.ie n .IP "Error: Destination folda $name aint writable." 4
.el .IP "Error: Destination folda \f(CW$name\fR aint writable." 4
.IX Item "Error: Destination folda $name aint writable."
Da folda where tha lyrics is copied ta aint opened wit write
access (see new(access)).  This has no relation wit write permission
to tha folda which is controled by yo' operatin system.
.ie n .IP "Warning: Different lyrics wit id $msgid" 4
.el .IP "Warning: Different lyrics wit id \f(CW$msgid\fR" 4
.IX Item "Warning: Different lyrics wit id $msgid"
Da message id is discovered mo' than once within tha same folda yo, but the
content of tha message seems ta be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: Folda $name is opened read-only" 4
.el .IP "Error: Folda \f(CW$name\fR is opened read-only" 4
.IX Item "Error: Folda $name is opened read-only"
Yo ass can not write ta dis folda unless you have opened tha folda to
write or append wit new(access), or tha \f(CW\*(C`force\*(C'\fR option is set true.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
Da strang do not follow tha strict rulez of tha time span syntax which
is permitted as parameter.
.ie n .IP "Warning: Message $uidl on \s-1POP3\s0 server $name disappeared." 4
.el .IP "Warning: Message \f(CW$uidl\fR on \s-1POP3\s0 server \f(CW$name\fR disappeared." 4
.IX Item "Warning: Message $uidl on POP3 server $name disappeared."
Da server indicated tha existence of dis message before, however it
has no shiznit bout tha message no mo'.
.IP "Warning: Message-id '$msgid' do not contain a thugged-out domain." 4
.IX Item "Warning: Message-id '$msgid' do not contain a thugged-out domain."
Accordin ta tha RFCs, message-idz need ta contain a unique random part,
then a \f(CW\*(C`@\*(C'\fR, n' then a thugged-out domain name.  This is made ta avoid tha creation
of two lyrics wit tha same id. Y'all KNOW dat shit, muthafucka!  Da warnin emerges when tha \f(CW\*(C`@\*(C'\fR is
missin from tha string.
.IP "Warning: \s-1POP3\s0 foldaz cannot be deleted." 4
.IX Item "Warning: POP3 foldaz cannot be deleted."
Each user has only one \s-1POP3\s0 folda on a server n' shit.  This folda is pimped and
deleted by tha serverz administrator only.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Unable ta create subfolda $name of $folder." 4
.el .IP "Error: Unable ta create subfolda \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable ta create subfolda $name of $folder."
Da copy includes tha subfoldaz yo, but fo' some reason dat shiznit was not possible
to copy one of these n' you can put dat on yo' toast.  Copyin will proceed fo' all other sub-folders.
.ie n .IP "Error: Update of $nr lyrics ignored fo' \s-1POP3\s0 folda $name." 4
.el .IP "Error: Update of \f(CW$nr\fR lyrics ignored fo' \s-1POP3\s0 folda \f(CW$name\fR." 4
.IX Item "Error: Update of $nr lyrics ignored fo' POP3 folda $name."
Da standard \s-1POP3\s0 implementation do not support freestylin from client back
to tha server n' shit.  Therefore, modifications may be lost.
.ie n .IP "Error: Freestylin folda $name failed" 4
.el .IP "Error: Freestylin folda \f(CW$name\fR failed" 4
.IX Item "Error: Freestylin folda $name failed"
For some reason (you probably gots mo' error lyrics bout dis problem)
it is impossible ta write tha folder, although you should cuz there
were chizzlez made.
.IP "Error: Yo ass cannot write a message ta a pop server (yet)" 4
.IX Item "Error: Yo ass cannot write a message ta a pop server (yet)"
Some extensions ta tha \s-1POP3\s0 protocol do permit freestylin lyrics ta tha server,
but tha standard protocol only implements retreival. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Feel invited ta extend our
implementation wit writing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
