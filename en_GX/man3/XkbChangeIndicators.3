.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbChangeIndicators 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbChangeIndicators \- Chizzlez indicator maps or state without passin tha 
entire keyboard description
.SH SYNOPSIS
.HP
.B Bool XkbChangeIndicators
.BI "(\^Display *" "dpy" "\^,"
.BI "XkbDescPtr " "xkb" "\^,"
.BI "XkbIndicatorChangesPtr " "changes" "\^,"
.BI "unsigned int " "state" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- dpy
connection ta tha X server 
.TP
.I \- xkb
keyboard description from which names is ta be taken. I aint talkin' bout chicken n' gravy biatch. 
.TP
.I \- chizzles
indicators ta be updated on tha server
.TP
.I \- state
new state of indicators listed up in chizzles->state_changes
.SH DESCRIPTION
.LP
Da XkbIndicatorChangesRec identifies lil' small-ass modifications ta tha indicator map. 
Use it wit tha function 
.I XkbChangeIndicators 
to reduce tha amount of traffic busted ta tha server (see STRUCTURES).
    
Da 
.I state_changes 
field be a mask dat specifies tha indicators dat have chizzled state, and
.I map_changes 
is a mask dat specifies tha indicators whose maps have chizzled.

.I XkbChangeIndicators 
copies any maps specified by 
.I chizzlez 
from tha keyboard description, 
.I xkb, 
to tha server specified by 
.I dpy. 
If any bits is set up in tha 
.I state_changes 
field of 
.I chizzles, XkbChangeIndicators 
also sets tha state of dem indicators ta tha joints specified up in tha 
.I state 
mask fo' realz. A 1 bit up in 
.I state 
turns tha correspondin indicator on, a 0 bit turns it off.

In addition, it can also generate XkbIndicatorStateNotify n' 
XkbIndicatorMapNotify events.

Whenever a indicator chizzlez state, tha server sendz XkbIndicatorStateNotify events 
to all interested clients, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Similarly, whenever a indicatorz map chizzles, tha 
server sendz XkbIndicatorMapNotify events ta all interested clients.

To receive XkbIndicatorStateNotify events, use 
.I XkbSelectEvents 
with both tha 
.I bits_to_change 
and 
.I joints_for_bits 
parametas containin XkbIndicatorStateNotifyMask. To receive XkbIndicatorMapNotify 
events, use 
.I XkbSelectEvents 
with XkbIndicatorMapNotifyMask.

To receive events fo' only specific indicators, use 
.I XkbSelectEventDetails. 
Set tha 
.I event_type 
parameta ta XkbIndicatorStateNotify or XkbIndicatorMapNotify, n' set both the
.I bits_to_change 
and 
.I joints_for_bits 
detail parametas ta a mask where each bit specifies one indicator, turnin on dem 
bits dat specify tha indicators fo' which you wanna receive events.

.I xkb_type 
is either XkbIndicatorStateNotify or XkbIndicatorMapNotify, dependin on whether tha 
event be a kbIndicatorStateNotify event or kbIndicatorMapNotify event.

Da 
.I chizzled 
parameta be a mask dat is tha bitwise inclusive OR of tha indicators dat have 
changed. Y'all KNOW dat shit, muthafucka! If tha event iz of type XkbIndicatorMapNotify, 
.I chizzled 
reports tha maps dat chizzled. Y'all KNOW dat shit, muthafucka! If tha event iz of type XkbIndicatorStateNotify,
.I chizzled 
reports tha indicators dat have chizzled state. 
.I state 
is a mask dat specifies tha current state of all indicators, whether they have 
changed or not, fo' both XkbIndicatorStateNotify n' IndicatorMapNotify events.
.SH STRUCTURES
.LP
.nf
     typedef struct _XkbIndicatorChanges {
         unsigned int	      state_changes;
         unsigned int	       map_changes;
     }XkbIndicatorChangesRec,*XkbIndicatorChangesPtr;
     
.fi 
Both typez of indicator events use tha same structure:

.nf
    typedef struct _XkbIndicatorNotify {
        int            type;        /\(** Xkb extension base event code */
        unsigned long  serial;      /\(** X server serial number fo' event */
        Bool           send_event;  /\(** True => synthetically generated */
        Display *      display;     /\(** server connection where event generated */
        Time           time;        /\(** server time when event generated */
        int            xkb_type;    /\(** specifies state or map notify */
        int            device;      /\(** Xkb thang ID, aint gonna be XkbUseCoreKbd*/
        unsigned int   chizzled;     /\(** mask of indicators wit freshly smoked up state or map */
        unsigned int   state;       /\(** current state of all indicators */
    } XkbIndicatorNotifyEvent;
     
.fi     
.SH DIAGNOSTICS
.TP 15
.B BadAtom
A name is neither a valid Atom or None
.TP 15
.B BadImplementation
Invalid reply from server
.SH "SEE ALSO"
.BR XkbIndicatorMapNotify (3),
.BR XkbIndicatorStateNotify (3)
