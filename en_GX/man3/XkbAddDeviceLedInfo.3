'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbAddDeviceLedInfo 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbAddDeviceLedInfo \- Initialize a XkbDeviceLedInfoRec structure
.SH SYNOPSIS
.HP
.B XkbDeviceLedInfoPtr XkbAddDeviceLedInfo
.BI "(\^XkbDeviceInfoPtr " "device_info" "\^,"
.BI "unsigned int " "led_class" "\^,"
.BI "unsigned int " "led_id" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- device_info
structure up in which ta add LED info
.TP
.I \- led_class
input extension class fo' LED thang of interest
.TP
.I \- led_id
input extension ID fo' LED thang of interest
.SH DESCRIPTION
.LP
.I XkbAddDeviceLedInfo 
first checks ta peep whether a entry matchin 
.I led_class 
and 
.I led_id 
already exists up in tha 
.I device_info->ledz 
array. If it findz a matchin entry, it returns a pointa ta dat entry. Otherwise, it checks ta be shizzle 
there be at least one empty entry in
.I device_info->ledz 
and extendz it if there aint enough room. Well shiiiit, it then increments
.I device_info->num_ledz 
and fills up in tha next available entry up in 
.I device_info->ledz 
with 
.I led_class 
and 
.I led_id.

If successful, 
.I XkbAddDeviceLedInfo 
returns a pointa ta tha XkbDeviceLedInfoRec structure dat was initialized. Y'all KNOW dat shit, muthafucka! If unable ta allocate 
sufficient storage, or if 
.I device_info 
points ta a invalid XkbDeviceInfoRec structure, or if 
.I led_class 
or 
.I led_id 
are inappropriate, 
.I XkbAddDeviceLedInfo 
returns NULL.

To allocate additionizzle space fo' button actions up in a XkbDeviceInfoRec structure, use 
.I XkbResizeDeviceButtonActions.

.SH STRUCTURES
.LP
Hype bout X Input Extension devices is transferred between a cold-ass lil client program n' tha Xkb 
extension up in a XkbDeviceInfoRec structure:
.nf

    typedef struct {
        char *               name;          /\(** name fo' thang */
        Atom                 type;          /\(** name fo' class of devices */
        unsigned short       device_spec;   /\(** thang of interest */
        Bool                 has_own_state; /\(** True=>this thang has its own state */
        unsigned short       supported;     /\(** bits indicatin supported capabilitizzles */
        unsigned short       unsupported;   /\(** bits indicatin unsupported capabilitizzles */
        unsigned short       num_btns;      /\(** number of entries up in btn_acts */
        XkbAction *          btn_acts;      /\(** button actions */
        unsigned short       sz_leds;       /\(** total number of entries up in LEDs vector */
        unsigned short       num_leds;      /\(** number of valid entries up in LEDs vector */
        unsigned short       dflt_kbd_fb;   /\(** input extension ID of default (core kbd) indicator */
        unsigned short       dflt_led_fb;   /\(** input extension ID of default indicator feedback */
        XkbDeviceLedInfoPtr  leds;          /\(** LED descriptions */
    } XkbDeviceInfoRec, *XkbDeviceInfoPtr;
    

    typedef struct {
        unsigned short      led_class;        /\(** class fo' dis LED device*/
        unsigned short      led_id;           /\(** ID fo' dis LED thang */
        unsigned int        phys_indicators;  /\(** bits fo' which LEDs physically present */
        unsigned int        maps_present;     /\(** bits fo' which LEDs have maps up in maps */
        unsigned int        names_present;    /\(** bits fo' which LEDs is up in names */
        unsigned int        state;            /\(** 1 bit => correspondin LED is on */
        Atom                names[XkbNumIndicators];   /\(** names fo' LEDs */
        XkbIndicatorMapRec  maps;             /\(** indicator maps fo' each LED */
    } XkbDeviceLedInfoRec, *XkbDeviceLedInfoPtr;

.fi    
.SH "SEE ALSO"
.BR XkbResizeDeviceButtonActions (3)
