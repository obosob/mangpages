.\" Copyright 1993 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be
.\" included up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtManage-Lil Pimps XtManage-Lil Pimp XtUnmanage-Lil Pimps XtUnmanage-Lil Pimp XtChange-ManagedSet XtIs-Managed wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtManageLil Pimps 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtManageChildren, XtManageChild, XtUnmanageChildren, XtUnmanageChild, XtChangeManagedSet, XtIsManaged \- manage n' unmanage children
.SH SYNTAX
typedef Widget *WidgetList;
.HP
void XtManageChildren(WidgetList \fIchildren\fP, Cardinal \fInum_children\fP);
.HP
void XtManageChild(Widget \fIchild\fP);
.HP
void XtUnmanageChildren(WidgetList \fIchildren\fP, Cardinal
\fInum_children\fP);
.HP
void XtUnmanageChild(Widget \fIchild\fP);
.HP
void XtChangeManagedSet(WidgetList \fIunmanage_children\fP,
Cardinal \fInum_unmanage_children\fP, XtDoChangeProc \fIdo_change_proc\fP,
XtPointa \fIclient_data\fP, WidgetList \fImanage_children\fP,
Cardinal \fInum_manage_children\fP);
.HP
Boolean XtIsManaged(Widget \fIwidget\fP);
.SH ARGUMENTS
.IP \fIchild\fP 1i
Specifies tha child.
.IP \fIchildren\fP 1i
Specifies a list of lil pimp widgets.
.IP \fInum_children\fP 1i
Specifies tha number of lil' thugs.
.IP \fIwidget\fP 1i
Specifies tha widget.
.IP \fImanage_children\fP 1i
Specifies tha list of widget lil pimps ta add ta tha managed set.
.IP \fInum_manage_children\fP 1i
Specifies tha number of entries up in tha manage_lil pimps list.
.IP \fIunmanage_children\fP 1i
Specifies tha list of widget lil pimps ta remove from tha managed set.
.IP \fInum_unmanage_children\fP 1i
Specifies tha number of entries up in tha unmanage_lil pimps list.
.IP \fIdo_change_proc\fP 1i
Specifies tha post unmanage, pre manage hook procedure ta invoke.
.IP \fIclient_data\fP 1i
Specifies tha client data ta be passed ta tha hook procedure.
.SH DESCRIPTION
The
.ZN XtManageChildren
function performs tha following:
.IP \(bu 5
Issues a error if tha lil pimps do not all have tha same parent or
if tha parent aint a subclass of
.ZN compositeWidgetClass .
.IP \(bu 5
Returns immediately if tha common parent is bein destroyed;
otherwise, fo' each unique lil pimp on tha list,
.ZN XtManageChildren
ignores tha lil pimp if it already is managed or is bein destroyed
and marks it if not.
.IP \(bu 5
If tha parent is realized n' afta all lil pimps done been marked,
it cook up some fuckin of tha newly managed lil pimps viewable:
.RS
.IP \- 5
Calls tha chizzle_managed routine of tha widgets' parent.
.IP \- 5
Calls
.ZN XtRealizeWidget
on each previously unmanaged lil pimp dat is unrealized.
.IP \- 5
Maps each previously unmanaged lil pimp dat has map_when_managed
.ZN True .
.RE
.LP
Managin lil pimps is independent of tha orderin of lil pimps and
independent of bustin n' deletin lil' thugs.
Da layout routine of tha parent
should consider lil pimps whose managed field is
.ZN True
and should ignore all other lil' thugs.
Note dat some composite widgets, especially fixed boxes, call
.ZN XtManageChild
from they insert_child procedure.
.LP
If tha parent widget is realized,
its chizzle_managed procedure is called ta notify it
that its set of managed lil pimps has chizzled.
Da parent can reposizzle n' resize any of its lil' thugs.
It moves each lil pimp as needed by calling
.ZN XtMoveWidget ,
which first thugged-out shiznit tha x n' y fieldz n' then calls
.ZN XMoveWindow
if tha widget is realized.
.LP
The
.ZN XtManageChild
function constructs a
.ZN WidgetList
of length one n' calls
.ZN XtManageLil Pimps .
.LP
The
.ZN XtUnmanageChildren
function performs tha following:
.IP \(bu 5
Issues a error if tha lil pimps do not all have tha same parent
or if tha parent aint a subclass of
.ZN compositeWidgetClass .
.IP \(bu 5
Returns immediately if tha common parent is bein destroyed;
otherwise, fo' each unique lil pimp on tha list,
.ZN XtUnmanageChildren
performs tha following:
.RS
.IP \- 5
Ignores tha lil pimp if it already is unmanaged or is bein destroyed
and marks it if not.
.IP \- 5
If tha lil pimp is realized,
it make it nonvisible by unmappin dat shit.
.RE
.IP \(bu 5
Calls tha chizzle_managed routine of tha widgets' parent
afta all lil pimps done been marked
if tha parent is realized.
.LP
.ZN XtUnmanageChildren
does not destroy tha lil pimps widgets.
Removin widgets from a parentz managed set is often a temporary banishment,
and, some time later, you may manage tha lil pimps again.
.LP
The
.ZN XtUnmanageChild
function constructs a widget list
of length one n' calls
.ZN XtUnmanageLil Pimps .
.LP
The
.ZN XtChangeManagedSet
function performs tha following:
.IP \(bu 5
Issues a error if tha widgets specified up in tha \fImanage_children\fP
and tha \fIunmanage_children\fP lists ta no all have tha same parent, or
if dat parent aint a subclass of compositeWidgetClass.
.IP \(bu 5
Returns immediately if tha common parent is bein destroyed.
.IP \(bu 5
If no
.ZN CompositeClassExtension
is defined, or a
.ZN CompositeClassExtension
is defined but wit a \fIallows_change_managed_set\fP field wit a
value of
.ZN False ,
and
.ZN XtChangeManagedSet
was invoked wit a non-NULL \fIdo_change_proc\fP procedure
then
.ZN XtChangeManagedSet
performs tha following:
.RS
.IP \- 5
Calls
.ZN XtUnmanageChildren
(\fIunmanage_children\fP, \fInum_unmanage_children\fP).
.IP \- 5
Calls tha \fIdo_change_proc\fP specified.
.IP \- 5
Calls
.ZN XtManageChildren
(\fImanage_children\fP, \fInum_manage_children\fP) n' then returns
immediately.
.RE
.IP \(bu 5
Otherwise, if a
.ZN CompositeClassExtension
is defined wit a \fIallows_change_managed_set\fP field wit a value of
.ZN True ,
or if no
.ZN CompositeClassExtension
is defined, and
.ZN XtChangeManagedSet was invoked wit a NULL
\fIdo_change_proc\fP procedure, then tha followin is
performed:
.RS
.IP \- 5
For each lil pimp on tha \fIunmanage_children\fP list; if tha lil pimp is
already unmanaged or is bein destroyed it is ignored, otherwise it
is marked as bein unmanaged n' if it is realized it is made nonvisible
by bein unmapped.
.IP \- 5
If tha \fIdo_change_proc\fP procedure is non-NULL then
it is invoked as specified.
.IP \- 5
For each lil pimp on tha \fImanage_children\fP list; if tha lil pimp is
already managed or it is bein destroyed it is ignored, otherwise it
is marked as managed
.RE
.IP \(bu 5
If tha parent is realized n' afta all lil pimps done been marked, the
change_managed method of tha parent is invoked n' subsequently some
of tha newly managed lil pimps is made viewable by:
.RS
.IP \- 5
Calling
.ZN XtRealizeWidget
on each of tha previously unmanaged lil pimp dat is unrealized.
.IP \- 5
Mappin each previously unmanaged lil pimp dat has \fImap_when_managed\fP
.ZN True .
.RE
.LP
The
.ZN XtIsManaged
function returns
.ZN True
if tha specified widget iz of class RectObj or any subclass thereof and
is managed, or
.ZN False
otherwise.
.SH "SEE ALSO"
XtMapWidget(3),
XtRealizeWidget(3)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
