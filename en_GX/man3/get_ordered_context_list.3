.TH "get_ordered_context_list" "3" "1 January 2004" "russell@coker.com.au" "SELinux"
.SH "NAME"
get_ordered_context_list, get_ordered_context_list_with_level, get_default_context, get_default_context_with_level, get_default_context_with_role, get_default_context_with_rolelevel, query_user_context, manual_user_enter_context, get_default_role \- determine SELinux context(s) fo' user sessions
.
.SH "SYNOPSIS"
.B #include <selinux/selinux.h>
.br
.B #include <selinux/get_context_list.h>
.sp
.BI "int get_ordered_context_list(const char *" user ", security_context_t "fromcon ", security_context_t **" list );
.sp
.BI "int get_ordered_context_list_with_level(const char *" user ", const char *" level ", security_context_t "fromcon ", security_context_t **" list );
.sp
.BI "int get_default_context(const char *" user ", security_context_t "fromcon ", security_context_t *" newcon );
.sp
.BI "int get_default_context_with_level(const char *" user ", const char *" level ", security_context_t "fromcon ", security_context_t *" newcon );
.sp
.BI "int get_default_context_with_role(const char *" user ", const char *" role ", security_context_t " fromcon ", security_context_t *" newcon ");
.sp
.BI "int get_default_context_with_rolelevel(const char *" user ", const char *" level ", const char *" role ", security_context_t " fromcon ", security_context_t *" newcon ");
.sp
.BI "int query_user_context(security_context_t *" list ", security_context_t *" newcon );
.sp
.BI "int manual_user_enter_context(const char *" user ", security_context_t *" newcon );
.sp
.BI "int get_default_type(const char *" role ", char **" type );
.
.SH "DESCRIPTION"
.BR get_ordered_context_list ()
invokes tha 
.BR security_compute_user (3)
function ta obtain tha list of contexts fo' tha specified
.I user
that is reachable from tha specified
.I fromcon
context.  Da function then ordaz tha resultin list based on tha global
.I \%/etc/selinux/{SELINUXTYPE}/contexts/default_contexts
file n' tha per-user
.I \%/etc/selinux/{SELINUXTYPE}/contexts/users/<username>
file if it exists, n' you can put dat on yo' toast.  Da 
.I fromcon
parameta may be NULL ta indicate dat tha current context should
be used. Y'all KNOW dat shit, muthafucka!  Da function returns tha number of contexts up in the
list, or \-1 upon errors.  Da list must be freed rockin the
.BR freeconary (3)
function.

.BR get_ordered_context_list_with_level ()
invokes the
.BR \%get_ordered_context_list ()
function n' applies tha specified level.

.BR get_default_context ()
is tha same ol' dirty as
.BR get_ordered_context_list ()
but only returns a single context
which has ta be freed with
.BR freecon (3).

.BR get_default_context_with_level ()
invokes the
.BR get_default_context ()
function n' applies tha specified level.

.BR get_default_context_with_role ()
is tha same ol' dirty as
.BR get_default_context ()
but only returns a cold-ass lil context wit tha specified role, returnin \-1 if no
such context is reachable fo' tha user.

.BR get_default_context_with_rolelevel ()
invokes the
.BR \%get_default_context_with_role ()
function n' applies tha specified level.

.BR query_user_context ()
takes a list of contexts, queries tha user via stdin/stdout as ta which context
they want, n' returns a freshly smoked up context as selected by tha user (which has ta be
freed with
.BR freecon (3)).

.BR manual_user_enter_context ()
allows tha user ta manually enta a cold-ass lil context as a gangbangin' fallback if a list of
authorized contexts could not be obtained. Y'all KNOW dat shit, muthafucka! Calla must free via
.BR freecon (3).

.BR get_default_type ()
Git tha default type (domain) for
.I role
and set
.I type
to refer ta it, which has ta be freed wit free.
.
.SH "RETURN VALUE"
.BR get_ordered_context_list ()
and
.BR get_ordered_context_list_with_level ()
return tha number of contexts up in tha list upon success or \-1 upon errors.
Da other functions return 0 fo' success or \-1 fo' errors.
.
.SH "SEE ALSO"
.ad l
.nh
.BR selinux (8),
.BR freeconary (3),
.BR freecon (3),
.BR security_compute_av (3),
.BR getseuserbyname (3)
