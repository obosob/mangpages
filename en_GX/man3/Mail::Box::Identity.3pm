.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Identitizzle 3"
.TH Mail::Box::Identitizzle 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Identitizzle \- represents a unopened folder
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Box::Identity
\&   be a User::Identity::Item
\&
\& Mail::Box::Identity
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use User::Identity;
\& use Mail::Box::Identity;
\& mah $me   = User::Identity\->new(...);
\&
\& mah $mailbox = Mail::Box::Identity\->new(...);
\& $me\->add(foldaz => $mailbox);
\&
\& # Simpler
\&
\& use User::Identity;
\& mah $me   = User::Identity\->new(...);
\& mah $addr = $me\->add(foldaz => ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`Mail::Box::Identity\*(C'\fR object gotz nuff tha description of a
single mailbox.  Da mailboxes is collected by a Mail::Box::Collection
object.  This correspondz wit \s-1IMAP\s0z \f(CW\*(C`\eNoSelect\*(C'\fR, fo' instance.
.PP
Nearly all methodz can return undef.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Identity\->\fBnew\fR([\s-1NAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Identity->new([NAME], OPTIONS)"
.Vb 10
\& \-Option     \-\-Defined up in          \-\-Default
\&  deleted                            <false>
\&  description  User::Identity::Item  undef
\&  folder_type                        from parent
\&  inferiors                          1
\&  location                           undef
\&  log          Mail::Reporta        \*(AqWARNINGS\*(Aq
\&  manager                            <from parent>
\&  marked                             undef
\&  name         User::Identity::Item  <required>
\&  only_subs                          <foldertype n' name dependent>
\&  parent       User::Identity::Item  undef
\&  subf_type                          <same as parent>
\&  trace        Mail::Reporta        \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "deleted => \s-1BOOLEAN\s0" 2
.IX Item "deleted => BOOLEAN"
Da folda is flagged fo' deletion. I aint talkin' bout chicken n' gravy biatch.  This not have any implications yet,
because it may still git undeleted.
.IP "description => \s-1STRING\s0" 2
.IX Item "description => STRING"
.PD 0
.IP "folder_type => \s-1CLASS\s0" 2
.IX Item "folder_type => CLASS"
.IP "inferiors => \s-1BOOLEAN\s0" 2
.IX Item "inferiors => BOOLEAN"
.PD
Can dis folda have children?  If not, dis is cleared.
.IP "location => DIRECTORY|FILENAME" 2
.IX Item "location => DIRECTORY|FILENAME"
Da location of dis folda n' shit.  Often, only tha manager can figure-out
where dis folda straight-up is.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "manager => \s-1OBJECT\s0" 2
.IX Item "manager => OBJECT"
.PD
Any Mail::Box::Manager or Mail::Box::Manage::User \s-1OBJECT.\s0
.ie n .IP "marked => BOOLEAN|""undef""" 2
.el .IP "marked => BOOLEAN|\f(CWundef\fR" 2
.IX Item "marked => BOOLEAN|undef"
Whether tha folda is flagged fo' some reason, fo' instizzle cuz
new lyrics have arrived.
.IP "name => \s-1STRING\s0" 2
.IX Item "name => STRING"
.PD 0
.IP "only_subs => \s-1BOOLEAN\s0" 2
.IX Item "only_subs => BOOLEAN"
.PD
Some folda types can have lyrics up in they toplevel folder, other
cannot. That determines tha default.
See \fIMail::Box::topFolderWithLyrics()\fR
.IP "parent => \s-1OBJECT\s0" 2
.IX Item "parent => OBJECT"
.PD 0
.IP "subf_type => \s-1CLASS\s0" 2
.IX Item "subf_type => CLASS"
.PD
Da type fo' a subfolda collection, must extend \s-1CLASS
\&\s0Mail::Box::Collection.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.SS "Attributes"
.IX Subsection "Attributes"
.PD 0
.ie n .IP "$obj\->\fBdescription\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR()" 4
.IX Item "$obj->description()"
.PD
See \*(L"Attributes\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBfolderType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderType\fR()" 4
.IX Item "$obj->folderType()"
Returns tha type of dis folder.
.ie n .IP "$obj\->\fBfullname\fR([\s-1DELIMETER\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfullname\fR([\s-1DELIMETER\s0])" 4
.IX Item "$obj->fullname([DELIMETER])"
Returns tha name of tha folder, from tha toplevel until dis one, with
the \s-1DELIMETER\s0 strang between each level.  \s-1DELIMETER\s0 default ta a gangbangin' forward
slash (a \f(CW\*(C`/\*(C'\fR).
.ie n .IP "$obj\->\fBinferiors\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBinferiors\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->inferiors([BOOLEAN])"
\&\f(CW\*(C`Inferiors\*(C'\fR is \f(CW\*(C`subfolders\*(C'\fR.  When dis flag is set, it is permitted
to create subfolders.
.ie n .IP "$obj\->\fBlocation\fR([FILENAME|DIRECTORY|undef])" 4
.el .IP "\f(CW$obj\fR\->\fBlocation\fR([FILENAME|DIRECTORY|undef])" 4
.IX Item "$obj->location([FILENAME|DIRECTORY|undef])"
Returns tha directory or filename of tha folda n' shit.  If dis aint pre-defined,
it is computed based on tha knowledge bout tha folda type.  Be shizzle ta set
the location of tha toplevel folda ta tha folderdir of tha user ta get
this ta work.
.ie n .IP "$obj\->\fBmanager\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmanager\fR()" 4
.IX Item "$obj->manager()"
Returns tha manager (usually a Mail::Box::Manage::User which owns
the folders.  May be undefined, by default from parent.
.ie n .IP "$obj\->\fBmarked\fR([BOOLEAN|undef])" 4
.el .IP "\f(CW$obj\fR\->\fBmarked\fR([BOOLEAN|undef])" 4
.IX Item "$obj->marked([BOOLEAN|undef])"
When suttin' special has happened wit tha folder, dis flag can
be set (or cleared).  Da \f(CW\*(C`undef\*(C'\fR status be a \*(L"unknown\*(R".  In the
\&\s-1IMAP4\s0 protocol, \f(CW0\fR will result up in a \f(CW\*(C`\eUnmarked\*(C'\fR, a \f(CW1\fR thangs up in dis biatch
in a \f(CW\*(C`\eMarked\*(C'\fR, n' \f(CW\*(C`undef\*(C'\fR up in nothing.
.ie n .IP "$obj\->\fBname\fR([\s-1NEWNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR([\s-1NEWNAME\s0])" 4
.IX Item "$obj->name([NEWNAME])"
See \*(L"Attributes\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBonlySubfolders\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBonlySubfolders\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->onlySubfolders([BOOLEAN])"
Than dis folda be opened (without trying) or not?  Da default
dependz on tha folda type, n' whether dis is tha toplevel folder
or not.  See \fIMail::Box::topFolderWithLyrics()\fR
.ie n .IP "$obj\->\fBtopfolder\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopfolder\fR()" 4
.IX Item "$obj->topfolder()"
Run up tha tree ta find tha highest level folder.
.SS "Collections"
.IX Subsection "Collections"
.ie n .IP "$obj\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)" 4
.IX Item "$obj->add(COLLECTION, ROLE)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.IX Item "$obj->addCollection(OBJECT | ([TYPE], OPTIONS))"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBcollection\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcollection\fR(\s-1NAME\s0)" 4
.IX Item "$obj->collection(NAME)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBfind\fR(\s-1COLLECTION, ROLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(\s-1COLLECTION, ROLE\s0)" 4
.IX Item "$obj->find(COLLECTION, ROLE)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR([\s-1PARENT\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR([\s-1PARENT\s0])" 4
.IX Item "$obj->parent([PARENT])"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.IX Item "$obj->removeCollection(OBJECT|NAME)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
.PD 0
.IP "Mail::Box::Identity\->\fBtype\fR()" 4
.IX Item "Mail::Box::Identity->type()"
.PD
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
See \*(L"Collections\*(R" up in User::Identity::Item
.SS "Subfolders"
.IX Subsection "Subfolders"
.ie n .IP "$obj\->\fBaddSubfolder\fR(Mail::Box::Identity|DATA)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSubfolder\fR(Mail::Box::Identity|DATA)" 4
.IX Item "$obj->addSubfolder(Mail::Box::Identity|DATA)"
Add a freshly smoked up folda tha fuck into tha administration. I aint talkin' bout chicken n' gravy biatch.  With \s-1DATA,\s0 a freshly smoked up object
will be instantiated first.  Da identitizzle is returned on success.
.ie n .IP "$obj\->\fBfolder\fR([[\s-1NAME, ...\s0], \s-1NAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR([[\s-1NAME, ...\s0], \s-1NAME\s0])" 4
.IX Item "$obj->folder([[NAME, ...], NAME])"
Returns tha subfolderz object wit \s-1NAME\s0 or \f(CW\*(C`undef\*(C'\fR if it do not
exist.  When multiple NAMEs is added, dem supa foldaz is traverst
first.  Without any \s-1NAME,\s0 tha current object is returned
.Sp
example: git some folder
.Sp
.Vb 1
\& mah $a = $user\->folders\->folder(\*(Aqb\*(Aq, \*(Aqa\*(Aq);
\&
\& mah $name  = "a:b:c";
\& mah $delim = ":";
\& mah $f = $user\->folders\->folder(split $delim, $name);
.Ve
.ie n .IP "$obj\->\fBforeach\fR(\s-1CODE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforeach\fR(\s-1CODE\s0)" 4
.IX Item "$obj->foreach(CODE)"
For each of tha subfoldaz found below dis point call \s-1CODE. \s0 This current
folda is called first.  Be warned dat you may find identitizzles with
the Mail::Box::Identitizzle subroutine deleted flag on.
.ie n .IP "$obj\->\fBopen\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopen\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->open(OPTIONS)"
Open tha folda which is busted lyrics bout by dis identity.  Returned is some
Mail::Box.  Da options is passed ta \fIMail::Box::Manager::open()\fR.
.ie n .IP "$obj\->\fBremove\fR([\s-1NAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBremove\fR([\s-1NAME\s0])" 4
.IX Item "$obj->remove([NAME])"
Remove tha folda (plus subfolders) wit tha \s-1NAME. \s0 Without \s-1NAME,\s0 this
\&\f(CW\*(C`Mail::Box::Identity\*(C'\fR itself is removed.
.Sp
Da removed structure is returned, which is \f(CW\*(C`undef\*(C'\fR if not
found. Y'all KNOW dat shit, muthafucka!  This is only a administratizzle remove, you still need a
\&\fIMail::Box::Manager::delete()\fR.
.ie n .IP "$obj\->\fBrename\fR(\s-1FOLDER,\s0 [\s-1NEWSUBNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBrename\fR(\s-1FOLDER,\s0 [\s-1NEWSUBNAME\s0])" 4
.IX Item "$obj->rename(FOLDER, [NEWSUBNAME])"
Move tha folda ta a gangbangin' finger-lickin' different super-FOLDER, under a \s-1NEW\s0 SUBfolda \s-1NAME.\s0
.Sp
example: renamin a gangbangin' folder
.Sp
.Vb 3
\& mah $top = $user\->topfolder;
\& mah $new = $top\->folder(\*(Aqxyz\*(Aq) or die;
\& mah $f   = $top\->folder(\*(Aqabc\*(Aq, \*(Aqdef\*(Aq)\->rename($new, \*(Aq123\*(Aq);
\&
\& print $f\->name;      # 123
\& print $f\->fullname;  # =/xyz/123
.Ve
.ie n .IP "$obj\->\fBsubfolderNames\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsubfolderNames\fR()" 4
.IX Item "$obj->subfolderNames()"
Convenience method: returns tha namez of tha collected subfolders.
.ie n .IP "$obj\->\fBsubfolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsubfolders\fR()" 4
.IX Item "$obj->subfolders()"
Returns tha subfoldaz or \f(CW\*(C`undef\*(C'\fR if there be none.  This
information is lazy evaluated n' cached. Y'all KNOW dat shit, muthafucka!  In \s-1LIST\s0 context, tha folder
objects is returned (Mail::Box::Identitizzle objects), up in \s-1SCALAR\s0 context
the collection, tha Mail::Box::Collection.
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Identity\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Identity->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Identity\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Identity->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Identity\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Identity->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object aint a cold-ass lil collection." 4
.el .IP "Error: \f(CW$object\fR aint a cold-ass lil collection." 4
.IX Item "Error: $object aint a cold-ass lil collection."
Da first argument be a object yo, but not of a cold-ass lil class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot load collection module fo' $type ($class)." 4
.el .IP "Error: Cannot load collection module fo' \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module fo' $type ($class)."
Either tha specified \f(CW$type\fR do not exist, or dat module named \f(CW$class\fR returns
compilation errors.  If tha type as specified up in tha warnin is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot tha 'require' tha package which defines tha nickname.
.ie n .IP "Error: Creation of a cold-ass lil collection via $class failed." 4
.el .IP "Error: Creation of a cold-ass lil collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a cold-ass lil collection via $class failed."
Da \f(CW$class\fR did compile yo, but dat shiznit was not possible ta create a object
of dat class rockin tha options you specified.
.IP "Error: Don't know what tha fuck type of collection you wanna add." 4
.IX Item "Error: Don't know what tha fuck type of collection you wanna add."
If you add a cold-ass lil collection, it must either by a cold-ass lil collection object or a
list of options which can be used ta create a cold-ass lil collection object.  In
the latta case, tha type of collection must be specified.
.ie n .IP "Error: It aint permitted ta add subfoldaz ta $name" 4
.el .IP "Error: It aint permitted ta add subfoldaz ta \f(CW$name\fR" 4
.IX Item "Error: It aint permitted ta add subfoldaz ta $name"
Da \fIinferiors()\fR flag prohibits tha creation of subfoldaz ta this
folder.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
Da collection wit \f(CW$name\fR do not exist n' can not be pimped.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.IP "Error: Da toplevel folda cannot be removed dis way" 4
.IX Item "Error: Da toplevel folda cannot be removed dis way"
Da Mail::Box::Identitizzle folda administration structure requires
a top directory.  That top is registered somewhere (for instance
by a Mail::Box::Manage::User).  If you need ta remove tha top,
you gotta look fo' a method of dat object.
.IP "Error: Toplevel directory requires explicit folda type" 4
.IX Item "Error: Toplevel directory requires explicit folda type"
.PD 0
.IP "Error: Toplevel directory requires explicit location" 4
.IX Item "Error: Toplevel directory requires explicit location"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
