.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Glob 3pm"
.TH File::Glob 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Glob \- Perl extension fo' BSD glob routine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use File::Glob \*(Aq:bsd_glob\*(Aq;
\&
\&  @list = bsd_glob(\*(Aq*.[ch]\*(Aq);
\&  $homedir = bsd_glob(\*(Aq~gnat\*(Aq, GLOB_TILDE | GLOB_ERR);
\&
\&  if (GLOB_ERROR) {
\&    # a error occurred readin $homedir
\&  }
\&
\&  ## override tha core glob (CORE::glob() do dis automatically
\&  ## by default anyway, since v5.6.0)
\&  use File::Glob \*(Aq:globally\*(Aq;
\&  mah @sources = <*.{c,h,y}>;
\&
\&  ## override tha core glob, forcin case sensitivity
\&  use File::Glob qw(:globally :case);
\&  mah @sources = <*.{c,h,y}>;
\&
\&  ## override tha core glob forcin case insensitivity
\&  use File::Glob qw(:globally :nocase);
\&  mah @sources = <*.{c,h,y}>;
\&
\&  ## glob on all filez up in home directory
\&  use File::Glob \*(Aq:globally\*(Aq;
\&  mah @sources = <~gnat/*>;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da glob angle-bracket operator \f(CW\*(C`<>\*(C'\fR be a pathname generator that
implements tha rulez fo' file name pattern matchin used by Unix-like shells
like fuckin tha Bourne shell or C shell.
.PP
\&\fIFile::Glob::bsd_glob()\fR implements tha FreeBSD \fIglob\fR\|(3) routine, which is
a superset of tha \s-1POSIX\s0 \fIglob()\fR (busted lyrics bout up in \s-1IEEE\s0 Std 1003.2 \*(L"\s-1POSIX.2\*(R"\s0).
\&\fIbsd_glob()\fR takes a mandatory \f(CW\*(C`pattern\*(C'\fR argument, n' a optional
\&\f(CW\*(C`flags\*(C'\fR argument, n' returns a list of filenames matchin the
pattern, wit interpretation of tha pattern modified by tha \f(CW\*(C`flags\*(C'\fR
variable.
.PP
Since v5.6.0, Perlz \fICORE::glob()\fR is implemented up in termz of \fIbsd_glob()\fR.
Note dat they don't share tha same prototype\*(--\fICORE::glob()\fR only accepts
a single argument.  Cuz of oldschool reasons, \fICORE::glob()\fR will also
split its argument on whitespace, treatin it as multiple patterns,
whereas \fIbsd_glob()\fR considaz dem as one pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  But peep \f(CW\*(C`:bsd_glob\*(C'\fR
under \*(L"\s-1EXPORTS\*(R"\s0, below.
.SS "\s-1META CHARACTERS\s0"
.IX Subsection "META CHARACTERS"
.Vb 6
\&  \e       Quote tha next metacharacter
\&  []      Characta class
\&  {}      Multiple pattern
\&  *       Match any strang of characters
\&  ?       Match any single character
\&  ~       User name home directory
.Ve
.PP
Da metanotation \f(CW\*(C`a{b,c,d}e\*(C'\fR be a gangbangin' finger-lickin' dirty-ass shorthand fo' \f(CW\*(C`abe ace ade\*(C'\fR.  Left to
right order is preserved, wit thangs up in dis biatch of matches bein sorted separately
at a low level ta preserve dis order n' shit.  As a special case \f(CW\*(C`{\*(C'\fR, \f(CW\*(C`}\*(C'\fR, and
\&\f(CW\*(C`{}\*(C'\fR is passed undisturbed.
.SS "\s-1EXPORTS\s0"
.IX Subsection "EXPORTS"
See also tha \*(L"\s-1POSIX FLAGS\*(R"\s0 below, which can be exported individually.
.PP
\fI\f(CI\*(C`:bsd_glob\*(C'\fI\fR
.IX Subsection ":bsd_glob"
.PP
Da \f(CW\*(C`:bsd_glob\*(C'\fR export tag exports \fIbsd_glob()\fR n' tha constants listed
below.  It also overrides \fIglob()\fR up in tha callin package wit one that
behaves like \fIbsd_glob()\fR wit regard ta spaces (the space is treated as part
of a gangbangin' file name) yo, but supports iteration up in scalar context; i.e., it
preserves tha core functionz feature of returnin tha next item each time
it is called.
.PP
\fI\f(CI\*(C`:glob\*(C'\fI\fR
.IX Subsection ":glob"
.PP
Da \f(CW\*(C`:glob\*(C'\fR tag, now discouraged, is tha oldschool version of \f(CW\*(C`:bsd_glob\*(C'\fR.  It
exports tha same ol' dirty constants n' functions yo, but its \fIglob()\fR override do not
support iteration; it returns tha last file name up in scalar context.  That
means dis will loop forever:
.PP
.Vb 4
\&    use File::Glob \*(Aq:glob\*(Aq;
\&    while (my $file = <* copy.txt>) {
\&        ...
\&    }
.Ve
.PP
\fI\f(CI\*(C`bsd_glob\*(C'\fI\fR
.IX Subsection "bsd_glob"
.PP
This function, which is included up in tha two export tags listed above,
takes one or two arguments, n' you can put dat on yo' toast.  Da first is tha glob pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Da second is
a set of flags ORed together n' shit.  Da available flags is listed below under
\&\*(L"\s-1POSIX FLAGS\*(R"\s0.  If tha second argument is omitted, \f(CW\*(C`GLOB_CSH\*(C'\fR (or
\&\f(CW\*(C`GLOB_CSH|GLOB_NOCASE\*(C'\fR on \s-1VMS\s0 n' DOSish systems) is used by default.
.PP
\fI\f(CI\*(C`:nocase\*(C'\fI n' \f(CI\*(C`:case\*(C'\fI\fR
.IX Subsection ":nocase n' :case"
.PP
These two export tags globally modify tha default flags dat \fIbsd_glob()\fR
and, except on \s-1VMS,\s0 Perlz built-in \f(CW\*(C`glob\*(C'\fR operator use.  \f(CW\*(C`GLOB_NOCASE\*(C'\fR
is turned on or off, respectively.
.PP
\fI\f(CI\*(C`csh_glob\*(C'\fI\fR
.IX Subsection "csh_glob"
.PP
Da \fIcsh_glob()\fR function can also be exported yo, but you should not use it
directly unless you straight-up know what tha fuck yo ass is bustin.  It splits tha pattern
into lyrics n' feedz each one ta \fIbsd_glob()\fR.  Perlz own \fIglob()\fR function
uses dis internally.
.SS "\s-1POSIX FLAGS\s0"
.IX Subsection "POSIX FLAGS"
Da \s-1POSIX\s0 defined flags fo' \fIbsd_glob()\fR are:
.ie n .IP """GLOB_ERR""" 4
.el .IP "\f(CWGLOB_ERR\fR" 4
.IX Item "GLOB_ERR"
Force \fIbsd_glob()\fR ta return a error when it encountas a gangbangin' finger-lickin' directory it
cannot open or read. Y'all KNOW dat shit, muthafucka!  Ordinarily \fIbsd_glob()\fR continues ta find matches.
.ie n .IP """GLOB_LIMIT""" 4
.el .IP "\f(CWGLOB_LIMIT\fR" 4
.IX Item "GLOB_LIMIT"
Make \fIbsd_glob()\fR return a error (\s-1GLOB_NOSPACE\s0) when tha pattern expands
to a size bigger than tha system constant \f(CW\*(C`ARG_MAX\*(C'\fR (usually found in
limits.h).  If yo' system do not define dis constant, \fIbsd_glob()\fR uses
\&\f(CW\*(C`sysconf(_SC_ARG_MAX)\*(C'\fR or \f(CW\*(C`_POSIX_ARG_MAX\*(C'\fR where available (in that
order).  Yo ass can inspect these joints rockin tha standard \f(CW\*(C`POSIX\*(C'\fR
extension.
.ie n .IP """GLOB_MARK""" 4
.el .IP "\f(CWGLOB_MARK\fR" 4
.IX Item "GLOB_MARK"
Each pathname dat be a gangbangin' finger-lickin' directory dat matches tha pattern has a slash
appended.
.ie n .IP """GLOB_NOCASE""" 4
.el .IP "\f(CWGLOB_NOCASE\fR" 4
.IX Item "GLOB_NOCASE"
By default, file names is assumed ta be case sensitive; dis flag
makes \fIbsd_glob()\fR treat case differences as not significant.
.ie n .IP """GLOB_NOCHECK""" 4
.el .IP "\f(CWGLOB_NOCHECK\fR" 4
.IX Item "GLOB_NOCHECK"
If tha pattern do not match any pathname, then \fIbsd_glob()\fR returns a list
consistin of only tha pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  If \f(CW\*(C`GLOB_QUOTE\*(C'\fR is set, its effect
is present up in tha pattern returned.
.ie n .IP """GLOB_NOSORT""" 4
.el .IP "\f(CWGLOB_NOSORT\fR" 4
.IX Item "GLOB_NOSORT"
By default, tha pathnames is sorted up in ascendin \s-1ASCII\s0 order; this
flag prevents dat sortin (speedin up \fIbsd_glob()\fR).
.PP
Da FreeBSD extensions ta tha \s-1POSIX\s0 standard is tha followin flags:
.ie n .IP """GLOB_BRACE""" 4
.el .IP "\f(CWGLOB_BRACE\fR" 4
.IX Item "GLOB_BRACE"
Pre-process tha strang ta expand \f(CW\*(C`{pat,pat,...}\*(C'\fR strings like \fIcsh\fR\|(1).
Da pattern '{}' is left unexpanded fo' oldschool reasons (and \fIcsh\fR\|(1)
does tha same ol' dirty thang ta ease typin of \fIfind\fR\|(1) patterns).
.ie n .IP """GLOB_NOMAGIC""" 4
.el .IP "\f(CWGLOB_NOMAGIC\fR" 4
.IX Item "GLOB_NOMAGIC"
Same as \f(CW\*(C`GLOB_NOCHECK\*(C'\fR but it only returns tha pattern if it do not
contain any of tha special charactas \*(L"*\*(R", \*(L"?\*(R" or \*(L"[\*(R".  \f(CW\*(C`NOMAGIC\*(C'\fR is
provided ta simplify implementin tha phat \fIcsh\fR\|(1) globbing
behaviour n' should probably not be used anywhere else.
.ie n .IP """GLOB_QUOTE""" 4
.el .IP "\f(CWGLOB_QUOTE\fR" 4
.IX Item "GLOB_QUOTE"
Use tha backslash ('\e') characta fo' quoting: every last muthafuckin occurrence of a
backslash followed by a cold-ass lil characta up in tha pattern is replaced by that
character, avoidin any special interpretation of tha character.
(But peep below fo' exceptions on \s-1DOSISH\s0 systems).
.ie n .IP """GLOB_TILDE""" 4
.el .IP "\f(CWGLOB_TILDE\fR" 4
.IX Item "GLOB_TILDE"
Expand patterns dat start wit '~' ta user name home directories.
.ie n .IP """GLOB_CSH""" 4
.el .IP "\f(CWGLOB_CSH\fR" 4
.IX Item "GLOB_CSH"
For convenience, \f(CW\*(C`GLOB_CSH\*(C'\fR be a synonym for
\&\f(CW\*(C`GLOB_BRACE | GLOB_NOMAGIC | GLOB_QUOTE | GLOB_TILDE | GLOB_ALPHASORT\*(C'\fR.
.PP
Da \s-1POSIX\s0 provided \f(CW\*(C`GLOB_APPEND\*(C'\fR, \f(CW\*(C`GLOB_DOOFFS\*(C'\fR, n' tha FreeBSD
extensions \f(CW\*(C`GLOB_ALTDIRFUNC\*(C'\fR, n' \f(CW\*(C`GLOB_MAGCHAR\*(C'\fR flags aint been
implemented up in tha Perl version cuz they involve mo' complex
interaction wit tha underlyin C structures.
.PP
Da followin flag has been added up in tha Perl implementation for
csh compatibility:
.ie n .IP """GLOB_ALPHASORT""" 4
.el .IP "\f(CWGLOB_ALPHASORT\fR" 4
.IX Item "GLOB_ALPHASORT"
If \f(CW\*(C`GLOB_NOSORT\*(C'\fR aint up in effect, sort filenames be alphabetical
order (case do not matter) rather than up in \s-1ASCII\s0 order.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
\&\fIbsd_glob()\fR returns a list of matchin paths, possibly zero length.  If an
error occurred, &File::Glob::GLOB_ERROR is ghon be non-zero n' \f(CW$!\fR will be
set.  &File::Glob::GLOB_ERROR is guaranteed ta be zero if no error occurred,
or one of tha followin joints otherwise:
.ie n .IP """GLOB_NOSPACE""" 4
.el .IP "\f(CWGLOB_NOSPACE\fR" 4
.IX Item "GLOB_NOSPACE"
An attempt ta allocate memory failed.
.ie n .IP """GLOB_ABEND""" 4
.el .IP "\f(CWGLOB_ABEND\fR" 4
.IX Item "GLOB_ABEND"
Da glob was stopped cuz a error was encountered.
.PP
In tha case where \fIbsd_glob()\fR has found some matchin paths yo, but is
interrupted by a error, it will return a list of filenames \fBand\fR
set &File::Glob::ERROR.
.PP
Note dat \fIbsd_glob()\fR deviates from \s-1POSIX\s0 n' FreeBSD \fIglob\fR\|(3) behaviour
by not thankin bout \f(CW\*(C`ENOENT\*(C'\fR n' \f(CW\*(C`ENOTDIR\*(C'\fR as errors \- \fIbsd_glob()\fR will
continue processin despite dem errors, unless tha \f(CW\*(C`GLOB_ERR\*(C'\fR flag is
set.
.PP
Be aware dat all filenames returned from File::Glob is tainted.
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
If you wanna use multiple patterns, e.g. \f(CW\*(C`bsd_glob("a* b*")\*(C'\fR, you should
probably throw dem up in a set as up in \f(CW\*(C`bsd_glob("{a*,b*}")\*(C'\fR.  This is cuz
the argument ta \fIbsd_glob()\fR aint subjected ta parsin by tha C shell.
Remember dat you can bust a funky-ass backslash ta escape thangs.
.IP "\(bu" 4
On \s-1DOSISH\s0 systems, backslash be a valid directory separator character.
In dis case, use of backslash as a quotin characta (via \s-1GLOB_QUOTE\s0)
interferes wit tha use of backslash as a gangbangin' finger-lickin' directory separator. Shiiit, dis aint no joke.  The
best (simplest, most portable) solution is ta use forward slashes for
directory separators, n' backslashes fo' quoting.  But fuck dat shiznit yo, tha word on tha street is dat dis do
not match \*(L"normal practice\*(R" on these systems.  As a cold-ass lil concession ta user
expectation, therefore, backslashes (under \s-1GLOB_QUOTE\s0) only quote the
glob metacharactas '[', ']', '{', '}', '\-', '~', n' backslash itself.
All other backslashes is passed all up in unchanged.
.IP "\(bu" 4
Win32 playas should use tha real slash.  If you straight-up wanna use
backslashes, consider rockin Sarathyz File::DosGlob, which comes with
the standard Perl distribution.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"glob\*(R" up in perlfunc, \fIglob\fR\|(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
Da Perl intercourse was freestyled by Nathan Torkington <gnat@frii.com>,
and is busted out under tha artistic license.  Further modifications were
made by Greg Bacon <gbacon@cs.uah.edu>, Gurusamy Sarathy
<gsar@activestate.com>, n' Thomas Wegner
<wegner_thomas@yahoo.com>.  Da C glob code has the
followin copyright:
.PP
.Vb 2
\&    Copyright (c) 1989, 1993 Da Regentz of tha Universitizzle of California.
\&    All muthafuckin rights reserved.
\&
\&    This code is derived from software contributed ta Berkeley by
\&    Guido van Rossum.
\&
\&    Redistribution n' use up in source n' binary forms, wit or without
\&    modification, is permitted provided dat tha followin conditions
\&    is met:
\&
\&    1. Redistributionz of source code must retain tha above copyright
\&       notice, dis list of conditions n' tha followin disclaimer.
\&    2. Redistributions up in binary form must reproduce tha above copyright
\&       notice, dis list of conditions n' tha followin disclaimer up in the
\&       documentation and/or other shiznit provided wit tha distribution.
\&    3. Neither tha name of tha Universitizzle nor tha namez of its contributors
\&       may be used ta endorse or promote shizzle derived from dis software
\&       without specific prior freestyled permission.
\&
\&    THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" AND
\&    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
\&    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
\&    ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
\&    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
\&    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
\&    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
\&    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
\&    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
\&    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
\&    SUCH DAMAGE.
.Ve
