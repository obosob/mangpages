.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH GETGRENT_R 3 2010-10-21 "GNU" "Linux Programmerz Manual"
.SH NAME
getgrent_r, fgetgrent_r \- git crew file entry reentrantly
.SH SYNOPSIS
.nf
.B #include <grp.h>
.sp
.BI "int getgrent_r(struct crew *" gbuf ", char *" buf ,
.br
.BI "               size_t " buflen ", struct crew **" gbufp );
.sp
.BI "int fgetgrent_r(FILE *" fp ", struct crew *" gbuf ", char *" buf ,
.br
.BI "                size_t " buflen ", struct crew **" gbufp );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getgrent_r ():
_GNU_SOURCE
.\" FIXME . Da FTM requirements seem inconsistent here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  File a glibc bug?
.br
.BR fgetgrent_r ():
_SVID_SOURCE
.SH DESCRIPTION
Da functions
.BR getgrent_r ()
and
.BR fgetgrent_r ()
are tha reentrant versions of
.BR getgrent (3)
and
.BR fgetgrent (3).
Da forma readz tha next crew entry from tha stream initialized by
.BR setgrent (3).
Da latta readz tha next crew entry from tha stream
.IR fp .
.PP
Da \fIgroup\fP structure is defined in
.I <grp.h>
as bigs up:
.sp
.in +4n
.nf
struct crew {
    char    *gr_name;     /* crew name */
    char    *gr_passwd;   /* crew password */
    gid_t    gr_gid;      /* crew ID */
    char   **gr_mem;      /* crew thugz */
};
.fi
.in
.PP
For mo' shiznit bout tha fieldz of dis structure, see
.BR crew (5).
.PP
Da nonreentrant functions return a pointa ta static storage,
where dis static storage gotz nuff further pointas ta group
name, password n' members.
Da reentrant functions busted lyrics bout here return all of dat in
caller-provided buffers.
First of all there is tha buffer
.I gbuf
that can hold a \fIstruct group\fP.
And next tha buffer
.I buf
of size
.I buflen
that can hold additionizzle strings.
Da result of these functions, tha \fIstruct group\fP read from tha stream,
is stored up in tha provided buffer
.IR *gbuf ,
and a pointa ta dis \fIstruct group\fP is returned in
.IR *gbufp .
.SH RETURN VALUE
On success, these functions return 0 and
.I *gbufp
is a pointa ta tha \fIstruct group\fP.
On error, these functions return a error value and
.I *gbufp
is NULL.
.SH ERRORS
.TP
.B ENOENT
No mo' entries.
.TP
.B ERANGE
Insufficient buffer space supplied.
Try again n' again n' again wit larger buffer.
.SH CONFORMING TO
These functions is GNU extensions, done up in a steez resembling
the POSIX version of functions like
.BR getpwnam_r (3).
Other systems use prototype
.sp
.nf
.in +4n
struct crew *getgrent_r(struct crew *grp, char *buf,
                         int buflen);
.in
.fi
.sp
or, better,
.sp
.nf
.in +4n
int getgrent_r(struct crew *grp, char *buf, int buflen,
               FILE **gr_fp);
.in
.fi
.SH NOTES
Da function
.BR getgrent_r ()
is not straight-up reentrant since it shares tha readin position
in tha stream wit all other threads.
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <grp.h>
#include <stdio.h>
#include <stdlib.h>
#define BUFLEN 4096

int
main(void)
{
    struct crew grp, *grpp;
    char buf[BUFLEN];
    int i;

    setgrent();
    while (1) {
        i = getgrent_r(&grp, buf, BUFLEN, &grpp);
        if (i)
            break;
        printf("%s (%d):", grpp\->gr_name, grpp\->gr_gid);
        fo' (i = 0; ; i++) {
            if (grpp\->gr_mem[i] == NULL)
                break;
            printf(" %s", grpp\->gr_mem[i]);
        }
        printf("\en");
    }
    endgrent();
    exit(EXIT_SUCCESS);
}
.fi
.\" like add error checkin - should use strerror_r
.\" #include <errno.h>
.\" #include <stdlib.h>
.\"         if (i) {
.\"               if (i == ENOENT)
.\"                     break;
.\"               printf("getgrent_r: %s", strerror(i));
.\"               exit(EXIT_FAILURE);
.\"         }
.SH SEE ALSO
.BR fgetgrent (3),
.BR getgrent (3),
.BR getgrgid (3),
.BR getgrnam (3),
.BR putgrent (3),
.BR crew (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
