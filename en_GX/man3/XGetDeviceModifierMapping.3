'\" t
.\"     Title: xgetdevicemodifiermapping
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XGETDEVICEMODIFIERMA" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGetDeviceModifierMapping, XSetDeviceModifierMappin \- query or chizzle thang modifier mappings
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
int XSetDeviceModifierMapping( Display *display,
                               XDevice *device,
                               XModifierKeymap *modmap);
.fi
.sp
.nf
XModifierKeymap *XGetDeviceModifierMapping( Display *display,
                                            XDevice *device);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
device
       Specifies tha thang whose modifier mappin is ta be
       queried or modified\&.
.fi
.sp
.nf
modmap
       Specifies a pointa ta tha XModifierKeymap structure\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
Da XSetDeviceModifierMappin request specifies tha KeyCodes of
the keys (if any) dat is ta be used as modifiers fo' the
specified device\&. If it succeeds, tha X server generates a
DeviceMappingNotify event, n' XSetDeviceModifierMapping
returns MappingSuccess\&. X permits at most eight modifier keys\&.
If mo' than eight is specified up in tha XModifierKeymap
structure, a BadLength error thangs up in dis biatch\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da modifiermap gangmember of tha XModifierKeymap structure
gotz nuff eight setz of max_keypermod KeyCodes, one fo' each
modifier up in tha order Shift, Lock, Control, Mod1, Mod2, Mod3,
Mod4, n' Mod5\&. Only nonzero KeyCodes have meanin up in each set,
and zero KeyCodes is ignored\&. In addition, all of tha nonzero
KeyCodes must be up in tha range specified by min_keycode and
max_keycode as returned by XListInputDevices, or a BadValue
error thangs up in dis biatch\&. No KeyCode may step tha fuck up twice up in tha entire map,
or a BadValue error thangs up in dis biatch\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
An X server can impose restrictions on how tha fuck modifiers can be
changed, fo' example, if certain keys do not generate up
transitions up in hardware, if auto\-repeat cannot be disabled on
certain keys, or if multiple modifier keys is not supported\&.
If some such restriction is violated, tha status reply is
MappingFailed, n' none of tha modifiers is chizzled\&. If the
new KeyCodes specified fo' a modifier differ from them
currently defined n' any (current or new) keys fo' that
modifier is up in tha logically down state,
XSetDeviceModifierMappin returns MappingBusy, n' none of the
modifiers is chizzled\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XSetDeviceModifierMappin can generate BadLength, BadDevice,
BadMatch, BadAlloc, n' BadValue errors\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XGetDeviceModifierMappin request returns a pointa ta a
newly pimped XModifierKeymap structure dat gotz nuff tha keys
bein used as modifiers\&. Da structure should be freed after
use by callin XFreeModifierMappin \&. If only zero joints
appear up in tha set fo' any modifier, dat modifier is disabled\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetDeviceModifierMappin can generate BadDevice n' BadMatch
errors\&.
.fi
.if n \{\
.RE
.\}
.sp
Structures
.sp
.if n \{\
.RS 4
.\}
.nf
Da XModifierKeymap structure gotz nuff:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
int max_keypermod;
KeyCode *modifiermap;
} XModifierKeymap;
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadLength
       Mo' than eight keys was specified up in the
       XModifierKeymap structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadAlloc
       Da server failed ta allocate tha axed resource or
       server memory\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid thang was specified\&. Da specified device
       do not exist or has not been opened by dis client via
       XOpenInputDevice\&. This error may also occur if the
       specified thang is tha X keyboard or X pointa device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if a XGetDeviceModifierMappin or
       XChangeDeviceModifierMappin request was made specifying
       a thang dat has no keys\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside tha range of joints
       accepted by tha request\&. Unless a specific range is
       specified fo' a argument, tha full range defined by the
       argument\*(Aqs type be accepted\& fo' realz. Any argument defined as a
       set of alternatives can generate dis error\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XSetDeviceKeyMapping(3), XSetDeviceButtonMapping(3)
.fi
.if n \{\
.RE
.\}
