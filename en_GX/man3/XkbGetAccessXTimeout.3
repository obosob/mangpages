.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbGetAccessXTimeout 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbGetAccessXTimeout \- Queries tha current AccessXTimeout options fo' a 
keyboard device
.SH SYNOPSIS
.HP
.B Bool XkbGetAccessXTimeout
.BI "(\^Display *" "display" "\^,"
.BI "unsigned int " "device_spec" "\^,"
.BI "unsigned short *" "timeout_rtrn" "\^,"
.BI "unsigned int *" "ctrls_mask_rtrn" "\^,"
.BI "unsigned int *" "ctrls_values_rtrn" "\^,"
.BI "unsigned short *" "options_mask_rtrn" "\^,"
.BI "unsigned short *" "options_values_rtrn" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- display
unsigned short
.TP
.I \- device_spec
device ta query, or XkbUseCoreKbd 
.TP
.I \- timeout_rtrn
delay until AccessXTimeout, seconds
.TP
.I \- ctrls_mask_rtrn
backfilled wit controls ta modify
.TP
.I \- ctrls_values_rtrn
backfilled wit on/off status fo' controls
.TP
.I \- options_mask_rtrn
backfilled wit ax_options ta modify
.TP
.I \- options_values_rtrn
backfilled wit joints fo' ax_options
.SH DESCRIPTION
.LP
In environments where computas is shared, features like fuckin SlowKeys present a 
problem: if 
SlowKeys is on, tha keyboard can step tha fuck up ta be unresponsive cuz keys is not 
accepted 
until they is held fo' a cold-ass lil certain period of time. To help solve dis problem, 
Xkb serves up 
an AccessXTimeout control ta automatically chizzle tha enabled/disabled state of 
any boolean 
controls n' ta chizzle tha value of tha AccessXKeys n' AccessXFeedback control 
attributes 
if tha keyboard is idle fo' a specified period of time.

When a timeout as specified by AccessXTimeout occurs n' a cold-ass lil control is 
consequently modified, 
Xkb generates a XkbControlsNotify event.

.I XkbGetAccessXTimeout 
sendz a request ta tha X server ta obtain tha current joints fo' tha 
AccessXTimeout attributes, waits fo' a reply, n' backfills tha joints tha fuck into tha 
appropriate arguments, n' you can put dat on yo' toast. Da parametas 
.I options_mask_rtrn 
and 
.I options_values_rtrn 
are backfilled wit tha options ta modify n' tha joints fo' 
.I ax_options, 
which be a gangbangin' field up in tha XkbControlsRec structure.
.I XkbGetAccessXTimeout 
returns True if successful; if a cold-ass lil compatible version of tha Xkb extension aint 
available up in tha server, 
.I XkbGetAccessXTimeout 
returns False.
.SH "RETURN VALUES"
.TP 15
True
Da 
.I XkbGetAccessXTimeout 
returns True when it successfully sendz a request ta tha X server ta obtain tha 
current joints fo' tha AccessXTimeout attributes, waits fo' a reply, n' 
backfills tha joints tha fuck into tha appropriate arguments.
.TP 15
False
Da 
.I XkbGetAccessXTimeout 
funtion returns False if a cold-ass lil compatible version of tha Xkb extension aint 
available up in tha 
server.
.SH STRUCTURES
.LP
.nf
Da XkbControlsRec structure is defined as bigs up:

\&#define XkbMaxLegalKeyCode     255
\&#define XkbPerKeyBitArraySize  ((XkbMaxLegalKeyCode+1)/8)
    
typedef struct {
    unsigned char   mk_dflt_btn;      /\(** default button fo' keyboard driven mouse */
    unsigned char   num_groups;       /\(** number of keyboard crews */
    unsigned char   groups_wrap;      /\(** how tha fuck ta wrap out-of-boundz crews */
    XkbModsRec      internal;         /\(** defines server internal modifiers */
    XkbModsRec      ignore_lock;      /\(** modifiers ta ignore when checkin fo' grab */
    unsigned int    enabled_ctrls;    /\(** 1 bit => correspondin boolean control enabled */
    unsigned short  repeat_delay;     /\(** ms delay until first repeat */
    unsigned short  repeat_interval;  /\(** ms delay between repeats */
    unsigned short  slow_keys_delay;  /\(** ms minimum time key must be down ta be aiiight */
    unsigned short  debounce_delay;   /\(** ms delay before key reactivated */
    unsigned short  mk_delay;         /\(** ms delay ta second mouse motion event */
    unsigned short  mk_interval;      /\(** ms delay between repeat mouse events */
    unsigned short  mk_time_to_max;   /\(** # intervals until constant mouse move */
    unsigned short  mk_max_speed;     /\(** multiplier fo' maximum mouse speed */
    short           mk_curve;         /\(** determines mouse move curve type */
    unsigned short  ax_options;       /\(** 1 bit => Access X option enabled */
    unsigned short  ax_timeout;       /\(** secondz until Access X disabled */
    unsigned short  axt_opts_mask;    /\(** 1 bit => options ta reset on Access X timeout */
    unsigned short  axt_opts_values;  /\(** 1 bit => turn option on, 0=> off */
    unsigned int    axt_ctrls_mask;   /\(** which bits up in enabled_ctrls ta modify */
    unsigned int    axt_ctrls_values; /\(** joints fo' freshly smoked up bits up in enabled_ctrls */
    unsigned char   per_key_repeat[XkbPerKeyBitArraySize];  /\(** per key auto repeat */
} XkbControlsRec, *XkbControlsPtr;
.fi
