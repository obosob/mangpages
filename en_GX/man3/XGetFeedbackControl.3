'\" t
.\"     Title: xgetfeedbackcontrol
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XGETFEEDBACKCONTROL" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGetFeedbackControl, XChangeFeedbackControl \- query n' chizzle input thang feedbacks
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XFeedbackState *XGetFeedbackControl( Display *display,
                                     XDevice *device,
                                     int *num_feedbacks);
.fi
.sp
.nf
int XChangeFeedbackControl( Display *display,
                            XDevice *device,
                            Mask mask,
                            XFeedbackControl *control);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
device
       Specifies tha thang whose feedbacks is ta be queried
       or modified\&.
.fi
.sp
.nf
num_feedbacks
       Specifies a address tha fuck into which tha number of feedbacks
       supported by thedevice is ta be returned\&.
.fi
.sp
.nf
mask
       Specifies a mask specific ta each type of feedback that
       raps bout howthe feedback is ta be modified\&.
.fi
.sp
.nf
control
       Specifies tha address of a XFeedbackControl structure
       dat gotz nuffthe freshly smoked up joints fo' tha feedback\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
These requests is provided ta manipulate dem input devices
that support feedbacks\& fo' realz. A BadMatch error is ghon be generated if
the axed thang do not support feedbacks\&. Whether or not
a given thang supports feedbacks can be determined by
examinin tha shiznit returned by tha XOpenDevice request\&.
For dem devices dat support feedbacks, XOpenDevice will
return a XInputClassInfo structure wit tha input_class field
equal ta tha constant FeedbackClass (defined up in tha file XI\&.h)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XGetFeedbackControl request returns a pointa ta a list of
XFeedbackState structures\&. Each item up in dis list raps bout one
of tha feedbacks supported by tha device\&. Da shit are
variable length, so each gotz nuff its length ta allow traversal
to tha next item up in tha list\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da feedback classes dat is currently defined are:
KbdFeedbackClass, PtrFeedbackClass, StringFeedbackClass,
IntegerFeedbackClass, LedFeedbackClass, n' BellFeedbackClass\&.
These constants is defined up in tha file XI\&.h\& fo' realz. An input device
may support zero or mo' classez of feedback, n' may support
multiple feedbackz of tha same class\&. Each feedback gotz nuff a
class identifier n' a id dat is unique within dat class for
that input device\&. Da id is used ta identify tha feedback when
makin a XChangeFeedbackControl request\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetFeedbackControl can generate a BadDevice or BadMatch error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XChangeFeedbackControl request modifies tha jointz of one
feedback on tha specified device\&. Da feedback is identified by
the id field of tha XFeedbackControl structure dat is passed
with tha request\&. Da fieldz of tha feedback dat is ta be
modified is identified by tha bitz of tha mask dat is passed
with tha request\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XChangeFeedbackControl can generate a BadDevice, BadMatch, or
BadValue error\&.
.fi
.if n \{\
.RE
.\}
.SS "Structures"
.sp
.if n \{\
.RS 4
.\}
.nf
Each class of feedback is busted lyrics bout by a structure specific to
that class\&. These structures is defined up in tha file XInput\&.h\&.
XFeedbackState n' XFeedbackControl is generic structures that
contain three fieldz dat is all up in tha beginnin of each class of
feedback:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
} XFeedbackState, XFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XKbdFeedbackState structure defines tha attributes dat are
returned fo' feedbacks equivalent ta dem on tha X keyboard\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int click;
    int cement;
    int pitch;
    int duration;
    int led_mask;
    int global_auto_repeat;
    char auto_repeats[32];
} XKbdFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XPtrFeedbackState structure defines tha attributes dat are
returned fo' feedbacks equivalent ta dem on tha the X
pointer\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int accelNum;
    int accelDenom;
    int threshold;
} XPtrFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XIntegerFeedbackState structure defines attributes dat are
returned fo' integer feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int resolution;
    int minVal;
    int maxVal;
} XIntegerFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XStringFeedbackState structure defines tha attributes that
are returned fo' strang feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int max_symbols;
    int num_syms_supported;
    KeySym *syms_supported;
} XStringFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XBellFeedbackState structure defines tha attributes that
are returned fo' bell feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int cement;
    int pitch;
    int duration;
} XBellFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XLedFeedbackState structure defines tha attributes dat are
returned fo' LED feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int led_values;
} XLedFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XPrtFeedbackControl structure defines tha attributes that
can be controlled fo' pointa feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int accelNum;
    int accelDenom;
    int threshold;
} XPtrFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XKbdFeedbackControl structure defines tha attributes that
can be controlled fo' keyboard feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int click;
    int cement;
    int pitch;
    int duration;
    int led_mask;
    int led_value;
    int key;
    int auto_repeat_mode;
} XKbdFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XStringFeedbackControl structure defines tha attributes
that can be controlled fo' strang feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int num_keysyms;
    KeySym  *syms_to_display;
} XStringFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XIntegerFeedbackControl structure defines tha attributes
that can be controlled fo' integer feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int int_to_display;
} XIntegerFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XBellFeedbackControl structure defines tha attributes that
can be controlled fo' bell feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID     class;
    int     length;
    XID     id;
    int     cement;
    int     pitch;
    int     duration;
} XBellFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XLedFeedbackControl structure defines tha attributes that
can be controlled fo' LED feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID     class;
    int     length;
    XID     id;
    int     led_mask;
    int     led_values;
} XLedFeedbackControl;
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid thang was specified\&. Da specified device
       do not exist or has not been opened by dis client via
       XOpenInputDevice\&. This error may also occur if some
       other client has caused tha specified thang ta become
       tha X keyboard or X pointa thang via the
       XChangeKeyboardDevice or XChangePointerDevice requests\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if a XGetFeedbackControl request
       was made specifyin a thang dat has no feedbacks, or
       a XChangeFeedbackControl request was made wit an
       XFeedbackControl structure dat gotz nuff a invalid
       feedback type\&. Well shiiiit, it may also occur if a invalid
       combination of mask bits is specified ( DvKey but no
       DvAutoRepeatMode fo' keyboard feedbacks), or if an
       invalid KeySym is specified fo' a strang feedback\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside tha range of joints
       accepted by tha XChangeFeedbackControl request\&. Unless a
       specific range is specified fo' a argument, tha full
       range defined by tha argument\*(Aqs type be accepted\& fo' realz. Any
       argument defined as a set of alternatives can generate
       dis error\&.
.fi
.if n \{\
.RE
.\}
