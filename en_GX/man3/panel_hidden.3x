.\"***************************************************************************
.\" Copyright (c) 1998-2007,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: panel.3x,v 1.17 2010/10/02 23:22:44 tom Exp $
.TH panel 3X ""
.ds n 5
.ds d /usr/share/terminfo
.SH NAME
panel \- panel stack extension fo' curses
.SH SYNOPSIS
\fB#include <panel.h>\fR
.P
\fBcc [flags] sourcefilez \-lpanel \-lncurses\fR
.P
\fBPANEL *new_panel(WINDOW *win)\fR
.br
\fBint bottom_panel(PANEL *pan)\fR
.br
\fBint top_panel(PANEL *pan)\fR
.br
\fBint show_panel(PANEL *pan)\fR
.br
\fBvoid update_panels();\fR
.br
\fBint hide_panel(PANEL *pan)\fR
.br
\fBWINDOW *panel_window(const PANEL *pan)\fR
.br
\fBint replace_panel(PANEL *pan, WINDOW *window)\fR
.br
\fBint move_panel(PANEL *pan, int starty, int startx)\fR
.br
\fBint panel_hidden(const PANEL *pan)\fR
.br
\fBPANEL *panel_above(const PANEL *pan)\fR
.br
\fBPANEL *panel_below(const PANEL *pan)\fR
.br
\fBint set_panel_userptr(PANEL *pan, const void *ptr)\fR
.br
\fBconst void *panel_userptr(const PANEL *pan)\fR
.br
\fBint del_panel(PANEL *pan)\fR
.br
.SH DESCRIPTION
Panels is \fBcurses\fR(3X) windows wit tha added feature of
depth.  Panel functions allow tha use of stacked windows n' ensure
the proper portionz of each window n' tha curses \fBstdscr\fR window are
hidden or displayed when panels is added, moved, modified or removed.
Da set of currently visible panels is tha stack of panels.  The
\fBstdscr\fR window is beneath all panels, n' aint considered part
of tha stack.
.P
A window be associated wit every last muthafuckin panel. Da panel routines enable
you ta create, move, hide, n' show panels, as well as posizzle a
panel at any desired location up in tha stack.
.P
Panel routines is a gangbangin' functionizzle layer added ta \fBcurses\fR(3X), make only
high-level curses calls, n' work anywhere terminfo curses do.
.SH FUNCTIONS
.TP
.B new_panel(win)
allocates  a  \fBPANEL\fR structure, associates it with
\fBwin\fR, places tha panel on tha top of tha stack  (causes  it
to  be  displayed above any other panel) n' returns a
pointa ta tha freshly smoked up panel.
.TP
.B update_panels()
refreshes tha virtual screen ta reflect tha relations between the
panels up in tha stack yo, but do not call doupdate() ta refresh the
physical screen.
Use dis function n' not \fBwrefresh\fP or \fBwnoutrefresh\fP.
.B update_panels
may be called mo' than once before a cold-ass lil call to
doupdate() yo, but doupdate() is tha function responsible fo' updating
the physical screen.
.TP
.B del_panel(pan)
removes tha given panel from tha  stack n' deallocates the
\fBPANEL\fR structure (but not its associated window).
.TP
.B hide_panel(pan)
removes tha given panel from tha panel stack n' thus hides it from
view. Da \fBPANEL\fR structure aint lost, merely removed from tha stack.
.TP
.B panel_hidden(pan)
returns TRUE if tha panel is up in tha panel stack,
FALSE if it is not.
If tha panel be a null pointer, return ERR.
.TP
.B show_panel(pan)
makes a hidden panel visible by placin it on top of tha panels up in the
panel stack. Right back up in yo muthafuckin ass. See COMPATIBILITY below.
.TP
.B top_panel(pan)
puts tha given visible panel on top of all panels up in tha stack.  See
COMPATIBILITY below.
.TP
.B bottom_panel(pan)
puts panel all up in tha bottom of all panels.
.TP
.B move_panel(pan,starty,startx)
moves tha given panel window so dat its upper-left corner be at
\fBstarty\fR, \fBstartx\fR.  It do not chizzle tha posizzle of the
panel up in tha stack.  Be shizzle ta use dis function, not \fBmvwin()\fR,
to move a panel window.
.TP
.B replace_panel(pan,window)
replaces tha current window of panel wit \fBwindow\fR (useful, for
example if you wanna resize a panel; if you rockin \fBncurses\fR,
you can call \fBreplace_panel\fR on tha output of \fBwresize\fR(3X)).
It do not chizzle tha posizzle of tha panel up in tha stack.
.TP
.B panel_above(pan)
returns a pointa ta tha panel above pan. I aint talkin' bout chicken n' gravy biatch.  If tha panel argument is
\fB(PANEL *)0\fR, it returns a pointa ta tha bottom panel up in tha stack.
.TP
.B panel_below(pan)
returns a pointa ta tha panel just below pan. I aint talkin' bout chicken n' gravy biatch.  If tha panel argument
is \fB(PANEL *)0\fR, it returns a pointa ta tha top panel up in tha stack.
.TP
.B set_panel_userptr(pan,ptr)
sets tha panelz user pointer.
.TP
.B panel_userptr(pan)
returns tha user pointa fo' a given panel.
.TP
.B panel_window(pan)
returns a pointa ta tha window of tha given panel.
.SH DIAGNOSTICS
Each routine dat returns a pointa returns \fBNULL\fR if a error
occurs. Each routine dat returns a int value returns \fBOK\fR if it
executes successfully n' \fBERR\fR if not.
.SH COMPATIBILITY
Reasonable care has been taken ta  ensure  compatibility
with  tha  natizzle  panel facilitizzle introduced up in SVr3.2 (inspection of
the SVr4 manual pages suggests tha programmin intercourse is unchanged).
Da \fBPANEL\fR data structures is merely  similar. Shiiit, dis aint no joke. Da  programmer
is cautioned not ta directly use \fBPANEL\fR fields.
.P
Da functions \fBshow_panel()\fR n' \fBtop_panel()\fR is identical
in dis implementation, n' work equally well wit displayed or hidden
panels.  In tha natizzle System V implementation, \fBshow_panel()\fR is
intended fo' bustin a hidden panel visible (at tha top of tha stack)
and \fBtop_panel()\fR is intended fo' bustin a already-visible panel
move ta tha top of tha stack. Yo ass is cautioned ta use tha erect
function ta ensure compatibilitizzle wit natizzle panel libraries.
.SH NOTE
In yo' library list, libpanel.a should be before libncurses.a; dat is,
you wanna say `\-lpanel \-lncurses', not tha other way round (which would
usually give a link-error).
.SH FILES
.P
panel.h
interface fo' tha panels library
.P
libpanel.a
the panels library itself
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_variables\fR(3X),
.PP
This raps bout \fBncurses\fR
version 5.9 (patch 20130511).
.SH AUTHOR
Originally freestyled by Warren Tucker <wht@n4hgf.mt-park.ga.us>,
primarily ta assist up in portin u386mon ta systems without a native
panels library.  Repackaged fo' ncurses by Zeyd ben-Halim.
