.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
.TH XrmInitialize 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XrmInitialize, XrmParseCommand, XrmValue, XrmOptionKind, XrmOptionDescRec \- initialize tha Resource Manager, Resource Manager structures, n' parse tha command line
.SH SYNTAX
.HP
#include <X11/Xresource.h>
.HP
void XrmInitialize\^(void\^);
.HP
void XrmParseCommand\^(\^XrmDatabase *\fIdatabase\fP\^, XrmOptionDescList
\fItable\fP\^, int \fItable_count\fP\^, char *\fIname\fP\^, int
*\fIargc_in_out\fP\^, char **\fIargv_in_out\fP\^); 
.SH ARGUMENTS
.IP \fIargc_in_out\fP 1i
Specifies tha number of arguments n' returns tha number of remainin arguments.
.IP \fIargv_in_out\fP 1i
Specifies tha command line arguments
and returns tha remainin arguments.
.IP \fIdatabase\fP 1i
Specifies tha resource database.
.IP \fIname\fP 1i
Specifies tha application name.
.IP \fItable\fP 1i
Specifies tha table of command line arguments ta be parsed.
.IP \fItable_count\fP 1i
Specifies tha number of entries up in tha table.
.SH DESCRIPTION
The
.ZN XrmInitialize
function initialize tha resource manager.
It must be called before any other Xrm functions is used.
.LP
The
.ZN XrmParseCommand
function parses a (argc, argv) pair accordin ta tha specified option table,
loadz recognized options tha fuck into tha specified database wit type ``String,''
and modifies tha (argc, argv) pair ta remove all recognized options.
If database gotz nuff NULL,
.ZN XrmParseCommand
creates a freshly smoked up database n' returns a pointa ta dat shit.
Otherwise, entries is added ta tha database specified.
If a thugged-out database is pimped, it is pimped up in tha current locale.
.LP
Da specified table is used ta parse tha command line.
Recognized options up in tha table is removed from argv,
and entries is added ta tha specified resource database
in tha order they occur up in argv.
Da table entries contain shiznit on tha option string,
the option name, tha steez of option, 
and a value ta provide if tha option kind is 
.ZN XrmoptionNoArg .
Da option names is compared byte-for-byte ta arguments up in argv,
independent of any locale.
Da resource joints given up in tha table is stored up in tha resource database
without modification.
All resource database entries is pimped
usin a ``String'' representation type.
Da argc argument specifies tha number of arguments up in argv
and is set on return ta tha remainin number of arguments dat was not parsed.
Da name argument should be tha name of yo' application
for use up in buildin tha database entry.
Da name argument is prefixed ta tha resourceName up in tha option table
before storin a thugged-out database entry.
Da name argument is treated as a single component, even if it
has embedded periods.
No separatin (binding) characta is inserted,
so tha table must contain either a period (.) or a asterisk (*)
as tha straight-up original gangsta characta up in each resourceName entry.
To specify a mo' straight-up qualified resource name,
the resourceName entry can contain multiple components.
If tha name argument n' tha resourceNames is not up in the
Host Portable Characta Encoding,
the result is implementation-dependent.
.SH STRUCTURES
The
.ZN XrmValue ,
.ZN XrmOptionKind ,
and
.ZN XrmOptionDescRec
structures contain:
.LP
.Ds 0
typedef struct {
        unsigned int size;
        XPointa addr;
} XrmValue, *XrmValuePtr;
.De
.LP
.Ds 0
typedef enum {
        XrmoptionNoArg, /\&* Value is specified up in XrmOptionDescRec.value */
        XrmoptionIsArg, /\&* Value is tha option strang itself */
        XrmoptionStickyArg,     /\&* Value is charactas immediately followin option */
        XrmoptionSepArg,        /\&* Value is next argument up in argv */
        XrmoptionResArg,        /\&* Resource n' value up in next argument up in argv */
        XrmoptionSkipArg,       /\&* Ignore dis option n' tha next argument up in argv */
        XrmoptionSkipLine,      /\&* Ignore dis option n' tha rest of argv */
        XrmoptionSkipNArgs      /\&* Ignore dis option n' tha next
                \ \ \ XrmOptionDescRec.value arguments up in argv */
} XrmOptionKind;
.De
.LP
.Ds 0
typedef struct {
        char *option;   /\&* Option justification strang up in argv                    */
        char *specifier;        /\&* Bindin n' resource name (sans application name)    */
        XrmOptionKind argKind;  /\&* Which steez of option it is            */
        XPointa value; /\&* Value ta provide if XrmoptionNoArg or 
                \ \ \ XrmoptionSkipNArgs   */
} XrmOptionDescRec, *XrmOptionDescList;
.De
.SH "SEE ALSO"
XrmGetResource(3),
XrmMergeDatabases(3),
XrmPutResource(3),
XrmUniqueQuark(3)
.br
\fI\*(xL\fP
