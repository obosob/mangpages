.\" Copyright 1993 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be
.\" included up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtCreate-Widget XtCreate-Managed-Widget XtDestroy-Widget XtVa-Create-Widget XtVa-Create-Managed-Widget wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtCreateWidget 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtCreateWidget, XtVaCreateWidget, XtCreateManagedWidget, XtVaCreateManagedWidget, XtDestroyWidget \- create n' destroy widgets
.SH SYNTAX
.HP
Widget XtCreateWidget(Strin \fIname\fP, WidgetClass \fIwidget_class\fP,
Widget \fIparent\fP, ArgList \fIargs\fP, Cardinal \fInum_args\fP);
.HP
Widget XtVaCreateWidget(Strin \fIname\fP, WidgetClass \fIwidget_class\fP,
Widget \fIparent\fP, ...\^);
.HP
Widget XtCreateManagedWidget(Strin \fIname\fP, WidgetClass
\fIwidget_class\fP, Widget \fIparent\fP, ArgList \fIargs\fP, Cardinal
\fInum_args\fP);
.HP
Widget XtVaCreateManagedWidget(Strin \fIname\fP, WidgetClass
\fIwidget_class\fP, Widget \fIparent\fP, ...\^);
.HP
void XtDestroyWidget(Widget \fIw\fP);
.SH ARGUMENTS
.ds Al ta override tha resource defaults
.IP \fIargs\fP 1i
Specifies tha argument list \*(Al.
.IP \fIname\fP 1i
Specifies tha resource name fo' tha pimped widget,
which is used fo' retrievin resources
and, fo' dat reason, should not be tha same as any other widget
that be a cold-ass lil lil pimp of same parent.
.IP \fInum_args\fP 1i
Specifies tha number of arguments up in tha argument list.
.IP \fIparent\fP 1i
Specifies tha parent widget.
.IP \fIw\fP 1i
Specifies tha widget.
.ds Wc \ pointa fo' tha pimped widget
.IP \fIwidget_class\fP 1i
Specifies tha widget class\*(Wc.
.IP \fI...\fP
Specifies tha variable argument list \*(Al.
.SH DESCRIPTION
The
.ZN XtCreateWidget
function performs much of tha boilerplate operationz of widget creation:
.IP \(bu 5
Checks ta peep if tha class_initialize procedure has been called fo' dis class
and fo' all superclasses and, if not, calls dem necessary up in a
superclass-to-subclass order.
.IP \(bu 5
Allocates memory fo' tha widget instance.
.IP \(bu 5
If tha parent be a subclass of
.ZN constraintWidgetClass ,
it allocates memory fo' tha parentz constraints
and stores tha address of dis memory tha fuck into tha constraints field.
.IP \(bu 5
Initializes tha core nonresource data fields
(for example, parent n' visible).
.IP \(bu 5
Initializes tha resource fieldz (for example, background_pixel)
by rockin tha resource lists specified fo' dis class n' all superclasses.
.IP \(bu 5
If tha parent be a subclass of
.ZN constraintWidgetClass ,
it initializes tha resource fieldz of tha constraints record
by rockin tha constraint resource list specified fo' tha parentz class
and all superclasses up to
.ZN constraintWidgetClass .
.IP \(bu 5
Calls tha initialize procedures fo' tha widget by startin at the
.ZN Core
initialize procedure on down ta tha widgetz initialize procedure.
.IP \(bu 5
If tha parent be a subclass of
.ZN compositeWidgetClass ,
it puts tha widget tha fuck into its parentz lil pimps list by callin its parent's
insert_child procedure.
For further shiznit,
see Section 3.5.
.IP \(bu 5
If tha parent be a subclass of
.ZN constraintWidgetClass ,
it calls tha constraint initialize procedures,
startin at
.ZN constraintWidgetClass
on down ta tha parentz constraint initialize procedure.
.LP
Note dat you can determine tha number of arguments up in a argument list
by rockin the
.ZN  XtNumber
macro.
For further shiznit, peep Section 11.1.
.LP
The
.ZN XtCreateManagedWidget
function be a cold-ass lil convenience routine dat calls
.ZN XtCreateWidget
and
.ZN XtManageLil Pimp .
.LP
The
.ZN XtDestroyWidget
function serves up tha only method of beatin tha livin shiznit outta a widget,
includin widgets dat need ta destroy theyselves.
It can be called at any time,
includin from a application callback routine of tha widget bein destroyed.
This requires a two-phase destroy process up in order ta avoid dangling
references ta destroyed widgets.
.LP
In phase one,
.ZN XtDestroyWidget
performs tha following:
.IP \(bu 5
If tha being_destroyed field of tha widget is
.ZN True ,
it returns immediately.
.IP \(bu 5
Recursively descendz tha widget tree and
sets tha being_destroyed field to
.ZN True
for tha widget n' all lil' thugs.
.IP \(bu 5
Addz tha widget ta a list of widgets (the destroy list) dat should be
destroyed when it is safe ta do so.
.LP
Entries on tha destroy list satisfy tha invariant that
if w2 occurs afta w1 on tha destroy list then w2 aint a thugged-out descendent of w1.
(A descendant refers ta both aiiight n' pop-up lil' thugs.)
.LP
Phase two occurs when all procedures dat should execute as a result of
the current event done been called (includin all procedures registered with
the event n' translation managers),
that is, when tha current invocation of
.ZN XtDispatchEvent
is bout ta return or immediately if not in
.ZN XtDispatchEvent .
.LP
In phase two,
.ZN XtDestroyWidget
performs tha followin on each entry up in tha destroy list:
.IP \(bu 5
Calls tha destroy callback procedures registered on tha widget
(and all descendants) up in post-order (it calls lil pimps callbacks
before parent callbacks).
.IP \(bu 5
If tha widgetz parent be a subclass of
.ZN compositeWidgetClass
and if tha parent aint bein destroyed,
it calls
.ZN XtUnmanageChild
on tha widget n' then calls tha widgetz parentz delete_child procedure
(see Section 3.4).
.IP \(bu 5
If tha widgetz parent be a subclass of
.ZN constraintWidgetClass ,
it calls tha constraint destroy procedure fo' tha parent,
then tha parentz superclass,
until finally it calls tha constraint destroy procedure for
.ZN constraintWidgetClass .
.IP \(bu 5
Calls tha destroy methodz fo' tha widget (and all descendants)
in post-order.
For each such widget,
it calls tha destroy procedure declared up in tha widget class,
then tha destroy procedure declared up in its superclass,
until finally it calls tha destroy procedure declared up in tha Core
class record.
.IP \(bu 5
Calls
.ZN XDestroyWindow
if tha widget is realized (that is, has a X window).
Da server recursively destroys all descendant windows.
.IP \(bu 5
Recursively descendz tha tree n' deallocates all pop-up widgets, constraint
records, callback lists and, if tha widget be a subclass of
.ZN compositeWidgetClass ,
children.
.SH "SEE ALSO"
XtAppCreateShell(3),
XtCreatePopupShell(3)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
