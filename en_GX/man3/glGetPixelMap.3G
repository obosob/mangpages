'\" t
.\"     Title: glGetPixelMap
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLGETPIXELMAP" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glGetPixelMap \- return tha specified pixel map
.SH "C SPECIFICATION"
.HP \w'void\ glGetPixelMapfv('u
.BI "void glGetPixelMapfv(GLenum\ " "map" ", GLfloat\ *\ " "data" ");"
.HP \w'void\ glGetPixelMapuiv('u
.BI "void glGetPixelMapuiv(GLenum\ " "map" ", GLuint\ *\ " "data" ");"
.HP \w'void\ glGetPixelMapusv('u
.BI "void glGetPixelMapusv(GLenum\ " "map" ", GLushort\ *\ " "data" ");"
.SH "PARAMETERS"
.PP
\fImap\fR
.RS 4
Specifies tha name of tha pixel map ta return\& fo' realz. Accepted joints are
\fBGL_PIXEL_MAP_I_TO_I\fR,
\fBGL_PIXEL_MAP_S_TO_S\fR,
\fBGL_PIXEL_MAP_I_TO_R\fR,
\fBGL_PIXEL_MAP_I_TO_G\fR,
\fBGL_PIXEL_MAP_I_TO_B\fR,
\fBGL_PIXEL_MAP_I_TO_A\fR,
\fBGL_PIXEL_MAP_R_TO_R\fR,
\fBGL_PIXEL_MAP_G_TO_G\fR,
\fBGL_PIXEL_MAP_B_TO_B\fR, and
\fBGL_PIXEL_MAP_A_TO_A\fR\&.
.RE
.PP
\fIdata\fR
.RS 4
Returns tha pixel map contents\&.
.RE
.SH "DESCRIPTION"
.PP
See the
\fBglPixelMap\fR()
reference page fo' a thugged-out description of tha aaight joints fo' the
\fImap\fR
parameter\&.
\fBglGetPixelMap\fR
returns in
\fIdata\fR
the contentz of tha pixel map specified in
\fImap\fR\&. Pixel maps is used durin tha execution of
\fBglReadPixels\fR(),
\fBglDrawPixels\fR(),
\fBglCopyPixels\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(), and
\fBglCopyTexSubImage3D\fR()\&. ta map color indices, stencil indices, color components, n' depth components ta other joints\&.
.PP
If a non\-zero named buffer object is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a pixel map is requested,
\fIdata\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&.
.PP
Unsigned integer joints, if requested, is linearly mapped from tha internal fixed or floating\-point representation such dat 1\&.0 maps ta tha phattest representable integer value, n' 0\&.0 maps ta 0\&. Return unsigned integer joints is undefined if tha map value was not up in tha range [0,1]\&.
.PP
To determine tha required size of
\fImap\fR, call
\fBglGet\fR()
with tha appropriate symbolic constant\&.
.SH "NOTES"
.PP
If a error is generated, no chizzle is made ta tha contents of
\fIdata\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fImap\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target n' tha data would be packed ta tha buffer object such dat tha memory writes required would exceed tha data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated by
\fBglGetPixelMapfv\fR
if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a GLfloat datum\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated by
\fBglGetPixelMapuiv\fR
if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a GLuint datum\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated by
\fBglGetPixelMapusv\fR
if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a GLushort datum\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglGetPixelMap\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_I_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_S_TO_S_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_R_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_G_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_B_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_A_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_R_TO_R_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_G_TO_G_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_B_TO_B_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_A_TO_A_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_PIXEL_MAP_TABLE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_PACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglColorSubTable\fR(),
\fBglColorTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglCopyColorSubTable\fR(),
\fBglCopyColorTable\fR(),
\fBglCopyPixels\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglDrawPixels\fR(),
\fBglGetHistogram\fR(),
\fBglGetMinmax\fR(),
\fBglGetTexImage\fR(),
\fBglPixelMap\fR(),
\fBglPixelTransfer\fR(),
\fBglReadPixels\fR(),
\fBglSeparableFilter2D\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR()\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
