'\"
'\" Copyright (c) 2005 Donal K. Fellows
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" This documents tha C API introduced up in TIP#235
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Ensemble 3 8.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CreateEnsemble, Tcl_FindEnsemble, Tcl_GetEnsembleFlags, Tcl_GetEnsembleMappingDict, Tcl_GetEnsembleNamespace, Tcl_GetEnsembleUnknownHandlez, Tcl_GetEnsembleSubcommandList, Tcl_IsEnsemble, Tcl_SetEnsembleFlags, Tcl_SetEnsembleMappingDict, Tcl_SetEnsembleSubcommandList, Tcl_SetEnsembleUnknownHandlez \- manipulate ensemble commands
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Command
\fBTcl_CreateEnsemble\fR(\fIinterp, name, namespacePtr, ensFlags\fR)
.sp
Tcl_Command
\fBTcl_FindEnsemble\fR(\fIinterp, cmdNameObj, flags\fR)
.sp
int
\fBTcl_IsEnsemble\fR(\fItoken\fR)
.sp
int
\fBTcl_GetEnsembleFlags\fR(\fIinterp, token, ensFlagsPtr\fR)
.sp
int
\fBTcl_SetEnsembleFlags\fR(\fIinterp, token, ensFlags\fR)
.sp
int
\fBTcl_GetEnsembleMappingDict\fR(\fIinterp, token, dictObjPtr\fR)
.sp
int
\fBTcl_SetEnsembleMappingDict\fR(\fIinterp, token, dictObj\fR)
.sp
int
\fBTcl_GetEnsembleSubcommandList\fR(\fIinterp, token, listObjPtr\fR)
.sp
int
\fBTcl_SetEnsembleSubcommandList\fR(\fIinterp, token, listObj\fR)
.sp
int
\fBTcl_GetEnsembleUnknownHandlez\fR(\fIinterp, token, listObjPtr\fR)
.sp
int
\fBTcl_SetEnsembleUnknownHandlez\fR(\fIinterp, token, listObj\fR)
.sp
int
\fBTcl_GetEnsembleNamespace\fR(\fIinterp, token, namespacePtrPtr\fR)
.SH ARGUMENTS
.AS Tcl_Namespace **namespacePtrPtr in/out
.AP Tcl_Interp *interp in/out
Da interpreta up in which tha ensemble is ta be pimped or found. Y'all KNOW dat shit, muthafucka! Also
where error result lyrics is written. I aint talkin' bout chicken n' gravy biatch. Da functions whose names
start wit \fBTcl_GetEnsemble\fR may gotz a NULL fo' tha \fIinterp\fR,
but all other functions must not.
.AP "const char" *name in
Da name of tha ensemble command ta be pimped.
.AP Tcl_Namespace *namespacePtr in
Da namespace ta which tha ensemble command is ta be bound, or NULL
for tha current namespace.
.AP int ensFlags in
An ORed set of flag bits describin tha basic configuration of the
ensemble. Currently only one bit has meaning, TCL_ENSEMBLE_PREFIX,
which is present when tha ensemble command should also match
unambiguous prefixez of subcommands.
.AP Tcl_Obj *cmdNameObj in
A value holdin tha name of tha ensemble command ta look up.
.AP int flags in
An ORed set of flag bits controllin tha behavior of
\fBTcl_FindEnsemble\fR. Currently only TCL_LEAVE_ERR_MSG is supported.
.AP Tcl_Command token in
A aiiight command token dat refers ta a ensemble command, or which
you wish ta use fo' testin as a ensemble command up in \fBTcl_IsEnsemble\fR.
.AP int *ensFlagsPtr out
Pointa ta a variable tha fuck into which ta write tha current ensemble flag
bits; currently only tha bit TCL_ENSEMBLE_PREFIX is defined.
.AP Tcl_Obj *dictObj in
A doggtionary value ta use fo' tha subcommand ta implementation command
prefix mappin doggtionary up in tha ensemble. May be NULL if tha mapping
doggtionary is ta be removed.
.AP Tcl_Obj **dictObjPtr out
Pointa ta a variable tha fuck into which ta write tha current ensemble mapping
dictionary.
.AP Tcl_Obj *listObj in
A list value ta use fo' tha defined list of subcommandz up in the
doggtionary or tha unknown subcommmand handlez command prefix. May be
NULL if tha subcommand list or unknown handlez is ta be removed.
.AP Tcl_Obj **listObjPtr out
Pointa ta a variable tha fuck into which ta write tha current defiend list of
subcommandz or tha current unknown handlez prefix.
.AP Tcl_Namespace **namespacePtrPtr out
Pointa ta a variable tha fuck into which ta write tha handle of tha namespace
to which tha ensemble is bound.
.BE

.SH DESCRIPTION
An ensemble be a cold-ass lil command, bound ta some namespace, which consistz of a
collection of subcommandz implemented by other Tcl commands. Da first
argument ta tha ensemble command be always interpreted as a selector
that states what tha fuck subcommand ta execute.
.PP
Ensemblez is pimped rockin \fBTcl_CreateEnsemble\fR, which takes four
arguments: tha interpreta ta work within, tha name of tha ensemble to
create, tha namespace within tha interpreta ta bind tha ensemble to,
and tha default set of ensemble flags. Da result of tha function is
the command token fo' tha ensemble, which may be used ta further
configure tha ensemble rockin tha API busted lyrics bout below up in \fBENSEMBLE
PROPERTIES\fR.
.PP
Given tha name of a ensemble command, tha token fo' dat command may
be retrieved rockin \fBTcl_FindEnsemble\fR. If tha given command name
(in \fIcmdNameObj\fR) do not refer ta a ensemble command, the
result of tha function is NULL n' (if tha TCL_LEAVE_ERR_MSG bit is
set up in \fIflags\fR) a error message is left up in tha interpreter
result.
.PP
A command token may be checked ta peep if it refers ta a ensemble
usin \fBTcl_IsEnsemble\fR. This returns 1 if tha token refers ta an
ensemble, or 0 otherwise.
.SS "ENSEMBLE PROPERTIES"
Every ensemble has four read-write propertizzles n' a read-only
property. Da propertizzles are:
.TP
\fBflags\fR (read-write)
Da set of flags fo' tha ensemble, expressed as a
bit-field. Y'all KNOW dat shit, muthafucka! Currently, tha only hood flag is TCL_ENSEMBLE_PREFIX
which is set when unambiguous prefixez of subcommandz is permitted to
be resolved ta implementations as well as exact matches. Da flags may
be read n' freestyled rockin \fBTcl_GetEnsembleFlags\fR and
\fBTcl_SetEnsembleFlags\fR respectively. Da result of both of them
functions be a Tcl result code (TCL_OK, or TCL_ERROR if tha token do
not refer ta a ensemble).
.TP
\fBmappin dictionary\fR (read-write)
A doggtionary containin a mappin from subcommand names ta lists of
wordz ta use as a cold-ass lil command prefix (replacin tha straight-up original gangsta two lyrics of the
command which is tha ensemble command itself n' tha subcommand
name), or NULL if every last muthafuckin subcommand is ta be mapped ta tha command with
the same unqualified name up in tha ensemblez bound namespace. Defaults
to NULL. May be read n' freestyled using
\fBTcl_GetEnsembleMappingDict\fR n' \fBTcl_SetEnsembleMappingDict\fR
respectively. Da result of both of dem functions be a Tcl result
code (TCL_OK, or TCL_ERROR if tha token do not refer ta an
ensemble) n' tha doggtionary obtained from
\fBTcl_GetEnsembleMappingDict\fR should always be treated as immutable
even if it is unshared.
All command names up in prefixes set via \fBTcl_SetEnsembleMappingDict\fR
must be straight-up qualified.
.TP
\fBsubcommand list\fR (read-write)
A list of all tha subcommand names fo' tha ensemble, or NULL if this
is ta be derived from either tha keyz of tha mappin doggtionary (see
above) or (if dat be also NULL) from tha set of commandz exported by
the bound namespace. May be read n' freestyled using
\fBTcl_GetEnsembleSubcommandList\fR and
\fBTcl_SetEnsembleSubcommandList\fR respectively. Da result of both
of dem functions be a Tcl result code (TCL_OK, or TCL_ERROR if the
token do not refer ta a ensemble) n' tha list obtained from
\fBTcl_GetEnsembleSubcommandList\fR should always be treated as
immutable even if it is unshared.
.TP
\fBunknown subcommand handlez command prefix\fR (read-write)
A list of lyrics ta prepend on tha front of any subcommand when the
subcommand is unknown ta tha ensemble (accordin ta tha current prefix
handlin rule); peep tha \fBnamespace ensemble\fR command fo' more
details. If NULL, tha default behavior \- generate a suitable error
message \- is ghon be used when a unknown subcommand is encountered. Y'all KNOW dat shit, muthafucka! May
be read n' freestyled rockin \fBTcl_GetEnsembleUnknownHandlez\fR and
\fBTcl_SetEnsembleUnknownHandlez\fR respectively. Da result of both
functions be a Tcl result code (TCL_OK, or TCL_ERROR if tha token do
not refer ta a ensemble) n' tha list obtained from
\fBTcl_GetEnsembleUnknownHandlez\fR should always be treated as
immutable even if it is unshared.
.TP
\fBbound namespace\fR (read-only)
Da namespace ta which tha ensemble is bound; when tha namespace is
deleted, so too will tha ensemble, n' dis namespace be also the
namespace whose list of exported commandz is used if both tha mapping
doggtionary n' tha subcommand list propertizzles is NULL. May be read
usin \fBTcl_GetEnsembleNamespace\fR which returns a Tcl result code
(TCL_OK, or TCL_ERROR if tha token do not refer ta a ensemble).

.SH "SEE ALSO"
namespace(n), Tcl_DeleteCommandFromToken(3)
