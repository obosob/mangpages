'\" t
.\"***************************************************************************
.\" Copyright (c) 1998-2009,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_attr.3x,v 1.36 2010/12/04 18:36:44 tom Exp $
.TH curs_attr 3X ""
.na
.hy 0
.SH NAME
\fBattroff\fR,
\fBwattroff\fR,
\fBattron\fR,
\fBwattron\fR,
\fBattrset\fR,
\fBwattrset\fR,
\fBcolor_set\fR,
\fBwcolor_set\fR,
\fBstandend\fR,
\fBwstandend\fR,
\fBstandout\fR,
\fBwstandout\fR,
\fBattr_get\fR,
\fBwattr_get\fR,
\fBattr_off\fR,
\fBwattr_off\fR,
\fBattr_on\fR,
\fBwattr_on\fR,
\fBattr_set\fR,
\fBwattr_set\fR,
\fBchgat\fR,
\fBwchgat\fR,
\fBmvchgat\fR,
\fBmvwchgat\fR,
\fBPAIR_NUMBER\fR \- \fBcurses\fR characta n' window attribute control routines
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.br
\fBint attroff(int attrs);\fR
.br
\fBint wattroff(WINDOW *win, int attrs);\fR
.br
\fBint attron(int attrs);\fR
.br
\fBint wattron(WINDOW *win, int attrs);\fR
.br
\fBint attrset(int attrs);\fR
.br
\fBint wattrset(WINDOW *win, int attrs);\fR
.br
\fBint color_set(short color_pair_number, void* opts);\fR
.br
\fBint wcolor_set(WINDOW *win, short color_pair_number,\fR
      \fBvoid* opts);\fR
.br
\fBint standend(void);\fR
.br
\fBint wstandend(WINDOW *win);\fR
.br
\fBint standout(void);\fR
.br
\fBint wstandout(WINDOW *win);\fR
.br
\fBint attr_get(attr_t *attrs, short *pair, void *opts);\fR
.br
\fBint wattr_get(WINDOW *win, attr_t *attrs, short *pair,\fR
       \fBvoid *opts);\fR
.br
\fBint attr_off(attr_t attrs, void *opts);\fR
.br
\fBint wattr_off(WINDOW *win, attr_t attrs, void *opts);\fR
.br
\fBint attr_on(attr_t attrs, void *opts);\fR
.br
\fBint wattr_on(WINDOW *win, attr_t attrs, void *opts);\fR
.br
\fBint attr_set(attr_t attrs, short pair, void *opts);\fR
.br
\fBint wattr_set(WINDOW *win, attr_t attrs, short pair, void *opts);\fR
.br
\fBint chgat(int n, attr_t attr, short color,\fR
      \fBconst void *opts)\fR
.br
\fBint wchgat(WINDOW *win, int n, attr_t attr,\fR
      \fBshort color, const void *opts)\fR
.br
\fBint mvchgat(int y, int x, int n, attr_t attr,\fR
      \fBshort color, const void *opts)\fR
.br
\fBint mvwchgat(WINDOW *win, int y, int x, int n,\fR
      \fBattr_t attr, short color, const void *opts)\fR
.br
.SH DESCRIPTION
These routines manipulate tha current attributez of tha named window.  The
current attributez of a window apply ta all charactas dat is freestyled into
the window wit \fBwaddch\fR, \fBwaddstr\fR n' \fBwprintw\fR.  Attributes are
a property of tha character, n' move wit tha characta all up in any scrolling
and insert/delete line/characta operations.  To tha extent possible, they are
displayed as appropriate modifications ta tha graphic rendizzle of characters
put on tha screen.
.PP
Da routine \fBattrset\fR sets tha current attributez of tha given window to
\fIattrs\fR.  Da routine \fBattroff\fR turns off tha named attributes without
turnin any other attributes on or off.  Da routine \fBattron\fR turns on the
named attributes without affectin any others.  Da routine \fBstandout\fR is
the same as \fBattron(A_STANDOUT)\fR.  Da routine \fBstandend\fR is tha same
as \fBattrset(A_NORMAL)\fR or \fBattrset(0)\fR, dat is, it turns off all
attributes.
.PP
Da \fBattrset\fR n' related routines do not affect tha attributes used
when erasin portionz of tha window.
See \fBcurs_bkgd\fR(3X) fo' functions which modify tha attributes used for
erasin n' clearing.
.PP
Da routine \fBcolor_set\fR sets tha current color of tha given window ta the
foreground/background combination busted lyrics bout by tha color_pair_number n' shit. The
parameta opts is reserved fo' future use, applications must supply a null
pointer.
.PP
Da routine \fBwattr_get\fR returns tha current attribute n' color pair for
the given window; \fBattr_get\fR returns tha current attribute n' color pair
for \fBstdscr\fR.
Da remainin \fBattr_\fR* functions operate exactly like tha corresponding
\fBattr\fR* functions, except dat they take argumentz of type \fBattr_t\fR
rather than \fBint\fR.
.PP
Da routine \fBchgat\fR chizzlez tha attributez of a given number of characters
startin all up in tha current cursor location of \fBstdscr\fR.  It do not update
the cursor n' do not big-ass up wrapping.  A characta count of \-1 or pimped outer
than tha remainin window width means ta chizzle attributes all tha way ta the
end of tha current line.  Da \fBwchgat\fR function generalizes dis ta any
window; tha \fBmvwchgat\fR function do a cold-ass lil cursor move before acting.  In these
functions, tha color argument be a cold-ass lil color-pair index (as up in tha straight-up original gangsta argument
of \fIinit_pair\fR, peep \fBcurs_color\fR(3X)).  Da \fBopts\fR argument is not
presently used yo, but is reserved fo' tha future (leave it \fBNULL\fR).
.SS Attributes
Da followin vizzle attributes, defined up in \fB<curses.h>\fR, can be passed to
the routines \fBattron\fR, \fBattroff\fR, n' \fBattrset\fR, or OR'd wit the
charactas passed ta \fBaddch\fR.
.PP
.TS
centa ;
l l .
\fBA_NORMAL\fR	Normal display (no highlight)
\fBA_STANDOUT\fR	Best highlightin mode of tha terminal.
\fBA_UNDERLINE\fR	Underlining
\fBA_REVERSE\fR	Reverse vizzle
\fBA_BLINK\fR	Blinking
\fBA_DIM\fR	Half bright
\fBA_BOLD\fR	Extra bright or bold
\fBA_PROTECT\fR	Protected mode
\fBA_INVIS\fR	Invisible or blank mode
\fBA_ALTCHARSET\fR	Alternate characta set
\fBA_CHARTEXT\fR	Bit-mask ta extract a cold-ass lil character
\fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR	Color-pair number \fIn\fR
.TE
.PP
Da followin macro is tha reverse of \fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR:
.PP
.br
\fBPAIR_NUMBER(\fR\fIattrs\fR) Returns tha pair number associated
                   wit tha \fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR attribute.
.br
.PP
Da return jointz of nuff of these routines is not meaningful (they are
implemented as macro-expanded assignments n' simply return they argument).
Da SVr4 manual page fronts (falsely) dat these routines always return \fB1\fR.
.SH NOTES
Note dat \fBattroff\fR, \fBwattroff\fR, \fBattron\fR, \fBwattron\fR,
\fBattrset\fR, \fBwattrset\fR, \fBstandend\fR n' \fBstandout\fR may be macros.
.PP
\fBCOLOR_PAIR\fP joints can only be OR'd wit attributes if tha pair
number is less than 256.
Da alternate functions like fuckin \fBcolor_set\fP can pass a cold-ass lil color pair
value directly.
But fuck dat shiznit yo, tha word on tha street is dat ncurses ABI 4 n' 5 simply OR dis value within tha alternate functions.
Yo ass must use ncurses ABI 6 ta support mo' than 256 color pairs.
.SH PORTABILITY
These functions is supported up in tha XSI Curses standard, Issue 4.  The
standard defined tha dedicated type fo' highlights, \fBattr_t\fR, which is not
defined up in SVr4 curses. Da functions takin \fBattr_t\fR arguments are
not supported under SVr4.
.PP
Da XSI Curses standard states dat whether tha traditionizzle functions
\fBattron\fR/\fBattroff\fR/\fBattrset\fR can manipulate attributes other than
\fBA_BLINK\fR, \fBA_BOLD\fR, \fBA_DIM\fR, \fBA_REVERSE\fR, \fBA_STANDOUT\fR, or
\fBA_UNDERLINE\fR is "unspecified".  Under dis implementation as well as
SVr4 curses, these functions erectly manipulate all other highlights
(specifically, \fBA_ALTCHARSET\fR, \fBA_PROTECT\fR, n' \fBA_INVIS\fR).
.PP
XSI Curses added tha freshly smoked up entry points, \fBattr_get\fR, \fBattr_on\fR,
\fBattr_off\fR, \fBattr_set\fR, \fBwattr_on\fR, \fBwattr_off\fR,
\fBwattr_get\fR, \fBwattr_set\fR.  These is intended ta work with
a freshly smoked up seriez of highlight macros prefixed wit \fBWA_\fR.
.PP
Older versionz of dis library did not force a update of tha screen
when changin tha attributes.
Use \fBtouchwin\fR ta force tha screen ta match tha updated attributes.
.PP
.ne 9
.TS
centa ;
l l .
\fBWA_NORMAL\fR	Normal display (no highlight)
\fBWA_STANDOUT\fR	Best highlightin mode of tha terminal.
\fBWA_UNDERLINE\fR	Underlining
\fBWA_REVERSE\fR	Reverse vizzle
\fBWA_BLINK\fR	Blinking
\fBWA_DIM\fR	Half bright
\fBWA_BOLD\fR	Extra bright or bold
\fBWA_ALTCHARSET\fR	Alternate characta set
.TE
.PP
Da XSI curses standard specifies dat each pair of correspondin \fBA_\fR
and \fBWA_\fR-usin functions operates on tha same current-highlight
information.
.PP
Da XSI standard extended conformizzle level addz freshly smoked up highlights
\fBA_HORIZONTAL\fR, \fBA_LEFT\fR, \fBA_LOW\fR, \fBA_RIGHT\fR, \fBA_TOP\fR,
\fBA_VERTICAL\fR (and correspondin \fBWA_\fR macros fo' each) which this
implementation do not yet support.
.SH RETURN VALUE
All routines return tha integer \fBOK\fR on success, or \fBERR\fP on failure.
.PP
X/Open do not define any error conditions.
.PP
This implementation returns a error
if tha window pointa is null.
Da \fBwcolor_set\fP function returns a error if tha color pair parameter
is outside tha range 0..COLOR_PAIRS\-1.
This implementation also provides
\fBgetattrs\fR
for compatibilitizzle wit olda versionz of curses.
.PP
Functions wit a "mv" prefix first big-ass up a cold-ass lil cursor movement using
\fBwmove\fP, n' return a error if tha posizzle is outside tha window,
or if tha window pointa is null.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_addch\fR(3X),
\fBcurs_addstr\fR(3X),
\fBcurs_bkgd\fR(3X),
\fBcurs_printw\fR(3X),
\fBcurs_variables\fR(3X)
