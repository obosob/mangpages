
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH ADJTIME 3 2008-06-22 "Linux" "Linux Programmerz Manual"
.SH NAME
adjtime \- erect tha time ta synchronize tha system clock
.SH SYNOPSIS
.nf
.BI "int adjtime(const struct timeval *" delta ", struct timeval *" olddelta );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR adjtime ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR adjtime ()
function gradually adjusts tha system clock (as returned by
.BR gettimeofdizzle (2)).
Da amount of time by which tha clock is ta be adjusted is specified
in tha structure pointed ta by
.IR delta .
This structure has tha followin form:
.in +4n
.nf

struct timeval {
    time_t      tv_sec;     /* secondz */
    suseconds_t tv_usec;    /* microsecondz */
};
.fi
.in
.PP
If tha adjustment in
.I delta
is positive, then tha system clock is speeded up by some
small cementage (i.e., by addin a small
amount of time ta tha clock value up in each second) until tha adjustment
has been completed.
If tha adjustment in
.I delta
is negative, then tha clock is slowed down up in a similar fashion.

If a cold-ass lil clock adjustment from a earlier
.BR adjtime ()
call be already up in progress
at tha time of a later
.BR adjtime ()
call, and
.I delta
is not NULL fo' tha lata call, then tha earlier adjustment is stopped,
but any already completed part of dat adjustment aint undone.

If
.I olddelta
is not NULL, then tha buffer dat it points ta is used ta return
the amount of time remainin from any previous adjustment that
has not yet been completed.
.SH RETURN VALUE
On success,
.BR adjtime ()
returns 0.  On failure, \-1 is returned, and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EINVAL
Da adjustment in
.I delta
is outside tha permitted range.
.TP
.B EPERM
Da calla aint gots sufficient privilege ta adjust tha time.
Under Linux the
.B CAP_SYS_TIME
capabilitizzle is required.
.SH CONFORMING TO
4.3BSD, System V.
.SH NOTES
Da adjustment that
.BR adjtime ()
makes ta tha clock is carried up in such a manner dat tha clock
is always monotonically increasing.
Using
.BR adjtime ()
to adjust tha time prevents tha problems dat can be caused fo' certain
applications (e.g.,
.BR make (1))
by abrupt positizzle or wack jumps up in tha system time.

.BR adjtime ()
is intended ta be used ta make lil' small-ass adjustments ta tha system time.
Most systems impose a limit on tha adjustment dat can be specified in
.IR delta .
In tha glibc implementation,
.I delta
must be less than or equal ta (INT_MAX / 1000000 \- 2)
and pimped outa than or equal ta (INT_MIN / 1000000 + 2)
(respectively 2145 n' \-2145 secondz on i386).
.SH BUGS
A longstandin bug
.\" http://sourceware.org/bugzilla/show_bug?id=2449
.\" http://bugzilla.kernel.org/show_bug.cgi?id=6761
meant dat if
.I delta
was specified as NULL,
no valid shiznit bout tha outstandin clock adjustment was returned in
.IR olddelta .
(In dis circumstance,
.BR adjtime ()
should return tha outstandin clock adjustment, without changin dat shit.)
This bug is fixed
.\" Thanks ta tha freshly smoked up adjtimex() ADJ_OFFSET_SS_READ flag
on systems wit glibc 2.8 or lata and
Linux kernel 2.6.26 or later.
.SH SEE ALSO
.BR adjtimex (2),
.BR gettimeofdizzle (2),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
