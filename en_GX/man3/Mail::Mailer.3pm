.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Maila 3"
.TH Mail::Maila 3 "2012-12-21" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Maila \- Simple intercourse ta electronic mailin mechanisms
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Mailer
\&   be a IO::Handle
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mail::Mailer;
\&  use Mail::Maila qw(mail);    # specifies default mailer
\&
\&  $maila = Mail::Mailer\->new;
\&  $maila = Mail::Mailer\->new($type, @args);
\&
\&  $mailer\->open(\e%headers);
\&  print $maila $body;
\&  $mailer\->close
\&      or take a thugged-out dirtnap "couldn\*(Aqt bust whole message: $!\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sendz mail rockin any of tha built-in methods.  As \s-1TYPE\s0 argument
to \fInew()\fR, you can specify any of
.ie n .IP """sendmail""" 4
.el .IP "\f(CWsendmail\fR" 4
.IX Item "sendmail"
Use tha \f(CW\*(C`sendmail\*(C'\fR program ta serve up tha mail.
.ie n .IP """smtp""" 4
.el .IP "\f(CWsmtp\fR" 4
.IX Item "smtp"
Use tha \f(CW\*(C`smtp\*(C'\fR protocol via Net::SMTP ta serve up tha mail. Da server
to use can be specified up in \f(CW@args\fR with
.Sp
.Vb 1
\& $maila = Mail::Mailer\->new(\*(Aqsmtp\*(Aq, Server => $server);
.Ve
.Sp
Da smtp maila do not handle \f(CW\*(C`Cc\*(C'\fR n' \f(CW\*(C`Bcc\*(C'\fR lines, neither their
\&\f(CW\*(C`Resent\-*\*(C'\fR fellows. Da \f(CW\*(C`Debug\*(C'\fR options enablez debuggin output
from \f(CW\*(C`Net::SMTP\*(C'\fR.
.Sp
Yo ass may also use tha \f(CW\*(C`Auth => [ $user, $password ]\*(C'\fR option fo' \s-1SASL\s0
authentication. I aint talkin' bout chicken n' gravy biatch. To make dis work, you gotta install tha Authen::SASL
distribution yo ass: it aint automatically installed.
.ie n .IP """smtps""" 4
.el .IP "\f(CWsmtps\fR" 4
.IX Item "smtps"
Use tha smtp over ssl protocol via Net::SMTP::SSL ta serve up tha mail.
Usage is identical ta \f(CW\*(C`smtp\*(C'\fR. Yo ass gotta install Authen::SASL as
well.
.Sp
.Vb 1
\& $maila = Mail::Mailer\->new(\*(Aqsmtps\*(Aq, Server => $server);
.Ve
.ie n .IP """qmail""" 4
.el .IP "\f(CWqmail\fR" 4
.IX Item "qmail"
Use qmailz qmail-inject program ta serve up tha mail.
.ie n .IP """testfile""" 4
.el .IP "\f(CWtestfile\fR" 4
.IX Item "testfile"
Used fo' debugging, dis displays tha data ta tha file named in
\&\f(CW$Mail::Mailer::testfile::config{outfile}\fR which defaults ta a gangbangin' file
named \f(CW\*(C`mailer.testfile\*(C'\fR.  No mail is eva sent.
.PP
\&\f(CW\*(C`Mail::Mailer\*(C'\fR will search fo' executablez up in tha above order n' shit. The
default maila is ghon be tha straight-up original gangsta one found.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Mailer\->\fBnew\fR(\s-1TYPE, ARGS\s0)" 4
.IX Item "Mail::Mailer->new(TYPE, ARGS)"
Da \s-1TYPE\s0 is one of tha back-end sender implementations, as busted lyrics bout in
the \s-1DESCRIPTION\s0 chapta of dis manual page.  Da \s-1ARGS\s0 is passed to
that back-end.
.ie n .IP "$obj\->\fBopen\fR(\s-1HASH\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopen\fR(\s-1HASH\s0)" 4
.IX Item "$obj->open(HASH)"
Da \s-1HASH\s0 consistz of key n' value pairs, tha key bein tha name of
the header field (eg, \f(CW\*(C`To\*(C'\fR), n' tha value bein tha corresponding
contentz of tha header field. Y'all KNOW dat shit, muthafucka!  Da value can either be a scalar
(eg, \f(CW\*(C`gnat@frii.com\*(C'\fR) or a reference ta a array of scalars
(\f(CW\*(C`eg, [\*(Aqgnat@frii.com\*(Aq, \*(AqTim.Bunce@ig.co.uk\*(Aq]\*(C'\fR).
.SH "DETAILS"
.IX Header "DETAILS"
.SS "\s-1ENVIRONMENT VARIABLES\s0"
.IX Subsection "ENVIRONMENT VARIABLES"
.IP "\s-1PERL_MAILERS\s0" 4
.IX Item "PERL_MAILERS"
Augments/override tha build up in chizzle fo' binary used ta bust out
our mail lyrics.
.Sp
Format:
.Sp
.Vb 1
\&    "type1:mailbinary1;mailbinary2;...:type2:mailbinaryX;...:..."
.Ve
.Sp
Example: assume you want you use private sendmail binary instead
of mailx, one could set \f(CW\*(C`PERL_MAILERS\*(C'\fR to:
.Sp
.Vb 1
\&    "mail:/does/not/exists:sendmail:$HOME/test/bin/sendmail"
.Ve
.Sp
On systems which may include \f(CW\*(C`:\*(C'\fR up in file names, use \f(CW\*(C`|\*(C'\fR as separator
between type-groups.
.Sp
.Vb 1
\&    "mail:c:/does/not/exists|sendmail:$HOME/test/bin/sendmail"
.Ve
.SS "\s-1BUGS\s0"
.IX Subsection "BUGS"
Mail::Maila do not help wit folding, n' do not protect
against various web-script hacker attacks, fo' instizzle where
a new-line is banged up in tha content of tha field.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of tha MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Da MailTools bundle was pimped by Graham Barr. Shiiit, dis aint no joke.  Later, Mark
Overmeer took over maintenizzle without commitment ta further pimpment.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peta Orbaek <poe@cit.dk>.
Mail::Maila n' Mail::Send by Slim Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors peep ChizzleLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
