.TH "std::__detail" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::__detail \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Automaton\fP"
.br
.ti -1c
.RI "struct \fB_Before_begin\fP"
.br
.ti -1c
.RI "struct \fB_CharMatcher\fP"
.br
.ti -1c
.RI "class \fB_Compiler\fP"
.br
.ti -1c
.RI "struct \fB_Default_ranged_hash\fP"
.br
.ti -1c
.RI "struct \fB_EndTagger\fP"
.br
.ti -1c
.RI "struct \fB_Equal_helper\fP"
.br
.ti -1c
.RI "struct \fB_Equal_helper< _Key, _Value, _ExtractKey, _Equal, _HashCodeType, false >\fP"
.br
.ti -1c
.RI "struct \fB_Equal_helper< _Key, _Value, _ExtractKey, _Equal, _HashCodeType, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Equality\fP"
.br
.ti -1c
.RI "struct \fB_Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false >\fP"
.br
.ti -1c
.RI "struct \fB_Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Equality_base\fP"
.br
.ti -1c
.RI "class \fB_Grep_matcher\fP"
.br
.ti -1c
.RI "struct \fB_Hash_code_base\fP"
.br
.ti -1c
.RI "struct \fB_Hash_code_base< _Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, false >\fP"
.br
.ti -1c
.RI "struct \fB_Hash_code_base< _Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Hash_code_base< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, false >\fP"
.br
.ti -1c
.RI "struct \fB_Hash_node\fP"
.br
.ti -1c
.RI "struct \fB_Hash_node< _Value, false >\fP"
.br
.ti -1c
.RI "struct \fB_Hash_node< _Value, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Hash_node_base\fP"
.br
.ti -1c
.RI "struct \fB_Hashtable_base\fP"
.br
.ti -1c
.RI "struct \fB_Hashtable_ebo_helper\fP"
.br
.ti -1c
.RI "struct \fB_Hashtable_ebo_helper< _Nm, _Tp, false >\fP"
.br
.ti -1c
.RI "struct \fB_Hashtable_ebo_helper< _Nm, _Tp, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Hashtable_traits\fP"
.br
.ti -1c
.RI "struct \fB_Insert\fP"
.br
.ti -1c
.RI "struct \fB_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false, _Unique_keys >\fP"
.br
.ti -1c
.RI "struct \fB_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true, false >\fP"
.br
.ti -1c
.RI "struct \fB_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Insert_base\fP"
.br
.ti -1c
.RI "struct \fB_List_node_base\fP"
.br
.ti -1c
.RI "struct \fB_Local_const_iterator\fP"
.br
.ti -1c
.RI "struct \fB_Local_iterator\fP"
.br
.ti -1c
.RI "struct \fB_Local_iterator_base\fP"
.br
.ti -1c
.RI "struct \fB_Local_iterator_base< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, false >\fP"
.br
.ti -1c
.RI "struct \fB_Local_iterator_base< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Map_base\fP"
.br
.ti -1c
.RI "struct \fB_Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false >\fP"
.br
.ti -1c
.RI "struct \fB_Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, legit >\fP"
.br
.ti -1c
.RI "struct \fB_Mod_range_hashing\fP"
.br
.ti -1c
.RI "class \fB_Nfa\fP"
.br
.ti -1c
.RI "struct \fB_Node_const_iterator\fP"
.br
.ti -1c
.RI "struct \fB_Node_iterator\fP"
.br
.ti -1c
.RI "struct \fB_Node_iterator_base\fP"
.br
.ti -1c
.RI "struct \fB_PatternCursor\fP"
.br
.ti -1c
.RI "struct \fB_Prime_rehash_policy\fP"
.br
.ti -1c
.RI "struct \fB_RangeMatcher\fP"
.br
.ti -1c
.RI "struct \fB_Rehash_base\fP"
.br
.ti -1c
.RI "struct \fB_Rehash_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _Prime_rehash_policy, _Traits >\fP"
.br
.ti -1c
.RI "struct \fB_Results\fP"
.br
.ti -1c
.RI "class \fB_Scanner\fP"
.br
.ti -1c
.RI "struct \fB_Scanner_base\fP"
.br
.ti -1c
.RI "class \fB_SpecializedCursor\fP"
.br
.ti -1c
.RI "class \fB_SpecializedResults\fP"
.br
.ti -1c
.RI "struct \fB_StartTagger\fP"
.br
.ti -1c
.RI "struct \fB_State\fP"
.br
.ti -1c
.RI "class \fB_StateSeq\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBstd::shared_ptr\fP
.br
< \fB_Automaton\fP > \fB_AutomatonPtr\fP"
.br
.ti -1c
.RI "typedef std::function< bool(const 
.br
\fB_PatternCursor\fP &)> \fB_Matcher\fP"
.br
.ti -1c
.RI "typedef int \fB_StateIdT\fP"
.br
.ti -1c
.RI "typedef \fBstd::set\fP< \fB_StateIdT\fP > \fB_StateSet\fP"
.br
.ti -1c
.RI "typedef \fBstd::stack\fP< \fB_StateIdT\fP, 
.br
\fBstd::vector\fP< \fB_StateIdT\fP > > \fB_StateStack\fP"
.br
.ti -1c
.RI "typedef std::function< void(const 
.br
\fB_PatternCursor\fP &, \fB_Results\fP &)> \fB_Tagger\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_Opcode\fP { \fB_S_opcode_unknown\fP, \fB_S_opcode_alternative\fP, \fB_S_opcode_subexpr_begin\fP, \fB_S_opcode_subexpr_end\fP, \fB_S_opcode_match\fP, \fB_S_opcode_accept\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _InIta , typename _TraitsT > \fB_AutomatonPtr\fP \fB__compile\fP (const _InIta &__b, const _InIta &__e, _TraitsT &__t, \fBregex_constants::syntax_option_type\fP __f)"
.br
.ti -1c
.RI "template<typename _FwdIterT > \fB_SpecializedCursor\fP< _FwdIterT > \fB__cursor\fP (const _FwdIterT &__b, const _FwdIterT __e)"
.br
.ti -1c
.RI "template<class _Iterator > std::iterator_traits
.br
< _Iterator >::difference_type \fB__distance_fw\fP (_Iterator __first, _Iterator __last, \fBstd::input_iterator_tag\fP)"
.br
.ti -1c
.RI "template<class _Iterator > std::iterator_traits
.br
< _Iterator >::difference_type \fB__distance_fw\fP (_Iterator __first, _Iterator __last, \fBstd::forward_iterator_tag\fP)"
.br
.ti -1c
.RI "template<class _Iterator > std::iterator_traits
.br
< _Iterator >::difference_type \fB__distance_fw\fP (_Iterator __first, _Iterator __last)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator , typename _Tp > _OutputIterator \fB__normalize\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__factor)"
.br
.ti -1c
.RI "bool \fB_AnyMatcher\fP (const \fB_PatternCursor\fP &)"
.br
.ti -1c
.RI "template<typename _Value , bool _Cache_hash_code> bool \fBoperator!=\fP (const \fB_Node_iterator_base\fP< _Value, _Cache_hash_code > &__x, const \fB_Node_iterator_base\fP< _Value, _Cache_hash_code > &__y)"
.br
.ti -1c
.RI "template<typename _Key , typename _Value , typename _ExtractKey , typename _H1 , typename _H2 , typename _Hash , bool __cache> bool \fBoperator!=\fP (const \fB_Local_iterator_base\fP< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache > &__x, const \fB_Local_iterator_base\fP< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache > &__y)"
.br
.ti -1c
.RI "template<typename _Value , bool _Cache_hash_code> bool \fBoperator==\fP (const \fB_Node_iterator_base\fP< _Value, _Cache_hash_code > &__x, const \fB_Node_iterator_base\fP< _Value, _Cache_hash_code > &__y)"
.br
.ti -1c
.RI "template<typename _Key , typename _Value , typename _ExtractKey , typename _H1 , typename _H2 , typename _Hash , bool __cache> bool \fBoperator==\fP (const \fB_Local_iterator_base\fP< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache > &__x, const \fB_Local_iterator_base\fP< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache > &__y)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const \fB_StateIdT\fP \fB_S_invalid_state_id\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Implementation details not part of tha namespace std intercourse\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
