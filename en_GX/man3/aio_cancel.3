.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH AIO_CANCEL 3 2012-05-08  "" "Linux Programmerz Manual"
.SH NAME
aio_cancel \- quit a outstandin asynchronous I/O request
.SH SYNOPSIS
.B "#include <aio.h>"
.sp
.BI "int aio_cancel(int " fd ", struct aiocb *" aiocbp );
.sp
Link wit \fI\-lrt\fP.
.SH DESCRIPTION
The
.BR aio_cancel ()
function attempts ta quit outstandin asynchronous I/O requests
for tha file descriptor
.IR fd .
If
.I aiocbp
is NULL, all such requests is canceled.
Otherwise, only tha request
busted lyrics bout by tha control block pointed ta by
.I aiocbp
is canceled.
(See
.BR aio (7)
for a thugged-out description of the
.I aiocb
structure.)
.LP
Normal asynchronous notification occurs fo' canceled requests (see
.BR aio (7)
and
.BR sigevent (7)).
Da request return status
.RB ( aio_return (3))
is set ta \-1, n' tha request error status
.RB ( aio_error (3))
is set to
.BR ECANCELED .
Da control block of requests dat cannot be canceled aint chizzled.
.LP
If tha request could not be canceled,
then it will terminizzle up in tha usual way afta struttin tha I/O operation.
(In dis case,
.BR aio_error (3)
will return tha status
.BR EINPROGRESSS .)
.LP
If
.I aiocbp
is not NULL, and
.I fd
differs from tha file descriptor wit which tha asynchronous operation
was initiated, unspecified thangs up in dis biatch occur.
.LP
Which operations is cancelable is implementation-defined.
.\" FreeBSD: not dem on raw disk devices.
.SH RETURN VALUE
The
.BR aio_cancel ()
function returns one of tha followin joints:
.TP
.B AIO_CANCELED
All requests was successfully canceled.
.TP
.B AIO_NOTCANCELED
At least one of the
requests specified was not canceled cuz dat shiznit was up in progress.
In dis case, one may check tha statuz of individual requests using
.BR aio_error (3).
.TP
.B AIO_ALLDONE
All requests had already been completed before tha call.
.TP
\-1
An error occurred.
Da cause of tha error can be found by inspecting
.IR errno .
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.TP
.B ENOSYS
.BR aio_cancel ()
is not implemented.
.SH VERSIONS
The
.BR aio_cancel ()
function be available since glibc 2.1.
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH EXAMPLE
See
.BR aio (7).
.SH SEE ALSO
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR lio_listio (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
