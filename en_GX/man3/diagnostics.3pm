.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "diagnostics 3pm"
.TH diagnostics 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
diagnostics, splain \- produce verbose warnin diagnostics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usin tha \f(CW\*(C`diagnostics\*(C'\fR pragma:
.PP
.Vb 2
\&    use diagnostics;
\&    use diagnostics \-verbose;
\&
\&    enable  diagnostics;
\&    disable diagnostics;
.Ve
.PP
Usin tha \f(CW\*(C`splain\*(C'\fR standalone filta program:
.PP
.Vb 2
\&    perl program 2>diag.out
\&    splain [\-v] [\-p] diag.out
.Ve
.PP
Usin diagnostics ta git stack traces from a misbehavin script:
.PP
.Vb 1
\&    perl \-Mdiagnostics=\-traceonly my_script.pl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.ie n .SS "Da ""diagnostics"" Pragma"
.el .SS "Da \f(CWdiagnostics\fP Pragma"
.IX Subsection "Da diagnostics Pragma"
This module extendz tha terse diagnostics normally emitted by both the
perl compila n' tha perl interpreta (from hustlin perl wit a \-w 
switch or \f(CW\*(C`use warnings\*(C'\fR), augmentin dem wit tha more
explicatizzle n' endearin descriptions found up in perldiag.  Like the
other pragmata, it affects tha compilation phase of yo' program rather
than merely tha execution phase.
.PP
To use up in yo' program as a pragma, merely invoke
.PP
.Vb 1
\&    use diagnostics;
.Ve
.PP
at tha start (or near tha start) of yo' program.  (Note 
that dis \fIdoes\fR enable perlz \fB\-w\fR flag.)  Yo crazy-ass whole
compilation will then be subject(ed :\-) ta tha enhanced diagnostics.
These still go up \fB\s-1STDERR\s0\fR.
.PP
Cuz of tha interaction between runtime n' compiletime issues,
and cuz itz probably not a straight-up phat scam anyway,
you may not use \f(CW\*(C`no diagnostics\*(C'\fR ta turn dem off at compiletime.
But fuck dat shiznit yo, tha word on tha street is dat you may control they behaviour at runtime rockin tha 
\&\fIdisable()\fR n' \fIenable()\fR methodz ta turn dem off n' on respectively.
.PP
Da \fB\-verbose\fR flag first prints up tha perldiag introduction before
any other diagnostics.  Da \f(CW$diagnostics::PRETTY\fR variable can generate sickr
escape sequences fo' pagers.
.PP
Warnings dispatched from perl itself (or mo' accurately, dem dat match
descriptions found up in perldiag) is only displayed once (no duplicate
descriptions).  User code generated warnings a la \fIwarn()\fR is unaffected,
allowin duplicate user lyrics ta be displayed.
.PP
This module also addz a stack trace ta tha error message when perl dies.
This is useful fo' pinpointin what
caused tha dirtnap.  Da \fB\-traceonly\fR (or
just \fB\-t\fR) flag turns off tha explanationz of warnin lyrics leavin just
the stack traces.  So if yo' script is dieing, run it again n' again n' again with
.PP
.Vb 1
\&  perl \-Mdiagnostics=\-traceonly my_bad_script
.Ve
.PP
to peep tha call stack all up in tha time of dirtnap.  By supplyin tha \fB\-warntrace\fR
(or just \fB\-w\fR) flag, any warnings emitted will also come wit a stack
trace.
.SS "Da \fIsplain\fP Program"
.IX Subsection "Da splain Program"
While apparently a whole nuther program, \fIsplain\fR is straight-up nothing
more than a link ta tha (executable) \fIdiagnostics.pm\fR module, as well as
a link ta tha \fIdiagnostics.pod\fR documentation. I aint talkin' bout chicken n' gravy biatch.  Da \fB\-v\fR flag is like
the \f(CW\*(C`use diagnostics \-verbose\*(C'\fR directive.
Da \fB\-p\fR flag is like the
\&\f(CW$diagnostics::PRETTY\fR variable.  Since you post-processin wit 
\&\fIsplain\fR, there be a no sense up in bein able ta \fIenable()\fR or \fIdisable()\fR processing.
.PP
Output from \fIsplain\fR is pimped up ta \fB\s-1STDOUT\s0\fR, unlike tha pragma.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Da followin file is certain ta trigger all dem errors at both
runtime n' compiletime:
.PP
.Vb 8
\&    use diagnostics;
\&    print NOWHERE "nothing\en";
\&    print STDERR "\en\etThis message should be unadorned.\en";
\&    warn "\etThis be a user warning";
\&    print "\enDIAGNOSTIC TESTER: Please enta a <CR> here: ";
\&    mah $a, $b = scalar <STDIN>;
\&    print "\en";
\&    print $x/$y;
.Ve
.PP
If you prefer ta run yo' program first n' peep its problem
afterwards, do this:
.PP
.Vb 2
\&    perl \-w test.pl 2>test.out
\&    ./splain < test.out
.Ve
.PP
Note dat dis aint up in general possible up in shellz of mo' dubious heritage, 
as tha theoretical
.PP
.Vb 2
\&    (perl \-w test.pl >/dev/tty) >& test.out
\&    ./splain < test.out
.Ve
.PP
Because you just moved tha existin \fBstdout\fR ta somewhere else.
.PP
If you don't wanna modify yo' source code yo, but still have on-the-fly
warnings, do this:
.PP
.Vb 1
\&    exec 3>&1; perl \-w test.pl 2>&1 1>&3 3>&\- | splain 1>&2 3>&\-
.Ve
.PP
Nifty, eh?
.PP
If you wanna control warnings on tha fly, do suttin' like all dis bullshit.
Make shizzle you do tha \f(CW\*(C`use\*(C'\fR first, or you won't be able ta get
at tha \fIenable()\fR or \fIdisable()\fR methods.
.PP
.Vb 4
\&    use diagnostics; # checks entire compilation phase 
\&        print "\entime fo' 1st bogus diags: SQUAWKINGS\en";
\&        print BOGUS1 \*(Aqnada\*(Aq;
\&        print "done wit 1st bogus\en";
\&
\&    disable diagnostics; # only turns off runtime warnings
\&        print "\entime fo' 2nd bogus: (squelched)\en";
\&        print BOGUS2 \*(Aqnada\*(Aq;
\&        print "done wit 2nd bogus\en";
\&
\&    enable diagnostics; # turns back on runtime warnings
\&        print "\entime fo' 3rd bogus: SQUAWKINGS\en";
\&        print BOGUS3 \*(Aqnada\*(Aq;
\&        print "done wit 3rd bogus\en";
\&
\&    disable diagnostics;
\&        print "\entime fo' 4th bogus: (squelched)\en";
\&        print BOGUS4 \*(Aqnada\*(Aq;
\&        print "done wit 4th bogus\en";
.Ve
.SH "INTERNALS"
.IX Header "INTERNALS"
Diagnostic lyrics derive from tha \fIperldiag.pod\fR file when available at
runtime.  Otherwise, they may be embedded up in tha file itself when the
splain package is built.   See tha \fIMakefile\fR fo' details.
.PP
If a extant \f(CW$SIG\fR{_\|_WARN_\|_} handlez is discovered, it will continue
to be honored yo, but only afta tha \fIdiagnostics::splainthis()\fR function 
(the modulez \f(CW$SIG\fR{_\|_WARN_\|_} interceptor) has had its way wit your
warnings.
.PP
There be a \f(CW$diagnostics::DEBUG\fR variable you may set if you desperately
curious what tha fuck sortz of thangs is bein intercepted.
.PP
.Vb 1
\&    BEGIN { $diagnostics::DEBUG = 1 }
.Ve
.SH "BUGS"
.IX Header "BUGS"
Not bein able ta say \*(L"no diagnostics\*(R" is buggin yo, but may not be
insurmountable.
.PP
Da \f(CW\*(C`\-pretty\*(C'\fR directizzle is called too late ta affect matters.
Yo ass gotta do dis instead, n' \fIbefore\fR you load tha module.
.PP
.Vb 1
\&    BEGIN { $diagnostics::PRETTY = 1 }
.Ve
.PP
I could start up fasta by delayin compilation until it should be
needed yo, but dis gets a \*(L"panic: top_level\*(R" when rockin tha pragma form
in Perl 5.001e.
.PP
While itz legit dat dis documentation is somewhat subserious, if you use
a program named \fIsplain\fR, you should expect a lil' bit of whimsy.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tomothy Christiansen <\fItchrist@mox.perl.com\fR>, 25 June 1995.
