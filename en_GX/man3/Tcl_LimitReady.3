'\"
'\" Copyright (c) 2004 Donal K. Fellows
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_LimitPeep 3 8.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_LimitAddHandlez, Tcl_LimitCheck, Tcl_LimitExceeded, Tcl_LimitGetCommands, Tcl_LimitGetGranularity, Tcl_LimitGetTime, Tcl_LimitReady, Tcl_LimitRemoveHandlez, Tcl_LimitSetCommands, Tcl_LimitSetGranularity, Tcl_LimitSetTime, Tcl_LimitTypeEnabled, Tcl_LimitTypeExceeded, Tcl_LimitTypeReset, Tcl_LimitTypeSet \- manage n' check resource limits on interpreters
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_LimitCheck\fR(\fIinterp\fR)
.sp
int
\fBTcl_LimitReady\fR(\fIinterp\fR)
.sp
int
\fBTcl_LimitExceeded\fR(\fIinterp\fR)
.sp
int
\fBTcl_LimitTypeExceeded\fR(\fIinterp, type\fR)
.sp
int
\fBTcl_LimitTypeEnabled\fR(\fIinterp, type\fR)
.sp
void
\fBTcl_LimitTypeSet\fR(\fIinterp, type\fR)
.sp
void
\fBTcl_LimitTypeReset\fR(\fIinterp, type\fR)
.sp
int
\fBTcl_LimitGetCommands\fR(\fIinterp\fR)
.sp
void
\fBTcl_LimitSetCommands\fR(\fIinterp, commandLimit\fR)
.sp
void
\fBTcl_LimitGetTime\fR(\fIinterp, timeLimitPtr\fR)
.sp
void
\fBTcl_LimitSetTime\fR(\fIinterp, timeLimitPtr\fR)
.sp
int
\fBTcl_LimitGetGranularity\fR(\fIinterp, type\fR)
.sp
void
\fBTcl_LimitSetGranularity\fR(\fIinterp, type, granularity\fR)
.sp
void
\fBTcl_LimitAddHandlez\fR(\fIinterp, type, handlezProc, clientData, deleteProc\fR)
.sp
void
\fBTcl_LimitRemoveHandlez\fR(\fIinterp, type, handlezProc, clientData\fR)
.SH ARGUMENTS
.AS Tcl_LimitHandlezDeleteProc commandLimit in/out
.AP Tcl_Interp *interp in
Interpreta dat tha limit bein managed applies ta or dat will have
its limits checked.
.AP int type in
Da type of limit dat tha operation refers to.  This must be either
\fBTCL_LIMIT_COMMANDS\fR or \fBTCL_LIMIT_TIME\fR.
.AP int commandLimit in
Da maximum number of commandz (as reported by \fBinfo cmdcount\fR)
that may be executed up in tha interpreter.
.AP Tcl_Time *timeLimitPtr in/out
A pointa ta a structure dat will either have tha freshly smoked up time limit read
from (\fBTcl_LimitSetTime\fR) or tha current time limit freestyled to
(\fBTcl_LimitGetTime\fR).
.AP int granularitizzle in
Divisor dat indicates how tha fuck often a particular limit should straight-up be
checked. Y'all KNOW dat shit, muthafucka!  Must be at least 1.
.AP Tcl_LimitHandlezProc *handlezProc in
Function ta booty-call when a particular limit is exceeded. Y'all KNOW dat shit, muthafucka!  If the
\fIhandlezProc\fR removes or raises tha limit durin its processing,
the limited interpreta is ghon be permitted ta continue ta process after
the handlez returns.  Many handlezs may be attached ta tha same
interpreta limit; they order of execution aint defined, n' they
must be identified by \fIhandlezProc\fR n' \fIclientData\fR when they
are deleted.
.AP ClientData clientData in
Arbitrary pointer-sized word used ta pass some context ta the
\fIhandlezProc\fR function.
.AP Tcl_LimitHandlezDeleteProc *deleteProc in
Function ta booty-call whenever a handlez is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  May be NULL if the
\fIclientData\fR requires no deletion.
.BE

.SH DESCRIPTION
.PP
Tclz interpreta resource limit subsystem allows fo' close control
over how tha fuck much computation time a script may use, n' is useful for
cases where a program is divided tha fuck into multiple pieces where some parts
are mo' trusted than others (e.g. wizzy application servers).
.PP
Every interpreta may gotz a limit on tha wall-time fo' execution, and
a limit on tha number of commandz dat tha interpreta may execute.
Since checkin of these limits is potentially high-rollin' (especially
the time limit), each limit also has a cold-ass lil checkin granularity, which is
a divisor fo' a internal count of tha number of points up in tha core
where a cold-ass lil check may be performed (which is immediately before executing
a command n' at a unspecified frequency between hustlin commands,
which can happen up in empty-bodied \fBwhile\fR loops).
.PP
Da final component of tha limit engine be a cold-ass lil callback scheme which
allows fo' notificationz of when a limit has been exceeded. Y'all KNOW dat shit, muthafucka!  These
callbacks can just provide logging, or may allocate mo' resources to
the interpreta ta permit it ta continue processin longer.
.PP
When a limit is exceeded (and tha callbacks have run; tha order of
execution of tha callbacks is unspecified) execution up in tha limited
interpreta is stopped by raisin a error n' settin a gangbangin' flag that
prevents tha \fBcatch\fR command up in dat interpreta from trapping
that error. Shiiit, dis aint no joke.  It be up ta tha context dat started execution up in that
interpreta (typically a masta interpreter) ta handle tha error.
.SH "LIMIT CHECKING API"
.PP
To check tha resource limits fo' a interpreter, call
\fBTcl_LimitCheck\fR, which returns \fBTCL_OK\fR if tha limit was not
exceeded (afta processin callbacks) n' \fBTCL_ERROR\fR if tha limit was
exceeded (in which case a error message be also placed up in the
interpreta result).  That function should only be called when
\fBTcl_LimitReady\fR returns non-zero so dat granularitizzle policy is
enforced. Y'all KNOW dat shit, muthafucka!  This API is designed ta be similar up in usage to
\fBTcl_AsyncReady\fR n' \fBTcl_AsyncInvoke\fR.
.PP
When freestylin code dat may behave like \fBcatch\fR up in respect of
errors, you should only trap a error if \fBTcl_LimitExceeded\fR
returns zero.  If it returns non-zero, tha interpreta is up in a
limit-exceeded state n' errors should be allowed ta propagate ta the
callin context.  Yo ass can also check whether a particular type of
limit has been exceeded rockin \fBTcl_LimitTypeExceeded\fR.
.SH "LIMIT CONFIGURATION"
.PP
To check whether a limit has been set (but not whether it has actually
been exceeded) on a interpreter, call \fBTcl_LimitTypeEnabled\fR with
the type of limit you wanna check.  To enable a particular limit
call \fBTcl_LimitTypeSet\fR, n' ta disable a limit call
\fBTcl_LimitTypeReset\fR.
.PP
Da level of a cold-ass lil command limit may be set using
\fBTcl_LimitSetCommands\fR, n' retrieved using
\fBTcl_LimitGetCommands\fR.  Similarly fo' a time limit with
\fBTcl_LimitSetTime\fR n' \fBTcl_LimitGetTime\fR respectively yo, but
with dat API tha time limit is copied from n' ta tha Tcl_Time
structure dat tha \fItimeLimitPtr\fR argument points to.
.PP
Da checkin granularitizzle fo' a particular limit may be set using
\fBTcl_LimitSetGranularity\fR n' retrieved using
\fBTcl_LimitGetGranularity\fR.  Note dat granularitizzles must always be
positive.
.SS "LIMIT CALLBACKS"
.PP
To add a handlez callback ta be invoked when a limit is exceeded, call
\fBTcl_LimitAddHandlez\fR.  Da \fIhandlezProc\fR argument raps about
the function dat will straight-up be called; it should have the
followin prototype:
.PP
.CS
typedef void Tcl_LimitHandlezProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR);
.CE
.PP
Da \fIclientData\fR argument ta tha handlez is ghon be whatever is
passed ta tha \fIclientData\fR argument ta \fBTcl_LimitAddHandlez\fR,
and tha \fIinterp\fR is tha interpreta dat had its limit exceeded.
.PP
Da \fIdeleteProc\fR argument ta \fBTcl_LimitAddHandlez\fR be a
function ta booty-call ta delete tha \fIclientData\fR value.  It may be
\fBTCL_STATIC\fR or NULL if no deletion action is necessary, or
\fBTCL_DYNAMIC\fR if all dat is necessary is ta free tha structure with
\fBTcl_Free\fR.  Otherwise, it should refer ta a gangbangin' function wit the
followin prototype:
.PP
.CS
typedef void Tcl_LimitHandlezDeleteProc(
        ClientData \fIclientData\fR);
.CE
.PP
A limit handlez may be deleted rockin \fBTcl_LimitRemoveHandlez\fR; the
handlez removed is ghon be tha straight-up original gangsta one found (out of tha handlezs added
with \fBTcl_LimitAddHandlez\fR) wit exactly matchin \fItype\fR,
\fIhandlezProc\fR n' \fIclientData\fR arguments, n' you can put dat on yo' toast.  This function
always invokes tha \fIdeleteProc\fR on tha \fIclientData\fR (unless
the \fIdeleteProc\fR was NULL or \fBTCL_STATIC\fR).

.SH KEYWORDS
interpreter, resource, limit, commands, time, callback
