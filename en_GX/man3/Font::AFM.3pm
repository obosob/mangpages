.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AFM 3"
.TH AFM 3 "2008-06-04" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::AFM \- Interface ta Adobe Font Metrics files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& use Font::AFM;
\& $h = freshly smoked up Font::AFM "Helvetica";
\& $copyright = $h\->Notice;
\& $w = $h\->Wx\->{"aring"};
\& $w = $h\->stringwidth("Gisle", 10);
\& $h\->dump;  # fo' debugging
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements tha Font::AFM class. Objectz of dis class are
initialised from a \s-1AFM \s0(Adobe Font Metrics) file n' allow you ta obtain shiznit
about tha font n' tha metrics of tha various glyphs up in tha font.
.PP
All measurements up in \s-1AFM\s0 filez is given up in termz of units equal to
1/1000 of tha scale factor of tha font bein used. Y'all KNOW dat shit, muthafucka! To compute actual
sizes up in a thugged-out document, these amounts should be multiplied by (scale
factor of font)/1000.
.PP
Da followin methodz is available:
.ie n .IP "$afm = Font::AFM\->new($fontname)" 3
.el .IP "\f(CW$afm\fR = Font::AFM\->new($fontname)" 3
.IX Item "$afm = Font::AFM->new($fontname)"
Object constructor. Shiiit, dis aint no joke. Takes tha name of tha font as argument.
Croaks if tha font can not be found.
.ie n .IP "$afm\->\fIlatin1_wx_table()\fR" 3
.el .IP "\f(CW$afm\fR\->\fIlatin1_wx_table()\fR" 3
.IX Item "$afm->latin1_wx_table()"
Returns a 256\-element array, where each element gotz nuff tha width
of tha correspondin characta up in tha iso\-8859\-1 characta set.
.ie n .IP "$afm\->stringwidth($string, [$fontsize])" 3
.el .IP "\f(CW$afm\fR\->stringwidth($string, [$fontsize])" 3
.IX Item "$afm->stringwidth($string, [$fontsize])"
Returns tha width of tha argument string. Da strang is
assumed ta be encoded up in tha iso\-8859\-1 characta set.  A second
argument can be used ta scale tha width accordin ta tha font size.
.ie n .IP "$afm\->FontName" 3
.el .IP "\f(CW$afm\fR\->FontName" 3
.IX Item "$afm->FontName"
Da name of tha font as presented ta tha PostScript language
\&\f(CW\*(C`findfont\*(C'\fR operator, fo' instizzle \*(L"Times-Roman\*(R".
.ie n .IP "$afm\->FullName" 3
.el .IP "\f(CW$afm\fR\->FullName" 3
.IX Item "$afm->FullName"
Unique, human-readable name fo' a individual font, fo' instance
\&\*(L"Times Roman\*(R".
.ie n .IP "$afm\->FamilyName" 3
.el .IP "\f(CW$afm\fR\->FamilyName" 3
.IX Item "$afm->FamilyName"
Human-readable name fo' a crew of fonts dat is stylistic variants
of a single design. I aint talkin' bout chicken n' gravy biatch fo' realz. All fonts dat is thugz of such a crew should
have exactly tha same \f(CW\*(C`FamilyName\*(C'\fR. Example of a cold-ass lil crew name is
\&\*(L"Times\*(R".
.ie n .IP "$afm\->Weight" 3
.el .IP "\f(CW$afm\fR\->Weight" 3
.IX Item "$afm->Weight"
Human-readable name fo' tha weight, or \*(L"boldness\*(R", attribute of a gangbangin' font.
Examplez is \f(CW\*(C`Roman\*(C'\fR, \f(CW\*(C`Bold\*(C'\fR, \f(CW\*(C`Light\*(C'\fR.
.ie n .IP "$afm\->ItalicAngle" 3
.el .IP "\f(CW$afm\fR\->ItalicAngle" 3
.IX Item "$afm->ItalicAngle"
Angle up in degrees counterclockwise from tha vertical of tha dominant
vertical strokez of tha font.
.ie n .IP "$afm\->IsFixedPitch" 3
.el .IP "\f(CW$afm\fR\->IsFixedPitch" 3
.IX Item "$afm->IsFixedPitch"
If \f(CW\*(C`true\*(C'\fR, tha font be a gangbangin' fixed-pitch
(monospaced) font.
.ie n .IP "$afm\->FontBBox" 3
.el .IP "\f(CW$afm\fR\->FontBBox" 3
.IX Item "$afm->FontBBox"
A strang of four numbers givin tha lower-left x, lower-left y,
upper-right x, n' upper-right y of tha font boundin box. Da font
boundin box is tha smallest rectangle enclosin tha shape dat would
result if all tha charactaz of tha font was placed wit their
origins coincident, n' then painted.
.ie n .IP "$afm\->UnderlinePosition" 3
.el .IP "\f(CW$afm\fR\->UnderlinePosition" 3
.IX Item "$afm->UnderlinePosition"
Recommended distizzle from tha baseline fo' positionin underline
strokes. This number is tha y coordinizzle of tha centa of tha stroke.
.ie n .IP "$afm\->UnderlineThickness" 3
.el .IP "\f(CW$afm\fR\->UnderlineThickness" 3
.IX Item "$afm->UnderlineThickness"
Recommended stroke width fo' underlining.
.ie n .IP "$afm\->Version" 3
.el .IP "\f(CW$afm\fR\->Version" 3
.IX Item "$afm->Version"
Version number of tha font.
.ie n .IP "$afm\->Notice" 3
.el .IP "\f(CW$afm\fR\->Notice" 3
.IX Item "$afm->Notice"
Trademark or copyright notice, if applicable.
.ie n .IP "$afm\->Comment" 3
.el .IP "\f(CW$afm\fR\->Comment" 3
.IX Item "$afm->Comment"
Comments found up in tha \s-1AFM\s0 file.
.ie n .IP "$afm\->EncodingScheme" 3
.el .IP "\f(CW$afm\fR\->EncodingScheme" 3
.IX Item "$afm->EncodingScheme"
Da name of tha standard encodin scheme fo' tha font. Most Adobe
fonts use tha \f(CW\*(C`AdobeStandardEncoding\*(C'\fR. Right back up in yo muthafuckin ass. Special fonts might state
\&\f(CW\*(C`FontSpecific\*(C'\fR.
.ie n .IP "$afm\->CapHeight" 3
.el .IP "\f(CW$afm\fR\->CapHeight" 3
.IX Item "$afm->CapHeight"
Usually tha y\-value of tha top of tha capital H.
.ie n .IP "$afm\->XHeight" 3
.el .IP "\f(CW$afm\fR\->XHeight" 3
.IX Item "$afm->XHeight"
Typically tha y\-value of tha top of tha lowercase x.
.ie n .IP "$afm\->Ascender" 3
.el .IP "\f(CW$afm\fR\->Ascender" 3
.IX Item "$afm->Ascender"
Typically tha y\-value of tha top of tha lowercase d.
.ie n .IP "$afm\->Descender" 3
.el .IP "\f(CW$afm\fR\->Descender" 3
.IX Item "$afm->Descender"
Typically tha y\-value of tha bottom of tha lowercase p.
.ie n .IP "$afm\->Wx" 3
.el .IP "\f(CW$afm\fR\->Wx" 3
.IX Item "$afm->Wx"
Returns a hash table dat maps from glyph names ta tha width of dat glyph.
.ie n .IP "$afm\->BBox" 3
.el .IP "\f(CW$afm\fR\->BBox" 3
.IX Item "$afm->BBox"
Returns a hash table dat maps from glyph names ta boundin box shiznit.
Da boundin box consist of four numbers: llx, lly, urx, ury.
.ie n .IP "$afm\->dump" 3
.el .IP "\f(CW$afm\fR\->dump" 3
.IX Item "$afm->dump"
Dumps tha content of tha Font::AFM object ta \s-1STDOUT. \s0 Might sometimes
be useful fo' debugging.
.PP
Da \s-1AFM\s0 justification can be found at:
.PP
.Vb 1
\&   http://partners.adobe.com/asn/developer/pdfs/tn/5004.AFM_Spec.pdf
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1METRICS\s0" 10
.IX Item "METRICS"
Gotz Nuff tha path ta search fo' AFM-files.  Format be as fo' tha \s-1PATH\s0
environment variable. Da default path built tha fuck into dis library is:
.Sp
.Vb 1
\& /usr/lib/afm:/usr/local/lib/afm:/usr/openwin/lib/fonts/afm/:.
.Ve
.SH "BUGS"
.IX Header "BUGS"
Kernin data n' composite characta data is not yet parsed.
Ligature data aint parsed.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1998 Gisle Aas fo' realz. All muthafuckin rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
