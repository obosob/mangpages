.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Field::Attribute 3"
.TH Mail::Message::Field::Attribute 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Field::Attribute \- one attribute of a gangbangin' full field
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Message::Field::Attribute
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& mah $field    = $msg\->head\->get(\*(AqContent\-Disposition\*(Aq) or return;
\& mah $full     = $field\->study;   # full understandin up in unicode
\& mah $filename = $full\->attribute(\*(Aqfilename\*(Aq)           or return;
\&
\& print ref $filename;     # dis class name
\& print $filename;         # tha attributes content up in utf\-8
\& print $filename\->value;  # same
\& print $filename\->string; # print strang as was found up in tha file
\& $filename\->print(\e*OUT); # print as was found up in tha file
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Attributes within \s-1MIME\s0 fieldz can be like complex, n' therefore be slow
and consumes a shitload of memory.  Da Mail::Message::Field::Fast and
Mail::Message::Field::Flex simplify dem tha attributes a lot, which
may result up in erroneous behavior up in rare cases.  With tha increase of
non-western languages on Internet, tha need fo' tha complex headers
becomes mo' n' mo' up in demand.
.PP
A \f(CW\*(C`Mail::Message::Field::Attribute\*(C'\fR can be found up in any structured
Mail::Message::Field::Full header field.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.IP "overload: \fBcomparison\fR()" 4
.IX Item "overload: comparison()"
When tha second argument be a gangbangin' field, then both attribute name (case-sensitive)
and tha decoded value must be tha same.  Otherwise, tha value is compared.
.IP "overload: \fBstringification\fR()" 4
.IX Item "overload: stringification()"
Returns tha decoded content of tha attribute.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Message::Field::Attribute\->\fBnew\fR((\s-1NAME,\s0 [\s-1VALUE\s0] | \s-1STRING\s0), \s-1OPTIONS\s0)" 4
.IX Item "Mail::Message::Field::Attribute->new((NAME, [VALUE] | STRING), OPTIONS)"
Smoke a freshly smoked up attribute \s-1NAME\s0 wit tha optionizzle \s-1VALUE. \s0 If no \s-1VALUE\s0 is specified,
the first argument of dis method is inspected fo' a equals sign \f(CW\*(Aq=\*(Aq\fR.
If dat characta is present, tha argument is taken as \s-1STRING,\s0 containing
a preformatted attribute which is processed. Y'all KNOW dat shit, muthafucka!  Otherwise, tha argument is
taken as name without \s-1VALUE:\s0 set tha value lata wit \fIvalue()\fR.
.Sp
Whether encodin takes place dependz on tha \s-1OPTIONS\s0 n' tha existence
of non-ascii charactas up in tha \s-1VALUE. \s0 Da \s-1NAME\s0 can only contain ascii
characters, hence is never encoded.
.Sp
To speed thangs up, attributes is not derived from tha Mail::Reporter
base-class.
.Sp
.Vb 6
\& \-Option           \-\-Defined up in     \-\-Default
\&  charset                             \*(Aqus\-ascii\*(Aq
\&  language                            undef
\&  log                Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  trace              Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  use_continuations                   <true>
.Ve
.RS 4
.IP "charset => \s-1STRING\s0" 2
.IX Item "charset => STRING"
Da \s-1VALUE\s0 is translated from utf\-8 (Perl internal) ta dis characta set,
and tha resultin strang is encoded if required. Y'all KNOW dat shit, muthafucka!  \f(CW\*(C`us\-ascii\*(C'\fR is tha normal
encodin fo' e\-mail.  Valid characta sets can be found wit 
Encode::encodings(':all').
.IP "language => \s-1STRING\s0" 2
.IX Item "language => STRING"
\&\s-1RFC2231\s0 addz tha possiblitizzle ta specify a language wit tha field. Y'all KNOW dat shit, muthafucka!  When no
language is specified, none is included up in tha encoding.  Valid language
names is defined by \s-1RFC2130. \s0 This module has only limited support for
this feature.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "use_continuations => \s-1BOOLEAN\s0" 2
.IX Item "use_continuations => BOOLEAN"
.PD
Continuations is used ta break-up long parametas tha fuck into pieces which
are no longer than 76 characters. Encodings is specified up in \s-1RFC2231,\s0
but not supported by some Mail User Agents.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 2
\& mah $fn    = Mail::Message::Field::Attribute
\&                \->new(filename => \*(Aqxyz\*(Aq);
\&
\& mah $fattr = \*(AqMail::Message::Field::Attribute\*(Aq;  # abbrev
\& mah $fn    = $fattr\->new
\&     ( filename => "Re\exC7u"
\&     , charset  => \*(Aqiso\-8859\-15\*(Aq
\&     , language => \*(Aqnl\-BE\*(Aq
\&     );
\& print $fn;
\&   # \-\->  filename*=iso\-8859\-15\*(Aqnl\-BE\*(AqRe%C7u
.Ve
.RE
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Message::Field::Attribute\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Message::Field::Attribute->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Message::Field::Attribute\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Message::Field::Attribute->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Message::Field::Attribute\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Message::Field::Attribute->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SS "Da attribute"
.IX Subsection "Da attribute"
.ie n .IP "$obj\->\fBaddComponent\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddComponent\fR(\s-1STRING\s0)" 4
.IX Item "$obj->addComponent(STRING)"
A component be a parameta as defined by \s-1RFC2045,\s0 optionally using
encodin or continuations as defined by \s-1RFC2231. \s0 Componentz of an
attribute is found when a gangbangin' field is bein parsed. Y'all KNOW dat shit, muthafucka!  Da RFCs are
very strict on valid charactas yo, but we cannot be: you gotta accept
what is comin up in if you can.
.Sp
example:
.Sp
.Vb 2
\& mah $param = Mail::Message::Field::Attribute\->new;
\& $param\->addComponent("filename*=iso10646\*(Aqnl\-BE\*(Aq%Re\e47u");
.Ve
.ie n .IP "$obj\->\fBcharset\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcharset\fR()" 4
.IX Item "$obj->charset()"
Returns tha characta set which is used fo' dis parameter n' shit.  If any component
is added which gotz nuff characta set shiznit, dis is directly
available.  Be warned dat a cold-ass lil character-set is case insensitive.
.ie n .IP "$obj\->\fBlanguage\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlanguage\fR()" 4
.IX Item "$obj->language()"
Returns tha language which is defined up in tha argument.  If no language is
defined \f(CW\*(C`undef\*(C'\fR is returned, which should be interpreted as \*(L"\s-1ANY\*(R"\s0
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Returns tha name of dis attribute.
.ie n .IP "$obj\->\fBstring\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR()" 4
.IX Item "$obj->string()"
Returns tha parameta as reference ta a array of lines.  When only one line
is returned, it may be short enough ta fit on tha same line wit other
componentz of tha header field.
.ie n .IP "$obj\->\fBvalue\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBvalue\fR([\s-1STRING\s0])" 4
.IX Item "$obj->value([STRING])"
Returns tha value of dis parameter, optionally afta settin it first.
.SS "Attribute encoding"
.IX Subsection "Attribute encoding"
.ie n .IP "$obj\->\fBdecode\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdecode\fR()" 4
.IX Item "$obj->decode()"
Translate all known continuations tha fuck into a value.  Da produced value is
returned n' may be utf\-8 encoded or a plain string.
.ie n .IP "$obj\->\fBencode\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR()" 4
.IX Item "$obj->encode()"
.SS "Internals"
.IX Subsection "Internals"
.PD 0
.ie n .IP "$obj\->\fBmergeComponent\fR(\s-1ATTRIBUTE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmergeComponent\fR(\s-1ATTRIBUTE\s0)" 4
.IX Item "$obj->mergeComponent(ATTRIBUTE)"
.PD
Merge tha components from tha specified attribute tha fuck into dis attribute.  This
is needed when componentz of tha same attribute is pimped separately.
Mergin is required by tha field parsing.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Warning: Illegal characta up in parameta name '$name'" 4
.IX Item "Warning: Illegal characta up in parameta name '$name'"
Da specified parameta name gotz nuff charactas which is not permitted by
the RFCs.  Yo ass can betta chizzle tha name tha fuck into suttin' which be accepted,
or risk applications ta corrupt or ignore tha message.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.IP "Error: Too late ta merge: value already chizzled." 4
.IX Item "Error: Too late ta merge: value already chizzled."
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
