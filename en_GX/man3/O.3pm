.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "O 3pm"
.TH O 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
O \- Generic intercourse ta Perl Compila backends
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        perl \-MO=[\-q,]Backend[,OPTIONS] foo.pl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is tha module dat is used as a gangbangin' frontend ta tha Perl Compiler.
.PP
If you pass tha \f(CW\*(C`\-q\*(C'\fR option ta tha module, then tha \s-1STDOUT\s0
filehandle is ghon be repimped up tha fuck into tha variable \f(CW$O::BEGIN_output\fR
durin compilation. I aint talkin' bout chicken n' gravy biatch.  This has tha effect dat any output printed
to \s-1STDOUT\s0 by \s-1BEGIN\s0 blocks or use'd modulez is ghon be stored up in this
variable rather than printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. It aint nuthin but useful wit dem backendz which
produce output theyselves (\f(CW\*(C`Deparse\*(C'\fR, \f(CW\*(C`Concise\*(C'\fR etc), so that
their output aint trippin wit dat generated by tha code
bein compiled.
.PP
Da \f(CW\*(C`\-qq\*(C'\fR option behaves like \f(CW\*(C`\-q\*(C'\fR, except dat it also closes
\&\s-1STDERR\s0 afta deparsin has finished. Y'all KNOW dat shit, muthafucka! This suppresses tha \*(L"Syntax \s-1OK\*(R"\s0
message normally produced by perl.
.SH "CONVENTIONS"
.IX Header "CONVENTIONS"
Most compila backendz use tha followin conventions: \s-1OPTIONS\s0
consistz of a cold-ass lil comma-separated list of lyrics (no white-space).
Da \f(CW\*(C`\-v\*(C'\fR option probably puts tha backend tha fuck into verbose mode.
Da \f(CW\*(C`\-ofile\*(C'\fR option generates output ta \fBfile\fR instead of
stdout. Da \f(CW\*(C`\-D\*(C'\fR option followed by various lettas turns on
various internal debuggin flags. Right back up in yo muthafuckin ass. See tha documentation fo' the
desired backend (named \f(CW\*(C`B::Backend\*(C'\fR fo' tha example above) to
smoke up bout dat backend.
.SH "IMPLEMENTATION"
.IX Header "IMPLEMENTATION"
This section is only necessary fo' dem playas whoz ass wanna write a
compila backend module dat can be used via dis module.
.PP
Da command-line mentioned up in tha \s-1SYNOPSIS\s0 section correspondz to
the Perl code
.PP
.Vb 1
\&    use O ("Backend", OPTIONS);
.Ve
.PP
Da \f(CW\*(C`O::import\*(C'\fR function loadz tha appropriate \f(CW\*(C`B::Backend\*(C'\fR module
and calls its \f(CW\*(C`compile\*(C'\fR function, passin it \s-1OPTIONS.\s0 That function
is sposed ta fuckin return a sub reference which we'll call \s-1CALLBACK.\s0 Next,
the \*(L"compile-only\*(R" flag is switched on (equivalent ta tha command-line
option \f(CW\*(C`\-c\*(C'\fR) n' a \s-1CHECK\s0 block is registered which calls
\&\s-1CALLBACK.\s0 Thus tha main Perl program mentioned on tha command-line is
read in, parsed n' compiled tha fuck into internal syntax tree form. Right back up in yo muthafuckin ass. Since the
\&\f(CW\*(C`\-c\*(C'\fR flag is set, tha program do not start hustlin (exceptin \s-1BEGIN\s0
blockz of course) but tha \s-1CALLBACK\s0 function registered by tha compiler
backend is called.
.PP
In summary, a cold-ass lil compila backend module should be called \*(L"B::Foo\*(R"
for some foo n' live up in tha appropriate directory fo' dat name.
It should define a gangbangin' function called \f(CW\*(C`compile\*(C'\fR. When tha user types
.PP
.Vb 1
\&    perl \-MO=Foo,OPTIONS foo.pl
.Ve
.PP
that function is called n' is passed dem \s-1OPTIONS \s0(split on
commas). Well shiiiit, it should return a sub ref ta tha main compilation function.
Afta tha userz program is loaded n' parsed, dat returned sub ref
is invoked which can then go ahead n' do tha compilation, probably by
makin use of tha \f(CW\*(C`B\*(C'\fR modulez functionality.
.SH "BUGS"
.IX Header "BUGS"
Da \f(CW\*(C`\-q\*(C'\fR n' \f(CW\*(C`\-qq\*(C'\fR options don't work erectly if perl aint
compiled wit PerlIO support : \s-1STDOUT\s0 is ghon be closed instead of being
repimped up ta \f(CW$O::BEGIN_output\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Malcolm Beattie, \f(CW\*(C`mbeattie@sable.ox.ac.uk\*(C'\fR
