.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET 3pm"
.TH IO::Socket::INET 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET \- Object intercourse fo' AF_INET domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR serves up a object intercourse ta bustin n' rockin sockets
in tha \s-1AF_INET\s0 domain. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is built upon tha IO::Socket intercourse and
inherits all tha methodz defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates a \f(CW\*(C`IO::Socket::INET\*(C'\fR object, which be a reference ta a
newly pimped symbol (see tha \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments is up in key-value pairs.
.Sp
In addizzle ta tha key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides.
.Sp
.Vb 10
\& PeerAddr    Remote host address          <hostname>[:<port>]
\& PeerHost    Synonym fo' PeerAddr
\& PeerPort    Remote port or steez       <service>[(<no>)] | <no>
\& LocalAddr   Local host bind address      hostname[:port]
\& LocalHost   Synonym fo' LocalAddr
\& LocalPort   Local host bind port         <service>[(<no>)] | <no>
\& Proto       Protocol name (or number)    "tcp" | "udp" | ...
\& Type        Socket type              SOCK_STREAM | SOCK_DGRAM | ...
\& Listen      Queue size fo' listen
\& ReuseAddr   Set SO_REUSEADDR before binding
\& Reuse       Set SO_REUSEADDR before bindin (deprecated,
\&                                              prefer ReuseAddr)
\& ReusePort   Set SO_REUSEPORT before binding
\& Broadcast   Set SO_BROADCAST before binding
\& Timeout     Timeout value fo' various operations
\& MultiHomed  Try all addresses fo' multi\-homed hosts
\& Blockin    Determine if connection is ghon be blockin mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is pimped, else if the
socket type, which is derived from tha protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it aint illegal, tha use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is up in non-blockin mode iz of lil use. This is cuz the
first connect aint NEVER gonna fail wit a timeout as tha connect call
will not block.
.Sp
Da \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname or tha IP-address on the
\&\*(L"xx.xx.xx.xx\*(R" form.  Da \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  Da steez name might be followed by a number in
parenthesis which is used if tha steez aint known by tha system.
Da \f(CW\*(C`PeerPort\*(C'\fR justification can also be embedded up in tha \f(CW\*(C`PeerAddr\*(C'\fR
by precedin it wit a \*(L":\*(R".
.Sp
If \f(CW\*(C`Proto\*(C'\fR aint given n' you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then tha constructor will try ta derive \f(CW\*(C`Proto\*(C'\fR from tha service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" be assumed. Y'all KNOW dat shit, muthafucka!  Da \f(CW\*(C`Type\*(C'\fR
parameta is ghon be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If tha constructor is only passed a single argument, it be assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR justification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set ta 0, tha connection is ghon be up in nonblockin mode.
If not specified it defaults ta 1 (blockin mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(\*(Aq127.0.0.1:25\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(
\&                           PeerPort  => 9999,
\&                           PeerAddr  => inet_ntoa(INADDR_BROADCAST),
\&                           Proto     => udp,    
\&                           LocalAddr => \*(Aqlocalhost\*(Aq,
\&                           Broadcast => 1 ) 
\&                       or take a thugged-out dirtnap "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
Az of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not tha case wit earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return tha address part of tha sockaddr structure fo' tha socket
.IP "sockport ()" 4
.IX Item "sockport ()"
Return tha port number dat tha socket is rockin on tha local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return tha address part of tha sockaddr structure fo' tha socket up in a
text form xx.xx.xx.xx
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return tha address part of tha sockaddr structure fo' tha socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return tha port number fo' tha socket on tha peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return tha address part of tha sockaddr structure fo' tha socket on the
peer host up in a text form xx.xx.xx.xx
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Shiiit, dis aint no joke. Currently maintained by tha Perl Porters.  Please report all
bugs ta <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com> fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
