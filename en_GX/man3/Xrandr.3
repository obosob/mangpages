.\"
.\" Copyright 2002 Hewlett-Packard Company.\"
.\" Permission ta use, copy, modify, distribute, n' push dis software n' its
.\" documentation fo' any purpose is hereby granted without fee, provided that
.\" tha above copyright notice step tha fuck up in all copies n' dat both that
.\" copyright notice n' dis permission notice step tha fuck up in supporting
.\" documentation, n' dat tha name of Hewlett-Packard Company not be used in
.\" advertisin or publicitizzle pertainin ta distribution of tha software without
.\" specific, freestyled prior permission. I aint talkin' bout chicken n' gravy biatch.  Hewlett Packard Company make no
.\" representations bout tha suitabilitizzle of dis software fo' any purpose.  It
.\" is provided "as is" without express or implied warranty.
.\"
.\" Hewlett-Packard DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
.\" EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
.\" CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
.\" DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.de TQ
.br
.ns
.TP \\$1
..
.TH XRANDR 3 "libXrandr 1.4.1" "X Version 11"

.SH NAME
 Xrandr \- X Resize, Rotate n' Reflection extension.
.SH SYNTAX
\&#include <X11/extensions/Xrandr.h>
.nf
.sp
Bool XRRQueryExtension \^(\^Display *\fIdpy\fP,
	int *\fIevent_base_return\fP, int *\fIerror_base_return\fP\^);
.sp
Status XRRQueryVersion \^(\^Display *\fIdpy\fP,
	int *\fImajor_version_return\fP,
	int *\fIminor_version_return\fP\^);
.sp
XRRScreenConfiguration *XRRGetScreenInfo \^(\^Display *dpy,
	Drawable \fIdraw\fP\^);
.sp
void XRRFreeScreenConfigInfo \^(\^
	\fIXRRScreenConfiguration *config\fP\^);
.sp
Status XRRSetScreenConfig \^(\^Display *\fIdpy\fP,
	XRRScreenConfiguration *\fIconfig\fP,
	Drawable \fIdraw\fP,
	int \fIsize_index\fP,
	Rotation \fIrotation\fP,
	Time \fItimestamp\fP\^);
.sp
Status XRRSetScreenConfigAndRate \^(\^Display *\fIdpy\fP,
				  XRRScreenConfiguration *\fIconfig\fP,
				  Drawable \fIdraw\fP,
				  int \fIsize_index\fP,
				  Rotation \fIrotation\fP,
				  short \fIrate\fP,
				  Time \fItimestamp\fP\^);
.sp
Rotation XRRConfigRotations\^(\^
	XRRScreenConfiguration *\fIconfig\fP,
	Rotation *\fIcurrent_rotation\fP\^);
.sp
Time XRRConfigTimes \^(\^
	XRRScreenConfiguration *\fIconfig\fP,
	Time *\fIconfig_timestamp\fP\^);
.sp
XRRScreenSize *XRRConfigSizes\^(\^
	XRRScreenConfiguration *\fIconfig\fP,
	int *\fInsizes\fP\^);
.sp
short *XRRConfigRates \^(\^
	XRRScreenConfiguration *\fIconfig\fP,
	int \fIsize_index\fP,
	int *\fInrates\fP\^);
.sp
SizeID XRRConfigCurrentConfiguration \^(\^
	XRRScreenConfiguration *\fIconfig\fP,
	Rotation *\fIrotation\fP\^);
.sp
short XRRConfigCurrentRate \^(\^
	XRRScreenConfiguration *\fIconfig\fP\^);
.sp
int XRRRootToScreen\^(\^
	Display *\fIdpy\fP,
	Window \fIroot\fP\^);
.sp
void XRRSelectInput\^(\^Display *\fIdpy\fP, Window \fIwindow\fP, int \fImask\fP\^);
.sp
/\(**
 * intended ta take RRScreenChangeNotify,  or
 * ConfigureNotify \^(\^\fIon tha root window\fP\^)
 * returns 1 if it be a event type it understands, 0 if not
 */
int XRRUpdateConfiguration\^(\^XEvent *\fIevent\fP\^);
.sp
/\(**
 * tha followin is always safe ta call, even if RandR is
 * not implemented on a screen
 */
.br
Rotation XRRRotations\^(\^
	Display *\fIdpy\fP, int \fIscreen\fP,
	Rotation *\fIcurrent_rotation\fP\^);
.sp
XRRScreenSize *XRRSizes\^(\^Display *\fIdpy\fP,
	int \fIscreen\fP, int *\fInsizes\fP\^);
.sp
short *XRRRates \^(\^Display *\fIdpy\fP, int \fIscreen\fP,
	int \fIsize_index\fP, int *\fInrates\fP\^);
.sp
Time XRRTimes \^(\^Display *\fIdpy\fP, int \fIscreen\fP, Time *\fIconfig_timestamp\fP\^);
.fi
.SH ARGUMENTS
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.IP \fIscreen\fP 1i
Specifies which screen.
.IP \fIdraw\fP 1i
Specifies tha screen.
.IP \fIrotation\fP 1i
Specifies tha possible rotations or reflectionz of tha screen.
.IP \fIcurrent_rotation\fP 1i
Specifies tha current rotations n' reflection of tha screen.
.IP \fItimestamp\fP 1i
Specifies tha server timestamp.
.IP \fIconfig_timestamp\fP 1i
Specifies tha timestamp when tha screen was last (re)configured.
.IP \fIconfig\fP 1i
Specifies tha screen configuration bein used.
.IP \fIsizes\fP 1i
Specifies tha array of supported sizes.
.IP \fIrate\fP 1i
Specifies tha refresh rate up in Hz.

.SH DATATYPES

.PP
.B Rotations/Reflections
.PP
Can be any of:
.nf
\&#define RR_Rotate_0             1
\&#define RR_Rotate_90            2
\&#define RR_Rotate_180           4
\&#define RR_Rotate_270           8

/\(** freshly smoked up in 1.0 protocol, ta allow reflection of screen */
/\(** reflection be applied afta rotation */

\&#define RR_Reflect_X            16
\&#define RR_Reflect_Y            32


typedef struct {
    int	width, height;
    int	mwidth, mheight;
} XRRScreenSize;

typedef struct {
    int type;				/\(** event base */
    unsigned long serial;	/\(** # of last request processed by server */
    Bool send_event;		/\(** legit if dis came from a SendEvent request */
    Display *display;		/\(** Display tha event was read from */
    Window window;			/\(** window which selected fo' dis event */
    Window root;			/\(** Root window fo' chizzled screen */
    Time timestamp;			/\(** when tha screen chizzle occurred */
    Time config_timestamp;	/\(** when tha last configuration chizzle */
    SizeID size_index;
    SubpixelOrder subpixel_order;
    Rotation rotation;
    int width;
    int height;
    int mwidth;
    int mheight;
} XRRScreenChangeNotifyEvent;
.sp
.fi
The
.B XRRScreenSize
structure gotz nuff a possible root size up in pixels n' up in millimeters.

A
.B XRRScreenChangeNotifyEvent
is busted ta a cold-ass lil client dat has axed notification whenever tha screen
configuration is chizzled. Y'all KNOW dat shit, muthafucka! A client can big-ass up dis request by calling
\fBXRRSelectInput\fP, passin tha display, tha root window, n' the
\fBRRScreenChangeNotifyMask\fP mask.

.B XRRScreenConfiguration
is a opaque data type containin tha configuration shiznit
for a screen.

.B Timestamps
.PP
Time stamps is included n' must be used ta ensure tha client is playing
with a gangbangin' full deck: tha screen may chizzle properties
on tha fly n' dis ensures its knowledge of tha configuration is up ta date.
This is ta help thangs when screens may become hot-pluggable up in tha future.

.SH DESCRIPTION
.B Xrandr
is a simple library designed ta intercourse tha X Resize n' Rotate
Extension. I aint talkin' bout chicken n' gravy biatch.  This allows clients ta chizzle tha size n' rotation of the
root window of a screen, along wit tha mobilitizzle ta reflect tha screen
about either axis (if supported by tha implementation).  Rotation and
reflection may be implemented by software n' may result up in slower
performizzle if rotation n' reflection is implemented up in dis fashion
(as is all implementations az of October 2002).
.PP
Da Xrandr library do some minimal cachin ta avoid roundtrips to
provide clients frequently used shiznit. I aint talkin' bout chicken n' gravy biatch.  See "Da X Resize and
Rotate Extension" fo' a thugged-out detailed description; also note dat depth
switching, as busted lyrics bout up in tha document aint implemented, n' may
(or may not) eva be implemented, as display memory is growin rapidly,
and toolkits is already beginnin ta support migration, mitigatin the
need fo' depth switching.  If it is implemented up in tha future, we
expect ta do so via a upward compatible extension ta the
current library/protocol; functionalitizzle busted lyrics bout here should continue
to work.
.PP
Rotation n' reflection n' how tha fuck they interact can be confusing.  In
Randr, tha coordinizzle system is rotated up in a cold-ass lil counter-clockwise
direction relatizzle ta tha aiiight orientation. I aint talkin' bout chicken n' gravy biatch.  Reflection be along the
window system coordinizzle system, not tha physical screen X n' Y axis,
so dat rotation n' reflection do not interact.  Da other way to
consider reflection is ta treat it as specified up in tha "normal"
orientation, before rotation.
.PP
The
.B XRRScreenChangeNotify
event is busted ta clients dat ask ta be informed whenever tha root window
configuration chizzles.  Configuration chizzlez may include resolution,
physical size, subpixel order (see XRender(3)), n' rotation. I aint talkin' bout chicken n' gravy biatch.  Note
that chizzlez ta any or all of these could occur cuz of external events
(user control up in tha X server, a gangbangin' finger-lickin' different monitor/flat panel display
bein hot-plugged) n' aint only tha result of a protocol/library
request ta tha X server.
.PP
Additionally, ta eliminizzle a potential race condition,
this event may be generated
immediately upon selectin fo' notification if tha screen has chizzled
since tha client of Xrandr connected ta tha X server, ta enable
reliable screen resolution changin when a user may log up in and
change tha configuration while one or nuff clients is startin up.
.PP
.B Xlib notification
.PP
Clients must call back tha fuck into Xlib using
.B XRRUpdateConfiguration
when screen configuration chizzle notify events is generated
(or root window configuration chizzlez occur, ta update Xlib's
view of tha resolution, size, rotation, reflection or subpixel order.
Generally, toolkits will big-ass up dis operation on behalf of applications;
we did not wanna chizzle display structure data behind tha back of toolkits,
as up in multithreaded clients, various race conditions might occur.
Toolkits should provide clients some mechanizzle fo' notification of
screen chizzle, of course.

.SH FUNCTIONS
There is two classez of intercourses: dem which can be safely called
even if RandR aint implemented on a screen (to make common idioms not
dependent on tha server havin support), n' dem which will return
errors if tha extension aint present.
.PP
.B XRRRotations
returns both tha possible set of rotations/reflections supported
(as a funky-ass bitmask) as tha value of tha function, along wit tha current
rotation/reflection of tha screen.
.PP
.B XRRSizes
returns tha size n' a pointa ta tha current sizes supported by
the specified screen. I aint talkin' bout chicken n' gravy biatch.  Da first size specified is tha default size
of tha server n' shit. If RandR aint supported, it returns 0 for
the number of sizes.
.PP
.B XRRRates
returns a pointa ta tha rates supported by tha specified size.
If RandR aint supported, it returns 0 fo' tha number of rates.
.PP
.B XRRTimes
returns tha time last reported by tha server along wit the
timestamp tha last configuration chizzled.
If tha configuration has chizzled since tha client last updated
its view of tha server time, requests ta chizzle tha configuration
will fail until tha client has a up ta date timestamp.
.PP
.B XRRRootToScreen
returns tha screen number given a root window (for example, from
an \fBXRRScreenChangeNotifyEvent\fP).
.PP
Da rest of tha functions will fail if applied ta screens not
implementin tha RandR extension.
.B XRRSetScreenConfig
sets tha screen size n' rotation n' reflection ta tha desired
values on tha screen specified by \fIdraw\fP, or returns a
.B BadValue
error.
\fIsize_index\fP specifies which size configuration is ta be used,
\fIrotation\fP specifies which rotation or reflection is to
be used (or a
.B BadValue
error is returned).
Da \fItimestamp\fP is used by tha server ta make shizzle tha client
has up ta date configuration shiznit. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Status is returned
to indicate success or failure; a cold-ass lil client must refresh its configuration
information if it fails n' try tha call again n' again n' again (by calling
\fBXRRGetScreenInfo\fP).
.PP
.B XRRSetScreenConfigAndRate
is like
.B XRRSetScreenConfig
but also sets tha refresh rate. If specified rate aint supported a
.B BadValue
error is returned.
.PP
.B XRRConfigRotations,
.B XRRConfigSizes,
.B XRRConfigCurrentConfiguration,
.B XRRConfigTimes,
.B XRRConfigRates,
and
.B XRRConfigCurrentRate
are used ta git specific configuration shiznit outta a screen
configuration.
.PP
.B XRRGetScreenInfo
returns a screen configuration fo' lata use; tha shiznit is
private ta tha library.
Call
.B XRRFreeScreenConfigInfo
to free dis shiznit when yo ass is finished wit dat shit.
It forces a round trip ta tha server.

Other functions include:
.B XRRQueryExtension
which returns tha event n' error base codes,
.B XRRQueryVersion
, which returns tha current version of tha extension (this shiznit
is cached by tha library).
.SH RESTRICTIONS
.B Xrandr
will remain upward compatible afta tha current 1.0 release.
.SH AUTHOR
Jim Gettys, n' Keith Packard, HP.

