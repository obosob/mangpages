.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Reporta 3"
.TH Mail::Reporta 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Reporta \- base\-class n' error reporta fo' Mail::Box
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 10
\& Mail::Reporta is extended by
\&   Mail::Box
\&   Mail::Box::Collection
\&   Mail::Box::Identity
\&   Mail::Box::Locker
\&   Mail::Box::MH::Index
\&   Mail::Box::MH::Labels
\&   Mail::Box::Manager
\&   Mail::Box::Parser
\&   Mail::Box::Search
\&   Mail::Box::Thread::Manager
\&   Mail::Box::Thread::Node
\&   Mail::Message
\&   Mail::Message::Body
\&   Mail::Message::Body::Delayed
\&   Mail::Message::Convert
\&   Mail::Message::Field
\&   Mail::Message::Field::Attribute
\&   Mail::Message::Head
\&   Mail::Message::Head::FieldGroup
\&   Mail::Message::TransferEnc
\&   Mail::Server
\&   Mail::Transport
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& $folder\->log(WARNING => \*(Aqgo away\*(Aq);
\& print $folder\->trace;        # current level
\& $folder\->trace(\*(AqPROGRESS\*(Aq);  # set level
\& print $folder\->errors;
\& print $folder\->report(\*(AqPROGRESS\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`Mail::Reporter\*(C'\fR class is tha base class fo' all classes, except
Mail::Message::Field::Fast cuz it would become slow...  This
base class is used durin initiation of tha objects, n' fo' configuring
and loggin error lyrics.
.SH "METHODS"
.IX Header "METHODS"
Da \f(CW\*(C`Mail::Reporter\*(C'\fR class is tha base fo' nearly all other
objects, n' you can put dat on yo' toast.  It can store n' report problems, n' gotz nuff tha general
constructor \fInew()\fR.
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Reporter\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Reporter->new(OPTIONS)"
This error container be also tha base constructor fo' all modules, (as long
as there is no need fo' another base object)  Da constructor always accepts
the followin \s-1OPTIONS\s0 related ta error reports.
.Sp
.Vb 3
\& \-Option\-\-Default
\&  log     \*(AqWARNINGS\*(Aq
\&  trace   \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
Log lyrics which gotz a prioritizzle higher or equal ta tha specified
level is stored internally n' can be retrieved later n' shit.  Da global
default fo' dis option can be chizzled wit \fIdefaultTrace()\fR.
.Sp
Known levels is \f(CW\*(C`INTERNAL\*(C'\fR, \f(CW\*(C`ERRORS\*(C'\fR, \f(CW\*(C`WARNINGS\*(C'\fR, \f(CW\*(C`PROGRESS\*(C'\fR,
\&\f(CW\*(C`NOTICES\*(C'\fR \f(CW\*(C`DEBUG\*(C'\fR, n' \f(CW\*(C`NONE\*(C'\fR.  Da \f(CW\*(C`PROGRESS\*(C'\fR level relates to
the readin n' freestylin of folders.  \f(CW\*(C`NONE\*(C'\fR will cause only \f(CW\*(C`INTERNAL\*(C'\fR
errors ta be logged.
By tha way: \f(CW\*(C`ERROR\*(C'\fR be a alias fo' \f(CW\*(C`ERRORS\*(C'\fR, as \f(CW\*(C`WARNING\*(C'\fR be a alias
for \f(CW\*(C`WARNINGS\*(C'\fR, n' \f(CW\*(C`NOTICE\*(C'\fR fo' \f(CW\*(C`NOTICES\*(C'\fR.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
Trace lyrics which gotz a level higher or equal ta tha specified level
are directly printed rockin warn, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Da global default fo' dis option can
be chizzled wit \fIdefaultTrace()\fR.
.RE
.RS 4
.RE
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
By default, produce a sick warnin if tha sub-classes cannot resolve
a method.
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
Add tha report from other \s-1OBJECT\s0 ta tha report of dis object. This is
useful when complex actions use temporary objects which is not returned
to tha main application but where tha main application wanna know
about any problems.
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Reporter\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Reporter->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
Reports tha default log n' trace level which is used fo' object as list
of two elements, n' you can put dat on yo' toast.  When not explicitly set, both is set ta \f(CW\*(C`WARNINGS\*(C'\fR.
.Sp
This method has three different uses. When one argument is specified, that
\&\s-1LEVEL\s0 is set fo' both loglevel as tracelevel.
.Sp
With two arguments, tha second determines which configuration you like.  If
the second argument be a \s-1CODE\s0 reference, you install a \s-1CALLBACK. \s0 Da loglevel
will be set ta \s-1NONE,\s0 n' all warnings produced up in yo' program will get
passed ta tha \s-1CALLBACK\s0 function. I aint talkin' bout chicken n' gravy biatch.  That function will git tha problem level,
the object or class which reports tha problem, n' tha problem text passed
as arguments.
.Sp
In any case two joints is returned: tha straight-up original gangsta is tha log level, the
second represents tha trace level.  Both is special variables: up in numeric
context they serve up a value (the internally used value), n' up in string
context tha strang name.  Be warned dat tha strang be always up in singular
form!
.Sp
example: settin loglevels
.Sp
.Vb 2
\& mah ($loglevel, $tracelevel) = Mail::Reporter\->defaultTrace;
\& Mail::Reporter\->defaultTrace(\*(AqNOTICES\*(Aq);
\&
\& mah ($l, $t) = Mail::Reporter\->defaultTrace(\*(AqWARNINGS\*(Aq, \*(AqDEBUG\*(Aq);
\& print $l;     # prints "WARNING"  (no S!)
\& print $l+0;   # prints "4"
\& print "Auch" if $l >= $self\->logPriority(\*(AqERROR\*(Aq);
\&
\& Mail::Reporter\->defaultTrace(\*(AqNONE\*(Aq);  # silence all reports
\&
\& $folder\->defaultTrace(\*(AqDEBUG\*(Aq);   # Still set as global default!
\& $folder\->trace(\*(AqDEBUG\*(Aq);          # local default
.Ve
.Sp
example: installin a cold-ass lil callback
.Sp
.Vb 1
\& Mail::Reporter\->defaultTrace
.Ve
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Equivalent to
.Sp
.Vb 1
\& $folder\->report(\*(AqERRORS\*(Aq)
.Ve
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Reporter\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Reporter->log([LEVEL [,STRINGS]])"
.PD
As instizzle method dis function has three different purposes.  Without
any argument, it returns one scalar containin tha number which is internally
used ta represent tha current log level, n' tha textual representation of
the strang all up in tha same time. Right back up in yo muthafuckin ass. See Scalar::Util method \f(CW\*(C`dualvar\*(C'\fR for
an explanation.
.Sp
With one argument, a freshly smoked up level of loggin detail is set (specify a number
of one of tha predefined strings).  With mo' arguments, it aint nuthin but a report
which may need ta be logged or traced.
.Sp
As class method, only a message can be passed. Y'all KNOW dat shit, muthafucka!  Da global configuration
value set wit \fIdefaultTrace()\fR is used ta decizzle whether tha message is
shown or ignored.
.Sp
Each log-entry has a \s-1LEVEL\s0 n' a text strang which will
be constructed by joinin tha \s-1STRINGS. \s0 If there is no newline, it will
be added.
.Sp
example:
.Sp
.Vb 3
\& print $message\->log;      # may print "NOTICE"
\& print $message\->log +0;   # may print "3"
\& $message\->log(\*(AqERRORS\*(Aq);  # sets a freshly smoked up level, returns tha numeric value
\&
\& $message\->log(WARNING => "This message is too large.");
\& $folda \->log(NOTICE  => "Cannot read from file $filename.");
\& $manager\->log(DEBUG   => "Yo there!", reverse sort @l);
\&
\& Mail::Message\->log(ERROR => \*(AqUnknown\*(Aq);
.Ve
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Reporter\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Reporter->logPriority(LEVEL)"
.PD
One error level (log or trace) has mo' than one representation: a
numeric value n' one or mo' strings.  For instance, \f(CW4\fR, \f(CW\*(AqWARNING\*(Aq\fR,
and \f(CW\*(AqWARNINGS\*(Aq\fR is all tha same.  Yo ass can specify any of these,
and up in return you git a thugged-out dualvar (see Scalar::Util method \f(CW\*(C`dualvar\*(C'\fR)
back, which gotz nuff tha number n' tha singular form.
.Sp
Da higher tha number, tha mo' blingin tha message.
Only lyrics bout \f(CW\*(C`INTERNAL\*(C'\fR problems is mo' blingin than \f(CW\*(C`NONE\*(C'\fR.
.Sp
example:
.Sp
.Vb 6
\& mah $r = Mail::Reporter\->logPriority(\*(AqWARNINGS\*(Aq);
\& mah $r = Mail::Reporter\->logPriority(\*(AqWARNING\*(Aq);    # same
\& mah $r = Mail::Reporter\->logPriority(4);            # same, deprecated
\& print $r;      # prints \*(AqWARNING\*(Aq  (no S!)
\& print $r + 0;  # prints 4
\& if($r < Mail::Reporter\->logPriority(\*(AqERROR\*(Aq)) {..} # true
.Ve
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Returns a list of \f(CW\*(C`(key =\*(C'\fR value)> pairs which can be used ta initiate
a freshly smoked up object wit tha same log-settings as dis one.
.Sp
example:
.Sp
.Vb 1
\& $head\->new($folder\->logSettings);
.Ve
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
A special case of \fIlog()\fR, which logs a \f(CW\*(C`INTERNAL\*(C'\fR\-error
and then croaks.  This is used by extension writers.
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
Git logged reports, as list of strings.  If a \s-1LEVEL\s0 is specified, tha log
for dat level is returned.
.Sp
In case no \s-1LEVEL\s0 is specified, you git all lyrics each as reference
to a tuple wit level n' message.
.Sp
example:
.Sp
.Vb 3
\& mah @warns = $message\->report(\*(AqWARNINGS\*(Aq);
\&   # previous indirectly callable with
\&   mah @warns = $msg\->warnings;
\&
\& print $folder\->report(\*(AqERRORS\*(Aq);
\&
\& if($folder\->report(\*(AqDEBUG\*(Aq)) {...}
\&
\& mah @reports = $folder\->report;
\& foreach (@reports) {
\&    mah ($level, $text) = @$_;
\&    print "$level report: $text";
\& }
.Ve
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
Report all lyrics which was produced by dis object n' all tha objects
which is maintained by dis object.  This will return a list of triplets,
each containin a reference ta tha object which caught tha report, the
level of tha report, n' tha message.
.Sp
example:
.Sp
.Vb 4
\& mah $folda = Mail::Box::Manager\->new\->open(folda => \*(Aqinbox\*(Aq);
\& mah @reports = $folder\->reportAll;
\& foreach (@reports) {
\&    mah ($object, $level, $text) = @$_;
\&
\&    if($object\->isa(\*(AqMail::Box\*(Aq)) {
\&       print "Folda $object: $level: $message";
\&    } elsif($object\->isa(\*(AqMail::Message\*(Aq) {
\&       print "Message ".$object\->seqnr.": $level: $message";
\&    }
\& }
.Ve
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
Change tha trace \s-1LEVEL\s0 of tha object. When no arguments is specified, the
current level is returned only.  It is ghon be returned up in one scalar which
gotz nuff both tha number which is internally used ta represent tha level,
and tha strang which represents dat shit.  See \fIlogPriority()\fR.
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Equivalent to
.Sp
.Vb 1
\& $folder\->report(\*(AqWARNINGS\*(Aq)
.Ve
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Cleanup tha object.
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
Returns whether tha program is breakin down. I aint talkin' bout chicken n' gravy biatch.  This is used up in \s-1\fIDESTROY\s0()\fR,
where durin global destructions references cannot be used.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
