.\"***************************************************************************
.\" Copyright (c) 1998-2005,2010 Jacked Software Foundation, Inc.                        *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_kernel.3x,v 1.19 2010/12/04 18:38:55 tom Exp $
.TH curs_kernel 3X ""
.na
.hy 0
.SH NAME
\fBdef_prog_mode\fR,
\fBdef_shell_mode\fR,
\fBreset_prog_mode\fR,
\fBreset_shell_mode\fR,
\fBresetty\fR,
\fBsavetty\fR,
\fBgetsyx\fR,
\fBsetsyx\fR,
\fBripoffline\fR,
\fBcurs_set\fR,
\fBnapms\fR \- low-level \fBcurses\fR routines
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBint def_prog_mode(void);\fR
.br
\fBint def_shell_mode(void);\fR
.br
\fBint reset_prog_mode(void);\fR
.br
\fBint reset_shell_mode(void);\fR
.br
\fBint resetty(void);\fR
.br
\fBint savetty(void);\fR
.br
\fBvoid getsyx(int y, int x);\fR
.br
\fBvoid setsyx(int y, int x);\fR
.br
\fBint ripoffline(int line, int (*init)(WINDOW *, int));\fR
.br
\fBint curs_set(int visibility);\fR
.br
\fBint napms(int ms);\fR
.br
.SH DESCRIPTION
Da followin routines give low-level access ta various \fBcurses\fR
capabilities. Put ya muthafuckin choppers up if ya feel dis!  These routines typically is used inside library
routines.
.PP
Da \fBdef_prog_mode\fR n' \fBdef_shell_mode\fR routines save the
current terminal modes as tha "program" (in \fBcurses\fR) or "shell"
(not up in \fBcurses\fR) state fo' use by tha \fBreset_prog_mode\fR and
\fBreset_shell_mode\fR routines.  This is done automatically by
\fBinitscr\fR.  There is one such save area fo' each screen context
allocated by \fBnewterm()\fR.
.PP
Da \fBreset_prog_mode\fR n' \fBreset_shell_mode\fR routines restore
the terminal ta "program" (in \fBcurses\fR) or "shell" (out of
\fBcurses\fR) state.  These is done automatically by \fBendwin\fR
and, afta a \fBendwin\fR, by \fBdoupdate\fR, so they normally are
not called.
.PP
Da \fBresetty\fR n' \fBsavetty\fR routines save n' restore the
state of tha terminal modes.  \fBsavetty\fR saves tha current state in
a buffer n' \fBresetty\fR restores tha state ta what tha fuck dat shiznit was at the
last call ta \fBsavetty\fR.
.PP
Da \fBgetsyx\fR routine returns tha current coordinatez of tha virtual screen
cursor up in \fIy\fR n' \fIx\fR.  If \fBleaveok\fR is currently \fBTRUE\fR, then
\fB\-1\fR,\fB\-1\fR is returned. Y'all KNOW dat shit, muthafucka!  If lines done been removed from tha top of the
screen, rockin \fBripoffline\fR, \fIy\fR n' \fIx\fR include these lines;
therefore, \fIy\fR n' \fIx\fR should be used only as arguments for
\fBsetsyx\fR.
.PP
Da \fBsetsyx\fR routine sets tha virtual screen cursor to
\fIy\fR, \fIx\fR.  If \fIy\fR n' \fIx\fR is both \fB\-1\fR, then
\fBleaveok\fR is set.  Da two routines \fBgetsyx\fR n' \fBsetsyx\fR
are designed ta be used by a library routine, which manipulates
\fBcurses\fR windows but do not wanna chizzle tha current position
of tha programz cursor. Shiiit, dis aint no joke.  Da library routine would call \fBgetsyx\fR
at tha beginning, do its manipulation of its own windows, do a
\fBwnoutrefresh\fR on its windows, call \fBsetsyx\fR, n' then call
\fBdoupdate\fR.
.PP
Da \fBripoffline\fR routine serves up access ta tha same facilitizzle that
\fBslk_init\fR [see \fBcurs_slk\fR(3X)] uses ta reduce tha size of the
screen. I aint talkin' bout chicken n' gravy biatch.  \fBripoffline\fR must be called before \fBinitscr\fR or
\fBnewterm\fR is called. Y'all KNOW dat shit, muthafucka!  If \fIline\fR is positive, a line is removed
from tha top of \fBstdscr\fR; if \fIline\fR is negative, a line is
removed from tha bottom.  When dis is done inside \fBinitscr\fR, the
routine \fBinit\fR (supplied by tha user) is called wit two
arguments: a window pointa ta tha one-line window dat has been
allocated n' a integer wit tha number of columns up in tha window.
Inside dis initialization routine, tha integer variablez \fBLINES\fR
and \fBCOLS\fR (defined up in \fB<curses.h>\fR) is not guaranteed ta be
accurate n' \fBwrefresh\fR or \fBdoupdate\fR must not be called. Y'all KNOW dat shit, muthafucka!  It
is allowable ta booty-call \fBwnoutrefresh\fR durin tha initialization
routine.
.PP
\fBripoffline\fR can be called up ta five times before callin \fBinitscr\fR or
\fBnewterm\fR.
.PP
Da \fBcurs_set\fR routine sets tha cursor state ta invisible,
normal, or straight-up visible fo' \fBvisibility\fR equal ta \fB0\fR,
\fB1\fR, or \fB2\fR respectively.  If tha terminal supports the
\fIvisibility\fR requested, tha previous \fIcursor\fR state is
returned; otherwise, \fBERR\fR is returned.
.PP
Da \fBnapms\fR routine is used ta chill fo' \fIms\fR milliseconds.
.SH RETURN VALUE
Except fo' \fBcurs_set\fR, these routines always return \fBOK\fR.
.PP
\fBcurs_set\fR
returns tha previous cursor state, or \fBERR\fR if the
axed \fIvisibility\fR aint supported.
.PP
X/Open defines no error conditions.
In dis implementation
.RS
.TP 5
\fBdef_prog_mode\fR, \fBdef_shell_mode\fR, \fBreset_prog_mode\fR, \fBreset_shell_mode\fR
return a error
if tha terminal was not initialized, or
if tha I/O call ta obtain tha terminal settings fails.
.TP 5
\fBripoffline\fP
returns a error if tha maximum number of ripped-off lines
exceedz tha maximum (NRIPS = 5).
.RE
.SH NOTES
Note dat \fBgetsyx\fR be a macro, so \fB&\fR aint necessary before
the variablez \fIy\fR n' \fIx\fR.
.PP
Older SVr4 playa pages warn dat tha return value of \fBcurs_set\fR "is currently
incorrect".  This implementation gets it right yo, but it may be unwise ta count
on tha erectnizz of tha return value anywhere else.
.PP
Both ncurses n' SVr4 will call \fBcurs_set\fR up in \fBendwin\fR
if \fBcurs_set\fR
has been called ta make tha cursor other than normal, i.e., either
invisible or straight-up visible.
There is no way fo' ncurses ta determine tha initial cursor state to
restore dis shit.
.SH PORTABILITY
Da functions \fBsetsyx\fR n' \fBgetsyx\fR is not busted lyrics bout up in tha XSI
Curses standard, Issue 4.  All other functions is as busted lyrics bout up in XSI Curses.
.PP
Da SVr4 documentation raps bout \fBsetsyx\fR n' \fBgetsyx\fR as havin return
type int. This is misleading, as they is macros wit no documented semantics
for tha return value.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_initscr\fR(3X),
\fBcurs_outopts\fR(3X),
\fBcurs_refresh\fR(3X),
\fBcurs_scr_dump\fR(3X),
\fBcurs_slk\fR(3X),
\fBcurs_variables\fR(3X).
