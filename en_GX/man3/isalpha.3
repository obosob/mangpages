.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:10:00 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 21 17:51:50 1994 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat Sep  2 21:52:01 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified Mon May 27 22:55:26 1996 by Martin Schulze (joey@linux.de)
.\"
.TH ISALPHA 3 2010-09-20 "GNU" "Linux Programmerz Manual"
.SH NAME
isalnum, isalpha, isascii, isblank, iscntrl, isdigit, isgraph, islower,
isprint, ispunct, isspace, isupper, isxdigit \- character
classification routines
.SH SYNOPSIS
.nf
.B #include <ctype.h>
.sp
.BI "int isalnum(int " "c" );
.br
.BI "int isalpha(int " "c" );
.br
.BI "int isascii(int " "c" );
.br
.BI "int isblank(int " "c" );
.br
.BI "int iscntrl(int " "c" );
.br
.BI "int isdigit(int " "c" );
.br
.BI "int isgraph(int " "c" );
.br
.BI "int islower(int " "c" );
.br
.BI "int isprint(int " "c" );
.br
.BI "int ispunct(int " "c" );
.br
.BI "int isspace(int " "c" );
.br
.BI "int isupper(int " "c" );
.br
.BI "int isxdigit(int " "c" );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR isascii ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.br
.RE
.BR isblank ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions check whether
.IR c ,
which must have tha value of an
.I unsigned char
or
.BR EOF ,
falls tha fuck into a cold-ass lil certain characta class accordin ta tha current locale.
.TP
.BR isalnum ()
checks fo' a alphanumeric character; it is equivalent to
.BI "(isalpha(" c ") || isdigit(" c "))" \fR.
.TP
.BR isalpha ()
checks fo' a alphabetic character; up in tha standard \fB"C"\fP
locale, it is equivalent to
.BI "(isupper(" c ") || islower(" c "))" \fR.
In some locales, there may be additionizzle charactas fo' which
.BR isalpha ()
is true\(emlettas which is neither upper case nor lower
case.
.TP
.BR isascii ()
checks whether \fIc\fP be a 7-bit
.I unsigned char
value dat fits into
the ASCII characta set.
.TP
.BR isblank ()
checks fo' a funky-ass blank character; dat is, a space or a tab.
.TP
.BR iscntrl ()
checks fo' a cold-ass lil control character.
.TP
.BR isdigit ()
checks fo' a gangbangin' finger-lickin' digit (0 all up in 9).
.TP
.BR isgraph ()
checks fo' any printable characta except space.
.TP
.BR islower ()
checks fo' a lower-case character.
.TP
.BR isprint ()
checks fo' any printable characta includin space.
.TP
.BR ispunct ()
checks fo' any printable characta which aint a space or an
alphanumeric character.
.TP
.BR isspace ()
checks fo' white-space characters.
In the
.B """C"""
and
.B """POSIX"""
locales, these are: space, form-feed
.RB ( \(aq\ef\(aq ),
newline
.RB ( \(aq\en\(aq ),
carriage return
.RB ( \(aq\er\(aq ),
horizontal tab
.RB ( \(aq\et\(aq ),
and vertical tab
.RB ( \(aq\ev\(aq ).
.TP
.BR isupper ()
checks fo' a uppercase letter.
.TP
.BR isxdigit ()
checks fo' a hexadecimal digits, dat is, one of
.br
.BR "0 1 2 3 4 5 6 7 8 9 a funky-ass b c d e f A B C D E F" .
.SH RETURN VALUE
Da joints returned is nonzero if tha character
.I c
falls tha fuck into tha tested class, n' a zero value
if not.
.SH CONFORMING TO
C99, 4.3BSD.
C89 specifies all of these functions except
.BR isascii ()
and
.BR isblank ().
.BR isascii ()
is a BSD extension
and be also a SVr4 extension.
.BR isblank ()
conforms ta POSIX.1-2001 n' C99 7.4.1.3.
POSIX.1-2008 marks
.BR isascii ()
as obsolete,
notin dat it cannot be used portably up in a localized application.
.SH NOTES
Da detailz of what tha fuck charactas belong tha fuck into which class depend on tha current
locale.
For example,
.BR isupper ()
will not recognize a A-umlaut (\(:A) as a uppercase letta up in tha default
.B "C"
locale.
.SH SEE ALSO
.BR iswalnum (3),
.BR iswalpha (3),
.BR iswblank (3),
.BR iswcntrl (3),
.BR iswdigit (3),
.BR iswgraph (3),
.BR iswlower (3),
.BR iswprint (3),
.BR iswpunct (3),
.BR iswspace (3),
.BR iswupper (3),
.BR iswxdigit (3),
.BR setlocale (3),
.BR toascii (3),
.BR tolower (3),
.BR toupper (3),
.BR ascii (7),
.BR locale (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
