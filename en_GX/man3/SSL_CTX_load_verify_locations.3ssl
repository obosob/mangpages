.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_CTX_load_verify_locations 3"
.TH SSL_CTX_load_verify_locations 3 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_CTX_load_verify_locations \- set default locations fo' trusted CA
certificates
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
\&                                   const char *CApath);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISSL_CTX_load_verify_locations()\fR specifies tha locations fo' \fBctx\fR, at
which \s-1CA\s0 certificates fo' verification purposes is located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da certificates
available via \fBCAfile\fR n' \fBCApath\fR is trusted.
.SH "NOTES"
.IX Header "NOTES"
If \fBCAfile\fR aint \s-1NULL,\s0 it points ta a gangbangin' file of \s-1CA\s0 certificates up in \s-1PEM\s0
format. Da file can contain nuff muthafuckin \s-1CA\s0 certificates identified by
.PP
.Vb 3
\& \-\-\-\-\-BEGIN CERTIFICATE\-\-\-\-\-
\& ... (CA certificate up in base64 encoding) ...
\& \-\-\-\-\-END CERTIFICATE\-\-\-\-\-
.Ve
.PP
sequences. Before, between, n' afta tha certificates text be allowed
which can be used e.g. fo' descriptionz of tha certificates.
.PP
Da \fBCAfile\fR is processed on execution of tha \fISSL_CTX_load_verify_locations()\fR
function.
.PP
If \fBCApath\fR aint \s-1NULL,\s0 it points ta a gangbangin' finger-lickin' directory containin \s-1CA\s0 certificates
in \s-1PEM\s0 format. Da filez each contain one \s-1CA\s0 certificate. Da filez are
looked up by tha \s-1CA\s0 subject name hash value, which must hence be available.
If mo' than one \s-1CA\s0 certificate wit tha same name hash value exist, the
extension must be different (e.g. 9d66eef0.0, 9d66eef0.1 etc). Da search
is performed up in tha orderin of tha extension number, regardless of other
propertizzlez of tha certificates.
Use tha \fBc_rehash\fR utilitizzle ta create tha necessary links.
.PP
Da certificates up in \fBCApath\fR is only looked up when required, e.g. when
buildin tha certificate chain or when straight-up struttin tha verification
of a peer certificate.
.PP
When lookin up \s-1CA\s0 certificates, tha OpenSSL library will first search the
certificates up in \fBCAfile\fR, then dem up in \fBCApath\fR. Certificate matching
is done based on tha subject name, tha key identifier (if present), n' the
serial number as taken from tha certificate ta be verified. Y'all KNOW dat shit, muthafucka! If these data
do not match, tha next certificate is ghon be tried. Y'all KNOW dat shit, muthafucka! If a gangbangin' first certificate
matchin tha parametas is found, tha verification process is ghon be performed;
no other certificates fo' tha same parametas is ghon be searched up in case of
failure.
.PP
In server mode, when requestin a cold-ass lil client certificate, tha server must send
the list of CAz of which it will accept client certificates. This list
is not hyped up by tha contentz of \fBCAfile\fR or \fBCApath\fR n' must
explicitly be set rockin the
\&\fISSL_CTX_set_client_CA_list\fR\|(3)
family of functions.
.PP
When buildin its own certificate chain, a OpenSSL client/server will
try ta fill up in missin certificates from \fBCAfile\fR/\fBCApath\fR, if the
certificate chain was not explicitly specified (see
\&\fISSL_CTX_add_extra_chain_cert\fR\|(3),
\&\fISSL_CTX_use_certificate\fR\|(3).
.SH "WARNINGS"
.IX Header "WARNINGS"
If nuff muthafuckin \s-1CA\s0 certificates matchin tha name, key identifier, n' serial
number condizzle is available, only tha straight-up original gangsta one is ghon be examined. Y'all KNOW dat shit, muthafucka! This
may lead ta unexpected thangs up in dis biatch if tha same \s-1CA\s0 certificate be available
with different expiration dates. If a \*(L"certificate expired\*(R" verification
error occurs, no other certificate is ghon be searched. Y'all KNOW dat shit, muthafucka! Make shizzle ta not
have expired certificates mixed wit valid ones.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Generate a \s-1CA\s0 certificate file wit descriptizzle text from tha \s-1CA\s0 certificates
ca1.pem ca2.pem ca3.pem:
.PP
.Vb 5
\& #!/bin/sh
\& rm CAfile.pem
\& fo' i up in ca1.pem ca2.pem ca3.pem ; do
\&   openssl x509 \-in $i \-text >> CAfile.pem
\& done
.Ve
.PP
Prepare tha directory /some/where/certs containin nuff muthafuckin \s-1CA\s0 certificates
for use as \fBCApath\fR:
.PP
.Vb 2
\& cd /some/where/certs
\& c_rehash .
.Ve
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Da followin return joints can occur:
.ie n .IP "0" 4
.el .IP "\f(CW0\fR" 4
.IX Item "0"
Da operation failed cuz \fBCAfile\fR n' \fBCApath\fR is \s-1NULL\s0 or the
processin at one of tha locations specified failed. Y'all KNOW dat shit, muthafucka! Peep tha error
stack ta smoke up tha reason.
.ie n .IP "1" 4
.el .IP "\f(CW1\fR" 4
.IX Item "1"
Da operation succeeded.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIssl\fR\|(3),
\&\fISSL_CTX_set_client_CA_list\fR\|(3),
\&\fISSL_get_client_CA_list\fR\|(3),
\&\fISSL_CTX_use_certificate\fR\|(3),
\&\fISSL_CTX_add_extra_chain_cert\fR\|(3),
\&\fISSL_CTX_set_cert_store\fR\|(3)
