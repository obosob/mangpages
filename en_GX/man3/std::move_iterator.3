" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::move_iterator< _Iterator > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef 
.br
__traits_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef 
.br
__traits_type::iterator_category \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef _Iterator \fBiterator_type\fP"
.br
.ti -1c
.RI "typedef _Iterator \fBpointer\fP"
.br
.ti -1c
.RI "typedef value_type && \fBreference\fP"
.br
.ti -1c
.RI "typedef __traits_type::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmove_iterator\fP (iterator_type __i)"
.br
.ti -1c
.RI "template<typename _Ita > \fBmove_iterator\fP (const \fBmove_iterator\fP< _Ita > &__i)"
.br
.ti -1c
.RI "iterator_type \fBbase\fP () const "
.br
.ti -1c
.RI "reference \fBoperator*\fP () const "
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator+\fP (difference_type __n) const "
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator+=\fP (difference_type __n)"
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator-\fP (difference_type __n) const "
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator--\fP ()"
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator--\fP (int)"
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator-=\fP (difference_type __n)"
.br
.ti -1c
.RI "pointa \fBoperator->\fP () const "
.br
.ti -1c
.RI "reference \fBoperator[]\fP (difference_type __n) const "
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef iterator_traits
.br
< _Iterator > \fB__traits_type\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "_Iterator \fB_M_current\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Iterator>class std::move_iterator< _Iterator >"
Class template move_iterator be a iterator adapta wit tha same behavior as tha underlyin iterator except dat its dereference operator implicitly converts tha value returned by tha underlyin iteratorz dereference operator ta a rvalue reference\&. Right back up in yo muthafuckin ass. Some generic algorithms can be called wit move iterators ta replace copyin wit moving\&. 
.PP
Definizzle at line 411 of file cpp_type_traits\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
