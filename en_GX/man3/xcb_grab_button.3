.TH xcb_grab_button 3  2013-08-04 "XCB" "XCB Requests"
.ad l
.SH NAME
xcb_grab_button \- Grab pointa button(s)
.SH SYNOPSIS
.hy 0
.B #include <xcb/xproto.h>
.SS Request function
.HP
xcb_void_cookie_t \fBxcb_grab_button\fP(xcb_connection_t\ *\fIconn\fP, uint8_t\ \fIballer_events\fP, xcb_window_t\ \fIgrab_window\fP, uint16_t\ \fIevent_mask\fP, uint8_t\ \fIpointer_mode\fP, uint8_t\ \fIkeyboard_mode\fP, xcb_window_t\ \fIconfine_to\fP, xcb_cursor_t\ \fIcursor\fP, uint8_t\ \fIbutton\fP, uint16_t\ \fImodifiers\fP);
.br
.hy 1
.SH REQUEST ARGUMENTS
.IP \fIconn\fP 1i
Da XCB connection ta X11.
.IP \fIballer_events\fP 1i
If 1, tha \fIgrab_window\fP will still git tha pointa events, n' you can put dat on yo' toast. If 0, events is not
reported ta tha \fIgrab_window\fP.
.IP \fIgrab_window\fP 1i
Specifies tha window on which tha pointa should be grabbed.
.IP \fIevent_mask\fP 1i
Specifies which pointa events is reported ta tha client.

TODO: which joints?
.IP \fIpointer_mode\fP 1i
One of tha followin joints:
.RS 1i
.IP \fIXCB_GRAB_MODE_SYNC\fP 1i
Da state of tha keyboard appears ta freeze: No further keyboard events are
generated by tha server until tha grabbin client thangs a releasing
\fIAllowEvents\fP request or until tha keyboard grab is busted out.
.IP \fIXCB_GRAB_MODE_ASYNC\fP 1i
Keyboard event processin continues normally.
.RE
.RS 1i


.RE
.IP \fIkeyboard_mode\fP 1i
One of tha followin joints:
.RS 1i
.IP \fIXCB_GRAB_MODE_SYNC\fP 1i
Da state of tha keyboard appears ta freeze: No further keyboard events are
generated by tha server until tha grabbin client thangs a releasing
\fIAllowEvents\fP request or until tha keyboard grab is busted out.
.IP \fIXCB_GRAB_MODE_ASYNC\fP 1i
Keyboard event processin continues normally.
.RE
.RS 1i


.RE
.IP \fIconfine_to\fP 1i
Specifies tha window ta confine tha pointa up in (the user aint gonna be able to
move tha pointa outta dat window).

Da special value \fIXCB_NONE\fP means don't confine tha pointer.
.IP \fIcursor\fP 1i
Specifies tha cursor dat should be displayed or \fIXCB_NONE\fP ta not chizzle the
cursor.
.IP \fIbutton\fP 1i
One of tha followin joints:
.RS 1i
.IP \fIXCB_BUTTON_INDEX_ANY\fP 1i
Any of tha followin (or none):
.IP \fIXCB_BUTTON_INDEX_1\fP 1i
Da left mouse button.
.IP \fIXCB_BUTTON_INDEX_2\fP 1i
Da right mouse button.
.IP \fIXCB_BUTTON_INDEX_3\fP 1i
Da middle mouse button.
.IP \fIXCB_BUTTON_INDEX_4\fP 1i
Scroll wheel. TODO: direction?
.IP \fIXCB_BUTTON_INDEX_5\fP 1i
Scroll wheel. TODO: direction?
.RE
.RS 1i


.RE
.IP \fImodifiers\fP 1i
Da modifiers ta grab.

Usin tha special value \fIXCB_MOD_MASK_ANY\fP means grab tha pointa wit all
possible modifier combinations.
.SH DESCRIPTION
This request establishes a passive grab. Da pointa be actively grabbed as
busted lyrics bout up in GrabPointer, tha last-pointer-grab time is set ta tha time at
which tha button was pressed (as transmitted up in tha ButtonPress event), n' the
ButtonPress event is reported if all of tha followin conditions is true:

Da pointa aint grabbed n' tha specified button is logically pressed when
the specified modifier keys is logically down, n' no other buttons or
modifier keys is logically down.

Da grab-window gotz nuff tha pointer.

Da confine-to window (if any) is viewable.

A passive grab on tha same button/key combination do not exist on any
ancestor of grab-window.

Da interpretation of tha remainin arguments is tha same ol' dirty as fo' GrabPointer.
Da actizzle grab is terminated automatically when tha logical state of the
pointa has all buttons busted out, independent of tha logical state of modifier
keys. Note dat tha logical state of a thang (as peeped by meanz of the
protocol) may lag tha physical state if thang event processin is frozen. I aint talkin' bout chicken n' gravy biatch. This
request overrides all previous passive grabs by tha same client on tha same
button/key combinations on tha same window fo' realz. A modifier of AnyModifier is
equivalent ta issuin tha request fo' all possible modifier combinations
(includin tha combination of no modifiers). Well shiiiit, it aint required dat all
specified modifiers have currently assigned keycodes fo' realz. A button of AnyButton is
equivalent ta issuin tha request fo' all possible buttons. Otherwise, it is
not required dat tha button specified currently be assigned ta a physical
button.

An Access error is generated if some other client has already issued a
GrabButton request wit tha same button/key combination on tha same window.
When rockin AnyModifier or AnyButton, tha request fails straight-up (no grabs are
established), n' a Access error is generated if there be a cold-ass lil conflictin grab
for any combination. I aint talkin' bout chicken n' gravy biatch. Da request has no effect on a actizzle grab.
.SH RETURN VALUE
Returns a \fIxcb_void_cookie_t\fP. Errors (if any) gotta be handled up in tha event loop.

If you wanna handle errors directly wit \fIxcb_request_check\fP instead, use \fIxcb_grab_button_checked\fP. Right back up in yo muthafuckin ass. See \fBxcb-requests(3)\fP fo' details.
.SH ERRORS
.IP \fIxcb_access_error_t\fP 1i
Another client has already issued a GrabButton wit tha same button/key
combination on tha same window.
.IP \fIxcb_cursor_error_t\fP 1i
Da specified \fIcursor\fP do not exist.
.IP \fIxcb_window_error_t\fP 1i
Da specified \fIwindow\fP do not exist.
.IP \fIxcb_value_error_t\fP 1i
TODO: reasons?
.SH SEE ALSO
.BR xcb-requests (3)
.SH AUTHOR
Generated from xproto.xml. Contact xcb@lists.freedesktop.org fo' erections n' improvements.
