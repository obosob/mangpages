.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Server::IMAP4::Fetch 3"
.TH Mail::Server::IMAP4::Fetch 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Server::IMAP4::Fetch \- message info fo' IMAP protocol speed\-up
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& mah $imap = Mail::Server::IMAP4::Fetch\->new($msg);
\& print $imap\->fetchBody(1);   # fo' FETCH BODYSTRUCTURE
\& print $imap\->fetchBody;      # fo' FETCH BODY
\& print $imap\->fetchEnvelope;  # fo' FETCH ENVELOPE
\& print $imap\->fetchSize;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Smoke a freshly smoked up object hierarchy, which gotz nuff shiznit ta capture
da most thugged-out blingin details bout tha message.  Da object can be used
to speed-up IMAP-server implementations, as Mail::Box::Netzwert.
.PP
Da object used here be a simplified representation of a
Mail::Box::Message object.  It do not maintain headaz n' do
not refer ta tha folda n' shit.  It only works wit lyrics stored up in a gangbangin' file.
Therefore, dis object can be frozen by Storable if you want to.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Server::IMAP4::Fetch\->\fBnew\fR(MESSAGE|PART, \s-1OPTIONS\s0)" 4
.IX Item "Mail::Server::IMAP4::Fetch->new(MESSAGE|PART, OPTIONS)"
.Vb 2
\& \-Option      \-\-Default
\&  md5checksums  0
.Ve
.RS 4
.IP "md5checksums => \s-1BOOLEAN\s0" 2
.IX Item "md5checksums => BOOLEAN"
.RE
.RS 4
.RE
.SS "Attributes"
.IX Subsection "Attributes"
.PD 0
.ie n .IP "$obj\->\fBbodyLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbodyLocation\fR()" 4
.IX Item "$obj->bodyLocation()"
.ie n .IP "$obj\->\fBheadLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBheadLocation\fR()" 4
.IX Item "$obj->headLocation()"
.ie n .IP "$obj\->\fBpartLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBpartLocation\fR()" 4
.IX Item "$obj->partLocation()"
.PD
.SS "\s-1IMAP\s0 Commands"
.IX Subsection "IMAP Commands"
.ie n .IP "$obj\->\fBfetchBody\fR(\s-1EXTENDED\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfetchBody\fR(\s-1EXTENDED\s0)" 4
.IX Item "$obj->fetchBody(EXTENDED)"
Returns one string, representin tha messagez structure as defined by
the \s-1IMAP\s0 protocol.  Da boolean argument indicates whether you like to
have tha \s-1EXTENDED\s0 shiznit, as tha imap command '\s-1FETCH BODYSTRUCTURE\s0'
defines or tha limited shiznit of '\s-1FETCH BODY\s0'.
.ie n .IP "$obj\->\fBfetchEnvelope\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfetchEnvelope\fR()" 4
.IX Item "$obj->fetchEnvelope()"
Returns a strang representation of some header shiznit.
.ie n .IP "$obj\->\fBfetchSize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfetchSize\fR()" 4
.IX Item "$obj->fetchSize()"
Returns tha size of tha message body.
.ie n .IP "$obj\->\fBpart\fR([\s-1PARTNR\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBpart\fR([\s-1PARTNR\s0])" 4
.IX Item "$obj->part([PARTNR])"
Da partnummer be a list of dot-separated positizzle integers, numbering
(nested) parts up in multi-part message bodies. Put ya muthafuckin choppers up if ya feel dis!  By default, tha info of
the main message is returned.
.Sp
example:
.Sp
.Vb 2
\& mah $partinfo = $msg\->info\->part(\*(Aq1.2.1\*(Aq);
\& print $msg\->info\->part(\*(Aq3.3\*(Aq)\->fetchBody;
.Ve
.ie n .IP "$obj\->\fBprintStructure\fR([FILEHANDLE|undef, [\s-1NUMBER\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBprintStructure\fR([FILEHANDLE|undef, [\s-1NUMBER\s0]])" 4
.IX Item "$obj->printStructure([FILEHANDLE|undef, [NUMBER]])"
Print tha structure of tha fetch data ta tha specified \s-1FILEHANDLE\s0 or the
selected filehandle.  When explicitly \f(CW\*(C`undef\*(C'\fR is specified as handle,
then tha output is ghon be returned as string.  
Only a limited set of tha shiznit is displayed.
.Sp
example:
.Sp
.Vb 4
\& mah $imap = ...;
\& $imap\->printStructure(\e*OUTPUT);
\& $imap\->printStructure;
\& mah $struct = $imap\->printStructure(undef);
.Ve
.SS "Internals"
.IX Subsection "Internals"
.SH "DETAILS"
.IX Header "DETAILS"
See
.ie n .IP "\s-1RFC2060: \s0""Internizzle Message Access Protocol IMAP4v1"" section 7.4.2" 4
.el .IP "\s-1RFC2060: \s0``Internizzle Message Access Protocol IMAP4v1'' section 7.4.2" 4
.IX Item "RFC2060: Internizzle Message Access Protocol IMAP4v1 section 7.4.2"
.PD 0
.ie n .IP "\s-1RFC2045: ""MIME\s0 Part One: Format of Internizzle Message Bodies""." 4
.el .IP "\s-1RFC2045: ``MIME\s0 Part One: Format of Internizzle Message Bodies''." 4
.IX Item "RFC2045: MIME Part One: Format of Internizzle Message Bodies."
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
