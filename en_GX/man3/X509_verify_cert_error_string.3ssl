.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509_STORE_CTX_get_error 3"
.TH X509_STORE_CTX_get_error 3 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
X509_STORE_CTX_get_error, X509_STORE_CTX_set_error, X509_STORE_CTX_get_error_depth, X509_STORE_CTX_get_current_cert, X509_STORE_CTX_get1_chain, X509_verify_cert_error_strin \- git or set certificate verification status shiznit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& #include <openssl/x509.h>
\& #include <openssl/x509_vfy.h>
\&
\& int    X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
\& void   X509_STORE_CTX_set_error(X509_STORE_CTX *ctx,int s);
\& int    X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
\& X509 * X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
\&
\& STACK_OF(X509) *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx);
\&
\& const char *X509_verify_cert_error_string(long n);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These functions is typically called afta \fIX509_verify_cert()\fR has indicated
an error or up in a verification callback ta determine tha nature of a error.
.PP
\&\fIX509_STORE_CTX_get_error()\fR returns tha error code of \fBctx\fR, see
the \fB\s-1ERROR CODES\s0\fR section fo' a gangbangin' full description of all error codes.
.PP
\&\fIX509_STORE_CTX_set_error()\fR sets tha error code of \fBctx\fR ta \fBs\fR. For example
it might be used up in a verification callback ta set a error based on additional
checks.
.PP
\&\fIX509_STORE_CTX_get_error_depth()\fR returns tha \fBdepth\fR of tha error. Shiiit, dis aint no joke. This be a
non-negatizzle integer representin where up in tha certificate chain tha error
occurred. Y'all KNOW dat shit, muthafucka! If it is zero it occured up in tha end entitizzle certificate, one if
it is tha certificate which signed tha end entitizzle certificate n' so on.
.PP
\&\fIX509_STORE_CTX_get_current_cert()\fR returns tha certificate up in \fBctx\fR which
caused tha error or \fB\s-1NULL\s0\fR if no certificate is relevant.
.PP
\&\fIX509_STORE_CTX_get1_chain()\fR returns a cold-ass lil complete validate chain if a previous
call ta \fIX509_verify_cert()\fR is successful naaahhmean, biatch? If tha call ta \fIX509_verify_cert()\fR
is \fBnot\fR successful tha returned chain may be incomplete or invalid. Y'all KNOW dat shit, muthafucka! The
returned chain persists afta tha \fBctx\fR structure is freed, when it is
no longer needed it should be free up using:
.PP
.Vb 1
\&  sk_X509_pop_free(chain, X509_free);
.Ve
.PP
\&\fIX509_verify_cert_error_string()\fR returns a human readable error strang for
verification error \fBn\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIX509_STORE_CTX_get_error()\fR returns \fBX509_V_OK\fR or a error code.
.PP
\&\fIX509_STORE_CTX_get_error_depth()\fR returns a non-negatizzle error depth.
.PP
\&\fIX509_STORE_CTX_get_current_cert()\fR returns tha cerificate which caused the
error or \fB\s-1NULL\s0\fR if no certificate is relevant ta tha error.
.PP
\&\fIX509_verify_cert_error_string()\fR returns a human readable error strang for
verification error \fBn\fR.
.SH "ERROR CODES"
.IX Header "ERROR CODES"
A list of error codes n' lyrics is shown below.  Some of the
error codes is defined but currently never returned: these is busted lyrics bout as
\&\*(L"unused\*(R".
.IP "\fBX509_V_OK: ok\fR" 4
.IX Item "X509_V_OK: ok"
the operation was successful.
.IP "\fBX509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable ta git issuer certificate\fR" 4
.IX Item "X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable ta git issuer certificate"
the issuer certificate could not be found: dis occurs if tha issuer certificate
of a untrusted certificate cannot be found.
.IP "\fBX509_V_ERR_UNABLE_TO_GET_CRL: unable ta git certificate \s-1CRL\s0\fR" 4
.IX Item "X509_V_ERR_UNABLE_TO_GET_CRL: unable ta git certificate CRL"
the \s-1CRL\s0 of a cold-ass lil certificate could not be found.
.IP "\fBX509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable ta decrypt certificatez signature\fR" 4
.IX Item "X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable ta decrypt certificatez signature"
the certificate signature could not be decrypted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This means dat tha actual
signature value could not be determined rather than it not matchin the
expected value, dis is only meaningful fo' \s-1RSA\s0 keys.
.IP "\fBX509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable ta decrypt \s-1CRL\s0z signature\fR" 4
.IX Item "X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable ta decrypt CRLz signature"
the \s-1CRL\s0 signature could not be decrypted: dis means dat tha actual signature
value could not be determined rather than it not matchin tha expected value.
Unused.
.IP "\fBX509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable ta decode issuer hood key\fR" 4
.IX Item "X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable ta decode issuer hood key"
the hood key up in tha certificate SubjectPublicKeyInfo could not be read.
.IP "\fBX509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure\fR" 4
.IX Item "X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure"
the signature of tha certificate is invalid.
.IP "\fBX509_V_ERR_CRL_SIGNATURE_FAILURE: \s-1CRL\s0 signature failure\fR" 4
.IX Item "X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure"
the signature of tha certificate is invalid.
.IP "\fBX509_V_ERR_CERT_NOT_YET_VALID: certificate aint yet valid\fR" 4
.IX Item "X509_V_ERR_CERT_NOT_YET_VALID: certificate aint yet valid"
the certificate aint yet valid: tha notBefore date be afta tha current time.
.IP "\fBX509_V_ERR_CERT_HAS_EXPIRED: certificate has expired\fR" 4
.IX Item "X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired"
the certificate has expired: dat is tha notAfta date is before tha current time.
.IP "\fBX509_V_ERR_CRL_NOT_YET_VALID: \s-1CRL\s0 aint yet valid\fR" 4
.IX Item "X509_V_ERR_CRL_NOT_YET_VALID: CRL aint yet valid"
the \s-1CRL\s0 aint yet valid.
.IP "\fBX509_V_ERR_CRL_HAS_EXPIRED: \s-1CRL\s0 has expired\fR" 4
.IX Item "X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired"
the \s-1CRL\s0 has expired.
.IP "\fBX509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error up in certificatez notBefore field\fR" 4
.IX Item "X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error up in certificatez notBefore field"
the certificate notBefore field gotz nuff a invalid time.
.IP "\fBX509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error up in certificatez notAfta field\fR" 4
.IX Item "X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error up in certificatez notAfta field"
the certificate notAfta field gotz nuff a invalid time.
.IP "\fBX509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error up in \s-1CRL\s0z lastUpdate field\fR" 4
.IX Item "X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error up in CRLz lastUpdate field"
the \s-1CRL\s0 lastUpdate field gotz nuff a invalid time.
.IP "\fBX509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error up in \s-1CRL\s0z nextUpdate field\fR" 4
.IX Item "X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error up in CRLz nextUpdate field"
the \s-1CRL\s0 nextUpdate field gotz nuff a invalid time.
.IP "\fBX509_V_ERR_OUT_OF_MEM: outta memory\fR" 4
.IX Item "X509_V_ERR_OUT_OF_MEM: outta memory"
an error occurred tryin ta allocate memory. This should never happen.
.IP "\fBX509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate\fR" 4
.IX Item "X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate"
the passed certificate is self signed n' tha same certificate cannot be found
in tha list of trusted certificates.
.IP "\fBX509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate up in certificate chain\fR" 4
.IX Item "X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate up in certificate chain"
the certificate chain could be built up rockin tha untrusted certificates but
the root could not be found locally.
.IP "\fBX509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable ta git local issuer certificate\fR" 4
.IX Item "X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable ta git local issuer certificate"
the issuer certificate of a locally looked up certificate could not be found.
This normally means tha list of trusted certificates aint complete.
.IP "\fBX509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable ta verify tha straight-up original gangsta certificate\fR" 4
.IX Item "X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable ta verify tha straight-up original gangsta certificate"
no signatures could be verified cuz tha chain gotz nuff only one certificate
and it aint self signed.
.IP "\fBX509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long\fR" 4
.IX Item "X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long"
the certificate chain length is pimped outa than tha supplied maximum depth. Unused.
.IP "\fBX509_V_ERR_CERT_REVOKED: certificate revoked\fR" 4
.IX Item "X509_V_ERR_CERT_REVOKED: certificate revoked"
the certificate has been revoked.
.IP "\fBX509_V_ERR_INVALID_CA: invalid \s-1CA\s0 certificate\fR" 4
.IX Item "X509_V_ERR_INVALID_CA: invalid CA certificate"
a \s-1CA\s0 certificate is invalid. Y'all KNOW dat shit, muthafucka! Either it aint a \s-1CA\s0 or its extensions is not
consistent wit tha supplied purpose.
.IP "\fBX509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded\fR" 4
.IX Item "X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded"
the basicConstraints pathlength parameta has been exceeded.
.IP "\fBX509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose\fR" 4
.IX Item "X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose"
the supplied certificate cannot be used fo' tha specified purpose.
.IP "\fBX509_V_ERR_CERT_UNTRUSTED: certificate not trusted\fR" 4
.IX Item "X509_V_ERR_CERT_UNTRUSTED: certificate not trusted"
the root \s-1CA\s0 aint marked as trusted fo' tha specified purpose.
.IP "\fBX509_V_ERR_CERT_REJECTED: certificate rejected\fR" 4
.IX Item "X509_V_ERR_CERT_REJECTED: certificate rejected"
the root \s-1CA\s0 is marked ta reject tha specified purpose.
.IP "\fBX509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch\fR" 4
.IX Item "X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch"
the current muthafucka issuer certificate was rejected cuz its subject name
did not match tha issuer name of tha current certificate. This is only set
if issuer check debuggin is enabled it is used fo' status notification and
is \fBnot\fR up in itself a error.
.IP "\fBX509_V_ERR_AKID_SKID_MISMATCH: authoritizzle n' subject key identifier mismatch\fR" 4
.IX Item "X509_V_ERR_AKID_SKID_MISMATCH: authoritizzle n' subject key identifier mismatch"
the current muthafucka issuer certificate was rejected cuz its subject key
identifier was present n' did not match tha authoritizzle key identifier current
certificate. This is only set if issuer check debuggin is enabled it is used
for status notification n' is \fBnot\fR up in itself a error.
.IP "\fBX509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authoritizzle n' issuer serial number mismatch\fR" 4
.IX Item "X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authoritizzle n' issuer serial number mismatch"
the current muthafucka issuer certificate was rejected cuz its issuer name
and serial number was present n' did not match tha authoritizzle key identifier of
the current certificate. This is only set if issuer check debuggin is enabled
it is used fo' status notification n' is \fBnot\fR up in itself a error.
.IP "\fBX509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage do not include certificate signing\fR" 4
.IX Item "X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage do not include certificate signing"
the current muthafucka issuer certificate was rejected cuz its keyUsage
extension do not permit certificate signing. This is only set if issuer check
debuggin is enabled it is used fo' status notification n' is \fBnot\fR up in itself
an error.
.IP "\fBX509_V_ERR_INVALID_EXTENSION: invalid or inconsistent certificate extension\fR" 4
.IX Item "X509_V_ERR_INVALID_EXTENSION: invalid or inconsistent certificate extension"
A certificate extension had a invalid value (for example a incorrect
encoding) or some value inconsistent wit other extensions.
.IP "\fBX509_V_ERR_INVALID_POLICY_EXTENSION: invalid or inconsistent certificate policy extension\fR" 4
.IX Item "X509_V_ERR_INVALID_POLICY_EXTENSION: invalid or inconsistent certificate policy extension"
A certificate policies extension had a invalid value (for example a incorrect
encoding) or some value inconsistent wit other extensions. This error only
occurs if policy processin is enabled.
.IP "\fBX509_V_ERR_NO_EXPLICIT_POLICY: no explicit policy\fR" 4
.IX Item "X509_V_ERR_NO_EXPLICIT_POLICY: no explicit policy"
Da verification flags was set ta require n' explicit policy but none was
present.
.IP "\fBX509_V_ERR_DIFFERENT_CRL_SCOPE: Different \s-1CRL\s0 scope\fR" 4
.IX Item "X509_V_ERR_DIFFERENT_CRL_SCOPE: Different CRL scope"
Da only CRLs dat could be found did not match tha scope of tha certificate.
.IP "\fBX509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE: Unsupported extension feature\fR" 4
.IX Item "X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE: Unsupported extension feature"
Some feature of a cold-ass lil certificate extension aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Unused.
.IP "\fBX509_V_ERR_PERMITTED_VIOLATION: permitted subtree violation\fR" 4
.IX Item "X509_V_ERR_PERMITTED_VIOLATION: permitted subtree violation"
A name constraint violation occured up in tha permitted subtrees.
.IP "\fBX509_V_ERR_EXCLUDED_VIOLATION: excluded subtree violation\fR" 4
.IX Item "X509_V_ERR_EXCLUDED_VIOLATION: excluded subtree violation"
A name constraint violation occured up in tha excluded subtrees.
.IP "\fBX509_V_ERR_SUBTREE_MINMAX: name constraints minimum n' maximum not supported\fR" 4
.IX Item "X509_V_ERR_SUBTREE_MINMAX: name constraints minimum n' maximum not supported"
A certificate name constraints extension included a minimum or maximum field:
this aint supported.
.IP "\fBX509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: unsupported name constraint type\fR" 4
.IX Item "X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: unsupported name constraint type"
An unsupported name constraint type was encountered. Y'all KNOW dat shit, muthafucka! OpenSSL currently only
supports directory name, \s-1DNS\s0 name, email n' \s-1URI\s0 types.
.IP "\fBX509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: unsupported or invalid name constraint syntax\fR" 4
.IX Item "X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: unsupported or invalid name constraint syntax"
Da format of tha name constraint aint recognised: fo' example a email
address format of a gangbangin' form not mentioned up in \s-1RFC3280.\s0 This could be caused by
a garbage extension or some freshly smoked up feature not currently supported.
.IP "\fBX509_V_ERR_CRL_PATH_VALIDATION_ERROR: \s-1CRL\s0 path validation error\fR" 4
.IX Item "X509_V_ERR_CRL_PATH_VALIDATION_ERROR: CRL path validation error"
An error occured when attemptin ta verify tha \s-1CRL\s0 path. This error can only
happen if extended \s-1CRL\s0 checkin is enabled.
.IP "\fBX509_V_ERR_APPLICATION_VERIFICATION: application verification failure\fR" 4
.IX Item "X509_V_ERR_APPLICATION_VERIFICATION: application verification failure"
an application specific error. Shiiit, dis aint no joke. This aint NEVER gonna be returned unless explicitly
set by a application.
.SH "NOTES"
.IX Header "NOTES"
Da above functions should be used instead of directly referencin tha fields
in tha \fBX509_VERIFY_CTX\fR structure.
.PP
In versionz of OpenSSL before 1.0 tha current certificate returned by
\&\fIX509_STORE_CTX_get_current_cert()\fR was never \fB\s-1NULL\s0\fR fo' realz. Applications should
check tha return value before printin up any debuggin shiznit relating
to tha current certificate.
.PP
If a unrecognised error code is passed ta \fIX509_verify_cert_error_string()\fR the
numerical value of tha unknown code is returned up in a static buffer n' shit. This is not
thread safe but aint NEVER gonna happen unless a invalid code is passed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIX509_verify_cert\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\s-1TBA\s0
