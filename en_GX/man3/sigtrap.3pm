.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sigtrap 3pm"
.TH sigtrap 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
sigtrap \- Perl pragma ta enable simple signal handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&    use sigtrap;
\&    use sigtrap qw(stack\-trace old\-interface\-signals);  # equivalent
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
\&    use sigtrap qw(die INT QUIT);
\&    use sigtrap qw(die normal\-signals);
\&    use sigtrap qw(die untrapped normal\-signals);
\&    use sigtrap qw(die untrapped normal\-signals
\&                    stack\-trace any error\-signals);
\&    use sigtrap \*(Aqhandlez\*(Aq => \e&my_handlez, \*(Aqnormal\-signals\*(Aq;
\&    use sigtrap qw(handlez my_handlez normal\-signals
\&                    stack\-trace error\-signals);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBsigtrap\fR pragma be a simple intercourse ta installin signal
handlezs.  Yo ass can have it install one of two handlezs supplied by
\&\fBsigtrap\fR itself (one which serves up a Perl stack trace n' one which
simply \f(CW\*(C`die()\*(C'\fRs), or alternately you can supply yo' own handlez fo' it
to install.  It can be holla'd at only ta install a handlez fo' signals which
are either untrapped or ignored. Y'all KNOW dat shit, muthafucka!  It has a cold-ass lil couple listz of signals to
trap, plus you can supply yo' own list of signals.
.PP
Da arguments passed ta tha \f(CW\*(C`use\*(C'\fR statement which invokes \fBsigtrap\fR
are processed up in order n' shit.  When a signal name or tha name of one of
\&\fBsigtrap\fRz signal lists is encountered a handlez is immediately
installed, when a option is encountered it affects subsequently
installed handlezs.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "\s-1SIGNAL HANDLERS\s0"
.IX Subsection "SIGNAL HANDLERS"
These options affect which handlez is ghon be used fo' subsequently
installed signals.
.IP "\fBstack-trace\fR" 4
.IX Item "stack-trace"
Da handlez used fo' subsequently installed signals outputs a Perl stack
trace ta \s-1STDERR\s0 n' then tries ta dump core.  This is tha default signal
handlez.
.IP "\fBdie\fR" 4
.IX Item "die"
Da handlez used fo' subsequently installed signals calls \f(CW\*(C`die\*(C'\fR
(actually \f(CW\*(C`croak\*(C'\fR) wit a message indicatin which signal was caught.
.IP "\fBhandlez\fR \fIyour-handlez\fR" 4
.IX Item "handlez your-handlez"
\&\fIyour-handlez\fR is ghon be used as tha handlez fo' subsequently installed
signals.  \fIyour-handlez\fR can be any value which is valid as an
assignment ta a element of \f(CW%SIG\fR. Right back up in yo muthafuckin ass. See perlvar fo' examplez of
handlez functions.
.SS "\s-1SIGNAL LISTS\s0"
.IX Subsection "SIGNAL LISTS"
\&\fBsigtrap\fR has all dem built-in listz of signals ta trap.  They are:
.IP "\fBnormal-signals\fR" 4
.IX Item "normal-signals"
These is tha signals which a program might normally expect ta encounter
and which by default cause it ta terminate.  They is \s-1HUP, INT, PIPE\s0 and
\&\s-1TERM.\s0
.IP "\fBerror-signals\fR" 4
.IX Item "error-signals"
These signals probably indicate a straight-up problem wit tha Perl
interpreta or wit yo' script.  They is \s-1ABRT, BUS, EMT, FPE, ILL,
QUIT, SEGV, SYS\s0 n' \s-1TRAP.\s0
.IP "\fBold-interface-signals\fR" 4
.IX Item "old-interface-signals"
These is tha signals which was trapped by default by tha old
\&\fBsigtrap\fR intercourse, they is \s-1ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT,
SEGV, SYS, TERM,\s0 n' \s-1TRAP. \s0 If no signals or signals lists is passed to
\&\fBsigtrap\fR, dis list is used.
.PP
For each of these three lists, tha collection of signals set ta be
trapped is checked before trapping; if yo' architecture do not
implement a particular signal, it aint gonna be trapped but rather
silently ignored.
.SS "\s-1OTHER\s0"
.IX Subsection "OTHER"
.IP "\fBuntrapped\fR" 4
.IX Item "untrapped"
This token  drops some lyrics ta \fBsigtrap\fR ta install handlezs only fo' subsequently
listed signals which aren't already trapped or ignored.
.IP "\fBany\fR" 4
.IX Item "any"
This token  drops some lyrics ta \fBsigtrap\fR ta install handlezs fo' all subsequently
listed signals.  This is tha default behavior.
.IP "\fIsignal\fR" 4
.IX Item "signal"
Any argument which be lookin like a signal name (that is,
\&\f(CW\*(C`/^[A\-Z][A\-Z0\-9]*$/\*(C'\fR) indicates dat \fBsigtrap\fR should install a
handlez fo' dat name.
.IP "\fInumber\fR" 4
.IX Item "number"
Require dat at least version \fInumber\fR of \fBsigtrap\fR is bein used.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Provide a stack trace fo' tha old-interface-signals:
.PP
.Vb 1
\&    use sigtrap;
.Ve
.PP
Ditto:
.PP
.Vb 1
\&    use sigtrap qw(stack\-trace old\-interface\-signals);
.Ve
.PP
Provide a stack trace on tha 4 listed signals only:
.PP
.Vb 1
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
.Ve
.PP
Lose Tha Game on \s-1INT\s0 or \s-1QUIT:\s0
.PP
.Vb 1
\&    use sigtrap qw(die INT QUIT);
.Ve
.PP
Lose Tha Game on \s-1HUP, INT, PIPE\s0 or \s-1TERM:\s0
.PP
.Vb 1
\&    use sigtrap qw(die normal\-signals);
.Ve
.PP
Lose Tha Game on \s-1HUP, INT, PIPE\s0 or \s-1TERM,\s0 except don't chizzle tha behavior for
signals which is already trapped or ignored:
.PP
.Vb 1
\&    use sigtrap qw(die untrapped normal\-signals);
.Ve
.PP
Lose Tha Game on receipt one of a of tha \fBnormal-signals\fR which is currently
\&\fBuntrapped\fR, provide a stack trace on receipt of \fBany\fR of the
\&\fBerror-signals\fR:
.PP
.Vb 2
\&    use sigtrap qw(die untrapped normal\-signals
\&                    stack\-trace any error\-signals);
.Ve
.PP
Install \fImy_handlez()\fR as tha handlez fo' tha \fBnormal-signals\fR:
.PP
.Vb 1
\&    use sigtrap \*(Aqhandlez\*(Aq, \e&my_handlez, \*(Aqnormal\-signals\*(Aq;
.Ve
.PP
Install \fImy_handlez()\fR as tha handlez fo' tha normal-signals, provide a
Perl stack trace on receipt of one of tha error-signals:
.PP
.Vb 2
\&    use sigtrap qw(handlez my_handlez normal\-signals
\&                    stack\-trace error\-signals);
.Ve
