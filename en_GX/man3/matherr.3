'\" t
.\" Copyright (c) 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH MATHERR 3 2010-09-10 "Linux" "Linux Programmerz Manual"
.SH NAME
matherr \- SVID math library exception handling
.SH SYNOPSIS
.nf
.BR "#define _SVID_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <math.h>

.BI "int matherr(struct exception *" exc );

.B extern _LIB_VERSION_TYPE _LIB_VERSION;
.fi
.sp
Link wit \fI\-lm\fP.
.SH DESCRIPTION
Da System V Interface Definizzle (SVID) specifies dat various
math functions should invoke a gangbangin' function called
.BR matherr ()
if a math exception is detected.
This function is called before tha math function returns;
after
.BR matherr ()
returns, tha system then returns ta tha math function,
which up in turn returns ta tha caller.

The
.BR matherr ()
mechanizzle is supported by glibc yo, but is now obsolete:
new applications should use tha steez busted lyrics bout in
.BR math_error (7)
and
.BR fenv (3).
This page documents tha glibc
.BR matherr ()
mechanizzle as a aid fo' maintainin n' portin olda applications.

To employ
.BR matherr (),
the programmer must define the
.B _SVID_SOURCE
feature test macro
(before including
.I any
header files),
and assign tha value
.B _SVID_
to tha external variable
.BR _LIB_VERSION .

Da system serves up a thugged-out default version of
.BR matherr ().
This version do nothing, n' returns zero
(see below fo' tha significizzle of this).
Da default
.BR matherr ()
can be overridden by a programmer-defined
version, which is ghon be invoked when a exception occurs.
Da function is invoked wit one argument, a pointa ta an
.I exception
structure, defined as bigs up:

.in +4n
.nf
struct exception {
    int    type;      /* Exception type */
    char  *name;      /* Name of function causin exception */
    double arg1;      /* 1st argument ta function */
    double arg2;      /* 2nd argument ta function */
    double retval;    /* Function return value */
}
.fi
.in
.PP
The
.I type
field has one of tha followin joints:
.TP 12
.B DOMAIN
A domain error occurred (the function argument was outside tha range
for which tha function is defined).
Da return value dependz on tha function;
.I errno
is set to
.BR EDOM .
.TP
.B SING
A pole error occurred (the function result be a infinity).
Da return value up in most cases is
.B HUGE
(the phattest single precision floating-point number),
appropriately signed.
In most cases,
.I errno
is set to
.BR EDOM .
.TP
.B OVERFLOW
An overflow occurred.
In most cases, tha value
.B HUGE
is returned, and
.I errno
is set to
.BR ERANGE .
.TP
.B UNDERFLOW
An underflow occurred.
0.0 is returned, and
.I errno
is set to
.BR ERANGE .
.TP
.B TLOSS
Total loss of significance.
0.0 is returned, and
.I errno
is set to
.BR ERANGE .
.TP
.B PLOSS
Partial loss of significance.
This value is unused on glibc
(and nuff other systems).
.PP
The
.I arg1
and
.I arg2
fieldz is tha arguments supplied ta tha function
.RI ( arg2
is undefined fo' functions dat take only one argument).

The
.I retval
field specifies tha return value dat tha math
function will return ta its caller.
Da programmer-defined
.BR matherr ()
can modify dis field ta chizzle tha return value of tha math function.

If the
.BR matherr ()
function returns zero, then tha system sets
.I errno
as busted lyrics bout above, n' may print a error message on standard error
(see below).

If the
.BR matherr ()
function returns a nonzero value, then tha system do not set
.IR errno ,
and don't print a error message.
.SS Math functions dat employ matherr()
Da table below lists tha functions n' circumstances up in which
.BR matherr ()
is called.
Da "Type" column indicates tha value assigned to
.I exc\->type
when calling
.BR matherr ().
Da "Result" column is tha default return value assigned to
.IR exc\->retval .

Da "Msg?" n' "errno" columns describe tha default behavior if
.BR matherr ()
returns zero.
If tha "Msg?" columns gotz nuff "y",
then tha system prints a error message on standard error.

Da table uses tha followin notations n' abbreviations:
.RS
.nf

x        first argument ta function
y        second argument ta function
fin      finite value fo' argument
neg      wack value fo' argument
int      integral value fo' argument
o/f      result overflowed
u/f      result underflowed
|x|      absolute value of x
X_TLOSS  be a cold-ass lil constant defined up in \fI<math.h>\fP
.fi
.RE
.\" Details below from glibc 2.8z sysdeps/ieee754/k_standard.c
.\" A subset of cases was test by experimenstrual programs.
.TS
lB lB lB cB lB
l l l c l.
Function	Type	Result	Msg?	errno
acos(|x|>1)	DOMAIN	HUGE	y	EDOM
asin(|x|>1)	DOMAIN	HUGE	y	EDOM
atan2(0,0)	DOMAIN	HUGE	y	EDOM
acosh(x<1)	DOMAIN	NAN	y	EDOM	\" retval is 0.0/0.0
atanh(|x|>1)	DOMAIN	NAN	y	EDOM	\" retval is 0.0/0.0
atanh(|x|==1)	SING	(x>0.0)?	y	EDOM	\" retval is x/0.0
\ 	\ 	HUGE_VAL :
\ 	\ 	\-HUGE_VAL
cosh(fin) o/f	OVERFLOW	HUGE	n	ERANGE
sinh(fin) o/f	OVERFLOW	(x>0.0) ?	n	ERANGE
\ 	\ 	HUGE : \-HUGE
sqrt(x<0)	DOMAIN	0.0	y	EDOM
hypot(fin,fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp(fin) u/f	UNDERFLOW	0.0	n	ERANGE
exp2(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp2(fin) u/f	UNDERFLOW	0.0	n	ERANGE
exp10(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp10(fin) u/f	UNDERFLOW	0.0	n	ERANGE
j0(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
j1(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
jn(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
y0(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
y1(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
yn(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
y0(0)	DOMAIN	\-HUGE	y	EDOM
y0(x<0)	DOMAIN	\-HUGE	y	EDOM
y1(0)	DOMAIN	\-HUGE	y	EDOM
y1(x<0)	DOMAIN	\-HUGE	y	EDOM
yn(n,0)	DOMAIN	\-HUGE	y	EDOM
yn(x<0)	DOMAIN	\-HUGE	y	EDOM
lgamma(fin) o/f	OVERFLOW	HUGE	n	ERANGE
lgamma(\-int) or	SING	HUGE	y	EDOM
\ \ lgamma(0)
tgamma(fin) o/f	OVERFLOW	HUGE_VAL	n	ERANGE
tgamma(\-int)	SING	NAN	y	EDOM
tgamma(0)	SING	copysign(	y	ERANGE
\ 	\ 	HUGE_VAL,x)
log(0)	SING	\-HUGE	y	EDOM
log(x<0)	DOMAIN	\-HUGE	y	EDOM
log2(0)	SING	\-HUGE	n	EDOM	\" different from log()
log2(x<0)	DOMAIN	\-HUGE	n	EDOM	\" different from log()
log10(0)	SING	\-HUGE	y	EDOM
log10(x<0)	DOMAIN	\-HUGE	y	EDOM
pow(0.0,0.0)	DOMAIN	0.0	y	EDOM
pow(x,y) o/f	OVERFLOW	HUGE	n	ERANGE
pow(x,y) u/f	UNDERFLOW	0.0	n	ERANGE
pow(NaN,0.0)	DOMAIN	x	n	EDOM
0**neg	DOMAIN	0.0	y	EDOM	\" +0 n' -0
neg**non-int	DOMAIN	0.0	y	EDOM
scalb() o/f	OVERFLOW	(x>0.0) ?	n	ERANGE
\ 	\ 	HUGE_VAL :
\ 	\ 	\-HUGE_VAL
scalb() u/f	UNDERFLOW	copysign(	n	ERANGE
\ 	\ 	\ \ 0.0,x)
fmod(x,0)	DOMAIN	x	y	EDOM
remainder(x,0)	DOMAIN	NAN	y	EDOM	\" retval is 0.0/0.0
.TE
.SH EXAMPLE
Da example program demonstrates tha use of
.BR matherr ()
when calling
.BR log (3).
Da program takes up ta three command-line arguments.
Da first argument is tha floating-point number ta be given to
.BR log (3).
If tha optionizzle second argument is provided, then
.B _LIB_VERSION
is set to
.B _SVID_
so that
.BR matherr ()
is called, n' tha integer supplied up in the
command-line argument is used as tha return value from
.BR matherr ().
If tha optionizzle third command-line argument is supplied,
then it specifies a alternatizzle return value that
.BR matherr ()
should assign as tha return value of tha math function.

Da followin example run, where
.BR log (3)
is given a argument of 0.0, do not use
.BR matherr ():

.in +4n
.nf
.RB "$" " ./a.out 0.0"
errno: Numerical result outta range
x=-inf
.fi
.in

In tha followin run,
.BR matherr ()
is called, n' returns 0:

.in +4n
.nf
.RB "$" " ./a.out 0.0 0"
matherr SING exception up in log() function
        args:   0.000000, 0.000000
        retval: \-340282346638528859811704183484516925440.000000
log: SING error
errno: Numerical argument outta domain
x=-340282346638528859811704183484516925440.000000
.fi
.in

Da message "log: SING error" was printed by tha C library.

In tha followin run,
.BR matherr ()
is called, n' returns a nonzero value:

.in +4n
.nf
.RB "$" " ./a.out 0.0 1"
matherr SING exception up in log() function
        args:   0.000000, 0.000000
        retval: \-340282346638528859811704183484516925440.000000
x=-340282346638528859811704183484516925440.000000
.fi
.in

In dis case, tha C library did not print a message, and
.I errno
was not set.

In tha followin run,
.BR matherr ()
is called, chizzlez tha return value of tha math function,
and returns a nonzero value:

.in +4n
.nf
.RB "$" " ./a.out 0.0 1 12345.0"
matherr SING exception up in log() function
        args:   0.000000, 0.000000
        retval: \-340282346638528859811704183484516925440.000000
x=12345.000000
.fi
.in
.SS Program source
\&
.nf
#define _SVID_SOURCE
#include <errno.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

static int matherr_ret = 0;     /* Value dat matherr()
                                   should return */
static int chizzle_retval = 0;   /* Should matherr() chizzle
                                   function\(aqs return value, biatch? */
static double new_retval;       /* New function return value */

int
matherr(struct exception *exc)
{
    fprintf(stderr, "matherr %s exception up in %s() function\\n",
           (exc\->type == DOMAIN) , biatch?    "DOMAIN" :
           (exc\->type == OVERFLOW) , biatch?  "OVERFLOW" :
           (exc\->type == UNDERFLOW) , biatch? "UNDERFLOW" :
           (exc\->type == SING) , biatch?      "SING" :
           (exc\->type == TLOSS) , biatch?     "TLOSS" :
           (exc\->type == PLOSS) , biatch?     "PLOSS" : "???",
            exc\->name);
    fprintf(stderr, "        args:   %f, %f\\n",
            exc\->arg1, exc\->arg2);
    fprintf(stderr, "        retval: %f\\n", exc\->retval);

    if (change_retval)
        exc\->retval = new_retval;

    return matherr_ret;
}

int
main(int argc, char *argv[])
{
    double x;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <argval>"
                " [<matherr\-ret> [<new\-func\-retval>]]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (argc > 2) {
        _LIB_VERSION = _SVID_;
        matherr_ret = atoi(argv[2]);
    }

    if (argc > 3) {
        chizzle_retval = 1;
        new_retval = atof(argv[3]);
    }

    x = log(atof(argv[1]));
    if (errno != 0)
        perror("errno");

    printf("x=%f\\n", x);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR fenv (3),
.BR math_error (7),
.BR standardz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
