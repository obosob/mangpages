'\"
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_StringObj 3 8.1 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_NewStringObj, Tcl_NewUnicodeObj, Tcl_SetStringObj, Tcl_SetUnicodeObj, Tcl_GetStringFromObj, Tcl_GetString, Tcl_GetUnicodeFromObj, Tcl_GetUnicode, Tcl_GetUniChar, Tcl_GetCharLength, Tcl_GetRange, Tcl_AppendToObj, Tcl_AppendUnicodeToObj, Tcl_AppendObjToObj, Tcl_AppendStringsToObj, Tcl_AppendStringsToObjVA, Tcl_AppendLimitedToObj, Tcl_Format, Tcl_AppendFormatToObj, Tcl_ObjPrintf, Tcl_AppendPrintfToObj, Tcl_SetObjLength, Tcl_AttemptSetObjLength, Tcl_ConcatObj \- manipulate Tcl objects as strings
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Obj *
\fBTcl_NewStringObj\fR(\fIbytes, length\fR)
.sp
Tcl_Obj *
\fBTcl_NewUnicodeObj\fR(\fIunicode, numChars\fR)
.sp
void
\fBTcl_SetStringObj\fR(\fIobjPtr, bytes, length\fR)
.sp
void
\fBTcl_SetUnicodeObj\fR(\fIobjPtr, unicode, numChars\fR)
.sp
char *
\fBTcl_GetStringFromObj\fR(\fIobjPtr, lengthPtr\fR)
.sp
char *
\fBTcl_GetString\fR(\fIobjPtr\fR)
.sp
Tcl_UniChar *
\fBTcl_GetUnicodeFromObj\fR(\fIobjPtr, lengthPtr\fR)
.sp
Tcl_UniChar *
\fBTcl_GetUnicode\fR(\fIobjPtr\fR)
.sp
Tcl_UniChar
\fBTcl_GetUniChar\fR(\fIobjPtr, index\fR)
.sp
int
\fBTcl_GetCharLength\fR(\fIobjPtr\fR)
.sp
Tcl_Obj *
\fBTcl_GetRange\fR(\fIobjPtr, first, last\fR)
.sp
void
\fBTcl_AppendToObj\fR(\fIobjPtr, bytes, length\fR)
.sp
void
\fBTcl_AppendUnicodeToObj\fR(\fIobjPtr, unicode, numChars\fR)
.sp
void
\fBTcl_AppendObjToObj\fR(\fIobjPtr, appendObjPtr\fR)
.sp
void
\fBTcl_AppendStringsToObj\fR(\fIobjPtr, string, string, ... \fB(char *) NULL\fR)
.sp
void
\fBTcl_AppendStringsToObjVA\fR(\fIobjPtr, argList\fR)
.VS 8.5
.sp
void
\fBTcl_AppendLimitedToObj\fR(\fIobjPtr, bytes, length, limit, ellipsis\fR)
.sp
Tcl_Obj *
\fBTcl_Format\fR(\fIinterp, format, objc, objv\fR)
.sp
int
\fBTcl_AppendFormatToObj\fR(\fIinterp, objPtr, format, objc, objv\fR)
.sp
Tcl_Obj *
\fBTcl_ObjPrintf\fR(\fIformat, ...\fR)
.sp
int
\fBTcl_AppendPrintfToObj\fR(\fIobjPtr, format, ...\fR)
.VE 8.5
.sp
void
\fBTcl_SetObjLength\fR(\fIobjPtr, newLength\fR)
.sp
int
\fBTcl_AttemptSetObjLength\fR(\fIobjPtr, newLength\fR)
.sp
Tcl_Obj *
\fBTcl_ConcatObj\fR(\fIobjc, objv\fR)
.SH ARGUMENTS
.AS "const Tcl_UniChar" *appendObjPtr in/out
.AP "const char" *bytes in
Points ta tha straight-up original gangsta byte of a array of UTF-8-encoded bytes
used ta set or append ta a strang object.
This byte array may contain embedded null characters
unless \fInumChars\fR is negative.  (Applications needin null bytes
should represent dem as tha two-byte sequence \fI\e700\e600\fR, use
\fBTcl_ExternalToUtf\fR ta convert, or \fBTcl_NewByteArrayObj\fR if
the strang be a cold-ass lil collection of uninterpreted bytes.)
.AP int length in
Da number of bytes ta copy from \fIbytes\fR when
initializing, setting, or appendin ta a strang object.
If negative, all bytes up ta tha straight-up original gangsta null is used.
.AP "const Tcl_UniChar" *unicode in
Points ta tha straight-up original gangsta byte of a array of Unicode characters
used ta set or append ta a strang object.
This byte array may contain embedded null characters
unless \fInumChars\fR is negative.
.AP int numChars in
Da number of Unicode charactas ta copy from \fIunicode\fR when
initializing, setting, or appendin ta a strang object.
If negative, all charactas up ta tha straight-up original gangsta null characta is used.
.AP int index in
Da index of tha Unicode characta ta return.
.AP int first in
Da index of tha straight-up original gangsta Unicode characta up in tha Unicode range ta be
returned as a freshly smoked up object.
.AP int last in
Da index of tha last Unicode characta up in tha Unicode range ta be
returned as a freshly smoked up object.
.AP Tcl_Obj *objPtr in/out
Points ta a object ta manipulate.
.AP Tcl_Obj *appendObjPtr in
Da object ta append ta \fIobjPtr\fR up in \fBTcl_AppendObjToObj\fR.
.AP int *lengthPtr out
If non-NULL, tha location where \fBTcl_GetStringFromObj\fR will store
the length of a objectz strang representation.
.AP "const char" *strin in
Null-terminated strang value ta append ta \fIobjPtr\fR.
.AP va_list argList in
An argument list which must done been initialised using
\fBva_start\fR, n' cleared rockin \fBva_end\fR.
.AP int limit in
Maximum number of bytes ta be appended.
.AP "const char" *ellipsis in
Suffix ta append when tha limit leadz ta strang truncation.
If NULL is passed then tha suffix "..." is used.
.AP "const char" *format in
Format control strang includin % conversion specifiers.
.AP int objc in
Da number of elements ta format or concatenate.
.AP Tcl_Obj *objv[] in
Da array of objects ta format or concatenate.
.AP int newLength in
New length fo' tha strang value of \fIobjPtr\fR, not includin the
final null character.
.BE

.SH DESCRIPTION
.PP
Da procedures busted lyrics bout up in dis manual entry allow Tcl objects to
be manipulated as strang joints, n' you can put dat on yo' toast.  They use tha internal representation
of tha object ta store additionizzle shiznit ta make tha string
manipulations mo' efficient.  In particular, they cook up a series of
append operations efficient by allocatin extra storage space fo' the
strin so dat it do not gotta be copied fo' each append.
Also, indexin n' length computations is optimized cuz the
Unicode strang representation is calculated n' cached as needed.
When rockin tha \fBTcl_Append*\fR crew of functions where the
interpreterz result is tha object bein appended to, it is blingin
to call Tcl_ResetResult first ta ensure yo ass is not unintentionally
appendin ta existin data up in tha result object.
.PP
\fBTcl_NewStringObj\fR n' \fBTcl_SetStringObj\fR create a freshly smoked up object
or modify a existin object ta hold a cold-ass lil copy of tha strang given by
\fIbytes\fR n' \fIlength\fR.  \fBTcl_NewUnicodeObj\fR and
\fBTcl_SetUnicodeObj\fR create a freshly smoked up object or modify a existing
object ta hold a cold-ass lil copy of tha Unicode strang given by \fIunicode\fR and
\fInumChars\fR.  \fBTcl_NewStringObj\fR n' \fBTcl_NewUnicodeObj\fR
return a pointa ta a newly pimped object wit reference count zero.
All four procedures set tha object ta hold a cold-ass lil copy of tha specified
string.  \fBTcl_SetStringObj\fR n' \fBTcl_SetUnicodeObj\fR free any
old strang representation as well as any oldschool internal representation
of tha object.
.PP
\fBTcl_GetStringFromObj\fR n' \fBTcl_GetString\fR return a object's
strin representation. I aint talkin' bout chicken n' gravy biatch.  This is given by tha returned byte pointa and
(for \fBTcl_GetStringFromObj\fR) length, which is stored in
\fIlengthPtr\fR if it is non-NULL.  If tha objectz UTF string
representation is invalid (its byte pointa is NULL), tha string
representation is regenerated from tha objectz internal
representation. I aint talkin' bout chicken n' gravy biatch.  Da storage referenced by tha returned byte pointer
is owned by tha object manager n' shit.  It be passed back as a writable
pointa so dat extension lyricist bustin they own \fBTcl_ObjType\fR
will be able ta modify tha strang representation within the
\fBTcl_UpdateStringProc\fR of they \fBTcl_ObjType\fR.  Except fo' that
limited purpose, tha pointa returned by \fBTcl_GetStringFromObj\fR
or \fBTcl_GetString\fR should be treated as read-only.  It is
recommended dat dis pointa be assigned ta a (const char *) variable.
Even up in tha limited thangs where freestylin ta dis pointa is
acceptable, one should take care ta respect tha copy-on-write
semantics required by \fBTcl_Obj\fR's, wit appropriate calls
to \fBTcl_IsShared\fR n' \fBTcl_DuplicateObj\fR prior ta any
in-place modification of tha strang representation.
Da procedure \fBTcl_GetString\fR is used up in tha common case
where tha calla do not need tha length of tha string
representation.
.PP
\fBTcl_GetUnicodeFromObj\fR n' \fBTcl_GetUnicode\fR return a object's
value as a Unicode string.  This is given by tha returned pointa and
(for \fBTcl_GetUnicodeFromObj\fR) length, which is stored in
\fIlengthPtr\fR if it is non-NULL.  Da storage referenced by tha returned
byte pointa is owned by tha object manager n' should not be modified by
the calla n' shit.  Da procedure \fBTcl_GetUnicode\fR is used up in tha common case
where tha calla do not need tha length of tha unicode string
representation.
.PP
\fBTcl_GetUniChar\fR returns tha \fIindex\fR'th characta up in the
objectz Unicode representation.
.PP
\fBTcl_GetRange\fR returns a newly pimped object comprised of the
charactas between \fIfirst\fR n' \fIlast\fR (inclusive) up in the
objectz Unicode representation. I aint talkin' bout chicken n' gravy biatch.  If tha objectz Unicode
representation is invalid, tha Unicode representation is regenerated
from tha objectz strang representation.
.PP
\fBTcl_GetCharLength\fR returns tha number of charactas (as opposed
to bytes) up in tha strang object.
.PP
\fBTcl_AppendToObj\fR appendz tha data given by \fIbytes\fR and
\fIlength\fR ta tha strang representation of tha object specified by
\fIobjPtr\fR.  If tha object has a invalid strang representation,
then a attempt is made ta convert \fIbytes\fR is ta tha Unicode
format.  If tha conversion is successful, then tha converted form of
\fIbytes\fR be appended ta tha objectz Unicode representation.
Otherwise, tha objectz Unicode representation is invalidated and
converted ta tha UTF format, n' \fIbytes\fR be appended ta the
objectz freshly smoked up strang representation.
.PP
\fBTcl_AppendUnicodeToObj\fR appendz tha Unicode strang given by
\fIunicode\fR n' \fInumChars\fR ta tha object specified by
\fIobjPtr\fR.  If tha object has a invalid Unicode representation,
then \fIunicode\fR is converted ta tha UTF format n' appended ta the
objectz strang representation. I aint talkin' bout chicken n' gravy biatch.  Appendz is optimized ta handle
repeated appendz relatively efficiently (it overallocates tha string
or Unicode space ta avoid repeated reallocations n' copies of
objectz strang value).
.PP
\fBTcl_AppendObjToObj\fR is similar ta \fBTcl_AppendToObj\fR yo, but it
appendz tha strang or Unicode value (whichever exists n' is best
suited ta be appended ta \fIobjPtr\fR) of \fIappendObjPtr\fR to
\fIobjPtr\fR.
.PP
\fBTcl_AppendStringsToObj\fR is similar ta \fBTcl_AppendToObj\fR
except dat it can be passed mo' than one value ta append and
each value must be a null-terminated strang (i.e. none of the
values may contain internal null characters).  Any number of
\fIstring\fR arguments may be provided yo, but tha last argument
must be a NULL pointa ta indicate tha end of tha list.
.PP
\fBTcl_AppendStringsToObjVA\fR is tha same ol' dirty as \fBTcl_AppendStringsToObj\fR
except dat instead of takin a variable number of arguments it takes an
argument list.
.PP
.VS 8.5
\fBTcl_AppendLimitedToObj\fR is similar ta \fBTcl_AppendToObj\fR
except dat it imposes a limit on how tha fuck nuff bytes is appended.
This can be handy when tha strang ta be appended might be
very big-ass yo, but tha value bein constructed should not be allowed ta grow
without bound. Y'all KNOW dat shit, muthafucka! A common usage is when constructin a error message, where the
end result should be kept short enough ta be read.
Bytes from \fIbytes\fR is appended ta \fIobjPtr\fR yo, but no more
than \fIlimit\fR bytes total is ta be appended. Y'all KNOW dat shit, muthafucka! If tha limit prevents
all \fIlength\fR bytes dat is available from bein appended, then the
appendin is done so dat tha last bytes appended is from the
strin \fIellipsis\fR. This allows fo' a indication of tha truncation
to be left up in tha string.
When \fIlength\fR is \fB-1\fR, all bytes up ta tha straight-up original gangsta zero byte is appended,
subject ta tha limit. When \fIellipsis\fR is NULL, tha default
strin \fB...\fR is used. Y'all KNOW dat shit, muthafucka! When \fIellipsis\fR is non-NULL, it must point
to a zero-byte-terminated strang up in Tclz internal UTF encoding.
Da number of bytes appended can be less than tha lesser
of \fIlength\fR n' \fIlimit\fR when appendin fewer
bytes is necessary ta append only whole multi-byte characters.
.PP
\fBTcl_Format\fR is tha C-level intercourse ta tha engine of tha \fBformat\fR
command. Y'all KNOW dat shit, muthafucka!  Da actual command procedure fo' \fBformat\fR is lil more
than
.CS
Tcl_Format(interp, Tcl_GetString(objv[1]), objc-2, objv+2);
.CE
Da \fIobjc\fR Tcl_Obj joints up in \fIobjv\fR is formatted tha fuck into a string
accordin ta tha conversion justification up in \fIformat\fR argument, following
the documentation fo' tha \fBformat\fR command. Y'all KNOW dat shit, muthafucka!  Da resultin formatted
strin is converted ta a freshly smoked up Tcl_Obj wit refcount of zero n' returned.
If some error happens durin thang of tha formatted string, NULL is
returned, n' a error message is recorded up in \fIinterp\fR, if \fIinterp\fR
is non-NULL.
.PP
\fBTcl_AppendFormatToObj\fR be a appendin alternatizzle form
of \fBTcl_Format\fR wit functionalitizzle equivalent to
.CS
Tcl_Obj *newPtr = Tcl_Format(interp, format, objc, objv);
if (newPtr == NULL) return TCL_ERROR;
Tcl_AppendObjToObj(objPtr, newPtr);
return TCL_OK;
.CE
but wit pimped outa convenience n' efficiency when tha appending
functionalitizzle is needed.
.PP
\fBTcl_ObjPrintf\fR serves as a replacement fo' tha common sequence
.CS
char buf[SOME_SUITABLE_LENGTH];
sprintf(buf, format, ...);
Tcl_NewStringObj(buf, -1);
.CE
but wit pimped outa convenience n' no need ta 
determine \fBSOME_SUITABLE_LENGTH\fR. Da formattin is done wit tha same
core formattin engine used by \fBTcl_Format\fR.  This means tha set of
supported conversion specifiers is dat of tha \fBformat\fR command and
not dat of tha \fBsprintf\fR routine where tha two sets differ n' shit. When a
conversion specifier passed ta \fBTcl_ObjPrintf\fR includes a precision,
the value is taken as a fuckin shitload of bytes, as \fBsprintf\fR do, n' not
as a fuckin shitload of characters, as \fBformat\fR do.  This is done on the
assumption dat C code is mo' likely ta know how tha fuck nuff bytes it is
passin round than tha number of encoded charactas dem bytes happen
to represent.  Da variable number of arguments passed up in should be of
the types dat would be suitable fo' passin ta \fBsprintf\fR.  Note in
this example usage, \fIx\fR iz of type \fBlong\fR.
.CS
long x = 5;
Tcl_Obj *objPtr = Tcl_ObjPrintf("Value is %d", x);
.CE
If tha value of \fIformat\fR gotz nuff internal inconsistencies or invalid
specifier formats, tha formatted strang result produced by
\fBTcl_ObjPrintf\fR is ghon be a error message describin tha error.
.PP
\fBTcl_AppendPrintfToObj\fR be a appendin alternatizzle form
of \fBTcl_ObjPrintf\fR wit functionalitizzle equivalent to
.CS
Tcl_AppendObjToObj(objPtr, Tcl_ObjPrintf(format, ...));
.CE
but wit pimped outa convenience n' efficiency when tha appending
functionalitizzle is needed.
.VE 8.5
.PP
Da \fBTcl_SetObjLength\fR procedure chizzlez tha length of the
strin value of its \fIobjPtr\fR argument.  If tha \fInewLength\fR
argument is pimped outa than tha space allocated fo' tha object's
string, then tha strang space is reallocated n' tha oldschool value
is copied ta tha freshly smoked up space; tha bytes between tha oldschool length of
the strang n' tha freshly smoked up length may have arbitrary joints.
If tha \fInewLength\fR argument is less than tha current length
of tha objectz string, wit \fIobjPtr->length\fR is reduced without
reallocatin tha strang space; tha original gangsta allocated size fo' the
strin is recorded up in tha object, so dat tha strang length can be
enlarged up in a subsequent call ta \fBTcl_SetObjLength\fR without
reallocatin storage.  In all cases \fBTcl_SetObjLength\fR leaves
a null characta at \fIobjPtr->bytes[newLength]\fR.
.PP
\fBTcl_AttemptSetObjLength\fR is identical up in function to
\fBTcl_SetObjLength\fR except dat if sufficient memory ta satisfy the
request cannot be allocated, it do not cause tha Tcl interpreta to
\fBpanic\fR.  Thus, if \fInewLength\fR is pimped outa than tha space
allocated fo' tha objectz string, n' there aint enough memory
available ta satisfy tha request, \fBTcl_AttemptSetObjLength\fR will take
no action n' return 0 ta indicate failure.  If there is enough memory
to satisfy tha request, \fBTcl_AttemptSetObjLength\fR behaves just like
\fBTcl_SetObjLength\fR n' returns 1 ta indicate success.
.PP
Da \fBTcl_ConcatObj\fR function returns a freshly smoked up strang object whose
value is tha space-separated concatenation of tha string
representationz of all of tha objects up in tha \fIobjv\fR
array. \fBTcl_ConcatObj\fR eliminates leadin n' trailin white space
as it copies tha strang representationz of tha \fIobjv\fR array ta the
result. If a element of tha \fIobjv\fR array consistz of not a god damn thang but
white space, then dat object is ignored entirely. This white-space
removal was added ta make tha output of tha \fBconcat\fR command
cleaner-looking. \fBTcl_ConcatObj\fR returns a pointa ta a
newly-created object whose ref count is zero.

.SH "SEE ALSO"
Tcl_NewObj, Tcl_IncrRefCount, Tcl_DecrRefCount, format, sprintf

.SH KEYWORDS
append, internal representation, object, object type, strang object,
strin type, strang representation, concat, concatenate, unicode
