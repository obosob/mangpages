'\" t
.\"     Title: glVertexAttribPointer
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLVERTEXATTRIBPOINTE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glVertexAttribPointa \- define a array of generic vertex attribute data
.SH "C SPECIFICATION"
.HP \w'void\ glVertexAttribPointer('u
.BI "void glVertexAttribPointer(GLuint\ " "index" ", GLint\ " "size" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLsizei\ " "stride" ", const\ GLvoid\ *\ " "pointer" ");"
.HP \w'void\ glVertexAttribIPointer('u
.BI "void glVertexAttribIPointer(GLuint\ " "index" ", GLint\ " "size" ", GLenum\ " "type" ", GLsizei\ " "stride" ", const\ GLvoid\ *\ " "pointer" ");"
.HP \w'void\ glVertexAttribLPointer('u
.BI "void glVertexAttribLPointer(GLuint\ " "index" ", GLint\ " "size" ", GLenum\ " "type" ", GLsizei\ " "stride" ", const\ GLvoid\ *\ " "pointer" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies tha index of tha generic vertex attribute ta be modified\&.
.RE
.PP
\fIsize\fR
.RS 4
Specifies tha number of components per generic vertex attribute\&. Must be 1, 2, 3, 4\& fo' realz. Additionally, tha symbolic constant
\fBGL_BGRA\fR
is accepted by
\fBglVertexAttribPointer\fR\&. Da initial value is 4\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies tha data type of each component up in tha array\&. Da symbolic constants
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_INT\fR, and
\fBGL_UNSIGNED_INT\fR
are accepted by
\fBglVertexAttribPointer\fR
and
\fBglVertexAttribIPointer\fR\& fo' realz. Additionally
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR,
\fBGL_DOUBLE\fR,
\fBGL_FIXED\fR,
\fBGL_INT_2_10_10_10_REV\fR, and
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
are accepted by
\fBglVertexAttribPointer\fR\&.
\fBGL_DOUBLE\fR
is also accepted by
\fBglVertexAttribLPointer\fR
and is tha only token accepted by the
\fItype\fR
parameta fo' dat function\&. Da initial value is
\fBGL_FLOAT\fR\&.
.RE
.PP
\fInormalized\fR
.RS 4
For
\fBglVertexAttribPointer\fR, specifies whether fixed\-point data joints should be normalized (\fBGL_TRUE\fR) or converted directly as fixed\-point joints (\fBGL_FALSE\fR) when they is accessed\&.
.RE
.PP
\fIstride\fR
.RS 4
Specifies tha byte offset between consecutizzle generic vertex attributes\&. If
\fIstride\fR
is 0, tha generic vertex attributes is understood ta be tightly packed up in tha array\&. Da initial value is 0\&.
.RE
.PP
\fIpointer\fR
.RS 4
Specifies a offset of tha straight-up original gangsta component of tha straight-up original gangsta generic vertex attribute up in tha array up in tha data store of tha buffer currently bound ta the
\fBGL_ARRAY_BUFFER\fR
target\&. Da initial value is 0\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglVertexAttribPointer\fR,
\fBglVertexAttribIPointer\fR
and
\fBglVertexAttribLPointer\fR
specify tha location n' data format of tha array of generic vertex attributes at index
\fIindex\fR
to use when rendering\&.
\fIsize\fR
specifies tha number of components per attribute n' must be 1, 2, 3, 4, or
\fBGL_BGRA\fR\&.
\fItype\fR
specifies tha data type of each component, and
\fIstride\fR
specifies tha byte stride from one attribute ta tha next, allowin vertices n' attributes ta be packed tha fuck into a single array or stored up in separate arrays\&.
.PP
For
\fBglVertexAttribPointer\fR, if
\fInormalized\fR
is set to
\fBGL_TRUE\fR, it indicates dat joints stored up in a integer format is ta be mapped ta tha range [\-1,1] (for signed joints) or [0,1] (for unsigned joints) when they is accessed n' converted ta floatin point\&. Otherwise, joints is ghon be converted ta floats directly without normalization\&.
.PP
For
\fBglVertexAttribIPointer\fR, only tha integer types
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_INT\fR,
\fBGL_UNSIGNED_INT\fR
are accepted\&. Values is always left as integer joints\&.
.PP
\fBglVertexAttribLPointer\fR
specifies state fo' a generic vertex attribute array associated wit a gangbangin' finger-lickin' dirty-ass shader attribute variable declared wit 64\-bit double precision components\&.
\fItype\fR
must be
\fBGL_DOUBLE\fR\&.
\fIindex\fR,
\fIsize\fR, and
\fIstride\fR
behave as busted lyrics bout for
\fBglVertexAttribPointer\fR
and
\fBglVertexAttribIPointer\fR\&.
.PP
If
\fIpointer\fR
is not
NULL, a non\-zero named buffer object must be bound ta the
\fBGL_ARRAY_BUFFER\fR
target (see
\fBglBindBuffer\fR()), otherwise a error is generated\&.
\fIpointer\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&. Da buffer object bindin (\fBGL_ARRAY_BUFFER_BINDING\fR) is saved as generic vertex attribute array state (\fBGL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\fR) fo' index
\fIindex\fR\&.
.PP
When a generic vertex attribute array is specified,
\fIsize\fR,
\fItype\fR,
\fInormalized\fR,
\fIstride\fR, and
\fIpointer\fR
are saved as vertex array state, up in addizzle ta tha current vertex array buffer object binding\&.
.PP
To enable n' disable a generic vertex attribute array, call
\fBglEnableVertexAttribArray\fR()
and
\fBglDisableVertexAttribArray\fR()
with
\fIindex\fR\&. If enabled, tha generic vertex attribute array is used when
\fBglDrawArrays\fR(),
\fBglMultiDrawArrays\fR(),
\fBglDrawElements\fR(),
\fBglMultiDrawElements\fR(), or
\fBglDrawRangeElements\fR()
is called\&.
.SH "NOTES"
.PP
Each generic vertex attribute array is initially disabled n' isn\*(Aqt accessed when
\fBglDrawElements\fR(),
\fBglDrawRangeElements\fR(),
\fBglDrawArrays\fR(),
\fBglMultiDrawArrays\fR(), or
\fBglMultiDrawElements\fR()
is called\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIindex\fR
is pimped outa than or equal to
\fBGL_MAX_VERTEX_ATTRIBS\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIsize\fR
is not 1, 2, 3, 4 or (for
\fBglVertexAttribPointer\fR),
\fBGL_BGRA\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIstride\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIsize\fR
is
\fBGL_BGRA\fR
and
\fItype\fR
is not
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_INT_2_10_10_10_REV\fR
or
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItype\fR
is
\fBGL_INT_2_10_10_10_REV\fR
or
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
and
\fIsize\fR
is not 4 or
\fBGL_BGRA\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated by
\fBglVertexAttribPointer\fR
if
\fIsize\fR
is
\fBGL_BGRA\fR
and
\fInoramlized\fR
is
\fBGL_FALSE\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if zero is bound ta the
\fBGL_ARRAY_BUFFER\fR
buffer object bindin point n' the
\fIpointer\fR
argument is not
\fBNULL\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_VERTEX_ATTRIBS\fR
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_ENABLED\fR
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_SIZE\fR
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_TYPE\fR
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_NORMALIZED\fR
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_STRIDE\fR
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_ARRAY_BUFFER_BINDING\fR
.PP
\fBglGetVertexAttribPointerv\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_POINTER\fR
.SH "SEE ALSO"
.PP
\fBglBindAttribLocation\fR(),
\fBglBindBuffer\fR(),
\fBglDisableVertexAttribArray\fR(),
\fBglDrawArrays\fR(),
\fBglDrawElements\fR(),
\fBglDrawRangeElements\fR(),
\fBglEnableVertexAttribArray\fR(),
\fBglMultiDrawArrays\fR(),
\fBglMultiDrawElements\fR(),
\fBglVertexAttrib\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2005 3Dlabs Inc\&. Ltd\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
