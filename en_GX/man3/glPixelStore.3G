'\" t
.\"     Title: glPixelStore
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLPIXELSTORE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glPixelStore \- set pixel storage modes
.SH "C SPECIFICATION"
.HP \w'void\ glPixelStoref('u
.BI "void glPixelStoref(GLenum\ " "pname" ", GLfloat\ " "param" ");"
.HP \w'void\ glPixelStorei('u
.BI "void glPixelStorei(GLenum\ " "pname" ", GLint\ " "param" ");"
.SH "PARAMETERS"
.PP
\fIpname\fR
.RS 4
Specifies tha symbolic name of tha parameta ta be set\&. Right back up in yo muthafuckin ass. Six joints affect tha packin of pixel data tha fuck into memory:
\fBGL_PACK_SWAP_BYTES\fR,
\fBGL_PACK_LSB_FIRST\fR,
\fBGL_PACK_ROW_LENGTH\fR,
\fBGL_PACK_IMAGE_HEIGHT\fR,
\fBGL_PACK_SKIP_PIXELS\fR,
\fBGL_PACK_SKIP_ROWS\fR,
\fBGL_PACK_SKIP_IMAGES\fR, and
\fBGL_PACK_ALIGNMENT\fR\&. Right back up in yo muthafuckin ass. Six mo' affect tha unpackin of pixel data
\fIfrom\fR
memory:
\fBGL_UNPACK_SWAP_BYTES\fR,
\fBGL_UNPACK_LSB_FIRST\fR,
\fBGL_UNPACK_ROW_LENGTH\fR,
\fBGL_UNPACK_IMAGE_HEIGHT\fR,
\fBGL_UNPACK_SKIP_PIXELS\fR,
\fBGL_UNPACK_SKIP_ROWS\fR,
\fBGL_UNPACK_SKIP_IMAGES\fR, and
\fBGL_UNPACK_ALIGNMENT\fR\&.
.RE
.PP
\fIparam\fR
.RS 4
Specifies tha value that
\fIpname\fR
is set to\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglPixelStore\fR
sets pixel storage modes dat affect tha operation of subsequent
\fBglReadPixels\fR()
as well as tha unpackin of texture patterns (see
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR()),
\fBglCompressedTexImage1D\fR(),
\fBglCompressedTexImage2D\fR(),
\fBglCompressedTexImage3D\fR(),
\fBglCompressedTexSubImage1D\fR(),
\fBglCompressedTexSubImage2D\fR()
or
\fBglCompressedTexSubImage1D\fR()\&.
.PP
\fIpname\fR
is a symbolic constant indicatin tha parameta ta be set, and
\fIparam\fR
is tha freshly smoked up value\&. Right back up in yo muthafuckin ass. Six of tha twelve storage parametas affect how tha fuck pixel data is moonwalked back ta client memory\&. They is as bigs up:
.PP
\fBGL_PACK_SWAP_BYTES\fR
.RS 4
If true, byte orderin fo' multibyte color components, depth components, or stencil indices is reversed\&. That is, if a gangbangin' four\-byte component consistz of bytes
b 0,
b 1,
b 2,
b 3, it is stored up in memory as
b 3,
b 2,
b 1,
b 0
if
\fBGL_PACK_SWAP_BYTES\fR
is true\&.
\fBGL_PACK_SWAP_BYTES\fR
has no effect on tha memory order of components within a pixel, only on tha order of bytes within components or indices\&. For example, tha three componentz of a
\fBGL_RGB\fR
format pixel is always stored wit red first, chronic second, n' blue third, regardless of tha value of
\fBGL_PACK_SWAP_BYTES\fR\&.
.RE
.PP
\fBGL_PACK_LSB_FIRST\fR
.RS 4
If true, bits is ordered within a funky-ass byte from least dope ta most significant; otherwise, tha straight-up original gangsta bit up in each byte is da most thugged-out dope one\&.
.RE
.PP
\fBGL_PACK_ROW_LENGTH\fR
.RS 4
If pimped outa than 0,
\fBGL_PACK_ROW_LENGTH\fR
defines tha number of pixels up in a row\&. If tha straight-up original gangsta pixel of a row is placed at location
p
in memory, then tha location of tha straight-up original gangsta pixel of tha next row is obtained by skipping
.sp
k = n ⁢ l a s ⁢ s ⁢ n ⁢ l a ⁢ s >= a s < a
.sp
components or indices, where
n
is tha number of components or indices up in a pixel,
l
is tha number of pixels up in a row (\fBGL_PACK_ROW_LENGTH\fR
if it is pimped outa than 0, the
width
argument ta tha pixel routine otherwise),
a
is tha value of
\fBGL_PACK_ALIGNMENT\fR, and
s
is tha size, up in bytes, of a single component (if
a < s, then it be as if
a = s)\&. In tha case of 1\-bit joints, tha location of tha next row is obtained by skipping
.sp
k = 8 ⁢ a ⁢ n ⁢ l 8 ⁢ a
.sp
components or indices\&.
.sp
Da word
\fIcomponent\fR
in dis description refers ta tha nonindex joints red, green, blue, alpha, n' depth\&. Right back up in yo muthafuckin ass. Storage format
\fBGL_RGB\fR, fo' example, has three components per pixel: first red, then green, n' finally blue\&.
.RE
.PP
\fBGL_PACK_IMAGE_HEIGHT\fR
.RS 4
If pimped outa than 0,
\fBGL_PACK_IMAGE_HEIGHT\fR
defines tha number of pixels up in a image three\-dimensionizzle texture volume, where ``image\*(Aq\*(Aq is defined by all pixels pluggin tha same third dimension index\&. If tha straight-up original gangsta pixel of a row is placed at location
p
in memory, then tha location of tha straight-up original gangsta pixel of tha next row is obtained by skipping
.sp
k = n ⁢ l ⁢ h a s ⁢ s ⁢ n ⁢ l ⁢ h a ⁢ s >= a s < a
.sp
components or indices, where
n
is tha number of components or indices up in a pixel,
l
is tha number of pixels up in a row (\fBGL_PACK_ROW_LENGTH\fR
if it is pimped outa than 0, the
width
argument to
\fBglTexImage3D\fR()
otherwise),
h
is tha number of rows up in a pixel image (\fBGL_PACK_IMAGE_HEIGHT\fR
if it is pimped outa than 0, the
height
argument ta the
\fBglTexImage3D\fR()
routine otherwise),
a
is tha value of
\fBGL_PACK_ALIGNMENT\fR, and
s
is tha size, up in bytes, of a single component (if
a < s, then it be as if
a = s)\&.
.sp
Da word
\fIcomponent\fR
in dis description refers ta tha nonindex joints red, green, blue, alpha, n' depth\&. Right back up in yo muthafuckin ass. Storage format
\fBGL_RGB\fR, fo' example, has three components per pixel: first red, then green, n' finally blue\&.
.RE
.PP
\fBGL_PACK_SKIP_PIXELS\fR, \fBGL_PACK_SKIP_ROWS\fR, n' \fBGL_PACK_SKIP_IMAGES\fR
.RS 4
These joints is provided as a cold-ass lil convenience ta tha programmer; they provide no functionalitizzle dat cannot be duplicated simply by incrementin tha pointa passed to
\fBglReadPixels\fR()\&. Right back up in yo muthafuckin ass. Setting
\fBGL_PACK_SKIP_PIXELS\fR
to
i
is equivalent ta incrementin tha pointa by
i ⁢ n
components or indices, where
n
is tha number of components or indices up in each pixel\&. Right back up in yo muthafuckin ass. Setting
\fBGL_PACK_SKIP_ROWS\fR
to
j
is equivalent ta incrementin tha pointa by
j ⁢ m
components or indices, where
m
is tha number of components or indices per row, as just computed up in the
\fBGL_PACK_ROW_LENGTH\fR
section\&. Right back up in yo muthafuckin ass. Setting
\fBGL_PACK_SKIP_IMAGES\fR
to
k
is equivalent ta incrementin tha pointa by
k ⁢ p, where
p
is tha number of components or indices per image, as computed up in the
\fBGL_PACK_IMAGE_HEIGHT\fR
section\&.
.RE
.PP
\fBGL_PACK_ALIGNMENT\fR
.RS 4
Specifies tha alignment requirements fo' tha start of each pixel row up in memory\&. Da allowable joints is 1 (byte\-alignment), 2 (rows aligned ta even\-numbered bytes), 4 (word\-alignment), n' 8 (rows start on double\-word boundaries)\&.
.RE
.PP
Da other six of tha twelve storage parametas affect how tha fuck pixel data is read from client memory\&. These joints is dope for
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(), and
\fBglTexSubImage3D\fR()
.PP
They is as bigs up:
.PP
\fBGL_UNPACK_SWAP_BYTES\fR
.RS 4
If true, byte orderin fo' multibyte color components, depth components, or stencil indices is reversed\&. That is, if a gangbangin' four\-byte component consistz of bytes
b 0,
b 1,
b 2,
b 3, it is taken from memory as
b 3,
b 2,
b 1,
b 0
if
\fBGL_UNPACK_SWAP_BYTES\fR
is true\&.
\fBGL_UNPACK_SWAP_BYTES\fR
has no effect on tha memory order of components within a pixel, only on tha order of bytes within components or indices\&. For example, tha three componentz of a
\fBGL_RGB\fR
format pixel is always stored wit red first, chronic second, n' blue third, regardless of tha value of
\fBGL_UNPACK_SWAP_BYTES\fR\&.
.RE
.PP
\fBGL_UNPACK_LSB_FIRST\fR
.RS 4
If true, bits is ordered within a funky-ass byte from least dope ta most significant; otherwise, tha straight-up original gangsta bit up in each byte is da most thugged-out dope one\&.
.RE
.PP
\fBGL_UNPACK_ROW_LENGTH\fR
.RS 4
If pimped outa than 0,
\fBGL_UNPACK_ROW_LENGTH\fR
defines tha number of pixels up in a row\&. If tha straight-up original gangsta pixel of a row is placed at location
p
in memory, then tha location of tha straight-up original gangsta pixel of tha next row is obtained by skipping
.sp
k = n ⁢ l a s ⁢ s ⁢ n ⁢ l a ⁢ s >= a s < a
.sp
components or indices, where
n
is tha number of components or indices up in a pixel,
l
is tha number of pixels up in a row (\fBGL_UNPACK_ROW_LENGTH\fR
if it is pimped outa than 0, the
width
argument ta tha pixel routine otherwise),
a
is tha value of
\fBGL_UNPACK_ALIGNMENT\fR, and
s
is tha size, up in bytes, of a single component (if
a < s, then it be as if
a = s)\&. In tha case of 1\-bit joints, tha location of tha next row is obtained by skipping
.sp
k = 8 ⁢ a ⁢ n ⁢ l 8 ⁢ a
.sp
components or indices\&.
.sp
Da word
\fIcomponent\fR
in dis description refers ta tha nonindex joints red, green, blue, alpha, n' depth\&. Right back up in yo muthafuckin ass. Storage format
\fBGL_RGB\fR, fo' example, has three components per pixel: first red, then green, n' finally blue\&.
.RE
.PP
\fBGL_UNPACK_IMAGE_HEIGHT\fR
.RS 4
If pimped outa than 0,
\fBGL_UNPACK_IMAGE_HEIGHT\fR
defines tha number of pixels up in a image of a three\-dimensionizzle texture volume\&. Where ``image\*(Aq\*(Aq is defined by all pixel pluggin tha same third dimension index\&. If tha straight-up original gangsta pixel of a row is placed at location
p
in memory, then tha location of tha straight-up original gangsta pixel of tha next row is obtained by skipping
.sp
k = n ⁢ l ⁢ h a s ⁢ s ⁢ n ⁢ l ⁢ h a ⁢ s >= a s < a
.sp
components or indices, where
n
is tha number of components or indices up in a pixel,
l
is tha number of pixels up in a row (\fBGL_UNPACK_ROW_LENGTH\fR
if it is pimped outa than 0, the
width
argument to
\fBglTexImage3D\fR()
otherwise),
h
is tha number of rows up in a image (\fBGL_UNPACK_IMAGE_HEIGHT\fR
if it is pimped outa than 0, the
height
argument to
\fBglTexImage3D\fR()
otherwise),
a
is tha value of
\fBGL_UNPACK_ALIGNMENT\fR, and
s
is tha size, up in bytes, of a single component (if
a < s, then it be as if
a = s)\&.
.sp
Da word
\fIcomponent\fR
in dis description refers ta tha nonindex joints red, green, blue, alpha, n' depth\&. Right back up in yo muthafuckin ass. Storage format
\fBGL_RGB\fR, fo' example, has three components per pixel: first red, then green, n' finally blue\&.
.RE
.PP
\fBGL_UNPACK_SKIP_PIXELS\fR n' \fBGL_UNPACK_SKIP_ROWS\fR
.RS 4
These joints is provided as a cold-ass lil convenience ta tha programmer; they provide no functionalitizzle dat cannot be duplicated by incrementin tha pointa passed to
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexSubImage1D\fR()
or
\fBglTexSubImage2D\fR()\&. Right back up in yo muthafuckin ass. Setting
\fBGL_UNPACK_SKIP_PIXELS\fR
to
i
is equivalent ta incrementin tha pointa by
i ⁢ n
components or indices, where
n
is tha number of components or indices up in each pixel\&. Right back up in yo muthafuckin ass. Setting
\fBGL_UNPACK_SKIP_ROWS\fR
to
j
is equivalent ta incrementin tha pointa by
j ⁢ k
components or indices, where
k
is tha number of components or indices per row, as just computed up in the
\fBGL_UNPACK_ROW_LENGTH\fR
section\&.
.RE
.PP
\fBGL_UNPACK_ALIGNMENT\fR
.RS 4
Specifies tha alignment requirements fo' tha start of each pixel row up in memory\&. Da allowable joints is 1 (byte\-alignment), 2 (rows aligned ta even\-numbered bytes), 4 (word\-alignment), n' 8 (rows start on double\-word boundaries)\&.
.RE
.PP
Da followin table gives tha type, initial value, n' range of valid joints fo' each storage parameta dat can be set with
\fBglPixelStore\fR\&.
.PP
.TS
allbox tab(:);
lB cB cB cB.
T{
\fB
                        \fR\fB\fIpname\fR\fR\fB
                        \fR
T}:T{
\fB
                        Type
                        \fR
T}:T{
\fB
                        Initial Value
                        \fR
T}:T{
\fB
                        Valid Range
                        \fR
T}
.T&
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c.
T{
\fBGL_PACK_SWAP_BYTES\fR
T}:T{
boolean
T}:T{
false
T}:T{
true or false
T}
T{
\fBGL_PACK_LSB_FIRST\fR
T}:T{
boolean
T}:T{
false
T}:T{
true or false
T}
T{
\fBGL_PACK_ROW_LENGTH\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_PACK_IMAGE_HEIGHT\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_PACK_SKIP_ROWS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_PACK_SKIP_PIXELS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_PACK_SKIP_IMAGES\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_PACK_ALIGNMENT\fR
T}:T{
integer
T}:T{
4
T}:T{
1, 2, 4, or 8
T}
T{
\fBGL_UNPACK_SWAP_BYTES\fR
T}:T{
boolean
T}:T{
false
T}:T{
true or false
T}
T{
\fBGL_UNPACK_LSB_FIRST\fR
T}:T{
boolean
T}:T{
false
T}:T{
true or false
T}
T{
\fBGL_UNPACK_ROW_LENGTH\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_UNPACK_IMAGE_HEIGHT\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_UNPACK_SKIP_ROWS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_UNPACK_SKIP_PIXELS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_UNPACK_SKIP_IMAGES\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}
T{
\fBGL_UNPACK_ALIGNMENT\fR
T}:T{
integer
T}:T{
4
T}:T{
1, 2, 4, or 8
T}
.TE
.sp 1
.PP
\fBglPixelStoref\fR
can be used ta set any pixel store parameter\&. If tha parameta type is boolean, then if
\fIparam\fR
is 0, tha parameta is false; otherwise it is set ta true\&. If
\fIpname\fR
is a integer type parameter,
\fIparam\fR
is rounded ta tha nearest integer\&.
.PP
Likewise,
\fBglPixelStorei\fR
can also be used ta set any of tha pixel store parameters\&. Boolean parametas is set ta false if
\fIparam\fR
is 0 n' legit otherwise\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIpname\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if a wack row length, pixel skip, or row skip value is specified, or if alignment is specified as other than 1, 2, 4, or 8\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_SWAP_BYTES\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_LSB_FIRST\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_ROW_LENGTH\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_IMAGE_HEIGHT\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_SKIP_ROWS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_SKIP_PIXELS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_SKIP_IMAGES\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_ALIGNMENT\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_SWAP_BYTES\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_LSB_FIRST\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_ROW_LENGTH\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_IMAGE_HEIGHT\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_SKIP_ROWS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_SKIP_PIXELS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_SKIP_IMAGES\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_ALIGNMENT\fR
.SH "SEE ALSO"
.PP
\fBglReadPixels\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR(),
\fBglCompressedTexImage1D\fR(),
\fBglCompressedTexImage2D\fR(),
\fBglCompressedTexImage3D\fR(),
\fBglCompressedTexSubImage1D\fR(),
\fBglCompressedTexSubImage2D\fR(),
\fBglCompressedTexSubImage1D\fR()\&.
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&.
\(co
2011 Khronos Group\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
