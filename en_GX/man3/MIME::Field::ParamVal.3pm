.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::Field::ParamVal 3"
.TH MIME::Field::ParamVal 3 "2013-11-14" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::Field::ParamVal \- subclass of Mail::Field, fo' structured MIME fields
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Smoke a object fo' a cold-ass lil content\-type field:
\&    $field = freshly smoked up Mail::Field \*(AqContent\-type\*(Aq;
\&
\&    # Set some attributes:
\&    $field\->param(\*(Aq_\*(Aq        => \*(Aqtext/html\*(Aq);
\&    $field\->param(\*(Aqcharset\*(Aq  => \*(Aqus\-ascii\*(Aq);
\&    $field\->param(\*(Aqboundary\*(Aq => \*(Aq\-\-\-ABC\-\-\-\*(Aq);
\&
\&    # Same:
\&    $field\->set(\*(Aq_\*(Aq        => \*(Aqtext/html\*(Aq,
\&                \*(Aqcharset\*(Aq  => \*(Aqus\-ascii\*(Aq,
\&                \*(Aqboundary\*(Aq => \*(Aq\-\-\-ABC\-\-\-\*(Aq);
\&
\&    # Git a attribute, or undefined if not present:
\&    print "no id!"  if defined($field\->param(\*(Aqid\*(Aq));
\&
\&    # Same yo, but use empty strang fo' missin joints:
\&    print "no id!"  if ($field\->paramstr(\*(Aqid\*(Aq) eq \*(Aq\*(Aq);
\&
\&    # Output as string:
\&    print $field\->stringify, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This be a abstract superclass of most \s-1MIME\s0 fields.  It handles
fieldz wit a general syntax like this:
.PP
.Vb 3
\&    Content\-Type: Message/Partial;
\&        number=2; total=3;
\&        id="oc=jpbe0M2Yt4s@thumper.bellcore.com"
.Ve
.PP
Comments is supported \fIbetween\fR items, like this:
.PP
.Vb 3
\&    Content\-Type: Message/Partial; (a comment)
\&        number=2  (another comment) ; (yet another comment) total=3;
\&        id="oc=jpbe0M2Yt4s@thumper.bellcore.com"
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.IP "set [\e%PARAMHASH | KEY=>\s-1VAL,...\s0,KEY=>\s-1VAL\s0]" 4
.IX Item "set [%PARAMHASH | KEY=>VAL,...,KEY=>VAL]"
\&\fIInstizzle method.\fR  Set dis field.
Da paramhash should contain parameta names
in \fIall lowercase\fR, wit tha special \f(CW"_"\fR parameta name
signifyin tha \*(L"default\*(R" (unnamed) parameta fo' tha field:
.Sp
.Vb 8
\&   # Set up ta be...
\&   #
\&   #     Content\-type: Message/Partial; number=2; total=3; id="ocj=pbe0M2"
\&   #
\&   $conttype\->set(\*(Aq_\*(Aq       => \*(AqMessage/Partial\*(Aq,
\&                  \*(Aqnumber\*(Aq  => 2,
\&                  \*(Aqtotal\*(Aq   => 3,
\&                  \*(Aqid\*(Aq      => "ocj=pbe0M2");
.Ve
.Sp
Note dat a single argument is taken ta be a \fIreference\fR to
a paramhash, while multiple args is taken ta be tha elements
of tha paramhash theyselves.
.Sp
Supplyin undef fo' a hashref, or a empty set of joints, effectively
clears tha object.
.Sp
Da self object is returned.
.IP "parse_params \s-1STRING\s0" 4
.IX Item "parse_params STRING"
\&\fIClass/instizzle utilitizzle method.\fR
Extract parameta info from a structured field, n' return
it as a hash reference.  For example, here be a gangbangin' field wit parameters:
.Sp
.Vb 3
\&    Content\-Type: Message/Partial;
\&        number=2; total=3;
\&        id="oc=jpbe0M2Yt4s@thumper.bellcore.com"
.Ve
.Sp
Here is how tha fuck you'd extract them:
.Sp
.Vb 6
\&    $params = $class\->parse_params(\*(Aqcontent\-type\*(Aq);
\&    if ($$params{\*(Aq_\*(Aq} eq \*(Aqmessage/partial\*(Aq) {
\&        $number = $$params{\*(Aqnumber\*(Aq};
\&        $total  = $$params{\*(Aqtotal\*(Aq};
\&        $id     = $$params{\*(Aqid\*(Aq};
\&    }
.Ve
.Sp
Like field names, parameta names is coerced ta lowercase.
Da special '_' parameta means tha default parameta fo' the
field.
.Sp
\&\fB\s-1NOTE:\s0\fR This has been provided as a hood method ta support backwards
compatibilitizzle yo, but you probably shouldn't use dat shit.
.IP "parse \s-1STRING\s0" 4
.IX Item "parse STRING"
\&\fIClass/instizzle method.\fR
Parse tha strang tha fuck into tha instance.  Any previous shiznit is wiped.
Da self object is returned.
.Sp
May also be used as a cold-ass lil constructor.
.IP "param \s-1PARAMNAME\s0,[\s-1VALUE\s0]" 4
.IX Item "param PARAMNAME,[VALUE]"
\&\fIInstizzle method.\fR
Return tha given parameter, or undef if it aint there.
With argument, set tha parameta ta dat \s-1VALUE.\s0
Da \s-1PARAMNAME\s0 is case-insensitive.  A \*(L"_\*(R" refers ta tha \*(L"default\*(R" parameter.
.IP "paramstr \s-1PARAMNAME\s0,[\s-1VALUE\s0]" 4
.IX Item "paramstr PARAMNAME,[VALUE]"
\&\fIInstizzle method.\fR
Like \fIparam()\fR: return tha given parameter, or \fIempty\fR if it aint there.
With argument, set tha parameta ta dat \s-1VALUE.\s0
Da \s-1PARAMNAME\s0 is case-insensitive.  A \*(L"_\*(R" refers ta tha \*(L"default\*(R" parameter.
.IP "stringify" 4
.IX Item "stringify"
\&\fIInstizzle method.\fR
Convert tha field ta a string, n' return dat shit.
.IP "tag" 4
.IX Item "tag"
\&\fIInstizzle method, abstract.\fR
Return tha tag fo' dis field.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::Field
