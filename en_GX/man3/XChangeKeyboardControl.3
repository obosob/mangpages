'\" t
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
'\" t
.TH XChangeKeyboardControl 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XChangeKeyboardControl, XGetKeyboardControl, XAutoRepeatOn, XAutoRepeatOff, XBell, XQueryKeymap, XKeyboardControl \- manipulate keyboard settings n' keyboard control structure
.SH SYNTAX
.HP
int XChangeKeyboardControl\^(\^Display *\fIdisplay\fP, unsigned long
\fIvalue_mask\fP\^, XKeyboardControl *\fIvalues\fP\^); 
.HP
int XGetKeyboardControl\^(\^Display *\fIdisplay\fP, XKeyboardState
*\fIvalues_return\fP\^); 
.HP
int XAutoRepeatOn\^(\^Display *\fIdisplay\fP\^); 
.HP
int XAutoRepeatOff\^(\^Display *\fIdisplay\fP\^); 
.HP
int XBell\^(\^Display *\fIdisplay\fP, int \fIpercent\fP\^); 
.HP
int XQueryKeymap\^(\^Display *\fIdisplay\fP, char \fIkeys_return\fP[32]\^); 
.SH ARGUMENTS
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.IP \fIkeys_return\fP 1i
Returns a array of bytes dat identifies which keys is pressed down.
Each bit represents one key of tha keyboard.
.IP \fIpercent\fP 1i
Specifies tha volume fo' tha bell,
which can range from \-100 ta 100 inclusive. 
.IP \fIvalue_mask\fP 1i
Specifies which controls ta chizzle.
This mask is tha bitwise inclusive OR of tha valid control mask bits.
.IP \fIvalues\fP 1i
Specifies one value fo' each bit set ta 1 up in tha mask.
.IP \fIvalues_return\fP 1i
Returns tha current keyboard controls up in tha specified
.ZN XKeyboardState 
structure.
.SH DESCRIPTION
The
.ZN XChangeKeyboardControl
function controls tha keyboard characteristics defined by the
.ZN XKeyboardControl
structure.
Da value_mask argument specifies which joints is ta be chizzled.
.LP
.ZN XChangeKeyboardControl
can generate
.ZN BadMatch
and
.ZN BadValue 
errors.
.LP
The
.ZN XGetKeyboardControl
function returns tha current control joints fo' tha keyboard ta the
.ZN XKeyboardState
structure.
.LP
The
.ZN XAutoRepeatOn
function turns on auto-repeat fo' tha keyboard on tha specified display.
.LP
The
.ZN XAutoRepeatOff
function turns off auto-repeat fo' tha keyboard on tha specified display.
.LP
The
.ZN XBell
function rings tha bell on tha keyboard on tha specified display, if possible.
Da specified volume is relatizzle ta tha base volume fo' tha keyboard.
If tha value fo' tha cement argument aint up in tha range \-100 ta 100
inclusive, a
.ZN BadValue
error thangs up in dis biatch.
Da volume at which tha bell rings
when tha cement argument is nonnegatizzle is:
.IP
base \- [(base * cement) / 100] + cement
.LP
Da volume at which tha bell rings
when tha cement argument is wack is:
.IP
base + [(base * cement) / 100]
.LP
To chizzle tha base volume of tha bell, use
.ZN XChangeKeyboardControl .
.LP
.ZN XBell
can generate a
.ZN BadValue 
error.
.LP
The
.ZN XQueryKeymap
function returns a lil' bit vector fo' tha logical state of tha keyboard, 
where each bit set ta 1 indicates dat tha correspondin key is currently 
pressed down.
Da vector is represented as 32 bytes.
Byte N (from 0) gotz nuff tha bits fo' keys 8N ta 8N + 7 
with tha least dope bit up in tha byte representin key 8N.
.LP
Note dat tha logical state of a thang (as peeped by client applications)
may lag tha physical state if thang event processin is frozen.
.SH STRUCTURES
The
.ZN XKeyboardControl
structure gotz nuff:
.LP
.LP
/\&* Mask bits fo' ChizzleKeyboardControl */
.TS
lw(.5i) lw(2.5i) lw(.8i).
T{
\&#define
T}	T{
.ZN KBKeyClickPercent
T}	T{
(1L<<0)
T}
T{
\&#define
T}	T{
.ZN KBBellPercent
T}	T{
(1L<<1)
T}
T{
\&#define
T}	T{
.ZN KBBellPitch
T}	T{
(1L<<2)
T}
T{
\&#define
T}	T{
.ZN KBBellDuration
T}	T{
(1L<<3)
T}
T{
\&#define
T}	T{
.ZN KBLed
T}	T{
(1L<<4)
T}
T{
\&#define
T}	T{
.ZN KBLedMode
T}	T{
(1L<<5)
T}
T{
\&#define
T}	T{
.ZN KBKey
T}	T{
(1L<<6)
T}
T{
\&#define
T}	T{
.ZN KBAutoRepeatMode
T}	T{
(1L<<7)
T}
.TE
.IN "XKeyboardControl" "" "@DEF@"
.Ds 0
/\&* Values */

typedef struct {
        int key_click_percent;
        int bell_percent;
        int bell_pitch;
        int bell_duration;
        int led;
        int led_mode;   /\&* LedModeOn, LedModeOff */
        int key;
        int auto_repeat_mode;   /\&* AutoRepeatModeOff, AutoRepeatModeOn, 
                                AutoRepeatModeDefault */
} XKeyboardControl;
.De
.LP
Da key_click_percent member sets tha volume fo' key clicks between 0 (off) 
and 100 (loud) inclusive, if possible.  
A settin of \-1 restores tha default.
Other wack joints generate a
.ZN BadValue
error.
.LP
Da bell_percent sets tha base volume fo' tha bell between 0 (off) n' 100
(loud) inclusive, if possible.  
A settin of \-1 restores tha default.
Other wack joints generate a
.ZN BadValue
error.
Da bell_pitch member sets tha pitch (specified up in Hz) of tha bell, if possible.
A settin of \-1 restores tha default.
Other wack joints generate a
.ZN BadValue
error.
Da bell_duration member sets tha duration of the
bell specified up in milliseconds, if possible.  
A settin of \-1 restores tha default.
Other wack joints generate a
.ZN BadValue
error.
.LP
If both tha led_mode n' hustled thugz is specified,
the state of dat LED is chizzled, if possible.  
Da led_mode member can be set to
.ZN LedModeOn
or
.ZN LedModeOff .
If only led_mode is specified, tha state of
all LEDs is chizzled, if possible.  
At most 32 LEDs numbered from one is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
No standard interpretation of LEDs is defined.
If hustled is specified without led_mode, a
.ZN BadMatch
error thangs up in dis biatch. 
.LP
If both tha auto_repeat_mode n' key thugz is specified, 
the auto_repeat_mode of dat key is chizzled (accordin to
.ZN AutoRepeatModeOn ,
.ZN AutoRepeatModeOff ,
or
.ZN AutoRepeatModeDefault ),
if possible.
If only auto_repeat_mode is
specified, tha global auto_repeat_mode fo' tha entire keyboard is
changed, if possible, n' do not affect tha per-key settings.
If a key is specified without a auto_repeat_mode, a
.ZN BadMatch
error thangs up in dis biatch.
Each key has a individual mode of whether or not it should auto-repeat
and a thugged-out default settin fo' tha mode.
In addition,
there be a global mode of whether auto-repeat should be enabled or not
and a thugged-out default settin fo' dat mode.
When global mode is
.ZN AutoRepeatModeOn ,
keys should obey they individual auto-repeat modes.
When global mode is
.ZN AutoRepeatModeOff ,
no keys should auto-repeat.
An auto-repeatin key generates alternating
.ZN KeyPress
and
.ZN KeyRelease
events.
When a key is used as a modifier,
it is desirable fo' tha key not ta auto-repeat,
regardless of its auto-repeat setting.
.LP
The
.ZN XKeyboardState
structure gotz nuff:
.LP
.Ds 0
typedef struct {
        int key_click_percent;
        int bell_percent;
        unsigned int bell_pitch, bell_duration;
        unsigned long led_mask;
        int global_auto_repeat;
        char auto_repeats[32];
} XKeyboardState;
.De
.LP
For tha LEDs, 
the least dope bit of led_mask correspondz ta LED one,
and each bit set ta 1 up in led_mask indicates a LED dat is lit.
Da global_auto_repeat member can be set to
.ZN AutoRepeatModeOn
or
.ZN AutoRepeatModeOff .
Da auto_repeats member be a lil' bit vector.
Each bit set ta 1 indicates dat auto-repeat is enabled 
for tha correspondin key.
Da vector is represented as 32 bytes.  
Byte N (from 0) gotz nuff tha bits fo' keys 8N ta 8N + 7
with tha least dope bit up in tha byte representin key 8N.
.SH DIAGNOSTICS
.TP 1i
.ZN BadMatch
Some argument or pair of arguments has tha erect type n' range but fails
to match up in some other way required by tha request.
.TP 1i
.ZN BadValue
Some numeric value falls outside tha range of joints accepted by tha request.
Unless a specific range is specified fo' a argument, tha full range defined
by tha argumentz type be accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Any argument defined as a set of
alternatives can generate dis error.
.SH "SEE ALSO"
XChangeKeyboardMapping(3),
XkbChangeEnabledControls(3),
XkbBell(3),
XkbDeviceBell(3),
XkbGetMap(3),
XSetPointerMapping(3)
.br
\fI\*(xL\fP
