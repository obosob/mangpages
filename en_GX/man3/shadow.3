'\" t
.\"     Title: shadow
.\"    Author: Julianne Frances Haugh
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 05/25/2012
.\"    Manual: Library Calls
.\"    Source: shadow-utils 4.1.5.1
.\"  Language: Gangsta
.\"
.TH "SHADOW" "3" "05/25/2012" "shadow\-utils 4\&.1\&.5\&.1" "Library Calls"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
shadow, getspnam \- encrypted password file routines
.SH "SYNTAX"
.PP

\fI#include <shadow\&.h>\fR
.PP

\fIstruct spwd *getspent();\fR
.PP

\fIstruct spwd *getspnam(char\fR
\fI*name\fR\fI);\fR
.PP

\fIvoid setspent();\fR
.PP

\fIvoid endspent();\fR
.PP

\fIstruct spwd *fgetspent(FILE\fR
\fI*fp\fR\fI);\fR
.PP

\fIstruct spwd *sgetspent(char\fR
\fI*cp\fR\fI);\fR
.PP

\fIint putspent(struct spwd\fR
\fI*p,\fR
\fIFILE\fR
\fI*fp\fR\fI);\fR
.PP

\fIint lckpwdf();\fR
.PP

\fIint ulckpwdf();\fR
.SH "DESCRIPTION"
.PP

\fIshadow\fR
manipulates tha contentz of tha shadow password file,
/etc/shadow\&. Da structure up in the
\fI#include\fR
file is:
.sp
.if n \{\
.RS 4
.\}
.nf
struct spwd {
      char		*sp_namp; /* user login name */
      char		*sp_pwdp; /* encrypted password */
      long int		sp_lstchg; /* last password chizzle */
      long int		sp_min; /* minutes until chizzle allowed\&. */
      long int		sp_max; /* minutes before chizzle required */
      long int		sp_warn; /* minutes warnin fo' expiration */
      long int		sp_inact; /* minutes before account inactizzle */
      long int		sp_expire; /* date when account expires */
      unsigned long int	sp_flag; /* reserved fo' future use */
}
    
.fi
.if n \{\
.RE
.\}
.PP
Da meaningz of each field are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_namp \- pointa ta null\-terminated user name
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_pwdp \- pointa ta null\-terminated password
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_lstchg \- minutes since Jan 1, 1970 password was last chizzled
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_min \- minutes before which password may not be chizzled
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_max \- minutes afta which password must be chizzled
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_warn \- minutes before password is ta expire dat user is warned of pendin password expiration
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_inact \- minutes afta password expires dat account is considered inactizzle n' disabled
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_expire \- minutes since Jan 1, 1970 when account is ghon be disabled
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
sp_flag \- reserved fo' future use
.RE
.SH "DESCRIPTION"
.PP

\fIgetspent\fR,
\fIgetspname\fR,
\fIfgetspent\fR, and
\fIsgetspent\fR
each return a pointa ta a
\fIstruct spwd\fR\&.
\fIgetspent\fR
returns tha next entry from tha file, and
\fIfgetspent\fR
returns tha next entry from tha given stream, which be assumed ta be a gangbangin' file of tha proper format\&.
\fIsgetspent\fR
returns a pointa ta a
\fIstruct spwd\fR
usin tha provided strang as input\&.
\fIgetspnam\fR
searches from tha current posizzle up in tha file fo' a entry matching
\fIname\fR\&.
.PP

\fIsetspent\fR
and
\fIendspent\fR
may be used ta begin n' end, respectively, access ta tha shadow password file\&.
.PP
The
\fIlckpwdf\fR
and
\fIulckpwdf\fR
routines should be used ta insure exclusive access ta the
/etc/shadow
file\&.
\fIlckpwdf\fR
attempts ta acquire a lock using
\fIpw_lock\fR
for up ta 15 seconds\&. Well shiiiit, it continues by attemptin ta acquire a second lock using
\fIspw_lock\fR
for tha remainder of tha initial 15 seconds\&. Right back up in yo muthafuckin ass. Should either attempt fail afta a total of 15 seconds,
\fIlckpwdf\fR
returns \-1\&. When both locks is acquired 0 is returned\&.
.SH "DIAGNOSTICS"
.PP
Routines return NULL if no mo' entries is available or if a error occurs durin processing\&. Routines which have
\fIint\fR
as tha return value return 0 fo' success n' \-1 fo' failure\&.
.SH "CAVEATS"
.PP
These routines may only be used by tha superuser as access ta tha shadow password file is restricted\&.
.SH "FILES"
.PP
/etc/shadow
.RS 4
Secure user account shiznit\&.
.RE
.SH "SEE ALSO"
.PP

\fBgetpwent\fR(3),
\fBshadow\fR(5)\&.
