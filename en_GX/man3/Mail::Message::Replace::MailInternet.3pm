.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Replace::MailInternizzle 3"
.TH Mail::Message::Replace::MailInternizzle 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Replace::MailInternizzle \- fake Mail::Internet
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Replace::MailInternet
\&   be a Mail::Message
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& !!! BETA !!!
\&
\& # chizzle
\& use Mail::Internet;
\& # into
\& use Mail::Message::Replace::MailInternet;
\& # up in existin code, n' tha code should still work yo, but
\& # wit tha Mail::Message features.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module be a wrapper round a Mail::Message, which simulates
a Mail::Internizzle object.  Da name-space of dat module is hijacked
and nuff methodz is added.
.PP
Most methodz will work without any chizzle yo, but you may need ta have
a peep yo' \fIsmtpsend()\fR n' \fIsend()\fR calls.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBclone\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->clone(OPTIONS)"
See \*(L"Constructors\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdup\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdup\fR()" 4
.IX Item "$obj->dup()"
Duplicate tha message.  Da result will again n' again n' again be a Mail::Internet
compatible object.
.ie n .IP "$obj\->\fBempty\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBempty\fR()" 4
.IX Item "$obj->empty()"
Remove all data from dis object.  Straight-up dangerous!
.IP "Mail::Message::Replace::MailInternet\->\fBnew\fR([\s-1ARG\s0], [\s-1OPTIONS\s0])" 4
.IX Item "Mail::Message::Replace::MailInternet->new([ARG], [OPTIONS])"
.Vb 10
\& \-Option    \-\-Defined up in     \-\-Default
\&  Body                         undef
\&  FoldLength                   79
\&  Header                       undef
\&  MailFrom                     \*(AqKEEP\*(Aq
\&  Modify                       0
\&  body        Mail::Message    undef
\&  body_type   Mail::Message    Mail::Message::Body::Lines
\&  deleted     Mail::Message    <false>
\&  field_type  Mail::Message    undef
\&  head        Mail::Message    undef
\&  head_type   Mail::Message    Mail::Message::Replace::MailHeader
\&  labels      Mail::Message    {}
\&  log         Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  messageId   Mail::Message    undef
\&  modified    Mail::Message    <false>
\&  trace       Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  trusted     Mail::Message    <false>
.Ve
.RS 4
.IP "Body => ARRAY-OF-LINES" 2
.IX Item "Body => ARRAY-OF-LINES"
Array of \f(CW"\en"\fR terminated lines.  If not specified, tha lines will be
read from \s-1ARG.\s0
.IP "FoldLength => \s-1INTEGER\s0" 2
.IX Item "FoldLength => INTEGER"
Number of charactas permitted on any refolded header line.
Passed ta Mail::Message::Replace::MailHeader::new(FoldLength).
.IP "Header => \s-1OBJECT\s0" 2
.IX Item "Header => OBJECT"
Da Mail::Header object, which is passed here, be a gangbangin' fake one as well...
It be translated tha fuck into a new(head).  If not given, tha header will be
parsed from tha \s-1ARG.\s0
.IP "MailFrom => '\s-1IGNORE\s0'|'\s-1ERROR\s0'|'\s-1COERCE\s0'|'\s-1KEEP\s0'" 2
.IX Item "MailFrom => 'IGNORE'|'ERROR'|'COERCE'|'KEEP'"
What ta do wit leadin "\f(CW\*(C`From \*(C'\fR" lines up in e\-mail data.
Passed ta Mail::Message::Replace::MailHeader::new(MailFrom).
.IP "Modify => \s-1BOOLEAN\s0" 2
.IX Item "Modify => BOOLEAN"
Whether ta re-fold all tha incomin fields.
Passed ta Mail::Message::Replace::MailHeader::new(Modify).
.IP "body => \s-1OBJECT\s0" 2
.IX Item "body => OBJECT"
.PD 0
.IP "body_type => \s-1CLASS\s0" 2
.IX Item "body_type => CLASS"
.IP "deleted => \s-1BOOLEAN\s0" 2
.IX Item "deleted => BOOLEAN"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "head => \s-1OBJECT\s0" 2
.IX Item "head => OBJECT"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "labels => ARRAY|HASH" 2
.IX Item "labels => ARRAY|HASH"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "messageId => \s-1STRING\s0" 2
.IX Item "messageId => STRING"
.IP "modified => \s-1BOOLEAN\s0" 2
.IX Item "modified => BOOLEAN"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.RE
.RS 4
.PD
.Sp
example: replace traditionizzle Mail::Internizzle by dis wrapper
.Sp
.Vb 3
\&  # was
\&  use Mail::Internet;
\&  mah $mi = Mail::Internet\->new(@options);
\&
\&  # becomes
\&  use Mail::Message::Replace::MailInternet;
\&  mah $mi = Mail::Internet\->new(@options);
.Ve
.RE
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBMailFrom\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBMailFrom\fR([\s-1STRING\s0])" 4
.IX Item "$obj->MailFrom([STRING])"
Yo crazy-ass email address.
.SS "Constructin a message"
.IX Subsection "Constructin a message"
.ie n .IP "$obj\->\fBadd_signature\fR([\s-1FILENAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBadd_signature\fR([\s-1FILENAME\s0])" 4
.IX Item "$obj->add_signature([FILENAME])"
Replaced by \fIsign()\fR yo, but still usable. \s-1FILENAME\s0 is tha file which
gotz nuff tha signature, which defaults ta \f(CW\*(C`$ENV{HOME}/.signature\*(C'\fR.
.ie n .IP "$obj\->\fBbounce\fR([RG\-OBJECT|OPTIONS])" 4
.el .IP "\f(CW$obj\fR\->\fBbounce\fR([RG\-OBJECT|OPTIONS])" 4
.IX Item "$obj->bounce([RG-OBJECT|OPTIONS])"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Bounce
.IP "Mail::Message::Replace::MailInternet\->\fBbuild\fR([MESSAGE|PART|BODY], \s-1CONTENT\s0)" 4
.IX Item "Mail::Message::Replace::MailInternet->build([MESSAGE|PART|BODY], CONTENT)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Build
.IP "Mail::Message::Replace::MailInternet\->\fBbuildFromBody\fR(\s-1BODY,\s0 [\s-1HEAD\s0], \s-1HEADERS\s0)" 4
.IX Item "Mail::Message::Replace::MailInternet->buildFromBody(BODY, [HEAD], HEADERS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Build
.ie n .IP "$obj\->\fBextract\fR(\s-1ARRAY\s0 or \s-1FILEHANDLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBextract\fR(\s-1ARRAY\s0 or \s-1FILEHANDLE\s0)" 4
.IX Item "$obj->extract(ARRAY or FILEHANDLE)"
Read header n' body from a \s-1ARRAY\s0 or \s-1FILEHANDLE\s0
.ie n .IP "$obj\->\fBforward\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforward\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forward(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardAttach\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardAttach\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardAttach(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardEncapsulate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardEncapsulate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardEncapsulate(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardInline\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardInline\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardInline(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardNo\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardNo\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardNo(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardPostlude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPostlude\fR()" 4
.IX Item "$obj->forwardPostlude()"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardPrelude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPrelude\fR()" 4
.IX Item "$obj->forwardPrelude()"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->forwardSubject(STRING)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBread\fR(ARRAY|FILEHANDLE, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(ARRAY|FILEHANDLE, \s-1OPTIONS\s0)" 4
.IX Item "$obj->read(ARRAY|FILEHANDLE, OPTIONS)"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBread\fR(ARRAY|FILEHANDLE, \s-1OPTIONS\s0)" 4
.IX Item "Mail::Message::Replace::MailInternet->read(ARRAY|FILEHANDLE, OPTIONS)"
.PD
Read header n' body from tha specified \s-1ARRAY\s0 or \s-1FILEHANDLE. \s0 When used as
object method, \fIMail::Message::read()\fR is called, ta be MailBox compliant.
As class method, tha Mail::Internizzle compatible read is called. Y'all KNOW dat shit, muthafucka!  \s-1OPTIONS\s0 are
only available up in tha straight-up original gangsta case.
.Sp
.Vb 3
\& \-Option             \-\-Defined up in                    \-\-Default
\&  body_type            Mail::Message::Construct::Read  undef
\&  strip_status_fieldz  Mail::Message::Construct::Read  <true>
.Ve
.RS 4
.IP "body_type => \s-1CLASS\s0" 2
.IX Item "body_type => CLASS"
.PD 0
.IP "strip_status_fieldz => \s-1BOOLEAN\s0" 2
.IX Item "strip_status_fieldz => BOOLEAN"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBread_body\fR(ARRAY|FILEHANDLE)" 4
.el .IP "\f(CW$obj\fR\->\fBread_body\fR(ARRAY|FILEHANDLE)" 4
.IX Item "$obj->read_body(ARRAY|FILEHANDLE)"
.PD
Read only tha messagez body from tha \s-1ARRAY\s0 or \s-1FILEHANDLE.\s0
.ie n .IP "$obj\->\fBread_header\fR(ARRAY|FILEHANDLE)" 4
.el .IP "\f(CW$obj\fR\->\fBread_header\fR(ARRAY|FILEHANDLE)" 4
.IX Item "$obj->read_header(ARRAY|FILEHANDLE)"
Read only tha messagez header from tha \s-1ARRAY\s0 or \s-1FILEHANDLE\s0
.ie n .IP "$obj\->\fBrebuild\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBrebuild\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->rebuild(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Rebuild
.ie n .IP "$obj\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->reply(OPTIONS)"
\&\s-1BE WARNED:\s0 tha main thang fo' bustin a reply is done by
\&\fIMail::Message::reply()\fR, which may produce a result which is compatible,
but may be different from Mail::Internetz version.
.Sp
.Vb 10
\& \-Option         \-\-Defined up in                     \-\-Default
\&  Bcc              Mail::Message::Construct::Reply  undef
\&  Cc               Mail::Message::Construct::Reply  <\*(Aqcc\*(Aq up in current>
\&  Exclude                                           []
\&  From             Mail::Message::Construct::Reply  <\*(Aqto\*(Aq up in current>
\&  Inline                                            >
\&  Keep                                              []
\&  Message\-ID       Mail::Message::Construct::Reply  <uniquely generated>
\&  ReplyAll                                          <false>
\&  Subject          Mail::Message::Construct::Reply  replySubject()
\&  To               Mail::Message::Construct::Reply  <sender up in current>
\&  body             Mail::Message::Construct::Reply  undef
\&  group_reply      Mail::Message::Construct::Reply  <true>
\&  header_template                                   $ENV{HOME}/.mailhdr
\&  include          Mail::Message::Construct::Reply  \*(AqINLINE\*(Aq
\&  max_signature    Mail::Message::Construct::Reply  10
\&  message_type     Mail::Message::Construct::Reply  Mail::Message
\&  postlude         Mail::Message::Construct::Reply  undef
\&  prelude          Mail::Message::Construct::Reply  undef
\&  quote            Mail::Message::Construct::Reply  \*(Aq> \*(Aq
\&  signature        Mail::Message::Construct::Reply  undef
\&  strip_signature  Mail::Message::Construct::Reply  qr/^\-\-\es/
.Ve
.RS 4
.IP "Bcc => \s-1ADDRESSES\s0" 2
.IX Item "Bcc => ADDRESSES"
.PD 0
.IP "Cc => \s-1ADDRESSES\s0" 2
.IX Item "Cc => ADDRESSES"
.IP "Exclude => ARRAY-OF-NAMES" 2
.IX Item "Exclude => ARRAY-OF-NAMES"
.PD
Remove tha fieldz witht tha specified names from tha produced reply message.
.IP "From => \s-1ADDRESSES\s0" 2
.IX Item "From => ADDRESSES"
.PD 0
.IP "Inline => \s-1STRING\s0" 2
.IX Item "Inline => STRING"
.PD
Quotation \s-1STRING,\s0 which is translated tha fuck into reply(quote).  Da normal
default of \f(CW\*(C`quote\*(C'\fR is \*(L"> \*(R", up in stead of \*(L">\*(R".
.IP "Keep => ARRAY-OF-NAMES" 2
.IX Item "Keep => ARRAY-OF-NAMES"
Copy all header fieldz wit tha specified \s-1NAMES\s0 from tha source ta the
reply message.
.IP "Message-ID => \s-1STRING\s0" 2
.IX Item "Message-ID => STRING"
.PD 0
.IP "ReplyAll => \s-1BOOLEAN\s0" 2
.IX Item "ReplyAll => BOOLEAN"
.PD
Reply ta tha group?  Translated tha fuck into reply(group_reply), which has
as default tha exact oposite of dis option, bein \f(CW\*(C`true\*(C'\fR.
.IP "Subject => STRING|CODE" 2
.IX Item "Subject => STRING|CODE"
.PD 0
.IP "To => \s-1ADDRESSES\s0" 2
.IX Item "To => ADDRESSES"
.IP "body => \s-1BODY\s0" 2
.IX Item "body => BODY"
.IP "group_reply => \s-1BOOLEAN\s0" 2
.IX Item "group_reply => BOOLEAN"
.ie n .IP "header_template => FILENAME|""undef""" 2
.el .IP "header_template => FILENAME|\f(CWundef\fR" 2
.IX Item "header_template => FILENAME|undef"
.PD
Read tha return header from tha template file.  When dis is explicitly
set ta \f(CW\*(C`undef\*(C'\fR, or tha file do not exist, then a header is ghon be pimped.
.IP "include => '\s-1NO\s0'|'\s-1INLINE\s0'|'\s-1ATTACH\s0'" 2
.IX Item "include => 'NO'|'INLINE'|'ATTACH'"
.PD 0
.IP "max_signature => \s-1INTEGER\s0" 2
.IX Item "max_signature => INTEGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "postlude => BODY|LINES" 2
.IX Item "postlude => BODY|LINES"
.IP "prelude => BODY|LINES" 2
.IX Item "prelude => BODY|LINES"
.IP "quote => CODE|STRING" 2
.IX Item "quote => CODE|STRING"
.IP "signature => BODY|MESSAGE" 2
.IX Item "signature => BODY|MESSAGE"
.IP "strip_signature => REGEXP|STRING|CODE" 2
.IX Item "strip_signature => REGEXP|STRING|CODE"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBreplyPrelude\fR([STRING|FIELD|ADDRESS|ARRAY\-OF\-THINGS])" 4
.el .IP "\f(CW$obj\fR\->\fBreplyPrelude\fR([STRING|FIELD|ADDRESS|ARRAY\-OF\-THINGS])" 4
.IX Item "$obj->replyPrelude([STRING|FIELD|ADDRESS|ARRAY-OF-THINGS])"
.PD
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Reply
.ie n .IP "$obj\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->replySubject(STRING)"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "Mail::Message::Replace::MailInternet->replySubject(STRING)"
.PD
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Reply
.ie n .IP "$obj\->\fBsign\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsign\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->sign(OPTIONS)"
Add a signature (a few extra lines) ta tha message.
.Sp
.Vb 3
\& \-Option   \-\-Default
\&  File       undef
\&  Signature  \*(Aq\*(Aq
.Ve
.RS 4
.IP "File => \s-1FILENAME\s0" 2
.IX Item "File => FILENAME"
Specifies a gangbangin' filename where tha signature is in.
.IP "Signature => STRING|ARRAY\-OF\-LINES" 2
.IX Item "Signature => STRING|ARRAY-OF-LINES"
Da signature up in memory.
.RE
.RS 4
.RE
.SS "Da message"
.IX Subsection "Da message"
.ie n .IP "$obj\->\fBcontainer\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcontainer\fR()" 4
.IX Item "$obj->container()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisDummy\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDummy\fR()" 4
.IX Item "$obj->isDummy()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisPart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisPart\fR()" 4
.IX Item "$obj->isPart()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBmessageId\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR()" 4
.IX Item "$obj->messageId()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBnntppost\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnntppost\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->nntppost(OPTIONS)"
Send a \s-1NNTP\s0 message (newsgroup message), which is equivalent to
Mail::Transport::NNTP or \fIMail::Message::send()\fR wit \f(CW\*(C`via \*(Aqnntp\*(Aq\*(C'\fR.
.Sp
.Vb 4
\& \-Option\-\-Default
\&  Debug   <false>
\&  Host    <from Net::Config>
\&  Port    119
.Ve
.RS 4
.IP "Debug => \s-1BOOLEAN\s0" 2
.IX Item "Debug => BOOLEAN"
.PD 0
.IP "Host => \s-1HOSTNAME\s0" 2
.IX Item "Host => HOSTNAME"
.IP "Port => \s-1INTEGER\s0" 2
.IX Item "Port => INTEGER"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBpartNumber\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBpartNumber\fR()" 4
.IX Item "$obj->partNumber()"
.PD
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print([FILEHANDLE])"
Prints tha whole message ta tha specified \s-1FILEHANDLE,\s0 which default to
\&\s-1STDOUT. \s0 This calls \fIMail::Message::print()\fR.
.ie n .IP "$obj\->\fBsend\fR(\s-1TYPE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR(\s-1TYPE, OPTIONS\s0)" 4
.IX Item "$obj->send(TYPE, OPTIONS)"
Send via Mail Transfer Agents (\s-1MUA\s0).  These is ghon be handled by various
Mail::Transport::Send extensions.  Da \f(CW\*(C`test\*(C'\fR \s-1TYPE\s0 aint supported.
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtoplevel\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtoplevel\fR()" 4
.IX Item "$obj->toplevel()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBwrite\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->write([FILEHANDLE])"
See \*(L"Da message\*(R" up in Mail::Message
.SS "Da header"
.IX Subsection "Da header"
.ie n .IP "$obj\->\fBadd\fR(\s-1LINES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(\s-1LINES\s0)" 4
.IX Item "$obj->add(LINES)"
Add header lines, which simply calls \f(CW\*(C`Mail::Message::Head::add()\*(C'\fR on
the header fo' each specified \s-1LINE.\s0 Da last added \s-1LINE\s0 is returned.
.ie n .IP "$obj\->\fBbcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbcc\fR()" 4
.IX Item "$obj->bcc()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcc\fR()" 4
.IX Item "$obj->cc()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBclean_header\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclean_header\fR()" 4
.IX Item "$obj->clean_header()"
Not ta be used, replaced by \fIheader()\fR.
.ie n .IP "$obj\->\fBcombine\fR(\s-1TAG,\s0 [\s-1WITH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcombine\fR(\s-1TAG,\s0 [\s-1WITH\s0])" 4
.IX Item "$obj->combine(TAG, [WITH])"
Not implemented, cuz I peep no use fo' dat shit.
.ie n .IP "$obj\->\fBdate\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdate\fR()" 4
.IX Item "$obj->date()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdelete\fR(\s-1NAME,\s0 [\s-1INDEX\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1NAME,\s0 [\s-1INDEX\s0]])" 4
.IX Item "$obj->delete(NAME, [INDEX]])"
Delete tha fieldz wit tha specified \s-1NAME. \s0 Da deleted fieldz are
returned.
.Sp
\&\s-1BE WARNED:\s0 if no \s-1NAME\s0 is specified, tha \f(CW\*(C`delete\*(C'\fR is interpreted as
the deletion of tha message up in a gangbangin' folder, so \fIMail::Box::Message::delete()\fR
will be called. Y'all KNOW dat shit, muthafucka!  This may have no wack effect at all...
.Sp
Calls \fIMail::Message::Replace::MailHeader::delete()\fR
.ie n .IP "$obj\->\fBdestinations\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR()" 4
.IX Item "$obj->destinations()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBfold\fR([\s-1LENGTH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfold\fR([\s-1LENGTH\s0])" 4
.IX Item "$obj->fold([LENGTH])"
Fold all tha fieldz ta a cold-ass lil certain maximum \s-1LENGTH.\s0
Implemented by \fIMail::Message::Replace::MailHeader::fold()\fR
.ie n .IP "$obj\->\fBfold_length\fR([[\s-1TAG\s0], \s-1LENGTH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfold_length\fR([[\s-1TAG\s0], \s-1LENGTH\s0])" 4
.IX Item "$obj->fold_length([[TAG], LENGTH])"
Set tha maximum line \s-1LENGTH.  TAG\s0 is ignored.
Implemented by \fIMail::Message::Replace::MailHeader::fold_length()\fR
.ie n .IP "$obj\->\fBfrom\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR()" 4
.IX Item "$obj->from()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBget\fR(\s-1NAME,\s0 [\s-1INDEX\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR(\s-1NAME,\s0 [\s-1INDEX\s0])" 4
.IX Item "$obj->get(NAME, [INDEX])"
Git all tha header fieldz wit tha specified \s-1NAME. \s0 In scalar context,
only tha straight-up original gangsta fittin \s-1NAME\s0 is returned. Y'all KNOW dat shit, muthafucka!  Even when only one \s-1NAME\s0 is
specified, multiple lines may be returned: some fieldz step tha fuck up mo' than
once up in a header n' shit.  Calls \fIMail::Message::Replace::MailHeader::get()\fR
.ie n .IP "$obj\->\fBguessTimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBguessTimestamp\fR()" 4
.IX Item "$obj->guessTimestamp()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBhead\fR([\s-1HEAD\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR([\s-1HEAD\s0])" 4
.IX Item "$obj->head([HEAD])"
Returns tha head of tha message, or creates a empty one if none is
defined. Y'all KNOW dat shit, muthafucka!  Da \s-1HEAD\s0 argument, which sets tha header, aint available
for Mail::Internizzle yo, but is there ta be compatible wit tha \f(CW\*(C`head\*(C'\fR
method of Mail::Message.
.ie n .IP "$obj\->\fBheader\fR([\s-1ARRAY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBheader\fR([\s-1ARRAY\s0])" 4
.IX Item "$obj->header([ARRAY])"
Optionally readz a header from tha \s-1ARRAY,\s0 n' then returns dem fields
as array-ref sickly folded.
Implemented by \fIMail::Message::Replace::MailHeader::header()\fR
.ie n .IP "$obj\->\fBnrLines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnrLines\fR()" 4
.IX Item "$obj->nrLines()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBprint_header\fR(\s-1FILEHANDLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprint_header\fR(\s-1FILEHANDLE\s0)" 4
.IX Item "$obj->print_header(FILEHANDLE)"
Calls \fIMail::Message::Head::Complete::print()\fR.
.ie n .IP "$obj\->\fBreplace\fR(\s-1TAG, LINE,\s0 [\s-1INDEX\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreplace\fR(\s-1TAG, LINE,\s0 [\s-1INDEX\s0])" 4
.IX Item "$obj->replace(TAG, LINE, [INDEX])"
Addz \s-1LINES\s0 ta tha header yo, but removes fieldz wit tha same name if they
already exist.  Calls \fIMail::Message::Replace::MailHeader::replace()\fR
.ie n .IP "$obj\->\fBsender\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsender\fR()" 4
.IX Item "$obj->sender()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBstudy\fR(\s-1FIELDNAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstudy\fR(\s-1FIELDNAME\s0)" 4
.IX Item "$obj->study(FIELDNAME)"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBsubject\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsubject\fR()" 4
.IX Item "$obj->subject()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtidy_headers\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtidy_headers\fR()" 4
.IX Item "$obj->tidy_headers()"
No effect no mo' (always performed).
.ie n .IP "$obj\->\fBtimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtimestamp\fR()" 4
.IX Item "$obj->timestamp()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBto\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBto\fR()" 4
.IX Item "$obj->to()"
See \*(L"Da header\*(R" up in Mail::Message
.SS "Da body"
.IX Subsection "Da body"
.ie n .IP "$obj\->\fBbody\fR([ARRAY\-OF\-LINES|LIST\-OF\-LINES])" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR([ARRAY\-OF\-LINES|LIST\-OF\-LINES])" 4
.IX Item "$obj->body([ARRAY-OF-LINES|LIST-OF-LINES])"
Returns a array of lines, representin tha body.  With arguments, a
new body is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In Mail::Internet, tha body aint an
object but a simple array.
.Sp
\&\s-1BE WARNED:\s0 dis overrulez tha \fIMail::Message::body()\fR method, which
may cause some mad drama.  Use \fIbodyObject()\fR ta git access ta that
bodyz data.
.ie n .IP "$obj\->\fBbodyObject\fR([\s-1BODY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBbodyObject\fR([\s-1BODY\s0])" 4
.IX Item "$obj->bodyObject([BODY])"
Calls \fIMail::Message::body()\fR, cuz dat \f(CW\*(C`body\*(C'\fR method is overruled
by tha one which has a Mail::Internizzle compatible intercourse.
.ie n .IP "$obj\->\fBcontentType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcontentType\fR()" 4
.IX Item "$obj->contentType()"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdecoded\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdecoded\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->decoded(OPTIONS)"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBencode\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->encode(OPTIONS)"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisMultipart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisMultipart\fR()" 4
.IX Item "$obj->isMultipart()"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisNested\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisNested\fR()" 4
.IX Item "$obj->isNested()"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBparts\fR(['\s-1ALL\s0'|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|'\s-1RECURSE\s0'|FILTER])" 4
.el .IP "\f(CW$obj\fR\->\fBparts\fR(['\s-1ALL\s0'|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|'\s-1RECURSE\s0'|FILTER])" 4
.IX Item "$obj->parts(['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER])"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBprint_body\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint_body\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print_body([FILEHANDLE])"
Prints tha body ta tha specified \s-1FILEHANDLE,\s0 which defaults ta \s-1STDOUT. \s0 This
calls \fIMail::Message::Body::print()\fR.
.ie n .IP "$obj\->\fBremove_sig\fR([\s-1NRLINES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBremove_sig\fR([\s-1NRLINES\s0])" 4
.IX Item "$obj->remove_sig([NRLINES])"
Remove tha signature of a message wit a maximum of \s-1NRLINES\s0 lines, which
defaults ta 10.  Da work is done on tha decoded body content, by
\&\fIMail::Message::Body::stripSignature()\fR.
.ie n .IP "$obj\->\fBsmtpsend\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsmtpsend\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->smtpsend(OPTIONS)"
This method is callin \fIMail::Message::send()\fR via \f(CW\*(C`smtp\*(C'\fR, which is
implemented up in Mail::Transport::SMTP.  Da implementation is
slightly different, so dis method aint 100% compliant.
.Sp
.Vb 6
\& \-Option  \-\-Default
\&  Debug     <false>
\&  Wuz crackalackin'     <helo_domain from Net::Config>
\&  Host      $ENV{SMTPHOSTS} or from Net::Config
\&  MailFrom  $ENV{MAILADDRESS} or $ENV{USER}
\&  Port      25
.Ve
.RS 4
.IP "Debug => \s-1BOOLEAN\s0" 2
.IX Item "Debug => BOOLEAN"
.PD 0
.IP "Wuz crackalackin' => \s-1STRING\s0" 2
.IX Item "Wuz crackalackin' => STRING"
.IP "Host => \s-1HOSTNAME\s0" 2
.IX Item "Host => HOSTNAME"
.PD
Only tha straight-up original gangsta detected \s-1HOSTNAME\s0 is taken, so differs from tha original
implementation.
.IP "MailFrom => \s-1STRING\s0" 2
.IX Item "MailFrom => STRING"
Yo crazy-ass e\-mail address.  This simulated Mail::Internizzle object do not
try ta create a e\-mail address from tha sendmail configuration file,
because dat is generally a wack scam up in environments wit virtual hosts,
as our crazy asses have now-adays.
.IP "Port => \s-1INTEGER\s0" 2
.IX Item "Port => INTEGER"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBtidy_body\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtidy_body\fR()" 4
.IX Item "$obj->tidy_body()"
.PD
Removes blank lines from begin n' end of tha body.
.SS "Flags"
.IX Subsection "Flags"
.ie n .IP "$obj\->\fBdeleted\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdeleted\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->deleted([BOOLEAN])"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisDeleted\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDeleted\fR()" 4
.IX Item "$obj->isDeleted()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBlabel\fR(LABEL|PAIRS)" 4
.el .IP "\f(CW$obj\fR\->\fBlabel\fR(LABEL|PAIRS)" 4
.IX Item "$obj->label(LABEL|PAIRS)"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBlabels\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlabels\fR()" 4
.IX Item "$obj->labels()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBlabelsToStatus\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlabelsToStatus\fR()" 4
.IX Item "$obj->labelsToStatus()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->modified([BOOLEAN])"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBstatusToLabels\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstatusToLabels\fR()" 4
.IX Item "$obj->statusToLabels()"
See \*(L"Flags\*(R" up in Mail::Message
.SS "Da whole message as text"
.IX Subsection "Da whole message as text"
.ie n .IP "$obj\->\fBas_mbox_string\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBas_mbox_string\fR()" 4
.IX Item "$obj->as_mbox_string()"
Returns tha whole message as one string, which can be included up in an
\&\s-1MBOX\s0 folda (while not rockin Mail::Box::Mbox).  Lines up in tha body
which start wit \f(CW\*(C`From \*(C'\fR is escaped wit a >.
.ie n .IP "$obj\->\fBfile\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfile\fR()" 4
.IX Item "$obj->file()"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBlines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlines\fR()" 4
.IX Item "$obj->lines()"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBprintStructure\fR([FILEHANDLE|undef],[\s-1INDENT\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprintStructure\fR([FILEHANDLE|undef],[\s-1INDENT\s0])" 4
.IX Item "$obj->printStructure([FILEHANDLE|undef],[INDENT])"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBstring\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR()" 4
.IX Item "$obj->string()"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.SS "Da nasty bits"
.IX Subsection "Da nasty bits"
.ie n .IP "$obj\->\fBisa\fR(\s-1CLASS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBisa\fR(\s-1CLASS\s0)" 4
.IX Item "$obj->isa(CLASS)"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBisa\fR(\s-1CLASS\s0)" 4
.IX Item "Mail::Message::Replace::MailInternet->isa(CLASS)"
.PD
Of course, tha \f(CW\*(C`isa()\*(C'\fR class inheritizzle check should not peep our
nasty trick.
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBclonedFrom\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclonedFrom\fR()" 4
.IX Item "$obj->clonedFrom()"
See \*(L"Internals\*(R" up in Mail::Message
.IP "Mail::Message::Replace::MailInternet\->\fBcoerce\fR(\s-1MESSAGE\s0)" 4
.IX Item "Mail::Message::Replace::MailInternet->coerce(MESSAGE)"
Coerce (adapt type) of tha specified \s-1MESSAGE \s0(anything
\&\fIMail::Message::coerce()\fR accepts) tha fuck into a Mail::Internizzle simulating
object.
.ie n .IP "$obj\->\fBisDelayed\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDelayed\fR()" 4
.IX Item "$obj->isDelayed()"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBreadBody\fR(\s-1PARSER, HEAD\s0 [, \s-1BODYTYPE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreadBody\fR(\s-1PARSER, HEAD\s0 [, \s-1BODYTYPE\s0])" 4
.IX Item "$obj->readBody(PARSER, HEAD [, BODYTYPE])"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBreadFromParser\fR(\s-1PARSER,\s0 [\s-1BODYTYPE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreadFromParser\fR(\s-1PARSER,\s0 [\s-1BODYTYPE\s0])" 4
.IX Item "$obj->readFromParser(PARSER, [BODYTYPE])"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBreadHead\fR(\s-1PARSER\s0 [,CLASS])" 4
.el .IP "\f(CW$obj\fR\->\fBreadHead\fR(\s-1PARSER\s0 [,CLASS])" 4
.IX Item "$obj->readHead(PARSER [,CLASS])"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBrecursiveRebuildPart\fR(\s-1PART, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBrecursiveRebuildPart\fR(\s-1PART, OPTIONS\s0)" 4
.IX Item "$obj->recursiveRebuildPart(PART, OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Message::Construct::Rebuild
.ie n .IP "$obj\->\fBstoreBody\fR(\s-1BODY\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreBody\fR(\s-1BODY\s0)" 4
.IX Item "$obj->storeBody(BODY)"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtakeMessageId\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtakeMessageId\fR([\s-1STRING\s0])" 4
.IX Item "$obj->takeMessageId([STRING])"
See \*(L"Internals\*(R" up in Mail::Message
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"\s-1METHODS\*(R"\s0 up in Mail::Message::Construct
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Message::Replace::MailInternet->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Message::Replace::MailInternet->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Message::Replace::MailInternet->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBshortSize\fR([\s-1VALUE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBshortSize\fR([\s-1VALUE\s0])" 4
.IX Item "$obj->shortSize([VALUE])"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBshortSize\fR([\s-1VALUE\s0])" 4
.IX Item "Mail::Message::Replace::MailInternet->shortSize([VALUE])"
.PD
See \*(L"Error handling\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBshortString\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBshortString\fR()" 4
.IX Item "$obj->shortString()"
See \*(L"Error handling\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdestruct\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdestruct\fR()" 4
.IX Item "$obj->destruct()"
See \*(L"Cleanup\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot include forward source as $include." 4
.el .IP "Error: Cannot include forward source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include forward source as $include."
Unknown alternatizzle fo' tha forward(include).  Valid chizzlez are
\&\f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, \f(CW\*(C`ATTACH\*(C'\fR, n' \f(CW\*(C`ENCAPSULATE\*(C'\fR.
.IP "Error: Mail::Internizzle do not support dis kind of data" 4
.IX Item "Error: Mail::Internizzle do not support dis kind of data"
Da \s-1ARGS\s0 data can only be a gangbangin' file handle or a \s-1ARRAY. \s0 Other data types
are not supported (see \fIread()\fR if you wanna have more).
.IP "Error: Method bounce requires To, Cc, or Bcc" 4
.IX Item "Error: Method bounce requires To, Cc, or Bcc"
Da message \fIbounce()\fR method forwardz a received message off ta one of mah thugs
else without modification; you must specified itz freshly smoked up destination.
If you have tha urge not ta specify any destination, you probably
are lookin fo' \fIreply()\fR. When you wish ta modify tha content, use
\&\fIforward()\fR.
.IP "Error: Method forwardAttach requires a preamble" 4
.IX Item "Error: Method forwardAttach requires a preamble"
.PD 0
.IP "Error: Method forwardEncapsulate requires a preamble" 4
.IX Item "Error: Method forwardEncapsulate requires a preamble"
.IP "Error: No address ta create forwarded to." 4
.IX Item "Error: No address ta create forwarded to."
.PD
If a gangbangin' forward message is pimped, a thugged-out destination address must be specified.
.ie n .IP "Error: No rebuild rule $name defined." 4
.el .IP "Error: No rebuild rule \f(CW$name\fR defined." 4
.IX Item "Error: No rebuild rule $name defined."
.PD 0
.IP "Error: Only \fIbuild()\fR Mail::Message's; they is not up in a gangbangin' folda yet" 4
.IX Item "Error: Only build() Mail::Message's; they is not up in a gangbangin' folda yet"
.PD
Yo ass may wish ta construct a message ta be stored up in a some kind
of folda yo, but you need ta do dat up in two steps.  First, create a
normal Mail::Message, n' then add it ta tha folda n' shit.  Durin this
\&\fIMail::Box::addMessage()\fR process, tha message will git \fIcoerce()\fR\-d
into tha right message type, addin storage shiznit n' tha like.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
