'\" t
.\"     Title: glPixelTransfer
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLPIXELTRANSFER" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glPixelTransfer \- set pixel transfer modes
.SH "C SPECIFICATION"
.HP \w'void\ glPixelTransferf('u
.BI "void glPixelTransferf(GLenum\ " "pname" ", GLfloat\ " "param" ");"
.HP \w'void\ glPixelTransferi('u
.BI "void glPixelTransferi(GLenum\ " "pname" ", GLint\ " "param" ");"
.SH "PARAMETERS"
.PP
\fIpname\fR
.RS 4
Specifies tha symbolic name of tha pixel transfer parameta ta be set\&. Must be one of tha following:
\fBGL_MAP_COLOR\fR,
\fBGL_MAP_STENCIL\fR,
\fBGL_INDEX_SHIFT\fR,
\fBGL_INDEX_OFFSET\fR,
\fBGL_RED_SCALE\fR,
\fBGL_RED_BIAS\fR,
\fBGL_GREEN_SCALE\fR,
\fBGL_GREEN_BIAS\fR,
\fBGL_BLUE_SCALE\fR,
\fBGL_BLUE_BIAS\fR,
\fBGL_ALPHA_SCALE\fR,
\fBGL_ALPHA_BIAS\fR,
\fBGL_DEPTH_SCALE\fR, or
\fBGL_DEPTH_BIAS\fR\&.
.sp
Additionally, if the
ARB_imaging
extension is supported, tha followin symbolic names is accepted:
\fBGL_POST_COLOR_MATRIX_RED_SCALE\fR,
\fBGL_POST_COLOR_MATRIX_GREEN_SCALE\fR,
\fBGL_POST_COLOR_MATRIX_BLUE_SCALE\fR,
\fBGL_POST_COLOR_MATRIX_ALPHA_SCALE\fR,
\fBGL_POST_COLOR_MATRIX_RED_BIAS\fR,
\fBGL_POST_COLOR_MATRIX_GREEN_BIAS\fR,
\fBGL_POST_COLOR_MATRIX_BLUE_BIAS\fR,
\fBGL_POST_COLOR_MATRIX_ALPHA_BIAS\fR,
\fBGL_POST_CONVOLUTION_RED_SCALE\fR,
\fBGL_POST_CONVOLUTION_GREEN_SCALE\fR,
\fBGL_POST_CONVOLUTION_BLUE_SCALE\fR,
\fBGL_POST_CONVOLUTION_ALPHA_SCALE\fR,
\fBGL_POST_CONVOLUTION_RED_BIAS\fR,
\fBGL_POST_CONVOLUTION_GREEN_BIAS\fR,
\fBGL_POST_CONVOLUTION_BLUE_BIAS\fR, and
\fBGL_POST_CONVOLUTION_ALPHA_BIAS\fR\&.
.RE
.PP
\fIparam\fR
.RS 4
Specifies tha value that
\fIpname\fR
is set to\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglPixelTransfer\fR
sets pixel transfer modes dat affect tha operation of subsequent
\fBglCopyPixels\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglDrawPixels\fR(),
\fBglReadPixels\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(), and
\fBglTexSubImage3D\fR()
commands\& fo' realz. Additionally, if the
ARB_imaging
subset is supported, tha routines
\fBglColorTable\fR(),
\fBglColorSubTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglHistogram\fR(),
\fBglMinmax\fR(), and
\fBglSeparableFilter2D\fR()
are also affected\&. Da algorithms dat is specified by pixel transfer modes operate on pixels afta they is read from tha frame buffer (\fBglCopyPixels\fR()\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(), and
\fBglReadPixels\fR()), or unpacked from client memory (\fBglDrawPixels\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(), and
\fBglTexSubImage3D\fR())\&. Pixel transfer operations happen up in tha same order, n' up in tha same manner, regardless of tha command dat resulted up in tha pixel operation\&. Pixel storage modes (see
\fBglPixelStore\fR()) control tha unpackin of pixels bein read from client memory n' tha packin of pixels bein freestyled back tha fuck into client memory\&.
.PP
Pixel transfer operations handle four fundamenstrual pixel types:
\fIcolor\fR,
\fIcolor index\fR,
\fIdepth\fR, and
\fIstencil\fR\&.
\fIColor\fR
pixels consist of four floating\-point joints wit unspecified mantissa n' exponent sizes, scaled such dat 0 represents zero intensitizzle n' 1 represents full intensity\&.
\fIColor indices\fR
comprise a single fixed\-point value, wit unspecified precision ta tha right of tha binary point\&.
\fIDepth\fR
pixels comprise a single floating\-point value, wit unspecified mantissa n' exponent sizes, scaled such dat 0\&.0 represents tha minimum depth buffer value, n' 1\&.0 represents tha maximum depth buffer value\&. Finally,
\fIstencil\fR
pixels comprise a single fixed\-point value, wit unspecified precision ta tha right of tha binary point\&.
.PP
Da pixel transfer operations performed on tha four basic pixel types is as bigs up:
.PP
\fIColor\fR
.RS 4
Each of tha four color components is multiplied by a scale factor, then added ta a funky-ass bias factor\&. That is, tha red component is multiplied by
\fBGL_RED_SCALE\fR, then added to
\fBGL_RED_BIAS\fR; tha chronic component is multiplied by
\fBGL_GREEN_SCALE\fR, then added to
\fBGL_GREEN_BIAS\fR; tha blue component is multiplied by
\fBGL_BLUE_SCALE\fR, then added to
\fBGL_BLUE_BIAS\fR; n' tha alpha component is multiplied by
\fBGL_ALPHA_SCALE\fR, then added to
\fBGL_ALPHA_BIAS\fR\& fo' realz. Afta all four color components is scaled n' biased, each is clamped ta tha range
0 1\& fo' realz. All color, scale, n' bias joints is specified with
\fBglPixelTransfer\fR\&.
.sp
If
\fBGL_MAP_COLOR\fR
is true, each color component is scaled by tha size of tha correspondin color\-to\-color map, then replaced by tha contentz of dat map indexed by tha scaled component\&. That is, tha red component is scaled by
\fBGL_PIXEL_MAP_R_TO_R_SIZE\fR, then replaced by tha contents of
\fBGL_PIXEL_MAP_R_TO_R\fR
indexed by itself\&. Da chronic component is scaled by
\fBGL_PIXEL_MAP_G_TO_G_SIZE\fR, then replaced by tha contents of
\fBGL_PIXEL_MAP_G_TO_G\fR
indexed by itself\&. Da blue component is scaled by
\fBGL_PIXEL_MAP_B_TO_B_SIZE\fR, then replaced by tha contents of
\fBGL_PIXEL_MAP_B_TO_B\fR
indexed by itself\& fo' realz. And tha alpha component is scaled by
\fBGL_PIXEL_MAP_A_TO_A_SIZE\fR, then replaced by tha contents of
\fBGL_PIXEL_MAP_A_TO_A\fR
indexed by itself\& fo' realz. All components taken from tha maps is then clamped ta tha range
0 1\&.
\fBGL_MAP_COLOR\fR
is specified with
\fBglPixelTransfer\fR\&. Da contentz of tha various maps is specified with
\fBglPixelMap\fR()\&.
.sp
If the
ARB_imaging
extension is supported, each of tha four color components may be scaled n' biased afta transformation by tha color matrix\&. That is, tha red component is multiplied by
\fBGL_POST_COLOR_MATRIX_RED_SCALE\fR, then added to
\fBGL_POST_COLOR_MATRIX_RED_BIAS\fR; tha chronic component is multiplied by
\fBGL_POST_COLOR_MATRIX_GREEN_SCALE\fR, then added to
\fBGL_POST_COLOR_MATRIX_GREEN_BIAS\fR; tha blue component is multiplied by
\fBGL_POST_COLOR_MATRIX_BLUE_SCALE\fR, then added to
\fBGL_POST_COLOR_MATRIX_BLUE_BIAS\fR; n' tha alpha component is multiplied by
\fBGL_POST_COLOR_MATRIX_ALPHA_SCALE\fR, then added to
\fBGL_POST_COLOR_MATRIX_ALPHA_BIAS\fR\& fo' realz. Afta all four color components is scaled n' biased, each is clamped ta tha range
0 1\&.
.sp
Similarly, if the
ARB_imaging
extension is supported, each of tha four color components may be scaled n' biased afta processin by tha enabled convolution filter\&. That is, tha red component is multiplied by
\fBGL_POST_CONVOLUTION_RED_SCALE\fR, then added to
\fBGL_POST_CONVOLUTION_RED_BIAS\fR; tha chronic component is multiplied by
\fBGL_POST_CONVOLUTION_GREEN_SCALE\fR, then added to
\fBGL_POST_CONVOLUTION_GREEN_BIAS\fR; tha blue component is multiplied by
\fBGL_POST_CONVOLUTION_BLUE_SCALE\fR, then added to
\fBGL_POST_CONVOLUTION_BLUE_BIAS\fR; n' tha alpha component is multiplied by
\fBGL_POST_CONVOLUTION_ALPHA_SCALE\fR, then added to
\fBGL_POST_CONVOLUTION_ALPHA_BIAS\fR\& fo' realz. Afta all four color components is scaled n' biased, each is clamped ta tha range
0 1\&.
.RE
.PP
\fIColor index\fR
.RS 4
Each color index is shifted left by
\fBGL_INDEX_SHIFT\fR
bits; any bits beyond tha number of fraction bits carried by tha fixed\-point index is filled wit zeros\&. If
\fBGL_INDEX_SHIFT\fR
is negative, tha shift is ta tha right, again n' again n' again zero filled\&. Then
\fBGL_INDEX_OFFSET\fR
is added ta tha index\&.
\fBGL_INDEX_SHIFT\fR
and
\fBGL_INDEX_OFFSET\fR
are specified with
\fBglPixelTransfer\fR\&.
.sp
From dis point, operation diverges dependin on tha required format of tha resultin pixels\&. If tha resultin pixels is ta be freestyled ta a cold-ass lil color index buffer, or if they is bein read back ta client memory in
\fBGL_COLOR_INDEX\fR
format, tha pixels continue ta be treated as indices\&. If
\fBGL_MAP_COLOR\fR
is true, each index is maxed by
2 n \- 1, where
n
is
\fBGL_PIXEL_MAP_I_TO_I_SIZE\fR, then replaced by tha contents of
\fBGL_PIXEL_MAP_I_TO_I\fR
indexed by tha maxed value\&.
\fBGL_MAP_COLOR\fR
is specified with
\fBglPixelTransfer\fR\&. Da contentz of tha index map is specified with
\fBglPixelMap\fR()\&.
.sp
If tha resultin pixels is ta be freestyled ta a RGBA color buffer, or if they is read back ta client memory up in a gangbangin' format other than
\fBGL_COLOR_INDEX\fR, tha pixels is converted from indices ta flavas by referencin tha four maps
\fBGL_PIXEL_MAP_I_TO_R\fR,
\fBGL_PIXEL_MAP_I_TO_G\fR,
\fBGL_PIXEL_MAP_I_TO_B\fR, and
\fBGL_PIXEL_MAP_I_TO_A\fR\&. Before bein dereferenced, tha index is maxed by
2 n \- 1, where
n
is
\fBGL_PIXEL_MAP_I_TO_R_SIZE\fR
for tha red map,
\fBGL_PIXEL_MAP_I_TO_G_SIZE\fR
for tha chronic map,
\fBGL_PIXEL_MAP_I_TO_B_SIZE\fR
for tha blue map, and
\fBGL_PIXEL_MAP_I_TO_A_SIZE\fR
for tha alpha map\& fo' realz. All components taken from tha maps is then clamped ta tha range
0 1\&. Da contentz of tha four maps is specified with
\fBglPixelMap\fR()\&.
.RE
.PP
\fIDepth\fR
.RS 4
Each depth value is multiplied by
\fBGL_DEPTH_SCALE\fR, added to
\fBGL_DEPTH_BIAS\fR, then clamped ta tha range
0 1\&.
.RE
.PP
\fIStencil\fR
.RS 4
Each index is shifted
\fBGL_INDEX_SHIFT\fR
bits just as a cold-ass lil color index is, then added to
\fBGL_INDEX_OFFSET\fR\&. If
\fBGL_MAP_STENCIL\fR
is true, each index is maxed by
2 n \- 1, where
n
is
\fBGL_PIXEL_MAP_S_TO_S_SIZE\fR, then replaced by tha contents of
\fBGL_PIXEL_MAP_S_TO_S\fR
indexed by tha maxed value\&.
.RE
.PP
Da followin table gives tha type, initial value, n' range of valid joints fo' each of tha pixel transfer parametas dat is set with
\fBglPixelTransfer\fR\&.
.PP
.TS
allbox tab(:);
lB cB cB cB.
T{
\fB
                        \fR\fB\fIpname\fR\fR\fB
                        \fR
T}:T{
\fB
                        Type
                        \fR
T}:T{
\fB
                        Initial Value
                        \fR
T}:T{
\fB
                        Valid Range
                        \fR
T}
.T&
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c
l c c c.
T{
\fBGL_MAP_COLOR\fR
T}:T{
boolean
T}:T{
false
T}:T{
true/false
T}
T{
\fBGL_MAP_STENCIL\fR
T}:T{
boolean
T}:T{
false
T}:T{
true/false
T}
T{
\fBGL_INDEX_SHIFT\fR
T}:T{
integer
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_INDEX_OFFSET\fR
T}:T{
integer
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_RED_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_GREEN_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_BLUE_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_ALPHA_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_DEPTH_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_RED_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_GREEN_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_BLUE_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_ALPHA_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_DEPTH_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_RED_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_GREEN_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_BLUE_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_ALPHA_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_RED_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_GREEN_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_BLUE_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_COLOR_MATRIX_ALPHA_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_RED_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_GREEN_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_BLUE_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_ALPHA_SCALE\fR
T}:T{
float
T}:T{
1
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_RED_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_GREEN_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_BLUE_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
T{
\fBGL_POST_CONVOLUTION_ALPHA_BIAS\fR
T}:T{
float
T}:T{
0
T}:T{
\-
T}
.TE
.sp 1
.PP
\fBglPixelTransferf\fR
can be used ta set any pixel transfer parameter\&. If tha parameta type is boolean, 0 implies false n' any other value implies true\&. If
\fIpname\fR
is a integer parameter,
\fIparam\fR
is rounded ta tha nearest integer\&.
.PP
Likewise,
\fBglPixelTransferi\fR
can be used ta set any of tha pixel transfer parameters\&. Boolean parametas is set ta false if
\fIparam\fR
is 0 n' ta legit otherwise\&.
\fIparam\fR
is converted ta floatin point before bein assigned ta real\-valued parameters\&.
.SH "NOTES"
.PP
If a
\fBglColorTable\fR(),
\fBglColorSubTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglCopyPixels\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglDrawPixels\fR(),
\fBglReadPixels\fR(),
\fBglSeparableFilter2D\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(), or
\fBglTexSubImage3D\fR()
command is placed up in a gangbangin' finger-lickin' display list (see
\fBglNewList\fR()
and
\fBglCallList\fR()), tha pixel transfer mode settings up in effect when tha display list is
\fIexecuted\fR
are tha ones dat is used\&. They may be different from tha settings when tha command was compiled tha fuck into tha display list\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIpname\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglPixelTransfer\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAP_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAP_STENCIL\fR
.PP
\fBglGet\fR()
with argument
\fBGL_INDEX_SHIFT\fR
.PP
\fBglGet\fR()
with argument
\fBGL_INDEX_OFFSET\fR
.PP
\fBglGet\fR()
with argument
\fBGL_RED_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_RED_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_GREEN_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_GREEN_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLUE_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLUE_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_ALPHA_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_ALPHA_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_DEPTH_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_DEPTH_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_RED_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_RED_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_GREEN_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_GREEN_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_BLUE_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_BLUE_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_ALPHA_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_COLOR_MATRIX_ALPHA_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_RED_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_RED_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_GREEN_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_GREEN_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_BLUE_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_BLUE_BIAS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_ALPHA_SCALE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_POST_CONVOLUTION_ALPHA_BIAS\fR
.SH "SEE ALSO"
.PP
\fBglCallList\fR(),
\fBglColorTable\fR(),
\fBglColorSubTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglCopyPixels\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglDrawPixels\fR(),
\fBglNewList\fR(),
\fBglPixelMap\fR(),
\fBglPixelStore\fR(),
\fBglPixelZoom\fR(),
\fBglReadPixels\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
