'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbSetAccessXTimeout 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbSetAccessXTimeout \- Configures tha AccessXTimeout options fo' a keyboard 
device
.SH SYNOPSIS
.HP
.B Bool XkbSetAccessXTimeout
.BI "(\^Display *" "display" "\^,"
.BI "unsigned int " "device_spec" "\^,"
.BI "unsigned short " "timeout" "\^,"
.BI "unsigned int " "ctrls_mask" "\^,"
.BI "unsigned int " "ctrls_values" "\^,"
.BI "unsigned short " "opts_mask" "\^,"
.BI "unsigned short " "opts_values" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- display
connection ta X server
.TP
.I \- device_spec
device ta configure, or XkbUseCoreKbd
.TP
.I \- timeout
secondz idle until AccessXTimeout occurs
.TP
.I \- ctrls_mask
boolean controls ta modify 
.TP
.I \- ctrls_values
new bits fo' controls selected by ctrls_mask
.TP
.I \- opts_mask
ax_options ta chizzle
.TP
.I \- opts_values
new bits fo' ax_options selected by opts_mask
.SH DESCRIPTION
.LP
In environments where computas is shared, features like fuckin SlowKeys present a 
problem: if SlowKeys is on, tha keyboard can step tha fuck up ta be unresponsive cuz 
keys is not accepted until they is held fo' a cold-ass lil certain period of time. To help 
solve dis problem, Xkb serves up a AccessXTimeout control ta automatically 
change tha enabled/disabled state of any boolean controls n' ta chizzle tha 
value of tha AccessXKeys n' AccessXFeedback control attributes if tha keyboard 
is idle fo' a specified period of time.

When a timeout as specified by AccessXTimeout occurs n' a cold-ass lil control is 
consequently modified, Xkb generates a XkbControlsNotify event. For mo' 
information on XkbControlsNotify events.

.I timeout 
specifies tha number of secondz tha keyboard must be idle before tha controls 
are modified. Y'all KNOW dat shit, muthafucka! 
.I ctrls_mask 
specifies what tha fuck controls is ta be enabled or disabled, n' 
.I ctrls_values 
specifies whether dem controls is ta be enabled or disabled. Y'all KNOW dat shit, muthafucka! Da bit joints 
correspond ta dem fo' enablin n' disablin boolean controls rockin 
.I XkbChangeEnabledControls.
 Da 
.I opts_mask 
field specifies which attributez of tha AccessXKeys n' AccessXFeedback controls 
are ta be chizzled, n' 
.I opts_values 
specifies tha freshly smoked up joints fo' dem options. Da bit joints correspond ta dem 
for tha 
.I ax_options 
field of a XkbDescRec.

.I XkbSetAccessXTimeout 
sendz a request ta configure tha AccessXTimeout control ta tha server n' shit. Well shiiiit, it do 
not wait fo' a reply, n' normally returns True. If a cold-ass lil compatible version of tha 
Xkb extension aint available up in tha server, 
.I XkbSetAccessXTimeout 
returns False.
.SH "RETURN VALUES"
.TP 15
True
Da 
.I XkbSetAccessXTimeout
function returns True when a cold-ass lil compatible version of tha Xkb extension be available up in tha server.
.TP 15
False
Da 
.I XkbSetAccessXTimeout
function returns False when a cold-ass lil compatible version of tha Xkb extension aint available up in tha server.
.SH STRUCTURES
.LP
Da complete description of a Xkb keyboard is given by a XkbDescRec. Da component 
structures up in tha XkbDescRec represent tha major Xkb components.

.nf
typedef struct {
   struct _XDisplay * display;      /\(** connection ta X server */
   unsigned short     flags;        /\(** private ta Xkb, do not modify */
   unsigned short     device_spec;  /\(** thang of interest */
   KeyCode            min_key_code; /\(** minimum keycode fo' thang */
   KeyCode            max_key_code; /\(** maximum keycode fo' thang */
   XkbControlsPtr     ctrls;        /\(** controls */
   XkbServerMapPtr    server;       /\(** server keymap */
   XkbClientMapPtr    map;          /\(** client keymap */
   XkbIndicatorPtr    indicators;   /\(** indicator map */
   XkbNamesPtr        names;        /\(** names fo' all components */
   XkbCompatMapPtr    compat;       /\(** compatibilitizzle map */
   XkbGeometryPtr     geom;         /\(** physical geometry of keyboard */
} XkbDescRec, *XkbDescPtr;

.fi
Da 
.I display 
field points ta a X display structure. Da 
.I flags field is private ta tha library: modifyin 
.I flags 
may yield unpredictable thangs up in dis biatch. Da 
.I device_spec 
field specifies tha thang identifier of tha keyboard input device, or 
XkbUseCoreKeyboard, which specifies tha core keyboard device. Da 
.I min_key_code
and 
.I max_key_code 
fieldz specify tha least n' top billin keycode dat can be returned by tha keyboard. Y'all KNOW dat shit, muthafucka! 

Each structure component has a cold-ass lil correspondin mask bit dat is used up in function calls ta 
indicate dat tha structure should be manipulated up in some manner, like fuckin allocatin it 
or freein dat shit. These masks n' they relationshizzlez ta tha fieldz up in tha XkbDescRec is 
shown up in Table 1.

.TS
c s s
l l l
l l l.
Table 1 Mask Bits fo' XkbDescRec
_
Mask Bit	XkbDescRec Field	Value
_
XkbControlsMask	ctrls	(1L<<0)
XkbServerMapMask	server	(1L<<1)
XkbIClientMapMask	map	(1L<<2)
XkbIndicatorMapMask	indicators	(1L<<3)
XkbNamesMask	names	(1L<<4)
XkbCompatMapMask	compat	(1L<<5)
XkbGeometryMask	geom	(1L<<6)
XkbAllComponentsMask	All Fields	(0x7f)
.TE

Da structure fo' tha XkbControlsNotify event is defined as bigs up:
.nf

    typedef struct {
        int           type;          /\(** Xkb extension base event code */
        unsigned long serial;        /\(** X server serial number fo' event */
        Bool          send_event;    /\(** True => synthetically generated */
        Display *     display;       /\(** server connection where event generated */
        Time          time;          /\(** server time when event generated */
        int           xkb_type;      /\(** XkbCompatMapNotify */
        int           device;        /\(** Xkb thang ID, aint gonna be XkbUseCoreKbd */
        unsigned int  chizzled_ctrls; /\(** bits indicatin which controls data have chizzled*/
        unsigned int  enabled_ctrls; /\(** controls currently enabled up in server */
        unsigned int  enabled_ctrl_changes; /\(** bits indicatin enabled/disabled controls */
        int           num_groups;    /\(** current number of keyboard crews */
        KeyCode       keycode;       /\(** != 0 => keycode of key causin chizzle */
        char          event_type;    /\(** Type of event causin chizzle */
        char          req_major;     /\(** major event code of event causin chizzle */
        char          req_minor;     /\(** minor event code of event causin chizzle */
    } XkbControlsNotifyEvent;
    
.fi    
.SH "SEE ALSO"
.BR XkbChangeEnabledControls (3)
