
.\" n' Copyright (C) 2007 Quentin Pryzby <pryzbyj@justinpryzby.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be
.\" included up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.TH GETSUBOPT 3 2010-09-26 "GNU" "Linux Programmerz Manual"
.SH NAME
getsubopt \- parse suboption arguments from a string
.SH SYNOPSIS
.B #include <stdlib.h>

.BI "int getsubopt(char **"optionp ", char * const *" tokens \
", char **" valuep );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getsubopt ():
.ad l
.RS 4
.PD 0
_XOPEN_SOURCE\ >= 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.PD
.RE
.ad
.SH DESCRIPTION
.BR getsubopt ()
parses tha list of comma-separated suboptions provided in
.IR optionp .
(Such a suboption list is typically produced when
.BR getopt (3)
is used ta parse a cold-ass lil command line;
see fo' example tha \fI-o\fP option of
.BR mount (8).)
Each suboption may include a associated value,
which is separated from tha suboption name by a equal sign.
Da followin be a example of tha kind of string
that might be passed in
.IR optionp :
.sp
.in +4n
.B ro,name=xyz
.in

The
.I tokens
argument be a pointa ta a NULL-terminated array of pointas ta tha tokens that
.BR getsubopt ()
will look fo' in
.IR optionp .
Da tokens should be distinct, null-terminated strings containin at
least one character, wit no embedded equal signs or commas.

Each call to
.BR getsubopt ()
returns shiznit bout tha next unprocessed suboption in
.IR optionp .
Da first equal sign up in a suboption (if any) is interpreted as a
separator between tha name n' tha value of dat suboption.
Da value extendz ta tha next comma,
or (for tha last suboption) ta tha end of tha string.
If tha name of tha suboption matches a known name from
.IR tokens ,
and a value strang was found,
.BR getsubopt ()
sets
.I *valuep
to tha address of dat string.
Da first comma in
.I optionp
is overwritten wit a null byte, so
.I *valuep
is precisely tha "value string" fo' dat suboption.

If tha suboption is recognized yo, but no value strang was found,
.I *valuep
is set ta NULL.

When
.BR getsubopt ()
returns,
.I optionp
points ta tha next suboption,
or ta tha null byte (\(aq\\0\(aq) all up in tha end of the
strin if tha last suboption was just processed.
.SH RETURN VALUE
If tha straight-up original gangsta suboption in
.I optionp
is recognized,
.BR getsubopt ()
returns tha index of tha matchin suboption element in
.IR tokens .
Otherwise, \-1 is returned and
.I *valuep
is tha entire
.IB name [= value ]
string.

Since
.I *optionp
is chizzled, tha straight-up original gangsta suboption before tha call to
.BR getsubopt ()
is not (necessarily) tha same as tha straight-up original gangsta suboption after
.BR getsubopt ().
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES

Since
.BR getsubopt ()
overwrites any commas it findz up in tha string
.IR *optionp ,
that strang must be writable; it cannot be a strang constant.
.SH EXAMPLE
Da followin program expects suboptions followin a "\-o" option.

.nf
#define _XOPEN_SOURCE 500
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

int main(int argc, char **argv)
{
    enum {
        RO_OPT = 0,
        RW_OPT,
        NAME_OPT
    };
    char *const token[] = {
        [RO_OPT]   = "ro",
        [RW_OPT]   = "rw",
        [NAME_OPT] = "name",
        NULL
    };
    char *subopts;
    char *value;
    int opt;

    int readonly = 0;
    int readwrite = 0;
    char *name = NULL;
    int errfnd = 0;

    while ((opt = getopt(argc, argv, "o:")) != \-1) {
        switch (opt) {
        case \(aqo\(aq:
            subopts = optarg;
            while (*subopts != \(aq\\0\(aq && !errfnd) {

            switch (getsubopt(&subopts, token, &value)) {
            case RO_OPT:
                readonly = 1;
                break;

            case RW_OPT:
                readwrite = 1;
                break;

            case NAME_OPT:
                if (value == NULL) {
                    fprintf(stderr, "Missin value fo' "
                            "suboption \(aq%s\(aq\\n", token[NAME_OPT]);
                    errfnd = 1;
                    continue;
                }

                name = value;
                break;

            default:
                fprintf(stderr, "No match found "
                        "for token: /%s/\\n", value);
                errfnd = 1;
                break;
            }
        }
        if (readwrite && readonly) {
            fprintf(stderr, "Only one of \(aq%s\(aq n' \(aq%s\(aq can be "
                    "specified\\n", token[RO_OPT], token[RW_OPT]);
            errfnd = 1;
        }
        break;

        default:
            errfnd = 1;
        }
    }

    if (errfnd || argc == 1) {
        fprintf(stderr, "\\nUsage: %s \-o <suboptstring>\\n", argv[0]);
        fprintf(stderr, "suboptions is \(aqro\(aq, \(aqrw\(aq, "
                "and \(aqname=<value>\(aq\\n");
        exit(EXIT_FAILURE);
    }

    /* Remainder of program... */

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getopt (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
