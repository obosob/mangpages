'\" t
.\" Copyright (C) 2006 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH SEM_INIT 3 2012-05-13 "Linux" "Linux Programmerz Manual"
.SH NAME
sem_init \- initialize a unnamed semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_init(sem_t *" sem ", int " pshared ", unsigned int " value );
.fi
.sp
Link wit \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_init ()
initializes tha unnamed semaphore all up in tha address pointed ta by
.IR sem .
The
.I value
argument specifies tha initial value fo' tha semaphore.

The
.I pshared
argument indicates whether dis semaphore is ta be shared
between tha threadz of a process, or between processes.

If
.I pshared
has tha value 0,
then tha semaphore is shared between tha threadz of a process,
and should be located at some address dat is visible ta all threads
(e.g., a global variable, or a variable allocated dynamically on
the heap).

If
.I pshared
is nonzero, then tha semaphore is shared between processes,
and should be located up in a region of shared memory (see
.BR shm_open (3),
.BR mmap (2),
and
.BR shmget (2)).
(Since a cold-ass lil lil pimp pimped by
.BR fork (2)
inherits its parentz memory mappings, it can also access tha semaphore.)
Any process dat can access tha shared memory region
can operate on tha semaphore using
.BR sem_post (3),
.BR sem_wait (3),
etc.

Initializin a semaphore dat has already been initialized
results up in undefined behavior.
.SH RETURN VALUE
.BR sem_init ()
returns 0 on success;
on error, \-1 is returned, and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EINVAL
.I value
exceeds
.BR SEM_VALUE_MAX .
.TP
.B ENOSYS
.I pshared
is nonzero,
but tha system do not support process-shared semaphores (see
.BR sem_overview (7)).
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Bizarrely, POSIX.1-2001 do not specify tha value dat should
be returned by a successful call to
.BR sem_init ().
POSIX.1-2008 rectifies this, specifyin tha zero return on success.
.SH SEE ALSO
.BR sem_destroy (3),
.BR sem_post (3),
.BR sem_wait (3),
.BR sem_overview (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
