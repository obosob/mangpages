.\" Copyright (c) 2003-2009 Slim Tim Kientzle
.\" All muthafuckin rights reserved.
.\"
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd February 2, 2012
.Dt ARCHIVE_READ_DISK 3
.Os
.Sh NAME
.Nm archive_read_disk_new ,
.Nm archive_read_disk_set_symlink_logical ,
.Nm archive_read_disk_set_symlink_physical ,
.Nm archive_read_disk_set_symlink_hybrid ,
.Nm archive_read_disk_entry_from_file ,
.Nm archive_read_disk_gname ,
.Nm archive_read_disk_uname ,
.Nm archive_read_disk_set_uname_lookup ,
.Nm archive_read_disk_set_gname_lookup ,
.Nm archive_read_disk_set_standard_lookup ,
.Nm archive_read_close ,
.Nm archive_read_finish ,
.Nm archive_read_free
.Nd functions fo' readin objects from disk
.Sh LIBRARY
Streamin Archive Library (libarchive, -larchive)
.Sh SYNOPSIS
.In archive.h
.Ft struct archive *
.Fn archive_read_disk_new "void"
.Ft int
.Fn archive_read_disk_set_symlink_logical "struct archive *"
.Ft int
.Fn archive_read_disk_set_symlink_physical "struct archive *"
.Ft int
.Fn archive_read_disk_set_symlink_hybrid "struct archive *"
.Ft int
.Fn archive_read_disk_gname "struct archive *" "gid_t"
.Ft int
.Fn archive_read_disk_uname "struct archive *" "uid_t"
.Ft int
.Fo archive_read_disk_set_gname_lookup
.Fa "struct archive *"
.Fa "void *"
.Fa "const char *(*lookup)(void *, gid_t)"
.Fa "void (*cleanup)(void *)"
.Fc
.Ft int
.Fo archive_read_disk_set_uname_lookup
.Fa "struct archive *"
.Fa "void *"
.Fa "const char *(*lookup)(void *, uid_t)"
.Fa "void (*cleanup)(void *)"
.Fc
.Ft int
.Fn archive_read_disk_set_standard_lookup "struct archive *"
.Ft int
.Fo archive_read_disk_entry_from_file
.Fa "struct archive *"
.Fa "struct archive_entry *"
.Fa "int fd"
.Fa "const struct stat *"
.Fc
.Ft int
.Fn archive_read_close "struct archive *"
.Ft int
.Fn archive_read_finish "struct archive *"
.Ft int
.Fn archive_read_free "struct archive *"
.Sh DESCRIPTION
These functions provide a API fo' readin shiznit about
objects on disk.
In particular, they provide a intercourse fo' populating
.Tn struct archive_entry
objects.
.Bl -tag -width indent
.It Fn archive_read_disk_new
Allocates n' initializes a
.Tn struct archive
object suitable fo' readin object shiznit from disk.
.It Xo
.Fn archive_read_disk_set_symlink_logical ,
.Fn archive_read_disk_set_symlink_physical ,
.Fn archive_read_disk_set_symlink_hybrid
.Xc
This sets tha mode used fo' handlin symbolic links.
The
.Dq logical
mode bigs up all symbolic links.
The
.Dq physical
mode do not follow any symbolic links.
The
.Dq hybrid
mode currently behaves identically ta the
.Dq logical
mode.
.It Xo
.Fn archive_read_disk_gname ,
.Fn archive_read_disk_uname
.Xc
Returns a user or crew name given a gid or uid value.
By default, these always return a NULL string.
.It Xo
.Fn archive_read_disk_set_gname_lookup ,
.Fn archive_read_disk_set_uname_lookup
.Xc
These allow you ta override tha functions used for
user n' crew name lookups.
Yo ass may also provide a
.Tn void *
pointa ta a private data structure n' a cold-ass lil cleanup function for
that data.
Da cleanup function is ghon be invoked when the
.Tn struct archive
object is destroyed or when freshly smoked up lookup functions is registered.
.It Fn archive_read_disk_set_standard_lookup
This convenience function installs a standard set of user
and crew name lookup functions.
These functions use
.Xr getpwuid 3
and
.Xr getgrgid 3
to convert idz ta names, defaultin ta NULL if tha names cannot
be looked up.
These functions also implement a simple memory cache ta reduce
the number of calls to
.Xr getpwuid 3
and
.Xr getgrgid 3 .
.It Fn archive_read_disk_entry_from_file
Populates a
.Tn struct archive_entry
object wit shiznit on some particular file.
The
.Tn archive_entry
object must have already been pimped with
.Xr archive_entry_new 3
and at least one of tha source path or path fieldz must already be set.
(If both is set, tha source path is ghon be used.)
.Pp
Hype is read from disk rockin tha path name from the
.Tn struct archive_entry
object.
If a gangbangin' file descriptor is provided, some shiznit is ghon be obtained using
that file descriptor, on platforms dat support tha appropriate
system calls.
.Pp
If a pointa ta a
.Tn struct stat
is provided, shiznit from dat structure is ghon be used instead
of readin from tha disk where appropriate.
This can provide performizzle benefits up in scenarios where
.Tn struct stat
information has already been read from tha disk as a side effect
of some other operation.
(For example, directory traversal libraries often provide dis shiznit.)
.Pp
Where necessary, user n' crew idz is converted ta user n' crew names
usin tha currently registered lookup functions above.
This affects tha file ballershizzle fieldz n' ACL joints up in the
.Tn struct archive_entry
object.
.It Fn archive_read_close
Do not a god damn thang for
.Tn archive_read_disk
handles.
.It Fn archive_read_finish
This be a thugged-out deprecated synonym for
.Fn archive_read_free .
.It Fn archive_read_free
Invokes
.Fn archive_read_close
if dat shiznit was not invoked manually, then releases all resources.
.El
Mo' shiznit bout the
.Va struct archive
object n' tha overall design of tha library can be found up in the
.Xr libarchive 3
overview.
.Sh EXAMPLE
Da followin illustrates basic usage of tha library by
showin how tha fuck ta use it ta copy a item on disk tha fuck into a archive.
.Bd -literal -offset indent
void
file_to_archive(struct archive *a, const char *name)
{
  char buff[8192];
  size_t bytes_read;
  struct archive *ard;
  struct archive_entry *entry;
  int fd;

  ard = archive_read_disk_new();
  archive_read_disk_set_standard_lookup(ard);
  entry = archive_entry_new();
  fd = open(name, O_RDONLY);
  if (fd < 0)
     return;
  archive_entry_copy_pathname(entry, name);
  archive_read_disk_entry_from_file(ard, entry, fd, NULL);
  archive_write_header(a, entry);
  while ((bytes_read = read(fd, buff, sizeof(buff))) > 0)
    archive_write_data(a, buff, bytes_read);
  archive_write_finish_entry(a);
  archive_read_free(ard);
  archive_entry_free(entry);
}
.Ed
.Sh RETURN VALUES
Most functions return
.Cm ARCHIVE_OK
(zero) on success, or one of nuff muthafuckin negative
error codes fo' errors.
Specific error codes include:
.Cm ARCHIVE_RETRY
for operations dat might succeed if retried,
.Cm ARCHIVE_WARN
for unusual conditions dat do not prevent further operations, and
.Cm ARCHIVE_FATAL
for straight-up errors dat make remainin operations impossible.
.Pp
.Fn archive_read_disk_new
returns a pointa ta a newly-allocated
.Tn struct archive
object or NULL if tha allocation failed fo' any reason.
.Pp
.Fn archive_read_disk_gname
and
.Fn archive_read_disk_uname
return
.Tn const char *
pointas ta tha textual name or NULL if tha lookup failed fo' any reason.
Da returned pointa points ta internal storage that
may be reused on tha next call ta either of these functions;
callaz should copy tha strang if they need ta continue accessin dat shit.
.\"
.Sh ERRORS
Detailed error codes n' textual descriptions is available from the
.Fn archive_errno
and
.Fn archive_error_string
functions.
.\"
.Sh SEE ALSO
.Xr archive_read 3 ,
.Xr archive_util 3 ,
.Xr archive_write 3 ,
.Xr archive_write_disk 3 ,
.Xr tar 1 ,
.Xr libarchive 3
.Sh HISTORY
The
.Nm libarchive
library first rocked up in
.Fx 5.3 .
The
.Nm archive_read_disk
interface was added to
.Nm libarchive 2.6
and first rocked up in
.Fx 8.0 .
.Sh AUTHORS
.An -nosplit
The
.Nm libarchive
library was freestyled by
.An Slim Tim Kientzle Aq kientzle@FreeBSD.org .
.Sh BUGS
The
.Dq standard
user name n' crew name lookup functions is not tha defaults cuz
.Xr getgrgid 3
and
.Xr getpwuid 3
are sometimes too big-ass fo' particular applications.
Da current design allows tha application lyricist ta bust a more
compact implementation when appropriate.
.Pp
Da full list of metadata read from disk by
.Fn archive_read_disk_entry_from_file
is necessarily system-dependent.
.Pp
The
.Fn archive_read_disk_entry_from_file
function readz as much shiznit as it can from disk.
Some method should be provided ta limit dis so dat clients who
do not need ACLs, fo' instance, can avoid tha extra work needed
to look up such shiznit.
.Pp
This API should provide a set of methodz fo' struttin a gangbangin' finger-lickin' directory tree.
That would make it a gangbangin' finger-lickin' direct parallel of the
.Xr archive_read 3
API.
When such methodz is implemented, the
.Dq hybrid
symbolic link mode will make sense.
