" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::array< _Tp, _Nm > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef ::__array_traits< _Tp, 
.br
_Nm > \fB_AT_Type\fP"
.br
.ti -1c
.RI "typedef const value_type * \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef const value_type * \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const value_type & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP
.br
< const_iterator > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef std::ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef value_type * \fBiterator\fP"
.br
.ti -1c
.RI "typedef value_type * \fBpointer\fP"
.br
.ti -1c
.RI "typedef value_type & \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP
.br
< iterator > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef std::size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "reference \fBat\fP (size_type __n)"
.br
.ti -1c
.RI "constexpr const_reference \fBat\fP (size_type __n) const "
.br
.ti -1c
.RI "reference \fBback\fP ()"
.br
.ti -1c
.RI "constexpr const_reference \fBback\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.ti -1c
.RI "pointa \fBdata\fP () noexcept"
.br
.ti -1c
.RI "const_pointa \fBdata\fP () const noexcept"
.br
.ti -1c
.RI "constexpr bool \fBempty\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBend\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBfill\fP (const value_type &__u)"
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "constexpr const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "constexpr size_type \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __n)"
.br
.ti -1c
.RI "constexpr const_reference \fBoperator[]\fP (size_type __n) const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "constexpr size_type \fBsize\fP () const noexcept"
.br
.ti -1c
.RI "void \fBswap\fP (\fBarray\fP &__other) noexcept(noexcept(swap(\fBstd::declval\fP< _Tp & >(), \fBstd::declval\fP< _Tp & >())))"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "_AT_Type::_Type \fB_M_elems\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, std::size_t _Nm>struct std::array< _Tp, _Nm >"
A standard container fo' storin a gangbangin' fixed size sequence of elements\&. 

Meets tha requirementz of a \fCcontainer\fP, a \fCreversible container\fP, n' a \fCsequence\fP\&.
.PP
Sets support random access iterators\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fITp\fP Type of element\&. Required ta be a cold-ass lil complete type\&. 
.br
\fIN\fP Number of elements\&. 
.RE
.PP

.PP
Definizzle at line 81 of file array\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
