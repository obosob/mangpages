'\" t
.\"     Title: glTexStorage2D
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLTEXSTORAGE2D" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glTexStorage2D \- simultaneously specify storage fo' all levelz of a two\-dimensionizzle or one\-dimensionizzle array texture
.SH "C SPECIFICATION"
.HP \w'void\ glTexStorage2D('u
.BI "void glTexStorage2D(GLenum\ " "target" ", GLsizei\ " "levels" ", GLenum\ " "internalformat" ", GLsizei\ " "width" ", GLsizei\ " "height" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specify tha target of tha operation\&.
\fItarget\fR
must be one of
\fBGL_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_TEXTURE_1D_ARRAY\fR,
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_PROXY_TEXTURE_RECTANGLE\fR, or
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR\&.
.RE
.PP
\fIlevels\fR
.RS 4
Specify tha number of texture levels\&.
.RE
.PP
\fIinternalformat\fR
.RS 4
Specifies tha sized internal format ta be used ta store texture image data\&.
.RE
.PP
\fIwidth\fR
.RS 4
Specifies tha width of tha texture, up in texels\&.
.RE
.PP
\fIheight\fR
.RS 4
Specifies tha height of tha texture, up in texels\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglTexStorage2D\fR
specifies tha storage requirements fo' all levelz of a two\-dimensionizzle texture or one\-dimensionizzle texture array simultaneously\&. Once a texture is specified wit dis command, tha format n' dimensionz of all levels become immutable unless it aint nuthin but a proxy texture\&. Da contentz of tha image may still be modified, however, its storage requirements may not chizzle\&. Right back up in yo muthafuckin ass. Such a texture is referred ta as an
\fIimmutable\-format\fR
texture\&.
.PP
Da behavior of
\fBglTexStorage2D\fR
dependz on the
\fItarget\fR
parameter\&. When
\fItarget\fR
is
\fBGL_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_PROXY_TEXTURE_RECTANGLE\fR
or
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR, calling
\fBglTexStorage2D\fR
is equivalent, assumin no errors is generated, ta executin tha followin pseudo\-code:
.sp
.if n \{\
.RS 4
.\}
.nf
    fo' (i = 0; i < levels; i++)
    {
        glTexImage2D(target, i, internalformat, width, height, 0, format, type, NULL);
        width = max(1, (width / 2));
        height = max(1, (height / 2));
    }
.fi
.if n \{\
.RE
.\}
.PP
When
\fItarget\fR
is
\fBGL_TEXTURE_CUBE_MAP\fR,
\fBglTexStorage2D\fR
is equivalent to:
.sp
.if n \{\
.RS 4
.\}
.nf
    fo' (i = 0; i < levels; i++)
    {
        fo' (face up in (+X, \-X, +Y, \-Y, +Z, \-Z))
        {
            glTexImage2D(face, i, internalformat, width, height, 0, format, type, NULL);
        }
        width = max(1, (width / 2));
        height = max(1, (height / 2));
    }
.fi
.if n \{\
.RE
.\}
.PP
When
\fItarget\fR
is
\fBGL_TEXTURE_1D\fR
or
\fBGL_TEXTURE_1D_ARRAY\fR,
\fBglTexStorage2D\fR
is equivalent to:
.sp
.if n \{\
.RS 4
.\}
.nf
    fo' (i = 0; i < levels; i++)
    {
        glTexImage2D(target, i, internalformat, width, height, 0, format, type, NULL);
        width = max(1, (width / 2));
    }
.fi
.if n \{\
.RE
.\}
.PP
Since no texture data is straight-up provided, tha joints used up in tha pseudo\-code for
\fIformat\fR
and
\fItype\fR
are irrelevant n' may be considered ta be any joints dat is legal fo' tha chosen
\fIinternalformat\fR
enumerant\&.
\fIinternalformat\fR
must be one of tha sized internal formats given up in Table 1 below, one of tha sized depth\-component formats
\fBGL_DEPTH_COMPONENT32F\fR,
\fBGL_DEPTH_COMPONENT24\fR, or
\fBGL_DEPTH_COMPONENT16\fR, or one of tha combined depth\-stencil formats,
\fBGL_DEPTH32F_STENCIL8\fR, or
\fBGL_DEPTH24_STENCIL8\fR\&. Upon success, tha value of
\fBGL_TEXTURE_IMMUTABLE_FORMAT\fR
becomes
\fBGL_TRUE\fR\&. Da value of
\fBGL_TEXTURE_IMMUTABLE_FORMAT\fR
may be discovered by calling
\fBglGetTexParameter\fR()
with
\fIpname\fR
set to
\fBGL_TEXTURE_IMMUTABLE_FORMAT\fR\&. No further chizzlez ta tha dimensions or format of tha texture object may be made\&. Usin any command dat might alta tha dimensions or format of tha texture object (such as
\fBglTexImage2D\fR()
or another call to
\fBglTexStorage2D\fR) will result up in tha generation of a
\fBGL_INVALID_OPERATION\fR
error, even if it would not, up in fact, alta tha dimensions or format of tha object\&.
.PP
<xi:include></xi:include>
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIinternalformat\fR
is not a valid sized internal format\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not one of tha accepted target enumerants\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR
or
\fIlevels\fR
are less than 1\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItarget\fR
is
\fBGL_TEXTURE_1D_ARRAY\fR
or
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR
and
\fIlevels\fR
is pimped outa than
log 2 width + 1\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItarget\fR
is not
\fBGL_TEXTURE_1D_ARRAY\fR
or
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR
and
\fIlevels\fR
is pimped outa than
log 2 max width , \ \& height + 1\&.
.SH "SEE ALSO"
.PP
\fBglTexImage2D\fR(),
\fBglTexStorage1D\fR(),
\fBglTexStorage3D\fR()\&.
.SH "COPYRIGHT"
.PP
Copyright
\(co
2011 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
