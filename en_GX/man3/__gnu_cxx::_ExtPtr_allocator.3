" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::_ExtPtr_allocator< _Tp > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fB_Pointer_adapter\fP
.br
< \fB_Relative_pointer_impl\fP
.br
< const _Tp > > \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const _Tp & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef std::ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fB_Pointer_adapter\fP
.br
< \fB_Relative_pointer_impl\fP< _Tp > > \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Tp & \fBreference\fP"
.br
.ti -1c
.RI "typedef std::size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB_ExtPtr_allocator\fP (const \fB_ExtPtr_allocator\fP &__rarg) noexcept"
.br
.ti -1c
.RI "template<typename _Up > \fB_ExtPtr_allocator\fP (const \fB_ExtPtr_allocator\fP< _Up > &__rarg) noexcept"
.br
.ti -1c
.RI "const \fBstd::allocator\fP< _Tp > & \fB_M_getUnderlyingImp\fP () const "
.br
.ti -1c
.RI "\fBpointer\fP \fBaddress\fP (reference __x) const noexcept"
.br
.ti -1c
.RI "\fBconst_pointer\fP \fBaddress\fP (const_reference __x) const noexcept"
.br
.ti -1c
.RI "\fBpointer\fP \fBallocate\fP (size_type __n, void *__hint=0)"
.br
.ti -1c
.RI "template<typename _Up , typename\&.\&.\&. _Args> void \fBconstruct\fP (_Up *__p, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> void \fBconstruct\fP (\fBpointer\fP __p, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (\fBpointer\fP __p, size_type __n)"
.br
.ti -1c
.RI "template<typename _Up > void \fBdestroy\fP (_Up *__p)"
.br
.ti -1c
.RI "void \fBdestroy\fP (\fBpointer\fP __p)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "template<typename _Up > bool \fBoperator!=\fP (const \fB_ExtPtr_allocator\fP< _Up > &__rarg)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fB_ExtPtr_allocator\fP &__rarg)"
.br
.ti -1c
.RI "template<typename _Up > bool \fBoperator==\fP (const \fB_ExtPtr_allocator\fP< _Up > &__rarg)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fB_ExtPtr_allocator\fP &__rarg)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _Up > void \fBswap\fP (\fB_ExtPtr_allocator\fP< _Up > &, \fB_ExtPtr_allocator\fP< _Up > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp>class __gnu_cxx::_ExtPtr_allocator< _Tp >"
An example allocator which uses a non-standard pointa type\&.
.PP
This allocator specifies dat containers bust a 'relatizzle pointer' as itz pointa type\&. (See ext/pointer\&.h) Memory allocation up in dis example is still performed rockin std::allocator\&. 
.PP
Definizzle at line 56 of file extptr_allocator\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
