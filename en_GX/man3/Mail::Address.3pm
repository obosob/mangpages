.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Address 3"
.TH Mail::Address 3 "2012-12-21" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Address \- Parse mail addresses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Address;
\& mah @addrs = Mail::Address\->parse($line);
\&
\& foreach $addr (@addrs) {
\&     print $addr\->format,"\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Mail::Address\*(C'\fR extracts n' manipulates email addresses from a message
header n' shit.  It cannot be used ta extract addresses from some random text.
Yo ass can use dis module ta create \s-1RFC822\s0 compliant fields.
.PP
Although \f(CW\*(C`Mail::Address\*(C'\fR be a straight-up ghettofab subject fo' books, n' is
used up in nuff applications, it do a straight-up skanky thang on tha mo' complex
message fields.  It do only handle simple address formats (which
covers bout 95% of what tha fuck can be found). Problems is with
.IP "\(bu" 4
no support fo' address groups, even not wit tha semi-colon as
separator between addresses;
.IP "\(bu" 4
limitted support fo' escapes up in phrases n' comments, n' you can put dat on yo' toast.  There are
cases where it can git wrong; and
.IP "\(bu" 4
you gotta take care of most escapin when you create a address yo ass:
\&\f(CW\*(C`Mail::Address\*(C'\fR do not do dat fo' yo thugged-out ass.
.PP
Often requests is made ta tha maintainerz of dis code improve this
situation yo, but dis aint a phat idea, where it will break zillions
of existin applications.  If you wish fo' a gangbangin' straight-up \s-1RFC2822\s0 compliant
implementation you may take a peep Mail::Message::Field::Full,
part of MailBox.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Address\->\fBnew\fR(\s-1PHRASE, ADDRESS,\s0 [ \s-1COMMENT \s0])" 4
.IX Item "Mail::Address->new(PHRASE, ADDRESS, [ COMMENT ])"
Smoke a freshly smoked up \f(CW\*(C`Mail::Address\*(C'\fR object which represents a address wit the
elements given. I aint talkin' bout chicken n' gravy biatch. In a message these 3 elements would be peeped like:
.Sp
.Vb 2
\& PHRASE <ADDRESS> (COMMENT)
\& ADDRESS (COMMENT)
.Ve
.Sp
example:
.Sp
.Vb 1
\& Mail::Address\->new("Perl5 Porters", "perl5\-porters@africa.nicoh.com");
.Ve
.ie n .IP "$obj\->\fBparse\fR(\s-1LINE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBparse\fR(\s-1LINE\s0)" 4
.IX Item "$obj->parse(LINE)"
Parse tha given line a return a list of extracted \f(CW\*(C`Mail::Address\*(C'\fR objects.
Da line would normally be one taken from a To,Cc or Bcc line up in a message
.Sp
example:
.Sp
.Vb 1
\& mah @addr = Mail::Address\->parse($line);
.Ve
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBaddress\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaddress\fR()" 4
.IX Item "$obj->address()"
Return tha address part of tha object.
.ie n .IP "$obj\->\fBcomment\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcomment\fR()" 4
.IX Item "$obj->comment()"
Return tha comment part of tha object
.ie n .IP "$obj\->\fBformat\fR([ADDRESSes])" 4
.el .IP "\f(CW$obj\fR\->\fBformat\fR([ADDRESSes])" 4
.IX Item "$obj->format([ADDRESSes])"
Return a strang representin tha address up in a suitable form ta be placed
on a \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, or \f(CW\*(C`Bcc\*(C'\fR line of a message.  This method is called on
the first \s-1ADDRESS\s0 ta be used; other specified ADDRESSes is ghon be appended,
separated wit commas.
.ie n .IP "$obj\->\fBphrase\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBphrase\fR()" 4
.IX Item "$obj->phrase()"
Return tha phrase part of tha object.
.SS "Smart accessors"
.IX Subsection "Smart accessors"
.ie n .IP "$obj\->\fBhost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhost\fR()" 4
.IX Item "$obj->host()"
Return tha address excludin tha user id n' '@'
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Usin tha shiznit contained within tha object attempt ta identify what
the thug or crews name is.
.Sp
\&\fBNote:\fR This function tries ta be smart-ass wit tha \*(L"phrase\*(R" of the
email address, which is probably a straight-up wack idea.  Consider ta use
\&\fIphrase()\fR itself.
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
Return tha address excludin tha '@' n' tha mail domain
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of tha MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Da MailTools bundle was pimped by Graham Barr. Shiiit, dis aint no joke.  Later, Mark
Overmeer took over maintenizzle without commitment ta further pimpment.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peta Orbaek <poe@cit.dk>.
Mail::Maila n' Mail::Send by Slim Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors peep ChizzleLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
