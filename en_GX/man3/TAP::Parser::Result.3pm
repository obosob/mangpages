.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Result 3"
.TH TAP::Parser::Result 3 "2013-05-02" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::Result \- Base class fo' TAP::Parser output objects
.SH "VERSION"
.IX Header "VERSION"
Version 3.28
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # abstract class \- not meant ta be used directly
\&  # peep TAP::Parser::ResultFactory fo' preferred usage
\&
\&  # directly:
\&  use TAP::Parser::Result;
\&  mah $token  = {...};
\&  mah $result = TAP::Parser::Result\->new( $token );
.Ve
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
This be a simple base class used by TAP::Parser ta store objects that
represent tha current bit of test output data from \s-1TAP \s0(usually a single
line).  Unless you subclassing, you probably won't need ta use dis module
directly.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\&  # peep TAP::Parser::ResultFactory fo' preferred usage
\&
\&  # ta use directly:
\&  mah $result = TAP::Parser::Result\->new($token);
.Ve
.PP
Returns a instizzle tha appropriate class fo' tha test token passed in.
.SS "Boolean methods"
.IX Subsection "Boolean methods"
Da followin methodz all return a funky-ass boolean value n' is ta be overridden in
the appropriate subclass.
.IP "\(bu" 4
\&\f(CW\*(C`is_plan\*(C'\fR
.Sp
Indicates whether or not dis is tha test plan line.
.Sp
.Vb 1
\& 1..3
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`is_pragma\*(C'\fR
.Sp
Indicates whether or not dis be a pragma line.
.Sp
.Vb 1
\& pragma +strict
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`is_test\*(C'\fR
.Sp
Indicates whether or not dis be a test line.
.Sp
.Vb 1
\& aiiight 1 Is OK!
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`is_comment\*(C'\fR
.Sp
Indicates whether or not dis be a cold-ass lil comment.
.Sp
.Vb 1
\& # dis be a cold-ass lil comment
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`is_bailout\*(C'\fR
.Sp
Indicates whether or not dis is bailout line.
.Sp
.Vb 1
\& Bail up son! We\*(Aqre outta dilithium crystals.
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`is_version\*(C'\fR
.Sp
Indicates whether or not dis be a \s-1TAP\s0 version line.
.Sp
.Vb 1
\& TAP version 4
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`is_unknown\*(C'\fR
.Sp
Indicates whether or not tha current line could be parsed.
.Sp
.Vb 1
\& ... dis line is junk ...
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`is_yaml\*(C'\fR
.Sp
Indicates whether or not dis be a \s-1YAML\s0 chunk.
.PP
\fI\f(CI\*(C`raw\*(C'\fI\fR
.IX Subsection "raw"
.PP
.Vb 1
\&  print $result\->raw;
.Ve
.PP
Returns tha original gangsta line of text which was parsed.
.PP
\fI\f(CI\*(C`type\*(C'\fI\fR
.IX Subsection "type"
.PP
.Vb 1
\&  mah $type = $result\->type;
.Ve
.PP
Returns tha \*(L"type\*(R" of a token, like fuckin \f(CW\*(C`comment\*(C'\fR or \f(CW\*(C`test\*(C'\fR.
.PP
\fI\f(CI\*(C`as_string\*(C'\fI\fR
.IX Subsection "as_string"
.PP
.Vb 1
\&  print $result\->as_string;
.Ve
.PP
Prints a strang representation of tha token. I aint talkin' bout chicken n' gravy biatch.  This might not be tha exact
output, however n' shit.  Tests gonna git test numbers added if not present, \s-1TODO\s0 and
\&\s-1SKIP\s0 directives is ghon be capitalized and, up in general, thangs is ghon be cleaned
up.  If you need tha original gangsta text fo' tha token, peep tha \f(CW\*(C`raw\*(C'\fR method.
.PP
\fI\f(CI\*(C`is_ok\*(C'\fI\fR
.IX Subsection "is_ok"
.PP
.Vb 1
\&  if ( $result\->is_ok ) { ... }
.Ve
.PP
Reports whether or not a given result has passed. Y'all KNOW dat shit, muthafucka!  Anythang which is \fBnot\fR a
test result returns true.  This is merely provided as a cold-ass lil convenient shortcut.
.PP
\fI\f(CI\*(C`passed\*(C'\fI\fR
.IX Subsection "passed"
.PP
Deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Please use \f(CW\*(C`is_ok\*(C'\fR instead.
.PP
\fI\f(CI\*(C`has_directive\*(C'\fI\fR
.IX Subsection "has_directive"
.PP
.Vb 3
\&  if ( $result\->has_directizzle ) {
\&     ...
\&  }
.Ve
.PP
Indicates whether or not tha given result has a \s-1TODO\s0 or \s-1SKIP\s0 directive.
.PP
\fI\f(CI\*(C`has_todo\*(C'\fI\fR
.IX Subsection "has_todo"
.PP
.Vb 3
\& if ( $result\->has_todo ) {
\&     ...
\& }
.Ve
.PP
Indicates whether or not tha given result has a \s-1TODO\s0 directive.
.PP
\fI\f(CI\*(C`has_skip\*(C'\fI\fR
.IX Subsection "has_skip"
.PP
.Vb 3
\& if ( $result\->has_skip ) {
\&     ...
\& }
.Ve
.PP
Indicates whether or not tha given result has a \s-1SKIP\s0 directive.
.PP
\fI\f(CI\*(C`set_directive\*(C'\fI\fR
.IX Subsection "set_directive"
.PP
Set tha directizzle associated wit dis token. I aint talkin' bout chicken n' gravy biatch. Used internally ta fake
\&\s-1TODO\s0 tests.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please peep \*(L"\s-1SUBCLASSING\*(R"\s0 up in TAP::Parser fo' a subclassin overview.
.PP
Remember: if you want yo' subclass ta be automatically used by tha parser,
yo dirty ass is gonna gotta regista it wit \*(L"register_type\*(R" up in TAP::Parser::ResultFactory.
.PP
If you bustin a cold-ass lil straight-up freshly smoked up result \fItype\fR, you gonna probably need to
subclass TAP::Parser::Grammar too, or else it'll never git used.
.SS "Example"
.IX Subsection "Example"
.Vb 1
\&  package MyResult;
\&
\&  use strict;
\&  use vars \*(Aq@ISA\*(Aq;
\&
\&  @ISA = \*(AqTAP::Parser::Result\*(Aq;
\&
\&  # regista wit tha factory:
\&  TAP::Parser::ResultFactory\->register_type( \*(Aqmy_type\*(Aq => _\|_PACKAGE_\|_ );
\&
\&  sub as_strin { \*(AqMy fuckin thangs up in dis biatch all look tha same\*(Aq }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::ResultFactory,
TAP::Parser::Result::Bailout,
TAP::Parser::Result::Comment,
TAP::Parser::Result::Plan,
TAP::Parser::Result::Pragma,
TAP::Parser::Result::Test,
TAP::Parser::Result::Unknown,
TAP::Parser::Result::Version,
TAP::Parser::Result::YAML,
