.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CMS_encrypt 3"
.TH CMS_encrypt 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\& CMS_encrypt \- create a CMS envelopedData structure
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/cms.h>
\&
\& CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher, unsigned int flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fICMS_encrypt()\fR creates n' returns a \s-1CMS\s0 EnvelopedData structure. \fBcerts\fR
is a list of recipient certificates. \fBin\fR is tha content ta be encrypted.
\&\fBcipher\fR is tha symmetric cipher ta use. \fBflags\fR be a optionizzle set of flags.
.SH "NOTES"
.IX Header "NOTES"
Only certificates carryin \s-1RSA\s0 keys is supported so tha recipient certificates
supplied ta dis function must all contain \s-1RSA\s0 hood keys, though they do not
have ta be signed rockin tha \s-1RSA\s0 algorithm.
.PP
\&\fIEVP_des_ede3_cbc()\fR (triple \s-1DES\s0) is tha algorithm of chizzle fo' S/MIME use
because most clients will support dat shit.
.PP
Da algorithm passed up in tha \fBcipher\fR parameta must support \s-1ASN1\s0 encodin of
its parameters.
.PP
Many browsers implement a \*(L"sign n' encrypt\*(R" option which is simply a S/MIME
envelopedData containin a S/MIME signed message. This can be readily produced
by storin tha S/MIME signed message up in a memory \s-1BIO\s0 n' passin it to
\&\fICMS_encrypt()\fR.
.PP
Da followin flags can be passed up in tha \fBflags\fR parameter.
.PP
If tha \fB\s-1CMS_TEXT\s0\fR flag is set \s-1MIME\s0 headaz fo' type \fBtext/plain\fR are
prepended ta tha data.
.PP
Normally tha supplied content is translated tha fuck into \s-1MIME\s0 canonical format (as
required by tha S/MIME justifications) if \fB\s-1CMS_BINARY\s0\fR is set no translation
occurs. This option should be used if tha supplied data is up in binary format
otherwise tha translation will corrupt dat shit. If \fB\s-1CMS_BINARY\s0\fR is set then
\&\fB\s-1CMS_TEXT\s0\fR is ignored.
.PP
OpenSSL will by default identify recipient certificates rockin issuer name
and serial number n' shit. If \fB\s-1CMS_USE_KEYID\s0\fR is set it will use tha subject key
identifier value instead. Y'all KNOW dat shit, muthafucka! An error occurs if all recipient certificates do not
have a subject key identifier extension.
.PP
If tha \fB\s-1CMS_STREAM\s0\fR flag is set a partial \fBCMS_ContentInfo\fR structure is
returned suitable fo' streamin I/O: no data is read from tha \s-1BIO \s0\fBin\fR.
.PP
If tha \fB\s-1CMS_PARTIAL\s0\fR flag is set a partial \fBCMS_ContentInfo\fR structure is
returned ta which additionizzle recipients n' attributes can be added before
finalization.
.PP
Da data bein encrypted is included up in tha CMS_ContentInfo structure, unless
\&\fB\s-1CMS_DETACHED\s0\fR is set up in which case it is omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is rarely used in
practice n' aint supported by \fISMIME_write_CMS()\fR.
.SH "NOTES"
.IX Header "NOTES"
If tha flag \fB\s-1CMS_STREAM\s0\fR is set tha returned \fBCMS_ContentInfo\fR structure is
\&\fBnot\fR complete n' outputtin its contents via a gangbangin' function dat do not
properly finalize tha \fBCMS_ContentInfo\fR structure will give unpredictable
results.
.PP
Several functions includin \fISMIME_write_CMS()\fR, \fIi2d_CMS_bio_stream()\fR,
\&\fIPEM_write_bio_CMS_stream()\fR finalize tha structure fo' realz. Alternatively finalization
can be performed by obtainin tha streamin \s-1ASN1 \s0\fB\s-1BIO\s0\fR directly using
\&\fIBIO_new_CMS()\fR.
.PP
Da recipients specified up in \fBcerts\fR bust a \s-1CMS\s0 KeyTransRecipientInfo info
structure. KEKRecipientInfo be also supported rockin tha flag \fB\s-1CMS_PARTIAL\s0\fR
and \fICMS_add0_recipient_key()\fR.
.PP
Da parameta \fBcerts\fR may be \s-1NULL\s0 if \fB\s-1CMS_PARTIAL\s0\fR is set n' recipients
added lata rockin \fICMS_add1_recipient_cert()\fR or \fICMS_add0_recipient_key()\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fICMS_encrypt()\fR returns either a CMS_ContentInfo structure or \s-1NULL\s0 if a error
occurred. Y'all KNOW dat shit, muthafucka! Da error can be obtained from \fIERR_get_error\fR\|(3).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIERR_get_error\fR\|(3), \fICMS_decrypt\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fICMS_decrypt()\fR was added ta OpenSSL 0.9.8
Da \fB\s-1CMS_STREAM\s0\fR flag was first supported up in OpenSSL 1.0.0.
