" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::iterator< _Category, _Tp, _Distance, _Pointer, _Reference > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Distizzle \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Category \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef _Pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Category, typename _Tp, typename _Distizzle = ptrdiff_t, typename _Pointa = _Tp*, typename _Reference = _Tp&>struct std::iterator< _Category, _Tp, _Distance, _Pointer, _Reference >"
Common iterator class\&. 

This class do not a god damn thang but define nested typedefs\&. Iterator classes can inherit from dis class ta save some work\&. Da typedefs is then used up in specializations n' overloading\&.
.PP
In particular, there be no default implementationz of requirements like fuckin \fCoperator++\fP n' tha like\&. (How tha fuck could there be?) 
.PP
Definizzle at line 118 of file stl_iterator_base_types\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _Category, typename _Tp, typename _Distizzle = ptrdiff_t, typename _Pointa = _Tp*, typename _Reference = _Tp&> typedef _Distizzle \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBdifference_type\fP"

.PP
Distizzle between iterators is represented as dis type\&. 
.PP
Definizzle at line 125 of file stl_iterator_base_types\&.h\&.
.SS "template<typename _Category, typename _Tp, typename _Distizzle = ptrdiff_t, typename _Pointa = _Tp*, typename _Reference = _Tp&> typedef _Category \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBiterator_category\fP"

.PP
One of tha \fBtag types\fP\&. 
.PP
Definizzle at line 121 of file stl_iterator_base_types\&.h\&.
.SS "template<typename _Category, typename _Tp, typename _Distizzle = ptrdiff_t, typename _Pointa = _Tp*, typename _Reference = _Tp&> typedef _Pointa \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBpointer\fP"

.PP
This type represents a pointer-to-value_type\&. 
.PP
Definizzle at line 127 of file stl_iterator_base_types\&.h\&.
.SS "template<typename _Category, typename _Tp, typename _Distizzle = ptrdiff_t, typename _Pointa = _Tp*, typename _Reference = _Tp&> typedef _Reference \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBreference\fP"

.PP
This type represents a reference-to-value_type\&. 
.PP
Definizzle at line 129 of file stl_iterator_base_types\&.h\&.
.SS "template<typename _Category, typename _Tp, typename _Distizzle = ptrdiff_t, typename _Pointa = _Tp*, typename _Reference = _Tp&> typedef _Tp \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBvalue_type\fP"

.PP
Da type 'pointed to' by tha iterator\&. 
.PP
Definizzle at line 123 of file stl_iterator_base_types\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
