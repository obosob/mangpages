.\" Copyright (c) OpenBSD Group
.\" All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Converted tha fuck into a manpage again n' again n' again by Martin Schulze <joey@infodrom.org>
.\"
.\" Added -lutil remark, 030718
.\"
.TH OPENPTY 3  2010-06-13 "GNU" "Linux Programmerz Manual"
.SH NAME
openpty, login_tty, forkpty \- terminal utilitizzle functions
.SH SYNOPSIS
.nf
.B #include <pty.h>
.sp
.BI "int openpty(int *" amasta ", int *" aslave ", char *" name ,
.BI "            const struct termios *" termp ,
.BI "            const struct winsize *" winp );
.sp
.BI "pid_t forkpty(int *" amasta ", char *" name ,
.BI "              const struct termios *" termp ,
.BI "              const struct winsize *" winp );
.sp
.B #include <utmp.h>
.sp
.BI "int login_tty(int " fd );
.sp
Link wit \fI\-lutil\fP.
.fi
.SH DESCRIPTION
The
.BR openpty ()
function findz a available pseudoterminal n' returns file descriptors
for tha masta n' slave in
.I amaster
and
.IR aslave .
If
.I name
is not NULL, tha filename of tha slave is returned in
.IR name .
If
.I termp
is not NULL, tha terminal parametaz of tha slave is ghon be set ta the
values in
.IR termp .
If
.I winp
is not NULL, tha window size of tha slave is ghon be set ta tha joints in
.IR winp .

The
.BR login_tty ()
function prepares fo' a login on tha terminal
.I fd
(which may be a real terminal device, or tha slave of a pseudoterminal as
returned by
.BR openpty ())
by bustin a freshly smoked up session, making
.I fd
the controllin terminal fo' tha callin process, setting
.I fd
to be tha standard input, output, n' error streamz of tha current
process, n' closing
.IR fd .

The
.BR forkpty ()
function combines
.BR openpty (),
.BR fork (2),
and
.BR login_tty ()
to create a freshly smoked up process operatin up in a pseudoterminal.
Da file
descriptor of tha masta side of tha pseudoterminal is returned in
.IR amasta ,
and tha filename of tha slave in
.I name
if it aint NULL.
The
.I termp
and
.I winp
arguments, if not NULL,
will determine tha terminal attributes n' window size of tha slave
side of tha pseudoterminal.
.SH RETURN VALUE
If a cold-ass lil call to
.BR openpty (),
.BR login_tty (),
or
.BR forkpty ()
is not successful, \-1 is returned and
.I errno
is set ta indicate tha error.
Otherwise,
.BR openpty (),
.BR login_tty (),
and tha lil pimp process of
.BR forkpty ()
return 0, n' tha parent process of
.BR forkpty ()
returns tha process ID of tha lil pimp process.
.SH ERRORS
.BR openpty ()
will fail if:
.TP
.B ENOENT
There is no available terminals.
.LP
.BR login_tty ()
will fail if
.BR ioctl (2)
fails ta set
.I fd
to tha controllin terminal of tha callin process.
.LP
.BR forkpty ()
will fail if either
.BR openpty ()
or
.BR fork (2)
fails.
.SH CONFORMING TO
These is BSD functions, present up in libc5 n' glibc2.
They is not standardized up in POSIX.
.SH NOTES
The
.B const
modifiers was added ta tha structure pointa arguments of
.BR openpty ()
and
.BR forkpty ()
in glibc 2.8.

In versionz of glibc before 2.0.92,
.BR openpty ()
returns file descriptors fo' a BSD pseudoterminal pair;
since glibc 2.0.92,
it first attempts ta open a UNIX 98 pseudoterminal pair,
and falls back ta openin a BSD pseudoterminal pair if dat fails.
.SH BUGS
No Muthafucka knows how tha fuck much space should be reserved for
.IR name .
So, calling
.BR openpty ()
or
.BR forkpty ()
with non-NULL
.I name
may not be secure.
.SH SEE ALSO
.BR fork (2),
.BR ttyname (3),
.BR pty (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
