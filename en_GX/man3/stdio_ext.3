.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH STDIO_EXT 3 2013-06-21 "" "Linux Programmerz Manual"
.SH NAME
__fbufsize, __flbf, __fpending, __fpurge, __freadable,
__freading, __fsetlocking, __fwritable, __fwriting, _flushlbf \-
interfaces ta stdio FILE structure
.SH SYNOPSIS
.B #include <stdio.h>
.br
.B #include <stdio_ext.h>
.sp
.BI "size_t __fbufsize(FILE *" stream );
.br
.BI "size_t __fpending(FILE *" stream );
.br
.BI "int __flbf(FILE *" stream );
.br
.BI "int __freadable(FILE *" stream );
.br
.BI "int __fwritable(FILE *" stream );
.br
.BI "int __freading(FILE *" stream );
.br
.BI "int __fwriting(FILE *" stream );
.br
.BI "int __fsetlocking(FILE *" stream ", int " type );
.br
.B "void _flushlbf(void);"
.br
.BI "void __fpurge(FILE *" stream );
.SH DESCRIPTION
Solaris introduced routines ta allow portable access ta the
internalz of the
.I FILE
structure, n' glibc also implemented these.
.LP
The
.BR __fbufsize ()
function returns tha size of tha buffer currently used
by tha given stream.
.LP
The
.BR __fpendin ()
function returns tha number of bytes up in tha output buffer.
For wide-oriented streams tha unit is wide characters.
This function is undefined on buffers up in readin mode,
or opened read-only.
.LP
The
.BR __flbf ()
function returns a nonzero value if tha stream is line-buffered,
and zero otherwise.
.LP
The
.BR __freadable ()
function returns a nonzero value if tha stream allows reading,
and zero otherwise.
.LP
The
.BR __fwritable ()
function returns a nonzero value if tha stream allows writing,
and zero otherwise.
.LP
The
.BR __freadin ()
function returns a nonzero value if tha stream is read-only, or
if tha last operation on tha stream was a read operation,
and zero otherwise.
.LP
The
.BR __fwritin ()
function returns a nonzero value if tha stream is write-only (or
append-only), or if tha last operation on tha stream was a write
operation, n' zero otherwise.
.LP
The
.BR __fsetlockin ()
function can be used ta select tha desired type of lockin on tha stream.
It returns tha current type.
The
.I type
argument can take tha followin three joints:
.TP
.B FSETLOCKING_INTERNAL
Perform implicit lockin round every last muthafuckin operation on tha given stream
(except fo' tha *_unlocked ones).
This is tha default.
.TP
.B FSETLOCKING_BYCALLER
Da calla will take care of tha lockin (possibly using
.BR flockfile (3)
in case there is mo' than one thread), n' tha stdio routines
will not do lockin until tha state is reset to
.BR FSETLOCKING_INTERNAL .
.TP
.B FSETLOCKING_QUERY
Don't chizzle tha type of locking.
(Only return dat shit.)
.LP
The
.BR _flushlbf ()
function flushes all line-buffered streams.
(Presumably so that
output ta a terminal is forced out, say before readin keyboard input.)
.LP
The
.BR __fpurge ()
function discardz tha contentz of tha streamz buffer.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR __fbufsize (),
.BR __fpendin (),
.BR __fpurge ()
and
.BR __fsetlockin ()
functions do not lock tha stream, so they is not thread-safe.
.LP
The
.BR __flbf (),
.BR __freadable (),
.BR __freadin (),
.BR __fwritable (),
.BR __fwritin ()
and
.BR _flushlbf ()
functions is thread-safe.
.SH SEE ALSO
.BR flockfile (3),
.BR fpurge (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
