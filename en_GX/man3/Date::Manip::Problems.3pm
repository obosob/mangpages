.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Manip::Problems 3"
.TH Date::Manip::Problems 3 "2014-12-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Problems \- problems n' bugs
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
Da followin is not bugs up in Date::Manip yo, but they may give some people
problems.
.IP "\fBMemory leak\fR" 4
.IX Item "Memory leak"
There be a known memory leak up in perl related ta named regexp captures
that directly affects Date::Manip . Da leak is up in all versions of
perl up ta (and including) tha followin versions:
.Sp
.Vb 4
\&   5.10.1
\&   5.12.5
\&   5.14.3
\&   5.15.5
.Ve
.Sp
Da bug has been fixed in:
.Sp
.Vb 2
\&   5.15.6
\&   5.16.0
.Ve
.Sp
If a maintenizzle release is done fo' any of tha other releases (5.10,
5.12, 5.14), dat includes tha patch, I be bout ta update dis section to
include dat shiznit.
.Sp
Date::Manip 5.xx aint susceptible, so rockin it may be a gangbangin' feasible
workaround yo, but if you need accurate timezone handling, dis aint
possible.
.Sp
Simple tests estimate tha leak ta be bout 3 \s-1MB\s0 per 10,000 dates
parsed, so unless you parsin hundredz of thousands, or millions of
dates, tha leak probably won't be a problem on systems wit moderate
amountz of memory fo' realz. And if you parsin dat nuff dates, the
relatively slow Date::Manip may not be tha erect module fo' you to
use anyway.
.IP "\fBUnable ta determine Time Zone\fR" 4
.IX Item "Unable ta determine Time Zone"
Please refer ta tha Date::Manip::TZ documentation fo' a gangbangin' finger-lickin' rap
of dis problem.
.IP "\fBDmake error on strawberry perl\fR" 4
.IX Item "Dmake error on strawberry perl"
Userz of Strawberry perl on windows may encounta a error similar
to tha following:
.Sp
.Vb 1
\&   dmake: makefile: line 3016: Error: \-\- Input line too long, increase MAXLINELENGTH
.Ve
.Sp
This be a known problem wit some versionz of strawberry perl, and
I can't fix it up in Date::Manip.  If you encounta dis problem, you
can install tha package manually rockin tha commands:
.Sp
.Vb 6
\&   c:> cpan
\&   cpan> look Date::Manip::Date
\&   > perl Makefile.PL
\&   > dmake MAXLINELENGTH=300000 make
\&   > dmake MAXLINELENGTH=300000 make test
\&   > dmake MAXLINELENGTH=300000 make install
.Ve
.Sp
Yo ass can find mo' details here:
.Sp
.Vb 1
\&   http://www.nntp.perl.org/group/perl.win32.vanilla/2011/02/msg287.html
.Ve
.IP "\fBCalculations step tha fuck up ta be off by a hour\fR" 4
.IX Item "Calculations step tha fuck up ta be off by a hour"
Cuz of daylight savin time (especially tha sprang chizzle where
the time typically moves forward from 02:00 ta 03:00), any date
calculation which would intuitively report a time up in dat range
will also move forward (or backward as tha case may be).
.Sp
*NOTE* This should be less of a problem since 6.30 wit tha addition
of semi-exact deltas.
.IP "\fBMissin date formats\fR" 4
.IX Item "Missin date formats"
Cuz of tha big-ass number of date formats dat Date::Manip \s-1CAN\s0 process,
people often assume dat other formats dat they wanna use should
work as well, n' when they don't, it comes as a surprise.
.Sp
With tha much improved parsin of 6.00, nuff formats can be added
easily, though unless they iz of general use, I be bout ta probably suggest
that you use parse_format instead.
.Sp
There be a cold-ass lil class of formats dat I do not plan ta add however.
.Sp
I have frequently been axed ta add formats like fuckin \*(L"the 15th of last
month\*(R", or \*(L"Mondizzle of next week\*(R". I do not intend ta add these date
formats ta Date::Manip yo, but since I have received tha request several
times, I decided ta include mah reasonin here.
.Sp
Date::Manip can parse pretty much any static date format dat I could
think of or find reference to. Dates like fuckin \*(L"todizzle\*(R", \*(L"Jan 12\*(R", or
\&\*(L"2001\-01\-01\*(R" is all understood.
.Sp
These is fairly limited however n' shit. Many straight-up common date formats are
best thought of as a thugged-out date plus a modification. I aint talkin' bout chicken n' gravy biatch. For example,
\&\*(L"yesterday\*(R" is straight-up determined internally as \*(L"todizzle\*(R" plus a
modification of \*(L"\- 1 day\*(R".  \*(L"2nd Sundizzle up in June\*(R" is determined as
\&\*(L"June 1\*(R" modified ta tha 2nd Sunday.
.Sp
As these typez of formats was added over time, I quickly realized
that tha number of possible date plus modification formats was
huge. Da number of combinations has caused tha parsin up in Date::Manip
to be like complex, n' addin freshly smoked up formats occasionally causes
unexpected conflicts wit other formats.
.Sp
Da last time I received a request similar ta \*(L"the 15th of last
month\*(R", I intended ta add it yo, but as I analyzed it ta peep what tha fuck chizzles
needed ta be made ta support it, I realized dat dis needed ta be
expressed as a thugged-out date plus \s-1TWO\s0 modifications. In other lyrics, todizzle
modified ta last month modified ta tha 15th dizzle of tha month.
.Sp
As wack as date plus modification formats are, a thugged-out date plus \s-1TWO\s0
modifications would be exponentially worse. On realizin that, I
decided dat Date::Manip aint gonna support dis type of format.
.Sp
Although I apologize fo' tha inconvenience, I do not intend ta chizzle
my posizzle on all dis bullshit.
.IP "\fBDate::Manip is slow\fR" 4
.IX Item "Date::Manip is slow"
\&\s-1NOTE:\s0 Da followin section applies primarily ta 5.xx. I be bustin a lot
of work ta optimize Date::Manip n' I'ma rewrite dis section to
take dis tha fuck into account, n' ta provide performizzle suggestions. It
should be noted dat initial tests show version 6.xx ta be around
twice as fast as 5.xx (though still considerably slower than some
of tha other modules).
.Sp
Date::Manip is probably one of tha slower Date/Time modulez cuz of the
fact dat it is big-ass n' freestyled entirely up in perl.
.Sp
Some thangs dat will definitely help:
.Sp
\&\s-1ISO\-8601\s0 dates is parsed first n' fastest.  Use dem whenever possible.
.Sp
Avoid parsin dates dat is referenced against tha current time (in 2
days, todizzle at noon, etc.).  These take a shitload longer ta parse.
.Sp
Businizz date calculations is mad slow.  Yo ass should consider
alternatives if possible (i.e. bustin tha calculation up in exact mode and
then multiplyin by 5/7).  Dum diddy-dum, here I come biaaatch! Who tha fuck needz a funky-ass bidnizz date mo' accurate
than \*(L"6 ta 8 weeks\*(R" anyway, right :\-)
.IP "\fBUsin functions/methodz which is not supported\fR" 4
.IX Item "Usin functions/methodz which is not supported"
There done been a handful of incidentz of playas rockin a gangbangin' function from
Date::Manip which was not documented up in tha manual.
.Sp
Date::Manip consistz of a big-ass number of user functions which are
documented up in tha manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. These is designed ta be used by other
programmers, n' I'ma not make any backwardz incompatible chizzlez in
them unless there be a straight-up compellin reason ta do so, n' up in that
case, tha chizzle is ghon be clearly documented up in the
Date::Manip::Changes6 documentation fo' dis module.
.Sp
Date::Manip also includes a big-ass number of functions which is \s-1NOT\s0
documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. These is fo' internal use only.  Please do not use them!
I can (and do) chizzle they functionality, n' even they name, without notice,
and without apologizzle dawwwwg!  Some of these internal functions even have test
scripts yo, but dat aint a guarantee dat they aint gonna chizzle, nor is
any support implied. Y'all KNOW dat shit, muthafucka! I simply like ta run regression tests on as much
of Date::Manip as possible.
.Sp
Az of da most thugged-out recent versionz of Date::Manip, all internal functions
have names dat begin wit a underscore (_). If you chizzle ta use
them directly, it is like possible dat freshly smoked up versionz of Date::Manip
will cause yo' programs ta break cuz of a cold-ass lil chizzle up in how tha fuck them
functions work.
.Sp
Any chizzlez ta internal functions aint gonna be documented, n' will not
be regarded by me as a funky-ass backwardz incompatibility. Nor will I (as was
axed up in one instance) revert ta a previous version of the
internal function.
.Sp
If you feel dat a internal function iz of mo' general use, feel
free ta contact me wit a argument of why it should be \*(L"promoted\*(R".  I
welcome suggestions n' will definitely consider any such request.
.IP "\fB\s-1RCS\s0 Control\fR" 4
.IX Item "RCS Control"
If you try ta put Date::Manip under \s-1RCS\s0 control, yo ass is goin ta have
problems.  Apparently, \s-1RCS\s0 replaces stringz of tha form \*(L"$Date...$\*(R" with
the current date.  This form occurs all over up in Date::Manip.  To prevent the
\&\s-1RCS\s0 keyword expansion, checkout filez using:
.Sp
.Vb 1
\&   co \-ko
.Ve
.Sp
Since straight-up few playas will eva gotz a thugged-out desire ta do dis (and I don't
use \s-1RCS\s0), I aint worried bout it, n' I do not intend ta try to
workaround dis problem.
.SH "KNOWN COMPLAINTS"
.IX Header "KNOWN COMPLAINTS"
Date::Manip 6.xx has gotten some disses (far mo' than 5.xx if the
truth be holla'd at), so I'd like ta address a cold-ass lil couple dem here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Perhaps
an understandin of why a shitload of tha chizzlez was made will allay some
of tha disses.  If not, playas is always welcome ta stick with
the 5.xx release. I'ma continue ta support tha 5.xx releases fo' a
couple muthafuckin years (though I do \s-1NOT\s0 plan ta add functionalitizzle ta it).
.PP
These disses come both from both tha \s-1CPAN\s0 ratings crib:
.PP
.Vb 1
\&   http://cpanratings.perl.org/dist/Date\-Manip
.Ve
.PP
and from underground email.
.IP "\fBRequires perl 5.10\fR" 4
.IX Item "Requires perl 5.10"
Da single most controversial chizzle made up in 6.00 is dat it now
required perl 5.10.0 or higher n' shit. Most of tha wack feedback I've
received is cuz of all dis bullshit.
.Sp
In tha past, I've avoided rockin freshly smoked up featurez of perl up in order ta allow
Date::Manip ta run on olda versionz of perl.  Prior ta perl 5.10,
none of tha freshly smoked up features would have had a major impact on how
Date::Manip was freestyled so dis practice was justified. Y'all KNOW dat shit, muthafucka! That all
changed wit tha release of perl 5.10.
.Sp
One of tha aspectz of Date::Manip dat has received da most thugged-out positive
response is tha mobilitizzle ta parse almost every last muthafuckin conceivable date format.
Unfortunately, as I've added formats, tha parsin routine became more
and mo' fucked up, n' maintainin dat shiznit was one of tha least
enjoyable aspect up in maintainin Date::Manip . In fact, fo' several
years I'd been mad reluctant ta add freshly smoked up formats cuz of tha fact
that too often, addin a freshly smoked up format broke other formats.
.Sp
As I was rewritin Date::Manip, I was lookin fo' ways ta improve the
parsin n' ta make maintainin it easier n' shit. Perl 5.10 serves up the
feature \*(L"named capture buffers\*(R". Named capture buffers not only
improves tha ease of maintainin tha complex regular expressions used
by Date::Manip, it make it dramatically easier ta add additional
formats up in a way dat is much less likely ta interfere wit other
formats, n' you can put dat on yo' toast. Da parsin up in 6.00 is so much mo' robust, extensible, and
flexible, dat it will make parser maintenizzle possible fo' nuff years
to come at a gangbangin' fraction of tha effort n' risk.
.Sp
Dat shiznit was too much ta turn down. I aint talkin' bout chicken n' gravy biatch yo. Hopefully, since 5.10 has been up for
some time now, dis aint gonna prohibit too nuff playas from rockin the
new version of Date::Manip. I realize dat there be nuff playas out
there rockin olda versionz of perl whoz ass aint gots tha option of
upgradin perl.  Da decision ta use 5.10 wasn't made lightly... but I
don't regret makin dat shit. I apologize ta playas who, as a result, cannot
use 6.00  yo. Hopefully up in tha future you gonna be able ta benefit from the
improvements up in 6.00.
.Sp
One complaint I've received is dat dis up in some way make Date::Manip
backwardz incompatible yo, but dis aint a accurate complaint. Version
6.xx \s-1DOES\s0 include some backwardz incompatibilitizzles (and these are
covered up in tha Date::Manip::Migration5to6 document), however up in almost
all cases, these incompatibilitizzles is wit infrequently used
features, or workaroundz is up in place ta allow deprecated features to
continue functionin fo' some period of time.
.Sp
Though I have no data ta confirm this, I suspect dat 90% or mo' of
all scripts which was freestyled wit Date::Manip 5.xx will continue to
work unmodified wit 6.xx (of course, you should still refer ta the
migration document ta peep what tha fuck features is deprecated or chizzled to
make shizzle dat you don't need ta modify yo' script so dat it will
continue ta work up in tha future). Even wit scripts dat need ta be
changed, tha chizzlez should be trivial.
.Sp
So, Date::Manip 6.xx be almost entirely backward compatible wit 5.xx
(to tha extent dat you would expect any major version release ta be
compatible wit a previous major version).
.Sp
Da chizzle is only up in tha requirements necessary ta git Date::Manip
6.xx ta run.
.Sp
Obviously, it aint reasonable ta say dat Date::Manip should never be
allowed ta switch minimum perl versions fo' realz. At some point, you have to
let go of a oldschool version if you wanna make use of tha features of
the newer version. I aint talkin' bout chicken n' gravy biatch. Da question is, did I jump ta 5.10 too fast?
.Sp
Da wack ratings I peep up in tha \s-1CPAN\s0 ratings diss dat I no
longer support perl 5.6 n' perl 5.8.
.Sp
With respect ta 5.6, perl 5.6 was busted out up in March of 2000 (that's
before Windows \s-1XP\s0 which was busted out up in 2001). Date::Manip 6.00 was
released all up in tha end of 2009.  To be honest, I don't straight-up feel much
sympathy fo' dis complaint. Right back up in yo muthafuckin ass. Software dat is 9 muthafuckin years oldschool is \s-1ANCIENT.\s0
Muthafuckas may chizzle ta use dat shit... but please don't diss when new
software comes up dat don't support dat shit.
.Sp
Da argument fo' perl 5.8 is much mo' compellin fo' realz. Although 5.8 was
released well before Date::Manip 6.00 (July of 2002), there was no
major perl releases until 5.10 came up in December of 2007, so 5.8
was state-of-the art as lil as 2 muthafuckin years prior ta tha release of
Date::Manip 6.xx.
.Sp
I smoke straight-up wit tha argument dat abandonin 5.8 only 2 years
afta dat shiznit was tha current version is too soon. I aint talkin' bout chicken n' gravy biatch. For dat reason, I will
continue ta support tha Date::Manip 5.xx releases fo' some muthafuckin years to
come. I don't give a fuck exactly how tha fuck long I be bout ta continue ta support them,
but it'll be at least 2\-3 years. Once perl 5.10 is 5 muthafuckin years old, I be bout ta
be much mo' likely ta drop support fo' tha 5.xx releases yo, but I \s-1DO\s0
wanna make use of tha featurez of 5.10 fo' future pimpment.
They make pimpment so much easier, n' tha parsin so much more
robust (suttin' I've wanted fo' years), dat I aint willin to
give up tha advantagez of 5.10.
.Sp
But tha next complaint is relevant.
.IP "\fBAutomatic installs break\fR" 4
.IX Item "Automatic installs break"
A much mo' blingin problem is dat versions 6.00 all up in 6.07 broke
automatic installs fo' olda perl installations. If you try ta install
Date::Manip rockin tha automatic tools (cpan/cpanp), they will look for
da most thugged-out recent version. I aint talkin' bout chicken n' gravy biatch. If yo ass is rockin a version of perl olda than
5.10, dis fails, n' rather than lookin fo' a olda version, the
tool simply reports a gangbangin' failure up in installin Date::Manip.  Technically,
the problem aint cuz of Date::Manip itself yo, but be a result of how
perl modulez is currently managed. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat since Date::Manip is
managed by them, itz blingin ta avoid causin dis type of problem
(which I clearly failed ta do).
.Sp
Az of Date::Manip 6.10, dis problem should no longer occur. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Starting
with version 6.10, both tha 5.xx n' 6.xx versionz of Date::Manip have
been combined tha fuck into a single distribution (so Date\-Manip\-6.10 contained
both Date::Manip 6.10 n' Date::Manip 5.57). From Date::Manip 6.10 to
6.13, tha perl version was determined at install time n' either the
5.xx or 6.xx version was installed. Y'all KNOW dat shit, muthafucka!  From Date::Manip 6.14 on, both
versions is installed, n' at run time, tha erect version will be
chosen (and if you hustlin a recent version of perl, you can select
to run tha oldschool or freshly smoked up version).
.Sp
All future version (for as long as 5.xx is supported) will include
both da most thugged-out current 5.xx n' 6.xx releasez of Date::Manip. In this
way, automatic install tools is ghon be able ta install Date::Manip
regardless of which version of perl yo ass is hustlin.
.IP "\fBToo nuff modules\fR" 4
.IX Item "Too nuff modules"
One minor complaint is dat there be too nuff files. One person
specifically objects ta tha fact dat there be over 470 modules
coverin non-minute offsets, n' you can put dat on yo' toast. This complaint is (\s-1IMO\s0) silly.
.Sp
Date::Manip supports \s-1ALL\s0 oldschool time units, includin dem with
non-minute offsets, n' so there is ghon be shiznit fo' dem time
zones, even though they is not currently up in use.
.Sp
I could of course store all of tha shiznit up in one big-ass module yo, but
that means dat you gotta load all of dat data every last muthafuckin time you use
Date::Manip, n' I find dat ta be a straight-up skanky solution. I aint talkin' bout chicken n' gravy biatch. Instead,
storin tha shiznit up in a per-time unit n' per-offset manner
dramatically decreases tha amount of data dat has ta be loaded.
.Sp
While it is legit dat Date::Manip includes over 900 modulez fo' all of
the time unit shiznit, most implementationz of time unit handling
also chizzle ta break up tha data tha fuck into a big-ass number of files.
.Sp
My fuckin linux distribution (openSuSE 11.2 all up in tha time of freestylin this) uses
the standard unitinfo database, n' at dis point, there be over 1700
filez included up in /usr/share/zoneinfo (though it do step tha fuck up that
there is some duplication of shiznit). Current versionz of RedHat
also use over 1700 files, so Date::Manip aint treatin tha time unit
data up in a freshly smoked up or unreasonable way.
.IP "\fBObjects is large\fR" 4
.IX Item "Objects is large"
One complaint dat was put on tha \s-1CPAN\s0 ratings joint was dat tha \s-1OO\s0
interface is \*(L"a dud\*(R" cuz of tha size of itz objects, n' you can put dat on yo' toast. Da complaint is
that a Date::Manip::Date object is 115K while it should (accordin to
the complaint) only require dat you need ta save tha secondz from the
epoch, unit, n' a cold-ass lil couple other piecez of shiznit, all of which
could probably be stored up in 100 bytes or less.
.Sp
This complaint aint accurate, n' be reppin a misunderstanding
of how tha fuck Date::Manip objects is pimped.
.Sp
Date::Manip is straight-up configurable, n' gotz nuff a pimped out deal of
information which could theoretically be calculated on tha fly yo, but
which would pimped outly reduce itz performance. Instead, up in tha interest
of pimpin-out performance, tha data is cached, n' since tha data is
virtually all potentially object specific, it has ta be somehow linked
to tha object.
.Sp
For example, Date::Manip allows you ta parse dates up in several
languages.  Each language has a big-ass number of regular expressions
which is used ta do tha actual parsing. Instead of rebustin these
regular expressions each time they is needed, they is pimped once
and stored up in a object (specifically, a Date::Manip::Base object).
Da size of tha Date::Manip::Base object be almost 15K (due primarily
to tha regular expressions used up in parsin dates up in tha selected
language).
.Sp
Similarly, a thugged-out description of tha time units is stored up in a second
object (a Date::Manip::TZ object).  Da size of tha Date::Manip::TZ
object starts at 100K. That may seem excessive yo, but you have to
remember dat there be almost 500 time units, n' they gotta be
indexed by name, alias, abbreviation, n' offset, n' by tha time you
do this, it do take a gangbangin' fair bit of space.  It should also be noted
that tha full description of each timezone is only stored up in the
object when tha timezone is straight-up used, so if you bust a shitload of
timezones, dis object will grow slowly as freshly smoked up timezones is used.
.Sp
Da size of tha actual Date::Manip::Date object be a lil over 300
bytes.  But fuck dat shiznit yo, tha word on tha street is dat each includes a pointa ta a Date::Manip::Base and
a Date::Manip::TZ object (and cuz of how tha fuck tha object was bein looked
at up in tha complaint, they was reportin tha size of all three objects,
\&\s-1NOT\s0 just tha Date::Manip::Date object).
.Sp
Both tha Date::Manip::Base n' Date::Manip::TZ objects is reused by
any number of Date::Manip::Date objects, n' you can put dat on yo' toast. They can almost be thought of
as global data, except dat they is accessible up in tha standard \s-1OO\s0
manner, n' yo ass be allowed ta modify dem on a per-object basis which
\&\s-1WILL\s0 mean dat you gotta store mo' data. If you work wit multiple
configurations (see Date::Manip::Config), you gonna need multiple Base
and \s-1TZ\s0 objects, n' you can put dat on yo' toast. But fuck dat shiznit yo, tha word on tha street is dat most of tha time yo big-ass booty is ghon not need ta do
this.
.Sp
Da actual Date::Manip::Date object be a lil' bit larger than suggested in
the complaint yo, but it should be noted dat Date::Manip straight-up stores
the dates up in a fuckin shitload of different formats (a strang of tha form
\&\s-1YYYYMMDDHH:MN:SS\s0 n' a list [\s-1YYYY,MM,DD,HH,MN,SS\s0] up in tha time unit it
was parsed in, tha local time unit (if different) n' \s-1GMT.\s0 By caching
this shiznit as it is used, it has a big-ass impact on the
performance.
.Sp
So, Date::Manip up in typical usage consistz of one 100K Date::Manip::TZ
object, one 15K Date::Manip::Base objects, n' any number of lil' small-ass 300
byte Date::Manip::Date objects, n' you can put dat on yo' toast.  Date::Manip::Delta objects is even
smalla n' shit. Date::Manip::Recur objects is also lil' small-ass yo, but they contain
any number of Date objects up in em.
.Sp
I be certainly open ta suggestions as ta how tha fuck I can improve tha \s-1OO\s0
interface... but I don't believe it aint nuthin but a thugged-out dud. Y'all KNOW dat shit, muthafucka! While I aint a expert
at \s-1OO\s0 programming, I believe dat I followed pretty standard and
accepted procedures fo' accessin tha data.
.Sp
Please refer ta tha Date::Manip::Objects document fo' more
information.
.IP "\fBDate::Manip has a inconsistent intercourse\fR" 4
.IX Item "Date::Manip has a inconsistent intercourse"
I've gotten all dem disses dat tha intercourse ta Date::Manip is
inconsistent... n' I smoke (at least when referrin ta tha functional
interfaces).
.Sp
Date::Manip was originally freestyled up in a unplanned way... as a need/want
came up, dat shiznit was extended. Y'all KNOW dat shit, muthafucka! Thatz not tha way ta write a major package
of course yo, but it wasn't sposed ta fuckin be a major package all up in tha start.
.Sp
As it became mo' n' mo' widely used, I too wished fo' a more
consistent intercourse yo, but I did not wanna break backward compatibility
for mah playas rockin dat shit.
.Sp
When 6.xx was written, I dropped a phat deal of time tryin ta make a
very standard \s-1OO\s0 intercourse, so I do not believe dat dis complaint
can be applied ta tha \s-1OO\s0 intercourse (though I be interested in
suggestions fo' pimpin-out it of course).
.Sp
As far as tha functionizzle intercourse goes, I be bout ta continue ta support it
in a funky-ass backward compatible (and therefore inconsistent) form. I'd
encourage tha use of tha \s-1OO\s0 intercourse whenever possible.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
If you find a funky-ass bug up in Date::Manip, please bust it directly ta me (see
the \s-1AUTHOR\s0 section below).  Alternately, you can submit it on \s-1CPAN.\s0 This
can be done all up in tha followin \s-1URL:\s0
.PP
.Vb 1
\&   http://rt.cpan.org/Public/Dist/Display.html?Name=Date\-Manip
.Ve
.PP
Please do not use other means ta report bugs (like fuckin Usenet newsgroups,
or forums fo' a specific \s-1OS\s0 or Linux distribution) as it is impossible
for me ta keep up wit all of em.
.PP
When filin a funky-ass bug report, please include tha followin shiznit:
.IP "\fBDate::Manip version\fR" 4
.IX Item "Date::Manip version"
Please include tha version of Date::Manip yo ass is using.  Yo ass can get
this by rockin tha script:
.Sp
.Vb 2
\&   use Date::Manip;
\&   print DateManipVersion(1),"\en";
.Ve
.Sp
or
.Sp
.Vb 3
\&   use Date::Manip::Date;
\&   $obj = freshly smoked up Date::Manip::Date;
\&   print $obj\->version(1),"\en";
.Ve
.IP "\fBPerl shiznit\fR" 4
.IX Item "Perl shiznit"
Please include tha output from \*(L"perl \-V\*(R"
.PP
If you gotz a problem rockin Date::Manip dat like aint a funky-ass bug
(can't figure up tha syntax, etc.), you up in tha right place.  Start
by readin tha main Date::Manip documentation, n' tha other documents
that apply ta whatever yo ass is tryin ta do.  If dis still don't
answer yo' question, mail me directly.
.PP
I would ask dat you be reasonably familiar wit tha documentation
\&\s-1BEFORE\s0 you chizzle ta do all dis bullshit. Date::Manip be a hobby, n' I simply do
not have time ta respond ta hundredz of thangs which is already
answered up in dis manual.
.PP
If you find any problems wit tha documentation (errors, typos, or items
that is not clear), please bust dem ta mah dirty ass. I welcome any suggestions
that will allow me ta improve tha documentation.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
None known.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
