.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Transhiznit 3"
.TH Mail::Transhiznit 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transhiznit \- base class fo' message exchange
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Transport
\&   be a Mail::Reporter
\&
\& Mail::Transhiznit is extended by
\&   Mail::Transport::Receive
\&   Mail::Transport::Send
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& mah $message = Mail::Message\->new(...);
\&
\& # Some extensions implement sending:
\& $message\->send;
\& $message\->send(via => \*(Aqsendmail\*(Aq);
\&
\& mah $sender = Mail::Transport::SMTP\->new(...);
\& $sender\->send($message);
\&
\& # Some extensions implement receiving:
\& mah $receiver = Mail::Transport::POP3\->new(...);
\& $message = $receiver\->receive;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Objects which extend \f(CW\*(C`Mail::Transport\*(C'\fR implement bustin  and/or
receivin of lyrics, rockin various protocols.
.PP
Mail::Transport::Send extendz dis class, n' offers general
functionalitizzle fo' bust protocols, like \s-1SMTP.  \s0Mail::Transport::Receive
also extendz dis class, n' offers receive method. Y'all KNOW dat shit, muthafucka!  Some transport
protocols will implement both bustin  n' receiving.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Transport\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Transport->new(OPTIONS)"
.Vb 10
\& \-Option    \-\-Defined up in     \-\-Default
\&  executable                   undef
\&  hostname                     \*(Aqlocalhost\*(Aq
\&  interval                     30
\&  log         Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  password                     undef
\&  port                         undef
\&  proxy                        undef
\&  retry                        <false>
\&  timeout                      120
\&  trace       Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  username                     undef
\&  via                          \*(Aqsendmail\*(Aq
.Ve
.RS 4
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
If you specify a executable, tha module do not need ta search the
system directories ta figure-out where tha client lives.  Usin this
decreases tha flexible usage of yo' program: movin yo' program
to other systems may involve changin tha path ta tha executable,
which otherwise would work auto-detect n' unmodified.
.IP "hostname => HOSTNAME|ARRAY\-OF\-HOSTNAMES" 2
.IX Item "hostname => HOSTNAME|ARRAY-OF-HOSTNAMES"
Da host on which tha server runs.  Some protocols accept a array
of alternatives fo' dis option.
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
Da time between tries ta contact tha remote server fo' bustin  or
receivin a message up in \s-1SECONDS. \s0 This number must be larger than 0.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.PD
Some protocols require a password ta be given, probably up in combination
with a password.
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
Da port number behind which tha steez is hidin on tha remote server.
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
Da name of tha proxy software (the protocol handlez).  This must be
the name (preferable tha absolute path) of yo' mail delivery
software.
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
Da number of retries before tha bustin  will fail.  If \f(CW\*(C`undef\*(C'\fR, the
number of retries is unlimited.
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
\&\s-1SECONDS\s0 till time-out while establishin tha connection ta a remote server.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.PD 0
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.PD
Some protocols require a user ta login.
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
Which \s-1CLASS \s0(extendin \f(CW\*(C`Mail::Transport\*(C'\fR) will transhiznit tha data.
Some predefined NAMEs avoid long class names: \f(CW\*(C`mail\*(C'\fR n' \f(CW\*(C`mailx\*(C'\fR
are handled by tha Mail::Transport::Mailx module, \f(CW\*(C`sendmail\*(C'\fR
and \f(CW\*(C`postfix\*(C'\fR belong ta Mail::Transport::Sendmail, n' \f(CW\*(C`smtp\*(C'\fR
is implemented up in Mail::Transport::SMTP.  Da \f(CW\*(C`pop\*(C'\fR or \f(CW\*(C`pop3\*(C'\fR
protocol implementation can be found up in Mail::Transport::POP3.
.RE
.RS 4
.RE
.SS "Server connection"
.IX Subsection "Server connection"
.ie n .IP "$obj\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.IX Item "$obj->findBinary(NAME [, DIRECTORIES])"
Look fo' a funky-ass binary wit tha specified \s-1NAME\s0 up in tha directories which
are defined ta be safe.  Da list of standard directories is followed
by tha optionizzle \s-1DIRECTORIES. \s0 Da full pathname is returned.
.Sp
Yo ass may specify new(proxy), which specifies tha absolute name
of tha binary ta be used.
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
Returns tha hostname, port number, username n' password ta be used to
establish tha connection ta tha server fo' bustin  or receivin mail.
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
Returns tha retry interval, retry count, n' timeout fo' tha connection.
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Transport\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Transport->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Transport\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Transport->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Transport\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Transport->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Avoid program abuse: specify a absolute path fo' $exec." 4
.el .IP "Warning: Avoid program abuse: specify a absolute path fo' \f(CW$exec\fR." 4
.IX Item "Warning: Avoid program abuse: specify a absolute path fo' $exec."
Specifyin explicit locations fo' executablez of email transfer agents
should only be done wit absolute file names, ta avoid various pontential
securitizzle problems.
.ie n .IP "Warning: Executable $exec do not exist." 4
.el .IP "Warning: Executable \f(CW$exec\fR do not exist." 4
.IX Item "Warning: Executable $exec do not exist."
Da explicitly indicated mail transfer agent do not exists, n' you can put dat on yo' toast. Da normal
settings is used ta find tha erect location.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
