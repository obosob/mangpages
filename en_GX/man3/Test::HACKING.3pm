.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HACKING 3"
.TH HACKING 3 "2013-05-02" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HACKING.pod \- contributin ta TAP::Harness
.SH "ABOUT"
.IX Header "ABOUT"
This is tha guide fo' TAP::Harnizz internals contributors (developers,
testers, documenters.)
.PP
If yo ass is lookin fo' mo' shiznit on how tha fuck ta \fIuse\fR TAP::Harness,
you probably want
<http://testanything.org/wiki/index.php/TAP::Parser_Cookbook> instead.
.SH "Gettin Started"
.IX Header "Gettin Started"
See tha resources section up in \fI\s-1META\s0.yml\fR or \fIBuild.PL\fR fo' links ta the
project mailin list, bug tracker, svn repository, etc.
.PP
For ease of reference, all up in tha time of freestylin tha \s-1SVN\s0 repository was at:
.PP
.Vb 1
\&  http://svn.hexten.net/tapx
.Ve
.PP
To git tha sickest fuckin version of trunk:
.PP
.Vb 1
\&  git clone git://github.com/Perl\-Toolchain\-Gang/Test\-Harness.git
.Ve
.PP
For dopest thangs up in dis biatch, read tha rest of dis file, check \s-1RT\s0 fo' bugs which
scratch yo' itch, join tha mailin list, etc.
.SH "Formatting"
.IX Header "Formatting"
.SS "perltidy"
.IX Subsection "perltidy"
Da project comes wit a \f(CW\*(C`.perltidyrc\*(C'\fR, which perltidy will
automatically use if tha project root is yo' hustlin directory.  This
is setup by default ta read n' write tha perl code on a pipe.  To
configure yo' editor:
.IP "\(bu" 4
vim
.Sp
In \f(CW\*(C`.vimrc\*(C'\fR, you can add tha followin lines:
.Sp
.Vb 2
\& nnoremap <Leader>pt :%!perltidy \-q<cr> " only work up in \*(Aqnormal\*(Aq mode
\& vnoremap <Leader>pt :!perltidy \-q<cr>  " only work up in \*(Aqvisual\*(Aq mode
.Ve
.Sp
In other lyrics, if yo' \f(CW\*(C`Leader\*(C'\fR be a funky-ass backslash, you can type \f(CW\*(C`\ept\*(C'\fR to
reformat tha file rockin tha \f(CW\*(C`.perltidyrc\*(C'\fR.  If yo ass is up in visual mode
(selectin lines wit shift-v), then only tha code you have currently have
selected is ghon be reformatted.
.IP "\(bu" 4
emacs
.Sp
For emacs, you can use dis snippet from Sam Tregar
(<http://use.perl.org/~samtregar/journal/30185>):
.Sp
.Vb 6
\& (defun perltidy\-region ()
\&    "Run perltidy on tha current region."
\&    (interactive)
\&    (save\-excursion
\&      (shell\-command\-on\-region (point) (mark) "perltidy \-q" nil t)
\&      (cperl\-mode)))
\&
\& (defun perltidy\-all ()
\&    "Run perltidy on tha current region."
\&    (interactive)
\&    (let ((p (point)))
\&      (save\-excursion
\&        (shell\-command\-on\-region (point\-min) (point\-max) "perltidy \-q" nil t)
\&        )
\&      (goto\-char p)
\&      (cperl\-mode)))
\&
\& (global\-set\-key "\eM\-t" \`perltidy\-region)
\& (global\-set\-key "\eM\-T" \`perltidy\-all)
.Ve
.SH "Tests n' Coverage"
.IX Header "Tests n' Coverage"
\&...
.SH "Freestylin fo' Compatibility"
.IX Header "Freestylin fo' Compatibility"
\&...
.SH "Use TAP::Object"
.IX Header "Use TAP::Object"
TAP::Object is tha common base class ta all TAP::* modules, n' should be for
any dat you write.
.SH "Exception Handling"
.IX Header "Exception Handling"
Exceptions should be raised wit Carp:
.PP
.Vb 2
\&  require Carp;
\&  Carp::croak("Unsupported syntax version: $version");
\&
\&  require Carp;
\&  Carp::confess("Unsupported syntax version: $version");
.Ve
.SH "Deprecation cycle"
.IX Header "Deprecation cycle"
Any \fIdocumented\fR sub dat need ta be chizzled or removed (and would therefore
cause a funky-ass backwards-compat issue) must go all up in a thugged-out deprecation cycle ta give
developers a cold-ass lil chizzle ta adjust:
.PP
.Vb 5
\&  1. Document tha deprecation
\&  2. Carp a suitable message
\&  3. Release
\&  4. Chizzle tha code
\&  5. Release
.Ve
.SH "Documentation"
.IX Header "Documentation"
Da end-user n' \s-1API\s0 documentation be all up in tha 'lib/' directory.  In
\&.pm files, tha pod is \*(L"inline\*(R" ta tha code.  See perlpod fo' more
about pod.
.SS "Pod Commands"
.IX Subsection "Pod Commands"
For compatibilityz sake, our phat asses do not use tha =head3 n' =head4 commands.
.ie n .IP """=head1 SECTION""" 4
.el .IP "\f(CW=head1 SECTION\fR" 4
.IX Item "=head1 SECTION"
Sections begin wit a \f(CW\*(C`=head1\*(C'\fR command n' is all-caps.
.Sp
.Vb 8
\&  NAME
\&  VERSION
\&  SYNOPSIS
\&  CONSTRUCTOR
\&  METHODS
\&  CLASS METHODS
\&  SOME OTHER SORT OF METHODS
\&  SEE ALSO
.Ve
.ie n .IP """=head2 method""" 4
.el .IP "\f(CW=head2 method\fR" 4
.IX Item "=head2 method"
Da \f(CW\*(C`=head2\*(C'\fR command documents a method. Y'all KNOW dat shit, muthafucka!  Da name of tha method should have no adornment (e.g. don't C<method> or C<method($list, \f(CW$of\fR, \f(CW$params\fR)>.)
.Sp
These sections should begin wit a gangbangin' finger-lickin' dirty-ass short description of what tha fuck tha method
does, followed by one or mo' examplez of usage.  If needed, elaborate
on tha subtletizzlez of tha parametas n' context afta (and/or between)
the example(s).
.Sp
.Vb 1
\&  =head2 this_method
\&
\&  This method do some blah blah blah.
\&
\&    mah @answer = $thing\->this_method(@arguments);
\&
\&  =head2 that_thing
\&
\&  Returns legit if tha thang is true.
\&
\&    if($thing\->that_thing) {
\&      ...
\&    }
.Ve
.ie n .IP """=item parameter""" 4
.el .IP "\f(CW=item parameter\fR" 4
.IX Item "=item parameter"
Use \f(CW\*(C`=item\*(C'\fR commandz fo' method arguments n' parametas (and etc.)  In
most html pod formatters, these \fIdo not\fR git added ta the
table-of-contents all up in tha top of tha page.
.SS "Pod Formattin Codes"
.IX Subsection "Pod Formattin Codes"
.IP "L<Some::Module>" 4
.IX Item "L<Some::Module>"
Be careful of tha wordin of \f(CW\*(C`L<Some::Module>\*(C'\fR.  Older pod
formattas would render dis as \*(L"the Some::Module manpage\*(R", so it is
best ta either word yo' links as "\f(CW\*(C`(see <Some::Module> for
details.)\*(C'\fR\*(L" or use tha \*(R"explicit rendering\*(L" form of
\&\*(R"\f(CW\*(C`<Some::Module|Some::Module>\*(C'\fR".
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
Da version numbers is updated by Perl::Version.
.SS "\s-1DEVELOPER DOCS/NOTES\s0"
.IX Subsection "DEVELOPER DOCS/NOTES"
Da followin \*(L"formats\*(R" is used wit \f(CW\*(C`=begin\*(C'\fR/\f(CW\*(C`=end\*(C'\fR n' \f(CW\*(C`=for\*(C'\fR
commandz fo' pod which aint part of tha hood end\-user/API
documentation.
.IP "note" 4
.IX Item "note"
Use dis if yo ass is uncertain on some cold-ass lil chizzle ta some pod or be thinkin it
needz work.
.Sp
.Vb 1
\&  =head2 some_method
\&
\&    ...
\&
\&  =for note
\&    This is either falsely documented or a funky-ass bug \-\- peep ...
.Ve
.IP "developer" 4
.IX Item "developer"
.Vb 1
\&  =begin pimper
\&
\&  Long\-winded explanation of why some code is tha way it is or various
\&  other subtletizzles which might incite head\-scratchin n' WTF\*(Aqing.
\&
\&  =end pimper
.Ve
.IP "deprecated" 4
.IX Item "deprecated"
.Vb 2
\&  =for deprecated
\&    removed up in 0.09, bust a cap up in by ~0.25
.Ve
.SH "Committin ta Subversion"
.IX Header "Committin ta Subversion"
If you have commit access, please bear dis up in mind.
.PP
Development is done either on trunk or a funky-ass branch, as appropriate:
.PP
If itz suttin' dat might be controversial, break tha build or take a long
time (more than a cold-ass lil couple weeks) ta complete then it'd probably be
appropriate ta branch. Otherwise it can go up in trunk.
.PP
If up in doubt say shit bout it on tha mailin list before you commit.
