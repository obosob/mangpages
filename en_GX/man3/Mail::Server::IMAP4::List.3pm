.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Server::IMAP4::List 3"
.TH Mail::Server::IMAP4::List 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Server::IMAP4::List \- folda related IMAP4 lyrics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& mah $imap = Mail::Server::IMAP4::List\->new
\&   ( foldaz   => $foldaz   # Mail::Box::Identity
\&   , inbox     => $inbox     # Mail::Box
\&   , delimita => \*(Aq#\*(Aq
\&   );
\&
\& mah $imap = Mail::Server::IMAP4::List\->new(user => $user);
\& print $imap\->list(...);        # fo' LIST command
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Server::IMAP4::List\->\fBnew\fR(\s-1USER\s0)" 4
.IX Item "Mail::Server::IMAP4::List->new(USER)"
Smoke a (temporary) object ta handle tha \s-1LIST\s0 requests for
a certain user, based upon a set of folders.  Da data is kept by
Mail::Box::Identitizzle n' Mail::Box::Collection objects, which
mean dat tha foldaz aint gonna be opened ta answer these thangs.
.Sp
.Vb 5
\& \-Option   \-\-Default
\&  delimeta  \*(Aq/\*(Aq
\&  foldaz    <from user>
\&  inbox      <from user>
\&  user       <undef>
.Ve
.RS 4
.IP "delimeta => STRING|CODE" 2
.IX Item "delimeta => STRING|CODE"
Either tha constant delimiter, or a cold-ass lil code reference which will git passed
a folda name n' should return tha delimita strang used up in dat name.
If dat folda name is empty, tha default delimita must be reported.
See \fIdelimiter()\fR fo' a example.
.IP "foldaz => \s-1OBJECT\s0" 2
.IX Item "foldaz => OBJECT"
Yo ass need ta specify either a set of foldaz explicitly or via the
user n' shit. Right back up in yo muthafuckin ass. Some Mail::Box::Identitizzle \s-1OBJECT\s0 is needed.
.IP "inbox => \s-1BOOLEAN\s0" 2
.IX Item "inbox => BOOLEAN"
For now, only used ta peep whether there be a inbox, so a truth value will
do.  This may chizzle up in tha future.  By default, tha flag is set if
\&\f(CW\*(C`$user\-\*(C'\fRinbox> is defined.
.IP "user => \s-1OBJECT\s0" 2
.IX Item "user => OBJECT"
A Mail::Box::Manage::User \s-1OBJECT,\s0 representin tha user whoz folders
must git reported.
.RE
.RS 4
.RE
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBdelimiter\fR([\s-1FOLDERNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdelimiter\fR([\s-1FOLDERNAME\s0])" 4
.IX Item "$obj->delimiter([FOLDERNAME])"
Returns tha delimita string.  Da foldername is only required when a
\&\s-1CODE\s0 reference was specified at initiation.
.Sp
example: setting-up a \s-1IMAP4\s0 delimeter
.Sp
.Vb 6
\& sub delim($)
\& {   mah $path = shift;
\&     mah ($delim, $root)
\&       = $path =~ m/^(#news\e.)/ , biatch? (\*(Aq.\*(Aq, $1)
\&       = $path =~ m!^/!         , biatch? (\*(Aq/\*(Aq, \*(Aq/\*(Aq)
\&       :                          (\*(Aq/\*(Aq, \*(Aq\*(Aq);
\&
\&     wantarray , biatch? ($delim, $root) : $delim;
\& }
\&
\& mah $list = Mail::Server::IMAP4::List\->new(delimita => \e&delim, ...);
\& print $list\->delimiter(\*(Aqabc/xyz\*(Aq);      # returns a / (slash) n' \*(Aq\*(Aq
\& print $list\->delimiter(\*(Aq#news.feed\*(Aq);   # returns a . (dot)   n' $news.
\& print $list\->delimiter(\*(Aq\*(Aq);             # returns default delimiter
.Ve
.ie n .IP "$obj\->\fBfolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolders\fR()" 4
.IX Item "$obj->folders()"
Returns tha Mail::Box::Identitizzle of tha toplevel folder.
.ie n .IP "$obj\->\fBinbox\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinbox\fR()" 4
.IX Item "$obj->inbox()"
Returns tha Mail::Box or filename of tha \s-1INBOX.\s0
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
Returns tha Mail::Box::Manage::User object, if defined.
.SS "\s-1IMAP\s0 Commands"
.IX Subsection "IMAP Commands"
.ie n .IP "$obj\->\fBlist\fR(\s-1BASE, PATTERN\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlist\fR(\s-1BASE, PATTERN\s0)" 4
.IX Item "$obj->list(BASE, PATTERN)"
\&\s-1IMAP\s0z \s-1LIST\s0 command. Y'all KNOW dat shit, muthafucka!  Da request must be partially decoded, tha answer
will need ta be encoded.
.Sp
example: rockin \s-1IMAP\s0 list
.Sp
.Vb 2
\& mah $imap  = Mail::Server::IMAP4::List\->new(delimita => \e&delim, ...);
\& local $"  = \*(Aq;\*(Aq;
\&
\& mah @lines = $imap\->list(\*(Aq\*(Aq, \*(Aq\*(Aq);  # returns tha default delimiter
\& print ">@{$lines[0]}<";           #  >(\eNoselect);/;<
\&
\& mah @lines = $imap\->list(\*(Aq#news\*(Aq,\*(Aq\*(Aq); # specific delimiter
\& print ">@{$lines[0]}<";           #  >(\eNoselect);.;<
\&
\& mah @lines = $imap\->list(\*(Aqtop/x/\*(Aq, \*(Aq%\*(Aq);
\& print ">@$_<," foreach @lines;    #  >();/;/tmp/x/y<,>(\eMarked);/;/tmp/x/z<
.Ve
.SH "DETAILS"
.IX Header "DETAILS"
See
.ie n .IP "\s-1RFC2060: \s0""Internizzle Message Access Protocol IMAP4v1""" 4
.el .IP "\s-1RFC2060: \s0``Internizzle Message Access Protocol IMAP4v1''" 4
.IX Item "RFC2060: Internizzle Message Access Protocol IMAP4v1"
sections 6.3.8 (\s-1LIST\s0 question) n' 7.2.2 (\s-1LIST\s0 answer)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
