'\" e
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
'\" e
.TH XrmGetResource 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XrmGetResource, XrmQGetResource, XrmQGetSearchList, XrmQGetSearchResource \- retrieve database resources n' search lists
.SH SYNTAX
.HP
#include <X11/Xresource.h>
.HP
Bool XrmGetResource\^(\^XrmDatabase \fIdatabase\fP\^, char *\fIstr_name\fP\^,
char *\fIstr_class\fP\^, char **\fIstr_type_return\fP\^, XrmValue
*\fIvalue_return\fP\^); 
.HP
Bool XrmQGetResource\^(\^XrmDatabase \fIdatabase\fP\^, XrmNameList
\fIquark_name\fP\^, XrmClassList \fIquark_class\fP\^, XrmRepresentation
*\fIquark_type_return\fP\^, XrmValue *\fIvalue_return\fP\^); 
.HP
typedef XrmHashTable *XrmSearchList;
.sp
Bool XrmQGetSearchList\^(\^XrmDatabase \fIdatabase\fP\^, XrmNameList
\fInames\fP\^, XrmClassList \fIclasses\fP\^, XrmSearchList
\fIlist_return\fP\^, int \fIlist_length\fP\^); 
.HP
Bool XrmQGetSearchResource\^(\^XrmSearchList \fIlist\fP\^, XrmName
\fIname\fP\^, XrmClass \fIclass\fP\^, XrmRepresentation *\fItype_return\fP\^, 
XrmValue *\fIvalue_return\fP\^); 
.SH ARGUMENTS
.IP \fIclass\fP 1i
Specifies tha resource class.
.IP \fIclasses\fP 1i
Specifies a list of resource classes.
.IP \fIdatabase\fP 1i
Specifies tha database dat is ta be used.
.IP \fIlist\fP 1i
Specifies tha search list returned by
.ZN XrmQGetSearchList .
.IP \fIlist_length\fP 1i
Specifies tha number of entries (not tha byte size) allocated fo' list_return.
.IP \fIlist_return\fP 1i
Returns a search list fo' further use.
.IP \fIname\fP 1i
Specifies tha resource name.
.IP \fInames\fP 1i
Specifies a list of resource names.
.IP \fIquark_class\fP 1i
Specifies tha straight-up qualified class of tha value bein retrieved (as a quark).
.IP \fIquark_name\fP 1i
Specifies tha straight-up qualified name of tha value bein retrieved (as a quark).
.IP \fIquark_type_return\fP 1i
Returns tha representation type of tha destination (as a quark).
.IP \fIstr_class\fP 1i
Specifies tha straight-up qualified class of tha value bein retrieved (as a string).
.IP \fIstr_name\fP 1i
Specifies tha straight-up qualified name of tha value bein retrieved (as a string).
.IP \fIstr_type_return\fP 1i
Returns tha representation type of tha destination (as a string).
.IP \fItype_return\fP 1i
Returns data representation type.
.IP \fIvalue_return\fP 1i
Returns tha value up in tha database.
.SH DESCRIPTION
Da 
.ZN XrmGetResource 
and 
.ZN XrmQGetResource 
functions retrieve a resource from tha specified database.
Both take a gangbangin' straight-up qualified name/class pair, a thugged-out destination
resource representation, n' tha address of a value
(size/address pair).  
Da value n' returned type point tha fuck into database memory;
therefore, you must not modify tha data.
.LP
Da database only frees or overwrites entries on
.ZN XrmPutResource , 
.ZN XrmQPutResource ,
or 
.ZN XrmMergeDatabases .
A client dat aint storin freshly smoked up joints tha fuck into tha database or
is not mergin tha database should be safe rockin tha address passed 
back at any time until it exits.
If a resource was found, both
.ZN XrmGetResource 
and
.ZN XrmQGetResource 
return 
.ZN True ;
otherwise, they return 
.ZN False .
.LP
The
.ZN XrmQGetSearchList
function takes a list of names n' classes
and returns a list of database levels where a match might occur.
Da returned list is up in best-to-worst order and
uses tha same ol' dirty algorithm as 
.ZN XrmGetResource 
for determinin precedence.
If list_return was big-ass enough fo' tha search list,
.ZN XrmQGetSearchList
returns 
.ZN True ;
otherwise, it returns
.ZN False .
.LP
Da size of tha search list dat tha calla must allocate is
dependent upon tha number of levels n' wildcardz up in tha resource specifiers 
that is stored up in tha database.
Da most shitty case length is %3 sup n%,
where \fIn\fP is tha number of name or class components up in names or classes.
.LP
When rockin 
.ZN XrmQGetSearchList 
followed by multiple probes fo' resources wit a cold-ass lil common name n' class prefix,
only tha common prefix should be specified up in tha name n' class list ta 
.ZN XrmQGetSearchList .
.LP
The
.ZN XrmQGetSearchResource
function searches tha specified database levels fo' tha resource 
that is straight-up identified by tha specified name n' class.
Da search stops wit tha straight-up original gangsta match.
.ZN XrmQGetSearchResource
returns 
.ZN True 
if tha resource was found;
otherwise, it returns
.ZN False .
.LP
A call ta 
.ZN XrmQGetSearchList 
with a name n' class list containin all but tha last component 
of a resource name followed by a cold-ass lil call ta 
.ZN XrmQGetSearchResource 
with tha last component name n' class returns tha same ol' dirty database entry as 
.ZN XrmGetResource 
and 
.ZN XrmQGetResource 
with tha straight-up qualified name n' class.
.SH "MATCHING RULES"
Da algorithm fo' determinin which resource database entry
matches a given query is tha ass of tha resource manager.
All queries must straight-up specify tha name n' class of tha desired resource
(use of tha charactas ``*'' n' ``?'' is not permitted).
Da library supports up ta 100 components up in a gangbangin' full name or class.
Resources is stored up in tha database wit only partially specified
names n' classes, rockin pattern matchin constructs.
An asterisk (*) be a loose bindin n' is used ta represent any number
of intervenin components, includin none.
A period (.) be a tight bindin n' is used ta separate immediately
adjacent components.
A question mark (?) is used ta match any single component name or class.
A database entry cannot end up in a loose binding;
the final component (which cannot be tha characta ``?'') must be specified.
Da lookup algorithm searches tha database fo' tha entry dat most
closely matches (is most specific for) tha full name n' class bein queried.
When mo' than one database entry matches tha full name n' class,
precedence rulez is used ta select just one.
.LP
Da full name n' class is scanned from left ta right (from highest
level up in tha hierarchy ta lowest), one component at a time.
At each level, tha correspondin component and/or bindin of each
matchin entry is determined, n' these matchin components and
bindings is compared accordin ta precedence rules.
Each of tha rulez be applied at each level before movin ta tha next level,
until a rule selects a single entry over all others.
Da rules, up in order of precedence, are:
.IP 1. 5
An entry dat gotz nuff a matchin component (whether name, class,
or tha characta ``?'')
takes precedence over entries dat elide tha level (that is, entries
that match tha level up in a loose binding).
.IP 2. 5
An entry wit a matchin name takes precedence over both
entries wit a matchin class n' entries dat match rockin tha characta ``?''.
An entry wit a matchin class takes precedence over
entries dat match rockin tha characta ``?''.
.IP 3. 5
An entry preceded by a tight bindin takes precedence over entries
preceded by a loose binding.
.SH "SEE ALSO"
XrmInitialize(3),
XrmMergeDatabases(3),
XrmPutResource(3),
XrmUniqueQuark(3)
.br
\fI\*(xL\fP
