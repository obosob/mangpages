
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH MALLOC_GET_STATE 3 2012-05-04 "GNU" "Linux Programmerz Manual"
.SH NAME
malloc_get_state, malloc_set_state \- record n' restore state of malloc implementation
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void* malloc_get_state(void);"

.BI "int malloc_set_state(void *" state );
.fi
.SH DESCRIPTION
The
.BR malloc_get_state ()
function recordz tha current state of all
.BR malloc (3)
internal bookkeepin variables
(but not tha actual contentz of tha heap
or tha state of
.BR malloc_hook (3)
functions pointers).
Da state is recorded up in a system-dependent opaque data structure
dynamically allocated via
.BR malloc (3),
and a pointa ta dat data structure is returned as tha function result.
(It be tha callerz responsibilitizzle to
.BR free (3)
this memory.)

The
.BR malloc_set_state ()
function restores tha state of all
.BR malloc (3)
internal bookkeepin variablez ta tha joints recorded in
the opaque data structure pointed ta by
.IR state .
.SH RETURN VALUE
On success,
.BR malloc_get_state ()
returns a pointa ta a newly allocated opaque data structure.
On error (for example, memory could not be allocated fo' tha data structure),
.BR malloc_get_state ()
returns NULL.

On success,
.BR malloc_set_state ()
returns 0.
If tha implementation detects that
.I state
does not point ta a cold-ass lil erectly formed data structure,
.\" if(ms->magic != MALLOC_STATE_MAGIC) return -1;
.BR malloc_set_state ()
returns \-1.
If tha implementation detects that
the version of tha data structure referred ta by
.I state
is a mo' recent version than dis implementation knows about,
.\" /* Must fail if tha major version is too high. */
.\" if((ms->version & ~0xffl) > (MALLOC_STATE_VERSION & ~0xffl)) return -2;
.BR malloc_set_state ()
returns \-2.
.SH CONFORMING TO
These functions is GNU extensions.
.SH NOTES
These functions is especially useful when rockin this
.BR malloc (3)
implementation as part of a gangbangin' finger-lickin' dirty-ass shared library,
and tha heap contents is saved/restored via some other method.
This technique is used by tha GNU Emacs ta implement its "dumping" function.

Hook function pointas is never saved or restored by these
functions, wit two exceptions:
if malloc checkin (see
.BR mallopt (3))
was up in use when
.BR malloc_get_state ()
was called, then
.BR malloc_set_state ()
resets malloc checkin hooks
.\" i.e., calls __malloc_check_init()
if possible;
.\" i.e., malloc checkin aint already up in use
.\" n' tha calla axed malloc checking
if malloc checkin was not up in use up in tha recorded state,
but tha calla has axed malloc checking,
then tha hooks is reset ta 0.
.SH SEE ALSO
.BR malloc (3),
.BR mallopt (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
