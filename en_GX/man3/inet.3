.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\" n' Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\"     libc.info (from glibc distribution)
.\" Modified Sat Jul 24 19:12:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Sep  3 20:29:36 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Chizzled network tha fuck into host byte order (for inet_network),
.\"     Andreas Jaeger <aj@arthur.rhein-neckar.de>, 980130.
.\" 2008-06-19, mtk
.\"     Describe tha various address forms supported by inet_aton().
.\"     Clarify rap of inet_lnaof(), inet_netof(), n' inet_makeaddr().
.\"     Add rap of Classful Addressing, notin dat it is obsolete.
.\"     Added a EXAMPLE program.
.\"
.TH INET 3  2013-02-10 "GNU" "Linux Programmerz Manual"
.SH NAME
inet_aton, inet_addr, inet_network, inet_ntoa, inet_makeaddr, inet_lnaof,
inet_netof \- Internizzle address manipulation routines
.SH SYNOPSIS
.nf
.B #include <sys/socket.h>
.B #include <netinet/in.h>
.B #include <arpa/inet.h>
.sp
.BI "int inet_aton(const char *" cp ", struct in_addr *" inp );
.sp
.BI "in_addr_t inet_addr(const char *" cp );
.sp
.BI "in_addr_t inet_network(const char *" cp );
.sp
.BI "char *inet_ntoa(struct in_addr " up in );
.sp
.BI "struct in_addr inet_makeaddr(int " net ", int " host );
.sp
.BI "in_addr_t inet_lnaof(struct in_addr " up in );
.sp
.BI "in_addr_t inet_netof(struct in_addr " up in );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR inet_aton (),
.BR inet_ntoa ():
_BSD_SOURCE || _SVID_SOURCE
.SH DESCRIPTION
.BR inet_aton ()
converts tha Internizzle host address \fIcp\fP from the
IPv4 numbers-and-dots notation tha fuck into binary form (in network byte order)
and stores it up in tha structure dat \fIinp\fP points to.
.BR inet_aton ()
returns nonzero if tha address is valid, zero if not.
Da address supplied in
.I cp
can have one of tha followin forms:
.TP 10
.I a.b.c.d
Each of tha four numeric parts specifies a funky-ass byte of tha address;
the bytes is assigned up in left-to-right order ta produce tha binary address.
.TP
.I a.b.c
Parts
.I a
and
.I b
specify tha straight-up original gangsta two bytez of tha binary address.
Part
.I c
is interpreted as a 16-bit value dat defines tha rightmost two bytes
of tha binary address.
This notation is suitable fo' specifyin (outmoded) Class B
network addresses.
.TP
.I a.b
Part
.I a
specifies tha straight-up original gangsta byte of tha binary address.
Part
.I b
is interpreted as a 24-bit value dat defines tha rightmost three bytes
of tha binary address.
This notation is suitable fo' specifyin (outmoded) Class C
network addresses.
.TP
.I a
Da value
.I a
is interpreted as a 32-bit value dat is stored directly
into tha binary address without any byte rearrangement.
.PP
In all of tha above forms,
componentz of tha dotted address can be specified up in decimal,
octal (with a leading
.IR 0 ),
or hexadecimal, wit a leading
.IR 0X ).
Addresses up in any of these forms is collectively termed
.IR "IPV4 numbers-and-dots notation" .
Da form dat uses exactly four decimal numbers is referred ta as
.IR "IPv4 dotted-decimal notation"
(or sometimes:
.IR "IPv4 dotted-quad notation" ).
.PP
The
.BR inet_addr ()
function converts tha Internizzle host address
\fIcp\fP from IPv4 numbers-and-dots notation tha fuck into binary data up in network
byte order.
If tha input is invalid,
.B INADDR_NONE
(usually \-1) is returned.
Use of dis function is problematic cuz \-1 be a valid address
(255.255.255.255).
Avoid its use up in favor of
.BR inet_aton (),
.BR inet_pton (3),
or
.BR getaddrinfo (3)
which provide a cold-ass lil cleaner way ta indicate error return.
.PP
The
.BR inet_network ()
function converts
.IR cp ,
a strang up in IPv4 numbers-and-dots notation,
into a number up in host byte order suitable fo' use as an
Internizzle network address.
On success, tha converted address is returned.
If tha input is invalid, \-1 is returned.
.PP
The
.BR inet_ntoa ()
function converts tha Internizzle host address
\fIin\fP, given up in network byte order, ta a strang up in IPv4
dotted-decimal notation.
Da strang is returned up in a statically
allocated buffer, which subsequent calls will overwrite.
.PP
The
.BR inet_lnaof ()
function returns tha local network address part
of tha Internizzle address \fIin\fP.
Da returned value is up in host byte order.
.PP
The
.BR inet_netof ()
function returns tha network number part of
the Internizzle address \fIin\fP.
Da returned value is up in host byte order.
.PP
The
.BR inet_makeaddr ()
function is tha converse of
.BR inet_netof ()
and
.BR inet_lnaof ().
It returns a Internizzle host address up in network byte order,
created by combinin tha network number \fInet\fP
with tha local address \fIhost\fP, both in
host byte order.
.PP
Da structure \fIin_addr\fP as used in
.BR inet_ntoa (),
.BR inet_makeaddr (),
.BR inet_lnaof ()
and
.BR inet_netof ()
is defined in
.I <netinet/in.h>
as:
.sp
.in +4n
.nf
typedef uint32_t in_addr_t;

struct in_addr {
    in_addr_t s_addr;
};
.fi
.in
.SH CONFORMING TO
4.3BSD.
.BR inet_addr ()
and
.BR inet_ntoa ()
are specified up in POSIX.1-2001.
.BR inet_aton ()
is not specified up in POSIX.1-2001 yo, but be available on most systems.
.SH NOTES
On tha i386 tha host byte order is Least Significant Byte
first (lil endian), whereas tha network byte order, as used on the
Internet, is Most Significant Byte first (bangin' endian).

.BR inet_lnaof (),
.BR inet_netof (),
and
.BR inet_makeaddr ()
are legacy functions dat assume they is dealin with
.IR "classful network addresses" .
Classful networkin divides IPv4 network addresses tha fuck into host n' network
components at byte boundaries, as bigs up:
.TP 10
Class A
This address type is indicated by tha value 0 up in the
most dope bit of tha (network byte ordered) address.
Da network address is contained up in da most thugged-out dope byte,
and tha host address occupies tha remainin three bytes.
.TP
Class B
This address type is indicated by tha binary value 10 up in the
most dope two bitz of tha address.
Da network address is contained up in tha two most dope bytes,
and tha host address occupies tha remainin two bytes.
.TP
Class C
This address type is indicated by tha binary value 110 up in the
most dope three bitz of tha address.
Da network address is contained up in tha three most dope bytes,
and tha host address occupies tha remainin byte.
.PP
Classful network addresses is now obsolete,
havin been superseded by Classless Inter-Domain Routin (CIDR),
which divides addresses tha fuck into network n' host components at
arbitrary bit (rather than byte) boundaries.
.SH EXAMPLE
An example of tha use of
.BR inet_aton ()
and
.BR inet_ntoa ()
is shown below.
Here is some example runs:
.in +4n
.nf

.RB "$" " ./a.out 226.000.000.037" "      # Last byte is up in octal"
226.0.0.31
.RB "$" " ./a.out 0x7f.1         " "      # First byte is up in hex"
127.0.0.1
.fi
.in
.SS Program source
\&
.nf
#define _BSD_SOURCE
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    struct in_addr addr;

    if (argc != 2) {
        fprintf(stderr, "%s <dotted\-address>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (inet_aton(argv[1], &addr) == 0) {
        fprintf(stderr, "Invalid address\\n");
        exit(EXIT_FAILURE);
    }

    printf("%s\\n", inet_ntoa(addr));
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR byteorder (3),
.BR getaddrinfo (3),
.BR gethostbyname (3),
.BR getnameinfo (3),
.BR getnetent (3),
.BR inet_ntop (3),
.BR inet_pton (3),
.BR hosts (5),
.BR networks (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
