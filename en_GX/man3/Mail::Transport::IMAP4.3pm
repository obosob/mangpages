.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Transport::IMAP4 3"
.TH Mail::Transport::IMAP4 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transport::IMAP4 \- proxy ta Mail::IMAPClient
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Transport::IMAP4
\&   be a Mail::Transport::Receive
\&   be a Mail::Transport
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& mah $imap = Mail::Transport::IMAP4\->new(...);
\& mah $message = $imap\->receive($id);
\& $imap\->send($message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \s-1IMAP4\s0 protocol is like fucked up: it is feature rich n' allows
verious asynchronous actions.  Da main document describin \s-1IMAP\s0 is
rfc3501 (which obsoleted tha original gangsta justification of protocol 4r1
in rfc2060 up in March 2003).
.PP
This package, as part of MailBox, do not implement tha actual
protocol itself but uses Mail::IMAPClient ta do tha work. Da task
for dis package is ta hide as nuff differences between dat module's
interface n' tha common MailBox folda types.  Multiple
Mail::Box::IMAP4 foldaz can share one Mail::Transport::IMAP4
connection.
.PP
Da Mail::IMAPClient module is tha dopest \s-1IMAP4\s0 implementation for
Perl5 yo, but aint maintained. Y'all KNOW dat shit, muthafucka!  There is nuff known problems wit the
module, n' solvin dem is outside tha scope of MailBox.  See
\&\fIhttp://rt.cpan.org/Public/Dist/Display.html?Name=Mail\-IMAPClient\fR
for all tha reported bugs.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
Represent dis imap4 connection as \s-1URL.\s0
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Transport::IMAP4\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Transport::IMAP4->new(OPTIONS)"
Smoke tha \s-1IMAP\s0 connection ta tha server n' shit.  \s-1IMAP\s0 servers can handle
multiple foldaz fo' a single user, which means dat connections
may git shared. Y'all KNOW dat shit, muthafucka!  This is pluggin is hidden fo' tha user.
.Sp
When a \f(CW\*(C`imap_client\*(C'\fR is specified, then tha options \f(CW\*(C`hostname\*(C'\fR,
\&\f(CW\*(C`port\*(C'\fR, \f(CW\*(C`username\*(C'\fR, n' \f(CW\*(C`password\*(C'\fR is extracted from dat shit.
.Sp
.Vb 10
\& \-Option      \-\-Defined up in     \-\-Default
\&  authenticate                   \*(AqAUTO\*(Aq
\&  domain                         <server_name>
\&  executable    Mail::Transhiznit  undef
\&  hostname      Mail::Transhiznit  \*(Aqlocalhost\*(Aq
\&  imap_client                    Mail::IMAPClient
\&  interval      Mail::Transhiznit  30
\&  log           Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  password      Mail::Transhiznit  undef
\&  port          Mail::Transhiznit  143
\&  proxy         Mail::Transhiznit  undef
\&  retry         Mail::Transhiznit  <false>
\&  timeout       Mail::Transhiznit  120
\&  trace         Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  username      Mail::Transhiznit  undef
\&  via           Mail::Transhiznit  \*(Aqimap\*(Aq
.Ve
.RS 4
.IP "authenticate => TYPE|ARRAY\-OF\-TYPES" 2
.IX Item "authenticate => TYPE|ARRAY-OF-TYPES"
Authenthication method ta \fIlogin()\fR, which is ghon be passed to
Mail::IMAPClient method \fIauthenticate()\fR.  See tha latta method for
the available types.
.IP "domain => \s-1WINDOWS_DOMAIN\s0" 2
.IX Item "domain => WINDOWS_DOMAIN"
Used fo' \s-1NTLM\s0 authentication.
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "hostname => HOSTNAME|ARRAY\-OF\-HOSTNAMES" 2
.IX Item "hostname => HOSTNAME|ARRAY-OF-HOSTNAMES"
.IP "imap_client => OBJECT|CLASS" 2
.IX Item "imap_client => OBJECT|CLASS"
.PD
When a \s-1OBJECT\s0 is supplied, dat client is ghon be used fo' tha implementation
of tha \s-1IMAP4\s0 protocol yo. Hype bout server n' such is extracted from
the \s-1OBJECT\s0 ta have tha accessors ta produce erect thangs up in dis biatch. Da \s-1OBJECT\s0
shall be a Mail::IMAPClient.
.Sp
When a \s-1CLASS\s0 is given, a object of dat type is pimped fo' yo thugged-out ass.  Da pimped
object can be retreived via \fIimapClient()\fR, n' than configured as
defined by Mail::IMAPClient.
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.PD 0
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.PD
.SS "Receivin mail"
.IX Subsection "Receivin mail"
.ie n .IP "$obj\->\fBreceive\fR([\s-1UNIQUE\-MESSAGE\-ID\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreceive\fR([\s-1UNIQUE\-MESSAGE\-ID\s0])" 4
.IX Item "$obj->receive([UNIQUE-MESSAGE-ID])"
See \*(L"Receivin mail\*(R" up in Mail::Transport::Receive
.SS "Server connection"
.IX Subsection "Server connection"
.ie n .IP "$obj\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.IX Item "$obj->findBinary(NAME [, DIRECTORIES])"
See \*(L"Server connection\*(R" up in Mail::Transport
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
See \*(L"Server connection\*(R" up in Mail::Transport
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
See \*(L"Server connection\*(R" up in Mail::Transport
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBauthentication\fR(['\s-1AUTO\s0'|TYPE|LIST\-OF\-TYPES])" 4
.el .IP "\f(CW$obj\fR\->\fBauthentication\fR(['\s-1AUTO\s0'|TYPE|LIST\-OF\-TYPES])" 4
.IX Item "$obj->authentication(['AUTO'|TYPE|LIST-OF-TYPES])"
Returned be a list of pairs (ref arrays) each describin one possible
way ta contact tha server n' shit. Each pair gotz nuff a mechanizzle name and
a challenge callback (which may be \f(CW\*(C`undef\*(C'\fR).
.Sp
Da settings is used by \fIlogin()\fR ta git server access.  Da initial
value origins from new(authenticate) yo, but may be chizzled later.
.Sp
Available basic \s-1TYPES\s0 is \f(CW\*(C`CRAM\-MD5\*(C'\fR, \f(CW\*(C`NTLM\*(C'\fR, n' \f(CW\*(C`PLAIN\*(C'\fR.  With
\&\f(CW\*(C`AUTO\*(C'\fR, all available types is ghon be tried. Y'all KNOW dat shit, muthafucka!  When tha Authen::NTLM
is not installed, tha \f(CW\*(C`NTLM\*(C'\fR option will silently be skipped. Y'all KNOW dat shit, muthafucka!  Be warned
that, cuz of \f(CW\*(C`PLAIN\*(C'\fR, erroneous username/password combinations will
be passed readible as last attempt!
.Sp
Da \f(CW\*(C`NTLM\*(C'\fR authentication requires Authen::NTLM ta be installed. Y'all KNOW dat shit, muthafucka!  Other
methodz may be added later n' shit.  Besides, you may also specify a \s-1CODE\s0
reference which implements some authentication.
.Sp
An \s-1ARRAY\s0 as \s-1TYPE\s0 can be used ta specify both mechanizzle as callback.  When
no array is used, callback of tha pair is set ta \f(CW\*(C`undef\*(C'\fR.  See
\&\*(L"authenticate\*(R" up in Mail::IMAPClient fo' tha gory details.
.Sp
example:
.Sp
.Vb 1
\& $transporter\->authentication(\*(AqCRAM\-MD5\*(Aq, [MY_AUTH => \e&c], \*(AqPLAIN\*(Aq);
\&
\& foreach mah $pair ($transporter\->authentication)
\& {   mah ($mechanism, $challange) = @$pair;
\&     ...
\& }
.Ve
.ie n .IP "$obj\->\fBdomain\fR([\s-1DOMAIN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdomain\fR([\s-1DOMAIN\s0])" 4
.IX Item "$obj->domain([DOMAIN])"
Used up in \s-1NTLM\s0 authentication ta define tha Windows domain which is
accessed. Y'all KNOW dat shit, muthafucka!  Initially set by new(domain) n' defaults ta the
serverz name.
.SS "Exchangin Information"
.IX Subsection "Exchangin Information"
.SS "Protocol [internals]"
.IX Subsection "Protocol [internals]"
Da gangbang methodz handle protocol internals, n' should not be used
by a aiiight user of dis class.
.ie n .IP "$obj\->\fBappendMessage\fR(\s-1MESSAGE, FOLDERNAME,\s0 [\s-1DATE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBappendMessage\fR(\s-1MESSAGE, FOLDERNAME,\s0 [\s-1DATE\s0])" 4
.IX Item "$obj->appendMessage(MESSAGE, FOLDERNAME, [DATE])"
Write tha message ta tha server.
Da optionizzle \s-1DATA\s0 can be a \s-1RFC\-822\s0 date or a timestamp.
.ie n .IP "$obj\->\fBcreateFolder\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateFolder\fR(\s-1NAME\s0)" 4
.IX Item "$obj->createFolder(NAME)"
Add a gangbangin' folder.
.ie n .IP "$obj\->\fBcreateImapClient\fR(\s-1CLASS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateImapClient\fR(\s-1CLASS\s0)" 4
.IX Item "$obj->createImapClient(CLASS)"
Smoke a object of \s-1CLASS,\s0 which extendz Mail::IMAPClient.
.ie n .IP "$obj\->\fBcurrentFolder\fR([\s-1FOLDERNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcurrentFolder\fR([\s-1FOLDERNAME\s0])" 4
.IX Item "$obj->currentFolder([FOLDERNAME])"
Be shizzle dat tha specific \s-1FOLDER\s0 is tha current one selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If the
folda be already selected, no \s-1IMAP\s0 traffic is ghon be produced.
.Sp
Da boolean return value indicates whether tha folda is selectable. It
will return undef if it do not exist.
.ie n .IP "$obj\->\fBdeleteFolder\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdeleteFolder\fR(\s-1NAME\s0)" 4
.IX Item "$obj->deleteFolder(NAME)"
Remove one folder.
.ie n .IP "$obj\->\fBdestroyDeleted\fR(\s-1FOLDER\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdestroyDeleted\fR(\s-1FOLDER\s0)" 4
.IX Item "$obj->destroyDeleted(FOLDER)"
Command tha server ta delete fo' real all lyrics which is flagged to
be deleted.
.ie n .IP "$obj\->\fBfetch\fR(ARRAY-OF-MESSAGES, \s-1INFO\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfetch\fR(ARRAY-OF-MESSAGES, \s-1INFO\s0)" 4
.IX Item "$obj->fetch(ARRAY-OF-MESSAGES, INFO)"
Git some \s-1INFO\s0 bout tha \s-1MESSAGES\s0 from tha server n' shit.  Da specified lyrics
shall extend Mail::Box::Net::Message, Returned be a list
of hashes, each info bout one result.  Da contentz of tha hash
differs per \s-1INFO,\s0 but at least a \f(CW\*(C`message\*(C'\fR field is ghon be present, to
relate ta tha message up in question.
.Sp
Da right folda should be selected before dis method is called. Y'all KNOW dat shit, muthafucka! When
the connection was lost, \f(CW\*(C`undef\*(C'\fR is returned. Y'all KNOW dat shit, muthafucka!  Without any
lyrics, n' empty array is returned. Y'all KNOW dat shit, muthafucka!  Da retrieval is done by
Mail::IMAPClient method \f(CW\*(C`fetch()\*(C'\fR, which is then
parsed.
.ie n .IP "$obj\->\fBflagsToLabels\fR(WHAT|FLAGS)" 4
.el .IP "\f(CW$obj\fR\->\fBflagsToLabels\fR(WHAT|FLAGS)" 4
.IX Item "$obj->flagsToLabels(WHAT|FLAGS)"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBflagsToLabels\fR(WHAT|FLAGS)" 4
.IX Item "Mail::Transport::IMAP4->flagsToLabels(WHAT|FLAGS)"
.PD
In \s-1SCALAR\s0 context, a hash wit labels is returned. Y'all KNOW dat shit, muthafucka!  In \s-1LIST\s0 context, pairs
are returned.
.Sp
Da \s-1WHAT\s0 parameta can be \f(CW\*(AqSET\*(Aq\fR, \f(CW\*(AqCLEAR\*(Aq\fR, or \f(CW\*(AqREPLACE\*(Aq\fR.  With the
latter, all standard imap flags do not step tha fuck up in tha list is ghon be ignored:
their value may either by set or cleared. Y'all KNOW dat shit, muthafucka!  See \fIgetFlags()\fR
.Sp
Unknown flags up in \s-1LIST\s0 is stripped from they backslash n' lower-cased.
For instance, '\eSomeWeirdFlag' will become `someweirdflag => 1'.
.Sp
example: translatin \s-1IMAP4\s0 flags tha fuck into MailBox flags
.Sp
.Vb 2
\& mah @flags  = (\*(Aq\eSeen\*(Aq, \*(Aq\eFlagged\*(Aq);
\& mah $labels = Mail::Transport::IMAP4\->flags2labels(SET => @flags);
.Ve
.ie n .IP "$obj\->\fBfolders\fR([\s-1FOLDERNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolders\fR([\s-1FOLDERNAME\s0])" 4
.IX Item "$obj->folders([FOLDERNAME])"
Returns a list of folda names which is sub-foldaz of tha specified
\&\s-1FOLDERNAME. \s0 Without \s-1FOLDERNAME,\s0 tha top-level foldernames is returned.
.ie n .IP "$obj\->\fBgetFields\fR(\s-1UID, NAME,\s0 [\s-1NAME, ...\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBgetFields\fR(\s-1UID, NAME,\s0 [\s-1NAME, ...\s0])" 4
.IX Item "$obj->getFields(UID, NAME, [NAME, ...])"
Git tha recordz wit tha specified \s-1NAMES\s0 from tha header n' shit.  Da header
fieldz is returned as list of Mail::Message::Field::Fast objects.
When tha name is \f(CW\*(C`ALL\*(C'\fR, tha whole header is returned.
.ie n .IP "$obj\->\fBgetFlags\fR(\s-1FOLDER, ID\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBgetFlags\fR(\s-1FOLDER, ID\s0)" 4
.IX Item "$obj->getFlags(FOLDER, ID)"
Returns tha jointz of all flags which is related ta tha message wit the
specified \s-1ID. \s0 These flags is translated tha fuck into tha names which are
standard fo' tha MailBox suite.
.Sp
A \s-1HASH\s0 is returned. Y'all KNOW dat shit, muthafucka!  Names which do not step tha fuck up will also provide
a value up in tha returned: tha wack fo' tha value is dat shiznit was present.
.ie n .IP "$obj\->\fBgetMessageAsString\fR(MESSAGE|UID)" 4
.el .IP "\f(CW$obj\fR\->\fBgetMessageAsString\fR(MESSAGE|UID)" 4
.IX Item "$obj->getMessageAsString(MESSAGE|UID)"
Returns tha whole text of tha specified message: tha head n' tha body.
.ie n .IP "$obj\->\fBids\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBids\fR()" 4
.IX Item "$obj->ids()"
Returns a list of UIDs which is defined by tha \s-1IMAP\s0 server.
.ie n .IP "$obj\->\fBimapClient\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBimapClient\fR()" 4
.IX Item "$obj->imapClient()"
Returns tha object which implements tha \s-1IMAP4\s0 protocol, a instance
of a Mail::IMAPClient, which is logged-in n' locked n loaded ta use.
.Sp
If tha contact ta tha server was still present or could be established,
an Mail::IMAPClient object is returned. Y'all KNOW dat shit, muthafucka!  Else, \f(CW\*(C`undef\*(C'\fR is returned and
no further actions should be tried on tha object.
.ie n .IP "$obj\->\fBlabelsToFlags\fR(HASH|PAIRS)" 4
.el .IP "\f(CW$obj\fR\->\fBlabelsToFlags\fR(HASH|PAIRS)" 4
.IX Item "$obj->labelsToFlags(HASH|PAIRS)"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBlabelsToFlags\fR(HASH|PAIRS)" 4
.IX Item "Mail::Transport::IMAP4->labelsToFlags(HASH|PAIRS)"
.PD
Convert MailBox labels tha fuck into \s-1IMAP\s0 flags.  Returned be a string.  Unsupported
labels is ignored.
.ie n .IP "$obj\->\fBlistFlags\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlistFlags\fR()" 4
.IX Item "$obj->listFlags()"
Returns all predefined flags as list.
.ie n .IP "$obj\->\fBlogin\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogin\fR()" 4
.IX Item "$obj->login()"
Establish a freshly smoked up connection ta tha \s-1IMAP4\s0 server, rockin username n' password.
.ie n .IP "$obj\->\fBsetFlags\fR(\s-1ID, LABEL, VALUE,\s0 [\s-1LABEL, VALUE\s0], ...)" 4
.el .IP "\f(CW$obj\fR\->\fBsetFlags\fR(\s-1ID, LABEL, VALUE,\s0 [\s-1LABEL, VALUE\s0], ...)" 4
.IX Item "$obj->setFlags(ID, LABEL, VALUE, [LABEL, VALUE], ...)"
Change tha flags on tha message which is represented by tha label.  The
value which can be related ta tha label is ghon be lost, cuz \s-1IMAP\s0 only
defines a funky-ass boolean value, where MailBox labels can contain strings.
.Sp
Returned be a list of LABEL=>\s-1VALUE\s0 pairs which could not be bust to
the \s-1IMAP\s0 server n' shit.  These joints may be cached up in a gangbangin' finger-lickin' different way.
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Transport::IMAP4->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Transport::IMAP4->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Transport::IMAP4->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Da connection is cleanly terminated when tha program is
terminated.
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot connect ta $host:$port fo' \s-1IMAP4: $\s0!" 4
.el .IP "Error: Cannot connect ta \f(CW$host:\fR$port fo' \s-1IMAP4: $\s0!" 4
.IX Item "Error: Cannot connect ta $host:$port fo' IMAP4: $!"
.PD 0
.ie n .IP "Error: \s-1IMAP\s0 cannot connect ta $host: $@" 4
.el .IP "Error: \s-1IMAP\s0 cannot connect ta \f(CW$host:\fR $@" 4
.IX Item "Error: IMAP cannot connect ta $host: $@"
.ie n .IP "Notice: \s-1IMAP4\s0 authenication $mechanizzle ta $host:$port successful" 4
.el .IP "Notice: \s-1IMAP4\s0 authenication \f(CW$mechanism\fR ta \f(CW$host:\fR$port successful" 4
.IX Item "Notice: IMAP4 authenication $mechanizzle ta $host:$port successful"
.IP "Error: \s-1IMAP4\s0 requires a username n' password" 4
.IX Item "Error: IMAP4 requires a username n' password"
.ie n .IP "Error: \s-1IMAP4\s0 username $username requires a password" 4
.el .IP "Error: \s-1IMAP4\s0 username \f(CW$username\fR requires a password" 4
.IX Item "Error: IMAP4 username $username requires a password"
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
.PD
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
