.\" Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_JOIN 3 2008-11-27 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_join \- join wit a terminated thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_join(pthread_t " thread ", void **" retval );
.fi
.sp
Compile n' link wit \fI\-pthread\fP.
.SH DESCRIPTION
The
.BR pthread_join ()
function waits fo' tha thread specified by
.IR thread
to terminate.
If dat thread has already terminated, then
.BR pthread_join ()
returns immediately.
Da thread specified by
.I thread
must be joinable.

If
.I retval
is not NULL, then
.BR pthread_join ()
copies tha exit statuz of tha target thread
(i.e., tha value dat tha target thread supplied to
.BR pthread_exit (3))
into tha location pointed ta by
.IR *retval .
If tha target thread was canceled, then
.B PTHREAD_CANCELED
is placed in
.IR *retval .

If multiple threadz simultaneously try ta join wit tha same thread,
the thangs up in dis biatch is undefined.
If tha thread calling
.BR pthread_join ()
is canceled, then tha target thread will remain joinable
(i.e., it aint gonna be detached).
.SH RETURN VALUE
On success,
.BR pthread_join ()
returns 0;
on error, it returns a error number.
.SH ERRORS
.TP
.B EDEADLK
A deadlock was detected
.\" Da followin verified by testin on glibc 2.8/NPTL:
(e.g., two threadz tried ta join wit each other);
or
.\" Da followin verified by testin on glibc 2.8/NPTL:
.I thread
specifies tha callin thread.
.TP
.B EINVAL
.I thread
is not a joinable thread.
.TP
.B EINVAL
Another thread be already waitin ta join wit dis thread.
.\" POSIX.1-2001 do not specify dis error case.
.TP
.B ESRCH
No thread wit tha ID
.I thread
could be found.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Afta a successful call to
.BR pthread_join (),
the calla is guaranteed dat tha target thread has terminated.

Joinin wit a thread dat has previously been joined thangs up in dis biatch in
undefined behavior.

Failure ta join wit a thread dat is joinable
(i.e., one dat aint detached),
produces a "zombie thread".
Avoid bustin this,
since each zombie thread consumes some system resources,
and when enough zombie threadz have accumulated,
it will no longer be possible ta create freshly smoked up threadz (or processes).

There is no pthreadz analog of
.IR "waitpid(-1,\ &status,\ 0)" ,
that is, "join wit any terminated thread".
If you believe you need dis functionality,
you probably need ta rethink yo' application design.

All of tha threadz up in a process is peers:
any thread can join wit any other thread up in tha process.
.SH EXAMPLE
See
.BR pthread_create (3).
.SH SEE ALSO
.BR pthread_cancel (3),
.BR pthread_create (3),
.BR pthread_detach (3),
.BR pthread_exit (3),
.BR pthread_tryjoin_np (3),
.BR pthreadz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
