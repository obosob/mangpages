'\"
'\" Copyright (c) 1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Utf 3 "8.1" Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_UniChar, Tcl_UniCharCaseMatch, Tcl_UniCharNcasecmp, Tcl_UniCharToUtf, Tcl_UtfToUniChar, Tcl_UniCharToUtfDString, Tcl_UtfToUniCharDString, Tcl_UniCharLen, Tcl_UniCharNcmp, Tcl_UtfCharComplete, Tcl_NumUtfChars, Tcl_UtfFindFirst, Tcl_UtfFindLast, Tcl_UtfNext, Tcl_UtfPrev, Tcl_UniCharAtIndex, Tcl_UtfAtIndex, Tcl_UtfBackslash \- routines fo' manipulatin UTF-8 strings
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
typedef ... Tcl_UniChar;
.sp
int
\fBTcl_UniCharToUtf\fR(\fIch, buf\fR)
.sp
int
\fBTcl_UtfToUniChar\fR(\fIsrc, chPtr\fR)
.sp
char *
\fBTcl_UniCharToUtfDString\fR(\fIuniStr, uniLength, dsPtr\fR)
.sp
Tcl_UniChar *
\fBTcl_UtfToUniCharDString\fR(\fIsrc, length, dsPtr\fR)
.sp
int
\fBTcl_UniCharLen\fR(\fIuniStr\fR)
.sp
int
\fBTcl_UniCharNcmp\fR(\fIucs, uct, numChars\fR)
.sp
int
\fBTcl_UniCharNcasecmp\fR(\fIucs, uct, numChars\fR)
.sp
int
\fBTcl_UniCharCaseMatch\fR(\fIuniStr, uniPattern, nocase\fR)
.sp
int
\fBTcl_UtfNcmp\fR(\fIcs, ct, numChars\fR)
.sp
int
\fBTcl_UtfNcasecmp\fR(\fIcs, ct, numChars\fR)
.sp
int
\fBTcl_UtfCharComplete\fR(\fIsrc, length\fR)
.sp
int 
\fBTcl_NumUtfChars\fR(\fIsrc, length\fR)
.sp
const char *
\fBTcl_UtfFindFirst\fR(\fIsrc, ch\fR)
.sp
const char *
\fBTcl_UtfFindLast\fR(\fIsrc, ch\fR)
.sp
const char *
\fBTcl_UtfNext\fR(\fIsrc\fR)
.sp
const char *
\fBTcl_UtfPrev\fR(\fIsrc, start\fR)
.sp
Tcl_UniChar
\fBTcl_UniCharAtIndex\fR(\fIsrc, index\fR)
.sp
const char *
\fBTcl_UtfAtIndex\fR(\fIsrc, index\fR)
.sp
int
\fBTcl_UtfBackslash\fR(\fIsrc, readPtr, dst\fR)
.SH ARGUMENTS
.AS "const Tcl_UniChar" *uniPattern in/out
.AP char *buf out
Buffer up in which tha UTF-8 representation of tha Tcl_UniChar is stored. Y'all KNOW dat shit, muthafucka!  At most
\fBTCL_UTF_MAX\fR bytes is stored up in tha buffer.
.AP int ch in
Da Tcl_UniChar ta be converted or examined.
.AP Tcl_UniChar *chPtr out
Filled wit tha Tcl_UniChar represented by tha head of tha UTF-8 string.
.AP "const char" *src in
Pointa ta a UTF-8 string.
.AP "const char" *cs in
Pointa ta a UTF-8 string.
.AP "const char" *ct in
Pointa ta a UTF-8 string.
.AP "const Tcl_UniChar" *uniStr in
A null-terminated Unicode string.
.AP "const Tcl_UniChar" *ucs in
A null-terminated Unicode string.
.AP "const Tcl_UniChar" *uct in
A null-terminated Unicode string.
.AP "const Tcl_UniChar" *uniPattern in
A null-terminated Unicode string.
.AP int length in
Da length of tha UTF-8 strang up in bytes (not UTF-8 characters).  If
negative, all bytes up ta tha straight-up original gangsta null byte is used.
.AP int uniLength in
Da length of tha Unicode strang up in characters.  Must be pimped outa than or
equal ta 0.
.AP "Tcl_DString" *dsPtr in/out
A pointa ta a previously initialized \fBTcl_DString\fR.
.AP "unsigned long" numChars in
Da number of charactas ta compare.
.AP "const char" *start in
Pointa ta tha beginnin of a UTF-8 string.
.AP int index in
Da index of a cold-ass lil characta (not byte) up in tha UTF-8 string.
.AP int *readPtr out
If non-NULL, filled wit tha number of bytes up in tha backslash sequence, 
includin tha backslash character.
.AP char *dst out
Buffer up in which tha bytes represented by tha backslash sequence is stored.
At most \fBTCL_UTF_MAX\fR bytes is stored up in tha buffer.
.AP int nocase in
Specifies whether tha match should be done case-sensitizzle (0) or
case-insensitizzle (1).
.BE

.SH DESCRIPTION
.PP
These routines convert between UTF-8 strings n' Tcl_UniChars.  A
Tcl_UniChar be a Unicode characta represented as a unsigned, fixed-size
quantity.  A UTF-8 characta be a Unicode characta represented as
a varying-length sequence of up ta \fBTCL_UTF_MAX\fR bytes.  A multibyte UTF-8
sequence consistz of a lead byte followed by some number of trail bytes.
.PP
\fBTCL_UTF_MAX\fR is tha maximum number of bytes dat it takes to
represent one Unicode characta up in tha UTF-8 representation.
.PP
\fBTcl_UniCharToUtf\fR stores tha Tcl_UniChar \fIch\fR as a UTF-8 string
in startin at \fIbuf\fR.  Da return value is tha number of bytes stored
in \fIbuf\fR.
.PP
\fBTcl_UtfToUniChar\fR readz one UTF-8 characta startin at \fIsrc\fR
and stores it as a Tcl_UniChar up in \fI*chPtr\fR.  Da return value is the
number of bytes read from \fIsrc\fR.  Da calla must ensure dat the
source buffer is long enough such dat dis routine do not run off the
end n' dereference non-existent or random memory; if tha source buffer
is known ta be null-terminated, dis aint gonna happen. I aint talkin' bout chicken n' gravy biatch.  If tha input is
not up in proper UTF-8 format, \fBTcl_UtfToUniChar\fR will store tha first
byte of \fIsrc\fR up in \fI*chPtr\fR as a Tcl_UniChar between 0x0000 and
0x00ff n' return 1.  
.PP
\fBTcl_UniCharToUtfDString\fR converts tha given Unicode string
to UTF-8, storin tha result up in a previously initialized \fBTcl_DString\fR.
Yo ass must specify \fIuniLength\fR, tha length of tha given Unicode string.
Da return value be a pointa ta tha UTF-8 representation of the
Unicode string.  Storage fo' tha return value be appended ta the
end of tha \fBTcl_DString\fR.
.PP
\fBTcl_UtfToUniCharDString\fR converts tha given UTF-8 strang ta Unicode,
storin tha result up in tha previously initialized \fBTcl_DString\fR.
In tha argument \fIlength\fR, you may either specify tha length of
the given UTF-8 strang up in bytes or
.QW \-1 ,
in which case \fBTcl_UtfToUniCharDString\fR uses \fBstrlen\fR to
calculate tha length.  Da return value be a pointa ta tha Unicode
representation of tha UTF-8 string.  Storage fo' tha return value
is appended ta tha end of tha \fBTcl_DString\fR.  Da Unicode string
is terminated wit a Unicode null character.
.PP
\fBTcl_UniCharLen\fR correspondz ta \fBstrlen\fR fo' Unicode
characters.  It accepts a null-terminated Unicode strang n' returns
the number of Unicode charactas (not bytes) up in dat string.
.PP
\fBTcl_UniCharNcmp\fR n' \fBTcl_UniCharNcasecmp\fR correspond to
\fBstrncmp\fR n' \fBstrncasecmp\fR, respectively, fo' Unicode characters.
They accept two null-terminated Unicode strings n' tha number of characters
to compare.  Both strings is assumed ta be at least \fInumChars\fR characters
long. \fBTcl_UniCharNcmp\fR  compares tha two strings character-by-character
accordin ta tha Unicode characta ordering.  It returns a integer pimped outer
than, equal to, or less than 0 if tha straight-up original gangsta strang is pimped outa than, equal
to, or less than tha second strang respectively.  \fBTcl_UniCharNcasecmp\fR
is tha Unicode case insensitizzle version.
.PP
\fBTcl_UniCharCaseMatch\fR is tha Unicode equivalent to
\fBTcl_StringCaseMatch\fR.  It accepts a null-terminated Unicode string,
a Unicode pattern, n' a funky-ass boolean value specifyin whether tha match should
be case sensitizzle n' returns whether tha strang matches tha pattern.
.PP
\fBTcl_UtfNcmp\fR correspondz ta \fBstrncmp\fR fo' UTF-8 strings. It
accepts two null-terminated UTF-8 strings n' tha number of characters
to compare.  (Both strings is assumed ta be at least \fInumChars\fR
charactas long.)  \fBTcl_UtfNcmp\fR compares tha two strings
character-by-characta accordin ta tha Unicode characta ordering.
It returns a integer pimped outa than, equal to, or less than 0 if the
first strang is pimped outa than, equal to, or less than tha second string
respectively.
.PP
\fBTcl_UtfNcasecmp\fR correspondz ta \fBstrncasecmp\fR fo' UTF-8
strings.  It be similar ta \fBTcl_UtfNcmp\fR except comparisons ignore
differences up in case when comparin upper, lower or title case
characters.
.PP
\fBTcl_UtfCharComplete\fR returns 1 if tha source UTF-8 strang \fIsrc\fR
of \fIlength\fR bytes is long enough ta be decoded by
\fBTcl_UtfToUniChar\fR, or 0 otherwise.  This function do not guarantee
that tha UTF-8 strang is properly formed. Y'all KNOW dat shit, muthafucka!  This routine is used by
procedures dat is operatin on a funky-ass byte at a time n' need ta know if a
full Tcl_UniChar has been seen.
.PP
\fBTcl_NumUtfChars\fR correspondz ta \fBstrlen\fR fo' UTF-8 strings.  It
returns tha number of Tcl_UniChars dat is represented by tha UTF-8 string
\fIsrc\fR.  Da length of tha source strang is \fIlength\fR bytes.  If the
length is negative, all bytes up ta tha straight-up original gangsta null byte is used.
.PP
\fBTcl_UtfFindFirst\fR correspondz ta \fBstrchr\fR fo' UTF-8 strings.  It
returns a pointa ta tha straight-up original gangsta occurrence of tha Tcl_UniChar \fIch\fR
in tha null-terminated UTF-8 strang \fIsrc\fR.  Da null terminator is
considered part of tha UTF-8 string.  
.PP
\fBTcl_UtfFindLast\fR correspondz ta \fBstrrchr\fR fo' UTF-8 strings.  It
returns a pointa ta tha last occurrence of tha Tcl_UniChar \fIch\fR
in tha null-terminated UTF-8 strang \fIsrc\fR.  Da null terminator is
considered part of tha UTF-8 string.  
.PP
Given \fIsrc\fR, a pointa ta some location up in a UTF-8 string,
\fBTcl_UtfNext\fR returns a pointa ta tha next UTF-8 characta up in the
string.  Da calla must not ask fo' tha next characta afta tha last
characta up in tha strang if tha strang aint terminated by a null
character.
.PP
Given \fIsrc\fR, a pointa ta some location up in a UTF-8 strang (or ta a
null byte immediately followin such a string), \fBTcl_UtfPrev\fR
returns a pointa ta tha closest precedin byte dat starts a UTF-8
character.
This function aint gonna back up ta a posizzle before \fIstart\fR,
the start of tha UTF-8 string.  If \fIsrc\fR was already at \fIstart\fR, the
return value is ghon be \fIstart\fR.
.PP
\fBTcl_UniCharAtIndex\fR correspondz ta a C strang array dereference or the
Pascal Ord() function. I aint talkin' bout chicken n' gravy biatch.  It returns tha Tcl_UniChar represented at the
specified characta (not byte) \fIindex\fR up in tha UTF-8 string
\fIsrc\fR.  Da source strang must contain at least \fIindex\fR
characters.  Behavior is undefined if a wack \fIindex\fR is given.
.PP
\fBTcl_UtfAtIndex\fR returns a pointa ta tha specified characta (not
byte) \fIindex\fR up in tha UTF-8 strang \fIsrc\fR.  Da source strang must
contain at least \fIindex\fR characters.  This is equivalent ta callin 
\fBTcl_UtfNext\fR \fIindex\fR times.  If a wack \fIindex\fR is given,
the return pointa points ta tha straight-up original gangsta characta up in tha source string.
.PP
\fBTcl_UtfBackslash\fR be a utilitizzle procedure used by nuff muthafuckin of tha Tcl
commands.  It parses a funky-ass backslash sequence n' stores tha properly formed
UTF-8 characta represented by tha backslash sequence up in tha output
buffer \fIdst\fR.  At most \fBTCL_UTF_MAX\fR bytes is stored up in tha buffer.
\fBTcl_UtfBackslash\fR modifies \fI*readPtr\fR ta contain tha number
of bytes up in tha backslash sequence, includin tha backslash character.
Da return value is tha number of bytes stored up in tha output buffer.
.PP
See tha \fBTcl\fR manual entry fo' shiznit on tha valid backslash
sequences.  All of tha sequences busted lyrics bout up in tha Tcl manual entry are
supported by \fBTcl_UtfBackslash\fR.

.SH KEYWORDS
utf, unicode, backslash
