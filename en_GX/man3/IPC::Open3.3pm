.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPC::Open3 3pm"
.TH IPC::Open3 3pm "2014-10-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::Open3 \- open a process fo' reading, writing, n' error handlin rockin open3()
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    $pid = open3(\e*CHLD_IN, \e*CHLD_OUT, \e*CHLD_ERR,
\&                    \*(Aqsome cmd n' args\*(Aq, \*(Aqoptarg\*(Aq, ...);
\&
\&    my($wtr, $rdr, $err);
\&    use Symbol \*(Aqgensym\*(Aq; $err = gensym;
\&    $pid = open3($wtr, $rdr, $err,
\&                    \*(Aqsome cmd n' args\*(Aq, \*(Aqoptarg\*(Aq, ...);
\&
\&    waitpid( $pid, 0 );
\&    mah $child_exit_status = $? >> 8;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Extremely similar ta \fIopen2()\fR, \fIopen3()\fR spawns tha given \f(CW$cmd\fR and
connects \s-1CHLD_OUT\s0 fo' readin from tha child, \s-1CHLD_IN\s0 fo' freestylin to
the child, n' \s-1CHLD_ERR\s0 fo' errors.  If \s-1CHLD_ERR\s0 is false, or the
same file descriptor as \s-1CHLD_OUT,\s0 then \s-1STDOUT\s0 n' \s-1STDERR\s0 of tha child
are on tha same filehandle (this means dat a autovivified lexical
cannot be used fo' tha \s-1STDERR\s0 filehandle, peep \s-1SYNOPSIS\s0).  Da \s-1CHLD_IN\s0
will have autoflush turned on.
.PP
If \s-1CHLD_IN\s0 begins wit \f(CW\*(C`<&\*(C'\fR, then \s-1CHLD_IN\s0 is ghon be closed up in the
parent, n' tha lil pimp will read from it directly.  If \s-1CHLD_OUT\s0 or
\&\s-1CHLD_ERR\s0 begins wit \f(CW\*(C`>&\*(C'\fR, then tha lil pimp will bust output
directly ta dat filehandle.  In both cases, there is ghon be a \fIdup\fR\|(2)
instead of a \fIpipe\fR\|(2) made.
.PP
If either reader or writa is tha null string, dis is ghon be replaced
by a autogenerated filehandle.  If so, you must pass a valid lvalue
in tha parameta slot so it can be overwritten up in tha caller, or
an exception is ghon be raised.
.PP
Da filehandlez may also be integers, up in which case they is understood
as file descriptors.
.PP
\&\fIopen3()\fR returns tha process \s-1ID\s0 of tha lil pimp process.  It don't return on
failure: it just raises a exception matchin \f(CW\*(C`/^open3:/\*(C'\fR.  However,
\&\f(CW\*(C`exec\*(C'\fR failures up in tha lil pimp (like fuckin no such file or permission denied),
are just reported ta \s-1CHLD_ERR\s0 under Windows n' \s-1OS/2,\s0 as it aint possible
to trap em.
.PP
If tha lil pimp process takes a thugged-out dirt nap fo' any reason, tha next write ta \s-1CHLD_IN\s0 is
likely ta generate a \s-1SIGPIPE\s0 up in tha parent, which is fatal by default.
So you may wish ta handle dis signal.
.PP
Note if you specify \f(CW\*(C`\-\*(C'\fR as tha command, up in a analogous fashizzle to
\&\f(CW\*(C`open(FOO, "\-|")\*(C'\fR tha lil pimp process will just be tha forked Perl
process rather than a external command. Y'all KNOW dat shit, muthafucka!  This feature aint yet
supported on Win32 platforms.
.PP
\&\fIopen3()\fR do not wait fo' n' reap tha lil pimp process afta it exits.
Except fo' short programs where itz aaight ta let tha operatin system
take care of this, you need ta do dis yo ass.  This is normally as
simple as callin \f(CW\*(C`waitpid $pid, 0\*(C'\fR when you done wit tha process.
Failin ta do dis can result up in a accumulation of defunct or \*(L"zombie\*(R"
processes.  See \*(L"waitpid\*(R" up in perlfunc fo' mo' shiznit.
.PP
If you try ta read from tha childz stdout writa n' they stderr
writer, you gonna have problems wit blocking, which means you gonna want
to use \fIselect()\fR or tha IO::Select, which means you'd dopest use
\&\fIsysread()\fR instead of \fIreadline()\fR fo' aiiight stuff.
.PP
This is straight-up dangerous, as you may block forever n' shit.  It assumes it's
goin ta rap ta suttin' like \fBbc\fR, both freestylin ta it n' reading
from dat shit.  This is presumably safe cuz you \*(L"know\*(R" dat commands
like \fBbc\fR will read a line at a time n' output a line at a time.
Programs like \fBsort\fR dat read they entire input stream first,
however, is like apt ta cause deadlock.
.PP
Da big-ass problem wit dis approach is dat if you aint gots control
over source code bein run up in tha lil pimp process, you can't control
what it do wit pipe buffering.  Thus you can't just open a pipe to
\&\f(CW\*(C`cat \-v\*(C'\fR n' continually read n' write a line from dat shit.
.SH "See Also"
.IX Header "See Also"
.IP "IPC::Open2" 4
.IX Item "IPC::Open2"
Like Open3 but without \s-1STDERR\s0 catpure.
.IP "IPC::Run" 4
.IX Item "IPC::Run"
This be a \s-1CPAN\s0 module dat has betta error handlin n' mo' facilities
than Open3.
.SH "WARNING"
.IX Header "WARNING"
Da order of arguments differs from dat of \fIopen2()\fR.
