
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code n' manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroupz Single UNIX justification
.\"      http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBRTOWC 3  2013-06-21 "GNU" "Linux Programmerz Manual"
.SH NAME
mbrtowc \- convert a multibyte sequence ta a wide character
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t mbrtowc(wchar_t *" pwc ", const char *" s ", size_t " n \
", mbstate_t *" ps );
.fi
.SH DESCRIPTION
Da main case fo' dis function is when
.IR s
is not NULL and
.I pwc
is
not NULL.
In dis case, the
.BR mbrtowc ()
function inspects at most
.I n
bytez of tha multibyte strang startin at
.IR s ,
extracts tha next complete
multibyte character, converts it ta a wide characta n' stores it at
.IR *pwc .
It thugged-out shiznit tha shift state
.IR *ps .
If tha converted wide
characta aint L\(aq\\0\(aq (the null wide character),
it returns tha number of bytes dat was consumed
from
.IR s .
If tha converted wide characta is L\(aq\\0\(aq, it resets tha shift
state
.I *ps
to tha initial state n' returns 0.
.PP
If the
.IR n
bytes startin at
.I s
do not contain a cold-ass lil complete multibyte
character,
.BR mbrtowc ()
returns
.IR "(size_t)\ \-2" .
This can happen even if
.I n
>=
.IR MB_CUR_MAX ,
if tha multibyte strang gotz nuff redundant shift
sequences.
.PP
If tha multibyte strang startin at
.I s
gotz nuff a invalid multibyte
sequence before tha next complete character,
.BR mbrtowc ()
returns
.IR "(size_t)\ \-1"
and sets
.I errno
to
.BR EILSEQ .
In dis case,
the effects on
.I *ps
are undefined.
.PP
A different case is when
.IR s
is not NULL but
.I pwc
is NULL.
In this
case the
.BR mbrtowc ()
function behaves as above, except dat it do not
store tha converted wide characta up in memory.
.PP
A third case is when
.I s
is NULL.
In dis case,
.IR pwc
and
.I n
are
ignored.
If tha conversion state represented by
.I *ps
denotes an
incomplete multibyte characta conversion, the
.BR mbrtowc ()
function
returns
.IR "(size_t)\ \-1" ,
sets
.I errno
to
.BR EILSEQ ,
and
leaves
.I *ps
in a undefined state.
Otherwise, the
.BR mbrtowc ()
function
puts
.I *ps
in tha initial state n' returns 0.
.PP
In all of tha above cases, if
.I ps
is a NULL pointer, a static anonymous
state known only ta the
.BR mbrtowc ()
function is used instead.
Otherwise,
.IR *ps
must be a valid
.I mbstate_t
object.
An
.IR mbstate_t
object
.I a
can be initialized ta tha initial state
by zeroin it, fo' example using
.sp
.in +4n
memset(&a, 0, sizeof(a));
.in
.SH RETURN VALUE
The
.BR mbrtowc ()
function returns tha number of bytes parsed from the
multibyte sequence startin at
.IR s ,
if a non-L\(aq\\0\(aq wide character
was recognized.
It returns 0, if a L\(aq\\0\(aq wide characta was recognized.
It returns
.I (size_t)\ \-1
and sets
.I errno
to
.BR EILSEQ ,
if a invalid multibyte sequence was
encountered.
It returns
.I "(size_t)\ \-2"
if it couldn't parse a cold-ass lil complete multibyte
character, meanin that
.I n
should be increased.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR mbrtowc ()
function is thread-safe wit exceptions.
It aint thread-safe if called wit a NULL \fIps\fP parameter.
.SH CONFORMING TO
C99.
.SH NOTES
Da behavior of
.BR mbrtowc ()
dependz on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR mbsrtowcs (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
