'\" t
.\"     Title: glGetActiveUniformsiv
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLGETACTIVEUNIFORMSI" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glGetActiveUniformsiv \- Returns shiznit bout nuff muthafuckin actizzle uniform variablez fo' tha specified program object
.SH "C SPECIFICATION"
.HP \w'void\ glGetActiveUniformsiv('u
.BI "void glGetActiveUniformsiv(GLuint\ " "program" ", GLsizei\ " "uniformCount" ", const\ GLuint\ *" "uniformIndices" ", GLenum\ " "pname" ", GLint\ *" "params" ");"
.SH "PARAMETERS"
.PP
\fIprogram\fR
.RS 4
Specifies tha program object ta be queried\&.
.RE
.PP
\fIuniformCount\fR
.RS 4
Specifies both tha number of elements up in tha array of indices
\fIuniformIndices\fR
and tha number of parametas freestyled to
\fIparams\fR
upon successful return\&.
.RE
.PP
\fIuniformIndices\fR
.RS 4
Specifies tha address of a array of
\fIuniformCount\fR
integers containin tha indicez of uniforms within
\fIprogram\fR
whose parameter
\fIpname\fR
pname\&.
.RE
.PP
\fIpname\fR
.RS 4
Specifies tha property of tha each uniform in
\fIuniformIndices\fR
that should be freestyled tha fuck into tha correspondin element of
\fIparams\fR\&.
.RE
.PP
\fIparams\fR
.RS 4
Specifies tha address of a array of
\fIuniformCount\fR
integers which is ta receive tha value of
\fIpname\fR
for each uniform in
\fIuniformIndices\fR\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglGetActiveUniformsiv\fR
queries tha value of tha parameta named
\fIpname\fR
for each of tha uniforms within
\fIprogram\fR
whose indices is specified up in tha array of
\fIuniformCount\fR
unsigned integers
\fIuniformIndices\fR\&. Upon success, tha value of tha parameta fo' each uniform is freestyled tha fuck into tha correspondin entry up in tha array whose address is given in
\fIparams\fR\&. If a error is generated, not a god damn thang is freestyled into
\fIparams\fR\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_TYPE\fR, then a array identifyin tha typez of uniforms specified by tha correspondin array of
\fIuniformIndices\fR
is returned\&. Da returned types can be any of tha joints from tha followin table:
.TS
allbox tab(:);
lB lB.
T{
\fB
                        Returned Symbolic Contant
                        \fR
T}:T{
\fB
                        Shader Uniform Type
                        \fR
T}
.T&
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l.
T{
\fBGL_FLOAT\fR
T}:T{
\fBfloat\fR
T}
T{
\fBGL_FLOAT_VEC2\fR
T}:T{
\fBvec2\fR
T}
T{
\fBGL_FLOAT_VEC3\fR
T}:T{
\fBvec3\fR
T}
T{
\fBGL_FLOAT_VEC4\fR
T}:T{
\fBvec4\fR
T}
T{
\fBGL_DOUBLE\fR
T}:T{
\fBdouble\fR
T}
T{
\fBGL_DOUBLE_VEC2\fR
T}:T{
\fBdvec2\fR
T}
T{
\fBGL_DOUBLE_VEC3\fR
T}:T{
\fBdvec3\fR
T}
T{
\fBGL_DOUBLE_VEC4\fR
T}:T{
\fBdvec4\fR
T}
T{
\fBGL_INT\fR
T}:T{
\fBint\fR
T}
T{
\fBGL_INT_VEC2\fR
T}:T{
\fBivec2\fR
T}
T{
\fBGL_INT_VEC3\fR
T}:T{
\fBivec3\fR
T}
T{
\fBGL_INT_VEC4\fR
T}:T{
\fBivec4\fR
T}
T{
\fBGL_UNSIGNED_INT\fR
T}:T{
\fBunsigned int\fR
T}
T{
\fBGL_UNSIGNED_INT_VEC2\fR
T}:T{
\fBuvec2\fR
T}
T{
\fBGL_UNSIGNED_INT_VEC3\fR
T}:T{
\fBuvec3\fR
T}
T{
\fBGL_UNSIGNED_INT_VEC4\fR
T}:T{
\fBuvec4\fR
T}
T{
\fBGL_BOOL\fR
T}:T{
\fBbool\fR
T}
T{
\fBGL_BOOL_VEC2\fR
T}:T{
\fBbvec2\fR
T}
T{
\fBGL_BOOL_VEC3\fR
T}:T{
\fBbvec3\fR
T}
T{
\fBGL_BOOL_VEC4\fR
T}:T{
\fBbvec4\fR
T}
T{
\fBGL_FLOAT_MAT2\fR
T}:T{
\fBmat2\fR
T}
T{
\fBGL_FLOAT_MAT3\fR
T}:T{
\fBmat3\fR
T}
T{
\fBGL_FLOAT_MAT4\fR
T}:T{
\fBmat4\fR
T}
T{
\fBGL_FLOAT_MAT2x3\fR
T}:T{
\fBmat2x3\fR
T}
T{
\fBGL_FLOAT_MAT2x4\fR
T}:T{
\fBmat2x4\fR
T}
T{
\fBGL_FLOAT_MAT3x2\fR
T}:T{
\fBmat3x2\fR
T}
T{
\fBGL_FLOAT_MAT3x4\fR
T}:T{
\fBmat3x4\fR
T}
T{
\fBGL_FLOAT_MAT4x2\fR
T}:T{
\fBmat4x2\fR
T}
T{
\fBGL_FLOAT_MAT4x3\fR
T}:T{
\fBmat4x3\fR
T}
T{
\fBGL_DOUBLE_MAT2\fR
T}:T{
\fBdmat2\fR
T}
T{
\fBGL_DOUBLE_MAT3\fR
T}:T{
\fBdmat3\fR
T}
T{
\fBGL_DOUBLE_MAT4\fR
T}:T{
\fBdmat4\fR
T}
T{
\fBGL_DOUBLE_MAT2x3\fR
T}:T{
\fBdmat2x3\fR
T}
T{
\fBGL_DOUBLE_MAT2x4\fR
T}:T{
\fBdmat2x4\fR
T}
T{
\fBGL_DOUBLE_MAT3x2\fR
T}:T{
\fBdmat3x2\fR
T}
T{
\fBGL_DOUBLE_MAT3x4\fR
T}:T{
\fBdmat3x4\fR
T}
T{
\fBGL_DOUBLE_MAT4x2\fR
T}:T{
\fBdmat4x2\fR
T}
T{
\fBGL_DOUBLE_MAT4x3\fR
T}:T{
\fBdmat4x3\fR
T}
T{
\fBGL_SAMPLER_1D\fR
T}:T{
\fBsampler1D\fR
T}
T{
\fBGL_SAMPLER_2D\fR
T}:T{
\fBsampler2D\fR
T}
T{
\fBGL_SAMPLER_3D\fR
T}:T{
\fBsampler3D\fR
T}
T{
\fBGL_SAMPLER_CUBE\fR
T}:T{
\fBsamplerCube\fR
T}
T{
\fBGL_SAMPLER_1D_SHADOW\fR
T}:T{
\fBsampler1DShadow\fR
T}
T{
\fBGL_SAMPLER_2D_SHADOW\fR
T}:T{
\fBsampler2DShadow\fR
T}
T{
\fBGL_SAMPLER_1D_ARRAY\fR
T}:T{
\fBsampler1DArray\fR
T}
T{
\fBGL_SAMPLER_2D_ARRAY\fR
T}:T{
\fBsampler2DArray\fR
T}
T{
\fBGL_SAMPLER_1D_ARRAY_SHADOW\fR
T}:T{
\fBsampler1DArrayShadow\fR
T}
T{
\fBGL_SAMPLER_2D_ARRAY_SHADOW\fR
T}:T{
\fBsampler2DArrayShadow\fR
T}
T{
\fBGL_SAMPLER_2D_MULTISAMPLE\fR
T}:T{
\fBsampler2DMS\fR
T}
T{
\fBGL_SAMPLER_2D_MULTISAMPLE_ARRAY\fR
T}:T{
\fBsampler2DMSArray\fR
T}
T{
\fBGL_SAMPLER_CUBE_SHADOW\fR
T}:T{
\fBsamplerCubeShadow\fR
T}
T{
\fBGL_SAMPLER_BUFFER\fR
T}:T{
\fBsamplerBuffer\fR
T}
T{
\fBGL_SAMPLER_2D_RECT\fR
T}:T{
\fBsampler2DRect\fR
T}
T{
\fBGL_SAMPLER_2D_RECT_SHADOW\fR
T}:T{
\fBsampler2DRectShadow\fR
T}
T{
\fBGL_INT_SAMPLER_1D\fR
T}:T{
\fBisampler1D\fR
T}
T{
\fBGL_INT_SAMPLER_2D\fR
T}:T{
\fBisampler2D\fR
T}
T{
\fBGL_INT_SAMPLER_3D\fR
T}:T{
\fBisampler3D\fR
T}
T{
\fBGL_INT_SAMPLER_CUBE\fR
T}:T{
\fBisamplerCube\fR
T}
T{
\fBGL_INT_SAMPLER_1D_ARRAY\fR
T}:T{
\fBisampler1DArray\fR
T}
T{
\fBGL_INT_SAMPLER_2D_ARRAY\fR
T}:T{
\fBisampler2DArray\fR
T}
T{
\fBGL_INT_SAMPLER_2D_MULTISAMPLE\fR
T}:T{
\fBisampler2DMS\fR
T}
T{
\fBGL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY\fR
T}:T{
\fBisampler2DMSArray\fR
T}
T{
\fBGL_INT_SAMPLER_BUFFER\fR
T}:T{
\fBisamplerBuffer\fR
T}
T{
\fBGL_INT_SAMPLER_2D_RECT\fR
T}:T{
\fBisampler2DRect\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_1D\fR
T}:T{
\fBusampler1D\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_2D\fR
T}:T{
\fBusampler2D\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_3D\fR
T}:T{
\fBusampler3D\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_CUBE\fR
T}:T{
\fBusamplerCube\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_1D_ARRAY\fR
T}:T{
\fBusampler2DArray\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_2D_ARRAY\fR
T}:T{
\fBusampler2DArray\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE\fR
T}:T{
\fBusampler2DMS\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY\fR
T}:T{
\fBusampler2DMSArray\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_BUFFER\fR
T}:T{
\fBusamplerBuffer\fR
T}
T{
\fBGL_UNSIGNED_INT_SAMPLER_2D_RECT\fR
T}:T{
\fBusampler2DRect\fR
T}
.TE
.sp 1
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_SIZE\fR, then a array identifyin tha size of tha uniforms specified by tha correspondin array of
\fIuniformIndices\fR
is returned\&. Da sizes returned is up in unitz of tha type returned by a query of
\fBGL_UNIFORM_TYPE\fR\&. For actizzle uniforms dat is arrays, tha size is tha number of actizzle elements up in tha array; fo' all other uniforms, tha size is one\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_NAME_LENGTH\fR, then a array identifyin tha length, includin tha terminatin null character, of tha uniform name strings specified by tha correspondin array of
\fIuniformIndices\fR
is returned\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_BLOCK_INDEX\fR, then a array identifyin tha the uniform block index of each of tha uniforms specified by tha correspondin array of
\fIuniformIndices\fR
is returned\&. Da uniform block index of a uniform associated wit tha default uniform block is \-1\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_OFFSET\fR, then a array of uniform buffer offsets is returned\&. For uniforms up in a named uniform block, tha returned value is ghon be its offset, up in basic machine units, relatizzle ta tha beginnin of tha uniform block up in tha buffer object data store\&. For atomic counta uniforms, tha returned value is ghon be its offset relatizzle ta tha beginnin of its actizzle atomic counta buffer\&. For all other uniforms, \-1 is ghon be returned\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_ARRAY_STRIDE\fR, then a array identifyin tha stride between elementz of each of tha uniforms specified by tha correspondin array of
\fIuniformIndices\fR
is returned\&. For uniforms up in named uniform blocks n' fo' uniforms declared as atomic counters, tha stride is tha difference, up in basic machine units, of consecutizzle elements up in a array, or zero fo' uniforms not declared as a array\&. For all other uniforms, a stride of \-1 is ghon be returned\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_MATRIX_STRIDE\fR, then a array identifyin tha stride between columnz of a cold-ass lil column\-major matrix or rowz of a row\-major matrix, up in basic machine units, of each of tha uniforms specified by tha correspondin array of
\fIuniformIndices\fR
is returned\&. Da matrix stride of a uniform associated wit tha default uniform block is \-1\&. Note dat dis shiznit only make sense fo' uniforms dat is matrices\&. For uniforms dat is not matrices yo, but is declared up in a named uniform block, a matrix stride of zero is returned\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_IS_ROW_MAJOR\fR, then a array identifyin whether each of tha uniforms specified by tha correspondin array of
\fIuniformIndices\fR
is a row\-major matrix or not is returned\& fo' realz. A value of one indicates a row\-major matrix, n' a value of zero indicates a cold-ass lil column\-major matrix, a matrix up in tha default uniform block, or a non\-matrix\&.
.PP
If
\fIpname\fR
is
\fBGL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX\fR, then a array identifyin tha actizzle atomic counta buffer index of each of tha uniforms specified by tha correspondin array of
\fIuniformIndices\fR
is returned\&. For uniforms other than atomic counters, tha returned buffer index is \-1\&. Da returned indices may be passed to
\fBglGetActiveAtomicCounterBufferiv\fR()
to query tha propertizzlez of tha associated buffer, n' not necessarily tha bindin point specified up in tha uniform declaration\&.
.SH "NOTES"
.PP
Da double types,
\fBGL_DOUBLE\fR,
\fBGL_DOUBLE_VEC2\fR,
\fBGL_DOUBLE_VEC3\fR,
\fBGL_DOUBLE_VEC4\fR,
\fBGL_DOUBLE_MAT2\fR,
\fBGL_DOUBLE_MAT3\fR,
\fBGL_DOUBLE_MAT4\fR,
\fBGL_DOUBLE_MAT2x3\fR,
\fBGL_DOUBLE_MAT2x4\fR,
\fBGL_DOUBLE_MAT3x2\fR,
\fBGL_DOUBLE_MAT3x4\fR,
\fBGL_DOUBLE_MAT4x2\fR, and
\fBGL_DOUBLE_MAT4x3\fR
are only available if tha GL version is 4\&.1 or higher\&.
.PP
\fBGL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX\fR
is only accepted by
\fIpname\fR
if tha GL version is 4\&.2 or higher\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIprogram\fR
is not a value generated by OpenGL\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIprogram\fR
is not a program object\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIuniformCount\fR
is pimped outa than or equal ta tha value of
\fBGL_ACTIVE_UNIFORMS\fR
for
\fIprogram\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIpname\fR
is not a accepted token\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_VERTEX_UNIFORM_COMPONENTS\fR,
\fBGL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS\fR,
\fBGL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS\fR,
\fBGL_MAX_GEOMETRY_UNIFORM_COMPONENTS\fR,
\fBGL_MAX_FRAGMENT_UNIFORM_COMPONENTS\fR, or
\fBGL_MAX_COMBINED_UNIFORM_COMPONENTS\fR\&.
.PP
\fBglGetProgram\fR()
with argument
\fBGL_ACTIVE_UNIFORMS\fR
or
\fBGL_ACTIVE_UNIFORM_MAX_LENGTH\fR\&.
.PP
\fBglIsProgram\fR()
.SH "SEE ALSO"
.PP
\fBglGetUniform\fR(),
\fBglGetActiveUniform\fR(),
\fBglGetUniformLocation\fR(),
\fBglLinkProgram\fR(),
\fBglUniform\fR(),
\fBglUseProgram\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2011 Khronos Group This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
