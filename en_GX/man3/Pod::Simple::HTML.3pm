.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Simple::HTML 3"
.TH Pod::Simple::HTML 3 "2013-05-03" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Simple::HTML \- convert Pod ta HTML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  perl \-MPod::Simple::HTML \-e Pod::Simple::HTML::go thangy.pod
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is fo' bustin a \s-1HTML\s0 renderin of a Pod document.
.PP
This be a subclass of Pod::Simple::PullParser n' inherits all its
methodz (and options).
.PP
Note dat if you wanna do a funky-ass batch conversion of a shitload of Pod
documents ta \s-1HTML,\s0 you should peep tha module Pod::Simple::HTMLBatch.
.SH "CALLING FROM THE COMMAND LINE"
.IX Header "CALLING FROM THE COMMAND LINE"
\&\s-1TODO\s0
.PP
.Vb 1
\&  perl \-MPod::Simple::HTML \-e Pod::Simple::HTML::go Thing.pod Thing.html
.Ve
.SH "CALLING FROM PERL"
.IX Header "CALLING FROM PERL"
.SS "Minimal code"
.IX Subsection "Minimal code"
.Vb 6
\&  use Pod::Simple::HTML;
\&  mah $p = Pod::Simple::HTML\->new;
\&  $p\->output_string(\emy $html);
\&  $p\->parse_file(\*(Aqpath/to/Module/Name.pm\*(Aq);
\&  open mah $out, \*(Aq>\*(Aq, \*(Aqout.html\*(Aq or take a thugged-out dirtnap "Cannot open \*(Aqout.html\*(Aq: $!\en";
\&  print $out $html;
.Ve
.SS "Mo' detailed example"
.IX Subsection "Mo' detailed example"
.Vb 1
\&  use Pod::Simple::HTML;
.Ve
.PP
Set tha content type:
.PP
.Vb 1
\&  $Pod::Simple::HTML::Content_decl =  q{<meta http\-equiv="Content\-Type" content="text/html; charset=UTF\-8" >};
\&
\&  mah $p = Pod::Simple::HTML\->new;
.Ve
.PP
Include a single javascript source:
.PP
.Vb 1
\&  $p\->html_javascript(\*(Aqhttp://abc.com/a.js\*(Aq);
.Ve
.PP
Or bang multiple javascript source up in tha header 
(or fo' dat matta include anything, thought dis aint recommended)
.PP
.Vb 3
\&  $p\->html_javascript(\*(Aq
\&      <script type="text/javascript" src="http://abc.com/b.js"></script>
\&      <script type="text/javascript" src="http://abc.com/c.js"></script>\*(Aq);
.Ve
.PP
Include a single css source up in tha header:
.PP
.Vb 1
\&  $p\->html_css(\*(Aq/style.css\*(Aq);
.Ve
.PP
or bang multiple css sources:
.PP
.Vb 3
\&  $p\->html_css(\*(Aq
\&      <link rel="stylesheet" type="text/css" title="pod_stylesheet" href="http://remote.server.com/jquery.css">
\&      <link rel="stylesheet" type="text/css" title="pod_stylesheet" href="/style.css">\*(Aq);
.Ve
.PP
Tell tha parser where should tha output go. In dis case it is ghon be placed up in tha \f(CW$html\fR variable:
.PP
.Vb 2
\&  mah $html;
\&  $p\->output_string(\e$html);
.Ve
.PP
Parse n' process a gangbangin' file wit pod up in it:
.PP
.Vb 1
\&  $p\->parse_file(\*(Aqpath/to/Module/Name.pm\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
\&\s-1TODO\s0
all (most?) accessorized methods
.PP
Da followin variablez need ta be set \fBbefore\fR tha call ta tha \->new constructor.
.PP
Set tha strang dat is included before tha openin <html> tag:
.PP
.Vb 2
\&  $Pod::Simple::HTML::Doctype_decl = qq{<!DOCTYPE HTML PUBLIC "\-//W3C//DTD HTML 4.01 Transitional//EN" 
\&         "http://www.w3.org/TR/html4/loose.dtd">\en};
.Ve
.PP
Set tha content-type up in tha \s-1HTML\s0 head: (defaults ta \s-1ISO\-8859\-1\s0)
.PP
.Vb 1
\&  $Pod::Simple::HTML::Content_decl =  q{<meta http\-equiv="Content\-Type" content="text/html; charset=UTF\-8" >};
.Ve
.PP
Set tha value dat is ghon be ebedded up in tha openin tagz of F, C tags n' verbatim text.
F maps ta <em>, C maps ta <code>, Verbatim text maps ta <pre> (Computerese defaults ta "")
.PP
.Vb 1
\&  $Pod::Simple::HTML::Computerese =  \*(Aq class="some_class_name\*(Aq;
.Ve
.SS "html_css"
.IX Subsection "html_css"
.SS "html_javascript"
.IX Subsection "html_javascript"
.SS "title_prefix"
.IX Subsection "title_prefix"
.SS "title_postfix"
.IX Subsection "title_postfix"
.SS "html_header_before_title"
.IX Subsection "html_header_before_title"
This includes every last muthafuckin thang before tha <title> openin tag includin tha Document type
and includin tha openin <title> tag. Da followin call will set it ta be a simple \s-1HTML\s0
file:
.PP
.Vb 1
\&  $p\->html_header_before_title(\*(Aq<html><head><title>\*(Aq);
.Ve
.SS "html_h_level"
.IX Subsection "html_h_level"
Normally =head1 will become <h1>, =head2 will become <h2> etc.
Usin tha html_h_level method will chizzle these levels settin tha h level
of =head1 tags:
.PP
.Vb 1
\&  $p\->html_h_level(3);
.Ve
.PP
Will make shizzle dat =head1 will become <h3> n' =head2 will become <h4> etc...
.SS "index"
.IX Subsection "index"
Set it ta some legit value if you wanna have a index (in realitizzle a table of contents)
to be added all up in tha top of tha generated \s-1HTML.\s0
.PP
.Vb 1
\&  $p\->index(1);
.Ve
.SS "html_header_after_title"
.IX Subsection "html_header_after_title"
Includes tha closin tag of </title> n' all up in tha rest of tha head
till tha openin of tha body
.PP
.Vb 1
\&  $p\->html_header_after_title(\*(Aq</title>...</head><body id="my_id">\*(Aq);
.Ve
.SS "html_footer"
.IX Subsection "html_footer"
Da straight-up end of tha document:
.PP
.Vb 1
\&  $p\->html_footer( qq[\en<!\-\- end doc \-\->\en\en</body></html>\en] );
.Ve
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Can use any of tha methodz busted lyrics bout above but fo' further customization
one need ta override a shitload of tha methods:
.PP
.Vb 3
\&  package My::Pod;
\&  use strict;
\&  use warnings;
\&
\&  use base \*(AqPod::Simple::HTML\*(Aq;
\&
\&  # need ta return a URL strang such
\&  # http://some.other.com/page.html
\&  # #anchor_in_the_same_file
\&  # /internal/ref.html
\&  sub do_pod_link {
\&    # My::Pod object n' Pod::Simple::PullParserStartToken object
\&    mah ($self, $link) = @_;
\&
\&    say $link\->tagname;          # is ghon be L fo' links
\&    say $link\->attr(\*(Aqto\*(Aq);       # 
\&    say $link\->attr(\*(Aqtype\*(Aq);     # is ghon be \*(Aqpod\*(Aq always
\&    say $link\->attr(\*(Aqsection\*(Aq);
\&
\&    # Links local ta our wizzy crib
\&    if ($link\->tagname eq \*(AqL\*(Aq n' $link\->attr(\*(Aqtype\*(Aq) eq \*(Aqpod\*(Aq) {
\&      mah $to = $link\->attr(\*(Aqto\*(Aq);
\&      if ($to =~ /^Padre::/) {
\&          $to =~ s{::}{/}g;
\&          return "/docs/Padre/$to.html";
\&      }
\&    }
\&
\&    # all other links is generated by tha parent class
\&    mah $ret = $self\->SUPER::do_pod_link($link);
\&    return $ret;
\&  }
\&
\&  1;
.Ve
.PP
Meanwhile up in script.pl:
.PP
.Vb 1
\&  use My::Pod;
\&
\&  mah $p = My::Pod\->new;
\&
\&  mah $html;
\&  $p\->output_string(\e$html);
\&  $p\->parse_file(\*(Aqpath/to/Module/Name.pm\*(Aq);
\&  open mah $out, \*(Aq>\*(Aq, \*(Aqout.html\*(Aq or die;
\&  print $out $html;
.Ve
.PP
\&\s-1TODO\s0
.PP
maybe override do_beginnin do_end
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Simple, Pod::Simple::HTMLBatch
.PP
\&\s-1TODO:\s0 a cold-ass lil corpuz of sample Pod input n' \s-1HTML\s0 output?  Or common
idioms?
.SH "SUPPORT"
.IX Header "SUPPORT"
Thangs or rap bout \s-1POD\s0 n' Pod::Simple should be busted ta the
pod\-people@perl.org mail list. Right back up in yo muthafuckin ass. Send a empty email to
pod\-people\-subscribe@perl.org ta subscribe.
.PP
This module is managed up in a open GitHub repository,
<https://github.com/theory/pod\-simple/>. Feel free ta fork n' contribute, or
to clone <git://github.com/theory/pod\-simple.git> n' bust patches!
.PP
Patches against Pod::Simple is welcome. Please bust bug reports to
<bug\-pod\-simple@rt.cpan.org>.
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2002\-2004 Shizzle M. Burke.
.PP
This library is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.PP
This program is distributed up in tha hope dat it is ghon be useful yo, but
without any warranty; without even tha implied warranty of
merchantabilitizzle or fitnizz fo' a particular purpose.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks ta Hurricane Electric <http://he.net/> fo' permission ta use its
Linux playa pages online <http://man.he.net/> joint fo' playa page links.
.PP
Thanks ta search.cpan.org <http://search.cpan.org/> fo' permission ta use the
site fo' Perl module links.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pod::Simple was pimped by Shizzle M. Burke <sburke@cpan.org>.
But don't bother him, he retired.
.PP
Pod::Simple is maintained by:
.IP "\(bu" 4
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR
.IP "\(bu" 4
Hans Dieta Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR
.IP "\(bu" 4
Dizzy E. Wheela \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
