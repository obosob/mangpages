.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Dir 3pm"
.TH IO::Dir 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Dir \- supply object methodz fo' directory handles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    use IO::Dir;
\&    $d = IO::Dir\->new(".");
\&    if (defined $d) {
\&        while (defined($_ = $d\->read)) { something($_); }
\&        $d\->rewind;
\&        while (defined($_ = $d\->read)) { something_else($_); }
\&        undef $d;
\&    }
\&
\&    tie %dir, \*(AqIO::Dir\*(Aq, ".";
\&    foreach (keys %dir) {
\&        print $_, " " , $dir{$_}\->size,"\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`IO::Dir\*(C'\fR package serves up two intercourses ta perlz directory reading
routines.
.PP
Da first intercourse be a object approach. \f(CW\*(C`IO::Dir\*(C'\fR serves up a object
constructor n' methods, which is just wrappers round perlz built in
directory readin routines.
.IP "new ( [ \s-1DIRNAME \s0] )" 4
.IX Item "new ( [ DIRNAME ] )"
\&\f(CW\*(C`new\*(C'\fR is tha constructor fo' \f(CW\*(C`IO::Dir\*(C'\fR objects, n' you can put dat on yo' toast. Well shiiiit, it accepts one optional
argument which,  if given, \f(CW\*(C`new\*(C'\fR will pass ta \f(CW\*(C`open\*(C'\fR
.PP
Da followin methodz is wrappers fo' tha directory related functions built
into perl (the trailin 'dir' has been removed from tha names). Right back up in yo muthafuckin ass. See perlfunc
for detailz of these functions.
.IP "open ( \s-1DIRNAME \s0)" 4
.IX Item "open ( DIRNAME )"
.PD 0
.IP "read ()" 4
.IX Item "read ()"
.IP "seek ( \s-1POS \s0)" 4
.IX Item "seek ( POS )"
.IP "tell ()" 4
.IX Item "tell ()"
.IP "rewind ()" 4
.IX Item "rewind ()"
.IP "close ()" 4
.IX Item "close ()"
.PD
.PP
\&\f(CW\*(C`IO::Dir\*(C'\fR also serves up a intercourse ta readin directories via a tied
hash. Da tied hash extendz tha intercourse beyond just tha directory
readin routines by tha use of \f(CW\*(C`lstat\*(C'\fR, from tha \f(CW\*(C`File::stat\*(C'\fR package,
\&\f(CW\*(C`unlink\*(C'\fR, \f(CW\*(C`rmdir\*(C'\fR n' \f(CW\*(C`utime\*(C'\fR.
.ie n .IP "tie %hash, 'IO::Dir', \s-1DIRNAME\s0 [, \s-1OPTIONS \s0]" 4
.el .IP "tie \f(CW%hash\fR, 'IO::Dir', \s-1DIRNAME\s0 [, \s-1OPTIONS \s0]" 4
.IX Item "tie %hash, 'IO::Dir', DIRNAME [, OPTIONS ]"
.PP
Da keyz of tha hash is ghon be tha namez of tha entries up in tha directory. 
Readin a value from tha hash is ghon be tha result of calling
\&\f(CW\*(C`File::stat::lstat\*(C'\fR.  Deletin a element from tha hash will 
delete tha correspondin file or subdirectory,
provided dat \f(CW\*(C`DIR_UNLINK\*(C'\fR is included up in tha \f(CW\*(C`OPTIONS\*(C'\fR.
.PP
Assignin ta a entry up in tha hash will cause tha time stampz of tha file
to be modified. Y'all KNOW dat shit, muthafucka! If tha file do not exist then it is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Assigning
a single integer ta a hash element will cause both tha access n' 
modification times ta be chizzled ta dat value fo' realz. Alternatively a reference to
an array of two joints can be passed. Y'all KNOW dat shit, muthafucka! Da first array element is ghon be used to
set tha access time n' tha second element is ghon be used ta set tha modification
time.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::stat
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Shiiit, dis aint no joke. Currently maintained by tha Perl Porters.  Please report all
bugs ta <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-2003 Graham Barr <gbarr@pobox.com> fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
