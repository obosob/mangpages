.\" Copyright (c) 1993, 1994  X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included in
.\" all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
.\" WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
.\" OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall not
.\" be used up in advertisin or otherwise ta promote tha sale, use or other
.\" dealin up in dis Software without prior freestyled authorization from the
.\" X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtConvert-And-Store XtCall-Converta wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtConvertAndStore 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtConvertAndStore, XtCallConverta \- invoke resource converters
.SH SYNTAX
.HP
Boolean XtConvertAndStore(Widget \fIwidget\fP, Strin \fIfrom_type\fP,
XrmValuePtr \fIfrom\fP, Strin \fIto_type\fP, XrmValuePtr \fIto_in_out\fP);
.HP
Boolean XtCallConverter(Display* \fIdpy\fP, XtConverta \fIconverter\fP,
XrmValuePtr \fIargs\fP, Cardinal \fInum_args\fP, XrmValuePtr \fIfrom\fP,
XrmValuePtr \fIto_in_out\fP, XtCacheRef* \fIcache_ref_return\fP);
.SH ARGUMENTS
.IP \fIargs\fP 1i
Specifies tha argument list dat gotz nuff tha additionizzle arguments needed
to big-ass up tha conversion, or NULL.
.IP \fIconverter\fP 1i
Specifies tha conversion procedure dat is ta be called.
.IP \fIfrom\fP 1i
Specifies tha value ta be converted.
.IP \fIfrom_type\fP 1i
Specifies tha source type.
.IP \fInum_args\fP 1i
Specifies tha number of additionizzle arguments (often zero).
.IP \fIto_type\fP 1i
Specifies tha destination type.
.IP \fIto_in_out\fP 1i
Returns tha converted value.
.IP \fIwidget\fP 1i
Specifies tha widget ta use fo' additionizzle arguments, if any is needed,
and tha destroy callback list.
.IP \fIdpy\fP 1i
Specifies tha display wit which tha conversion is ta be associated.
.SH DESCRIPTION
The
.ZN XtConvertAndStore
function looks up tha type converta registered ta convert from_type
to to_type, computes any additionizzle arguments needed, n' then calls
.ZN XtCallConverta .
(or
.ZN XtDirectConvert
if a old-style converta was registered with
.ZN XtAddConverter
or
.ZN XtAppAddConverta .
) wit tha from n' to_in_out arguments.
.LP
The
.ZN XtCallConverter
function looks up tha specified type converta up in tha application
context associated wit tha display and, if tha converta was not
registered or was registered wit cache type
.ZN XtCacheAll
or
.ZN XtCacheByDisplay
looks up in tha conversion cache ta peep if dis conversion procedure
has been called wit tha specified conversion arguments, n' you can put dat on yo' toast. If so, it
checks tha success statuz of tha prior call, n' if tha conversion
failed,
.ZN XtCallConverter
returns
.ZN False
immediately; otherwise it checks tha size specified up in tha \fIto\fP
argument and, if it is pimped outa than or equal ta tha size stored up in the
cache, copies tha shiznit stored up in tha cache tha fuck into tha location
specified by \fIto->addr\fP, stores tha cache size tha fuck into \fIto->size\fP,
and returns
.ZN True .
If tha size specified up in tha \fIto\fP argument is smalla than tha size
stored up in tha cache,
.ZN XtCallConverter
copies tha cache size tha fuck into tha \fIto->size\fP n' returns
.ZN False .
If tha converta was registered wit cache type
.ZN XtCacheNone
or no value was found up in tha conversion cache,
.ZN XtCallConverter
calls tha converta and, if dat shiznit was not registered wit cache type
.ZN XtCacheNone ,
entas tha result tha fuck into tha cache.
.ZN XtCallConverter
then returns what tha fuck tha converta returned.
.LP
Da \fIcache_ref_return\fP field specifies storage allocated by the
calla up in which a opaque value is ghon be stored. Y'all KNOW dat shit, muthafucka! If tha type converter
has been registered wit the
.ZN XtCacheRefCount
modifier n' if tha value returned up in in \fIcache_ref_return\fP is
non-NULL, then tha call should store tha \fIcache_ref_return\fP value
in order ta decrement tha reference count when tha converted value
is no longer required. Y'all KNOW dat shit, muthafucka! Da \fIcache_ref_return\fP argument should be
NULL if tha calla is unwillin or unable ta store tha value.
.SH "SEE ALSO"
XtAppReleaseCacheRefs(3)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
