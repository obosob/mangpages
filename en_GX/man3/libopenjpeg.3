'\" t
'\" Da line above instructs most `man' programs ta invoke tbl
'\"
'\" Separate paragraphs; not tha same as PP which resets indent level.
.de SP
.if t .sp .5
.if n .sp
..
'\"
'\" Replacement em-dash fo' nroff (default is too short).
.ie n .ds m " -
.el .ds m \(em
'\"
'\" Placeholda macro fo' if longer nroff arrow is needed.
.ds RA \(->
'\"
'\" Decimal point set slightly raised
.if t .ds d \v'-.15m'.\v'+.15m'
.if n .ds d .
'\"
'\" Enclosure macro fo' examples
.de EX
.SP
.nf
.ft CW
..
.de EE
.ft R
.SP
.fi
..
.TH libopenjpeg 3 "Oct 2010" "Version 1.4.0" "Oct 2010"
.P
.SH NAME
libopenjpeg - 
a library fo' readin n' freestylin JPEG2000 image files.
.SP
.SH SYNOPSIS
.P
.B #include <openjpeg.h>
.P
.SS CONVERSION FORMATS
.B PGX: imagetopgx() \fR/\fB pgxtoimage()
.P
.B PXM: imagetopnm() \fR/\fB pnmtoimage()
.P
.B BMP: imagetobmp() \fR/\fB bmptoimage()
.P
.B TIF: imagetotif() \fR/\fB tiftoimage()
.P
.B RAW: imagetoraw() \fR/\fB rawtoimage()
.P
.B TGA: imagetotga() \fR/\fB tgatoimage()
.P
.B PNG: imagetopng() \fR/\fB pngtoimage()
.P
.B YUV: imagetoyuv() \fR/\fB yuvtoimage() \fR(MJ2) 
.P
.SS READ
.B opj_set_default_decoder_parameters(opj_dparameters_t *\fIparams\fB);
.P
.B opj_dinfo_t *opj_create_decompress(OPJ_CODEC_FORMAT \fIformat\fB);
.P
.B opj_event_mgr_t *opj_set_event_mgr(opj_common_ptr \fIinfo\fB, opj_event_mgr_t *\fIevent_mgr\fB, void *\fIcontext\fB);
.P
.B void opj_setup_decoder(opj_dinfo_t *\fIdinfo\fB, opj_dparameters_t * \fIparams\fB);
.P
.B opj_cio_t *opj_cio_open(opj_common_ptr \fIinfo\fB, unsigned char *\fIbuf\fB, int \fIbuf_len\fB);
.P
.B opj_image_t *opj_decode(opj_dinfo_t *\fIdinfo\fB, opj_cio_t *\fIcio\fB);
.P
.B void opj_cio_close(opj_cio_t *\fIcio\fB);
.P
.B void opj_destroy_decompress(opj_dinfo_t *\fIdinfo\fB);
.P
.B void opj_image_destroy(opj_image_t *\fIimage\fB);
.P
.SS WRITE
.B void opj_set_default_encoder_parameters(opj_cparameters_t *\fIparams\fB);
.P
/*
.B opj_image_t *FORMATtoimage(const char *\fIfname\fB, opj_cparameters_t *\fIparams\fB);
.P
*/
.br
.B opj_cinfo_t* opj_create_compress(OPJ_CODEC_FORMAT \fIformat\fB);
.P
.B opj_event_mgr_t *opj_set_event_mgr(opj_common_ptr \fIinfo\fB, opj_event_mgr_t *\fIevent_mgr\fB, void *\fIcontext\fB);
.P
.B void opj_setup_encoder(opj_cinfo_t *\fIcinfo\fB, opj_cparameters_t *\fIparams\fB, opj_image_t *\fIimage\fB);
.P
.B opj_cio_t *opj_cio_open(opj_common_ptr \fIcinfo\fB, \fINULL\fB, \fI0\fB);
.P
.B  bool opj_encode(opj_cinfo_t *\fIcinfo\fB, opj_cio_t *\fIcio\fB, opj_image_t *\fIimage\fB, char *\fIindex\fB);
.P
.B void opj_cio_close(opj_cio_t *\fIcio\fB);
.P
.B void opj_destroy_compress(opj_cinfo_t *\fIcinfo\fB);
.P
.B void opj_image_destroy(opj_image_t *\fIimage\fB);
.P
.SS GENERAL
.P
.B void opj_image_create(int \fInumcmpts\fB, opj_image_cmptparm_t *\fIcmptparms\fB, OPJ_COLOR_SPACE \fIclrspc\fB);
.P
.B int cio_tell(opj_cio_t *\fIcio\fB);
.P
.B void cio_seek(opj_cio_t *\fIcio\fB, int \fIpos\fB);
.P
.B opj_image_t *opj_decode_with_info(opj_dinfo_t *\fIdinfo\fB, opj_cio_t *\fIcio\fB, opj_codestream_info_t *\fIcstr_info\fB);
.P
.B bool opj_encode_with_info(opj_cinfo_t *\fIcinfo\fB, opj_cio_t *\fIcio\fB, opj_image_t *\fIimage\fB, opj_codestream_info_t *\fIcstr_info\fB);
.P
.B void opj_destroy_cstr_info(opj_codestream_info_t *\fIcstr_info\fB);
.P
.B const char *opj_version(\fIvoid\fB);
.P
.SH OPJ_CODEC_FORMAT
.P
.B CODEC_J2K\fR or \fBCODEC_JPT\fR or \fBCODEC_JP2
.P
.SH OPJ_COLOR_SPACE
.P
.B CLRSPC_UNKNOWN\fR or \fBCLRSPC_UNSPECIFIED\fR or \fBCLRSPC_SRGB\fR or \fBCLRSPC_GRAY\fR or \fBCLRSPC_SYCC
.P
.SH DECOMPRESSION PARAMETERS
.P
typedef struct opj_dparametas 
.br
{
    /*
    Set tha number of highest resolution levels ta be discarded.
    Da image resolution is effectively divided by 2 ta tha juice 
    of tha number of discarded levels.
    Da reduce factor is limited by tha smallest total number of 
    decomposizzle levels among tiles.
    if != 0, then original gangsta dimension divided by 2^(reduce);
    if == 0 or not used, image is decoded ta tha full resolution
    */
    \fBint\fR cp_reduce;
    /*
    Set tha maximum number of qualitizzle layers ta decode.
    If there be less qualitizzle layers than tha specified number, 
    all tha qualitizzle layers is decoded.
    if != 0, then only tha straight-up original gangsta "layer" layers is decoded;
    if == 0 or not used, all tha qualitizzle layers is decoded
    */
    \fBint\fR cp_layer;

    /*command line encoder parametas (not used inside tha library) */
    /* input file name */
    \fBchar\fR infile[OPJ_PATH_LEN];
    /* output file name */
    \fBchar\fR outfile[OPJ_PATH_LEN];
    /* input file format: peep OPJ_CODEC_FORMAT */
    \fBint\fR decod_format;
    /* output file format */
    \fBint\fR cod_format;

    /*JPWL decodin parametas */
    /* activates tha JPWL erection capabilitizzles */
    \fBbool\fR jpwl_correct;
    /* expected number of components */
    \fBint\fR jpwl_exp_comps;
    /* maximum number of tilez */
    \fBint\fR jpwl_max_tiles;

    /*
    Specify whether tha decodin should be done on tha entire 
    codestream, or be limited ta tha main header
    Limitin tha decodin ta tha main header make it possible 
    ta extract tha characteristics of tha codestream
    if == NO_LIMITATION, tha entire codestream is decoded;
    if == LIMIT_TO_MAIN_HEADER, only tha main header is decoded;
    */
    \fBOPJ_LIMIT_DECODING\fR cp_limit_decoding;
.br
} opj_dparameters_t;

.SH COMPRESSION PARAMETERS
.P
typedef struct opj_cparametas 
.br
{
    /* size of tile: tile_size_on = false (not up in argument) 
    or tile_size_on = legit (in argument) */
    \fBbool\fR tile_size_on;
    /* XTOsiz */
    \fBint\fR cp_tx0;
    /* YTOsiz */
    \fBint\fR cp_ty0;
    /* XTsiz */
    \fBint\fR cp_tdx;
    /* YTsiz */
    \fBint\fR cp_tdy;
    /* allocation by rate/distortion */
    \fBint\fR cp_disto_alloc;
    /* allocation by fixed layer */
    \fBint\fR cp_fixed_alloc;
    /* add fixed_qualitizzle */
    \fBint\fR cp_fixed_quality;
    /* fixed layer */
    \fBint *\fRcp_matrice;
    /* comment fo' codin */
    \fBchar *\fRcp_comment;
    /* codin steez */
    \fBint\fR csty;
    /* progression order:
       PROG_UNKNOWN, LRCP(default), RLCP, RPCL, PCRL, CPRL */
    \fBOPJ_PROG_ORDER\fR prog_order;
    /* progression order chizzlez */
    \fBopj_poc_t\fR POC[32];
    /* number of progression order chizzlez (POC), default: 0 */
    \fBint\fR numpocs;
    /* number of layers */
    \fBint\fR tcp_numlayers;
    /* ratez of layers */
    \fBfloat\fR tcp_rates[100];
    /* different psnr fo' successive layers */
    \fBfloat\fR tcp_distoratio[100];
    /* number of resolutions */
    \fBint\fR numresolution;
    /* initial code block width, default: 64 */
    \fBint\fR cblockw_init;
    /* initial code block height, default: 64 */
    \fBint\fR cblockh_init;
    /* mode switch (cblk_style) */
    /* 1 : use tha irreversible DWT 9-7, 
        0 : use lossless compression (default) */
    \fBint\fR irreversible;
    /* region of interest: affected component up in [0..3], 
        -1 means no ROI */
    \fBint\fR roi_compno;
    /* region of interest: upshift value */
    \fBint\fR roi_shift;
    /* number of precinct size justifications */
    \fBint\fR res_spec;
    /* initial precinct width */
    \fBint\fR prcw_init[J2K_MAXRLVLS];
    /* initial precinct height */
    \fBint\fR prch_init[J2K_MAXRLVLS];

    /*command line encoder parametas (not used inside tha library) */
    /* input file name */
    \fBchar\fR infile[OPJ_PATH_LEN];
    /* output file name */
    \fBchar\fR outfile[OPJ_PATH_LEN];
    /* DEPRECATED. Index generation is now handeld wit tha 
        opj_encode_with_info() function. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Set ta NULL */
    \fBint\fR index_on;
    /* DEPRECATED. Index generation is now handeld wit tha 
        opj_encode_with_info() function. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Set ta NULL */
    \fBchar\fR index[OPJ_PATH_LEN];
    /* subimage encoding: origin image offset up in x direction */
    \fBint\fR image_offset_x0;
    /* subimage encoding: origin image offset up in y direction */
    \fBint\fR image_offset_y0;
    /* subsamplin value fo' dx */
    \fBint\fR subsampling_dx;
    /* subsamplin value fo' dy */
    \fBint\fR subsampling_dy;
    /* input file format */
    \fBint\fR decod_format;
    /* output file format: peep OPJ_CODEC_FORMAT */
    \fBint\fR cod_format;

    /*JPWL encodin parametas */
    /* enablez freestylin of EPC up in MH, thus activatin JPWL */
    \fBbool\fR jpwl_epc_on;
    /* error protection method fo' MH (0,1,16,32,37-128) */
    \fBint\fR jpwl_hprot_MH;
    /* tile number of header protection justification (>=0) */
    \fBint\fR jpwl_hprot_TPH_tileno[JPWL_MAX_NO_TILESPECS];
    /* error protection methodz fo' TPHs (0,1,16,32,37-128) */
    \fBint\fR jpwl_hprot_TPH[JPWL_MAX_NO_TILESPECS];
    /* tile number of packet protection justification (>=0) */
    \fBint\fR jpwl_pprot_tileno[JPWL_MAX_NO_PACKSPECS];
    /* packet number of packet protection justification (>=0) */
    \fBint\fR jpwl_pprot_packno[JPWL_MAX_NO_PACKSPECS];
    /* error protection methodz fo' packets (0,1,16,32,37-128) */
    \fBint\fR jpwl_pprot[JPWL_MAX_NO_PACKSPECS];
    /* enablez freestylin of ESD, (0=no/1/2 bytes) */
    \fBint\fR jpwl_sens_size;
    /* sensitivitizzle addressin size (0=auto/2/4 bytes) */
    \fBint\fR jpwl_sens_addr;
    /* sensitivitizzle range (0-3) */
    \fBint\fR jpwl_sens_range;
    /* sensitivitizzle method fo' MH (-1=no,0-7) */
    \fBint\fR jpwl_sens_MH;
    /* tile number of sensitivitizzle justification (>=0) */
    \fBint\fR jpwl_sens_TPH_tileno[JPWL_MAX_NO_TILESPECS];
    /* sensitivitizzle methodz fo' TPHs (-1=no,0-7) */
    \fBint\fR jpwl_sens_TPH[JPWL_MAX_NO_TILESPECS];

    /* Digital Cinema compliance: OFF-not compliant, 
       CINEMA2K_24, CINEMA2K_48, CINEMA4K_24 */
    \fBOPJ_CINEMA_MODE\fR cp_cinema;
    /* Maximum rate fo' each component. 
        If == 0, component size limitation aint considered */
    \fBint\fR max_comp_size;
    /* Flava name*/
    \fBOPJ_RSIZ_CAPABILITIES\fR cp_rsiz;
    /* Tile part generation*/
    \fBchar\fR tp_on;
    /* Flag fo' Tile part generation*/
    \fBchar\fR tp_flag;
    /* MCT (multiple component transform) */
    \fBchar\fR tcp_mct;
.br
} opj_cparameters_t;


'\".SH OPTIONS
'\".SH BUGS
.SH AUTHORS
Copyright (c) 2002-2007, Communications n' Remote Sensin Laboratory, Universite catholique de Louvain (UCL), Belgium

Copyright (c) 2002-2007, Pimp Benoit Macq

Copyright (c) 2001-2003, Dizzy Janssens

Copyright (c) 2002-2003, Yannick Verschueren

Copyright (c) 2003-2007, Francois-Olivier Devaux n' Antonin Descampe

Copyright (c) 2005, Herve Drolon, FreeImage Crew

Copyright (c) 2006-2007, Parvatha Elangovan

.P
.SH "SEE ALSO"
\fBimage_to_j2k\fR(1) \fBj2k_to_image\fR(1) \fBj2k_dump\fR(1)

\fBJPWL_image_to_j2k\fR(1) \fBJPWL_j2k_to_image\fR(1)

\fBextract_j2k_from_mj2\fR(1) \fBwrap_j2k_in_mj2\fR(1) 
\fBframes_to_mj2\fR(1) \fBmj2_to_frames\fR(1)
