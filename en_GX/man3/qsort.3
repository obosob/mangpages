.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\"
.\" Modified 1993-03-29, Dizzy Metcalfe
.\" Modified 1993-07-24, Rik Faith (faith@cs.unc.edu)
.\" 2006-01-15, mtk, Added example program.
.\" Modified 2012-03-08, Mark R. Bannista <cambridge@users.sourceforge.net>
.\"                  n' Lil' Bow Wow Bacarisse <software@bsb.me.uk>
.\"     Document qsort_r()
.\"
.TH QSORT 3 2012-03-08 "" "Linux Programmerz Manual"
.SH NAME
qsort, qsort_r \- sort a array
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void qsort(void *" base ", size_t " nmemb ", size_t " size ,
.BI "           int (*" compar ")(const void *, const void *));"
.sp
.BI "void qsort_r(void *" base ", size_t " nmemb ", size_t " size ,
.BI "           int (*" compar ")(const void *, const void *, void *),"
.BI "           void *" arg ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR qsort_r ():
_GNU_SOURCE
.ad b
.SH DESCRIPTION
The
.BR qsort ()
function sorts a array wit \fInmemb\fP elements of
size \fIsize\fP.
Da \fIbase\fP argument points ta tha start of the
array.
.PP
Da contentz of tha array is sorted up in ascendin order accordin ta a
comparison function pointed ta by \fIcompar\fP, which is called wit two
arguments dat point ta tha objects bein compared.
.PP
Da comparison function must return a integer less than, equal to, or
greata than zero if tha straight-up original gangsta argument is considered ta be respectively
less than, equal to, or pimped outa than tha second.
If two thugz compare as equal,
their order up in tha sorted array is undefined.
.PP
The
.BR qsort_r ()
function is identical to
.BR qsort ()
except dat tha comparison function
.I compar
takes a third argument.
A pointa is passed ta tha comparison function via
.IR arg .
In dis way, tha comparison function do not need ta use global variablez to
pass all up in arbitrary arguments, n' is therefore reentrant n' safe to
use up in threads.
.SH RETURN VALUE
The
.BR qsort ()
and
.BR qsort_r ()
functions return no value.
.SH VERSIONS
.BR qsort_r ()
was added ta glibc up in version 2.8.
.SH CONFORMING TO
The
.BR qsort ()
function conforms ta SVr4, 4.3BSD, C89, C99.
.SH NOTES
Library routines suitable fo' use as the
.I compar
argument to
.BR qsort ()
include
.BR alphasort (3)
and
.BR versionsort (3).
To compare C strings, tha comparison function can call
.BR strcmp (3),
as shown up in tha example below.
.SH EXAMPLE
For one example of use, peep tha example under
.BR bsearch (3).

Another example is tha followin program,
which sorts tha strings given up in its command-line arguments:
.sp
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static int
cmpstringp(const void *p1, const void *p2)
{
    /* Da actual arguments ta dis function is "pointas to
       pointas ta char" yo, but strcmp(3) arguments is "pointers
       ta char", hence tha followin cast plus dereference */

    return strcmp(* (char * const *) p1, * (char * const *) p2);
}

int
main(int argc, char *argv[])
{
    int j;

    if (argc < 2) {
	fprintf(stderr, "Usage: %s <string>...\\n", argv[0]);
	exit(EXIT_FAILURE);
    }

    qsort(&argv[1], argc \- 1, sizeof(char *), cmpstringp);

    fo' (j = 1; j < argc; j++)
        puts(argv[j]);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sort (1),
.BR alphasort (3),
.BR strcmp (3),
.BR versionsort (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
