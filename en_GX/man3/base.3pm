.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "base 3pm"
.TH base 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
base \- Establish a ISA relationshizzle wit base classes at compile time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Baz;
\&    use base qw(Foo Bar);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Unless yo ass is rockin tha \f(CW\*(C`fields\*(C'\fR pragma, consider dis module discouraged
in favor of tha lighter-weight \f(CW\*(C`parent\*(C'\fR.
.PP
Allows you ta both load one or mo' modules, while settin up inheritizzle from
those modulez all up in tha same time.  Roughly similar up in effect to
.PP
.Vb 6
\&    package Baz;
\&    BEGIN {
\&        require Foo;
\&        require Bar;
\&        push @ISA, qw(Foo Bar);
\&    }
.Ve
.PP
When \f(CW\*(C`base\*(C'\fR tries ta \f(CW\*(C`require\*(C'\fR a module, it aint gonna take a thugged-out dirtnap if it cannot find
the modulez file yo, but will take a thugged-out dirtnap on any other error. Shiiit, dis aint no joke.  Afta all this, should
your base class be empty, containin no symbols, \f(CW\*(C`base\*(C'\fR will take a thugged-out dirt nap. This is
useful fo' inheritin from classes up in tha same file as yo ass but where
the filename do not match tha base module name, like so:
.PP
.Vb 3
\&        # up in Bar.pm
\&        package Foo;
\&        sub exclaim { "I can have such a thang?!" }
\&
\&        package Bar;
\&        use base "Foo";
.Ve
.PP
There is no \fIFoo.pm\fR yo, but cuz \f(CW\*(C`Foo\*(C'\fR defines a symbol (the \f(CW\*(C`exclaim\*(C'\fR
subroutine), \f(CW\*(C`base\*(C'\fR aint gonna take a thugged-out dirtnap when tha \f(CW\*(C`require\*(C'\fR fails ta load \fIFoo.pm\fR.
.PP
\&\f(CW\*(C`base\*(C'\fR will also initialize tha fieldz if one of tha base classes has dat shit.
Multiple inheritizzle of fieldz is \fB\s-1NOT\s0\fR supported, if two or mo' base classes
each have inheritable fieldz tha 'base' pragma will croak. Right back up in yo muthafuckin ass. See fields
for a thugged-out description of dis feature.
.PP
Da base class' \f(CW\*(C`import\*(C'\fR method is \fBnot\fR called.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Base class package ""%s"" is empty." 4
.el .IP "Base class package ``%s'' is empty." 4
.IX Item "Base class package %s is empty."
base.pm was unable ta require tha base package, cuz dat shiznit was not
found up in yo' path.
.IP "Class 'Foo' tried ta inherit from itself" 4
.IX Item "Class 'Foo' tried ta inherit from itself"
Attemptin ta inherit from yo ass generates a warning.
.Sp
.Vb 2
\&    package Foo;
\&    use base \*(AqFoo\*(Aq;
.Ve
.SH "HISTORY"
.IX Header "HISTORY"
This module was introduced wit Perl 5.004_04.
.SH "CAVEATS"
.IX Header "CAVEATS"
Cuz of tha limitationz of tha implementation, you must use
base \fIbefore\fR you declare any of yo' own fields.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
fields
