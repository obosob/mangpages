'\" t
.\"     Title: glFeedbackBuffer
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLFEEDBACKBUFFER" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glFeedbackBuffer \- controls feedback mode
.SH "C SPECIFICATION"
.HP \w'void\ glFeedbackBuffer('u
.BI "void glFeedbackBuffer(GLsizei\ " "size" ", GLenum\ " "type" ", GLfloat\ *\ " "buffer" ");"
.SH "PARAMETERS"
.PP
\fIsize\fR
.RS 4
Specifies tha maximum number of joints dat can be freestyled into
\fIbuffer\fR\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies a symbolic constant dat raps bout tha shiznit dat is ghon be returned fo' each vertex\&.
\fBGL_2D\fR,
\fBGL_3D\fR,
\fBGL_3D_COLOR\fR,
\fBGL_3D_COLOR_TEXTURE\fR, and
\fBGL_4D_COLOR_TEXTURE\fR
are accepted\&.
.RE
.PP
\fIbuffer\fR
.RS 4
Returns tha feedback data\&.
.RE
.SH "DESCRIPTION"
.PP
The
\fBglFeedbackBuffer\fR
function controls feedback\&. Feedback, like selection, be a GL mode\&. Da mode is selected by calling
\fBglRenderMode\fR()
with
\fBGL_FEEDBACK\fR\&. When tha GL is up in feedback mode, no pixels is produced by rasterization\&. Instead, shiznit bout primitives dat would done been rasterized is fed back ta tha application rockin tha GL\&.
.PP
\fBglFeedbackBuffer\fR
has three arguments:
\fIbuffer\fR
is a pointa ta a array of floating\-point joints tha fuck into which feedback shiznit is placed\&.
\fIsize\fR
indicates tha size of tha array\&.
\fItype\fR
is a symbolic constant describin tha shiznit dat is fed back fo' each vertex\&.
\fBglFeedbackBuffer\fR
must be issued before feedback mode is enabled (by calling
\fBglRenderMode\fR()
with argument
\fBGL_FEEDBACK\fR)\&. Right back up in yo muthafuckin ass. Setting
\fBGL_FEEDBACK\fR
without establishin tha feedback buffer, or calling
\fBglFeedbackBuffer\fR
while tha GL is up in feedback mode, be a error\&.
.PP
When
\fBglRenderMode\fR()
is called while up in feedback mode, it returns tha number of entries placed up in tha feedback array n' resets tha feedback array pointa ta tha base of tha feedback buffer\&. Da returned value never exceeds
\fIsize\fR\&. If tha feedback data required mo' room than was available in
\fIbuffer\fR,
\fBglRenderMode\fR()
returns a wack value\&. To take tha GL outta feedback mode, call
\fBglRenderMode\fR()
with a parameta value other than
\fBGL_FEEDBACK\fR\&.
.PP
While up in feedback mode, each primitive, bitmap, or pixel rectangle dat would be rasterized generates a funky-ass block of joints dat is copied tha fuck into tha feedback array\&. If bustin so would cause tha number of entries ta exceed tha maximum, tha block is partially freestyled so as ta fill tha array (if there be any room left at all), n' a overflow flag is set\&. Each block begins wit a cold-ass lil code indicatin tha primitizzle type, followed by joints dat describe tha primitive\*(Aqs vertices n' associated data\&. Entries is also freestyled fo' bitmaps n' pixel rectangles\&. Feedback occurs afta polygon cullin and
\fBglPolygonMode\fR()
interpretation of polygons has taken place, so polygons dat is culled is not returned up in tha feedback buffer\&. Well shiiiit, it can also occur afta polygons wit mo' than three edges is fucked up tha fuck into triangles, if tha GL implementation rendaz polygons by struttin dis decomposition\&.
.PP
The
\fBglPassThrough\fR()
command can be used ta bang a marker tha fuck into tha feedback buffer\&. Right back up in yo muthafuckin ass. See
\fBglPassThrough\fR()\&.
.PP
Peepin is tha grammar fo' tha blockz of joints freestyled tha fuck into tha feedback buffer\&. Each primitizzle is indicated wit a unique identifyin value followed by some number of vertices\&. Polygon entries include a integer value indicatin how tha fuck nuff vertices follow\& fo' realz. A vertex is fed back as some number of floating\-point joints, as determined by
\fItype\fR\&. Flavas is fed back as four joints up in RGBA mode n' one value up in color index mode\&.
.PP
.PP feedbackList ← feedbackItem feedbackList | feedbackItem.PP feedbackItem ← point | lineSegment | polygon | bitmap | pixelRectangle | passThru.PP point ←\fBGL_POINT_TOKEN\fR vertex.PP lineSegment ←\fBGL_LINE_TOKEN\fR vertex vertex | \fBGL_LINE_RESET_TOKEN\fR vertex vertex.PP polygon ←\fBGL_POLYGON_TOKEN\fR n polySpec.PP polySpec ← polySpec vertex | vertex vertex vertex.PP bitmap ←\fBGL_BITMAP_TOKEN\fR vertex.PP pixelRectangle ←\fBGL_DRAW_PIXEL_TOKEN\fR vertex | \fBGL_COPY_PIXEL_TOKEN\fR vertex.PP passThru ←\fBGL_PASS_THROUGH_TOKEN\fR value.PP vertex ← 2d | 3d | 3dColor | 3dColorTexture | 4dColorTexture.PP 2d ← value value.PP 3d ← value value value.PP 3dColor ← value value value color.PP 3dColorTexture ← value value value color tex.PP 4dColorTexture ← value value value value color tex.PP color ← rgba | index.PP rgba ← value value value value.PP index ← value.PP tex ← value value value value.PP
.PP
\fIvalue\fR
is a gangbangin' floating\-point number, and
\fIn\fR
is a gangbangin' floating\-point integer givin tha number of vertices up in tha polygon\&.
\fBGL_POINT_TOKEN\fR,
\fBGL_LINE_TOKEN\fR,
\fBGL_LINE_RESET_TOKEN\fR,
\fBGL_POLYGON_TOKEN\fR,
\fBGL_BITMAP_TOKEN\fR,
\fBGL_DRAW_PIXEL_TOKEN\fR,
\fBGL_COPY_PIXEL_TOKEN\fR
and
\fBGL_PASS_THROUGH_TOKEN\fR
are symbolic floating\-point constants\&.
\fBGL_LINE_RESET_TOKEN\fR
is returned whenever tha line stipple pattern is reset\&. Da data returned as a vertex dependz on tha feedback
\fItype\fR\&.
.PP
Da followin table gives tha correspondence between
\fItype\fR
and tha number of joints per vertex\&.
\fIk\fR
is 1 up in color index mode n' 4 up in RGBA mode\&.
.PP
.TS
allbox tab(:);
lB lB cB cB cB.
T{
\fB
                        Type
                        \fR
T}:T{
\fB
                        Coordinates
                        \fR
T}:T{
\fB
                        Color
                        \fR
T}:T{
\fB
                        Texture
                        \fR
T}:T{
\fB
                        Total Number of Values
                        \fR
T}
.T&
l l c c c
l l c c c
l l c c c
l l c c c
l l c c c.
T{
\fBGL_2D\fR
T}:T{
\fIx\fR, \fIy\fR
T}:T{

T}:T{

T}:T{
2
T}
T{
\fBGL_3D\fR
T}:T{
\fIx\fR, \fIy\fR, \fIz\fR
T}:T{

T}:T{

T}:T{
3
T}
T{
\fBGL_3D_COLOR\fR
T}:T{
\fIx\fR, \fIy\fR, \fIz\fR
T}:T{
k
T}:T{

T}:T{
3
                                +
                                k
T}
T{
\fBGL_3D_COLOR_TEXTURE\fR
T}:T{
\fIx\fR, \fIy\fR, \fIz\fR
T}:T{
k
T}:T{
4
T}:T{
7
                                +
                                k
T}
T{
\fBGL_4D_COLOR_TEXTURE\fR
T}:T{
\fIx\fR, \fIy\fR, \fIz\fR, \fIw\fR
T}:T{
k
T}:T{
4
T}:T{
8
                                +
                                k
T}
.TE
.sp 1
.PP
Feedback vertex coordinates is up in window coordinates, except
\fIw\fR, which is up in clip coordinates\&. Feedback flavas is lighted, if lightin is enabled\&. Feedback texture coordinates is generated, if texture coordinizzle generation is enabled\&. They is always transformed by tha texture matrix\&.
.SH "NOTES"
.PP
\fBglFeedbackBuffer\fR, when used up in a gangbangin' finger-lickin' display list, aint compiled tha fuck into tha display list but is executed immediately\&.
.PP
\fBglFeedbackBuffer\fR
returns only tha texture coordinizzle of texture unit
\fBGL_TEXTURE0\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIsize\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglFeedbackBuffer\fR
is called while tha render mode is
\fBGL_FEEDBACK\fR, or if
\fBglRenderMode\fR()
is called wit argument
\fBGL_FEEDBACK\fR
before
\fBglFeedbackBuffer\fR
is called at least once\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglFeedbackBuffer\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_RENDER_MODE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_FEEDBACK_BUFFER_POINTER\fR
.PP
\fBglGet\fR()
with argument
\fBGL_FEEDBACK_BUFFER_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_FEEDBACK_BUFFER_TYPE\fR
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglLineStipple\fR(),
\fBglPassThrough\fR(),
\fBglPolygonMode\fR(),
\fBglRenderMode\fR(),
\fBglSelectBuffer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
