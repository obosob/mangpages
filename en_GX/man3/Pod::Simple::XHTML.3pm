.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Simple::XHTML 3"
.TH Pod::Simple::XHTML 3 "2013-05-03" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Simple::XHTML \-\- format Pod as valipimpin XHTML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Pod::Simple::XHTML;
\&
\&  mah $parser = Pod::Simple::XHTML\->new();
\&
\&  ...
\&
\&  $parser\->parse_file(\*(Aqpath/to/file.pod\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class be a gangbangin' formatta dat takes Pod n' rendaz it as \s-1XHTML\s0
valipimpin \s-1HTML.\s0
.PP
This be a subclass of Pod::Simple::Methody n' inherits all its
methods. Da implementation is entirely different than
Pod::Simple::HTML yo, but it largely preserves tha same ol' dirty intercourse.
.SS "Minimal code"
.IX Subsection "Minimal code"
.Vb 6
\&  use Pod::Simple::XHTML;
\&  mah $psx = Pod::Simple::XHTML\->new;
\&  $psx\->output_string(\emy $html);
\&  $psx\->parse_file(\*(Aqpath/to/Module/Name.pm\*(Aq);
\&  open mah $out, \*(Aq>\*(Aq, \*(Aqout.html\*(Aq or take a thugged-out dirtnap "Cannot open \*(Aqout.html\*(Aq: $!\en";
\&  print $out $html;
.Ve
.PP
Yo ass can also control tha characta encodin n' entities. Put ya muthafuckin choppers up if ya feel dis! For example, if
yo ass is shizzle dat tha \s-1POD\s0 is properly encoded (usin tha \f(CW\*(C`=encoding\*(C'\fR command),
you can prevent high-bit charactas from bein encoded as \s-1HTML\s0 entitizzles and
declare tha output characta set as \s-1UTF\-8\s0 before parsing, like so:
.PP
.Vb 2
\&  $psx\->html_charset(\*(AqUTF\-8\*(Aq);
\&  $psx\->html_encode_chars(\*(Aq&<>">\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Pod::Simple::XHTML offers a fuckin shitload of methodz dat modify tha format of
the \s-1HTML\s0 output. Call these afta bustin tha parser object yo, but before
the call ta \f(CW\*(C`parse_file\*(C'\fR:
.PP
.Vb 3
\&  mah $parser = Pod::PseudoPod::HTML\->new();
\&  $parser\->set_optional_param("value");
\&  $parser\->parse_file($file);
.Ve
.SS "perldoc_url_prefix"
.IX Subsection "perldoc_url_prefix"
In turnin Foo::Bar tha fuck into http://whatever/Foo%3a%3aBar, what
to put before tha \*(L"Foo%3a%3aBar\*(R". Da default value is
\&\*(L"http://search.cpan.org/perldoc?\*(R".
.SS "perldoc_url_postfix"
.IX Subsection "perldoc_url_postfix"
What ta put afta \*(L"Foo%3a%3aBar\*(R" up in tha \s-1URL.\s0 This option aint set by
default.
.SS "man_url_prefix"
.IX Subsection "man_url_prefix"
In turnin \f(CWcrontab(5)\fR tha fuck into http://whatever/man/1/crontab, what
to put before tha \*(L"1/crontab\*(R". Da default value is
\&\*(L"http://man.he.net/man\*(R".
.SS "man_url_postfix"
.IX Subsection "man_url_postfix"
What ta put afta \*(L"1/crontab\*(R" up in tha \s-1URL.\s0 This option aint set by default.
.SS "title_prefix, title_postfix"
.IX Subsection "title_prefix, title_postfix"
What ta put before n' afta tha title up in tha head. Y'all KNOW dat shit, muthafucka! Da joints should
already be &\-escaped.
.SS "html_css"
.IX Subsection "html_css"
.Vb 1
\&  $parser\->html_css(\*(Aqpath/to/style.css\*(Aq);
.Ve
.PP
Da \s-1URL\s0 or relatizzle path of a \s-1CSS\s0 file ta include. This option is not
set by default.
.SS "html_javascript"
.IX Subsection "html_javascript"
Da \s-1URL\s0 or relatizzle path of a JavaScript file ta pull in. I aint talkin' bout chicken n' gravy biatch. This option is
not set by default.
.SS "html_doctype"
.IX Subsection "html_doctype"
A document type tag fo' tha file. This option aint set by default.
.SS "html_charset"
.IX Subsection "html_charset"
Da charata set ta declare up in tha Content-Type meta tag pimped by default
for \f(CW\*(C`html_header_tags\*(C'\fR. Note dat dis option is ghon be ignored if tha value of
\&\f(CW\*(C`html_header_tags\*(C'\fR is chizzled. Y'all KNOW dat shit, muthafucka! Defaults ta \*(L"\s-1ISO\-8859\-1\*(R".\s0
.SS "html_header_tags"
.IX Subsection "html_header_tags"
Additionizzle arbitrary \s-1HTML\s0 tags fo' tha header of tha document. The
default value is just a cold-ass lil content type header tag:
.PP
.Vb 1
\&  <meta http\-equiv="Content\-Type" content="text/html; charset=ISO\-8859\-1">
.Ve
.PP
Add additionizzle meta tags here, or blockz of inline \s-1CSS\s0 or JavaScript
(wrapped up in tha appropriate tags).
.PP
\fIhtml_encode_chars\fR
.IX Subsection "html_encode_chars"
.PP
A strang containin all charactas dat should be encoded as \s-1HTML\s0 entities,
specified rockin tha regular expression characta class syntax (what you find
within brackets up in regular expressions). This value is ghon be passed as the
second argument ta tha \f(CW\*(C`encode_entities\*(C'\fR function of HTML::Entities. Put ya muthafuckin choppers up if ya feel dis! If
HTML::Entitizzles aint installed, then any charactas other than \f(CW\*(C`&<\*(C'\fR"'>
will be encoded numerically.
.SS "html_h_level"
.IX Subsection "html_h_level"
This is tha level of \s-1HTML \s0\*(L"Hn\*(R" element ta which a Pod \*(L"head1\*(R" corresponds.  For
example, if \f(CW\*(C`html_h_level\*(C'\fR is set ta 2, a head1 will produce a H2, a head2
will produce a H3, n' so on.
.SS "default_title"
.IX Subsection "default_title"
Set a thugged-out default title fo' tha page if no title can be determined from the
content. Da value of dis strang should already be &\-escaped.
.SS "force_title"
.IX Subsection "force_title"
Force a title fo' tha page (don't try ta determine it from tha content).
Da value of dis strang should already be &\-escaped.
.SS "html_header, html_footer"
.IX Subsection "html_header, html_footer"
Set tha \s-1HTML\s0 output all up in tha beginnin n' end of each file. Da default
header includes a title, a thugged-out doctype tag (if \f(CW\*(C`html_doctype\*(C'\fR is set), a
content tag (customized by \f(CW\*(C`html_header_tags\*(C'\fR), a tag fo' a \s-1CSS\s0 file
(if \f(CW\*(C`html_css\*(C'\fR is set), n' a tag fo' a Javascript file (if
\&\f(CW\*(C`html_javascript\*(C'\fR is set). Da default foota simply closes tha \f(CW\*(C`html\*(C'\fR
and \f(CW\*(C`body\*(C'\fR tags.
.PP
Da options listed above customize partz of tha default header yo, but
settin \f(CW\*(C`html_header\*(C'\fR or \f(CW\*(C`html_footer\*(C'\fR straight-up overrides the
built-in header or footer n' shit. These may be useful if you wanna use
template tags instead of literal \s-1HTML\s0 headaz n' footas or are
integratin converted \s-1POD\s0 pages up in a larger joint.
.PP
If you want no headaz or footas output up in tha \s-1HTML,\s0 set these options
to tha empty string.
.SS "index"
.IX Subsection "index"
Whether ta add a table-of-contents all up in tha top of each page (called an
index fo' tha sake of tradition).
.SS "anchor_items"
.IX Subsection "anchor_items"
Whether ta anchor every last muthafuckin definizzle \f(CW\*(C`=item\*(C'\fR directive. This need ta be
enabled if you wanna be able ta link ta specific \f(CW\*(C`=item\*(C'\fR directives, which
are output as \f(CW\*(C`<dt>\*(C'\fR elements, n' you can put dat on yo' toast. Disabled by default.
.SS "backlink"
.IX Subsection "backlink"
Whether ta turn every last muthafuckin =head1 directizzle tha fuck into a link pointin ta tha top 
of tha page (specifically, tha openin body tag).
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
If tha standard options aren't enough, you may wanna subclass
Pod::Simple::XHMTL. These is da most thugged-out likely muthafuckas fo' methods
yo dirty ass is gonna wanna override when subclassing.
.SS "handle_text"
.IX Subsection "handle_text"
This method handlez tha body of text within any element: itz tha body
of a paragraph, or every last muthafuckin thang between a \*(L"=begin\*(R" tag n' the
correspondin \*(L"=end\*(R" tag, or tha text within a L entity, etc. Yo ass would
wanna override dis if yo ass be addin a cold-ass lil custom element type dat do
more than just display formatted text. Perhaps addin a way ta generate
\&\s-1HTML\s0 tablez from a extended version of \s-1POD.\s0
.PP
So, letz say you wanna add a cold-ass lil custom element called 'foo'. In your
subclasss \f(CW\*(C`new\*(C'\fR method, afta callin \f(CW\*(C`SUPER::new\*(C'\fR you'd call:
.PP
.Vb 1
\&  $new\->accept_targets_as_text( \*(Aqfoo\*(Aq );
.Ve
.PP
Then override tha \f(CW\*(C`start_for\*(C'\fR method up in tha subclass ta check fo' when
\&\*(L"$flags\->{'target'}\*(R" is equal ta 'foo' n' set a gangbangin' flag dat marks that
yo ass is up in a gangbangin' foo block (maybe \*(L"$self\->{'in_foo'} = 1\*(R"). Then override the
\&\f(CW\*(C`handle_text\*(C'\fR method ta check fo' tha flag, n' pass \f(CW$text\fR ta your
custom subroutine ta construct tha \s-1HTML\s0 output fo' 'foo' elements,
suttin' like:
.PP
.Vb 8
\&  sub handle_text {
\&      mah ($self, $text) = @_;
\&      if ($self\->{\*(Aqin_foo\*(Aq}) {
\&          $self\->{\*(Aqscratch\*(Aq} .= build_foo_html($text);
\&          return;
\&      }
\&      $self\->SUPER::handle_text($text);
\&  }
.Ve
.SS "handle_code"
.IX Subsection "handle_code"
This method handlez tha body of text dat is marked up ta be code.
Yo ass might fo' instizzle override dis ta plug up in a syntax highlighter.
Da base implementation just escapes tha text.
.PP
Da callback methodz \f(CW\*(C`start_code\*(C'\fR n' \f(CW\*(C`end_code\*(C'\fR emits tha \f(CW\*(C`code\*(C'\fR tags
before n' afta \f(CW\*(C`handle_code\*(C'\fR is invoked, so you might wanna override these
together wit \f(CW\*(C`handle_code\*(C'\fR if dis wrappin aint suiteable.
.PP
Note dat tha code might be fucked up tha fuck into mulitple segments if there are
nested formattin codes inside a \f(CW\*(C`C<...>\*(C'\fR sequence.  In between the
calls ta \f(CW\*(C`handle_code\*(C'\fR other markup tags might done been emitted up in that
case.  Da same is legit fo' verbatim sections if tha \f(CW\*(C`codes_in_verbatim\*(C'\fR
option is turned on.
.SS "accept_targets_as_html"
.IX Subsection "accept_targets_as_html"
This method behaves like \f(CW\*(C`accept_targets_as_text\*(C'\fR yo, but also marks tha region
as one whose content should be emitted literally, without \s-1HTML\s0 entitizzle escaping
or wrappin up in a \f(CW\*(C`div\*(C'\fR element.
.SS "resolve_pod_page_link"
.IX Subsection "resolve_pod_page_link"
.Vb 3
\&  mah $url = $pod\->resolve_pod_page_link(\*(AqNet::Ping\*(Aq, \*(AqINSTALL\*(Aq);
\&  mah $url = $pod\->resolve_pod_page_link(\*(Aqperlpodspec\*(Aq);
\&  mah $url = $pod\->resolve_pod_page_link(undef, \*(AqSYNOPSIS\*(Aq);
.Ve
.PP
Resolves a \s-1POD\s0 link target (typically a module or \s-1POD\s0 file name) n' section
name ta a \s-1URL.\s0 Da resultin link is ghon be returned fo' tha above examplez as:
.PP
.Vb 3
\&  http://search.cpan.org/perldoc?Net::Ping#INSTALL
\&  http://search.cpan.org/perldoc?perlpodspec
\&  #SYNOPSIS
.Ve
.PP
Note dat when there is only a section argument tha \s-1URL\s0 will simply be a link
to a section up in tha current document.
.SS "resolve_man_page_link"
.IX Subsection "resolve_man_page_link"
.Vb 2
\&  mah $url = $pod\->resolve_man_page_link(\*(Aqcrontab(5)\*(Aq, \*(AqEXAMPLE CRON FILE\*(Aq);
\&  mah $url = $pod\->resolve_man_page_link(\*(Aqcrontab\*(Aq);
.Ve
.PP
Resolves a playa page link target n' numeric section ta a \s-1URL.\s0 Da resulting
link is ghon be returned fo' tha above examplez as:
.PP
.Vb 2
\&    http://man.he.net/man5/crontab
\&    http://man.he.net/man1/crontab
.Ve
.PP
Note dat tha straight-up original gangsta argument is required. Y'all KNOW dat shit, muthafucka! Da section number is ghon be parsed
from it, n' if itz missin will default ta 1. Da second argument is
currently ignored, as man.he.net <http://man.he.net> do not currently
include linkable IDs or anchor names up in its pages. Right back up in yo muthafuckin ass. Subclass ta link ta a
different playa page \s-1HTTP\s0 server.
.SS "idify"
.IX Subsection "idify"
.Vb 2
\&  mah $id   = $pod\->idify($text);
\&  mah $hash = $pod\->idify($text, 1);
.Ve
.PP
This method turns a arbitrary strang tha fuck into a valid \s-1XHTML ID\s0 attribute value.
Da rulez enforced, following
<http://webdesign.about.com/od/htmltags/a/aa031707.htm>, are:
.IP "\(bu" 4
Da id must start wit a letta (a\-z or A\-Z)
.IP "\(bu" 4
All subsequent charactas can be letters, numbers (0\-9), hyphens (\-),
underscores (_), colons (:), n' periodz (.).
.IP "\(bu" 4
Da final characta can't be a hyphen, colon, or period. Y'all KNOW dat shit, muthafucka! URLs endin wit these
characters, while allowed by \s-1XHTML,\s0 can be awkward ta extract from plain text.
.IP "\(bu" 4
Each id must be unique within tha document.
.PP
In addition, tha returned value is ghon be unique within tha context of the
Pod::Simple::XHTML object unless a second argument is passed a legit value. \s-1ID\s0
attributes should always be unique within a single \s-1XHTML\s0 document yo, but pass
the legit value if yo ass is bustin not a \s-1ID\s0 but a \s-1URL\s0 hash ta point to
an \s-1ID \s0(i.e., if you need ta put tha \*(L"#foo\*(R" up in \f(CW\*(C`<a href="#foo">foo</a>\*(C'\fR.
.SS "batch_mode_page_object_init"
.IX Subsection "batch_mode_page_object_init"
.Vb 1
\&  $pod\->batch_mode_page_object_init($batchconvobj, $module, $infile, $outfile, $depth);
.Ve
.PP
Called by Pod::Simple::HTMLBatch so dat tha class has a cold-ass lil chizzle to
initialize tha converter n' shit. Internally it sets tha \f(CW\*(C`batch_mode\*(C'\fR property to
true n' sets \f(CW\*(C`batch_mode_current_level()\*(C'\fR yo, but Pod::Simple::XHTML do not
currently use dem features. Right back up in yo muthafuckin ass. Subclasses might, though.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Simple, Pod::Simple::Text, Pod::Spell
.SH "SUPPORT"
.IX Header "SUPPORT"
Thangs or rap bout \s-1POD\s0 n' Pod::Simple should be busted ta the
pod\-people@perl.org mail list. Right back up in yo muthafuckin ass. Send a empty email to
pod\-people\-subscribe@perl.org ta subscribe.
.PP
This module is managed up in a open GitHub repository,
<https://github.com/theory/pod\-simple/>. Feel free ta fork n' contribute, or
to clone <git://github.com/theory/pod\-simple.git> n' bust patches!
.PP
Patches against Pod::Simple is welcome. Please bust bug reports to
<bug\-pod\-simple@rt.cpan.org>.
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2003\-2005 Allison Randal.
.PP
This library is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.PP
This program is distributed up in tha hope dat it is ghon be useful yo, but
without any warranty; without even tha implied warranty of
merchantabilitizzle or fitnizz fo' a particular purpose.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks ta Hurricane Electric <http://he.net/> fo' permission ta use its
Linux playa pages online <http://man.he.net/> joint fo' playa page links.
.PP
Thanks ta search.cpan.org <http://search.cpan.org/> fo' permission ta use the
site fo' Perl module links.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pod::Simpele::XHTML was pimped by Allison Randal <allison@perl.org>.
.PP
Pod::Simple was pimped by Shizzle M. Burke <sburke@cpan.org>.
But don't bother him, he retired.
.PP
Pod::Simple is maintained by:
.IP "\(bu" 4
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR
.IP "\(bu" 4
Hans Dieta Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR
.IP "\(bu" 4
Dizzy E. Wheela \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
