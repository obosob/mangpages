" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::__profile::list< _Tp, _Allocator > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits list< _Tp, _Allocator >\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Allocator \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef __iterator_tracker
.br
< typename 
.br
_Base::const_iterator, \fBlist\fP > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::const_pointa \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Base::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP
.br
< const_iterator > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef __iterator_tracker
.br
< typename _Base::iterator, 
.br
\fBlist\fP > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Base::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Base::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP
.br
< iterator > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBlist\fP (const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBlist\fP (size_type __n)"
.br
.ti -1c
.RI "\fBlist\fP (size_type __n, const _Tp &__value, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fBlist\fP (_InputIterator __first, _InputIterator __last, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBlist\fP (const \fBlist\fP &__x)"
.br
.ti -1c
.RI "\fBlist\fP (const \fB_Base\fP &__x)"
.br
.ti -1c
.RI "\fBlist\fP (\fBlist\fP &&__x) noexcept"
.br
.ti -1c
.RI "\fBlist\fP (\fBinitializer_list\fP< value_type > __l, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fB_Base\fP & \fB_M_base\fP () noexcept"
.br
.ti -1c
.RI "const \fB_Base\fP & \fB_M_base\fP () const noexcept"
.br
.ti -1c
.RI "void \fB_M_profile_find\fP () const "
.br
.ti -1c
.RI "void \fB_M_profile_iterate\fP (int __rewind=0) const "
.br
.ti -1c
.RI "void \fBassign\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> void \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBassign\fP (size_type __n, const _Tp &__t)"
.br
.ti -1c
.RI "reference \fBback\fP ()"
.br
.ti -1c
.RI "const_reference \fBback\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> iterator \fBemplace\fP (iterator __position, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "iterator \fBend\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBend\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __position)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __position, iterator __last)"
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __position, const _Tp &__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __position, _Tp &&__x)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __position, \fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __position, size_type __n, const _Tp &__x)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> void \fBinsert\fP (iterator __position, _InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBmerge\fP (\fBlist\fP &&__x)"
.br
.ti -1c
.RI "void \fBmerge\fP (\fBlist\fP &__x)"
.br
.ti -1c
.RI "template<class _Compare > void \fBmerge\fP (\fBlist\fP &&__x, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _Compare > void \fBmerge\fP (\fBlist\fP &__x, _Compare __comp)"
.br
.ti -1c
.RI "\fBlist\fP & \fBoperator=\fP (const \fBlist\fP &__x)"
.br
.ti -1c
.RI "\fBlist\fP & \fBoperator=\fP (\fBlist\fP &&__x)"
.br
.ti -1c
.RI "\fBlist\fP & \fBoperator=\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "void \fBpop_back\fP ()"
.br
.ti -1c
.RI "void \fBpop_front\fP ()"
.br
.ti -1c
.RI "void \fBpush_front\fP (const value_type &__x)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.ti -1c
.RI "void \fBremove\fP (const _Tp &__value)"
.br
.ti -1c
.RI "template<class _Predicate > void \fBremove_if\fP (_Predicate __pred)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __sz)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __sz, const _Tp &__c)"
.br
.ti -1c
.RI "void \fBsort\fP ()"
.br
.ti -1c
.RI "template<typename _StrictWeakOrderin > void \fBsort\fP (_StrictWeakOrderin __pred)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __position, \fBlist\fP &&__x)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __position, \fBlist\fP &__x)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __position, \fBlist\fP &__x, iterator __i)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __position, \fBlist\fP &&__x, iterator __i)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __position, \fBlist\fP &&__x, iterator __first, iterator __last)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __position, \fBlist\fP &__x, iterator __first, iterator __last)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBlist\fP &__x)"
.br
.ti -1c
.RI "void \fBunique\fP ()"
.br
.ti -1c
.RI "template<class _BinaryPredicate > void \fBunique\fP (_BinaryPredicate __binary_pred)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Allocator = std::allocator<_Tp>>class std::__profile::list< _Tp, _Allocator >"
List wrapper wit performizzle instrumentation\&. 
.PP
Definizzle at line 42 of file profile/list\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
