.TH "__gnu_debug" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_debug \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_After_nth_from\fP"
.br
.ti -1c
.RI "struct \fB_BeforeBeginHelper\fP"
.br
.ti -1c
.RI "class \fB_Equal_to\fP"
.br
.ti -1c
.RI "class \fB_Not_equal_to\fP"
.br
.ti -1c
.RI "class \fB_Safe_iterator\fP"
.br
.ti -1c
.RI "class \fB_Safe_iterator_base\fP"
.br
.ti -1c
.RI "class \fB_Safe_local_iterator\fP"
.br
.ti -1c
.RI "class \fB_Safe_local_iterator_base\fP"
.br
.ti -1c
.RI "class \fB_Safe_sequence\fP"
.br
.ti -1c
.RI "class \fB_Safe_sequence_base\fP"
.br
.ti -1c
.RI "class \fB_Safe_unordered_container\fP"
.br
.ti -1c
.RI "class \fB_Safe_unordered_container_base\fP"
.br
.ti -1c
.RI "class \fBbasic_string\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBbasic_string\fP< char > \fBstring\fP"
.br
.ti -1c
.RI "typedef \fBbasic_string\fP< wchar_t > \fBwstring\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_Debug_msg_id\fP { \fB__msg_valid_range\fP, \fB__msg_insert_singular\fP, \fB__msg_insert_different\fP, \fB__msg_erase_bad\fP, \fB__msg_erase_different\fP, \fB__msg_subscript_oob\fP, \fB__msg_empty\fP, \fB__msg_unpartitioned\fP, \fB__msg_unpartitioned_pred\fP, \fB__msg_unsorted\fP, \fB__msg_unsorted_pred\fP, \fB__msg_not_heap\fP, \fB__msg_not_heap_pred\fP, \fB__msg_bad_bitset_write\fP, \fB__msg_bad_bitset_read\fP, \fB__msg_bad_bitset_flip\fP, \fB__msg_self_splice\fP, \fB__msg_splice_alloc\fP, \fB__msg_splice_bad\fP, \fB__msg_splice_other\fP, \fB__msg_splice_overlap\fP, \fB__msg_init_singular\fP, \fB__msg_init_copy_singular\fP, \fB__msg_init_const_singular\fP, \fB__msg_copy_singular\fP, \fB__msg_bad_deref\fP, \fB__msg_bad_inc\fP, \fB__msg_bad_dec\fP, \fB__msg_iter_subscript_oob\fP, \fB__msg_advance_oob\fP, \fB__msg_retreat_oob\fP, \fB__msg_iter_compare_bad\fP, \fB__msg_compare_different\fP, \fB__msg_iter_order_bad\fP, \fB__msg_order_different\fP, \fB__msg_distance_bad\fP, \fB__msg_distance_different\fP, \fB__msg_deref_istream\fP, \fB__msg_inc_istream\fP, \fB__msg_output_ostream\fP, \fB__msg_deref_istreambuf\fP, \fB__msg_inc_istreambuf\fP, \fB__msg_insert_after_end\fP, \fB__msg_erase_after_bad\fP, \fB__msg_valid_range2\fP, \fB__msg_local_iter_compare_bad\fP, \fB__msg_non_empty_range\fP, \fB__msg_self_move_assign\fP, \fB__msg_bucket_index_oob\fP, \fB__msg_valid_load_factor\fP, \fB__msg_equal_allocs\fP }"
.br
.ti -1c
.RI "enum \fB_Distance_precision\fP { \fB__dp_equality\fP, \fB__dp_sign\fP, \fB__dp_exact\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Iterator > _Siter_base< _Iterator >
.br
::iterator_type \fB__base\fP (_Iterator __it)"
.br
.ti -1c
.RI "template<typename _Iterator > bool \fB__check_dereferenceable\fP (_Iterator &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fB__check_dereferenceable\fP (const _Tp *__ptr)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fB__check_dereferenceable\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__x)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp > bool \fB__check_partitioned_lower\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp , typename _Pred > bool \fB__check_partitioned_lower\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value, _Pred __pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp > bool \fB__check_partitioned_upper\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp , typename _Pred > bool \fB__check_partitioned_upper\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value, _Pred __pred)"
.br
.ti -1c
.RI "template<typename _Iterator > bool \fB__check_singular\fP (_Iterator &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fB__check_singular\fP (const _Tp *__ptr)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fB__check_singular\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__x)"
.br
.ti -1c
.RI "bool \fB__check_singular_aux\fP (const void *)"
.br
.ti -1c
.RI "bool \fB__check_singular_aux\fP (const \fB_Safe_iterator_base\fP *__x)"
.br
.ti -1c
.RI "template<typename _InputIterator > bool \fB__check_sorted\fP (const _InputIterator &__first, const _InputIterator &__last)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fB__check_sorted\fP (const _InputIterator &__first, const _InputIterator &__last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator > bool \fB__check_sorted_aux\fP (const _InputIterator &, const _InputIterator &, \fBstd::input_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _ForwardIterator > bool \fB__check_sorted_aux\fP (_ForwardIterator __first, _ForwardIterator __last, \fBstd::forward_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fB__check_sorted_aux\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__first, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__last, \fBstd::random_access_iterator_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fB__check_sorted_aux\fP (const _InputIterator &, const _InputIterator &, _Predicate, \fBstd::input_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Predicate > bool \fB__check_sorted_aux\fP (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, \fBstd::forward_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence , typename _Predicate > bool \fB__check_sorted_aux\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__first, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__last, _Predicate __pred, \fBstd::random_access_iterator_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 > bool \fB__check_sorted_set\fP (const _InputIterator1 &__first, const _InputIterator1 &__last, const _InputIterator2 &)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _Predicate > bool \fB__check_sorted_set\fP (const _InputIterator1 &__first, const _InputIterator1 &__last, const _InputIterator2 &, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator > bool \fB__check_sorted_set_aux\fP (const _InputIterator &__first, const _InputIterator &__last, std::__true_type)"
.br
.ti -1c
.RI "template<typename _InputIterator > bool \fB__check_sorted_set_aux\fP (const _InputIterator &, const _InputIterator &, std::__false_type)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fB__check_sorted_set_aux\fP (const _InputIterator &__first, const _InputIterator &__last, _Predicate __pred, std::__true_type)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fB__check_sorted_set_aux\fP (const _InputIterator &, const _InputIterator &, _Predicate, std::__false_type)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Integer > const _CharT * \fB__check_string\fP (const _CharT *__s, const _Integer &__n __attribute__((__unused__)))"
.br
.ti -1c
.RI "template<typename _CharT > const _CharT * \fB__check_string\fP (const _CharT *__s)"
.br
.ti -1c
.RI "template<typename _InputIterator > _InputIterator \fB__check_valid_range\fP (const _InputIterator &__first, const _InputIterator &__last __attribute__((__unused__)))"
.br
.ti -1c
.RI "template<typename _Iterator1 , typename _Iterator2 > \fBstd::pair\fP< typename 
.br
std::iterator_traits
.br
< _Iterator1 >
.br
::difference_type, 
.br
\fB_Distance_precision\fP > \fB__get_distance\fP (const _Iterator1 &__lhs, const _Iterator2 &__rhs, \fBstd::random_access_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _Iterator1 , typename _Iterator2 > \fBstd::pair\fP< typename 
.br
std::iterator_traits
.br
< _Iterator1 >
.br
::difference_type, 
.br
\fB_Distance_precision\fP > \fB__get_distance\fP (const _Iterator1 &__lhs, const _Iterator2 &__rhs, \fBstd::forward_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _Iterator1 , typename _Iterator2 > \fBstd::pair\fP< typename 
.br
std::iterator_traits
.br
< _Iterator1 >
.br
::difference_type, 
.br
\fB_Distance_precision\fP > \fB__get_distance\fP (const _Iterator1 &__lhs, const _Iterator2 &__rhs)"
.br
.ti -1c
.RI "template<typename _InputIterator > bool \fB__valid_range\fP (const _InputIterator &__first, const _InputIterator &__last)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fB__valid_range\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__first, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__last)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fB__valid_range\fP (const \fB_Safe_local_iterator\fP< _Iterator, _Sequence > &__first, const \fB_Safe_local_iterator\fP< _Iterator, _Sequence > &__last)"
.br
.ti -1c
.RI "template<typename _Integral > bool \fB__valid_range_aux\fP (const _Integral &, const _Integral &, std::__true_type)"
.br
.ti -1c
.RI "template<typename _InputIterator > bool \fB__valid_range_aux\fP (const _InputIterator &__first, const _InputIterator &__last, std::__false_type)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > bool \fB__valid_range_aux2\fP (const _RandomAccessIterator &__first, const _RandomAccessIterator &__last, \fBstd::random_access_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _InputIterator > bool \fB__valid_range_aux2\fP (const _InputIterator &, const _InputIterator &, \fBstd::input_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBgetline\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__str, _CharT __delim)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBgetline\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__str)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator!=\fP (const \fB_Safe_local_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_local_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator!=\fP (const \fB_Safe_local_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_local_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator!=\fP (const \fB_Safe_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator!=\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator!=\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator!=\fP (const _CharT *__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator!=\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > \fB_Safe_iterator\fP< _Iterator, 
.br
_Sequence > \fBoperator+\fP (typename \fB_Safe_iterator\fP< _Iterator, _Sequence >::difference_type __n, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__i)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBbasic_string\fP< _CharT, _Traits, 
.br
_Allocator > \fBoperator+\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBbasic_string\fP< _CharT, _Traits, 
.br
_Allocator > \fBoperator+\fP (const _CharT *__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBbasic_string\fP< _CharT, _Traits, 
.br
_Allocator > \fBoperator+\fP (_CharT __lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBbasic_string\fP< _CharT, _Traits, 
.br
_Allocator > \fBoperator+\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBbasic_string\fP< _CharT, _Traits, 
.br
_Allocator > \fBoperator+\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, _CharT __rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > \fB_Safe_iterator\fP< _IteratorL, 
.br
_Sequence >::difference_type \fBoperator-\fP (const \fB_Safe_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > \fB_Safe_iterator\fP< _Iterator, 
.br
_Sequence >::difference_type \fBoperator-\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator<\fP (const \fB_Safe_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator<\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator<\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator<\fP (const _CharT *__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator<\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBstd::basic_ostream\fP< _CharT, 
.br
_Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__str)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator<=\fP (const \fB_Safe_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator<=\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator<=\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator<=\fP (const _CharT *__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator<=\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator==\fP (const \fB_Safe_local_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_local_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator==\fP (const \fB_Safe_local_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_local_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator==\fP (const \fB_Safe_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator==\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator==\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator==\fP (const _CharT *__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator==\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator>\fP (const \fB_Safe_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator>\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator>\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator>\fP (const _CharT *__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator>\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Sequence > bool \fBoperator>=\fP (const \fB_Safe_iterator\fP< _IteratorL, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _IteratorR, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Sequence > bool \fBoperator>=\fP (const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__lhs, const \fB_Safe_iterator\fP< _Iterator, _Sequence > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator>=\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator>=\fP (const _CharT *__lhs, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > bool \fBoperator>=\fP (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__str)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Allocator > void \fBswap\fP (\fBbasic_string\fP< _CharT, _Traits, _Allocator > &__lhs, \fBbasic_string\fP< _CharT, _Traits, _Allocator > &__rhs)"
.br
.in -1c
.SH "Detailed Description"
.PP 
GNU debug classes fo' hood use\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB__gnu_debug::_Distance_precision\fP"
Da precision ta which we can calculate tha distizzle between two iterators\&. 
.PP
Definizzle at line 70 of file safe_iterator\&.h\&.
.SH "Function Documentation"
.PP 
.SS "template<typename _Iterator > _Siter_base<_Iterator>::iterator_type __gnu_debug::__base (_Iterator__it)\fC [inline]\fP"
Helper function ta extract base iterator of random access safe iterator up in order ta reduce performizzle impact of debug mode\&. Limited ta random access iterator cuz it is tha only category fo' which it is possible ta check fo' erect iterators order up in tha __valid_range function props ta tha < operator\&. 
.PP
Definizzle at line 446 of file functions\&.h\&.
.PP
Referenced by __gnu_parallel::__for_each_template_random_access_workstealing(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence >::_M_before_dereferenceable(), std::boolalpha(), std::dec(), std::fixed(), std::hex(), std::internal(), std::left(), std::noboolalpha(), std::noshowbase(), std::noshowpoint(), std::noshowpos(), std::noskipws(), std::nounitbuf(), std::nouppercase(), std::oct(), std::right(), std::scientific(), std::showbase(), std::showpoint(), std::showpos(), std::skipws(), std::unitbuf(), n' std::uppercase()\&.
.SS "template<typename _Iterator > bool __gnu_debug::__check_dereferenceable (_Iterator &)\fC [inline]\fP"
Assume dat some arbitrary iterator is dereferenceable, cuz we can't prove dat it aint\&. 
.PP
Definizzle at line 70 of file functions\&.h\&.
.SS "template<typename _Tp > bool __gnu_debug::__check_dereferenceable (const _Tp *__ptr)\fC [inline]\fP"
Non-NULL pointas is dereferenceable\&. 
.PP
Definizzle at line 76 of file functions\&.h\&.
.SS "template<typename _Iterator , typename _Sequence > bool __gnu_debug::__check_dereferenceable (const _Safe_iterator< _Iterator, _Sequence > &__x)\fC [inline]\fP"
Safe iterators know if they is singular\&. 
.PP
Definizzle at line 82 of file functions\&.h\&.
.PP
References __gnu_debug::_Safe_iterator< _Iterator, _Sequence >::_M_dereferenceable()\&.
.SS "template<typename _Tp > bool __gnu_debug::__check_singular (const _Tp *__ptr)\fC [inline]\fP"
Non-NULL pointas is nonsingular\&. 
.PP
Definizzle at line 57 of file functions\&.h\&.
.SS "template<typename _Iterator , typename _Sequence > bool __gnu_debug::__check_singular (const _Safe_iterator< _Iterator, _Sequence > &__x)\fC [inline]\fP"
Safe iterators know if they is singular\&. 
.PP
Definizzle at line 63 of file functions\&.h\&.
.PP
References __gnu_debug::_Safe_iterator_base::_M_singular()\&.
.SS "bool __gnu_debug::__check_singular_aux (const _Safe_iterator_base *__x)\fC [inline]\fP"
Iterators dat derive from _Safe_iterator_base but dat aren't _Safe_iterators can be determined singular or non-singular via _Safe_iterator_base\&. 
.PP
Definizzle at line 64 of file safe_iterator\&.h\&.
.PP
References __gnu_debug::_Safe_iterator_base::_M_singular()\&.
.SS "template<typename _CharT , typename _Integer > const _CharT* __gnu_debug::__check_strin (const _CharT *__s, const _Integer &__n __attribute__(__unused__))\fC [inline]\fP"
Checks dat __s is non-NULL or __n == 0, n' then returns __s\&. 
.PP
Definizzle at line 168 of file functions\&.h\&.
.SS "template<typename _CharT > const _CharT* __gnu_debug::__check_strin (const _CharT *__s)\fC [inline]\fP"
Checks dat __s is non-NULL n' then returns __s\&. 
.PP
Definizzle at line 180 of file functions\&.h\&.
.SS "template<typename _Iterator1 , typename _Iterator2 > \fBstd::pair\fP<typename std::iterator_traits<_Iterator1>::difference_type, \fB_Distance_precision\fP> __gnu_debug::__get_distizzle (const _Iterator1 &__lhs, const _Iterator2 &__rhs, \fBstd::random_access_iterator_tag\fP)\fC [inline]\fP"
Determine tha distizzle between two iterators wit some known precision\&. 
.PP
Definizzle at line 83 of file safe_iterator\&.h\&.
.PP
References std::make_pair()\&.
.SS "template<typename _InputIterator > bool __gnu_debug::__valid_range (const _InputIterator &__first, const _InputIterator &__last)\fC [inline]\fP"
Don't know what tha fuck these iterators are, or if they is even iterators (we may git a integral type fo' InputIterator), so peep if they is integral n' pass dem on ta tha next phase otherwise\&. 
.PP
Definizzle at line 131 of file functions\&.h\&.
.PP
References __valid_range_aux()\&.
.SS "template<typename _Iterator , typename _Sequence > bool __gnu_debug::__valid_range (const _Safe_iterator< _Iterator, _Sequence > &__first, const _Safe_iterator< _Iterator, _Sequence > &__last)\fC [inline]\fP"
Safe iterators know how tha fuck ta check if they form a valid range\&. 
.PP
Definizzle at line 140 of file functions\&.h\&.
.SS "template<typename _Iterator , typename _Sequence > bool __gnu_debug::__valid_range (const _Safe_local_iterator< _Iterator, _Sequence > &__first, const _Safe_local_iterator< _Iterator, _Sequence > &__last)\fC [inline]\fP"
Safe local iterators know how tha fuck ta check if they form a valid range\&. 
.PP
Definizzle at line 147 of file functions\&.h\&.
.SS "template<typename _Integral > bool __gnu_debug::__valid_range_aux (const _Integral &, const _Integral &, std::__true_type)\fC [inline]\fP"
We say dat integral types fo' a valid range, n' defer ta other routines ta realize what tha fuck ta do wit integral types instead of iterators\&. 
.PP
Definizzle at line 111 of file functions\&.h\&.
.PP
Referenced by __valid_range()\&.
.SS "template<typename _InputIterator > bool __gnu_debug::__valid_range_aux (const _InputIterator &__first, const _InputIterator &__last, std::__false_type)\fC [inline]\fP"
Our thugged-out asses have iterators, so figure up what tha fuck kind of iterators dat is ta peep if we can check tha range ahead of time\&. 
.PP
Definizzle at line 119 of file functions\&.h\&.
.PP
References std::__iterator_category(), n' __valid_range_aux2()\&.
.SS "template<typename _RandomAccessIterator > bool __gnu_debug::__valid_range_aux2 (const _RandomAccessIterator &__first, const _RandomAccessIterator &__last, \fBstd::random_access_iterator_tag\fP)\fC [inline]\fP"
If tha distizzle between two random access iterators is nonnegative, assume tha range is valid\&. 
.PP
Definizzle at line 90 of file functions\&.h\&.
.PP
Referenced by __valid_range_aux()\&.
.SS "template<typename _InputIterator > bool __gnu_debug::__valid_range_aux2 (const _InputIterator &, const _InputIterator &, \fBstd::input_iterator_tag\fP)\fC [inline]\fP"
Can't test fo' a valid range wit input iterators, cuz iteration may be destructive\&. Right back up in yo muthafuckin ass. So our laid-back asses just assume dat tha range is valid\&. 
.PP
Definizzle at line 101 of file functions\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
