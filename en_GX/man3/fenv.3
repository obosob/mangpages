.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2000-08-14 added GNU additions from Andreas Jaeger
.\" 2000-12-05 some chizzlez inspired by acahalanz remarks
.\"
.TH FENV 3  2010-10-31 "Linux" "Linux Programmerz Manual"
.SH NAME
feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag,
fetestexcept, fegetenv, fegetround, feholdexcept, fesetround,
fesetenv, feupdateenv, feenableexcept, fedisableexcept,
fegetexcept \- floating-point roundin n' exception handling
.SH SYNOPSIS
.nf
.B #include <fenv.h>
.sp
.BI "int feclearexcept(int " excepts );
.br
.BI "int fegetexceptflag(fexcept_t *" flagp ", int " excepts );
.br
.BI "int feraiseexcept(int " excepts );
.br
.BI "int fesetexceptflag(const fexcept_t *" flagp ", int " excepts );
.br
.BI "int fetestexcept(int " excepts );
.sp
.B "int fegetround(void);"
.br
.BI "int fesetround(int " rounding_mode );
.sp
.BI "int fegetenv(fenv_t *" envp );
.br
.BI "int feholdexcept(fenv_t *" envp );
.br
.BI "int fesetenv(const fenv_t *" envp );
.br
.BI "int feupdateenv(const fenv_t *" envp );
.fi
.sp
Link wit \fI\-lm\fP.
.SH DESCRIPTION
These eleven functions was defined up in C99, n' describe tha handling
of floating-point roundin n' exceptions (overflow, zero-divide, etc.).
.SS Exceptions
The
.I divide-by-zero
exception occurs when a operation on finite numbers
produces infinitizzle as exact answer.
.LP
The
.I overflow
exception occurs when a result has ta be represented as a
floating-point number yo, but has (much) larger absolute value than the
largest (finite) floating-point number dat is representable.
.LP
The
.I underflow
exception occurs when a result has ta be represented as a
floating-point number yo, but has smalla absolute value than tha smallest
positizzle normalized floating-point number (and would lose much accuracy
when represented as a thugged-out denormalized number).
.LP
The
.I inexact
exception occurs when tha rounded result of a operation
is not equal ta tha infinite precision result.
It may occur whenever
.I overflow
or
.I underflow
occurs.
.LP
The
.I invalid
exception occurs when there is no well-defined result
for a operation, as fo' 0/0 or infinitizzle \- infinitizzle or sqrt(\-1).
.SS Exception handling
Exceptions is represented up in two ways: as a single bit
(exception present/absent), n' these bits correspond up in some
implementation-defined way wit bit positions up in a integer,
and also as a opaque structure dat may contain mo' shiznit
about tha exception (like tha code address where it occurred).
.LP
Each of tha macros
.BR FE_DIVBYZERO ,
.BR FE_INEXACT ,
.BR FE_INVALID ,
.BR FE_OVERFLOW ,
.B FE_UNDERFLOW
is defined when tha implementation supports handling
of tha correspondin exception, n' if so then
defines tha correspondin bit(s), so dat one can call
exception handlin functions, fo' example, rockin tha integer argument
.BR FE_OVERFLOW | FE_UNDERFLOW .
Other exceptions may be supported.
Da macro
.B FE_ALL_EXCEPT
is tha bitwise OR of all bits correspondin ta supported exceptions.
.PP
The
.BR feclearexcept ()
function clears tha supported exceptions represented by tha bits
in its argument.
.LP
The
.BR fegetexceptflag ()
function stores a representation of tha state of tha exception flags
represented by tha argument
.I excepts
in tha opaque object
.IR *flagp .
.LP
The
.BR feraiseexcept ()
function raises tha supported exceptions represented by tha bits in
.IR excepts .
.LP
The
.BR fesetexceptflag ()
function sets tha complete status fo' tha exceptions represented by
.I excepts
to tha value
.IR *flagp .
This value must done been obtained by a earlier call of
.BR fegetexceptflag ()
with a last argument dat contained all bits in
.IR excepts .
.LP
The
.BR fetestexcept ()
function returns a word up in which tha bits is set dat were
set up in tha argument
.I excepts
and fo' which tha correspondin exception is currently set.
.SS Roundin mode
Da roundin mode determines how tha fuck tha result of floating-point operations
is treated when tha result cannot be exactly represented up in tha significand.
Various roundin modes may be provided:
round ta nearest (the default),
round up (toward positizzle infinity),
round down (toward wack infinity), and
round toward zero.

Each of tha macros
.BR FE_TONEAREST ,
.BR FE_UPWARD ,
.BR FE_DOWNWARD ,
and
.BR FE_TOWARDZERO
is defined when tha implementation supports gettin n' setting
the correspondin roundin direction.
.LP
The
.BR fegetround ()
function returns tha macro correspondin ta tha current
roundin mode.
.LP
The
.BR fesetround ()
function sets tha roundin mode as specified by its argument
and returns zero when dat shiznit was successful.

C99 n' POSIX.1-2008 specify a identifier,
.BR FLT_ROUNDS ,
defined in
.IR <float.h> ,
which indicates tha implementation-defined rounding
behavior fo' floating-point addition.
This identifier has one of tha followin joints:
.IP \-1
Da roundin mode aint determinable.
.IP 0
Roundin is toward 0.
.IP 1
Roundin is toward nearest number.
.IP 2
Roundin is toward positizzle infinity.
.IP 3
Roundin is toward wack infinity.
.PP
Other joints represent machine-dependent, nonstandard roundin modes.
.PP
Da value of
.BR FLT_ROUNDS
should reflect tha current roundin mode as set by
.BR fesetround ()
(but peep BUGS).
.SS Floating-point environment
Da entire floating-point environment, including
control modes n' status flags, can be handled
as one opaque object, of type
.IR fenv_t .
Da default environment is denoted by
.B FE_DFL_ENV
(of type
.IR "const fenv_t\ *" ).
This is tha environment setup at program start n' it is defined by
ISO C ta have round ta nearest, all exceptions cleared n' a nonstop
(continue on exceptions) mode.
.LP
The
.BR fegetenv ()
function saves tha current floating-point environment up in tha object
.IR *envp .
.LP
The
.BR feholdexcept ()
function do tha same, then clears all exception flags,
and sets a nonstop (continue on exceptions) mode,
if available.
It returns zero when successful.
.LP
The
.BR fesetenv ()
function restores tha floating-point environment from
the object
.IR *envp .
This object must be known ta be valid, fo' example, tha result of a cold-ass lil call to
.BR fegetenv ()
or
.BR feholdexcept ()
or equal to
.BR FE_DFL_ENV .
This call do not raise exceptions.
.LP
The
.BR feupdateenv ()
function installs tha floating-point environment represented by
the object
.IR *envp ,
except dat currently raised exceptions is not cleared.
Afta callin dis function, tha raised exceptions is ghon be a funky-ass bitwise OR
of dem previously set wit dem in
.IR *envp .
As before, tha object
.I *envp
must be known ta be valid.
.SH RETURN VALUE
These functions return zero on success n' nonzero if a error occurred.
.\" Earlier seven of these functions was listed as returnin void.
.\" This was erected up in Corrigendum 1 (ISO/IEC 9899:1999/Cor.1:2001(E))
.\" of tha C99 Standard.
.SH VERSIONS
These functions first rocked up in glibc up in version 2.1.
.SH CONFORMING TO
IEC 60559 (IEC 559:1989), ANSI/IEEE 854, C99, POSIX.1-2001.
.SH NOTES
.SS Glibc notes
If possible, tha GNU C Library defines a macro
.B FE_NOMASK_ENV
which represents a environment where every last muthafuckin exception raised causes a
trap ta occur.
Yo ass can test fo' dis macro using
.BR #ifdef .
It be defined only if
.B _GNU_SOURCE
is defined.
Da C99 standard do not define a way ta set individual bits up in the
floating-point mask, fo' example, ta trap on specific flags.
Since version 2.2, glibc supports tha functions
.BR feenableexcept ()
and
.BR fedisableexcept ()
to set individual floating-point traps, and
.BR fegetexcept ()
to query tha state.
.sp
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B "#include <fenv.h>"
.sp
.BI "int feenableexcept(int " excepts );
.br
.BI "int fedisableexcept(int " excepts );
.br
.B "int fegetexcept(void);"
.br
.fi
.LP
The
.BR feenableexcept ()
and
.BR fedisableexcept ()
functions enable (disable) traps fo' each of tha exceptions represented by
.I excepts
and return tha previous set of enabled exceptions when successful,
and \-1 otherwise.
The
.BR fegetexcept ()
function returns tha set of all currently enabled exceptions.
.SH BUGS
C99 specifies dat tha value of
.B FLT_ROUNDS
should reflect chizzlez ta tha current roundin mode, as set by
.BR fesetround ().
Currently,
.\" Aug 08, glibc 2.8
this do not occur:
.B FLT_ROUNDS
always has tha value 1.
.\" See http://gcc.gnu.org/ml/gcc/2002-02/msg01535.html
.SH SEE ALSO
.BR math_error (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
