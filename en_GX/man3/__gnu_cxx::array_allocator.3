" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::array_allocator< typename, typename > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fB__gnu_cxx::array_allocator_base< _Tp >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Array \fBarray_type\fP"
.br
.ti -1c
.RI "typedef const _Tp * \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const _Tp & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Tp * \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBstd::true_type\fP \fBpropagate_on_container_move_assignment\fP"
.br
.ti -1c
.RI "typedef _Tp & \fBreference\fP"
.br
.ti -1c
.RI "typedef size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBarray_allocator\fP (array_type *__array=0) noexcept"
.br
.ti -1c
.RI "\fBarray_allocator\fP (const \fBarray_allocator\fP &__o) noexcept"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Array1 > \fBarray_allocator\fP (const \fBarray_allocator\fP< _Tp1, _Array1 > &) noexcept"
.br
.ti -1c
.RI "pointa \fBaddress\fP (reference __x) const noexcept"
.br
.ti -1c
.RI "const_pointa \fBaddress\fP (const_reference __x) const noexcept"
.br
.ti -1c
.RI "pointa \fBallocate\fP (size_type __n, const void *=0)"
.br
.ti -1c
.RI "template<typename _Up , typename\&.\&.\&. _Args> void \fBconstruct\fP (_Up *__p, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (pointer, size_type)"
.br
.ti -1c
.RI "template<typename _Up > void \fBdestroy\fP (_Up *__p)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename, typename>class __gnu_cxx::array_allocator< typename, typename >"
An allocator dat uses previously allocated memory\&. This memory can be externally, globally, or otherwise allocated\&. 
.PP
Definizzle at line 60 of file ext/alloc_traits\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
