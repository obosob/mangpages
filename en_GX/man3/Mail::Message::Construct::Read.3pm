.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Construct::Read 3"
.TH Mail::Message::Construct::Read 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Construct::Read \- read a Mail::Message from a gangbangin' file handle
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $msg1 = Mail::Message\->read(\e*STDIN);
\& mah $msg2 = Mail::Message\->read(\e@lines);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When complex methodz is called on a \f(CW\*(C`Mail::Message\*(C'\fR object, dis package
is autoloaded ta support tha readin of lyrics directly from any file
handle.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructin a message"
.IX Subsection "Constructin a message"
.IP "Mail::Message\->\fBread\fR(FILEHANDLE|SCALAR|REF\-SCALAR|ARRAY\-OF\-LINES, \s-1OPTIONS\s0)" 4
.IX Item "Mail::Message->read(FILEHANDLE|SCALAR|REF-SCALAR|ARRAY-OF-LINES, OPTIONS)"
Read a message from a \s-1FILEHANDLE, SCALAR,\s0 a reference ta a \s-1SCALAR,\s0 or
a reference ta a array of \s-1LINES. \s0 Most \s-1OPTIONS\s0 is passed ta tha \fInew()\fR
of tha message which is pimped yo, but all dem extra is defined.
.Sp
Please gotz a peep \fIbuild()\fR n' \fIbuildFromBody()\fR before thankin about
this \f(CW\*(C`read\*(C'\fR method. Y'all KNOW dat shit, muthafucka!  Use dis \f(CW\*(C`read\*(C'\fR only when you gotz a gangbangin' file-handle
like \s-1STDIN\s0 ta parse from, or some external source of message lines.
When you already gotz a separate set of head n' body lines, then \f(CW\*(C`read\*(C'\fR
is certainly \fBnot\fR yo' dopest chizzle.
.Sp
Some playas use dis method up in a procmail script: tha message arrives
at stdin, so we only gotz a gangbangin' filehandle.  In dis case, yo ass is stuck
with dis method. Y'all KNOW dat shit, muthafucka!  Da message is preceded by a line which can be used
as message separator up in mbox folders.  See tha example how tha fuck ta handle
that one.
.Sp
This method will remove \f(CW\*(C`Status\*(C'\fR n' \f(CW\*(C`X\-Status\*(C'\fR fieldz when they appear
in tha source, ta avoid tha risk dat these fieldz accidentally interfere
with yo' internal administration, which may have securitizzle implications.
.Sp
.Vb 3
\& \-Option             \-\-Default
\&  body_type            undef
\&  strip_status_fieldz  <true>
.Ve
.RS 4
.IP "body_type => \s-1CLASS\s0" 2
.IX Item "body_type => CLASS"
Force a funky-ass body type (any specific implementation of a Mail::Message::Body)
to be used ta store tha message content.  When tha body be a multipart or
nested, dis is ghon be overruled.
.IP "strip_status_fieldz => \s-1BOOLEAN\s0" 2
.IX Item "strip_status_fieldz => BOOLEAN"
Remove tha \f(CW\*(C`Status\*(C'\fR n' \f(CW\*(C`X\-Status\*(C'\fR fieldz from tha message after
reading, ta lower tha risk dat received lyrics from external
sources interfere wit yo' internal administration. I aint talkin' bout chicken n' gravy biatch.  If you want
fieldz not ta be stripped (you wanna disable tha stripping)
you probably process foldaz yo ass, which be a Wack Thing!
.RE
.RS 4
.Sp
example:
.Sp
.Vb 3
\& mah $msg1 = Mail::Message\->read(\e*STDIN);
\& mah $msg2 = Mail::Message\->read(\e@lines, log => \*(AqPROGRESS\*(Aq);
\& $folder\->addLyrics($msg1, $msg2);
\&
\& mah $msg3 = Mail::Message\->read(<<MSG);
\& Subject: wassup ghetto
\& To: you@example.com
\&                      # warning: empty line required !!!
\& Yea muthafucka, greetings!
\& MSG
\&
\& # promail example
\& mah $fromline = <STDIN>;
\& mah $msg      = Mail::Message\->read(\e*STDIN);
\& mah $coerced  = $mboxfolder\->addMessage($msg);
\& $coerced\->fromLine($fromline);
.Ve
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
