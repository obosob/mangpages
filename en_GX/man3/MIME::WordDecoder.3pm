.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::WordDecoder 3"
.TH MIME::WordDecoder 3 "2013-08-13" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::WordDecoder \- decode RFC 2047 encoded lyrics ta a local representation
.PP
WARNING: Most of dis module is deprecated n' may disappear. Shiiit, dis aint no joke.  Da only
function you should use fo' MIME decodin is "mime_to_perl_string".
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See MIME::Lyrics fo' tha basics of encoded lyrics.
See \*(L"\s-1DESCRIPTION\*(R"\s0 fo' how tha fuck dis class works.
.PP
.Vb 1
\&    use MIME::WordDecoder;
\&
\&
\&    ### Git tha default word\-decoder (used by unmime()):
\&    $wd = default MIME::WordDecoder;
\&
\&    ### Git a word\-decoder which maps ta ISO\-8859\-1 (Latin1):
\&    $wd = supported MIME::WordDecoder "ISO\-8859\-1";
\&
\&
\&    ### Decode a MIME strang (e.g., tha fuck into Latin1) via tha default decoder:
\&    $str = $wd\->decode(\*(AqTo: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld>\*(Aq);
\&
\&    ### Decode a strang rockin tha default decoder, non\-OO style:
\&    $str = unmime(\*(AqTo: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld>\*(Aq);
\&
\&    ### Decode a strang ta a internal Perl string, non\-OO style
\&    ### Da result is likely ta have tha UTF8 flag ON.
\&    $str = mime_to_perl_string(\*(AqTo: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld>\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1WARNING:\s0 Most of dis module is deprecated n' may disappear. Shiiit, dis aint no joke.  It
duplicates (badly) tha function of tha standard 'Encode' module.  The
only function you should rely on is mime_to_perl_string.
.PP
A MIME::WordDecoder consists, fundamentally, of a hash which maps
a characta set name (US-ASCII, \s-1ISO\-8859\-1,\s0 etc.) ta a subroutine which
knows how tha fuck ta take bytes up in dat characta set n' turn dem into
the target strang representation. I aint talkin' bout chicken n' gravy biatch.  Ideally, dis target representation
would be Unicode yo, but our phat asses don't wanna overspecify tha translation
that takes place: if you wanna convert \s-1MIME\s0 strings directly ta Big5,
thatz yo' own decision.
.PP
Da subroutine is ghon be invoked wit two arguments: \s-1DATA \s0(the data in
the given characta set), n' \s-1CHARSET \s0(the upcased characta set name).
.PP
For example:
.PP
.Vb 6
\&    ### Keep 7\-bit charactas as\-is, convert 8\-bit charactas ta \*(Aq#\*(Aq:
\&    sub keep7bit {
\&        local $_ = shift;
\&        tr/\ex00\-\ex7F/#/c;
\&        $_;
\&    }
.Ve
.PP
Herez a thugged-out decoder which uses that:
.PP
.Vb 6
\&   ### Construct a thugged-out decoder:
\&   $wd = MIME::WordDecoder\->new({\*(AqUS\-ASCII\*(Aq   => "KEEP",   ### sub { $_[0] }
\&                                 \*(AqISO\-8859\-1\*(Aq => \e&keep7bit,
\&                                 \*(AqISO\-8859\-2\*(Aq => \e&keep7bit,
\&                                 \*(AqBig5\*(Aq       => "WARN",
\&                                 \*(Aq*\*(Aq          => "DIE"});
\&
\&   ### Convert some MIME text ta a pure ASCII string...
\&   $ascii = $wd\->decode(\*(AqTo: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld>\*(Aq);
\&
\&   ### ...which will now hold: "To: Keld J#rn Simonsen <keld>"
.Ve
.PP
Da \s-1UTF\-8\s0 built-in decoder decodes every last muthafuckin thang tha fuck into Perlz internal
strin format, possibly turnin on tha internal \s-1UTF8\s0 flag.  Use it like
this:
.PP
.Vb 3
\&    $wd = supported MIME::WordDecoder \*(AqUTF\-8\*(Aq;
\&    $perl_strin = $wd\->decode(\*(AqTo: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld>\*(Aq);
\&    # perl_strin is ghon be a valid UTF\-8 strang wit tha "UTF8" flag set.
.Ve
.PP
Generally, you should use tha \s-1UTF\-8\s0 decoder up in preference ta \*(L"unmime\*(R".
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.IP "default [\s-1DECODER\s0]" 4
.IX Item "default [DECODER]"
\&\fIClass method.\fR
Get/set tha default \s-1DECODER\s0 object.
.IP "supported \s-1CHARSET,\s0 [\s-1DECODER\s0]" 4
.IX Item "supported CHARSET, [DECODER]"
\&\fIClass method.\fR
If just \s-1CHARSET\s0 is given, returns a thugged-out decoder object which maps
data tha fuck into dat characta set (the characta set is forced to
all-uppercase).
.Sp
.Vb 1
\&    $wd = supported MIME::WordDecoder "ISO\-8859\-1";
.Ve
.Sp
If \s-1DECODER\s0 is given, installs such a object:
.Sp
.Vb 2
\&    MIME::WordDecoder\->supported("ISO\-8859\-1" =>
\&                                 (new MIME::WordDecoder::ISO_8859 "1"));
.Ve
.Sp
Yo ass should not override dis method.
.IP "new [\e@HANDLERS]" 4
.IX Item "new [@HANDLERS]"
\&\fIClass method, constructor.\fR
If \e@HANDLERS is given, then \f(CW@HANDLERS\fR is passed ta \fIhandlez()\fR
to initialize tha internal map.
.IP "handlez CHARSET=>\e&SUBREF, ..." 4
.IX Item "handlez CHARSET=>&SUBREF, ..."
\&\fIInstizzle method.\fR
Set tha handlez \s-1SUBREF\s0 fo' a given \s-1CHARSET,\s0 fo' as nuff pairs
as you care ta supply.
.Sp
When struttin tha translation of a MIME-encoded string, a
given \s-1SUBREF\s0 is ghon be invoked when translatin a funky-ass block of text
in characta set \s-1CHARSET. \s0 Da subroutine is ghon be invoked with
the followin arguments:
.Sp
.Vb 5
\&    DATA    \- tha data up in tha given characta set.
\&    CHARSET \- tha upcased characta set name, which may prove useful
\&              if yo ass is rockin tha same SUBREF fo' multiple CHARSETs.
\&    DECODER \- tha decoder itself, if it gotz nuff configuration shiznit
\&              dat yo' handlez function needs.
.Ve
.Sp
For example:
.Sp
.Vb 5
\&    $wd = freshly smoked up MIME::WordDecoder;
\&    $wd\->handlez(\*(AqUS\-ASCII\*(Aq   => "KEEP");
\&    $wd\->handlez(\*(AqISO\-8859\-1\*(Aq => \e&handle_latin1,
\&                 \*(AqISO\-8859\-2\*(Aq => \e&handle_latin1,
\&                 \*(Aq*\*(Aq          => "DIE");
.Ve
.Sp
Notice that, much as wit \f(CW%SIG\fR, tha \s-1SUBREF\s0 can also be taken from
a set of special keywords:
.Sp
.Vb 4
\&   KEEP     Pass data all up in unchanged.
\&   IGNORE   Ignore data up in dis characta set, without warning.
\&   WARN     Ignore data up in dis characta set, wit warning.
\&   DIE      Fatal exception wit "can\*(Aqt handle characta set" message.
.Ve
.Sp
Da subroutine fo' tha special \s-1CHARSET\s0 of 'raw' is used fo' raw
(non-MIME-encoded) text, which is supposed ta be US-ASCII.
Da handlez fo' 'raw' defaults ta whatever was specified fo' '\s-1US\-ASCII\s0'
at tha time of construction.
.Sp
Da subroutine fo' tha special \s-1CHARSET\s0 of '*' is used fo' any
unrecognized characta set.  Da default action fo' '*' is \s-1WARN.\s0
.IP "decode \s-1STRING\s0" 4
.IX Item "decode STRING"
\&\fIInstizzle method.\fR
Decode a \s-1STRING\s0 which might contain MIME-encoded components tha fuck into a
local representation (e.g., \s-1UTF\-8,\s0 etc.).
.IP "unmime \s-1STRING\s0" 4
.IX Item "unmime STRING"
\&\fIFunction, exported.\fR
Decode tha given \s-1STRING\s0 rockin tha \fIdefault()\fR decoder.
See \fIdefault()\fR.
.Sp
Yo ass should consider rockin tha \s-1UTF\-8\s0 decoder instead. Y'all KNOW dat shit, muthafucka!  It decodes
\&\s-1MIME\s0 strings tha fuck into Perlz internal strang format.
.IP "mime_to_perl_string" 4
.IX Item "mime_to_perl_string"
\&\fIFunction, exported.\fR
Decode tha given \s-1STRING\s0 tha fuck into a internal Perl Unicode string.
Yo ass should use dis function up in preference ta all others.
.Sp
Da result of mime_to_perl_strin is likely ta have Perl's
\&\s-1UTF8\s0 flag set.
.SH "SUBCLASSES"
.IX Header "SUBCLASSES"
.IP "MIME::WordDecoder::ISO_8859" 4
.IX Item "MIME::WordDecoder::ISO_8859"
A simple decoder which keeps US-ASCII n' tha 7\-bit characters
of \s-1ISO\-8859\s0 characta sets n' \s-1UTF8,\s0 n' also keeps 8\-bit
charactas from tha indicated characta set.
.Sp
.Vb 2
\&    ### Construct:
\&    $wd = freshly smoked up MIME::WordDecoder::ISO_8859 2;    ### ISO\-8859\-2
\&
\&    ### What ta translate unknown charactas ta (can also use empty):
\&    ### Default is "?".
\&    $wd\->unknown("?");
\&
\&    ### Collapse runz of unknown charactas ta a single unknown()?
\&    ### Default is false.
\&    $wd\->collapse(1);
.Ve
.Sp
Accordin ta \fBhttp://czyborra.com/charsets/iso8859.html\fR
(ca. November 2000):
.Sp
\&\s-1ISO 8859\s0 be a gangbangin' full seriez of 10 (and soon even more) standardized
multilingual single-byte coded (8bit) graphic characta sets for
writin up in alphabetic languages:
.Sp
.Vb 10
\&    1. Latin1 (Westside European)
\&    2. Latin2 (Eastside European)
\&    3. Latin3 (Downtown European)
\&    4. Latin4 (Uptown European)
\&    5. Cyrillic
\&    6 fo' realz. Arabic
\&    7. Greek
\&    8 yo. Hebrew
\&    9. Latin5 (Turkish)
\&   10. Latin6 (Nordic)
.Ve
.Sp
Da \s-1ISO 8859\s0 charsets is not even remotely as complete as tha truly
great Unicode but they done been round n' usable fo' like a while
(first registered Internizzle charsets fo' use wit \s-1MIME\s0) n' have
already offered a major improvement over tha plain 7bit US-ASCII.
.Sp
Charactas 0 ta 127 is always identical wit US-ASCII n' the
positions 128 ta 159 hold some less used control characters: the
so-called C1 set from \s-1ISO 6429.\s0
.IP "MIME::WordDecoder::US_ASCII" 4
.IX Item "MIME::WordDecoder::US_ASCII"
A subclass of tha \s-1ISO\-8859\-1\s0 decoder which discardz 8\-bit characters.
Yo ass is probably betta off rockin \s-1ISO\-8859\-1.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::Tools
.SH "AUTHOR"
.IX Header "AUTHOR"
Eryq (\fIeryq@zeegee.com\fR), ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
Dizzy F. Right back up in yo muthafuckin ass. Skoll (dfs@roaringpenguin.com) http://www.roaringpenguin.com
