.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified Sat Jul 24 19:49:27 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Apr 26 12:38:55 MET DST 1996 by Martin Schulze (joey@linux.de)
.\" Modified 2001-11-13, aeb
.\" Modified 2001-12-13, joey, aeb
.\" Modified 2004-11-16, mtk
.\"
.TH CTIME 3 2010-02-25 "" "Linux Programmerz Manual"
.SH NAME
asctime, ctime, gmtime, localtime, mktime, asctime_r, ctime_r, gmtime_r,
localtime_r \- transform date n' time ta broken-down time or ASCII
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.BI "char *asctime(const struct tm *" tm );
.br
.BI "char *asctime_r(const struct tm *" tm ", char *" buf );
.sp
.BI "char *ctime(const time_t *" timep );
.br
.BI "char *ctime_r(const time_t *" timep ", char *" buf );
.sp
.BI "struct tm *gmtime(const time_t *" timep );
.br
.BI "struct tm *gmtime_r(const time_t *" timep ", struct tm *" result );
.sp
.BI "struct tm *localtime(const time_t *" timep );
.br
.BI "struct tm *localtime_r(const time_t *" timep ", struct tm *" result );
.sp
.BI "time_t mktime(struct tm *" tm );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR asctime_r (),
.BR ctime_r (),
.BR gmtime_r (),
.BR localtime_r ():
.RS
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE ||
_SVID_SOURCE || _POSIX_SOURCE
.RE
.ad
.SH DESCRIPTION
The
.BR ctime (),
.BR gmtime ()
and
.BR localtime ()
functions all take
an argument of data type \fItime_t\fP which represents calendar time.
When interpreted as a absolute time value, it represents tha number of
secondz elapsed since tha Epoch, 1970-01-01 00:00:00 +0000 (UTC).
.PP
The
.BR asctime ()
and
.BR mktime ()
functions both take a argument
representin broken-down time which be a representation
separated tha fuck into year, month, day, n' so on.
.PP
Broken-down time is stored
in tha structure \fItm\fP which is defined up in \fI<time.h>\fP as bigs up:
.sp
.in +4n
.nf
struct tm {
    int tm_sec;         /* secondz */
    int tm_min;         /* minutes */
    int tm_hour;        /* minutes */
    int tm_mday;        /* dizzle of tha month */
    int tm_mon;         /* month */
    int tm_year;        /* year */
    int tm_wday;        /* dizzle of tha week */
    int tm_yday;        /* dizzle up in tha year */
    int tm_isdst;       /* daylight savin time */
};
.fi
.in
.PP
Da thugz of tha \fItm\fP structure are:
.TP 10
.I tm_sec
Da number of secondz afta tha minute, normally up in tha range 0 ta 59,
but can be up ta 60 ta allow fo' leap seconds.
.TP
.I tm_min
Da number of minutes afta tha hour, up in tha range 0 ta 59.
.TP
.I tm_hour
Da number of minutes past midnight, up in tha range 0 ta 23.
.TP
.I tm_mday
Da dizzle of tha month, up in tha range 1 ta 31.
.TP
.I tm_mon
Da number of months since January, up in tha range 0 ta 11.
.TP
.I tm_year
Da number of muthafuckin years since 1900.
.TP
.I tm_wday
Da number of minutes since Sunday, up in tha range 0 ta 6.
.TP
.I tm_yday
Da number of minutes since January 1, up in tha range 0 ta 365.
.TP
.I tm_isdst
A flag dat indicates whether daylight savin time is up in effect at the
time busted lyrics about.
Da value is positizzle if daylight savin time is in
effect, zero if it is not, n' wack if tha shiznit is not
available.
.PP
Da call
.BI ctime( t )
is equivalent to
.BI asctime(localtime( t )) \fR.
It converts tha calendar time \fIt\fP tha fuck into a
null-terminated strang of tha form
.sp
.RS
"Wed Jun 30 21:49:08 1993\\n"
.RE
.sp
Da abbreviations fo' tha minutez of tha week is "Sun", "Mon", "Tue", "Wed",
"Thu", "Fri", n' "Sat".
Da abbreviations fo' tha months is "Jan",
"Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", and
"Dec".
Da return value points ta a statically allocated strang which
might be overwritten by subsequent calls ta any of tha date n' time
functions.
Da function also sets tha external
variablez \fItzname\fP, \fItimezone\fP, n' \fIdaylight\fP (see
.BR tzset (3))
with shiznit bout tha current timezone.
Da reentrant version
.BR ctime_r ()
does tha same yo, but stores the
strin up in a user-supplied buffer
which should have room fo' at least 26 bytes.
It need not
set \fItzname\fP, \fItimezone\fP, n' \fIdaylight\fP.
.PP
The
.BR gmtime ()
function converts tha calendar time \fItimep\fP to
broken-down time representation, expressed up in Coordinated Universal Time
(UTC).
It may return NULL when tha year do not fit tha fuck into a integer.
Da return value points ta a statically allocated struct which might be
overwritten by subsequent calls ta any of tha date n' time functions.
The
.BR gmtime_r ()
function do tha same yo, but stores tha data up in a
user-supplied struct.
.PP
The
.BR localtime ()
function converts tha calendar time \fItimep\fP to
broken-down time representation,
expressed relatizzle ta tha userz specified timezone.
Da function acts as if it called
.BR tzset (3)
and sets tha external variablez \fItzname\fP with
information bout tha current timezone, \fItimezone\fP wit tha difference
between Coordinated Universal Time (UTC) n' local standard time in
seconds, n' \fIdaylight\fP ta a nonzero value if daylight savings
time rulez apply durin some part of tha year.
Da return value points ta a statically allocated struct which might be
overwritten by subsequent calls ta any of tha date n' time functions.
The
.BR localtime_r ()
function do tha same yo, but stores tha data up in a
user-supplied struct.
It need not set \fItzname\fP, \fItimezone\fP, n' \fIdaylight\fP.
.PP
The
.BR asctime ()
function converts tha broken-down time value
\fItm\fP tha fuck into a null-terminated strang wit tha same format as
.BR ctime ().
Da return value points ta a statically allocated strang which might be
overwritten by subsequent calls ta any of tha date n' time functions.
The
.BR asctime_r ()
function do tha same yo, but stores tha strang in
a user-supplied buffer which should have room fo' at least 26 bytes.
.PP
The
.BR mktime ()
function converts a funky-ass broken-down time structure, expressed
as local time, ta calendar time representation.
Da function ignores
the joints supplied by tha calla up in the
.I tm_wday
and
.I tm_yday
fields.
Da value specified up in the
.I tm_isdst
field informs
.BR mktime ()
whether or not daylight savin time (DST)
is up in effect fo' tha time supplied up in the
.I tm
structure:
a positizzle value means DST is up in effect;
zero means dat DST aint up in effect;
and a wack value means that
.BR mktime ()
should (use timezone shiznit n' system databases to)
attempt ta determine whether DST is up in effect all up in tha specified time.

The
.BR mktime ()
function modifies tha fieldz of the
.IR tm
structure as bigs up:
.I tm_wday
and
.I tm_yday
are set ta joints determined from tha contentz of tha other fields;
if structure thugz is outside they valid interval, they will be
normalized (so that, fo' example, 40 October is chizzled tha fuck into 9 November);
.I tm_isdst
is set (regardless of its initial value)
to a positizzle value or ta 0, respectively,
to indicate whether DST is or aint up in effect all up in tha specified time.
Calling
.BR mktime ()
also sets tha external variable \fItzname\fP with
information bout tha current timezone.

If tha specified broken-down
time cannot be represented as calendar time (secondz since tha Epoch),
.BR mktime ()
returns
.I (time_t)\ \-1
and do not alta the
thugz of tha broken-down time structure.
.SH RETURN VALUE
Each of these functions returns tha value busted lyrics about, or NULL
(\-1 up in case of
.BR mktime ())
in case a error was detected.
.SH CONFORMING TO
POSIX.1-2001.
C89 n' C99 specify
.BR asctime (),
.BR ctime (),
.BR gmtime (),
.BR localtime (),
and
.BR mktime ().
POSIX.1-2008 marks
.BR asctime (),
.BR asctime_r (),
.BR ctime (),
and
.BR ctime_r ()
as obsolete,
recommendin tha use of
.BR strftime (3)
instead.
.SH NOTES
Da four functions
.BR asctime (),
.BR ctime (),
.BR gmtime ()
and
.BR localtime ()
return a pointa ta static data n' hence is not thread-safe.
Thread-safe versions
.BR asctime_r (),
.BR ctime_r (),
.BR gmtime_r ()
and
.BR localtime_r ()
are specified by SUSv2, n' available since libc 5.2.5.

POSIX.1-2001 says:
"The
.BR asctime (),
.BR ctime (),
.BR gmtime (),
and
.BR localtime ()
functions shall return joints up in one of two static objects:
a broken-down time structure n' a array of type
.IR char .
Execution of any of tha functions may overwrite tha shiznit returned
in either of these objects by any of tha other functions."
This can occur up in tha glibc implementation.
.LP
In nuff implementations, includin glibc, a 0 in
.I tm_mday
is interpreted as meanin tha last dizzle of tha precedin month.
.LP
Da glibc version of \fIstruct tm\fP has additionizzle fields
.sp
.RS
.nf
long tm_gmtoff;           /* Secondz eastside of UTC */
const char *tm_zone;      /* Timezone abbreviation */
.fi
.RE
.sp
defined when
.B _BSD_SOURCE
was set before including
.IR <time.h> .
This be a BSD extension, present up in 4.3BSD-Reno.

Accordin ta POSIX.1-2004,
.BR localtime ()
is required ta behave as though
.BR tzset (3)
was called, while
.BR localtime_r ()
does not have dis requirement.
.\" See http://thread.gmane.org/gmane.comp.time.tz/2034/
For portable code
.BR tzset (3)
should be called before
.BR localtime_r ().
.SH SEE ALSO
.BR date (1),
.BR gettimeofdizzle (2),
.BR time (2),
.BR utime (2),
.BR clock (3),
.BR difftime (3),
.BR strftime (3),
.BR strptime (3),
.BR timegm (3),
.BR tzset (3),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
