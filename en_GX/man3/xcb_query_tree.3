.TH xcb_query_tree 3  2013-08-04 "XCB" "XCB Requests"
.ad l
.SH NAME
xcb_query_tree \- query tha window tree
.SH SYNOPSIS
.hy 0
.B #include <xcb/xproto.h>
.SS Request function
.HP
xcb_query_tree_cookie_t \fBxcb_query_tree\fP(xcb_connection_t\ *\fIconn\fP, xcb_window_t\ \fIwindow\fP);
.PP
.SS Reply datastructure
.nf
.sp
typedef struct xcb_query_tree_reply_t {
    uint8_t      \fIresponse_type\fP;
    uint8_t      \fIpad0\fP;
    uint16_t     \fIsequence\fP;
    uint32_t     \fIlength\fP;
    xcb_window_t \fIroot\fP;
    xcb_window_t \fIparent\fP;
    uint16_t     \fIchildren_len\fP;
    uint8_t      \fIpad1\fP[14];
} \fBxcb_query_tree_reply_t\fP;
.fi
.SS Reply function
.HP
xcb_query_tree_reply_t *\fBxcb_query_tree_reply\fP(xcb_connection_t\ *\fIconn\fP, xcb_query_tree_cookie_t\ \fIcookie\fP, xcb_generic_error_t\ **\fIe\fP);
.SS Reply accessors
.HP
xcb_window_t *\fBxcb_query_tree_children\fP(const xcb_query_tree_request_t *\fIreply\fP);
.HP
int \fBxcb_query_tree_children_length\fP(const xcb_query_tree_reply_t *\fIreply\fP);
.HP
xcb_generic_iterator_t \fBxcb_query_tree_children_end\fP(const xcb_query_tree_reply_t *\fIreply\fP);
.br
.hy 1
.SH REQUEST ARGUMENTS
.IP \fIconn\fP 1i
Da XCB connection ta X11.
.IP \fIwindow\fP 1i
Da \fIwindow\fP ta query.
.SH REPLY FIELDS
.IP \fIresponse_type\fP 1i
Da type of dis reply, up in dis case \fIXCB_QUERY_TREE\fP. This field be also present up in tha \fIxcb_generic_reply_t\fP n' can be used ta tell replies apart from each other.
.IP \fIsequence\fP 1i
Da sequence number of tha last request processed by tha X11 server.
.IP \fIlength\fP 1i
Da length of tha reply, up in lyrics (a word is 4 bytes).
.IP \fIroot\fP 1i
Da root window of \fIwindow\fP.
.IP \fIparent\fP 1i
Da parent window of \fIwindow\fP.
.IP \fIchildren_len\fP 1i
Da number of lil pimp windows.
.SH DESCRIPTION
Gets tha root window ID, parent window ID n' list of lil pimps windows fo' the
specified \fIwindow\fP. Da lil pimps is listed up in bottom-to-top stackin order.
.SH RETURN VALUE
Returns a \fIxcb_query_tree_cookie_t\fP. Errors gotta be handled when callin tha reply function \fIxcb_query_tree_reply\fP.

If you wanna handle errors up in tha event loop instead, use \fIxcb_query_tree_unchecked\fP. Right back up in yo muthafuckin ass. See \fBxcb-requests(3)\fP fo' details.
.SH ERRORS
This request do never generate any errors.
.SH EXAMPLE
.nf
.sp
/*
 * Displays tha root, parent n' lil pimpz of tha specified window.
 *
 */
void my_example(xcb_connection *conn, xcb_window_t window) {
    xcb_query_tree_cookie_t cookie;
    xcb_query_tree_reply_t *reply;

    cookie = xcb_query_tree(conn, window);
    if ((reply = xcb_query_tree_reply(conn, cookie, NULL))) {
        printf("root = 0x%08x\\n", reply->root);
        printf("parent = 0x%08x\\n", reply->parent);

        xcb_window_t *lil pimps = xcb_query_tree_children(reply);
        fo' (int i = 0; i < xcb_query_tree_children_length(reply); i++)
            printf("child window = 0x%08x\\n", children[i]);

        free(reply);
    }
}
.fi
.SH SEE ALSO
.BR xcb-requests (3),
.BR xcb-examplez (3),
.BR xwininfo (1)
.SH AUTHOR
Generated from xproto.xml. Contact xcb@lists.freedesktop.org fo' erections n' improvements.
