'\" t
.\"     Title: glIsEnabled
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLISENABLED" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glIsEnabled \- test whether a cold-ass lil capabilitizzle is enabled
.SH "C SPECIFICATION"
.HP \w'GLboolean\ glIsEnabled('u
.BI "GLboolean glIsEnabled(GLenum\ " "cap" ");"
.SH "PARAMETERS"
.PP
\fIcap\fR
.RS 4
Specifies a symbolic constant indicatin a GL capability\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglIsEnabled\fR
returns
\fBGL_TRUE\fR
if
\fIcap\fR
is a enabled capabilitizzle n' returns
\fBGL_FALSE\fR
otherwise\&. Initially all capabilitizzles except
\fBGL_DITHER\fR
are disabled;
\fBGL_DITHER\fR
is initially enabled\&.
.PP
Da followin capabilitizzles is accepted for
\fIcap\fR:
.PP
.TS
allbox tab(:);
lB lB.
T{
\fB
                        Constant
                        \fR
T}:T{
\fB
                        See
                        \fR
T}
.T&
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l.
T{
\fBGL_ALPHA_TEST\fR
T}:T{
\fBglAlphaFunc\fR()
T}
T{
\fBGL_AUTO_NORMAL\fR
T}:T{
\fBglEvalCoord\fR()
T}
T{
\fBGL_BLEND\fR
T}:T{
\fBglBlendFunc\fR(), \fBglLogicOp\fR()
T}
T{
\fBGL_CLIP_PLANE\fR\fIi\fR
T}:T{
\fBglClipPlane\fR()
T}
T{
\fBGL_COLOR_ARRAY\fR
T}:T{
\fBglColorPointer\fR()
T}
T{
\fBGL_COLOR_LOGIC_OP\fR
T}:T{
\fBglLogicOp\fR()
T}
T{
\fBGL_COLOR_MATERIAL\fR
T}:T{
\fBglColorMaterial\fR()
T}
T{
\fBGL_COLOR_SUM\fR
T}:T{
\fBglSecondaryColor\fR()
T}
T{
\fBGL_COLOR_TABLE\fR
T}:T{
\fBglColorTable\fR()
T}
T{
\fBGL_CONVOLUTION_1D\fR
T}:T{
\fBglConvolutionFilter1D\fR()
T}
T{
\fBGL_CONVOLUTION_2D\fR
T}:T{
\fBglConvolutionFilter2D\fR()
T}
T{
\fBGL_CULL_FACE\fR
T}:T{
\fBglCullFace\fR()
T}
T{
\fBGL_DEPTH_TEST\fR
T}:T{
\fBglDepthFunc\fR(), \fBglDepthRange\fR()
T}
T{
\fBGL_DITHER\fR
T}:T{
\fBglEnable\fR()
T}
T{
\fBGL_EDGE_FLAG_ARRAY\fR
T}:T{
\fBglEdgeFlagPointer\fR()
T}
T{
\fBGL_FOG\fR
T}:T{
\fBglFog\fR()
T}
T{
\fBGL_FOG_COORD_ARRAY\fR
T}:T{
\fBglFogCoordPointer\fR()
T}
T{
\fBGL_HISTOGRAM\fR
T}:T{
\fBglHistogram\fR()
T}
T{
\fBGL_INDEX_ARRAY\fR
T}:T{
\fBglIndexPointer\fR()
T}
T{
\fBGL_INDEX_LOGIC_OP\fR
T}:T{
\fBglLogicOp\fR()
T}
T{
\fBGL_LIGHT\fR\fIi\fR
T}:T{
\fBglLightModel\fR(), \fBglLight\fR()
T}
T{
\fBGL_LIGHTING\fR
T}:T{
\fBglMaterial\fR(), \fBglLightModel\fR(), \fBglLight\fR()
T}
T{
\fBGL_LINE_SMOOTH\fR
T}:T{
\fBglLineWidth\fR()
T}
T{
\fBGL_LINE_STIPPLE\fR
T}:T{
\fBglLineStipple\fR()
T}
T{
\fBGL_MAP1_COLOR_4\fR
T}:T{
\fBglMap1\fR()
T}
T{
\fBGL_MAP1_INDEX\fR
T}:T{
\fBglMap1\fR()
T}
T{
\fBGL_MAP1_NORMAL\fR
T}:T{
\fBglMap1\fR()
T}
T{
\fBGL_MAP1_TEXTURE_COORD_1\fR
T}:T{
\fBglMap1\fR()
T}
T{
\fBGL_MAP1_TEXTURE_COORD_2\fR
T}:T{
\fBglMap1\fR()
T}
T{
\fBGL_MAP1_TEXTURE_COORD_3\fR
T}:T{
\fBglMap1\fR()
T}
T{
\fBGL_MAP1_TEXTURE_COORD_4\fR
T}:T{
\fBglMap1\fR()
T}
T{
\fBGL_MAP2_COLOR_4\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_INDEX\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_NORMAL\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_TEXTURE_COORD_1\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_TEXTURE_COORD_2\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_TEXTURE_COORD_3\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_TEXTURE_COORD_4\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_VERTEX_3\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MAP2_VERTEX_4\fR
T}:T{
\fBglMap2\fR()
T}
T{
\fBGL_MINMAX\fR
T}:T{
\fBglMinmax\fR()
T}
T{
\fBGL_MULTISAMPLE\fR
T}:T{
\fBglSampleCoverage\fR()
T}
T{
\fBGL_NORMAL_ARRAY\fR
T}:T{
\fBglNormalPointer\fR()
T}
T{
\fBGL_NORMALIZE\fR
T}:T{
\fBglNormal\fR()
T}
T{
\fBGL_POINT_SMOOTH\fR
T}:T{
\fBglPointSize\fR()
T}
T{
\fBGL_POINT_SPRITE\fR
T}:T{
\fBglEnable\fR()
T}
T{
\fBGL_POLYGON_SMOOTH\fR
T}:T{
\fBglPolygonMode\fR()
T}
T{
\fBGL_POLYGON_OFFSET_FILL\fR
T}:T{
\fBglPolygonOffset\fR()
T}
T{
\fBGL_POLYGON_OFFSET_LINE\fR
T}:T{
\fBglPolygonOffset\fR()
T}
T{
\fBGL_POLYGON_OFFSET_POINT\fR
T}:T{
\fBglPolygonOffset\fR()
T}
T{
\fBGL_POLYGON_STIPPLE\fR
T}:T{
\fBglPolygonStipple\fR()
T}
T{
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR
T}:T{
\fBglColorTable\fR()
T}
T{
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR
T}:T{
\fBglColorTable\fR()
T}
T{
\fBGL_RESCALE_NORMAL\fR
T}:T{
\fBglNormal\fR()
T}
T{
\fBGL_SAMPLE_ALPHA_TO_COVERAGE\fR
T}:T{
\fBglSampleCoverage\fR()
T}
T{
\fBGL_SAMPLE_ALPHA_TO_ONE\fR
T}:T{
\fBglSampleCoverage\fR()
T}
T{
\fBGL_SAMPLE_COVERAGE\fR
T}:T{
\fBglSampleCoverage\fR()
T}
T{
\fBGL_SCISSOR_TEST\fR
T}:T{
\fBglScissor\fR()
T}
T{
\fBGL_SECONDARY_COLOR_ARRAY\fR
T}:T{
\fBglSecondaryColorPointer\fR()
T}
T{
\fBGL_SEPARABLE_2D\fR
T}:T{
\fBglSeparableFilter2D\fR()
T}
T{
\fBGL_STENCIL_TEST\fR
T}:T{
\fBglStencilFunc\fR(), \fBglStencilOp\fR()
T}
T{
\fBGL_TEXTURE_1D\fR
T}:T{
\fBglTexImage1D\fR()
T}
T{
\fBGL_TEXTURE_2D\fR
T}:T{
\fBglTexImage2D\fR()
T}
T{
\fBGL_TEXTURE_3D\fR
T}:T{
\fBglTexImage3D\fR()
T}
T{
\fBGL_TEXTURE_COORD_ARRAY\fR
T}:T{
\fBglTexCoordPointer\fR()
T}
T{
\fBGL_TEXTURE_CUBE_MAP\fR
T}:T{
\fBglTexImage2D\fR()
T}
T{
\fBGL_TEXTURE_GEN_Q\fR
T}:T{
\fBglTexGen\fR()
T}
T{
\fBGL_TEXTURE_GEN_R\fR
T}:T{
\fBglTexGen\fR()
T}
T{
\fBGL_TEXTURE_GEN_S\fR
T}:T{
\fBglTexGen\fR()
T}
T{
\fBGL_TEXTURE_GEN_T\fR
T}:T{
\fBglTexGen\fR()
T}
T{
\fBGL_VERTEX_ARRAY\fR
T}:T{
\fBglVertexPointer\fR()
T}
T{
\fBGL_VERTEX_PROGRAM_POINT_SIZE\fR
T}:T{
\fBglEnable\fR()
T}
T{
\fBGL_VERTEX_PROGRAM_TWO_SIDE\fR
T}:T{
\fBglEnable\fR()
T}
.TE
.sp 1
.PP
.SH "NOTES"
.PP
If a error is generated,
\fBglIsEnabled\fR
returns 0\&.
.PP
\fBGL_COLOR_LOGIC_OP\fR,
\fBGL_COLOR_ARRAY\fR,
\fBGL_EDGE_FLAG_ARRAY\fR,
\fBGL_INDEX_ARRAY\fR,
\fBGL_INDEX_LOGIC_OP\fR,
\fBGL_NORMAL_ARRAY\fR,
\fBGL_POLYGON_OFFSET_FILL\fR,
\fBGL_POLYGON_OFFSET_LINE\fR,
\fBGL_POLYGON_OFFSET_POINT\fR,
\fBGL_TEXTURE_COORD_ARRAY\fR, and
\fBGL_VERTEX_ARRAY\fR
are available only if tha GL version is 1\&.1 or pimped outer\&.
.PP
\fBGL_RESCALE_NORMAL\fR, and
\fBGL_TEXTURE_3D\fR
are available only if tha GL version is 1\&.2 or pimped outer\&.
.PP
\fBGL_MULTISAMPLE\fR,
\fBGL_SAMPLE_ALPHA_TO_COVERAGE\fR,
\fBGL_SAMPLE_ALPHA_TO_ONE\fR,
\fBGL_SAMPLE_COVERAGE\fR,
\fBGL_TEXTURE_CUBE_MAP\fR
are available only if tha GL version is 1\&.3 or pimped outer\&.
.PP
\fBGL_FOG_COORD_ARRAY\fR
and
\fBGL_SECONDARY_COLOR_ARRAY\fR
are available only if tha GL version is 1\&.4 or pimped outer\&.
.PP
\fBGL_POINT_SPRITE\fR,
\fBGL_VERTEX_PROGRAM_POINT_SIZE\fR, and
\fBGL_VERTEX_PROGRAM_TWO_SIDE\fR
are available only if tha GL version is 2\&.0 or pimped outer\&.
.PP
\fBGL_COLOR_TABLE\fR,
\fBGL_CONVOLUTION_1D\fR,
\fBGL_CONVOLUTION_2D\fR,
\fBGL_HISTOGRAM\fR,
\fBGL_MINMAX\fR,
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR,
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR, and
\fBGL_SEPARABLE_2D\fR
are available only if
ARB_imaging
is returned when
\fBglGet\fR()
is called with
\fBGL_EXTENSIONS\fR\&.
.PP
For OpenGL versions 1\&.3 n' pimped outer, or when the
ARB_multitexture
extension is supported, tha followin parametas return tha associated value fo' tha actizzle texture unit:
\fBGL_TEXTURE_1D\fR,
\fBGL_TEXTURE_2D\fR,
\fBGL_TEXTURE_3D\fR,
\fBGL_TEXTURE_CUBE_MAP\fR,
\fBGL_TEXTURE_GEN_S\fR,
\fBGL_TEXTURE_GEN_T\fR,
\fBGL_TEXTURE_GEN_R\fR,
\fBGL_TEXTURE_GEN_Q\fR,
\fBGL_TEXTURE_MATRIX\fR, and
\fBGL_TEXTURE_STACK_DEPTH\fR\&. Likewise, tha followin parametas return tha associated value fo' tha actizzle client texture unit:
\fBGL_TEXTURE_COORD_ARRAY\fR,
\fBGL_TEXTURE_COORD_ARRAY_SIZE\fR,
\fBGL_TEXTURE_COORD_ARRAY_STRIDE\fR,
\fBGL_TEXTURE_COORD_ARRAY_TYPE\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIcap\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglIsEnabled\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "SEE ALSO"
.PP
\fBglEnable\fR(),
\fBglEnableClientState\fR(),
\fBglGet\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
