.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Source 3"
.TH TAP::Parser::Source 3 "2013-05-02" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::Source \- a TAP source & meta data bout it
.SH "VERSION"
.IX Header "VERSION"
Version 3.28
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use TAP::Parser::Source;
\&  mah $source = TAP::Parser::Source\->new;
\&  $source\->raw( \e\*(Aqreference ta raw TAP source\*(Aq )
\&         \->config( \e%config )
\&         \->merge( $boolean )
\&         \->switches( \e@switches )
\&         \->test_args( \e@args )
\&         \->assemble_meta;
\&
\&  do { ... } if $source\->meta\->{is_file};
\&  # peep assemble_meta fo' a gangbangin' full list of data available
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1TAP \s0\fIsource\fR is suttin' dat produces a stream of \s-1TAP\s0 fo' tha parser to
consume, like fuckin a executable file, a text file, a archive, a \s-1IO\s0 handle, a
database, etc.  \f(CW\*(C`TAP::Parser::Source\*(C'\fRs encapsulate these \fIraw\fR sources, and
provide some useful meta data bout em.  They is used by
TAP::Parser::SourceHandlezs, which do whatever is required ta produce &
capture a stream of \s-1TAP\s0 from tha \fIraw\fR source, n' package it up in a
TAP::Parser::Iterator fo' tha parser ta consume.
.PP
Unless you freestylin a freshly smoked up TAP::Parser::SourceHandlez, a plugin or
subclassin TAP::Parser, you probably won't need ta use dis module directly.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\& mah $source = TAP::Parser::Source\->new;
.Ve
.PP
Returns a freshly smoked up \f(CW\*(C`TAP::Parser::Source\*(C'\fR object.
.SS "Instizzle Methods"
.IX Subsection "Instizzle Methods"
\fI\f(CI\*(C`raw\*(C'\fI\fR
.IX Subsection "raw"
.PP
.Vb 2
\&  mah $raw = $source\->raw;
\&  $source\->raw( $some_value );
.Ve
.PP
Chainin getter/setta fo' tha raw \s-1TAP\s0 source.  This be a reference, as it may
contain big-ass amountz of data (eg: raw \s-1TAP\s0).
.PP
\fI\f(CI\*(C`meta\*(C'\fI\fR
.IX Subsection "meta"
.PP
.Vb 2
\&  mah $meta = $source\->meta;
\&  $source\->meta({ %some_value });
.Ve
.PP
Chainin getter/setta fo' meta data bout tha source.  This defaults ta an
empty hashref.  See \*(L"assemble_meta\*(R" fo' mo' info.
.PP
\fI\f(CI\*(C`has_meta\*(C'\fI\fR
.IX Subsection "has_meta"
.PP
True if tha source has meta data.
.PP
\fI\f(CI\*(C`config\*(C'\fI\fR
.IX Subsection "config"
.PP
.Vb 2
\&  mah $config = $source\->config;
\&  $source\->config({ %some_value });
.Ve
.PP
Chainin getter/setta fo' tha sourcez configuration, if any has been provided
by tha user n' shit.  How tha fuck itz used is up ta yo thugged-out ass.  This defaults ta a empty hashref.
See \*(L"config_for\*(R" fo' mo' info.
.PP
\fI\f(CI\*(C`merge\*(C'\fI\fR
.IX Subsection "merge"
.PP
.Vb 2
\&  mah $merge = $source\->merge;
\&  $source\->config( $bool );
.Ve
.PP
Chainin getter/setta fo' tha flag dat dictates whether \s-1STDOUT\s0 n' \s-1STDERR\s0
should be merged (where appropriate).  Defaults ta undef.
.PP
\fI\f(CI\*(C`switches\*(C'\fI\fR
.IX Subsection "switches"
.PP
.Vb 2
\&  mah $switches = $source\->switches;
\&  $source\->config([ @switches ]);
.Ve
.PP
Chainin getter/setta fo' tha list of command-line switches dat should be
passed ta tha source (where appropriate).  Defaults ta undef.
.PP
\fI\f(CI\*(C`test_args\*(C'\fI\fR
.IX Subsection "test_args"
.PP
.Vb 2
\&  mah $test_args = $source\->test_args;
\&  $source\->config([ @test_args ]);
.Ve
.PP
Chainin getter/setta fo' tha list of command-line arguments dat should be
passed ta tha source (where appropriate).  Defaults ta undef.
.PP
\fI\f(CI\*(C`assemble_meta\*(C'\fI\fR
.IX Subsection "assemble_meta"
.PP
.Vb 1
\&  mah $meta = $source\->assemble_meta;
.Ve
.PP
Gathers meta data bout tha \*(L"raw\*(R" source, stashes it up in \*(L"meta\*(R" n' returns
it as a hashref.  This is done so dat tha TAP::Parser::SourceHandlezs don't
have ta repeat common checks.  Currently dis includes:
.PP
.Vb 3
\&    is_scalar => $bool,
\&    is_hash   => $bool,
\&    is_array  => $bool,
\&
\&    # fo' scalars:
\&    length => $n
\&    has_newlines => $bool
\&
\&    # only done if tha scalar be lookin like a gangbangin' filename
\&    is_file => $bool,
\&    is_dir  => $bool,
\&    is_symlink => $bool,
\&    file => {
\&        # only done if tha scalar be lookin like a gangbangin' filename
\&        basename => $string, # includin ext
\&        dir      => $string,
\&        ext      => $string,
\&        lc_ext   => $string,
\&        # system checks
\&        exists  => $bool,
\&        stat    => [ ... ], # perldoc \-f stat
\&        empty   => $bool,
\&        size    => $n,
\&        text    => $bool,
\&        binary  => $bool,
\&        read    => $bool,
\&        write   => $bool,
\&        execute => $bool,
\&        setuid  => $bool,
\&        setgid  => $bool,
\&        sticky  => $bool,
\&        is_file => $bool,
\&        is_dir  => $bool,
\&        is_symlink => $bool,
\&        # only done if tha file\*(Aqs a symlink
\&        lstat      => [ ... ], # perldoc \-f lstat
\&        # only done if tha file\*(Aqs a readable text file
\&        shebang => $first_line,
\&    }
\&
\&  # fo' arrays:
\&  size => $n,
.Ve
.PP
\fI\f(CI\*(C`shebang\*(C'\fI\fR
.IX Subsection "shebang"
.PP
Git tha shebang line fo' a script file.
.PP
.Vb 1
\&  mah $shebang = TAP::Parser::Source\->shebang( $some_script );
.Ve
.PP
May be called as a cold-ass lil class method
.PP
\fI\f(CI\*(C`config_for\*(C'\fI\fR
.IX Subsection "config_for"
.PP
.Vb 1
\&  mah $config = $source\->config_for( $class );
.Ve
.PP
Returns \*(L"config\*(R" fo' tha \f(CW$class\fR given. I aint talkin' bout chicken n' gravy biatch.  Class names may be straight-up qualified
or abbreviated, eg:
.PP
.Vb 3
\&  # these is equivalent
\&  $source\->config_for( \*(AqPerl\*(Aq );
\&  $source\->config_for( \*(AqTAP::Parser::SourceHandlez::Perl\*(Aq );
.Ve
.PP
If a gangbangin' straight-up qualified \f(CW$class\fR is given, its abbreviated version is checked first.
.SH "AUTHORS"
.IX Header "AUTHORS"
Steve Purkis.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::IteratorFactory,
TAP::Parser::SourceHandlez
