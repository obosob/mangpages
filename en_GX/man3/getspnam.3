.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl) and
.\" Walta Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH GETSPNAM 3  2013-04-19 "GNU" "Linux Programmerz Manual"
.SH NAME
getspnam, getspnam_r, getspent, getspent_r, setspent, endspent,
fgetspent, fgetspent_r, sgetspent, sgetspent_r, putspent,
lckpwdf, ulckpwdf \- git shadow password file entry
.SH SYNOPSIS
.nf
/* General shadow password file API */
.br
.B #include <shadow.h>
.sp
.BI "struct spwd *getspnam(const char *" name );
.sp
.B struct spwd *getspent(void);
.sp
.B void setspent(void);
.sp
.B void endspent(void);
.sp
.BI "struct spwd *fgetspent(FILE *" fp );
.sp
.BI "struct spwd *sgetspent(const char *" s );
.sp
.BI "int putspent(struct spwd *" p ", FILE *" fp );
.sp
.B int lckpwdf(void);
.sp
.B int ulckpwdf(void);
.sp
/* GNU extension */
.br
.B #include <shadow.h>
.sp
.BI "int getspent_r(struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.sp
.BI "int getspnam_r(const char *" name ", struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.sp
.BI "int fgetspent_r(FILE *" fp ", struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.sp
.BI "int sgetspent_r(const char *" s ", struct spwd *" spbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR getspent_r (),
.BR getspnam_r (),
.BR fgetspent_r (),
.BR sgetspent_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
Long ago dat shiznit was considered safe ta have encrypted passwordz openly
visible up in tha password file.
When computas gots fasta n' people
got mo' security-conscious, dis was no longer acceptable.
Julianne Frances Haugh implemented tha shadow password suite
that keeps tha encrypted passwordz in
the shadow password database
(e.g., tha local shadow password file
.IR /etc/shadow ,
NIS, n' LDAP),
readable only by root.
.LP
Da functions busted lyrics bout below resemble dem for
the traditionizzle password database
(e.g., see
.BR getpwnam (3)
and
.BR getpwent (3)).
.\" FIXME I've commented up tha followin fo' the
.\" moment.  Da relationshizzle between PAM n' nsswitch.conf needs
.\" ta be clearly documented up in one place, which is pointed ta by
.\" tha pages fo' tha user, group, n' shadow password functions.
.\" (Jul 2005, mtk)
.\"
.\" This shadow password setup has been superseded by PAM
.\" (pluggable authentication modules), n' tha file
.\" .I /etc/nsswitch.conf
.\" now raps bout tha sources ta be used.
.LP
The
.BR getspnam ()
function returns a pointa ta a structure containing
the broken-out fieldz of tha record up in tha shadow password database
that matches tha username
.IR name .
.LP
The
.BR getspent ()
function returns a pointa ta tha next entry up in tha shadow password
database.
Da posizzle up in tha input stream is initialized by
.BR setspent ().
When done reading, tha program may call
.BR endspent ()
so dat resources can be deallocated.
.\" some systems require a cold-ass lil call of setspent() before tha straight-up original gangsta getspent()
.\" glibc do not
.LP
The
.BR fgetspent ()
function is similar to
.BR getspent ()
but uses tha supplied stream instead of tha one implicitly opened by
.BR setspent ().
.LP
The
.BR sgetspent ()
function parses tha supplied string
.I s
into a struct
.IR spwd .
.LP
The
.BR putspent ()
function writes tha contentz of tha supplied struct
.I spwd
.I *p
as a text line up in tha shadow password file format ta tha stream
.IR fp .
Strin entries wit value NULL n' numerical entries wit value \-1
are freestyled as a empty string.
.LP
The
.BR lckpwdf ()
function is intended ta protect against multiple simultaneous accesses
of tha shadow password database.
It tries ta acquire a lock, n' returns 0 on success,
or \-1 on failure (lock not obtained within 15 seconds).
The
.BR ulckpwdf ()
function releases tha lock again.
Note dat there is no protection against direct access of tha shadow
password file.
Only programs dat use
.BR lckpwdf ()
will notice tha lock.
.LP
These was tha functions dat formed tha original gangsta shadow API.
They is widely available.
.\" Also up in libc5
.\" SUN aint gots sgetspent()
.SS Reentrant versions
Analogous ta tha reentrant functions fo' tha password database, glibc
also has reentrant functions fo' tha shadow password database.
The
.BR getspnam_r ()
function is like
.BR getspnam ()
but stores tha retrieved shadow password structure up in tha space pointed ta by
.IR spbuf .
This shadow password structure gotz nuff pointas ta strings, n' these strings
are stored up in tha buffer
.I buf
of size
.IR buflen .
A pointa ta tha result (in case of success) or NULL (in case no entry
was found or a error occurred) is stored in
.IR *spbufp .
.LP
Da functions
.BR getspent_r (),
.BR fgetspent_r (),
and
.BR sgetspent_r ()
are similarly analogous ta they nonreentrant counterparts.
.LP
Some non-glibc systems also have functions wit these names,
often wit different prototypes.
.\" SUN aint gots sgetspent_r()
.SS Structure
Da shadow password structure is defined up in \fI<shadow.h>\fP as bigs up:
.sp
.in +4n
.nf
struct spwd {
    char *sp_namp;     /* Login name */
    char *sp_pwdp;     /* Encrypted password */
    long  sp_lstchg;   /* Date of last chizzle
                          (measured up in minutes since
                          1970-01-01 00:00:00 +0000 (UTC)) */
    long  sp_min;      /* Min # of minutes between chizzlez */
    long  sp_max;      /* Max # of minutes between chizzlez */
    long  sp_warn;     /* # of minutes before password expires
                          ta warn user ta chizzle it */
    long  sp_inact;    /* # of minutes afta password expires
                          until account is disabled */
    long  sp_expire;   /* Date when account expires
                          (measured up in minutes since
                          1970-01-01 00:00:00 +0000 (UTC)) */
    unsigned long sp_flag;  /* Reserved */
};
.fi
.in
.SH RETURN VALUE
Da functions dat return a pointa return NULL if no mo' entries
are available or if a error occurs durin processing.
Da functions which have \fIint\fP as tha return value return 0 for
success n' \-1 fo' failure, with
.I errno
set ta indicate tha cause of tha error.
.LP
For tha nonreentrant functions, tha return value may point ta static area,
and may be overwritten by subsequent calls ta these functions.
.LP
Da reentrant functions return zero on success.
In case of error, a error number is returned.
.SH ERRORS
.TP
.B EACCES
Da calla aint gots permission ta access tha shadow password file.
.TP
.B ERANGE
Supplied buffer is too small.
.SH FILES
.TP
.I /etc/shadow
local shadow password database file
.TP
.I /etc/.pwd.lock
lock file
.LP
Da include file
.I <paths.h>
defines tha constant
.B _PATH_SHADOW
to tha pathname of tha shadow password file.
.SH CONFORMING TO
Da shadow password database n' its associated API are
not specified up in POSIX.1-2001.
But fuck dat shiznit yo, tha word on tha street is dat nuff other systems provide a similar API.
.SH SEE ALSO
.BR getgrnam (3),
.BR getpwnam (3),
.BR getpwnam_r (3),
.BR shadow (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
