'\" t
.\"     Title: glColorTable
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLCOLORTABLE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glColorTable \- define a cold-ass lil color lookup table
.SH "C SPECIFICATION"
.HP \w'void\ glColorTable('u
.BI "void glColorTable(GLenum\ " "target" ", GLenum\ " "internalformat" ", GLsizei\ " "width" ", GLenum\ " "format" ", GLenum\ " "type" ", const\ GLvoid\ *\ " "data" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Must be one of
\fBGL_COLOR_TABLE\fR,
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR,
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR,
\fBGL_PROXY_COLOR_TABLE\fR,
\fBGL_PROXY_POST_CONVOLUTION_COLOR_TABLE\fR, or
\fBGL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE\fR\&.
.RE
.PP
\fIinternalformat\fR
.RS 4
Da internal format of tha color table\&. Da allowable joints are
\fBGL_ALPHA\fR,
\fBGL_ALPHA4\fR,
\fBGL_ALPHA8\fR,
\fBGL_ALPHA12\fR,
\fBGL_ALPHA16\fR,
\fBGL_LUMINANCE\fR,
\fBGL_LUMINANCE4\fR,
\fBGL_LUMINANCE8\fR,
\fBGL_LUMINANCE12\fR,
\fBGL_LUMINANCE16\fR,
\fBGL_LUMINANCE_ALPHA\fR,
\fBGL_LUMINANCE4_ALPHA4\fR,
\fBGL_LUMINANCE6_ALPHA2\fR,
\fBGL_LUMINANCE8_ALPHA8\fR,
\fBGL_LUMINANCE12_ALPHA4\fR,
\fBGL_LUMINANCE12_ALPHA12\fR,
\fBGL_LUMINANCE16_ALPHA16\fR,
\fBGL_INTENSITY\fR,
\fBGL_INTENSITY4\fR,
\fBGL_INTENSITY8\fR,
\fBGL_INTENSITY12\fR,
\fBGL_INTENSITY16\fR,
\fBGL_R3_G3_B2\fR,
\fBGL_RGB\fR,
\fBGL_RGB4\fR,
\fBGL_RGB5\fR,
\fBGL_RGB8\fR,
\fBGL_RGB10\fR,
\fBGL_RGB12\fR,
\fBGL_RGB16\fR,
\fBGL_RGBA\fR,
\fBGL_RGBA2\fR,
\fBGL_RGBA4\fR,
\fBGL_RGB5_A1\fR,
\fBGL_RGBA8\fR,
\fBGL_RGB10_A2\fR,
\fBGL_RGBA12\fR, and
\fBGL_RGBA16\fR\&.
.RE
.PP
\fIwidth\fR
.RS 4
Da number of entries up in tha color lookup table specified by
\fIdata\fR\&.
.RE
.PP
\fIformat\fR
.RS 4
Da format of tha pixel data in
\fIdata\fR\&. Da allowable joints are
\fBGL_RED\fR,
\fBGL_GREEN\fR,
\fBGL_BLUE\fR,
\fBGL_ALPHA\fR,
\fBGL_LUMINANCE\fR,
\fBGL_LUMINANCE_ALPHA\fR,
\fBGL_RGB\fR,
\fBGL_BGR\fR,
\fBGL_RGBA\fR, and
\fBGL_BGRA\fR\&.
.RE
.PP
\fItype\fR
.RS 4
Da type of tha pixel data in
\fIdata\fR\&. Da allowable joints are
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_INT\fR,
\fBGL_FLOAT\fR,
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR, and
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR\&.
.RE
.PP
\fIdata\fR
.RS 4
Pointa ta a one\-dimensionizzle array of pixel data dat is processed ta build tha color table\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglColorTable\fR
may be used up in two ways: ta test tha actual size n' color resolution of a lookup table given a particular set of parameters, or ta load tha contentz of a cold-ass lil color lookup table\&. Use tha targets
\fBGL_PROXY_*\fR
for tha straight-up original gangsta case n' tha other targets fo' tha second case\&.
.PP
If a non\-zero named buffer object is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a cold-ass lil color table is specified,
\fIdata\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&.
.PP
If
\fItarget\fR
is
\fBGL_COLOR_TABLE\fR,
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR, or
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR,
\fBglColorTable\fR
buildz a cold-ass lil color lookup table from a array of pixels\&. Da pixel array specified by
\fIwidth\fR,
\fIformat\fR,
\fItype\fR, and
\fIdata\fR
is extracted from memory n' processed just as if
\fBglDrawPixels\fR()
were called yo, but processin stops afta tha final expansion ta RGBA is completed\&.
.PP
Da four scale parametas n' tha four bias parametas dat is defined fo' tha table is then used ta scale n' bias tha R, G, B, n' A componentz of each pixel\&. (Use
\fBglColorTableParameter\fR
to set these scale n' bias parameters\&.)
.PP
Next, tha R, G, B, n' A joints is clamped ta tha range
0 1\&. Each pixel is then converted ta tha internal format specified by
\fIinternalformat\fR\&. This conversion simply maps tha component jointz of tha pixel (R, G, B, n' A) ta tha joints included up in tha internal format (red, green, blue, alpha, luminance, n' intensity)\&. Da mappin be as bigs up:
.PP
.TS
allbox tab(:);
lB cB cB cB cB cB cB.
T{
\fB
                        Internal Format
                        \fR
T}:T{
\fB
                        Red
                        \fR
T}:T{
\fB
                        Green
                        \fR
T}:T{
\fB
                        Blue
                        \fR
T}:T{
\fB
                        Alpha
                        \fR
T}:T{
\fB
                        Luminance
                        \fR
T}:T{
\fB
                        Intensity
                        \fR
T}
.T&
l c c c c c c
l c c c c c c
l c c c c c c
l c c c c c c
l c c c c c c
l c c c c c c.
T{
\fBGL_ALPHA\fR
T}:T{

T}:T{

T}:T{

T}:T{
A
T}:T{

T}:T{

T}
T{
\fBGL_LUMINANCE\fR
T}:T{

T}:T{

T}:T{

T}:T{

T}:T{
R
T}:T{

T}
T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{

T}:T{

T}:T{

T}:T{
A
T}:T{
R
T}:T{

T}
T{
\fBGL_INTENSITY\fR
T}:T{

T}:T{

T}:T{

T}:T{

T}:T{

T}:T{
R
T}
T{
\fBGL_RGB\fR
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{

T}:T{

T}:T{

T}
T{
\fBGL_RGBA\fR
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}:T{

T}:T{

T}
.TE
.sp 1
.PP
Finally, tha red, green, blue, alpha, luminance, and/or intensitizzle componentz of tha resultin pixels is stored up in tha color table\&. They form a one\-dimensionizzle table wit indices up in tha range
0 width \- 1\&.
.PP
If
\fItarget\fR
is
\fBGL_PROXY_*\fR,
\fBglColorTable\fR
recomputes n' stores tha jointz of tha proxy color table\*(Aqs state variables
\fBGL_COLOR_TABLE_FORMAT\fR,
\fBGL_COLOR_TABLE_WIDTH\fR,
\fBGL_COLOR_TABLE_RED_SIZE\fR,
\fBGL_COLOR_TABLE_GREEN_SIZE\fR,
\fBGL_COLOR_TABLE_BLUE_SIZE\fR,
\fBGL_COLOR_TABLE_ALPHA_SIZE\fR,
\fBGL_COLOR_TABLE_LUMINANCE_SIZE\fR, and
\fBGL_COLOR_TABLE_INTENSITY_SIZE\fR\&. There is no effect on tha image or state of any actual color table\&. If tha specified color table is too big-ass ta be supported, then all tha proxy state variablez listed above is set ta zero\&. Otherwise, tha color table could be supported by
\fBglColorTable\fR
usin tha correspondin non\-proxy target, n' tha proxy state variablez is set as if dat target was bein defined\&.
.PP
Da proxy state variablez can be retrieved by calling
\fBglGetColorTableParameter\fR()
with a target of
\fBGL_PROXY_*\fR\&. This allows tha application ta decizzle if a particular
\fBglColorTable\fR
command would succeed, n' ta determine what tha fuck tha resultin color table attributes would be\&.
.PP
If a cold-ass lil color table is enabled, n' its width is non\-zero, then its contents is used ta replace a subset of tha componentz of each RGBA pixel group, based on tha internal format of tha table\&.
.PP
Each pixel crew has color components (R, G, B, A) dat is up in tha range
0\&.0 1\&.0\&. Da color components is rescaled ta tha size of tha color lookup table ta form a index\&. Then a subset of tha components based on tha internal format of tha table is replaced by tha table entry selected by dat index\&. If tha color components n' contentz of tha table is represented as bigs up:
.PP
.TS
allbox tab(:);
cB cB.
T{
\fB
                        Representation
                        \fR
T}:T{
\fB
                        Meaning
                        \fR
T}
.T&
c l
c l
c l
c l
c l
c l
c l
c l
c l
c l.
T{
r
T}:T{
Table index computed from R
T}
T{
g
T}:T{
Table index computed from G
T}
T{
b
T}:T{
Table index computed from B
T}
T{
a
T}:T{
Table index computed from A
T}
T{
L[i]
T}:T{
Luminizzle value at table index i
T}
T{
I[i]
T}:T{
Intensitizzle value at table index i
T}
T{
R[i]
T}:T{
Red value at table index i
T}
T{
G[i]
T}:T{
Chronic value at table index i
T}
T{
B[i]
T}:T{
Blue value at table index i
T}
T{
A[i]
T}:T{
Alpha value at table index i
T}
.TE
.sp 1
.PP
then tha result of color table lookup be as bigs up:
.PP
.TS
allbox tab(:);
lB cB s s s
lB cB cB cB cB.
T{
\fB
                        \fR
T}:T{
\fB
                        Resultin Texture Components
                        \fR
T}
T{
\fB
                        Table Internal Format
                        \fR
T}:T{
\fB
                        R
                        \fR
T}:T{
\fB
                        G
                        \fR
T}:T{
\fB
                        B
                        \fR
T}:T{
\fB
                        A
                        \fR
T}
.T&
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c.
T{
\fBGL_ALPHA\fR
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A[a]
T}
T{
\fBGL_LUMINANCE\fR
T}:T{
L[r]
T}:T{
L[g]
T}:T{
L[b]
T}:T{
At
T}
T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{
L[r]
T}:T{
L[g]
T}:T{
L[b]
T}:T{
A[a]
T}
T{
\fBGL_INTENSITY\fR
T}:T{
I[r]
T}:T{
I[g]
T}:T{
I[b]
T}:T{
I[a]
T}
T{
\fBGL_RGB\fR
T}:T{
R[r]
T}:T{
G[g]
T}:T{
B[b]
T}:T{
A
T}
T{
\fBGL_RGBA\fR
T}:T{
R[r]
T}:T{
G[g]
T}:T{
B[b]
T}:T{
A[a]
T}
.TE
.sp 1
.PP
When
\fBGL_COLOR_TABLE\fR
is enabled, tha flavas resultin from tha pixel map operation (if it is enabled) is mapped by tha color lookup table before bein passed ta tha convolution operation\&. Da flavas resultin from tha convolution operation is modified by tha post convolution color lookup table when
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR
is enabled\&. These modified flavas is then busted ta tha color matrix operation\&. Finally, if
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR
is enabled, tha flavas resultin from tha color matrix operation is mapped by tha post color matrix color lookup table before bein used by tha histogram operation\&.
.PP
.SH "NOTES"
.PP
\fBglColorTable\fR
is present only if
ARB_imaging
is returned when
\fBglGetString\fR()
is called wit a argument of
\fBGL_EXTENSIONS\fR\&.
.PP
If
\fItarget\fR
is set to
\fBGL_COLOR_TABLE\fR,
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR, or
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR, then
\fIwidth\fR
must be a juice of two or a
\fBGL_INVALID_VALUE\fR
error is generated\&.
.PP
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not one of tha allowable joints\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIinternalformat\fR
is not one of tha allowable joints\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIformat\fR
is not one of tha allowable joints\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not one of tha allowable joints\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR
is less than zero\&.
.PP
\fBGL_TABLE_TOO_LARGE\fR
is generated if tha axed color table is too big-ass ta be supported by tha implementation, and
\fItarget\fR
is not a
\fBGL_PROXY_*\fR
target\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha data would be unpacked from tha buffer object such dat tha memory readz required would exceed tha data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a thugged-out datum indicated by
\fItype\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglColorTable\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetColorTableParameter\fR()
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglColorSubTable\fR(),
\fBglColorTableParameter\fR,
\fBglCopyColorTable\fR(),
\fBglCopyColorSubTable\fR(),
\fBglGetColorTable\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
