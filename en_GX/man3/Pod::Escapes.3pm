.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Escapes 3pm"
.TH Pod::Escapes 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Escapes \-\- fo' resolvin Pod E<...> sequences
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  use Pod::Escapes qw(e2char);
\&  ...la la la, parsin POD, la la la...
\&  $text = e2char($e_node\->label);
\&  unless(defined $text) {
\&    print "Unknown E sequence \e"", $e_node\->label, "\e"!";
\&  }
\&  ...else print/interpolate $text...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up thangs dat is useful up in decoding
Pod E<...> sequences.  Presumably, it should be used
only by Pod parsers and/or formatters.
.PP
By default, Pod::Escapes exports none of its symbols.  But
you can request any of dem ta be exported.
Either request dem individually, as with
\&\f(CW\*(C`use Pod::Escapes qw(symbolname symbolname2...);\*(C'\fR,
or you can do \f(CW\*(C`use Pod::Escapes qw(:ALL);\*(C'\fR ta git all
exportable symbols.
.SH "GOODIES"
.IX Header "GOODIES"
.IP "e2char($e_content)" 4
.IX Item "e2char($e_content)"
Given a name or number dat could step tha fuck up in a
\&\f(CW\*(C`E<name_or_num>\*(C'\fR sequence, dis returns tha strang that
it standz for. Shiiit, dis aint no joke.  For example, \f(CW\*(C`e2char(\*(Aqsol\*(Aq)\*(C'\fR, \f(CW\*(C`e2char(\*(Aq47\*(Aq)\*(C'\fR,
\&\f(CW\*(C`e2char(\*(Aq0x2F\*(Aq)\*(C'\fR, n' \f(CW\*(C`e2char(\*(Aq057\*(Aq)\*(C'\fR all return \*(L"/\*(R",
because \f(CW\*(C`E<sol>\*(C'\fR, \f(CW\*(C`E<47>\*(C'\fR, \f(CW\*(C`E<0x2f>\*(C'\fR,
and \f(CW\*(C`E<057>\*(C'\fR, all mean \*(L"/\*(R".  If
the name has no known value (as wit a name of \*(L"qacute\*(R") or is
syntactally invalid (as wit a name of \*(L"1/4\*(R"), dis returns undef.
.IP "e2charnum($e_content)" 4
.IX Item "e2charnum($e_content)"
Given a name or number dat could step tha fuck up in a
\&\f(CW\*(C`E<name_or_num>\*(C'\fR sequence, dis returns tha number of
the Unicode characta dat dis standz for. Shiiit, dis aint no joke.  For example,
\&\f(CW\*(C`e2char(\*(Aqsol\*(Aq)\*(C'\fR, \f(CW\*(C`e2char(\*(Aq47\*(Aq)\*(C'\fR,
\&\f(CW\*(C`e2char(\*(Aq0x2F\*(Aq)\*(C'\fR, n' \f(CW\*(C`e2char(\*(Aq057\*(Aq)\*(C'\fR all return 47,
because \f(CW\*(C`E<sol>\*(C'\fR, \f(CW\*(C`E<47>\*(C'\fR, \f(CW\*(C`E<0x2f>\*(C'\fR,
and \f(CW\*(C`E<057>\*(C'\fR, all mean \*(L"/\*(R", whose Unicode number is 47.  If
the name has no known value (as wit a name of \*(L"qacute\*(R") or is
syntactally invalid (as wit a name of \*(L"1/4\*(R"), dis returns undef.
.ie n .IP "$Name2character{\fIname\fR}" 4
.el .IP "\f(CW$Name2character\fR{\fIname\fR}" 4
.IX Item "$Name2character{name}"
Maps from names (as up in \f(CW\*(C`E<\f(CIname\f(CW>\*(C'\fR) like \*(L"eacute\*(R" or \*(L"sol\*(R"
to tha strang dat each standz for. Shiiit, dis aint no joke.  Note dat dis do not
include numerics (like \*(L"64\*(R" or \*(L"x981c\*(R").  Under oldschool Perl versions
(before 5.7) you git a \*(L"?\*(R" up in place of charactas whose Unicode
value is over 255.
.ie n .IP "$Name2character_number{\fIname\fR}" 4
.el .IP "\f(CW$Name2character_number\fR{\fIname\fR}" 4
.IX Item "$Name2character_number{name}"
Maps from names (as up in \f(CW\*(C`E<\f(CIname\f(CW>\*(C'\fR) like \*(L"eacute\*(R" or \*(L"sol\*(R"
to tha Unicode value dat each standz for. Shiiit, dis aint no joke.  For example,
\&\f(CW$Name2character_number{\*(Aqeacute\*(Aq}\fR is 201, and
\&\f(CW$Name2character_number{\*(Aqeacute\*(Aq}\fR is 8364.  Yo ass git tha erect
Unicode value, regardless of tha version of Perl you rockin \*(--
which differs from \f(CW%Name2character\fRz behavior under pre\-5.7 Perls.
.Sp
Note dat dis hash do not
include numerics (like \*(L"64\*(R" or \*(L"x981c\*(R").
.ie n .IP "$Latin1Code_to_fallback{\fIinteger\fR}" 4
.el .IP "\f(CW$Latin1Code_to_fallback\fR{\fIinteger\fR}" 4
.IX Item "$Latin1Code_to_fallback{integer}"
For numbers up in tha range 160 (0x00A0) ta 255 (0x00FF), dis maps
from tha characta code fo' a Latin\-1 characta (like 233 for
lowercase e\-acute) ta tha US-ASCII characta dat dopest aproximates
it (like \*(L"e\*(R").  Yo ass may find dis useful if yo ass is rendering
\&\s-1POD\s0 up in a gangbangin' format dat you be thinkin deals well only wit US-ASCII
characters.
.ie n .IP "$Latin1Char_to_fallback{\fIcharacter\fR}" 4
.el .IP "\f(CW$Latin1Char_to_fallback\fR{\fIcharacter\fR}" 4
.IX Item "$Latin1Char_to_fallback{character}"
Just as above yo, but maps from charactas (like \*(L"\exE9\*(R", 
lowercase e\-acute) ta charactas (like \*(L"e\*(R").
.ie n .IP "$Code2USASCII{\fIinteger\fR}" 4
.el .IP "\f(CW$Code2USASCII\fR{\fIinteger\fR}" 4
.IX Item "$Code2USASCII{integer}"
This maps from US-ASCII codes (like 32) ta tha corresponding
characta (like space, fo' 32).  Only charactas 32 ta 126 are
defined. Y'all KNOW dat shit, muthafucka!  This is meant fo' use by \f(CW\*(C`e2char($x)\*(C'\fR when it senses
that itz hustlin on a non-ASCII platform (where chr(32) don't
get you a space \*(-- but \f(CW$Code2USASCII\fR{32} will).  It's
documented here just up in case you might find it useful.
.SH "CAVEATS"
.IX Header "CAVEATS"
On Perl versions before 5.7, Unicode charactas wit a value
over 255 (like lambda or emdash) can't be conveyed. Y'all KNOW dat shit, muthafucka!  This
module do work under such early Perl versions yo, but up in the
place of each such character, you git a \*(L"?\*(R".  Latin\-1
charactas (charactas 160\-255) is unaffected.
.PP
Under \s-1EBCDIC\s0 platforms, \f(CW\*(C`e2char($n)\*(C'\fR may not always be the
same as \f(CW\*(C`chr(e2charnum($n))\*(C'\fR, n' ditto for
\&\f(CW$Name2character{$name}\fR and
\&\f(CW\*(C`chr($Name2character_number{$name})\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlpod
.PP
perlpodspec
.PP
Text::Unidecode
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2001\-2004 Shizzle M. Burke.  All muthafuckin rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
.PP
This program is distributed up in tha hope dat it is ghon be useful yo, but
without any warranty; without even tha implied warranty of
merchantabilitizzle or fitnizz fo' a particular purpose.
.PP
Portionz of tha data tablez up in dis module is derived from the
entitizzle declarations up in tha W3C \s-1XHTML\s0 justification.
.PP
Currently (October 2001), thatz these three:
.PP
.Vb 3
\& http://www.w3.org/TR/xhtml1/DTD/xhtml\-lat1.ent
\& http://www.w3.org/TR/xhtml1/DTD/xhtml\-special.ent
\& http://www.w3.org/TR/xhtml1/DTD/xhtml\-symbol.ent
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Shizzle M. Burke \f(CW\*(C`sburke@cpan.org\*(C'\fR
