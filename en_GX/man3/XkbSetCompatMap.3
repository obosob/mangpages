'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbSetCompatMap 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbSetCompatMap \- Modify tha serverz compatibilitizzle map
.SH SYNOPSIS
.HP
.B Bool XkbSetCompatMap
.BI "(\^Display *" "display" "\^,"
.BI "unsigned int " "which" "\^,"
.BI "XkbDescPtr " "xkb" "\^,"
.BI "Bool " "update_actions" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- display
connection ta server
.TP
.I \- which
mask of compat map components ta set
.TP
.I \- xkb
source fo' compat map components
.TP
.I \- update_actions
True => apply ta serverz keyboard map 
.SH DESCRIPTION
.LP
To modify tha serverz compatibilitizzle map, first modify a local copy of tha Xkb 
compatibilitizzle map, then call 
.I XkbSetCompatMap. 
Yo ass may allocate a freshly smoked up compatibilitizzle map fo' dis purpose using
.I XkbAllocCompatMap. 
Yo ass may also bust a cold-ass lil compatibilitizzle map from another server, although you need ta 
adjust tha 
.I device_spec 
field up in tha XkbDescRec accordingly. Note dat symbol interpretations up in a 
compatibilitizzle map (
.I sym_interpret, 
the vector of XkbSymInterpretRec structures) is also allocated rockin dis same 
function.

.I XkbSetCompatMap 
copies compatibilitizzle map shiznit from tha keyboard description up in 
.I xkb 
to tha server specified up in 
.I display
z compatibilitizzle map fo' tha thang specified by tha 
.I device_spec 
field of 
.I xkb. 
Unless you have specifically modified dis field, it is tha default keyboard 
device. 
.I which 
specifies tha compatibilitizzle map components ta be set, n' be a inclusive OR of 
the bits shown up in Table 1.

.TS
c s s
l l l
l l lw(3i).
Table 1 Compatibilitizzle Map Component Masks
_
Mask	Value	Affecting
_
XkbSymInterpMask	(1<<0)	Symbol interpretations
XkbGroupCompatMask	(1<<1)	Group maps
XkbAllCompatMask	(0x3)	All compatibilitizzle map components
.TE

Afta uppimpin its compatibilitizzle map fo' tha specified device, if 
.I update_actions 
is True, tha server applies tha freshly smoked up compatibilitizzle map ta its entire keyboard fo' 
the thang ta generate a freshly smoked up set of key semantics, compatibilitizzle state, n' a 
new core keyboard map. If 
.I update_actions 
is False, tha freshly smoked up compatibilitizzle map aint used ta generate any modifications ta 
the current thang semantics, state, or core keyboard map. One reason fo' not 
applyin tha compatibilitizzle map immediately would be if one server was bein 
configured ta match another on a piecemeal basis; tha map should not be applied 
until every last muthafuckin thang is updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. To force a update at a lata time, use
.I XkbSetCompatMap 
specifyin 
.I which 
as zero n' 
.I update_actions 
as True. 

.I XkbSetCompatMap 
returns True if successful n' False if unsuccessful naaahhmean? Da server may report 
problems it encountas when processin tha request subsequently via protocol 
errors.
.SH "RETURN VALUES"
.TP 15
True
Da 
.I XkbSetCompatMap 
function returns True if successful.
.TP 15
False
Da 
.I XkbSetCompatMap 
function returns False if unsuccessful.
.SH STRUCTURES
.LP
Da complete description of a Xkb keyboard is given by a XkbDescRec. Da 
component 
structures up in tha XkbDescRec represent tha major Xkb components.

.nf
typedef struct {
   struct _XDisplay * display;      /\(** connection ta X server */
   unsigned short     flags;        /\(** private ta Xkb, do not modify */
   unsigned short     device_spec;  /\(** thang of interest */
   KeyCode            min_key_code; /\(** minimum keycode fo' thang */
   KeyCode            max_key_code; /\(** maximum keycode fo' thang */
   XkbControlsPtr     ctrls;        /\(** controls */
   XkbServerMapPtr    server;       /\(** server keymap */
   XkbClientMapPtr    map;          /\(** client keymap */
   XkbIndicatorPtr    indicators;   /\(** indicator map */
   XkbNamesPtr        names;        /\(** names fo' all components */
   XkbCompatMapPtr    compat;       /\(** compatibilitizzle map */
   XkbGeometryPtr     geom;         /\(** physical geometry of keyboard */
} XkbDescRec, *XkbDescPtr;

.fi
Da 
.I display 
field points ta a X display structure. Da 
.I flags field is private ta tha library: modifyin 
.I flags 
may yield unpredictable thangs up in dis biatch. Da 
.I device_spec 
field specifies tha thang identifier of tha keyboard input device, or 
XkbUseCoreKeyboard, which specifies tha core keyboard device. Da 
.I min_key_code
and 
.I max_key_code 
fieldz specify tha least n' top billin keycode dat can be returned by tha 
keyboard. Y'all KNOW dat shit, muthafucka! 

Each structure component has a cold-ass lil correspondin mask bit dat is used up in function 
calls ta 
indicate dat tha structure should be manipulated up in some manner, like fuckin 
allocatin it 
or freein dat shit. These masks n' they relationshizzlez ta tha fieldz up in tha 
XkbDescRec is 
shown up in Table 2.

.TS
c s s
l l l
l l l.
Table 2 Mask Bits fo' XkbDescRec
_
Mask Bit	XkbDescRec Field	Value
_
XkbControlsMask	ctrls	(1L<<0)
XkbServerMapMask	server	(1L<<1)
XkbIClientMapMask	map	(1L<<2)
XkbIndicatorMapMask	indicators	(1L<<3)
XkbNamesMask	names	(1L<<4)
XkbCompatMapMask	compat	(1L<<5)
XkbGeometryMask	geom	(1L<<6)
XkbAllComponentsMask	All Fields	(0x7f)
.TE

Da XkbSymInterpretRec structure specifies a symbol interpretation:
.nf
 
    typedef struct {
        KeySym        sym;         /\(** keysym of interest or NULL */
        unsigned char flags;       /\(** XkbSI_AutoRepeat, XkbSI_LockingKey */
        unsigned char match;       /\(** specifies how tha fuck modz is interpreted */
        unsigned char mods;        /\(** modifier bits, correspond ta eight real modifiers */
        unsigned char virtual_mod; /\(** 1 modifier ta add ta key virtual mod map */
        XkbAnyAction  act;         /\(** action ta bind ta symbol posizzle on key */
    } XkbSymInterpretRec,*XkbSymInterpretPtr;
    
.fi    
.SH "SEE ALSO"
.BR XkbAllocCompatMap (3)
