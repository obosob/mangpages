.\" Copyright (C) 2009, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" all dem pieces remain from a earlier version
.\" Copyright (C) 2008, Nanno Langstraat <nal@ii.nl>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH ENDIAN 3  2010-09-10 "GNU" "Linux Programmerz Manual"
.SH NAME
htobe16, htole16, be16toh, le16toh, htobe32, htole32, be32toh, le32toh,
htobe64, htole64, be64toh, le64toh \-
convert joints between host n' big-/lil-endian byte order
.SH SYNOPSIS
.nf
.BR "#define _BSD_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <endian.h>

.BI "uint16_t htobe16(uint16_t " host_16bits );
.BI "uint16_t htole16(uint16_t " host_16bits );
.BI "uint16_t be16toh(uint16_t " big_endian_16bits );
.BI "uint16_t le16toh(uint16_t " lil_endian_16bits );

.BI "uint32_t htobe32(uint32_t " host_32bits );
.BI "uint32_t htole32(uint32_t " host_32bits );
.BI "uint32_t be32toh(uint32_t " big_endian_32bits );
.BI "uint32_t le32toh(uint32_t " lil_endian_32bits );

.BI "uint64_t htobe64(uint64_t " host_64bits );
.BI "uint64_t htole64(uint64_t " host_64bits );
.BI "uint64_t be64toh(uint64_t " big_endian_64bits );
.BI "uint64_t le64toh(uint64_t " lil_endian_64bits );
.fi
.SH DESCRIPTION
These functions convert tha byte encodin of integer joints from
the byte order dat tha current CPU (the "host") uses,
to n' from lil-endian n' big-endian byte order.

Da number,
.IR nn ,
in tha name of each function indicates tha size of
integer handled by tha function, either 16, 32, or 64 bits.

Da functions wit namez of tha form "htobe\fInn\fP" convert
from host byte order ta big-endian order.

Da functions wit namez of tha form "htole\fInn\fP" convert
from host byte order ta lil-endian order.

Da functions wit namez of tha form "be\fInn\fPtoh" convert
from big-endian order ta host byte order.

Da functions wit namez of tha form "le\fInn\fPtoh" convert
from lil-endian order ta host byte order.
.SH VERSIONS
These functions was added ta glibc up in version 2.9.
.SH CONFORMING TO
These functions is nonstandard.
Similar functions is present on tha BSDs,
where tha required header file is
.I <sys/endian.h>
instead of
.IR <endian.h> .
Unfortunately,
NetBSD, FreeBSD, n' glibc aint followed tha original
OpenBSD namin convention fo' these functions,
whereby the
.I nn
component always appears all up in tha end of tha function name
(thus, fo' example, up in NetBSD, FreeBSD, n' glibc,
the equivalent of OpenBSDs "betoh32" is "be32toh").
.SH NOTES
These functions is similar ta tha older
.BR byteorder (3)
family of functions.
For example,
.BR be32toh ()
is identical to
.BR ntohl () .

Da advantage of the
.BR byteorder (3)
functions is dat they is standard functions available
on all UNIX systems.
On tha other hand, tha fact dat they was designed
for use up in tha context of TCP/IP means that
they lack tha 64-bit n' lil-endian variants busted lyrics bout up in dis page.
.SH EXAMPLE
Da program below display tha thangs up in dis biatch of convertin a integer
from host byte order ta both lil-endian n' big-endian byte order.
Since host byte order is either lil-endian or big-endian,
only one of these conversions gonna git a effect.
When we run dis program on a lil-endian system like fuckin x86-32,
we peep tha following:
.in +4n
.nf

$ \fB./a.out\fP
x.u32 = 0x44332211
htole32(x.u32) = 0x44332211
htobe32(x.u32) = 0x11223344
.fi
.in
.SS Program source
\&
.nf
#include <endian.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    union {
	uint32_t u32;
	uint8_t arr[4];
    } x;

    x.arr[0] = 0x11;	/* Lowest-address byte */
    x.arr[1] = 0x22;
    x.arr[2] = 0x33;
    x.arr[3] = 0x44;	/* Highest-address byte */

    printf("x.u32 = 0x%x\\n", x.u32);
    printf("htole32(x.u32) = 0x%x\\n", htole32(x.u32));
    printf("htobe32(x.u32) = 0x%x\\n", htobe32(x.u32));

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR byteorder (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
