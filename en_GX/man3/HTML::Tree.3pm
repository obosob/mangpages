.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Tree 3"
.TH HTML::Tree 3 "2013-08-14" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Tree \- build n' scan parse\-treez of HTML
.SH "VERSION"
.IX Header "VERSION"
This document raps bout version 5.03 of
HTML::Tree, busted out September 22, 2012
as part of HTML-Tree.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use HTML::TreeBuilder;
\&    mah $tree = HTML::TreeBuilder\->new();
\&    $tree\->parse_file($filename);
\&
\&        # Then do suttin' wit tha tree, rockin HTML::Element
\&        # methodz \-\- fo' example:
\&
\&    $tree\->dump
\&
\&        # Finally:
\&
\&    $tree\->delete;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTML-Tree be a suite of Perl modulez fo' makin parse trees up of
\&\s-1HTML\s0 source.  It consistz of mainly two modules, whose documentation
you should refer to: HTML::TreeBuilder
and HTML::Element.
.PP
HTML::TreeBuilder is tha module dat buildz tha parse trees.  (It uses
HTML::Parser ta do tha work of breakin tha \s-1HTML\s0 up tha fuck into tokens.)
.PP
Da tree dat TreeBuilder buildz fo' you is made up of objectz of the
class HTML::Element.
.PP
If you find dat you do not properly KNOW tha documentation
for HTML::TreeBuilder n' HTML::Element, it may be cuz yo ass is
unfamiliar wit tree-shaped data structures, or wit object-oriented
modulez up in general. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Right back up in yo muthafuckin ass. Shizzle Burke has freestyled some articlez for
\&\fIDa Perl Journal\fR (\f(CW\*(C`www.tpj.com\*(C'\fR) dat seek ta provide dat background.
Da full text of dem articlez is contained up in dis distribution, as:
.IP "HTML::Tree::AboutObjects" 4
.IX Item "HTML::Tree::AboutObjects"
\&\*(L"Userz View of Object-Oriented Modules\*(R" from \s-1TPJ17.\s0
.IP "HTML::Tree::AboutTrees" 4
.IX Item "HTML::Tree::AboutTrees"
\&\*(L"Trees\*(R" from \s-1TPJ18\s0
.IP "HTML::Tree::Scanning" 4
.IX Item "HTML::Tree::Scanning"
\&\*(L"Scannin \s-1HTML\*(R"\s0 from \s-1TPJ19\s0
.PP
Readaz already familiar wit object-oriented modulez n' tree-shaped
data structures should read just tha last article.  Readaz without
that background should read tha first, then tha second, n' then the
third.
.SH "METHODS"
.IX Header "METHODS"
All these methodz simply redirect ta tha correspondin method in
HTML::TreeBuilder n' shit.  It aint nuthin but mo' efficient ta use HTML::TreeBuilder
directly, n' skip loadin HTML::Tree at all.
.SS "new"
.IX Subsection "new"
Redirects ta \*(L"new\*(R" up in HTML::TreeBuilder.
.SS "new_from_file"
.IX Subsection "new_from_file"
Redirects ta \*(L"new_from_file\*(R" up in HTML::TreeBuilder.
.SS "new_from_content"
.IX Subsection "new_from_content"
Redirects ta \*(L"new_from_content\*(R" up in HTML::TreeBuilder.
.SS "new_from_url"
.IX Subsection "new_from_url"
Redirects ta \*(L"new_from_url\*(R" up in HTML::TreeBuilder.
.SH "SUPPORT"
.IX Header "SUPPORT"
Yo ass can find documentation fo' dis module wit tha perldoc command.
.PP
.Vb 1
\&    perldoc HTML::Tree
\&
\&    Yo ass can also look fo' shiznit at:
.Ve
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTML\-Tree>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTML\-Tree>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0z request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTML\-Tree>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTML\-Tree>
.IP "\(bu" 4
Stack Overflow
.Sp
<http://stackoverflow.com/questions/tagged/html\-tree>
.Sp
If you gotz a question bout how tha fuck ta use HTML-Tree, Stack Overflow is
the place ta ask dat shit.  Make shizzle you tag it both \f(CW\*(C`perl\*(C'\fR n' \f(CW\*(C`html\-tree\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::TreeBuilder, HTML::Element, HTML::Tagset,
HTML::Parser, HTML::DOMbo
.PP
Da book \fIPerl & \s-1LWP\s0\fR by Shizzle M. Burke published by
O'Reilly n' Associates, 2002.  \s-1ISBN: 0\-596\-00178\-9\s0
.PP
It has nuff muthafuckin chaptas ta do wit \s-1HTML\s0 processin up in general,
and HTML-Tree specifically.  Therez mo' info at:
.PP
.Vb 1
\&    http://www.oreilly.com/catalog/perllwp/
\&
\&    http://www.amazon.com/exec/obidos/ASIN/0596001789
.Ve
.SH "SOURCE REPOSITORY"
.IX Header "SOURCE REPOSITORY"
HTML-Tree is now maintained rockin Git.  Da main hood repository is
<http://github.com/madsen/HTML\-Tree>.
.PP
Da dopest way ta bust a patch is ta cook up a pull request there.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks ta Gisle Aas, Shizzle Burke n' Andy Lesta fo' they original gangsta work.
.PP
Thanks ta Chicago Perl Mongers (http://chicago.pm.org) fo' their
patches submitted ta HTML::Tree as part of tha Phalanx project
(http://qa.perl.org/phalanx).
.PP
Thanks ta tha followin playas fo' additionizzle patches n' documentation:
Terrence Brannon, Gordon Lack, Chris Madsen n' Ricardo Signes.
.SH "AUTHOR"
.IX Header "AUTHOR"
Current maintainers:
.IP "\(bu" 4
Christopher J. Madsen \f(CW\*(C`<perl\ AT\ cjmweb.net>\*(C'\fR
.IP "\(bu" 4
Jeff Fearn \f(CW\*(C`<jfearn\ AT\ cpan.org>\*(C'\fR
.PP
Original Gangsta HTML-Tree author:
.IP "\(bu" 4
Gisle Aas
.PP
Forma maintainers:
.IP "\(bu" 4
Shizzle M. Burke
.IP "\(bu" 4
Andy Lester
.IP "\(bu" 4
Pete Krawczyk \f(CW\*(C`<petek\ AT\ cpan.org>\*(C'\fR
.PP
Yo ass can follow or contribute ta HTML-Treez pimpment at
<http://github.com/madsen/HTML\-Tree>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1995\-1998 Gisle Aas, 1999\-2004 Shizzle M. Burke,
2005 Andy Lester, 2006 Pete Krawczyk, 2010 Jeff Fearn,
2012 Christopher J. Madsen.
(Except tha articlez contained up in HTML::Tree::AboutObjects,
HTML::Tree::AboutTrees, n' HTML::Tree::Scanning, which is all
copyright 2000 Da Perl Journal.)
.PP
Except fo' dem three \s-1TPJ\s0 articles, tha whole HTML-Tree distribution,
of which dis file be a part, is free software; you can redistribute
it and/or modify it under tha same terms as Perl itself.
.PP
Those three \s-1TPJ\s0 articlez may be distributed under tha same terms as
Perl itself.
.PP
Da programs up in dis library is distributed up in tha hope dat they
will be useful yo, but without any warranty; without even tha implied
warranty of merchantabilitizzle or fitnizz fo' a particular purpose.
