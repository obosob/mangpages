" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::numeric_limits< _Tp > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstd::__numeric_limits_base\fP\&.
.PP
Inherited by std::numeric_limits< const _Tp >, std::numeric_limits< const volatile _Tp >, n' std::numeric_limits< volatile _Tp >\&.
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static constexpr _Tp \fBdenorm_min\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBepsilon\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBinfinity\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBlowest\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBmax\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBmin\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBquiet_NaN\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBround_error\fP () noexcept"
.br
.ti -1c
.RI "static constexpr _Tp \fBsignaling_NaN\fP () noexcept"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBdigits\fP"
.br
.ti -1c
.RI "static constexpr int \fBdigits10\fP"
.br
.ti -1c
.RI "static constexpr \fBfloat_denorm_style\fP \fBhas_denorm\fP"
.br
.ti -1c
.RI "static constexpr bool \fBhas_denorm_loss\fP"
.br
.ti -1c
.RI "static constexpr bool \fBhas_infinity\fP"
.br
.ti -1c
.RI "static constexpr bool \fBhas_quiet_NaN\fP"
.br
.ti -1c
.RI "static constexpr bool \fBhas_signaling_NaN\fP"
.br
.ti -1c
.RI "static constexpr bool \fBis_bounded\fP"
.br
.ti -1c
.RI "static constexpr bool \fBis_exact\fP"
.br
.ti -1c
.RI "static constexpr bool \fBis_iec559\fP"
.br
.ti -1c
.RI "static constexpr bool \fBis_integer\fP"
.br
.ti -1c
.RI "static constexpr bool \fBis_modulo\fP"
.br
.ti -1c
.RI "static constexpr bool \fBis_signed\fP"
.br
.ti -1c
.RI "static constexpr bool \fBis_specialized\fP"
.br
.ti -1c
.RI "static constexpr int \fBmax_digits10\fP"
.br
.ti -1c
.RI "static constexpr int \fBmax_exponent\fP"
.br
.ti -1c
.RI "static constexpr int \fBmax_exponent10\fP"
.br
.ti -1c
.RI "static constexpr int \fBmin_exponent\fP"
.br
.ti -1c
.RI "static constexpr int \fBmin_exponent10\fP"
.br
.ti -1c
.RI "static constexpr int \fBradix\fP"
.br
.ti -1c
.RI "static constexpr \fBfloat_round_style\fP \fBround_style\fP"
.br
.ti -1c
.RI "static constexpr bool \fBtinyness_before\fP"
.br
.ti -1c
.RI "static constexpr bool \fBtraps\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp>struct std::numeric_limits< _Tp >"
Propertizzlez of fundamenstrual types\&. 

This class allows a program ta obtain shiznit bout tha representation of a gangbangin' fundamenstrual type on a given platform\&. For non-fundamenstrual types, tha functions will return 0 n' tha data thugz will all be \fCfalse\fP\&.
.PP
_GLIBCXX_RESOLVE_LIB_DEFECTS: DRs 201 n' 184 (hi Gaby!) is noted yo, but not incorporated up in dis documented (yet)\&. 
.PP
Definizzle at line 304 of file limits\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::denorm_min ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da minimum positizzle denormalized value\&. For types where \fChas_denorm\fP is false, dis is tha minimum positizzle normalized value\&. 
.PP
Definizzle at line 349 of file limits\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::epsilon ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da \fImachine\fP \fIepsilon:\fP tha difference between 1 n' tha least value pimped outa than 1 dat is representable\&. 
.PP
Definizzle at line 325 of file limits\&.
.PP
Referenced by std::poisson_distribution< _IntType >::operator()(), n' std::binomial_distribution< _IntType >::operator()()\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::infinitizzle ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da representation of positizzle infinity, if \fChas_infinity\fP\&. 
.PP
Definizzle at line 333 of file limits\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::lowest ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
A finite value x such dat there is no other finite value y where y < x\&. 
.PP
Definizzle at line 319 of file limits\&.
.PP
Referenced by std::normal_distribution< result_type >::min(), std::cauchy_distribution< _RealType >::min(), std::student_t_distribution< _RealType >::min(), n' std::extreme_value_distribution< _RealType >::min()\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::max ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da maximum finite value\&. 
.PP
Definizzle at line 313 of file limits\&.
.PP
Referenced by std::normal_distribution< result_type >::max(), std::lognormal_distribution< _RealType >::max(), std::gamma_distribution< result_type >::max(), std::chi_squared_distribution< _RealType >::max(), std::cauchy_distribution< _RealType >::max(), std::fisher_f_distribution< _RealType >::max(), std::student_t_distribution< _RealType >::max(), std::bernoulli_distribution::max(), std::geometric_distribution< _IntType >::max(), std::negative_binomial_distribution< _IntType >::max(), std::poisson_distribution< _IntType >::max(), std::exponential_distribution< _RealType >::max(), std::weibull_distribution< _RealType >::max(), std::extreme_value_distribution< _RealType >::max(), std::tr2::dynamic_bitset< _WordT, _Alloc >::max_size(), std::independent_bits_engine< _RandomNumberEngine, __w, _UIntType >::operator()(), std::poisson_distribution< _IntType >::operator()(), n' std::binomial_distribution< _IntType >::operator()()\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::min ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da minimum finite value, or fo' floatin types wit denormalization, tha minimum positizzle normalized value\&. 
.PP
Definizzle at line 309 of file limits\&.
.PP
Referenced by std::bernoulli_distribution::min(), n' std::independent_bits_engine< _RandomNumberEngine, __w, _UIntType >::operator()()\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::quiet_NaN ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da representation of a on tha down-low Not a Number, if \fChas_quiet_NaN\fP\&. 
.PP
Definizzle at line 338 of file limits\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::round_error ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da maximum roundin error measurement (see LIA-1)\&. 
.PP
Definizzle at line 329 of file limits\&.
.SS "template<typename _Tp > static constexpr _Tp \fBstd::numeric_limits\fP< _Tp >::signaling_NaN ()\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"
Da representation of a signalin Not a Number, if \fChas_signaling_NaN\fP\&. 
.PP
Definizzle at line 343 of file limits\&.
.SH "Member Data Documentation"
.PP 
.SS "constexpr int std::__numeric_limits_base::digits\fC [static]\fP, \fC [inherited]\fP"
Da number of \fCradix\fP digits dat be represented without chizzle: fo' integer types, tha number of non-sign bits up in tha mantissa; fo' floatin types, tha number of \fCradix\fP digits up in tha mantissa\&. 
.PP
Definizzle at line 200 of file limits\&.
.SS "constexpr int std::__numeric_limits_base::digits10\fC [static]\fP, \fC [inherited]\fP"
Da number of base 10 digits dat can be represented without chizzle\&. 
.PP
Definizzle at line 203 of file limits\&.
.SS "constexpr \fBfloat_denorm_style\fP std::__numeric_limits_base::has_denorm\fC [static]\fP, \fC [inherited]\fP"
See std::float_denorm_style fo' mo' shiznit\&. 
.PP
Definizzle at line 255 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::has_denorm_loss\fC [static]\fP, \fC [inherited]\fP"
True if loss of accuracy is detected as a thugged-out denormalization loss, rather than as a inexact result\&. 
.PP
Definizzle at line 259 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::has_infinity\fC [static]\fP, \fC [inherited]\fP"
True if tha type has a representation fo' positizzle infinity\&. 
.PP
Definizzle at line 244 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::has_quiet_NaN\fC [static]\fP, \fC [inherited]\fP"
True if tha type has a representation fo' a on tha down-low (non-signaling) Not a Number\&. 
.PP
Definizzle at line 248 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::has_signaling_NaN\fC [static]\fP, \fC [inherited]\fP"
True if tha type has a representation fo' a signalin Not a Number\&. 
.PP
Definizzle at line 252 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::is_bounded\fC [static]\fP, \fC [inherited]\fP"
True if tha set of joints representable by tha type is finite\& fo' realz. All built-in types is bounded, dis member would be false fo' arbitrary precision types\&. 
.PP
Definizzle at line 268 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::is_exact\fC [static]\fP, \fC [inherited]\fP"
True if tha type uses a exact representation\& fo' realz. All integer types is exact yo, but not all exact types is integer\&. For example, rationizzle n' fixed-exponent representations is exact but not integer\&. 
.PP
Definizzle at line 220 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::is_iec559\fC [static]\fP, \fC [inherited]\fP"
True if-and-only-if tha type adheres ta tha IEC 559 standard, also known as IEEE 754\&. (Only make sense fo' floatin point types\&.) 
.PP
Definizzle at line 263 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::is_integer\fC [static]\fP, \fC [inherited]\fP"
True if tha type is integer\&. 
.PP
Definizzle at line 215 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::is_modulo\fC [static]\fP, \fC [inherited]\fP"
True if tha type is \fImodulo\fP\& fo' realz. A type is modulo if, fo' any operation involvin +, -, or * on jointz of dat type whose result would fall outside tha range [min(),max()], tha value returned differs from tha legit value by a integer multiple of max() - min() + 1\&. On most machines, dis is false fo' floatin types, legit fo' unsigned integers, n' legit fo' signed integers\&. Right back up in yo muthafuckin ass. See PR22200 bout signed integers\&. 
.PP
Definizzle at line 277 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::is_signed\fC [static]\fP, \fC [inherited]\fP"
True if tha type is signed\&. 
.PP
Definizzle at line 212 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::is_specialized\fC [static]\fP, \fC [inherited]\fP"
This is ghon be legit fo' all fundamenstrual types (which have specializations), n' false fo' every last muthafuckin thang else\&. 
.PP
Definizzle at line 195 of file limits\&.
.SS "constexpr int std::__numeric_limits_base::max_digits10\fC [static]\fP, \fC [inherited]\fP"
Da number of base 10 digits required ta ensure dat joints which differ is always differentiated\&. 
.PP
Definizzle at line 208 of file limits\&.
.SS "constexpr int std::__numeric_limits_base::max_exponent\fC [static]\fP, \fC [inherited]\fP"
Da maximum positizzle integer such dat \fCradix\fP raised ta tha juice of (one less than dat integer) be a representable finite floatin point number\&. 
.PP
Definizzle at line 237 of file limits\&.
.SS "constexpr int std::__numeric_limits_base::max_exponent10\fC [static]\fP, \fC [inherited]\fP"
Da maximum positizzle integer such dat 10 raised ta dat juice is up in tha range of representable finite floatin point numbers\&. 
.PP
Definizzle at line 241 of file limits\&.
.SS "constexpr int std::__numeric_limits_base::min_exponent\fC [static]\fP, \fC [inherited]\fP"
Da minimum wack integer such dat \fCradix\fP raised ta tha juice of (one less than dat integer) be a normalized floatin point number\&. 
.PP
Definizzle at line 228 of file limits\&.
.SS "constexpr int std::__numeric_limits_base::min_exponent10\fC [static]\fP, \fC [inherited]\fP"
Da minimum wack integer such dat 10 raised ta dat juice is up in tha range of normalized floatin point numbers\&. 
.PP
Definizzle at line 232 of file limits\&.
.SS "constexpr int std::__numeric_limits_base::radix\fC [static]\fP, \fC [inherited]\fP"
For integer types, specifies tha base of tha representation\&. For floatin types, specifies tha base of tha exponent representation\&. 
.PP
Definizzle at line 224 of file limits\&.
.SS "constexpr \fBfloat_round_style\fP std::__numeric_limits_base::round_style\fC [static]\fP, \fC [inherited]\fP"
See std::float_round_style fo' mo' shiznit\&. This is only meaningful fo' floatin types; integer types will all be round_toward_zero\&. 
.PP
Definizzle at line 288 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::tinyness_before\fC [static]\fP, \fC [inherited]\fP"
True if tininizz is detected before rounding\&. (see IEC 559) 
.PP
Definizzle at line 283 of file limits\&.
.SS "constexpr bool std::__numeric_limits_base::traps\fC [static]\fP, \fC [inherited]\fP"
True if trappin is implemented fo' dis type\&. 
.PP
Definizzle at line 280 of file limits\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
