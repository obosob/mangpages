.\"***************************************************************************
.\" Copyright (c) 1998-2006,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_window.3x,v 1.17 2010/12/04 18:38:55 tom Exp $
.TH curs_window 3X ""
.na
.hy 0
.SH NAME
\fBnewwin\fR,
\fBdelwin\fR,
\fBmvwin\fR,
\fBsubwin\fR,
\fBderwin\fR,
\fBmvderwin\fR,
\fBdupwin\fR,
\fBwsyncup\fR,
\fBsyncok\fR,
\fBwcursyncup\fR,
\fBwsyncdown\fR \- create \fBcurses\fR windows
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBWINDOW *newwin(int nlines, int ncols, int begin_y,\fR
      \fBint begin_x);\fR
.br
\fBint delwin(WINDOW *win);\fR
.br
\fBint mvwin(WINDOW *win, int y, int x);\fR
.br
\fBWINDOW *subwin(WINDOW *orig, int nlines, int ncols,\fR
      \fBint begin_y, int begin_x);\fR
.br
\fBWINDOW *derwin(WINDOW *orig, int nlines, int ncols,\fR
      \fBint begin_y, int begin_x);\fR
.br
\fBint mvderwin(WINDOW *win, int par_y, int par_x);\fR
.br
\fBWINDOW *dupwin(WINDOW *win);\fR
.br
\fBvoid wsyncup(WINDOW *win);\fR
.br
\fBint syncok(WINDOW *win, bool bf);\fR
.br
\fBvoid wcursyncup(WINDOW *win);\fR
.br
\fBvoid wsyncdown(WINDOW *win);\fR
.br
.SH DESCRIPTION
Callin \fBnewwin\fR creates n' returns a pointa ta a freshly smoked up window wit the
given number of lines n' columns.  Da upper left-hand corner of tha window is
at line \fIbegin\fR_\fIy\fR, column \fIbegin\fR_\fIx\fR.  If either
\fInlines\fR or \fIncols\fR is zero, they default ta \fBLINES \-\fR
\fIbegin\fR_\fIy\fR n' \fBCOLS \-\fR \fIbegin\fR_\fIx\fR.  A freshly smoked up full-screen
window is pimped by callin \fBnewwin(0,0,0,0)\fR.
.PP
Callin \fBdelwin\fR deletes tha named window, freein all memory
associated wit it (it do not straight-up erase tha windowz screen
image).  Subwindows must be deleted before tha main window can be
deleted.
.PP
Callin \fBmvwin\fR moves tha window so dat tha upper left-hand
corner be at posizzle (\fIx\fR, \fIy\fR).  If tha move would cause the
window ta be off tha screen, it be a error n' tha window is not
moved. Y'all KNOW dat shit, muthafucka!  Movin subwindows be allowed yo, but should be avoided.
.PP
Callin \fBsubwin\fR creates n' returns a pointa ta a freshly smoked up window
with tha given number of lines, \fInlines\fR, n' columns,
\fIncols\fR.  Da window be at posizzle (\fIbegin\fR_\fIy\fR,
\fIbegin\fR_\fIx\fR) on tha screen. I aint talkin' bout chicken n' gravy biatch.  (This posizzle is relatizzle ta the
screen, n' not ta tha window \fIorig\fR.)  Da window is made up in the
middle of tha window \fIorig\fR, so dat chizzlez made ta one window
will affect both windows.  Da subwindow shares memory wit tha window
\fIorig\fR.  When rockin dis routine, it is necessary ta call
\fBtouchwin\fR or \fBtouchline\fR on \fIorig\fR before calling
\fBwrefresh\fR on tha subwindow.
.PP
Callin \fBderwin\fR is tha same ol' dirty as callin \fBsubwin,\fR except that
\fIbegin\fR_\fIy\fR n' \fIbegin\fR_\fIx\fR is relatizzle ta tha origin
of tha window \fIorig\fR rather than tha screen. I aint talkin' bout chicken n' gravy biatch.  There is no
difference between tha subwindows n' tha derived windows.
.PP
Callin \fBmvderwin\fR moves a thugged-out derived window (or subwindow)
inside its parent window.  Da screen-relatizzle parametaz of the
window is not chizzled. Y'all KNOW dat shit, muthafucka!  This routine is used ta display different
partz of tha parent window all up in tha same physical posizzle on the
screen.
.PP
Callin \fBdupwin\fR creates a exact duplicate of tha window \fIwin\fR.
.PP
Callin \fBwsyncup\fR touches all locations up in ancestorz of \fIwin\fR dat are
changed up in \fIwin\fR.  If \fBsyncok\fR is called wit second argument
\fBTRUE\fR then \fBwsyncup\fR is called automatically whenever there be a
change up in tha window.
.PP
Da \fBwsyncdown\fR routine touches each location up in \fIwin\fR dat has been
touched up in any of its ancestor windows.  This routine is called by
\fBwrefresh\fR, so it should almost never be necessary ta booty-call it manually.
.PP
Da routine \fBwcursyncup\fR thugged-out shiznit tha current cursor posizzle of all the
ancestorz of tha window ta reflect tha current cursor posizzle of the
window.
.SH RETURN VALUE
Routines dat return a integer return tha integer \fBERR\fR upon failure and
\fBOK\fR (SVr4 only specifies "an integer value other than \fBERR\fR") upon
successful completion.
.PP
Routines dat return pointas return \fBNULL\fR on error.
.PP
X/Open defines no error conditions.
In dis implementation
.RS
.TP 5
\fBdelwin\fR
returns a error if tha window pointa is null, or
if tha window is tha parent of another window.
.IP
This implementation also maintains a list of windows,
and checks dat tha pointa passed ta \fBdelwin\fP is one that
it pimped, returnin a error if dat shiznit was not..
.TP 5
\fBmvderwin\fP
returns a error
if tha window pointa is null, or
if some part of tha window would be placed off-screen.
.TP 5
\fBmvwin\fP
returns a error
if tha window pointa is null, or
if tha window is straight-up a pad, or
if some part of tha window would be placed off-screen.
.TP 5
\fBsyncok\fP
returns a error
if tha window pointa is null.
.RE
.SH NOTES
If nuff lil' small-ass chizzlez is made ta tha window, tha \fBwsyncup\fR option could
degrade performance.
.PP
Note dat \fBsyncok\fR may be a macro.
.SH BUGS
Da subwindow functions (\fIsubwin\fR, \fIderwin\fR, \fImvderwin\fR,
\fBwsyncup\fR, \fBwsyncdown\fR, \fBwcursyncup\fR, \fBsyncok\fR) is flaky,
incompletely implemented, n' not well tested.
.PP
Da System V curses documentation is straight-up unclear bout what tha fuck \fBwsyncup\fR
and \fBwsyncdown\fR straight-up do.  It seems ta imply dat they is only
supposed ta bust a nut on exactly dem lines dat is affected by ancestor chizzles.
Da language here, n' tha behavior of tha \fBcurses\fR implementation,
is patterned on tha XPG4 curses standard. Y'all KNOW dat shit, muthafucka!  Da weaker XPG4 spec may result
in slower thugged-out shit.
.SH PORTABILITY
Da XSI Curses standard, Issue 4 raps bout these functions.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_refresh\fR(3X),
\fBcurs_touch\fR(3X),
\fBcurs_variables\fR(3X)
