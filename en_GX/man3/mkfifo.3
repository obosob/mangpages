
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" chizzled section from 2 ta 3, aeb, 950919
.\"
.TH MKFIFO 3 2013-01-27 "GNU" "Linux Programmerz Manual"
.SH NAME
mkfifo \- cook up a FIFO special file (a named pipe)
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.sp
.BI "int mkfifo(const char *" pathname ", mode_t " mode );
.fi
.SH DESCRIPTION
.BR mkfifo ()
makes a FIFO special file wit name \fIpathname\fP.
\fImode\fP specifies tha FIFOz permissions.
It be modified by the
processs \fBumask\fP up in tha usual way: tha permissionz of tha pimped
file is \fB(\fP\fImode\fP\fB & ~umask)\fP.
.PP
A FIFO special file is similar ta a pipe, except dat it is pimped
in a gangbangin' finger-lickin' different way.
Instead of bein a anonymous communications
channel, a FIFO special file is entered tha fuck into tha file system by
calling
.BR mkfifo ().
.PP
Once you have pimped a FIFO special file up in dis way, any process can
open it fo' readin or writing, up in tha same way as a ordinary file.
But fuck dat shiznit yo, tha word on tha street is dat it has ta be open at both endz simultaneously before you can
proceed ta do any input or output operations on dat shit.
Openin a FIFO fo' readin normally blocks until some
other process opens tha same ol' dirty FIFO fo' writing, n' vice versa.
See
.BR fifo (7)
for nonblockin handlin of FIFO special files.
.SH RETURN VALUE
On success
.BR mkfifo ()
returns 0.
In tha case of a error, \-1 is returned (in which case, \fIerrno\fP
is set appropriately).
.SH ERRORS
.TP
.B EACCES
One of tha directories up in \fIpathname\fP did not allow search
(execute) permission.
.TP
.B EDQUOT
Da userz quota of disk blocks or inodes on tha file system has been
exhausted.
.TP
.B EEXIST
\fIpathname\fP already exists.
This includes tha case where
.I pathname
is a symbolic link, danglin or not.
.TP
.B ENAMETOOLONG
Either tha total length of \fIpathname\fP is pimped outa than
\fBPATH_MAX\fP, or a individual filename component has a length
greata than \fBNAME_MAX\fP.
In tha GNU system, there is no imposed
limit on overall filename length yo, but some file systems may place
limits on tha length of a cold-ass lil component.
.TP
.B ENOENT
A directory component up in \fIpathname\fP do not exist or be a
danglin symbolic link.
.TP
.B ENOSPC
Da directory or file system has no room fo' tha freshly smoked up file.
.TP
.B ENOTDIR
A component used as a gangbangin' finger-lickin' directory up in \fIpathname\fP is not, up in fact, a
directory.
.TP
.B EROFS
\fIpathname\fP refers ta a read-only file system.
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR mkfifo (1),
.BR close (2),
.BR open (2),
.BR read (2),
.BR stat (2),
.BR umask (2),
.BR write (2),
.BR mkfifoat (3),
.BR fifo (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
