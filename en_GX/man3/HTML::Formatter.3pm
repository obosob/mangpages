.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Formatta 3"
.TH HTML::Formatta 3 "2013-11-07" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Formatta \- Base class fo' HTML formatters
.SH "VERSION"
.IX Header "VERSION"
version 2.11
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use HTML::FormatSomething;
\&  mah $infile  = "whatever.html";
\&  mah $outfile = "whatever.file";
\&  open OUT, ">$outfile"
\&   or take a thugged-out dirtnap "Can\*(Aqt write\-open $outfile: $!\en";
\&
\&  print OUT HTML::FormatSomething\->format_file(
\&    $infile,
\&      \*(Aqoption1\*(Aq => \*(Aqvalue1\*(Aq,
\&      \*(Aqoption2\*(Aq => \*(Aqvalue2\*(Aq,
\&      ...
\&  );
\&  close(OUT);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTML::Formatta be a funky-ass base class fo' classes dat take \s-1HTML\s0 n' format it to
some output format.  When you take a object of such a funky-ass base class n' call
\&\f(CW\*(C`$formatter\-\*(C'\fRformat( \f(CW$tree\fR )> wit a HTML::TreeBuilder (or
HTML::Element) object, they return tha appropriately formatted strang for
the input \s-1HTML.\s0
.PP
\&\s-1HTML\s0 formattas is able ta format a \s-1HTML\s0 syntax tree tha fuck into various printable
formats, n' you can put dat on yo' toast.  Different formattas produce output fo' different output media.
Common fo' all formattas is dat they will return tha formatted output when
the \fIformat()\fR method is called. Y'all KNOW dat shit, muthafucka!  Da \fIformat()\fR method takes a HTML::Element
object (usually tha HTML::TreeBuilder root object) as parameter.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\&    mah $formatta = FormatterClass\->new(
\&        option1 => value1, option2 => value2, ...
\&    );
.Ve
.PP
This creates a freshly smoked up formatta object wit tha given options.
.SS "format_file"
.IX Subsection "format_file"
.SS "format_from_file"
.IX Subsection "format_from_file"
.Vb 4
\&    $strin = FormatterClass\->format_file(
\&        $html_source,
\&        option1 => value1, option2 => value2, ...
\&        );
.Ve
.PP
Return a strang consistin of tha result of rockin tha given class ta format the
given \s-1HTML\s0 file accordin ta tha given (optional) options. Internally it calls
\&\f(CW\*(C`SomeClass\->new( ... )\->format( ... )\*(C'\fR on a freshly smoked up HTML::TreeBuilder object
based on tha given \s-1HTML\s0 file.
.SS "format_string"
.IX Subsection "format_string"
.SS "format_from_string"
.IX Subsection "format_from_string"
.Vb 4
\&    $strin = FormatterClass\->format_string(
\&        $html_source,
\&        option1 => value1, option2 => value2, ...
\&        );
.Ve
.PP
Return a strang consistin of tha result of rockin tha given class ta format the
given \s-1HTML\s0 source accordin ta tha given (optional) options. Internally it
calls \f(CW\*(C`SomeClass\->new( ... )\->format( ... )\*(C'\fR on a freshly smoked up HTML::TreeBuilder
object based on tha given source.
.SS "format"
.IX Subsection "format"
.Vb 1
\&    mah $render_strin = $formatter\->format( $html_tree_object );
.Ve
.PP
This rendaz tha given \s-1HTML\s0 object accordin ta tha options set fo' \f(CW$formatter\fR.
.PP
Afta you've used a particular formatta object ta format a particular \s-1HTML\s0
tree object, you probably should not use either again.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da three specific formatters:\-
.IP "HTML::FormatText" 4
.IX Item "HTML::FormatText"
Format \s-1HTML\s0 tha fuck into plain text
.IP "HTML::FormatPS" 4
.IX Item "HTML::FormatPS"
Format \s-1HTML\s0 tha fuck into postscript
.IP "HTML::FormatRTF" 4
.IX Item "HTML::FormatRTF"
Format \s-1HTML\s0 tha fuck into Rich Text Format
.PP
Also tha \s-1HTML\s0 manipulation libraries used \- HTML::TreeBuilder,
HTML::Element n' HTML::Tree
.SH "INSTALLATION"
.IX Header "INSTALLATION"
See perlmodinstall fo' shiznit n' options on installin Perl modules.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Yo ass can make freshly smoked up bug reports, n' view existin ones, all up in the
web intercourse at <http://rt.cpan.org/Public/Dist/Display.html?Name=HTML\-Format>.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
Da project homepizzy is <https://metacpan.org/release/HTML\-Format>.
.PP
Da sickest fuckin version of dis module be available from tha Comprehensive Perl
Archive Network (\s-1CPAN\s0). Right back up in yo muthafuckin ass. Smoke up <http://www.perl.com/CPAN/> ta find a \s-1CPAN\s0
site near you, or peep <https://metacpan.org/module/HTML::Format/>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Nigel Metheringham <nigelm@cpan.org>
.IP "\(bu" 4
Shizzle M Burke <sburke@cpan.org>
.IP "\(bu" 4
Gisle Aas <gisle@ActiveState.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Nigel Metheringham, 2002\-2005 Shizzle M Burke, 1999\-2002 Gisle Aas.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as tha Perl 5 programmin language system itself.
