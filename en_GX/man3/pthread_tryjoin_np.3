.\" Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_TRYJOIN_NP 3 2010-09-10 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_tryjoin_np, pthread_timedjoin_np \- try ta join wit a
terminated thread
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>

.BI "int pthread_tryjoin_np(pthread_t " thread ", void **" retval );

.BI "int pthread_timedjoin_np(pthread_t " thread ", void **" retval ,
.BI "                         const struct timespec *" abstime );
.fi
.sp
Compile n' link wit \fI\-pthread\fP.
.SH DESCRIPTION
These functions operate up in tha same way as
.BR pthread_join (3),
except fo' tha differences busted lyrics bout on dis page.

The
.BR pthread_tryjoin_np ()
function performs a nonblockin join wit tha thread
.IR thread ,
returnin tha exit statuz of tha thread in
.IR *retval .
If
.I thread
has not yet terminated, then instead of blocking, as is done by
.BR pthread_join (3),
the call returns a error.

The
.BR pthread_timedjoin_np ()
function performs a join-with-timeout.
If
.I thread
has not yet terminated,
then tha call blocks until a maximum time, specified in
.IR abstime .
If tha timeout expires before
.I thread
terminates,
the call returns a error.
The
.I abstime
argument be a structure of tha followin form,
specifyin a absolute time measured since tha Epoch (see
.BR time (2)):

.in +4n
.nf
struct timespec {
    time_t tv_sec;     /* secondz */
    long   tv_nsec;    /* nanosecondz */
};
.fi
.in
.SH RETURN VALUE
On success,
these functions return 0;
on error, they return a error number.
.SH ERRORS
These functions can fail wit tha same errors as
.BR pthread_join (3).
.BR pthread_tryjoin_np ()
can up in addizzle fail wit tha followin error:
.TP
.B EBUSY
.I thread
had not yet terminated all up in tha time of tha call.
.PP
.BR pthread_timedjoin_np ()
can up in addizzle fail wit tha followin error:
.TP
.BR ETIMEDOUT
Da call timed up before
.I thread
terminated.
.PP
.BR pthread_timedjoin_np ()
never returns tha error
.BR EINTR .
.SH VERSIONS
These functions first rocked up in glibc up in version 2.3.3.
.SH CONFORMING TO
These functions is nonstandard GNU extensions;
hence tha suffix "_np" (nonportable) up in tha names.
.SH EXAMPLE
Da followin code waits ta join fo' up ta 5 seconds:

.nf
    struct timespec ts;
    int s;

    ...

    if (clock_gettime(CLOCK_REALTIME, &ts) == \-1) {
	/* Handle error */
    }

    ts.tv_sec += 5;

    s = pthread_timedjoin_np(thread, NULL, &ts);
    if (s != 0) {
        /* Handle error */
    }
.fi
.SH SEE ALSO
.BR clock_gettime (2),
.BR pthread_exit (3),
.BR pthread_join (3),
.BR pthreadz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
