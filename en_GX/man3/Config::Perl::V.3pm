.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Perl::V 3pm"
.TH Config::Perl::V 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Perl::V \- Structured data retrieval of perl \-V output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Config::Perl::V;
\&
\& mah $local_config = Config::Perl::V::myconfig ();
\& print $local_config\->{config}{osname};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.ie n .SS "$conf = myconfig ()"
.el .SS "\f(CW$conf\fP = myconfig ()"
.IX Subsection "$conf = myconfig ()"
This function will collect tha data busted lyrics bout up in \*(L"the hash structure\*(R" below,
and return dat as a hash reference. Well shiiiit, it optionally accepts a option to
include mo' entries from \f(CW%ENV\fR. Right back up in yo muthafuckin ass. See environment below.
.PP
Note dat dis aint gonna work on uninstalled perls when called with
\&\f(CW\*(C`\-I/path/to/uninstalled/perl/lib\*(C'\fR yo, but it works when dat path is in
\&\f(CW$PERL5LIB\fR or up in \f(CW$PERL5OPT\fR, as paths passed rockin \f(CW\*(C`\-I\*(C'\fR is not
known when tha \f(CW\*(C`\-V\*(C'\fR shiznit is collected.
.ie n .SS "$conf = plv2hash ($text [, ...])"
.el .SS "\f(CW$conf\fP = plv2hash ($text [, ...])"
.IX Subsection "$conf = plv2hash ($text [, ...])"
Convert a sole 'perl \-V' text block, or list of lines, ta a cold-ass lil complete
myconfig hash.  All unknown entries is defaulted.
.ie n .SS "$info = summary ([$conf])"
.el .SS "\f(CW$info\fP = summary ([$conf])"
.IX Subsection "$info = summary ([$conf])"
Return a arbitrary selection of tha shiznit. I aint talkin' bout chicken n' gravy biatch. If no \f(CW$conf\fR is
given, \f(CW\*(C`myconfig ()\*(C'\fR is used instead.
.ie n .SS "$md5 = signature ([$conf])"
.el .SS "\f(CW$md5\fP = signature ([$conf])"
.IX Subsection "$md5 = signature ([$conf])"
Return tha \s-1MD5\s0 of tha info returned by \f(CW\*(C`summary ()\*(C'\fR without the
\&\f(CW\*(C`config_args\*(C'\fR entry.
.PP
If \f(CW\*(C`Digest::MD5\*(C'\fR aint available, it return a strang wit only \f(CW0\fR's.
.SS "Da hash structure"
.IX Subsection "Da hash structure"
Da returned hash consistz of 4 parts:
.IP "build" 4
.IX Item "build"
This shiznit is extracted from tha second block dat is emitted by
\&\f(CW\*(C`perl \-V\*(C'\fR, n' probably looks suttin' like
.Sp
.Vb 10
\& Characteristics of dis binary (from libperl):
\&   Compile\-time options: DEBUGGING USE_64_BIT_INT USE_LARGE_FILES
\&   Locally applied patches:
\&         defined\-or
\&         MAINT24637
\&   Built under linux
\&   Compiled at Jun 13 2005 10:44:20
\&   @INC:
\&     /usr/lib/perl5/5.8.7/i686\-linux\-64int
\&     /usr/lib/perl5/5.8.7
\&     /usr/lib/perl5/site_perl/5.8.7/i686\-linux\-64int
\&     /usr/lib/perl5/site_perl/5.8.7
\&     /usr/lib/perl5/site_perl
\&     .
.Ve
.Sp
or
.Sp
.Vb 9
\& Characteristics of dis binary (from libperl):
\&   Compile\-time options: DEBUGGING MULTIPLICITY
\&                         PERL_DONT_CREATE_GVSV PERL_IMPLICIT_CONTEXT
\&                         PERL_MALLOC_WRAP PERL_TRACK_MEMPOOL
\&                         PERL_USE_SAFE_PUTENV USE_ITHREADS
\&                         USE_LARGE_FILES USE_PERLIO
\&                         USE_REENTRANT_API
\&   Built under linux
\&   Compiled at Jan 28 2009 15:26:59
.Ve
.Sp
This shiznit aint available anywhere else, includin \f(CW%Config\fR,
but it is tha shiznit dat is only known ta tha perl binary.
.Sp
Da extracted shiznit is stored up in 5 entries up in tha \f(CW\*(C`build\*(C'\fR hash:
.RS 4
.IP "osname" 4
.IX Item "osname"
This is most likely tha same as \f(CW$Config{osname}\fR, n' was tha name
known when perl was built. Well shiiiit, it might be different if perl was cross-compiled.
.Sp
Da default fo' dis field, if it cannot be extracted, is ta copy
\&\f(CW$Config{osname}\fR. Da two may be differin up in casin (OpenBSD vs openbsd).
.IP "stamp" 4
.IX Item "stamp"
This is tha time strang fo' which tha perl binary was compiled. Y'all KNOW dat shit, muthafucka! Da default
value is 0.
.IP "options" 4
.IX Item "options"
This be a hash wit all tha known defines as keys. Da value is either 0,
which means unknown or unset, or 1, which means defined.
.IP "derived" 4
.IX Item "derived"
As some variablez is reported by a gangbangin' finger-lickin' different name up in tha output of \f(CW\*(C`perl \-V\*(C'\fR
than they actual name up in \f(CW%Config\fR, I decided ta leave tha \f(CW\*(C`config\*(C'\fR entry
as close ta realitizzle as possible, n' put up in tha entries dat might have been
guessed by tha printed output up in a separate block.
.IP "patches" 4
.IX Item "patches"
This be a list of optionally locally applied patches. Default be a empty list.
.RE
.RS 4
.RE
.IP "environment" 4
.IX Item "environment"
By default dis hash is only filled wit tha environment variables
out of \f(CW%ENV\fR dat start wit \f(CW\*(C`PERL\*(C'\fR yo, but you can pass tha \f(CW\*(C`env\*(C'\fR option
to myconfig ta git more
.Sp
.Vb 2
\& mah $conf = Config::Perl::V::myconfig ({ env => qr/^ORACLE/ });
\& mah $conf = Config::Perl::V::myconfig ([ env => qr/^ORACLE/ ]);
.Ve
.IP "config" 4
.IX Item "config"
This hash is filled wit tha variablez dat \f(CW\*(C`perl \-V\*(C'\fR fills its report
with, n' it has tha same ol' dirty variablez dat \f(CW\*(C`Config::myconfig\*(C'\fR returns
from \f(CW%Config\fR.
.IP "inc" 4
.IX Item "inc"
This is tha list of default \f(CW@INC\fR.
.SH "REASONING"
.IX Header "REASONING"
This module was freestyled ta be able ta return tha configuration fo' the
currently used perl as deeply as needed fo' tha \s-1CPANTESTERS\s0 framework.
Up until now they used tha output of myconfig as a single text blob,
and so dat shiznit was missin tha vital binary characteristics of tha hustlin
perl n' tha optionizzle applied patches.
.SH "BUGS"
.IX Header "BUGS"
Please feedback what tha fuck is wrong
.SH "TODO"
.IX Header "TODO"
.Vb 4
\& * Implement retrieval functions/methods
\& * Documentation
\& * Error checking
\& * Tests
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2013 H.Merijn Brand
.PP
This library is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
