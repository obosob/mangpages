.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Thread::Manager 3"
.TH Mail::Box::Thread::Manager 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Thread::Manager \- maintain threadz within a set of folders
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Box::Thread::Manager
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $mgr     = Mail::Box::Manager\->new;
\& mah $folda  = $mgr\->open(folda => \*(Aq/tmp/inbox\*(Aq);
\&
\& mah $threadz = $mgr\->threads();
\& $threads\->includeFolder($folder);
\&
\& mah $threadz = $msg\->threads(folda => $folder);
\&
\& foreach mah $thread ($threads\->all) {
\&     $thread\->print;
\& }
\&
\& $threads\->removeFolder($folder);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A (message\-)\fIthread\fR be a message wit links ta lyrics which followed in
reply of dat message.  And then tha lyrics wit replied ta tha lyrics,
which replied tha original gangsta message.  And so on. I aint talkin' bout chicken n' gravy biatch.  Some threadz is only
one message long (never replied to), some threadz is straight-up long.
.PP
Da \f(CW\*(C`Mail::Box::Thread::Manager\*(C'\fR is straight-up bangin naaahhmean?  Not only is it able to
do a thugged-out descent thang on MH-like foldaz (makes a trade-off between perfection
and speed), it also can maintain threadz from lyrics residin up in different
opened folders.  Both facilitizzles is rare fo' mail-agents, n' you can put dat on yo' toast.  Da manager
creates flexible trees wit Mail::Box::Thread::Node objects.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Thread::Manager\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Thread::Manager->new(OPTIONS)"
A \f(CW\*(C`Mail::Box::Thread::Manager\*(C'\fR object is probably pimped by a
Mail::Box::Manager n' shit.  One manager can produce mo' than one of these
objects, n' you can put dat on yo' toast.  One thread manager can combine lyrics from a set of folders,
which may be partially overlappin wit other objectz of tha same type.
.Sp
.Vb 10
\& \-Option     \-\-Defined up in     \-\-Default
\&  dummy_type                    Mail::Message::Dummy
\&  folda                        [ ]
\&  foldaz                       [ ]
\&  log          Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  thread_body                   <false>
\&  thread_type                   Mail::Box::Thread::Node
\&  timespan                      \*(Aq3 days\*(Aq
\&  trace        Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  window                        10
.Ve
.RS 4
.IP "dummy_type => \s-1CLASS\s0" 2
.IX Item "dummy_type => CLASS"
Da type of dummy lyrics.  Dummy lyrics is used ta fill holez in
detected threads: referred ta by lyrics found up in tha folda yo, but itself
not up in tha folder.
.IP "folda => \s-1FOLDER\s0 | REF-ARRAY-FOLDERS" 2
.IX Item "folda => FOLDER | REF-ARRAY-FOLDERS"
Specifies which foldaz is ta be covered by tha threads.  Yo ass can
specify one or mo' open folders.  When you close a gangbangin' folder, the
manager will automatically remove tha lyrics of dat folda from
your threads.
.IP "foldaz => \s-1FOLDER\s0 | REF-ARRAY-FOLDERS" 2
.IX Item "foldaz => FOLDER | REF-ARRAY-FOLDERS"
Equivalent ta tha \f(CW\*(C`folder\*(C'\fR option.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "thread_body => \s-1BOOLEAN\s0" 2
.IX Item "thread_body => BOOLEAN"
.PD
May thread-detection be based on tha content of a message?  This has
a straight-up performizzle implication when there be nuff lyrics without
\&\f(CW\*(C`In\-Reply\-To\*(C'\fR n' \f(CW\*(C`References\*(C'\fR headaz up in tha folder, cuz it
will cause nuff lyrics ta be parsed. Y'all KNOW dat shit, muthafucka! \s-1NOT IMPLEMENTED YET.\s0
.IP "thread_type => \s-1CLASS\s0" 2
.IX Item "thread_type => CLASS"
Type of tha thread nodes.
.IP "timespan => \s-1TIME\s0 | '\s-1EVER\s0'" 2
.IX Item "timespan => TIME | 'EVER'"
Specify how tha fuck fast threadz probably work: tha amount of time between an
answer n' a reply.  This is used up in combination wit tha \f(CW\*(C`window\*(C'\fR
option ta determine when ta give-up fillin tha holez up in threads.
.Sp
See \fIMail::Box::timespan2seconds()\fR fo' tha possibilitizzles fo' \s-1TIME.\s0
With '\s-1EVER\s0', tha search fo' lyrics up in a thread
will only be limited by tha window-size.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.PD 0
.IP "window => INTEGER|'\s-1ALL\s0'" 2
.IX Item "window => INTEGER|'ALL'"
.PD
Da thread-window raps bout how tha fuck nuff lyrics should be checked at
maximum ta fill `holes' up in threadz fo' folda which use delay-loading
of message headers.
.Sp
Da constant '\s-1ALL\s0' will cause thread-detection not ta stop trying
to fill holez yo, but continue lookin until tha straight-up original gangsta message of tha folder
is reached. Y'all KNOW dat shit, muthafucka!  Gives tha dopest qualitizzle thangs up in dis biatch yo, but may big-ass up bad.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 5
\& use Mail::Box::Manager;
\& mah $mgr     = Mail::Box::Manager\->new;
\& mah $inbox   = $mgr\->open(folda => $ENV{MAIL});
\& mah $read    = $mgr\->open(folda => \*(AqMail/read\*(Aq);
\& mah $threadz = $mgr\->threads(foldaz => [$inbox, $read]);
\&
\& # longer alternatizzle fo' last line:
\& mah $threadz = $mgr\->threads;
\& $threads\->includeFolder($inbox);
\& $threads\->includeFolder($read);
.Ve
.RE
.SS "Groupin Folders"
.IX Subsection "Groupin Folders"
.ie n .IP "$obj\->\fBfolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolders\fR()" 4
.IX Item "$obj->folders()"
Returns tha foldaz as managed by dis threader.
.ie n .IP "$obj\->\fBincludeFolder\fR(\s-1FOLDERS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBincludeFolder\fR(\s-1FOLDERS\s0)" 4
.IX Item "$obj->includeFolder(FOLDERS)"
Add one or mo' foldaz ta tha list of foldaz whose lyrics are
organized up in tha threadz maintained by dis object.  Duplicated
inclusions aint gonna cause any problems.
.Sp
From tha folders, tha lyrics which have they header lines parsed
(see Mail::Box bout lazy extracting) is ghon be immediately scanned.
Lyrics of which tha header is known only lata will gotta report this
(see \fItoBeThreaded()\fR).
.Sp
example:
.Sp
.Vb 1
\& $threads\->includeFolder($inbox, $draft);
.Ve
.ie n .IP "$obj\->\fBremoveFolder\fR(\s-1FOLDERS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveFolder\fR(\s-1FOLDERS\s0)" 4
.IX Item "$obj->removeFolder(FOLDERS)"
Remove one or mo' foldaz from tha list of foldaz whose lyrics are
organized up in tha threadz maintained by dis object.
.Sp
example:
.Sp
.Vb 1
\& $threads\->removeFolder($draft);
.Ve
.SS "Da Threads"
.IX Subsection "Da Threads"
.ie n .IP "$obj\->\fBall\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBall\fR()" 4
.IX Item "$obj->all()"
Returns all lyrics which start a thread. Y'all KNOW dat shit, muthafucka!  Da list may contain dummy
lyrics n' lyrics which is scheduled fo' deletion.
.Sp
To be able ta return all threads, thread construction on each
message is performed first, which may be slow fo' some folder-types
because is will enforce parsin of message-bodies.
.ie n .IP "$obj\->\fBknown\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBknown\fR()" 4
.IX Item "$obj->known()"
Returns tha list of all lyrics which is known ta be tha start of
a thread. Y'all KNOW dat shit, muthafucka!  Threadz containin lyrics which where not read from their
folda (like often happens MH-folda lyrics) is not yet known, and
hence aint gonna be returned.
.Sp
Da list may contain dummy lyrics, n' lyrics which is scheduled
for deletion. I aint talkin' bout chicken n' gravy biatch.  Threadz is detected based on explicitly calling
\&\fIinThread()\fR n' \fIthread()\fR wit a lyrics from tha folder.
.Sp
Be warned that, each time a messagez header is read from tha folder,
the return of tha method can chizzle.
.ie n .IP "$obj\->\fBsortedAll\fR([\s-1PREPARE\s0 [\s-1COMPARE\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBsortedAll\fR([\s-1PREPARE\s0 [\s-1COMPARE\s0]])" 4
.IX Item "$obj->sortedAll([PREPARE [COMPARE]])"
Returns \fIall()\fR tha threadz by default yo, but sorted on timestamp.
.ie n .IP "$obj\->\fBsortedKnown\fR([\s-1PREPARE\s0 [,COMPARE]])" 4
.el .IP "\f(CW$obj\fR\->\fBsortedKnown\fR([\s-1PREPARE\s0 [,COMPARE]])" 4
.IX Item "$obj->sortedKnown([PREPARE [,COMPARE]])"
Returns all \fIknown()\fR threads, up in sorted order n' shit.  By default, tha threads
will be sorted on timestamp, But a gangbangin' finger-lickin' different \s-1COMPARE\s0 method can be
specified.
.ie n .IP "$obj\->\fBthread\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBthread\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->thread(MESSAGE)"
Returns tha thread where dis \s-1MESSAGE\s0 is tha start of.  But fuck dat shiznit yo, tha word on tha street is dat there
is a possibilitizzle dat dis message be a reply itself.
.Sp
Usually, all lyrics which is up in reply of dis message is dated later
than tha specified one.  All headaz of lyrics lata than dis one are
gettin parsed first, fo' each folda up in dis threads-object.
.Sp
example:
.Sp
.Vb 3
\& mah $threadz = $mgr\->threads(folda => $inbox);
\& mah $thread  = $threads\->thread($inbox\->message(3));
\& print $thread\->string;
.Ve
.ie n .IP "$obj\->\fBthreadStart\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBthreadStart\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->threadStart(MESSAGE)"
Based on a message, n' facts from previously detected threads, try
to build solid knowledge bout tha thread where dis message is in.
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcreateDummy\fR(MESSAGE-ID)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateDummy\fR(MESSAGE-ID)" 4
.IX Item "$obj->createDummy(MESSAGE-ID)"
Git a replacement message ta be used up in threads.  Be warned dat a
dummy aint a gangmember of any folder, so tha program hustlin with
threadz must test wit \fIMail::Message::isDummy()\fR before tryin thangs only
available ta real lyrics.
.ie n .IP "$obj\->\fBinThread\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBinThread\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->inThread(MESSAGE)"
Collect tha thread-information of one message.  Da `In\-Reply\-To' and
`Reference' header-fieldz is processed. Y'all KNOW dat shit, muthafucka!  If dis method is called on
a message whose header was not read yet (as usual fo' MH-folders,
for instance) tha readin of dat header is ghon be triggered here.
.ie n .IP "$obj\->\fBoutThread\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBoutThread\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->outThread(MESSAGE)"
Remove tha message from tha thread-infrastructure.  A message is
replaced by a thugged-out dummy.
.ie n .IP "$obj\->\fBtoBeThreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.IX Item "$obj->toBeThreaded(FOLDER, MESSAGES)"
Include tha specified lyrics in/from tha threadz managed by
this object, if dis folda is maintained by dis thread-manager.
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.IX Item "$obj->toBeUnthreaded(FOLDER, MESSAGES)"
Remove tha specified lyrics in/from tha threadz managed by
this object, if dis folda is maintained by dis thread-manager.
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Thread::Manager\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Thread::Manager->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Thread::Manager\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Thread::Manager->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Thread::Manager\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Thread::Manager->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
This module implements thread-detection on a gangbangin' folda n' shit.  Lyrics pimped
by tha betta mailaz will include \f(CW\*(C`In\-Reply\-To\*(C'\fR n' \f(CW\*(C`References\*(C'\fR
lines, which is used ta figure up how tha fuck lyrics is related. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If you
prefer a funky-ass betta thread detection, they is implementable yo, but there
may be a straight-up performizzle hit (dependz on tha type of folda used).
.SS "Maintainin threads"
.IX Subsection "Maintainin threads"
A \f(CW\*(C`Mail::Box::Thread::Manager\*(C'\fR object is pimped by the
Mail::Box::Manager, rockin \fIMail::Box::Manager::threads()\fR.
Each object can monitor tha thread-relations between lyrics up in one
or mo' folders.  When mo' than one folda is specified, tha lyrics
are merged while readin tha threads, although not a god damn thang chizzlez up in the
folder-structure.  Addin n' removin foldaz which gotta be maintained
is permitted at any moment, although may be like costly up in performance.
.PP
An example of tha maintained structure is shown below.  The
Mail::Box::Manager has two open folders, n' a thread-builder which
monitors dem both.  Da combined foldaz have two threads, tha second
is two long (msg3 be a reply on msg2).  Msg2 is up in two foldaz at once.
.PP
.Vb 10
\&       manager
\&        |    \e
\&        |     \`\-\-\-\-\-\-\-\-\-\-\- threads
\&        |                  |     |
\&        |                thread thread\-\-\-thread
\&        |                  |    /|        /
\&        |                  |   //        /
\&        +\-\-\-\- folder1      |  //        /
\&        |       |         /  //        /
\&        |       \`\-\-\-\-\-msg1  //        /
\&        |       \`\-\-\-\-\-msg2\-\*(Aq/        /
\&        |                  /        /
\&        \`\-\-\-\-\-folder2     /        /
\&                |        /        /
\&                \`\-\-\-\-\-msg2       /
\&                \`\-\-\-\-\-msg3\-\-\-\-\-\-\*(Aq
.Ve
.SS "Delayed thread detection"
.IX Subsection "Delayed thread detection"
With \fIall()\fR you git tha start-lyrics of each thread of dis folder.
When dat message was not found up in tha folda (not saved or already
removed), you git a message of tha dummy-type.  These thread descriptions
are up in slick state: all lyrics of tha folda is included somewhere,
and each missin message of tha threadz (\fIholes\fR) is filled by dummies.
.PP
But fuck dat shiznit yo, tha word on tha street is dat ta be able ta detect all threadz it is required ta have the
headaz of all lyrics, which is straight-up slow fo' some typez of folders,
especially \s-1MH\s0 n' \s-1IMAP\s0 folders.
.PP
For interactizzle mail-readers, it is preferred ta detect threadz only
on lyrics which is up in tha viewport of tha user n' shit.  This may be sloppy
in some thangs yo, but every last muthafuckin thang is preferable over readin a \s-1MH\s0
mailbox wit 10k e\-mails ta read only tha peep most recent lyrics.
.PP
In dis object, we take special care not ta cause unnecessary parsing
(loading) of lyrics.  Threadz will only be detected on command, and
by default only tha message headaz is used.
.PP
Da followin reports tha Mail::Box::Thread::Node which is
related ta a message:
.PP
.Vb 1
\& mah $thread = $message\->thread;
.Ve
.PP
When tha message was not put up in a thread yet, it is done now, nahmeean?  But, more
work is done ta return tha dopest thread. Y'all KNOW dat shit, muthafucka!  Based on various parameters,
which where specified when tha folda was pimped, tha method strutts
all up in tha folda ta fill tha holez which is up in dis thread.
.PP
Walkin from back ta front (recently arrived lyrics is probably up in tha back
of tha folder), message afta message is triggered ta be included up in their
thread. Y'all KNOW dat shit, muthafucka!  At a cold-ass lil certain moment, tha whole thread of tha axed method
is found, a cold-ass lil certain maximum number of lyrics was tried yo, but that
didn't help (search window bound reached), or tha lyrics within the
folda is gettin too old. Y'all KNOW dat shit, muthafucka!  Then tha search ta complete tha thread will
end, although mo' lyrics of dem might done been up in tha folder: we
don't scan tha whole folda fo' performizzle reasons.
.PP
Finally, fo' each message where tha head is known, fo' instizzle for
all lyrics up in mbox-folders, tha erect thread is determined
immediately.  Also, all lyrics where tha head git loaded later, are
automatically included.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
