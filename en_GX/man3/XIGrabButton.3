'\" t
.\"     Title: xigrabbutton
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XIGRABBUTTON" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XIGrabButton, XIUngrabButton, XIGrabKeycode, XIUngrabKeycode, XIGrabTouchBegin, XIUngrabTouchBegin \- grab/ungrab buttons or keys
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput2\&.h>
.fi
.sp
.nf
int XIGrabButton( Display *display,
                  int deviceid,
                  int button,
                  Window grab_window,
                  Cursor cursor,
                  int grab_mode,
                  int paired_device_mode,
                  Bool baller_events,
                  XIEventMask *mask,
                  int num_modifiers,
                  XIGrabModifiers *modifiers_inout);
.fi
.sp
.nf
int XIUngrabButton( Display *display,
                    int deviceid,
                    int button,
                    Window grab_window,
                    int num_modifiers,
                    XIGrabModifiers *modifiers);
.fi
.sp
.nf
int XIGrabKeycode( Display *display,
                   int deviceid,
                   int keycode,
                   Window grab_window,
                   int grab_mode,
                   int paired_device_mode,
                   Bool baller_events,
                   XIEventMask *mask,
                   int num_modifiers,
                   XIGrabModifiers *modifiers_inout);
.fi
.sp
.nf
int XIUngrabKeycode( Display *display,
                     int deviceid,
                     int keycode,
                     Window grab_window,
                     int num_modifiers,
                     XIGrabModifiers *modifiers);
.fi
.sp
.nf
int XIGrabTouchBegin( Display *display,
                      int deviceid,
                      Window grab_window,
                      Bool baller_events,
                      XIEventMask *mask,
                      int num_modifiers,
                      XIGrabModifiers *modifiers_inout);
.fi
.sp
.nf
int XIUngrabTouchBegin( Display *display,
                        int deviceid,
                        Window grab_window,
                        int num_modifiers,
                        XIGrabModifiers *modifiers);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
device
       Specifies tha thang dat is ta be grabbed or busted out
.fi
.sp
.nf
button
       Specifies tha thang button dat is ta be grabbed or
       busted out or XIAnyButton\&.
.fi
.sp
.nf
keycode
       Specifies tha keycode dat is ta be grabbed or busted out
       or XIAnyKeycode\&.
.fi
.sp
.nf
num_modifiers
       Number of elements up in modifiers or modifiers_inout\&.
.fi
.sp
.nf
modifiers
       Specifies tha set of latched n' base modifiers or
       XIAnyModifier ta ungrab\&. Da data type is for
       consistency wit tha respectizzle grab request n' the
       status code of tha XIGrabModifiers struct is ignored\&.
.fi
.sp
.nf
modifiers_inout
       Specifies tha set of latched n' base modifiers or
       XIAnyModifier ta grab\&. Returns tha modifiers dat could
       not be grabbed n' they error code\&.
.fi
.sp
.nf
grab_window
       Specifies tha grab window\&.
.fi
.sp
.nf
baller_events
       Specifies a Boolean value dat indicates whether tha are
       ta be reported as usual or reported wit respect ta the
       grab window\&.
.fi
.sp
.nf
mask
       Specifies tha event mask\&.
.fi
.sp
.nf
grab_mode
       Specifies further processin of events from dis device\&.
       Yo ass can pass XIGrabModeSync or XIGrabModeAsync\&.
.fi
.sp
.nf
paired_device_mode
       Specifies further processin of events from tha paired
       masta device\&. Yo ass can pass XIGrabModeSync or
       XIGrabModeAsync\&. If deviceid specifies a gangbangin' floatin slave
       device, dis parameta is ignored\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
XIGrabButton, XIGrabKeycode n' XIGrabTouchBegin establish a passive
grab\&. Da modifier thang fo' a funky-ass button grab is tha paired masta device
if deviceid specifies a masta pointer\&. Otherwise, tha modifier
device is tha thang specified wit deviceid\&. In tha future,
the thang be actively grabbed (as fo' XIGrabDevice, the
last\-grab time is set ta tha time at which tha button or keycode
was pressed n' tha XI_ButtonPress or XI_KeyPress event is
reported if all of tha followin conditions is true:
  * Da thang aint grabbed, n' tha specified button or
    keycode is logically pressed or a funky-ass bust a nut on event occurs when the
    specified modifier keys is logically down on tha modifier device
    n' no other buttons or modifier keys is logically down\&.
  * Either tha grab window be a ancestor of (or is) tha focus
    window, OR tha grab window be a thugged-out descendent of tha focus
    window n' gotz nuff tha device\&.
  * A passive grab on tha same button/modifier combination do
    not exist on any ancestor of grab_window\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da interpretation of tha remainin arguments be as for
XIGrabDevice\&. Da actizzle grab is terminated automatically when
the logical state of tha thang has all buttons or keys
released (independent of tha logical state of tha modifier
keys)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If tha thang be a attached slave device, tha thang is
automatically detached from tha masta thang when tha grab
activates n' reattached ta tha same masta thang when the
grab deactivates\&. If tha masta thang is removed while the
device is floatin as a result of a grab, tha thang remains
floatin once tha grab deactivates\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Note dat tha logical state of a thang (as peeped by client
applications) may lag tha physical state if thang event
processin is frozen\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This request overrides all previous grabs by tha same client on
the same button/modifier or keycode/modifier combinations on the
same window\& fo' realz. A modifierz of XIAnyModifier is equivalent to
issuin tha grab request fo' all possible modifier combinations
(includin tha combination of no modifiers)\&. Well shiiiit, it aint required
that all modifiers specified have currently assigned KeyCodes\&.
A button of XIAnyButton is equivalent ta issuin tha request
for all possible buttons\&. Otherwise, it aint required that
the specified button currently be assigned ta a physical
button\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If some other client has already issued a XIGrabButton or
XIGrabKeycode wit tha same button/modifier or keycode/modifier
combination on tha same window, a BadAccess error thangs up in dis biatch\&. When
usin XIAnyModifier or XIAnyButton , tha request fails
completely, n' a XIBadAccess error thangs up in dis biatch (no grabs are
established) if there be a cold-ass lil conflictin grab fo' any
combination\&. XIGrabButton n' XIGrabKeycode have no effect on an
actizzle grab\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
On success, XIGrabButton, XIGrabKeycode n' XIGrabTouchBegin return 0;
If one or mo' modifier combinations could not be grabbed,
XIGrabButton, XIGrabKeycode n' XIGrabTouchBegin return tha number of
failed combinations n' modifiers_inout gotz nuff tha failed combinations
and they respectizzle error codes\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XIGrabButton, XIGrabKeycode n' XIGrabTouchBegin can generate BadClass,
BadDevice, BadMatch, BadValue, n' BadWindow errors\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XIUngrabButton, XIUngrabKeycode n' XIUngrabTouchBegin release the
passive grab fo' a funky-ass button/modifier, keycode/modifier or touch/modifier
combination on tha specified window if dat shiznit was grabbed by dis client\& fo' realz. A
modifier of XIAnyModifier is equivalent ta issuin tha ungrab request
for all possible modifier combinations, includin the
combination of no modifiers\& fo' realz. A button of XIAnyButton is
equivalent ta issuin tha request fo' all possible buttons\&.
XIUngrabButton n' XIUngrabKeycode have no effect on a active
grab\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XIUngrabButton, XIUngrabKeycode n' XIUngrabTouchBegin can generate
BadDevice, BadMatch, BadValue n' BadWindow errors\&.
.fi
.if n \{\
.RE
.\}
.SH "RETURN VALUE"
.sp
.if n \{\
.RS 4
.\}
.nf
XIGrabButton, XIGrabKeycode n' XIGrabTouchBegin return tha number of
modifier combination dat could not establish a passive grab\&. The
modifiers is returned up in modifiers_inout, along wit tha respective
error fo' dis modifier combination\&. If XIGrabButton, XIGrabKeycode
or XIGrabTouchBegin return zero, passive grabs wit all requested
modifier combinations was established successfully\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid deviceid was specified\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if XIGrabButton specified a thugged-out device
       dat has no buttons, or XIGrabKeycode specified a thugged-out device
       dat has no keys, or XIGrabTouchBegin specified a thugged-out device
       dat aint touch\-capable\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside tha range of joints
       accepted by tha request\&. Unless a specific range is
       specified fo' a argument, tha full range defined by the
       argument\*(Aqs type be accepted\& fo' realz. Any argument defined as a
       set of alternatives can generate dis error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadWindow
       A value fo' a Window argument do not name a thugged-out defined
       Window\&.
.fi
.if n \{\
.RE
.\}
.SH "BUGS"
.sp
.if n \{\
.RS 4
.\}
.nf
Da protocol headaz fo' XI 2\&.0 did not provide
XIGrabModeAsync or XIGrabModeSync\&. Use GrabModeSync and
GrabModeAsync instead, respectively\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XIAllowEvents(3)
.fi
.if n \{\
.RE
.\}
