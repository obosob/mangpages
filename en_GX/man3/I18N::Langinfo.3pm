.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "I18N::Langinfo 3pm"
.TH I18N::Langinfo 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
I18N::Langinfo \- query locale shiznit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use I18N::Langinfo;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fIlanginfo()\fR function queries various locale shiznit dat can be
used ta localize output n' user intercourses.  Da \fIlanginfo()\fR requires
one numeric argument dat identifies tha locale constant ta query:
if no argument is supplied, \f(CW$_\fR is used. Y'all KNOW dat shit, muthafucka!  Da numeric constants
appropriate ta be used as arguments is exportable from I18N::Langinfo.
.PP
Da followin example will import tha \fIlanginfo()\fR function itself and
three constants ta be used as arguments ta \fIlanginfo()\fR: a cold-ass lil constant for
the abbreviated first dizzle of tha week (the numberin starts from
Sundizzle = 1) n' two mo' constants fo' tha affirmatizzle n' negative
answers fo' a yes/no question up in tha current locale.
.PP
.Vb 1
\&    use I18N::Langinfo qw(langinfo ABDAY_1 YESSTR NOSTR);
\&
\&    mah ($abday_1, $yesstr, $nostr) = map { langinfo($_) } (ABDAY_1, YESSTR, NOSTR);
\&
\&    print "$abday_1, biatch? [$yesstr/$nostr] ";
.Ve
.PP
In other lyrics, up in tha \*(L"C\*(R" (or Gangsta) locale tha above will probably
print suttin' like:
.PP
.Vb 1
\&    Sun, biatch? [yes/no]
.Ve
.PP
but under a French locale
.PP
.Vb 1
\&    dim, biatch? [oui/non]
.Ve
.PP
Da probably available constants are
.PP
.Vb 6
\&    ABDAY_1 ABDAY_2 ABDAY_3 ABDAY_4 ABDAY_5 ABDAY_6 ABDAY_7
\&    ABMON_1 ABMON_2 ABMON_3 ABMON_4 ABMON_5 ABMON_6
\&    ABMON_7 ABMON_8 ABMON_9 ABMON_10 ABMON_11 ABMON_12
\&    DAY_1 DAY_2 DAY_3 DAY_4 DAY_5 DAY_6 DAY_7
\&    MON_1 MON_2 MON_3 MON_4 MON_5 MON_6
\&    MON_7 MON_8 MON_9 MON_10 MON_11 MON_12
.Ve
.PP
for abbreviated n' full length minutez of tha week n' monthz of tha year,
.PP
.Vb 1
\&    D_T_FMT D_FMT T_FMT
.Ve
.PP
for tha date-time, date, n' time formats used by tha \fIstrftime()\fR function
(see \s-1POSIX\s0)
.PP
.Vb 1
\&    AM_STR PM_STR T_FMT_AMPM
.Ve
.PP
for tha localez fo' which it make sense ta have ante meridiem n' post
meridiem time formats,
.PP
.Vb 1
\&    CODESET CRNCYSTR RADIXCHAR
.Ve
.PP
for tha characta code set bein used (like fuckin \*(L"\s-1ISO8859\-1\*(R", \s0\*(L"cp850\*(R",
\&\*(L"koi8\-r\*(R", \*(L"sjis\*(R", \*(L"utf8\*(R", etc.), fo' tha currency string, fo' the
radix characta used between tha integer n' tha fractionizzle part
of decimal numbers (yes, dis is redundant wit \fIPOSIX::localeconv()\fR)
.PP
.Vb 1
\&    YESSTR YESEXPR NOSTR NOEXPR
.Ve
.PP
for tha affirmatizzle n' wack responses n' expressions, and
.PP
.Vb 1
\&    ERA ERA_D_FMT ERA_D_T_FMT ERA_T_FMT
.Ve
.PP
for tha Japanese Emperor eras (naturally only defined under Japanese locales).
.PP
See yo' \fIlanginfo\fR\|(3) fo' mo' shiznit bout tha available
constants, n' you can put dat on yo' toast.  (Often dis means havin ta look directly at the
\&\fIlanginfo.h\fR C header file.)
.PP
Note dat unfortunately none of tha above constants is guaranteed
to be available on a particular platform.  To be on tha safe side
you can wrap tha import up in a eval like this:
.PP
.Vb 6
\&    eval {
\&        require I18N::Langinfo;
\&        I18N::Langinfo\->import(qw(langinfo CODESET));
\&        $codeset = langinfo(CODESET()); # note tha ()
\&    };
\&    if (!$@) { ... failed ... }
.Ve
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
By default only tha \f(CW\*(C`langinfo()\*(C'\fR function is exported.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perllocale, \*(L"localeconv\*(R" up in \s-1POSIX\s0, \*(L"setlocale\*(R" up in \s-1POSIX\s0, \fInl_langinfo\fR\|(3).
.PP
Da \fIlanginfo()\fR is just a wrapper fo' tha C \fInl_langinfo()\fR intercourse.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jarkko Hietaniemi, <jhi@hut.fi>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2001 by Jarkko Hietaniemi
.PP
This library is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
