.\"***************************************************************************
.\" Copyright (c) 1999-2011,2013 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_terminfo.3x,v 1.37 2013/01/12 18:11:40 tom Exp $
.TH curs_terminfo 3X ""
.ds n 5
.na
.hy 0
.SH NAME
\fBdel_curterm\fR,
\fBmvcur\fR,
\fBputp\fR,
\fBrestartterm\fR,
\fBset_curterm\fR,
\fBsetterm\fR,
\fBsetupterm\fR,
\fBtigetflag\fR,
\fBtigetnum\fR,
\fBtigetstr\fR,
\fBtiparm\fR,
\fBtparm\fR,
\fBtputs\fR,
\fBvid_attr\fR,
\fBvid_puts\fR,
\fBvidattr\fR,
\fBvidputs\fR \- \fBcurses\fR intercourses ta terminfo database
.ad
.hy
.SH SYNOPSIS
.nf
\fB#include <curses.h>\fR
.br
\fB#include <term.h>\fR
.PP
\fBint setupterm(char *\fR\fIterm\fR\fB, int \fR\fIfildes\fR\fB, int *\fR\fIerrret\fR\fB);\fR
.br
\fBint setterm(char *\fR\fIterm\fR\fB);\fR
.br
\fBTERMINAL *set_curterm(TERMINAL *\fR\fInterm\fR\fB);\fR
.br
\fBint del_curterm(TERMINAL *\fR\fIoterm\fR\fB);\fR
.br
\fBint restartterm(char *\fR\fIterm\fR\fB, int \fR\fIfildes\fR\fB, int *\fR\fIerrret\fR\fB);\fR
.br
\fBchar *tparm(char *\fR\fIstr\fR\fB, ...);\fR
.br
\fBint tputs(const char *\fR\fIstr\fR\fB, int \fR\fIaffcnt\fR\fB, int (*\fR\fIputc\fR\fB)(int));\fR
.br
\fBint putp(const char *\fR\fIstr\fR\fB);\fR
.br
\fBint vidputs(chtype \fR\fIattrs\fR\fB, int (*\fR\fIputc\fR\fB)(int));\fR
.br
\fBint vidattr(chtype \fR\fIattrs\fR\fB);\fR
.br
\fBint vid_puts(attr_t \fR\fIattrs\fR\fB, short \fR\fIpair\fR\fB, void *\fR\fIopts\fR\fB, int (*\fR\fIputc\fR\fB)(int));\fR
.br
\fBint vid_attr(attr_t \fR\fIattrs\fR\fB, short \fR\fIpair\fR\fB, void *\fR\fIopts\fR\fB);\fR
.br
\fBint mvcur(int \fR\fIoldrow\fR\fB, int \fR\fIoldcol\fR\fB, int \fR\fInewrow\fR, int \fR\fInewcol\fR\fB);\fR
.br
\fBint tigetflag(char *\fR\fIcapname\fR\fB);\fR
.br
\fBint tigetnum(char *\fR\fIcapname\fR\fB);\fR
.br
\fBchar *tigetstr(char *\fR\fIcapname\fR\fB);\fR
.br
\fBchar *tiparm(const char *\fR\fIstr\fR\fB, ...);\fR
.br
.fi
.SH DESCRIPTION
These low-level routines must be called by programs dat gotta deal
directly wit tha \fBterminfo\fR database ta handle certain terminal
capabilities, like fuckin programmin function keys.  For all other
functionality, \fBcurses\fR routines is mo' suitable n' they use is
recommended.
.PP
Initially, \fBsetupterm\fR should be called. Y'all KNOW dat shit, muthafucka!  Note that
\fBsetupterm\fR be automatically called by \fBinitscr\fR and
\fBnewterm\fR.  This defines tha set of terminal-dependent variables
[listed up in \fBterminfo\fR(\*n)].
Da \fBterminfo\fR variables
\fBlines\fR n' \fBcolumns\fR is initialized by \fBsetupterm\fR as
bigs up:
.RS
.PP
If \fBuse_env(FALSE)\fR has been called, joints for
\fBlines\fR n' \fBcolumns\fR specified up in \fBterminfo\fR is used.
.PP
Otherwise, if tha environment variablez \fBLINES\fR n' \fBCOLUMNS\fR
exist, they joints is used. Y'all KNOW dat shit, muthafucka!  If these environment variablez do not
exist n' tha program is hustlin up in a window, tha current window size
is used. Y'all KNOW dat shit, muthafucka!  Otherwise, if tha environment variablez do not exist, the
values fo' \fBlines\fR n' \fBcolumns\fR specified up in the
\fBterminfo\fR database is used.
.RE
.PP
Da header filez \fBcurses.h\fR n' \fBterm.h\fR should be included (in this
order) ta git tha definitions fo' these strings, numbers, n' flags.
Parameterized strings should be passed all up in \fBtparm\fR ta instantiate em. 
All \fBterminfo\fR strings [includin tha output of \fBtparm\fR] should be printed
with \fBtputs\fR or \fBputp\fR.  Call tha \fBreset_shell_mode\fR ta restore the
tty modes before exitin [see \fBcurs_kernel\fR(3X)].  Programs which use
cursor addressin should output \fBenter_ca_mode\fR upon startup n' should
output \fBexit_ca_mode\fR before exiting.  Programs desirin shell escapes
should call
.PP
\fBreset_shell_mode\fR n' output \fBexit_ca_mode\fR before tha shell
is called n' should output \fBenter_ca_mode\fR n' call
\fBreset_prog_mode\fR afta returnin from tha shell.
.PP
Da \fBsetupterm\fR routine readz up in tha \fBterminfo\fR database,
initializin tha \fBterminfo\fR structures yo, but do not set up the
output virtualization structures used by \fBcurses\fR.  Da terminal
type is tha characta strang \fIterm\fR; if \fIterm\fR is null, the
environment variable \fBTERM\fR is used.
All output is ta file descriptor \fBfildes\fR which is initialized fo' output.
If \fIerrret\fR aint null,
then \fBsetupterm\fR returns \fBOK\fR or
\fBERR\fR n' stores a status value up in tha integer pointed ta by
\fIerrret\fR.
A return value of \fBOK\fR combined wit statuz of \fB1\fR up in \fIerrret\fR
is normal.
If \fBERR\fR is returned, examine \fIerrret\fR:
.RS
.TP 5
.B 1
means dat tha terminal is hardcopy, cannot be used fo' curses applications.
.TP 5
.B 0
means dat tha terminal could not be found,
or dat it aint nuthin but a generic type,
havin too lil shiznit fo' curses applications ta run.
.TP 5
.B \-1
means dat tha \fBterminfo\fR database could not be found.
.RE
.PP
If \fIerrret\fR is
null, \fBsetupterm\fR prints a error message upon findin a error
and exits, n' you can put dat on yo' toast.  Thus, tha simplest call is:
.sp
      \fBsetupterm((char *)0, 1, (int *)0);\fR,
.sp
which uses all tha defaults n' sendz tha output ta \fBstdout\fR.
.PP
Da \fBsetterm\fR routine is bein replaced by \fBsetupterm\fR.  Da call:
.sp
      \fBsetupterm(\fR\fIterm\fR\fB, 1, (int *)0)\fR
.sp
provides tha same ol' dirty functionalitizzle as \fBsetterm(\fR\fIterm\fR\fB)\fR.
Da \fBsetterm\fR routine is included here fo' BSD compatibility, and
is not recommended fo' freshly smoked up programs.
.PP
Da \fBset_curterm\fR routine sets tha variable \fBcur_term\fR to
\fInterm\fR, n' make all of tha \fBterminfo\fR boolean, numeric, and
strin variablez use tha joints from \fInterm\fR.  It returns tha oldschool value
of \fBcur_term\fR.
.PP
Da \fBdel_curterm\fR routine frees tha space pointed ta by
\fIoterm\fR n' make it available fo' further use.  If \fIoterm\fR is
the same as \fBcur_term\fR, references ta any of tha \fBterminfo\fR
boolean, numeric, n' strang variablez thereafta may refer ta invalid
memory locations until another \fBsetupterm\fR has been called.
.PP
Da \fBrestartterm\fR routine is similar ta \fBsetupterm\fR n' \fBinitscr\fR,
except dat it is called afta restorin memory ta a previous state (for
example, when reloadin a game saved as a cold-ass lil core image dump).  It assumes that
the windows n' tha input n' output options is tha same as when memory was
saved yo, but tha terminal type n' baud rate may be different.  Accordingly,
it saves various tty state bits, calls \fBsetupterm\fP,
and then restores tha bits.
.PP
Da \fBtparm\fR routine instantiates tha strang \fIstr\fR with
parametas \fIpi\fR.  A pointa is moonwalked back ta tha result of \fIstr\fR
with tha parametas applied.
.PP
\fBtiparm\fP be a newer form of \fBtparm\fP which uses \fI<stdarg.h>\fP
rather than a gangbangin' fixed-parameta list.
Its numeric parametas is integers (int) rather than longs.
.PP
Da \fBtputs\fR routine applies paddin shiznit ta tha string
\fIstr\fR n' outputs dat shit.  Da \fIstr\fR must be a terminfo string
variable or tha return value from \fBtparm\fR, \fBtgetstr\fR, or
\fBtgoto\fR.  \fIaffcnt\fR is tha number of lines affected, or 1 if
not applicable.  \fIputc\fR be a \fBputchar\fR-like routine ta which
the charactas is passed, one at a time.
.PP
Da \fBputp\fR routine calls \fBtputs(\fR\fIstr\fR\fB, 1, putchar)\fR.
Note dat tha output of \fBputp\fR always goes ta \fBstdout\fR, not to
the \fIfildes\fR specified up in \fBsetupterm\fR.
.PP
Da \fBvidputs\fR routine displays tha strang on tha terminal up in the
video attribute mode \fIattrs\fR, which be any combination of the
attributes listed up in \fBcurses\fR(3X).  Da charactas is passed to
the \fBputchar\fR-like routine \fIputc\fR.
.PP
Da \fBvidattr\fR routine is like tha \fBvidputs\fR routine, except
that it outputs all up in \fBputchar\fR.
.PP
Da \fBvid_attr\fR n' \fBvid_puts\fR routines correspond ta vidattr n' vidputs,
respectively.
They bust a set of arguments fo' representin tha vizzle attributes plus color,
i.e.,
one of type attr_t fo' tha attributes n' one of short for
the color_pair number.
Da \fBvid_attr\fR n' \fBvid_puts\fR routines
are designed ta use tha attribute constants wit tha \fIWA_\fR prefix.
Da opts argument is reserved fo' future use.
Currently, applications must provide a null pointa fo' dat argument.
.PP
Da \fBmvcur\fR routine serves up low-level cursor motion. I aint talkin' bout chicken n' gravy biatch.  It takes
effect immediately (rather than all up in tha next refresh).
.PP
Da \fBtigetflag\fR, \fBtigetnum\fR n' \fBtigetstr\fR routines return
the value of tha capabilitizzle correspondin ta tha \fBterminfo\fR
\fIcapname\fR passed ta them, like fuckin \fBxenl\fR.
.PP
Da \fBtigetflag\fR routine returns tha value \fB\-1\fR if
\fIcapname\fR aint a funky-ass boolean capability,
or \fB0\fR if it is canceled or absent from tha terminal description.
.PP
Da \fBtigetnum\fR routine returns tha value \fB\-2\fR if
\fIcapname\fR aint a numeric capability,
or \fB\-1\fR if it is canceled or absent from tha terminal description.
.PP
Da \fBtigetstr\fR routine returns tha value \fB(char *)\-1\fR
if \fIcapname\fR aint a strang capability,
or \fB0\fR if it is canceled or absent from tha terminal description.
.PP
Da \fIcapname\fR fo' each capabilitizzle is given up in tha table column entitled
\fIcapname\fR code up in tha capabilitizzles section of \fBterminfo\fR(\*n).
.sp
.RS
\fBchar *boolnames[]\fR, \fB*boolcodes[]\fR, \fB*boolfnames[]\fR
.sp
\fBchar *numnames[]\fR, \fB*numcodes[]\fR, \fB*numfnames[]\fR
.sp
\fBchar *strnames[]\fR, \fB*strcodes[]\fR, \fB*strfnames[]\fR
.RE
.PP
These null-terminated arrays contain tha \fIcapnames\fR, the
\fBtermcap\fR codes, n' tha full C names, fo' each of the
\fBterminfo\fR variables.
.SH RETURN VALUE
Routines dat return a integer return \fBERR\fR upon failure n' \fBOK\fR
(SVr4 only specifies "an integer value other than \fBERR\fR") upon successful
completion, unless otherwise noted up in tha precedin routine descriptions.
.PP
Routines dat return pointas always return \fBNULL\fR on error.
.PP
X/Open defines no error conditions.
In dis implementation
.RS
.TP 5
\fBdel_curterm\fP
returns a error
if its terminal parameta is null.
.TP 5
\fBputp\fP
calls \fBtputs\fP, returnin tha same error-codes.
.TP 5
\fBrestartterm\fP
returns a error
if tha associated call ta \fBsetupterm\fP returns a error.
.TP 5
\fBsetupterm\fP
returns a error
if it cannot allocate enough memory, or
create tha initial windows (stdscr, curscr, newscr).
Other error conditions is documented above.
.TP 5
\fBtputs\fP
returns a error if tha strang parameta is null.
It do not detect I/O errors:
X/Open states dat \fBtputs\fP ignores tha return value
of tha output function \fIputc\fP.
.RE
.SH NOTES
Da \fBsetupterm\fR routine should be used up in place of \fBsetterm\fR.
It may be useful when you wanna test fo' terminal capabilitizzles without
committin ta tha allocation of storage involved up in \fBinitscr\fR.
.PP
Note dat \fBvidattr\fR n' \fBvidputs\fR may be macros.
.SH PORTABILITY
Da function \fBsetterm\fR aint busted lyrics bout by X/Open n' must
be considered non-portable.  All other functions is as busted lyrics bout by X/Open.
.PP
\fBsetupterm\fP copies tha terminal name ta tha array \fBttytype\fP.
This aint part of X/Open Curses yo, but be assumed by some applications.
.PP
In System V Release 4, \fBset_curterm\fR has a \fBint\fR return type and
returns \fBOK\fR or \fBERR\fR.  Our thugged-out asses have chosen ta implement tha X/Open Curses
semantics.
.PP
In System V Release 4, tha third argument of \fBtputs\fR has tha type
\fBint (*putc)(char)\fR.
.PP
At least one implementation of X/Open Curses (Solaris) returns a value
other than OK/ERR from \fBtputs\fP.
That returns tha length of tha string, n' do no error-checking.
.PP
X/Open Curses prototypes \fBtparm\fR wit a gangbangin' fixed number of parameters,
rather than a variable argument list.
This implementation uses a variable argument list yo, but can be
configured ta use tha fixed-parameta list.
Portable applications should provide 9 parametas afta tha format;
zeroes is fine fo' dis purpose.
.PP
In response ta comments by Thomas E. Dickey,
X/Open Curses Issue 7 proposed tha \fBtiparam\fP function up in mid-2009.
.PP
X/Open notes dat afta callin \fBmvcur\fR, tha curses state may not match the
actual terminal state, n' dat a application should bust a nut on n' refresh
the window before resumin aiiight curses calls.
Both ncurses n' System V Release 4 curses implement \fBmvcur\fR using
the SCREEN data allocated up in either \fBinitscr\fR or \fBnewterm\fR.
So though it is documented as a terminfo function,
\fBmvcur\fR is straight-up a cold-ass lil curses function which aint well specified.
.PP
X/Open states dat tha oldschool location must be given fo' \fBmvcur\fP.
This implementation allows tha calla ta use \-1z fo' tha oldschool ordinates.
In dat case, tha oldschool location is unknown.
.PP
Extended terminal capabilitizzle names, e.g., as defined by \fBtic\ \-x\fP,
are not stored up in tha arrays busted lyrics bout up in dis section.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_initscr\fR(3X),
\fBcurs_kernel\fR(3X),
\fBcurs_termcap\fR(3X),
\fBcurs_variables\fR(3X),
\fBterm_variables\fR(3X),
\fBputc\fR(3),
\fBterminfo\fR(\*n)
