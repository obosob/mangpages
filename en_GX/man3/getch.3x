'\" t
.\"***************************************************************************
.\" Copyright (c) 1998-2011,2012 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_getch.3x,v 1.37 2012/07/07 20:04:56 tom Exp $
.TH curs_getch 3X ""
.na
.hy 0
.de bP
.IP \(bu 4
..
.SH NAME
\fBgetch\fR,
\fBwgetch\fR,
\fBmvgetch\fR,
\fBmvwgetch\fR,
\fBungetch\fR,
\fBhas_key\fR \- git (or push back) charactas from \fBcurses\fR terminal keyboard
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.PP
\fBint getch(void);\fR
.br
\fBint wgetch(WINDOW *win);\fR
.br
\fBint mvgetch(int y, int x);\fR
.br
\fBint mvwgetch(WINDOW *win, int y, int x);\fR
.br
\fBint ungetch(int ch);\fR
.br
\fBint has_key(int ch);\fR
.br
.SH DESCRIPTION
Da \fBgetch\fR, \fBwgetch\fR, \fBmvgetch\fR n' \fBmvwgetch\fR, routines read
a characta from tha window.
In no-delay mode, if no input is waiting, tha value \fBERR\fR is returned.
In delay mode, tha program waits until tha system
passes text all up in ta tha program.
Dependin on tha settin of \fBcbreak\fR,
this be afta one characta (cbreak mode),
or afta tha straight-up original gangsta newline (nocbreak mode).
In half-delay mode,
the program waits until a cold-ass lil characta is typed or the
specified timeout has been reached.
.PP
Unless \fBnoecho\fR has been set,
then tha characta will also be echoed tha fuck into the
designated window accordin ta tha followin rules:
if tha characta is tha current erase character, left arrow, or backspace,
the cursor is moved one space ta tha left n' dat screen posizzle is erased
as if \fBdelch\fR had been called.
If tha characta value be any other \fBKEY_\fR define, tha user be alerted
with a \fBbeep\fR call.
Otherwise tha characta is simply output ta tha screen.
.PP
If tha window aint a pad, n' it has been moved or modified since tha last
call ta \fBwrefresh\fR, \fBwrefresh\fR is ghon be called before another character
is read.
.PP
If \fBkeypad\fR is \fBTRUE\fR, n' a gangbangin' function key is pressed, tha token for
that function key is returned instead of tha raw characters.
Possible function
keys is defined up in \fB<curses.h>\fR as macros wit joints outside tha range
of 8-bit charactas whose names begin wit \fBKEY_\fR. Thus, a variable
intended ta hold tha return value of a gangbangin' function key must be of short size or
larger.
.PP
When a cold-ass lil characta dat could be tha beginnin of a gangbangin' function key is received
(which, on modern terminals, means a escape character),
\fBcurses\fR sets a timer.
If tha remainder of tha sequence do not come up in within tha designated
time, tha characta is passed through;
otherwise, tha function key value is returned.
For dis reason, nuff terminals experience a thugged-out delay between tha time
a user presses tha escape key n' tha escape is moonwalked back ta tha program.
.PP
Da \fBungetch\fR routine places \fIch\fR back onto tha input queue ta be
returned by tha next call ta \fBwgetch\fR.
There is just one input queue fo' all windows.
.PP
.SS Function Keys
Da followin function keys, defined up in \fB<curses.h>\fR, might be returned by
\fBgetch\fR if \fBkeypad\fR has been enabled.
Note dat not all of these are
necessarily supported on any particular terminal.
.sp
.TS
centa tab(/) ;
l l
l l .
\fIName\fR/\fIKey\fR \fIname\fR
KEY_BREAK/Break key
KEY_DOWN/Da four arrow keys ...
KEY_UP
KEY_LEFT
KEY_RIGHT
KEY_HOME/Home key (upward+left arrow)
KEY_BACKSPACE/Backspace
KEY_F0/T{
Function keys; space fo' 64 keys is reserved.
T}
KEY_F(\fIn\fR)/T{
For 0 \(<= \fIn\fR \(<= 63
T}
KEY_DL/Delete line
KEY_IL/Insert line
KEY_DC/Delete character
KEY_IC/Insert char or enta bang mode
KEY_EIC/Exit bang char mode
KEY_CLEAR/Clear screen
KEY_EOS/Clear ta end of screen
KEY_EOL/Clear ta end of line
KEY_SF/Scroll 1 line forward
KEY_SR/Scroll 1 line backward (reverse)
KEY_NPAGE/Next page
KEY_PPAGE/Previous page
KEY_STAB/Set tab
KEY_CTAB/Clear tab
KEY_CATAB/Clear all tabs
KEY_ENTER/Enta or send
KEY_SRESET/Soft (partial) reset
KEY_RESET/Reset or hard reset
KEY_PRINT/Print or copy
KEY_LL/Home down or bottom (lower left)
KEY_A1/Upper left of keypad
KEY_A3/Upper right of keypad
KEY_B2/Centa of keypad
KEY_C1/Lower left of keypad
KEY_C3/Lower right of keypad
KEY_BTAB/Back tab key
KEY_BEG/Beg(inning) key
KEY_CANCEL/Cancel key
KEY_CLOSE/Close key
KEY_COMMAND/Cmd (command) key
KEY_COPY/Copy key
KEY_CREATE/Smoke key
KEY_END/End key
KEY_EXIT/Exit key
KEY_FIND/Find key
KEY_HELP/Help key
KEY_MARK/Mark key
KEY_MESSAGE/Message key
KEY_MOUSE/Mouse event read
KEY_MOVE/Move key
KEY_NEXT/Next object key
KEY_OPEN/Open key
KEY_OPTIONS/Options key
KEY_PREVIOUS/Previous object key
KEY_REDO/Redo key
KEY_REFERENCE/Ref(erence) key
KEY_REFRESH/Refresh key
KEY_REPLACE/Replace key
KEY_RESIZE/Screen resized
KEY_RESTART/Restart key
KEY_RESUME/Resume key
KEY_SAVE/Save key
KEY_SBEG/Shifted beginnin key
KEY_SCANCEL/Shifted quit key
KEY_SCOMMAND/Shifted command key
KEY_SCOPY/Shifted copy key
KEY_SCREATE/Shifted create key
KEY_SDC/Shifted delete char key
KEY_SDL/Shifted delete line key
KEY_SELECT/Select key
KEY_SEND/Shifted end key
KEY_SEOL/Shifted clear line key
KEY_SEXIT/Shifted exit key
KEY_SFIND/Shifted find key
KEY_SHELP/Shifted help key
KEY_SHOME/Shifted home key
KEY_SIC/Shifted input key
KEY_SLEFT/Shifted left arrow key
KEY_SMESSAGE/Shifted message key
KEY_SMOVE/Shifted move key
KEY_SNEXT/Shifted next key
KEY_SOPTIONS/Shifted options key
KEY_SPREVIOUS/Shifted prev key
KEY_SPRINT/Shifted print key
KEY_SREDO/Shifted redo key
KEY_SREPLACE/Shifted replace key
KEY_SRIGHT/Shifted right arrow
KEY_SRSUME/Shifted resume key
KEY_SSAVE/Shifted save key
KEY_SSUSPEND/Shifted suspend key
KEY_SUNDO/Shifted undo key
KEY_SUSPEND/Suspend key
KEY_UNDO/Undo key
.TE
.PP
Keypad be arranged like this:
.sp
.TS
centa allbox tab(/) ;
c c c .
\fBA1\fR/\fBup\fR/\fBA3\fR
\fBleft\fR/\fBB2\fR/\fBright\fR
\fBC1\fR/\fBdown\fR/\fBC3\fR
.TE
.sp
Da \fBhas_key\fR routine takes a key value from tha above list, and
returns TRUE or FALSE accordin ta whether
the current terminal type recognizes a key wit dat value.
Note dat all dem joints do not correspond ta a real key,
e.g., \fBKEY_RESIZE\fP n' \fBKEY_MOUSE\fP.
See \fBresizeterm\fR(3X) fo' mo' details bout \fBKEY_RESIZE\fP, and
\fBcurs_mouse\fR(3X) fo' a gangbangin' finger-lickin' rap of \fBKEY_MOUSE\fP.
.PP
.SH RETURN VALUE
All routines return tha integer \fBERR\fR upon failure n' a integer value
other than \fBERR\fR (\fBOK\fR up in tha case of ungetch()) upon successful
completion.
.RS 3
.TP 5
\fBungetch\fP
returns ERR
if there is no mo' room up in tha FIFO.
.TP
\fBwgetch\fP
returns ERR
if tha window pointa is null, or
if its timeout expires without havin any data.
.RE
.PP
Functions wit a "mv" prefix first big-ass up a cold-ass lil cursor movement using
\fBwmove\fP, n' return a error if tha posizzle is outside tha window,
or if tha window pointa is null.
.SH NOTES
Use of tha escape key by a programmer fo' a single characta function is
discouraged, as it will cause a thugged-out delay of up ta one second while the
keypad code looks fo' a gangbangin' followin function-key sequence.
.PP
Note dat some keys may be tha same as commonly used control
keys, e.g., \fBKEY_ENTER\fP versus control/M, \fBKEY_BACKSPACE\fP versus control/H.
Some curses implementations may differ accordin ta whether they
treat these control keys specially (and ignore tha terminfo), or
use tha terminfo definitions.
\fBNcurses\fR uses tha terminfo definition.
If it say dat \fBKEY_ENTER\fP is control/M,
\fBgetch\fR will return \fBKEY_ENTER\fP
when you press control/M.
.PP
Generally, \fBKEY_ENTER\fP denotes tha character(s) busted by tha \fIEnter\fP
key on tha numeric keypad:
.bP
the terminal description lists da most thugged-out useful keys,
.bP
the \fIEnter\fP key on tha regular keyboard be already handled by
the standard ASCII charactas fo' carriage-return n' line-feed,
.bP
dependin on whether \fBnl\fP or \fBnonl\fP was called,
pressin "Enter" on tha regular keyboard may return either a cold-ass lil carriage-return
or line-feed, n' finally
.bP
"Enta or send" is tha standard description fo' dis key.
.PP
When rockin \fBgetch\fR, \fBwgetch\fR, \fBmvgetch\fR, or
\fBmvwgetch\fR, nocbreak mode (\fBnocbreak\fR) n' echo mode
(\fBecho\fR) should not be used all up in tha same time.
Dependin on the
state of tha tty driver when each characta is typed, tha program may
produce undesirable thangs up in dis biatch.
.PP
Note dat \fBgetch\fR, \fBmvgetch\fR, n' \fBmvwgetch\fR may be macros.
.PP
Historically, tha set of keypad macros was largely defined by tha mad
function-key-rich keyboard of tha AT&T 7300, aka 3B1, aka Safari 4.
Modern
personal computas probably have only a lil' small-ass subset of these.
IBM PC-style
consolez typically support lil mo' than \fBKEY_UP\fR, \fBKEY_DOWN\fR,
\fBKEY_LEFT\fR, \fBKEY_RIGHT\fR, \fBKEY_HOME\fR, \fBKEY_END\fR,
\fBKEY_NPAGE\fR, \fBKEY_PPAGE\fR, n' function keys 1 all up in 12.
Da Ins key
is probably mapped ta \fBKEY_IC\fR.
.SH PORTABILITY
Da *get* functions is busted lyrics bout up in tha XSI Curses standard, Issue 4.
They
read single-byte charactas only.
Da standard specifies dat they return
\fBERR\fR on failure yo, but specifies no error conditions.
.PP
Da echo behavior of these functions on input of \fBKEY_\fR or backspace
charactas was not specified up in tha SVr4 documentation.
This description is
adopted from tha XSI Curses standard.
.PP
Da behavior of \fBgetch\fR n' playaz up in tha presence of handled signals is
unspecified up in tha SVr4 n' XSI Curses documentation.
Under oldschool curses
implementations, it varied dependin on whether tha operatin system's
implementation of handled signal receipt interrupts a \fBread\fR(2) call in
progress or not, n' also (in some implementations) dependin on whether an
input timeout or non-blockin mode has been set.
.PP
Programmers concerned bout portabilitizzle should be prepared fo' either of two
cases: (a) signal receipt do not interrupt \fBgetch\fR; (b) signal receipt
interrupts \fBgetch\fR n' causes it ta return ERR wit \fBerrno\fR set to
\fBEINTR\fR.
Under tha \fBncurses\fR implementation, handled signals never
interrupt \fBgetch\fR.
.PP
Da \fBhas_key\fR function is unique ta \fBncurses\fR.
We recommend that
any code rockin it be conditionalized on tha \fBNCURSES_VERSION\fR feature macro.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_inopts\fR(3X),
\fBcurs_outopts\fR(3X),
\fBcurs_mouse\fR(3X),
\fBcurs_move\fR(3X),
\fBcurs_refresh\fR(3X),
\fBresizeterm\fR(3X).
.PP
Comparable functions up in tha wide-characta (ncursesw) library are
busted lyrics bout in
\fBcurs_get_wch\fR(3X).
