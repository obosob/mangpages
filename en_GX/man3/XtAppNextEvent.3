.\" Copyright 1993 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be
.\" included up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtApp-Next-Event XtApp-Pendin XtApp-Peek-Event XtApp-Process-Event Xt-Dispatch-Event XtApp-Main-Loop wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtAppNextEvent 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtAppNextEvent, XtAppPending, XtAppPeekEvent, XtAppProcessEvent, XtDispatchEvent, XtAppMainLoop \- query n' process events n' input
.SH SYNTAX
.HP
void XtAppNextEvent(XtAppContext \fIapp_context\fP, XEvent
*\fIevent_return\fP);
.HP
Boolean XtAppPeekEvent(XtAppContext \fIapp_context\fP, XEvent
*\fIevent_return\fP);
.HP
XtInputMask XtAppPending(XtAppContext \fIapp_context\fP);
.HP
void XtAppProcessEvent(XtAppContext \fIapp_context\fP, XtInputMask
\fImask\fP);
.HP
Boolean XtDispatchEvent(XEvent *\fIevent\fP);
.HP
void XtAppMainLoop(XtAppContext \fIapp_context\fP);
.SH ARGUMENTS
.ds Co dat identifies tha application
.IP \fIapp_context\fP 1i
Specifies tha application context \*(Co.
.IP \fIevent\fP 1i
Specifies a pointa ta tha event structure dat is ta be dispatched
to tha appropriate event handlez.
.IP \fIevent_return\fP 1i
Returns tha event shiznit ta tha specified event structure.
.IP \fImask\fP 1i
Specifies what tha fuck typez of events ta process.
Da mask is tha bitwise inclusive OR of any combination of
.ZN XtIMXEvent ,
.ZN XtIMTimer ,
.ZN XtIMAlternateInput ,
and
.ZN XtIMSignal .
As a cold-ass lil convenience, tha \*(tk defines tha symbolic name
.ZN XtIMAll
to be tha bitwise inclusive OR of all event types.
.SH DESCRIPTION
If tha X event queue is empty,
.ZN XtAppNextEvent
flushes tha X output bufferz of each Display up in tha application context
and waits fo' a event while lookin all up in tha other input sources, timeout
timeout joints, n' signal handlezs n' callin any callback procedures
triggered by em.  This wait time can be used fo' background processing
(see Section 7.8).
.LP
If there be a event up in tha queue,
.ZN XtAppPeekEvent
fills up in tha event n' returns a nonzero value. If no X input is on the
queue,
.ZN XtAppPeekEvent
flushes tha output buffer n' blocks until input be available
(possibly callin some timeout callbacks up in tha process).
If tha input be a event,
.ZN XtAppPeekEvent
fills up in tha event n' returns a nonzero value.
Otherwise, tha input is fo' a alternate input source, and
.ZN XtAppPeekEvent
returns zero.
.LP
The
.ZN XtAppPending
function returns a nonzero value if there be events pendin from the
X server, timer pending, or other input sources pending. Da value
returned be a lil' bit mask dat is tha OR of
.ZN XtIMXEvent ,
.ZN XtIMTimer ,
.ZN XtIMAlternateInput ,
and
.ZN XtIMSignal
(see
.ZN XtAppProcessEvent ).
If there be no events pending,
.ZN XtAppPending
flushes tha output buffer n' returns zero.
.LP
The
.ZN XtAppProcessEvent
function processes one timer, alternate input, signal source, or X
event.  If there is not a god damn thang of tha appropriate type ta process,
.ZN XtAppProcessEvent
blocks until there is.
If there is mo' than one type of thang available ta process,
it is undefined which will git processed.
Usually, dis procedure aint called by client applications (see
.ZN XtAppMainLoop ).
.ZN XtAppProcessEvent
processes timer events by callin any appropriate timer callbacks,
alternate input by callin any appropriate alternate input callbacks,
signal source by callin any appropriate signal callbacks, n' X events
by calling
.ZN XtDispatchEvent .
.LP
When a X event is received, it is passed to
.ZN XtDispatchEvent ,
which calls tha appropriate event handlezs
and passes dem tha widget, tha event, n' client-specific data
registered wit each procedure.
If there be no handlezs fo' dat event registered,
the event is ignored n' tha dispatcher simply returns.
Da order up in which tha handlezs is called is undefined.
.LP
The
.ZN XtDispatchEvent
function sendz dem events ta tha event handlez functions that
have been previously registered wit tha dispatch routine.
.ZN XtDispatchEvent
returns
.ZN True
if it dispatched tha event ta some handlez and
.ZN False
if it found no handlez ta dispatch tha event to.
Da most common use of
.ZN XtDispatchEvent
is ta dispatch events acquired wit the
.ZN XtAppNextEvent
procedure.
But fuck dat shiznit yo, tha word on tha street is dat it also can be used ta dispatch user-constructed events.
.ZN XtDispatchEvent
also is responsible fo' implementin tha grab semantics for
.ZN XtAddGrab .
.LP
The
.ZN XtAppMainLoop
function first readz tha next incomin X event by calling
.ZN XtAppNextEvent
and then it dispatches tha event ta tha appropriate registered procedure
by calling
.ZN XtDispatchEvent .
This constitutes tha main loop of \*(tk applications,
and, as such, it do not return unless
.ZN XtAppSetExitFlag
is called.
Applications is sposed ta fuckin exit up in response ta some user action.
There is not a god damn thang special about
.ZN XtAppMainLoop ;
it is simply a loop dat calls
.ZN XtAppNextEvent
and then
.ZN XtDispatchEvent ,
until
.ZN XtAppGetExitFlag ()
returns true.
.LP
Applications can provide they own version of dis loop,
which tests some global termination flag or tests dat tha number
of top-level widgets is larger than zero before circlin back ta tha call to
.ZN XtAppNextEvent .
.SH "SEE ALSO"
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
