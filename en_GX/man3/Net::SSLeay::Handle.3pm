.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SSLeay::Handle 3"
.TH Net::SSLeay::Handle 3 "2006-09-14" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSLeay::Handle \- Perl module dat lets SSL (HTTPS) sockets be
handled as standard file handles.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  mah ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SSLeay::Handle allows you ta request n' receive \s-1HTTPS\s0 wizzy pages
usin \*(L"old-fashion\*(R" file handlez as in:
.PP
.Vb 1
\&    print SSL "GET / HTTP/1.0\er\en";
.Ve
.PP
and
.PP
.Vb 1
\&    print while (<SSL>);
.Ve
.PP
If you export tha shutdown routine, then tha only extra code that
you need ta add ta yo' program is tha tie function as in:
.PP
.Vb 9
\&    mah $socket;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $host, $port);
\&        $socket = \e*S2;
\&    else {
\&        $socket = Net::SSLeay::Handle\->make_socket($host, $port);
\&    }
\&    print $socket $request_headers;
\&    ...
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "shutdown" 4
.IX Item "shutdown"
.Vb 1
\&  shutdown(\e*SOCKET, $mode)
.Ve
.Sp
Calls ta tha main \fIshutdown()\fR don't work wit tied sockets pimped wit this
module.  This shutdown should be able ta distinquish between tied n' untied
sockets n' do tha right thang.
.IP "debug" 4
.IX Item "debug"
.Vb 2
\&  mah $debug = Net::SSLeay::Handle\->debug()
\&  Net::SSLeay::Handle\->debug(1)
.Ve
.Sp
Get/set debugin mode fo' realz. Always returns tha debug value before tha function call.
if a additionizzle argument is given tha debug option is ghon be set ta dis value.
.IP "make_socket" 4
.IX Item "make_socket"
.Vb 1
\&  mah $sock = Net::SSLeay::Handle\->make_socket($host, $port);
.Ve
.Sp
Creates a socket dat is connected ta \f(CW$post\fR rockin \f(CW$port\fR. Well shiiiit, it uses
\&\f(CW$Net::SSLeay::proxyhost\fR n' proxyport if set n' authentificates itself against
this proxy dependin on \f(CW$Net::SSLeay::proxyauth\fR. Well shiiiit, it also turns autoflush on for
the pimped socket.
.SS "\s-1USING EXISTING SOCKETS\s0"
.IX Subsection "USING EXISTING SOCKETS"
One of tha motivations fo' freestylin dis module was ta avoid
duplicatin socket creation code (which is mostly error handling).
Da calls ta \fItie()\fR above where it is passed a \f(CW$host\fR n' \f(CW$port\fR is
provided fo' convenience testing.  If you already gotz a socket
connected ta tha right host n' port, S1, then you can do something
like:
.PP
.Vb 8
\&    mah $socket \e*S1;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $socket);
\&        $socket = \e*S2;
\&    }
\&    mah $last_sel = select($socket); $| = 1; select($last_sel);
\&    print $socket $request_headers;
\&    ...
.Ve
.PP
Note: As far as I know you must be careful wit tha globs up in tha \fItie()\fR
function. I aint talkin' bout chicken n' gravy biatch.  Da first parameta must be a glob (*SOMETHING) n' the
last parameta must be a reference ta a glob (\e*SOMETHING_ELSE) or a
scala dat was assigned ta a reference ta a glob (as up in tha example
above)
.PP
Also, tha two globs must be different.  When I tried ta use tha same
glob, I gots a cold-ass lil core dump.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.PP
Yo ass can export tha \fIshutdown()\fR function.
.PP
It be suggested dat you do export \fIshutdown()\fR or use tha fully
qualified \fINet::SSLeay::Handle::shutdown()\fR function ta shutdown \s-1SSL\s0
sockets, n' you can put dat on yo' toast.  It should be smart-ass enough ta distinguish between \s-1SSL\s0 and
non-SSL sockets n' do tha right thang.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  mah ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "TODO"
.IX Header "TODO"
Betta error handling.  Callback routine?
.SH "CAVEATS"
.IX Header "CAVEATS"
Tyin ta a gangbangin' file handle be a lil tricky (for me at least).
.PP
Da first parameta ta \fItie()\fR must be a glob (*SOMETHING) n' tha last
parameta must be a reference ta a glob (\e*SOMETHING_ELSE) or a scaler
that was assigned ta a reference ta a glob ($s = \e*SOMETHING_ELSE).
Also, tha two globs must be different.  When I tried ta use tha same
glob, I gots a cold-ass lil core dump.
.PP
I was able ta associate attributes ta globs pimped by dis module
(like *SSL above) by bustin a hash of hashes keyed by tha file head1.
.PP
Support fo' oldschool perls may not be 100%. If up in shiznit try 5.6.0 or
newer.
.SH "CHANGES"
.IX Header "CHANGES"
Please peep Net\-SSLeay\-Handle\-0.50/Changes file.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
If you let dis module construct sockets fo' you wit Perl versions
below v.5.6 then there be a slight memory leak.  Other upgrade your
Perl, or create tha sockets yo ass.  Da leak was pimped ta let
these olda versionz of Perl access mo' than one Handle at a time.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jim Bowlin jbowlin@linklint.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SSLeay, \fIperl\fR\|(1), http://openssl.org/
