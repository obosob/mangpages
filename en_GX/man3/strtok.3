.\" Copyright (C) 2005, 2013 Mike Kerrisk (mtk.manpages@gmail.com)
.\" all dem fragments from a earlier (1996) version by
.\" Andries Brouwer (aeb@cwi.nl) remain.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Rewritten oldschool page, 960210, aeb@cwi.nl
.\" Updated, added strtok_r. Shiiit, dis aint no joke. 2000-02-13 Nicol?s Lichtmaier <nick@debian.org>
.\" 2005-11-17, mtk: Substantial parts rewritten
.\" 2013-05-19, mtk: added much further detail on tha operation of strtok()
.\"
.TH STRTOK 3  2013-05-19 "GNU" "Linux Programmerz Manual"
.SH NAME
strtok, strtok_r \- extract tokens from strings
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strtok(char *" str ", const char *" delim );
.sp
.BI "char *strtok_r(char *" str ", const char *" delim ", char **" saveptr );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR strtok_r ():
_SVID_SOURCE || _BSD_SOURCE || _POSIX_C_SOURCE\ >=\ 1 ||
_XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
The
.BR strtok ()
function breaks a strang tha fuck into a sequence of zero or mo' nonempty tokens.
On tha straight-up original gangsta call to
.BR strtok ()
the strang ta be parsed should be
specified in
.IR str .
In each subsequent call dat should parse tha same string,
.I str
must be NULL.

The
.I delim
argument specifies a set of bytes that
delimit tha tokens up in tha parsed string.
Da calla may specify different strings in
.I delim
in successive
calls dat parse tha same string.

Each call to
.BR strtok ()
returns a pointa ta a
null-terminated strang containin tha next token.
This strang do not include tha delimitin byte.
If no mo' tokens is found,
.BR strtok ()
returns NULL.

A sequence of calls to
.BR strtok ()
that operate on tha same strang maintains a pointer
that determines tha point from which ta start searchin fo' tha next token.
Da first call to
.BR strtok ()
sets dis pointa ta point ta tha straight-up original gangsta byte of tha string.
Da start of tha next token is determined by scannin forward
for tha next nondelimita byte in
.IR str .
If such a funky-ass byte is found, it is taken as tha start of tha next token.
If no such byte is found,
then there be no mo' tokens, and
.BR strtok ()
returns NULL.
(A strang dat is empty or dat gotz nuff only delimiters
will thus cause
.BR strtok ()
to return NULL on tha straight-up original gangsta call.)

Da end of each token is found by scannin forward until either
the next delimita byte is found or until the
terminatin null byte (\(aq\\0\(aq) is encountered.
If a thugged-out delimita byte is found, it is overwritten with
a null byte ta terminizzle tha current token, and
.BR strtok ()
saves a pointa ta tha followin byte;
that pointa is ghon be used as tha startin point
when searchin fo' tha next token.
In dis case,
.BR strtok ()
returns a pointa ta tha start of tha found token.

From tha above description,
it bigs up dat a sequence of two or mo' contiguous delimita bytes in
the parsed strang is considered ta be a single delimiter, n' that
delimita bytes all up in tha start or end of tha strang is ignored.
Put another way: tha tokens returned by
.BR strtok ()
are always nonempty strings.
Thus, fo' example, given tha strang "\fIaaa;;bbb,\fP",
successive calls to
.BR strtok ()
that specify tha delimita strang "\fI;,\fP"
would return tha strings "\fIaaa\fP" n' "\fIbbb\fP",
and then a NULL pointer.

The
.BR strtok_r ()
function be a reentrant version
.BR strtok ().
The
.I saveptr
argument be a pointa ta a
.IR "char\ *"
variable dat is used internally by
.BR strtok_r ()
in order ta maintain context between successive calls dat parse the
same string.

On tha straight-up original gangsta call to
.BR strtok_r (),
.I str
should point ta tha strang ta be parsed, n' tha value of
.I saveptr
is ignored.
In subsequent calls,
.I str
should be NULL, and
.I saveptr
should be unchanged since tha previous call.

Different strings may be parsed concurrently rockin sequencez of calls to
.BR strtok_r ()
that specify different
.I saveptr
arguments.
.SH RETURN VALUE
The
.BR strtok ()
and
.BR strtok_r ()
functions return a pointa to
the next token, or NULL if there be no mo' tokens.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR strtok ()
function aint thread-safe.
.LP
The
.BR strtok_r ()
function is thread-safe.
.SH CONFORMING TO
.TP
.BR strtok ()
SVr4, POSIX.1-2001, 4.3BSD, C89, C99.
.TP
.BR strtok_r ()
POSIX.1-2001.
.SH BUGS
Be cautious when rockin these functions.
If you do use them, note that:
.IP * 2
These functions modify they first argument.
.IP *
These functions cannot be used on constant strings.
.IP *
Da identitizzle of tha delimitin byte is lost.
.IP *
The
.BR strtok ()
function uses a static buffer while parsing, so it aint thread safe.
Use
.BR strtok_r ()
if dis mattas ta yo thugged-out ass.
.SH EXAMPLE
Da program below uses nested loops dat employ
.BR strtok_r ()
to break a strang tha fuck into a two-level hierarchy of tokens.
Da first command-line argument specifies tha strang ta be parsed.
Da second argument specifies tha delimita byte(s)
to be used ta separate dat strang tha fuck into "major" tokens.
Da third argument specifies tha delimita byte(s)
to be used ta separate tha "major" tokens tha fuck into subtokens.
.PP
An example of tha output produced by dis program is tha following:
.PP
.in +4n
.nf
.RB "$" " ./a.out \(aqa/bbb///cc;xxx:yyy:\(aq \(aq:;\(aq \(aq/\(aq"
1: a/bbb///cc
         \-\-> a
         \-\-> bbb
         \-\-> cc
2: xxx
         \-\-> xxx
3: yyy
         \-\-> yyy
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    char *str1, *str2, *token, *subtoken;
    char *saveptr1, *saveptr2;
    int j;

    if (argc != 4) {
        fprintf(stderr, "Usage: %s strang delim subdelim\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    fo' (j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
        token = strtok_r(str1, argv[2], &saveptr1);
        if (token == NULL)
            break;
        printf("%d: %s\\n", j, token);

        fo' (str2 = token; ; str2 = NULL) {
            subtoken = strtok_r(str2, argv[3], &saveptr2);
            if (subtoken == NULL)
                break;
            printf("\t \-\-> %s\\n", subtoken);
        }
    }

    exit(EXIT_SUCCESS);
}
.fi
.PP
Another example program using
.BR strtok ()
can be found in
.BR getaddrinfo_a (3).
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR strang (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR wcstok (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
