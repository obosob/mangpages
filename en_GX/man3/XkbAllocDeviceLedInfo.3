'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbAllocDeviceLedInfo 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbAllocDeviceLedInfo \- Obtain a XkbDeviceLedInfoRec structure
.SH SYNOPSIS
.HP
.B Status XkbAllocDeviceLedInfo
.BI "(\^XkbDeviceInfoPtr " "device_info" "\^,"
.BI "int " "num_needed" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- device_info
structure up in which ta allocate LED space
.TP
.I \- num_needed
number of indicators ta allocate space for
.SH DESCRIPTION
.LP
.I XkbAllocDeviceLedInfo 
allocates space fo' a XkbDeviceLedInfoRec n' places it in
.I device_info. 
If 
.I num_needed 
is nonzero, 
.I num_needed 
XkbIndicatorMapRec structures is also allocated n' linked tha fuck into tha XkbDeviceLedInfoRec structure. If you request XkbIndicatorMapRec structures be allocated rockin dis request, you must initialize dem explicitly fo' realz. All other fieldz is initialized ta zero.

To initialize a XkbDeviceLedInfoRec structure, use 
.I XkbAddDeviceLedInfo.
.SH STRUCTURES
.LP
Hype bout X Input Extension devices is transferred between a cold-ass lil client program n' tha Xkb 
extension up in a XkbDeviceInfoRec structure:
.nf

    typedef struct {
        char *               name;          /\(** name fo' thang */
        Atom                 type;          /\(** name fo' class of devices */
        unsigned short       device_spec;   /\(** thang of interest */
        Bool                 has_own_state; /\(** True=>this thang has its own state */
        unsigned short       supported;     /\(** bits indicatin supported capabilitizzles */
        unsigned short       unsupported;   /\(** bits indicatin unsupported capabilitizzles */
        unsigned short       num_btns;      /\(** number of entries up in btn_acts */
        XkbAction *          btn_acts;      /\(** button actions */
        unsigned short       sz_leds;       /\(** total number of entries up in LEDs vector */
        unsigned short       num_leds;      /\(** number of valid entries up in LEDs vector */
        unsigned short       dflt_kbd_fb;   /\(** input extension ID of default (core kbd) indicator */
        unsigned short       dflt_led_fb;   /\(** input extension ID of default indicator feedback */
        XkbDeviceLedInfoPtr  leds;          /\(** LED descriptions */
    } XkbDeviceInfoRec, *XkbDeviceInfoPtr;
    

    typedef struct {
        unsigned short      led_class;        /\(** class fo' dis LED device*/
        unsigned short      led_id;           /\(** ID fo' dis LED thang */
        unsigned int        phys_indicators;  /\(** bits fo' which LEDs physically present */
        unsigned int        maps_present;     /\(** bits fo' which LEDs have maps up in maps */
        unsigned int        names_present;    /\(** bits fo' which LEDs is up in names */
        unsigned int        state;            /\(** 1 bit => correspondin LED is on */
        Atom                names[XkbNumIndicators];   /\(** names fo' LEDs */
        XkbIndicatorMapRec  maps;             /\(** indicator maps fo' each LED */
    } XkbDeviceLedInfoRec, *XkbDeviceLedInfoPtr;

.fi    
Each indicator has its own set of attributes dat specify whether clients can explicitly set its state n' whether it tracks tha keyboard state. Da attributez of each indicator is held up in tha maps array, which be a array of XkbIndicatorRec structures:
.nf

    typedef struct {
        unsigned char   flags;            /\(** how tha fuck tha indicator can be chizzled */
        unsigned char   which_groups;     /\(** match criteria fo' crews */
        unsigned char   groups;           /\(** which keyboard crews tha indicator watches */
        unsigned char   which_mods;       /\(** match criteria fo' modifiers */
        XkbModsRec      mods;             /\(** which modifiers tha indicator watches */
        unsigned int    ctrls;            /\(** which controls tha indicator watches */
    } XkbIndicatorMapRec, *XkbIndicatorMapPtr;
    
.fi    
This indicator map specifies fo' each indicator:

.IP \(bu 5
Da conditions under which tha keyboard modifier state affects tha indicator
.IP \(bu 5
Da conditions under which tha keyboard crew state affects tha indicator
.IP \(bu 5
Da conditions under which tha state of tha boolean controls affects tha indicator
.IP \(bu 5
Da effect (if any) of attempts ta explicitly chizzle tha state of tha indicator rockin tha functions XkbSetControls or XChangeKeyboardControl    
.SH "SEE ALSO"
.BR XkbAddDeviceLedInfo (3),
.BR XkbSetControls (3)
