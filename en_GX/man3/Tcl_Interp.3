'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Interp 3 7.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_Interp \- client-visible fieldz of interpreta structures
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
typedef struct {
        char *\fIresult\fR;
        Tcl_FreeProc *\fIfreeProc\fR;
        int \fIerrorLine\fR;
} Tcl_Interp;

typedef void Tcl_FreeProc(char *\fIblockPtr\fR);
.BE

.SH DESCRIPTION
.PP
Da \fBTcl_CreateInterp\fR procedure returns a pointa ta a Tcl_Interp
structure.  This pointa is then passed tha fuck into other Tcl procedures
to process commandz up in tha interpreta n' big-ass up other operations
on tha interpreter n' shit.  Interpreta structures contain nuff fields
that is used by Tcl yo, but only three dat may be accessed by
clients:  \fIresult\fR, \fIfreeProc\fR, n' \fIerrorLine\fR.
.PP
.VS 8.5
\fBNote dat access ta all three fields, \fIresult\fB, \fIfreeProc\fB and
\fIerrorLine\fB is deprecated.\fR  Use \fBTcl_SetResult\fR,
\fBTcl_GetResult\fR, n' \fBTcl_GetReturnOptions\fR instead.
.VE 8.5
.PP
Da \fIresult\fR n' \fIfreeProc\fR fieldz is used ta return
results or error lyrics from commands.
This shiznit is returned by command procedures back ta \fBTcl_Eval\fR,
and by \fBTcl_Eval\fR back ta its callers.
Da \fIresult\fR field points ta tha strang dat represents the
result or error message, n' tha \fIfreeProc\fR field  drops some lyrics ta how
to dispose of tha storage fo' tha strang when it aint needed no mo'.
Da easiest way fo' command procedures ta manipulate these
fieldz is ta booty-call procedures like \fBTcl_SetResult\fR
or \fBTcl_AppendResult\fR;  they
will hide all tha detailz of managin tha fields.
Da description below is fo' dem procedures dat manipulate the
fieldz directly.
.PP
Whenever a cold-ass lil command procedure returns, it must ensure
that tha \fIresult\fR field of its interpreta points ta tha string
bein returned by tha command.
Da \fIresult\fR field must always point ta a valid string.
If a cold-ass lil command wishes ta return no result then \fIinterp->result\fR
should point ta a empty string.
Normally, thangs up in dis biatch is assumed ta be statically allocated,
which means dat tha contents aint gonna chizzle before tha next time
\fBTcl_Eval\fR is called or some other command procedure is invoked.
In dis case, tha \fIfreeProc\fR field must be zero.
Alternatively, a cold-ass lil command procedure may dynamically
allocate its return value (e.g. rockin \fBTcl_Alloc\fR)
and store a pointa ta it up in \fIinterp->result\fR.
In dis case, tha command procedure must also set \fIinterp->freeProc\fR
to tha address of a procedure dat can free tha value, or \fBTCL_DYNAMIC\fR
if tha storage was allocated directly by Tcl or by a cold-ass lil call to
\fBTcl_Alloc\fR. 
If \fIinterp->freeProc\fR is non-zero, then Tcl will call \fIfreeProc\fR
to free tha space pointed ta by \fIinterp->result\fR before it
invokes tha next command.
If a cold-ass lil client procedure overwrites \fIinterp->result\fR when
\fIinterp->freeProc\fR is non-zero, then it is responsible fo' calling
\fIfreeProc\fR ta free tha oldschool \fIinterp->result\fR (the \fBTcl_FreeResult\fR
macro should be used fo' dis purpose).
.PP
\fIFreeProc\fR should have arguments n' result dat match the
\fBTcl_FreeProc\fR declaration above:  it receives a single
argument which be a pointa ta tha result value ta free.
In most applications \fBTCL_DYNAMIC\fR is tha only non-zero value ever
used fo' \fIfreeProc\fR.
But fuck dat shiznit yo, tha word on tha street is dat a application may store a gangbangin' finger-lickin' different procedure address
in \fIfreeProc\fR up in order ta use a alternate memory allocator
or up in order ta do other cleanup when tha result memory is freed.
.PP
As part of processin each command, \fBTcl_Eval\fR initializes
\fIinterp->result\fR
and \fIinterp->freeProc\fR just before callin tha command procedure for
the command. Y'all KNOW dat shit, muthafucka!  Da \fIfreeProc\fR field is ghon be initialized ta zero,
and \fIinterp->result\fR will point ta a empty string.  Commandz that
do not return any value can simply leave tha fieldz ridin' solo.
Furthermore, tha empty strang pointed ta by \fIresult\fR be actually
part of a array of \fBTCL_RESULT_SIZE\fR charactas (approximately 200).
If a cold-ass lil command wishes ta return a gangbangin' finger-lickin' dirty-ass short string, it can simply copy
it ta tha area pointed ta by \fIinterp->result\fR.  Or, it can use
the sprintf procedure ta generate a gangbangin' finger-lickin' dirty-ass short result strang all up in tha location
pointed ta by \fIinterp->result\fR.
.PP
It be a general convention up in Tcl-based applications dat tha result
of a interpreta is normally up in tha initialized state busted lyrics about
in tha previous paragraph.
Procedures dat manipulate a interpreterz result (e.g. by
returnin a error) will generally assume dat tha result
has been initialized when tha procedure is called.
If such a procedure is ta be called afta tha result has been
changed, then \fBTcl_ResetResult\fR should be called first to
reset tha result ta its initialized state.  Da direct use of
\fIinterp->result\fR is straight fuckin deprecated (see \fBTcl_SetResult\fR).
.PP
Da \fIerrorLine\fR
field is valid only afta \fBTcl_Eval\fR returns
a \fBTCL_ERROR\fR return code.  In dis thang tha \fIerrorLine\fR
field identifies tha line number of tha command bein executed when
the error occurred. Y'all KNOW dat shit, muthafucka!  Da line numbers is relatizzle ta tha command
bein executed:  1 means tha straight-up original gangsta line of tha command passed to
\fBTcl_Eval\fR, 2 means tha second line, n' so on.
Da \fIerrorLine\fR field is typically used up in conjunction with
\fBTcl_AddErrorInfo\fR ta report shiznit bout where a error
occurred.
\fIErrorLine\fR should not normally be modified except by \fBTcl_Eval\fR.

.SH KEYWORDS
free, initialized, interpreter, malloc, result
