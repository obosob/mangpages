.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Email::Simple 3"
.TH Email::Simple 3 "2012-07-13" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Simple \- simple parsin of RFC2822 message format n' headers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Email::Simple;
\&  mah $email = Email::Simple\->new($text);
\&
\&  mah $from_header = $email\->header("From");
\&  mah @received = $email\->header("Received");
\&
\&  $email\->header_set("From", \*(AqSemen Cozens <simon@cpan.org>\*(Aq);
\&
\&  mah $old_body = $email\->body;
\&  $email\->body_set("Wuz crackalackin' ghetto\enSimon");
\&
\&  print $email\->as_string;
.Ve
.PP
\&...or, ta create a message from scratch...
.PP
.Vb 8
\&  mah $email = Email::Simple\->create(
\&      header => [
\&        From    => \*(Aqcasey@geeknest.com\*(Aq,
\&        To      => \*(Aqdrain@example.com\*(Aq,
\&        Subject => \*(AqMessage up in a funky-ass bottle\*(Aq,
\&      ],
\&      body => \*(Aq...\*(Aq,
\&  );
\&  
\&  $email\->header_set( \*(AqX\-Content\-Container\*(Aq => \*(Aqbottle/glass\*(Aq );
\&  
\&  print $email\->as_string;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Email::Simple\*(C'\fR is tha straight-up original gangsta deliverable of tha \*(L"Perl Email Project.\*(R"  The
Email:: namespace was begun as a erection against tha increasin complexitizzle and
bugginizz of Perlz existin email modules.  \f(CW\*(C`Email::*\*(C'\fR modulez is meant to
be simple ta use n' ta maintain, pared ta tha bone, fast, minimal up in their
external dependencies, n' erect.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  mah $email = Email::Simple\->new($message, \e%arg);
.Ve
.PP
This method parses a email from a scalar containin a \s-1RFC2822\s0 formatted
message n' returns a object.  \f(CW$message\fR may be a reference ta a message
string, up in which case tha strang is ghon be altered up in place.  This can result in
significant memory savings.
.PP
If you wanna create a message from scratch, you should use tha \f(CW"create"\fR
method.
.PP
Valid arguments are:
.PP
.Vb 2
\&  header_class \- tha class used ta create freshly smoked up header objects
\&                 Da named module aint \*(Aqrequire\*(Aq\-ed by Email::Simple!
.Ve
.SS "create"
.IX Subsection "create"
.Vb 1
\&  mah $email = Email::Simple\->create(header => [ @headaz ], body => \*(Aq...\*(Aq);
.Ve
.PP
This method be a cold-ass lil constructor dat creates a Email::Simple object
from a set of named parameters. Da \f(CW\*(C`header\*(C'\fR parameterz value be a
list reference containin a set of headaz ta be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \f(CW\*(C`body\*(C'\fR
parameterz value be a scalar value holdin tha contentz of tha message
body.  Line endings up in tha body will normalized ta \s-1CRLF.\s0
.PP
If no \f(CW\*(C`Date\*(C'\fR header is specified, one is ghon be provided fo' you based on the
\&\f(CW\*(C`gmtime\*(C'\fR of tha local machine. This is cuz tha \f(CW\*(C`Date\*(C'\fR field be a required
header n' be a pain up in tha neck ta create manually fo' every last muthafuckin message. The
\&\f(CW\*(C`From\*(C'\fR field be also a required header yo, but it is \fInot\fR provided fo' yo thugged-out ass.
.SS "header_obj"
.IX Subsection "header_obj"
.Vb 1
\&  mah $header = $email\->header_obj;
.Ve
.PP
This method returns tha object representin tha emailz header n' shit.  For the
interface fo' dis object, peep Email::Simple::Header.
.SS "header_obj_set"
.IX Subsection "header_obj_set"
.Vb 1
\&  $email\->header_obj_set($new_header_obj);
.Ve
.PP
This method substitutes tha given freshly smoked up header object fo' tha emailz existing
header object.
.SS "header"
.IX Subsection "header"
.Vb 2
\&  mah @values = $email\->header($header_name);
\&  mah $first  = $email\->header($header_name);
.Ve
.PP
In list context, dis returns every last muthafuckin value fo' tha named header n' shit.  In scalar
context, it returns tha \fIfirst\fR value fo' tha named header.
.SS "header_set"
.IX Subsection "header_set"
.Vb 1
\&    $email\->header_set($field, $line1, $line2, ...);
.Ve
.PP
Sets tha header ta contain tha given data. If you pass multiple lines
in, you git multiple headers, n' order is retained. Y'all KNOW dat shit, muthafucka!  If no joints is given to
set, tha header is ghon be removed from ta tha message entirely.
.SS "header_names"
.IX Subsection "header_names"
.Vb 1
\&    mah @header_names = $email\->header_names;
.Ve
.PP
This method returns tha list of header names currently up in tha email object.
These names can be passed ta tha \f(CW\*(C`header\*(C'\fR method one-at-a-time ta git header
values. Yo ass is guaranteed ta git a set of headaz dat is unique. Yo ass is not
guaranteed ta git tha headaz up in any order at all.
.PP
For backwardz compatibility, dis method can also be called as \fBheaders\fR.
.SS "header_pairs"
.IX Subsection "header_pairs"
.Vb 1
\&  mah @headaz = $email\->header_pairs;
.Ve
.PP
This method returns a list of pairs describin tha contentz of tha header.
Every other value, startin wit n' includin zeroth, be a header name n' the
value followin it is tha header value.
.SS "body"
.IX Subsection "body"
Returns tha body text of tha mail.
.SS "body_set"
.IX Subsection "body_set"
Sets tha body text of tha mail.
.SS "as_string"
.IX Subsection "as_string"
Returns tha mail as a string, reconstructin tha headers.
.SS "crlf"
.IX Subsection "crlf"
This method returns tha type of newline used up in tha email.  It be a accessor
only.
.SS "default_header_class"
.IX Subsection "default_header_class"
This returns tha class used, by default, fo' header objects, n' is provided
for subclassing.  Da default default is Email::Simple::Header.
.SH "CAVEATS"
.IX Header "CAVEATS"
Email::Simple handlez only \s-1RFC2822\s0 formatted lyrics.  This means you cannot
expect it ta cope well as tha only parser between you n' tha outside ghetto,
say fo' example when freestylin a mail filta fo' invocation from a .forward file
(for dis we recommend you use Email::Filta anyway).  For mo' shiznit
on dis issue please consult \s-1RT\s0 issue 2478,
<http://rt.cpan.org/NoAuth/Bug.html?id=2478>.
.SH "PERL EMAIL PROJECT"
.IX Header "PERL EMAIL PROJECT"
This module is maintained by tha Perl Email Project
.PP
<http://emailproject.perl.org/>
.SH "AUTHORS"
.IX Header "AUTHORS"
Semen Cozens originally freestyled Email::Simple up in 2003.  Casey Westside took over
maintenizzle up in 2004, n' Ricardo \s-1SIGNES\s0 took over maintenizzle up in 2006.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004 by Casey West
.PP
Copyright 2003 by Semen Cozens
.PP
This library is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
