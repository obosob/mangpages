.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant 3pm"
.TH ExtUtils::Constant 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant \- generate XS code ta import C header constants
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use ExtUtils::Constant qw (WriteConstants);
\&    WriteConstants(
\&        NAME => \*(AqFoo\*(Aq,
\&        NAMES => [qw(FOO BAR BAZ)],
\&    );
\&    # Generates wrapper code ta make tha jointz of tha constants FOO BAR BAZ
\&    #  available ta perl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant facilitates generatin C n' \s-1XS\s0 wrapper code ta allow
perl modulez ta \s-1AUTOLOAD\s0 constants defined up in C library header files.
It be principally used by tha \f(CW\*(C`h2xs\*(C'\fR utility, on which dis code is based.
It don't contain tha routines ta scan header filez ta extract these
constants.
.SH "USAGE"
.IX Header "USAGE"
Generally one only need ta call tha \f(CW\*(C`WriteConstants\*(C'\fR function, n' then
.PP
.Vb 1
\&    #include "const\-c.inc"
.Ve
.PP
in tha C section of \f(CW\*(C`Foo.xs\*(C'\fR
.PP
.Vb 1
\&    INCLUDE: const\-xs.inc
.Ve
.PP
in tha \s-1XS\s0 section of \f(CW\*(C`Foo.xs\*(C'\fR.
.PP
For pimped outa flexibilitizzle use \f(CW\*(C`constant_types()\*(C'\fR, \f(CW\*(C`C_constant\*(C'\fR and
\&\f(CW\*(C`XS_constant\*(C'\fR, wit which \f(CW\*(C`WriteConstants\*(C'\fR is implemented.
.PP
Currently dis module understandz tha followin types. h2xs may only know
a subset. Da sizez of tha numeric types is chosen by tha \f(CW\*(C`Configure\*(C'\fR
script at compile time.
.IP "\s-1IV\s0" 4
.IX Item "IV"
signed integer, at least 32 bits.
.IP "\s-1UV\s0" 4
.IX Item "UV"
unsigned integer, tha same size as \fI\s-1IV\s0\fR
.IP "\s-1NV\s0" 4
.IX Item "NV"
floatin point type, probably \f(CW\*(C`double\*(C'\fR, possibly \f(CW\*(C`long double\*(C'\fR
.IP "\s-1PV\s0" 4
.IX Item "PV"
\&\s-1NUL\s0 terminated string, length is ghon be determined wit \f(CW\*(C`strlen\*(C'\fR
.IP "\s-1PVN\s0" 4
.IX Item "PVN"
A fixed length thang, given as a [pointer, length] pair. Shiiit, dis aint no joke. If you know the
length of a strang at compile time you may use dis instead of \fI\s-1PV\s0\fR
.IP "\s-1SV\s0" 4
.IX Item "SV"
A \fBmortal\fR \s-1SV.\s0
.IP "\s-1YES\s0" 4
.IX Item "YES"
Truth.  (\f(CW\*(C`PL_sv_yes\*(C'\fR)  Da value aint needed (and ignored).
.IP "\s-1NO\s0" 4
.IX Item "NO"
Defined Falsehood. Y'all KNOW dat shit, muthafucka! I be fly as a gangbangin' falcon, soarin all up in tha sky dawwwwg!  (\f(CW\*(C`PL_sv_no\*(C'\fR)  Da value aint needed (and ignored).
.IP "\s-1UNDEF\s0" 4
.IX Item "UNDEF"
\&\f(CW\*(C`undef\*(C'\fR.  Da value of tha macro aint needed.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "constant_types" 4
.IX Item "constant_types"
A function returnin a single scalar wit \f(CW\*(C`#define\*(C'\fR definitions fo' the
constants used internally between tha generated C n' \s-1XS\s0 functions.
.IP "XS_constant \s-1PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME\s0" 4
.IX Item "XS_constant PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME"
A function ta generate tha \s-1XS\s0 code ta implement tha perl subroutine
\&\fI\s-1PACKAGE\s0\fR::constant used by \fI\s-1PACKAGE\s0\fR::AUTOLOAD ta load constants.
This \s-1XS\s0 code be a wrapper round a C subroutine probably generated by
\&\f(CW\*(C`C_constant\*(C'\fR, n' probably named \f(CW\*(C`constant\*(C'\fR.
.Sp
\&\fI\s-1TYPES\s0\fR should be given either as a cold-ass lil comma separated list of types dat the
C subroutine \f(CW\*(C`constant\*(C'\fR will generate or as a reference ta a hash. Well shiiiit, it should
be tha same list of types as \f(CW\*(C`C_constant\*(C'\fR was given.
[Otherwise \f(CW\*(C`XS_constant\*(C'\fR n' \f(CW\*(C`C_constant\*(C'\fR may have different scams about
the number of parametas passed ta tha C function \f(CW\*(C`constant\*(C'\fR]
.Sp
Yo ass can call tha perl visible subroutine suttin' other than \f(CW\*(C`constant\*(C'\fR if
you give tha parameta \fI\s-1XS_SUBNAME\s0\fR. Da C subroutine it calls defaults to
the name of tha perl visible subroutine, unless you give tha parameter
\&\fIC_SUBNAME\fR.
.IP "autoload \s-1PACKAGE, VERSION, AUTOLOADER\s0" 4
.IX Item "autoload PACKAGE, VERSION, AUTOLOADER"
A function ta generate tha \s-1AUTOLOAD\s0 subroutine fo' tha module \fI\s-1PACKAGE\s0\fR
\&\fI\s-1VERSION\s0\fR is tha perl version tha code should be backwardz compatible with.
It defaults ta tha version of perl hustlin tha subroutine.  If \fI\s-1AUTOLOADER\s0\fR
is true, tha \s-1AUTOLOAD\s0 subroutine falls back on AutoLoader::AUTOLOAD fo' all
names dat tha \fIconstant()\fR routine don't recognise.
.IP "WriteMakefileSnippet" 4
.IX Item "WriteMakefileSnippet"
WriteMakefileSnippet \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]
.Sp
A function ta generate perl code fo' Makefile.PL dat will regenerate
the constant subroutines.  Parametas is named as passed ta \f(CW\*(C`WriteConstants\*(C'\fR,
with tha addizzle of \f(CW\*(C`INDENT\*(C'\fR ta specify tha number of leadin spaces
(default 2).
.Sp
Currently only \f(CW\*(C`INDENT\*(C'\fR, \f(CW\*(C`NAME\*(C'\fR, \f(CW\*(C`DEFAULT_TYPE\*(C'\fR, \f(CW\*(C`NAMES\*(C'\fR, \f(CW\*(C`C_FILE\*(C'\fR and
\&\f(CW\*(C`XS_FILE\*(C'\fR is recognised.
.IP "WriteConstants \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]" 4
.IX Item "WriteConstants ATTRIBUTE => VALUE [, ...]"
Writes a gangbangin' file of C code n' a gangbangin' file of \s-1XS\s0 code which you should \f(CW\*(C`#include\*(C'\fR
and \f(CW\*(C`INCLUDE\*(C'\fR up in tha C n' \s-1XS\s0 sections respectively of yo' modulez \s-1XS\s0
code.  Yo ass probably wanna do dis up in yo' \f(CW\*(C`Makefile.PL\*(C'\fR, so dat you can
easily edit tha list of constants without touchin tha rest of yo' module.
Da attributes supported are
.RS 4
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
Name of tha module.  This must be specified
.IP "\s-1DEFAULT_TYPE\s0" 4
.IX Item "DEFAULT_TYPE"
Da default type fo' tha constants, n' you can put dat on yo' toast.  If not specified \f(CW\*(C`IV\*(C'\fR be assumed.
.IP "\s-1BREAKOUT_AT\s0" 4
.IX Item "BREAKOUT_AT"
Da namez of tha constants is grouped by length.  Generate lil pimp subroutines
for each crew wit dis number or mo' names in.
.IP "\s-1NAMES\s0" 4
.IX Item "NAMES"
An array of constants' names, either scalars containin names, or hashrefs
as detailed up in \*(L"C_constant\*(R".
.IP "\s-1PROXYSUBS\s0" 4
.IX Item "PROXYSUBS"
If true, uses proxy subs. Right back up in yo muthafuckin ass. See ExtUtils::Constant::ProxySubs.
.IP "C_FH" 4
.IX Item "C_FH"
A filehandle ta write tha C code to.  If not given, then \fIC_FILE\fR is opened
for writing.
.IP "C_FILE" 4
.IX Item "C_FILE"
Da name of tha file ta write containin tha C code.  Da default is
\&\f(CW\*(C`const\-c.inc\*(C'\fR.  Da \f(CW\*(C`\-\*(C'\fR up in tha name ensures dat tha file can't be
mistaken fo' anythang related ta a legitimate perl package name, and
not namin tha file \f(CW\*(C`.c\*(C'\fR avoidz havin ta override Makefile.PL's
\&\f(CW\*(C`.xs\*(C'\fR ta \f(CW\*(C`.c\*(C'\fR rules.
.IP "\s-1XS_FH\s0" 4
.IX Item "XS_FH"
A filehandle ta write tha \s-1XS\s0 code to.  If not given, then \fI\s-1XS_FILE\s0\fR is opened
for writing.
.IP "\s-1XS_FILE\s0" 4
.IX Item "XS_FILE"
Da name of tha file ta write containin tha \s-1XS\s0 code.  Da default is
\&\f(CW\*(C`const\-xs.inc\*(C'\fR.
.IP "\s-1XS_SUBNAME\s0" 4
.IX Item "XS_SUBNAME"
Da perl visible name of tha \s-1XS\s0 subroutine generated which will return the
constants, n' you can put dat on yo' toast. Da default is \f(CW\*(C`constant\*(C'\fR.
.IP "C_SUBNAME" 4
.IX Item "C_SUBNAME"
Da name of tha C subroutine generated which will return tha constants.
Da default is \fI\s-1XS_SUBNAME\s0\fR.  Lil Pimp subroutines have \f(CW\*(C`_\*(C'\fR n' tha name
length appended, so constants wit 10 characta names would be in
\&\f(CW\*(C`constant_10\*(C'\fR wit tha default \fI\s-1XS_SUBNAME\s0\fR.
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on tha code up in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
