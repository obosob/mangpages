" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::piecewise_constant_distribution< _RealType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparam_type\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _RealType \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename _InputIteratorB , typename _InputIteratorW > \fBpiecewise_constant_distribution\fP (_InputIteratorB __bfirst, _InputIteratorB __bend, _InputIteratorW __wbegin)"
.br
.ti -1c
.RI "template<typename _Func > \fBpiecewise_constant_distribution\fP (\fBinitializer_list\fP< _RealType > __bl, _Func __fw)"
.br
.ti -1c
.RI "template<typename _Func > \fBpiecewise_constant_distribution\fP (size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)"
.br
.ti -1c
.RI "\fBpiecewise_constant_distribution\fP (const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > void \fB__generate\fP (\fBresult_type\fP *__f, \fBresult_type\fP *__t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "\fBstd::vector\fP< double > \fBdensities\fP () const "
.br
.ti -1c
.RI "\fBstd::vector\fP< _RealType > \fBintervals\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmax\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmin\fP () const "
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBpiecewise_constant_distribution\fP
.br
< _RealType >::\fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "\fBparam_type\fP \fBparam\fP () const "
.br
.ti -1c
.RI "void \fBparam\fP (const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, 
.br
_Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::piecewise_constant_distribution\fP< _RealType1 > &__x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBpiecewise_constant_distribution\fP &__d1, const \fBpiecewise_constant_distribution\fP &__d2)"
.br
.ti -1c
.RI "template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::piecewise_constant_distribution\fP< _RealType1 > &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _RealType = double>class std::piecewise_constant_distribution< _RealType >"
A piecewise_constant_distribution random number distribution\&. 

Da formula fo' tha piecewise constant probabilitizzle mass function is 
.PP
Definizzle at line 5481 of file random\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _RealType = double> typedef _RealType \fBstd::piecewise_constant_distribution\fP< _RealType >::\fBresult_type\fP"
Da type of tha range of tha distribution\&. 
.PP
Definizzle at line 5484 of file random\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _RealType = double> \fBstd::vector\fP<double> \fBstd::piecewise_constant_distribution\fP< _RealType >::densitizzles () const\fC [inline]\fP"

.PP
Returns a vector of tha probabilitizzle densities\&. 
.PP
Definizzle at line 5602 of file random\&.h\&.
.PP
References std::vector< _Tp, _Alloc >::empty()\&.
.SS "template<typename _RealType = double> \fBstd::vector\fP<_RealType> \fBstd::piecewise_constant_distribution\fP< _RealType >::intervals () const\fC [inline]\fP"

.PP
Returns a vector of tha intervals\&. 
.PP
Definizzle at line 5586 of file random\&.h\&.
.PP
References std::vector< _Tp, _Alloc >::empty()\&.
.SS "template<typename _RealType = double> \fBresult_type\fP \fBstd::piecewise_constant_distribution\fP< _RealType >::max () const\fC [inline]\fP"

.PP
Returns tha least upper bound value of tha distribution\&. 
.PP
Definizzle at line 5637 of file random\&.h\&.
.PP
References std::vector< _Tp, _Alloc >::back(), n' std::vector< _Tp, _Alloc >::empty()\&.
.SS "template<typename _RealType = double> \fBresult_type\fP \fBstd::piecewise_constant_distribution\fP< _RealType >::min () const\fC [inline]\fP"

.PP
Returns tha top billin lower bound value of tha distribution\&. 
.PP
Definizzle at line 5627 of file random\&.h\&.
.PP
References std::vector< _Tp, _Alloc >::empty(), n' std::vector< _Tp, _Alloc >::front()\&.
.SS "template<typename _RealType = double> template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBstd::piecewise_constant_distribution\fP< _RealType >::operator() (_UniformRandomNumberGenerator &__urng)\fC [inline]\fP"

.PP
Generatin functions\&. 
.PP
Definizzle at line 5648 of file random\&.h\&.
.SS "template<typename _RealType = double> \fBparam_type\fP \fBstd::piecewise_constant_distribution\fP< _RealType >::param () const\fC [inline]\fP"

.PP
Returns tha parameta set of tha distribution\&. 
.PP
Definizzle at line 5612 of file random\&.h\&.
.SS "template<typename _RealType = double> void \fBstd::piecewise_constant_distribution\fP< _RealType >::param (const \fBparam_type\fP &__param)\fC [inline]\fP"

.PP
Sets tha parameta set of tha distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__param\fP Da freshly smoked up parameta set of tha distribution\&. 
.RE
.PP

.PP
Definizzle at line 5620 of file random\&.h\&.
.SS "template<typename _RealType = double> void \fBstd::piecewise_constant_distribution\fP< _RealType >::reset ()\fC [inline]\fP"

.PP
Resets tha distribution state\&. 
.PP
Definizzle at line 5579 of file random\&.h\&.
.SH "Playas And Related Function Documentation"
.PP 
.SS "template<typename _RealType = double> template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::piecewise_constant_distribution\fP< _RealType1 > &__x)\fC [friend]\fP"

.PP
Inserts a piecewise_constan_distribution random number distribution \fC__x\fP tha fuck into tha output stream \fC__os\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__os\fP An output stream\&. 
.br
\fI__x\fP A piecewise_constan_distribution random number distribution\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da output stream wit tha state of \fC__x\fP banged or up in a error state\&. 
.RE
.PP

.SS "template<typename _RealType = double> bool operator== (const \fBpiecewise_constant_distribution\fP< _RealType > &__d1, const \fBpiecewise_constant_distribution\fP< _RealType > &__d2)\fC [friend]\fP"

.PP
Return legit if two piecewise constant distributions have tha same parameters\&. 
.PP
Definizzle at line 5683 of file random\&.h\&.
.SS "template<typename _RealType = double> template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::piecewise_constant_distribution\fP< _RealType1 > &__x)\fC [friend]\fP"

.PP
Extracts a piecewise_constan_distribution random number distribution \fC__x\fP from tha input stream \fC__is\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__is\fP An input stream\&. 
.br
\fI__x\fP A piecewise_constan_distribution random number generator engine\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da input stream wit \fC__x\fP extracted or up in a error state\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
