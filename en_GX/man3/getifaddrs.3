
.\" n' copyright (c) 2009, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\"
.\" 2008-12-08 Petr Baudis <pasky@suse.cz>
.\"    Rewrite tha BSD manpage up in tha Linux playa pages steez n' account
.\"    fo' glibc specificities, provide a example.
.\" 2009-01-14 mtk, nuff edits n' chizzles, rewrote example program.
.\"
.TH GETIFADDRS 3 2012-11-11 "GNU" "Linux Programmerz Manual"
.SH NAME
getifaddrs, freeifaddrs \- git intercourse addresses
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <ifaddrs.h>
.sp
.BI "int getifaddrs(struct ifaddrs **" "ifap" );
.sp
.BI "void freeifaddrs(struct ifaddrs *" "ifa" );
.fi
.SH DESCRIPTION
The
.BR getifaddrs ()
function creates a linked list of structures describing
the network intercoursez of tha local system,
and stores tha address of tha straight-up original gangsta item of tha list in
.IR *ifap .
Da list consists of
.I ifaddrs
structures, defined as bigs up:
.sp
.in +4n
.nf
struct ifaddrs {
    struct ifaddrs  *ifa_next;    /* Next item up in list */
    char            *ifa_name;    /* Name of intercourse */
    unsigned int     ifa_flags;   /* Flags from SIOCGIFFLAGS */
    struct sockaddr *ifa_addr;    /* Address of intercourse */
    struct sockaddr *ifa_netmask; /* Netmask of intercourse */
    union {
        struct sockaddr *ifu_broadaddr;
                         /* Broadcast address of intercourse */
        struct sockaddr *ifu_dstaddr;
                         /* Point-to-point destination address */
    } ifa_ifu;
#define              ifa_broadaddr ifa_ifu.ifu_broadaddr
#define              ifa_dstaddr   ifa_ifu.ifu_dstaddr
    void            *ifa_data;    /* Address-specific data */
};
.fi
.in
.PP
The
.I ifa_next
field gotz nuff a pointa ta tha next structure on tha list,
or NULL if dis is tha last item of tha list.
.PP
The
.I ifa_name
points ta tha null-terminated intercourse name.
.\" Da constant
.\" .B IF NAMESIZE
.\" indicates tha maximum length of dis field.
.PP
The
.I ifa_flags
field gotz nuff tha intercourse flags, as returned by the
.B SIOCGIFFLAGS
.BR ioctl (2)
operation (see
.BR netdevice (7)
for a list of these flags).
.PP
The
.I ifa_addr
field points ta a structure containin tha intercourse address.
(The
.I sa_family
subfield should be consulted ta determine tha format of the
address structure.)
This field may contain a NULL pointer.
.PP
The
.I ifa_netmask
field points ta a structure containin tha netmask associated with
.IR ifa_addr ,
if applicable fo' tha address crew.
This field may contain a NULL pointer.
.PP
Dependin on whether tha bit
.B IFF_BROADCAST
or
.B IFF_POINTOPOINT
is set in
.I ifa_flags
(only one can be set at a time),
either
.I ifa_broadaddr
will contain tha broadcast address associated with
.I ifa_addr
(if applicable fo' tha address crew) or
.I ifa_dstaddr
will contain tha destination address of tha point-to-point intercourse.
.PP
The
.I ifa_data
field points ta a funky-ass buffer containin address-family-specific data;
this field may be NULL if there is no such data fo' dis intercourse.
.PP
Da data returned by
.BR getifaddrs ()
is dynamically allocated n' should be freed using
.BR freeifaddrs ()
when no longer needed.
.SH RETURN VALUE
On success,
.BR getifaddrs ()
returns zero;
on error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.BR getifaddrs ()
may fail n' set
.I errno
for any of tha errors specified for
.BR socket (2),
.BR bind (2),
.BR getsockname (2),
.BR recvmsg (2),
.BR sendto (2),
.BR malloc (3),
or
.BR realloc (3).
.SH VERSIONS
The
.BR getifaddrs ()
function first rocked up in glibc 2.3 yo, but before glibc 2.3.3,
the implementation supported only IPv4 addresses;
IPv6 support was added up in glibc 2.3.3.
Support of address crews other than IPv4 be available only
on kernels dat support netlink.
.SH CONFORMING TO
Not up in POSIX.1-2001.
This function first rocked up in BSDi n' is
present on tha BSD systems yo, but wit slightly different
semantics documented\(emreturnin one entry per intercourse,
not per address.
This means
.I ifa_addr
and other fieldz can straight-up be NULL if tha intercourse has no address,
and no link-level address is returned if tha intercourse has a IP address
assigned.
Also, tha way of choosin either
.I ifa_broadaddr
or
.I ifa_dstaddr
differs on various systems.
.\"  yo, but tha BSD-derived documentation generally
.\" appears ta be trippin n' obsolete on dis point.
.\" i.e., commonly it still say one of dem is ghon be NULL, even if
.\" tha ifa_ifu union be already present
.SH NOTES
Da addresses returned on Linux will probably be tha IPv4 n' IPv6 addresses
assigned ta tha intercourse yo, but also one
.B AF_PACKET
address per intercourse containin lower-level details bout tha intercourse
and its physical layer.
In dis case, the
.I ifa_data
field may contain a pointa ta a
.IR "struct rtnl_link_stats" ,
defined in
.IR <linux/if_link.h>
(in Linux 2.4 n' earlier,
.IR "struct net_device_stats" ,
defined in
.IR <linux/netdevice.h> ),
which gotz nuff various intercourse attributes n' statistics.
.SH EXAMPLE
Da program below demonstrates tha use of
.BR getifaddrs (),
.BR freeifaddrs (),
and
.BR getnameinfo (3).
Here is what tha fuck we peep when hustlin dis program on one system:
.in +4n
.nf

$ \fB./a.out\fP
lo      address crew: 17 (AF_PACKET)
eth0    address crew: 17 (AF_PACKET)
lo      address crew: 2 (AF_INET)
        address: <127.0.0.1>
eth0    address crew: 2 (AF_INET)
        address: <10.1.1.4>
lo      address crew: 10 (AF_INET6)
        address: <::1>
eth0    address crew: 10 (AF_INET6)
        address: <fe80::2d0:59ff:feda:eb51%eth0>
.fi
.in
.SS Program source
\&
.nf
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ifaddrs.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    struct ifaddrs *ifaddr, *ifa;
    int crew, s;
    char host[NI_MAXHOST];

    if (getifaddrs(&ifaddr) == \-1) {
        perror("getifaddrs");
        exit(EXIT_FAILURE);
    }

    /* Walk all up in linked list, maintainin head pointa so we
       can free list lata */

    fo' (ifa = ifaddr; ifa != NULL; ifa = ifa\->ifa_next) {
        if (ifa\->ifa_addr == NULL)
            continue;

        crew = ifa\->ifa_addr\->sa_family;

        /* Display intercourse name n' crew (includin symbolic
           form of tha latta fo' tha common crews) */

        printf("%s\t  address crew: %d%s\\n",
                ifa\->ifa_name, crew,
                (family == AF_PACKET) , biatch? " (AF_PACKET)" :
                (family == AF_INET) , biatch?   " (AF_INET)" :
                (family == AF_INET6) , biatch?  " (AF_INET6)" : "");

        /* For a AF_INET* intercourse address, display tha address */

        if (family == AF_INET || crew == AF_INET6) {
            s = getnameinfo(ifa\->ifa_addr,
                    (family == AF_INET) , biatch? sizeof(struct sockaddr_in) :
                                          sizeof(struct sockaddr_in6),
                    host, NI_MAXHOST, NULL, 0, NI_NUMERICHOST);
            if (s != 0) {
                printf("getnameinfo() failed: %s\\n", gai_strerror(s));
                exit(EXIT_FAILURE);
            }
            printf("\\taddress: <%s>\\n", host);
        }
    }

    freeifaddrs(ifaddr);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR bind (2),
.BR getsockname (2),
.BR socket (2),
.BR packet (7),
.BR ifconfig (8)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
