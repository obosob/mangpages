.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tie::Handle 3pm"
.TH Tie::Handle 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tie::Handle \- base class definitions fo' tied handles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package NewHandle;
\&    require Tie::Handle;
\&
\&    @ISA = qw(Tie::Handle);
\&
\&    sub READ { ... }            # Provide a needed method
\&    sub TIEHANDLE { ... }       # Overrides inherited method
\&
\&
\&    package main;
\&
\&    tie *FH, \*(AqNewHandle\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up some skeletal methodz fo' handle-tyin classes. Right back up in yo muthafuckin ass. See
perltie fo' a list of tha functions required up in tyin a handle ta a package.
Da basic \fBTie::Handle\fR package serves up a \f(CW\*(C`new\*(C'\fR method, as well as methods
\&\f(CW\*(C`TIEHANDLE\*(C'\fR, \f(CW\*(C`PRINT\*(C'\fR, \f(CW\*(C`PRINTF\*(C'\fR n' \f(CW\*(C`GETC\*(C'\fR.
.PP
For pimpers wishin ta write they own tied-handle classes, tha methods
are summarized below. Da perltie section not only documents these yo, but
has sample code as well:
.IP "\s-1TIEHANDLE\s0 classname, \s-1LIST\s0" 4
.IX Item "TIEHANDLE classname, LIST"
Da method invoked by tha command \f(CW\*(C`tie *glob, classname\*(C'\fR fo' realz. Associates a new
glob instizzle wit tha specified class. \f(CW\*(C`LIST\*(C'\fR would represent additional
arguments (along tha linez of AnyDBM_File n' compatriots) needed to
complete tha association.
.IP "\s-1WRITE\s0 this, scalar, length, offset" 4
.IX Item "WRITE this, scalar, length, offset"
Write \fIlength\fR bytez of data from \fIscalar\fR startin at \fIoffset\fR.
.IP "\s-1PRINT\s0 this, \s-1LIST\s0" 4
.IX Item "PRINT this, LIST"
Print tha joints up in \fI\s-1LIST\s0\fR
.IP "\s-1PRINTF\s0 this, format, \s-1LIST\s0" 4
.IX Item "PRINTF this, format, LIST"
Print tha joints up in \fI\s-1LIST\s0\fR rockin \fIformat\fR
.IP "\s-1READ\s0 this, scalar, length, offset" 4
.IX Item "READ this, scalar, length, offset"
Read \fIlength\fR bytez of data tha fuck into \fIscalar\fR startin at \fIoffset\fR.
.IP "\s-1READLINE\s0 this" 4
.IX Item "READLINE this"
Read a single line
.IP "\s-1GETC\s0 this" 4
.IX Item "GETC this"
Git a single character
.IP "\s-1CLOSE\s0 this" 4
.IX Item "CLOSE this"
Close tha handle
.IP "\s-1OPEN\s0 this, filename" 4
.IX Item "OPEN this, filename"
(Re\-)open tha handle
.IP "\s-1BINMODE\s0 this" 4
.IX Item "BINMODE this"
Specify content is binary
.IP "\s-1EOF\s0 this" 4
.IX Item "EOF this"
Test fo' end of file.
.IP "\s-1TELL\s0 this" 4
.IX Item "TELL this"
Return posizzle up in tha file.
.IP "\s-1SEEK\s0 this, offset, whence" 4
.IX Item "SEEK this, offset, whence"
Posizzle tha file.
.Sp
Test fo' end of file.
.IP "\s-1DESTROY\s0 this" 4
.IX Item "DESTROY this"
Jacked tha storage associated wit tha tied handle referenced by \fIthis\fR.
This is rarely needed, as Perl manages its memory like well. But the
option exists, should a cold-ass lil class wish ta big-ass up specific actions upon the
destruction of a instance.
.SH "MORE INFORMATION"
.IX Header "MORE INFORMATION"
Da perltie section gotz nuff a example of tyin handles.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
This version of Tie::Handle is neither related ta nor compatible with
the Tie::Handle (3.0) module available on \s-1CPAN.\s0 Dat shiznit was cuz of an
accident dat two modulez wit tha same name rocked up. Y'all KNOW dat shit, muthafucka! Da namespace
clash has been cleared up in favor of dis module dat comes wit the
perl core up in September 2000 n' accordingly tha version number has
been bumped up ta 4.0.
