'\"
'\" Copyright (c) 1996-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_OpenFileChannel 3 8.3 Tcl "Tcl Library Procedures"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
Tcl_OpenFileChannel, Tcl_OpenCommandChannel, Tcl_MakeFileChannel, Tcl_GetChannel, Tcl_GetChannelNames, Tcl_GetChannelNamesEx, Tcl_RegisterChannel, Tcl_UnregisterChannel, Tcl_DetachChannel, Tcl_IsStandardChannel, Tcl_Close, Tcl_ReadChars, Tcl_Read, Tcl_GetsObj, Tcl_Gets, Tcl_WriteObj, Tcl_WriteChars, Tcl_Write, Tcl_Flush, Tcl_Seek, Tcl_Tell, Tcl_TruncateChannel, Tcl_GetChannelOption, Tcl_SetChannelOption, Tcl_Eof, Tcl_InputBlocked, Tcl_InputBuffered, Tcl_OutputBuffered, Tcl_Ungets, Tcl_ReadRaw, Tcl_WriteRaw \- buffered I/O facilitizzles rockin channels
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Channel
\fBTcl_OpenFileChannel\fR(\fIinterp, fileName, mode, permissions\fR)
.sp
Tcl_Channel
\fBTcl_OpenCommandChannel\fR(\fIinterp, argc, argv, flags\fR)
.sp
Tcl_Channel
\fBTcl_MakeFileChannel\fR(\fIhandle, readOrWrite\fR)
.sp
Tcl_Channel
\fBTcl_GetChannel\fR(\fIinterp, channelName, modePtr\fR)
.sp
int
\fBTcl_GetChannelNames\fR(\fIinterp\fR)
.sp
int
\fBTcl_GetChannelNamesEx\fR(\fIinterp, pattern\fR)
.sp
void
\fBTcl_RegisterChannel\fR(\fIinterp, channel\fR)
.sp
int
\fBTcl_UnregisterChannel\fR(\fIinterp, channel\fR)
.sp
int
\fBTcl_DetachChannel\fR(\fIinterp, channel\fR)
.sp
int
\fBTcl_IsStandardChannel\fR(\fIchannel\fR)
.sp
int
\fBTcl_Close\fR(\fIinterp, channel\fR)
.sp
int
\fBTcl_ReadChars\fR(\fIchannel, readObjPtr, charsToRead, appendFlag\fR)
.sp
int
\fBTcl_Read\fR(\fIchannel, readBuf, bytesToRead\fR)
.sp
int
\fBTcl_GetsObj\fR(\fIchannel, lineObjPtr\fR)
.sp
int
\fBTcl_Gets\fR(\fIchannel, lineRead\fR)
.sp
int
\fBTcl_Ungets\fR(\fIchannel, input, inputLen, addAtEnd\fR)
.sp
int
\fBTcl_WriteObj\fR(\fIchannel, writeObjPtr\fR)
.sp
int
\fBTcl_WriteChars\fR(\fIchannel, charBuf, bytesToWrite\fR)
.sp
int
\fBTcl_Write\fR(\fIchannel, byteBuf, bytesToWrite\fR)
.sp
int
\fBTcl_ReadRaw\fR(\fIchannel, readBuf, bytesToRead\fR)
.sp
int
\fBTcl_WriteRaw\fR(\fIchannel, byteBuf, bytesToWrite\fR)
.sp
int
\fBTcl_Eof\fR(\fIchannel\fR)
.sp
int
\fBTcl_Flush\fR(\fIchannel\fR)
.sp
int
\fBTcl_InputBlocked\fR(\fIchannel\fR)
.sp
int
\fBTcl_InputBuffered\fR(\fIchannel\fR)
.sp
int
\fBTcl_OutputBuffered\fR(\fIchannel\fR)
.sp
Tcl_WideInt
\fBTcl_Seek\fR(\fIchannel, offset, seekMode\fR)
.sp
Tcl_WideInt
\fBTcl_Tell\fR(\fIchannel\fR)
.sp
.VS 8.5
int
\fBTcl_TruncateChannel\fR(\fIchannel, length\fR)
.VE 8.5
.sp
int
\fBTcl_GetChannelOption\fR(\fIinterp, channel, optionName, optionValue\fR)
.sp
int
\fBTcl_SetChannelOption\fR(\fIinterp, channel, optionName, newValue\fR)
.sp
.SH ARGUMENTS
.AS Tcl_DStrin *channelName in/out
.AP Tcl_Interp *interp in
Used fo' error reportin n' ta look up a cold-ass lil channel registered up in dat shit.
.AP "const char" *fileName in
Da name of a local or network file.
.AP "const char" *mode in
Specifies how tha fuck tha file is ta be accessed. Y'all KNOW dat shit, muthafucka!  May have any of tha joints
allowed fo' tha \fImode\fR argument ta tha Tcl \fBopen\fR command. Y'all KNOW dat shit, muthafucka!  
.AP int permissions in
POSIX-style permission flags like fuckin 0644.  If a freshly smoked up file is pimped, these
permissions is ghon be set on tha pimped file.
.AP int argc in
Da number of elements up in \fIargv\fR.
.AP "const char" **argv in
Arguments fo' constructin a cold-ass lil command pipeline.  These joints have tha same
meanin as tha non-switch arguments ta tha Tcl \fBexec\fR command.
.AP int flags in
Specifies tha disposizzle of tha stdio handlez up in pipeline: OR-ed
combination of \fBTCL_STDIN\fR, \fBTCL_STDOUT\fR, \fBTCL_STDERR\fR, and
\fBTCL_ENFORCE_MODE\fR. If \fBTCL_STDIN\fR is set, stdin fo' tha straight-up original gangsta child
in tha pipe is tha pipe channel, otherwise it is tha same ol' dirty as tha standard
input of tha invokin process; likewise fo' \fBTCL_STDOUT\fR and
\fBTCL_STDERR\fR. If \fBTCL_ENFORCE_MODE\fR aint set, then tha pipe can
redirect stdio handlez ta override tha stdio handlez fo' which
\fBTCL_STDIN\fR, \fBTCL_STDOUT\fR n' \fBTCL_STDERR\fR done been set.  If it
is set, then such redirections cause a error.
.AP ClientData handle in
Operatin system specific handle fo' I/O ta a gangbangin' file. For Unix dis be a
file descriptor, fo' Windows it aint nuthin but a HANDLE.
.AP int readOrWrite in
OR-ed combination of \fBTCL_READABLE\fR n' \fBTCL_WRITABLE\fR ta indicate
what operations is valid on \fIhandle\fR.
.AP "const char" *channelName in
Da name of tha channel. 
.AP int *modePtr out
Points at a integer variable dat will receive a OR-ed combination of
\fBTCL_READABLE\fR n' \fBTCL_WRITABLE\fR denotin whether tha channel is
open fo' readin n' writing.
.AP "const char" *pattern in
Da pattern ta match on, passed ta Tcl_StringMatch, or NULL.
.AP Tcl_Channel channel in
A Tcl channel fo' input or output.  Must done been tha return value
from a procedure like fuckin \fBTcl_OpenFileChannel\fR.
.AP Tcl_Obj *readObjPtr in/out
A pointa ta a Tcl Object up in which ta store tha charactas read from the
channel.
.AP int charsToRead in
Da number of charactas ta read from tha channel.  If tha channelz encodin 
is \fBbinary\fR, dis is equivalent ta tha number of bytes ta read from tha 
channel.
.AP int appendFlag in
If non-zero, data read from tha channel is ghon be appended ta tha object.
Otherwise, tha data will replace tha existin contentz of tha object.
.AP char *readBuf out
A buffer up in which ta store tha bytes read from tha channel.
.AP int bytesToRead in
Da number of bytes ta read from tha channel.  Da buffer \fIreadBuf\fR must
be big-ass enough ta hold dis nuff bytes.
.AP Tcl_Obj *lineObjPtr in/out
A pointa ta a Tcl object up in which ta store tha line read from the
channel.  Da line read is ghon be appended ta tha current value of the
object. 
.AP Tcl_DStrin *lineRead in/out
A pointa ta a Tcl dynamic strang up in which ta store tha line read from the
channel.  Must done been initialized by tha calla n' shit.  Da line read will be
appended ta any data already up in tha dynamic string.
.AP "const char" *input in
Da input ta add ta a cold-ass lil channel buffer.
.AP int inputLen in
Length of tha input
.AP int addAtEnd in
Flag indicatin whether tha input should be added ta tha end or
beginnin of tha channel buffer.
.AP Tcl_Obj *writeObjPtr in
A pointa ta a Tcl Object whose contents is ghon be output ta tha channel.
.AP "const char" *charBuf in
A buffer containin tha charactas ta output ta tha channel.
.AP "const char" *byteBuf in
A buffer containin tha bytes ta output ta tha channel.
.AP int bytesToWrite in
Da number of bytes ta consume from \fIcharBuf\fR or \fIbyteBuf\fR and
output ta tha channel.
.AP Tcl_WideInt offset in
How tha fuck far ta move tha access point up in tha channel at which tha next input or
output operation is ghon be applied, measured up in bytes from tha position
given by \fIseekMode\fR.  May be either positizzle or negative.
.AP int seekMode in
Relatizzle ta which point ta seek; used wit \fIoffset\fR ta calculate tha new
access point fo' tha channel. Legal joints is \fBSEEK_SET\fR,
\fBSEEK_CUR\fR, n' \fBSEEK_END\fR.
.AP Tcl_WideInt length in
Da (non-negative) length ta truncate tha channel tha channel to.
.AP "const char" *optionName in
Da name of a option applicable ta dis channel, like fuckin \fB\-blocking\fR.
May have any of tha joints accepted by tha \fBfconfigure\fR command.
.AP Tcl_DStrin *optionValue in
Where ta store tha value of a option or a list of all options n' their
values. Must done been initialized by tha caller.
.AP "const char" *newValue in
New value fo' tha option given by \fIoptionName\fR.
.BE

.SH DESCRIPTION
.PP
Da Tcl channel mechanizzle serves up a thugged-out device-independent and
platform-independent mechanizzle fo' struttin buffered input
and output operations on a variety of file, socket, n' device
types.
Da channel mechanizzle is extensible ta freshly smoked up channel types, by
providin a low-level channel driver fo' tha freshly smoked up type; tha channel driver
interface is busted lyrics bout up in tha manual entry fo' \fBTcl_CreateChannel\fR. The
channel mechanizzle serves up a funky-ass bufferin scheme modeled after
Unixz standard I/O, n' it also allows fo' nonblockin I/O on
channels.
.PP
Da procedures busted lyrics bout up in dis manual entry comprise tha C APIz of the
generic layer of tha channel architecture. For a thugged-out description of tha channel
driver architecture n' how tha fuck ta implement channel drivers fo' freshly smoked up types of
channels, peep tha manual entry fo' \fBTcl_CreateChannel\fR.

.SH TCL_OPENFILECHANNEL
.PP
\fBTcl_OpenFileChannel\fR opens a gangbangin' file specified by \fIfileName\fR and
returns a cold-ass lil channel handle dat can be used ta big-ass up input n' output on
the file. This API is modeled afta tha \fBfopen\fR procedure of
the Unix standard I/O library.
Da syntax n' meanin of all arguments is similar ta them
given up in tha Tcl \fBopen\fR command when openin a gangbangin' file.
If a error occurs while openin tha channel, \fBTcl_OpenFileChannel\fR
returns NULL n' recordz a POSIX error code dat can be
retrieved wit \fBTcl_GetErrno\fR.
In addition, if \fIinterp\fR is non-NULL, \fBTcl_OpenFileChannel\fR
leaves a error message up in \fIinterp\fRz result afta any error. Shiiit, dis aint no joke.  
Az of Tcl 8.4, tha object-based API \fBTcl_FSOpenFileChannel\fR should 
be used up in preference ta \fBTcl_OpenFileChannel\fR wherever possible.
.PP
Da newly pimped channel aint registered up in tha supplied interpreter; to
regista it, use \fBTcl_RegisterChannel\fR, busted lyrics bout below.
If one of tha standard channels, \fBstdin, stdout\fR or \fBstderr\fR was
previously closed, tha act of bustin tha freshly smoked up channel also assigns it as a
replacement fo' tha standard channel.

.SH TCL_OPENCOMMANDCHANNEL
.PP
\fBTcl_OpenCommandChannel\fR serves up a C-level intercourse ta the
functionz of tha \fBexec\fR n' \fBopen\fR commands.
It creates a sequence of subprocesses specified
by tha \fIargv\fR n' \fIargc\fR arguments n' returns a cold-ass lil channel dat can
be used ta rap wit these subprocesses.
Da \fIflags\fR argument indicates what tha fuck sort of communication will
exist wit tha command pipeline.
.PP
If tha \fBTCL_STDIN\fR flag is set then tha standard input fo' the
first subprocess is ghon be tied ta tha channel: freestylin ta tha channel
will provide input ta tha subprocess.  If \fBTCL_STDIN\fR aint set,
then standard input fo' tha straight-up original gangsta subprocess is ghon be tha same as this
applicationz standard input.  If \fBTCL_STDOUT\fR is set then
standard output from tha last subprocess can be read from tha channel;
otherwise it goes ta dis applicationz standard output.  If
\fBTCL_STDERR\fR is set, standard error output fo' all subprocesses is
returned ta tha channel n' thangs up in dis biatch up in a error when tha channel is
closed; otherwise it goes ta dis applicationz standard error. Shiiit, dis aint no joke.  If
\fBTCL_ENFORCE_MODE\fR aint set, then \fIargc\fR n' \fIargv\fR can
redirect tha stdio handlez ta override \fBTCL_STDIN\fR,
\fBTCL_STDOUT\fR, n' \fBTCL_STDERR\fR; if it is set, then it be an
error fo' argc n' argv ta override stdio channels fo' which
\fBTCL_STDIN\fR, \fBTCL_STDOUT\fR, n' \fBTCL_STDERR\fR done been set.
.PP
If a error occurs while openin tha channel, \fBTcl_OpenCommandChannel\fR
returns NULL n' recordz a POSIX error code dat can be retrieved with
\fBTcl_GetErrno\fR.
In addition, \fBTcl_OpenCommandChannel\fR leaves a error message in
the interpreterz result if \fIinterp\fR aint NULL.
.PP
Da newly pimped channel aint registered up in tha supplied interpreter; to
regista it, use \fBTcl_RegisterChannel\fR, busted lyrics bout below.
If one of tha standard channels, \fBstdin, stdout\fR or \fBstderr\fR was
previously closed, tha act of bustin tha freshly smoked up channel also assigns it as a
replacement fo' tha standard channel.

.SH TCL_MAKEFILECHANNEL
.PP
\fBTcl_MakeFileChannel\fR cook up a \fBTcl_Channel\fR from a existing,
platform-specific, file handle.
Da newly pimped channel aint registered up in tha supplied interpreter; to
regista it, use \fBTcl_RegisterChannel\fR, busted lyrics bout below.
If one of tha standard channels, \fBstdin, stdout\fR or \fBstderr\fR was
previously closed, tha act of bustin tha freshly smoked up channel also assigns it as a
replacement fo' tha standard channel.

.SH TCL_GETCHANNEL
.PP
\fBTcl_GetChannel\fR returns a cold-ass lil channel given tha \fIchannelName\fR used to
create it wit \fBTcl_CreateChannel\fR n' a pointa ta a Tcl interpreta in
\fIinterp\fR. If a cold-ass lil channel by dat name aint registered up in dat interpreter,
the procedure returns NULL. If tha \fImodePtr\fR argument aint NULL, it
points at a integer variable dat will receive a OR-ed combination of
\fBTCL_READABLE\fR n' \fBTCL_WRITABLE\fR describin whether tha channel is
open fo' readin n' writing.
.PP
\fBTcl_GetChannelNames\fR n' \fBTcl_GetChannelNamesEx\fR write the
namez of tha registered channels ta tha interpreterz result as a
list object.  \fBTcl_GetChannelNamesEx\fR will filta these names
accordin ta tha \fIpattern\fR.  If \fIpattern\fR is NULL, then it
will not do any filtering.  Da return value is \fBTCL_OK\fR if no
errors occurred freestylin ta tha result, otherwise it is \fBTCL_ERROR\fR,
and tha error message is left up in tha interpreterz result.

.SH TCL_REGISTERCHANNEL
.PP
\fBTcl_RegisterChannel\fR addz a cold-ass lil channel ta tha set of channels accessible
in \fIinterp\fR fo' realz. Afta dis call, Tcl programs executin up in that
interpreta can refer ta tha channel up in input or output operations using
the name given up in tha call ta \fBTcl_CreateChannel\fR.  Afta dis call,
the channel becomes tha property of tha interpreter, n' tha calla should
not call \fBTcl_Close\fR fo' tha channel; tha channel is ghon be closed
automatically when it is unregistered from tha interpreter.
.PP
Code executin outside of any Tcl interpreta can call
\fBTcl_RegisterChannel\fR wit \fIinterp\fR as NULL, ta indicate dat it
wishes ta hold a reference ta dis channel. Right back up in yo muthafuckin ass. Subsequently, tha channel can
be registered up in a Tcl interpreta n' it will only be closed when the
matchin number of calls ta \fBTcl_UnregisterChannel\fR done been made.
This allows code executin outside of any interpreta ta safely hold a
reference ta a cold-ass lil channel dat be also registered up in a Tcl interpreter.
.PP
This procedure interacts wit tha code managin tha standard
channels. If no standard channels was initialized before tha first
call ta \fBTcl_RegisterChannel\fR, they will git initialized by that
call. Right back up in yo muthafuckin ass. See \fBTcl_StandardChannels\fR fo' a general treatise about
standard channels n' tha behaviour of tha Tcl library wit regard to
them.

.SH TCL_UNREGISTERCHANNEL
.PP
\fBTcl_UnregisterChannel\fR removes a cold-ass lil channel from tha set of channels
accessible up in \fIinterp\fR fo' realz. Afta dis call, Tcl programs will no longer be
able ta use tha channelz name ta refer ta tha channel up in dat interpreter.
If dis operation removed tha last registration of tha channel up in any
interpreter, tha channel be also closed n' destroyed.
.PP
Code not associated wit a Tcl interpreta can call
\fBTcl_UnregisterChannel\fR wit \fIinterp\fR as NULL, ta indicate ta Tcl
that it no longer holdz a reference ta dat channel. If dis is tha last
reference ta tha channel, it will now be closed. Y'all KNOW dat shit, muthafucka!  \fBTcl_UnregisterChannel\fR
is straight-up similar ta \fBTcl_DetachChannel\fR except dat it will also
close tha channel if no further references ta it exist.

.SH TCL_DETACHCHANNEL
.PP
\fBTcl_DetachChannel\fR removes a cold-ass lil channel from tha set of channels
accessible up in \fIinterp\fR fo' realz. Afta dis call, Tcl programs will no longer be
able ta use tha channelz name ta refer ta tha channel up in dat interpreter.
Beyond that, dis command has no further effect.  It cannot be used on
the standard channels (stdout, stderr, stdin), n' will return
\fBTCL_ERROR\fR if passed one of dem channels.
.PP
Code not associated wit a Tcl interpreta can call
\fBTcl_DetachChannel\fR wit \fIinterp\fR as NULL, ta indicate ta Tcl
that it no longer holdz a reference ta dat channel. If dis is tha last
reference ta tha channel, unlike \fBTcl_UnregisterChannel\fR, 
it aint gonna be closed.

.SH TCL_ISSTANDARDCHANNEL
.PP
\fBTcl_IsStandardChannel\fR tests whether a cold-ass lil channel is one of the
three standard channels, stdin, stdout or stderr. Shiiit, dis aint no joke.  If so, it returns
1, otherwise 0.
.PP
No attempt is made ta check whether tha given channel or tha standard 
channels is initialized or otherwise valid.

.SH TCL_CLOSE
.PP
\fBTcl_Close\fR destroys tha channel \fIchannel\fR, which must denote a
currently open channel. Da channel should not be registered up in any
interpreta when \fBTcl_Close\fR is called. Y'all KNOW dat shit, muthafucka! Buffered output is flushed to
the channelz output thang prior ta beatin tha livin shiznit outta tha channel, n' any
buffered input is discarded. Y'all KNOW dat shit, muthafucka!  If dis be a funky-ass blockin channel, tha call do
not return until all buffered data is successfully busted ta tha channel's
output device.  If dis be a nonblockin channel n' there is buffered
output dat cannot be freestyled without blocking, tha call returns
immediately; output is flushed up in tha background n' tha channel will be
closed once all of tha buffered data has been output.  In dis case errors
durin flushin is not reported.
.PP
If tha channel was closed successfully, \fBTcl_Close\fR returns \fBTCL_OK\fR.
If a error occurs, \fBTcl_Close\fR returns \fBTCL_ERROR\fR n' recordz a
POSIX error code dat can be retrieved wit \fBTcl_GetErrno\fR.
If tha channel is bein closed synchronously n' a error occurs during
closin of tha channel n' \fIinterp\fR aint NULL, a error message is
left up in tha interpreterz result.
.PP
Note: it aint safe ta booty-call \fBTcl_Close\fR on a cold-ass lil channel dat has been
registered rockin \fBTcl_RegisterChannel\fR; peep tha documentation for
\fBTcl_RegisterChannel\fR, above, fo' details. If tha channel has ever
been given as tha \fBchan\fR argument up in a cold-ass lil call to
\fBTcl_RegisterChannel\fR, you should instead use
\fBTcl_UnregisterChannel\fR, which will internally call \fBTcl_Close\fR
when all calls ta \fBTcl_RegisterChannel\fR done been matched by
correspondin calls ta \fBTcl_UnregisterChannel\fR.

.SH "TCL_READCHARS AND TCL_READ"
.PP
\fBTcl_ReadChars\fR consumes bytes from \fIchannel\fR, convertin tha bytes
to UTF-8 based on tha channelz encodin n' storin tha produced data up in 
\fIreadObjPtr\fRz strang representation. I aint talkin' bout chicken n' gravy biatch.  Da return value of
\fBTcl_ReadChars\fR is tha number of characters, up ta \fIcharsToRead\fR,
that was stored up in \fIreadObjPtr\fR.  If a error occurs while reading, the
return value is \-1 n' \fBTcl_ReadChars\fR recordz a POSIX error code that
can be retrieved wit \fBTcl_GetErrno\fR.
.PP
Settin \fIcharsToRead\fR ta \fB\-1\fR will cause tha command ta read
all charactas currently available (non-blocking) or every last muthafuckin thang until
eof (blockin mode).
.PP
Da return value may be smalla than tha value ta read, indicatin dat less
data than axed was available.  This is called a \fIshort read\fR.  In
blockin mode, dis can only happen on a end-of-file.  In nonblockin mode,
a short read can also occur if there aint enough input currently
available:  \fBTcl_ReadChars\fR returns a gangbangin' finger-lickin' dirty-ass short count rather than waiting
for mo' data.
.PP
If tha channel is up in blockin mode, a return value of zero indicates an
end-of-file condition. I aint talkin' bout chicken n' gravy biatch.  If tha channel is up in nonblockin mode, a return
value of zero indicates either dat no input is currently available or an
end-of-file condition. I aint talkin' bout chicken n' gravy biatch.  Use \fBTcl_Eof\fR n' \fBTcl_InputBlocked\fR ta tell
which of these conditions straight-up occurred.
.PP
\fBTcl_ReadChars\fR translates tha various end-of-line representations into
the canonical \fB\en\fR internal representation accordin ta tha current
end-of-line recognizzle mode.  End-of-line recognizzle n' tha various
platform-specific modes is busted lyrics bout up in tha manual entry fo' tha Tcl
\fBfconfigure\fR command.
.PP
As a performizzle optimization, when readin from a cold-ass lil channel wit tha encoding
\fBbinary\fR, tha bytes is not converted ta UTF-8 as they is read.
Instead, they is stored up in \fIreadObjPtr\fRz internal representation as a
byte-array object.  Da strang representation of dis object will only be
constructed if it is needed (e.g., cuz of a cold-ass lil call to
\fBTcl_GetStringFromObj\fR).  In dis way, byte-oriented data can be read
from a cold-ass lil channel, manipulated by callin \fBTcl_GetByteArrayFromObj\fR and
related functions, n' then freestyled ta a cold-ass lil channel without tha expense of ever
convertin ta or from UTF-8.
.PP
\fBTcl_Read\fR is similar ta \fBTcl_ReadChars\fR, except dat it do not do
encodin conversions, regardless of tha channelz encoding.  It be deprecated
and exists fo' backwardz compatibilitizzle wit non-internationalized Tcl
extensions.  It consumes bytes from \fIchannel\fR n' stores dem in
\fIreadBuf\fR, struttin end-of-line translations on tha way.  Da return value
of \fBTcl_Read\fR is tha number of bytes, up ta \fIbytesToRead\fR, freestyled in
\fIreadBuf\fR.  Da buffer produced by \fBTcl_Read\fR aint null-terminated.
Its contents is valid from tha zeroth posizzle up ta n' excludin the
posizzle indicated by tha return value.  
.PP
\fBTcl_ReadRaw\fR is tha same ol' dirty as \fBTcl_Read\fR but do not
compensate fo' stacking. While \fBTcl_Read\fR (and tha other functions
in tha API) always git they data from tha topmost channel up in the
stack tha supplied channel is part of, \fBTcl_ReadRaw\fR do
not. Thus dis function is \fBonly\fR usable fo' transformational
channel drivers, i.e. drivers used up in tha middle of a stack of
channels, ta move data from tha channel below tha fuck into tha transformation.

.SH "TCL_GETSOBJ AND TCL_GETS"
.PP
\fBTcl_GetsObj\fR consumes bytes from \fIchannel\fR, convertin tha bytes to
UTF-8 based on tha channelz encoding, until a gangbangin' full line of input has been
seen. I aint talkin' bout chicken n' gravy biatch.  If tha channelz encodin is \fBbinary\fR, each byte read from the
channel is treated as a individual Unicode character n' shit.  All of the
charactaz of tha line except fo' tha terminatin end-of-line character(s)
are appended ta \fIlineObjPtr\fRz strang representation. I aint talkin' bout chicken n' gravy biatch.  Da end-of-line
character(s) is read n' discarded.
.PP
If a line was successfully read, tha return value is pimped outa than or equal
to zero n' indicates tha number of bytes stored up in \fIlineObjPtr\fR.  If an
error occurs, \fBTcl_GetsObj\fR returns \-1 n' recordz a POSIX error code
that can be retrieved wit \fBTcl_GetErrno\fR.  \fBTcl_GetsObj\fR also
returns \-1 if tha end of tha file is reached; tha \fBTcl_Eof\fR procedure
can be used ta distinguish a error from a end-of-file condition.
.PP
If tha channel is up in nonblockin mode, tha return value can also be \-1 if
no data was available or tha data dat was available did not contain an
end-of-line character n' shit.  When \-1 is returned, tha \fBTcl_InputBlocked\fR
procedure may be invoked ta determine if tha channel is blocked cuz
of input unavailability.
.PP
\fBTcl_Gets\fR is tha same ol' dirty as \fBTcl_GetsObj\fR except tha resulting
charactas is appended ta tha dynamic strang given by
\fIlineRead\fR rather than a Tcl object.

.SH "TCL_UNGETS"
.PP
\fBTcl_Ungets\fR is used ta add data ta tha input queue of a cold-ass lil channel,
at either tha head or tail of tha queue.  Da pointa \fIinput\fR points
to tha data dat is ta be added. Y'all KNOW dat shit, muthafucka!  Da length of tha input ta add is given
by \fIinputLen\fR.  A non-zero value of \fIaddAtEnd\fR indicates dat the
data is ta be added all up in tha end of queue; otherwise it is ghon be added at the
head of tha queue.  If \fIchannel\fR has a
.QW sticky
EOF set, no data will be
added ta tha input queue.  \fBTcl_Ungets\fR returns \fIinputLen\fR or
\-1 if a error occurs.

.SH "TCL_WRITECHARS, TCL_WRITEOBJ, AND TCL_WRITE"
.PP
\fBTcl_WriteChars\fR accepts \fIbytesToWrite\fR bytez of characta data at
\fIcharBuf\fR.  Da UTF-8 charactas up in tha buffer is converted ta the
channelz encodin n' queued fo' output ta \fIchannel\fR.  If
\fIbytesToWrite\fR is negative, \fBTcl_WriteChars\fR expects \fIcharBuf\fR
to be null-terminated n' it outputs every last muthafuckin thang up ta tha null.
.PP
Data queued fo' output may not step tha fuck up on tha output thang immediately, due
to internal buffering.  If tha data should step tha fuck up immediately, call
\fBTcl_Flush\fR afta tha call ta \fBTcl_WriteChars\fR, or set tha 
\fB\-buffering\fR option on tha channel ta \fBnone\fR.  If you wish tha data
to step tha fuck up as soon as a cold-ass lil complete line be accepted fo' output, set the
\fB\-buffering\fR option on tha channel ta \fBline\fR mode.
.PP
Da return value of \fBTcl_WriteChars\fR be a cold-ass lil count of how tha fuck nuff bytes were
accepted fo' output ta tha channel.  This is either pimped outa than zero to
indicate success or \-1 ta indicate dat a error occurred. Y'all KNOW dat shit, muthafucka!  If a error
occurs, \fBTcl_WriteChars\fR recordz a POSIX error code dat may be
retrieved wit \fBTcl_GetErrno\fR.
.PP
Newline charactas up in tha output data is translated ta platform-specific
end-of-line sequences accordin ta tha \fB\-translation\fR option fo' the
channel.  This is done even if tha channel has no encoding.
.PP
\fBTcl_WriteObj\fR is similar ta \fBTcl_WriteChars\fR except it
accepts a Tcl object whose contents is ghon be output ta tha channel.  The
UTF-8 charactas up in \fIwriteObjPtr\fRz strang representation is converted
to tha channelz encodin n' queued fo' output ta \fIchannel\fR.  
As a performizzle optimization, when freestylin ta a cold-ass lil channel wit tha encoding
\fBbinary\fR, UTF-8 charactas is not converted as they is written.
Instead, tha bytes up in \fIwriteObjPtr\fRz internal representation as a
byte-array object is freestyled ta tha channel.  Da byte-array representation
of tha object is ghon be constructed if it is needed. Y'all KNOW dat shit, muthafucka!  In dis way,
byte-oriented data can be read from a cold-ass lil channel, manipulated by calling
\fBTcl_GetByteArrayFromObj\fR n' related functions, n' then freestyled ta a
channel without tha expense of eva convertin ta or from UTF-8.
.PP
\fBTcl_Write\fR is similar ta \fBTcl_WriteChars\fR except dat it do not do
encodin conversions, regardless of tha channelz encoding.  It is
deprecated n' exists fo' backwardz compatibilitizzle wit non-internationalized
Tcl extensions.  It accepts \fIbytesToWrite\fR bytez of data at
\fIbyteBuf\fR n' queues dem fo' output ta \fIchannel\fR.  If
\fIbytesToWrite\fR is negative, \fBTcl_Write\fR expects \fIbyteBuf\fR ta be
null-terminated n' it outputs every last muthafuckin thang up ta tha null.
.PP
\fBTcl_WriteRaw\fR is tha same ol' dirty as \fBTcl_Write\fR but do not
compensate fo' stacking. While \fBTcl_Write\fR (and tha other
functions up in tha API) always feed they input ta tha topmost channel
in tha stack tha supplied channel is part of, \fBTcl_WriteRaw\fR do
not. Thus dis function is \fBonly\fR usable fo' transformational
channel drivers, i.e. drivers used up in tha middle of a stack of
channels, ta move data from tha transformation tha fuck into tha channel below
it.

.SH TCL_FLUSH
.PP
\fBTcl_Flush\fR causes all of tha buffered output data fo' \fIchannel\fR
to be freestyled ta its underlyin file or thang quicker than a muthafucka.
If tha channel is up in blockin mode, tha call do not return until
all tha buffered data has been busted ta tha channel or some error occurred.
Da call returns immediately if tha channel is nonblocking; it starts
a background flush dat will write tha buffered data ta tha channel
eventually, as fast as tha channel be able ta absorb dat shit.
.PP
Da return value is normally \fBTCL_OK\fR.
If a error occurs, \fBTcl_Flush\fR returns \fBTCL_ERROR\fR and
recordz a POSIX error code dat can be retrieved wit \fBTcl_GetErrno\fR.

.SH TCL_SEEK
.PP
\fBTcl_Seek\fR moves tha access point up in \fIchannel\fR where subsequent
data is ghon be read or written. I aint talkin' bout chicken n' gravy biatch. Buffered output is flushed ta tha channel and
buffered input is discarded, prior ta tha seek operation.
.PP
\fBTcl_Seek\fR normally returns tha freshly smoked up access point.
If a error occurs, \fBTcl_Seek\fR returns \-1 n' recordz a POSIX error
code dat can be retrieved wit \fBTcl_GetErrno\fR.
Afta a error, tha access point may or may not done been moved.

.SH TCL_TELL
.PP
\fBTcl_Tell\fR returns tha current access point fo' a cold-ass lil channel. Da returned
value is \-1 if tha channel do not support seeking.

.SH TCL_TRUNCATECHANNEL
.PP
.VS 8.5
\fBTcl_TruncateChannel\fR truncates tha file underlyin \fIchannel\fR
to a given \fIlength\fR of bytes. Well shiiiit, it returns \fBTCL_OK\fR if the
operation succeeded, n' \fBTCL_ERROR\fR otherwise.
.VE 8.5

.SH TCL_GETCHANNELOPTION
.PP
\fBTcl_GetChannelOption\fR retrieves, up in \fIoptionValue\fR, tha value of one of
the options currently up in effect fo' a cold-ass lil channel, or a list of all options and
their joints, n' you can put dat on yo' toast.  Da \fIchannel\fR argument identifies tha channel fo' which
to query a option or retrieve all options n' they joints.
If \fIoptionName\fR aint NULL, it is tha name of the
option ta query; tha optionz value is copied ta tha Tcl dynamic string
denoted by \fIoptionValue\fR. If
\fIoptionName\fR is NULL, tha function stores a alternatin list of option
names n' they joints up in \fIoptionValue\fR, rockin a seriez of calls to
\fBTcl_DStringAppendElement\fR. Da various preexistin options and
their possible joints is busted lyrics bout up in tha manual entry fo' tha Tcl
\fBfconfigure\fR command. Y'all KNOW dat shit, muthafucka! Other options can be added by each channel type.
These channel type specific options is busted lyrics bout up in tha manual entry for
the Tcl command dat creates a cold-ass lil channel of dat type; fo' example, the
additionizzle options fo' TCP based channels is busted lyrics bout up in tha manual entry
for tha Tcl \fBsocket\fR command.
Da procedure normally returns \fBTCL_OK\fR. If a error occurs, it returns
\fBTCL_ERROR\fR n' calls \fBTcl_SetErrno\fR ta store a appropriate POSIX
error code.

.SH TCL_SETCHANNELOPTION
.PP
\fBTcl_SetChannelOption\fR sets a freshly smoked up value \fInewValue\fR
for a option \fIoptionName\fR on \fIchannel\fR.
Da procedure normally returns \fBTCL_OK\fR.  If a error occurs,
it returns \fBTCL_ERROR\fR;  up in addition, if \fIinterp\fR is non-NULL,
\fBTcl_SetChannelOption\fR leaves a error message up in tha interpreterz result.

.SH TCL_EOF
.PP
\fBTcl_Eof\fR returns a nonzero value if \fIchannel\fR encountered
an end of file durin tha last input operation.

.SH TCL_INPUTBLOCKED
.PP
\fBTcl_InputBlocked\fR returns a nonzero value if \fIchannel\fR is in
nonblockin mode n' tha last input operation returned less data than
axed cuz there was insufficient data available.
Da call always returns zero if tha channel is up in blockin mode.

.SH TCL_INPUTBUFFERED
.PP
\fBTcl_InputBuffered\fR returns tha number of bytez of input currently
buffered up in tha internal buffers fo' a cold-ass lil channel. If tha channel aint open
for reading, dis function always returns zero.

.SH TCL_OUTPUTBUFFERED
\fBTcl_OutputBuffered\fR returns tha number of bytez of output
currently buffered up in tha internal buffers fo' a cold-ass lil channel. If the
channel aint open fo' writing, dis function always returns zero.

.SH "PLATFORM ISSUES"
.PP
Da handlez returned from \fBTcl_GetChannelHandle\fR depend on the
platform n' tha channel type.  On Unix platforms, tha handle is
always a Unix file descriptor as returned from tha \fBopen\fR system
call.  On Windows platforms, tha handle be a gangbangin' file \fBHANDLE\fR when
the channel was pimped wit \fBTcl_OpenFileChannel\fR,
\fBTcl_OpenCommandChannel\fR, or \fBTcl_MakeFileChannel\fR.  Other
channel types may return a gangbangin' finger-lickin' different type of handle on Windows
platforms.

.SH "SEE ALSO"
DString(3), fconfigure(n), filename(n), fopen(3), Tcl_CreateChannel(3)

.SH KEYWORDS
access point, blocking, buffered I/O, channel, channel driver, end of file,
flush, input, nonblocking, output, read, seek, write
