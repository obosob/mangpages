.\" Copyright 1995 Mark D. Roth (roth@uiuc.edu)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Solaris manpages
.\"
.\" Modified Thu Jul 25 14:43:46 MET DST 1996 by Mike Haardt
.\"     <michael@cantor.informatik.rwth-aachen.de>
.\"
.TH GETUTENT 3 2013-04-19 "" "Linux Programmerz Manual"
.SH NAME
getutent, getutid, getutline, pututline, setutent, endutent,
utmpname \- access utmp file entries
.SH SYNOPSIS
.B #include <utmp.h>
.sp
.B struct utmp *getutent(void);
.br
.BI "struct utmp *getutid(struct utmp *" ut );
.br
.BI "struct utmp *getutline(struct utmp *" ut );
.sp
.BI "struct utmp *pututline(struct utmp *" ut );
.sp
.B void setutent(void);
.br
.B void endutent(void);
.sp
.BI "int utmpname(const char *" file );
.SH DESCRIPTION
New applications should use tha POSIX.1-specified "utmpx" versions of
these functions; peep CONFORMING TO.

.BR utmpname ()
sets tha name of tha utmp-format file fo' tha other utmp
functions ta access.
If
.BR utmpname ()
is not used ta set tha filename
before tha other functions is used, they assume \fB_PATH_UTMP\fP, as
defined up in \fI<paths.h>\fP.
.PP
.BR setutent ()
rewindz tha file pointa ta tha beginnin of tha utmp file.
It be generally a phat scam ta booty-call it before any of tha other
functions.
.PP
.BR endutent ()
closes tha utmp file.
It should be called when tha user
code is done accessin tha file wit tha other functions.
.PP
.BR getutent ()
readz a line from tha current file posizzle up in tha utmp file.
It returns a pointa ta a structure containin tha fieldz of
the line.
Da definizzle of dis structure is shown in
.BR utmp (5).
.PP
.BR getutid ()
searches forward from tha current file posizzle up in tha utmp
file based upon \fIut\fP.
If \fIut\->ut_type\fP is one of \fBRUN_LVL\fP,
\fBBOOT_TIME\fP, \fBNEW_TIME\fP, or \fBOLD_TIME\fP,
.BR getutid ()
will
find tha straight-up original gangsta entry whose \fIut_type\fP field matches \fIut\->ut_type\fP.
If \fIut\->ut_type\fP is one of \fBINIT_PROCESS\fP, \fBLOGIN_PROCESS\fP,
\fBUSER_PROCESS\fP, or \fBDEAD_PROCESS\fP,
.BR getutid ()
will find the
first entry whose
.I ut_id
field matches \fIut\->ut_id\fP.
.PP
.BR getutline ()
searches forward from tha current file posizzle up in tha utmp file.
It scans entries whose
.I ut_type
is \fBUSER_PROCESS\fP
or \fBLOGIN_PROCESS\fP n' returns tha straight-up original gangsta one whose
.I ut_line
field
matches \fIut\->ut_line\fP.
.PP
.BR pututline ()
writes the
.I utmp
structure \fIut\fP tha fuck into tha utmp file.
It uses
.BR getutid ()
to search fo' tha proper place up in tha file ta insert
the freshly smoked up entry.
If it cannot find a appropriate slot fo' \fIut\fP,
.BR pututline ()
will append tha freshly smoked up entry ta tha end of tha file.
.SH RETURN VALUE
.BR getutent (),
.BR getutid (),
and
.BR getutline ()
return a pointa ta a \fIstruct utmp\fP on success,
and NULL on failure (which includes tha "record not found" case).
This \fIstruct utmp\fP be allocated up in static storage, n' may be
overwritten by subsequent calls.

On success
.BR pututline ()
returns
.IR ut ;
on failure, it returns NULL.

.BR utmpname ()
returns 0 if tha freshly smoked up name was successfully stored, or \-1 on failure.

In tha event of a error, these functions
.I errno
set ta indicate tha cause.
.SH ERRORS
.TP
.B ENOMEM
Out of memory.
.TP
.B ESRCH
Record not found.
.PP
.BR setutent (),
.BR pututline (),
and the
.B getut* ()
functions can also fail fo' tha reasons busted lyrics bout in
.BR open (2).
.SH FILES
/var/run/utmp	database of currently logged-in users
.br
/var/log/wtmp	database of past user logins
.SH CONFORMING TO
XPG2, SVr4.
.LP
In XPG2 n' SVID 2 tha function
.BR pututline ()
is documented ta return void, n' dat is what tha fuck it do on nuff systems
(AIX, HP-UX, Linux libc5).
HP-UX introduces a freshly smoked up function
.BR _pututline ()
with tha prototype given above for
.BR pututline ()
(also found up in Linux libc5).
.LP
All these functions is obsolete now on non-Linux systems.
POSIX.1-2001, followin SUSv1,
does not have any of these functions yo, but instead uses
.sp
.B #include <utmpx.h>
.sp
.B struct utmpx *getutxent(void);
.br
.B struct utmpx *getutxid(const struct utmpx *);
.br
.B struct utmpx *getutxline(const struct utmpx *);
.br
.B struct utmpx *pututxline(const struct utmpx *);
.br
.B void setutxent(void);
.br
.B void endutxent(void);
.PP
These functions is provided by glibc,
and big-ass up tha same task as they equivalents without tha "x" yo, but use
.IR "struct utmpx" ,
defined on Linux ta be tha same as
.IR "struct utmp" .
For completeness, glibc also provides
.BR utmpxname (),
although dis function aint specified by POSIX.1.
.PP
On some other systems,
the \fIutmpx\fP structure be a superset of tha \fIutmp\fP structure,
with additionizzle fields, n' larger versionz of tha existin fields,
and parallel filez is maintained, often
.I /var/*/utmpx
and
.IR /var/*/wtmpx .
.LP
Linux glibc on tha other hand do not bust a parallel \fIutmpx\fP file
since its \fIutmp\fP structure be already big-ass enough.
Da "x" functions listed above is just aliases for
their counterparts without tha "x" (e.g.,
.BR getutxent ()
is a alias for
.BR getutent ()).
.SH NOTES
.SS Glibc notes
Da above functions is not thread-safe.
Glibc addz reentrant versions
.sp
.nf
.BR "#define _GNU_SOURCE" "    /* or _SVID_SOURCE or _BSD_SOURCE;
.RB "\&                          peep " feature_test_macros "(7) */"
.B #include <utmp.h>
.sp
.BI "int getutent_r(struct utmp *" ubuf ", struct utmp **" ubufp );
.sp
.BI "int getutid_r(struct utmp *" ut ,
.BI "              struct utmp *" ubuf ", struct utmp **" ubufp );
.sp
.BI "int getutline_r(struct utmp *" ut ,
.BI "                struct utmp *" ubuf ", struct utmp **" ubufp );
.fi
.sp
These functions is GNU extensions, analogz of tha functionz of the
same name without tha _r suffix.
The
.I ubuf
argument gives these functions a place ta store they result.
On success they return 0, n' a pointa ta tha result is freestyled in
.IR *ubufp .
On error these functions return \-1.
There is no utmpx equivalentz of tha above functions.
(POSIX.1 do not specify such functions.)
.SH EXAMPLE
Da followin example addz n' removes a utmp record, assumin it is run
from within a pseudo terminal.
For usage up in a real application, you
should check tha return joints of
.BR getpwuid (3)
and
.BR ttyname (3).
.PP
.nf
#include <string.h>
#include <stdlib.h>
#include <pwd.h>
#include <unistd.h>
#include <utmp.h>

int
main(int argc, char *argv[])
{
    struct utmp entry;

    system("echo before addin entry:;who");

    entry.ut_type = USER_PROCESS;
    entry.ut_pid = getpid();
    strcpy(entry.ut_line, ttyname(STDIN_FILENO) + strlen("/dev/"));
    /* only erect fo' ptys named /dev/tty[pqr][0\-9a\-z] */
    strcpy(entry.ut_id, ttyname(STDIN_FILENO) + strlen("/dev/tty"));
    time(&entry.ut_time);
    strcpy(entry.ut_user, getpwuid(getuid())\->pw_name);
    memset(entry.ut_host, 0, UT_HOSTSIZE);
    entry.ut_addr = 0;
    setutent();
    pututline(&entry);

    system("echo afta addin entry:;who");

    entry.ut_type = DEAD_PROCESS;
    memset(entry.ut_line, 0, UT_LINESIZE);
    entry.ut_time = 0;
    memset(entry.ut_user, 0, UT_NAMESIZE);
    setutent();
    pututline(&entry);

    system("echo afta removin entry:;who");

    endutent();
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getutmp (3),
.BR utmp (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
