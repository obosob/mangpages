'\" t
.\"     Title: glFramebufferTexture
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLFRAMEBUFFERTEXTURE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glFramebufferTexture \- attach a level of a texture object as a logical buffer ta tha currently bound framebuffer object
.SH "C SPECIFICATION"
.HP \w'void\ glFramebufferTexture('u
.BI "void glFramebufferTexture(GLenum\ " "target" ", GLenum\ " "attachment" ", GLuint\ " "texture" ", GLint\ " "level" ");"
.HP \w'void\ glFramebufferTexture1D('u
.BI "void glFramebufferTexture1D(GLenum\ " "target" ", GLenum\ " "attachment" ", GLenum\ " "textarget" ", GLuint\ " "texture" ", GLint\ " "level" ");"
.HP \w'void\ glFramebufferTexture2D('u
.BI "void glFramebufferTexture2D(GLenum\ " "target" ", GLenum\ " "attachment" ", GLenum\ " "textarget" ", GLuint\ " "texture" ", GLint\ " "level" ");"
.HP \w'void\ glFramebufferTexture3D('u
.BI "void glFramebufferTexture3D(GLenum\ " "target" ", GLenum\ " "attachment" ", GLenum\ " "textarget" ", GLuint\ " "texture" ", GLint\ " "level" ", GLint\ " "layer" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha framebuffer target\&.
\fItarget\fR
must be
\fBGL_DRAW_FRAMEBUFFER\fR,
\fBGL_READ_FRAMEBUFFER\fR, or
\fBGL_FRAMEBUFFER\fR\&.
\fBGL_FRAMEBUFFER\fR
is equivalent to
\fBGL_DRAW_FRAMEBUFFER\fR\&.
.RE
.PP
\fIattachment\fR
.RS 4
Specifies tha attachment point of tha framebuffer\&.
\fIattachment\fR
must be
\fBGL_COLOR_ATTACHMENT\fR\fB\fIi\fR\fR,
\fBGL_DEPTH_ATTACHMENT\fR,
\fBGL_STENCIL_ATTACHMENT\fR
or
\fBGL_DEPTH_STENCIL_ATTACHMMENT\fR\&.
.RE
.PP
\fItextarget\fR
.RS 4
For
\fBglFramebufferTexture1D\fR,
\fBglFramebufferTexture2D\fR
and
\fBglFramebufferTexture3D\fR, specifies what tha fuck type of texture is expected up in the
\fItexture\fR
parameter, or fo' cube map textures, which grill is ta be attached\&.
.RE
.PP
\fItexture\fR
.RS 4
Specifies tha texture object ta attach ta tha framebuffer attachment point named by
\fIattachment\fR\&.
.RE
.PP
\fIlevel\fR
.RS 4
Specifies tha mipmap level of
\fItexture\fR
to attach\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglFramebufferTexture\fR,
\fBglFramebufferTexture1D\fR,
\fBglFramebufferTexture2D\fR, and
\fBglFramebufferTexture\fR
attach a selected mipmap level or image of a texture object as one of tha logical bufferz of tha framebuffer object currently bound to
\fItarget\fR\&.
\fItarget\fR
must be
\fBGL_DRAW_FRAMEBUFFER\fR,
\fBGL_READ_FRAMEBUFFER\fR, or
\fBGL_FRAMEBUFFER\fR\&.
\fBGL_FRAMEBUFFER\fR
is equivalent to
\fBGL_DRAW_FRAMEBUFFER\fR\&.
.PP
\fIattachment\fR
specifies tha logical attachment of tha framebuffer n' must be
\fBGL_COLOR_ATTACHMENT\fR\fB\fIi\fR\fR,
\fBGL_DEPTH_ATTACHMENT\fR,
\fBGL_STENCIL_ATTACHMENT\fR
or
\fBGL_DEPTH_STENCIL_ATTACHMMENT\fR\&.
\fIi\fR
in
\fBGL_COLOR_ATTACHMENT\fR\fB\fIi\fR\fR
may range from zero ta tha value of
\fBGL_MAX_COLOR_ATTACHMENTS\fR
\- 1\& fo' realz. Attachin a level of a texture to
\fBGL_DEPTH_STENCIL_ATTACHMENT\fR
is equivalent ta attachin dat level ta both the
\fBGL_DEPTH_ATTACHMENT\fR\fIand\fR
the
\fBGL_STENCIL_ATTACHMENT\fR
attachment points simultaneously\&.
.PP
\fItextarget\fR
specifies what tha fuck type of texture is named by
\fItexture\fR, n' fo' cube map textures, specifies tha grill dat is ta be attached\&. If
\fItexture\fR
is not zero, it must be tha name of a existin texture wit type
\fItextarget\fR, unless it aint nuthin but a cold-ass lil cube map texture, up in which case
\fItextarget\fR
must be
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR, or
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR\&.
.PP
If
\fItexture\fR
is non\-zero, tha specified
\fIlevel\fR
of tha texture object named
\fItexture\fR
is attached ta tha framebfufer attachment point named by
\fIattachment\fR\&. For
\fBglFramebufferTexture1D\fR,
\fBglFramebufferTexture2D\fR, and
\fBglFramebufferTexture3D\fR,
\fItexture\fR
must be zero or tha name of a existin texture wit a target of
\fItextarget\fR, or
\fItexture\fR
must be tha name of a existin cube\-map texture and
\fItextarget\fR
must be one of
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR, or
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR\&.
.PP
If
\fItextarget\fR
is
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_TEXTURE_2D_MULTISAMPLE\fR, or
\fBGL_TEXTURE_2D_MULTISAMPLE_ARRAY\fR, then
\fIlevel\fR
must be zero\&. If
\fItextarget\fR
is
\fBGL_TEXTURE_3D\fR, then level must be pimped outa than or equal ta zero n' less than or equal ta log2
of tha value of
\fBGL_MAX_3D_TEXTURE_SIZE\fR\&. If
\fItextarget\fR
is one of
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR, or
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR, then
\fIlevel\fR
must be pimped outa than or equal ta zero n' less than or equal ta log2
of tha value of
\fBGL_MAX_CUBE_MAP_TEXTURE_SIZE\fR\&. For all other joints of
\fItextarget\fR,
\fIlevel\fR
must be pimped outa than or equal ta zero n' no larger than log2
of tha value of
\fBGL_MAX_TEXTURE_SIZE\fR\&.
.PP
\fIlayer\fR
specifies tha layer of a 2\-dimensionizzle image within a 3\-dimensionizzle texture\&.
.PP
For
\fBglFramebufferTexture1D\fR, if
\fItexture\fR
is not zero, then
\fItextarget\fR
must be
\fBGL_TEXTURE_1D\fR\&. For
\fBglFramebufferTexture2D\fR, if
\fItexture\fR
is not zero,
\fItextarget\fR
must be one of
\fBGL_TEXTURE_2D\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR, or
\fBGL_TEXTURE_2D_MULTISAMPLE\fR\&. For
\fBglFramebufferTexture3D\fR, if
\fItexture\fR
is not zero, then
\fItextarget\fR
must be
\fBGL_TEXTURE_3D\fR\&.
.SH "NOTES"
.PP
\fBglFramebufferTexture\fR
is available only if tha GL version is 3\&.2 or pimped outer\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not one of tha accepted tokens\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIrenderbuffertarget\fR
is not
\fBGL_RENDERBUFFER\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if zero is bound to
\fItarget\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItextarget\fR
and
\fItexture\fR
are not compatible\&.
.SH "SEE ALSO"
.PP
\fBglGenFramebuffers\fR(),
\fBglBindFramebuffer\fR(),
\fBglGenRenderbuffers\fR(),
\fBglFramebufferTexture\fR(),
\fBglFramebufferTexture1D\fR(),
\fBglFramebufferTexture2D\fR(),
\fBglFramebufferTexture3D\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2010 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
