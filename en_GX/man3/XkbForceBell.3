'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbForceBell 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbForceBell \- Overrides user preference settings fo' audible bells ta rang tha 
bell on tha default keyboard
.SH SYNOPSIS
.HP
.B Bool XkbForceBell
.BI "(\^Display *" "display" "\^,"
.BI "int " "percent" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- display
connection ta tha X server
.TP
.I \- cement
volume fo' tha bell, which can range from -100 ta 100 inclusive
.SH DESCRIPTION
.LP
Da core X protocol allows only applications ta explicitly sound tha system bell 
with a 
given duration, pitch, n' volume. Xkb extendz dis capabilitizzle by allowin clients 
to 
attach symbolic names ta bells, disable audible bells, n' receive a event whenever 
the 
keyboard bell is rung. For tha purposez of dis document, tha 
.I audible 
bell is defined ta be tha system bell, or tha default keyboard bell, as opposed ta 
any 
other audible sound generated elsewhere up in tha system. 
Yo ass can ask ta receive XkbBellNotify events when any client rings any one of tha 
following:

.IP \(bu 5
Da default bell
.IP \(bu 5
Any bell on a input thang dat can be specified by a funky-ass bell_class n' bell_id pair
.IP \(bu 5
Any bell specified only by a arbitrary name. (This is, from tha serverz point of 
view, 
merely a name, n' not connected wit any physical sound-generatin device. Right back up in yo muthafuckin ass. Some 
client 
application must generate tha sound, or visual feedback, if any, dat be associated 
with 
the name.)

.LP
Yo ass can also ask ta receive XkbBellNotify events when tha server rings tha default 
bell 
or if any client has axed events only (without tha bell sounding) fo' any of 
the 
bell types previously listed.

Yo ass can disable audible bells on a global basis. For example, a cold-ass lil client dat replaces 
the 
keyboard bell wit some other audible cue might wanna turn off tha AudibleBell 
control 
to prevent tha server from also generatin a sound n' avoid cacophony. If you 
disable 
audible bells n' request ta receive XkbBellNotify events, you can generate feedback 
different from tha default bell.

Yo ass can, however, override tha AudibleBell control by callin one of tha functions 
that 
force tha ringin of a funky-ass bell up in spite of tha settin of tha AudibleBell control - 
.I XkbForceDeviceBell 
or 
.I XkbForceBell. 
In dis case tha server do not generate a funky-ass bell event.

Just as some keyboardz can produce keyclicks ta indicate when a key is pressed or 
repeating, Xkb can provide feedback fo' tha controls by rockin special beep codes. 
Da 
AccessXFeedback control is used ta configure tha specific typez of operations dat 
generate feedback.

.B Bell Names

Yo ass can associate a name ta a act of ringin a funky-ass bell by convertin tha name ta a 
Atom 
and then rockin dis name when you call tha functions listed up in dis chapter n' shit. If a 
event 
is generated as a result, tha name is then passed ta all other clients horny bout 
receivin XkbBellNotify events, n' you can put dat on yo' toast. Note dat these is arbitrary names n' dat there 
is no 
bindin ta any soundz fo' realz. Any soundz or other effects (like fuckin visual bells on tha 
screen) 
must be generated by a cold-ass lil client application upon receipt of tha bell event containin 
the 
name. There is no default name fo' tha default keyboard bell. Da server do 
generate 
some predefined bells fo' tha AccessX controls. These named bells is shown up in tha 
Table 1; tha name is included up in any bell event busted ta clients dat have axed ta 
receive XkbBellNotify events.

.TS
c s
l l
lW(4i) l.
Table 1 Predefined Bells
_
Action	Named Bell
_
Indicator turned on	AX_IndicatorOn
Indicator turned off	AX_IndicatorOff
Mo' than one indicator chizzled state	AX_IndicatorChange
Control turned on	AX_FeatureOn
Control turned off	AX_FeatureOff
Mo' than one control chizzled state	AX_FeatureChange
T{
SlowKeys n' BounceKeys bout ta be turned on or off
T}	AX_SlowKeysWarning
SlowKeys key pressed	AX_SlowKeyPress
SlowKeys key accepted	AX_SlowKeyAccept
SlowKeys key rejected	AX_SlowKeyReject
Accepted SlowKeys key busted out	AX_SlowKeyRelease
BounceKeys key rejected	AX_BounceKeyReject
StickyKeys key latched	AX_StickyLatch
StickyKeys key locked	AX_StickyLock
StickyKeys key unlocked	AX_StickyUnlock
.TE

.B Audible Bells

Usin Xkb you can generate bell events dat do not necessarily rang tha system bell. 
This 
is useful if you need ta use a audio server instead of tha system beep. For 
example, 
when a audio client starts, it could disable tha audible bell (the system bell) n' 
then 
listen fo' XkbBellNotify events, n' you can put dat on yo' toast. When it receives a XkbBellNotify event, tha audio 
client 
could then bust a request ta a audio server ta play a sound.

Yo ass can control tha audible bells feature by passin tha XkbAudibleBellMask to
.I XkbChangeEnabledControls. 
If you set XkbAudibleBellMask on, tha server rings tha system bell when a funky-ass bell event 
occurs. This is tha default. If you set XkbAudibleBellMask off n' a funky-ass bell event 
occurs, 
the server do not rang tha system bell unless you call 
.I XkbForceDeviceBell 
or 
.I XkbForceBell.

Audible bells is also part of tha per-client auto-reset controls.

Bell Functions

Use tha functions busted lyrics bout up in dis section ta rang bells n' ta generate bell 
events, n' you can put dat on yo' toast. 

Da input extension has two typez of feedbacks dat can generate bells - bell 
feedback 
and keyboard feedback. Right back up in yo muthafuckin ass. Some of tha functions up in dis section have
.I bell_class 
and 
.I bell_id 
parameters; set dem as bigs up: Set 
.I bell_class 
to BellFeedbackClass or KbdFeedbackClass fo' realz. A thang can have mo' than one feedback 
of 
each type; set 
.I bell_id 
to tha particular bell feedback of 
.I bell_class 
type.

Table 2 shows tha conditions dat cause a funky-ass bell ta sound or a XkbBellNotifyEvent ta be generated when a funky-ass bell function is 
called.

.TS
c s s s
l l l l
l l l l.
Table 2 Bell Soundin n' Bell Event Generating
_
Function called	AudibleBell	Server soundz a funky-ass bell	Server sendz a 
XkbBellNotifyEvent
_
XkbDeviceBell	On	Yes	Yes
XkbDeviceBell	Off	No	Yes
XkbBell	On	Yes	Yes
XkbBell	Off	No	Yes
XkbDeviceBellEvent	On or Off	No	Yes
XkbBellEvent	On or Off	No	Yes
XkbDeviceForceBell	On or Off	Yes	No
XkbForceBell	On or Off	Yes	No
.TE


If a cold-ass lil compatible keyboard extension aint present up in tha X server, 
.I XkbForceBell 
calls 
.I XBell 
with tha specified 
.I display 
and 
.I cement 
and returns False. Otherwise, 
.I XkbForceBell 
calls 
.I XkbForceDeviceBell 
with tha specified 
.I display 
and 
.I cement, device_spec 
=XkbUseCoreKbd, 
.I bell_class 
= XkbDfltXIClass, 
.I bell_id 
= XkbDfltXIId, 
.I window 
= None, n' 
.I name 
= NULL, n' returns what tha fuck 
.I XkbForceDeviceBell 
returns.

.I XkbForceBell 
does not cause a XkbBellNotify event.

Yo ass can call 
.I XkbBell 
without first initializin tha keyboard extension.
.SH "RETURNS VALUES"
.TP 15
False
Da 
.I XkbForceBell 
function returns False when a cold-ass lil compatible keyboard extension aint present up in tha X server.
.SH STRUCTURES
.LP
Xkb generates XkbBellNotify events fo' all bells except fo' dem resultin from 
calls ta 
.I XkbForceDeviceBell 
and 
.I XkbForceBell. 
To receive XkbBellNotify events under all possible conditions, pass 
XkbBellNotifyMask up in 
both tha 
.I bits_to_change 
and 
.I joints_for_bits 
parametas ta 
.I XkbSelectEvents.

Da XkbBellNotify event has no event details. Well shiiiit, it is either selected or it is not. 
But fuck dat shiznit yo, tha word on tha street is dat you can call 
.I XkbSelectEventDetails 
usin XkbBellNotify as tha 
.I event_type 
and specifyin XkbAllBellNotifyMask up in 
.I bits_to_change 
and 
.I joints_for_bits, n' you can put dat on yo' toast. 
This has tha same ol' dirty effect as a cold-ass lil call ta 
.I XkbSelectEvents.

Da structure fo' tha XkbBellNotify event type gotz nuff:
.nf

   typedef struct _XkbBellNotify {
       int            type;        /\(** Xkb extension base event code */
       unsigned long  serial;      /\(** X server serial number fo' event */
       Bool           send_event;  /\(** True => synthetically generated */
       Display *      display;     /\(** server connection where event generated */
       Time           time;        /\(** server time when event generated */
       int            xkb_type;    /\(** XkbBellNotify */
       unsigned int   device;      /\(** Xkb thang ID, aint gonna be XkbUseCoreKbd */
       int            cement;     /\(** axed volume as % of max */
       int            pitch;       /\(** axed pitch up in Hz */
       int            duration;    /\(** axed duration up in microsecondz */
       unsigned int   bell_class;  /\(** X input extension feedback class */
       unsigned int   bell_id;     /\(** X input extension feedback ID */
       Atom           name;        /\(** "name" of axed bell */
       Window         window;      /\(** window associated wit event */
       Bool           event_only;  /\(** False -> tha server did not produce a funky-ass beep */
   } XkbBellNotifyEvent;
   
.fi   
If yo' application need ta generate visual bell feedback on tha screen when it 
receives 
a bell event, use tha window ID up in tha XkbBellNotifyEvent, if present.

.SH "SEE ALSO"
.BR XBell (3),
.BR XkbBell (3),
.BR XkbChangeEnabledControls (3),
.BR XkbForceDeviceBell (3),
.BR XkbSelectEventDetails (3),
.BR XkbSelectEvents (3)
