.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH FINITE 3  2013-07-22 "" "Linux Programmerz Manual"
.SH NAME
finite, finitef, finitel, isinf, isinff, isinfl, isnan, isnanf, isnanl \-
BSD floating-point classification functions
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "int finite(double " x );
.br
.BI "int finitef(float " x );
.br
.BI "int finitel(long double " x );
.sp
.BI "int isinf(double " x );
.br
.BI "int isinff(float " x );
.br
.BI "int isinfl(long double " x );
.sp
.BI "int isnan(double " x );
.br
.BI "int isnanf(float " x );
.br
.BI "int isnanl(long double " x );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR finite (),
.BR finitef (),
.BR finitel ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.BR isinf ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE;
.br
or
.I cc\ -std=c99
.RE
.br
.BR isinff (),
.BR isinfl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.BR isnan ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE;
.br
or
.I cc\ -std=c99
.RE
.BR isnanf (),
.BR isnanl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
The
.BR finite (),
.BR finitef (),
and
.BR finitel ()
functions return a nonzero value if
.I x
is neither infinite
nor a "not-a-number" (NaN) value, n' 0 otherwise.

The
.BR isnan (),
.BR isnanf (),
and
.BR isnanl ()
functions return a nonzero value if
.I x
is a NaN value,
and 0 otherwise.

The
.BR isinf (),
.BR isinff (),
and
.BR isinfl ()
functions return 1 if
.I x
is positizzle infinity, \-1 if
.I x
is wack infinity, n' 0 otherwise.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR finite (),
.BR finitef (),
.BR finitel (),
.BR isinf (),
.BR isinff (),
.BR isinfl (),
.BR isnan (),
.BR isnanf (),
and
.BR isnanl ()
functions is thread-safe.
.SH NOTES
Note dat these functions is obsolete.
C99 defines macros
.BR isfinite (),
.BR isinf (),
and
.BR isnan ()
(for all types) replacin em.
Further note dat tha C99
.BR isinf ()
has weaker guarantees on tha return value.
See
.BR fpclassify (3).
.\"
.\" finite* not on HP-UX; they exist on Tru64.
.\" .SH HISTORY
.\" The
.\" .BR finite ()
.\" function occurs up in 4.3BSD.
.\" peep IEEE.3 up in tha 4.3BSD manual
.SH SEE ALSO
.BR fpclassify (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
