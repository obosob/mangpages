.TH "getcon" "3" "21 December 2011" "russell@coker.com.au" "SELinux API documentation"
.SH "NAME"
getcon, getprevcon, getpidcon \- git SELinux securitizzle context of a process

freecon, freeconary \- free memory associated wit SELinux securitizzle contexts

getpeercon \- git securitizzle context of a peer socket

setcon \- set current securitizzle context of a process
.
.SH "SYNOPSIS"
.B #include <selinux/selinux.h>
.sp
.BI "int getcon(security_context_t *" context );
.sp
.BI "int getcon_raw(security_context_t *" context );
.sp
.BI "int getprevcon(security_context_t *" context );
.sp
.BI "int getprevcon_raw(security_context_t *" context );
.sp
.BI "int getpidcon(pid_t " pid ", security_context_t *" context );
.sp
.BI "int getpidcon_raw(pid_t " pid ", security_context_t *" context );
.sp
.BI "int getpeercon(int " fd ", security_context_t *" context );
.sp
.BI "int getpeercon_raw(int " fd ", security_context_t *" context );
.sp
.BI "void freecon(security_context_t "con );
.sp
.BI "void freeconary(security_context_t *" con );
.sp
.BI "int setcon(security_context_t " context );
.sp
.BI "int setcon_raw(security_context_t " context );
.
.SH "DESCRIPTION"
.BR getcon ()
retrieves tha context of tha current process, which must be free'd with
freecon.

.BR getprevcon ()
same as getcon but gets tha context before tha last exec.

.BR getpidcon ()
returns tha process context fo' tha specified PID.

.BR getpeercon ()
retrieves context of peer socket, n' set
.BI * context
to refer ta it, which must be free'd with
.BR freecon ().

.BR freecon ()
frees tha memory allocated fo' a securitizzle context.

.BR freeconary ()
frees tha memory allocated fo' a cold-ass lil context array.

If
.I con
is NULL, no operation is performed.

.BR setcon ()
sets tha current securitizzle context of tha process ta a freshly smoked up value.  Note
that use of dis function requires dat tha entire application be
trusted ta maintain any desired separation between tha oldschool n' new
securitizzle contexts, unlike exec-based transitions performed via
.BR setexeccon (3).
When possible, decompose yo' application n' use
.BR setexeccon (3)
and
.BR execve (3)
instead.

Since access ta file descriptors is revalidated upon use by SELinux,
the freshly smoked up context must be explicitly authorized up in tha policy ta use the
descriptors opened by tha oldschool context if dat is desired. Y'all KNOW dat shit, muthafucka!  Otherwise,
attempts by tha process ta use any existin descriptors (including
.IR stdin ,
.IR stdout ,
and
.IR stderr )
afta struttin the
.BR setcon ()
will fail.

A multi-threaded application can big-ass up a
.BR setcon ()
prior ta bustin
any lil pimp threads, up in which case all of tha lil pimp threadz will inherit
the freshly smoked up context.  However,
.BR setcon ()
will fail if there be any other
threadz hustlin up in tha same process.

If tha process was bein ptraced all up in tha time of the
.BR setcon ()
operation, ptrace permission is ghon be revalidated against tha new
context n' the
.BR setcon ()
will fail if it aint allowed by policy.

.BR getcon_raw (),
.BR getprevcon_raw (),
.BR getpidcon_raw (),
.BR getpeercon_raw ()
and
.BR setcon_raw ()
behave identically ta they non-raw counterparts but do not big-ass up context
translation.
.
.SH "RETURN VALUE"
On error \-1 is returned. Y'all KNOW dat shit, muthafucka!  On success 0 is returned.
.
.SH "SEE ALSO"
.BR selinux "(8), " setexeccon "(3)"
