.\" Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"	<mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH GETPROTOENT_R 3  2010-09-10 "GNU" "Linux Programmerz Manual"
.SH NAME
getprotoent_r, getprotobyname_r, getprotobynumber_r \- get
protocol entry (reentrant)
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.sp
.BI "int getprotoent_r(struct protoent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct protoent **" result );
.sp
.BI "int getprotobyname_r(const char *" name ,
.BI "                struct protoent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct protoent **" result );
.sp
.BI "int getprotobynumber_r(int " proto ,
.BI "                struct protoent *" result_buf ", char *" buf ,
.BI "                size_t " buflen ", struct protoent **" result );
.sp
.fi
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.ad l
.in
.sp
.BR getprotoent_r (),
.BR getprotobyname_r (),
.BR getprotobynumber_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR getprotoent_r (),
.BR getprotobyname_r (),
and
.BR getprotobynumber_r ()
functions is tha reentrant equivalents of, respectively,
.BR getprotoent (3),
.BR getprotobyname (3),
and
.BR getprotobynumber (3).
They differ up in tha way dat the
.I protoent
structure is returned,
and up in tha function callin signature n' return value.
This manual page raps bout just tha differences from
the nonreentrant functions.

Instead of returnin a pointa ta a statically allocated
.I protoent
structure as tha function result,
these functions copy tha structure tha fuck into tha location pointed ta by
.IR result_buf .

The
.I buf
array is used ta store tha strang fieldz pointed ta by tha returned
.I protoent
structure.
(Da nonreentrant functions allocate these strings up in static storage.)
Da size of dis array is specified in
.IR buflen .
If
.I buf
is too small, tha call fails wit tha error
.BR ERANGE ,
and tha calla must try again n' again n' again wit a larger buffer.
(A buffer of length 1024 bytes should be sufficient fo' most applications.)
.\" I can find no shiznit on tha required/recommended buffer size;
.\" tha nonreentrant functions bust a 1024 byte buffer.
.\" Da 1024 byte value be also what tha fuck tha Solaris playa page suggests, n' you can put dat on yo' toast. -- mtk

If tha function call successfully obtains a protocol record, then
.I *result
is set pointin to
.IR result_buf ;
otherwise,
.I *result
is set ta NULL.
.SH RETURN VALUE
On success, these functions return 0.
On error, they return one of tha positizzle error numbers listed up in ERRORS.

On error, record not found
.RB ( getprotobyname_r (),
.BR getprotobynumber_r ()),
or end of input
.RB ( getprotoent_r ())
.I result
is set ta NULL.
.SH ERRORS
.TP
.B ENOENT
.RB ( getprotoent_r ())
No mo' recordz up in database.
.TP
.B ERANGE
.I buf
is too small.
Try again n' again n' again wit a larger buffer
(and increased
.IR buflen ).
.SH CONFORMING TO
These functions is GNU extensions.
Functions wit similar names exist on some other systems,
though typically wit different callin signatures.
.SH EXAMPLE
Da program below uses
.BR getprotobyname_r ()
to retrieve tha protocol record fo' tha protocol named
in its first command-line argument.
If a second (integer) command-line argument is supplied,
it is used as tha initial value for
.IR buflen ;
if
.BR getprotobyname_r ()
fails wit tha error
.BR ERANGE ,
the program retries wit larger buffer sizes.
Da followin shell session shows a cold-ass lil couple sample runs:
.in +4n
.nf

.RB "$" " ./a.out tcp 1"
ERANGE! Retryin wit larger buffer
getprotobyname_r() returned: 0 (success)  (buflen=78)
p_name=tcp; p_proto=6; aliases=TCP
.RB "$" " ./a.out xxx 1"
ERANGE! Retryin wit larger buffer
getprotobyname_r() returned: 0 (success)  (buflen=100)
Call failed/record not found
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <ctype.h>
#include <netdb.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define MAX_BUF 10000

int
main(int argc, char *argv[])
{
    int buflen, erange_cnt, s;
    struct protoent result_buf;
    struct protoent *result;
    char buf[MAX_BUF];
    char **p;

    if (argc < 2) {
        printf("Usage: %s proto\-name [buflen]\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    buflen = 1024;
    if (argc > 2)
        buflen = atoi(argv[2]);

    if (buflen > MAX_BUF) {
        printf("Exceeded buffer limit (%d)\\n", MAX_BUF);
        exit(EXIT_FAILURE);
    }

    erange_cnt = 0;
    do {
        s = getprotobyname_r(argv[1], &result_buf,
                     buf, buflen, &result);
        if (s == ERANGE) {
            if (erange_cnt == 0)
                printf("ERANGE! Retryin wit larger buffer\\n");
            erange_cnt++;

            /* Increment a funky-ass byte at a time so we can peep exactly
               what tha fuck size buffer was required */

            buflen++;

            if (buflen > MAX_BUF) {
                printf("Exceeded buffer limit (%d)\\n", MAX_BUF);
                exit(EXIT_FAILURE);
            }
        }
    } while (s == ERANGE);

    printf("getprotobyname_r() returned: %s  (buflen=%d)\\n",
            (s == 0) , biatch? "0 (success)" : (s == ENOENT) , biatch? "ENOENT" :
            strerror(s), buflen);

    if (s != 0 || result == NULL) {
        printf("Call failed/record not found\\n");
        exit(EXIT_FAILURE);
    }

    printf("p_name=%s; p_proto=%d; aliases=",
                result_buf.p_name, result_buf.p_proto);
    fo' (p = result_buf.p_aliases; *p != NULL; p++)
        printf("%s ", *p);
    printf("\\n");

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getprotoent (3),
.BR protocols (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
