.\"***************************************************************************
.\" Copyright (c) 1998-2005,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_refresh.3x,v 1.15 2010/12/04 18:38:55 tom Exp $
.TH curs_refresh 3X ""
.na
.hy 0
.SH NAME
\fBdoupdate\fR,
\fBredrawwin\fR,
\fBrefresh\fR,
\fBwnoutrefresh\fR,
\fBwredrawln\fR,
\fBwrefresh\fR \- refresh \fBcurses\fR windows n' lines
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBint refresh(void);\fR
.br
\fBint wrefresh(WINDOW *win);\fR
.br
\fBint wnoutrefresh(WINDOW *win);\fR
.br
\fBint doupdate(void);\fR
.br
\fBint redrawwin(WINDOW *win);\fR
.br
\fBint wredrawln(WINDOW *win, int beg_line, int num_lines);\fR
.br
.SH DESCRIPTION
Da \fBrefresh\fR n' \fBwrefresh\fR routines (or \fBwnoutrefresh\fR and
\fBdoupdate\fR) must be called ta git actual output ta tha terminal, as other
routines merely manipulate data structures.
Da routine \fBwrefresh\fR copies
the named window ta tha physical terminal screen, takin tha fuck into account what tha fuck is
already there ta do optimizations.
Da \fBrefresh\fR routine is the
same, rockin \fBstdscr\fR as tha default window.
Unless \fBleaveok\fR has been
enabled, tha physical cursor of tha terminal is left all up in tha location of the
cursor fo' dat window.
.PP
Da \fBwnoutrefresh\fR n' \fBdoupdate\fR routines allow multiple thugged-out shiznit with
more efficiency than \fBwrefresh\fR ridin' solo.
In addizzle ta all tha window
structures, \fBcurses\fR keeps two data structures representin tha terminal
screen: a physical screen, describin what tha fuck is straight-up on tha screen, n' a
virtual screen, describin what tha fuck tha programmer wants ta have on tha screen.
.PP
Da routine \fBwrefresh\fR works by first callin \fBwnoutrefresh\fR, which
copies tha named window ta tha virtual screen, n' then callin \fBdoupdate\fR,
which compares tha virtual screen ta tha physical screen n' do tha actual
update.
If tha programmer wishes ta output nuff muthafuckin windows at once, a series
of calls ta \fBwrefresh\fR thangs up in dis biatch up in alternatin calls ta \fBwnoutrefresh\fR
and \fBdoupdate\fR, causin nuff muthafuckin burstz of output ta tha screen.
By first
callin \fBwnoutrefresh\fR fo' each window, it is then possible ta call
\fBdoupdate\fR once, resultin up in only one burst of output, wit fewer total
charactas transmitted n' less CPU time used.
If tha \fIwin\fR argument to
\fBwrefresh\fR is tha global variable \fBcurscr\fR, tha screen is immediately
cleared n' repainted from scratch.
.PP
Da phrase "copies tha named window ta tha virtual screen" above be ambiguous.
What straight-up happens is dat all \fItouched\fR (changed) lines up in tha window
are copied ta tha virtual screen.
This affects programs dat use overlapping
windows; it means dat if two windows overlap, you can refresh dem up in either
order n' tha overlap region is ghon be modified only when it is explicitly
changed.
(But peep tha section on \fBPORTABILITY\fR below fo' a warnin about
exploitin dis behavior.)
.PP
Da \fBwredrawln\fR routine indicates ta \fBcurses\fR dat some screen lines
are corrupted n' should be thrown away before anythang is freestyled over em.
It touches tha indicated lines (markin dem chizzled).
Da routine \fBredrawwin\fR() touches tha entire window.
.SH RETURN VALUE
Routines dat return a integer return \fBERR\fR upon failure, n' \fBOK\fR
(SVr4 only specifies "an integer value other than \fBERR\fR") upon successful
completion.
.PP
X/Open do not define any error conditions.
In dis implementation
.RS
.TP 5
\fBwnoutrefresh\fP
returns a error
if tha window pointa is null, or
if tha window is straight-up a pad.
.TP 5
\fBwredrawln\fP
returns a error
if tha associated call ta \fBtouchln\fP returns a error.
.RE
.SH NOTES
Note dat \fBrefresh\fR n' \fBredrawwin\fR may be macros.
.SH PORTABILITY
Da XSI Curses standard, Issue 4 raps bout these functions.
.PP
Whether \fBwnoutrefresh()\fR copies ta tha virtual screen tha entire contents
of a window or just its chizzled portions has never been well-documented in
historic curses versions (includin SVr4).
It might be unwise ta rely on
either behavior up in programs dat might gotta be linked wit other curses
implementations.
Instead, you can do a explicit \fBtouchwin()\fR before the
\fBwnoutrefresh()\fR call ta guarantee a entire-contents copy anywhere.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_outopts\fR(3X)
\fBcurs_variables\fR(3X).
