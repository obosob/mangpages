.TH xcb_change_gc 3  2013-08-04 "XCB" "XCB Requests"
.ad l
.SH NAME
xcb_change_gc \- chizzle graphics context components
.SH SYNOPSIS
.hy 0
.B #include <xcb/xproto.h>
.SS Request function
.HP
xcb_void_cookie_t \fBxcb_change_gc\fP(xcb_connection_t\ *\fIconn\fP, xcb_gcontext_t\ \fIgc\fP, uint32_t\ \fIvalue_mask\fP, const uint32_t\ *\fIvalue_list\fP);
.br
.hy 1
.SH REQUEST ARGUMENTS
.IP \fIconn\fP 1i
Da XCB connection ta X11.
.IP \fIgc\fP 1i
Da graphics context ta chizzle.
.IP \fIvalue_mask\fP 1i
One of tha followin joints:
.RS 1i
.IP \fIXCB_GC_FUNCTION\fP 1i
TODO: Refer ta GX
.IP \fIXCB_GC_PLANE_MASK\fP 1i
In graphics operations, given a source n' destination pixel, tha result is
computed bitwise on correspondin bitz of tha pixels; dat is, a Boolean
operation is performed up in each bit plane. Da plane-mask restricts the
operation ta a subset of planes, so tha result is:

        ((src FUNC dst) AND plane-mask) OR (dst AND (NOT plane-mask))
.IP \fIXCB_GC_FOREGROUND\fP 1i
Foreground colorpixel.
.IP \fIXCB_GC_BACKGROUND\fP 1i
Background colorpixel.
.IP \fIXCB_GC_LINE_WIDTH\fP 1i
Da line-width is measured up in pixels n' can be pimped outa than or equal ta one, a wide line, or the
special value zero, a thin line.
.IP \fIXCB_GC_LINE_STYLE\fP 1i
Da line-style defines which sectionz of a line is drawn:
Solid                Da full path of tha line is drawn.
DoubleDash           Da full path of tha line is drawn yo, but tha even dashes is filled differently
                     than tha odd dashes (see fill-style), wit Butt cap-style used where even and
                     odd dashes meet.
OnOffDash            Only tha even dashes is drawn, n' cap-style applies ta all internal endz of
                     tha individual dashes (except NotLast is treated as Butt).
.IP \fIXCB_GC_CAP_STYLE\fP 1i
Da cap-style defines how tha fuck tha endpointz of a path is drawn:
NotLast    Da result is equivalent ta Butt, except dat fo' a line-width of zero tha final
           endpoint aint drawn.
Butt       Da result is square all up in tha endpoint (perpendicular ta tha slope of tha line)
           wit no projection beyond.
Round      Da result be a cold-ass lil circular arc wit its diameta equal ta tha line-width, centered
           on tha endpoint; it is equivalent ta Butt fo' line-width zero.
Projectin Da result is square all up in tha end yo, but tha path continues beyond tha endpoint for
           a gangbangin' finger-lickin' distizzle equal ta half tha line-width; it is equivalent ta Butt fo' line-width
           zero.
.IP \fIXCB_GC_JOIN_STYLE\fP 1i
Da join-style defines how tha fuck corners is drawn fo' wide lines:
Mita               Da outa edgez of tha two lines extend ta hook up at a angle. But fuck dat shiznit yo, tha word on tha street is dat if the
                    angle is less than 11 degrees, a Bevel join-style is used instead.
Round               Da result be a cold-ass lil circular arc wit a gangbangin' finger-lickin' diameta equal ta tha line-width, centered
                    on tha joinpoint.
Bevel               Da result is Butt endpoint styles, n' then tha triangular notch is filled.
.IP \fIXCB_GC_FILL_STYLE\fP 1i
Da fill-style defines tha contentz of tha source fo' line, text, n' fill requests, n' you can put dat on yo' toast. For all text n' fill
requests (for example, PolyText8, PolyText16, PolyFillRectangle, FillPoly, n' PolyFillArc)
as well as fo' line requests wit line-style Solid, (for example, PolyLine, PolySegment,
PolyRectangle, PolyArc) n' fo' tha even dashes fo' line requests wit line-style OnOffDash
or DoubleDash:
Solid                     Foreground
Tiled                     Tile
OpaqueStippled            A tile wit tha same width n' height as stipple but wit background
                          everywhere stipple has a zero n' wit foreground everywhere stipple
                          has a one
Stippled                  Foreground maxed by stipple
For tha odd dashes fo' line requests wit line-style DoubleDash:
Solid                     Background
Tiled                     Same as fo' even dashes
OpaqueStippled            Same as fo' even dashes
Stippled                  Background maxed by stipple
.IP \fIXCB_GC_FILL_RULE\fP 1i

.IP \fIXCB_GC_TILE\fP 1i
Da tile/stipple represents a infinite two-dimensionizzle plane wit tha tile/stipple replicated up in all
dimensions. When dat plane is superimposed on tha drawable fo' use up in a graphics operation,
the upper-left corner of some instizzle of tha tile/stipple be all up in tha coordinates within tha drawable
specified by tha tile/stipple origin. I aint talkin' bout chicken n' gravy biatch. Da tile/stipple n' clip origins is interpreted relatizzle ta the
origin of whatever destination drawable is specified up in a graphics request.
Da tile pixmap must have tha same root n' depth as tha gcontext (or a Match error thangs up in dis biatch).
Da stipple pixmap must have depth one n' must have tha same root as tha gcontext (or a
Match error thangs up in dis biatch). For fill-style Stippled (but not fill-style
OpaqueStippled), tha stipple pattern is tiled up in a single plane n' acts as an
additionizzle clip mask ta be ANDed wit tha clip-mask.
Any size pixmap can be used fo' tilin or stippling, although some sizes may be fasta ta use than
others.
.IP \fIXCB_GC_STIPPLE\fP 1i
Da tile/stipple represents a infinite two-dimensionizzle plane wit tha tile/stipple replicated up in all
dimensions. When dat plane is superimposed on tha drawable fo' use up in a graphics operation,
the upper-left corner of some instizzle of tha tile/stipple be all up in tha coordinates within tha drawable
specified by tha tile/stipple origin. I aint talkin' bout chicken n' gravy biatch. Da tile/stipple n' clip origins is interpreted relatizzle ta the
origin of whatever destination drawable is specified up in a graphics request.
Da tile pixmap must have tha same root n' depth as tha gcontext (or a Match error thangs up in dis biatch).
Da stipple pixmap must have depth one n' must have tha same root as tha gcontext (or a
Match error thangs up in dis biatch). For fill-style Stippled (but not fill-style
OpaqueStippled), tha stipple pattern is tiled up in a single plane n' acts as an
additionizzle clip mask ta be ANDed wit tha clip-mask.
Any size pixmap can be used fo' tilin or stippling, although some sizes may be fasta ta use than
others.
.IP \fIXCB_GC_TILE_STIPPLE_ORIGIN_X\fP 1i
TODO
.IP \fIXCB_GC_TILE_STIPPLE_ORIGIN_Y\fP 1i
TODO
.IP \fIXCB_GC_FONT\fP 1i
Which font ta use fo' tha \fIImageText8\fP n' \fIImageText16\fP requests.
.IP \fIXCB_GC_SUBWINDOW_MODE\fP 1i
For ClipByChildren, both source n' destination windows is additionally
clipped by all viewable InputOutput lil' thugs. For IncludeInferiors, neither
source nor destination window is
clipped by inferiors. This will result up in includin subwindow contents up in tha source n' drawing
all up in subwindow boundariez of tha destination. I aint talkin' bout chicken n' gravy biatch. Da use of IncludeInferiors wit a source or
destination window of one depth wit mapped inferiorz of differin depth aint illegal yo, but the
semantics is undefined by tha core protocol.
.IP \fIXCB_GC_GRAPHICS_EXPOSURES\fP 1i
Whether ExposureEvents should be generated (1) or not (0).

Da default is 1.
.IP \fIXCB_GC_CLIP_ORIGIN_X\fP 1i
TODO
.IP \fIXCB_GC_CLIP_ORIGIN_Y\fP 1i
TODO
.IP \fIXCB_GC_CLIP_MASK\fP 1i
Da clip-mask restricts writes ta tha destination drawable. Only pixels where tha clip-mask has
bits set ta 1 is drawn. I aint talkin' bout chicken n' gravy biatch. Pixels is not drawn outside tha area covered by tha clip-mask or where
the clip-mask has bits set ta 0. Da clip-mask affects all graphics requests yo, but it do not clip
sources. Da clip-mask origin is interpreted relatizzle ta tha origin of whatever destination drawable is specified up in a graphics request. If a pixmap is specified as tha clip-mask, it must have
depth 1 n' have tha same root as tha gcontext (or a Match error thangs up in dis biatch). If clip-mask is None,
then pixels is always drawn, regardless of tha clip origin. I aint talkin' bout chicken n' gravy biatch. Da clip-mask can also be set wit the
SetClipRectanglez request.
.IP \fIXCB_GC_DASH_OFFSET\fP 1i
TODO
.IP \fIXCB_GC_DASH_LIST\fP 1i
TODO
.IP \fIXCB_GC_ARC_MODE\fP 1i
TODO
.RE
.RS 1i


.RE
.IP \fIvalue_list\fP 1i
Values fo' each of tha components specified up in tha bitmask \fIvalue_mask\fP. The
order has ta correspond ta tha order of possible \fIvalue_mask\fP bits, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See the
example.
.SH DESCRIPTION
Changes tha components specified by \fIvalue_mask\fP fo' tha specified graphics context.
.SH RETURN VALUE
Returns a \fIxcb_void_cookie_t\fP. Errors (if any) gotta be handled up in tha event loop.

If you wanna handle errors directly wit \fIxcb_request_check\fP instead, use \fIxcb_change_gc_checked\fP. Right back up in yo muthafuckin ass. See \fBxcb-requests(3)\fP fo' details.
.SH ERRORS
.IP \fIxcb_pixmap_error_t\fP 1i
TODO: reasons?
.IP \fIxcb_alloc_error_t\fP 1i
Da X server could not allocate tha axed resources (no memory?).
.IP \fIxcb_value_error_t\fP 1i
TODO: reasons?
.IP \fIxcb_gc_error_t\fP 1i
TODO: reasons?
.IP \fIxcb_font_error_t\fP 1i
TODO: reasons?
.IP \fIxcb_match_error_t\fP 1i
TODO: reasons?
.SH EXAMPLE
.nf
.sp
/*
 * Chizzlez tha foreground color component of tha specified graphics context.
 *
 */
void my_example(xcb_connection *conn, xcb_gcontext_t gc, uint32_t fg, uint32_t bg) {
    /* C99 allows our asses ta bust a cold-ass lil compact way of changin a single component: */
    xcb_change_gc(conn, gc, XCB_GC_FOREGROUND, (uint32_t[]){ fg });

    /* Da mo' explicit way. Beware dat tha order of joints is blingin son! */
    uint32_t mask = 0;
    mask |= XCB_GC_FOREGROUND;
    mask |= XCB_GC_BACKGROUND;

    uint32_t joints[] = {
        fg,
        bg
    };
    xcb_change_gc(conn, gc, mask, joints);
    xcb_flush(conn);
}
.fi
.SH SEE ALSO
.BR xcb-requests (3),
.BR xcb-examplez (3)
.SH AUTHOR
Generated from xproto.xml. Contact xcb@lists.freedesktop.org fo' erections n' improvements.
