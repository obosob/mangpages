.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Headers::Util 3"
.TH HTTP::Headers::Util 3 "2012-02-16" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Headers::Util \- Header value parsin utilitizzle functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use HTTP::Headers::Util qw(split_header_words);
\&  @values = split_header_words($h\->header("Content\-Type"));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up all dem functions dat helps parsin and
construction of valid \s-1HTTP\s0 header joints, n' you can put dat on yo' toast.  None of tha functions are
exported by default.
.PP
Da followin functions is available:
.ie n .IP "split_header_words( @header_values )" 4
.el .IP "split_header_words( \f(CW@header_values\fR )" 4
.IX Item "split_header_words( @header_values )"
This function will parse tha header joints given as argument tha fuck into a
list of anonymous arrays containin key/value pairs.  Da function
knows how tha fuck ta deal wit \*(L",\*(R", \*(L";\*(R" n' \*(L"=\*(R" as well as quoted joints after
\&\*(L"=\*(R".  A list of space separated tokens is parsed as if they were
separated by \*(L";\*(R".
.Sp
If tha \f(CW@header_values\fR passed as argument gotz nuff multiple joints,
then they is treated as if they was a single value separated by
comma \*(L",\*(R".
.Sp
This means dat dis function is useful fo' parsin header fieldz that
follow dis syntax (\s-1BNF\s0 as from tha \s-1HTTP/1.1\s0 justification yo, but we chillax
the requirement fo' tokens).
.Sp
.Vb 2
\&  headaz           = #header
\&  header            = (token | parameter) *( [";"] (token | parameter))
\&
\&  token             = 1*<any CHAR except CTLs or separators>
\&  separators        = "(" | ")" | "<" | ">" | "@"
\&                    | "," | ";" | ":" | "\e" | <">
\&                    | "/" | "[" | "]" | "?" | "="
\&                    | "{" | "}" | SP | HT
\&
\&  quoted\-strin     = ( <"> *(qdtext | quoted\-pair ) <"> )
\&  qdtext            = <any TEXT except <">>
\&  quoted\-pair       = "\e" CHAR
\&
\&  parameta         = attribute "=" value
\&  attribute         = token
\&  value             = token | quoted\-string
.Ve
.Sp
Each \fIheader\fR is represented by a anonymous array of key/value
pairs.  Da keys is ghon be all be forced ta lower case.
Da value fo' a simple token (not part of a parameter) is \f(CW\*(C`undef\*(C'\fR.
Syntactically incorrect headaz aint gonna necessarily be parsed as you
would want.
.Sp
This is easier ta describe wit some examples:
.Sp
.Vb 3
\&   split_header_words(\*(Aqfoo="bar"; port="80,81"; DISCARD, BAR=baz\*(Aq);
\&   split_header_words(\*(Aqtext/html; charset="iso\-8859\-1"\*(Aq);
\&   split_header_words(\*(AqBasic realm="\e\e"foo\e\e\e\ebar\e\e""\*(Aq);
.Ve
.Sp
will return
.Sp
.Vb 3
\&   [foo=>\*(Aqbar\*(Aq, port=>\*(Aq80,81\*(Aq, discard=> undef], [bar=>\*(Aqbaz\*(Aq ]
\&   [\*(Aqtext/html\*(Aq => undef, charset => \*(Aqiso\-8859\-1\*(Aq]
\&   [basic => undef, realm => "\e"foo\e\ebar\e""]
.Ve
.Sp
If you don't want tha function ta convert tokens n' attribute keys to
lower case you can call it as \f(CW\*(C`_split_header_words\*(C'\fR instead (with a
leadin underscore).
.ie n .IP "join_header_words( @arrays )" 4
.el .IP "join_header_words( \f(CW@arrays\fR )" 4
.IX Item "join_header_words( @arrays )"
This will do tha opposite of tha conversion done by \fIsplit_header_words()\fR.
It takes a list of anonymous arrays as arguments (or a list of
key/value pairs) n' produces a single header value.  Attribute joints
are quoted if needed.
.Sp
Example:
.Sp
.Vb 2
\&   join_header_words(["text/plain" => undef, charset => "iso\-8859/1"]);
\&   join_header_words("text/plain" => undef, charset => "iso\-8859/1");
.Ve
.Sp
will both return tha string:
.Sp
.Vb 1
\&   text/plain; charset="iso\-8859/1"
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1997\-1998, Gisle Aas
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
