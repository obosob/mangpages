.TH "__gnu_cxx::free_list" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::free_list \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fB__gnu_cxx::bitmap_allocator< typename >\fP\fC [private]\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef __mutex \fB__mutex_type\fP"
.br
.ti -1c
.RI "typedef vector_type::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef size_t * \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef 
.br
\fB__detail::__mini_vector\fP
.br
< value_type > \fBvector_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_clear\fP ()"
.br
.ti -1c
.RI "size_t * \fB_M_get\fP (size_t __sz)  throw (std::bad_alloc)"
.br
.ti -1c
.RI "void \fB_M_insert\fP (size_t *__addr)  throw ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Da free list class fo' managin chunkz of memory ta be given ta n' returned by tha bitmap_allocator\&. 
.PP
Definizzle at line 521 of file bitmap_allocator\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void __gnu_cxx::free_list::_M_clear ()"

.PP
This function just clears tha internal Jacked List, n' gives back all tha memory ta tha OS\&. 
.SS "size_t* __gnu_cxx::free_list::_M_get (size_t__sz)\fBstd::bad_alloc\fP"

.PP
This function gets a funky-ass block of memory of tha specified size from tha free list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__sz\fP Da size up in bytez of tha memory required\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointa ta tha freshly smoked up memory block of size at least equal ta dat requested\&. 
.RE
.PP

.SS "void __gnu_cxx::free_list::_M_insert (size_t *__addr)\fC [inline]\fP"

.PP
This function returns tha block of memory ta tha internal free list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__addr\fP Da pointa ta tha memory block dat was given by a cold-ass lil call ta tha _M_get function\&. 
.RE
.PP

.PP
Definizzle at line 631 of file bitmap_allocator\&.h\&.
.PP
Referenced by __gnu_cxx::bitmap_allocator< typename >::_M_deallocate_single_object()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
