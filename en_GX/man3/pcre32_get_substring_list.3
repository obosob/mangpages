.TH PCRE_GET_SUBSTRING_LIST 3 "24 June 2012" "PCRE 8.30"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH SYNOPSIS
.rs
.sp
.B #include <pcre.h>
.PP
.SM
.B int pcre_get_substring_list(const char *\fIsubject\fP,
.ti +5n
.B int *\fIovector\fP, int \fIstringcount\fP, "const char ***\fIlistptr\fP);"
.PP
.B int pcre16_get_substring_list(PCRE_SPTR16 \fIsubject\fP,
.ti +5n
.B int *\fIovector\fP, int \fIstringcount\fP, "PCRE_SPTR16 **\fIlistptr\fP);"
.PP
.B int pcre32_get_substring_list(PCRE_SPTR32 \fIsubject\fP,
.ti +5n
.B int *\fIovector\fP, int \fIstringcount\fP, "PCRE_SPTR32 **\fIlistptr\fP);"
.
.SH DESCRIPTION
.rs
.sp
This be a cold-ass lil convenience function fo' extractin a list of all tha captured
substrings. Da arguments are:
.sp
  \fIsubject\fP       Subject dat has been successfully matched
  \fIovector\fP       Offset vector dat \fBpcre[16|32]_exec\fP used
  \fIstringcount\fP   Value returned by \fBpcre[16|32]_exec\fP
  \fIlistptr\fP       Where ta put a pointa ta tha list
.sp
Da memory up in which tha substrings n' tha list is placed is obtained by
callin \fBpcre[16|32]_malloc()\fP. Da convenience function
\fBpcre[16|32]_free_substring_list()\fP can be used ta free it when it is no
longer needed. Y'all KNOW dat shit, muthafucka! A pointa ta a list of pointas is put up in tha variable whose
address is up in \fIlistptr\fP. Da list is terminated by a NULL pointer n' shit. The
yield of tha function is zero on success or PCRE_ERROR_NOMEMORY if sufficient
memory could not be obtained.
.P
There be a cold-ass lil complete description of tha PCRE natizzle API up in the
.\" HREF
\fBpcreapi\fP
.\"
page n' a thugged-out description of tha POSIX API up in the
.\" HREF
\fBpcreposix\fP
.\"
page.
