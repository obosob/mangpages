'\"
'\" Copyright (c) 2002 Donal K. Fellows
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_TraceCommand 3 7.4 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CommandTraceInfo, Tcl_TraceCommand, Tcl_UntraceCommand \- monitor renames n' deletez of a cold-ass lil command
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
ClientData
\fBTcl_CommandTraceInfo(\fIinterp, cmdName, flags, proc, prevClientData\fB)\fR
.sp
int
\fBTcl_TraceCommand(\fIinterp, cmdName, flags, proc, clientData\fB)\fR
.sp
void
\fBTcl_UntraceCommand(\fIinterp, cmdName, flags, proc, clientData\fB)\fR
.SH ARGUMENTS
.AS Tcl_CommandTraceProc prevClientData
.AP Tcl_Interp *interp in
Interpreta containin tha command.
.AP "const char" *cmdName in
Name of command.
.AP int flags in
OR'ed collection of tha joints \fBTCL_TRACE_RENAME\fR and
\fBTCL_TRACE_DELETE\fR.
.AP Tcl_CommandTraceProc *proc in
Procedure ta booty-call when specified operations occur ta \fIcmdName\fR.
.AP ClientData clientData in
Arbitrary argument ta pass ta \fIproc\fR.
.AP ClientData prevClientData in
If non-NULL, gives last value returned by \fBTcl_CommandTraceInfo\fR,
so dis call will return shiznit bout next trace.  If NULL, this
call will return shiznit bout first trace.
.BE
.SH DESCRIPTION
.PP
\fBTcl_TraceCommand\fR allows a C procedure ta monitor operations
performed on a Tcl command, so dat tha C procedure is invoked
whenever tha command is renamed or deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha trace is pimped
successfully then \fBTcl_TraceCommand\fR returns \fBTCL_OK\fR. If a error
occurred (e.g. \fIcmdName\fR specifies a non-existent command) then
\fBTCL_ERROR\fR is returned n' a error message is left up in the
interpreterz result.
.PP
Da \fIflags\fR argument ta \fBTcl_TraceCommand\fR indicates when the
trace procedure is ta be invoked. Y'all KNOW dat shit, muthafucka!  It consistz of a OR'ed combination
of any of tha followin joints:
.TP
\fBTCL_TRACE_RENAME\fR
Invoke \fIproc\fR whenever tha command is renamed.
.TP
\fBTCL_TRACE_DELETE\fR
Invoke \fIproc\fR when tha command is deleted.
.PP
Whenever one of tha specified operations occurs ta tha command,
\fIproc\fR is ghon be invoked. Y'all KNOW dat shit, muthafucka!  It should have arguments n' result that
match tha type \fBTcl_CommandTraceProc\fR:
.CS
typedef void Tcl_CommandTraceProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR,
        const char *\fIoldName\fR,
        const char *\fInewName\fR,
        int \fIflags\fR);
.CE
Da \fIclientData\fR n' \fIinterp\fR parametas gonna git tha same
values as dem passed ta \fBTcl_TraceCommand\fR when tha trace was
created. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fIClientData\fR typically points ta a application-specific
data structure dat raps bout what tha fuck ta do when \fIproc\fR is invoked.
\fIOldName\fR gives tha name of tha command bein renamed, and
\fInewName\fR gives tha name dat tha command is bein renamed ta (or
an empty strang or NULL when tha command is bein deleted.)
\fIFlags\fR be a OR'ed combination of bits potentially providing
several piecez of shiznit. I aint talkin' bout chicken n' gravy biatch.  One of tha bits \fBTCL_TRACE_RENAME\fR and
\fBTCL_TRACE_DELETE\fR is ghon be set up in \fIflags\fR ta indicate which
operation is bein performed on tha command. Y'all KNOW dat shit, muthafucka!  Da bit
\fBTCL_TRACE_DESTROYED\fR is ghon be set up in \fIflags\fR if tha trace be about
to be destroyed; dis shiznit may be useful ta \fIproc\fR so that
it can clean up its own internal data structures (see tha section
\fBTCL_TRACE_DESTROYED\fR below fo' mo' details).  Lastly, tha bit
\fBTCL_INTERP_DESTROYED\fR is ghon be set if tha entire interpreta is being
destroyed. Y'all KNOW dat shit, muthafucka!  When dis bit is set, \fIproc\fR must be especially
careful up in tha thangs it do (see tha section \fBTCL_INTERP_DESTROYED\fR
below).
.PP
\fBTcl_UntraceCommand\fR may be used ta remove a trace.  If the
command specified by \fIinterp\fR, \fIcmdName\fR, n' \fIflags\fR has
a trace set wit \fIflags\fR, \fIproc\fR, n' \fIclientData\fR, then
the correspondin trace is removed. Y'all KNOW dat shit, muthafucka!  If no such trace exists, then the
call ta \fBTcl_UntraceCommand\fR has no effect.  Da same bits are
valid fo' \fIflags\fR as fo' calls ta \fBTcl_TraceCommand\fR.
.PP
\fBTcl_CommandTraceInfo\fR may be used ta retrieve shiznit about
traces set on a given command.
Da return value from \fBTcl_CommandTraceInfo\fR is tha \fIclientData\fR
associated wit a particular trace.
Da trace must be on tha command specified by tha \fIinterp\fR,
\fIcmdName\fR, n' \fIflags\fR arguments (note dat currently the
flags is ignored; \fIflags\fR should be set ta 0 fo' future
compatibility) n' its trace procedure must tha same as tha \fIproc\fR
argument.
If tha \fIprevClientData\fR argument is NULL then tha return
value correspondz ta tha straight-up original gangsta (most recently pimped) matching
trace, or NULL if there be no matchin traces.
If tha \fIprevClientData\fR argument aint NULL, then it should
be tha return value from a previous call ta \fBTcl_CommandTraceInfo\fR.
In dis case, tha freshly smoked up return value will correspond ta tha next
matchin trace afta tha one whose \fIclientData\fR matches
\fIprevClientData\fR, or NULL if no trace matches \fIprevClientData\fR
or if there be no mo' matchin traces afta dat shit.
This mechanizzle make it possible ta step all up in all of the
traces fo' a given command dat have tha same \fIproc\fR.
.SH "CALLING COMMANDS DURING TRACES"
.PP
Durin rename traces, tha command bein renamed is visible wit both
names simultaneously, n' tha command still exists durin delete
traces (if \fBTCL_INTERP_DESTROYED\fR aint set).  But fuck dat shiznit yo, tha word on tha street is dat there is no
mechanizzle fo' signalin dat a error occurred up in a trace procedure,
so pimped out care should be taken dat errors do not git silently lost.
.SH "MULTIPLE TRACES"
.PP
It be possible fo' multiple traces ta exist on tha same command.
When dis happens, all of tha trace procedures is ghon be invoked on each
access, up in order from most-recently-created ta least-recently-created.
Attempts ta delete tha command durin a thugged-out delete trace will fail
silently, since tha command be already scheduled fo' deletion anyway.
If tha command bein renamed is renamed by one of its rename traces,
that renamin takes precedence over tha one dat triggered tha trace
and tha collection of traces aint gonna be reexecuted; if nuff muthafuckin traces
rename tha command, tha last renamin takes precedence.
.SH "TCL_TRACE_DESTROYED FLAG"
.PP
In a thugged-out delete callback ta \fIproc\fR, tha \fBTCL_TRACE_DESTROYED\fR bit
is set up in \fIflags\fR.
.\" Perhaps need some mo' comments here? - DKF
.SH "TCL_INTERP_DESTROYED"
.PP
When a interpreta is destroyed, unset traces is called for
all of its commands.
Da \fBTCL_INTERP_DESTROYED\fR bit is ghon be set up in tha \fIflags\fR
argument passed ta tha trace procedures.
Trace procedures must be mad careful up in what tha fuck they do if
the \fBTCL_INTERP_DESTROYED\fR bit is set.
It aint safe fo' tha procedures ta invoke any Tcl procedures
on tha interpreter, since its state is partially deleted.
All dat trace procedures should do under these circumstances is
to clean up n' free they own internal data structures.
.SH BUGS
.PP
Tcl do not do any error checkin ta prevent trace procedures
from misusin tha interpreta durin traces wit \fBTCL_INTERP_DESTROYED\fR
set.
.SH KEYWORDS
clientData, trace, command
