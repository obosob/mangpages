'\"
'\" Copyright (c) 1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2000 Ajuba Solutions.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Main 3 8.4 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_Main, Tcl_SetMainLoop \- main program n' event loop definizzle fo' Tcl-based applications
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
\fBTcl_Main\fR(\fIargc, argv, appInitProc\fR)
.sp
\fBTcl_SetMainLoop\fR(\fImainLoopProc\fR)
.SH ARGUMENTS
.AS Tcl_MainLoopProc *mainLoopProc
.AP int argc in
Number of elements up in \fIargv\fR.
.AP char *argv[] in
Array of strings containin command-line arguments.
.AP Tcl_AppInitProc *appInitProc in
Address of a application-specific initialization procedure.
Da value fo' dis argument is probably \fBTcl_AppInit\fR.
.AP Tcl_MainLoopProc *mainLoopProc in
Address of a application-specific event loop procedure.
.BE

.SH DESCRIPTION
.PP
\fBTcl_Main\fR can serve as tha main program fo' Tcl-based shell
applications.  A
.QW "shell application"
is a program
like tclsh or wish dat supports both interactizzle interpretation
of Tcl n' evaluation of a script contained up in a gangbangin' file given as
a command line argument.  \fBTcl_Main\fR is offered as a cold-ass lil convenience
to pimperz of shell applications, so they do not gotta 
reproduce all of tha code fo' proper initialization of tha Tcl
library n' interactizzle shell operation. I aint talkin' bout chicken n' gravy biatch.  Other stylez of embedding
Tcl up in a application is not supported by \fBTcl_Main\fR.  Those
must be  bigged up  by callin lower level functions up in tha Tcl library
directly.

Da \fBTcl_Main\fR function has been offered by tha Tcl library
since release Tcl 7.4.  In olda releasez of Tcl, tha Tcl library
itself defined a gangbangin' function \fBmain\fR yo, but dat lacks flexibility
of embeddin steez n' havin a gangbangin' function \fBmain\fR up in a library
(particularly a gangbangin' finger-lickin' dirty-ass shared library) causes problems on nuff systems.
Havin \fBmain\fR up in tha Tcl library would also make it hard ta use
Tcl up in C++ programs, since C++ programs must have special C++
\fBmain\fR functions.
.PP
Normally each shell application gotz nuff a lil' small-ass \fBmain\fR function
that do not a god damn thang but invoke \fBTcl_Main\fR.
\fBTcl_Main\fR then do all tha work of bustin n' hustlin a
\fBtclsh\fR-like application.
.PP
\fBTcl_Main\fR aint provided by tha hood intercourse of Tcl's
stub library.  Programs dat call \fBTcl_Main\fR must be linked
against tha standard Tcl library.  Extensions (stub-enabled or
not) is not intended ta booty-call \fBTcl_Main\fR.
.PP
\fBTcl_Main\fR aint thread-safe.  It should only be called by
a single masta thread of a multi-threaded application. I aint talkin' bout chicken n' gravy biatch.  This
restriction aint a problem wit aiiight use busted lyrics bout above.
.PP
\fBTcl_Main\fR n' therefore all applications based upon it, like
\fBtclsh\fR, use \fBTcl_GetStdChannel\fR ta initialize tha standard
channels ta they default joints, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See \fBTcl_StandardChannels\fR for
more shiznit.
.PP
\fBTcl_Main\fR supports two modez of operation, dependin on the
valuez of \fIargc\fR n' \fIargv\fR.  If tha straight-up original gangsta few arguments
in \fIargv\fR match ?\fB\-encodin \fIname\fR? \fIfileName\fR,
where \fIfileName\fR do not begin wit tha characta \fI\-\fR,
then \fIfileName\fR is taken ta be tha name of a gangbangin' file containing
a \fIstartup script\fR, n' \fIname\fR is taken ta be tha name
of tha encodin of tha contentz of dat file, which \fBTcl_Main\fR
will attempt ta evaluate.  Otherwise, \fBTcl_Main\fR will enta an
interactizzle mode.
.PP
In either mode, \fBTcl_Main\fR will define up in its masta interpreter
the Tcl variablez \fIargc\fR, \fIargv\fR, \fIargv0\fR, and
\fItcl_interactive\fR, as busted lyrics bout up in tha documentation fo' \fBtclsh\fR.
.PP
When it has finished its own initialization yo, but before it processes
commands, \fBTcl_Main\fR calls tha procedure given by the
\fIappInitProc\fR argument.  This procedure serves up a
.QW hook
for tha application ta big-ass up its own initialization of tha interpreter
created by \fBTcl_Main\fR, like fuckin definin application-specific
commands.  Da procedure must have a intercourse dat matches the
type \fBTcl_AppInitProc\fR:
.CS
typedef int Tcl_AppInitProc(Tcl_Interp *\fIinterp\fR);
.CE

\fIAppInitProc\fR be almost always a pointa ta \fBTcl_AppInit\fR; fo' more
details on dis procedure, peep tha documentation fo' \fBTcl_AppInit\fR.
.PP
When tha \fIappInitProc\fR is finished, \fBTcl_Main\fR entas one
of its two modes.  If a startup script has been provided, \fBTcl_Main\fR
attempts ta evaluate dat shit.  Otherwise, interactizzle mode begins with
examination of tha variable \fItcl_rcFileName\fR up in tha master
interpreter n' shit.  If dat variable exists n' holdz tha name of a readable
file, tha contentz of dat file is evaluated up in tha masta interpreter.
Then interactizzle operations begin,
with prompts n' command evaluation thangs up in dis biatch freestyled ta tha standard
output channel, n' commandz read from tha standard input channel
and then evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da prompts freestyled ta tha standard output
channel may be customized by definin tha Tcl variablez \fItcl_prompt1\fR
and \fItcl_prompt2\fR as busted lyrics bout up in tha documentation fo' \fBtclsh\fR.
Da prompts n' command evaluation thangs up in dis biatch is freestyled ta tha standard
output channel only if tha Tcl variable \fItcl_interactive\fR up in the
masta interpreta holdz a non-zero integer value.
.PP
\fBTcl_SetMainLoop\fR allows settin a event loop procedure ta be run.
This allows, fo' example, Tk ta be dynamically loaded n' set its event
loop.  Da event loop will run followin tha startup script.  If you
are up in interactizzle mode, settin tha main loop procedure will cause the
prompt ta become fileevent based n' then tha loop procedure is called.
When tha loop procedure returns up in interactizzle mode, interactizzle operation
will continue.
Da main loop procedure must have a intercourse dat matches tha type
\fBTcl_MainLoopProc\fR:
.CS
typedef void Tcl_MainLoopProc(void);
.CE
.PP
\fBTcl_Main\fR do not return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Normally a program based on
\fBTcl_Main\fR will terminizzle when tha \fBexit\fR command is
evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In interactizzle mode, if a EOF or channel error
is encountered on tha standard input channel, then \fBTcl_Main\fR
itself will evaluate tha \fBexit\fR command afta tha main loop
procedure (if any) returns.  In non-interactizzle mode, after
\fBTcl_Main\fR evaluates tha startup script, n' tha main loop
procedure (if any) returns, \fBTcl_Main\fR will also evaluate
the \fBexit\fR command.

.SH "SEE ALSO"
tclsh(1), Tcl_GetStdChannel(3), Tcl_StandardChannels(3), Tcl_AppInit(3),
exit(n)

.SH KEYWORDS
application-specific initialization, command-line arguments, main program
