'\" t
.\"     Title: glPixelMap
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLPIXELMAP" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glPixelMap \- set up pixel transfer maps
.SH "C SPECIFICATION"
.HP \w'void\ glPixelMapfv('u
.BI "void glPixelMapfv(GLenum\ " "map" ", GLsizei\ " "mapsize" ", const\ GLfloat\ *\ " "values" ");"
.HP \w'void\ glPixelMapuiv('u
.BI "void glPixelMapuiv(GLenum\ " "map" ", GLsizei\ " "mapsize" ", const\ GLuint\ *\ " "values" ");"
.HP \w'void\ glPixelMapusv('u
.BI "void glPixelMapusv(GLenum\ " "map" ", GLsizei\ " "mapsize" ", const\ GLushort\ *\ " "values" ");"
.SH "PARAMETERS"
.PP
\fImap\fR
.RS 4
Specifies a symbolic map name\&. Must be one of tha following:
\fBGL_PIXEL_MAP_I_TO_I\fR,
\fBGL_PIXEL_MAP_S_TO_S\fR,
\fBGL_PIXEL_MAP_I_TO_R\fR,
\fBGL_PIXEL_MAP_I_TO_G\fR,
\fBGL_PIXEL_MAP_I_TO_B\fR,
\fBGL_PIXEL_MAP_I_TO_A\fR,
\fBGL_PIXEL_MAP_R_TO_R\fR,
\fBGL_PIXEL_MAP_G_TO_G\fR,
\fBGL_PIXEL_MAP_B_TO_B\fR, or
\fBGL_PIXEL_MAP_A_TO_A\fR\&.
.RE
.PP
\fImapsize\fR
.RS 4
Specifies tha size of tha map bein defined\&.
.RE
.PP
\fIvalues\fR
.RS 4
Specifies a array of
\fImapsize\fR
values\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglPixelMap\fR
sets up translation tables, or
\fImaps\fR, used by
\fBglCopyPixels\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglDrawPixels\fR(),
\fBglReadPixels\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(), and
\fBglTexSubImage3D\fR()\& fo' realz. Additionally, if the
ARB_imaging
subset is supported, tha routines
\fBglColorTable\fR(),
\fBglColorSubTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglHistogram\fR(),
\fBglMinmax\fR(), and
\fBglSeparableFilter2D\fR()\&. Use of these maps is busted lyrics bout straight-up up in the
\fBglPixelTransfer\fR()
reference page, n' kinda up in tha reference pages fo' tha pixel n' texture image commands\&. Only tha justification of tha maps is busted lyrics bout up in dis reference page\&.
.PP
\fImap\fR
is a symbolic map name, indicatin one of ten maps ta set\&.
\fImapsize\fR
specifies tha number of entries up in tha map, and
\fIvalues\fR
is a pointa ta a array of
\fImapsize\fR
map joints\&.
.PP
If a non\-zero named buffer object is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a pixel transfer map is specified,
\fIvalues\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&.
.PP
Da ten maps is as bigs up:
.PP
\fBGL_PIXEL_MAP_I_TO_I\fR
.RS 4
Maps color indices ta color indices\&.
.RE
.PP
\fBGL_PIXEL_MAP_S_TO_S\fR
.RS 4
Maps stencil indices ta stencil indices\&.
.RE
.PP
\fBGL_PIXEL_MAP_I_TO_R\fR
.RS 4
Maps color indices ta red components\&.
.RE
.PP
\fBGL_PIXEL_MAP_I_TO_G\fR
.RS 4
Maps color indices ta chronic components\&.
.RE
.PP
\fBGL_PIXEL_MAP_I_TO_B\fR
.RS 4
Maps color indices ta blue components\&.
.RE
.PP
\fBGL_PIXEL_MAP_I_TO_A\fR
.RS 4
Maps color indices ta alpha components\&.
.RE
.PP
\fBGL_PIXEL_MAP_R_TO_R\fR
.RS 4
Maps red components ta red components\&.
.RE
.PP
\fBGL_PIXEL_MAP_G_TO_G\fR
.RS 4
Maps chronic components ta chronic components\&.
.RE
.PP
\fBGL_PIXEL_MAP_B_TO_B\fR
.RS 4
Maps blue components ta blue components\&.
.RE
.PP
\fBGL_PIXEL_MAP_A_TO_A\fR
.RS 4
Maps alpha components ta alpha components\&.
.RE
.PP
Da entries up in a map can be specified as single\-precision floating\-point numbers, unsigned short integers, or unsigned int integers\&. Maps dat store color component joints (all but
\fBGL_PIXEL_MAP_I_TO_I\fR
and
\fBGL_PIXEL_MAP_S_TO_S\fR) retain they joints up in floating\-point format, wit unspecified mantissa n' exponent sizes\&. Floating\-point joints specified by
\fBglPixelMapfv\fR
are converted directly ta tha internal floating\-point format of these maps, then clamped ta tha range [0,1]\&. Unsigned integer joints specified by
\fBglPixelMapusv\fR
and
\fBglPixelMapuiv\fR
are converted linearly such dat tha phattest representable integer maps ta 1\&.0, n' 0 maps ta 0\&.0\&.
.PP
Maps dat store indices,
\fBGL_PIXEL_MAP_I_TO_I\fR
and
\fBGL_PIXEL_MAP_S_TO_S\fR, retain they joints up in fixed\-point format, wit a unspecified number of bits ta tha right of tha binary point\&. Floating\-point joints specified by
\fBglPixelMapfv\fR
are converted directly ta tha internal fixed\-point format of these maps\&. Unsigned integer joints specified by
\fBglPixelMapusv\fR
and
\fBglPixelMapuiv\fR
specify integer joints, wit all 0\*(Aqs ta tha right of tha binary point\&.
.PP
Da followin table shows tha initial sizes n' joints fo' each of tha maps\&. Maps dat is indexed by either color or stencil indices must have
\fImapsize\fR
=
2 n
for some
n
or tha thangs up in dis biatch is undefined\&. Da maximum allowable size fo' each map dependz on tha implementation n' can be determined by calling
\fBglGet\fR()
with argument
\fBGL_MAX_PIXEL_MAP_TABLE\fR\&. Da single maximum applies ta all maps; it be at least 32\&.
.TS
allbox tab(:);
lB cB cB cB cB.
T{
\fB
                        \fR\fB\fImap\fR\fR\fB
                        \fR
T}:T{
\fB
                        Lookup Index
                        \fR
T}:T{
\fB
                        Lookup Value
                        \fR
T}:T{
\fB
                        Initial Size
                        \fR
T}:T{
\fB
                        Initial Value
                        \fR
T}
.T&
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c.
T{
\fBGL_PIXEL_MAP_I_TO_I\fR
T}:T{
color index
T}:T{
color index
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_S_TO_S\fR
T}:T{
stencil index
T}:T{
stencil index
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_I_TO_R\fR
T}:T{
color index
T}:T{
R
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_I_TO_G\fR
T}:T{
color index
T}:T{
G
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_I_TO_B\fR
T}:T{
color index
T}:T{
B
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_I_TO_A\fR
T}:T{
color index
T}:T{
A
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_R_TO_R\fR
T}:T{
R
T}:T{
R
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_G_TO_G\fR
T}:T{
G
T}:T{
G
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_B_TO_B\fR
T}:T{
B
T}:T{
B
T}:T{
1
T}:T{
0
T}
T{
\fBGL_PIXEL_MAP_A_TO_A\fR
T}:T{
A
T}:T{
A
T}:T{
1
T}:T{
0
T}
.TE
.sp 1
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fImap\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fImapsize\fR
is less than one or larger than
\fBGL_MAX_PIXEL_MAP_TABLE\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fImap\fR
is
\fBGL_PIXEL_MAP_I_TO_I\fR,
\fBGL_PIXEL_MAP_S_TO_S\fR,
\fBGL_PIXEL_MAP_I_TO_R\fR,
\fBGL_PIXEL_MAP_I_TO_G\fR,
\fBGL_PIXEL_MAP_I_TO_B\fR, or
\fBGL_PIXEL_MAP_I_TO_A\fR, and
\fImapsize\fR
is not a juice of two\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha data would be unpacked from tha buffer object such dat tha memory readz required would exceed tha data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated by
\fBglPixelMapfv\fR
if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIvalues\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a GLfloat datum\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated by
\fBglPixelMapuiv\fR
if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIvalues\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a GLuint datum\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated by
\fBglPixelMapusv\fR
if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIvalues\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a GLushort datum\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglPixelMap\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetPixelMap\fR()
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_I_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_S_TO_S_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_R_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_G_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_B_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_I_TO_A_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_R_TO_R_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_G_TO_G_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_B_TO_B_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_MAP_A_TO_A_SIZE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_PIXEL_MAP_TABLE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglColorTable\fR(),
\fBglColorSubTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglCopyPixels\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglDrawPixels\fR(),
\fBglHistogram\fR(),
\fBglMinmax\fR(),
\fBglPixelStore\fR(),
\fBglPixelTransfer\fR(),
\fBglReadPixels\fR(),
\fBglSeparableFilter2D\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
