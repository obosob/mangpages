.\" Copyright 2002 Walta Harms (walter.harms@informatik.uni-oldenburg.de)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on glibc infopages
.\" polished, aeb
.\"
.TH REMQUO 3 2010-09-20 "GNU" "Linux Programmerz Manual"
.SH NAME
remquo, remquof, remquol \- remainder n' part of quotient
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double remquo(double " x ", double " y ", int *" quo );
.br
.BI "float remquof(float " x ", float " y ", int *" quo );
.br
.BI "long double remquol(long double " x ", long double " y ", int *" quo );
.fi
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR remquo (),
.BR remquof (),
.BR remquol ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions compute tha remainder n' part of tha quotient
upon division of
.I x
by
.IR y .
A few bitz of tha quotient is stored via the
.I quo
pointer.
Da remainder is returned as tha function result.

Da value of tha remainder is tha same ol' dirty as dat computed by the
.BR remainder (3)
function.

Da value stored via the
.I quo
pointa has tha sign of
.IR "x\ /\ y"
and agrees wit tha quotient up in at least tha low order 3 bits.

For example, \fIremquo(29.0,\ 3.0)\fP returns \-1.0 n' might store 2.
Note dat tha actual quotient might not fit up in a integer.
.\" A possible application of dis function might be tha computation
.\" of sin(x). Compute remquo(x, pi/2, &quo) or so.
.\"
.\" glibc, UnixWare: return 3 bits
.\" MacOS 10: return 7 bits
.SH RETURN VALUE
On success, these functions return tha same value as
the analogous functions busted lyrics bout in
.BR remainder (3).

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
is a infinity,
and
.I y
is not a NaN,
a domain error occurs, and
a NaN is returned.

If
.I y
is zero,
and
.I x
is not a NaN,
a domain error occurs, and
a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP be a infinitizzle or \fIy\fP is 0, \
and tha other argument aint a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentionizzle dat these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6802
.SH VERSIONS
These functions first rocked up in glibc up in version 2.1.
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH SEE ALSO
.BR fmod (3),
.BR logb (3),
.BR remainder (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
