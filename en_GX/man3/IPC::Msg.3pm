.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPC::Msg 3pm"
.TH IPC::Msg 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::Msg \- SysV Msg IPC object class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use IPC::SysV qw(IPC_PRIVATE S_IRUSR S_IWUSR);
\&    use IPC::Msg;
\&
\&    $msg = IPC::Msg\->new(IPC_PRIVATE, S_IRUSR | S_IWUSR);
\&
\&    $msg\->snd($msgtype, $msgdata);
\&
\&    $msg\->rcv($buf, 256);
\&
\&    $dz = $msg\->stat;
\&
\&    $msg\->remove;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A class providin a object based intercourse ta SysV \s-1IPC\s0 message queues.
.SH "METHODS"
.IX Header "METHODS"
.IP "new ( \s-1KEY , FLAGS \s0)" 4
.IX Item "new ( KEY , FLAGS )"
Creates a freshly smoked up message queue associated wit \f(CW\*(C`KEY\*(C'\fR fo' realz. A freshly smoked up queue is
created if
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`KEY\*(C'\fR is equal ta \f(CW\*(C`IPC_PRIVATE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`KEY\*(C'\fR do not already gotz a message queue associated with
it, n' \f(CW\*(C`\f(CIFLAGS\f(CW & IPC_CREAT\*(C'\fR is true.
.RE
.RS 4
.Sp
On creation of a freshly smoked up message queue \f(CW\*(C`FLAGS\*(C'\fR is used ta set the
permissions.  Be careful not ta set any flags dat tha Sys V
\&\s-1IPC\s0 implementation do not allow: up in some systems setting
execute bits make tha operations fail.
.RE
.IP "id" 4
.IX Item "id"
Returns tha system message queue identifier.
.IP "rcv ( \s-1BUF, LEN\s0 [, \s-1TYPE\s0 [, \s-1FLAGS \s0]] )" 4
.IX Item "rcv ( BUF, LEN [, TYPE [, FLAGS ]] )"
Read a message from tha queue. Returns tha type of tha message read.
See msgrcv.  Da \s-1BUF\s0 becomes tainted.
.IP "remove" 4
.IX Item "remove"
Remove n' destroy tha message queue from tha system.
.IP "set ( \s-1STAT \s0)" 4
.IX Item "set ( STAT )"
.PD 0
.IP "set ( \s-1NAME\s0 => \s-1VALUE\s0 [, \s-1NAME\s0 => \s-1VALUE ...\s0] )" 4
.IX Item "set ( NAME => VALUE [, NAME => VALUE ...] )"
.PD
\&\f(CW\*(C`set\*(C'\fR will set tha followin jointz of tha \f(CW\*(C`stat\*(C'\fR structure associated
with tha message queue.
.Sp
.Vb 4
\&    uid
\&    gid
\&    mode (oly tha permission bits)
\&    qbytes
.Ve
.Sp
\&\f(CW\*(C`set\*(C'\fR accepts either a stat object, as returned by tha \f(CW\*(C`stat\*(C'\fR method,
or a list of \fIname\fR\-\fIvalue\fR pairs.
.IP "snd ( \s-1TYPE, MSG\s0 [, \s-1FLAGS \s0] )" 4
.IX Item "snd ( TYPE, MSG [, FLAGS ] )"
Place a message on tha queue wit tha data from \f(CW\*(C`MSG\*(C'\fR n' wit type \f(CW\*(C`TYPE\*(C'\fR.
See msgsnd.
.IP "stat" 4
.IX Item "stat"
Returns a object of type \f(CW\*(C`IPC::Msg::stat\*(C'\fR which be a sub-class of
\&\f(CW\*(C`Class::Struct\*(C'\fR. Well shiiiit, it serves up tha followin fields. For a thugged-out description
of these fieldz peep you system documentation.
.Sp
.Vb 12
\&    uid
\&    gid
\&    cuid
\&    cgid
\&    mode
\&    qnum
\&    qbytes
\&    lspid
\&    lrpid
\&    stime
\&    rtime
\&    ctime
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IPC::SysV, Class::Struct
.SH "AUTHORS"
.IX Header "AUTHORS"
Graham Barr <gbarr@pobox.com>,
Marcus Holland-Moritz <mhx@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Version 2.x, Copyright (C) 2007\-2010, Marcus Holland-Moritz.
.PP
Version 1.x, Copyright (c) 1997, Graham Barr.
.PP
This program is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
