'\" t
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface, \fRO'Reilly n' Associates, Sebastopol, 1991. 
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
'\" t
.TH XAllocWMHints 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XAllocWMHints, XSetWMHints, XGetWMHints, XWMHints \- allocate window manager hints structure n' set or read a windowz WM_HINTS property
.SH SYNTAX
.HP
XWMHints *XAllocWMHints\^(void\^); 
.HP
int XSetWMHints\^(\^Display *\fIdisplay\fP, Window \fIw\fP, XWMHints *\fIwmhints\fP\^);
.HP
XWMHints *XGetWMHints\^(\^Display *\fIdisplay\fP, Window \fIw\fP\^);
.SH ARGUMENTS
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.IP \fIw\fP 1i
Specifies tha window.
.IP \fIwmhints\fP 1i
Specifies tha 
.ZN XWMHints
structure ta be used.
.SH DESCRIPTION
The
.ZN XAllocWMHints
function allocates n' returns a pointa ta a
.ZN XWMHints
structure.
Note dat all fieldz up in the
.ZN XWMHints
structure is initially set ta zero.
If insufficient memory be available, 
.ZN XAllocWMHints
returns NULL.
To free tha memory allocated ta dis structure,
use
.ZN XJacked .
.LP
The
.ZN XSetWMHints
function sets tha window manager hints dat include icon shiznit n' location,
the initial state of tha window, n' whether tha application relies on the
window manager ta git keyboard input.
.LP
.ZN XSetWMHints
can generate
.ZN BadAlloc
and
.ZN BadWindow
errors.
.LP
The
.ZN XGetWMHints
function readz tha window manager hints n' 
returns NULL if no WM_HINTS property was set on tha window 
or returns a pointa ta a 
.ZN XWMHints 
structure if it succeeds.
When finished wit tha data,
free tha space used fo' it by calling
.ZN XJacked .
.LP
.ZN XGetWMHints
can generate a
.ZN BadWindow
error.
.SH PROPERTIES
.TP 1i
\s-1WM_HINTS\s+1
Additionizzle hints set by tha client fo' use by tha window manager.
Da C type of dis property is 
.ZN XWMHints .
.SH STRUCTURES
The
.ZN XWMHints
structure gotz nuff:
.LP
/\&* Window manager hints mask bits */
.TS
lw(.5i) lw(2.5i) lw(2.5i).
T{
\&#define
T}	T{
.ZN InputHint
T}	T{
(1L << 0)
T}
T{
\&#define
T}	T{
.ZN StateHint
T}	T{
(1L << 1)
T}
T{
\&#define
T}	T{
.ZN IconPixmapHint
T}	T{
(1L << 2)
T}
T{
\&#define
T}	T{
.ZN IconWindowHint
T}	T{
(1L << 3)
T}
T{
\&#define
T}	T{
.ZN IconPositionHint
T}	T{
(1L << 4)
T}
T{
\&#define
T}	T{
.ZN IconMaskHint
T}	T{
(1L << 5)
T}
T{
\&#define
T}	T{
.ZN WindowGroupHint
T}	T{
(1L << 6)
T}
T{
\&#define
T}	T{
.ZN XUrgencyHint
T}	T{
(1L << 8)
T}
T{
\&#define
T}	T{
.ZN AllHints
T}	T{
(InputHint|StateHint|IconPixmapHint|
.br
IconWindowHint|IconPositionHint|
.br
IconMaskHint|WindowGroupHint)
T}
.TE
.IN "XWMHints" "" "@DEF@"
.Ds 0
/\&* Values */

typedef struct {
        long flags;     /\&* marks which fieldz up in dis structure is defined */
        Bool input;     /\&* do dis application rely on tha window manager to
                        git keyboard input? */
        int initial_state;      /\&* peep below */
        Pixmap icon_pixmap;     /\&* pixmap ta be used as icon */
        Window icon_window;     /\&* window ta be used as icon */
        int icon_x, icon_y;     /\&* initial posizzle of icon */
        Pixmap icon_mask;       /\&* pixmap ta be used as mask fo' icon_pixmap */
        XID window_group;       /\&* id of related window crew */
        /\&* dis structure may be extended up in tha future */
} XWMHints;
.De
.LP
Da input member is used ta rap ta tha window manager tha input focus
model used by tha application.
Applications dat expect input but never explicitly set focus ta any 
of they subwindows (that is, use tha push model of focus pimpment), 
like fuckin X Version 10 steez applications dat use real-estate
driven focus, should set dis member ta 
.ZN True .  
Similarly, applications
that set input focus ta they subwindows only when it is given ta their
top-level window by a window manager should also set dis member ta 
.ZN True .
Applications dat manage they own input focus by explicitly setting
focus ta one of they subwindows whenever they want keyboard input 
(that is, use tha pull model of focus pimpment) should set dis member ta 
.ZN False .
Applications dat never expect any keyboard input also should set dis member
to 
.ZN False .
.LP
Pull model window managers should make it possible fo' push model
applications ta git input by settin input focus ta tha top-level windows of
applications whose input member is 
.ZN True .  
Push model window managers should
make shizzle dat pull model applications do not break dem 
by resettin input focus ta 
.ZN PointerRoot 
when it be appropriate (for example, whenever a application whose
input member is 
.ZN False 
sets input focus ta one of its subwindows).
.LP
Da definitions fo' tha initial_state flag are:
.TS
lw(.5i) lw(2i) lw(.2i) lw(2.8i).
T{
\&#define
T}	T{
.ZN WithdrawnState
T}	T{
0
T}	T{
T}
T{
\&#define
T}	T{
.ZN NormalState
T}	T{
1
T}	T{
/\&* most applications start dis way */
T}
T{
\&#define
T}	T{
.ZN IconicState
T}	T{
3
T}	T{
/\&* application wants ta start as a icon */
T}
.TE
Da icon_mask specifies which pixelz of tha icon_pixmap should be used as the
icon. I aint talkin' bout chicken n' gravy biatch.  
This allows fo' nonrectangular icons.
Both icon_pixmap n' icon_mask must be bitmaps.
Da icon_window lets a application provide a window fo' use as a icon
for window managers dat support such use.
Da window_group lets you specify dat dis window belongs ta a group
of other windows.
For example, if a single application manipulates multiple 
top-level windows, dis allows you ta provide enough
information dat a window manager can iconify all of tha windows
rather than just tha one window.
.LP
The
.ZN UrgencyHint
flag, if set up in tha flags field, indicates dat tha client deems tha window
contents ta be urgent, requirin tha timely response of tha user n' shit.  The
window manager will cook up some fuckin effort ta draw tha userz attention ta this
window while dis flag is set.  Da client must provide some means by which the
user can cause tha urgency flag ta be cleared (either mitigating
the condizzle dat made tha window urgent or merely shuttin off tha alarm)
or tha window ta be withdrawn.
.SH DIAGNOSTICS
.TP 1i
.ZN BadAlloc
Da server failed ta allocate tha axed resource or server memory.
.TP 1i
.ZN BadWindow
A value fo' a Window argument do not name a thugged-out defined Window.
.SH "SEE ALSO"
XAllocClassHint(3),
XAllocIconSize(3),
XAllocSizeHints(3),
XFree(3),
XSetCommand(3),
XSetTransientForHint(3),
XSetTextProperty(3),
XSetWMClientMachine(3),
XSetWMColormapWindows(3),
XSetWMIconName(3),
XSetWMName(3),
XSetWMProperties(3),
XSetWMProtocols(3),
XStringListToTextProperty(3)
.br
\fI\*(xL\fP
