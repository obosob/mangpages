" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::__mt_alloc< _Tp, _Poolp > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fB__gnu_cxx::__mt_alloc_base< _Tp >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Poolp \fB__policy_type\fP"
.br
.ti -1c
.RI "typedef _Poolp::pool_type \fB__pool_type\fP"
.br
.ti -1c
.RI "typedef const _Tp * \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const _Tp & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Tp * \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBstd::true_type\fP \fBpropagate_on_container_move_assignment\fP"
.br
.ti -1c
.RI "typedef _Tp & \fBreference\fP"
.br
.ti -1c
.RI "typedef size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__mt_alloc\fP (const \fB__mt_alloc\fP &) noexcept"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Poolp1 > \fB__mt_alloc\fP (const \fB__mt_alloc\fP< _Tp1, _Poolp1 > &) noexcept"
.br
.ti -1c
.RI "const __pool_base::_Tune \fB_M_get_options\fP ()"
.br
.ti -1c
.RI "void \fB_M_set_options\fP (__pool_base::_Tune __t)"
.br
.ti -1c
.RI "pointa \fBaddress\fP (reference __x) const noexcept"
.br
.ti -1c
.RI "const_pointa \fBaddress\fP (const_reference __x) const noexcept"
.br
.ti -1c
.RI "pointa \fBallocate\fP (size_type __n, const void *=0)"
.br
.ti -1c
.RI "template<typename _Up , typename\&.\&.\&. _Args> void \fBconstruct\fP (_Up *__p, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (pointa __p, size_type __n)"
.br
.ti -1c
.RI "template<typename _Up > void \fBdestroy\fP (_Up *__p)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Poolp = __common_pool_policy<__pool,  legit >>class __gnu_cxx::__mt_alloc< _Tp, _Poolp >"
This be a gangbangin' fixed size (power of 2) allocator which - when compiled wit thread support - will maintain one freelist per size per thread plus a \fIglobal\fP one\&. Right back up in yo muthafuckin ass. Steps is taken ta limit tha per thread freelist sizes (by returnin excess back ta tha \fIglobal\fP list)\&.
.PP
Further details: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch32.html\&. 
.PP
Definizzle at line 639 of file mt_allocator\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
