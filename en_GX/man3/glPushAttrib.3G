'\" t
.\"     Title: glPushAttrib
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLPUSHATTRIB" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glPushAttrib \- push n' pop tha server attribute stack
.SH "C SPECIFICATION"
.HP \w'void\ glPushAttrib('u
.BI "void glPushAttrib(GLbitfield\ " "mask" ");"
.SH "PARAMETERS"
.PP
\fImask\fR
.RS 4
Specifies a mask dat indicates which attributes ta save\&. Values for
\fImask\fR
are listed below\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glPopAttrib('u
.BI "void glPopAttrib(" "void" ");"
.SH "DESCRIPTION"
.PP
\fBglPushAttrib\fR
takes one argument, a mask dat indicates which crewz of state variablez ta save on tha attribute stack\&. Right back up in yo muthafuckin ass. Symbolic constants is used ta set bits up in tha mask\&.
\fImask\fR
is typically constructed by specifyin tha bitwise\-or of nuff muthafuckin of these constants together\&. Da special mask
\fBGL_ALL_ATTRIB_BITS\fR
can be used ta save all stackable states\&.
.PP
Da symbolic mask constants n' they associated GL state is as bigs up (the second column lists which attributes is saved):
.PP
.TS
allbox tab(:);
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l.
T{
\fBGL_ACCUM_BUFFER_BIT\fR
T}:T{
Accumulation buffer clear value
T}
T{
\fBGL_COLOR_BUFFER_BIT\fR
T}:T{
\fBGL_ALPHA_TEST\fR enable bit
T}
T{

T}:T{
Alpha test function n' reference value
T}
T{

T}:T{
\fBGL_BLEND\fR enable bit
T}
T{

T}:T{
Blendin source n' destination functions
T}
T{

T}:T{
Constant blend color
T}
T{

T}:T{
Blendin equation
T}
T{

T}:T{
\fBGL_DITHER\fR enable bit
T}
T{

T}:T{
\fBGL_DRAW_BUFFER\fR setting
T}
T{

T}:T{
\fBGL_COLOR_LOGIC_OP\fR enable bit
T}
T{

T}:T{
\fBGL_INDEX_LOGIC_OP\fR enable bit
T}
T{

T}:T{
Logic op function
T}
T{

T}:T{
Color mode n' index mode clear joints
T}
T{

T}:T{
Color mode n' index mode writemasks
T}
T{
\fBGL_CURRENT_BIT\fR
T}:T{
Current RGBA color
T}
T{

T}:T{
Current color index
T}
T{

T}:T{
Current aiiight vector
T}
T{

T}:T{
Current texture coordinates
T}
T{

T}:T{
Current rasta position
T}
T{

T}:T{
\fBGL_CURRENT_RASTER_POSITION_VALID\fR flag
T}
T{

T}:T{
RGBA color associated wit current rasta position
T}
T{

T}:T{
Color index associated wit current rasta position
T}
T{

T}:T{
Texture coordinates associated wit current rasta position
T}
T{

T}:T{
\fBGL_EDGE_FLAG\fR flag
T}
T{
\fBGL_DEPTH_BUFFER_BIT\fR
T}:T{
\fBGL_DEPTH_TEST\fR enable bit
T}
T{

T}:T{
Depth buffer test function
T}
T{

T}:T{
Depth buffer clear value
T}
T{

T}:T{
\fBGL_DEPTH_WRITEMASK\fR enable bit
T}
T{
\fBGL_ENABLE_BIT\fR
T}:T{
\fBGL_ALPHA_TEST\fR flag
T}
T{

T}:T{
\fBGL_AUTO_NORMAL\fR flag
T}
T{

T}:T{
\fBGL_BLEND\fR flag
T}
T{

T}:T{
Enable bits fo' tha user\-definable clippin planes
T}
T{

T}:T{
\fBGL_COLOR_MATERIAL\fR
T}
T{

T}:T{
\fBGL_CULL_FACE\fR flag
T}
T{

T}:T{
\fBGL_DEPTH_TEST\fR flag
T}
T{

T}:T{
\fBGL_DITHER\fR flag
T}
T{

T}:T{
\fBGL_FOG\fR flag
T}
T{

T}:T{
\fBGL_LIGHT\fR\fIi\fR
			where
				    \fB0\fR <= 		  				    \fIi\fR <     				    \fBGL_MAX_LIGHTS\fR
T}
T{

T}:T{
\fBGL_LIGHTING\fR flag
T}
T{

T}:T{
\fBGL_LINE_SMOOTH\fR flag
T}
T{

T}:T{
\fBGL_LINE_STIPPLE\fR flag
T}
T{

T}:T{
\fBGL_COLOR_LOGIC_OP\fR flag
T}
T{

T}:T{
\fBGL_INDEX_LOGIC_OP\fR flag
T}
T{

T}:T{
\fBGL_MAP1_\fR\fIx\fR where \fIx\fR be a map type
T}
T{

T}:T{
\fBGL_MAP2_\fR\fIx\fR where \fIx\fR be a map type
T}
T{

T}:T{
\fBGL_MULTISAMPLE\fR flag
T}
T{

T}:T{
\fBGL_NORMALIZE\fR flag
T}
T{

T}:T{
\fBGL_POINT_SMOOTH\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_LINE\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_FILL\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_POINT\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_SMOOTH\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_STIPPLE\fR flag
T}
T{

T}:T{
\fBGL_SAMPLE_ALPHA_TO_COVERAGE\fR flag
T}
T{

T}:T{
\fBGL_SAMPLE_ALPHA_TO_ONE\fR flag
T}
T{

T}:T{
\fBGL_SAMPLE_COVERAGE\fR flag
T}
T{

T}:T{
\fBGL_SCISSOR_TEST\fR flag
T}
T{

T}:T{
\fBGL_STENCIL_TEST\fR flag
T}
T{

T}:T{
\fBGL_TEXTURE_1D\fR flag
T}
T{

T}:T{
\fBGL_TEXTURE_2D\fR flag
T}
T{

T}:T{
\fBGL_TEXTURE_3D\fR flag
T}
T{

T}:T{
Flags \fBGL_TEXTURE_GEN_\fR\fIx\fR where \fIx\fR is S, T, R, or Q
T}
T{
\fBGL_EVAL_BIT\fR
T}:T{
\fBGL_MAP1_\fR\fIx\fR enable bits, where \fIx\fR be a map type
T}
T{

T}:T{
\fBGL_MAP2_\fR\fIx\fR enable bits, where \fIx\fR be a map type
T}
T{

T}:T{
1D grid endpoints n' divisions
T}
T{

T}:T{
2D grid endpoints n' divisions
T}
T{

T}:T{
\fBGL_AUTO_NORMAL\fR enable bit
T}
T{
\fBGL_FOG_BIT\fR
T}:T{
\fBGL_FOG\fR enable bit
T}
T{

T}:T{
Fog color
T}
T{

T}:T{
Fog density
T}
T{

T}:T{
Linear fog start
T}
T{

T}:T{
Linear fog end
T}
T{

T}:T{
Fog index
T}
T{

T}:T{
\fBGL_FOG_MODE\fR value
T}
T{
\fBGL_HINT_BIT\fR
T}:T{
\fBGL_PERSPECTIVE_CORRECTION_HINT\fR setting
T}
T{

T}:T{
\fBGL_POINT_SMOOTH_HINT\fR setting
T}
T{

T}:T{
\fBGL_LINE_SMOOTH_HINT\fR setting
T}
T{

T}:T{
\fBGL_POLYGON_SMOOTH_HINT\fR setting
T}
T{

T}:T{
\fBGL_FOG_HINT\fR setting
T}
T{

T}:T{
\fBGL_GENERATE_MIPMAP_HINT\fR setting
T}
T{

T}:T{
\fBGL_TEXTURE_COMPRESSION_HINT\fR setting
T}
T{
\fBGL_LIGHTING_BIT\fR
T}:T{
\fBGL_COLOR_MATERIAL\fR enable bit
T}
T{

T}:T{
\fBGL_COLOR_MATERIAL_FACE\fR value
T}
T{

T}:T{
Color material parametas dat is trackin tha current color
T}
T{

T}:T{
Ambient scene color
T}
T{

T}:T{
\fBGL_LIGHT_MODEL_LOCAL_VIEWER\fR value
T}
T{

T}:T{
\fBGL_LIGHT_MODEL_TWO_SIDE\fR setting
T}
T{

T}:T{
\fBGL_LIGHTING\fR enable bit
T}
T{

T}:T{
Enable bit fo' each light
T}
T{

T}:T{
Ambient, diffuse, n' specular intensitizzle fo' each light
T}
T{

T}:T{
Direction, position, exponent, n' cutoff angle fo' each light
T}
T{

T}:T{
Constant, linear, n' quadratic attenuation factors fo' each light
T}
T{

T}:T{
Ambient, diffuse, specular, n' emissive color fo' each material
T}
T{

T}:T{
Ambient, diffuse, n' specular color indices fo' each material
T}
T{

T}:T{
Specular exponent fo' each material
T}
T{

T}:T{
\fBGL_SHADE_MODEL\fR setting
T}
T{
\fBGL_LINE_BIT\fR
T}:T{
\fBGL_LINE_SMOOTH\fR flag
T}
T{

T}:T{
\fBGL_LINE_STIPPLE\fR enable bit
T}
T{

T}:T{
Line stipple pattern n' repeat counter
T}
T{

T}:T{
Line width
T}
T{
\fBGL_LIST_BIT\fR
T}:T{
\fBGL_LIST_BASE\fR setting
T}
T{
\fBGL_MULTISAMPLE_BIT\fR
T}:T{
\fBGL_MULTISAMPLE\fR flag
T}
T{

T}:T{
\fBGL_SAMPLE_ALPHA_TO_COVERAGE\fR flag
T}
T{

T}:T{
\fBGL_SAMPLE_ALPHA_TO_ONE\fR flag
T}
T{

T}:T{
\fBGL_SAMPLE_COVERAGE\fR flag
T}
T{

T}:T{
\fBGL_SAMPLE_COVERAGE_VALUE\fR value
T}
T{

T}:T{
\fBGL_SAMPLE_COVERAGE_INVERT\fR value
T}
T{
\fBGL_PIXEL_MODE_BIT\fR
T}:T{
\fBGL_RED_BIAS\fR n' \fBGL_RED_SCALE\fR settings
T}
T{

T}:T{
\fBGL_GREEN_BIAS\fR n' \fBGL_GREEN_SCALE\fR joints
T}
T{

T}:T{
\fBGL_BLUE_BIAS\fR n' \fBGL_BLUE_SCALE\fR
T}
T{

T}:T{
\fBGL_ALPHA_BIAS\fR n' \fBGL_ALPHA_SCALE\fR
T}
T{

T}:T{
\fBGL_DEPTH_BIAS\fR n' \fBGL_DEPTH_SCALE\fR
T}
T{

T}:T{
\fBGL_INDEX_OFFSET\fR n' \fBGL_INDEX_SHIFT\fR joints
T}
T{

T}:T{
\fBGL_MAP_COLOR\fR n' \fBGL_MAP_STENCIL\fR flags
T}
T{

T}:T{
\fBGL_ZOOM_X\fR n' \fBGL_ZOOM_Y\fR factors
T}
T{

T}:T{
\fBGL_READ_BUFFER\fR setting
T}
T{
\fBGL_POINT_BIT\fR
T}:T{
\fBGL_POINT_SMOOTH\fR flag
T}
T{

T}:T{
Point size
T}
T{
\fBGL_POLYGON_BIT\fR
T}:T{
\fBGL_CULL_FACE\fR enable bit
T}
T{

T}:T{
\fBGL_CULL_FACE_MODE\fR value
T}
T{

T}:T{
\fBGL_FRONT_FACE\fR indicator
T}
T{

T}:T{
\fBGL_POLYGON_MODE\fR setting
T}
T{

T}:T{
\fBGL_POLYGON_SMOOTH\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_STIPPLE\fR enable bit
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_FILL\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_LINE\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_POINT\fR flag
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_FACTOR\fR
T}
T{

T}:T{
\fBGL_POLYGON_OFFSET_UNITS\fR
T}
T{
\fBGL_POLYGON_STIPPLE_BIT\fR
T}:T{
Polygon stipple image
T}
T{
\fBGL_SCISSOR_BIT\fR
T}:T{
\fBGL_SCISSOR_TEST\fR flag
T}
T{

T}:T{
Scissor box
T}
T{
\fBGL_STENCIL_BUFFER_BIT\fR
T}:T{
\fBGL_STENCIL_TEST\fR enable bit
T}
T{

T}:T{
Stencil function n' reference value
T}
T{

T}:T{
Stencil value mask
T}
T{

T}:T{
Stencil fail, pass, n' depth buffer pass actions
T}
T{

T}:T{
Stencil buffer clear value
T}
T{

T}:T{
Stencil buffer writemask
T}
T{
\fBGL_TEXTURE_BIT\fR
T}:T{
Enable bits fo' tha four texture coordinates
T}
T{

T}:T{
Border color fo' each texture image
T}
T{

T}:T{
Minification function fo' each texture image
T}
T{

T}:T{
Magnification function fo' each texture image
T}
T{

T}:T{
Texture coordinates n' wrap mode fo' each texture image
T}
T{

T}:T{
Color n' mode fo' each texture environment
T}
T{

T}:T{
Enable bits \fBGL_TEXTURE_GEN_\fR\fIx\fR, \fIx\fR is S, T, R, n' Q
T}
T{

T}:T{
\fBGL_TEXTURE_GEN_MODE\fR settin fo' S, T, R, n' Q
T}
T{

T}:T{
\fBglTexGen\fR() plane equations fo' S, T, R, n' Q
T}
T{

T}:T{
Current texture bindings (for example, \fBGL_TEXTURE_BINDING_2D\fR)
T}
T{
\fBGL_TRANSFORM_BIT\fR
T}:T{
Coefficientz of tha six clippin planes
T}
T{

T}:T{
Enable bits fo' tha user\-definable clippin planes
T}
T{

T}:T{
\fBGL_MATRIX_MODE\fR value
T}
T{

T}:T{
\fBGL_NORMALIZE\fR flag
T}
T{

T}:T{
\fBGL_RESCALE_NORMAL\fR flag
T}
T{
\fBGL_VIEWPORT_BIT\fR
T}:T{
Depth range (near n' far)
T}
T{

T}:T{
Viewport origin n' extent
T}
.TE
.sp 1
.PP
\fBglPopAttrib\fR()
restores tha jointz of tha state variablez saved wit tha last
\fBglPushAttrib\fR
command\&. Those not saved is left unchanged\&.
.PP
It be a error ta push attributes onto a gangbangin' full stack or ta pop attributes off a empty stack\&. In either case, tha error flag is set n' no other chizzle is made ta GL state\&.
.PP
Initially, tha attribute stack is empty\&.
.SH "NOTES"
.PP
Not all joints fo' GL state can be saved on tha attribute stack\&. For example, render mode state, n' select n' feedback state cannot be saved\&. Client state must be saved with
\fBglPushClientAttrib\fR()\&.
.PP
Da depth of tha attribute stack dependz on tha implementation yo, but it must be at least 16\&.
.PP
For OpenGL versions 1\&.3 n' pimped outer, or when the
ARB_multitexture
extension is supported, pushin n' poppin texture state applies ta all supported texture units\&.
.SH "ERRORS"
.PP
\fBGL_STACK_OVERFLOW\fR
is generated if
\fBglPushAttrib\fR
is called while tha attribute stack is full\&.
.PP
\fBGL_STACK_UNDERFLOW\fR
is generated if
\fBglPopAttrib\fR()
is called while tha attribute stack is empty\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglPushAttrib\fR
or
\fBglPopAttrib\fR()
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_ATTRIB_STACK_DEPTH\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_ATTRIB_STACK_DEPTH\fR
.SH "SEE ALSO"
.PP
\fBglGet\fR(),
\fBglGetClipPlane\fR(),
\fBglGetError\fR(),
\fBglGetLight\fR(),
\fBglGetMap\fR(),
\fBglGetMaterial\fR(),
\fBglGetPixelMap\fR(),
\fBglGetPolygonStipple\fR(),
\fBglGetString\fR(),
\fBglGetTexEnv\fR(),
\fBglGetTexGen\fR(),
\fBglGetTexImage\fR(),
\fBglGetTexLevelParameter\fR(),
\fBglGetTexParameter\fR(),
\fBglIsEnabled\fR(),
\fBglPushClientAttrib\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
