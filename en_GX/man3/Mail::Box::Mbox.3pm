.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Mbox 3"
.TH Mail::Box::Mbox 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Mbox \- handle foldaz up in Mbox format
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::Mbox
\&   be a Mail::Box::File
\&   be a Mail::Box
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::Mbox;
\& mah $folda = Mail::Box::Mbox\->new(folda => $ENV{MAIL}, ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation raps bout how tha fuck Mbox mailboxes work, n' also raps about
what you can do wit tha Mbox folda object Mail::Box::Mbox.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.ie n .IP "overload: \fB""""\fR()" 4
.el .IP "overload: \fB``''\fR()" 4
.IX Item "overload: """"()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fB@{}\fR()" 4
.IX Item "overload: @{}()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fBcmp\fR()" 4
.IX Item "overload: cmp()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Mbox\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Mbox->new(OPTIONS)"
.Vb 10
\& \-Option             \-\-Defined up in     \-\-Default
\&  access               Mail::Box        \*(Aqr\*(Aq
\&  body_delayed_type    Mail::Box        Mail::Message::Body::Delayed
\&  body_type            Mail::Box::File  <see description>
\&  coerce_options       Mail::Box        []
\&  create               Mail::Box        <false>
\&  extract              Mail::Box        10240
\&  field_type           Mail::Box        undef
\&  fix_headaz          Mail::Box        <false>
\&  folda               Mail::Box        $ENV{MAIL}
\&  folderdir            Mail::Box        $ENV{HOME}.\*(Aq/Mail\*(Aq
\&  head_delayed_type    Mail::Box        Mail::Message::Head::Delayed
\&  head_type            Mail::Box        Mail::Message::Head::Complete
\&  keep_dups            Mail::Box        <false>
\&  lock_extension       Mail::Box::File  \*(Aq.lock\*(Aq
\&  lock_file            Mail::Box        <foldername><lock\-extension>
\&  lock_timeout         Mail::Box        1 hour
\&  lock_type            Mail::Box        Mail::Box::Locker::DotLock
\&  lock_wait            Mail::Box        10 seconds
\&  locker               Mail::Box        undef
\&  log                  Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  manager              Mail::Box        undef
\&  message_type         Mail::Box        Mail::Box::Mbox::Message
\&  multipart_type       Mail::Box        Mail::Message::Body::Multipart
\&  remove_when_empty    Mail::Box        <true>
\&  save_on_exit         Mail::Box        <true>
\&  subfolder_extension                   \*(Aq.d\*(Aq
\&  trace                Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  trusted              Mail::Box        <dependz on folda location>
\&  write_policy         Mail::Box::File  undef
.Ve
.RS 4
.IP "access => \s-1MODE\s0" 2
.IX Item "access => MODE"
.PD 0
.IP "body_delayed_type => \s-1CLASS\s0" 2
.IX Item "body_delayed_type => CLASS"
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "coerce_options => \s-1ARRAY\s0" 2
.IX Item "coerce_options => ARRAY"
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
.IP "extract => \s-1INTEGER\s0 | \s-1CODE\s0 | \s-1METHOD\s0 | '\s-1LAZY\s0'|'\s-1ALWAYS\s0'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "fix_headaz => \s-1BOOLEAN\s0" 2
.IX Item "fix_headaz => BOOLEAN"
.IP "folda => \s-1FOLDERNAME\s0" 2
.IX Item "folda => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => \s-1CLASS\s0" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "keep_dups => \s-1BOOLEAN\s0" 2
.IX Item "keep_dups => BOOLEAN"
.IP "lock_extension => FILENAME|STRING" 2
.IX Item "lock_extension => FILENAME|STRING"
.IP "lock_file => \s-1FILENAME\s0" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => \s-1SECONDS\s0" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => \s-1SECONDS\s0" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => \s-1OBJECT\s0" 2
.IX Item "locker => OBJECT"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1MANAGER\s0" 2
.IX Item "manager => MANAGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => \s-1CLASS\s0" 2
.IX Item "multipart_type => CLASS"
.IP "remove_when_empty => \s-1BOOLEAN\s0" 2
.IX Item "remove_when_empty => BOOLEAN"
.IP "save_on_exit => \s-1BOOLEAN\s0" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "subfolder_extension => \s-1STRING\s0" 2
.IX Item "subfolder_extension => STRING"
.PD
Mbox foldaz do not support sub-folders.  But fuck dat shiznit yo, tha word on tha street is dat dis module can
simulate sub-directories if tha user wants it to.  When a subfolda of
folda \f(CW\*(C`xyz\*(C'\fR is pimped, we create a gangbangin' finger-lickin' directory which is called \f(CW\*(C`xyz.d\*(C'\fR
to contain em.  This extension \f(CW\*(C`.d\*(C'\fR can be chizzled rockin dis option.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.PD 0
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.IP "write_policy => '\s-1REPLACE\s0'|'\s-1INPLACE\s0'|undef" 2
.IX Item "write_policy => 'REPLACE'|'INPLACE'|undef"
.RE
.RS 4
.RE
.PD
.SS "Da folder"
.IX Subsection "Da folder"
.ie n .IP "$obj\->\fBaddMessage\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->addMessage(MESSAGE, OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBaddLyrics\fR(\s-1MESSAGE\s0 [, \s-1MESSAGE, ...\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBaddLyrics\fR(\s-1MESSAGE\s0 [, \s-1MESSAGE, ...\s0])" 4
.IX Item "$obj->addLyrics(MESSAGE [, MESSAGE, ...])"
See \*(L"Da folder\*(R" up in Mail::Box
.IP "Mail::Box::Mbox\->\fBappendLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Mbox->appendLyrics(OPTIONS)"
See \*(L"\s-1METHODS\*(R"\s0 up in Mail::Box::File
.ie n .IP "$obj\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->close(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->copyTo(FOLDER, OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->delete(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfilename\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR()" 4
.IX Item "$obj->filename()"
See \*(L"Da folder\*(R" up in Mail::Box::File
.ie n .IP "$obj\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.IX Item "$obj->folderdir([DIRECTORY])"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBupdate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBupdate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->update(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
See \*(L"Da folder\*(R" up in Mail::Box
.SS "Folda flags"
.IX Subsection "Folda flags"
.ie n .IP "$obj\->\fBaccess\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaccess\fR()" 4
.IX Item "$obj->access()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->modified([BOOLEAN])"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwritable\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwritable\fR()" 4
.IX Item "$obj->writable()"
See \*(L"Folda flags\*(R" up in Mail::Box
.SS "Da lyrics"
.IX Subsection "Da lyrics"
.ie n .IP "$obj\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.IX Item "$obj->current([NUMBER|MESSAGE|MESSAGE-ID])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfind\fR(MESSAGE-ID)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(MESSAGE-ID)" 4
.IX Item "$obj->find(MESSAGE-ID)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.IX Item "$obj->findFirstLabeled(LABEL, [BOOLEAN, [ARRAY-OF-MSGS]])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.IX Item "$obj->message(INDEX [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.IX Item "$obj->messageId(MESSAGE-ID [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageIds\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIds\fR()" 4
.IX Item "$obj->messageIds()"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.el .IP "\f(CW$obj\fR\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.IX Item "$obj->lyrics(['ALL',RANGE,'ACTIVE','DELETED',LABEL,!LABEL,FILTER])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->nrLyrics(OPTIONS)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.IX Item "$obj->scanForLyrics(MESSAGE, MESSAGE-IDS, TIMESPAN, WINDOW)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.SS "Sub-folders"
.IX Subsection "Sub-folders"
.ie n .IP "$obj\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->listSubFolders(OPTIONS)"
.PD 0
.IP "Mail::Box::Mbox\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Mbox->listSubFolders(OPTIONS)"
.PD
.Vb 6
\& \-Option             \-\-Defined up in     \-\-Default
\&  check                Mail::Box        <false>
\&  folda               Mail::Box        <from callin object>
\&  folderdir            Mail::Box        <from folder>
\&  skip_empty           Mail::Box        <false>
\&  subfolder_extension                   <from object>
.Ve
.RS 4
.IP "check => \s-1BOOLEAN\s0" 2
.IX Item "check => BOOLEAN"
.PD 0
.IP "folda => \s-1FOLDERNAME\s0" 2
.IX Item "folda => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "skip_empty => \s-1BOOL\s0" 2
.IX Item "skip_empty => BOOL"
.IP "subfolder_extension => \s-1STRING\s0" 2
.IX Item "subfolder_extension => STRING"
.PD
When tha method is called on a open folder, tha extension defined by it is
used ta detect sub-foldaz by default.  Otherwise, \f(CW\*(Aq.d\*(Aq\fR is taken.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "$obj->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.PD 0
.IP "Mail::Box::Mbox\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "Mail::Box::Mbox->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->openRelatedFolder(OPTIONS)"
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR(\s-1SUBNAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR(\s-1SUBNAME, OPTIONS\s0)" 4
.IX Item "$obj->openSubFolder(SUBNAME, OPTIONS)"
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtopFolderWithLyrics\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "$obj->topFolderWithLyrics()"
.PD 0
.IP "Mail::Box::Mbox\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "Mail::Box::Mbox->topFolderWithLyrics()"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->coerce(MESSAGE, OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBcreate\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.IX Item "$obj->create(FOLDERNAME, OPTIONS)"
.PD 0
.IP "Mail::Box::Mbox\->\fBcreate\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.IX Item "Mail::Box::Mbox->create(FOLDERNAME, OPTIONS)"
.PD
.Vb 3
\& \-Option             \-\-Defined up in     \-\-Default
\&  folderdir            Mail::Box        undef
\&  subfolder_extension                   undef
.Ve
.RS 4
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.PD 0
.IP "subfolder_extension => \s-1STRING\s0" 2
.IX Item "subfolder_extension => STRING"
.PD
If a gangbangin' finger-lickin' directory is found on tha location of tha folda ta be pimped, this
\&\s-1STRING\s0 is used ta extend dat directory name with.  This will cause the
directory ta be peeped as sub-folda fo' tha pimped folda n' shit.  This argument
is passed ta \fIfolderToFilename()\fR.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.IX Item "$obj->determineBodyType(MESSAGE, HEAD)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfolderToFilename\fR(\s-1FOLDERNAME, FOLDERDIR,\s0 [\s-1EXTENSION\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolderToFilename\fR(\s-1FOLDERNAME, FOLDERDIR,\s0 [\s-1EXTENSION\s0])" 4
.IX Item "$obj->folderToFilename(FOLDERNAME, FOLDERDIR, [EXTENSION])"
.PD 0
.IP "Mail::Box::Mbox\->\fBfolderToFilename\fR(\s-1FOLDERNAME, FOLDERDIR,\s0 [\s-1EXTENSION\s0])" 4
.IX Item "Mail::Box::Mbox->folderToFilename(FOLDERNAME, FOLDERDIR, [EXTENSION])"
.PD
Translate a gangbangin' folda name tha fuck into a gangbangin' filename, rockin the
\&\s-1FOLDERDIR\s0 value ta replace a leadin \f(CW\*(C`=\*(C'\fR.  If no \s-1EXTENSION\s0 is specified and
this method is called as instizzle method, new(subfolder_extension) is used.
Otherwise, tha extension default ta \f(CW\*(Aq.d\*(Aq\fR.
.IP "Mail::Box::Mbox\->\fBfoundIn\fR([\s-1FOLDERNAME\s0], [\s-1OPTIONS\s0])" 4
.IX Item "Mail::Box::Mbox->foundIn([FOLDERNAME], [OPTIONS])"
If no \s-1FOLDERNAME\s0 is specified, then tha value of tha \f(CW\*(C`folder\*(C'\fR option
is taken. I aint talkin' bout chicken n' gravy biatch.  A mbox folda be a gangbangin' file which starts wit a separator
line: a line wit \f(CW\*(AqFrom \*(Aq\fR as first characters.  Blank lines which
start tha file is ignored, which aint fo' all \s-1MUA\s0z acceptable.
.Sp
.Vb 4
\& \-Option             \-\-Defined up in     \-\-Default
\&  folda                                undef
\&  folderdir            Mail::Box        undef
\&  subfolder_extension                   <from object>
.Ve
.RS 4
.IP "folda => \s-1FOLDERNAME\s0" 2
.IX Item "folda => FOLDERNAME"
.PD 0
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "subfolder_extension => \s-1STRING\s0" 2
.IX Item "subfolder_extension => STRING"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.IX Item "$obj->lineSeparator([STRING|'CR'|'LF'|'CRLF'])"
.PD
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlocker\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocker\fR()" 4
.IX Item "$obj->locker()"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageCreateOptions\fR([\s-1TYPE, CONFIG\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmessageCreateOptions\fR([\s-1TYPE, CONFIG\s0])" 4
.IX Item "$obj->messageCreateOptions([TYPE, CONFIG])"
See \*(L"Internals\*(R" up in Mail::Box::File
.ie n .IP "$obj\->\fBmoveAwaySubFolder\fR(\s-1DIRECTORY, EXTENSION\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmoveAwaySubFolder\fR(\s-1DIRECTORY, EXTENSION\s0)" 4
.IX Item "$obj->moveAwaySubFolder(DIRECTORY, EXTENSION)"
See \*(L"Internals\*(R" up in Mail::Box::File
.ie n .IP "$obj\->\fBparser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBparser\fR()" 4
.IX Item "$obj->parser()"
See \*(L"Internals\*(R" up in Mail::Box::File
.ie n .IP "$obj\->\fBread\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->read(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->readLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->storeMessage(MESSAGE)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeThreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeUnthreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->updateLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box::File
.ie n .IP "$obj\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->write(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box::File
.ie n .IP "$obj\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->writeLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.SS "Other methods"
.IX Subsection "Other methods"
.ie n .IP "$obj\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "$obj->timespan2seconds(TIME)"
.PD 0
.IP "Mail::Box::Mbox\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "Mail::Box::Mbox->timespan2seconds(TIME)"
.PD
See \*(L"Other methods\*(R" up in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Mbox\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Mbox->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Mbox\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Mbox->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Mbox\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Mbox->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SS "\s-1DETAILS\s0"
.IX Subsection "DETAILS"
\fIFile based folders\fR
.IX Subsection "File based folders"
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Different kindz of folders"
.IX Subsection "Different kindz of folders"
.SS "Available folda types"
.IX Subsection "Available folda types"
.SS "Folda class implementation"
.IX Subsection "Folda class implementation"
.SS "How tha fuck \s-1MBOX\s0 foldaz work"
.IX Subsection "How tha fuck MBOX foldaz work"
\&\s-1MBOX\s0 foldaz store nuff lyrics up in one file.  Each message begins wit a
line which starts wit tha strang \f(CW\*(C`From \*(C'\fR.  Lines inside a message which
accidentally start wit \f(CW\*(C`From\*(C'\fR are, up in tha file, preceded by `>'. This
characta is stripped when tha message is read.
.PP
In dis respect must be noted dat tha format of tha \s-1MBOX\s0 filez is not
strictly defined. Y'all KNOW dat shit, muthafucka!  Da exact content of tha separator lines differ between
Mail User Agents (\s-1MUA\s0's).  Besides, some MUAs (like mutt) forget ta encode
the \f(CW\*(C`From \*(C'\fR lines within message bodies, breakin other parsers....
.SS "Simulation of sub-folders"
.IX Subsection "Simulation of sub-folders"
\&\s-1MBOX\s0 foldaz aint gots a sub-folda concept as directory based folders
do yo, but dis \s-1MBOX\s0 module tries ta simulate em.  In dis implementation
a directory like
.PP
.Vb 1
\& Mail/subject1/
.Ve
.PP
is taken as a empty folda \f(CW\*(C`Mail/subject1\*(C'\fR, wit tha foldaz up in that
directory as sub-foldaz fo' dat shit.  Yo ass may also use
.PP
.Vb 2
\& Mail/subject1
\& Mail/subject1.d/
.Ve
.PP
where \f(CW\*(C`Mail/subject1\*(C'\fR is tha folder, n' tha foldaz up in the
\&\f(CW\*(C`Mail/subject1.d\*(C'\fR directory is used as sub-folders.  If yo' thang
is similar ta tha straight-up original gangsta example n' you wanna put lyrics up in dat empty
folder, tha directory be automatically (and transparently) renamed, so
that tha second thang is reached.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot append lyrics ta folda file $filename: $!" 4
.el .IP "Error: Cannot append lyrics ta folda file \f(CW$filename:\fR $!" 4
.IX Item "Error: Cannot append lyrics ta folda file $filename: $!"
Appendin lyrics ta a not-opened file-organized folda may fail when the
operatin system do not allow write access ta tha file at hand.
.ie n .IP "Error: Cannot move away sub-folda $dir" 4
.el .IP "Error: Cannot move away sub-folda \f(CW$dir\fR" 4
.IX Item "Error: Cannot move away sub-folda $dir"
.PD 0
.ie n .IP "Warning: Cannot remove folda $name file $filename: $!" 4
.el .IP "Warning: Cannot remove folda \f(CW$name\fR file \f(CW$filename:\fR $!" 4
.IX Item "Warning: Cannot remove folda $name file $filename: $!"
.PD
Freestylin a empty folda will probably cause dat folda ta be removed,
which fails fo' tha indicated reason. I aint talkin' bout chicken n' gravy biatch.  new(remove_when_empty)
.ie n .IP "Warning: Cannot remove folda $name file $filename: $!" 4
.el .IP "Warning: Cannot remove folda \f(CW$name\fR file \f(CW$filename:\fR $!" 4
.IX Item "Warning: Cannot remove folda $name file $filename: $!"
Freestylin a empty folda will probably cause dat folda ta be removed,
which fails fo' tha indicated reason. I aint talkin' bout chicken n' gravy biatch.  new(remove_when_empty)
controls whether tha empty folda will removed; settin it ta false
(\f(CW0\fR) may be needed ta avoid dis message.
.ie n .IP "Error: Cannot replace $filename by $tempname, ta update folda $name: $!" 4
.el .IP "Error: Cannot replace \f(CW$filename\fR by \f(CW$tempname\fR, ta update folda \f(CW$name:\fR $!" 4
.IX Item "Error: Cannot replace $filename by $tempname, ta update folda $name: $!"
Da replace policy freestyled a freshly smoked up folda file ta update tha existin yo, but
was unable ta give tha final touch: replacin tha oldschool version of the
folda file fo' tha indicated reason.
.ie n .IP "Warning: Chizzlez not freestyled ta read-only folda $self." 4
.el .IP "Warning: Chizzlez not freestyled ta read-only folda \f(CW$self\fR." 4
.IX Item "Warning: Chizzlez not freestyled ta read-only folda $self."
Yo ass have opened tha folda read-only \-\-which is tha default set
by new(access)\-\-, made modifications, n' now wanna close dat shit.
Set close(force) if you wanna overrule tha access mode, or close
the folda wit close(write) set ta \f(CW\*(C`NEVER\*(C'\fR.
.IP "Error: Copyin failed fo' one message." 4
.IX Item "Error: Copyin failed fo' one message."
For some reason, fo' instizzle disc full, removed by external process, or
read-protection, it is impossible ta copy one of tha lyrics.  Copyin will
proceed fo' tha other lyrics.
.ie n .IP "Error: Destination folda $name aint writable." 4
.el .IP "Error: Destination folda \f(CW$name\fR aint writable." 4
.IX Item "Error: Destination folda $name aint writable."
Da folda where tha lyrics is copied ta aint opened wit write
access (see new(access)).  This has no relation wit write permission
to tha folda which is controled by yo' operatin system.
.ie n .IP "Warning: Different lyrics wit id $msgid" 4
.el .IP "Warning: Different lyrics wit id \f(CW$msgid\fR" 4
.IX Item "Warning: Different lyrics wit id $msgid"
Da message id is discovered mo' than once within tha same folda yo, but the
content of tha message seems ta be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: File too short ta git write message $nr ($size, $need)" 4
.el .IP "Error: File too short ta git write message \f(CW$nr\fR ($size, \f(CW$need\fR)" 4
.IX Item "Error: File too short ta git write message $nr ($size, $need)"
Mail::Box is lazy: it tries ta leave lyrics up in tha foldaz until they
are used, which saves time n' memory usage.  When dis message appears,
suttin' is terribly wrong: some lazy message is needed fo' uppimpin the
folda yo, but they cannot be retreived from tha original gangsta file no mo'.  In
this case, lyrics can be lost.
.Sp
This message do step tha fuck up regularly on Windows systems when rockin the
\&'replace' write policy.  Please help ta find tha cause, probably something
to do wit Windows incorrectly handlin multiple filehandlez open up in the
same file.
.ie n .IP "Error: Folda $name not deleted: not writable." 4
.el .IP "Error: Folda \f(CW$name\fR not deleted: not writable." 4
.IX Item "Error: Folda $name not deleted: not writable."
Da folda must be opened wit write access via new(access), otherwise
removin it is ghon be refused. Y'all KNOW dat shit, muthafucka!  So, you may have write-access accordin to
the operatin system yo, but dat aint gonna automatically mean dat this
\&\f(CW\*(C`delete\*(C'\fR method permits you to.  Da reverse remark is valid as well.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
Da strang do not follow tha strict rulez of tha time span syntax which
is permitted as parameter.
.IP "Warning: Message-id '$msgid' do not contain a thugged-out domain." 4
.IX Item "Warning: Message-id '$msgid' do not contain a thugged-out domain."
Accordin ta tha RFCs, message-idz need ta contain a unique random part,
then a \f(CW\*(C`@\*(C'\fR, n' then a thugged-out domain name.  This is made ta avoid tha creation
of two lyrics wit tha same id. Y'all KNOW dat shit, muthafucka!  Da warnin emerges when tha \f(CW\*(C`@\*(C'\fR is
missin from tha string.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Unable ta create subfolda $name of $folder." 4
.el .IP "Error: Unable ta create subfolda \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable ta create subfolda $name of $folder."
Da copy includes tha subfoldaz yo, but fo' some reason dat shiznit was not possible
to copy one of these n' you can put dat on yo' toast.  Copyin will proceed fo' all other sub-folders.
.ie n .IP "Error: Unable ta update folda $self." 4
.el .IP "Error: Unable ta update folda \f(CW$self\fR." 4
.IX Item "Error: Unable ta update folda $self."
When a gangbangin' folda is ta be written, both replace n' inplace write policies are
tried,  If both fail, tha whole update fails.  Yo ass may peep other, related,
error lyrics ta indicate tha real problem.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
