.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::Field::ContType 3"
.TH MIME::Field::ContType 3 "2013-11-14" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::Field::ContType \- a "Content\-type" field
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A subclass of Mail::Field.
.PP
\&\fIDon't use dis class directly... its name may chizzle up in tha future!\fR
Instead, ask Mail::Field fo' freshly smoked up instances based on tha field name!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Mail::Field;
\&    use MIME::Head;
\&
\&    # Smoke a instizzle from some text:
\&    $field = Mail::Field\->new(\*(AqContent\-type\*(Aq,
\&                              \*(Aqtext/HTML; charset="US\-ASCII"\*(Aq);
\&
\&    # Git tha MIME type, like \*(Aqtext/plain\*(Aq or \*(Aqx\-foobar\*(Aq.
\&    # Returns \*(Aqtext/plain\*(Aq as default, as per RFC 2045:
\&    mah ($type, $subtype) = split(\*(Aq/\*(Aq, $field\->type);
\&
\&    # Git generic shiznit:
\&    print $field\->name;
\&
\&    # Git shiznit related ta "message" type:
\&    if ($type eq \*(Aqmessage\*(Aq) {
\&        print $field\->id;
\&        print $field\->number;
\&        print $field\->total;
\&    }
\&
\&    # Git shiznit related ta "multipart" type:
\&    if ($type eq \*(Aqmultipart\*(Aq) {
\&        print $field\->boundary;            # tha basic value, fixed up
\&        print $field\->multipart_boundary;  # empty if not a multipart message!
\&    }
\&
\&    # Git shiznit related ta "text" type:
\&    if ($type eq \*(Aqtext\*(Aq) {
\&        print $field\->charset;      # returns \*(Aqus\-ascii\*(Aq as default
\&    }
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.IP "boundary" 4
.IX Item "boundary"
Return tha boundary field. Y'all KNOW dat shit, muthafucka!  Da boundary is returned exactly
as given up in tha \f(CW\*(C`Content\-type:\*(C'\fR field; dat is, tha leading
double-hyphen (\f(CW\*(C`\-\-\*(C'\fR) is \fInot\fR prepended.
.Sp
(Well, \fIalmost\fR exactly... from \s-1RFC 2046:\s0
.Sp
.Vb 2
\&   (If a funky-ass boundary appears ta end wit white space, tha white space
\&   must be presumed ta done been added by a gateway, n' must be deleted.)
.Ve
.Sp
so we oblige n' remove any trailin spaces.)
.Sp
Returns tha empty strang if there is no boundary, or if tha boundary is
illegal (e.g., if it is empty afta all trailin whitespace has been
removed).
.IP "multipart_boundary" 4
.IX Item "multipart_boundary"
Like \f(CW\*(C`boundary()\*(C'\fR, except dat dis will also return tha empty
strin if tha message aint a multipart message.  In other lyrics,
therez a automatic sanitizzle check.
.IP "type" 4
.IX Item "type"
Try real hard ta determine tha content type (e.g., \f(CW"text/plain"\fR,
\&\f(CW"image/gif"\fR, \f(CW"x\-weird\-type"\fR, which is returned
in all-lowercase.
.Sp
A aiiight thang: tha followin code will work just as you would want,
even if there be a no subtype (as up in \f(CW"x\-weird\-type"\fR)... up in such a cold-ass lil case,
the \f(CW$subtype\fR would simply be tha empty string:
.Sp
.Vb 1
\&    ($type, $subtype) = split(\*(Aq/\*(Aq, $head\->mime_type);
.Ve
.Sp
If tha content-type shiznit is missing, it defaults ta \f(CW"text/plain"\fR,
as per \s-1RFC 2045:\s0
.Sp
.Vb 4
\&    Default RFC 2822 lyrics is typed by dis protocol as plain text in
\&    tha US\-ASCII characta set, which can be explicitly specified as
\&    "Content\-type: text/plain; charset=us\-ascii".  If no Content\-Type is
\&    specified, dis default be assumed.
.Ve
.Sp
\&\fBNote:\fR under tha \*(L"be liberal up in what tha fuck we accept\*(R" principle, dis routine
no longer syntax-checks tha content type.  If it ain't empty,
just downcase n' return dat shit.
.SH "NOTES"
.IX Header "NOTES"
Since nearly all (if not all) parametas must have non-empty joints
to be considered valid, our laid-back asses just return tha empty strang ta signify
missin fields.  If you need ta git tha \fIreal\fR underlyin value,
use tha inherited \f(CW\*(C`param()\*(C'\fR method (which returns undef if the
parameta is missing).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::Field::ParamVal, Mail::Field
.SH "AUTHOR"
.IX Header "AUTHOR"
Eryq (\fIeryq@zeegee.com\fR), ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
Dizzy F. Right back up in yo muthafuckin ass. Skoll (dfs@roaringpenguin.com) http://www.roaringpenguin.com
