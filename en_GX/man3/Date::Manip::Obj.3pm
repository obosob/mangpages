.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Manip::Obj 3"
.TH Date::Manip::Obj 3 "2014-12-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Obj \- Base class fo' Date::Manip objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Da Date::Manip::Obj class is tha base class used fo' tha following
Date::Manip classes:
.PP
.Vb 5
\&   Date::Manip::Base
\&   Date::Manip::TZ
\&   Date::Manip::Date
\&   Date::Manip::Delta
\&   Date::Manip::Recur
.Ve
.PP
This module aint intended ta be called directly n' performs no
useful function by itself. Instead, use tha various derived classes
which inherit from dat shit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module gotz nuff a set of methodz used by all Date::Manip classes
listed above.
.PP
Yo ass should be familiar wit tha Date::Manip::Objects and
Date::Manip::Config documentation.
.PP
In tha method descriptions below, Date::Manip::Date objects will
usually be used as examplez yo, but (unless otherwise stated), all of the
classes listed above have tha same methods, n' work up in tha same
fashion.
.SH "METHODS FOR CREATING OBJECTS"
.IX Header "METHODS FOR CREATING OBJECTS"
In tha examplez below, any \f(CW$date\fR ($date, \f(CW$date1\fR, \f(CW$date2\fR, ...) variable
is a Date::Manip::Date object. Right back up in yo muthafuckin ass. Similarly, \f(CW$delta\fR, \f(CW$recur\fR, \f(CW$tz\fR, and
\&\f(CW$base\fR refer ta objects up in tha appropriate class.
.PP
Any \f(CW$obj\fR variable refers ta a object up in any of tha classes.
.IP "\fBnew\fR" 4
.IX Item "new"
There is two ways ta use tha freshly smoked up method. Y'all KNOW dat shit, muthafucka! They are:
.Sp
.Vb 2
\&   $obj2  = freshly smoked up CLASS ($obj1,$string,\e@opts);
\&   $obj2  = $obj1\->new($string,\e@opts)
.Ve
.Sp
In both cases, all arguments is optional.
.Sp
Here, \s-1CLASS\s0 is tha class of tha freshly smoked up object. For example:
.Sp
.Vb 2
\&   $date  = freshly smoked up Date::Manip::Date;
\&   $delta = freshly smoked up Date::Manip::Delta;
.Ve
.Sp
if \f(CW$obj1\fR be available, tha freshly smoked up object will share as much shiznit
from tha oldschool object as possible. Da class of tha freshly smoked up object may
be derived from tha oldschool object as well.
.Sp
For example, if you call either of these:
.Sp
.Vb 2
\&   $date2 = freshly smoked up Date::Manip::Date $date1;
\&   $date2 = $date1\->new();
.Ve
.Sp
the freshly smoked up date object will use tha same embedded Date::Manip::TZ object. In
the second case, tha class of tha freshly smoked up object ($date2) is Date::Manip::Date
because dat is tha class of tha original gangsta object.
.Sp
When specifyin \s-1CLASS\s0 n' includin a oldschool object, objects do not need to
be of tha same class.  For example, tha followin is all valid:
.Sp
.Vb 2
\&   $date = freshly smoked up Date::Manip::Date $delta;
\&   $date = freshly smoked up Date::Manip::Date $tz;
.Ve
.Sp
Yo ass can even do:
.Sp
.Vb 1
\&   $date = freshly smoked up Date::Manip::Date $base;
.Ve
.Sp
but dis will gotta create a cold-ass lil straight-up freshly smoked up Date::Manip::TZ object,
which means dat optimal performizzle may not be  bigged up  if a
Date::Manip::TZ object already exists.
.Sp
There is two special cases. Either of tha followin will create
a freshly smoked up Date::Manip::Base object fo' handlin multiple configurations:
.Sp
.Vb 2
\&   $base2 = freshly smoked up Date::Manip::Base $base1;
\&   $base2 = $base1\->new();
.Ve
.Sp
Either of tha followin will create a freshly smoked up Date::Manip::TZ object with
the same Date::Manip::Base object embedded up in it:
.Sp
.Vb 2
\&   $tz2   = freshly smoked up Date::Manip::TZ $tz1;
\&   $tz2   = $tz1\->new();
.Ve
.Sp
Da freshly smoked up base object will initially have tha same configuration as the
original gangsta base object yo, but changin itz configuration will not
affect tha original gangsta base object.
.Sp
If tha \e@opts argument is passed in, it aint nuthin but a list reference containing
a list suitable fo' passin ta tha config method (busted lyrics bout below). In
this case, a freshly smoked up Date::Manip::Base object (and like Date::Manip::TZ
object) is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da freshly smoked up Base object will start as identical
to tha original gangsta one (if a previously defined object was used ta create
the freshly smoked up object) wit tha additionizzle options up in \f(CW@opts\fR added.
.Sp
In other lyrics, tha followin is equivalent:
.Sp
.Vb 1
\&   $date  = freshly smoked up Date::Manip::Date $obj,\e@opts;
\&
\&   $base  = $obj\->base();
\&   $base2 = $base\->new();
\&   $date = freshly smoked up Date::Manip::Date $base2;
\&   $date\->config(@opts);
.Ve
.Sp
It should be noted dat tha options is applied ta tha \s-1NEW\s0 object,
not tha oldschool one. That only mattas up in one thang:
.Sp
.Vb 2
\&   $base2 = freshly smoked up Date::Manip::Base $base1,\e@opts;
\&   $base2 = $base1\->new(\e@opts);
.Ve
.Sp
An optionizzle strang ($string) may be passed up in only when bustin
a Date::Manip::Date, Date::Manip::Delta, or Date::Manip::Recur object.
If it is passed up in when bustin a Date::Manip::TZ or Date::Manip::Base
object, a warnin is ghon be issued yo, but execution will continue.
.Sp
If tha strang is included, it is ghon be parsed ta give a initial value
to tha object. This will only be done \s-1AFTER\s0 any options is handled,
so tha followin is equivalent:
.Sp
.Vb 1
\&   $date = freshly smoked up Date::Manip::Date $string,\e@opts;
\&
\&   $date = freshly smoked up Date::Manip::Date;
\&   $date\->config(@opts);
\&   $date\->parse($string);
.Ve
.Sp
Note dat it is generally not a phat scam ta pass up in \f(CW$string\fR since all
of tha parse methodz allow (but do not require) additionizzle arguments, and
this mobilitizzle aint supported when passin up in \f(CW$string\fR ta tha freshly smoked up method.
As a result, itz generally a funky-ass betta practice ta booty-call tha parse method
separately.
.Sp
Once a Date::Manip::Date object (or any object up in any other
Date::Manip class) is pimped, it should always be used ta create
additionizzle objects up in order ta preserve cached data fo' optimal
performizzle n' memory usage.
.Sp
Da one caveat is if yo ass is hustlin wit multiple configurations
as busted lyrics bout up in tha Date::Manip::Objects document. In dat case,
you may need ta create straight-up freshly smoked up objects ta allow multiple
Date::Manip::Base objects ta be used.
.IP "\fBnew_config\fR" 4
.IX Item "new_config"
.Vb 1
\&   $obj2 = $obj1\->new_config($string,\e@opts);
.Ve
.Sp
This creates a freshly smoked up instizzle wit a freshly smoked up Date::Manip::Base object (and possibly
a freshly smoked up Date::Manip::TZ object).
.Sp
For example,
.Sp
.Vb 1
\&   $date2 = $date1\->new_config();
.Ve
.Sp
creates a freshly smoked up Date::Manip::Date object wit a freshly smoked up Date::Manip::TZ (and
Date::Manip::Base) object. Initially, it is tha same ol' dirty configuration as
the original gangsta object.
.Sp
If tha object be a Date::Manip::Base object, tha followin is equivalent:
.Sp
.Vb 1
\&   $base2 = $base1\->new_config();
\&
\&   $base2 = $base1\->new();
.Ve
.Sp
Both \f(CW$string\fR n' \e@opts is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. They is used up in tha same way they
are used up in tha freshly smoked up method.
.IP "\fBnew_date\fR" 4
.IX Item "new_date"
.PD 0
.IP "\fBnew_delta\fR" 4
.IX Item "new_delta"
.IP "\fBnew_recur\fR" 4
.IX Item "new_recur"
.PD
These is shortcuts fo' specifyin tha class. Da followin sets of
calls is all equivalent:
.Sp
.Vb 2
\&   $date  = $obj\->new_date();
\&   $date  = freshly smoked up Date::Manip::Date($obj);
\&
\&   $delta = $obj\->new_delta();
\&   $delta = freshly smoked up Date::Manip::Date($obj);
.Ve
.Sp
These methodz all allow optionizzle ($string,\e@opts) arguments.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.IP "\fBbase\fR" 4
.IX Item "base"
.PD 0
.IP "\fBtz\fR" 4
.IX Item "tz"
.PD
.Vb 1
\&   $base = $obj\->base();
.Ve
.Sp
This returns tha Date::Manip::Base object associated wit the
given object.
.Sp
If \f(CW$obj\fR be a Date::Manip::Base object, not a god damn thang is returned (i.e. it don't
create a freshly smoked up copy of tha object).
.Sp
.Vb 1
\&   $tz = $obj\->tz();
.Ve
.Sp
This returns tha Date::Manip::TZ object associated wit the
given object. If \f(CW$obj\fR be a Date::Manip::TZ or Date::Manip::Base object,
nothang is returned.
.IP "\fBconfig\fR" 4
.IX Item "config"
.Vb 1
\&   $obj\->config($var1,$val1,$var2,$val2,...);
.Ve
.Sp
This will set tha value of any configuration variables. Please refer ta the
Date::Manip::Config manual fo' a list of all configuration variablez n' their
description.
.IP "\fBget_config\fR" 4
.IX Item "get_config"
.Vb 3
\&   @var = $obj\->get_config();
\&   $val = $obj\->get_config($var1);
\&   @val = $obj\->get_config($var1,$var2,...);
.Ve
.Sp
This queries tha current config joints, n' you can put dat on yo' toast.  With no argument, it will return
the list of config variablez (all lowercase).
.Sp
With one or mo' arguments, it returns tha current joints fo' tha config
variablez passed up in (case insensitive).
.IP "\fBerr\fR" 4
.IX Item "err"
.Vb 1
\&   $err = $obj\->err();
.Ve
.Sp
This will return tha full error message if tha previous operation failed
for any reason.
.Sp
.Vb 1
\&   $obj\->err(1);
.Ve
.Sp
will clear tha error code.
.IP "\fBis_date\fR" 4
.IX Item "is_date"
.PD 0
.IP "\fBis_delta\fR" 4
.IX Item "is_delta"
.IP "\fBis_recur\fR" 4
.IX Item "is_recur"
.PD
.Vb 1
\&   $flag = $obj\->is_date();
.Ve
.Sp
Returns 0 or 1, dependin on tha object. For example, a Date::Manip::Date
object returns 1 wit tha is_date method, n' 0 fo' tha other two.
.IP "\fBversion\fR" 4
.IX Item "version"
.Vb 1
\&   $vers = $obj\->version($flag);
.Ve
.Sp
This returns tha version of Date::Manip.
.Sp
If \f(CW$flag\fR is passed in, n' \f(CW$obj\fR aint a Date::Manip::Base object, the
version n' timezone shiznit is ghon be passed back.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
None known.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
Please refer ta tha Date::Manip::Problems documentation for
information on submittin bug reports or thangs ta tha lyricist.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
