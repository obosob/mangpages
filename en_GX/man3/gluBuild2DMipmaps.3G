'\" t
.\"     Title: gluBuild2DMipmaps
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLUBUILD2DMIPMAPS" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gluBuild2DMipmaps \- buildz a two\-dimensionizzle mipmap
.SH "C SPECIFICATION"
.HP \w'GLint\ gluBuild2DMipmaps('u
.BI "GLint gluBuild2DMipmaps(GLenum\ " "target" ", GLint\ " "internalFormat" ", GLsizei\ " "width" ", GLsizei\ " "height" ", GLenum\ " "format" ", GLenum\ " "type" ", const\ void\ *\ " "data" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha target texture\&. Must be
\fBGLU_TEXTURE_2D\fR\&.
.RE
.PP
\fIinternalFormat\fR
.RS 4
Requests tha internal storage format of tha texture image\&. Da most current version of tha SGI implementation of GLU do not check dis value fo' validitizzle before passin it on ta tha underlyin OpenGL implementation\& fo' realz. A value dat aint accepted by tha OpenGL implementation will lead ta a OpenGL error\&. Da benefit of not checkin dis value all up in tha GLU level is dat OpenGL extensions can add freshly smoked up internal texture formats without requirin a revision of tha GLU implementation\&. Older implementationz of GLU check dis value n' raise a GLU error if it aint 1, 2, 3, or 4 or one of tha followin symbolic constants:
\fBGLU_ALPHA\fR,
\fBGLU_ALPHA4\fR,
\fBGLU_ALPHA8\fR,
\fBGLU_ALPHA12\fR,
\fBGLU_ALPHA16\fR,
\fBGLU_LUMINANCE\fR,
\fBGLU_LUMINANCE4\fR,
\fBGLU_LUMINANCE8\fR,
\fBGLU_LUMINANCE12\fR,
\fBGLU_LUMINANCE16\fR,
\fBGLU_LUMINANCE_ALPHA\fR,
\fBGLU_LUMINANCE4_ALPHA4\fR,
\fBGLU_LUMINANCE6_ALPHA2\fR,
\fBGLU_LUMINANCE8_ALPHA8\fR,
\fBGLU_LUMINANCE12_ALPHA4\fR,
\fBGLU_LUMINANCE12_ALPHA12\fR,
\fBGLU_LUMINANCE16_ALPHA16\fR,
\fBGLU_INTENSITY\fR,
\fBGLU_INTENSITY4\fR,
\fBGLU_INTENSITY8\fR,
\fBGLU_INTENSITY12\fR,
\fBGLU_INTENSITY16\fR,
\fBGLU_RGB\fR,
\fBGLU_R3_G3_B2\fR,
\fBGLU_RGB4\fR,
\fBGLU_RGB5\fR,
\fBGLU_RGB8\fR,
\fBGLU_RGB10\fR,
\fBGLU_RGB12\fR,
\fBGLU_RGB16\fR,
\fBGLU_RGBA\fR,
\fBGLU_RGBA2\fR,
\fBGLU_RGBA4\fR,
\fBGLU_RGB5_A1\fR,
\fBGLU_RGBA8\fR,
\fBGLU_RGB10_A2\fR,
\fBGLU_RGBA12\fR, or
\fBGLU_RGBA16\fR\&.
.RE
.PP
\fIwidth\fR, \fIheight\fR
.RS 4
Specifies up in pixels tha width n' height, respectively, of tha texture image\&.
.RE
.PP
\fIformat\fR
.RS 4
Specifies tha format of tha pixel data\&. Must be one of
\fBGLU_COLOR_INDEX\fR,
\fBGLU_DEPTH_COMPONENT\fR,
\fBGLU_RED\fR,
\fBGLU_GREEN\fR,
\fBGLU_BLUE\fR,
\fBGLU_ALPHA\fR,
\fBGLU_RGB\fR,
\fBGLU_RGBA\fR,
\fBGLU_BGR\fR,
\fBGLU_BGRA\fR,
\fBGLU_LUMINANCE\fR, or
\fBGLU_LUMINANCE_ALPHA\fR\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies tha data type for
\fIdata\fR\&. Must be one of
\fBGLU_UNSIGNED_BYTE\fR,
\fBGLU_BYTE\fR,
\fBGLU_BITMAP\fR,
\fBGLU_UNSIGNED_SHORT\fR,
\fBGLU_SHORT\fR,
\fBGLU_UNSIGNED_INT\fR,
\fBGLU_INT\fR,
\fBGLU_FLOAT\fR,
\fBGLU_UNSIGNED_BYTE_3_3_2\fR,
\fBGLU_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGLU_UNSIGNED_SHORT_5_6_5\fR,
\fBGLU_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGLU_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGLU_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGLU_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGLU_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGLU_UNSIGNED_INT_8_8_8_8\fR,
\fBGLU_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGLU_UNSIGNED_INT_10_10_10_2\fR, or
\fBGLU_UNSIGNED_INT_2_10_10_10_REV\fR\&.
.RE
.PP
\fIdata\fR
.RS 4
Specifies a pointa ta tha image data up in memory\&.
.RE
.SH "DESCRIPTION"
.PP
\fBgluBuild2DMipmaps\fR
buildz a seriez of prefiltered two\-dimensionizzle texture mapz of decreasin resolutions called a mipmap\&. This is used fo' tha antialiasin of texture\-mapped primitives\&.
.PP
A return value of zero indicates success, otherwise a GLU error code is returned (see
\fBgluErrorString\fR())\&.
.PP
Initially, the
\fIwidth\fR
and
\fIheight\fR
of
\fIdata\fR
are checked ta peep if they is a juice of 2\&. If not, a cold-ass lil copy of
\fIdata\fR
(not
\fIdata\fR), is scaled up or down ta tha nearest juice of 2\&. This copy is ghon be used fo' subsequent mipmappin operations busted lyrics bout below\&. (If
\fIwidth\fR
or
\fIheight\fR
is exactly between powerz of 2, then tha copy of
\fIdata\fR
will scale upwards\&.) For example, if
\fIwidth\fR
is 57 and
\fIheight\fR
is 23, then a cold-ass lil copy of
\fIdata\fR
will scale up ta 64 in
\fIwidth\fR
and down ta 16 up in depth, before mipmappin takes place\&.
.PP
Then, proxy textures (see
\fBglTexImage2D\fR()) is used ta determine if tha implementation can fit tha axed texture\&. If not, both dimensions is continually halved until it fits\&. (If tha OpenGL version is \e(<= 1\&.0, both maximum texture dimensions is clamped ta tha value returned by
\fBglGetIntegerv\fR()
with tha argument
\fBGLU_MAX_TEXTURE_SIZE\fR\&.)
.PP
Next, a seriez of mipmap levels is built by decimatin a cold-ass lil copy of
\fIdata\fR
in half along both dimensions until size
1 \(mu 1
is reached\& fo' realz. At each level, each texel up in tha halved mipmap level be a average of tha correspondin four texels up in tha larger mipmap level\&. (In tha case of rectangular images, tha decimation will ultimately reach an
N \(mu 1
or
1 \(mu N
configuration\& yo. Here, two texels is averaged instead\&.)
.PP
\fBglTexImage2D\fR()
is called ta load each of these mipmap levels\&. Level 0 be a cold-ass lil copy of
\fIdata\fR\&. Da highest level is
log 2 ⁡ max ⁡ width height\&. For example, if
\fIwidth\fR
is 64 and
\fIheight\fR
is 16 n' tha implementation can store a texture of dis size, tha followin mipmap levels is built:
64 \(mu 16,
32 \(mu 8,
16 \(mu 4,
8 \(mu 2,
4 \(mu 1,
2 \(mu 1, and
1 \(mu 1
These correspond ta levels 0 all up in 6, respectively\&.
.PP
See the
\fBglTexImage1D\fR()
reference page fo' a thugged-out description of tha aaight joints for
\fIformat\fR
parameter\&. Right back up in yo muthafuckin ass. See the
\fBglDrawPixels\fR()
reference page fo' a thugged-out description of tha aaight joints for
\fItype\fR
parameter\&.
.SH "NOTES"
.PP
Note dat there is no direct way of queryin tha maximum level\&. This can be derived indirectly via
\fBglGetTexLevelParameter\fR()\&. First, query fo' tha width n' height straight-up used at level 0\&. (Da width n' height may not be equal to
\fIwidth\fR
and
\fIheight\fR
respectively since proxy textures might have scaled dem ta fit tha implementation\&.) Then tha maximum level can be derived from tha formula
log 2 ⁡ max ⁡ width height\&.
.PP
Formats
\fBGLU_BGR\fR, and
\fBGLU_BGRA\fR, n' types
\fBGLU_UNSIGNED_BYTE_3_3_2\fR,
\fBGLU_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGLU_UNSIGNED_SHORT_5_6_5\fR,
\fBGLU_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGLU_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGLU_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGLU_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGLU_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGLU_UNSIGNED_INT_8_8_8_8\fR,
\fBGLU_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGLU_UNSIGNED_INT_10_10_10_2\fR, and
\fBGLU_UNSIGNED_INT_2_10_10_10_REV\fR
are only available if tha GL version is 1\&.2 or pimped outa n' if tha GLU version is 1\&.3 or pimped outer\&.
.SH "ERRORS"
.PP
\fBGLU_INVALID_VALUE\fR
is returned if
\fIwidth\fR
or
\fIheight\fR
is < 1\&.
.PP
\fBGLU_INVALID_ENUM\fR
is returned if
\fIinternalFormat\fR,
\fIformat\fR, or
\fItype\fR
is not legal\&.
.PP
\fBGLU_INVALID_OPERATION\fR
is returned if
\fItype\fR
is
\fBGLU_UNSIGNED_BYTE_3_3_2\fR
or
\fBGLU_UNSIGNED_BYTE_2_3_3_REV\fR
and
\fIformat\fR
is not
\fBGLU_RGB\fR\&.
.PP
\fBGLU_INVALID_OPERATION\fR
is returned if
\fItype\fR
is
\fBGLU_UNSIGNED_SHORT_5_6_5\fR
or
\fBGLU_UNSIGNED_SHORT_5_6_5_REV\fR
and
\fIformat\fR
is not
\fBGLU_RGB\fR\&.
.PP
\fBGLU_INVALID_OPERATION\fR
is returned if
\fItype\fR
is
\fBGLU_UNSIGNED_SHORT_4_4_4_4\fR
or
\fBGLU_UNSIGNED_SHORT_4_4_4_4_REV\fR
and
\fIformat\fR
is neither
\fBGLU_RGBA\fR
nor
\fBGLU_BGRA\fR\&.
.PP
\fBGLU_INVALID_OPERATION\fR
is returned if
\fItype\fR
is
\fBGLU_UNSIGNED_SHORT_5_5_5_1\fR
or
\fBGLU_UNSIGNED_SHORT_1_5_5_5_REV\fR
and
\fIformat\fR
is neither
\fBGLU_RGBA\fR
nor
\fBGLU_BGRA\fR\&.
.PP
\fBGLU_INVALID_OPERATION\fR
is returned if
\fItype\fR
is
\fBGLU_UNSIGNED_INT_8_8_8_8\fR
or
\fBGLU_UNSIGNED_INT_8_8_8_8_REV\fR
and
\fIformat\fR
is neither
\fBGLU_RGBA\fR
nor
\fBGLU_BGRA\fR\&.
.PP
\fBGLU_INVALID_OPERATION\fR
is returned if
\fItype\fR
is
\fBGLU_UNSIGNED_INT_10_10_10_2\fR
or
\fBGLU_UNSIGNED_INT_2_10_10_10_REV\fR
and
\fIformat\fR
is neither
\fBGLU_RGBA\fR
nor
\fBGLU_BGRA\fR\&.
.SH "SEE ALSO"
.PP
\fBgluBuild1DMipmapLevels\fR(),
\fBgluBuild1DMipmaps\fR(),
\fBgluBuild2DMipmapLevels\fR(),
\fBgluBuild3DMipmapLevels\fR(),
\fBgluBuild3DMipmaps\fR(),
\fBgluErrorString\fR(),
\fBglDrawPixels\fR(),
\fBglGetTexImage\fR(),
\fBglGetTexLevelParameter\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
