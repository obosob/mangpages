'\" t
.\"     Title: XTest
.\"    Author: Kieron Drake
.\" Generator: DocBook XSL Stylesheets vsnapshot_9276 <http://docbook.sf.net/>
.\"      Date: <pubdate>6 June 2007</pubdate>
.\"    Manual: XTST FUNCTIONS
.\"    Source: "libXtst 1.2.2" "X Version 11"
.\"  Language: Gangsta
.\"
.TH "XTEST" "3" "<pubdate>6 June 2007</pubdate>" ""libXtst 1.2.2" "X Version 11"" "XTST FUNCTIONS"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XTestQueryExtension, XTestCompareCursorWithWindow, XTestCompareCurrentCursorWithWindow, XTestFakeKeyEvent, XTestFakeButtonEvent, XTestFakeMotionEvent, XTestFakeRelativeMotionEvent, XTestGrabControl, XTestSetGContextOfGC, XTestSetVisualIDOfVisual, XTestDiscard \- XTest extension functions
.SH "SYNOPSIS"
.sp
.ft B
.nf
cc [ flag \&.\&.\&. ] file \&.\&.\&. \-lXtst  [ library \&.\&.\&. ]
.fi
.ft
.sp
.ft B
.nf
#include <X11/extensions/XTest\&.h>
.fi
.ft
.HP \w'Bool\ XTestQueryExtension('u
.BI "Bool XTestQueryExtension(" "display" ", " "event_base_return" ", " "error_base_return" ", " "major_version_return" ", " "minor_version_return" ");"
.sp
.ft B
.nf
 Display *display;
 int *event_base_return;
 int *error_base_return;
 int *major_version_return;
 int *minor_version_return;
.fi
.ft
.HP \w'Bool\ XTestCompareCursorWithWindow('u
.BI "Bool XTestCompareCursorWithWindow(" "display" ", " "window" ", " "cursor" ");"
.sp
.ft B
.nf
 Display *display;
 Window window;
 Cursor cursor;
.fi
.ft
.HP \w'Bool\ XTestCompareCurrentCursorWithWindow('u
.BI "Bool XTestCompareCurrentCursorWithWindow(" "display" ", " "window" ");"
.sp
.ft B
.nf
 Display *display;
 Window window;
.fi
.ft
.HP \w'int\ XTestFakeKeyEvent('u
.BI "int XTestFakeKeyEvent(" "display" ", " "keycode" ", " "is_press" ", " "delay" ");"
.sp
.ft B
.nf
 Display *display;
 unsigned int keycode;
 Bool is_press;
 unsigned long delay;
.fi
.ft
.HP \w'int\ XTestFakeButtonEvent('u
.BI "int XTestFakeButtonEvent(" "display" ", " "button" ", " "is_press" ", " "delay" ");"
.sp
.ft B
.nf
 Display *display;
 unsigned int button;
 Bool is_press;
 unsigned long delay;
.fi
.ft
.HP \w'int\ XTestFakeMotionEvent('u
.BI "int XTestFakeMotionEvent(" "display" ", " "screen_number" ", " "x" ", " "y" ", " "delay" ");"
.sp
.ft B
.nf
 Display *display;
 int screen_number;
 int x, y;
 unsigned long delay;
.fi
.ft
.HP \w'int\ XTestFakeRelativeMotionEvent('u
.BI "int XTestFakeRelativeMotionEvent(" "display" ", " "screen_number" ", " "x" ", " "y" ", " "delay" ");"
.sp
.ft B
.nf
 Display *display;
 int screen_number;
 int x, y;
 unsigned long delay;
.fi
.ft
.HP \w'int\ XTestGrabControl('u
.BI "int XTestGrabControl(" "display" ", " "impervious" ");"
.sp
.ft B
.nf
 Display *display;
 Bool impervious;
.fi
.ft
.HP \w'void\ XTestSetGContextOfGC('u
.BI "void XTestSetGContextOfGC(" "gc" ", " "gid" ");"
.sp
.ft B
.nf
 GC gc;
 GContext gid;
.fi
.ft
.HP \w'void\ XTestSetVisualIDOfVisual('u
.BI "void XTestSetVisualIDOfVisual(" "visual" ", " "visualid" ");"
.sp
.ft B
.nf
 Visual *visual;
 VisualID visualid;
.fi
.ft
.HP \w'Status\ XTestDiscard('u
.BI "Status XTestDiscard(" "display" ");"
.sp
.ft B
.nf
 Display *display;
.fi
.ft
.SH "DESCRIPTION"
.PP
This extension be a minimal set of client n' server extensions required ta straight-up test tha X11 server wit no user intervention\&. This extension aint intended ta support general journalin n' playback of user actions\&.
.PP
Da functions provided by dis extension fall tha fuck into two groups:
.PP
\fBClient Operations\fR
.RS 4
These routines manipulate otherwise hidden client\-side behavior\&. Da actual implementation will depend on tha detailz of tha actual language bindin n' what tha fuck degree of request buffering, GContext caching, n' so on, is provided\&. In tha C binding, routines is provided ta access tha internalz of two opaque data structures \(em
GCs and
Visuals \(em n' ta discard any requests pendin within tha output buffer of a cold-ass lil connection\&. Da exact details can be sposed ta fuckin differ fo' other language bindings\&.
.RE
.PP
\fBServer Requests\fR
.RS 4
Da first of these requests is similar ta dat provided up in most extensions: it allows a cold-ass lil client ta specify a major n' minor version number ta tha server n' fo' tha server ta respond wit major n' minor versionz of its own\&. Da remainin two requests allow tha following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Access ta a otherwise
\fIwrite\-only\fR
server resource: tha cursor associated wit a given window
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Perhaps most blinginly, limited synthesiz of input thang events, almost as if a cold-ass lil cooperatizzle user had moved tha pointin thang or pressed a key or button\&.
.RE
.RE
.PP
All XTEST extension functions n' procedures, n' all manifest constants n' macros, will start wit tha string
\fIXTest\fR\& fo' realz. All operations is classified as server/client (Server) or client\-only (Client)\&.
.PP
\fBXTestQueryExtension\fR
returns
True
if tha specified display supports tha XTEST extension, else
False\&. If tha extension is supported, *event_base would be set ta tha event number fo' tha straight-up original gangsta event fo' dis extension n' *error_base would be set ta tha error number fo' tha straight-up original gangsta error fo' dis extension\& fo' realz. As no errors or events is defined fo' dis version of tha extension, tha joints returned here is not defined (nor useful)\&. If tha extension is supported, *major_version n' *minor_version is set ta tha major n' minor version numberz of tha extension supported by tha display\&. Otherwise, none of tha arguments is set\&.
.PP
If tha extension is supported,
\fBXTestCompareCursorWithWindow\fR
performs a cold-ass lil comparison of tha cursor whose ID is specified by cursor (which may be
\fBNone\fR) wit tha cursor of tha window specified by window returning
True
if they is tha same and
False
otherwise\&. If tha extension aint supported, then tha request is ignored n' zero is returned\&.
.PP
If tha extension is supported,
\fBXTestCompareCurrentCursorWithWindow\fR
performs a cold-ass lil comparison of tha current cursor wit tha cursor of tha specified window returning
True
if they is tha same and
False
otherwise\&. If tha extension aint supported, then tha request is ignored n' zero is returned\&.
.PP
If tha extension is supported,
\fBXTestFakeKeyEvent\fR
requests tha server ta simulate either a
\fBKeyPress\fR
(if is_press is
True) or a
\fBKeyRelease\fR
(if is_press is
False) of tha key wit tha specified keycode; otherwise, tha request is ignored\&.
.PP
If tha extension is supported, tha simulated event aint gonna be processed until delay millisecondz afta tha request is received (if delay is
\fBCurrentTime\fR, then dis is interpreted as no delay at all)\&. No other requests from dis client is ghon be processed until dis delay, if any, has expired n' subsequent processin of tha simulated event has been completed\&.
.PP
If tha extension is supported,
\fBXTestFakeButtonEvent\fR
requests tha server ta simulate either a
\fBButtonPress\fR
(if is_press is
True) or a
\fBButtonRelease\fR
(if is_press is
False) of tha logical button numbered by tha specified button; otherwise, tha request is ignored\&.
.PP
If tha extension is supported, tha simulated event aint gonna be processed until delay millisecondz afta tha request is received (if delay is
\fBCurrentTime\fR, then dis is interpreted as no delay at all)\&. No other requests from dis client is ghon be processed until dis delay, if any, has expired n' subsequent processin of tha simulated event has been completed\&.
.PP
If tha extension is supported,
\fBXTestFakeMotionEvent\fR
requests tha server ta simulate a movement of tha pointa ta tha specified posizzle (x, y) on tha root window of screen_number; otherwise, tha request is ignored\&. If screen_number is \-1, tha current screen (that tha pointa is on) is used\&.
.PP
If tha extension is supported, tha simulated event aint gonna be processed until delay millisecondz afta tha request is received (if delay is
\fBCurrentTime\fR, then dis is interpreted as no delay at all)\&. No other requests from dis client is ghon be processed until dis delay, if any, has expired n' subsequent processin of tha simulated event has been completed\&.
.PP
If tha extension is supported,
\fBXTestFakeRelativeMotionEvent\fR
requests tha server ta simulate a movement of tha pointa by tha specified offsets (x, y) relatizzle ta tha current pointa posizzle on screen_number; otherwise, tha request is ignored\&. If screen_number is \-1, tha current screen (that tha pointa is on) is used\&.
.PP
If tha extension is supported, tha simulated event aint gonna be processed until delay millisecondz afta tha request is received (if delay is
\fBCurrentTime\fR, then dis is interpreted as no delay at all)\&. No other requests from dis client is ghon be processed until dis delay, if any, has expired n' subsequent processin of tha simulated event has been completed\&.
.PP
If impervious is
True, then tha executin client becomes impervious ta server grabs\&. If impervious is
False, then tha executin client returns ta tha aiiight state of bein susceptible ta server grabs\&.
.PP
\fBXTestSetGContextOfGC\fR
sets tha GContext within tha opaque datatype referenced by gc ta be dat specified by gid\&.
.PP
\fBXTestSetVisualIDOfVisual\fR
sets tha VisualID within tha opaque datatype referenced by visual ta be dat specified by visualid\&.
.PP
\fBXTestDiscard\fR
discardz any requests within tha output buffer fo' tha specified display\&. Well shiiiit, it returns
True
if any requests was discarded; otherwise, it returns
False\&.
.SH "RETURN VALUES"
.PP
All routines dat have return type Status will return nonzero fo' success n' zero fo' failure\&. Even if tha XTEST extension is supported, tha server may withdraw such facilitizzles arbitrarily; up in which case they will subsequently return zero\&.
.SH "AUTHOR"
.PP
\fBKieron Drake\fR
.br
UniSoft Ltd\&.
.RS 4
Author.
.RE
