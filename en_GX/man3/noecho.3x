.\"***************************************************************************
.\" Copyright (c) 1998-2010,2012 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_inopts.3x,v 1.17 2012/04/28 19:09:15 tom Exp $
.TH curs_inopts 3X ""
.na
.hy 0
.SH NAME
\fBcbreak\fR,
\fBnocbreak\fR,
\fBecho\fR,
\fBnoecho\fR,
\fBhalfdelay\fR,
\fBintrflush\fR,
\fBkeypad\fR,
\fBmeta\fR,
\fBnodelay\fR,
\fBnotimeout\fR,
\fBraw\fR,
\fBnoraw\fR,
\fBnoqiflush\fR,
\fBqiflush\fR,
\fBtimeout\fR,
\fBwtimeout\fR,
\fBtypeahead\fR \- \fBcurses\fR input options
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.PP
\fBint cbreak(void);\fR
.br
\fBint nocbreak(void);\fR
.br
\fBint echo(void);\fR
.br
\fBint noecho(void);\fR
.br
\fBint halfdelay(int tenths);\fR
.br
\fBint intrflush(WINDOW *win, bool bf);\fR
.br
\fBint keypad(WINDOW *win, bool bf);\fR
.br
\fBint meta(WINDOW *win, bool bf);\fR
.br
\fBint nodelay(WINDOW *win, bool bf);\fR
.br
\fBint raw(void);\fR
.br
\fBint noraw(void);\fR
.br
\fBvoid noqiflush(void);\fR
.br
\fBvoid qiflush(void);\fR
.br
\fBint notimeout(WINDOW *win, bool bf);\fR
.br
\fBvoid timeout(int delay);\fR
.br
\fBvoid wtimeout(WINDOW *win, int delay);\fR
.br
\fBint typeahead(int fd);\fR
.br
.SH DESCRIPTION
Normally, tha tty driver buffers typed charactas until a newline or carriage
return is typed. Y'all KNOW dat shit, muthafucka!  Da \fBcbreak\fR routine disablez line bufferin and
erase/kill character-processin (interrupt n' flow control charactas are
unaffected), makin charactas typed by tha user immediately available ta the
program.  Da \fBnocbreak\fR routine returns tha terminal ta aiiight (cooked)
mode.
.PP
Initially tha terminal may or may not be up in \fBcbreak\fR mode, as tha mode is
inherited; therefore, a program should call \fBcbreak\fR or \fBnocbreak\fR
explicitly.  Most interactizzle programs rockin \fBcurses\fR set tha \fBcbreak\fR
mode.  Note dat \fBcbreak\fR overrides \fBraw\fR.
[See \fBcurs_getch\fR(3X) fo' a
rap of how tha fuck these routines interact wit \fBecho\fR n' \fBnoecho\fR.]
.PP
Da \fBecho\fR n' \fBnoecho\fR routines control whether charactas typed by
the user is echoed by \fBgetch\fR as they is typed. Y'all KNOW dat shit, muthafucka!  Echoin by tha tty
driver be always disabled yo, but initially \fBgetch\fR is up in echo mode, so
charactas typed is echoed. Y'all KNOW dat shit, muthafucka!  Authorz of most interactizzle programs prefer ta do
their own echoin up in a cold-ass lil controlled area of tha screen, or not ta echo at all, so
they disable echoin by callin \fBnoecho\fR.
[See \fBcurs_getch\fR(3X) fo' a
rap of how tha fuck these routines interact wit \fBcbreak\fR and
\fBnocbreak\fR.]
.PP
Da \fBhalfdelay\fR routine is used fo' half-delay mode, which is similar to
\fBcbreak\fR mode up in dat charactas typed by tha user is immediately
available ta tha program.  But fuck dat shiznit yo, tha word on tha street is dat afta blockin fo' \fItenths\fR tenths of
seconds, ERR is returned if not a god damn thang has been typed. Y'all KNOW dat shit, muthafucka!  Da value of \fBtenths\fR
must be a number between 1 n' 255.  Use \fBnocbreak\fR ta leave half-delay
mode.
.PP
If tha \fBintrflush\fR option is enabled, (\fIbf\fR is \fBTRUE\fR), when an
interrupt key is pressed on tha keyboard (interrupt, break, quit) all output in
the tty driver queue is ghon be flushed, givin tha effect of fasta response to
the interrupt yo, but causin \fBcurses\fR ta have tha wack scam of what tha fuck is on
the screen. I aint talkin' bout chicken n' gravy biatch.  Disablin (\fIbf\fR is \fBFALSE\fR), tha option prevents the
flush.  Da default fo' tha option is inherited from tha tty driver settings.
Da window argument is ignored.
.PP
Da \fBkeypad\fR option enablez tha keypad of tha userz terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If
enabled (\fIbf\fR is \fBTRUE\fR), tha user can press a gangbangin' function key
(like fuckin a arrow key) n' \fBwgetch\fR returns a single value
representin tha function key, as up in \fBKEY_LEFT\fR.  If disabled
(\fIbf\fR is \fBFALSE\fR), \fBcurses\fR do not treat function keys
specially n' tha program has ta interpret tha escape sequences
itself.  If tha keypad up in tha terminal can be turned on (made to
transmit) n' off (made ta work locally), turnin on dis option
causes tha terminal keypad ta be turned on when \fBwgetch\fR is
called. Y'all KNOW dat shit, muthafucka!  Da default value fo' keypad is false.
.PP
Initially, whether tha terminal returns 7 or 8 dope bits on
input dependz on tha control mode of tha tty driver [see termio(7)].
To force 8 bits ta be returned, invoke \fBmeta\fR(\fIwin\fR,
\fBTRUE\fR); dis is equivalent, under POSIX, ta settin tha CS8 flag
on tha terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  To force 7 bits ta be returned, invoke
\fBmeta\fR(\fIwin\fR, \fBFALSE\fR); dis is equivalent, under POSIX,
to settin tha CS7 flag on tha terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da window argument,
\fIwin\fR, be always ignored. Y'all KNOW dat shit, muthafucka!  If tha terminfo capabilitizzles \fBsmm\fR
(meta_on) n' \fBrmm\fR (meta_off) is defined fo' tha terminal,
\fBsmm\fR is busted ta tha terminal when \fBmeta\fR(\fIwin\fR,
\fBTRUE\fR) is called n' \fBrmm\fR is busted when \fBmeta\fR(\fIwin\fR,
\fBFALSE\fR) is called.
.PP
Da \fBnodelay\fR option causes \fBgetch\fR ta be a non-blockin call.
If no input is ready, \fBgetch\fR returns \fBERR\fR.  If disabled
(\fIbf\fR is \fBFALSE\fR), \fBgetch\fR waits until a key is pressed.
.PP
While interpretin a input escape sequence, \fBwgetch\fR sets a timer
while waitin fo' tha next character n' shit.  If \fBnotimeout(\fR\fIwin\fR,
\fBTRUE\fR) is called, then \fBwgetch\fR do not set a timer n' shit.  The
purpose of tha timeout is ta differentiate between sequences received
from a gangbangin' function key n' dem typed by a user.
.PP
Da \fBraw\fR n' \fBnoraw\fR routines place tha terminal tha fuck into or outta raw
mode.  Raw mode is similar ta \fBcbreak\fR mode, up in dat charactas typed are
immediately passed all up in ta tha user program.  Da differences is dat in
raw mode, tha interrupt, quit, suspend, n' flow control charactas is all
passed all up in uninterpreted, instead of generatin a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da behavior of
the BREAK key dependz on other bits up in tha tty driver dat is not set by
\fBcurses\fR.
.PP
When tha \fBnoqiflush\fR routine is used, aiiight flush of input and
output queues associated wit tha \fBINTR\fR, \fBQUIT\fR and
\fBSUSP\fR charactas aint gonna be done [see termio(7)].  When
\fBqiflush\fR is called, tha queues is ghon be flushed when these control
charactas is read. Y'all KNOW dat shit, muthafucka!  Yo ass may wanna call \fBnoqiflush()\fR up in a signal
handlez if you want output ta continue as though tha interrupt
had not occurred, afta tha handlez exits.
.PP
Da \fBtimeout\fR n' \fBwtimeout\fR routines set blockin or
non-blockin read fo' a given window.  If \fIdelay\fR is negative,
blockin read is used (i.e., waits indefinitely for
input).  If \fIdelay\fR is zero, then non-blockin read is used
(i.e., read returns \fBERR\fR if no input is waiting).  If
\fIdelay\fR is positive, then read blocks fo' \fIdelay\fR
milliseconds, n' returns \fBERR\fR if there is still no input.
Hence, these routines provide tha same functionalitizzle as \fBnodelay\fR,
plus tha additionizzle capabilitizzle of bein able ta block fo' only
\fIdelay\fR millisecondz (where \fIdelay\fR is positive).
.PP
Da \fBcurses\fR library do ``line-breakout optimization'' by lookin for
typeahead periodically while uppimpin tha screen. I aint talkin' bout chicken n' gravy biatch.  If input is found,
and it is comin from a tty, tha current update is postponed until
\fBrefresh\fR or \fBdoupdate\fR is called again. I aint talkin' bout chicken n' gravy biatch.  This allows faster
response ta commandz typed up in advance.  Normally, tha input FILE
pointa passed ta \fBnewterm\fR, or \fBstdin\fR up in tha case that
\fBinitscr\fR was used, is ghon be used ta do dis typeahead checking.
Da \fBtypeahead\fR routine specifies dat tha file descriptor
\fIfd\fR is ta be used ta check fo' typeahead instead. Y'all KNOW dat shit, muthafucka!  If \fIfd\fR is
\-1, then no typeahead checkin is done.
.SH RETURN VALUE
All routines dat return a integer return \fBERR\fR upon failure n' OK (SVr4
specifies only "an integer value other than \fBERR\fR") upon successful
completion, unless otherwise noted up in tha precedin routine descriptions.
.PP
X/Open do not define any error conditions.
In dis implementation,
functions wit a window parameta will return a error if it is null.
Any function will also return a error if tha terminal was not initialized.
Also,
.RS
.TP 5
\fBhalfdelay\fP
returns a error
if its parameta is outside tha range 1..255.
.RE
.SH PORTABILITY
These functions is busted lyrics bout up in tha XSI Curses standard, Issue 4.
.PP
Da ncurses library obeys tha XPG4 standard n' tha oldschool practice of the
AT&T curses implementations, up in dat tha echo bit is cleared when curses
initializes tha terminal state.  BSD curses differed from dis slightly; it
left tha echo bit on at initialization yo, but tha BSD \fBraw\fR call turned it
off as a side-effect.  For dopest portability, set echo or noecho explicitly
just afta initialization, even if yo' program remains up in cooked mode.
.PP
When \fBkeypad\fP is first enabled,
ncurses loadz tha key-definitions fo' tha current terminal description.
If tha terminal description includes extended strang capabilities,
e.g., from rockin tha \fB\-x\fP option of tic,
then ncurses also defines keys fo' tha capabilitizzles whose names
begin wit "k".
Da correspondin keycodes is generated n' (dependin on previous
loadz of terminal descriptions) may differ from one execution of a
program ta tha next.
Da generated keycodes is recognized by tha \fBkeyname\fP function
(which will then return a name beginnin wit "k" denotin the
terminfo capabilitizzle name rather than "K", used fo' curses key-names).
On tha other hand, a application can use \fBdefine_key\fP ta establish
a specific keycode fo' a given string.
This make it possible fo' a application ta check fo' a extended
capabilityz presence wit \fItigetstr\fP,
and reassign tha keycode ta match its own needs.
.PP
Low-level applications can use \fBtigetstr\fP ta obtain tha definition
of any particular strang capability.
Higher-level applications which use tha curses \fBwgetch\fP
and similar functions ta return keycodes rely upon tha order up in which
the strings is loaded.
If mo' than one key definizzle has tha same ol' dirty strang value,
then \fBwgetch\fP can return only one keycode.
Most curses implementations (includin ncurses)
load key definitions up in tha order
defined by tha array of strang capabilitizzle names.
Da last key ta be loaded determines tha keycode which is ghon be returned.
In ncurses, you may also have extended capabilitizzles interpreted as
key definitions.
These is loaded afta tha predefined keys,
and if a cold-ass lil capabilityz value is tha same ol' dirty as a previously-loaded
key definition,
the lata definizzle is tha one used.
.SH NOTES
Note dat \fBecho\fR, \fBnoecho\fR, \fBhalfdelay\fR, \fBintrflush\fR,
\fBmeta\fR, \fBnodelay\fR, \fBnotimeout\fR, \fBnoqiflush\fR,
\fBqiflush\fR, \fBtimeout\fR, n' \fBwtimeout\fR may be macros.
.PP
Da \fBnoraw\fR n' \fBnocbreak\fR calls follow oldschool practice up in that
they attempt ta restore ta aiiight (`cooked') mode from raw n' cbreak modes
respectively.  Mixin raw/noraw n' cbreak/nocbreak calls leadz ta tty driver
control states dat is hard ta predict or understand; it aint recommended.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_getch\fR(3X),
\fBcurs_initscr\fR(3X),
\fBcurs_util\fR(3X),
\fBdefine_key\fR(3X),
\fBtermio\fR(7)
