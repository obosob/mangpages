.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Man 3"
.TH Pod::Man 3 "2013-01-02" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Man \- Convert POD data ta formatted *roff input
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Pod::Man;
\&    mah $parser = Pod::Man\->new (release => $VERSION, section => 8);
\&
\&    # Read POD from STDIN n' write ta STDOUT.
\&    $parser\->parse_file (\e*STDIN);
\&
\&    # Read POD from file.pod n' write ta file.1.
\&    $parser\->parse_from_file (\*(Aqfile.pod\*(Aq, \*(Aqfile.1\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Pod::Man be a module ta convert documentation up in tha \s-1POD\s0 format (the
preferred language fo' documentin Perl) tha fuck into *roff input rockin tha man
macro set.  Da resultin *roff code is suitable fo' display on a terminal
usin \fInroff\fR\|(1), normally via \fIman\fR\|(1), or printin rockin \fItroff\fR\|(1).
It be conventionally invoked rockin tha driver script \fBpod2man\fR yo, but it can
also be used directly.
.PP
As a thugged-out derived class from Pod::Simple, Pod::Man supports tha same ol' dirty methodz and
interfaces.  See Pod::Simple fo' all tha details.
.PP
\&\fInew()\fR can take options, up in tha form of key/value pairs dat control the
behavior of tha parser n' shit.  See below fo' details.
.PP
If no options is given, Pod::Man uses tha name of tha input file wit any
trailin \f(CW\*(C`.pod\*(C'\fR, \f(CW\*(C`.pm\*(C'\fR, or \f(CW\*(C`.pl\*(C'\fR stripped as tha playa page title, to
section 1 unless tha file ended up in \f(CW\*(C`.pm\*(C'\fR up in which case it defaults to
section 3, ta a cold-ass lil centered title of \*(L"User Contributed Perl Documentation\*(R", to
a centered foota of tha Perl version it is run with, n' ta a left-hand
foota of tha modification date of its input (or tha current date if given
\&\f(CW\*(C`STDIN\*(C'\fR fo' input).
.PP
Pod::Man assumes dat yo' *roff formattas gotz a gangbangin' fixed-width font named
\&\f(CW\*(C`CW\*(C'\fR.  If yours is called suttin' else (like \f(CW\*(C`CR\*(C'\fR), use tha \f(CW\*(C`fixed\*(C'\fR
option ta specify dat shit.  This generally only mattas fo' troff output for
printing.  Similarly, you can set tha fonts used fo' bold, italic, and
bold italic fixed-width output.
.PP
Besides tha obvious pod conversions, Pod::Man also takes care of
formattin \fIfunc()\fR, \fIfunc\fR\|(3), n' simple variable references like \f(CW$foo\fR or
\&\f(CW@bar\fR so you don't gotta use code escapes fo' them; complex expressions
like \f(CW$fred{\*(Aqstuff\*(Aq}\fR will still need ta be escaped, though cause I gots dem finger-lickin' chickens wit tha siz-auce.  It also
translates dashes dat aren't used as hyphens tha fuck into en dashes, make long
dashes\*(--like this\*(--into proper em dashes, fixes \*(L"paired quotes,\*(R" make \*(C+
look right, puts a lil space between double underscores, make \s-1ALLCAPS\s0
a teeny bit smalla up in \fBtroff\fR, n' escapes shiznit dat *roff treats as
special so dat you aint gots to.
.PP
Da recognized options ta \fInew()\fR is as bigs up.  All options take a single
argument.
.IP "center" 4
.IX Item "center"
Sets tha centered page header ta use instead of \*(L"User Contributed Perl
Documentation\*(R".
.IP "errors" 4
.IX Item "errors"
How tha fuck ta report errors.  \f(CW\*(C`die\*(C'\fR say ta throw a exception on any \s-1POD\s0
formattin error. Shiiit, dis aint no joke.  \f(CW\*(C`stderr\*(C'\fR say ta report errors on standard error yo, but
not ta throw a exception. I aint talkin' bout chicken n' gravy biatch.  \f(CW\*(C`pod\*(C'\fR say ta include a \s-1POD ERRORS\s0 section
in tha resultin documentation summarizin tha errors.  \f(CW\*(C`none\*(C'\fR ignores
\&\s-1POD\s0 errors entirely, as much as possible.
.Sp
Da default is \f(CW\*(C`output\*(C'\fR.
.IP "date" 4
.IX Item "date"
Sets tha left-hand footer n' shit.  By default, tha modification date of tha input
file is ghon be used, or tha current date if \fIstat()\fR can't find dat file (the
case if tha input is from \f(CW\*(C`STDIN\*(C'\fR), n' tha date is ghon be formatted as
\&\f(CW\*(C`YYYY\-MM\-DD\*(C'\fR.
.IP "fixed" 4
.IX Item "fixed"
Da fixed-width font ta use fo' verbatim text n' code.  Defaults to
\&\f(CW\*(C`CW\*(C'\fR.  Some systems may want \f(CW\*(C`CR\*(C'\fR instead. Y'all KNOW dat shit, muthafucka!  Only mattas fo' \fBtroff\fR
output.
.IP "fixedbold" 4
.IX Item "fixedbold"
Bold version of tha fixed-width font.  Defaults ta \f(CW\*(C`CB\*(C'\fR.  Only matters
for \fBtroff\fR output.
.IP "fixeditalic" 4
.IX Item "fixeditalic"
Italic version of tha fixed-width font (actually, suttin' of a misnomer,
since most fixed-width fonts only have a oblique version, not a italic
version).  Defaults ta \f(CW\*(C`CI\*(C'\fR.  Only mattas fo' \fBtroff\fR output.
.IP "fixedbolditalic" 4
.IX Item "fixedbolditalic"
Bold italic (probably straight-up oblique) version of tha fixed-width font.
Pod::Man don't assume you have this, n' defaults ta \f(CW\*(C`CB\*(C'\fR.  Some
systems (like fuckin Solaris) have dis font available as \f(CW\*(C`CX\*(C'\fR.  Only matters
for \fBtroff\fR output.
.IP "name" 4
.IX Item "name"
Set tha name of tha manual page.  Without dis option, tha manual name is
set ta tha uppercased base name of tha file bein converted unless the
manual section is 3, up in which case tha path is parsed ta peep if it aint nuthin but a Perl
module path.  If it is, a path like \f(CW\*(C`.../lib/Pod/Man.pm\*(C'\fR is converted into
a name like \f(CW\*(C`Pod::Man\*(C'\fR.  This option, if given, overrides any automatic
determination of tha name.
.IP "nourls" 4
.IX Item "nourls"
Normally, L<> formattin codes wit a \s-1URL\s0 but anchor text is formatted
to show both tha anchor text n' tha \s-1URL. \s0 In other lyrics:
.Sp
.Vb 1
\&    L<foo|http://example.com/>
.Ve
.Sp
is formatted as:
.Sp
.Vb 1
\&    foo <http://example.com/>
.Ve
.Sp
This option, if set ta a legit value, suppresses tha \s-1URL\s0 when anchor text
is given, so dis example would be formatted as just \f(CW\*(C`foo\*(C'\fR.  This can
produce less cluttered output up in cases where tha URLs is not particularly
important.
.IP "quotes" 4
.IX Item "quotes"
Sets tha quote marks used ta surround C<> text.  If tha value be a
single character, it is used as both tha left n' right quote; if it is two
characters, tha straight-up original gangsta characta is used as tha left quote n' tha second as
the right quoted; n' if it is four characters, tha straight-up original gangsta two is used as
the left quote n' tha second two as tha right quote.
.Sp
This may also be set ta tha special value \f(CW\*(C`none\*(C'\fR, up in which case no quote
marks is added round C<> text (but tha font is still chizzled fo' troff
output).
.IP "release" 4
.IX Item "release"
Set tha centered footer n' shit.  By default, dis is tha version of Perl you run
Pod::Man under n' shit.  Note dat some system a macro sets assume dat the
centered foota is ghon be a modification date n' will prepend suttin' like
\&\*(L"Last modified: \*(R"; if dis is tha case, you may wanna set \f(CW\*(C`release\*(C'\fR to
the last modified date n' \f(CW\*(C`date\*(C'\fR ta tha version number.
.IP "section" 4
.IX Item "section"
Set tha section fo' tha \f(CW\*(C`.TH\*(C'\fR macro.  Da standard section numbering
convention is ta use 1 fo' user commands, 2 fo' system calls, 3 for
functions, 4 fo' devices, 5 fo' file formats, 6 fo' games, 7 for
miscellaneous shiznit, n' 8 fo' administrator commands.  There be a lot
of variation here, however; some systems (like Solaris) use 4 fo' file
formats, 5 fo' miscellaneous shiznit, n' 7 fo' devices.  Still others
use 1m instead of 8, or some mix of both.  Bout tha only section numbers
that is reliably consistent is 1, 2, n' 3.
.Sp
By default, section 1 is ghon be used unless tha file endz up in \f(CW\*(C`.pm\*(C'\fR up in which
case section 3 is ghon be selected.
.IP "stderr" 4
.IX Item "stderr"
Send error lyrics bout invalid \s-1POD\s0 ta standard error instead of
appendin a \s-1POD ERRORS\s0 section ta tha generated *roff output.  This is
equivalent ta settin \f(CW\*(C`errors\*(C'\fR ta \f(CW\*(C`stderr\*(C'\fR if \f(CW\*(C`errors\*(C'\fR aint already
set.  It be supported fo' backward compatibility.
.IP "utf8" 4
.IX Item "utf8"
By default, Pod::Man produces da most thugged-out conservatizzle possible *roff output
to try ta ensure dat it will work wit as nuff different *roff
implementations as possible.  Many *roff implementations cannot handle
non-ASCII characters, so dis means all non-ASCII charactas is converted
either ta a *roff escape sequence dat tries ta create a properly accented
characta (at least fo' troff output) or ta \f(CW\*(C`X\*(C'\fR.
.Sp
If dis option is set, Pod::Man will instead output \s-1UTF\-8. \s0 If yo' *roff
implementation can handle it, dis is tha dopest output format ta use and
avoidz corruption of documents containin non-ASCII characters.  However,
be warned dat *roff source wit literal \s-1UTF\-8\s0 charactas aint supported
by nuff implementations n' may even result up in segfaults n' other bad
behavior.
.Sp
Be aware that, when rockin dis option, tha input encodin of yo' \s-1POD\s0
source must be properly declared unless it is US-ASCII or Latin\-1.  \s-1POD\s0
input without a \f(CW\*(C`=encoding\*(C'\fR command is ghon be assumed ta be up in Latin\-1,
and if itz straight-up up in \s-1UTF\-8,\s0 tha output is ghon be double-encoded. Y'all KNOW dat shit, muthafucka!  See
\&\fIperlpod\fR\|(1) fo' mo' shiznit on tha \f(CW\*(C`=encoding\*(C'\fR command.
.PP
Da standard Pod::Simple method \fIparse_file()\fR takes one argument namin the
\&\s-1POD\s0 file ta read from.  By default, tha output is busted ta \f(CW\*(C`STDOUT\*(C'\fR yo, but
this can be chizzled wit tha \fIoutput_fd()\fR method.
.PP
Da standard Pod::Simple method \fIparse_from_file()\fR takes up ta two
arguments, tha straight-up original gangsta bein tha input file ta read \s-1POD\s0 from n' tha second
bein tha file ta write tha formatted output to.
.PP
Yo ass can also call \fIparse_lines()\fR ta parse a array of lines or
\&\fIparse_string_document()\fR ta parse a thugged-out document already up in memory.  To put the
output tha fuck into a strang instead of a gangbangin' file handle, call tha \fIoutput_string()\fR
method. Y'all KNOW dat shit, muthafucka!  See Pod::Simple fo' tha specific details.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "roff font should be 1 or 2 chars, not ""%s""" 4
.el .IP "roff font should be 1 or 2 chars, not ``%s''" 4
.IX Item "roff font should be 1 or 2 chars, not %s"
(F) Yo ass specified a *roff font (usin \f(CW\*(C`fixed\*(C'\fR, \f(CW\*(C`fixedbold\*(C'\fR, etc.) that
wasn't either one or two characters.  Pod::Man don't support *roff fonts
longer than two characters, although some *roff extensions do (the
canonical versionz of \fBnroff\fR n' \fBtroff\fR don't either).
.ie n .IP "Invalid errors settin ""%s""" 4
.el .IP "Invalid errors settin ``%s''" 4
.IX Item "Invalid errors settin %s"
(F) Da \f(CW\*(C`errors\*(C'\fR parameta ta tha constructor was set ta a unknown value.
.ie n .IP "Invalid quote justification ""%s""" 4
.el .IP "Invalid quote justification ``%s''" 4
.IX Item "Invalid quote justification %s"
(F) Da quote justification given (the \f(CW\*(C`quotes\*(C'\fR option ta the
constructor) was invalid. Y'all KNOW dat shit, muthafucka!  A quote justification must be one, two, or four
charactas long.
.IP "\s-1POD\s0 document had syntax errors" 4
.IX Item "POD document had syntax errors"
(F) Da \s-1POD\s0 document bein formatted had syntax errors n' tha \f(CW\*(C`errors\*(C'\fR
option was set ta \f(CW\*(C`die\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
Encodin handlin assumes dat PerlIO be available n' do not work
properly if it aint.  Da \f(CW\*(C`utf8\*(C'\fR option is therefore not supported
unless Perl is built wit PerlIO support.
.PP
There is currently no way ta turn off tha guesswork dat tries ta format
unmarked text appropriately, n' sometimes it aint wanted (particularly
when rockin \s-1POD\s0 ta document suttin' other than Perl).  Most of tha work
toward fixin dis has now been done, however, n' all thatz still needed
is a user intercourse.
.PP
Da \s-1NAME\s0 section should be recognized specially n' index entries emitted
for every last muthafuckin thang up in dat section. I aint talkin' bout chicken n' gravy biatch.  This would gotta be deferred until the
next section, since extraneous thangs up in \s-1NAME\s0 tendz ta confuse various man
page processors.  Currently, no index entries is emitted fo' anythang in
\&\s-1NAME.\s0
.PP
Pod::Man don't handle font names longer than two characters.  Neither do
most \fBtroff\fR implementations yo, but \s-1GNU\s0 troff do as a extension. I aint talkin' bout chicken n' gravy biatch.  It would
be sick ta support as a option fo' dem playas whoz ass wanna use dat shit.
.PP
Da preamble added ta each output file is rather verbose, n' most of it
is only necessary up in tha presence of non-ASCII characters.  It would
ideally be sick if all of dem definitions was only output if needed,
like on tha fly as tha charactas is used.
.PP
Pod::Man is excessively slow.
.SH "CAVEATS"
.IX Header "CAVEATS"
If Pod::Man is given tha \f(CW\*(C`utf8\*(C'\fR option, tha encodin of its output file
handle is ghon be forced ta \s-1UTF\-8\s0 if possible, overridin any existing
encoding.  This is ghon be done even if tha file handle aint pimped by
Pod::Man n' was passed up in from outside.  This maintains consistency
regardless of \s-1PERL_UNICODE\s0 n' other settings.
.PP
Da handlin of hyphens n' em dashes is somewhat fragile, n' one may get
the wack one under some circumstances.  This should only matta for
\&\fBtroff\fR output.
.PP
When n' whether ta use lil' small-ass caps is somewhat tricky, n' Pod::Man don't
necessarily git it right.
.PP
Convertin neutral double quotes ta properly matched double quotes don't
work unless there be no formattin codes between tha quote marks.  This
only mattas fo' troff output.
.SH "AUTHOR"
.IX Header "AUTHOR"
Russ Allbery <rra@stanford.edu>, based \fIvery\fR heavily on tha original
\&\fBpod2man\fR by Tomothy Christiansen <tchrist@mox.perl.com>.  Da modifications to
work wit Pod::Simple instead of Pod::Parser was originally contributed by
Shizzle Burke (but I've since jacked dem beyond recognizzle n' all bugs are
mine).
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
2009, 2010, 2012, 2013 Russ Allbery <rra@stanford.edu>.
.PP
This program is free software; you may redistribute it and/or modify it
under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Simple, \fIperlpod\fR\|(1), \fIpod2man\fR\|(1), \fInroff\fR\|(1), \fItroff\fR\|(1),
\&\fIman\fR\|(1), \fIman\fR\|(7)
.PP
Ossanna, Joseph F., n' Brian W. Kernighan. I aint talkin' bout chicken n' gravy biatch.  \*(L"Troff Userz Manual,\*(R"
Computin Science Technical Report No. 54, \s-1AT&T\s0 Bell Laboratories. Put ya muthafuckin choppers up if ya feel dis!  This is
the dopest documentation of standard \fBnroff\fR n' \fBtroff\fR.  At tha time of
this writing, itz available at
<http://www.cs.bell\-labs.com/cm/cs/cstr.html>.
.PP
Da playa page documentin tha playa macro set may be \fIman\fR\|(5) instead of
\&\fIman\fR\|(7) on yo' system.  Also, please peep \fIpod2man\fR\|(1) fo' extensive
documentation on freestylin manual pages if you've not done it before and
aren't familiar wit tha conventions.
.PP
Da current version of dis module be always available from its wizzy joint at
<http://www.eyrie.org/~eagle/software/podlators/>.  It be also part of the
Perl core distribution az of 5.6.0.
