.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_CTX_set_session_cache_mode 3"
.TH SSL_CTX_set_session_cache_mode 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_CTX_set_session_cache_mode, SSL_CTX_get_session_cache_mode \- enable/disable session caching
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& long SSL_CTX_set_session_cache_mode(SSL_CTX ctx, long mode);
\& long SSL_CTX_get_session_cache_mode(SSL_CTX ctx);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISSL_CTX_set_session_cache_mode()\fR enables/disablez session caching
by settin tha operationizzle mode fo' \fBctx\fR ta <mode>.
.PP
\&\fISSL_CTX_get_session_cache_mode()\fR returns tha currently used cache mode.
.SH "NOTES"
.IX Header "NOTES"
Da OpenSSL library can store/retrieve \s-1SSL/TLS\s0 sessions fo' lata reuse.
Da sessions can be held up in memory fo' each \fBctx\fR, if mo' than one
\&\s-1SSL_CTX\s0 object is bein maintained, tha sessions is unique fo' each \s-1SSL_CTX\s0
object.
.PP
In order ta reuse a session, a cold-ass lil client must bust tha sessionz id ta the
server n' shit. Well shiiiit, it can only bust exactly one id. Y'all KNOW dat shit, muthafucka!  Da server then either 
agrees ta reuse tha session or it starts a gangbangin' full handshake (to create a new
session).
.PP
A server will lookup up tha session up in its internal session storage. If the
session aint found up in internal storage or lookups fo' tha internal storage
have been deactivated (\s-1SSL_SESS_CACHE_NO_INTERNAL_LOOKUP\s0), tha server will try
the external storage if available.
.PP
Since a cold-ass lil client may try ta reuse a session intended fo' use up in a gangbangin' finger-lickin' different
context, tha session id context must be set by tha server (see
\&\fISSL_CTX_set_session_id_context\fR\|(3)).
.PP
Da followin session cache modes n' modifiers is available:
.IP "\s-1SSL_SESS_CACHE_OFF\s0" 4
.IX Item "SSL_SESS_CACHE_OFF"
No session cachin fo' client or server takes place.
.IP "\s-1SSL_SESS_CACHE_CLIENT\s0" 4
.IX Item "SSL_SESS_CACHE_CLIENT"
Client sessions is added ta tha session cache fo' realz. As there is no reliable way
for tha OpenSSL library ta know whether a session should be reused or which
session ta chizzle (due ta tha abstract \s-1BIO\s0 layer tha \s-1SSL\s0 engine do not
have details bout tha connection), tha application must select tha session
to be reused by rockin tha \fISSL_set_session\fR\|(3)
function. I aint talkin' bout chicken n' gravy biatch. This option aint activated by default.
.IP "\s-1SSL_SESS_CACHE_SERVER\s0" 4
.IX Item "SSL_SESS_CACHE_SERVER"
Server sessions is added ta tha session cache. When a cold-ass lil client proposes a
session ta be reused, tha server looks fo' tha correspondin session up in (first)
the internal session cache (unless \s-1SSL_SESS_CACHE_NO_INTERNAL_LOOKUP\s0 is set),
then (second) up in tha external cache if available. If tha session is found, the
server will try ta reuse tha session. I aint talkin' bout chicken n' gravy biatch.  This is tha default.
.IP "\s-1SSL_SESS_CACHE_BOTH\s0" 4
.IX Item "SSL_SESS_CACHE_BOTH"
Enable both \s-1SSL_SESS_CACHE_CLIENT\s0 n' \s-1SSL_SESS_CACHE_SERVER\s0 all up in tha same time.
.IP "\s-1SSL_SESS_CACHE_NO_AUTO_CLEAR\s0" 4
.IX Item "SSL_SESS_CACHE_NO_AUTO_CLEAR"
Normally tha session cache is checked fo' expired sessions every
255 connections rockin the
\&\fISSL_CTX_flush_sessions\fR\|(3) function. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since
this may lead ta a thugged-out delay which cannot be controlled, tha automatic
flushin may be disabled and
\&\fISSL_CTX_flush_sessions\fR\|(3) can be called
explicitly by tha application.
.IP "\s-1SSL_SESS_CACHE_NO_INTERNAL_LOOKUP\s0" 4
.IX Item "SSL_SESS_CACHE_NO_INTERNAL_LOOKUP"
By settin dis flag, session-resume operations up in a \s-1SSL/TLS\s0 server will not
automatically look up sessions up in tha internal cache, even if sessions are
automatically stored there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. If external session cachin callbacks is up in use,
this flag guarantees dat all lookups is pimped up ta tha external cache.
As automatic lookup only applies fo' \s-1SSL/TLS\s0 servers, tha flag has no effect on
clients.
.IP "\s-1SSL_SESS_CACHE_NO_INTERNAL_STORE\s0" 4
.IX Item "SSL_SESS_CACHE_NO_INTERNAL_STORE"
Dependin on tha presence of \s-1SSL_SESS_CACHE_CLIENT\s0 and/or \s-1SSL_SESS_CACHE_SERVER,\s0
sessions negotiated up in a \s-1SSL/TLS\s0 handshake may be cached fo' possible reuse.
Normally a freshly smoked up session be added ta tha internal cache as well as any external
session cachin (callback) dat is configured fo' tha \s-1SSL_CTX.\s0 This flag will
prevent sessions bein stored up in tha internal cache (though tha application can
add dem manually rockin \fISSL_CTX_add_session\fR\|(3)). Note:
in any \s-1SSL/TLS\s0 servers where external cachin is configured, any successful
session lookups up in tha external cache (ie. fo' session-resume requests) would
normally be copied tha fuck into tha local cache before processin continues \- dis flag
prevents these additions ta tha internal cache as well.
.IP "\s-1SSL_SESS_CACHE_NO_INTERNAL\s0" 4
.IX Item "SSL_SESS_CACHE_NO_INTERNAL"
Enable both \s-1SSL_SESS_CACHE_NO_INTERNAL_LOOKUP\s0 and
\&\s-1SSL_SESS_CACHE_NO_INTERNAL_STORE\s0 all up in tha same time.
.PP
Da default mode is \s-1SSL_SESS_CACHE_SERVER.\s0
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fISSL_CTX_set_session_cache_mode()\fR returns tha previously set cache mode.
.PP
\&\fISSL_CTX_get_session_cache_mode()\fR returns tha currently set cache mode.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIssl\fR\|(3), \fISSL_set_session\fR\|(3),
\&\fISSL_session_reused\fR\|(3),
\&\fISSL_CTX_add_session\fR\|(3),
\&\fISSL_CTX_sess_number\fR\|(3),
\&\fISSL_CTX_sess_set_cache_size\fR\|(3),
\&\fISSL_CTX_sess_set_get_cb\fR\|(3),
\&\fISSL_CTX_set_session_id_context\fR\|(3),
\&\fISSL_CTX_set_timeout\fR\|(3),
\&\fISSL_CTX_flush_sessions\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\s-1SSL_SESS_CACHE_NO_INTERNAL_STORE\s0 n' \s-1SSL_SESS_CACHE_NO_INTERNAL\s0
were introduced up in OpenSSL 0.9.6h.
