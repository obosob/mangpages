'\" t
.\"     Title: xiquerydevice
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XIQUERYDEVICE" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XIQueryDevice, XIFreeDeviceInfo \- git shiznit bout devices\&.
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput2\&.h>
.fi
.sp
.nf
XIDeviceInfo* XIQueryDevice( Display *display,
                             int deviceid,
                             int *ndevices_return);
.fi
.sp
.nf
XIFreeDeviceInfo( XIDeviceInfo *info);
.fi
.sp
.nf
deviceid
       Specifies tha thang ta query or XIAllDevices or
       XIAllMasterDevices\&.
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
ndevices_return
       Returns tha number of devices returned\&.
.fi
.sp
.nf
info
       A list of thang XIDeviceInfo structs ta be freed\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
Da XIQueryDevice returns shiznit bout one or mo' input
devices\&. If tha deviceid specifies a thugged-out device, ndevices_return is
1 n' tha returned shiznit raps bout only tha requested
device\&. If deviceid is XIAllDevices or XIAllMasterDevices,
ndevices_return is tha number of devices or masta devices,
respectively, n' tha returned shiznit represents all
devices or all masta devices, respectively\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To free tha XIDeviceInfo array returned by XIQueryDevice, use
XIFreeDeviceInfo\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For each input thang requested, tha XIQueryDevice returns an
XIDeviceInfo structure\&. Each structure gotz nuff shiznit
about tha capabilitizzlez of one input thang available ta the
server\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int                 deviceid;
    char                *name;
    int                 use;
    int                 attachment;
    Bool                enabled;
    int                 num_classes;
    XIAnyClassInfo      **classes;
} XIDeviceInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da deviceid is tha numeric unique id of tha device\& fo' realz. A deviceid
is unique fo' tha game\-time of a thang but a server may re\-use
the id once a thang has been removed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da name points ta a null\-terminated strang specifyin the
identifier of tha device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da use n' attachment fieldz specify tha type of tha device
and tha current attachment or pairing\&.
\- If use is XIMasterPointer, tha thang be a masta pointa and
  attachment specifies tha deviceid of tha paired master
  keyboard\&.
\- If use is XIMasterKeyboard, tha thang be a masta keyboard,
  n' tha attachment field specifies tha paired masta pointer\&.
\- If use is XISlavePointer, tha thang be a slave thang and
  currently attached ta tha masta pointa specified in
  attachement\&.
\- If use is XISlaveKeyboard, tha thang be a slave thang an
  currently attached ta tha masta keyboard specified in
  attachment\&.
\- If use is XIFloatingSlave, tha thang be a slave device
  currently not attached ta any masta device\&. Da value of the
  attachment field fo' floatin slave devices is undefined\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da enabled field specifies if tha thang is currently enabled
and can bust events\&. Disabled devices aint gonna bust events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da num_classes field specifies tha number of input classes
pointed ta by classes\&. Da first two fieldz of all input
classes is identical\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int         type;
    int         sourceid;
} XIAnyClassInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da type field specifies tha type of tha input class\&.
Currently, tha followin types is defined:
    XIKeyClass, XIButtonClass, XIValuatorClass, XIScrollClass,
    XITouchClass
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
In tha future, additionizzle types may be added\&. Clients are
required ta ignore unknown input classes\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da sourceid is tha deviceid dis class originated from\&. For
masta devices, tha sourceid is typically tha id of tha slave
device currently bustin  events\&. For slave devices, the
sourceid is typically tha device\*(Aqs id\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A thang may have zero or one XIButtonClass, denotin the
device\*(Aqs capabilitizzle ta bust button events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    int           mask_len;
    unsigned char *mask;
} XIButtonState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int         type;
    int         sourceid;
    int         num_buttons;
    Atom        *labels;
    XIButtonState state;
} XIButtonClassInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da num_buttons field specifies tha number of buttons available
on dis device\& fo' realz. A thang dat has a XIButtonClass must have at
least one button\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
labels be a list of num_buttons Atoms specifyin tha button
labels fo' dis device\&. If tha label aint None, then the
label specifies tha type of button up in physical thang order
(i\&.e\&. as tha buttons is numbered on tha physical input
device)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da state is tha current button state as peeped by clients (i\&.e\&.
afta button mappin be applied)\&. Da mask_len field specifies
the length of mask up in bytes\&. For each button on tha device, the
respectizzle bit up in mask is set if tha button is currently
logically down\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A thang may have zero or one XIKeyClass, denotin tha device\*(Aqs
capabilitizzle ta bust key events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int         type;
    int         sourceid;
    int         num_keycodes;
    int         *keycodes;
} XIKeyClassInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da num_keycodes field specifies tha number of keycodes
available on dis device\& fo' realz. A thang dat has a XIKeyClass must
have at least one keycode\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
keycodes be a list of num_keycodes keycodes tha thang may
send\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A thang may have zero or mo' XIValuatorClass, denotin the
device\*(Aqs capabilitizzle ta bust coordinates\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int         type;
    int         sourceid;
    int         number;
    Atom        label;
    double      min;
    double      max;
    double      value;
    int         resolution;
    int         mode;
} XIValuatorClassInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da number field specifies tha number of tha axis on the
physical device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If tha label field aint None, tha value of label be a Atom
describin tha axis\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
min n' max is tha minimum n' maximum joints allowed on this
axis\&. If both is zero, no minumum or maximum joints is set on
this device\&. value is tha current value of dis axis\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da resolution field specifies tha resolution of tha thang in
units/m\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da mode specifies tha mode of dis axis\&. If tha mode is
XIModeAbsolute dis axis sendz absolute coordinates\&. If the
mode is XIModeRelative, dis thang sendz relatizzle coordinates\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int         type;
    int         sourceid;
    int         number;
    int         scroll_type;
    double      increment;
    int         flags;
} XIScrollClassInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This class raps bout scrollin capabilitizzle on a valuator\&. For
each XIScrollClassInfo, a XIValuatorClassInfo wit tha same
number is present on tha device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da number field specifies tha valuator number on tha physical
device dat dis scroll shiznit applies to\&. Right back up in yo muthafuckin ass. See the
respectizzle XIValuatorClassInfo fo' detailed shiznit on this
valuator\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da scroll_type field specifies tha type of scrolling, either
XIScrollTypeVertical or XIScrollTypeHorizontal\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da increment specifies tha value chizzle considered one unit of
scrollin down\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da flags field specifies flags dat apply ta dis scrolling
information:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If XIScrollFlagNoEmulation is set, tha server will not
emulate legacy button events fo' valuator chizzlez on this
valuator\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If XIScrollFlagPreferred is set, dis axis is the
preferred axis fo' dis scroll type n' is ghon be used for
the emulation of XI_Motion events when tha driver submits
legacy scroll button events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int         type;
    int         sourceid;
    int         mode;
    int         num_touches;
} XITouchClassInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A thang may have zero or one XITouchClassInfo, denoting
multi\-touch capabilitizzle on tha device\& fo' realz. A thang wit a XITouchClassInfo
may bust TouchBegin, TouchUpdate, TouchEnd n' TouchOwnershizzle events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da mode field is either XIDirectTouch fo' direct\-input bust a nut on devices
like fuckin touchscreens or XIDependentTouch fo' indirect input devices such
as touchpads\&. For XIDirectTouch devices, bust a nut on events is busted ta window
at tha posizzle tha bust a nut on occured\&. For XIDependentTouch devices, touch
events is busted ta tha window all up in tha posizzle of tha device\*(Aqs sprite\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da num_touches field defines tha maximum number of simultaneous touches
the thang supports\& fo' realz. A num_touchez of 0 means tha maximum number of
simultaneous touches is undefined or unspecified\&. This field should be
used as a guide only, devices will lie bout they capabilities\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A thang wit a XITouchClassInfo may still bust pointa events\&. The
valuators must be defined wit tha respectizzle XIValuatorClass
classes\& fo' realz. A valuator may bust both pointa n' touch\-events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XIQueryDevice can generate a BadDevice error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XIFreeDeviceInfo frees tha shiznit returned by
XIQueryDevice\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid thang was specified\&. Da thang do not
       exist or aint a pointa device\&.
.fi
.if n \{\
.RE
.\}
