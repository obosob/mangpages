.\" t
.\" This playa page is busted out under tha GPL as part of libstdc++.
.TH C++Intro 3 "20 May 2004" "GNU libstdc++" "Standard C++ Library"
.SH NAME
C++Intro \- Introduction ta tha GNU libstdc++ playa pages
.SH DESCRIPTION
This playa page serves as a funky-ass brief introduction ta tha GNU implementation of
the Standard C++ Library.  For a funky-ass betta introduction n' mo' complete
documentation, peep the
.B libstdc++
homepizzy listed all up in tha end.
.P
All standard library entitizzles is declared within
.I namespace std
and have manual entries beginnin wit "std::".  For example, ta see
documentation of tha template class
.I std::vector
one would use "man std::vector".  Some entitizzles aint gots a separate man
page; fo' dem peep tha main listin up in "man Namespace_std".
.P
All tha playa pages is automatically generated by Doxygen. I aint talkin' bout chicken n' gravy biatch.  For more
information on dis tool, peep tha HTML counterpart ta these playa pages.
.P
Some playa pages do not correspond ta individual classes or functions.  Rather
they describe categoriez of tha Standard Library.  (For a mo' thorough
introduction ta tha various categories, consult a text like fuckin Josuttis'
or Austern's.)  These category pages are:
.P
.\" These is separated by ONE TAB.  Nothang else.  I don't like it either.
.TS
lB l.
C++Intro	This page.
Namespace_std	A listin of tha contentz of std::.
Namespace___gnu_cxx	A listin of tha contentz of __gnu_cxx::.
Containers	An introduction ta container classes.
Sequences	Linear containers.
Assoc_containers	Key-based containers.
Iterator_types	Programatically distinguishin iterators/pointers.
Intro_functors	An introduction ta function objects, or functors.
Arithmetic_functors	Functors fo' basic math.
Binder_functors	Functors which "remember" a argument.
Comparison_functors	Functors wrappin built-in comparisons.
Func_ptr_functors	Functors fo' use wit pointas ta functions.
Logical_functors	Functors rappin bout da Boolean operations.
Member_ptr_functor	Functors fo' use wit pointas ta members.
Negation_functors	Functors which negate they contents.
SGIextensions	A list of tha extensions from tha SGI STL subset.

.TE
.P
Da HTML documentation typically goes tha fuck into much mo' depth.
.SH FILES
Lots!
.SS Standard Headers
These headaz is ghon be found automatically, unless you instruct tha compiler
otherwise.
.TS
lB lB lB lB.
<algorithm>  <csignal>     <iomanip>   <ostream>
<bitset>     <cstdarg>     <ios>       <queue>
<cassert>    <cstddef>     <iosfwd>    <set>
<cctype>     <cstdio>      <iostream>  <sstream>
<cerrno>     <cstdlib>     <istream>   <stack>
<cfloat>     <cstring>     <iterator>  <stdexcept>
<ciso>646    <ctime>       <limits>    <streambuf>
<climits>    <cwchar>      <list>      <string>
<clocale>    <cwctype>     <locale>    <utility>
<cmath>      <deque>       <map>       <valarray>
<complex>    <fstream>     <memory>    <vector>
<csetjmp>    <functional>  <numeric>
.TE
.SS Backwards-Compatibilitizzle Headers
For GCC 3.0 these headaz is ghon be found automatically, unless you instruct
the compila otherwise.  Yo ass should not depend on this, instead you should
read FAQUIZZY 5.4 n' use a
.B backward/
prefix.
.TS
lB lB lB lB.
<strstream>
.TE
.SS Extension Headers
These headaz will only be found automatically if you include tha leading
.B ext/
in tha name.  Otherwise you need ta read FAQUIZZY 5.4.
.\" Easy way ta generate these columnz of headaz is ta use GNU ls(1):
.\" ls -w 40 file1 file2... | sed 's=[a-z_][a-z_]*=<ext/&>=g'
.TS
lB lB.
<ext/algorithm>            <ext/numeric>            
<ext/functional>           <ext/iterator>
<ext/slist>                <ext/rb_tree>  
<ext/rope>                 <ext/memory>               
<ext/bitmap_allocator.h>   <ext/debug_allocator.h>    
<ext/malloc_allocator.h>   <ext/mt_allocator.h>     
<ext/pool_allocator.h>     <ext/pod_char_traits.h>    
<ext/stdio_filebuf.h>      <ext/stdio_sync_filebuf.h>
.TE
.SS Libraries
.TP
.I libstdc++.a
Da library implementation up in static archive form.  If you did not configure
libstdc++ ta use shared libraries, dis will always be used. Y'all KNOW dat shit, muthafucka!  Otherwise
it will only be used if tha user requests dat shit.
.TP
.I libsupc++.a
This library gotz nuff C++ language support routines.  Usually yo big-ass booty is ghon never
need ta know bout it yo, but it can be useful naaahhmean, biatch?  See FAQUIZZY 2.5.
.TP
.I libstdc++.so[.N]
Da library implementation up in shared object form.  This is ghon be used in
preference ta tha static archive form by default.  N is ghon be a number equal
to or pimped outa than 3.  If N is up in tha 2.x series, then yo ass is lookin at
the oldschool libstdc++-v2 library, which our phat asses do not maintain.
.TP
.I libstdc++.la
.TP
.I libsupc++.la
These is Libtool library files, n' should only be used when hustlin with
that tool.
.SH CONFORMING TO
Almost conformin to
.BI "Internationistic Standard ISO/IEC 14882:1998(E), " "Programmin Languages --- C++"
(aka tha C++ standard), up in addizzle ta erections proposed by tha Library
Workin Group,
.SM JTC1/SC22/WG21.
.SH SEE ALSO
.UR
http://gcc.gnu.org/libstdc++/
.UE
for tha Frequently Axed Questions, online documentation, n' much, much more!
.\" vim:ts=8:noet:
