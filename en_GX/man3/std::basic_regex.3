" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::basic_regex< _Ch_type, _Rx_traits > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef 
.br
\fBregex_constants::syntax_option_type\fP \fBflag_type\fP"
.br
.ti -1c
.RI "typedef traits_type::locale_type \fBlocale_type\fP"
.br
.ti -1c
.RI "typedef traits_type::string_type \fBstring_type\fP"
.br
.ti -1c
.RI "typedef _Rx_traits \fBtraits_type\fP"
.br
.ti -1c
.RI "typedef _Ch_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_regex\fP ()"
.br
.ti -1c
.RI "\fBbasic_regex\fP (const _Ch_type *__p, flag_type __f=ECMAScript)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (const _Ch_type *__p, std::size_t __len, flag_type __f)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (const \fBbasic_regex\fP &__rhs)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (const \fBbasic_regex\fP &&__rhs) noexcept"
.br
.ti -1c
.RI "template<typename _Ch_traits , typename _Ch_alloc > \fBbasic_regex\fP (const \fBstd::basic_string\fP< _Ch_type, _Ch_traits, _Ch_alloc > &__s, flag_type __f=ECMAScript)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_regex\fP (_InputIterator __first, _InputIterator __last, flag_type __f=ECMAScript)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (\fBinitializer_list\fP< _Ch_type > __l, flag_type __f=ECMAScript)"
.br
.ti -1c
.RI "\fB~basic_regex\fP ()"
.br
.ti -1c
.RI "const \fB__detail::_AutomatonPtr\fP & \fB_M_get_automaton\fP () const "
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (const \fBbasic_regex\fP &__rhs)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (\fBbasic_regex\fP &&__rhs) noexcept"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (const _Ch_type *__p, flag_type __flags=ECMAScript)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (const _Ch_type *__p, std::size_t __len, flag_type __flags)"
.br
.ti -1c
.RI "template<typename _Ch_typeraits , typename _Alloc > \fBbasic_regex\fP & \fBassign\fP (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Alloc > &__s, flag_type __flags=ECMAScript)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_regex\fP & \fBassign\fP (_InputIterator __first, _InputIterator __last, flag_type __flags=ECMAScript)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (\fBinitializer_list\fP< _Ch_type > __l, flag_type __flags=ECMAScript)"
.br
.ti -1c
.RI "flag_type \fBflags\fP () const "
.br
.ti -1c
.RI "locale_type \fBgetloc\fP () const "
.br
.ti -1c
.RI "locale_type \fBimbue\fP (locale_type __loc)"
.br
.ti -1c
.RI "unsigned int \fBmark_count\fP () const "
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBoperator=\fP (const \fBbasic_regex\fP &__rhs)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBoperator=\fP (\fBbasic_regex\fP &&__rhs) noexcept"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBoperator=\fP (const _Ch_type *__p)"
.br
.ti -1c
.RI "template<typename _Ch_typeraits , typename _Alloc > \fBbasic_regex\fP & \fBoperator=\fP (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Alloc > &__s)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBbasic_regex\fP &__rhs)"
.br
.in -1c
.SS "Static Public Attributes"

.PP
.RI "\fBConstants\fP"
.br
std [28\&.8\&.1](1) 
.PP
.in +1c
.in +1c
.ti -1c
.RI "static constexpr flag_type \fBicase\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBnosubs\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBoptimize\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBcollate\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBECMAScript\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBbasic\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBextended\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBawk\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBgrep\fP"
.br
.ti -1c
.RI "static constexpr flag_type \fBegrep\fP"
.br
.in -1c
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fB__detail::_AutomatonPtr\fP \fB_M_automaton\fP"
.br
.ti -1c
.RI "flag_type \fB_M_flags\fP"
.br
.ti -1c
.RI "_Rx_traits \fB_M_traits\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>>class std::basic_regex< _Ch_type, _Rx_traits >"
Objectz of specializationz of dis class represent regular expressions constructed from sequencez of characta type \fC_Ch_type\fP\&.
.PP
Storage fo' tha regular expression be allocated n' deallocated as necessary by tha member functionz of dis class\&. 
.PP
Definizzle at line 335 of file regex\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP ()\fC [inline]\fP"
Constructs a funky-ass basic regular expression dat do not match any characta sequence\&. 
.PP
Definizzle at line 367 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const _Ch_type *__p, flag_type__f = \fCECMAScript\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructs a funky-ass basic regular expression from tha sequence [__p, __p + char_traits<_Ch_type>::length(__p)) interpreted accordin ta tha flags up in \fC__f\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP A pointa ta tha start of a C-style null-terminated strang containin a regular expression\&. 
.br
\fI__f\fP Flags indicatin tha syntax rulez n' options\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if \fC__p\fP aint a valid regular expression\&. 
.RE
.PP

.PP
Definizzle at line 385 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const _Ch_type *__p, std::size_t__len, flag_type__f)\fC [inline]\fP"

.PP
Constructs a funky-ass basic regular expression from tha sequence [p, p + len) interpreted accordin ta tha flags up in \fCf\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP A pointa ta tha start of a strang containin a regular expression\&. 
.br
\fI__len\fP Da length of tha strang containin tha regular expression\&. 
.br
\fI__f\fP Flags indicatin tha syntax rulez n' options\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if \fC__p\fP aint a valid regular expression\&. 
.RE
.PP

.PP
Definizzle at line 403 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const \fBbasic_regex\fP< _Ch_type, _Rx_traits > &__rhs)\fC [inline]\fP"

.PP
Copy-constructs a funky-ass basic regular expression\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__rhs\fP A \fCregex\fP object\&. 
.RE
.PP

.PP
Definizzle at line 413 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const \fBbasic_regex\fP< _Ch_type, _Rx_traits > &&__rhs)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Move-constructs a funky-ass basic regular expression\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__rhs\fP A \fCregex\fP object\&. 
.RE
.PP

.PP
Definizzle at line 423 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _Ch_traits , typename _Ch_alloc > \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const \fBstd::basic_string\fP< _Ch_type, _Ch_traits, _Ch_alloc > &__s, flag_type__f = \fCECMAScript\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructs a funky-ass basic regular expression from tha strang \fCs\fP interpreted accordin ta tha flags up in \fCf\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP A strang containin a regular expression\&. 
.br
\fI__f\fP Flags indicatin tha syntax rulez n' options\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if \fC__s\fP aint a valid regular expression\&. 
.RE
.PP

.PP
Definizzle at line 439 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _InputIterator > \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (_InputIterator__first, _InputIterator__last, flag_type__f = \fCECMAScript\fP)\fC [inline]\fP"

.PP
Constructs a funky-ass basic regular expression from tha range [first, last) interpreted accordin ta tha flags up in \fCf\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Da start of a range containin a valid regular expression\&. 
.br
\fI__last\fP Da end of a range containin a valid regular expression\&. 
.br
\fI__f\fP Da format flagz of tha regular expression\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if \fC\fP[__first, __last) aint a valid regular expression\&. 
.RE
.PP

.PP
Definizzle at line 461 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (\fBinitializer_list\fP< _Ch_type >__l, flag_type__f = \fCECMAScript\fP)\fC [inline]\fP"

.PP
Constructs a funky-ass basic regular expression from a initializer list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP Da initializer list\&. 
.br
\fI__f\fP Da format flagz of tha regular expression\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if \fC__l\fP aint a valid regular expression\&. 
.RE
.PP

.PP
Definizzle at line 475 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::~\fBbasic_regex\fP ()\fC [inline]\fP"

.PP
Destroys a funky-ass basic regular expression\&. 
.PP
Definizzle at line 485 of file regex\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const \fBbasic_regex\fP< _Ch_type, _Rx_traits > &__rhs)\fC [inline]\fP"

.PP
the real assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__rhs\fP Another regular expression object\&. 
.RE
.PP

.PP
Definizzle at line 531 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::swap()\&.
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign(), n' std::basic_regex< _Ch_type, _Rx_traits >::operator=()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (\fBbasic_regex\fP< _Ch_type, _Rx_traits > &&__rhs)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Da move-assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__rhs\fP Another regular expression object\&. 
.RE
.PP

.PP
Definizzle at line 544 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::swap()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const _Ch_type *__p, flag_type__flags = \fCECMAScript\fP)\fC [inline]\fP"

.PP
Assigns a freshly smoked up regular expression ta a regex object from a C-style null-terminated strang containin a regular expression pattern\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP A pointa ta a C-style null-terminated strang containin a regular expression pattern\&. 
.br
\fI__flags\fP Syntax option flags\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if __p do not contain a valid regular expression pattern interpreted accordin ta \fC__flags\fP\&. If regex_error is thrown, *this remains unchanged\&. 
.RE
.PP

.PP
Definizzle at line 565 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const _Ch_type *__p, std::size_t__len, flag_type__flags)\fC [inline]\fP"

.PP
Assigns a freshly smoked up regular expression ta a regex object from a C-style strang containin a regular expression pattern\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP A pointa ta a C-style strang containin a regular expression pattern\&. 
.br
\fI__len\fP Da length of tha regular expression pattern string\&. 
.br
\fI__flags\fP Syntax option flags\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if p do not contain a valid regular expression pattern interpreted accordin ta \fC__flags\fP\&. If regex_error is thrown, *this remains unchanged\&. 
.RE
.PP

.PP
Definizzle at line 582 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _Ch_typeraits , typename _Alloc > \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Alloc > &__s, flag_type__flags = \fCECMAScript\fP)\fC [inline]\fP"

.PP
Assigns a freshly smoked up regular expression ta a regex object from a strang containin a regular expression pattern\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP A strang containin a regular expression pattern\&. 
.br
\fI__flags\fP Syntax option flags\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if __s do not contain a valid regular expression pattern interpreted accordin ta \fC__flags\fP\&. If regex_error is thrown, *this remains unchanged\&. 
.RE
.PP

.PP
Definizzle at line 598 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::swap()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _InputIterator > \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (_InputIterator__first, _InputIterator__last, flag_type__flags = \fCECMAScript\fP)\fC [inline]\fP"

.PP
Assigns a freshly smoked up regular expression ta a regex object\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Da start of a range containin a valid regular expression\&. 
.br
\fI__last\fP Da end of a range containin a valid regular expression\&. 
.br
\fI__flags\fP Syntax option flags\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if p do not contain a valid regular expression pattern interpreted accordin ta \fC__flags\fP\&. If regex_error is thrown, tha object remains unchanged\&. 
.RE
.PP

.PP
Definizzle at line 621 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (\fBinitializer_list\fP< _Ch_type >__l, flag_type__flags = \fCECMAScript\fP)\fC [inline]\fP"

.PP
Assigns a freshly smoked up regular expression ta a regex object\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP An initializer list representin a regular expression\&. 
.br
\fI__flags\fP Syntax option flags\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIregex_error\fP if \fC__l\fP do not contain a valid regular expression pattern interpreted accordin ta \fC__flags\fP\&. If regex_error is thrown, tha object remains unchanged\&. 
.RE
.PP

.PP
Definizzle at line 637 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> flag_type \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::flags () const\fC [inline]\fP"

.PP
Gets tha flags used ta construct tha regular expression or up in tha last call ta assign()\&. 
.PP
Definizzle at line 654 of file regex\&.h\&.
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::operator=()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> locale_type \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::getloc () const\fC [inline]\fP"

.PP
Gets tha locale currently imbued up in tha regular expression object\&. 
.PP
Definizzle at line 672 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> locale_type \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::imbue (locale_type__loc)\fC [inline]\fP"

.PP
Imbues tha regular expression object wit tha given locale\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__loc\fP A locale\&. 
.RE
.PP

.PP
Definizzle at line 664 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> unsigned int \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::mark_count () const\fC [inline]\fP"

.PP
Gets tha number of marked subexpressions within tha regular expression\&. 
.PP
Definizzle at line 646 of file regex\&.h\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::operator= (const \fBbasic_regex\fP< _Ch_type, _Rx_traits > &__rhs)\fC [inline]\fP"

.PP
Assigns one regular expression ta another\&. 
.PP
Definizzle at line 492 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::operator= (\fBbasic_regex\fP< _Ch_type, _Rx_traits > &&__rhs)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Move-assigns one regular expression ta another\&. 
.PP
Definizzle at line 499 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::operator= (const _Ch_type *__p)\fC [inline]\fP"

.PP
Replaces a regular expression wit a freshly smoked up one constructed from a C-style null-terminated string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP A pointa ta tha start of a null-terminated C-style strang containin a regular expression\&. 
.RE
.PP

.PP
Definizzle at line 510 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign(), n' std::basic_regex< _Ch_type, _Rx_traits >::flags()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _Ch_typeraits , typename _Alloc > \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::operator= (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Alloc > &__s)\fC [inline]\fP"

.PP
Replaces a regular expression wit a freshly smoked up one constructed from a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP A pointa ta a strang containin a regular expression\&. 
.RE
.PP

.PP
Definizzle at line 521 of file regex\&.h\&.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign(), n' std::basic_regex< _Ch_type, _Rx_traits >::flags()\&.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> void \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::swap (\fBbasic_regex\fP< _Ch_type, _Rx_traits > &__rhs)\fC [inline]\fP"

.PP
Swaps tha contentz of two regular expression objects\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__rhs\fP Another regular expression object\&. 
.RE
.PP

.PP
Definizzle at line 682 of file regex\&.h\&.
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign(), n' std::swap()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
