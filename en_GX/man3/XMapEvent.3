.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
.TH XMapEvent 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XMapEvent, XMappingEvent \- MapNotify n' MappingNotify event structures
.SH STRUCTURES
Da structure for
.ZN MapNotify
events gotz nuff:
.LP
.Ds 0
typedef struct {
        int type;       /\&* MapNotify */
        unsigned long serial;   /\&* # of last request processed by server */
        Bool send_event;        /\&* legit if dis came from a SendEvent request */
        Display *display;       /\&* Display tha event was read from */
        Window event;
        Window window;
        Bool override_redirect; /\&* boolean, is override set... */
} XMapEvent;
.De
.LP
When you receive dis event,
the structure thugz is set as bigs up.
.LP
Da type member is set ta tha event type constant name dat uniquely identifies
it.
For example, when tha X server reports a
.ZN GraphicsExpose
event ta a cold-ass lil client application, it sendz an
.ZN XGraphicsExposeEvent
structure wit tha type member set to
.ZN GraphicsExpose .
Da display member is set ta a pointa ta tha display tha event was read on.
Da send_event member is set to
.ZN True
if tha event came from a
.ZN SendEvent
protocol request.
Da serial member is set from tha serial number reported up in tha protocol
but expanded from tha 16-bit least-significant bits ta a gangbangin' full 32-bit value.
Da window member is set ta tha window dat is most useful ta toolkit
dispatchers.
.LP
Da event member is set either ta tha window dat was mapped or ta its parent,
dependin on whether
.ZN StructureNotify
or
.ZN SubstructureNotify
was selected.
Da window member is set ta tha window dat was mapped.
Da override_redirect member is set ta tha override-redirect attribute
of tha window.
Window manager clients normally should ignore dis window 
if tha override-redirect attribute is
.ZN True ,
because these events probably is generated from pop-ups,
which override structure control.
.LP
Da structure for
.ZN MappingNotify
events is:
.LP
.Ds 0
typedef struct {
        int type;       /\&* MappingNotify */
        unsigned long serial;   /\&* # of last request processed by server */
        Bool send_event;        /\&* legit if dis came from a SendEvent request */
        Display *display;       /\&* Display tha event was read from */
        Window window;  /\&* unused */
        int request;    /\&* one of MappingModifier, MappingKeyboard,
                   MappingPointa */
        int first_keycode;      /\&* first keycode */
        int count;      /\&* defines range of chizzle w. first_keycode*/
} XMappingEvent;
.De
.LP
When you receive dis event,
the structure thugz is set as bigs up.
.LP
Da type member is set ta tha event type constant name dat uniquely identifies
it.
For example, when tha X server reports a
.ZN GraphicsExpose
event ta a cold-ass lil client application, it sendz an
.ZN XGraphicsExposeEvent
structure wit tha type member set to
.ZN GraphicsExpose .
Da display member is set ta a pointa ta tha display tha event was read on.
Da send_event member is set to
.ZN True
if tha event came from a
.ZN SendEvent
protocol request.
Da serial member is set from tha serial number reported up in tha protocol
but expanded from tha 16-bit least-significant bits ta a gangbangin' full 32-bit value.
Da window member is set ta tha window dat is most useful ta toolkit
dispatchers.
.LP
Da request member is set ta indicate tha kind of mappin chizzle dat occurred
and can be
.ZN MappingModifier ,
.ZN MappingKeyboard ,
.ZN MappingPointa .
If it is
.ZN MappingModifier ,
the modifier mappin was chizzled.
If it is
.ZN MappingKeyboard ,
the keyboard mappin was chizzled.
If it is
.ZN MappingPointa ,
the pointa button mappin was chizzled. Y'all KNOW dat shit, muthafucka! 
Da first_keycode n' count thugz is set only 
if tha request member was set to
.ZN MappingKeyboard .
Da number up in first_keycode represents tha straight-up original gangsta number up in tha range 
of tha altered mapping, 
and count represents tha number of keycodes altered.
.SH "SEE ALSO"
XAnyEvent(3),
XButtonEvent(3),
XCreateWindowEvent(3),
XCirculateEvent(3),
XCirculateRequestEvent(3),
XColormapEvent(3),
XConfigureEvent(3),
XConfigureRequestEvent(3),
XCrossingEvent(3),
XDestroyWindowEvent(3),
XErrorEvent(3),
XExposeEvent(3),
XFocusChangeEvent(3),
XGraphicsExposeEvent(3),
XGravityEvent(3),
XKeymapEvent(3),
XMapRequestEvent(3),
XPropertyEvent(3),
XReparentEvent(3),
XResizeRequestEvent(3),
XSelectionClearEvent(3),
XSelectionEvent(3),
XSelectionRequestEvent(3),
XUnmapEvent(3),
XVisibilityEvent(3)
.br
\fI\*(xL\fP
