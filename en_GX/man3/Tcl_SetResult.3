'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_SetResult 3 8.0 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_SetObjResult, Tcl_GetObjResult, Tcl_SetResult, Tcl_GetStringResult, Tcl_AppendResult, Tcl_AppendResultVA, Tcl_AppendElement, Tcl_ResetResult, Tcl_FreeResult \- manipulate Tcl result
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
\fBTcl_SetObjResult\fR(\fIinterp, objPtr\fR)
.sp
Tcl_Obj *
\fBTcl_GetObjResult\fR(\fIinterp\fR)
.sp
\fBTcl_SetResult\fR(\fIinterp, result, freeProc\fR)
.sp
const char *
\fBTcl_GetStringResult\fR(\fIinterp\fR)
.sp
\fBTcl_AppendResult\fR(\fIinterp, result, result, ... , \fB(char *) NULL\fR)
.sp
\fBTcl_AppendResultVA\fR(\fIinterp, argList\fR)
.sp
\fBTcl_AppendElement\fR(\fIinterp, element\fR)
.sp
\fBTcl_ResetResult\fR(\fIinterp\fR)
.sp
\fBTcl_FreeResult\fR(\fIinterp\fR)
.SH ARGUMENTS
.AS Tcl_FreeProc freeProc out
.AP Tcl_Interp *interp out
Interpreta whose result is ta be modified or read.
.AP Tcl_Obj *objPtr in
Object value ta become result fo' \fIinterp\fR.
.AP char *result in
Strin value ta become result fo' \fIinterp\fR or ta be
appended ta tha existin result.
.AP char *element in
Strin value ta append as a list element
to tha existin result of \fIinterp\fR.
.AP Tcl_FreeProc *freeProc in
Address of procedure ta booty-call ta release storage at
\fIresult\fR, or \fBTCL_STATIC\fR, \fBTCL_DYNAMIC\fR, or
\fBTCL_VOLATILE\fR.
.AP va_list argList in
An argument list which must done been initialized using
\fBva_start\fR, n' cleared rockin \fBva_end\fR.
.BE
.SH DESCRIPTION
.PP
Da procedures busted lyrics bout here is utilitizzles fo' manipulatin the
result value up in a Tcl interpreter.
Da interpreta result may be either a Tcl object or a string.
For example, \fBTcl_SetObjResult\fR n' \fBTcl_SetResult\fR
set tha interpreta result to, respectively, a object n' a string.
Similarly, \fBTcl_GetObjResult\fR n' \fBTcl_GetStringResult\fR
return tha interpreta result as a object n' as a string.
Da procedures always keep tha strang n' object forms
of tha interpreta result consistent.
For example, if \fBTcl_SetObjResult\fR is called ta set
the result ta a object,
then \fBTcl_GetStringResult\fR is called,
it will return tha objectz strang value.
.PP
\fBTcl_SetObjResult\fR
arranges fo' \fIobjPtr\fR ta be tha result fo' \fIinterp\fR,
replacin any existin result.
Da result is left pointin ta tha object
referenced by \fIobjPtr\fR.
\fIobjPtr\fRz reference count is incremented
since there is now a freshly smoked up reference ta it from \fIinterp\fR.
Da reference count fo' any oldschool result object
is decremented n' tha oldschool result object is freed if no
references ta it remain.
.PP
\fBTcl_GetObjResult\fR returns tha result fo' \fIinterp\fR as a object.
Da objectz reference count aint incremented;
if tha calla need ta retain a long-term pointa ta tha object
they should use \fBTcl_IncrRefCount\fR ta increment its reference count
in order ta keep it from bein freed too early or accidentally chizzled.
.PP
\fBTcl_SetResult\fR
arranges fo' \fIresult\fR ta be tha result fo' tha current Tcl
command up in \fIinterp\fR, replacin any existin result.
Da \fIfreeProc\fR argument specifies how tha fuck ta manage tha storage
for tha \fIresult\fR argument;
it is discussed up in tha section
\fBTHE TCL_FREEPROC ARGUMENT TO TCL_SETRESULT\fR below.
If \fIresult\fR is \fBNULL\fR, then \fIfreeProc\fR is ignored
and \fBTcl_SetResult\fR
re-initializes \fIinterp\fRz result ta point ta a empty string.
.PP
\fBTcl_GetStringResult\fR returns tha result fo' \fIinterp\fR as a string.
If tha result was set ta a object by a \fBTcl_SetObjResult\fR call,
the object form is ghon be converted ta a strang n' returned.
If tha objectz strang representation gotz nuff null bytes,
this conversion will lose shiznit.
For dis reason, programmers is encouraged to
write they code ta use tha freshly smoked up object API procedures
and ta booty-call \fBTcl_GetObjResult\fR instead.
.PP
\fBTcl_ResetResult\fR clears tha result fo' \fIinterp\fR
and leaves tha result up in its aiiight empty initialized state.
If tha result be a object,
its reference count is decremented n' tha result is left
pointin ta a unshared object representin a empty string.
If tha result be a thugged-out dynamically allocated string, its memory is free*d
and tha result is left as a empty string.
\fBTcl_ResetResult\fR also clears tha error state managed by
\fBTcl_AddErrorInfo\fR, \fBTcl_AddObjErrorInfo\fR,
and \fBTcl_SetErrorCode\fR.
.PP
\fBTcl_AppendResult\fR make it easy as fuck  ta build up Tcl thangs up in dis biatch up in pieces.
It takes each of its \fIresult\fR arguments n' appendz dem up in order
to tha current result associated wit \fIinterp\fR.
If tha result is up in its initialized empty state (e.g. a cold-ass lil command procedure
was just invoked or \fBTcl_ResetResult\fR was just called),
then \fBTcl_AppendResult\fR sets tha result ta tha concatenation of
its \fIresult\fR arguments.
\fBTcl_AppendResult\fR may be called repeatedly as additionizzle pieces
of tha result is produced.
\fBTcl_AppendResult\fR takes care of all the
storage pimpment thangs associated wit managin \fIinterp\fR's
result, like fuckin allocatin a larger result area if necessary.
It also manages conversion ta n' from tha \fIresult\fR field of the
\fIinterp\fR so as ta handle backward-compatibilitizzle wit old-style
extensions.
Any number of \fIresult\fR arguments may be passed up in a single
call; tha last argument up in tha list must be a NULL pointer.
.PP
\fBTcl_AppendResultVA\fR is tha same ol' dirty as \fBTcl_AppendResult\fR except that
instead of takin a variable number of arguments it takes a argument list.
.SH "OLD STRING PROCEDURES"
.PP
Use of tha followin procedures (is deprecated
since they manipulate tha Tcl result as a string.
Procedures like fuckin \fBTcl_SetObjResult\fR
that manipulate tha result as a object
can be hella mo' efficient.
.PP
\fBTcl_AppendElement\fR is similar ta \fBTcl_AppendResult\fR in
that it allows thangs up in dis biatch ta be built up in pieces.
But fuck dat shiznit yo, tha word on tha street is dat \fBTcl_AppendElement\fR takes only a single \fIelement\fR
argument n' it appendz dat argument ta tha current result
as a proper Tcl list element.
\fBTcl_AppendElement\fR addz backslashes or braces if necessary
to ensure dat \fIinterp\fRz result can be parsed as a list n' that
\fIelement\fR is ghon be extracted as a single element.
Under aiiight conditions, \fBTcl_AppendElement\fR will add a space
characta ta \fIinterp\fRz result just before addin tha new
list element, so dat tha list elements up in tha result is properly
separated.
However if tha freshly smoked up list element is tha straight-up original gangsta up in a list or sub-list
(i.e. \fIinterp\fRz current result is empty, or consistz of the
single character
.QW { ,
or endz up in tha characters
.QW " {" )
then no space be added.
.PP
\fBTcl_FreeResult\fR performs part of tha work
of \fBTcl_ResetResult\fR.
It frees up tha memory associated wit \fIinterp\fRz result.
It also sets \fIinterp->freeProc\fR ta zero yo, but do not
change \fIinterp->result\fR or clear error state.
\fBTcl_FreeResult\fR is most commonly used when a procedure
is bout ta replace one result value wit another.
.SH "DIRECT ACCESS TO INTERP->RESULT IS DEPRECATED"
.PP
It used ta be legal fo' programs to
directly read n' write \fIinterp->result\fR
to manipulate tha interpreta result.
Direct access ta \fIinterp->result\fR is now straight fuckin deprecated
because it can make tha resultz strang n' object forms inconsistent.
Programs should always read tha result
usin tha procedures \fBTcl_GetObjResult\fR or \fBTcl_GetStringResult\fR,
and write tha result rockin \fBTcl_SetObjResult\fR or \fBTcl_SetResult\fR.
.SH "THE TCL_FREEPROC ARGUMENT TO TCL_SETRESULT"
.PP
\fBTcl_SetResult\fRz \fIfreeProc\fR argument specifies how tha fuck 
the Tcl system is ta manage tha storage fo' tha \fIresult\fR argument.
If \fBTcl_SetResult\fR or \fBTcl_SetObjResult\fR is called
at a time when \fIinterp\fR holdz a strang result,
they do whatever is necessary ta dispose of tha oldschool strang result
(see tha \fBTcl_Interp\fR manual entry fo' details on this).
.PP
If \fIfreeProc\fR is \fBTCL_STATIC\fR it means dat \fIresult\fR
refers ta a area of static storage dat is guaranteed not ta be
modified until at least tha next call ta \fBTcl_Eval\fR.
If \fIfreeProc\fR
is \fBTCL_DYNAMIC\fR it means dat \fIresult\fR was allocated wit a cold-ass lil call
to \fBTcl_Alloc\fR n' is now tha property of tha Tcl system.
\fBTcl_SetResult\fR will arrange fo' tha stringz storage ta be
released by callin \fBTcl_Free\fR when it is no longer needed.
If \fIfreeProc\fR is \fBTCL_VOLATILE\fR it means dat \fIresult\fR
points ta a area of memory dat is likely ta be overwritten when
\fBTcl_SetResult\fR returns (e.g. it points ta suttin' up in a stack frame).
In dis case \fBTcl_SetResult\fR will cook up a cold-ass lil copy of tha strang in
dynamically allocated storage n' arrange fo' tha copy ta be the
result fo' tha current Tcl command.
.PP
If \fIfreeProc\fR aint one of tha joints \fBTCL_STATIC\fR,
\fBTCL_DYNAMIC\fR, n' \fBTCL_VOLATILE\fR, then it is tha address
of a procedure dat Tcl should call ta free tha string.
This allows applications ta use non-standard storage allocators.
When Tcl no longer needz tha storage fo' tha string, it will
call \fIfreeProc\fR. \fIFreeProc\fR should have arguments and
result dat match tha type \fBTcl_FreeProc\fR:
.CS
typedef void Tcl_FreeProc(char *\fIblockPtr\fR);
.CE
When \fIfreeProc\fR is called, its \fIblockPtr\fR is ghon be set to
the value of \fIresult\fR passed ta \fBTcl_SetResult\fR.
.SH "SEE ALSO"
Tcl_AddErrorInfo, Tcl_CreateObjCommand, Tcl_SetErrorCode, Tcl_Interp
.SH KEYWORDS
append, command, element, list, object, result, return value, interpreter
