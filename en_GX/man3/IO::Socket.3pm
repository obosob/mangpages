.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket 3pm"
.TH IO::Socket 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket \- Object intercourse ta socket communications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket\*(C'\fR serves up a object intercourse ta bustin n' rockin sockets, n' you can put dat on yo' toast. It
is built upon tha IO::Handle intercourse n' inherits all tha methodz defined
by IO::Handle.
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR only defines methodz fo' dem operations which is common ta all
typez of socket. Operations which is specified ta a socket up in a particular 
domain have methodz defined up in sub classez of \f(CW\*(C`IO::Socket\*(C'\fR
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR will export all functions (and constants) defined by Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates a \f(CW\*(C`IO::Socket\*(C'\fR, which be a reference ta a
newly pimped symbol (see tha \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments is up in key-value pairs.
\&\f(CW\*(C`new\*(C'\fR only looks fo' one key \f(CW\*(C`Domain\*(C'\fR which  drops some lyrics ta freshly smoked up which domain
the socket is ghon be in. I aint talkin' bout chicken n' gravy biatch fo' realz. All other arguments is ghon be passed ta the
configuration method of tha package fo' dat domain, See below.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
Az of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not tha case wit earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SH "METHODS"
.IX Header "METHODS"
See perlfunc fo' complete descriptionz of each of tha following
supported \f(CW\*(C`IO::Socket\*(C'\fR methods, which is just front endz fo' the
correspondin built-in functions:
.PP
.Vb 10
\&    socket
\&    socketpair
\&    bind
\&    listen
\&    accept
\&    send
\&    recv
\&    peername (getpeername)
\&    sockname (getsockname)
\&    shutdown
.Ve
.PP
Some methodz take slightly different arguments ta dem defined up in perlfunc
in attempt ta make tha intercourse mo' flexible. These are
.IP "accept([\s-1PKG\s0])" 4
.IX Item "accept([PKG])"
perform tha system call \f(CW\*(C`accept\*(C'\fR on tha socket n' return a new
object. Da freshly smoked up object is ghon be pimped up in tha same class as tha listen
socket, unless \f(CW\*(C`PKG\*(C'\fR is specified. Y'all KNOW dat shit, muthafucka! This object can be used to
communicate wit tha client dat was tryin ta connect.
.Sp
In a scalar context tha freshly smoked up socket is returned, or undef upon
failure. In a list context a two-element array is returned containing
the freshly smoked up socket n' tha peer address; tha list is ghon be empty upon
failure.
.Sp
Da timeout up in tha [\s-1PKG\s0] can be specified as zero ta effect a \*(L"poll\*(R",
but you shouldn't do dat cuz a freshly smoked up IO::Select object will be
created behind tha scenes just ta do tha single poll.  This is
horrendously inefficient.  Use rather legit \fIselect()\fR wit a zero
timeout on tha handle, or non-blockin \s-1IO.\s0
.IP "socketpair(\s-1DOMAIN, TYPE, PROTOCOL\s0)" 4
.IX Item "socketpair(DOMAIN, TYPE, PROTOCOL)"
Call \f(CW\*(C`socketpair\*(C'\fR n' return a list of two sockets pimped, or an
empty list on failure.
.PP
Additionizzle methodz dat is provided are:
.IP "atmark" 4
.IX Item "atmark"
True if tha socket is currently positioned all up in tha urgent data mark,
false otherwise.
.Sp
.Vb 1
\&    use IO::Socket;
\&
\&    mah $sock = IO::Socket::INET\->new(\*(Aqsome_server\*(Aq);
\&    $sock\->read($data, 1024) until $sock\->atmark;
.Ve
.Sp
Note: dis be a reasonably freshly smoked up addizzle ta tha crew of socket
functions, so all systems may not support dis yet.  If it is
unsupported by tha system, a attempt ta use dis method will
abort tha program.
.Sp
Da \fIatmark()\fR functionalitizzle be also exportable as \fIsockatmark()\fR function:
.Sp
.Vb 1
\&        use IO::Socket \*(Aqsockatmark\*(Aq;
.Ve
.Sp
This allows fo' a mo' traditionizzle use of \fIsockatmark()\fR as a procedural
socket function. I aint talkin' bout chicken n' gravy biatch.  If yo' system do not support \fIsockatmark()\fR, the
\&\f(CW\*(C`use\*(C'\fR declaration will fail at compile time.
.IP "connected" 4
.IX Item "connected"
If tha socket is up in a cold-ass lil connected state tha peer address is returned.
If tha socket aint up in a cold-ass lil connected state then undef is ghon be returned.
.IP "protocol" 4
.IX Item "protocol"
Returns tha numerical number fo' tha protocol bein used on tha socket, if
known. I aint talkin' bout chicken n' gravy biatch. If tha protocol is unknown, as wit a \s-1AF_UNIX\s0 socket, zero
is returned.
.IP "sockdomain" 4
.IX Item "sockdomain"
Returns tha numerical number fo' tha socket domain type. For example, for
an \s-1AF_INET\s0 socket tha value of &AF_INET is ghon be returned.
.IP "sockopt(\s-1OPT\s0 [, \s-1VAL\s0])" 4
.IX Item "sockopt(OPT [, VAL])"
Unified method ta both set n' git options up in tha \s-1SOL_SOCKET\s0 level. If called
with one argument then getsockopt is called, otherwise setsockopt is called.
.IP "getsockopt(\s-1LEVEL, OPT\s0)" 4
.IX Item "getsockopt(LEVEL, OPT)"
Git option associated wit tha socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "setsockopt(\s-1LEVEL, OPT, VAL\s0)" 4
.IX Item "setsockopt(LEVEL, OPT, VAL)"
Set option associated wit tha socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "socktype" 4
.IX Item "socktype"
Returns tha numerical number fo' tha socket type. For example, for
a \s-1SOCK_STREAM\s0 socket tha value of &SOCK_STREAM is ghon be returned.
.IP "timeout([\s-1VAL\s0])" 4
.IX Item "timeout([VAL])"
Set or git tha timeout value (in seconds) associated wit dis socket.
If called without any arguments then tha current settin is returned. Y'all KNOW dat shit, muthafucka! If
called wit a argument tha current settin is chizzled n' tha previous
value returned.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
On some systems, fo' a IO::Socket object pimped wit \fInew_from_fd()\fR,
or pimped wit \fIaccept()\fR from such a object, tha \fIprotocol()\fR,
\&\fIsockdomain()\fR n' \fIsocktype()\fR methodz may return undef.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Handle, IO::Socket::INET, IO::Socket::UNIX
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Shiiit, dis aint no joke.  \fIatmark()\fR by Lincoln Stein. I aint talkin' bout chicken n' gravy biatch.  Currently maintained by the
Perl Porters.  Please report all bugs ta <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com> fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.PP
Da \fIatmark()\fR implementation: Copyright 2001, Lincoln Stein <lstein@cshl.org>.
This module is distributed under tha same terms as Perl itself.
Feel free ta use, modify n' redistribute it as long as you retain
the erect attribution.
