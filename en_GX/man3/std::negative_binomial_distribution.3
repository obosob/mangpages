" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::negative_binomial_distribution< _IntType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparam_type\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _IntType \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBnegative_binomial_distribution\fP (_IntType __k=1, double __p=0\&.5)"
.br
.ti -1c
.RI "\fBnegative_binomial_distribution\fP (const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > void \fB__generate\fP (\fBresult_type\fP *__f, \fBresult_type\fP *__t, _UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > void \fB__generate\fP (\fBresult_type\fP *__f, \fBresult_type\fP *__t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "_IntType \fBk\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmax\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmin\fP () const "
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBnegative_binomial_distribution\fP
.br
< _IntType >::\fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBnegative_binomial_distribution\fP
.br
< _IntType >::\fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "double \fBp\fP () const "
.br
.ti -1c
.RI "\fBparam_type\fP \fBparam\fP () const "
.br
.ti -1c
.RI "void \fBparam\fP (const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, 
.br
_Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::negative_binomial_distribution\fP< _IntType1 > &__x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBnegative_binomial_distribution\fP &__d1, const \fBnegative_binomial_distribution\fP &__d2)"
.br
.ti -1c
.RI "template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::negative_binomial_distribution\fP< _IntType1 > &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _IntType = int>class std::negative_binomial_distribution< _IntType >"
A negative_binomial_distribution random number distribution\&. 

Da formula fo' tha wack binomial probabilitizzle mass function is $p(i) = \binom{n}{i} p^i (1 - p)^{t - i}$ where $t$ n' $p$ is tha parametaz of tha distribution\&. 
.PP
Definizzle at line 4208 of file random\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _IntType = int> typedef _IntType \fBstd::negative_binomial_distribution\fP< _IntType >::\fBresult_type\fP"
Da type of tha range of tha distribution\&. 
.PP
Definizzle at line 4211 of file random\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _IntType = int> _IntType \fBstd::negative_binomial_distribution\fP< _IntType >::k () const\fC [inline]\fP"

.PP
Return tha $k$ parameta of tha distribution\&. 
.PP
Definizzle at line 4266 of file random\&.h\&.
.SS "template<typename _IntType = int> \fBresult_type\fP \fBstd::negative_binomial_distribution\fP< _IntType >::max () const\fC [inline]\fP"

.PP
Returns tha least upper bound value of tha distribution\&. 
.PP
Definizzle at line 4302 of file random\&.h\&.
.PP
References std::numeric_limits< _Tp >::max()\&.
.SS "template<typename _IntType = int> \fBresult_type\fP \fBstd::negative_binomial_distribution\fP< _IntType >::min () const\fC [inline]\fP"

.PP
Returns tha top billin lower bound value of tha distribution\&. 
.PP
Definizzle at line 4295 of file random\&.h\&.
.SS "template<typename _IntType = int> template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBstd::negative_binomial_distribution\fP< _IntType >::operator() (_UniformRandomNumberGenerator &__urng)"

.PP
Generatin functions\&. 
.SS "template<typename _IntType = int> double \fBstd::negative_binomial_distribution\fP< _IntType >::p () const\fC [inline]\fP"

.PP
Return tha $p$ parameta of tha distribution\&. 
.PP
Definizzle at line 4273 of file random\&.h\&.
.SS "template<typename _IntType = int> \fBparam_type\fP \fBstd::negative_binomial_distribution\fP< _IntType >::param () const\fC [inline]\fP"

.PP
Returns tha parameta set of tha distribution\&. 
.PP
Definizzle at line 4280 of file random\&.h\&.
.SS "template<typename _IntType = int> void \fBstd::negative_binomial_distribution\fP< _IntType >::param (const \fBparam_type\fP &__param)\fC [inline]\fP"

.PP
Sets tha parameta set of tha distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__param\fP Da freshly smoked up parameta set of tha distribution\&. 
.RE
.PP

.PP
Definizzle at line 4288 of file random\&.h\&.
.SS "template<typename _IntType = int> void \fBstd::negative_binomial_distribution\fP< _IntType >::reset ()\fC [inline]\fP"

.PP
Resets tha distribution state\&. 
.PP
Definizzle at line 4259 of file random\&.h\&.
.PP
References std::gamma_distribution< _RealType >::reset()\&.
.SH "Playas And Related Function Documentation"
.PP 
.SS "template<typename _IntType = int> template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::negative_binomial_distribution\fP< _IntType1 > &__x)\fC [friend]\fP"

.PP
Inserts a negative_binomial_distribution random number distribution \fC__x\fP tha fuck into tha output stream \fC__os\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__os\fP An output stream\&. 
.br
\fI__x\fP A negative_binomial_distribution random number distribution\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da output stream wit tha state of \fC__x\fP banged or up in a error state\&. 
.RE
.PP

.SS "template<typename _IntType = int> bool operator== (const \fBnegative_binomial_distribution\fP< _IntType > &__d1, const \fBnegative_binomial_distribution\fP< _IntType > &__d2)\fC [friend]\fP"

.PP
Return legit if two wack binomial distributions have tha same parametas n' tha sequences dat would be generated is equal\&. 
.PP
Definizzle at line 4351 of file random\&.h\&.
.SS "template<typename _IntType = int> template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::negative_binomial_distribution\fP< _IntType1 > &__x)\fC [friend]\fP"

.PP
Extracts a negative_binomial_distribution random number distribution \fC__x\fP from tha input stream \fC__is\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__is\fP An input stream\&. 
.br
\fI__x\fP A negative_binomial_distribution random number generator engine\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da input stream wit \fC__x\fP extracted or up in a error state\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
