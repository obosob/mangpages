.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BIO_find_type 3"
.TH BIO_find_type 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
BIO_find_type, BIO_next \- BIO chain traversal
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/bio.h>
\&
\& BIO *  BIO_find_type(BIO *b,int bio_type);
\& BIO *  BIO_next(BIO *b);
\&
\& #define BIO_method_type(b)             ((b)\->method\->type)
\&
\& #define BIO_TYPE_NONE          0
\& #define BIO_TYPE_MEM           (1|0x0400)
\& #define BIO_TYPE_FILE          (2|0x0400)
\&
\& #define BIO_TYPE_FD            (4|0x0400|0x0100)
\& #define BIO_TYPE_SOCKET                (5|0x0400|0x0100)
\& #define BIO_TYPE_NULL          (6|0x0400)
\& #define BIO_TYPE_SSL           (7|0x0200)
\& #define BIO_TYPE_MD            (8|0x0200)
\& #define BIO_TYPE_BUFFER                (9|0x0200)
\& #define BIO_TYPE_CIPHER                (10|0x0200)
\& #define BIO_TYPE_BASE64                (11|0x0200)
\& #define BIO_TYPE_CONNECT       (12|0x0400|0x0100)
\& #define BIO_TYPE_ACCEPT                (13|0x0400|0x0100)
\& #define BIO_TYPE_PROXY_CLIENT  (14|0x0200)
\& #define BIO_TYPE_PROXY_SERVER  (15|0x0200)
\& #define BIO_TYPE_NBIO_TEST     (16|0x0200)
\& #define BIO_TYPE_NULL_FILTER   (17|0x0200)
\& #define BIO_TYPE_BER           (18|0x0200)
\& #define BIO_TYPE_BIO           (19|0x0400)
\&
\& #define BIO_TYPE_DESCRIPTOR    0x0100
\& #define BIO_TYPE_FILTER                0x0200
\& #define BIO_TYPE_SOURCE_SINK   0x0400
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fIBIO_find_type()\fR searches fo' a \s-1BIO\s0 of a given type up in a cold-ass lil chain, starting
at \s-1BIO \s0\fBb\fR. If \fBtype\fR be a specific type (like fuckin \s-1BIO_TYPE_MEM\s0) then a search
is made fo' a \s-1BIO\s0 of dat type. If \fBtype\fR be a general type (such as
\&\fB\s-1BIO_TYPE_SOURCE_SINK\s0\fR) then tha next matchin \s-1BIO\s0 of tha given general type is
searched for. Shiiit, dis aint no joke. \fIBIO_find_type()\fR returns tha next matchin \s-1BIO\s0 or \s-1NULL\s0 if none is
found.
.PP
Note: not all tha \fBBIO_TYPE_*\fR types above have correspondin \s-1BIO\s0 implementations.
.PP
\&\fIBIO_next()\fR returns tha next \s-1BIO\s0 up in a cold-ass lil chain. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it can be used ta traverse all BIOs
in a cold-ass lil chain or used up in conjunction wit \fIBIO_find_type()\fR ta find all BIOz of a
certain type.
.PP
\&\fIBIO_method_type()\fR returns tha type of a \s-1BIO.\s0
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIBIO_find_type()\fR returns a matchin \s-1BIO\s0 or \s-1NULL\s0 fo' no match.
.PP
\&\fIBIO_next()\fR returns tha next \s-1BIO\s0 up in a cold-ass lil chain.
.PP
\&\fIBIO_method_type()\fR returns tha type of tha \s-1BIO \s0\fBb\fR.
.SH "NOTES"
.IX Header "NOTES"
\&\fIBIO_next()\fR was added ta OpenSSL 0.9.6 ta provide a 'clean' way ta traverse a \s-1BIO\s0
chain or find multiple matches rockin \fIBIO_find_type()\fR. Previous versions had to
use:
.PP
.Vb 1
\& next = bio\->next_bio;
.Ve
.SH "BUGS"
.IX Header "BUGS"
\&\fIBIO_find_type()\fR up in OpenSSL 0.9.5a n' earlier could not be safely passed a
\&\s-1NULL\s0 pointa fo' tha \fBb\fR argument.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Traverse a cold-ass lil chain lookin fo' digest BIOs:
.PP
.Vb 2
\& BIO *btmp;
\& btmp = in_bio; /* in_bio is chain ta search all up in */
\&
\& do {
\&        btmp = BIO_find_type(btmp, BIO_TYPE_MD);
\&        if(btmp == NULL) break; /* Not found */
\&        /* btmp be a gangbangin' finger-lickin' digest BIO, do suttin' wit it ...*/
\&        ...
\&
\&        btmp = BIO_next(btmp);
\& } while(btmp);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1TBA\s0
