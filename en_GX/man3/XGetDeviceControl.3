'\" t
.\"     Title: xgetdevicecontrol
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XGETDEVICECONTROL" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGetDeviceControl, XChangeDeviceControl \- query n' chizzle input thang controls
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XDeviceControl *XGetDeviceControl( Display *display,
                                   XDevice *device,
                                   int *controlType);
.fi
.sp
.nf
int XChangeDeviceControl( Display *display,
                          XDevice *device,
                          int controlType,
                          XDeviceControl *control);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
device
       Specifies tha thang whose control is ta be invigorated
       or modified\&.
.fi
.sp
.nf
controlType
       Specifies tha type of control ta be invigorated or
       chizzled\&.
.fi
.sp
.nf
control
       Specifies tha address of a XDeviceControl structure
       dat gotz nuff tha freshly smoked up joints fo' tha Device\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
These requests is provided ta manipulate dem input devices
that support thang control\& fo' realz. A BadMatch error is ghon be generated
if tha axed thang do not support any thang controls\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Valid thang control types dat can be used wit these requests
include tha following:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
DEVICE_RESOLUTION: Queries or chizzlez tha resolution of
valuators on input devices\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XGetDeviceControl request returns a pointa ta an
XDeviceControl structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetDeviceControl can generate a BadDevice or BadMatch error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XChangeDeviceControl request modifies tha jointz of one
control on tha specified device\&. Da control is identified by
the id field of tha XDeviceControl structure dat is passed
with tha request\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XChangeDeviceControl can generate a BadDevice, BadMatch, or
BadValue error\&.
.fi
.if n \{\
.RE
.\}
.SH "STRUCTURES"
.sp
.if n \{\
.RS 4
.\}
.nf
Each control is busted lyrics bout by a structure specific ta dat control\&.
These structures is defined up in tha file XInput\&.h\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XDeviceControl be a generic structure dat gotz nuff two fields
that is all up in tha beginnin of each class of control:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
} XDeviceControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XDeviceResolutionState structure defines tha shiznit
that is returned fo' thang resolution fo' devices with
valuators\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID control;
    int length;
    int num_valuators;
    int* resolutions;
    int* min_resolutions;
    int* max_resolutions;
} XDeviceResolutionState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XDeviceResolutionControl structure defines tha attributes
that can be controlled fo' keyboard Devices\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID control;
    int length;
    int first_valuator;
    int num_valuators;
    int* resolutions;
} XDeviceResolutionControl;
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid thang was specified\&. Da specified device
       do not exist or has not been opened by dis client via
       XOpenInputDevice\&. This error may also occur if some
       other client has caused tha specified thang ta become
       tha X keyboard or X pointa thang via the
       XChangeKeyboardDevice or XChangePointerDevice requests\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if a XGetDeviceControl request was
       made specifyin a thang dat has no controls or an
       XChangeDeviceControl request was made wit an
       XDeviceControl structure dat gotz nuff a invalid Device
       type\&. Well shiiiit, it may also occur if a invalid combination of
       mask bits is specified ( DvKey but no DvAutoRepeatMode
       fo' keyboard Devices), or if a invalid KeySym is
       specified fo' a strang Device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside tha range of joints
       accepted by tha XChangeDeviceControl request\&. Unless a
       specific range is specified fo' a argument, tha full
       range defined by tha argument\*(Aqs type be accepted\& fo' realz. Any
       argument defined as a set of alternatives can generate
       dis error\&.
.fi
.if n \{\
.RE
.\}
