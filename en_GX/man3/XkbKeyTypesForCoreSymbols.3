'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbKeyTypesForCoreSymbols 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbKeyTypesForCoreSymbols \- Determine tha Xkb key types appropriate fo' tha 
symbols bound ta a key up in a cold-ass lil core keyboard mapping
.SH SYNOPSIS
.HP
.B int XkbKeyTypesForCoreSymbols
.BI "(\^XkbDescPtr " "xkb" "\^,"
.BI "int " "map_width" "\^,"
.BI "KeySym *" "core_syms" "\^,"
.BI "unsigned int " "protected" "\^,"
.BI "int *" "types_inout" "\^,"
.BI "KeySym *" "xkb_syms_rtrn" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- xkb
keyboard description up in which ta place symbols
.TP
.I \- map_width
width of core protocol keymap up in xkb_syms_rtrn
.TP
.I \- core_syms
core protocol format array of KeySyms
.TP
.I \- protected
explicit key types
.TP
.I \- types_inout
backfilled wit tha canonical types bound ta crews one n' two fo' tha key
.TP
.I \- xkb_syms_rtrn
backfilled wit symbols bound ta tha key up in tha Xkb mapping
.SH DESCRIPTION
.LP
.I XkbKeyTypesForCoreSymbols 
expandz tha symbols up in 
.I core_syms 
and types up in 
.I types_inout,
then chizzlez canonical key types (canonical key types is 
defined Da Canonical Key Types) fo' crews 1 n' 2 rockin tha rulez specified by 
the Xkb protocol n' places dem up in xkb_syms_rtrn, which is ghon be non-NULL.

.B Da Canonical Key Types

Xkb allows up ta XkbMaxKeyTypes (255) key types ta be defined yo, but requires at 
least XkbNumRequiredTypes (4) predefined types ta be up in a key map. These 
predefined key types is referred ta as tha canonical key types n' describe tha 
typez of keys available on most keyboards. Da definitions fo' tha canonical key 
types is held up in tha straight-up original gangsta XkbNumRequiredTypes entriez of tha 
.I types 
field of tha client map n' is indexed rockin tha followin constants:
.nf

    XkbOneLevelIndex
    XkbTwoLevelIndex
    XkbAlphabeticIndex
    XkbKeypadIndex
    
.fi
    
ONE_LEVEL

Da ONE_LEVEL key type raps bout crews dat have only one symbol. Da default 
ONE_LEVEL key type has no map entries n' do not pay attention ta any 
modifiers fo' realz. A symbolic representation of dis key type could be lookin like tha 
following:
.nf

    type "ONE_LEVEL" {
         modifiers = None;
         map[None]= Level1;
         level_name[Level1]= "Any";
    };
    
.fi    
Da description of tha ONE_LEVEL key type is stored up in tha 
types[XkbOneLevelIndex] entry of tha client key map.

TWO_LEVEL

Da TWO_LEVEL key type raps bout crews dat consist of two symbols but is 
neither alphabetic nor numeric keypad keys. Da default TWO_LEVEL type uses only 
the Shift modifier n' shit. Well shiiiit, it returns shift level two if Shift is set, n' level one if 
it aint fo' realz. A symbolic representation of dis key type could be lookin like tha 
following:
.nf

    type "TWO_LEVEL" {
        modifiers = Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };
    
.fi
    
Da description of tha TWO_LEVEL key type is stored up in tha 
types[XkbTwoLevelIndex] entry of tha client key map.

ALPHABETIC

Da ALPHABETIC key type raps bout crews consistin of two symbols: tha 
lowercase form of a symbol followed by tha uppercase form of tha same symbol. 
Da default ALPHABETIC type implements locale-sensitizzle "Shift cancels CapsLock" 
behavior rockin both tha Shift n' Lock modifiers as bigs up:

.IP \(bu 5
If Shift n' Lock is both set, tha default ALPHABETIC type yieldz level one.
.IP \(bu 5
If Shift ridin' solo is set, it yieldz level two.
.IP \(bu 5
If Lock ridin' solo is set, it yieldz level one yo, but preserves tha Lock modifier so 
Xlib notices n' applies tha appropriate capitalization rules. Da Xlib 
functions is locale-sensitizzle n' apply different capitalization rulez fo' 
different locales.
.IP \(bu 5
If neither Shift nor Lock is set, it yieldz level one.

A symbolic representation of dis key type could be lookin like tha following:
.nf

    type "ALPHABETIC" {
        modifiers = Shift+Lock;
        map[Shift]= Level2;
        preserve[Lock]= Lock;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    
.fi    
Da description of tha ALPHABETIC key type is stored up in tha 
types[XkbAlphabeticIndex] entry of tha client key map.

KEYPAD

Da KEYPAD key type raps bout crews dat consist of two symbols, at least one 
of which be a numeric keypad symbol. Da numeric keypad symbol be assumed ta 
reside at level two. Da default KEYPAD key type implements "Shift cancels 
NumLock" behavior rockin tha Shift modifier n' tha real modifier bound ta tha 
virtual modifier named "NumLock," known as tha NumLock modifier, as bigs up:

.IP \(bu 5
If Shift n' NumLock is both set, tha default KEYPAD type yieldz level one.
.IP \(bu 5
If Shift ridin' solo is set, it yieldz level two.
.IP \(bu 5
If NumLock ridin' solo is set, it yieldz level two.
.IP \(bu 5
If neither Shift nor NumLock is set, it yieldz level one.

A symbolic representation of dis key type could be lookin like tha following:
.nf

    type "KEYPAD" {
        modifiers = Shift+NumLock;
        map[None]= Level1;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        map[Shift+NumLock]= Level1;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    
.fi    
Da description of tha KEYPAD key type is stored up in tha types[XkbKeypadIndex] 
entry of tha client key map.

A core keymap be a two-dimensionizzle array of keysyms. Well shiiiit, it has 
.I map_width 
columns n' 
.I max_key_code 
rows. 
.I XkbKeyTypesForCoreSymbols 
takes a single row from a cold-ass lil core keymap, determines tha number of crews 
associated wit it, tha type of each group, n' tha symbols bound ta each group. 
Da return value is tha number of groups, 
.I types_inout 
has tha types fo' each group, n' 
.I xkb_syms_rtrn 
has tha symbols up in Xkb order (that is, crews is contiguous, regardless of 
size).

.I protected 
gotz nuff tha explicitly protected key types. There is one  explicit override 
control associated wit each of tha four possible crews fo' each Xkb key, 
ExplicitKeyType1 all up in ExplicitKeyType4; 
.I protected 
is a inclusive OR of these controls. 
.I map_width 
is tha width of tha core keymap n' aint dependent on any Xkb definitions.
.I types_inout 
is a array of four type indices. On input, 
.I types_inout 
gotz nuff tha indicez of any types already assigned ta tha key, up in case they is 
explicitly protected from chizzle.

Upon return, 
.I types_inout 
gotz nuff any automatically selected (that is, canonical) types plus any 
protected types. Canonical types is assigned ta all four crews if there be 
enough symbols ta do so. Da four entries up in 
.I types_inout 
correspond ta tha four crews fo' tha key up in question. I aint talkin' bout chicken n' gravy biatch. 
