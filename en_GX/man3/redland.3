.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "redland 3"
.TH redland 3 "redland 1.0.16" "28-Jun-2012" "Redland RDF Application Framework"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
redland \- Resource Description Framework (RDF) Library
.SH "VERSION"
.IX Header "VERSION"
\&\s-11.0.16\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <redland.h>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBredland\fR be a library providin support fo' the
Resource Description Framework (\s-1RDF\s0) freestyled up in \s-1ANSI\s0 C with
APIs up in nuff muthafuckin other languages.
.PP
This manual page lists most of tha redland hood \s-1API\s0 functions but
does not claim ta be a cold-ass lil complete summary of tha entire \s-1API\s0.  For the
complete \s-1API\s0 wit full detailz of tha function intercourse, peep the
\&\s-1HTML\s0 \s-1API\s0 documentation either on tha Redland wizzy joint at
<http://librdf.org/> or wit tha software release up in tha docs/api
directory.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Da functions defined by \fBredland\fR is all defined wit the
\&\f(CW\*(C`librdf_\*(C'\fR prefix
.SS "class ghetto"
.IX Subsection "class ghetto"
.IP "librdf_world* \fBlibrdf_new_world\fR(\fIvoid\fR)" 4
.IX Item "librdf_world* librdf_new_world(void)"
.PD 0
.IP "void \fBlibrdf_free_world\fR(librdf_world* \fIworld\fR)" 4
.IX Item "void librdf_free_world(librdf_world* ghetto)"
.IP "void \fBlibrdf_world_open\fR(librdf_world* \fIworld\fR)" 4
.IX Item "void librdf_world_open(librdf_world* ghetto)"
.IP "void \fBlibrdf_world_set_error\fR(librdf_world* \fIworld\fR, void* \fIuser_data\fR, void (*\fIerror_fn\fR)(void* \fIuser_data\fR, const char* \fImsg\fR, ...))" 4
.IX Item "void librdf_world_set_error(librdf_world* ghetto, void* user_data, void (*error_fn)(void* user_data, const char* msg, ...))"
.IP "void \fBlibrdf_world_set_warning\fR(librdf_world* \fIworld\fR, void* \fIuser_data\fR, void (*\fIwarning_fn\fR)(void* \fIuser_data\fR, const char* \fImsg\fR, ...))" 4
.IX Item "void librdf_world_set_warning(librdf_world* ghetto, void* user_data, void (*warning_fn)(void* user_data, const char* msg, ...))"
.IP "void \fBlibrdf_world_set_digest\fR(librdf_world*, const char* \fIname\fR)" 4
.IX Item "void librdf_world_set_digest(librdf_world*, const char* name)"
.IP "void \fBlibrdf_world_set_uris_hash\fR(librdf_world* \fIworld\fR, librdf_hash* \fIuris_hash\fR)" 4
.IX Item "void librdf_world_set_uris_hash(librdf_world* ghetto, librdf_hash* uris_hash)"
.IP "const char* \fBlibrdf_world_get_feature\fR(librdf_world* \fIworld\fR, librdf_uri* \fIfeature\fR)" 4
.IX Item "const char* librdf_world_get_feature(librdf_world* ghetto, librdf_uri* feature)"
.IP "int \fBlibrdf_world_set_feature\fR(librdf_world* \fIworld\fR, librdf_uri* \fIfeature\fR, const char* \fIvalue\fR)" 4
.IX Item "int librdf_world_set_feature(librdf_world* ghetto, librdf_uri* feature, const char* value)"
.PD
.SS "class iterator"
.IX Subsection "class iterator"
.IP "librdf_iterator* \fBlibrdf_new_iterator\fR(librdf_world* \fIworld\fR, void* \fIcontext\fR, int (*\fIis_end\fR)(void*), void* (*\fIget_next\fR)(void*), void (*\fIfinished\fR)(void*))" 4
.IX Item "librdf_iterator* librdf_new_iterator(librdf_world* ghetto, void* context, int (*is_end)(void*), void* (*get_next)(void*), void (*finished)(void*))"
.PD 0
.IP "void \fBlibrdf_free_iterator\fR(librdf_iterator*)" 4
.IX Item "void librdf_free_iterator(librdf_iterator*)"
.IP "int \fBlibrdf_iterator_end\fR(librdf_iterator* \fIiterator\fR)" 4
.IX Item "int librdf_iterator_end(librdf_iterator* iterator)"
.IP "int \fBlibrdf_iterator_finished\fR(librdf_iterator* \fIiterator\fR)" 4
.IX Item "int librdf_iterator_finished(librdf_iterator* iterator)"
.IP "int \fBlibrdf_iterator_next\fR(librdf_iterator* \fIiterator\fR)" 4
.IX Item "int librdf_iterator_next(librdf_iterator* iterator)"
.IP "void* \fBlibrdf_iterator_get_object\fR(librdf_iterator* \fIiterator\fR)" 4
.IX Item "void* librdf_iterator_get_object(librdf_iterator* iterator)"
.IP "void* \fBlibrdf_iterator_get_context\fR(librdf_iterator* \fIiterator\fR)" 4
.IX Item "void* librdf_iterator_get_context(librdf_iterator* iterator)"
.IP "void* \fBlibrdf_iterator_get_key\fR(librdf_iterator* \fIiterator\fR)" 4
.IX Item "void* librdf_iterator_get_key(librdf_iterator* iterator)"
.IP "void* \fBlibrdf_iterator_get_value\fR(librdf_iterator* \fIiterator\fR)" 4
.IX Item "void* librdf_iterator_get_value(librdf_iterator* iterator)"
.IP "int \fBlibrdf_iterator_add_map\fR(librdf_iterator* \fIiterator\fR, void* (*\fIfn\fR)(void* \fIcontext\fR, void* \fIitem\fR), void* \fIcontext\fR)" 4
.IX Item "int librdf_iterator_add_map(librdf_iterator* iterator, void* (*fn)(void* context, void* item), void* context)"
.IP "void* \fBlibrdf_iterator_map_remove_duplicate_nodes\fR(void* \fIitem\fR, void* \fIuser_data\fR)" 4
.IX Item "void* librdf_iterator_map_remove_duplicate_nodes(void* item, void* user_data)"
.PD
.SS "class digest"
.IX Subsection "class digest"
.IP "void \fBlibrdf_digest_register_factory\fR(librdf_world* \fIworld\fR, const char* \fIname\fR, void (*\fIfactory\fR) (librdf_digest_factory*))" 4
.IX Item "void librdf_digest_register_factory(librdf_world* ghetto, const char* name, void (*factory) (librdf_digest_factory*))"
.PD 0
.IP "librdf_digest_factory* \fBlibrdf_get_digest_factory\fR(librdf_world* \fIworld\fR, const char* \fIname\fR)" 4
.IX Item "librdf_digest_factory* librdf_get_digest_factory(librdf_world* ghetto, const char* name)"
.IP "librdf_digest* \fBlibrdf_new_digest\fR(librdf_world* \fIworld\fR, char* \fIname\fR)" 4
.IX Item "librdf_digest* librdf_new_digest(librdf_world* ghetto, char* name)"
.IP "librdf_digest* \fBlibrdf_new_digest_from_factory\fR(librdf_world* \fIworld\fR, librdf_digest_factory* \fIfactory\fR)" 4
.IX Item "librdf_digest* librdf_new_digest_from_factory(librdf_world* ghetto, librdf_digest_factory* factory)"
.IP "void \fBlibrdf_free_digest\fR(librdf_digest* \fIdigest\fR)" 4
.IX Item "void librdf_free_digest(librdf_digest* digest)"
.IP "void \fBlibrdf_digest_init\fR(librdf_digest* \fIdigest\fR)" 4
.IX Item "void librdf_digest_init(librdf_digest* digest)"
.IP "void \fBlibrdf_digest_update\fR(librdf_digest* \fIdigest\fR, unsigned char* \fIbuf\fR, size_t \fIlength\fR)" 4
.IX Item "void librdf_digest_update(librdf_digest* digest, unsigned char* buf, size_t length)"
.IP "void \fBlibrdf_digest_final\fR(librdf_digest* \fIdigest\fR)" 4
.IX Item "void librdf_digest_final(librdf_digest* digest)"
.IP "void* \fBlibrdf_digest_get_digest\fR(librdf_digest* \fIdigest\fR)" 4
.IX Item "void* librdf_digest_get_digest(librdf_digest* digest)"
.IP "char* \fBlibrdf_digest_to_string\fR(librdf_digest* \fIdigest\fR)" 4
.IX Item "char* librdf_digest_to_string(librdf_digest* digest)"
.IP "void \fBlibrdf_digest_print\fR(librdf_digest* \fIdigest\fR, FILE* \fIfh\fR)" 4
.IX Item "void librdf_digest_print(librdf_digest* digest, FILE* fh)"
.PD
.SS "class uri"
.IX Subsection "class uri"
.IP "librdf_uri* \fBlibrdf_new_uri\fR(librdf_world* \fIworld\fR, const unsigned char * \fIstring\fR)" 4
.IX Item "librdf_uri* librdf_new_uri(librdf_world* ghetto, const unsigned char * string)"
.PD 0
.IP "librdf_uri* \fBlibrdf_new_uri_from_uri\fR(librdf_uri* \fIuri\fR)" 4
.IX Item "librdf_uri* librdf_new_uri_from_uri(librdf_uri* uri)"
.IP "librdf_uri* \fBlibrdf_new_uri_from_uri_local_name\fR(librdf_uri* \fIuri\fR, const unsigned char* \fIlocal_name\fR)" 4
.IX Item "librdf_uri* librdf_new_uri_from_uri_local_name(librdf_uri* uri, const unsigned char* local_name)"
.IP "void \fBlibrdf_free_uri\fR(librdf_uri* \fIuri\fR)" 4
.IX Item "void librdf_free_uri(librdf_uri* uri)"
.IP "unsigned char* \fBlibrdf_uri_as_string\fR(librdf_uri* \fIuri\fR)" 4
.IX Item "unsigned char* librdf_uri_as_string(librdf_uri* uri)"
.IP "unsigned char* \fBlibrdf_uri_as_counted_string\fR(librdf_uri* \fIuri\fR, size_t* \fIlen_p\fR)" 4
.IX Item "unsigned char* librdf_uri_as_counted_string(librdf_uri* uri, size_t* len_p)"
.IP "librdf_digest* \fBlibrdf_uri_get_digest\fR(librdf_uri* \fIuri\fR)" 4
.IX Item "librdf_digest* librdf_uri_get_digest(librdf_uri* uri)"
.IP "void librdf_uri_print>(librdf_uri* \fIuri\fR, FILE* \fIfh\fR)" 4
.IX Item "void librdf_uri_print>(librdf_uri* uri, FILE* fh)"
.IP "unsigned char* \fBlibrdf_uri_to_string\fR(librdf_uri* \fIuri\fR)" 4
.IX Item "unsigned char* librdf_uri_to_string(librdf_uri* uri)"
.IP "unsigned char* \fBlibrdf_uri_to_counted_string\fR(librdf_uri* \fIuri\fR, size_t* \fIlen_p\fR)" 4
.IX Item "unsigned char* librdf_uri_to_counted_string(librdf_uri* uri, size_t* len_p)"
.IP "int \fBlibrdf_uri_equals\fR(librdf_uri* \fIfirst_uri\fR, librdf_uri* \fIsecond_uri\fR)" 4
.IX Item "int librdf_uri_equals(librdf_uri* first_uri, librdf_uri* second_uri)"
.IP "int \fBlibrdf_uri_is_file_uri\fR(librdf_uri* \fIuri\fR)" 4
.IX Item "int librdf_uri_is_file_uri(librdf_uri* uri)"
.IP "const char* \fBlibrdf_uri_to_filename\fR(librdf_uri* \fIuri\fR)" 4
.IX Item "const char* librdf_uri_to_filename(librdf_uri* uri)"
.IP "librdf_uri* \fBlibrdf_new_uri_normalised_to_base\fR(const unsigned char* \fIuri_string\fR, librdf_uri* \fIsource_uri\fR, librdf_uri* \fIbase_uri\fR)" 4
.IX Item "librdf_uri* librdf_new_uri_normalised_to_base(const unsigned char* uri_string, librdf_uri* source_uri, librdf_uri* base_uri)"
.IP "librdf_uri* \fBlibrdf_new_uri_relative_to_base\fR(librdf_uri* \fIbase_uri\fR, const unsigned char* \fIuri_string\fR)" 4
.IX Item "librdf_uri* librdf_new_uri_relative_to_base(librdf_uri* base_uri, const unsigned char* uri_string)"
.IP "librdf_uri* \fBlibrdf_new_uri_from_filename\fR(librdf_world* \fIworld\fR, const char* \fIfilename\fR)" 4
.IX Item "librdf_uri* librdf_new_uri_from_filename(librdf_world* ghetto, const char* filename)"
.PD
.SS "class node"
.IX Subsection "class node"
.IP "librdf_node* \fBlibrdf_new_node\fR(librdf_world* \fIworld\fR)" 4
.IX Item "librdf_node* librdf_new_node(librdf_world* ghetto)"
.PD 0
.IP "librdf_node* \fBlibrdf_new_node_from_uri_string\fR(librdf_world* \fIworld\fR, const char* \fIstring\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_uri_string(librdf_world* ghetto, const char* string)"
.IP "librdf_node* \fBlibrdf_new_node_from_uri\fR(librdf_world* \fIworld\fR, librdf_uri* \fIuri\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_uri(librdf_world* ghetto, librdf_uri* uri)"
.IP "librdf_node* \fBlibrdf_new_node_from_uri_local_name\fR(librdf_world* \fIworld\fR, librdf_uri* \fIuri\fR, const char* \fIlocal_name\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_uri_local_name(librdf_world* ghetto, librdf_uri* uri, const char* local_name)"
.IP "librdf_node* \fBlibrdf_new_node_from_normalised_uri_string\fR(librdf_world* \fIworld\fR, const char* \fIuri_string\fR, librdf_uri* \fIsource_uri\fR, librdf_uri* \fIbase_uri\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_normalised_uri_string(librdf_world* ghetto, const char* uri_string, librdf_uri* source_uri, librdf_uri* base_uri)"
.IP "librdf_node* \fBlibrdf_new_node_from_literal\fR(librdf_world* \fIworld\fR, const char* \fIstring\fR, const char* \fIxml_language\fR, int \fIxml_space\fR, int \fIis_wf_xml\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_literal(librdf_world* ghetto, const char* string, const char* xml_language, int xml_space, int is_wf_xml)"
.IP "librdf_node* \fBlibrdf_new_node_from_typed_literal\fR(librdf_world* \fIworld\fR, const unsigned char* \fIstring\fR, const char* \fIxml_language\fR, librdf_uri* \fIdatatype_uri\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_typed_literal(librdf_world* ghetto, const unsigned char* string, const char* xml_language, librdf_uri* datatype_uri)"
.IP "librdf_node* \fBlibrdf_new_node_from_blank_identifier\fR(librdf_world* \fIworld\fR, const unsigned char* \fIidentifier\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_blank_identifier(librdf_world* ghetto, const unsigned char* identifier)"
.IP "librdf_node* \fBlibrdf_new_node_from_node\fR(librdf_node* \fInode\fR)" 4
.IX Item "librdf_node* librdf_new_node_from_node(librdf_node* node)"
.IP "void \fBlibrdf_node_init\fR(librdf_world* \fIworld\fR, librdf_node* \fInode\fR)" 4
.IX Item "void librdf_node_init(librdf_world* ghetto, librdf_node* node)"
.IP "void \fBlibrdf_free_node\fR(librdf_node* \fIr\fR)" 4
.IX Item "void librdf_free_node(librdf_node* r)"
.IP "librdf_uri* \fBlibrdf_node_get_uri\fR(librdf_node* \fInode\fR)" 4
.IX Item "librdf_uri* librdf_node_get_uri(librdf_node* node)"
.IP "librdf_node_type \fBlibrdf_node_get_type\fR(librdf_node* \fInode\fR)" 4
.IX Item "librdf_node_type librdf_node_get_type(librdf_node* node)"
.IP "unsigned char* \fBlibrdf_node_get_literal_value\fR(librdf_node* \fInode\fR)" 4
.IX Item "unsigned char* librdf_node_get_literal_value(librdf_node* node)"
.IP "unsigned char* \fBlibrdf_node_get_literal_value_as_counted_string\fR(librdf_node* \fInode\fR, size_t* \fIlen_p\fR)" 4
.IX Item "unsigned char* librdf_node_get_literal_value_as_counted_string(librdf_node* node, size_t* len_p)"
.IP "char* \fBlibrdf_node_get_literal_value_as_latin1\fR(librdf_node* \fInode\fR)" 4
.IX Item "char* librdf_node_get_literal_value_as_latin1(librdf_node* node)"
.IP "char* \fBlibrdf_node_get_literal_value_language\fR(librdf_node* \fInode\fR)" 4
.IX Item "char* librdf_node_get_literal_value_language(librdf_node* node)"
.IP "int \fBlibrdf_node_get_literal_value_is_wf_xml\fR(librdf_node* \fInode\fR)" 4
.IX Item "int librdf_node_get_literal_value_is_wf_xml(librdf_node* node)"
.IP "librdf_uri* \fBlibrdf_node_get_literal_value_datatype_uri\fR(librdf_node* \fInode\fR)" 4
.IX Item "librdf_uri* librdf_node_get_literal_value_datatype_uri(librdf_node* node)"
.IP "int \fBlibrdf_node_get_li_ordinal\fR(librdf_node* \fInode\fR)" 4
.IX Item "int librdf_node_get_li_ordinal(librdf_node* node)"
.IP "unsigned char* \fBlibrdf_node_get_blank_identifier\fR(librdf_node* \fInode\fR)" 4
.IX Item "unsigned char* librdf_node_get_blank_identifier(librdf_node* node)"
.IP "int \fBlibrdf_node_is_resource\fR(librdf_node* \fInode\fR)" 4
.IX Item "int librdf_node_is_resource(librdf_node* node)"
.IP "int \fBlibrdf_node_is_literal\fR(librdf_node* \fInode\fR)" 4
.IX Item "int librdf_node_is_literal(librdf_node* node)"
.IP "int \fBlibrdf_node_is_blank\fR(librdf_node* \fInode\fR)" 4
.IX Item "int librdf_node_is_blank(librdf_node* node)"
.IP "librdf_digest* \fBlibrdf_node_get_digest\fR(librdf_node* \fInode\fR)" 4
.IX Item "librdf_digest* librdf_node_get_digest(librdf_node* node)"
.IP "size_t \fBlibrdf_node_encode\fR(librdf_node* \fInode\fR, unsigned char* \fIbuffer\fR, size_t \fIlength\fR)" 4
.IX Item "size_t librdf_node_encode(librdf_node* node, unsigned char* buffer, size_t length)"
.IP "size_t \fBlibrdf_node_decode\fR(librdf_node* \fInode\fR, unsigned char* \fIbuffer\fR, size_t \fIlength\fR)" 4
.IX Item "size_t librdf_node_decode(librdf_node* node, unsigned char* buffer, size_t length)"
.IP "unsigned char* \fBlibrdf_node_to_string\fR(librdf_node* \fInode\fR)" 4
.IX Item "unsigned char* librdf_node_to_string(librdf_node* node)"
.IP "unsigned char* \fBlibrdf_node_to_counted_string\fR(librdf_node* \fInode\fR, size_t* \fIlen_p\fR)" 4
.IX Item "unsigned char* librdf_node_to_counted_string(librdf_node* node, size_t* len_p)"
.IP "void \fBlibrdf_node_print\fR(librdf_node* \fInode\fR, FILE* \fIfh\fR)" 4
.IX Item "void librdf_node_print(librdf_node* node, FILE* fh)"
.IP "int \fBlibrdf_node_equals\fR(librdf_node* \fIfirst_node\fR, librdf_node* \fIsecond_node\fR)" 4
.IX Item "int librdf_node_equals(librdf_node* first_node, librdf_node* second_node)"
.PD
.SS "class concepts"
.IX Subsection "class concepts"
Da library serves up macros fo' all of tha \s-1RDF\s0 n' \s-1RDFS\s0 concepts \-
nodes n' URIs.  For example, \f(CW\*(C`LIBRDF_MS_Alt\*(C'\fR fo' tha librdf_node
for tha rdf:Alt concept n' \f(CW\*(C`LIBRDF_MS_Alt_URI\*(C'\fR fo' tha librdf_uri
for tha \s-1URI\s0 reference of rdf:Alt.
.PP
\&\f(CW\*(C`LIBRDF_URI_RDF_MS\*(C'\fR n' \f(CW\*(C`LIBRDF_URI_RDF_SCHEMA\*(C'\fR provide tha librdf_uri
objects fo' tha \s-1RDF\s0 n' \s-1RDFS\s0 namespace URIs.  They must be copied
usin \fBlibrdf_new_uri_from_uri\fR ta be shared erectly.
.IP "void \fBlibrdf_get_concept_by_name\fR(librdf_world* \fIworld\fR, int \fIis_ms\fR, const char* \fIname\fR, librdf_uri **\fIuri_p\fR, librdf_node **\fInode_p\fR)" 4
.IX Item "void librdf_get_concept_by_name(librdf_world* ghetto, int is_ms, const char* name, librdf_uri **uri_p, librdf_node **node_p)"
.SS "class statement"
.IX Subsection "class statement"
.PD 0
.IP "librdf_statement* \fBlibrdf_new_statement\fR(librdf_world* \fIworld\fR)" 4
.IX Item "librdf_statement* librdf_new_statement(librdf_world* ghetto)"
.IP "librdf_statement* \fBlibrdf_new_statement_from_statement\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "librdf_statement* librdf_new_statement_from_statement(librdf_statement* statement)"
.IP "librdf_statement* \fBlibrdf_new_statement_from_nodes\fR(librdf_world* \fIworld\fR, librdf_node* \fIsubject\fR, librdf_node* \fIpredicate\fR, librdf_node* \fIobject\fR)" 4
.IX Item "librdf_statement* librdf_new_statement_from_nodes(librdf_world* ghetto, librdf_node* subject, librdf_node* predicate, librdf_node* object)"
.IP "void \fBlibrdf_statement_init\fR(librdf_world* \fIworld\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "void librdf_statement_init(librdf_world* ghetto, librdf_statement* statement)"
.IP "void \fBlibrdf_statement_clear\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "void librdf_statement_clear(librdf_statement* statement)"
.IP "void \fBlibrdf_free_statement\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "void librdf_free_statement(librdf_statement* statement)"
.IP "librdf_node* \fBlibrdf_statement_get_subject\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "librdf_node* librdf_statement_get_subject(librdf_statement* statement)"
.IP "void \fBlibrdf_statement_set_subject\fR(librdf_statement* \fIstatement\fR, librdf_node* \fIsubject\fR)" 4
.IX Item "void librdf_statement_set_subject(librdf_statement* statement, librdf_node* subject)"
.IP "librdf_node* \fBlibrdf_statement_get_predicate\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "librdf_node* librdf_statement_get_predicate(librdf_statement* statement)"
.IP "void \fBlibrdf_statement_set_predicate\fR(librdf_statement* \fIstatement\fR, librdf_node* \fIpredicate\fR)" 4
.IX Item "void librdf_statement_set_predicate(librdf_statement* statement, librdf_node* predicate)"
.IP "librdf_node* \fBlibrdf_statement_get_object\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "librdf_node* librdf_statement_get_object(librdf_statement* statement)"
.IP "void \fBlibrdf_statement_set_object\fR(librdf_statement* \fIstatement\fR, librdf_node* \fIobject\fR)" 4
.IX Item "void librdf_statement_set_object(librdf_statement* statement, librdf_node* object)"
.IP "int \fBlibrdf_statement_is_complete\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_statement_is_complete(librdf_statement* statement)"
.IP "char* \fBlibrdf_statement_to_string\fR(librdf_statement* \fIstatement\fR)" 4
.IX Item "char* librdf_statement_to_string(librdf_statement* statement)"
.IP "void \fBlibrdf_statement_print\fR(librdf_statement* \fIstatement\fR, FILE* \fIfh\fR)" 4
.IX Item "void librdf_statement_print(librdf_statement* statement, FILE* fh)"
.IP "int \fBlibrdf_statement_equals\fR(librdf_statement* \fIstatement1\fR, librdf_statement* \fIstatement2\fR)" 4
.IX Item "int librdf_statement_equals(librdf_statement* statement1, librdf_statement* statement2)"
.IP "int \fBlibrdf_statement_match\fR(librdf_statement* \fIstatement\fR, librdf_statement* \fIpartial_statement\fR)" 4
.IX Item "int librdf_statement_match(librdf_statement* statement, librdf_statement* partial_statement)"
.IP "size_t \fBlibrdf_statement_encode\fR(librdf_statement* \fIstatement\fR, unsigned char* \fIbuffer\fR, size_t \fIlength\fR)" 4
.IX Item "size_t librdf_statement_encode(librdf_statement* statement, unsigned char* buffer, size_t length)"
.IP "size_t \fBlibrdf_statement_encode_parts\fR(librdf_statement* \fIstatement\fR, unsigned char* \fIbuffer\fR, size_t \fIlength\fR, librdf_statement_part \fIfields\fR)" 4
.IX Item "size_t librdf_statement_encode_parts(librdf_statement* statement, unsigned char* buffer, size_t length, librdf_statement_part fields)"
.IP "size_t \fBlibrdf_statement_decode\fR(librdf_statement* \fIstatement\fR, unsigned char* \fIbuffer\fR, size_t \fIlength\fR)" 4
.IX Item "size_t librdf_statement_decode(librdf_statement* statement, unsigned char* buffer, size_t length)"
.IP "size_t \fBlibrdf_statement_decode_parts\fR(librdf_statement* \fIstatement\fR, librdf_node** \fIcontext_node\fR, unsigned char* \fIbuffer\fR, size_t \fIlength\fR)" 4
.IX Item "size_t librdf_statement_decode_parts(librdf_statement* statement, librdf_node** context_node, unsigned char* buffer, size_t length)"
.PD
.SS "class model"
.IX Subsection "class model"
.IP "librdf_model* \fBlibrdf_new_model\fR(librdf_world* \fIworld\fR, librdf_storage* \fIstorage\fR, char* \fIoptions_string\fR)" 4
.IX Item "librdf_model* librdf_new_model(librdf_world* ghetto, librdf_storage* storage, char* options_string)"
.PD 0
.IP "librdf_model* \fBlibrdf_new_model_with_options\fR(librdf_world* \fIworld\fR, librdf_storage* \fIstorage\fR, librdf_hash* \fIoptions\fR)" 4
.IX Item "librdf_model* librdf_new_model_with_options(librdf_world* ghetto, librdf_storage* storage, librdf_hash* options)"
.IP "librdf_model* \fBlibrdf_new_model_from_model\fR(librdf_model* \fImodel\fR)" 4
.IX Item "librdf_model* librdf_new_model_from_model(librdf_model* model)"
.IP "void \fBlibrdf_free_model\fR(librdf_model* \fImodel\fR)" 4
.IX Item "void librdf_free_model(librdf_model* model)"
.IP "int \fBlibrdf_model_size\fR(librdf_model* \fImodel\fR)" 4
.IX Item "int librdf_model_size(librdf_model* model)"
.IP "int \fBlibrdf_model_add\fR(librdf_model* \fImodel\fR, librdf_node* \fIsubject\fR, librdf_node* \fIpredicate\fR, librdf_node* \fIobject\fR)" 4
.IX Item "int librdf_model_add(librdf_model* model, librdf_node* subject, librdf_node* predicate, librdf_node* object)"
.IP "int \fBlibrdf_model_add_string_literal_statement\fR(librdf_model* \fImodel\fR, librdf_node* \fIsubject\fR, librdf_node* \fIpredicate\fR, char* \fIstring\fR, char* \fIxml_language\fR, int \fIxml_space\fR, int \fIis_wf_xml\fR)" 4
.IX Item "int librdf_model_add_string_literal_statement(librdf_model* model, librdf_node* subject, librdf_node* predicate, char* string, char* xml_language, int xml_space, int is_wf_xml)"
.IP "int \fBlibrdf_model_add_typed_literal_statement\fR(librdf_model* \fImodel\fR, librdf_node* \fIsubject\fR, librdf_node* \fIpredicate\fR, const unsigned char* \fIstring\fR, char* \fIxml_language\fR, librdf_uri* \fIdatatype_uri\fR)" 4
.IX Item "int librdf_model_add_typed_literal_statement(librdf_model* model, librdf_node* subject, librdf_node* predicate, const unsigned char* string, char* xml_language, librdf_uri* datatype_uri)"
.IP "int \fBlibrdf_model_add_statement\fR(librdf_model* \fImodel\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_model_add_statement(librdf_model* model, librdf_statement* statement)"
.IP "int \fBlibrdf_model_add_statements\fR(librdf_model* \fImodel\fR, librdf_stream* \fIstatement_stream\fR)" 4
.IX Item "int librdf_model_add_statements(librdf_model* model, librdf_stream* statement_stream)"
.IP "int \fBlibrdf_model_remove_statement\fR(librdf_model* \fImodel\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_model_remove_statement(librdf_model* model, librdf_statement* statement)"
.IP "int \fBlibrdf_model_gotz nuff_statement\fR(librdf_model* \fImodel\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_model_gotz nuff_statement(librdf_model* model, librdf_statement* statement)"
.IP "int \fBlibrdf_model_has_arc_in\fR(librdf_model* \fImodel\fR, librdf_node* \fInode\fR, librdf_node* \fIproperty\fR)" 4
.IX Item "int librdf_model_has_arc_in(librdf_model* model, librdf_node* node, librdf_node* property)"
.IP "int \fBlibrdf_model_has_arc_out\fR(librdf_model* \fImodel\fR, librdf_node* \fInode\fR, librdf_node* \fIproperty\fR)" 4
.IX Item "int librdf_model_has_arc_out(librdf_model* model, librdf_node* node, librdf_node* property)"
.IP "librdf_stream* \fBlibrdf_model_as_stream\fR(librdf_model* \fImodel\fR)" 4
.IX Item "librdf_stream* librdf_model_as_stream(librdf_model* model)"
.IP "librdf_stream* \fBlibrdf_model_find_statements\fR(librdf_model* \fImodel\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "librdf_stream* librdf_model_find_statements(librdf_model* model, librdf_statement* statement)"
.IP "librdf_stream* \fBlibrdf_model_find_statements_in_context\fR(librdf_model* \fImodel\fR, librdf_statement* \fIstatement\fR, librdf_node* \fIcontext_node\fR)" 4
.IX Item "librdf_stream* librdf_model_find_statements_in_context(librdf_model* model, librdf_statement* statement, librdf_node* context_node)"
.IP "librdf_stream* \fBlibrdf_model_find_statements_with_options\fR(librdf_model* \fImodel\fR, librdf_statement* \fIstatement\fR, librdf_node* \fIcontext_node\fR, librdf_hash* \fIoptions\fR)" 4
.IX Item "librdf_stream* librdf_model_find_statements_with_options(librdf_model* model, librdf_statement* statement, librdf_node* context_node, librdf_hash* options)"
.IP "librdf_iterator* \fBlibrdf_model_get_contexts\fR(librdf_model* \fImodel\fR)" 4
.IX Item "librdf_iterator* librdf_model_get_contexts(librdf_model* model)"
.IP "librdf_iterator* \fBlibrdf_model_get_sources\fR(librdf_model* \fImodel\fR, librdf_node* \fIarc\fR, librdf_node* \fItarget\fR)" 4
.IX Item "librdf_iterator* librdf_model_get_sources(librdf_model* model, librdf_node* arc, librdf_node* target)"
.IP "librdf_iterator* \fBlibrdf_model_get_arcs\fR(librdf_model* \fImodel\fR, librdf_node* \fIsource\fR, librdf_node* \fItarget\fR)" 4
.IX Item "librdf_iterator* librdf_model_get_arcs(librdf_model* model, librdf_node* source, librdf_node* target)"
.IP "librdf_iterator* \fBlibrdf_model_get_targets\fR(librdf_model* \fImodel\fR, librdf_node* \fIsource\fR, librdf_node* \fIarc\fR)" 4
.IX Item "librdf_iterator* librdf_model_get_targets(librdf_model* model, librdf_node* source, librdf_node* arc)"
.IP "librdf_node* \fBlibrdf_model_get_source\fR(librdf_model* \fImodel\fR, librdf_node* \fIarc\fR, librdf_node* \fItarget\fR)" 4
.IX Item "librdf_node* librdf_model_get_source(librdf_model* model, librdf_node* arc, librdf_node* target)"
.IP "librdf_node* \fBlibrdf_model_get_arc\fR(librdf_model* \fImodel\fR, librdf_node* \fIsource\fR, librdf_node* \fItarget\fR)" 4
.IX Item "librdf_node* librdf_model_get_arc(librdf_model* model, librdf_node* source, librdf_node* target)"
.IP "librdf_node* \fBlibrdf_model_get_target\fR(librdf_model* \fImodel\fR, librdf_node* \fIsource\fR, librdf_node* \fIarc\fR)" 4
.IX Item "librdf_node* librdf_model_get_target(librdf_model* model, librdf_node* source, librdf_node* arc)"
.IP "librdf_iterator* \fBlibrdf_model_get_arcs_in\fR(librdf_model* \fImodel\fR, librdf_node* \fInode\fR)" 4
.IX Item "librdf_iterator* librdf_model_get_arcs_in(librdf_model* model, librdf_node* node)"
.IP "librdf_iterator* \fBlibrdf_model_get_arcs_out\fR(librdf_model* \fImodel\fR, librdf_node* \fInode\fR)" 4
.IX Item "librdf_iterator* librdf_model_get_arcs_out(librdf_model* model, librdf_node* node)"
.IP "int \fBlibrdf_model_add_submodel\fR(librdf_model* \fImodel\fR, librdf_model* \fIsub_model\fR)" 4
.IX Item "int librdf_model_add_submodel(librdf_model* model, librdf_model* sub_model)"
.IP "int \fBlibrdf_model_remove_submodel\fR(librdf_model* \fImodel\fR, librdf_model* \fIsub_model\fR)" 4
.IX Item "int librdf_model_remove_submodel(librdf_model* model, librdf_model* sub_model)"
.IP "void \fBlibrdf_model_print\fR(librdf_model* \fImodel\fR, FILE* \fIfh\fR)" 4
.IX Item "void librdf_model_print(librdf_model* model, FILE* fh)"
.IP "int \fBlibrdf_model_context_add_statement\fR(librdf_model* \fImodel\fR, librdf_node* \fIcontext\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_model_context_add_statement(librdf_model* model, librdf_node* context, librdf_statement* statement)"
.IP "int \fBlibrdf_model_context_add_statements\fR(librdf_model* \fImodel\fR, librdf_node* \fIcontext\fR, librdf_stream* \fIstream\fR)" 4
.IX Item "int librdf_model_context_add_statements(librdf_model* model, librdf_node* context, librdf_stream* stream)"
.IP "int \fBlibrdf_model_context_remove_statement\fR(librdf_model* \fImodel\fR, librdf_node* \fIcontext\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_model_context_remove_statement(librdf_model* model, librdf_node* context, librdf_statement* statement)"
.IP "int \fBlibrdf_model_context_remove_statements\fR(librdf_model* \fImodel\fR, librdf_node* \fIcontext\fR)" 4
.IX Item "int librdf_model_context_remove_statements(librdf_model* model, librdf_node* context)"
.IP "librdf_stream* \fBlibrdf_model_context_as_stream\fR(librdf_model* \fImodel\fR, librdf_node* \fIcontext\fR)" 4
.IX Item "librdf_stream* librdf_model_context_as_stream(librdf_model* model, librdf_node* context)"
.IP "librdf_stream* \fBlibrdf_model_query\fR(librdf_model* \fImodel\fR, librdf_query* \fIquery\fR)" 4
.IX Item "librdf_stream* librdf_model_query(librdf_model* model, librdf_query* query)"
.IP "librdf_stream* \fBlibrdf_model_query_string\fR(librdf_model* \fImodel\fR, const char* \fIname\fR, librdf_uri* \fIuri\fR, const unsigned char* \fIquery_string\fR)" 4
.IX Item "librdf_stream* librdf_model_query_string(librdf_model* model, const char* name, librdf_uri* uri, const unsigned char* query_string)"
.IP "void \fBlibrdf_model_sync\fR(librdf_model* \fImodel\fR)" 4
.IX Item "void librdf_model_sync(librdf_model* model)"
.IP "librdf_storage* \fBlibrdf_model_get_storage\fR(librdf_model* \fImodel\fR)" 4
.IX Item "librdf_storage* librdf_model_get_storage(librdf_model* model)"
.IP "librdf_node* \fBlibrdf_model_get_feature\fR(librdf_model* \fImodel\fR, librdf_uri* \fIfeature\fR) =item int \fBlibrdf_model_set_feature\fR(librdf_model* \fImodel\fR, librdf_uri* \fIfeature\fR, librdf_node* \fIvalue\fR)" 4
.IX Item "librdf_node* librdf_model_get_feature(librdf_model* model, librdf_uri* feature) =item int librdf_model_set_feature(librdf_model* model, librdf_uri* feature, librdf_node* value)"
.PD
.SS "class storage"
.IX Subsection "class storage"
.IP "void \fBlibrdf_storage_register_factory\fR(const char* \fIname\fR, void (*\fIfactory\fR) (librdf_storage_factory*))" 4
.IX Item "void librdf_storage_register_factory(const char* name, void (*factory) (librdf_storage_factory*))"
.PD 0
.IP "librdf_storage* \fBlibrdf_new_storage\fR(librdf_world* \fIworld\fR, char* \fIstorage_name\fR, char* \fIname\fR, char* \fIoptions_string\fR)" 4
.IX Item "librdf_storage* librdf_new_storage(librdf_world* ghetto, char* storage_name, char* name, char* options_string)"
.IP "librdf_storage* \fBlibrdf_new_storage_with_options\fR(librdf_world* \fIworld\fR, char* \fIstorage_name\fR, char* \fIname\fR, librdf_hash* \fIoptions\fR)" 4
.IX Item "librdf_storage* librdf_new_storage_with_options(librdf_world* ghetto, char* storage_name, char* name, librdf_hash* options)"
.IP "librdf_storage* \fBlibrdf_new_storage_from_storage\fR(librdf_storage* \fIold_storage\fR)" 4
.IX Item "librdf_storage* librdf_new_storage_from_storage(librdf_storage* old_storage)"
.IP "librdf_storage* \fBlibrdf_new_storage_from_factory\fR(librdf_world* \fIworld\fR, librdf_storage_factory* \fIfactory\fR, char* \fIname\fR, librdf_hash* \fIoptions\fR)" 4
.IX Item "librdf_storage* librdf_new_storage_from_factory(librdf_world* ghetto, librdf_storage_factory* factory, char* name, librdf_hash* options)"
.IP "void \fBlibrdf_free_storage\fR(librdf_storage* \fIstorage\fR)" 4
.IX Item "void librdf_free_storage(librdf_storage* storage)"
.IP "int \fBlibrdf_storage_open\fR(librdf_storage* \fIstorage\fR, librdf_model* \fImodel\fR)" 4
.IX Item "int librdf_storage_open(librdf_storage* storage, librdf_model* model)"
.IP "int \fBlibrdf_storage_close\fR(librdf_storage* \fIstorage\fR)" 4
.IX Item "int librdf_storage_close(librdf_storage* storage)"
.IP "int \fBlibrdf_storage_get\fR(librdf_storage* \fIstorage\fR, void* \fIkey\fR, size_t \fIkey_len\fR, void **\fIvalue\fR, size_t* \fIvalue_len\fR, unsigned int \fIflags\fR)" 4
.IX Item "int librdf_storage_get(librdf_storage* storage, void* key, size_t key_len, void **value, size_t* value_len, unsigned int flags)"
.IP "int \fBlibrdf_storage_size\fR(librdf_storage* \fIstorage\fR)" 4
.IX Item "int librdf_storage_size(librdf_storage* storage)"
.IP "int \fBlibrdf_storage_add_statement\fR(librdf_storage* \fIstorage\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_storage_add_statement(librdf_storage* storage, librdf_statement* statement)"
.IP "int \fBlibrdf_storage_add_statements\fR(librdf_storage* \fIstorage\fR, librdf_stream* \fIstatement_stream\fR)" 4
.IX Item "int librdf_storage_add_statements(librdf_storage* storage, librdf_stream* statement_stream)"
.IP "int \fBlibrdf_storage_remove_statement\fR(librdf_storage* \fIstorage\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_storage_remove_statement(librdf_storage* storage, librdf_statement* statement)"
.IP "int \fBlibrdf_storage_gotz nuff_statement\fR(librdf_storage* \fIstorage\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_storage_gotz nuff_statement(librdf_storage* storage, librdf_statement* statement)"
.IP "librdf_stream* \fBlibrdf_storage_serialise\fR(librdf_storage* \fIstorage\fR)" 4
.IX Item "librdf_stream* librdf_storage_serialise(librdf_storage* storage)"
.IP "librdf_stream* \fBlibrdf_storage_find_statements\fR(librdf_storage* \fIstorage\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "librdf_stream* librdf_storage_find_statements(librdf_storage* storage, librdf_statement* statement)"
.IP "librdf_iterator* \fBlibrdf_storage_get_sources\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIarc\fR, librdf_node* \fItarget\fR)" 4
.IX Item "librdf_iterator* librdf_storage_get_sources(librdf_storage* storage, librdf_node* arc, librdf_node* target)"
.IP "librdf_iterator* \fBlibrdf_storage_get_arcs\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIsource\fR, librdf_node* \fItarget\fR)" 4
.IX Item "librdf_iterator* librdf_storage_get_arcs(librdf_storage* storage, librdf_node* source, librdf_node* target)"
.IP "librdf_iterator* \fBlibrdf_storage_get_targets\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIsource\fR, librdf_node* \fIarc\fR)" 4
.IX Item "librdf_iterator* librdf_storage_get_targets(librdf_storage* storage, librdf_node* source, librdf_node* arc)"
.IP "librdf_iterator* \fBlibrdf_storage_get_arcs_in\fR(librdf_storage* \fIstorage\fR, librdf_node* \fInode\fR)" 4
.IX Item "librdf_iterator* librdf_storage_get_arcs_in(librdf_storage* storage, librdf_node* node)"
.IP "librdf_iterator* \fBlibrdf_storage_get_arcs_out\fR(librdf_storage* \fIstorage\fR, librdf_node* \fInode\fR)" 4
.IX Item "librdf_iterator* librdf_storage_get_arcs_out(librdf_storage* storage, librdf_node* node)"
.IP "int \fBlibrdf_storage_has_arc_in\fR(librdf_storage* \fIstorage\fR, librdf_node* \fInode\fR, librdf_node* \fIproperty\fR)" 4
.IX Item "int librdf_storage_has_arc_in(librdf_storage* storage, librdf_node* node, librdf_node* property)"
.IP "int \fBlibrdf_storage_has_arc_out\fR(librdf_storage* \fIstorage\fR, librdf_node* \fInode\fR, librdf_node* \fIproperty\fR)" 4
.IX Item "int librdf_storage_has_arc_out(librdf_storage* storage, librdf_node* node, librdf_node* property)"
.IP "int \fBlibrdf_storage_context_add_statement\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIcontext\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_storage_context_add_statement(librdf_storage* storage, librdf_node* context, librdf_statement* statement)"
.IP "int \fBlibrdf_storage_context_add_statements\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIcontext\fR, librdf_stream* \fIstream\fR)" 4
.IX Item "int librdf_storage_context_add_statements(librdf_storage* storage, librdf_node* context, librdf_stream* stream)"
.IP "int \fBlibrdf_storage_context_remove_statement\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIcontext\fR, librdf_statement* \fIstatement\fR)" 4
.IX Item "int librdf_storage_context_remove_statement(librdf_storage* storage, librdf_node* context, librdf_statement* statement)"
.IP "int \fBlibrdf_storage_context_remove_statements\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIcontext\fR)" 4
.IX Item "int librdf_storage_context_remove_statements(librdf_storage* storage, librdf_node* context)"
.IP "librdf_stream* \fBlibrdf_storage_context_as_stream\fR(librdf_storage* \fIstorage\fR, librdf_node* \fIcontext\fR)" 4
.IX Item "librdf_stream* librdf_storage_context_as_stream(librdf_storage* storage, librdf_node* context)"
.IP "int \fBlibrdf_storage_supports_query\fR(librdf_storage* \fIstorage\fR, librdf_query* \fIquery\fR)" 4
.IX Item "int librdf_storage_supports_query(librdf_storage* storage, librdf_query* query)"
.IP "librdf_stream* \fBlibrdf_storage_query\fR(librdf_storage* \fIstorage\fR, librdf_query* \fIquery\fR)" 4
.IX Item "librdf_stream* librdf_storage_query(librdf_storage* storage, librdf_query* query)"
.IP "void \fBlibrdf_storage_sync\fR(librdf_storage* \fIstorage\fR)" 4
.IX Item "void librdf_storage_sync(librdf_storage* storage)"
.PD
.SS "class parser"
.IX Subsection "class parser"
.IP "void \fBlibrdf_parser_register_factory\fR(librdf_world* \fIworld\fR, const char* \fIname\fR, const char* \fImime_type\fR, const char* \fIuri_string\fR, void (*\fIfactory\fR) (librdf_parser_factory*))" 4
.IX Item "void librdf_parser_register_factory(librdf_world* ghetto, const char* name, const char* mime_type, const char* uri_string, void (*factory) (librdf_parser_factory*))"
.PD 0
.IP "librdf_parser* \fBlibrdf_new_parser\fR(librdf_world* \fIworld\fR, const char* \fIname\fR, const char* \fImime_type\fR, librdf_uri* \fItype_uri\fR)" 4
.IX Item "librdf_parser* librdf_new_parser(librdf_world* ghetto, const char* name, const char* mime_type, librdf_uri* type_uri)"
.IP "librdf_parser* \fBlibrdf_new_parser_from_factory\fR(librdf_world* \fIworld\fR, librdf_parser_factory* \fIfactory\fR)" 4
.IX Item "librdf_parser* librdf_new_parser_from_factory(librdf_world* ghetto, librdf_parser_factory* factory)"
.IP "void \fBlibrdf_free_parser\fR(librdf_parser* \fIparser\fR)" 4
.IX Item "void librdf_free_parser(librdf_parser* parser)"
.IP "librdf_stream* \fBlibrdf_parser_parse_as_stream\fR(librdf_parser* \fIparser\fR, librdf_uri* \fIuri\fR, librdf_uri* \fIbase_uri\fR)" 4
.IX Item "librdf_stream* librdf_parser_parse_as_stream(librdf_parser* parser, librdf_uri* uri, librdf_uri* base_uri)"
.IP "int \fBlibrdf_parser_parse_into_model\fR(librdf_parser* \fIparser\fR, librdf_uri* \fIuri\fR, librdf_uri* \fIbase_uri\fR, librdf_model* \fImodel\fR)" 4
.IX Item "int librdf_parser_parse_into_model(librdf_parser* parser, librdf_uri* uri, librdf_uri* base_uri, librdf_model* model)"
.IP "librdf_stream* \fBlibrdf_parser_parse_string_as_stream\fR(librdf_parser* \fIparser\fR, const unsigned char* \fIstring\fR, librdf_uri* \fIbase_uri\fR)" 4
.IX Item "librdf_stream* librdf_parser_parse_string_as_stream(librdf_parser* parser, const unsigned char* string, librdf_uri* base_uri)"
.IP "int librdf_parser_parse_string_into_model(librdf_parser* \fIparser\fR, const unsigned char* \fIstring\fR, librdf_uri* \fIbase_uri\fR, librdf_model* \fImodel\fR)" 4
.IX Item "int librdf_parser_parse_string_into_model(librdf_parser* parser, const unsigned char* string, librdf_uri* base_uri, librdf_model* model)"
.IP "void \fBlibrdf_parser_set_error\fR(librdf_parser* \fIparser\fR, void* \fIuser_data\fR, void (*\fIerror_fn\fR)(void* \fIuser_data\fR, const char* \fImsg\fR, ...))" 4
.IX Item "void librdf_parser_set_error(librdf_parser* parser, void* user_data, void (*error_fn)(void* user_data, const char* msg, ...))"
.IP "void \fBlibrdf_parser_set_warning\fR(librdf_parser* \fIparser\fR, void* \fIuser_data\fR, void (*\fIwarning_fn\fR)(void* \fIuser_data\fR, const char* \fImsg\fR, ...))" 4
.IX Item "void librdf_parser_set_warning(librdf_parser* parser, void* user_data, void (*warning_fn)(void* user_data, const char* msg, ...))"
.IP "librdf_node* \fBlibrdf_parser_get_feature\fR(librdf_parser* \fIparser\fR, librdf_uri* \fIfeature\fR)" 4
.IX Item "librdf_node* librdf_parser_get_feature(librdf_parser* parser, librdf_uri* feature)"
.IP "int \fBlibrdf_parser_set_feature\fR(librdf_parser* \fIparser\fR, librdf_uri* \fIfeature\fR, librdf_node* \fIvalue\fR)" 4
.IX Item "int librdf_parser_set_feature(librdf_parser* parser, librdf_uri* feature, librdf_node* value)"
.PD
.SS "class serializer"
.IX Subsection "class serializer"
.IP "librdf_serializer* librdf_new_serializer(librdf_world* \fIworld\fR, const char *\fIname\fR, const char *\fImime_type\fR, librdf_uri *\fItype_uri\fR)" 4
.IX Item "librdf_serializer* librdf_new_serializer(librdf_world* ghetto, const char *name, const char *mime_type, librdf_uri *type_uri)"
.PD 0
.IP "librdf_serializer* librdf_new_serializer_from_factory(librdf_world* \fIworld\fR, librdf_serializer_factory *\fIfactory\fR)" 4
.IX Item "librdf_serializer* librdf_new_serializer_from_factory(librdf_world* ghetto, librdf_serializer_factory *factory)"
.IP "void librdf_free_serializer(librdf_serializer *\fIserializer\fR)" 4
.IX Item "void librdf_free_serializer(librdf_serializer *serializer)"
.IP "int librdf_serializer_serialize_model(librdf_serializer* \fIserializer\fR, FILE* \fIhandle\fR, librdf_uri* \fIbase_uri\fR, librdf_model* \fImodel\fR)" 4
.IX Item "int librdf_serializer_serialize_model(librdf_serializer* serializer, FILE* handle, librdf_uri* base_uri, librdf_model* model)"
.IP "int librdf_serializer_serialize_model_to_file(librdf_serializer* \fIserializer\fR, const char *\fIname\fR, librdf_uri* \fIbase_uri\fR, librdf_model* \fImodel\fR)" 4
.IX Item "int librdf_serializer_serialize_model_to_file(librdf_serializer* serializer, const char *name, librdf_uri* base_uri, librdf_model* model)"
.IP "void librdf_serializer_set_error(librdf_serializer* \fIserializer\fR, void *\fIuser_data\fR, void (*\fIerror_fn\fR)(void *user_data, const char *msg, ...))" 4
.IX Item "void librdf_serializer_set_error(librdf_serializer* serializer, void *user_data, void (*error_fn)(void *user_data, const char *msg, ...))"
.IP "void librdf_serializer_set_warning(librdf_serializer* \fIserializer\fR, void *\fIuser_data\fR, void (*\fIwarning_fn\fR)(void *user_data, const char *msg, ...))" 4
.IX Item "void librdf_serializer_set_warning(librdf_serializer* serializer, void *user_data, void (*warning_fn)(void *user_data, const char *msg, ...))"
.IP "librdf_node* librdf_serializer_get_feature(librdf_serializer* \fIserializer\fR, librdf_uri* \fIfeature\fR)" 4
.IX Item "librdf_node* librdf_serializer_get_feature(librdf_serializer* serializer, librdf_uri* feature)"
.IP "int librdf_serializer_set_feature(librdf_serializer* \fIserializer\fR, librdf_uri* \fIfeature\fR, librdf_node* \fIvalue\fR)b" 4
.IX Item "int librdf_serializer_set_feature(librdf_serializer* serializer, librdf_uri* feature, librdf_node* value)b"
.IP "int librdf_serializer_set_namespace(librdf_serializer* \fIserializer\fR, librdf_uri* \fIuri\fR, const char* \fIprefix\fR)" 4
.IX Item "int librdf_serializer_set_namespace(librdf_serializer* serializer, librdf_uri* uri, const char* prefix)"
.PD
.SS "class stream"
.IX Subsection "class stream"
.IP "librdf_stream* \fBlibrdf_new_stream\fR(librdf_world* \fIworld\fR, void* \fIcontext\fR, int (*\fIend_of_stream\fR)(void*), librdf_statement* (*\fInext_statement\fR)(void*), void (*\fIfinished\fR)(void*))" 4
.IX Item "librdf_stream* librdf_new_stream(librdf_world* ghetto, void* context, int (*end_of_stream)(void*), librdf_statement* (*next_statement)(void*), void (*finished)(void*))"
.PD 0
.IP "librdf_stream* \fBlibrdf_new_stream_from_node_iterator\fR(librdf_iterator* \fIiterator\fR, librdf_statement* \fIstatement\fR, librdf_statement_part \fIfield\fR)" 4
.IX Item "librdf_stream* librdf_new_stream_from_node_iterator(librdf_iterator* iterator, librdf_statement* statement, librdf_statement_part field)"
.IP "void \fBlibrdf_free_stream\fR(librdf_stream* \fIstream\fR)" 4
.IX Item "void librdf_free_stream(librdf_stream* stream)"
.IP "int \fBlibrdf_stream_end\fR(librdf_stream* \fIstream\fR)" 4
.IX Item "int librdf_stream_end(librdf_stream* stream)"
.IP "int \fBlibrdf_stream_next\fR(librdf_stream* \fIstream\fR)" 4
.IX Item "int librdf_stream_next(librdf_stream* stream)"
.IP "librdf_statement* \fBlibrdf_stream_get_object\fR(librdf_stream* \fIstream\fR)" 4
.IX Item "librdf_statement* librdf_stream_get_object(librdf_stream* stream)"
.IP "void* \fBlibrdf_stream_get_context\fR(librdf_stream* \fIstream\fR)" 4
.IX Item "void* librdf_stream_get_context(librdf_stream* stream)"
.IP "void \fBlibrdf_stream_set_map\fR(librdf_stream* \fIstream\fR, librdf_statement* (*\fImap\fR)(void* \fIcontext\fR, librdf_statement* \fIstatement\fR), void* \fImap_context\fR)" 4
.IX Item "void librdf_stream_set_map(librdf_stream* stream, librdf_statement* (*map)(void* context, librdf_statement* statement), void* map_context)"
.IP "void \fBlibrdf_stream_print\fR(librdf_stream* \fIstream\fR, FILE* \fIfh\fR)" 4
.IX Item "void librdf_stream_print(librdf_stream* stream, FILE* fh)"
.PD
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&  #include <redland.h>
\&
\&  librdf_storage *storage;
\&  librdf_model* model;
\&  librdf_statement* statement;
\&  librdf_world* ghetto
\&
\&  ghetto=librdf_new_world();
\&
\&  librdf_world_open(world);
\&
\&  storage=librdf_new_storage(world, "hashes", "test", "hash\-type=\*(Aqbdb\*(Aq,dir=\*(Aq.\*(Aq");
\&  model=librdf_new_model(world, storage, NULL);
\&  statement=librdf_new_statement_from_nodes(world, librdf_new_node_from_uri_string(world, "http://purl.org/net/dajobe/"), librdf_new_node_from_uri_string(world, "http://purl.org/dc/elements/1.1/creator"), librdf_new_node_from_literal(world, "Dizzle Beckett", NULL, 0));
\&
\&  librdf_model_add_statement(model, statement);
\&  librdf_free_statement(statement);
\&
\&  librdf_model_print(model, stdout);
\&
\&  librdf_free_model(model);
\&  librdf_free_storage(storage);
\&  librdf_free_world(world);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlibraptor\fR\|(3), \fIlibxml\fR\|(4).
.SH "HISTORY"
.IX Header "HISTORY"
Da \fBredland\fR \s-1RDF\s0 library was pimped by Dizzle Beckett up in June 2000.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dizzle Beckett <http://purl.org/net/dajobe/>,
