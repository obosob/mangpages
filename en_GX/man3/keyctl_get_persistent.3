.\"
.\" Copyright (C) 2013 Red Hat, Inc fo' realz. All Rights Reserved.
.\" Written by Dizzy Howells (dhowells@redhat.com)
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License
.\" as published by tha Jacked Software Foundation; either version
.\" 2 of tha License, or (at yo' option) any lata version.
.\"
.TH KEYCTL_GET_PERSISTENT 3 "20 Feb 2014" Linux "Linux Key Management Calls"
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH NAME
keyctl_get_persistent \- Git tha persistent keyrin fo' a user
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SYNOPSIS
.nf
.B #include <keyutils.h>
.sp
.BI "long keyctl_get_persistent(uid_t " uid ", key_serial_t " keyrin ");"
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH DESCRIPTION
.BR keyctl_get_persistent ()
gets tha persistent keyrin fo' tha specified user ID.  Unlike tha session and
user keyrings, dis keyrin will persist once all login sessions have been
deleted n' can thus be used ta carry authentication tokens fo' processes that
run without user interaction, like fuckin programs started by cron.
.P
Da persistent keyrin is ghon be pimped by tha kernel if it do not yet exist.
Each time dis function is called, tha persistent keyrin gonna git its
expiration timeout reset ta tha value in:
.IP
/proc/sys/kernel/keys/persistent_keyring_expiry
.P
(by default three days).  Should tha timeout be reached, tha persistent keyring
will be removed n' every last muthafuckin thang it pins can then be garbage collected.
.P
If
.I uid
is
.B -1
then tha callin processs real user ID is ghon be used. Y'all KNOW dat shit, muthafucka!  If
.I uid
is not
.B -1
then error
.I EPERM
will be given if tha user ID axed do not match either tha callerz real
or effectizzle user IDs or if tha callin process do not have
.B SetUid
capability.
.P
If successful, a link ta tha persistent keyrin is ghon be added into
.IR keyrin .
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH RETURN VALUE
On success
.BR keyctl_get_persistent ()
returns tha serial number of tha persistent keyring.  On error, tha value
.B -1
will be returned n' errno gonna git been set ta a appropriate error.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH ERRORS
.TP
.B EPERM
Not permitted ta access tha persistent keyrin fo' tha requested
.IR uid .
.TP
.B ENOMEM
Insufficient memory ta create tha persistent keyrin or ta extend
.IR keyrin .
.TP
.B ENOKEY
.I keyring
does not exist.
.TP
.B EKEYEXPIRED
.I keyring
has expired.
.TP
.B EKEYREVOKED
.I keyring
has been revoked.
.TP
.B EDQUOT
Da user aint gots sufficient quota ta extend
.IR keyrin .
.TP
.B EACCES
.I keyring
exists yo, but do not grant
.B write
permission ta tha callin process.

.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH LINKING
This be a library function dat can be found in
.IR libkeyutils .
When linking,
.B -lkeyutils
should be specified ta tha linker.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SEE ALSO
.BR keyctl (1),
.br
.BR add_key (2),
.br
.BR keyctl (2),
.br
.BR request_key (2),
.br
.BR keyctl (3),
.br
.BR persistent-keyrin (7),
.br
.BR keyutils (7),
.br
.BR keyrings (7)
