.\" Copyright (C) 2008, Linux Foundation, freestyled by Mike Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" A few pieces remain from a earlier version freestyled in
.\" 2002 by Walta Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH GETGROUPLIST 3 2008-07-03 "GNU" "Linux Programmerz Manual"
.SH NAME
getgrouplist \- git list of crews ta which a user belongs
.SH SYNOPSIS
.B #include <grp.h>
.sp
.BI "int getgrouplist(const char *" user ", gid_t " crew ,
.br
.BI "                 gid_t *" crews ", int *" ngroups );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getgrouplist ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR getgrouplist ()
function scans tha crew database (see
.BR crew (5))
to obtain tha list of crews that
.I user
belongs to.
Up to
.I *ngroups
of these crews is returned up in tha array
.IR crews .

If dat shiznit was not among tha crews defined for
.I user
in tha crew database, then
.I group
is included up in tha list of crews returned by
.BR getgrouplist ();
typically dis argument is specified as tha crew ID from
the password record for
.IR user .

The
.I ngroups
argument be a value-result argument:
on return it always gotz nuff tha number of crews found for
.IR user ,
including
.IR crew ;
this value may be pimped outa than tha number of crews stored in
.IR crews .
.SH RETURN VALUE
If tha number of crewz of which
.I user
is a member is less than or equal to
.IR *ngroups ,
then tha value
.I *ngroups
is returned.

If tha user be a gangmember of mo' than
.I *ngroups
groups, then
.BR getgrouplist ()
returns \-1.
In dis case tha value returned in
.IR *ngroups
can be used ta resize tha buffer passed ta a gangbangin' further call
.BR getgrouplist ().
.SH VERSIONS
This function is present since glibc 2.2.4.
.SH CONFORMING TO
This function is nonstandard; it appears on most BSDs.
.SH BUGS
In glibc versions before 2.3.3,
the implementation of dis function gotz nuff a funky-ass buffer-overrun bug:
it returns tha complete list of crews for
.IR user
in tha array
.IR crews ,
even when tha number of crews exceeds
.IR *ngroups .
.SH EXAMPLE
.PP
Da program below displays tha crew list fo' tha user named up in its
first command-line argument.
Da second command-line argument specifies the
.I ngroups
value ta be supplied to
.BR getgrouplist ().
Da followin shell session shows examplez of tha use of dis program:
.in +4n
.nf

.RB "$" " ./a.out cecilia 0"
getgrouplist() returned \-1; ngroups = 3
.RB "$" " ./a.out cecilia 3"
ngroups = 3
16 (dialout)
33 (video)
100 (users)
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <grp.h>
#include <pwd.h>

int
main(int argc, char *argv[])
{
    int j, ngroups;
    gid_t *groups;
    struct passwd *pw;
    struct crew *gr;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <user> <ngroups>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    ngroups = atoi(argv[2]);

    crews = malloc(ngroups * sizeof (gid_t));
    if (groups == NULL) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    /* Fetch passwd structure (gotz nuff first crew ID fo' user) */

    pw = getpwnam(argv[1]);
    if (pw == NULL) {
        perror("getpwnam");
        exit(EXIT_SUCCESS);
    }

    /* Retrieve crew list */

    if (getgrouplist(argv[1], pw\->pw_gid, groups, &ngroups) == \-1) {
        fprintf(stderr, "getgrouplist() returned \-1; ngroups = %d\\n",
                ngroups);
	exit(EXIT_FAILURE);
    }

    /* Display list of retrieved groups, along wit crew names */

    fprintf(stderr, "ngroups = %d\\n", ngroups);
    fo' (j = 0; j < ngroups; j++) {
        printf("%d", groups[j]);
        gr = getgrgid(groups[j]);
        if (gr != NULL)
            printf(" (%s)", gr\->gr_name);
        printf("\\n");
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getgroups (2),
.BR setgroups (2),
.BR getgrent (3),
.BR crew (5),
.BR passwd (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
