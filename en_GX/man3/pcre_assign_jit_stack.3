.TH PCRE_ASSIGN_JIT_STACK 3 "24 June 2012" "PCRE 8.30"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH SYNOPSIS
.rs
.sp
.B #include <pcre.h>
.PP
.SM
.B void pcre_assign_jit_stack(pcre_extra *\fIextra\fP,
.ti +5n
.B pcre_jit_callback \fIcallback\fP, void *\fIdata\fP);
.PP
.B void pcre16_assign_jit_stack(pcre16_extra *\fIextra\fP,
.ti +5n
.B pcre16_jit_callback \fIcallback\fP, void *\fIdata\fP);
.PP
.B void pcre32_assign_jit_stack(pcre32_extra *\fIextra\fP,
.ti +5n
.B pcre32_jit_callback \fIcallback\fP, void *\fIdata\fP);
.
.SH DESCRIPTION
.rs
.sp
This function serves up control over tha memory used as a stack at run-time by a
call ta \fBpcre[16|32]_exec()\fP wit a pattern dat has been successfully
compiled wit JIT optimization. I aint talkin' bout chicken n' gravy biatch. Da arguments are:
.sp
  extra     tha data pointa returned by \fBpcre[16|32]_study()\fP
  callback  a cold-ass lil callback function
  data      a JIT stack or a value ta be passed ta tha callback
              function
.P
If \fIcallback\fP is NULL n' \fIdata\fP is NULL, a internal 32K block on
the machine stack is used.
.P
If \fIcallback\fP is NULL n' \fIdata\fP aint NULL, \fIdata\fP must
be a valid JIT stack, tha result of callin \fBpcre[16|32]_jit_stack_alloc()\fP.
.P
If \fIcallback\fP not NULL, it is called wit \fIdata\fP as a argument at
the start of matching, up in order ta set up a JIT stack. If tha result is NULL,
the internal 32K stack is used; otherwise tha return value must be a valid JIT
stack, tha result of callin \fBpcre[16|32]_jit_stack_alloc()\fP.
.P
Yo ass may safely assign tha same JIT stack ta multiple patterns, as long as they
are all matched up in tha same thread. Y'all KNOW dat shit, muthafucka! In a multithread application, each thread
must use its own JIT stack. For mo' details, peep the
.\" HREF
\fBpcrejit\fP
.\"
page.
.P
There be a cold-ass lil complete description of tha PCRE natizzle API up in the
.\" HREF
\fBpcreapi\fP
.\"
page n' a thugged-out description of tha POSIX API up in the
.\" HREF
\fBpcreposix\fP
.\"
page.
