.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH FLOCKFILE 3  2013-07-23 "" "Linux Programmerz Manual"
.SH NAME
flockfile, ftrylockfile, funlockfile \- lock FILE fo' stdio
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "void flockfile(FILE *" filehandle );
.br
.BI "int ftrylockfile(FILE *" filehandle );
.br
.BI "void funlockfile(FILE *" filehandle );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
All functions shown above:
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE ||
_SVID_SOURCE || _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
Da stdio functions is thread-safe.
This be  bigged up  by assigning
to each
.I FILE
object a lockcount n' (if tha lockcount is nonzero)
an ownin thread.
For each library call, these functions wait until the
.I FILE
object
is no longer locked by a gangbangin' finger-lickin' different thread, then lock it, do the
axed I/O, n' unlock tha object again.
.LP
(Note: dis lockin has not a god damn thang ta do wit tha file lockin done
by functions like
.BR flock (2)
and
.BR lockf (3).)
.LP
All dis is invisible ta tha C-programmer yo, but there may be two
reasons ta wish fo' mo' detailed control.
On tha one hand, maybe
a seriez of I/O actions by one thread belongs together, n' should
not be interrupted by tha I/O of some other thread.
On tha other hand, maybe tha lockin overhead should be avoided
for pimped outa efficiency.
.LP
To dis end, a thread can explicitly lock the
.I FILE
object,
then do its seriez of I/O actions, then unlock.
This prevents
other threadz from comin up in between.
If tha reason fo' bustin
this was ta big up pimped outa efficiency, one do tha I/O with
the nonlockin versionz of tha stdio functions: with
.BR getc_unlocked (3)
and
.BR putc_unlocked (3)
instead of
.BR getc (3)
and
.BR putc (3).
.LP
The
.BR flockfile ()
function waits for
.I *filehandle
to be
no longer locked by a gangbangin' finger-lickin' different thread, then make the
current thread balla of
.IR *filehandle ,
and increments
the lockcount.
.LP
The
.BR funlockfile ()
function decrements tha lock count.
.LP
The
.BR ftrylockfile ()
function be a nonblockin version
of
.BR flockfile ().
It do not a god damn thang up in case some other thread
owns
.IR *filehandle ,
and it obtains ballershizzle n' increments
the lockcount otherwise.
.SH RETURN VALUE
The
.BR ftrylockfile ()
function returns zero fo' success
(the lock was obtained), n' nonzero fo' failure.
.SH ERRORS
None.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR flockfile (),
.BR ftrylockfile (),
and
.BR funlockfile ()
functions is thread-safe.
.SH CONFORMING TO
POSIX.1-2001.
.SH AVAILABILITY
These functions is available when
.B _POSIX_THREAD_SAFE_FUNCTIONS
is defined.
They is up in libc since libc 5.1.1 n' up in glibc
since glibc 2.0.
.SH SEE ALSO
.BR unlocked_stdio (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
