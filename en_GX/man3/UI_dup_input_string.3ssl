.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ui 3"
.TH ui 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
UI_new, UI_new_method, UI_free, UI_add_input_string, UI_dup_input_string,
UI_add_verify_string, UI_dup_verify_string, UI_add_input_boolean,
UI_dup_input_boolean, UI_add_info_string, UI_dup_info_string,
UI_add_error_string, UI_dup_error_string, UI_construct_prompt,
UI_add_user_data, UI_get0_user_data, UI_get0_result, UI_process,
UI_ctrl, UI_set_default_method, UI_get_default_method, UI_get_method,
UI_set_method, UI_OpenSSL, ERR_load_UI_strings \- New User Interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ui.h>
\&
\& typedef struct ui_st UI;
\& typedef struct ui_method_st UI_METHOD;
\&
\& UI *UI_new(void);
\& UI *UI_new_method(const UI_METHOD *method);
\& void UI_free(UI *ui);
\&
\& int UI_add_input_string(UI *ui, const char *prompt, int flags,
\&        char *result_buf, int minsize, int maxsize);
\& int UI_dup_input_string(UI *ui, const char *prompt, int flags,
\&        char *result_buf, int minsize, int maxsize);
\& int UI_add_verify_string(UI *ui, const char *prompt, int flags,
\&        char *result_buf, int minsize, int maxsize, const char *test_buf);
\& int UI_dup_verify_string(UI *ui, const char *prompt, int flags,
\&        char *result_buf, int minsize, int maxsize, const char *test_buf);
\& int UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,
\&        const char *ok_chars, const char *cancel_chars,
\&        int flags, char *result_buf);
\& int UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,
\&        const char *ok_chars, const char *cancel_chars,
\&        int flags, char *result_buf);
\& int UI_add_info_string(UI *ui, const char *text);
\& int UI_dup_info_string(UI *ui, const char *text);
\& int UI_add_error_string(UI *ui, const char *text);
\& int UI_dup_error_string(UI *ui, const char *text);
\&
\& /* These is tha possible flags.  They can be or\*(Aqed together n' shit. */
\& #define UI_INPUT_FLAG_ECHO             0x01
\& #define UI_INPUT_FLAG_DEFAULT_PWD      0x02
\&
\& char *UI_construct_prompt(UI *ui_method,
\&        const char *object_desc, const char *object_name);
\&
\& void *UI_add_user_data(UI *ui, void *user_data);
\& void *UI_get0_user_data(UI *ui);
\&
\& const char *UI_get0_result(UI *ui, int i);
\&
\& int UI_process(UI *ui);
\&
\& int UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f)());
\& #define UI_CTRL_PRINT_ERRORS           1
\& #define UI_CTRL_IS_REDOABLE            2
\&
\& void UI_set_default_method(const UI_METHOD *meth);
\& const UI_METHOD *UI_get_default_method(void);
\& const UI_METHOD *UI_get_method(UI *ui);
\& const UI_METHOD *UI_set_method(UI *ui, const UI_METHOD *meth);
\&
\& UI_METHOD *UI_OpenSSL(void);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1UI\s0 standz fo' User Interface, n' is general purpose set of routines to
prompt tha user fo' text-based shiznit. I aint talkin' bout chicken n' gravy biatch.  Through user-written methods
(see \fIui_create\fR\|(3)), promptin can be done up in any way
imaginable, be it plain text prompting, all up in dialog boxes or from a
beeper.
.PP
All tha functions work all up in a cold-ass lil context of tha type \s-1UI. \s0 This context
gotz nuff all tha shiznit needed ta prompt erectly as well as a
reference ta a \s-1UI_METHOD,\s0 which be a ordered vector of functions that
carry up tha actual prompting.
.PP
Da first thang ta do is ta create a \s-1UI\s0 wit \fIUI_new()\fR or \fIUI_new_method()\fR,
then add shiznit ta it wit tha UI_add or UI_dup functions.  Also,
user-defined random data can be passed down ta tha underlyin method
all up in calls ta UI_add_user_data.  Da default \s-1UI\s0 method don't care
about these data yo, but other methodz might.  Finally, use \fIUI_process()\fR
to straight-up big-ass up tha promptin n' \fIUI_get0_result()\fR ta find tha result
to tha prompt.
.PP
A \s-1UI\s0 can contain mo' than one prompt, which is performed up in tha given
sequence.  Each prompt gets a index number which is returned by the
UI_add n' UI_dup functions, n' has ta be used ta git tha corresponding
result wit \fIUI_get0_result()\fR.
.PP
Da functions is as bigs up:
.PP
\&\fIUI_new()\fR creates a freshly smoked up \s-1UI\s0 rockin tha default \s-1UI\s0 method. Y'all KNOW dat shit, muthafucka!  When done with
this \s-1UI,\s0 it should be freed rockin \fIUI_free()\fR.
.PP
\&\fIUI_new_method()\fR creates a freshly smoked up \s-1UI\s0 rockin tha given \s-1UI\s0 method. Y'all KNOW dat shit, muthafucka!  When done with
this \s-1UI,\s0 it should be freed rockin \fIUI_free()\fR.
.PP
\&\fIUI_OpenSSL()\fR returns tha built-in \s-1UI\s0 method (note: not tha default one,
since tha default can be chizzled. Y'all KNOW dat shit, muthafucka!  See further on).  This method is the
most machine/OS dependent part of OpenSSL n' normally generates the
most problems when porting.
.PP
\&\fIUI_free()\fR removes a \s-1UI\s0 from memory, along wit all other piecez of memory
thatz connected ta it, like duplicated input strings, thangs up in dis biatch n' others.
.PP
\&\fIUI_add_input_string()\fR n' \fIUI_add_verify_string()\fR add a prompt ta tha \s-1UI,\s0
as well as flags n' a result buffer n' tha desired minimum n' maximum
sizez of tha result.  Da given shiznit is used ta prompt for
information, fo' example a password, n' ta verify a password (i.e. having
the user enta it twice n' check dat tha same strang was entered twice).
\&\fIUI_add_verify_string()\fR takes n' extra argument dat should be a pointer
to tha result buffer of tha input strang dat itz supposed ta verify, or
verification will fail.
.PP
\&\fIUI_add_input_boolean()\fR addz a prompt ta tha \s-1UI\s0 thatz supposed ta be answered
in a funky-ass boolean way, wit a single characta fo' yeaaaa n' a gangbangin' finger-lickin' different character
for no.  A set of charactas dat can be used ta quit tha prompt is given
as well.  Da prompt itself is straight-up divided up in two, one part bein the
descriptizzle text (given all up in tha \fIprompt\fR argument) n' one describing
the possible lyrics (given all up in tha \fIaction_desc\fR argument).
.PP
\&\fIUI_add_info_string()\fR n' \fIUI_add_error_string()\fR add strings dat is shown at
the same time as tha prompt fo' extra shiznit or ta show a error string.
Da difference between tha two is only conceptual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  With tha builtin method,
therez no technical difference between em.  Other methodz may make a
difference between them, however.
.PP
Da flags currently supported is \s-1UI_INPUT_FLAG_ECHO,\s0 which is relevant for
\&\fIUI_add_input_string()\fR n' gonna git tha playas response be echoed (when
promptin fo' a password, dis flag should obviously not be used, and
\&\s-1UI_INPUT_FLAG_DEFAULT_PWD,\s0 which means dat a thugged-out default password of some
sort is ghon be used (completely dependin on tha application n' tha \s-1UI\s0
method).
.PP
\&\fIUI_dup_input_string()\fR, \fIUI_dup_verify_string()\fR, \fIUI_dup_input_boolean()\fR,
\&\fIUI_dup_info_string()\fR n' \fIUI_dup_error_string()\fR is basically tha same
as they UI_add counterparts, except dat they make they own copies
of all strings.
.PP
\&\fIUI_construct_prompt()\fR be a helper function dat can be used ta create
a prompt from two piecez of shiznit: a description n' a name.
Da default constructor (if there is none provided by tha method used)
creates a strang "Enta \fIdescription\fR fo' \fIname\fR:\*(L".  With the
description \*(R"pass phrase\*(L" n' tha file name \*(R"foo.key\*(L", dat becomes
\&\*(R"Enta pass phrase fo' foo.key:".  Other methodz may create whatever
strin n' may include encodings dat is ghon be processed by tha other
method functions.
.PP
\&\fIUI_add_user_data()\fR addz a piece of memory fo' tha method ta use at any
time.  Da builtin \s-1UI\s0 method don't care bout dis info.  Note dat several
calls ta dis function don't add data, it replaces tha previous blob
with tha one given as argument.
.PP
\&\fIUI_get0_user_data()\fR retrieves tha data dat has last been given ta the
\&\s-1UI\s0 wit \fIUI_add_user_data()\fR.
.PP
\&\fIUI_get0_result()\fR returns a pointa ta tha result buffer associated with
the shiznit indexed by \fIi\fR.
.PP
\&\fIUI_process()\fR goes all up in tha shiznit given so far, do all tha printing
and promptin n' returns.
.PP
\&\fIUI_ctrl()\fR addz extra control fo' tha application lyricist.  For now, it
understandz two commands: \s-1UI_CTRL_PRINT_ERRORS,\s0 which make \fIUI_process()\fR
print tha OpenSSL error stack as part of processin tha \s-1UI,\s0 and
\&\s-1UI_CTRL_IS_REDOABLE,\s0 which returns a gangbangin' flag sayin if tha used \s-1UI\s0 can
be used again n' again n' again or not.
.PP
\&\fIUI_set_default_method()\fR chizzlez tha default \s-1UI\s0 method ta tha one given.
.PP
\&\fIUI_get_default_method()\fR returns a pointa ta tha current default \s-1UI\s0 method.
.PP
\&\fIUI_get_method()\fR returns tha \s-1UI\s0 method associated wit a given \s-1UI.\s0
.PP
\&\fIUI_set_method()\fR chizzlez tha \s-1UI\s0 method associated wit a given \s-1UI.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIui_create\fR\|(3), \fIui_compat\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
Da \s-1UI\s0 section was first introduced up in OpenSSL 0.9.7.
.SH "AUTHOR"
.IX Header "AUTHOR"
Slick Rick Levitte (richard@levitte.org) fo' tha OpenSSL project
(http://www.openssl.org).
