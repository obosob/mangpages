.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Simple::HTMLBatch 3"
.TH Pod::Simple::HTMLBatch 3 "2013-05-03" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Simple::HTMLBatch \- convert nuff muthafuckin Pod filez ta nuff muthafuckin HTML files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  perl \-MPod::Simple::HTMLBatch \-e \*(AqPod::Simple::HTMLBatch::go\*(Aq up in out
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used fo' hustlin batch-conversionz of a shitload of \s-1HTML\s0
documents
.PP
This class is \s-1NOT\s0 a subclass of Pod::Simple::HTML
(nor of wack oldschool Pod::Html) \*(-- although it uses
Pod::Simple::HTML fo' bustin tha conversion of each document.
.PP
Da aiiight use of dis class is like so:
.PP
.Vb 5
\&  use Pod::Simple::HTMLBatch;
\&  mah $batchconv = Pod::Simple::HTMLBatch\->new;
\&  $batchconv\->some_option( some_value );
\&  $batchconv\->some_other_option( some_other_value );
\&  $batchconv\->batch_convert( \e@search_dirs, $output_dir );
.Ve
.SS "\s-1FROM THE COMMAND LINE\s0"
.IX Subsection "FROM THE COMMAND LINE"
Note dat dis class also provides
(but do not export) tha function Pod::Simple::HTMLBatch::go.
This is basically just a gangbangin' finger-lickin' dirty-ass shortcut fo' \f(CW\*(C`Pod::Simple::HTMLBatch\->batch_convert(@ARGV)\*(C'\fR.
It aint nuthin but meant ta be handy fo' callin from tha command line.
.PP
But fuck dat shiznit yo, tha word on tha street is dat tha shortcut requires dat you specify exactly two command-line
arguments, \f(CW\*(C`indirs\*(C'\fR n' \f(CW\*(C`outdir\*(C'\fR.
.PP
Example:
.PP
.Vb 4
\&  % mkdir out_html
\&  % perl \-MPod::Simple::HTMLBatch \-e Pod::Simple::HTMLBatch::go @INC out_html
\&      (to convert tha pod from Perl\*(Aqs @INC
\&       filez under tha directory ./out_html)
.Ve
.PP
(Note dat tha command line there gotz nuff a literal atsign-I-N-C.  This
is handled as a special case by batch_convert, up in order ta save you having
to enta tha odd-lookin "\*(L" as tha straight-up original gangsta command-line parameta when you
mean \*(R"just use whateverz up in \f(CW@INC\fR".)
.PP
Example:
.PP
.Vb 5
\&  % mkdir ../seekrut
\&  % chmod og\-rx ../seekrut
\&  % perl \-MPod::Simple::HTMLBatch \-e Pod::Simple::HTMLBatch::go . ../seekrut
\&      (to convert tha pod under tha current dir tha fuck into HTML
\&       filez under tha directory ./seekrut)
.Ve
.PP
Example:
.PP
.Vb 2
\&  % perl \-MPod::Simple::HTMLBatch \-e Pod::Simple::HTMLBatch::go happydocs .
\&      (to convert all pod from happydocs tha fuck into tha current directory)
.Ve
.SH "MAIN METHODS"
.IX Header "MAIN METHODS"
.ie n .IP "$batchconv = Pod::Simple::HTMLBatch\->new;" 4
.el .IP "\f(CW$batchconv\fR = Pod::Simple::HTMLBatch\->new;" 4
.IX Item "$batchconv = Pod::Simple::HTMLBatch->new;"
This \s-1TODO\s0
.ie n .IP "$batchconv\->batch_convert( \fIindirs\fR, \fIoutdir\fR );" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( \fIindirs\fR, \fIoutdir\fR );" 4
.IX Item "$batchconv->batch_convert( indirs, outdir );"
this \s-1TODO\s0
.ie n .IP "$batchconv\->batch_convert( undef    , ...);" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( undef    , ...);" 4
.IX Item "$batchconv->batch_convert( undef , ...);"
.PD 0
.ie n .IP "$batchconv\->batch_convert( q{@INC}, ...);" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( q{@INC}, ...);" 4
.IX Item "$batchconv->batch_convert( q{@INC}, ...);"
.PD
These two joints fo' \fIindirs\fR specify dat tha aiiight Perl \f(CW@INC\fR
.ie n .IP "$batchconv\->batch_convert( \e@dirs , ...);" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( \e@dirs , ...);" 4
.IX Item "$batchconv->batch_convert( @dirs , ...);"
This specifies dat tha input directories is tha shit in
the arrayref \f(CW\*(C`\e@dirs\*(C'\fR.
.ie n .IP "$batchconv\->batch_convert( ""somedir"" , ...);" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( ``somedir'' , ...);" 4
.IX Item "$batchconv->batch_convert( somedir , ...);"
This specifies dat tha director \*(L"somedir\*(R" is tha input.
(This can be a absolute or relatizzle path, it don't matter.)
.Sp
A common value you might want would be just \*(L".\*(R" fo' tha current
directory:
.Sp
.Vb 1
\&     $batchconv\->batch_convert( "." , ...);
.Ve
.ie n .IP "$batchconv\->batch_convert( 'somedir:someother:also' , ...);" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( 'somedir:someother:also' , ...);" 4
.IX Item "$batchconv->batch_convert( 'somedir:someother:also' , ...);"
This specifies dat you want tha dirs \*(L"somedir\*(R", \*(L"someother\*(R", n' \*(L"also\*(R"
scanned, just as if you'd passed tha arrayref
\&\f(CW\*(C`[qw( somedir someother also)]\*(C'\fR.  Note dat a \*(L":\*(R"\-separator is normal
under Unix yo, but Under MSWin, you gonna need \f(CW\*(Aqsomedir;someother;also\*(Aq\fR
instead, since tha pathsep on MSWin is \*(L";\*(R" instead of \*(L":\*(R".  (And
\&\fIthat\fR is cuz \*(L":\*(R" often comes up in paths, like
\&\f(CW"c:/perl/lib"\fR.)
.Sp
(Exactly what tha fuck separator characta should be used, is gotten from
\&\f(CW$Config::Config{\*(Aqpath_sep\*(Aq}\fR, via tha Config module.)
.ie n .IP "$batchconv\->batch_convert( ... , undef );" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( ... , undef );" 4
.IX Item "$batchconv->batch_convert( ... , undef );"
This specifies dat you want tha \s-1HTML\s0 output ta go tha fuck into tha current
directory.
.Sp
(Note dat a missin or undefined value means a gangbangin' finger-lickin' different thang in
the first slot than up in tha second. Y'all KNOW dat shit, muthafucka!  Thatz so dat \f(CW\*(C`batch_convert()\*(C'\fR
with no arguments (or undef arguments) means "go from \f(CW@INC\fR, into
the current directory.)
.ie n .IP "$batchconv\->batch_convert( ... , 'somedir' );" 4
.el .IP "\f(CW$batchconv\fR\->batch_convert( ... , 'somedir' );" 4
.IX Item "$batchconv->batch_convert( ... , 'somedir' );"
This specifies dat you want tha \s-1HTML\s0 output ta go tha fuck into the
directory 'somedir'.
(This can be a absolute or relatizzle path, it don't matter.)
.PP
Note dat you can also call \f(CW\*(C`batch_convert\*(C'\fR as a cold-ass lil class method,
like so:
.PP
.Vb 1
\&  Pod::Simple::HTMLBatch\->batch_convert( ... );
.Ve
.PP
That is just short fo' this:
.PP
.Vb 1
\&  Pod::Simple::HTMLBatch\-> new\-> batch_convert(...);
.Ve
.PP
That is, it runs a cold-ass lil conversion wit default options, for
whatever inputdirs n' output dir you specify.
.SS "\s-1ACCESSOR METHODS\s0"
.IX Subsection "ACCESSOR METHODS"
Da followin is all accessor methodz \*(-- dat is, they don't do anything
on they own yo, but just alta tha contentz of tha conversion object,
which comprises tha options fo' dis particular batch conversion.
.PP
We show tha \*(L"put\*(R" form of tha accessors below (i.e., tha syntax you use
for settin tha accessor ta a specific value).  But you can also
call each method wit no parametas ta git its current value.  For
example, \f(CW\*(C`$self\->contents_file()\*(C'\fR returns tha current value of
the contents_file attribute.
.ie n .IP "$batchconv\->verbose( \fInonnegative_integer\fR );" 4
.el .IP "\f(CW$batchconv\fR\->verbose( \fInonnegative_integer\fR );" 4
.IX Item "$batchconv->verbose( nonnegative_integer );"
This controls how tha fuck verbose ta be durin batch conversion, as far as
notes ta \s-1STDOUT \s0(or whatever is \f(CW\*(C`select\*(C'\fR'd) bout how tha fuck tha conversion
is going.  If 0, no progress shiznit is printed.
If 1 (the default value), some progress shiznit is printed.
Higher joints print mo' shiznit.
.ie n .IP "$batchconv\->index( \fItrue-or-false\fR );" 4
.el .IP "\f(CW$batchconv\fR\->index( \fItrue-or-false\fR );" 4
.IX Item "$batchconv->index( true-or-false );"
This controls whether or not each \s-1HTML\s0 page is liable ta git a lil
table of contents all up in tha top (which we call a \*(L"index\*(R" fo' historical
reasons).  This is legit by default.
.ie n .IP "$batchconv\->contents_file( \fIfilename\fR );" 4
.el .IP "\f(CW$batchconv\fR\->contents_file( \fIfilename\fR );" 4
.IX Item "$batchconv->contents_file( filename );"
If set, should be tha name of a gangbangin' file (in tha output directory)
to write tha \s-1HTML\s0 index to.  Da default value is \*(L"index.html\*(R".
If you set dis ta a gangbangin' false value, no contents file is ghon be written.
.ie n .IP "$batchconv\->contents_page_start( \fIHTML_string\fR );" 4
.el .IP "\f(CW$batchconv\fR\->contents_page_start( \fIHTML_string\fR );" 4
.IX Item "$batchconv->contents_page_start( HTML_strin );"
This specifies what tha fuck strang should be put all up in tha beginnin of
the contents page.
Da default be a strang mo' or less like this:
.Sp
.Vb 4
\&  <html>
\&  <head><title>Perl Documentation</title></head>
\&  <body class=\*(Aqcontentspage\*(Aq>
\&  <h1>Perl Documentation</h1>
.Ve
.ie n .IP "$batchconv\->contents_page_end( \fIHTML_string\fR );" 4
.el .IP "\f(CW$batchconv\fR\->contents_page_end( \fIHTML_string\fR );" 4
.IX Item "$batchconv->contents_page_end( HTML_strin );"
This specifies what tha fuck strang should be put all up in tha end of tha contents page.
Da default be a strang mo' or less like this:
.Sp
.Vb 4
\&  <p class=\*(Aqcontentsfooty\*(Aq>Generated by
\&  Pod::Simple::HTMLBatch v3.01 under Perl v5.008
\&  <br >At Fri May 14 22:26:42 2004 GMT,
\&  which is Fri May 14 14:26:42 2004 local time.</p>
.Ve
.ie n .IP "$batchconv\->add_css( $url );" 4
.el .IP "\f(CW$batchconv\fR\->add_css( \f(CW$url\fR );" 4
.IX Item "$batchconv->add_css( $url );"
\&\s-1TODO\s0
.ie n .IP "$batchconv\->add_javascript( $url );" 4
.el .IP "\f(CW$batchconv\fR\->add_javascript( \f(CW$url\fR );" 4
.IX Item "$batchconv->add_javascript( $url );"
\&\s-1TODO\s0
.ie n .IP "$batchconv\->css_flurry( \fItrue-or-false\fR );" 4
.el .IP "\f(CW$batchconv\fR\->css_flurry( \fItrue-or-false\fR );" 4
.IX Item "$batchconv->css_flurry( true-or-false );"
If legit (the default value), we autogenerate some \s-1CSS\s0 filez up in the
output directory, n' set our \s-1HTML\s0 filez ta use them.
\&\s-1TODO:\s0 continue
.ie n .IP "$batchconv\->javascript_flurry( \fItrue-or-false\fR );" 4
.el .IP "\f(CW$batchconv\fR\->javascript_flurry( \fItrue-or-false\fR );" 4
.IX Item "$batchconv->javascript_flurry( true-or-false );"
If legit (the default value), we autogenerate a JavaScript up in the
output directory, n' set our \s-1HTML\s0 filez ta use dat shit.  Currently,
the JavaScript is used only ta git tha browser ta remember what
styleshizzle it prefers.
\&\s-1TODO:\s0 continue
.ie n .IP "$batchconv\->no_contents_links( \fItrue-or-false\fR );" 4
.el .IP "\f(CW$batchconv\fR\->no_contents_links( \fItrue-or-false\fR );" 4
.IX Item "$batchconv->no_contents_links( true-or-false );"
\&\s-1TODO\s0
.ie n .IP "$batchconv\->html_render_class( \fIclassname\fR );" 4
.el .IP "\f(CW$batchconv\fR\->html_render_class( \fIclassname\fR );" 4
.IX Item "$batchconv->html_render_class( classname );"
This sets what tha fuck class is used fo' renderin tha files.
Da default is \*(L"Pod::Simple::HTML\*(R".  If you set it ta suttin' else,
it should probably be a subclass of Pod::Simple::HTML, n' you should
\&\f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR dat class so thatz itz loaded before
Pod::Simple::HTMLBatch tries loadin dat shit.
.ie n .IP "$batchconv\->search_class( \fIclassname\fR );" 4
.el .IP "\f(CW$batchconv\fR\->search_class( \fIclassname\fR );" 4
.IX Item "$batchconv->search_class( classname );"
This sets what tha fuck class is used fo' searchin fo' tha files.
Da default is \*(L"Pod::Simple::Search\*(R".  If you set it ta suttin' else,
it should probably be a subclass of Pod::Simple::Search, n' you should
\&\f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR dat class so thatz itz loaded before
Pod::Simple::HTMLBatch tries loadin dat shit.
.SH "NOTES ON CUSTOMIZATION"
.IX Header "NOTES ON CUSTOMIZATION"
\&\s-1TODO\s0
.PP
.Vb 2
\&  call add_css($someurl) ta add styleshizzle as alternate
\&  call add_css($someurl,1) ta add as primary stylesheet
\&
\&  call add_javascript
\&
\&  subclass Pod::Simple::HTML n' set $batchconv\->html_render_class to
\&    dat classname
\&  n' maybe override
\&    $page\->batch_mode_page_object_init($self, $module, $infile, $outfile, $depth)
\&  or maybe override
\&    $batchconv\->batch_mode_page_object_init($page, $module, $infile, $outfile, $depth)
\&  subclass Pod::Simple::Search n' set $batchconv\->search_class to
\&    dat classname
.Ve
.SH "ASK ME!"
.IX Header "ASK ME!"
If you wanna do some kind of big-ass pod-to-HTML version wit some
particular kind of option dat you don't peep how tha fuck ta big up rockin this
module, email me (\f(CW\*(C`sburke@cpan.org\*(C'\fR) n' I be bout ta probably gotz a phat idea
how ta do dat shit. For reasonz of concision n' energetic laziness, some
methodz n' options up in dis module (and tha dozen modulez it dependz on)
are undocumented; but one of dem undocumented bits might be just what
yo ass is lookin for.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Simple, Pod::Simple::HTMLBatch, perlpod, perlpodspec
.SH "SUPPORT"
.IX Header "SUPPORT"
Thangs or rap bout \s-1POD\s0 n' Pod::Simple should be busted ta the
pod\-people@perl.org mail list. Right back up in yo muthafuckin ass. Send a empty email to
pod\-people\-subscribe@perl.org ta subscribe.
.PP
This module is managed up in a open GitHub repository,
<https://github.com/theory/pod\-simple/>. Feel free ta fork n' contribute, or
to clone <git://github.com/theory/pod\-simple.git> n' bust patches!
.PP
Patches against Pod::Simple is welcome. Please bust bug reports to
<bug\-pod\-simple@rt.cpan.org>.
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2002 Shizzle M. Burke.
.PP
This library is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.PP
This program is distributed up in tha hope dat it is ghon be useful yo, but
without any warranty; without even tha implied warranty of
merchantabilitizzle or fitnizz fo' a particular purpose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pod::Simple was pimped by Shizzle M. Burke <sburke@cpan.org>.
But don't bother him, he retired.
.PP
Pod::Simple is maintained by:
.IP "\(bu" 4
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR
.IP "\(bu" 4
Hans Dieta Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR
.IP "\(bu" 4
Dizzy E. Wheela \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
