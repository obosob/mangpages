'\" t
.\"     Title: xgrabdevice
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XGRABDEVICE" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGrabDevice, XUngrabDevice \- grab/release tha specified extension device
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
int XGrabDevice( Display *display,
                 XDevice* device,
                 Window grab_window,
                 Bool baller_events,
                 int event_count,
                 XEventClass *event_list,
                 int this_device_mode,
                 int other_devices_mode,
                 Time time);
.fi
.sp
.nf
int XUngrabDevice( Display *display,
                   XDevice *device,
                   Time time);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
device
       Specifies tha thang ta be grabbed or busted out\&.
.fi
.sp
.nf
grab_window
       Specifies tha id of a window ta be associated wit the
       device\&.
.fi
.sp
.nf
baller_events
       Specifies a Boolean value dat indicates whether
       theevents from tha deviceare ta be reported as usual or
       reported wit respect ta tha grab windowif selected by
       tha event list\&.
.fi
.sp
.nf
event_count
       Specifies tha number of elements up in tha event_list
       array\&.
.fi
.sp
.nf
event_list
       Specifies a pointa ta a list of event classes that
       indicates which eventsthe client wishes ta receive\&.
       These event classes must have beenobtained specifying
       tha thang bein grabbed\&.
.fi
.sp
.nf
this_device_mode
       Specifies further processin of events from this
       device\&.Yo ass can pass GrabModeSyncor GrabModeAsync\&.
.fi
.sp
.nf
other_devices_mode
       Specifies further processin of events from other
       devices\&.Yo ass can pass GrabModeSyncor GrabModeAsync\&.
.fi
.sp
.nf
time
       Specifies tha time\&.Yo ass can pass either a timestamp or
       CurrentTime\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
Da XGrabDevice request actively grabs control of tha device
and generates DeviceFocusIn n' DeviceFocusOut events\&. Further
device events is reported only ta tha grabbing
client\&.XGrabDevice overrides any actizzle thang grab by this
client\&. event_list be a pointa ta a list of event classes\&.
This list indicates which events tha client wishes ta receive
while tha grab be active\&. If baller_events is False, all
generated thang events is reported wit respect to
grab_window if selected\&. If baller_events is True n' if a
generated thang event would normally be reported ta this
client, it is reported normally; otherwise, tha event is
reported wit respect ta tha grab_window, n' is only reported
if specified up in tha event_list\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If tha this_device_mode argument is GrabModeAsync, thang event
processin continues as usual\&. If tha thang is currently
frozen by dis client, then processin of thang events is
resumed\&. If tha this_device_mode argument is GrabModeSync, the
state of tha thang (as peeped by client applications) appears to
freeze, n' tha X server generates no further thang events
until tha grabbin client thangs a releasin XAllowDeviceEvents
call or until tha thang grab is busted out\& fo' realz. Actual device
changes is not lost while tha thang is frozen; they are
simply queued up in tha server fo' lata processing\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If other_devices_mode is GrabModeAsync, processin of events
from other devices is unaffected by activation of tha grab\&. If
other_devices_mode is GrabModeSync, tha state of all devices
except tha grabbed thang (as peeped by client applications)
appears ta freeze, n' tha X server generates no further events
from dem devices until tha grabbin client thangs a releasing
XAllowDeviceEvents call or until tha thang grab is busted out\&.
Actual events is not lost while tha devices is frozen; they
are simply queued up in tha server fo' lata processing\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If tha thang be actively grabbed by some other client,
XGrabDevice fails n' returns AlreadyGrabbed\&. If grab_window is
not viewable, it fails n' returns GrabNotViewable\&. If the
device is frozen by a actizzle grab of another client, it fails
and returns GrabFrozen\&. If tha specified time is earlier than
the last\-device\-grab time or lata than tha current X server
time, it fails n' returns GrabInvalidTime\&. Otherwise, the
last\-device\-grab time is set ta tha specified time (
CurrentTime is replaced by tha current X server time)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If a grabbed thang is closed by a cold-ass lil client while a actizzle grab
by dat client is up in effect, tha actizzle grab is busted out\&. If
the thang is frozen only by a actizzle grab of tha requesting
client, it is thawed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGrabDevice can generate BadClass, BadDevice, BadValue, and
BadWindow errors\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XUngrabDevice request releases tha thang n' any queued
events if dis client has it actively grabbed from either
XGrabDevice or XGrabDeviceKey\&. If other devices is frozen by
the grab, XUngrabDevice thaws them\&.XUngrabDevice do not
release tha thang n' any queued events if tha specified time
is earlier than tha last\-device\-grab time or is lata than the
current X server time\&. Well shiiiit, it also generates DeviceFocusIn and
DeviceFocusOut events\&. Da X server automatically performs an
UngrabDevice request if tha event window fo' a actizzle device
grab becomes not viewable\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XUngrabDevice can generate a BadDevice error\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid thang was specified\&. Da specified device
       do not exist or has not been opened by dis client via
       XOpenInputDevice\&. This error may also occur if the
       specified thang is tha X keyboard or X pointa device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside tha range of joints
       accepted by tha request\&. Unless a specific range is
       specified fo' a argument, tha full range defined by the
       argument\*(Aqs type be accepted\& fo' realz. Any argument defined as a
       set of alternatives can generate dis error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadWindow
       A value fo' a Window argument do not name a thugged-out defined
       Window\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XAllowDeviceEvents(3), XGrabDeviceButton(3), XGrabDeviceKey(3)
.fi
.if n \{\
.RE
.\}
