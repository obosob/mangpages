'\" t
.\"     Title: glVertexAttrib
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLVERTEXATTRIB" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glVertexAttrib \- Specifies tha value of a generic vertex attribute
.SH "C SPECIFICATION"
.HP \w'void\ glVertexAttrib1f('u
.BI "void glVertexAttrib1f(GLuint\ " "index" ", GLfloat\ " "v0" ");"
.HP \w'void\ glVertexAttrib1s('u
.BI "void glVertexAttrib1s(GLuint\ " "index" ", GLshort\ " "v0" ");"
.HP \w'void\ glVertexAttrib1d('u
.BI "void glVertexAttrib1d(GLuint\ " "index" ", GLdouble\ " "v0" ");"
.HP \w'void\ glVertexAttribI1i('u
.BI "void glVertexAttribI1i(GLuint\ " "index" ", GLint\ " "v0" ");"
.HP \w'void\ glVertexAttribI1ui('u
.BI "void glVertexAttribI1ui(GLuint\ " "index" ", GLuint\ " "v0" ");"
.HP \w'void\ glVertexAttrib2f('u
.BI "void glVertexAttrib2f(GLuint\ " "index" ", GLfloat\ " "v0" ", GLfloat\ " "v1" ");"
.HP \w'void\ glVertexAttrib2s('u
.BI "void glVertexAttrib2s(GLuint\ " "index" ", GLshort\ " "v0" ", GLshort\ " "v1" ");"
.HP \w'void\ glVertexAttrib2d('u
.BI "void glVertexAttrib2d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ");"
.HP \w'void\ glVertexAttribI2i('u
.BI "void glVertexAttribI2i(GLuint\ " "index" ", GLint\ " "v0" ", GLint\ " "v1" ");"
.HP \w'void\ glVertexAttribI2ui('u
.BI "void glVertexAttribI2ui(GLuint\ " "index" ", GLuint\ " "v0" ", GLuint\ " "v1" ");"
.HP \w'void\ glVertexAttrib3f('u
.BI "void glVertexAttrib3f(GLuint\ " "index" ", GLfloat\ " "v0" ", GLfloat\ " "v1" ", GLfloat\ " "v2" ");"
.HP \w'void\ glVertexAttrib3s('u
.BI "void glVertexAttrib3s(GLuint\ " "index" ", GLshort\ " "v0" ", GLshort\ " "v1" ", GLshort\ " "v2" ");"
.HP \w'void\ glVertexAttrib3d('u
.BI "void glVertexAttrib3d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ", GLdouble\ " "v2" ");"
.HP \w'void\ glVertexAttribI3i('u
.BI "void glVertexAttribI3i(GLuint\ " "index" ", GLint\ " "v0" ", GLint\ " "v1" ", GLint\ " "v2" ");"
.HP \w'void\ glVertexAttribI3ui('u
.BI "void glVertexAttribI3ui(GLuint\ " "index" ", GLuint\ " "v0" ", GLuint\ " "v1" ", GLuint\ " "v2" ");"
.HP \w'void\ glVertexAttrib4f('u
.BI "void glVertexAttrib4f(GLuint\ " "index" ", GLfloat\ " "v0" ", GLfloat\ " "v1" ", GLfloat\ " "v2" ", GLfloat\ " "v3" ");"
.HP \w'void\ glVertexAttrib4s('u
.BI "void glVertexAttrib4s(GLuint\ " "index" ", GLshort\ " "v0" ", GLshort\ " "v1" ", GLshort\ " "v2" ", GLshort\ " "v3" ");"
.HP \w'void\ glVertexAttrib4d('u
.BI "void glVertexAttrib4d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ", GLdouble\ " "v2" ", GLdouble\ " "v3" ");"
.HP \w'void\ glVertexAttrib4Nub('u
.BI "void glVertexAttrib4Nub(GLuint\ " "index" ", GLubyte\ " "v0" ", GLubyte\ " "v1" ", GLubyte\ " "v2" ", GLubyte\ " "v3" ");"
.HP \w'void\ glVertexAttribI4i('u
.BI "void glVertexAttribI4i(GLuint\ " "index" ", GLint\ " "v0" ", GLint\ " "v1" ", GLint\ " "v2" ", GLint\ " "v3" ");"
.HP \w'void\ glVertexAttribI4ui('u
.BI "void glVertexAttribI4ui(GLuint\ " "index" ", GLuint\ " "v0" ", GLuint\ " "v1" ", GLuint\ " "v2" ", GLuint\ " "v3" ");"
.HP \w'void\ glVertexAttribL1d('u
.BI "void glVertexAttribL1d(GLuint\ " "index" ", GLdouble\ " "v0" ");"
.HP \w'void\ glVertexAttribL2d('u
.BI "void glVertexAttribL2d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ");"
.HP \w'void\ glVertexAttribL3d('u
.BI "void glVertexAttribL3d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ", GLdouble\ " "v2" ");"
.HP \w'void\ glVertexAttribL4d('u
.BI "void glVertexAttribL4d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ", GLdouble\ " "v2" ", GLdouble\ " "v3" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies tha index of tha generic vertex attribute ta be modified\&.
.RE
.PP
\fIv0\fR, \fIv1\fR, \fIv2\fR, \fIv3\fR
.RS 4
Specifies tha freshly smoked up joints ta be used fo' tha specified vertex attribute\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glVertexAttrib1fv('u
.BI "void glVertexAttrib1fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib1sv('u
.BI "void glVertexAttrib1sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib1dv('u
.BI "void glVertexAttrib1dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribI1iv('u
.BI "void glVertexAttribI1iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI1uiv('u
.BI "void glVertexAttribI1uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib2fv('u
.BI "void glVertexAttrib2fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib2sv('u
.BI "void glVertexAttrib2sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib2dv('u
.BI "void glVertexAttrib2dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribI2iv('u
.BI "void glVertexAttribI2iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI2uiv('u
.BI "void glVertexAttribI2uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib3fv('u
.BI "void glVertexAttrib3fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib3sv('u
.BI "void glVertexAttrib3sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib3dv('u
.BI "void glVertexAttrib3dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribI3iv('u
.BI "void glVertexAttribI3iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI3uiv('u
.BI "void glVertexAttribI3uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4fv('u
.BI "void glVertexAttrib4fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib4sv('u
.BI "void glVertexAttrib4sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4dv('u
.BI "void glVertexAttrib4dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttrib4iv('u
.BI "void glVertexAttrib4iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4bv('u
.BI "void glVertexAttrib4bv(GLuint\ " "index" ", const\ GLbyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4ubv('u
.BI "void glVertexAttrib4ubv(GLuint\ " "index" ", const\ GLubyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4usv('u
.BI "void glVertexAttrib4usv(GLuint\ " "index" ", const\ GLushort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4uiv('u
.BI "void glVertexAttrib4uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nbv('u
.BI "void glVertexAttrib4Nbv(GLuint\ " "index" ", const\ GLbyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nsv('u
.BI "void glVertexAttrib4Nsv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Niv('u
.BI "void glVertexAttrib4Niv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nubv('u
.BI "void glVertexAttrib4Nubv(GLuint\ " "index" ", const\ GLubyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nusv('u
.BI "void glVertexAttrib4Nusv(GLuint\ " "index" ", const\ GLushort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nuiv('u
.BI "void glVertexAttrib4Nuiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttribI4bv('u
.BI "void glVertexAttribI4bv(GLuint\ " "index" ", const\ GLbyte\ *" "v" ");"
.HP \w'void\ glVertexAttribI4ubv('u
.BI "void glVertexAttribI4ubv(GLuint\ " "index" ", const\ GLubyte\ *" "v" ");"
.HP \w'void\ glVertexAttribI4sv('u
.BI "void glVertexAttribI4sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttribI4usv('u
.BI "void glVertexAttribI4usv(GLuint\ " "index" ", const\ GLushort\ *" "v" ");"
.HP \w'void\ glVertexAttribI4iv('u
.BI "void glVertexAttribI4iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI4uiv('u
.BI "void glVertexAttribI4uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttribL1dv('u
.BI "void glVertexAttribL1dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribL2dv('u
.BI "void glVertexAttribL2dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribL3dv('u
.BI "void glVertexAttribL3dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribL4dv('u
.BI "void glVertexAttribL4dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies tha index of tha generic vertex attribute ta be modified\&.
.RE
.PP
\fIv\fR
.RS 4
Specifies a pointa ta a array of joints ta be used fo' tha generic vertex attribute\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glVertexAttribP1ui('u
.BI "void glVertexAttribP1ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.HP \w'void\ glVertexAttribP2ui('u
.BI "void glVertexAttribP2ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.HP \w'void\ glVertexAttribP3ui('u
.BI "void glVertexAttribP3ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.HP \w'void\ glVertexAttribP4ui('u
.BI "void glVertexAttribP4ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies tha index of tha generic vertex attribute ta be modified\&.
.RE
.PP
\fItype\fR
.RS 4
Type of packin used on tha data\&. This parameta must be
\fBGL_INT_10_10_10_2\fR
or
\fBGL_UNSIGNED_INT_10_10_10_2\fR
to specify signed or unsigned data, respectively\&.
.RE
.PP
\fInormalized\fR
.RS 4
If
\fBGL_TRUE\fR, then tha joints is ta be converted ta floatin point joints by normalizing\&. Otherwise, they is converted directly ta floatin point joints\&.
.RE
.PP
\fIvalue\fR
.RS 4
Specifies tha freshly smoked up packed value ta be used fo' tha specified vertex attribute\&.
.RE
.SH "DESCRIPTION"
.PP
The
\fBglVertexAttrib\fR
family of entry points allows a application ta pass generic vertex attributes up in numbered locations\&.
.PP
Generic attributes is defined as four\-component joints dat is organized tha fuck into a array\&. Da first entry of dis array is numbered 0, n' tha size of tha array is specified by tha implementation\-dependent constant
\fBGL_MAX_VERTEX_ATTRIBS\fR\&. Individual elementz of dis array can be modified wit a
\fBglVertexAttrib\fR
call dat specifies tha index of tha element ta be modified n' a value fo' dat element\&.
.PP
These commandz can be used ta specify one, two, three, or all four componentz of tha generic vertex attribute specified by
\fIindex\fR\& fo' realz. A
\fB1\fR
in tha name of tha command indicates dat only one value is passed, n' it is ghon be used ta modify tha straight-up original gangsta component of tha generic vertex attribute\&. Da second n' third components is ghon be set ta 0, n' tha fourth component is ghon be set ta 1\&. Right back up in yo muthafuckin ass. Similarly, a
\fB2\fR
in tha name of tha command indicates dat joints is provided fo' tha straight-up original gangsta two components, tha third component is ghon be set ta 0, n' tha fourth component is ghon be set ta 1\& fo' realz. A
\fB3\fR
in tha name of tha command indicates dat joints is provided fo' tha straight-up original gangsta three components n' tha fourth component is ghon be set ta 1, whereas a
\fB4\fR
in tha name indicates dat joints is provided fo' all four components\&.
.PP
Da letters
\fBs\fR,
\fBf\fR,
\fBi\fR,
\fBd\fR,
\fBub\fR,
\fBus\fR, and
\fBui\fR
indicate whether tha arguments iz of type short, float, int, double, unsigned byte, unsigned short, or unsigned int\&. When
\fBv\fR
is appended ta tha name, tha commandz can take a pointa ta a array of such joints\&.
.PP
Additionizzle capitalized lettas can indicate further alterations ta tha default behavior of tha glVertexAttrib function:
.PP
Da commandz containing
\fBN\fR
indicate dat tha arguments is ghon be passed as fixed\-point joints dat is scaled ta a normalized range accordin ta tha component conversion rulez defined by tha OpenGL justification\&. Right back up in yo muthafuckin ass. Signed joints is understood ta represent fixed\-point joints up in tha range [\-1,1], n' unsigned joints is understood ta represent fixed\-point joints up in tha range [0,1]\&.
.PP
Da commandz containing
\fBI\fR
indicate dat tha arguments is extended ta full signed or unsigned integers\&.
.PP
Da commandz containing
\fBP\fR
indicate dat tha arguments is stored as packed components within a larger natural type\&.
.PP
Da commandz containing
\fBL\fR
indicate dat tha arguments is full 64\-bit quantitizzles n' should be passed directly ta shader inputs declared as 64\-bit double precision types\&.
.PP
OpenGL Shadin Language attribute variablez is allowed ta be of type mat2, mat3, or mat4\& fo' realz. Attributez of these types may be loaded rockin the
\fBglVertexAttrib\fR
entry points\&. Matrices must be loaded tha fuck into successive generic attribute slots up in column major order, wit one column of tha matrix up in each generic attribute slot\&.
.PP
A user\-defined attribute variable declared up in a vertex shader can be bound ta a generic attribute index by calling
\fBglBindAttribLocation\fR()\&. This allows a application ta use mo' descriptizzle variable names up in a vertex shader\& fo' realz. A subsequent chizzle ta tha specified generic vertex attribute is ghon be immediately reflected as a cold-ass lil chizzle ta tha correspondin attribute variable up in tha vertex shader\&.
.PP
Da bindin between a generic vertex attribute index n' a user\-defined attribute variable up in a vertex shader is part of tha state of a program object yo, but tha current value of tha generic vertex attribute is not\&. Da value of each generic vertex attribute is part of current state, just like standard vertex attributes, n' it is maintained even if a gangbangin' finger-lickin' different program object is used\&.
.PP
An application may freely modify generic vertex attributes dat is not bound ta a named vertex shader attribute variable\&. These joints is simply maintained as part of current state n' aint gonna be accessed by tha vertex shader\&. If a generic vertex attribute bound ta a attribute variable up in a vertex shader aint updated while tha vertex shader is executing, tha vertex shader will repeatedly use tha current value fo' tha generic vertex attribute\&.
.SH "NOTES"
.PP
Generic vertex attributes can be updated at any time\&.
.PP
It be possible fo' a application ta bind mo' than one attribute name ta tha same generic vertex attribute index\&. This is referred ta as aliasing, n' it be allowed only if just one of tha aliased attribute variablez be actizzle up in tha vertex shader, or if no path all up in tha vertex shader consumes mo' than one of tha attributes aliased ta tha same location\&. OpenGL implementations is not required ta do error checkin ta detect aliasing, they is allowed ta assume dat aliasin aint gonna occur, n' they is allowed ta employ optimizations dat work only up in tha absence of aliasing\&.
.PP
There is no provision fo' bindin standard vertex attributes; therefore, it aint possible ta alias generic attributes wit standard attributes\&.
.PP
\fBglVertexAttribL\fR
versions is available only if tha GL version is 4\&.1 or higher\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIindex\fR
is pimped outa than or equal to
\fBGL_MAX_VERTEX_ATTRIBS\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fBglVertexAttribP\fR
is used wit a
\fItype\fR
other than
\fBGL_INT_10_10_10_2\fR
or
\fBGL_UNSIGNED_INT_10_10_10_2\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fBglVertexAttribL\fR
is used wit a
\fItype\fR
other than
\fBGL_DOUBLE\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with tha argument
\fBGL_CURRENT_PROGRAM\fR
.PP
\fBglGetActiveAttrib\fR()
with argument
\fIprogram\fR
and tha index of a actizzle attribute variable
.PP
\fBglGetAttribLocation\fR()
with argument
\fIprogram\fR
and a attribute variable name
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fBGL_CURRENT_VERTEX_ATTRIB\fR
and
\fIindex\fR
.SH "SEE ALSO"
.PP
\fBglBindAttribLocation\fR(),
\fBglVertexAttribPointer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2005 3Dlabs Inc\&. Ltd\&. Copyright
\(co
2010 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
