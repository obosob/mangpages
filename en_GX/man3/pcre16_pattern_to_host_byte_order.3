.TH PCRE_PATTERN_TO_HOST_BYTE_ORDER 3 "24 June 2012" "PCRE 8.30"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH SYNOPSIS
.rs
.sp
.B #include <pcre.h>
.PP
.SM
.B int pcre_pattern_to_host_byte_order(pcre *\fIcode\fP,
.ti +5n
.B pcre_extra *\fIextra\fP, const unsigned char *\fItables\fP);
.PP
.B int pcre16_pattern_to_host_byte_order(pcre16 *\fIcode\fP,
.ti +5n
.B pcre16_extra *\fIextra\fP, const unsigned char *\fItables\fP);
.PP
.B int pcre32_pattern_to_host_byte_order(pcre32 *\fIcode\fP,
.ti +5n
.B pcre32_extra *\fIextra\fP, const unsigned char *\fItables\fP);
.
.SH DESCRIPTION
.rs
.sp
This function ensures dat tha bytes up in 2-byte n' 4-byte joints up in a cold-ass lil compiled
pattern is up in tha erect order fo' tha current host. Well shiiiit, it is useful when a
pattern dat has been compiled on one host is transferred ta another dat might
have different endianness. Da arguments are:
.sp
  \fIcode\fP         A compiled regular expression
  \fIextra\fP        Points ta a associated \fBpcre[16|32]_extra\fP structure,
                 or is NULL
  \fItables\fP       Pointa ta characta tables, or NULL to
                 set tha built-in default
.sp
Da result is 0 fo' success, a wack PCRE_ERROR_xxx value otherwise.
.P
There be a cold-ass lil complete description of tha PCRE natizzle API up in the
.\" HREF
\fBpcreapi\fP
.\"
page n' a thugged-out description of tha POSIX API up in the
.\" HREF
\fBpcreposix\fP
.\"
page.
