.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Construct::Forward 3"
.TH Mail::Message::Construct::Forward 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Construct::Forward \- forwardin a Mail::Message
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah Mail::Message $forward = $message\->forward(To => \*(Aqyou\*(Aq);
\& $forward\->send;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Complex functionalitizzle on Mail::Message objects is implemented in
different filez which is autoloaded. Y'all KNOW dat shit, muthafucka!  This file implements the
functionalitizzle related ta bustin forwarded lyrics.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructin a message"
.IX Subsection "Constructin a message"
.ie n .IP "$obj\->\fBforward\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforward\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forward(OPTIONS)"
Forward tha content of dis message.  Da body of tha message ta be forwarded
is encapsulated up in some accompanyin text (if you have no wish fo' that, than
\&\f(CW\*(C`bounce\*(C'\fR is yo' chizzle).  A Mail::Message object is returned on success.
.Sp
Yo ass may forward a whole message yo, but also message parts.
Yo ass may wish ta overrule a shitload of tha default header settings fo' the
reply immediately, or you may do dat lata wit \f(CW\*(C`set\*(C'\fR on tha header.
.Sp
When a multi-part body is encountered, n' tha message is included to
\&\s-1ATTACH,\s0 tha parts which be lookin like signatures is ghon be removed. Y'all KNOW dat shit, muthafucka!  If only
one message remains, it is ghon be tha added as single attachment, otherwise
a nested multipart is ghon be tha result.  Da value of dis option do not
matter, as long as it is present.  See \f(CW\*(C`Mail::Message::Body::Multipart\*(C'\fR.
.Sp
.Vb 12
\& \-Option    \-\-Default
\&  Bcc         undef
\&  Cc          undef
\&  Date        <now>
\&  From        <\*(Aqto\*(Aq up in current>
\&  Message\-ID  <uniquely generated>
\&  Subject     forwardSubject()
\&  To          <required>
\&  body        undef
\&  include     <if body then \*(AqNO\*(Aq else C<\*(AqINLINE\*(Aq>>
\&  preamble    constructed from prelude n' postlude
\&  signature   undef
.Ve
.RS 4
.IP "Bcc => \s-1ADDRESSES\s0" 2
.IX Item "Bcc => ADDRESSES"
Receiverz of blind carbon copies: they names aint gonna be published to
other message receivers.
.IP "Cc => \s-1ADDRESSES\s0" 2
.IX Item "Cc => ADDRESSES"
Da carbon-copy receivers, by default none.
.IP "Date => \s-1DATE\s0" 2
.IX Item "Date => DATE"
Da date ta be used up in tha message sent.
.IP "From => \s-1ADDRESSES\s0" 2
.IX Item "From => ADDRESSES"
Yo crazy-ass identification, by default taken from tha \f(CW\*(C`To\*(C'\fR field of the
source message.
.IP "Message-ID => \s-1STRING\s0" 2
.IX Item "Message-ID => STRING"
Supply a \s-1STRING\s0 as specific message-id fo' tha forwarded message.
By default, one is generated fo' yo thugged-out ass.  If there be no anglez around
your id, they is ghon be added.
.IP "Subject => STRING|CODE" 2
.IX Item "Subject => STRING|CODE"
Force tha subject line ta tha specific \s-1STRING,\s0 or tha result of the
subroutine specified by \s-1CODE. \s0 Da subroutine is ghon be called passing
the subject of tha original gangsta message as only argument.  By default,
the \fIforwardSubject()\fR method is used.
.IP "To => \s-1ADDRESSES\s0" 2
.IX Item "To => ADDRESSES"
Da destination of yo' message. Obligatory.  Da \s-1ADDRESSES\s0 may be
specified as string, a Mail::Address object, or as array of
Mail::Address objects.
.IP "body => \s-1OBJECT\s0" 2
.IX Item "body => OBJECT"
If you specify a gangbangin' straight-up prepared body \s-1OBJECT,\s0 it is ghon be used as forwarded
message contents, n' you can put dat on yo' toast.  In dis case, only tha headaz is constructed fo' yo thugged-out ass.
.IP "include => '\s-1NO\s0'|'\s-1INLINE\s0'|'\s-1ATTACH\s0'|'\s-1ENCAPSULATE\s0'" 2
.IX Item "include => 'NO'|'INLINE'|'ATTACH'|'ENCAPSULATE'"
Must tha message where dis be a reply ta be included up in tha message?
When \f(CW\*(C`INLINE\*(C'\fR is given, you may pass tha optionz of \fIforwardInline()\fR
as well.
.Sp
In nuff applications, tha forward option \f(CW\*(C`as attachment\*(C'\fR thangs up in dis biatch up in a
structure which is produced when dis option is set ta \f(CW\*(C`ENCAPSULATE\*(C'\fR.
Their default behavior is probably \f(CW\*(C`INLINE\*(C'\fR.
.Sp
It be only possible ta inline textual lyrics, therefore binary or
multi-part lyrics will always be enclosed as attachment.
Read tha details up in section \*(L"Creatin a gangbangin' forward\*(R"..
.IP "preamble => STRING|BODY" 2
.IX Item "preamble => STRING|BODY"
Part which be attached before tha forwarded message.  If no preamble
is given, then it is constructed from tha prelude n' postlude.  When
these is also not present, yo big-ass booty is ghon still git a one liner: tha result
of \fIforwardPrelude()\fR
.IP "signature => BODY|MESSAGE" 2
.IX Item "signature => BODY|MESSAGE"
Da signature ta be added up in case of a multi-part forward. Y'all KNOW dat shit, muthafucka!  Da mime-type
of tha signature body should indicate dis be a used as such.  However,
in \s-1INLINE\s0 mode, tha body is ghon be taken, a line containin \f(CW\*(Aq\-\- \*(Aq\fR added
before it, n' added behind tha epilogue.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBforwardAttach\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardAttach\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardAttach(OPTIONS)"
Forward tha message as \fIflat\fR attachment ta tha specified \f(CW\*(C`preamble\*(C'\fR.  You
can specify all options available ta \f(CW\*(C`forward()\*(C'\fR, although a \f(CW\*(C`preamble\*(C'\fR
which is provided as body object is required, n' any specified \f(CW\*(C`body\*(C'\fR
is ignored.
.Sp
.Vb 2
\& \-Option  \-\-Default
\&  preamble  <required>
.Ve
.RS 4
.IP "preamble => BODY|PART" 2
.IX Item "preamble => BODY|PART"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBforwardEncapsulate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardEncapsulate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardEncapsulate(OPTIONS)"
.PD
Like \fIforwardAttach()\fR yo, but up in dis case tha original gangsta message is first
encapsulated as nested message up in a Mail::Message::Body::Nested, and
then joint tha fuck into a multipart.
.Sp
Yo ass can specify all options available ta \f(CW\*(C`forward()\*(C'\fR, although a \f(CW\*(C`preamble\*(C'\fR
which is provided as body object is required, n' any specified \f(CW\*(C`body\*(C'\fR
is ignored. Y'all KNOW dat shit, muthafucka!  Signatures is not stripped. Y'all KNOW dat shit, muthafucka!  Signatures is not stripped.
.Sp
.Vb 2
\& \-Option  \-\-Default
\&  preamble  <required>
.Ve
.RS 4
.IP "preamble => BODY|PART" 2
.IX Item "preamble => BODY|PART"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBforwardInline\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardInline\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardInline(OPTIONS)"
.PD
This method is equivalent up in behavior ta \fIforward()\fR wit the
option \f(CW\*(C`include\*(C'\fR set ta \f(CW\*(AqINLINE\*(Aq\fR.  Yo ass can specify most of
the fieldz which is available ta \fIforward()\fR except
\&\f(CW\*(C`include\*(C'\fR n' \f(CW\*(C`body\*(C'\fR.
.Sp
.Vb 7
\& \-Option         \-\-Default
\&  is_attached      "[Da forwarded message be attached]\en"
\&  max_signature    10
\&  postlude         undef
\&  prelude          undef
\&  quote            undef
\&  strip_signature  qr/^\-\-\es/
.Ve
.RS 4
.IP "is_attached => \s-1STRING\s0" 2
.IX Item "is_attached => STRING"
A forward on binary lyrics can not be inlined. Y'all KNOW dat shit, muthafucka!  Therefore, they are
automatically translated tha fuck into a attachment, as made by \fIforwardAttach()\fR.
Da obligatory preamble option ta dat method may be specified as option
to dis method, ta be used up in case of such a gangbangin' forward of a funky-ass binary yo, but
is otherwise constructed from tha prelude, tha value of dis option, and
the postlude.
.IP "max_signature => \s-1INTEGER\s0" 2
.IX Item "max_signature => INTEGER"
Passed ta Mail::Message::Body::stripSignature(max_lines).  Only
effectizzle fo' single-part lyrics.
.IP "postlude => \s-1BODY\s0" 2
.IX Item "postlude => BODY"
Da line(s) which ta be added afta tha quoted reply lines.  Smoke a
body fo' it first.  This should not include tha signature, which has its
own option. I aint talkin' bout chicken n' gravy biatch.  Da signature is ghon be added afta tha postlude when the
forwarded message is \f(CW\*(C`INLINE\*(C'\fRd.
.IP "prelude => \s-1BODY\s0" 2
.IX Item "prelude => BODY"
Da line(s) which is ghon be added before tha quoted forwarded lines.
If not a god damn thang is specified, tha result of tha \fIforwardPrelude()\fR method
is used. Y'all KNOW dat shit, muthafucka!  When \f(CW\*(C`undef\*(C'\fR is specified, no prelude is ghon be added.
.IP "quote => CODE|STRING" 2
.IX Item "quote => CODE|STRING"
Mangle tha linez of a \f(CW\*(C`INLINE\*(C'\fRd reply wit \s-1CODE,\s0 or by prependin a
\&\s-1STRING\s0 ta each line.  Da routine specified by \s-1CODE\s0 is called when the
line is up in \f(CW$_\fR.
.Sp
By default, not a god damn thang be added before each line.  This option is processed
afta tha body has been decoded.
.IP "strip_signature => REGEXP|STRING|CODE" 2
.IX Item "strip_signature => REGEXP|STRING|CODE"
Remove tha signature of tha sender n' shit.  Da value of dis parameta is
passed ta Mail::Message::Body::stripSignature(pattern), unless the
source text aint included. Y'all KNOW dat shit, muthafucka!  Da signature is stripped from tha message
before quoting.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBforwardNo\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardNo\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardNo(OPTIONS)"
Construct a gangbangin' forward, where tha whole body of tha message be already
constructed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  That complex body is probably produced up in \fIforwardInline()\fR,
\&\fIforwardAttach()\fR, or \fIforwardEncapsulate()\fR.
.Sp
Da \s-1OPTIONS\s0 is tha same as fo' \f(CW\*(C`forward()\*(C'\fR except dat \f(CW\*(C`body\*(C'\fR is
required. Y'all KNOW dat shit, muthafucka!  Some other options, like \f(CW\*(C`preamble\*(C'\fR, is ignored.
.Sp
.Vb 2
\& \-Option\-\-Default
\&  body    <required>
.Ve
.RS 4
.IP "body => \s-1BODY\s0" 2
.IX Item "body => BODY"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBforwardPostlude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPostlude\fR()" 4
.IX Item "$obj->forwardPostlude()"
.PD
Added afta tha forwarded message.
.Sp
example:
.Sp
.Vb 1
\& \-\-\-\- END forwarded message
.Ve
.ie n .IP "$obj\->\fBforwardPrelude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPrelude\fR()" 4
.IX Item "$obj->forwardPrelude()"
Smoke all dem lines ta be included before tha forwarded message
content.  Da return be a array of lines.
.Sp
example:
.Sp
.Vb 6
\& \-\-\-\- BEGIN forwarded message
\& From: him@somewhere.else.nl (Original Gangsta Sender)
\& To: me@example.com (Me tha receiver)
\& Cc: the.rest@world.net
\& Date: Wed, 9 Feb 2000 15:44:05 \-0500
\& <blank line>
.Ve
.ie n .IP "$obj\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->forwardSubject(STRING)"
Smoke a subject fo' a message which be a gangbangin' forward from dis one.  This routine
tries ta count tha level of reply up in subject field, n' transform it into
a standard form.  Please contribute improvements.
.Sp
example:
.Sp
.Vb 4
\& subject                 \-\-> Forw: subject
\& Re: subject             \-\-> Forw: Re: subject
\& Re[X]: subject          \-\-> Forw: Re[X]: subject
\& <blank>                 \-\-> Forwarded
.Ve
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Creatin a gangbangin' forward"
.IX Subsection "Creatin a gangbangin' forward"
Da main difference between \fIbounce()\fR n' \fIforward()\fR is tha reason
for message processing.  Da \fIbounce\fR has no intention ta modify the
content of message: tha same shiznit is passed-on ta someplace else.
This may mean some conversions yo, but fo' instance, tha Message-ID do
not need ta be chizzled.
.PP
Da purpose of \fI\fIforward()\fI\fR is ta pass on shiznit which is
modified: annotated or reduced. Y'all KNOW dat shit, muthafucka!  Da shiznit aint busted back
to tha lyricist of tha original gangsta message (which is implemented by \fIreply()\fR),
but ta one of mah thugs.
.PP
So: some shiznit comes in, is modified, n' than forwarded ta one of mah thugs
else.  Currently, there be four ways ta git tha original gangsta shiznit
included, which is explained up in tha next sections.
.PP
Afta tha creation of tha forward, you may wanna \fIrebuild()\fR the
message ta remove unnecessary complexities. Put ya muthafuckin choppers up if ya feel dis!  Of course, dat is not
required.
.PP
\fIforward, specify a funky-ass body\fR
.IX Subsection "forward, specify a funky-ass body"
.PP
When you specify forward(body), you have pimped yo' own body object to
be used as content of tha forwarded message.  This implies that
forward(include) is \f(CW\*(AqNO\*(Aq\fR: no automatic generation of tha forwarded
body.
.PP
\fIforward, inline tha original\fR
.IX Subsection "forward, inline tha original"
.PP
Da forward(include) is set ta \f(CW\*(AqINLINE\*(Aq\fR (the default)
This is da most thugged-out fucked up thang yo, but most often used by MUAs:
the original gangsta message is banged textually up in tha freshly smoked up body.  Yo ass can
set-up automatic strippin of signatures, tha way of encapsulation,
and texts which should be added before n' afta tha encapsulated part.
.PP
But fuck dat shiznit yo, tha word on tha street is dat tha result may not always be what tha fuck you expect.  For instance,
some playas use straight-up long signatures which aint gonna be automatically
stripped cuz tha pass tha threshold. Y'all KNOW dat shit, muthafucka!  So, you probably need some
manual intervention afta tha message is pimped n' before it is sent.
.PP
When a funky-ass binary message is encountered, inlinin is impossible.  In that
case, tha message is treated as if \f(CW\*(AqENCAPSULATE\*(Aq\fR was requested.
.PP
\fIforward, attach tha original\fR
.IX Subsection "forward, attach tha original"
.PP
When forward(include) is explicitly set ta \f(CW\*(AqATTACH\*(Aq\fR tha result
will be a multipart which gotz nuff two parts, n' you can put dat on yo' toast.  Da first part will
be yo' message, n' tha second tha body of tha original gangsta message.
.PP
This means dat tha headaz of tha forwarded message is used for
the freshly smoked up message, n' detached from tha part which now gotz nuff the
original gangsta body shiznit. I aint talkin' bout chicken n' gravy biatch.  Content related headaz will (of course)
still be part of dat part yo, but lines line \f(CW\*(C`To\*(C'\fR n' \f(CW\*(C`Subject\*(C'\fR will
not be stored wit dat part.
.PP
As example of tha structural transformation:
.PP
.Vb 4
\& # code: $original\->printStructure;
\& multipart/alternative: Da source message
\&   text/plain: content up in raw text
\&   text/html: content as html
\&
\& # code: $fwd = $original\->forward(include => \*(AqATTACH\*(Aq);
\& # code: $fwd\->printStructure
\& multipart/mixed: Da source message
\&   text/plain: prelude/postlude/signature
\&   multipart/alternative
\&     text/plain: content up in raw text
\&     text/html: content as html
.Ve
.PP
\fIforward, encapsulate tha original\fR
.IX Subsection "forward, encapsulate tha original"
.PP
When forward(include) is explicitly set ta \f(CW\*(AqENCAPSULATE\*(Aq\fR, then
the original gangsta message is left in-tact as phat as possible.  Da lines
of tha original gangsta message is used up in tha main message header but also
enclosed up in tha part header.
.PP
Da encapsulation is implemented rockin a nested message, content type
\&\f(CW\*(C`message/rfc822\*(C'\fR.  As example of tha structural transformation:
.PP
.Vb 4
\& # code: $original\->printStructure;
\& multipart/alternative: Da source message
\&   text/plain: content up in raw text
\&   text/html: content as html
\&
\& # code: $fwd = $original\->forward(include => \*(AqENCAPSULATE\*(Aq);
\& # code: $fwd\->printStructure
\& multipart/mixed: Da source message
\&   text/plain: prelude/postlude/signature
\&   message/rfc822
\&      multipart/alternative: Da source message
\&         text/plain: content up in raw text
\&         text/html: content as html
.Ve
.PP
Da message structure is much mo' complex yo, but no shiznit is lost.
This is probably tha reason why nuff MUAs use dis when tha forward
an original gangsta message as attachment.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot include forward source as $include." 4
.el .IP "Error: Cannot include forward source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include forward source as $include."
Unknown alternatizzle fo' tha forward(include).  Valid chizzlez are
\&\f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, \f(CW\*(C`ATTACH\*(C'\fR, n' \f(CW\*(C`ENCAPSULATE\*(C'\fR.
.IP "Error: Method forwardAttach requires a preamble" 4
.IX Item "Error: Method forwardAttach requires a preamble"
.PD 0
.IP "Error: Method forwardEncapsulate requires a preamble" 4
.IX Item "Error: Method forwardEncapsulate requires a preamble"
.IP "Error: No address ta create forwarded to." 4
.IX Item "Error: No address ta create forwarded to."
.PD
If a gangbangin' forward message is pimped, a thugged-out destination address must be specified.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
