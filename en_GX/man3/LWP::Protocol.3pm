.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LWP::Protocol 3"
.TH LWP::Protocol 3 "2012-01-14" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::Protocol \- Base class fo' LWP protocols
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& package LWP::Protocol::foo;
\& require LWP::Protocol;
\& @ISA=qw(LWP::Protocol);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used a tha base class fo' all protocol implementations
supported by tha \s-1LWP\s0 library.
.PP
When bustin a instizzle of dis class using
\&\f(CW\*(C`LWP::Protocol::create($url)\*(C'\fR, n' you git a initialised subclass
appropriate fo' dat access method. Y'all KNOW dat shit, muthafucka! In other lyrics, the
\&\fILWP::Protocol::create()\fR function calls tha constructor fo' one of its
subclasses.
.PP
All derived LWP::Protocol classes need ta override tha \fIrequest()\fR
method which is used ta steez a request. Da overridden method can
make use of tha \fIcollect()\fR function ta collect together chunkz of data
as it is received.
.PP
Da followin methodz n' functions is provided:
.ie n .IP "$prot = LWP::Protocol\->\fInew()\fR" 4
.el .IP "\f(CW$prot\fR = LWP::Protocol\->\fInew()\fR" 4
.IX Item "$prot = LWP::Protocol->new()"
Da LWP::Protocol constructor is inherited by subclasses fo' realz. As dis be a
virtual base class dis method should \fBnot\fR be called directly.
.ie n .IP "$prot = LWP::Protocol::create($scheme)" 4
.el .IP "\f(CW$prot\fR = LWP::Protocol::create($scheme)" 4
.IX Item "$prot = LWP::Protocol::create($scheme)"
Smoke a object of tha class implementin tha protocol ta handle the
given scheme. This be a gangbangin' function, not a method. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is mo' a object
factory than a cold-ass lil constructor. Shiiit, dis aint no joke. This is tha function user agents should
use ta access protocols.
.ie n .IP "$class = LWP::Protocol::implementor($scheme, [$class])" 4
.el .IP "\f(CW$class\fR = LWP::Protocol::implementor($scheme, [$class])" 4
.IX Item "$class = LWP::Protocol::implementor($scheme, [$class])"
Git and/or set implementor class fo' a scheme.  Returns '' if the
specified scheme aint supported.
.ie n .IP "$prot\->request(...)" 4
.el .IP "\f(CW$prot\fR\->request(...)" 4
.IX Item "$prot->request(...)"
.Vb 3
\& $response = $protocol\->request($request, $proxy, undef);
\& $response = $protocol\->request($request, $proxy, \*(Aq/tmp/sss\*(Aq);
\& $response = $protocol\->request($request, $proxy, \e&callback, 1024);
.Ve
.Sp
Dispatches a request over tha protocol, n' returns a response
object. This method need ta be overridden up in subclasses.  Refer to
LWP::UserAgent fo' description of tha arguments.
.ie n .IP "$prot\->collect($arg, $response, $collector)" 4
.el .IP "\f(CW$prot\fR\->collect($arg, \f(CW$response\fR, \f(CW$collector\fR)" 4
.IX Item "$prot->collect($arg, $response, $collector)"
Called ta collect tha content of a request, n' process it
appropriately tha fuck into a scalar, file, or by callin a cold-ass lil callback.  If \f(CW$arg\fR
is undefined, then tha content is stored within tha \f(CW$response\fR.  If
\&\f(CW$arg\fR be a simple scalar, then \f(CW$arg\fR is interpreted as a gangbangin' file name and
the content is freestyled ta dis file.  If \f(CW$arg\fR be a reference ta a
routine, then content is passed ta dis routine.
.Sp
Da \f(CW$collector\fR be a routine dat is ghon be called n' which is
responsible fo' returnin pieces (as ref ta scalar) of tha content to
process.  Da \f(CW$collector\fR signals \s-1EOF\s0 by returnin a reference ta an
empty sting.
.Sp
Da return value from \fIcollect()\fR is tha \f(CW$response\fR object reference.
.Sp
\&\fBNote:\fR Us thugs will only use tha callback or file argument if
\&\f(CW$response\fR\->\fIis_success()\fR.  This avoidz bustin  content data for
redirects n' authentication responses ta tha callback which would be
confusing.
.ie n .IP "$prot\->collect_once($arg, $response, $content)" 4
.el .IP "\f(CW$prot\fR\->collect_once($arg, \f(CW$response\fR, \f(CW$content\fR)" 4
.IX Item "$prot->collect_once($arg, $response, $content)"
Can be called when tha whole response content be available as
\&\f(CW$content\fR.  This will invoke \fIcollect()\fR wit a cold-ass lil collector callback that
returns a reference ta \f(CW$content\fR tha last time n' a empty strang the
next.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Inspect tha \fILWP/Protocol/file.pm\fR n' \fILWP/Protocol/http.pm\fR files
for examplez of usage.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-2001 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
