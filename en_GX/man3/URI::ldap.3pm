.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "URI::ldap 3"
.TH URI::ldap 3 "2012-02-11" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
URI::ldap \- LDAP Uniform Resource Locators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use URI;
\&
\&  $uri = URI\->new("ldap:$uri_string");
\&  $dn     = $uri\->dn;
\&  $filta = $uri\->filter;
\&  @attr   = $uri\->attributes;
\&  $scope  = $uri\->scope;
\&  %extn   = $uri\->extensions;
\&  
\&  $uri = URI\->new("ldap:");  # start empty
\&  $uri\->host("ldap.itd.umich.edu");
\&  $uri\->dn("o=Universitizzle of Michigan,c=US");
\&  $uri\->attributes(qw(postalAddress));
\&  $uri\->scope(\*(Aqsub\*(Aq);
\&  $uri\->filter(\*(Aq(cn=Babs Jensen)\*(Aq);
\&  print $uri\->as_string,"\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`URI::ldap\*(C'\fR serves up a intercourse ta parse a \s-1LDAP URI\s0 tha fuck into its
constituent parts n' also ta build a \s-1URI\s0 as busted lyrics bout in
\&\s-1RFC 2255.\s0
.SH "METHODS"
.IX Header "METHODS"
\&\f(CW\*(C`URI::ldap\*(C'\fR supports all tha generic n' server methodz defined by
\&\s-1URI\s0, plus tha following.
.PP
Each of tha followin methodz can be used ta set or git tha value in
the \s-1URI.\s0 Da joints is passed up in unescaped form.  None of these
return undefined joints yo, but elements without a thugged-out default can be empty.
If arguments is given, then a freshly smoked up value is set fo' tha given part
of tha \s-1URI.\s0
.ie n .IP "$uri\->dn( [$new_dn] )" 4
.el .IP "\f(CW$uri\fR\->dn( [$new_dn] )" 4
.IX Item "$uri->dn( [$new_dn] )"
Sets or gets tha \fIDistinguished Name\fR part of tha \s-1URI. \s0 Da \s-1DN\s0
identifies tha base object of tha \s-1LDAP\s0 search.
.ie n .IP "$uri\->attributes( [@new_attrs] )" 4
.el .IP "\f(CW$uri\fR\->attributes( [@new_attrs] )" 4
.IX Item "$uri->attributes( [@new_attrs] )"
Sets or gets tha list of attribute names which are
returned by tha search.
.ie n .IP "$uri\->scope( [$new_scope] )" 4
.el .IP "\f(CW$uri\fR\->scope( [$new_scope] )" 4
.IX Item "$uri->scope( [$new_scope] )"
Sets or gets tha scope ta be used by tha search. Da value can be one of
\&\f(CW"base"\fR, \f(CW"one"\fR or \f(CW"sub"\fR. If none is given up in tha \s-1URI\s0 then the
return value defaults ta \f(CW"base"\fR.
.ie n .IP "$uri\->_scope( [$new_scope] )" 4
.el .IP "\f(CW$uri\fR\->_scope( [$new_scope] )" 4
.IX Item "$uri->_scope( [$new_scope] )"
Same as \fIscope()\fR yo, but do not default ta anything.
.ie n .IP "$uri\->filter( [$new_filter] )" 4
.el .IP "\f(CW$uri\fR\->filter( [$new_filter] )" 4
.IX Item "$uri->filter( [$new_filter] )"
Sets or gets tha filta ta be used by tha search. If none is given in
the \s-1URI\s0 then tha return value defaults ta \f(CW"(objectClass=*)"\fR.
.ie n .IP "$uri\->_filter( [$new_filter] )" 4
.el .IP "\f(CW$uri\fR\->_filter( [$new_filter] )" 4
.IX Item "$uri->_filter( [$new_filter] )"
Same as \fIfilter()\fR yo, but do not default ta anything.
.ie n .IP "$uri\->extensions( [$etype => $evalue,...] )" 4
.el .IP "\f(CW$uri\fR\->extensions( [$etype => \f(CW$evalue\fR,...] )" 4
.IX Item "$uri->extensions( [$etype => $evalue,...] )"
Sets or gets tha extensions used fo' tha search. Da list passed should
be up in tha form etype1 => evalue1, etype2 => evalue2,... This be also
the form of list dat is returned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://tools.ietf.org/html/rfc2255>
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <\fIgbarr@pobox.com\fR>
.PP
Slightly modified by Gisle Aas ta fit tha fuck into tha \s-1URI\s0 distribution.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998 Graham Barr fo' realz. All muthafuckin rights reserved. Y'all KNOW dat shit, muthafucka! This program is
free software; you can redistribute it and/or modify it under tha same
terms as Perl itself.
