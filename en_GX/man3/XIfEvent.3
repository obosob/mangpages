.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
.TH XIfEvent 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XIfEvent, XCheckIfEvent, XPeekIfEvent \- check tha event queue wit a predicate procedure
.SH SYNTAX
.HP
int XIfEvent\^(\^Display *\fIdisplay\fP\^, XEvent *\fIevent_return\fP\^, Bool
(\^*\fIpredicate\fP\^)\^(\^)\^, XPointa \fIarg\fP\^); 
.HP
Bool XCheckIfEvent\^(\^Display *\fIdisplay\fP\^, XEvent *\fIevent_return\fP\^,
Bool (\^*\fIpredicate\fP\^)\^(\^)\^, XPointa \fIarg\fP\^); 
.HP
int XPeekIfEvent\^(\^Display *\fIdisplay\fP\^, XEvent *\fIevent_return\fP\^,
Bool (\^*\fIpredicate\fP\^)\^(\^)\^, XPointa \fIarg\fP\^); 
.SH ARGUMENTS
.IP \fIarg\fP 1i
Specifies tha user-supplied argument dat is ghon be passed ta tha predicate procedure.
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.ds Ev \ either a cold-ass lil copy of or 
.IP \fIevent_return\fP 1i
Returns\*(Ev tha matched eventz associated structure.
.IP \fIpredicate\fP 1i
Specifies tha procedure dat is ta be called ta determine
if tha next event up in tha queue matches what tha fuck you want.
.SH DESCRIPTION
The
.ZN XIfEvent
function completes only when tha specified predicate
procedure returns 
.ZN True 
for a event, 
which indicates a event up in tha queue matches.
.ZN XIfEvent
flushes tha output buffer if it blocks waitin fo' additionizzle events.
.ZN XIfEvent
removes tha matchin event from tha queue 
and copies tha structure tha fuck into tha client-supplied
.ZN XEvent
structure.
.LP
When tha predicate procedure findz a match,
.ZN XCheckIfEvent
copies tha matched event tha fuck into tha client-supplied
.ZN XEvent
structure n' returns 
.ZN True .
(This event is removed from tha queue.)
If tha predicate procedure findz no match,
.ZN XCheckIfEvent
returns
.ZN False ,
and tha output buffer gonna git been flushed.
All earlier events stored up in tha queue is not discarded.
.LP
The
.ZN XPeekIfEvent
function returns only when tha specified predicate
procedure returns 
.ZN True
for a event.
Afta tha predicate procedure findz a match,
.ZN XPeekIfEvent
copies tha matched event tha fuck into tha client-supplied
.ZN XEvent
structure without removin tha event from tha queue.
.ZN XPeekIfEvent
flushes tha output buffer if it blocks waitin fo' additionizzle events.
.LP
Each of these functions requires you ta pass a predicate procedure dat 
determines if a event matches what tha fuck you want.
Yo crazy-ass predicate procedure must decizzle if tha event is useful
without callin any Xlib functions.
If tha predicate directly or indirectly causes tha state of tha event queue
to chizzle, tha result aint defined.
If Xlib has been initialized fo' threads, tha predicate is called with
the display locked n' tha result of a cold-ass lil call by tha predicate ta any
Xlib function dat locks tha display aint defined unless tha caller
has first called
.ZN XLockDisplay .
.LP
Da predicate procedure n' its associated arguments are:
.HP
Bool (\^*\fIpredicate\fP\^)\^(\^Display *\fIdisplay\fP, XEvent *\fIevent\fP, XPointa \fIarg\fP\^)
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.IP \fIevent\fP 1i
Specifies the
.ZN XEvent
structure.
.IP \fIarg\fP 1i
Specifies tha argument passed up in from tha 
.ZN XIfEvent ,
.ZN XCheckIfEvent ,
or
.ZN XPeekIfEvent 
function.
.LP
Da predicate procedure is called once fo' each
event up in tha queue until it findz a match. 
Afta findin a match, tha predicate procedure must return 
.ZN True .
If it did not find a match, it must return
.ZN False .
.SH "SEE ALSO"
XAnyEvent(3),
XNextEvent(3),
XPutBackEvent(3)
XSendEvent(3)
.br
\fI\*(xL\fP
