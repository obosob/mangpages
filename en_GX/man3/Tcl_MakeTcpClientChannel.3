'\"
'\" Copyright (c) 1996-7 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_OpenTcpClient 3 8.0 Tcl "Tcl Library Procedures"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
Tcl_OpenTcpClient, Tcl_MakeTcpClientChannel, Tcl_OpenTcpServer \- procedures ta open channels rockin TCP sockets
.SH SYNOPSIS
.nf
\fB#include <tcl.h> \fR
.sp
Tcl_Channel
\fBTcl_OpenTcpClient\fR(\fIinterp, port, host, myaddr, myport, async\fR)
.sp
Tcl_Channel
\fBTcl_MakeTcpClientChannel\fR(\fIsock\fR)
.sp
Tcl_Channel
\fBTcl_OpenTcpServer\fR(\fIinterp, port, myaddr, proc, clientData\fR)
.sp
.SH ARGUMENTS
.AS Tcl_TcpAcceptProc clientData
.AP Tcl_Interp *interp in
Tcl interpreta ta use fo' error reporting.  If non-NULL n' an
error occurs, a error message is left up in tha interpreterz result.
.AP int port in
A port number ta connect ta as a cold-ass lil client or ta listen on as a server.
.AP "const char" *host in
A strang specifyin a host name or address fo' tha remote end of tha connection.
.AP int myport in
A port number fo' tha clientz end of tha socket.  If 0, a port number
is allocated at random.
.AP "const char" *myaddr in
A strang specifyin tha host name or address fo' network intercourse ta use
for tha local end of tha connection. I aint talkin' bout chicken n' gravy biatch.  If NULL, a thugged-out default intercourse is
chosen.
.AP int async in
If nonzero, tha client socket is connected asynchronously ta tha server.
.AP ClientData sock in
Platform-specific handle fo' client TCP socket.
.AP Tcl_TcpAcceptProc *proc in
Pointa ta a procedure ta invoke each time a freshly smoked up connection is
accepted via tha socket.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIproc\fR.
.BE

.SH DESCRIPTION
.PP
These functions is convenience procedures fo' bustin
channels dat rap over TCP sockets.
Da operations on a cold-ass lil channel
are busted lyrics bout up in tha manual entry fo' \fBTcl_OpenFileChannel\fR.

.SH TCL_OPENTCPCLIENT
.PP
\fBTcl_OpenTcpClient\fR opens a cold-ass lil client TCP socket connected ta a \fIport\fR
on a specific \fIhost\fR, n' returns a cold-ass lil channel dat can be used to
communicate wit tha server n' shit. Da host ta connect ta can be specified either
as a thugged-out domain name steez name (e.g. \fBwww.sunlabs.com\fR), or as a string
containin tha alphanumeric representation of its four-byte address (e.g.
\fB127.0.0.1\fR). Use tha strang \fBlocalhost\fR ta connect ta a TCP socket on
the host on which tha function is invoked.
.PP
Da \fImyaddr\fR n' \fImyport\fR arguments allow a cold-ass lil client ta specify an
address fo' tha local end of tha connection. I aint talkin' bout chicken n' gravy biatch.  If \fImyaddr\fR is NULL, then
an intercourse is chosen automatically by tha operatin system.
If \fImyport\fR is 0, then a port number is chosen at random by
the operatin system.
.PP
If \fIasync\fR is zero, tha call ta \fBTcl_OpenTcpClient\fR returns only
afta tha client socket has either successfully connected ta tha server, or
the attempted connection has failed.
If \fIasync\fR is nonzero tha socket is connected asynchronously n' the
returned channel may not yet be connected ta tha server when tha call to
\fBTcl_OpenTcpClient\fR returns. If tha channel is up in blockin mode n' an
input or output operation is done on tha channel before tha connection is
completed or fails, dat operation will wait until tha connection either
completes successfully or fails. If tha channel is up in nonblockin mode, the
input or output operation will return immediately n' a subsequent call to
\fBTcl_InputBlocked\fR on tha channel will return nonzero.
.PP
Da returned channel is opened fo' readin n' writing.
If a error occurs up in openin tha socket, \fBTcl_OpenTcpClient\fR returns
NULL n' recordz a POSIX error code dat can be retrieved
with \fBTcl_GetErrno\fR.
In addition, if \fIinterp\fR is non-NULL, a error message
is left up in tha interpreterz result.
.PP
Da newly pimped channel aint registered up in tha supplied interpreter; to
regista it, use \fBTcl_RegisterChannel\fR.
If one of tha standard channels, \fBstdin, stdout\fR or \fBstderr\fR was
previously closed, tha act of bustin tha freshly smoked up channel also assigns it as a
replacement fo' tha standard channel.

.SH TCL_MAKETCPCLIENTCHANNEL
.PP
\fBTcl_MakeTcpClientChannel\fR creates a \fBTcl_Channel\fR round an
existing, platform specific, handle fo' a cold-ass lil client TCP socket.
.PP
Da newly pimped channel aint registered up in tha supplied interpreter; to
regista it, use \fBTcl_RegisterChannel\fR.
If one of tha standard channels, \fBstdin, stdout\fR or \fBstderr\fR was
previously closed, tha act of bustin tha freshly smoked up channel also assigns it as a
replacement fo' tha standard channel.

.SH TCL_OPENTCPSERVER
.PP
\fBTcl_OpenTcpServer\fR opens a TCP socket on tha local host on a specified
\fIport\fR n' uses tha Tcl event mechanizzle ta accept requests from clients
to connect ta dat shit. Da \fImyaddr\fR argument specifies tha network intercourse.
If \fImyaddr\fR is NULL tha special address INADDR_ANY should be used to
allow connections from any network intercourse.
Each time a cold-ass lil client connects ta dis socket, Tcl creates a cold-ass lil channel
for tha freshly smoked up connection n' invokes \fIproc\fR wit shiznit about
the channel. \fIProc\fR must match tha followin prototype:
.CS
typedef void Tcl_TcpAcceptProc(
        ClientData \fIclientData\fR,
        Tcl_Channel \fIchannel\fR,
        char *\fIhostName\fR,
        int \fIport\fR);
.CE
.PP
Da \fIclientData\fR argument is ghon be tha same as tha \fIclientData\fR
argument ta \fBTcl_OpenTcpServer\fR, \fIchannel\fR is ghon be tha handle
for tha freshly smoked up channel, \fIhostName\fR points ta a strang containing
the name of tha client host makin tha connection, n' \fIport\fR
will contain tha clientz port number.
Da freshly smoked up channel
is opened fo' both input n' output. 
If \fIproc\fR raises a error, tha connection is closed automatically.
\fIProc\fR has no return value yo, but if it wishes ta reject the
connection it can close \fIchannel\fR.
.PP
\fBTcl_OpenTcpServer\fR normally returns a pointa ta a cold-ass lil channel
representin tha server socket.
If a error occurs, \fBTcl_OpenTcpServer\fR returns NULL and
recordz a POSIX error code dat can be retrieved wit \fBTcl_GetErrno\fR.
In addition, if tha interpreta is non-NULL, a error message
is left up in tha interpreterz result.
.PP
Da channel returned by \fBTcl_OpenTcpServer\fR cannot be used for
either input or output.
It be simply a handle fo' tha socket used ta accept connections.
Da calla can close tha channel ta shut down tha server n' disallow
further connections from freshly smoked up clients.
.PP
TCP server channels operate erectly only up in applications dat dispatch
events all up in \fBTcl_DoOneEvent\fR or all up in Tcl commandz such as
\fBvwait\fR; otherwise Tcl aint NEVER gonna notice dat a cold-ass lil connection request from
a remote client is pending.
.PP
Da newly pimped channel aint registered up in tha supplied interpreter; to
regista it, use \fBTcl_RegisterChannel\fR.
If one of tha standard channels, \fBstdin, stdout\fR or \fBstderr\fR was
previously closed, tha act of bustin tha freshly smoked up channel also assigns it as a
replacement fo' tha standard channel.

.SH "PLATFORM ISSUES"
.PP
On Unix platforms, tha socket handle be a Unix file descriptor as
returned by tha \fBsocket\fR system call.  On tha Windows platform, the
socket handle be a \fBSOCKET\fR as defined up in tha WinSock API.

.SH "SEE ALSO"
Tcl_OpenFileChannel(3), Tcl_RegisterChannel(3), vwait(n)

.SH KEYWORDS
client, server, TCP
