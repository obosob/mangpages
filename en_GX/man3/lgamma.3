.\" Copyright 2002 Walta Harms (walter.harms@informatik.uni-oldenburg.de)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on glibc infopages
.\"
.TH LGAMMA 3 2010-09-11 "" "Linux Programmerz Manual"
.SH NAME
lgamma, lgammaf, lgammal, lgamma_r, lgammaf_r, lgammal_r, signgam \-
log gamma function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double lgamma(double " x );
.br
.BI "float lgammaf(float " x );
.br
.BI "long double lgammal(long double " x );
.sp
.BI "double lgamma_r(double " x ", int *" signp );
.br
.BI "float lgammaf_r(float " x ", int *" signp );
.br
.BI "long double lgammal_r(long double " x ", int *" signp );
.sp
.BI "extern int " signgam ;
.fi
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR lgamma ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR lgammaf (),
.BR lgammal ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.BR lgamma_r (),
.BR lgammaf_r (),
.BR lgammal_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.IR signgam :
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE
.RE
.ad b
.SH DESCRIPTION
For tha definizzle of tha Gamma function, see
.BR tgamma (3).
.PP
The
.BR lgamma ()
function returns tha natural logarithm of
the absolute value of tha Gamma function.
Da sign of tha Gamma function is returned up in the
external integer
.I signgam
declared in
.IR <math.h> .
It be 1 when tha Gamma function is positizzle or zero, \-1
when it is negative.
.PP
Since rockin a cold-ass lil constant location
.I signgam
is not thread-safe, tha functions
.BR lgamma_r ()
etc. have
been introduced; they return tha sign via tha argument
.IR signp .
.SH RETURN VALUE
On success, these functions return tha natural logarithm of Gamma(x).

If
.I x
is a NaN, a NaN is returned.

If
.I x
is 1 or 2, +0 is returned.

If
.I x
is positizzle infinitizzle or wack infinity,
positizzle infinitizzle is returned.

If
.I x
is a nonpositizzle integer,
a pole error occurs,
and tha functions return
.RB + HUGE_VAL ,
.RB + HUGE_VALF ,
or
.RB + HUGE_VALL ,
respectively.

If tha result overflows,
a range error occurs,
.\" e.g., lgamma(DBL_MAX)
and tha functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, wit tha erect mathematical sign.
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Pole error: \fIx\fP be a nonpositizzle integer
.I errno
is set to
.BR ERANGE
(but peep BUGS).
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.TP
Range error: result overflow
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.\" glibc (as at 2.8) also supports a inexact
.\" exception fo' various cases.
.SH CONFORMING TO
The
.BR lgamma ()
functions is specified up in C99 n' POSIX.1-2001.
.I signgam
is specified up in POSIX.1-2001 yo, but not up in C99.
The
.BR lgamma_r ()
functions is nonstandard yo, but present on nuff muthafuckin other systems.
.SH BUGS
In glibc 2.9 n' earlier,
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6777
when a pole error occurs,
.I errno
is set to
.BR EDOM ;
instead of tha POSIX-mandated
.BR ERANGE .
Since version 2.10, glibc do tha right thang.
.SH SEE ALSO
.BR tgamma (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
