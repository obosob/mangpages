.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Field::Unstructured 3"
.TH Mail::Message::Field::Unstructured 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Field::Unstructured \- smart-ass unstructured field
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Message::Field::Unstructured
\&   be a Mail::Message::Field::Full
\&   be a Mail::Message::Field
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& mah $f = Mail::Message::Field::Unstructured\->new(Comments => \*(Aqhi!\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Unstructured fieldz do contain shiznit which aint restricted in
any way.  \s-1RFC2822\s0 defines some unstructured fieldz yo, but by default all
unknown fieldz is unstructured as well.  Things like attributes and
comments have no meanin fo' unstructured fieldz yo, but encodin do.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.ie n .IP "overload: \fB""""\fR()" 4
.el .IP "overload: \fB``''\fR()" 4
.IX Item "overload: """"()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Field
.IP "overload: \fB0+\fR()" 4
.IX Item "overload: 0+()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Field
.IP "overload: \fB<=\fR>()" 4
.IX Item "overload: <=>()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Field
.IP "overload: \fBbool\fR()" 4
.IX Item "overload: bool()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Field
.IP "overload: \fBcmp\fR()" 4
.IX Item "overload: cmp()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Field
.IP "overload: \fBstringification\fR()" 4
.IX Item "overload: stringification()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Field::Full
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBclone\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR()" 4
.IX Item "$obj->clone()"
See \*(L"Constructors\*(R" up in Mail::Message::Field
.IP "Mail::Message::Field::Unstructured\->\fBfrom\fR(\s-1FIELD, OPTIONS\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->from(FIELD, OPTIONS)"
See \*(L"Constructors\*(R" up in Mail::Message::Field::Full
.IP "Mail::Message::Field::Unstructured\->\fBnew\fR(\s-1DATA\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->new(DATA)"
When tha \s-1DATA\s0 is specified as single line, tha content part is considered to
be correcly (character) encoded n' escaped. Y'all KNOW dat shit, muthafucka!  Typically, it aint nuthin but a line as
read from file.  Da foldin of tha line is kept as is.
.Sp
In case mo' than one argument is provided, tha second is considered tha \s-1BODY.\s0
Attributes n' other special thangs is not defined fo' unstructured fields,
and therefore not valid options.  Da \s-1BODY\s0 can be a single string, a single
\&\s-1OBJECT,\s0 or a array of \s-1OBJECTS. \s0 Da objects is stringified (into a cold-ass lil comma
separated list).  Each \s-1BODY\s0 element is interpreted wit tha specified encoding.
.Sp
When tha \s-1BODY\s0 is empty, tha construction of tha object fails: \f(CW\*(C`undef\*(C'\fR is
returned.
.Sp
.Vb 7
\& \-Option  \-\-Defined up in                \-\-Default
\&  charset   Mail::Message::Field::Full  undef
\&  encodin  Mail::Message::Field::Full  \*(Aqq\*(Aq
\&  force     Mail::Message::Field::Full  false
\&  language  Mail::Message::Field::Full  undef
\&  log       Mail::Reporta              \*(AqWARNINGS\*(Aq
\&  trace     Mail::Reporta              \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "charset => \s-1STRING\s0" 2
.IX Item "charset => STRING"
.PD 0
.IP "encodin => 'q'|'Q'|'b'|'B'" 2
.IX Item "encodin => 'q'|'Q'|'b'|'B'"
.IP "force => \s-1BOOLEAN\s0" 2
.IX Item "force => BOOLEAN"
.IP "language => \s-1STRING\s0" 2
.IX Item "language => STRING"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.PD
.Sp
example:
.Sp
.Vb 1
\& mah $s = Mail::Message::Field::Unstructured\->new(\*(AqComment\*(Aq, \*(AqHi!\*(Aq);
\&
\& # Use autodetect
\& mah $s = Mail::Message::Field::Full\->new(\*(AqComment\*(Aq, \*(AqHi!\*(Aq);
\& mah $s = Mail::Message::Field::Full\->new(\*(AqComment: Hi!\*(Aq);
.Ve
.RE
.SS "Da field"
.IX Subsection "Da field"
.ie n .IP "$obj\->\fBisStructured\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisStructured\fR()" 4
.IX Item "$obj->isStructured()"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBisStructured\fR()" 4
.IX Item "Mail::Message::Field::Unstructured->isStructured()"
.PD
See \*(L"Da field\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBlength\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlength\fR()" 4
.IX Item "$obj->length()"
See \*(L"Da field\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBnrLines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnrLines\fR()" 4
.IX Item "$obj->nrLines()"
See \*(L"Da field\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print([FILEHANDLE])"
See \*(L"Da field\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Da field\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBstring\fR([\s-1WRAP\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR([\s-1WRAP\s0])" 4
.IX Item "$obj->string([WRAP])"
See \*(L"Da field\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBtoDisclose\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtoDisclose\fR()" 4
.IX Item "$obj->toDisclose()"
See \*(L"Da field\*(R" up in Mail::Message::Field
.SS "Access ta tha name"
.IX Subsection "Access ta tha name"
.ie n .IP "$obj\->\fBName\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBName\fR()" 4
.IX Item "$obj->Name()"
See \*(L"Access ta tha name\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
See \*(L"Access ta tha name\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBwellformedName\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBwellformedName\fR([\s-1STRING\s0])" 4
.IX Item "$obj->wellformedName([STRING])"
See \*(L"Access ta tha name\*(R" up in Mail::Message::Field
.SS "Access ta tha body"
.IX Subsection "Access ta tha body"
.ie n .IP "$obj\->\fBbody\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR()" 4
.IX Item "$obj->body()"
See \*(L"Access ta tha body\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBdecodedBody\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdecodedBody\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->decodedBody(OPTIONS)"
See \*(L"Access ta tha body\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBfolded\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolded\fR()" 4
.IX Item "$obj->folded()"
See \*(L"Access ta tha body\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBfoldedBody\fR([\s-1BODY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfoldedBody\fR([\s-1BODY\s0])" 4
.IX Item "$obj->foldedBody([BODY])"
See \*(L"Access ta tha body\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBstripCFWS\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBstripCFWS\fR([\s-1STRING\s0])" 4
.IX Item "$obj->stripCFWS([STRING])"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBstripCFWS\fR([\s-1STRING\s0])" 4
.IX Item "Mail::Message::Field::Unstructured->stripCFWS([STRING])"
.PD
See \*(L"Access ta tha body\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBunfoldedBody\fR([\s-1BODY,\s0 [\s-1WRAP\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBunfoldedBody\fR([\s-1BODY,\s0 [\s-1WRAP\s0]])" 4
.IX Item "$obj->unfoldedBody([BODY, [WRAP]])"
See \*(L"Access ta tha body\*(R" up in Mail::Message::Field
.SS "Access ta tha content"
.IX Subsection "Access ta tha content"
.ie n .IP "$obj\->\fBaddresses\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaddresses\fR()" 4
.IX Item "$obj->addresses()"
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBattribute\fR(\s-1NAME\s0 [, \s-1VALUE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBattribute\fR(\s-1NAME\s0 [, \s-1VALUE\s0])" 4
.IX Item "$obj->attribute(NAME [, VALUE])"
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBattributes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBattributes\fR()" 4
.IX Item "$obj->attributes()"
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBbeautify\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbeautify\fR()" 4
.IX Item "$obj->beautify()"
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBcomment\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcomment\fR([\s-1STRING\s0])" 4
.IX Item "$obj->comment([STRING])"
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBcreateComment\fR(\s-1STRING, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateComment\fR(\s-1STRING, OPTIONS\s0)" 4
.IX Item "$obj->createComment(STRING, OPTIONS)"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBcreateComment\fR(\s-1STRING, OPTIONS\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->createComment(STRING, OPTIONS)"
.PD
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBcreatePhrase\fR(\s-1STRING, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreatePhrase\fR(\s-1STRING, OPTIONS\s0)" 4
.IX Item "$obj->createPhrase(STRING, OPTIONS)"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBcreatePhrase\fR(\s-1STRING, OPTIONS\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->createPhrase(STRING, OPTIONS)"
.PD
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBstudy\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstudy\fR()" 4
.IX Item "$obj->study()"
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBtoDate\fR([\s-1TIME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtoDate\fR([\s-1TIME\s0])" 4
.IX Item "$obj->toDate([TIME])"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBtoDate\fR([\s-1TIME\s0])" 4
.IX Item "Mail::Message::Field::Unstructured->toDate([TIME])"
.PD
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBtoInt\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtoInt\fR()" 4
.IX Item "$obj->toInt()"
See \*(L"Access ta tha content\*(R" up in Mail::Message::Field
.SS "Other methods"
.IX Subsection "Other methods"
.ie n .IP "$obj\->\fBdateToTimestamp\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdateToTimestamp\fR(\s-1STRING\s0)" 4
.IX Item "$obj->dateToTimestamp(STRING)"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBdateToTimestamp\fR(\s-1STRING\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->dateToTimestamp(STRING)"
.PD
See \*(L"Other methods\*(R" up in Mail::Message::Field
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBconsume\fR(\s-1LINE\s0 | (\s-1NAME\s0,BODY|OBJECTS))" 4
.el .IP "\f(CW$obj\fR\->\fBconsume\fR(\s-1LINE\s0 | (\s-1NAME\s0,BODY|OBJECTS))" 4
.IX Item "$obj->consume(LINE | (NAME,BODY|OBJECTS))"
See \*(L"Internals\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBdecode\fR(\s-1STRING, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdecode\fR(\s-1STRING, OPTIONS\s0)" 4
.IX Item "$obj->decode(STRING, OPTIONS)"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBdecode\fR(\s-1STRING, OPTIONS\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->decode(STRING, OPTIONS)"
.PD
See \*(L"Internals\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBdefaultWrapLength\fR([\s-1LENGTH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultWrapLength\fR([\s-1LENGTH\s0])" 4
.IX Item "$obj->defaultWrapLength([LENGTH])"
See \*(L"Internals\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBencode\fR(\s-1STRING, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(\s-1STRING, OPTIONS\s0)" 4
.IX Item "$obj->encode(STRING, OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBfold\fR(\s-1NAME, BODY,\s0 [\s-1MAXCHARS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfold\fR(\s-1NAME, BODY,\s0 [\s-1MAXCHARS\s0])" 4
.IX Item "$obj->fold(NAME, BODY, [MAXCHARS])"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBfold\fR(\s-1NAME, BODY,\s0 [\s-1MAXCHARS\s0])" 4
.IX Item "Mail::Message::Field::Unstructured->fold(NAME, BODY, [MAXCHARS])"
.PD
See \*(L"Internals\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBsetWrapLength\fR([\s-1LENGTH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBsetWrapLength\fR([\s-1LENGTH\s0])" 4
.IX Item "$obj->setWrapLength([LENGTH])"
See \*(L"Internals\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBstringifyData\fR(STRING|ARRAY|OBJECTS)" 4
.el .IP "\f(CW$obj\fR\->\fBstringifyData\fR(STRING|ARRAY|OBJECTS)" 4
.IX Item "$obj->stringifyData(STRING|ARRAY|OBJECTS)"
See \*(L"Internals\*(R" up in Mail::Message::Field
.ie n .IP "$obj\->\fBunfold\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBunfold\fR(\s-1STRING\s0)" 4
.IX Item "$obj->unfold(STRING)"
See \*(L"Internals\*(R" up in Mail::Message::Field
.SS "Parsing"
.IX Subsection "Parsing"
.ie n .IP "$obj\->\fBconsumeComment\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBconsumeComment\fR(\s-1STRING\s0)" 4
.IX Item "$obj->consumeComment(STRING)"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBconsumeComment\fR(\s-1STRING\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->consumeComment(STRING)"
.PD
See \*(L"Parsing\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBconsumeDotAtom\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBconsumeDotAtom\fR(\s-1STRING\s0)" 4
.IX Item "$obj->consumeDotAtom(STRING)"
See \*(L"Parsing\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBconsumePhrase\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBconsumePhrase\fR(\s-1STRING\s0)" 4
.IX Item "$obj->consumePhrase(STRING)"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBconsumePhrase\fR(\s-1STRING\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->consumePhrase(STRING)"
.PD
See \*(L"Parsing\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBparse\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBparse\fR(\s-1STRING\s0)" 4
.IX Item "$obj->parse(STRING)"
See \*(L"Parsing\*(R" up in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBproduceBody\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBproduceBody\fR()" 4
.IX Item "$obj->produceBody()"
See \*(L"Parsing\*(R" up in Mail::Message::Field::Full
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Message::Field::Unstructured->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Message::Field::Unstructured->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Message::Field::Unstructured\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Message::Field::Unstructured->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Field content aint numerical: $content" 4
.el .IP "Warning: Field content aint numerical: \f(CW$content\fR" 4
.IX Item "Warning: Field content aint numerical: $content"
Da numeric value of a gangbangin' field be axed (for instizzle tha \f(CW\*(C`Lines\*(C'\fR or
\&\f(CW\*(C`Content\-Length\*(C'\fR fieldz should be numerical), however tha data gotz nuff
weird characters.
.IP "Warning: Illegal characta up in charset '$charset'" 4
.IX Item "Warning: Illegal characta up in charset '$charset'"
Da field is pimped wit a utf8 strang which only gotz nuff data from the
specified characta set.  But fuck dat shiznit yo, tha word on tha street is dat that characta set can never be a valid
name cuz it gotz nuff charactas which is not permitted.
.ie n .IP "Warning: Illegal characta up in field name $name" 4
.el .IP "Warning: Illegal characta up in field name \f(CW$name\fR" 4
.IX Item "Warning: Illegal characta up in field name $name"
A freshly smoked up field is bein pimped which do contain charactas not permitted
by tha RFCs.  Usin dis field up in lyrics may break other e\-mail clients
or transfer agents, n' therefore mutulate or extinguish yo' message.
.IP "Warning: Illegal characta up in language '$lang'" 4
.IX Item "Warning: Illegal characta up in language '$lang'"
Da field is pimped wit data which is specified ta be up in a cold-ass lil certain language,
however, tha name of tha language cannot be valid: it gotz nuff characters
which is not permitted by tha RFCs.
.IP "Warning: Illegal encodin '$encoding', used 'q'" 4
.IX Item "Warning: Illegal encodin '$encoding', used 'q'"
Da RFCs only permit base64 (\f(CW\*(C`b \*(C'\fR or \f(CW\*(C`B \*(C'\fR) or quoted-printable
(\f(CW\*(C`q\*(C'\fR or \f(CW\*(C`Q\*(C'\fR) encoding.  Other than these four options is illegal.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
