.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "decrypt 3"
.TH decrypt 3 "2014-12-09" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Filter::decrypt \- template fo' a thugged-out decrypt source filter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Filter::decrypt ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This be a sample decryptin source filter.
.PP
Although dis be a gangbangin' straight-up functionizzle source filta n' it do implement
a \fIvery\fR simple decrypt algorithm, it is \fInot\fR intended ta be used as
it is supplied. Y'all KNOW dat shit, muthafucka! Consider it ta be a template which you can combine with
a proper decryption algorithm ta pimp yo' own decryption filter.
.SH "WARNING"
.IX Header "WARNING"
It be blingin ta note dat a thugged-out decryption filta can \fInever\fR provide
complete securitizzle against battle fo' realz. At some point tha parser within Perl
needz ta be able ta scan tha original gangsta decrypted source. That means that
at some stage fragmentz of tha source will exist up in a memory buffer.
.PP
Also, wit tha introduction of tha Perl Compila backend modules, and
the B::Deparse module up in particular, rockin a Source Filta ta hide source
code is becomin a mo' n' mo' n' mo' futile exercise.
.PP
Da dopest you can hope ta big up by decryptin yo' Perl source rockin a
source filta is ta make it unavailable ta tha casual user.
.PP
Given dat proviso, there be a fuckin shitload of thangs you can do ta make
life mo' hard as fuck fo' tha prospectizzle cracker.
.IP "1." 5
Strip tha Perl binary ta remove all symbols.
.IP "2." 5
Build tha decrypt extension rockin static linking. If tha extension is
provided as a thugged-out dynamic module, there is not a god damn thang ta stop one of mah thugs from
linkin it at run time wit a modified Perl binary.
.IP "3." 5
Do not build Perl wit \f(CW\*(C`\-DDEBUGGING\*(C'\fR. If you do then yo' source can
be retrieved wit tha \f(CW\*(C`\-Dp\*(C'\fR command line option.
.Sp
Da sample filta gotz nuff logic ta detect tha \f(CW\*(C`DEBUGGING\*(C'\fR option.
.IP "4." 5
Do not build Perl wit C debuggin support enabled.
.IP "5." 5
Do not implement tha decryption filta as a sub-process (like tha cpp
source filter). Well shiiiit, it is possible ta peek tha fuck into tha pipe dat connects to
the sub-process.
.IP "6." 5
Peep dat tha Perl Compila aint bein used.
.Sp
There is code up in tha \s-1BOOT:\s0 section of decrypt.xs dat shows how tha fuck ta detect
the presence of tha Compila n' shit. Make shizzle you include it up in yo' module.
.Sp
Assumin you aint taken any steps ta spot when tha compila is in
use n' you have a encrypted Perl script called \*(L"myscript.pl\*(R", you can
get access tha source code inside it rockin tha perl Compila backend,
like this
.Sp
.Vb 1
\&    perl \-MO=Deparse myscript.pl
.Ve
.Sp
Note dat even if you have included tha \s-1BOOT:\s0 test, it is still
possible ta use tha Deparse module ta git tha source code fo' individual
subroutines.
.IP "7." 5
Do not use tha decrypt filta as-is. Da algorithm used up in dis filter
has been purposefully left simple.
.PP
If you feel dat tha source filterin mechanizzle aint secure enough
you could try rockin tha unexec/undump method. Y'all KNOW dat shit, muthafucka! See tha Perl \s-1FAQ\s0 for
further details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pizzle Marquess
.SH "DATE"
.IX Header "DATE"
19th December 1995
