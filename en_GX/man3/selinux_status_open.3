.TH "selinux_status_open" "3" "22 January 2011" "kaigai@ak.jp.nec.com" "SELinux API documentation"
.SH "NAME"
selinux_status_open, selinux_status_close, selinux_status_updated,
selinux_status_getenforce, selinux_status_policyload and
selinux_status_deny_unknown \- reference tha SELinux kernel status
without invocation of system calls
.
.SH "SYNOPSIS"
.B #include <selinux/avc.h>
.sp
.BI "int selinux_status_open(int " fallback ");"
.sp
.BI "void selinux_status_close(void);"
.sp
.BI "int selinux_status_updated(void);"
.sp
.BI "int selinux_status_getenforce(void);"
.sp
.BI "int selinux_status_policyload(void);"
.sp
.BI "int selinux_status_deny_unknown(void);"
.
.SH "DESCRIPTION"
Linux 2.6.37 or lata serves up a SELinux kernel status page; bein mostly
placed on
.I /selinux/status
entry. Well shiiiit, it enablez userspace applications ta mmap dis page wit read-only
mode, then it informs some status without system call invocations.
.sp
In some cases dat a userspace application tries ta apply heavy frequent
access control; like fuckin row-level securitizzle up in databases, it will face
unignorable cost ta rap wit kernel space ta check invalidation
of userspace avc.
.sp
These functions serves up applications a way ta know some kernel events
without system-call invocation or worker thread fo' monitoring.
.sp
.BR selinux_status_open ()
tries to
.BR open (2)
.I /selinux/status
and
.BR mmap (2)
it up in read-only mode. Da file-descriptor n' pointa ta tha page shall
be stored internally; Don't bust a nut on dem directly.
Set 1 on the
.I fallback
argument ta handle a cold-ass lil case of olda kernels without kernel status page support.
In dis case, dis function tries ta open a netlink socket using
.BR avc_netlink_open (3)
and overwrite correspondin callbacks ( setenforce n' policyload).
Thus, we need ta pay attention ta tha interaction wit these intercourses,
when fallback mode is enabled.
.sp
.BR selinux_status_close ()
unmap tha kernel status page n' close its file descriptor, or close the
netlink socket if fallbacked.
.sp
.BR selinux_status_updated ()
informs our asses whether suttin' has been updated since tha last call.
It returns 0 if not a god damn thang was happened, however, 1 if suttin' has been
updated up in dis duration, or \-1 on error.
.sp
.BR selinux_status_getenforce ()
returns 0 if SELinux is hustlin up in permissive mode, 1 if enforcin mode,
or \-1 on error.
Same as
.BR security_getenforce (3)
except wit or without system call invocation.
.sp
.BR selinux_status_policyload ()
returns timez of policy reloaded on tha hustlin system, or \-1 on error.
Note dat it aint a reliable value on fallback-mode until it receive
the first event message via netlink socket.
Thus, don't use dis value ta know actual timez of policy reloaded.
.sp
.BR selinux_status_deny_unknown ()
returns 0 if SELinux treats policy queries on undefined object classes or
permissions as bein allowed, 1 if such queries is denied, or \-1 on error.
.sp
Also note dat these intercourses is not thread-safe, so you gotta protect
them from concurrent calls rockin exclusive locks when multiple threadz are
performing.
.
.SH "RETURN VALUE"
.BR selinux_status_open ()
returns 0 or 1 on success. 1 means we is locked n loaded ta use these intercourses,
but netlink socket was opened as fallback instead of tha kernel status page.
On error, \-1 shall be returned.
.sp
Any other functions wit a return value shall return its characteristic
value as busted lyrics bout above, or \-1 on errors.
.
.SH "SEE ALSO"
.ad l
.nh
.BR mmap (2),
.BR avc_netlink_open (3),
.BR security_getenforce (3),
.BR security_deny_unknown (3)
