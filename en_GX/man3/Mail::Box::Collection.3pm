.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Collection 3"
.TH Mail::Box::Collection 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Collection \- a cold-ass lil collection of subfolders
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Collection
\&   be a User::Identity::Collection
\&   be a User::Identity::Item
\&
\& Mail::Box::Collection
\&   be a Mail::Reporter
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da Mail::Box::Collection object maintains a set Mail::Box::Identity
objects, each describin a tha location of a single mailbox (folder).  The
collection is used by tha Mail::Box::Manage::User object ta administer
the foldaz of a single user, even if dem foldaz is closed.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.IP "overload: \fB@{}\fR()" 4
.IX Item "overload: @{}()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in User::Identity::Collection
.IP "overload: \fBstringification\fR()" 4
.IX Item "overload: stringification()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in User::Identity::Collection
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Collection\->\fBnew\fR([\s-1NAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Collection->new([NAME], OPTIONS)"
.Vb 10
\& \-Option     \-\-Defined up in                \-\-Default
\&  description  User::Identity::Item        undef
\&  folder_type                              <from parent>
\&  item_type    User::Identity::Collection  Mail::Box::Identity
\&  log          Mail::Reporta              \*(AqWARNINGS\*(Aq
\&  manager                                  <from parent>
\&  name         User::Identity::Item        \*(Aqfolders\*(Aq
\&  parent       User::Identity::Item        undef
\&  rolez        User::Identity::Collection  undef
\&  trace        Mail::Reporta              \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "description => \s-1STRING\s0" 2
.IX Item "description => STRING"
.PD 0
.IP "folder_type => \s-1CLASS\s0" 2
.IX Item "folder_type => CLASS"
.IP "item_type => \s-1CLASS\s0" 2
.IX Item "item_type => CLASS"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1OBJECT\s0" 2
.IX Item "manager => OBJECT"
.PD
An Mail::Box::Manager \s-1OBJECT \s0(could be a Mail::Box::Manage::User).
.IP "name => \s-1STRING\s0" 2
.IX Item "name => STRING"
.PD 0
.IP "parent => \s-1OBJECT\s0" 2
.IX Item "parent => OBJECT"
.IP "rolez => ROLE|ARRAY" 2
.IX Item "rolez => ROLE|ARRAY"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Collection\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Collection->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Collection\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Collection->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Collection\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Collection->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBdescription\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR()" 4
.IX Item "$obj->description()"
See \*(L"Attributes\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBfolderType\fR([\s-1FOLDERCLASS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolderType\fR([\s-1FOLDERCLASS\s0])" 4
.IX Item "$obj->folderType([FOLDERCLASS])"
Returns tha type of folda (on dis location).  When specified, then
\&\s-1FOLDERCLASS\s0 must be a Mail::Box extension.
.ie n .IP "$obj\->\fBitemType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBitemType\fR()" 4
.IX Item "$obj->itemType()"
See \*(L"Attributes\*(R" up in User::Identity::Collection
.ie n .IP "$obj\->\fBmanager\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmanager\fR()" 4
.IX Item "$obj->manager()"
Da Mail::Box::Manager (usually a Mail::Box::Manage::User object),
which is handlin tha openin of folders.
.ie n .IP "$obj\->\fBname\fR([\s-1NEWNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR([\s-1NEWNAME\s0])" 4
.IX Item "$obj->name([NEWNAME])"
See \*(L"Attributes\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBroles\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBroles\fR()" 4
.IX Item "$obj->roles()"
See \*(L"Attributes\*(R" up in User::Identity::Collection
.SS "Collections"
.IX Subsection "Collections"
.ie n .IP "$obj\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)" 4
.IX Item "$obj->add(COLLECTION, ROLE)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.IX Item "$obj->addCollection(OBJECT | ([TYPE], OPTIONS))"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBcollection\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcollection\fR(\s-1NAME\s0)" 4
.IX Item "$obj->collection(NAME)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR([\s-1PARENT\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR([\s-1PARENT\s0])" 4
.IX Item "$obj->parent([PARENT])"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.IX Item "$obj->removeCollection(OBJECT|NAME)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
.PD 0
.IP "Mail::Box::Collection\->\fBtype\fR()" 4
.IX Item "Mail::Box::Collection->type()"
.PD
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
See \*(L"Collections\*(R" up in User::Identity::Item
.SS "Maintainin roles"
.IX Subsection "Maintainin roles"
.ie n .IP "$obj\->\fBaddRole\fR(ROLE| ( [\s-1NAME\s0],OPTIONS ) | ARRAY-OF-OPTIONS)" 4
.el .IP "\f(CW$obj\fR\->\fBaddRole\fR(ROLE| ( [\s-1NAME\s0],OPTIONS ) | ARRAY-OF-OPTIONS)" 4
.IX Item "$obj->addRole(ROLE| ( [NAME],OPTIONS ) | ARRAY-OF-OPTIONS)"
See \*(L"Maintainin roles\*(R" up in User::Identity::Collection
.ie n .IP "$obj\->\fBremoveRole\fR(ROLE|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveRole\fR(ROLE|NAME)" 4
.IX Item "$obj->removeRole(ROLE|NAME)"
See \*(L"Maintainin roles\*(R" up in User::Identity::Collection
.ie n .IP "$obj\->\fBrenameRole\fR(ROLE|OLDNAME, \s-1NEWNAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBrenameRole\fR(ROLE|OLDNAME, \s-1NEWNAME\s0)" 4
.IX Item "$obj->renameRole(ROLE|OLDNAME, NEWNAME)"
See \*(L"Maintainin roles\*(R" up in User::Identity::Collection
.ie n .IP "$obj\->\fBsorted\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsorted\fR()" 4
.IX Item "$obj->sorted()"
See \*(L"Maintainin roles\*(R" up in User::Identity::Collection
.SS "Searching"
.IX Subsection "Searching"
.ie n .IP "$obj\->\fBfind\fR(NAME|CODE|undef)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(NAME|CODE|undef)" 4
.IX Item "$obj->find(NAME|CODE|undef)"
See \*(L"Searching\*(R" up in User::Identity::Collection
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object aint a cold-ass lil collection." 4
.el .IP "Error: \f(CW$object\fR aint a cold-ass lil collection." 4
.IX Item "Error: $object aint a cold-ass lil collection."
Da first argument be a object yo, but not of a cold-ass lil class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot create a $type ta add dis ta mah collection." 4
.el .IP "Error: Cannot create a \f(CW$type\fR ta add dis ta mah collection." 4
.IX Item "Error: Cannot create a $type ta add dis ta mah collection."
Some options is specified ta create a \f(CW$type\fR object, which is natizzle to
this collection. I aint talkin' bout chicken n' gravy biatch.  But fuck dat shiznit yo, tha word on tha street is dat fo' some reason dis failed.
.ie n .IP "Error: Cannot load collection module fo' $type ($class)." 4
.el .IP "Error: Cannot load collection module fo' \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module fo' $type ($class)."
Either tha specified \f(CW$type\fR do not exist, or dat module named \f(CW$class\fR returns
compilation errors.  If tha type as specified up in tha warnin is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot tha 'require' tha package which defines tha nickname.
.ie n .IP "Error: Cannot rename $name tha fuck into $newname: already exists" 4
.el .IP "Error: Cannot rename \f(CW$name\fR tha fuck into \f(CW$newname:\fR already exists" 4
.IX Item "Error: Cannot rename $name tha fuck into $newname: already exists"
.PD 0
.ie n .IP "Error: Cannot rename $name tha fuck into $newname: don't exist" 4
.el .IP "Error: Cannot rename \f(CW$name\fR tha fuck into \f(CW$newname:\fR don't exist" 4
.IX Item "Error: Cannot rename $name tha fuck into $newname: don't exist"
.ie n .IP "Error: Creation of a cold-ass lil collection via $class failed." 4
.el .IP "Error: Creation of a cold-ass lil collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a cold-ass lil collection via $class failed."
.PD
Da \f(CW$class\fR did compile yo, but dat shiznit was not possible ta create a object
of dat class rockin tha options you specified.
.IP "Error: Don't know what tha fuck type of collection you wanna add." 4
.IX Item "Error: Don't know what tha fuck type of collection you wanna add."
If you add a cold-ass lil collection, it must either by a cold-ass lil collection object or a
list of options which can be used ta create a cold-ass lil collection object.  In
the latta case, tha type of collection must be specified.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
Da collection wit \f(CW$name\fR do not exist n' can not be pimped.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Wrong type of role fo' $collection: requires a $expect but gots a $type" 4
.el .IP "Error: Wrong type of role fo' \f(CW$collection:\fR requires a \f(CW$expect\fR but gots a \f(CW$type\fR" 4
.IX Item "Error: Wrong type of role fo' $collection: requires a $expect but gots a $type"
Each \f(CW$collection\fR crews setz of rolez of one specific type ($expect).  You
cannot add objectz of a gangbangin' finger-lickin' different \f(CW$type\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
