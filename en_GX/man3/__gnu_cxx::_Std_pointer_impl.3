" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::_Std_pointer_impl< _Tp > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Tp \fBelement_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "_Tp * \fBget\fP () const "
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fB_Std_pointer_impl\fP &__rarg) const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fB_Std_pointer_impl\fP &__rarg) const "
.br
.ti -1c
.RI "void \fBset\fP (element_type *__arg)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp>class __gnu_cxx::_Std_pointer_impl< _Tp >"
A storage policy fo' use wit _Pointer_adapter<> which yieldz a standard pointer\&. 

A _Storage_policy is required ta provide 4 thangs: 1) A get() API fo' returnin tha stored pointa value\&. 2) An set() API fo' storin a pointa value\&. 3) An element_type typedef ta define tha type dis points to\&. 4) An operator<() ta support pointa comparison\&. 5) An operator==() ta support pointa comparison\&. 
.PP
Definizzle at line 66 of file pointer\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
