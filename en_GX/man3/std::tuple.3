" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::tuple< _Elements > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstd::_Tuple_impl< 0, _Elements\&.\&.\&.>\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBtuple\fP (const _Elements &\&.\&.\&.__elements)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _UElements, typename  = typename enable_if<__and_<is_convertible<_UElements,					_Elements>\&.\&.\&.>::value>::type> constexpr \fBtuple\fP (_UElements &&\&.\&.\&.__elements)"
.br
.ti -1c
.RI "constexpr \fBtuple\fP (const \fBtuple\fP &)=default"
.br
.ti -1c
.RI "constexpr \fBtuple\fP (\fBtuple\fP &&)=default"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _UElements, typename  = typename enable_if<__and_<is_convertible<const _UElements&,					_Elements>\&.\&.\&.>::value>::type> constexpr \fBtuple\fP (const \fBtuple\fP< _UElements\&.\&.\&.> &__in)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _UElements, typename  = typename enable_if<__and_<is_convertible<_UElements,					_Elements>\&.\&.\&.>::value>::type> constexpr \fBtuple\fP (\fBtuple\fP< _UElements\&.\&.\&.> &&__in)"
.br
.ti -1c
.RI "template<typename _Alloc > \fBtuple\fP (\fBallocator_arg_t\fP __tag, const _Alloc &__a)"
.br
.ti -1c
.RI "template<typename _Alloc > \fBtuple\fP (\fBallocator_arg_t\fP __tag, const _Alloc &__a, const _Elements &\&.\&.\&.__elements)"
.br
.ti -1c
.RI "template<typename _Alloc , typename\&.\&.\&. _UElements, typename  = typename enable_if<sizeof\&.\&.\&.(_UElements)			 == sizeof\&.\&.\&.(_Elements)>::type> \fBtuple\fP (\fBallocator_arg_t\fP __tag, const _Alloc &__a, _UElements &&\&.\&.\&.__elements)"
.br
.ti -1c
.RI "template<typename _Alloc > \fBtuple\fP (\fBallocator_arg_t\fP __tag, const _Alloc &__a, const \fBtuple\fP &__in)"
.br
.ti -1c
.RI "template<typename _Alloc > \fBtuple\fP (\fBallocator_arg_t\fP __tag, const _Alloc &__a, \fBtuple\fP &&__in)"
.br
.ti -1c
.RI "template<typename _Alloc , typename\&.\&.\&. _UElements, typename  = typename enable_if<sizeof\&.\&.\&.(_UElements)			 == sizeof\&.\&.\&.(_Elements)>::type> \fBtuple\fP (\fBallocator_arg_t\fP __tag, const _Alloc &__a, const \fBtuple\fP< _UElements\&.\&.\&.> &__in)"
.br
.ti -1c
.RI "template<typename _Alloc , typename\&.\&.\&. _UElements, typename  = typename enable_if<sizeof\&.\&.\&.(_UElements)			 == sizeof\&.\&.\&.(_Elements)>::type> \fBtuple\fP (\fBallocator_arg_t\fP __tag, const _Alloc &__a, \fBtuple\fP< _UElements\&.\&.\&.> &&__in)"
.br
.ti -1c
.RI "\fBtuple\fP & \fBoperator=\fP (const \fBtuple\fP &__in)"
.br
.ti -1c
.RI "\fBtuple\fP & \fBoperator=\fP (\fBtuple\fP &&__in) noexcept(\fBis_nothrow_move_assignable\fP< \fB_Inherited\fP >::value)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _UElements, typename  = typename enable_if<sizeof\&.\&.\&.(_UElements)			 == sizeof\&.\&.\&.(_Elements)>::type> \fBtuple\fP & \fBoperator=\fP (const \fBtuple\fP< _UElements\&.\&.\&.> &__in)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _UElements, typename  = typename enable_if<sizeof\&.\&.\&.(_UElements)			 == sizeof\&.\&.\&.(_Elements)>::type> \fBtuple\fP & \fBoperator=\fP (\fBtuple\fP< _UElements\&.\&.\&.> &&__in)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBtuple\fP &__in) noexcept(noexcept(__in\&._M_swap(__in)))"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename\&.\&.\&. _Elements>class std::tuple< _Elements >"
Primary class template, tuple\&. 
.PP
Definizzle at line 388 of file tuple\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
