.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SelfLoader 3pm"
.TH SelfLoader 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SelfLoader \- load functions only on demand
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package FOOBAR;
\&    use SelfLoader;
\&
\&    ... (initializin code)
\&
\&    _\|_DATA_\|_
\&    sub {....
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module  drops some lyrics ta its playas dat functions up in tha \s-1FOOBAR\s0 package is ta be
autoloaded from afta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token. I aint talkin' bout chicken n' gravy biatch.  See also
\&\*(L"Autoloading\*(R" up in perlsub.
.SS "Da _\|_DATA_\|_ token"
.IX Subsection "Da __DATA__ token"
Da \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token  drops some lyrics ta tha perl compila dat tha perl code
for compilation is finished. Y'all KNOW dat shit, muthafucka! Everythang afta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token
is available fo' readin via tha filehandle \s-1FOOBAR::DATA,\s0
where \s-1FOOBAR\s0 is tha name of tha current package when tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR
token is reached. Y'all KNOW dat shit, muthafucka! This works just tha same as \f(CW\*(C`_\|_END_\|_\*(C'\fR do in
package 'main' yo, but fo' other modulez data afta \f(CW\*(C`_\|_END_\|_\*(C'\fR is not
automatically retrievable, whereas data afta \f(CW\*(C`_\|_DATA_\|_\*(C'\fR is.
Da \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token aint recognized up in versionz of perl prior to
5.001m.
.PP
Note dat it is possible ta have \f(CW\*(C`_\|_DATA_\|_\*(C'\fR tokens up in tha same package
in multiple files, n' dat tha last \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token up in a given
package dat is encountered by tha compila is tha one accessible
by tha filehandle. This also applies ta \f(CW\*(C`_\|_END_\|_\*(C'\fR n' main, i.e. if
the 'main' program has a \f(CW\*(C`_\|_END_\|_\*(C'\fR yo, but a module 'require'd (_not_ 'use'd)
by dat program has a 'package main;' declaration followed by a '\f(CW\*(C`_\|_DATA_\|_\*(C'\fR',
then tha \f(CW\*(C`DATA\*(C'\fR filehandle is set ta access tha data afta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR
in tha module, _not_ tha data afta tha \f(CW\*(C`_\|_END_\|_\*(C'\fR token up in tha 'main'
program, since tha compila encountas tha 'require'd file later.
.SS "SelfLoader autoloading"
.IX Subsection "SelfLoader autoloading"
Da \fBSelfLoader\fR works by tha user placin tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR
token \fIafter\fR perl code which need ta be compiled and
run at 'require' time yo, but \fIbefore\fR subroutine declarations
that can be loaded up in lata \- probably cuz they may never
be called.
.PP
Da \fBSelfLoader\fR will read from tha \s-1FOOBAR::DATA\s0 filehandle to
load up in tha data afta \f(CW\*(C`_\|_DATA_\|_\*(C'\fR, n' load up in any subroutine
when it is called. Y'all KNOW dat shit, muthafucka! Da costs is tha one-time parsin of the
data afta \f(CW\*(C`_\|_DATA_\|_\*(C'\fR, n' a load delay fo' tha _first_
call of any autoloaded function. I aint talkin' bout chicken n' gravy biatch. Da benefits (hopefully)
are a speeded up compilation phase, wit no need ta load
functions which is never used.
.PP
Da \fBSelfLoader\fR will stop readin from \f(CW\*(C`_\|_DATA_\|_\*(C'\fR if
it encountas tha \f(CW\*(C`_\|_END_\|_\*(C'\fR token \- just as you would expect.
If tha \f(CW\*(C`_\|_END_\|_\*(C'\fR token is present, n' is followed by the
token \s-1DATA,\s0 then tha \fBSelfLoader\fR leaves tha \s-1FOOBAR::DATA\s0
filehandle open on tha line afta dat token.
.PP
Da \fBSelfLoader\fR exports tha \f(CW\*(C`AUTOLOAD\*(C'\fR subroutine ta the
package rockin tha \fBSelfLoader\fR, n' dis loadz tha called
subroutine when it is first called.
.PP
There is no advantage ta puttin subroutines which will _always_
be called afta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token.
.SS "Autoloadin n' package lexicals"
.IX Subsection "Autoloadin n' package lexicals"
A 'my \f(CW$pack_lexical\fR' statement make tha variable \f(CW$pack_lexical\fR
local _only_ ta tha file up ta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Subroutines
declared elsewhere _cannot_ peep these typez of variables,
just as if you declared subroutines up in tha package but up in another
file, they cannot peep these variables.
.PP
So specifically, autoloaded functions cannot peep package
lexicals (this applies ta both tha \fBSelfLoader\fR n' tha Autoloader).
Da \f(CW\*(C`vars\*(C'\fR pragma serves up a alternatizzle ta definin package-level
globals dat is ghon be visible ta autoloaded routines. Right back up in yo muthafuckin ass. See tha documentation
on \fBvars\fR up in tha pragma section of perlmod.
.SS "SelfLoader n' AutoLoader"
.IX Subsection "SelfLoader n' AutoLoader"
Da \fBSelfLoader\fR can replace tha AutoLoader \- just chizzle 'use AutoLoader'
to 'use SelfLoader' (though note dat tha \fBSelfLoader\fR exports
the \s-1AUTOLOAD\s0 function \- but if you have yo' own \s-1AUTOLOAD\s0 and
are rockin tha AutoLoader too, you probably know what tha fuck you bustin),
and tha \f(CW\*(C`_\|_END_\|_\*(C'\fR token ta \f(CW\*(C`_\|_DATA_\|_\*(C'\fR. Yo ass will need perl version 5.001m
or lata ta use dis (version 5.001 wit all patches up ta patch m).
.PP
There is no need ta inherit from tha \fBSelfLoader\fR.
.PP
Da \fBSelfLoader\fR works similarly ta tha AutoLoader yo, but picks up the
subs from afta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR instead of up in tha 'lib/auto' directory.
There be a maintenizzle bust up in not needin ta run AutoSplit on tha module
at installation, n' a runtime bust up in not needin ta keep openin and
closin filez ta load subs. There be a runtime loss up in needing
to parse tha code afta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR. Detailz of tha \fBAutoLoader\fR and
another view of these distinctions can be found up in dat module's
documentation.
.SS "_\|_DATA_\|_, _\|_END_\|_, n' tha \s-1FOOBAR::DATA\s0 filehandle."
.IX Subsection "__DATA__, __END__, n' tha FOOBAR::DATA filehandle."
This section is only relevant if you wanna use
the \f(CW\*(C`FOOBAR::DATA\*(C'\fR together wit tha \fBSelfLoader\fR.
.PP
Data afta tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token up in a module is read rockin the
\&\s-1FOOBAR::DATA\s0 filehandle. \f(CW\*(C`_\|_END_\|_\*(C'\fR can still be used ta denote tha end
of tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR section if followed by tha token \s-1DATA \-\s0 dis is supported
by tha \fBSelfLoader\fR. Da \f(CW\*(C`FOOBAR::DATA\*(C'\fR filehandle is left open if an
\&\f(CW\*(C`_\|_END_\|_\*(C'\fR followed by a \s-1DATA\s0 is found, wit tha filehandle positioned at
the start of tha line afta tha \f(CW\*(C`_\|_END_\|_\*(C'\fR token. I aint talkin' bout chicken n' gravy biatch. If no \f(CW\*(C`_\|_END_\|_\*(C'\fR token is
present, or a \f(CW\*(C`_\|_END_\|_\*(C'\fR token wit no \s-1DATA\s0 token on tha same line, then
the filehandle is closed.
.PP
Da \fBSelfLoader\fR readz from wherever tha current
posizzle of tha \f(CW\*(C`FOOBAR::DATA\*(C'\fR filehandle is, until the
\&\s-1EOF\s0 or \f(CW\*(C`_\|_END_\|_\*(C'\fR. This means dat if you wanna use
that filehandle (and \s-1ONLY\s0 if you want to), you should either
.PP
1. Put all yo' subroutine declarations immediately after
the \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token n' put yo' own data afta them
declarations, rockin tha \f(CW\*(C`_\|_END_\|_\*(C'\fR token ta mark tha end
of subroutine declarations. Yo ass must also ensure dat tha \fBSelfLoader\fR
readz first by  callin 'SelfLoader\->\fIload_stubs()\fR;', or by rockin a
function which is selfloaded;
.PP
or
.PP
2. Yo ass should read tha \f(CW\*(C`FOOBAR::DATA\*(C'\fR filehandle first, leaving
the handle open n' positioned all up in tha straight-up original gangsta line of subroutine
declarations.
.PP
Yo ass could conceivably do both.
.SS "Classes n' inherited methods."
.IX Subsection "Classes n' inherited methods."
For modulez which is not classes, dis section aint relevant.
This section is only relevant if you have methodz which could
be inherited.
.PP
A subroutine stub (or forward declaration) looks like
.PP
.Vb 1
\&  sub stub;
.Ve
.PP
i.e. it aint nuthin but a subroutine declaration without tha body of the
subroutine. For modulez which is not classes, there is no real
need fo' stubs as far as autoloadin is concerned.
.PP
For modulez which \s-1ARE\s0 classes, n' need ta handle inherited methods,
stubs is needed ta ensure dat tha method inheritizzle mechanizzle works
properly. Yo ass can load tha stubs tha fuck into tha module at 'require' time, by
addin tha statement 'SelfLoader\->\fIload_stubs()\fR;' ta tha module ta do
this.
.PP
Da alternatizzle is ta put tha stubs up in before tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token \s-1BEFORE\s0
releasin tha module, n' fo' dis purpose tha \f(CW\*(C`Devel::SelfStubber\*(C'\fR
module be available.  However dis do require tha extra step of ensuring
that tha stubs is up in tha module. If dis is done I straight fuckin recommend
that dis is done \s-1BEFORE\s0 releasin tha module \- it should \s-1NOT\s0 be done
at install time up in general.
.SH "Multiple packages n' straight-up qualified subroutine names"
.IX Header "Multiple packages n' straight-up qualified subroutine names"
Subroutines up in multiple packages within tha same file is supported \- but you
should note dat dis requires exportin tha \f(CW\*(C`SelfLoader::AUTOLOAD\*(C'\fR to
every package which requires dat shit. This is done automatically by the
\&\fBSelfLoader\fR when it first loadz tha subs tha fuck into tha cache yo, but you should
really specify it up in tha initialization before tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR by putting
a 'use SelfLoader' statement up in each package.
.PP
Fully qualified subroutine names is also supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For example,
.PP
.Vb 4
\&   _\|_DATA_\|_
\&   sub foo::bar {23}
\&   package baz;
\&   sub dob {32}
.Ve
.PP
will all be loaded erectly by tha \fBSelfLoader\fR, n' tha \fBSelfLoader\fR
will ensure dat tha packages 'foo' n' 'baz' erectly have the
\&\fBSelfLoader\fR \f(CW\*(C`AUTOLOAD\*(C'\fR method when tha data afta \f(CW\*(C`_\|_DATA_\|_\*(C'\fR is first
parsed.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\f(CW\*(C`SelfLoader\*(C'\fR is maintained by tha perl5\-porters. Please direct
any thangs ta tha canonical mailin list fo' realz. Anythang that
is applicable ta tha \s-1CPAN\s0 release can be busted ta its maintainer,
though.
.PP
Lyricist n' Maintainer: Da Perl5\-Portas <perl5\-porters@perl.org>
.PP
Maintainer of tha \s-1CPAN\s0 release: Steffen Muella <smueller@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This package has been part of tha perl core since tha straight-up original gangsta release
of perl5. Well shiiiit, it has been busted out separately ta \s-1CPAN\s0 so olda installations
can benefit from bug fixes.
.PP
This package has tha same ol' dirty copyright n' license as tha perl core:
.PP
.Vb 2
\&             Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999,
\&        2000, 2001, 2002, 2003, 2004, 2005, 2006 by Larry Wall n' others
\&
\&                            All muthafuckin rights reserved.
\&
\&    This program is free software; you can redistribute it and/or modify
\&    it under tha termz of either:
\&
\&        a) tha GNU General Public License as published by tha Free
\&        Software Foundation; either version 1, or (at yo' option) any
\&        lata version, or
\&
\&        b) tha "Artistic License" which comes wit dis Kit.
\&
\&    This program is distributed up in tha hope dat it is ghon be useful,
\&    but WITHOUT ANY WARRANTY; without even tha implied warranty of
\&    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
\&    tha GNU General Public License or tha Artistic License fo' mo' details.
\&
\&    Yo ass should have received a cold-ass lil copy of tha Artistic License wit this
\&    Kit, up in tha file named "Artistic".  If not, I\*(Aqll be glad ta provide one.
\&
\&    Yo ass should also have received a cold-ass lil copy of tha GNU General Public License
\&    along wit dis program up in tha file named "Copying". If not, write ta tha 
\&    Jacked Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
\&    MA 02110\-1301, USA or visit they wizzy page on tha internizzle at
\&    http://www.gnu.org/copyleft/gpl.html.
\&
\&    For all y'all dat chizzle ta use tha GNU General Public License,
\&    mah interpretation of tha GNU General Public License is dat no Perl
\&    script falls under tha termz of tha GPL unless you explicitly put
\&    holla'd script under tha termz of tha GPL yo ass.  Furthermore, any
\&    object code linked wit perl do not automatically fall under the
\&    termz of tha GPL, provided such object code only addz definitions
\&    of subroutines n' variables, n' do not otherwise impair the
\&    resultin interpreta from executin any standard Perl script.  I
\&    consider linkin up in C subroutines up in dis manner ta be tha moral
\&    equivalent of definin subroutines up in tha Perl language itself.  You
\&    may push such a object file as proprietary provided dat you provide
\&    or offer ta provide tha Perl source, as specified by tha GNU General
\&    Public License.  (This is merely a alternate way of specifyin input
\&    ta tha program.)  Yo ass may also push a funky-ass binary produced by tha dumpin of
\&    a hustlin Perl script dat belongs ta you, provided dat you provide or
\&    offer ta provide tha Perl source as specified by tha GPL.  (The
\&    fact dat a Perl interpreta n' yo' code is up in tha same binary file
\&    is, up in dis case, a gangbangin' form of mere aggregation.)  This is mah interpretation
\&    of tha GPL.  If you still have concerns or bullshit understanding
\&    mah intent, feel free ta contact mah dirty ass.  Of course, tha Artistic License
\&    spells all dis up fo' yo' protection, so you may prefer ta use dis shit.
.Ve
