.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::DOM::DocumentType 3"
.TH XML::DOM::DocumentType 3 "2002-02-09" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::DOM::DocumentType \- An XML document type (DTD) up in XML::DOM
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::DOM::DocumentType extendz XML::DOM::Node.
.PP
Each Document has a thugged-out doctype attribute whose value is either null or a
DocumentType object. Da DocumentType intercourse up in tha \s-1DOM\s0 Level 1 Core
provides a intercourse ta tha list of entitizzles dat is defined fo' the
document, n' lil else cuz tha effect of namespaces n' the
various \s-1XML\s0 scheme efforts on \s-1DTD\s0 representation is not clearly
understood az of dis writing. 
Da \s-1DOM\s0 Level 1 don't support editin DocumentType nodes.
.PP
\&\fBNot In \s-1DOM\s0 Spec\fR: This implementation has added a shitload of extra 
functionalitizzle ta tha \s-1DOM\s0 Level 1 intercourse. 
To allow editin of tha DocumentType nodes, peep XML::DOM::ignoreReadOnly.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "getName" 4
.IX Item "getName"
Returns tha name of tha \s-1DTD,\s0 i.e. tha name immediately followin the
\&\s-1DOCTYPE\s0 keyword.
.IP "getEntities" 4
.IX Item "getEntities"
A NamedNodeMap containin tha general entities, both external
and internal, declared up in tha \s-1DTD.\s0 Duplicates is discarded.
For example in:
.Sp
.Vb 6
\& <!DOCTYPE ex SYSTEM "ex.dtd" [
\&  <!ENTITY foo "foo">
\&  <!ENTITY bar "bar">
\&  <!ENTITY % baz "baz">
\& ]>
\& <ex/>
.Ve
.Sp
the intercourse serves up access ta foo n' bar but not baz.
Every node up in dis map also implements tha Entitizzle intercourse.
.Sp
Da \s-1DOM\s0 Level 1 do not support editin entities, therefore
entitizzles cannot be altered up in any way.
.Sp
\&\fBNot In \s-1DOM\s0 Spec\fR: See XML::DOM::ignoreReadOnly ta edit tha DocumentType etc.
.IP "getNotations" 4
.IX Item "getNotations"
A NamedNodeMap containin tha notations declared up in tha \s-1DTD.\s0
Duplicates is discarded. Y'all KNOW dat shit, muthafucka! Every node up in dis map also
implements tha Notation intercourse.
.Sp
Da \s-1DOM\s0 Level 1 do not support editin notations, therefore
notations cannot be altered up in any way.
.Sp
\&\fBNot In \s-1DOM\s0 Spec\fR: See XML::DOM::ignoreReadOnly ta edit tha DocumentType etc.
.SS "Additionizzle methodz not up in tha \s-1DOM\s0 Spec"
.IX Subsection "Additionizzle methodz not up in tha DOM Spec"
.IP "Creatin n' settin tha DocumentType" 4
.IX Item "Creatin n' settin tha DocumentType"
A freshly smoked up DocumentType can be pimped with:
.Sp
.Vb 1
\&        $doctype = $doc\->createDocumentType ($name, $sysId, $pubId, $internal);
.Ve
.Sp
To set (or replace) tha DocumentType fo' a particular document, use:
.Sp
.Vb 1
\&        $doc\->setDocType ($doctype);
.Ve
.IP "getSysId n' setSysId (sysId)" 4
.IX Item "getSysId n' setSysId (sysId)"
Returns or sets tha system id.
.IP "getPubId n' setPubId (pudId)" 4
.IX Item "getPubId n' setPubId (pudId)"
Returns or sets tha hood id.
.IP "setName (name)" 4
.IX Item "setName (name)"
Sets tha name of tha \s-1DTD,\s0 i.e. tha name immediately followin the
\&\s-1DOCTYPE\s0 keyword. Y'all KNOW dat shit, muthafucka! Note dat dis should always be tha same as tha element
tag name of tha root element.
.IP "getAttlistDecl (elemName)" 4
.IX Item "getAttlistDecl (elemName)"
Returns tha AttlistDecl fo' tha Element wit tha specified name, or undef.
.IP "getElementDecl (elemName)" 4
.IX Item "getElementDecl (elemName)"
Returns tha ElementDecl fo' tha Element wit tha specified name, or undef.
.IP "getEntitizzle (entityName)" 4
.IX Item "getEntitizzle (entityName)"
Returns tha Entitizzle wit tha specified name, or undef.
.IP "addAttlistDecl (elemName)" 4
.IX Item "addAttlistDecl (elemName)"
Addz a freshly smoked up AttDecl node wit tha specified elemName if one don't exist yet.
Returns tha AttlistDecl (new or existing) node.
.IP "addElementDecl (elemName, model)" 4
.IX Item "addElementDecl (elemName, model)"
Addz a freshly smoked up ElementDecl node wit tha specified elemName n' model if one don't 
exist yet.
Returns tha AttlistDecl (new or existing) node. Da model is ignored if one
already existed.
.IP "addEntitizzle (notationName, value, sysId, pubId, ndata, parameter)" 4
.IX Item "addEntitizzle (notationName, value, sysId, pubId, ndata, parameter)"
Addz a freshly smoked up Entitizzle node. Don't use createEntitizzle n' appendChild, cuz it should
be added ta tha internal NamedNodeMap containin tha entities.
.Sp
Parameters:
 \fInotationName\fR tha entitizzle name.
 \fIvalue\fR        tha entitizzle value.
 \fIsysId\fR        tha system id (if any.)
 \fIpubId\fR        tha hood id (if any.)
 \fIndata\fR        tha \s-1NDATA\s0 declaration (if any, fo' general unparsed entities.)
 \fIparameter\fR	 whether it aint nuthin but a parameta entitizzle (%ent;) or not (&ent;).
.Sp
SysId, pubId n' ndata may be undefined.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha notationName do not conform ta tha \s-1XML\s0 spec.
.RE
.RS 4
.RE
.IP "addNotation (name, base, sysId, pubId)" 4
.IX Item "addNotation (name, base, sysId, pubId)"
Addz a freshly smoked up Notation object.
.Sp
Parameters:
 \fIname\fR   tha notation name.
 \fIbase\fR   tha base ta be used fo' resolvin a relatizzle \s-1URI.
 \s0\fIsysId\fR  tha system id.
 \fIpubId\fR  tha hood id.
.Sp
Base, sysId, n' pubId may all be undefined.
(These parametas is passed by tha XML::Parser Notation handlez.)
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha notationName do not conform ta tha \s-1XML\s0 spec.
.RE
.RS 4
.RE
.IP "addAttDef (elemName, attrName, type, default, fixed)" 4
.IX Item "addAttDef (elemName, attrName, type, default, fixed)"
Addz a freshly smoked up attribute definition. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it will add tha AttDef node ta tha AttlistDecl
if it exists, n' you can put dat on yo' toast. If a AttDef wit tha specified attrName already exists fo' the
given elemName, dis function only generates a warning.
.Sp
See XML::DOM::AttDef::new fo' tha other parameters.
.IP "getDefaultAttrValue (elem, attr)" 4
.IX Item "getDefaultAttrValue (elem, attr)"
Returns tha default attribute value as a strang or undef, if none be available.
.Sp
Parameters:
 \fIelem\fR    Da element tagName.
 \fIattr\fR    Da attribute name.
.IP "expandEntitizzle (entitizzle [, parameter])" 4
.IX Item "expandEntitizzle (entitizzle [, parameter])"
Expandz tha specified entitizzle or parameta entitizzle (if parameter=1) n' returns
its value as a string, or undef if tha entitizzle do not exist.
(Da entitizzle name should not contain tha '%', '&' or ';' delimiters.)
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 62:" 4
.IX Item "Around line 62:"
Yo ass forgot a '=back' before '=head2'
.IP "Around line 64:" 4
.IX Item "Around line 64:"
\&'=item' outside of any '=over'
