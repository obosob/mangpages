'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbChangeEnabledControls 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbChangeEnabledControls \- Manipulates tha EnabledControls control
.SH SYNOPSIS
.HP
.B Bool XkbChangeEnabledControls
.BI "(\^Display *" "dpy" "\^,"
.BI "unsigned int " "device_spec" "\^,"
.BI "unsigned int " "mask" "\^,"
.BI "unsigned int " "values" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- dpy
connection ta X server
.TP
.I \- device_spec
 keyboard thang ta modify
.TP
.I \- mask
1 bit -> controls ta enable / disable
.TP
.I \- joints
1 bit => enable, 0 bit => disable 
.SH DESCRIPTION
.LP
Da EnabledControls control be a lil' bit mask where each bit dat is turned on means tha 
correspondin control is enabled, n' when turned off, disabled. Y'all KNOW dat shit, muthafucka! Well shiiiit, it correspondz ta tha 
.I enabled_ctrls 
field of a XkbControlsRec structure (see STRUCTURES). Da bits describin which controls is 
turned on or off is defined up in Table 1.

Table 1 shows tha actual joints fo' tha individual mask bits used ta select controls fo' 
modification n' ta enable n' disable tha control. Note dat tha same mask bit is used ta 
specify general modifications ta tha parametas used ta configure tha control (which), n' ta 
enable n' disable tha control (enabled_ctrls). Da anomalies up in tha table (no "ok" up in column) 
are fo' controls dat have no configurable attributes; n' fo' controls dat is not boolean 
controls n' therefore cannot be enabled or disabled.
.bp
.TS
c s s s
l l l l
l l l l
l l l l. 
Table 1 Controls Mask Bits
_
Mask Bit	which or	enabled	Value
	changed_ctrls	_ctrls
_
XkbRepeatKeysMask	ok	ok	(1L<<0)
XkbSlowKeysMask	ok	ok	(1L<<1)
XkbBounceKeysMask	ok	ok	(1L<<2)
XkbStickyKeysMask	ok	ok	(1L<<3)
XkbMouseKeysMask	ok	ok	(1L<<4)
XkbMouseKeysAccelMask	ok	ok	(1L<<5)
XkbAccessXKeysMask	ok	ok	(1L<<6)
XkbAccessXTimeoutMask	ok	ok	(1L<<7)
XkbAccessXFeedbackMask	ok	ok	(1L<<8)
XkbAudibleBellMask		ok	(1L<<9)
XkbOverlay1Mask		ok	(1L<<10)
XkbOverlay2Mask		ok	(1L<<11)
XkbIgnoreGroupLockMask		ok	(1L<<12)
XkbGroupsWrapMask	ok		(1L<<27)
XkbInternalModsMask	ok		(1L<<28)
XkbIgnoreLockModsMask	ok		(1L<<29)
XkbPerKeyRepeatMask	ok		(1L<<30)
XkbControlsEnabledMask	ok		(1L<<31)
XkbAccessXOptionsMask	ok	ok	(XkbStickyKeysMask | 
			XkbAccessXFeedbackMask)
XkbAllBooleanCtrlsMask		ok	(0x00001FFF) 
XkbAllControlsMask	ok		(0xF8001FFF)
.TE

Da 
.I mask 
parameta specifies tha boolean controls ta be enabled or disabled, n' tha 
.I joints 
mask specifies tha freshly smoked up state fo' dem controls. Valid joints fo' both of these 
masks is composed of a funky-ass bitwise inclusive OR of bits taken from tha set of mask 
bits up in Table 1, rockin only dem masks wit "ok" up in tha 
.I enabled_ctrls 
column.

If tha X server do not support a cold-ass lil compatible version of Xkb or tha Xkb 
extension has not been properly initialized, 
.I XkbChangeEnabledControls 
returns False; otherwise, it sendz tha request ta tha X server n' returns True.

Note dat tha EnabledControls control only enablez n' disablez controls; it 
does not configure em. Right back up in yo muthafuckin ass. Some controls, like fuckin tha AudibleBell control, have no 
configuration attributes n' is therefore manipulated solely by enablin n' 
disablin em. Others, however, have additionizzle attributes ta configure they 
behavior. Shiiit, dis aint no joke. For example, tha RepeatControl control uses 
.I repeat_delay 
and 
.I repeat_interval 
fieldz ta describe tha timin behavior of keys dat repeat. Da RepeatControl 
behavior is turned on or off dependin on tha value of tha XkbRepeatKeysMask 
bit yo, but you must use other means, as busted lyrics bout up in dis chapter, ta configure 
its behavior up in detail.
.SH "RETURN VALUES"
.TP 15
True
Da X server supports a cold-ass lil compatible version of Xkb.
.TP 15
False
Da X server do not support a cold-ass lil compatible version of Xkb or tha Xkb extension has not been properly initialized.
.SH STRUCTURES
.LP
.nf
Da XkbControlsRec structure is defined as bigs up:

    #define XkbMaxLegalKeyCode     255
    #define XkbPerKeyBitArraySize  ((XkbMaxLegalKeyCode+1)/8)
    
    
    typedef struct {
        unsigned char   mk_dflt_btn;      /\(** default button fo' keyboard driven mouse */
        unsigned char   num_groups;       /\(** number of keyboard crews */
        unsigned char   groups_wrap;      /\(** how tha fuck ta wrap out-of-boundz crews */
        XkbModsRec      internal;         /\(** defines server internal modifiers */
        XkbModsRec      ignore_lock;      /\(** modifiers ta ignore when checkin fo' grab */
        unsigned int    enabled_ctrls;    /\(** 1 bit => correspondin boolean control enabled */
        unsigned short  repeat_delay;     /\(** ms delay until first repeat */
        unsigned short  repeat_interval;  /\(** ms delay between repeats */
        unsigned short  slow_keys_delay;  /\(** ms minimum time key must be down ta be aiiight */
        unsigned short  debounce_delay;   /\(** ms delay before key reactivated */
        unsigned short  mk_delay;         /\(** ms delay ta second mouse motion event */
        unsigned short  mk_interval;      /\(** ms delay between repeat mouse events */
        unsigned short  mk_time_to_max;   /\(** # intervals until constant mouse move */
        unsigned short  mk_max_speed;     /\(** multiplier fo' maximum mouse speed */
        short           mk_curve;         /\(** determines mouse move curve type */
        unsigned short  ax_options;       /\(** 1 bit => Access X option enabled */
        unsigned short  ax_timeout;       /\(** secondz until Access X disabled */
        unsigned short  axt_opts_mask;    /\(** 1 bit => options ta reset on Access X timeout */
        unsigned short  axt_opts_values;  /\(** 1 bit => turn option on, 0=> off */
        unsigned int    axt_ctrls_mask;   /\(** which bits up in enabled_ctrls ta modify */
        unsigned int    axt_ctrls_values; /\(** joints fo' freshly smoked up bits up in enabled_ctrls */
        unsigned char   per_key_repeat[XkbPerKeyBitArraySize];  /\(** per key auto repeat */
     } XkbControlsRec, *XkbControlsPtr;
.fi
