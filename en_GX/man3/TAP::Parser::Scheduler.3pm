.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Schedula 3"
.TH TAP::Parser::Schedula 3 "2013-05-02" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::Schedula \- Schedule tests durin parallel testing
.SH "VERSION"
.IX Header "VERSION"
Version 3.28
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use TAP::Parser::Scheduler;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 5
\&    mah $sched = TAP::Parser::Scheduler\->new(tests => \e@tests);
\&    mah $sched = TAP::Parser::Scheduler\->new(
\&        tests => [ [\*(Aqt/test_name.t\*(Aq,\*(AqTest Description\*(Aq], ... ],
\&        rulez => \e%rules,
\&    );
.Ve
.PP
Given 'tests' n' optionizzle 'rules' as input, returns a new
\&\f(CW\*(C`TAP::Parser::Scheduler\*(C'\fR object.  Each gangmember of \f(CW@tests\fR should be either a
a test file name, or a two element arrayref, where tha straight-up original gangsta element be a test
file name, n' tha second element be a test description. I aint talkin' bout chicken n' gravy biatch. By default, we'll use
the test name as tha description.
.PP
Da optionizzle \f(CW\*(C`rules\*(C'\fR attribute serves up direction on which tests should be run
in parallel n' which should be run sequentially. If no rule data structure is
provided, a thugged-out default data structure is used which make every last muthafuckin test eligible to
be run up in parallel:
.PP
.Vb 1
\&    { par => \*(Aq**\*(Aq },
.Ve
.PP
Da rulez data structure is documented mo' up in tha next section.
.SS "Rulez data structure"
.IX Subsection "Rulez data structure"
Da "\f(CW\*(C`rules\*(C'\fR\*(L" data structure is tha the ass of tha schedula n' shit. Well shiiiit, it allows you
to express simple rulez like \*(R"run all tests up in sequence\*(L" or \*(R"run all tests in
parallel except these five tests.". But fuck dat shiznit yo, tha word on tha street is dat tha rulez structure also supports
glob-style pattern matchin n' recursive definitions, so you can also express
arbitarily fucked up patterns.
.PP
Da rule must only have one top level key: either 'par' fo' \*(L"parallel\*(R" or 'seq'
for \*(L"sequence\*(R".
.PP
Values must be either strings wit possible glob-style matching, or arrayrefs
of strings or hashrefs which follow dis pattern recursively.
.PP
Every element up in a arrayref directly below a 'par' key is eligible ta be run
in parallel, while vavalues directly below a 'seq' key must be run up in sequence.
.PP
\fIRulez examples\fR
.IX Subsection "Rulez examples"
.PP
Here is some examples:
.PP
.Vb 2
\&    # All tests be run up in parallel (the default rule)
\&    { par => \*(Aq**\*(Aq },
\&
\&    # Run all tests up in sequence, except dem startin wit "p"
\&    { par => \*(Aqt/p*.t\*(Aq },
\&
\&    # Run all tests up in parallel, except dem startin wit "p"
\&    {
\&        seq => [
\&                  { seq => \*(Aqt/p*.t\*(Aq },
\&                  { par => \*(Aq**\*(Aq     },
\&               ],
\&    }
\&
\&    # Run some  startup tests up in sequence, then some parallel tests than some
\&    # teardown tests up in sequence.
\&    {
\&        seq => [
\&            { seq => \*(Aqt/startup/*.t\*(Aq },
\&            { par => [\*(Aqt/a/*.t\*(Aq,\*(Aqt/b/*.t\*(Aq,\*(Aqt/c/*.t\*(Aq], }
\&            { seq => \*(Aqt/shutdown/*.t\*(Aq },
\&        ],
\&    },
.Ve
.PP
\fIRulez resolution\fR
.IX Subsection "Rulez resolution"
.IP "\(bu" 4
By default, all tests is eligible ta be run up in parallel. Right back up in yo muthafuckin ass. Specifyin any of yo' own rulez removes dis one.
.IP "\(bu" 4
\&\*(L"First match wins\*(R". Da first rule dat matches a test is ghon be tha one dat applies.
.IP "\(bu" 4
Any test which do not match a rule is ghon be run up in sequence all up in tha end of tha run.
.IP "\(bu" 4
Da existence of a rule do not imply selectin a test. Yo ass must still specify tha tests ta run.
.IP "\(bu" 4
Specifyin a rule ta allow tests ta run up in parallel do not make tha run up in parallel. Yo ass still need specify tha number of parallel \f(CW\*(C`jobs\*(C'\fR up in yo' Harnizz object.
.PP
\fIGlob-style pattern matchin fo' rules\fR
.IX Subsection "Glob-style pattern matchin fo' rules"
.PP
We implement our own glob-style pattern matchin yo. Here is tha patterns it supports:
.PP
.Vb 5
\&    ** be any number of characters, includin /, within a pathname
\&    * is zero or mo' charactas within a gangbangin' filename/directory name
\&    , biatch? is exactly one characta within a gangbangin' filename/directory name
\&    {foo,bar,baz} be any of foo, bar or baz.
\&    \e be a escape character
.Ve
.SS "Instizzle Methods"
.IX Subsection "Instizzle Methods"
\fI\f(CI\*(C`get_all\*(C'\fI\fR
.IX Subsection "get_all"
.PP
Git a list of all remainin tests.
.PP
\fI\f(CI\*(C`get_job\*(C'\fI\fR
.IX Subsection "get_job"
.PP
Return tha next available thang as TAP::Parser::Scheduler::Thang object or
\&\f(CW\*(C`undef\*(C'\fR if none is available. Returns a TAP::Parser::Scheduler::Spinner if
the schedula still has pendin thangs but none is available ta run n' aint a thugged-out damn thang dat yo' ass can do.
.PP
\fI\f(CI\*(C`as_string\*(C'\fI\fR
.IX Subsection "as_string"
.PP
Return a human readable representation of tha schedulin tree.
For example:
.PP
.Vb 3
\&    mah @tests = (qw{
\&        t/startup/foo.t 
\&        t/shutdown/foo.t
\&    
\&        t/a/foo.t t/b/foo.t t/c/foo.t t/d/foo.t
\&    });
\&    mah $sched = TAP::Parser::Scheduler\->new(
\&        tests => \e@tests,
\&        rulez => {
\&            seq => [
\&                { seq => \*(Aqt/startup/*.t\*(Aq },
\&                { par => [\*(Aqt/a/*.t\*(Aq,\*(Aqt/b/*.t\*(Aq,\*(Aqt/c/*.t\*(Aq] },
\&                { seq => \*(Aqt/shutdown/*.t\*(Aq },
\&            ],
\&        },
\&    );
.Ve
.PP
Produces:
.PP
.Vb 10
\&    par:
\&      seq:
\&        par:
\&          seq:
\&            par:
\&              seq:
\&                \*(Aqt/startup/foo.t\*(Aq
\&            par:
\&              seq:
\&                \*(Aqt/a/foo.t\*(Aq
\&              seq:
\&                \*(Aqt/b/foo.t\*(Aq
\&              seq:
\&                \*(Aqt/c/foo.t\*(Aq
\&            par:
\&              seq:
\&                \*(Aqt/shutdown/foo.t\*(Aq
\&        \*(Aqt/d/foo.t\*(Aq
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 102:" 4
.IX Item "Around line 102:"
Unknown directive: =over4
.IP "Around line 104:" 4
.IX Item "Around line 104:"
\&'=item' outside of any '=over'
