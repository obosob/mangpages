'\" t
.\"     Title: glBindAttribLocation
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLBINDATTRIBLOCATION" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBindAttribLocation \- Associates a generic vertex attribute index wit a named attribute variable
.SH "C SPECIFICATION"
.HP \w'void\ glBindAttribLocation('u
.BI "void glBindAttribLocation(GLuint\ " "program" ", GLuint\ " "index" ", const\ GLchar\ *" "name" ");"
.SH "PARAMETERS"
.PP
\fIprogram\fR
.RS 4
Specifies tha handle of tha program object up in which tha association is ta be made\&.
.RE
.PP
\fIindex\fR
.RS 4
Specifies tha index of tha generic vertex attribute ta be bound\&.
.RE
.PP
\fIname\fR
.RS 4
Specifies a null terminated strang containin tha name of tha vertex shader attribute variable ta which
\fIindex\fR
is ta be bound\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglBindAttribLocation\fR
is used ta associate a user\-defined attribute variable up in tha program object specified by
\fIprogram\fR
with a generic vertex attribute index\&. Da name of tha user\-defined attribute variable is passed as a null terminated strang in
\fIname\fR\&. Da generic vertex attribute index ta be bound ta dis variable is specified by
\fIindex\fR\&. When
\fIprogram\fR
is made part of current state, joints provided via tha generic vertex attribute
\fIindex\fR
will modify tha value of tha user\-defined attribute variable specified by
\fIname\fR\&.
.PP
If
\fIname\fR
refers ta a matrix attribute variable,
\fIindex\fR
refers ta tha straight-up original gangsta column of tha matrix\&. Other matrix columns is then automatically bound ta locations
\fIindex+1\fR
for a matrix of type
\fBmat2\fR;
\fIindex+1\fR
and
\fIindex+2\fR
for a matrix of type
\fBmat3\fR; and
\fIindex+1\fR,
\fIindex+2\fR, and
\fIindex+3\fR
for a matrix of type
\fBmat4\fR\&.
.PP
This command make it possible fo' vertex shadaz ta use descriptizzle names fo' attribute variablez rather than generic variablez dat is numbered from 0 to
\fBGL_MAX_VERTEX_ATTRIBS\fR
\-1\&. Da joints busted ta each generic attribute index is part of current state\&. If a gangbangin' finger-lickin' different program object is made current by calling
\fBglUseProgram\fR(), tha generic vertex attributes is tracked up in such a way dat tha same joints is ghon be observed by attributes up in tha freshly smoked up program object dat is also bound to
\fIindex\fR\&.
.PP
Attribute variable name\-to\-generic attribute index bindings fo' a program object can be explicitly assigned at any time by calling
\fBglBindAttribLocation\fR\& fo' realz. Attribute bindings do not go tha fuck into effect until
\fBglLinkProgram\fR()
is called\& fo' realz. Afta a program object has been linked successfully, tha index joints fo' generic attributes remain fixed (and they joints can be queried) until tha next link command occurs\&.
.PP
Any attribute bindin dat occurs afta tha program object has been linked aint gonna take effect until tha next time tha program object is linked\&.
.SH "NOTES"
.PP
\fBglBindAttribLocation\fR
can be called before any vertex shader objects is bound ta tha specified program object\&. Well shiiiit, it be also permissible ta bind a generic attribute index ta a attribute variable name dat is never used up in a vertex shader\&.
.PP
If
\fIname\fR
was bound previously, dat shiznit is lost\&. Thus you cannot bind one user\-defined attribute variable ta multiple indices yo, but you can bind multiple user\-defined attribute variablez ta tha same index\&.
.PP
Applications is allowed ta bind mo' than one user\-defined attribute variable ta tha same generic vertex attribute index\&. This is called
\fIaliasing\fR, n' it be allowed only if just one of tha aliased attributes be actizzle up in tha executable program, or if no path all up in tha shader consumes mo' than one attribute of a set of attributes aliased ta tha same location\&. Da compila n' linker is allowed ta assume dat no aliasin is done n' is free ta employ optimizations dat work only up in tha absence of aliasing\&. OpenGL implementations is not required ta do error checkin ta detect aliasing\&.
.PP
Actizzle attributes dat is not explicitly bound is ghon be bound by tha linker when
\fBglLinkProgram\fR()
is called\&. Da locations assigned can be queried by calling
\fBglGetAttribLocation\fR()\&.
.PP
OpenGL copies the
\fIname\fR
strin when
\fBglBindAttribLocation\fR
is called, so a application may free its copy of the
\fIname\fR
strin immediately afta tha function returns\&.
.PP
Generic attribute locations may be specified up in tha shader source text rockin a
\fBlocation\fR
layout qualifier\&. In dis case, tha location of tha attribute specified up in tha shader\*(Aqs source takes precedence n' may be queried by calling
\fBglGetAttribLocation\fR()\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIindex\fR
is pimped outa than or equal to
\fBGL_MAX_VERTEX_ATTRIBS\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIname\fR
starts wit tha reserved prefix "gl_"\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIprogram\fR
is not a value generated by OpenGL\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIprogram\fR
is not a program object\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_VERTEX_ATTRIBS\fR
.PP
\fBglGetActiveAttrib\fR()
with argument
\fIprogram\fR
.PP
\fBglGetAttribLocation\fR()
with arguments
\fIprogram\fR
and
\fIname\fR
.PP
\fBglIsProgram\fR()
.SH "SEE ALSO"
.PP
\fBglDisableVertexAttribArray\fR(),
\fBglEnableVertexAttribArray\fR(),
\fBglUseProgram\fR(),
\fBglVertexAttrib\fR(),
\fBglVertexAttribPointer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2005 3Dlabs Inc\&. Ltd\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
