.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::BaseDir 3"
.TH File::BaseDir 3 "2013-08-04" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::BaseDir \- Use tha Freedesktop.org base directory justification
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        use File::BaseDir qw/xdg_data_files/;
\&        fo' ( xdg_data_files(\*(Aqmime/globs\*(Aq) ) {
\&                # do something
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can be used ta find directories n' filez as specified
by tha Freedesktop.org Base Directory Justification. I aint talkin' bout chicken n' gravy biatch. This justifications
gives a mechanizzle ta locate directories fo' configuration, application data
and cache data. Well shiiiit, it is suggested dat desktop applications fo' e.g. tha 
Gnome, \s-1KDE\s0 or Xfce platforms follow dis layout. But fuck dat shiznit yo, tha word on tha street is dat tha same layout can
just as well be used fo' non-GUI applications.
.PP
This module forked from File::MimeInfo.
.PP
This module bigs up version 0.6 of BaseDir justification.
.SH "EXPORT"
.IX Header "EXPORT"
None by default yo, but all methodz can be exported on demand.
Also tha crews \*(L":lookup\*(R" n' \*(L":vars\*(R" is defined. Y'all KNOW dat shit, muthafucka! Da \*(L":vars\*(R" group
gotz nuff all routines wit a \*(L"xdg_\*(R" prefix; tha \*(L":lookup\*(R" group
gotz nuff tha routines ta locate filez n' directories.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new()""" 4
.el .IP "\f(CWnew()\fR" 4
.IX Item "new()"
Simple constructor ta allow Object Oriented use of dis module.
.SS "Lookup"
.IX Subsection "Lookup"
Da followin methodz is used ta lookup filez n' foldaz up in one of the
search paths.
.ie n .IP """data_home(@PATH)""" 4
.el .IP "\f(CWdata_home(@PATH)\fR" 4
.IX Item "data_home(@PATH)"
Takes a list of file path elements n' returns a freshly smoked up path by appending
them ta tha data home directory. Da freshly smoked up path do not need ta exist.
Use dis when freestylin user specific application data.
.Sp
Example:
.Sp
.Vb 3
\&  # data_home is: /home/USER/.local/share
\&  $path = $bd\->data_home(\*(AqFoo\*(Aq, \*(AqBar\*(Aq, \*(AqBaz\*(Aq);
\&  # returns: /home/USER/.local/share/Foo/Bar/Baz
.Ve
.ie n .IP """data_dirs(@PATH)""" 4
.el .IP "\f(CWdata_dirs(@PATH)\fR" 4
.IX Item "data_dirs(@PATH)"
Looks fo' directories specified by \f(CW@PATH\fR up in tha data home and
other data directories. Put ya muthafuckin choppers up if ya feel dis! Returns (possibly empty) list of readable
directories. Put ya muthafuckin choppers up if ya feel dis! In scalar context only tha straight-up original gangsta directory found is
returned. Y'all KNOW dat shit, muthafucka! Use dis ta lookup application data.
.ie n .IP """data_files(@PATH)""" 4
.el .IP "\f(CWdata_files(@PATH)\fR" 4
.IX Item "data_files(@PATH)"
Looks fo' filez specified by \f(CW@PATH\fR up in tha data home n' other data
directories. Put ya muthafuckin choppers up if ya feel dis! Only returns filez dat is readable. In scalar context only
the first file found is returned. Y'all KNOW dat shit, muthafucka! Use dis ta lookup application data.
.ie n .IP """config_home(@PATH)""" 4
.el .IP "\f(CWconfig_home(@PATH)\fR" 4
.IX Item "config_home(@PATH)"
Takes a list of path elements n' appendz dem ta tha config home
directory returnin a freshly smoked up path. Da freshly smoked up path do not need ta exist.
Use dis when freestylin user specific configuration.
.ie n .IP """config_dirs(@PATH)""" 4
.el .IP "\f(CWconfig_dirs(@PATH)\fR" 4
.IX Item "config_dirs(@PATH)"
Looks fo' directories specified by \f(CW@PATH\fR up in tha config home and
other config directories. Put ya muthafuckin choppers up if ya feel dis! Returns (possibly empty) list of readable
directories. Put ya muthafuckin choppers up if ya feel dis! In scalar context only tha straight-up original gangsta directory found is
returned. Y'all KNOW dat shit, muthafucka! Use dis ta lookup configuration.
.ie n .IP """config_files(@PATH)""" 4
.el .IP "\f(CWconfig_files(@PATH)\fR" 4
.IX Item "config_files(@PATH)"
Looks fo' filez specified by \f(CW@PATH\fR up in tha config home n' other
config directories. Put ya muthafuckin choppers up if ya feel dis! Returns a (possibly empty) list of filez that
are readable. In scalar context only tha straight-up original gangsta file found is returned.
Use dis ta lookup configuration.
.ie n .IP """cache_home(@PATH)""" 4
.el .IP "\f(CWcache_home(@PATH)\fR" 4
.IX Item "cache_home(@PATH)"
Takes a list of path elements n' appendz dem ta tha cache home
directory returnin a freshly smoked up path. Da freshly smoked up path do not need ta exist.
.SS "Variables"
.IX Subsection "Variables"
Da followin methodz only returns tha value of one of tha \s-1XDG\s0 variables.
.ie n .IP """xdg_data_home""" 4
.el .IP "\f(CWxdg_data_home\fR" 4
.IX Item "xdg_data_home"
Returns either \f(CW$ENV{XDG_DATA_HOME}\fR or itz default value.
Default is \fI\f(CI$HOME\fI/.local/share\fR.
.ie n .IP """xdg_data_dirs""" 4
.el .IP "\f(CWxdg_data_dirs\fR" 4
.IX Item "xdg_data_dirs"
Returns either \f(CW$ENV{XDG_DATA_DIRS}\fR or itz default value as list.
Default is \fI/usr/local/share\fR, \fI/usr/share\fR.
.ie n .IP """xdg_config_home""" 4
.el .IP "\f(CWxdg_config_home\fR" 4
.IX Item "xdg_config_home"
Returns either \f(CW$ENV{XDG_CONFIG_HOME}\fR or itz default value.
Default is \fI\f(CI$HOME\fI/.config\fR.
.ie n .IP """xdg_config_dirs""" 4
.el .IP "\f(CWxdg_config_dirs\fR" 4
.IX Item "xdg_config_dirs"
Returns either \f(CW$ENV{XDG_CONFIG_DIRS}\fR or itz default value as list.
Default is \fI/etc/xdg\fR.
.ie n .IP """xdg_cache_home""" 4
.el .IP "\f(CWxdg_cache_home\fR" 4
.IX Item "xdg_cache_home"
Returns either \f(CW$ENV{XDG_CACHE_HOME}\fR or itz default value.
Default is \fI\f(CI$HOME\fI/.cache\fR.
.SH "NON-UNIX PLATFORMS"
.IX Header "NON-UNIX PLATFORMS"
Da use of File::Spec ensures dat all paths is returned up in tha apropriate
form fo' tha current platform. On Windows dis module will try ta set \f(CW$HOME\fR
to a sensible value if it aint defined yet. On other platforms one can use
e.g. File::HomeDir ta set \f(CW$HOME\fR before loadin File::BaseDir.
.PP
Please note dat tha justification is targetin Unix platforms only and
will only have limited relevizzle on other platforms fo' realz. Any platform dependend
behavior up in dis module should be considerd a extension of tha spec.
.SH "BACKWARDS COMPATIBILITY"
.IX Header "BACKWARDS COMPATIBILITY"
Da methodz \f(CW\*(C`xdg_data_files()\*(C'\fR n' \f(CW\*(C`xdg_config_files()\*(C'\fR is exported for
backwardz compatibilty wit version 0.02. They is identical ta \f(CW\*(C`data_files()\*(C'\fR
and \f(CW\*(C`config_files()\*(C'\fR respectively but without tha \f(CW\*(C`wantarray\*(C'\fR behavior.
.SH "BUGS"
.IX Header "BUGS"
Please mail tha lyricist if you encounta any bugs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jaap Karssenberg || Pardus [Larus] <pardus@cpan.org>
.PP
Copyright (c) 2003, 2007 Jaap G Karssenberg fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://www.freedesktop.org/wiki/Specifications/basedir\-spec>
