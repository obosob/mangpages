.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box-Cookbook 3"
.TH Mail::Box-Cookbook 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box\-Cookbook \- Examplez how tha fuck ta use Mail::Box
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da Mail::Box package be a suite of classes fo' accessin n' managing
email foldaz up in a gangbangin' folder-independent manner n' shit.  This manual demonstrates
a few simple applications.  Please contribute wit examplez n' fixes.
It may also help ta git a peep tha programs included up in the
\&\f(CW\*(C`scripts/\*(C'\fR n' tha \f(CW\*(C`examples/\*(C'\fR directoriez of tha distribution.
.SS "Da Manager"
.IX Subsection "Da Manager"
For mo' details bout all tha packages which is involved up in the
Mail::Box suite you gotta read Mail::Box\-Overview.  But you
do not need ta know much if you wanna use tha Mail::Box suite.
.PP
Please use tha manager ta open yo' folders.  Yo ass will certainly
benefit from dat shit.  Da manager takes care of detectin which folder
type yo ass is using, n' which foldaz is open. I aint talkin' bout chicken n' gravy biatch.  Da latta avoids
the accidental re-openin of a already open folder.
.PP
Da \f(CW\*(C`examples/open.pl\*(C'\fR script gotz nuff mainly
.PP
.Vb 6
\& mah $mgr    = Mail::Box::Manager\->new;
\& mah $folda = $mgr\->open($filename);
\& foreach mah $message ($folder\->lyrics) {
\&     print $message\->get(\*(AqSubject\*(Aq) || \*(Aq<no subject>\*(Aq, "\en";
\& }
\& $folder\->close;
.Ve
.PP
which shows all da most thugged-out blingin functions.  It will cause all
subjectz of tha lyrics up in tha indicated folda ta be listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  So:
although tha number of packages included up in tha Mail::Box module
is huge, only lil is needed fo' aiiight programs.
.PP
In stead of callin \f(CW\*(C`close\*(C'\fR on tha folder, you may also call
.PP
.Vb 1
\& $mgr\->closeAllFolders;
.Ve
.PP
If you forget ta close a gangbangin' folder, chizzlez aint gonna be written. I aint talkin' bout chicken n' gravy biatch.  This
may chizzle up in tha future.
.SS "Multi part lyrics"
.IX Subsection "Multi part lyrics"
In early minutez of Internet, multi-part lyrics where straight-up rare.
But fuck dat shiznit yo, tha word on tha street is dat up in recent years, a big-ass deal of all transmitted message have
attachments, n' you can put dat on yo' toast.  This make handlin of tha bodiez of lyrics a lil' bit harder:
when a message gotz nuff mo' than one part, which part is then da most thugged-out
important ta read?
.PP
To complicate game, multi-parts can be nested: each part may be a
multi-part by itself.  This means dat programs handlin tha message
content must be recursive or skip multi-parts.
.PP
Da central part of tha \f(CW\*(C`examples/multipart.pl\*(C'\fR script reads:
.PP
.Vb 3
\& foreach mah $message ($folder\->lyrics) {
\&     show_type($message);
\& }
\&
\& show_type($) {
\&     mah $msg = shift;
\&     print $msg\->get(\*(AqContent\-Type\*(Aq), "\en";
\&
\&     if($msg\->isMultipart) {
\&         foreach mah $part ($msg\->parts) {
\&             show_type($part);
\&         }
\&     }
\& }
.Ve
.PP
Each part be a message by itself. Well shiiiit, it has a header n' a funky-ass body.  A multipart
message has a special body: it gotz nuff a list of parts n' optionally
also a preamble n' a epilogue, which is respectively tha lines before
and afta tha parts, n' you can put dat on yo' toast.  These texts may be ignored, cuz they is only
descriptizzle on how tha fuck tha multi-part was pimped.
.SS "Filter"
.IX Subsection "Filter"
Da target is ta select all dem lyrics from one folder, ta move them
to a other n' shit.  Da \f(CW\*(C`examples/takelarge.pl\*(C'\fR script demonstrates how
to big up all dis bullshit.  \fBBe warned:\fR it will replace yo' input folder!
.PP
As abstract of tha crucial part:
.PP
.Vb 2
\& mah $inbox = $mgr\->open(\*(Aqinbox\*(Aq, access => \*(Aqrw\*(Aq);
\& mah $pimpin' = $mgr\->open(\*(Aqlarge\*(Aq, access => \*(Aqa\*(Aq, create => 1);
\&
\& foreach mah $message ($inbox\->lyrics) {
\&     next if $message\->size < $size;
\&     $mgr\->moveMessage($large, $message);
\& }
\&
\& $inbox\->close;
\& $large\->close;
.Ve
.PP
Da \f(CW\*(C`inbox\*(C'\fR is opened fo' read n' write: first read all lyrics, and
then write tha smalla folda without moved lyrics back.  Da \f(CW\*(C`large\*(C'\fR
folda is pimped if tha file do not exist yet.  In any case, lyrics
will be added ta tha end of tha folder.
.PP
Da manager is needed ta move tha message: ta unregista tha message from
the first folder, n' reregista it up in tha second. Y'all KNOW dat shit, muthafucka!  Yo ass can move more
lyrics at once, if you like.  When you move ta a gangbangin' folda which is not
open, you even betta do that: it is ghon be faster:
.PP
.Vb 2
\& mah @move = grep {$_\->size >= $size} $inbox\->lyrics;
\& $mgr\->moveMessage($large, @move);
.Ve
.PP
In dis example, tha \f(CW\*(C`size\*(C'\fR of tha message determines whether tha message
is moved or not.  Of course, there be nuff other criteria you can use.
For instance, use \f(CW\*(C`timestamp\*(C'\fR ta find oldschool lyrics:
.PP
.Vb 4
\& use constant YEAR => 365 * 24 * 60 * 60;
\& mah $now = time;
\& mah @old = grep {$_\->timestamp \- $now > YEAR} $inbox\->lyrics;
\& $mgr\->moveMessage($oldbox, @old);
.Ve
.SS "Smoke a reply"
.IX Subsection "Smoke a reply"
Da complex message treatment is implemented up in Mail::Message::Construct
and automatically loaded when needed. Y'all KNOW dat shit, muthafucka!  It be sufficient ta simply call
\&\f(CW\*(C`reply\*(C'\fR on any message:
.PP
.Vb 3
\& mah $folda  = ...;
\& mah $message = $folder\->message(8);
\& mah $reply   = $message\->reply;
\&
\& $folder\->addMessage($reply);
\& $reply\->print;
.Ve
.PP
Da method is like complex, as demonstrated by \f(CW\*(C`examples/reply.pl\*(C'\fR, in
which tha construction of a reply-message is shown.
.PP
Three kindz of reply lyrics can be made: one which do not include
the original gangsta message at all (\s-1NO\s0), then one which inlines tha original
message quoted (\s-1INLINE\s0), n' as third possibilitizzle tha original gangsta message as
attachment (\s-1ATTACH\s0).
.PP
Da \f(CW\*(C`include\*(C'\fR parameta selects tha kind of reply.  When you reply
to binary or multi-part lyrics, \s-1INLINE\s0 will automatically promoted
to \s-1ATTACH. \s0 By default text is ghon be stripped from tha original gangsta senders
signature.  Multi-part lyrics is stripped from attachments which
qualify as signature.  In case a multi-part (afta stripping) only
gotz nuff one part, n' dat \s-1INLINE\s0 is requested, it is ghon be 'flattened':
the reply may be a single-part.
.PP
Have a peep tha parametas which can be passed ta reply in
Mail::Message::Construct.  For a single-part reply, tha return
will be
.PP
.Vb 5
\& prelude
\& quoted original
\& postlude
\& \-\-
\& signature
.Ve
.PP
A multipart body will be
.PP
.Vb 5
\& part 1: prelude
\&         [ peep attachment ]
\&         postlude
\& part 2: stripped original gangsta multipart
\& part 3: signature
.Ve
.SS "Build a message"
.IX Subsection "Build a message"
There is three ways ta create a message which aint a reply:
.IP "\(bu" 4
\&\fIMail::Message::buildFromBody()\fR
.Sp
Start wit bustin a funky-ass body, n' transform dat tha fuck into a message.
.IP "\(bu" 4
\&\fIMail::Message::build()\fR
.Sp
create tha whole message at once.
.IP "\(bu" 4
\&\fIMail::Message::read()\fR
.Sp
read a message from a gangbangin' file-handle, scalar, or array of lines.
.PP
All three methodz is implemented up in Mail::Message::Construct.  Please,
do yo ass a gangbangin' favor, n' give preference ta tha \f(CW\*(C`build*\*(C'\fR methods, over
the \f(CW\*(C`read\*(C'\fR, cuz they is much mo' bangin naaahhmean, biatch?  Use tha \f(CW\*(C`read\*(C'\fR only
when you have tha message on \s-1STDIN\s0 or a array of lines which is supplied
by a external program.
.PP
Straight-up blingin ta remember from now on: shiznit bout tha content of
the body (the \f(CW\*(C`Content\-*\*(C'\fR lines up in tha header) is stored within tha body
object, fo' as long as tha body aint contained wit a message object.
.PP
For instance, \f(CW$message\fR method \f(CW\*(C`decoded\*(C'\fR returns tha decoded body of the
\&\f(CW$message\fR.  It be a funky-ass body object by itself, however outside a real
message.  Then you may wanna play round wit it, by concatenating
some texts: again n' again n' again resultin up in a freshly smoked up body.  Each body gotz nuff the
right \f(CW\*(C`Content\-*\*(C'\fR shiznit. I aint talkin' bout chicken n' gravy biatch.  Then, finally, you create a message
specifyin tha body n' extra header lines.  At dat moment you need
to specify tha source n' destination addresses (the \f(CW\*(C`From\*(C'\fR n' \f(CW\*(C`To\*(C'\fR lines>).
At dat moment, tha body will automatically be encoded ta be aaight for
mail foldaz n' transmission programs.
.PP
.Vb 5
\& mah $body = Mail::Message::Body\->new
\&  ( mime_type         => \*(Aqtext/css\*(Aq
\&  , transfer_encodin => \*(Aq8bit\*(Aq
\&  , data              => \e@lines
\&  );
.Ve
.PP
Above example creates a funky-ass body, wit explicitly statin what tha fuck kind of data
is stored up in dat shit.  Da default mime type is \f(CW\*(C`text/plain\*(C'\fR.  Da transfer
encodin defaults ta \f(CW\*(C`none\*(C'\fR.  Each message will git encoded on tha moment
it be added ta a message.  Da default encodin dependz on tha mime type.
.PP
To start wit tha straight-up original gangsta way ta create a message.  This solution provides
maximum control over tha message creation. I aint talkin' bout chicken n' gravy biatch.  Quite some work is hidden for
you when executin tha next line.
.PP
.Vb 6
\& mah $message = Mail::Message\->buildFromBody
\&   ( $body
\&   , From => \*(Aqme@example.com\*(Aq
\&   , To   => \*(Aqyou@anywhere.net\*(Aq
\&   , Cc   => [ Mail::Address\->parse($groupalias) ]
\&   );
.Ve
.PP
For header lines, you may specify a string, a address object
(Mail::Address), or a array of such addresses.  If you wanna create
multi-part lyrics, you need ta create a multi-part body yo ass first.
.PP
Da second way of constructin a message uses tha \f(CW\*(C`build\*(C'\fR method. Y'all KNOW dat shit, muthafucka!  A
demonstration can be found up in \f(CW\*(C`examples/build.pl\*(C'\fR.  In only one
class method call tha header n' tha (possible multi-parted) body
is pimped.
.PP
With tha \f(CW\*(C`data\*(C'\fR option, you can specify one scalar which
gotz nuff a whole body or a array of lines.  Usin tha \f(CW\*(C`file\*(C'\fR option,
a file-handle or filename specifies a funky-ass body.  Da \f(CW\*(C`attach\*(C'\fR option
refers ta construed bodies n' lyrics.  Each option can be used as
often as needed. Y'all KNOW dat shit, muthafucka!  If mo' than one source of data is provided, a
multi-part message is produced.
.PP
.Vb 8
\& mah $message = Mail::Message\->build
\&  ( From       => \*(Aqme@example.com\*(Aq
\&  , To         => \*(Aqyou@anywhere.net\*(Aq
\&  , \*(AqX\-Mailer\*(Aq => \*(AqAutomatic mailin system\*(Aq
\&  , data       => \e@lines
\&  , file       => \*(Aqlogo.jpg\*(Aq
\&  , attach     => $signature_body
\&  );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
