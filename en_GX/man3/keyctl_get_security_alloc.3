.\"
.\" Copyright (C) 2010 Red Hat, Inc fo' realz. All Rights Reserved.
.\" Written by Dizzy Howells (dhowells@redhat.com)
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License
.\" as published by tha Jacked Software Foundation; either version
.\" 2 of tha License, or (at yo' option) any lata version.
.\"
.TH KEYCTL_GET_SECURITY 3 "26 Feb 2010" Linux "Linux Key Management Calls"
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH NAME
keyctl_get_securitizzle \- Retrieve a keyz securitizzle context
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SYNOPSIS
.nf
.B #include <keyutils.h>
.sp
.BI "long keyctl_get_security(key_serial_t " key ", char *" buffer ,
.BI "size_t " buflen ");"
.sp
.BI "long keyctl_get_security_alloc(key_serial_t " key ", char **" _buffer ");"
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH DESCRIPTION
.BR keyctl_get_securitizzle ()
retrieves tha securitizzle context of a key as a NUL-terminated string.  This will
be rendered up in a gangbangin' form appropriate ta tha LSM up in force - fo' instance, with
SELinux, it may look like
.IP
.B "unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023"
.P
Da calla must have
.B view
permission on a key ta be able ta git its securitizzle context.
.P
.I buffer
and
.I buflen
specify tha buffer tha fuck into which tha strang is ghon be placed. Y'all KNOW dat shit, muthafucka!  If tha buffer is too
small, tha full size of tha strang is ghon be returned, n' no copy will take
place.
.P
.BR keyctl_get_security_alloc ()
is similar to
.BR keyctl_get_securitizzle ()
except dat it allocates a funky-ass buffer big-ass enough ta hold tha strang n' copies the
strin tha fuck into dat shit.  If successful, A pointa ta tha buffer is placed in
.IR *_buffer .
Da calla must free tha buffer.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH RETURN VALUE
On success
.BR keyctl_get_securitizzle ()
returns tha amount of data placed tha fuck into tha buffer n' shit.  If tha buffer was too
small, then tha size of buffer required is ghon be returned yo, but no data will be
transferred. Y'all KNOW dat shit, muthafucka!  On error, tha value
.B -1
will be returned n' errno gonna git been set ta a appropriate error.
.P
On success
.BR keyctl_get_security_alloc ()
returns tha amount of data up in tha buffer, less tha NUL terminator. Shiiit, dis aint no joke.  On error, tha value
.B -1
will be returned n' errno gonna git been set ta a appropriate error.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH ERRORS
.TP
.B ENOKEY
Da key specified is invalid.
.TP
.B EKEYEXPIRED
Da key specified has expired.
.TP
.B EKEYREVOKED
Da key specified had been revoked.
.TP
.B EACCES
Da key exists yo, but is not
.B viewable
by tha callin process.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH LINKING
This be a library function dat can be found in
.IR libkeyutils .
When linking,
.B -lkeyutils
should be specified ta tha linker.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SEE ALSO
.BR keyctl (1),
.br
.BR add_key (2),
.br
.BR keyctl (2),
.br
.BR request_key (2),
.br
.BR keyctl (3),
.br
.BR keyutils (7),
.br
.BR keyrings (7)
