.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "filetest 3pm"
.TH filetest 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
filetest \- Perl pragma ta control tha filetest permission operators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    $can_like_read = \-r "file";      # use tha mode bits
\&    {
\&        use filetest \*(Aqaccess\*(Aq;          # intuit harder
\&        $can_really_read = \-r "file";
\&    }
\&    $can_like_read = \-r "file";      # use tha mode bits again
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This pragma  drops some lyrics ta tha compila ta chizzle tha behaviour of tha filetest
permission operators, \f(CW\*(C`\-r\*(C'\fR \f(CW\*(C`\-w\*(C'\fR \f(CW\*(C`\-x\*(C'\fR \f(CW\*(C`\-R\*(C'\fR \f(CW\*(C`\-W\*(C'\fR \f(CW\*(C`\-X\*(C'\fR
(see perlfunc).
.PP
Da default behaviour of file test operators is ta use tha simple
mode bits as returned by tha \fIstat()\fR crew of system calls.  However,
many operatin systems have additionizzle features ta define mo' complex
access rights, fo' example ACLs (Access Control Lists).
For such environments, \f(CW\*(C`use filetest\*(C'\fR may help tha permission
operators ta return thangs up in dis biatch mo' consistent wit other tools.
.PP
Da \f(CW\*(C`use filetest\*(C'\fR or \f(CW\*(C`no filetest\*(C'\fR statements affect file tests defined in
their block, up ta tha end of tha closest enclosin block (they is lexically
block-scoped).
.PP
Currently, only tha \f(CW\*(C`access\*(C'\fR sub-pragma is implemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It enablez (or
disables) tha use of \fIaccess()\fR when available, dat is, on most \s-1UNIX\s0 systems and
other \s-1POSIX\s0 environments, n' you can put dat on yo' toast.  See details below.
.SS "Consider dis carefully"
.IX Subsection "Consider dis carefully"
Da \fIstat()\fR mode bits is probably right fo' most of tha filez and
directories found on yo' system, cuz few playas wanna use the
additionizzle features offered by \fIaccess()\fR. But you may encounta surprises
if yo' program runs on a system dat uses ACLs, since tha \fIstat()\fR
information won't reflect tha actual permissions.
.PP
There may be a slight performizzle decrease up in tha filetest operations
when tha filetest pragma is up in effect, cuz checkin bits is hella
cheap.
.PP
Also, note dat rockin tha file tests fo' securitizzle purposes be a lost cause
from tha start: there be a window open fo' race conditions (who is to
say dat tha permissions aint gonna chizzle between tha test n' tha real
operation?).  Therefore if yo ass is straight-up bout security, just try
the real operation n' test fo' its success \- be thinkin up in termz of atomic
operations.  Filetests is mo' useful fo' filesystem administrative
tasks, when you have no need fo' tha content of tha elements on disk.
.ie n .SS "Da ""access"" sub-pragma"
.el .SS "Da ``access'' sub-pragma"
.IX Subsection "Da access sub-pragma"
\&\s-1UNIX\s0 n' \s-1POSIX\s0 systems provide a abstract \fIaccess()\fR operatin system call,
which should be used ta query tha read, write, n' execute rights, n' you can put dat on yo' toast. This
function hides various distinct approaches up in additionizzle operatin system
specific securitizzle features, like Access Control Lists (ACLs)
.PP
Da extended filetest functionalitizzle is used by Perl only when tha argument
of tha operators be a gangbangin' filename, not when it aint nuthin but a gangbangin' filehandle.
.ie n .SS "Limitation wit regard ta ""_"""
.el .SS "Limitation wit regard ta \f(CW_\fP"
.IX Subsection "Limitation wit regard ta _"
Because \fIaccess()\fR do not invoke \fIstat()\fR (at least not up in a way visible
to Perl), \fBthe stat result cache \*(L"_\*(R" aint set\fR.  This means dat the
outcome of tha followin two tests is different.  Da first has tha stat
bitz of \fI/etc/passwd\fR up in \f(CW\*(C`_\*(C'\fR, n' up in tha second case dis still
gotz nuff tha bitz of \f(CW\*(C`/etc\*(C'\fR.
.PP
.Vb 4
\& { \-d \*(Aq/etc\*(Aq;
\&   \-w \*(Aq/etc/passwd\*(Aq;
\&   print \-f _ , biatch? \*(AqYes\*(Aq : \*(AqNo\*(Aq;   # Yes
\& }
\&
\& { use filetest \*(Aqaccess\*(Aq;
\&   \-d \*(Aq/etc\*(Aq;
\&   \-w \*(Aq/etc/passwd\*(Aq;
\&   print \-f _ , biatch? \*(AqYes\*(Aq : \*(AqNo\*(Aq;   # No
\& }
.Ve
.PP
Of course, unless yo' \s-1OS\s0 do not implement \fIaccess()\fR, up in which case the
pragma is simply ignored. Y'all KNOW dat shit, muthafucka!  Best not ta use \f(CW\*(C`_\*(C'\fR at all up in a gangbangin' file where
the filetest pragma be active!
.PP
As a side effect, as \f(CW\*(C`_\*(C'\fR don't work, stacked filetest operators
(\f(CW\*(C`\-f \-w $file\*(C'\fR) won't work either.
.PP
This limitation might be removed up in a gangbangin' future version of perl.
