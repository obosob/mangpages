'\" e
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
'\" e
.TH XAllocColor 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XAllocColor, XAllocNamedColor, XAllocColorCells, XAllocColorPlanes, XFreeColors \- allocate n' free colors
.SH SYNTAX
.HP
Status XAllocColor\^(\^Display *\fIdisplay\fP, Colormap \fIcolormap\fP\^,
XColor *\fIscreen_in_out\fP\^);
.HP
Status XAllocNamedColor\^(\^Display *\fIdisplay\fP, Colormap \fIcolormap\fP\^,
char *\fIcolor_name\fP\^, XColor *\fIscreen_def_return\fP\^, XColor
*\fIexact_def_return\fP\^);
.HP
Status XAllocColorCells\^(\^Display *\fIdisplay\fP, Colormap \fIcolormap\fP\^,
Bool \fIcontig\fP\^, unsigned long \fIplane_masks_return\fP[\^]\^, unsigned int
\fInplanes\fP\^, unsigned long \fIpixels_return\fP[\^]\^, unsigned int
\fInpixels\fP\^);
.HP
Status XAllocColorPlanes\^(\^Display *\fIdisplay\fP, Colormap
\fIcolormap\fP\^, Bool \fIcontig\fP\^, unsigned long
\fIpixels_return\fP[\^]\^, int \fIncolors\fP\^, int \fInreds\fP\^, int
\fIngreens\fP\^, int \fInblues\fP\^, unsigned long *\fIrmask_return\fP\^,
unsigned long *\fIgmask_return\fP\^, unsigned long *\fIbmask_return\fP\^);
.HP
int XFreeColors\^(\^Display *\fIdisplay\fP, Colormap \fIcolormap\fP\^, unsigned
long \fIpixels\fP\^[\^], int \fInpixels\fP\^, unsigned long \fIplanes\fP\^);
.IP \fIcolor_name\fP 1i
Specifies tha color name strang (for example, red) whose color 
definizzle structure you want returned.
.IP \fIcolormap\fP 1i
Specifies tha colormap.
.IP \fIcontig\fP 1i
Specifies a Boolean value dat indicates whether tha planes must be contiguous.
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.IP \fIexact_def_return\fP 1i
Returns tha exact RGB joints.
.IP \fIncolors\fP 1i
Specifies tha number of pixel joints dat is ta be returned up in tha 
pixels_return array. 
.IP \fInpixels\fP 1i
Specifies tha number of pixels. 
.IP \fInplanes\fP 1i
Specifies tha number of plane masks dat is ta be returned up in tha plane masks 
array. 
.IP \fInreds\fP 1i
.br
.ns
.IP \fIngreens\fP 1i
.br
.ns
.IP \fInblues\fP 1i
.br
.ns
Specify tha number of red, green, n' blue planes.
Da value you pass must be nonnegative. 
.IP \fIpixels\fP 1i
Specifies a array of pixel joints, n' you can put dat on yo' toast. 
.IP \fIpixels_return\fP 1i
Returns a array of pixel joints, n' you can put dat on yo' toast. 
.IP \fIplane_mask_return\fP 1i
Returns a array of plane masks.
.\" *** JIM: NEED MORE INFO FOR THIS. ***
.IP \fIplanes\fP 1i
Specifies tha planes you wanna free.
.IP \fIrmask_return\fP 1i
.br
.ns
.IP \fIgmask_return\fP 1i
.br
.ns
.IP \fIbmask_return\fP 1i
Return bit masks fo' tha red, green, n' blue planes.
.IP \fIscreen_def_return\fP 1i
Returns tha closest RGB joints provided by tha hardware.
.IP \fIscreen_in_out\fP 1i
Specifies n' returns tha joints straight-up used up in tha colormap.
.SH DESCRIPTION
The
.ZN XAllocColor
function allocates a read-only colormap entry correspondin ta tha closest
RGB value supported by tha hardware.
.ZN XAllocColor
returns tha pixel value of tha color closest ta tha specified
RGB elements supported by tha hardware
and returns tha RGB value straight-up used.
Da correspondin colormap cell is read-only.
In addition,
.ZN XAllocColor
returns nonzero if it succeeded or zero if it failed.
.IN "Color map"
.IN "Color" "allocation"
.IN "Allocation" "colormap"
.IN "read-only colormap cells"
Multiple clients dat request tha same effectizzle RGB value can be assigned
the same read-only entry, thus allowin entries ta be shared.
When tha last client deallocates a gangbangin' finger-lickin' dirty-ass shared cell, it is deallocated.
.ZN XAllocColor
does not use or affect tha flags up in the
.ZN XColor
structure.
.LP
.ZN XAllocColor
can generate a
.ZN BadColor 
error.
.LP
The
.ZN XAllocNamedColor
function looks up tha named color wit respect ta tha screen dat is
associated wit tha specified colormap.
It returns both tha exact database definizzle and
the closest color supported by tha screen.
Da allocated color cell is read-only.
Da pixel value is returned up in screen_def_return.
If tha color name aint up in tha Host Portable Characta Encoding, 
the result is implementation-dependent.
Use of uppercase or lowercase do not matter.
If screen_def_return n' exact_def_return
point ta tha same structure, tha pixel field is ghon be set erectly,
but tha color joints is undefined.
.ZN XAllocNamedColor
returns nonzero if a cold-ass lil cell be allocated;
otherwise, it returns zero.
.LP
.ZN XAllocNamedColor
can generate a
.ZN BadColor
error.
.LP
.EQ
delim %%
.EN
The
.ZN XAllocColorCells
function allocates read/write color cells.
Da number of flavas must be positizzle n' tha number of planes nonnegative,
or a
.ZN BadValue
error thangs up in dis biatch.
If ncolors n' nplanes is requested, 
then ncolors pixels
and nplane plane masks is returned.
No mask gonna git any bits set ta 1 up in common with
any other mask or wit any of tha pixels.
By ORin together each pixel wit zero or mo' masks,
ncolors * %2 sup nplanes% distinct pixels can be produced.
All of these are
allocated writable by tha request.
For 
.ZN GrayScale 
or 
.ZN PseudoColor , 
each mask has exactly one bit set ta 1. 
For 
.ZN DirectColor , 
each has exactly three bits set ta 1.
If contig is 
.ZN True 
and if all masks is ORed
together, a single contiguous set of bits set ta 1 is ghon be formed fo' 
.ZN GrayScale
or 
.ZN PseudoColor 
and three contiguous setz of bits set ta 1 (one within each
pixel subfield) fo' 
.ZN DirectColor .
Da RGB jointz of tha allocated
entries is undefined.
.ZN XAllocColorCells
returns nonzero if it succeeded or zero if it failed.
.LP
.ZN XAllocColorCells
can generate
.ZN BadColor
and
.ZN BadValue 
errors.
.LP
.EQ
delim %%
.EN
Da specified ncolors must be positive; 
and nreds, ngreens, n' nblues must be nonnegative,
or a
.ZN BadValue
error thangs up in dis biatch.
If ncolors colors, nredz reds, ngreens greens, n' nblues blues is requested, 
ncolors pixels is returned; n' tha masks have nreds, ngreens, n' 
nblues bits set ta 1, respectively.
If contig is 
.ZN True , 
each mask will have
a contiguous set of bits set ta 1.
No mask gonna git any bits set ta 1 up in common with
any other mask or wit any of tha pixels.
For 
.ZN DirectColor , 
each mask
will lie within tha correspondin pixel subfield.
By ORin together
subsetz of masks wit each pixel value, 
ncolors * %2 sup (nreds+ngreens+nblues)% distinct pixel joints can be produced. Y'all KNOW dat shit, muthafucka! 
All of these is allocated by tha request.
But fuck dat shiznit yo, tha word on tha street is dat up in the
colormap, there be only ncolors * %2 sup nreds% independent red entries, 
ncolors * %2 sup ngreens% independent chronic entries, 
and ncolors * %2 sup nblues% independent blue entries. Put ya muthafuckin choppers up if ya feel dis! 
This is legit even fo' 
.ZN PseudoColor .
When tha colormap entry of a pixel
value is chizzled (usin 
.ZN XStoreColors ,
.ZN XStoreColor ,
or 
.ZN XStoreNamedColor ),
the pixel is decomposed accordin ta tha masks, 
and tha correspondin independent entries is updated.
.ZN XAllocColorPlanes
returns nonzero if it succeeded or zero if it failed.
.LP
.ZN XAllocColorPlanes
can generate
.ZN BadColor
and
.ZN BadValue 
errors.
.LP
The
.ZN XFreeColors
function frees tha cells represented by pixels whose joints is up in the
pixels array.
Da planes argument should not have any bits set ta 1 up in common wit any of the
pixels. 
Da set of all pixels is produced by ORin together subsets of
the planes argument wit tha pixels.
Da request frees all of these pixels that
were allocated by tha client (usin 
.IN XAllocColor
.IN XAllocNamedColor
.IN XAllocColorCells
.IN XAllocColorPlanes
.ZN XAllocColor , 
.ZN XAllocNamedColor ,
.ZN XAllocColorCells ,
and 
.ZN XAllocColorPlanes ).
Note dat freein an
individual pixel obtained from 
.ZN XAllocColorPlanes 
may not straight-up allow
it ta be reused until all of its related pixels is also freed.
Similarly,
a read-only entry aint straight-up freed until it has been freed by all clients,
and if a cold-ass lil client allocates tha same ol' dirty read-only entry multiple times,
it must free tha entry dat nuff times before tha entry is straight-up freed.
.LP
All specified pixels dat is allocated by tha client up in tha colormap are
freed, even if one or mo' pixels produce a error. Shiiit, dis aint no joke. 
If a specified pixel aint a valid index tha fuck into tha colormap, a 
.ZN BadValue 
error thangs up in dis biatch.
If a specified pixel aint allocated by the
client (that is, is unallocated or is only allocated by another client)
or if tha colormap was pimped wit all entries writable (by passing
.ZN AllocAll
to
.ZN XCreateColormap ),
a
.ZN BadAccess
error thangs up in dis biatch. 
If mo' than one pixel is up in error, 
the one dat gets reported be arbitrary.
.LP
.ZN XFreeColors
can generate
.ZN BadAccess ,
.ZN BadColor ,
and
.ZN BadValue 
errors.
.SH DIAGNOSTICS
.TP 1i
.ZN BadAccess
A client attempted
to free a cold-ass lil color map entry dat it did not already allocate.
.TP 1i
.ZN BadAccess
A client attempted
to store tha fuck into a read-only color map entry.
.TP 1i
.ZN BadColor
A value fo' a Colormap argument do not name a thugged-out defined Colormap.
.TP 1i
.ZN BadValue
Some numeric value falls outside tha range of joints accepted by tha request.
Unless a specific range is specified fo' a argument, tha full range defined
by tha argumentz type be accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Any argument defined as a set of
alternatives can generate dis error.
.SH "SEE ALSO"
XCreateColormap(3), 
XQueryColor(3),
XStoreColors(3) 
.br
\fI\*(xL\fP
