.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RSA_get_ex_new_index 3"
.TH RSA_get_ex_new_index 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
RSA_get_ex_new_index, RSA_set_ex_data, RSA_get_ex_data \- add application specific data ta RSA structures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/rsa.h>
\&
\& int RSA_get_ex_new_index(long argl, void *argp,
\&                CRYPTO_EX_new *new_func,
\&                CRYPTO_EX_dup *dup_func,
\&                CRYPTO_EX_free *free_func);
\&
\& int RSA_set_ex_data(RSA *r, int idx, void *arg);
\&
\& void *RSA_get_ex_data(RSA *r, int idx);
\&
\& typedef int CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
\&                           int idx, long argl, void *argp);
\& typedef void CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
\&                             int idx, long argl, void *argp);
\& typedef int CRYPTO_EX_dup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void *from_d,
\&                           int idx, long argl, void *argp);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Several OpenSSL structures can have application specific data attached ta em.
This has nuff muthafuckin potential uses, it can be used ta cache data associated with
a structure (for example tha hash of some part of tha structure) or some
additionizzle data (for example a handle ta tha data up in a external library).
.PP
Since tha application data can be anythang at all it is passed n' retrieved
as a \fBvoid *\fR type.
.PP
Da \fB\f(BIRSA_get_ex_new_index()\fB\fR function is initially called ta \*(L"register\*(R" some
new application specific data. Well shiiiit, it takes three optionizzle function pointas which
are called when tha parent structure (in dis case a \s-1RSA\s0 structure) is
initially pimped, when it is copied n' when it is freed up. If any or all of
these function pointa arguments is not used they should be set ta \s-1NULL.\s0 The
precise manner up in which these function pointas is called is busted lyrics bout up in more
detail below. \fB\f(BIRSA_get_ex_new_index()\fB\fR also takes additionizzle long n' pointer
parametas which is ghon be passed ta tha supplied functions but which otherwise
have no special meaning. Well shiiiit, it returns a \fBindex\fR which should be stored
(typically up in a static variable) n' passed used up in tha \fBidx\fR parameta in
the remainin functions. Each successful call ta \fB\f(BIRSA_get_ex_new_index()\fB\fR
will return a index pimped outa than any previously returned, dis is blingin
because tha optionizzle functions is called up in order of increasin index value.
.PP
\&\fB\f(BIRSA_set_ex_data()\fB\fR is used ta set application specific data, tha data is
supplied up in tha \fBarg\fR parameta n' its precise meanin is up ta the
application.
.PP
\&\fB\f(BIRSA_get_ex_data()\fB\fR is used ta retrieve application specific data. Da data
is moonwalked back ta tha application, dis is ghon be tha same value as supplied to
a previous \fB\f(BIRSA_set_ex_data()\fB\fR call.
.PP
\&\fB\f(BInew_func()\fB\fR is called when a structure is initially allocated (for example
with \fB\f(BIRSA_new()\fB\fR. Da parent structure thugz aint gonna have any meaningful
values at dis point. This function will typically be used ta allocate any
application specific structure.
.PP
\&\fB\f(BIfree_func()\fB\fR is called when a structure is bein freed up. Da dynamic parent
structure thugz should not be accessed cuz they is ghon be freed up when
this function is called.
.PP
\&\fB\f(BInew_func()\fB\fR n' \fB\f(BIfree_func()\fB\fR take tha same parameters. \fBparent\fR be a
pointa ta tha parent \s-1RSA\s0 structure. \fBptr\fR be a tha application specific data
(this aint gonna be of much use up in \fB\f(BInew_func()\fB\fR. \fBad\fR be a pointa ta the
\&\fB\s-1CRYPTO_EX_DATA\s0\fR structure from tha parent \s-1RSA\s0 structure: tha functions
\&\fB\f(BICRYPTO_get_ex_data()\fB\fR n' \fB\f(BICRYPTO_set_ex_data()\fB\fR can be called ta manipulate
it. Da \fBidx\fR parameta is tha index: dis is ghon be tha same value returned by
\&\fB\f(BIRSA_get_ex_new_index()\fB\fR when tha functions was initially registered. Y'all KNOW dat shit, muthafucka! Finally
the \fBargl\fR n' \fBargp\fR parametas is tha joints originally passed ta tha same
correspondin parametas when \fB\f(BIRSA_get_ex_new_index()\fB\fR was called.
.PP
\&\fB\f(BIdup_func()\fB\fR is called when a structure is bein copied. Y'all KNOW dat shit, muthafucka! Pointas ta the
destination n' source \fB\s-1CRYPTO_EX_DATA\s0\fR structures is passed up in tha \fBto\fR and
\&\fBfrom\fR parametas respectively. Da \fBfrom_d\fR parameta is passed a pointa to
the source application data when tha function is called, when tha function returns
the value is copied ta tha destination: tha application can thus modify tha data
pointed ta by \fBfrom_d\fR n' have different joints up in tha source n' destination.
Da \fBidx\fR, \fBargl\fR n' \fBargp\fR parametas is tha same as dem up in \fB\f(BInew_func()\fB\fR
and \fB\f(BIfree_func()\fB\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fB\f(BIRSA_get_ex_new_index()\fB\fR returns a freshly smoked up index or \-1 on failure (note 0 be a valid
index value).
.PP
\&\fB\f(BIRSA_set_ex_data()\fB\fR returns 1 on success or 0 on failure.
.PP
\&\fB\f(BIRSA_get_ex_data()\fB\fR returns tha application data or 0 on failure. 0 may also
be valid application data but currently it can only fail if given a invalid \fBidx\fR
parameter.
.PP
\&\fB\f(BInew_func()\fB\fR n' \fB\f(BIdup_func()\fB\fR should return 0 fo' failure n' 1 fo' success.
.PP
On failure a error code can be obtained from \fIERR_get_error\fR\|(3).
.SH "BUGS"
.IX Header "BUGS"
\&\fB\f(BIdup_func()\fB\fR is currently never called.
.PP
Da return value of \fB\f(BInew_func()\fB\fR is ignored.
.PP
Da \fB\f(BInew_func()\fB\fR function aint straight-up useful cuz no meaningful joints are
present up in tha parent \s-1RSA\s0 structure when it is called.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIrsa\fR\|(3), \fICRYPTO_set_ex_data\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIRSA_get_ex_new_index()\fR, \fIRSA_set_ex_data()\fR n' \fIRSA_get_ex_data()\fR are
available since SSLeay 0.9.0.
