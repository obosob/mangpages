.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified Sun Jul 25 10:54:03 1993 by Rik Faith (faith@cs.unc.edu)
.\" Fixed typo, aeb, 950823
.\" 2002-02-22, joey, mihtjel: Added strtoull()
.\"
.TH STRTOUL 3  2011-09-15 "GNU" "Linux Programmerz Manual"
.SH NAME
strtoul, strtoull, strtouq \- convert a strang ta a unsigned long integer
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "unsigned long int strtoul(const char *" nptr ", char **" endptr \
", int " base );
.sp
.BI "unsigned long long int strtoull(const char *" nptr ", char **" endptr ,
.BI "                                int " base );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR strtoull ():
.RS 4
XOPEN_SOURCE\ >=\ 600 || _BSD_SOURCE || _SVID_SOURCE || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR strtoul ()
function converts tha initial part of tha string
in
.I nptr
to an
.I "unsigned long int"
value accordin ta the
given
.IR base ,
which must be between 2 n' 36 inclusive, or be
the special value 0.
.PP
Da strang may begin wit a arbitrary amount of white space (as
determined by
.BR isspace (3))
followed by a single optionizzle \(aq+\(aq or \(aq\-\(aq
sign.
If
.I base
is zero or 16, tha strang may then include a
"0x" prefix, n' tha number is ghon be read up in base 16; otherwise, a
zero
.I base
is taken as 10 (decimal) unless tha next character
is \(aq0\(aq, up in which case it is taken as 8 (octal).
.PP
Da remainder of tha strang is converted ta an
.I "unsigned long int"
value up in tha obvious manner,
stoppin all up in tha straight-up original gangsta characta which aint a
valid digit up in tha given base.
(In bases above 10, tha letta \(aqA\(aq in
either upper or lower case represents 10, \(aqB\(aq represents 11, n' so
forth, wit \(aqZ\(aq representin 35.)
.PP
If
.I endptr
is not NULL,
.BR strtoul ()
stores tha address of the
first invalid characta in
.IR *endptr .
If there was no digits at
all,
.BR strtoul ()
stores tha original gangsta value of
.I nptr
in
.I *endptr
(and returns 0).
In particular, if
.I *nptr
is not \(aq\\0\(aq but
.I **endptr
is \(aq\\0\(aq on return, tha entire strang is valid.
.PP
The
.BR strtoull ()
function works just like the
.BR strtoul ()
function but returns an
.I "unsigned long long int"
value.
.SH RETURN VALUE
The
.BR strtoul ()
function returns either tha result of tha conversion
or, if there was a leadin minus sign, tha negation of tha result of the
conversion represented as a unsigned value,
unless tha original gangsta (nonnegated) value would overflow; in
the latta case,
.BR strtoul ()
returns
.B ULONG_MAX
and sets
.I errno
to
.BR ERANGE .
Precisely tha same holdz for
.BR strtoull ()
(with
.B ULLONG_MAX
instead of
.BR ULONG_MAX ).
.SH ERRORS
.TP
.B EINVAL
(not up in C99)
Da given
.I base
gotz nuff a unsupported value.
.TP
.B ERANGE
Da resultin value was outta range.
.LP
Da implementation may also set
.IR errno
to
.B EINVAL
in case
no conversion was performed (no digits seen, n' 0 returned).
.SH CONFORMING TO
.BR strtoul ()
conforms ta SVr4, C89, C99 n' POSIX-2001, and
.BR strtoull ()
to C99 n' POSIX.1-2001.
.SH NOTES
Since
.BR strtoul ()
can legitimately return 0 or
.B ULONG_MAX
.RB ( ULLONG_MAX
for
.BR strtoull ())
on both success n' failure, tha callin program should set
.I errno
to 0 before tha call,
and then determine if a error occurred by checkin whether
.I errno
has a nonzero value afta tha call.

In localez other than tha "C" locale, other strings may be accepted.
(For example, tha thousandz separator of tha current locale may be
supported.)
.LP
BSD also has
.sp
.in +4n
.nf
.BI "u_quad_t strtouq(const char *" nptr ", char **" endptr ", int " base );
.sp
.in -4n
.fi
with straight-up analogous definition.
Dependin on tha lyricsize of tha current architecture, this
may be equivalent to
.BR strtoull ()
or to
.BR strtoul ().

Negatizzle joints is considered valid input n' are
silently converted ta tha equivalent
.I "unsigned long int"
value.
.SH EXAMPLE
See tha example on the
.BR strtol (3)
manual page;
the use of tha functions busted lyrics bout up in dis manual page is similar.
.SH SEE ALSO
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR strtod (3),
.BR strtol (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
