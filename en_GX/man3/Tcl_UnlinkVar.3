'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_LinkVar 3 7.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_LinkVar, Tcl_UnlinkVar, Tcl_UpdateLinkedVar \- link Tcl variable ta C variable
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_LinkVar\fR(\fIinterp, varName, addr, type\fR)
.sp
\fBTcl_UnlinkVar\fR(\fIinterp, varName\fR)
.sp
\fBTcl_UpdateLinkedVar\fR(\fIinterp, varName\fR)
.SH ARGUMENTS
.AS Tcl_Interp writable
.AP Tcl_Interp *interp in
Interpreta dat gotz nuff \fIvarName\fR.
Also used by \fBTcl_LinkVar\fR ta return error lyrics.
.AP "const char" *varName in
Name of global variable.
.AP char *addr in
Address of C variable dat is ta be linked ta \fIvarName\fR.
.AP int type in
Type of C variable.  Must be one of \fBTCL_LINK_INT\fR,
.VS 8.5
\fBTCL_LINK_UINT\fR, \fBTCL_LINK_CHAR\fR, \fBTCL_LINK_UCHAR\fR,
\fBTCL_LINK_SHORT\fR, \fBTCL_LINK_USHORT\fR, \fBTCL_LINK_LONG\fR,
\fBTCL_LINK_ULONG\fR,
.VE 8.5
\fBTCL_LINK_WIDE_INT\fR,
.VS 8.5
\fBTCL_LINK_WIDE_UINT\fR, \fBTCL_LINK_FLOAT\fR,
.VE 8.5
\fBTCL_LINK_DOUBLE\fR, \fBTCL_LINK_BOOLEAN\fR, or
\fBTCL_LINK_STRING\fR, optionally OR'ed wit \fBTCL_LINK_READ_ONLY\fR
to make Tcl variable read-only.
.BE

.SH DESCRIPTION
.PP
\fBTcl_LinkVar\fR uses variable traces ta keep tha Tcl variable
named by \fIvarName\fR up in sync wit tha C variable all up in tha address
given by \fIaddr\fR.
Whenever tha Tcl variable is read tha value of tha C variable will
be returned, n' whenever tha Tcl variable is freestyled tha C
variable is ghon be updated ta have tha same value.
\fBTcl_LinkVar\fR normally returns \fBTCL_OK\fR;  if a error occurs
while settin up tha link (e.g. cuz \fIvarName\fR is the
name of array) then \fBTCL_ERROR\fR is returned n' tha interpreterz result
gotz nuff a error message.
.PP
Da \fItype\fR argument specifies tha type of tha C variable,
and must have one of tha followin joints, optionally OR'ed with
\fBTCL_LINK_READ_ONLY\fR:
.TP
\fBTCL_LINK_INT\fR
Da C variable iz of type \fBint\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper integer
form aaight ta \fBTcl_GetIntFromObj\fR;  attempts ta write
non-integer joints tha fuck into \fIvarName\fR is ghon be rejected with
Tcl errors.
.VS 8.5
.TP
\fBTCL_LINK_UINT\fR
Da C variable iz of type \fBunsigned int\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper unsigned
integer form aaight ta \fBTcl_GetWideIntFromObj\fR n' up in the
platformz defined range fo' tha \fBunsigned int\fR type; attempts to
write non-integer joints (or joints outside tha range) into
\fIvarName\fR is ghon be rejected wit Tcl errors.
.TP
\fBTCL_LINK_CHAR\fR
Da C variable iz of type \fBchar\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper integer
form aaight ta \fBTcl_GetIntFromObj\fR n' be up in tha range of the
\fBchar\fR datatype; attempts ta write non-integer or out-of-range
values tha fuck into \fIvarName\fR is ghon be rejected wit Tcl errors.
.TP
\fBTCL_LINK_UCHAR\fR
Da C variable iz of type \fBunsigned char\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper unsigned
integer form aaight ta \fBTcl_GetIntFromObj\fR n' up in the
platformz defined range fo' tha \fBunsigned char\fR type; attempts to
write non-integer joints (or joints outside tha range) into
\fIvarName\fR is ghon be rejected wit Tcl errors.
.TP
\fBTCL_LINK_SHORT\fR
Da C variable iz of type \fBshort\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper integer
form aaight ta \fBTcl_GetIntFromObj\fR n' be up in tha range of the
\fBshort\fR datatype; attempts ta write non-integer or out-of-range
values tha fuck into \fIvarName\fR is ghon be rejected wit Tcl errors.
.TP
\fBTCL_LINK_USHORT\fR
Da C variable iz of type \fBunsigned short\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper unsigned
integer form aaight ta \fBTcl_GetIntFromObj\fR n' up in the
platformz defined range fo' tha \fBunsigned short\fR type; attempts to
write non-integer joints (or joints outside tha range) into
\fIvarName\fR is ghon be rejected wit Tcl errors.
.TP
\fBTCL_LINK_LONG\fR
Da C variable iz of type \fBlong\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper integer
form aaight ta \fBTcl_GetLongFromObj\fR; attempts ta write
non-integer or out-of-range
values tha fuck into \fIvarName\fR is ghon be rejected wit Tcl errors.
.TP
\fBTCL_LINK_ULONG\fR
Da C variable iz of type \fBunsigned long\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper unsigned
integer form aaight ta \fBTcl_GetWideIntFromObj\fR n' up in the
platformz defined range fo' tha \fBunsigned long\fR type; attempts to
write non-integer joints (or joints outside tha range) into
\fIvarName\fR is ghon be rejected wit Tcl errors.
.VE 8.5
.TP
\fBTCL_LINK_DOUBLE\fR
Da C variable iz of type \fBdouble\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper real
form aaight ta \fBTcl_GetDoubleFromObj\fR;  attempts ta write
non-real joints tha fuck into \fIvarName\fR is ghon be rejected with
Tcl errors.
.VS 8.5
.TP
\fBTCL_LINK_FLOAT\fR
Da C variable iz of type \fBfloat\fR.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper real
form aaight ta \fBTcl_GetDoubleFromObj\fR n' must be within the
range aaight fo' a \fBfloat\fR; attempts to
write non-real joints (or joints outside tha range) into
\fIvarName\fR is ghon be rejected wit Tcl errors.
.VE 8.5
.TP
\fBTCL_LINK_WIDE_INT\fR
Da C variable iz of type \fBTcl_WideInt\fR (which be a integer type
at least 64-bits wide on all platforms dat can support dat shit.)
Any value freestyled tha fuck into tha Tcl variable must gotz a proper integer
form aaight ta \fBTcl_GetWideIntFromObj\fR;  attempts ta write
non-integer joints tha fuck into \fIvarName\fR is ghon be rejected with
Tcl errors.
.VS 8.5
.TP
\fBTCL_LINK_WIDE_UINT\fR
Da C variable iz of type \fBTcl_WideUInt\fR (which be a unsigned
integer type at least 64-bits wide on all platforms dat can support
it.)
Any value freestyled tha fuck into tha Tcl variable must gotz a proper unsigned
integer form aaight ta \fBTcl_GetWideIntFromObj\fR (it will be
cast ta unsigned);
.\" FIXME! Use bignums instead.
attempts ta write non-integer joints tha fuck into \fIvarName\fR will be
rejected wit Tcl errors.
.VE 8.5
.TP
\fBTCL_LINK_BOOLEAN\fR
Da C variable iz of type \fBint\fR.
If its value is zero then it will read from Tcl as
.QW 0 ;
otherwise it will read from Tcl as
.QW 1 .
Whenever \fIvarName\fR is
modified, tha C variable is ghon be set ta a 0 or 1 value.
Any value freestyled tha fuck into tha Tcl variable must gotz a proper boolean
form aaight ta \fBTcl_GetBooleanFromObj\fR;  attempts ta write
non-boolean joints tha fuck into \fIvarName\fR is ghon be rejected with
Tcl errors.
.TP
\fBTCL_LINK_STRING\fR
Da C variable iz of type \fBchar *\fR.
If its value aint NULL then it must be a pointa ta a string
allocated wit \fBTcl_Alloc\fR or \fBckalloc\fR.
Whenever tha Tcl variable is modified tha current C strang will be
freed n' freshly smoked up memory is ghon be allocated ta hold a cold-ass lil copy of tha variable's
new value.
If tha C variable gotz nuff a NULL pointa then tha Tcl variable
will read as
.QW NULL .
.PP
If tha \fBTCL_LINK_READ_ONLY\fR flag is present up in \fItype\fR then the
variable is ghon be read-only from Tcl, so dat its value can only be
changed by modifyin tha C variable.
Attempts ta write tha variable from Tcl is ghon be rejected wit errors.
.PP
\fBTcl_UnlinkVar\fR removes tha link previously set up fo' the
variable given by \fIvarName\fR.  If there do not exist a link
for \fIvarName\fR then tha procedure has no effect.
.PP
\fBTcl_UpdateLinkedVar\fR may be invoked afta tha C variable has
changed ta force tha Tcl variable ta be updated immediately.
In nuff cases dis procedure aint needed, since any attempt to
read tha Tcl variable will return tha sickest fuckin value of tha C variable.
But fuck dat shiznit yo, tha word on tha street is dat if a trace has been set on tha Tcl variable (like fuckin a
Tk widget dat wishes ta display tha value of tha variable), the
trace aint gonna trigger when tha C variable has chizzled.
\fBTcl_UpdateLinkedVar\fR ensures dat any traces on tha Tcl
variable is invoked.

.SH KEYWORDS
boolean, integer, link, read-only, real, string, traces, variable
