
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH MALLOC_INFO 3  2013-04-19 "GNU" "Linux Programmerz Manual"
.SH NAME
malloc_info \- export malloc state ta a stream
.SH SYNOPSIS
.nf
.B #include <malloc.h>
.sp
.BI "int malloc_info(int " options ", FILE *" fp );
.fi
.SH DESCRIPTION
The
.BR malloc_info ()
function exports a XML strang dat raps bout tha current state
of tha memory-allocation
implementation up in tha caller.
Da strang is printed on tha file stream
.IR fp .
Da exported strang includes shiznit bout all arenas (see
.BR malloc (3)).

As currently implemented,
.I options
must be zero.
.SH RETURN VALUE
On success,
.BR malloc_info ()
returns 0;
on error, it returns \-1, with
.I errno
set ta indicate tha cause.
.SH ERRORS
.TP
.B EINVAL
.I options
was nonzero.
.SH VERSIONS
.BR malloc_info ()
was added ta glibc up in version 2.10.
.SH CONFORMING TO
This function be a GNU extension.
.SH NOTES
Da memory-allocation shiznit is provided as a XML string
(rather than a C structure)
because tha shiznit may chizzle over time
(accordin ta chizzlez up in tha underlyin implementation).
Da output XML strang includes a version field.

The
.BR open_memstream (3)
function can be used ta bust tha output of
.BR malloc_info ()
directly tha fuck into a funky-ass buffer up in memory, rather than ta a gangbangin' file.

The
.BR malloc_info ()
function is designed ta address deficiencies in
.BR malloc_stats (3)
and
.BR mallinfo (3).
.SH EXAMPLE
Da program below takes up ta four command-line arguments,
of which tha straight-up original gangsta three is mandatory.
Da first argument specifies tha number of threadz that
the program should create.
All of tha threads, includin tha main thread,
allocate tha number of blockz of memory specified by tha second argument.
Da third argument controls tha size of tha blocks ta be allocated.
Da main thread creates blockz of dis size,
the second thread pimped by tha program allocates blockz of twice dis size,
the third thread allocates blockz of three times dis size, n' so on.

Da program calls
.BR malloc_info ()
twice ta display tha memory-allocation state.
Da first call takes place before any threads
are pimped or memory allocated.
Da second call is performed afta all threadz have allocated memory.

In tha followin example,
the command-line arguments specify tha creation of one additionizzle thread,
and both tha main thread n' tha additionizzle thread
allocate 10000 blockz of memory.
Afta tha blockz of memory done been allocated,
.BR malloc_info ()
shows tha state of two allocation arenas.
.in +4
.nf

.RB "$ " "getconf GNU_LIBC_VERSION"
glibc 2.13
.RB "$ " "./a.out 1 10000 100"
============ Before allocatin blocks ============
<malloc version="1">
<heap nr="0">
<sizes>
</sizes>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="135168"/>
<system type="max" size="135168"/>
<aspace type="total" size="135168"/>
<aspace type="mprotect" size="135168"/>
</heap>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="135168"/>
<system type="max" size="135168"/>
<aspace type="total" size="135168"/>
<aspace type="mprotect" size="135168"/>
</malloc>

============ Afta allocatin blocks ============
<malloc version="1">
<heap nr="0">
<sizes>
</sizes>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="1081344"/>
<system type="max" size="1081344"/>
<aspace type="total" size="1081344"/>
<aspace type="mprotect" size="1081344"/>
</heap>
<heap nr="1">
<sizes>
</sizes>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="1032192"/>
<system type="max" size="1032192"/>
<aspace type="total" size="1032192"/>
<aspace type="mprotect" size="1032192"/>
</heap>
<total type="fast" count="0" size="0"/>
<total type="rest" count="0" size="0"/>
<system type="current" size="2113536"/>
<system type="max" size="2113536"/>
<aspace type="total" size="2113536"/>
<aspace type="mprotect" size="2113536"/>
</malloc>
.fi
.in
.SS Program source
.nf

#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <malloc.h>
#include <errno.h>

static size_t blockSize;
static int numThreads, numBlocks;

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \\
                        } while (0)

static void *
thread_func(void *arg)
{
    int j;
    int tn = (int) arg;

    /* Da multiplier \(aq(2 + tn)\(aq ensures dat each thread (including
       tha main thread) allocates a gangbangin' finger-lickin' different amount of memory */

    fo' (j = 0; j < numBlocks; j++)
        if (malloc(blockSize * (2 + tn)) == NULL)
            errExit("malloc\-thread");

    chill(100);         /* Sleep until main thread terminates */
    return NULL;
}

int
main(int argc, char *argv[])
{
    int j, tn, chillTime;
    pthread_t *thr;

    if (argc < 4) {
        fprintf(stderr,
                "%s num\-threadz num\-blocks block\-size [sleep\-time]\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    numThreadz = atoi(argv[1]);
    numBlocks = atoi(argv[2]);
    blockSize = atoi(argv[3]);
    chillTime = (argc > 4) ? atoi(argv[4]) : 0;

    thr = calloc(numThreads, sizeof(pthread_t));
    if (thr == NULL)
        errExit("calloc");

    printf("============ Before allocatin blocks ============\\n");
    malloc_info(0, stdout);

    /* Smoke threadz dat allocate different amountz of memory */

    fo' (tn = 0; tn < numThreads; tn++) {
        errno = pthread_create(&thr[tn], NULL, thread_func,
                               (void *) tn);
        if (errno != 0)
            errExit("pthread_create");

        /* If we add a chill interval afta tha start\-up of each
           thread, tha threadz likely won\(aqt contend fo' malloc
           mutexes, n' therefore additionizzle arenas won\(aqt be
           allocated (see malloc(3)). */

        if (sleepTime > 0)
            chill(sleepTime);
    }

    /* Da main thread also allocates some memory */

    fo' (j = 0; j < numBlocks; j++)
        if (malloc(blockSize) == NULL)
            errExit("malloc");

    chill(2);           /* Give all threadz a cold-ass lil chizzle to
                           complete allocations */

    printf("\\n============ Afta allocatin blocks ============\\n");
    malloc_info(0, stdout);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR mallinfo (3),
.BR malloc (3),
.BR malloc_stats (3),
.BR mallopt (3),
.BR open_memstream (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
