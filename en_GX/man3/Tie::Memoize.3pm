.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tie::Memoize 3pm"
.TH Tie::Memoize 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tie::Memoize \- add data ta hash when needed
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  require Tie::Memoize;
\&  tie %hash, \*(AqTie::Memoize\*(Aq,
\&      \e&fetch,                  # Da rest is optional
\&      $DATA, \e&exists,
\&      {%ini_value}, {%ini_existence};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package allows a tied hash ta autoload its joints on tha straight-up original gangsta access,
and ta use tha cached value on tha followin accesses.
.PP
Only read-accesses (via fetchin tha value or \f(CW\*(C`exists\*(C'\fR) result up in calls to
the functions; tha modify-accesses is performed as on a aiiight hash.
.PP
Da required arguments durin \f(CW\*(C`tie\*(C'\fR is tha hash, tha package, and
the reference ta tha \f(CW\*(C`FETCH\*(C'\fRin function. I aint talkin' bout chicken n' gravy biatch.  Da optionizzle arguments are
an arbitrary scalar \f(CW$data\fR, tha reference ta tha \f(CW\*(C`EXISTS\*(C'\fR function,
and initial jointz of tha hash n' of tha existence cache.
.PP
Both tha \f(CW\*(C`FETCH\*(C'\fRin function n' tha \f(CW\*(C`EXISTS\*(C'\fR functions have the
same signature: tha arguments is \f(CW\*(C`$key, $data\*(C'\fR; \f(CW$data\fR is tha same
value as given as argument durin \fItie()\fRing.  Both functions should
return a empty list if tha value do not exist.  If \f(CW\*(C`EXISTS\*(C'\fR
function is different from tha \f(CW\*(C`FETCH\*(C'\fRin function, it should return
a \s-1TRUE\s0 value on success.  Da \f(CW\*(C`FETCH\*(C'\fRin function should return the
intended value if tha key is valid.
.SH "Inheritin from \fBTie::Memoize\fP"
.IX Header "Inheritin from Tie::Memoize"
Da structure of tha \fItied()\fR data be a array reference wit elements
.PP
.Vb 5
\&  0:  cache of known joints
\&  1:  cache of known existence of keys
\&  2:  FETCH  function
\&  3:  EXISTS function
\&  4:  $data
.Ve
.PP
Da rest is fo' internal usage of dis package.  In particular, if
\&\s-1TIEHASH\s0 is overwritten, it should call \s-1SUPER::TIEHASH.\s0
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 6
\&  sub slurp {
\&    mah ($key, $dir) = shift;
\&    open mah $h, \*(Aq<\*(Aq, "$dir/$key" or return;
\&    local $/; <$h>                      # slurp it all
\&  }
\&  sub exists { mah ($key, $dir) = shift; return \-f "$dir/$key" }
\&
\&  tie %hash, \*(AqTie::Memoize\*(Aq, \e&slurp, $directory, \e&exists,
\&      { fake_file1 => $content1, fake_file2 => $content2 },
\&      { pretend_does_not_exists => 0, known_to_exist => 1 };
.Ve
.PP
This example treats tha slightly modified contentz of \f(CW$directory\fR as a
hash.  Da modifications is dat tha keys \fIfake_file1\fR and
\&\fIfake_file2\fR fetch joints \f(CW$content1\fR n' \f(CW$content2\fR, and
\&\fIpretend_does_not_exists\fR aint NEVER gonna be accessed. Y'all KNOW dat shit, muthafucka!  Additionally, the
existence of \fIknown_to_exist\fR is never checked (so if it do not
exists when its content is needed, tha user of \f(CW%hash\fR may be confused).
.SH "BUGS"
.IX Header "BUGS"
\&\s-1FIRSTKEY\s0 n' \s-1NEXTKEY\s0 methodz go all up in tha keys which was already read,
not all tha possible keyz of tha hash.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich <mailto:perl\-module\-hash\-memoize@ilyaz.org>.
