" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::stack< _Tp, _Sequence > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Sequence::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Sequence \fBcontainer_type\fP"
.br
.ti -1c
.RI "typedef _Sequence::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Sequence::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Sequence::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBstack\fP (const _Sequence &__c)"
.br
.ti -1c
.RI "\fBstack\fP (_Sequence &&__c=_Sequence())"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> void \fBemplace\fP (_Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "void \fBpop\fP ()"
.br
.ti -1c
.RI "void \fBpush\fP (const value_type &__x)"
.br
.ti -1c
.RI "void \fBpush\fP (value_type &&__x)"
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBstack\fP &__s) noexcept(noexcept(swap(c, __s\&.c)))"
.br
.ti -1c
.RI "reference \fBtop\fP ()"
.br
.ti -1c
.RI "const_reference \fBtop\fP () const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "_Sequence \fBc\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _Tp1 , typename _Seq1 > bool \fBoperator<\fP (const \fBstack\fP< _Tp1, _Seq1 > &, const \fBstack\fP< _Tp1, _Seq1 > &)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Seq1 > bool \fBoperator==\fP (const \fBstack\fP< _Tp1, _Seq1 > &, const \fBstack\fP< _Tp1, _Seq1 > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Sequence = deque<_Tp>>class std::stack< _Tp, _Sequence >"
A standard container givin FILO behavior\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Tp\fP Type of element\&. 
.br
\fI_Sequence\fP Type of underlyin sequence, defaults ta deque<_Tp>\&.
.RE
.PP
Meets nuff of tha requirementz of a \fCcontainer\fP yo, but do not define anythang ta do wit iterators\&. Straight-up few of tha other standard container intercourses is defined\&.
.PP
This aint a legit container yo, but a \fIadaptor\fP\&. Well shiiiit, it holdz another container, n' serves up a wrapper intercourse ta dat container\&. Da wrapper is what tha fuck enforces strict first-in-last-out stack behavior\&.
.PP
Da second template parameta defines tha type of tha underlyin sequence/container\&. Well shiiiit, it defaults ta std::deque yo, but it can be any type dat supports \fCback\fP, \fCpush_back\fP, n' \fCpop_front\fP, like fuckin std::list, std::vector, or a appropriate user-defined type\&.
.PP
Members not found up in \fInormal\fP containers is \fCcontainer_type\fP, which be a typedef fo' tha second Sequence parameter, n' \fCpush\fP, \fCpop\fP, n' \fCtop\fP, which is standard stack/FILO operations\&. 
.PP
Definizzle at line 96 of file stl_stack\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Tp, typename _Sequence = deque<_Tp>> \fBstd::stack\fP< _Tp, _Sequence >::\fBstack\fP (const _Sequence &__c)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Default constructor creates no elements\&. 
.PP
Definizzle at line 134 of file stl_stack\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Tp, typename _Sequence = deque<_Tp>> bool \fBstd::stack\fP< _Tp, _Sequence >::empty () const\fC [inline]\fP"
Returns legit if tha stack is empty\&. 
.PP
Definizzle at line 146 of file stl_stack\&.h\&.
.SS "template<typename _Tp, typename _Sequence = deque<_Tp>> void \fBstd::stack\fP< _Tp, _Sequence >::pop ()\fC [inline]\fP"

.PP
Removes first element\&. This be a typical stack operation\&. Well shiiiit, it shrinks tha stack by one\&. Da time complexitizzle of tha operation dependz on tha underlyin sequence\&.
.PP
Note dat no data is returned, n' if tha straight-up original gangsta elementz data is needed, it should be retrieved before pop() is called\&. 
.PP
Definizzle at line 212 of file stl_stack\&.h\&.
.SS "template<typename _Tp, typename _Sequence = deque<_Tp>> void \fBstd::stack\fP< _Tp, _Sequence >::push (const value_type &__x)\fC [inline]\fP"

.PP
Add data ta tha top of tha stack\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Data ta be added\&.
.RE
.PP
This be a typical stack operation\&. Da function creates a element all up in tha top of tha stack n' assigns tha given data ta it\&. Da time complexitizzle of tha operation dependz on tha underlyin sequence\&. 
.PP
Definizzle at line 186 of file stl_stack\&.h\&.
.SS "template<typename _Tp, typename _Sequence = deque<_Tp>> size_type \fBstd::stack\fP< _Tp, _Sequence >::size () const\fC [inline]\fP"
Returns tha number of elements up in tha stack\&. 
.PP
Definizzle at line 151 of file stl_stack\&.h\&.
.SS "template<typename _Tp, typename _Sequence = deque<_Tp>> reference \fBstd::stack\fP< _Tp, _Sequence >::top ()\fC [inline]\fP"
Returns a read/write reference ta tha data all up in tha straight-up original gangsta element of tha stack\&. 
.PP
Definizzle at line 159 of file stl_stack\&.h\&.
.SS "template<typename _Tp, typename _Sequence = deque<_Tp>> const_reference \fBstd::stack\fP< _Tp, _Sequence >::top () const\fC [inline]\fP"
Returns a read-only (constant) reference ta tha data all up in tha straight-up original gangsta element of tha stack\&. 
.PP
Definizzle at line 170 of file stl_stack\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
