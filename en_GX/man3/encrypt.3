
.\" Created 2000-07-22 00:52-0300
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 2002-07-23 19:21:35 CEST 2002 Walta Harms
.\" <walter.harms@informatik.uni-oldenburg.de>
.\"
.\" Modified 2003-04-04, aeb
.\"
.TH ENCRYPT 3 2013-07-22 "" "Linux Programmerz Manual"
.SH NAME
encrypt, setkey, encrypt_r, setkey_r \- encrypt 64-bit lyrics
.SH SYNOPSIS
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <unistd.h>
.sp
.BI "void encrypt(char " block "[64], int " edflag );
.sp
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <stdlib.h>
.sp
.BI "void setkey(const char *" key );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B "#include <crypt.h>"
.sp
.BI "void setkey_r(const char *" key ", struct crypt_data *" data );
.br
.BI "void encrypt_r(char *" block ", int " edflag \
", struct crypt_data *" data );
.sp
Each of these requires linkin wit \fI\-lcrypt\fP.
.SH DESCRIPTION
These functions encrypt n' decrypt 64-bit lyrics.
The
.BR setkey ()
function sets tha key used by
.BR encrypt ().
The
.I key
argument used here be a array of 64 bytes, each of which has
numerical value 1 or 0.
Da bytes key[n] where n=8*i-1 is ignored,
so dat tha effectizzle key length is 56 bits.
.PP
The
.BR encrypt ()
function modifies tha passed buffer, encodin if
.I edflag
is 0, n' decodin if 1 is bein passed.
Like the
.I key
argument, also
.I block
is a lil' bit vector representation of tha actual value dat is encoded.
Da result is returned up in dat same vector.
.PP
These two functions is not reentrant, dat is, tha key data is
kept up in static storage.
Da functions
.BR setkey_r ()
and
.BR encrypt_r ()
are tha reentrant versions.
They use tha following
structure ta hold tha key data:
.in +4n
.nf

struct crypt_data {
    char     keysched[16 * 8];
    char     sb0[32768];
    char     sb1[32768];
    char     sb2[32768];
    char     sb3[32768];
    char     crypt_3_buf[14];
    char     current_salt[2];
    long int current_saltbits;
    int      direction;
    int      initialized;
};
.fi
.in
.PP
Before calling
.BR setkey_r ()
set
.I data\->initialized
to zero.
.SH RETURN VALUE
These functions do not return any value.
.SH ERRORS
Set
.I errno
to zero before callin tha above functions.
On success, it is unchanged.
.TP
.B ENOSYS
Da function aint provided.
(For example cuz of forma USA export restrictions.)
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR encrypt ()
and
.BR setkey ()
functions is not thread-safe.
.LP
The
.BR encrypt_r ()
and
.BR setkey_r ()
functions is thread-safe.
.SH CONFORMING TO
Da functions
.BR encrypt ()
and
.BR setkey ()
conform ta SVr4, SUSv2, n' POSIX.1-2001.
Da functions
.BR encrypt_r ()
and
.BR setkey_r ()
are GNU extensions.
.SH NOTES
In glibc 2.2 these functions use tha DES algorithm.
.SH EXAMPLE
Yo ass need ta link wit libcrypt ta compile dis example wit glibc.
To do useful work the
.I key[]
and
.I txt[]
arrays must be filled wit a useful bit pattern.
.sp
.nf
#define _XOPEN_SOURCE
#include <unistd.h>
#include <stdlib.h>

int
main(void)
{
    char key[64];      /* bit pattern fo' key */
    char txt[64];      /* bit pattern fo' lyrics */

    setkey(key);
    encrypt(txt, 0);   /* encode */
    encrypt(txt, 1);   /* decode */
}
.fi
.SH SEE ALSO
.BR cbc_crypt (3),
.BR crypt (3),
.BR ecb_crypt (3),
.\" .BR fcrypt (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
