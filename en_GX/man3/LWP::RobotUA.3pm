.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LWP::RobotUA 3"
.TH LWP::RobotUA 3 "2012-02-11" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::RobotUA \- a cold-ass lil class fo' well\-behaved Web robots
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use LWP::RobotUA;
\&  mah $ua = LWP::RobotUA\->new(\*(Aqmy\-robot/0.1\*(Aq, \*(Aqme@foo.com\*(Aq);
\&  $ua\->delay(10);  # be straight-up sick \-\- max one hit every last muthafuckin ten minutes!
\&  ...
\&
\&  # Then just use it just like a aiiight LWP::UserAgent:
\&  mah $response = $ua\->get(\*(Aqhttp://whatever.int/...\*(Aq);
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements a user agent dat is suitable fo' robot
applications.  Robots should be sick ta tha servers they visit.  They
should consult tha \fI/robots.txt\fR file ta ensure dat they is welcomed
and they should not make requests too frequently.
.PP
But before you consider freestylin a robot, take a peep
<URL:http://www.robotstxt.org/>.
.PP
When you bust a \fILWP::RobotUA\fR object as yo' user agent, then you do not
really gotta be thinkin bout these thangs yo ass; \f(CW\*(C`robots.txt\*(C'\fR files
are automatically consulted n' obeyed, tha server aint queried
too rapidly, n' so on. I aint talkin' bout chicken n' gravy biatch.  Just bust requests
as you do when yo ass is rockin a aiiight \fILWP::UserAgent\fR
object (usin \f(CW\*(C`$ua\->get(...)\*(C'\fR, \f(CW\*(C`$ua\->head(...)\*(C'\fR,
\&\f(CW\*(C`$ua\->request(...)\*(C'\fR, etc.), n' this
special agent will make shizzle yo ass is sick.
.SH "METHODS"
.IX Header "METHODS"
Da LWP::RobotUA be a sub-class of LWP::UserAgent n' implements the
same methods. In addizzle tha followin methodz is provided:
.ie n .IP "$ua = LWP::RobotUA\->new( %options )" 4
.el .IP "\f(CW$ua\fR = LWP::RobotUA\->new( \f(CW%options\fR )" 4
.IX Item "$ua = LWP::RobotUA->new( %options )"
.PD 0
.ie n .IP "$ua = LWP::RobotUA\->new( $agent, $from )" 4
.el .IP "\f(CW$ua\fR = LWP::RobotUA\->new( \f(CW$agent\fR, \f(CW$from\fR )" 4
.IX Item "$ua = LWP::RobotUA->new( $agent, $from )"
.ie n .IP "$ua = LWP::RobotUA\->new( $agent, $from, $rulez )" 4
.el .IP "\f(CW$ua\fR = LWP::RobotUA\->new( \f(CW$agent\fR, \f(CW$from\fR, \f(CW$rules\fR )" 4
.IX Item "$ua = LWP::RobotUA->new( $agent, $from, $rulez )"
.PD
Da LWP::UserAgent options \f(CW\*(C`agent\*(C'\fR n' \f(CW\*(C`from\*(C'\fR is mandatory.  The
options \f(CW\*(C`delay\*(C'\fR, \f(CW\*(C`use_sleep\*(C'\fR n' \f(CW\*(C`rules\*(C'\fR initialize attributes
private ta tha RobotUA.  If \f(CW\*(C`rules\*(C'\fR is not provided, then
\&\f(CW\*(C`WWW::RobotRules\*(C'\fR is instantiated providin a internal database of
\&\fIrobots.txt\fR.
.Sp
It be also possible ta just pass tha value of \f(CW\*(C`agent\*(C'\fR, \f(CW\*(C`from\*(C'\fR and
optionally \f(CW\*(C`rules\*(C'\fR as plain positionizzle arguments.
.ie n .IP "$ua\->delay" 4
.el .IP "\f(CW$ua\fR\->delay" 4
.IX Item "$ua->delay"
.PD 0
.ie n .IP "$ua\->delay( $minutes )" 4
.el .IP "\f(CW$ua\fR\->delay( \f(CW$minutes\fR )" 4
.IX Item "$ua->delay( $minutes )"
.PD
Get/set tha minimum delay between requests ta tha same server, in
\&\fIminutes\fR.  Da default is 1 minute.  Note dat dis number don't
have ta be a integer; fo' example, dis sets tha delay ta 10 seconds:
.Sp
.Vb 1
\&    $ua\->delay(10/60);
.Ve
.ie n .IP "$ua\->use_sleep" 4
.el .IP "\f(CW$ua\fR\->use_sleep" 4
.IX Item "$ua->use_sleep"
.PD 0
.ie n .IP "$ua\->use_sleep( $boolean )" 4
.el .IP "\f(CW$ua\fR\->use_sleep( \f(CW$boolean\fR )" 4
.IX Item "$ua->use_sleep( $boolean )"
.PD
Get/set a value indicatin whether tha \s-1UA\s0 should \fIsleep()\fR if requests
arrive too fast, defined as \f(CW$ua\fR\->delay minutes not passed since
last request ta tha given server n' shit.  Da default is \s-1TRUE. \s0 If dis value is
\&\s-1FALSE\s0 then a internal \s-1SERVICE_UNAVAILABLE\s0 response is ghon be generated.
It gonna git a Retry-Afta header dat indicates when it is \s-1OK\s0 to
send another request ta dis server.
.ie n .IP "$ua\->rules" 4
.el .IP "\f(CW$ua\fR\->rules" 4
.IX Item "$ua->rules"
.PD 0
.ie n .IP "$ua\->rules( $rulez )" 4
.el .IP "\f(CW$ua\fR\->rules( \f(CW$rules\fR )" 4
.IX Item "$ua->rules( $rulez )"
.PD
Set/get which \fIWWW::RobotRules\fR object ta use.
.ie n .IP "$ua\->no_visits( $netloc )" 4
.el .IP "\f(CW$ua\fR\->no_visits( \f(CW$netloc\fR )" 4
.IX Item "$ua->no_visits( $netloc )"
Returns tha number of documents fetched from dis server host. Yeah I
know, dis method should probably done been named \fInum_visits()\fR or
suttin' like dis shit. :\-(
.ie n .IP "$ua\->host_wait( $netloc )" 4
.el .IP "\f(CW$ua\fR\->host_wait( \f(CW$netloc\fR )" 4
.IX Item "$ua->host_wait( $netloc )"
Returns tha number of \fIseconds\fR (from now) you must wait before you can
make a freshly smoked up request ta dis host.
.ie n .IP "$ua\->as_string" 4
.el .IP "\f(CW$ua\fR\->as_string" 4
.IX Item "$ua->as_string"
Returns a strang dat raps bout tha state of tha \s-1UA.\s0
Mainly useful fo' debugging.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::UserAgent, WWW::RobotRules
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2004 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
