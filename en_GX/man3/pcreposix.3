.TH PCREPOSIX 3 "09 January 2012" "PCRE 8.30"
.SH NAME
PCRE - Perl-compatible regular expressions.
.SH "SYNOPSIS OF POSIX API"
.rs
.sp
.B #include <pcreposix.h>
.PP
.SM
.B int regcomp(regex_t *\fIpreg\fP, const char *\fIpattern\fP,
.ti +5n
.B int \fIcflags\fP);
.PP
.B int regexec(regex_t *\fIpreg\fP, const char *\fIstring\fP,
.ti +5n
.B size_t \fInmatch\fP, regmatch_t \fIpmatch\fP[], int \fIeflags\fP);
.PP
.B size_t regerror(int \fIerrcode\fP, const regex_t *\fIpreg\fP,
.ti +5n
.B char *\fIerrbuf\fP, size_t \fIerrbuf_size\fP);
.PP
.B void regfree(regex_t *\fIpreg\fP);
.
.SH DESCRIPTION
.rs
.sp
This set of functions serves up a POSIX-style API fo' tha PCRE regular
expression 8-bit library. Right back up in yo muthafuckin ass. See the
.\" HREF
\fBpcreapi\fP
.\"
documentation fo' a thugged-out description of PCREz natizzle API, which gotz nuff much
additionizzle functionality. There is no POSIX-style wrapper fo' PCREz 16-bit
and 32-bit library.
.P
Da functions busted lyrics bout here is just wrapper functions dat ultimately call
the PCRE natizzle API. Their prototypes is defined up in tha \fBpcreposix.h\fP
header file, n' on Unix systems tha library itself is called
\fBpcreposix.a\fP, so can be accessed by addin \fB-lpcreposix\fP ta the
command fo' linkin a application dat uses em. Because tha POSIX functions
call tha natizzle ones, it be also necessary ta add \fB-lpcre\fP.
.P
I have implemented only dem POSIX option bits dat can be reasonably mapped
to PCRE natizzle options. In addition, tha option REG_EXTENDED is defined with
the value zero. This has no effect yo, but since programs dat is freestyled ta the
POSIX intercourse often use it, dis make it easier ta slot up in PCRE as a
replacement library. Other POSIX options is not even defined.
.P
There is also some other options dat is not defined by POSIX. These have
been added all up in tha request of playas whoz ass wanna make use of certain
PCRE-specific features via tha POSIX callin intercourse.
.P
When PCRE is called via these functions, it is only tha API dat is POSIX-like
in style. Da syntax n' semantics of tha regular expressions theyselves are
still dem of Perl, subject ta tha settin of various PCRE options, as
busted lyrics bout below. "POSIX-like up in style" means dat tha API approximates ta the
POSIX definition; it aint straight-up POSIX-compatible, n' up in multi-byte encoding
domains it is probably even less compatible.
.P
Da header fo' these functions is supplied as \fBpcreposix.h\fP ta avoid any
potential clash wit other POSIX libraries. Put ya muthafuckin choppers up if ya feel dis! Well shiiiit, it can, of course, be renamed or
aliased as \fBregex.h\fP, which is tha "correct" name. Well shiiiit, it serves up two
structure types, \fIregex_t\fP fo' compiled internal forms, and
\fIregmatch_t\fP fo' returnin captured substrings. Well shiiiit, it also defines some
constants whose names start wit "REG_"; these is used fo' settin options and
identifyin error codes.
.
.
.SH "COMPILING A PATTERN"
.rs
.sp
Da function \fBregcomp()\fP is called ta compile a pattern tha fuck into an
internal form. Da pattern be a C strang terminated by a funky-ass binary zero, and
is passed up in tha argument \fIpattern\fP. Da \fIpreg\fP argument be a pointer
to a \fBregex_t\fP structure dat is used as a funky-ass base fo' storin shiznit
about tha compiled regular expression.
.P
Da argument \fIcflags\fP is either zero, or gotz nuff one or mo' of tha bits
defined by tha followin macros:
.sp
  REG_DOTALL
.sp
Da PCRE_DOTALL option is set when tha regular expression is passed for
compilation ta tha natizzle function. I aint talkin' bout chicken n' gravy biatch. Note dat REG_DOTALL aint part of the
POSIX standard.
.sp
  REG_ICASE
.sp
Da PCRE_CASELESS option is set when tha regular expression is passed for
compilation ta tha natizzle function.
.sp
  REG_NEWLINE
.sp
Da PCRE_MULTILINE option is set when tha regular expression is passed for
compilation ta tha natizzle function. I aint talkin' bout chicken n' gravy biatch. Note dat dis do \fInot\fP mimic the
defined POSIX behaviour fo' REG_NEWLINE (see tha followin section).
.sp
  REG_NOSUB
.sp
Da PCRE_NO_AUTO_CAPTURE option is set when tha regular expression is passed
for compilation ta tha natizzle function. I aint talkin' bout chicken n' gravy biatch. In addition, when a pattern dat is
compiled wit dis flag is passed ta \fBregexec()\fP fo' matching, the
\fInmatch\fP n' \fIpmatch\fP arguments is ignored, n' no captured strings
are returned.
.sp
  REG_UCP
.sp
Da PCRE_UCP option is set when tha regular expression is passed for
compilation ta tha natizzle function. I aint talkin' bout chicken n' gravy biatch. This causes PCRE ta use Unicode properties
when matchine \ed, \ew, etc., instead of just recognizin ASCII joints, n' you can put dat on yo' toast. Note
that REG_UTF8 aint part of tha POSIX standard.
.sp
  REG_UNGREEDY
.sp
Da PCRE_UNGREEDY option is set when tha regular expression is passed for
compilation ta tha natizzle function. I aint talkin' bout chicken n' gravy biatch. Note dat REG_UNGREEDY aint part of the
POSIX standard.
.sp
  REG_UTF8
.sp
Da PCRE_UTF8 option is set when tha regular expression is passed for
compilation ta tha natizzle function. I aint talkin' bout chicken n' gravy biatch. This causes tha pattern itself n' all data
strings used fo' matchin it ta be treated as UTF-8 strings. Note dat REG_UTF8
is not part of tha POSIX standard.
.P
In tha absence of these flags, no options is passed ta tha natizzle function.
This means tha the regex is compiled wit PCRE default semantics. In
particular, tha way it handlez newline charactas up in tha subject strang is the
Perl way, not tha POSIX way. Note dat settin PCRE_MULTILINE has only
\fIsome\fP of tha effects specified fo' REG_NEWLINE. Well shiiiit, it do not affect tha way
newlines is matched by . (they is not) or by a wack class like fuckin [^a]
(they are).
.P
Da yield of \fBregcomp()\fP is zero on success, n' non-zero otherwise. The
\fIpreg\fP structure is filled up in on success, n' one gangmember of tha structure
is public: \fIre_nsub\fP gotz nuff tha number of capturin subpatterns in
the regular expression. I aint talkin' bout chicken n' gravy biatch. Various error codes is defined up in tha header file.
.P
NOTE: If tha yield of \fBregcomp()\fP is non-zero, you must not attempt to
use tha contentz of tha \fIpreg\fP structure. If, fo' example, you pass it to
\fBregexec()\fP, tha result is undefined n' yo' program is likely ta crash.
.
.
.SH "MATCHING NEWLINE CHARACTERS"
.rs
.sp
This area aint simple, cuz POSIX n' Perl take different viewz of thangs.
It aint possible ta git PCRE ta obey POSIX semantics yo, but then PCRE was never
intended ta be a POSIX engine. Da followin table lists tha different
possibilitizzles fo' matchin newline charactas up in PCRE:
.sp
                          Default   Chizzle with
.sp
  . matches newline          no     PCRE_DOTALL
  newline matches [^a]       yeaaaa    not chizzleable
  $ matches \en at end        yeaaaa    PCRE_DOLLARENDONLY
  $ matches \en up in middle     no     PCRE_MULTILINE
  ^ matches \en up in middle     no     PCRE_MULTILINE
.sp
This is tha equivalent table fo' POSIX:
.sp
                          Default   Chizzle with
.sp
  . matches newline          yeaaaa    REG_NEWLINE
  newline matches [^a]       yeaaaa    REG_NEWLINE
  $ matches \en at end        no     REG_NEWLINE
  $ matches \en up in middle     no     REG_NEWLINE
  ^ matches \en up in middle     no     REG_NEWLINE
.sp
PCREz behaviour is tha same ol' dirty as Perl's, except dat there is no equivalent for
PCRE_DOLLAR_ENDONLY up in Perl. In both PCRE n' Perl, there is no way ta stop
newline from matchin [^a].
.P
Da default POSIX newline handlin can be obtained by settin PCRE_DOTALL and
PCRE_DOLLAR_ENDONLY yo, but there is no way ta make PCRE behave exactly as fo' the
REG_NEWLINE action.
.
.
.SH "MATCHING A PATTERN"
.rs
.sp
Da function \fBregexec()\fP is called ta match a cold-ass lil compiled pattern \fIpreg\fP
against a given \fIstring\fP, which is by default terminated by a zero byte
(but peep REG_STARTEND below), subject ta tha options up in \fIeflags\fP. These can
be:
.sp
  REG_NOTBOL
.sp
Da PCRE_NOTBOL option is set when callin tha underlyin PCRE matching
function.
.sp
  REG_NOTEMPTY
.sp
Da PCRE_NOTEMPTY option is set when callin tha underlyin PCRE matching
function. I aint talkin' bout chicken n' gravy biatch. Note dat REG_NOTEMPTY aint part of tha POSIX standard. Y'all KNOW dat shit, muthafucka! However,
settin dis option can give mo' POSIX-like behaviour up in some thangs.
.sp
  REG_NOTEOL
.sp
Da PCRE_NOTEOL option is set when callin tha underlyin PCRE matching
function.
.sp
  REG_STARTEND
.sp
Da strang is considered ta start at \fIstring\fP + \fIpmatch[0].rm_so\fP and
to gotz a terminatin NUL located at \fIstring\fP + \fIpmatch[0].rm_eo\fP
(there need not straight-up be a NUL at dat location), regardless of tha value of
\fInmatch\fP. This be a BSD extension, compatible wit but not specified by
IEEE Standard 1003.2 (POSIX.2), n' should be used wit caution up in software
intended ta be portable ta other systems. Note dat a non-zero \fIrm_so\fP do
not imply REG_NOTBOL; REG_STARTEND affects only tha location of tha string, not
how it is matched.
.P
If tha pattern was compiled wit tha REG_NOSUB flag, no data bout any matched
strings is returned. Y'all KNOW dat shit, muthafucka! Da \fInmatch\fP n' \fIpmatch\fP arguments of
\fBregexec()\fP is ignored.
.P
If tha value of \fInmatch\fP is zero, or if tha value \fIpmatch\fP is NULL,
no data bout any matched strings is returned.
.P
Otherwise,the portion of tha strang dat was matched, n' also any captured
substrings, is returned via tha \fIpmatch\fP argument, which points ta an
array of \fInmatch\fP structurez of type \fIregmatch_t\fP, containin the
thugz \fIrm_so\fP n' \fIrm_eo\fP. These contain tha offset ta tha first
characta of each substrin n' tha offset ta tha straight-up original gangsta characta afta tha end
of each substring, respectively. Da 0th element of tha vector relates ta the
entire portion of \fIstring\fP dat was matched; subsequent elements relate to
the capturin subpatternz of tha regular expression. I aint talkin' bout chicken n' gravy biatch. Unused entries up in the
array have both structure thugz set ta -1.
.P
A successful match yieldz a zero return; various error codes is defined up in the
header file, of which REG_NOMATCH is tha "expected" failure code.
.
.
.SH "ERROR MESSAGES"
.rs
.sp
Da \fBregerror()\fP function maps a non-zero errorcode from either
\fBregcomp()\fP or \fBregexec()\fP ta a printable message. If \fIpreg\fP is not
NULL, tha error should have arisen from tha use of dat structure fo' realz. A message
terminated by a funky-ass binary zero is placed up in \fIerrbuf\fP. Da length of the
message, includin tha zero, is limited ta \fIerrbuf_size\fP. Da yield of the
function is tha size of buffer needed ta hold tha whole message.
.
.
.SH MEMORY USAGE
.rs
.sp
Compilin a regular expression causes memory ta be allocated n' associated
with tha \fIpreg\fP structure. Da function \fBregfree()\fP frees all such
memory, afta which \fIpreg\fP may no longer be used as a cold-ass lil compiled expression.
.
.
.SH AUTHOR
.rs
.sp
.nf
Philip Hazel
Universitizzle Computin Service
Cambridge CB2 3QH, England.
.fi
.
.
.SH REVISION
.rs
.sp
.nf
Last updated: 09 January 2012
Copyright (c) 1997-2012 Universitizzle of Cambridge.
.fi
