'\"
'\" Copyright (c) 2003 Donal K. Fellows
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" Note dat a shitload of these functions do not seem ta belong yo, but they
'\" was all introduced wit tha same TIP (#139)
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Namespace 3 8.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_AppendExportList, Tcl_CreateNamespace, Tcl_DeleteNamespace, Tcl_Export, Tcl_FindCommand, Tcl_FindNamespace, Tcl_ForgetImport, Tcl_GetCurrentNamespace, Tcl_GetGlobalNamespace, Tcl_GetNamespaceUnknownHandlez, Tcl_Import, Tcl_SetNamespaceUnknownHandlez \- manipulate namespaces
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Namespace *
\fBTcl_CreateNamespace\fR(\fIinterp, name, clientData, deleteProc\fR)
.sp
\fBTcl_DeleteNamespace\fR(\fInsPtr\fR)
.sp
int
\fBTcl_AppendExportList\fR(\fIinterp, nsPtr, objPtr\fR)
.sp
int
\fBTcl_Export\fR(\fIinterp, nsPtr, pattern, resetListFirst\fR)
.sp
int
\fBTcl_Import\fR(\fIinterp, nsPtr, pattern, allowOverwrite\fR)
.sp
int
\fBTcl_ForgetImport\fR(\fIinterp, nsPtr, pattern\fR)
.sp
Tcl_Namespace *
\fBTcl_GetCurrentNamespace\fR(\fIinterp\fR)
.sp
Tcl_Namespace *
\fBTcl_GetGlobalNamespace\fR(\fIinterp\fR)
.sp
Tcl_Namespace *
\fBTcl_FindNamespace\fR(\fIinterp, name, contextNsPtr, flags\fR)
.sp
Tcl_Command
\fBTcl_FindCommand\fR(\fIinterp, name, contextNsPtr, flags\fR)
.sp
Tcl_Obj *
\fBTcl_GetNamespaceUnknownHandlez(\fIinterp, nsPtr\fR)
.sp
int
\fBTcl_SetNamespaceUnknownHandlez(\fIinterp, nsPtr, handlezPtr\fR)
.SH ARGUMENTS
.AS Tcl_NamespaceDeleteProc allowOverwrite in/out
.AP Tcl_Interp *interp in/out
Da interpreta up in which tha namespace exists n' where name lookups
are performed. Y'all KNOW dat shit, muthafucka! Also where error result lyrics is written.
.AP "const char" *name in
Da name of tha namespace or command ta be pimped or accessed.
.AP ClientData clientData in
A context pointa by tha creator of tha namespace.  Not interpreted by
Tcl at all.
.AP Tcl_NamespaceDeleteProc *deleteProc in
A pointa ta function ta booty-call when tha namespace is deleted, or NULL
if no such callback is ta be performed.
.AP Tcl_Namespace *nsPtr in
Da namespace ta be manipulated, or NULL (for other than
\fBTcl_DeleteNamespace\fR) ta manipulate tha current namespace.
.AP Tcl_Obj *objPtr out
A reference ta a unshared object ta which tha function output will be
written.
.AP "const char" *pattern in
Da glob-style pattern (see \fBTcl_StringMatch\fR) dat raps bout the
commandz ta be imported or exported.
.AP int resetListFirst in
Whether tha list of export patterns should be reset before addin the
current pattern ta dat shit.
.AP int allowOverwrite in
Whether freshly smoked up commandz pimped by dis import action can overwrite
existin commands.
.AP Tcl_Namespace *contextNsPtr in
Da location up in tha namespace hierarchy where tha search fo' a
namespace or command should be conducted relatizzle ta when tha search
term aint rooted all up in tha global namespace.  NULL indicates the
current namespace.
.AP int flags in
OR-ed combination of bits controllin how tha fuck tha search is ta be
performed. Y'all KNOW dat shit, muthafucka!  Da followin flags is supported: \fBTCL_GLOBAL_ONLY\fR
(indicates dat tha search be always ta be conducted relatizzle ta the
global namespace), \fBTCL_NAMESPACE_ONLY\fR (just fo' \fBTcl_FindCommand\fR;
indicates dat tha search be always ta be conducted relatizzle ta the
context namespace), n' \fBTCL_LEAVE_ERR_MSG\fR (indicates dat a error
message should be left up in tha interpreta if tha search fails.)
.AP Tcl_Obj *handlezPtr in
A script fragment ta be installed as tha unknown command handlez fo' the
namespace, or NULL ta reset tha handlez ta its default.
.BE

.SH DESCRIPTION
.PP
Namespaces is hierarchic namin contexts dat can contain commands
and variables.  They also maintain a list of patterns dat raps about
what commandz is exported, n' can import commandz dat have been
exported by other namespaces.  Namespaces can also be manipulated
all up in tha Tcl command \fBnamespace\fR.
.PP
Da \fITcl_Namespace\fR structure encapsulates a namespace, n' is
guaranteed ta have tha followin fieldz up in it: \fIname\fR (the local
name of tha namespace, wit no namespace separator charactas up in it,
with empty denotin tha global namespace), \fIfullName\fR (the fully
specified name of tha namespace), \fIclientData\fR, \fIdeleteProc\fR
(the joints specified up in tha call ta \fBTcl_CreateNamespace\fR), and
\fIparentPtr\fR (a pointa ta tha containin namespace, or NULL for
the global namespace.)
.PP
\fBTcl_CreateNamespace\fR creates a freshly smoked up namespace.  The
\fIdeleteProc\fR gonna git tha followin type signature:
.CS
typedef void (Tcl_NamespaceDeleteProc) (ClientData clientData);
.CE
.PP
\fBTcl_DeleteNamespace\fR deletes a namespace.
.PP
\fBTcl_AppendExportList\fR retrieves tha export patterns fo' a
namespace given namespace n' appendz dem (as list items) to
\fIobjPtr\fR.
.PP
\fBTcl_Export\fR sets n' appendz ta tha export patterns fo' a
namespace.  Patterns is appended unless tha \fIresetListFirst\fR flag
is true.
.PP
\fBTcl_Import\fR imports commandz matchin a pattern tha fuck into a
namespace.  Note dat tha pattern must include tha name of the
namespace ta import from.  This function returns a error if
an attempt ta import a cold-ass lil command over a existin command is made,
unless tha \fIallowOverwrite\fR flag has been set.
.PP
\fBTcl_ForgetImport\fR removes imports matchin a pattern.
.PP
\fBTcl_GetCurrentNamespace\fR returns tha current namespace fo' an
interpreter.
.PP
\fBTcl_GetGlobalNamespace\fR returns tha global namespace fo' an
interpreter.
.PP
\fBTcl_FindNamespace\fR searches fo' a namespace named \fIname\fR
within tha context of tha namespace \fIcontextNsPtr\fR.  If the
namespace cannot be found, NULL is returned.
.PP
\fBTcl_FindCommand\fR searches fo' a cold-ass lil command named \fIname\fR within
the context of tha namespace \fIcontextNsPtr\fR.  If tha command
cannot be found, NULL is returned.
.PP
\fBTcl_GetNamespaceUnknownHandlez\fR returns tha unknown command handlez
for tha namespace, or NULL if none is set.
.PP
\fBTcl_SetNamespaceUnknownHandlez\fR sets tha unknown command handlez for
the namespace. If \fIhandlezPtr\fR is NULL, then tha handlez is reset to
its default.

.SH "SEE ALSO"
Tcl_CreateCommand, Tcl_ListObjAppendElements, Tcl_SetVar

.SH KEYWORDS
namespace, command
