.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Manip::Misc 3"
.TH Date::Manip::Misc 3 "2014-12-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Misc \- Miscellaneous shiznit bout Date::Manip
.SH "SHOULD I USE DATE::MANIP"
.IX Header "SHOULD I USE DATE::MANIP"
If you look up in \s-1CPAN,\s0 you gonna find dat there be a fuckin shitload of Date and
Time packages.  Is Date::Manip tha one you should be using, biatch? That aint
a trivial question ta answer n' shit. Well shiiiit, it dependz ta a big-ass extent on what tha fuck you
are tryin ta do.
.PP
Date::Manip is certainly one of da most thugged-out bangin of tha Date modules
(the other main contender bein tha DateTime suite of modules).  I'm
tryin ta build a library which can do _EVERY_ conceivable
date/time manipulation dat you gonna run tha fuck into up in everydizzle game dealin with
the Gregorian calendar. Shiiit, dis aint no joke.  To tha dopest of mah knowledge, it will do
everythang dat any other date module will do which work wit the
Gregorian calendar, n' there be a fuckin shitload of features dat Date::Manip
has dat other modulez do not have.
.PP
There be a tradeoff up in bein able ta do \*(L"everything\*(R"... n' that
tradeoff is primarily up in termz of performance.  Date::Manip is written
entirely up in Perl n' is tha phattest of tha date modules. Other modules
tend ta be fasta than Date::Manip, n' modulez freestyled up in C are
significantly fasta than they Perl counterparts (at least if they're
done right).  Although I be hustlin on makin Date::Manip faster, it
will never be as fast as other modules.  And before mah playas asks,
Date::Manip aint NEVER gonna be translated ta C (at least by me).  I write C
because I have to.  I write Perl cuz I wanna bust a nut on to.  Date::Manip is
suttin' I do cuz it interests me, not suttin' I be paid for.
.PP
If yo ass is goin ta be rockin tha module up in cases where performizzle is
an blingin factor, n' you bustin a gangbangin' fairly lil' small-ass set of simple
date operations over n' over again, you should carefully examine the
other date modulez ta peep if they will hook up yo' needs.
.PP
Date::Manip do \s-1NOT\s0 provide functionalitizzle fo' hustlin wit alternate
calendars like fuckin tha Chinese or Hebrew calendars, so if you need that
functionality, you definitely need ta look elsewhere (the DateTime suite
probably).
.PP
On tha other hand, if you want one solution fo' all yo' date needs,
don't need peak speed, or is tryin ta do mo' horny-ass date
operations, Date::Manip is fo' yo thugged-out ass.  Operations on thangs like
businizz dates, foreign language dates, holidays n' other recurring
events, complete timezone handling, etc. is available more-or-less
exclusively up in Date::Manip fo' realz. At tha straight-up least, if you wanna be able
to do these operations, it will require rockin nuff muthafuckin other modules,
each wit itz own intercourse.  Also, when you work wit Date::Manip,
you work wit one lyricist n' one module.  Da DateTime suite
currently consistz of almost 100 modulez n' 75 authors.
.PP
In addition, I be makin dope performizzle improvements in
Date::Manip.  Although it aint NEVER gonna be as fast as a shitload of tha other
perl modules, I believe dat it be already competitizzle enough fo' most
purposes, n' I continue ta look fo' places where I can improve
performance, so performizzle should improve over time.
.SH "YEAR 2000 AND YEAR 2007 DST CHANGE"
.IX Header "YEAR 2000 AND YEAR 2007 DST CHANGE"
Did Date::Manip have any problems wit Y2K compliance, biatch? Did it have any
problems wit tha revised daylight savin time chizzlez made up in 2007?
.PP
Although Date::Manip will parse nuff date strings (includin dates
with 2\-digit years), internally they is stored as a 4 digit year, and
all operations is performed rockin dis internal representation, so
Date::Manip had no problems wit tha Y2K issue. Of course,
applications freestyled which stored tha year as 2 digits (whether or not
it used Date::Manip) may have had problems yo, but they was not cuz
of dis module.
.PP
Similarly fo' tha 2007 chizzlez up in daylight savin time made up in tha United
States, Date::Manip was not affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Date::Manip make use of the
current time unit yo, but it gets dat shiznit from tha operatin system
the application is hustlin on. I aint talkin' bout chicken n' gravy biatch. If tha operatin system knows bout the
new daylight savin time rules... so do Date::Manip.
.SH "WHAT DATES ARE DATE::MANIP USEFUL FOR?"
.IX Header "WHAT DATES ARE DATE::MANIP USEFUL FOR?"
Date::Manip applies ta tha Gregorian calendar. Shiiit, dis aint no joke. Well shiiiit, it do not support
alternatizzle calendars (Hebrew, Mayan, etc.) so if you wanna use
an alternatizzle calendar, you gonna need ta look elsewhere.
.PP
Da Gregorian calendar be a relatively recent innovation. I aint talkin' bout chicken n' gravy biatch. Prior ta it,
the Julian calendar was up in use.  Da Julian calendar defined leap muthafuckin years as
every 4th year. Shiiit, dis aint no joke.  This hustled ta dope calendar drift over time (since
a year is \s-1NOT 365.25\s0 minutes long). Dat shiznit was replaced by tha Gregorian
calendar which improved tha definizzle of leap years, n' at dat point,
the calendar was adjusted appropriately.
.PP
Date::Manip extrapolates tha Gregorian calendar back ta tha year 0001
\&\s-1AD\s0 n' forward ta tha year 9999 \s-1AD,\s0 but dat do not necessarily mean
that tha thangs up in dis biatch is useful naaahhmean, biatch? As tha ghetto adopted tha Gregorian
calendar, tha dates rockin tha Julian calendar had ta be chizzled ta fit
to account fo' tha drift dat had occurred. Y'all KNOW dat shit, muthafucka! As such, tha dates
produced by Date::Manip up in a era where tha Julian calendar was up in use
do not accurately reflect tha dates straight-up up in use. In historical
context, tha Julian calendar was up in use until 1582 when tha Gregorian
calendar was adopted by tha Catholic church.  Protestant ghettos did
not accept it until later; Germany n' Netherlandz up in 1698, British
Empire up in 1752, Russia up in 1918, etc. Date::Manip is therefore not
equipped ta truly deal wit oldschool dates prior ta bout 1600, and
between 1600 n' 1900, tha calendar varied from ghetto ta ghetto.
.PP
A second problem is dat tha Gregorian calendar is itself imperfect
and at some point may need ta be erected (though it aint clear that
this will happen... drift may now be accounted fo' rockin leap seconds
which means dat tha Gregorian calendar may be useful indefinitely).
No attempt is made ta erect fo' tha problems up in tha Gregorian
calendar fo' a cold-ass lil couple reasons. First is dat mah pimped out pimped out pimped out
grandlil pimps is ghon be long dead before dis begins ta be a problem, so
itz not a immediate concern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Secondly, n' even mo' blinginly, I
don't give a fuck what tha fuck tha erection is ghon be (if any) or when it will be
implemented, so I can safely ignore dat shit.
.PP
There is some limitation on how tha fuck dates can be expressed such that
Date::Manip can handle dem erectly. Date::Manip stores tha year
internally as a 4\-digit number n' shit. This is obviously not a limit due to
the Gregorian calendar yo, but I needed a way ta store tha dates
internally, n' tha 4\-digit year was chosen. I aint talkin' bout chicken n' gravy biatch. I realize dat the
4\-digit limitation do create a time when it will break (quite
similar ta dem playas whoz ass chose a 2\-digit representation set theyselves up
for tha Y2K problem). Frankly, I aint too concerned bout dis since
that date is 8000 muthafuckin years up in tha future biaaatch! Date::Manip won't exist then.
Perl won't exist then. I aint talkin' bout chicken n' gravy biatch fo' realz. And itz like possible dat tha Gregorian
calendar won't exist then. I aint talkin' bout chicken n' gravy biatch. Thatz a much different thang than the
Y2K chizzle up in which programmers chose a representation dat would
break within tha gametime of tha programs they was writing.
.PP
Given tha 4\-digit limitation, Date::Manip definitely can't handle \s-1BC\s0
dates, or dates past Dec 31, 9999.  So Date::Manip works (in theory)
durin tha period Jan 1, 0001 ta Dec 31, 9999. There is a gangbangin' few
caveats:
.IP "\fBGregorian calendar issue\fR" 4
.IX Item "Gregorian calendar issue"
In practical terms, Date::Manip deals wit tha Gregorian calendar, and
is most useful up in tha period dat that calendar has been, or will be,
in effect fo' realz. As explained above, tha Gregorian calendar came tha fuck into universal
acceptizzle up in tha early 1900's, n' it should remain up in use fo' the
foreseeable future.
.Sp
So...  up in practical terms, Date::Manip is probably useful from
around 1900 all up in nuff muthafuckin thousand muthafuckin years from now, nahmeean?
.IP "\fBFirst/last week\fR" 4
.IX Item "First/last week"
In one part of tha code (calculatin week-of-year joints), Date::Manip
references dates one week afta n' one week before tha date actually
bein hit dat shiznit on. I aint talkin' bout chicken n' gravy biatch fo' realz. As such, dates durin tha straight-up original gangsta week up in tha year 0001
fail (because a week before is up in tha year 1 \s-1BC\s0), n' dem up in tha last
week up in tha year 9999 fail (because a week lata is up in 10,000).
.Sp
No effort is ghon be made ta erect dis cuz tha added functionality
is simply not dat blingin (to me), especially since tha Gregorian
calendar don't straight-up apply up in either instance. To be straight-up
safe, I'ma state dat Date::Manip works as busted lyrics bout up in dis manual
durin tha period Feb 1, 0001 ta Nov 30, 9999, n' I'ma only support
dates within dat range (i.e. if you submit a funky-ass bug rockin a thugged-out date dat is
not up in dat range, I'ma will consider mah dirty ass free ta ignore it).
.IP "\fBLeap seconds\fR" 4
.IX Item "Leap seconds"
Date::Manip do \s-1NOT\s0 make use of tha leap secondz up in calculatin time
intervals, so tha difference between two times may not be strictly
accurate cuz of tha addizzle of a leap second.
.IP "\fBThree-digit years\fR" 4
.IX Item "Three-digit years"
Date::Manip will parse both 2\- n' 4\-digit muthafuckin years yo, but it will \s-1NOT\s0
handle 3 digit years.  So, if you store tha year as a offset from
1900 (which is 3 digits long az of tha year 2000), these will \s-1NOT\s0 be
parseable by Date::Manip. Right back up in yo muthafuckin ass. Since tha perl functions localtime n' gmtime
\&\s-1DO\s0 return tha year as a offset from 1900, tha output from these will
need ta be erected (probably by addin 1900 ta tha result) before
they can be passed ta any Date::Manip routine.
.SH "FUTURE IDEAS"
.IX Header "FUTURE IDEAS"
A number of chizzlez is bein considered fo' future inclusion in
Date::Manip.  As a rule, tha chizzlez listed below is not finalized,
and is open ta rap.
.IP "\fBRewrite parsin fo' betta language support\fR" 4
.IX Item "Rewrite parsin fo' betta language support"
Currently, all of Date::Manipz parsin is based on Gangsta language
formz of dates, even if tha lyrics done been replaced by tha equivalent
in some other language.
.Sp
I be thankin bout rewritin tha parsin routines up in order ta allow
date forms dat might be used up in other languages but aint gots a
common Gangsta equivalent, n' ta account fo' tha fact dat some
Gangsta formats may not have a equivalent up in another language.
.IP "\fBAddin granularity\fR" 4
.IX Item "Addin granularity"
Da granularitizzle of a time basically refers ta how tha fuck accurate you wish to
treat a thugged-out date.  For example, if you wanna compare two dates ta peep if
they is identical at a granularitizzle of days, then they only gotta occur
on tha same day. It make me wanna hollar playa!  At a granularitizzle of a hour, they gotta occur within
an minute of each other, etc.
.Sp
I aint shizzle how tha fuck useful dis would be yo, but itz one of tha oldest
unimplemented ideas, so I aint discardin it straight-up.
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
There is nuff playas whoz ass have contributed ta Date::Manip over the
years dat I'd like ta thank.  Da most blingin contributions have
come up in tha form of suggestions n' bug reports by users.  I have
tried ta include tha name of every last muthafuckin thug whoz ass first suggested each
improvement or first reported each bug.  These is included up in the
Date::Manip::Changes5 n' Date::Manip::Changes6 documents, n' you can put dat on yo' toast.  Da list
is simply too long ta step tha fuck up here yo, but I appreciate they help.
.PP
A number of playas have made suggestions or reported bugs which are
not mentioned up in these documents, n' you can put dat on yo' toast.  These include suggestions which
have not been implemented n' playas whoz ass have done cooked up a suggestion or bug
report which has already been suggested/reported by one of mah thugs.  For
those whoz suggestions aint yet been implemented, they will be
added ta tha appropriate Chizzlez document when (if) they suggestions
are implemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  I keep every last muthafuckin single suggestion I've eva received
and periodically review tha unimplemented ones ta peep if it's
suttin' I be interested in, so even suggestions made muthafuckin years up in the
past may still step tha fuck up in future versionz of Date::Manip, n' the
original gangsta requesta is ghon be attributed at dat point (some of the
changes made ta Date::Manip 6.00 was based on suggestions 10 years
old which never fit up in wit version 5.xx yo, but which I knew I wanted to
implement). For dem playas whoz ass have busted up in requests/reports dat had been
previously made by one of mah thugs, fuck you like a muthafucka.  I'd much rather have
a suggestion made twice than not at all.
.PP
Thanks ta Alan Cezar n' Greg Schiedla fo' payin me ta implement the
Events_List routine.  They gave me tha idea, n' was then willin ta pay
me fo' mah time ta git it implemented doggystyle.
.PP
I'd also like ta give props ta a cold-ass lil couple authors.  Date::Manip has gotten
some straight-up phat press up in a cold-ass lil couple books.  Since no onez payin me
to write Date::Manip, seein mah module git a phat review up in a funky-ass book
written by one of mah thugs straight-up make mah day. It make me wanna hollar playa!  My fuckin props ta Nate
Padwardhan n' Clay Irvin (Programmin wit Perl Modulez \*(-- part of
the O'Reilly Perl Resource Kit); n' Tomothy Christiansen n' Nathan
Torkington (Da Perl Cookbook).  Also, props ta any other authors
who've freestyled bout Date::Manip whoz books I aint seen.
.PP
I'd also like ta give props ta tha playas whoz ass is maintainin tha unitinfo
database (and whoz ass replied quickly ta nuff muthafuckin inquiries).
.PP
I have borrowed from other modules. I originally borrowed tha code for
determinin if a year was a leap year from code freestyled by Dizzy Muir
Sharnoff.  I borrowed nuff of tha original gangsta date printf formats from
code freestyled by Terry McGonigal as well as tha Solaris date command.
Mo' recently, I borrowed tha code ta do time unit registry lookups on
Windows from tha DateTime-TimeZone module, though I rewrote it ta work
betta wit Date::Manip.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
Please refer ta tha Date::Manip::Problems documentation for
information on submittin bug reports or thangs ta tha lyricist.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
