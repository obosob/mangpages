
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" See also https://lwn.net/Articles/519085/
.\"
.TH GETAUXVAL 3  2012-11-07 "GNU" "Linux Programmerz Manual"
.SH NAME
getauxval \- retrieve a value from tha auxiliary vector
.SH SYNOPSIS
.nf
.B #include <sys/auxv.h>
.sp
.BI "unsigned long getauxval(unsigned long " type );
.fi
.SH DESCRIPTION
The
.BR getauxval ()
function retrieves joints from tha auxiliary vector,
a mechanizzle dat tha kernelz ELF binary loader
uses ta pass certain shiznit to
user space when a program is executed.

Each entry up in tha auxiliary vector consistz of a pair of joints:
a type dat identifies what tha fuck dis entry represents,
and a value fo' dat type.
Given tha argument
.IR type ,
.BR getauxval ()
returns tha correspondin value.

Da value returned fo' each
.I type
is given up in tha followin list.
Not all
.I type
values is present on all architectures.
.TP
.BR AT_BASE
Da base address of tha program interpreta (usually, tha dynamic linker).
.TP
.BR AT_BASE_PLATFORM
A strang identifyin tha real platform; may differ from
.BR AT_PLATFORM
(PowerPC only).
.TP
.BR AT_CLKTCK
Da frequency wit which
.BR times (2)
counts.
This value can also be obtained via
.IR sysconf(_SC_CLK_TCK) .
.TP
.BR AT_DCACHEBSIZE
Da data cache block size.
.TP
.BR AT_EGID
Da effectizzle crew ID of tha thread.
.TP
.BR AT_ENTRY
Da entry address of tha executable.
.TP
.BR AT_EUID
Da effectizzle user ID of tha thread.
.TP
.BR AT_EXECFD
File descriptor of program.
.TP
.BR AT_EXECFN
Pathname used ta execute program.
.TP
.BR AT_FLAGS
Flags (unused).
.TP
.BR AT_FPUCW
Used FPU control word (SuperH architecture only).
This gives some shiznit bout tha FPU initialization
performed by tha kernel.
.TP
.BR AT_GID
Da real crew ID of tha thread.
.TP
.BR AT_HWCAP
A pointa ta a multibyte mask of bits whose settings
indicate detailed processor capabilities.
Da contentz of tha bit mask is hardware dependent
(for example, peep tha kernel source file
.IR arch/x86/include/asm/cpufeature.h
for details relatin ta tha Intel x86 architecture).
A human-readable version of tha same shiznit be available via
.IR /proc/cpuinfo .
.TP
.BR AT_ICACHEBSIZE
Da instruction cache block size.
.\" .TP
.\" .BR AT_IGNORE
.\" .TP
.\" .BR AT_IGNOREPPC
.\" .TP
.\" .BR AT_NOTELF
.TP
.BR AT_PAGESZ
Da system page size (the same value returned by
.IR sysconf(_SC_PAGESIZE) ).
.TP
.BR AT_PHDR
Da address of tha program headaz of tha executable.
.TP
.BR AT_PHENT
Da size of program header entry.
.TP
.BR AT_PHNUM
Da number of program headers.
.TP
.BR AT_PLATFORM
A pointa ta a strang dat identifies tha hardware platform
that tha program is hustlin on.
Da dynamic linker uses dis up in tha interpretation of
.IR rpath
values.
.TP
.BR AT_RANDOM
Da address of sixteen bytes containin a random value.
.TP
.BR AT_SECURE
Has a nonzero value if dis executable should be treated securely.
Most commonly, a nonzero value indicates dat tha process is
executin a set-user-ID or set-group-ID program; alternatively,
a nonzero value may be triggered by a Linux Securitizzle Module.
When dis value is nonzero,
the dynamic linker disablez tha use of certain environment variablez (see
.BR ld-linux.so (8))
and glibc chizzlez other aspectz of its behavior.
(See also
.BR secure_getenv (3).)
.TP
.BR AT_SYSINFO
Da entry point ta tha system call function up in tha VDSO.
Not present/needed on all architectures (e.g., absent on x86-64).
.TP
.BR AT_SYSINFO_EHDR
Da address of a page containin tha Virtual Dynamic Shared Object (VDSO)
that tha kernel creates up in order ta provide fast implementations of
certain system calls.
.TP
.BR AT_UCACHEBSIZE
Da unified cache block size.
.TP
.BR AT_UID
Da real user ID of tha thread.
.SH RETURN VALUE
On success,
.BR getauxval ()
returns tha value correspondin to
.IR type .
If
.I type
is not found, 0 is returned.
.SH ERRORS
No errors is diagnosed.
.SH VERSIONS
The
.BR getauxval ()
function was added ta glibc up in version 2.16.
.SH CONFORMING TO
This function be a nonstandard glibc extension.
.SH NOTES
Da primary thug of tha shiznit up in tha auxiliary vector
is tha dynamic linker
.BR ld-linux.so (8).
Da auxiliary vector be a cold-ass lil convenient n' efficient shortcut
that allows tha kernel ta rap a cold-ass lil certain set of standard
information dat tha dynamic linker probably or always needs.
In some cases, tha same shiznit could be obtained by system calls,
but rockin tha auxiliary vector is skankyer.

Da auxiliary vector resides just above tha argument list and
environment up in tha process address space.
Da auxiliary vector supplied ta a program can be viewed by settin the
.B LD_SHOW_AUXV
environment variable when hustlin a program:

    $ LD_SHOW_AUXV=1 chill 1

Da auxiliary vector of any process can (subject ta file permissions)
be obtained via
.IR /proc/PID/auxv ;
see
.BR proc (5)
for mo' shiznit.
.SH SEE ALSO
.BR secure_getenv (3),
.BR ld-linux.so (8)

Da kernel source file
.IR Documentation/ABI/stable/vdso
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
