.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Scalar 3"
.TH IO::Scalar 3 "2005-02-10" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Scalar \- IO:: intercourse fo' reading/writin a scalar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Perform I/O on strings, rockin tha basic \s-1OO\s0 intercourse...
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My fuckin message:\en";
\&
\&    ### Open a handle on a string, n' append ta it:
\&    $SH = freshly smoked up IO::Scalar \e$data;
\&    $SH\->print("Hello");
\&    $SH\->print(", ghetto!\enBye now!\en");
\&    print "Da strang is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = freshly smoked up IO::Scalar \e$data;
\&    while (defined($_ = $SH\->getline)) {
\&        print "Got line: $_";
\&    }
\&    $SH\->close;
\&
\&    ### Open a handle on a string, n' slurp up in all tha lines:
\&    $SH = freshly smoked up IO::Scalar \e$data;
\&    print "All lines:\en", $SH\->getlines;
\&
\&    ### Git tha current posizzle (either of two ways):
\&    $pos = $SH\->getpos;
\&    $offset = $SH\->tell;
\&
\&    ### Set tha current posizzle (either of two ways):
\&    $SH\->setpos($pos);
\&    $SH\->seek($offset, 0);
\&
\&    ### Open a anonymous temporary scalar:
\&    $SH = freshly smoked up IO::Scalar;
\&    $SH\->print("Yo there!");
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### git at value
.Ve
.PP
Don't like \s-1OO\s0 fo' yo' I/O, biatch?  No problem.
Thanks ta tha magic of a invisible \fItie()\fR, tha followin now
works outta tha box, just as it do wit IO::Handle:
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My fuckin message:\en";
\&
\&    ### Open a handle on a string, n' append ta it:
\&    $SH = freshly smoked up IO::Scalar \e$data;
\&    print $SH "Hello";
\&    print $SH ", ghetto!\enBye now!\en";
\&    print "Da strang is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = freshly smoked up IO::Scalar \e$data;
\&    while (<$SH>) {
\&        print "Got line: $_";
\&    }
\&    close $SH;
\&
\&    ### Open a handle on a string, n' slurp up in all tha lines:
\&    $SH = freshly smoked up IO::Scalar \e$data;
\&    print "All lines:\en", <$SH>;
\&
\&    ### Git tha current posizzle (WARNING: requires 5.6):
\&    $offset = tell $SH;
\&
\&    ### Set tha current posizzle (WARNING: requires 5.6):
\&    seek $SH, $offset, 0;
\&
\&    ### Open a anonymous temporary scalar:
\&    $SH = freshly smoked up IO::Scalar;
\&    print $SH "Yo there!";
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### git at value
.Ve
.PP
And fo' you folks wit 1.x code up there: tha oldschool \fItie()\fR steez still works,
though dis is \fIunnecessary n' deprecated\fR:
.PP
.Vb 1
\&    use IO::Scalar;
\&
\&    ### Freestylin ta a scalar...
\&    mah $s;
\&    tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "Strin is now: $s\en"
\&
\&    ### Readin n' freestylin a anonymous scalar...
\&    tie *OUT, \*(AqIO::Scalar\*(Aq;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)\->seek(0,0);
\&    while (<OUT>) {
\&        print "Got line: ", $_;
\&    }
.Ve
.PP
Stringification works, too!
.PP
.Vb 4
\&    mah $SH = freshly smoked up IO::Scalar \e$data;
\&    print $SH "Yo muthafucka, ";
\&    print $SH "world!";
\&    print "I printed: $SH\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is part of tha IO::Stringy distribution;
see IO::Stringy fo' chizzle log n' general shiznit.
.PP
Da IO::Scalar class implements objects which behave just like
IO::Handle (or FileHandle) objects, except dat you may use them
to write ta (or read from) scalars.  These handlez are
automatically tiehandle'd (though please peep \*(L"\s-1WARNINGS\*(R"\s0
for shiznit relevant ta yo' Perl version).
.PP
Basically, this:
.PP
.Vb 4
\&    mah $s;
\&    $SH = freshly smoked up IO::Scalar \e$s;
\&    $SH\->print("Hel", "lo, ");         ### OO style
\&    $SH\->print("world!\en");            ### ditto
.Ve
.PP
Or this:
.PP
.Vb 4
\&    mah $s;
\&    $SH = tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "Hel", "lo, ";           ### non\-OO style
\&    print OUT "world!\en";              ### ditto
.Ve
.PP
Causes \f(CW$s\fR ta be set to:
.PP
.Vb 1
\&    "Yo muthafucka, ghetto!\en"
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "Construction"
.IX Subsection "Construction"
.IP "new [\s-1ARGS...\s0]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached scalar handle.
If any arguments is given, they busted ta \fIopen()\fR.
.IP "open [\s-1SCALARREF\s0]" 4
.IX Item "open [SCALARREF]"
\&\fIInstizzle method.\fR
Open tha scalar handle on a freshly smoked up scalar, pointed ta by \s-1SCALARREF.\s0
If no \s-1SCALARREF\s0 is given, a \*(L"private\*(R" scalar is pimped ta hold
the file data.
.Sp
Returns tha self object on success, undefined on error.
.IP "opened" 4
.IX Item "opened"
\&\fIInstizzle method.\fR
Is tha scalar handle opened on something?
.IP "close" 4
.IX Item "close"
\&\fIInstizzle method.\fR
Disassociate tha scalar handle from its underlyin scalar.
Done automatically on destroy.
.SS "Input n' output"
.IX Subsection "Input n' output"
.IP "flush" 4
.IX Item "flush"
\&\fIInstizzle method.\fR
No-op, provided fo' \s-1OO\s0 compatibility.
.IP "getc" 4
.IX Item "getc"
\&\fIInstizzle method.\fR
Return tha next character, or undef if none remain.
.IP "getline" 4
.IX Item "getline"
\&\fIInstizzle method.\fR
Return tha next line, or undef on end of string.
Can safely be called up in a array context.
Currently, lines is delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
\&\fIInstizzle method.\fR
Git all remainin lines.
It will \fIcroak()\fR if accidentally called up in a scalar context.
.IP "print \s-1ARGS...\s0" 4
.IX Item "print ARGS..."
\&\fIInstizzle method.\fR
Print \s-1ARGS\s0 ta tha underlyin scalar.
.Sp
\&\fBWarning:\fR dis continues ta always cause a seek ta tha end
of tha strin yo, but if you big-ass up \fIseek()\fRs n' \fItell()\fRs, it is
still less thuggy ta explicitly seek-to-end before subsequent \fIprint()\fRs.
.IP "read \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "read BUF, NBYTES, [OFFSET]"
\&\fIInstizzle method.\fR
Read some bytes from tha scalar.
Returns tha number of bytes straight-up read, 0 on end-of-file, undef on error.
.IP "write \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "write BUF, NBYTES, [OFFSET]"
\&\fIInstizzle method.\fR
Write some bytes ta tha scalar.
.IP "sysread \s-1BUF, LEN,\s0 [\s-1OFFSET\s0]" 4
.IX Item "sysread BUF, LEN, [OFFSET]"
\&\fIInstizzle method.\fR
Read some bytes from tha scalar.
Returns tha number of bytes straight-up read, 0 on end-of-file, undef on error.
.IP "syswrite \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "syswrite BUF, NBYTES, [OFFSET]"
\&\fIInstizzle method.\fR
Write some bytes ta tha scalar.
.SS "Seeking/tellin n' other attributes"
.IX Subsection "Seeking/tellin n' other attributes"
.IP "autoflush" 4
.IX Item "autoflush"
\&\fIInstizzle method.\fR
No-op, provided fo' \s-1OO\s0 compatibility.
.IP "binmode" 4
.IX Item "binmode"
\&\fIInstizzle method.\fR
No-op, provided fo' \s-1OO\s0 compatibility.
.IP "clearerr" 4
.IX Item "clearerr"
\&\fIInstizzle method.\fR  Clear tha error n' \s-1EOF\s0 flags.  A no-op.
.IP "eof" 4
.IX Item "eof"
\&\fIInstizzle method.\fR  Is we at end of file?
.IP "seek \s-1OFFSET, WHENCE\s0" 4
.IX Item "seek OFFSET, WHENCE"
\&\fIInstizzle method.\fR  Seek ta a given posizzle up in tha stream.
.IP "sysseek \s-1OFFSET, WHENCE\s0" 4
.IX Item "sysseek OFFSET, WHENCE"
\&\fIInstizzle method.\fR Identical ta \f(CW\*(C`seek OFFSET, WHENCE\*(C'\fR, \fIq.v.\fR
.IP "tell" 4
.IX Item "tell"
\&\fIInstizzle method.\fR
Return tha current posizzle up in tha stream, as a numeric offset.
.IP "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstizzle method.\fR
Set tha current position, rockin tha opaque value returned by \f(CW\*(C`getpos()\*(C'\fR.
.IP "getpos" 4
.IX Item "getpos"
\&\fIInstizzle method.\fR
Return tha current posizzle up in tha string, as a opaque object.
.IP "sref" 4
.IX Item "sref"
\&\fIInstizzle method.\fR
Return a reference ta tha underlyin scalar.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perlz \s-1TIEHANDLE\s0 spec was incomplete prior ta 5.005_57;
it was missin support fo' \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, n' \f(CW\*(C`eof()\*(C'\fR.
Attemptin ta use these functions wit a IO::Scalar aint gonna work
prior ta 5.005_57. IO::Scalar aint gonna have tha relevant methods
invoked; n' even worse, dis kind of bug can lie dormant fo' a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR),
and you peep suttin' like all dis bullshit...
.PP
.Vb 1
\&    attempt ta seek on unopened filehandle
.Ve
.PP
\&...then yo ass is probably tryin ta use one of these functions
on a IO::Scalar wit a oldschool Perl.  Da remedy is ta simply
use tha \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $SH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($SH,0,0);     ### WARNING: will only work on 5.005_57 n' beyond
.Ve
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR Scalar.pm,v 1.6 2005/02/10 21:21:53 dfs Exp $
.SH "AUTHORS"
.IX Header "AUTHORS"
.SS "Primary Maintainer"
.IX Subsection "Primary Maintainer"
Dizzy F. Right back up in yo muthafuckin ass. Skoll (\fIdfs@roaringpenguin.com\fR).
.SS "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.SS "Other contributors"
.IX Subsection "Other contributors"
Da full set of contributors always includes tha folks mentioned
in \*(L"\s-1CHANGE LOG\*(R"\s0 up in IO::Stringy.  But just tha same, special
thanks ta tha followin dudes fo' they invaluable contributions
(if I've forgotten or misspelled yo' name, please email me!):
.PP
\&\fIAndy Glew,\fR
for contributin \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggestin \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIDizzy Richter,\fR
for findin n' fixin tha bug up in \f(CW\*(C`PRINTF()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-usin \fIread()\fR n' \fIwrite()\fR implementations.
.PP
\&\fISlick Rick Jones,\fR
for his thugged-out lil' patches ta massively improve tha performizzle of \f(CW\*(C`getline()\*(C'\fR
and add \f(CW\*(C`sysread\*(C'\fR n' \f(CW\*(C`syswrite\*(C'\fR.
.PP
\&\fIB. K. Oxley (binkley),\fR
for stringification n' inheritizzle improvements,
and sundry phat ideas.
.PP
\&\fIDoug Wilson,\fR
for tha IO::Handle inheritizzle n' automatic tie-ing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::String, which is like similar but which was designed
more-recently n' wit a IO::Handle\-like intercourse up in mind,
so you could mix \s-1OO\-\s0 n' native-filehandle usage without rockin \fItied()\fR.
.PP
\&\fINote:\fR az of version 2.x, these classes all work like
their IO::Handle counterparts, so our crazy asses have comparable
functionalitizzle ta IO::String.
