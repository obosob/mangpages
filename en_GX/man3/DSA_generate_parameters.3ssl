.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DSA_generate_parametas 3"
.TH DSA_generate_parametas 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
DSA_generate_parametas \- generate DSA parameters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/dsa.h>
\&
\& DSA *DSA_generate_parameters(int bits, unsigned char *seed,
\&                int seed_len, int *counter_ret, unsigned long *h_ret,
\&                void (*callback)(int, int, void *), void *cb_arg);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIDSA_generate_parameters()\fR generates primes p n' q n' a generator g
for use up in tha \s-1DSA.\s0
.PP
\&\fBbits\fR is tha length of tha prime ta be generated; tha \s-1DSS\s0 allows a
maximum of 1024 bits.
.PP
If \fBseed\fR is \fB\s-1NULL\s0\fR or \fBseed_len\fR < 20, tha primes will be
generated at random. Otherwise, tha seed is used ta generate
them. If tha given seed do not yield a prime q, a freshly smoked up random
seed is chosen n' placed at \fBseed\fR.
.PP
\&\fIDSA_generate_parameters()\fR places tha iteration count in
*\fBcounter_ret\fR n' a cold-ass lil counta used fo' findin a generator in
*\fBh_ret\fR, unless these is \fB\s-1NULL\s0\fR.
.PP
A callback function may be used ta provide feedback bout tha progress
of tha key generation. I aint talkin' bout chicken n' gravy biatch. If \fBcallback\fR aint \fB\s-1NULL\s0\fR, it will be
called as bigs up:
.IP "\(bu" 4
When a cold-ass lil muthafucka fo' q is generated, \fBcallback(0, m++, cb_arg)\fR is called
(m is 0 fo' tha straight-up original gangsta muthafucka).
.IP "\(bu" 4
When a cold-ass lil muthafucka fo' q has passed a test by trial division,
\&\fBcallback(1, \-1, cb_arg)\fR is called.
While a cold-ass lil muthafucka fo' q is tested by Miller-Rabin primalitizzle tests,
\&\fBcallback(1, i, cb_arg)\fR is called up in tha outa loop
(once fo' each witnizz dat confirms dat tha muthafucka may be prime);
i is tha loop counta (startin at 0).
.IP "\(bu" 4
When a prime q has been found, \fBcallback(2, 0, cb_arg)\fR and
\&\fBcallback(3, 0, cb_arg)\fR is called.
.IP "\(bu" 4
Before a cold-ass lil muthafucka fo' p (other than tha first) is generated n' tested,
\&\fBcallback(0, counter, cb_arg)\fR is called.
.IP "\(bu" 4
When a cold-ass lil muthafucka fo' p has passed tha test by trial division,
\&\fBcallback(1, \-1, cb_arg)\fR is called.
While it is tested by tha Miller-Rabin primalitizzle test,
\&\fBcallback(1, i, cb_arg)\fR is called up in tha outa loop
(once fo' each witnizz dat confirms dat tha muthafucka may be prime).
i is tha loop counta (startin at 0).
.IP "\(bu" 4
When p has been found, \fBcallback(2, 1, cb_arg)\fR is called.
.IP "\(bu" 4
When tha generator has been found, \fBcallback(3, 1, cb_arg)\fR is called.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
\&\fIDSA_generate_parameters()\fR returns a pointa ta tha \s-1DSA\s0 structure, or
\&\fB\s-1NULL\s0\fR if tha parameta generation fails. Da error codes can be
obtained by \fIERR_get_error\fR\|(3).
.SH "BUGS"
.IX Header "BUGS"
Seed lengths > 20 is not supported.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdsa\fR\|(3), \fIERR_get_error\fR\|(3), \fIrand\fR\|(3),
\&\fIDSA_free\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIDSA_generate_parameters()\fR rocked up in SSLeay 0.8. Da \fBcb_arg\fR
argument was added up in SSLeay 0.9.0.
In versions up ta OpenSSL 0.9.4, \fBcallback(1, ...)\fR was called
in tha inner loop of tha Miller-Rabin test whenever it reached the
squarin step (the parametas ta \fBcallback\fR did not reveal how tha fuck many
witnesses had been tested); since OpenSSL 0.9.5, \fBcallback(1, ...)\fR
is called as up in \fIBN_is_prime\fR\|(3), i.e. once fo' each witness.
