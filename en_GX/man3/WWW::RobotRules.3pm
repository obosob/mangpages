.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::RobotRulez 3"
.TH WWW::RobotRulez 3 "2012-02-18" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::RobotRulez \- database of robots.txt\-derived permissions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use WWW::RobotRules;
\& mah $rulez = WWW::RobotRules\->new(\*(AqMOMspider/1.0\*(Aq);
\&
\& use LWP::Simple qw(get);
\&
\& {
\&   mah $url = "http://some.place/robots.txt";
\&   mah $robots_txt = git $url;
\&   $rules\->parse($url, $robots_txt) if defined $robots_txt;
\& }
\&
\& {
\&   mah $url = "http://some.other.place/robots.txt";
\&   mah $robots_txt = git $url;
\&   $rules\->parse($url, $robots_txt) if defined $robots_txt;
\& }
\&
\& # Now we can check if a URL is valid fo' dem servers
\& # whose "robots.txt" filez we\*(Aqve gotten n' parsed:
\& if($rules\->allowed($url)) {
\&     $c = git $url;
\&     ...
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module parses \fI/robots.txt\fR filez as specified in
\&\*(L"A Standard fo' Robot Exclusion\*(R", at
<http://www.robotstxt.org/wc/norobots.html>
Webmastas can use tha \fI/robots.txt\fR file ta forbid conforming
robots from accessin partz of they wizzy crib.
.PP
Da parsed filez is kept up in a WWW::RobotRulez object, n' dis object
provides methodz ta check if access ta a given \s-1URL\s0 is prohibited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
same WWW::RobotRulez object can be used fo' one or mo' parsed
\&\fI/robots.txt\fR filez on any number of hosts.
.PP
Da followin methodz is provided:
.ie n .IP "$rulez = WWW::RobotRules\->new($robot_name)" 4
.el .IP "\f(CW$rules\fR = WWW::RobotRules\->new($robot_name)" 4
.IX Item "$rulez = WWW::RobotRules->new($robot_name)"
This is tha constructor fo' WWW::RobotRulez objects, n' you can put dat on yo' toast.  Da first
argument given ta \fInew()\fR is tha name of tha robot.
.ie n .IP "$rules\->parse($robot_txt_url, $content, $fresh_until)" 4
.el .IP "\f(CW$rules\fR\->parse($robot_txt_url, \f(CW$content\fR, \f(CW$fresh_until\fR)" 4
.IX Item "$rules->parse($robot_txt_url, $content, $fresh_until)"
Da \fIparse()\fR method takes as arguments tha \s-1URL\s0 dat was used to
retrieve tha \fI/robots.txt\fR file, n' tha contentz of tha file.
.ie n .IP "$rules\->allowed($uri)" 4
.el .IP "\f(CW$rules\fR\->allowed($uri)" 4
.IX Item "$rules->allowed($uri)"
Returns \s-1TRUE\s0 if dis robot be allowed ta retrieve dis \s-1URL.\s0
.ie n .IP "$rules\->agent([$name])" 4
.el .IP "\f(CW$rules\fR\->agent([$name])" 4
.IX Item "$rules->agent([$name])"
Get/set tha agent name. \s-1NOTE:\s0 Changin tha agent name will clear tha robots.txt
rulez n' expire times outta tha cache.
.SH "ROBOTS.TXT"
.IX Header "ROBOTS.TXT"
Da format n' semantics of tha \*(L"/robots.txt\*(R" file is as bigs up
(this be a edited abstract of
<http://www.robotstxt.org/wc/norobots.html>):
.PP
Da file consistz of one or mo' recordz separated by one or more
blank lines. Each record gotz nuff linez of tha form
.PP
.Vb 1
\&  <field\-name>: <value>
.Ve
.PP
Da field name is case insensitive.  Text afta tha '#' characta on a
line is ignored durin parsing.  This is used fo' comments, n' you can put dat on yo' toast.  The
followin <field\-names> can be used:
.IP "User-Agent" 3
.IX Item "User-Agent"
Da value of dis field is tha name of tha robot tha record is
describin access policy for. Shiiit, dis aint no joke.  If mo' than one \fIUser-Agent\fR field is
present tha record raps bout a identical access policy fo' mo' than
one robot fo' realz. At least one field need ta be present per record. Y'all KNOW dat shit, muthafucka!  If the
value is '*', tha record raps bout tha default access policy fo' any
robot dat has not not matched any of tha other records.
.Sp
Da \fIUser-Agent\fR fieldz must occur before tha \fIDisallow\fR fields.  If a
record gotz nuff a \fIUser-Agent\fR field afta a \fIDisallow\fR field, that
constitutes a malformed record. Y'all KNOW dat shit, muthafucka!  This parser will assume dat a funky-ass blank
line should done been placed before dat \fIUser-Agent\fR field, n' will
break tha record tha fuck into two.  All tha fieldz before tha \fIUser-Agent\fR field
will constitute a record, n' tha \fIUser-Agent\fR field is ghon be tha first
field up in a freshly smoked up record.
.IP "Disallow" 3
.IX Item "Disallow"
Da value of dis field specifies a partial \s-1URL\s0 dat aint ta be
visited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This can be a gangbangin' full path, or a partial path; any \s-1URL\s0 that
starts wit dis value aint gonna be retrieved
.PP
Unrecognized recordz is ignored.
.SH "ROBOTS.TXT EXAMPLES"
.IX Header "ROBOTS.TXT EXAMPLES"
Da followin example \*(L"/robots.txt\*(R" file specifies dat no robots
should visit any \s-1URL\s0 startin wit \*(L"/cyberworld/map/\*(R" or \*(L"/tmp/\*(R":
.PP
.Vb 3
\&  User\-agent: *
\&  Disallow: /cyberworld/map/ # This be a infinite virtual URL space
\&  Disallow: /tmp/ # these will soon disappear
.Ve
.PP
This example \*(L"/robots.txt\*(R" file specifies dat no robots should visit
any \s-1URL\s0 startin wit \*(L"/cyberworld/map/\*(R", except tha robot called
\&\*(L"cybermapper\*(R":
.PP
.Vb 2
\&  User\-agent: *
\&  Disallow: /cyberworld/map/ # This be a infinite virtual URL space
\&
\&  # Cybermapper knows where ta bounce tha fuck out.
\&  User\-agent: cybermapper
\&  Disallow:
.Ve
.PP
This example indicates dat no robots should visit dis joint further:
.PP
.Vb 3
\&  # go away
\&  User\-agent: *
\&  Disallow: /
.Ve
.PP
This be a example of a malformed robots.txt file.
.PP
.Vb 10
\&  # robots.txt fo' ancientcastle.example.com
\&  # I\*(Aqve locked mah dirty ass away.
\&  User\-agent: *
\&  Disallow: /
\&  # Da castle is yo' home now, so you can go anywhere you like.
\&  User\-agent: Belle
\&  Disallow: /west\-wing/ # except tha westside wing!
\&  # It\*(Aqs phat ta be tha Prince...
\&  User\-agent: Beast
\&  Disallow:
.Ve
.PP
This file is missin tha required blank lines between records.
But fuck dat shiznit yo, tha word on tha street is dat tha intention is clear.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::RobotUA, WWW::RobotRules::AnyDBM_File
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 2
\&  Copyright 1995\-2009, Gisle Aas
\&  Copyright 1995, Martijn Koster
.Ve
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
