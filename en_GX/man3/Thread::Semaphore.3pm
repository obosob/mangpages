.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Thread::Semaphore 3pm"
.TH Thread::Semaphore 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Thread::Semaphore \- Thread\-safe semaphores
.SH "VERSION"
.IX Header "VERSION"
This document raps bout Thread::Semaphore version 2.12
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Thread::Semaphore;
\&    mah $s = Thread::Semaphore\->new();
\&    $s\->down();   # Also known as tha semaphore P operation.
\&    # Da guarded section is here
\&    $s\->up();     # Also known as tha semaphore V operation.
\&
\&    # Decrement tha semaphore only if it would immediately succeed.
\&    if ($s\->down_nb()) {
\&        # Da guarded section is here
\&        $s\->up();
\&    }
\&
\&    # Forcefully decrement tha semaphore even if its count goes below 0.
\&    $s\->down_force();
\&
\&    # Da default value fo' semaphore operations is 1
\&    mah $s = Thread::Semaphore\->new($initial_value);
\&    $s\->down($down_value);
\&    $s\->up($up_value);
\&    if ($s\->down_nb($down_value)) {
\&        ...
\&        $s\->up($up_value);
\&    }
\&    $s\->down_force($down_value);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Semaphores provide a mechanizzle ta regulate access ta resources.  Unlike
locks, semaphores aren't tied ta particular scalars, n' so may be used to
control access ta anythang you care ta use dem for.
.PP
Semaphores don't limit they joints ta zero n' one, so they can be used to
control access ta some resource dat there may be mo' than one of (e.g.,
filehandles).  Increment n' decrement amounts aren't fixed at one either,
so threadz can reserve or return multiple resources at once.
.SH "METHODS"
.IX Header "METHODS"
.IP "\->\fInew()\fR" 8
.IX Item "->new()"
.PD 0
.IP "\->new(\s-1NUMBER\s0)" 8
.IX Item "->new(NUMBER)"
.PD
\&\f(CW\*(C`new\*(C'\fR creates a freshly smoked up semaphore, n' initializes its count ta tha specified
number (which must be a integer).  If no number is specified, the
semaphorez count defaults ta 1.
.IP "\->\fIdown()\fR" 8
.IX Item "->down()"
.PD 0
.IP "\->down(\s-1NUMBER\s0)" 8
.IX Item "->down(NUMBER)"
.PD
Da \f(CW\*(C`down\*(C'\fR method decreases tha semaphorez count by tha specified number
(which must be a integer >= 1), or by one if no number is specified.
.Sp
If tha semaphorez count would drop below zero, dis method will block
until such time as tha semaphorez count is pimped outa than or equal ta the
amount you \f(CW\*(C`down\*(C'\fRin tha semaphorez count by.
.Sp
This is tha semaphore \*(L"P operation\*(R" (the name derives from tha Dutch
word \*(L"pak\*(R", which means \*(L"capture\*(R" \*(-- tha semaphore operations were
named by tha late Dijkstra, whoz ass was Dutch).
.IP "\->\fIdown_nb()\fR" 8
.IX Item "->down_nb()"
.PD 0
.IP "\->down_nb(\s-1NUMBER\s0)" 8
.IX Item "->down_nb(NUMBER)"
.PD
Da \f(CW\*(C`down_nb\*(C'\fR method attempts ta decrease tha semaphorez count by the
specified number (which must be a integer >= 1), or by one if no number
is specified.
.Sp
If tha semaphorez count would drop below zero, dis method will return
\&\fIfalse\fR, n' tha semaphorez count remains unchanged. Y'all KNOW dat shit, muthafucka!  Otherwise, the
semaphorez count is decremented n' dis method returns \fItrue\fR.
.IP "\->\fIdown_force()\fR" 8
.IX Item "->down_force()"
.PD 0
.IP "\->down_force(\s-1NUMBER\s0)" 8
.IX Item "->down_force(NUMBER)"
.PD
Da \f(CW\*(C`down_force\*(C'\fR method decreases tha semaphorez count by tha specified
number (which must be a integer >= 1), or by one if no number is specified.
This method do not block, n' may cause tha semaphorez count ta drop
below zero.
.IP "\->\fIup()\fR" 8
.IX Item "->up()"
.PD 0
.IP "\->up(\s-1NUMBER\s0)" 8
.IX Item "->up(NUMBER)"
.PD
Da \f(CW\*(C`up\*(C'\fR method increases tha semaphorez count by tha number specified
(which must be a integer >= 1), or by one if no number is specified.
.Sp
This will unblock any thread dat is blocked tryin ta \f(CW\*(C`down\*(C'\fR the
semaphore if tha \f(CW\*(C`up\*(C'\fR raises tha semaphorez count above tha amount that
the \f(CW\*(C`down\*(C'\fR is tryin ta decrement it by.  For example, if three threads
are blocked tryin ta \f(CW\*(C`down\*(C'\fR a semaphore by one, n' another thread \f(CW\*(C`up\*(C'\fRs
the semaphore by two, then two of tha blocked threadz (which two is
indeterminate) will become unblocked.
.Sp
This is tha semaphore \*(L"V operation\*(R" (the name derives from tha Dutch
word \*(L"vrij\*(R", which means \*(L"release\*(R").
.SH "NOTES"
.IX Header "NOTES"
Semaphores pimped by Thread::Semaphore can be used up in both threaded and
non-threaded applications.  This allows you ta write modulez n' packages
that potentially make use of semaphores, n' dat will function up in either
environment.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Thread::Semaphore Rap Forum on \s-1CPAN:
\&\s0<http://www.cpanforum.com/dist/Thread\-Semaphore>
.PP
threads, threads::shared
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Jeremy D yo. Hedden, <jdhedden\ \s-1AT\s0\ cpan\ \s-1DOT\s0\ org>
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
