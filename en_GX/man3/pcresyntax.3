.TH PCRESYNTAX 3 "26 April 2013" "PCRE 8.33"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH "PCRE REGULAR EXPRESSION SYNTAX SUMMARY"
.rs
.sp
Da full syntax n' semantics of tha regular expressions dat is supported by
PCRE is busted lyrics bout up in the
.\" HREF
\fBpcrepattern\fP
.\"
documentation. I aint talkin' bout chicken n' gravy biatch. This document gotz nuff a quick-reference summary of tha syntax.
.
.
.SH "QUOTING"
.rs
.sp
  \ex         where x is non-alphanumeric be a literal x
  \eQ...\eE    treat enclosed charactas as literal
.
.
.SH "CHARACTERS"
.rs
.sp
  \ea         alarm, dat is, tha BEL characta (hex 07)
  \ecx        "control-x", where x be any ASCII character
  \ee         escape (hex 1B)
  \ef         form feed (hex 0C)
  \en         newline (hex 0A)
  \er         carriage return (hex 0D)
  \et         tab (hex 09)
  \eddd       characta wit octal code ddd, or backreference
  \exhh       characta wit hex code hh
  \ex{hhh..}  characta wit hex code hhh..
.
.
.SH "CHARACTER TYPES"
.rs
.sp
  .          any characta except newline;
               up in dotall mode, any characta whatsoever
  \eC         one data unit, even up in UTF mode (best avoided)
  \ed         a thugged-out decimal digit
  \eD         a cold-ass lil characta dat aint a thugged-out decimal digit
  \eh         a horizontal white space character
  \eH         a cold-ass lil characta dat aint a horizontal white space character
  \eN         a cold-ass lil characta dat aint a newline
  \ep{\fIxx\fP}     a cold-ass lil characta wit tha \fIxx\fP property
  \eP{\fIxx\fP}     a cold-ass lil characta without tha \fIxx\fP property
  \eR         a newline sequence
  \es         a white space character
  \eS         a cold-ass lil characta dat aint a white space character
  \ev         a vertical white space character
  \eV         a cold-ass lil characta dat aint a vertical white space character
  \ew         a "word" character
  \eW         a "non-word" character
  \eX         a Unicode extended grapheme cluster
.sp
In PCRE, by default, \ed, \eD, \es, \eS, \ew, n' \eW recognize only ASCII
characters, even up in a UTF mode. But fuck dat shiznit yo, tha word on tha street is dat dis can be chizzled by settin the
PCRE_UCP option.
.
.
.SH "GENERAL CATEGORY PROPERTIES FOR \ep n' \eP"
.rs
.sp
  C          Other
  Cc         Control
  Cf         Format
  Cn         Unassigned
  Co         Private use
  Cs         Surrogate
.sp
  L          Letter
  Ll         Lower case letter
  Lm         Modifier letter
  Lo         Other letter
  Lt         Title case letter
  Lu         Upper case letter
  L&         Ll, Lu, or Lt
.sp
  M          Mark
  Mc         Spacin mark
  Me         Enclosin mark
  Mn         Non-spacin mark
.sp
  N          Number
  Nd         Decimal number
  Nl         Letta number
  No         Other number
.sp
  P          Punctuation
  Pc         Connector punctuation
  Pd         Dash punctuation
  Pe         Close punctuation
  Pf         Final punctuation
  Pi         Initial punctuation
  Po         Other punctuation
  Ps         Open punctuation
.sp
  S          Symbol
  Sc         Currency symbol
  Sk         Modifier symbol
  Sm         Mathematical symbol
  So         Other symbol
.sp
  Z          Separator
  Zl         Line separator
  Zp         Paragraph separator
  Zs         Space separator
.
.
.SH "PCRE SPECIAL CATEGORY PROPERTIES FOR \ep n' \eP"
.rs
.sp
  Xan        Alphanumeric: union of propertizzles L n' N
  Xps        POSIX space: property Z or tab, NL, VT, FF, CR
  Xsp        Perl space: property Z or tab, NL, FF, CR
  Xuc        Univerally-named character: one dat can be
               represented by a Universal Characta Name
  Xwd        Perl word: property Xan or underscore
.
.
.SH "SCRIPT NAMES FOR \ep AND \eP"
.rs
.sp
Arabic,
Armenian,
Avestan,
Balinese,
Bamum,
Batak,
Bengali,
Bopomofo,
Brahmi,
Braille,
Buginese,
Buhid,
Canadian_Aboriginal,
Carian,
Chakma,
Cham,
Cherokee,
Common,
Coptic,
Cuneiform,
Cypriot,
Cyrillic,
Deseret,
Devanagari,
Egyptian_Hieroglyphs,
Ethiopic,
Georgian,
Glagolitic,
Gothic,
Greek,
Gujarati,
Gurmukhi,
Han,
Hangul,
Hanunoo,
Hebrew,
Hiragana,
Imperial_Aramaic,
Inherited,
Inscriptional_Pahlavi,
Inscriptional_Parthian,
Javanese,
Kaithi,
Kannada,
Katakana,
Kayah_Li,
Kharoshthi,
Khmer,
Lao,
Latin,
Lepcha,
Limbu,
Linear_B,
Lisu,
Lycian,
Lydian,
Malayalam,
Mandaic,
Meetei_Mayek,
Meroitic_Cursive,
Meroitic_Hieroglyphs,
Miao,
Mongolian,
Myanmar,
New_Tai_Lue,
Nko,
Ogham,
Old_Italic,
Old_Persian,
Old_South_Arabian,
Old_Turkic,
Ol_Chiki,
Oriya,
Osmanya,
Phags_Pa,
Phoenician,
Rejang,
Runic,
Samaritan,
Saurashtra,
Sharada,
Shavian,
Sinhala,
Sora_Sompeng,
Sundanese,
Syloti_Nagri,
Syriac,
Tagalog,
Tagbanwa,
Tai_Le,
Tai_Tham,
Tai_Viet,
Takri,
Tamil,
Telugu,
Thaana,
Thai,
Tibetan,
Tifinagh,
Ugaritic,
Vai,
Yi.
.
.
.SH "CHARACTER CLASSES"
.rs
.sp
  [...]       positizzle characta class
  [^...]      wack characta class
  [x-y]       range (can be used fo' hex characters)
  [[:xxx:]]   positizzle POSIX named set
  [[:^xxx:]]  wack POSIX named set
.sp
  alnum       alphanumeric
  alpha       alphabetic
  ascii       0-127
  blank       space or tab
  cntrl       control character
  digit       decimal digit
  graph       printing, excludin space
  lower       lower case letter
  print       printing, includin space
  punct       printing, excludin alphanumeric
  space       white space
  upper       upper case letter
  word        same as \ew
  xdigit      hexadecimal digit
.sp
In PCRE, POSIX characta set names recognize only ASCII charactas by default,
but a shitload of dem use Unicode propertizzles if PCRE_UCP is set. Yo ass can use
\eQ...\eE inside a cold-ass lil characta class.
.
.
.SH "QUANTIFIERS"
.rs
.sp
  ?           0 or 1, greedy
  ?+          0 or 1, possessive
  ??          0 or 1, lazy
  *           0 or more, greedy
  *+          0 or more, possessive
  *?          0 or more, lazy
  +           1 or more, greedy
  ++          1 or more, possessive
  +?          1 or more, lazy
  {n}         exactly n
  {n,m}       at least n, no mo' than m, greedy
  {n,m}+      at least n, no mo' than m, possessive
  {n,m}?      at least n, no mo' than m, lazy
  {n,}        n or more, greedy
  {n,}+       n or more, possessive
  {n,}?       n or more, lazy
.
.
.SH "ANCHORS AND SIMPLE ASSERTIONS"
.rs
.sp
  \eb          word boundary
  \eB          not a word boundary
  ^           start of subject
               also afta internal newline up in multiline mode
  \eA          start of subject
  $           end of subject
               also before newline at end of subject
               also before internal newline up in multiline mode
  \eZ          end of subject
               also before newline at end of subject
  \ez          end of subject
  \eG          first matchin posizzle up in subject
.
.
.SH "MATCH POINT RESET"
.rs
.sp
  \eK          reset start of match
.
.
.SH "ALTERNATION"
.rs
.sp
  expr|expr|expr...
.
.
.SH "CAPTURING"
.rs
.sp
  (...)           capturin group
  (?<name>...)    named capturin crew (Perl)
  (?'name'...)    named capturin crew (Perl)
  (?P<name>...)   named capturin crew (Python)
  (?:...)         non-capturin group
  (?|...)         non-capturin group; reset crew numbers for
                   capturin crews up in each alternative
.
.
.SH "ATOMIC GROUPS"
.rs
.sp
  (?>...)         atomic, non-capturin group
.
.
.
.
.SH "COMMENT"
.rs
.sp
  (?#....)        comment (not nestable)
.
.
.SH "OPTION SETTING"
.rs
.sp
  (?i)            caseless
  (?J)            allow duplicate names
  (?m)            multiline
  (?s)            single line (dotall)
  (?U)            default ungreedy (lazy)
  (?x)            extended (ignore white space)
  (?-...)         unset option(s)
.sp
Da followin is recognized only all up in tha start of a pattern or afta one of the
newline-settin options wit similar syntax:
.sp
  (*LIMIT_MATCH=d) set tha match limit ta d (decimal number)
  (*LIMIT_RECURSION=d) set tha recursion limit ta d (decimal number)
  (*NO_START_OPT) no start-match optimization (PCRE_NO_START_OPTIMIZE)
  (*UTF8)         set UTF-8 mode: 8-bit library (PCRE_UTF8)
  (*UTF16)        set UTF-16 mode: 16-bit library (PCRE_UTF16)
  (*UTF32)        set UTF-32 mode: 32-bit library (PCRE_UTF32)
  (*UTF)          set appropriate UTF mode fo' tha library up in use
  (*UCP)          set PCRE_UCP (use Unicode propertizzles fo' \ed etc)
.
.
.SH "LOOKAHEAD AND LOOKBEHIND ASSERTIONS"
.rs
.sp
  (?=...)         positizzle look ahead
  (?!...)         wack look ahead
  (?<=...)        positizzle look behind
  (?<!...)        wack look behind
.sp
Each top-level branch of a look behind must be of a gangbangin' fixed length.
.
.
.SH "BACKREFERENCES"
.rs
.sp
  \en              reference by number (can be ambiguous)
  \egn             reference by number
  \eg{n}           reference by number
  \eg{-n}          relatizzle reference by number
  \ek<name>        reference by name (Perl)
  \ek'name'        reference by name (Perl)
  \eg{name}        reference by name (Perl)
  \ek{name}        reference by name (.NET)
  (?P=name)       reference by name (Python)
.
.
.SH "SUBROUTINE REFERENCES (POSSIBLY RECURSIVE)"
.rs
.sp
  (?R)            recurse whole pattern
  (?n)            call subpattern by absolute number
  (?+n)           call subpattern by relatizzle number
  (?-n)           call subpattern by relatizzle number
  (?&name)        call subpattern by name (Perl)
  (?P>name)       call subpattern by name (Python)
  \eg<name>        call subpattern by name (Oniguruma)
  \eg'name'        call subpattern by name (Oniguruma)
  \eg<n>           call subpattern by absolute number (Oniguruma)
  \eg'n'           call subpattern by absolute number (Oniguruma)
  \eg<+n>          call subpattern by relatizzle number (PCRE extension)
  \eg'+n'          call subpattern by relatizzle number (PCRE extension)
  \eg<-n>          call subpattern by relatizzle number (PCRE extension)
  \eg'-n'          call subpattern by relatizzle number (PCRE extension)
.
.
.SH "CONDITIONAL PATTERNS"
.rs
.sp
  (?(condition)yes-pattern)
  (?(condition)yes-pattern|no-pattern)
.sp
  (?(n)...        absolute reference condition
  (?(+n)...       relatizzle reference condition
  (?(-n)...       relatizzle reference condition
  (?(<name>)...   named reference condizzle (Perl)
  (?('name')...   named reference condizzle (Perl)
  (?(name)...     named reference condizzle (PCRE)
  (?(R)...        overall recursion condition
  (?(Rn)...       specific crew recursion condition
  (?(R&name)...   specific recursion condition
  (?(DEFINE)...   define subpattern fo' reference
  (?(assert)...   assertion condition
.
.
.SH "BACKTRACKING CONTROL"
.rs
.sp
Da followin act immediately they is reached:
.sp
  (*ACCEPT)       force successful match
  (*FAIL)         force backtrack; synonym (*F)
  (*MARK:NAME)    set name ta be passed back; synonym (*:NAME)
.sp
Da followin act only when a subsequent match failure causes a funky-ass backtrack to
reach em. They all force a match failure yo, but they differ up in what tha fuck happens
afterwards. Those dat advizzle tha start-of-match point do so only if the
pattern aint anchored.
.sp
  (*COMMIT)       overall failure, no advizzle of startin point
  (*PRUNE)        advizzle ta next startin character
  (*PRUNE:NAME)   equivalent ta (*MARK:NAME)(*PRUNE)
  (*SKIP)         advizzle ta current matchin position
  (*SKIP:NAME)    advizzle ta posizzle correspondin ta a earlier
                  (*MARK:NAME); if not found, tha (*SKIP) is ignored
  (*THEN)         local failure, backtrack ta next alternation
  (*THEN:NAME)    equivalent ta (*MARK:NAME)(*THEN)
.
.
.SH "NEWLINE CONVENTIONS"
.rs
.sp
These is recognized only all up in tha straight-up start of tha pattern or afta a
(*BSR_...), (*UTF8), (*UTF16), (*UTF32) or (*UCP) option.
.sp
  (*CR)           carriage return only
  (*LF)           linefeed only
  (*CRLF)         carriage return followed by linefeed
  (*ANYCRLF)      all three of tha above
  (*ANY)          any Unicode newline sequence
.
.
.SH "WHAT \eR MATCHES"
.rs
.sp
These is recognized only all up in tha straight-up start of tha pattern or afta a
(*...) option dat sets tha newline convention or a UTF or UCP mode.
.sp
  (*BSR_ANYCRLF)  CR, LF, or CRLF
  (*BSR_UNICODE)  any Unicode newline sequence
.
.
.SH "CALLOUTS"
.rs
.sp
  (?C)      callout
  (?Cn)     callout wit data n
.
.
.SH "SEE ALSO"
.rs
.sp
\fBpcrepattern\fP(3), \fBpcreapi\fP(3), \fBpcrecallout\fP(3),
\fBpcrematching\fP(3), \fBpcre\fP(3).
.
.
.SH AUTHOR
.rs
.sp
.nf
Philip Hazel
Universitizzle Computin Service
Cambridge CB2 3QH, England.
.fi
.
.
.SH REVISION
.rs
.sp
.nf
Last updated: 26 April 2013
Copyright (c) 1997-2013 Universitizzle of Cambridge.
.fi
