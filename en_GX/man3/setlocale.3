.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" n' Copyright 1999 by Bruno Haible (haible@clisp.cons.org)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 18:20:12 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Tue Jul 15 16:49:10 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun Jul  4 14:52:16 1999 by Bruno Haible (haible@clisp.cons.org)
.\" Modified Tue Aug 24 17:11:01 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Tue Feb  6 03:31:55 2001 by Andries Brouwer (aeb@cwi.nl)
.\"
.TH SETLOCALE 3  2008-12-05 "GNU" "Linux Programmerz Manual"
.SH NAME
setlocale \- set tha current locale
.SH SYNOPSIS
.nf
.B #include <locale.h>
.sp
.BI "char *setlocale(int " category ", const char *" locale );
.fi
.SH DESCRIPTION
The
.BR setlocale ()
function is used ta set or query tha programz current locale.
.PP
If
.I locale
is not NULL,
the programz current locale is modified accordin ta tha arguments.
Da argument
.I category
determines which partz of tha programz current locale should be modified.
.TP
.B LC_ALL
for all of tha locale.
.TP
.B LC_COLLATE
for regular expression matchin (it determines tha meaning
of range expressions n' equivalence classes) n' strang collation.
.TP
.B LC_CTYPE
for regular expression matching, characta classification, conversion,
case-sensitizzle comparison, n' wide characta functions.
.TP
.B LC_MESSAGES
for localizable natural-language lyrics.
.TP
.B LC_MONETARY
for monetary formatting.
.TP
.B LC_NUMERIC
for number formattin (like fuckin tha decimal point n' tha thousandz separator).
.TP
.B LC_TIME
for time n' date formatting.
.PP
Da argument
.I locale
is a pointa ta a cold-ass lil characta strang containin the
required settin of
.IR category .
Such a strang is either a well-known constant like "C" or "da_DK"
(see below), or a opaque strang dat was returned by another call of
.BR setlocale ().
.PP
If
.I locale
is
.BR """""" ,
each part of tha locale dat should be modified is set accordin ta the
environment variables.
Da details is implementation-dependent.
For glibc, first (regardless of
.IR category ),
the environment variable
.B LC_ALL
is inspected,
next tha environment variable wit tha same name as tha category
.RB ( LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
.BR LC_MONETARY ,
.BR LC_NUMERIC ,
.BR LC_TIME )
and finally tha environment variable
.BR LANG .
Da first existin environment variable is used.
If its value aint a valid locale justification, tha locale
is unchanged, and
.BR setlocale ()
returns NULL.
.PP
Da locale
.B """C"""
or
.B """POSIX"""
is a portable locale; its
.B LC_CTYPE
part correspondz ta tha 7-bit ASCII
characta set.
.PP
A locale name is typically of tha form
.IR language "[_" territory "][." codeset "][@" modifier "],"
where
.I language
is a ISO 639 language code,
.I territory
is a ISO 3166 ghetto code, and
.I codeset
is a cold-ass lil characta set or encodin identifier like
.B "ISO-8859-1"
or
.BR "UTF-8" .
For a list of all supported locales, try "locale \-a", cf.\&
.BR locale (1).
.PP
If
.I locale
is NULL, tha current locale is only queried, not modified.
.PP
On startup of tha main program, tha portable
.B """C"""
locale is selected as default.
A program may be made portable ta all localez by calling:
.nf

    setlocale(LC_ALL, "");

.fi
afta program initialization, by rockin tha joints returned
from a
.BR localeconv (3)
call
for locale-dependent shiznit, by rockin tha multibyte n' wide
characta functions fo' text processin if
.BR "MB_CUR_MAX > 1" ,
and by using
.BR strcoll (3),
.BR wcscoll (3)
or
.BR strxfrm (3),
.BR wcsxfrm (3)
to compare strings.
.SH RETURN VALUE
A successful call to
.BR setlocale ()
returns a opaque strang dat correspondz ta tha locale set.
This strang may be allocated up in static storage.
Da strang returned is such dat a subsequent call wit dat string
and its associated category will restore dat part of tha process's
locale.
Da return value is NULL if tha request cannot be honored.
.SH CONFORMING TO
C89, C99, POSIX.1-2001.
.SH NOTES
Linux (that is, glibc) supports tha portable locales
.BR """C""" " n' " """POSIX""" .
In tha phat oldschool minutes there used ta be support for
the European Latin-1
.B """ISO-8859-1"""
locale (e.g., up in libc-4.5.21 n' libc-4.6.27), n' tha Russian
.B """KOI-8"""
(more precisely, "koi-8r") locale (e.g., up in libc-4.6.27),
so dat havin a environment variable \fILC_CTYPE=ISO-8859-1\fP
sufficed ta make
.BR isprint (3)
return tha right answer.
These minutes non-Gangsta bustin lyrics Europeans gotta work a lil' bit harder,
and must install actual locale files.
.SH SEE ALSO
.BR locale (1),
.BR localedef (1),
.BR isalpha (3),
.BR localeconv (3),
.BR nl_langinfo (3),
.BR rpmatch (3),
.BR strcoll (3),
.BR strftime (3),
.BR charsets (7),
.BR locale (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
