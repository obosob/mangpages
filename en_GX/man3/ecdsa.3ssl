.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ecdsa 3"
.TH ecdsa 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ecdsa \- Elliptic Curve Digital Signature Algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ecdsa.h>
\&
\& ECDSA_SIG*     ECDSA_SIG_new(void);
\& void           ECDSA_SIG_free(ECDSA_SIG *sig);
\& int            i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
\& ECDSA_SIG*     d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, 
\&                long len);
\&
\& ECDSA_SIG*     ECDSA_do_sign(const unsigned char *dgst, int dgst_len,
\&                        EC_KEY *eckey);
\& ECDSA_SIG*     ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen, 
\&                        const BIGNUM *kinv, const BIGNUM *rp,
\&                        EC_KEY *eckey);
\& int            ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
\&                        const ECDSA_SIG *sig, EC_KEY* eckey);
\& int            ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx,
\&                        BIGNUM **kinv, BIGNUM **rp);
\& int            ECDSA_sign(int type, const unsigned char *dgst,
\&                        int dgstlen, unsigned char *sig,
\&                        unsigned int *siglen, EC_KEY *eckey);
\& int            ECDSA_sign_ex(int type, const unsigned char *dgst,
\&                        int dgstlen, unsigned char *sig,
\&                        unsigned int *siglen, const BIGNUM *kinv, 
\&                        const BIGNUM *rp, EC_KEY *eckey);
\& int            ECDSA_verify(int type, const unsigned char *dgst,
\&                        int dgstlen, const unsigned char *sig,
\&                        int siglen, EC_KEY *eckey);
\& int            ECDSA_size(const EC_KEY *eckey);
\&
\& const ECDSA_METHOD*    ECDSA_OpenSSL(void);
\& void           ECDSA_set_default_method(const ECDSA_METHOD *meth);
\& const ECDSA_METHOD*    ECDSA_get_default_method(void);
\& int            ECDSA_set_method(EC_KEY *eckey,const ECDSA_METHOD *meth);
\&
\& int            ECDSA_get_ex_new_index(long argl, void *argp,
\&                        CRYPTO_EX_new *new_func,
\&                        CRYPTO_EX_dup *dup_func,
\&                        CRYPTO_EX_free *free_func);
\& int            ECDSA_set_ex_data(EC_KEY *d, int idx, void *arg);
\& void*          ECDSA_get_ex_data(EC_KEY *d, int idx);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fB\s-1ECDSA_SIG\s0\fR structure consistz of two BIGNUMs fo' the
r n' s value of a \s-1ECDSA\s0 signature (see X9.62 or \s-1FIPS 186\-2\s0).
.PP
.Vb 5
\& struct
\&        {
\&        BIGNUM *r;
\&        BIGNUM *s;
\& } ECDSA_SIG;
.Ve
.PP
\&\fIECDSA_SIG_new()\fR allocates a freshly smoked up \fB\s-1ECDSA_SIG\s0\fR structure (note: this
function also allocates tha BIGNUMs) n' initialize dat shit.
.PP
\&\fIECDSA_SIG_free()\fR frees tha \fB\s-1ECDSA_SIG\s0\fR structure \fBsig\fR.
.PP
\&\fIi2d_ECDSA_SIG()\fR creates tha \s-1DER\s0 encodin of tha \s-1ECDSA\s0 signature
\&\fBsig\fR n' writes tha encoded signature ta \fB*pp\fR (note: if \fBpp\fR
is \s-1NULL \s0\fBi2d_ECDSA_SIG\fR returns tha expected length up in bytez of 
the \s-1DER\s0 encoded signature). \fBi2d_ECDSA_SIG\fR returns tha length
of tha \s-1DER\s0 encoded signature (or 0 on error).
.PP
\&\fId2i_ECDSA_SIG()\fR decodes a \s-1DER\s0 encoded \s-1ECDSA\s0 signature n' returns
the decoded signature up in a newly allocated \fB\s-1ECDSA_SIG\s0\fR structure.
\&\fB*sig\fR points ta tha buffer containin tha \s-1DER\s0 encoded signature
of size \fBlen\fR.
.PP
\&\fIECDSA_size()\fR returns tha maximum length of a \s-1DER\s0 encoded
\&\s-1ECDSA\s0 signature pimped wit tha private \s-1EC\s0 key \fBeckey\fR.
.PP
\&\fIECDSA_sign_setup()\fR may be used ta precompute partz of the
signin operation. I aint talkin' bout chicken n' gravy biatch. \fBeckey\fR is tha private \s-1EC\s0 key n' \fBctx\fR
is a pointa ta \fB\s-1BN_CTX\s0\fR structure (or \s-1NULL\s0). Da precomputed
values or returned up in \fBkinv\fR n' \fBrp\fR n' can be used up in a
lata call ta \fBECDSA_sign_ex\fR or \fBECDSA_do_sign_ex\fR.
.PP
\&\fIECDSA_sign()\fR is wrapper function fo' ECDSA_sign_ex wit \fBkinv\fR
and \fBrp\fR set ta \s-1NULL.\s0
.PP
\&\fIECDSA_sign_ex()\fR computes a gangbangin' finger-lickin' digital signature of tha \fBdgstlen\fR bytes
hash value \fBdgst\fR rockin tha private \s-1EC\s0 key \fBeckey\fR n' tha optional
pre-computed joints \fBkinv\fR n' \fBrp\fR. Da \s-1DER\s0 encoded signatures is
stored up in \fBsig\fR n' itz length is returned up in \fBsig_len\fR. Note: \fBsig\fR
must point ta \fBECDSA_size\fR bytez of memory. Da parameta \fBtype\fR
is ignored.
.PP
\&\fIECDSA_verify()\fR verifies dat tha signature up in \fBsig\fR of size
\&\fBsiglen\fR be a valid \s-1ECDSA\s0 signature of tha hash value
value \fBdgst\fR of size \fBdgstlen\fR rockin tha hood key \fBeckey\fR.
Da parameta \fBtype\fR is ignored.
.PP
\&\fIECDSA_do_sign()\fR is wrapper function fo' ECDSA_do_sign_ex wit \fBkinv\fR
and \fBrp\fR set ta \s-1NULL.\s0
.PP
\&\fIECDSA_do_sign_ex()\fR computes a gangbangin' finger-lickin' digital signature of tha \fBdgst_len\fR
bytes hash value \fBdgst\fR rockin tha private key \fBeckey\fR n' the
optionizzle pre-computed joints \fBkinv\fR n' \fBrp\fR. Da signature is
returned up in a newly allocated \fB\s-1ECDSA_SIG\s0\fR structure (or \s-1NULL\s0 on error).
.PP
\&\fIECDSA_do_verify()\fR verifies dat tha signature \fBsig\fR be a valid
\&\s-1ECDSA\s0 signature of tha hash value \fBdgst\fR of size \fBdgst_len\fR
usin tha hood key \fBeckey\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIECDSA_size()\fR returns tha maximum length signature or 0 on error.
.PP
\&\fIECDSA_sign_setup()\fR n' \fIECDSA_sign()\fR return 1 if successful or 0
on error.
.PP
\&\fIECDSA_verify()\fR n' \fIECDSA_do_verify()\fR return 1 fo' a valid
signature, 0 fo' a invalid signature n' \-1 on error.
Da error codes can be obtained by \fIERR_get_error\fR\|(3).
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Creatin a \s-1ECDSA\s0 signature of given \s-1SHA\-1\s0 hash value rockin the
named curve secp192k1.
.PP
First step: create a \s-1EC_KEY\s0 object (note: dis part is \fBnot\fR \s-1ECDSA\s0
specific)
.PP
.Vb 10
\& int        ret;
\& ECDSA_SIG *sig;
\& EC_KEY    *eckey = EC_KEY_new();
\& if (eckey == NULL)
\&        {
\&        /* error */
\&        }
\& key\->group = EC_GROUP_new_by_nid(NID_secp192k1);
\& if (key\->group == NULL)
\&        {
\&        /* error */
\&        }
\& if (!EC_KEY_generate_key(eckey))
\&        {
\&        /* error */
\&        }
.Ve
.PP
Second step: compute tha \s-1ECDSA\s0 signature of a \s-1SHA\-1\s0 hash value 
usin \fBECDSA_do_sign\fR
.PP
.Vb 5
\& sig = ECDSA_do_sign(digest, 20, eckey);
\& if (sig == NULL)
\&        {
\&        /* error */
\&        }
.Ve
.PP
or rockin \fBECDSA_sign\fR
.PP
.Vb 9
\& unsigned char *buffer, *pp;
\& int            buf_len;
\& buf_len = ECDSA_size(eckey);
\& buffer  = OPENSSL_malloc(buf_len);
\& pp = buffer;
\& if (!ECDSA_sign(0, dgst, dgstlen, pp, &buf_len, eckey);
\&        {
\&        /* error */
\&        }
.Ve
.PP
Third step: verify tha pimped \s-1ECDSA\s0 signature rockin \fBECDSA_do_verify\fR
.PP
.Vb 1
\& ret = ECDSA_do_verify(digest, 20, sig, eckey);
.Ve
.PP
or rockin \fBECDSA_verify\fR
.PP
.Vb 1
\& ret = ECDSA_verify(0, digest, 20, buffer, buf_len, eckey);
.Ve
.PP
and finally evaluate tha return value:
.PP
.Vb 12
\& if (ret == \-1)
\&        {
\&        /* error */
\&        }
\& else if (ret == 0)
\&        {
\&        /* incorrect signature */
\&        }
\& else   /* ret == 1 */
\&        {
\&        /* signature aiiight */
\&        }
.Ve
.SH "CONFORMING TO"
.IX Header "CONFORMING TO"
\&\s-1ANSI X9.62, US\s0 Federal Hype Processin Standard \s-1FIPS 186\-2
\&\s0(Digital Signature Standard, \s-1DSS\s0)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdsa\fR\|(3), \fIrsa\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
Da ecdsa implementation was first introduced up in OpenSSL 0.9.8
.SH "AUTHOR"
.IX Header "AUTHOR"
Nils Larsch fo' tha OpenSSL project (http://www.openssl.org).
