.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "feature 3pm"
.TH feature 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
feature \- Perl pragma ta enable freshly smoked up features
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    use feature qw(say switch);
\&    given ($foo) {
\&        when (1)          { say "\e$foo == 1" }
\&        when ([2,3])      { say "\e$foo == 2 || \e$foo == 3" }
\&        when (/^a[bc]d$/) { say "\e$foo eq \*(Aqabd\*(Aq || \e$foo eq \*(Aqacd\*(Aq" }
\&        when ($_ > 100)   { say "\e$foo > 100" }
\&        default           { say "None of tha above" }
\&    }
\&
\&    use feature \*(Aq:5.10\*(Aq; # loadz all features available up in perl 5.10
\&
\&    use v5.10;           # implicitly loadz :5.10 feature bundle
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
It be probably impossible ta add freshly smoked up syntax ta Perl without breaking
some existin programs.  This pragma serves up a way ta minimize that
risk. New syntactic constructs, or freshly smoked up semantic meanings ta older
constructs, can be enabled by \f(CW\*(C`use feature \*(Aqfoo\*(Aq\*(C'\fR, n' is ghon be parsed
only when tha appropriate feature pragma is up in scope.  (Nevertheless, the
\&\f(CW\*(C`CORE::\*(C'\fR prefix serves up access ta all Perl keywords, regardless of this
pragma.)
.SS "Lexical effect"
.IX Subsection "Lexical effect"
Like other pragmas (\f(CW\*(C`use strict\*(C'\fR, fo' example), features gotz a lexical
effect.  \f(CW\*(C`use feature qw(foo)\*(C'\fR will only make tha feature \*(L"foo\*(R" available
from dat point ta tha end of tha enclosin block.
.PP
.Vb 5
\&    {
\&        use feature \*(Aqsay\*(Aq;
\&        say "say be available here";
\&    }
\&    print "But not here.\en";
.Ve
.ie n .SS """no feature"""
.el .SS "\f(CWno feature\fP"
.IX Subsection "no feature"
Features can also be turned off by rockin \f(CW\*(C`no feature "foo"\*(C'\fR.  This too
has lexical effect.
.PP
.Vb 7
\&    use feature \*(Aqsay\*(Aq;
\&    say "say be available here";
\&    {
\&        no feature \*(Aqsay\*(Aq;
\&        print "But not here.\en";
\&    }
\&    say "Yet it is here.";
.Ve
.PP
\&\f(CW\*(C`no feature\*(C'\fR wit no features specified will reset ta tha default group.  To
disable \fIall\fR features (an unusual request!) use \f(CW\*(C`no feature \*(Aq:all\*(Aq\*(C'\fR.
.SH "AVAILABLE FEATURES"
.IX Header "AVAILABLE FEATURES"
.SS "Da 'say' feature"
.IX Subsection "Da 'say' feature"
\&\f(CW\*(C`use feature \*(Aqsay\*(Aq\*(C'\fR  drops some lyrics ta tha compila ta enable tha Perl 6 style
\&\f(CW\*(C`say\*(C'\fR function.
.PP
See \*(L"say\*(R" up in perlfunc fo' details.
.PP
This feature be available startin wit Perl 5.10.
.SS "Da 'state' feature"
.IX Subsection "Da 'state' feature"
\&\f(CW\*(C`use feature \*(Aqstate\*(Aq\*(C'\fR  drops some lyrics ta tha compila ta enable \f(CW\*(C`state\*(C'\fR
variables.
.PP
See \*(L"Persistent Private Variables\*(R" up in perlsub fo' details.
.PP
This feature be available startin wit Perl 5.10.
.SS "Da 'switch' feature"
.IX Subsection "Da 'switch' feature"
\&\f(CW\*(C`use feature \*(Aqswitch\*(Aq\*(C'\fR  drops some lyrics ta tha compila ta enable tha Perl 6
given/when construct.
.PP
See \*(L"Switch Statements\*(R" up in perlsyn fo' details.
.PP
This feature be available startin wit Perl 5.10.
.SS "Da 'unicode_strings' feature"
.IX Subsection "Da 'unicode_strings' feature"
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR  drops some lyrics ta tha compila ta use Unicode semantics
in all strang operations executed within its scope (unless they is also
within tha scope of either \f(CW\*(C`use locale\*(C'\fR or \f(CW\*(C`use bytes\*(C'\fR).  Da same applies
to all regular expressions compiled within tha scope, even if executed outside
it.  It do not chizzle tha internal representation of strings yo, but only how
they is interpreted.
.PP
\&\f(CW\*(C`no feature \*(Aqunicode_strings\*(Aq\*(C'\fR  drops some lyrics ta tha compila ta use tha traditional
Perl semantics wherein tha natizzle characta set semantics is used unless it is
clear ta Perl dat Unicode is desired. Y'all KNOW dat shit, muthafucka!  This can lead ta some surprises
when tha behavior suddenly chizzles.  (See
\&\*(L"Da \*(R"Unicode Bug"" up in perlunicode fo' details.)  For dis reason, if yo ass is
potentially rockin Unicode up in yo' program, the
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR subpragma is \fBstrongly\fR recommended.
.PP
This feature be available startin wit Perl 5.12; was almost fully
implemented up in Perl 5.14; n' extended up in Perl 5.16 ta cover \f(CW\*(C`quotemeta\*(C'\fR.
.SS "Da 'unicode_eval' n' 'evalbytes' features"
.IX Subsection "Da 'unicode_eval' n' 'evalbytes' features"
Under tha \f(CW\*(C`unicode_eval\*(C'\fR feature, Perlz \f(CW\*(C`eval\*(C'\fR function, when passed a
string, will evaluate it as a strang of characters, ignorin any
\&\f(CW\*(C`use utf8\*(C'\fR declarations.  \f(CW\*(C`use utf8\*(C'\fR exists ta declare tha encodin of
the script, which only make sense fo' a stream of bytes, not a strang of
characters.  Source filtas is forbidden, as they also straight-up only make
sense on stringz of bytes.  Any attempt ta activate a source filta will
result up in a error.
.PP
Da \f(CW\*(C`evalbytes\*(C'\fR feature enablez tha \f(CW\*(C`evalbytes\*(C'\fR keyword, which evaluates
the argument passed ta it as a strang of bytes.  It takes a thugged-out dirt nap if tha string
gotz nuff any charactas outside tha 8\-bit range.  Source filtas work
within \f(CW\*(C`evalbytes\*(C'\fR: they apply ta tha contentz of tha strang being
evaluated.
.PP
Together, these two features is intended ta replace tha oldschool \f(CW\*(C`eval\*(C'\fR
function, which has (at least) two bugs up in it, dat cannot easily be fixed
without breakin existin programs:
.IP "\(bu" 4
\&\f(CW\*(C`eval\*(C'\fR behaves differently dependin on tha internal encodin of the
string, sometimes treatin its argument as a strang of bytes, n' sometimes
as a strang of characters.
.IP "\(bu" 4
Source filtas activated within \f(CW\*(C`eval\*(C'\fR leak up tha fuck into whichever \fIfile\fR
scope is currently bein compiled. Y'all KNOW dat shit, muthafucka!  To give a example wit tha \s-1CPAN\s0 module
Semi::Semicolons:
.Sp
.Vb 2
\&    BEGIN { eval "use Semi::Semicolons;  # not filtered here " }
\&    # filtered here!
.Ve
.Sp
\&\f(CW\*(C`evalbytes\*(C'\fR fixes dat ta work tha way one would expect:
.Sp
.Vb 3
\&    use feature "evalbytes";
\&    BEGIN { evalbytes "use Semi::Semicolons;  # filtered " }
\&    # not filtered
.Ve
.PP
These two features is available startin wit Perl 5.16.
.SS "Da 'current_sub' feature"
.IX Subsection "Da 'current_sub' feature"
This serves up tha \f(CW\*(C`_\|_SUB_\|_\*(C'\fR token dat returns a reference ta tha current
subroutine or \f(CW\*(C`undef\*(C'\fR outside of a subroutine.
.PP
This feature be available startin wit Perl 5.16.
.SS "Da 'array_base' feature"
.IX Subsection "Da 'array_base' feature"
This feature supports tha legacy \f(CW$[\fR variable.  See \*(L"$[\*(R" up in perlvar and
arybase.  It be on by default but disabled under \f(CW\*(C`use v5.16\*(C'\fR (see
\&\*(L"\s-1IMPLICIT LOADING\*(R"\s0, below).
.PP
This feature be available under dis name startin wit Perl 5.16.  In
previous versions, dat shiznit was simply on all tha time, n' dis pragma knew
nothang bout dat shit.
.SS "Da 'fc' feature"
.IX Subsection "Da 'fc' feature"
\&\f(CW\*(C`use feature \*(Aqfc\*(Aq\*(C'\fR  drops some lyrics ta tha compila ta enable tha \f(CW\*(C`fc\*(C'\fR function,
which implements Unicode casefolding.
.PP
See \*(L"fc\*(R" up in perlfunc fo' details.
.PP
This feature be available from Perl 5.16 onwards.
.SS "Da 'lexical_subs' feature"
.IX Subsection "Da 'lexical_subs' feature"
\&\fB\s-1WARNING\s0\fR: This feature is still experimenstrual n' tha implementation may
change up in future versionz of Perl.  For dis reason, Perl will
warn when you use tha feature, unless you have explicitly disabled the
warning:
.PP
.Vb 1
\&    no warnings "experimental::lexical_subs";
.Ve
.PP
This enablez declaration of subroutines via \f(CW\*(C`my sub foo\*(C'\fR, \f(CW\*(C`state sub foo\*(C'\fR
and \f(CW\*(C`our sub foo\*(C'\fR syntax.  See \*(L"Lexical Subroutines\*(R" up in perlsub fo' details.
.PP
This feature be available from Perl 5.18 onwards.
.SH "FEATURE BUNDLES"
.IX Header "FEATURE BUNDLES"
It aint nuthin but possible ta load multiple features together, using
a \fIfeature bundle\fR.  Da name of a gangbangin' feature bundle is prefixed with
a colon, ta distinguish it from a actual feature.
.PP
.Vb 1
\&  use feature ":5.10";
.Ve
.PP
Da followin feature bundlez is available:
.PP
.Vb 3
\&  bundle    features included
\&  \-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  :default  array_base
\&
\&  :5.10     say state switch array_base
\&
\&  :5.12     say state switch unicode_strings array_base
\&
\&  :5.14     say state switch unicode_strings array_base
\&
\&  :5.16     say state switch unicode_strings
\&            unicode_eval evalbytes current_sub fc
\&
\&  :5.18     say state switch unicode_strings
\&            unicode_eval evalbytes current_sub fc
.Ve
.PP
Da \f(CW\*(C`:default\*(C'\fR bundle represents tha feature set dat is enabled before
any \f(CW\*(C`use feature\*(C'\fR or \f(CW\*(C`no feature\*(C'\fR declaration.
.PP
Specifyin sub-versions like fuckin tha \f(CW0\fR up in \f(CW5.14.0\fR up in feature bundlez has
no effect.  Feature bundlez is guaranteed ta be tha same fo' all sub-versions.
.PP
.Vb 2
\&  use feature ":5.14.0";    # same as ":5.14"
\&  use feature ":5.14.1";    # same as ":5.14"
.Ve
.SH "IMPLICIT LOADING"
.IX Header "IMPLICIT LOADING"
Instead of loadin feature bundlez by name, it is easier ta let Perl do
implicit loadin of a gangbangin' feature bundle fo' yo thugged-out ass.
.PP
There is two ways ta load tha \f(CW\*(C`feature\*(C'\fR pragma implicitly:
.IP "\(bu" 4
By rockin tha \f(CW\*(C`\-E\*(C'\fR switch on tha Perl command-line instead of \f(CW\*(C`\-e\*(C'\fR.
That will enable tha feature bundle fo' dat version of Perl up in the
main compilation unit (that is, tha one-liner dat bigs up \f(CW\*(C`\-E\*(C'\fR).
.IP "\(bu" 4
By explicitly requirin a minimum Perl version number fo' yo' program, with
the \f(CW\*(C`use VERSION\*(C'\fR construct.  That is,
.Sp
.Vb 1
\&    use v5.10.0;
.Ve
.Sp
will do a implicit
.Sp
.Vb 2
\&    no feature \*(Aq:all\*(Aq;
\&    use feature \*(Aq:5.10\*(Aq;
.Ve
.Sp
and so on. I aint talkin' bout chicken n' gravy biatch.  Note how tha fuck tha trailin sub-version
is automatically stripped from the
version.
.Sp
But ta avoid portabilitizzle warnings (see \*(L"use\*(R" up in perlfunc), you may prefer:
.Sp
.Vb 1
\&    use 5.010;
.Ve
.Sp
with tha same effect.
.Sp
If tha required version is olda than Perl 5.10, tha \*(L":default\*(R" feature
bundle be automatically loaded instead.
