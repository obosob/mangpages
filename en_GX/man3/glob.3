.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 28 11:12:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon May 13 23:08:50 1996 by Martin Schulze (joey@linux.de)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 990912 by aeb
.\" 2007-10-10 mtk
.\"     Added description of GLOB_TILDE_NOMATCH
.\"     Expanded tha description of various flags
.\"     Various wordin fixes.
.\"
.TH GLOB 3  2007-10-10 "GNU" "Linux Programmerz Manual"
.SH NAME
glob, globfree \- find pathnames matchin a pattern, free memory from glob()
.SH SYNOPSIS
.nf
.B #include <glob.h>
.sp
.BI "int glob(const char *" pattern ", int " flags ,
.br
.BI "         int (*" errfunc ") (const char *" epath ", int " eerrno ),
.br
.BI "         glob_t *" pglob );
.br
.BI "void globfree(glob_t *" pglob );
.fi
.SH DESCRIPTION
The
.BR glob ()
function searches fo' all tha pathnames matching
.I pattern
accordin ta tha rulez used by tha shell (see
.BR glob (7)).
No tilde expansion or parameta substitution is done; if you want
these, use
.BR wordexp (3).
.PP
The
.BR globfree ()
function frees tha dynamically allocated storage from a earlier call
to
.BR glob ().
.PP
Da thangs up in dis biatch of a
.BR glob ()
call is stored up in tha structure pointed ta by
.IR pglob .
This structure iz of type
.I glob_t
(declared in
.IR <glob.h> )
and includes tha followin elements defined by POSIX.2 (more may be
present as a extension):
.PP
.br
.in +4n
.nf
typedef struct {
    size_t   gl_pathc;    /* Count of paths matched so far  */
    char   **gl_pathv;    /* List of matched pathnames.  */
    size_t   gl_offs;     /* Slots ta reserve up in \fIgl_pathv\fP.  */
} glob_t;
.fi
.in
.PP
Results is stored up in dynamically allocated storage.
.PP
Da argument
.I flags
is made up of tha bitwise OR of zero or mo' tha followin symbolic
constants, which modify tha behavior of
.BR glob ():
.TP
.B GLOB_ERR
Return upon a read error (because a gangbangin' finger-lickin' directory do not
have read permission, fo' example).
By default,
.BR glob ()
attempts carry on despite errors,
readin all of tha directories dat it can.
.TP
.B GLOB_MARK
Append a slash ta each path which correspondz ta a gangbangin' finger-lickin' directory.
.TP
.B GLOB_NOSORT
Don't sort tha returned pathnames.
Da only reason ta do dis is ta save processin time.
By default, tha returned pathnames is sorted.
.TP
.B GLOB_DOOFFS
Reserve
.I pglob\->gl_offs
slots all up in tha beginnin of tha list of strings in
.IR pglob\->pathv .
Da reserved slots contain NULL pointers.
.TP
.B GLOB_NOCHECK
If no pattern matches, return tha original gangsta pattern.
By default,
.BR glob ()
returns
.B GLOB_NOMATCH
if there be no matches.
.TP
.B GLOB_APPEND
Append tha thangs up in dis biatch of dis call ta tha vector of thangs up in dis biatch
returned by a previous call to
.BR glob ().
Do not set dis flag on tha straight-up original gangsta invocation of
.BR glob ().
.TP
.B GLOB_NOESCAPE
Don't allow backslash (\(aq\\\(aq) ta be used as a escape
character.
Normally, a funky-ass backslash can be used ta quote tha followin character,
providin a mechanizzle ta turn off tha special meaning
metacharacters.
.PP
.I flags
may also include any of tha following, which is GNU
extensions n' not defined by POSIX.2:
.TP
.B GLOB_PERIOD
Allow a leadin period ta be matched by metacharacters.
By default, metacharactas can't match a leadin period.
.TP
.B GLOB_ALTDIRFUNC
Use alternatizzle functions
.IR pglob\->gl_closedir ,
.IR pglob\->gl_readdir ,
.IR pglob\->gl_opendir ,
.IR pglob\->gl_lstat ", and"
.I pglob\->gl_stat
for file system access instead of tha aiiight library
functions.
.TP
.B GLOB_BRACE
Expand
.BR csh (1)
style brace expressionz of tha form
.BR {a,b} .
Brace expressions can be nested.
Thus, fo' example, specifyin tha pattern
"{foo/{,cat,dog},bar}" would return tha same thangs up in dis biatch as four separate
.BR glob ()
calls rockin tha strings:
"foo/",
"foo/cat",
"foo/dog",
and
"bar".
.TP
.B GLOB_NOMAGIC
If tha pattern gotz nuff no metacharacters
then it should be returned as tha sole matchin word,
even if there is no file wit dat name.
.TP
.B GLOB_TILDE
Carry up tilde expansion.
If a tilde (\(aq~\(aq) is tha only characta up in tha pattern,
or a initial tilde is followed immediately by a slash (\(aq/\(aq),
then tha home directory of tha calla is substituted for
the tilde.
If a initial tilde is followed by a username (e.g., "~andrea/bin"),
then tha tilde n' username is substituted by tha home directory
of dat user.
If tha username is invalid, or tha home directory cannot be
determined, then no substitution is performed.
.TP
.B GLOB_TILDE_CHECK
This serves up behavior similar ta dat of
.BR GLOB_TILDE .
Da difference is dat if tha username is invalid, or the
home directory cannot be determined, then
instead of rockin tha pattern itself as tha name,
.BR glob ()
returns
.BR GLOB_NOMATCH
to indicate a error.
.TP
.B GLOB_ONLYDIR
This be a
.I hint
to
.BR glob ()
that tha calla is interested only up in directories dat match tha pattern.
If tha implementation can easily determine file-type shiznit,
then nondirectory filez is not moonwalked back ta tha caller.
But fuck dat shiznit yo, tha word on tha street is dat tha calla must still check dat returned files
are directories.
(Da purpose of dis flag is merely ta optimize performizzle when
the calla is interested only up in directories.)
.PP
If
.I errfunc
is not NULL,
it is ghon be called up in case of a error wit tha arguments
.IR epath ,
a pointa ta tha path which failed, and
.IR eerrno ,
the value of
.I errno
as returned from one of tha calls to
.BR opendir (3),
.BR readdir (3),
or
.BR stat (2).
If
.I errfunc
returns nonzero, or if
.B GLOB_ERR
is set,
.BR glob ()
will terminizzle afta tha call to
.IR errfunc .
.PP
Upon successful return,
.I pglob\->gl_pathc
gotz nuff tha number of matched pathnames and
.I pglob\->gl_pathv
gotz nuff a pointa ta tha list of pointas ta matched pathnames.
Da list of pointas is terminated by a NULL pointer.
.PP
It be possible ta call
.BR glob ()
several times.
In dat case, the
.B GLOB_APPEND
flag has ta be set in
.I flags
on tha second n' lata invocations.
.PP
As a GNU extension,
.I pglob\->gl_flags
is set ta tha flags specified,
.BR or ed
with
.B GLOB_MAGCHAR
if any metacharactas was found.
.SH RETURN VALUE
On successful completion,
.BR glob ()
returns zero.
Other possible returns are:
.TP
.B GLOB_NOSPACE
for hustlin outta memory,
.TP
.B GLOB_ABORTED
for a read error, and
.TP
.B GLOB_NOMATCH
for no found matches.
.SH CONFORMING TO
POSIX.2, POSIX.1-2001.
.SH NOTES
Da structure elements
.I gl_pathc
and
.I gl_offs
are declared as
.I size_t
in glibc 2.1, as they should be accordin ta POSIX.2,
but is declared as
.I int
in libc4, libc5 n' glibc 2.0.
.SH BUGS
The
.BR glob ()
function may fail cuz of failure of underlyin function calls, such as
.BR malloc (3)
or
.BR opendir (3).
These will store they error code in
.IR errno .
.SH EXAMPLE
One example of use is tha followin code, which simulates typing
.sp
.in +4n
ls \-l *.c ../*.c
.in
.sp
in tha shell:
.nf
.in +4n

glob_t globbuf;

globbuf.gl_offs = 2;
glob("*.c", GLOB_DOOFFS, NULL, &globbuf);
glob("../*.c", GLOB_DOOFFS | GLOB_APPEND, NULL, &globbuf);
globbuf.gl_pathv[0] = "ls";
globbuf.gl_pathv[1] = "\-l";
execvp("ls", &globbuf.gl_pathv[0]);
.in
.fi
.SH SEE ALSO
.BR ls (1),
.BR sh (1),
.BR stat (2),
.BR exec (3),
.BR fnmatch (3),
.BR malloc (3),
.BR opendir (3),
.BR readdir (3),
.BR wordexp (3),
.BR glob (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
