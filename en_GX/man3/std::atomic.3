" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::atomic< _Tp > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBatomic\fP (const \fBatomic\fP &)=delete"
.br
.ti -1c
.RI "constexpr \fBatomic\fP (_Tp __i) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __s, \fBmemory_order\fP __f) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __s, \fBmemory_order\fP __f) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __s, \fBmemory_order\fP __f) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __s, \fBmemory_order\fP __f) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (_Tp &__e, _Tp __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "_Tp \fBexchange\fP (_Tp __i, \fBmemory_order\fP _m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "_Tp \fBexchange\fP (_Tp __i, \fBmemory_order\fP _m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBis_lock_free\fP () const noexcept"
.br
.ti -1c
.RI "bool \fBis_lock_free\fP () const volatilenoexcept"
.br
.ti -1c
.RI "_Tp \fBload\fP (\fBmemory_order\fP _m=memory_order_seq_cst) const noexcept"
.br
.ti -1c
.RI "_Tp \fBload\fP (\fBmemory_order\fP _m=memory_order_seq_cst) const volatilenoexcept"
.br
.ti -1c
.RI "\fBoperator _Tp\fP () const noexcept"
.br
.ti -1c
.RI "\fBoperator _Tp\fP () const volatilenoexcept"
.br
.ti -1c
.RI "\fBatomic\fP & \fBoperator=\fP (const \fBatomic\fP &)=delete"
.br
.ti -1c
.RI "\fBatomic\fP & \fBoperator=\fP (const \fBatomic\fP &) volatile=delete"
.br
.ti -1c
.RI "_Tp \fBoperator=\fP (_Tp __i) noexcept"
.br
.ti -1c
.RI "_Tp \fBoperator=\fP (_Tp __i) volatilenoexcept"
.br
.ti -1c
.RI "void \fBstore\fP (_Tp __i, \fBmemory_order\fP _m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "void \fBstore\fP (_Tp __i, \fBmemory_order\fP _m=memory_order_seq_cst) volatilenoexcept"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp>struct std::atomic< _Tp >"
Generic atomic type, primary class template\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Tp\fP Type ta be made atomic, must be trivally copyable\&. 
.RE
.PP

.PP
Definizzle at line 161 of file atomic\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
