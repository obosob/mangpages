.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Find 3"
.TH Pod::Find 3 "2013-06-01" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Find \- find POD documents up in directory trees
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Pod::Find qw(pod_find simplify_name);
\&  mah %podz = pod_find({ \-verbose => 1, \-inc => 1 });
\&  foreach(keys %pods) {
\&     print "found library POD \`$pods{$_}\*(Aq up in $_\en";
\&  }
\&
\&  print "podname=",simplify_name(\*(Aqa/b/c/mymodule.pod\*(Aq),"\en";
\&
\&  $location = pod_where( { \-inc => 1 }, "Pod::Find" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBPod::Find\fR serves up a set of functions ta locate \s-1POD\s0 files.  Note that
no function is exported by default ta avoid bullshit of yo' namespace,
so be shizzle ta specify dem up in tha \fBuse\fR statement if you need them:
.PP
.Vb 1
\&  use Pod::Find qw(pod_find);
.Ve
.PP
From dis version on tha typical \s-1SCM \s0(software configuration pimpment)
files/directories like \s-1RCS, CVS, SCCS, \s0.svn is ignored.
.ie n .SS """pod_find( { %opts } , @directories )"""
.el .SS "\f(CWpod_find( { %opts } , @directories )\fP"
.IX Subsection "pod_find( { %opts } , @directories )"
Da function \fBpod_find\fR searches fo' \s-1POD\s0 documents up in a given set of
filez and/or directories. Put ya muthafuckin choppers up if ya feel dis! Well shiiiit, it returns a hash wit tha file names as keys
and tha \s-1POD\s0 name as value. Da \s-1POD\s0 name is derived from tha file name
and its posizzle up in tha directory tree.
.PP
E.g. when searchin up in \fI\f(CI$HOME\fI/perl5lib\fR, tha file
\&\fI\f(CI$HOME\fI/perl5lib/MyModule.pm\fR would git tha \s-1POD\s0 name \fIMyModule\fR,
whereas \fI\f(CI$HOME\fI/perl5lib/Myclass/Subclass.pm\fR would be
\&\fIMyclass::Subclass\fR. Da name shiznit can be used fo' \s-1POD\s0
translators.
.PP
Only text filez containin at least one valid \s-1POD\s0 command is found.
.PP
A warnin is printed if mo' than one \s-1POD\s0 file wit tha same \s-1POD\s0 name
is found, e.g. \fI\s-1CPAN\s0.pm\fR up in different directories. Put ya muthafuckin choppers up if ya feel dis! This usually
indicates duplicate occurrencez of modulez up in tha \fI\f(CI@INC\fI\fR search path.
.PP
\&\fB\s-1OPTIONS\s0\fR Da first argument fo' \fBpod_find\fR may be a hash reference
with options. Da rest is either directories dat is searched
recursively or files.  Da \s-1POD\s0 namez of filez is tha plain basenames
with any Perl-like extension (.pm, .pl, .pod) stripped.
.ie n .IP """\-verbose => 1""" 4
.el .IP "\f(CW\-verbose => 1\fR" 4
.IX Item "-verbose => 1"
Print progress shiznit while scanning.
.ie n .IP """\-perl => 1""" 4
.el .IP "\f(CW\-perl => 1\fR" 4
.IX Item "-perl => 1"
Apply Perl-specific heuristics ta find tha erect PODs. This includes
strippin Perl-like extensions, omittin subdirectories dat is numeric
but do \fInot\fR match tha current Perl interpreterz version id, suppressing
\&\fIsite_perl\fR as a module hierarchy name etc.
.ie n .IP """\-script => 1""" 4
.el .IP "\f(CW\-script => 1\fR" 4
.IX Item "-script => 1"
Search fo' PODs up in tha current Perl interpreterz installation 
\&\fBscriptdir\fR. This is taken from tha local Config module.
.ie n .IP """\-inc => 1""" 4
.el .IP "\f(CW\-inc => 1\fR" 4
.IX Item "-inc => 1"
Search fo' PODs up in tha current Perl interpreterz \fI\f(CI@INC\fI\fR paths. This
automatically considaz paths specified up in tha \f(CW\*(C`PERL5LIB\*(C'\fR environment
as dis is included up in \fI\f(CI@INC\fI\fR by tha Perl interpreta itself.
.ie n .SS """simplify_name( $str )"""
.el .SS "\f(CWsimplify_name( $str )\fP"
.IX Subsection "simplify_name( $str )"
Da function \fBsimplify_name\fR is equivalent ta \fBbasename\fR yo, but also
strips Perl-like extensions (.pm, .pl, .pod) n' extensions like
\&\fI.bat\fR, \fI.cmd\fR on Win32 n' \s-1OS/2,\s0 or \fI.com\fR on \s-1VMS,\s0 respectively.
.ie n .SS """pod_where( { %opts }, $pod )"""
.el .SS "\f(CWpod_where( { %opts }, $pod )\fP"
.IX Subsection "pod_where( { %opts }, $pod )"
Returns tha location of a pod document given a search directory
and a module (e.g. \f(CW\*(C`File::Find\*(C'\fR) or script (e.g. \f(CW\*(C`perldoc\*(C'\fR) name.
.PP
Options:
.ie n .IP """\-inc => 1""" 4
.el .IP "\f(CW\-inc => 1\fR" 4
.IX Item "-inc => 1"
Search \f(CW@INC\fR fo' tha pod n' also tha \f(CW\*(C`scriptdir\*(C'\fR defined up in the
Config module.
.ie n .IP """\-dirs => [ $dir1, $dir2, ... ]""" 4
.el .IP "\f(CW\-dirs => [ $dir1, $dir2, ... ]\fR" 4
.IX Item "-dirs => [ $dir1, $dir2, ... ]"
Reference ta a array of search directories. Put ya muthafuckin choppers up if ya feel dis! These is searched up in order
before lookin up in \f(CW@INC\fR (if \fB\-inc\fR). Current directory is used if
none is specified.
.ie n .IP """\-verbose => 1""" 4
.el .IP "\f(CW\-verbose => 1\fR" 4
.IX Item "-verbose => 1"
List directories as they is searched
.PP
Returns tha full path of tha straight-up original gangsta occurrence ta tha file.
Package names (eg 'A::B') is automatically converted ta directory
names up in tha selected directory. (eg on unix 'A::B' is converted to
\&'A/B') fo' realz. Additionally, '.pm', '.pl' n' '.pod' is appended ta the
search automatically if required.
.PP
A subdirectory \fIpod/\fR be also checked if it exists up in any of tha given
search directories. Put ya muthafuckin choppers up if ya feel dis! This ensures dat e.g. perlfunc is
found.
.PP
It be assumed dat if a module name is supplied, dat that name
matches tha file name. Podz is not opened ta check fo' tha '\s-1NAME\s0'
entry.
.PP
A check is made ta make shizzle dat tha file dat is found do 
contain some pod documentation.
.ie n .SS """gotz nuff_pod( $file , $verbose )"""
.el .SS "\f(CWgotz nuff_pod( $file , $verbose )\fP"
.IX Subsection "gotz nuff_pod( $file , $verbose )"
Returns legit if tha supplied filename (not \s-1POD\s0 module) gotz nuff some pod
information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Please report bugs rockin <http://rt.cpan.org>.
.PP
Marek Rouchal <marekr@cpan.org>,
heavily borrowin code from Nick Ing\-Simmons' PodToHtml.
.PP
Slim Tim Jennizz <t.jenness@jach.hawaii.edu> provided
\&\f(CW\*(C`pod_where\*(C'\fR n' \f(CW\*(C`gotz nuff_pod\*(C'\fR.
.PP
\&\fBPod::Find\fR is part of tha Pod::Parser distribution.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Parser, Pod::Checker, perldoc
