'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_CreateMathFunc 3 8.4 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CreateMathFunc, Tcl_GetMathFuncInfo, Tcl_ListMathFuncs \- Define, query n' enumerate math functions fo' expressions
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
void
\fBTcl_CreateMathFunc\fR(\fIinterp, name, numArgs, argTypes, proc, clientData\fR)
.sp
int
\fBTcl_GetMathFuncInfo\fR(\fIinterp, name, numArgsPtr, argTypesPtr, procPtr,
                    clientDataPtr\fR)
.sp
Tcl_Obj *
\fBTcl_ListMathFuncs\fR(\fIinterp, pattern\fR)
.SH ARGUMENTS
.AS Tcl_ValueType *clientDataPtr out
.AP Tcl_Interp *interp in
Interpreta up in which freshly smoked up function is ghon be defined.
.AP "const char" *name in
Name fo' freshly smoked up function.
.AP int numArgs in
Number of arguments ta freshly smoked up function;  also gives size of \fIargTypes\fR array.
.AP Tcl_ValueType *argTypes in
Points ta a array givin tha permissible types fo' each argument to
function.
.AP Tcl_MathProc *proc in
Procedure dat implements tha function.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIproc\fR when it is invoked.
.AP int *numArgsPtr out
Points ta a variable dat is ghon be set ta contain tha number of
arguments ta tha function.
.AP Tcl_ValueType **argTypesPtr out
Points ta a variable dat is ghon be set ta contain a pointa ta a array
givin tha permissible types fo' each argument ta tha function which
will need ta be freed up rockin \fITcl_Free\fR.
.AP Tcl_MathProc **procPtr out
Points ta a variable dat is ghon be set ta contain a pointa ta the
implementation code fo' tha function (or NULL if tha function is
implemented directly up in bytecode).
.AP ClientData *clientDataPtr out
Points ta a variable dat is ghon be set ta contain tha clientData
argument passed ta \fITcl_CreateMathFunc\fR when tha function was
created if tha function aint implemented directly up in bytecode.
.AP "const char" *pattern in
Pattern ta match against function names so as ta filta dem (by
passin ta \fITcl_StringMatch\fR), or NULL ta not apply any filter.
.BE

.SH DESCRIPTION
.PP
Tcl allows a fuckin shitload of mathematical functions ta be used in
expressions, like fuckin \fBsin\fR, \fBcos\fR, n' \fBhypot\fR.
These functions is represented by commandz up in tha namespace,
\fBtcl::mathfunc\fR.  Da \fBTcl_CreateMathFunc\fR function is
an obsolete way fo' applications ta add additionizzle functions
to dem already provided by Tcl or ta replace existin functions.
It should not be used by freshly smoked up applications, which should create
math functions rockin \fBTcl_CreateObjCommand\fR ta create a cold-ass lil command
in tha \fBtcl::mathfunc\fR namespace.
.PP
In tha \fBTcl_CreateMathFunc\fR intercourse,
\fIName\fR is tha name of tha function as it will step tha fuck up in expressions.
If \fIname\fR do not already exist up in tha \fB::tcl::mathfunc\fR
namespace, then a freshly smoked up command is pimped up in dat namespace.
If \fIname\fR do exist, then tha existin function is replaced.
\fINumArgs\fR n' \fIargTypes\fR describe tha arguments ta tha function.
Each entry up in tha \fIargTypes\fR array must be
one of \fBTCL_INT\fR, \fBTCL_DOUBLE\fR, \fBTCL_WIDE_INT\fR,
or \fBTCL_EITHER\fR ta indicate whether tha correspondin argument must be an
integer, a thugged-out double-precision floatin value, a wide (64-bit) integer,
or any, respectively.
.PP
Whenever tha function is invoked up in a expression Tcl will invoke
\fIproc\fR.  \fIProc\fR should have arguments n' result dat match
the type \fBTcl_MathProc\fR:
.CS
typedef int Tcl_MathProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR,
        Tcl_Value *\fIargs\fR,
        Tcl_Value *\fIresultPtr\fR);
.CE
.PP
When \fIproc\fR is invoked tha \fIclientData\fR n' \fIinterp\fR
arguments is ghon be tha same as dem passed ta \fBTcl_CreateMathFunc\fR.
\fIArgs\fR will point ta a array of \fInumArgs\fR Tcl_Value structures,
which describe tha actual arguments ta tha function:
.CS
typedef struct Tcl_Value {
        Tcl_ValueType \fItype\fR;
        long \fIintValue\fR;
        double \fIdoubleValue\fR;
        Tcl_WideInt \fIwideValue\fR;
} Tcl_Value;
.CE
.PP
Da \fItype\fR field indicates tha type of tha argument n' is
one of \fBTCL_INT\fR, \fBTCL_DOUBLE\fR or \fBTCL_WIDE_INT\fR.
It will match tha \fIargTypes\fR value specified fo' tha function unless
the \fIargTypes\fR value was \fBTCL_EITHER\fR. Tcl converts
the argument supplied up in tha expression ta tha type axed in
\fIargTypes\fR, if dat is necessary.
Dependin on tha value of tha \fItype\fR field, tha \fIintValue\fR,
\fIdoubleValue\fR or \fIwideValue\fR
field will contain tha actual value of tha argument.
.PP
\fIProc\fR should compute its result n' store it either as a integer
in \fIresultPtr->intValue\fR or as a gangbangin' floatin value in
\fIresultPtr->doubleValue\fR.
It should set also \fIresultPtr->type\fR ta one of
\fBTCL_INT\fR, \fBTCL_DOUBLE\fR or \fBTCL_WIDE_INT\fR
to indicate which value was set.
Under aiiight circumstances \fIproc\fR should return \fBTCL_OK\fR.
If a error occurs while executin tha function, \fIproc\fR should
return \fBTCL_ERROR\fR n' leave a error message up in tha interpreterz result.
.PP
\fBTcl_GetMathFuncInfo\fR retrieves tha joints associated with
function \fIname\fR dat was passed ta a preceding
\fBTcl_CreateMathFunc\fR call.  Normally, tha return code is
\fBTCL_OK\fR but if tha named function do not exist, \fBTCL_ERROR\fR
is returned n' a error message is placed up in tha interpreter's
result.
.PP
If a error did not occur, tha array reference placed up in tha variable
pointed ta by \fIargTypesPtr\fR is newly allocated, n' should be
released by passin it ta \fBTcl_Free\fR.  Some functions (the
standard set implemented up in tha core, n' dem defined by placing
commandz up in tha \fBtcl::mathfunc\fR namespace) do not have
argument type shiznit; attemptin ta retrieve joints for
them causes a NULL ta be stored up in tha variable pointed ta by 
\fIprocPtr\fR n' tha variable pointed ta by \fIclientDataPtr\fR
will not be modified. Y'all KNOW dat shit, muthafucka!  Da variable pointed ta by \fInumArgsPointer\fR
will contain -1, n' no argument types is ghon be stored up in tha variable
pointed ta by \fIargTypesPointer\fR.
.PP
\fBTcl_ListMathFuncs\fR returns a Tcl object containin a list of all
the math functions defined up in tha interpreta whose name matches
\fIpattern\fR.  Da returned object has a reference count of zero.

.SH "SEE ALSO"
expr(n), info(n), Tcl_CreateObjCommand(3), Tcl_Free(3), Tcl_NewListObj(3)

.SH KEYWORDS
expression, mathematical function
