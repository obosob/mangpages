'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_CreateCommand 3 "" Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CreateCommand \- implement freshly smoked up commandz up in C
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Command
\fBTcl_CreateCommand\fR(\fIinterp, cmdName, proc, clientData, deleteProc\fR)
.SH ARGUMENTS
.AS Tcl_CmdDeleteProc *deleteProc
.AP Tcl_Interp *interp in
Interpreta up in which ta create freshly smoked up command.
.AP "const char" *cmdName in
Name of command.
.AP Tcl_CmdProc *proc in
Implementation of freshly smoked up command:  \fIproc\fR is ghon be called whenever
\fIcmdName\fR is invoked as a cold-ass lil command.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIproc\fR n' \fIdeleteProc\fR.
.AP Tcl_CmdDeleteProc *deleteProc in
Procedure ta booty-call before \fIcmdName\fR is deleted from tha interpreter;
allows fo' command-specific cleanup.  If NULL, then no procedure is
called before tha command is deleted.
.BE

.SH DESCRIPTION
.PP
\fBTcl_CreateCommand\fR defines a freshly smoked up command up in \fIinterp\fR n' associates
it wit procedure \fIproc\fR such dat whenever \fIcmdName\fR is
invoked as a Tcl command (via a cold-ass lil call ta \fBTcl_Eval\fR) tha Tcl interpreter
will call \fIproc\fR ta process tha command.
It differs from \fBTcl_CreateObjCommand\fR up in dat a freshly smoked up string-based
command is defined;
that is, a cold-ass lil command procedure is defined dat takes a array of
argument strings instead of objects.
Da object-based command procedures registered by \fBTcl_CreateObjCommand\fR
can execute hella fasta than tha string-based command procedures
defined by \fBTcl_CreateCommand\fR.
This is cuz they take Tcl objects as arguments
and dem objects can retain a internal representation that
can be manipulated mo' efficiently.
Also, Tclz interpreta now uses objects internally.
In order ta invoke a string-based command procedure
registered by \fBTcl_CreateCommand\fR,
it must generate n' fetch a strang representation
from each argument object before tha call
and create a freshly smoked up Tcl object ta hold tha strang result returned by the
string-based command procedure.
New commandz should be defined rockin \fBTcl_CreateObjCommand\fR.
We support \fBTcl_CreateCommand\fR fo' backwardz compatibility.
.PP
Da procedures \fBTcl_DeleteCommand\fR, \fBTcl_GetCommandInfo\fR,
and \fBTcl_SetCommandInfo\fR is used up in conjunction with
\fBTcl_CreateCommand\fR.
.PP
\fBTcl_CreateCommand\fR will delete a existin command \fIcmdName\fR,
if one be already associated wit tha interpreter.
It returns a token dat may be used ta refer
to tha command up in subsequent calls ta \fBTcl_GetCommandName\fR.
If \fIcmdName\fR gotz nuff any \fB::\fR namespace qualifiers,
then tha command be added ta tha specified namespace;
otherwise tha command be added ta tha global namespace.
If \fBTcl_CreateCommand\fR is called fo' a interpreta dat is in
the process of bein deleted, then it do not create a freshly smoked up command
and it returns NULL.
\fIProc\fR should have arguments n' result dat match tha type
\fBTcl_CmdProc\fR:
.CS
typedef int Tcl_CmdProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR,
        int \fIargc\fR,
        const char *\fIargv\fR[]);
.CE
When \fIproc\fR is invoked tha \fIclientData\fR n' \fIinterp\fR
parametas is ghon be copiez of tha \fIclientData\fR n' \fIinterp\fR
arguments given ta \fBTcl_CreateCommand\fR.
Typically, \fIclientData\fR points ta a application-specific
data structure dat raps bout what tha fuck ta do when tha command procedure
is invoked. Y'all KNOW dat shit, muthafucka!  \fIArgc\fR n' \fIargv\fR describe tha arguments to
the command, \fIargc\fR givin tha number of arguments (including
the command name) n' \fIargv\fR givin tha jointz of tha arguments
as strings.  Da \fIargv\fR array will contain \fIargc\fR+1 joints;
the first \fIargc\fR joints point ta tha argument strings, n' the
last value is NULL.  
Note dat tha argument strings should not be modified as they may
point ta constant strings or may be shared wit other partz of the
interpreter.
.PP
Note dat tha argument strings is encoded up in normalized UTF-8 since
version 8.1 of Tcl.
.PP
\fIProc\fR must return a integer code dat is sposed ta fuckin be one of
\fBTCL_OK\fR, \fBTCL_ERROR\fR, \fBTCL_RETURN\fR, \fBTCL_BREAK\fR, or
\fBTCL_CONTINUE\fR.  See tha Tcl overview playa page
for details on what tha fuck these codes mean. I aint talkin' bout chicken n' gravy biatch.  Most aiiight commandz will only
return \fBTCL_OK\fR or \fBTCL_ERROR\fR.  In addition, \fIproc\fR must set
the interpreta result ta point ta a strang value;
in tha case of a \fBTCL_OK\fR return code dis gives tha result
of tha command, n' up in tha case of \fBTCL_ERROR\fR it gives a error message.
Da \fBTcl_SetResult\fR procedure serves up a easy as fuck  intercourse fo' setting
the return value;  fo' complete details on how tha fuck tha interpreta result
field is managed, peep tha \fBTcl_Interp\fR playa page.
Before invokin a cold-ass lil command procedure,
\fBTcl_Eval\fR sets tha interpreta result ta point ta a empty string,
so simple commandz can return a empty result by bustin not a god damn thang at all.
.PP
Da contentz of tha \fIargv\fR array belong ta Tcl n' is not
guaranteed ta persist once \fIproc\fR returns:  \fIproc\fR should
not modify them, nor should it set tha interpreta result ta point
anywhere within tha \fIargv\fR joints.
Call \fBTcl_SetResult\fR wit status \fBTCL_VOLATILE\fR if you want
to return suttin' from tha \fIargv\fR array.
.PP
\fIDeleteProc\fR is ghon be invoked when (if) \fIcmdName\fR is deleted.
This can occur all up in a cold-ass lil call ta \fBTcl_DeleteCommand\fR or \fBTcl_DeleteInterp\fR,
or by replacin \fIcmdName\fR up in another call ta \fBTcl_CreateCommand\fR.
\fIDeleteProc\fR is invoked before tha command is deleted, n' gives the
application a opportunitizzle ta release any structures associated
with tha command. Y'all KNOW dat shit, muthafucka!  \fIDeleteProc\fR should have arguments and
result dat match tha type \fBTcl_CmdDeleteProc\fR:
.CS
typedef void Tcl_CmdDeleteProc(
        ClientData \fIclientData\fR);
.CE
Da \fIclientData\fR argument is ghon be tha same as tha \fIclientData\fR
argument passed ta \fBTcl_CreateCommand\fR.

.SH "SEE ALSO"
Tcl_CreateObjCommand, Tcl_DeleteCommand, Tcl_GetCommandInfo, Tcl_SetCommandInfo, Tcl_GetCommandName, Tcl_SetObjResult

.SH KEYWORDS
bind, command, create, delete, interpreter, namespace
