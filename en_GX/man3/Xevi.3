.\" Copyright (c) 1997  Silicon Graphics, Inc.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included in
.\" all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
.\" WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
.\" OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of Silicon Graphics, Inc. shall not
.\" be used up in advertisin or otherwise ta promote tha sale, use or other
.\" dealin up in dis Software without prior freestyled authorization from
.\" Silicon Graphics, Inc.
.\"
.TH XEVI 3 "libXext 1.3.2" "X Version 11" "X FUNCTIONS"
.SH NAME
XeviQueryExtension, XeviQueryVersion, XeviGetVisualInfo - X Extended Visual Hype functions
.SH SYNOPSIS
\&#include <X11/extensions/XEVI.h>

Bool
XeviQueryExtension (Display *dpy);
.LP
Bool
XeviQueryVersion (Display *dpy,
    int *major_version_return,
    int *minor_version_return);
.LP
int
XeviGetVisualInfo (Display *dpy, VisualID *visual,
    int n_visual, ExtendedVisualInfo ** evi_return,
    int * n_info_return);
.fi
.SH DESCRIPTION
The
X11 Extended Visual Hype extension (EVI) allows a cold-ass lil client ta determine
information bout core X visuals beyond what tha fuck tha core protocol provides.

Da EVI application programmin library gotz nuff tha intercourses busted lyrics bout below.
With tha exception of
.BR XeviQueryExtension,
if any of these routines are
called wit a gangbangin' finger-lickin' display dat do not support tha extension, the
ExtensionErrorHandlez (which can be set with
.BR XSetExtensionErrorHandlez
and functions tha same ol' dirty way as
.BR XSetErrorHandlez )
will be called n' tha function will then return.
.PP
.BR XeviQueryExtension
returns
.BR True
if tha Extended Visual Hype extension be available on tha given display.
A client must call
.BR XeviQueryExtension
before callin any other EVI
function up in order ta negotiate a cold-ass lil compatible protocol version; otherwise
the client will git undefined behavior (EVI may or may not work).
.PP
.BR XeviQueryVersion
returns
.BR True
if tha request succeeded; tha jointz of tha major n' minor protocol
version supported by tha server is returned in
.I major_version_return
and
.I minor_version_return.
.PP
.BR XeviGetVisualInfo
returns a list of ExtendedVisualInfo structures dat describe
visual shiznit beyond dat supported by tha core protocol. This includes
layer shiznit relevant fo' systems supportin overlays and/or underlay
planes, n' shiznit dat allows applications betta ta determine tha level
of hardware support fo' multiple colormaps. XeviGetVisualInfo returns
.BR Success
if successful, or a X error otherwise.
If tha argument
.I visual
is NULL, then shiznit fo' all visualz of all
screens is returned. Y'all KNOW dat shit, muthafucka! Otherwise, itz a pointa ta a list of visuals fo' which
extended visual shiznit is desired.
.I n_visual
is tha number of elements up in tha array visual.
.I evi_return
returns a pointa ta a list of ExtendedVisualInfo. When done, tha client
should free tha list rockin XFree\.
.I n_info_return
returns tha number of elements up in tha array evi_return.
.LP
The
.BR ExtendedVisualInfo
structure has tha followin fields:
.in +.5i
.nf
.ta 1.6i
VisualID	\fIcore_visual_id\fR
int 	\fIscreen\fR
int 	\fIlevel\fR
unsigned int	\fItransparency_type\fR
unsigned int	\fItransparency_value\fR
unsigned int	\fImin_hw_colormaps\fR
unsigned int	\fImax_hw_colormaps\fR
unsigned int	\fInum_colormap_conflicts\fR
VisualID *  	\fIcolormap_conflicts\fR
.fi
.LP
Da combination of
.I core_visual_id
and
.I screen
number uniquely specify tha visual bein busted lyrics about.
.LP
.I level
returns tha level number fo' tha visual, 0 fo' aiiight planes, > 0 for
overlays, < 0 fo' underlays.
.LP
.I
transparency_type
returns tha type of transparency supported by tha visual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. XEVI_TRANSPARENCY_NONE if
there is no transparent pixels, XEVI_TRANSPARENCY_PIXEL if tha visual supports
a transparent pixel, XEVI_TRANSPARENCY_MASK if tha visual supports transparent
plane(s).
.LP
.I transparency_value
returns tha pixel/plane value ta set fo' transparency if transparency_type aint
XEVI_TRANSPARENCY_NONE.
.LP
.I min_hw_colormaps
and
.I max_hw_colormaps
return tha minimum n' maximum number of hardware colormaps backin up the
visual.
.LP
.I num_colormap_conflicts
returns tha number of elements in
.I colormap_conflicts.
This array returns a list of visuals dat may cause conflicts up in tha use of the
hardware colormap. For example, if a 12-bit hardware colormap is overloaded to
support 8-bit colormaps, tha correspondin 8-bit visuals would conflict wit the
12-bit visuals.

.SH ERRORS
.BR XeviGetVisualInfo
will return
.I BadValue
if passed a illegal visual ID,
.I BadAccess
if tha X server do not respond,
.I BadAlloc
if there be a memory allocation failure.
