.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BIO_s_mem 3"
.TH BIO_s_mem 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
BIO_s_mem, BIO_set_mem_eof_return, BIO_get_mem_data, BIO_set_mem_buf,
BIO_get_mem_ptr, BIO_new_mem_buf \- memory BIO
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/bio.h>
\&
\& BIO_METHOD *   BIO_s_mem(void);
\&
\& BIO_set_mem_eof_return(BIO *b,int v)
\& long BIO_get_mem_data(BIO *b, char **pp)
\& BIO_set_mem_buf(BIO *b,BUF_MEM *bm,int c)
\& BIO_get_mem_ptr(BIO *b,BUF_MEM **pp)
\&
\& BIO *BIO_new_mem_buf(void *buf, int len);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIBIO_s_mem()\fR return tha memory \s-1BIO\s0 method function.
.PP
A memory \s-1BIO\s0 be a source/sink \s-1BIO\s0 which uses memory fo' its I/O. Data
written ta a memory \s-1BIO\s0 is stored up in a \s-1BUF_MEM\s0 structure which is extended
as appropriate ta accommodate tha stored data.
.PP
Any data freestyled ta a memory \s-1BIO\s0 can be recalled by readin from dat shit.
Unless tha memory \s-1BIO\s0 is read only any data read from it is deleted from
the \s-1BIO.\s0
.PP
Memory BIOs support \fIBIO_gets()\fR n' \fIBIO_puts()\fR.
.PP
If tha \s-1BIO_CLOSE\s0 flag is set when a memory \s-1BIO\s0 is freed then tha underlying
\&\s-1BUF_MEM\s0 structure be also freed.
.PP
Callin \fIBIO_reset()\fR on a read write memory \s-1BIO\s0 clears any data up in dat shit. On a
read only \s-1BIO\s0 it restores tha \s-1BIO\s0 ta its original gangsta state n' tha read only
data can be read again.
.PP
\&\fIBIO_eof()\fR is legit if no data is up in tha \s-1BIO.\s0
.PP
\&\fIBIO_ctrl_pending()\fR returns tha number of bytes currently stored.
.PP
\&\fIBIO_set_mem_eof_return()\fR sets tha behaviour of memory \s-1BIO \s0\fBb\fR when it is
empty. If tha \fBv\fR is zero then a empty memory \s-1BIO\s0 will return \s-1EOF \s0(that is
it will return zero n' BIO_should_retry(b) is ghon be false. If \fBv\fR is non
zero then it will return \fBv\fR when it is empty n' it will set tha read retry
flag (that is BIO_read_retry(b) is true). To avoid ambiguitizzle wit a normal
positizzle return value \fBv\fR should be set ta a wack value, typically \-1.
.PP
\&\fIBIO_get_mem_data()\fR sets \fBpp\fR ta a pointa ta tha start of tha memory BIOs data
and returns tha total amount of data available. Well shiiiit, it is implemented as a macro.
.PP
\&\fIBIO_set_mem_buf()\fR sets tha internal \s-1BUF_MEM\s0 structure ta \fBbm\fR n' sets the
close flag ta \fBc\fR, dat is \fBc\fR should be either \s-1BIO_CLOSE\s0 or \s-1BIO_NOCLOSE.\s0
It be a macro.
.PP
\&\fIBIO_get_mem_ptr()\fR places tha underlyin \s-1BUF_MEM\s0 structure up in \fBpp\fR. Well shiiiit, it is
a macro.
.PP
\&\fIBIO_new_mem_buf()\fR creates a memory \s-1BIO\s0 rockin \fBlen\fR bytez of data at \fBbuf\fR,
if \fBlen\fR is \-1 then tha \fBbuf\fR be assumed ta be null terminated n' its
length is determined by \fBstrlen\fR. Da \s-1BIO\s0 is set ta a read only state and
as a result cannot be freestyled to. This is useful when some data need ta be
made available from a static area of memory up in tha form of a \s-1BIO.\s0 The
supplied data is read directly from tha supplied buffer: it is \fBnot\fR copied
first, so tha supplied area of memory must be unchanged until tha \s-1BIO\s0 is freed.
.SH "NOTES"
.IX Header "NOTES"
Writes ta memory BIOs will always succeed if memory be available: dat is
their size can grow indefinitely.
.PP
Every read from a read write memory \s-1BIO\s0 will remove tha data just read with
an internal copy operation, if a \s-1BIO\s0 gotz nuff a shitload of data n' it is
read up in lil' small-ass chunks tha operation can be straight-up slow. Da use of a read only
memory \s-1BIO\s0 avoidz dis problem. If tha \s-1BIO\s0 must be read write then adding
a bufferin \s-1BIO\s0 ta tha chain will speed up tha process.
.SH "BUGS"
.IX Header "BUGS"
There should be a option ta set tha maximum size of a memory \s-1BIO.\s0
.PP
There should be a way ta \*(L"rewind\*(R" a read write \s-1BIO\s0 without destroying
its contents.
.PP
Da copyin operation should not occur afta every last muthafuckin lil' small-ass read of a big-ass \s-1BIO\s0
to improve efficiency.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Smoke a memory \s-1BIO\s0 n' write some data ta it:
.PP
.Vb 2
\& BIO *mem = BIO_new(BIO_s_mem());
\& BIO_puts(mem, "Wuz crackalackin' World\en");
.Ve
.PP
Smoke a read only memory \s-1BIO:\s0
.PP
.Vb 3
\& char data[] = "Wuz crackalackin' World";
\& BIO *mem;
\& mem = BIO_new_mem_buf(data, \-1);
.Ve
.PP
Extract tha \s-1BUF_MEM\s0 structure from a memory \s-1BIO\s0 n' then free up tha \s-1BIO:\s0
.PP
.Vb 4
\& BUF_MEM *bptr;
\& BIO_get_mem_ptr(mem, &bptr);
\& BIO_set_close(mem, BIO_NOCLOSE); /* So BIO_free() leaves BUF_MEM ridin' solo */
\& BIO_free(mem);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1TBA\s0
