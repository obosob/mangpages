.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EVP_DigestInit 3"
.TH EVP_DigestInit 3 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
EVP_MD_CTX_init, EVP_MD_CTX_create, EVP_DigestInit_ex, EVP_DigestUpdate,
EVP_DigestFinal_ex, EVP_MD_CTX_cleanup, EVP_MD_CTX_destroy, EVP_MAX_MD_SIZE,
EVP_MD_CTX_copy_ex, EVP_MD_CTX_copy, EVP_MD_type, EVP_MD_pkey_type, EVP_MD_size,
EVP_MD_block_size, EVP_MD_CTX_md, EVP_MD_CTX_size, EVP_MD_CTX_block_size, EVP_MD_CTX_type,
EVP_md_null, EVP_md2, EVP_md5, EVP_sha, EVP_sha1, EVP_sha224, EVP_sha256,
EVP_sha384, EVP_sha512, EVP_dss, EVP_dss1, EVP_mdc2,
EVP_ripemd160, EVP_get_digestbyname, EVP_get_digestbynid, EVP_get_digestbyobj \-
EVP digest routines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/evp.h>
\&
\& void EVP_MD_CTX_init(EVP_MD_CTX *ctx);
\& EVP_MD_CTX *EVP_MD_CTX_create(void);
\&
\& int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
\& int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);
\& int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md,
\&        unsigned int *s);
\&
\& int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx);
\& void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx);
\&
\& int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out,const EVP_MD_CTX *in);  
\&
\& int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
\& int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md,
\&        unsigned int *s);
\&
\& int EVP_MD_CTX_copy(EVP_MD_CTX *out,EVP_MD_CTX *in);  
\&
\& #define EVP_MAX_MD_SIZE 64     /* SHA512 */
\&
\& int EVP_MD_type(const EVP_MD *md);
\& int EVP_MD_pkey_type(const EVP_MD *md);        
\& int EVP_MD_size(const EVP_MD *md);
\& int EVP_MD_block_size(const EVP_MD *md);
\&
\& const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx);
\& #define EVP_MD_CTX_size(e)             EVP_MD_size(EVP_MD_CTX_md(e))
\& #define EVP_MD_CTX_block_size(e)       EVP_MD_block_size((e)\->digest)
\& #define EVP_MD_CTX_type(e)             EVP_MD_type((e)\->digest)
\&
\& const EVP_MD *EVP_md_null(void);
\& const EVP_MD *EVP_md2(void);
\& const EVP_MD *EVP_md5(void);
\& const EVP_MD *EVP_sha(void);
\& const EVP_MD *EVP_sha1(void);
\& const EVP_MD *EVP_dss(void);
\& const EVP_MD *EVP_dss1(void);
\& const EVP_MD *EVP_mdc2(void);
\& const EVP_MD *EVP_ripemd160(void);
\&
\& const EVP_MD *EVP_sha224(void);
\& const EVP_MD *EVP_sha256(void);
\& const EVP_MD *EVP_sha384(void);
\& const EVP_MD *EVP_sha512(void);
\&
\& const EVP_MD *EVP_get_digestbyname(const char *name);
\& #define EVP_get_digestbynid(a) EVP_get_digestbyname(OBJ_nid2sn(a))
\& #define EVP_get_digestbyobj(a) EVP_get_digestbynid(OBJ_obj2nid(a))
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \s-1EVP\s0 digest routines is a high level intercourse ta message digests.
.PP
\&\fIEVP_MD_CTX_init()\fR initializes digest context \fBctx\fR.
.PP
\&\fIEVP_MD_CTX_create()\fR allocates, initializes n' returns a gangbangin' finger-lickin' digest context.
.PP
\&\fIEVP_DigestInit_ex()\fR sets up digest context \fBctx\fR ta bust a gangbangin' finger-lickin' digest
\&\fBtype\fR from \s-1ENGINE \s0\fBimpl\fR. \fBctx\fR must be initialized before callin this
function. I aint talkin' bout chicken n' gravy biatch. \fBtype\fR will typically be supplied by a gangbangin' function like fuckin \fIEVP_sha1()\fR.
If \fBimpl\fR is \s-1NULL\s0 then tha default implementation of digest \fBtype\fR is used.
.PP
\&\fIEVP_DigestUpdate()\fR hashes \fBcnt\fR bytez of data at \fBd\fR tha fuck into the
digest context \fBctx\fR. This function can be called nuff muthafuckin times on the
same \fBctx\fR ta hash additionizzle data.
.PP
\&\fIEVP_DigestFinal_ex()\fR retrieves tha digest value from \fBctx\fR n' places
it up in \fBmd\fR. If tha \fBs\fR parameta aint \s-1NULL\s0 then tha number of
bytez of data freestyled (i.e. tha length of tha digest) is ghon be written
to tha integer at \fBs\fR, at most \fB\s-1EVP_MAX_MD_SIZE\s0\fR bytes is ghon be written.
Afta callin \fIEVP_DigestFinal_ex()\fR no additionizzle calls ta \fIEVP_DigestUpdate()\fR
can be made yo, but \fIEVP_DigestInit_ex()\fR can be called ta initialize a new
digest operation.
.PP
\&\fIEVP_MD_CTX_cleanup()\fR cleans up digest context \fBctx\fR, it should be called
afta a gangbangin' finger-lickin' digest context is no longer needed.
.PP
\&\fIEVP_MD_CTX_destroy()\fR cleans up digest context \fBctx\fR n' frees up the
space allocated ta it, it should be called only on a cold-ass lil context pimped
usin \fIEVP_MD_CTX_create()\fR.
.PP
\&\fIEVP_MD_CTX_copy_ex()\fR can be used ta copy tha message digest state from
\&\fBin\fR ta \fBout\fR. This is useful if big-ass amountz of data is ta be
hashed which only differ up in tha last few bytes. \fBout\fR must be initialized
before callin dis function.
.PP
\&\fIEVP_DigestInit()\fR behaves up in tha same way as \fIEVP_DigestInit_ex()\fR except
the passed context \fBctx\fR do not gotta be initialized, n' it always
uses tha default digest implementation.
.PP
\&\fIEVP_DigestFinal()\fR is similar ta \fIEVP_DigestFinal_ex()\fR except tha digest
context \fBctx\fR be automatically cleaned up.
.PP
\&\fIEVP_MD_CTX_copy()\fR is similar ta \fIEVP_MD_CTX_copy_ex()\fR except tha destination
\&\fBout\fR do not gotta be initialized.
.PP
\&\fIEVP_MD_size()\fR n' \fIEVP_MD_CTX_size()\fR return tha size of tha message digest
when passed a \fB\s-1EVP_MD\s0\fR or a \fB\s-1EVP_MD_CTX\s0\fR structure, i.e. tha size of the
hash.
.PP
\&\fIEVP_MD_block_size()\fR n' \fIEVP_MD_CTX_block_size()\fR return tha block size of the
message digest when passed a \fB\s-1EVP_MD\s0\fR or a \fB\s-1EVP_MD_CTX\s0\fR structure.
.PP
\&\fIEVP_MD_type()\fR n' \fIEVP_MD_CTX_type()\fR return tha \s-1NID\s0 of tha \s-1OBJECT IDENTIFIER\s0
representin tha given message digest when passed a \fB\s-1EVP_MD\s0\fR structure.
For example EVP_MD_type(\fIEVP_sha1()\fR) returns \fBNID_sha1\fR. This function is
normally used when settin \s-1ASN1\s0 OIDs.
.PP
\&\fIEVP_MD_CTX_md()\fR returns tha \fB\s-1EVP_MD\s0\fR structure correspondin ta tha passed
\&\fB\s-1EVP_MD_CTX\s0\fR.
.PP
\&\fIEVP_MD_pkey_type()\fR returns tha \s-1NID\s0 of tha hood key signin algorithm associated
with dis digest. For example \fIEVP_sha1()\fR be associated wit \s-1RSA\s0 so dis will
return \fBNID_sha1WithRSAEncryption\fR. Right back up in yo muthafuckin ass. Since digests n' signature algorithms
are no longer linked dis function is only retained fo' compatibility
reasons.
.PP
\&\fIEVP_md2()\fR, \fIEVP_md5()\fR, \fIEVP_sha()\fR, \fIEVP_sha1()\fR, \fIEVP_sha224()\fR, \fIEVP_sha256()\fR,
\&\fIEVP_sha384()\fR, \fIEVP_sha512()\fR, \fIEVP_mdc2()\fR n' \fIEVP_ripemd160()\fR return \fB\s-1EVP_MD\s0\fR
structures fo' tha \s-1MD2, MD5, SHA, SHA1, SHA224, SHA256, SHA384, SHA512, MDC2\s0
and \s-1RIPEMD160\s0 digest algorithms respectively.
.PP
\&\fIEVP_dss()\fR n' \fIEVP_dss1()\fR return \fB\s-1EVP_MD\s0\fR structures fo' \s-1SHA\s0 n' \s-1SHA1\s0 digest
algorithms but rockin \s-1DSS \s0(\s-1DSA\s0) fo' tha signature algorithm. Note: there is 
no need ta use these pseudo-digests up in OpenSSL 1.0.0 n' later, they are
however retained fo' compatibility.
.PP
\&\fIEVP_md_null()\fR be a \*(L"null\*(R" message digest dat do nothing: i.e. tha hash it
returns iz of zero length.
.PP
\&\fIEVP_get_digestbyname()\fR, \fIEVP_get_digestbynid()\fR n' \fIEVP_get_digestbyobj()\fR
return a \fB\s-1EVP_MD\s0\fR structure when passed a gangbangin' finger-lickin' digest name, a gangbangin' finger-lickin' digest \s-1NID\s0 or
an \s-1ASN1_OBJECT\s0 structure respectively. Da digest table must be initialized
using, fo' example, \fIOpenSSL_add_all_digests()\fR fo' these functions ta work.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIEVP_DigestInit_ex()\fR, \fIEVP_DigestUpdate()\fR n' \fIEVP_DigestFinal_ex()\fR return 1 for
success n' 0 fo' failure.
.PP
\&\fIEVP_MD_CTX_copy_ex()\fR returns 1 if successful or 0 fo' failure.
.PP
\&\fIEVP_MD_type()\fR, \fIEVP_MD_pkey_type()\fR n' \fIEVP_MD_type()\fR return tha \s-1NID\s0 of the
correspondin \s-1OBJECT IDENTIFIER\s0 or NID_undef if none exists.
.PP
\&\fIEVP_MD_size()\fR, \fIEVP_MD_block_size()\fR, EVP_MD_CTX_size(e), \fIEVP_MD_size()\fR,
\&\fIEVP_MD_CTX_block_size()\fR	and \fIEVP_MD_block_size()\fR return tha digest or block
size up in bytes.
.PP
\&\fIEVP_md_null()\fR, \fIEVP_md2()\fR, \fIEVP_md5()\fR, \fIEVP_sha()\fR, \fIEVP_sha1()\fR,
\&\fIEVP_sha224()\fR, \fIEVP_sha256()\fR, \fIEVP_sha384()\fR, \fIEVP_sha512()\fR, \fIEVP_dss()\fR,
\&\fIEVP_dss1()\fR, \fIEVP_mdc2()\fR n' \fIEVP_ripemd160()\fR return pointas ta the
correspondin \s-1EVP_MD\s0 structures.
.PP
\&\fIEVP_get_digestbyname()\fR, \fIEVP_get_digestbynid()\fR n' \fIEVP_get_digestbyobj()\fR
return either a \fB\s-1EVP_MD\s0\fR structure or \s-1NULL\s0 if a error occurs.
.SH "NOTES"
.IX Header "NOTES"
Da \fB\s-1EVP\s0\fR intercourse ta message digests should almost always be used in
preference ta tha low level intercourses. This is cuz tha code then becomes
transparent ta tha digest used n' much mo' flexible.
.PP
New applications should use tha \s-1SHA2\s0 digest algorithms like fuckin \s-1SHA256. \s0
Da other digest algorithms is still up in common use.
.PP
For most applications tha \fBimpl\fR parameta ta \fIEVP_DigestInit_ex()\fR will be
set ta \s-1NULL\s0 ta use tha default digest implementation.
.PP
Da functions \fIEVP_DigestInit()\fR, \fIEVP_DigestFinal()\fR n' \fIEVP_MD_CTX_copy()\fR is 
obsolete but is retained ta maintain compatibilitizzle wit existin code. New
applications should use \fIEVP_DigestInit_ex()\fR, \fIEVP_DigestFinal_ex()\fR n' 
\&\fIEVP_MD_CTX_copy_ex()\fR cuz they can efficiently reuse a gangbangin' finger-lickin' digest context
instead of initializin n' cleanin it up on each call n' allow non default
implementationz of digests ta be specified.
.PP
In OpenSSL 0.9.7 n' lata if digest contexts is not cleaned up afta use
memory leaks will occur.
.PP
Stack allocation of \s-1EVP_MD_CTX\s0 structures is common, fo' example:
.PP
.Vb 2
\& EVP_MD_CTX mctx;
\& EVP_MD_CTX_init(&mctx);
.Ve
.PP
This will cause binary compatibilitizzle thangs if tha size of \s-1EVP_MD_CTX\s0
structure chizzlez (this will only happen wit a major release of OpenSSL).
Applications wishin ta avoid dis should use \fIEVP_MD_CTX_create()\fR instead:
.PP
.Vb 2
\& EVP_MD_CTX *mctx;
\& mctx = EVP_MD_CTX_create();
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example digests tha data \*(L"Test Message\en\*(R" n' \*(L"Wuz crackalackin' World\en\*(R", rockin the
digest name passed on tha command line.
.PP
.Vb 2
\& #include <stdio.h>
\& #include <openssl/evp.h>
\&
\& main(int argc, char *argv[])
\& {
\& EVP_MD_CTX *mdctx;
\& const EVP_MD *md;
\& char mess1[] = "Test Message\en";
\& char mess2[] = "Wuz crackalackin' World\en";
\& unsigned char md_value[EVP_MAX_MD_SIZE];
\& int md_len, i;
\&
\& OpenSSL_add_all_digests();
\&
\& if(!argv[1]) {
\&        printf("Usage: mdtest digestname\en");
\&        exit(1);
\& }
\&
\& md = EVP_get_digestbyname(argv[1]);
\&
\& if(!md) {
\&        printf("Unknown message digest %s\en", argv[1]);
\&        exit(1);
\& }
\&
\& mdctx = EVP_MD_CTX_create();
\& EVP_DigestInit_ex(mdctx, md, NULL);
\& EVP_DigestUpdate(mdctx, mess1, strlen(mess1));
\& EVP_DigestUpdate(mdctx, mess2, strlen(mess2));
\& EVP_DigestFinal_ex(mdctx, md_value, &md_len);
\& EVP_MD_CTX_destroy(mdctx);
\&
\& printf("Digest is: ");
\& for(i = 0; i < md_len; i++) printf("%02x", md_value[i]);
\& printf("\en");
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIevp\fR\|(3), \fIhmac\fR\|(3), \fImd2\fR\|(3),
\&\fImd5\fR\|(3), \fImdc2\fR\|(3), \fIripemd\fR\|(3),
\&\fIsha\fR\|(3), \fIdgst\fR\|(1)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIEVP_DigestInit()\fR, \fIEVP_DigestUpdate()\fR n' \fIEVP_DigestFinal()\fR are
available up in all versionz of SSLeay n' OpenSSL.
.PP
\&\fIEVP_MD_CTX_init()\fR, \fIEVP_MD_CTX_create()\fR, \fIEVP_MD_CTX_copy_ex()\fR,
\&\fIEVP_MD_CTX_cleanup()\fR, \fIEVP_MD_CTX_destroy()\fR, \fIEVP_DigestInit_ex()\fR
and \fIEVP_DigestFinal_ex()\fR was added up in OpenSSL 0.9.7.
.PP
\&\fIEVP_md_null()\fR, \fIEVP_md2()\fR, \fIEVP_md5()\fR, \fIEVP_sha()\fR, \fIEVP_sha1()\fR,
\&\fIEVP_dss()\fR, \fIEVP_dss1()\fR, \fIEVP_mdc2()\fR n' \fIEVP_ripemd160()\fR were
changed ta return truely const \s-1EVP_MD\s0 * up in OpenSSL 0.9.7.
.PP
Da link between digests n' signin algorithms was fixed up in OpenSSL 1.0 and
later, so now \fIEVP_sha1()\fR can be used wit \s-1RSA\s0 n' \s-1DSA,\s0 there is no need to
use \fIEVP_dss1()\fR any more.
.PP
OpenSSL 1.0 n' lata do not include tha \s-1MD2\s0 digest algorithm up in the
default configuration cuz of its securitizzle weaknesses.
