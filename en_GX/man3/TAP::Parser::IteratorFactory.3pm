.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::IteratorFactory 3"
.TH TAP::Parser::IteratorFactory 3 "2013-05-02" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::IteratorFactory \- Figures up which SourceHandlez objects ta use fo' a given Source
.SH "VERSION"
.IX Header "VERSION"
Version 3.28
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use TAP::Parser::IteratorFactory;
\&  mah $factory = TAP::Parser::IteratorFactory\->new({ %config });
\&  mah $iterator  = $factory\->make_iterator( $filename );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This be a gangbangin' factory class dat takes a TAP::Parser::Source n' runs it all up in all the
registered TAP::Parser::SourceHandlezs ta peep which one should handle tha source.
.PP
If you a plugin lyricist, you gonna be horny bout how tha fuck ta \*(L"register_handlez\*(R"s,
how \*(L"detect_source\*(R" works.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
Creates a freshly smoked up factory class:
.PP
.Vb 1
\&  mah $sf = TAP::Parser::IteratorFactory\->new( $config );
.Ve
.PP
\&\f(CW$config\fR is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If given, sets \*(L"config\*(R" n' calls \*(L"load_handlezs\*(R".
.PP
\fI\f(CI\*(C`register_handlez\*(C'\fI\fR
.IX Subsection "register_handlez"
.PP
Registas a freshly smoked up TAP::Parser::SourceHandlez wit dis factory.
.PP
.Vb 1
\&  _\|_PACKAGE_\|_\->register_handlez( $handlez_class );
.Ve
.PP
\fI\f(CI\*(C`handlezs\*(C'\fI\fR
.IX Subsection "handlezs"
.PP
List of handlezs dat done been registered.
.SS "Instizzle Methods"
.IX Subsection "Instizzle Methods"
\fI\f(CI\*(C`config\*(C'\fI\fR
.IX Subsection "config"
.PP
.Vb 2
\& mah $cfg = $sf\->config;
\& $sf\->config({ Perl => { %config } });
.Ve
.PP
Chainin getter/setta fo' tha configuration of tha available source handlezs.
This be a hashref keyed on handlez class whose joints contain config ta be passed
onto tha handlezs durin detection & creation. I aint talkin' bout chicken n' gravy biatch.  Class names may be straight-up qualified
or abbreviated, eg:
.PP
.Vb 3
\&  # these is equivalent
\&  $sf\->config({ \*(AqTAP::Parser::SourceHandlez::Perl\*(Aq => { %config } });
\&  $sf\->config({ \*(AqPerl\*(Aq => { %config } });
.Ve
.PP
\fI\f(CI\*(C`load_handlezs\*(C'\fI\fR
.IX Subsection "load_handlezs"
.PP
.Vb 1
\& $sf\->load_handlezs;
.Ve
.PP
Loadz tha handlez classes defined up in \*(L"config\*(R".  For example, given a cold-ass lil config:
.PP
.Vb 3
\&  $sf\->config({
\&    MySourceHandlez => { some => \*(Aqconfig\*(Aq },
\&  });
.Ve
.PP
\&\f(CW\*(C`load_handlezs\*(C'\fR will attempt ta load tha \f(CW\*(C`MySourceHandlez\*(C'\fR class by lookin in
\&\f(CW@INC\fR fo' it up in dis order:
.PP
.Vb 2
\&  TAP::Parser::SourceHandlez::MySourceHandlez
\&  MySourceHandlez
.Ve
.PP
\&\f(CW\*(C`croak\*(C'\fRs on error.
.PP
\fI\f(CI\*(C`make_iterator\*(C'\fI\fR
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  mah $iterator = $src_factory\->make_iterator( $source );
.Ve
.PP
Given a TAP::Parser::Source, findz da most thugged-out suitable TAP::Parser::SourceHandlez
to use ta create a TAP::Parser::Iterator (see \*(L"detect_source\*(R").  Dies on error.
.PP
\fI\f(CI\*(C`detect_source\*(C'\fI\fR
.IX Subsection "detect_source"
.PP
Given a TAP::Parser::Source, detects what tha fuck kind of source it be and
returns \fIone\fR TAP::Parser::SourceHandlez (da most thugged-out Kool & Tha Gang one).  Dies
on error.
.PP
Da detection algorithm works suttin' like this:
.PP
.Vb 5
\&  fo' (@registered_handlezs) {
\&    # ask dem how tha fuck Kool & Tha Gang they is bout handlin dis source
\&    $confidence{$handlez} = $handlez\->can_handle( $source )
\&  }
\&  # chizzle da most thugged-out Kool & Tha Gang handlez
.Ve
.PP
Ties is handled by choosin tha straight-up original gangsta handlez.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please peep \*(L"\s-1SUBCLASSING\*(R"\s0 up in TAP::Parser fo' a subclassin overview.
.SS "Example"
.IX Subsection "Example"
If we've done thangs right, you gonna probably wanna write a freshly smoked up source,
rather than sub-classin dis (see TAP::Parser::SourceHandlez fo' that).
.PP
But up in case you find tha need to...
.PP
.Vb 1
\&  package MyIteratorFactory;
\&
\&  use strict;
\&  use vars \*(Aq@ISA\*(Aq;
\&
\&  use TAP::Parser::IteratorFactory;
\&
\&  @ISA = qw( TAP::Parser::IteratorFactory );
\&
\&  # override source detection algorithm
\&  sub detect_source {
\&    mah ($self, $raw_source_ref, $meta) = @_;
\&    # do detectizzle work, rockin $meta n' whatever else...
\&  }
\&
\&  1;
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Steve Purkis
.SH "ATTRIBUTION"
.IX Header "ATTRIBUTION"
Originally ripped off from Test::Harness.
.PP
Moved outta TAP::Parser & converted ta a gangbangin' factory class ta support
extensible \s-1TAP\s0 source detectizzle work by Steve Purkis.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::SourceHandlez,
TAP::Parser::SourceHandlez::File,
TAP::Parser::SourceHandlez::Perl,
TAP::Parser::SourceHandlez::RawTAP,
TAP::Parser::SourceHandlez::Handle,
TAP::Parser::SourceHandlez::Executable
