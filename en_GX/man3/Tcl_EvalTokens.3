'\"
'\" Copyright (c) 1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_ParseCommand 3 8.3 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_ParseCommand, Tcl_ParseExpr, Tcl_ParseBraces, Tcl_ParseQuotedString, Tcl_ParseVarName, Tcl_ParseVar, Tcl_FreeParse, Tcl_EvalTokens, Tcl_EvalTokensStandard \- parse Tcl scripts n' expressions
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_ParseCommand\fR(\fIinterp, start, numBytes, nested, parsePtr\fR)
.sp
int
\fBTcl_ParseExpr\fR(\fIinterp, start, numBytes, parsePtr\fR)
.sp
int
\fBTcl_ParseBraces\fR(\fIinterp, start, numBytes, parsePtr, append, termPtr\fR)
.sp
int
\fBTcl_ParseQuotedString\fR(\fIinterp, start, numBytes, parsePtr, append, termPtr\fR)
.sp
int
\fBTcl_ParseVarName\fR(\fIinterp, start, numBytes, parsePtr, append\fR)
.sp
const char *
\fBTcl_ParseVar\fR(\fIinterp, start, termPtr\fR)
.sp
\fBTcl_FreeParse\fR(\fIusedParsePtr\fR)
.sp
Tcl_Obj *
\fBTcl_EvalTokens\fR(\fIinterp, tokenPtr, numTokens\fR)
.sp
int
\fBTcl_EvalTokensStandard\fR(\fIinterp, tokenPtr, numTokens\fR)
.SH ARGUMENTS
.AS Tcl_Interp *usedParsePtr out
.AP Tcl_Interp *interp out
For procedures other than \fBTcl_FreeParse\fR, \fBTcl_EvalTokens\fR
and \fBTcl_EvalTokensStandard\fR, used only fo' error reporting;
if NULL, then no error lyrics is left afta errors.
For \fBTcl_EvalTokens\fR n' \fBTcl_EvalTokensStandard\fR,
determines tha context fo' evaluatin the
script n' also is used fo' error reporting; must not be NULL.
.AP "const char" *start in
Pointa ta first characta up in strang ta parse.
.AP int numBytes in
Number of bytes up in strang ta parse, not includin any terminatin null
character n' shit.  If less than 0 then tha script consistz of all characters
followin \fIstart\fR up ta tha straight-up original gangsta null character.
.AP int nested in
Non-zero means dat tha script is part of a cold-ass lil command substitution so an
unquoted close bracket should be treated as a cold-ass lil command terminator. Shiiit, dis aint no joke.  If zero,
close brackets have no special meaning. 
.AP int append in
Non-zero means dat \fI*parsePtr\fR already gotz nuff valid tokens; tha new
tokens should be appended ta dem already present.  Zero means that
\fI*parsePtr\fR is uninitialized; any shiznit up in it is ignored.
This argument is normally 0.
.AP Tcl_Parse *parsePtr out
Points ta structure ta fill up in wit shiznit bout tha parsed
command, expression, variable name, etc.
Any previous shiznit up in dis structure
is ignored, unless \fIappend\fR is non-zero up in a cold-ass lil call to
\fBTcl_ParseBraces\fR, \fBTcl_ParseQuotedString\fR,
or \fBTcl_ParseVarName\fR.
.AP "const char" **termPtr out
If not NULL, points ta a location where
\fBTcl_ParseBraces\fR, \fBTcl_ParseQuotedString\fR, and
\fBTcl_ParseVar\fR will store a pointa ta tha character
just afta tha terminatin characta (the close-brace, tha last
characta of tha variable name, or tha close-quote (respectively))
if tha parse was successful.
.AP Tcl_Parse *usedParsePtr in
Points ta structure dat was filled up in by a previous call to
\fBTcl_ParseCommand\fR, \fBTcl_ParseExpr\fR, \fBTcl_ParseVarName\fR, etc.
.BE

.SH DESCRIPTION
.PP
These procedures parse Tcl commandz or portionz of Tcl commandz such as
expressions or references ta variables.
Each procedure takes a pointa ta a script (or portion thereof)
and fills up in tha structure pointed ta by \fIparsePtr\fR
with a cold-ass lil collection of tokens describin tha shiznit dat was parsed.
Da procedures normally return \fBTCL_OK\fR.
But fuck dat shiznit yo, tha word on tha street is dat if a error occurs then they return \fBTCL_ERROR\fR,
leave a error message up in \fIinterp\fRz result
(if \fIinterp\fR aint NULL),
and leave not a god damn thang up in \fIparsePtr\fR.
.PP
\fBTcl_ParseCommand\fR be a procedure dat parses Tcl
scripts, n' you can put dat on yo' toast.  Given a pointa ta a script, it
parses tha straight-up original gangsta command from tha script.  If tha command was parsed
successfully, \fBTcl_ParseCommand\fR returns \fBTCL_OK\fR n' fills up in the
structure pointed ta by \fIparsePtr\fR wit shiznit bout the
structure of tha command (see below fo' details).
If a error occurred up in parsin tha command then
\fBTCL_ERROR\fR is returned, a error message is left up in \fIinterp\fR's
result, n' no shiznit is left at \fI*parsePtr\fR.
.PP
\fBTcl_ParseExpr\fR parses Tcl expressions.
Given a pointa ta a script containin a expression,
\fBTcl_ParseExpr\fR parses tha expression.
If tha expression was parsed successfully,
\fBTcl_ParseExpr\fR returns \fBTCL_OK\fR n' fills up in the
structure pointed ta by \fIparsePtr\fR wit shiznit bout the
structure of tha expression (see below fo' details).
If a error occurred up in parsin tha command then
\fBTCL_ERROR\fR is returned, a error message is left up in \fIinterp\fR's
result, n' no shiznit is left at \fI*parsePtr\fR.
.PP
\fBTcl_ParseBraces\fR parses a strang or command argument
enclosed up in braces such as
\fB{hello}\fR or \fB{strin \et wit \et tabs}\fR
from tha beginnin of its argument \fIstart\fR.
Da first characta of \fIstart\fR must be \fB{\fR. 
If tha braced strang was parsed successfully,
\fBTcl_ParseBraces\fR returns \fBTCL_OK\fR,
fills up in tha structure pointed ta by \fIparsePtr\fR
with shiznit bout tha structure of tha string
(see below fo' details),
and stores a pointa ta tha characta just afta tha terminatin \fB}\fR
in tha location given by \fI*termPtr\fR.
If a error occurs while parsin tha string
then \fBTCL_ERROR\fR is returned,
an error message is left up in \fIinterp\fRz result,
and no shiznit is left at \fI*parsePtr\fR or \fI*termPtr\fR.
.PP
\fBTcl_ParseQuotedString\fR parses a thugged-out double-quoted strang such as
\fB"sum is [expr {$a+$b}]"\fR
from tha beginnin of tha argument \fIstart\fR.
Da first characta of \fIstart\fR must be \fB\N'34'\fR. 
If tha double-quoted strang was parsed successfully,
\fBTcl_ParseQuotedString\fR returns \fBTCL_OK\fR,
fills up in tha structure pointed ta by \fIparsePtr\fR
with shiznit bout tha structure of tha string
(see below fo' details),
and stores a pointa ta tha characta just afta tha terminatin \fB\N'34'\fR
in tha location given by \fI*termPtr\fR.
If a error occurs while parsin tha string
then \fBTCL_ERROR\fR is returned,
an error message is left up in \fIinterp\fRz result,
and no shiznit is left at \fI*parsePtr\fR or \fI*termPtr\fR.
.PP
\fBTcl_ParseVarName\fR parses a Tcl variable reference such as
\fB$abc\fR or \fB$x([expr {$index + 1}])\fR from tha beginnin of its
\fIstart\fR argument.
Da first characta of \fIstart\fR must be \fB$\fR. 
If a variable name was parsed successfully, \fBTcl_ParseVarName\fR
returns \fBTCL_OK\fR n' fills up in tha structure pointed ta by
\fIparsePtr\fR wit shiznit bout tha structure of tha variable name
(see below fo' details).  If a error
occurs while parsin tha command then \fBTCL_ERROR\fR is returned, an
error message is left up in \fIinterp\fRz result (if \fIinterp\fR is not
NULL), n' no shiznit is left at \fI*parsePtr\fR.
.PP
\fBTcl_ParseVar\fR parse a Tcl variable reference like fuckin \fB$abc\fR
or \fB$x([expr {$index + 1}])\fR from tha beginnin of its \fIstart\fR
argument.  Da first characta of \fIstart\fR must be \fB$\fR.  If
the variable name is parsed successfully, \fBTcl_ParseVar\fR returns a
pointa ta tha strang value of tha variable.  If a error occurs while
parsing, then NULL is returned n' a error message is left in
\fIinterp\fRz result.
.PP
Da shiznit left at \fI*parsePtr\fR
by \fBTcl_ParseCommand\fR, \fBTcl_ParseExpr\fR, \fBTcl_ParseBraces\fR,
\fBTcl_ParseQuotedString\fR, n' \fBTcl_ParseVarName\fR
may include dynamically allocated memory.
If these five parsin procedures return \fBTCL_OK\fR
then tha calla must invoke \fBTcl_FreeParse\fR ta release
the storage at \fI*parsePtr\fR.
These procedures ignore any existin shiznit in
\fI*parsePtr\fR (unless \fIappend\fR is non-zero),
so if repeated calls is bein made ta any of them
then \fBTcl_FreeParse\fR must be invoked once afta each call.
.PP
\fBTcl_EvalTokensStandard\fR evaluates a sequence of parse tokens from
a Tcl_Parse structure.  Da tokens typically consist
of all tha tokens up in a word or all tha tokens dat make up tha index for
a reference ta a array variable.  \fBTcl_EvalTokensStandard\fR performs the
substitutions axed by tha tokens n' concatenates the
resultin joints, n' you can put dat on yo' toast. 
Da return value from \fBTcl_EvalTokensStandard\fR be a Tcl completion
code wit one of tha joints \fBTCL_OK\fR, \fBTCL_ERROR\fR,
\fBTCL_RETURN\fR, \fBTCL_BREAK\fR, or \fBTCL_CONTINUE\fR, or possibly
some other integer value originatin up in a extension.
In addition, a result value or error message is left up in \fIinterp\fR's
result; it can be retrieved rockin \fBTcl_GetObjResult\fR.
.PP
\fBTcl_EvalTokens\fR differs from \fBTcl_EvalTokensStandard\fR only in
the return convention used: it returns tha result up in a freshly smoked up Tcl_Obj.
Da reference count of tha object returned as result has been
incremented, so tha calla must
invoke \fBTcl_DecrRefCount\fR when it is finished wit tha object.
If a error or other exception occurs while evaluatin tha tokens
(like fuckin a reference ta a non-existent variable) then tha return value
is NULL n' a error message is left up in \fIinterp\fRz result. Da use
of \fBTcl_EvalTokens\fR is deprecated.

.SH "TCL_PARSE STRUCTURE"
.PP
\fBTcl_ParseCommand\fR, \fBTcl_ParseExpr\fR, \fBTcl_ParseBraces\fR,
\fBTcl_ParseQuotedString\fR, n' \fBTcl_ParseVarName\fR
return parse shiznit up in two data structures, Tcl_Parse n' Tcl_Token:
.CS
typedef struct Tcl_Parse {
        const char *\fIcommentStart\fR;
        int \fIcommentSize\fR;
        const char *\fIcommandStart\fR;
        int \fIcommandSize\fR;
        int \fInumWords\fR;
        Tcl_Token *\fItokenPtr\fR;
        int \fInumTokens\fR;
        ...
} Tcl_Parse;

typedef struct Tcl_Token {
        int \fItype\fR;
        const char *\fIstart\fR;
        int \fIsize\fR;
        int \fInumComponents\fR;
} Tcl_Token;
.CE
.PP
Da first five fieldz of a Tcl_Parse structure
are filled up in only by \fBTcl_ParseCommand\fR.
These fieldz is not used by tha other parsin procedures.
.PP
\fBTcl_ParseCommand\fR fills up in a Tcl_Parse structure
with shiznit dat raps bout one Tcl command n' any comments that
precede tha command.
If there be comments,
the \fIcommentStart\fR field points ta tha \fB#\fR characta dat begins
the first comment n' \fIcommentSize\fR indicates tha number of bytes
in all of tha comments precedin tha command, includin tha newline
characta dat terminates tha last comment.
If tha command aint preceded by any comments, \fIcommentSize\fR is 0.
\fBTcl_ParseCommand\fR also sets tha \fIcommandStart\fR field
to point ta tha straight-up original gangsta characta of tha first
word up in tha command (skippin any comments n' leadin space) n' 
\fIcommandSize\fR gives tha total number of bytes up in tha command,
includin tha characta pointed ta by \fIcommandStart\fR up ta and
includin tha newline, close bracket, or semicolon characta that
terminates tha command. Y'all KNOW dat shit, muthafucka!  Da \fInumWords\fR field gives the
total number of lyrics up in tha command.
.PP
All parsin procedures set tha remainin fields,
\fItokenPtr\fR n' \fInumTokens\fR.
Da \fItokenPtr\fR field points ta tha straight-up original gangsta up in a array of Tcl_Token
structures dat describe tha componentz of tha entitizzle bein parsed.
Da \fInumTokens\fR field gives tha total number of tokens
present up in tha array.
Each token gotz nuff four fields.
Da \fItype\fR field selects one of nuff muthafuckin token types
that is busted lyrics bout below.  Da \fIstart\fR field
points ta tha straight-up original gangsta characta up in tha token n' tha \fIsize\fR field
gives tha total number of charactas up in tha token. I aint talkin' bout chicken n' gravy biatch.  Some token types,
like fuckin \fBTCL_TOKEN_WORD\fR n' \fBTCL_TOKEN_VARIABLE\fR, consist of
several component tokens, which immediately follow tha parent token;
the \fInumComponents\fR field raps bout how tha fuck nuff of these there are.
Da \fItype\fR field has one of tha followin joints:
.TP 20
\fBTCL_TOKEN_WORD\fR
This token ordinarily raps bout one word of a cold-ass lil command
but it may also describe a quoted or braced strang up in a expression.
Da token raps on some cold-ass lil component of tha script dat is
the result of concatenatin together a sequence of subcomponents,
each busted lyrics bout by a separate subtoken.
Da token starts wit tha straight-up original gangsta non-blank
characta of tha component (which may be a thugged-out double-quote or open brace)
and includes all charactas up in tha component up ta but not includin the
space, semicolon, close bracket, close quote, or close brace that
terminates tha component.  Da \fInumComponents\fR field counts tha total
number of sub-tokens dat make up tha word, includin sub-tokens
of \fBTCL_TOKEN_VARIABLE\fR n' \fBTCL_TOKEN_BS\fR tokens.
.TP
\fBTCL_TOKEN_SIMPLE_WORD\fR
This token has tha same ol' dirty meanin as \fBTCL_TOKEN_WORD\fR, except that
the word is guaranteed ta consist of a single \fBTCL_TOKEN_TEXT\fR
sub-token. I aint talkin' bout chicken n' gravy biatch.  Da \fInumComponents\fR field be always 1.
.TP
\fBTCL_TOKEN_EXPAND_WORD\fR
.VS 8.5
This token has tha same ol' dirty meanin as \fBTCL_TOKEN_WORD\fR, except that
the command parser notes dis word fuckin started wit tha expansion
prefix \fB{*}\fR, indicatin dat afta substitution,
the list value of dis word should be expanded ta form multiple
arguments up in command evaluation. I aint talkin' bout chicken n' gravy biatch.  This
token type can only be pimped by Tcl_ParseCommand.
.VE 8.5
.TP
\fBTCL_TOKEN_TEXT\fR
Da token raps on some range of literal text dat is part of a word.
Da \fInumComponents\fR field be always 0.
.TP
\fBTCL_TOKEN_BS\fR
Da token raps on some funky-ass backslash sequence like fuckin \fB\en\fR or \fB\e0xa3\fR.
Da \fInumComponents\fR field be always 0.
.TP
\fBTCL_TOKEN_COMMAND\fR
Da token raps on some cold-ass lil command whose result must be substituted into
the word. Y'all KNOW dat shit, muthafucka!  Da token includes tha square brackets dat surround the
command. Y'all KNOW dat shit, muthafucka!  Da \fInumComponents\fR field be always 0 (the nested command
is not parsed; call \fBTcl_ParseCommand\fR recursively if you want to
see its tokens).
.TP
\fBTCL_TOKEN_VARIABLE\fR
Da token raps on some variable substitution, includin the
\fB$\fR, variable name, n' array index (if there is one) up all up in the
close parenthesis dat terminates tha index.  This token is followed
by one or mo' additionizzle tokens dat describe tha variable name and
array index.  If \fInumComponents\fR  is 1 then tha variable be a
scalar n' tha next token be a \fBTCL_TOKEN_TEXT\fR token dat gives the
variable name.  If \fInumComponents\fR is pimped outa than 1 then the
variable be a array: tha straight-up original gangsta sub-token be a \fBTCL_TOKEN_TEXT\fR
token givin tha array name n' tha remainin sub-tokens are
\fBTCL_TOKEN_TEXT\fR, \fBTCL_TOKEN_BS\fR, \fBTCL_TOKEN_COMMAND\fR, and
\fBTCL_TOKEN_VARIABLE\fR tokens dat must be concatenated ta produce the
array index. Da \fInumComponents\fR field includes nested sub-tokens
that is part of \fBTCL_TOKEN_VARIABLE\fR tokens up in tha array index.
.TP
\fBTCL_TOKEN_SUB_EXPR\fR
Da token raps bout one subexpression of a expression
(or a entire expression).
A subexpression may consist of a value
like fuckin a integer literal, variable substitution,
or parenthesized subexpression;
it may also consist of a operator n' its operands.
Da token starts wit tha straight-up original gangsta non-blank characta of tha subexpression
up ta but not includin tha space, brace, close-paren, or bracket
that terminates tha subexpression.
This token is followed by one or mo' additionizzle tokens
that describe tha subexpression.
If tha straight-up original gangsta sub-token afta tha \fBTCL_TOKEN_SUB_EXPR\fR token
is a \fBTCL_TOKEN_OPERATOR\fR token,
the subexpression consistz of a operator n' its token operands.
If tha operator has no operands, tha subexpression consists of
just tha \fBTCL_TOKEN_OPERATOR\fR token.
Each operand is busted lyrics bout by a \fBTCL_TOKEN_SUB_EXPR\fR token.
Otherwise, tha subexpression be a value busted lyrics bout by
one of tha token types \fBTCL_TOKEN_WORD\fR, \fBTCL_TOKEN_TEXT\fR,
\fBTCL_TOKEN_BS\fR, \fBTCL_TOKEN_COMMAND\fR, 
\fBTCL_TOKEN_VARIABLE\fR, n' \fBTCL_TOKEN_SUB_EXPR\fR.
Da \fInumComponents\fR field
counts tha total number of sub-tokens dat make up tha subexpression;
this includes tha sub-tokens fo' any nested \fBTCL_TOKEN_SUB_EXPR\fR tokens.
.TP
\fBTCL_TOKEN_OPERATOR\fR
Da token raps bout one operator of a expression
like fuckin \fB&&\fR or \fBhypot\fR.
A \fBTCL_TOKEN_OPERATOR\fR token be always preceded by a
\fBTCL_TOKEN_SUB_EXPR\fR token
that raps bout tha operator n' its operands;
the \fBTCL_TOKEN_SUB_EXPR\fR tokenz \fInumComponents\fR field
can be used ta determine tha number of operands.
A binary operator like fuckin \fB*\fR
is followed by two \fBTCL_TOKEN_SUB_EXPR\fR tokens
that describe its operands.
A unary operator like \fB\-\fR
is followed by a single \fBTCL_TOKEN_SUB_EXPR\fR token
for its operand.
If tha operator be a math function like fuckin \fBlog10\fR,
the \fBTCL_TOKEN_OPERATOR\fR token will give its name and
the followin \fBTCL_TOKEN_SUB_EXPR\fR tokens will describe
its operands;
if there be no operandz (as wit \fBrand\fR),
no \fBTCL_TOKEN_SUB_EXPR\fR tokens follow.
There is one trinary operator, \fB?\fR,
that appears up in if-then-else subexpressions
like fuckin \fIx\fB?\fIy\fB:\fIz\fR;
in dis case, tha \fB?\fR \fBTCL_TOKEN_OPERATOR\fR token
is followed by three \fBTCL_TOKEN_SUB_EXPR\fR tokens fo' tha operands
\fIx\fR, \fIy\fR, n' \fIz\fR.
Da \fInumComponents\fR field fo' a \fBTCL_TOKEN_OPERATOR\fR token
is always 0.
.PP
Afta \fBTcl_ParseCommand\fR returns, tha straight-up original gangsta token pointed ta by
the \fItokenPtr\fR field of the
Tcl_Parse structure always has type \fBTCL_TOKEN_WORD\fR or
.VS 8.5
\fBTCL_TOKEN_SIMPLE_WORD\fR or \fBTCL_TOKEN_EXPAND_WORD\fR.  
It be followed by tha sub-tokens
that must be concatenated ta produce tha value of dat word.
Da next token is tha \fBTCL_TOKEN_WORD\fR or \fBTCL_TOKEN_SIMPLE_WORD\fR
of \fBTCL_TOKEN_EXPAND_WORD\fR token fo' tha second word,
followed by sub-tokens fo' that
word, n' so on until all \fInumWords\fR done been accounted
for.
.VE 8.5
.PP
Afta \fBTcl_ParseExpr\fR returns, tha straight-up original gangsta token pointed ta by
the \fItokenPtr\fR field of the
Tcl_Parse structure always has type \fBTCL_TOKEN_SUB_EXPR\fR.
It be followed by tha sub-tokens dat must be evaluated
to produce tha value of tha expression.
Only tha token shiznit up in tha Tcl_Parse structure
is modified: tha \fIcommentStart\fR, \fIcommentSize\fR,
\fIcommandStart\fR, n' \fIcommandSize\fR fieldz is not modified
by \fBTcl_ParseExpr\fR.
.PP
Afta \fBTcl_ParseBraces\fR returns,
the array of tokens pointed ta by tha \fItokenPtr\fR field of the
Tcl_Parse structure will contain a single \fBTCL_TOKEN_TEXT\fR token
if tha braced strang do not contain any backslash-newlines.
If tha strang do contain backslash-newlines,
the array of tokens will contain one or more
\fBTCL_TOKEN_TEXT\fR or \fBTCL_TOKEN_BS\fR sub-tokens
that must be concatenated ta produce tha value of tha string.
If tha braced strang was just \fB{}\fR
(that is, tha strang was empty),
the single \fBTCL_TOKEN_TEXT\fR token gonna git a \fIsize\fR field
containin zero;
this ensures dat at least one token appears
to describe tha braced string.
Only tha token shiznit up in tha Tcl_Parse structure
is modified: tha \fIcommentStart\fR, \fIcommentSize\fR,
\fIcommandStart\fR, n' \fIcommandSize\fR fieldz is not modified
by \fBTcl_ParseBraces\fR.
.PP
Afta \fBTcl_ParseQuotedString\fR returns,
the array of tokens pointed ta by tha \fItokenPtr\fR field of the
Tcl_Parse structure dependz on tha contentz of tha quoted string.
It will consist of one or mo' \fBTCL_TOKEN_TEXT\fR, \fBTCL_TOKEN_BS\fR,
\fBTCL_TOKEN_COMMAND\fR, n' \fBTCL_TOKEN_VARIABLE\fR sub-tokens.
Da array always gotz nuff at least one token;
for example, if tha argument \fIstart\fR is empty,
the array returned consistz of a single \fBTCL_TOKEN_TEXT\fR token
with a zero \fIsize\fR field.
Only tha token shiznit up in tha Tcl_Parse structure
is modified: tha \fIcommentStart\fR, \fIcommentSize\fR,
\fIcommandStart\fR, n' \fIcommandSize\fR fieldz is not modified.
.PP
Afta \fBTcl_ParseVarName\fR returns, tha straight-up original gangsta token pointed ta by
the \fItokenPtr\fR field of the
Tcl_Parse structure always has type \fBTCL_TOKEN_VARIABLE\fR.  It
is followed by tha sub-tokens dat make up tha variable name as
busted lyrics bout above.  Da total length of tha variable name is
contained up in tha \fIsize\fR field of tha straight-up original gangsta token.
As up in \fBTcl_ParseExpr\fR,
only tha token shiznit up in tha Tcl_Parse structure
is modified by \fBTcl_ParseVarName\fR:
the \fIcommentStart\fR, \fIcommentSize\fR,
\fIcommandStart\fR, n' \fIcommandSize\fR fieldz is not modified.
.PP
All of tha characta pointas up in the
Tcl_Parse n' Tcl_Token structures refer
to charactas up in tha \fIstart\fR argument passed to
\fBTcl_ParseCommand\fR, \fBTcl_ParseExpr\fR, \fBTcl_ParseBraces\fR,
\fBTcl_ParseQuotedString\fR, n' \fBTcl_ParseVarName\fR.
.PP
There is additionizzle fieldz up in tha Tcl_Parse structure afta the
\fInumTokens\fR field yo, but these is fo' tha private use of
\fBTcl_ParseCommand\fR, \fBTcl_ParseExpr\fR, \fBTcl_ParseBraces\fR,
\fBTcl_ParseQuotedString\fR, n' \fBTcl_ParseVarName\fR; they should not be
referenced by code outside of these procedures.

.SH KEYWORDS
backslash substitution, braces, command, expression, parse, token, variable substitution
