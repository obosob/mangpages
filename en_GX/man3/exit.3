.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" FIXME There is a shitload of other process termination actions that
.\" could be listed on dis page. Right back up in yo muthafuckin ass. See, fo' example, tha list up in the
.\" POSIX exit(3p) page.
.\"
.TH EXIT 3  2013-02-14 "Linux" "Linux Programmerz Manual"
.SH NAME
exit \- cause aiiight process termination
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void exit(int " status );
.fi
.SH DESCRIPTION
The
.BR exit ()
function causes aiiight process termination n' the
value of \fIstatus & 0377\fP is moonwalked back ta tha parent
(see
.BR wait (2)).
.LP
All functions registered with
.BR atexit (3)
and
.BR on_exit (3)
are called, up in tha reverse order of they registration.
(It be possible fo' one of these functions ta use
.BR atexit (3)
or
.BR on_exit (3)
to regista a additional
function ta be executed durin exit processing;
the freshly smoked up registration be added ta tha front of tha list of functions
that remain ta be called.)
If one of these functions do not return
(e.g., it calls
.BR _exit (2),
or kills itself wit a signal),
then none of tha remainin functions is called,
and further exit processin (in particular, flushin of
.BR stdio (3)
streams) be abandoned.
If a gangbangin' function has been registered multiple times using
.BR atexit (3)
or
.BR on_exit (3),
then it is called as nuff times as dat shiznit was registered.
.LP
All open
.BR stdio (3)
streams is flushed n' closed.
Filez pimped by
.BR tmpfile (3)
are removed.
.LP
Da C standard specifies two constants,
\fBEXIT_SUCCESS\fP n' \fBEXIT_FAILURE\fP,
that may be passed to
.BR exit ()
to indicate successful or unsuccessful
termination, respectively.
.SH RETURN VALUE
The
.BR exit ()
function do not return.
.SH CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001, C89, C99.
.SH NOTES
.LP
It be undefined what tha fuck happens if one of the
functions registered using
.BR atexit (3)
and
.BR on_exit (3)
calls either
.BR exit ()
or
.BR longjmp (3).
Note dat a cold-ass lil call to
.BR execve (2)
removes registrations pimped using
.BR atexit (3)
and
.BR on_exit (3).
.LP
Da use of
.B EXIT_SUCCESS
and
.B EXIT_FAILURE
is slightly mo' portable
(to non-UNIX environments) than tha use of 0 n' some nonzero value
like 1 or \-1.
In particular, VMS uses a gangbangin' finger-lickin' different convention.
.LP
BSD has attempted ta standardize exit codes; peep tha file
.IR <sysexits.h> .
.LP
After
.BR exit (),
the exit status must be transmitted ta the
parent process.
There is three cases.
If tha parent has set
.BR SA_NOCLDWAIT ,
or has set the
.B SIGCHLD
handlez to
.BR SIG_IGN ,
the status is discarded.
If tha parent was waitin on tha child
it is notified of tha exit status.
In both cases tha exiting
process takes a thugged-out dirt nap immediately.
If tha parent has not indicated that
it aint horny bout tha exit status yo, but aint waiting,
the exitin process turns tha fuck into a "zombie" process
(which is not a god damn thang but a cold-ass lil container fo' tha single byte representing
the exit status) so dat tha parent can learn tha exit status when
it lata calls one of the
.BR wait (2)
functions.
.LP
If tha implementation supports the
.B SIGCHLD
signal, dis signal
is busted ta tha parent.
If tha parent has set
.BR SA_NOCLDWAIT ,
it is undefined whether a
.B SIGCHLD
signal is sent.
.LP
If tha process be a session leader n' its controllin terminal
is tha controllin terminal of tha session, then each process in
the foreground process crew of dis controllin terminal
is busted a
.B SIGHUP
signal, n' tha terminal is disassociated
from dis session, allowin it ta be acquired by a freshly smoked up controlling
process.
.LP
If tha exit of tha process causes a process crew ta become orphaned,
and if any gangmember of tha newly orphaned process crew is stopped,
then a
.B SIGHUP
signal followed by a
.B SIGCONT
signal will be
sent ta each process up in dis process group.
See
.BR setpgid (2)
for a explanation of orphaned process groups.
.SH SEE ALSO
.BR _exit (2),
.BR setpgid (2),
.BR wait (2),
.BR atexit (3),
.BR on_exit (3),
.BR tmpfile (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
