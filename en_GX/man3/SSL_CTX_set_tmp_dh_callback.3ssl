.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_CTX_set_tmp_dh_callback 3"
.TH SSL_CTX_set_tmp_dh_callback 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_CTX_set_tmp_dh_callback, SSL_CTX_set_tmp_dh, SSL_set_tmp_dh_callback, SSL_set_tmp_dh \- handle DH keys fo' ephemeral key exchange
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
\&            DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength));
\& long SSL_CTX_set_tmp_dh(SSL_CTX *ctx, DH *dh);
\&
\& void SSL_set_tmp_dh_callback(SSL_CTX *ctx,
\&            DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength));
\& long SSL_set_tmp_dh(SSL *ssl, DH *dh)
\&
\& DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISSL_CTX_set_tmp_dh_callback()\fR sets tha callback function fo' \fBctx\fR ta be
used when a \s-1DH\s0 parametas is required ta \fBtmp_dh_callback\fR.
Da callback is inherited by all \fBssl\fR objects pimped from \fBctx\fR.
.PP
\&\fISSL_CTX_set_tmp_dh()\fR sets \s-1DH\s0 parametas ta be used ta be \fBdh\fR.
Da key is inherited by all \fBssl\fR objects pimped from \fBctx\fR.
.PP
\&\fISSL_set_tmp_dh_callback()\fR sets tha callback only fo' \fBssl\fR.
.PP
\&\fISSL_set_tmp_dh()\fR sets tha parametas only fo' \fBssl\fR.
.PP
These functions apply ta \s-1SSL/TLS\s0 servers only.
.SH "NOTES"
.IX Header "NOTES"
When rockin a cold-ass lil cipher wit \s-1RSA\s0 authentication, a ephemeral \s-1DH\s0 key exchange
can take place. Ciphers wit \s-1DSA\s0 keys always use ephemeral \s-1DH\s0 keys as well.
In these cases, tha session data is negotiated rockin the
ephemeral/temporary \s-1DH\s0 key n' tha key supplied n' certified
by tha certificate chain is only used fo' signing.
Anonymous ciphers (without a permanent server key) also use ephemeral \s-1DH\s0 keys.
.PP
Usin ephemeral \s-1DH\s0 key exchange yieldz forward secrecy, as tha connection
can only be decrypted, when tha \s-1DH\s0 key is known. I aint talkin' bout chicken n' gravy biatch. By generatin a temporary
\&\s-1DH\s0 key inside tha server application dat is lost when tha application
is left, it becomes impossible fo' a attacker ta decrypt past sessions,
even if he gets hold of tha aiiight (certified) key, as dis key was
only used fo' signing.
.PP
In order ta big-ass up a \s-1DH\s0 key exchange tha server must bust a \s-1DH\s0 group
(\s-1DH\s0 parameters) n' generate a \s-1DH\s0 key. Da server will always generate a new
\&\s-1DH\s0 key durin tha negotiation, when tha \s-1DH\s0 parametas is supplied via
callback and/or when tha \s-1SSL_OP_SINGLE_DH_USE\s0 option of
\&\fISSL_CTX_set_options\fR\|(3) is set. Well shiiiit, it will
immediately create a \s-1DH\s0 key, when \s-1DH\s0 parametas is supplied via
\&\fISSL_CTX_set_tmp_dh()\fR n' \s-1SSL_OP_SINGLE_DH_USE\s0 aint set. In dis case,
it may happen dat a key is generated on initialization without later
bein needed, while on tha other hand tha computa time durin the
negotiation is bein saved.
.PP
If \*(L"strong\*(R" primes was used ta generate tha \s-1DH\s0 parameters, it aint strictly
necessary ta generate a freshly smoked up key fo' each handshake but it do improve forward
secrecy. If it aint assured, dat \*(L"strong\*(R" primes was used (see especially
the section bout \s-1DSA\s0 parametas below), \s-1SSL_OP_SINGLE_DH_USE\s0 must be used
in order ta prevent lil' small-ass subgroup attacks fo' realz. Always rockin \s-1SSL_OP_SINGLE_DH_USE\s0
has a impact on tha computa time needed durin negotiation yo, but it is not
very large, so application authors/users should consider ta always enable
this option.
.PP
As generatin \s-1DH\s0 parametas is mad time consuming, a application
should not generate tha parametas on tha fly but supply tha parameters.
\&\s-1DH\s0 parametas can be reused, as tha actual key is newly generated during
the negotiation. I aint talkin' bout chicken n' gravy biatch. Da risk up in reusin \s-1DH\s0 parametas is dat a attacker
may specialize on a straight-up often used \s-1DH\s0 crew fo' realz. Applications should therefore
generate they own \s-1DH\s0 parametas durin tha installation process rockin the
openssl \fIdhparam\fR\|(1) application. I aint talkin' bout chicken n' gravy biatch. In order ta reduce tha computer
time needed fo' dis generation, it is possible ta use \s-1DSA\s0 parameters
instead (see \fIdhparam\fR\|(1)) yo, but up in dis case \s-1SSL_OP_SINGLE_DH_USE\s0
is mandatory.
.PP
Application authors may compile up in \s-1DH\s0 parameters. Filez dh512.pem,
dh1024.pem, dh2048.pem, n' dh4096 up in tha 'apps' directory of current
version of tha OpenSSL distribution contain tha '\s-1SKIP\s0' \s-1DH\s0 parameters,
which use safe primes n' was generated verifiably pseudo-randomly.
These filez can be converted tha fuck into C code rockin tha \fB\-C\fR option of the
\&\fIdhparam\fR\|(1) application.
Authors may also generate they own set of parametas using
\&\fIdhparam\fR\|(1) yo, but a user may not be shizzle how tha fuck tha parametas were
generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da generation of \s-1DH\s0 parametas durin installation is therefore
recommended.
.PP
An application may either directly specify tha \s-1DH\s0 parametas or
can supply tha \s-1DH\s0 parametas via a cold-ass lil callback function. I aint talkin' bout chicken n' gravy biatch. Da callback approach
has tha advantage, dat tha callback may supply \s-1DH\s0 parametas fo' different
key lengths.
.PP
Da \fBtmp_dh_callback\fR is called wit tha \fBkeylength\fR needed and
the \fBis_export\fR shiznit. I aint talkin' bout chicken n' gravy biatch. Da \fBis_export\fR flag is set, when the
ephemeral \s-1DH\s0 key exchange is performed wit a export cipher.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Handle \s-1DH\s0 parametas fo' key lengthz of 512 n' 1024 bits, n' you can put dat on yo' toast. (Error handling
partly left out.)
.PP
.Vb 5
\& ...
\& /* Set up ephemeral DH shiznit */
\& DH *dh_512 = NULL;
\& DH *dh_1024 = NULL;
\& FILE *paramfile;
\&
\& ...
\& /* "openssl dhparam \-out dh_param_512.pem \-2 512" */
\& paramfile = fopen("dh_param_512.pem", "r");
\& if (paramfile) {
\&   dh_512 = PEM_read_DHparams(paramfile, NULL, NULL, NULL);
\&   fclose(paramfile);
\& }
\& /* "openssl dhparam \-out dh_param_1024.pem \-2 1024" */
\& paramfile = fopen("dh_param_1024.pem", "r");
\& if (paramfile) {
\&   dh_1024 = PEM_read_DHparams(paramfile, NULL, NULL, NULL);
\&   fclose(paramfile);
\& }
\& ...
\&
\& /* "openssl dhparam \-C \-2 512" etc... */
\& DH *get_dh512() { ... }
\& DH *get_dh1024() { ... }
\&
\& DH *tmp_dh_callback(SSL *s, int is_export, int keylength)
\& {
\&    DH *dh_tmp=NULL;
\&
\&    switch (keylength) {
\&    case 512:
\&      if (!dh_512)
\&        dh_512 = get_dh512();
\&      dh_tmp = dh_512;
\&      break;
\&    case 1024:
\&      if (!dh_1024) 
\&        dh_1024 = get_dh1024();
\&      dh_tmp = dh_1024;
\&      break;
\&    default:
\&      /* Generatin a key on tha fly is straight-up costly, so use what tha fuck is there */
\&      setup_dh_parameters_like_above();
\&    }
\&    return(dh_tmp);
\& }
.Ve
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fISSL_CTX_set_tmp_dh_callback()\fR n' \fISSL_set_tmp_dh_callback()\fR do not return
diagnostic output.
.PP
\&\fISSL_CTX_set_tmp_dh()\fR n' \fISSL_set_tmp_dh()\fR do return 1 on success n' 0
on failure. Peep tha error queue ta smoke up tha reason of failure.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIssl\fR\|(3), \fISSL_CTX_set_cipher_list\fR\|(3),
\&\fISSL_CTX_set_tmp_rsa_callback\fR\|(3),
\&\fISSL_CTX_set_options\fR\|(3),
\&\fIciphers\fR\|(1), \fIdhparam\fR\|(1)
