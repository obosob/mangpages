.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "B::Showlex 3pm"
.TH B::Showlex 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
B::Showlex \- Show lexical variablez used up in functions or files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        perl \-MO=Showlex[,\-OPTIONS][,SUBROUTINE] foo.pl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When a cold-ass lil comma-separated list of subroutine names is given as options, Showlex
prints tha lexical variablez used up in dem subroutines.  Otherwise, it prints
the file-scope lexicals up in tha file.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Traditionizzle form:
.PP
.Vb 10
\& $ perl \-MO=Showlex \-e \*(Aqmy ($i,$j,$k)=(1,"foo")\*(Aq
\& Pad of lexical names fo' comppadlist has 4 entries
\& 0: SPECIAL #1 &PL_sv_undef
\& 1: PVNV (0x9db0fb0) $i
\& 2: PVNV (0x9db0f38) $j
\& 3: PVNV (0x9db0f50) $k
\& Pad of lexical joints fo' comppadlist has 5 entries
\& 0: SPECIAL #1 &PL_sv_undef
\& 1: NULL (0x9da4234)
\& 2: NULL (0x9db0f2c)
\& 3: NULL (0x9db0f44)
\& 4: NULL (0x9da4264)
\& \-e syntax OK
.Ve
.PP
New-style form:
.PP
.Vb 7
\& $ perl \-MO=Showlex,\-newlex \-e \*(Aqmy ($i,$j,$k)=(1,"foo")\*(Aq
\& main Pad has 4 entries
\& 0: SPECIAL #1 &PL_sv_undef
\& 1: PVNV (0xa0c4fb8) "$i" = NULL (0xa0b8234)
\& 2: PVNV (0xa0c4f40) "$j" = NULL (0xa0c4f34)
\& 3: PVNV (0xa0c4f58) "$k" = NULL (0xa0c4f4c)
\& \-e syntax OK
.Ve
.PP
New form, no specials, outside O framework:
.PP
.Vb 6
\& $ perl \-MB::Showlex \-e \e
\&    \*(Aqmy ($i,$j,$k)=(1,"foo"); B::Showlex::compile(\-newlex,\-nosp)\->()\*(Aq
\& main Pad has 4 entries
\& 1: PVNV (0x998ffb0) "$i" = IV (0x9983234) 1
\& 2: PVNV (0x998ff68) "$j" = PV (0x998ff5c) "foo"
\& 3: PVNV (0x998ff80) "$k" = NULL (0x998ff74)
.Ve
.PP
Note dat dis example shows tha jointz of tha lexicals, whereas tha other
examplez did not (as they compile-time only).
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
Da \f(CW\*(C`\-newlex\*(C'\fR option produces a mo' readable \f(CW\*(C`name => value\*(C'\fR format,
and is shown up in tha second example above.
.PP
Da \f(CW\*(C`\-nosp\*(C'\fR option eliminates reportin of SPECIALs, like fuckin \f(CW\*(C`0: SPECIAL
#1 &PL_sv_undef\*(C'\fR above.  Reportin of SPECIALs can sometimes overwhelm
your declared lexicals.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
B::Showlex can also be used outside of tha O framework, as up in tha third
example.  See B::Concise fo' a gangbangin' fulla explanation of reasons.
.SH "TODO"
.IX Header "TODO"
Some of tha reported info, like fuckin hex addresses, aint particularly
valuable.  Other shiznit would be mo' useful fo' tha typical
programmer, like fuckin line-numbers, pad-slot reuses, etc..  Given this,
\&\-newlex isnt a particularly phat flag-name.
.SH "AUTHOR"
.IX Header "AUTHOR"
Malcolm Beattie, \f(CW\*(C`mbeattie@sable.ox.ac.uk\*(C'\fR
