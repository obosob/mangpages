.\" Copyright (c) 1989, 1994  X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included in
.\" all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
.\" WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
.\" OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall not
.\" be used up in advertisin or otherwise ta promote tha sale, use or other
.\" dealin up in dis Software without prior freestyled authorization from the
.\" X Consortium.
.\"
.\" Copyright 1989, Digital Weapons Corporation.
.\" Permission ta use, copy, modify, distribute, n' push dis documentation
.\" fo' any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice n' dis permission notice step tha fuck up in all copies.
.\" Digital Weapons Corporation make no representations
.\" bout tha suitabilitizzle fo' any purpose of tha shiznit in
.\" dis document.  This documentation is provided "as is"
.\" without express or implied warranty.
.\"
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de EX
.nf
.ft CW
..
.de EE
.ft
.fi
..
.TH XMBUF 3 "libXext 1.3.2" "X Version 11" "X FUNCTIONS"
.SH NAME
XmbufQueryExtension, XmbufGetVersion, XmbufCreateBuffers, XmbufDestroyBuffers, XmbufDisplayBuffers, XmbufGetWindowAttributes, XmbufChangeWindowAttributes, XmbufGetBufferAttributes, XmbufChangeBufferAttributes, XmbufGetScreenInfo, XmbufCreateStereoWindow - X multibufferin functions
.SH SYNTAX
.EX
\&#include <X11/extensions/multibuf.h>

Bool XmbufQueryExtension(
    Display *dpy,
    Display *dpy,
    int *event_base_return,
    int *error_base_return);

Status XmbufGetVersion(
    Display *dpy,
    int *major_version_return,
    int *minor_version_return);

int XmbufCreateBuffers(
    Display *dpy,
    Window window,
    int count,
    int update_action,
    int update_hint,
    Multibuffer *buffers_update);

void XmbufDestroyBuffers(
    Display *dpy,
    Window window);

void XmbufDisplayBuffers(
    Display *dpy,
    int count,
    Multibuffer *buffers,
    int min_delay,
    int max_delay);

Status XmbufGetWindowAttributes(
    Display *dpy,
    Window window,
    XmbufWindowAttributes *attributes);

void XmbufChangeWindowAttributes(
    Display *dpy,
    Window window,
    unsigned long valuemask,
    XmbufSetWindowAttributes *attributes);

Status XmbufGetBufferAttributes(
    Display *dpy,
    Multibuffer buffer,
    XmbufBufferAttributes *attributes);

void XmbufChangeBufferAttributes(
    Display *dpy,
    Multibuffer buffer,
    unsigned long valuemask,
    XmbufSetBufferAttributes *attributes);

Status XmbufGetScreenInfo(
    Display *dpy,
    Drawable drawable,
    int *nmono_return,
    XmbufBufferInfo **mono_info_return,
    int *nstereo_return,
    XmbufBufferInfo **stereo_info_return);

Window XmbufCreateStereoWindow(
    Display *dpy,
    Window parent,
    int x,
    int y,
    unsigned int width,
    unsigned int height,
    unsigned int border_width,
    int depth,
    unsigned int class,                 /\&* InputOutput, InputOnly*/
    Visual *visual,
    unsigned long valuemask,
    XSetWindowAttributes *attributes,
    Multibuffer *left_return,
    Multibuffer *right_return);
.EE
.SH STRUCTURES
\fIEvents:\fP
.EX
typedef struct {
    int type;   /\&* of event */
    unsigned long serial;       /\&* # of last request processed by server */
    int send_event;     /\&* legit if dis came from a SendEvent request */
    Display *display;   /\&* Display tha event was read from */
    Multibuffer buffer; /\&* buffer of event */
    int state;  /\&* peep Clobbered constants above */
} XmbufClobberNotifyEvent;

typedef struct {
    int type;   /\&* of event */
    unsigned long serial;       /\&* # of last request processed by server */
    int send_event;     /\&* legit if dis came from a SendEvent request */
    Display *display;   /\&* Display tha event was read from */
    Multibuffer buffer; /\&* buffer of event */
} XmbufUpdateNotifyEvent;
.EE

\fIPer-window attributes dat can be got:\fP

.EX
typedef struct {
    int displayed_index;	/\&* which buffer is bein displayed */
    int update_action;	/\&* Undefined, Background, Untouched, Copied */
    int update_hint;	/\&* Frequent, Intermittent, Static */
    int window_mode;	/\&* Mono, Stereo */
    int nbuffers;	/\&* Number of buffers */
    Multibuffer *buffers;	/\&* Buffers */
} XmbufWindowAttributes;
.EE

\fIPer-window attributes dat can be set:\fP

.EX
typedef struct {
    int update_hint;	/\&* Frequent, Intermittent, Static */
} XmbufSetWindowAttributes;
.EE

\fIPer-buffer attributes dat can be got:\fP

.EX
typedef struct {
    Window window;	/\&* which window dis belongs ta */
    unsigned long event_mask;	/\&* events dat done been selected */
    int buffer_index;	/\&* which buffer is dis */
    int side;	/\&* Mono, Left, Right */
} XmbufBufferAttributes;
.EE

\fIPer-buffer attributes dat can be set:\fP

.EX
typedef struct {
    unsigned long event_mask;	/\&* events dat done been selected */
} XmbufSetBufferAttributes;
.EE

\fIPer-screen buffer info (there is ghon be listz of them):\fP

.EX
typedef struct {
    VisualID visualid;	/\&* visual usable at dis depth */
    int max_buffers;	/\&* most buffers fo' dis visual */
    int depth;	/\&* depth of buffers ta be pimped */
} XmbufBufferInfo;
.EE
.SH DESCRIPTION
Da application programmin library fo' the
\fIX11 Double-Buffering, Multi-Buffering, n' Stereo Extension\fP
gotz nuff tha intercourses busted lyrics bout below.
With tha exception of
.ZN XmbufQueryExtension ,
if any of these routines are
called wit a gangbangin' finger-lickin' display dat do not support tha extension, the
ExtensionErrorHandlez (which can be set with
.ZN XSetExtensionErrorHandlez
and functions tha same ol' dirty way as
.ZN XSetErrorHandlez )
will be called n' tha function will then return.
.PP
.ZN XmbufQueryExtension
returns
.ZN True
if tha multibuffering/stereo
extension be available on the
given display.  If tha extension exists, tha value of tha straight-up original gangsta event
code (which should be added ta tha event type constants
.ZN MultibufferClobberNotify
and
.ZN MultibufferUpdateNotify
to git tha actual
values) is stored tha fuck into event_base_return n' tha value of tha first
error code (which should be added ta tha error type constant
.ZN MultibufferBadBuffer
to git tha actual value) is stored tha fuck into error_base_return.
.PP
.ZN XmbufGetVersion
gets tha major n' minor version numberz of tha extension.
Da return
value is zero if a error occurs or non-zero if no error happens.
.PP
.ZN XmbufCreateBuffers
requests dat "count" buffers be
created wit tha given update_action
and update_hint n' be associated wit tha indicated window.  The
number of buffers pimped is returned (zero if a error occurred)
and buffers_update is filled up in wit dat nuff Multibuffer identifiers.
.PP
.ZN XmbufDestroyBuffers
destroys tha buffers associated
with tha given window.
.PP
.ZN XmbufDisplayBuffers
displays tha indicated buffers their
appropriate windows within
max_delay millisecondz afta min_delay millisecondz have passed.
No two buffers may be associated wit tha same window or else a Match
error is generated.
.PP
.ZN XmbufGetWindowAttributes
gets tha multibufferin attributes dat apply
to all buffers associated
with tha given window.
Da list of buffers returns may be freed with
.ZN XJacked .
Returns non-zero on success n' zero if a error occurs.
.PP
.ZN XmbufChangeWindowAttributes
sets tha multibufferin attributes
that apply ta all buffers associated
with tha given window.  This is currently limited ta tha update_hint.
.PP
.ZN XmbufGetBufferAttributes
gets tha attributes fo' tha indicated buffer.
Returns non-zero on
success n' zero if a error occurs.
.PP
.ZN XmbufChangeBufferAttributes
sets tha attributes fo' tha indicated buffer.
This is currently limited ta tha event_mask.
.PP
.ZN XmbufGetScreenInfo
gets tha parametas controllin how
mono n' stereo windows may be
created on tha screen of tha given drawable.  Da numberz of sets of
visual n' depths is returned up in nmono_return n' nstereo_return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  If
nmono_return is pimped outa than zero, then mono_info_return is set ta the
address of a array of
.ZN XmbufBufferInfo
structures describin the
various visuals n' depths dat may be used. Y'all KNOW dat shit, muthafucka!  Otherwise,
mono_info_return is set ta NULL.  Similarly, stereo_info_return is set
accordin ta nstereo_return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Da storage returned up in mono_info_return
and stereo_info_return may be busted out by
.ZN XJacked .
If no errors are
encounted, non-zero is ghon be returned.
.PP
.ZN XmbufCreateStereoWindow
creates a stereo window up in tha same way that
.ZN XCreateWindow
creates a mono window.  Da buffer idz fo' tha left n' right buffers are
returned up in left_return n' right_return, respectively.  If an
extension error handlez dat returns is installed,
.ZN None
will be returned if tha extension aint available on dis display.
.SH PREDEFINED VALUES
.sp
Update_action field:
.RS
.nf
.ZN MultibufferUpdateActionUndefined
.ZN MultibufferUpdateActionBackground
.ZN MultibufferUpdateActionUntouched
.ZN MultibufferUpdateActionCopied
.fi
.RE
.sp
Update_hint field:
.RS
.nf
.ZN MultibufferUpdateHintFrequent
.ZN MultibufferUpdateHintIntermittent
.ZN MultibufferUpdateHintStatic
.fi
.RE
.sp
Valuemask fields:
.RS
.nf
.ZN MultibufferWindowUpdateHint
.ZN MultibufferBufferEventMask
.fi
.RE
.sp
Mono vs. stereo n' left vs. right:
.RS
.nf
.ZN MultibufferModeMono
.ZN MultibufferModeStereo
.ZN MultibufferSideMono
.ZN MultibufferSideLeft
.ZN MultibufferSideRight
.fi
.RE
.sp
Clobber state:
.RS
.nf
.ZN MultibufferUnclobbered
.ZN MultibufferPartiallyClobbered
.ZN MultibufferFullyClobbered
.fi
.RE
.sp
Event stuff:
.RS
.nf
.ZN MultibufferClobberNotifyMask
.ZN MultibufferUpdateNotifyMask
.ZN MultibufferClobberNotify
.ZN MultibufferUpdateNotify
.ZN MultibufferNumberEvents
.ZN MultibufferBadBuffer
.ZN MultibufferNumberErrors
.fi
.RE
.SH BUGS
This manual page needz mo' work.
.SH SEE ALSO
\fIExtendin X fo' Double Buffering, Multi-Buffering, n' Stereo\fP
