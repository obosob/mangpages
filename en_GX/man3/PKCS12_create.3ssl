.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PKCS12_create 3"
.TH PKCS12_create 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
PKCS12_create \- create a PKCS#12 structure
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/pkcs12.h>
\&
\& PKCS12 *PKCS12_create(char *pass, char *name, EVP_PKEY *pkey, X509 *cert, STACK_OF(X509) *ca,
\&                                int nid_key, int nid_cert, int iter, int mac_iter, int keytype);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIPKCS12_create()\fR creates a PKCS#12 structure.
.PP
\&\fBpass\fR is tha passphrase ta use. \fBname\fR is tha \fBfriendlyName\fR ta use for
the supplied certifictate n' key. \fBpkey\fR is tha private key ta include in
the structure n' \fBcert\fR its correspondin certificates. \fBca\fR, if not \fB\s-1NULL\s0\fR
is a optionizzle set of certificates ta also include up in tha structure.
.PP
\&\fBnid_key\fR n' \fBnid_cert\fR is tha encryption algorithms dat should be used
for tha key n' certificate respectively. \fBiter\fR is tha encryption algorithm
iteration count ta use n' \fBmac_iter\fR is tha \s-1MAC\s0 iteration count ta use.
\&\fBkeytype\fR is tha type of key.
.SH "NOTES"
.IX Header "NOTES"
Da parametas \fBnid_key\fR, \fBnid_cert\fR, \fBiter\fR, \fBmac_iter\fR n' \fBkeytype\fR
can all be set ta zero n' sensible defaults is ghon be used.
.PP
These defaults are: 40 bit \s-1RC2\s0 encryption fo' certificates, triple \s-1DES\s0
encryption fo' private keys, a key iteration count of \s-1PKCS12_DEFAULT_ITER
\&\s0(currently 2048) n' a \s-1MAC\s0 iteration count of 1.
.PP
Da default \s-1MAC\s0 iteration count is 1 up in order ta retain compatibilitizzle with
old software which did not interpret \s-1MAC\s0 iteration counts, n' you can put dat on yo' toast. If such compatibility
is not required then \fBmac_iter\fR should be set ta \s-1PKCS12_DEFAULT_ITER.\s0
.PP
\&\fBkeytype\fR addz a gangbangin' flag ta tha store private key. This be a non standard extension
that is only currently interpreted by \s-1MSIE.\s0 If set ta zero tha flag is omitted,
if set ta \fB\s-1KEY_SIG\s0\fR tha key can be used fo' signin only, if set ta \fB\s-1KEY_EX\s0\fR
it can be used fo' signin n' encryption. I aint talkin' bout chicken n' gravy biatch. This option was useful fo' old
export grade software which could use signin only keyz of arbitrary size but
had restrictions on tha permissible sizez of keys which could be used for
encryption.
.SH "NEW FUNCTIONALITY IN OPENSSL 0.9.8"
.IX Header "NEW FUNCTIONALITY IN OPENSSL 0.9.8"
Some additionizzle functionalitizzle was added ta \fIPKCS12_create()\fR up in OpenSSL
0.9.8. These extensions is detailed below.
.PP
If a cold-ass lil certificate gotz nuff a \fBalias\fR or \fBkeyid\fR then dis will be
used fo' tha correspondin \fBfriendlyName\fR or \fBlocalKeyID\fR up in the
\&\s-1PKCS12\s0 structure.
.PP
Either \fBpkey\fR, \fBcert\fR or both can be \fB\s-1NULL\s0\fR ta indicate dat no key or
certficate is required. Y'all KNOW dat shit, muthafucka! In previous versions both had ta be present or
a fatal error is returned.
.PP
\&\fBnid_key\fR or \fBnid_cert\fR can be set ta \-1 indicatin dat no encryption
should be used.
.PP
\&\fBmac_iter\fR can be set ta \-1 n' tha \s-1MAC\s0 will then be omitted entirely.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fId2i_PKCS12\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
PKCS12_create was added up in OpenSSL 0.9.3
