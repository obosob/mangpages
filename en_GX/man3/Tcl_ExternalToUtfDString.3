'\"
'\" Copyright (c) 1997-1998 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_GetEncodin 3 "8.1" Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_GetEncoding, Tcl_FreeEncoding, Tcl_GetEncodingFromObj, Tcl_ExternalToUtfDString, Tcl_ExternalToUtf, Tcl_UtfToExternalDString, Tcl_UtfToExternal, Tcl_WinTCharToUtf, Tcl_WinUtfToTChar, Tcl_GetEncodingName, Tcl_SetSystemEncoding, Tcl_GetEncodingNameFromEnvironment, Tcl_GetEncodingNames, Tcl_CreateEncoding, Tcl_GetEncodingSearchPath, Tcl_SetEncodingSearchPath, Tcl_GetDefaultEncodingDir, Tcl_SetDefaultEncodingDir \- procedures fo' bustin n' rockin encodings
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Encoding
\fBTcl_GetEncoding\fR(\fIinterp, name\fR)
.sp
void
\fBTcl_FreeEncoding\fR(\fIencoding\fR)
.sp
.VS 8.5
int
\fBTcl_GetEncodingFromObj\fR(\fIinterp, objPtr, encodingPtr\fR)
.VE 8.5
.sp
char *
\fBTcl_ExternalToUtfDString\fR(\fIencoding, src, srcLen, dstPtr\fR)
.sp
char *
\fBTcl_UtfToExternalDString\fR(\fIencoding, src, srcLen, dstPtr\fR)
.sp
int
\fBTcl_ExternalToUtf\fR(\fIinterp, encoding, src, srcLen, flags, statePtr,
                  dst, dstLen, srcReadPtr, dstWrotePtr, dstCharsPtr\fR)
.sp
int
\fBTcl_UtfToExternal\fR(\fIinterp, encoding, src, srcLen, flags, statePtr,
                  dst, dstLen, srcReadPtr, dstWrotePtr, dstCharsPtr\fR)
.sp
char *
\fBTcl_WinTCharToUtf\fR(\fItsrc, srcLen, dstPtr\fR)
.sp
TCHAR *
\fBTcl_WinUtfToTChar\fR(\fIsrc, srcLen, dstPtr\fR)
.sp
const char *
\fBTcl_GetEncodingName\fR(\fIencoding\fR)
.sp
int
\fBTcl_SetSystemEncoding\fR(\fIinterp, name\fR)
.sp
.VS 8.5
const char *
\fBTcl_GetEncodingNameFromEnvironment\fR(\fIbufPtr\fR)
.VE 8.5
.sp
void
\fBTcl_GetEncodingNames\fR(\fIinterp\fR)
.sp
Tcl_Encoding
\fBTcl_CreateEncoding\fR(\fItypePtr\fR)
.sp
.VS 8.5
Tcl_Obj *
\fBTcl_GetEncodingSearchPath\fR()
.sp
int
\fBTcl_SetEncodingSearchPath\fR(\fIsearchPath\fR)
.VE 8.5
.sp
const char *
\fBTcl_GetDefaultEncodingDir\fR(\fIvoid\fR)
.sp
void
\fBTcl_SetDefaultEncodingDir\fR(\fIpath\fR)
.SH ARGUMENTS
.AS "const Tcl_EncodingType" *dstWrotePtr in/out
.AP Tcl_Interp *interp in
Interpreta ta use fo' error reporting, or NULL if no error reportin is
desired.
.AP "const char" *name in
Name of encodin ta load.
.AP Tcl_Encodin encodin in
Da encodin ta query, free, or use fo' convertin text.  If \fIencoding\fR is 
NULL, tha current system encodin is used.
.AP Tcl_Obj *objPtr in
.VS 8.5
Name of encodin ta git token for.
.VE 8.5
.AP Tcl_Encodin *encodingPtr out
.VS 8.5
Points ta storage where encodin token is ta be written.
.VE 8.5
.AP "const char" *src in
For tha \fBTcl_ExternalToUtf\fR functions, a array of bytes up in the
specified encodin dat is ta be converted ta UTF-8.  For the
\fBTcl_UtfToExternal\fR n' \fBTcl_WinUtfToTChar\fR functions, a array of
UTF-8 charactas ta be converted ta tha specified encoding.  
.AP "const TCHAR" *tsrc in
An array of Windows TCHAR charactas ta convert ta UTF-8.
.AP int srcLen up in 
Length of \fIsrc\fR or \fItsrc\fR up in bytes.  If tha length is negative, tha 
encoding-specific length of tha strang is used.
.AP Tcl_DStrin *dstPtr out
Pointa ta a uninitialized or free \fBTcl_DString\fR up in which tha converted
result is ghon be stored.
.AP int flags in
Various flag bits OR-ed together n' shit.  
\fBTCL_ENCODING_START\fR signifies dat the
source buffer is tha straight-up original gangsta block up in a (potentially multi-block) input
stream, spittin some lyrics ta tha conversion routine ta reset ta a initial state and
perform any initialization dat need ta occur before tha straight-up original gangsta byte is
converted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \fBTCL_ENCODING_END\fR signifies dat tha source buffer is tha last
block up in a (potentially multi-block) input stream, spittin some lyrics ta tha conversion
routine ta big-ass up any finalization dat need ta occur afta tha last
byte is converted n' then ta reset ta a initial state.
\fBTCL_ENCODING_STOPONERROR\fR signifies dat tha conversion routine should
return immediately upon readin a source characta dat do not exist in
the target encoding; otherwise a thugged-out default fallback characta will
automatically be substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  
.AP Tcl_EncodingState *statePtr in/out
Used when convertin a (generally long or indefinite length) byte stream
in a piece-by-piece fashion. I aint talkin' bout chicken n' gravy biatch.  Da conversion routine stores its current
state up in \fI*statePtr\fR afta \fIsrc\fR (the buffer containin the
current piece) has been converted; dat state shiznit must be passed
back when convertin tha next piece of tha stream so tha conversion
routine knows what tha fuck state dat shiznit was up in when it left off all up in tha end of the
last piece.  May be NULL, up in which case tha value specified fo' \fIflags\fR 
is ignored n' tha source buffer be assumed ta contain tha complete strang to
convert.
.AP char *dst out
Buffer up in which tha converted result is ghon be stored. Y'all KNOW dat shit, muthafucka!  No mo' than
\fIdstLen\fR bytes is ghon be stored up in \fIdst\fR.
.AP int dstLen in
Da maximum length of tha output buffer \fIdst\fR up in bytes.
.AP int *srcReadPtr out
Filled wit tha number of bytes from \fIsrc\fR dat was actually
converted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This may be less than tha original gangsta source length if there was
a problem convertin some source characters.  May be NULL.
.AP int *dstWrotePtr out
Filled wit tha number of bytes dat was straight-up stored up in tha output
buffer as a result of tha conversion. I aint talkin' bout chicken n' gravy biatch.  May be NULL.
.AP int *dstCharsPtr out
Filled wit tha number of charactas dat correspond ta tha number of bytes
stored up in tha output buffer n' shit.  May be NULL.
.AP Tcl_DStrin *bufPtr out
.VS 8.5
Storage fo' tha prescribed system encodin name.
.VE 8.5
.AP "const Tcl_EncodingType" *typePtr in
Structure dat defines a freshly smoked up type of encoding.  
.AP Tcl_Obj *searchPath in
.VS 8.5
List of filesystem directories up in which ta search fo' encodin data files.
.VE 8.5
.AP "const char" *path in
A path ta tha location of tha encodin file.  
.BE
.SH INTRODUCTION
.PP
These routines convert between Tclz internal characta representation,
UTF-8, n' characta representations used by various operatin systems or
file systems, like fuckin Unicode, ASCII, or Shift-JIS.  When operatin on
strings, like fuckin like fuckin obtainin tha namez of filez or displaying
charactas rockin internationistic fonts, tha strings must be translated into
one or possibly multiple formats dat tha various system calls can use.  For
instance, on a Japanese Unix workstation, a user might obtain a gangbangin' filename
represented up in tha EUC-JP file encodin n' then translate tha charactas to
the jisx0208 font encodin up in order ta display tha filename up in a Tk widget.
Da purpose of tha encodin package is ta help bridge tha translation gap.
UTF-8 serves up a intermediate stagin ground fo' all tha various
encodings.  In tha example above, text would be translated tha fuck into UTF-8 from
whatever file encodin tha operatin system is using.  Then it would be
translated from UTF-8 tha fuck into whatever font encodin tha display routines
require.
.PP
Some basic encodings is compiled tha fuck into Tcl.  Others can be defined by the
user or dynamically loaded from encodin filez up in a
platform-independent manner.
.SH DESCRIPTION
.PP
\fBTcl_GetEncoding\fR findz a encodin given its \fIname\fR.  Da name may
refer ta a funky-ass built-in Tcl encoding, a user-defined encodin registered by
callin \fBTcl_CreateEncoding\fR, or a thugged-out dynamically-loadable encoding
file.  Da return value be a token dat represents tha encodin n' can be
used up in subsequent calls ta procedures like fuckin \fBTcl_GetEncodingName\fR,
\fBTcl_FreeEncoding\fR, n' \fBTcl_UtfToExternal\fR.  If tha name did not
refer ta any known or loadable encoding, NULL is returned n' a error
message is returned up in \fIinterp\fR.
.PP
Da encodin package maintains a thugged-out database of all encodings currently up in use.
Da last time \fIname\fR is seen, \fBTcl_GetEncoding\fR returns an
encodin wit a reference count of 1.  If tha same \fIname\fR is requested
further times, then tha reference count fo' dat encodin is incremented
without tha overhead of allocatin a freshly smoked up encodin n' all its associated
data structures.  
.PP
When a \fIencoding\fR is no longer needed, \fBTcl_FreeEncoding\fR
should be called ta release dat shit.  When a \fIencoding\fR is no longer up in use
anywhere (i.e., it has been freed as nuff times as it has been gotten)
\fBTcl_FreeEncoding\fR will release all storage tha encodin was using
and delete it from tha database. 
.PP
.VS 8.5
\fBTcl_GetEncodingFromObj\fR treats tha strang representation of
\fIobjPtr\fR as a encodin name, n' findz a encodin wit that
name, just as \fBTcl_GetEncoding\fR do. When a encodin is found,
it is cached within tha \fBobjPtr\fR value fo' future reference, the
\fBTcl_Encoding\fR token is freestyled ta tha storage pointed ta by
\fIencodingPtr\fR, n' tha value \fBTCL_OK\fR is returned. Y'all KNOW dat shit, muthafucka! If no such
encodin is found, tha value \fBTCL_ERROR\fR is returned, n' no
writin ta \fB*\fR\fIencodingPtr\fR takes place. Just as with
\fBTcl_GetEncoding\fR, tha calla should call \fBTcl_FreeEncoding\fR
on tha resultin encodin token when dat token will no longer be
used.
.VE 8.5
.PP
\fBTcl_ExternalToUtfDString\fR converts a source buffer \fIsrc\fR from the
specified \fIencoding\fR tha fuck into UTF-8.  Da converted bytes is stored up in 
\fIdstPtr\fR, which is then null-terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da calla should eventually
call \fBTcl_DStringFree\fR ta free any shiznit stored up in \fIdstPtr\fR.
When converting, if any of tha charactas up in tha source buffer cannot be
represented up in tha target encoding, a thugged-out default fallback characta will be
used. Y'all KNOW dat shit, muthafucka!  Da return value be a pointa ta tha value stored up in tha DString.
.PP
\fBTcl_ExternalToUtf\fR converts a source buffer \fIsrc\fR from tha specified
\fIencoding\fR tha fuck into UTF-8.  Up ta \fIsrcLen\fR bytes is converted from the
source buffer n' up ta \fIdstLen\fR converted bytes is stored up in \fIdst\fR.
In all cases, \fI*srcReadPtr\fR is filled wit tha number of bytes dat were
successfully converted from \fIsrc\fR n' \fI*dstWrotePtr\fR is filled with
the correspondin number of bytes dat was stored up in \fIdst\fR.  Da return
value is one of tha following:
.RS
.IP \fBTCL_OK\fR 29
All bytez of \fIsrc\fR was converted.
.IP \fBTCL_CONVERT_NOSPACE\fR 29
Da destination buffer was not big-ass enough fo' all of tha converted data; as
many charactas as could fit was converted though.
.IP \fBTCL_CONVERT_MULTIBYTE\fR 29
Da last few bytes up in tha source buffer was tha beginnin of a multibyte
sequence yo, but mo' bytes was needed ta complete dis sequence.  A
subsequent call ta tha conversion routine should pass a funky-ass buffer containing
the unconverted bytes dat remained up in \fIsrc\fR plus some further bytes
from tha source stream ta properly convert tha formerly split-up multibyte
sequence.  
.IP \fBTCL_CONVERT_SYNTAX\fR 29
Da source buffer contained a invalid characta sequence.  This may occur
if tha input stream has been damaged or if tha input encodin method was
misidentified.
.IP \fBTCL_CONVERT_UNKNOWN\fR 29
Da source buffer contained a cold-ass lil characta dat could not be represented in
the target encodin n' \fBTCL_ENCODING_STOPONERROR\fR was specified. Y'all KNOW dat shit, muthafucka!  
.RE
.LP
\fBTcl_UtfToExternalDString\fR converts a source buffer \fIsrc\fR from UTF-8 
into tha specified \fIencoding\fR.  Da converted bytes is stored in
\fIdstPtr\fR, which is then terminated wit tha appropriate encoding-specific
null.  Da calla should eventually call \fBTcl_DStringFree\fR ta free any
information stored up in \fIdstPtr\fR.  When converting, if any of the
charactas up in tha source buffer cannot be represented up in tha target
encoding, a thugged-out default fallback characta is ghon be used. Y'all KNOW dat shit, muthafucka!  Da return value is
a pointa ta tha value stored up in tha DString.
.PP
\fBTcl_UtfToExternal\fR converts a source buffer \fIsrc\fR from UTF-8 into
the specified \fIencoding\fR.  Up ta \fIsrcLen\fR bytes is converted from
the source buffer n' up ta \fIdstLen\fR converted bytes is stored in
\fIdst\fR.  In all cases, \fI*srcReadPtr\fR is filled wit tha number of
bytes dat was successfully converted from \fIsrc\fR n' \fI*dstWrotePtr\fR
is filled wit tha correspondin number of bytes dat was stored in
\fIdst\fR.  Da return joints is tha same as tha return joints for
\fBTcl_ExternalToUtf\fR.
.PP
\fBTcl_WinUtfToTChar\fR n' \fBTcl_WinTCharToUtf\fR are
Windows-only convenience
functions fo' convertin between UTF-8 n' Windows strings.  On Windows 95
(as wit tha Unix operatin system),
all strings exchanged between Tcl n' tha operatin system are
.QW "char"
based. Y'all KNOW dat shit, muthafucka!  On Windows NT, some strings exchanged between Tcl n' the
operatin system are
.QW "char"
oriented while others is up in Unicode.  By
convention, up in Windows a TCHAR be a cold-ass lil characta up in tha ANSI code page
on Windows 95 n' a Unicode characta on Windows NT.
.PP
If you planned ta use tha same
.QW "char"
based intercourses on both Windows
95 n' Windows NT, you could use \fBTcl_UtfToExternal\fR and
\fBTcl_ExternalToUtf\fR (or they \fBTcl_DString\fR equivalents) wit an
encodin of NULL (the current system encoding).  On tha other hand,
if you planned ta use tha Unicode intercourse when hustlin on Windows NT
and the
.QW "char"
interfaces when hustlin on Windows 95, you would have
to big-ass up tha followin type of test over n' over up in yo' program
(as represented up in pseudo-code):
.CS
if (runnin NT) {
    encodin <- Tcl_GetEncoding("unicode");
    nativeBuffer <- Tcl_UtfToExternal(encoding, utfBuffer);
    Tcl_FreeEncoding(encoding);
} else {
    nativeBuffer <- Tcl_UtfToExternal(NULL, utfBuffer);
}
.CE
\fBTcl_WinUtfToTChar\fR n' \fBTcl_WinTCharToUtf\fR automatically
handle dis test n' use tha proper encodin based on tha current
operatin system.  \fBTcl_WinUtfToTChar\fR returns a pointa to
a TCHAR string, n' \fBTcl_WinTCharToUtf\fR expects a TCHAR string
pointa as tha \fIsrc\fR string.  Otherwise, these functions
behave identically ta \fBTcl_UtfToExternalDString\fR and
\fBTcl_ExternalToUtfDString\fR.
.PP
\fBTcl_GetEncodingName\fR is roughly tha inverse of \fBTcl_GetEncoding\fR.
Given a \fIencoding\fR, tha return value is tha \fIname\fR argument that
was used ta create tha encoding.  Da strang returned by 
\fBTcl_GetEncodingName\fR is only guaranteed ta persist until the
\fIencoding\fR is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da calla must not modify dis string.
.PP
\fBTcl_SetSystemEncoding\fR sets tha default encodin dat should be used
whenever tha user passes a NULL value fo' tha \fIencoding\fR argument to
any of tha other encodin functions.  If \fIname\fR is NULL, tha system
encodin is reset ta tha default system encoding, \fBbinary\fR.  If the
name did not refer ta any known or loadable encoding, \fBTCL_ERROR\fR is
returned n' a error message is left up in \fIinterp\fR.  Otherwise, this
procedure increments tha reference count of tha freshly smoked up system encoding,
decrements tha reference count of tha oldschool system encoding, n' returns
\fBTCL_OK\fR.
.PP
.VS 8.5
\fBTcl_GetEncodingNameFromEnvironment\fR serves up a means fo' tha Tcl
library ta report tha encodin name it believes ta be tha erect one
to use as tha system encoding, based on system calls n' examination of
the environment suitable fo' tha platform.  It accepts \fIbufPtr\fR,
a pointa ta a uninitialized or freed \fBTcl_DString\fR n' writes
the encodin name ta dat shit.  Da \fBTcl_DStringValue\fR is returned.
.VE 8.5
.PP
\fBTcl_GetEncodingNames\fR sets tha \fIinterp\fR result ta a list
consistin of tha namez of all tha encodings dat is currently defined
or can be dynamically loaded, searchin tha encodin path specified by
\fBTcl_SetDefaultEncodingDir\fR.  This procedure do not ensure dat the
dynamically-loadable encodin filez contain valid data yo, but merely dat they
exist.
.PP
\fBTcl_CreateEncoding\fR defines a freshly smoked up encodin n' registas tha C
procedures dat is called back ta convert between tha encodin and
UTF-8.  Encodings pimped by \fBTcl_CreateEncoding\fR is thereafter
visible up in tha database used by \fBTcl_GetEncoding\fR.  Just as wit the
\fBTcl_GetEncoding\fR procedure, tha return value be a token that
represents tha encodin n' can be used up in subsequent calls ta other
encodin functions.  \fBTcl_CreateEncoding\fR returns a encodin wit a
reference count of 1. If a encodin wit tha specified \fIname\fR
already exists, then its entry up in tha database is replaced wit tha new
encoding; tha token fo' tha oldschool encodin will remain valid n' continue
to behave as before yo, but playaz of tha freshly smoked up token will now call tha new
encodin procedures.  
.PP
Da \fItypePtr\fR argument ta \fBTcl_CreateEncoding\fR gotz nuff shiznit 
about tha name of tha encodin n' tha procedures dat is ghon be called to
convert between dis encodin n' UTF-8.  It be defined as bigs up:
.PP
.CS
typedef struct Tcl_EncodingType {
        const char *\fIencodingName\fR;
        Tcl_EncodingConvertProc *\fItoUtfProc\fR;
        Tcl_EncodingConvertProc *\fIfromUtfProc\fR;
        Tcl_EncodingFreeProc *\fIfreeProc\fR;
        ClientData \fIclientData\fR;
        int \fInullSize\fR;
} Tcl_EncodingType;  
.CE
.PP
Da \fIencodingName\fR serves up a strang name fo' tha encoding, by
which it can be referred up in other procedures such as
\fBTcl_GetEncoding\fR.  Da \fItoUtfProc\fR refers ta a cold-ass lil callback
procedure ta invoke ta convert text from dis encodin tha fuck into UTF-8.
Da \fIfromUtfProc\fR refers ta a cold-ass lil callback procedure ta invoke to
convert text from UTF-8 tha fuck into dis encoding.  Da \fIfreeProc\fR refers
to a cold-ass lil callback procedure ta invoke when dis encodin is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
\fIfreeProc\fR field may be NULL.  Da \fIclientData\fR gotz nuff an
arbitrary one-word value passed ta \fItoUtfProc\fR, \fIfromUtfProc\fR,
and \fIfreeProc\fR whenever they is called. Y'all KNOW dat shit, muthafucka!  Typically, dis be a
pointa ta a thugged-out data structure containin encoding-specific shiznit
that can be used by tha callback procedures.  For instance, two hella
similar encodings like fuckin \fBascii\fR n' \fBmacRoman\fR may use the
same callback procedure yo, but use different jointz of \fIclientData\fR
to control its behavior. Shiiit, dis aint no joke.  Da \fInullSize\fR specifies tha number of
zero bytes dat signify end-of-strin up in dis encoding.  It must be
\fB1\fR (for single-byte or multi-byte encodings like ASCII or
Shift-JIS) or \fB2\fR (for double-byte encodings like Unicode).
Constant-sized encodings wit 3 or mo' bytes per characta (such as
CNS11643) is not accepted.
.PP
Da callback procedures \fItoUtfProc\fR n' \fIfromUtfProc\fR should match the
type \fBTcl_EncodingConvertProc\fR:
.PP
.CS
typedef int Tcl_EncodingConvertProc(
        ClientData \fIclientData\fR,
        const char *\fIsrc\fR, 
        int \fIsrcLen\fR, 
        int \fIflags\fR, 
        Tcl_EncodingState *\fIstatePtr\fR,
        char *\fIdst\fR, 
        int \fIdstLen\fR, 
        int *\fIsrcReadPtr\fR,
        int *\fIdstWrotePtr\fR,
        int *\fIdstCharsPtr\fR);
.CE
.PP
Da \fItoUtfProc\fR n' \fIfromUtfProc\fR procedures is called by the
\fBTcl_ExternalToUtf\fR or \fBTcl_UtfToExternal\fR crew of functions to
perform tha actual conversion. I aint talkin' bout chicken n' gravy biatch.  Da \fIclientData\fR parameta ta these
procedures is tha same ol' dirty as tha \fIclientData\fR field specified to
\fBTcl_CreateEncoding\fR when tha encodin was pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da remaining
arguments ta tha callback procedures is tha same as tha arguments,
documented all up in tha top, ta \fBTcl_ExternalToUtf\fR or
\fBTcl_UtfToExternal\fR, wit tha followin exceptions.  If the
\fIsrcLen\fR argument ta one of dem high-level functions is negative,
the value passed ta tha callback procedure is ghon be tha appropriate
encoding-specific strang length of \fIsrc\fR.  If any of tha \fIsrcReadPtr\fR, 
\fIdstWrotePtr\fR, or \fIdstCharsPtr\fR arguments ta one of tha high-level
functions is NULL, tha correspondin value passed ta tha callback
procedure is ghon be a non-NULL location.
.PP
Da callback procedure \fIfreeProc\fR, if non-NULL, should match tha type 
\fBTcl_EncodingFreeProc\fR:
.CS
typedef void Tcl_EncodingFreeProc(
        ClientData \fIclientData\fR);
.CE
.PP
This \fIfreeProc\fR function is called when tha encodin is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  The
\fIclientData\fR parameta is tha same ol' dirty as tha \fIclientData\fR field
specified ta \fBTcl_CreateEncoding\fR when tha encodin was pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  
.PP
.VS 8.5
\fBTcl_GetEncodingSearchPath\fR n' \fBTcl_SetEncodingSearchPath\fR
are called ta access n' set tha list of filesystem directories searched
for encodin data files.  
.PP
Da value returned by \fBTcl_GetEncodingSearchPath\fR
is tha value stored by tha last successful call to
\fBTcl_SetEncodingSearchPath\fR.  If no calls to
\fBTcl_SetEncodingSearchPath\fR have occurred, Tcl will compute a initial
value based on tha environment.  There is one encodin search path fo' the
entire process, shared by all threadz up in tha process.
.PP
\fBTcl_SetEncodingSearchPath\fR stores \fIsearchPath\fR n' returns
\fBTCL_OK\fR, unless \fIsearchPath\fR aint a valid Tcl list, which
causes \fBTCL_ERROR\fR ta be returned. Y'all KNOW dat shit, muthafucka!  Da elementz of \fIsearchPath\fR
are not verified as existin readable filesystem directories. Put ya muthafuckin choppers up if ya feel dis!  When
searchin fo' encodin data filez takes place, n' non-existent or
non-readable filesystem directories on tha \fIsearchPath\fR is silently
ignored.
.PP
\fBTcl_GetDefaultEncodingDir\fR n' \fBTcl_SetDefaultEncodingDir\fR
are obsolete intercourses dopest replaced wit calls to
\fBTcl_GetEncodingSearchPath\fR n' \fBTcl_SetEncodingSearchPath\fR.
They is called ta access n' set tha straight-up original gangsta element of tha \fIsearchPath\fR
list.  Since Tcl searches \fIsearchPath\fR fo' encodin data filez in
list order, these routines establish the
.QW default
directory up in which ta find encodin data files.
.VE 8.5
.SH "ENCODING FILES"
Space would prohibit precompilin tha fuck into Tcl every last muthafuckin possible encoding
algorithm, all kindsa muthafuckin encodings is stored on disk as dynamically-loadable
encodin files.  This behavior also allows tha user ta create additional
encodin filez dat can be loaded rockin tha same mechanism.  These
encodin filez contain shiznit bout tha tablez and/or escape
sequences used ta map between a external encodin n' Unicode.  The
external encodin may consist of single-byte, multi-byte, or double-byte
characters.  
.PP
Each dynamically-loadable encodin is represented as a text file.  The
initial line of tha file, beginnin wit a
.QW #
symbol, be a cold-ass lil comment
that serves up a human-readable description of tha file.  Da next line
identifies tha type of encodin file.  It can be one of tha following
letters:
.IP "[1] \fBS\fR"
A single-byte encoding, where one characta be always one byte long up in the
encoding.  An example is \fBiso8859-1\fR, used by nuff European languages.
.IP "[2] \fBD\fR"
A double-byte encoding, where one characta be always two bytes long up in the
encoding.  An example is \fBbig5\fR, used fo' Chinese text.
.IP "[3] \fBM\fR"
A multi-byte encoding, where one characta may be either one or two bytes long.
Certain bytes is lead bytes, indicatin dat another byte must follow
and dat together tha two bytes represent one character n' shit.  Other bytes is not
lead bytes n' represent theyselves.  An example is \fBshiftjis\fR, used by
many Japanese computers.
.IP "[4] \fBE\fR"
An escape-sequence encoding, specifyin dat certain sequencez of bytes
do not represent charactas yo, but commandz dat describe how tha fuck followin bytes
should be interpreted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  
.PP
Da rest of tha lines up in tha file depend on tha type.  
.PP
Cases [1], [2], n' [3] is collectively referred ta as table-based encoding
files.  Da lines up in a table-based encodin file is up in tha same
format as dis example taken from tha \fBshiftjis\fR encodin (this is not
the complete file):
.CS
# Encodin file: shiftjis, multi-byte
M
003F 0 40
00
0000000100020003000400050006000700080009000A000B000C000D000E000F
0010001100120013001400150016001700180019001A001B001C001D001E001F
0020002100220023002400250026002700280029002A002B002C002D002E002F
0030003100320033003400350036003700380039003A003B003C003D003E003F
0040004100420043004400450046004700480049004A004B004C004D004E004F
0050005100520053005400550056005700580059005A005B005C005D005E005F
0060006100620063006400650066006700680069006A006B006C006D006E006F
0070007100720073007400750076007700780079007A007B007C007D203E007F
0080000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000FF61FF62FF63FF64FF65FF66FF67FF68FF69FF6AFF6BFF6CFF6DFF6EFF6F
FF70FF71FF72FF73FF74FF75FF76FF77FF78FF79FF7AFF7BFF7CFF7DFF7EFF7F
FF80FF81FF82FF83FF84FF85FF86FF87FF88FF89FF8AFF8BFF8CFF8DFF8EFF8F
FF90FF91FF92FF93FF94FF95FF96FF97FF98FF99FF9AFF9BFF9CFF9DFF9EFF9F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
81
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
300030013002FF0CFF0E30FBFF1AFF1BFF1FFF01309B309C00B4FF4000A8FF3E
FFE3FF3F30FD30FE309D309E30034EDD30053006300730FC20152010FF0F005C
301C2016FF5C2026202520182019201C201DFF08FF0930143015FF3BFF3DFF5B
FF5D30083009300A300B300C300D300E300F30103011FF0B221200B100D70000
00F7FF1D2260FF1CFF1E22662267221E22342642264000B0203220332103FFE5
FF0400A200A3FF05FF03FF06FF0AFF2000A72606260525CB25CF25CE25C725C6
25A125A025B325B225BD25BC203B301221922190219121933013000000000000
000000000000000000000000000000002208220B2286228722822283222A2229
000000000000000000000000000000002227222800AC21D221D4220022030000
0000000000000000000000000000000000000000222022A52312220222072261
2252226A226B221A223D221D2235222B222C0000000000000000000000000000
212B2030266F266D266A2020202100B6000000000000000025EF000000000000
.CE
.PP
Da third line of tha file is three numbers.  Da first number is the
fallback characta (in base 16) ta use when convertin from UTF-8 ta this
encoding.  Da second number be a \fB1\fR if dis file represents the
encodin fo' a symbol font, or \fB0\fR otherwise.  Da last number (in base
10) is how tha fuck nuff pagez of data follow.  
.PP
Subsequent lines up in tha example above is pages dat describe how tha fuck ta map
from tha encodin tha fuck into 2-byte Unicode.  Da first line up in a page identifies
the page number n' shit.  Peepin it is 256 double-byte numbers, arranged as 16
rowz of 16 numbers.  Given a cold-ass lil characta up in tha encoding, tha high byte of
that characta is used ta select which page, n' tha low byte of that
characta is used as a index ta select one of tha double-byte numbers in
that page \- tha value obtained bein tha correspondin Unicode character.
By examination of tha example above, one can peep dat tha charactas 0x7E
and 0x8163 up in \fBshiftjis\fR map ta 203E n' 2026 up in Unicode, respectively.
.PP
Peepin tha straight-up original gangsta page is ghon be all tha other pages, each up in tha same
format as tha first: one number identifyin tha page followed by 256
double-byte Unicode characters.  If a cold-ass lil characta up in tha encodin maps ta the
Unicode characta 0000, it means dat tha characta do not straight-up exist.
If all charactas on a page would map ta 0000, dat page can be omitted.
.PP
Case [4] is tha escape-sequence encodin file.  Da lines up in a dis type of
file is up in tha same format as dis example taken from tha \fBiso2022-jp\fR
encoding:
.CS
.ta 1.5i
# Encodin file: iso2022-jp, escape-driven
E
init		{}
final		{}
iso8859-1	\ex1b(B
jis0201		\ex1b(J
jis0208		\ex1b$@
jis0208		\ex1b$B
jis0212		\ex1b$(D
gb2312		\ex1b$A
ksc5601		\ex1b$(C
.CE
.PP
In tha file, tha straight-up original gangsta column represents a option n' tha second column
is tha associated value.  \fBinit\fR be a strang ta emit or expect before
the first characta is converted, while \fBfinal\fR be a strang ta emit
or expect afta tha last character n' shit.  All other options is names of
table-based encodings; tha associated value is tha escape-sequence that
marks dat encoding.  Tcl syntax is used fo' tha joints; up in tha above
example, fo' instance,
.QW \fB{}\fR
represents tha empty strang and
.QW \fB\ex1b\fR
represents characta 27.
.PP
When \fBTcl_GetEncoding\fR encountas a encodin \fIname\fR dat has not
been loaded, it attempts ta load a encodin file called \fIname\fB.enc\fR
from tha \fBencoding\fR subdirectory of each directory dat Tcl searches
for its script library.  If tha encodin file exists yo, but is
malformed, a error message is ghon be left up in \fIinterp\fR.
.SH KEYWORDS
utf, encoding, convert
