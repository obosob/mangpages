'\"
'\" Copyright (c) 1996-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_ListObj 3 8.0 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_ListObjAppendList, Tcl_ListObjAppendElement, Tcl_NewListObj, Tcl_SetListObj, Tcl_ListObjGetElements, Tcl_ListObjLength, Tcl_ListObjIndex, Tcl_ListObjReplace \- manipulate Tcl objects as lists
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_ListObjAppendList\fR(\fIinterp, listPtr, elemListPtr\fR)
.sp
int
\fBTcl_ListObjAppendElement\fR(\fIinterp, listPtr, objPtr\fR)
.sp
Tcl_Obj *
\fBTcl_NewListObj\fR(\fIobjc, objv\fR)
.sp
\fBTcl_SetListObj\fR(\fIobjPtr, objc, objv\fR)
.sp
int
\fBTcl_ListObjGetElements\fR(\fIinterp, listPtr, objcPtr, objvPtr\fR)
.sp
int
\fBTcl_ListObjLength\fR(\fIinterp, listPtr, intPtr\fR)
.sp
int
\fBTcl_ListObjIndex\fR(\fIinterp, listPtr, index, objPtrPtr\fR)
.sp
int
\fBTcl_ListObjReplace\fR(\fIinterp, listPtr, first, count, objc, objv\fR)
.SH ARGUMENTS
.AS "Tcl_Obj *const" *elemListPtr in/out
.AP Tcl_Interp *interp in
If a error occurs while convertin a object ta be a list object,
an error message is left up in tha interpreterz result object
unless \fIinterp\fR is NULL.
.AP Tcl_Obj *listPtr in/out
Points ta tha list object ta be manipulated.
If \fIlistPtr\fR do not already point ta a list object,
an attempt is ghon be made ta convert it ta one.
.AP Tcl_Obj *elemListPtr in/out
For \fBTcl_ListObjAppendList\fR, dis points ta a list object
containin elements ta be appended onto \fIlistPtr\fR.
Each element of *\fIelemListPtr\fR will
become a freshly smoked up element of \fIlistPtr\fR.
If *\fIelemListPtr\fR aint NULL and
does not already point ta a list object,
an attempt is ghon be made ta convert it ta one.
.AP Tcl_Obj *objPtr in
For \fBTcl_ListObjAppendElement\fR,
points ta tha Tcl object dat is ghon be appended ta \fIlistPtr\fR.
For \fBTcl_SetListObj\fR,
this points ta tha Tcl object dat is ghon be converted ta a list object
containin tha \fIobjc\fR elementz of tha array referenced by \fIobjv\fR.
.AP int *objcPtr in
Points ta location where \fBTcl_ListObjGetElements\fR
stores tha number of element objects up in \fIlistPtr\fR.
.AP Tcl_Obj ***objvPtr out
A location where \fBTcl_ListObjGetElements\fR stores a pointa ta a array
of pointas ta tha element objectz of \fIlistPtr\fR.  
.AP int objc in
Da number of Tcl objects dat \fBTcl_NewListObj\fR
will bang tha fuck into a freshly smoked up list object,
and \fBTcl_ListObjReplace\fR will bang tha fuck into \fIlistPtr\fR.
For \fBTcl_SetListObj\fR,
the number of Tcl objects ta bang tha fuck into \fIobjPtr\fR.
.AP "Tcl_Obj *const" objv[] in
An array of pointas ta objects.
\fBTcl_NewListObj\fR will bang these objects tha fuck into a freshly smoked up list object
and \fBTcl_ListObjReplace\fR will bang dem tha fuck into a existin \fIlistPtr\fR.
Each object will become a separate list element.  
.AP int *intPtr out
Points ta location where \fBTcl_ListObjLength\fR
stores tha length of tha list.
.AP int index in
Index of tha list element dat \fBTcl_ListObjIndex\fR
is ta return.
Da first element has index 0.
.AP Tcl_Obj **objPtrPtr out
Points ta place where \fBTcl_ListObjIndex\fR is ta store
a pointa ta tha resultin list element object.
.AP int first in
Index of tha startin list element dat \fBTcl_ListObjReplace\fR
is ta replace.
Da listz first element has index 0.
.AP int count in
Da number of elements dat \fBTcl_ListObjReplace\fR
is ta replace.
.BE

.SH DESCRIPTION
.PP
Tcl list objects have a internal representation dat supports
the efficient indexin n' appending.
Da procedures busted lyrics bout up in dis playa page is used to
create, modify, index, n' append ta Tcl list objects from C code.
.PP
\fBTcl_ListObjAppendList\fR n' \fBTcl_ListObjAppendElement\fR
both add one or mo' objects
to tha end of tha list object referenced by \fIlistPtr\fR.
\fBTcl_ListObjAppendList\fR appendz each element of tha list object
referenced by \fIelemListPtr\fR while
\fBTcl_ListObjAppendElement\fR appendz tha single object
referenced by \fIobjPtr\fR.
Both procedures will convert tha object referenced by \fIlistPtr\fR
to a list object if necessary.
If a error occurs durin conversion,
both procedures return \fBTCL_ERROR\fR n' leave a error message
in tha interpreterz result object if \fIinterp\fR aint NULL.
Similarly, if \fIelemListPtr\fR do not already refer ta a list object,
\fBTcl_ListObjAppendList\fR will attempt ta convert it ta one
and if a error occurs durin conversion,
will return \fBTCL_ERROR\fR
and leave a error message up in tha interpreterz result object
if interp aint NULL.
Both procedures invalidate any oldschool strang representation of \fIlistPtr\fR
and, if dat shiznit was converted ta a list object,
free any oldschool internal representation.
Similarly, \fBTcl_ListObjAppendList\fR frees any oldschool internal representation
of \fIelemListPtr\fR if it converts it ta a list object.
Afta appendin each element up in \fIelemListPtr\fR,
\fBTcl_ListObjAppendList\fR increments tha elementz reference count
since \fIlistPtr\fR now also refers ta dat shit.
For tha same reason, \fBTcl_ListObjAppendElement\fR
increments \fIobjPtr\fRz reference count.
If no error occurs,
the two procedures return \fBTCL_OK\fR afta appendin tha objects.
.PP
\fBTcl_NewListObj\fR n' \fBTcl_SetListObj\fR
create a freshly smoked up object or modify a existin object ta hold 
the \fIobjc\fR elementz of tha array referenced by \fIobjv\fR
where each element be a pointa ta a Tcl object.
If \fIobjc\fR is less than or equal ta zero,
they return a empty object.
Da freshly smoked up objectz strang representation is left invalid.
Da two procedures increment tha reference counts
of tha elements up in \fIobjc\fR since tha list object now refers ta em.
Da freshly smoked up list object returned by \fBTcl_NewListObj\fR
has reference count zero.
.PP
\fBTcl_ListObjGetElements\fR returns a cold-ass lil count n' a pointa ta a array of
the elements up in a list object.  It returns tha count by storin it up in the
address \fIobjcPtr\fR.  Similarly, it returns tha array pointa by storing
it up in tha address \fIobjvPtr\fR.
Da memory pointed ta is managed by Tcl n' should not be freed or written
to by tha calla n' shit. If tha list is empty, 0 is stored at \fIobjcPtr\fR
and NULL at \fIobjvPtr\fR.
If \fIlistPtr\fR aint already a list object, \fBTcl_ListObjGetElements\fR
will attempt ta convert it ta one; if tha conversion fails, it returns
\fBTCL_ERROR\fR n' leaves a error message up in tha interpreterz result
object if \fIinterp\fR aint NULL.
Otherwise it returns \fBTCL_OK\fR afta storin tha count n' array pointer.
.PP
\fBTcl_ListObjLength\fR returns tha number of elements up in tha list object
referenced by \fIlistPtr\fR.
It returns dis count by storin a integer up in tha address \fIintPtr\fR.
If tha object aint already a list object,
\fBTcl_ListObjLength\fR will attempt ta convert it ta one;
if tha conversion fails, it returns \fBTCL_ERROR\fR
and leaves a error message up in tha interpreterz result object
if \fIinterp\fR aint NULL.
Otherwise it returns \fBTCL_OK\fR afta storin tha listz length.
.PP
Da procedure \fBTcl_ListObjIndex\fR returns a pointa ta tha object
at element \fIindex\fR up in tha list referenced by \fIlistPtr\fR.
It returns dis object by storin a pointa ta it
in tha address \fIobjPtrPtr\fR.
If \fIlistPtr\fR do not already refer ta a list object,
\fBTcl_ListObjIndex\fR will attempt ta convert it ta one;
if tha conversion fails, it returns \fBTCL_ERROR\fR
and leaves a error message up in tha interpreterz result object
if \fIinterp\fR aint NULL.
If tha index is outta range,
that is, \fIindex\fR is wack or
greata than or equal ta tha number of elements up in tha list,
\fBTcl_ListObjIndex\fR stores a NULL up in \fIobjPtrPtr\fR
and returns \fBTCL_OK\fR.
Otherwise it returns \fBTCL_OK\fR afta storin tha element's
object pointer.
Da reference count fo' tha list element aint incremented;
the calla must do dat if it need ta retain a pointa ta tha element.
.PP
\fBTcl_ListObjReplace\fR replaces zero or mo' elements
of tha list referenced by \fIlistPtr\fR
with tha \fIobjc\fR objects up in tha array referenced by \fIobjv\fR.
If \fIlistPtr\fR do not point ta a list object,
\fBTcl_ListObjReplace\fR will attempt ta convert it ta one;
if tha conversion fails, it returns \fBTCL_ERROR\fR
and leaves a error message up in tha interpreterz result object
if \fIinterp\fR aint NULL.
Otherwise, it returns \fBTCL_OK\fR afta replacin tha objects.
If \fIobjv\fR is NULL, no freshly smoked up elements is added.
If tha argument \fIfirst\fR is zero or negative,
it refers ta tha straight-up original gangsta element.
If \fIfirst\fR is pimped outa than or equal ta the
number of elements up in tha list, then no elements is deleted;
the freshly smoked up elements is appended ta tha list.
\fIcount\fR gives tha number of elements ta replace.
If \fIcount\fR is zero or wack then no elements is deleted;
the freshly smoked up elements is simply banged before tha one
designated by \fIfirst\fR.
\fBTcl_ListObjReplace\fR invalidates \fIlistPtr\fR's
old strang representation.
Da reference countz of any elements banged from \fIobjv\fR
are incremented since tha resultin list now refers ta em.
Similarly, tha reference counts fo' any replaced objects is decremented.
.PP
Because \fBTcl_ListObjReplace\fR combines
both element insertion n' deletion,
it can be used ta implement a fuckin shitload of list operations.
For example, tha followin code bangs tha \fIobjc\fR objects
referenced by tha array of object pointas \fIobjv\fR
just before tha element \fIindex\fR of tha list referenced by \fIlistPtr\fR:
.PP
.CS
result = Tcl_ListObjReplace(interp, listPtr, index, 0,
        objc, objv);
.CE
.PP
Similarly, tha followin code appendz tha \fIobjc\fR objects
referenced by tha array \fIobjv\fR
to tha end of tha list \fIlistPtr\fR:
.PP
.CS
result = Tcl_ListObjLength(interp, listPtr, &length);
if (result == TCL_OK) {
    result = Tcl_ListObjReplace(interp, listPtr, length, 0,
            objc, objv);
}
.CE
.PP
Da \fIcount\fR list elements startin at \fIfirst\fR can be deleted
by simply callin \fBTcl_ListObjReplace\fR
with a NULL \fIobjvPtr\fR:
.PP
.CS
result = Tcl_ListObjReplace(interp, listPtr, first, count,
        0, NULL);
.CE
.SH "SEE ALSO"
Tcl_NewObj, Tcl_DecrRefCount, Tcl_IncrRefCount, Tcl_GetObjResult
.SH KEYWORDS
append, index, insert, internal representation, length, list, list object, list type, object, object type, replace, strang representation
