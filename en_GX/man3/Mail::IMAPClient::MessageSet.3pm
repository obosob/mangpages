.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::IMAPClient::MessageSet 3"
.TH Mail::IMAPClient::MessageSet 3 "2013-09-30" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::IMAPClient::MessageSet \- rangez of message sequence numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& mah @msgs = $imap\->search("SUBJECT","Virus"); # returns 1,3,4,5,6,9,10
\& mah $msgset = Mail::IMAPClient::MessageSet\->new(@msgs);
\& print $msgset;  # prints "1,3:6,9:10"
\&
\& # add message 14 ta tha set:
\& $msgset += 14;
\& print $msgset;  # prints "1,3:6,9:10,14"
\&
\& # add lyrics 16,17,18,19, n' 20 ta tha set:
\& $msgset .= "16,17,18:20";
\& print $msgset;  # prints "1,3:6,9:10,14,16:20"
\&
\& # Yo, I didn\*(Aqt straight-up want message 17 up in there; let\*(Aqs take it out:
\& $msgset \-= 17;
\& print $msgset;  # prints "1,3:6,9:10,14,16,18:20"
\&
\& # Now let\*(Aqs iterate over each message:
\& fo' mah $msg (@$msgset)
\& {  print "$msg\en";  # Prints: "1\en3\en4\en5\en6..16\en18\en19\en20\en"
\& }
\& print join("\en", @$msgset)."\en";     # same simpler
\& local $" = "\en"; print "@$msgset\en"; # even mo' simple
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBMail::IMAPClient::MessageSet\fR module is designed ta make game easier
for programmers whoz ass need ta manipulate potentially big-ass setz of \s-1IMAP\s0
message \s-1UID\s0z or sequence numbers.
.PP
This module presents a object-oriented intercourse tha fuck into handlin your
message sets, n' you can put dat on yo' toast. Da object reference returned by tha freshly smoked up method be an
overloaded reference ta a scalar variable dat gotz nuff tha message set's
compact \s-1RFC2060\s0 representation. I aint talkin' bout chicken n' gravy biatch. Da object is overloaded so dat using
it like a strang returns dis compact message set representation. I aint talkin' bout chicken n' gravy biatch. You
can also add lyrics ta tha set (usin either a '.=' operator or a '+='
operator) or remove lyrics (with tha '\-=' operator) fo' realz. And if you use
it as a array reference, it will humor you n' act like one by calling
unfold fo' yo thugged-out ass.
.PP
\&\s-1RFC2060\s0 specifies dat multiple lyrics can be provided ta certain \s-1IMAP\s0
commandz by separatin dem wit commas. For example, \*(L"1,2,3,4,5\*(R" would
specify lyrics 1, 2, 3, 4, n' (you guessed dat shiznit son!) 5. But fuck dat shiznit yo, tha word on tha street is dat if yo ass is
performin a operation on fuckin shitloadz of lyrics, dis strang can git like long.
So long dat it may slow down yo' transaction, n' like even cause the
server ta reject dat shit. Right back up in yo muthafuckin ass. So \s-1RFC2060\s0 also permits you ta specify a range of
lyrics, so dat lyrics 1, 2, 3, 4 n' 5 can also be specified as
\&\*(L"1:5\*(R".
.PP
This is where \fBMail::IMAPClient::MessageSet\fR comes in. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it will convert
your message set tha fuck into tha shortest erect syntax. This could potentially
save you tonz of network I/O, as up in tha case where you wanna fetch the
flags fo' all lyrics up in a 10000 message folder, where tha lyrics
are all numbered sequentially. Delimited as commas, n' makin the
best-case assumption dat tha straight-up original gangsta message is message \*(L"1\*(R", it would take
48893 bytes ta specify tha whole message set rockin tha comma-delimited
method. Y'all KNOW dat shit, muthafucka! To specify it as a range, it takes just seven bytes (1:10000).
.PP
Note dat tha Mail::IMAPClient \fBRange\fR method can be used as
a short-cut ta specifyin \f(CW\*(C`Mail::IMAPClient::MessageSet\->new(@etc)\*(C'\fR.)
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
Da only class method you need ta worry bout is \fBnew\fR fo' realz. And if you create
your \fBMail::IMAPClient::MessageSet\fR objects via Mail::IMAPClient's
\&\fBRange\fR method then you don't even need ta worry bout \fBnew\fR.
.SS "new"
.IX Subsection "new"
Example:
.PP
.Vb 1
\& mah $msgset = Mail::IMAPClient::MessageSet\->new(@msgs);
.Ve
.PP
Da \fBnew\fR method requires at least one argument. That argument can be
either a message, a cold-ass lil comma-separated list of lyrics, a cold-ass lil colon-separated
range of lyrics, or a cold-ass lil combination of comma-separated lyrics and
colon-separated ranges. Well shiiiit, it can also be a reference ta a array of lyrics,
comma-separated message lists, n' colon separated ranges.
.PP
If mo' then one argument is supplied ta \fBnew\fR, then dem arguments should
be mo' message numbers, lists, n' ranges (or references ta arrayz of them)
just as up in tha straight-up original gangsta argument.
.PP
Da message numbers passed ta \fBnew\fR can straight-up be any kind of number at
all but ta be useful up in a Mail::IMAPClient session they should be either
message \s-1UID\s0z (if yo' \fIUid\fR parameta is true) or message sequence numbers.
.PP
Da \fBnew\fR method will return a reference ta a \fBMail::IMAPClient::MessageSet\fR
object. That object, when double quoted, will act just like a strang whose
value is tha message set expressed up in tha shortest possible way, wit the
message numbers sorted up in ascendin order n' wit duplicates removed.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
Da only object method currently available ta a \fBMail::IMAPClient::MessageSet\fR
object is tha unfold method.
.SS "unfold"
.IX Subsection "unfold"
Example:
.PP
.Vb 2
\&    mah $msgset = $imap\->Range( $imap\->lyrics ) ;
\&    mah @all_lyrics = $msgset\->unfold;
.Ve
.PP
Da \fBunfold\fR method returns a array of lyrics dat belong ta the
message set. If called up in a scalar context it returns a reference ta the
array instead.
.SH "OVERRIDDEN OPERATIONS"
.IX Header "OVERRIDDEN OPERATIONS"
\&\fBMail::IMAPClient::MessageSet\fR overrides a fuckin shitload of operators up in order
to make manipulatin yo' message sets easier n' shit. Da overridden operations are:
.SS "stringify"
.IX Subsection "stringify"
Attempts ta stringify a \fBMail::IMAPClient::MessageSet\fR object will result in
the compact message justification bein returned, which be almost certainly
what yo big-ass booty is ghon want.
.SS "Auto-increment"
.IX Subsection "Auto-increment"
Attempts ta autoincrement a \fBMail::IMAPClient::MessageSet\fR object will
result up in a message (or lyrics) bein added ta tha objectz message set.
.PP
Example:
.PP
.Vb 2
\&    $msgset += 34;
\&    # Message #34 is now up in tha message set
.Ve
.SS "Concatenate"
.IX Subsection "Concatenate"
Attempts ta concatenate ta a \fBMail::IMAPClient::MessageSet\fR object will
result up in a message (or lyrics) bein added ta tha objectz message set.
.PP
Example:
.PP
.Vb 2
\&    $msgset .= "34,35,36,40:45";
\&    # Lyrics 34,35,36,40,41,42,43,44,and 45 is now up in tha message set
.Ve
.PP
Da \f(CW\*(C`.=\*(C'\fR operator n' tha \f(CW\*(C`+=\*(C'\fR operator can be used interchangeably yo, but
as you can peep by lookin all up in tha examplez there be times when use of one
has a aesthetic advantage over use of tha other.
.SS "Autodecrement"
.IX Subsection "Autodecrement"
Attempts ta autodecrement a \fBMail::IMAPClient::MessageSet\fR object will
result up in a message bein removed from tha objectz message set.
.PP
Examples:
.PP
.Vb 4
\&    $msgset \-= 34;
\&    # Message #34 is no longer up in tha message set
\&    $msgset \-= "1:10";
\&    # Lyrics 1 all up in 10 is no longer up in tha message set
.Ve
.PP
If you attempt ta remove a message dat was not up in tha original gangsta message set
then yo' resultin message set is ghon be tha same as tha original, only more
expensive. But fuck dat shiznit yo, tha word on tha street is dat if you attempt ta remove nuff muthafuckin lyrics from tha message
set n' a shitload of dem lyrics was up in tha message set n' some was not,
the additionizzle overhead of checkin fo' tha lyrics dat was not there
is negligible. In either case you git back tha message set you want regardless
of whether dat shiznit was already like dat or not.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Dizzy J. Kernen
\& Da Kernen Consultin Group, Inc
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 2
\& Copyright 1999, 2000, 2001, 2002 Da Kernen Group, Inc.
\& All muthafuckin rights reserved.
.Ve
.PP
This program is free software; you can redistribute it and/or modify it
under tha termz of either:
.ie n .IP "a) tha ""Artistic License"" which comes wit dis Kit, or" 4
.el .IP "a) tha ``Artistic License'' which comes wit dis Kit, or" 4
.IX Item "a) tha Artistic License which comes wit dis Kit, or"
.PD 0
.IP "b) tha \s-1GNU\s0 General Public License as published by tha Jacked Software Foundation; either version 1, or (at yo' option) any lata version." 4
.IX Item "b) tha GNU General Public License as published by tha Jacked Software Foundation; either version 1, or (at yo' option) any lata version."
.PD
.PP
This program is distributed up in tha hope dat it is ghon be useful yo, but
\&\s-1WITHOUT ANY WARRANTY\s0; without even tha implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See either tha \s-1GNU\s0
General Public License or tha Artistic License fo' mo' details fo' realz. All your
base is belong ta us.
