.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BIO_f_md 3"
.TH BIO_f_md 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
BIO_f_md, BIO_set_md, BIO_get_md, BIO_get_md_ctx \- message digest BIO filter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& #include <openssl/bio.h>
\& #include <openssl/evp.h>
\&
\& BIO_METHOD *   BIO_f_md(void);
\& int BIO_set_md(BIO *b,EVP_MD *md);
\& int BIO_get_md(BIO *b,EVP_MD **mdp);
\& int BIO_get_md_ctx(BIO *b,EVP_MD_CTX **mdcp);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIBIO_f_md()\fR returns tha message digest \s-1BIO\s0 method. Y'all KNOW dat shit, muthafucka! This be a gangbangin' filter
\&\s-1BIO\s0 dat digests any data passed all up in it, it aint nuthin but a \s-1BIO\s0 wrapper
for tha digest routines \fIEVP_DigestInit()\fR, \fIEVP_DigestUpdate()\fR
and \fIEVP_DigestFinal()\fR.
.PP
Any data freestyled or read all up in a gangbangin' finger-lickin' digest \s-1BIO\s0 rockin \fIBIO_read()\fR and
\&\fIBIO_write()\fR is digested.
.PP
\&\fIBIO_gets()\fR, if its \fBsize\fR parameta is big-ass enough finishes the
digest calculation n' returns tha digest value. \fIBIO_puts()\fR is
not supported.
.PP
\&\fIBIO_reset()\fR reinitialises a gangbangin' finger-lickin' digest \s-1BIO.\s0
.PP
\&\fIBIO_set_md()\fR sets tha message digest of \s-1BIO \s0\fBb\fR ta \fBmd\fR: this
must be called ta initialize a gangbangin' finger-lickin' digest \s-1BIO\s0 before any data is
passed all up in dat shit. Well shiiiit, it aint nuthin but a \fIBIO_ctrl()\fR macro.
.PP
\&\fIBIO_get_md()\fR places tha a pointa ta tha digest BIOs digest method
in \fBmdp\fR, it aint nuthin but a \fIBIO_ctrl()\fR macro.
.PP
\&\fIBIO_get_md_ctx()\fR returns tha digest BIOs context tha fuck into \fBmdcp\fR.
.SH "NOTES"
.IX Header "NOTES"
Da context returned by \fIBIO_get_md_ctx()\fR can be used up in calls
to \fIEVP_DigestFinal()\fR n' also tha signature routines \fIEVP_SignFinal()\fR
and \fIEVP_VerifyFinal()\fR.
.PP
Da context returned by \fIBIO_get_md_ctx()\fR be a internal context
structure. Chizzlez made ta dis context will affect tha digest
\&\s-1BIO\s0 itself n' tha context pointa will become invalid when tha digest
\&\s-1BIO\s0 is freed.
.PP
Afta tha digest has been retrieved from a gangbangin' finger-lickin' digest \s-1BIO\s0 it must be
reinitialized by callin \fIBIO_reset()\fR, or \fIBIO_set_md()\fR before any more
data is passed all up in dat shit.
.PP
If a application need ta call \fIBIO_gets()\fR or \fIBIO_puts()\fR through
a chain containin digest BIOs then dis can be done by prepending
a bufferin \s-1BIO.\s0
.PP
Before OpenSSL 1.0.0 tha call ta \fIBIO_get_md_ctx()\fR would only work if tha \s-1BIO\s0
had been initialized fo' example by callin \fIBIO_set_md()\fR ). In OpenSSL
1.0.0 n' lata tha context be always returned n' tha \s-1BIO\s0 is state is set
to initialized. Y'all KNOW dat shit, muthafucka! This allows applications ta initialize tha context externally
if tha standard calls like fuckin \fIBIO_set_md()\fR is not sufficiently flexible.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIBIO_f_md()\fR returns tha digest \s-1BIO\s0 method.
.PP
\&\fIBIO_set_md()\fR, \fIBIO_get_md()\fR n' \fIBIO_md_ctx()\fR return 1 fo' success and
0 fo' failure.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Da followin example creates a \s-1BIO\s0 chain containin a \s-1SHA1\s0 n' \s-1MD5\s0
digest \s-1BIO\s0 n' passes tha strang \*(L"Wuz crackalackin' World\*(R" all up in dat shit. Error
checkin has been omitted fo' clarity.
.PP
.Vb 10
\& BIO *bio, *mdtmp;
\& char message[] = "Wuz crackalackin' World";
\& bio = BIO_new(BIO_s_null());
\& mdtmp = BIO_new(BIO_f_md());
\& BIO_set_md(mdtmp, EVP_sha1());
\& /* For BIO_push() we wanna append tha sink BIO n' keep a note of
\&  * tha start of tha chain.
\&  */
\& bio = BIO_push(mdtmp, bio);
\& mdtmp = BIO_new(BIO_f_md());
\& BIO_set_md(mdtmp, EVP_md5());
\& bio = BIO_push(mdtmp, bio);
\& /* Note: mdtmp can now be discarded */
\& BIO_write(bio, message, strlen(message));
.Ve
.PP
Da next example digests data by readin all up in a cold-ass lil chain instead:
.PP
.Vb 10
\& BIO *bio, *mdtmp;
\& char buf[1024];
\& int rdlen;
\& bio = BIO_new_file(file, "rb");
\& mdtmp = BIO_new(BIO_f_md());
\& BIO_set_md(mdtmp, EVP_sha1());
\& bio = BIO_push(mdtmp, bio);
\& mdtmp = BIO_new(BIO_f_md());
\& BIO_set_md(mdtmp, EVP_md5());
\& bio = BIO_push(mdtmp, bio);
\& do {
\&        rdlen = BIO_read(bio, buf, sizeof(buf));
\&        /* Might wanna do suttin' wit tha data here */
\& } while(rdlen > 0);
.Ve
.PP
This next example retrieves tha message digests from a \s-1BIO\s0 chain and
outputs em. This could be used wit tha examplez above.
.PP
.Vb 10
\& BIO *mdtmp;
\& unsigned char mdbuf[EVP_MAX_MD_SIZE];
\& int mdlen;
\& int i;
\& mdtmp = bio;   /* Assume bio has previously been set up */
\& do {
\&        EVP_MD *md;
\&        mdtmp = BIO_find_type(mdtmp, BIO_TYPE_MD);
\&        if(!mdtmp) break;
\&        BIO_get_md(mdtmp, &md);
\&        printf("%s digest", OBJ_nid2sn(EVP_MD_type(md)));
\&        mdlen = BIO_gets(mdtmp, mdbuf, EVP_MAX_MD_SIZE);
\&        for(i = 0; i < mdlen; i++) printf(":%02X", mdbuf[i]);
\&        printf("\en");
\&        mdtmp = BIO_next(mdtmp);
\& } while(mdtmp);
\&
\& BIO_free_all(bio);
.Ve
.SH "BUGS"
.IX Header "BUGS"
Da lack of support fo' \fIBIO_puts()\fR n' tha non standard behaviour of
\&\fIBIO_gets()\fR could be regarded as anomalous. Well shiiiit, it could be broke off some disrespec dat \fIBIO_gets()\fR
and \fIBIO_puts()\fR should be passed ta tha next \s-1BIO\s0 up in tha chain n' digest
the data passed all up in n' dat digests should be retrieved rockin a
separate \fIBIO_ctrl()\fR call.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1TBA\s0
