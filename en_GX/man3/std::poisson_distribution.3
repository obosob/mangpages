" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::poisson_distribution< _IntType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparam_type\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _IntType \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpoisson_distribution\fP (double __mean=1\&.0)"
.br
.ti -1c
.RI "\fBpoisson_distribution\fP (const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > void \fB__generate\fP (\fBresult_type\fP *__f, \fBresult_type\fP *__t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "\fBresult_type\fP \fBmax\fP () const "
.br
.ti -1c
.RI "double \fBmean\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmin\fP () const "
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBpoisson_distribution\fP< _IntType >
.br
::\fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "\fBparam_type\fP \fBparam\fP () const "
.br
.ti -1c
.RI "void \fBparam\fP (const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, 
.br
_Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::poisson_distribution\fP< _IntType1 > &__x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBpoisson_distribution\fP &__d1, const \fBpoisson_distribution\fP &__d2)"
.br
.ti -1c
.RI "template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::poisson_distribution\fP< _IntType1 > &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _IntType = int>class std::poisson_distribution< _IntType >"
A discrete Poisson random number distribution\&. 

Da formula fo' tha Poisson probabilitizzle densitizzle function is $p(i|\mu) = \frac{\mu^i}{i!} e^{-\mu}$ where $\mu$ is tha parameta of tha distribution\&. 
.PP
Definizzle at line 4430 of file random\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _IntType = int> typedef _IntType \fBstd::poisson_distribution\fP< _IntType >::\fBresult_type\fP"
Da type of tha range of tha distribution\&. 
.PP
Definizzle at line 4433 of file random\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _IntType = int> \fBresult_type\fP \fBstd::poisson_distribution\fP< _IntType >::max () const\fC [inline]\fP"

.PP
Returns tha least upper bound value of tha distribution\&. 
.PP
Definizzle at line 4524 of file random\&.h\&.
.PP
References std::numeric_limits< _Tp >::max()\&.
.SS "template<typename _IntType = int> double \fBstd::poisson_distribution\fP< _IntType >::mean () const\fC [inline]\fP"

.PP
Returns tha distribution parameta \fCmean\fP\&. 
.PP
Definizzle at line 4495 of file random\&.h\&.
.SS "template<typename _IntType = int> \fBresult_type\fP \fBstd::poisson_distribution\fP< _IntType >::min () const\fC [inline]\fP"

.PP
Returns tha top billin lower bound value of tha distribution\&. 
.PP
Definizzle at line 4517 of file random\&.h\&.
.SS "template<typename _IntType = int> template<typename _UniformRandomNumberGenerator > \fBpoisson_distribution\fP<_IntType>::\fBresult_type\fP \fBstd::poisson_distribution\fP< _IntType >::operator() (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__param)"
A rejection algorithm when mean >= 12 n' a simple method based upon tha multiplication of uniform random variates otherwise\&. NB: Da forma be available only if _GLIBCXX_USE_C99_MATH_TR1 is defined\&.
.PP
Reference: Devroye, L\&. Non-Uniform Random Variates Generation\&. Right back up in yo muthafuckin ass. Springer-Verlag, New York, 1986, Ch\&. X, Sects\&. 3\&.3 & 3\&.4 (+ Errata!)\&. 
.PP
Definizzle at line 1436 of file bits/random\&.tcc\&.
.PP
References std::abs(), std::numeric_limits< _Tp >::epsilon(), std::log(), n' std::numeric_limits< _Tp >::max()\&.
.SS "template<typename _IntType = int> template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBstd::poisson_distribution\fP< _IntType >::operator() (_UniformRandomNumberGenerator &__urng)\fC [inline]\fP"

.PP
Generatin functions\&. 
.PP
Definizzle at line 4532 of file random\&.h\&.
.SS "template<typename _IntType = int> \fBparam_type\fP \fBstd::poisson_distribution\fP< _IntType >::param () const\fC [inline]\fP"

.PP
Returns tha parameta set of tha distribution\&. 
.PP
Definizzle at line 4502 of file random\&.h\&.
.SS "template<typename _IntType = int> void \fBstd::poisson_distribution\fP< _IntType >::param (const \fBparam_type\fP &__param)\fC [inline]\fP"

.PP
Sets tha parameta set of tha distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__param\fP Da freshly smoked up parameta set of tha distribution\&. 
.RE
.PP

.PP
Definizzle at line 4510 of file random\&.h\&.
.SS "template<typename _IntType = int> void \fBstd::poisson_distribution\fP< _IntType >::reset ()\fC [inline]\fP"

.PP
Resets tha distribution state\&. 
.PP
Definizzle at line 4488 of file random\&.h\&.
.PP
References std::normal_distribution< _RealType >::reset()\&.
.SH "Playas And Related Function Documentation"
.PP 
.SS "template<typename _IntType = int> template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::poisson_distribution\fP< _IntType1 > &__x)\fC [friend]\fP"

.PP
Inserts a poisson_distribution random number distribution \fC__x\fP tha fuck into tha output stream \fC__os\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__os\fP An output stream\&. 
.br
\fI__x\fP A poisson_distribution random number distribution\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da output stream wit tha state of \fC__x\fP banged or up in a error state\&. 
.RE
.PP

.SS "template<typename _IntType = int> bool operator== (const \fBpoisson_distribution\fP< _IntType > &__d1, const \fBpoisson_distribution\fP< _IntType > &__d2)\fC [friend]\fP"

.PP
Return legit if two Poisson distributions have tha same parametas n' tha sequences dat would be generated is equal\&. 
.PP
Definizzle at line 4568 of file random\&.h\&.
.SS "template<typename _IntType = int> template<typename _IntType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::poisson_distribution\fP< _IntType1 > &__x)\fC [friend]\fP"

.PP
Extracts a poisson_distribution random number distribution \fC__x\fP from tha input stream \fC__is\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__is\fP An input stream\&. 
.br
\fI__x\fP A poisson_distribution random number generator engine\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da input stream wit \fC__x\fP extracted or up in a error state\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
