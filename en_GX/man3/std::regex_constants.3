.TH "std::regex_constants" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::regex_constants \- 
.SH SYNOPSIS
.br
.PP
.SS "5\&.1 Regular Expression Syntax Options"

.in +1c
.ti -1c
.RI "enum \fB__syntax_option\fP { \fB_S_icase\fP, \fB_S_nosubs\fP, \fB_S_optimize\fP, \fB_S_collate\fP, \fB_S_ECMAScript\fP, \fB_S_basic\fP, \fB_S_extended\fP, \fB_S_awk\fP, \fB_S_grep\fP, \fB_S_egrep\fP, \fB_S_syntax_last\fP }"
.br
.ti -1c
.RI "typedef unsigned int \fBsyntax_option_type\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBicase\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBnosubs\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBoptimize\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBcollate\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBECMAScript\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBbasic\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBextended\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBawk\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBgrep\fP"
.br
.ti -1c
.RI "constexpr \fBsyntax_option_type\fP \fBegrep\fP"
.br
.in -1c
.SS "5\&.2 Matchin Rules"
Matchin a regular expression against a sequence of charactas [first, last) proceedz accordin ta tha rulez of tha grammar specified fo' tha regular expression object, modified accordin ta tha effects listed below fo' any bitmask elements set\&. 
.in +1c
.ti -1c
.RI "enum \fB__match_flag\fP { \fB_S_not_bol\fP, \fB_S_not_eol\fP, \fB_S_not_bow\fP, \fB_S_not_eow\fP, \fB_S_any\fP, \fB_S_not_null\fP, \fB_S_continuous\fP, \fB_S_prev_avail\fP, \fB_S_sed\fP, \fB_S_no_copy\fP, \fB_S_first_only\fP, \fB_S_match_flag_last\fP }"
.br
.ti -1c
.RI "typedef std::bitset
.br
< _S_match_flag_last > \fBmatch_flag_type\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_default\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_not_bol\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_not_eol\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_not_bow\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_not_eow\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_any\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_not_null\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_continuous\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBmatch_prev_avail\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBformat_default\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBformat_sed\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBformat_no_copy\fP"
.br
.ti -1c
.RI "constexpr \fBmatch_flag_type\fP \fBformat_first_only\fP"
.br
.in -1c
.SS "5\&.3 Error Types"

.in +1c
.ti -1c
.RI "enum \fBerror_type\fP { \fB_S_error_collate\fP, \fB_S_error_ctype\fP, \fB_S_error_escape\fP, \fB_S_error_backref\fP, \fB_S_error_brack\fP, \fB_S_error_paren\fP, \fB_S_error_brace\fP, \fB_S_error_badbrace\fP, \fB_S_error_range\fP, \fB_S_error_space\fP, \fB_S_error_badrepeat\fP, \fB_S_error_complexity\fP, \fB_S_error_stack\fP, \fB_S_error_last\fP }"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_collate\fP (_S_error_collate)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_ctype\fP (_S_error_ctype)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_escape\fP (_S_error_escape)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_backref\fP (_S_error_backref)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_brack\fP (_S_error_brack)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_paren\fP (_S_error_paren)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_brace\fP (_S_error_brace)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_badbrace\fP (_S_error_badbrace)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_range\fP (_S_error_range)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_space\fP (_S_error_space)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_badrepeat\fP (_S_error_badrepeat)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_complexity\fP (_S_error_complexity)"
.br
.ti -1c
.RI "constexpr \fBerror_type\fP \fBerror_stack\fP (_S_error_stack)"
.br
.in -1c
.SH "Detailed Description"
.PP 
ISO C++-0x entitizzles sub namespace fo' regex\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef std::bitset<_S_match_flag_last> \fBstd::regex_constants::match_flag_type\fP"

.PP
This be a funky-ass bitmask type indicatin regex matchin rules\&. Da \fCmatch_flag_type\fP is implementation defined but it is valid ta big-ass up bitwise operations on these joints n' expect tha right thang ta happen\&. 
.PP
Definizzle at line 198 of file regex_constants\&.h\&.
.SS "typedef unsigned int \fBstd::regex_constants::syntax_option_type\fP"

.PP
This be a funky-ass bitmask type indicatin how tha fuck ta interpret tha regex\&. Da \fCsyntax_option_type\fP is implementation defined but it is valid ta big-ass up bitwise operations on these joints n' expect tha right thang ta happen\&.
.PP
A valid value of type syntax_option_type shall have exactly one of tha elements \fCECMAScript\fP, \fCbasic\fP, \fCextended\fP, \fCawk\fP, \fCgrep\fP, \fCegrep\fP set\&. 
.PP
Definizzle at line 80 of file regex_constants\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBstd::regex_constants::__match_flag\fP"

.PP
This be a funky-ass bitmask type indicatin regex matchin rules\&. Da \fCmatch_flag_type\fP is implementation defined but it is valid ta big-ass up bitwise operations on these joints n' expect tha right thang ta happen\&. 
.PP
Definizzle at line 175 of file regex_constants\&.h\&.
.SS "enum \fBstd::regex_constants::__syntax_option\fP"

.PP
This be a funky-ass bitmask type indicatin how tha fuck ta interpret tha regex\&. Da \fCsyntax_option_type\fP is implementation defined but it is valid ta big-ass up bitwise operations on these joints n' expect tha right thang ta happen\&.
.PP
A valid value of type syntax_option_type shall have exactly one of tha elements \fCECMAScript\fP, \fCbasic\fP, \fCextended\fP, \fCawk\fP, \fCgrep\fP, \fCegrep\fP set\&. 
.PP
Definizzle at line 54 of file regex_constants\&.h\&.
.SS "enum \fBstd::regex_constants::error_type\fP"
Da expression contained a invalid collatin element name\&. 
.PP
Definizzle at line 49 of file regex_error\&.h\&.
.SH "Function Documentation"
.PP 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_backref (_S_error_backref)"
Da expression contained a invalid back reference\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_badbrace (_S_error_badbrace)"
Da expression contained a invalid range up in a {} expression\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_badrepeat (_S_error_badrepeat)"
One of \fI*?+{\fP was not preceded by a valid regular expression\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_brace (_S_error_brace)"
Da expression contained mismatched { n' } 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_brack (_S_error_brack)"
Da expression contained mismatched [ n' ]\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_collate (_S_error_collate)"
Da expression contained a invalid collatin element name\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_complexitizzle (_S_error_complexity)"
Da complexitizzle of a attempted match against a regular expression exceeded a pre-set level\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_ctype (_S_error_ctype)"
Da expression contained a invalid characta class name\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_escape (_S_error_escape)"
Da expression contained a invalid escaped character, or a trailin escape\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_paren (_S_error_paren)"
Da expression contained mismatched ( n' )\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_range (_S_error_range)"
Da expression contained a invalid characta range, like fuckin [b-a] up in most encodings\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_space (_S_error_space)"
There was insufficient memory ta convert tha expression tha fuck into a gangbangin' finite state machine\&. 
.SS "constexpr \fBerror_type\fP std::regex_constants::error_stack (_S_error_stack)"
There was insufficient memory ta determine whether tha regular expression could match tha specified characta sequence\&. 
.SH "Variable Documentation"
.PP 
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::awk"
Specifies dat tha grammar recognized by tha regular expression engine is dat used by POSIX utilitizzle awk up in IEEE Std 1003\&.1-2001\&. This option is identical ta syntax_option_type extended, except dat C-style escape sequences is supported\&. These sequences are: \\\\, \\a, \\b, \\f, \\n, \\r, \\t , \\v, \\', ', n' \\ddd (where ddd is one, two, or three octal digits)\&. 
.PP
Definizzle at line 144 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::basic"
Specifies dat tha grammar recognized by tha regular expression engine is dat used by POSIX basic regular expressions up in IEEE Std 1003\&.1-2001, Portable Operatin System Interface (POSIX), Base Definitions n' Headers, Section 9, Regular Expressions [IEEE, Hype Technologizzle -- Portable Operatin System Interface (POSIX), IEEE Standard 1003\&.1-2001]\&. 
.PP
Definizzle at line 126 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::collate"
Specifies dat characta rangez of tha form [a-b] should be locale sensitive\&. 
.PP
Definizzle at line 107 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::ECMAScript"
Specifies dat tha grammar recognized by tha regular expression engine is dat used by ECMAScript up in ECMA-262 [Ecma International, ECMAScript Language Justification, Standard Ecma-262, third edition, 1999], as modified up in section [28\&.13]\&. This grammar is similar ta dat defined up in tha PERL scriptin language but extended wit elements found up in tha POSIX regular expression grammar\&. 
.PP
Definizzle at line 117 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::egrep"
Specifies dat tha grammar recognized by tha regular expression engine is dat used by POSIX utilitizzle grep when given tha -E option up in IEEE Std 1003\&.1-2001\&. This option is identical ta syntax_option_type extended, except dat newlines is treated as whitespace\&. 
.PP
Definizzle at line 160 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::extended"
Specifies dat tha grammar recognized by tha regular expression engine is dat used by POSIX extended regular expressions up in IEEE Std 1003\&.1-2001, Portable Operatin System Interface (POSIX), Base Definitions n' Headers, Section 9, Regular Expressions\&. 
.PP
Definizzle at line 134 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::format_default"
When a regular expression match is ta be replaced by a freshly smoked up string, tha freshly smoked up strang is constructed rockin tha rulez used by tha ECMAScript replace function up in ECMA- 262 [Ecma International, ECMAScript Language Justification, Standard Ecma-262, third edition, 1999], part 15\&.5\&.4\&.11 String\&.prototype\&.replace\&. In addition, durin search n' replace operations all non-overlappin occurrencez of tha regular expression is located n' replaced, n' sectionz of tha input dat did not match tha expression is copied unchanged ta tha output string\&.
.PP
Format strings (from ECMA-262 [15\&.5\&.4\&.11]): 
.PD 0

.IP "\(bu" 2
$$ Da dollar-sign itself ($) 
.IP "\(bu" 2
$& Da matched substring\&. 
.IP "\(bu" 2
$` Da portion of \fIstring\fP dat precedes tha matched substring\&. This would be match_results::prefix()\&. 
.IP "\(bu" 2
$' Da portion of \fIstring\fP dat bigs up tha matched substring\&. This would be match_results::suffix()\&. 
.IP "\(bu" 2
$n Da nth capture, where n is up in [1,9] n' $n aint followed by a thugged-out decimal digit\&. If n <= match_results::size() n' tha nth capture is undefined, use tha empty strang instead\&. If n > match_results::size(), tha result is implementation-defined\&. 
.IP "\(bu" 2
$nn Da nnth capture, where nn be a two-digit decimal number on [01, 99]\&. If nn <= match_results::size() n' tha nth capture is undefined, use tha empty strang instead\&. If nn > match_results::size(), tha result is implementation-defined\&. 
.PP

.PP
Definizzle at line 280 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::format_first_only"
When specified durin a search n' replace operation, only tha straight-up original gangsta occurrence of tha regular expression shall be replaced\&. 
.PP
Definizzle at line 301 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::format_no_copy"
Durin a search n' replace operation, sectionz of tha characta container sequence bein searched dat do not match tha regular expression shall not be copied ta tha output string\&. 
.PP
Definizzle at line 295 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::format_sed"
When a regular expression match is ta be replaced by a freshly smoked up string, tha freshly smoked up strang is constructed rockin tha rulez used by tha POSIX sed utilitizzle up in IEEE Std 1003\&.1- 2001 [IEEE, Hype Technologizzle -- Portable Operatin System Interface (POSIX), IEEE Standard 1003\&.1-2001]\&. 
.PP
Definizzle at line 288 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::grep"
Specifies dat tha grammar recognized by tha regular expression engine is dat used by POSIX utilitizzle grep up in IEEE Std 1003\&.1-2001\&. This option is identical ta syntax_option_type basic, except dat newlines is treated as whitespace\&. 
.PP
Definizzle at line 152 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::icase"
Specifies dat tha matchin of regular expressions against a cold-ass lil characta sequence shall be performed without regard ta case\&. 
.PP
Definizzle at line 86 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_any"
If mo' than one match is possible then any match be a aaight result\&. 
.PP
Definizzle at line 235 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_continuous"
Da expression only matches a sub-sequence dat begins at first \&. 
.PP
Definizzle at line 245 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_default"
Da default matchin rules\&. 
.PP
Definizzle at line 203 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_not_bol"
Da first characta up in tha sequence [first, last) is treated as though it aint all up in tha beginnin of a line, so tha characta (^) up in tha regular expression shall not match [first, first)\&. 
.PP
Definizzle at line 210 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_not_bow"
Da expression \\b aint matched against tha sub-sequence [first,first)\&. 
.PP
Definizzle at line 223 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_not_eol"
Da last characta up in tha sequence [first, last) is treated as though it aint all up in tha end of a line, so tha characta ($) up in tha regular expression shall not match [last, last)\&. 
.PP
Definizzle at line 217 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_not_eow"
Da expression \\b should not be matched against tha sub-sequence [last,last)\&. 
.PP
Definizzle at line 229 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_not_null"
Da expression do not match a empty sequence\&. 
.PP
Definizzle at line 240 of file regex_constants\&.h\&.
.SS "constexpr \fBmatch_flag_type\fP std::regex_constants::match_prev_avail"
--first be a valid iterator position\&. When dis flag is set then tha flags match_not_bol n' match_not_bow is ignored by tha regular expression algorithms 28\&.11 n' iterators 28\&.12\&. 
.PP
Definizzle at line 252 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::nosubs"
Specifies dat when a regular expression is matched against a cold-ass lil characta container sequence, no sub-expression matches is ta be stored up in tha supplied match_results structure\&. 
.PP
Definizzle at line 93 of file regex_constants\&.h\&.
.SS "constexpr \fBsyntax_option_type\fP std::regex_constants::optimize"
Specifies dat tha regular expression engine should pay mo' attention ta tha speed wit which regular expressions is matched, n' less ta tha speed wit which regular expression objects is constructed\&. Otherwise it has no detectable effect on tha program output\&. 
.PP
Definizzle at line 101 of file regex_constants\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
