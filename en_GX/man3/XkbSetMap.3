'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbSetMap 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbSetMap \- Send a cold-ass lil complete freshly smoked up set of joints fo' entire components ta tha 
server n' shit. 
.SH SYNOPSIS
.HP
.B Bool XkbSetMap
.BI "(\^Display *" "dpy" "\^,"
.BI "unsigned int " "which" "\^,"
.BI "XkbDescPtr " "xkb" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- dpy
connection ta X server
.TP
.I \- which
mask selectin subcomponents ta update
.TP
.I \- xkb
description from which freshly smoked up joints is taken
.SH DESCRIPTION
.LP
There is two ways ta make chizzlez ta map components: either chizzle a local copy 
of tha keyboard map n' 
call 
.I XkbSetMap 
to bust tha modified map ta tha server, or, ta reduce network traffic, use a 
XkbMapChangesRec structure 
and call 
.I XkbChangeMap.

Use 
.I XkbSetMap 
to bust a cold-ass lil complete freshly smoked up set of joints fo' entire components (for example, all 
symbols, all actions, n' so 
on) ta tha server n' shit. Da 
.I which 
parameta specifies tha components ta be busted ta tha server, n' be a funky-ass bitwise 
inclusive OR of tha masks 
listed up in Table 1. Da 
.I xkb 
parameta be a pointa ta a XkbDescRec structure n' gotz nuff tha shiznit 
to be copied ta tha server n' shit. 
For each bit set up in tha 
.I which 
parameter, 
.I XkbSetMap 
takes tha correspondin structure joints from tha 
.I xkb 
parameta n' sendz it ta tha server specified by 
.I dpy. 

If any components specified by 
.I which 
are not present up in tha 
.I xkb 
parameter, 
.I XkbSetMap 
returns False. Otherwise, it sendz tha update request ta tha server n' returns 
True. 
.I XkbSetMap 
can generate BadAlloc, BadLength, n' BadValue protocol errors.

Key types, symbol maps, n' actions is all interrelated; chizzlez up in one require 
changes up in tha others. Xkb 
provides functions ta make it easier ta edit these components n' handle tha 
interdependencies. Put ya muthafuckin choppers up if ya feel dis! Table 1 
lists these helper functions n' serves up a pointa ta where they is defined.

.TS
c s s s s
c s s s s
l l l l l
l l l l l
lw(2i) l l lw(1i) lw(3i).
Table 1 Xkb Mappin Component Masks
and Convenience Functions
_
Mask	Value	Map	Fields	Convenience	
				Functions
_
T{
XkbKeyTypesMask
T}	(1<<0)	client	T{
types
.br
size_types
.br
num_types
T}	T{
XkbGetKeyTypes
.br
XkbResizeKeyType
.br
XkbCopyKeyType
.br
XkbCopyKeyTypes
T}
T{
XkbKeySymsMask
T}	(1<<1)	client	T{
syms
.br
size_syms
.br
num_syms
.br
key_sym_map
T}	T{
XkbGetKeySyms
.br
XkbResizeKeySyms
.br
XkbChangeTypesOfKey
T}
T{
XkbModifierMapMask
T}	(1<<2)	client	modmap	T{
XkbGetKeyModifierMap
T}
T{
XkbExplicitComponentsMask
T}	(1<<3)	server	T{
explicit
T}	T{
XkbGetKeyExplicitComponents
T}
T{
XkbKeyActionsMask
T}	(1<<4)	server	T{
key_acts
.br
acts
.br
num_acts
.br
size_acts
T}	T{
XkbGetKeyActions
.br
XkbResizeKeyActions
T}
T{
XkbKeyBehaviorsMask
T}	(1<<5)	server	T{
behaviors
T}	T{
XkbGetKeyBehaviors
T}
T{
XkbVirtualModsMask
T}	(1<<6)	server	T{
vmods
T}	T{
XkbGetVirtualMods
T}
T{
XkbVirtualModMapMask
T}	(1<<7)	server	T{
vmodmap
T}	T{
XkbGetVirtualModMap
T}
.TE

Da 
.I chizzled 
field identifies tha map components dat have chizzled up in a XkbDescRec structure 
and may contain any of tha 
bits up in Table 1, which is also shown up in Table 2. Every 1 bit up in 
.I chizzled 
also identifies which other fieldz up in tha XkbMapChangesRec structure contain 
valid joints, as indicated up in 
Table 2. Da 
.I min_key_code 
and 
.I max_key_code 
fieldz is fo' reference only; they is ignored on any requests busted ta tha 
server n' is always updated 
by tha server whenever it returns tha data fo' a XkbMapChangesRec.  
.bp
.TS
c s s 
l l l
l l l
l l l
l lw(2i) lw(3i).
Table 2 XkbMapChangesRec Masks
_
	Valid
Mask	XkbMapChangesRec	XkbDescRec Field Containing
	Fields	Changed Data
_
XkbKeyTypesMask	first_type,	map->type[first_type] ..
	num_types	map->type[first_type + num_types - 1]
.sp
XkbKeySymsMask	first_key_sym,	map->key_sym_map[first_key_sym] ..
	num_key_syms	map->key_sym_map[first_key_sym +
		num_key_syms - 1]
XkbModifierMapMask	first_modmap_key,	map->modmap[first_modmap_key] ..
	num_modmap_keys	map->modmap[first_modmap_key +
		num_modmap_keys-1]
XkbExplicitComponentsMask	first_key_explicit,	
server->explicit[first_key_explicit] ..
	num_key_explicit	server->explicit[first_key_explicit +
		num_key_explicit - 1]
XkbKeyActionsMask	first_key_act,	server->key_acts[first_key_act] ..
	num_key_acts	server->key_acts[first_key_act +
		num_key_acts - 1]
XkbKeyBehaviorsMask	first_key_behavior,	
server->behaviors[first_key_behavior] ..
	num_key_behaviors	server->behaviors[first_key_behavior +
		num_key_behaviors - 1]
XkbVirtualModsMask	vmods	server->vmods[*]
XkbVirtualModMapMask	first_vmodmap_key,	
server->vmodmap[first_vmodmap_key]
	num_vmodmap_keys	 ..
		server->vmodmap[first_vmodmap_key
		+ num_vmodmap_keys - 1]
.TE
.SH "RETURN VALUES"
.TP 15
True
Da 
.I XkbSetMap 
function returns True all components specified by 
.I which 
are present up in tha 
.I xkb 
parameter.
.TP 15
False
Da 
.I XkbSetMap 
function returns False if any component specified by 
.I which 
is not present up in tha 
.I xkb 
parameter.
.SH STRUCTURES
.LP

Use tha XkbMapChangesRec structure ta identify n' track partial modifications 
to tha mappin components 
and ta reduce tha amount of traffic between tha server n' clients.
.nf

typedef struct _XkbMapChanges {
    unsigned short   chizzled;            /\(** identifies valid components up in structure */
    KeyCode          min_key_code;       /\(** lowest numbered keycode fo' thang */
    KeyCode          max_key_code;       /\(** highest numbered keycode fo' thang */
    unsigned char    first_type;         /\(** index of first key type modified */
    unsigned char    num_types;          /\(** # types modified */
    KeyCode          first_key_sym;      /\(** first key whose key_sym_map chizzled */
    unsigned char    num_key_syms;       /\(** # key_sym_map entries chizzled */
    KeyCode          first_key_act;      /\(** first key whose key_acts entry chizzled */
    unsigned char    num_key_acts;       /\(** # key_acts entries chizzled */
    KeyCode          first_key_behavior; /\(** first key whose behaviors chizzled */
    unsigned char    num_key_behaviors;  /\(** # behaviors entries chizzled */
    KeyCode          first_key_explicit; /\(** first key whose explicit entry chizzled */
    unsigned char    num_key_explicit;   /\(** # explicit entries chizzled */
    KeyCode          first_modmap_key;   /\(** first key whose modmap entry chizzled */
    unsigned char    num_modmap_keys;    /\(** # modmap entries chizzled */
    KeyCode          first_vmodmap_key;  /\(** first key whose vmodmap chizzled */
    unsigned char    num_vmodmap_keys;   /\(** # vmodmap entries chizzled */
    unsigned char    pad1;               /\(** reserved */
    unsigned short   vmods;              /\(** mask indicatin which vmodz chizzled */
} XkbMapChangesRec,*XkbMapChangesPtr;

.fi

Da complete description of a Xkb keyboard is given by a XkbDescRec. Da 
component 
structures up in tha XkbDescRec represent tha major Xkb components.

.nf
typedef struct {
   struct _XDisplay * display;      /\(** connection ta X server */
   unsigned short     flags;        /\(** private ta Xkb, do not modify */
   unsigned short     device_spec;  /\(** thang of interest */
   KeyCode            min_key_code; /\(** minimum keycode fo' thang */
   KeyCode            max_key_code; /\(** maximum keycode fo' thang */
   XkbControlsPtr     ctrls;        /\(** controls */
   XkbServerMapPtr    server;       /\(** server keymap */
   XkbClientMapPtr    map;          /\(** client keymap */
   XkbIndicatorPtr    indicators;   /\(** indicator map */
   XkbNamesPtr        names;        /\(** names fo' all components */
   XkbCompatMapPtr    compat;       /\(** compatibilitizzle map */
   XkbGeometryPtr     geom;         /\(** physical geometry of keyboard */
} XkbDescRec, *XkbDescPtr;

.fi
Da 
.I display 
field points ta a X display structure. Da 
.I flags field is private ta tha library: modifyin 
.I flags 
may yield unpredictable thangs up in dis biatch. Da 
.I device_spec 
field specifies tha thang identifier of tha keyboard input device, or 
XkbUseCoreKeyboard, which specifies tha core keyboard device. Da 
.I min_key_code
and 
.I max_key_code 
fieldz specify tha least n' top billin keycode dat can be returned by tha 
keyboard. Y'all KNOW dat shit, muthafucka! 

Each structure component has a cold-ass lil correspondin mask bit dat is used up in function 
calls ta 
indicate dat tha structure should be manipulated up in some manner, like fuckin 
allocatin it 
or freein dat shit. These masks n' they relationshizzlez ta tha fieldz up in tha 
XkbDescRec is 
shown up in Table 3.
.bp
.TS
c s s
l l l
l l l.
Table 3 Mask Bits fo' XkbDescRec
_
Mask Bit	XkbDescRec Field	Value
_
XkbControlsMask	ctrls	(1L<<0)
XkbServerMapMask	server	(1L<<1)
XkbIClientMapMask	map	(1L<<2)
XkbIndicatorMapMask	indicators	(1L<<3)
XkbNamesMask	names	(1L<<4)
XkbCompatMapMask	compat	(1L<<5)
XkbGeometryMask	geom	(1L<<6)
XkbAllComponentsMask	All Fields	(0x7f)
.TE
.SH DIAGNOSTICS
.TP 15
.B BadAlloc
Unable ta allocate storage
.TP 15
.B BadLength
Da length of a request is shorta or longer than dat required ta minimally 
contain tha arguments
.TP 15
.B BadValue
An argument is outta range
.SH "SEE ALSO"
.BR XkbChangeMap (3),
.BR XkbChangeTypesOfKey (3),
.BR XkbCopyKeyType (3),
.BR XkbCopyKeyTypes (3),
.BR XkbGetKeyActions (3),
.BR XkbGetKeyBehaviors (3),
.BR XkbGetKeyExplicitComponents (3),
.BR XkbGetKeyModifierMap (3),
.BR XkbGetKeySyms (3),
.BR XkbGetKeyTypes (3),
.BR XkbResizeKeyActions (3),
.BR XkbResizeKeySyms (3),
.BR XkbResizeKeyType (3),
.BR XkbGetVirtualModMap (3),
.BR XkbGetVirtualModz (3)
