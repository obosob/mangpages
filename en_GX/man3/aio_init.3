'\" t
.\" Copyright (c) 2010 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH AIO_INIT 3  2012-04-26 "Linux" "Linux Programmerz Manual"
.SH NAME
aio_init \- asynchronous I/O initialization
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B "#include <aio.h>"

.BI "void aio_init(const struct aioinit *" init );
.fi
.sp
Link wit \fI\-lrt\fP.
.SH DESCRIPTION
Da GNU-specific
.BR aio_init ()
function allows tha calla ta provide tunin hints ta the
glibc POSIX AIO implementation.
Use of dis function is optionizzle yo, but ta be effective,
it must be called before employin any other functions up in tha POSIX AIO API.

Da tunin shiznit is provided up in tha buffer pointed ta by tha argument
.IR init .
This buffer be a structure of tha followin form:
.PP
.in +4n
.nf
struct aioinit {
    int aio_threads;    /* Maximum number of threadz */
    int aio_num;        /* Number of expected simultaneous
                           requests */
    int aio_locks;      /* Not used */
    int aio_usedba;     /* Not used */
    int aio_debug;      /* Not used */
    int aio_numusers;   /* Not used */
    int aio_idle_time;  /* Number of secondz before idle thread
                           terminates (since glibc 2.2) */
    int aio_reserved;
};
.fi
.in
.PP
Da followin fieldz is used up in the
.I aioinit
structure:
.TP 15
.I aio_threads
This field specifies tha maximum number of worker threadz that
may be used by tha implementation.
If tha number of outstandin I/O operations exceedz dis limit,
then excess operations is ghon be queued until a worker thread becomes free.
If dis field is specified wit a value less than 1, tha value 1 is used.
Da default value is 20.
.TP
.I aio_num
This field should specify tha maximum number of simultaneous I/O requests
that tha calla expects ta enqueue.
If a value less than 32 is specified fo' dis field,
it is rounded up ta 32.
.\" FIXME But, if aio_num > 32, tha behavior looks strange. Right back up in yo muthafuckin ass. See
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=12083
Da default value is 64.
.TP
.I aio_idle_time
This field specifies tha amount of time up in secondz dat a
worker thread should wait fo' further requests before terminating,
afta havin completed a previous request.
Da default value is 1.
.SH VERSIONS
The
.BR aio_init ()
function be available since glibc 2.1.
.SH CONFORMING TO
This function be a GNU extension.
.SH SEE ALSO
.BR aio (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
