.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::QuotedPrint 3pm"
.TH MIME::QuotedPrint 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::QuotedPrint \- Encodin n' decodin of quoted\-printable strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use MIME::QuotedPrint;
\&
\& $encoded = encode_qp($decoded);
\& $decoded = decode_qp($encoded);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up functions ta encode n' decode strings tha fuck into n' from the
quoted-printable encodin specified up in \s-1RFC 2045 \- \s0\fI\s-1MIME \s0(Multipurpose
Internizzle Mail Extensions)\fR.  Da quoted-printable encodin is intended
to represent data dat largely consistz of bytes dat correspond to
printable charactas up in tha \s-1ASCII\s0 characta set.  Each non-printable
characta (as defined by Gangsta Gangstas) is represented by a
triplet consistin of tha characta \*(L"=\*(R" followed by two hexadecimal
digits.
.PP
Da followin functions is provided:
.ie n .IP "encode_qp( $str)" 4
.el .IP "encode_qp( \f(CW$str\fR)" 4
.IX Item "encode_qp( $str)"
.PD 0
.ie n .IP "encode_qp( $str, $eol)" 4
.el .IP "encode_qp( \f(CW$str\fR, \f(CW$eol\fR)" 4
.IX Item "encode_qp( $str, $eol)"
.ie n .IP "encode_qp( $str, $eol, $binmode )" 4
.el .IP "encode_qp( \f(CW$str\fR, \f(CW$eol\fR, \f(CW$binmode\fR )" 4
.IX Item "encode_qp( $str, $eol, $binmode )"
.PD
This function returns a encoded version of tha strang ($str) given as
argument.
.Sp
Da second argument ($eol) is tha line-endin sequence ta use.  It is
optionizzle n' defaults ta \*(L"\en\*(R".  Every occurrence of \*(L"\en\*(R" is replaced
with dis string, n' it be also used fo' additionizzle \*(L"soft line
breaks\*(R" ta ensure dat no line end up longer than 76 characters.  Pass
it as \*(L"\e015\e012\*(R" ta produce data suitable fo' external consumption.
Da strang \*(L"\er\en\*(R" produces tha same ol' dirty result on nuff platforms yo, but not
all.
.Sp
Da third argument ($binmode) will select binary mode if passed as a
\&\s-1TRUE\s0 value.  In binary mode \*(L"\en\*(R" is ghon be encoded up in tha same way as
any other non-printable character n' shit.  This ensures dat a thugged-out decoder will
end up wit exactly tha same strang whatever line endin sequence it
uses.  In general it is preferable ta use tha base64 encodin for
binary data; peep MIME::Base64.
.Sp
An \f(CW$eol\fR of "\*(L" (the empty string) is special. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  In dis case, no \*(R"soft
line breaks\*(L" is introduced n' binary mode is effectively enabled so
that any \*(R"\en" up in tha original gangsta data is encoded as well.
.ie n .IP "decode_qp( $str )" 4
.el .IP "decode_qp( \f(CW$str\fR )" 4
.IX Item "decode_qp( $str )"
This function returns tha plain text version of tha strang given
as argument.  Da linez of tha result is \*(L"\en\*(R" terminated, even if
the \f(CW$str\fR argument gotz nuff \*(L"\er\en\*(R" terminated lines.
.PP
If you prefer not ta import these routines tha fuck into yo' namespace, you can
call dem as:
.PP
.Vb 3
\&  use MIME::QuotedPrint ();
\&  $encoded = MIME::QuotedPrint::encode($decoded);
\&  $decoded = MIME::QuotedPrint::decode($encoded);
.Ve
.PP
Perl v5.8 n' betta allow extended Unicode charactas up in strings.
Such strings cannot be encoded directly, as tha quoted-printable
encodin is only defined fo' single-byte characters.  Da solution is
to use tha Encode module ta select tha byte encodin you want.  For
example:
.PP
.Vb 2
\&    use MIME::QuotedPrint qw(encode_qp);
\&    use Encode qw(encode);
\&
\&    $encoded = encode_qp(encode("UTF\-8", "\ex{FFFF}\en"));
\&    print $encoded;
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1997,2002\-2004 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::Base64
