.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Text 3"
.TH Pod::Text 3 "2013-01-02" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Text \- Convert POD data ta formatted ASCII text
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Pod::Text;
\&    mah $parser = Pod::Text\->new (sentence => 0, width => 78);
\&
\&    # Read POD from STDIN n' write ta STDOUT.
\&    $parser\->parse_from_filehandle;
\&
\&    # Read POD from file.pod n' write ta file.txt.
\&    $parser\->parse_from_file (\*(Aqfile.pod\*(Aq, \*(Aqfile.txt\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Pod::Text be a module dat can convert documentation up in tha \s-1POD\s0 format (the
preferred language fo' documentin Perl) tha fuck into formatted \s-1ASCII. \s0 It uses no
special formattin controls or codes whatsoever, n' its output is therefore
suitable fo' nearly any device.
.PP
As a thugged-out derived class from Pod::Simple, Pod::Text supports tha same ol' dirty methodz and
interfaces.  See Pod::Simple fo' all tha details; briefly, one creates a
new parser wit \f(CW\*(C`Pod::Text\->new()\*(C'\fR n' then normally calls \fIparse_file()\fR.
.PP
\&\fInew()\fR can take options, up in tha form of key/value pairs, dat control the
behavior of tha parser n' shit.  Da currently recognized options are:
.IP "alt" 4
.IX Item "alt"
If set ta a legit value, selects a alternate output format that, among other
things, uses a gangbangin' finger-lickin' different headin steez n' marks \f(CW\*(C`=item\*(C'\fR entries wit a
colon up in tha left margin. I aint talkin' bout chicken n' gravy biatch.  Defaults ta false.
.IP "code" 4
.IX Item "code"
If set ta a legit value, tha non-POD partz of tha input file is ghon be included
in tha output.  Useful fo' viewin code documented wit \s-1POD\s0 blocks wit the
\&\s-1POD\s0 rendered n' tha code left intact.
.IP "errors" 4
.IX Item "errors"
How tha fuck ta report errors.  \f(CW\*(C`die\*(C'\fR say ta throw a exception on any \s-1POD\s0
formattin error. Shiiit, dis aint no joke.  \f(CW\*(C`stderr\*(C'\fR say ta report errors on standard error yo, but
not ta throw a exception. I aint talkin' bout chicken n' gravy biatch.  \f(CW\*(C`pod\*(C'\fR say ta include a \s-1POD ERRORS\s0 section
in tha resultin documentation summarizin tha errors.  \f(CW\*(C`none\*(C'\fR ignores
\&\s-1POD\s0 errors entirely, as much as possible.
.Sp
Da default is \f(CW\*(C`output\*(C'\fR.
.IP "indent" 4
.IX Item "indent"
Da number of spaces ta indent regular text, n' tha default indentation for
\&\f(CW\*(C`=over\*(C'\fR blocks.  Defaults ta 4.
.IP "loose" 4
.IX Item "loose"
If set ta a legit value, a funky-ass blank line is printed afta a \f(CW\*(C`=head1\*(C'\fR heading.
If set ta false (the default), no blank line is printed afta \f(CW\*(C`=head1\*(C'\fR,
although one is still printed afta \f(CW\*(C`=head2\*(C'\fR.  This is tha default cuz
itz tha expected formattin fo' manual pages; if you formatting
arbitrary text documents, settin dis ta legit may result up in mo' pleasing
output.
.IP "margin" 4
.IX Item "margin"
Da width of tha left margin up in spaces.  Defaults ta 0.  This is tha margin
for all text, includin headings, not tha amount by which regular text is
indented; fo' tha latter, peep tha \fIindent\fR option. I aint talkin' bout chicken n' gravy biatch.  To set tha right
margin, peep tha \fIwidth\fR option.
.IP "nourls" 4
.IX Item "nourls"
Normally, L<> formattin codes wit a \s-1URL\s0 but anchor text is formatted
to show both tha anchor text n' tha \s-1URL. \s0 In other lyrics:
.Sp
.Vb 1
\&    L<foo|http://example.com/>
.Ve
.Sp
is formatted as:
.Sp
.Vb 1
\&    foo <http://example.com/>
.Ve
.Sp
This option, if set ta a legit value, suppresses tha \s-1URL\s0 when anchor text
is given, so dis example would be formatted as just \f(CW\*(C`foo\*(C'\fR.  This can
produce less cluttered output up in cases where tha URLs is not particularly
important.
.IP "quotes" 4
.IX Item "quotes"
Sets tha quote marks used ta surround C<> text.  If tha value be a
single character, it is used as both tha left n' right quote; if it is two
characters, tha straight-up original gangsta characta is used as tha left quote n' tha second as
the right quoted; n' if it is four characters, tha straight-up original gangsta two is used as
the left quote n' tha second two as tha right quote.
.Sp
This may also be set ta tha special value \f(CW\*(C`none\*(C'\fR, up in which case no quote
marks is added round C<> text.
.IP "sentence" 4
.IX Item "sentence"
If set ta a legit value, Pod::Text will assume dat each sentence endz up in two
spaces, n' will try ta preserve dat spacing.  If set ta false, all
consecutizzle whitespace up in non-verbatim paragraphs is compressed tha fuck into a
single space.  Defaults ta true.
.IP "stderr" 4
.IX Item "stderr"
Send error lyrics bout invalid \s-1POD\s0 ta standard error instead of
appendin a \s-1POD ERRORS\s0 section ta tha generated output.  This is
equivalent ta settin \f(CW\*(C`errors\*(C'\fR ta \f(CW\*(C`stderr\*(C'\fR if \f(CW\*(C`errors\*(C'\fR aint already
set.  It be supported fo' backward compatibility.
.IP "utf8" 4
.IX Item "utf8"
By default, Pod::Text uses tha same ol' dirty output encodin as tha input encoding
of tha \s-1POD\s0 source (provided dat Perl was built wit PerlIO; otherwise, it
doesn't encode its output).  If dis option is given, tha output encoding
is forced ta \s-1UTF\-8.\s0
.Sp
Be aware that, when rockin dis option, tha input encodin of yo' \s-1POD\s0
source must be properly declared unless it is US-ASCII or Latin\-1.  \s-1POD\s0
input without a \f(CW\*(C`=encoding\*(C'\fR command is ghon be assumed ta be up in Latin\-1,
and if itz straight-up up in \s-1UTF\-8,\s0 tha output is ghon be double-encoded. Y'all KNOW dat shit, muthafucka!  See
\&\fIperlpod\fR\|(1) fo' mo' shiznit on tha \f(CW\*(C`=encoding\*(C'\fR command.
.IP "width" 4
.IX Item "width"
Da column at which ta wrap text on tha right-hand side.  Defaults ta 76.
.PP
Da standard Pod::Simple method \fIparse_file()\fR takes one argument, tha file or
file handle ta read from, n' writes output ta standard output unless that
has been chizzled wit tha \fIoutput_fh()\fR method. Y'all KNOW dat shit, muthafucka!  See Pod::Simple fo' the
specific details n' fo' other alternatizzle intercourses.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Bizarre space up in item" 4
.IX Item "Bizarre space up in item"
.PD 0
.IP "Item called without tag" 4
.IX Item "Item called without tag"
.PD
(W) Somethang has gone wack up in internal \f(CW\*(C`=item\*(C'\fR processing.  These
lyrics indicate a funky-ass bug up in Pod::Text; you should never peep em.
.ie n .IP "Can't open %s fo' reading: %s" 4
.el .IP "Can't open \f(CW%s\fR fo' reading: \f(CW%s\fR" 4
.IX Item "Can't open %s fo' reading: %s"
(F) Pod::Text was invoked via tha compatibilitizzle mode \fIpod2text()\fR intercourse
and tha input file dat shiznit was given could not be opened.
.ie n .IP "Invalid errors settin ""%s""" 4
.el .IP "Invalid errors settin ``%s''" 4
.IX Item "Invalid errors settin %s"
(F) Da \f(CW\*(C`errors\*(C'\fR parameta ta tha constructor was set ta a unknown value.
.ie n .IP "Invalid quote justification ""%s""" 4
.el .IP "Invalid quote justification ``%s''" 4
.IX Item "Invalid quote justification %s"
(F) Da quote justification given (the \f(CW\*(C`quotes\*(C'\fR option ta the
constructor) was invalid. Y'all KNOW dat shit, muthafucka!  A quote justification must be one, two, or four
charactas long.
.IP "\s-1POD\s0 document had syntax errors" 4
.IX Item "POD document had syntax errors"
(F) Da \s-1POD\s0 document bein formatted had syntax errors n' tha \f(CW\*(C`errors\*(C'\fR
option was set ta \f(CW\*(C`die\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
Encodin handlin assumes dat PerlIO be available n' do not work
properly if it aint.  Da \f(CW\*(C`utf8\*(C'\fR option is therefore not supported
unless Perl is built wit PerlIO support.
.SH "CAVEATS"
.IX Header "CAVEATS"
If Pod::Text is given tha \f(CW\*(C`utf8\*(C'\fR option, tha encodin of its output file
handle is ghon be forced ta \s-1UTF\-8\s0 if possible, overridin any existing
encoding.  This is ghon be done even if tha file handle aint pimped by
Pod::Text n' was passed up in from outside.  This maintains consistency
regardless of \s-1PERL_UNICODE\s0 n' other settings.
.PP
If tha \f(CW\*(C`utf8\*(C'\fR option aint given, tha encodin of its output file handle
will be forced ta tha detected encodin of tha input \s-1POD,\s0 which preserves
whatever tha input text is.  This ensures backward compatibilitizzle with
earlier, pre-Unicode versionz of dis module, without big-ass numbers of
Perl warnings.
.PP
This aint ideal yo, but it seems ta be tha dopest compromise.  If it don't
work fo' you, please let me know tha detailz of how tha fuck it broke.
.SH "NOTES"
.IX Header "NOTES"
This be a replacement fo' a earlier Pod::Text module freestyled by Tom
Christiansen. I aint talkin' bout chicken n' gravy biatch.  It has a revamped intercourse, since it now uses Pod::Simple,
but a intercourse roughly compatible wit tha oldschool \fIPod::Text::pod2text()\fR
function is still available.  Please chizzle ta tha freshly smoked up callin convention,
though.
.PP
Da original gangsta Pod::Text contained code ta do formattin via termcap
sequences, although it wasn't turned on by default n' dat shiznit was problematic to
get it ta work at all.  This rewrite don't even try ta do dat yo, but a
subclass of it do.  Look fo' Pod::Text::Termcap.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Simple, Pod::Text::Termcap, \fIperlpod\fR\|(1), \fIpod2text\fR\|(1)
.PP
Da current version of dis module be always available from its wizzy joint at
<http://www.eyrie.org/~eagle/software/podlators/>.  It be also part of the
Perl core distribution az of 5.6.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Russ Allbery <rra@stanford.edu>, based \fIvery\fR heavily on tha original
Pod::Text by Tomothy Christiansen <tchrist@mox.perl.com> n' its conversion to
Pod::Parser by Brad Appleton <bradapp@enteract.com>.  Shizzle Burkez initial
conversion of Pod::Man ta use Pod::Simple provided much-needed guidizzle on
how ta use Pod::Simple.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1999, 2000, 2001, 2002, 2004, 2006, 2008, 2009, 2012, 2013 Russ
Allbery <rra@stanford.edu>.
.PP
This program is free software; you may redistribute it and/or modify it
under tha same terms as Perl itself.
