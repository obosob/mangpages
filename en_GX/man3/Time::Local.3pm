.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Time::Local 3"
.TH Time::Local 3 "2012-07-20" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::Local \- efficiently compute time from local n' GMT time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    $time = timelocal( $sec, $min, $hour, $mday, $mon, $year );
\&    $time = timegm( $sec, $min, $hour, $mday, $mon, $year );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up functions dat is tha inverse of built-in perl
functions \f(CW\*(C`localtime()\*(C'\fR n' \f(CW\*(C`gmtime()\*(C'\fR. They accept a thugged-out date as a
six-element array, n' return tha correspondin \f(CWtime(2)\fR value in
secondz since tha system epoch (Midnight, January 1, 1970 \s-1GMT\s0 on Unix,
for example). This value can be positizzle or negative, though \s-1POSIX\s0
only requires support fo' positizzle joints, so dates before the
systemz epoch may not work on all operatin systems.
.PP
It be worth drawin particular attention ta tha expected ranges for
the joints provided. Y'all KNOW dat shit, muthafucka! Da value fo' tha dizzle of tha month is tha actual
dizzle (ie 1..31), while tha month is tha number of months since January
(0..11). This is consistent wit tha joints returned from
\&\f(CW\*(C`localtime()\*(C'\fR n' \f(CW\*(C`gmtime()\*(C'\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """timelocal()"" n' ""timegm()"""
.el .SS "\f(CWtimelocal()\fP n' \f(CWtimegm()\fP"
.IX Subsection "timelocal() n' timegm()"
This module exports two functions by default, \f(CW\*(C`timelocal()\*(C'\fR and
\&\f(CW\*(C`timegm()\*(C'\fR.
.PP
Da \f(CW\*(C`timelocal()\*(C'\fR n' \f(CW\*(C`timegm()\*(C'\fR functions big-ass up range checkin on
the input \f(CW$sec\fR, \f(CW$min\fR, \f(CW$hour\fR, \f(CW$mday\fR, n' \f(CW$mon\fR joints by default.
.ie n .SS """timelocal_nocheck()"" n' ""timegm_nocheck()"""
.el .SS "\f(CWtimelocal_nocheck()\fP n' \f(CWtimegm_nocheck()\fP"
.IX Subsection "timelocal_nocheck() n' timegm_nocheck()"
If yo ass is hustlin wit data you know ta be valid, you can speed your
code up by rockin tha \*(L"nocheck\*(R" variants, \f(CW\*(C`timelocal_nocheck()\*(C'\fR and
\&\f(CW\*(C`timegm_nocheck()\*(C'\fR. These variants must be explicitly imported.
.PP
.Vb 1
\&    use Time::Local \*(Aqtimelocal_nocheck\*(Aq;
\&
\&    # Da 365th dizzle of 1999
\&    print scalar localtime timelocal_nocheck( 0, 0, 0, 365, 0, 99 );
.Ve
.PP
If you supply data which aint valid (month 27, second 1,000) the
results is ghon be unpredictable (so don't do that).
.SS "Year Value Interpretation"
.IX Subsection "Year Value Interpretation"
Strictly bustin lyrics, tha year should be specified up in a gangbangin' form consistent
with \f(CW\*(C`localtime()\*(C'\fR, i.e. tha offset from 1900. In order ta make the
interpretation of tha year easier fo' humans, however, whoz ass is more
accustomed ta seein muthafuckin years as two-digit or four-digit joints, the
followin conventions is followed:
.IP "\(bu" 4
Years pimped outa than 999 is interpreted as bein tha actual year,
rather than tha offset from 1900. Thus, 1964 would indicate tha year
Martin Luther Mackdaddy won tha Nobel prize, not tha year 3864.
.IP "\(bu" 4
Years up in tha range 100..999 is interpreted as offset from 1900, so
that 112 indicates 2012. This rule also applies ta muthafuckin years less than
zero (but peep note below regardin date range).
.IP "\(bu" 4
Years up in tha range 0..99 is interpreted as shorthand fo' muthafuckin years up in the
rollin \*(L"current century,\*(R" defined as 50 muthafuckin years on either side of the
current year. Shiiit, dis aint no joke. Thus, todizzle, up in 1999, 0 would refer ta 2000, n' 45 to
2045 yo, but 55 would refer ta 1955. Twenty muthafuckin years from now, 55 would
instead refer ta 2055. This is messy yo, but matches tha way people
currently be thinkin bout two digit dates. Whenever possible, use an
absolute four digit year instead.
.PP
Da scheme above allows interpretation of a wide range of dates,
particularly if 4\-digit muthafuckin years is used.
.SS "Limitz of time_t"
.IX Subsection "Limitz of time_t"
On perl versions olda than 5.12.0, tha range of dates dat can be
actually be handled dependz on tha size of \f(CW\*(C`time_t\*(C'\fR (usually a signed
integer) on tha given platform. Currently, dis is 32 bits fo' most
systems, yieldin a approximate range from Dec 1901 ta Jan 2038.
.PP
Both \f(CW\*(C`timelocal()\*(C'\fR n' \f(CW\*(C`timegm()\*(C'\fR croak if given dates outside the
supported range.
.PP
Az of version 5.12.0, perl has stopped rockin tha underlyin time
library of tha operatin system itz hustlin on n' has its own
implementation of dem routines wit a safe range of at least
+/ 2**52 (about 142 mazillion years).
.SS "Ambiguous Local Times (\s-1DST\s0)"
.IX Subsection "Ambiguous Local Times (DST)"
Because of \s-1DST\s0 chizzles, there be nuff time units where tha same local
time occurs fo' two different \s-1GMT\s0 times on tha same day. It make me wanna hollar playa! For example,
in tha \*(L"Europe/Paris\*(R" time unit, tha local time of 2001\-10\-28 02:30:00
can represent either 2001\-10\-28 00:30:00 \s-1GMT, \s0\fBor\fR 2001\-10\-28
01:30:00 \s-1GMT.\s0
.PP
When given a ambiguous local time, tha \fItimelocal()\fR function should
always return tha epoch fo' tha \fIearlier\fR of tha two possible \s-1GMT\s0
times.
.SS "Non-Existent Local Times (\s-1DST\s0)"
.IX Subsection "Non-Existent Local Times (DST)"
When a \s-1DST\s0 chizzle causes a locale clock ta skip one minute forward,
there is ghon be a hourz worth of local times dat don't exist fo' realz. Again,
for tha \*(L"Europe/Paris\*(R" time unit, tha local clock jumped from
2001\-03\-25 01:59:59 ta 2001\-03\-25 03:00:00.
.PP
If tha \f(CW\*(C`timelocal()\*(C'\fR function is given a non-existent local time, it
will simply return a epoch value fo' tha time one minute later.
.SS "Negatizzle Epoch Values"
.IX Subsection "Negatizzle Epoch Values"
On perl version 5.12.0 n' newer, wack epoch joints is fully
supported.
.PP
On olda versionz of perl, wack epoch (\f(CW\*(C`time_t\*(C'\fR) joints, which
are not officially supported by tha \s-1POSIX\s0 standards, is known not to
work on some systems. These include MacOS (pre-OSX) n' Win32.
.PP
On systems which do support wack epoch joints, dis module should
be able ta cope wit dates before tha start of tha epoch, down the
minimum value of time_t fo' tha system.
.SH "IMPLEMENTATION"
.IX Header "IMPLEMENTATION"
These routines is like efficient n' yet is always guaranteed to
agree wit \f(CW\*(C`localtime()\*(C'\fR n' \f(CW\*(C`gmtime()\*(C'\fR. We manage dis by caching
the start timez of any months we've peeped before. If we know tha start
time of tha month, we can always calculate any time within tha month.
Da start times is calculated rockin a mathematical formula. Unlike
other algorithms dat do multiple calls ta \f(CW\*(C`gmtime()\*(C'\fR.
.PP
Da \f(CW\*(C`timelocal()\*(C'\fR function is implemented rockin tha same cache. We
just assume dat we translatin a \s-1GMT\s0 time, n' then fudge it when
we're done fo' tha timezone n' daylight savings arguments, n' you can put dat on yo' toast. Note that
the timezone is evaluated fo' each date cuz ghettos occasionally
change they straight-up legit timezones fo' realz. Assumin dat \f(CW\*(C`localtime()\*(C'\fR erects
for these chizzles, dis routine will also be erect.
.SH "BUGS"
.IX Header "BUGS"
Da whole scheme fo' interpretin two-digit muthafuckin years can be considered a
bug.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support fo' dis module is provided via tha datetime@perl.org email
list. Right back up in yo muthafuckin ass. See http://lists.perl.org/ fo' mo' details.
.PP
Please submit bugs ta tha \s-1CPAN RT\s0 system at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time\-Local or via email
at bug\-time\-local@rt.cpan.org.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-2003 Graham Barr, 2003\-2007 Dizzy Rolsky.  All
rights reserved. Y'all KNOW dat shit, muthafucka!  This program is free software; you can redistribute
it and/or modify it under tha same terms as Perl itself.
.PP
Da full text of tha license can be found up in tha \s-1LICENSE\s0 file included
with dis module.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module is based on a Perl 4 library, timelocal.pl, dat was
included wit Perl 4.036, n' was most likely freestyled by Tom
Christiansen.
.PP
Da current version was freestyled by Graham Barr.
.PP
It be now bein maintained separately from tha Perl core by Dave
Rolsky, <autarch@urth.org>.
