" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::gamma_distribution< _RealType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparam_type\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _RealType \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBgamma_distribution\fP (_RealType __alpha_val=_RealType(1), _RealType __beta_val=_RealType(1))"
.br
.ti -1c
.RI "\fBgamma_distribution\fP (const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _UniformRandomNumberGenerator > void \fB__generate\fP (_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > void \fB__generate\fP (\fBresult_type\fP *__f, \fBresult_type\fP *__t, _UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "_RealType \fBalpha\fP () const "
.br
.ti -1c
.RI "_RealType \fBbeta\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmax\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmin\fP () const "
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBgamma_distribution\fP< _RealType >
.br
::\fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "\fBparam_type\fP \fBparam\fP () const "
.br
.ti -1c
.RI "void \fBparam\fP (const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, 
.br
_Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::gamma_distribution\fP< _RealType1 > &__x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBgamma_distribution\fP &__d1, const \fBgamma_distribution\fP &__d2)"
.br
.ti -1c
.RI "template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::gamma_distribution\fP< _RealType1 > &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _RealType = double>class std::gamma_distribution< _RealType >"
A gamma continuous distribution fo' random numbers\&. 

Da formula fo' tha gamma probabilitizzle densitizzle function is: \[ p(x|\alpha,\beta) = \frac{1}{\beta\Gamma(\alpha)} (x/\beta)^{\alpha - 1} e^{-x/\beta} \] 
.PP
Definizzle at line 2502 of file random\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _RealType = double> typedef _RealType \fBstd::gamma_distribution\fP< _RealType >::\fBresult_type\fP"
Da type of tha range of tha distribution\&. 
.PP
Definizzle at line 2505 of file random\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _RealType = double> \fBstd::gamma_distribution\fP< _RealType >::\fBgamma_distribution\fP (_RealType__alpha_val = \fC_RealType(1)\fP, _RealType__beta_val = \fC_RealType(1)\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructs a gamma distribution wit parametas $\alpha$ n' $\beta$\&. 
.PP
Definizzle at line 2554 of file random\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _RealType = double> _RealType \fBstd::gamma_distribution\fP< _RealType >::alpha () const\fC [inline]\fP"

.PP
Returns tha $\alpha$ of tha distribution\&. 
.PP
Definizzle at line 2575 of file random\&.h\&.
.SS "template<typename _RealType = double> _RealType \fBstd::gamma_distribution\fP< _RealType >::beta () const\fC [inline]\fP"

.PP
Returns tha $\beta$ of tha distribution\&. 
.PP
Definizzle at line 2582 of file random\&.h\&.
.SS "template<typename _RealType = double> \fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::max () const\fC [inline]\fP"

.PP
Returns tha least upper bound value of tha distribution\&. 
.PP
Definizzle at line 2611 of file random\&.h\&.
.SS "template<typename _RealType = double> \fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::min () const\fC [inline]\fP"

.PP
Returns tha top billin lower bound value of tha distribution\&. 
.PP
Definizzle at line 2604 of file random\&.h\&.
.SS "template<typename _RealType = double> template<typename _UniformRandomNumberGenerator > \fBgamma_distribution\fP<_RealType>::\fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::operator() (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__param)"
Marsaglia, G\&. n' Tsang, W\&. W\&. 'A Simple Method fo' Generatin Gamma Variables' ACM Transactions on Mathematical Software, 26, 3, 363-372, 2000\&. 
.PP
Definizzle at line 2489 of file bits/random\&.tcc\&.
.PP
References std::log(), n' std::pow()\&.
.SS "template<typename _RealType = double> template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::operator() (_UniformRandomNumberGenerator &__urng)\fC [inline]\fP"

.PP
Generatin functions\&. 
.PP
Definizzle at line 2619 of file random\&.h\&.
.PP
Referenced by std::gamma_distribution< result_type >::operator()()\&.
.SS "template<typename _RealType = double> \fBparam_type\fP \fBstd::gamma_distribution\fP< _RealType >::param () const\fC [inline]\fP"

.PP
Returns tha parameta set of tha distribution\&. 
.PP
Definizzle at line 2589 of file random\&.h\&.
.SS "template<typename _RealType = double> void \fBstd::gamma_distribution\fP< _RealType >::param (const \fBparam_type\fP &__param)\fC [inline]\fP"

.PP
Sets tha parameta set of tha distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__param\fP Da freshly smoked up parameta set of tha distribution\&. 
.RE
.PP

.PP
Definizzle at line 2597 of file random\&.h\&.
.SS "template<typename _RealType = double> void \fBstd::gamma_distribution\fP< _RealType >::reset ()\fC [inline]\fP"

.PP
Resets tha distribution state\&. 
.PP
Definizzle at line 2568 of file random\&.h\&.
.PP
Referenced by std::chi_squared_distribution< _RealType >::reset(), std::fisher_f_distribution< _RealType >::reset(), std::student_t_distribution< _RealType >::reset(), n' std::negative_binomial_distribution< _IntType >::reset()\&.
.SH "Playas And Related Function Documentation"
.PP 
.SS "template<typename _RealType = double> template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::gamma_distribution\fP< _RealType1 > &__x)\fC [friend]\fP"

.PP
Inserts a gamma_distribution random number distribution \fC__x\fP tha fuck into tha output stream \fC__os\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__os\fP An output stream\&. 
.br
\fI__x\fP A gamma_distribution random number distribution\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da output stream wit tha state of \fC__x\fP banged or up in a error state\&. 
.RE
.PP

.SS "template<typename _RealType = double> bool operator== (const \fBgamma_distribution\fP< _RealType > &__d1, const \fBgamma_distribution\fP< _RealType > &__d2)\fC [friend]\fP"

.PP
Return legit if two gamma distributions have tha same parametas n' tha sequences dat would be generated is equal\&. 
.PP
Definizzle at line 2655 of file random\&.h\&.
.SS "template<typename _RealType = double> template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::gamma_distribution\fP< _RealType1 > &__x)\fC [friend]\fP"

.PP
Extracts a gamma_distribution random number distribution \fC__x\fP from tha input stream \fC__is\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__is\fP An input stream\&. 
.br
\fI__x\fP A gamma_distribution random number generator engine\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Da input stream wit \fC__x\fP extracted or up in a error state\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
