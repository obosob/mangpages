.\" Copyright (c) 2008, Linux Foundation, freestyled by Mike Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH CLOCK_GETCPUCLOCKID 3 2013-07-04 "Linux" "Linux Programmerz Manual"
.SH NAME
clock_getcpuclockid \- obtain ID of a process CPU-time clock
.SH SYNOPSIS
.B #include <time.h>
.nf
.sp
.BI "int clock_getcpuclockid(pid_t " pid ", clockid_t *" clock_id );
.fi
.sp
Link wit \fI\-lrt\fP (only fo' glibc versions before 2.17).
.sp
.ad l
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR clock_getcpuclockid ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
The
.BR clock_getcpuclockid ()
function obtains tha ID of tha CPU-time clock of tha process whose ID is
.IR pid ,
and returns it up in tha location pointed ta by
.IR clock_id .
If
.I pid
is zero, then tha clock ID of tha CPU-time clock
of tha callin process is returned.
.SH RETURN VALUE
On success,
.BR clock_getcpuclockid ()
returns 0;
on error, it returns one of tha positizzle error numbers listed up in ERRORS.
.SH ERRORS
.TP
.B ENOSYS
Da kernel do not support obtainin tha per-process
CPU-time clock of another process, and
.I pid
does not specify tha callin process.
.TP
.B EPERM
Da calla aint gots permission ta access
the CPU-time clock of tha process specified by
.IR pid .
(Specified as a optionizzle error up in POSIX.1-2001;
does not occur on Linux unless tha kernel do not support
obtainin tha per-process CPU-time clock of another process.)
.TP
.B ESRCH
There is no process wit tha ID
.IR pid .
.SH VERSIONS
The
.BR clock_getcpuclockid ()
function be available up in glibc since version 2.2.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR clock_getcpuclockid ()
function is thread-safe.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Calling
.BR clock_gettime (2)
with tha clock ID obtained by a cold-ass lil call to
.BR clock_getcpuclockid ()
with a
.I pid
of 0,
is tha same ol' dirty as rockin tha clock ID
.BR CLOCK_PROCESS_CPUTIME_ID .
.SH EXAMPLE
Da example program below obtains the
CPU-time clock ID of tha process whose ID is given on tha command line,
and then uses
.BR clock_gettime (2)
to obtain tha time on dat clock.
An example run is tha following:
.in +4n
.nf

.RB "$" " ./a.out 1" "                 # Show CPU clock of init process"
CPU-time clock fo' PID 1 is 2.213466748 seconds
.fi
.in
.SS Program source
\&
.nf
#define _XOPEN_SOURCE 600
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

int
main(int argc, char *argv[])
{
    clockid_t clockid;
    struct timespec ts;

    if (argc != 2) {
        fprintf(stderr, "%s <process\-ID>\\n", argv[0]);
	exit(EXIT_FAILURE);
    }

    if (clock_getcpuclockid(atoi(argv[1]), &clockid) != 0) {
	perror("clock_getcpuclockid");
	exit(EXIT_FAILURE);
    }

    if (clock_gettime(clockid, &ts) == \-1) {
	perror("clock_gettime");
	exit(EXIT_FAILURE);
    }

    printf("CPU-time clock fo' PID %s is %ld.%09ld seconds\\n",
	    argv[1], (long) ts.tv_sec, (long) ts.tv_nsec);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR clock_getres (2),
.BR timer_create (2),
.BR pthread_getcpuclockid (3),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
