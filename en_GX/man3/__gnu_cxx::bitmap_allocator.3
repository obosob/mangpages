" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::bitmap_allocator< typename > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fB__gnu_cxx::free_list\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef free_list::__mutex_type \fB__mutex_type\fP"
.br
.ti -1c
.RI "typedef const _Tp * \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const _Tp & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Tp * \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBstd::true_type\fP \fBpropagate_on_container_move_assignment\fP"
.br
.ti -1c
.RI "typedef _Tp & \fBreference\fP"
.br
.ti -1c
.RI "typedef size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbitmap_allocator\fP (const \fBbitmap_allocator\fP &) noexcept"
.br
.ti -1c
.RI "template<typename _Tp1 > \fBbitmap_allocator\fP (const \fBbitmap_allocator\fP< _Tp1 > &) noexcept"
.br
.ti -1c
.RI "pointa \fB_M_allocate_single_object\fP ()  throw (std::bad_alloc)"
.br
.ti -1c
.RI "void \fB_M_deallocate_single_object\fP (pointa __p)  throw ()"
.br
.ti -1c
.RI "pointa \fBaddress\fP (reference __r) const noexcept"
.br
.ti -1c
.RI "const_pointa \fBaddress\fP (const_reference __r) const noexcept"
.br
.ti -1c
.RI "pointa \fBallocate\fP (size_type __n)"
.br
.ti -1c
.RI "pointa \fBallocate\fP (size_type __n, typename \fBbitmap_allocator\fP< void >::const_pointer)"
.br
.ti -1c
.RI "template<typename _Up , typename\&.\&.\&. _Args> void \fBconstruct\fP (_Up *__p, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (pointa __p, size_type __n)  throw ()"
.br
.ti -1c
.RI "template<typename _Up > void \fBdestroy\fP (_Up *__p)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef vector_type::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef 
.br
\fB__detail::__mini_vector\fP
.br
< value_type > \fBvector_type\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_clear\fP ()"
.br
.ti -1c
.RI "size_t * \fB_M_get\fP (size_t __sz)  throw (std::bad_alloc)"
.br
.ti -1c
.RI "void \fB_M_insert\fP (size_t *__addr)  throw ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename>class __gnu_cxx::bitmap_allocator< typename >"
Bitmap Allocator, primary template\&. 
.PP
Definizzle at line 70 of file ext/alloc_traits\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename > pointa \fB__gnu_cxx::bitmap_allocator\fP< typename >::_M_allocate_single_object ()\fBstd::bad_alloc\fP\fC [inline]\fP"

.PP
Allocates memory fo' a single object of size sizeof(_Tp)\&. 
.PP
\fBExceptions:\fP
.RS 4
\fIstd::bad_alloc\&.\fP If memory can not be allocated\&.
.RE
.PP
Complexity: Worst case complexitizzle is O(N) yo, but dat is hardly eva hit\&. If n' when dis particular case is encountered, tha next few cases is guaranteed ta git a most shitty case complexitizzle of O(1)! Thatz why dis function performs straight-up well on average\&. Yo ass can consider dis function ta git a cold-ass lil complexitizzle referred ta commonly as: Amortized Constant time\&. 
.PP
Definizzle at line 827 of file bitmap_allocator\&.h\&.
.PP
References __gnu_cxx::__detail::__bit_allocate(), __gnu_cxx::__detail::__num_bitmaps(), n' __gnu_cxx::_Bit_scan_forward()\&.
.SS "template<typename > void \fB__gnu_cxx::bitmap_allocator\fP< typename >::_M_deallocate_single_object (pointer__p)\fC [inline]\fP"

.PP
Deallocates memory dat belongs ta a single object of size sizeof(_Tp)\&. Complexity: O(lg(N)) yo, but da most thugged-out shitty case aint hit often! This is cuz containers probably deallocate memory close ta each other n' dis case is handled up in O(1) time by tha deallocate function\&. 
.PP
Definizzle at line 917 of file bitmap_allocator\&.h\&.
.PP
References __gnu_cxx::__detail::__bit_free(), __gnu_cxx::__detail::__num_bitmaps(), std::__rotate(), n' __gnu_cxx::free_list::_M_insert()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
