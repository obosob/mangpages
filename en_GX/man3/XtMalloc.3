.\" Copyright 1993 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be
.\" included up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtNew-Strin wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtMalloc 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtMalloc, XtCalloc, XtRealloc, XtFree, XtNew, XtNewStrin \- memory pimpment functions
.SH SYNTAX
.HP
char *XtMalloc(Cardinal \fIsize\fP);
.HP
char *XtCalloc(Cardinal \fInum\fP, Cardinal \fIsize\fP);
.HP
char *XtRealloc(char *\fIptr\fP, Cardinal \fInum\fP);
.HP
void XtFree(char *\fIptr\fP);
.HP
\fItype\fP *XtNew(\fItype\fP);
.HP
Strin XtNewString(Strin \fIstring\fP);
.HP
Cardinal XtAsprintf(Strin *\fInew_string\fP, const char *\fIformat\fP, ...);
.SH ARGUMENTS
.IP \fInum\fP 1i
Specifies tha number of bytes or array elements.
.ds Po ta tha oldschool storage or ta tha block of storage dat is ta be freed
.IP \fIptr\fP 1i
Specifies a pointa \*(Po.
.IP \fIsize\fP 1i
Specifies tha size of a array element (in bytes) or tha number of bytes
desired.
.IP \fIstring\fP 1i
Specifies a previously declared string.
.IP \fItype\fP 1i
Specifies a previously declared data type.
.IP \fInew_string\fP 1i
Specifies a pointa ta write a newly allocated strang to.
.IP \fIformat\fP 1i
Specifies a gangbangin' formattin strang as defined by sprintf(3c)
.SH DESCRIPTION
The
.ZN XtMalloc
functions returns a pointa ta a funky-ass block of storage of at least
the specified size bytes.
If there is insufficient memory ta allocate tha freshly smoked up block,
.ZN XtMalloc
calls
.ZN XtErrorMsg .
.LP
The
.ZN XtCalloc
function allocates space fo' tha specified number of array elements
of tha specified size n' initializes tha space ta zero.
If there is insufficient memory ta allocate tha freshly smoked up block,
.ZN XtCalloc
calls
.ZN XtErrorMsg .
.LP
The
.ZN XtRealloc
function chizzlez tha size of a funky-ass block of storage (possibly movin it).
Then, it copies tha oldschool contents (or as much as will fit) tha fuck into tha freshly smoked up block
and frees tha oldschool block.
If there is insufficient memory ta allocate tha freshly smoked up block,
.ZN XtRealloc
calls
.ZN XtErrorMsg .
If ptr is NULL,
.ZN XtRealloc
allocates tha freshly smoked up storage without copyin tha oldschool contents;
that is, it simply calls
.ZN XtMalloc .
.LP
The
.ZN XtFree
function returns storage n' allows it ta be reused.
If ptr is NULL,
.ZN XtFree
returns immediately.
.LP
.ZN XtNew
returns a pointa ta tha allocated storage.
If there is insufficient memory ta allocate tha freshly smoked up block,
.ZN XtNew
calls
.ZN XtErrorMsg .
.ZN XtNew
is a cold-ass lil convenience macro dat calls
.ZN XtMalloc
with tha followin arguments specified:
.LP
.Ds
.TA .5i
.ta .5i
((type *) XtMalloc((unsigned) sizeof(type))
.De
.LP
.ZN XtNewString
returns a pointa ta tha allocated storage.
If there is insufficient memory ta allocate tha freshly smoked up block,
.ZN XtNewString
calls
.ZN XtErrorMsg .
.ZN XtNewString
is a cold-ass lil convenience macro dat calls
.ZN XtMalloc
with tha followin arguments specified:
.LP
.Ds
.TA .5i
.ta .5i
(strcpy(XtMalloc((unsigned) strlen(str) + 1), str))
.De
.LP
The
.ZN XtAsprintf
function allocates space fo' a strang big-ass enough ta hold tha string
specified by tha sprintf(3c) format pattern when used wit tha remaining
arguments, n' fills it wit tha formatted thangs up in dis biatch.
Da address of tha allocated strang is placed tha fuck into tha pointa passed as ret.
Da length of tha strang (not includin tha terminatin null byte) is returned.
If there is insufficient memory ta allocate tha freshly smoked up block,
.ZN XtAsprintf
calls
.ZN XtErrorMsg .
.SH "SEE ALSO"
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
