.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
.de EX
.sp
.nf
.ft CW
..
.de EE
.ft R
.fi
.sp
..
.TH XLoadFont 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XLoadFont, XQueryFont, XLoadQueryFont, XFreeFont, XGetFontProperty, XUnloadFont, XCharStruct, XFontProp, XChar2b, XFontStruct \- load or unload fonts n' font metric structures
.SH SYNTAX
.HP
Font XLoadFont\^(\^Display *\fIdisplay\fP\^, char *\fIname\fP\^); 
.HP
XFontStruct *XQueryFont\^(\^Display *\fIdisplay\fP\^, XID \fIfont_ID\fP\^); 
.HP
XFontStruct *XLoadQueryFont\^(\^Display *\fIdisplay\fP\^, char
*\fIname\fP\^); 
.HP
int XFreeFont\^(\^Display *\fIdisplay\fP\^, XFontStruct *\fIfont_struct\fP\^);
.HP
Bool XGetFontProperty\^(\^XFontStruct *\fIfont_struct\fP\^, Atom \fIatom\fP\^,
unsigned long *\fIvalue_return\fP\^); 
.HP
int XUnloadFont\^(\^Display *\fIdisplay\fP\^, Font \fIfont\fP\^); 
.SH ARGUMENTS
.IP \fIatom\fP 1i
Specifies tha atom fo' tha property name you want returned.
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.IP \fIfont\fP 1i
Specifies tha font.
.IP \fIfont_ID\fP 1i
Specifies tha font ID or tha 
.ZN GContext
ID.
.IP \fIfont_struct\fP 1i
Specifies tha storage associated wit tha font.
.IP \fIgc\fP 1i
Specifies tha GC.
.IP \fIname\fP 1i
Specifies tha name of tha font,
which be a null-terminated string.
.IP \fIvalue_return\fP 1i
Returns tha value of tha font property.
.SH DESCRIPTION
The
.ZN XLoadFont
function loadz tha specified font n' returns its associated font ID.
If tha font name aint up in tha Host Portable Characta Encoding,
the result is implementation-dependent.
Use of uppercase or lowercase do not matter.
When tha charactas ``?'' n' ``*'' is used up in a gangbangin' font name, a
pattern match is performed n' any matchin font is used.
In tha pattern, 
the ``?'' characta will match any single character, 
and tha ``*'' characta will match any number of characters.
A structured format fo' font names is specified up in tha X Consortium standard 
\fIX Logical Font Description Conventions\fP.
If 
.ZN XLoadFont
was unsuccessful at loadin tha specified font, 
a 
.ZN BadName 
error thangs up in dis biatch.
Fonts is not associated wit a particular screen 
and can be stored as a cold-ass lil component
of any GC.
When tha font is no longer needed, call 
.ZN XUnloadFont .
.LP
.ZN XLoadFont
can generate
.ZN BadAlloc 
and
.ZN BadName 
errors.
.LP
The
.ZN XQueryFont
function returns a pointa ta the
.ZN XFontStruct
structure, which gotz nuff shiznit associated wit tha font.
Yo ass can query a gangbangin' font or tha font stored up in a GC.
Da font ID stored up in tha 
.ZN XFontStruct
structure is ghon be tha 
.ZN GContext 
ID, n' you need ta be careful when rockin dis ID up in other functions
(see
.ZN XGContextFromGC ).
If tha font do not exist,
.ZN XQueryFont
returns NULL.
To free dis data, use
.ZN XFreeFontInfo .
.LP
.ZN XLoadQueryFont
can generate a
.ZN BadAlloc 
error.
.LP
The
.ZN XLoadQueryFont
function serves up da most thugged-out common way fo' accessin a gangbangin' font.
.ZN XLoadQueryFont
both opens (loads) tha specified font n' returns a pointa ta the
appropriate
.ZN XFontStruct
structure.
If tha font name aint up in tha Host Portable Characta Encoding,
the result is implementation-dependent.
If tha font do not exist,
.ZN XLoadQueryFont
returns NULL.
.LP
The
.ZN XFreeFont
function deletes tha association between tha font resource ID n' tha specified 
font n' frees the
.ZN XFontStruct
structure.
Da font itself is ghon be freed when no other resource references dat shit.
Da data n' tha font should not be referenced again.
.LP
.ZN XFreeFont
can generate a
.ZN BadFont 
error.
.LP
Given tha atom fo' dat property,
the
.ZN XGetFontProperty
function returns tha value of tha specified font property. 
.ZN XGetFontProperty
also returns 
.ZN False
if tha property was not defined or 
.ZN True
if dat shiznit was defined.
A set of predefined atoms exists fo' font properties,
which can be found in
.hN X11/Xatom.h .
This set gotz nuff tha standard propertizzles associated with
a font.
Although it aint guaranteed,
it is likely dat tha predefined font propertizzles is ghon be present.
.LP
The
.ZN XUnloadFont
function deletes tha association between tha font resource ID n' tha specified font.
Da font itself is ghon be freed when no other resource references dat shit.
Da font should not be referenced again.
.LP
.ZN XUnloadFont
can generate a
.ZN BadFont 
error.
.SH STRUCTURES
The
.ZN XFontStruct
structure gotz nuff all of tha shiznit fo' tha font
and consistz of tha font-specific shiznit as well as
a pointa ta a array of
.ZN XCharStruct
structures fo' the
charactas contained up in tha font.
The
.ZN XFontStruct ,
.ZN XFontProp ,
and
.ZN XCharStruct
structures contain:
.LP
.IN "XCharStruct" "" "@DEF@"
.EX
typedef struct {
	short lbearing;	/\&* origin ta left edge of rasta */
	short rbearing;	/\&* origin ta right edge of rasta */
	short width;	/\&* advizzle ta next charz origin */
	short ascent;	/\&* baseline ta top edge of rasta */
	short descent;	/\&* baseline ta bottom edge of rasta */
	unsigned short attributes;	/\&* per char flags (not predefined) */
} XCharStruct;
.EE
.LP
.IN "XFontProp" "" "@DEF@"
.EX
typedef struct {
	Atom	name;
	unsigned long card32;
} XFontProp;
.EE
.LP
.IN "XChar2b" "" "@DEF@"
.EX
typedef struct {	/\&* aiiight 16 bit charactas is two bytes */
    unsigned char byte1;
    unsigned char byte2;
} XChar2b;
.EE
.LP
.IN "XFontStruct" "" "@DEF@"
.EX
typedef struct {
	XExtData *ext_data;	/\&* hook fo' extension ta hang data */
	Font fid;	/\&* Font id fo' dis font */
	unsigned direction;	/\&* hint bout tha direction font is painted */
	unsigned min_char_or_byte2;	/\&* first characta */
	unsigned max_char_or_byte2;	/\&* last characta */
	unsigned min_byte1;	/\&* first row dat exists */
	unsigned max_byte1;	/\&* last row dat exists */
	Bool all_chars_exist;	/\&* flag if all charactas have nonzero size */
	unsigned default_char;	/\&* char ta print fo' undefined characta */
	int n_properties;	/\&* how tha fuck nuff propertizzles there be */
	XFontProp *properties;	/\&* pointa ta array of additionizzle propertizzles */
	XCharStruct min_bounds;	/\&* minimum boundz over all existin char */
	XCharStruct max_bounds;	/\&* maximum boundz over all existin char */
	XCharStruct *per_char;	/\&* first_char ta last_char shiznit */
	int ascent;	/\&* logical extent above baseline fo' spacin */
	int descent;	/\&* logical decent below baseline fo' spacin */
} XFontStruct;
.EE
.LP
X supports single byte/character, two bytes/characta matrix,
and 16-bit characta text operations.
Note dat any of these forms can be used wit a gangbangin' font yo, but a
single byte/characta text request can only specify a single byte
(that is, tha straight-up original gangsta row of a 2-byte font).
Yo ass should view 2-byte fonts as a two-dimensionizzle matrix of defined
characters: byte1 specifies tha range of defined rows and
byte2 defines tha range of defined columnz of tha font.
Single byte/characta fonts have one row defined, n' tha byte2 range
specified up in tha structure defines a range of characters.
.LP
Da boundin box of a cold-ass lil characta is defined by tha 
.ZN XCharStruct 
of dat character.
When charactas is absent from a gangbangin' font,
the default_char is used.
When fonts have all charactaz of tha same size,
only tha shiznit up in the
.ZN XFontStruct
min n' max boundz is used.
.LP
Da thugz of tha 
.ZN XFontStruct 
have tha followin semantics:
.IP \(bu 5
Da direction member can be either 
.ZN FontLeftToRight 
or 
.ZN FontRightToLeft . 
It be just a hint as ta whether most 
.ZN XCharStruct 
elements 
have a positizzle 
.Pn ( FontLeftToRight ) 
or a wack 
.Pn ( FontRightToLeft )
characta width 
metric.
Da core protocol defines no support fo' vertical text.
.IP \(bu 5
If tha min_byte1 n' max_byte1 thugz is both zero, min_char_or_byte2
specifies tha linear characta index correspondin ta tha straight-up original gangsta element
of tha per_char array, n' max_char_or_byte2 specifies tha linear character
index of tha last element.
.IP
If either min_byte1 or max_byte1 is nonzero, both
min_char_or_byte2 n' max_char_or_byte2 is less than 256, 
and tha 2-byte characta index joints correspondin ta the
per_char array element N (countin from 0) are:
.IP
.EX
	byte1 = N/D + min_byte1
	byte2 = N\\D + min_char_or_byte2
.EE
where:
.EX
        D = max_char_or_byte2 \- min_char_or_byte2 + 1
        / = integer division
        \e\e = integer modulus
.EE
.IP \(bu 5
If tha per_char pointa is NULL, 
all glyphs between tha straight-up original gangsta n' last characta indexes
inclusive have tha same shiznit,
as given by both min_boundz n' max_bounds.
.IP \(bu 5
If all_chars_exist is 
.ZN True ,
all charactas up in tha per_char array have nonzero boundin boxes.
.IP \(bu 5
Da default_char member specifies tha characta dat is ghon be used when an
undefined or nonexistent characta is printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  
Da default_char be a 16-bit characta (not a 2-byte character).
For a gangbangin' font rockin 2-byte matrix format, 
the default_char has byte1 up in da most thugged-out-significant byte
and byte2 up in tha least dope byte.
If tha default_char itself specifies a undefined or nonexistent character, 
no printin is performed fo' a undefined or nonexistent character.
.IP \(bu 5
Da min_boundz n' max_boundz thugz contain da most thugged-out off tha hook joints of
each individual 
.ZN XCharStruct 
component over all elementz of dis array
(and ignore nonexistent characters).
Da boundin box of tha font (the smallest
rectangle enclosin tha shape obtained by superimposin all of the
charactas all up in tha same origin [x,y]) has its upper-left coordinizzle at:
.Ds
	[x + min_bounds.lbearing, y \- max_bounds.ascent]
.De
.IP
Its width is:
.Ds
	max_bounds.rbearin \- min_bounds.lbearing
.De
.IP
Its height is:
.Ds
	max_bounds.ascent + max_bounds.descent
.De
.IP \(bu 5
Da ascent member is tha logical extent of tha font above tha baseline dat is
used fo' determinin line spacing.
Specific charactas may extend beyond
this.
.IP \(bu 5
Da descent member is tha logical extent of tha font at or below the
baseline dat is used fo' determinin line spacing.
Specific charactas may extend beyond all dis bullshit.
.IP \(bu 5
If tha baseline be at Y-coordinizzle y,
the logical extent of tha font is inclusive between tha Y-coordinizzle 
values (y \- font.ascent) n' (y + font.descent \- 1).
Typically,
the minimum interline spacin between rowz of text is given
by ascent + descent.
.LP
For a cold-ass lil characta origin at [x,y],
the boundin box of a cold-ass lil characta (that is, 
the smallest rectangle dat encloses tha characterz shape)
busted lyrics bout up in termz of 
.ZN XCharStruct 
components be a rectangle wit its upper-left corner at:
.LP
.Ds
[x + lbearing, y \- ascent]
.De
.LP
Its width is:
.LP
.Ds
rbearin \- lbearing
.De
.LP
Its height is:
.LP
.Ds
ascent + descent
.De
.LP
Da origin fo' tha next characta is defined ta be:
.LP
.Ds
[x + width, y]
.De
.LP
Da lbearin member defines tha extent of tha left edge of tha characta ink
from tha origin.
Da rbearin member defines tha extent of tha right edge of tha characta ink
from tha origin.
Da ascent member defines tha extent of tha top edge of tha characta ink
from tha origin.
Da descent member defines tha extent of tha bottom edge of tha characta ink
from tha origin.
Da width member defines tha logical width of tha character.
.SH DIAGNOSTICS
.TP 1i
.ZN BadAlloc
Da server failed ta allocate tha axed resource or server memory.
.TP 1i
.ZN BadFont
A value fo' a Font or GContext argument do not name a thugged-out defined Font.
.TP 1i
.ZN BadName
A font or color of tha specified name do not exist.
.SH "SEE ALSO"
XCreateGC(3),
XListFonts(3),
XSetFontPath(3)
.br
\fI\*(xL\fP
