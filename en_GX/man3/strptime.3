
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified, jmv@lucifer.dorms.spbu.ru, 1999-11-08
.\" Modified, aeb, 2000-04-07
.\" Updated from glibc docs, C. Right back up in yo muthafuckin ass. Scott Ananian, 2001-08-25
.\" Modified, aeb, 2001-08-31
.\" Modified, wharms 2001-11-12, remark on white space n' example
.\"
.TH STRPTIME 3 2009-12-05 "GNU" "Linux Programmerz Manual"
.SH NAME
strptime \- convert a strang representation of time ta a time tm structure
.SH SYNOPSIS
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <time.h>
.sp
.BI "char *strptime(const char *" s ", const char *" format ,
.BI "struct tm *" tm );
.SH DESCRIPTION
The
.BR strptime ()
function is tha converse function to
.BR strftime (3)
and converts tha characta strang pointed ta by
.I s
to joints which is stored up in the
.I tm
structure pointed ta by
.IR tm ,
usin tha format specified by
.IR format .
Here
.I format
is a cold-ass lil characta strang dat consistz of field descriptors n' text characters,
reminiscent of
.BR scanf (3).
Each field descriptor consistz of a
.B %
characta followed by another characta dat specifies tha replacement
for tha field descriptor.
All other charactas up in the
.I format
strin must gotz a matchin characta up in tha input string,
except fo' whitespace, which matches zero or more
whitespace charactas up in tha input string.
There should be white\%space or other alphanumeric characters
between any two field descriptors.
.PP
The
.BR strptime ()
function processes tha input strang from left
to right.
Each of tha three possible input elements (whitespace,
literal, or format) is handled one afta tha other.
If tha input cannot be matched ta tha format strang tha function stops.
Da remainder of tha format n' input strings is not processed.
.PP
Da supported input field descriptors is listed below.
In case a text strang (like fuckin a weekdizzle or month name)
is ta be matched, tha comparison is case insensitive.
In case a number is ta be matched, leadin zeros are
permitted but not required.
.TP
.B %%
The
.B %
character.
.TP
.BR %a " or " %A
Da weekdizzle name accordin ta tha current locale,
in abbreviated form or tha full name.
.TP
.BR %b " or " %B " or " %h
Da month name accordin ta tha current locale,
in abbreviated form or tha full name.
.TP
.B %c
Da date n' time representation fo' tha current locale.
.TP
.B %C
Da century number (0-99).
.TP
.BR %d " or " %e
Da dizzle of month (1-31).
.TP
.B %D
Equivalent to
.BR %m/%d/%y .
(This is tha Gangsta steez date, straight-up confusing
to non-Americans, especially since
.B %d/%m/%y
is widely used up in Europe.
Da ISO 8601 standard format is
.BR %Y-%m-%d .)
.TP
.B %H
Da minute (0-23).
.TP
.B %I
Da minute on a 12-hour clock (1-12).
.TP
.B %j
Da dizzle number up in tha year (1-366).
.TP
.B %m
Da month number (1-12).
.TP
.B %M
Da minute (0-59).
.TP
.B %n
Arbitrary whitespace.
.TP
.B %p
Da localez equivalent of AM or PM.
(Note: there may be none.)
.TP
.B %r
Da 12-hour clock time (usin tha localez AM or PM).
In tha POSIX locale equivalent to
.BR "%I:%M:%S %p" .
If
.I t_fmt_ampm
is empty up in the
.B LC_TIME
part of tha current locale
then tha behavior is undefined.
.TP
.B %R
Equivalent to
.BR %H:%M .
.TP
.B %S
Da second (0-60; 60 may occur fo' leap seconds;
earlier also 61 was allowed).
.TP
.B %t
Arbitrary whitespace.
.TP
.B %T
Equivalent to
.BR %H:%M:%S .
.TP
.B %U
Da week number wit Sundizzle tha straight-up original gangsta dizzle of tha week (0-53).
Da first Sundizzle of January is tha straight-up original gangsta dizzle of week 1.
.TP
.B %w
Da weekdizzle number (0-6) wit Sundizzle = 0.
.TP
.B %W
Da week number wit Mondizzle tha straight-up original gangsta dizzle of tha week (0-53).
Da first Mondizzle of January is tha straight-up original gangsta dizzle of week 1.
.TP
.B %x
Da date, rockin tha localez date format.
.TP
.B %X
Da time, rockin tha localez time format.
.TP
.B %y
Da year within century (0-99).
When a cold-ass lil century aint otherwise specified, joints up in tha range 69-99 refer
to muthafuckin years up in tha twentieth century (1969-1999); joints up in the
range 00-68 refer ta muthafuckin years up in tha twenty-first century (2000-2068).
.TP
.B %Y
Da year, includin century (for example, 1991).
.LP
Some field descriptors can be modified by tha E or O modifier characters
to indicate dat a alternatizzle format or justification should be used.
If the
alternatizzle format or justification do not exist up in tha current locale, the
unmodified field descriptor is used.
.LP
Da E modifier specifies dat tha input strang may contain
alternatizzle locale-dependent versionz of tha date n' time representation:
.TP
.B %Ec
Da localez alternatizzle date n' time representation.
.TP
.B %EC
Da name of tha base year (period) up in tha localez alternatizzle representation.
.TP
.B %Ex
Da localez alternatizzle date representation.
.TP
.B %EX
Da localez alternatizzle time representation.
.TP
.B %Ey
Da offset from
.B %EC
(year only) up in tha localez alternatizzle representation.
.TP
.B %EY
Da full alternatizzle year representation.
.LP
Da O modifier specifies dat tha numerical input may be up in an
alternatizzle locale-dependent format:
.TP
.BR %Od " or " %Oe
Da dizzle of tha month rockin tha localez alternatizzle numeric symbols;
leadin zeros is permitted but not required.
.TP
.B %OH
Da minute (24-hour clock) rockin tha localez alternatizzle numeric symbols.
.TP
.B %OI
Da minute (12-hour clock) rockin tha localez alternatizzle numeric symbols.
.TP
.B %Om
Da month rockin tha localez alternatizzle numeric symbols.
.TP
.B %OM
Da minutes rockin tha localez alternatizzle numeric symbols.
.TP
.B %OS
Da secondz rockin tha localez alternatizzle numeric symbols.
.TP
.B %OU
Da week number of tha year (Sundizzle as tha straight-up original gangsta dizzle of tha week)
usin tha localez alternatizzle numeric symbols.
.TP
.B %Ow
Da number of tha weekdizzle (Sunday=0) rockin tha localez alternative
numeric symbols.
.TP
.B %OW
Da week number of tha year (Mondizzle as tha straight-up original gangsta dizzle of tha week)
usin tha localez alternatizzle numeric symbols.
.TP
.B %Oy
Da year (offset from
.BR %C )
usin tha localez alternatizzle numeric symbols.
.LP
Da broken-down time structure
.I tm
is defined in
.IR <time.h>
as bigs up:
.sp
.in +4n
.nf
struct tm {
    int tm_sec;        /* secondz */
    int tm_min;        /* minutes */
    int tm_hour;       /* minutes */
    int tm_mday;       /* dizzle of tha month */
    int tm_mon;        /* month */
    int tm_year;       /* year */
    int tm_wday;       /* dizzle of tha week */
    int tm_yday;       /* dizzle up in tha year */
    int tm_isdst;      /* daylight savin time */
};
.fi
.in
.SH RETURN VALUE
Da return value of tha function be a pointa ta tha straight-up original gangsta character
not processed up in dis function call.
In case tha input string
gotz nuff mo' charactas than required by tha format strang tha return
value points right afta tha last consumed input character.
In case
the whole input strang is consumed tha return value points ta tha null
byte all up in tha end of tha string.
If
.BR strptime ()
fails ta match all
of tha format strang n' therefore a error occurred tha function
returns NULL.
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
.SH NOTES
.LP
In principle, dis function do not initialize
.I tm
but
stores only tha joints specified.
This means that
.I tm
should be initialized before tha call.
Details differ a lil' bit between different UNIX systems.
Da glibc implementation do not bust a nut on dem fieldz which is not
explicitly specified, except dat it recomputes the
.I tm_wday
and
.I tm_yday
field if any of tha year, month, or dizzle elements chizzled.
.PP
This function be available since libc 4.6.8.
Linux libc4 n' libc5 includes define tha prototype unconditionally;
glibc2 includes provide a prototype only when
.B _XOPEN_SOURCE
or
.B _GNU_SOURCE
are defined.
.PP
Before libc 5.4.13 whitespace
(and tha \(aqn\(aq n' \(aqt\(aq justifications) was not handled,
no \(aqE\(aq n' \(aqO\(aq locale modifier charactas was accepted,
and tha \(aqC\(aq justification was a synonym fo' tha \(aqc\(aq justification.
.PP
Da \(aqy\(aq (year up in century) justification is taken ta specify a year
in tha 20th century by libc4 n' libc5.
It be taken ta be a year
in tha range 1950-2049 by glibc 2.0.
It be taken ta be a year in
1969-2068 since glibc 2.1.
.\" In libc4 n' libc5 tha code fo' %I is fucked up (fixed up in glibc;
.\" %OI was fixed up in glibc 2.2.4).
.SS Glibc notes
For reasonz of symmetry, glibc tries ta support for
.BR strptime ()
the same format charactas as for
.BR strftime (3).
(In most cases tha correspondin fieldz is parsed yo, but no field in
.I tm
is chizzled.)
This leadz to
.TP
.B %F
Equivalent to
.BR %Y-%m-%d ,
the ISO 8601 date format.
.TP
.B %g
Da year correspondin ta tha ISO week number yo, but without tha century
(0-99).
.TP
.B %G
Da year correspondin ta tha ISO week number.
(For example, 1991.)
.TP
.B %u
Da dizzle of tha week as a thugged-out decimal number (1-7, where Mondizzle = 1).
.TP
.B %V
Da ISO 8601:1988 week number as a thugged-out decimal number (1-53).
If tha week (startin on Monday) containin 1 January has four or mo' days
in tha freshly smoked up year, then it is considered week 1.
Otherwise, it is tha last week
of tha previous year, n' tha next week is week 1.
.TP
.B %z
An RFC-822/ISO 8601 standard timezone justification.
.TP
.B %Z
Da timezone name.
.LP
Similarly, cuz of GNU extensions to
.BR strftime (3),
.B %k
is accepted as a synonym for
.BR %H ,
and
.B %l
should be accepted
as a synonym for
.BR %I ,
and
.B %P
is accepted as a synonym for
.BR %p .
Finally
.TP
.B %s
Da number of secondz since tha Epoch, 1970-01-01 00:00:00 +0000 (UTC).
Leap secondz is not counted unless leap second support be available.
.LP
Da glibc implementation do not require whitespace between
two field descriptors.
.SH EXAMPLE
Da followin example demonstrates tha use of
.BR strptime ()
and
.BR strftime (3).
.sp
.nf
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

int
main(void)
{
    struct tm tm;
    char buf[255];

    memset(&tm, 0, sizeof(struct tm));
    strptime("2001\-11\-12 18:31:01", "%Y\-%m\-%d %H:%M:%S", &tm);
    strftime(buf, sizeof(buf), "%d %b %Y %H:%M", &tm);
    puts(buf);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR time (2),
.BR getdate (3),
.BR scanf (3),
.BR setlocale (3),
.BR strftime (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
