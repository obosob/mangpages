'\" t
.\"     Title: glColor
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLCOLOR" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glColor \- set tha current color
.SH "C SPECIFICATION"
.HP \w'void\ glColor3b('u
.BI "void glColor3b(GLbyte\ " "red" ", GLbyte\ " "green" ", GLbyte\ " "blue" ");"
.HP \w'void\ glColor3s('u
.BI "void glColor3s(GLshort\ " "red" ", GLshort\ " "green" ", GLshort\ " "blue" ");"
.HP \w'void\ glColor3i('u
.BI "void glColor3i(GLint\ " "red" ", GLint\ " "green" ", GLint\ " "blue" ");"
.HP \w'void\ glColor3f('u
.BI "void glColor3f(GLfloat\ " "red" ", GLfloat\ " "green" ", GLfloat\ " "blue" ");"
.HP \w'void\ glColor3d('u
.BI "void glColor3d(GLdouble\ " "red" ", GLdouble\ " "green" ", GLdouble\ " "blue" ");"
.HP \w'void\ glColor3ub('u
.BI "void glColor3ub(GLubyte\ " "red" ", GLubyte\ " "green" ", GLubyte\ " "blue" ");"
.HP \w'void\ glColor3us('u
.BI "void glColor3us(GLushort\ " "red" ", GLushort\ " "green" ", GLushort\ " "blue" ");"
.HP \w'void\ glColor3ui('u
.BI "void glColor3ui(GLuint\ " "red" ", GLuint\ " "green" ", GLuint\ " "blue" ");"
.HP \w'void\ glColor4b('u
.BI "void glColor4b(GLbyte\ " "red" ", GLbyte\ " "green" ", GLbyte\ " "blue" ", GLbyte\ " "alpha" ");"
.HP \w'void\ glColor4s('u
.BI "void glColor4s(GLshort\ " "red" ", GLshort\ " "green" ", GLshort\ " "blue" ", GLshort\ " "alpha" ");"
.HP \w'void\ glColor4i('u
.BI "void glColor4i(GLint\ " "red" ", GLint\ " "green" ", GLint\ " "blue" ", GLint\ " "alpha" ");"
.HP \w'void\ glColor4f('u
.BI "void glColor4f(GLfloat\ " "red" ", GLfloat\ " "green" ", GLfloat\ " "blue" ", GLfloat\ " "alpha" ");"
.HP \w'void\ glColor4d('u
.BI "void glColor4d(GLdouble\ " "red" ", GLdouble\ " "green" ", GLdouble\ " "blue" ", GLdouble\ " "alpha" ");"
.HP \w'void\ glColor4ub('u
.BI "void glColor4ub(GLubyte\ " "red" ", GLubyte\ " "green" ", GLubyte\ " "blue" ", GLubyte\ " "alpha" ");"
.HP \w'void\ glColor4us('u
.BI "void glColor4us(GLushort\ " "red" ", GLushort\ " "green" ", GLushort\ " "blue" ", GLushort\ " "alpha" ");"
.HP \w'void\ glColor4ui('u
.BI "void glColor4ui(GLuint\ " "red" ", GLuint\ " "green" ", GLuint\ " "blue" ", GLuint\ " "alpha" ");"
.SH "PARAMETERS"
.PP
\fIred\fR, \fIgreen\fR, \fIblue\fR
.RS 4
Specify freshly smoked up red, green, n' blue joints fo' tha current color\&.
.RE
.PP
\fIalpha\fR
.RS 4
Specifies a freshly smoked up alpha value fo' tha current color\&. Included only up in tha four\-argument
\fBglColor4\fR
commands\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glColor3bv('u
.BI "void glColor3bv(const\ GLbyte\ *\ " "v" ");"
.HP \w'void\ glColor3sv('u
.BI "void glColor3sv(const\ GLshort\ *\ " "v" ");"
.HP \w'void\ glColor3iv('u
.BI "void glColor3iv(const\ GLint\ *\ " "v" ");"
.HP \w'void\ glColor3fv('u
.BI "void glColor3fv(const\ GLfloat\ *\ " "v" ");"
.HP \w'void\ glColor3dv('u
.BI "void glColor3dv(const\ GLdouble\ *\ " "v" ");"
.HP \w'void\ glColor3ubv('u
.BI "void glColor3ubv(const\ GLubyte\ *\ " "v" ");"
.HP \w'void\ glColor3usv('u
.BI "void glColor3usv(const\ GLushort\ *\ " "v" ");"
.HP \w'void\ glColor3uiv('u
.BI "void glColor3uiv(const\ GLuint\ *\ " "v" ");"
.HP \w'void\ glColor4bv('u
.BI "void glColor4bv(const\ GLbyte\ *\ " "v" ");"
.HP \w'void\ glColor4sv('u
.BI "void glColor4sv(const\ GLshort\ *\ " "v" ");"
.HP \w'void\ glColor4iv('u
.BI "void glColor4iv(const\ GLint\ *\ " "v" ");"
.HP \w'void\ glColor4fv('u
.BI "void glColor4fv(const\ GLfloat\ *\ " "v" ");"
.HP \w'void\ glColor4dv('u
.BI "void glColor4dv(const\ GLdouble\ *\ " "v" ");"
.HP \w'void\ glColor4ubv('u
.BI "void glColor4ubv(const\ GLubyte\ *\ " "v" ");"
.HP \w'void\ glColor4usv('u
.BI "void glColor4usv(const\ GLushort\ *\ " "v" ");"
.HP \w'void\ glColor4uiv('u
.BI "void glColor4uiv(const\ GLuint\ *\ " "v" ");"
.SH "PARAMETERS"
.PP
\fIv\fR
.RS 4
Specifies a pointa ta a array dat gotz nuff red, green, blue, n' (sometimes) alpha joints\&.
.RE
.SH "DESCRIPTION"
.PP
Da GL stores both a cold-ass lil current single\-valued color index n' a cold-ass lil current four\-valued RGBA color\&.
\fBglColor\fR
sets a freshly smoked up four\-valued RGBA color\&.
\fBglColor\fR
has two major variants:
\fBglColor3\fR
and
\fBglColor4\fR\&.
\fBglColor3\fR
variants specify freshly smoked up red, green, n' blue joints explicitly n' set tha current alpha value ta 1\&.0 (full intensity) implicitly\&.
\fBglColor4\fR
variants specify all four color components explicitly\&.
.PP
\fBglColor3b\fR,
\fBglColor4b\fR,
\fBglColor3s\fR,
\fBglColor4s\fR,
\fBglColor3i\fR, and
\fBglColor4i\fR
take three or four signed byte, short, or long integers as arguments\&. When
\fBv\fR
is appended ta tha name, tha color commandz can take a pointa ta a array of such joints\&.
.PP
Current color joints is stored up in floating\-point format, wit unspecified mantissa n' exponent sizes\&. Unsigned integer color components, when specified, is linearly mapped ta floating\-point joints such dat tha phattest representable value maps ta 1\&.0 (full intensity), n' 0 maps ta 0\&.0 (zero intensity)\&. Right back up in yo muthafuckin ass. Signed integer color components, when specified, is linearly mapped ta floating\-point joints such dat da most thugged-out positizzle representable value maps ta 1\&.0, n' da most thugged-out wack representable value maps to
\-1\&.0\&. (Note dat dis mappin do not convert 0 precisely ta 0\&.0\&.) Floating\-point joints is mapped directly\&.
.PP
Neither floating\-point nor signed integer joints is clamped ta tha range
0 1
before tha current color is updated\&. But fuck dat shiznit yo, tha word on tha street is dat color components is clamped ta dis range before they is interpolated or freestyled tha fuck into a cold-ass lil color buffer\&.
.SH "NOTES"
.PP
Da initial value fo' tha current color is (1, 1, 1, 1)\&.
.PP
Da current color can be updated at any time\&. In particular,
\fBglColor\fR
can be called between a cold-ass lil call to
\fBglBegin\fR()
and tha correspondin call to
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_RGBA_MODE\fR
.SH "SEE ALSO"
.PP
\fBglColorPointer\fR,
\fBglIndex\fR(),
\fBglSecondaryColor\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
