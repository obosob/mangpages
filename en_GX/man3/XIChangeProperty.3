'\" t
.\"     Title: xichangeproperty
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XICHANGEPROPERTY" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XIChangeProperty, XIGetProperty, XIDeleteProperty \- chizzle, retrieve or delete a thugged-out device\*(Aqs property\&.
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput2\&.h>
.fi
.sp
.nf
void XIChangeProperty( Display* dpy,
                       int deviceid,
                       Atom property,
                       Atom type,
                       int format,
                       int mode,
                       unsigned char *data,
                       int num_items)
.fi
.sp
.nf
void XIDeleteProperty( Display *dpy,
                       int deviceid,
                       Atom property)
.fi
.sp
.nf
Status XIGetProperty( Display *dpy,
                      int deviceid,
                      Atom property,
                      long offset,
                      long length,
                      Bool delete_property,
                      Atom type,
                      Atom *type_return,
                      int *format_return,
                      unsigned long *num_items_return,
                      unsigned long *bytes_after_return,
                      unsigned char **data)
.fi
.sp
.nf
bytes_after_return
       Returns tha number of bytes remainin ta be read up in tha prop\-
       erty if a partial read was performed\&.
.fi
.sp
.nf
data
       Specifies tha property data\&.
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
delete_property
       Specifies a Boolean value dat determines whether tha property
       is ta be deleted\&.
.fi
.sp
.nf
deviceid
       Da thang ta list tha propertizzles for\&.
.fi
.sp
.nf
format
       Specifies whether tha data should be viewed as a list of
       8\-bit, 16\-bit, or 32\-bit quantities\&.  Possible joints is 8,
       16, n' 32\&.  This shiznit allows tha X server ta erectly
       big-ass up byte\-swap operations as necessary\&. If the
       format is 16\-bit or 32\-bit, you must explicitly cast your
       data pointa ta a (unsigned char *) up in tha call to
       XIChangeProperty\&.
.fi
.sp
.nf
format_return
       Returns tha actual format of tha property\&.
.fi
.sp
.nf
length
       Specifies tha length up in 32\-bit multiplez of tha data ta be
       retrieved\&.
.fi
.sp
.nf
offset
       Specifies tha offset up in tha specified property (in 32\-bit
       quantities) where tha data is ta be retrieved\&.
.fi
.sp
.nf
mode
       One of XIPropModeAppend, XIPropModePrepend or XIPropModeReplace\&.
.fi
.sp
.nf
num_items
       Number of shit up in data up in tha format specified\&.
.fi
.sp
.nf
nitems_return
       Returns tha actual number of 8\-bit, 16\-bit, or 32\-bit items
       stored up in data\&.
.fi
.sp
.nf
property
       Specifies tha property name\&.
.fi
.sp
.nf
type
       Specifies tha type of tha property\&.  Da X server do not
       interpret tha type but simply passes it back ta a application
       dat lata calls XIGetProperty\&.
.fi
.sp
.nf
type_return
       Returns tha atom identifier dat defines tha actual type of
       tha property\&.
.fi
.SH "DESCRIPTION"
.sp
Da XIGetProperty function returns tha actual type of tha property; tha actual format of tha property; tha number of 8\-bit, 16\-bit, or 32\-bit shit transferred; tha number of bytes remainin ta be read up in tha property; n' a pointa ta tha data straight-up returned\&. XIGetProperty sets tha return arguments as bigs up:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If tha specified property do not exist fo' tha specified device, XIGetProperty returns None ta actual_type_return n' tha value zero ta actual_format_return n' bytes_after_return\&. Da nitems_return argument is empty\&. In dis case, tha delete argument is ignored\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If tha specified property exists but its type do not match tha specified type, XIGetProperty returns tha actual property type ta actual_type_return, tha actual property format (never zero) ta actual_format_return, n' tha property length up in bytes (even if tha actual_format_return is 16 or 32) ta bytes_after_return\&. Well shiiiit, it also ignores tha delete argument\&. Da nitems_return argument is empty\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If tha specified property exists n' either you assign XIAnyPropertyType ta tha req_type argument or tha specified type matches tha actual property type, XIGetProperty returns tha actual property type ta actual_type_return n' tha actual property format (never zero) ta actual_format_return\&. Well shiiiit, it also returns a value ta bytes_after_return n' nitems_return, by definin tha followin joints:
.sp
.if n \{\
.RS 4
.\}
.nf
N = length of tha stored property up in bytes
I = 4 * offset
T = N \- I
L = MINIMUM(T, 4 * length)
A = N \- (I + L)
.fi
.if n \{\
.RE
.\}
.RE
.sp
Da returned value starts at byte index I up in tha property (indexin from zero), n' its length up in bytes is L\&. If tha value fo' long_offset causes L ta be negative, a BadValue error thangs up in dis biatch\&. Da value of bytes_after_return is A, givin tha number of trailin unread bytes up in tha stored property\&.
.sp
If tha returned format is 8, tha returned data is represented as a cold-ass lil char array\&. If tha returned format is 16, tha returned data is represented as a uint16_t array n' should be cast ta dat type ta obtain tha ele\- ments\&. If tha returned format is 32, tha returned data is represented as a uint32_t array n' should be cast ta dat type ta obtain tha elements\&.
.sp
XIGetProperty always allocates one extra byte up in prop_return (even if tha property is zero length) n' sets it ta zero so dat simple propertizzles consistin of charactas do not gotta be copied tha fuck into yet another strang before use\&.
.sp
If delete is True n' bytes_after_return is zero, XIGetProperty deletes tha property from tha window n' generates a XIPropertyNotify event on tha window\&.
.sp
Da function returns Success if it executes successfully\&. To free tha resultin data, use XFree\&.
.sp
XIGetProperty can generate BadAtom, BadValue, n' BadWindow errors\&.
.sp
Da XIChangeProperty function altas tha property fo' tha specified thang n' causes tha X server ta generate a XIPropertyNotify event fo' dat device\&. XIChangeProperty performs tha following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If mode is XIPropModeReplace, XIChangeProperty discardz tha previous property value n' stores tha freshly smoked up data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If mode is XIPropModePrepend or XIPropModeAppend, XIChangeProperty bangs tha specified data before tha beginnin of tha existin data or onto tha end of tha existin data, respectively\&. Da type n' format must match tha existin property value, or a BadMatch error thangs up in dis biatch\&. If tha property is undefined, it is treated as defined wit tha erect type n' format wit zero\-length data\&.
.RE
.sp
If tha specified format is 8, tha property data must be a cold-ass lil char array\&. If tha specified format is 16, tha property data must be a uint16_t array\&. If tha specified format is 32, tha property data must be a uint32_t array\&.
.sp
Da gametime of a property aint tied ta tha storin client\&. Propertizzles remain until explicitly deleted, until tha thang is removed, or until tha server resets\&. Da maximum size of a property is server dependent n' can vary dynamically dependin on tha amount of memory tha server has available\&. (If there is insufficient space, a BadAlloc error thangs up in dis biatch\&.)
.sp
XIChangeProperty can generate BadAlloc, BadAtom, BadMatch, BadValue, n' BadDevice errors\&.
.sp
Da XIDeleteProperty function deletes tha specified property only if tha property was defined on tha specified thang n' causes tha X server ta generate a XIPropertyNotify event fo' tha thang unless tha property do not exist\&.
.sp
XIDeleteProperty can generate BadAtom n' BadDevice errors\&.
.SH "DIAGNOSTICS"
.sp
BadAlloc Da server failed ta allocate tha axed resource or server memory\&.
.sp
BadAtom A value fo' a Atom argument do not name a thugged-out defined Atom\&.
.sp
BadValue Some numeric value falls outside tha range of joints accepted by tha request\&. Unless a specific range is specified fo' a argument, tha full range defined by tha argument\(cqs type be accepted\& fo' realz. Any argument defined as a set of alternatives can generate dis error\&.
.sp
BadDevice An invalid thang was specified\&. Da thang do not exist\&.
.sp
BadAtom An invalid property was specified\&. Da property do not exist\&.
.SH "BUGS"
.sp
.if n \{\
.RS 4
.\}
.nf
Da protocol headaz fo' XI 2\&.0 did not provide
XIAnyPropertyType, XIPropModeReplace, XIPropModePrepend or
XIPropModeAppend\&. Use AnyPropertyType, PropModeReplace,
PropModePrepend n' PropModeAppend instead, respectively\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
XIListProperties(3)
