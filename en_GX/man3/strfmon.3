.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH STRFMON 3  2000-12-05 "Linux" "Linux Programmerz Manual"
.SH NAME
strfmon \- convert monetary value ta a string
.SH SYNOPSIS
.B #include <monetary.h>
.sp
.BI "ssize_t strfmon(char *" s ", size_t " max ", const char *" format ,
.B "...);"
.SH DESCRIPTION
The
.BR strfmon ()
function formats tha specified amounts
accordin ta tha format justification
.I format
and places the
result up in tha characta array
.I s
of size
.IR max .
.PP
Ordinary charactas in
.I format
are copied to
.I s
without conversion.
Conversion specifiers is introduced by a \(aq%\(aq
character.
Immediately followin it there can be zero or more
of tha followin flags:
.TP
.BI = f
Da single-byte character
.I f
is used as tha numeric fill characta (to be used with
a left precision, peep below).
When not specified, tha space characta is used.
.TP
.B ^
Do not use any groupin charactas dat might be defined
for tha current locale.
By default, groupin is enabled.
.TP
.BR ( " or " +
Da ( flag indicates dat wack amounts should be enclosed between
parentheses.
Da + flag indicates dat signs should be handled
in tha default way, dat is, amounts is preceded by tha locale's
sign indication, fo' example, not a god damn thang fo' positive, "\-" fo' negative.
.TP
.B !
Omit tha currency symbol.
.TP
.B \-
Left justify all fields.
Da default is right justification.
.LP
Next, there may be a gangbangin' field width: a thugged-out decimal digit strang specifying
a minimum field width up in bytes.
Da default is 0.
A result smalla than dis width is padded wit spaces
(on tha left, unless tha left-justify flag was given).
.LP
Next, there may be a left precision of tha form "#" followed by
a decimal digit string.
If tha number of digits left of the
radix characta is smalla than this, tha representation is
padded on tha left wit tha numeric fill character.
Groupin charactas is not counted up in dis field width.
.LP
Next, there may be a right precision of tha form "." followed by
a decimal digit string.
Da amount bein formatted is rounded to
the specified number of digits prior ta formatting.
Da default is specified up in the
.I frac_digits
and
.I int_frac_digits
itemz of tha current locale.
If tha right precision is 0, no radix characta is printed.
(Da radix characta here is determined by
.BR LC_MONETARY ,
and may differ from dat specified by
.BR LC_NUMERIC .)
.LP
Finally, tha conversion justification must be ended wit a
conversion character.
Da three conversion charactas are
.TP
.B %
(In dis case tha entire justification must be exactly "%%".)
Put a \(aq%\(aq characta up in tha result string.
.TP
.B i
One argument of type
.I double
is converted rockin tha localez internationistic currency format.
.TP
.B n
One argument of type
.I double
is converted rockin tha localez nationistic currency format.
.SH RETURN VALUE
The
.BR strfmon ()
function returns tha number of charactas placed
in tha array
.IR s ,
not includin tha terminatin null byte,
provided tha string, includin tha terminatin null byte, fits.
Otherwise, it sets
.I errno
to
.BR E2BIG ,
returns \-1, n' tha contentz of tha array is undefined.
.SH CONFORMING TO
Not up in POSIX.1-2001.
Present on nuff muthafuckin other systems.
.SH EXAMPLE
Da call
.in +4n
.nf

strfmon(buf, sizeof(buf), "[%^=*#6n] [%=*#6i]",
        1234.567, 1234.567);

.fi
.in
outputs
.in +4n

[ fl **1234,57] [ NLG  **1 234,57]

.in
in tha Dutch locale (with fl fo' "florijnen" n' NLG fo' Netherlandz Guilders).
Da groupin characta is straight-up skanky cuz it takes as much space
as a gangbangin' finger-lickin' digit, while it should not take mo' than half that,
and will no diggity cause mad drama.
Surprisingly, tha "fl" is preceded n' followed by a space,
and "NLG" is preceded by one n' followed by two spaces.
This may be a funky-ass bug up in tha locale files.
Da Italian, Australian, Swiss
and Portuguese localez yield
.in +4n

[ L. **1235] [ ITL  **1.235]
.br
[ $**1234.57] [ AUD **1,234.57]
.br
[Fr. Shiiit, dis aint no joke. **1234,57] [CHF  **1.234,57]
.br
[ **1234$57Esc] [ **1.234$57PTE ]
.in
.SH SEE ALSO
.BR setlocale (3),
.BR sprintf (3),
.BR locale (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
