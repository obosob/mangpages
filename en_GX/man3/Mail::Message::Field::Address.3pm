.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Field::Address 3"
.TH Mail::Message::Field::Address 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Field::Address \- One e\-mail address
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Field::Address
\&   be a Mail::Identity
\&   be a User::Identity::Item
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& mah $addr = Mail::Message::Field::Address\->new(...);
\&
\& mah $ui   = User::Identity\->new(...);
\& mah $addr = Mail::Message::Field::Address\->coerce($ui);
\&
\& mah $mi   = Mail::Identity\->new(...);
\& mah $addr = Mail::Message::Field::Address\->coerce($mi);
\&
\& print $addr\->address;
\& print $addr\->fullName;   # possibly unicode!
\& print $addr\->domain;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Many header fieldz can contain e\-mail addresses.  Each e\-mail address
can be represented by a object of dis class.  These objects will
handle interpretation n' characta set encodin n' decodin fo' yo thugged-out ass.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.IP "overload: \fBboolean\fR()" 4
.IX Item "overload: boolean()"
Da object used as boolean will always return \f(CW\*(C`true\*(C'\fR
.IP "overload: \fBstrin comparison\fR()" 4
.IX Item "overload: strang comparison()"
Two address objects is tha same when they email addresses is the
same.
.IP "overload: \fBstringification\fR()" 4
.IX Item "overload: stringification()"
When tha object is used up in strang context, it will return tha encoded
representation of tha e\-mail address, just like \fIstring()\fR do.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBcoerce\fR(STRING|OBJECT, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR(STRING|OBJECT, \s-1OPTIONS\s0)" 4
.IX Item "$obj->coerce(STRING|OBJECT, OPTIONS)"
Try ta coerce tha \s-1OBJECT\s0 tha fuck into a \f(CW\*(C`Mail::Message::Field::Address\*(C'\fR.
In case of a \s-1STRING,\s0 it is interpreted as a email address.
.Sp
Da \s-1OPTIONS\s0 is passed ta tha object creation, n' overrule tha joints
found up in tha \s-1OBJECT. \s0 Da result may be \f(CW\*(C`undef\*(C'\fR or a newly pimped
object.  If tha \s-1OBJECT\s0 be already of tha erect type, it is returned
unmodified.
.Sp
Da \s-1OBJECT\s0 may currently be a Mail::Address, a Mail::Identity, or
a User::Identity.  In case of tha latter, one of tha userz addresses
is chosen at random.
.IP "Mail::Message::Field::Address\->\fBnew\fR([\s-1NAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "Mail::Message::Field::Address->new([NAME], OPTIONS)"
See \*(L"Constructors\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBparse\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBparse\fR(\s-1STRING\s0)" 4
.IX Item "$obj->parse(STRING)"
Parse tha strang fo' a address.  Yo ass never know whether one or more
addresses is specified on a line (often applications is wrong), therefore,
the \s-1STRING\s0 is first parsed fo' as nuff addresses as possible n' then the
one is taken at random.
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBaddress\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaddress\fR()" 4
.IX Item "$obj->address()"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBcharset\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcharset\fR()" 4
.IX Item "$obj->charset()"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBcomment\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcomment\fR([\s-1STRING\s0])" 4
.IX Item "$obj->comment([STRING])"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBdescription\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR()" 4
.IX Item "$obj->description()"
See \*(L"Attributes\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBdomain\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdomain\fR()" 4
.IX Item "$obj->domain()"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBlanguage\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlanguage\fR()" 4
.IX Item "$obj->language()"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBlocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocation\fR()" 4
.IX Item "$obj->location()"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBname\fR([\s-1NEWNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR([\s-1NEWNAME\s0])" 4
.IX Item "$obj->name([NEWNAME])"
See \*(L"Attributes\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBphrase\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBphrase\fR()" 4
.IX Item "$obj->phrase()"
See \*(L"Attributes\*(R" up in Mail::Identity
.ie n .IP "$obj\->\fBusername\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBusername\fR()" 4
.IX Item "$obj->username()"
See \*(L"Attributes\*(R" up in Mail::Identity
.SS "Collections"
.IX Subsection "Collections"
.ie n .IP "$obj\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)" 4
.IX Item "$obj->add(COLLECTION, ROLE)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.IX Item "$obj->addCollection(OBJECT | ([TYPE], OPTIONS))"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBcollection\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcollection\fR(\s-1NAME\s0)" 4
.IX Item "$obj->collection(NAME)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBfind\fR(\s-1COLLECTION, ROLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(\s-1COLLECTION, ROLE\s0)" 4
.IX Item "$obj->find(COLLECTION, ROLE)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR([\s-1PARENT\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR([\s-1PARENT\s0])" 4
.IX Item "$obj->parent([PARENT])"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.IX Item "$obj->removeCollection(OBJECT|NAME)"
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
.PD 0
.IP "Mail::Message::Field::Address\->\fBtype\fR()" 4
.IX Item "Mail::Message::Field::Address->type()"
.PD
See \*(L"Collections\*(R" up in User::Identity::Item
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
See \*(L"Collections\*(R" up in User::Identity::Item
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBencoding\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBencoding\fR()" 4
.IX Item "$obj->encoding()"
Character-set encoding, like 'q' n' 'b', ta be used when non-ascii
charactas is ta be transmitted.
.SS "Access ta tha content"
.IX Subsection "Access ta tha content"
.ie n .IP "$obj\->\fBstring\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR()" 4
.IX Item "$obj->string()"
Returns a \s-1RFC\s0 compliant e\-mail address, which gonna git character
set encodin if needed. Y'all KNOW dat shit, muthafucka!  Da objects is also overloaded ta call
this method up in strang context.
.Sp
example:
.Sp
.Vb 2
\& print $address\->string;
\& print $address;          # via overloading
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object aint a cold-ass lil collection." 4
.el .IP "Error: \f(CW$object\fR aint a cold-ass lil collection." 4
.IX Item "Error: $object aint a cold-ass lil collection."
Da first argument be a object yo, but not of a cold-ass lil class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot coerce a $type tha fuck into a Mail::Message::Field::Address" 4
.el .IP "Error: Cannot coerce a \f(CW$type\fR tha fuck into a Mail::Message::Field::Address" 4
.IX Item "Error: Cannot coerce a $type tha fuck into a Mail::Message::Field::Address"
When addresses is specified ta be included up in header fields, they may
be coerced tha fuck into Mail::Message::Field::Address objects first.  What
you specify aint accepted as address justification. I aint talkin' bout chicken n' gravy biatch.  This may be an
internal error.
.ie n .IP "Error: Cannot load collection module fo' $type ($class)." 4
.el .IP "Error: Cannot load collection module fo' \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module fo' $type ($class)."
Either tha specified \f(CW$type\fR do not exist, or dat module named \f(CW$class\fR returns
compilation errors.  If tha type as specified up in tha warnin is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot tha 'require' tha package which defines tha nickname.
.ie n .IP "Error: Creation of a cold-ass lil collection via $class failed." 4
.el .IP "Error: Creation of a cold-ass lil collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a cold-ass lil collection via $class failed."
Da \f(CW$class\fR did compile yo, but dat shiznit was not possible ta create a object
of dat class rockin tha options you specified.
.IP "Error: Don't know what tha fuck type of collection you wanna add." 4
.IX Item "Error: Don't know what tha fuck type of collection you wanna add."
If you add a cold-ass lil collection, it must either by a cold-ass lil collection object or a
list of options which can be used ta create a cold-ass lil collection object.  In
the latta case, tha type of collection must be specified.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
Da collection wit \f(CW$name\fR do not exist n' can not be pimped.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
