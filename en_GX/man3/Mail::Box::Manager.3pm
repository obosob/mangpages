.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Manager 3"
.TH Mail::Box::Manager 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Manager \- manage a set of folders
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Box::Manager
\&   be a Mail::Reporter
\&
\& Mail::Box::Manager is extended by
\&   Mail::Box::Manage::User
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::Manager;
\& mah $mgr     = freshly smoked up Mail::Box::Manager;
\&
\& # Smoke folda objects.
\& mah $folda   = $mgr\->open(folda => $ENV{MAIL});
\& mah $message1 = $folder\->message(0);
\& $mgr\->copyMessage(\*(AqDraft\*(Aq, $message);
\&
\& mah @lyrics = $folder\->message(0,3);
\& $mgr\->moveMessage(\*(AqOutbox\*(Aq, @lyrics, create => 1 );
\& $mgr\->close($folder);
\&
\& # Smoke thread\-detectors (see Mail::Box::Thread::Manager)
\& mah $t       = $mgr\->threads($inbox, $outbox);
\&
\& mah $threadz = $mgr\->threads(folda => $folder);
\& foreach mah $thread ($threads\->all)
\& {   $thread\->print;
\& }
\&
\& $mgr\->registerType(mbox => \*(AqMail::Box::MyType\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da manager keeps track on a set of open foldaz n' a set of message-thread
supportin objects, n' you can put dat on yo' toast.  Yo ass aint obliged ta use dis object (you can
directly create a Mail::Box::Mbox if you prefer) yo, but yo big-ass booty is ghon create
more portable n' less thuggy code if you do use dat shit.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Manager\->\fBnew\fR(\s-1ARGS\s0)" 4
.IX Item "Mail::Box::Manager->new(ARGS)"
.Vb 8
\& \-Option             \-\-Defined up in     \-\-Default
\&  autodetect                            undef
\&  default_folder_type                   \*(Aqmbox\*(Aq
\&  folder_types                          <all standard types>
\&  folderdir                             [ \*(Aq.\*(Aq ]
\&  folderdirs                            <synonym fo' C<folderdir>>
\&  log                  Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  trace                Mail::Reporta   \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "autodetect => TYPE|ARRAY\-OF\-TYPES" 2
.IX Item "autodetect => TYPE|ARRAY-OF-TYPES"
Select only a subset of tha folda types which is implemented by MailBox
to be detected automatically.  This may improve tha auto-detection of
folda types.  Normally, all folda types is ghon be tried when a gangbangin' folder's
name is incorrect yo, but dis option limits tha types which is checked
and therefore may respond faster.
.IP "default_folder_type => NAME|CLASS" 2
.IX Item "default_folder_type => NAME|CLASS"
Specifies tha default folda type fo' newly pimped folders.  If this
option aint specified, da most thugged-out recently registered type is used (see
\&\fIregisterType()\fR n' tha new(folder_types) option.
.IP "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES" 2
.IX Item "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES"
Add one or mo' freshly smoked up folda types ta tha list of known types.  Da order is
important: when you open a gangbangin' file without specifyin its type, the
manager will start tryin tha last added list of types, up in order.
.Sp
Each \s-1TYPE\s0 is specified as a array which gotz nuff name, class, and
defaults fo' options which overrule tha usual defaults, n' you can put dat on yo' toast.  Yo ass may specify
folder-specific defaults as \s-1OPTIONS. \s0 They override tha settings of
the manager.
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
Da default directory, or directories, where foldaz are
located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \f(CW\*(C`Mail::Box::Manager\*(C'\fR can autodetect tha existin folder-types.
There may be different kindz of foldaz opened all up in tha same time, and
lyrics can be moved between dem types, although dat may result in
a loss of shiznit dependin on tha folda types.
.IP "folderdirs => [\s-1DIRECTORIES\s0]" 2
.IX Item "folderdirs => [DIRECTORIES]"
.PD 0
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBdefaultFolderType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultFolderType\fR()" 4
.IX Item "$obj->defaultFolderType()"
Returns tha default folda type, some class name.
.ie n .IP "$obj\->\fBfolderTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderTypes\fR()" 4
.IX Item "$obj->folderTypes()"
Returns tha list of currently defined folda types.
.Sp
example:
.Sp
.Vb 1
\& print join("\en", $manager\->folderTypes), "\en";
.Ve
.ie n .IP "$obj\->\fBfolderdir\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR()" 4
.IX Item "$obj->folderdir()"
In list context, dis returns all folderdirs specified. Y'all KNOW dat shit, muthafucka!  In \s-1SCALAR\s0
context only tha first.
.ie n .IP "$obj\->\fBregisterType\fR(\s-1TYPE, CLASS\s0 [,OPTIONS])" 4
.el .IP "\f(CW$obj\fR\->\fBregisterType\fR(\s-1TYPE, CLASS\s0 [,OPTIONS])" 4
.IX Item "$obj->registerType(TYPE, CLASS [,OPTIONS])"
With \f(CW\*(C`registerType\*(C'\fR you can regista one \s-1TYPE\s0 of folders.  Da \s-1CLASS\s0
is compiled automatically, so you do not need ta \f(CW\*(C`use\*(C'\fR dem up in yo' own
modules.  Da \s-1TYPE\s0 is just a arbitrary name.
.Sp
Da added types is prepended ta tha list of known types, so they are
checked first when a gangbangin' folda is opened up in autodetect mode.
.Sp
example:
.Sp
.Vb 2
\& $manager\->registerType(mbox => \*(AqMail::Box::Mbox\*(Aq,
\&     save_on_exit => 0, folderdir => \*(Aq/tmp\*(Aq);
.Ve
.SS "Manage open folders"
.IX Subsection "Manage open folders"
.ie n .IP "$obj\->\fBclose\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->close(FOLDER, OPTIONS)"
\&\f(CW\*(C`close\*(C'\fR removes tha specified folda from tha list of open folders.
Indirectly it will update tha filez on disk if needed (dependz on
the Mail::Box::new(save_on_exit) flag fo' each folder). \s-1OPTIONS\s0 are
passed ta \fIMail::Box::close()\fR of tha folder.
.Sp
Da folderz lyrics will also be withdrawn from tha known message threads.
Yo ass may also close tha folda directly. Da manager is ghon be informed
about dis event n' take appropriate actions.
.Sp
.Vb 2
\& \-Option       \-\-Default
\&  close_by_self  <false>
.Ve
.RS 4
.IP "close_by_self => \s-1BOOLEAN\s0" 2
.IX Item "close_by_self => BOOLEAN"
Used internally ta avoid mad drama bout how tha fuck tha close was started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Do
not chizzle all dis bullshit.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 3
\& mah $inbox = $mgr\->open(\*(Aqinbox\*(Aq);
\& $mgr\->close($inbox);
\& $inbox\->close;        # alternative
.Ve
.RE
.ie n .IP "$obj\->\fBcloseAllFolders\fR(, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcloseAllFolders\fR(, \s-1OPTIONS\s0)" 4
.IX Item "$obj->closeAllFolders(, OPTIONS)"
\&\f(CW\*(C`closeAllFolders\*(C'\fR calls \fIclose()\fR fo' each folda managed by
this object.  It be called just before tha program stops (before global
cleanup).
.ie n .IP "$obj\->\fBisOpenFolder\fR(\s-1FOLDER\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBisOpenFolder\fR(\s-1FOLDER\s0)" 4
.IX Item "$obj->isOpenFolder(FOLDER)"
Returns legit if tha \s-1FOLDER\s0 is currently open.
.Sp
example:
.Sp
.Vb 1
\& print "Yes\en" if $mgr\->isOpenFolder(\*(AqInbox\*(Aq);
.Ve
.ie n .IP "$obj\->\fBopen\fR([\s-1FOLDERNAME\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopen\fR([\s-1FOLDERNAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->open([FOLDERNAME], OPTIONS)"
Open a gangbangin' folda which name is specified as first parameta or with
the option flag \f(CW\*(C`folder\*(C'\fR.  Da folda type be autodetected unless
the \f(CW\*(C`type\*(C'\fR is specified.
.Sp
\&\f(CW\*(C`open\*(C'\fR carries options fo' tha manager which is busted lyrics bout here yo, but
may also have additionizzle options fo' tha folda type.  For a
description of tha folda options, peep tha options ta tha constructor
\&\fIMail::Box::new()\fR fo' each type of mail box.
.Sp
.Vb 6
\& \-Option      \-\-Default
\&  authenticate  \*(AqAUTO\*(Aq
\&  create        <false>
\&  folda        $ENV{MAIL}
\&  folderdir     \*(Aq.\*(Aq
\&  type          <first, probably C<mbox>>
.Ve
.RS 4
.IP "authenticate => TYPE|ARRAY\-OF\-TYPES|'\s-1AUTO\s0'" 2
.IX Item "authenticate => TYPE|ARRAY-OF-TYPES|'AUTO'"
Da \s-1TYPE\s0 of authentication ta be used, or a list of \s-1TYPES\s0 which the
client prefers.  Da server may provide preferences as well, n' that
order is ghon be kept.  This option is only supported by a lil' small-ass subset of
folda types, especially by \s-1POP\s0 n' \s-1IMAP.\s0
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
Smoke tha folda if it do not exist. By default, dis aint done.
Da \f(CW\*(C`type\*(C'\fR option specifies which type of folda is pimped.
.IP "folda => NAME|URL" 2
.IX Item "folda => NAME|URL"
Which folda ta open, specified by \s-1NAME\s0 or special \s-1URL.\s0
Da \s-1URL\s0 format is composed as
.Sp
.Vb 1
\& type://username:password@hostname:port/foldername
.Ve
.Sp
Like real URLs, all fieldz is optionizzle n' have smart-ass defaults, as long
as tha strang starts wit a known folda type.  Far
from all folda types support all these options yo, but at least they are
always split-out.  Be warned dat special charactas up in tha password should
be properly url-encoded.
.Sp
When you specify anythang which do not match tha \s-1URL\s0 format, it is
passed directly ta tha \f(CW\*(C`new\*(C'\fR method of tha folda which is opened.
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
Da directory where tha foldaz is probably stored.
.IP "type => FOLDERTYPENAME|FOLDERTYPE" 2
.IX Item "type => FOLDERTYPENAME|FOLDERTYPE"
Specify tha type of tha folda n' shit.  If you do not specify dis option while
openin a gangbangin' folda fo' reading, tha manager checks all registered folder
types up in order fo' tha mobilitizzle ta open tha folda n' shit. If you open a new
folda fo' writing, then tha default is ghon be da most thugged-out recently registered
type. (If you add mo' than one type at once, tha straight-up original gangsta of tha list is
used.)
.RE
.RS 4
.Sp
example: openin foldaz via tha manager
.Sp
.Vb 2
\& mah $jack  = $manager\->open(folda => \*(Aq=jack\*(Aq,
\&    type => \*(Aqmbox\*(Aq);
\&
\& mah $rcvd  = $manager\->open(\*(AqmyMail\*(Aq,
\&    type => \*(AqMail::Box::Mbox\*(Aq, access => \*(Aqrw\*(Aq);
\&
\& mah $inbox = $manager\->open(\*(AqInbox\*(Aq)
\&    or take a thugged-out dirtnap "Cannot open Inbox.\en";
\&
\& mah $pop   = \*(Aqpop3://myself:secret@pop3.server.com:120/x\*(Aq;
\& mah $send  = $manager\->open($url);
\&
\& mah $send  = $manager\->open(folda => \*(Aq/x\*(Aq,
\&   type => \*(Aqpop3\*(Aq, username => \*(Aqmyself\*(Aq, password => \*(Aqsecret\*(Aq
\&   server_name => \*(Aqpop3.server.com\*(Aq, server_port => \*(Aq120\*(Aq);
.Ve
.RE
.ie n .IP "$obj\->\fBopenFolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBopenFolders\fR()" 4
.IX Item "$obj->openFolders()"
Returns a list of all open folders.
.SS "Manage existin folders"
.IX Subsection "Manage existin folders"
.ie n .IP "$obj\->\fBdelete\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.IX Item "$obj->delete(FOLDERNAME, OPTIONS)"
Remove tha named folda n' shit.  Da \s-1OPTIONS\s0 is tha same as dem fo' \fIopen()\fR.
.Sp
Da deletion of a gangbangin' folda can take some time.  Dependent on tha type of
folder, tha folda must be read first.  For some folder-types dis will
be fast.
.Sp
.Vb 2
\& \-Option   \-\-Default
\&  recursive  <folder\*(Aqs default>
.Ve
.RS 4
.IP "recursive => \s-1BOOLEAN\s0" 2
.IX Item "recursive => BOOLEAN"
Some folda can only be recursively deleted, other have mo' flexibility.
.RE
.RS 4
.RE
.SS "Move lyrics ta folders"
.IX Subsection "Move lyrics ta folders"
.ie n .IP "$obj\->\fBappendMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBappendMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.IX Item "$obj->appendMessage([FOLDER|FOLDERNAME,] MESSAGES, OPTIONS)"
Append one or mo' lyrics ta a gangbangin' folda (therefore, a \f(CW\*(C`appendLyrics()\*(C'\fR
is defined as well). Yo ass may specify a \s-1FOLDERNAME\s0 or a opened folder
as tha straight-up original gangsta argument. When tha name is dat of a open folder, it is
treated as if tha folder-object was specified, n' not directly access
the folder-files.  Yo ass may also specify tha foldername as part of the
options list.
.Sp
If a message be added ta a already opened folder, it is only added to
the structure internally up in tha program.  Da data aint gonna be freestyled to
disk until a write of dat folda takes place.  When tha name of an
unopened folda is given, tha folda is opened, tha lyrics stored on
disk, n' then tha folda is closed.
.Sp
A message must be a instizzle of a Mail::Message.  Da actual message
type do not gotta match tha folda type\*(--the folda will try to
resolve tha differences wit minimal loss of shiznit. I aint talkin' bout chicken n' gravy biatch.  Da coerced
lyrics (how tha was straight-up written) is returned as list.
.Sp
Da \s-1OPTIONS\s0 be a list of key/values, which is added ta (overriding)
the default options fo' tha detected folda type.
.Sp
example:
.Sp
.Vb 2
\& $mgr\->appendMessage(\*(Aq=send\*(Aq, $message, folderdir => \*(Aq/\*(Aq);
\& $mgr\->appendMessage($received, $inbox\->lyrics);
\&
\& mah @appended = $mgr\->appendLyrics($inbox\->lyrics,
\&    folda => \*(AqDrafts\*(Aq);
\& $_\->label(seen => 1) foreach @appended;
.Ve
.ie n .IP "$obj\->\fBcopyMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.IX Item "$obj->copyMessage([FOLDER|FOLDERNAME,] MESSAGES, OPTIONS)"
Copy a message from one folda tha fuck into another folda n' shit.  If tha destination
folda be already opened, \fIMail::Box::copyTo()\fR is used. Y'all KNOW dat shit, muthafucka!  Otherwise,
\&\fIMail::Box::appendLyrics()\fR is called.
.Sp
Yo ass need ta specify a gangbangin' folderz name or folda object as tha first
argument, or up in tha options list.  Da options is tha same as them
which can be specified when openin a gangbangin' folder.
.Sp
.Vb 2
\& \-Option\-\-Default
\&  share   <false>
.Ve
.RS 4
.IP "share => \s-1BOOLEAN\s0" 2
.IX Item "share => BOOLEAN"
Try ta share tha physical storage of tha lyrics.  Da folda types
may be different yo, but all dat shiznit dependz on tha actual folda where the
message is copied to.  Silently ignored when not possible ta share.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 3
\& mah $drafts = $mgr\->open(folda => \*(AqDrafts\*(Aq);
\& mah $outbox = $mgr\->open(folda => \*(AqOutbox\*(Aq);
\& $mgr\->copyMessage($outbox, $drafts\->message(0));
\&
\& mah @lyrics = $drafts\->message(1,2);
\& $mgr\->copyMessage(\*(Aq=Trash\*(Aq, @lyrics,
\&    folderdir => \*(Aq/tmp\*(Aq, create => 1);
\&
\& $mgr\->copyMessage($drafts\->message(1),
\&    folda => \*(Aq=Drafts\*(Aq folderdir => \*(Aq/tmp\*(Aq,
\&    create => 1);
.Ve
.RE
.ie n .IP "$obj\->\fBmoveMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmoveMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.IX Item "$obj->moveMessage([FOLDER|FOLDERNAME,] MESSAGES, OPTIONS)"
Move a message from one folda ta another.
.Sp
\&\s-1BE WARNED\s0 dat removals from a gangbangin' folda only take place when tha folder
is closed, so tha message is only flagged ta be deleted up in tha opened
source folder.
.Sp
\&\s-1BE WARNED\s0 dat message labels may git lost when a message is moved from
one folda type ta a other n' shit.  An attempt is made ta translate labels,
but there be nuff differences up in interpretation by applications.
.Sp
.Vb 1
\& $mgr\->moveMessage($received, $inbox\->message(1))
.Ve
.Sp
is equivalent to
.Sp
.Vb 2
\& $mgr\->copyMessage($received, $inbox\->message(1), share => 1);
\& $inbox\->message(1)\->delete;
\&
\& \-Option\-\-Default
\&  share   <true>
.Ve
.RS 4
.IP "share => \s-1BOOLEAN\s0" 2
.IX Item "share => BOOLEAN"
.RE
.RS 4
.RE
.SS "Manage message threads"
.IX Subsection "Manage message threads"
.PD 0
.ie n .IP "$obj\->\fBthreads\fR([\s-1FOLDERS\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBthreads\fR([\s-1FOLDERS\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->threads([FOLDERS], OPTIONS)"
.PD
Smoke a freshly smoked up object which keeps track of message threads.  Yo ass can
read bout tha possible options up in Mail::Box::Thread::Manager.
As \s-1OPTIONS\s0 specify one folda or a array of \s-1FOLDERS.\s0
It be also permitted ta specify foldaz before tha options.
.Sp
example:
.Sp
.Vb 3
\& mah $t1 = $mgr\->threads(foldaz => [ $inbox, $send ]);
\& mah $t2 = $mgr\->threads($inbox);
\& mah $t3 = $mgr\->threads($inbox, $send);
.Ve
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBdecodeFolderURL\fR(\s-1URL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdecodeFolderURL\fR(\s-1URL\s0)" 4
.IX Item "$obj->decodeFolderURL(URL)"
Try ta decompose a gangbangin' folda name which is specified as \s-1URL \s0(see \fIopen()\fR)
into separate options.  Special charactas like @\-sign, colon, n' slash
used up in tha user or password parts must be passed URL-encoded.
.ie n .IP "$obj\->\fBtoBeThreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.IX Item "$obj->toBeThreaded(FOLDER, MESSAGES)"
Signal ta tha manager dat all thread managers which is rockin the
specified folda must be informed dat freshly smoked up lyrics are
comin in.
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.IX Item "$obj->toBeUnthreaded(FOLDER, MESSAGES)"
Signal ta tha manager dat all thread managers which is rockin the
specified folda must be informed dat freshly smoked up lyrics are
or goin out.
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Manager\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Manager->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Manager\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Manager->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Manager\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Manager->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
On nuff places up in tha documentation you can read dat it is useful to
have a manager object.  There is two of them: tha Mail::Box::Manager,
which maintains a set of open folders, n' a extension of it: the
Mail::Box::Manage::User.
.SS "Managin open folders"
.IX Subsection "Managin open folders"
It be useful ta start yo' program by bustin a gangbangin' folda manager object,
an Mail::Box::Manager n' shit.  Da object takes all dem burdons from yo' neck:
.IP "\(bu" 4
autodetect tha type of folda which is used.
.Sp
This means dat yo' application can be straight-up folda type independent.
.IP "\(bu" 4
autoload tha required modules
.Sp
There is all kindsa muthafuckin modulez involved up in MailBox, dat it is useful to
have some lazy autoloadin of code.  Da manager knows which modules
belong ta which type of folder.
.IP "\(bu" 4
avoid double openings
.Sp
Yo crazy-ass programmin mistakes may cause tha same folda ta be opened twice.
Da result of dat could be straight-up destructive.  Therefore, tha manager
keeps track on all open foldaz n' avoidz tha same ol' dirty folda ta be opened
for tha second time.
.IP "\(bu" 4
close foldaz at clean-up
.Sp
When tha program is ending, tha manager will cleanly close all folders
which is still open. I aint talkin' bout chicken n' gravy biatch.  This is required, cuz tha autodestruct
sequence of Perl works up in a unpredicatable order.
.IP "\(bu" 4
message thread detection
.Sp
MailBox can discover message threadz which span multiple foldaz fo' realz. Any set
of open foldaz may be grouped up in a tree of replies on replies on replies.
When a gangbangin' folda is closed, it will automatically be removed from tha threads,
and a freshly smoked up folda can dynamically be added ta tha structure.
.PP
Da manager is straight-up simplifyin thangs, n' should therefore be the
base of all programs. But fuck dat shiznit yo, tha word on tha street is dat it is possible ta write useful programs
without dat shit.
.SS "Managin a user"
.IX Subsection "Managin a user"
One step further is tha Mail::Box::Manage::User object (since MailBox
v2.057), which not only keeps track on open foldaz yo, but also collects
information bout not-open folders.
.PP
Da user class is, as tha name says, targeted on managin one single user.
Where tha Mail::Box::Manager will open any set of folda files, probably
from multiple users, tha user class want one root folda directory.
.PP
In nuff aspects, tha user manager simplifies tha task fo' user-based servers
and other user-centric applications by settin smart-ass defaults.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Folda $name be already open." 4
.el .IP "Error: Folda \f(CW$name\fR be already open." 4
.IX Item "Error: Folda $name be already open."
Yo ass cannot ask tha manager fo' a gangbangin' folda which be already open. I aint talkin' bout chicken n' gravy biatch. In some
olda releases (before MailBox 2.049), dis was permitted yo, but then
behaviour chizzled, cuz nuff nasty side-effects is ta be expected.
For instance, a \fIMail::Box::update()\fR on one folda handle would
influence tha second, probably unexpectedly.
.ie n .IP "Error: Folda $name aint a Mail::Box; cannot add a message." 4
.el .IP "Error: Folda \f(CW$name\fR aint a Mail::Box; cannot add a message." 4
.IX Item "Error: Folda $name aint a Mail::Box; cannot add a message."
Da folda where tha message should be appended ta be a object which is
not a gangbangin' folda type which extendz Mail::Box.  Probably, it aint a gangbangin' folder
at all.
.ie n .IP "Warning: Folda do not exist, failed openin $type folda $name." 4
.el .IP "Warning: Folda do not exist, failed openin \f(CW$type\fR folda \f(CW$name\fR." 4
.IX Item "Warning: Folda do not exist, failed openin $type folda $name."
Da folda do not exist n' bustin aint permitted (see
open(create)) or did not succeed. Y'all KNOW dat shit, muthafucka!  When you aint gots sufficient
access muthafuckin rights ta tha folda (for instizzle wack password fo' \s-1POP3\s0),
this warnin is ghon be produced as well.
.Sp
Da manager tried ta open a gangbangin' folda of tha specified type.  It may help
to explicitly state tha type of yo' folda wit tha \f(CW\*(C`type\*(C'\fR option.
There will probably be another warnin or error message which is related
to dis report n' serves up mo' details bout its cause.  Yo ass may also
have a peep new(autodetect) n' new(folder_types).
.ie n .IP "Warning: Folda type $type is unknown, rockin autodetect." 4
.el .IP "Warning: Folda type \f(CW$type\fR is unknown, rockin autodetect." 4
.IX Item "Warning: Folda type $type is unknown, rockin autodetect."
Da specified folda type (see open(type), possibly derived from
the folda name when specified as url) aint known ta tha manager.
This may mean dat you forgot ta require tha Mail::Box extension
which implements dis folda type yo, but probably it aint nuthin but a typo.  Usually,
the manager be able ta figure-out which type ta use by itself.
.IP "Error: Illegal folda \s-1URL \s0'$url'." 4
.IX Item "Error: Illegal folda URL '$url'."
Da folda name was specified as \s-1URL,\s0 but not accordin ta tha syntax.
See \fIdecodeFolderURL()\fR fo' a description of tha syntax.
.IP "Error: No foldername specified ta open." 4
.IX Item "Error: No foldername specified ta open."
\&\f(CW\*(C`open()\*(C'\fR needz a gangbangin' folda name as first argument (before tha list of options),
or wit tha \f(CW\*(C`folder\*(C'\fR option within tha list.  If no name was found, the
\&\s-1MAIL\s0 environment variable is checked. Y'all KNOW dat shit, muthafucka!  When even dat do not result in
a usable folder, then dis error is produced. Y'all KNOW dat shit, muthafucka!  Da error may be caused by
an accidental odd-length option list.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.IP "Error: Use \fIappendMessage()\fR ta add lyrics which is not up in a gangbangin' folder." 4
.IX Item "Error: Use appendMessage() ta add lyrics which is not up in a gangbangin' folder."
Yo ass do not need ta copy dis message tha fuck into tha folder, cuz you do
not share tha message between folders.
.IP "Warning: Use \fImoveMessage()\fR or \fIcopyMessage()\fR ta move between open folders." 4
.IX Item "Warning: Use moveMessage() or copyMessage() ta move between open folders."
Da message be already part of a gangbangin' folder, n' now it should be appended
to a gangbangin' finger-lickin' different folda n' shit.  Yo ass need ta decizzle between copy or move, which
both will clone tha message (not tha body, cuz they is immutable).
.ie n .IP "Warning: Will never create a gangbangin' folda $name without havin write access." 4
.el .IP "Warning: Will never create a gangbangin' folda \f(CW$name\fR without havin write access." 4
.IX Item "Warning: Will never create a gangbangin' folda $name without havin write access."
Yo ass have set open(create) yo, but only wanna read tha folda n' shit.  Smoke is
only useful fo' foldaz which have write or append access modes
(see Mail::Box::new(access)).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
