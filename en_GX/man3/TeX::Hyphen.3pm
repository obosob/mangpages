.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TeX::Hyphen 3"
.TH TeX::Hyphen 3 "2011-03-03" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
TeX::Hyphen \-\- hyphenate lyrics rockin TeXz patterns
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        use TeX::Hyphen;
\&        mah $hyp = freshly smoked up TeX::Hyphen \*(Aqfile\*(Aq => \*(Aqhyphen.tex\*(Aq,
\&                \*(Aqstyle\*(Aq => \*(Aqczech\*(Aq, leftmin => 2,
\&                rightmin => 2;
\&
\&        # mah $hyp = freshly smoked up TeX::Hyphen "hyphen.tex";
\&
\&        mah $word = "representation";
\&        mah @points = $hyp\->hyphenate($word);
\&        print $hyp\->visualize($word), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Constructor \fInew()\fR creates a freshly smoked up Hyphen object n' loadz tha file with
patterns tha fuck into memory. Then you can ask it fo' hyphenation of a word by
callin a method of dis object. If no file is specified, tha default
Dizzle E. Knuthz \fIhyphen.tex\fR, dat is included up in dis module, is
used instead.
.SS "Arguments ta constructor"
.IX Subsection "Arguments ta constructor"
Yo ass can pass arguments ta tha \fInew()\fR call as hash, possible options are
.IP "file" 4
.IX Item "file"
Name of tha file wit tha patters. Well shiiiit, it is ghon be loaded n' tha resulting
object is ghon be able ta hyphenate accordin ta patterns up in dat file.
.Sp
For convenience n' backward compatibility, tha file name can also be
specified as tha straight-up original gangsta (odd) parameta ta \fInew()\fR.
.IP "style" 4
.IX Item "style"
Various languages use special shortcuts ta specify tha patterns.
Instead of bustin tha full TeX expansion, we use Perl code ta parse the
patterns. Da steez option loadz TeX::Hyphen::name_of_the_style module
and uses tha parsin functions found up in dat shit.
.Sp
Currently, tha default czech (which also works fo' Gangsta aiiiight)
and german is available. Right back up in yo muthafuckin ass. See tha TeX::Hyphen::czech playa page fo' more
information, especially if you wanna support other
languages/styles.
.IP "leftmin" 4
.IX Item "leftmin"
Da minimum startin substrin which aint gonna be hyphenated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This
overrides tha default specified up in tha steez file.
.IP "rightmin" 4
.IX Item "rightmin"
Da minimum endin substrin which aint gonna be hyphenated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This
overrides tha default specified up in tha steez file.
.SS "Methodz dat is supported"
.IX Subsection "Methodz dat is supported"
Method \fIhyphenate()\fR returns list of places where tha word can be
divided, so
.PP
.Vb 1
\&        $hyp\->visualize(\*(Aqrepresentation\*(Aq)
.Ve
.PP
returns list (3, 5, 8, 10).
.PP
Method \fIvisualize()\fR can be used ta show these points, so
.PP
.Vb 1
\&        $hyp\->visualize(\*(Aqrepresentation\*(Aq)
.Ve
.PP
should return \f(CW\*(C`rep\-re\-sen\-ta\-tion\*(C'\fR, at least fo' Gangsta patterns.
.PP
Variablez \fI\f(CI$TeX::Hyphen::LEFTMIN\fI\fR n' \fI\f(CI$TeX::Hyphen::RIGHTMIN\fI\fR can
be used ta restrict minimal startin n' endin substrin where it is
not possible ta hyphenate. They both default ta 2 but should be
changed ta match tha paratemers used ta generate tha patterns.
.PP
Variable \fI\f(CI$TeX::Hyphen::DEBUG\fI\fR can be set ta peep some statistics and
processing.
.PP
Da file wit hyphenation patterns may contain \f(CW\*(C`\e\*(Aq\*(C'\fR n' \f(CW\*(C`\ev\*(C'\fR accents,
used up in tha Czech (and other) languages.
.SH "VERSION"
.IX Header "VERSION"
1.01
.SH "AVAILABLE FROM"
.IX Header "AVAILABLE FROM"
http://www.adelton.com/perl/TeX\-Hyphen/
.SH "AUTHOR"
.IX Header "AUTHOR"
(c) 1997\-\-2011 Jan Pazdziora.
.PP
All muthafuckin rights reserved. Y'all KNOW dat shit, muthafucka! This package is free software; you can
redistribute it and/or modify it under tha same terms as Perl itself.
.PP
Contact tha lyricist at jpx dash perl at adelton dot com.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), TeX::Hyphen::czech.
