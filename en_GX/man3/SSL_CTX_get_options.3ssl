.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_CTX_set_options 3"
.TH SSL_CTX_set_options 3 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_CTX_set_options, SSL_set_options, SSL_CTX_clear_options, SSL_clear_options, SSL_CTX_get_options, SSL_get_options, SSL_get_secure_renegotiation_support \- manipulate SSL options
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& long SSL_CTX_set_options(SSL_CTX *ctx, long options);
\& long SSL_set_options(SSL *ssl, long options);
\&
\& long SSL_CTX_clear_options(SSL_CTX *ctx, long options);
\& long SSL_clear_options(SSL *ssl, long options);
\&
\& long SSL_CTX_get_options(SSL_CTX *ctx);
\& long SSL_get_options(SSL *ssl);
\&
\& long SSL_get_secure_renegotiation_support(SSL *ssl);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Note: all these functions is implemented rockin macros.
.PP
\&\fISSL_CTX_set_options()\fR addz tha options set via bitmask up in \fBoptions\fR ta \fBctx\fR.
Options already set before is not cleared!
.PP
\&\fISSL_set_options()\fR addz tha options set via bitmask up in \fBoptions\fR ta \fBssl\fR.
Options already set before is not cleared!
.PP
\&\fISSL_CTX_clear_options()\fR clears tha options set via bitmask up in \fBoptions\fR
to \fBctx\fR.
.PP
\&\fISSL_clear_options()\fR clears tha options set via bitmask up in \fBoptions\fR ta \fBssl\fR.
.PP
\&\fISSL_CTX_get_options()\fR returns tha options set fo' \fBctx\fR.
.PP
\&\fISSL_get_options()\fR returns tha options set fo' \fBssl\fR.
.PP
\&\fISSL_get_secure_renegotiation_support()\fR indicates whether tha peer supports
secure renegotiation.
.SH "NOTES"
.IX Header "NOTES"
Da behaviour of tha \s-1SSL\s0 library can be chizzled by settin nuff muthafuckin options.
Da options is coded as bitmasks n' can be combined by a logical \fBor\fR
operation (|).
.PP
\&\fISSL_CTX_set_options()\fR n' \fISSL_set_options()\fR affect tha (external)
protocol behaviour of tha \s-1SSL\s0 library. Da (internal) behaviour of
the \s-1API\s0 can be chizzled by rockin tha similar
\&\fISSL_CTX_set_mode\fR\|(3) n' \fISSL_set_mode()\fR functions.
.PP
Durin a handshake, tha option settingz of tha \s-1SSL\s0 object is used. Y'all KNOW dat shit, muthafucka! When
a freshly smoked up \s-1SSL\s0 object is pimped from a cold-ass lil context rockin \fISSL_new()\fR, tha current
option settin is copied. Y'all KNOW dat shit, muthafucka! Chizzlez ta \fBctx\fR do not affect already pimped
\&\s-1SSL\s0 objects, n' you can put dat on yo' toast. \fISSL_clear()\fR do not affect tha settings.
.PP
Da followin \fBbug workaround\fR options is available:
.IP "\s-1SSL_OP_MICROSOFT_SESS_ID_BUG\s0" 4
.IX Item "SSL_OP_MICROSOFT_SESS_ID_BUG"
www.microsoft.com \- when rappin' SSLv2, if session-id reuse is
performed, tha session-id passed back up in tha server-finished message
is different from tha one decided upon.
.IP "\s-1SSL_OP_NETSCAPE_CHALLENGE_BUG\s0" 4
.IX Item "SSL_OP_NETSCAPE_CHALLENGE_BUG"
Netscape\-Commerce/1.12, when rappin' SSLv2, accepts a 32 byte
challenge but then appears ta only use 16 bytes when generatin the
encryption keys.  Usin 16 bytes be aiiight but it should be aiiight ta use 32.
Accordin ta tha SSLv3 spec, one should use 32 bytes fo' tha challenge
when operatin up in SSLv2/v3 compatibilitizzle mode yo, but as mentioned above,
this breaks dis server so 16 bytes is tha way ta bounce tha fuck out.
.IP "\s-1SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG\s0" 4
.IX Item "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG"
Az of OpenSSL 0.9.8q n' 1.0.0c, dis option has no effect.
.IP "\s-1SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG\s0" 4
.IX Item "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG"
\&...
.IP "\s-1SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER\s0" 4
.IX Item "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER"
\&...
.IP "\s-1SSL_OP_MSIE_SSLV2_RSA_PADDING\s0" 4
.IX Item "SSL_OP_MSIE_SSLV2_RSA_PADDING"
Az of OpenSSL 0.9.7h n' 0.9.8a, dis option has no effect.
.IP "\s-1SSL_OP_SSLEAY_080_CLIENT_DH_BUG\s0" 4
.IX Item "SSL_OP_SSLEAY_080_CLIENT_DH_BUG"
\&...
.IP "\s-1SSL_OP_TLS_D5_BUG\s0" 4
.IX Item "SSL_OP_TLS_D5_BUG"
\&...
.IP "\s-1SSL_OP_TLS_BLOCK_PADDING_BUG\s0" 4
.IX Item "SSL_OP_TLS_BLOCK_PADDING_BUG"
\&...
.IP "\s-1SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\s0" 4
.IX Item "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS"
Disablez a cold-ass lil countermeasure against a \s-1SSL 3.0/TLS 1.0\s0 protocol
vulnerabilitizzle affectin \s-1CBC\s0 ciphers, which cannot be handled by some
broken \s-1SSL\s0 implementations.  This option has no effect fo' connections
usin other ciphers.
.IP "\s-1SSL_OP_ALL\s0" 4
.IX Item "SSL_OP_ALL"
All of tha above bug workarounds.
.PP
It be probably safe ta use \fB\s-1SSL_OP_ALL\s0\fR ta enable tha bug workaround
options if compatibilitizzle wit somewhat fucked up implementations is
desired.
.PP
Da followin \fBmodifying\fR options is available:
.IP "\s-1SSL_OP_TLS_ROLLBACK_BUG\s0" 4
.IX Item "SSL_OP_TLS_ROLLBACK_BUG"
Disable version rollback battle detection.
.Sp
Durin tha client key exchange, tha client must bust tha same shiznit
about aaight \s-1SSL/TLS\s0 protocol levels as durin tha straight-up original gangsta hello. Right back up in yo muthafuckin ass. Some
clients violate dis rule by adaptin ta tha serverz answer n' shit. (Example:
the client sendz a SSLv2 wassup n' accepts up ta SSLv3.1=TLSv1, tha server
only understandz up ta SSLv3. In dis case tha client must still use the
same SSLv3.1=TLSv1 announcement. Right back up in yo muthafuckin ass. Some clients step down ta SSLv3 wit respect
to tha serverz answer n' violate tha version rollback protection.)
.IP "\s-1SSL_OP_SINGLE_DH_USE\s0" 4
.IX Item "SSL_OP_SINGLE_DH_USE"
Always create a freshly smoked up key when rockin temporary/ephemeral \s-1DH\s0 parameters
(see \fISSL_CTX_set_tmp_dh_callback\fR\|(3)).
This option must be used ta prevent lil' small-ass subgroup attacks, when
the \s-1DH\s0 parametas was not generated rockin \*(L"strong\*(R" primes
(e.g. when rockin DSA-parameters, peep \fIdhparam\fR\|(1)).
If \*(L"strong\*(R" primes was used, it aint strictly necessary ta generate
a freshly smoked up \s-1DH\s0 key durin each handshake but it be also recommended.
\&\fB\s-1SSL_OP_SINGLE_DH_USE\s0\fR should therefore be enabled whenever
temporary/ephemeral \s-1DH\s0 parametas is used.
.IP "\s-1SSL_OP_EPHEMERAL_RSA\s0" 4
.IX Item "SSL_OP_EPHEMERAL_RSA"
This option is no longer implemented n' is treated as no op.
.IP "\s-1SSL_OP_CIPHER_SERVER_PREFERENCE\s0" 4
.IX Item "SSL_OP_CIPHER_SERVER_PREFERENCE"
When choosin a cold-ass lil cipher, use tha serverz preferences instead of tha client
preferences. When not set, tha \s-1SSL\s0 server will always follow tha clients
preferences. When set, tha SSLv3/TLSv1 server will chizzle followin its
own preferences. Because of tha different protocol, fo' SSLv2 tha server
will bust its list of preferences ta tha client n' tha client chizzles.
.IP "\s-1SSL_OP_PKCS1_CHECK_1\s0" 4
.IX Item "SSL_OP_PKCS1_CHECK_1"
\&...
.IP "\s-1SSL_OP_PKCS1_CHECK_2\s0" 4
.IX Item "SSL_OP_PKCS1_CHECK_2"
\&...
.IP "\s-1SSL_OP_NETSCAPE_CA_DN_BUG\s0" 4
.IX Item "SSL_OP_NETSCAPE_CA_DN_BUG"
If we accept a netscape connection, demand a cold-ass lil client cert, have a
non-self-signed \s-1CA\s0 which aint gots its \s-1CA\s0 up in netscape, n' the
browser has a cold-ass lil cert, it will crash/hang.  Works fo' 3.x n' 4.xbeta
.IP "\s-1SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG\s0" 4
.IX Item "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG"
\&...
.IP "SSL_OP_NO_SSLv2" 4
.IX Item "SSL_OP_NO_SSLv2"
Do not use tha SSLv2 protocol.
.IP "SSL_OP_NO_SSLv3" 4
.IX Item "SSL_OP_NO_SSLv3"
Do not use tha SSLv3 protocol.
.IP "SSL_OP_NO_TLSv1" 4
.IX Item "SSL_OP_NO_TLSv1"
Do not use tha TLSv1 protocol.
.IP "\s-1SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION\s0" 4
.IX Item "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION"
When struttin renegotiation as a server, always start a freshly smoked up session
(i.e., session resumption requests is only accepted up in tha initial
handshake). This option aint needed fo' clients.
.IP "\s-1SSL_OP_NO_TICKET\s0" 4
.IX Item "SSL_OP_NO_TICKET"
Normally clients n' servers will, where possible, transparently make use
of RFC4507bis tickets fo' stateless session resumption.
.Sp
If dis option is set dis functionalitizzle is disabled n' tickets will
not be used by clients or servers.
.IP "\s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0" 4
.IX Item "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION"
Allow legacy insecure renegotiation between OpenSSL n' unpatched clients or
servers. Right back up in yo muthafuckin ass. See tha \fB\s-1SECURE RENEGOTIATION\s0\fR section fo' mo' details.
.IP "\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0" 4
.IX Item "SSL_OP_LEGACY_SERVER_CONNECT"
Allow legacy insecure renegotiation between OpenSSL n' unpatched servers
\&\fBonly\fR: dis option is currently set by default. Right back up in yo muthafuckin ass. See the
\&\fB\s-1SECURE RENEGOTIATION\s0\fR section fo' mo' details.
.SH "SECURE RENEGOTIATION"
.IX Header "SECURE RENEGOTIATION"
OpenSSL 0.9.8m n' lata always attempts ta use secure renegotiation as
busted lyrics bout up in \s-1RFC5746.\s0 This countas tha prefix battle busted lyrics bout in
\&\s-1CVE\-2009\-3555\s0 n' elsewhere.
.PP
Da deprecated n' highly fucked up SSLv2 protocol do not support
renegotiation at all: its use is \fBstrongly\fR discouraged.
.PP
This battle has far reachin consequences which application writas should be
aware of. In tha description below a implementation supportin secure
renegotiation is referred ta as \fIpatched\fR fo' realz. A server not supportin secure
renegotiation is referred ta as \fIunpatched\fR.
.PP
Da followin sections describe tha operations permitted by OpenSSLz secure
renegotiation implementation.
.SS "Patched client n' server"
.IX Subsection "Patched client n' server"
Connections n' renegotiation is always permitted by OpenSSL implementations.
.SS "Unpatched client n' patched OpenSSL server"
.IX Subsection "Unpatched client n' patched OpenSSL server"
Da initial connection suceedz but client renegotiation is denied by the
server wit a \fBno_renegotiation\fR warnin alert if \s-1TLS\s0 v1.0 is used or a gangbangin' fatal
\&\fBhandshake_failure\fR alert up in \s-1SSL\s0 v3.0.
.PP
If tha patched OpenSSL server attempts ta renegotiate a gangbangin' fatal
\&\fBhandshake_failure\fR alert is sent. This is cuz tha server code may be
unaware of tha unpatched nature of tha client.
.PP
If tha option \fB\s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0\fR is set then
renegotiation \fBalways\fR succeeds.
.PP
\&\fB\s-1NB:\s0\fR a funky-ass bug up in OpenSSL clients earlier than 0.9.8m (all of which are
unpatched) will result up in tha connection hangin if it receives a
\&\fBno_renegotiation\fR alert. OpenSSL versions 0.9.8m n' lata will regard
a \fBno_renegotiation\fR alert as fatal n' respond wit a gangbangin' fatal
\&\fBhandshake_failure\fR alert. This is cuz tha OpenSSL \s-1API\s0 currently has
no provision ta indicate ta a application dat a renegotiation attempt
was refused.
.SS "Patched OpenSSL client n' unpatched server."
.IX Subsection "Patched OpenSSL client n' unpatched server."
If tha option \fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR or
\&\fB\s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0\fR is set then initial connections
and renegotiation between patched OpenSSL clients n' unpatched servers
succeeds. If neither option is set then initial connections ta unpatched
servers will fail.
.PP
Da option \fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR is currently set by default even
though it has securitizzle implications: otherwise it would be impossible to
connect ta unpatched servers (i.e. all of dem initially) n' dis is clearly
not acceptable. Renegotiation is permitted cuz dis do not add any
additionizzle securitizzle issues: durin a battle clients do not peep any
renegotiations anyway.
.PP
As mo' servers become patched tha option \fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR will
\&\fBnot\fR be set by default up in a gangbangin' future version of OpenSSL.
.PP
OpenSSL client applications wishin ta ensure they can connect ta unpatched
servers should always \fBset\fR \fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR
.PP
OpenSSL client applications dat wanna ensure they can \fBnot\fR connect to
unpatched servers (and thus avoid any securitizzle issues) should always \fBclear\fR
\&\fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR rockin \fISSL_CTX_clear_options()\fR or
\&\fISSL_clear_options()\fR.
.PP
Da difference between tha \fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR and
\&\fB\s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0\fR options is that
\&\fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR enablez initial connections n' secure
renegotiation between OpenSSL clients n' unpatched servers \fBonly\fR, while
\&\fB\s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0\fR allows initial connections
and renegotiation between OpenSSL n' unpatched clients or servers.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fISSL_CTX_set_options()\fR n' \fISSL_set_options()\fR return tha freshly smoked up options bitmask
afta addin \fBoptions\fR.
.PP
\&\fISSL_CTX_clear_options()\fR n' \fISSL_clear_options()\fR return tha freshly smoked up options bitmask
afta clearin \fBoptions\fR.
.PP
\&\fISSL_CTX_get_options()\fR n' \fISSL_get_options()\fR return tha current bitmask.
.PP
\&\fISSL_get_secure_renegotiation_support()\fR returns 1 is tha peer supports
secure renegotiation n' 0 if it do not.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIssl\fR\|(3), \fISSL_new\fR\|(3), \fISSL_clear\fR\|(3),
\&\fISSL_CTX_set_tmp_dh_callback\fR\|(3),
\&\fISSL_CTX_set_tmp_rsa_callback\fR\|(3),
\&\fIdhparam\fR\|(1)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fB\s-1SSL_OP_CIPHER_SERVER_PREFERENCE\s0\fR and
\&\fB\s-1SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION\s0\fR done been added in
OpenSSL 0.9.7.
.PP
\&\fB\s-1SSL_OP_TLS_ROLLBACK_BUG\s0\fR has been added up in OpenSSL 0.9.6 n' was automatically
enabled wit \fB\s-1SSL_OP_ALL\s0\fR fo' realz. Az of 0.9.7, it is no longer included up in \fB\s-1SSL_OP_ALL\s0\fR
and must be explicitly set.
.PP
\&\fB\s-1SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\s0\fR has been added up in OpenSSL 0.9.6e.
Versions up ta OpenSSL 0.9.6c do not include tha countermeasure that
can be disabled wit dis option (in OpenSSL 0.9.6d, dat shiznit was always
enabled).
.PP
\&\fISSL_CTX_clear_options()\fR n' \fISSL_clear_options()\fR was first added up in OpenSSL
0.9.8m.
.PP
\&\fB\s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0\fR, \fB\s-1SSL_OP_LEGACY_SERVER_CONNECT\s0\fR
and tha function \fISSL_get_secure_renegotiation_support()\fR was first added in
OpenSSL 0.9.8m.
