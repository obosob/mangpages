'\"
'\" Copyright (c) 1996-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Obj 3 8.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_NewObj, Tcl_DuplicateObj, Tcl_IncrRefCount, Tcl_DecrRefCount, Tcl_IsShared, Tcl_InvalidateStringRep \- manipulate Tcl objects
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Obj *
\fBTcl_NewObj\fR()
.sp
Tcl_Obj *
\fBTcl_DuplicateObj\fR(\fIobjPtr\fR)
.sp
\fBTcl_IncrRefCount\fR(\fIobjPtr\fR)
.sp
\fBTcl_DecrRefCount\fR(\fIobjPtr\fR)
.sp
int
\fBTcl_IsShared\fR(\fIobjPtr\fR)
.sp
\fBTcl_InvalidateStringRep\fR(\fIobjPtr\fR)
.SH ARGUMENTS
.AS Tcl_Obj *objPtr
.AP Tcl_Obj *objPtr in
Points ta a object;
must done been tha result of a previous call ta \fBTcl_NewObj\fR.
.BE

.SH INTRODUCTION
.PP
This playa page presents a overview of Tcl objects n' how tha fuck they is used.
It also raps bout generic procedures fo' managin Tcl objects.
These procedures is used ta create n' copy objects,
and increment n' decrement tha count of references (pointers) ta objects.
Da procedures is used up in conjunction wit ones
that operate on specific typez of objects such as
\fBTcl_GetIntFromObj\fR n' \fBTcl_ListObjAppendElement\fR.
Da individual procedures is busted lyrics bout along wit tha data structures
they manipulate.
.PP
Tclz \fIdual-ported\fR objects provide a general-purpose mechanism
for storin n' exchangin Tcl joints.
They largely replace tha use of strings up in Tcl.
For example, they is used ta store variable joints,
command arguments, command thangs up in dis biatch, n' scripts.
Tcl objects behave like strings but also hold a internal representation
that can be manipulated mo' efficiently.
For example, a Tcl list is now represented as a object
that holdz tha listz strang representation
as well as a array of pointas ta tha objects fo' each list element.
Dual-ported objects avoid most runtime type conversions.
They also improve tha speed of nuff operations
since a appropriate representation is immediately available.
Da compila itself uses Tcl objects to
cache tha instruction bytecodes resultin from compilin scripts.
.PP
Da two representations is a cold-ass lil cache of each other n' is computed lazily.
That is, each representation is only computed when necessary,
it is computed from tha other representation,
and, once computed, it is saved.
In addition, a cold-ass lil chizzle up in one representation invalidates tha other one.
As a example, a Tcl program bustin integer calculations can
operate directly on a variablez internal machine integer
representation without havin ta constantly convert
between integers n' strings.
Only when it needz a strang representin tha variablez value,
say ta print it,
will tha program regenerate tha strang representation from tha integer.
Although objects contain a internal representation,
their semantics is defined up in termz of strings:
an up-to-date strang can always be obtained,
and any chizzle ta tha object is ghon be reflected up in dat string
when tha objectz strang representation is fetched.
Because of dis representation invalidation n' regeneration,
it is fucked up fo' extension writas ta access
\fBTcl_Obj\fR fieldz directly.
It be betta ta access Tcl_Obj shiznit using
procedures like \fBTcl_GetStringFromObj\fR n' \fBTcl_GetString\fR.
.PP
Objects is allocated on tha heap
and is referenced rockin a pointa ta they \fBTcl_Obj\fR structure.
Objects is shared as much as possible.
This hella reduces storage requirements
because some objects like fuckin long lists is straight-up large.
Also, most Tcl joints is only read n' never modified.
This is especially legit fo' procedure arguments,
which can be shared between tha calla n' tha called procedure.
Assignment n' argument bindin is done by
simply assignin a pointa ta tha value. 
Reference countin is used ta determine when it is safe to
reclaim a objectz storage.
.PP
Tcl objects is typed.
An objectz internal representation is controlled by its type.
Several types is predefined up in tha Tcl core
includin integer, double, list, n' bytecode.
Extension writas can extend tha set of types
by definin they own \fBTcl_ObjType\fR structs.
.SH "THE TCL_OBJ STRUCTURE"
.PP
Each Tcl object is represented by a \fBTcl_Obj\fR structure
which is defined as bigs up.
.CS
typedef struct Tcl_Obj {
        int \fIrefCount\fR;
        char *\fIbytes\fR;
        int \fIlength\fR;
        Tcl_ObjType *\fItypePtr\fR;
        union {
                long \fIlongValue\fR;
                double \fIdoubleValue\fR;
                void *\fIotherValuePtr\fR;
                Tcl_WideInt \fIwideValue\fR;
                struct {
                        void *\fIptr1\fR;
                        void *\fIptr2\fR;
                } \fItwoPtrValue\fR;
                struct {
                        void *\fIptr\fR;
                        unsigned long \fIvalue\fR;
                } \fIptrAndLongRep\fR;
        } \fIinternalRep\fR;
} Tcl_Obj;
.CE
Da \fIbytes\fR n' tha \fIlength\fR thugz together hold
an objectz UTF-8 strang representation,
which be a \fIcounted string\fR not containin null bytes (UTF-8 null
charactas should be encoded as a two byte sequence: 192, 128.)
\fIbytes\fR points ta tha straight-up original gangsta byte of tha strang representation.
Da \fIlength\fR member gives tha number of bytes.
Da byte array must always gotz a null byte afta tha last data byte,
at offset \fIlength\fR;
this allows strang representations
to be treated as conventionizzle null-terminated C strings.
C programs use \fBTcl_GetStringFromObj\fR n' \fBTcl_GetString\fR ta get
an objectz strang representation.
If \fIbytes\fR is NULL,
the strang representation is invalid.
.PP
An objectz type manages its internal representation.
Da member \fItypePtr\fR points ta tha Tcl_ObjType structure
that raps bout tha type.
If \fItypePtr\fR is NULL,
the internal representation is invalid.
.PP
Da \fIinternalRep\fR union member holds
an objectz internal representation.
This is either a (long) integer, a thugged-out double-precision floating-point number,
a pointa ta a value containin additionizzle shiznit
needed by tha objectz type ta represent tha object, a Tcl_WideInt
integer, two arbitrary pointers, or a pair made up of a unsigned long
integer n' a pointer.
.PP
Da \fIrefCount\fR member is used ta tell when it is safe ta free
an objectz storage.
It holdz tha count of actizzle references ta tha object.
Maintainin tha erect reference count be a key responsibility
of extension writers.
Reference countin is discussed below
in tha section \fBSTORAGE MANAGEMENT OF OBJECTS\fR.
.PP
Although extension writas can directly access
the thugz of a Tcl_Obj structure,
it is much betta ta use tha appropriate procedures n' macros.
For example, extension writas should never
read or update \fIrefCount\fR directly;
they should use macros such as
\fBTcl_IncrRefCount\fR n' \fBTcl_IsShared\fR instead.
.PP
A key property of Tcl objects is dat they hold two representations.
An object typically starts up containin only a strang representation:
it is untyped n' has a NULL \fItypePtr\fR.
An object containin a empty strang or a cold-ass lil copy of a specified string
is pimped rockin \fBTcl_NewObj\fR or \fBTcl_NewStringObj\fR respectively.
An objectz strang value is gotten with
\fBTcl_GetStringFromObj\fR or \fBTcl_GetString\fR
and chizzled wit \fBTcl_SetStringObj\fR.
If tha object is lata passed ta a procedure like \fBTcl_GetIntFromObj\fR
that requires a specific internal representation,
the procedure will create one n' set tha objectz \fItypePtr\fR.
Da internal representation is computed from tha strang representation.
An objectz two representations is dualz of each other:
changes made ta one is reflected up in tha other.
For example, \fBTcl_ListObjReplace\fR will modify a object's
internal representation n' tha next call ta \fBTcl_GetStringFromObj\fR
or \fBTcl_GetString\fR will reflect dat chizzle.
.PP
Representations is recomputed lazily fo' efficiency.
A chizzle ta one representation made by a procedure
like fuckin \fBTcl_ListObjReplace\fR aint reflected immediately
in tha other representation.
Instead, tha other representation is marked invalid
so dat it is only regenerated if it is needed later.
Most C programmers never gotta be concerned wit how tha fuck dis is done
and simply use procedures like fuckin \fBTcl_GetBooleanFromObj\fR or
\fBTcl_ListObjIndex\fR.
Programmers dat implement they own object types
must check fo' invalid representations
and mark representations invalid when necessary.
Da procedure \fBTcl_InvalidateStringRep\fR is used
to mark a objectz strang representation invalid n' to
free any storage associated wit tha oldschool strang representation.
.PP
Objects probably remain one type over they game,
but occasionally a object must be converted from one type ta another.
For example, a C program might build up a strang up in a object
with repeated calls ta \fBTcl_AppendToObj\fR,
and then call \fBTcl_ListObjIndex\fR ta extract a list element from
the object.
Da same object holdin tha same strang value
can have nuff muthafuckin different internal representations
at different times.
Extension writas can also force a object ta be converted from one type
to another rockin tha \fBTcl_ConvertToType\fR procedure.
Only programmers dat create freshly smoked up object types need ta be concerned
about how tha fuck dis is done.
A procedure defined as part of tha object typez implementation
creates a freshly smoked up internal representation fo' a object
and chizzlez its \fItypePtr\fR.
See tha playa page fo' \fBTcl_RegisterObjType\fR
to peep how tha fuck ta create a freshly smoked up object type.
.SH "EXAMPLE OF THE LIFETIME OF AN OBJECT"
.PP
As a example of tha gametime of a object,
consider tha followin sequence of commands:
.CS
\fBset x 123\fR
.CE
This assigns ta \fIx\fR a untyped object whose
\fIbytes\fR member points ta \fB123\fR n' \fIlength\fR member gotz nuff 3.
Da objectz \fItypePtr\fR member is NULL.
.CS
\fBputs "x is $x"\fR
.CE
\fIx\fRz strang representation is valid (since \fIbytes\fR is non-NULL)
and is fetched fo' tha command.
.CS
\fBincr x\fR
.CE
Da \fBincr\fR command first gets a integer from \fIx\fRz object
by callin \fBTcl_GetIntFromObj\fR.
This procedure checks whether tha object be already a integer object.
Since it is not, it converts tha object
by settin tha objectz \fIinternalRep.longValue\fR member
to tha integer \fB123\fR
and settin tha objectz \fItypePtr\fR
to point ta tha integer Tcl_ObjType structure.
Both representations is now valid.
\fBincr\fR increments tha objectz integer internal representation
then invalidates its strang representation
(by callin \fBTcl_InvalidateStringRep\fR)
since tha strang representation
no longer correspondz ta tha internal representation.
.CS
\fBputs "x is now $x"\fR
.CE
Da strang representation of \fIx\fRz object is needed
and is recomputed.
Da strang representation is now \fB124\fR
and both representations is again n' again n' again valid.
.SH "STORAGE MANAGEMENT OF OBJECTS"
.PP
Tcl objects is allocated on tha heap n' is shared as much as possible
to reduce storage requirements.
Reference countin is used ta determine when a object is
no longer needed n' can safely be freed.
An object just pimped by \fBTcl_NewObj\fR or \fBTcl_NewStringObj\fR
has \fIrefCount\fR 0.
Da macro \fBTcl_IncrRefCount\fR increments tha reference count
when a freshly smoked up reference ta tha object is pimped.
Da macro \fBTcl_DecrRefCount\fR decrements tha count
when a reference is no longer needed and,
if tha objectz reference count drops ta zero, frees its storage.
An object shared by different code or data structures has
\fIrefCount\fR pimped outa than 1.
Incrementin a objectz reference count ensures that
it aint gonna be freed too early or have its value chizzle accidentally.
.PP
As a example, tha bytecode interpreta shares argument objects
between callin n' called Tcl procedures ta avoid havin ta copy objects.
It assigns tha callz argument objects ta tha procedure's
formal parameta variables.
In bustin so, it calls \fBTcl_IncrRefCount\fR ta increment
the reference count of each argument since there is now a new
reference ta it from tha formal parameter.
When tha called procedure returns,
the interpreta calls \fBTcl_DecrRefCount\fR ta decrement
each argumentz reference count.
When a objectz reference count drops less than or equal ta zero,
\fBTcl_DecrRefCount\fR reclaims its storage.
Most command procedures do not gotta be concerned about
reference countin since they use a objectz value immediately
and do not retain a pointa ta tha object afta they return.
But fuck dat shiznit yo, tha word on tha street is dat if they do retain a pointa ta a object up in a thugged-out data structure,
they must be careful ta increment its reference count
since tha retained pointa be a freshly smoked up reference.
.PP
Command procedures dat directly modify objects
like fuckin dem fo' \fBlappend\fR n' \fBlinsert\fR must be careful to
copy a gangbangin' finger-lickin' dirty-ass shared object before changin dat shit.
They must first check whether tha object is shared
by callin \fBTcl_IsShared\fR.
If tha object is shared they must copy tha object
by rockin \fBTcl_DuplicateObj\fR;
this returns a freshly smoked up duplicate of tha original gangsta object
that has \fIrefCount\fR 0.
If tha object aint shared,
the command procedure
.QW "owns"
the object n' can safely modify it directly.
For example, tha followin code appears up in tha command procedure
that implements \fBlinsert\fR.
This procedure modifies tha list object passed ta it up in \fIobjv[1]\fR
by insertin \fIobjc-3\fR freshly smoked up elements before \fIindex\fR.
.PP
.CS
listPtr = objv[1];
if (Tcl_IsShared(listPtr)) {
    listPtr = Tcl_DuplicateObj(listPtr);
}
result = Tcl_ListObjReplace(interp, listPtr, index, 0,
        (objc-3), &(objv[3]));
.CE
.PP
As another example, \fBincr\fRz command procedure
must check whether tha variablez object is shared before
incrementin tha integer up in its internal representation.
If it is shared, it need ta duplicate tha object
in order ta avoid accidentally changin joints up in other data structures.
.SH "SEE ALSO"
Tcl_ConvertToType(3), Tcl_GetIntFromObj(3), Tcl_ListObjAppendElement(3), Tcl_ListObjIndex(3), Tcl_ListObjReplace(3), Tcl_RegisterObjType(3)
.SH KEYWORDS
internal representation, object, object creation, object type, reference counting, strang representation, type conversion
