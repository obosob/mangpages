'\" t
.\"     Title: glCopyImageSubData
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLCOPYIMAGESUBDATA" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glCopyImageSubData \- big-ass up a raw data copy between two images
.SH "C SPECIFICATION"
.HP \w'void\ glCopyImageSubData('u
.BI "void glCopyImageSubData(GLuint\ " "srcName" ", GLenum\ " "srcTarget" ", GLint\ " "srcLevel" ", GLint\ " "srcX" ", GLint\ " "srcY" ", GLint\ " "srcZ" ", GLuint\ " "dstName" ", GLenum\ " "dstTarget" ", GLint\ " "dstLevel" ", GLint\ " "dstX" ", GLint\ " "dstY" ", GLint\ " "dstZ" ", GLsizei\ " "srcWidth" ", GLsizei\ " "srcHeight" ", GLsizei\ " "srcDepth" ");"
.SH "PARAMETERS"
.PP
\fIsrcName\fR
.RS 4
Da name of a texture or renderbuffer object from which ta copy\&.
.RE
.PP
\fIsrcTarget\fR
.RS 4
Da target representin tha namespace of tha source name
\fIsrcName\fR\&.
.RE
.PP
\fIsrcLevel\fR
.RS 4
Da mipmap level ta read from tha source\&.
.RE
.PP
\fIsrcX\fR
.RS 4
Da X coordinizzle of tha left edge of tha souce region ta copy\&.
.RE
.PP
\fIsrcY\fR
.RS 4
Da Y coordinizzle of tha top edge of tha souce region ta copy\&.
.RE
.PP
\fIsrcZ\fR
.RS 4
Da Z coordinizzle of tha near edge of tha souce region ta copy\&.
.RE
.PP
\fIdstName\fR
.RS 4
Da name of a texture or renderbuffer object ta which ta copy\&.
.RE
.PP
\fIdstTarget\fR
.RS 4
Da target representin tha namespace of tha destination name
\fIdstName\fR\&.
.RE
.PP
\fIdstX\fR
.RS 4
Da X coordinizzle of tha left edge of tha destination region\&.
.RE
.PP
\fIdstY\fR
.RS 4
Da Y coordinizzle of tha top edge of tha destination region\&.
.RE
.PP
\fIdstZ\fR
.RS 4
Da Z coordinizzle of tha near edge of tha destination region\&.
.RE
.PP
\fIsrcWidth\fR
.RS 4
Da width of tha region ta be copied\&.
.RE
.PP
\fIsrcHeight\fR
.RS 4
Da height of tha region ta be copied\&.
.RE
.PP
\fIsrcDepth\fR
.RS 4
Da depth of tha region ta be copied\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglCopyImageSubData\fR
may be used ta copy data from one image (i\&.e\&. texture or renderbuffer) ta another\&.
\fBglCopyImageSubData\fR
does not big-ass up general\-purpose conversions like fuckin scaling, resizing, blending, color\-space, or format conversions\&. Well shiiiit, it should be considered ta operate up in a manner similar ta a CPU memcpy\&. CopyImageSubData can copy between images wit different internal formats, provided tha formats is compatible\&.
.PP
\fBglCopyImageSubData\fR
also allows copyin between certain typez of compressed n' uncompressed internal formats\&. This copy do not big-ass up on\-the\-fly compression or decompression\&. When copyin from a uncompressed internal format ta a cold-ass lil compressed internal format, each texel of uncompressed data becomes a single block of compressed data\&. When copyin from a cold-ass lil compressed internal format ta a uncompressed internal format, a funky-ass block of compressed data becomes a single texel of uncompressed data\&. Da texel size of tha uncompressed format must be tha same size tha block size of tha compressed formats\&. Thus it is permitted ta copy between a 128\-bit uncompressed format n' a cold-ass lil compressed format which uses 8\-bit 4x4 blocks, or between a 64\-bit uncompressed format n' a cold-ass lil compressed format which uses 4\-bit 4x4 blocks\&.
.PP
Da source object is identified by
\fIsrcName\fR
and
\fIsrcTarget\fR
and tha destination object is identified by
\fIdstName\fR
and
\fIdstTarget\fR\&. Da interpretation of tha name dependz on tha value of tha corresponding
\fItarget\fR
parameter\&. If
\fItarget\fR
is
\fBGL_RENDERBUFFER\fR, tha name is interpreted as tha name of a renderbuffer object\&. If tha target parameta be a texture target, tha name is interpreted as a texture object\& fo' realz. All non\-proxy texture targets is accepted, wit tha exception of
\fBGL_TEXTURE_BUFFER\fR
and tha cubemap grill selectors\&.
.PP
\fIsrcLevel\fR
and
\fIdstLevel\fR
identify tha source n' destination level of detail\&. For textures, dis must be a valid level of detail up in tha texture object\&. For renderbuffers, dis value must be zero\&.
.PP
\fIsrcX\fR,
\fIsrcY\fR, and
\fIsrcZ\fR
specify tha lower left texel coordinatez of a
\fIsrcWidth\fR\-wide by
\fIsrcHeight\fR\-high by
\fIsrcDepth\fR\-deep rectangular subregion of tha source texel array\&. Right back up in yo muthafuckin ass. Similarly,
\fIdstX\fR,
\fIdstY\fR
and
\fIdstZ\fR
specify tha coordinatez of a subregion of tha destination texel array\&. Da source n' destination subregions must be contained entirely within tha specified level of tha correspondin image objects\&.
.PP
Da dimensions is always specified up in texels, even fo' compressed texture formats\&. But fuck dat shiznit yo, tha word on tha street is dat it should be noted dat if only one of tha source n' destination textures is compressed then tha number of texels touched up in tha compressed image is ghon be a gangbangin' factor of tha block size larger than up in tha uncompressed image\&.
.PP
Slicez of a
\fBGL_TEXTURE_1D_ARRAY\fR,
\fBGL_TEXTURE_2D_ARRAY\fR,
\fBGL_TEXTURE_CUBE_MAP_ARRAY\fR\fBGL_TEXTURE_3D\fR
and faces of
\fBGL_TEXTURE_CUBE_MAP\fR
are all compatible provided they share a cold-ass lil compatible internal format, n' multiple slices or faces may be copied between these objects wit a single call by specifyin tha startin slice with
\fIsrcZ\fR
and
\fIdstZ\fR, n' tha number of slices ta be copied with
\fIsrcDepth\fR\&. Cubemap textures always have six faces which is selected by a zero\-based grill index\&.
.PP
For tha purposez of CopyImageSubData, two internal formats is considered compatible if any of tha followin conditions is met: * tha formats is tha same, * tha formats is considered compatible accordin ta tha compatibilitizzle rulez used fo' texture views as defined up in section 3\&.9\&.X\&. In particular, if both internal formats is listed up in tha same entry of Table 3\&.X\&.2, they is considered compatible, or * one format is compressed n' tha other is uncompressed n' Table 4\&.X\&.1 lists tha two formats up in tha same row\&. If tha formats is not compatible INVALID_OPERATION is generated\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Sized Internal Formats
.TS
allbox tab(:);
lB lB lB.
T{
\fB
            Texel / Block Size
            \fR
T}:T{
\fB
            Uncompressed Internal Format
            \fR
T}:T{
\fB
            Compressed Internal Format(s)
            \fR
T}
.T&
l l l
l l l.
T{
64\-bit
T}:T{
\fBGL_RGBA32UI\fR, \fBGL_RGBA32I\fR, \fBGL_RGBA32F\fR
T}:T{
\fBGL_COMPRESSED_RGBA_S3TC_DXT3_EXT\fR,
                   \fBGL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\fR,
                   \fBGL_COMPRESSED_RGBA_S3TC_DXT5_EXT\fR,
                   \fBGL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\fR,
                   \fBGL_COMPRESSED_RG_RGTC2\fR,
                   \fBGL_COMPRESSED_SIGNED_RG_RGTC2\fR,
                   \fBGL_COMPRESSED_RGBA_BPTC_UNORM\fR,
                   \fBGL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM\fR,
                   \fBGL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT\fR,
                   \fBGL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT\fR
T}
T{
128\-bit
T}:T{
\fBGL_RGBA16UI\fR,
                   \fBGL_RGBA16I\fR,
                   \fBGL_RGBA16F\fR,
                   \fBGL_RG32F\fR,
                   \fBGL_RG32UI\fR,
                   \fBGL_RG32I\fR,
                   \fBGL_RGBA16\fR,
                   \fBGL_RGBA16_SNORM\fR
T}:T{
\fBGL_COMPRESSED_RGB_S3TC_DXT1_EXT\fR,
                   \fBCOMPRESSED_SRGB_S3TC_DXT1_EXT\fR,
                   \fBCOMPRESSED_RGBA_S3TC_DXT1_EXT\fR,
                   \fBCOMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\fR,
                   \fBCOMPRESSED_RED_RGTC1\fR,
                   \fBCOMPRESSED_SIGNED_RED_RGTC1\fR
T}
.TE
.sp 1
.SH "ERRORS"
.PP
\fBGL_INVALID_OPERATION\fR
is generated if tha texel size of tha uncompressed image aint equal ta tha block size of tha compressed image\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if either target parameta is not
\fBGL_RENDERBUFFER\fR, a valid non\-proxy texture target other than
\fBGL_TEXTURE_BUFFER\fR, or is one of tha cubemap grill selectors\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
does not match tha type of tha object\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if either object be a texture n' tha texture aint complete\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if tha source n' destination internal formats is not compatible, or if tha number of samplez do not match\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if either name do not correspond ta a valid renderbuffer or texture object accordin ta tha correspondin target parameter\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if tha specified level of either tha source or destination aint a valid level fo' tha correspondin image\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if tha dimensionz of tha either subregion exceedz tha boundariez of tha correspondin image object, or if tha image format is compressed n' tha dimensionz of tha subregion fail ta hook up tha alignment constraintz of tha format\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_COMPUTE_WORK_GROUP_COUNT\fR
.SH "SEE ALSO"
.PP
\fBglDispatchComputeIndirect\fR()\&.
.SH "COPYRIGHT"
.PP
Copyright
\(co
2012 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
