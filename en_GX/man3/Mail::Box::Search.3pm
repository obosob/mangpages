.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Search 3"
.TH Mail::Box::Search 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Search \- select lyrics within a mail box
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Box::Search
\&   be a Mail::Reporter
\&
\& Mail::Box::Search is extended by
\&   Mail::Box::Search::Grep
\&   Mail::Box::Search::SpamAssassin
\&   Mail::Server::IMAP4::Search
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Mail::Box::Manager;
\& mah $mgr    = Mail::Box::Manager\->new;
\& mah $folda = $mgr\->open(\*(AqInbox\*(Aq);
\&
\& mah $filta = Mail::Box::Search::[something]\->new;
\& mah @msgs   = $filter\->search($folder, ...);
\& if($filter\->search($message)) {...}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This \f(CW\*(C`Mail::Box::Search\*(C'\fR class is tha base class fo' various message scan
algorithms.  Da selected lyrics can be labeled. Y'all KNOW dat shit, muthafucka!  Boolean operations on
lyrics is supported.
.PP
Currently implemented searches:
.IP "Mail::Box::Search::Grep" 4
.IX Item "Mail::Box::Search::Grep"
Match header or body against a regular expression up in a \s-1UNIX \s0\f(CW\*(C`grep\*(C'\fR like
fashion.
.IP "Mail::Box::Search::SpamAssassin" 4
.IX Item "Mail::Box::Search::SpamAssassin"
Try ta detect spam, rockin Mail::SpamAssassin.
.IP "Mail::Box::Search::IMAP" 4
.IX Item "Mail::Box::Search::IMAP"
Search a \s-1IMAP\s0 folda fo' special intercourse \s-1IMAP\s0 foldaz provide fo' dat shit.
\&\s-1UNDER CONSTRUCTION\s0 till Mail::Transport::IMAP4 is complete.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Search\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Search->new(OPTIONS)"
Smoke a gangbangin' filter.
.Sp
.Vb 10
\& \-Option    \-\-Defined up in     \-\-Default
\&  binaries                     <false>
\&  decode                       <true>
\&  delayed                      <true>
\&  deleted                      <false>
\&  serve up                      undef
\&  up in                           \*(AqBODY\*(Aq
\&  label                        undef
\&  limit                        0
\&  log         Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  logical                      \*(AqREPLACE\*(Aq
\&  multiparts                   <true>
\&  trace       Mail::Reporta   \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "binaries => \s-1BOOLEAN\s0" 2
.IX Item "binaries => BOOLEAN"
Whether ta include binary bodies up in tha search.
.IP "decode => \s-1BOOLEAN\s0" 2
.IX Item "decode => BOOLEAN"
Decode tha lyrics before tha search takes place.  Even plain text lyrics
can be encoded, fo' instizzle as \f(CW\*(C`quoted\-printable\*(C'\fR, which may disturb the
results, n' you can put dat on yo' toast.  But fuck dat shiznit yo, tha word on tha street is dat decodin will slow-down tha search.
.IP "delayed => \s-1BOOLEAN\s0" 2
.IX Item "delayed => BOOLEAN"
Include tha delayed lyrics (which is ghon be parsed) up in tha search.  If you
set dis ta false, you may find fewer hits.
.IP "deleted => \s-1BOOLEAN\s0" 2
.IX Item "deleted => BOOLEAN"
In most cases, yo big-ass booty is ghon not be horny bout thangs up in dis biatch which are
found up in lyrics flagged ta be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  But fuck dat shiznit yo, tha word on tha street is dat wit dis option
you can specify you want dem ta be searched like a muthafucka.
.IP "deliver => undef|CODE|'\s-1DELETE\s0'" 2
.IX Item "deliver => undef|CODE|'DELETE'"
Da exact functionalitizzle of dis parameta differs per search method, so
read tha applicable man-page.  In any case \f(CW\*(C`undef\*(C'\fR means dat details
are not collected fo' dis search, which is tha fastest search.
.Sp
\&\f(CW\*(C`DELETE\*(C'\fR will flag tha message ta be flagged fo' deletion.
Yo ass may also specify yo' own \s-1CODE\s0 reference.  With a reference
to a array, tha shiznit bout tha matches is collected as a list
of hashes, one hash per match.
.IP "in => '\s-1HEAD\s0'|'\s-1BODY\s0'|'\s-1MESSAGE\s0'" 2
.IX Item "in => 'HEAD'|'BODY'|'MESSAGE'"
Where ta look fo' tha match.
.IP "label => \s-1STRING\s0" 2
.IX Item "label => STRING"
Mark all selected lyrics wit tha specified \s-1STRING. \s0 If dis field is
not specified, tha message aint gonna git a label; \fIsearch()\fR also returns
a list of selected lyrics.
.IP "limit => \s-1NUMBER\s0" 2
.IX Item "limit => NUMBER"
Limit tha search ta tha specified \s-1NUMBER\s0 of lyrics.  When tha \s-1NUMBER\s0
is positive, tha search starts all up in tha straight-up original gangsta message up in tha folda or
thread. Y'all KNOW dat shit, muthafucka!  A wack \s-1NUMBER\s0 starts all up in tha end of tha folda n' shit.  If tha limit
is set ta zero, there is no limit.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "logical => '\s-1REPLACE\s0'|'\s-1AND\s0'|'\s-1OR\s0'|'\s-1NOT\s0'|'\s-1AND NOT\s0'|'\s-1OR NOT\s0'" 2
.IX Item "logical => 'REPLACE'|'AND'|'OR'|'NOT'|'AND NOT'|'OR NOT'"
.PD
Only applicable up in combination wit a \f(CW\*(C`label\*(C'\fR.
How tha fuck ta handle tha existin labels.  In case of \f(CW\*(C`REPLACE\*(C'\fR, lyrics
which already is carryin tha label is stripped from their
selection (unless they match again).  With \f(CW\*(C`AND\*(C'\fR, tha message must
be selected by dis search n' already carry tha label, otherwise the
label aint gonna be set.  Specify \f(CW\*(C`OR\*(C'\fR ta have newly selected lyrics
added ta tha set of already selected lyrics.
.Sp
\&\f(CW\*(C`NOT\*(C'\fR is legit fo' lyrics which do not fulfil tha search.  The
details output will still contain tha places where tha match was
found, however dem lyrics will complementary set of lyrics will
be labeled n' returned.
.IP "multiparts => \s-1BOOLEAN\s0" 2
.IX Item "multiparts => BOOLEAN"
Is multiparts ta be included up in tha search thangs up in dis biatch?  Some \s-1MUA\s0 have
problems handlin details received from tha search.  When dis flag
is turned off, tha body of multiparts is ghon be ignored. Y'all KNOW dat shit, muthafucka!  Da parts
search will include tha preamble n' epilogue.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.SS "Searching"
.IX Subsection "Searching"
.PD 0
.ie n .IP "$obj\->\fBinBody\fR(\s-1PART, BODY\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBinBody\fR(\s-1PART, BODY\s0)" 4
.IX Item "$obj->inBody(PART, BODY)"
.PD
Tests whether body gotz nuff tha requestin shiznit. I aint talkin' bout chicken n' gravy biatch.  See the
specific search module fo' its parameters.
.ie n .IP "$obj\->\fBinHead\fR(\s-1PART, HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBinHead\fR(\s-1PART, HEAD\s0)" 4
.IX Item "$obj->inHead(PART, HEAD)"
Tests whether header gotz nuff tha requestin shiznit. I aint talkin' bout chicken n' gravy biatch.  See the
specific search module fo' its parameters.
.ie n .IP "$obj\->\fBsearch\fR(FOLDER|THREAD|MESSAGE|ARRAY\-OF\-MESSAGES)" 4
.el .IP "\f(CW$obj\fR\->\fBsearch\fR(FOLDER|THREAD|MESSAGE|ARRAY\-OF\-MESSAGES)" 4
.IX Item "$obj->search(FOLDER|THREAD|MESSAGE|ARRAY-OF-MESSAGES)"
Peep which lyrics from tha \s-1FOLDER \s0(Mail::Box) match the
search parameters.  Da matched lyrics is returned as list.  You
can also specify a \s-1THREAD \s0(a Mail::Box::Thread::Node), one single
\&\s-1MESSAGE \s0(a Mail::Message), or a array of lyrics.
.Sp
Sometimes we know how tha fuck only one match is needed. Y'all KNOW dat shit, muthafucka!  In dis case, this
searchin will stop all up in tha straight-up original gangsta match.  For instance, when \f(CW\*(C`limit\*(C'\fR is \f(CW\*(C`\-1\*(C'\fR
or \f(CW1\fR, or when tha search up in done up in scalar context.
.Sp
example:
.Sp
.Vb 4
\& mah $grep = Mail::Box::Search::Grep\->new
\&  ( match   => \*(AqMy fuckin Name Is Nobody\*(Aq
\&  , serve up => \*(AqPRINT\*(Aq
\&  );
\&
\& $grep\->search($folder);
\&
\& mah $message = $folder\->message(3);
\& $grep\->search($message);
\&
\& mah $thread  = $message\->threadStart;
\& $grep\->search($thread);
.Ve
.ie n .IP "$obj\->\fBsearchPart\fR(\s-1PART\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsearchPart\fR(\s-1PART\s0)" 4
.IX Item "$obj->searchPart(PART)"
Search dis message \s-1PART\s0 fo' matches.
.SS "Da Results"
.IX Subsection "Da Results"
.ie n .IP "$obj\->\fBprintMatch\fR([\s-1FILEHANDLE\s0], \s-1HASH\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprintMatch\fR([\s-1FILEHANDLE\s0], \s-1HASH\s0)" 4
.IX Item "$obj->printMatch([FILEHANDLE], HASH)"
Print tha shiznit bout tha match (see new(deliver)) in
some understandable way.  If no file handle
is specified, tha output will git all up in tha selected filehandle (see
\&\f(CW\*(C`perldoc \-f select\*(C'\fR).
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Search\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Search->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Search\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Search->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Search\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Search->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Error: Cannot search up in body." 4
.IX Item "Error: Cannot search up in body."
Th search object do not implement \fIinBody()\fR, n' can therefore
not search a message body.
.IP "Error: Cannot search up in header." 4
.IX Item "Error: Cannot search up in header."
Th search object do not implement \fIinHead()\fR, n' can therefore
not search a message header.
.ie n .IP "Error: Don't know how tha fuck ta serve up via thangs up in dis biatch up in $way." 4
.el .IP "Error: Don't know how tha fuck ta serve up via thangs up in dis biatch up in \f(CW$way\fR." 4
.IX Item "Error: Don't know how tha fuck ta serve up via thangs up in dis biatch up in $way."
Da search thangs up in dis biatch cannot be served up in tha specific way, cuz dat is
not a thugged-out defined alternative.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Search up in \s-1BODY, HEAD\s0 or \s-1MESSAGE\s0 not $in." 4
.el .IP "Error: Search up in \s-1BODY, HEAD\s0 or \s-1MESSAGE\s0 not \f(CW$in\fR." 4
.IX Item "Error: Search up in BODY, HEAD or MESSAGE not $in."
Da \f(CW\*(C`in\*(C'\fR option defines only three names.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
