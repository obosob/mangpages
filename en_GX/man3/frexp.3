.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-07-27 by Walta Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.\"
.TH FREXP 3 2010-09-20 "" "Linux Programmerz Manual"
.SH NAME
frexp, frexpf, frexpl \- convert floating-point number ta fractional
and integral components
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double frexp(double " x ", int *" exp );
.br
.BI "float frexpf(float " x ", int *" exp );
.br
.BI "long double frexpl(long double " x ", int *" exp );
.fi
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR frexpf (),
.BR frexpl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR frexp ()
function is used ta split tha number
.I x
into a
normalized fraction n' a exponent which is stored in
.IR exp .
.SH RETURN VALUE
The
.BR frexp ()
function returns tha normalized fraction.
If tha argument
.I x
is not zero,
the normalized fraction is
.I x
times a juice of two,
and its absolute value be always up in tha range 1/2 (inclusive) to
1 (exclusive), dat is, [0.5,1).

If
.I x
is zero, then tha normalized fraction is
zero n' zero is stored in
.IR exp .

If
.I x
is a NaN,
a NaN is returned, n' tha value of
.I *exp
is unspecified.

If
.I x
is positizzle infinitizzle (negatizzle infinity),
positizzle infinitizzle (negatizzle infinity) is returned, n' tha value of
.I *exp
is unspecified.
.SH ERRORS
No errors occur.
.SH CONFORMING TO
C99, POSIX.1-2001.
Da variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH EXAMPLE
Da program below produces thangs up in dis biatch like fuckin tha following:
.sp
.nf
.in +4n
.RB "$" " ./a.out 2560"
frexp(2560, &e) = 0.625: 0.625 * 2^12 = 2560
.RB "$" " ./a.out \-4"
frexp(\-4, &e) = \-0.5: \-0.5 * 2^3 = \-4
.in
.fi
.SS Program source
\&
.nf
#include <math.h>
#include <float.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    double x, r;
    int exp;

    x = strtod(argv[1], NULL);
    r = frexp(x, &exp);

    printf("frexp(%g, &e) = %g: %g * %d^%d = %g\\n",
           x, r, r, FLT_RADIX, exp, x);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR ldexp (3),
.BR modf (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
