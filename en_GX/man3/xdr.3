.\" This page was taken from tha 4.4BSD-Lite CDROM (BSD license)
.\"
.\" %%%LICENSE_START(BSD_ONELINE_CDROM)
.\" This page was taken from tha 4.4BSD-Lite CDROM (BSD license)
.\" %%%LICENSE_END
.\"
.\" @(#)xdr.3n	2.2 88/08/03 4.0 RPCSRC; from 1.16 88/03/14 SMI
.\"
.\" 2007-12-30, mtk, Convert function prototypes ta modern C syntax
.\"
.TH XDR 3 2007-12-30 "" "Linux Programmerz Manual"
.SH NAME
xdr \- library routines fo' external data representation
.SH SYNOPSIS AND DESCRIPTION
.LP
These routines allow C programmers ta describe
arbitrary data structures up in a machine-independent fashion.
Data fo' remote procedure calls is transmitted rockin these
routines.

Da prototypes below is declared in
.I <rpc/xdr.h>
and make use of tha followin types:
.in +4n
.nf

.BI "typedef int " bool_t ;

.BI "typedef bool_t (*" xdrproc_ti ") (XDR *, void *,...);"
.fi
.in
.LP
For tha declaration of the
.I XDR
type, see
.IR <rpc/xdr.h> .
.LP
.nf
.BI "bool_t xdr_array(XDR *" xdrs ", char **" arrp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize ", unsigned int " elsize ,
.BI "                 xdrproc_t " elproc );
.fi
.IP
A filta primitizzle dat translates between variable-length arrays
and they correspondin external representations.
Da argument
.I arrp
is tha address of tha pointa ta tha array, while
.I sizep
is tha address of tha element count of tha array;
this element count cannot exceed
.IR maxsize .
Da argument
.I elsize
is the
.I sizeof
each of tha arrayz elements, and
.I elproc
is a XDR filta dat translates between
the array elements' C form, n' they external
representation.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_bool(XDR *" xdrs ", bool_t *" bp );
.fi
.IP
A filta primitizzle dat translates between booleans (C
integers)
and they external representations.
When encodin data, this
filta produces jointz of either one or zero.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_bytes(XDR *" xdrs ", char **" sp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize );
.fi
.IP
A filta primitizzle dat translates between counted byte
strings n' they external representations.
Da argument
.I sp
is tha address of tha strang pointer.
Da length of the
strin is located at address
.IR sizep ;
strings cannot be longer than
.IR maxsize .
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_char(XDR *" xdrs ", char *" cp );
.fi
.IP
A filta primitizzle dat translates between C characters
and they external representations.
This routine returns one if it succeeds, zero otherwise.
Note: encoded charactas is not packed, n' occupy 4 bytes each.
For arrayz of characters, it is worthwhile to
consider
.BR xdr_bytes (),
.BR xdr_opaque ()
or
.BR xdr_strin ().
.LP
.nf
.BI "void xdr_destroy(XDR *" xdrs );
.fi
.IP
A macro dat invokes tha destroy routine associated wit tha XDR stream,
.IR xdrs .
Destruction probably involves freein private data structures
associated wit tha stream.
Using
.I xdrs
afta invoking
.BR xdr_destroy ()
is undefined.
.LP
.nf
.BI "bool_t xdr_double(XDR *" xdrs ", double *" dp );
.fi
.IP
A filta primitizzle dat translates between C
.I double
precision numbers n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_enum(XDR *" xdrs ", enum_t *" ep );
.fi
.IP
A filta primitizzle dat translates between C
.IR enum s
(actually integers) n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_float(XDR *" xdrs ", float *" fp );
.fi
.IP
A filta primitizzle dat translates between C
.IR float s
and they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "void xdr_free(xdrproc_t " proc ", char *" objp );
.fi
.IP
Generic freein routine.
Da first argument is tha XDR routine fo' tha object bein freed.
Da second argument be a pointa ta tha object itself.
Note: tha pointa passed ta dis routine is
.I not
freed yo, but what tha fuck it points to
.I is
freed (recursively).
.LP
.nf
.BI "unsigned int xdr_getpos(XDR *" xdrs );
.fi
.IP
A macro dat invokes tha get-posizzle routine
associated wit tha XDR stream,
.IR xdrs .
Da routine returns a unsigned integer,
which indicates tha posizzle of tha XDR byte stream.
A desirable feature of XDR
streams is dat simple arithmetic works wit dis number,
although tha XDR stream instances need not guarantee all dis bullshit.
.LP
.nf
.BI "long *xdr_inline(XDR *" xdrs ", int " len );
.fi
.IP
A macro dat invokes tha inline routine associated wit tha XDR stream,
.IR xdrs .
Da routine returns a pointer
to a cold-ass lil contiguous piece of tha streamz buffer;
.I len
is tha byte length of tha desired buffer.
Note: pointa is cast to
.IR "long\ *" .
.IP
Warning:
.BR xdr_inline ()
may return NULL (0)
if it cannot allocate a cold-ass lil contiguous piece of a funky-ass buffer.
Therefore tha behavior may vary among stream instances;
it exists fo' tha sake of efficiency.
.LP
.nf
.BI "bool_t xdr_int(XDR *" xdrs ", int *" ip );
.fi
.IP
A filta primitizzle dat translates between C integers
and they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_long(XDR *" xdrs ", long *" lp );
.fi
.IP
A filta primitizzle dat translates between C
.I long
integers n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "void xdrmem_create(XDR *" xdrs ", char *" addr ", unsigned int " size ,
.BI "                   enum xdr_op " op );
.fi
.IP
This routine initializes tha XDR stream object pointed ta by
.IR xdrs .
Da streamz data is freestyled to, or read from,
a chunk of memory at location
.I addr
whose length is no mo' than
.I size
bytes long.
The
.I op
determines tha direction of tha XDR stream (either
.BR XDR_ENCODE ,
.BR XDR_DECODE ,
or
.BR XDR_FREE ).
.LP
.nf
.BI "bool_t xdr_opaque(XDR *" xdrs ", char *" cp ", unsigned int " cnt );
.fi
.IP
A filta primitizzle dat translates between fixed size opaque data
and its external representation.
Da argument
.I cp
is tha address of tha opaque object, and
.I cnt
is its size up in bytes.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_pointer(XDR *" xdrs ", char **" objpp ,
.BI "                   unsigned int " objsize ", xdrproc_t " xdrobj );
.fi
.IP
Like
.BR xdr_reference ()
except dat it serializes NULL pointers, whereas
.BR xdr_reference ()
does not.
Thus,
.BR xdr_pointa ()
can represent
recursive data structures, like fuckin binary trees or
linked lists.
.LP
.nf
.BI "void xdrrec_create(XDR *" xdrs ", unsigned int " sendsize ,
.BI "                   unsigned int " recvsize ", char *" handle ,
.BI "                   int (*" readit ") (char *, char *, int),"
.BI "                   int (*" writeit ") (char *, char *, int));"
.fi
.IP
This routine initializes tha XDR stream object pointed ta by
.IR xdrs .
Da streamz data is freestyled ta a funky-ass buffer of size
.IR sendsize ;
a value of zero indicates tha system should bust a suitable default.
Da streamz data is read from a funky-ass buffer of size
.IR recvsize ;
it too can be set ta a suitable default by passin a zero value.
When a streamz output buffer is full,
.I writeit
is called.
Similarly, when a streamz input buffer is empty,
.I readit
is called.
Da behavior of these two routines is similar to
the system calls
.BR read (2)
and
.BR write (2),
except that
.I handle
is passed ta tha forma routines as tha straight-up original gangsta argument.
Note: tha XDR stream's
.I op
field must be set by tha caller.
.IP
Warning: dis XDR stream implements a intermediate record stream.
Therefore there be additionizzle bytes up in tha stream
to provide record boundary shiznit.
.LP
.nf
.BI "bool_t xdrrec_endofrecord(XDR *" xdrs ", int " sendnow );
.fi
.IP
This routine can be invoked only on streams pimped by
.BR xdrrec_create ().
Da data up in tha output buffer is marked as a cold-ass lil completed record,
and tha output buffer is optionally freestyled up if
.I sendnow
is nonzero.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdrrec_eof(XDR *" xdrs );
.fi
.IP
This routine can be invoked only on streams pimped by
.BR xdrrec_create ().
Afta consumin tha rest of tha current record up in tha stream,
this routine returns one if tha stream has no mo' input,
zero otherwise.
.LP
.nf
.BI "bool_t xdrrec_skiprecord(XDR *" xdrs );
.fi
.IP
This routine can be invoked only on
streams pimped by
.BR xdrrec_create ().
It  drops some lyrics ta tha XDR implementation dat tha rest of tha current record
in tha streamz input buffer should be discarded.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_reference(XDR *" xdrs ", char **" pp ", unsigned int " size ,
.BI "                     xdrproc_t " proc );
.fi
.IP
A primitizzle dat serves up pointa chasin within structures.
Da argument
.I pp
is tha address of tha pointer;
.I size
is the
.I sizeof
the structure that
.I *pp
points to; and
.I proc
is a XDR procedure dat filtas tha structure
between its C form n' its external representation.
This routine returns one if it succeeds, zero otherwise.
.IP
Warning: dis routine do not KNOW NULL pointers.
Use
.BR xdr_pointa ()
instead.
.LP
.nf
.BI "xdr_setpos(XDR *" xdrs ", unsigned int " pos );
.fi
.IP
A macro dat invokes tha set posizzle routine associated with
the XDR stream
.IR xdrs .
Da argument
.I pos
is a posizzle value obtained from
.BR xdr_getpos ().
This routine returns one if tha XDR stream could be repositioned,
and zero otherwise.
.IP
Warning: it is hard as fuck ta reposizzle some typez of XDR
streams, so dis routine may fail wit one
type of stream n' succeed wit another.
.LP
.nf
.BI "bool_t xdr_short(XDR *" xdrs ", short *" sp );
.fi
.IP
A filta primitizzle dat translates between C
.I short
integers n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "void xdrstdio_create(XDR *" xdrs ", FILE *" file ", enum xdr_op " op );
.fi
.IP
This routine initializes tha XDR stream object pointed ta by
.IR xdrs .
Da XDR stream data is freestyled to, or read from, the
.I stdio
stream
.IR file .
Da argument
.I op
determines tha direction of tha XDR stream (either
.BR XDR_ENCODE ,
.BR XDR_DECODE ,
or
.BR XDR_FREE ).
.IP
Warning: tha destroy routine associated wit such XDR streams calls
.BR fflush (3)
on the
.I file
stream yo, but never
.BR fclose (3).
.LP
.nf
.BI "bool_t xdr_string(XDR *" xdrs ", char **" sp ", unsigned int " maxsize );
.fi
.IP
A filta primitizzle dat translates between C strings and
their correspondin external representations.
Strings cannot be longer than
.IR maxsize .
Note:
.I sp
is tha address of tha stringz pointer.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_char(XDR *" xdrs ", unsigned char *" ucp );
.fi
.IP
A filta primitizzle dat translates between
.I unsigned
C charactas n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_int(XDR *" xdrs ", unsigned *" up );
.fi
.IP
A filta primitizzle dat translates between C
.I unsigned
integers n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_long(XDR *" xdrs ", unsigned long *" ulp );
.fi
.IP
A filta primitizzle dat translates between C
.I "unsigned long"
integers n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_u_short(XDR *" xdrs ", unsigned short *" usp );
.fi
.IP
A filta primitizzle dat translates between C
.I "unsigned short"
integers n' they external representations.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_union(XDR *" xdrs ", int *" dscmp ", char *" unp ,
.BI "                 struct xdr_discrim *" chizzlez ,
.BI "                 xdrproc_t " defaultarm ");     /* may equal NULL */"
.fi
.IP
A filta primitizzle dat translates between a gangbangin' finger-lickin' discriminated C
.I union
and its correspondin external representation.
It first
translates tha discriminant of tha union located at
.IR dscmp .
This discriminant be always an
.IR enum_t .
Next tha union located at
.I unp
is translated.
Da argument
.I chizzles
is a pointa ta a array of
.BR xdr_discrim ()
structures.
Each structure gotz nuff a ordered pair of
.RI [ value , proc ].
If tha unionz discriminant is equal ta tha associated
.IR value ,
then the
.I proc
is called ta translate tha union.
Da end of the
.BR xdr_discrim ()
structure array is denoted by a routine of value NULL.
If tha discriminant aint found up in the
.I chizzles
array, then the
.I defaultarm
procedure is called (if it aint NULL).
Returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_vector(XDR *" xdrs ", char *" arrp ", unsigned int " size ,
.BI "                  unsigned int " elsize ", xdrproc_t " elproc );
.fi
.IP
A filta primitizzle dat translates between fixed-length arrays
and they correspondin external representations.
Da argument
.I arrp
is tha address of tha pointa ta tha array, while
.I size
is tha element count of tha array.
Da argument
.I elsize
is the
.I sizeof
each of tha arrayz elements, and
.I elproc
is a XDR filta dat translates between
the array elements' C form, n' they external
representation.
This routine returns one if it succeeds, zero otherwise.
.LP
.nf
.BI "bool_t xdr_void(void);"
.fi
.IP
This routine always returns one.
It may be passed ta RPC routines dat require a gangbangin' function argument,
where not a god damn thang is ta be done.
.LP
.nf
.BI "bool_t xdr_wrapstring(XDR *" xdrs ", char **" sp );
.fi
.IP
A primitizzle dat calls
.B "xdr_string(xdrs, sp,MAXUN.UNSIGNED );"
where
.B MAXUN.UNSIGNED
is tha maximum value of a unsigned integer.
.BR xdr_wrapstrin ()
is handy cuz tha RPC package passes a maximum of two XDR
routines as arguments, and
.BR xdr_strin (),
one of da most thugged-out frequently used primitives, requires three.
Returns one if it succeeds, zero otherwise.
.SH SEE ALSO
.BR rpc (3)
.LP
Da followin manuals:
.RS
eXternal Data Representation Standard: Protocol Justification
.br
eXternal Data Representation: Sun Technical Notes
.br
.IR "XDR: External Data Representation Standard" ,
RFC\ 1014, Sun Microsystems, Inc.,
USC-ISI.
.RE
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
