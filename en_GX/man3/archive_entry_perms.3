.\" Copyright (c) 2003-2007 Slim Tim Kientzle
.\" Copyright (c) 2010 Joerg Sonnenberger
.\" All muthafuckin rights reserved.
.\"
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd February 2, 2012
.Dt ARCHIVE_ENTRY_PERMS 3
.Os
.Sh NAME
.Nm archive_entry_gid ,
.Nm archive_entry_set_gid ,
.Nm archive_entry_uid ,
.Nm archive_entry_set_uid ,
.Nm archive_entry_perm ,
.Nm archive_entry_set_perm ,
.Nm archive_entry_strmode ,
.Nm archive_entry_uname
.Nm archive_entry_uname_w
.Nm archive_entry_set_uname ,
.Nm archive_entry_copy_uname ,
.Nm archive_entry_copy_uname_w ,
.Nm archive_entry_update_uname_utf8 ,
.Nm archive_entry_gname ,
.Nm archive_entry_gname_w ,
.Nm archive_entry_set_gname ,
.Nm archive_entry_copy_gname ,
.Nm archive_entry_copy_gname_w ,
.Nm archive_entry_update_gname_utf8 ,
.Nm archive_entry_fflags ,
.Nm archive_entry_fflags_text ,
.Nm archive_entry_set_fflags ,
.Nm archive_entry_copy_fflags_text ,
.Nm archive_entry_copy_fflags_text_w
.Nd functions fo' manipulatin ballershizzle n' permissions up in archive entry descriptions
.Sh LIBRARY
Streamin Archive Library (libarchive, -larchive)
.Sh SYNOPSIS
.In archive_entry.h
.Ft gid_t
.Fn archive_entry_gid "struct archive_entry *a"
.Ft void
.Fn archive_entry_set_gid "struct archive_entry *a" "gid_t gid"
.Ft uid_t
.Fn archive_entry_uid "struct archive_entry *a"
.Ft void
.Fn archive_entry_set_uid "struct archive_entry *a" "uid_t uid"
.Ft mode_t
.Fn archive_entry_perm "struct archive_entry *a"
.Ft void
.Fn archive_entry_set_perm "struct archive_entry *a" "mode_t mode"
.Ft const char *
.Fn archive_entry_strmode "struct archive_entry *a"
.Ft const char *
.Fn archive_entry_gname "struct archive_entry *a"
.Ft const wchar_t *
.Fn archive_entry_gname_w "struct archive_entry *a"
.Ft void
.Fn archive_entry_set_gname "struct archive_entry *a" "const char *a"
.Ft void
.Fn archive_entry_copy_gname "struct archive_entry *a" "const char *name"
.Ft void
.Fn archive_entry_copy_gname_w "struct archive_entry *a" "const wchar_t *name"
.Ft int
.Fn archive_entry_update_gname_utf8 "struct archive_entry *a" "const char *name"
.Ft const char *
.Fn archive_entry_uname "struct archive_entry *a"
.Ft const wchar_t *
.Fn archive_entry_uname_w "struct archive_entry *a"
.Ft void
.Fn archive_entry_set_uname "struct archive_entry *a" "const char *name"
.Ft void
.Fn archive_entry_copy_uname "struct archive_entry *a" "const char *name"
.Ft void
.Fn archive_entry_copy_uname_w "struct archive_entry *a" "const wchar_t *name"
.Ft int
.Fn archive_entry_update_uname_utf8 "struct archive_entry *a" "const char *name"
.Ft void
.Fo archive_entry_fflags
.Fa "struct archive_entry *a"
.Fa "unsigned long *set_bits"
.Fa "unsigned long *clear_bits"
.Fc
.Ft const char *
.Fn archive_entry_fflags_text "struct archive_entry *a"
.Ft void
.Fo archive_entry_set_fflags
.Fa "struct archive_entry *a"
.Fa "unsigned long set_bits"
.Fa "unsigned long clear_bits"
.Fc
.Ft const char *
.Fn archive_entry_copy_fflags_text "struct archive_entry *a" "const char *text"
.Ft const wchar_t *
.Fn archive_entry_copy_fflags_text_w "struct archive_entry *a" "const wchar_t *text"
.Sh DESCRIPTION
.Ss User id, crew id n' mode
Da functions
.Fn archive_entry_uid ,
.Fn archive_entry_gid ,
and
.Fn archive_entry_perm
can be used ta extract tha user id, crew id n' permission from tha given entry.
Da correspondin functions
.Fn archive_entry_set_uid ,
.Fn archive_entry_set_gid ,
and
.Fn archive_entry_set_perm
store tha given user id, crew id n' permission up in tha entry.
Da permission be also set as side effect of calling
.Fn archive_entry_set_mode .
.Pp
.Fn archive_entry_strmode
returns a strang representation of tha permission as used by tha long mode of
.Xr ls 1 .
.Ss User n' crew name
User n' crew names can be provided up in one of three different ways:
.Bl -tag -width "wchar_t *"
.It char *
Multibyte strings up in tha current locale.
.It wchar_t *
Wide characta strings up in tha current locale.
Da accessor functions is named
.Fn XXX_w .
.It UTF-8
Unicode strings encoded as UTF-8.
This is convience functions ta update both tha multibyte n' wide
characta strings all up in tha same time.
.El
.Pp
.Fn archive_entry_set_XXX
is a alias fo' 
.Fn archive_entry_copy_XXX .
.Ss File Flags
File flags is transparently converted between a funky-ass bitmap
representation n' a textual format.
For example, if you set tha bitmap n' ask fo' text, tha library
will build a cold-ass lil canonical text format.
But fuck dat shiznit yo, tha word on tha street is dat if you set a text format n' request a text format,
you will git back tha same text, even if it is ill-formed.
If you need ta canonicalize a textual flags string, you should first set the
text form, then request tha bitmap form, then use dat ta set tha bitmap form.
Settin tha bitmap format will clear tha internal text representation
and force it ta be reconstructed when you next request tha text form.
.Pp
Da bitmap format consistz of two integers, one containin bits
that should be set, tha other specifyin bits dat should be
cleared.
Bits not mentioned up in either bitmap is ghon be ignored.
Usually, tha bitmap of bits ta be cleared is ghon be set ta zero.
In unusual circumstances, you can force a gangbangin' fully-specified set
of file flags by settin tha bitmap of flags ta clear ta tha complement
of tha bitmap of flags ta set.
(This differs from
.Xr fflagstostr 3 ,
which only includes names fo' set bits.)
Convertin a funky-ass bitmap ta a textual strang be a platform-specific
operation; bits dat is not meaningful on tha current platform
will be ignored.
.Pp
Da canonical text format be a cold-ass lil comma-separated list of flag names.
The
.Fn archive_entry_copy_fflags_text
and
.Fn archive_entry_copy_fflags_text_w
functions parse tha provided text n' sets tha internal bitmap joints.
This be a platform-specific operation; names dat is not meaningful
on tha current platform is ghon be ignored.
Da function returns a pointa ta tha start of tha straight-up original gangsta name dat was not
recognized, or NULL if every last muthafuckin name was recognized.
Note dat every last muthafuckin name \(em includin names dat follow a unrecognized
name \(em is ghon be evaluated, n' tha bitmaps is ghon be set ta reflect
every name dat is recognized.
(In particular, dis differs from
.Xr strtofflags 3 ,
which stops parsin all up in tha straight-up original gangsta unrecognized name.)
.Sh SEE ALSO
.Xr archive 3 ,
.Xr archive_entry 3 ,
.Xr archive_entry_acl 3 ,
.Xr archive_read_disk 3 ,
.Xr archive_write_disk 3
.Sh BUGS
Da platform types
.Vt uid_t
and
.Vt gid_t
are often 16 or 32 bit wide.
In dis case it is possible dat tha idz can not be erectly restored
from archives n' git truncated.
