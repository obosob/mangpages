" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::moneypunct_byname< _CharT, _Intl > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstd::moneypunct< _CharT, _Intl >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum { \fB_S_minus\fP, \fB_S_zero\fP, \fB_S_end\fP }"
.br
.ti -1c
.RI "typedef __moneypunct_cache
.br
< _CharT, _Intl > \fB__cache_type\fP"
.br
.ti -1c
.RI "typedef _CharT \fBchar_type\fP"
.br
.ti -1c
.RI "enum \fBpart\fP { \fBnone\fP, \fBspace\fP, \fBsymbol\fP, \fBsign\fP, \fBvalue\fP }"
.br
.ti -1c
.RI "typedef \fBbasic_string\fP< _CharT > \fBstring_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmoneypunct_byname\fP (const char *__s, size_t __refs=0)"
.br
.ti -1c
.RI "\fBstring_type\fP \fBcurr_symbol\fP () const "
.br
.ti -1c
.RI "\fBchar_type\fP \fBdecimal_point\fP () const "
.br
.ti -1c
.RI "int \fBfrac_digits\fP () const "
.br
.ti -1c
.RI "\fBstring\fP \fBgrouping\fP () const "
.br
.ti -1c
.RI "\fBstring_type\fP \fBnegative_sign\fP () const "
.br
.ti -1c
.RI "\fBstring_type\fP \fBpositive_sign\fP () const "
.br
.ti -1c
.RI "\fBchar_type\fP \fBthousands_sep\fP () const "
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "pattern \fBpos_format\fP () const "
.br
.ti -1c
.RI "pattern \fBneg_format\fP () const "
.br
.in -1c
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static pattern \fB_S_construct_pattern\fP (char __precedes, char __space, char __posn)  throw ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const char * \fB_S_atoms\fP"
.br
.ti -1c
.RI "static const pattern \fB_S_default_pattern\fP"
.br
.ti -1c
.RI "static \fBlocale::id\fP \fBid\fP"
.br
.ti -1c
.RI "static const bool \fBintl\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_initialize_moneypunct\fP (__c_locale __cloc=0, const char *__name=0)"
.br
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "virtual \fBstring_type\fP \fBdo_curr_symbol\fP () const "
.br
.ti -1c
.RI "virtual \fBchar_type\fP \fBdo_decimal_point\fP () const "
.br
.ti -1c
.RI "virtual int \fBdo_frac_digits\fP () const "
.br
.ti -1c
.RI "virtual \fBstring\fP \fBdo_grouping\fP () const "
.br
.ti -1c
.RI "virtual pattern \fBdo_neg_format\fP () const "
.br
.ti -1c
.RI "virtual \fBstring_type\fP \fBdo_negative_sign\fP () const "
.br
.ti -1c
.RI "virtual pattern \fBdo_pos_format\fP () const "
.br
.ti -1c
.RI "virtual \fBstring_type\fP \fBdo_positive_sign\fP () const "
.br
.ti -1c
.RI "virtual \fBchar_type\fP \fBdo_thousands_sep\fP () const "
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static __c_locale \fB_S_clone_c_locale\fP (__c_locale &__cloc)  throw ()"
.br
.ti -1c
.RI "static void \fB_S_create_c_locale\fP (__c_locale &__cloc, const char *__s, __c_locale __old=0)"
.br
.ti -1c
.RI "static void \fB_S_destroy_c_locale\fP (__c_locale &__cloc)"
.br
.ti -1c
.RI "static __c_locale \fB_S_get_c_locale\fP ()"
.br
.ti -1c
.RI "static const char * \fB_S_get_c_name\fP ()  throw ()"
.br
.ti -1c
.RI "static __c_locale \fB_S_lc_ctype_c_locale\fP (__c_locale __cloc, const char *__s)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT, bool _Intl>class std::moneypunct_byname< _CharT, _Intl >"
class scrillapunct_byname [22\&.2\&.6\&.4]\&. 
.PP
Definizzle at line 1324 of file locale_facets_nonio\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _CharT , bool _Intl> \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::curr_symbol () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return currency symbol string\&. This function returns a string_type ta use as a cold-ass lil currency symbol\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_curr_symbol()\&.
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representin a cold-ass lil currency symbol\&. 
.RE
.PP

.PP
Definizzle at line 1061 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_curr_symbol()\&.
.SS "template<typename _CharT , bool _Intl> \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::decimal_point () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return decimal point character\&. This function returns a cold-ass lil char_type ta use as a thugged-out decimal point\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_decimal_point()\&.
.PP
\fBReturns:\fP
.RS 4
\fIchar_type\fP representin a thugged-out decimal point\&. 
.RE
.PP

.PP
Definizzle at line 1005 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_decimal_point()\&.
.SS "template<typename _CharT , bool _Intl> virtual \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_curr_symbol () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return currency symbol string\&. This function returns a string_type ta use as a cold-ass lil currency symbol\&. This function be a hook fo' derived classes ta chizzle tha value returned\&. 
.PP
\fBSee Also:\fP
.RS 4
curr_symbol() fo' details\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representin a cold-ass lil currency symbol\&. 
.RE
.PP

.PP
Definizzle at line 1207 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::curr_symbol()\&.
.SS "template<typename _CharT , bool _Intl> virtual \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_decimal_point () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return decimal point character\&. Returns a cold-ass lil char_type ta use as a thugged-out decimal point\&. This function be a hook fo' derived classes ta chizzle tha value returned\&.
.PP
\fBReturns:\fP
.RS 4
\fIchar_type\fP representin a thugged-out decimal point\&. 
.RE
.PP

.PP
Definizzle at line 1169 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::decimal_point()\&.
.SS "template<typename _CharT , bool _Intl> virtual int \fBstd::moneypunct\fP< _CharT, _Intl >::do_frac_digits () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return number of digits up in fraction\&. This function returns tha exact number of digits dat make up tha fractionizzle part of a scrilla amount\&. This function be a hook fo' derived classes ta chizzle tha value returned\&. 
.PP
\fBSee Also:\fP
.RS 4
frac_digits() fo' details\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Number of digits up in amount fraction\&. 
.RE
.PP

.PP
Definizzle at line 1247 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::frac_digits()\&.
.SS "template<typename _CharT , bool _Intl> virtual \fBstring\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_groupin () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return groupin justification\&. Returns a strang representin groupings fo' tha integer part of a number\&. This function be a hook fo' derived classes ta chizzle tha value returned\&. 
.PP
\fBSee Also:\fP
.RS 4
grouping() fo' details\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Strin representin groupin justification\&. 
.RE
.PP

.PP
Definizzle at line 1194 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::grouping()\&.
.SS "template<typename _CharT , bool _Intl> virtual pattern \fBstd::moneypunct\fP< _CharT, _Intl >::do_neg_format () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return pattern fo' scrilla joints\&. This function returns a pattern describin tha formattin of a wack valued scrilla amount\&. This function be a hook fo' derived classes ta chizzle tha value returned\&. 
.PP
\fBSee Also:\fP
.RS 4
neg_format() fo' details\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Pattern fo' scrilla joints\&. 
.RE
.PP

.PP
Definizzle at line 1275 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::neg_format()\&.
.SS "template<typename _CharT , bool _Intl> virtual \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_negative_sign () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return wack sign string\&. This function returns a string_type ta use as a sign fo' wack amounts\&. This function be a hook fo' derived classes ta chizzle tha value returned\&. 
.PP
\fBSee Also:\fP
.RS 4
negative_sign() fo' details\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representin a wack sign\&. 
.RE
.PP

.PP
Definizzle at line 1233 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::negative_sign()\&.
.SS "template<typename _CharT , bool _Intl> virtual pattern \fBstd::moneypunct\fP< _CharT, _Intl >::do_pos_format () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return pattern fo' scrilla joints\&. This function returns a pattern describin tha formattin of a positizzle valued scrilla amount\&. This function be a hook fo' derived classes ta chizzle tha value returned\&. 
.PP
\fBSee Also:\fP
.RS 4
pos_format() fo' details\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Pattern fo' scrilla joints\&. 
.RE
.PP

.PP
Definizzle at line 1261 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::pos_format()\&.
.SS "template<typename _CharT , bool _Intl> virtual \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_positive_sign () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return positizzle sign string\&. This function returns a string_type ta use as a sign fo' positizzle amounts\&. This function be a hook fo' derived classes ta chizzle tha value returned\&. 
.PP
\fBSee Also:\fP
.RS 4
positive_sign() fo' details\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representin a positizzle sign\&. 
.RE
.PP

.PP
Definizzle at line 1220 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::positive_sign()\&.
.SS "template<typename _CharT , bool _Intl> virtual \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_thousands_sep () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Return thousandz separator character\&. Returns a cold-ass lil char_type ta use as a thousandz separator\&. This function be a hook fo' derived classes ta chizzle tha value returned\&.
.PP
\fBReturns:\fP
.RS 4
\fIchar_type\fP representin a thousandz separator\&. 
.RE
.PP

.PP
Definizzle at line 1181 of file locale_facets_nonio\&.h\&.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::thousands_sep()\&.
.SS "template<typename _CharT , bool _Intl> int \fBstd::moneypunct\fP< _CharT, _Intl >::frac_digits () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return number of digits up in fraction\&. This function returns tha exact number of digits dat make up tha fractionizzle part of a scrilla amount\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_frac_digits()\&.
.PP
Da fractionizzle part of a scrilla amount is optional\&. But if it is present, there must be frac_digits() digits\&.
.PP
\fBReturns:\fP
.RS 4
Number of digits up in amount fraction\&. 
.RE
.PP

.PP
Definizzle at line 1111 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_frac_digits()\&.
.SS "template<typename _CharT , bool _Intl> \fBstring\fP \fBstd::moneypunct\fP< _CharT, _Intl >::groupin () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return groupin justification\&. This function returns a strang representin groupings fo' tha integer part of a amount\&. Groupings indicate where thousandz separators should be inserted\&.
.PP
Each char up in tha return strang is interpret as a integer rather than a cold-ass lil character\&. These numbers represent tha number of digits up in a group\&. Da first char up in tha strang represents tha number of digits up in tha least dope group\&. If a cold-ass lil char is negative, it indicates a unlimited number of digits fo' tha group\&. If mo' chars from tha strang is required ta crew a number, tha last char is used repeatedly\&.
.PP
For example, if tha grouping() returns \fC\\003\\002\fP n' be applied ta tha number 123456789, dis correspondz ta 12,34,56,789\&. Note dat if tha strang was \fC32\fP, dis would put mo' than 50 digits tha fuck into tha least dope crew if tha characta set is ASCII\&.
.PP
Da strang is returned by callin scrillapunct<char_type>::do_grouping()\&.
.PP
\fBReturns:\fP
.RS 4
strin representin groupin justification\&. 
.RE
.PP

.PP
Definizzle at line 1048 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_grouping()\&.
.SS "template<typename _CharT , bool _Intl> pattern \fBstd::moneypunct\fP< _CharT, _Intl >::neg_format () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return pattern fo' scrilla joints\&. This function returns a pattern describin tha formattin of a positizzle or wack valued scrilla amount\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_pos_format() or scrillapunct<char_type>::do_neg_format()\&.
.PP
Da pattern has 4 fieldz describin tha orderin of symbol, sign, value, n' none or space\&. There must be one of each up in tha pattern\&. Da none n' space enums may not step tha fuck up in tha straight-up original gangsta field n' space may not step tha fuck up in tha final field\&.
.PP
Da partz of a scrilla strang must step tha fuck up in tha order indicated by tha fieldz of tha pattern\&. Da symbol field indicates dat tha value of curr_symbol() may be present\&. Da sign field indicates dat tha value of positive_sign() or negative_sign() must be present\&. Da value field indicates dat tha absolute value of tha scrilla amount is present\&. none indicates 0 or mo' whitespace characters, except all up in tha end, where it permits no whitespace\&. space indicates dat 1 or mo' whitespace charactas must be present\&.
.PP
For example, fo' tha US locale n' pos_format() pattern {symbol,sign,value,none}, curr_symbol() == '$' positive_sign() == '+', n' value 10\&.01, n' options set ta force tha symbol, tha correspondin strang is \fC$+10\&.01\fP\&.
.PP
\fBReturns:\fP
.RS 4
Pattern fo' scrilla joints\&. 
.RE
.PP

.PP
Definizzle at line 1151 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_neg_format()\&.
.SS "template<typename _CharT , bool _Intl> \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::negative_sign () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return wack sign string\&. This function returns a string_type ta use as a sign fo' wack amounts\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_negative_sign()\&.
.PP
If tha return value gotz nuff mo' than one character, tha straight-up original gangsta characta appears up in tha posizzle indicated by neg_format() n' tha remainder step tha fuck up all up in tha end of tha formatted string\&.
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representin a wack sign\&. 
.RE
.PP

.PP
Definizzle at line 1095 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_negative_sign()\&.
.SS "template<typename _CharT , bool _Intl> pattern \fBstd::moneypunct\fP< _CharT, _Intl >::pos_format () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return pattern fo' scrilla joints\&. This function returns a pattern describin tha formattin of a positizzle or wack valued scrilla amount\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_pos_format() or scrillapunct<char_type>::do_neg_format()\&.
.PP
Da pattern has 4 fieldz describin tha orderin of symbol, sign, value, n' none or space\&. There must be one of each up in tha pattern\&. Da none n' space enums may not step tha fuck up in tha straight-up original gangsta field n' space may not step tha fuck up in tha final field\&.
.PP
Da partz of a scrilla strang must step tha fuck up in tha order indicated by tha fieldz of tha pattern\&. Da symbol field indicates dat tha value of curr_symbol() may be present\&. Da sign field indicates dat tha value of positive_sign() or negative_sign() must be present\&. Da value field indicates dat tha absolute value of tha scrilla amount is present\&. none indicates 0 or mo' whitespace characters, except all up in tha end, where it permits no whitespace\&. space indicates dat 1 or mo' whitespace charactas must be present\&.
.PP
For example, fo' tha US locale n' pos_format() pattern {symbol,sign,value,none}, curr_symbol() == '$' positive_sign() == '+', n' value 10\&.01, n' options set ta force tha symbol, tha correspondin strang is \fC$+10\&.01\fP\&.
.PP
\fBReturns:\fP
.RS 4
Pattern fo' scrilla joints\&. 
.RE
.PP

.PP
Definizzle at line 1147 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_pos_format()\&.
.SS "template<typename _CharT , bool _Intl> \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::positive_sign () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return positizzle sign string\&. This function returns a string_type ta use as a sign fo' positizzle amounts\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_positive_sign()\&.
.PP
If tha return value gotz nuff mo' than one character, tha straight-up original gangsta characta appears up in tha posizzle indicated by pos_format() n' tha remainder step tha fuck up all up in tha end of tha formatted string\&.
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representin a positizzle sign\&. 
.RE
.PP

.PP
Definizzle at line 1078 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_positive_sign()\&.
.SS "template<typename _CharT , bool _Intl> \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::thousands_sep () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Return thousandz separator character\&. This function returns a cold-ass lil char_type ta use as a thousandz separator\&. Well shiiiit, it do so by returnin returnin scrillapunct<char_type>::do_thousands_sep()\&.
.PP
\fBReturns:\fP
.RS 4
char_type representin a thousandz separator\&. 
.RE
.PP

.PP
Definizzle at line 1018 of file locale_facets_nonio\&.h\&.
.PP
References std::moneypunct< _CharT, _Intl >::do_thousands_sep()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename _CharT , bool _Intl> \fBlocale::id\fP \fBstd::moneypunct\fP< _CharT, _Intl >::id\fC [static]\fP, \fC [inherited]\fP"

.PP
Numpunct facet id\&. 
.PP
Definizzle at line 953 of file locale_facets_nonio\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
