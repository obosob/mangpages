.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Seekable 3pm"
.TH IO::Seekable 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Seekable \- supply seek based methodz fo' I/O objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Seekable;
\&    package IO::Something;
\&    @ISA = qw(IO::Seekable);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Seekable\*(C'\fR aint gots a cold-ass lil constructor of its own as it is intended to
be inherited by other \f(CW\*(C`IO::Handle\*(C'\fR based objects, n' you can put dat on yo' toast. Well shiiiit, it serves up methods
which allow seekin of tha file descriptors.
.ie n .IP "$io\->getpos" 4
.el .IP "\f(CW$io\fR\->getpos" 4
.IX Item "$io->getpos"
Returns a opaque value dat represents tha current posizzle of the
IO::File, or \f(CW\*(C`undef\*(C'\fR if dis aint possible (eg a unseekable stream such
as a terminal, pipe or socket). If tha \fIfgetpos()\fR function be available in
your C library it is used ta implements getpos, else perl emulates getpos
usin Cz \fIftell()\fR function.
.ie n .IP "$io\->setpos" 4
.el .IP "\f(CW$io\fR\->setpos" 4
.IX Item "$io->setpos"
Uses tha value of a previous getpos call ta return ta a previously hit up
position. I aint talkin' bout chicken n' gravy biatch. Returns \*(L"0 but true\*(R" on success, \f(CW\*(C`undef\*(C'\fR on failure.
.PP
See perlfunc fo' complete descriptionz of each of tha following
supported \f(CW\*(C`IO::Seekable\*(C'\fR methods, which is just front endz fo' the
correspondin built-in functions:
.ie n .IP "$io\->seek ( \s-1POS, WHENCE \s0)" 4
.el .IP "\f(CW$io\fR\->seek ( \s-1POS, WHENCE \s0)" 4
.IX Item "$io->seek ( POS, WHENCE )"
Seek tha IO::File ta posizzle \s-1POS,\s0 relatizzle ta \s-1WHENCE:\s0
.RS 4
.IP "WHENCE=0 (\s-1SEEK_SET\s0)" 8
.IX Item "WHENCE=0 (SEEK_SET)"
\&\s-1POS\s0 be absolute position. I aint talkin' bout chicken n' gravy biatch. (Seek relatizzle ta tha start of tha file)
.IP "WHENCE=1 (\s-1SEEK_CUR\s0)" 8
.IX Item "WHENCE=1 (SEEK_CUR)"
\&\s-1POS\s0 be a offset from tha current position. I aint talkin' bout chicken n' gravy biatch. (Seek relatizzle ta current)
.IP "WHENCE=2 (\s-1SEEK_END\s0)" 8
.IX Item "WHENCE=2 (SEEK_END)"
\&\s-1POS\s0 be a offset from tha end of tha file. (Seek relatizzle ta end)
.RE
.RS 4
.Sp
Da SEEK_* constants can be imported from tha \f(CW\*(C`Fcntl\*(C'\fR module if you
don't wish ta use tha numbers \f(CW0\fR \f(CW1\fR or \f(CW2\fR up in yo' code.
.Sp
Returns \f(CW1\fR upon success, \f(CW0\fR otherwise.
.RE
.ie n .IP "$io\->sysseek( \s-1POS, WHENCE \s0)" 4
.el .IP "\f(CW$io\fR\->sysseek( \s-1POS, WHENCE \s0)" 4
.IX Item "$io->sysseek( POS, WHENCE )"
Similar ta \f(CW$io\fR\->seek yo, but sets tha IO::Filez posizzle rockin tha system
call \fIlseek\fR\|(2) directly, so will confuse most perl \s-1IO\s0 operators except
sysread n' syswrite (see perlfunc fo' full details)
.Sp
Returns tha freshly smoked up position, or \f(CW\*(C`undef\*(C'\fR on failure.  A position
of zero is returned as tha strang \f(CW"0 but true"\fR
.ie n .IP "$io\->tell" 4
.el .IP "\f(CW$io\fR\->tell" 4
.IX Item "$io->tell"
Returns tha IO::Filez current position, or \-1 on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc, 
\&\*(L"I/O Operators\*(R" up in perlop,
IO::Handle
IO::File
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <gbarr@pobox.com>
