'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_SetVar 3 8.1 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_SetVar2Ex, Tcl_SetVar, Tcl_SetVar2, Tcl_ObjSetVar2, Tcl_GetVar2Ex, Tcl_GetVar, Tcl_GetVar2, Tcl_ObjGetVar2, Tcl_UnsetVar, Tcl_UnsetVar2 \- manipulate Tcl variables
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Obj *
\fBTcl_SetVar2Ex\fR(\fIinterp, name1, name2, newValuePtr, flags\fR)
.sp
const char *
\fBTcl_SetVar\fR(\fIinterp, varName, newValue, flags\fR)
.sp
const char *
\fBTcl_SetVar2\fR(\fIinterp, name1, name2, newValue, flags\fR)
.sp
Tcl_Obj *
\fBTcl_ObjSetVar2\fR(\fIinterp, part1Ptr, part2Ptr, newValuePtr, flags\fR)
.sp
Tcl_Obj *
\fBTcl_GetVar2Ex\fR(\fIinterp, name1, name2, flags\fR)
.sp
const char *
\fBTcl_GetVar\fR(\fIinterp, varName, flags\fR)
.sp
const char *
\fBTcl_GetVar2\fR(\fIinterp, name1, name2, flags\fR)
.sp
Tcl_Obj *
\fBTcl_ObjGetVar2\fR(\fIinterp, part1Ptr, part2Ptr, flags\fR)
.sp
int
\fBTcl_UnsetVar\fR(\fIinterp, varName, flags\fR)
.sp
int
\fBTcl_UnsetVar2\fR(\fIinterp, name1, name2, flags\fR)
.SH ARGUMENTS
.AS Tcl_Interp *newValuePtr
.AP Tcl_Interp *interp in
Interpreta containin variable.
.AP "const char" *name1 in
Gotz Nuff tha name of a array variable (if \fIname2\fR is non-NULL)
or (if \fIname2\fR is NULL) either tha name of a scalar variable
or a cold-ass lil complete name includin both variable name n' index.
May include \fB::\fR namespace qualifiers
to specify a variable up in a particular namespace.
.AP "const char" *name2 in
If non-NULL, gives name of element within array; up in this
case \fIname1\fR must refer ta a array variable.
.AP Tcl_Obj *newValuePtr in
Points ta a Tcl object containin tha freshly smoked up value fo' tha variable.
.AP int flags in
OR-ed combination of bits providin additionizzle shiznit. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See below
for valid joints.
.AP "const char" *varName in
Name of variable.
May include \fB::\fR namespace qualifiers
to specify a variable up in a particular namespace.
May refer ta a scalar variable or a element of
an array.
.AP "const char" *newValue in
New value fo' variable, specified as a null-terminated string.
A copy of dis value is stored up in tha variable.
.AP Tcl_Obj *part1Ptr in
Points ta a Tcl object containin tha variablez name.
Da name may include a seriez of \fB::\fR namespace qualifiers
to specify a variable up in a particular namespace.
May refer ta a scalar variable or a element of a array variable.
.AP Tcl_Obj *part2Ptr in
If non-NULL, points ta a object containin tha name of a element
within a array n' \fIpart1Ptr\fR must refer ta a array variable.
.BE

.SH DESCRIPTION
.PP
These procedures is used ta create, modify, read, n' delete
Tcl variablez from C code.
.PP
\fBTcl_SetVar2Ex\fR, \fBTcl_SetVar\fR, \fBTcl_SetVar2\fR, and
\fBTcl_ObjSetVar2\fR 
will create a freshly smoked up variable or modify a existin one.
These procedures set tha given variable ta tha value
given by \fInewValuePtr\fR or \fInewValue\fR n' return a
pointa ta tha variablez freshly smoked up value, which is stored up in Tcl's
variable structure.
\fBTcl_SetVar2Ex\fR n' \fBTcl_ObjSetVar2\fR take tha freshly smoked up value as a
Tcl_Obj n' return
a pointa ta a Tcl_Obj.  \fBTcl_SetVar\fR n' \fBTcl_SetVar2\fR
take tha freshly smoked up value as a strang n' return a string; they are
usually less efficient than \fBTcl_ObjSetVar2\fR.  Note dat the
return value may be different than tha \fInewValuePtr\fR or
\fInewValue\fR argument, cuz of modifications made by write traces.
If a error occurs up in settin tha variable (e.g. a array
variable is referenced without givin a index tha fuck into tha array)
NULL is returned n' a error message is left up in \fIinterp\fR's
result if tha \fBTCL_LEAVE_ERR_MSG\fR \fIflag\fR bit is set.
.PP
\fBTcl_GetVar2Ex\fR, \fBTcl_GetVar\fR, \fBTcl_GetVar2\fR, and
\fBTcl_ObjGetVar2\fR
return tha current value of a variable.
Da arguments ta these procedures is treated up in tha same way
as tha arguments ta tha procedures busted lyrics bout above.
Under aiiight circumstances, tha return value be a pointer
to tha variablez value.  For \fBTcl_GetVar2Ex\fR and
\fBTcl_ObjGetVar2\fR tha value is
returned as a pointa ta a Tcl_Obj.  For \fBTcl_GetVar\fR and
\fBTcl_GetVar2\fR tha value is returned as a string; dis is
usually less efficient, so \fBTcl_GetVar2Ex\fR or \fBTcl_ObjGetVar2\fR
are preferred.
If a error occurs while readin tha variable (e.g. tha variable
does not exist or a array element is specified fo' a scalar
variable), then NULL is returned n' a error message is left
in \fIinterp\fRz result if tha \fBTCL_LEAVE_ERR_MSG\fR \fIflag\fR
bit is set.
.PP
\fBTcl_UnsetVar\fR n' \fBTcl_UnsetVar2\fR may be used ta remove
a variable, so dat future attempts ta read tha variable will return
an error.
Da arguments ta these procedures is treated up in tha same way
as tha arguments ta tha procedures above.
If tha variable is successfully removed then \fBTCL_OK\fR is returned.
If tha variable cannot be removed cuz it do not exist then
\fBTCL_ERROR\fR is returned n' a error message is left
in \fIinterp\fRz result if tha \fBTCL_LEAVE_ERR_MSG\fR \fIflag\fR
bit is set.
If a array element is specified, tha given element is removed
but tha array remains.
If a array name is specified without a index, then tha entire
array is removed.
.PP
Da name of a variable may be specified ta these procedures in
four ways:
.IP [1]
If \fBTcl_SetVar\fR, \fBTcl_GetVar\fR, or \fBTcl_UnsetVar\fR
is invoked, tha variable name is given as
a single string, \fIvarName\fR.
If \fIvarName\fR gotz nuff a open parenthesis n' endz wit a
close parenthesis, then tha value between tha parentheses is
treated as a index (which can have any strang value) and
the charactas before tha straight-up original gangsta open
parenthesis is treated as tha name of a array variable.
If \fIvarName\fR aint gots parentheses as busted lyrics bout above, then
the entire strang is treated as tha name of a scalar variable.
.IP [2]
If tha \fIname1\fR n' \fIname2\fR arguments is provided and
\fIname2\fR is non-NULL, then a array element is specified and
the array name n' index have
already been separated by tha caller: \fIname1\fR gotz nuff the
name n' \fIname2\fR gotz nuff tha index.  An error is generated
if \fIname1\fR  gotz nuff a open parenthesis n' endz wit a
close parenthesis (array element) n' \fIname2\fR is non-NULL.
.IP [3]
If \fIname2\fR is NULL, \fIname1\fR is treated just like
\fIvarName\fR up in case [1] above (it can be either a scalar or a array
element variable name).
.PP
Da \fIflags\fR argument may be used ta specify any of several
options ta tha procedures.
It consistz of a OR-ed combination of tha followin bits.
.TP
\fBTCL_GLOBAL_ONLY\fR
Under aiiight circumstances tha procedures look up variablez as bigs up.
If a procedure call be actizzle up in \fIinterp\fR,
the variable is looked up all up in tha current level of procedure call.
Otherwise, tha variable is looked up first up in tha current namespace,
then up in tha global namespace.
But fuck dat shiznit yo, tha word on tha street is dat if dis bit is set up in \fIflags\fR then tha variable
is looked up only up in tha global namespace
even if there be a procedure call active.
If both \fBTCL_GLOBAL_ONLY\fR n' \fBTCL_NAMESPACE_ONLY\fR is given,
\fBTCL_GLOBAL_ONLY\fR is ignored.
.TP
\fBTCL_NAMESPACE_ONLY\fR
If dis bit is set up in \fIflags\fR then tha variable
is looked up only up in tha current namespace; if a procedure be active
its variablez is ignored, n' tha global namespace be also ignored unless
it is tha current namespace.
.TP
\fBTCL_LEAVE_ERR_MSG\fR
If a error is returned n' dis bit is set up in \fIflags\fR, then
an error message is ghon be left up in tha interpreterz result,
where it can be retrieved wit \fBTcl_GetObjResult\fR
or \fBTcl_GetStringResult\fR.
If dis flag bit aint set then no error message is left
and tha interpreterz result aint gonna be modified.
.TP
\fBTCL_APPEND_VALUE\fR
If dis bit is set then \fInewValuePtr\fR or \fInewValue\fR is
appended ta tha current value instead of replacin dat shit.
If tha variable is currently undefined, then tha bit is ignored.
This bit is only used by tha \fBTcl_Set*\fR procedures.
.TP
\fBTCL_LIST_ELEMENT\fR
If dis bit is set, then \fInewValue\fR is converted ta a valid
Tcl list element before settin (or appendin to) tha variable.
A separator space be appended before tha freshly smoked up list element unless
the list element is goin ta be tha straight-up original gangsta element up in a list or
sublist (i.e. tha variablez current value is empty, or gotz nuff
the single character
.QW { ,
or endz in
.QW " }" ).
When appending, tha original gangsta value of tha variable must also be
a valid list, so dat tha operation is tha appendin of a new
list element onto a list.
.PP
\fBTcl_GetVar\fR n' \fBTcl_GetVar2\fR
return tha current value of a variable.
Da arguments ta these procedures is treated up in tha same way
as tha arguments ta \fBTcl_SetVar\fR n' \fBTcl_SetVar2\fR.
Under aiiight circumstances, tha return value be a pointer
to tha variablez value (which is stored up in Tclz variable
structure n' aint gonna chizzle before tha next call ta \fBTcl_SetVar\fR
or \fBTcl_SetVar2\fR).
\fBTcl_GetVar\fR n' \fBTcl_GetVar2\fR use tha flag bits \fBTCL_GLOBAL_ONLY\fR
and \fBTCL_LEAVE_ERR_MSG\fR, both of
which have
the same meanin as fo' \fBTcl_SetVar\fR.
If a error occurs up in readin tha variable (e.g. tha variable
does not exist or a array element is specified fo' a scalar
variable), then NULL is returned.
.PP
\fBTcl_UnsetVar\fR n' \fBTcl_UnsetVar2\fR may be used ta remove
a variable, so dat future calls ta \fBTcl_GetVar\fR or \fBTcl_GetVar2\fR
for tha variable will return a error.
Da arguments ta these procedures is treated up in tha same way
as tha arguments ta \fBTcl_GetVar\fR n' \fBTcl_GetVar2\fR.
If tha variable is successfully removed then \fBTCL_OK\fR is returned.
If tha variable cannot be removed cuz it do not exist then
\fBTCL_ERROR\fR is returned.
If a array element is specified, tha given element is removed
but tha array remains.
If a array name is specified without a index, then tha entire
array is removed.

.SH "SEE ALSO"
Tcl_GetObjResult, Tcl_GetStringResult, Tcl_TraceVar

.SH KEYWORDS
array, git variable, interpreter, object, scalar, set, unset, variable
