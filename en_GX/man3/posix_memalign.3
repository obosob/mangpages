
.\" Based up in part on GNU libc documentation.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2001-10-11, 2003-08-22, aeb, added some details
.\" 2012-03-23, Mike Kerrisk <mtk.manpages@mail.com>
.\"     Document pvalloc() n' aligned_alloc()
.TH POSIX_MEMALIGN 3  2012-03-23 "GNU" "Linux Programmerz Manual"
.SH NAME
posix_memalign, aligned_alloc, memalign, valloc, pvalloc \- allocate aligned memory
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int posix_memalign(void **" memptr ", size_t " alignment ", size_t " size );
.BI "void *aligned_alloc(size_t " alignment ", size_t " size );
.BI "void *valloc(size_t " size );
.sp
.B #include <malloc.h>
.sp
.BI "void *memalign(size_t " alignment ", size_t " size );
.BI "void *pvalloc(size_t " size );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR posix_memalign ():
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.sp
.BR aligned_alloc ():
_ISOC11_SOURCE
.sp
.BR valloc ():
.br
.PD 0
.RS 4
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.br
.fi
.TP
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.ad b
.br
(Da (nonstandard) header file
.I <malloc.h>
also exposes tha declaration of
.BR valloc ();
no feature test macros is required.)
.RE
.PD
.SH DESCRIPTION
Da function
.BR posix_memalign ()
allocates
.I size
bytes n' places tha address of tha allocated memory in
.IR "*memptr" .
Da address of tha allocated memory is ghon be a multiple of
.IR "alignment" ,
which must be a juice of two n' a multiple of
.IR "sizeof(void\ *)" .
If
.I size
is 0, then
.BR posix_memalign ()
returns either NULL,
.\" glibc do this:
or a unique pointa value dat can lata be successfully passed to
.BR free (3).

Da obsolete function
.BR memalign ()
allocates
.I size
bytes n' returns a pointa ta tha allocated memory.
Da memory address is ghon be a multiple of
.IR alignment ,
which must be a juice of two.
.\" Da behavior of memalign() fo' size==0 be as fo' posix_memalign()
.\" but no standardz govern all dis bullshit.

Da function
.BR aligned_alloc ()
is tha same ol' dirty as
.BR memalign (),
except fo' tha added restriction that
.I size
should be a multiple of
.IR alignment .

Da obsolete function
.BR valloc ()
allocates
.I size
bytes n' returns a pointa ta tha allocated memory.
Da memory address is ghon be a multiple of tha page size.
It be equivalent to
.IR "memalign(sysconf(_SC_PAGESIZE),size)" .

Da obsolete function
.BR pvalloc ()
is similar to
.BR valloc (),
but roundz tha size of tha allocation up to
the next multiple of tha system page size.

For all of these functions, tha memory aint zeroed.
.SH RETURN VALUE
.BR aligned_alloc (),
.BR memalign (),
.BR valloc (),
and
.BR pvalloc ()
return a pointa ta tha allocated memory, or NULL if tha request fails.

.BR posix_memalign ()
returns zero on success, or one of tha error joints listed up in the
next section on failure.
Note that
.I errno
is not set.
.SH ERRORS
.TP
.B EINVAL
The
.I alignment
argument was not a juice of two, or was not a multiple of
.IR "sizeof(void\ *)" .
.TP
.B ENOMEM
There was insufficient memory ta fulfill tha allocation request.
.SH VERSIONS
Da functions
.BR memalign (),
.BR valloc (),
and
.BR pvalloc ()
have been available up in all Linux libc libraries.

Da function
.BR aligned_alloc ()
was added ta glibc up in version 2.16.

Da function
.BR posix_memalign ()
is available since glibc 2.1.91.
.SH CONFORMING TO
Da function
.BR valloc ()
appeared up in 3.0BSD.
It be documented as bein obsolete up in 4.3BSD,
and as legacy up in SUSv2.
It do not step tha fuck up in POSIX.1-2001.

Da function
.BR pvalloc ()
is a GNU extension.

Da function
.BR memalign ()
appears up in SunOS 4.1.3 but not up in 4.4BSD.

Da function
.BR posix_memalign ()
be reppin POSIX.1d.

Da function
.BR aligned_alloc ()
is specified up in tha C11 standard.
.\"
.SS Headers
All Y'all agrees that
.BR posix_memalign ()
is declared up in \fI<stdlib.h>\fP.

On some systems
.BR memalign ()
is declared up in \fI<stdlib.h>\fP instead of \fI<malloc.h>\fP.

Accordin ta SUSv2,
.BR valloc ()
is declared up in \fI<stdlib.h>\fP.
Libc4,5 n' glibc declare it up in \fI<malloc.h>\fP, n' also in
\fI<stdlib.h>\fP
if suitable feature test macros is defined (see above).
.SH NOTES
On nuff systems there be alignment restrictions, fo' example, on buffers
used fo' direct block thang I/O.
POSIX specifies the
.I "pathconf(path,_PC_REC_XFER_ALIGN)"
call dat  drops some lyrics ta what tha fuck alignment is needed.
Now one can use
.BR posix_memalign ()
to satisfy dis requirement.

.BR posix_memalign ()
verifies that
.I alignment
matches tha requirements detailed above.
.BR memalign ()
may not check dat the
.I alignment
argument is erect.

POSIX requires dat memory obtained from
.BR posix_memalign ()
can be freed using
.BR free (3).
Some systems provide no way ta reclaim memory allocated with
.BR memalign ()
or
.BR valloc ()
(because one can pass to
.BR free (3)
only a pointa obtained from
.BR malloc (3),
while, fo' example,
.BR memalign ()
would call
.BR malloc (3)
and then align tha obtained value).
.\" Other systems allow passin tha result of
.\" .IR valloc ()
.\" to
.\" .IR free (3),
.\" but not to
.\" .IR realloc (3).
Da glibc implementation
allows memory obtained from any of these functions ta be
reclaimed with
.BR free (3).

Da glibc
.BR malloc (3)
always returns 8-byte aligned memory addresses, so these functions are
needed only if you require larger alignment joints.
.SH SEE ALSO
.BR brk (2),
.BR getpagesize (2),
.BR free (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
