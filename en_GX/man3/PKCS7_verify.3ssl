.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PKCS7_verify 3"
.TH PKCS7_verify 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
PKCS7_verify \- verify a PKCS#7 signedData structure
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/pkcs7.h>
\&
\& int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
\&
\& STACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs, int flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIPKCS7_verify()\fR verifies a PKCS#7 signedData structure. \fBp7\fR is tha \s-1PKCS7\s0
structure ta verify. \fBcerts\fR be a set of certificates up in which ta search for
the signerz certificate. \fBstore\fR be a trusted certficate store (used for
chain verification). \fBindata\fR is tha signed data if tha content is not
present up in \fBp7\fR (that is it is detached). Da content is freestyled ta \fBout\fR
if it aint \s-1NULL.\s0
.PP
\&\fBflags\fR be a optionizzle set of flags, which can be used ta modify tha verify
operation.
.PP
\&\fIPKCS7_get0_signers()\fR retrieves tha signerz certificates from \fBp7\fR, it do
\&\fBnot\fR check they validitizzle or whether any signatures is valid. Y'all KNOW dat shit, muthafucka! Da \fBcerts\fR
and \fBflags\fR parametas have tha same meanings as up in \fIPKCS7_verify()\fR.
.SH "VERIFY PROCESS"
.IX Header "VERIFY PROCESS"
Normally tha verify process proceedz as bigs up.
.PP
Initially some sanitizzle checks is performed on \fBp7\fR. Da type of \fBp7\fR must
be signedData. There must be at least one signature on tha data n' if
the content is detached \fBindata\fR cannot be \fB\s-1NULL\s0\fR.
.PP
An attempt is made ta locate all tha signerz certificates, first lookin in
the \fBcerts\fR parameta (if it aint \fB\s-1NULL\s0\fR) n' then lookin up in any certificates
contained up in tha \fBp7\fR structure itself. If any signerz certificates cannot be
located tha operation fails.
.PP
Each signerz certificate is chain verified rockin tha \fBsmimesign\fR purpose and
the supplied trusted certificate store fo' realz. Any internal certificates up in tha message
are used as untrusted CAs. If any chain verify fails a error code is returned.
.PP
Finally tha signed content is read (and freestyled ta \fBout\fR is it aint \s-1NULL\s0) and
the signaturez checked.
.PP
If all signaturez verify erectly then tha function is successful.
.PP
Any of tha followin flags (ored together) can be passed up in tha \fBflags\fR parameter
to chizzle tha default verify behaviour. Shiiit, dis aint no joke. Only tha flag \fB\s-1PKCS7_NOINTERN\s0\fR is
meaningful ta \fIPKCS7_get0_signers()\fR.
.PP
If \fB\s-1PKCS7_NOINTERN\s0\fR is set tha certificates up in tha message itself is not 
searched when locatin tha signerz certificate. This means dat all tha signers
certificates must be up in tha \fBcerts\fR parameter.
.PP
If tha \fB\s-1PKCS7_TEXT\s0\fR flag is set \s-1MIME\s0 headaz fo' type \fBtext/plain\fR is deleted
from tha content. If tha content aint of type \fBtext/plain\fR then a error is
returned.
.PP
If \fB\s-1PKCS7_NOVERIFY\s0\fR is set tha signerz certificates is not chain verified.
.PP
If \fB\s-1PKCS7_NOCHAIN\s0\fR is set then tha certificates contained up in tha message are
not used as untrusted CAs. This means dat tha whole verify chain (apart from
the signerz certificate) must be contained up in tha trusted store.
.PP
If \fB\s-1PKCS7_NOSIGS\s0\fR is set then tha signatures on tha data is not checked.
.SH "NOTES"
.IX Header "NOTES"
One application of \fB\s-1PKCS7_NOINTERN\s0\fR is ta only accept lyrics signed by
a lil' small-ass number of certificates. Da aaight certificates would be passed
in tha \fBcerts\fR parameter n' shit. In dis case if tha signer aint one of the
certificates supplied up in \fBcerts\fR then tha verify will fail cuz the
signer cannot be found.
.PP
Care should be taken when modifyin tha default verify behaviour, fo' example
settin \fBPKCS7_NOVERIFY|PKCS7_NOSIGS\fR will straight-up disable all verification 
and any signed message is ghon be considered valid. Y'all KNOW dat shit, muthafucka! This combination is however
useful if one merely wishes ta write tha content ta \fBout\fR n' its validity
is not considered blingin.
.PP
Chain verification should arguably be performed  rockin tha signin time rather
than tha current time yo. However since tha signin time is supplied by the
signer it cannot be trusted without additionizzle evidence (like fuckin a trusted
timestamp).
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIPKCS7_verify()\fR returns 1 fo' a successful verification n' zero or a negative
value if a error occurs.
.PP
\&\fIPKCS7_get0_signers()\fR returns all signers or \fB\s-1NULL\s0\fR if a error occurred.
.PP
Da error can be obtained from \fIERR_get_error\fR\|(3)
.SH "BUGS"
.IX Header "BUGS"
Da trusted certificate store aint searched fo' tha signers certificate,
this is primarily cuz of tha inadequaciez of tha current \fBX509_STORE\fR
functionality.
.PP
Da lack of single pass processin n' need ta hold all data up in memory as
mentioned up in \fIPKCS7_sign()\fR also applies ta \fIPKCS7_verify()\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIERR_get_error\fR\|(3), \fIPKCS7_sign\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIPKCS7_verify()\fR was added ta OpenSSL 0.9.5
