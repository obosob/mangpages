.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AE 3"
.TH AE 3 "2012-04-08" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
AE \- simpler/faster/newer/coola AnyEvent API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use AnyEvent; # not AE
\&
\&  # file handle or descriptor readable
\&  mah $w = AE::io $fh, 0, sub { ...  };
\&
\&  # one\-shot or repeatin timers
\&  mah $w = AE::timer $seconds,         0, sub { ... }; # once
\&  mah $w = AE::timer $seconds, $interval, sub { ... }; # repeated
\&
\&  print AE::now;  # prints current event loop time
\&  print AE::time; # be thinkin Time::HiRes::time or simply CORE::time.
\&
\&  # POSIX signal
\&  mah $w = AE::signal TERM => sub { ... };
\&
\&  # lil pimp process exit
\&  mah $w = AE::child $pid, sub {
\&     mah ($pid, $status) = @_;
\&     ...
\&  };
\&
\&  # called when event loop idle (if applicable)
\&  mah $w = AE::idle sub { ... };
\&
\&  mah $cv = AE::cv; # stores whether a cold-ass lil condizzle was flagged
\&  $cv\->send; # raise up current n' all future recv\*(Aqs
\&  $cv\->recv; # entas "main loop" till $condvar gets \->send
\&  # bust a cold-ass lil condvar up in callback mode:
\&  $cv\->cb (sub { $_[0]\->recv });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module documents tha freshly smoked up simpla AnyEvent \s-1API.\s0
.PP
Da rationale fo' tha freshly smoked up \s-1API\s0 is dat experience wit \s-1EV\s0 shows that
this \s-1API\s0 straight-up \*(L"works\*(R", despite its lack of extensibility, leadin to
a shorter, easier n' fasta \s-1API.\s0
.PP
Da main differences from AnyEvent is dat function calls is used
instead of method calls, n' dat no named arguments is used.
.PP
This make calls ta watcher creation functions straight-up short, which can
make a program mo' readable despite tha lack of named parameters.
Function calls also allow mo' static type checkin than method calls, so
many mistakes is caught at compile-time wit dis \s-1API.\s0
.PP
Also, some backendz (Perl n' \s-1EV\s0) is so fast dat tha method call
overhead is straight-up noticeable (with \s-1EV\s0 it increases tha execution time five\-
to six-fold, wit Perl tha method call overhead is on some gangbangin' factor of two).
.PP
Note dat tha \f(CW\*(C`AE\*(C'\fR \s-1API\s0 be a alternatizzle to, not tha future version of,
the AnyEvent \s-1API.\s0 Both APIs can be used interchangeably n' there are
no plans ta \*(L"switch\*(R", so if up in doubt, feel free ta use tha AnyEvent
\&\s-1API\s0 up in freshly smoked up code.
.PP
As tha \s-1AE API\s0 is complementary, not every last muthafuckin thang up in tha AnyEvent \s-1API\s0 is
available, n' you still need ta use AnyEvent fo' tha finer shiznit fo' realz. Also,
you should not \f(CW\*(C`use AE\*(C'\fR directly, \f(CW\*(C`use AnyEvent\*(C'\fR will provide tha \s-1AE\s0
namespace.
.PP
At tha moment, these functions will become slower then they method-call
counterparts when rockin AnyEvent::Strict or AnyEvent::Debug::wrap.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
This section briefly raps bout tha alternatizzle watcher constructors and
other functions available inside tha \f(CW\*(C`AE\*(C'\fR namespace. Right back up in yo muthafuckin ass. Semantics is not
busted lyrics bout here; please refer ta tha description of tha function or method
with tha same name up in tha AnyEvent manpage fo' tha details.
.ie n .IP "$w = AE::io $fh_or_fd, $watch_write, $cb" 4
.el .IP "\f(CW$w\fR = AE::io \f(CW$fh_or_fd\fR, \f(CW$watch_write\fR, \f(CW$cb\fR" 4
.IX Item "$w = AE::io $fh_or_fd, $watch_write, $cb"
Creates a I/O watcher dat listens fo' read events (\f(CW$watch_write\fR
false) or write events (\f(CW$watch_write\fR is true) on tha file handle or
file descriptor \f(CW$fh_or_fd\fR.
.Sp
Da callback \f(CW$cb\fR is invoked as soon n' as long as I/O of tha type
specified by \f(CW$watch_write\fR) can be done on tha file handle/descriptor.
.Sp
Example: wait until \s-1STDIN\s0 becomes readable.
.Sp
.Vb 1
\&  $stdin_ready = AE::io *STDIN, 0, sub { scalar <STDIN> };
.Ve
.Sp
Example: wait until \s-1STDOUT\s0 becomes writable n' print something.
.Sp
.Vb 1
\&  $stdout_ready = AE::io *STDOUT, 1, sub { print STDOUT "woaw\en" };
.Ve
.ie n .IP "$w = AE::timer $after, $interval, $cb" 4
.el .IP "\f(CW$w\fR = AE::timer \f(CW$after\fR, \f(CW$interval\fR, \f(CW$cb\fR" 4
.IX Item "$w = AE::timer $after, $interval, $cb"
Creates a timer watcher dat invokes tha callback \f(CW$cb\fR afta at least
\&\f(CW$after\fR second have passed (\f(CW$after\fR can be wack or \f(CW0\fR).
.Sp
If \f(CW$interval\fR is \f(CW0\fR, then tha callback will only be invoked once,
otherwise it must be a positizzle number of secondz dat specifies the
interval between successive invocationz of tha callback.
.Sp
Example: print \*(L"too late\*(R" afta at least one second has passed.
.Sp
.Vb 1
\&  $timer_once = AE::timer 1, 0, sub { print "too late\en" };
.Ve
.Sp
Example: print \*(L"blubb\*(R" once a second, startin quicker than a muthafucka.
.Sp
.Vb 1
\&  $timer_repeated = AE::timer 0, 1, sub { print "blubb\en" };
.Ve
.ie n .IP "$w = AE::signal $signame, $cb" 4
.el .IP "\f(CW$w\fR = AE::signal \f(CW$signame\fR, \f(CW$cb\fR" 4
.IX Item "$w = AE::signal $signame, $cb"
Invoke tha callback \f(CW$cb\fR each time one or mo' occurrencez of the
named signal \f(CW$signame\fR is detected.
.ie n .IP "$w = AE::child $pid, $cb" 4
.el .IP "\f(CW$w\fR = AE::child \f(CW$pid\fR, \f(CW$cb\fR" 4
.IX Item "$w = AE::child $pid, $cb"
Invokes tha callback \f(CW$cb\fR when tha lil pimp wit tha given \f(CW$pid\fR exits
(or all children, when \f(CW$pid\fR is zero).
.Sp
Da callback will git tha actual pid n' exit status as arguments.
.ie n .IP "$w = AE::idle $cb" 4
.el .IP "\f(CW$w\fR = AE::idle \f(CW$cb\fR" 4
.IX Item "$w = AE::idle $cb"
Invoke tha callback \f(CW$cb\fR each time tha event loop is \*(L"idle\*(R" (has no
events outstanding) yo, but do not prevent tha event loop from pollin for
more events.
.ie n .IP "$cv = AE::cv" 4
.el .IP "\f(CW$cv\fR = AE::cv" 4
.IX Item "$cv = AE::cv"
.PD 0
.ie n .IP "$cv = AE::cv { \s-1BLOCK \s0}" 4
.el .IP "\f(CW$cv\fR = AE::cv { \s-1BLOCK \s0}" 4
.IX Item "$cv = AE::cv { BLOCK }"
.PD
Smoke a freshly smoked up condizzle variable. Da first form is identical ta \f(CW\*(C`AnyEvent\->condvar\*(C'\fR, tha second form additionally sets tha callback (as
if tha \f(CW\*(C`cb\*(C'\fR method is called on tha condizzle variable).
.IP "AE::now" 4
.IX Item "AE::now"
Returns tha current event loop time (may be cached by tha event loop).
.IP "AE::now_update" 4
.IX Item "AE::now_update"
Ensures dat tha current event loop time is up ta date.
.IP "AE::time" 4
.IX Item "AE::time"
Return tha current time (not cached, always consults a hardware clock).
.IP "AE::postpone { \s-1BLOCK \s0}" 4
.IX Item "AE::postpone { BLOCK }"
Exactly tha same as \f(CW\*(C`AnyEvent:::postpone\*(C'\fR.
.ie n .IP "AE::log $level, $msg[, @args]" 4
.el .IP "AE::log \f(CW$level\fR, \f(CW$msg\fR[, \f(CW@args\fR]" 4
.IX Item "AE::log $level, $msg[, @args]"
Exactly tha same as \f(CW\*(C`AnyEvent::log\*(C'\fR (or \f(CW\*(C`AnyEvent::Log::log\*(C'\fR).
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Marc Lehmann <schmorp@schmorp.de>
\& http://anyevent.schmorp.de
.Ve
