.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Unicode::Collate::Locale 3pm"
.TH Unicode::Collate::Locale 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Unicode::Collate::Locale \- Linguistic tailorin fo' DUCET via Unicode::Collate
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Unicode::Collate::Locale;
\&
\&  #construct
\&  $Collator = Unicode::Collate::Locale\->
\&      new(locale => $locale_name, %tailoring);
\&
\&  #sort
\&  @sorted = $Collator\->sort(@not_sorted);
\&
\&  #compare
\&  $result = $Collator\->cmp($a, $b); # returns 1, 0, or \-1.
.Ve
.PP
\&\fBNote:\fR Strings up in \f(CW@not_sorted\fR, \f(CW$a\fR n' \f(CW$b\fR is interpreted
accordin ta Perlz Unicode support. Right back up in yo muthafuckin ass. See perlunicode,
perluniintro, perlunitut, perlunifaq, utf8.
Otherwise you can use \f(CW\*(C`preprocess\*(C'\fR (cf. \f(CW\*(C`Unicode::Collate\*(C'\fR)
or should decode dem before.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up linguistic tailorin fo' it
takin advantage of \f(CW\*(C`Unicode::Collate\*(C'\fR.
.SS "Constructor"
.IX Subsection "Constructor"
Da \f(CW\*(C`new\*(C'\fR method returns a cold-ass lil collator object.
.PP
A parameta list fo' tha constructor be a hash, which can include
a special key \f(CW\*(C`locale\*(C'\fR n' its value (case-insensitive) standing
for a Unicode base language code (two or three-letter).
For example, \f(CW\*(C`Unicode::Collate::Locale\->new(locale => \*(AqFR\*(Aq)\*(C'\fR
returns a cold-ass lil collator tailored fo' French.
.PP
\&\f(CW$locale_name\fR may be suffixed wit a Unicode script code (four-letter),
a Unicode region code, a Unicode language variant code. These codes are
case-insensitive, n' separated wit \f(CW\*(Aq_\*(Aq\fR or \f(CW\*(Aq\-\*(Aq\fR.
E.g. \f(CW\*(C`en_US\*(C'\fR fo' Gangsta up in \s-1USA,
\&\s0\f(CW\*(C`az_Cyrl\*(C'\fR fo' Azerbaijani up in tha Cyrillic script,
\&\f(CW\*(C`es_ES_traditional\*(C'\fR fo' Spanish up in Spain (Traditional).
.PP
If \f(CW$locale_name\fR aint available,
fallback is selected up in tha followin order:
.PP
.Vb 5
\&    1. language wit a variant code
\&    2. language wit a script code
\&    3. language wit a region code
\&    4. language
\&    5. default
.Ve
.PP
Tailorin tags provided by \f(CW\*(C`Unicode::Collate\*(C'\fR is allowed as long as
they is not used fo' \f(CW\*(C`locale\*(C'\fR support.  Esp. tha \f(CW\*(C`table\*(C'\fR tag
is always untailorable, since it is reserved fo' \s-1DUCET.\s0
.PP
However \f(CW\*(C`entry\*(C'\fR be allowed, even if it is used fo' \f(CW\*(C`locale\*(C'\fR support,
to add or override mappings.
.PP
E.g. a cold-ass lil collator fo' French, which ignores diacritics n' case difference
(i.e. level 1), wit reversed case orderin n' no normalization.
.PP
.Vb 6
\&    Unicode::Collate::Locale\->new(
\&        level => 1,
\&        locale => \*(Aqfr\*(Aq,
\&        upper_before_lower => 1,
\&        normalization => undef
\&    )
.Ve
.PP
Overridin a funky-ass behavior already tailored by \f(CW\*(C`locale\*(C'\fR is disallowed
if such a tailorin is passed ta \f(CW\*(C`new()\*(C'\fR.
.PP
.Vb 4
\&    Unicode::Collate::Locale\->new(
\&        locale => \*(Aqda\*(Aq,
\&        upper_before_lower => 0, # causes error as reserved by \*(Aqda\*(Aq
\&    )
.Ve
.PP
However \f(CW\*(C`change()\*(C'\fR inherited from \f(CW\*(C`Unicode::Collate\*(C'\fR allows
such a tailorin dat is reserved by \f(CW\*(C`locale\*(C'\fR. Examples:
.PP
.Vb 3
\&    new(locale => \*(Aqca\*(Aq)\->change(backwardz => undef)
\&    new(locale => \*(Aqda\*(Aq)\->change(upper_before_lower => 0)
\&    new(locale => \*(Aqja\*(Aq)\->change(overrideCJK => undef)
.Ve
.SS "Methods"
.IX Subsection "Methods"
\&\f(CW\*(C`Unicode::Collate::Locale\*(C'\fR be a subclass of \f(CW\*(C`Unicode::Collate\*(C'\fR
and methodz other than \f(CW\*(C`new\*(C'\fR is inherited from \f(CW\*(C`Unicode::Collate\*(C'\fR.
.PP
Here be a list of additionizzle methods:
.ie n .IP """$Collator\->getlocale""" 4
.el .IP "\f(CW$Collator\->getlocale\fR" 4
.IX Item "$Collator->getlocale"
Returns a language code accepted n' used straight-up on collation.
If linguistic tailorin aint provided fo' a language code you passed
(intensionally fo' some languages, or cuz of tha incomplete implementation),
this method returns a strang \f(CW\*(Aqdefault\*(Aq\fR meanin no special tailoring.
.ie n .IP """$Collator\->locale_version""" 4
.el .IP "\f(CW$Collator\->locale_version\fR" 4
.IX Item "$Collator->locale_version"
(Since Unicode::Collate::Locale 0.87)
Returns tha version number (like \f(CW\*(C`/\ed\e.\ed\ed/\*(C'\fR) of tha locale, as that
of \fILocale/*.pl\fR.
.Sp
\&\fBNote:\fR \fILocale/*.pl\fR dat a cold-ass lil collator uses should be identified by
a combination of return joints from \f(CW\*(C`getlocale\*(C'\fR n' \f(CW\*(C`locale_version\*(C'\fR.
.SS "A list of tailorable locales"
.IX Subsection "A list of tailorable locales"
.Vb 10
\&      locale name       description
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&      af                Afrikaans
\&      ar                Arabic
\&      as                Assamese
\&      az                Azerbaijani (Azeri)
\&      be                Belarusian
\&      bg                Bulgarian
\&      bn                Bengali
\&      bs                Bosnian
\&      bs_Cyrl           Bosnian up in Cyrillic (tailored as Serbian)
\&      ca                Catalan
\&      cs                Czech
\&      cy                Welsh
\&      da                Danish
\&      de_\|_phonebook     German (umlaut as \*(Aqae\*(Aq, \*(Aqoe\*(Aq, \*(Aque\*(Aq)
\&      ee                Ewe
\&      eo                Esperanto
\&      es                Spanish
\&      es_\|_traditionizzle   Spanish (\*(Aqch\*(Aq n' \*(Aqll\*(Aq as a grapheme)
\&      et                Estonian
\&      fa                Persian
\&      fi                Finnish (v n' w is primary equal)
\&      fi_\|_phonebook     Finnish (v n' w as separate characters)
\&      fil               Filipino
\&      fo                Faroese
\&      fr                French
\&      gu                Gujarati
\&      ha                Hausa
\&      haw               Hawaiian
\&      hi                Hindi
\&      hr                Croatian
\&      hu                Hungarian
\&      hy                Armenian
\&      ig                Igbo
\&      is                Icelandic
\&      ja                Japanese [1]
\&      kk                Kazakh
\&      kl                Kalaallisut
\&      kn                Kannada
\&      ko                Korean [2]
\&      kok               Konkani
\&      ln                Lingala
\&      lt                Lithuanian
\&      lv                Latvian
\&      mk                Macedonian
\&      ml                Malayalam
\&      mr                Marathi
\&      mt                Maltese
\&      nb                Norwegian Bokmal
\&      nn                Norwegian Nynorsk
\&      nso               Uptown Sotho
\&      om                Oromo
\&      or                Oriya
\&      pa                Punjabi
\&      pl                Polish
\&      ro                Romanian
\&      ru                Russian
\&      sa                Sanskrit
\&      se                Uptown Sami
\&      si                Sinhala
\&      si_\|_doggtionary    Sinhala (U+0DA5 = U+0DA2,0DCA,0DA4)
\&      sk                Slovak
\&      sl                Slovenian
\&      sq                Albanian
\&      sr                Serbian
\&      sr_Latn           Serbian up in Latin (tailored as Croatian)
\&      sv                Swedish (v n' w is primary equal)
\&      sv_\|_reformed      Swedish (v n' w as separate characters)
\&      ta                Tamil
\&      te                Telugu
\&      th                Thai
\&      tn                Tswana
\&      ta                Tonga
\&      tr                Turkish
\&      uk                Ukrainian
\&      ur                Urdu
\&      vi                Vietnamese
\&      wae               Walser
\&      wo                Wolof
\&      yo                Yoruba
\&      zh                Chinese
\&      zh_\|_big5han       Chinese (ideographs: big5 order)
\&      zh_\|_gb2312han     Chinese (ideographs: GB\-2312 order)
\&      zh_\|_pinyin        Chinese (ideographs: pinyin order) [3]
\&      zh_\|_stroke        Chinese (ideographs: stroke order) [3]
\&      zh_\|_zhuyin        Chinese (ideographs: zhuyin order) [3]
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
Localez accordin ta tha default \s-1UCA\s0 rulez include
chr (Cherokee),
de (German),
en (English),
ga (Irish),
id (Indonesian),
it (Italian),
ka (Georgian),
ms (Malay),
nl (Dutch),
pt (Portuguese),
st (Downtown Sotho),
sw (Swahili),
xh (Xhosa),
zu (Zulu).
.PP
\&\fBNote\fR
.PP
[1] ja: Ideographs is sorted up in \s-1JIS X 0208\s0 order.
Fullwidth n' halfwidth forms is identical ta they regular form.
Da difference between hiragana n' katakana be all up in tha 4th level,
the comparison also requires \f(CW\*(C`(variable => \*(AqNon\-ignorable\*(Aq)\*(C'\fR,
and then \f(CW\*(C`katakana_before_hiragana\*(C'\fR has no effect.
.PP
[2] ko: Plenty of ideographs is sorted by they reading. Right back up in yo muthafuckin ass. Such
an ideograph is primary (level 1) equal to, n' secondary (level 2)
greata than, tha correspondin hangul syllable.
.PP
[3] zh_\|_pinyin, zh_\|_stroke n' zh_\|_zhuyin: implemented alt='short',
where a smalla number of ideographs is tailored.
.PP
Note: 'pinyin' is up in latin, 'zhuyin' is up in bopomofo.
.SH "INSTALL"
.IX Header "INSTALL"
Installation of \f(CW\*(C`Unicode::Collate::Locale\*(C'\fR requires \fICollate/Locale.pm\fR,
\&\fICollate/Locale/*.pm\fR, \fICollate/CJK/*.pm\fR n' \fICollate/allkeys.txt\fR.
On building, \f(CW\*(C`Unicode::Collate::Locale\*(C'\fR don't require any of \fIdata/*.txt\fR,
\&\fIgendata/*\fR, n' \fImklocale\fR.
Tests fo' \f(CW\*(C`Unicode::Collate::Locale\*(C'\fR is named \fIt/loc_*.t\fR.
.SH "CAVEAT"
.IX Header "CAVEAT"
.IP "tailorin aint maximum" 4
.IX Item "tailorin aint maximum"
Even if a cold-ass lil certain letta is tailored, its equivalent would not always
tailored as well as dat shit. For example, even though W is tailored,
fullwidth W (\f(CW\*(C`U+FF37\*(C'\fR), W wit acute (\f(CW\*(C`U+1E82\*(C'\fR), etc. is not
tailored. Y'all KNOW dat shit, muthafucka! Da result may depend on whether source strings are
normalized or not, n' whether decomposed or composed.
Thus \f(CW\*(C`(normalization => undef)\*(C'\fR is less preferred.
.SH "AUTHOR"
.IX Header "AUTHOR"
Da Unicode::Collate::Locale module fo' perl was written
by \s-1SADAHIRO\s0 Tomoyuki, <SADAHIRO@cpan.org>.
This module is Copyright(C) 2004\-2012, \s-1SADAHIRO\s0 Tomoyuki. Japan.
All muthafuckin rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Unicode Collation Algorithm \- \s-1UTS\s0 #10" 4
.IX Item "Unicode Collation Algorithm - UTS #10"
<http://www.unicode.org/reports/tr10/>
.IP "Da Default Unicode Collation Element Table (\s-1DUCET\s0)" 4
.IX Item "Da Default Unicode Collation Element Table (DUCET)"
<http://www.unicode.org/Public/UCA/latest/allkeys.txt>
.IP "Unicode Locale Data Markup Language (\s-1LDML\s0) \- \s-1UTS\s0 #35" 4
.IX Item "Unicode Locale Data Markup Language (LDML) - UTS #35"
<http://www.unicode.org/reports/tr35/>
.IP "\s-1CLDR \-\s0 Unicode Common Locale Data Repository" 4
.IX Item "CLDR - Unicode Common Locale Data Repository"
<http://cldr.unicode.org/>
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.PD 0
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
