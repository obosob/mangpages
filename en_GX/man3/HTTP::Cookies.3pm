.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Cookies 3"
.TH HTTP::Cookies 3 "2012-02-15" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Cookies \- HTTP cookie jars
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use HTTP::Cookies;
\&  $cookie_jar = HTTP::Cookies\->new(
\&    file => "$ENV{\*(AqHOME\*(Aq}/lwp_cookies.dat",
\&    autosave => 1,
\&  );
\&
\&  use LWP;
\&  mah $browser = LWP::UserAgent\->new;
\&  $browser\->cookie_jar($cookie_jar);
.Ve
.PP
Or fo' a empty n' temporary cookie jar:
.PP
.Vb 3
\&  use LWP;
\&  mah $browser = LWP::UserAgent\->new;
\&  $browser\->cookie_jar( {} );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is fo' objects dat represent a \*(L"cookie jar\*(R" \*(-- dat is, a
database of all tha \s-1HTTP\s0 dem scooby snacks dat a given LWP::UserAgent object
knows about.
.PP
Cookies is a general mechanizzle which server side connections can use
to both store n' retrieve shiznit on tha client side of the
connection. I aint talkin' bout chicken n' gravy biatch.  For mo' shiznit bout dem scooby snacks refer to
<URL:http://curl.haxx.se/rfc/cookie_spec.html> and
<URL:http://www.cookiecentral.com/>.  This module also implements the
new steez dem scooby snacks busted lyrics bout up in \fI\s-1RFC 2965\s0\fR.
Da two variantz of dem scooby snacks is supposed ta be able ta coexist happily.
.PP
Instancez of tha class \fIHTTP::Cookies\fR is able ta store a cold-ass lil collection
of Set\-Cookie2: n' Set-Cookie: headaz n' is able ta use this
information ta initialize Cookie-headaz up in \fIHTTP::Request\fR objects.
Da state of a \fIHTTP::Cookies\fR object can be saved up in n' restored from
files.
.SH "METHODS"
.IX Header "METHODS"
Da followin methodz is provided:
.ie n .IP "$cookie_jar = HTTP::Cookies\->new" 4
.el .IP "\f(CW$cookie_jar\fR = HTTP::Cookies\->new" 4
.IX Item "$cookie_jar = HTTP::Cookies->new"
Da constructor takes hash steez parameters.  Da following
parametas is recognized:
.Sp
.Vb 4
\&  file:            name of tha file ta restore dem scooby snacks from n' save dem scooby snacks to
\&  autosave:        save durin destruction (bool)
\&  ignore_discard:  save even dem scooby snacks dat is axed ta be discarded (bool)
\&  hide_cookie2:    do not add Cookie2 header ta requests
.Ve
.Sp
Future parametas might include (not yet implemented):
.Sp
.Vb 3
\&  max_cookies               300
\&  max_cookies_per_domain    20
\&  max_cookie_size           4096
\&
\&  no_cookies   list of domain names dat we never return dem scooby snacks to
.Ve
.ie n .IP "$cookie_jar\->add_cookie_header( $request )" 4
.el .IP "\f(CW$cookie_jar\fR\->add_cookie_header( \f(CW$request\fR )" 4
.IX Item "$cookie_jar->add_cookie_header( $request )"
Da \fIadd_cookie_header()\fR method will set tha appropriate Cookie:\-header
for tha \fIHTTP::Request\fR object given as argument.  Da \f(CW$request\fR must
have a valid url attribute before dis method is called.
.ie n .IP "$cookie_jar\->extract_cookies( $response )" 4
.el .IP "\f(CW$cookie_jar\fR\->extract_cookies( \f(CW$response\fR )" 4
.IX Item "$cookie_jar->extract_cookies( $response )"
Da \fIextract_cookies()\fR method will look fo' Set-Cookie: and
Set\-Cookie2: headaz up in tha \fIHTTP::Response\fR object passed as
argument.  Any of these headaz dat is found is used ta update
the state of tha \f(CW$cookie_jar\fR.
.ie n .IP "$cookie_jar\->set_cookie( $version, $key, $val, $path, $domain, $port, $path_spec, $secure, $maxage, $discard, \e%rest )" 4
.el .IP "\f(CW$cookie_jar\fR\->set_cookie( \f(CW$version\fR, \f(CW$key\fR, \f(CW$val\fR, \f(CW$path\fR, \f(CW$domain\fR, \f(CW$port\fR, \f(CW$path_spec\fR, \f(CW$secure\fR, \f(CW$maxage\fR, \f(CW$discard\fR, \e%rest )" 4
.IX Item "$cookie_jar->set_cookie( $version, $key, $val, $path, $domain, $port, $path_spec, $secure, $maxage, $discard, %rest )"
Da \fIset_cookie()\fR method thugged-out shiznit tha state of tha \f(CW$cookie_jar\fR.  The
\&\f(CW$key\fR, \f(CW$val\fR, \f(CW$domain\fR, \f(CW$port\fR n' \f(CW$path\fR arguments is strings.  The
\&\f(CW$path_spec\fR, \f(CW$secure\fR, \f(CW$discard\fR arguments is boolean joints, n' you can put dat on yo' toast. Da \f(CW$maxage\fR
value be a number indicatin number of secondz dat dis cookie will
live.  A value <= 0 will delete dis cookie.  \f(CW%rest\fR defines
various other attributes like \*(L"Comment\*(R" n' \*(L"CommentURL\*(R".
.ie n .IP "$cookie_jar\->save" 4
.el .IP "\f(CW$cookie_jar\fR\->save" 4
.IX Item "$cookie_jar->save"
.PD 0
.ie n .IP "$cookie_jar\->save( $file )" 4
.el .IP "\f(CW$cookie_jar\fR\->save( \f(CW$file\fR )" 4
.IX Item "$cookie_jar->save( $file )"
.PD
This method file saves tha state of tha \f(CW$cookie_jar\fR ta a gangbangin' file.
Da state can then be restored lata rockin tha \fIload()\fR method. Y'all KNOW dat shit, muthafucka!  If a
filename aint specified we will use tha name specified during
construction. I aint talkin' bout chicken n' gravy biatch.  If tha attribute \fIignore_discard\fR is set, then we
will even save dem scooby snacks dat is marked ta be discarded.
.Sp
Da default is ta save a sequence of \*(L"Set\-Cookie3\*(R" lines.
\&\*(L"Set\-Cookie3\*(R" be a proprietary \s-1LWP\s0 format, not known ta be compatible
with any browser n' shit.  Da \fIHTTP::Cookies::Netscape\fR sub-class can
be used ta save up in a gangbangin' format compatible wit Netscape.
.ie n .IP "$cookie_jar\->load" 4
.el .IP "\f(CW$cookie_jar\fR\->load" 4
.IX Item "$cookie_jar->load"
.PD 0
.ie n .IP "$cookie_jar\->load( $file )" 4
.el .IP "\f(CW$cookie_jar\fR\->load( \f(CW$file\fR )" 4
.IX Item "$cookie_jar->load( $file )"
.PD
This method readz tha dem scooby snacks from tha file n' addz dem ta the
\&\f(CW$cookie_jar\fR.  Da file must be up in tha format freestyled by tha \fIsave()\fR
method.
.ie n .IP "$cookie_jar\->revert" 4
.el .IP "\f(CW$cookie_jar\fR\->revert" 4
.IX Item "$cookie_jar->revert"
This method emptizzles tha \f(CW$cookie_jar\fR n' re-loadz tha \f(CW$cookie_jar\fR
from tha last save file.
.ie n .IP "$cookie_jar\->clear" 4
.el .IP "\f(CW$cookie_jar\fR\->clear" 4
.IX Item "$cookie_jar->clear"
.PD 0
.ie n .IP "$cookie_jar\->clear( $domain )" 4
.el .IP "\f(CW$cookie_jar\fR\->clear( \f(CW$domain\fR )" 4
.IX Item "$cookie_jar->clear( $domain )"
.ie n .IP "$cookie_jar\->clear( $domain, $path )" 4
.el .IP "\f(CW$cookie_jar\fR\->clear( \f(CW$domain\fR, \f(CW$path\fR )" 4
.IX Item "$cookie_jar->clear( $domain, $path )"
.ie n .IP "$cookie_jar\->clear( $domain, $path, $key )" 4
.el .IP "\f(CW$cookie_jar\fR\->clear( \f(CW$domain\fR, \f(CW$path\fR, \f(CW$key\fR )" 4
.IX Item "$cookie_jar->clear( $domain, $path, $key )"
.PD
Invokin dis method without arguments will empty tha whole
\&\f(CW$cookie_jar\fR.  If given a single argument only dem scooby snacks belongin to
that domain is ghon be removed. Y'all KNOW dat shit, muthafucka!  If given two arguments, cookies
belongin ta tha specified path within dat domain is removed. Y'all KNOW dat shit, muthafucka!  If
given three arguments, then tha cookie wit tha specified key, path
and domain is removed.
.ie n .IP "$cookie_jar\->clear_temporary_cookies" 4
.el .IP "\f(CW$cookie_jar\fR\->clear_temporary_cookies" 4
.IX Item "$cookie_jar->clear_temporary_cookies"
Discard all temporary cookies. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. Scans fo' all dem scooby snacks up in tha jar
with either no expire field or a legit \f(CW\*(C`discard\*(C'\fR flag. To be
called when tha user agent shuts down accordin ta \s-1RFC 2965.\s0
.ie n .IP "$cookie_jar\->scan( \e&callback )" 4
.el .IP "\f(CW$cookie_jar\fR\->scan( \e&callback )" 4
.IX Item "$cookie_jar->scan( &callback )"
Da argument be a subroutine dat is ghon be invoked fo' each cookie
stored up in tha \f(CW$cookie_jar\fR.  Da subroutine is ghon be invoked with
the followin arguments:
.Sp
.Vb 11
\&  0  version
\&  1  key
\&  2  val
\&  3  path
\&  4  domain
\&  5  port
\&  6  path_spec
\&  7  secure
\&  8  expires
\&  9  discard
\& 10  hash
.Ve
.ie n .IP "$cookie_jar\->as_string" 4
.el .IP "\f(CW$cookie_jar\fR\->as_string" 4
.IX Item "$cookie_jar->as_string"
.PD 0
.ie n .IP "$cookie_jar\->as_string( $skip_discardablez )" 4
.el .IP "\f(CW$cookie_jar\fR\->as_string( \f(CW$skip_discardables\fR )" 4
.IX Item "$cookie_jar->as_string( $skip_discardablez )"
.PD
Da \fIas_string()\fR method will return tha state of tha \f(CW$cookie_jar\fR
represented as a sequence of \*(L"Set\-Cookie3\*(R" header lines separated by
\&\*(L"\en\*(R".  If \f(CW$skip_discardables\fR is \s-1TRUE,\s0 it aint gonna return lines for
cookies wit tha \fIDiscard\fR attribute.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::Cookies::Netscape, HTTP::Cookies::Microsoft
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1997\-2002 Gisle Aas
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
