.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_shutdown 3"
.TH SSL_shutdown 3 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_shutdown \- shut down a TLS/SSL connection
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& int SSL_shutdown(SSL *ssl);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISSL_shutdown()\fR shuts down a actizzle \s-1TLS/SSL\s0 connection. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it sendz tha 
\&\*(L"close notify\*(R" shutdown alert ta tha peer.
.SH "NOTES"
.IX Header "NOTES"
\&\fISSL_shutdown()\fR tries ta bust tha \*(L"close notify\*(R" shutdown alert ta tha peer.
Whether tha operation succeedz or not, tha \s-1SSL_SENT_SHUTDOWN\s0 flag is set and
a currently open session is considered closed n' phat n' is ghon be kept up in the
session cache fo' further reuse.
.PP
Da shutdown procedure consistz of 2 steps: tha bustin  of tha \*(L"close notify\*(R"
shutdown alert n' tha reception of tha peerz \*(L"close notify\*(R" shutdown
alert fo' realz. Accordin ta tha \s-1TLS\s0 standard, it be aaight fo' a application
to only bust its shutdown alert n' then close tha underlyin connection
without waitin fo' tha peerz response (this way resources can be saved,
as tha process can already terminizzle or serve another connection).
When tha underlyin connection shall be used fo' mo' communications, the
complete shutdown procedure (bidirectionizzle \*(L"close notify\*(R" alerts) must be
performed, so dat tha peers stay synchronized.
.PP
\&\fISSL_shutdown()\fR supports both uni\- n' bidirectionizzle shutdown by its 2 step
behaviour.
.ie n .IP "When tha application is tha straight-up original gangsta jam ta bust tha ""close notify"" alert, \fISSL_shutdown()\fR will only bust tha alert n' then set tha \s-1SSL_SENT_SHUTDOWN\s0 flag (so dat tha session is considered phat n' is ghon be kept up in cache). \fISSL_shutdown()\fR will then return wit 0. If a unidirectionizzle shutdown is enough (the underlyin connection shall be closed anyway), dis first call ta \fISSL_shutdown()\fR is sufficient. In order ta complete tha bidirectionizzle shutdown handshake, \fISSL_shutdown()\fR must be called again. I aint talkin' bout chicken n' gravy biatch. Da second call will make \fISSL_shutdown()\fR wait fo' tha peerz ""close notify"" shutdown alert. On success, tha second call ta \fISSL_shutdown()\fR will return wit 1." 4
.el .IP "When tha application is tha straight-up original gangsta jam ta bust tha ``close notify'' alert, \fISSL_shutdown()\fR will only bust tha alert n' then set tha \s-1SSL_SENT_SHUTDOWN\s0 flag (so dat tha session is considered phat n' is ghon be kept up in cache). \fISSL_shutdown()\fR will then return wit 0. If a unidirectionizzle shutdown is enough (the underlyin connection shall be closed anyway), dis first call ta \fISSL_shutdown()\fR is sufficient. In order ta complete tha bidirectionizzle shutdown handshake, \fISSL_shutdown()\fR must be called again. I aint talkin' bout chicken n' gravy biatch. Da second call will make \fISSL_shutdown()\fR wait fo' tha peerz ``close notify'' shutdown alert. On success, tha second call ta \fISSL_shutdown()\fR will return wit 1." 4
.IX Item "When tha application is tha straight-up original gangsta jam ta bust tha close notify alert, SSL_shutdown() will only bust tha alert n' then set tha SSL_SENT_SHUTDOWN flag (so dat tha session is considered phat n' is ghon be kept up in cache). Right back up in yo muthafuckin ass. SSL_shutdown() will then return wit 0. If a unidirectionizzle shutdown is enough (the underlyin connection shall be closed anyway), dis first call ta SSL_shutdown() is sufficient. In order ta complete tha bidirectionizzle shutdown handshake, SSL_shutdown() must be called again. I aint talkin' bout chicken n' gravy biatch. Da second call will make SSL_shutdown() wait fo' tha peerz close notify shutdown alert. On success, tha second call ta SSL_shutdown() will return wit 1."
.PD 0
.ie n .IP "If tha peer already busted tha ""close notify"" alert \fBand\fR dat shiznit was already processed implicitly inside another function (\fISSL_read\fR\|(3)), tha \s-1SSL_RECEIVED_SHUTDOWN\s0 flag is set. \fISSL_shutdown()\fR will bust tha ""close notify"" alert, set tha \s-1SSL_SENT_SHUTDOWN\s0 flag n' will immediately return wit 1. Whether \s-1SSL_RECEIVED_SHUTDOWN\s0 be already set can be checked rockin tha \fISSL_get_shutdown()\fR (see also \fISSL_set_shutdown\fR\|(3) call." 4
.el .IP "If tha peer already busted tha ``close notify'' alert \fBand\fR dat shiznit was already processed implicitly inside another function (\fISSL_read\fR\|(3)), tha \s-1SSL_RECEIVED_SHUTDOWN\s0 flag is set. \fISSL_shutdown()\fR will bust tha ``close notify'' alert, set tha \s-1SSL_SENT_SHUTDOWN\s0 flag n' will immediately return wit 1. Whether \s-1SSL_RECEIVED_SHUTDOWN\s0 be already set can be checked rockin tha \fISSL_get_shutdown()\fR (see also \fISSL_set_shutdown\fR\|(3) call." 4
.IX Item "If tha peer already busted tha close notify alert n' dat shiznit was already processed implicitly inside another function (SSL_read), tha SSL_RECEIVED_SHUTDOWN flag is set. Right back up in yo muthafuckin ass. SSL_shutdown() will bust tha close notify alert, set tha SSL_SENT_SHUTDOWN flag n' will immediately return wit 1. Whether SSL_RECEIVED_SHUTDOWN be already set can be checked rockin tha SSL_get_shutdown() (see also SSL_set_shutdown call."
.PD
.PP
It be therefore recommended, ta check tha return value of \fISSL_shutdown()\fR
and call \fISSL_shutdown()\fR again, if tha bidirectionizzle shutdown aint yet
complete (return value of tha straight-up original gangsta call is 0) fo' realz. As tha shutdown is not
specially handled up in tha SSLv2 protocol, \fISSL_shutdown()\fR will succeed on
the first call.
.PP
Da behaviour of \fISSL_shutdown()\fR additionally dependz on tha underlyin \s-1BIO. \s0
.PP
If tha underlyin \s-1BIO\s0 is \fBblocking\fR, \fISSL_shutdown()\fR will only return once the
handshake step has been finished or a error occurred.
.PP
If tha underlyin \s-1BIO\s0 is \fBnon-blocking\fR, \fISSL_shutdown()\fR will also return
when tha underlyin \s-1BIO\s0 could not satisfy tha needz of \fISSL_shutdown()\fR
to continue tha handshake. In dis case a cold-ass lil call ta \fISSL_get_error()\fR wit the
return value of \fISSL_shutdown()\fR will yield \fB\s-1SSL_ERROR_WANT_READ\s0\fR or
\&\fB\s-1SSL_ERROR_WANT_WRITE\s0\fR. Da callin process then must repeat tha call after
takin appropriate action ta satisfy tha needz of \fISSL_shutdown()\fR.
Da action dependz on tha underlyin \s-1BIO.\s0 When rockin a non-blockin socket,
nothang is ta be done yo, but \fIselect()\fR can be used ta check fo' tha required
condition. I aint talkin' bout chicken n' gravy biatch. When rockin a funky-ass bufferin \s-1BIO,\s0 like a \s-1BIO\s0 pair, data must be written
into or retrieved outta tha \s-1BIO\s0 before bein able ta continue.
.PP
\&\fISSL_shutdown()\fR can be modified ta only set tha connection ta \*(L"shutdown\*(R"
state but not straight-up bust tha \*(L"close notify\*(R" alert lyrics,
see \fISSL_CTX_set_quiet_shutdown\fR\|(3).
When \*(L"quiet shutdown\*(R" is enabled, \fISSL_shutdown()\fR will always succeed
and return 1.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Da followin return joints can occur:
.ie n .IP "0" 4
.el .IP "\f(CW0\fR" 4
.IX Item "0"
Da shutdown aint yet finished. Y'all KNOW dat shit, muthafucka! Call \fISSL_shutdown()\fR fo' a second time,
if a funky-ass bidirectionizzle shutdown shall be performed.
Da output of \fISSL_get_error\fR\|(3) may be misleading, as an
erroneous \s-1SSL_ERROR_SYSCALL\s0 may be flagged even though no error occurred.
.ie n .IP "1" 4
.el .IP "\f(CW1\fR" 4
.IX Item "1"
Da shutdown was successfully completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \*(L"close notify\*(R" alert was sent
and tha peerz \*(L"close notify\*(R" alert was received.
.IP "\-1" 4
.IX Item "-1"
Da shutdown was not successful cuz a gangbangin' fatal error occurred either
at tha protocol level or a cold-ass lil connection failure occurred. Y'all KNOW dat shit, muthafucka! Well shiiiit, it can also occur if
action is need ta continue tha operation fo' non-blockin BIOs.
Call \fISSL_get_error\fR\|(3) wit tha return value \fBret\fR
to smoke up tha reason.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fISSL_get_error\fR\|(3), \fISSL_connect\fR\|(3),
\&\fISSL_accept\fR\|(3), \fISSL_set_shutdown\fR\|(3),
\&\fISSL_CTX_set_quiet_shutdown\fR\|(3),
\&\fISSL_clear\fR\|(3), \fISSL_free\fR\|(3),
\&\fIssl\fR\|(3), \fIbio\fR\|(3)
