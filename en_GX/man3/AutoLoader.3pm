.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AutoLoader 3pm"
.TH AutoLoader 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
AutoLoader \- load subroutines only on demand
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Foo;
\&    use AutoLoader \*(AqAUTOLOAD\*(Aq;   # import tha default AUTOLOAD subroutine
\&
\&    package Bar;
\&    use AutoLoader;              # don\*(Aqt import AUTOLOAD, define our own
\&    sub AUTOLOAD {
\&        ...
\&        $AutoLoader::AUTOLOAD = "...";
\&        goto &AutoLoader::AUTOLOAD;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBAutoLoader\fR module works wit tha \fBAutoSplit\fR module n' the
\&\f(CW\*(C`_\|_END_\|_\*(C'\fR token ta defer tha loadin of some subroutines until they are
used rather than loadin dem all at once.
.PP
To use \fBAutoLoader\fR, tha lyricist of a module has ta place the
definitionz of subroutines ta be autoloaded afta a \f(CW\*(C`_\|_END_\|_\*(C'\fR token.
(See perldata.)  Da \fBAutoSplit\fR module can then be run manually to
extract tha definitions tha fuck into individual filez \fIauto/funcname.al\fR.
.PP
\&\fBAutoLoader\fR implements a \s-1AUTOLOAD\s0 subroutine.  When a undefined
subroutine up in is called up in a cold-ass lil client module of \fBAutoLoader\fR,
\&\fBAutoLoader\fRz \s-1AUTOLOAD\s0 subroutine attempts ta locate tha subroutine up in a
file wit a name related ta tha location of tha file from which the
client module was read. Y'all KNOW dat shit, muthafucka!  As a example, if \fI\s-1POSIX\s0.pm\fR is located in
\&\fI/usr/local/lib/perl5/POSIX.pm\fR, \fBAutoLoader\fR will look fo' perl
subroutines \fB\s-1POSIX\s0\fR up in \fI/usr/local/lib/perl5/auto/POSIX/*.al\fR, where
the \f(CW\*(C`.al\*(C'\fR file has tha same ol' dirty name as tha subroutine, sans package.  If
such a gangbangin' file exists, \s-1AUTOLOAD\s0 will read n' evaluate it,
thus (presumably) definin tha needed subroutine.  \s-1AUTOLOAD\s0 will then
\&\f(CW\*(C`goto\*(C'\fR tha newly defined subroutine.
.PP
Once dis process completes fo' a given function, it is defined, so
future calls ta tha subroutine will bypass tha \s-1AUTOLOAD\s0 mechanism.
.SS "Subroutine Stubs"
.IX Subsection "Subroutine Stubs"
In order fo' object method lookup and/or prototype checkin ta operate
correctly even when methodz aint yet been defined it is necessary to
\&\*(L"forward declare\*(R" each subroutine (as up in \f(CW\*(C`sub NAME;\*(C'\fR).  See
\&\*(L"\s-1SYNOPSIS\*(R"\s0 up in perlsub.  Such forward declaration creates \*(L"subroutine
stubs\*(R", which is place holdaz wit no code.
.PP
Da AutoSplit n' \fBAutoLoader\fR modulez automate tha creation of forward
declarations.  Da AutoSplit module creates a 'index' file containing
forward declarationz of all tha AutoSplit subroutines.  When the
AutoLoader module is 'use'd it loadz these declarations tha fuck into its callers
package.
.PP
Because of dis mechanizzle it is blingin dat \fBAutoLoader\fR be always
\&\f(CW\*(C`use\*(C'\fRd n' not \f(CW\*(C`require\*(C'\fRd.
.SS "Usin \fBAutoLoader\fPz \s-1AUTOLOAD\s0 Subroutine"
.IX Subsection "Usin AutoLoaderz AUTOLOAD Subroutine"
In order ta use \fBAutoLoader\fRz \s-1AUTOLOAD\s0 subroutine you \fImust\fR
explicitly import it:
.PP
.Vb 1
\&    use AutoLoader \*(AqAUTOLOAD\*(Aq;
.Ve
.SS "Overridin \fBAutoLoader\fPz \s-1AUTOLOAD\s0 Subroutine"
.IX Subsection "Overridin AutoLoaderz AUTOLOAD Subroutine"
Some modules, mainly extensions, provide they own \s-1AUTOLOAD\s0 subroutines.
They typically need ta check fo' some special cases (like fuckin constants)
and then fallback ta \fBAutoLoader\fRz \s-1AUTOLOAD\s0 fo' tha rest.
.PP
Such modulez should \fInot\fR import \fBAutoLoader\fRz \s-1AUTOLOAD\s0 subroutine.
Instead, they should define they own \s-1AUTOLOAD\s0 subroutines along these
lines:
.PP
.Vb 2
\&    use AutoLoader;
\&    use Carp;
\&
\&    sub AUTOLOAD {
\&        mah $sub = $AUTOLOAD;
\&        (my $constname = $sub) =~ s/.*:://;
\&        mah $val = constant($constname, @_ ? $_[0] : 0);
\&        if ($! != 0) {
\&            if ($! =~ /Invalid/ || $!{EINVAL}) {
\&                $AutoLoader::AUTOLOAD = $sub;
\&                goto &AutoLoader::AUTOLOAD;
\&            }
\&            else {
\&                croak "Yo crazy-ass vendor has not defined constant $constname";
\&            }
\&        }
\&        *$sub = sub { $val }; # same as: eval "sub $sub { $val }";
\&        goto &$sub;
\&    }
.Ve
.PP
If any modulez own \s-1AUTOLOAD\s0 subroutine has no need ta fallback ta the
AutoLoaderz \s-1AUTOLOAD\s0 subroutine (because it aint gots any AutoSplit
subroutines), then dat module should not use \fBAutoLoader\fR at all.
.SS "Package Lexicals"
.IX Subsection "Package Lexicals"
Package lexicals declared wit \f(CW\*(C`my\*(C'\fR up in tha main block of a package
usin \fBAutoLoader\fR aint gonna be visible ta auto-loaded subroutines, due to
the fact dat tha given scope endz all up in tha \f(CW\*(C`_\|_END_\|_\*(C'\fR marker n' shit.  A module
usin such variablez as package globals aint gonna work properly under the
\&\fBAutoLoader\fR.
.PP
Da \f(CW\*(C`vars\*(C'\fR pragma (see \*(L"vars\*(R" up in perlmod) may be used up in such
situations as a alternatizzle ta explicitly qualifyin all globals with
the package namespace.  Variablez pre-declared wit dis pragma will be
visible ta any autoloaded routines (but aint gonna be invisible outside
the package, unfortunately).
.SS "Not Usin AutoLoader"
.IX Subsection "Not Usin AutoLoader"
Yo ass can stop rockin AutoLoader by simply
.PP
.Vb 1
\&        no AutoLoader;
.Ve
.SS "\fBAutoLoader\fP vs. \fBSelfLoader\fP"
.IX Subsection "AutoLoader vs. Right back up in yo muthafuckin ass. SelfLoader"
Da \fBAutoLoader\fR is similar up in purpose ta \fBSelfLoader\fR: both delay the
loadin of subroutines.
.PP
\&\fBSelfLoader\fR uses tha \f(CW\*(C`_\|_DATA_\|_\*(C'\fR marker rather than \f(CW\*(C`_\|_END_\|_\*(C'\fR.
While dis avoidz tha use of a hierarchy of disk filez n' the
associated open/close fo' each routine loaded, \fBSelfLoader\fR suffers a
startup speed disadvantage up in tha one-time parsin of tha lines after
\&\f(CW\*(C`_\|_DATA_\|_\*(C'\fR, afta which routines is cached. Y'all KNOW dat shit, muthafucka!  \fBSelfLoader\fR can also
handle multiple packages up in a gangbangin' file.
.PP
\&\fBAutoLoader\fR only readz code as it is requested, n' up in nuff cases
should be fasta yo, but requires a mechanizzle like \fBAutoSplit\fR be used to
create tha individual files.  ExtUtils::MakeMaker will invoke
\&\fBAutoSplit\fR automatically if \fBAutoLoader\fR is used up in a module source
file.
.SS "Forcin AutoLoader ta Load a Function"
.IX Subsection "Forcin AutoLoader ta Load a Function"
Sometimes, it can be necessary or useful ta make shizzle dat a cold-ass lil certain
function is straight-up loaded by AutoLoader n' shit. This is tha case, fo' example,
when you need ta wrap a gangbangin' function ta inject debuggin code. Well shiiiit, it be also
helpful ta force early loadin of code before forkin ta make use of
copy-on-write as much as possible.
.PP
Startin wit AutoLoader 5.73, you can call the
\&\f(CW\*(C`AutoLoader::autoload_sub\*(C'\fR function wit tha fully-qualified name of
the function ta load from its \fI.al\fR file. Da behaviour is exactly
the same as if you called tha function, triggerin tha regular
\&\f(CW\*(C`AUTOLOAD\*(C'\fR mechanizzle yo, but it do not straight-up execute the
autoloaded function.
.SH "CAVEATS"
.IX Header "CAVEATS"
AutoLoadaz prior ta Perl 5.002 had a slightly different intercourse.  Any
old modulez which use \fBAutoLoader\fR should be chizzled ta tha freshly smoked up calling
style.  Typically dis just means changin a require ta a use, adding
the explicit \f(CW\*(AqAUTOLOAD\*(Aq\fR import if needed, n' removin \fBAutoLoader\fR
from \f(CW@ISA\fR.
.PP
On systems wit restrictions on file name length, tha file corresponding
to a subroutine may gotz a gangbangin' finger-lickin' dirty-ass shorta name dat tha routine itself.  This
can lead ta conflictin file names.  Da \fIAutoSplit\fR package warns of
these potential conflicts when used ta split a module.
.PP
AutoLoader may fail ta find tha autosplit filez (or even find tha wrong
ones) up in cases where \f(CW@INC\fR gotz nuff relatizzle paths, \fBand\fR tha program
does \f(CW\*(C`chdir\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SelfLoader \- a autoloader dat don't use external files.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\f(CW\*(C`AutoLoader\*(C'\fR is maintained by tha perl5\-porters. Please direct
any thangs ta tha canonical mailin list fo' realz. Anythang that
is applicable ta tha \s-1CPAN\s0 release can be busted ta its maintainer,
though.
.PP
Lyricist n' Maintainer: Da Perl5\-Portas <perl5\-porters@perl.org>
.PP
Maintainer of tha \s-1CPAN\s0 release: Steffen Muella <smueller@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This package has been part of tha perl core since tha straight-up original gangsta release
of perl5. Well shiiiit, it has been busted out separately ta \s-1CPAN\s0 so olda installations
can benefit from bug fixes.
.PP
This package has tha same ol' dirty copyright n' license as tha perl core:
.PP
.Vb 4
\&             Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999,
\&        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
\&        2011, 2012
\&        by Larry Wall n' others
\&    
\&                            All muthafuckin rights reserved.
\&    
\&    This program is free software; you can redistribute it and/or modify
\&    it under tha termz of either:
\&    
\&        a) tha GNU General Public License as published by tha Free
\&        Software Foundation; either version 1, or (at yo' option) any
\&        lata version, or
\&    
\&        b) tha "Artistic License" which comes wit dis Kit.
\&    
\&    This program is distributed up in tha hope dat it is ghon be useful,
\&    but WITHOUT ANY WARRANTY; without even tha implied warranty of
\&    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
\&    tha GNU General Public License or tha Artistic License fo' mo' details.
\&    
\&    Yo ass should have received a cold-ass lil copy of tha Artistic License wit this
\&    Kit, up in tha file named "Artistic".  If not, I\*(Aqll be glad ta provide one.
\&    
\&    Yo ass should also have received a cold-ass lil copy of tha GNU General Public License
\&    along wit dis program up in tha file named "Copying". If not, write ta tha 
\&    Jacked Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
\&    MA 02110\-1301, USA or visit they wizzy page on tha internizzle at
\&    http://www.gnu.org/copyleft/gpl.html.
\&    
\&    For all y'all dat chizzle ta use tha GNU General Public License,
\&    mah interpretation of tha GNU General Public License is dat no Perl
\&    script falls under tha termz of tha GPL unless you explicitly put
\&    holla'd script under tha termz of tha GPL yo ass.  Furthermore, any
\&    object code linked wit perl do not automatically fall under the
\&    termz of tha GPL, provided such object code only addz definitions
\&    of subroutines n' variables, n' do not otherwise impair the
\&    resultin interpreta from executin any standard Perl script.  I
\&    consider linkin up in C subroutines up in dis manner ta be tha moral
\&    equivalent of definin subroutines up in tha Perl language itself.  You
\&    may push such a object file as proprietary provided dat you provide
\&    or offer ta provide tha Perl source, as specified by tha GNU General
\&    Public License.  (This is merely a alternate way of specifyin input
\&    ta tha program.)  Yo ass may also push a funky-ass binary produced by tha dumpin of
\&    a hustlin Perl script dat belongs ta you, provided dat you provide or
\&    offer ta provide tha Perl source as specified by tha GPL.  (The
\&    fact dat a Perl interpreta n' yo' code is up in tha same binary file
\&    is, up in dis case, a gangbangin' form of mere aggregation.)  This is mah interpretation
\&    of tha GPL.  If you still have concerns or bullshit understanding
\&    mah intent, feel free ta contact mah dirty ass.  Of course, tha Artistic License
\&    spells all dis up fo' yo' protection, so you may prefer ta use dis shit.
.Ve
