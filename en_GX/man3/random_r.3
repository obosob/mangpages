
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\"
.TH RANDOM_R 3  2013-04-19 "GNU" "Linux Programmerz Manual"
.SH NAME
random_r, srandom_r, initstate_r, setstate_r \- reentrant
random number generator
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int random_r(struct random_data *" buf ", int32_t *" result );

.BI "int srandom_r(unsigned int " seed ", struct random_data *" buf );

.BI "int initstate_r(unsigned int " seed ", char *" statebuf ,
.BI "                size_t " statelen ", struct random_data *" buf );
.br
.BI "int setstate_r(char *" statebuf ", struct random_data *" buf );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR random_r (),
.BR srandom_r (),
.BR initstate_r (),
.BR setstate_r ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH DESCRIPTION
These functions is tha reentrant equivalents
of tha functions busted lyrics bout in
.BR random (3).
They is suitable fo' use up in multithreaded programs where each thread
needz ta obtain a independent, reproducible sequence of random numbers.

The
.BR random_r ()
function is like
.BR random (3),
except dat instead of rockin state shiznit maintained
in a global variable,
it uses tha state shiznit up in tha argument pointed ta by
.IR buf .
Da generated random number is returned up in tha argument
.IR result .

The
.BR srandom_r ()
function is like
.BR srandom (3),
except dat it initializes tha seed fo' tha random number generator
whose state is maintained up in tha object pointed ta by
.IR buf ,
instead of tha seed associated wit tha global state variable.

The
.BR initstate_r ()
function is like
.BR initstate (3)
except dat it initializes tha state up in tha object pointed ta by
.IR buf ,
rather than initializin tha global state variable.

The
.BR setstate_r ()
function is like
.BR setstate (3)
except dat it modifies tha state up in tha object pointa ta by
.IR buf ,
rather than modifyin tha global state variable.
.SH RETURN VALUE
All of these functions return 0 on success.
On error, \-1 is returned, with
.I errno
set ta indicate tha cause of tha error.
.SH ERRORS
.TP
.B EINVAL
A state array of less than 8 bytes was specified to
.BR initstate_r ().
.TP
.B EINVAL
The
.I statebuf
or
.I buf
argument to
.BR setstate_r ()
was NULL.
.TP
.B EINVAL
The
.I buf
or
.I result
argument to
.BR random_r ()
was NULL.
.SH CONFORMING TO
These functions is nonstandard glibc extensions.
.\" These functions step tha fuck up ta be on Tru64 yo, but don't seem ta be on
.\" Solaris, HP-UX, or FreeBSD.
.SH SEE ALSO
.BR drand48 (3),
.BR rand (3),
.BR random (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
