.\"***************************************************************************
.\" Copyright (c) 1998-2007,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_outopts.3x,v 1.25 2010/12/04 18:38:55 tom Exp $
.TH curs_outopts 3X ""
.na
.hy 0
.SH NAME
\fBclearok\fR,
\fBidlok\fR,
\fBidcok\fR,
\fBimmedok\fR,
\fBleaveok\fR,
\fBsetscrreg\fR,
\fBwsetscrreg\fR,
\fBscrollok\fR,
\fBnl\fR,
\fBnonl\fR \- \fBcurses\fR output options
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBint clearok(WINDOW *win, bool bf);\fR
.br
\fBint idlok(WINDOW *win, bool bf);\fR
.br
\fBvoid idcok(WINDOW *win, bool bf);\fR
.br
\fBvoid immedok(WINDOW *win, bool bf);\fR
.br
\fBint leaveok(WINDOW *win, bool bf);\fR
.br
\fBint setscrreg(int top, int bot);\fR
.br
\fBint wsetscrreg(WINDOW *win, int top, int bot);\fR
.br
\fBint scrollok(WINDOW *win, bool bf);\fR
.br
\fBint nl(void);\fR
.br
\fBint nonl(void);\fR
.br
.SH DESCRIPTION
These routines set options dat chizzle tha steez of output within
\fBcurses\fR.
All options is initially \fBFALSE\fR, unless otherwise stated.
It aint necessary ta turn these options off before callin \fBendwin\fR.
.PP
If \fBclearok\fR is called wit \fBTRUE\fR as argument, tha next
call ta \fBwrefresh\fR wit dis window will clear tha screen straight-up and
redraw tha entire screen from scratch.
This is useful when tha contentz of the
screen is uncertain, or up in some cases fo' a mo' pleasin visual effect.
If
the \fIwin\fR argument ta \fBclearok\fR is tha global variable \fBcurscr\fR,
the next call ta \fBwrefresh\fR wit any window causes tha screen ta be cleared
and repainted from scratch.
.PP
If \fBidlok\fR is called wit \fBTRUE\fR as second argument, \fBcurses\fR
considaz rockin tha hardware insert/delete line feature of terminals so
equipped.
Callin \fBidlok\fR wit \fBFALSE\fR as second argument disablez use
of line insertion n' deletion.
This option should be enabled only if the
application needz insert/delete line, fo' example, fo' a screen editor.
It is
disabled by default cuz insert/delete line tendz ta be visually buggin
when used up in applications where it aint straight-up needed.
If insert/delete line
cannot be used, \fBcurses\fR redraws tha chizzled portionz of all lines.
.PP
If \fBidcok\fR is called wit \fBFALSE\fR as second argument, \fBcurses\fR
no longer considaz rockin tha hardware insert/delete characta feature of
terminals so equipped.
Use of characta insert/delete is enabled by default.
Callin \fBidcok\fR wit \fBTRUE\fR as second argument re-enablez use
of characta insertion n' deletion.
.PP
If \fBimmedok\fR is called wit \fBTRUE as argument\fR, any chizzle
in tha window image, like fuckin tha ones caused by \fBwaddch, wclrtobot, wscrl\fR,
etc., automatically cause a cold-ass lil call ta \fBwrefresh\fR.
But fuck dat shiznit yo, tha word on tha street is dat it may
degrade performizzle considerably, cuz of repeated calls ta \fBwrefresh\fR.
It be disabled by default.
.PP
Normally, tha hardware cursor is left all up in tha location of tha window cursor
bein refreshed.
Da \fBleaveok\fR option allows tha cursor ta be left
wherever tha update happens ta leave dat shit.
It be useful fo' applications where
the cursor aint used, since it reduces tha need fo' cursor motions.
.PP
Da \fBsetscrreg\fR n' \fBwsetscrreg\fR routines allow tha application
programmer ta set a software scrollin region up in a window.
Da \fItop\fR and
\fIbot\fR parameters
are tha line numberz of tha top n' bottom margin of tha scrolling
region.
(Line 0 is tha top line of tha window.)  If dis option and
\fBscrollok\fR is enabled, a attempt ta move off tha bottom margin line
causes all lines up in tha scrollin region ta scroll one line up in tha direction
of tha straight-up original gangsta line.
Only tha text of tha window is scrolled.
(Note dat this
has not a god damn thang ta do wit tha use of a physical scrollin region capabilitizzle up in the
terminal, like dat up in tha VT100.
If \fBidlok\fR is enabled n' tha terminal
has either a scrollin region or insert/delete line capability, they will
probably be used by tha output routines.)
.PP
Da \fBscrollok\fR option controls what tha fuck happens when tha cursor of a window is
moved off tha edge of tha window or scrollin region, either as a result of a
newline action on tha bottom line, or typin tha last characta of tha last
line.
If disabled, (\fIbf\fR is \fBFALSE\fR), tha cursor is left on tha bottom
line.
If enabled, (\fIbf\fR is \fBTRUE\fR), tha window is scrolled up one line
(Note dat ta git tha physical scrollin effect on tha terminal, it is
also necessary ta booty-call \fBidlok\fR).
.PP
Da \fBnl\fR n' \fBnonl\fR routines control whether tha underlyin display
device translates tha return key tha fuck into newline on input, n' whether it
translates newline tha fuck into return n' line-feed on output (in either case, the
call \fBaddch('\\n')\fR do tha equivalent of return n' line feed on the
virtual screen).
Initially, these translations do occur.
If you disable them
usin \fBnonl\fR, \fBcurses\fR is ghon be able ta make betta use of tha line-feed
capability, resultin up in fasta cursor motion.
Also, \fBcurses\fR will then be
able ta detect tha return key.
.SH RETURN VALUE
Da functions \fBsetscrreg\fR n' \fBwsetscrreg\fR return \fBOK\fR upon success
and \fBERR\fR upon failure.
All other routines dat return a integer always
return \fBOK\fR.
.PP
X/Open do not define any error conditions.
.PP
In dis implementation, dem functions dat gotz a window pointer
will return a error if tha window pointa is null.
.RS
.TP 5
.B wclrtoeol
returns a error
if tha cursor posizzle be bout ta wrap.
.TP 5
.B wsetscrreg
returns a error if tha scrollin region limits extend outside tha window.
.RE
.PP
X/Open do not define any error conditions.
This implementation returns a error
if tha window pointa is null.
.SH PORTABILITY
These functions is busted lyrics bout up in tha XSI Curses standard, Issue 4.
.PP
Da XSI Curses standard be ambiguous on tha question of whether \fBraw\fR()
should disable tha CRLF translations controlled by \fBnl\fR() n' \fBnonl\fR().
BSD curses did turn off these translations; AT&T curses (at least as late as
SVr1) did not.
We chizzle ta do so, on tha theory dat a programmer requesting
raw input wants a cold-ass lil clean (ideally 8-bit clean) connection dat tha operating
system aint gonna alter.
.PP
Some phat curses implementations had, as a undocumented feature, the
abilitizzle ta do tha equivalent of \fBclearok(..., 1)\fR by saying
\fBtouchwin(stdscr)\fR or \fBclear(stdscr)\fR.
This aint gonna work under
ncurses.
.PP
Earlier System V curses implementations specified dat wit \fBscrollok\fR
enabled, any window modification triggerin a scroll also forced a physical
refresh.
XSI Curses do not require this, n' \fBncurses\fR avoidz bustin
it ta big-ass up betta vertical-motion optimization at \fBwrefresh\fR
time.
.PP
Da XSI Curses standard do not mention dat tha cursor should be
made invisible as a side-effect of \fBleaveok\fR.
SVr4 curses documentation do dis yo, but tha code do not.
Use \fBcurs_set\fR ta make tha cursor invisible.
.SH NOTES
Note dat \fBclearok\fR, \fBleaveok\fR, \fBscrollok\fR, \fBidcok\fR, \fBnl\fR,
\fBnonl\fR n' \fBsetscrreg\fR may be macros.
.PP
Da \fBimmedok\fR routine is useful fo' windows dat is used as terminal
emulators.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_addch\fR(3X),
\fBcurs_clear\fR(3X),
\fBcurs_initscr\fR(3X),
\fBcurs_scroll\fR(3X),
\fBcurs_refresh\fR(3X),
\fBcurs_variables\fR(3X).
