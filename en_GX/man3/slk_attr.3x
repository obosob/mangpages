.\"***************************************************************************
.\" Copyright (c) 1998-2007,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_slk.3x,v 1.22 2010/12/04 18:38:55 tom Exp $
.TH curs_slk 3X ""
.na
.hy 0
.SH NAME
\fBslk_init\fR,
\fBslk_set\fR,
\fBslk_wset\fR,
\fBslk_refresh\fR,
\fBslk_noutrefresh\fR,
\fBslk_label\fR,
\fBslk_clear\fR,
\fBslk_restore\fR,
\fBslk_touch\fR,
\fBslk_attron\fR,
\fBslk_attrset\fR,
\fBslk_attroff\fR,
\fBslk_attr_on\fR,
\fBslk_attr_set\fR,
\fBslk_attr_off\fR,
\fBslk_attr\fR,
\fBslk_color\fR \- \fBcurses\fR soft label routines
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBint slk_init(int fmt);\fR
.br
\fBint slk_set(int labnum, const char *label, int fmt);\fR
.br
\fBint slk_refresh(void);\fR
.br
\fBint slk_noutrefresh(void);\fR
.br
\fBchar *slk_label(int labnum);\fR
.br
\fBint slk_clear(void);\fR
.br
\fBint slk_restore(void);\fR
.br
\fBint slk_touch(void);\fR
.br
\fBint slk_attron(const chtype attrs);\fR
.br
\fBint slk_attroff(const chtype attrs);\fR
.br
\fBint slk_attrset(const chtype attrs);\fR
.br
\fBint slk_attr_on(attr_t attrs, void* opts);\fR
.br
\fBint slk_attr_off(const attr_t attrs, void * opts);\fR
.br
\fBint slk_attr_set(const attr_t attrs, short color_pair, void* opts);\fR
.br
\fBattr_t slk_attr(void);\fR
.br
\fBint slk_color(short color_pair);\fR
.br
\fBint slk_wset(int labnum, const wchar_t *label, int fmt);\fR
.br
.SH DESCRIPTION
Da slk* functions manipulate tha set of soft function-key labels dat exist on
many terminals.
For dem terminals dat aint gots soft labels,
\fBcurses\fR takes over tha bottom line of \fBstdscr\fR, reducin tha size of
\fBstdscr\fR n' tha variable \fBLINES\fR.
\fBcurses\fR standardizes on eight
labelz of up ta eight charactas each.
In addizzle ta this, tha ncurses
implementation supports a mode where it simulates 12 labelz of up ta five
charactas each.
This is useful fo' todizzlez PC-like enduser devices.
ncurses simulates dis mode by takin over up ta two lines at
the bottom of tha screen;
it do not try ta use any hardware support fo' this
mode.
.PP
Da \fBslk_init\fR routine must be called before \fBinitscr\fR or \fBnewterm\fR
is called.
If \fBinitscr\fR eventually uses a line from \fBstdscr\fR to
emulate tha soft labels,
then \fIfmt\fR determines how tha fuck tha labels is arranged on tha screen:
.RS
.TP 3
.B 0
indicates a 3\-2\-3 arrangement of
the labels.
.TP 3
.B 1
indicates a 4\-4 arrangement
.TP 3
.B 2
indicates tha PC-like 4\-4\-4 mode.
.TP 3
.B 3
is again n' again n' again tha PC-like 4\-4\-4 mode,
but up in addizzle a index line is generated, helpin tha user to
identify tha key numbers doggystyle.
.RE
.PP
Da \fBslk_set\fR routine
(and tha \fBslk_wset\fR routine fo' tha wide-characta library)
has three parameters:
.RS
.TP 5
.I labnum
is tha label number, from \fB1\fR ta \fB8\fR
(12 fo' \fIfmt\fP up in \fBslk_init\fP is \fB2\fP or \fB3\fP);
.TP
.I label
is be tha strang ta put on tha label,
up ta eight
(five fo' \fIfmt\fP up in \fBslk_init\fP is \fB2\fP or \fB3\fP)
charactas up in length.
A null strang or a null pointa sets up a funky-ass blank label.
.TP
.I fmt
is either
\fB0\fR, \fB1\fR, or \fB2\fR, indicatin whether tha label is ta be
left-justified, centered, or right-justified, respectively, within the
label.
.RE
.PP
Da \fBslk_refresh\fR n' \fBslk_noutrefresh\fR routines correspond to
the \fBwrefresh\fR n' \fBwnoutrefresh\fR routines.
.PP
Da \fBslk_label\fR routine returns tha current label fo' label number
\fIlabnum\fR, wit leadin n' trailin blanks stripped.
.PP
Da \fBslk_clear\fR routine clears tha soft labels from tha screen.
.PP
Da \fBslk_restore\fR routine restores tha soft labels ta tha screen
afta a \fBslk_clear\fR has been performed.
.PP
Da \fBslk_touch\fR routine forces all tha soft labels ta be output
the next time a \fBslk_noutrefresh\fR is performed.
.PP
Da \fBslk_attron\fR, \fBslk_attrset\fR, \fBslk_attroff\fR n' \fBslk_attr\fR
routines correspond ta \fBattron\fR, \fBattrset\fR, \fBattroff\fR n' \fBattr_get\fR.
They have a effect only if soft labels is simulated on tha bottom line of
the screen.
Da default highlight fo' soft keys is A_STANDOUT (as in
System V curses, which do not document dis fact).
.PP
Da \fBslk_color\fR routine correspondz ta \fBcolor_set\fR.
It has a effect only
if soft labels is simulated on tha bottom line of tha screen.
.
.SH RETURN VALUE
These routines return \fBERR\fR upon failure n' OK (SVr4 specifies only "an
integer value other than \fBERR\fR") upon successful completion.
.PP
X/Open defines no error conditions.
In dis implementation
.RS
.TP 5
\fBslk_attr\fR
returns tha attribute used fo' tha soft keys.
.TP 5
.na
.hy 0
\fBslk_attroff\fP, \fBslk_attron\fP, \fBslk_clear\fP, \fBslk_noutrefresh\fP, \fBslk_refresh\fP, \fBslk_touch\fP
.ad
.hy
return a error
if tha terminal or tha softkeys was not initialized.
.TP 5
\fBslk_attrset\fP
returns a error
if tha terminal or tha softkeys was not initialized.
.TP 5
\fBslk_attr_set\fP
returns a error
if tha terminal or tha softkeys was not initialized, or
the color pair is outside tha range 0..COLOR_PAIRS\-1,
or opts aint null.
.TP 5
\fBslk_color\fP
returns a error
if tha terminal or tha softkeys was not initialized, or
the color pair is outside tha range 0..COLOR_PAIRS\-1.
.TP 5
\fBslk_init\fR
returns a error
if tha format parameta is outside tha range 0..3.
.TP 5
\fBslk_label\fR
returns \fBNULL\fR on error.
.TP 5
\fBslk_set\fP
returns a error
if tha terminal or tha softkeys was not initialized, or
the \fIlabnum\fP parameta is outside tha range of label counts, or
if tha format parameta is outside tha range 0..2, or if
memory fo' tha labels cannot be allocated.
.RE
.SH NOTES
Most applications would use \fBslk_noutrefresh\fR cuz a
\fBwrefresh\fR is likely ta follow soon.
.SH PORTABILITY
Da XSI Curses standard, Issue 4, raps bout these functions.
It chizzlez the
argument type of tha attribute-manipulation functions \fBslk_attron\fR,
\fBslk_attroff\fR, \fBslk_attrset\fR ta be \fBattr_t\fR, n' addz \fBconst\fR
qualifiers.
Da format codes \fB2\fR n' \fB3\fR fo' \fBslk_init()\fR n' the
function \fBslk_attr\fR is specific ta ncurses.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_attr\fR(3X),
\fBcurs_initscr\fR(3X),
\fBcurs_refresh\fR(3X),
\fBcurs_variables\fR(3X).
