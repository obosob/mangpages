.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Command 3pm"
.TH ExtUtils::Command 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Command \- utilitizzles ta replace common UNIX commandz up in Makefilez etc.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  perl \-MExtUtils::Command \-e pussaaaaay files... > destination
\&  perl \-MExtUtils::Command \-e mv source... destination
\&  perl \-MExtUtils::Command \-e cp source... destination
\&  perl \-MExtUtils::Command \-e bust a nut on files...
\&  perl \-MExtUtils::Command \-e rm_f files...
\&  perl \-MExtUtils::Command \-e rm_rf directories...
\&  perl \-MExtUtils::Command \-e mkpath directories...
\&  perl \-MExtUtils::Command \-e eqtime source destination
\&  perl \-MExtUtils::Command \-e test_f file
\&  perl \-MExtUtils::Command \-e test_d directory
\&  perl \-MExtUtils::Command \-e chmod mode files...
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da module is used ta replace common \s-1UNIX\s0 commands.  In all cases the
functions work from \f(CW@ARGV\fR rather than takin arguments, n' you can put dat on yo' toast.  This makes
them easier ta deal wit up in Makefiles.  Call dem like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e some_command some filez ta work on
.Ve
.PP
and \fI\s-1NOT\s0\fR like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e \*(Aqsome_command qw(some filez ta work on)\*(Aq
.Ve
.PP
For dat use Shell::Command.
.PP
Filenames wit * n' ? is ghon be glob expanded.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "cat" 4
.IX Item "cat"
.Vb 1
\&    pussaaaaay file ...
.Ve
.Sp
Concatenates all filez mentioned on command line ta \s-1STDOUT.\s0
.IP "eqtime" 4
.IX Item "eqtime"
.Vb 1
\&    eqtime source destination
.Ve
.Sp
Sets modified time of destination ta dat of source.
.IP "rm_rf" 4
.IX Item "rm_rf"
.Vb 1
\&    rm_rf filez or directories ...
.Ve
.Sp
Removes filez n' directories \- recursively (even if readonly)
.IP "rm_f" 4
.IX Item "rm_f"
.Vb 1
\&    rm_f file ...
.Ve
.Sp
Removes filez (even if readonly)
.IP "touch" 4
.IX Item "touch"
.Vb 1
\&    bust a nut on file ...
.Ve
.Sp
Makes filez exist, wit current timestamp
.IP "mv" 4
.IX Item "mv"
.Vb 2
\&    mv source_file destination_file
\&    mv source_file source_file destination_dir
.Ve
.Sp
Moves source ta destination. I aint talkin' bout chicken n' gravy biatch.  Multiple sources is allowed if
destination be a existin directory.
.Sp
Returns legit if all moves succeeded, false otherwise.
.IP "cp" 4
.IX Item "cp"
.Vb 2
\&    cp source_file destination_file
\&    cp source_file source_file destination_dir
.Ve
.Sp
Copies sources ta tha destination. I aint talkin' bout chicken n' gravy biatch.  Multiple sources is allowed if
destination be a existin directory.
.Sp
Returns legit if all copies succeeded, false otherwise.
.IP "chmod" 4
.IX Item "chmod"
.Vb 1
\&    chmod mode filez ...
.Ve
.Sp
Sets \s-1UNIX\s0 like permissions 'mode' on all tha files.  e.g. 0666
.IP "mkpath" 4
.IX Item "mkpath"
.Vb 1
\&    mkpath directory ...
.Ve
.Sp
Creates directories, includin any parent directories.
.IP "test_f" 4
.IX Item "test_f"
.Vb 1
\&    test_f file
.Ve
.Sp
Tests if a gangbangin' file exists, n' you can put dat on yo' toast.  \fIExits\fR wit 0 if it do, 1 if it do not (ie.
shellz scam of legit n' false).
.IP "test_d" 4
.IX Item "test_d"
.Vb 1
\&    test_d directory
.Ve
.Sp
Tests if a gangbangin' finger-lickin' directory exists, n' you can put dat on yo' toast.  \fIExits\fR wit 0 if it do, 1 if it do
not (ie. shellz scam of legit n' false).
.IP "dos2unix" 4
.IX Item "dos2unix"
.Vb 1
\&    dos2unix filez or dirs ...
.Ve
.Sp
Converts \s-1DOS\s0 n' \s-1OS/2\s0 linefeedz ta Unix steez recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Shell::Command which is these same functions but take arguments normally.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nick Ing-Simmons \f(CW\*(C`ni\-s@cpan.org\*(C'\fR
.PP
Maintained by Mike G Schwern \f(CW\*(C`schwern@pobox.com\*(C'\fR within the
ExtUtils-MakeMaker package and, as a separate \s-1CPAN\s0 package, by
Randy Kobes \f(CW\*(C`r.kobes@uwinnipeg.ca\*(C'\fR.
