.TH PCRE_JIT_STACK_ALLOC 3 "24 June 2012" "PCRE 8.30"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH SYNOPSIS
.rs
.sp
.B #include <pcre.h>
.PP
.SM
.B pcre_jit_stack *pcre_jit_stack_alloc(int \fIstartsize\fP,
.ti +5n
.B int \fImaxsize\fP);
.PP
.B pcre16_jit_stack *pcre16_jit_stack_alloc(int \fIstartsize\fP,
.ti +5n
.B int \fImaxsize\fP);
.PP
.B pcre32_jit_stack *pcre32_jit_stack_alloc(int \fIstartsize\fP,
.ti +5n
.B int \fImaxsize\fP);
.
.SH DESCRIPTION
.rs
.sp
This function is used ta create a stack fo' use by tha code compiled by tha JIT
optimization of \fBpcre[16|32]_study()\fP. Da arguments is a startin size for
the stack, n' a maximum size ta which it be allowed ta grow. Da result can be
passed ta tha JIT run-time code by \fBpcre[16|32]_assign_jit_stack()\fP, or that
function can set up a cold-ass lil callback fo' obtainin a stack fo' realz. A maximum stack size of
512K ta 1M should be mo' than enough fo' any pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. For mo' details, see
the
.\" HREF
\fBpcrejit\fP
.\"
page.
.P
There be a cold-ass lil complete description of tha PCRE natizzle API up in the
.\" HREF
\fBpcreapi\fP
.\"
page n' a thugged-out description of tha POSIX API up in the
.\" HREF
\fBpcreposix\fP
.\"
page.
