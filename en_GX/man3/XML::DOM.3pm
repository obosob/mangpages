.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::DOM 3"
.TH XML::DOM 3 "2005-07-26" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::DOM \- A perl module fo' buildin DOM Level 1 compliant document structures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use XML::DOM;
\&
\& mah $parser = freshly smoked up XML::DOM::Parser;
\& mah $doc = $parser\->parsefile ("file.xml");
\&
\& # print all HREF attributez of all CODEBASE elements
\& mah $nodes = $doc\->getElementsByTagName ("CODEBASE");
\& mah $n = $nodes\->getLength;
\&
\& fo' (my $i = 0; $i < $n; $i++)
\& {
\&     mah $node = $nodes\->item ($i);
\&     mah $href = $node\->getAttributeNode ("HREF");
\&     print $href\->getValue . "\en";
\& }
\&
\& # Print doc file
\& $doc\->printToFile ("out.xml");
\&
\& # Print ta string
\& print $doc\->toString;
\&
\& # Avoid memory leaks \- cleanup circular references fo' garbage collection
\& $doc\->dispose;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module extendz tha XML::Parser module by Clark Cooper n' shit. 
Da XML::Parser module is built on top of XML::Parser::Expat, 
which be a lower level intercourse ta Jizzy Clarkz expat library.
.PP
XML::DOM::Parser is derived from XML::Parser n' shit. Well shiiiit, it parses \s-1XML\s0 strings or files
and buildz a thugged-out data structure dat conforms ta tha \s-1API\s0 of tha Document Object 
Model as busted lyrics bout at http://www.w3.org/TR/REC\-DOM\-Level\-1.
See tha XML::Parser manpage fo' other available featurez of tha 
XML::DOM::Parser class. 
Note dat tha 'Style' property should not be used (it is set internally.)
.PP
Da XML::Parser \fINoExpand\fR option is mo' or less supported, up in dat it will
generate EntityReference objects whenever a entitizzle reference is encountered
in characta data. I aint shizzle how tha fuck useful dis is fo' realz. Any comments is welcome.
.PP
As busted lyrics bout up in tha synopsis, when you create a XML::DOM::Parser object, 
the parse n' parsefile methodz create a \fIXML::DOM::Document\fR object
from tha specified input. This Document object can then be examined, modified and
written back up ta a gangbangin' file or converted ta a string.
.PP
When rockin \s-1XML::DOM\s0 wit XML::Parser version 2.19 n' up, settin tha 
XML::DOM::Parser option \fIKeepCDATA\fR ta 1 will store CDATASections in
CDATASection nodes, instead of convertin dem ta Text nodes.
Subsequent CDATASection nodes is ghon be merged tha fuck into one. Let me know if this
is a problem.
.PP
When rockin XML::Parser 2.27 n' above, you can suppress expansion of
parameta entitizzle references (e.g. \f(CW%pent\fR;) up in tha \s-1DTD,\s0 by settin \fIParseParamEnt\fR
to 1 n' \fIExpandParamEnt\fR ta 0. Right back up in yo muthafuckin ass. See Hidden Nodes fo' details.
.PP
A Document has a tree structure consistin of \fINode\fR objects fo' realz. A Node may contain
other nodes, dependin on its type.
A Document may have Element, Text, Comment, n' CDATASection nodes. 
Element nodes may have Attr, Element, Text, Comment, n' CDATASection nodes. 
Da other nodes may not have any lil pimp nodes.
.PP
This module addz nuff muthafuckin node types dat is not part of tha \s-1DOM\s0 spec (yet.)
These are: ElementDecl (for <!ELEMENT ...> declarations), AttlistDecl (for
<!ATTLIST ...> declarations), XMLDecl (for <?xml ...?> declarations) n' AttDef
(for attribute definitions up in a AttlistDecl.)
.SH "XML::DOM Classes"
.IX Header "XML::DOM Classes"
Da \s-1XML::DOM\s0 module stores \s-1XML\s0 documents up in a tree structure wit a root node
of type XML::DOM::Document. Different nodes up in tree represent different
partz of tha \s-1XML\s0 file. Da \s-1DOM\s0 Level 1 Justification defines tha following
node types:
.IP "\(bu" 4
XML::DOM::Node \- Supa class of all node types
.IP "\(bu" 4
XML::DOM::Document \- Da root of tha \s-1XML\s0 document
.IP "\(bu" 4
XML::DOM::DocumentType \- Describes tha document structure: <!DOCTYPE root [ ... ]>
.IP "\(bu" 4
XML::DOM::Element \- An \s-1XML\s0 element: <elem attr=\*(L"val\*(R"> ... </elem>
.IP "\(bu" 4
XML::DOM::Attr \- An \s-1XML\s0 element attribute: name=\*(L"value\*(R"
.IP "\(bu" 4
XML::DOM::CharacterData \- Supa class of Text, Comment n' CDATASection
.IP "\(bu" 4
XML::DOM::Text \- Text up in a \s-1XML\s0 element
.IP "\(bu" 4
XML::DOM::CDATASection \- Escaped block of text: <![CDATA[ text ]]>
.IP "\(bu" 4
XML::DOM::Comment \- An \s-1XML\s0 comment: <!\-\- comment \-\->
.IP "\(bu" 4
XML::DOM::EntityReference \- Refers ta a \s-1ENTITY:\s0 &ent; or \f(CW%ent\fR;
.IP "\(bu" 4
XML::DOM::Entitizzle \- An \s-1ENTITY\s0 definition: <!ENTITY ...>
.IP "\(bu" 4
XML::DOM::ProcessingInstruction \- <?PI target>
.IP "\(bu" 4
XML::DOM::DocumentFragment \- Lightweight node fo' cut & paste
.IP "\(bu" 4
XML::DOM::Notation \- An \s-1NOTATION\s0 definition: <!NOTATION ...>
.PP
In addition, tha \s-1XML::DOM\s0 module gotz nuff tha followin nodes dat is not part 
of tha \s-1DOM\s0 Level 1 Justification:
.IP "\(bu" 4
XML::DOM::ElementDecl \- Defines a element: <!ELEMENT ...>
.IP "\(bu" 4
XML::DOM::AttlistDecl \- Defines one or mo' attributes up in a <!ATTLIST ...>
.IP "\(bu" 4
XML::DOM::AttDef \- Defines one attribute up in a <!ATTLIST ...>
.IP "\(bu" 4
XML::DOM::XMLDecl \- An \s-1XML\s0 declaration: <?xml version=\*(L"1.0\*(R" ...>
.PP
Other classes dat is part of tha \s-1DOM\s0 Level 1 Spec:
.IP "\(bu" 4
XML::DOM::Implementation \- Provides shiznit bout dis implementation. I aint talkin' bout chicken n' gravy biatch. Currently it don't do much.
.IP "\(bu" 4
XML::DOM::NodeList \- Used internally ta store a nodez lil pimp nodes fo' realz. Also returned by getElementsByTagName.
.IP "\(bu" 4
XML::DOM::NamedNodeMap \- Used internally ta store a elementz attributes.
.PP
Other classes dat is not part of tha \s-1DOM\s0 Level 1 Spec:
.IP "\(bu" 4
XML::DOM::Parser \- An non-valipimpin \s-1XML\s0 parser dat creates XML::DOM::Documents
.IP "\(bu" 4
XML::DOM::ValParser \- A valipimpin \s-1XML\s0 parser dat creates XML::DOM::Documents, n' you can put dat on yo' toast. Well shiiiit, it uses XML::Checker ta check against tha DocumentType (\s-1DTD\s0)
.IP "\(bu" 4
XML::Handlez::BuildDOM \- A PerlSAX handlez dat creates XML::DOM::Documents.
.SH "XML::DOM package"
.IX Header "XML::DOM package"
.IP "Constant definitions" 4
.IX Item "Constant definitions"
Da followin predefined constants indicate which type of node it is.
.PP
.Vb 1
\& UNKNOWN_NODE (0)                Da node type is unknown (not part of DOM)
\&
\& ELEMENT_NODE (1)                Da node be a Element.
\& ATTRIBUTE_NODE (2)              Da node be a Attr.
\& TEXT_NODE (3)                   Da node be a Text node.
\& CDATA_SECTION_NODE (4)          Da node be a CDATASection.
\& ENTITY_REFERENCE_NODE (5)       Da node be a EntityReference.
\& ENTITY_NODE (6)                 Da node be a Entity.
\& PROCESSING_INSTRUCTION_NODE (7) Da node be a ProcessingInstruction.
\& COMMENT_NODE (8)                Da node be a Comment.
\& DOCUMENT_NODE (9)               Da node be a Document.
\& DOCUMENT_TYPE_NODE (10)         Da node be a DocumentType.
\& DOCUMENT_FRAGMENT_NODE (11)     Da node be a DocumentFragment.
\& NOTATION_NODE (12)              Da node be a Notation.
\&
\& ELEMENT_DECL_NODE (13)          Da node be a ElementDecl (not part of DOM)
\& ATT_DEF_NODE (14)               Da node be a AttDef (not part of DOM)
\& XML_DECL_NODE (15)              Da node be a XMLDecl (not part of DOM)
\& ATTLIST_DECL_NODE (16)          Da node be a AttlistDecl (not part of DOM)
\&
\& Usage:
\&
\&   if ($node\->getNodeType == ELEMENT_NODE)
\&   {
\&       print "It\*(Aqs a Element";
\&   }
.Ve
.PP
\&\fBNot In \s-1DOM\s0 Spec\fR: Da \s-1DOM\s0 Spec do not mention \s-1UNKNOWN_NODE\s0 and, 
quite frankly, you should never encounta dat shit. Da last 4 node types was added
to support tha 4 added node classes.
.SS "Global Variables"
.IX Subsection "Global Variables"
.ie n .IP "$VERSION" 4
.el .IP "\f(CW$VERSION\fR" 4
.IX Item "$VERSION"
Da variable \f(CW$XML::DOM::VERSION\fR gotz nuff tha version number of dis 
implementation, e.g. \*(L"1.43\*(R".
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
These methodz is not part of tha \s-1DOM\s0 Level 1 Justification.
.IP "getIgnoreReadOnly n' ignoreReadOnly (readOnly)" 4
.IX Item "getIgnoreReadOnly n' ignoreReadOnly (readOnly)"
Da \s-1DOM\s0 Level 1 Spec do not allow you ta edit certain sectionz of tha document,
e.g. tha DocumentType, so by default dis implementation throws DOMExceptions
(i.e. \s-1NO_MODIFICATION_ALLOWED_ERR\s0) when you try ta edit a readonly node. 
These readonly checks can be disabled by (temporarily) settin tha global 
IgnoreReadOnly flag.
.Sp
Da ignoreReadOnly method sets tha global IgnoreReadOnly flag n' returns its
previous value. Da getIgnoreReadOnly method simply returns its current value.
.Sp
.Vb 5
\& mah $oldIgnore = XML::DOM::ignoreReadOnly (1);
\& eval {
\& ... do whatever you want, catchin any other exceptions ...
\& };
\& XML::DOM::ignoreReadOnly ($oldIgnore);     # restore previous value
.Ve
.Sp
Another way ta do it, rockin a local variable:
.Sp
.Vb 4
\& { # start freshly smoked up scope
\&    local $XML::DOM::IgnoreReadOnly = 1;
\&    ... do whatever you want, don\*(Aqt worry bout exceptions ...
\& } # end of scope ($IgnoreReadOnly is set back ta its previous value)
.Ve
.IP "isValidName (name)" 4
.IX Item "isValidName (name)"
Whether tha specified name be a valid \*(L"Name\*(R" as specified up in tha \s-1XML\s0 spec.
Charactas wit Unicode joints > 127 is now also supported.
.IP "getAllowReservedNames n' allowReservedNames (boolean)" 4
.IX Item "getAllowReservedNames n' allowReservedNames (boolean)"
Da first method returns whether reserved names is allowed. Y'all KNOW dat shit, muthafucka! 
Da second takes a funky-ass boolean argument n' sets whether reserved names is allowed.
Da initial value is 1 (i.e. allow reserved names.)
.Sp
Da \s-1XML\s0 spec states dat \*(L"Names\*(R" startin wit (X|x)(M|m)(L|l)
are reserved fo' future use. (Amusingly enough, tha \s-1XML\s0 version of tha \s-1XML\s0 spec
(REC\-xml\-19980210.xml) breaks dat straight-up rule by definin a \s-1ENTITY\s0 wit tha name 
\&'xmlpio'.)
A \*(L"Name\*(R" up in dis context means tha Name token as found up in tha \s-1BNF\s0 rulez up in the
\&\s-1XML\s0 spec.
.Sp
\&\s-1XML::DOM\s0 only checks fo' errors when you modify tha \s-1DOM\s0 tree, not when the
\&\s-1DOM\s0 tree is built by tha XML::DOM::Parser.
.IP "setTagCompression (funcref)" 4
.IX Item "setTagCompression (funcref)"
There is 3 possible stylez fo' printin empty Element tags:
.RS 4
.IP "Style 0" 4
.IX Item "Style 0"
.Vb 1
\& <empty/> or <empty attr="val"/>
.Ve
.Sp
\&\s-1XML::DOM\s0 uses dis steez by default fo' all Elements.
.IP "Style 1" 4
.IX Item "Style 1"
.Vb 1
\&  <empty></empty> or <empty attr="val"></empty>
.Ve
.IP "Style 2" 4
.IX Item "Style 2"
.Vb 1
\&  <empty /> or <empty attr="val" />
.Ve
.Sp
This steez is sometimes desired when rockin \s-1XHTML. 
\&\s0(Note tha extra space before tha slash \*(L"/\*(R")
See <http://www.w3.org/TR/xhtml1> Appendix C fo' mo' details.
.RE
.RS 4
.Sp
By default \s-1XML::DOM\s0 compresses all empty Element tags (style 0.)
Yo ass can control which steez is used fo' a particular Element by calling
XML::DOM::setTagCompression wit a reference ta a gangbangin' function dat takes
2 arguments, n' you can put dat on yo' toast. Da first is tha tag name of tha Element, tha second is the
XML::DOM::Element dat is bein printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
Da function should return 0, 1 or 2 ta indicate which steez should be used to
print tha empty tag. E.g.
.Sp
.Vb 1
\& XML::DOM::setTagCompression (\e&my_tag_compression);
\&
\& sub my_tag_compression
\& {
\&    mah ($tag, $elem) = @_;
\&
\&    # Print empty br, hr n' img tags like this: <br />
\&    return 2 if $tag =~ /^(br|hr|img)$/;
\&
\&    # Print other empty tags like this: <empty></empty>
\&    return 1;
\& }
.Ve
.RE
.SH "IMPLEMENTATION DETAILS"
.IX Header "IMPLEMENTATION DETAILS"
.IP "\(bu" 4
Perl Mappings
.Sp
Da value undef was used when tha \s-1DOM\s0 Spec holla'd null.
.Sp
Da \s-1DOM\s0 Spec says: Applications must encode DOMStrin rockin \s-1UTF\-16 \s0(defined up in 
Appendix C.3 of [\s-1UNICODE\s0] n' Amendment 1 of [\s-1ISO\-10646\s0]).
In dis implementation we use plain oldschool Perl strings encoded up in \s-1UTF\-8\s0 instead of
\&\s-1UTF\-16.\s0
.IP "\(bu" 4
Text n' CDATASection nodes
.Sp
Da Expat parser expandz EntityReferences n' CDataSection sections ta 
raw strings n' do not indicate where dat shiznit was found. Y'all KNOW dat shit, muthafucka! 
This implementation do therefore convert both ta Text nodes at parse time.
CDATASection n' EntityReference nodes dat is added ta a existin Document 
(by tha user) is ghon be preserved.
.Sp
Also, subsequent Text nodes is always merged at parse time. Text nodes dat is 
added lata can be merged wit tha normalize method. Y'all KNOW dat shit, muthafucka! Consider rockin tha addText
method when addin Text nodes.
.IP "\(bu" 4
Printin n' toString
.Sp
When printin (and convertin a \s-1XML\s0 Document ta a string) tha strings gotta 
encoded differently dependin on where they occur. Shiiit, dis aint no joke. E.g. up in a CDATASection all 
substrings is allowed except fo' \*(L"]]>\*(R". In regular text, certain charactas are
not allowed, e.g. \*(L">\*(R" has ta be converted ta \*(L"&gt;\*(R". 
These routines should be verified by one of mah thugs whoz ass knows tha details.
.IP "\(bu" 4
Quotes
.Sp
Certain sections up in \s-1XML\s0 is quoted, like attribute joints up in a Element.
XML::Parser strips these quotes n' tha print methodz up in dis implementation 
always uses double quotes, so when parsin n' printin a thugged-out document, single quotes
may be converted ta double quotes. Da default value of a attribute definition
(AttDef) up in a AttlistDecl, however, will maintain its quotes.
.IP "\(bu" 4
AttlistDecl
.Sp
Attribute declarations fo' a cold-ass lil certain Element is always merged tha fuck into a single
AttlistDecl object.
.IP "\(bu" 4
Comments
.Sp
Comments up in tha \s-1DOCTYPE\s0 section is not kept up in tha right place. They will become
child nodez of tha Document.
.IP "\(bu" 4
Hidden Nodes
.Sp
Previous versionz of \s-1XML::DOM\s0 would expand parameta entitizzle references
(like \fB\f(CB%pent\fB;\fR), so when printin tha \s-1DTD,\s0 it would print tha contents
of tha external entity, instead of tha parameta entitizzle reference.
With dis release (1.27), you can prevent dis by settin tha XML::DOM::Parser
options ParseParamEnt => 1 n' ExpandParamEnt => 0.
.Sp
When it is parsin tha contentz of tha external entities, it *DOES* still add
the nodes ta tha DocumentType yo, but it marks these nodes by setting
the 'Hidden' property. In addition, it addz a EntityReference node ta the
DocumentType node.
.Sp
When printin tha DocumentType node (or when rockin \fIto_expat()\fR or \fIto_sax()\fR), 
the 'Hidden' nodes is suppressed, so yo big-ass booty is ghon peep tha parameta entity
reference instead of tha contentz of tha external entities. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. See test case
t/dom_extent.t fo' a example.
.Sp
Da reason fo' addin tha 'Hidden' nodes ta tha DocumentType node, is that
the nodes may contain <!ENTITY> definitions dat is referenced further
in tha document. (Simply not addin tha nodes ta tha DocumentType could
cause such entitizzle references ta be expanded incorrectly.)
.Sp
Note dat you need XML::Parser 2.27 or higher fo' dis ta work erectly.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::DOM::XPath
.PP
Da Japanese version of dis document by Takanori Kawai (Hippo2000)
at <http://member.nifty.ne.jp/hippo2000/perltips/xml/dom.htm>
.PP
Da \s-1DOM\s0 Level 1 justification at <http://www.w3.org/TR/REC\-DOM\-Level\-1>
.PP
Da \s-1XML\s0 spec (Extensible Markup Language 1.0) at <http://www.w3.org/TR/REC\-xml>
.PP
Da XML::Parser n' XML::Parser::Expat manual pages.
.PP
XML::LibXML also serves up a \s-1DOM\s0 Parser, n' is hella faster
than \s-1XML::DOM,\s0 n' is under actizzle pimpment.  It requires dat you 
downlizzle tha Gnome libxml library.
.PP
\&\s-1XML::GDOME\s0 will provide tha \s-1DOM\s0 Level 2 Core \s-1API,\s0 n' should be
as fast as XML::LibXML yo, but mo' robust, since it uses tha memory
management functionz of libgdome.  For mo' details see
<http://tjmather.com/xml\-gdome/>
.SH "CAVEATS"
.IX Header "CAVEATS"
Da method \fIgetElementsByTagName()\fR do not return a \*(L"live\*(R" NodeList.
Whether dis be a actual caveat is debatable yo, but all dem playas on tha 
www-dom mailin list seemed ta be thinkin so. I aint decided yet. It aint nuthin but a pain
to implement, it slows thangs down n' tha benefits seem marginal.
Let me know what tha fuck you think.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enno Derksen is tha original gangsta lyricist.
.PP
Send patches ta T.J. Mather at <\fItjmather@maxmind.com\fR>.
.PP
Paid support be available from directly from tha maintainerz of dis package.
Please peep <http://www.maxmind.com/app/opensourceskillz> fo' mo' details.
.PP
Thanks ta Clark Cooper fo' his help wit tha initial version.
