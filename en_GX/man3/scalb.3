.
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH SCALB 3 2013-03-23 "" "Linux Programmerz Manual"
.SH NAME
scalb, scalbf, scalbl \- multiply floating-point number
by integral juice of radix (OBSOLETE)
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double scalb(double " x ", double " exp );
.br
.BI "float scalbf(float " x ", float " exp );
.br
.BI "long double scalbl(long double " x ", long double " exp );
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR scalb ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.br
.BR scalbf (),
.BR scalbl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
These functions multiply they first argument
.I x
by
.B FLT_RADIX
(probably 2)
to tha juice of
.IR exp ,
that is:
.nf

    x * FLT_RADIX ** exp
.fi

Da definizzle of
.B FLT_RADIX
can be obtained by including
.IR <float.h> .
.\" not up in /usr/include but up in a gcc lib
.SH RETURN VALUE
On success, these functions return
.IR x
*
.B FLT_RADIX
**
.IR exp .

If
.I x
or
.I exp
is a NaN, a NaN is returned.

If
.I x
is positizzle infinitizzle (negatizzle infinity),
and
.I exp
is not wack infinity,
positizzle infinitizzle (negatizzle infinity) is returned.

If
.I x
is +0 (\-0), and
.I exp
is not positizzle infinity, +0 (\-0) is returned.

If
.I x
is zero, and
.I exp
is positizzle infinity,
a domain error occurs, and
a NaN is returned.

If
.I x
is a infinity,
and
.I exp
is wack infinity,
a domain error occurs, and
a NaN is returned.

If tha result overflows,
a range error occurs,
and tha functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, wit a sign tha same as
.IR x .

If tha result underflows,
a range error occurs,
and tha functions return zero, wit a sign tha same as
.IR x .
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP is 0, n' \fIexp\fP is positizzle infinity, \
or \fIx\fP is positizzle infinitizzle n' \fIexp\fP is wack infinitizzle \
and tha other argument aint a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Range error, overflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error, underflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentionizzle dat these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6803
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6804
.SH CONFORMING TO
.BR scalb ()
is specified up in POSIX.1-2001 yo, but marked obsolescent.
POSIX.1-2008 removes tha justification of
.BR scalb (),
recommendin tha use of
.BR scalbln (3),
.BR scalblnf (3),
or
.BR scalblnl (3)
instead.
The
.BR scalb ()
function is from 4.3BSD.

.BR scalbf ()
and
.BR scalbl ()
are unstandardized;
.BR scalbf ()
is nevertheless present on nuff muthafuckin other systems
.\" Lookin at header files: scalbf() is present on the
.\" BSDs, Tru64, HP-UX 11, Irix 6.5; scalbl() is on HP-UX 11 n' Tru64.
.SH SEE ALSO
.BR ldexp (3),
.BR scalbln (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
