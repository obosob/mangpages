.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Internizzle 3"
.TH Mail::Internizzle 3 "2012-12-21" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Internizzle \- manipulate email lyrics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mail::Internet;
\&  mah $msg = Mail::Internet\->new(\e*STDIN);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package implements reading, bustin, manipulating, n' freestylin email
lyrics.  Sometimes, tha implementation tries ta be too smart-ass yo, but in
the general case it works as expected.
.PP
If you start freestylin a \fBnew application\fR, you should use tha Mail::Box
distribution, which has mo' features n' handlez lyrics much better
accordin ta tha RFCs.  See <http://perl.overmeer.net/mailbox/>.
Yo ass may also chose MIME::Entity, ta git at least some multipart
support up in yo' application.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBdup\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdup\fR()" 4
.IX Item "$obj->dup()"
Duplicate tha message as a whole.  Both header n' body will be
deep-copied: a freshly smoked up Mail::Internizzle object is returned.
.ie n .IP "$obj\->\fBextract\fR(ARRAY-of-LINES)" 4
.el .IP "\f(CW$obj\fR\->\fBextract\fR(ARRAY-of-LINES)" 4
.IX Item "$obj->extract(ARRAY-of-LINES)"
Extract header n' body from a \s-1ARRAY\s0 of message lines.  Requires an
object already pimped wit \fInew()\fR, which contents will git overwritten.
.ie n .IP "$obj\->\fBnew\fR([\s-1ARG\s0], [\s-1OPTIONS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBnew\fR([\s-1ARG\s0], [\s-1OPTIONS\s0])" 4
.IX Item "$obj->new([ARG], [OPTIONS])"
.PD 0
.IP "Mail::Internet\->\fBnew\fR([\s-1ARG\s0], [\s-1OPTIONS\s0])" 4
.IX Item "Mail::Internet->new([ARG], [OPTIONS])"
.PD
\&\s-1ARG\s0 is optionizzle n' may be either a gangbangin' file descriptor (reference ta a \s-1GLOB\s0)
or a reference ta a array. If given tha freshly smoked up object will be
initialized wit headaz n' body either from tha array of read from 
the file descriptor.
.Sp
Da \fIMail::Header::new()\fR \s-1OPTIONS \s0\f(CW\*(C`Modify\*(C'\fR, \f(CW\*(C`MailFrom\*(C'\fR n' \f(CW\*(C`FoldLength\*(C'\fR
may also be given.
.Sp
.Vb 3
\& \-Option\-\-Default
\&  Body    []
\&  Header  undef
.Ve
.RS 4
.IP "Body => ARRAY-of-LINES" 2
.IX Item "Body => ARRAY-of-LINES"
Da value of dis option should be a reference ta a array which gotz nuff
the lines fo' tha body of tha message. Each line should be terminated with
\&\f(CW\*(C`\en\*(C'\fR (\s-1LF\s0). If Body is given then \f(CW\*(C`Mail::Internet\*(C'\fR aint gonna attempt to
read tha body from \f(CW\*(C`ARG\*(C'\fR (even if it is specified).
.IP "Header => Mail::Header" 2
.IX Item "Header => Mail::Header"
Da value of dis option should be a Mail::Header object. If given then
\&\f(CW\*(C`Mail::Internet\*(C'\fR aint gonna attempt ta read a mail header from \f(CW\*(C`ARG\*(C'\fR, if
it was specified.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBread\fR(\s-1FILEHANDLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(\s-1FILEHANDLE\s0)" 4
.IX Item "$obj->read(FILEHANDLE)"
Read a message from tha \s-1FILEHANDLE\s0 tha fuck into a already existin message
object.  Betta use \fInew()\fR wit tha \s-1FILEHANDLE\s0 as first argument.
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBbody\fR([\s-1BODY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR([\s-1BODY\s0])" 4
.IX Item "$obj->body([BODY])"
Returns tha body of tha message. This be a reference ta a array.
Each entry up in tha array represents a single line up in tha message.
.Sp
If \fI\s-1BODY\s0\fR is given, it can be a reference ta a array or a array, then
the body is ghon be replaced. Y'all KNOW dat shit, muthafucka! If a reference is passed, it is used directly
and not copied, so any subsequent chizzlez ta tha array will chizzle the
contentz of tha body.
.ie n .IP "$obj\->\fBhead\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR()" 4
.IX Item "$obj->head()"
Returns tha \f(CW\*(C`Mail::Header\*(C'\fR object which holdz tha headaz fo' tha current
message
.SS "Processin tha message as a whole"
.IX Subsection "Processin tha message as a whole"
.ie n .IP "$obj\->\fBas_mbox_string\fR([\s-1ALREADY_ESCAPED\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBas_mbox_string\fR([\s-1ALREADY_ESCAPED\s0])" 4
.IX Item "$obj->as_mbox_string([ALREADY_ESCAPED])"
Returns tha message as a strang up in mbox format.  \f(CW\*(C`ALREADY_ESCAPED\*(C'\fR, if
given n' true, indicates dat \fIescape_from()\fR has already been called on
this object.
.ie n .IP "$obj\->\fBas_string\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBas_string\fR()" 4
.IX Item "$obj->as_string()"
Returns tha message as a single string.
.ie n .IP "$obj\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print([FILEHANDLE])"
Print tha header, body or whole message ta file descriptor \fI\s-1FILEHANDLE\s0\fR.
\&\fI\f(CI$fd\fI\fR should be a reference ta a \s-1GLOB.\s0 If \fI\s-1FILEHANDLE\s0\fR aint given the
output is ghon be busted ta \s-1STDOUT.\s0
.Sp
example:
.Sp
.Vb 1
\&    $mail\->print( \e*STDOUT );  # Print message ta STDOUT
.Ve
.ie n .IP "$obj\->\fBprint_body\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint_body\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print_body([FILEHANDLE])"
Print only tha body ta tha \s-1FILEHANDLE \s0(default \s-1STDOUT\s0).
.ie n .IP "$obj\->\fBprint_header\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint_header\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print_header([FILEHANDLE])"
Print only tha header ta tha \s-1FILEHANDLE \s0(default \s-1STDOUT\s0).
.SS "Processin tha header"
.IX Subsection "Processin tha header"
Most of these methodz is simply wrappers round methodz provided
by Mail::Header.
.ie n .IP "$obj\->\fBadd\fR(PAIRS-of-FIELD)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(PAIRS-of-FIELD)" 4
.IX Item "$obj->add(PAIRS-of-FIELD)"
Da \s-1PAIRS\s0 is field-name n' field-content.  For each \s-1PAIR,
\&\s0\fIMail::Header::add()\fR is called. Y'all KNOW dat shit, muthafucka!  All fieldz is added after
existin fields.  Da last addizzle is returned.
.ie n .IP "$obj\->\fBcombine\fR(\s-1TAG,\s0 [\s-1WITH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcombine\fR(\s-1TAG,\s0 [\s-1WITH\s0])" 4
.IX Item "$obj->combine(TAG, [WITH])"
See \fIMail::Header::combine()\fR.
.ie n .IP "$obj\->\fBdelete\fR(\s-1TAG,\s0 [TAGs])" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1TAG,\s0 [TAGs])" 4
.IX Item "$obj->delete(TAG, [TAGs])"
Delete all fieldz wit tha name \s-1TAG.  \s0\fIMail::Header::delete()\fR is bustin the
work.
.ie n .IP "$obj\->\fBfold\fR([\s-1LENGTH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfold\fR([\s-1LENGTH\s0])" 4
.IX Item "$obj->fold([LENGTH])"
See \fIMail::Header::fold()\fR.
.ie n .IP "$obj\->\fBfold_length\fR([\s-1TAG\s0], [\s-1LENGTH\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfold_length\fR([\s-1TAG\s0], [\s-1LENGTH\s0])" 4
.IX Item "$obj->fold_length([TAG], [LENGTH])"
See \fIMail::Header::fold_length()\fR.
.ie n .IP "$obj\->\fBget\fR(\s-1TAG,\s0 [TAGs])" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR(\s-1TAG,\s0 [TAGs])" 4
.IX Item "$obj->get(TAG, [TAGs])"
In \s-1LIST\s0 context, all fieldz wit tha name \s-1TAG\s0 is returned. Y'all KNOW dat shit, muthafucka!  In \s-1SCALAR\s0
context, only tha straight-up original gangsta field which matches tha earliest \s-1TAG\s0 is returned.
\&\fIMail::Header::get()\fR is called ta collect tha data.
.ie n .IP "$obj\->\fBheader\fR([ARRAY\-of\-LINES])" 4
.el .IP "\f(CW$obj\fR\->\fBheader\fR([ARRAY\-of\-LINES])" 4
.IX Item "$obj->header([ARRAY-of-LINES])"
See \fIMail::Header::header()\fR.
.ie n .IP "$obj\->\fBreplace\fR(PAIRS-of-FIELD)" 4
.el .IP "\f(CW$obj\fR\->\fBreplace\fR(PAIRS-of-FIELD)" 4
.IX Item "$obj->replace(PAIRS-of-FIELD)"
Da \s-1PAIRS\s0 is field-name n' field-content.  For each \s-1PAIR,
\&\s0\fIMail::Header::replace()\fR is called wit \s-1INDEX 0.\s0 If a \s-1FIELD\s0 be already
in tha header, it is ghon be removed first.  Do not specified tha same
field-name twice.
.SS "Processin tha body"
.IX Subsection "Processin tha body"
.ie n .IP "$obj\->\fBremove_sig\fR([\s-1NLINES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBremove_sig\fR([\s-1NLINES\s0])" 4
.IX Item "$obj->remove_sig([NLINES])"
Attempts ta remove a playas signature from tha body of a message. Well shiiiit, it do dis 
by lookin fo' a line equal ta \f(CW\*(Aq\-\- \*(Aq\fR within tha last \f(CW\*(C`NLINES\*(C'\fR of the
message. If found then dat line n' all lines afta it is ghon be removed. Y'all KNOW dat shit, muthafucka! If
\&\f(CW\*(C`NLINES\*(C'\fR aint given a thugged-out default value of 10 is ghon be used. Y'all KNOW dat shit, muthafucka! This would be of
most use up in auto-reply scripts.
.ie n .IP "$obj\->\fBsign\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsign\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->sign(OPTIONS)"
Add yo' signature ta tha body.  \fIremove_sig()\fR will strip existing
signatures first.
.Sp
.Vb 3
\& \-Option   \-\-Default
\&  File       undef
\&  Signature  []
.Ve
.RS 4
.IP "File => \s-1FILEHANDLE\s0" 2
.IX Item "File => FILEHANDLE"
Take from tha \s-1FILEHANDLE\s0 all lines startin from tha straight-up original gangsta \f(CW\*(C`\-\-\*(C'\fR.
.IP "Signature => STRING|ARRAY\-of\-LINES" 2
.IX Item "Signature => STRING|ARRAY-of-LINES"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBtidy_body\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtidy_body\fR()" 4
.IX Item "$obj->tidy_body()"
.PD
Removes all leadin n' trailin lines from tha body dat only contain
white spaces.
.SS "High-level functionality"
.IX Subsection "High-level functionality"
.ie n .IP "$obj\->\fBescape_from\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBescape_from\fR()" 4
.IX Item "$obj->escape_from()"
It can cause problems wit some applications if a message gotz nuff a line
startin wit \f(CW\`From \*(Aq\fR, up in particular when attemptin ta split a gangbangin' folder.
This method bangs a leadin \f(CW\*(C`\`\*(C'\fR'> on anyline dat matches tha regular
expression \f(CW\*(C`/^\*(C'\fR*From/>
.ie n .IP "$obj\->\fBnntppost\fR([\s-1OPTIONS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBnntppost\fR([\s-1OPTIONS\s0])" 4
.IX Item "$obj->nntppost([OPTIONS])"
Post a article via \s-1NNTP. \s0 Requires Net::NNTP ta be installed.
.Sp
.Vb 4
\& \-Option\-\-Default
\&  Debug   <false>
\&  Host    <required>
\&  Port    119
.Ve
.RS 4
.IP "Debug => \s-1BOOLEAN\s0" 2
.IX Item "Debug => BOOLEAN"
Debug value ta pass ta Net::NNTP, peep Net::NNTP
.IP "Host => HOSTNAME|Net::NNTP object" 2
.IX Item "Host => HOSTNAME|Net::NNTP object"
Name of \s-1NNTP\s0 server ta connect to, or a Net::NNTP object ta use.
.IP "Port => \s-1INTEGER\s0" 2
.IX Item "Port => INTEGER"
Port number ta connect ta on remote host
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->reply(OPTIONS)"
Smoke a freshly smoked up object wit header initialised fo' a reply ta tha current 
object fo' realz. And tha body is ghon be a cold-ass lil copy of tha current message indented.
.Sp
Da \f(CW\*(C`.mailhdr\*(C'\fR file up in yo' home directory (if exists) is ghon be read
first, ta provide defaults.
.Sp
.Vb 5
\& \-Option  \-\-Default
\&  Exclude   []
\&  Indent    \*(Aq>\*(Aq
\&  Keep      []
\&  ReplyAll  false
.Ve
.RS 4
.IP "Exclude => ARRAY-of-FIELDS" 2
.IX Item "Exclude => ARRAY-of-FIELDS"
Remove tha listed \s-1FIELDS\s0 from tha produced message.
.IP "Indent => \s-1STRING\s0" 2
.IX Item "Indent => STRING"
Use as indentation string.  Da strang may contain \f(CW\*(C`%%\*(C'\fR ta git a single \f(CW\*(C`%\*(C'\fR,
\&\f(CW%f\fR ta git tha straight-up original gangsta from name, \f(CW%F\fR is tha straight-up original gangsta characta of \f(CW%f\fR,
\&\f(CW%l\fR is tha last name, \f(CW%L\fR its first character, \f(CW%n\fR tha whole from
string, n' \f(CW%I\fR tha straight-up original gangsta characta of each of tha names up in tha from string.
.IP "Keep => ARRAY-of-FIELDS" 2
.IX Item "Keep => ARRAY-of-FIELDS"
Copy tha listed \s-1FIELDS\s0 from tha original gangsta message.
.IP "ReplyAll => \s-1BOOLEAN\s0" 2
.IX Item "ReplyAll => BOOLEAN"
Automatically include all To n' Cc addressez of tha original gangsta mail,
excludin dem mentioned up in tha Bcc list.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBsend\fR([\s-1TYPE,\s0 [\s-1ARGS...\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR([\s-1TYPE,\s0 [\s-1ARGS...\s0]])" 4
.IX Item "$obj->send([TYPE, [ARGS...]])"
Send a Mail::Internizzle message rockin Mail::Maila n' shit.  \s-1TYPE\s0 n' \s-1ARGS\s0 are
passed on ta \fIMail::Mailer::new()\fR.
.ie n .IP "$obj\->\fBsmtpsend\fR([\s-1OPTIONS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBsmtpsend\fR([\s-1OPTIONS\s0])" 4
.IX Item "$obj->smtpsend([OPTIONS])"
Send a Mail::Internizzle message rockin direct \s-1SMTP. \s0 ta tha given
\&\s-1ADDRESSES,\s0 each can be either a strang or a reference ta a list of email
addresses. If none of \f(CW\*(C`To\*(C'\fR, <Cc> or \f(CW\*(C`Bcc\*(C'\fR is given then tha addresses
are extracted from tha message bein sent.
.Sp
Da return value is ghon be a list of email addresses dat tha message was sent
to. If tha message was not busted tha list is ghon be empty.
.Sp
Requires Net::SMTP n' Net::Domain ta be installed.
.Sp
.Vb 9
\& \-Option  \-\-Default
\&  Bcc       undef
\&  Cc        undef
\&  Debug     <false>
\&  Wuz crackalackin'     localhost.localdomain
\&  Host      $ENV{SMTPHOSTS}
\&  MailFrom  Mail::Util::mailaddress()
\&  Port      25
\&  To        undef
.Ve
.RS 4
.IP "Bcc => \s-1ADDRESSES\s0" 2
.IX Item "Bcc => ADDRESSES"
.PD 0
.IP "Cc => \s-1ADDRESSES\s0" 2
.IX Item "Cc => ADDRESSES"
.IP "Debug => \s-1BOOLEAN\s0" 2
.IX Item "Debug => BOOLEAN"
.PD
Debug value ta pass ta Net::SMPT, peep <Net::SMTP>
.IP "Wuz crackalackin' => \s-1STRING\s0" 2
.IX Item "Wuz crackalackin' => STRING"
Send a \s-1HELO \s0(or \s-1EHLO\s0) command ta tha server wit tha given name.
.IP "Host => \s-1HOSTNAME\s0" 2
.IX Item "Host => HOSTNAME"
Name of tha \s-1SMTP\s0 server ta connect to, or a Net::SMTP object ta use
.Sp
If \f(CW\*(C`Host\*(C'\fR aint given then tha \s-1SMTP\s0 host is found by attempting
connections first ta hosts specified up in \f(CW$ENV{SMTPHOSTS}\fR, a cold-ass lil colon
separated list, then \f(CW\*(C`mailhost\*(C'\fR n' \f(CW\*(C`localhost\*(C'\fR.
.IP "MailFrom => \s-1ADDRESS\s0" 2
.IX Item "MailFrom => ADDRESS"
Da e\-mail address which is used as sender n' shit.  By default,
\&\fIMail::Util::mailaddress()\fR serves up tha address of tha sender.
.IP "Port => \s-1INTEGER\s0" 2
.IX Item "Port => INTEGER"
Port number ta connect ta on remote host
.IP "To => \s-1ADDRESSES\s0" 2
.IX Item "To => ADDRESSES"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBunescape_from\fR(())" 4
.el .IP "\f(CW$obj\fR\->\fBunescape_from\fR(())" 4
.IX Item "$obj->unescape_from(())"
.PD
Remove tha escapin added by \fIescape_from()\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of tha MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Da MailTools bundle was pimped by Graham Barr. Shiiit, dis aint no joke.  Later, Mark
Overmeer took over maintenizzle without commitment ta further pimpment.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peta Orbaek <poe@cit.dk>.
Mail::Maila n' Mail::Send by Slim Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors peep ChizzleLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
