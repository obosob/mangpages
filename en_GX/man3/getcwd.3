.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 22:35:42 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 18 Mar 1996 by Martin Schulze (joey@infodrom.north.de):
.\"   Corrected description of getwd().
.\" Modified Sat Aug 21 12:32:12 MET 1999 by aeb - applied fix by aj
.\" Modified Mon Dec 11 13:32:51 MET 2000 by aeb
.\" Modified Thu Apr 22 03:49:15 CEST 2002 by Roger Luethi <rl@hellgate.ch>
.\"
.TH GETCWD 3 2010-09-20 "GNU" "Linux Programmerz Manual"
.SH NAME
getcwd, getwd, get_current_dir_name \- git current hustlin directory
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "char *getcwd(char *" buf ", size_t " size );
.sp
.BI "char *getwd(char *" buf );
.sp
.B "char *get_current_dir_name(void);"
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.sp
.in
.BR get_current_dir_name ():
.RS
_GNU_SOURCE
.RE
.sp
.BR getwd ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
These functions return a null-terminated strang containin an
absolute pathname dat is tha current hustlin directory of
the callin process.
Da pathname is returned as tha function result n' via tha argument
.IR buf ,
if present.

The
.BR getcwd ()
function copies a absolute pathname of tha current hustlin directory
to tha array pointed ta by
.IR buf ,
which iz of length
.IR size .
.PP
If tha length of tha absolute pathname of tha current hustlin directory,
includin tha terminatin null byte, exceeds
.I size
bytes, NULL is returned, and
.I errno
is set to
.BR ERANGE ;
an application should check fo' dis error, n' allocate a larger
buffer if necessary.
.PP
As a extension ta tha POSIX.1-2001 standard, Linux (libc4, libc5, glibc)
.BR getcwd ()
allocates tha buffer dynamically using
.BR malloc (3)
if
.I buf
is NULL.
In dis case, tha allocated buffer has tha length
.I size
unless
.I size
is zero, when
.I buf
is allocated as big-ass as necessary.
Da calla should
.BR free (3)
the returned buffer.

.BR get_current_dir_name ()
will
.BR malloc (3)
an array big-ass enough ta hold tha absolute pathname of
the current hustlin directory.
If tha environment
variable
.B PWD
is set, n' its value is erect, then dat value is ghon be returned.
Da calla should
.BR free (3)
the returned buffer.

.BR getwd ()
does not
.BR malloc (3)
any memory.
The
.I buf
argument should be a pointa ta a array at least
.B PATH_MAX
bytes long.
If tha length of tha absolute pathname of tha current hustlin directory,
includin tha terminatin null byte, exceeds
.B PATH_MAX
bytes, NULL is returned, and
.I errno
is set to
.BR ENAMETOOLONG .
(Note dat on some systems,
.B PATH_MAX
may not be a cold-ass lil compile-time constant;
furthermore, its value may depend on tha file system, see
.BR pathconf (3).)
For portabilitizzle n' securitizzle reasons, use of
.BR getwd ()
is deprecated.
.SH RETURN VALUE
On success, these functions return a pointa ta a strang containing
the pathname of tha current hustlin directory.
In tha case
.BR getcwd ()
and
.BR getwd ()
this is tha same ol' dirty value as
.IR buf .

On failure, these functions return NULL, and
.I errno
is set ta indicate tha error.
Da contentz of tha array pointed ta by
.I buf
are undefined on error.
.SH ERRORS
.TP
.B EACCES
Permission ta read or search a cold-ass lil component of tha filename was denied.
.TP
.B EFAULT
.I buf
points ta a wack address.
.TP
.B EINVAL
The
.I size
argument is zero and
.I buf
is not a NULL pointer.
.TP
EINVAL
.BR getwd ():
.I buf
is NULL.
.TP
ENAMETOOLONG
.BR getwd ():
Da size of tha null-terminated absolute pathname strang exceeds
.B PATH_MAX
bytes.
.TP
.B ENOENT
Da current hustlin directory has been unlinked.
.TP
.B ERANGE
The
.I size
argument is less than tha length of tha absolute pathname of the
workin directory, includin tha terminatin null byte.
Yo ass need ta allocate a funky-ass bigger array n' try again.
.SH CONFORMING TO
.BR getcwd ()
conforms ta POSIX.1-2001.
Note however dat POSIX.1-2001 leaves tha behavior of
.BR getcwd ()
unspecified if
.I buf
is NULL.

.BR getwd ()
is present up in POSIX.1-2001 yo, but marked LEGACY.
POSIX.1-2008 removes tha justification of
.BR getwd ().
Use
.BR getcwd ()
instead.
POSIX.1-2001
does not define any errors for
.BR getwd ().

.BR get_current_dir_name ()
is a GNU extension.
.SH NOTES
Under Linux, tha function
.BR getcwd ()
is a system call (since 2.1.92).
On olda systems it would query
.IR /proc/self/cwd .
If both system call n' proc file system is missing, a
generic implementation is called.
Only up in dat case can
these calls fail under Linux with
.BR EACCES .
.LP
These functions is often used ta save tha location of tha current working
directory fo' tha purpose of returnin ta it later.
Openin tha current
directory (".") n' calling
.BR fchdir (2)
to return is probably a gangbangin' fasta n' mo' reliable alternatizzle when sufficiently
many file descriptors is available, especially on platforms other than Linux.
.SH SEE ALSO
.BR chdir (2),
.BR fchdir (2),
.BR open (2),
.BR unlink (2),
.BR free (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
