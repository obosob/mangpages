.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Harnizz 3"
.TH Test::Harnizz 3 "2013-05-02" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Harnizz \- Run Perl standard test scripts wit statistics
.SH "VERSION"
.IX Header "VERSION"
Version 3.28
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Test::Harness;
\&
\&  runtests(@test_files);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Although, fo' oldschool reasons, tha Test::Harnizz distribution
takes its name from dis module it now exists only ta provide
TAP::Harnizz wit a intercourse dat is somewhat backwardz compatible
with Test::Harnizz 2.xx. If you freestylin freshly smoked up code consider using
TAP::Harnizz directly instead.
.PP
Emulation is provided fo' \f(CW\*(C`runtests\*(C'\fR n' \f(CW\*(C`execute_tests\*(C'\fR but the
pluggable 'Straps' intercourse dat previous versionz of Test::Harness
supported aint reproduced here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Right back up in yo muthafuckin ass. Straps is now available as a stand
alone module: Test::Harness::Straps.
.PP
See TAP::Parser, TAP::Harnizz fo' tha main documentation fo' this
distribution.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Da followin functions is available.
.ie n .SS "runtests( @test_filez )"
.el .SS "runtests( \f(CW@test_files\fP )"
.IX Subsection "runtests( @test_filez )"
This runs all tha given \fI\f(CI@test_files\fI\fR n' divines whether they passed
or failed based on they output ta \s-1STDOUT \s0(details above).  It prints
out each individual test which failed along wit a summary report and
a how tha fuck long all dat shiznit took.
.PP
It returns legit if every last muthafuckin thang was ok.  Otherwise it will \f(CW\*(C`die()\*(C'\fR with
one of tha lyrics up in tha \s-1DIAGNOSTICS\s0 section.
.SS "execute_tests( tests => \e@test_files, up => \e*FH )"
.IX Subsection "execute_tests( tests => @test_files, up => *FH )"
Runs all tha given \f(CW@test_files\fR (just like \f(CW\*(C`runtests()\*(C'\fR) but
doesn't generate tha final report.  Durin testing, progress
information is ghon be freestyled ta tha currently selected output
filehandle (usually \f(CW\*(C`STDOUT\*(C'\fR), or ta tha filehandle given by the
\&\f(CW\*(C`out\*(C'\fR parameter n' shit.  Da \fIout\fR is optional.
.PP
Returns a list of two joints, \f(CW$total\fR n' \f(CW$failed\fR, describin the
results, n' you can put dat on yo' toast.  \f(CW$total\fR be a hash ref summary of all tha tests run. I aint talkin' bout chicken n' gravy biatch.  Its
keys n' joints is this:
.PP
.Vb 5
\&    bonus           Number of individual todo tests unexpectedly passed
\&    max             Number of individual tests ran
\&    aiiight              Number of individual tests passed
\&    sub_skipped     Number of individual tests skipped
\&    todo            Number of individual todo tests
\&
\&    filez           Number of test filez ran
\&    phat            Number of test filez passed
\&    wack             Number of test filez failed
\&    tests           Number of test filez originally given
\&    skipped         Number of test filez skipped
.Ve
.PP
If \f(CW\*(C`$total\->{bad} == 0\*(C'\fR n' \f(CW\*(C`$total\->{max} > 0\*(C'\fR, you've
got a successful test.
.PP
\&\f(CW$failed\fR be a hash ref of all tha test scripts dat failed. Y'all KNOW dat shit, muthafucka!  Each key
is tha name of a test script, each value be another hash representing
how dat script failed. Y'all KNOW dat shit, muthafucka!  Its keys is these:
.PP
.Vb 6
\&    name        Name of tha test which failed
\&    estat       Script\*(Aqs exit value
\&    wstat       Script\*(Aqs wait status
\&    max         Number of individual tests
\&    failed      Number which failed
\&    canon       List of tests which failed (as string).
.Ve
.PP
\&\f(CW$failed\fR should be empty if every last muthafuckin thang passed.
.SH "EXPORT"
.IX Header "EXPORT"
\&\f(CW&runtests\fR is exported by \f(CW\*(C`Test::Harness\*(C'\fR by default.
.PP
\&\f(CW&execute_tests\fR, \f(CW$verbose\fR, \f(CW$switches\fR n' \f(CW$debug\fR are
exported upon request.
.SH "ENVIRONMENT VARIABLES THAT TAP::HARNESS::COMPATIBLE SETS"
.IX Header "ENVIRONMENT VARIABLES THAT TAP::HARNESS::COMPATIBLE SETS"
\&\f(CW\*(C`Test::Harness\*(C'\fR sets these before executin tha individual tests.
.ie n .IP """HARNESS_ACTIVE""" 4
.el .IP "\f(CWHARNESS_ACTIVE\fR" 4
.IX Item "HARNESS_ACTIVE"
This is set ta a legit value.  It allows tha tests ta determine if they
are bein executed all up in tha harnizz or by any other means.
.ie n .IP """HARNESS_VERSION""" 4
.el .IP "\f(CWHARNESS_VERSION\fR" 4
.IX Item "HARNESS_VERSION"
This is tha version of \f(CW\*(C`Test::Harness\*(C'\fR.
.SH "ENVIRONMENT VARIABLES THAT AFFECT TEST::HARNESS"
.IX Header "ENVIRONMENT VARIABLES THAT AFFECT TEST::HARNESS"
.ie n .IP """HARNESS_PERL_SWITCHES""" 4
.el .IP "\f(CWHARNESS_PERL_SWITCHES\fR" 4
.IX Item "HARNESS_PERL_SWITCHES"
Settin dis addz perl command line switches ta each test file run.
.Sp
For example, \f(CW\*(C`HARNESS_PERL_SWITCHES=\-T\*(C'\fR will turn on taint mode.
\&\f(CW\*(C`HARNESS_PERL_SWITCHES=\-MDevel::Cover\*(C'\fR will run \f(CW\*(C`Devel::Cover\*(C'\fR for
each test.
.Sp
\&\f(CW\*(C`\-w\*(C'\fR be always set.  Yo ass can turn dis off up in tha test wit \f(CW\*(C`BEGIN {
$^W = 0 }\*(C'\fR.
.ie n .IP """HARNESS_TIMER""" 4
.el .IP "\f(CWHARNESS_TIMER\fR" 4
.IX Item "HARNESS_TIMER"
Settin dis ta legit will make tha harnizz display tha number of
millisecondz each test took.  Yo ass can also use \fIprove\fRz \f(CW\*(C`\-\-timer\*(C'\fR
switch.
.ie n .IP """HARNESS_VERBOSE""" 4
.el .IP "\f(CWHARNESS_VERBOSE\fR" 4
.IX Item "HARNESS_VERBOSE"
If true, \f(CW\*(C`Test::Harness\*(C'\fR will output tha verbose thangs up in dis biatch of hustlin
its tests, n' you can put dat on yo' toast.  Settin \f(CW$Test::Harness::verbose\fR will override this,
or you can use tha \f(CW\*(C`\-v\*(C'\fR switch up in tha \fIprove\fR utility.
.ie n .IP """HARNESS_OPTIONS""" 4
.el .IP "\f(CWHARNESS_OPTIONS\fR" 4
.IX Item "HARNESS_OPTIONS"
Provide additionizzle options ta tha harness. Currently supported options are:
.RS 4
.ie n .IP """j<n>""" 4
.el .IP "\f(CWj<n>\fR" 4
.IX Item "j<n>"
Run <n> (default 9) parallel thangs.
.ie n .IP """c""" 4
.el .IP "\f(CWc\fR" 4
.IX Item "c"
Try ta color output. Right back up in yo muthafuckin ass. See \*(L"new\*(R" up in TAP::Formatter::Base.
.ie n .IP """a<file.tgz>""" 4
.el .IP "\f(CWa<file.tgz>\fR" 4
.IX Item "a<file.tgz>"
Will use TAP::Harness::Archive as tha harnizz class, n' save tha \s-1TAP\s0 to
\&\f(CW\*(C`file.tgz\*(C'\fR
.ie n .IP """fPackage\-With\-Dashes""" 4
.el .IP "\f(CWfPackage\-With\-Dashes\fR" 4
.IX Item "fPackage-With-Dashes"
Set tha formatter_class of tha harnizz bein run. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since tha \f(CW\*(C`HARNESS_OPTIONS\*(C'\fR
is seperated by \f(CW\*(C`:\*(C'\fR, we use \f(CW\*(C`\-\*(C'\fR instead.
.RE
.RS 4
.Sp
Multiple options may be separated by colons:
.Sp
.Vb 1
\&    HARNESS_OPTIONS=j9:c make test
.Ve
.RE
.ie n .IP """HARNESS_SUBCLASS""" 4
.el .IP "\f(CWHARNESS_SUBCLASS\fR" 4
.IX Item "HARNESS_SUBCLASS"
Specifies a TAP::Harnizz subclass ta be used up in place of TAP::Harness.
.SH "Taint Mode"
.IX Header "Taint Mode"
Normally when a Perl program is run up in taint mode tha contentz of the
\&\f(CW\*(C`PERL5LIB\*(C'\fR environment variable do not step tha fuck up in \f(CW@INC\fR.
.PP
Because \f(CW\*(C`PERL5LIB\*(C'\fR is often used durin testin ta add build
directories ta \f(CW@INC\fR \f(CW\*(C`Test::Harness\*(C'\fR passes tha namez of any
directories found up in \f(CW\*(C`PERL5LIB\*(C'\fR as \-I switches. Da net effect of this
is dat \f(CW\*(C`PERL5LIB\*(C'\fR is honoured even up in taint mode.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Harness
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-test\-harnizz at rt.cpan.org\*(C'\fR, or all up in tha wizzy intercourse at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-Harness>.  I'ma be 
notified, n' then you gonna automatically be notified of progress on yo' bug 
as I make chizzles.
.SH "AUTHORS"
.IX Header "AUTHORS"
Andy Armstrong  \f(CW\*(C`<andy@hexten.net>\*(C'\fR
.PP
Test::Harnizz 2.64 (maintained by Andy Lesta n' on which this
module is based) has dis attribution:
.PP
.Vb 5
\&    Either Slim Tim Bunce or Andreas Koenig, our phat asses don\*(Aqt know. What we know for
\&    shizzle is, dat dat shiznit was inspired by Larry Wall\*(Aqs F<TEST> script dat came
\&    wit perl distributions fo' ages. Numerous anonymous contributors
\&    exist.  Andreas Koenig held tha torch fo' nuff years, n' then
\&    Mike G Schwern.
.Ve
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007\-2011, Andy Armstrong \f(CW\*(C`<andy@hexten.net>\*(C'\fR fo' realz. All muthafuckin rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself. Right back up in yo muthafuckin ass. See perlartistic.
