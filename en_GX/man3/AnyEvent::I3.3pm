.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::I3 3"
.TH AnyEvent::I3 3 "2013-02-18" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::I3 \- rap wit tha i3 window manager
.SH "VERSION"
.IX Header "VERSION"
Version 0.15
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module connects ta tha i3 window manager rockin tha \s-1UNIX\s0 socket based
\&\s-1IPC\s0 intercourse it serves up (if enabled up in tha configuration file). Yo ass can
then subscribe ta events or bust lyrics n' receive they replies.
.PP
.Vb 1
\&    use AnyEvent::I3 qw(:all);
\&
\&    mah $i3 = i3();
\&
\&    $i3\->connect\->recv or take a thugged-out dirtnap "Error connecting";
\&    say "Connected ta i3";
\&
\&    mah $workspaces = $i3\->message(TYPE_GET_WORKSPACES)\->recv;
\&    say "Currently, you use " . @{$workspaces} . " workspaces";
.Ve
.PP
\&...or, rockin tha sugar methods:
.PP
.Vb 1
\&    use AnyEvent::I3;
\&
\&    mah $workspaces = i3\->get_workspaces\->recv;
\&    say "Currently, you use " . @{$workspaces} . " workspaces";
.Ve
.PP
A somewhat mo' involved example which dumps tha i3 layout tree whenever there
is a workspace event:
.PP
.Vb 3
\&    use Data::Dumper;
\&    use AnyEvent;
\&    use AnyEvent::I3;
\&
\&    mah $i3 = i3();
\&
\&    $i3\->connect\->recv or take a thugged-out dirtnap "Error connectin ta i3";
\&
\&    $i3\->subscribe({
\&        workspace => sub {
\&            $i3\->get_tree\->cb(sub {
\&                mah ($tree) = @_;
\&                say "tree: " . Dumper($tree);
\&            });
\&        }
\&    })\->recv\->{success} or take a thugged-out dirtnap "Error subscribin ta events";
\&
\&    AE::cv\->recv
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.ie n .SS "$i3 = i3([ $path ]);"
.el .SS "\f(CW$i3\fP = i3([ \f(CW$path\fP ]);"
.IX Subsection "$i3 = i3([ $path ]);"
Creates a freshly smoked up \f(CW\*(C`AnyEvent::I3\*(C'\fR object n' returns dat shit.
.PP
\&\f(CW\*(C`path\*(C'\fR be a optionizzle path of tha \s-1UNIX\s0 socket ta connect to. Well shiiiit, it is strongly
advised ta \s-1NOT\s0 specify dis unless you straight-up shizzle you need dat shit.
\&\f(CW\*(C`AnyEvent::I3\*(C'\fR will automatically figure it up by queryin tha hustlin i3
instizzle on tha current \s-1DISPLAY\s0 which be almost always what tha fuck you want.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .SS "$i3 = AnyEvent::I3\->new([ $path ])"
.el .SS "\f(CW$i3\fP = AnyEvent::I3\->new([ \f(CW$path\fP ])"
.IX Subsection "$i3 = AnyEvent::I3->new([ $path ])"
Creates a freshly smoked up \f(CW\*(C`AnyEvent::I3\*(C'\fR object n' returns dat shit.
.PP
\&\f(CW\*(C`path\*(C'\fR be a optionizzle path of tha \s-1UNIX\s0 socket ta connect to. Well shiiiit, it is strongly
advised ta \s-1NOT\s0 specify dis unless you straight-up shizzle you need dat shit.
\&\f(CW\*(C`AnyEvent::I3\*(C'\fR will automatically figure it up by queryin tha hustlin i3
instizzle on tha current \s-1DISPLAY\s0 which be almost always what tha fuck you want.
.ie n .SS "$i3\->connect"
.el .SS "\f(CW$i3\fP\->connect"
.IX Subsection "$i3->connect"
Establishes tha connection ta i3. Returns a \f(CW\*(C`AnyEvent::CondVar\*(C'\fR which will
be triggered wit a funky-ass boolean (true if tha connection was established) as soon as
the connection has been established.
.PP
.Vb 3
\&    if ($i3\->connect\->recv) {
\&        say "Connected ta i3";
\&    }
.Ve
.ie n .SS "$i3\->subscribe(\e%callbacks)"
.el .SS "\f(CW$i3\fP\->subscribe(\e%callbacks)"
.IX Subsection "$i3->subscribe(%callbacks)"
Subscribes ta tha given event types. This function awaits a hashref wit the
key bein tha name of tha event n' tha value bein a cold-ass lil callback.
.PP
.Vb 3
\&    mah %callbacks = (
\&        workspace => sub { say "Workspaces chizzled" }
\&    );
\&
\&    if ($i3\->subscribe(\e%callbacks)\->recv\->{success}) {
\&        say "Successfully subscribed";
\&    }
.Ve
.PP
Da special callback wit name \f(CW\*(C`_error\*(C'\fR is called when tha connection ta i3
is capped (because of a cold-ass lil crash, exit or restart of i3 most likely). Yo ass can
use it ta print a appropriate message n' exit cleanly or ta try ta reconnect.
.PP
.Vb 7
\&    mah %callbacks = (
\&        _error => sub {
\&            mah ($msg) = @_;
\&            say "I be sorry bout dat bullshit. I be so sorry: $msg";
\&            exit 1;
\&        }
\&    );
\&
\&    $i3\->subscribe(\e%callbacks)\->recv;
.Ve
.ie n .SS "$i3\->message($type, $content)"
.el .SS "\f(CW$i3\fP\->message($type, \f(CW$content\fP)"
.IX Subsection "$i3->message($type, $content)"
Sendz a message of tha specified \f(CW\*(C`type\*(C'\fR ta i3, possibly containin tha data
structure \f(CW\*(C`content\*(C'\fR (or \f(CW\*(C`content\*(C'\fR, encoded as utf8, if \f(CW\*(C`content\*(C'\fR be a
scalar), if specified.
.PP
.Vb 4
\&    mah $reply = $i3\->message(TYPE_COMMAND, "reload")\->recv;
\&    if ($reply\->{success}) {
\&        say "Configuration successfully reloaded";
\&    }
.Ve
.SH "SUGAR METHODS"
.IX Header "SUGAR METHODS"
These methodz intend ta make yo' scripts as dope as possible fo' realz. All of
them automatically establish a cold-ass lil connection ta i3 blockingly (if it do not
already exist).
.SS "get_workspaces"
.IX Subsection "get_workspaces"
Gets tha current workspaces from i3.
.PP
.Vb 2
\&    mah $ws = i3\->get_workspaces\->recv;
\&    say Dumper($ws);
.Ve
.SS "get_outputs"
.IX Subsection "get_outputs"
Gets tha current outputs from i3.
.PP
.Vb 2
\&    mah $outs = i3\->get_outputs\->recv;
\&    say Dumper($outs);
.Ve
.SS "get_tree"
.IX Subsection "get_tree"
Gets tha layout tree from i3 (>= v4.0).
.PP
.Vb 2
\&    mah $tree = i3\->get_tree\->recv;
\&    say Dumper($tree);
.Ve
.SS "get_marks"
.IX Subsection "get_marks"
Gets all tha window identifier marks from i3 (>= v4.1).
.PP
.Vb 2
\&    mah $marks = i3\->get_marks\->recv;
\&    say Dumper($marks);
.Ve
.SS "get_bar_config"
.IX Subsection "get_bar_config"
Gets tha bar configuration fo' tha specific bar id from i3 (>= v4.1).
.PP
.Vb 2
\&    mah $config = i3\->get_bar_config($id)\->recv;
\&    say Dumper($config);
.Ve
.SS "get_version"
.IX Subsection "get_version"
Gets tha i3 version via \s-1IPC,\s0 wit a gangbangin' fall-back dat parses tha output of i3
\&\-\-version (for i3 < v4.3).
.PP
.Vb 2
\&    mah $version = i3\->get_version()\->recv;
\&    say "major: " . $version\->{major} . ", minor = " . $version\->{minor};
.Ve
.SS "command($content)"
.IX Subsection "command($content)"
Makes i3 execute tha given command
.PP
.Vb 2
\&    mah $reply = i3\->command("reload")\->recv;
\&    take a thugged-out dirtnap "command failed" unless $reply\->{success};
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mike Stapelberg, \f(CW\*(C`<michael at i3wm.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests ta \f(CW\*(C`bug\-anyevent\-i3 at
rt.cpan.org\*(C'\fR, or all up in tha wizzy intercourse at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=AnyEvent\-I3>.  I'ma be
notified, n' then you gonna automatically be notified of progress on yo' bug as
I make chizzles.
.SH "SUPPORT"
.IX Header "SUPPORT"
Yo ass can find documentation fo' dis module wit tha perldoc command.
.PP
.Vb 1
\&    perldoc AnyEvent::I3
.Ve
.PP
Yo ass can also look fo' shiznit at:
.IP "\(bu" 2
\&\s-1RT: CPAN\s0z request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=AnyEvent\-I3>
.IP "\(bu" 2
Da i3 window manager joint
.Sp
<http://i3wm.org>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2010\-2012 Mike Stapelberg.
.PP
This program is free software; you can redistribute it and/or modify it
under tha termz of either: tha \s-1GNU\s0 General Public License as published
by tha Jacked Software Foundation; or tha Artistic License.
.PP
See http://dev.perl.org/licenses/ fo' mo' shiznit.
