.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Manip::Recur 3"
.TH Date::Manip::Recur 3 "2014-12-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Recur \- methodz fo' hustlin wit recurrin events
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Date::Manip::Recur;
\&   $date = freshly smoked up Date::Manip::Recur;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module gotz nuff functions useful up in parsin n' manipulating
recurrences.  A recurrence be a notation fo' specifyin when a recurring
event occurs.  For example, if a event occurs every last muthafuckin other Fridizzle or
every 4 hours, dis can be defined as a recurrence fo' realz. A straight-up specified
recurrence consistz of tha followin piecez of shiznit:
.IP "\fBFrequency\fR" 4
.IX Item "Frequency"
Da most basic piece of shiznit is tha frequency.  For relatively
simple recurrin events, tha frequency defines when dem events
occur. Shiiit, dis aint no joke. For mo' fucked up recurrin events, tha frequency tells
approximately when tha events occur (but ta git tha actual
events, certain modifiers must be applied as busted lyrics bout below).
.Sp
Examplez of recurrin events include:
.Sp
.Vb 4
\&   tha straight-up original gangsta of every last muthafuckin month
\&   every last muthafuckin other day
\&   tha 4th Thursdizzle of each month at 2:00 PM
\&   every last muthafuckin 2 minutes n' 30 minutes
.Ve
.Sp
All of these can be expressed as a gangbangin' frequency.
.Sp
\&\s-1NOTE:\s0 unlike date parsing, support fo' frequencies freestyled up in
Gangsta (or whatever language yo ass is hustlin in) is mad
limited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For example, tha strang \*(L"the first of every last muthafuckin month\*(R" will \s-1NOT\s0
be parsed as a valid frequency fo' realz. A limited number of frequencies can be
expressed up in a gangbangin' freestyled up form (see \s-1OTHER FREQUENCY FORMATS\s0 below),
but most must be expressed up in tha format busted lyrics bout below up in \s-1FREQUENCY
NOTATION.\s0 In dis document however, tha freestyled up form will often be
used fo' tha sake of clarity.
.Sp
Since a gangbangin' frequency typically refers ta events dat could happen an
infinite number of times, you probably gotta specify a thugged-out date range to
get tha actual dates.  Some frequencies also require a funky-ass base date (i.e.
information bout when one such even straight-up occurred) since the
frequency be ambiguous.  For example, tha frequency 'every other day'
does not include enough shiznit ta specify tha dates dat the
event happened on, so you gotta explicitly define one.
.IP "\fBModifier\fR" 4
.IX Item "Modifier"
Complex recurrin events may require tha use of modifiers up in order to
get dem erect.
.Sp
For example, up in America, nuff places treat both Thanksgivin n' the
dizzle afta as holidays. Thanksgivin is easy as fuck  ta define since it is
defined as:
.Sp
.Vb 1
\&   4th Thursdizzle of every last muthafuckin November
.Ve
.Sp
In tha frequency notation (busted lyrics bout below), dis would be freestyled as:
.Sp
.Vb 1
\&   1*11:4:5:0:0:0
.Ve
.Sp
Da dizzle afta Thanksgivin is \s-1NOT\s0 possible ta define up in tha same way.
Dependin on tha year, tha dizzle afta tha 4th Thursdizzle may be tha 4th
or 5th Friday.
.Sp
Da only way ta accurately define tha dizzle afta Thanksgivin is to
specify a gangbangin' frequency n' a modifier:
.Sp
.Vb 2
\&   4th Thursdizzle of every last muthafuckin November
\&   +1 day
.Ve
.Sp
In frequency notation, dis can be expressed as:
.Sp
.Vb 1
\&   1*11:4:5:0:0:0*FD1
.Ve
.Sp
Da syntax fo' tha various modifiers is busted lyrics bout below up in the
\&\s-1MODIFIERS\s0 section.
.IP "\fBBase date\fR" 4
.IX Item "Base date"
Many recurrences gotz a funky-ass base date which be a thugged-out date on which a recurring
event is based.
.Sp
Da base date aint necessarily a thugged-out date where tha recurrin event
occurs. Instead, it may be modified (with modifiers, or wit joints
specified up in tha recurrence) ta straight-up produce a recurrin event.
.Sp
For example, if tha frequency is
.Sp
.Vb 1
\&   every last muthafuckin other Fridizzle at noon
.Ve
.Sp
the base date is ghon be a Fridizzle n' tha recurrin event will happen on
that Friday, Fridizzle two weeks later, Fridizzle four weeks later, etc.
In all cases, tha dates is ghon be modified ta be at noon.
.Sp
If tha frequency has a modifier, such as:
.Sp
.Vb 2
\&   every last muthafuckin other Friday
\&   + 1 day
.Ve
.Sp
(and fo'sho, dis trivial example could be expressed as tha frequency
\&'every other Saturday' wit no modifiers), then tha base date is still
on a Fridizzle yo, but tha actual recurrin event is determined by applying
modifiers n' occurs on Saturday.
.Sp
Recurrin events is assigned a number wit tha event dat is referred
to by tha base date bein tha 0th occurrence, tha straight-up original gangsta one afta that
as tha 1st occurrence, etc.  Recurrin events can also occur before
the base date wit tha last time tha recurrin event occurred before
the base date is tha \-1th occurence.
.Sp
So, if tha frequency is
.Sp
.Vb 1
\&   tha straight-up original gangsta of every last muthafuckin month
.Ve
.Sp
and tha base date is 'Mar 1, 2000', then tha 5 recurrin events around
it are:
.Sp
.Vb 1
\&   N    Date
\&
\&   \-2   Jan 1 2000
\&   \-1   Feb 1 2000
\&    0   Mar 1 2000
\&   +1   Apr 1 2000
\&   +2   May 1 2000
.Ve
.Sp
In some cases, tha Nth date may not be defined. Y'all KNOW dat shit, muthafucka! For example, if the
frequency is:
.Sp
.Vb 1
\&   tha 31st of every last muthafuckin month
.Ve
.Sp
and tha base date is Mar 31, 2000, tha 5 recurrin events round it
are:
.Sp
.Vb 1
\&   N   Date
\&
\&   \-2  Jan 31 2000
\&   \-1  undefined
\&    0  Mar 31 2000
\&    1  undefined
\&    2  May 31 2000
.Ve
.Sp
As mentioned above, tha base date is used ta determine one of the
occurrencez of tha recurrin event... but it may not straight-up be on
of dem events.
.Sp
As a example, fo' tha recurrin event:
.Sp
.Vb 1
\&   every last muthafuckin other Friday
.Ve
.Sp
a base date could be on a Fridizzle yo, but it would also be possible to
have a funky-ass base date on some other dizzle of tha week, n' it could
unambiguously refer simply ta a week, n' tha recurrin event would
occur on Fridizzle of dat week.
.Sp
In most cases, it won't be necessary ta treat base dates wit that
level of complexitizzle yo, but wit fucked up recurrin events, it may
be necessary.  Mo' shiznit on how tha fuck Date::Manip determines a
recurrin event from a funky-ass base date is given below up in tha section \s-1BASE DATES.\s0
.IP "\fBRange\fR" 4
.IX Item "Range"
A date range is simply a startin n' a endin date. When a range is
used (primarily up in tha dates method as busted lyrics bout below), only
recurrin events (with all modifiers applied) which happened on or
afta tha start date n' on or before tha end date is used.
.Sp
For example, if tha frequency was
.Sp
.Vb 1
\&   tha straight-up original gangsta of every last muthafuckin month
.Ve
.Sp
and tha start/end dates was Jan 1 2000 n' May 31 2000, tha list of
dates referred ta would be:
.Sp
.Vb 5
\&   Jan 1 2000
\&   Feb 1 2000
\&   Mar 1 2000
\&   Apr 1 2000
\&   May 1 2000
.Ve
.Sp
If no base date is specified yo, but a thugged-out date range is specified, tha start
date is used as tha specified base date.
.Sp
It should be noted dat if both tha range n' base date is specified,
the range aint used ta determine a funky-ass base date fo' realz. Also, tha last time
the recurrin event occurs up in dis range may \s-1NOT\s0 be tha 0th occurrence
with respect ta tha base date, n' dat be allowed.
.Sp
\&\s-1NOTE:\s0 both dates up in tha range n' tha base date must all be up in the
same time unit, n' use tha same Date::Manip::Base object.
.SH "FREQUENCY NOTATION"
.IX Header "FREQUENCY NOTATION"
Da syntax fo' specifyin a gangbangin' frequency requires some explanation. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is
very concise yo, but gotz nuff tha flexibilitizzle ta express every last muthafuckin single
type of recurrin event I could be thinkin of.
.PP
Da syntax of tha frequency description be a cold-ass lil colon separated list of
the format Y:M:W:D:H:MN:S (which stand fo' year, month, week, etc.).
One (and only one) of tha colons may optionally be replaced by an
asterisk, or a asterisk may be prepended ta tha string.  For example,
the followin is all valid frequency descriptions:
.PP
.Vb 3
\&  1:2:3:4:5:6:7
\&  1:2*3:4:5:6:7
\& *1:2:3:4:5:6:7
.Ve
.PP
But tha followin is \s-1NOT\s0 valid cuz they contain mo' than one
asterisk:
.PP
.Vb 2
\&  1:2*3:4:5*6:7
\& *1:2:3:4:5:6*7
.Ve
.PP
When a asterisk is included, tha portion ta tha left of it is called
the interval, n' refers ta a approximate time interval between
recurrin events, n' you can put dat on yo' toast.  For example, if tha interval of tha frequency is:
.PP
.Vb 1
\&  1:2*
.Ve
.PP
it means dat tha recurrin event occurs approximately every last muthafuckin 1 year
and 2 months.  Da interval be approximate cuz elements ta tha right of
the asterisk, as well as any modifiers included up in tha recurrence, will
affect when tha events straight-up occur.
.PP
If no asterisks is included, then tha entire recurrence be a interval.
For example,
.PP
.Vb 1
\&  0:0:0:1:12:0:0
.Ve
.PP
refers ta a event dat occurs every last muthafuckin 1 day, 12 hours.
.PP
Da portion of tha frequency dat occur afta a asterisk is called
the recurrence time (or rtime), n' refers ta a specific value (or
values) fo' dat type of time element (i.e. exactly as it would appear
on a cold-ass lil calendar or a cold-ass lil clock).  For example, if tha frequency endz with
the rtime:
.PP
.Vb 1
\&  *12:0:0
.Ve
.PP
then tha recurrin event occurs at 12:00:00 (noon).
.PP
For example:
.PP
.Vb 1
\&  0:0:0:2*12:30:0      every last muthafuckin 2 minutes at 12:30 (each day)
.Ve
.PP
Elements up in tha rtime can be listed as single joints, ranges (2
numbers separated by a thugged-out dash \*(L"\-\*(R"), or a cold-ass lil comma separated list of joints
or ranges.  In some cases, wack joints is appropriate fo' the
week or dizzle joints, n' you can put dat on yo' toast. \-1 standz fo' tha last possible value, \-2 fo' the
second ta tha last, etc.
.PP
If multiple joints is included up in mo' than one field up in tha rtime,
every possible combination is ghon be used. Y'all KNOW dat shit, muthafucka! For example, if tha frequency
endz wit tha rtime:
.PP
.Vb 1
\&  *12\-13:0,30:0
.Ve
.PP
the event will occur at 12:00, 12:30, 13:00, n' 13:30.
.PP
Some examplez are:
.PP
.Vb 6
\&  0:0:0:1*2,4,6:0:0    every last muthafuckin dizzle at at 02:00, 04:00, n' 06:00
\&  0:0:0:2*12\-13:0,30:0 every last muthafuckin other dizzle at 12:00, 12:30, 13:00,
\&                       n' 13:30
\&  0:1:0*\-1:0:0:0       tha last dizzle of every last muthafuckin month
\&  *1990\-1995:12:0:1:0:0:0
\&                       Dec 1 up in 1990 all up in 1995
.Ve
.PP
There is no way ta express tha followin wit a single recurrence:
.PP
.Vb 1
\&  every last muthafuckin dizzle at 12:30 n' 1:00
.Ve
.PP
Yo ass gotta use two recurrences ta do all dis bullshit.
.PP
Yo ass can include wack numbers up in ranges. For example, includin the
range \-2\-\-\-1 means ta go from tha 2nd ta tha last ta tha last
occurrence.  Negatizzle joints is only supported up in tha week and
dizzle fields, n' only up in some cases.
.PP
Yo ass can even bust a range like 2\-\-2 (which means ta go from tha 2nd to
the 2nd ta tha last occurrence). But fuck dat shiznit yo, tha word on tha street is dat dis is \s-1STRONGLY\s0 discouraged
since dis leadz ta a thugged-out date which produces a variable number of events.
As a result, tha only way ta determine tha Nth date is ta calculate
every date startin all up in tha base date. If you know dat every last muthafuckin date
produces exactly 4 recurrin events, you can calculate tha Nth date
without needin ta determine every last muthafuckin intermediate date.
.PP
When specifyin a range, tha straight-up original gangsta value must be less than tha second
or else not a god damn thang is ghon be returned.
.PP
When both tha week n' dizzle elements is non-zero n' tha dizzle is right
of tha asterisk, tha dizzle refers ta tha dizzle of week. Da following
examplez illustrate these type of frequencies:
.PP
.Vb 5
\&  0:1*4:2:0:0:0        4th Tuesdizzle (dizzle 2) of every last muthafuckin month
\&  0:1*\-1:2:0:0:0       last Tuesdizzle of every last muthafuckin month
\&  0:0:3*2:0:0:0        every last muthafuckin 3rd Tuesdizzle (every 3 weeks
\&                       on 2nd dizzle of week)
\&  1:0*12:2:0:0:0       tha 12th Tuesdizzle of each year
.Ve
.PP
\&\s-1NOTE:\s0 Da dizzle of week refers ta tha numeric value of each dizzle as
specified by \s-1ISO 8601.\s0 In other lyrics, dizzle 1 is \s-1ALWAY\s0 Monday, dizzle 7 is
\&\s-1ALWAYS\s0 Sunday, etc., regardless of what tha fuck dizzle of tha week tha week is
defined ta begin on (usin tha FirstDizzle config variable). Right back up in yo muthafuckin ass. So when the
dizzle field refers ta tha dizzle of week, itz value (or joints if a range
or comma separated list is used) must be 1\-7.
.PP
When tha week element is zero n' tha month element is non-zero and
the dizzle element is right of tha asterisk, tha dizzle value is tha dizzle of
the month (it can be from 1 ta 31 or \-1 ta \-31 countin from tha end
of tha month).
.PP
.Vb 3
\&  3*1:0:2:12:0:0       every last muthafuckin 3 muthafuckin years on Jan 2 at noon
\&  0:1*0:2:12,14:0:0    2nd of every last muthafuckin month at 12:00 n' 14:00
\&  0:1:0*\-2:0:0:0       2nd ta last dizzle of every last muthafuckin month
.Ve
.PP
\&\s-1NOTE:\s0 If tha dizzle given refers ta tha 29th, 30th, or 31st, up in a month
that aint gots dat number of days, it is ignored. Y'all KNOW dat shit, muthafucka! For example, if
you ask fo' tha 31st of every last muthafuckin month, it will return dates up in Jan, Mar,
May, Jul, etc.  Months wit fewer than 31 minutes is ghon be ignored.
.PP
If both tha month n' week elements is zero, n' tha year element is
non-zero, tha dizzle value is tha dizzle of tha year (1 ta 365 or 366 \*(-- or
the wack numbers ta count backwardz from tha end of tha year).
.PP
.Vb 1
\&  1:0:0*45:0:0:0       45th dizzle of every last muthafuckin year
.Ve
.PP
Specifyin a thugged-out dizzle dat don't occur up in dat year silently ignores that
year. Shiiit, dis aint no joke. Da only result of dis is dat specifyin +366 or \-366 will ignore
all muthafuckin years except leap years.
.PP
If tha week element is non-zero n' ta tha right of tha asterisk, and
the dizzle element is zero, tha frequency refers ta tha straight-up original gangsta dizzle of the
given week of tha month or week of tha year:
.PP
.Vb 4
\&  0:1*2:0:0:0:0        tha straight-up original gangsta dizzle of tha 2nd week of
\&                       every last muthafuckin month
\&  1:0*2:0:0:0:0        tha straight-up original gangsta dizzle of tha 2nd week of
\&                       every last muthafuckin year
.Ve
.PP
Although tha meanin of almost every last muthafuckin recurrence can be deduced by the
above rules, a set of tablez describin every last muthafuckin possible combination of Y/M/W/D
meanings, n' givin a example of each is included below up in the
section \s-1LIST OF Y/M/W/D FREQUENCY DEFINITIONS.\s0 It also explains a small
number of special cases.
.PP
\&\s-1NOTE:\s0 If all fieldz left of tha asterisk is zero, tha last one is
implied ta be 1. In other lyrics, tha followin is equivalent:
.PP
.Vb 2
\&   0:0:0*x:x:x:x
\&   0:0:1*x:x:x:x
.Ve
.PP
and can be thought of as every last muthafuckin possible occurence of tha rtime.
.PP
\&\s-1NOTE:\s0 When applyin a gangbangin' frequency ta git a list of dates on which a
recurrin event occurs, a thugged-out delta is pimped from tha frequency which is
applied ta git dates referred ta by tha interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. These is then
operated on by tha rtime n' by modifiers ta straight-up git the
recurrin events, n' you can put dat on yo' toast.  Da deltas will always be exact or approximate.
There is no support fo' bidnizz mode recurrences. But fuck dat shiznit yo, tha word on tha street is dat wit the
careful use of modifiers (discussed below), most recurrin bidnizz
events can be determined like a muthafucka.
.SH "BASE DATES"
.IX Header "BASE DATES"
A recurrence of tha form *Y:M:W:D:H:MN:S (which is technologically bustin lyrics
not a recurrin event... it is just a thugged-out date or dates specified rockin the
recurrence syntax) uses tha straight-up original gangsta date which matches tha frequency as the
base date fo' realz. Any base date specified is ghon be straight-up ignored. Y'all KNOW dat shit, muthafucka! A date range
may be specified ta work wit a subset of tha dates.
.PP
All other recurrences bust a specified base date up in order ta determine
when tha 0th occurrence of a recurrin event happens fo' realz. As mentioned
above, tha specified base date may be determined from tha start date,
or specified explicitly.
.PP
Da specified base date is used ta provide tha bare minimum
information. I aint talkin' bout chicken n' gravy biatch. For example, tha recurrence:
.PP
.Vb 1
\&   0:0:3*4:0:0:0       every last muthafuckin 3 weeks on Thursday
.Ve
.PP
requires a funky-ass base date ta determine tha week yo, but not a god damn thang else. Usin the
standard definizzle (Monday-Sunday) fo' a week, n' given dat one week in
August 2009 is Aug 10 ta Aug 16, any date up in tha range Aug 10 ta Aug 16 will
give tha same thangs up in dis biatch. Da definizzle of tha week defaults ta Monday-Sunday,
but may be modified rockin tha FirstDizzle config variable.
.PP
Likewise, tha recurrence:
.PP
.Vb 2
\&  1:3*0:4:0:0:0        every last muthafuckin 1 year, 3 months on tha 4th
\&                       dizzle of tha month
.Ve
.PP
would only use tha year n' month of tha base date, so all dates up in a given
month would give tha same set of recurrin dates.
.PP
It should also be noted dat a thugged-out date may straight-up produce multiple
recurrin events, n' you can put dat on yo' toast. For example, tha recurrence:
.PP
.Vb 2
\&   0:0:2*4:12,14:0:0   every last muthafuckin 2 weeks on Thursdizzle at 12:00
\&                       n' 14:00
.Ve
.PP
produces 2 events fo' every last muthafuckin date. Right back up in yo muthafuckin ass. So up in dis case, tha base date produces the
0th n' 1st event, tha base date + a offset produces tha 2nd n' 3rd events,
etc.
.PP
It must be noted dat tha base date refers \s-1ONLY\s0 ta tha interval part of the
recurrence. Da rtime n' modifiers is \s-1NOT\s0 used up in determinin tha base
date.
.SH "INTERVAL"
.IX Header "INTERVAL"
Da interval of a gangbangin' frequency (everythang left of tha asterisk) is ghon be used
to generate a list of dates (called interval dates). When rtime joints and
modifiers is applied ta a interval date, it produces tha actual recurring
events.
.PP
As already noted, if tha rtime joints include multiple joints fo' any
field, mo' than one event is produced by a single interval date.
.PP
It be blingin ta KNOW is how tha fuck tha interval dates are
calculated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da interval is trivially turned tha fuck into a thugged-out delta. For example,
with tha frequency 0:0:2*4:12:0:0, tha interval is 0:0:2 which
produces tha delta 0:0:2:0:0:0:0.
.PP
In order ta git tha Nth interval date, tha delta is multiplied by N and
added ta tha base date. In other lyrics:
.PP
.Vb 3
\&   D(0) = Jan 31
\&   D(1) = Jan 31 + 1 month = Feb 28
\&   D(2) = Jan 31 + 2 month = Mar 31
.Ve
.SH "DATE RANGE"
.IX Header "DATE RANGE"
Da start n' end dates form tha range up in which recurrin events can fall
into.
.PP
Every recurrin date will fall up in tha limit:
.PP
.Vb 1
\&   start <= date <= end
.Ve
.PP
When a recurrence is pimped, it may include a thugged-out default range, n' dis is
handled by tha RecurRange config variable.
.SH "OTHER FREQUENCY FORMATS"
.IX Header "OTHER FREQUENCY FORMATS"
There is a lil' small-ass handful of Gangsta strings (or tha equivalent in
other languages) which can be parsed up in place of a numerical
frequency.  These include:
.PP
.Vb 3
\&  every last muthafuckin Tuesdizzle up in June [1997]
\&  2nd Tuesdizzle up in June [1997]
\&  last Tuesdizzle up in June [1997]
\&
\&  every last muthafuckin Tuesdizzle of every last muthafuckin month [in 1997]
\&  2nd Tuesdizzle of every last muthafuckin month [in 1997]
\&  last Tuesdizzle of every last muthafuckin month [in 1997]
\&
\&  every last muthafuckin dizzle of every last muthafuckin month [in 1997]
\&  2nd dizzle of every last muthafuckin month [in 1997]
\&  last dizzle of every last muthafuckin month [in 1997]
\&
\&  every last muthafuckin dizzle [in 1997]
\&  every last muthafuckin 2nd dizzle [in 1977]
\&  every last muthafuckin 2 minutes [in 1977]
.Ve
.PP
Each of these set tha frequency. If tha year is include up in tha string,
it also sets tha dates up in tha range ta be tha straight-up original gangsta n' last dizzle of
the year.
.PP
In each of these, tha numerical part (i.e. 2nd up in all of tha examplez above)
can be any number from 1 ta 31. To cook up a gangbangin' frequency wit a larger number than
that, you gotta use tha standard format discussed above.
.PP
Cuz of tha complexitizzle of freestylin up (and parsing) frequencies freestyled out,
I do not intend ta add additionizzle frequency formats, n' tha use of these
is discouraged. Y'all KNOW dat shit, muthafucka! Da frequency format busted lyrics bout above is preferred.
.SH "MODIFIERS"
.IX Header "MODIFIERS"
Any number of modifiers may be added ta a gangbangin' frequency ta git tha actual
date of a recurrin event.  Modifiers is case sensitive.
.IP "\fBModifiers ta set tha day-of-week\fR" 4
.IX Item "Modifiers ta set tha day-of-week"
Da followin modifiers can be used ta adjust a thugged-out date ta a specific
dizzle of tha week.
.Sp
.Vb 5
\&  PDn   Means tha previous dizzle n not countin todizzle
\&  PTn   Means tha previous dizzle n countin todizzle
\&  NDn   Means tha next dizzle n not countin todizzle
\&  NTn   Means tha next dizzle n countin todizzle
\&  WDn   Dizzle n (1\-7) of tha current week
.Ve
.Sp
In each of these, 'n' is 1\-7 (1 bein Sunday, 7 bein Saturday).
.Sp
For example, \s-1PD2/ND2\s0 returns tha previous/next Tuesday. It make me wanna hollar playa! If the
date dat dis be applied ta is Tuesday, it modifies it ta one
week up in tha past/future.
.Sp
\&\s-1PT2/NT2\s0 is similar yo, but will leave tha date unmodified if
it be a Tuesday.
.IP "\fBModifiers ta move forward/backward a fuckin shitload of days\fR" 4
.IX Item "Modifiers ta move forward/backward a fuckin shitload of days"
These modifiers can be used ta add/subtract n minutes ta a thugged-out date.
.Sp
.Vb 2
\&  FDn   Means step forward n days.
\&  BDn   Means step backward n days.
.Ve
.IP "\fBModifiers ta force events ta be on bidnizz days\fR" 4
.IX Item "Modifiers ta force events ta be on bidnizz days"
Modifiers can also be used ta force recurrin events ta occur
on bidnizz days. These modifiers include:
.Sp
.Vb 2
\&  FWn   Means step forward n workdays.
\&  BWn   Means step backward n workdays.
\&
\&  CWD   Da closest work dizzle (usin tha TomorrowFirst
\&        config variable).
\&  CWN   Da closest work dizzle (lookin forward first).
\&  CWP   Da closest work dizzle (lookin backward first).
\&
\&  NWD   Da next work dizzle countin todizzle
\&  PWD   Da previous work dizzle countin todizzle
\&  DWD   Da closest work dizzle (usin tha TomorrowFirst config
\&        variable) countin todizzle
\&
\&  IBD   This discardz tha date if it aint a funky-ass bidnizz day.
\&  NBD   This discardz tha date if it IS a funky-ass bidnizz day.
.Ve
.Sp
Da \s-1CWD, CWN,\s0 n' \s-1CWP\s0 modifiers will always chizzle tha date ta the
closest hustlin dizzle \s-1NOT\s0 countin tha current date.
.Sp
Da \s-1NWD, PWD,\s0 n' \s-1DWD\s0 modifiers always chizzle tha date ta tha closest
workin dizzle unless tha current date be a work day. It make me wanna hollar playa! In dat case,
it is left unmodified.
.Sp
\&\s-1CWD, CWN,\s0 n' \s-1CWP\s0 will probably return tha same value yo, but if yo ass is
startin all up in tha middle dizzle of a 3\-dizzle weekend (for example), it will
return either tha straight-up original gangsta work dizzle of tha followin week, or tha last
work dizzle of tha previous week dependin on whether it looks forward or
backward first.
.Sp
All bidnizz dizzle modifiers ignore tha time, so if a thugged-out date is initially
calculated at Saturdizzle at noon, n' tha \s-1FW1\s0 be applied, tha date is
initially moved ta tha followin Mondizzle (assumin it aint nuthin but a work day)
and tha \s-1FW1\s0 moves it ta Tuesday. It make me wanna hollar playa! Da final result is ghon be Tuesdizzle at
noon.
.Sp
Da \s-1IBD\s0 n' \s-1NBD\s0 modifiers eliminizzle dates from tha list immediately.
In other lyrics, if a recurrence has three modifiers:
.Sp
.Vb 1
\&  FD1,IBD,FD1
.Ve
.Sp
then as a thugged-out date is bein tested, first tha \s-1FD1\s0 modifier be applied.
Then, it is tested ta peep if it aint nuthin but a funky-ass bidnizz day. It make me wanna hollar playa!  If it is, the
second \s-1FD1\s0 modifier is ghon be applied. Y'all KNOW dat shit, muthafucka!  Otherwise, tha date will not
be included up in tha list of recurrin events.
.IP "\fBSpecial modifiers\fR" 4
.IX Item "Special modifiers"
Da followin modifiers do thangs dat cannot be expressed rockin any other
combination of frequency n' modifiers:
.Sp
.Vb 1
\&  EASTER   Set tha date ta Easta fo' dis year.
.Ve
.SH "DETERMINING DATES"
.IX Header "DETERMINING DATES"
In order ta git a list of dates referred ta by tha recurrence, the
followin steps is taken.
.IP "\fBDa recurrence is tested fo' errors\fR" 4
.IX Item "Da recurrence is tested fo' errors"
Da recurrence must be straight-up specified wit a funky-ass base date (either
supplied explicitly, or derived from a start date) n' date range when
necessary fo' realz. All dates must be valid.
.IP "\fBDa actual base date is determined\fR" 4
.IX Item "Da actual base date is determined"
Usin shiznit from tha interval n' tha specified base date, the
actual base date is determined.
.IP "\fBDa Nth date is calculated\fR" 4
.IX Item "Da Nth date is calculated"
By applyin tha delta dat correspondz ta tha interval, n' then
applyin rtime n' modifier shiznit, tha Nth date is determined.
.Sp
This is repeated until all desired dates done been obtained.
.Sp
Da nth method busted lyrics bout below has mo' details.
.IP "\fBDa range is tested\fR" 4
.IX Item "Da range is tested"
Any date dat fall outside tha range is discarded.
.Sp
\&\s-1NOTE:\s0 when tha recurrence gotz nuff no interval, it aint necessary to
specify tha range, n' if it aint specified, all of tha dates are
used. Y'all KNOW dat shit, muthafucka! Da range \s-1MAY\s0 be specified ta return only a subset of tha dates
if desired.
.SH "LIST OF Y/M/W/D FREQUENCY DEFINITIONS"
.IX Header "LIST OF Y/M/W/D FREQUENCY DEFINITIONS"
Because tha week n' dizzle joints may have multiple meanings depending
on where tha asterisk is, n' which of tha fieldz have non-zero joints,
a list of every last muthafuckin possible combination is included here (though most can
be determined rockin tha rulez above).
.PP
When tha asterisk occurs before tha dizzle element, n' tha dizzle element
is non-zero, tha dizzle element can take on multiple meanings depending
on where tha asterisk occurs, n' which leadin elements (year, month,
week) have non-zero joints, n' you can put dat on yo' toast. Well shiiiit, it can refer ta tha dizzle of tha week, day
of tha month, or dizzle of tha year.
.PP
When tha asterisk occurs before tha week element, tha week element of
the frequency can also take on multiple meanings as well. When tha month
field n' dizzle fieldz is zero, it refers ta tha week of tha year. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Since
the week of tha year is well defined up in tha \s-1ISO 8601\s0 spec, there is
no ambiguity.
.PP
When tha month field is zero yo, but tha dizzle field is not, tha week field
refers ta tha nth occurrence of tha dizzle of week referred ta by the
dizzle field up in tha year.
.PP
When tha month field is non-zero, tha week field refers ta tha nth
occurrence of tha dizzle of week up in tha month.
.PP
In tha tablez below only tha straight-up original gangsta 4 elementz of tha frequency are
shown. I aint talkin' bout chicken n' gravy biatch. Da actual frequency will include tha hour, minute, n' second
elements up in addizzle ta tha ones shown.
.PP
When all elements left of tha asterisk is 0, tha interval is such
that it occurs tha maximum times possible (without changin tha type
of elements ta tha right of tha asterisk) fo' realz. Another way of lookin at
it is dat tha last 0 element of tha interval is chizzled ta 1. Right back up in yo muthafuckin ass. So, the
interval:
.PP
.Vb 1
\&  0:0*3:0
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&  0:1*3:0
.Ve
.PP
When tha year field is zero, n' is right of tha asterisk, it
means tha current year.
.IP "\fBAll elements left of tha asterisk\fR" 4
.IX Item "All elements left of tha asterisk"
When all of tha month, week, n' dizzle elements is left of the
asterisk, tha simple definitionz of tha frequency is used:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:2:3:4       every last muthafuckin 1 year, 2 months, 3 weeks,
\&                4 days
.Ve
.Sp
Any, or all of tha fieldz can be zero.
.IP "\fBNon-zero day, non-zero week\fR" 4
.IX Item "Non-zero day, non-zero week"
When both tha dizzle n' week elements is non-zero, tha dizzle element
always refers ta tha dizzle of week. Values must be up in tha range (1 ta 7)
and no wack joints is allowed.
.Sp
Da followin tablez shows all possible variationz of tha frequency
where dis can happen (where dizzle 4 = Thursday).
.Sp
When tha week is left of tha asterisk, tha interval is used ta git the
weeks on tha calendar containin a recurrin date, n' tha dizzle is used
to set tha dizzle of tha week.  Da followin is possible:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:2:3*4       every last muthafuckin 1 year, 2 months, 3 weeks
\&                on Thur
\&
\&  1:0:3*4       every last muthafuckin 1 year, 3 weeks on Thur
\&
\&  0:2:3*4       every last muthafuckin 2 months, 3 weeks on Thur
\&
\&  0:0:3*4       every last muthafuckin 3 weeks on Thur
.Ve
.Sp
When tha week is right of tha asterisk, n' a non-zero month is left of the
asterisk, tha recurrence refers ta a specific occurrence of a thugged-out day-of-week
durin a month. Da followin is possible:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:2*3:4       every last muthafuckin 1 year, 2 months on the
\&                3rd Thursdizzle of tha month
\&
\&  0:2*3:4       every last muthafuckin 2 months on tha 3rd Thur
\&                of tha month
.Ve
.Sp
When tha week n' month is both non-zero n' right of tha asterisk, the
recurrence refers ta a occurrence of day-of-week durin tha given month.
Possibilitizzles are:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1*2:3:4       every last muthafuckin 1 year up in February on
\&                tha 3rd Thur
\&
\&  0*2:3:4       same as 1*2:3:4
\&
\& *1:2:3:4       up in Feb 0001 on tha 3rd Thur
\&                of tha month
\&
\& *0:2:3:4       on tha 3rd Thur of Feb up in the
\&                current year
.Ve
.Sp
When tha week is right of tha asterisk, n' tha month is zero, the
recurrence refers ta a occurence of tha day-of-week durin the
year. Shiiit, dis aint no joke. Da followin is possible:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:0*3:4       every last muthafuckin 1 year on tha 3rd Thursday
\&  1*0:3:4       of tha year
\&
\& *1:0:3:4       up in 0001 on tha 3rd Thur of
\&                tha year
\&
\&  0*0:3:4       same as 1*0:3:4
\&
\& *0:0:3:4       on tha 3rd Thur of tha current
\&                year
.Ve
.Sp
There is one special case:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  0:0*3:4       same as 0:1*3:4 (every month on
\&                tha 3rd Thur of tha month)
.Ve
.IP "\fBNon-zero day, non-zero month\fR" 4
.IX Item "Non-zero day, non-zero month"
When a non-zero dizzle element occurs ta tha right of tha asterisk and
the week element is zero yo, but tha month element is non-zero, tha day
elements always refers ta a tha dizzle of month up in tha range (1 ta 31)
or (\-1 ta \-31).
.Sp
Da followin table shows all possible variationz of tha frequency
where dis can happen:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:2:0*4       every last muthafuckin 1 year, 2 months on the
\&  1:2*0:4       4th dizzle of tha month
\&
\&  1*2:0:4       every last muthafuckin year on Feb 4th
\&
\& *1:2:0:4       Feb 4th, 0001
\&
\&  0:2:0*4       every last muthafuckin 2 months on tha 4th day
\&  0:2*0:4       of tha month
\&
\&  0*2:0:4       same as 1*2:0:4
\&
\& *0:2:0:4       Feb 4th of tha current year
.Ve
.IP "\fBZero day, non-zero week\fR" 4
.IX Item "Zero day, non-zero week"
When a thugged-out dizzle is zero, n' tha week is non-zero, tha recurrence refers
to a specific occurrence of tha straight-up original gangsta dizzle of tha week (as given by
the FirstDizzle variable).
.Sp
Da frequency can refer ta a occurrence of FirstDizzle up in a specific
week (if tha week is left of tha asterisk):
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:2:3*0       every last muthafuckin 1 year, 2 months, 3 weeks on
\&                FirstDay
\&
\&  1:0:3*0       every last muthafuckin 1 year, 3 weeks on FirstDay
\&
\&  0:2:3*0       every last muthafuckin 2 months, 3 weeks on FirstDay
\&
\&  0:0:3*0       every last muthafuckin 3 weeks on FirstDay
.Ve
.Sp
or ta a week up in tha year (if tha week is right of tha asterisk, n' the
month is zero):
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:0*3:0       every last muthafuckin 1 year on tha straight-up original gangsta dizzle of the
\&  1*0:3:0       3rd week of tha year
\&
\& *1:0:3:0       tha straight-up original gangsta dizzle of tha 3rd week of 0001
.Ve
.Sp
or ta a occurrence of FirstDizzle up in a month (if tha week is right of the
asterisk n' month is non-zero):
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:2*3:0       every last muthafuckin 1 year, 2 months on tha 3rd
\&                occurence of FirstDay
\&
\&  0:2*3:0       every last muthafuckin 2 months on tha 3rd occurence
\&                of FirstDay
\&
\&  1*2:3:0       every last muthafuckin year on tha 3rd occurence
\&                of FirstDizzle up in Feb
\&
\&  0*2:3:0       same as 1*2:3:0
\&
\& *1:2:3:0       tha 3rd occurence of FirstDay
\&                Feb 0001
\&
\& *0:2:3:0       tha 3rd occurence of FirstDay
\&                up in Feb of tha current year
.Ve
.Sp
\&\s-1NOTE:\s0 up in tha last group, a slightly mo' intuitizzle definizzle of these
would done been ta say dat tha week field refers ta tha week of the
month yo, but given tha \s-1ISO 8601\s0 manner of definin when weeks start,
this definizzle would have virtually no practical application. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. So the
definizzle of tha week field referrin ta tha Nth occurence of
FirstDizzle up in a month was used instead.
.Sp
There is all dem special cases here:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  0:0*3:0       same as 0:1*3:0   (every month on tha 3rd
\&                occurence of tha straight-up original gangsta dizzle of week)
\&
\&  0*0:3:0       same as 1*0:3:0
\&
\& *0:0:3:0       tha straight-up original gangsta dizzle of tha 3rd week of the
\&                current year
.Ve
.IP "\fBNon-zero day\fR" 4
.IX Item "Non-zero day"
When a non-zero dizzle element occurs n' both tha month n' week
elements is zero, tha dizzle elements always refers ta a tha dizzle of year
(1 ta 366 or \-1 ta \-366 ta count from tha end).
.Sp
Da followin table shows all possible variationz of tha frequency
where dis can happen:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:0:0*4       every last muthafuckin year on tha 4th dizzle of
\&  1:0*0:4       tha year
\&  1*0:0:4
\&
\& *1:0:0:4       tha 4th dizzle of 0001
.Ve
.Sp
Other non-zero dizzle variations have multiple meanings fo' tha day
element:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  0:0:0*4       same as 0:0:1*4  (every week on Thur)
\&
\&  0:0*0:4       same as 0:1*0:4  (every month on tha 4th)
\&
\&  0*0:0:4       same as 1*0:0:4
\&
\& *0:0:0:4       tha 4th dizzle of tha current year
.Ve
.IP "\fBAll other variations\fR" 4
.IX Item "All other variations"
Da remainin variations have zero joints fo' both week n' day.
They are:
.Sp
.Vb 1
\&  frequency     meaning
\&
\&  1:2:0*0       every last muthafuckin 1 year, 2 months on tha first
\&  1:2*0:0       dizzle of tha month
\&
\&  1*2:0:0       every last muthafuckin year on Feb 1
\&
\& *1:2:0:0       Feb 1, 0001
\&
\&  1:0:0*0       every last muthafuckin 1 year on Jan 1
\&  1:0*0:0
\&  1*0:0:0
\&
\& *1:0:0:0       Jan 1, 0001
\&
\&  0:2:0*0       every last muthafuckin 2 months on tha straight-up original gangsta dizzle of
\&  0:2*0:0       tha month
\&
\&  0*2:0:0       same as 1*2:0:0
\&
\& *0:2:0:0       Feb 1 of tha current year
\&
\&  0:0:0*0       same as 0:0:1*0 (every week on
\&                tha straight-up original gangsta dizzle of tha week)
\&
\&  0:0*0:0       same as 0:1*0:0 (every month
\&                on tha 1st)
\&
\&  0*0:0:0       same as 1*0:0:0
\&
\& *0:0:0:0       Jan 1 of tha current year
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.PD 0
.IP "\fBnew_config\fR" 4
.IX Item "new_config"
.IP "\fBnew_date\fR" 4
.IX Item "new_date"
.IP "\fBnew_delta\fR" 4
.IX Item "new_delta"
.IP "\fBnew_recur\fR" 4
.IX Item "new_recur"
.IP "\fBbase\fR" 4
.IX Item "base"
.IP "\fBtz\fR" 4
.IX Item "tz"
.IP "\fBis_date\fR" 4
.IX Item "is_date"
.IP "\fBis_delta\fR" 4
.IX Item "is_delta"
.IP "\fBis_recur\fR" 4
.IX Item "is_recur"
.IP "\fBconfig\fR" 4
.IX Item "config"
.IP "\fBerr\fR" 4
.IX Item "err"
.PD
Please refer ta tha Date::Manip::Obj documentation fo' these methods.
.IP "\fBparse\fR" 4
.IX Item "parse"
.Vb 1
\&   $err = $recur\->parse($strin [,$modifiers] [,$base,$start,$end]);
.Ve
.Sp
This creates a freshly smoked up recurrence fo' realz. A strang containin a valid frequency
is required. Y'all KNOW dat shit, muthafucka! In addition, \f(CW$start\fR, \f(CW$end\fR, n' \f(CW$base\fR dates can be passed
in (either as Date::Manip::Date objects, or as strings containin dates
that can be parsed), n' any number of tha modifiers listed above.
.Sp
If tha \f(CW$start\fR or \f(CW$end\fR dates is not included, they may be supplied
automatically, based on tha value of tha RecurRange variable. If any
of tha dates is passed in, they must be included up in tha order given
(though it is safe ta pass a empty strang or undef up in fo' any of them
if you only wanna set some yo, but not all of them).
.Sp
Da \f(CW$modifiers\fR argument must either contain valid modifiers, or be
left outta tha argument list entirely. Yo ass cannot pass a empty string
or undef up in fo' dat shit.
.Sp
.Vb 1
\&   $err = $recur\->parse($string);
.Ve
.Sp
This creates a recurrence from a strang which gotz nuff all of the
necessary elementz of tha recurrence. Da strang iz of tha format:
.Sp
.Vb 1
\&   FREQ*MODIFIERS*BASE*START*END
.Ve
.Sp
where \s-1FREQ\s0 be a strang containin a gangbangin' frequency, \s-1MODIFIERS\s0 be a string
containin a cold-ass lil comma separated list of modifiers, \s-1BASE, START,\s0 n' \s-1END\s0
are strings containin parseable dates.
.Sp
All pieces is optionizzle yo, but order must be maintained, so all of the
followin is valid:
.Sp
.Vb 3
\&   FREQ*MODIFIERS
\&   FREQ**BASE
\&   FREQ**BASE*START*END
.Ve
.Sp
If a part of tha recurrence is passed up in both as part of \f(CW$string\fR and
as a argument, tha argument overrides tha strang portion, wit the
possible exception of modifiers. Da modifiers up in tha argument override
the strang version unless tha straight-up original gangsta one be a '+' up in which case they
are appended. Y'all KNOW dat shit, muthafucka! See tha modifiers method below fo' mo' shiznit.
.IP "\fBfrequency\fR" 4
.IX Item "frequency"
.PD 0
.IP "\fBstart\fR" 4
.IX Item "start"
.IP "\fBend\fR" 4
.IX Item "end"
.IP "\fBbasedate\fR" 4
.IX Item "basedate"
.IP "\fBmodifiers\fR" 4
.IX Item "modifiers"
.PD
Yo ass can also create a recurrency up in steps (or replace partz of a existing
recurrence) rockin tha following:
.Sp
.Vb 1
\&   $err = $recur\->frequency($frequency);
\&
\&   $err = $recur\->start($start);
\&   $err = $recur\->end($end);
\&
\&   $err = $recur\->basedate($base);
\&
\&   $err = $recur\->modifiers($modifiers);
\&   $err = $recur\->modifiers(@modifiers);
.Ve
.Sp
These set tha appropriate part of tha recurrence.
.Sp
Callin tha frequency method discardz all shiznit currently
stored up in tha Recur object (includin a existin start, end, and
base date), so dis method should be called first.
.Sp
In tha modifiers method, tha modifiers can be passed up in as a string
containin a cold-ass lil comma separated list of modifiers, or as a list of
modifiers. Da modifiers passed up in override all previously set
modifiers \s-1UNLESS\s0 tha straight-up original gangsta one is tha strang \*(L"+\*(R", up in which case the
new modifiers is appended ta tha list.
.Sp
In tha start, end, n' base methods, tha date passed up in can be a
Date::Manip::Date object, or a strang dat can be parsed ta git a thugged-out date.
.Sp
\&\s-1NOTE:\s0 tha parse method will overwrite all partz of tha recurrence,
so it aint appropriate ta do:
.Sp
.Vb 2
\&   $recur\->modifiers($modifiers);
\&   $recur\->parse($string);
.Ve
.Sp
Da modifiers passed up in in tha straight-up original gangsta call is ghon be overwritten.
.Sp
These functions can also be used ta look up tha joints.
.Sp
.Vb 4
\&   $freq  = $recur\->frequency();
\&   $start = $recur\->start();
\&   $end   = $recur\->end();
\&   @modz  = $recur\->modifiers();
\&
\&   ($base,$actual) = $recur\->basedate();
.Ve
.Sp
Da basedate function will return both tha specified base n' tha actual
base dates.
.Sp
If any of tha joints is not yet determined, not a god damn thang is ghon be returned.
.IP "\fBdates\fR" 4
.IX Item "dates"
.Vb 1
\&   @dates = $recur\->dates([$start,$end]);
.Ve
.Sp
Returns tha list of dates defined by tha full recurrence. If there is
an error, or if there be no dates, a empty list is ghon be returned.
.Sp
\&\f(CW$start\fR n' \f(CW$end\fR is either undef, or dates which can be used ta limit
the set of dates passed back (they can be Date::Manip::Date objects
or strings dat can be parsed).
.Sp
If tha recurrence aint gots a start n' end date already, passing
in \f(CW$start\fR n' \f(CW$end\fR will set tha range (but they will \s-1NOT\s0 be stored in
the recurrence).
.Sp
If tha recurrence do gotz a start n' end date stored up in it, the
\&\f(CW$start\fR n' \f(CW$end\fR arguments can be used ta temporarily override
the limits, n' you can put dat on yo' toast. For example, if a recurrence has a start date of
Jan 1, 2006 00:00:00 n' and end date of Dec 31, 2006 23:59:59 stored
in tha recurrence, passin up in \f(CW$start\fR of Jul 1, 2006 00:00:00 will
limit tha dates moonwalked back ta tha range of Jul 1 ta Dec 31.
.Sp
Passin up in a start date of Jul 1, 2007 will mean dat no dates are
returned since tha recurrence limits tha date ta be up in 2006.
.Sp
If one or both of \f(CW$start\fR n' \f(CW$end\fR is undef, then tha stored joints
will be used.
.IP "\fBnth\fR" 4
.IX Item "nth"
.Vb 1
\&   ($date,$err) = $recur\->nth($n);
.Ve
.Sp
This returns tha \f(CW$n\fR'th recurrin event ($n may be any integer). If
an error occurs, it is returned (but it aint set up in \f(CW$recur\fR since
it may be properly, though like incompletely, defined). Da following
errors may be returned:
.Sp
.Vb 2
\&   Invalid recurrence
\&      Da recurrence has a error flag set.
\&
\&   Incomplete recurrence
\&      Da recurrence is incomplete. Well shiiiit, it needz either a
\&      base date or a thugged-out date range.
\&
\&   Range invalid
\&      Da recurrence has a invalid date range (i.e.
\&      tha end date occurs before tha start date).
\&
\&   Start invalid
\&   End invalid
\&   Base invalid
\&      An invalid date was entered fo' one of tha dates.
.Ve
.Sp
There is all dem special circumstances ta be aware of.
.Sp
1) If tha recurrence gotz nuff no interval (i.e. iz of tha form
*Y:M:W:D:H:MN:S), tha dates come directly from tha rtime joints.
In dis case, tha 0th event is tha straight-up original gangsta date up in tha list of
dates specified by tha rtime fo' realz. As such, \f(CW$n\fR must be a positive
integer n' shit.  If \f(CW$n\fR is negative, or outside tha range of dates
specified, tha returned date is ghon be undef (but dis is not
an error).
.Sp
2) A straight-up lil' small-ass number of recurrences have a unknown number of
recurrin events associated wit each date.  This only happens if one
of tha joints up in tha rtime is specified as a range includin both a
positizzle n' wack index.  For example, if tha dizzle field up in an
rtime refers ta tha dizzle of month, n' is 15\-\-15 (i.e. tha 15th dizzle to
the 15th ta tha last day), dis may include 3 events (on a month with
31 days), 2 event (months wit 30 days), 1 event (months wit 29
days), or 0 events (months wit 28 days) fo' realz. As such, up in order to
calculate tha Nth date, you gotta start wit tha 0th (i.e. base)
date n' calculate every last muthafuckin event until you git tha Nth one. For this
reason, it is highly recommended dat dis type of frequency be
avoided as it is ghon be like slow.
.Sp
3) Most recurrences gotz a known number of events (equal ta tha number
of combinationz of joints up in tha rtime) fo' each date. For these,
calculatin tha Nth date is much fasta n' shit. But fuck dat shiznit yo, tha word on tha street is dat up in dis case, some
of dem may refer ta a invalid date. For example, if tha frequency is
\&'the 31st of every last muthafuckin month' n' tha base (0th) date is Jan 31, tha 1st
event would refer ta Feb 31. Right back up in yo muthafuckin ass. Since dat aint valid, undef would be
returned fo' \f(CW$n\fR=1. Obviously, it would be possible ta actually
determine tha Nth valid event by calculatin all N\-1 dates yo, but up in the
interest of performance, dis aint done.
.Sp
4) Da way tha Nth recurrin event is calculated differs slightly
for \s-1NE\s0>0 n' N<0 if tha delta referred ta by tha frequency is
approximate. To calculate tha Nth recurrin event (where N>0), you
take tha base date n' add N*DELTA (where \s-1DELTA\s0 is tha delta
determined by tha frequency).  To git tha Nth recurrin event (where
N<0), a thugged-out date is determine which, if N*DELTA was added ta it, would
produce tha base date. For mo' details, refer ta the
Date::Manip::Calc document.  In tha \s-1SUBTRACTION\s0 section up in the
rap of approximate date-delta calculations, calculations are
done wit \f(CW$subtract\fR = 2.
.IP "\fBnext\fR" 4
.IX Item "next"
.PD 0
.IP "\fBprev\fR" 4
.IX Item "prev"
.PD
.Vb 2
\&   ($date,$err) = $recur\->next();
\&   ($date,$err) = $recur\->prev();
.Ve
.Sp
These return tha next/previous recurrin event.
.Sp
Da last time next/prev is called, one of tha recurrin events
will be selected n' returned (usin tha rulez discussed below).
Subsequent calls ta next/prev will return tha next or previous
event.
.Sp
Unlike tha \fBnth\fR method which will return a specific event (or
undef if tha Nth even aint defined), tha next n' prev methods
will only work wit defined events.
.Sp
So, fo' tha recurrence:
.Sp
.Vb 1
\&   tha 31st of every last muthafuckin month
.Ve
.Sp
next might return tha followin sequence of events:
.Sp
.Vb 3
\&   Jan 31 2000
\&   Mar 31 2000
\&   May 31 2000
.Ve
.Sp
Da rulez fo' determinin what tha fuck event ta return tha last time one
of these is called is as bigs up:
.Sp
1) If there be a range, next will return tha straight-up original gangsta event dat occurs
afta tha start of tha range.  prev will return tha last event that
occurs before tha end of tha range.
.Sp
2) If there is no range, next will return tha straight-up original gangsta event on or after
the base date.  prev will return tha last event before tha base date.
.Sp
Da error codes is tha same as fo' tha nth method.
.SH "HISTORY OF THE FREQUENCY NOTATION"
.IX Header "HISTORY OF THE FREQUENCY NOTATION"
I realize dat tha frequency notation busted lyrics bout above looks quite
fucked up at first glizzle yo, but it is (\s-1IMO\s0) tha dopest notation for
expressin recurrin events up in existence. I straight-up consider it the
single most blingin contribution ta date/time handlin in
Date::Manip.
.PP
When I first decided ta add recurrin events ta Date::Manip, I first
came up wit a list of common wayz of specifyin recurrin events, and
then went lookin fo' a notation dat could be used ta define em.  I
was hopin fo' a notation dat would be similar ta cron notation yo, but
more powerful.
.PP
Afta lookin up in nuff muthafuckin justifications (includin \s-1ISO 8601\s0) n' after
a rap on a mailin list of calendar related topics, it rocked up
that there was no concise, flexible notation fo' handlin recurring
events dat would handle all of tha common forms I'd come up with.
.PP
So, as a matta of necessity, I set bout inventin mah own notation.
As I was lookin at mah list, it struck me dat all of tha parts which
specified a gangbangin' frequency was higher level (i.e. referred ta a larger
unit of time) than dem parts which specified a specific value (what
I've called tha rtime). In other lyrics, when tha terms was laid out
from year down ta seconds, tha frequency part was always left of
specific joints.
.PP
That hustled immediately ta tha notation busted lyrics bout above, so I started analyzing
it ta figure up if it could express all of tha recurrin events I'd
come up with. Well shiiiit, it succeeded on 100% of em. Not only dat yo, but by playing
with different joints (especially different combinationz of m/w/d joints), I
found dat it would define recurrin events dat I hadn't even thought of,
but which seemed perfectly reasonable up in hindsight.
.PP
Afta a straight-up short period, I realized just how tha fuck bangin dis notation was,
and set bout implementin it, n' as I holla'd above, of all tha contributions
that Date::Manip has made, I consider dis ta be da most thugged-out blingin.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
If you specify a recurrence which cannot be satisfied fo' tha base date,
or fo' any time afta tha base date, tha recurrence will crash.  This
can only happen if you specify a recurrence dat always occurs up in the
sprin \s-1DST\s0 transizzle rockin tha current timezone rules.
.PP
For example, up in a \s-1US\s0 timezone, tha current timezone rulez state dat a
\&\s-1DST\s0 transizzle occurs at 02:00:00 on tha 2nd Sundizzle up in March n' the
clock jumps ta 03:00.  This started up in 2006.  As a result, tha recurrence
.PP
.Vb 1
\&   1*3:2:7:2:0:0
.Ve
.PP
with a funky-ass base date of 2006 or lata cannot be satisfied.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
Please refer ta tha Date::Manip::Problems documentation for
information on submittin bug reports or thangs ta tha lyricist.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
