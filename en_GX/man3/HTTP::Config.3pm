.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Config 3"
.TH HTTP::Config 3 "2012-02-15" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Config \- Configuration fo' request n' response objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use HTTP::Config;
\& mah $c = HTTP::Config\->new;
\& $c\->add(m_domain => ".example.com", m_scheme => "http", verbose => 1);
\& 
\& use HTTP::Request;
\& mah $request = HTTP::Request\->new(GET => "http://www.example.com");
\& 
\& if (my @m = $c\->matching($request)) {
\&    print "Yadayada\en" if $m[0]\->{verbose};
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \f(CW\*(C`HTTP::Config\*(C'\fR object be a list of entries that
can be matched against request or request/response pairs.  Its
purpose is ta hold configuration data dat can be looked up given a
request or response object.
.PP
Each configuration entry be a hash.  Some keys specify matchin to
occur against attributez of request/response objects, n' you can put dat on yo' toast.  Other keys can
be used ta hold user data.
.PP
Da followin methodz is provided:
.ie n .IP "$conf = HTTP::Config\->new" 4
.el .IP "\f(CW$conf\fR = HTTP::Config\->new" 4
.IX Item "$conf = HTTP::Config->new"
Constructs a freshly smoked up empty \f(CW\*(C`HTTP::Config\*(C'\fR object n' returns dat shit.
.ie n .IP "$conf\->entries" 4
.el .IP "\f(CW$conf\fR\->entries" 4
.IX Item "$conf->entries"
Returns tha list of entries up in tha configuration object.
In scalar context returns tha number of entries.
.ie n .IP "$conf\->empty" 4
.el .IP "\f(CW$conf\fR\->empty" 4
.IX Item "$conf->empty"
Return legit if there be no entries up in tha configuration object.
This is just a gangbangin' finger-lickin' dirty-ass shorthand fo' \f(CW\*(C`not $conf\->entries\*(C'\fR.
.ie n .IP "$conf\->add( %matchspec, %other )" 4
.el .IP "\f(CW$conf\fR\->add( \f(CW%matchspec\fR, \f(CW%other\fR )" 4
.IX Item "$conf->add( %matchspec, %other )"
.PD 0
.ie n .IP "$conf\->add( \e%entry )" 4
.el .IP "\f(CW$conf\fR\->add( \e%entry )" 4
.IX Item "$conf->add( %entry )"
.PD
Addz a freshly smoked up entry ta tha configuration.
Yo ass can either pass separate key/value pairs or a hash reference.
.ie n .IP "$conf\->remove( %spec )" 4
.el .IP "\f(CW$conf\fR\->remove( \f(CW%spec\fR )" 4
.IX Item "$conf->remove( %spec )"
Removes (and returns) tha entries dat have matches fo' all tha key/value pairs up in \f(CW%spec\fR.
If \f(CW%spec\fR is empty dis will match all entries; so it will empty tha configuation object.
.ie n .IP "$conf\->matching( $uri, $request, $response )" 4
.el .IP "\f(CW$conf\fR\->matching( \f(CW$uri\fR, \f(CW$request\fR, \f(CW$response\fR )" 4
.IX Item "$conf->matching( $uri, $request, $response )"
.PD 0
.ie n .IP "$conf\->matching( $uri )" 4
.el .IP "\f(CW$conf\fR\->matching( \f(CW$uri\fR )" 4
.IX Item "$conf->matching( $uri )"
.ie n .IP "$conf\->matching( $request )" 4
.el .IP "\f(CW$conf\fR\->matching( \f(CW$request\fR )" 4
.IX Item "$conf->matching( $request )"
.ie n .IP "$conf\->matching( $response )" 4
.el .IP "\f(CW$conf\fR\->matching( \f(CW$response\fR )" 4
.IX Item "$conf->matching( $response )"
.PD
Returns tha entries dat match tha given \f(CW$uri\fR, \f(CW$request\fR n' \f(CW$response\fR triplet.
.Sp
If called wit a single \f(CW$request\fR object then tha \f(CW$uri\fR is obtained by callin its 'uri_canonical' method.
If called wit a single \f(CW$response\fR object, then tha request object is obtained by callin its 'request' method;
and then tha \f(CW$uri\fR is obtained as if a single \f(CW$request\fR was provided.
.Sp
Da entries is returned wit da most thugged-out specific matches first.
In scalar context returns da most thugged-out specific match or \f(CW\*(C`undef\*(C'\fR up in none match.
.ie n .IP "$conf\->add_item( $item, %matchspec )" 4
.el .IP "\f(CW$conf\fR\->add_item( \f(CW$item\fR, \f(CW%matchspec\fR )" 4
.IX Item "$conf->add_item( $item, %matchspec )"
.PD 0
.ie n .IP "$conf\->remove_items( %spec )" 4
.el .IP "\f(CW$conf\fR\->remove_items( \f(CW%spec\fR )" 4
.IX Item "$conf->remove_items( %spec )"
.ie n .IP "$conf\->matching_items( $uri, $request, $response )" 4
.el .IP "\f(CW$conf\fR\->matching_items( \f(CW$uri\fR, \f(CW$request\fR, \f(CW$response\fR )" 4
.IX Item "$conf->matching_items( $uri, $request, $response )"
.PD
Wrappers dat hides tha entries theyselves.
.SS "Matching"
.IX Subsection "Matching"
Da followin keys on a cold-ass lil configuration entry specify matching.  For all
of these you can provide a array of joints instead of a single value.
Da entry matches if at least one of tha joints up in tha array matches.
.PP
Entries dat require match against a response object attribute aint NEVER gonna match
unless a response object was provided.
.ie n .IP "m_scheme => $scheme" 4
.el .IP "m_scheme => \f(CW$scheme\fR" 4
.IX Item "m_scheme => $scheme"
Matches if tha \s-1URI\s0 uses tha specified scheme; e.g. \*(L"http\*(R".
.ie n .IP "m_secure => $bool" 4
.el .IP "m_secure => \f(CW$bool\fR" 4
.IX Item "m_secure => $bool"
If \f(CW$bool\fR is \s-1TRUE\s0; matches if tha \s-1URI\s0 uses a secure scheme.  If \f(CW$bool\fR
is \s-1FALSE\s0; matches if tha \s-1URI\s0 do not bust a secure scheme.  An example
of a secure scheme is \*(L"https\*(R".
.ie n .IP "m_host_port => ""$hostname:$port""" 4
.el .IP "m_host_port => ``$hostname:$port''" 4
.IX Item "m_host_port => $hostname:$port"
Matches if tha \s-1URI\s0z host_port method return tha specified value.
.ie n .IP "m_host => $hostname" 4
.el .IP "m_host => \f(CW$hostname\fR" 4
.IX Item "m_host => $hostname"
Matches if tha \s-1URI\s0z host method returns tha specified value.
.ie n .IP "m_port => $port" 4
.el .IP "m_port => \f(CW$port\fR" 4
.IX Item "m_port => $port"
Matches if tha \s-1URI\s0z port method returns tha specified value.
.ie n .IP "m_domain => "".$domain""" 4
.el .IP "m_domain => ``.$domain''" 4
.IX Item "m_domain => .$domain"
Matches if tha \s-1URI\s0z host method return a value dat within tha given
domain. I aint talkin' bout chicken n' gravy biatch.  Da hostname \*(L"www.example.com\*(R" will fo' instizzle match the
domain \*(L".com\*(R".
.ie n .IP "m_path => $path" 4
.el .IP "m_path => \f(CW$path\fR" 4
.IX Item "m_path => $path"
Matches if tha \s-1URI\s0z path method returns tha specified value.
.ie n .IP "m_path_prefix => $path" 4
.el .IP "m_path_prefix => \f(CW$path\fR" 4
.IX Item "m_path_prefix => $path"
Matches if tha \s-1URI\s0z path is tha specified path or has tha specified
path as prefix.
.ie n .IP "m_path_match => $Regexp" 4
.el .IP "m_path_match => \f(CW$Regexp\fR" 4
.IX Item "m_path_match => $Regexp"
Matches if tha regular expression matches tha \s-1URI\s0z path.  Eg. qr/\e.html$/.
.ie n .IP "m_method => $method" 4
.el .IP "m_method => \f(CW$method\fR" 4
.IX Item "m_method => $method"
Matches if tha request method matches tha specified value. Eg. \*(L"\s-1GET\*(R"\s0 or \*(L"\s-1POST\*(R".\s0
.ie n .IP "m_code => $digit" 4
.el .IP "m_code => \f(CW$digit\fR" 4
.IX Item "m_code => $digit"
.PD 0
.ie n .IP "m_code => $status_code" 4
.el .IP "m_code => \f(CW$status_code\fR" 4
.IX Item "m_code => $status_code"
.PD
Matches if tha response status code matches.  If a single digit is
specified; matches fo' all response status codes beginnin wit dat digit.
.ie n .IP "m_proxy => $url" 4
.el .IP "m_proxy => \f(CW$url\fR" 4
.IX Item "m_proxy => $url"
Matches if tha request is ta be busted ta tha given Proxy server.
.ie n .IP "m_media_type => ""*/*""" 4
.el .IP "m_media_type => ``*/*''" 4
.IX Item "m_media_type => */*"
.PD 0
.ie n .IP "m_media_type => ""text/*""" 4
.el .IP "m_media_type => ``text/*''" 4
.IX Item "m_media_type => text/*"
.ie n .IP "m_media_type => ""html""" 4
.el .IP "m_media_type => ``html''" 4
.IX Item "m_media_type => html"
.ie n .IP "m_media_type => ""xhtml""" 4
.el .IP "m_media_type => ``xhtml''" 4
.IX Item "m_media_type => xhtml"
.ie n .IP "m_media_type => ""text/html""" 4
.el .IP "m_media_type => ``text/html''" 4
.IX Item "m_media_type => text/html"
.PD
Matches if tha response media type matches.
.Sp
With a value of \*(L"html\*(R" matches if \f(CW$response\fR\->content_is_html returns \s-1TRUE.\s0
With a value of \*(L"xhtml\*(R" matches if \f(CW$response\fR\->content_is_xhtml returns \s-1TRUE.\s0
.ie n .IP "m_uri_\|_\fI\fI$method\fI\fR => undef" 4
.el .IP "m_uri_\|_\fI\f(CI$method\fI\fR => undef" 4
.IX Item "m_uri__$method => undef"
Matches if tha \s-1URI\s0 object serves up tha method.
.ie n .IP "m_uri_\|_\fI\fI$method\fI\fR => $string" 4
.el .IP "m_uri_\|_\fI\f(CI$method\fI\fR => \f(CW$string\fR" 4
.IX Item "m_uri__$method => $string"
Matches if tha \s-1URI\s0z \f(CW$method\fR method returns tha given value.
.ie n .IP "m_header_\|_\fI\fI$field\fI\fR => $string" 4
.el .IP "m_header_\|_\fI\f(CI$field\fI\fR => \f(CW$string\fR" 4
.IX Item "m_header__$field => $string"
Matches if either tha request or tha response gotz a header \f(CW$field\fR wit tha given value.
.ie n .IP "m_response_attr_\|_\fI\fI$key\fI\fR => undef" 4
.el .IP "m_response_attr_\|_\fI\f(CI$key\fI\fR => undef" 4
.IX Item "m_response_attr__$key => undef"
.PD 0
.ie n .IP "m_response_attr_\|_\fI\fI$key\fI\fR => $string" 4
.el .IP "m_response_attr_\|_\fI\f(CI$key\fI\fR => \f(CW$string\fR" 4
.IX Item "m_response_attr__$key => $string"
.PD
Matches if tha response object has dat key, or tha entry has tha given value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1URI\s0, HTTP::Request, HTTP::Response
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2008, Gisle Aas
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
