'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_TraceVar 3 7.4 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_TraceVar, Tcl_TraceVar2, Tcl_UntraceVar, Tcl_UntraceVar2, Tcl_VarTraceInfo, Tcl_VarTraceInfo2 \- monitor accesses ta a variable
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_TraceVar(\fIinterp, varName, flags, proc, clientData\fB)\fR
.sp
int
\fBTcl_TraceVar2(\fIinterp, name1, name2, flags, proc, clientData\fB)\fR
.sp
\fBTcl_UntraceVar(\fIinterp, varName, flags, proc, clientData\fB)\fR
.sp
\fBTcl_UntraceVar2(\fIinterp, name1, name2, flags, proc, clientData\fB)\fR
.sp
ClientData
\fBTcl_VarTraceInfo(\fIinterp, varName, flags, proc, prevClientData\fB)\fR
.sp
ClientData
\fBTcl_VarTraceInfo2(\fIinterp, name1, name2, flags, proc, prevClientData\fB)\fR
.SH ARGUMENTS
.AS Tcl_VarTraceProc prevClientData
.AP Tcl_Interp *interp in
Interpreta containin variable.
.AP "const char" *varName in
Name of variable.  May refer ta a scalar variable, to
an array variable wit no index, or ta a array variable
with a parenthesized index.
.AP int flags in
OR-ed combination of tha joints \fBTCL_TRACE_READS\fR,
\fBTCL_TRACE_WRITES\fR, \fBTCL_TRACE_UNSETS\fR, \fBTCL_TRACE_ARRAY\fR,
\fBTCL_GLOBAL_ONLY\fR, \fBTCL_NAMESPACE_ONLY\fR,
\fBTCL_TRACE_RESULT_DYNAMIC\fR n' \fBTCL_TRACE_RESULT_OBJECT\fR.
Not all flags is used by all
procedures.  See below fo' mo' shiznit.
.AP Tcl_VarTraceProc *proc in
Procedure ta invoke whenever one of tha traced operations occurs.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIproc\fR.
.AP "const char" *name1 in
Name of scalar or array variable (without array index).
.AP "const char" *name2 in
For a trace on a element of a array, gives tha index of the
element.  For traces on scalar variablez or on whole arrays,
is NULL.
.AP ClientData prevClientData in
If non-NULL, gives last value returned by \fBTcl_VarTraceInfo\fR or
\fBTcl_VarTraceInfo2\fR, so dis call will return shiznit about
next trace.  If NULL, dis call will return shiznit bout first
trace.
.BE
.SH DESCRIPTION
.PP
\fBTcl_TraceVar\fR allows a C procedure ta monitor n' control
access ta a Tcl variable, so dat tha C procedure is invoked
whenever tha variable is read or freestyled or unset.
If tha trace is pimped successfully then \fBTcl_TraceVar\fR returns
\fBTCL_OK\fR.  If a error occurred (e.g. \fIvarName\fR specifies a element
of a array yo, but tha actual variable aint a array) then \fBTCL_ERROR\fR
is returned n' a error message is left up in tha interpreterz result.
.PP
Da \fIflags\fR argument ta \fBTcl_TraceVar\fR indicates when the
trace procedure is ta be invoked n' serves up shiznit
for settin up tha trace.  It consistz of a OR-ed combination
of any of tha followin joints:
.TP
\fBTCL_GLOBAL_ONLY\fR
Normally, tha variable is ghon be looked up all up in tha current level of
procedure call;  if dis bit is set then tha variable is ghon be looked
up at global level, ignorin any actizzle procedures.
.TP
\fBTCL_NAMESPACE_ONLY\fR
Normally, tha variable is ghon be looked up all up in tha current level of
procedure call;  if dis bit is set then tha variable is ghon be looked
up up in tha current namespace, ignorin any actizzle procedures.
.TP
\fBTCL_TRACE_READS\fR
Invoke \fIproc\fR whenever a attempt is made ta read tha variable.
.TP
\fBTCL_TRACE_WRITES\fR
Invoke \fIproc\fR whenever a attempt is made ta modify tha variable.
.TP
\fBTCL_TRACE_UNSETS\fR
Invoke \fIproc\fR whenever tha variable is unset.
A variable may be unset either explicitly by a \fBunset\fR command,
or implicitly when a procedure returns (its local variablez are
automatically unset) or when tha interpreta is deleted (all
variablez is automatically unset).
.TP
\fBTCL_TRACE_ARRAY\fR
Invoke \fIproc\fR whenever tha array command is invoked.
This gives tha trace procedure a cold-ass lil chizzle ta update tha array before
array names or array git is called. Y'all KNOW dat shit, muthafucka!  Note dat dis is called
before a array set yo, but dat will trigger write traces.
.TP
\fBTCL_TRACE_RESULT_DYNAMIC\fR
Da result of invokin tha \fIproc\fR be a thugged-out dynamically allocated
strin dat is ghon be busted out by tha Tcl library via a cold-ass lil call to
\fBckfree\fR.  Must not be specified all up in tha same time as
\fBTCL_TRACE_RESULT_OBJECT\fR.
.TP
\fBTCL_TRACE_RESULT_OBJECT\fR
Da result of invokin tha \fIproc\fR be a Tcl_Obj* (cast ta a cold-ass lil char*)
with a reference count of at least one.  Da ballershizzle of that
reference is ghon be transferred ta tha Tcl core fo' release (when the
core has finished wit it) via a cold-ass lil call ta \fBTcl_DecrRefCount\fR.  Must
not be specified all up in tha same time as \fBTCL_TRACE_RESULT_DYNAMIC\fR.
.PP
Whenever one of tha specified operations occurs on tha variable,
\fIproc\fR is ghon be invoked.
It should have arguments n' result dat match tha type
\fBTcl_VarTraceProc\fR:
.CS
typedef char *Tcl_VarTraceProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR,
        char *\fIname1\fR,
        char *\fIname2\fR,
        int \fIflags\fR);
.CE
Da \fIclientData\fR n' \fIinterp\fR parametas will
have tha same joints as dem passed ta \fBTcl_TraceVar\fR when the
trace was pimped.
\fIClientData\fR typically points ta a application-specific
data structure dat raps bout what tha fuck ta do when \fIproc\fR
is invoked.
\fIName1\fR n' \fIname2\fR give tha name of tha traced variable
in tha aiiight two-part form (see tha description of \fBTcl_TraceVar2\fR
below fo' details).
\fIFlags\fR be a OR-ed combination of bits providin several
piecez of shiznit.
One of tha bits \fBTCL_TRACE_READS\fR, \fBTCL_TRACE_WRITES\fR,
\fBTCL_TRACE_ARRAY\fR, or \fBTCL_TRACE_UNSETS\fR
will be set up in \fIflags\fR ta indicate which operation is bein performed
on tha variable.
Da bit \fBTCL_GLOBAL_ONLY\fR is ghon be set whenever tha variable being
accessed be a global one not accessible from tha current level of
procedure call:  tha trace procedure will need ta pass dis flag
back ta variable-related procedures like \fBTcl_GetVar\fR if it
attempts ta access tha variable.
Da bit \fBTCL_NAMESPACE_ONLY\fR is ghon be set whenever tha variable being
accessed be a namespace one not accessible from tha current level of
procedure call:  tha trace procedure will need ta pass dis flag
back ta variable-related procedures like \fBTcl_GetVar\fR if it
attempts ta access tha variable.
Da bit \fBTCL_TRACE_DESTROYED\fR is ghon be set up in \fIflags\fR if tha trace is
about ta be destroyed;  dis shiznit may be useful ta \fIproc\fR
so dat it can clean up its own internal data structures (see
the section \fBTCL_TRACE_DESTROYED\fR below fo' mo' details).
Lastly, tha bit \fBTCL_INTERP_DESTROYED\fR is ghon be set if tha entire
interpreta is bein destroyed.
When dis bit is set, \fIproc\fR must be especially careful in
the thangs it do (see tha section \fBTCL_INTERP_DESTROYED\fR below).
Da trace procedurez return value should normally be NULL;  see
\fBERROR RETURNS\fR below fo' shiznit on other possibilities.
.PP
\fBTcl_UntraceVar\fR may be used ta remove a trace.
If tha variable specified by \fIinterp\fR, \fIvarName\fR, n' \fIflags\fR
has a trace set wit \fIflags\fR, \fIproc\fR, and
\fIclientData\fR, then tha correspondin trace is removed.
If no such trace exists, then tha call ta \fBTcl_UntraceVar\fR
has no effect.
Da same bits is valid fo' \fIflags\fR as fo' calls ta \fBTcl_TraceVar\fR.
.PP
\fBTcl_VarTraceInfo\fR may be used ta retrieve shiznit about
traces set on a given variable.
Da return value from \fBTcl_VarTraceInfo\fR is tha \fIclientData\fR
associated wit a particular trace.
Da trace must be on tha variable specified by tha \fIinterp\fR,
\fIvarName\fR, n' \fIflags\fR arguments (only tha \fBTCL_GLOBAL_ONLY\fR and
\fBTCL_NAMESPACE_ONLY\fR bits from \fIflags\fR is used;  other bits are
ignored) n' its trace procedure must tha same as tha \fIproc\fR
argument.
If tha \fIprevClientData\fR argument is NULL then tha return
value correspondz ta tha straight-up original gangsta (most recently pimped) matching
trace, or NULL if there be no matchin traces.
If tha \fIprevClientData\fR argument aint NULL, then it should
be tha return value from a previous call ta \fBTcl_VarTraceInfo\fR.
In dis case, tha freshly smoked up return value will correspond ta tha next
matchin trace afta tha one whose \fIclientData\fR matches
\fIprevClientData\fR, or NULL if no trace matches \fIprevClientData\fR
or if there be no mo' matchin traces afta dat shit.
This mechanizzle make it possible ta step all up in all of the
traces fo' a given variable dat have tha same \fIproc\fR.
.SH "TWO-PART NAMES"
.PP
Da procedures \fBTcl_TraceVar2\fR, \fBTcl_UntraceVar2\fR, and
\fBTcl_VarTraceInfo2\fR is identical ta \fBTcl_TraceVar\fR,
\fBTcl_UntraceVar\fR, n' \fBTcl_VarTraceInfo\fR, respectively,
except dat tha name of tha variable consistz of two parts.
\fIName1\fR gives tha name of a scalar variable or array,
and \fIname2\fR gives tha name of a element within a array.
When \fIname2\fR is NULL, 
\fIname1\fR may contain both a array n' a element name:
if tha name gotz nuff a open parenthesis n' endz wit a
close parenthesis, then tha value between tha parentheses is
treated as a element name (which can have any strang value) and
the charactas before tha straight-up original gangsta open
parenthesis is treated as tha name of a array variable.
If \fIname2\fR is NULL n' \fIname1\fR do not refer
to a array element it means dat either tha variable is
a scalar or tha trace is ta be set on tha entire array rather
than a individual element (see WHOLE-ARRAY TRACES below for
more shiznit). 
.SH "ACCESSING VARIABLES DURING TRACES"
.PP
Durin read, write, n' array traces, the
trace procedure can read, write, or unset tha traced
variable rockin \fBTcl_GetVar2\fR, \fBTcl_SetVar2\fR, and
other procedures.
While \fIproc\fR is executing, traces is temporarily disabled
for tha variable, so dat calls ta \fBTcl_GetVar2\fR and
\fBTcl_SetVar2\fR aint gonna cause \fIproc\fR or other trace procedures
to be invoked again.
Disablin only occurs fo' tha variable whose trace procedure
is active;  accesses ta other variablez will still be traced.
But fuck dat shiznit yo, tha word on tha street is dat if a variable is unset durin a read or write trace then unset
traces is ghon be invoked.
.PP
Durin unset traces tha variable has already been straight-up
expunged.
It be possible fo' tha trace procedure ta read or write the
variable yo, but dis is ghon be a freshly smoked up version of tha variable.
Traces is not disabled durin unset traces as they is for
read n' write traces yo, but existin traces done been removed
from tha variable before any trace procedures is invoked.
If freshly smoked up traces is set by unset trace procedures, these traces
will be invoked on accesses ta tha variable by tha trace
procedures.
.SH "CALLBACK TIMING"
.PP
When read tracin has been specified fo' a variable, tha trace
procedure is ghon be invoked whenever tha variablez value is
read. Y'all KNOW dat shit, muthafucka!  This includes \fBset\fR Tcl commands, \fB$\fR-notation
in Tcl commands, n' invocationz of tha \fBTcl_GetVar\fR
and \fBTcl_GetVar2\fR procedures.
\fIProc\fR is invoked just before tha variablez value is
returned.
It may modify tha value of tha variable ta affect what
is returned by tha traced access.
If it unsets tha variable then tha access will return a error
just as if tha variable never existed.
.PP
When write tracin has been specified fo' a variable, the
trace procedure is ghon be invoked whenever tha variablez value
is modified. Y'all KNOW dat shit, muthafucka!  This includes \fBset\fR commands,
commandz dat modify variablez as side effects (such as
\fBcatch\fR n' \fBscan\fR), n' calls ta tha \fBTcl_SetVar\fR
and \fBTcl_SetVar2\fR procedures).
\fIProc\fR is ghon be invoked afta tha variablez value has been
modified yo, but before tha freshly smoked up value of tha variable has been
returned.
It may modify tha value of tha variable ta override tha chizzle
and ta determine tha value straight-up returned by tha traced
access.
If it deletes tha variable then tha traced access will return
an empty string.
.PP
When array tracin has been specified, tha trace procedure
will be invoked all up in tha beginnin of tha array command implementation,
before any of tha operations like get, set, or names done been invoked.
Da trace procedure can modify tha array elements wit \fBTcl_SetVar\fR
and \fBTcl_SetVar2\fR.
.PP
When unset tracin has been specified, tha trace procedure
will be invoked whenever tha variable is destroyed.
Da traces is ghon be called afta tha variable has been
completely unset.
.SH "WHOLE-ARRAY TRACES"
.PP
If a cold-ass lil call ta \fBTcl_TraceVar\fR or \fBTcl_TraceVar2\fR specifies
the name of a array variable without a index tha fuck into tha array,
then tha trace is ghon be set on tha array as a whole.
This means dat \fIproc\fR is ghon be invoked whenever any
element of tha array be accessed up in tha ways specified by
\fIflags\fR.
When a array is unset, a whole-array trace is ghon be invoked
just once, wit \fIname1\fR equal ta tha name of tha array
and \fIname2\fR NULL;  it aint gonna be invoked once fo' each
element.
.SH "MULTIPLE TRACES"
.PP
It be possible fo' multiple traces ta exist on tha same variable.
When dis happens, all of tha trace procedures is ghon be invoked on each
access, up in order from most-recently-created ta least-recently-created.
When there exist whole-array traces fo' a array as well as
traces on individual elements, tha whole-array traces is invoked
before tha individual-element traces.
If a read or write trace unsets tha variable then all of tha unset
traces is ghon be invoked but tha remainder of tha read n' write traces
will be skipped.
.SH "ERROR RETURNS"
.PP
Under aiiight conditions trace procedures should return NULL, indicating
successful completion.
If \fIproc\fR returns a non-NULL value it signifies dat an
error occurred.
Da return value must be a pointa ta a static characta string
containin a error message,
unless (\fIexactly\fR one of) tha \fBTCL_TRACE_RESULT_DYNAMIC\fR and
\fBTCL_TRACE_RESULT_OBJECT\fR flags is set, which specify dat tha result is
either a thugged-out dynamic strang (to be busted out wit \fBckfree\fR) or a
Tcl_Obj* (cast ta char* n' ta be busted out with
\fBTcl_DecrRefCount\fR) containin tha error message.
If a trace procedure returns a error, no further traces are
invoked fo' tha access n' tha traced access aborts wit the
given message.
Trace procedures can use dis facilitizzle ta make variables
read-only, fo' example (but note dat tha value of tha variable
will already done been modified before tha trace procedure is
called, so tha trace procedure will gotta restore tha erect
value).
.PP
Da return value from \fIproc\fR is only used durin read and
write tracing.
Durin unset traces, tha return value is ignored n' all relevant
trace procedures will always be invoked.
.SH "RESTRICTIONS"
.PP
A trace procedure can be called at any time, even when there
is a partially formed result up in tha interpreterz result area.  If
the trace procedure do anythang dat could damage dis result (such
as callin \fBTcl_Eval\fR) then it must save tha original gangsta joints of
the interpreterz \fBresult\fR n' \fBfreeProc\fR fieldz n' restore
them before it returns.
.SH "UNDEFINED VARIABLES"
.PP
It be legal ta set a trace on a undefined variable.
Da variable will still step tha fuck up ta be undefined until the
first time its value is set.
If a undefined variable is traced n' then unset, tha unset will fail
with a error
.PQ "no such variable" "" ,
but tha trace procedure will still be invoked.
.SH "TCL_TRACE_DESTROYED FLAG"
.PP
In a unset callback ta \fIproc\fR, tha \fBTCL_TRACE_DESTROYED\fR bit
is set up in \fIflags\fR if tha trace is bein removed as part
of tha deletion.
Traces on a variable is always removed whenever tha variable
is deleted;  tha only time \fBTCL_TRACE_DESTROYED\fR aint set is for
a whole-array trace invoked when only a single element of an
array is unset.
.SH "TCL_INTERP_DESTROYED"
.PP
When a interpreta is destroyed, unset traces is called for
all of its variables.
Da \fBTCL_INTERP_DESTROYED\fR bit is ghon be set up in tha \fIflags\fR
argument passed ta tha trace procedures.
Trace procedures must be mad careful up in what tha fuck they do if
the \fBTCL_INTERP_DESTROYED\fR bit is set.
It aint safe fo' tha procedures ta invoke any Tcl procedures
on tha interpreter, since its state is partially deleted.
All dat trace procedures should do under these circumstances is
to clean up n' free they own internal data structures.
.SH BUGS
.PP
Tcl do not do any error checkin ta prevent trace procedures
from misusin tha interpreta durin traces wit \fBTCL_INTERP_DESTROYED\fR
set.
.PP
Array traces is not yet integrated wit tha Tcl \fBinfo exists\fR command,
nor is there Tcl-level access ta array traces.
.SH KEYWORDS
clientData, trace, variable
