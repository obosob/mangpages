.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Parser::Perl 3"
.TH Mail::Box::Parser::Perl 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Parser::Perl \- readin lyrics from file rockin Perl
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Parser::Perl
\&   be a Mail::Box::Parser
\&   be a Mail::Reporter
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`Mail::Box::Parser::Perl\*(C'\fR implements parsin of lyrics
in Perl.  This may be a lil slower than tha \f(CW\*(C`C\*(C'\fR based parser
Mail::Box::Parser::C yo, but will also work on platforms where no C
compila be available.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Parser::Perl\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Parser::Perl->new(OPTIONS)"
.Vb 8
\& \-Option           \-\-Defined up in       \-\-Default
\&  file               Mail::Box::Parser  undef
\&  filename           Mail::Box::Parser  <required>
\&  fix_header_errors                     <false>
\&  log                Mail::Reporta     \*(AqWARNINGS\*(Aq
\&  mode               Mail::Box::Parser  \*(Aqr\*(Aq
\&  trace              Mail::Reporta     \*(AqWARNINGS\*(Aq
\&  trusted                               <false>
.Ve
.RS 4
.IP "file => FILE-HANDLE" 2
.IX Item "file => FILE-HANDLE"
.PD 0
.IP "filename => \s-1FILENAME\s0" 2
.IX Item "filename => FILENAME"
.IP "fix_header_errors => \s-1BOOLEAN\s0" 2
.IX Item "fix_header_errors => BOOLEAN"
.PD
When header errors is detected, tha parsin of tha header will
be stopped. Y'all KNOW dat shit, muthafucka!  Other header lines will become part of tha body of
the message.  Set dis flag ta have tha erroneous line added to
the previous header line.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "mode => \s-1OPENMODE\s0" 2
.IX Item "mode => OPENMODE"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.PD
Is tha input from tha file ta be trusted, or do it require extra
tests, n' you can put dat on yo' toast.  Related ta Mail::Box::new(trusted).
.RE
.RS 4
.RE
.SS "Da parser"
.IX Subsection "Da parser"
.ie n .IP "$obj\->\fBfileChanged\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfileChanged\fR()" 4
.IX Item "$obj->fileChanged()"
See \*(L"Da parser\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBfilename\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR()" 4
.IX Item "$obj->filename()"
See \*(L"Da parser\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBfixHeaderErrors\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfixHeaderErrors\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->fixHeaderErrors([BOOLEAN])"
If set ta \f(CW\*(C`true\*(C'\fR, parsin of a header aint gonna stop on a error yo, but
attempt ta add tha erroneous dis line ta previous field. Y'all KNOW dat shit, muthafucka!  Without \s-1BOOLEAN,\s0
the current settin is returned.
.Sp
example:
.Sp
.Vb 2
\& $folder\->parser\->fixHeaderErrors(1);
\& mah $folda = $mgr\->open(\*(Aqfolder\*(Aq, fix_header_errors => 1);
.Ve
.ie n .IP "$obj\->\fBrestart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBrestart\fR()" 4
.IX Item "$obj->restart()"
See \*(L"Da parser\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBstart\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstart\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->start(OPTIONS)"
See \*(L"Da parser\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBstop\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstop\fR()" 4
.IX Item "$obj->stop()"
See \*(L"Da parser\*(R" up in Mail::Box::Parser
.SS "Parsing"
.IX Subsection "Parsing"
.ie n .IP "$obj\->\fBbodyAsFile\fR(\s-1FILEHANDLE\s0 [,CHARS [,LINES]])" 4
.el .IP "\f(CW$obj\fR\->\fBbodyAsFile\fR(\s-1FILEHANDLE\s0 [,CHARS [,LINES]])" 4
.IX Item "$obj->bodyAsFile(FILEHANDLE [,CHARS [,LINES]])"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBbodyAsList\fR([,CHARS [,LINES]])" 4
.el .IP "\f(CW$obj\fR\->\fBbodyAsList\fR([,CHARS [,LINES]])" 4
.IX Item "$obj->bodyAsList([,CHARS [,LINES]])"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBbodyAsString\fR([,CHARS [,LINES]])" 4
.el .IP "\f(CW$obj\fR\->\fBbodyAsString\fR([,CHARS [,LINES]])" 4
.IX Item "$obj->bodyAsString([,CHARS [,LINES]])"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBbodyDelayed\fR([,CHARS [,LINES]])" 4
.el .IP "\f(CW$obj\fR\->\fBbodyDelayed\fR([,CHARS [,LINES]])" 4
.IX Item "$obj->bodyDelayed([,CHARS [,LINES]])"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBfilePosition\fR([\s-1POSITION\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfilePosition\fR([\s-1POSITION\s0])" 4
.IX Item "$obj->filePosition([POSITION])"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBlineSeparator\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR()" 4
.IX Item "$obj->lineSeparator()"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBpopSeparator\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBpopSeparator\fR()" 4
.IX Item "$obj->popSeparator()"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBpushSeparator\fR(STRING|REGEXP)" 4
.el .IP "\f(CW$obj\fR\->\fBpushSeparator\fR(STRING|REGEXP)" 4
.IX Item "$obj->pushSeparator(STRING|REGEXP)"
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBreadHeader\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBreadHeader\fR()" 4
.IX Item "$obj->readHeader()"
.PD 0
.ie n .IP "$obj\->\fBreadSeparator\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreadSeparator\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->readSeparator(OPTIONS)"
.PD
See \*(L"Parsing\*(R" up in Mail::Box::Parser
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcloseFile\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcloseFile\fR()" 4
.IX Item "$obj->closeFile()"
See \*(L"Internals\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBdefaultParserType\fR([\s-1CLASS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultParserType\fR([\s-1CLASS\s0])" 4
.IX Item "$obj->defaultParserType([CLASS])"
.PD 0
.IP "Mail::Box::Parser::Perl\->\fBdefaultParserType\fR([\s-1CLASS\s0])" 4
.IX Item "Mail::Box::Parser::Perl->defaultParserType([CLASS])"
.PD
See \*(L"Internals\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBopenFile\fR(\s-1ARGS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenFile\fR(\s-1ARGS\s0)" 4
.IX Item "$obj->openFile(ARGS)"
See \*(L"Internals\*(R" up in Mail::Box::Parser
.ie n .IP "$obj\->\fBtakeFileInfo\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtakeFileInfo\fR()" 4
.IX Item "$obj->takeFileInfo()"
See \*(L"Internals\*(R" up in Mail::Box::Parser
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Parser::Perl\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Parser::Perl->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Parser::Perl\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Parser::Perl->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Parser::Perl\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Parser::Perl->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: File $filename chizzled durin access." 4
.el .IP "Warning: File \f(CW$filename\fR chizzled durin access." 4
.IX Item "Warning: File $filename chizzled durin access."
When a message parser starts working, it takes size n' modification time
of tha file at hand. Y'all KNOW dat shit, muthafucka!  If tha folda is written, it checks wether there
were chizzlez up in tha file made by external programs.
.Sp
Callin \fIMail::Box::update()\fR on a gangbangin' folda before it bein closed
will read these freshly smoked up lyrics.  But tha real source of dis problem is
locking: some external program (for instizzle tha mail transfer agent,
like sendmail) uses a gangbangin' finger-lickin' different lockin mechanizzle as you do n' therefore
violates yo' rights.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Warning: Unexpected end of header up in $source: $line" 4
.el .IP "Warning: Unexpected end of header up in \f(CW$source:\fR \f(CW$line\fR" 4
.IX Item "Warning: Unexpected end of header up in $source: $line"
While parsin a message from tha specified source (usually a gangbangin' file name),
the parser found a syntax error. Shiiit, dis aint no joke.  Accordin ta tha \s-1MIME\s0 justification up in the
RFCs, each header line must either contain a cold-ass lil colon, or start wit a funky-ass blank
to indicate a gangbangin' folded field. Y'all KNOW dat shit, muthafucka!  Apparently, dis header gotz nuff a line which
starts on tha straight-up original gangsta posizzle yo, but not wit a gangbangin' field name.
.Sp
By default, parsin of tha header is ghon be stopped. Y'all KNOW dat shit, muthafucka!  If there be mo' header
lines afta tha erroneous line, they is ghon be added ta tha body of tha message.
In case of new(fix_headers) set, tha parsin of tha header is ghon be continued.
Da erroneous line is ghon be added ta tha precedin field.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
