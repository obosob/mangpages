.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_CTX_set_info_callback 3"
.TH SSL_CTX_set_info_callback 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_CTX_set_info_callback, SSL_CTX_get_info_callback, SSL_set_info_callback, SSL_get_info_callback \- handle shiznit callback fo' SSL connections
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& void SSL_CTX_set_info_callback(SSL_CTX *ctx, void (*callback)());
\& void (*SSL_CTX_get_info_callback(const SSL_CTX *ctx))();
\&
\& void SSL_set_info_callback(SSL *ssl, void (*callback)());
\& void (*SSL_get_info_callback(const SSL *ssl))();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISSL_CTX_set_info_callback()\fR sets tha \fBcallback\fR function, dat can be used to
obtain state shiznit fo' \s-1SSL\s0 objects pimped from \fBctx\fR durin connection
setup n' use. Da settin fo' \fBctx\fR is overridden from tha settin for
a specific \s-1SSL\s0 object, if specified.
When \fBcallback\fR is \s-1NULL,\s0 not callback function is used.
.PP
\&\fISSL_set_info_callback()\fR sets tha \fBcallback\fR function, dat can be used to
obtain state shiznit fo' \fBssl\fR durin connection setup n' use.
When \fBcallback\fR is \s-1NULL,\s0 tha callback settin currently valid for
\&\fBctx\fR is used.
.PP
\&\fISSL_CTX_get_info_callback()\fR returns a pointa ta tha currently set shiznit
callback function fo' \fBctx\fR.
.PP
\&\fISSL_get_info_callback()\fR returns a pointa ta tha currently set shiznit
callback function fo' \fBssl\fR.
.SH "NOTES"
.IX Header "NOTES"
When settin up a cold-ass lil connection n' durin use, it is possible ta obtain state
information from tha \s-1SSL/TLS\s0 engine. When set, a shiznit callback function
is called whenever tha state chizzles, a alert appears, or a error occurs.
.PP
Da callback function is called as \fBcallback(\s-1SSL\s0 *ssl, int where, int ret)\fR.
Da \fBwhere\fR argument specifies shiznit bout where (in which context)
the callback function was called. Y'all KNOW dat shit, muthafucka! If \fBret\fR is 0, a error condizzle occurred.
If a alert is handled, \s-1SSL_CB_ALERT\s0 is set n' \fBret\fR specifies tha alert
information.
.PP
\&\fBwhere\fR be a funky-ass bitmask made up of tha followin bits:
.IP "\s-1SSL_CB_LOOP\s0" 4
.IX Item "SSL_CB_LOOP"
Callback has been called ta indicate state chizzle inside a loop.
.IP "\s-1SSL_CB_EXIT\s0" 4
.IX Item "SSL_CB_EXIT"
Callback has been called ta indicate error exit of a handshake function.
(May be soft error wit retry option fo' non-blockin setups.)
.IP "\s-1SSL_CB_READ\s0" 4
.IX Item "SSL_CB_READ"
Callback has been called durin read operation.
.IP "\s-1SSL_CB_WRITE\s0" 4
.IX Item "SSL_CB_WRITE"
Callback has been called durin write operation.
.IP "\s-1SSL_CB_ALERT\s0" 4
.IX Item "SSL_CB_ALERT"
Callback has been called cuz of a alert bein busted or received.
.IP "\s-1SSL_CB_READ_ALERT               \s0(SSL_CB_ALERT|SSL_CB_READ)" 4
.IX Item "SSL_CB_READ_ALERT (SSL_CB_ALERT|SSL_CB_READ)"
.PD 0
.IP "\s-1SSL_CB_WRITE_ALERT              \s0(SSL_CB_ALERT|SSL_CB_WRITE)" 4
.IX Item "SSL_CB_WRITE_ALERT (SSL_CB_ALERT|SSL_CB_WRITE)"
.IP "\s-1SSL_CB_ACCEPT_LOOP              \s0(SSL_ST_ACCEPT|SSL_CB_LOOP)" 4
.IX Item "SSL_CB_ACCEPT_LOOP (SSL_ST_ACCEPT|SSL_CB_LOOP)"
.IP "\s-1SSL_CB_ACCEPT_EXIT              \s0(SSL_ST_ACCEPT|SSL_CB_EXIT)" 4
.IX Item "SSL_CB_ACCEPT_EXIT (SSL_ST_ACCEPT|SSL_CB_EXIT)"
.IP "\s-1SSL_CB_CONNECT_LOOP             \s0(SSL_ST_CONNECT|SSL_CB_LOOP)" 4
.IX Item "SSL_CB_CONNECT_LOOP (SSL_ST_CONNECT|SSL_CB_LOOP)"
.IP "\s-1SSL_CB_CONNECT_EXIT             \s0(SSL_ST_CONNECT|SSL_CB_EXIT)" 4
.IX Item "SSL_CB_CONNECT_EXIT (SSL_ST_CONNECT|SSL_CB_EXIT)"
.IP "\s-1SSL_CB_HANDSHAKE_START\s0" 4
.IX Item "SSL_CB_HANDSHAKE_START"
.PD
Callback has been called cuz a freshly smoked up handshake is started.
.IP "\s-1SSL_CB_HANDSHAKE_DONE          \s0 0x20" 4
.IX Item "SSL_CB_HANDSHAKE_DONE 0x20"
Callback has been called cuz a handshake is finished.
.PP
Da current state shiznit can be obtained rockin the
\&\fISSL_state_string\fR\|(3) crew of functions.
.PP
Da \fBret\fR shiznit can be evaluated rockin the
\&\fISSL_alert_type_string\fR\|(3) crew of functions.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fISSL_set_info_callback()\fR do not provide diagnostic shiznit.
.PP
\&\fISSL_get_info_callback()\fR returns tha current setting.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Da followin example callback function prints state strings, shiznit
about alerts bein handled n' error lyrics ta tha \fBbio_err\fR \s-1BIO.\s0
.PP
.Vb 4
\& void apps_ssl_info_callback(SSL *s, int where, int ret)
\&        {
\&        const char *str;
\&        int w;
\&
\&        w=where& ~SSL_ST_MASK;
\&
\&        if (w & SSL_ST_CONNECT) str="SSL_connect";
\&        else if (w & SSL_ST_ACCEPT) str="SSL_accept";
\&        else str="undefined";
\&
\&        if (where & SSL_CB_LOOP)
\&                {
\&                BIO_printf(bio_err,"%s:%s\en",str,SSL_state_string_long(s));
\&                }
\&        else if (where & SSL_CB_ALERT)
\&                {
\&                str=(where & SSL_CB_READ)?"read":"write";
\&                BIO_printf(bio_err,"SSL3 alert %s:%s:%s\en",
\&                        str,
\&                        SSL_alert_type_string_long(ret),
\&                        SSL_alert_desc_string_long(ret));
\&                }
\&        else if (where & SSL_CB_EXIT)
\&                {
\&                if (ret == 0)
\&                        BIO_printf(bio_err,"%s:failed up in %s\en",
\&                                str,SSL_state_string_long(s));
\&                else if (ret < 0)
\&                        {
\&                        BIO_printf(bio_err,"%s:error up in %s\en",
\&                                str,SSL_state_string_long(s));
\&                        }
\&                }
\&        }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIssl\fR\|(3), \fISSL_state_string\fR\|(3),
\&\fISSL_alert_type_string\fR\|(3)
