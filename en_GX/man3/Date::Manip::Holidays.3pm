.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Manip::Holidays 3"
.TH Date::Manip::Holidays 3 "2014-12-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Manip::Holidays \- raps bout holidays n' events
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This raps bout tha Holidays n' Events sectionz of tha config file,
and how tha fuck they is used.
.PP
Holidays n' events is specific minutes dat is named. Y'all KNOW dat shit, muthafucka! Holidays are
used up in bidnizz mode calculations, events is not. Events may be used
for other calendarin operations.
.SH "HOLIDAYS"
.IX Header "HOLIDAYS"
Da holidizzle section of tha config file is used ta define holidays.  Each
line iz of tha form:
.PP
.Vb 1
\&   STRING = HOLIDAY
.Ve
.PP
\&\s-1HOLIDAY\s0 is tha name of tha holidizzle (or it can be blank up in which case
the dizzle will still be treated as a holiday... fo' example tha day
afta Thanksgivin is often a work holidizzle though it aint named).
.PP
\&\s-1STRING\s0 be a strang which can be parsed ta give a valid date. Well shiiiit, it can be any
of tha followin forms:
.IP "\fBA full date\fR" 4
.IX Item "A full date"
Specific holidays can be set which occur only a single time.
.Sp
.Vb 1
\&   May 5, 2000                     = A one\-time\-only holiday
.Ve
.Sp
Any format parseable by Date::Manip::Date::parse_date can be used.
.IP "\fBA date without a year\fR" 4
.IX Item "A date without a year"
Some holidays occur every last muthafuckin year on tha same day. It make me wanna hollar playa! These can be defined
usin tha simple lines:
.Sp
.Vb 3
\&   Jan 1                           = New Year\*(Aqs Day
\&   Jul 4th                         = Independence Day
\&   fourth Thu up in Nov               = Thanksgiving
.Ve
.Sp
These dates must be freestyled up in a gangbangin' form which can be parsed as a gangbangin' full
date by simply addin tha year ta tha end of tha string. Please refer
to tha Date::Manip::Date documentation ta peep what tha fuck forms will
work. \s-1ISO 8601\s0 dates aint gonna work since tha year comes first.
.Sp
Any format parseable by Date::Manip::Date::parse_date can be used.
.IP "\fBRecurrence\fR" 4
.IX Item "Recurrence"
Da dates can be specified rockin recurrences:
.Sp
.Vb 4
\&   1*0:0:0:0:0:0*EASTER            = Easter
\&   1*11:0:11:0:0:0*DWD             = Veteran\*(Aqs Day
\&   1*11:4:5:0:0:0                  = Thanksgiving
\&   1*11:4:5:0:0:0*FD1              = Dizzle afta Thanksgiving
.Ve
.Sp
In cases where yo ass is horny bout bidnizz type calculations, you'll
wanna define most holidays rockin recurrences, since they can define
when a holidizzle is bigged up in tha financial ghetto. Right back up in yo muthafuckin ass. Y'all KNOW dat shit, muthafucka!  For example,
Christmas might be defined as:
.Sp
.Vb 1
\&   Dec 25               = Chrizzle
.Ve
.Sp
but if it falls on a weekend, there won't be a funky-ass bidnizz holiday
associated wit dat shit. Well shiiiit, it could be defined rockin a recurrence:
.Sp
.Vb 1
\&   1*12:0:24:0:0:0*DWD  = Chrizzle
.Ve
.Sp
so dat if Chrizzle falls on a weekend, a holidizzle is ghon be taken
on tha Fridizzle before or tha Mondizzle afta tha weekend.
.Sp
Yo ass can use tha straight-up specified format of a recurrence:
.Sp
.Vb 1
\&  1*2:0:1:0:0:0***Jan 1 1999*Dec 31 2002 = Feb 2 from 1999\-2002
.Ve
.SH "OTHER HOLIDAY CONSIDERATIONS"
.IX Header "OTHER HOLIDAY CONSIDERATIONS"
.IP "\fBRecurrences which chizzle years\fR" 4
.IX Item "Recurrences which chizzle years"
It be now valid ta git a recurrence defined fo' New Yearz dizzle which
pushes tha holidizzle ta tha previous year.
.Sp
For example, da most thugged-out useful definizzle of New Yearz dizzle is:
.Sp
.Vb 1
\&   1*1:0:1:0:0:0*DWD               = New Year\*(Aqs Day
.Ve
.Sp
which means ta chizzle tha closest hustlin dizzle ta observe the
holiday, even though dis might mean dat tha holidizzle is observed
on tha previous year.
.IP "\fBOrder of definitions is preserved\fR" 4
.IX Item "Order of definitions is preserved"
Da order of tha definitions is preserved. Y'all KNOW dat shit, muthafucka! In other lyrics, when looking
at tha holidays fo' a year, previously defined holidays (in tha order
given up in tha config file) is erectly handled.
.Sp
As a example, if you wanted ta define both Chrizzle n' Boxin days
(Boxin is tha dizzle afta Chrizzle, n' is bigged up in some parts of
the ghetto), n' you wanted ta big-up Chrizzle on a funky-ass bidnizz dizzle on
or afta Dec 25, n' Boxin dizzle as tha followin work day, you could do
it up in one of tha followin ways:
.Sp
.Vb 2
\&   1*12:0:25:0:0:0*NWD  = Chrizzle
\&   1*12:0:26:0:0:0*NWD  = Boxing
.Ve
.Sp
or
.Sp
.Vb 2
\&   1*12:0:25:0:0:0*NWD  = Chrizzle
\&   1*12:0:25:0:0:0*NWD  = Boxing
.Ve
.Sp
Holidays go tha fuck into affect tha minute they is parsed which is why the
second example works (though fo' clarity, tha straight-up original gangsta one is
preferable).  Da first recurrence defined tha straight-up original gangsta bidnizz dizzle on
or afta Dec 25 as Chrizzle.  Da second one then defines the
businizz dizzle afta dat as Boxin day. It make me wanna hollar playa!  Since tha definitions are
stored as a list (\s-1NOT\s0 a hash as they was up in Date::Manip 5.xx), using
the same recurrence twice do not cause a problem.
.IP "\fBMultiple holidays\fR" 4
.IX Item "Multiple holidays"
Havin multiple holidays on a single dizzle be allowed. Y'all KNOW dat shit, muthafucka! As a example,
you may wanna peep New Years dizzle as both tha observed n' actual
holidays, so you might have:
.Sp
.Vb 2
\&   1*1:0:1:0:0:0*DWD               = New Year\*(Aqs Dizzle (observed)
\&   Jan 1                           = New Year\*(Aqs Day
.Ve
.Sp
Most of tha time, both will fall on tha same dizzle yo, but sometimes
they may differ n' shit.  In dis example, it is blingin dat the
observed holidizzle be listed first.  Otherwise, Jan 1 will be
marked as a holidizzle n' then tha observed date will check Jan 1,
but where it aint a funky-ass bidnizz day, it will move ta another day
(due ta tha \s-1DWD\s0 modifier).
.Sp
Likewise, tha two holidays:
.Sp
.Vb 2
\&   3rd Sundizzle up in June              = Father\*(Aqs Day
\&   Jun 17                          = Bunker Hill Day
.Ve
.Sp
sometimes fall on tha same day. It make me wanna hollar playa!  Usin the
Date::Manip::Date::list_holidays method (or tha Date_IsHoliday
function), you can git a list of all names dat tha date gotz nuff.
.SH "EVENTS"
.IX Header "EVENTS"
Da Events section of tha config file is similar ta tha Holidizzle section.
It be used ta name certain minutes or times yo, but there be all dem blingin
differences:
.IP "\fBEvents can be assigned ta any time n' duration\fR" 4
.IX Item "Events can be assigned ta any time n' duration"
All holidays is exactly 1 dizzle long.  They is assigned ta a period
of time from midnight ta midnight.
.Sp
Events can be based at any time of tha day, n' may be of any duration.
.IP "\fBEvents don't affect bidnizz mode calculations\fR" 4
.IX Item "Events don't affect bidnizz mode calculations"
Unlike holidays, events is straight-up ignored when bustin bidnizz
mode calculations.
.PP
Whereas holidays was added wit bidnizz mode math up in mind, events
were added wit calendar n' schedulin applications up in mind.
.PP
Every line up in tha events section iz of tha form:
.PP
.Vb 1
\&   EVENT = NAME
.Ve
.PP
where \s-1NAME\s0 is tha name of tha event, n' \s-1EVENT\s0 defines when it occurs
and its duration. I aint talkin' bout chicken n' gravy biatch.  An \s-1EVENT\s0 can be defined up in tha followin ways:
.PP
.Vb 4
\&   Date
\&   YMD
\&   YM
\&   Recur
\&
\&   Date  ; Date
\&   YMD   ; YMD
\&   YM    ; YM
\&   Date  ; Delta
\&   Recur ; Delta
.Ve
.PP
Date refers ta a gangbangin' full date/time (and be any strang dat can be parsed
by Date::Manip::Date::parse). \s-1YMD\s0 be any strang which can be parsed by
Date::Manip::Date::parse_date. \s-1YM\s0 be any strang which can be parsed by
the parse_date method ta give a thugged-out date up in tha current year. Shiiit, dis aint no joke. Recur be a
partial or straight-up specified recurrence. Delta be any strang dat can be
parsed ta form a thugged-out delta.
.PP
With tha \*(L"Date\*(R" form, or tha \*(L"Recur\*(R" form, tha event starts at the
time (or times) specified by tha date or recurrence, n' last 1 hour
long.  With tha \*(L"\s-1YMD\*(R"\s0 n' \*(L"\s-1YM\*(R"\s0 forms, tha event occurs on tha given
day, n' lasts all day.
.PP
With all of tha two part forms (\*(L"Date;Date\*(R", \*(L"\s-1YM\s0;YM\*(R", etc.), tha event
starts all up in tha straight-up original gangsta date n' goes ta tha second date, or goes an
amount of time specified by tha delta.
.PP
Da \*(L"\s-1YMD\s0;YMD\*(R" n' \*(L"\s-1YM\s0;YM\*(R" forms means dat tha event lasts from the
start of tha straight-up original gangsta date ta tha end of tha second. Y'all KNOW dat shit, muthafucka! In tha Date;Date
form, tha event goes from tha straight-up original gangsta date ta tha second date
inclusive. In other lyrics, both dates is up in tha event. In the
\&\*(L"Date;Delta\*(R" n' \*(L"Recur;Delta\*(R" forms, tha Delta  drops some lyrics ta tha length of
the event fo' realz. Also, up in tha Date;Date form, tha second date may \s-1NOT\s0 be
expressed as a thugged-out delta.
.PP
Currently, havin a event longer than 1 year is \s-1NOT\s0 supported yo, but no
checkin is done fo' all dis bullshit.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
None known.
.SH "BUGS AND QUESTIONS"
.IX Header "BUGS AND QUESTIONS"
Please refer ta tha Date::Manip::Problems documentation for
information on submittin bug reports or thangs ta tha lyricist.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Manip        \- main module documentation
.SH "LICENSE"
.IX Header "LICENSE"
This script is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
