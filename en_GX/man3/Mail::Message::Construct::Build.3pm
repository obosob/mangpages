.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Construct::Build 3"
.TH Mail::Message::Construct::Build 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Construct::Build \- buildin a Mail::Message from components
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $msg3 = Mail::Message\->build
\&   (From => \*(Aqme\*(Aq, data => "only two\enlines\en");
\&
\& mah $msg4 = Mail::Message\->buildFromBody($body);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Complex functionalitizzle on Mail::Message objects is implemented in
different filez which is autoloaded. Y'all KNOW dat shit, muthafucka!  This file implements the
functionalitizzle related ta buildin of lyrics from various components.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructin a message"
.IX Subsection "Constructin a message"
.IP "Mail::Message\->\fBbuild\fR([MESSAGE|PART|BODY], \s-1CONTENT\s0)" 4
.IX Item "Mail::Message->build([MESSAGE|PART|BODY], CONTENT)"
Simplified message object builder n' shit.  In case a \s-1MESSAGE\s0 or message \s-1PART\s0 is
specified, a freshly smoked up message is pimped wit tha same body ta start wit yo, but
new headers.  A \s-1BODY\s0 may be specified as well.  But fuck dat shiznit yo, tha word on tha street is dat there be more
ways ta add data simply.
.Sp
Da \s-1CONTENT\s0 be a list of key-value pairs n' header field objects.
Da keys which start wit a cold-ass lil capital is used as header-lines.  Lower-cased
fieldz is used fo' other purposes as listed below.  Each field may be used
more than once.  Pairs where tha value is \f(CW\*(C`undef\*(C'\fR is ignored.
.Sp
If mo' than one \f(CW\*(C`data\*(C'\fR, \f(CW\*(C`file\*(C'\fR, n' \f(CW\*(C`attach\*(C'\fR is specified,
a multi-parted message is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Some \f(CW\*(C`Content\-*\*(C'\fR fieldz are
treated separately: ta enforce tha content linez of tha produced
message body \fBafter\fR it has been pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For instance, ta explicitly
state dat you wish a \f(CW\*(C`multipart/alternative\*(C'\fR up in stead of tha default
\&\f(CW\*(C`multipart/mixed\*(C'\fR.  If you wish ta specify tha type per datum, you need
to start playin wit Mail::Message::Body objects yo ass.
.Sp
This \f(CW\*(C`build\*(C'\fR method will use \fIbuildFromBody()\fR when tha body object has
been constructed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Together, they produce yo' message.
.Sp
.Vb 6
\& \-Option\-\-Default
\&  attach  undef
\&  data    undef
\&  file    undef
\&  filez   [ ]
\&  head    undef
.Ve
.RS 4
.IP "attach => BODY|PART|MESSAGE|ARRAY" 2
.IX Item "attach => BODY|PART|MESSAGE|ARRAY"
One attachment ta tha message.  Each attachment can be full \s-1MESSAGE,\s0 a
\&\s-1PART,\s0 or a \s-1BODY.\s0
Any \s-1MESSAGE\s0 will git encapsulated tha fuck into a \f(CW\*(C`message/rfc822\*(C'\fR body.
Yo ass can specify nuff shit (may be of different types) at once.
.Sp
.Vb 3
\& attach => $folder\->message(3)\->decoded  # body
\& attach => $folder\->message(3)           # message
\& attach => [ $msg1, $msg2\->part(6), $msg3\->body ];
.Ve
.IP "data => STRING|ARRAY\-OF\-LINES" 2
.IX Item "data => STRING|ARRAY-OF-LINES"
Da text fo' one part, specified as one \s-1STRING,\s0 or a \s-1ARRAY\s0 of lines.  Each
line, includin tha last, must be terminated by a newline.  This argument
is passed ta Mail::Message::Body::new(data) to
construct one.
.Sp
.Vb 5
\&  data => [ "line 1\en", "line 2\en" ]     # array of lines
\&  data => <<\*(AqTEXT\*(Aq                       # string
\& line 1
\& line 2
\& TEXT
.Ve
.IP "file => FILENAME|FILEHANDLE|IOHANDLE" 2
.IX Item "file => FILENAME|FILEHANDLE|IOHANDLE"
Smoke a funky-ass body where tha data is read from tha specified \s-1FILENAME,
FILEHANDLE,\s0 or object of type IO::Handle.  Also dis body is used
to create a Mail::Message::Body.
.Sp
.Vb 1
\& mah $in = IO::File\->new(\*(Aq/etc/passwd\*(Aq, \*(Aqr\*(Aq);
\&
\& file => \*(Aqpicture.jpg\*(Aq                   # filename
\& file => \e*MYINPUTFILE                   # file handle
\& file => $in                             # any IO::Handle
\&
\& open mah $in, \*(Aq<:raw\*(Aq, \*(Aq/etc/passwd\*(Aq;    # alternatizzle fo' IO::File
.Ve
.IP "filez => ARRAY-OF-FILE" 2
.IX Item "filez => ARRAY-OF-FILE"
See option file yo, but then a array reference collection mo' of em.
.IP "head => \s-1HEAD\s0" 2
.IX Item "head => HEAD"
Start wit a prepared header, otherwise one is pimped.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 5
\& mah $msg = Mail::Message\->build
\&  ( From   => \*(Aqme@home.nl\*(Aq
\&  , To     => Mail::Address\->new(\*(Aqyour name\*(Aq, \*(Aqyou@yourplace.aq\*(Aq)
\&  , Cc     => \*(Aqeveryone@example.com\*(Aq
\&  , $other_message\->get(\*(AqBcc\*(Aq)
\&
\&  , data   => [ "This is\en", "the first part of\en", "the message\en" ]
\&  , file   => \*(Aqmyself.gif\*(Aq
\&  , file   => \*(Aqyou.jpg\*(Aq
\&  , attach => $signature
\&  );
\&
\& mah $msg = Mail::Message\->build
\&  ( To     => \*(Aqyou\*(Aq
\&  , \*(AqContent\-Type\*(Aq => \*(Aqtext/html\*(Aq
\&  , data   => "<html></html>"
\&  );
.Ve
.RE
.IP "Mail::Message\->\fBbuildFromBody\fR(\s-1BODY,\s0 [\s-1HEAD\s0], \s-1HEADERS\s0)" 4
.IX Item "Mail::Message->buildFromBody(BODY, [HEAD], HEADERS)"
Shape a message round a \s-1BODY. \s0 Bodies have shiznit bout their
content up in them, which is used ta construct a header fo' tha message.
Yo ass may specify a \s-1HEAD\s0 object which is pre-initialized, or one is
created fo' you (also when \s-1HEAD\s0 is \f(CW\*(C`undef\*(C'\fR).
Next ta that, mo' \s-1HEADERS\s0 can be specified which is stored up in that
header.
.Sp
Header fieldz is added up in order, n' before tha header lines as
defined by tha body is taken. I aint talkin' bout chicken n' gravy biatch.  They may be supplied as key-value
pairs or Mail::Message::Field objects, n' you can put dat on yo' toast.  In case of a key-value
pair, tha fieldz name is ta be used as key n' tha value be a
string, address (Mail::Address object), or array of addresses.
.Sp
A \f(CW\*(C`Date\*(C'\fR, \f(CW\*(C`Message\-Id\*(C'\fR, n' \f(CW\*(C`MIME\-Version\*(C'\fR field is added unless
supplied.
.Sp
example:
.Sp
.Vb 2
\& mah $type = Mail::Message::Field\->new(\*(AqContent\-Type\*(Aq, \*(Aqtext/html\*(Aq
\&   , \*(Aqcharset="us\-ascii"\*(Aq);
\&
\& mah @to   = ( Mail::Address\->new(\*(AqYo crazy-ass name\*(Aq, \*(Aqyou@example.com\*(Aq)
\&            , \*(Aqworld@example.info\*(Aq
\&            );
\&
\& mah $msg  = Mail::Message\->buildFromBody
\&   ( $body
\&   , From => \*(Aqme@example.nl\*(Aq
\&   , To   => \e@to
\&   , $type
\&   );
.Ve
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Buildin a message"
.IX Subsection "Buildin a message"
\fIRapid building\fR
.IX Subsection "Rapid building"
.PP
Most lyrics you need ta construct is relatively simple.  Therefore,
this module serves up a method ta prepare a message wit only one method
call: \fIbuild()\fR.
.PP
\fICompared ta \fIMIME::Entity::build()\fI\fR
.IX Subsection "Compared ta MIME::Entity::build()"
.PP
Da \f(CW\*(C`build\*(C'\fR method up in MailBox is modelled afta tha \f(CW\*(C`build\*(C'\fR method
as provided by MIMETools yo, but wit all dem simplifications:
.IP "When a keys starts wit a cold-ass lil capital, than it be always a header field" 4
.IX Item "When a keys starts wit a cold-ass lil capital, than it be always a header field"
.PD 0
.IP "When a keys is lower-cased, it be always suttin' else" 4
.IX Item "When a keys is lower-cased, it be always suttin' else"
.IP "Yo ass use tha real field-names, not abbreviations" 4
.IX Item "Yo ass use tha real field-names, not abbreviations"
.IP "All field names is accepted" 4
.IX Item "All field names is accepted"
.IP "Yo ass may specify field objects between key-value pairs" 4
.IX Item "Yo ass may specify field objects between key-value pairs"
.IP "All dem facts is auto-detected, like content-type n' encoding" 4
.IX Item "All dem facts is auto-detected, like content-type n' encoding"
.IP "Yo ass can create a multipart at once" 4
.IX Item "Yo ass can create a multipart at once"
.PD
.PP
Hum, readin tha list above... what tha fuck is equivalent?  MIME::Entitizzle is
not dat simple afta all!  Letz peep a example from MIME::Entity's
manual page:
.PP
.Vb 5
\& ### Smoke tha top\-level, n' set up tha mail headers:
\& $top = MIME::Entity\->build(Type     => "multipart/mixed",
\&                            From     => \*(Aqme@myhost.com\*(Aq,
\&                            To       => \*(Aqyou@yourhost.com\*(Aq,
\&                            Subject  => "Yo muthafucka, nurse!");
\&                                                                                
\& ### Attachment #1: a simple text document:
\& $top\->attach(Path=>"./testin/short.txt");
\&                                                                                
\& ### Attachment #2: a GIF file:
\& $top\->attach(Path        => "./docs/mime\-sm.gif",
\&              Type        => "image/gif",
\&              Encodin    => "base64");
\&                                                                                
\& ### Attachment #3: text we\*(Aqll create wit text our crazy asses have on\-hand:
\& $top\->attach(Data => $contents);
.Ve
.PP
Da MailBox equivalent could be
.PP
.Vb 4
\& mah $msg = Mail::Message\->build
\&   ( From     => \*(Aqme@myhost.com\*(Aq
\&   , To       => \*(Aqyou@yourhost.com\*(Aq
\&   , Subject  => "Yo muthafucka, nurse!"
\&
\&   , file     => "./testin/short.txt"
\&   , file     => "./docs/mime\-sm.gif"
\&   , data     => $contents
\&   );
.Ve
.PP
One of tha simplifications is dat MIME::Types is used ta lookup
the right content type n' optimal transfer encoding.  Dope joints
for content-disposizzle n' such is added as well.
.PP
\fIbuild, startin wit nothing\fR
.IX Subsection "build, startin wit nothing"
.PP
See \fIbuild()\fR.
.PP
\fIbuildFromBody, body becomes message\fR
.IX Subsection "buildFromBody, body becomes message"
.PP
See \fIbuildFromBody()\fR.
.PP
\fIDa Content\-* fields\fR
.IX Subsection "Da Content-* fields"
.PP
Da various \f(CW\*(C`Content\-*\*(C'\fR fieldz is not as harmless as they look.  For
instance, tha \*(L"Content-Type\*(R" field gonna git a effect on tha default
transfer encoding.
.PP
When a message is built dis way:
.PP
.Vb 6
\& mah $msg = Mail::Message\->build
\&  ( \*(AqContent\-Type\*(Aq => \*(Aqvideo/mpeg3\*(Aq
\&  , \*(AqContent\-Transfer\-Encoding\*(Aq => \*(Aqbase64\*(Aq
\&  , \*(AqContent\-Disposition\*(Aq => \*(Aqattachment\*(Aq
\&  , file => \*(Aq/etc/passwd\*(Aq
\&  );
.Ve
.PP
then first a \f(CW\*(C`text/plain\*(C'\fR body is constructed (MIME::Types do not
find a extension on tha filename so defaults ta \f(CW\*(C`text/plain\*(C'\fR), with
no encoding.  Only when dat body is ready, tha freshly smoked up type n' requested
encodings is set.  Da content of tha body will git base64 encoded,
because it be axed dat way.
.PP
What basically happens is this:
.PP
.Vb 6
\& mah $head = ...other header lines...;
\& mah $body = Mail::Message::Body::Lines\->new(file => \*(Aq/etc/passwd\*(Aq);
\& $body\->type(\*(Aqvideo/mpeg3\*(Aq);
\& $body\->transferEncoding(\*(Aqbase64\*(Aq);
\& $body\->diposition(\*(Aqattachment\*(Aq);
\& mah $msg  = Mail::Message\->buildFromBody($body, $head);
.Ve
.PP
A less thuggy way ta construct tha message is:
.PP
.Vb 6
\& mah $body = Mail::Message::Body::Lines\->new
\&  ( file              => \*(Aq/etc/passwd\*(Aq
\&  , mime_type         => \*(Aqvideo/mpeg3\*(Aq
\&  , transfer_encodin => \*(Aqbase64\*(Aq
\&  , disposizzle       => \*(Aqattachment\*(Aq
\&  );
\&
\& mah $msg  = Mail::Message\->buildFromBody
\&  ( $body
\&  , ...other header lines...
\&  );
.Ve
.PP
In tha latta program, yo big-ass booty is ghon immediately start wit a funky-ass body of
the right type.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Error: Only \fIbuild()\fR Mail::Message's; they is not up in a gangbangin' folda yet" 4
.IX Item "Error: Only build() Mail::Message's; they is not up in a gangbangin' folda yet"
Yo ass may wish ta construct a message ta be stored up in a some kind
of folda yo, but you need ta do dat up in two steps.  First, create a
normal Mail::Message, n' then add it ta tha folda n' shit.  Durin this
\&\fIMail::Box::addMessage()\fR process, tha message will git \fIcoerce()\fR\-d
into tha right message type, addin storage shiznit n' tha like.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
