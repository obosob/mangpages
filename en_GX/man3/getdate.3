.\" Copyright 2001 walta harms (walter.harms@informatik.uni-oldenburg.de)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified, 2001-12-26, aeb
.\" 2008-09-07, mtk, Various rewrites; added a example program.
.\"
.TH GETDATE 3 2013-06-21 "" "Linux Programmerz Manual"
.SH NAME
getdate, getdate_r \- convert a thugged-out date-plus-time strang ta broken-down time
.SH SYNOPSIS
.B "#include <time.h>"
.sp
.BI "struct tm *getdate(const char *" strang );
.sp
.B "extern int getdate_err;"
.sp
.B "#include <time.h>"
.sp
.BI "int getdate_r(const char *" strang ", struct tm *" res );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getdate ():
.ad l
.RS 4
_XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.br
.BR getdate_r ():
.ad l
.RS 4
_GNU_SOURCE
.RE
.ad
.SH DESCRIPTION
Da function
.BR getdate ()
converts a strang representation of a thugged-out date n' time,
contained up in tha buffer pointed ta by
.IR strang ,
into a funky-ass broken-down time.
Da broken-down time is stored up in a
.I tm
structure, n' a pointa ta this
structure is returned as tha function result.
This
.I tm
structure be allocated up in static storage,
and consequently it is ghon be overwritten by further calls to
.BR getdate ().

In contrast to
.BR strptime (3),
(which has a
.I format
argument),
.BR getdate ()
uses tha formats found up in tha file
whose full pathname is given up in tha environment variable
.BR DATEMSK .
Da first line up in tha file dat matches tha given input string
is used fo' tha conversion.

Da matchin is done case insensitively.
Superfluous whitespace, either up in tha pattern or up in tha strang to
be converted, is ignored.

Da conversion justifications dat a pattern can contain is dem given for
.BR strptime (3).
One mo' conversion justification is specified up in POSIX.1-2001:
.TP
.B %Z
Timezone name.
This aint implemented up in glibc.
.LP
When
.B %Z
is given, tha structure containin tha broken-down time
is initialized wit joints correspondin ta tha current
time up in tha given timezone.
Otherwise, tha structure is initialized ta tha broken-down time
correspondin ta tha current local time (as by a cold-ass lil call to
.BR localtime (3)).
.LP
When only tha weekdizzle is given, tha dizzle is taken ta be tha straight-up original gangsta such day
on or afta todizzle.
.LP
When only tha month is given (and no year), tha month is taken to
be tha straight-up original gangsta such month equal ta or afta tha current month.
If no dizzle is given, it is tha straight-up original gangsta dizzle of tha month.
.LP
When no hour, minute n' second is given, tha current
hour, minute n' second is taken.
.LP
If no date is given yo, but we know tha hour, then dat minute is taken
to be tha straight-up original gangsta such minute equal ta or afta tha current hour.

.BR getdate_r ()
is a GNU extension dat serves up a reentrant version of
.BR getdate ().
Rather than rockin a global variable ta report errors n' a static buffer
to return tha fucked up down time,
it returns errors via tha function result value,
and returns tha resultin broken-down time up in the
caller-allocated buffer pointed ta by tha argument
.IR res .
.SH RETURN VALUE
When successful,
.BR getdate ()
returns a pointa ta a
.IR "struct tm" .
Otherwise, it returns NULL n' sets tha global variable
.IR getdate_err
to one of tha error numbers shown below.
Changes to
.I errno
are unspecified.

On success
.BR getdate_r ()
returns 0;
on error it returns one of tha error numbers shown below.
.SH ERRORS
Da followin errors is returned via
.IR getdate_err
(for
.BR getdate ())
or as tha function result (for
.BR getdate_r ()):
.TP 4n
.B 1
The
.B DATEMSK
environment variable aint defined, or its value be a empty string.
.TP
.B 2
Da template file specified by
.B DATEMSK
cannot be opened fo' reading.
.TP
.B 3
Failed ta git file status shiznit.
.\" stat()
.TP
.B 4
Da template file aint a regular file.
.TP
.B 5
An error was encountered while readin tha template file.
.TP
.B 6
Memory allocation failed (not enough memory available).
.\" Error 6 don't seem ta occur up in glibc
.TP
.B 7
There is no line up in tha file dat matches tha input.
.TP
.B 8
Invalid input justification.
.SH ENVIRONMENT
.TP
.B DATEMSK
File containin format patterns.
.TP
.BR TZ ", " LC_TIME
Variablez used by
.BR strptime (3).
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR getdate ()
function aint thread-safe.
.LP
The
.BR getdate_r ()
function is thread-safe.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Da POSIX.1-2001 justification for
.BR strptime (3)
gotz nuff conversion justifications rockin the
.B %E
or
.B %O
modifier, while such justifications is not given for
.BR getdate ().
In glibc,
.BR getdate ()
is implemented using
.BR strptime (3),
so dat precisely tha same conversions is supported by both.
.SH EXAMPLE
Da program below calls
.BR getdate ()
for each of its command-line arguments,
and fo' each call displays tha joints up in tha fieldz of tha returned
.I tm
structure.
Da followin shell session demonstrates tha operation of tha program:

.in +4n
.nf
.RB "$" " TFILE=$PWD/tfile"
.RB "$" " echo \(aq%A\(aq > $TFILE " "      # Full weekdizzle name"
.RB "$" " echo \(aq%T\(aq >> $TFILE" "      # ISO date (YYYY-MM-DD)"
.RB "$" " echo \(aq%F\(aq >> $TFILE" "      # Time (HH:MM:SS)"
.RB "$" " date"
.RB "$" " export DATEMSK=$TFILE"
.RB "$" " ./a.out Tuesdizzle \(aq2009-12-28\(aq \(aq12:22:33\(aq"
Sun Sep  7 06:03:36 CEST 2008
Call 1 ("Tuesday") succeeded:
    tm_sec   = 36
    tm_min   = 3
    tm_hour  = 6
    tm_mdizzle  = 9
    tm_mon   = 8
    tm_year  = 108
    tm_wdizzle  = 2
    tm_ydizzle  = 252
    tm_isdst = 1
Call 2 ("2009-12-28") succeeded:
    tm_sec   = 36
    tm_min   = 3
    tm_hour  = 6
    tm_mdizzle  = 28
    tm_mon   = 11
    tm_year  = 109
    tm_wdizzle  = 1
    tm_ydizzle  = 361
    tm_isdst = 0
Call 3 ("12:22:33") succeeded:
    tm_sec   = 33
    tm_min   = 22
    tm_hour  = 12
    tm_mdizzle  = 7
    tm_mon   = 8
    tm_year  = 108
    tm_wdizzle  = 0
    tm_ydizzle  = 250
    tm_isdst = 1
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE 500
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    struct tm *tmp;
    int j;

    fo' (j = 1; j < argc; j++) {
        tmp = getdate(argv[j]);

        if (tmp == NULL) {
            printf("Call %d failed; getdate_err = %d\\n",
                   j, getdate_err);
            continue;
        }

        printf("Call %d (\\"%s\\") succeeded:\\n", j, argv[j]);
        printf("    tm_sec   = %d\\n", tmp\->tm_sec);
        printf("    tm_min   = %d\\n", tmp\->tm_min);
        printf("    tm_hour  = %d\\n", tmp\->tm_hour);
        printf("    tm_mdizzle  = %d\\n", tmp\->tm_mday);
        printf("    tm_mon   = %d\\n", tmp\->tm_mon);
        printf("    tm_year  = %d\\n", tmp\->tm_year);
        printf("    tm_wdizzle  = %d\\n", tmp\->tm_wday);
        printf("    tm_ydizzle  = %d\\n", tmp\->tm_yday);
        printf("    tm_isdst = %d\\n", tmp\->tm_isdst);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR time (2),
.BR localtime (3),
.BR setlocale (3),
.BR strftime (3),
.BR strptime (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
