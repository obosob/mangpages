.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "vmsish 3pm"
.TH vmsish 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
vmsish \- Perl pragma ta control VMS\-specific language features
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use vmsish;
\&
\&    use vmsish \*(Aqstatus\*(Aq;        # or \*(Aq$?\*(Aq
\&    use vmsish \*(Aqexit\*(Aq;
\&    use vmsish \*(Aqtime\*(Aq;
\&
\&    use vmsish \*(Aqhushed\*(Aq;
\&    no vmsish \*(Aqhushed\*(Aq;
\&    vmsish::hushed($hush);
\&
\&    use vmsish;
\&    no vmsish \*(Aqtime\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If no import list is supplied, all possible VMS-specific features are
assumed. Y'all KNOW dat shit, muthafucka!  Currently, there be four VMS-specific features available:
\&'status' (a.k.a '$?'), 'exit', 'time' n' 'hushed'.
.PP
If you not hustlin \s-1VMS,\s0 dis module do nothing.
.ie n .IP """vmsish status""" 6
.el .IP "\f(CWvmsish status\fR" 6
.IX Item "vmsish status"
This make \f(CW$?\fR n' \f(CW\*(C`system\*(C'\fR return tha natizzle \s-1VMS\s0 exit status
instead of emulatin tha \s-1POSIX\s0 exit status.
.ie n .IP """vmsish exit""" 6
.el .IP "\f(CWvmsish exit\fR" 6
.IX Item "vmsish exit"
This make \f(CW\*(C`exit 1\*(C'\fR produce a successful exit (with status \s-1SS$_NORMAL\s0),
instead of emulatin \s-1UNIX\s0 \fIexit()\fR, which considaz \f(CW\*(C`exit 1\*(C'\fR ta indicate
an error. Shiiit, dis aint no joke.  As wit tha \s-1CRTL\s0z \fIexit()\fR function, \f(CW\*(C`exit 0\*(C'\fR be also mapped
to a exit statuz of \s-1SS$_NORMAL,\s0 n' any other argument ta \fIexit()\fR is
used directly as Perlz exit status.
.ie n .IP """vmsish time""" 6
.el .IP "\f(CWvmsish time\fR" 6
.IX Item "vmsish time"
This make all times relatizzle ta tha local time unit, instead of the
default of Universal Time (a.k.a Greenwich Mean Time, or \s-1GMT\s0).
.ie n .IP """vmsish hushed""" 6
.el .IP "\f(CWvmsish hushed\fR" 6
.IX Item "vmsish hushed"
This suppresses printin of \s-1VMS\s0 status lyrics ta \s-1SYS$OUTPUT\s0 and
\&\s-1SYS$ERROR\s0 if Perl terminates wit a error status, n' allows
programs dat is expectin \*(L"unix-style\*(R" Perl ta avoid havin ta parse
\&\s-1VMS\s0 error lyrics.  It do not suppress any lyrics from Perl
itself, just tha lyrics generated by \s-1DCL\s0 afta Perl exits, n' you can put dat on yo' toast.  Da \s-1DCL\s0
symbol \f(CW$STATUS\fR will still have tha termination status yo, but wit a
high-order bit set:
.Sp
\&\s-1EXAMPLE:
    $\s0 perl \-e\*(L"exit 44;\*(R"                             Non-hushed error exit
    \f(CW%SYSTEM\fR\-F\-ABORT, abort                          \s-1DCL\s0 message
    $ show sym \f(CW$STATUS\fR
      \f(CW$STATUS\fR == \*(L"%X0000002C\*(R"
.Sp
.Vb 3
\&    $ perl \-e"use vmsish qw(hushed); exit 44;"      Hushed error exit
\&    $ show sym $STATUS
\&      $STATUS == "%X1000002C"
.Ve
.Sp
Da 'hushed' flag has a global scope durin compilation: tha \fIexit()\fR or
\&\fIdie()\fR commandz dat is compiled afta 'vmsish hushed' is ghon be hushed
when they is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Bustin a \*(L"no vmsish 'hushed'\*(R" turns off the
hushed flag.
.Sp
Da statuz of tha hushed flag also affects output of \s-1VMS\s0 error
lyrics from compilation errors.   Again, you still git tha Perl
error message (and tha code up in \f(CW$STATUS\fR)
.Sp
\&\s-1EXAMPLE:
   \s0 use vmsish 'hushed';    # turn on hushed flag
    use Carp;          # Carp compiled hushed
    exit 44;           # is ghon be hushed
    croak('I die');    # is ghon be hushed
    no vmsish 'hushed';     # turn off hushed flag
    exit 44;           # aint gonna be hushed
    croak('I die2'):   # \s-1WILL\s0 be hushed, croak was compiled hushed
.Sp
Yo ass can also control tha 'hushed' flag at run-time, rockin tha built-in
routine \fIvmsish::hushed()\fR.  Without argument, it returns tha hushed status.
Since vmsish::hushed is built-in, you do not need ta \*(L"use vmsish\*(R" ta call
it.
.Sp
\&\s-1EXAMPLE:
   \s0 if ($quiet_exit) {
        \fIvmsish::hushed\fR\|(1);
    } 
    print \*(L"Sssshhhh...I be hushed...\en\*(R" if \fIvmsish::hushed()\fR;
    exit 44;
.Sp
Note dat a \fIexit()\fR or \fIdie()\fR dat is compiled 'hushed' cuz of \*(L"use
vmsish\*(R" aint un-hushed by callin \fIvmsish::hushed\fR\|(0) at runtime.
.Sp
Da lyrics from error exits from inside tha Perl core is generally
more serious, n' is not suppressed.
.PP
See \*(L"Perl Modules\*(R" up in perlmod.
