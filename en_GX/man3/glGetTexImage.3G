'\" t
.\"     Title: glGetTexImage
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLGETTEXIMAGE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glGetTexImage \- return a texture image
.SH "C SPECIFICATION"
.HP \w'void\ glGetTexImage('u
.BI "void glGetTexImage(GLenum\ " "target" ", GLint\ " "level" ", GLenum\ " "format" ", GLenum\ " "type" ", GLvoid\ *\ " "img" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies which texture is ta be obtained\&.
\fBGL_TEXTURE_1D\fR,
\fBGL_TEXTURE_2D\fR,
\fBGL_TEXTURE_3D\fR,
\fBGL_TEXTURE_1D_ARRAY\fR,
\fBGL_TEXTURE_2D_ARRAY\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR, and
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR
are accepted\&.
.RE
.PP
\fIlevel\fR
.RS 4
Specifies tha level\-of\-detail number of tha desired image\&. Level 0 is tha base image level\&. Level
n
is the
nth mipmap reduction image\&.
.RE
.PP
\fIformat\fR
.RS 4
Specifies a pixel format fo' tha returned data\&. Da supported formats are
\fBGL_STENCIL_INDEX\fR,
\fBGL_DEPTH_COMPONENT\fR,
\fBGL_DEPTH_STENCIL\fR,
\fBGL_RED\fR,
\fBGL_GREEN\fR,
\fBGL_BLUE\fR,
\fBGL_RG\fR,
\fBGL_RGB\fR,
\fBGL_RGBA\fR,
\fBGL_BGR\fR,
\fBGL_BGRA\fR,
\fBGL_RED_INTEGER\fR,
\fBGL_GREEN_INTEGER\fR,
\fBGL_BLUE_INTEGER\fR,
\fBGL_RG_INTEGER\fR,
\fBGL_RGB_INTEGER\fR,
\fBGL_RGBA_INTEGER\fR,
\fBGL_BGR_INTEGER\fR,
\fBGL_BGRA_INTEGER\fR\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies a pixel type fo' tha returned data\&. Da supported types are
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_INT\fR,
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR,
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR,
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR,
\fBGL_UNSIGNED_INT_24_8\fR,
\fBGL_UNSIGNED_INT_10F_11F_11F_REV\fR,
\fBGL_UNSIGNED_INT_5_9_9_9_REV\fR, and
\fBGL_FLOAT_32_UNSIGNED_INT_24_8_REV\fR\&.
.RE
.PP
\fIimg\fR
.RS 4
Returns tha texture image\&. Right back up in yo muthafuckin ass. Should be a pointa ta a array of tha type specified by
\fItype\fR\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglGetTexImage\fR
returns a texture image into
\fIimg\fR\&.
\fItarget\fR
specifies whether tha desired texture image is one specified by
\fBglTexImage1D\fR()
(\fBGL_TEXTURE_1D\fR),
\fBglTexImage2D\fR()
(\fBGL_TEXTURE_1D_ARRAY\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_TEXTURE_2D\fR
or any of
\fBGL_TEXTURE_CUBE_MAP_*\fR), or
\fBglTexImage3D\fR()
(\fBGL_TEXTURE_2D_ARRAY\fR,
\fBGL_TEXTURE_3D\fR)\&.
\fIlevel\fR
specifies tha level\-of\-detail number of tha desired image\&.
\fIformat\fR
and
\fItype\fR
specify tha format n' type of tha desired image array\&. Right back up in yo muthafuckin ass. See tha reference page for
\fBglTexImage1D\fR()
for a thugged-out description of tha aaight joints fo' the
\fIformat\fR
and
\fItype\fR
parameters, respectively\&.
.PP
If a non\-zero named buffer object is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a texture image is requested,
\fIimg\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&.
.PP
To KNOW tha operation of
\fBglGetTexImage\fR, consider tha selected internal four\-component texture image ta be a RGBA color buffer tha size of tha image\&. Da semantics of
\fBglGetTexImage\fR
are then identical ta dem of
\fBglReadPixels\fR(), wit tha exception dat no pixel transfer operations is performed, when called wit tha same
\fIformat\fR
and
\fItype\fR, with
\fIx\fR
and
\fIy\fR
set ta 0,
\fIwidth\fR
set ta tha width of tha texture image and
\fIheight\fR
set ta 1 fo' 1D images, or ta tha height of tha texture image fo' 2D images\&.
.PP
If tha selected texture image do not contain four components, tha followin mappings is applied\&. Right back up in yo muthafuckin ass. Single\-component textures is treated as RGBA buffers wit red set ta tha single\-component value, chronic set ta 0, blue set ta 0, n' alpha set ta 1\&. Two\-component textures is treated as RGBA buffers wit red set ta tha value of component zero, alpha set ta tha value of component one, n' chronic n' blue set ta 0\&. Finally, three\-component textures is treated as RGBA buffers wit red set ta component zero, chronic set ta component one, blue set ta component two, n' alpha set ta 1\&.
.PP
To determine tha required size of
\fIimg\fR, use
\fBglGetTexLevelParameter\fR()
to determine tha dimensionz of tha internal texture image, then scale tha required number of pixels by tha storage required fo' each pixel, based on
\fIformat\fR
and
\fItype\fR\&. Be shizzle ta take tha pixel storage parametas tha fuck into account, especially
\fBGL_PACK_ALIGNMENT\fR\&.
.SH "NOTES"
.PP
If a error is generated, no chizzle is made ta tha contents of
\fIimg\fR\&.
.PP
\fBglGetTexImage\fR
returns tha texture image fo' tha actizzle texture unit\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR,
\fIformat\fR, or
\fItype\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIlevel\fR
is less than 0\&.
.PP
\fBGL_INVALID_VALUE\fR
may be generated if
\fIlevel\fR
is pimped outa than
log 2 ‚Å° max, where
max
is tha returned value of
\fBGL_MAX_TEXTURE_SIZE\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is returned if
\fItype\fR
is one of
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR, or
\fBGL_UNSIGNED_INT_10F_11F_11F_REV\fR
and
\fIformat\fR
is not
\fBGL_RGB\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is returned if
\fItype\fR
is one of
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR,
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR, or
\fBGL_UNSIGNED_INT_5_9_9_9_REV\fR
and
\fIformat\fR
is neither
\fBGL_RGBA\fR
or
\fBGL_BGRA\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target n' tha data would be packed ta tha buffer object such dat tha memory writes required would exceed tha data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target and
\fIimg\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a thugged-out datum indicated by
\fItype\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetTexLevelParameter\fR()
with argument
\fBGL_TEXTURE_WIDTH\fR
.PP
\fBglGetTexLevelParameter\fR()
with argument
\fBGL_TEXTURE_HEIGHT\fR
.PP
\fBglGetTexLevelParameter\fR()
with argument
\fBGL_TEXTURE_INTERNAL_FORMAT\fR
.PP
\fBglGet\fR()
with arguments
\fBGL_PACK_ALIGNMENT\fR
and others
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_PACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglActiveTexture\fR(),
\fBglReadPixels\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR(),
\fBglTexParameter\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2010 Khronos Group\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
