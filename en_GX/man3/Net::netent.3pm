.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::netent 3pm"
.TH Net::netent 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::netent \- by\-name intercourse ta Perlz built\-in getnet*() functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Net::netent qw(:FIELDS);
\& getnetbyname("loopback")               or take a thugged-out dirtnap "bad net";
\& printf "%s is %08X\en", $n_name, $n_net;
\&
\& use Net::netent;
\&
\& $n = getnetbyname("loopback")          or take a thugged-out dirtnap "bad net";
\& { # there\*(Aqs gotta be a funky-ass betta way, eh?
\&     @bytes = unpack("C4", pack("N", $n\->net));
\&     shift @bytes while @bytes && $bytes[0] == 0;
\& }
\& printf "%s is %08X [%d.%d.%d.%d]\en", $n\->name, $n\->net, @bytes;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modulez default exports override tha core \fIgetnetbyname()\fR and
\&\fIgetnetbyaddr()\fR functions, replacin dem wit versions dat return
\&\*(L"Net::netent\*(R" objects, n' you can put dat on yo' toast.  This object has methodz dat return tha similarly
named structure field name from tha Cz netent structure from \fInetdb.h\fR;
namely name, aliases, addrtype, n' net. Put yo muthafuckin choppers up if ya feel this muthafucka!  Da aliases 
method returns a array reference, tha rest scalars.
.PP
Yo ass may also import all tha structure fieldz directly tha fuck into yo' namespace
as regular variablez rockin tha :FIELDS import tag.  (Note dat dis still
overrides yo' core functions.)  Access these fieldz as variablez named
with a precedin \f(CW\*(C`n_\*(C'\fR.  Thus, \f(CW\*(C`$net_obj\->name()\*(C'\fR correspondz to
\&\f(CW$n_name\fR if you import tha fields.  Array references is available as
regular array variables, so fo' example \f(CW\*(C`@{ $net_obj\->aliases()
}\*(C'\fR would be simply \f(CW@n_aliases\fR.
.PP
Da \fIgetnet()\fR function be a simple front-end dat forwardz a numeric
argument ta \fIgetnetbyaddr()\fR, n' tha rest
to \fIgetnetbyname()\fR.
.PP
To access dis functionalitizzle without tha core overrides,
pass tha \f(CW\*(C`use\*(C'\fR a empty import list, n' then access
function functions wit they full qualified names.
On tha other hand, tha built-ins is still available
via tha \f(CW\*(C`CORE::\*(C'\fR pseudo-package.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Da \fIgetnet()\fR functions do dis up in tha Perl core:
.PP
.Vb 1
\&    sv_setiv(sv, (I32)nent\->n_net);
.Ve
.PP
Da \fIgethost()\fR functions do dis up in tha Perl core:
.PP
.Vb 1
\&    sv_setpvn(sv, hent\->h_addr, len);
.Ve
.PP
That means dat tha address comes back up in binary fo' the
host functions, n' as a regular perl integer fo' tha net ones.
This seems a funky-ass bug yo, but herez how tha fuck ta deal wit it:
.PP
.Vb 3
\& use strict;
\& use Socket;
\& use Net::netent;
\&
\& @ARGV = (\*(Aqloopback\*(Aq) unless @ARGV;
\&
\& my($n, $net);
\&
\& fo' $net ( @ARGV ) {
\&
\&     unless ($n = getnetbyname($net)) {
\&        warn "$0: no such net: $net\en";
\&        next;
\&     }
\&
\&     printf "\en%s is %s%s\en", 
\&            $net, 
\&            lc($n\->name) eq lc($net) , biatch? "" : "*really* ",
\&            $n\->name;
\&
\&     print "\etaliases is ", join(", ", @{$n\->aliases}), "\en"
\&                if @{$n\->aliases};     
\&
\&     # dis is stupid; first, why is dis not up in binary?
\&     # second, why be i goin all up in these convolutions
\&     # ta make it looks right
\&     {
\&        mah @a = unpack("C4", pack("N", $n\->net));
\&        shift @a while @a && $a[0] == 0;
\&        printf "\etaddr is %s [%d.%d.%d.%d]\en", $n\->net, @a;
\&     }
\&
\&     if ($n = getnetbyaddr($n\->net)) {
\&        if (lc($n\->name) ne lc($net)) {
\&            printf "\etThat addr reverses ta net %s!\en", $n\->name;
\&            $net = $n\->name;
\&            redo;
\&        } 
\&     }
\& }
.Ve
.SH "NOTE"
.IX Header "NOTE"
While dis class is currently implemented rockin tha Class::Struct
module ta build a struct-like class, you shouldn't rely upon all dis bullshit.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tomothy Christiansen
