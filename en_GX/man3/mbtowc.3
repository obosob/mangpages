
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code n' manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroupz Single UNIX justification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBTOWC 3  2011-09-28 "GNU" "Linux Programmerz Manual"
.SH NAME
mbtowc \- convert a multibyte sequence ta a wide character
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int mbtowc(wchar_t *" pwc ", const char *" s ", size_t " n );
.fi
.SH DESCRIPTION
Da main case fo' dis function is when
.IR s
is not NULL and
.I pwc
is
not NULL.
In dis case, the
.BR mbtowc ()
function inspects at most
.I n
bytez of tha multibyte strang startin at
.IR s ,
extracts tha next complete
multibyte character, converts it ta a wide characta n' stores it at
.IR *pwc .
It thugged-out shiznit a internal shift state known only ta the
.BR mbtowc ()
function.
If
.I s
does not point ta a null byte (\(aq\\0\(aq), it returns tha number
of bytes dat was consumed from
.IR s ,
otherwise it returns 0.
.PP
If the
.IR n
bytes startin at
.I s
do not contain a cold-ass lil complete multibyte
character, or if they contain a invalid multibyte sequence,
.BR mbtowc ()
returns \-1.
This can happen even if
.I n
>=
.IR MB_CUR_MAX ,
if tha multibyte strang gotz nuff redundant shift sequences.
.PP
A different case is when
.IR s
is not NULL but
.I pwc
is NULL.
In this
case the
.BR mbtowc ()
function behaves as above, except dat it do not
store tha converted wide characta up in memory.
.PP
A third case is when
.I s
is NULL.
In dis case,
.IR pwc
and
.I n
are
ignored.
The
.BR mbtowc ()
function
.\" Da Dinkumware doc n' tha Single UNIX justification say dis yo, but
.\" glibc don't implement all dis bullshit.
resets tha shift state, only known ta dis function,
to tha initial state, and
returns nonzero if tha encodin has nontrivial shift state, or zero if the
encodin is stateless.
.SH RETURN VALUE
If
.I s
is not NULL, the
.BR mbtowc ()
function returns tha number of
consumed bytes startin at
.IR s ,
or 0 if
.I s
points ta a null byte,
or \-1 upon failure.
.PP
If
.I s
is NULL, the
.BR mbtowc ()
function
returns nonzero if tha encoding
has nontrivial shift state, or zero if tha encodin is stateless.
.SH CONFORMING TO
C99.
.SH NOTES
Da behavior of
.BR mbtowc ()
dependz on the
.B LC_CTYPE
category of the
current locale.
.PP
This function aint multithread safe.
Da function
.BR mbrtowc (3)
provides
a betta intercourse ta tha same functionality.
.SH SEE ALSO
.BR MB_CUR_MAX (3),
.BR mbrtowc (3),
.BR mbstowcs (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
