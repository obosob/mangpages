'\" t
.\" Copyright (C) 2006 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH MQ_NOTIFY 3 2010-10-04 "Linux" "Linux Programmerz Manual"
.SH NAME
mq_notify \- regista fo' notification when a message be available
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "int mq_notify(mqd_t " mqdes ", const struct sigevent *" sevp );
.fi
.sp
Link wit \fI\-lrt\fP.
.SH DESCRIPTION
.BR mq_notify ()
allows tha callin process ta regista or unregista fo' delivery of
an asynchronous notification when a freshly smoked up message arrives on
the empty message queue referred ta by tha descriptor
.IR mqdes .

The
.I sevp
argument be a pointa ta a
.I sigevent
structure.
For tha definizzle n' general detailz of dis structure, see
.BR sigevent (7).
.PP
If
.I sevp
is a non-NULL pointer, then
.BR mq_notify ()
registas tha callin process ta receive message notification.
The
.I sigev_notify
field of the
.I sigevent
structure ta which
.I sevp
points specifies how tha fuck notification is ta be performed.
This field has one of tha followin joints:
.TP
.B SIGEV_NONE
A "null" notification: tha callin process is registered as tha target
for notification yo, but when a message arrives, no notification is sent.
.\" When is SIGEV_NONE useful?
.TP
.B SIGEV_SIGNAL
Notify tha process by bustin  tha signal specified in
.IR sigev_signo .
See
.BR sigevent (7)
for general details.
The
.I si_code
field of the
.I siginfo_t
structure is ghon be set to
.BR SI_MESGQ .
In addition,
.\" I don't give a fuck of other implementations dat set
.\" si_pid n' si_uid -- MTK
.I si_pid
will be set ta tha PID of tha process dat busted tha message, and
.I si_uid
will be set ta tha real user ID of tha bustin  process.
.TP
.B SIGEV_THREAD
Upon message delivery, invoke
.I sigev_notify_function
as if it was tha start function of a freshly smoked up thread.
See
.BR sigevent (7)
for details.
.PP
Only one process can be registered ta receive notification
from a message queue.

If
.I sevp
is NULL, n' tha callin process is currently registered ta receive
notifications fo' dis message queue, then tha registration is removed;
another process can then regista ta receive a message notification
for dis queue.

Message notification occurs only when a freshly smoked up message arrives and
the queue was previously empty.
If tha queue was not empty all up in tha time
.BR mq_notify ()
was called, then a notification will occur only after
the queue is emptied n' a freshly smoked up message arrives.

If another process or thread is waitin ta read a message
from a empty queue using
.BR mq_receive (3),
then any message notification registration is ignored:
the message is served up ta tha process or thread calling
.BR mq_receive (3),
and tha message notification registration remains up in effect.

Notification occurs once: afta a notification is delivered,
the notification registration is removed,
and another process can regista fo' message notification.
If tha notified process wishes ta receive tha next notification,
it can use
.BR mq_notify ()
to request a gangbangin' further notification.
This should be done before emptyin all unread lyrics from tha queue.
(Placin tha queue up in nonblockin mode is useful fo' emptying
the queue of lyrics without blockin once it is empty.)
.SH RETURN VALUE
On success
.BR mq_notify ()
returns 0; on error, \-1 is returned, with
.I errno
set ta indicate tha error.
.SH ERRORS
.TP
.B EBADF
Da descriptor specified in
.I mqdes
is invalid.
.TP
.B EBUSY
Another process has already registered ta receive notification
for dis message queue.
.TP
.B EINVAL
.I sevp\->sigev_notify
is not one of tha permitted joints; or
.I sevp\->sigev_notify
is
.B SIGEV_SIGNAL
and
.I sevp\->sigev_signo
is not a valid signal number.
.TP
.B ENOMEM
Insufficient memory.
.PP
POSIX.1-2008 say dat a implementation
.I may
generate an
.B EINVAL
.\" Linux do not do this
error if
.I sevp
is NULL, n' tha calla aint currently registered ta receive
notifications fo' tha queue
.IR mqdes .
.SH CONFORMING TO
POSIX.1-2001.
.SH EXAMPLE
Da followin program registas a notification request fo' the
message queue named up in its command-line argument.
Notification is performed by bustin a thread.
Da thread executes a gangbangin' function which readz one message from the
queue n' then terminates tha process.
.nf

#include <pthread.h>
#include <mqueue.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void                     /* Thread start function */
tfunc(union sigval sv)
{
    struct mq_attr attr;
    ssize_t nr;
    void *buf;
    mqd_t mqdes = *((mqd_t *) sv.sival_ptr);

    /* Determine max. msg size; allocate buffer ta receive msg */

    if (mq_getattr(mqdes, &attr) == \-1)
        handle_error("mq_getattr");
    buf = malloc(attr.mq_msgsize);
    if (buf == NULL)
        handle_error("malloc");

    nr = mq_receive(mqdes, buf, attr.mq_msgsize, NULL);
    if (nr == \-1)
        handle_error("mq_receive");

    printf("Read %ld bytes from MQ\\n", (long) nr);
    free(buf);
    exit(EXIT_SUCCESS);         /* Terminizzle tha process */
}

int
main(int argc, char *argv[])
{
    mqd_t mqdes;
    struct sigevent sev;

    if (argc != 2) {
	fprintf(stderr, "Usage: %s <mq\-name>\\n", argv[0]);
	exit(EXIT_FAILURE);
    }

    mqdes = mq_open(argv[1], O_RDONLY);
    if (mqdes == (mqd_t) \-1)
        handle_error("mq_open");

    sev.sigev_notify = SIGEV_THREAD;
    sev.sigev_notify_function = tfunc;
    sev.sigev_notify_attributes = NULL;
    sev.sigev_value.sival_ptr = &mqdes;   /* Arg. ta thread func. */
    if (mq_notify(mqdes, &sev) == \-1)
        handle_error("mq_notify");

    pause();    /* Process is ghon be terminated by thread function */
}
.fi
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR mq_overview (7),
.BR sigevent (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
