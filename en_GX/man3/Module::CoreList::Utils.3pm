.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::CoreList::Utils 3pm"
.TH Module::CoreList::Utils 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::CoreList::Utils \- what tha fuck utilitizzles shipped wit versionz of perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Module::CoreList::Utils;
\&
\& print $Module::CoreList::Utils::utilities{5.009003}{ptar}; # prints 1
\&
\& print Module::CoreList::Utils\->first_release(\*(Aqcorelist\*(Aq);           # prints 5.008009
\& print Module::CoreList::Utils\->first_release_by_date(\*(Aqcorelist\*(Aq);   # prints 5.009002
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Module::CoreList::Utils serves up shiznit on which core n' dual-life utilitizzles shipped
with each version of perl.
.PP
It serves up a fuckin shitload of mechanizzlez fo' queryin dis shiznit.
.PP
There be a gangbangin' functionizzle programmin \s-1API\s0 available fo' programmers ta query
information.
.PP
Programmers may also query tha contained hash structure ta find relevant
information.
.SH "FUNCTIONS API"
.IX Header "FUNCTIONS API"
These is tha functions dat is available, they may either be called as functions or class methods:
.PP
.Vb 1
\&  Module::CoreList::Utils::first_release(\*(Aqcorelist\*(Aq); # as a gangbangin' function
\&
\&  Module::CoreList::Utils\->first_release(\*(Aqcorelist\*(Aq); # class method
.Ve
.ie n .IP """utilities""" 4
.el .IP "\f(CWutilities\fR" 4
.IX Item "utilities"
Requires a perl version as a argument, returns a list of utilitizzles dat shipped with
that version of perl, or undef/empty list if dat perl don't exist.
.ie n .IP """first_release( UTILITY )""" 4
.el .IP "\f(CWfirst_release( UTILITY )\fR" 4
.IX Item "first_release( UTILITY )"
Requires a \s-1UTILITY\s0 name as a argument, returns tha perl version when dat utilitizzle first
appeared up in core as ordered by perl version number or undef ( up in scalar context )
or a empty list ( up in list context ) if dat utilitizzle aint up in core.
.ie n .IP """first_release_by_date( UTILITY )""" 4
.el .IP "\f(CWfirst_release_by_date( UTILITY )\fR" 4
.IX Item "first_release_by_date( UTILITY )"
Requires a \s-1UTILITY\s0 name as a argument, returns tha perl version when dat utilitizzle first
appeared up in core as ordered by release date or undef ( up in scalar context )
or a empty list ( up in list context ) if dat utilitizzle aint up in core.
.ie n .IP """removed_from( UTILITY )""" 4
.el .IP "\f(CWremoved_from( UTILITY )\fR" 4
.IX Item "removed_from( UTILITY )"
Takes a \s-1UTILITY\s0 name as a argument, returns tha straight-up original gangsta perl version where dat utility
was removed from core. Returns undef if tha given utilitizzle was never up in core or remains
in core.
.ie n .IP """removed_from_by_date( UTILITY )""" 4
.el .IP "\f(CWremoved_from_by_date( UTILITY )\fR" 4
.IX Item "removed_from_by_date( UTILITY )"
Takes a \s-1UTILITY\s0 name as a argument, returns tha straight-up original gangsta perl version by release date where that
utilitizzle was removed from core. Returns undef if tha given utilitizzle was never up in core or remains
in core.
.SH "DATA STRUCTURES"
.IX Header "DATA STRUCTURES"
These is tha hash data structures dat is available:
.ie n .IP "%Module::CoreList::Utils::utilities" 4
.el .IP "\f(CW%Module::CoreList::Utils::utilities\fR" 4
.IX Item "%Module::CoreList::Utils::utilities"
A hash of hashes dat is keyed on perl version as indicated
in $].  Da second level hash is utilitizzle / defined pairs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris \f(CW\*(C`BinGOs\*(C'\fR Williams <chris@bingosnet.co.uk>
.PP
Currently maintained by tha perl 5 portas <perl5\-porters@perl.org>.
.PP
This module is tha result of archaeologizzle undertaken durin \s-1QA\s0 Hackathon
in Lancaster, April 2013.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2013 Chris Williams.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
corelist, Module::CoreList, perl, <http://perlpunks.de/corelist>
