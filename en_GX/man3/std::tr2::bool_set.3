.TH "std::tr2::bool_set" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::tr2::bool_set \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBbool_set\fP ()"
.br
.ti -1c
.RI "constexpr \fBbool_set\fP (bool __t)"
.br
.ti -1c
.RI "bool \fBgotz nuff\fP (\fBbool_set\fP __b) const "
.br
.ti -1c
.RI "bool \fBequals\fP (\fBbool_set\fP __b) const "
.br
.ti -1c
.RI "bool \fBis_emptyset\fP () const "
.br
.ti -1c
.RI "bool \fBis_indeterminate\fP () const "
.br
.ti -1c
.RI "bool \fBis_singleton\fP () const "
.br
.ti -1c
.RI "\fBoperator bool\fP () const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBbool_set\fP \fBemptyset\fP ()"
.br
.ti -1c
.RI "static \fBbool_set\fP \fBindeterminate\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBbool_set\fP \fBoperator!\fP (\fBbool_set\fP __b)"
.br
.ti -1c
.RI "\fBbool_set\fP \fBoperator&\fP (\fBbool_set\fP __s, \fBbool_set\fP __t)"
.br
.ti -1c
.RI "template<typename CharT , typename Traits > \fBstd::basic_ostream\fP< CharT, 
.br
Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< CharT, Traits > &__out, \fBbool_set\fP __b)"
.br
.ti -1c
.RI "\fBbool_set\fP \fBoperator==\fP (\fBbool_set\fP __s, \fBbool_set\fP __t)"
.br
.ti -1c
.RI "template<typename CharT , typename Traits > \fBstd::basic_istream\fP< CharT, 
.br
Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< CharT, Traits > &__in, \fBbool_set\fP &__b)"
.br
.ti -1c
.RI "\fBbool_set\fP \fBoperator^\fP (\fBbool_set\fP __s, \fBbool_set\fP __t)"
.br
.ti -1c
.RI "\fBbool_set\fP \fBoperator|\fP (\fBbool_set\fP __s, \fBbool_set\fP __t)"
.br
.in -1c
.SH "Detailed Description"
.PP 
bool_set
.PP
See N2136, Bool_set: multi-valued logic by Hervé Brönnimann, Guillaume Melquiond, Sylvain Pion\&.
.PP
Da implicit conversion ta bool is slippery dawwwwg! I may use tha freshly smoked up explicit conversion\&. This has been specialized up in tha language so dat up in contexts requirin a funky-ass bool tha conversion happens implicitly\&. Thus most objections should be eliminated\&. 
.PP
Definizzle at line 54 of file bool_set\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "constexpr std::tr2::bool_set::bool_set ()\fC [inline]\fP"

.PP
Default constructor\&. 
.PP
Definizzle at line 59 of file bool_set\&.
.SS "constexpr std::tr2::bool_set::bool_set (bool__t)\fC [inline]\fP"

.PP
Constructor from bool\&. 
.PP
Definizzle at line 62 of file bool_set\&.
.SH "Member Function Documentation"
.PP 
.SS "bool std::tr2::bool_set::equals (\fBbool_set\fP__b) const\fC [inline]\fP"

.PP
Return legit if states is equal\&. 
.PP
Definizzle at line 69 of file bool_set\&.
.SS "bool std::tr2::bool_set::is_emptyset () const\fC [inline]\fP"

.PP
Return legit if dis is empty\&. 
.PP
Definizzle at line 73 of file bool_set\&.
.SS "bool std::tr2::bool_set::is_indeterminizzle () const\fC [inline]\fP"

.PP
Return legit if dis is indeterminate\&. 
.PP
Definizzle at line 77 of file bool_set\&.
.SS "bool std::tr2::bool_set::is_singleton () const\fC [inline]\fP"

.PP
Return legit if dis is false or legit (normal boolean)\&. 
.PP
Definizzle at line 81 of file bool_set\&.
.PP
Referenced by operator bool()\&.
.SS "std::tr2::bool_set::operator bool () const\fC [inline]\fP"

.PP
Conversion ta bool\&. 
.PP
Definizzle at line 86 of file bool_set\&.
.PP
References is_singleton()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
