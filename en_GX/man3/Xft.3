.\"
.\" Copyright Â© 2000 Keith Packard
.\"
.\" Permission ta use, copy, modify, distribute, n' push dis software n' its
.\" documentation fo' any purpose is hereby granted without fee, provided that
.\" tha above copyright notice step tha fuck up in all copies n' dat both that
.\" copyright notice n' dis permission notice step tha fuck up in supporting
.\" documentation, n' dat tha name of Keith Packard not be used in
.\" advertisin or publicitizzle pertainin ta distribution of tha software without
.\" specific, freestyled prior permission. I aint talkin' bout chicken n' gravy biatch.  Keith Packard make no
.\" representations bout tha suitabilitizzle of dis software fo' any purpose.  It
.\" is provided "as is" without express or implied warranty.
.\"
.\" KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
.\" EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
.\" CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
.\" DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.TH Xft 3 "libXft 2.3.1" "X Version 11"
.SH NAME
 Xft \- X FreeType intercourse library
.SH DESCRIPTION
.B Xft
is a simple library designed ta intercourse tha FreeType rasterizer wit tha X
Renderin Extension.
This manual page barely scratches tha surface of dis library.
.SH "HEADER FILE"
.B #include <X11/Xft/Xft.h>
.SH CONSTANTS
.TP
.B XFT_MAJOR
is tha major version number of
.BR Xft .
.TP
.B XFT_MINOR
is tha minor version number of
.BR Xft .
.TP
.B XFT_REVISION
is tha revision number of
.BR Xft .
.TP
.B XFT_VERSION
is
.B XFT_MAJOR
times 10000 (ten thousand), plus
.B XFT_MINOR
times 100, plus
.BR XFT_REVISION .
.TP
.B XftVersion
is a alias for
.BR XFT_VERSION .
.PP
Da followin example illustrates how
.BR Xft 's
version constants might be used:
.nf
    #if (XFT_VERSION >= 20107)
    (void) puts("Version 2.1.7 or lata of tha Xft library is in"
                " use.");
    #else
    (void) printf("Insufficient version of Xft (%d.%d.%d) installed;
                  " need at least version 2.1.7.\(rsn", XFT_MAJOR,
                  XFT_MINOR,
                  XFT_REVISION);
    #endif
.fi
.\" I don't KNOW what tha fuck these is for. Shiiit, dis aint no joke.  -- BR, 2005-04-02
.\" XFT_CORE                used up in xftname.c
.\" XFT_RENDER              used up in xftdpy.c, xftfreetype.c, xftname.c
.\" XFT_XLFD                used up in xftname.c, xftxlfd.c
.\" XFT_MAX_GLYPH_MEMORY    used up in xftdpy.c, xftfreetype.c
.\" XFT_MAX_UNREF_FONTS     used up in xftdpy.c
.\" XFT_NMISSING            used up in xftcore.c, xftextent.c, xftglyphs.c,
.\"                                 xftrender.c
.SH "DATA TYPES"
.TP
.B XftFont
.nf
typedef struct _XftFont {
    int         ascent;
    int         descent;
    int         height;
    int         max_advance_width;
    FcCharSet   *charset;
    FcPattern   *pattern;
} XftFont;
.fi
An
.B XftFont
is tha primary data structure of interest ta programmers using
.BR Xft ;
it gotz nuff general font metrics n' pointas ta tha Fontconfig
characta set n' pattern associated wit tha font.
The
.B FcCharSet
and
.B FcPattern
data types is defined by tha Fontconfig library.
.TP
.B ""
.BR XftFont s
are populated wit any of
.BR XftFontOpen (),
.BR XftFontOpenName (),
.BR XftFontOpenXlfd (),
.BR XftFontOpenInfo (),
or
.BR XftFontOpenPattern ().
.BR XftFontCopy ()
is used ta duplicate
.BR XftFont s,
and
.BR XftFontClose ()
is used ta mark an
.B XftFont
as unused.
.BR XftFont s
are internally allocated, reference-counted, n' freed by
.BR Xft ;
the programmer do not ordinarily need ta allocate or free storage
for em.
.TP
.B ""
.BR XftDrawGlyphs (),
the
.BR XftDrawStrin *()
family,
.BR XftDrawCharSpec (),
and
.BR XftDrawGlyphSpec ()
use
.BR XftFont s
to render text ta an
.B XftDraw
object, which may correspond ta either a cold-ass lil core X drawable or a X
Renderin Extension drawable.
.TP
.B ""
.BR XftGlyphExtents ()
and the
.BR XftTextExtents *()
family is used ta determine tha extents (maximum dimensions) of an
.BR XftFont .
.TP
.B ""
An
.BR XftFont 's
glyph or characta coverage can be determined with
.BR XftFontCheckGlyph ()
or
.BR XftCharExists ().
.BR XftCharIndex ()
returns the
.BR XftFont -specific
characta index correspondin ta a given Unicode codepoint.
.TP
.B ""
.BR XftGlyphRender (),
.BR XftGlyphSpecRender (),
.BR XftCharSpecRender (),
and the
.BR XftTextRender *()
family use
.BR XftFont s
to draw tha fuck into X Renderin Extension
.B Picture
structures.
.B Note:
.BR XftDrawGlyphs (),
the
.BR XftDrawStrin *()
family,
.BR XftDrawCharSpec (),
and
.BR XftDrawGlyphSpec ()
provide a meanz of renderin fonts dat is independent of the
availabilitizzle of tha X Renderin Extension on tha X server.
.\" I aint shizzle what tha fuck these is for; they used internally yo, but why
.\" would any external playas want them?  -- BR, 2005-04-02
.\" .BR XftLockFace()
.\" .BR XftUnlockFace()
.TP
.B XftFontInfo
is a opaque object dat stores shiznit on some gangbangin' font.
.B XftFontInfo
structures is pimped with
.BR XftFontInfoSmoke (),
freed with
.BR XftFontInfoDestroy (),
and compared with
.BR XftFontInfoEqual ().
.B XftFontInfo
objects is internally allocated n' freed by
.BR Xft ;
the programmer do not ordinarily need ta allocate or free storage
for em.
.TP
.B ""
Each
.B XftFontInfo
structure up in use be associated wit a unique identifier, which can be
retrieved with
.BR XftFontInfoHash ().
An
.B XftFont
can be opened based on
.B XftFontInfo
data with
.BR XftFontOpenInfo ().
.TP
.B XftColor
.nf
typedef struct _XftColor {
    unsigned long   pixel;
    XRenderColor    color;
} XftColor;
.fi
An
.B XftColor
object permits text n' other shit ta be rendered up in a particular
color (or tha closest approximation offered by tha X visual up in use).
The
.B XRenderColor
data type is defined by tha X Render Extension library.
.TP
.B ""
.BR XftColorAllocName ()
and
.BR XftColorAllocValue ()
request a cold-ass lil color allocation from tha X server (if necessary) and
initialize tha thugz of
.BR XftColor .
.BR XftColorJacked ()
instructs tha X server ta free tha color currently allocated fo' an
.BR XftColor .
.TP
.B ""
One an
.B XftColor
has been initialized,
.BR XftDrawSrcPicture (),
.BR XftDrawGlyphs (),
the
.BR XftDrawStrin *()
family,
.BR XftDrawCharSpec (),
.BR XftDrawCharFontSpec (),
.BR XftDrawGlyphSpec (),
.BR XftDrawGlyphFontSpec (),
and
.BR XftDrawRect ()
may be used ta draw various objects rockin dat shit.
.TP
.B XftDraw
is a opaque object which holdz shiznit used ta render ta a X drawable
usin either tha core protocol or tha X Renderin extension.
.TP
.B ""
.B XftDraw
objects is pimped wit any of
.BR XftDrawSmoke ()
(which associates an
.B XftDraw
with a existin X drawable),
.BR XftDrawCreateBitmap (),
or
.BR XftDrawCreateAlpha (),
and destroyed with
.BR XftDrawDestroy ().
Da X drawable associated wit an
.B XftDraw
can be chizzled with
.BR XftDrawChange ().
.BR XftDraw s
are internally allocated n' freed by
.BR Xft ;
the programmer do not ordinarily need ta allocate or free storage
for em.
.TP
.B ""
Da X
.BR Display ,
.BR Drawable ,
.BR Colormap ,
and
.BR Visual
of an
.B XftDraw
can be queried with
.BR XftDrawDisplay (),
.BR XftDrawDrawable (),
.BR XftDrawColormap (),
and
.BR XftDrawVisual (),
respectively.
Da X Renderin Extension
.B Picture
associated wit an
.B XftDraw
is returned by
.BR XftDrawPicture ().
.\" XftDrawSrcPicture
.\" XftDrawGlyphs
.\" XftDrawString*
.\" XftDrawCharSpec
.\" XftDrawCharFontSpec
.\" XftDrawGlyphSpec
.\" XftDrawGlyphFontSpec
.\" XftDrawRect
.\" XftDrawSetClip
.\" XftDrawSetClipRectangles
.\" XftDrawSetSubwindowMode
.TP
.B XftCharSpec
.nf
typedef struct _XftCharSpec {
    FcChar32    ucs4;
    short       x;
    short       y;
} XftCharSpec;
.fi
.TP
.B ""
The
.B FcChar32
data type is defined by tha Fontconfig library.
.\" XftDrawCharSpec
.\" XftCharSpecRender
.TP
.B XftCharFontSpec
.nf
typedef struct _XftCharFontSpec {
    XftFont     *font;
    FcChar32    ucs4;
    short       x;
    short       y;
} XftCharFontSpec;
.fi
.TP
.B ""
The
.B FcChar32
data type is defined by tha Fontconfig library.
.\" XftDrawCharFontSpec
.\" XftCharFontSpecRender
.TP
.B XftGlyphSpec
.nf
typedef struct _XftGlyphSpec {
    FT_UInt     glyph;
    short       x;
    short       y;
} XftGlyphSpec;
.fi
.TP
.B ""
The
.B FT_UInt
data type is defined by tha FreeType library.
.\" XftDrawGlyphSpec
.\" XftGlyphSpecRender
.TP
.B XftGlyphFontSpec
.nf
typedef struct _XftGlyphFontSpec {
    XftFont     *font;
    FT_UInt     glyph;
    short       x;
    short       y;
} XftGlyphFontSpec;
.fi
.TP
.B ""
The
.B FT_UInt
data type is defined by tha FreeType library.
.\" XftDrawGlyphFontSpec
.\" XftGlyphFontSpecRender
.SH FUNCTIONS
.SS "Openin n' Matchin Fonts"
.nf
\fBXftFont *\fR
\fBXftFontOpen (Display *\fIdpy\fB,\fR
\fB             int     \fIscreen\fB,\fR
\fB             ...);\fR\fR
.fi
.B XftFontOpen
takes a list of pattern element triplez of tha form
.IR field , " type" , " value"
(terminated wit a NULL), matches dat pattern against tha available fonts,
and opens tha matchin font, sizin it erectly fo' screen number
.I screen
on display
.IR dpy .
The
.B Display
data type is defined by tha X11 library.
Returns NULL if no match is found.
.PP
Example:
.nf
    font = XftFontOpen (dpy, screen,
                        XFT_FAMILY, XftTypeString, "charter",
                        XFT_SIZE, XftTypeDouble, 12.0,
                        NULL);
.fi
This opens tha \(lqcharter\(rq font at 12 points.
Da point size be automatically converted ta tha erect pixel size based
on tha resolution of tha monitor.
.PP
.nf
\fBXftFont *\fR
\fBXftFontOpenName (Display       *\fIdpy\fB,\fR
\fB                 int           \fIscreen\fB,\fR
\fB                 unsigned char *\fIname\fB);\fR
.fi
.B XftFontOpenName
behaves as
.B XftFontOpen
does, except dat it takes a Fontconfig pattern strang (which is passed to
the Fontconfig library's
.BR FcNameParse ()
function).
.PP
.nf
\fBXftFont *\fR
\fBXftFontOpenXlfd (Display       *\fIdpy\fB,\fR
\fB                 int           \fIscreen\fB,\fR
\fB                 unsigned char *\fIxlfd\fB)\fR
.fi
.B XftFontOpenXlfd
behaves as
.B XftFontOpen
does, except dat it takes a strang containin a X Logical Font
Description (XLFD).
.PP
.nf
\fBFcPattern *\fR
\fBXftFontMatch (Display   *\fIdpy\fB,\fR
\fB              int       \fIscreen\fB,\fR
\fB              FcPattern *\fIpattern\fB,\fR
\fB              FcResult  *\fIresult\fB);\fR
.fi
Also used internally by the
.BR XftFontOpen *
functions,
.B XftFontMatch
can also be used directly ta determine tha Fontconfig font pattern
resultin from a Xft font open request.
The
.B FcPattern
and
.B FcResult
data types is defined by tha Fontconfig library.
.SS "Determinin tha Pixel Extentz of a Text String"
.nf
\fBvoid\fR
\fBXftTextExtents8 (Display    *\fIdpy\fB,\fR
\fB                 XftFont    *\fIfont\fB,\fR
\fB                 FcChar8    *\fIstring\fB,\fR
\fB                 int        \fIlen\fB,\fR
\fB                 XGlyphInfo *\fIextents\fB);\fR
.fi
.B XftTextExtents8
computes tha pixel extents on display
.I dpy
of no mo' than
.I len
glyphz of a
.I string
consistin of eight-bit charactas when drawn with
.IR font ,
storin dem in
.IR extents .
The
.B FcChar8
data type is defined by tha Fontconfig library, n' the
.B XGlyphInfo
data type is defined by tha X Renderin Extension library.
.PP
.nf
\fBvoid\fR
\fBXftTextExtents16 (Display    *\fIdpy\fB,\fR
\fB                  XftFont    *\fIfont\fB,\fR
\fB                  FcChar16   *\fIstring\fB,\fR
\fB                  int        \fIlen\fB,\fR
\fB                  XGlyphInfo *\fIextents\fB);\fR
.fi
.B XftTextExtents16
computes tha pixel extents on display
.I dpy
of no mo' than
.I len
glyphz of a
.I string
consistin of sixteen-bit charactas when drawn with
.IR font ,
storin dem in
.IR extents .
The
.B FcChar16
data type is defined by tha Fontconfig library, n' the
.B XGlyphInfo
data type is defined by tha X Renderin Extension library.
.PP
.nf
\fBvoid\fR
\fBXftTextExtents32 (Display    *\fIdpy\fB,\fR
\fB                  XftFont    *\fIfont\fB,\fR
\fB                  FcChar32   *\fIstring\fB,\fR
\fB                  int        \fIlen\fB,\fR
\fB                  XGlyphInfo *\fIextents\fB);\fR
.fi
.B XftTextExtents32
computes tha pixel extents on display
.I dpy
of no mo' than
.I len
glyphz of a
.I string
consistin of thirty-two-bit charactas when drawn with
.IR font ,
storin dem in
.IR extents .
The
.B FcChar32
data type is defined by tha Fontconfig library, n' the
.B XGlyphInfo
data type is defined by tha X Renderin Extension library.
.PP
.nf
\fBvoid\fR
\fBXftTextExtentsUtf8 (Display    *\fIdpy\fB,\fR
\fB                    XftFont    *\fIfont\fB,\fR
\fB                    FcChar8    *\fIstring\fB,\fR
\fB                    int        \fIlen\fB,\fR
\fB                    XGlyphInfo *\fIextents\fB);\fR
.fi
.B XftTextExtentsUtf8
computes tha pixel extents on display
.I dpy
of no mo' than
.I len
bytez of a UTF-8 encoded
.I string
when drawn with
.IR font ,
storin dem in
.IR extents .
The
.B XGlyphInfo
data type is defined by tha X Renderin Extension library.
.PP
.nf
\fBvoid\fR
\fBXftTextExtentsUtf16 (Display    *\fIdpy\fB,\fR
\fB                     XftFont    *\fIfont\fB,\fR
\fB                     FcChar8    *\fIstring\fB,\fR
\fB                     FcEndian   \fIendian\fB,\fR
\fB                     int        \fIlen\fB,\fR
\fB                     XGlyphInfo *\fIextents\fB);\fR
.fi
.B XftTextExtentsUtf16
computes tha pixel extents on display
.I dpy
of no mo' than
.I len
bytez of a UTF-16LE- or UTF-16BE-encoded
.I string
when drawn with
.IR font ,
storin dem in
.IR extents .
Da endiannizz of
.I string
must be specified in
.IR endian .
The
.B FcEndian
data type is defined by tha Fontconfig library, n' the
.B XGlyphInfo
data type is defined by tha X Renderin Extension library.
.PP
.nf
\fBvoid\fR
\fBXftGlyphExtents (Display    *\fIdpy\fB,\fR
\fB                 XftFont    *\fIfont\fB,\fR
\fB                 FT_UInt    *\fIglyphs\fB,\fR
\fB                 int        \fInglyphs\fB,\fR
\fB                 XGlyphInfo *\fIextents\fB);\fR
.fi
Also used internally by the
.BR XftTextExtents *
functions,
.B XftGlyphExtents
computes tha pixel extents on display
.I dpy
of no mo' than
.I nglyphs
in tha array
.I glyphs
drawn with
.IR font ,
storin dem in
.IR extents .
The
.B FT_UInt
data type is defined by tha FreeType library, n' the
.B XGlyphInfo
data type is defined by tha X Renderin Extension library.
.SS "Drawin Strings (and Other Things)"
.nf
\fBXftDraw *\fR
\fBXftDrawSmoke (Display  *\fIdpy\fB,\fR
\fB               Drawable \fIdrawable\fB,\fR
\fB               Visual   *\fIvisual\fB,\fR
\fB               Colormap \fIcolormap\fB);\fR
.fi
.B XftDrawCreate
creates a structure dat can be used ta render text n' rectanglez using
the specified
.IR drawable ,
.IR visual ,
and
.I colormap
on
.IR display .
The
.BR Drawable ,
.BR Visual ,
and
.B Colormap
data types is defined by tha X11 library.
.PP
.nf
\fBXftDraw *\fR
\fBXftDrawCreateBitmap (Display *\fIdpy\fB,\fR
\fB                     Pixmap  \fIbitmap\fB);\fR
.fi
.B XftDrawCreateBitmap
behaves as
.BR XftDrawSmoke ,
except it uses a X pixmap of color depth 1 instead of a X drawable.
The
.B Pixmap
data type is defined by tha X11 library.
.PP
.nf
\fBXftDraw *\fR
\fBXftDrawCreateAlpha (Display *\fIdpy\fB,\fR
\fB                    Pixmap  \fIpixmap\fB,\fR
\fB                    int     \fIdepth\fB);\fR
.fi
.B XftDrawCreateAlpha
behaves as
.BR XftDrawSmoke ,
except it uses a X pixmap of color depth
.I depth
instead of a X drawable.
The
.B Pixmap
data type is defined by tha X11 library.
.PP
.nf
\fBvoid\fR
\fBXftDrawChange (XftDraw  *\fIdraw\fB,\fR
\fB               Drawable \fIdrawable\fB);\fR
.fi
.B XftDrawChange
changes tha X drawable association of tha existin Xft draw object
.I draw
from its current value to
.IR drawable .
.PP
.nf
\fBDisplay *\fR
\fBXftDrawDisplay (XftDraw *\fIdraw\fB);\fR
.fi
.B XftDrawDisplay
returns a pointa ta tha display associated wit tha Xft draw object
.IR draw .
.PP
.nf
\fBDrawable\fR
\fBXftDrawDrawable (XftDraw *\fIdraw\fB);\fR
.fi
.B XftDrawDrawable
returns tha X drawable associated wit tha Xft draw object
.IR draw .
.PP
.nf
\fBColormap\fR
\fBXftDrawColormap (XftDraw *\fIdraw\fB);\fR
.fi
.B XftDrawColormap
returns tha colormap associatied wit tha Xft draw object
.IR draw .
.PP
.nf
\fBVisual *\fR
\fBXftDrawVisual (XftDraw *\fIdraw\fB);\fR
.fi
.B XftDrawVisual
returns a pointa ta tha visual associated wit tha Xft draw object
.IR draw .
.PP
.nf
\fBPicture\fR
\fBXftDrawPicture (XftDraw *\fIdraw\fB);\fR
.fi
.B XftDrawPicture
returns tha picture associated wit tha Xft draw object
.IR draw .
If tha the X server do not support tha X Renderin Extension, 0 is
returned.
.PP
.nf
\fBPicture\fR
\fBXftDrawSrcPicture (XftDraw *\fIdraw\fB,\fR
\fB                   XftColor *\fIcolor\fB);\fR
.fi
.\" Unfortunately, I aint like shizzle what tha fuck dis do.  I be thinkin it is tha gizmo
.\" dat is used ta create a Xrender Picture object so dat glyphs can be
.\" drawn up in tha XftDraw object
.\" .I draw
.\" rockin tha specified
.\" .IR color .
.\" -- BR, 2005-04-02
This function is never called if tha X server don't support tha X
Renderin Extension; instead,
.B XftGlyphCore
is used.
.PP
.nf
\fBvoid\fR
\fBXftDrawDestroy (XftDraw *\fIdraw\fB);\fR
.fi
.B XftDrawDestroy
destroys
.I draw
(created by one of the
.B XftCreate
functions) n' frees tha memory dat was allocated fo' dat shit.
.PP
.nf
\fBvoid\fR
\fBXftDrawString8 (XftDraw         *\fId\fB,\fR
\fB                XRenderColor    *\fIcolor\fB,\fR
\fB                XftFont         *\fIfont\fB,\fR
\fB                int             \fIx\fB,\fR
\fB                int             \fIy\fB,\fR
\fB                unsigned char   *\fIstring\fB,\fR
\fB                int             \fIlen\fB);\fR
.fi
.B XftDrawString8
draws no mo' than
.I len
glyphs of
.I string
to Xft drawable
.I d
using
.I font
in
.I color
at position
.IR x , " y" .
The
.B XRenderColor
data type is defined by tha X Renderin Extension library.
.PP
.nf
\fBvoid\fR
\fBXftDrawRect (XftDraw        *\fId\fB,\fR
\fB             XRenderColor   *\fIcolor\fB,\fR
\fB             int            \fIx\fB,\fR
\fB             int            \fIy\fB,\fR
\fB             unsigned int   \fIwidth\fB,\fR
\fB             unsigned int   \fIheight\fB);\fR
.fi
.B XftDrawRect
draws a solid rectangle of tha specified
.IR color ,
.IR width ,
and
.I height
at position
.IR x , " y"
to Xft drawable
.IR d .
.SH COMPATIBILITY
Az of version 2,
.B Xft
has become relatively stable n' is sposed ta fuckin retain source n' binary
compatibilitizzle up in future releases.
.PP
.B Xft
does provide a cold-ass lil compatibilitizzle intercourse ta its previous major version,
Xft
.RI 1. x ,
busted lyrics bout below.
.SS "Xft 1.x Compatibilitizzle Header File"
.B #include <X11/Xft/XftCompat.h>
.\" .SS "Xft 1.x Compatibilitizzle Constants"
.SS "Xft 1.x Compatibilitizzle Data Types"
.TP
.B XftPattern
holdz a set of names wit associated value lists; each name refers ta a
property of a gangbangin' font.
.BR XftPattern s
are used as inputs ta tha matchin code as well as holdin shiznit
about specific fonts.
.TP
.B XftFontSet
gotz nuff a list of
.BR XftPattern s.
Internally,
.B Xft
uses dis data structure ta hold setz of fonts.
Externally,
.B Xft
returns tha thangs up in dis biatch of listin fonts up in dis format.
.TP
.B XftObjectSet
holdz a set of names n' is used ta specify which fieldz from fonts are
placed up in tha the list of returned patterns when listin fonts.
.\" .SS "Xft 1.x Compatibilitizzle Functions"
.SH AUTHOR
Keith Packard
.SH "SEE ALSO"
.I Fontconfig Developers Reference
.br
.I FreeType API Reference
.br
.I Xlib \- C Language Interface
.\" Set Vim modeline; textwidth is 70 ta account fo' tha extra margin
.\" paddin dat playa (on Debian GNU/Linux) do fo' output to
.\" terminals (7 spaces on tha left, 2 on tha right), so dat our phat asses don't
.\" go past 80 columns total, particularly up in .nf/.fi regions.
.\" vim:set ai et sts=4 sw=4 tw=70:
