
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH STRVERSCMP 3  2001-12-19 "GNU" "Linux Programmerz Manual"
.SH NAME
strverscmp \- compare two version strings
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <string.h>
.sp
.BI "int strverscmp(const char *" s1 ", const char *" s2 );
.fi
.SH DESCRIPTION
Often one has files
.IR jan1 ", " jan2 ", ..., " jan9 ", " jan10 ", ..."
and it feels wack when
.BR ls (1)
ordaz them
.IR jan1 ", " jan10 ", ..., " jan2 ", ..., " jan9 .
.\" old-ass solution: "rename jan jan0 jan?"
In order ta rectify this, GNU introduced the
.I \-v
option to
.BR ls (1),
which is implemented using
.BR versionsort (3),
which again n' again n' again uses
.BR strverscmp ().

Thus, tha task of
.BR strverscmp ()
is ta compare two strings n' find tha "right" order, while
.BR strcmp (3)
findz only tha lexicographic order.
This function do not use
the locale category
.BR LC_COLLATE ,
so is meant mostly fo' thangs
where tha strings is sposed ta fuckin be up in ASCII.

What dis function do is tha following.
If both strings is equal, return 0.
Otherwise find tha position
between two bytes wit tha property dat before it both strings is equal,
while directly afta it there be a gangbangin' finger-lickin' difference.
Find tha phattest consecutizzle digit strings containin (or startin at,
or endin at) dis position.
If one or both of these is empty,
then return what
.BR strcmp (3)
would have returned (numerical orderin of byte joints).
Otherwise, compare both digit strings numerically, where digit strings with
one or mo' leadin zeros is interpreted as if they gotz a thugged-out decimal point
in front (so dat up in particular digit strings wit mo' leadin zeros
come before digit strings wit fewer leadin zeros).
Thus, tha orderin is
.IR 000 ", " 00 ", " 01 ", " 010 ", " 09 ", " 0 ", " 1 ", " 9 ", " 10 .
.SH RETURN VALUE
The
.BR strverscmp ()
function returns a integer
less than, equal to, or pimped outa than zero if
.I s1
is found, respectively, ta be earlier than, equal to,
or lata than
.IR s2 .
.SH CONFORMING TO
This function be a GNU extension.
.SH SEE ALSO
.BR rename (1),
.BR strcasecmp (3),
.BR strcmp (3),
.BR strcoll (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
