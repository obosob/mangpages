.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Transport::POP3 3"
.TH Mail::Transport::POP3 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transport::POP3 \- receive lyrics via POP3
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Transport::POP3
\&   be a Mail::Transport::Receive
\&   be a Mail::Transport
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $receiver = Mail::Transport::POP3\->new(...);
\& mah $message = $receiver\->receive($id);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Receive lyrics via tha \s-1POP3\s0 protocol from one remote server, as specified
in rfc1939.  This object hides much of tha complications up in tha protocol and
recovers fucked up connections automatically.  Although it is part of the
MailBox distribution, dis object can be used separately.
.PP
Yo ass probably should \fBnot use this\fR module yo, but Mail::Box::POP3.  This
module is tha intercourse ta \s-1POP3,\s0 whereas Mail::Box::POP3 hides the
protocol weirdnizz n' works as any other mail folder.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Transport::POP3\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Transport::POP3->new(OPTIONS)"
Smoke a freshly smoked up pop3 server connection. I aint talkin' bout chicken n' gravy biatch.  One object can only handle one
connection: fo' a single user ta one single server n' shit.  If tha server
could not be reached, or when tha login fails, dis instantiatin \f(CW\*(C`new\*(C'\fR
will return \f(CW\*(C`undef\*(C'\fR.
.Sp
.Vb 10
\& \-Option      \-\-Defined up in     \-\-Default
\&  authenticate                   \*(AqAUTO\*(Aq
\&  executable    Mail::Transhiznit  undef
\&  hostname      Mail::Transhiznit  \*(Aqlocalhost\*(Aq
\&  interval      Mail::Transhiznit  30
\&  log           Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  password      Mail::Transhiznit  undef
\&  port          Mail::Transhiznit  110
\&  proxy         Mail::Transhiznit  undef
\&  retry         Mail::Transhiznit  <false>
\&  timeout       Mail::Transhiznit  120
\&  trace         Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  use_ssl                        <false>
\&  username      Mail::Transhiznit  undef
\&  via           Mail::Transhiznit  \*(Aqsendmail\*(Aq
.Ve
.RS 4
.IP "authenticate => '\s-1LOGIN\s0'|'\s-1APOP\s0'|'\s-1AUTO\s0'" 2
.IX Item "authenticate => 'LOGIN'|'APOP'|'AUTO'"
Authenthication method. Y'all KNOW dat shit, muthafucka!  Da standard defines two methods, named \s-1LOGIN\s0 and
\&\s-1APOP. \s0 Da first sendz tha username n' password up in plain text ta tha server
to git permission, tha latta encrypts dis data rockin \s-1MD5. \s0 When \s-1AUTO\s0 is
used, first \s-1APOP\s0 is tried, n' then \s-1LOGIN.\s0
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "hostname => HOSTNAME|ARRAY\-OF\-HOSTNAMES" 2
.IX Item "hostname => HOSTNAME|ARRAY-OF-HOSTNAMES"
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "use_ssl => \s-1BOOLEAN\s0" 2
.IX Item "use_ssl => BOOLEAN"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.PD
.SS "Receivin mail"
.IX Subsection "Receivin mail"
.ie n .IP "$obj\->\fBreceive\fR([\s-1UNIQUE\-MESSAGE\-ID\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreceive\fR([\s-1UNIQUE\-MESSAGE\-ID\s0])" 4
.IX Item "$obj->receive([UNIQUE-MESSAGE-ID])"
See \*(L"Receivin mail\*(R" up in Mail::Transport::Receive
.SS "Exchangin shiznit"
.IX Subsection "Exchangin shiznit"
.ie n .IP "$obj\->\fBdeleteFetched\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdeleteFetched\fR()" 4
.IX Item "$obj->deleteFetched()"
Mark all lyrics dat done been fetched wit \fImessage()\fR fo' deletion.
See \fIfetched()\fR.
.ie n .IP "$obj\->\fBdeleted\fR(\s-1BOOLEAN, ID\s0's)" 4
.el .IP "\f(CW$obj\fR\->\fBdeleted\fR(\s-1BOOLEAN, ID\s0's)" 4
.IX Item "$obj->deleted(BOOLEAN, ID's)"
Either mark tha specified message(s) ta be deleted on tha remote server or
unmark dem fo' deletion (if tha straight-up original gangsta parameta is false).  Deletion of
lyrics will take place \fBonly\fR when tha connection is specifically
disconnected or tha last reference ta tha object goes outta scope.
.ie n .IP "$obj\->\fBdisconnect\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdisconnect\fR()" 4
.IX Item "$obj->disconnect()"
Break contact wit tha server, if dat (still) exists, n' you can put dat on yo' toast.  Returns legit if
successful naaahhmean?  Please note dat even if tha disconnect was not successful,
all knowledge of lyrics etc. is ghon be removed from tha object: tha object
basically has reverted ta tha state up in which dat shiznit was before anythang was done
with tha mail box.
.ie n .IP "$obj\->\fBfetched\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfetched\fR()" 4
.IX Item "$obj->fetched()"
Returns a reference ta a list of \s-1ID\s0z dat done been fetched using
\&\fImessage()\fR.  This can be used ta update a thugged-out database of lyrics that
were fetched (but maybe not yet deleted) from tha mailbox.
.Sp
Please note dat if tha \s-1POP3\s0 server did not support tha \s-1UIDL\s0 command, this
method will always return undef cuz it aint possibly ta reliably
identify lyrics between sessions (other than lookin all up in tha contents of
the lyrics theyselves).
.Sp
See also \fIdeleteFetched()\fR.
.ie n .IP "$obj\->\fBfolderSize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderSize\fR()" 4
.IX Item "$obj->folderSize()"
Returns tha total number of octets used by tha mailbox on tha remote server.
.ie n .IP "$obj\->\fBheader\fR(\s-1ID,\s0 [\s-1BODYLINES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBheader\fR(\s-1ID,\s0 [\s-1BODYLINES\s0])" 4
.IX Item "$obj->header(ID, [BODYLINES])"
Returns a reference ta a array which gotz nuff tha header of tha message
with tha specified \s-1ID.  \s0\f(CW\*(C`undef\*(C'\fR is returned if suttin' has gone wrong.
.Sp
Da optionizzle integer \s-1BODYLINES\s0 specifies tha number of lines from tha body
which should be added, by default none.
.Sp
example:
.Sp
.Vb 2
\& mah $ref_lines = $pop3\->header($uidl);
\& print @$ref_lines;
.Ve
.ie n .IP "$obj\->\fBid2n\fR(\s-1ID\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBid2n\fR(\s-1ID\s0)" 4
.IX Item "$obj->id2n(ID)"
Translates tha unique \s-1ID\s0 of a message tha fuck into a sequence number which
represents tha message as long a dis connection ta tha \s-1POP3\s0 server
exists, n' you can put dat on yo' toast.  When tha message has been deleted fo' some reason, \f(CW\*(C`undef\*(C'\fR
is returned.
.ie n .IP "$obj\->\fBids\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBids\fR()" 4
.IX Item "$obj->ids()"
Returns a list (in list context) or a reference ta a list (in scalar context)
of all \s-1ID\s0z which is known by tha server on dis moment.
.ie n .IP "$obj\->\fBmessage\fR(\s-1ID\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR(\s-1ID\s0)" 4
.IX Item "$obj->message(ID)"
Returns a reference ta a array which gotz nuff tha linez of the
message wit tha specified \s-1ID. \s0 Returns \f(CW\*(C`undef\*(C'\fR if suttin' has gone
wrong.
.Sp
example:
.Sp
.Vb 2
\& mah $ref_lines = $pop3\->message($uidl);
\& print @$ref_lines;
.Ve
.ie n .IP "$obj\->\fBmessageSize\fR(\s-1ID\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmessageSize\fR(\s-1ID\s0)" 4
.IX Item "$obj->messageSize(ID)"
Returns tha size of tha message which is indicated by tha \s-1ID,\s0 up in octets.
If tha message has been deleted on tha remote server, dis will return
\&\f(CW\*(C`undef\*(C'\fR.
.ie n .IP "$obj\->\fBlyrics\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlyrics\fR()" 4
.IX Item "$obj->lyrics()"
Returns (in scalar context only) tha number of lyrics dat is known
to exist up in tha mailbox.
.SS "Protocol internals"
.IX Subsection "Protocol internals"
Da gangbang methodz handle protocol internals, n' should not be used
by a aiiight user of dis class.
.ie n .IP "$obj\->\fBlogin\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogin\fR()" 4
.IX Item "$obj->login()"
Establish a freshly smoked up connection ta tha \s-1POP3\s0 server, rockin username n' password.
.ie n .IP "$obj\->\fBsend\fR(\s-1SOCKET,\s0 data)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR(\s-1SOCKET,\s0 data)" 4
.IX Item "$obj->send(SOCKET, data)"
Send data ta tha indicated socket n' return tha straight-up original gangsta line read from
that socket.  Logs a error if either freestylin ta or readin from socket failed.
.Sp
This method do \fBnot\fR attempt ta reconnect or anything: if readin or
writin tha socket fails, suttin' is straight-up definitely wrong.
.ie n .IP "$obj\->\fBsendList\fR(\s-1SOCKET, COMMAND\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsendList\fR(\s-1SOCKET, COMMAND\s0)" 4
.IX Item "$obj->sendList(SOCKET, COMMAND)"
Sendz tha indicated \s-1COMMAND\s0 ta tha specified socket, n' retrieves the
response.  It returns a reference ta a array wit all tha lines that
were reveived afta tha straight-up original gangsta \f(CW\*(C`+OK\*(C'\fR line n' before tha end-of-message
delimita (a single dot on a line).  Returns \f(CW\*(C`undef\*(C'\fR
whenever suttin' has gone wrong.
.ie n .IP "$obj\->\fBsocket\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsocket\fR()" 4
.IX Item "$obj->socket()"
Returns a cold-ass lil connection ta tha \s-1POP3\s0 server n' shit.  If there was no connection yet,
it is ghon be pimped transparently.  If tha connection wit tha \s-1POP3\s0 server
was lost, it is ghon be reconnected n' tha assures dat internal
state shiznit (\s-1STAT\s0 n' \s-1UIDL\s0) is up-to-date up in tha object.
.Sp
If tha contact ta tha server was still present, or could be established,
an IO::Socket::INET object is returned. Y'all KNOW dat shit, muthafucka!  Else, \f(CW\*(C`undef\*(C'\fR is returned and
no further actions should be tried on tha object.
.ie n .IP "$obj\->\fBstatus\fR(\s-1SOCKET\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstatus\fR(\s-1SOCKET\s0)" 4
.IX Item "$obj->status(SOCKET)"
Update tha current statuz of folda on tha remote \s-1POP3\s0 server.
.SS "Server connection"
.IX Subsection "Server connection"
.ie n .IP "$obj\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.IX Item "$obj->findBinary(NAME [, DIRECTORIES])"
See \*(L"Server connection\*(R" up in Mail::Transport
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
See \*(L"Server connection\*(R" up in Mail::Transport
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
See \*(L"Server connection\*(R" up in Mail::Transport
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
Represent dis pop3 connection as \s-1URL.\s0
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Transport::POP3\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Transport::POP3->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Transport::POP3\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Transport::POP3->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Transport::POP3\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Transport::POP3->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot connect ta $host:$port fo' \s-1POP3: $\s0!" 4
.el .IP "Error: Cannot connect ta \f(CW$host:\fR$port fo' \s-1POP3: $\s0!" 4
.IX Item "Error: Cannot connect ta $host:$port fo' POP3: $!"
Unsuccesful up in connectin ta tha remote \s-1POP3\s0 server.
.IP "Error: Cannot git tha lyrics of pop3 via \fIlyrics()\fR" 4
.IX Item "Error: Cannot git tha lyrics of pop3 via lyrics()"
It aint possible ta retreive all lyrics on a remote \s-1POP3\s0 folder
at once: each shall be taken separately.  Da \s-1POP3\s0 folda will hide this
for yo thugged-out ass.
.IP "Error: Cannot re-connect reliably ta server which don't support \s-1UIDL.\s0" 4
.IX Item "Error: Cannot re-connect reliably ta server which don't support UIDL."
Da connection ta tha remote \s-1POP3\s0 was lost, n' cannot be re-established
because tha serverz protocol implementation lacks tha necessary shiznit.
.IP "Error: Cannot read \s-1POP3\s0 from socket: $!" 4
.IX Item "Error: Cannot read POP3 from socket: $!"
It aint possible ta read tha success statuz of tha previously given \s-1POP3\s0
command. Y'all KNOW dat shit, muthafucka!  Connection lost?
.IP "Error: Cannot write \s-1POP3\s0 ta socket: $@" 4
.IX Item "Error: Cannot write POP3 ta socket: $@"
It aint possible ta bust a protocol command ta tha \s-1POP3\s0 server n' shit.  Connection
lost?
.IP "Error: Could not authenticate rockin '$some' method." 4
.IX Item "Error: Could not authenticate rockin '$some' method."
Da authenication method ta git access ta tha \s-1POP3\s0 server did not result in
a connection. I aint talkin' bout chicken n' gravy biatch.  Maybe you need a gangbangin' finger-lickin' different authentication protocol, or your
username wit password is invalid.
.IP "Error: Could not authenticate rockin any login method." 4
.IX Item "Error: Could not authenticate rockin any login method."
No authentication method was explicitly prescribed, so both \s-1AUTH\s0 n' \s-1APOP\s0 were
tried. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat both failed. Y'all KNOW dat shit, muthafucka!  There is other authentication methods, which
are not defined by tha main \s-1POP3 RFC\s0 rfc1939.  These protocols is not
implemented yet.  Please contribute yo' implementation.
.IP "Error: \s-1POP3\s0 Could not do a \s-1STAT\s0" 4
.IX Item "Error: POP3 Could not do a STAT"
For some weird reason, tha server do not respond ta tha \s-1STAT\s0 call.
.IP "Error: \s-1POP3\s0 requires a username n' password." 4
.IX Item "Error: POP3 requires a username n' password."
No username and/or no password specified fo' dis \s-1POP3\s0 folder, although
these is obligatory parts up in tha protocol.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Server at $host:$port do not seem ta be rappin' \s-1POP3.\s0" 4
.el .IP "Error: Server at \f(CW$host:\fR$port do not seem ta be rappin' \s-1POP3.\s0" 4
.IX Item "Error: Server at $host:$port do not seem ta be rappin' POP3."
Da remote server did not respond ta a initial exchange of lyrics as is
expected by tha \s-1POP3\s0 protocol.  Da server has probably a gangbangin' finger-lickin' different
service on tha specified port.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
