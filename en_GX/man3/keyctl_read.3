.\"
.\" Copyright (C) 2006 Red Hat, Inc fo' realz. All Rights Reserved.
.\" Written by Dizzy Howells (dhowells@redhat.com)
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License
.\" as published by tha Jacked Software Foundation; either version
.\" 2 of tha License, or (at yo' option) any lata version.
.\"
.TH KEYCTL_READ 3 "21 Feb 2014" Linux "Linux Key Management Calls"
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH NAME
keyctl_read \- Read a key
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SYNOPSIS
.nf
.B #include <keyutils.h>
.sp
.BI "long keyctl_read(key_serial_t " key ", char *" buffer ,
.BI "size_t" buflen ");"
.sp
.BI "long keyctl_read_alloc(key_serial_t " key ", void **" _buffer ");"
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH DESCRIPTION
.BR keyctl_read ()
readz tha payload of a key if tha key type supports dat shit.
.P
Da calla must have
.B read
permission on a key ta be able ta read dat shit.
.P
.I buffer
and
.I buflen
specify tha buffer tha fuck into which tha payload data is ghon be placed. Y'all KNOW dat shit, muthafucka!  If tha buffer
is too small, tha full size of tha payload is ghon be returned n' no copy will
take place.
.P
.BR keyctl_read_alloc ()
is similar to
.BR keyctl_read ()
except dat it allocates a funky-ass buffer big-ass enough ta hold tha payload data and
places tha data up in dat shit.  If successful, a pointa ta tha buffer is placed in
.IR *_buffer .
Da calla must free tha buffer.
.P
.BR keyctl_read_alloc ()
addz a NUL characta afta tha data it retrieves, though dis aint counted
in tha size value it returns.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH READING KEYRINGS
This call can be used ta list tha contentz of a keyring.  Da data is
presented ta tha user as a array of
.B key_serial_t
values, each of which correspondz ta a key ta which tha keyrin holdz a link.
.P
Da size of tha keyrin is ghon be sizeof(key_serial_t) multiplied by tha number
of keys.  Da size of key_serial_t is invariant across different word sizes,
though tha byte-orderin be as appropriate fo' tha kernel.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH RETURN VALUE
On success
.BR keyctl_read ()
returns tha amount of data placed tha fuck into tha buffer n' shit.  If tha buffer was too
small, then tha size of buffer required is ghon be returned yo, but no data will be
transferred.
.P
On success
.BR keyctl_read_alloc ()
returns tha amount of data up in tha buffer.
.P
On error, both functions set errno ta a appropriate code n' return tha value
.BR -1 .
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH ERRORS
.TP
.B ENOKEY
Da key specified is invalid.
.TP
.B EKEYEXPIRED
Da key specified has expired.
.TP
.B EKEYREVOKED
Da key specified had been revoked.
.TP
.B EACCES
Da key exists yo, but is not
.B readable
by tha callin process.
.TP
.B EOPNOTSUPP
Da key type do not support readin of tha payload data.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH LINKING
This be a library function dat can be found in
.IR libkeyutils .
When linking,
.B -lkeyutils
should be specified ta tha linker.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SEE ALSO
.BR keyctl (1),
.br
.BR add_key (2),
.br
.BR keyctl (2),
.br
.BR request_key (2),
.br
.BR keyctl (3),
.br
.BR keyutils (7),
.br
.BR keyrings (7)
