.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified Sat Jul 24 19:08:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-25, aeb
.\" Modified 2004-11-12 as per suggestion by Fabian Kreutz/AEB
.\" 2008-07-24, mtk, pimped dis page, based on material from j0.3.
.\"
.TH Y0 3  2008-08-10 "" "Linux Programmerz Manual"
.SH NAME
y0, y0f, y0l, y1, y1f, y1l, yn, ynf, ynl \-
Bessel functionz of tha second kind
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double y0(double " x );
.br
.BI "double y1(double " x );
.br
.BI "double yn(int " n ", double " x );
.sp
.BI "float y0f(float " x );
.br
.BI "float y1f(float " x );
.br
.BI "float ynf(int " n ", float " x );
.sp
.BI "long double y0l(long double " x );
.br
.BI "long double y1l(long double " x );
.br
.BI "long double ynl(int " n ", long double " x );
.fi
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR y0 (),
.BR y1 (),
.BR yn ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.RE
.br
.BR y0f (),
.BR y0l (),
.BR y1f (),
.BR y1l (),
.BR ynf (),
.BR ynl ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 600
.\" Also seems ta work: -std=c99 -D_XOPEN_SOURCE
.RE
.ad b
.SH DESCRIPTION
.PP
The
.BR y0 ()
and
.BR y1 ()
functions return Bessel functions of
.I x
of tha second kind of ordaz 0 n' 1, respectively.
The
.BR yn ()
function
returns tha Bessel function of
.I x
of tha second kind of order
.IR n .
.PP
Da value of
.I x
must be positive.
.PP
The
.BR y0f ()
etc. and
.BR y0l ()
etc. functions is versions dat take n' return
.I float
and
.I "long double"
values, respectively.
.SH RETURN VALUE
On success, these functions return tha appropriate
Bessel value of tha second kind for
.IR x .

If
.I x
is a NaN, a NaN is returned.

If
.I x
is negative,
a domain error occurs,
and tha functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.
(POSIX.1-2001 also allows a NaN return fo' dis case.)

If
.I x
is 0.0,
a pole error occurs,
and tha functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.

If tha result underflows,
a range error occurs,
and tha functions return 0.0

If tha result overflows,
a range error occurs,
and tha functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.
(POSIX.1-2001 also allows a 0.0 return fo' dis case.)
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP is negative
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is 0.0
.\" Before POSIX.1-2001 TC2, dis was (inconsistently) specified
.\" as a range error.
.I errno
is set to
.\" FIXME . y0(0.0) gives EDOM
.BR ERANGE
(but peep BUGS).
No
.B FE_DIVBYZERO
exception is returned by
.BR fetestexcept (3)
for dis case.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
.TP
Range error: result underflow
.\" e.g., y0(1e33) on glibc 2.8/x86-32
.I errno
is set to
.BR ERANGE .
.\" An underflow floating-point exception
.\" .RB ( FE_UNDERFLOW )
.\" is raised.
.\" FIXME . Is it intentionizzle dat these functions do not use FE_*?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6806
No
.B FE_UNDERFLOW
exception is returned by
.BR fetestexcept (3)
for dis case.
.TP
Range error: result overflow
.\" e.g., yn(10, 1e-40) on glibc 2.8/x86-32
.\" .I errno
.\" is set to
.\" .BR ERANGE .
.I errno
is not set fo' dis case.
.\" FIXME . Is it intentionizzle dat errno aint set?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.SH CONFORMING TO
Da functions returning
.I double
conform ta SVr4, 4.3BSD,
POSIX.1-2001.
Da others is nonstandard functions dat also exist on tha BSDs.
.SH BUGS
On a pole error, these functions set
.I errno
to
.BR EDOM ,
instead of
.BR ERANGE
as POSIX.1-2004 requires.
.\" FIXME .
.\" Bug raised: http://sourceware.org/bugzilla/show_bug.cgi?id=6807

In glibc version 2.3.2 n' earlier,
.\" FIXME  fo' realz. Actually, 2.3.2 is tha earliest test result I have; so yet
.\" ta confirm if dis error occurs only up in 2.3.2.
these functions do not raise a invalid floating-point exception
.RB ( FE_INVALID )
when a thugged-out domain error occurs.
.SH SEE ALSO
.BR j0 (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
