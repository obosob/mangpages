.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PKCS7_sign 3"
.TH PKCS7_sign 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
PKCS7_sign \- create a PKCS#7 signedData structure
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/pkcs7.h>
\&
\& PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs, BIO *data, int flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIPKCS7_sign()\fR creates n' returns a PKCS#7 signedData structure. \fBsigncert\fR is
the certificate ta sign with, \fBpkey\fR is tha corresponsdin private key.
\&\fBcerts\fR be a optionizzle additionizzle set of certificates ta include up in tha PKCS#7
structure (for example any intermediate CAs up in tha chain).
.PP
Da data ta be signed is read from \s-1BIO \s0\fBdata\fR.
.PP
\&\fBflags\fR be a optionizzle set of flags.
.SH "NOTES"
.IX Header "NOTES"
Any of tha followin flags (ored together) can be passed up in tha \fBflags\fR
parameter.
.PP
Many S/MIME clients expect tha signed content ta include valid \s-1MIME\s0 headers. If
the \fB\s-1PKCS7_TEXT\s0\fR flag is set \s-1MIME\s0 headaz fo' type \fBtext/plain\fR is prepended
to tha data.
.PP
If \fB\s-1PKCS7_NOCERTS\s0\fR is set tha signerz certificate aint gonna be included up in the
\&\s-1PKCS7\s0 structure, tha signerz certificate must still be supplied up in the
\&\fBsigncert\fR parameta though cause I gots dem finger-lickin' chickens wit tha siz-auce. This can reduce tha size of tha signature if the
signers certificate can be obtained by other means: fo' example a previously
signed message.
.PP
Da data bein signed is included up in tha \s-1PKCS7\s0 structure, unless
\&\fB\s-1PKCS7_DETACHED\s0\fR is set up in which case it is omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is used fo' \s-1PKCS7\s0
detached signatures which is used up in S/MIME plaintext signed lyrics for
example.
.PP
Normally tha supplied content is translated tha fuck into \s-1MIME\s0 canonical format (as
required by tha S/MIME justifications) if \fB\s-1PKCS7_BINARY\s0\fR is set no translation
occurs. This option should be used if tha supplied data is up in binary format
otherwise tha translation will corrupt dat shit.
.PP
Da signedData structure includes nuff muthafuckin PKCS#7 autenticatedAttributes
includin tha signin time, tha PKCS#7 content type n' tha supported list of
ciphers up in a SMIMECapabilitizzles attribute. If \fB\s-1PKCS7_NOATTR\s0\fR is set then no
authenticatedAttributes is ghon be used. Y'all KNOW dat shit, muthafucka! If \fB\s-1PKCS7_NOSMIMECAP\s0\fR is set then just
the SMIMECapabilitizzles is omitted.
.PP
If present tha SMIMECapabilitizzles attribute indicates support fo' tha following
algorithms: triple \s-1DES, 128\s0 bit \s-1RC2, 64\s0 bit \s-1RC2, DES\s0 n' 40 bit \s-1RC2.\s0 If any of
these algorithms is disabled then it aint gonna be included.
.PP
If tha flags \fB\s-1PKCS7_STREAM\s0\fR is set then tha returned \fB\s-1PKCS7\s0\fR structure is
just initialized locked n loaded ta big-ass up tha signin operation. I aint talkin' bout chicken n' gravy biatch. Da signin is however
\&\fBnot\fR performed n' tha data ta be signed aint read from tha \fBdata\fR
parameter n' shit. Right back up in yo muthafuckin ass. Signin is deferred until afta tha data has been written. I aint talkin' bout chicken n' gravy biatch. In this
way data can be signed up in a single pass.
.PP
If tha \fB\s-1PKCS7_PARTIAL\s0\fR flag is set a partial \fB\s-1PKCS7\s0\fR structure is output to
which additionizzle signers n' capabilitizzles can be added before finalization.
.SH "NOTES"
.IX Header "NOTES"
If tha flag \fB\s-1PKCS7_STREAM\s0\fR is set tha returned \fB\s-1PKCS7\s0\fR structure is \fBnot\fR
complete n' outputtin its contents via a gangbangin' function dat do not properly
finalize tha \fB\s-1PKCS7\s0\fR structure will give unpredictable thangs up in dis biatch.
.PP
Several functions includin \fISMIME_write_PKCS7()\fR, \fIi2d_PKCS7_bio_stream()\fR,
\&\fIPEM_write_bio_PKCS7_stream()\fR finalize tha structure fo' realz. Alternatively finalization
can be performed by obtainin tha streamin \s-1ASN1 \s0\fB\s-1BIO\s0\fR directly using
\&\fIBIO_new_PKCS7()\fR.
.PP
If a signer is specified it will use tha default digest fo' tha signing
algorithm. This is \fB\s-1SHA1\s0\fR fo' both \s-1RSA\s0 n' \s-1DSA\s0 keys.
.PP
In OpenSSL 1.0.0 tha \fBcerts\fR, \fBsigncert\fR n' \fBpkey\fR parametas can all be
\&\fB\s-1NULL\s0\fR if tha \fB\s-1PKCS7_PARTIAL\s0\fR flag is set. One or mo' signers can be added
usin tha function \fB\f(BIPKCS7_sign_add_signer()\fB\fR. \fB\f(BIPKCS7_final()\fB\fR must also be
called ta finalize tha structure if streamin aint enabled. Y'all KNOW dat shit, muthafucka! Alternative
signin digests can also be specified rockin dis method.
.PP
In OpenSSL 1.0.0 if \fBsigncert\fR n' \fBpkey\fR is \s-1NULL\s0 then a cold-ass lil certificates only
PKCS#7 structure is output.
.PP
In versionz of OpenSSL before 1.0.0 tha \fBsigncert\fR n' \fBpkey\fR parametas must
\&\fB\s-1NOT\s0\fR be \s-1NULL.\s0
.SH "BUGS"
.IX Header "BUGS"
Some advanced attributes like fuckin counta signatures is not supported.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIPKCS7_sign()\fR returns either a valid \s-1PKCS7\s0 structure or \s-1NULL\s0 if a error
occurred. Y'all KNOW dat shit, muthafucka!  Da error can be obtained from \fIERR_get_error\fR\|(3).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIERR_get_error\fR\|(3), \fIPKCS7_verify\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIPKCS7_sign()\fR was added ta OpenSSL 0.9.5
.PP
Da \fB\s-1PKCS7_PARTIAL\s0\fR flag was added up in OpenSSL 1.0.0
.PP
Da \fB\s-1PKCS7_STREAM\s0\fR flag was added up in OpenSSL 1.0.0
