.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::Lyrics 3"
.TH MIME::Lyrics 3 "2013-11-14" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::Lyrics \- deal wit RFC 2047 encoded lyrics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Before readin further, you should peep MIME::Tools ta make shizzle that
you KNOW where dis module fits tha fuck into tha grand scheme of thangs.
Go on, do it now, nahmeean?  I be bout ta wait.
.PP
Ready?  Ok...
.PP
.Vb 1
\&    use MIME::Lyrics qw(:all);
\&
\&    ### Decode tha strang tha fuck into another string, forgettin tha charsets:
\&    $decoded = decode_mimewords(
\&          \*(AqTo: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>\*(Aq,
\&          );
\&
\&    ### Split strang tha fuck into array of decoded [DATA,CHARSET] pairs:
\&    @decoded = decode_mimewords(
\&          \*(AqTo: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>\*(Aq,
\&          );
\&
\&    ### Encode a single unsafe word:
\&    $encoded = encode_mimeword("\exABFran\exE7ois\exBB");
\&
\&    ### Encode a string, tryin ta find tha unsafe lyrics inside it:
\&    $encoded = encode_mimewords("Me n' \exABFran\exE7ois\exBB up in town");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Fellow Gangstas, you probably won't know what tha fuck tha hell dis module
is for. Shiiit, dis aint no joke.  Europeans, Russians, et al, you probably do.  \f(CW\*(C`:\-)\*(C'\fR.
.PP
For example, herez a valid \s-1MIME\s0 header you might get:
.PP
.Vb 6
\&      From: =?US\-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>
\&      To: =?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>
\&      CC: =?ISO\-8859\-1?Q?Andr=E9_?= Pirard <PIRARD@vm1.ulg.ac.be>
\&      Subject: =?ISO\-8859\-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=
\&       =?ISO\-8859\-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=
\&       =?US\-ASCII?Q?.._cool!?=
.Ve
.PP
Da fieldz basically decode ta (sorry, I can only approximate the
Latin charactas wit 7 bit sequences /o n' 'e):
.PP
.Vb 4
\&      From: Keith Moore <moore@cs.utk.edu>
\&      To: Keld J/orn Simonsen <keld@dkuug.dk>
\&      CC: Andr\*(Aqe  Pirard <PIRARD@vm1.ulg.ac.be>
\&      Subject: If you can read dis you KNOW tha example... cool!
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.IP "decode_mimewordz \s-1ENCODED\s0" 4
.IX Item "decode_mimewordz ENCODED"
\&\fIFunction.\fR
Go all up in tha strang lookin fo' \s-1RFC\s0 2047\-style \*(L"Q\*(R"
(quoted-printable, sort of) or \*(L"B\*(R" (base64) encoding, n' decode em.
.Sp
\&\fBIn a array context,\fR splits tha \s-1ENCODED\s0 strang tha fuck into a list of decoded
\&\f(CW\*(C`[DATA, CHARSET]\*(C'\fR pairs, n' returns dat list.  Unencoded
data is returned up in a 1\-element array \f(CW\*(C`[DATA]\*(C'\fR, givin a effective
\&\s-1CHARSET\s0 of \f(CW\*(C`undef\*(C'\fR.
.Sp
.Vb 4
\&    $enc = \*(Aq=?ISO\-8859\-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>\*(Aq;
\&    foreach (decode_mimewords($enc)) {
\&        print "", ($_\->[1] || \*(AqUS\-ASCII\*(Aq), ": ", $_\->[0], "\en";
\&    }
.Ve
.Sp
\&\fBIn a scalar context,\fR joins tha \*(L"data\*(R" elementz of tha above
list together, n' returns dis shit.  \fIWarning: dis is shiznit-lossy,\fR
and probably \fInot\fR what tha fuck you want yo, but if you know dat all charsets
in tha \s-1ENCODED\s0 strang is identical, it might be useful ta yo thugged-out ass.
(Before you use this, please peep \*(L"unmime\*(R" up in MIME::WordDecoder,
which is probably what tha fuck you want.)
.Sp
In tha event of a syntax error, $@ is ghon be set ta a thugged-out description
of tha error yo, but parsin will continue as dopest as possible (so as to
get \fIsomething\fR back when decodin headers).
$@ is ghon be false if no error was detected.
.Sp
Any arguments past tha \s-1ENCODED\s0 strang is taken ta define a hash of options:
.IP "encode_mimeword \s-1RAW,\s0 [\s-1ENCODING\s0], [\s-1CHARSET\s0]" 4
.IX Item "encode_mimeword RAW, [ENCODING], [CHARSET]"
\&\fIFunction.\fR
Encode a single \s-1RAW \s0\*(L"word\*(R" dat has unsafe characters.
Da \*(L"word\*(R" is ghon be encoded up in its entirety.
.Sp
.Vb 2
\&    ### Encode "<<Franc,ois>>":
\&    $encoded = encode_mimeword("\exABFran\exE7ois\exBB");
.Ve
.Sp
Yo ass may specify tha \s-1ENCODING \s0(\f(CW"Q"\fR or \f(CW"B"\fR), which defaults ta \f(CW"Q"\fR.
Yo ass may specify tha \s-1CHARSET,\s0 which defaults ta \f(CW\*(C`iso\-8859\-1\*(C'\fR.
.IP "encode_mimewordz \s-1RAW,\s0 [\s-1OPTS\s0]" 4
.IX Item "encode_mimewordz RAW, [OPTS]"
\&\fIFunction.\fR
Given a \s-1RAW\s0 string, try ta find n' encode all \*(L"unsafe\*(R" sequences
of characters:
.Sp
.Vb 2
\&    ### Encode a strang wit some unsafe "words":
\&    $encoded = encode_mimewords("Me n' \exABFran\exE7ois\exBB");
.Ve
.Sp
Returns tha encoded string.
Any arguments past tha \s-1RAW\s0 strang is taken ta define a hash of options:
.RS 4
.IP "Charset" 4
.IX Item "Charset"
Encode all unsafe shiznit wit dis charset.  Default is '\s-1ISO\-8859\-1\s0',
a.k.a. \*(L"Latin\-1\*(R".
.IP "Encoding" 4
.IX Item "Encoding"
Da encodin ta use, \f(CW"q"\fR or \f(CW"b"\fR.  Da default is \f(CW"q"\fR.
.RE
.RS 4
.Sp
\&\fBWarning:\fR dis be a quick-and-dirty solution, intended fo' character
sets which overlap \s-1ASCII.  \s0\fBIt do not comply wit tha \s-1RFC 2047\s0
rulez regardin tha use of encoded lyrics up in message headers\fR.
Yo ass may wanna roll yo' own variant,
usin \f(CW\*(C`encode_mimeword()\*(C'\fR, fo' yo' application.
\&\fIThanks ta Jan Kasprzak fo' remindin me bout dis problem.\fR
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::Base64, MIME::QuotedPrint, MIME::Tools
.PP
For other implementationz of dis or similar functionalitizzle (particularly, ones
with proper \s-1UTF8\s0 support), see:
.PP
Encode::MIME::Header, MIME::EncWords, MIME::AltWords
.PP
At some future point, one of these implementations will likely replace
MIME::Lyrics n' MIME::Lyrics will become deprecated.
.SH "NOTES"
.IX Header "NOTES"
Exports its principle functions by default, up in keepin with
MIME::Base64 n' MIME::QuotedPrint.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eryq (\fIeryq@zeegee.com\fR), ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
Dizzy F. Right back up in yo muthafuckin ass. Skoll (dfs@roaringpenguin.com) http://www.roaringpenguin.com
.PP
All muthafuckin rights reserved. Y'all KNOW dat shit, muthafucka!  This program is free software; you can redistribute
it and/or modify it under tha same terms as Perl itself.
.PP
Thanks also to...
.PP
.Vb 5
\&      Kent Boortz        For providin tha idea, n' tha baseline
\&                         RFC\-1522\-decodin code!
\&      KJJ at PrimeNet    For requestin dat dis be split into
\&                         its own module.
\&      Stephane Barizien  For reportin a nasty bug.
.Ve
