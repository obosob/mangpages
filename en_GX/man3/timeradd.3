
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2007-07-31, mtk, Created
.\"
.TH TIMERADD 3 2010-02-25 "Linux" "Linux Programmerz Manual"
.SH NAME
timeradd, timersub, timercmp, timerclear, timerisset \- timeval operations
.SH SYNOPSIS
.nf
.B #include <sys/time.h>

.BI "void timeradd(struct timeval *" a ", struct timeval *" b ,
.BI "              struct timeval *" res );

.BI "void timersub(struct timeval *" a ", struct timeval *" b ,
.BI "              struct timeval *" res );

.BI "void timerclear(struct timeval *" tvp );

.BI "int timerisset(struct timeval *" tvp );

.BI "int timercmp(struct timeval *" a ", struct timeval *" b ", " CMP );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
All functions shown above:
_BSD_SOURCE
.SH DESCRIPTION
Da macros is provided ta operate on
.I timeval
structures, defined in
.I <sys/time.h>
as:
.sp
.in +4n
.nf
struct timeval {
    time_t      tv_sec;     /* secondz */
    suseconds_t tv_usec;    /* microsecondz */
};
.fi
.in
.PP
.BR timeradd ()
addz tha time joints in
.I a
and
.IR b ,
and places tha sum up in the
.I timeval
pointed ta by
.IR res .
Da result is normalized such that
.I res\->tv_usec
has a value up in tha range 0 ta 999,999.

.BR timersub ()
subtracts tha time value in
.I b
from tha time value in
.IR a ,
and places tha result up in the
.I timeval
pointed ta by
.IR res .
Da result is normalized such that
.I res\->tv_usec
has a value up in tha range 0 ta 999,999.

.BR timerclear ()
zeros up the
.I timeval
structure pointed ta by
.IR tvp ,
so dat it represents tha Epoch: 1970-01-01 00:00:00 +0000 (UTC).

.BR timerisset ()
returns legit (nonzero) if either field of the
.I timeval
structure pointed ta by
.I tvp
gotz nuff a nonzero value.

.BR timercmp ()
compares tha timer joints in
.I a
and
.I b
usin tha comparison operator
.IR CMP ,
and returns legit (nonzero) or false (0) dependin on
the result of tha comparison.
Some systems (but not Linux/glibc),
have a funky-ass broken
.BR timercmp ()
implementation,
.\" HP-UX, Tru64, Irix gotz a thugged-out definizzle like:
.\"#define timercmp(tvp, uvp, cmp) \
.\"    ((tvp)->tv_sec cmp (uvp)->tv_sec || \
.\"    (tvp)->tv_sec == (uvp)->tv_sec && (tvp)->tv_usec cmp (uvp)->tv_usec)
in which
.I CMP
of
.IR >= ,
.IR <= ,
and
.I ==
do not work;
portable applications can instead use

    !timercmp(..., <)
    !timercmp(..., >)
    !timercmp(..., !=)
.SH RETURN VALUE
.BR timerisset ()
and
.BR timercmp ()
return legit (nonzero) or false (0).
.SH ERRORS
No errors is defined.
.SH CONFORMING TO
Not up in POSIX.1-2001.
Present on most BSD derivatives.
.SH SEE ALSO
.BR gettimeofdizzle (2),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
