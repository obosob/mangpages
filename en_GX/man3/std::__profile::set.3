" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::__profile::set< _Key, _Compare, _Allocator > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits set< _Key, _Compare, _Allocator >\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Allocator \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef _Base::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::const_pointa \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Base::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef 
.br
_Base::const_reverse_iterator \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Base::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Compare \fBkey_compare\fP"
.br
.ti -1c
.RI "typedef _Key \fBkey_type\fP"
.br
.ti -1c
.RI "typedef _Base::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Base::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Base::reverse_iterator \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Compare \fBvalue_compare\fP"
.br
.ti -1c
.RI "typedef _Key \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBset\fP (const _Compare &__comp=_Compare(), const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fBset\fP (_InputIterator __first, _InputIterator __last, const _Compare &__comp=_Compare(), const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBset\fP (const \fBset\fP &__x)"
.br
.ti -1c
.RI "\fBset\fP (const \fB_Base\fP &__x)"
.br
.ti -1c
.RI "\fBset\fP (\fBset\fP &&__x) noexcept(\fBis_nothrow_copy_constructible\fP< _Compare >::value)"
.br
.ti -1c
.RI "\fBset\fP (\fBinitializer_list\fP< value_type > __l, const _Compare &__comp=_Compare(), const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fB_Base\fP & \fB_M_base\fP () noexcept"
.br
.ti -1c
.RI "const \fB_Base\fP & \fB_M_base\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "const_reverse_iterator \fBcrbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_reverse_iterator \fBcrend\fP () const noexcept"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fBstd::pair\fP< iterator, bool > \fBemplace\fP (_Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> iterator \fBemplace_hint\fP (const_iterator __pos, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "iterator \fBend\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBend\fP () const noexcept"
.br
.ti -1c
.RI "\fBstd::pair\fP< iterator, iterator > \fBequal_range\fP (const key_type &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< const_iterator, 
.br
const_iterator > \fBequal_range\fP (const key_type &__x) const "
.br
.ti -1c
.RI "iterator \fBerase\fP (const_iterator __position)"
.br
.ti -1c
.RI "size_type \fBerase\fP (const key_type &__x)"
.br
.ti -1c
.RI "iterator \fBerase\fP (const_iterator __first, const_iterator __last)"
.br
.ti -1c
.RI "iterator \fBfind\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBfind\fP (const key_type &__x) const "
.br
.ti -1c
.RI "\fBstd::pair\fP< iterator, bool > \fBinsert\fP (const value_type &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< iterator, bool > \fBinsert\fP (value_type &&__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const_iterator __position, const value_type &__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const_iterator __position, value_type &&__x)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> void \fBinsert\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "iterator \fBlower_bound\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBlower_bound\fP (const key_type &__x) const "
.br
.ti -1c
.RI "\fBset\fP & \fBoperator=\fP (const \fBset\fP &__x)"
.br
.ti -1c
.RI "\fBset\fP & \fBoperator=\fP (\fBset\fP &&__x)"
.br
.ti -1c
.RI "\fBset\fP & \fBoperator=\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "reverse_iterator \fBrbegin\fP () noexcept"
.br
.ti -1c
.RI "const_reverse_iterator \fBrbegin\fP () const noexcept"
.br
.ti -1c
.RI "reverse_iterator \fBrend\fP () noexcept"
.br
.ti -1c
.RI "const_reverse_iterator \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBswap\fP (\fBset\fP &__x)"
.br
.ti -1c
.RI "iterator \fBupper_bound\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBupper_bound\fP (const key_type &__x) const "
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Allocator = std::allocator<_Key>>class std::__profile::set< _Key, _Compare, _Allocator >"
Class std::set wrapper wit performizzle instrumentation\&. 
.PP
Definizzle at line 41 of file profile/set\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
