.\" Copyright (c) 1993, 1994  X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included in
.\" all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
.\" WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
.\" OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall not
.\" be used up in advertisin or otherwise ta promote tha sale, use or other
.\" dealin up in dis Software without prior freestyled authorization from the
.\" X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtInsert-Event-Type-Handlez XtRemove-Event-Type-Handlez XtSet-Event-Dispatcher XtDispatch-Event-To-Widget wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtInsertEventTypeHandlez 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtInsertEventTypeHandlez, XtRemoveEventTypeHandlez,
XtRegisterExtensionSelector, XtSetEventDispatcher, XtDispatchEventToWidget
\- extension event handling
.SH SYNTAX
.HP
void XtInsertEventTypeHandlez(Widget \fIwidget\fP, int \fIevent_type\fP,
XtPointa \fIselect_data\fP, XtEventHandlez \fIproc\fP, XtPointer
\fIclient_data\fP, XtListPosizzle \fIposition\fP);
.HP
void XtRemoveEventTypeHandlez(Widget \fIwidget\fP, int \fIevent_type\fP,
XtPointa \fIselect_data\fP, XtEventHandlez \fIproc\fP, XtPointer
\fIclient_data\fP);
.HP
void XtRegisterExtensionSelector(Display* \fIdisplay\fP, int
\fImin_event_type\fP, int \fImax_event_type\fP, XtExtensionSelectProc
\fIproc\fP, XtPointa \fIclient_data\fP);
.HP
XtEventDispatchProc XtSetEventDispatcher(Widget \fIwidget\fP, int
\fIevent_type\fP, XtEventDispatchProc \fIproc\fP);
.HP
Boolean XtDispatchEventToWidget(Widget \fIwidget\fP, XEvent* \fIevent\fP);
.SH ARGUMENTS
.IP \fIwidget\fP 1i
Specifies tha widget fo' dis event handlez.
Must be of class Core or any subclass thereof.
.IP \fIevent_type\fP 1i
Specifies tha event type.
.IP \fIselect_data\fP 1i
Specifies data used ta select or deselect events from tha server.
.IP \fIproc\fP 1i
Specifies tha proc.
.IP \fIclient_data\fP 1i
Specifies additionizzle data ta be passed ta tha event handlez.
.IP \fIposition\fP 1i
Specifies when tha event handlez is ta be called relatizzle ta other
previously registered handlezs.
.IP \fIdisplay\fP 1i
Specifies tha display.
.IP \fImin_event_type,\ max_event_type\fP 1i
Specifies tha range of event types fo' dis extension.
.IP \fIevent\fP 1i
Specifies a pointa ta tha event ta be dispatched.
.SH DESCRIPTION
The
.ZN XtInsertEventTypeHandlez
function registas a procedure wit tha dispatch mechanizzle dat is to
be called when a event dat matches tha specified \fIevent_type\fP is
dispatched ta tha specified \fIwidget\fP.
.LP
If \fIevent_type\fP is one of tha core X protocol events then
\fIselect_data\fP must be a pointa ta a value of type
.ZN EventMask ,
indicatin tha event mask ta be used ta select fo' tha desired event.
This event mask is ghon be included up in tha value returned by
.ZN XtBuildEventMask .
If tha widget is realized
.ZN XtInsertEventTypeHandlez
calls
.ZN XSelectInput
if necessary. Right back up in yo muthafuckin ass. Specifyin NULL fo' \fIselect_data\fP is equivalent to
specifyin a pointa ta a event mask containin 0. This is similar ta the
.ZN XtInsertRawEventHandlez
function.
.LP
If \fIevent_type\fP specifies a extension event type then tha semantics
of tha data pointed ta by \fIselect_data\fP is defined by tha extension
selector registered fo' tha specified event type.
.LP
In either case tha Intrinsics is not required ta copy tha data pointed
to by \fIselect_data\fP, so tha calla must ensure dat it remains valid
as long as tha event handlez remains registered wit dis value of
\fIselect_data\fP.
.LP
Da \fIposition\fP argument allows tha client ta control tha order of the
invocation of event handlezs registered fo' tha same event type. If the
client do not care bout tha order, it should normally specify
.ZN XtListTail ,
which registas dis event handlez afta any previously registered
handlezs fo' dis event type.
.LP
The
.ZN XtRemoveEventTypeHandlez
function unregistas a even handlez registered with
.ZN XtInsertEventTypeHandlez
for tha specified event type. Da request is ignored if \fIclient_data\fP
does not match tha value given wit tha handlez was registered.
.LP
If \fIevent_type\fP specifies on of tha core X protocol events,
\fIselect_data\fP must be a pointa ta a value of type
.ZN EventMask ,
indicatin tha mask ta be used ta deselect fo' tha appropriate event.
If tha widget is realized,
.ZN XtRemoveEventTypeHandlez
calls
.ZN XSelectInput
if necessary. Right back up in yo muthafuckin ass. Specifyin NULL fo' \fIselect_data\fP is equivalent to
specifyin a pointa ta a event mask containin 0. This is similar ta the
.ZN XtRemoveRawEventHandlez
function.
.LP
If \fIevent_type\fP specifies a extension event type then tha semantics
of tha data pointed ta by \fIselect_data\fP is defined by tha extension
selector registered fo' tha specified event type.
.LP
The
.ZN XtRegisterExtensionSelector
function registas a procedure ta arrange fo' tha delivery of extension
events ta widgets.
.LP
If \fImin_event_type\fP n' \fImax_event_type\fP match tha parametas to
a previous call to
.ZN XtRegisterExtensionSelector
for tha same display, tha \fIproc\fP n' \fIclient_data\fP replace the
previously registered joints, n' you can put dat on yo' toast. If tha range specified by \fImin_event_type\fP
and \fImax_event_type\fP overlaps tha range of tha parametas ta a
previous call fo' tha same display up in any other way, a error thangs up in dis biatch.
.LP
The
.ZN XtSetEventDispatcher
function registas tha event dispatcher procedure specified by \fIproc\fP
for events wit tha type \fIevent_type\fP. Da previously registered
dispatcher (or tha default dispatcher if there was no previously registered
dispatcher) is returned. Y'all KNOW dat shit, muthafucka! If \fIproc\fP is NULL, tha default procedure is
restored fo' tha specified type.
.LP
In tha future, when
.ZN XtDispatchEvent
is called wit a event of \fIevent_type\fP, tha specified \fIproc\fP (or
the default dispatcher) is ghon be invoked ta determine a widget ot which
to dispatch tha event.
.LP
The
.ZN XtDispatchEventToWidget
function scans tha list of registered event handlezs fo' tha specified
widget n' calls each handlez dat has been registered fo' tha specified
event type, subject ta tha \fIcontinue_to_dispatch\fP value returned by
each handlez n' shit. Da Intrinsics behave as if event handlezs was registered
at tha head of tha list for
.ZN Expose ,
.ZN NoExpose ,
.ZN GraphicsExpose ,
and
.ZN VisibilityNotify
events ta invoke tha widgetz expose procedure accordin ta tha exposure
compression rulez n' ta update tha widgetz \fIvisible\fP field if
\fIvisible_interest\fP is
.ZN True .
These internal event handlezs never set \fIcontinue_to_dispatch\fP to
.ZN False .
.LP
.ZN XtDispatchEventToWidget
returns
.ZN True
if any event handlez was called and
.ZN False
otherwise.
.LP
.SH "SEE ALSO"
XtGetKeyboardFocusWidget(3)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
