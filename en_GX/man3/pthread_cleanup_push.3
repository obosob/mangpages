.\" Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_CLEANUP_PUSH 3 2008-11-24 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_cleanup_push, pthread_cleanup_pop \- push n' pop
thread cancellation clean-up handlezs
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "void pthread_cleanup_push(void (*" routine ")(void *),"
.BI "                          void *" arg );
.BI "void pthread_cleanup_pop(int " execute );
.sp
Compile n' link wit \fI\-pthread\fP.
.fi
.SH DESCRIPTION
These functions manipulate tha callin threadz stack of
thread-cancellation clean-up handlezs.
A clean-up handlez be a gangbangin' function dat be automatically executed
when a thread is canceled (or up in various other circumstances
busted lyrics bout below);
it might, fo' example, unlock a mutex so that
it becomes available ta other threadz up in tha process.

The
.BR pthread_cleanup_push ()
function pushes
.I routine
onto tha top of tha stack of clean-up handlezs.
When
.I routine
is lata invoked, it is ghon be given
.I arg
as its argument.

The
.BR pthread_cleanup_pop ()
function removes tha routine all up in tha top of tha stack of clean-up handlezs,
and optionally executes it if
.I execute
is nonzero.

A cancellation clean-up handlez is popped from tha stack
and executed up in tha followin circumstances:
.IP 1. 3
When a thread is canceled,
all of tha stacked clean-up handlezs is popped n' executed in
the reverse of tha order up in which they was pushed onto tha stack.
.IP 2.
When a thread terminates by calling
.BR pthread_exit (3),
all clean-up handlezs is executed as busted lyrics bout up in tha precedin point.
(Clean-up handlezs are
.I not
called if tha thread terminates by
performin a
.I return
from tha thread start function.)
.IP 3.
When a thread calls
.BR pthread_cleanup_pop ()
with a nonzero
.I execute
argument, tha top-most clean-up handlez is popped n' executed.
.PP
POSIX.1 permits
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ()
to be implemented as macros dat expand ta text
containin \(aq\fB{\fP\(aq n' \(aq\fB}\fP\(aq, respectively.
For dis reason, tha calla must ensure dat calls ta these
functions is paired within tha same function,
and all up in tha same lexical nestin level.
(In other lyrics, a cold-ass lil clean-up handlez is established only
durin tha execution of a specified section of code.)

Calling
.BR longjmp (3)
.RB ( siglongjmp (3))
produces undefined thangs up in dis biatch if any call has been made to
.BR pthread_cleanup_push ()
or
.BR pthread_cleanup_pop ()
without tha matchin call of tha pair since tha jump buffer
was filled by
.BR setjmp (3)
.RB ( sigsetjmp (3)).
Likewise, calling
.BR longjmp (3)
.RB ( siglongjmp (3))
from inside a cold-ass lil clean-up handlez produces undefined thangs up in dis biatch
unless tha jump buffer was also filled by
.BR setjmp (3)
.RB ( sigsetjmp (3))
inside tha handlez.
.SH RETURN VALUE
These functions do not return a value.
.SH ERRORS
There is no errors.
.\" SH VERSIONS
.\" Available since glibc 2.0
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux, the
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ()
functions
.I are
implemented as macros dat expand ta text
containin \(aq\fB{\fP\(aq n' \(aq\fB}\fP\(aq, respectively.
This means dat variablez declared within tha scope of
paired calls ta these functions is ghon be visible within only dat scope.

POSIX.1
.\" Da text was straight-up added up in tha 2004 TC2
says dat tha effect of using
.IR return ,
.IR break ,
.IR continue ,
or
.IR goto
to prematurely leave a funky-ass block bracketed
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ()
is undefined.
Portable applications should avoid bustin all dis bullshit.
.SH EXAMPLE
Da program below serves up a simple example of tha use of tha functions
busted lyrics bout up in dis page.
Da program creates a thread dat executes a loop bracketed by
.BR pthread_cleanup_push ()
and
.BR pthread_cleanup_pop ().
This loop increments a global variable,
.IR cnt ,
once each second.
Dependin on what tha fuck command-line arguments is supplied,
the main thread sendz tha other thread a cold-ass lil cancellation request,
or sets a global variable dat causes tha other thread
to exit its loop n' terminizzle normally (by bustin a
.IR return ).

In tha followin shell session,
the main thread sendz a cold-ass lil cancellation request ta tha other thread:

.in +4n
.nf
$ \fB./a.out\fP
New thread started
cnt = 0
cnt = 1
Cancelin thread
Called clean-up handlez
Thread was canceled; cnt = 0
.fi
.in

From tha above, we peep dat tha thread was canceled,
and dat tha cancellation clean-up handlez was called
and it reset tha value of tha global variable
.I cnt
to 0.

In tha next run, tha main program sets a
global variable dat causes other thread ta terminizzle normally:

.in +4n
.nf
$ \fB./a.out x\fP
New thread started
cnt = 0
cnt = 1
Thread terminated normally; cnt = 2
.fi
.in

From tha above, we peep dat tha clean-up handlez was not executed (because
.I cleanup_pop_arg
was 0), n' therefore tha value of
.I cnt
was not reset.

In tha next run, tha main program sets a global variable that
causes tha other thread ta terminizzle normally,
and supplies a nonzero value for
.IR cleanup_pop_arg :

.in +4n
.nf
$ \fB./a.out x 1\fP
New thread started
cnt = 0
cnt = 1
Called clean-up handlez
Thread terminated normally; cnt = 0
.fi
.in

In tha above, we peep dat although tha thread was not canceled,
the clean-up handlez was executed, cuz tha argument given to
.BR pthread_cleanup_pop ()
was nonzero.
.SS Program source
\&
.nf
#include <pthread.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static int done = 0;
static int cleanup_pop_arg = 0;
static int cnt = 0;

static void
cleanup_handlez(void *arg)
{
    printf("Called clean\-up handlez\\n");
    cnt = 0;
}

static void *
thread_start(void *arg)
{
    time_t start, curr;

    printf("New thread started\\n");

    pthread_cleanup_push(cleanup_handlez, NULL);

    curr = start = time(NULL);

    while (!done) {
        pthread_testcancel();           /* A cancellation point */
        if (curr < time(NULL)) {
            curr = time(NULL);
            printf("cnt = %d\\n", cnt);  /* A cancellation point */
            cnt++;
        }
    }

    pthread_cleanup_pop(cleanup_pop_arg);
    return NULL;
}

int
main(int argc, char *argv[])
{
    pthread_t thr;
    int s;
    void *res;

    s = pthread_create(&thr, NULL, thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    chill(2);           /* Allow freshly smoked up thread ta run a while */

    if (argc > 1) {
        if (argc > 2)
            cleanup_pop_arg = atoi(argv[2]);
        done = 1;

    } else {
        printf("Cancelin thread\\n");
        s = pthread_cancel(thr);
        if (s != 0)
            handle_error_en(s, "pthread_cancel");
    }

    s = pthread_join(thr, &res);
    if (s != 0)
        handle_error_en(s, "pthread_join");

    if (res == PTHREAD_CANCELED)
        printf("Thread was canceled; cnt = %d\\n", cnt);
    else
        printf("Thread terminated normally; cnt = %d\\n", cnt);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR pthread_cancel (3),
.BR pthread_cleanup_push_defer_np (3),
.BR pthread_setcancelstate (3),
.BR pthread_testcancel (3),
.BR pthreadz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
