
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH TSEARCH 3  2012-08-03 "GNU" "Linux Programmerz Manual"
.SH NAME
tsearch, tfind, tdelete, twalk, tdestroy \- manage a funky-ass binary tree
.SH SYNOPSIS
.nf
.B #include <search.h>
.sp
.BI "void *tsearch(const void *" key ", void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void *tfind(const void *" key ", const void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void *tdelete(const void *" key ", void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void twalk(const void *" root ", void (*" action ")(const void *" nodep ,
.BI "                                   const VISIT " which ,
.BI "                                   const int " depth "));"
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <search.h>
.sp
.BI "void tdestroy(void *" root ", void (*" free_node ")(void *" nodep ));
.fi
.SH DESCRIPTION
.BR tsearch (),
.BR tfind (),
.BR twalk (),
and
.BR tdelete ()
manage a
binary tree.
They is generalized from Knuth (6.2.2) Algorithm T.
Da first field up in each node of tha tree be a pointa ta the
correspondin data item.
(Da callin program must store tha actual data.)
.IR compar
points ta a cold-ass lil comparison routine, which takes
pointas ta two items.
It should return a integer which is negative,
zero, or positive, dependin on whether tha straight-up original gangsta item is less than,
equal to, or pimped outa than tha second.
.PP
.BR tsearch ()
searches tha tree fo' a item.
.IR key
points ta tha item ta be searched for.
.IR rootp
points ta a variable which points ta tha root of tha tree.
If tha tree is empty,
then tha variable that
.IR rootp
points ta should be set ta NULL.
If tha item is found up in tha tree, then
.BR tsearch ()
returns a pointer
to dat shit.
If it aint found, then
.BR tsearch ()
addz it, n' returns a
pointa ta tha newly added item.
.PP
.BR tfind ()
is like
.BR tsearch (),
except dat if tha item is not
found, then
.BR tfind ()
returns NULL.
.PP
.BR tdelete ()
deletes a item from tha tree.
Its arguments is tha same as for
.BR tsearch ().
.PP
.BR twalk ()
performs depth-first, left-to-right traversal of a funky-ass binary
tree.
.IR root
points ta tha startin node fo' tha traversal.
If dat node aint tha root, then only part of tha tree is ghon be hit up.
.BR twalk ()
calls tha user function
.IR action
each time a node is
visited (that is, three times fo' a internal node, n' once fo' a
leaf).
.IR action ,
in turn, takes three arguments.
Da first argument be a pointa ta tha node bein hit up.
Da structure of tha node is unspecified,
but it is possible ta cast tha pointa ta a pointer-to-pointer-to-element
in order ta access tha element stored within tha node.
Da application must not modify tha structure pointed ta by dis argument.
Da second argument be a integer which
takes one of tha joints
.BR preorder ,
.BR postorder ,
or
.BR endorder
dependin on whether dis is tha first, second, or
third visit ta tha internal node,
or tha value
.BR leaf
if dis is tha single visit ta a leaf node.
(These symbols is defined in
.IR <search.h> .)
Da third argument is tha depth of tha node;
the root node has depth zero.
.PP
(Mo' commonly,
.BR preorder ,
.BR postorder ,
and
.BR endorder
are known as
.BR preorder ,
.BR inorder ,
and
.BR postorder :
before visitin tha children, afta tha straight-up original gangsta n' before tha second,
and afta visitin tha lil' thugs.
Thus, tha chizzle of name
.BR post\%order
is rather confusing.)
.PP
.BR tdestroy ()
removes tha whole tree pointed ta by
.IR root ,
freein all resources allocated by the
.BR tsearch ()
function.
For tha data up in each tree node tha function
.IR free_node
is called.
Da pointa ta tha data is passed as tha argument ta tha function.
If no such work is necessary,
.IR free_node
must point ta a gangbangin' function
fuckin wit nothing.
.SH RETURN VALUE
.BR tsearch ()
returns a pointa ta a matchin item up in tha tree, or to
the newly added item, or NULL if there was insufficient memory
to add tha item.
.BR tfind ()
returns a pointa ta tha item, or
NULL if no match is found.
If there be multiple elements dat match tha key,
the element returned is unspecified.
.PP
.BR tdelete ()
returns a pointa ta tha parent of tha item deleted, or
NULL if tha item was not found.
.PP
.BR tsearch (),
.BR tfind (),
and
.BR tdelete ()
also
return NULL if
.IR rootp
was NULL on entry.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
Da function
.BR tdestroy ()
is a GNU extension.
.SH NOTES
.BR twalk ()
takes a pointa ta tha root, while tha other functions
take a pointa ta a variable which points ta tha root.
.PP
.BR tdelete ()
frees tha memory required fo' tha node up in tha tree.
Da user is responsible fo' freein tha memory fo' tha corresponding
data.
.PP
Da example program dependz on tha fact that
.BR twalk ()
makes no
further reference ta a node afta callin tha user function with
argument "endorder" or "leaf".
This works wit tha GNU library
implementation yo, but aint up in tha System V documentation.
.SH EXAMPLE
Da followin program bangs twelve random numbers tha fuck into a funky-ass binary
tree, where duplicate numbers is collapsed, then prints tha numbers
in order.
.sp
.nf
#define _GNU_SOURCE     /* Expose declaration of tdestroy() */
#include <search.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

void *root = NULL;

void *
xmalloc(unsigned n)
{
    void *p;
    p = malloc(n);
    if (p)
        return p;
    fprintf(stderr, "insufficient memory\\n");
    exit(EXIT_FAILURE);
}

int
compare(const void *pa, const void *pb)
{
    if (*(int *) pa < *(int *) pb)
        return \-1;
    if (*(int *) pa > *(int *) pb)
        return 1;
    return 0;
}

void
action(const void *nodep, const VISIT which, const int depth)
{
    int *datap;

    switch (which) {
    case preorder:
        break;
    case postorder:
        datap = *(int **) nodep;
        printf("%6d\\n", *datap);
        break;
    case endorder:
        break;
    case leaf:
        datap = *(int **) nodep;
        printf("%6d\\n", *datap);
        break;
    }
}

int
main(void)
{
    int i, *ptr;
    void *val;

    srand(time(NULL));
    fo' (i = 0; i < 12; i++) {
        ptr = xmalloc(sizeof(int));
        *ptr = rand() & 0xff;
        val = tsearch((void *) ptr, &root, compare);
        if (val == NULL)
            exit(EXIT_FAILURE);
        else if ((*(int **) val) != ptr)
            free(ptr);
    }
    twalk(root, action);
    tdestroy(root, free);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR bsearch (3),
.BR hsearch (3),
.BR lsearch (3),
.BR qsort (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
