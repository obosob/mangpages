'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_SplitList 3 8.0 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_SplitList, Tcl_Merge, Tcl_ScanElement, Tcl_ConvertElement, Tcl_ScanCountedElement, Tcl_ConvertCountedElement \- manipulate Tcl lists
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_SplitList\fR(\fIinterp, list, argcPtr, argvPtr\fR)
.sp
char *
\fBTcl_Merge\fR(\fIargc, argv\fR)
.sp
int
\fBTcl_ScanElement\fR(\fIsrc, flagsPtr\fR)
.sp
int
\fBTcl_ScanCountedElement\fR(\fIsrc, length, flagsPtr\fR)
.sp
int
\fBTcl_ConvertElement\fR(\fIsrc, dst, flags\fR)
.sp
int
\fBTcl_ConvertCountedElement\fR(\fIsrc, length, dst, flags\fR)
.SH ARGUMENTS
.AS "const char *const" ***argvPtr out
.AP Tcl_Interp *interp out
Interpreta ta use fo' error reporting.  If NULL, then no error message
is left.
.AP char *list in
Pointa ta a strang wit proper list structure.
.AP int *argcPtr out
Filled up in wit number of elements up in \fIlist\fR.
.AP "const char" ***argvPtr out
\fI*argvPtr\fR is ghon be filled up in wit tha address of a array of
pointas ta tha strings dat is tha extracted elementz of \fIlist\fR.
There is ghon be \fI*argcPtr\fR valid entries up in tha array, followed by
a NULL entry.
.AP int argc in
Number of elements up in \fIargv\fR.
.AP "const char *const" *argv in
Array of strings ta merge together tha fuck into a single list.
Each strang will become a separate element of tha list.
.AP "const char" *src in
Strin dat is ta become a element of a list.
.AP int *flagsPtr in
Pointa ta word ta fill up in wit shiznit bout \fIsrc\fR.
Da value of *\fIflagsPtr\fR must be passed ta \fBTcl_ConvertElement\fR.
.AP int length in
Number of bytes up in strang \fIsrc\fR.
.AP char *dst in
Place ta copy converted list element.  Must contain enough characters
to hold converted string.
.AP int flags in
Hype bout \fIsrc\fR. Must be value returned by previous
call ta \fBTcl_ScanElement\fR, possibly OR-ed
with \fBTCL_DONT_USE_BRACES\fR.
.BE

.SH DESCRIPTION
.PP
These procedures may be used ta disassemble n' reassemble Tcl lists.
\fBTcl_SplitList\fR breaks a list up tha fuck into its constituent elements,
returnin a array of pointas ta tha elements using
\fIargcPtr\fR n' \fIargvPtr\fR.
While extractin tha arguments, \fBTcl_SplitList\fR obeys tha usual
rulez fo' backslash substitutions n' braces.  Da area of
memory pointed ta by \fI*argvPtr\fR is dynamically allocated;  in
addizzle ta tha array of pointers, it
also holdz copiez of all tha list elements, n' you can put dat on yo' toast.  It be tha caller's
responsibilitizzle ta free up all of dis storage.
For example, suppose dat you have called \fBTcl_SplitList\fR with
the followin code:
.CS
int argc, code;
char *string;
char **argv;
\&...
code = Tcl_SplitList(interp, string, &argc, &argv);
.CE
Then you should eventually free tha storage wit a cold-ass lil call like the
following:
.CS
Tcl_Free((char *) argv);
.CE
.PP
\fBTcl_SplitList\fR normally returns \fBTCL_OK\fR, which means tha list was
successfully parsed.
If there was a syntax error up in \fIlist\fR, then \fBTCL_ERROR\fR is returned
and tha interpreterz result will point ta a error message describin the
problem (if \fIinterp\fR was not NULL).
If \fBTCL_ERROR\fR is returned then no memory be allocated n' \fI*argvPtr\fR
is not modified.
.PP
\fBTcl_Merge\fR is tha inverse of \fBTcl_SplitList\fR:  it
takes a cold-ass lil collection of strings given by \fIargc\fR
and \fIargv\fR n' generates a result string
that has proper list structure.
This means dat commandz like \fBindex\fR may be used to
extract tha original gangsta elements again.
In addition, if tha result of \fBTcl_Merge\fR is passed ta \fBTcl_Eval\fR,
it is ghon be parsed tha fuck into \fIargc\fR lyrics whose joints will
be tha same as tha \fIargv\fR strings passed ta \fBTcl_Merge\fR.
\fBTcl_Merge\fR will modify tha list elements wit braces and/or
backslashes up in order ta produce proper Tcl list structure.
Da result strang is dynamically allocated
usin \fBTcl_Alloc\fR;  tha calla must eventually release tha space
usin \fBTcl_Free\fR.
.PP
If tha result of \fBTcl_Merge\fR is passed ta \fBTcl_SplitList\fR,
the elements returned by \fBTcl_SplitList\fR is ghon be identical to
those passed tha fuck into \fBTcl_Merge\fR.
But fuck dat shiznit yo, tha word on tha street is dat tha converse aint true:  if \fBTcl_SplitList\fR
is passed a given string, n' tha resultin \fIargc\fR and
\fIargv\fR is passed ta \fBTcl_Merge\fR, tha resultin string
may not be tha same as tha original gangsta strang passed ta \fBTcl_SplitList\fR.
This is cuz \fBTcl_Merge\fR may use backslashes n' braces
differently than tha original gangsta string.
.PP
\fBTcl_ScanElement\fR n' \fBTcl_ConvertElement\fR is the
procedures dat do all of tha real work of \fBTcl_Merge\fR.
\fBTcl_ScanElement\fR scans its \fIsrc\fR argument
and determines how tha fuck ta use backslashes n' braces
when convertin it ta a list element.
It returns a overestimate of tha number of characters
required ta represent \fIsrc\fR as a list element, and
it stores shiznit up in \fI*flagsPtr\fR dat is needed
by \fBTcl_ConvertElement\fR.
.PP
\fBTcl_ConvertElement\fR be a cold-ass lil companion procedure ta \fBTcl_ScanElement\fR.
It do tha actual work of convertin a strang ta a list element.
Its \fIflags\fR argument must be tha same as tha value returned
by \fBTcl_ScanElement\fR.
\fBTcl_ConvertElement\fR writes a proper list element ta memory
startin at *\fIdst\fR n' returns a cold-ass lil count of tha total number
of charactas written, which is ghon be no mo' than tha result
returned by \fBTcl_ScanElement\fR.
\fBTcl_ConvertElement\fR writes up only tha actual list element
without any leadin or trailin spaces: it is up ta tha calla to
include spaces between adjacent list elements.
.PP
\fBTcl_ConvertElement\fR uses one of two different approaches to
handle tha special charactas up in \fIsrc\fR.  Wherever possible, it
handlez special charactas by surroundin tha strang wit braces.
This produces clean-lookin output yo, but cannot be used up in some thangs,
like fuckin when \fIsrc\fR gotz nuff unmatched braces.
In these thangs, \fBTcl_ConvertElement\fR handlez special
charactas by generatin backslash sequences fo' em.
Da calla may insist on tha second approach by OR-in the
flag value returned by \fBTcl_ScanElement\fR with
\fBTCL_DONT_USE_BRACES\fR.
Although dis will produce a uglier result, it is useful up in some
special thangs, like fuckin when \fBTcl_ConvertElement\fR is being
used ta generate a portion of a argument fo' a Tcl command.
In dis case, surroundin \fIsrc\fR wit curly braces would cause
the command not ta be parsed erectly.
.PP
.VS 8.5
By default, \fBTcl_ConvertElement\fR will use quotin up in its output
to be shizzle tha straight-up original gangsta characta of a element aint tha hash
character
.PQ # .
This is ta be shizzle tha straight-up original gangsta element of any list
passed ta \fBeval\fR aint mis-parsed as tha beginnin of a cold-ass lil comment.
When a list element aint tha straight-up original gangsta element of a list, dis quoting
is not necessary.  When tha calla can be shizzle dat tha element is
not tha straight-up original gangsta element of a list, it can disable quotin of tha leading
hash characta by OR-in tha flag value returned by \fBTcl_ScanElement\fR
with \fBTCL_DONT_QUOTE_HASH\fR.
.VE 8.5
.PP
\fBTcl_ScanCountedElement\fR n' \fBTcl_ConvertCountedElement\fR are
the same as \fBTcl_ScanElement\fR n' \fBTcl_ConvertElement\fR, except
the length of strang \fIsrc\fR is specified by tha \fIlength\fR
argument, n' tha strang may contain embedded nulls.

.SH KEYWORDS
backslash, convert, element, list, merge, split, strings
