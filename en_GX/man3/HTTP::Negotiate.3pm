.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Negotiate 3"
.TH HTTP::Negotiate 3 "2012-02-18" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Negotiate \- chizzle a variant ta serve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use HTTP::Negotiate qw(choose);
\&
\& #  ID       QS     Content\-Type   Encodin Char\-Set        Lang   Size
\& $variants =
\&  [[\*(Aqvar1\*(Aq,  1.000, \*(Aqtext/html\*(Aq,   undef,   \*(Aqiso\-8859\-1\*(Aq,   \*(Aqen\*(Aq,   3000],
\&   [\*(Aqvar2\*(Aq,  0.950, \*(Aqtext/plain\*(Aq,  \*(Aqgzip\*(Aq,  \*(Aqus\-ascii\*(Aq,     \*(Aqno\*(Aq,    400],
\&   [\*(Aqvar3\*(Aq,  0.3,   \*(Aqimage/gif\*(Aq,   undef,   undef,          undef, 43555],
\&  ];
\&
\& @preferred = chizzle($variants, $request_headers);
\& $the_one   = chizzle($variants);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up a cold-ass lil complete implementation of tha \s-1HTTP\s0 content
negotiation algorithm specified up in \fIdraft\-ietf\-http\-v11\-spec\-00.ps\fR
chapta 12.  Content negotiation allows fo' tha selection of a
preferred content representation based upon attributez of the
negotiable variants n' tha value of tha various Accept* header fields
in tha request.
.PP
Da variants is ordered by preference by callin tha function
\&\fIchoose()\fR.
.PP
Da first parameta is reference ta a array of tha variants to
choose among.
Each element up in dis array be a array wit tha joints [$id, \f(CW$qs\fR,
\&\f(CW$content_type\fR, \f(CW$content_encoding\fR, \f(CW$charset\fR, \f(CW$content_language\fR,
\&\f(CW$content_length\fR] whose meanings is busted lyrics about
below. Da \f(CW$content_encoding\fR n' \f(CW$content_language\fR can be either a
single scalar value or a array reference if there be nuff muthafuckin joints.
.PP
Da second optionizzle parameta is either a HTTP::Headaz or a HTTP::Request
object which is searched fo' \*(L"Accept*\*(R" headers.  If this
parameta is missing, then tha accept justification is initialized
from tha \s-1CGI\s0 environment variablez \s-1HTTP_ACCEPT, HTTP_ACCEPT_CHARSET,
HTTP_ACCEPT_ENCODING\s0 n' \s-1HTTP_ACCEPT_LANGUAGE.\s0
.PP
In a array context, \fIchoose()\fR returns a list of [variant
identifier, calculated quality, size] tuples.  Da joints is sorted by
quality, highest qualitizzle first.  If tha calculated qualitizzle is tha same
for two variants, then they is sorted by size (smallest first). \fIE.g.\fR:
.PP
.Vb 1
\&  ([\*(Aqvar1\*(Aq, 1, 2000], [\*(Aqvar2\*(Aq, 0.3, 512], [\*(Aqvar3\*(Aq, 0.3, 1024]);
.Ve
.PP
Note dat also zero qualitizzle variants is included up in tha return list
even if these should never be served ta tha client.
.PP
In a scalar context, it returns tha identifier of tha variant wit the
highest score or \f(CW\*(C`undef\*(C'\fR if none have non-zero quality.
.PP
If tha \f(CW$HTTP::Negotiate::DEBUG\fR variable is set ta \s-1TRUE,\s0 then a shitload of
noise is generated on \s-1STDOUT\s0 durin evaluation of \fIchoose()\fR.
.SH "VARIANTS"
.IX Header "VARIANTS"
A variant is busted lyrics bout by a list of tha followin joints, n' you can put dat on yo' toast.  If the
attribute do not make sense or is unknown fo' a variant, then use
\&\f(CW\*(C`undef\*(C'\fR instead.
.IP "identifier" 3
.IX Item "identifier"
This be a strang dat you use as tha name fo' tha variant.  This
identifier fo' tha preferred variants returned by \fIchoose()\fR.
.IP "qs" 3
.IX Item "qs"
This be a number between 0.000 n' 1.000 dat raps bout tha \*(L"source
quality\*(R".  This is what tha fuck \fIdraft\-ietf\-http\-v11\-spec\-00.ps\fR say bout this
value:
.Sp
Source qualitizzle is measured by tha content provider as representin the
amount of degradation from tha original gangsta source.  For example, a
picture up in \s-1JPEG\s0 form would gotz a lower qs when translated ta tha \s-1XBM\s0
format, n' much lower qs when translated ta a ASCII-art
representation. I aint talkin' bout chicken n' gravy biatch.  Note, however, dat dis be a gangbangin' function of tha source
\&\- a original gangsta piece of ASCII-art may degrade up in qualitizzle if it is
captured up in \s-1JPEG\s0 form.  Da qs joints should be assigned ta each
variant by tha content provider; if no qs value has been assigned, the
default is generally \*(L"qs=1\*(R".
.IP "content-type" 3
.IX Item "content-type"
This is tha media type of tha variant.  Da media type do not
include a cold-ass lil charset attribute yo, but might contain other parameters.
Examplez are:
.Sp
.Vb 5
\&  text/html
\&  text/html;version=2.0
\&  text/plain
\&  image/gif
\&  image/jpg
.Ve
.IP "content-encoding" 3
.IX Item "content-encoding"
This is one or mo' content encodings dat has been applied ta the
variant.  Da content encodin is generally used as a modifier ta the
content media type.  Da most common content encodings are:
.Sp
.Vb 2
\&  gzip
\&  compress
.Ve
.IP "content-charset" 3
.IX Item "content-charset"
This is tha characta set used when tha variant gotz nuff text.
Da charset value should generally be \f(CW\*(C`undef\*(C'\fR or one of these:
.Sp
.Vb 8
\&  us\-ascii
\&  iso\-8859\-1 ... iso\-8859\-9
\&  iso\-2022\-jp
\&  iso\-2022\-jp\-2
\&  iso\-2022\-kr
\&  unicode\-1\-1
\&  unicode\-1\-1\-utf\-7
\&  unicode\-1\-1\-utf\-8
.Ve
.IP "content-language" 3
.IX Item "content-language"
This raps bout one or mo' languages dat is used up in tha variant.
Language is busted lyrics bout like dis up in \fIdraft\-ietf\-http\-v11\-spec\-00.ps\fR: A
language is up in dis context a natural language spoken, written, or
otherwise conveyed by human beings fo' communication of shiznit to
other human beings.  Computa languages is explicitly excluded.
.Sp
Da language tags is defined by \s-1RFC 3066. \s0 Examples
are:
.Sp
.Vb 4
\&  no               Norwegian
\&  en               Internationistic Gangsta
\&  en\-US            US Gangsta
\&  en\-cockney
.Ve
.IP "content-length" 3
.IX Item "content-length"
This is tha number of bytes used ta represent tha content.
.SH "ACCEPT HEADERS"
.IX Header "ACCEPT HEADERS"
Da followin Accept* headaz can be used fo' describin content
preferences up in a request (This description be a edited extract from
\&\fIdraft\-ietf\-http\-v11\-spec\-00.ps\fR):
.IP "Accept" 3
.IX Item "Accept"
This header can be used ta indicate a list of media ranges which are
acceptable as a response ta tha request.  Da \*(L"*\*(R" characta is used to
group media types tha fuck into ranges, wit \*(L"*/*\*(R" indicatin all media types
and \*(L"type/*\*(R" indicatin all subtypez of dat type.
.Sp
Da parameta q is used ta indicate tha qualitizzle factor, which
represents tha userz preference fo' dat range of media types.  The
parameta mbx gives tha maximum aaight size of tha response
content. Da default joints are: q=1 n' mbx=infinity. If no Accept
header is present, then tha client accepts all media types wit q=1.
.Sp
For example:
.Sp
.Vb 1
\&  Accept: audio/*;q=0.2;mbx=200000, audio/basic
.Ve
.Sp
would mean: \*(L"I prefer audio/basic (of any size) yo, but bust me any audio
type if it is tha dopest available afta a 80% mark-down up in qualitizzle and
its size is less than 200000 bytes\*(R"
.IP "Accept-Charset" 3
.IX Item "Accept-Charset"
Used ta indicate what tha fuck characta sets is aaight fo' tha response.
Da \*(L"us-ascii\*(R" characta set be assumed ta be aaight fo' all user
agents, n' you can put dat on yo' toast.  If no Accept-Charset field is given, tha default is dat any
charset be acceptable.  Example:
.Sp
.Vb 1
\&  Accept\-Charset: iso\-8859\-1, unicode\-1\-1
.Ve
.IP "Accept-Encoding" 3
.IX Item "Accept-Encoding"
Restricts tha Content-Encodin joints which is aaight up in the
response.  If no Accept-Encodin field is present, tha server may
assume dat tha client will accept any content encoding.  An empty
Accept-Encodin means dat no content encodin be acceptable.  Example:
.Sp
.Vb 1
\&  Accept\-Encoding: compress, gzip
.Ve
.IP "Accept-Language" 3
.IX Item "Accept-Language"
This field is similar ta Accept yo, but restricts tha set of natural
languages dat is preferred up in a response.  Each language may be
given a associated qualitizzle value which represents a estimate of the
userz comprehension of dat language.  For example:
.Sp
.Vb 1
\&  Accept\-Language: no, en\-gb;q=0.8, de;q=0.55
.Ve
.Sp
would mean: "I prefer Norwegian yo, but will accept British Gangsta (with
80% comprehension) or German (with 55% comprehension).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996,2001 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Gisle Aas <gisle@aas.no>
