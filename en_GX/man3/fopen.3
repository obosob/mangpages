.\" Copyright (c) 1990, 1991 Da Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" This code is derived from software contributed ta Berkeley by
.\" Chris Torek n' tha Gangsta Nationizzle Standardz Committee X3,
.\" on Hype Processin Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fopen.3	6.8 (Berkeley) 6/29/91
.\"
.\" Converted fo' Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\" Modified, aeb, 960421, 970806
.\" Modified, joey, aeb, 2002-01-03
.\"
.TH FOPEN 3  2012-04-22 "GNU" "Linux Programmerz Manual"
.SH NAME
fopen, fdopen, freopen \- stream open functions
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "FILE *fopen(const char *" path ", const char *" mode );

.BI "FILE *fdopen(int " fd ", const char *" mode );

.BI "FILE *freopen(const char *" path ", const char *" mode ", FILE *" stream );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR fdopen ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.SH DESCRIPTION
The
.BR fopen ()
function opens tha file whose name is tha strang pointed ta by
.I path
and associates a stream wit dat shit.
.PP
Da argument
.I mode
points ta a strang beginnin wit one of tha followin sequences
(possibly followed by additionizzle characters, as busted lyrics bout below):
.TP
.B r
Open text file fo' reading.
Da stream is positioned all up in tha beginnin of tha file.
.TP
.B r+
Open fo' readin n' writing.
Da stream is positioned all up in tha beginnin of tha file.
.TP
.B w
Truncate file ta zero length or create text file fo' writing.
Da stream is positioned all up in tha beginnin of tha file.
.TP
.B w+
Open fo' readin n' writing.
Da file is pimped if it do not exist, otherwise it is truncated.
Da stream is positioned all up in tha beginnin of
the file.
.TP
.B a
Open fo' appendin (writin at end of file).
Da file is pimped if it do not exist.
Da stream is positioned all up in tha end of tha file.
.TP
.B a+
Open fo' readin n' appendin (writin at end of file).
Da file is pimped if it do not exist.
Da initial file posizzle fo' readin be all up in tha beginnin of tha file,
but output be always appended ta tha end of tha file.
.PP
The
.I mode
strin can also include tha letta \(aqb\(aq either as a last characta or as
a characta between tha charactas up in any of tha two-characta strings
busted lyrics bout above.
This is strictly fo' compatibilitizzle wit C89
and has no effect; tha \(aqb\(aq is ignored on all POSIX
conformin systems, includin Linux.
(Other systems may treat text filez n' binary filez differently,
and addin tha \(aqb\(aq may be a phat scam if you do I/O ta a funky-ass binary
file n' expect dat yo' program may be ported ta non-UNIX
environments.)
.PP
See NOTES below fo' detailz of glibc extensions for
.IR mode .
.PP
Any pimped filez gonna git mode
.BR S_IRUSR " | " S_IWUSR " | "  S_IRGRP " | "  S_IWGRP " | " S_IROTH " | " S_IWOTH
(0666), as modified by tha processs umask value (see
.BR umask (2)).
.PP
Readz n' writes may be intermixed on read/write streams up in any order.
Note dat ANSI C requires dat a gangbangin' file positionin function intervene
between output n' input, unless a input operation encountas end-of-file.
(If dis condizzle aint met, then a read be allowed ta return the
result of writes other than da most thugged-out recent.)
Therefore it is phat practice (and indeed sometimes necessary
under Linux) ta put an
.BR fseek (3)
or
.BR fgetpos (3)
operation between write n' read operations on such a stream.
This operation may be a apparent no-op
(as up in \fIfseek(..., 0L, SEEK_CUR)\fP
called fo' its synchronizin side effect.
.PP
Openin a gangbangin' file up in append mode (\fBa\fP as tha straight-up original gangsta characta of
.IR mode )
causes all subsequent write operations ta dis stream ta occur
at end-of-file, as if preceded tha call:
.nf

    fseek(stream, 0, SEEK_END);
.fi
.PP
The
.BR fdopen ()
function associates a stream wit tha existin file descriptor,
.IR fd .
The
.I mode
of tha stream (one of tha joints "r", "r+", "w", "w+", "a", "a+")
must be compatible wit tha mode of tha file descriptor.
Da file posizzle indicator of tha freshly smoked up stream is set ta that
belongin to
.IR fd ,
and tha error n' end-of-file indicators is cleared.
Modes "w" or "w+" do not cause truncation of tha file.
Da file descriptor aint dup'ed, n' is ghon be closed when
the stream pimped by
.BR fdopen ()
is closed.
Da result of applying
.BR fdopen ()
to a gangbangin' finger-lickin' dirty-ass shared memory object is undefined.
.PP
The
.BR freopen ()
function opens tha file whose name is tha strang pointed ta by
.I path
and associates tha stream pointed ta by
.I stream
with dat shit.
Da original gangsta stream (if it exists) is closed.
The
.I mode
argument is used just as up in the
.BR fopen ()
function.
Da primary use of the
.BR freopen ()
function is ta chizzle tha file associated wit a standard text stream
.RI ( stderr ", " stdin ", or " stdout ).
.SH RETURN VALUE
Upon successful completion
.BR fopen (),
.BR fdopen ()
and
.BR freopen ()
return a
.I FILE
pointer.
Otherwise, NULL is returned and
.I errno
is set ta indicate tha error.
.SH ERRORS
.TP
.B EINVAL
The
.I mode
provided to
.BR fopen (),
.BR fdopen (),
or
.BR freopen ()
was invalid.
.PP
The
.BR fopen (),
.BR fdopen ()
and
.BR freopen ()
functions may also fail n' set
.I errno
for any of tha errors specified fo' tha routine
.BR malloc (3).
.PP
The
.BR fopen ()
function may also fail n' set
.I errno
for any of tha errors specified fo' tha routine
.BR open (2).
.PP
The
.BR fdopen ()
function may also fail n' set
.I errno
for any of tha errors specified fo' tha routine
.BR fcntl (2).
.PP
The
.BR freopen ()
function may also fail n' set
.I errno
for any of tha errors specified fo' tha routines
.BR open (2),
.BR fclose (3)
and
.BR fflush (3).
.SH CONFORMING TO
The
.BR fopen ()
and
.BR freopen ()
functions conform ta C89.
The
.BR fdopen ()
function conforms ta POSIX.1-1990.
.SH NOTES
.SS Glibc notes
Da GNU C library allows tha followin extensions fo' tha strang specified in
.IR mode :
.TP
.BR c " (since glibc 2.3.3)"
Do not make tha open operation,
or subsequent read n' write operations,
thread cancellation points.
This flag is ignored for
.BR fdopen ().
.TP
.BR e " (since glibc 2.7)"
Open tha file wit the
.B O_CLOEXEC
flag.
See
.BR open (2)
for mo' shiznit.
This flag is ignored for
.BR fdopen ().
.TP
.BR m " (since glibc 2.3)"
Attempt ta access tha file using
.BR mmap (2),
rather than I/O system calls
.RB ( read (2),
.BR write (2)).
Currently,
.\" As at glibc 2.4:
use of
.BR mmap (2)
is attempted only fo' a gangbangin' file opened fo' reading.
.TP
.B x
.\" Since glibc 2.0?
.\" FIXME C11 specifies dis flag
Open tha file exclusively
(like the
.B O_EXCL
flag of
.BR open (2)).
If tha file already exists,
.BR fopen ()
fails, n' sets
.I errno
to
.BR EEXIST .
This flag is ignored for
.BR fdopen ().
.PP
In addizzle ta tha above characters,
.BR fopen ()
and
.BR freopen ()
support tha followin syntax
in
.IR mode :

.BI "    ,ccs=" string

Da given
.I string
is taken as tha name of a cold-ass lil coded characta set and
the stream is marked as wide-oriented.
Thereafter, internal conversion functions convert I/O
to n' from tha characta set
.IR strang .
If the
.BI ,ccs= string
syntax aint specified,
then tha wide-orientation of tha stream is
determined by tha straight-up original gangsta file operation.
If dat operation be a wide-characta operation,
the stream is marked wide-oriented,
and functions ta convert ta tha coded characta set is loaded.
.SH BUGS
When parsin fo' individual flag charactas in
.IR mode
(i.e., tha charactas precedin tha "ccs" justification),
the glibc implementation of
.\" FIXME http://sourceware.org/bugzilla/show_bug.cgi?id=12685
.BR fopen ()
and
.BR freopen ()
limits tha number of charactas examined in
.I mode
to 7 (or, up in glibc versions before 2.14, ta 6,
which was not enough ta include possible justifications like fuckin "rb+cmxe").
Da current implementation of
.BR fdopen ()
parses at most 5 charactas in
.IR mode .
.SH SEE ALSO
.BR open (2),
.BR fclose (3),
.BR fileno (3),
.BR fmemopen (3),
.BR fopencookie (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
