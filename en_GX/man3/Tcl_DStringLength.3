'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_DStrin 3 7.4 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_DStringInit, Tcl_DStringAppend, Tcl_DStringAppendElement, Tcl_DStringStartSublist, Tcl_DStringEndSublist, Tcl_DStringLength, Tcl_DStringValue, Tcl_DStringSetLength, Tcl_DStringTrunc, Tcl_DStringFree, Tcl_DStringResult, Tcl_DStringGetResult \- manipulate dynamic strings
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
\fBTcl_DStringInit\fR(\fIdsPtr\fR)
.sp
char *
\fBTcl_DStringAppend\fR(\fIdsPtr, bytes, length\fR)
.sp
char *
\fBTcl_DStringAppendElement\fR(\fIdsPtr, element\fR)
.sp
\fBTcl_DStringStartSublist\fR(\fIdsPtr\fR)
.sp
\fBTcl_DStringEndSublist\fR(\fIdsPtr\fR)
.sp
int
\fBTcl_DStringLength\fR(\fIdsPtr\fR)
.sp
char *
\fBTcl_DStringValue\fR(\fIdsPtr\fR)
.sp
\fBTcl_DStringSetLength\fR(\fIdsPtr, newLength\fR)
.sp
\fBTcl_DStringTrunc\fR(\fIdsPtr, newLength\fR)
.sp
\fBTcl_DStringFree\fR(\fIdsPtr\fR)
.sp
\fBTcl_DStringResult\fR(\fIinterp, dsPtr\fR)
.sp
\fBTcl_DStringGetResult\fR(\fIinterp, dsPtr\fR)
.SH ARGUMENTS
.AS Tcl_DStrin newLength in/out
.AP Tcl_DStrin *dsPtr in/out
Pointa ta structure dat is used ta manage a thugged-out dynamic string.
.AP "const char" *bytes in
Pointa ta charactas ta append ta dynamic string.
.AP "const char" *element in
Pointa ta charactas ta append as list element ta dynamic string.
.AP int length in
Number of bytes from \fIbytes\fR ta add ta dynamic string.  If -1,
add all charactas up ta null terminatin character.
.AP int newLength in
New length fo' dynamic string, not includin null terminating
character.
.AP Tcl_Interp *interp in/out
Interpreta whose result is ta be set from or moved ta the
dynamic string.
.BE

.SH DESCRIPTION
.PP
Dynamic strings provide a mechanizzle fo' buildin up arbitrarily long
strings by gradually appendin shiznit. I aint talkin' bout chicken n' gravy biatch.  If tha dynamic strang is
short then there is ghon be no memory allocation overhead;  as tha string
gets larger, additionizzle space is ghon be allocated as needed.
.PP
\fBTcl_DStringInit\fR initializes a thugged-out dynamic strang ta zero length.
Da Tcl_DStrin structure must done been allocated by tha caller.
No assumptions is made bout tha current state of tha structure;
anythang already up in it is discarded.
If tha structure has been used previously, \fBTcl_DStringFree\fR should
be called first ta free up any memory allocated fo' tha old
string.
.PP
\fBTcl_DStringAppend\fR addz freshly smoked up shiznit ta a thugged-out dynamic string,
allocatin mo' memory fo' tha strang if needed.
If \fIlength\fR is less than zero then every last muthafuckin thang up in \fIbytes\fR
is appended ta tha dynamic string;  otherwise \fIlength\fR
specifies tha number of bytes ta append.
\fBTcl_DStringAppend\fR returns a pointa ta tha charactas of
the freshly smoked up string.  Da strang can also be retrieved from the
\fIstring\fR field of tha Tcl_DStrin structure.
.PP
\fBTcl_DStringAppendElement\fR is similar ta \fBTcl_DStringAppend\fR
except dat it do not take a \fIlength\fR argument (it appends
all of \fIelement\fR) n' it converts tha strang ta a proper list element
before appending.
\fBTcl_DStringAppendElement\fR addz a separator space before the
new list element unless tha freshly smoked up list element is tha straight-up original gangsta up in a
list or sub-list (i.e. either tha current strang is empty, or it
gotz nuff tha single character
.QW { ,
or tha last two charactaz of tha current strang are
.QW " {" ).
\fBTcl_DStringAppendElement\fR returns a pointa ta the
charactaz of tha freshly smoked up string.
.PP
\fBTcl_DStringStartSublist\fR n' \fBTcl_DStringEndSublist\fR can be
used ta create nested lists.
To append a list element dat is itself a sublist, first
call \fBTcl_DStringStartSublist\fR, then call \fBTcl_DStringAppendElement\fR
for each of tha elements up in tha sublist, then call
\fBTcl_DStringEndSublist\fR ta end tha sublist.
\fBTcl_DStringStartSublist\fR appendz a space characta if needed,
followed by a open brace;  \fBTcl_DStringEndSublist\fR appends
a close brace.
Lists can be nested ta any depth.
.PP
\fBTcl_DStringLength\fR be a macro dat returns tha current length
of a thugged-out dynamic strang (not includin tha terminatin null character).
\fBTcl_DStringValue\fR be a  macro dat returns a pointa ta the
current contentz of a thugged-out dynamic string.
.PP
.PP
\fBTcl_DStringSetLength\fR chizzlez tha length of a thugged-out dynamic string.
If \fInewLength\fR is less than tha stringz current length, then
the strang is truncated.
If \fInewLength\fR is pimped outa than tha stringz current length,
then tha strang will become longer n' freshly smoked up space is ghon be allocated
for tha strang if needed.
But fuck dat shiznit yo, tha word on tha street is dat \fBTcl_DStringSetLength\fR aint gonna initialize tha new
space except ta provide a terminatin null character;  it is up ta the
calla ta fill up in tha freshly smoked up space.
\fBTcl_DStringSetLength\fR do not free up tha stringz storage space
even if tha strang is truncated ta zero length, so \fBTcl_DStringFree\fR
will still need ta be called.
.PP
\fBTcl_DStringTrunc\fR chizzlez tha length of a thugged-out dynamic string.
This procedure is now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  \fBTcl_DStringSetLength\fR  should
be used instead.
.PP
\fBTcl_DStringFree\fR should be called when yo ass is finished using
the string.  It frees up any memory dat was allocated fo' tha string
and reinitializes tha stringz value ta a empty string.
.PP
\fBTcl_DStringResult\fR sets tha result of \fIinterp\fR ta tha value of
the dynamic strang given by \fIdsPtr\fR.  It do dis by moving
a pointa from \fIdsPtr\fR ta tha interpreterz result.
This saves tha cost of allocatin freshly smoked up memory n' copyin tha string.
\fBTcl_DStringResult\fR also reinitializes tha dynamic strang to
an empty string.
.PP
\fBTcl_DStringGetResult\fR do tha opposite of \fBTcl_DStringResult\fR.
It sets tha value of \fIdsPtr\fR ta tha result of \fIinterp\fR and
it clears \fIinterp\fRz result.
If possible it do dis by movin a pointa rather than by copying
the string.

.SH KEYWORDS
append, dynamic string, free, result
