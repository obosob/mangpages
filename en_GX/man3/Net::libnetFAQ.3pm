.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::libnetFAQ 3pm"
.TH Net::libnetFAQ 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
libnetFAQ \- libnet Frequently Axed Questions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Where ta git dis document"
.IX Subsection "Where ta git dis document"
This document is distributed wit tha libnet distribution, n' be also
available on tha libnet wizzy page at
.PP
.Vb 1
\&    http://search.cpan.org/~gbarr/libnet/
.Ve
.SS "How tha fuck ta contribute ta dis document"
.IX Subsection "How tha fuck ta contribute ta dis document"
Yo ass may mail erections, additions, n' suggestions ta me
gbarr@pobox.com.
.SH "Lyricist n' Copyright Information"
.IX Header "Lyricist n' Copyright Information"
Copyright (c) 1997\-1998 Graham Barr fo' realz. All muthafuckin rights reserved.
This document is free; you can redistribute it and/or modify it
under tha termz of tha Artistic License.
.SS "Disclaimer"
.IX Subsection "Disclaimer"
This shiznit is offered up in phat faith n' up in tha hope dat it may
be of use yo, but aint guaranteed ta be erect, up ta date, or suitable
for any particular purpose whatsoever n' shit.  Da authors accept no liability
in respect of dis shiznit or its use.
.SH "Obtainin n' installin libnet"
.IX Header "Obtainin n' installin libnet"
.SS "What tha fuck iz libnet ?"
.IX Subsection "What tha fuck iz libnet ?"
libnet be a cold-ass lil collection of perl5 modulez which all related ta network
programming. Da majoritizzle of tha modulez available provided the
client side of ghettofab server-client protocols dat is used in
the internizzle hood.
.SS "Which version of perl do I need ?"
.IX Subsection "Which version of perl do I need ?"
libnet has been know ta work wit versionz of perl from 5.002 onwardz yo. However
if yo' release of perl is prior ta perl5.004 then yo big-ass booty is ghon need to
obtain n' install tha \s-1IO\s0 distribution from \s-1CPAN.\s0 If you have perl5.004
or lata then you gonna git tha \s-1IO\s0 modulez up in yo' installation already,
but \s-1CPAN\s0 may contain thugged-out shit.
.SS "What other modulez do I need ?"
.IX Subsection "What other modulez do I need ?"
Da only modulez yo big-ass booty is ghon need installed is tha modulez from tha \s-1IO\s0
distribution. I aint talkin' bout chicken n' gravy biatch. If you have perl5.004 or lata yo big-ass booty is ghon already have
these modules.
.SS "What machines support libnet ?"
.IX Subsection "What machines support libnet ?"
libnet itself be a entirely perl-code distribution so it should work
on any machine dat perl runs on. I aint talkin' bout chicken n' gravy biatch yo. However \s-1IO\s0 may not work
with some machines n' earlier releasez of perl. But this
should not be tha case wit perl version 5.004 or later.
.SS "Where can I git tha sickest fuckin libnet release"
.IX Subsection "Where can I git tha sickest fuckin libnet release"
Da sickest fuckin libnet release be always on \s-1CPAN,\s0 yo big-ass booty is ghon find it
in
.PP
.Vb 1
\& http://www.cpan.org/modules/by\-module/Net/
.Ve
.PP
Da sickest fuckin release n' shiznit be also available on tha libnet wizzy page
at
.PP
.Vb 1
\& http://search.cpan.org/~gbarr/libnet/
.Ve
.SH "Usin Net::FTP"
.IX Header "Usin Net::FTP"
.SS "How tha fuck do I downlizzle filez from a \s-1FTP\s0 server ?"
.IX Subsection "How tha fuck do I downlizzle filez from a FTP server ?"
An example taken from a article posted ta comp.lang.perl.misc
.PP
.Vb 1
\&    #!/your/path/to/perl
\&
\&    # a module makin game easier
\&
\&    use Net::FTP;
\&
\&    # fo' debugging: $ftp = Net::FTP\->new(\*(Aqsite\*(Aq,\*(AqDebug\*(Aq,10);
\&    # open a cold-ass lil connection n' log in!
\&
\&    $ftp = Net::FTP\->new(\*(Aqtarget_site.somewhere.xxx\*(Aq);
\&    $ftp\->login(\*(Aqusername\*(Aq,\*(Aqpassword\*(Aq);
\&
\&    # set transfer mode ta binary
\&
\&    $ftp\->binary();
\&
\&    # chizzle tha directory on tha ftp crib
\&
\&    $ftp\->cwd(\*(Aq/some/path/to/somewhere/\*(Aq);
\&
\&    foreach $name (\*(Aqfile1\*(Aq, \*(Aqfile2\*(Aq, \*(Aqfile3\*(Aq) {
\&
\&    # get\*(Aqs arguments is up in tha followin order:
\&    # ftp server\*(Aqs filename
\&    # filename ta save tha transfer ta on tha local machine
\&    # can be simply used as get($name) if you want tha same name
\&
\&      $ftp\->get($name,$name);
\&    }
\&
\&    # ftp done!
\&
\&    $ftp\->quit;
.Ve
.SS "How tha fuck do I transfer filez up in binary mode ?"
.IX Subsection "How tha fuck do I transfer filez up in binary mode ?"
To transfer filez without <\s-1LF\s0><\s-1CR\s0> translation Net::FTP provides
the \f(CW\*(C`binary\*(C'\fR method
.PP
.Vb 1
\&    $ftp\->binary;
.Ve
.SS "How tha fuck can I git tha size of a gangbangin' file on a remote \s-1FTP\s0 server ?"
.IX Subsection "How tha fuck can I git tha size of a gangbangin' file on a remote FTP server ?"
.SS "How tha fuck can I git tha modification time of a gangbangin' file on a remote \s-1FTP\s0 server ?"
.IX Subsection "How tha fuck can I git tha modification time of a gangbangin' file on a remote FTP server ?"
.SS "How tha fuck can I chizzle tha permissionz of a gangbangin' file on a remote server ?"
.IX Subsection "How tha fuck can I chizzle tha permissionz of a gangbangin' file on a remote server ?"
Da \s-1FTP\s0 protocol aint gots a cold-ass lil command fo' changin tha permissions
of a gangbangin' file on tha remote server n' shit. But some ftp servers may allow a cold-ass lil chmod
command ta be issued via a \s-1SITE\s0 command, eg
.PP
.Vb 1
\&    $ftp\->quot(\*(Aqsite chmod 0777\*(Aq,$filename);
.Ve
.PP
But dis aint guaranteed ta work.
.SS "Can I do a reget operation like tha ftp command ?"
.IX Subsection "Can I do a reget operation like tha ftp command ?"
.SS "How tha fuck do I git a gangbangin' finger-lickin' directory listin from a \s-1FTP\s0 server ?"
.IX Subsection "How tha fuck do I git a gangbangin' finger-lickin' directory listin from a FTP server ?"
.ie n .SS "Changin directory ta """" do not fail ?"
.el .SS "Changin directory ta ``'' do not fail ?"
.IX Subsection "Changin directory ta """" do not fail ?"
Passin a argument of "" ta \->\fIcwd()\fR has tha same ol' dirty affect of callin \->\fIcwd()\fR
without any arguments, n' you can put dat on yo' toast. Turn on Debug (\fISee below\fR) n' yo big-ass booty is ghon peep what tha fuck is
happening
.PP
.Vb 3
\&    $ftp = Net::FTP\->new($host, Debug => 1);
\&    $ftp\->login;
\&    $ftp\->cwd("");
.Ve
.PP
gives
.PP
.Vb 2
\&    Net::FTP=GLOB(0x82196d8)>>> CWD /
\&    Net::FTP=GLOB(0x82196d8)<<< 250 CWD command successful.
.Ve
.SS "I be behind a \s-1SOCKS\s0 firewall yo, but tha Firewall option do not work ?"
.IX Subsection "I be behind a SOCKS firewall yo, but tha Firewall option do not work ?"
Da Firewall option is only fo' support of one type of firewall. Da type
supported be a ftp proxy.
.PP
To use Net::FTP, or any other module up in tha libnet distribution,
all up in a \s-1SOCKS\s0 firewall you must create a socks-ified perl executable
by compilin perl wit tha socks library.
.SS "I be behind a \s-1FTP\s0 proxy firewall yo, but cannot access machines outside ?"
.IX Subsection "I be behind a FTP proxy firewall yo, but cannot access machines outside ?"
Net::FTP implements da most thugged-out ghettofab ftp proxy firewall approach. Da scheme
implemented is dat where you log up in ta tha firewall wit \f(CW\*(C`user@hostname\*(C'\fR
.PP
I have heard of one other type of firewall which requires a login ta the
firewall wit a account, then a second login wit \f(CW\*(C`user@hostname\*(C'\fR. Yo ass can
still use Net::FTP ta traverse these firewalls yo, but a mo' manual approach
must be taken, eg
.PP
.Vb 3
\&    $ftp = Net::FTP\->new($firewall) or take a thugged-out dirtnap $@;
\&    $ftp\->login($firewall_user, $firewall_passwd) or take a thugged-out dirtnap $ftp\->message;
\&    $ftp\->login($ext_user . \*(Aq@\*(Aq . $ext_host, $ext_passwd) or take a thugged-out dirtnap $ftp\->message.
.Ve
.SS "My fuckin ftp proxy firewall do not listen on port 21"
.IX Subsection "My fuckin ftp proxy firewall do not listen on port 21"
\&\s-1FTP\s0 servers probably listen on tha same port number, port 21, as any other
\&\s-1FTP\s0 server n' shit. But there is no reason why dis has ta be tha case.
.PP
If you pass a port number ta Net::FTP then it assumes dis is tha port
number of tha final destination. I aint talkin' bout chicken n' gravy biatch. By default Net::FTP will always try
to connect ta tha firewall on port 21.
.PP
Net::FTP uses IO::Socket ta open tha connection n' IO::Socket allows
the port number ta be specified as part of tha hostname. Right back up in yo muthafuckin ass. So dis problem
can be resolved by either passin a Firewall option like \f(CW"hostname:1234"\fR
or by settin tha \f(CW\*(C`ftp_firewall\*(C'\fR option up in Net::Config ta be a string
in up in tha same form.
.SS "Is it possible ta chizzle tha file permissionz of a gangbangin' file on a \s-1FTP\s0 server ?"
.IX Subsection "Is it possible ta chizzle tha file permissionz of a gangbangin' file on a FTP server ?"
Da answer ta dis is \*(L"maybe\*(R". Da \s-1FTP\s0 protocol do not specify a cold-ass lil command ta chizzle
file permissions on a remote host yo. However nuff servers do allow you ta run the
chmod command via tha \f(CW\*(C`SITE\*(C'\fR command. Y'all KNOW dat shit, muthafucka! This can be done with
.PP
.Vb 1
\&  $ftp\->site(\*(Aqchmod\*(Aq,\*(Aq0775\*(Aq,$file);
.Ve
.SS "I have peeped scripts call a method message yo, but cannot find it documented ?"
.IX Subsection "I have peeped scripts call a method message yo, but cannot find it documented ?"
Net::FTP, like nuff muthafuckin other packages up in libnet, inherits from Net::Cmd, so
all tha methodz busted lyrics bout up in Net::Cmd is also available on Net::FTP
objects.
.SS "Why do Net::FTP not implement mput n' mget methods"
.IX Subsection "Why do Net::FTP not implement mput n' mget methods"
Da quick answer is cuz they is easy as fuck  ta implement yo ass. Da long
answer is dat ta write these up in such a way dat multiple platforms are
supported erectly would just require too much code. Below are
some examplez how tha fuck you can implement these yo ass.
.PP
sub mput {
  my($ftp,$pattern) = \f(CW@_\fR;
  foreach mah \f(CW$file\fR (glob($pattern)) {
    \f(CW$ftp\fR\->put($file) or warn \f(CW$ftp\fR\->message;
  }
}
.PP
sub mget {
  my($ftp,$pattern) = \f(CW@_\fR;
  foreach mah \f(CW$file\fR ($ftp\->ls($pattern)) {
    \f(CW$ftp\fR\->get($file) or warn \f(CW$ftp\fR\->message;
  }
}
.SH "Usin Net::SMTP"
.IX Header "Usin Net::SMTP"
.SS "Why can't tha part of a Email address afta tha @ be used as tha hostname ?"
.IX Subsection "Why can't tha part of a Email address afta tha @ be used as tha hostname ?"
Da part of a Email address which bigs up tha @ aint necessarily a hostname,
it be a mail domain. I aint talkin' bout chicken n' gravy biatch. To find tha name of a host ta connect fo' a mail domain
you need ta do a \s-1DNS MX\s0 lookup
.SS "Why do Net::SMTP not do \s-1DNS MX\s0 lookups ?"
.IX Subsection "Why do Net::SMTP not do DNS MX lookups ?"
Net::SMTP implements tha \s-1SMTP\s0 protocol. Da \s-1DNS MX\s0 lookup aint part
of dis protocol.
.SS "Da verify method always returns legit ?"
.IX Subsection "Da verify method always returns legit ?"
Well it may seem dat way yo, but it do not. Da verify method returns true
if tha command succeeded. Y'all KNOW dat shit, muthafucka! If you pass verify a address which the
server would normally gotta forward ta another machine, tha command
will succeed wit suttin' like
.PP
.Vb 1
\&    252 Couldn\*(Aqt verify <someone@there> but will attempt delivery anyway
.Ve
.PP
This command will fail only if you pass it a address up in a thugged-out domain
the server directly delivers for, n' dat address do not exist.
.SH "Debuggin scripts"
.IX Header "Debuggin scripts"
.SS "How tha fuck can I debug mah scripts dat use Net::* modulez ?"
.IX Subsection "How tha fuck can I debug mah scripts dat use Net::* modulez ?"
Most of tha libnet client classes allow options ta be passed ta the
constructor, up in most cases one option is called \f(CW\*(C`Debug\*(C'\fR. Passing
this option wit a non-zero value will turn on a protocol trace, which
will be busted ta \s-1STDERR.\s0 This trace can be useful ta peep what tha fuck commands
are bein busted ta tha remote server n' what tha fuck responses is being
received back.
.PP
.Vb 1
\&    #!/your/path/to/perl
\&
\&    use Net::FTP;
\&
\&    mah $ftp = freshly smoked up Net::FTP($host, Debug => 1);
\&    $ftp\->login(\*(Aqgbarr\*(Aq,\*(Aqpassword\*(Aq);
\&    $ftp\->quit;
.Ve
.PP
this script would output suttin' like
.PP
.Vb 6
\& Net::FTP: Net::FTP(2.22)
\& Net::FTP:   Exporter
\& Net::FTP:   Net::Cmd(2.0801)
\& Net::FTP:   IO::Socket::INET
\& Net::FTP:     IO::Socket(1.1603)
\& Net::FTP:       IO::Handle(1.1504)
\&
\& Net::FTP=GLOB(0x8152974)<<< 220 imagine FTP server (Version wu\-2.4(5) Tue Jul 29 11:17:18 CDT 1997) ready.
\& Net::FTP=GLOB(0x8152974)>>> user gbarr
\& Net::FTP=GLOB(0x8152974)<<< 331 Password required fo' gbarr.
\& Net::FTP=GLOB(0x8152974)>>> PASS ....
\& Net::FTP=GLOB(0x8152974)<<< 230 User gbarr logged in. I aint talkin' bout chicken n' gravy biatch.  Access restrictions apply.
\& Net::FTP=GLOB(0x8152974)>>> QUIT
\& Net::FTP=GLOB(0x8152974)<<< 221 Peace out.
.Ve
.PP
Da first few lines rap  tha modulez dat Net::FTP uses n' they versions,
this is useful data ta me when a user reports a funky-ass bug. Da last seven lines
show tha communication wit tha server n' shit. Each line has three parts, n' you can put dat on yo' toast. Da first
part is tha object itself, dis is useful fo' separatin tha output
if yo ass is rockin multiple objects, n' you can put dat on yo' toast. Da second part is either \f(CW\*(C`<<<<\*(C'\fR to
show data comin from tha server or \f(CW\*(C`&gt&gt&gt&gt\*(C'\fR ta show data
goin ta tha server n' shit. Da remainder of tha line is tha command
bein busted or response bein received.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997 Graham Barr.
All muthafuckin rights reserved.
