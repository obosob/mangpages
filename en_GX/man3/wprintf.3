
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code n' manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroupz Single UNIX justification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH WPRINTF 3  2011-09-17 "GNU" "Linux Programmerz Manual"
.SH NAME
wprintf, fwprintf, swprintf, vwprintf, vfwprintf, vswprintf \- formatted
wide-characta output conversion
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.B #include <wchar.h>
.sp
.BI "int wprintf(const wchar_t *" format ", ...);"
.BI "int fwprintf(FILE *" stream ", const wchar_t *" format ", ...);"
.BI "int swprintf(wchar_t *" wcs ", size_t " maxlen ,
.BI "             const wchar_t *" format ", ...);"
.sp
.BI "int vwprintf(const wchar_t *" format ", va_list " args );
.BI "int vfwprintf(FILE *" stream ", const wchar_t *" format ", va_list " args );
.BI "int vswprintf(wchar_t *" wcs ", size_t " maxlen ,
.BI "              const wchar_t *" format ", va_list " args );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.RS 4
.\" .BR wprintf (),
.\" .BR fwprintf (),
.\" .BR swprintf (),
.\" .BR vwprintf (),
.\" .BR vfwprintf (),
.\" .BR vswprintf ():
_XOPEN_SOURCE\ >=\ 500 || _ISOC99_SOURCE ||
.br
_ISOC95_SOURCE /* Since glibc 2.12 */ ||
.br
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR wprintf ()
family of functions is
the wide-characta equivalent of the
.BR printf (3)
family of functions.
It performs formatted output of wide
characters.
.PP
The
.BR wprintf ()
and
.BR vwprintf ()
functions
perform wide-characta output to
.IR stdout .
.I stdout
must not be byte oriented; see
.BR fwide (3)
for mo' shiznit.
.PP
The
.BR fwprintf ()
and
.BR vfwprintf ()
functions
perform wide-characta output to
.IR stream .
.I stream
must not be byte oriented; see
.BR fwide (3)
for mo' shiznit.
.PP
The
.BR swprintf ()
and
.BR vswprintf ()
functions
perform wide-characta output
to a array of wide characters.
Da programmer must ensure dat there is
room fo' at least
.I maxlen
wide
charactas at
.IR wcs .
.PP
These functions is like
the
.BR printf (3),
.BR vprintf (3),
.BR fprintf (3),
.BR vfprintf (3),
.BR sprintf (3),
.BR vsprintf (3)
functions except fo' the
followin differences:
.TP
.B \(bu
The
.I format
strin be a wide-characta string.
.TP
.B \(bu
Da output consistz of wide characters, not bytes.
.TP
.B \(bu
.BR swprintf ()
and
.BR vswprintf ()
take a
.I maxlen
argument,
.BR sprintf (3)
and
.BR vsprintf (3)
do not.
.RB ( snprintf (3)
and
.BR vsnprintf (3)
take a
.I maxlen
argument yo, but these functions do not return \-1 upon
buffer overflow on Linux.)
.PP
Da treatment of tha conversion characters
.BR c
and
.B s
is different:
.TP
.B c
If no
.B l
modifier is present, the
.I int
argument is converted ta a wide characta by a cold-ass lil call ta the
.BR btowc (3)
function, n' tha resultin wide characta is written.
If an
.B l
modifier is present, the
.I wint_t
(wide character) argument is written.
.TP
.B s
If no
.B l
modifier is present: The
.I "const\ char\ *"
argument is sposed ta fuckin be a pointa ta a array of characta type
(pointa ta a string) containin a multibyte characta sequence beginning
in tha initial shift state.
Charactas from tha array is converted to
wide charactas (each by a cold-ass lil call ta the
.BR mbrtowc (3)
function wit a cold-ass lil conversion state startin up in tha initial state before
the first byte).
Da resultin wide charactas is freestyled up to
(but not including) tha terminatin null wide characta (L\(aq\\0\(aq).
If a precision is
specified, no mo' wide charactas than tha number specified is written.
Note dat tha precision determines tha number of
.I wide characters
written, not tha number of
.I bytes
or
.IR "screen positions" .
Da array must contain a terminatin null byte (\(aq\\0\(aq),
unless a precision is given
and it is so lil' small-ass dat tha number of converted wide charactas reaches it
before tha end of tha array is reached.
If an
.B l
modifier is present: The
.I "const\ wchar_t\ *"
argument is sposed ta fuckin be a pointa ta a array of wide characters.
Wide charactas from tha array is freestyled up ta (but not including) a
terminatin null wide character.
If a precision is specified, no mo' than
the number specified is written.
Da array must contain a terminatin null
wide character, unless a precision is given n' it is smalla than or equal
to tha number of wide charactas up in tha array.
.SH RETURN VALUE
Da functions return tha number of wide charactas written, excludin the
terminatin null wide characta in
case of tha functions
.BR swprintf ()
and
.BR vswprintf ().
They return \-1 when a error occurs.
.SH CONFORMING TO
C99.
.SH NOTES
Da behavior of
.BR wprintf ()
et al. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. depends
on the
.B LC_CTYPE
category of the
current locale.
.PP
If the
.I format
strin gotz nuff non-ASCII wide characters, tha program
will work erectly only if the
.B LC_CTYPE
category of tha current locale at
run time is tha same ol' dirty as the
.B LC_CTYPE
category of tha current locale at
compile time.
This is cuz the
.I wchar_t
representation is platform- n' locale-dependent.
(Da glibc represents
wide charactas rockin they Unicode (ISO-10646) code point yo, but other
platforms don't do all dis bullshit.
Also, tha use of C99 universal characta names
of tha form \\unnnn do not solve dis problem.)
Therefore, in
internationalized programs, the
.I format
strin should consist of ASCII
wide charactas only, or should be constructed at run time up in an
internationalized way (e.g., using
.BR gettext (3)
or
.BR iconv (3),
followed by
.BR mbstowcs (3)).
.SH SEE ALSO
.BR fprintf (3),
.BR fputwc (3),
.BR fwide (3),
.BR printf (3),
.BR snprintf (3)
.\" .BR wscanf (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
