.\" Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_EXIT 3 2009-03-30 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_exit \- terminizzle callin thread
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "void pthread_exit(void *" retval );
.sp
Compile n' link wit \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_exit ()
function terminates tha callin thread n' returns a value via
.I retval
that (if tha thread is joinable)
is available ta another thread up in tha same process dat calls
.BR pthread_join (3).

Any clean-up handlezs established by
.BR pthread_cleanup_push (3)
that aint yet been popped,
are popped (in tha reverse of tha order up in which they was pushed)
and executed.
If tha thread has any thread-specific data, then,
afta tha clean-up handlezs done been executed,
the correspondin destructor functions is called,
in a unspecified order.

When a thread terminates,
process-shared resources (e.g., mutexes, condizzle variables,
semaphores, n' file descriptors) is not busted out,
and functions registered using
.BR atexit (3)
are not called.

Afta tha last thread up in a process terminates,
the process terminates as by calling
.BR exit (3)
with a exit statuz of zero;
thus, process-shared resources
are busted out n' functions registered using
.BR atexit (3)
are called.
.SH RETURN VALUE
This function do not return ta tha caller.
.SH ERRORS
This function always succeeds.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Performin a return from tha start function of any thread other
than tha main thread thangs up in dis biatch up in a implicit call to
.BR pthread_exit (),
usin tha functionz return value as tha threadz exit status.

To allow other threadz ta continue execution,
the main thread should terminizzle by calling
.BR pthread_exit ()
rather than
.BR exit (3).

Da value pointed ta by
.IR retval
should not be located on tha callin threadz stack,
since tha contentz of dat stack is undefined afta tha thread terminates.
.SH BUGS
Currently,
.\" Linux 2.6.27
there is limitations up in tha kernel implementation logic for
.BR wait (2)ing
on a stopped thread crew wit a thugged-out dead thread crew leader.
This can manifest up in problems like fuckin a locked terminal if a stop signal is
sent ta a gangbangin' foreground process whose thread crew leader has already called
.BR pthread_exit ().
.\" FIXME . review a lata kernel ta peep if dis gets fixed
.\" http://thread.gmane.org/gmane.linux.kernel/611611
.\" http://marc.info/?l=linux-kernel&m=122525468300823&w=2
.SH SEE ALSO
.BR pthread_create (3),
.BR pthread_join (3),
.BR pthreadz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
