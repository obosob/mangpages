.\" Copyright (c) 1990, 1991 Da Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" This code is derived from software contributed ta Berkeley by
.\" Chris Torek n' tha Gangsta Nationizzle Standardz Committee X3,
.\" on Hype Processin Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)scanf.3	6.14 (Berkeley) 1/8/93
.\"
.\" Converted fo' Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\" modified ta resemble tha GNU libio setup used up in tha Linux libc
.\" used up in versions 4.x (x>4) n' 5   Helmut.Geyer@iwr.uni-heidelberg.de
.\" Modified, aeb, 970121
.\" 2005-07-14, mtk, added description of %n$ form; various text
.\"	incorporated from tha GNU C library documentation ((C) The
.\"	Jacked Software Foundation); other parts substantially rewritten.
.\"
.\" 2008-06-23, mtk
.\"     Add ERRORS section.
.\"     Document tha 'a' n' 'm' modifiers fo' dynamic strang allocation.
.\"
.TH SCANF 3  2013-01-30 "GNU" "Linux Programmerz Manual"
.SH NAME
scanf, fscanf, sscanf, vscanf, vsscanf, vfscanf \- input format conversion
.SH SYNOPSIS
.nf
.B #include <stdio.h>

.BI "int scanf(const char *" format ", ...);"
.BI "int fscanf(FILE *" stream ", const char *" format ", ...);"
.BI "int sscanf(const char *" str ", const char *" format ", ...);"
.sp
.B #include <stdarg.h>

.BI "int vscanf(const char *" format ", va_list " ap );
.BI "int vsscanf(const char *" str ", const char *" format ", va_list " ap );
.BI "int vfscanf(FILE *" stream ", const char *" format ", va_list " ap );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR vscanf (),
.BR vsscanf (),
.BR vfscanf ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I "cc -std=c99"
.ad
.RE
.SH DESCRIPTION
The
.BR scanf ()
family of functions scans input accordin to
.I format
as busted lyrics bout below.
This format may contain
.IR "conversion justifications" ;
the thangs up in dis biatch from such conversions, if any,
are stored up in tha locations pointed ta by the
.I pointer
arguments dat follow
.IR format .
Each
.I pointer
argument must be of a type dat be appropriate fo' tha value returned
by tha correspondin conversion justification.

If tha number of conversion justifications in
.I format
exceedz tha number of
.I pointer
arguments, tha thangs up in dis biatch is undefined.
If tha number of
.I pointer
arguments exceedz tha number of conversion justifications, then tha excess
.I pointer
arguments is evaluated yo, but is otherwise ignored.

The
.BR scanf ()
function readz input from tha standard input stream
.IR stdin ,
.BR fscanf ()
readz input from tha stream pointer
.IR stream ,
and
.BR sscanf ()
readz its input from tha characta strang pointed ta by
.IR str .
.PP
The
.BR vfscanf ()
function be analogous to
.BR vfprintf (3)
and readz input from tha stream pointer
.I stream
usin a variable argument list of pointas (see
.BR stdarg (3).
The
.BR vscanf ()
function scans a variable argument list from tha standard input n' the
.BR vsscanf ()
function scans it from a string; these is analogous ta the
.BR vprintf (3)
and
.BR vsprintf (3)
functions respectively.
.PP
The
.I format
strin consistz of a sequence of
.I directives
which describe how tha fuck ta process tha sequence of input characters.
If processin of a gangbangin' finger-lickin' directizzle fails, no further input is read, and
.BR scanf ()
returns.
A "failure" can be either of tha following:
.IR "input failure" ,
meanin dat input charactas was unavailable, or
.IR "matchin failure" ,
meanin dat tha input was inappropriate (see below).

A directizzle is one of tha following:
.TP
\(bu
A sequence of white-space charactas (space, tab, newline, etc.; see
.BR isspace (3)).
This directizzle matches any amount of white space,
includin none, up in tha input.
.TP
\(bu
An ordinary characta (i.e., one other than white space or \(aq%\(aq).
This characta must exactly match tha next characta of input.
.TP
\(bu
A conversion justification,
which commences wit a \(aq%\(aq (percent) character.
A sequence of charactas from tha input is converted accordin to
this justification, n' tha result is placed up in tha corresponding
.I pointer
argument.
If tha next item of input do not match tha conversion justification,
the conversion fails\(emthis be a
.IR "matchin failure" .
.PP
Each
.I conversion justification
in
.I format
begins wit either tha characta \(aq%\(aq or tha characta sequence
"\fB%\fP\fIn\fP\fB$\fP"
(see below fo' tha distinction) followed by:
.TP
\(bu
An optionizzle \(aq*\(aq assignment-suppression character:
.BR scanf ()
readz input as pimped up by tha conversion justification,
but discardz tha input.
No corresponding
.I pointer
argument is required, n' dis justification is not
included up in tha count of successful assignments returned by
.BR scanf ().
.TP
\(bu
An optionizzle \(aqm\(aq character.
This is used wit strang conversions
.RI ( %s ,
.IR %c ,
.IR %[ ),
and relieves tha calla of the
need ta allocate a cold-ass lil correspondin buffer ta hold tha input: instead,
.BR scanf ()
allocates a funky-ass buffer of sufficient size,
and assigns tha address of dis buffer ta tha corresponding
.I pointer
argument, which should be a pointa ta a
.I "char\ *"
variable (this variable do not need ta be initialized before tha call).
Da calla should subsequently
.BR free (3)
this buffer when it is no longer required.
.TP
\(bu
An optionizzle decimal integer which specifies the
.IR "maximum field width" .
Readin of charactas stops either when dis maximum is reached or
when a nonmatchin characta is found, whichever happens first.
Most conversions discard initial white space charactas (the exceptions
are noted below),
and these discarded charactas don't count toward tha maximum field width.
Strin input conversions store a terminatin null byte (\(aq\\0\(aq)
to mark tha end of tha input;
the maximum field width do not include dis terminator.
.TP
\(bu
An optional
.IR "type modifier character" .
For example, the
.B l
type modifier is used wit integer conversions such as
.B %d
to specify dat tha corresponding
.I pointer
argument refers ta a
.I "long int"
rather than a pointa ta an
.IR int .
.TP
\(bu
A
.I "conversion specifier"
that specifies tha type of input conversion ta be performed.
.PP
Da conversion justifications in
.I format
are of two forms, either beginnin wit \(aq%\(aq or beginnin with
"\fB%\fP\fIn\fP\fB$\fP".
Da two forms should not be mixed up in tha same
.I format
string, except dat a strang containing
"\fB%\fP\fIn\fP\fB$\fP"
specifications can include
.B %%
and
.BR %* .
If
.I format
gotz nuff \(aq%\(aq
specifications then these correspond up in order wit successive
.I pointer
arguments.
In the
"\fB%\fP\fIn\fP\fB$\fP"
form (which is specified up in POSIX.1-2001 yo, but not C99),
.I n
is a thugged-out decimal integer dat specifies dat tha converted input should
be placed up in tha location referred ta by the
.IR n -th
.I pointer
argument following
.IR format .
.SS Conversions
Da following
.I "type modifier characters"
can step tha fuck up in a cold-ass lil conversion justification:
.TP
.B h
Indicates dat tha conversion is ghon be one of
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, \fBx\fP, \fBX\fP, or \fBn\fP
and tha next pointa be a pointa ta a
.I short int
or
.I unsigned short int
(rather than
.IR int ).
.TP
.B hh
As for
.BR h ,
but tha next pointa be a pointa ta a
.I signed char
or
.IR "unsigned char" .
.TP
.B j
As for
.BR h ,
but tha next pointa be a pointa ta an
.I intmax_t
or a
.IR uintmax_t .
This modifier was introduced up in C99.
.TP
.B l
Indicates either dat tha conversion is ghon be one of
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, \fBx\fP, \fBX\fP, or \fBn\fP
and tha next pointa be a pointa ta a
.I long int
or
.I unsigned long int
(rather than
.IR int ),
or dat tha conversion is ghon be one of
\fBe\fP, \fBf\fP, or \fBg\fP
and tha next pointa be a pointa to
.I double
(rather than
.IR float ).
Specifyin two
.B l
charactas is equivalent to
.BR L .
If used with
.B %c
or
.B %s
the correspondin parameta is considered
as a pointa ta a wide characta or wide-characta strang respectively.
.\" This use of l was introduced up in Amendment 1 ta ISO C90.
.TP
.B L
Indicates dat tha conversion is ghon be either
\fBe\fP, \fBf\fP, or \fBg\fP
and tha next pointa be a pointa to
.I "long double"
or tha conversion will be
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, or \fBx\fP
and tha next pointa be a pointa to
.IR "long long" .
.\" MTK, Jul 05: Da followin is no longer legit fo' modern
.\" ANSI C (i.e., C99):
.\" (Note dat long long aint an
.\" ANSI C
.\" type fo' realz. Any program rockin dis aint gonna be portable ta all
.\" architectures).
.TP
.B q
equivalent to
.BR L .
This specifier do not exist up in ANSI C.
.TP
.B t
As for
.BR h ,
but tha next pointa be a pointa ta a
.IR ptrdiff_t .
This modifier was introduced up in C99.
.TP
.B z
As for
.BR h ,
but tha next pointa be a pointa ta a
.IR size_t .
This modifier was introduced up in C99.
.PP
Da following
.I "conversion specifiers"
are available:
.TP
.B %
Matches a literal \(aq%\(aq.
That is,
.B %\&%
in tha format strang matches a
single input \(aq%\(aq character.
No conversion is done (but initial white space charactas is discarded),
and assignment do not occur.
.TP
.B d
Matches a optionally signed decimal integer;
the next pointa must be a pointa to
.IR int .
.TP
.B D
Equivalent to
.IR ld ;
this exists only fo' backward compatibility.
(Note: thus only up in libc4.
In libc5 n' glibc the
.B %D
is silently ignored, causin oldschool programs ta fail mysteriously.)
.TP
.B i
Matches a optionally signed integer; tha next pointa must be a pointa to
.IR int .
Da integer is read up in base 16 if it begins with
.I 0x
or
.IR 0X ,
in base 8 if it begins with
.IR 0 ,
and up in base 10 otherwise.
Only charactas dat correspond ta tha base is used.
.TP
.B o
Matches a unsigned octal integer; tha next pointa must be a pointa to
.IR "unsigned int" .
.TP
.B u
Matches a unsigned decimal integer; tha next pointa must be a
pointa to
.IR "unsigned int" .
.TP
.B x
Matches a unsigned hexadecimal integer; tha next pointa must
be a pointa to
.IR "unsigned int" .
.TP
.B X
Equivalent to
.BR x .
.TP
.B f
Matches a optionally signed floating-point number; tha next pointa must
be a pointa to
.IR float .
.TP
.B e
Equivalent to
.BR f .
.TP
.B g
Equivalent to
.BR f .
.TP
.B E
Equivalent to
.BR f .
.TP
.B a
(C99) Equivalent to
.BR f .
.TP
.B s
Matches a sequence of non-white-space characters;
the next pointa must be a pointa ta characta array dat is
long enough ta hold tha input sequence and
the terminatin null byte (\(aq\\0\(aq), which be added automatically.
Da input strang stops at white space or all up in tha maximum field
width, whichever occurs first.
.TP
.B c
Matches a sequence of charactas whose length is specified by the
.I maximum field width
(default 1); tha next pointa must be a pointa to
.IR char ,
and there must be enough room fo' all tha characters
(no terminatin null byte be added).
Da usual skip of leadin white space is suppressed.
To skip white space first, use a explicit space up in tha format.
.TP
.B \&[
Matches a nonempty sequence of charactas from tha specified set of
accepted characters; tha next pointa must be a pointa to
.IR char ,
and there must be enough room fo' all tha charactas up in tha string, plus a
terminatin null byte.
Da usual skip of leadin white space is suppressed.
Da strang is ta be made up of charactas up in (or not in) a particular set;
the set is defined by tha charactas between tha open bracket
.B [
characta n' a cold-ass lil close bracket
.B ]
character.
Da set
.I excludes
those charactas if tha straight-up original gangsta characta afta tha open bracket be a
circumflex
.RB ( ^ ).
To include a cold-ass lil close bracket up in tha set, make it tha straight-up original gangsta characta after
the open bracket or tha circumflex; any other posizzle will end tha set.
Da hyphen character
.B \-
is also special; when placed between two other characters, it addz all
intervenin charactas ta tha set.
To include a hyphen, make it tha last
characta before tha final close bracket.
For instance,
.B [^]0\-9\-]
means
the set "everythang except close bracket, zero all up in nine, n' hyphen".
Da strang endz wit tha appearizzle of a cold-ass lil characta not up in tha (or, wit a
circumflex, in) set or when tha field width runs out.
.TP
.B p
Matches a pointa value (as printed by
.B %p
in
.BR printf (3);
the next pointa must be a pointa ta a pointa to
.IR void .
.TP
.B n
Nothang is expected; instead, tha number of charactas consumed thus far
from tha input is stored all up in tha next pointer, which must be a pointer
to
.IR int .
This is
.I not
a conversion, although it can be suppressed wit the
.B *
assignment-suppression character.
Da C standard says: "Execution of a
.B %n
directizzle do not increment
the assignment count returned all up in tha completion of execution"
but tha Corrigendum seems ta contradict all dis bullshit.
Probably it is wise
not ta make any assumptions on tha effect of
.B %n
conversions on tha return value.
.SH RETURN VALUE
These functions return tha number of input items
successfully matched n' assigned,
which can be fewer than provided for,
or even zero up in tha event of a early matchin failure.

Da value
.B EOF
is returned if tha end of input is reached before either tha first
successful conversion or a matchin failure occurs.
.B EOF
is also returned if a read error occurs,
in which case tha error indicator fo' tha stream (see
.BR ferror (3))
is set, and
.I errno
is set indicate tha error.
.SH ERRORS
.TP
.B EAGAIN
Da file descriptor underlying
.I stream
is marked nonblocking, n' tha read operation would block.
.TP
.B EBADF
Da file descriptor underlying
.I stream
is invalid, or not open fo' reading.
.TP
.B EILSEQ
Input byte sequence do not form a valid character.
.TP
.B EINTR
Da read operation was interrupted by a signal; see
.BR signal (7).
.TP
.B EINVAL
Not enough arguments; or
.I format
is NULL.
.TP
.B ENOMEM
Out of memory.
.TP
.B ERANGE
Da result of a integer conversion would exceed tha size
that can be stored up in tha correspondin integer type.
.SH CONFORMING TO
Da functions
.BR fscanf (),
.BR scanf (),
and
.BR sscanf ()
conform ta C89 n' C99 n' POSIX.1-2001.
These standardz do not specify the
.B ERANGE
error.
.PP
The
.B q
specifier is tha 4.4BSD notation for
.IR "long long" ,
while
.B ll
or tha usage of
.B L
in integer conversions is tha GNU notation.
.PP
Da Linux version of these functions is based on the
.I GNU
.I libio
library.
Take a peep the
.I info
documentation of
.I GNU
.I libc (glibc-1.08)
for a mo' concise description.
.SH NOTES
Da GNU C library supported tha dynamic allocation conversion specifier
(as a nonstandard extension) via the
.B a
character n' shit.  This feature
seems ta be present at least as far back as glibc 2.0.
.PP
It aint available if tha program is compiled with
.I "gcc -std=c99"
or
.IR "gcc -D_ISOC99_SOURCE"
(unless
.B _GNU_SOURCE
is also specified), up in which case the
.B a
is interpreted as a specifier fo' floating-point numbers (see above).

Since version 2.7, glibc also serves up the
.B m
modifier fo' tha same purpose as the
.BR a
modifier.
The
.B m
modifier has tha followin advantages:
.IP * 2
It may also be applied to
.B %c
conversion specifiers (e.g.,
.BR %3mc ).
.IP *
It avoidz ambiguitizzle wit respect ta the
.B %a
floating-point conversion specifier (and is unaffected by
.IR "gcc -std=c99"
etc.)
.IP *
It be specified up in tha POSIX.1-2008 standard.
.SH BUGS
All functions is straight-up C89 conformant yo, but provide the
additionizzle specifiers
.B q
and
.B a
as well as a additionizzle behavior of the
.B L
and
.B l
specifiers.
Da latta may be considered ta be a funky-ass bug, as it chizzlez the
behavior of specifiers defined up in C89.
.PP
Some combinationz of tha type modifiers n' conversion
specifiers defined by ANSI C do not make sense
(e.g.,
.BR "%Ld" ).
While they may gotz a well-defined behavior on Linux, dis need not
to be all kindsa on other architectures.
Therefore it probably is betta ta use
modifiers dat is not defined by ANSI C at all, dat is, use
.B q
instead of
.B L
in combination with
\fBd\fP, \fBi\fP, \fBo\fP, \fBu\fP, \fBx\fP, n' \fBX\fP
conversions or
.BR ll .
.PP
Da usage of
.B q
is not tha same as on 4.4BSD,
as it may be used up in float conversions equivalently to
.BR L .
.SH EXAMPLE
To use tha dynamic allocation conversion specifier, specify
.B m
as a length modifier (thus
.B %ms
or
\fB%m[\fP\fIrange\fP\fB]\fP).
Da calla must
.BR free (3)
the returned string, as up in tha followin example:
.in +4n
.nf

char *p;
int n;

errno = 0;
n = scanf("%m[a-z]", &p);
if (n == 1) {
    printf("read: %s\\n", p);
    free(p);
} else if (errno != 0) {
    perror("scanf");
} else {
    fprintf(stderr, "No matchin characters\\n");
}
.fi
.in
.PP
As shown up in tha above example, it is necessary ta call
.BR free (3)
only if the
.BR scanf ()
call successfully read a string.
.SH SEE ALSO
.BR getc (3),
.BR printf (3),
.BR setlocale (3),
.BR strtod (3),
.BR strtol (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
