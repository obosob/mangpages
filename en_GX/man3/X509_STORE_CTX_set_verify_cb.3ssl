.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509_STORE_CTX_set_verify_cb 3"
.TH X509_STORE_CTX_set_verify_cb 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
X509_STORE_CTX_set_verify_cb \- set verification callback
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/x509_vfy.h>
\&
\& void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,
\&                                int (*verify_cb)(int ok, X509_STORE_CTX *ctx));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIX509_STORE_CTX_set_verify_cb()\fR sets tha verification callback of \fBctx\fR to
\&\fBverify_cb\fR overwritin any existin callback.
.PP
Da verification callback can be used ta customise tha operation of certificate
verification, either by overridin error conditions or loggin errors for
debuggin purposes.
.PP
However a verification callback is \fBnot\fR essential n' tha default operation
is often sufficient.
.PP
Da \fBok\fR parameta ta tha callback indicates tha value tha callback should
return ta retain tha default behaviour. Shiiit, dis aint no joke. If it is zero then n' error condition
is indicated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If it is 1 then no error occurred. Y'all KNOW dat shit, muthafucka! If tha flag
\&\fBX509_V_FLAG_NOTIFY_POLICY\fR is set then \fBok\fR is set ta 2 ta indicate the
policy checkin is complete.
.PP
Da \fBctx\fR parameta ta tha callback is tha \fBX509_STORE_CTX\fR structure that
is struttin tha verification operation. I aint talkin' bout chicken n' gravy biatch fo' realz. A callback can examine this
structure n' receive additionizzle shiznit bout tha error, fo' example
by callin \fIX509_STORE_CTX_get_current_cert()\fR fo' realz. Additionizzle application data can
be passed ta tha callback via tha \fBex_data\fR mechanism.
.SH "WARNING"
.IX Header "WARNING"
In general a verification callback should \fB\s-1NOT\s0\fR unconditionally return 1 in
all circumstances cuz dis will allow verification ta succeed no matter
what tha error. Shiiit, dis aint no joke. This effectively removes all securitizzle from tha application
because \fBany\fR certificate (includin untrusted generated ones) will be
accepted.
.SH "NOTES"
.IX Header "NOTES"
Da verification callback can be set n' inherited from tha parent structure
performin tha operation. I aint talkin' bout chicken n' gravy biatch. In some cases (like fuckin S/MIME verification) the
\&\fBX509_STORE_CTX\fR structure is pimped n' destroyed internally n' the
only way ta set a cold-ass lil custom verification callback is by inheritin it from the
associated \fBX509_STORE\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIX509_STORE_CTX_set_verify_cb()\fR do not return a value.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Default callback operation:
.PP
.Vb 4
\& int verify_callback(int ok, X509_STORE_CTX *ctx)
\&        {
\&        return ok;
\&        }
.Ve
.PP
Simple example, suppose a cold-ass lil certificate up in tha chain is expired n' we wish
to continue afta dis error:
.PP
.Vb 8
\& int verify_callback(int ok, X509_STORE_CTX *ctx)
\&        {
\&        /* Tolerate certificate expiration */
\&        if (X509_STORE_CTX_get_error(ctx) == X509_V_ERR_CERT_HAS_EXPIRED)
\&                        return 1;
\&        /* Otherwise don\*(Aqt override */
\&        return ok;
\&        }
.Ve
.PP
Mo' complex example, our phat asses don't wish ta continue afta \fBany\fR certificate has
expired just one specific case:
.PP
.Vb 11
\& int verify_callback(int ok, X509_STORE_CTX *ctx)
\&        {
\&        int err = X509_STORE_CTX_get_error(ctx);
\&        X509 *err_cert = X509_STORE_CTX_get_current_cert(ctx);
\&        if (err == X509_V_ERR_CERT_HAS_EXPIRED)
\&                {
\&                if (check_is_acceptable_expired_cert(err_cert)
\&                        return 1;
\&                }
\&        return ok;
\&        }
.Ve
.PP
Full featured loggin callback. In dis case tha \fBbio_err\fR be assumed ta be
a global loggin \fB\s-1BIO\s0\fR, a alternatizzle would ta store a \s-1BIO\s0 up in \fBctx\fR using
\&\fBex_data\fR.
.PP
.Vb 4
\& int verify_callback(int ok, X509_STORE_CTX *ctx)
\&        {
\&        X509 *err_cert;
\&        int err,depth;
\&
\&        err_cert = X509_STORE_CTX_get_current_cert(ctx);
\&        err =   X509_STORE_CTX_get_error(ctx);
\&        depth = X509_STORE_CTX_get_error_depth(ctx);
\&
\&        BIO_printf(bio_err,"depth=%d ",depth);
\&        if (err_cert)
\&                {
\&                X509_NAME_print_ex(bio_err, X509_get_subject_name(err_cert),
\&                                        0, XN_FLAG_ONELINE);
\&                BIO_puts(bio_err, "\en");
\&                }
\&        else
\&                BIO_puts(bio_err, "<no cert>\en");
\&        if (!ok)
\&                BIO_printf(bio_err,"verify error:num=%d:%s\en",err,
\&                        X509_verify_cert_error_string(err));
\&        switch (err)
\&                {
\&        case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
\&                BIO_puts(bio_err,"issuer= ");
\&                X509_NAME_print_ex(bio_err, X509_get_issuer_name(err_cert),
\&                                        0, XN_FLAG_ONELINE);
\&                BIO_puts(bio_err, "\en");
\&                break;
\&        case X509_V_ERR_CERT_NOT_YET_VALID:
\&        case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:
\&                BIO_printf(bio_err,"notBefore=");
\&                ASN1_TIME_print(bio_err,X509_get_notBefore(err_cert));
\&                BIO_printf(bio_err,"\en");
\&                break;
\&        case X509_V_ERR_CERT_HAS_EXPIRED:
\&        case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:
\&                BIO_printf(bio_err,"notAfter=");
\&                ASN1_TIME_print(bio_err,X509_get_notAfter(err_cert));
\&                BIO_printf(bio_err,"\en");
\&                break;
\&        case X509_V_ERR_NO_EXPLICIT_POLICY:
\&                policies_print(bio_err, ctx);
\&                break;
\&                }
\&        if (err == X509_V_OK && aiiight == 2)
\&                /* print up policies */
\&
\&        BIO_printf(bio_err,"verify return:%d\en",ok);
\&        return(ok);
\&        }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIX509_STORE_CTX_get_error\fR\|(3)
\&\fIX509_STORE_set_verify_cb_func\fR\|(3)
\&\fIX509_STORE_CTX_get_ex_new_index\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIX509_STORE_CTX_set_verify_cb()\fR be available up in all versionz of SSLeay and
OpenSSL.
