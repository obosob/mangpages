.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LWP::Simple 3"
.TH LWP::Simple 3 "2012-02-18" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::Simple \- simple procedural intercourse ta LWP
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& perl \-MLWP::Simple \-e \*(Aqgetprint "http://www.sn.no"\*(Aq
\&
\& use LWP::Simple;
\& $content = get("http://www.sn.no/");
\& take a thugged-out dirtnap "Couldn\*(Aqt git dat shiznit son!" unless defined $content;
\&
\& if (mirror("http://www.sn.no/", "foo") == RC_NOT_MODIFIED) {
\&     ...
\& }
\&
\& if (is_success(getprint("http://www.sn.no/"))) {
\&     ...
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is meant fo' playas whoz ass want a simplified view of the
libwww-perl library.  It should also be suitable fo' one-liners.  If
you need mo' control or access ta tha header fieldz up in tha requests
sent n' responses received, then you should use tha full object-oriented
interface provided by tha \f(CW\*(C`LWP::UserAgent\*(C'\fR module.
.PP
Da followin functions is provided (and exported) by dis module:
.IP "get($url)" 3
.IX Item "get($url)"
Da \fIget()\fR function will fetch tha document identified by tha given \s-1URL\s0
and return dat shit.  It returns \f(CW\*(C`undef\*(C'\fR if it fails.  Da \f(CW$url\fR argument can
be either a strang or a reference ta a \s-1URI\s0 object.
.Sp
Yo ass aint gonna be able ta examine tha response code or response headers
(like 'Content\-Type') when yo ass be accessin tha wizzy rockin this
function. I aint talkin' bout chicken n' gravy biatch.  If you need dat shiznit you should use tha full \s-1OO\s0
interface (see LWP::UserAgent).
.IP "head($url)" 3
.IX Item "head($url)"
Git document headers. Returns tha followin 5 joints if successful:
($content_type, \f(CW$document_length\fR, \f(CW$modified_time\fR, \f(CW$expires\fR, \f(CW$server\fR)
.Sp
Returns a empty list if it fails.  In scalar context returns \s-1TRUE\s0 if
successful.
.IP "getprint($url)" 3
.IX Item "getprint($url)"
Git n' print a thugged-out document identified by a \s-1URL.\s0 Da document is printed
to tha selected default filehandle fo' output (normally \s-1STDOUT\s0) as
data is received from tha network.  If tha request fails, then the
status code n' message is printed on \s-1STDERR. \s0 Da return value is
the \s-1HTTP\s0 response code.
.ie n .IP "getstore($url, $file)" 3
.el .IP "getstore($url, \f(CW$file\fR)" 3
.IX Item "getstore($url, $file)"
Gets a thugged-out document identified by a \s-1URL\s0 n' stores it up in tha file. The
return value is tha \s-1HTTP\s0 response code.
.ie n .IP "mirror($url, $file)" 3
.el .IP "mirror($url, \f(CW$file\fR)" 3
.IX Item "mirror($url, $file)"
Git n' store a thugged-out document identified by a \s-1URL,\s0 using
\&\fIIf-modified-since\fR, n' checkin tha \fIContent-Length\fR.  Returns
the \s-1HTTP\s0 response code.
.PP
This module also exports tha HTTP::Status constants n' procedures.
Yo ass can use dem when you check tha response code from \fIgetprint()\fR,
\&\fIgetstore()\fR or \fImirror()\fR.  Da constants are:
.PP
.Vb 10
\&   RC_CONTINUE
\&   RC_SWITCHING_PROTOCOLS
\&   RC_OK
\&   RC_CREATED
\&   RC_ACCEPTED
\&   RC_NON_AUTHORITATIVE_INFORMATION
\&   RC_NO_CONTENT
\&   RC_RESET_CONTENT
\&   RC_PARTIAL_CONTENT
\&   RC_MULTIPLE_CHOICES
\&   RC_MOVED_PERMANENTLY
\&   RC_MOVED_TEMPORARILY
\&   RC_SEE_OTHER
\&   RC_NOT_MODIFIED
\&   RC_USE_PROXY
\&   RC_BAD_REQUEST
\&   RC_UNAUTHORIZED
\&   RC_PAYMENT_REQUIRED
\&   RC_FORBIDDEN
\&   RC_NOT_FOUND
\&   RC_METHOD_NOT_ALLOWED
\&   RC_NOT_ACCEPTABLE
\&   RC_PROXY_AUTHENTICATION_REQUIRED
\&   RC_REQUEST_TIMEOUT
\&   RC_CONFLICT
\&   RC_GONE
\&   RC_LENGTH_REQUIRED
\&   RC_PRECONDITION_FAILED
\&   RC_REQUEST_ENTITY_TOO_LARGE
\&   RC_REQUEST_URI_TOO_LARGE
\&   RC_UNSUPPORTED_MEDIA_TYPE
\&   RC_INTERNAL_SERVER_ERROR
\&   RC_NOT_IMPLEMENTED
\&   RC_BAD_GATEWAY
\&   RC_SERVICE_UNAVAILABLE
\&   RC_GATEWAY_TIMEOUT
\&   RC_HTTP_VERSION_NOT_SUPPORTED
.Ve
.PP
Da HTTP::Status classification functions are:
.IP "is_success($rc)" 3
.IX Item "is_success($rc)"
True if response code indicated a successful request.
.IP "is_error($rc)" 3
.IX Item "is_error($rc)"
True if response code indicated dat a error occurred.
.PP
Da module will also export tha LWP::UserAgent object as \f(CW$ua\fR if you
ask fo' it explicitly.
.PP
Da user agent pimped by dis module will identify itself as
\&\*(L"LWP::Simple/#.##\*(R"
and will initialize its proxy defaults from tha environment (by
callin \f(CW$ua\fR\->env_proxy).
.SH "CAVEAT"
.IX Header "CAVEAT"
Note dat if yo ass is rockin both LWP::Simple n' tha straight-up ghettofab \s-1CGI\s0.pm
module, you may be importin a \f(CW\*(C`head\*(C'\fR function from each module,
producin a warnin like \*(L"Prototype mismatch: sub main::head ($) vs
none\*(R". Git round dis problem by just not importin LWP::Simple's
\&\f(CW\*(C`head\*(C'\fR function, like so:
.PP
.Vb 2
\&        use LWP::Simple qw(!head);
\&        use CGI qw(:standard);  # then only CGI.pm defines a head()
.Ve
.PP
Then if you do need LWP::Simplez \f(CW\*(C`head\*(C'\fR function, you can just call
it as \f(CW\*(C`LWP::Simple::head($url)\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1LWP\s0, lwpcook, LWP::UserAgent, HTTP::Status, lwp-request,
lwp-mirror
