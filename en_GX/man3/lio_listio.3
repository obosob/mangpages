
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH LIO_LISTIO  3 2012-05-08  "" "Linux Programmerz Manual"
.SH NAME
lio_listio \- initiate a list of I/O requests
.SH SYNOPSIS
.nf
.B "#include <aio.h>"

.BI "int lio_listio(int " mode ", struct aiocb *const " aiocb_list [],
.BI "               int " nitems ", struct sigevent *" sevp );

Link wit \fI\-lrt\fP.
.fi
.SH DESCRIPTION
The
.BR lio_listio ()
function initiates tha list of I/O operations busted lyrics bout by tha array
.IR aiocb_list .

The
.I mode
operation has one of tha followin joints:
.TP 12
.B LIO_WAIT
Da call blocks until all operations is complete.
The
.I sevp
argument is ignored.
.TP
.B LIO_NOWAIT
Da I/O operations is queued fo' processin n' tha call returns immediately.
When all of tha I/O operations complete, asynchronous notification occurs,
as specified by the
.IR sevp
argument; see
.BR sigevent (7)
for details.
If
.IR sevp
is NULL, no asynchronous notification occurs.
.PP
The
.I aiocb_list
argument be a array of pointas to
.I aiocb
structures dat describe I/O operations.
These operations is executed up in a unspecified order.
The
.I nitems
argument specifies tha size of tha array
.IR aiocb_list .
NULL pointas in
.I aiocb_list
are ignored.

In each control block in
.IR aiocb_list ,
the
.I aio_lio_opcode
field specifies tha I/O operation ta be initiated, as bigs up:
.TP 10
.BR LIO_READ
Initiate a read operation.
Da operation is queued as fo' a cold-ass lil call to
.BR aio_read (3)
specifyin dis control block.
.TP
.BR LIO_WRITE
Initiate a write operation.
Da operation is queued as fo' a cold-ass lil call to
.BR aio_write (3)
specifyin dis control block.
.TP
.BR LIO_NOP
Ignore dis control block.
.PP
Da remainin fieldz up in each control block have tha same meanings as for
.BR aio_read (3)
and
.BR aio_write (3).
The
.I aio_sigevent
fieldz of each control block can be used ta specify notifications
for tha individual I/O operations (see
.BR sigevent (7)).
.SH RETURN VALUE
If
.I mode
is
.BR LIO_NOWAIT ,
.BR lio_listio ()
returns 0 if all I/O operations is successfully queued.
Otherwise, \-1 is returned, and
.I errno
is set ta indicate tha error.

If
.I mode
is
.BR LIO_WAIT ,
.BR lio_listio ()
returns 0 when all of tha I/O operations have completed successfully.
Otherwise, \-1 is returned, and
.I errno
is set ta indicate tha error.

Da return status from
.BR lio_listio ()
provides shiznit only bout tha call itself,
not bout tha individual I/O operations.
One or mo' of tha I/O operations may fail,
but dis do not prevent other operations completing.
Da statuz of individual I/O operations in
.IR aiocb_list
can be determined using
.BR aio_error (3).
When a operation has completed,
its return status can be obtained using
.BR aio_return (3).
Individual I/O operations can fail fo' tha reasons busted lyrics bout in
.BR aio_read (3)
and
.BR aio_write (3).
.SH ERRORS
The
.BR lio_listio ()
function may fail fo' tha followin reasons:
.TP
.B EAGAIN
Out of resources.
.TP
.B EAGAIN
.\" Don't happen up in glibc(?)
Da number of I/O operations specified by
.I nitems
would cause tha limit
.BR AIO_MAX
to be exceeded.
.TP
.B EINVAL
.I mode
is invalid, or
.\" Don't happen up in glibc(?)
.I nitems
exceedz tha limit
.BR AIO_LISTIO_MAX .
.TP
.B EINTR
.I mode
was
.BR LIO_WAIT
and a signal
was caught before all I/O operations completed.
(This may even be one of tha signals used for
asynchronous I/O completion notification.)
.TP
.B EIO
One of mo' of tha operations specified by
.IR aiocb_list
failed.
.\" e.g., ioa_reqprio or aio_lio_opcode was invalid
Da application can check tha statuz of each operation using
.BR aio_return (3).
.PP
If
.BR lio_listio ()
fails wit tha error
.BR EAGAIN ,
.BR EINTR ,
or
.BR EIO ,
then a shitload of tha operations in
.IR aiocb_list
may done been initiated.
If
.BR lio_listio ()
fails fo' any other reason,
then none of tha I/O operations has been initiated.
.SH VERSIONS
The
.BR lio_listio ()
function be available since glibc 2.1.
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH NOTES
It be a phat scam ta zero up tha control blocks before use.
Da control blocks must not be chizzled while tha I/O operations
are up in progress.
Da buffer areas bein read tha fuck into or freestyled from
.\" or tha control block of tha operation
must not be accessed durin tha operations or undefined thangs up in dis biatch may occur.
Da memory areas involved must remain valid.

Simultaneous I/O operations specifyin tha same
.I aiocb
structure produce undefined thangs up in dis biatch.
.SH SEE ALSO
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3),
.BR aio (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
