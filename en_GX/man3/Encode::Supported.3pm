.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Encode::Supported 3"
.TH Encode::Supported 3 "2013-02-18" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Encode::Supported \-\- Encodings supported by Encode
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Encodin Names"
.IX Subsection "Encodin Names"
Encodin names is case insensitive. White space up in names
is ignored. Y'all KNOW dat shit, muthafucka!  In addition, a encodin may have aliases.
Each encodin has one \*(L"canonical\*(R" name.  Da \*(L"canonical\*(R"
name is chosen from tha namez of tha encodin by picking
the first up in tha followin sequence (with all dem exceptions).
.IP "\(bu" 2
Da name used by tha Perl hood.  That includes 'utf8' n' 'ascii'.
Unlike aliases, canonical names directly reach tha method so such
frequently used lyrics like 'utf8' don't need ta do alias lookups.
.IP "\(bu" 2
Da \s-1MIME\s0 name as defined up in \s-1IETF\s0 RFCs.  This includes all \*(L"iso\-\*(R"s.
.IP "\(bu" 2
Da name up in tha \s-1IANA\s0 registry.
.IP "\(bu" 2
Da name used by tha organization dat defined dat shit.
.PP
In case \fIde jure\fR canonical names differ from dat of tha Encode
module, they is always aliased if it eva be implemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  So you can
safely tell if a given encodin is implemented or not just by passin 
the canonical name.
.PP
Because of all tha alias issues, n' cuz up in tha general case 
encodings have state, \*(L"Encode\*(R" uses a encodin object internally 
once a operation is up in progress.
.SH "Supported Encodings"
.IX Header "Supported Encodings"
Az of Perl 5.8.0, at least tha followin encodings is recognized.
Note dat unless otherwise specified, they is all case insensitive
(via alias) n' all occurrence of spaces is replaced wit '\-'.
In other lyrics, \*(L"\s-1ISO 8859 1\*(R"\s0 n' \*(L"iso\-8859\-1\*(R" is identical.
.PP
Encodings is categorized n' implemented up in nuff muthafuckin different modules
but you don't gotta \f(CW\*(C`use Encode::XX\*(C'\fR ta make dem available for
most cases.  Encode.pm will automatically load dem modulez on demand.
.SS "Built-in Encodings"
.IX Subsection "Built-in Encodings"
Da followin encodings is always available.
.PP
.Vb 8
\&  Canonical     Aliases                      Comments & References
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  ascii         US\-ascii ISO\-646\-US                         [ECMA]
\&  ascii\-ctrl                                      Special Encoding
\&  iso\-8859\-1    latin1                                       [ISO]
\&  null                                            Special Encoding
\&  utf8          UTF\-8                                    [RFC2279]
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
\&\fInull\fR n' \fIascii-ctrl\fR is special. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  \*(L"null\*(R" fails fo' all character
so when you set fallback mode ta \s-1PERLQQ, HTMLCREF\s0 or \s-1XMLCREF, ALL
CHARACTERS\s0 will fall back ta characta references.  Ditto for
\&\*(L"ascii-ctrl\*(R" except fo' control characters.  For fallback modes, see
Encode.
.SS "Encode::Unicode \*(-- other Unicode encodings"
.IX Subsection "Encode::Unicode other Unicode encodings"
Unicode codin schemes other than natizzle utf8 is supported by
Encode::Unicode, which is ghon be autoloaded on demand.
.PP
.Vb 11
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  UCS\-2BE       UCS\-2, iso\-10646\-1                      [IANA, UC]
\&  UCS\-2LE                                                     [UC]
\&  UTF\-16                                                      [UC]
\&  UTF\-16BE                                                    [UC]
\&  UTF\-16LE                                                    [UC]
\&  UTF\-32                                                      [UC]
\&  UTF\-32BE      UCS\-4                                         [UC]
\&  UTF\-32LE                                                    [UC]
\&  UTF\-7                                                  [RFC2152]
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
To find how tha fuck (UCS\-2|UTF\-(16|32))(LE|BE), biatch? differ from one another,
see Encode::Unicode.
.PP
\&\s-1UTF\-7\s0 be a special encodin which \*(L"re-encodes\*(R" \s-1UTF\-16BE\s0 tha fuck into a 7\-bit
encoding.  It be implemented separately by Encode::Unicode::UTF7.
.SS "Encode::Byte \*(-- Extended \s-1ASCII\s0"
.IX Subsection "Encode::Byte Extended ASCII"
Encode::Byte implements most single-byte encodings except for
Symbols n' \s-1EBCDIC.\s0 Da followin encodings is based on single-byte
encodings implemented as extended \s-1ASCII. \s0 Most of dem map
\&\ex80\-\exff (upper half) ta non-ASCII characters.
.IP "\s-1ISO\-8859\s0 n' correspondin vendor mappings" 2
.IX Item "ISO-8859 n' correspondin vendor mappings"
Since there be all kindsa many, they is presented up in table format with
languages n' correspondin encodin names by vendors.  Note that
the table is sorted up in order of \s-1ISO\-8859\s0 n' tha correspondin vendor
mappings is slightly different from dat of \s-1ISO. \s0 See
<http://czyborra.com/charsets/iso8859.html> fo' details.
.Sp
.Vb 10
\&  Lang/Regions  ISO/Other Std. Y'all KNOW dat shit, muthafucka!  DOS     Windows Macintosh  Others
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  N fo' realz. Tha Ghetto    (ASCII)         cp437        AdobeStandardEncoding
\&                                cp863 (DOSCanadaF)
\&  W. Europe     iso\-8859\-1      cp850   cp1252  MacRoman  nextstep
\&                                                         hp\-roman8
\&                                cp860 (DOSPortuguese)
\&  Cntrl. Europe iso\-8859\-2      cp852   cp1250  MacCentralEurRoman
\&                                                MacCroatian
\&                                                MacRomanian
\&                                                MacRumanian
\&  Latin3[1]     iso\-8859\-3      
\&  Latin4[2]     iso\-8859\-4              
\&  Cyrillics     iso\-8859\-5      cp855   cp1251  MacCyrillic
\&    (See also next section)     cp866           MacUkrainian
\&  Arabic        iso\-8859\-6      cp864   cp1256  MacArabic
\&                                cp1006          MacFarsi
\&  Greek         iso\-8859\-7      cp737   cp1253  MacGreek
\&                                cp869 (DOSGreek2)
\&  Hebrew        iso\-8859\-8      cp862   cp1255  MacHebrew
\&  Turkish       iso\-8859\-9      cp857   cp1254  MacTurkish
\&  Nordics       iso\-8859\-10     cp865
\&                                cp861           MacIcelandic
\&                                                MacSami
\&  Thai          iso\-8859\-11[3]  cp874           MacThai
\&  (iso\-8859\-12 is nonexistent. Reserved fo' Indics?)
\&  Baltics       iso\-8859\-13     cp775           cp1257
\&  Celtics       iso\-8859\-14
\&  Latin9 [4]    iso\-8859\-15
\&  Latin10       iso\-8859\-16
\&  Vietnamese    viscii                  cp1258  MacVietnamese
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&  [1] Esperanto, Maltese, n' Turkish. Turkish is now on 8859\-9.
\&  [2] Baltics.  Now on 8859\-10, except fo' Latvian.
\&  [3] TIS 620 +  Non\-Breakin Space (0xA0 / U+00A0)
\&  [4] Nicknamed Latin0; tha Euro sign as well as French n' Finnish
\&      lettas dat is missin from 8859\-1 was added.
.Ve
.Sp
All cp* is also available as ibm\-*, ms\-*, n' windows\-* .  See also
<http://czyborra.com/charsets/codepages.html>.
.Sp
Macintosh encodings don't seem ta be registered up in such entitizzles as
\&\s-1IANA.  \s0\*(L"Canonical\*(R" names up in Encode is based upon Applez Tech Note
1150.  See <http://developer.apple.com/technotes/tn/tn1150.html> 
for details.
.IP "\s-1KOI8 \-\s0 De Facto Standard fo' tha Cyrillic ghetto" 2
.IX Item "KOI8 - De Facto Standard fo' tha Cyrillic ghetto"
Though \s-1ISO\-8859\s0 do have \s-1ISO\-8859\-5,\s0 tha \s-1KOI8\s0 series is far more
popular up in tha Net.   Encode comes wit tha followin \s-1KOI\s0 charsets.
For gory details, peep <http://czyborra.com/charsets/cyrillic.html>
.Sp
.Vb 5
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  koi8\-f                                        
\&  koi8\-r cp878                                           [RFC1489]
\&  koi8\-u                                                 [RFC2319]
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SS "gsm0338 \- Hentai Latin 1"
.IX Subsection "gsm0338 - Hentai Latin 1"
\&\s-1GSM0338\s0 is fo' \s-1GSM\s0 handsets, n' you can put dat on yo' toast. Though it shares alphanumerals with
\&\s-1ASCII,\s0 control characta ranges n' other parts is mapped hella
differently, mainly ta store Greek characters.  There is also escape
sequences (startin wit 0x1B) ta cover e.g. tha Euro sign.
.PP
This was once handled by Encode::Bytes but cuz of all them
unusual justifications, Encode 2.20 has relocated tha support to
Encode::GSM0338. Right back up in yo muthafuckin ass. See Encode::GSM0338 fo' details.
.IP "gsm0338 support before 2.19" 2
.IX Item "gsm0338 support before 2.19"
Some special cases like a trailin 0x00 byte or a lone 0x1B byte is not
well-defined n' \fIdecode()\fR will return a empty strang fo' em.
One possible workaround is
.Sp
.Vb 3
\&   $gsm =~ s/\ex00\ez/\ex00\ex00/;
\&   $uni = decode("gsm0338", $gsm);
\&   $uni .= "\exA0" if $gsm =~ /\ex1B\ez/;
.Ve
.Sp
Note dat tha Encode implementation of \s-1GSM0338\s0 do not implement the
reuse of Latin capital lettas as Greek capital lettas (for example,
the 0x5A is U+005A (\s-1LATIN CAPITAL LETTER Z\s0), not U+0396 (\s-1GREEK CAPITAL
LETTER ZETA\s0).
.Sp
Da \s-1GSM0338\s0 be also covered up in Encode::Byte even though it is not
an \*(L"extended \s-1ASCII\*(R"\s0 encoding.
.SS "\s-1CJK:\s0 Chinese, Japanese, Korean (Multibyte)"
.IX Subsection "CJK: Chinese, Japanese, Korean (Multibyte)"
Note dat Vietnamese is listed above.  Also read \*(L"Encodin vs Charset\*(R"
below.  Also note dat these is implemented up in distinct modulez by
countries, cuz of tha size concerns (simplified Chinese is mapped
to '\s-1CN\s0', continental China, while traditionizzle Chinese is mapped to
\&'\s-1TW\s0', Taiwan).  Please refer ta they respectizzle documentation pages.
.IP "Encode::CN \*(-- Continental China" 2
.IX Item "Encode::CN Continental China"
.Vb 9
\&  Standard      DOS/Win Macintosh                Comment/Reference
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  euc\-cn [1]            MacChineseSimp
\&  (gbk)         cp936 [2]
\&  gb12345\-raw                      { GB12345 without CES }
\&  gb2312\-raw                       { GB2312  without CES }
\&  hz
\&  iso\-ir\-165
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&  [1] GB2312 be aliased ta all dis bullshit.  See L<Microsoft\-related namin mess>
\&  [2] gbk be aliased ta all dis bullshit.  See L<Microsoft\-related namin mess>
.Ve
.IP "Encode::JP \*(-- Japan" 2
.IX Item "Encode::JP Japan"
.Vb 11
\&  Standard      DOS/Win Macintosh                Comment/Reference
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  euc\-jp
\&  shiftjis      cp932   macJapanese
\&  7bit\-jis
\&  iso\-2022\-jp                                            [RFC1468]
\&  iso\-2022\-jp\-1                                          [RFC2237]
\&  jis0201\-raw  { JIS X 0201 (roman + halfwidth kana) without CES }
\&  jis0208\-raw  { JIS X 0208 (Kanji + fullwidth kana) without CES }
\&  jis0212\-raw  { JIS X 0212 (Extended Kanji)         without CES }
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.IP "Encode::KR \*(-- Korea" 2
.IX Item "Encode::KR Korea"
.Vb 8
\&  Standard      DOS/Win Macintosh                Comment/Reference
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  euc\-kr                MacKorean                        [RFC1557]
\&                cp949 [1]                    
\&  iso\-2022\-kr                                            [RFC1557]
\&  johab                                  [KS X 1001:1998, Annex 3]
\&  ksc5601\-raw                              { KSC5601 without CES }
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&  [1] ks_c_5601\-1987, (x\-)?windows\-949, n' uhc is aliased ta all dis bullshit.
\&  See below.
.Ve
.IP "Encode::TW \*(-- Taiwan" 2
.IX Item "Encode::TW Taiwan"
.Vb 5
\&  Standard      DOS/Win Macintosh                Comment/Reference
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  big5\-eten     cp950   MacChineseTrad {big5 aliased ta big5\-eten}
\&  big5\-hkscs                              
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.IP "Encode::HanExtra \*(-- Mo' Chinese via \s-1CPAN\s0" 2
.IX Item "Encode::HanExtra Mo' Chinese via CPAN"
Cuz of tha size concerns, additionizzle Chinese encodings below are
distributed separately on \s-1CPAN,\s0 under tha name Encode::HanExtra.
.Sp
.Vb 8
\&  Standard      DOS/Win Macintosh                Comment/Reference
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  big5ext                                   CMEX\*(Aqs Big5e Extension
\&  big5plus                                  CMEX\*(Aqs Big5+ Extension
\&  cccii         Chinese Characta Code fo' Hype Interchange
\&  euc\-tw                             EUC (Extended Unix Character)
\&  gb18030                          GBK wit Traditionizzle Characters
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.IP "Encode::JIS2K \*(-- \s-1JIS X 0213\s0 encodings via \s-1CPAN\s0" 2
.IX Item "Encode::JIS2K JIS X 0213 encodings via CPAN"
Cuz of size concerns, additionizzle Japanese encodings below are
distributed separately on \s-1CPAN,\s0 under tha name Encode::JIS2K.
.Sp
.Vb 8
\&  Standard      DOS/Win Macintosh                Comment/Reference
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  euc\-jisx0213
\&  shiftjisx0123
\&  iso\-2022\-jp\-3
\&  jis0213\-1\-raw
\&  jis0213\-2\-raw
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SS "Miscellaneous encodings"
.IX Subsection "Miscellaneous encodings"
.IP "Encode::EBCDIC" 2
.IX Item "Encode::EBCDIC"
See perlebcdic fo' details.
.Sp
.Vb 8
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  cp37
\&  cp500  
\&  cp875  
\&  cp1026  
\&  cp1047  
\&  posix\-bc
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.IP "Encode::Symbols" 2
.IX Item "Encode::Symbols"
For symbols  n' dingbats.
.Sp
.Vb 7
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  symbol
\&  dingbats
\&  MacDingbats
\&  AdobeZdingbat
\&  AdobeSymbol
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.IP "Encode::MIME::Header" 2
.IX Item "Encode::MIME::Header"
Strictly bustin lyrics, \s-1MIME\s0 header encodin documented up in \s-1RFC 2047\s0 is more
of encapsulation than encoding.  But fuck dat shiznit yo, tha word on tha street is dat they support up in modern
world is imperatizzle so they is supported.
.Sp
.Vb 5
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  MIME\-Header                                            [RFC2047]
\&  MIME\-B                                                 [RFC2047]
\&  MIME\-Q                                                 [RFC2047]
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.IP "Encode::Guess" 2
.IX Item "Encode::Guess"
This one aint a name of encodin but a utilitizzle dat lets you pick up
da most thugged-out appropriate encodin fo' a thugged-out data outta given \fIsuspects\fR.  See
Encode::Guess fo' details.
.SH "Unsupported encodings"
.IX Header "Unsupported encodings"
Da followin encodings is not supported as yet; some cuz they
are rarely used, some cuz of technical difficulties. Put ya muthafuckin choppers up if ya feel dis!  They may
be supported by external modulez via \s-1CPAN\s0 up in tha future, however.
.IP "\s-1ISO\-2022\-JP\-2\s0 [\s-1RFC1554\s0]" 2
.IX Item "ISO-2022-JP-2 [RFC1554]"
Not straight-up ghettofab yet.  Needz Unicode Database or equivalent to
implement \fIencode()\fR (because it includes \s-1JIS X 0208/0212, KSC5601,\s0 and
\&\s-1GB2312\s0 simultaneously, whose code points up in Unicode overlap.  So you
need ta lookup tha database ta determine ta what tha fuck characta set a given
Unicode characta should belong).
.IP "\s-1ISO\-2022\-CN\s0 [\s-1RFC1922\s0]" 2
.IX Item "ISO-2022-CN [RFC1922]"
Not straight-up popular. Shiiit, dis aint no joke.  Needz \s-1CNS 11643\-1\s0 n' \-2 which is not available in
this module.  \s-1CNS 11643\s0 is supported (via euc-tw) up in Encode::HanExtra.
Autrijus Tang may add support fo' dis encodin up in his crazy-ass module up in future.
.IP "Various HP-UX encodings" 2
.IX Item "Various HP-UX encodings"
Da followin is unsupported cuz of tha lack of mappin data.
.Sp
.Vb 2
\&  \*(Aq8\*(Aq  \- arabic8, greek8, hebrew8, kana8, thai8, n' turkish8
\&  \*(Aq15\*(Aq \- japanese15, korean15, n' roi15
.Ve
.IP "Cyrillic encodin \s-1ISO\-IR\-111\s0" 2
.IX Item "Cyrillic encodin ISO-IR-111"
Anton Tagunov doubts its usefulness.
.IP "\s-1ISO\-8859\-8\-1\s0 [Hebrew]" 2
.IX Item "ISO-8859-8-1 [Hebrew]"
None of tha Encode crew knows Hebrew enough (\s-1ISO\-8859\-8,\s0 cp1255 and
MacHebrew is supported cuz n' just cuz there was mappings
available at <http://www.unicode.org/>).  Contributions welcome.
.IP "\s-1ISIRI 3342,\s0 Iran System, \s-1ISIRI 2900\s0 [Farsi]" 2
.IX Item "ISIRI 3342, Iran System, ISIRI 2900 [Farsi]"
Ditto.
.IP "Thai encodin \s-1TCVN\s0" 2
.IX Item "Thai encodin TCVN"
Ditto.
.IP "Vietnamese encodings \s-1VPS\s0" 2
.IX Item "Vietnamese encodings VPS"
Though Jungshik Shin has reported dat Mo'jizzle supports dis encoding,
it was too late before 5.8.0 fo' our asses ta add dat shit.  In tha future, it
may be available via a separate module.  See
<http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.uf>
and
<http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.ut>
if yo ass is horny bout helpin us.
.IP "Various Mac encodings" 2
.IX Item "Various Mac encodings"
Da followin is unsupported cuz of tha lack of mappin data.
.Sp
.Vb 5
\&  MacArmenian,  MacBengali,   MacBurmese,   MacEthiopic
\&  MacExtArabic, MacGeorgian,  MacKannada,   MacKhmer
\&  MacLaotian,   MacMalayalam, MacMongolian, MacOriya
\&  MacSinhalese, MacTamil,     MacTelugu,    MacTibetan
\&  MacVietnamese
.Ve
.Sp
Da rest which is already available is based upon tha vendor mappings
at <http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/> .
.IP "(Mac) Indic encodings" 2
.IX Item "(Mac) Indic encodings"
Da maps fo' tha followin is available at <http://www.unicode.org/>
but remain unsupported cuz dem encodings need a algorithmical
approach, currently unsupported by \fIenc2xs\fR:
.Sp
.Vb 3
\&  MacDevanagari
\&  MacGurmukhi
\&  MacGujarati
.Ve
.Sp
For details, please peep \f(CW\*(C`Unicode mappin thangs n' notes:\*(C'\fR at
<http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/DEVANAGA.TXT> .
.Sp
I believe dis issue is prevalent not only fo' Mac Indics but also in
other Indic encodings yo, but tha above was tha only Indic encodings
maps dat I could find at <http://www.unicode.org/> .
.SH "Encodin vs. Charset \*(-- terminology"
.IX Header "Encodin vs. Charset terminology"
We is used ta rockin tha term (character) \fIencoding\fR n' \fIcharacter
set\fR interchangeably.  But just as confusin tha terms byte and
characta is fucked up n' tha terms should be differentiated when
needed, we need ta differentiate \fIencoding\fR n' \fIcharacta set\fR.
.PP
To KNOW that, here be a thugged-out description of how tha fuck we make computers
grok our characters.
.IP "\(bu" 2
First we start wit which charactas ta include.  We call this
collection of charactas \fIcharacta repertoire\fR.
.IP "\(bu" 2
Then we gotta give each characta a unique \s-1ID\s0 so yo' computa can
tell tha difference between 'a' n' 'A'.  This itemized character
repertoire is now a \fIcharacta set\fR.
.IP "\(bu" 2
If yo' computa can grow tha characta set without further
processing, you can go ahead n' use dat shit.  This is called a \fIcoded
characta set\fR (\s-1CCS\s0) or \fIraw characta encoding\fR.  \s-1ASCII\s0 is used this
way fo' most cases.
.IP "\(bu" 2
But up in nuff cases, especially multi-byte \s-1CJK\s0 encodings, you have to
tweak a lil mo' n' mo' n' mo'.  Yo crazy-ass network connection may not accept any data
with tha Most Significant Bit set, n' yo' computa may not be able to
tell if a given byte be a whole characta or just half of dat shit.  So you
have ta \fIencode\fR tha characta set ta use dat shit.
.Sp
A \fIcharacta encodin scheme\fR (\s-1CES\s0) determines how tha fuck ta encode a given
characta set, or a set of multiple characta sets, n' you can put dat on yo' toast.  7bit \s-1ISO\-2022\s0 is
an example of a \s-1CES. \s0 Yo ass switch between characta sets via \fIescape
sequences\fR.
.PP
Technically, or mathematically, bustin lyrics, a cold-ass lil characta set encoded in
such a \s-1CES\s0 dat maps characta by characta may form a \s-1CCS.  EUC\s0 is such
an example.  Da \s-1CES\s0 of \s-1EUC\s0 be as bigs up:
.IP "\(bu" 2
Map \s-1ASCII\s0 unchanged.
.IP "\(bu" 2
Map such a cold-ass lil characta set dat consistz of 94 or 96 powered by N
thugz by addin 0x80 ta each byte.
.IP "\(bu" 2
Yo ass can also use 0x8e n' 0x8f ta indicate dat tha followin sequence of
charactas belongs ta yet another characta set.  To each followin byte
is added tha value 0x80.
.PP
By carefully lookin all up in tha encoded byte sequence, you can find dat the
byte sequence conforms a unique number n' shit.  In dat sense, \s-1EUC\s0 be a \s-1CCS\s0
generated by a \s-1CES\s0 above from up ta four \s-1CCS \s0(fucked up?).  \s-1UTF\-8\s0
falls tha fuck into dis category.  See \*(L"\s-1UTF\-8\*(R"\s0 up in perlUnicode ta smoke up how
\&\s-1UTF\-8\s0 maps Unicode ta a funky-ass byte sequence.
.PP
Yo ass may also have found up by now why 7bit \s-1ISO\-2022\s0 cannot comprise
a \s-1CCS. \s0 If you peep a funky-ass byte sequence \ex21\ex21, you can't tell if
it is two !z or \s-1IDEOGRAPHIC SPACE.  EUC\s0 maps tha latta ta \exA1\exA1
so you have no shiznit differentiatin between \*(L"!!\*(R". n' \*(L"\ \ \*(R".
.SH "Encodin Classification (by Anton Tagunov n' Don Juan Kogai)"
.IX Header "Encodin Classification (by Anton Tagunov n' Don Juan Kogai)"
This section tries ta classify tha supported encodings by they 
applicabilitizzle fo' shiznit exchange over tha Internizzle n' ta 
choose da most thugged-out suitable aliases ta name dem up in tha context of 
such communication.
.IP "\(bu" 2
To (en|de)code encodings marked by \f(CW\*(C`(**)\*(C'\fR, you need 
\&\f(CW\*(C`Encode::HanExtra\*(C'\fR, available from \s-1CPAN.\s0
.PP
Encodin names
.PP
.Vb 3
\&  US\-ASCII    UTF\-8    ISO\-8859\-*  KOI8\-R
\&  Shift_JIS   EUC\-JP   ISO\-2022\-JP ISO\-2022\-JP\-1
\&  EUC\-KR      Big5     GB2312
.Ve
.PP
are registered wit \s-1IANA\s0 as preferred \s-1MIME\s0 names n' may
be used over tha Internet.
.PP
\&\f(CW\*(C`Shift_JIS\*(C'\fR has been officialized by \s-1JIS X 0208:1997.
\&\s0\*(L"Microsoft-related namin mess\*(R" gives details.
.PP
\&\f(CW\*(C`GB2312\*(C'\fR is tha \s-1IANA\s0 name fo' \f(CW\*(C`EUC\-CN\*(C'\fR.
See \*(L"Microsoft-related namin mess\*(R" fo' details.
.PP
\&\f(CW\*(C`GB_2312\-80\*(C'\fR \fIraw\fR encodin be available as \f(CW\*(C`gb2312\-raw\*(C'\fR
with Encode. Right back up in yo muthafuckin ass. See Encode::CN fo' details.
.PP
.Vb 2
\&  EUC\-CN
\&  KOI8\-U        [RFC2319]
.Ve
.PP
have not been registered wit \s-1IANA \s0(az of March 2002) but
seem ta be supported by major wizzy browsers. 
Da \s-1IANA\s0 name fo' \f(CW\*(C`EUC\-CN\*(C'\fR is \f(CW\*(C`GB2312\*(C'\fR.
.PP
.Vb 1
\&  KS_C_5601\-1987
.Ve
.PP
is heavily misused.
See \*(L"Microsoft-related namin mess\*(R" fo' details.
.PP
\&\f(CW\*(C`KS_C_5601\-1987\*(C'\fR \fIraw\fR encodin be available as \f(CW\*(C`kcs5601\-raw\*(C'\fR
with Encode. Right back up in yo muthafuckin ass. See Encode::KR fo' details.
.PP
.Vb 1
\&  UTF\-16 UTF\-16BE UTF\-16LE
.Ve
.PP
are IANA-registered \f(CW\*(C`charset\*(C'\fRs. Right back up in yo muthafuckin ass. See [\s-1RFC 2781\s0] fo' details.
Jungshik Shin reports dat \s-1UTF\-16\s0 wit a \s-1BOM\s0 is well accepted
by \s-1MS IE 5/6\s0 n' \s-1NS 4/6.\s0 Beware however that
.IP "\(bu" 2
\&\f(CW\*(C`UTF\-16\*(C'\fR support up in any software you goin ta be
using/interoperatin wit has probably been less tested
then \f(CW\*(C`UTF\-8\*(C'\fR support
.IP "\(bu" 2
\&\f(CW\*(C`UTF\-8\*(C'\fR coded data seamlessly passes traditional
command pipin (\f(CW\*(C`cat\*(C'\fR, \f(CW\*(C`more\*(C'\fR, etc.) while \f(CW\*(C`UTF\-16\*(C'\fR coded
data is likely ta cause mad drama (with its zero bytes,
for example)
.IP "\(bu" 2
it is beyond tha juice of lyrics ta describe tha way \s-1HTML\s0 browsers
encode non\-\f(CW\*(C`ASCII\*(C'\fR form data. To git a general impression, visit
<http://www.alanflavell.org.uk/charset/form\-i18n.html>.
While encodin of form data has stabilized fo' \f(CW\*(C`UTF\-8\*(C'\fR encoded pages
(at least \s-1IE 5/6, NS 6,\s0 n' Opera 6 behave consistently), be shizzle to
expect funk (and cross-browser discrepancies) wit \f(CW\*(C`UTF\-16\*(C'\fR encoded
pages!
.PP
Da rule of thumb is ta use \f(CW\*(C`UTF\-8\*(C'\fR unless you know what
yo ass is bustin n' unless you straight-up benefit from rockin \f(CW\*(C`UTF\-16\*(C'\fR.
.PP
.Vb 5
\&  ISO\-IR\-165    [RFC1345]
\&  VISCII
\&  GB 12345
\&  GB 18030 (**)  (see links bellow)
\&  EUC\-TW   (**)
.Ve
.PP
are straight-up valid encodings but not registered at \s-1IANA.\s0
Da names under which they is listed here is probably the
most widely-known names fo' these encodings n' is recommended
names.
.PP
.Vb 1
\&  BIG5PLUS (**)
.Ve
.PP
is a proprietary name.
.SS "Microsoft-related namin mess"
.IX Subsection "Microsoft-related namin mess"
Microsizzlez shizzle misuse tha followin names:
.IP "\s-1KS_C_5601\-1987\s0" 2
.IX Item "KS_C_5601-1987"
Microsizzlez extension ta \f(CW\*(C`EUC\-KR\*(C'\fR.
.Sp
Proper names: \f(CW\*(C`CP949\*(C'\fR, \f(CW\*(C`UHC\*(C'\fR, \f(CW\*(C`x\-windows\-949\*(C'\fR (as used by Mozilla).
.Sp
See <http://lists.w3.org/Archives/Public/ietf\-charsets/2001AprJun/0033.html>
for details.
.Sp
Encode aliases \f(CW\*(C`KS_C_5601\-1987\*(C'\fR ta \f(CW\*(C`cp949\*(C'\fR ta reflect dis common
misusage. \fIRaw\fR \f(CW\*(C`KS_C_5601\-1987\*(C'\fR encodin be available as
\&\f(CW\*(C`kcs5601\-raw\*(C'\fR.
.Sp
See Encode::KR fo' details.
.IP "\s-1GB2312\s0" 2
.IX Item "GB2312"
Microsizzlez extension ta \f(CW\*(C`EUC\-CN\*(C'\fR.
.Sp
Proper names: \f(CW\*(C`CP936\*(C'\fR, \f(CW\*(C`GBK\*(C'\fR.
.Sp
\&\f(CW\*(C`GB2312\*(C'\fR has been registered up in tha \f(CW\*(C`EUC\-CN\*(C'\fR meanin at
\&\s-1IANA.\s0 This has partially repaired tha thang: Microsoftz 
\&\f(CW\*(C`GB2312\*(C'\fR has become a superset of tha straight-up legit \f(CW\*(C`GB2312\*(C'\fR.
.Sp
Encode aliases \f(CW\*(C`GB2312\*(C'\fR ta \f(CW\*(C`euc\-cn\*(C'\fR up in full agreement with
\&\s-1IANA\s0 registration. I aint talkin' bout chicken n' gravy biatch. \f(CW\*(C`cp936\*(C'\fR is supported separately.
\&\fIRaw\fR \f(CW\*(C`GB_2312\-80\*(C'\fR encodin be available as \f(CW\*(C`gb2312\-raw\*(C'\fR.
.Sp
See Encode::CN fo' details.
.IP "Big5" 2
.IX Item "Big5"
Microsizzlez extension ta \f(CW\*(C`Big5\*(C'\fR.
.Sp
Proper name: \f(CW\*(C`CP950\*(C'\fR.
.Sp
Encode separately supports \f(CW\*(C`Big5\*(C'\fR n' \f(CW\*(C`cp950\*(C'\fR.
.IP "Shift_JIS" 2
.IX Item "Shift_JIS"
Microsoftz understandin of \f(CW\*(C`Shift_JIS\*(C'\fR.
.Sp
\&\s-1JIS\s0 has not endorsed tha full Microsizzlez standard however.
Da straight-up legit \f(CW\*(C`Shift_JIS\*(C'\fR includes only \s-1JIS X 0201\s0 n' \s-1JIS X 0208\s0
characta sets, while Microsizzlez has always used \f(CW\*(C`Shift_JIS\*(C'\fR
to encode a wider characta repertoire. Right back up in yo muthafuckin ass. See \f(CW\*(C`IANA\*(C'\fR registration for
\&\f(CW\*(C`Windows\-31J\*(C'\fR.
.Sp
As a oldschool predecessor, Microsoftz variant
probably has mo' muthafuckin rights fo' tha name, though it may be objected
that Microsizzlez shouldn't have used \s-1JIS\s0 as part of tha name
in tha straight-up original gangsta place.
.Sp
Unambiguous name: \f(CW\*(C`CP932\*(C'\fR. \f(CW\*(C`IANA\*(C'\fR name (also used by Mozilla, and
provided as a alias by Encode): \f(CW\*(C`Windows\-31J\*(C'\fR.
.Sp
Encode separately supports \f(CW\*(C`Shift_JIS\*(C'\fR n' \f(CW\*(C`cp932\*(C'\fR.
.SH "Glossary"
.IX Header "Glossary"
.IP "characta repertoire" 2
.IX Item "characta repertoire"
A collection of unique characters.  A \fIcharacter\fR set up in tha strictest
sense fo' realz. At dis stage, charactas is not numbered.
.IP "coded characta set (\s-1CCS\s0)" 2
.IX Item "coded characta set (CCS)"
A characta set dat is mapped up in a way computas can use directly.
Many characta encodings, includin \s-1EUC,\s0 fall up in dis category.
.IP "characta encodin scheme (\s-1CES\s0)" 2
.IX Item "characta encodin scheme (CES)"
An algorithm ta map a cold-ass lil characta set ta a funky-ass byte sequence.  Yo ass don't
have ta be able ta tell which characta set a given byte sequence
belongs.  7\-bit \s-1ISO\-2022\s0 be a \s-1CES\s0 but it cannot be a \s-1CCS.  EUC\s0 be an
example of bein both a \s-1CCS\s0 n' \s-1CES.\s0
.IP "charset (in \s-1MIME\s0 context)" 2
.IX Item "charset (in MIME context)"
has long been used up in tha meanin of \f(CW\*(C`encoding\*(C'\fR, \s-1CES.\s0
.Sp
While tha word combination \f(CW\*(C`characta set\*(C'\fR has lost dis meaning
in \s-1MIME\s0 context since [\s-1RFC 2130\s0], tha \f(CW\*(C`charset\*(C'\fR abbreviation has
retained dat shit. This is how tha fuck [\s-1RFC 2277\s0] n' [\s-1RFC 2278\s0] bless \f(CW\*(C`charset\*(C'\fR:
.Sp
.Vb 7
\& This document uses tha term "charset" ta mean a set of rulez for
\& mappin from a sequence of octets ta a sequence of characters, such
\& as tha combination of a cold-ass lil coded characta set n' a cold-ass lil characta encoding
\& scheme; dis be also what tha fuck is used as a identifier up in MIME "charset="
\& parameters, n' registered up in tha IANA charset registry ...  (Note
\& dat dis is NOT a term used by other standardz bodies, like fuckin ISO).
\& [RFC 2277]
.Ve
.IP "\s-1EUC\s0" 2
.IX Item "EUC"
Extended Unix Character n' shit.  See \s-1ISO\-2022.\s0
.IP "\s-1ISO\-2022\s0" 2
.IX Item "ISO-2022"
A \s-1CES\s0 dat was carefully designed ta coexist wit \s-1ASCII. \s0 There is a 7
bit version n' a 8 bit version.
.Sp
Da 7 bit version switches characta set via escape sequence so it
cannot form a \s-1CCS. \s0 Since dis is mo' hard as fuck ta handle up in programs
than tha 8 bit version, tha 7 bit version aint straight-up ghettofab except for
iso\-2022\-jp, tha \fIde facto\fR standard \s-1CES\s0 fo' e\-mails.
.Sp
Da 8 bit version can form a \s-1CCS.  EUC\s0 n' \s-1ISO\-8859\s0 is two examples
thereof.  Pre\-5.6 perl could use dem as strang literals.
.IP "\s-1UCS\s0" 2
.IX Item "UCS"
Short fo' \fIUniversal Characta Set\fR.  When you say just \s-1UCS,\s0 it means
\&\fIUnicode\fR.
.IP "\s-1UCS\-2\s0" 2
.IX Item "UCS-2"
\&\s-1ISO/IEC 10646\s0 encodin form: Universal Characta Set coded up in two
octets.
.IP "Unicode" 2
.IX Item "Unicode"
A characta set dat aims ta include all characta repertoirez of the
world. Y'all KNOW dat shit, muthafucka!  Many characta sets up in various nationistic as well as industrial
standardz have become, up in a way, just subsetz of Unicode.
.IP "\s-1UTF\s0" 2
.IX Item "UTF"
Short fo' \fIUnicode Transformation Format\fR.  Determines how tha fuck ta map a
Unicode characta tha fuck into a funky-ass byte sequence.
.IP "\s-1UTF\-16\s0" 2
.IX Item "UTF-16"
A \s-1UTF\s0 up in 16\-bit encoding.  Can either be up in big-ass endian or lil
endian. I aint talkin' bout chicken n' gravy biatch.  Da big-ass endian version is called \s-1UTF\-16BE \s0(equal ta \s-1UCS\-2 + \s0
surrogate support) n' tha lil endian version is called \s-1UTF\-16LE.\s0
.SH "See Also"
.IX Header "See Also"
Encode, 
Encode::Byte, 
Encode::CN, Encode::JP, Encode::KR, Encode::TW,
Encode::EBCDIC, Encode::Symbol
Encode::MIME::Header, Encode::Guess
.SH "References"
.IX Header "References"
.IP "\s-1ECMA\s0" 2
.IX Item "ECMA"
European Computa Manufacturers Association
<http://www.ecma.ch>
.RS 2
.ie n .IP "\s-1ECMA\-035 \s0(eq ""ISO\-2022"")" 2
.el .IP "\s-1ECMA\-035 \s0(eq \f(CWISO\-2022\fR)" 2
.IX Item "ECMA-035 (eq ISO-2022)"
<http://www.ecma.ch/ecma1/STAND/ECMA\-035.HTM>
.Sp
Da justification of \s-1ISO\-2022\s0 be available from tha link above.
.RE
.RS 2
.RE
.IP "\s-1IANA\s0" 2
.IX Item "IANA"
Internizzle Assigned Numbers Authority
<http://www.iana.org/>
.RS 2
.IP "Assigned Charset Names by \s-1IANA\s0" 2
.IX Item "Assigned Charset Names by IANA"
<http://www.iana.org/assignments/character\-sets>
.Sp
Most of tha \f(CW\*(C`canonical names\*(C'\fR up in Encode derive from dis list
so you can directly apply tha strang you have extracted from \s-1MIME\s0
header of mails n' wizzy pages.
.RE
.RS 2
.RE
.IP "\s-1ISO\s0" 2
.IX Item "ISO"
Internationistic Organization fo' Standardization
<http://www.iso.ch/>
.IP "\s-1RFC\s0" 2
.IX Item "RFC"
Request For Comments \*(-- need I say more?
<http://www.rfc\-editor.org/>, <http://www.ietf.org/rfc.html>,
<http://www.faqs.org/rfcs/>
.IP "\s-1UC\s0" 2
.IX Item "UC"
Unicode Consortium
<http://www.unicode.org/>
.RS 2
.IP "Unicode Glossary" 2
.IX Item "Unicode Glossary"
<http://www.unicode.org/glossary/>
.Sp
Da glossary of dis document is based upon dis crib.
.RE
.RS 2
.RE
.SS "Other Notable Joints"
.IX Subsection "Other Notable Joints"
.IP "czyborra.com" 2
.IX Item "czyborra.com"
<http://czyborra.com/>
.Sp
Gotz Nuff a shitload of useful shiznit, especially gory detailz of \s-1ISO\s0
vs. vendor mappings.
.IP "\s-1CJK\s0.inf" 2
.IX Item "CJK.inf"
<http://examples.oreilly.com/cjkvinfo/doc/cjk.inf>
.Sp
Somewhat obsolete (last update up in 1996) yo, but still useful naaahhmean, biatch?  Also try
.Sp
<ftp://ftp.oreilly.com/pub/examples/nutshell/cjkv/pdf/GB18030_Summary.pdf>
.Sp
Yo ass will find brief info on \f(CW\*(C`EUC\-CN\*(C'\fR, \f(CW\*(C`GBK\*(C'\fR n' mostly on \f(CW\*(C`GB 18030\*(C'\fR.
.IP "Jungshik Shinz Hangul \s-1FAQ\s0" 2
.IX Item "Jungshik Shinz Hangul FAQUIZZY"
<http://jshin.net/faq>
.Sp
And especially its subject 8.
.Sp
<http://jshin.net/faq/qa8.html>
.Sp
A comprehensive overview of tha Korean (\f(CW\*(C`KS *\*(C'\fR) standards.
.ie n .IP "debian.org: ""Introduction ta i18n""" 2
.el .IP "debian.org: ``Introduction ta i18n''" 2
.IX Item "debian.org: Introduction ta i18n"
A brief description fo' most of tha mentioned \s-1CJK\s0 encodings is
contained in
<http://www.debian.org/doc/manuals/intro\-i18n/ch\-codes.en.html>
.SS "Offline sources"
.IX Subsection "Offline sources"
.ie n .IP """CJKV Hype Processing"" by Ken Lunde" 2
.el .IP "\f(CWCJKV Hype Processing\fR by Ken Lunde" 2
.IX Item "CJKV Hype Processin by Ken Lunde"
\&\s-1CJKV\s0 Hype Processing
1999 O'Reilly & Associates, \s-1ISBN : 1\-56592\-224\-7\s0
.Sp
Da modern successor of \f(CW\*(C`CJK.inf\*(C'\fR.
.Sp
Features a cold-ass lil comprehensive coverage of \s-1CJKV\s0 characta sets and
encodings along wit nuff other thangs faced by mah playas trying
to betta support \s-1CJKV\s0 languages/scripts up in all tha areas of
information processing.
.Sp
To purchase dis book, visit
<http://oreilly.com/catalog/9780596514471/>
or yo' most straight-up bangin bookstore.
