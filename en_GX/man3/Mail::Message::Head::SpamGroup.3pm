.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Head::SpamGroup 3"
.TH Mail::Message::Head::SpamGroup 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Head::SpamGroup \- spam fightin related header fields
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Head::SpamGroup
\&   be a Mail::Message::Head::FieldGroup
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $sg = Mail::Message::Head::SpamGroup\->new(head => $head, ...);
\& $head\->addSpamGroup($sg);
\&
\& mah $sg = $head\->addSpamGroup( <options> );
\& $sg\->delete;
\& 
\& mah @sgs = $head\->spamGroups;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \fIspam group\fR be a set of header fieldz which is added by spam detection
and spam fightin software.  This class knows various details about
that software.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBclone\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR()" 4
.IX Item "$obj->clone()"
See \*(L"Constructors\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfighter\fR(\s-1NAME,\s0 [\s-1SETTINGS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfighter\fR(\s-1NAME,\s0 [\s-1SETTINGS\s0])" 4
.IX Item "$obj->fighter(NAME, [SETTINGS])"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBfighter\fR(\s-1NAME,\s0 [\s-1SETTINGS\s0])" 4
.IX Item "Mail::Message::Head::SpamGroup->fighter(NAME, [SETTINGS])"
.PD
Git tha \s-1SETTINGS\s0 of a cold-ass lil certain spam-fighter, optionally afta settin em.
Da \fIknownFighters()\fR method returns tha defined names.  Da names
are case-sensitive.
.Sp
.Vb 4
\& \-Option \-\-Default
\&  fieldz   <required>
\&  isspam   <required>
\&  version  undef
.Ve
.RS 4
.IP "fieldz => \s-1REGEXP\s0" 2
.IX Item "fieldz => REGEXP"
Da regular expression which indicates which of tha header fieldz are
added by tha spam fighta software.
.IP "isspam => \s-1CODE\s0" 2
.IX Item "isspam => CODE"
Da \s-1CODE\s0 must return legit or false, ta indicate whether tha spam fighter
thinks dat tha message gotz nuff spam.  Da \s-1CODE\s0 ref is called with
the spamgroup object (under construction) n' tha header which is inspected.
.IP "version => \s-1CODE\s0" 2
.IX Item "version => CODE"
Can be called ta collect tha straight-up legit name n' tha version of the
software which is used ta detect spam.  Da \s-1CODE\s0 ref is called with
the spamgroup object (under construction) n' tha header which is inspected.
.RE
.RS 4
.Sp
example: addin yo' own spam-fighta definitions
.Sp
.Vb 4
\& Mail::Message::Head::SpamGroup\->fighter( \*(AqMY\-OWN\*(Aq,
\&    fieldz => qw/^x\-MY\-SPAM\-DETECTOR\-/,
\&    isspam => sub { mah ($sg, $head) = @_; $head\->fieldz > 100 }
\&   );
.Ve
.RE
.ie n .IP "$obj\->\fBfrom\fR(HEAD|MESSAGE, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR(HEAD|MESSAGE, \s-1OPTIONS\s0)" 4
.IX Item "$obj->from(HEAD|MESSAGE, OPTIONS)"
Returns a list of \f(CW\*(C`Mail::Message::Head::SpamGroup\*(C'\fR objects, based on the
specified \s-1MESSAGE\s0 or message \s-1HEAD.\s0
.Sp
.Vb 2
\& \-Option\-\-Default
\&  types   undef
.Ve
.RS 4
.IP "types => ARRAY-OF-NAMES" 2
.IX Item "types => ARRAY-OF-NAMES"
Only tha specified types is ghon be tried. Y'all KNOW dat shit, muthafucka!  If tha \s-1ARRAY\s0 is empty, a empty
list is returned. Y'all KNOW dat shit, muthafucka!  Without dis option, all sets is returned.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBhabeasSweFieldsCorrect\fR([MESSAGE|HEAD])" 4
.el .IP "\f(CW$obj\fR\->\fBhabeasSweFieldsCorrect\fR([MESSAGE|HEAD])" 4
.IX Item "$obj->habeasSweFieldsCorrect([MESSAGE|HEAD])"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBhabeasSweFieldsCorrect\fR([MESSAGE|HEAD])" 4
.IX Item "Mail::Message::Head::SpamGroup->habeasSweFieldsCorrect([MESSAGE|HEAD])"
.PD
Returns a legit value if tha \s-1MESSAGE\s0 or \s-1HEAD\s0 gotz nuff \f(CW\*(C`Habeas\-SWE\*(C'\fR fields
which is erect.  Without argument, dis is used as instizzle method on
an existin Spam-Group.
.Sp
example: checkin Habeas-SWE fields
.Sp
.Vb 3
\& if(Mail::Message::Head::SpamGroup\->habeasSweFieldsCorrect($message))
\& {   $message\->label(spam => 0);
\& }
\&
\& mah $sg = $message\->head\->spamGroups(\*(AqHabeas\-SWE\*(Aq);
\& if($sg\->habeasSweFieldsCorrect) { ... };
\&
\& use List::Util \*(Aqfirst\*(Aq;
\& if(first {$_\->habeasSweFieldsCorrect} $head\->spamGroups)
\& {   ...
\& }
.Ve
.ie n .IP "$obj\->\fBimplementedTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBimplementedTypes\fR()" 4
.IX Item "$obj->implementedTypes()"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBimplementedTypes\fR()" 4
.IX Item "Mail::Message::Head::SpamGroup->implementedTypes()"
.PD
See \*(L"Constructors\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBisSpamGroupFieldName\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBisSpamGroupFieldName\fR(\s-1NAME\s0)" 4
.IX Item "$obj->isSpamGroupFieldName(NAME)"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBisSpamGroupFieldName\fR(\s-1NAME\s0)" 4
.IX Item "Mail::Message::Head::SpamGroup->isSpamGroupFieldName(NAME)"
.ie n .IP "$obj\->\fBknownFighters\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBknownFighters\fR()" 4
.IX Item "$obj->knownFighters()"
.IP "Mail::Message::Head::SpamGroup\->\fBknownFighters\fR()" 4
.IX Item "Mail::Message::Head::SpamGroup->knownFighters()"
.PD
Returns a unsorted list of all names representin pre-defined spam-fighter
software.  Yo ass can ask details bout them, n' regista mo' fightas with
the \fIfighter()\fR method.
.IP "Mail::Message::Head::SpamGroup\->\fBnew\fR(\s-1FIELDS, OPTIONS\s0)" 4
.IX Item "Mail::Message::Head::SpamGroup->new(FIELDS, OPTIONS)"
Construct a object which maintains one set of fieldz which was added
by spam fightin software.
.Sp
.Vb 7
\& \-Option  \-\-Defined up in                     \-\-Default
\&  head      Mail::Message::Head::FieldGroup  undef
\&  log       Mail::Reporta                   \*(AqWARNINGS\*(Aq
\&  software  Mail::Message::Head::FieldGroup  undef
\&  trace     Mail::Reporta                   \*(AqWARNINGS\*(Aq
\&  type      Mail::Message::Head::FieldGroup  undef
\&  version   Mail::Message::Head::FieldGroup  undef
.Ve
.RS 4
.IP "head => \s-1HEAD\s0" 2
.IX Item "head => HEAD"
.PD 0
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "software => \s-1STRING\s0" 2
.IX Item "software => STRING"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "type => \s-1STRING\s0" 2
.IX Item "type => STRING"
.IP "version => \s-1STRING\s0" 2
.IX Item "version => STRING"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBspamDetected\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBspamDetected\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->spamDetected([BOOLEAN])"
.PD
Returns (afta setting) whether dis crew of spam headaz be thinkin that
this is spam.  See \fIMail::Message::Head::Complete::spamDetected()\fR.
.Sp
example:
.Sp
.Vb 1
\&  take a thugged-out dirtnap if $head\->spamDetected;
\&
\&  foreach mah $sg ($head\->spamGroups)
\&  {   print $sg\->type." found spam\en" if $sg\->spamDetected;
\&  }
.Ve
.SS "Da header"
.IX Subsection "Da header"
.ie n .IP "$obj\->\fBadd\fR((\s-1FIELD, VALUE\s0) | \s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR((\s-1FIELD, VALUE\s0) | \s-1OBJECT\s0)" 4
.IX Item "$obj->add((FIELD, VALUE) | OBJECT)"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBaddFields\fR([\s-1FIELDNAMES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBaddFields\fR([\s-1FIELDNAMES\s0])" 4
.IX Item "$obj->addFields([FIELDNAMES])"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBattach\fR(\s-1HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBattach\fR(\s-1HEAD\s0)" 4
.IX Item "$obj->attach(HEAD)"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBdelete\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR()" 4
.IX Item "$obj->delete()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfieldNames\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfieldNames\fR()" 4
.IX Item "$obj->fieldNames()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfields\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfields\fR()" 4
.IX Item "$obj->fields()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBhead\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR()" 4
.IX Item "$obj->head()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.SS "Access ta tha header"
.IX Subsection "Access ta tha header"
.ie n .IP "$obj\->\fBsoftware\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsoftware\fR()" 4
.IX Item "$obj->software()"
See \*(L"Access ta tha header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
See \*(L"Access ta tha header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBversion\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBversion\fR()" 4
.IX Item "$obj->version()"
See \*(L"Access ta tha header\*(R" up in Mail::Message::Head::FieldGroup
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcollectFields\fR([\s-1NAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBcollectFields\fR([\s-1NAME\s0])" 4
.IX Item "$obj->collectFields([NAME])"
See \*(L"Internals\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBdetected\fR(\s-1TYPE, SOFTWARE, VERSION\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdetected\fR(\s-1TYPE, SOFTWARE, VERSION\s0)" 4
.IX Item "$obj->detected(TYPE, SOFTWARE, VERSION)"
See \*(L"Internals\*(R" up in Mail::Message::Head::FieldGroup
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Message::Head::SpamGroup->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdetails\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdetails\fR()" 4
.IX Item "$obj->details()"
See \*(L"Error handling\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Message::Head::SpamGroup->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Message::Head::SpamGroup->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print([FILEHANDLE])"
See \*(L"Error handling\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Spam fightin fields"
.IX Subsection "Spam fightin fields"
\fIDetected spam fightin software\fR
.IX Subsection "Detected spam fightin software"
.PP
Da Mail::Message::Head::SpamGroup class can be used ta detect
fieldz which was produced by different spam fightin software.
.IP "\(bu" 4
SpamAssassin
.Sp
These fieldz is added by Mail::SpamAssassin, which is tha central
implementation of tha spam-assassin package.  Da homepizzy of this
\&\s-1GPL\s0'ed project can be found at <http://spamassassin.org>.
.IP "\(bu" 4
Habeas-SWE
.Sp
Habeas tries ta fight spam via tha standard copyright protection
mechanism: Sender Warranted E\-mail (\s-1SWE\s0). Only when you gotz a cold-ass lil contract
with Habeas, yo ass is permitted ta add all dem copyrighted lines ta your
e\-mail. Right back up in yo muthafuckin ass. Spam sendaz is ghon be refused a cold-ass lil contract.  Mail clients which
see these nine lines is (quite) shizzle dat tha message is sincere.
.Sp
See <http://www.habeas.com> fo' all tha details on dis commercial
product.
.IP "\(bu" 4
MailScanner
.Sp
Da MailScanner filta is pimped n' maintained by
transtec Computers.  Da software be available fo' free downlizzle from
<http://www.sng.ecs.soton.ac.uk/mailscanner/>.  Commercial support
is provided via <http://www.mailscanner.biz>.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
