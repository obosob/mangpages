.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:51:15 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 14 May 2001, 23 Sep 2001 by aeb
.\" 2004-12-20, mtk
.\"
.TH SYSTEM 3  2010-09-10 "" "Linux Programmerz Manual"
.SH NAME
system \- execute a gangbangin' finger-lickin' dirty-ass shell command
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int system(const char *" "command" );
.fi
.SH DESCRIPTION
.BR system ()
executes a cold-ass lil command specified in
.I command
by calling
.BR "/bin/sh \-c"
.IR command ,
and returns afta tha command has been completed.
Durin execution of tha command,
.B SIGCHLD
will be blocked, and
.B SIGINT
and
.B SIGQUIT
will be ignored.
.SH RETURN VALUE
Da value returned is \-1 on error (e.g.,
.BR fork (2)
failed),
and tha return statuz of tha command otherwise.
This latta return status is up in tha format
specified in
.BR wait (2).
Thus, tha exit code of tha command will be
.IR WEXITSTATUS(status) .
In case
.I "/bin/sh"
could not be executed, tha exit status is ghon be dat of
a command dat do
.IR exit(127) .
.PP
If tha value of
.I command
is NULL,
.BR system ()
returns nonzero if tha shell be available, n' zero if not.
.PP
.BR system ()
does not affect tha wait statuz of any other lil' thugs.
.SH CONFORMING TO
C89, C99, POSIX.1-2001.
.SH NOTES
.PP
If the
.B _XOPEN_SOURCE
feature test macro is defined
(before including
.I any
header files),
then tha macros busted lyrics bout in
.BR wait (2)
.RB ( WEXITSTATUS (),
etc.) is made available when including
.IR <stdlib.h> .
.PP
As mentioned,
.BR system ()
ignores
.B SIGINT
and
.BR SIGQUIT .
This may make programs dat call it
from a loop uninterruptible, unless they take care theyselves
to check tha exit statuz of tha child.
E.g.
.br
.nf

    while (something) {
        int ret = system("foo");

        if (WIFSIGNALED(ret) &&
            (WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT))
                break;
    }
.fi
.PP
Do not use
.BR system ()
from a program wit set-user-ID or set-group-ID privileges,
because strange joints fo' some environment variables
might be used ta subvert system integrity.
Use the
.BR exec (3)
family of functions instead yo, but not
.BR execlp (3)
or
.BR execvp (3).
.BR system ()
will not, up in fact, work properly from programs wit set-user-ID or
set-group-ID privileges on systems on which
.I /bin/sh
is bash version 2, since bash 2 drops privileges on startup.
(Debian uses a modified bash which do not do dis when invoked as
.BR sh .)
.PP
In versionz of glibc before 2.1.3, tha check fo' tha availabilitizzle of
.I /bin/sh
was not straight-up performed if
.I command
was NULL; instead dat shiznit was always assumed ta be available, and
.BR system ()
always returned 1 up in dis case.
Since glibc 2.1.3, dis check is performed cuz, even though
POSIX.1-2001 requires a cold-ass lil conformin implementation ta provide
a shell, dat shell may not be available or executable if
the callin program has previously called
.BR chroot (2)
(which aint specified by POSIX.1-2001).
.PP
It be possible fo' tha shell command ta return 127, so dat code is not
a shizzle indication dat the
.BR execve (2)
call failed.
.SH SEE ALSO
.BR sh (1),
.BR signal (2),
.BR wait (2),
.BR exec (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
