" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::_Pointer_adapter< _Storage_policy > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits _Storage_policy\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef 
.br
_Storage_policy::element_type \fBelement_type\fP"
.br
.ti -1c
.RI "typedef 
.br
\fBstd::random_access_iterator_tag\fP \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef \fB_Pointer_adapter\fP \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Reference_type
.br
< element_type >::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef \fB_Unqualified_type\fP
.br
< element_type >::type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB_Pointer_adapter\fP (element_type *__arg=0)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP (const \fB_Pointer_adapter\fP &__arg)"
.br
.ti -1c
.RI "template<typename _Up > \fB_Pointer_adapter\fP (_Up *__arg)"
.br
.ti -1c
.RI "template<typename _Up > \fB_Pointer_adapter\fP (const \fB_Pointer_adapter\fP< _Up > &__arg)"
.br
.ti -1c
.RI "\fBoperator __unspecified_bool_type\fP () const "
.br
.ti -1c
.RI "bool \fBoperator!\fP () const "
.br
.ti -1c
.RI "reference \fBoperator*\fP () const "
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator+=\fP (short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator+=\fP (unsigned short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator+=\fP (int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator+=\fP (unsigned int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator+=\fP (long __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator+=\fP (unsigned long __offset)"
.br
.ti -1c
.RI "template<typename _Up > std::ptrdiff_t \fBoperator-\fP (const \fB_Pointer_adapter\fP< _Up > &__rhs) const "
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator--\fP ()"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator--\fP (int)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator-=\fP (short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator-=\fP (unsigned short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator-=\fP (int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator-=\fP (unsigned int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator-=\fP (long __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator-=\fP (unsigned long __offset)"
.br
.ti -1c
.RI "element_type * \fBoperator->\fP () const "
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP & \fBoperator=\fP (const \fB_Pointer_adapter\fP &__arg)"
.br
.ti -1c
.RI "template<typename _Up > \fB_Pointer_adapter\fP & \fBoperator=\fP (const \fB_Pointer_adapter\fP< _Up > &__arg)"
.br
.ti -1c
.RI "template<typename _Up > \fB_Pointer_adapter\fP & \fBoperator=\fP (_Up *__arg)"
.br
.ti -1c
.RI "reference \fBoperator[]\fP (std::ptrdiff_t __index) const "
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (const \fB_Pointer_adapter\fP &__lhs, short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (short __offset, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (const \fB_Pointer_adapter\fP &__lhs, unsigned short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (unsigned short __offset, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (const \fB_Pointer_adapter\fP &__lhs, int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (int __offset, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (const \fB_Pointer_adapter\fP &__lhs, unsigned int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (unsigned int __offset, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (const \fB_Pointer_adapter\fP &__lhs, long __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (long __offset, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (unsigned long __offset, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator+\fP (const \fB_Pointer_adapter\fP &__lhs, unsigned long __offset)"
.br
.ti -1c
.RI "std::ptrdiff_t \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, element_type *__rhs)"
.br
.ti -1c
.RI "std::ptrdiff_t \fBoperator-\fP (element_type *__lhs, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "template<typename _Up > std::ptrdiff_t \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, _Up *__rhs)"
.br
.ti -1c
.RI "template<typename _Up > std::ptrdiff_t \fBoperator-\fP (_Up *__lhs, const \fB_Pointer_adapter\fP &__rhs)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, unsigned short __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, unsigned int __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, long __offset)"
.br
.ti -1c
.RI "\fB_Pointer_adapter\fP \fBoperator-\fP (const \fB_Pointer_adapter\fP &__lhs, unsigned long __offset)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Storage_policy>class __gnu_cxx::_Pointer_adapter< _Storage_policy >"
Da followin serves up a 'alternatizzle pointer' dat works wit tha containers when specified as tha pointa typedef of tha allocator\&.
.PP
Da pointa type used wit tha containers don't gotta be dis class yo, but it must support tha implicit conversions, pointa arithmetic, comparison operators, etc\&. dat is supported by dis class, n' avoid raisin compile-time ambiguities\&. Because bustin a hustlin pointa can be challenging, dis pointa template was designed ta wrapper a easier storage policy type, so dat it becomes reusable fo' bustin other pointa types\&.
.PP
A key point of dis class be also dat it allows container writas ta 'assume' Allocator::pointa be a typedef fo' a aiiight pointer\&. This class supports most of tha conventionz of a legit pointer, n' can, fo' instizzle handle implicit conversion ta const n' base class pointa types\&. Da only impositions on container writas ta support extended pointas are: 1) use tha Allocator::pointa typedef appropriately fo' pointa types\&. 2) if you need pointa casting, use tha __pointer_cast<> functions from ext/cast\&.h\&. This allows pointa cast operations ta be overloaded as necessary by custom pointers\&.
.PP
Note: Da const qualifier works wit dis pointa adapta as bigs up:
.PP
_Tp* == _Pointer_adapter<_Std_pointer_impl<_Tp> >; const _Tp* == _Pointer_adapter<_Std_pointer_impl<const _Tp> >; _Tp* const == const _Pointer_adapter<_Std_pointer_impl<_Tp> >; const _Tp* const == const _Pointer_adapter<_Std_pointer_impl<const _Tp> >; 
.PP
Definizzle at line 281 of file pointer\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
