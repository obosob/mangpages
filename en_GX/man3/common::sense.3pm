.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sense 3"
.TH sense 3 "2013-08-04" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
common::sense \- save a tree AND a kitten, use common::sense!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use common::sense;
\&
\&   # Supposed ta be mostly tha same, wit much lower memory usage, as:
\&  
\&   # use utf8;
\&   # use strict qw(vars subs);
\&   # use feature qw(say state switch);
\&   # use feature qw(unicode_strings unicode_eval current_sub fc evalbytes);
\&   # no feature qw(array_base);
\&   # no warnings;
\&   # use warnings qw(FATAL closed threadz internal debuggin pack
\&   #                 portable prototype inplace io pipe unpack malloc
\&   #                 deprecated glob digit printf layer
\&   #                 reserved taint closure semicolon);
\&   # no warnings qw(exec newline unopened);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&   XNothang is mo' fairly distributed than common sense: no one thinks
\&   he needz mo' of it than he already has.X
\&
\&   X Rene\*' Descartes
.Ve
.PP
This module implements some sane defaults fo' Perl programs, as defined by
two typical (or not so typical \- use yo' common sense) specimenz of Perl
coders. In fact, afta hustlin up details on which warnings n' strict
modes ta enable n' make fatal, we found dat we (and our code freestyled so
far, n' others) straight-up smoke on every last muthafuckin option, even though we never used
warnings before, so it seems dis module indeed reflects a \*(L"common\*(R" sense
among some long-time Perl coders.
.PP
Da basic philosophy behind tha chizzlez made up in common::sense can be
summarised as: \*(L"enforcin strict policies ta catch as nuff bugs as
possible, while all up in tha same time, not limitin tha expressive power
available ta tha programmer\*(R".
.PP
Two typical examplez of how tha fuck dis philosophy be applied up in practise is the
handlin of uninitialised n' malloc warnings:
.IP "\fIuninitialised\fR" 4
.IX Item "uninitialised"
\&\f(CW\*(C`undef\*(C'\fR be a well-defined feature of perl, n' enablin warnings for
usin it rarely catches any bugs yo, but considerably limits you up in what tha fuck you
can do, so uninitialised warnings is disabled.
.IP "\fImalloc\fR" 4
.IX Item "malloc"
Freein suttin' twice on tha C level be a straight-up bug, probably causing
memory corruption. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it often leadz ta side effects much lata up in the
program n' there be no advantages ta not reportin this, so malloc
warnings is fatal by default.
.PP
Unfortunately, there is no fine-grained warnin control up in perl, so often
whole crewz of useful warnings had ta be excluded cuz of a single
useless warnin (for example, perl puts a arbitrary limit on tha length
of text you can match wit some regexes before emittin a warning, making
the whole \f(CW\*(C`regexp\*(C'\fR category useless).
.PP
What bigs up be a mo' thorough rap of what tha fuck dis module do,
and why it do it, n' what tha fuck tha advantages (and disadvantages) of this
approach are.
.SH "RATIONALE"
.IX Header "RATIONALE"
.IP "use utf8" 4
.IX Item "use utf8"
While it aint common sense ta write yo' programs up in \s-1UTF\-8,\s0 itz quickly
becomin da most thugged-out common encoding, is tha designated future default
encodin fo' perl sources, n' da most thugged-out convenient encodin available
(you can do straight-up sick quotin tricks...). Experience has shown dat our
programs was either all pure ascii or utf\-8, both of which will stay the
same.
.Sp
There is few drawbacks ta enablin \s-1UTF\-8\s0 source code by default (mainly
some speed hits cuz of bugs up in olda versionz of perl), so dis module
enablez \s-1UTF\-8\s0 source code encodin by default.
.IP "use strict qw(subs vars)" 4
.IX Item "use strict qw(subs vars)"
Usin \f(CW\*(C`use strict\*(C'\fR is definitely common sense yo, but \f(CW\*(C`use strict
\&\*(Aqrefs\*(Aq\*(C'\fR definitely overshoots its usefulnizz fo' realz. Afta almost two
decadez of Perl hacking, our phat asses decided dat it do mo' harm than being
useful naaahhmean? Specifically, constructs like these:
.Sp
.Vb 1
\&   @{ $var\->[0] }
.Ve
.Sp
Must be freestyled like dis (or similarly), when \f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR is in
scope, n' \f(CW$var\fR can legally be \f(CW\*(C`undef\*(C'\fR:
.Sp
.Vb 1
\&   @{ $var\->[0] || [] }
.Ve
.Sp
This is buggin, n' don't shield against obvious mistakes such as
usin \f(CW""\fR, so one would even gotta write (at least fo' tha time
being):
.Sp
.Vb 1
\&   @{ defined $var\->[0] ? $var\->[0] : [] }
.Ve
.Sp
\&... which no muthafucka wit a lil' bit of common sense would consider
writing: clear code is clearly suttin' else.
.Sp
Curiously enough, sometimes perl aint so strict, as dis works even with
\&\f(CW\*(C`use strict\*(C'\fR up in scope:
.Sp
.Vb 1
\&   fo' (@{ $var\->[0] }) { ...
.Ve
.Sp
If dat aint hypocrisy dawwwwg! And all dat from a mere program!
.IP "use feature qw(say state given ...)" 4
.IX Item "use feature qw(say state given ...)"
We found it buggin dat we always gotta enable extra features. If
suttin' breaks cuz it didn't anticipate future chizzles, so be
it. 5.10 broke almost all our \s-1XS\s0 modulez n' no muthafucka cared either (or at
least I know of no muthafucka whoz ass straight-up complained bout gratuitous chizzlez \-
as opposed ta bugs).
.Sp
Few modulez dat is not actively maintained work wit newer versions of
Perl, regardless of use feature or not, so a freshly smoked up major perl release means
changes ta nuff modulez \- freshly smoked up keywordz is just tha tip of tha iceberg.
.Sp
If yo' code aint kickin it, itz dead, Jim \- be a actizzle maintainer.
.Sp
But no muthafucka forces you ta use dem extra features up in modulez meant for
olda versionz of perl \- common::sense of course works there as well.
There be also a blingin other mode where havin additionizzle features by
default is useful: commandline hacks n' internal use scripts: See \*(L"much
reduced typing\*(R", below.
.Sp
There is one notable exception: \f(CW\*(C`unicode_eval\*(C'\fR aint enabled by
default. In our opinion, \f(CW\*(C`use feature\*(C'\fR had one main effect \- newer perl
versions don't value backwardz compatibilitizzle n' tha mobilitizzle ta write
modulez fo' multiple perl versions much, afta all, you can use feature.
.Sp
\&\f(CW\*(C`unicode_eval\*(C'\fR don't add a freshly smoked up feature, it breaks a existin function.
.IP "no warnings yo, but a shitload of freshly smoked up errors" 4
.IX Item "no warnings yo, but a shitload of freshly smoked up errors"
Ah, tha dreaded warnings. Even worse, tha horribly dreaded \f(CW\*(C`\-w\*(C'\fR
switch: Even though our phat asses couldn't give a fuckin shiznit if other playas use warnings (and
certainly there be useful ones), a shitload of warnings simply go against the
spirit of Perl.
.Sp
Most prominently, tha warnings related ta \f(CW\*(C`undef\*(C'\fR. There is not a god damn thang wrong
with \f(CW\*(C`undef\*(C'\fR: it has well-defined semantics, it is useful, n' spitting
out warnings you never axed fo' is just evil.
.Sp
Da result was dat every last muthafuckin one of our modulez did \f(CW\*(C`no warnings\*(C'\fR up in the
past, ta avoid some muthafucka accidentally rockin n' forcin his wack standards
on our code. Of course, dis switched off all warnings, even tha useful
ones. Not a phat thang. Really, tha \f(CW\*(C`\-w\*(C'\fR switch should only enable
warnings fo' tha main program only.
.Sp
Funnily enough, perllexwarn explicitly mentions \f(CW\*(C`\-w\*(C'\fR (and not up in a
favourable way, callin it outright \*(L"wrong\*(R") yo, but standard utilities, such
as prove, or MakeMaker when hustlin \f(CW\*(C`make test\*(C'\fR, still enable them
blindly.
.Sp
For version 2 of common::sense, we finally sat down all dem minutes n' went
all up in \fIevery single warnin message\fR, identifiyin \- accordin to
common sense \- all tha useful ones.
.Sp
This resulted up in tha rather impressive list up in tha \s-1SYNOPSIS.\s0 When we
weren't sure, our phat asses didn't include tha warning, so tha list might grow in
the future (we might have done cooked up a mistake, too, so tha list might shrink
as well).
.Sp
Note tha presence of \f(CW\*(C`FATAL\*(C'\fR up in tha list: our phat asses do not be thinkin dat the
conditions caught by these warnings is worthy of a warning, we \fIinsist\fR
that they is worthy of \fIstopping\fR yo' program, \fIinstantly\fR. They are
\&\fIbugs\fR!
.Sp
Therefore we consider \f(CW\*(C`common::sense\*(C'\fR ta be much stricta than \f(CW\*(C`use
warnings\*(C'\fR, which is phat if yo ass is tha fuck into strict thangs (we is not,
actually yo, but these thangs tend ta be subjective).
.Sp
Afta decidin on tha list, we ran tha module against all of our code that
uses \f(CW\*(C`common::sense\*(C'\fR (that be almost all of our code), n' found only one
occurence where one of dem caused a problem: one of elmexz (unreleased)
modulez contained:
.Sp
.Vb 1
\&   $fmt =~ s/([^\es\e[]*)\e[( [^\e]]* )\e]/\ex0$1\ex1$2\ex0/xgo;
.Ve
.Sp
We quickly agreed dat indeed tha code should be chizzled, even though it
happened ta do tha right thang when tha warnin was switched off.
.IP "much reduced typing" 4
.IX Item "much reduced typing"
Especially wit version 2.0 of common::sense, tha amount of boilerplate
code you need ta add ta gte \fIthis\fR policy is daunting. No Muthafucka would write
this up in throwaway scripts, commandline hacks or up in quick internal-use
scripts.
.Sp
By rockin common::sense you git a thugged-out defined set of policies (ours yo, but maybe
yours, too, if you accept them), n' they is easy as fuck  ta apply ta your
scripts: typin \f(CW\*(C`use common::sense;\*(C'\fR is even shorta than \f(CW\*(C`use warnings;
use strict; use feature ...\*(C'\fR.
.Sp
And you can immediately use tha featurez of yo' installed perl, which
is mo' hard as fuck up in code you release yo, but not probably a issue for
internal-use code (downgradez of yo' thang perl should be rare,
right?).
.IP "mucho reduced memory usage" 4
.IX Item "mucho reduced memory usage"
Just rockin all dem pragmas mentioned up in tha \s-1SYNOPSIS\s0 together wastes
<blink>\fI\f(BI776\fI kilobytes\fR</blink> of precious memory up in mah perl, for
\&\fIevery single perl process rockin our code\fR, which on our machines, be a
lot. In comparison, dis module only uses \fI\f(BIfour\fI\fR kilobytes (I even
had ta write it up so it be lookin like more) of memory on tha same platform.
.Sp
Da scrilla/time/effort/electricitizzle invested up in these gigabytes (probably
petabytes globally!) of wasted memory could easily save 42 trees, n' a
kitten!
.Sp
Unfortunately, until everybodz applies mo' common sense, there will still
often be modulez dat pull up in tha monsta pragmas. But one can hope...
.SH "THERE IS NO 'no common::sense'!!!! !!!! !!"
.IX Header "THERE IS NO 'no common::sense'!!!! !!!! !!"
This module don't offer a unimport. First of all, it wastes even more
memory, second, n' mo' blinginly, whoz ass wit even a lil' bit of common sense
would want no common sense?
.SH "STABILITY AND FUTURE VERSIONS"
.IX Header "STABILITY AND FUTURE VERSIONS"
Future versions might chizzle just bout every last muthafuckin thang up in dis module. We
might test our modulez n' upload freshly smoked up ones hustlin wit newer versions of
this module, n' leave you standin up in tha drizzle cuz our phat asses didn't tell
you fo'sho. In fact, our phat asses did so when switchin from 1.0 ta 2.0, which enabled gobs
of warnings, n' made dem \s-1FATAL\s0 on top.
.PP
Maybe we will load some nifty modulez dat try ta emulate \f(CW\*(C`say\*(C'\fR or so
with perls olda than 5.10 (this module, of course, should work wit older
perl versions \- supportin 5.8 fo' example is just common sense at this
time. Maybe not up in tha future yo, but of course you can trust our common
sense ta be consistent with, uhm, our opinion).
.SH "WHAT OTHER PEOPLE HAD TO SAY ABOUT THIS MODULE"
.IX Header "WHAT OTHER PEOPLE HAD TO SAY ABOUT THIS MODULE"
apeiron
.PP
.Vb 2
\&   "... wow"
\&   "I hope common::sense be a joke."
.Ve
.PP
crab
.PP
.Vb 1
\&   "i wonder how tha fuck it would be if joerg schillin freestyled perl modules."
.Ve
.PP
Adam Kennedy
.PP
.Vb 3
\&   "Straight-up interesting, efficient, n' potentially suttin' I\*(Aqd use all tha time."
\&   [...]
\&   "So no common::sense fo' me, alas."
.Ve
.PP
H.Merijn Brand
.PP
.Vb 1
\&   "Just one mo' reason ta drop JSON::XS from mah distribution list"
.Ve
.PP
Pista Palo
.PP
.Vb 1
\&   "Somethang up in short supply these days..."
.Ve
.PP
Steffen Schwigon
.PP
.Vb 4
\&   "This module is like fo' shizzle *not* just a repetizzle of all tha other
\&   \*(Aquse strict, use warnings\*(Aq\-approaches, n' it\*(Aqs also not tha opposite.
\&   [...] And fo' its chosen middle\-way it\*(Aqs also not da most thugged-out shitty name eva.
\&   And every last muthafuckin thang is documented."
.Ve
.PP
\&\s-1BKB\s0
.PP
.Vb 2
\&   "[Deleted \- props ta Steffen Schwigon fo' pointin up dis review was
\&   up in error.]"
.Ve
.PP
Somni
.PP
.Vb 3
\&   "the arrogizzle of tha muthafucka"
\&   "I swear tha pimpin' muthafucka tacked somenoe else\*(Aqs name onto tha module
\&   just so his schmoooove ass could use tha royal \*(Aqwe\*(Aq up in tha documentation"
.Ve
.PP
Anonymous Monk
.PP
.Vb 1
\&   "Yo ass just gotta ludd dis thang, its gots META.json!!!"
.Ve
.PP
dngor
.PP
.Vb 2
\&   "Heh.  \*(Aq"<elmex at ta\-sa.org>"\*(Aq  Da quotes is semantic
\&   distancin from dat e\-mail address."
.Ve
.PP
Jerad Pierce
.PP
.Vb 3
\&   "Awful name (not a proper pragma), n' tha SYNOPSIS don\*(Aqt rap 
\&   anythang either n' shit. Nor is it clear what tha fuck features gotta do wit "common
\&   sense" or discipline."
.Ve
.PP
acme
.PP
.Vb 1
\&   "THERE IS NO \*(Aqno common::sense\*(Aq!!!! !!!! !!"
.Ve
.PP
apeiron (meta-comment bout our asses commenting^Wquotin his comment)
.PP
.Vb 1
\&   "How tha fuck bout quotin this: git a cold-ass lil clue, you fucktarded amoeba."
.Ve
.PP
quanth
.PP
.Vb 2
\&   "common sense is dope, json::xs is fast, Anyevent, EV is fast and
\&   furious. I gots a straight-up boner fo' mlehmannware ;)"
.Ve
.PP
apeiron
.PP
.Vb 3
\&   "... it\*(Aqs mlehmann\*(Aqs view of what tha fuck common sense is yo. His view of common
\&   sense is certainly uncommon, insofar as mah playas wit a cold-ass lil clue disagrees
\&   wit his muthafuckin ass."
.Ve
.PP
apeiron (another meta-comment)
.PP
.Vb 1
\&   "apeiron wondaz if his fuckin lil informant is here ta loot mo' quotes"
.Ve
.PP
ew73
.PP
.Vb 3
\&   "... I never gots past tha SYNOPSIS before callin it shit."
\&   [...]
\&   How tha fuck come no one eva quotes mah dirty ass. :("
.Ve
.PP
chip (not willin ta explain his cryptic thangs bout links up in Chizzlez files)
.PP
.Vb 3
\&   "I\*(Aqm willin ta ask tha question I\*(Aqve asked. Y'all KNOW dat shit, muthafucka! I\*(Aqm not willin ta go
\&   all up in tha whole dizzle you apparently have choreographed. Y'all KNOW dat shit, muthafucka! Either
\&   answer tha straight-up obvious question, or tell me ta git tha fuck outta mah grill wit dat bullshit again."
.Ve
.SH "FREQUENTLY ASKED QUESTIONS"
.IX Header "FREQUENTLY ASKED QUESTIONS"
Or frequently-come-up mad dramas.
.IP "Is dis module meant ta be trippin like a muthafucka?" 4
.IX Item "Is dis module meant ta be trippin like a muthafucka?"
Yes, we would have put it under tha \f(CW\*(C`Acme::\*(C'\fR namespace otherwise.
.IP "But tha manpage is freestyled up in a gangbangin' funky/stupid/... way?" 4
.IX Item "But tha manpage is freestyled up in a gangbangin' funky/stupid/... way?"
This was meant ta make it clear dat our common sense be a subjective
thang n' other playas can use they own notions, takin tha steam out
of anybody whoz ass might be offended (as some playas is always offended no
matta what tha fuck you do).
.Sp
This was a gangbangin' failure.
.Sp
But our crazy asses hope tha manpage still is somewhat entertainin even though it
explains borin rationale.
.IP "Why do you impose yo' conventions on mah code?" 4
.IX Item "Why do you impose yo' conventions on mah code?"
For some reason playas keep thankin dat \f(CW\*(C`common::sense\*(C'\fR imposes
process-wide limits, even though tha \s-1SYNOPSIS\s0 make it clear dat it works
like other similar modulez \- i.e. only within tha scope dat \f(CW\*(C`use\*(C'\fRs em.
.Sp
So, no, our phat asses don't \- no muthafucka is forced ta use dis module, n' rockin a module
that relies on common::sense do not impose anythang on yo thugged-out ass.
.IP "Why do you be thinkin only yo' notion of common::sense is valid?" 4
.IX Item "Why do you be thinkin only yo' notion of common::sense is valid?"
Well, our phat asses don't, n' have clearly freestyled dis up in tha documentation to
every single release. Us thugs was just fasta than anybody else w.r.t. to
grabbin tha namespace.
.IP "But dem hoes knows dat you gotta use strict n' use warnings, why do you disable them?" 4
.IX Item "But dem hoes knows dat you gotta use strict n' use warnings, why do you disable them?"
Well, our phat asses don't do dis either \- we selectively disagree wit the
usefulnizz of some warnings over others. This module be aimed at
experienced Perl programmers, not playas migratin from other languages
who might be surprised bout shiznit like fuckin \f(CW\*(C`undef\*(C'\fR. On tha other hand,
this do not exclude tha usefulnizz of dis module fo' total newbies, due
to its strictnizz up in enforcin policy, while all up in tha same time not limiting
the expressive juice of perl.
.Sp
This module is considerably \fImore\fR strict than tha canonical \f(CW\*(C`use
strict; use warnings\*(C'\fR, as it make all its warnings fatal up in nature, so
you can not git away wit as nuff thangs as wit tha canonical approach.
.Sp
This was not implemented up in version 1.0 cuz of tha dauntin number
of warnin categories n' tha hang-up up in gettin exactly tha set of
warnings you wish (i.e. peep tha \s-1SYNOPSIS\s0 up in how tha fuck fucked up it is to
get a specific set of warnings \- it aint reasonable ta put dis into
every module, tha maintenizzle effort would be enourmous).
.ie n .IP "But nuff modulez ""use strict"" or ""use warnings"", so tha memory savings do not apply?" 4
.el .IP "But nuff modulez \f(CWuse strict\fR or \f(CWuse warnings\fR, so tha memory savings do not apply?" 4
.IX Item "But nuff modulez use strict or use warnings, so tha memory savings do not apply?"
I suddenly feel sad...
.Sp
But fo'sho, thatz true. Fortunately \f(CW\*(C`common::sense\*(C'\fR still uses only a
miniscule amount of \s-1RAM.\s0
.IP "But it addz another dependency ta yo' modules!" 4
.IX Item "But it addz another dependency ta yo' modules!"
It aint nuthin but a gangbangin' fact, yeah. But itz trivial ta install, most ghettofab modulez have
many mo' dependencies n' we consider dependencies a phat thang \- it
leadz ta betta APIs, mo' thought bout interworkin of modulez n' so
on.
.IP "Why do you use \s-1JSON\s0 n' not \s-1YAML\s0 fo' yo' \s-1META\s0.yml?" 4
.IX Item "Why do you use JSON n' not YAML fo' yo' META.yml?"
This aint legit \- \s-1YAML\s0 supports a big-ass subset of \s-1JSON,\s0 n' dis subset
is what tha fuck \s-1META\s0.yml is freestyled in, so it would be erect ta say \*(L"the
\&\s-1META\s0.yml is freestyled up in a cold-ass lil common subset of \s-1YAML\s0 n' \s-1JSON\*(R".\s0
.Sp
Da \s-1META\s0.yml bigs up tha \s-1YAML, JSON\s0 n' \s-1META\s0.yml justifications, n' is
correctly parsed by \s-1CPAN,\s0 so if you have shiznit wit it, tha problem is
likely on yo' side.
.IP "But son! But!" 4
.IX Item "But son! But!"
Yeah, we know.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Marc Lehmann <schmorp@schmorp.de>
\& http://home.schmorp.de/
\&
\& Robin Redeker, "<elmex at ta\-sa.org>".
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 26:" 4
.IX Item "Around line 26:"
Non-ASCII characta peeped before =encodin up in 'XNothing' fo' realz. Assumin \s-1UTF\-8\s0
