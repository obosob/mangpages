'\" t
.\"     Title: glEvalMesh
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLEVALMESH" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glEvalMesh \- compute a one\- or two\-dimensionizzle grid of points or lines
.SH "C SPECIFICATION"
.HP \w'void\ glEvalMesh1('u
.BI "void glEvalMesh1(GLenum\ " "mode" ", GLint\ " "i1" ", GLint\ " "i2" ");"
.SH "PARAMETERS"
.PP
\fImode\fR
.RS 4
In
\fBglEvalMesh1\fR, specifies whether ta compute a one\-dimensionizzle mesh of points or lines\&. Right back up in yo muthafuckin ass. Symbolic constants
\fBGL_POINT\fR
and
\fBGL_LINE\fR
are accepted\&.
.RE
.PP
\fIi1\fR, \fIi2\fR
.RS 4
Specify tha straight-up original gangsta n' last integer joints fo' grid domain variable
i\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glEvalMesh2('u
.BI "void glEvalMesh2(GLenum\ " "mode" ", GLint\ " "i1" ", GLint\ " "i2" ", GLint\ " "j1" ", GLint\ " "j2" ");"
.SH "PARAMETERS"
.PP
\fImode\fR
.RS 4
In
\fBglEvalMesh2\fR, specifies whether ta compute a two\-dimensionizzle mesh of points, lines, or polygons\&. Right back up in yo muthafuckin ass. Symbolic constants
\fBGL_POINT\fR,
\fBGL_LINE\fR, and
\fBGL_FILL\fR
are accepted\&.
.RE
.PP
\fIi1\fR, \fIi2\fR
.RS 4
Specify tha straight-up original gangsta n' last integer joints fo' grid domain variable
i\&.
.RE
.PP
\fIj1\fR, \fIj2\fR
.RS 4
Specify tha straight-up original gangsta n' last integer joints fo' grid domain variable
j\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglMapGrid\fR()
and
\fBglEvalMesh\fR
are used up in tandem ta efficiently generate n' evaluate a seriez of evenly\-spaced map domain joints\&.
\fBglEvalMesh\fR
steps all up in tha integer domain of a one\- or two\-dimensionizzle grid, whose range is tha domain of tha evaluation maps specified by
\fBglMap1\fR()
and
\fBglMap2\fR()\&.
\fImode\fR
determines whether tha resultin vertices is connected as points, lines, or filled polygons\&.
.PP
In tha one\-dimensionizzle case,
\fBglEvalMesh1\fR, tha mesh is generated as if tha followin code fragment was executed:
.PP
.if n \{\
.RS 4
.\}
.nf
glBegin( \fItype\fR );
for ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 )
   glEvalCoord1( 
   		      
		      
		          
		              i
			      \(md
			      Î"
		              u
		          
		          +
		          
		              u
		              1
		          
		      
		   );
glEnd();
            
.fi
.if n \{\
.RE
.\}
.sp
where
.PP
Î" u = u 2 \- u 1 n
.PP
and
n,
u 1, and
u 2
are tha arguments ta da most thugged-out recent
\fBglMapGrid1\fR()
command\&.
\fItype\fR
is
\fBGL_POINTS\fR
if
\fImode\fR
is
\fBGL_POINT\fR, or
\fBGL_LINES\fR
if
\fImode\fR
is
\fBGL_LINE\fR\&.
.PP
Da one absolute numeric requirement is dat if
i = n, then tha value computed from
i \(md Î" u + u 1
is exactly
u 2\&.
.PP
In tha two\-dimensionizzle case,
\fBglEvalMesh2\fR, let \&.cp
Î" u = u 2 \- u 1 n
.PP
Î" v = v 2 \- v 1 m
.PP
where
n,
u 1,
u 2,
m,
v 1, and
v 2
are tha arguments ta da most thugged-out recent
\fBglMapGrid2\fR()
command\&. Then, if
\fImode\fR
is
\fBGL_FILL\fR, the
\fBglEvalMesh2\fR
command is equivalent to:
.PP
.if n \{\
.RS 4
.\}
.nf
for ( j = \fIj1\fR; j < \fIj2\fR; j += 1 ) {
   glBegin( GL_QUAD_STRIP );
   fo' ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 ) {
      glEvalCoord2( 
			
		        
			    
			        i
				\(md
			        Î"
		                u
			    
		            +
		            
		                u
		                1
		            
			    ,
			    
			    
			        j
				\(md
			        Î"
		                v

			    
		            +
		            
		                v
		                1
		            
			
		     );
      glEvalCoord2( 
			
		        
			    
			        i
				\(md
			        Î"
		                u
			    
		            +
		            
		                u
		                1
		            
			    ,
			    
			    
			        
				    
				        
			                    j
				            +
			                    1
				        
				    
				
				\(md
			        Î"
		                v
			    
		            +
		            
		                v
		                1
		            
			
		     );
   }
   glEnd();
}
            
.fi
.if n \{\
.RE
.\}
.PP
If
\fImode\fR
is
\fBGL_LINE\fR, then a cold-ass lil call to
\fBglEvalMesh2\fR
is equivalent to:
.PP
.if n \{\
.RS 4
.\}
.nf
for ( j = \fIj1\fR; j <= \fIj2\fR; j += 1 ) {
   glBegin( GL_LINE_STRIP );
   fo' ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 )
      glEvalCoord2( 
			
		        
			    
			        i
				\(md
			        Î"
		                u
			    
		            +
		            
		                u
		                1
		            
			    ,
			    
			    
			        j
				\(md
			        Î"
		                v
			    
		            +
		            
		                v
		                1
		            
			
		     );
   glEnd();
}

for ( i = \fIi1\fR;  i <= \fIi2\fR; i += 1 ) {
   glBegin( GL_LINE_STRIP );
   fo' ( j = \fIj1\fR; j <= \fIj1\fR; j += 1 )
      glEvalCoord2( 
			
		        
			    
			        i
				\(md
			        Î"
		                u
			    
		            +
		            
		                u
		                1
		            
			    ,
			    
			    
			        j
				\(md
			        Î"
		                v
			    
		            +
		            
		                v
		                1
		            
			
		     );
   glEnd();
}
            
.fi
.if n \{\
.RE
.\}
.PP
And finally, if
\fImode\fR
is
\fBGL_POINT\fR, then a cold-ass lil call to
\fBglEvalMesh2\fR
is equivalent to:
.PP
.if n \{\
.RS 4
.\}
.nf
glBegin( GL_POINTS );
for ( j = \fIj1\fR; j <= \fIj2\fR; j += 1 )
   fo' ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 )
      glEvalCoord2( 
			
		        
			    
			        i
				\(md
			        Î"
		                u
			    
		            +
		            
		                u
		                1
		            
			    ,
			    
			    
			        j
				\(md
			        Î"
		                v
			    
		            +
		            
		                v
		                1
		            
			
		     );
glEnd();
            
.fi
.if n \{\
.RE
.\}
.PP
In all three cases, tha only absolute numeric requirements is dat if
i = n, then tha value computed from
i \(md Î" u + u 1
is exactly
u 2, n' if
j = m, then tha value computed from
j \(md Î" v + v 1
is exactly
v 2\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fImode\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglEvalMesh\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAP1_GRID_DOMAIN\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAP2_GRID_DOMAIN\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAP1_GRID_SEGMENTS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAP2_GRID_SEGMENTS\fR
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglEvalCoord\fR(),
\fBglEvalPoint\fR(),
\fBglMap1\fR(),
\fBglMap2\fR(),
\fBglMapGrid\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
