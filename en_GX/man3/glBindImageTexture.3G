'\" t
.\"     Title: glBindImageTexture
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLBINDIMAGETEXTURE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBindImageTexture \- bind a level of a texture ta a image unit
.SH "C SPECIFICATION"
.HP \w'void\ glBindImageTexture('u
.BI "void glBindImageTexture(GLuint\ " "unit" ", GLuint\ " "texture" ", GLint\ " "level" ", GLboolean\ " "layered" ", GLint\ " "layer" ", GLenum\ " "access" ", GLenum\ " "format" ");"
.SH "PARAMETERS"
.PP
\fIunit\fR
.RS 4
Specifies tha index of tha image unit ta which ta bind tha texture
.RE
.PP
\fItexture\fR
.RS 4
Specifies tha name of tha texture ta bind ta tha image unit\&.
.RE
.PP
\fIlevel\fR
.RS 4
Specifies tha level of tha texture dat is ta be bound\&.
.RE
.PP
\fIlayered\fR
.RS 4
Specifies whether a layered texture bindin is ta be established\&.
.RE
.PP
\fIlayer\fR
.RS 4
If
\fIlayered\fR
is
\fBGL_FALSE\fR, specifies tha layer of
\fItexture\fR
to be bound ta tha image unit\&. Ignored otherwise\&.
.RE
.PP
\fIaccess\fR
.RS 4
Specifies a token indicatin tha type of access dat is ghon be performed on tha image\&.
.RE
.PP
\fIformat\fR
.RS 4
Specifies tha format dat tha elementz of tha image is ghon be treated as fo' tha purposez of formatted stores\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglBindImageTexture\fR
bindz a single level of a texture ta a image unit fo' tha purpose of readin n' freestylin it from shaders\&.
\fIunit\fR
specifies tha zero\-based index of tha image unit ta which ta bind tha texture level\&.
\fItexture\fR
specifies tha name of a existin texture object ta bind ta tha image unit\&. If
\fItexture\fR
is zero, then any existin bindin ta tha image unit is broken\&.
\fIlevel\fR
specifies tha level of tha texture ta bind ta tha image unit\&.
.PP
If
\fItexture\fR
is tha name of a one\-, two\-, or three\-dimensionizzle array texture, a cold-ass lil cube map or cube map array texture, or a two\-dimensionizzle multisample array texture, then it is possible ta bind either tha entire array, or only a single layer of tha array ta tha image unit\&. In such cases, if
\fIlayered\fR
is
\fBGL_TRUE\fR, tha entire array be attached ta tha image unit and
\fIlayer\fR
is ignored\&. But fuck dat shiznit yo, tha word on tha street is dat if
\fIlayered\fR
is
\fBGL_FALSE\fR
then
\fIlayer\fR
specifies tha layer of tha array ta attach ta tha image unit\&.
.PP
\fIaccess\fR
specifies tha access types ta be performed by shadaz n' may be set to
\fBGL_READ_ONLY\fR,
\fBGL_WRITE_ONLY\fR, or
\fBGL_READ_WRITE\fR
to indicate read\-only, write\-only or read\-write access, respectively\&. Violation of tha access type specified in
\fIaccess\fR
(for example, if a gangbangin' finger-lickin' dirty-ass shader writes ta a image bound with
\fIaccess\fR
set to
\fBGL_READ_ONLY\fR) will lead ta undefined thangs up in dis biatch, possibly includin program termination\&.
.PP
\fIformat\fR
specifies tha format dat is ta be used when struttin formatted stores tha fuck into tha image from shaders\&.
\fIformat\fR
must be compatible wit tha texture\*(Aqs internal format n' must be one of tha formats listed up in tha followin table\&.
.PP
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Internal Image Formats
.TS
allbox tab(:);
lB lB.
T{
\fB
                        Image Unit Format
                        \fR
T}:T{
\fB
                        Format Qualifier
                        \fR
T}
.T&
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l.
T{
\fBGL_RGBA32F\fR
T}:T{
rgba32f
T}
T{
\fBGL_RGBA16F\fR
T}:T{
rgba16f
T}
T{
\fBGL_RG32F\fR
T}:T{
rg32f
T}
T{
\fBGL_RG16F\fR
T}:T{
rg16f
T}
T{
\fBGL_R11F_G11F_B10F\fR
T}:T{
r11f_g11f_b10f
T}
T{
\fBGL_R32F\fR
T}:T{
r32f
T}
T{
\fBGL_R16F\fR
T}:T{
r16f
T}
T{
\fBGL_RGBA32UI\fR
T}:T{
rgba32ui
T}
T{
\fBGL_RGBA16UI\fR
T}:T{
rgba16ui
T}
T{
\fBGL_RGB10_A2UI\fR
T}:T{
rgb10_a2ui
T}
T{
\fBGL_RGBA8UI\fR
T}:T{
rgba8ui
T}
T{
\fBGL_RG32UI\fR
T}:T{
rg32ui
T}
T{
\fBGL_RG16UI\fR
T}:T{
rg16ui
T}
T{
\fBGL_RG8UI\fR
T}:T{
rg8ui
T}
T{
\fBGL_R32UI\fR
T}:T{
r32ui
T}
T{
\fBGL_R16UI\fR
T}:T{
r16ui
T}
T{
\fBGL_R8UI\fR
T}:T{
r8ui
T}
T{
\fBGL_RGBA32I\fR
T}:T{
rgba32i
T}
T{
\fBGL_RGBA16I\fR
T}:T{
rgba16i
T}
T{
\fBGL_RGBA8I\fR
T}:T{
rgba8i
T}
T{
\fBGL_RG32I\fR
T}:T{
rg32i
T}
T{
\fBGL_RG16I\fR
T}:T{
rg16i
T}
T{
\fBGL_RG8I\fR
T}:T{
rg8i
T}
T{
\fBGL_R32I\fR
T}:T{
r32i
T}
T{
\fBGL_R16I\fR
T}:T{
r16i
T}
T{
\fBGL_R8I\fR
T}:T{
r8i
T}
T{
\fBGL_RGBA16\fR
T}:T{
rgba16
T}
T{
\fBGL_RGB10_A2\fR
T}:T{
rgb10_a2
T}
T{
\fBGL_RGBA8\fR
T}:T{
rgba8
T}
T{
\fBGL_RG16\fR
T}:T{
rg16
T}
T{
\fBGL_RG8\fR
T}:T{
rg8
T}
T{
\fBGL_R16\fR
T}:T{
r16
T}
T{
\fBGL_R8\fR
T}:T{
r8
T}
T{
\fBGL_RGBA16_SNORM\fR
T}:T{
rgba16_snorm
T}
T{
\fBGL_RGBA8_SNORM\fR
T}:T{
rgba8_snorm
T}
T{
\fBGL_RG16_SNORM\fR
T}:T{
rg16_snorm
T}
T{
\fBGL_RG8_SNORM\fR
T}:T{
rg8_snorm
T}
T{
\fBGL_R16_SNORM\fR
T}:T{
r16_snorm
T}
T{
\fBGL_R8_SNORM\fR
T}:T{
r8_snorm
T}
.TE
.sp 1
.PP
When a texture is bound ta a image unit, the
\fIformat\fR
parameta fo' tha image unit need not exactly match tha texture internal format as long as tha formats is considered compatible as defined up in tha OpenGL Justification\&. Da matchin criterion used fo' a given texture may be determined by calling
\fBglGetTexParameter\fR()
with
\fIvalue\fR
set to
\fBGL_IMAGE_FORMAT_COMPATIBILITY_TYPE\fR, wit return joints of
\fBGL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE\fR
and
\fBGL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS\fR, specifyin matches by size n' class, respectively\&.
.SH "NOTES"
.PP
The
\fBglBindImageTexture\fR
is available only if tha GL version is 4\&.2 or pimped outer\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIunit\fR
greata than or equal ta tha value of
\fBGL_MAX_IMAGE_UNITS\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fItexture\fR
is not tha name of a existin texture object\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIlevel\fR
or
\fIlayer\fR
is less than zero\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIaccess\fR
or
\fIformat\fR
is not one of tha supported tokens\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_IMAGE_BINDING_NAME\fR\&.
.PP
\fBglGet\fR()
with argument
\fBGL_IMAGE_BINDING_LEVEL\fR\&.
.PP
\fBglGet\fR()
with argument
\fBGL_IMAGE_BINDING_LAYERED\fR\&.
.PP
\fBglGet\fR()
with argument
\fBGL_IMAGE_BINDING_LAYER\fR\&.
.PP
\fBglGet\fR()
with argument
\fBGL_IMAGE_BINDING_ACCESS\fR\&.
.PP
\fBglGet\fR()
with argument
\fBGL_IMAGE_BINDING_FORMAT\fR\&.
.SH "SEE ALSO"
.PP
\fBglGenTextures\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexStorage1D\fR(),
\fBglTexStorage2D\fR(),
\fBglTexStorage3D\fR(),
\fBglBindTexture\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2011 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
