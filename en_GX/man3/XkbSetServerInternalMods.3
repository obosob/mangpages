'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbSetServerInternalModz 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbSetServerInternalModz \- Sets tha modifiers dat is consumed by tha server 
before events is served up ta tha client
.SH SYNOPSIS
.HP
.B Bool XkbSetServerInternalMods
.BI "(\^Display *" "display" "\^,"
.BI "unsigned int " "device_spec" "\^,"
.BI "unsigned int " "affect_real" "\^,"
.BI "unsigned int " "real_values" "\^,"
.BI "unsigned int " "affect_virtual" "\^,"
.BI "unsigned int " "virtual_values" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- display
connection ta tha X server
.TP
.I \- device_spec
device ID, or XkbUseCoreKbd
.TP
.I \- affect_real
mask of real modifiers affected by dis call
.TP
.I \- real_values
values fo' affected real modifiers (1=>set, 0=>unset) 
.TP
.I \- affect_virtual
mask of virtual modifiers affected by dis call 
.TP
.I \- virtual_values
values fo' affected virtual modifiers (1=>set, 0=>unset) 
.SH DESCRIPTION
.LP
Da core protocol do not provide any means ta prevent a modifier from bein 
reported up in events busted ta clients; Xkb, however make dis possible via tha 
InternalModz control. Well shiiiit, it specifies modifiers dat should be consumed by tha 
server n' not reported ta clients, n' you can put dat on yo' toast. When a key is pressed n' a modifier dat 
has its bit set up in tha InternalModz control is reported ta tha server, tha 
server uses tha modifier when determinin tha actions ta apply fo' tha key. Da 
server then clears tha bit, so it aint straight-up reported ta tha client. In 
addition, modifiers specified up in tha InternalModz control is not used ta 
determine grabs n' is not used ta calculate core protocol compatibilitizzle state.

Manipulate tha InternalModz control via tha 
.I internal 
field up in tha XkbControlsRec structure, rockin 
.I XkbSetControls 
and 
.I XkbGetControls. 
Alternatively, use 
.I XkbSetServerInternalMods.

.I XkbSetServerInternalModz 
sendz a request ta tha server ta chizzle tha internal modifiers consumed by tha 
server n' shit. 
.I affect_real 
and 
.I real_values 
are maskz of real modifier bits indicatin which real modifiers is ta be added 
and removed from tha serverz internal modifiers control. Modifiers selected by 
both 
.I affect_real 
and 
.I real_values 
are added ta tha serverz internal modifiers control; dem selected by
.I affect_real 
but not by 
.I real_values 
are removed from tha serverz internal modifiers mask. Valid joints for
.I affect_real 
and 
.I real_values 
consist of any combination of tha eight core modifier bits: ShiftMask, LockMask, 
ControlMask, Mod1Mask - Mod5Mask. 
.I affect_virtual 
and 
.I virtual_values 
are maskz of virtual modifier bits indicatin which virtual modifiers is ta be 
added n' removed from tha serverz internal modifiers control. Modifiers 
selected by both 
.I affect_virtual 
and 
.I virtual_values 
are added ta tha serverz internal modifiers control; dem selected by
.I affect_virtual 
but not by 
.I virtual_values 
are removed from tha serverz internal modifiers control. Right back up in yo muthafuckin ass. See below fo' a 
rap of virtual modifier masks ta use up in 
.I affect_virtual 
and 
.I virtual_values. XkbSetServerInternalModz 
does not wait fo' a reply from tha server n' shit. Well shiiiit, it returns True if tha request was 
sent n' False otherwise.

Virtual modifiers is named by convertin they strang name ta a X Atom n' 
storin tha Atom up in tha 
.I names.vmodz 
array up in a XkbDescRec structure. Da posizzle of a name Atom up in tha 
.I names.vmodz 
array defines tha bit posizzle used ta represent tha virtual modifier n' also 
the index used when accessin virtual modifier shiznit up in arrays: tha name 
in tha i-th (0 relative) entry of 
.I names.vmodz 
is tha i-th virtual modifier, represented by tha mask (1<<i). Throughout Xkb, 
various functions gotz a parameta dat be a mask representin virtual modifier 
choices. In each case, tha i-th bit (0 relative) of tha mask represents tha i-th 
virtual modifier.

To set tha name of a virtual modifier, use 
.I XkbSetNames, 
usin XkbVirtualModNamesMask up in 
.I which 
and tha name up in tha 
.I xkb 
argument; ta retrieve indicator names, use 
.I XkbGetNames.
.SH STRUCTURES
.LP
Da complete description of a Xkb keyboard is given by a XkbDescRec. Da 
component structures up in tha XkbDescRec represent tha major Xkb components 
outlined up in Figure 1.1.
.nf

typedef struct {
    struct _XDisplay * display;      /\(** connection ta X server */
    unsigned short     flags;        /\(** private ta Xkb, do not modify */
    unsigned short     device_spec;  /\(** thang of interest */
    KeyCode            min_key_code; /\(** minimum keycode fo' thang */
    KeyCode            max_key_code; /\(** maximum keycode fo' thang */
    XkbControlsPtr     ctrls;        /\(** controls */
    XkbServerMapPtr    server;       /\(** server keymap */
    XkbClientMapPtr    map;          /\(** client keymap */
    XkbIndicatorPtr    indicators;   /\(** indicator map */
    XkbNamesPtr        names;        /\(** names fo' all components */
    XkbCompatMapPtr    compat;       /\(** compatibilitizzle map */
    XkbGeometryPtr     geom;         /\(** physical geometry of keyboard */
} XkbDescRec, *XkbDescPtr;

.fi
Da display field points ta a X display structure. Da flags field is private 
to tha library: modifyin flags may yield unpredictable thangs up in dis biatch. Da device_spec 
field specifies tha thang identifier of tha keyboard input device, or 
XkbUseCoreKeyboard, which specifies tha core keyboard device. Da min_key_code 
and max_key_code fieldz specify tha least n' top billin keycode dat can be 
returned by tha keyboard.
 
Each structure component has a cold-ass lil correspondin mask bit dat is used up in function 
calls ta indicate dat tha structure should be manipulated up in some manner, such 
as allocatin it or freein dat shit. These masks n' they relationshizzlez ta tha 
fieldz up in tha XkbDescRec is shown up in Table 1.

.TS
c s s
l l l
l l l.
Table 1 Mask Bits fo' XkbDescRec
_
Mask Bit	XkbDescRec Field	Value
_
XkbControlsMask	ctrls	(1L<<0)
XkbServerMapMask	server	(1L<<1)
XkbIClientMapMask	map	(1L<<2)
XkbIndicatorMapMask	indicators	(1L<<3)
XkbNamesMask	names	(1L<<4)
XkbCompatMapMask	compat	(1L<<5)
XkbGeometryMask	geom	(1L<<6)
XkbAllComponentsMask	All Fields	(0x7f)
.SH "SEE ALSO"
.BR XkbGetControls (3),
.BR XkbGetNames (3),
.BR XkbSetControls (3),
.BR XkbSetNames (3)
