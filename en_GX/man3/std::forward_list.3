" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::forward_list< _Tp, _Alloc > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstd::_Fwd_list_base< _Tp, _Alloc >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef 
.br
\fB_Fwd_list_const_iterator\fP< _Tp > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
_Alloc_traits::const_pointa \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef 
.br
_Alloc_traits::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef std::ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fB_Fwd_list_iterator\fP< _Tp > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Alloc_traits::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Alloc_traits::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef std::size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBforward_list\fP (const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fBforward_list\fP (const \fBforward_list\fP &__list, const _Alloc &__al)"
.br
.ti -1c
.RI "\fBforward_list\fP (\fBforward_list\fP &&__list, const _Alloc &__al) noexcept(_Node_alloc_traits::_S_always_equal())"
.br
.ti -1c
.RI "\fBforward_list\fP (size_type __n, const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fBforward_list\fP (size_type __n, const _Tp &__value, const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fBforward_list\fP (_InputIterator __first, _InputIterator __last, const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fBforward_list\fP (const \fBforward_list\fP &__list)"
.br
.ti -1c
.RI "\fBforward_list\fP (\fBforward_list\fP &&__list) noexcept"
.br
.ti -1c
.RI "\fBforward_list\fP (\fBstd::initializer_list\fP< _Tp > __il, const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fB~forward_list\fP () noexcept"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> void \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBassign\fP (size_type __n, const _Tp &__val)"
.br
.ti -1c
.RI "void \fBassign\fP (\fBstd::initializer_list\fP< _Tp > __il)"
.br
.ti -1c
.RI "\fBiterator\fP \fBbefore_begin\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbefore_begin\fP () const noexcept"
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcbefore_begin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fBiterator\fP \fBemplace_after\fP (\fBconst_iterator\fP __pos, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> void \fBemplace_front\fP (_Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.ti -1c
.RI "\fBiterator\fP \fBend\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const noexcept"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase_after\fP (\fBconst_iterator\fP __pos)"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase_after\fP (\fBconst_iterator\fP __pos, \fBconst_iterator\fP __last)"
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const noexcept"
.br
.ti -1c
.RI "template<typename _InputIterator , typename > \fBforward_list\fP< _Tp, _Alloc >
.br
::\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, _InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, const _Tp &__val)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, _Tp &&__val)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, size_type __n, const _Tp &__val)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, _InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, \fBstd::initializer_list\fP< _Tp > __il)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "void \fBmerge\fP (\fBforward_list\fP &&__list)"
.br
.ti -1c
.RI "void \fBmerge\fP (\fBforward_list\fP &__list)"
.br
.ti -1c
.RI "template<typename _Comp > void \fBmerge\fP (\fBforward_list\fP &&__list, _Comp __comp)"
.br
.ti -1c
.RI "template<typename _Comp > void \fBmerge\fP (\fBforward_list\fP &__list, _Comp __comp)"
.br
.ti -1c
.RI "\fBforward_list\fP & \fBoperator=\fP (const \fBforward_list\fP &__list)"
.br
.ti -1c
.RI "\fBforward_list\fP & \fBoperator=\fP (\fBforward_list\fP &&__list) noexcept(_Node_alloc_traits::_S_nothrow_move())"
.br
.ti -1c
.RI "\fBforward_list\fP & \fBoperator=\fP (\fBstd::initializer_list\fP< _Tp > __il)"
.br
.ti -1c
.RI "void \fBpop_front\fP ()"
.br
.ti -1c
.RI "void \fBpush_front\fP (const _Tp &__val)"
.br
.ti -1c
.RI "void \fBpush_front\fP (_Tp &&__val)"
.br
.ti -1c
.RI "void \fBremove\fP (const _Tp &__val)"
.br
.ti -1c
.RI "template<typename _Pred > void \fBremove_if\fP (_Pred __pred)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __sz)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __sz, const value_type &__val)"
.br
.ti -1c
.RI "void \fBreverse\fP () noexcept"
.br
.ti -1c
.RI "void \fBsort\fP ()"
.br
.ti -1c
.RI "template<typename _Comp > void \fBsort\fP (_Comp __comp)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &&__list)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &__list)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &&__list, \fBconst_iterator\fP __i)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &__list, \fBconst_iterator\fP __i)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &&, \fBconst_iterator\fP __before, \fBconst_iterator\fP __last)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &, \fBconst_iterator\fP __before, \fBconst_iterator\fP __last)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBforward_list\fP &__list) noexcept(_Node_alloc_traits::_S_nothrow_swap())"
.br
.ti -1c
.RI "void \fBunique\fP ()"
.br
.ti -1c
.RI "template<typename _BinPred > void \fBunique\fP (_BinPred __binary_pred)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fB_Node\fP * \fB_M_create_node\fP (_Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "\fB_Fwd_list_node_base\fP * \fB_M_erase_after\fP (\fB_Fwd_list_node_base\fP *__pos)"
.br
.ti -1c
.RI "\fB_Fwd_list_node_base\fP * \fB_M_erase_after\fP (\fB_Fwd_list_node_base\fP *__pos, \fB_Fwd_list_node_base\fP *__last)"
.br
.ti -1c
.RI "\fB_Node\fP * \fB_M_get_node\fP ()"
.br
.ti -1c
.RI "_Node_alloc_type & \fB_M_get_Node_allocator\fP () noexcept"
.br
.ti -1c
.RI "const _Node_alloc_type & \fB_M_get_Node_allocator\fP () const noexcept"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fB_Fwd_list_node_base\fP * \fB_M_insert_after\fP (\fBconst_iterator\fP __pos, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "void \fB_M_put_node\fP (\fB_Node\fP *__p)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "_Fwd_list_impl \fB_M_impl\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>>class std::forward_list< _Tp, _Alloc >"
A standard container wit linear time access ta elements, n' fixed time insertion/deletion at any point up in tha sequence\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Tp\fP Type of element\&. 
.br
\fI_Alloc\fP Allocator type, defaults ta allocator<_Tp>\&.
.RE
.PP
Meets tha requirementz of a \fCcontainer\fP, a \fCsequence\fP, includin tha \fCoptionizzle sequence requirements\fP wit tha exception of \fCat\fP n' \fCoperator\fP[]\&.
.PP
This be a \fIsingly\fP \fIlinked\fP list\&. Traversal up tha list requires linear time yo, but addin n' removin elements (or \fInodes\fP) is done up in constant time, regardless of where tha chizzle takes place\&. Unlike std::vector n' std::deque, random-access iterators is not provided, so subscriptin ( \fC\fP[] ) access aint allowed\&. For algorithms which only need sequential access, dis lack make no difference\&.
.PP
Also unlike tha other standard containers, std::forward_list serves up specialized algorithms unique ta linked lists, like fuckin splicing, sorting, n' in-place reversal\&. 
.PP
Definizzle at line 408 of file forward_list\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (const _Alloc &__al = \fC_Alloc()\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Creates a gangbangin' forward_list wit no elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__al\fP An allocator object\&. 
.RE
.PP

.PP
Definizzle at line 440 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (const \fBforward_list\fP< _Tp, _Alloc > &__list, const _Alloc &__al)\fC [inline]\fP"

.PP
Copy constructor wit allocator argument\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP Input list ta copy\&. 
.br
\fI__al\fP An allocator object\&. 
.RE
.PP

.PP
Definizzle at line 449 of file forward_list\&.h\&.
.PP
References std::forward_list< _Tp, _Alloc >::begin(), n' std::forward_list< _Tp, _Alloc >::end()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (\fBforward_list\fP< _Tp, _Alloc > &&__list, const _Alloc &__al)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Move constructor wit allocator argument\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP Input list ta move\&. 
.br
\fI__al\fP An allocator object\&. 
.RE
.PP

.PP
Definizzle at line 458 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (size_type__n, const _Alloc &__al = \fC_Alloc()\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Creates a gangbangin' forward_list wit default constructed elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da number of elements ta initially create\&.
.RE
.PP
This constructor creates tha forward_list wit \fI__n\fP default constructed elements\&. 
.PP
Definizzle at line 471 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (size_type__n, const _Tp &__value, const _Alloc &__al = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Creates a gangbangin' forward_list wit copiez of a exemplar element\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da number of elements ta initially create\&. 
.br
\fI__value\fP An element ta copy\&. 
.br
\fI__al\fP An allocator object\&.
.RE
.PP
This constructor fills tha forward_list wit \fI__n\fP copiez of \fI__value\fP\&. 
.PP
Definizzle at line 484 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (_InputIterator__first, _InputIterator__last, const _Alloc &__al = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Buildz a gangbangin' forward_list from a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&. 
.br
\fI__al\fP An allocator object\&.
.RE
.PP
Smoke a gangbangin' forward_list consistin of copiez of tha elements from [\fI__first\fP,\fI__last\fP)\&. This is linear up in N (where N is distance(\fI__first\fP,\fI__last\fP))\&. 
.PP
Definizzle at line 501 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (const \fBforward_list\fP< _Tp, _Alloc > &__list)\fC [inline]\fP"

.PP
Da forward_list copy constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP A forward_list of identical element n' allocator types\&. 
.RE
.PP

.PP
Definizzle at line 511 of file forward_list\&.h\&.
.PP
References std::forward_list< _Tp, _Alloc >::begin(), n' std::forward_list< _Tp, _Alloc >::end()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (\fBforward_list\fP< _Tp, _Alloc > &&__list)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Da forward_list move constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP A forward_list of identical element n' allocator types\&.
.RE
.PP
Da newly-created forward_list gotz nuff tha exact contentz of \fI__list\fP\&. Da contentz of \fI__list\fP is a valid yo, but unspecified forward_list\&. 
.PP
Definizzle at line 525 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (\fBstd::initializer_list\fP< _Tp >__il, const _Alloc &__al = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Buildz a gangbangin' forward_list from a initializer_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__il\fP An initializer_list of value_type\&. 
.br
\fI__al\fP An allocator object\&.
.RE
.PP
Smoke a gangbangin' forward_list consistin of copiez of tha elements up in tha initializer_list \fI__il\fP\&. This is linear up in __il\&.size()\&. 
.PP
Definizzle at line 536 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::~\fBforward_list\fP ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Da forward_list dtor\&. 
.PP
Definizzle at line 544 of file forward_list\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> void \fBstd::forward_list\fP< _Tp, _Alloc >::assign (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
Assigns a range ta a gangbangin' forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&.
.RE
.PP
This function fills a gangbangin' forward_list wit copiez of tha elements up in tha range [\fI__first\fP,\fI__last\fP)\&.
.PP
Note dat tha assignment straight-up chizzlez tha forward_list n' dat tha number of elementz of tha resultin forward_list is tha same ol' dirty as tha number of elements assigned\&. Oldskool data is lost\&. 
.PP
Definizzle at line 609 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::assign(), n' std::forward_list< _Tp, _Alloc >::operator=()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::assign (size_type__n, const _Tp &__val)\fC [inline]\fP"

.PP
Assigns a given value ta a gangbangin' forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of elements ta be assigned\&. 
.br
\fI__val\fP Value ta be assigned\&.
.RE
.PP
This function fills a gangbangin' forward_list wit \fI__n\fP copiez of tha given value\&. Note dat tha assignment straight-up chizzlez tha forward_list, n' dat tha resultin forward_list has __n elements\&. Oldskool data is lost\&. 
.PP
Definizzle at line 626 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::assign (\fBstd::initializer_list\fP< _Tp >__il)\fC [inline]\fP"

.PP
Assigns a initializer_list ta a gangbangin' forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__il\fP An initializer_list of value_type\&.
.RE
.PP
Replace tha contentz of tha forward_list wit copiez of tha elements up in tha initializer_list \fI__il\fP\&. This is linear up in il\&.size()\&. 
.PP
Definizzle at line 638 of file forward_list\&.h\&.
.PP
References std::forward_list< _Tp, _Alloc >::assign()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::before_begin ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write iterator dat points before tha straight-up original gangsta element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 653 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::insert_after()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::before_begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points before tha straight-up original gangsta element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 662 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::begin ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write iterator dat points ta tha straight-up original gangsta element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 670 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::forward_list()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 679 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::cbefore_begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points before tha straight-up original gangsta element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 715 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::emplace_front(), n' std::forward_list< _Tp, _Alloc >::push_front()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 706 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::operator=(), n' std::operator==()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::cend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 724 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::operator=(), n' std::operator==()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::clear ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Erases all tha elements\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 1027 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename\&.\&.\&. _Args> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::emplace_afta (\fBconst_iterator\fP__pos, _Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Constructs object up in forward_list afta tha specified iterator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP A const_iterator tha fuck into tha forward_list\&. 
.br
\fI__args\fP Arguments\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha banged data\&.
.RE
.PP
This function will bang a object of type T constructed wit T(std::forward<Args>(args)\&.\&.\&.) afta tha specified location\&. Cuz of tha nature of a gangbangin' forward_list dis operation can be done up in constant time, n' do not invalidate iterators n' references\&. 
.PP
Definizzle at line 837 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename\&.\&.\&. _Args> void \fBstd::forward_list\fP< _Tp, _Alloc >::emplace_front (_Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Constructs object up in forward_list all up in tha front of tha list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__args\fP Arguments\&.
.RE
.PP
This function will bang a object of type Tp constructed wit Tp(std::forward<Args>(args)\&.\&.\&.) all up in tha front of tha list Cuz of tha nature of a gangbangin' forward_list dis operation can be done up in constant time, n' do not invalidate iterators n' references\&. 
.PP
Definizzle at line 781 of file forward_list\&.h\&.
.PP
References std::forward_list< _Tp, _Alloc >::cbefore_begin()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> bool \fBstd::forward_list\fP< _Tp, _Alloc >::empty () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns legit if tha forward_list is empty\&. (Thus begin() would equal end()\&.) 
.PP
Definizzle at line 732 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::end ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write iterator dat points one past tha last element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 688 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::forward_list(), n' std::forward_list< _Tp, _Alloc >::insert_after()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::end () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only iterator dat points one past tha last element up in tha forward_list\&. Iteration is done up in ordinary element order\&. 
.PP
Definizzle at line 697 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::erase_afta (\fBconst_iterator\fP__pos)\fC [inline]\fP"

.PP
Removes tha element pointed ta by tha iterator followin \fCpos\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator pointin before element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha element followin tha one dat was erased, or end() if no such element exists\&.
.RE
.PP
This function will erase tha element all up in tha given posizzle n' thus shorten tha forward_list by one\&.
.PP
Cuz of tha nature of a gangbangin' forward_list dis operation can be done up in constant time, n' only invalidates iterators/references ta tha element bein removed\&. Da user be also cautioned dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 940 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::erase_afta (\fBconst_iterator\fP__pos, \fBconst_iterator\fP__last)\fC [inline]\fP"

.PP
Remove a range of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator pointin before tha straight-up original gangsta element ta be erased\&. 
.br
\fI__last\fP Iterator pointin ta one past tha last element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
@ __last\&.
.RE
.PP
This function will erase tha elements up in tha range \fI\fP(__pos,__last) n' shorten tha forward_list accordingly\&.
.PP
This operation is linear time up in tha size of tha range n' only invalidates iterators/references ta tha element bein removed\&. Da user be also cautioned dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 963 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> reference \fBstd::forward_list\fP< _Tp, _Alloc >::front ()\fC [inline]\fP"
Returns a read/write reference ta tha data all up in tha straight-up original gangsta element of tha forward_list\&. 
.PP
Definizzle at line 749 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> const_reference \fBstd::forward_list\fP< _Tp, _Alloc >::front () const\fC [inline]\fP"
Returns a read-only (constant) reference ta tha data all up in tha straight-up original gangsta element of tha forward_list\&. 
.PP
Definizzle at line 760 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> allocator_type \fBstd::forward_list\fP< _Tp, _Alloc >::get_allocator () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Git a cold-ass lil copy of tha memory allocation object\&. 
.PP
Definizzle at line 643 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::insert_afta (\fBconst_iterator\fP__pos, const _Tp &__val)\fC [inline]\fP"

.PP
Inserts given value tha fuck into forward_list afta specified iterator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP An iterator tha fuck into tha forward_list\&. 
.br
\fI__val\fP Data ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha banged data\&.
.RE
.PP
This function will bang a cold-ass lil copy of tha given value afta tha specified location\&. Cuz of tha nature of a gangbangin' forward_list dis operation can be done up in constant time, n' do not invalidate iterators n' references\&. 
.PP
Definizzle at line 854 of file forward_list\&.h\&.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::insert_after()\&.
.SS "template<typename _Tp, typename _Alloc > \fBforward_list\fP< _Tp, _Alloc >::\fBiterator\fP forward_list::insert_afta (\fBconst_iterator\fP__pos, size_type__n, const _Tp &__val)"

.PP
Inserts a fuckin shitload of copiez of given data tha fuck into tha forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP An iterator tha fuck into tha forward_list\&. 
.br
\fI__n\fP Number of elements ta be inserted\&. 
.br
\fI__val\fP Data ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha last banged copy of \fIval\fP or \fIpos\fP if \fIn\fP == 0\&.
.RE
.PP
This function will bang a specified number of copiez of tha given data afta tha location specified by \fIpos\fP\&.
.PP
This operation is linear up in tha number of elements banged n' do not invalidate iterators n' references\&. 
.PP
Definizzle at line 272 of file forward_list\&.tcc\&.
.PP
References std::forward_list< _Tp, _Alloc >::before_begin(), n' std::forward_list< _Tp, _Alloc >::end()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::insert_afta (\fBconst_iterator\fP__pos, _InputIterator__first, _InputIterator__last)"

.PP
Inserts a range tha fuck into tha forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP An iterator tha fuck into tha forward_list\&. 
.br
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha last banged element or \fI__pos\fP if \fI__first\fP == \fI__last\fP\&.
.RE
.PP
This function will bang copiez of tha data up in tha range [\fI__first\fP,\fI__last\fP) tha fuck into tha forward_list afta tha location specified by \fI__pos\fP\&.
.PP
This operation is linear up in tha number of elements banged n' do not invalidate iterators n' references\&. 
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::insert_afta (\fBconst_iterator\fP__pos, \fBstd::initializer_list\fP< _Tp >__il)\fC [inline]\fP"

.PP
Inserts tha contentz of a initializer_list tha fuck into forward_list afta tha specified iterator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP An iterator tha fuck into tha forward_list\&. 
.br
\fI__il\fP An initializer_list of value_type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha last banged element or \fI__pos\fP if \fI__il\fP is empty\&.
.RE
.PP
This function will bang copiez of tha data up in tha initializer_list \fI__il\fP tha fuck into tha forward_list before tha location specified by \fI__pos\fP\&.
.PP
This operation is linear up in tha number of elements banged n' do not invalidate iterators n' references\&. 
.PP
Definizzle at line 919 of file forward_list\&.h\&.
.PP
References std::forward_list< _Tp, _Alloc >::insert_after()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> size_type \fBstd::forward_list\fP< _Tp, _Alloc >::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns tha phattest possible number of elementz of forward_list\&. 
.PP
Definizzle at line 739 of file forward_list\&.h\&.
.PP
References std::allocator_traits< _Alloc >::max_size()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::merge (\fBforward_list\fP< _Tp, _Alloc > &&__list)\fC [inline]\fP"

.PP
Merge sorted lists\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP Sorted list ta merge\&.
.RE
.PP
Assumes dat both \fIlist\fP n' dis list is sorted accordin ta operator<()\&. Merges elementz of \fI__list\fP tha fuck into dis list up in sorted order, leavin \fI__list\fP empty when complete\&. Elements up in dis list precede elements up in \fI__list\fP dat is equal\&. 
.PP
Definizzle at line 1165 of file forward_list\&.h\&.
.SS "template<typename _Tp , typename _Alloc > template<typename _Comp > void forward_list::merge (\fBforward_list\fP< _Tp, _Alloc > &&__list, _Comp__comp)"

.PP
Merge sorted lists accordin ta comparison function\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP Sorted list ta merge\&. 
.br
\fI__comp\fP Comparison function definin sort order\&.
.RE
.PP
Assumes dat both \fI__list\fP n' dis list is sorted accordin ta comp\&. Merges elementz of \fI__list\fP tha fuck into dis list up in sorted order, leavin \fI__list\fP empty when complete\&. Elements up in dis list precede elements up in \fI__list\fP dat is equivalent accordin ta comp()\&. 
.PP
Definizzle at line 365 of file forward_list\&.tcc\&.
.SS "template<typename _Tp , typename _Alloc > \fBforward_list\fP< _Tp, _Alloc > & forward_list::operator= (const \fBforward_list\fP< _Tp, _Alloc > &__list)"

.PP
Da forward_list assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP A forward_list of identical element n' allocator types\&.
.RE
.PP
All tha elementz of \fI__list\fP is copied yo, but unlike tha copy constructor, tha allocator object aint copied\&. 
.PP
Definizzle at line 156 of file forward_list\&.tcc\&.
.PP
References std::forward_list< _Tp, _Alloc >::cbegin(), n' std::forward_list< _Tp, _Alloc >::cend()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBforward_list\fP& \fBstd::forward_list\fP< _Tp, _Alloc >::operator= (\fBforward_list\fP< _Tp, _Alloc > &&__list)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Da forward_list move assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP A forward_list of identical element n' allocator types\&.
.RE
.PP
Da contentz of \fI__list\fP is moved tha fuck into dis forward_list (without copying, if tha allocators permit it)\&. \fI__list\fP be a valid yo, but unspecified forward_list 
.PP
Definizzle at line 568 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBforward_list\fP& \fBstd::forward_list\fP< _Tp, _Alloc >::operator= (\fBstd::initializer_list\fP< _Tp >__il)\fC [inline]\fP"

.PP
Da forward_list initializer list assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__il\fP An initializer_list of value_type\&.
.RE
.PP
Replace tha contentz of tha forward_list wit copiez of tha elements up in tha initializer_list \fI__il\fP\&. This is linear up in __il\&.size()\&. 
.PP
Definizzle at line 588 of file forward_list\&.h\&.
.PP
References std::forward_list< _Tp, _Alloc >::assign()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::pop_front ()\fC [inline]\fP"

.PP
Removes first element\&. This be a typical stack operation\&. Well shiiiit, it shrinks tha forward_list by one\&. Cuz of tha nature of a gangbangin' forward_list dis operation can be done up in constant time, n' only invalidates iterators/references ta tha element bein removed\&.
.PP
Note dat no data is returned, n' if tha straight-up original gangsta elementz data is needed, it should be retrieved before pop_front() is called\&. 
.PP
Definizzle at line 819 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::push_front (const _Tp &__val)\fC [inline]\fP"

.PP
Add data ta tha front of tha forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__val\fP Data ta be added\&.
.RE
.PP
This be a typical stack operation\&. Da function creates a element all up in tha front of tha forward_list n' assigns tha given data ta it\&. Cuz of tha nature of a gangbangin' forward_list dis operation can be done up in constant time, n' do not invalidate iterators n' references\&. 
.PP
Definizzle at line 796 of file forward_list\&.h\&.
.PP
References std::forward_list< _Tp, _Alloc >::cbefore_begin()\&.
.SS "template<typename _Tp, typename _Alloc > void forward_list::remove (const _Tp &__val)"

.PP
Remove all elements equal ta value\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__val\fP Da value ta remove\&.
.RE
.PP
Removes every last muthafuckin element up in tha list equal ta \fI__val\fP\&. Remainin elements stay up in list order\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 300 of file forward_list\&.tcc\&.
.PP
References std::__addressof()\&.
.SS "template<typename _Tp , typename _Alloc > template<typename _Pred > void forward_list::remove_if (_Pred__pred)"

.PP
Remove all elements satisfyin a predicate\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pred\fP Unary predicate function or object\&.
.RE
.PP
Removes every last muthafuckin element up in tha list fo' which tha predicate returns true\&. Remainin elements stay up in list order\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 328 of file forward_list\&.tcc\&.
.SS "template<typename _Tp , typename _Alloc > void forward_list::resize (size_type__sz)"

.PP
Resizes tha forward_list ta tha specified number of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__sz\fP Number of elements tha forward_list should contain\&.
.RE
.PP
This function will resize tha forward_list ta tha specified number of elements\&. If tha number is smalla than tha forward_listz current number of elements tha forward_list is truncated, otherwise tha forward_list is extended n' tha freshly smoked up elements is default constructed\&. 
.PP
Definizzle at line 198 of file forward_list\&.tcc\&.
.PP
References std::end()\&.
.SS "template<typename _Tp , typename _Alloc > void forward_list::resize (size_type__sz, const value_type &__val)"

.PP
Resizes tha forward_list ta tha specified number of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__sz\fP Number of elements tha forward_list should contain\&. 
.br
\fI__val\fP Data wit which freshly smoked up elements should be populated\&.
.RE
.PP
This function will resize tha forward_list ta tha specified number of elements\&. If tha number is smalla than tha forward_listz current number of elements tha forward_list is truncated, otherwise tha forward_list is extended n' freshly smoked up elements is populated wit given data\&. 
.PP
Definizzle at line 217 of file forward_list\&.tcc\&.
.PP
References std::end()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::reverse ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Reverse tha elements up in list\&. Reverse tha order of elements up in tha list up in linear time\&. 
.PP
Definizzle at line 1218 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::sort ()\fC [inline]\fP"

.PP
Sort tha elementz of tha list\&. Right back up in yo muthafuckin ass. Sorts tha elementz of dis list up in NlogN time\&. Equivalent elements remain up in list order\&. 
.PP
Definizzle at line 1199 of file forward_list\&.h\&.
.SS "template<typename _Tp , class _Alloc > template<typename _Comp > void forward_list::sort (_Comp__comp)"

.PP
Sort tha forward_list rockin a cold-ass lil comparison function\&. Right back up in yo muthafuckin ass. Sorts tha elementz of dis list up in NlogN time\&. Equivalent elements remain up in list order\&. 
.PP
Definizzle at line 411 of file forward_list\&.tcc\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::splice_afta (\fBconst_iterator\fP__pos, \fBforward_list\fP< _Tp, _Alloc > &&__list)\fC [inline]\fP"

.PP
Insert contentz of another forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencin tha element ta bang after\&. 
.br
\fI__list\fP Source list\&.
.RE
.PP
Da elementz of \fIlist\fP is banged up in constant time afta tha element referenced by \fIpos\fP\&. \fIlist\fP becomes a empty list\&.
.PP
Requires dis != \fIx\fP\&. 
.PP
Definizzle at line 1044 of file forward_list\&.h\&.
.SS "template<typename _Tp , typename _Alloc > void forward_list::splice_afta (\fBconst_iterator\fP__pos, \fBforward_list\fP< _Tp, _Alloc > &&__list, \fBconst_iterator\fP__i)"

.PP
Insert element from another forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencin tha element ta bang after\&. 
.br
\fI__list\fP Source list\&. 
.br
\fI__i\fP Iterator referencin tha element before tha element ta move\&.
.RE
.PP
Removes tha element up in list \fIlist\fP referenced by \fIi\fP n' bangs it tha fuck into tha current list afta \fIpos\fP\&. 
.PP
Definizzle at line 255 of file forward_list\&.tcc\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::splice_afta (\fBconst_iterator\fP__pos, \fBforward_list\fP< _Tp, _Alloc > &&, \fBconst_iterator\fP__before, \fBconst_iterator\fP__last)\fC [inline]\fP"

.PP
Insert range from another forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencin tha element ta bang after\&. 
.br
\fI__list\fP Source list\&. 
.br
\fI__before\fP Iterator referencin before tha start of range up in list\&. 
.br
\fI__last\fP Iterator referencin tha end of range up in list\&.
.RE
.PP
Removes elements up in tha range (__before,__last) n' bangs dem afta \fI__pos\fP up in constant time\&.
.PP
Undefined if \fI__pos\fP is up in (__before,__last)\&. 
.PP
Definizzle at line 1087 of file forward_list\&.h\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::swap (\fBforward_list\fP< _Tp, _Alloc > &__list)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Swaps data wit another forward_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__list\fP A forward_list of tha same element n' allocator types\&.
.RE
.PP
This exchanges tha elements between two lists up in constant time\&. Note dat tha global std::swap() function is specialized such dat std::swap(l1,l2) will feed ta dis function\&. 
.PP
Definizzle at line 980 of file forward_list\&.h\&.
.PP
Referenced by std::swap()\&.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::unique ()\fC [inline]\fP"

.PP
Remove consecutizzle duplicate elements\&. For each consecutizzle set of elements wit tha same value, remove all but tha straight-up original gangsta one\&. Remainin elements stay up in list order\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 1136 of file forward_list\&.h\&.
.SS "template<typename _Tp , typename _Alloc > template<typename _BinPred > void forward_list::unique (_BinPred__binary_pred)"

.PP
Remove consecutizzle elements satisfyin a predicate\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__binary_pred\fP Binary predicate function or object\&.
.RE
.PP
For each consecutizzle set of elements [first,last) dat satisfy predicate(first,i) where i be a iterator up in [first,last), remove all but tha straight-up original gangsta one\&. Remainin elements stay up in list order\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 344 of file forward_list\&.tcc\&.
.PP
References std::begin(), n' std::end()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
