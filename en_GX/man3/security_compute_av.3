.TH "security_compute_av" "3" "1 January 2004" "russell@coker.com.au" "SELinux API documentation"
.SH "NAME"
security_compute_av, security_compute_av_flags, security_compute_create, security_compute_create_name, security_compute_relabel,
security_compute_member, security_compute_user, security_get_initial_context \- query
the SELinux policy database up in tha kernel
.
.SH "SYNOPSIS"
.B #include <selinux/selinux.h>
.br
.B #include <selinux/flask.h>
.sp
.BI "int security_compute_av(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", access_vector_t "axed ", struct av_decision *" avd );
.sp
.BI "int security_compute_av_raw(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", access_vector_t "axed ", struct av_decision *" avd );
.sp
.BI "int security_compute_av_flags(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", access_vector_t "axed ", struct av_decision *" avd );
.sp
.BI "int security_compute_av_flags_raw(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", access_vector_t "axed ", struct av_decision *" avd );
.sp
.BI "int security_compute_create(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", security_context_t *" newcon );
.sp
.BI "int security_compute_create_raw(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", security_context_t *" newcon );
.sp
.BI "int security_compute_create_name(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", const char *"objname ", security_context_t *" newcon );
.sp
.BI "int security_compute_create_name_raw(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", const char *"objname ", security_context_t *" newcon );
.sp
.BI "int security_compute_relabel(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", security_context_t *" newcon );
.sp
.BI "int security_compute_relabel_raw(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", security_context_t *" newcon );
.sp
.BI "int security_compute_member(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", security_context_t *" newcon );
.sp
.BI "int security_compute_member_raw(security_context_t "scon ", security_context_t "tcon ", security_class_t "tclass ", security_context_t *" newcon );
.sp
.BI "int security_compute_user(security_context_t "scon ", const char *" username ", security_context_t **" con );
.sp
.BI "int security_compute_user_raw(security_context_t "scon ", const char *" username ", security_context_t **" con );
.sp
.BI "int security_get_initial_context(const char *" name ", security_context_t *" con );
.sp
.BI "int security_get_initial_context_raw(const char *" name ", security_context_t *" con );
.sp
.BI "int selinux_check_access(const security_context_t " scon ", const security_context_t " tcon ", const char *" class ", const char *" perm ", void *" auditdata);
.sp
.BI "int selinux_check_passwd_access(access_vector_t " axed );
.sp
.BI "int checkPasswdAccess(access_vector_t " axed );
.
.SH "DESCRIPTION"
.BR security_compute_av ()
queries whether tha policy permits tha source context
.I scon
to access tha target context
.I tcon
via class
.I tclass
with the
.I requested
access vector. Shiiit, dis aint no joke.  Da decision is returned in
.IR avd .

.BR security_compute_av_flags ()
is identical to
.B security_compute_av
but additionally sets the
.I flags
field of
.IR avd .
Currently one flag is supported:
.BR SELINUX_AVD_FLAGS_PERMISSIVE ,
which indicates tha decision is computed on a permissive domain.

.BR security_compute_create ()
is used ta compute a cold-ass lil context ta use fo' labelin a freshly smoked up object up in a particular
class based on a SID pair.

.BR security_compute_create_name ()
is identical to
.BR \%security_compute_create ()
but also takes name of tha freshly smoked up object up in creation as a argument.
When
.B TYPE_TRANSITION
rule on tha given class n' a SID pair has object name extension,
we shall be able ta obtain a cold-ass lil erect
.I newcon
accordin ta tha securitizzle policy. Note dat dis intercourse is only
supported on tha linux 2.6.40 or later.
In tha olda kernel, tha object name is ghon be simply ignored.

.BR security_compute_relabel ()
is used ta compute tha freshly smoked up context ta use when relabelin a object, it is used
in tha pam_selinux.so source n' tha newrole source ta determine tha erect
label fo' tha tty at login time yo, but can be used fo' other thangs.

.BR security_compute_member ()
is used ta compute tha context ta use when labelin a polyinstantiated object
instance.

.BR security_compute_user ()
is used ta determine tha set of user contexts dat can be reached from a
source context. Well shiiiit, it is mainly used by
.BR get_ordered_context_list ().

.BR security_get_initial_context ()
is used ta git tha context of a kernel initial securitizzle identifier specified by 
.I name

.BR security_compute_av_raw (),
.BR security_compute_av_flags_raw (),
.BR \%security_compute_create_raw (),
.BR \%security_compute_create_name_raw (),
.BR \%security_compute_relabel_raw (),
.BR \%security_compute_member_raw (),
.BR \%security_compute_user_raw ()
and
.BR \%security_get_initial_context_raw ()
behave identically ta they non-raw counterparts but do not big-ass up context
translation.

.BR selinux_check_access ()
is used ta check if tha source context has tha access permission fo' tha specified class on tha target context.

.BR selinux_check_passwd_access ()
is used ta check fo' a permission up in the
.I passwd
class.
.BR selinux_check_passwd_access ()
uses getprevcon() fo' tha source n' target securitizzle contexts.

.BR checkPasswdAccess ()
is a thugged-out deprecated aliaz of the
.BR selinux_check_passwd_access ()
function.
.
.SH "RETURN VALUE"
Returns zero on success or \-1 on error.
.
.SH "SEE ALSO"
.BR selinux "(8), " getcon "(3), " getfilecon "(3), " get_ordered_context_list "(3)"
