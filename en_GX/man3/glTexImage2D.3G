'\" t
.\"     Title: glTexImage2D
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLTEXIMAGE2D" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glTexImage2D \- specify a two\-dimensionizzle texture image
.SH "C SPECIFICATION"
.HP \w'void\ glTexImage2D('u
.BI "void glTexImage2D(GLenum\ " "target" ", GLint\ " "level" ", GLint\ " "internalFormat" ", GLsizei\ " "width" ", GLsizei\ " "height" ", GLint\ " "border" ", GLenum\ " "format" ", GLenum\ " "type" ", const\ GLvoid\ *\ " "data" ");"
.PP
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha target texture\&. Must be
\fBGL_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_TEXTURE_1D_ARRAY\fR,
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_PROXY_TEXTURE_RECTANGLE\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR, or
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR\&.
.RE
.PP
\fIlevel\fR
.RS 4
Specifies tha level\-of\-detail number\&. Level 0 is tha base image level\&. Level
\fIn\fR
is the
\fIn\fRth mipmap reduction image\&. If
\fItarget\fR
is
\fBGL_TEXTURE_RECTANGLE\fR
or
\fBGL_PROXY_TEXTURE_RECTANGLE\fR,
\fIlevel\fR
must be 0\&.
.RE
.PP
\fIinternalFormat\fR
.RS 4
Specifies tha number of color components up in tha texture\&. Must be one of base internal formats given up in Table 1, one of tha sized internal formats given up in Table 2, or one of tha compressed internal formats given up in Table 3, below\&.
.RE
.PP
\fIwidth\fR
.RS 4
Specifies tha width of tha texture image\& fo' realz. All implementations support texture images dat is at least 1024 texels wide\&.
.RE
.PP
\fIheight\fR
.RS 4
Specifies tha height of tha texture image, or tha number of layers up in a texture array, up in tha case of the
\fBGL_TEXTURE_1D_ARRAY\fR
and
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR
targets\& fo' realz. All implementations support 2D texture images dat is at least 1024 texels high, n' texture arrays dat is at least 256 layers deep\&.
.RE
.PP
\fIborder\fR
.RS 4
This value must be 0\&.
.RE
.PP
\fIformat\fR
.RS 4
Specifies tha format of tha pixel data\&. Da followin symbolic joints is accepted:
\fBGL_RED\fR,
\fBGL_RG\fR,
\fBGL_RGB\fR,
\fBGL_BGR\fR,
\fBGL_RGBA\fR, and
\fBGL_BGRA\fR\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies tha data type of tha pixel data\&. Da followin symbolic joints is accepted:
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_INT\fR,
\fBGL_FLOAT\fR,
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR, and
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR\&.
.RE
.PP
\fIdata\fR
.RS 4
Specifies a pointa ta tha image data up in memory\&.
.RE
.SH "DESCRIPTION"
.PP
Texturin allows elementz of a image array ta be read by shaders\&.
.PP
To define texture images, call
\fBglTexImage2D\fR\&. Da arguments describe tha parametaz of tha texture image, like fuckin height, width, width of tha border, level\-of\-detail number (see
\fBglTexParameter\fR()), n' number of color components provided\&. Da last three arguments describe how tha fuck tha image is represented up in memory\&.
.PP
If
\fItarget\fR
is
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR,
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR, or
\fBGL_PROXY_TEXTURE_RECTANGLE\fR, no data is read from
\fIdata\fR yo, but all of tha texture image state is recalculated, checked fo' consistency, n' checked against tha implementation\*(Aqs capabilities\&. If tha implementation cannot handle a texture of tha axed texture size, it sets all of tha image state ta 0 yo, but do not generate a error (see
\fBglGetError\fR())\&. To query fo' a entire mipmap array, use a image array level pimped outa than or equal ta 1\&.
.PP
If
\fItarget\fR
is
\fBGL_TEXTURE_2D\fR,
\fBGL_TEXTURE_RECTANGLE\fR
or one of the
\fBGL_TEXTURE_CUBE_MAP\fR
targets, data is read from
\fIdata\fR
as a sequence of signed or unsigned bytes, shorts, or longs, or single\-precision floating\-point joints, dependin on
\fItype\fR\&. These joints is grouped tha fuck into setz of one, two, three, or four joints, dependin on
\fIformat\fR, ta form elements\&. Each data byte is treated as eight 1\-bit elements, wit bit orderin determined by
\fBGL_UNPACK_LSB_FIRST\fR
(see
\fBglPixelStore\fR())\&.
.PP
If
\fItarget\fR
is
\fBGL_TEXTURE_1D_ARRAY\fR, data is interpreted as a array of one\-dimensionizzle images\&.
.PP
If a non\-zero named buffer object is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a texture image is specified,
\fIdata\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&.
.PP
Da first element correspondz ta tha lower left corner of tha texture image\&. Right back up in yo muthafuckin ass. Subsequent elements progress left\-to\-right all up in tha remainin texels up in tha lowest row of tha texture image, n' then up in successively higher rowz of tha texture image\&. Da final element correspondz ta tha upper right corner of tha texture image\&.
.PP
\fIformat\fR
determines tha composizzle of each element in
\fIdata\fR\&. Well shiiiit, it can assume one of these symbolic joints:
.PP
\fBGL_RED\fR
.RS 4
Each element be a single red component\&. Da GL converts it ta floatin point n' assemblez it tha fuck into a RGBA element by attachin 0 fo' chronic n' blue, n' 1 fo' alpha\&. Each component is then multiplied by tha signed scale factor
\fBGL_c_SCALE\fR, added ta tha signed bias
\fBGL_c_BIAS\fR, n' clamped ta tha range [0,1]\&.
.RE
.PP
\fBGL_RG\fR
.RS 4
Each element be a red/chronic double\&. Da GL converts it ta floatin point n' assemblez it tha fuck into a RGBA element by attachin 0 fo' blue, n' 1 fo' alpha\&. Each component is then multiplied by tha signed scale factor
\fBGL_c_SCALE\fR, added ta tha signed bias
\fBGL_c_BIAS\fR, n' clamped ta tha range [0,1]\&.
.RE
.PP
\fBGL_RGB\fR
.RS 4
.RE
.PP
\fBGL_BGR\fR
.RS 4
Each element be a RGB triple\&. Da GL converts it ta floatin point n' assemblez it tha fuck into a RGBA element by attachin 1 fo' alpha\&. Each component is then multiplied by tha signed scale factor
\fBGL_c_SCALE\fR, added ta tha signed bias
\fBGL_c_BIAS\fR, n' clamped ta tha range [0,1]\&.
.RE
.PP
\fBGL_RGBA\fR
.RS 4
.RE
.PP
\fBGL_BGRA\fR
.RS 4
Each element gotz nuff all four components\&. Each component is multiplied by tha signed scale factor
\fBGL_c_SCALE\fR, added ta tha signed bias
\fBGL_c_BIAS\fR, n' clamped ta tha range [0,1]\&.
.RE
.PP
\fBGL_DEPTH_COMPONENT\fR
.RS 4
Each element be a single depth value\&. Da GL converts it ta floatin point, multiplies by tha signed scale factor
\fBGL_DEPTH_SCALE\fR, addz tha signed bias
\fBGL_DEPTH_BIAS\fR, n' clamps ta tha range [0,1]\&.
.RE
.PP
\fBGL_DEPTH_STENCIL\fR
.RS 4
Each element be a pair of depth n' stencil joints\&. Da depth component of tha pair is interpreted as in
\fBGL_DEPTH_COMPONENT\fR\&. Da stencil component is interpreted based on specified tha depth + stencil internal format\&.
.RE
.PP
If a application wants ta store tha texture at a cold-ass lil certain resolution or up in a cold-ass lil certain format, it can request tha resolution n' format with
\fIinternalFormat\fR\&. Da GL will chizzle a internal representation dat closely approximates dat axed by
\fIinternalFormat\fR yo, but it may not match exactly\&. (Da representations specified by
\fBGL_RED\fR,
\fBGL_RG\fR,
\fBGL_RGB\fR, and
\fBGL_RGBA\fR
must match exactly\&.)
.PP
\fIinternalFormat\fR
may be one of tha base internal formats shown up in Table 1, below
.PP
<xi:include></xi:include>
.PP
\fIinternalFormat\fR
may also be one of tha sized internal formats shown up in Table 2, below
.PP
<xi:include></xi:include>
.PP
Finally,
\fIinternalFormat\fR
may also be one of tha generic or compressed compressed texture formats shown up in Table 3 below
.PP
<xi:include></xi:include>
.PP
If the
\fIinternalFormat\fR
parameta is one of tha generic compressed formats,
\fBGL_COMPRESSED_RED\fR,
\fBGL_COMPRESSED_RG\fR,
\fBGL_COMPRESSED_RGB\fR, or
\fBGL_COMPRESSED_RGBA\fR, tha GL will replace tha internal format wit tha symbolic constant fo' a specific internal format n' compress tha texture before storage\&. If no correspondin internal format be available, or tha GL can not compress dat image fo' any reason, tha internal format is instead replaced wit a cold-ass lil correspondin base internal format\&.
.PP
If the
\fIinternalFormat\fR
parameta is
\fBGL_SRGB\fR,
\fBGL_SRGB8\fR,
\fBGL_SRGB_ALPHA\fR, or
\fBGL_SRGB8_ALPHA8\fR, tha texture is treated as if tha red, green, or blue components is encoded up in tha sRGB color space\& fo' realz. Any alpha component is left unchanged\&. Da conversion from tha sRGB encoded component
c s
to a linear component
c l
is:
.PP
c l = { c s 12\&.92 if c s ≤ 0\&.04045 ( c s + 0\&.055 1\&.055 ) 2\&.4 if c s > 0\&.04045
.PP
Assume
c s
is tha sRGB component up in tha range [0,1]\&.
.PP
Use the
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR,
\fBGL_PROXY_TEXTURE_RECTANGLE\fR, or
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR
target ta hook up a resolution n' format\&. Da implementation will update n' recompute its dopest match fo' tha axed storage resolution n' format\&. To then query dis state, call
\fBglGetTexLevelParameter\fR()\&. If tha texture cannot be accommodated, texture state is set ta 0\&.
.PP
A one\-component texture image uses only tha red component of tha RGBA color extracted from
\fIdata\fR\& fo' realz. A two\-component image uses tha R n' G joints\& fo' realz. A three\-component image uses tha R, G, n' B joints\& fo' realz. A four\-component image uses all of tha RGBA components\&.
.PP
Image\-based shadowin can be enabled by comparin texture r coordinates ta depth texture joints ta generate a funky-ass boolean result\&. Right back up in yo muthafuckin ass. See
\fBglTexParameter\fR()
for details on texture comparison\&.
.SH "NOTES"
.PP
The
\fBglPixelStore\fR()
mode affects texture images\&.
.PP
\fIdata\fR
may be a null pointer\&. In dis case, texture memory be allocated ta accommodate a texture of width
\fIwidth\fR
and height
\fIheight\fR\&. Yo ass can then downlizzle subtextures ta initialize dis texture memory\&. Da image is undefined if tha user tries ta apply a uninitialized portion of tha texture image ta a primitive\&.
.PP
\fBglTexImage2D\fR
specifies tha two\-dimensionizzle texture fo' tha current texture unit, specified with
\fBglActiveTexture\fR()\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not
\fBGL_TEXTURE_2D\fR,
\fBGL_TEXTURE_1D_ARRAY\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR,
\fBGL_PROXY_TEXTURE_RECTANGLE\fR,
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR, or
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is one of tha six cube map 2D image targets n' tha width n' height parametas is not equal\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not a type constant\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR
is less than 0 or pimped outa than
\fBGL_MAX_TEXTURE_SIZE\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fItarget\fR
is not
\fBGL_TEXTURE_1D_ARRAY\fR
or
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR
and
\fIheight\fR
is less than 0 or pimped outa than
\fBGL_MAX_TEXTURE_SIZE\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fItarget\fR
is
\fBGL_TEXTURE_1D_ARRAY\fR
or
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR
and
\fIheight\fR
is less than 0 or pimped outa than
\fBGL_MAX_ARRAY_TEXTURE_LAYERS\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIlevel\fR
is less than 0\&.
.PP
\fBGL_INVALID_VALUE\fR
may be generated if
\fIlevel\fR
is pimped outa than
log 2 ⁡ max, where
\fImax\fR
is tha returned value of
\fBGL_MAX_TEXTURE_SIZE\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIinternalFormat\fR
is not one of tha accepted resolution n' format symbolic constants\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR
or
\fIheight\fR
is less than 0 or pimped outa than
\fBGL_MAX_TEXTURE_SIZE\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if non\-power\-of\-two textures is not supported n' the
\fIwidth\fR
or
\fIheight\fR
cannot be represented as
2 k + 2 ⁡ border
for some integer value of
\fIk\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIborder\fR
is not 0\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItype\fR
is one of
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR, or
\fBGL_UNSIGNED_INT_10F_11F_11F_REV\fR, and
\fIformat\fR
is not
\fBGL_RGB\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItype\fR
is one of
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR,
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR, or
\fBGL_UNSIGNED_INT_5_9_9_9_REV\fR, and
\fIformat\fR
is neither
\fBGL_RGBA\fR
nor
\fBGL_BGRA\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItarget\fR
is not
\fBGL_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_TEXTURE_RECTANGLE\fR, or
\fBGL_PROXY_TEXTURE_RECTANGLE\fR, and
\fIinternalFormat\fR
is
\fBGL_DEPTH_COMPONENT\fR,
\fBGL_DEPTH_COMPONENT16\fR,
\fBGL_DEPTH_COMPONENT24\fR, or
\fBGL_DEPTH_COMPONENT32F\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIformat\fR
is
\fBGL_DEPTH_COMPONENT\fR
and
\fIinternalFormat\fR
is not
\fBGL_DEPTH_COMPONENT\fR,
\fBGL_DEPTH_COMPONENT16\fR,
\fBGL_DEPTH_COMPONENT24\fR, or
\fBGL_DEPTH_COMPONENT32F\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIinternalFormat\fR
is
\fBGL_DEPTH_COMPONENT\fR,
\fBGL_DEPTH_COMPONENT16\fR,
\fBGL_DEPTH_COMPONENT24\fR, or
\fBGL_DEPTH_COMPONENT32F\fR, and
\fIformat\fR
is not
\fBGL_DEPTH_COMPONENT\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha data would be unpacked from tha buffer object such dat tha memory readz required would exceed tha data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a thugged-out datum indicated by
\fItype\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fItarget\fR
is
\fBGL_TEXTURE_RECTANGLE\fR
or
\fBGL_PROXY_TEXTURE_RECTANGLE\fR
and
\fIlevel\fR
is not 0\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetTexImage\fR()
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglActiveTexture\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglPixelStore\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR(),
\fBglTexParameter\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2011 Khronos Group\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
