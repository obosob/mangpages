" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::regex_iterator< _Bi_iter, _Ch_type, _Rx_traits > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fBstd::forward_iterator_tag\fP \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef const \fBvalue_type\fP * \fBpointer\fP"
.br
.ti -1c
.RI "typedef const \fBvalue_type\fP & \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBbasic_regex\fP< _Ch_type, 
.br
_Rx_traits > \fBregex_type\fP"
.br
.ti -1c
.RI "typedef \fBmatch_results\fP< _Bi_ita > \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBregex_iterator\fP ()"
.br
.ti -1c
.RI "\fBregex_iterator\fP (_Bi_ita __a, _Bi_ita __b, const \fBregex_type\fP &__re, \fBregex_constants::match_flag_type\fP __m=\fBregex_constants::match_default\fP)"
.br
.ti -1c
.RI "\fBregex_iterator\fP (const \fBregex_iterator\fP &__rhs)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBregex_iterator\fP &__rhs)"
.br
.ti -1c
.RI "const \fBvalue_type\fP & \fBoperator*\fP ()"
.br
.ti -1c
.RI "\fBregex_iterator\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBregex_iterator\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "const \fBvalue_type\fP * \fBoperator->\fP ()"
.br
.ti -1c
.RI "\fBregex_iterator\fP & \fBoperator=\fP (const \fBregex_iterator\fP &__rhs)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBregex_iterator\fP &__rhs)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Bi_iter, typename _Ch_type = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits = regex_traits<_Ch_type>>class std::regex_iterator< _Bi_iter, _Ch_type, _Rx_traits >"
An iterator adaptor dat will provide repeated callz of regex_search over a range until no mo' matches remain\&. 
.PP
Definizzle at line 2204 of file regex\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::\fBregex_iterator\fP ()"

.PP
Provides a singular iterator, useful fo' indicatin one-past-the-end of a range\&. 
.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::\fBregex_iterator\fP (_Bi_iter__a, _Bi_iter__b, const \fBregex_type\fP &__re, \fBregex_constants::match_flag_type\fP__m = \fC\fBregex_constants::match_default\fP\fP)"
Constructs a regex_iterator\&.\&.\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__a\fP [IN] Da start of a text range ta search\&. 
.br
\fI__b\fP [IN] One-past-the-end of tha text range ta search\&. 
.br
\fI__re\fP [IN] Da regular expression ta match\&. 
.br
\fI__m\fP [IN] Policy flags fo' match rules\&. 
.RE
.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::\fBregex_iterator\fP (const \fBregex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits > &__rhs)"
Copy constructs a regex_iterator\&. 
.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> bool \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::operator!= (const \fBregex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits > &__rhs)"

.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> const \fBvalue_type\fP& \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::operator* ()"

.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> \fBregex_iterator\fP& \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::operator++ ()"

.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> \fBregex_iterator\fP \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::operator++ (int)"

.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> const \fBvalue_type\fP* \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::operator-> ()"

.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> \fBregex_iterator\fP& \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::operator= (const \fBregex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits > &__rhs)"

.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP

.SS "template<typename _Bi_ita , typename _Ch_type  = typename iterator_traits<_Bi_iter>::value_type, typename _Rx_traits  = regex_traits<_Ch_type>> bool \fBstd::regex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits >::operator== (const \fBregex_iterator\fP< _Bi_iter, _Ch_type, _Rx_traits > &__rhs)"

.PP
\fBTodo\fP
.RS 4
Implement dis function\&. 
.PP
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
