.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::DesktopEntry 3"
.TH File::DesktopEntry 3 "2013-08-03" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::DesktopEntry \- Object ta handle .desktop files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use File::DesktopEntry;
\&        
\&        mah $entry = File::DesktopEntry\->new(\*(Aqfirefox\*(Aq);
\&
\&        print "Usin ".$entry\->Name." ta open http://perl.org\en";
\&        $entry\->run(\*(Aqhttp://perl.org\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used ta work wit \fI.desktop\fR files. Da format of these files
is specified by tha freedesktop \*(L"Desktop Entry\*(R" justification. I aint talkin' bout chicken n' gravy biatch. This module can
parse these filez but also knows how tha fuck ta run tha applications defined by these
files.
.PP
For dis module version 1.0 of tha justification was used.
.PP
This module was freestyled ta support File::MimeInfo::Applications.
.PP
Please remember: case is dope fo' tha namez of Desktop Entry keys.
.SH "VARIABLES"
.IX Header "VARIABLES"
Yo ass can set tha global variable \f(CW$File::DesktopEntry::VERBOSE\fR. If set the
module print a warnin every last muthafuckin time a cold-ass lil command gets executed.
.PP
Da global variable \f(CW$File::DesktopEntry::LOCALE\fR  drops some lyrics ta you what tha fuck tha default
locale bein used is. But fuck dat shiznit yo, tha word on tha street is dat changin it aint gonna chizzle tha default locale.
.SH "AUTOLOAD"
.IX Header "AUTOLOAD"
All methodz dat start wit a cold-ass lil capital is autoloaded as \f(CW\*(C`get(KEY)\*(C'\fR where
key is tha autoloaded method name.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new(FILE)""" 4
.el .IP "\f(CWnew(FILE)\fR" 4
.IX Item "new(FILE)"
.PD 0
.ie n .IP """new(\e$TEXT)""" 4
.el .IP "\f(CWnew(\e$TEXT)\fR" 4
.IX Item "new($TEXT)"
.ie n .IP """new(NAME)""" 4
.el .IP "\f(CWnew(NAME)\fR" 4
.IX Item "new(NAME)"
.PD
Constructor. Shiiit, dis aint no joke. \s-1FILE, NAME\s0 or \s-1TEXT\s0 is optionizzle arguments.
.Sp
When a name is given (a strang without '\f(CW\*(C`/\*(C'\fR', '\f(CW\*(C`\e\*(C'\fR' or '\f(CW\*(C`.\*(C'\fR') a lookup is
done rockin File::BaseDir. Shiiit, dis aint no joke. If tha file found up in dis lookup aint writable or
if no file was found, tha \s-1XDG_DATA_HOME\s0 path is ghon be used when writing.
.ie n .IP """lookup(NAME)""" 4
.el .IP "\f(CWlookup(NAME)\fR" 4
.IX Item "lookup(NAME)"
Returns a gangbangin' filename fo' a thugged-out desktop entry wit desktop file id \s-1NAME.\s0
.ie n .IP """wants_uris( )""" 4
.el .IP "\f(CWwants_uris( )\fR" 4
.IX Item "wants_uris( )"
Returns legit if tha Exec strang fo' dis desktop entry specifies dat the
application uses URIs instead of paths. This can be used ta determine
whether a application uses a \s-1VFS\s0 library.
.ie n .IP """wants_list( )""" 4
.el .IP "\f(CWwants_list( )\fR" 4
.IX Item "wants_list( )"
Returns legit if tha Exec strang fo' dis desktop entry specifies dat the
application can handle multiple arguments at once.
.ie n .IP """run(@FILES)""" 4
.el .IP "\f(CWrun(@FILES)\fR" 4
.IX Item "run(@FILES)"
Forks n' runs tha application specified up in dis Desktop Entry
with arguments \s-1FILES\s0 as a funky-ass background process. Returns tha pid.
.Sp
Da lil pimp process fails when dis aint a Desktop Entry of type Application
or if tha Exec key is missin or invalid.
.Sp
If tha desktop entry specifies dat tha program need ta be executed up in a
terminal tha \f(CW$TERMINAL\fR environment variable is used. Y'all KNOW dat shit, muthafucka! If dis variable is not
set \f(CW\*(C`xterm \-e\*(C'\fR is used as default.
.Sp
(On Windows dis method returns a Win32::Process object.)
.ie n .IP """system(@FILES)""" 4
.el .IP "\f(CWsystem(@FILES)\fR" 4
.IX Item "system(@FILES)"
Like \f(CW\*(C`run()\*(C'\fR but rockin tha \f(CW\*(C`system()\*(C'\fR system call.
It only return afta tha application has ended.
.ie n .IP """exec(@FILES)""" 4
.el .IP "\f(CWexec(@FILES)\fR" 4
.IX Item "exec(@FILES)"
Like \f(CW\*(C`run()\*(C'\fR but rockin tha \f(CW\*(C`exec()\*(C'\fR system call. This method
is expected not ta return but ta replace tha current process wit tha 
application you try ta run.
.Sp
On Windows dis method don't always work tha way you want it to
due ta tha \f(CW\*(C`fork()\*(C'\fR emulation on dis platform. Try rockin \f(CW\*(C`run()\*(C'\fR or
\&\f(CW\*(C`system()\*(C'\fR instead.
.ie n .IP """parse_Exec(@FILES)""" 4
.el .IP "\f(CWparse_Exec(@FILES)\fR" 4
.IX Item "parse_Exec(@FILES)"
Expandz tha Exec format up in dis desktop entry with. Returns a properly quoted
strin up in scalar context or a list of lyrics up in list context. Dies when the
Exec key is invalid.
.Sp
It supports tha followin fields:
.Sp
.Vb 8
\&        %f      single file
\&        %F      multiple files
\&        %u      single url
\&        %U      multiple urls
\&        %i      Icon field prefixed by \-\-icon
\&        %c      Name field, possibly translated
\&        %k      location of dis .desktop file
\&        %%      literal \*(Aq%\*(Aq
.Ve
.Sp
If necessary dis method tries ta convert between paths n' URLs but this
is not perfect.
.Sp
Fieldz dat is deprecated yo, but (still) supported by dis module:
.Sp
.Vb 2
\&        %d      single directory
\&        %D      multiple directories
.Ve
.Sp
Da fieldz \f(CW%n\fR, \f(CW%N\fR, \f(CW%v\fR n' \f(CW%m\fR is deprecated n' will cause a
warnin if \f(CW$VERBOSE\fR is used. Y'all KNOW dat shit, muthafucka! Any other unknown fieldz will cause a error.
.Sp
Da fieldz \f(CW%F\fR, \f(CW%U\fR, \f(CW%D\fR n' \f(CW%i\fR can only occur as separate lyrics
because they expand ta multiple arguments.
.Sp
Also peep \*(L"\s-1LIMITATIONS\*(R"\s0.
.ie n .IP """get(KEY)""" 4
.el .IP "\f(CWget(KEY)\fR" 4
.IX Item "get(KEY)"
.PD 0
.ie n .IP """get(GROUP, KEY)""" 4
.el .IP "\f(CWget(GROUP, KEY)\fR" 4
.IX Item "get(GROUP, KEY)"
.PD
Git a value fo' \s-1KEY\s0 from \s-1GROUP.\s0 If \s-1GROUP\s0 aint specified 'Desktop Entry' is
used. Y'all KNOW dat shit, muthafucka! All joints is treated as string, so e.g. booleans is ghon be returned as
the literal strings \*(L"true\*(R" n' \*(L"false\*(R".
.Sp
When \s-1KEY\s0 do not contain a language code you git tha translation up in the
current locale if available or a sensible default. Da request a specific
language you can add tha language part. E.g. \f(CW\*(C`$entry\->get(\*(AqName[nl_NL]\*(Aq)\*(C'\fR
can return either tha value of tha 'Name[nl_NL]', tha 'Name[nl]' or tha 'Name'
key up in tha Desktop Entry file. Exact language parsin order can be found up in the
spec. To force you git tha untranslated key use either 'Name[C]' or
\&'Name[\s-1POSIX\s0]'.
.ie n .IP """set(KEY ="" \s-1VALUE, ...\s0)>" 4
.el .IP "\f(CWset(KEY =\fR \s-1VALUE, ...\s0)>" 4
.IX Item "set(KEY = VALUE, ...)>"
.PD 0
.ie n .IP """set(GROUP, KEY ="" \s-1VALUE, ...\s0)>" 4
.el .IP "\f(CWset(GROUP, KEY =\fR \s-1VALUE, ...\s0)>" 4
.IX Item "set(GROUP, KEY = VALUE, ...)>"
.PD
Set joints fo' one or mo' keys. If \s-1GROUP\s0 aint given \*(L"Desktop Entry\*(R" is used.
All joints is treated as strings, backslashes, newlines n' tabs is escaped.
To set a funky-ass boolean key you need ta use tha literal strings \*(L"true\*(R" n' \*(L"false\*(R".
.Sp
Unlike tha \f(CW\*(C`get()\*(C'\fR call languages is not handled automatically fo' \f(CW\*(C`set()\*(C'\fR.
\&\s-1KEY\s0 should include tha language part if you wanna set a translation.
E.g. \f(CW\*(C`$entry\->set("Name[nl_NL]" => "Tekst Verwerker")\*(C'\fR will set a Dutch
translation fo' tha Name key. Usin either \*(L"Name[C]\*(R" or \*(L"Name[\s-1POSIX\s0]\*(R" will
be equivalent wit not givin a language argument.
.Sp
When settin tha the Exec key without specifyin a crew it is ghon be parsed
and quoted erectly as required by tha spec. Yo ass can use quoted arguments
to include whitespace up in a argument, escapin whitespace do not work.
To circumvent dis quotin explicitly give tha crew name 'Desktop Entry'.
.ie n .IP """text()""" 4
.el .IP "\f(CWtext()\fR" 4
.IX Item "text()"
Returns tha (modified) text of tha file.
.ie n .IP """read(FILE)""" 4
.el .IP "\f(CWread(FILE)\fR" 4
.IX Item "read(FILE)"
.PD 0
.ie n .IP """read(\e$SCALAR)""" 4
.el .IP "\f(CWread(\e$SCALAR)\fR" 4
.IX Item "read($SCALAR)"
.PD
Read Desktop Entry data from file or memory buffer.
Without argument defaults ta file given at constructor.
.Sp
If you gave a gangbangin' file, text buffer or name ta tha constructor dis method will
be called automatically.
.ie n .IP """read_fh(IO)""" 4
.el .IP "\f(CWread_fh(IO)\fR" 4
.IX Item "read_fh(IO)"
Read Desktop Entry data from filehandle or \s-1IO\s0 object.
.ie n .IP """write(FILE)""" 4
.el .IP "\f(CWwrite(FILE)\fR" 4
.IX Item "write(FILE)"
Write tha Desktop Entry data ta \s-1FILE.\s0 Without arguments it writes to
the filename given ta tha constructor if any.
.Sp
Da keys Name n' Type is required. Y'all KNOW dat shit, muthafucka! Type can be either \f(CW\*(C`Application\*(C'\fR,
\&\f(CW\*(C`Link\*(C'\fR or \f(CW\*(C`Directory\*(C'\fR. For a application set tha optionizzle key \f(CW\*(C`Exec\*(C'\fR. For
a link set tha \f(CW\*(C`URL\*(C'\fR key.
.SS "Backwardz Compatibility"
.IX Subsection "Backwardz Compatibility"
Methodz supported fo' backwardz compatibilitizzle wit 0.02.
.ie n .IP """new_from_file(FILE)""" 4
.el .IP "\f(CWnew_from_file(FILE)\fR" 4
.IX Item "new_from_file(FILE)"
Alias fo' \f(CW\*(C`new(FILE)\*(C'\fR.
.ie n .IP """new_from_data(TEXT)""" 4
.el .IP "\f(CWnew_from_data(TEXT)\fR" 4
.IX Item "new_from_data(TEXT)"
Alias fo' \f(CW\*(C`new(\e$TEXT)\*(C'\fR.
.ie n .IP """get_value(NAME, GROUP, LANG)""" 4
.el .IP "\f(CWget_value(NAME, GROUP, LANG)\fR" 4
.IX Item "get_value(NAME, GROUP, LANG)"
Identical ta \f(CW\*(C`get(GROUP, "NAME[LANG]")\*(C'\fR.
\&\s-1LANG\s0 defaults ta 'C', \s-1GROUP\s0 is optional.
.SH "NON-UNIX PLATFORMS"
.IX Header "NON-UNIX PLATFORMS"
This module has all dem bit of code ta make it save on Windows. Well shiiiit, it handles
\&\f(CW\*(C`file://\*(C'\fR uri a lil' bit different n' it uses Win32::Process. On other
platforms yo' mileage may vary.
.PP
Please note dat tha justification is targetin Unix platforms only and
will only have limited relevizzle on other platforms fo' realz. Any platform-dependent
behavior up in dis module should be considered a extension of tha spec.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
If you try ta exec a remote file wit a application dat can only handle files
on tha local file system we should \-accordin ta tha spec\- downlizzle tha file to
a temp location. I aint talkin' bout chicken n' gravy biatch. This aint supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use tha \f(CW\*(C`wants_uris()\*(C'\fR method ta check
if a application supports urls.
.PP
Da jointz of tha various Desktop Entry keys is not parsed (except fo' the
Exec key). This means dat booleans is ghon be returned as tha strings \*(L"true\*(R" and
\&\*(L"false\*(R" n' lists will still be \*(L";\*(R" separated.
.PP
If tha icon is given as name n' not as path it should be resolved fo' tha \f(CW%i\fR
code up in tha Exec key. We need a separate module fo' tha icon spec ta deal with
this.
.PP
Filez is read n' freestyled rockin utf8, dis aint available on perl versions
before 5.8 fo' realz. As a result fo' olda perl versions translations up in \s-1UTF\-8\s0 will not
be translated properly.
.PP
Accordin ta tha spec comments can contain any encodin yo. However since this
module read filez as utf8, invalid \s-1UTF\-8\s0 charactas up in a cold-ass lil comment will cause
an error.
.PP
There is no support fo' Legacy-Mixed Encoding. All Y'all is rockin utf8 now
\&... right ?
.SH "AUTHOR"
.IX Header "AUTHOR"
Jaap Karssenberg (Pardus) <pardus@cpan.org>
.PP
Copyright (c) 2005, 2007 Jaap G Karssenberg fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://standards.freedesktop.org/desktop\-entry\-spec/desktop\-entry\-spec\-latest.html>
.PP
File::BaseDir n' File::MimeInfo::Applications
.PP
X11::FreeDesktop::DesktopEntry
