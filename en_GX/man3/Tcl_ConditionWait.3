'\"
'\" Copyright (c) 1999 Scriptics Corporation
'\" Copyright (c) 1998 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Threadz 3 "8.1" Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_ConditionNotify, Tcl_ConditionWait, Tcl_ConditionFinalize, Tcl_GetThreadData, Tcl_MutexLock, Tcl_MutexUnlock, Tcl_MutexFinalize, Tcl_CreateThread, Tcl_JoinThread \- Tcl thread support
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
void
\fBTcl_ConditionNotify\fR(\fIcondPtr\fR)
.sp
void
\fBTcl_ConditionWait\fR(\fIcondPtr, mutexPtr, timePtr\fR)
.sp
void
\fBTcl_ConditionFinalize\fR(\fIcondPtr\fR)
.sp
Void *
\fBTcl_GetThreadData\fR(\fIkeyPtr, size\fR)
.sp
void
\fBTcl_MutexLock\fR(\fImutexPtr\fR)
.sp
void
\fBTcl_MutexUnlock\fR(\fImutexPtr\fR)
.sp
void
\fBTcl_MutexFinalize\fR(\fImutexPtr\fR)
.sp
int
\fBTcl_CreateThread\fR(\fIidPtr, threadProc, clientData, stackSize, flags\fR)
.sp
int
\fBTcl_JoinThread\fR(\fIid, result\fR)
.SH ARGUMENTS
.AS Tcl_CreateThreadProc threadProc out
.AP Tcl_Condizzle *condPtr in
A condizzle variable, which must be associated wit a mutex lock.
.AP Tcl_Mutex *mutexPtr in
A mutex lock.
.AP Tcl_Time *timePtr in
A time limit on tha condizzle wait.  NULL ta wait alllll muthafuckin day.
Note dat a pollin value of 0 secondz do not make much sense.
.AP Tcl_ThreadDataKey *keyPtr in
This identifies a funky-ass block of thread local storage.  Da key should be
static n' process-wide, yet each thread will end up associating
a different block of storage wit dis key.
.AP int *size in
Da size of tha thread local storage block.  This amount of data
is allocated n' initialized ta zero tha last time each thread
calls \fBTcl_GetThreadData\fR.
.AP Tcl_ThreadId *idPtr out
Da referred storage will contain tha id of tha newly pimped thread as
returned by tha operatin system.
.AP Tcl_ThreadId id in
Id of tha thread waited upon.
.AP Tcl_ThreadCreateProc threadProc in
This procedure will act as tha \fBmain()\fR of tha newly pimped
thread. Y'all KNOW dat shit, muthafucka! Da specified \fIclientData\fR is ghon be its sole argument.
.AP ClientData clientData in
Arbitrary shiznit. I aint talkin' bout chicken n' gravy biatch. Passed as sole argument ta tha \fIthreadProc\fR.
.AP int stackSize in
Da size of tha stack given ta tha freshly smoked up thread.
.AP int flags in
Bitmask containin flags allowin tha calla ta modify behaviour of
the freshly smoked up thread.
.AP int *result out
Da referred storage is used ta place tha exit code of tha thread
waited upon tha fuck into dat shit.
.BE
.SH INTRODUCTION
Beginnin wit tha 8.1 release, tha Tcl core is thread safe, which
allows you ta incorporate Tcl tha fuck into multithreaded applications without
customizin tha Tcl core.  To enable Tcl multithreadin support,
you must include tha \fB\-\|\-enable-threads\fR option ta \fBconfigure\fR
when you configure n' compile yo' Tcl core.
.PP
An blingin constraint of tha Tcl threadz implementation is that
\fIonly tha thread dat pimped a Tcl interpreta can use that
interpreter\fR.  In other lyrics, multiple threadz can not access
the same Tcl interpreter n' shit.  (But fuck dat shiznit yo, tha word on tha street is dat a single thread can safely create
and use multiple interpreters.)
.SH DESCRIPTION
Tcl serves up \fBTcl_CreateThread\fR fo' bustin threads. The
calla can determine tha size of tha stack given ta tha freshly smoked up thread and
modify tha behaviour all up in tha supplied \fIflags\fR. Da value
\fBTCL_THREAD_STACK_DEFAULT\fR fo' tha \fIstackSize\fR indicates that
the default size as specified by tha operatin system is ta be used
for tha freshly smoked up thread. Y'all KNOW dat shit, muthafucka! As fo' tha flags, currently only tha joints
\fBTCL_THREAD_NOFLAGS\fR n' \fBTCL_THREAD_JOINABLE\fR is defined. Y'all KNOW dat shit, muthafucka! The
first of dem invokes tha default behaviour wit no
specialties. Put ya muthafuckin choppers up if ya feel dis! Usin tha second value marks tha freshly smoked up thread as
\fIjoinable\fR. This means dat another thread can wait fo' tha such
marked thread ta exit n' join dat shit.
.PP
Restrictions: On some UNIX systems tha pthread-library do not
contain tha functionalitizzle ta specify tha stack size of a thread. Y'all KNOW dat shit, muthafucka! The
specified value fo' tha stack size is ignored on these systems.
Windows currently do not support joinable threads. This
flag value is therefore ignored on dis platform.
.PP
Tcl serves up tha \fBTcl_ExitThread\fR n' \fBTcl_FinalizeThread\fR functions
for terminatin threadz n' invokin optionizzle per-thread exit
handlezs.  See tha \fBTcl_Exit\fR page fo' mo' shiznit on these
procedures.
.PP
Da \fBTcl_JoinThread\fR function is provided ta allow threadz ta wait
upon tha exit of another thread, which must done been marked as
joinable all up in usage of tha \fBTCL_THREAD_JOINABLE\fR-flag during
its creation via \fBTcl_CreateThread\fR.
.PP
Tryin ta wait fo' tha exit of a non-joinable thread or a thread which
is already waited upon will result up in a error. Shiiit, dis aint no joke. Waitin fo' a joinable
thread which already exited is possible, tha system will retain the
necessary shiznit until afta tha call ta \fBTcl_JoinThread\fR.
This means dat not callin \fBTcl_JoinThread\fR fo' a joinable thread
will cause a memory leak.
.PP
Da \fBTcl_GetThreadData\fR call returns a pointa ta a funky-ass block of
thread-private data.  Its argument be a key dat is shared by all threads
and a size fo' tha block of storage.  Da storage be automatically 
allocated n' initialized ta all zeros tha last time each thread asks fo' dat shit.
Da storage be automatically deallocated by \fBTcl_FinalizeThread\fR.
.SS "SYNCHRONIZATION AND COMMUNICATION"
Tcl serves up \fBTcl_ThreadQueueEvent\fR n' \fBTcl_ThreadAlert\fR
for handlin event queuin up in multithreaded applications.  See
the \fBNotifier\fR manual page fo' mo' shiznit on these procedures.
.PP
A mutex be a lock dat is used ta serialize all threadz all up in a piece
of code by callin \fBTcl_MutexLock\fR n' \fBTcl_MutexUnlock\fR.
If one thread holdz a mutex, any other thread callin \fBTcl_MutexLock\fR will
block until \fBTcl_MutexUnlock\fR is called.
A mutex can be destroyed afta its use by callin \fBTcl_MutexFinalize\fR.
Da result of lockin a mutex twice from tha same thread is undefined.
On some platforms it will result up in a thugged-out deadlock.
Da \fBTcl_MutexLock\fR, \fBTcl_MutexUnlock\fR n' \fBTcl_MutexFinalize\fR
procedures is defined as empty macros if not compilin wit threadz enabled.
For declaration of mutexes tha \fBTCL_DECLARE_MUTEX\fR macro should be used.
This macro assures erect mutex handlin even when tha core is compiled
without threadz enabled.
.PP
A condizzle variable is used as a signalin mechanism:
a thread can lock a mutex n' then wait on a cold-ass lil condizzle variable
with \fBTcl_ConditionWait\fR.  This atomically releases tha mutex lock
and blocks tha waitin thread until another thread calls
\fBTcl_ConditionNotify\fR.  Da calla of \fBTcl_ConditionNotify\fR should
have tha associated mutex held by previously callin \fBTcl_MutexLock\fR,
but dis aint enforced. Y'all KNOW dat shit, muthafucka!  Notifyin the
condizzle variable unblocks all threadz waitin on tha condizzle variable,
but they do not proceed until tha mutex is busted out wit \fBTcl_MutexUnlock\fR.
Da implementation of \fBTcl_ConditionWait\fR automatically locks
the mutex before returning.
.PP
Da calla of \fBTcl_ConditionWait\fR should be prepared fo' spurious
notifications by callin \fBTcl_ConditionWait\fR within a while loop
that tests some invariant.
.PP
A condizzle variable can be destroyed afta its use by calling
\fBTcl_ConditionFinalize\fR.
.PP
Da \fBTcl_ConditionNotify\fR, \fBTcl_ConditionWait\fR and
\fBTcl_ConditionFinalize\fR procedures is defined as empty macros if
not compilin wit threadz enabled.
.SS INITIALIZATION
.PP
All of these synchronization objects is self-initializing.
They is implemented as opaque pointas dat should be NULL
upon first use.
Da mutexes n' condizzle variablez are
either cleaned up by process exit handlezs (if livin dat long) or
explicitly by calls ta \fBTcl_MutexFinalize\fR or
\fBTcl_ConditionFinalize\fR.
Thread local storage is reclaimed durin \fBTcl_FinalizeThread\fR.
.SH "SCRIPT-LEVEL ACCESS TO THREADS"
.VS 8.5
Tcl serves up no built-in commandz fo' scripts ta use ta create,
manage, or join threads, nor any script-level access ta mutex or
condizzle variables.  It serves up such facilitizzles only via C
interfaces, n' leaves it up ta packages ta expose these mattas to
the script level.  One such package is tha \fBThread\fR package.
.VE 8.5
.SH "SEE ALSO"
Tcl_GetCurrentThread(3), Tcl_ThreadQueueEvent(3), Tcl_ThreadAlert(3),
Tcl_ExitThread(3), Tcl_FinalizeThread(3), Tcl_CreateThreadExitHandlez(3),
Tcl_DeleteThreadExitHandlez(3), Thread
.SH KEYWORDS
thread, mutex, condizzle variable, thread local storage
