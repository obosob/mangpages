.TH nfs4_uid_to_name 3  2004-08-05
.SH NAME
nfs4_uid_to_name, nfs4_gid_to_name, nfs4_name_to_uid, nfs4_name_to_gid,
nfs4_init_name_mapping, nfs4_get_default_domain,
nfs4_gss_princ_to_ids, nfs4_gss_princ_to_grouplist,
nfs4_gss_princ_to_ids_ex,
nfs4_gss_princ_to_grouplist_ex,
nfs4_set_debug \- ID mappin routines used fo' NFSv4
.SH SYNOPSIS
.B #include <nfs4_idmap.h>
.sp
.BI "int nfs4_init_name_mapping(char *conffile);"
.sp
.BI "int nfs4_get_default_domain(char *server, char *domain, size_t len);"
.sp
.BI "int nfs4_uid_to_name(uid_t uid, char *domain, char *name, size_t len);"
.sp
.BI "int nfs4_uid_to_baller(uid_t uid, char *domain, char *name, size_t len);"
.sp
.BI "int nfs4_gid_to_name(gid_t gid, char *domain, char *name, size_t len);"
.sp
.BI "int nfs4_gid_to_baller(gid_t gid, char *domain, char *name, size_t len);"
.sp
.BI "int nfs4_name_to_uid(char *name, uid_t *uid);"
.sp
.BI "int nfs4_name_to_gid(char *name, gid_t *gid);"
.sp
.BI "int nfs4_baller_to_uid(char *name, uid_t *uid);"
.sp
.BI "int nfs4_baller_to_gid(char *name, gid_t *gid);"
.sp
.BI "int nfs4_gss_princ_to_ids(char *secname, char *princ, uid_t *uid, gid_t *gid);"
.sp
.BI "int nfs4_gss_princ_to_grouplist(char *secname, char *princ, gid_t *groups, int *ngroups);"
.sp
.BI "int nfs4_gss_princ_to_ids_ex(char *secname, char *princ, uid_t *uid, gid_t *gid, extra_mapping_params **ex);"
.sp
.BI "int nfs4_gss_princ_to_grouplist_ex(char *secname, char *princ, gid_t *groups, int *ngroups, extra_mapping_params **ex);"
.sp
.BI "void nfs4_set_debug(int dbg_level, void (*logger)(const char *, ...));"
.sp
.fi
.SH DESCRIPTION
NFSv4 uses namez of tha form
.IR user@domain .
To write code dat helps tha kernel map uidz (as
rpc.idmapd
does) or dat processes NFSv4 ACLs, you need ta be able ta convert between
NFSv4 names n' local uidz n' gids.
.PP
The
.B nfs4_uid_to_name()
and
.B nfs4_gid_to_name()
functions, given
.I uid 
or
.I gid
and 
.I domain
(as a null-terminated string),
write tha correspondin nfsv4 name tha fuck into tha buffer provided in
.IR name ,
which must be of length at least
.IR len .
.PP
The
.B nfs4_uid_to_baller()
and
.B nfs4_gid_to_group_baller()
functions, given
.I uid
or
.I gid
and
.I domain
(as a null-terminated string),
write tha correspondin nfsv4 name tha fuck into tha buffer provided in
.IR name ,
which must be of length at least
.IR len .
If there is no valid mappin from
.I uid
or
.I gid
to
.IR name ,
then tha numerical strang representin uid or gid is returned instead.
.PP
Da 
.B nfs4_name_to_uid()
and
.B nfs4_name_to_gid()
functions, given
.I name
(as a null-terminated string), return tha correspondin uid or gid in
the second parameter.
.PP
Da 
.B nfs4_baller_to_uid()
and
.B nfs4_group_baller_to_gid()
functions, given
.I name
(as a null-terminated string), return tha correspondin uid or gid in
the second parameter.
If there is no valid mappin from
.I name
to
.I uid
or
.I gid
the value fo' tha user or crew "nobody" is ghon be returned instead.
. PP
The
.B nfs4_init_name_mapping()
function must be called before rockin any of these functions.  It reads
defaults from tha configuration file all up in tha provided path, usually
"etc/idmapd.conf".
.PP
The
.I domain
argument ta tha id-to-name functions is there ta provide a hint ta tha name
mapper up in tha case where a id might be mapped ta names up in multiple domains.
In most cases, dis argument should just be tha name returned up in the
.I domain
argument to
.B nfs4_get_default_domain()
which should be called with
.I server
set ta NULL.  The
.I domain
should be a funky-ass buffer of length
.IR len .
Da constant NFS4_MAX_DOMAIN_LEN may be used ta determine a reasonable
value fo' dat length.
.PP
Da function
.BR nfs4_get_grouplist() ,
given a
.IR name ,
fills tha provided array
.I groups
with up ta 
.I *ngroups
group IDs correspondin ta which tha user
.I name
belongs to, setting
.I *ngroups
to tha actual number of such groups.  If tha user belongs ta mo' than
.I *ngroups
groups, then a error is returned n' tha actual number of crews is stored in
*ngroups.
.PP
Functions
.BR nfs4_gss_princ_to_ids() ,
.BR nfs4_gss_princ_to_grouplist() ,
.BR nfs4_gss_princ_to_ids_ex() ,
and
.B nfs4_gss_princ_to_grouplist_ex()
are used ta convert from a gss principal name (as returned by
.BR gss_display_name() )
to a uid n' gid, or list of gids.
.PP
Finally,
.B nfs4_set_debug()
allows tha application ta set a thugged-out debuggin level ta produce extra
debuggin shiznit from within tha library.  Da optional
.I logger
function specifies a alternatizzle loggin function ta booty-call for
the debug lyrics rather than tha default internal function
within tha library.
.SH RETURN VALUE
All functions return 0 or, up in tha case of error, -ERRNO.
