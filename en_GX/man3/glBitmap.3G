'\" t
.\"     Title: glBitmap
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLBITMAP" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBitmap \- draw a funky-ass bitmap
.SH "C SPECIFICATION"
.HP \w'void\ glBitmap('u
.BI "void glBitmap(GLsizei\ " "width" ", GLsizei\ " "height" ", GLfloat\ " "xorig" ", GLfloat\ " "yorig" ", GLfloat\ " "xmove" ", GLfloat\ " "ymove" ", const\ GLubyte\ *\ " "bitmap" ");"
.SH "PARAMETERS"
.PP
\fIwidth\fR, \fIheight\fR
.RS 4
Specify tha pixel width n' height of tha bitmap image\&.
.RE
.PP
\fIxorig\fR, \fIyorig\fR
.RS 4
Specify tha location of tha origin up in tha bitmap image\&. Da origin is measured from tha lower left corner of tha bitmap, wit right n' up bein tha positizzle axes\&.
.RE
.PP
\fIxmove\fR, \fIymove\fR
.RS 4
Specify the
\fIx\fR
and
\fIy\fR
offsets ta be added ta tha current rasta posizzle afta tha bitmap is drawn\&.
.RE
.PP
\fIbitmap\fR
.RS 4
Specifies tha address of tha bitmap image\&.
.RE
.SH "DESCRIPTION"
.PP
A bitmap be a funky-ass binary image\&. When drawn, tha bitmap is positioned relatizzle ta tha current rasta position, n' frame buffer pixels correspondin ta 1\*(Aqs up in tha bitmap is freestyled rockin tha current rasta color or index\&. Frame buffer pixels correspondin ta 0\*(Aqs up in tha bitmap is not modified\&.
.PP
\fBglBitmap\fR
takes seven arguments\&. Da first pair specifies tha width n' height of tha bitmap image\&. Da second pair specifies tha location of tha bitmap origin relatizzle ta tha lower left corner of tha bitmap image\&. Da third pair of arguments specifies
\fIx\fR
and
\fIy\fR
offsets ta be added ta tha current rasta posizzle afta tha bitmap has been drawn\&. Da final argument be a pointa ta tha bitmap image itself\&.
.PP
If a non\-zero named buffer object is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a funky-ass bitmap image is specified,
\fIbitmap\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&.
.PP
Da bitmap image is interpreted like image data fo' the
\fBglDrawPixels\fR()
command, with
\fIwidth\fR
and
\fIheight\fR
correspondin ta tha width n' height argumentz of dat command, n' with
\fItype\fR
set to
\fBGL_BITMAP\fR
and
\fIformat\fR
set to
\fBGL_COLOR_INDEX\fR\&. Modes specified using
\fBglPixelStore\fR()
affect tha interpretation of bitmap image data; modes specified using
\fBglPixelTransfer\fR()
do not\&.
.PP
If tha current rasta posizzle is invalid,
\fBglBitmap\fR
is ignored\&. Otherwise, tha lower left corner of tha bitmap image is positioned all up in tha window coordinates
.PP
x w = x r \- x o
.PP
y w = y r \- y o
.PP
where
x r y r
is tha rasta posizzle and
x o y o
is tha bitmap origin\&. Fragments is then generated fo' each pixel correspondin ta a 1 (one) up in tha bitmap image\&. These fragments is generated rockin tha current raster
\fIz\fR
coordinate, color or color index, n' current rasta texture coordinates\&. They is then treated just as if they had been generated by a point, line, or polygon, includin texture mapping, fogging, n' all per\-fragment operations like fuckin alpha n' depth testing\&.
.PP
Afta tha bitmap has been drawn, the
\fIx\fR
and
\fIy\fR
coordinatez of tha current rasta posizzle is offset by
\fIxmove\fR
and
\fIymove\fR\&. No chizzle is made ta the
\fIz\fR
coordinizzle of tha current rasta position, or ta tha current rasta color, texture coordinates, or index\&.
.SH "NOTES"
.PP
To set a valid rasta posizzle outside tha viewport, first set a valid rasta posizzle inside tha viewport, then call
\fBglBitmap\fR
with NULL as the
\fIbitmap\fR
parameta n' with
\fIxmove\fR
and
\fIymove\fR
set ta tha offsetz of tha freshly smoked up rasta position\&. This technique is useful when pannin a image round tha viewport\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR
or
\fIheight\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha data would be unpacked from tha buffer object such dat tha memory readz required would exceed tha data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglBitmap\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_SECONDARY_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_DISTANCE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_INDEX\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_TEXTURE_COORDS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglBindBuffer\fR(),
\fBglDrawPixels\fR(),
\fBglPixelStore\fR(),
\fBglPixelTransfer\fR(),
\fBglRasterPos\fR(),
\fBglWindowPos\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
