.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Cwd 3"
.TH Cwd 3 "2013-01-16" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cwd \- git pathname of current hustlin directory
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Cwd;
\&    mah $dir = getcwd;
\&
\&    use Cwd \*(Aqabs_path\*(Aq;
\&    mah $abs_path = abs_path($file);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up functions fo' determinin tha pathname of the
current hustlin directory.  It be recommended dat getcwd (or another
*\fIcwd()\fR function) be used up in \fIall\fR code ta ensure portability.
.PP
By default, it exports tha functions \fIcwd()\fR, \fIgetcwd()\fR, \fIfastcwd()\fR, and
\&\fIfastgetcwd()\fR (and, on Win32, \fIgetdcwd()\fR) tha fuck into tha callerz namespace.
.SS "getcwd n' playas"
.IX Subsection "getcwd n' playas"
Each of these functions is called without arguments n' return the
absolute path of tha current hustlin directory.
.IP "getcwd" 4
.IX Item "getcwd"
.Vb 1
\&    mah $cwd = getcwd();
.Ve
.Sp
Returns tha current hustlin directory.
.Sp
Exposes tha \s-1POSIX\s0 function \fIgetcwd\fR\|(3) or re-implements it if itz not
available.
.IP "cwd" 4
.IX Item "cwd"
.Vb 1
\&    mah $cwd = cwd();
.Ve
.Sp
Da \fIcwd()\fR is da most thugged-out natural form fo' tha current architecture.  For
most systems it is identical ta `pwd` (but without tha trailin line
terminator).
.IP "fastcwd" 4
.IX Item "fastcwd"
.Vb 1
\&    mah $cwd = fastcwd();
.Ve
.Sp
A mo' fucked up version of \fIgetcwd()\fR yo, but potentially faster.
.Sp
It might conceivably \fIchdir()\fR you outta a gangbangin' finger-lickin' directory dat it can't
\&\fIchdir()\fR you back into.  If fastcwd encountas a problem it will return
undef but will probably leave you up in a gangbangin' finger-lickin' different directory.  For a
measure of extra security, if every last muthafuckin thang appears ta have worked, the
\&\fIfastcwd()\fR function will check dat it leaves you up in tha same directory
that it started in. I aint talkin' bout chicken n' gravy biatch.  If it has chizzled it will \f(CW\*(C`die\*(C'\fR wit tha message
\&\*(L"Unstable directory path, current directory chizzled
unexpectedly\*(R".  That should never happen.
.IP "fastgetcwd" 4
.IX Item "fastgetcwd"
.Vb 1
\&  mah $cwd = fastgetcwd();
.Ve
.Sp
Da \fIfastgetcwd()\fR function is provided as a synonym fo' \fIcwd()\fR.
.IP "getdcwd" 4
.IX Item "getdcwd"
.Vb 2
\&    mah $cwd = getdcwd();
\&    mah $cwd = getdcwd(\*(AqC:\*(Aq);
.Ve
.Sp
Da \fIgetdcwd()\fR function be also provided on Win32 ta git tha current working
directory on tha specified drive, since Windows maintains a separate current
workin directory fo' each drive.  If no drive is specified then tha current
drive be assumed.
.Sp
This function simply calls tha Microsizzlez C library \fI_getdcwd()\fR function.
.SS "abs_path n' playas"
.IX Subsection "abs_path n' playas"
These functions is exported only on request.  They each take a single
argument n' return tha absolute pathname fo' dat shit.  If no argument is
given they'll use tha current hustlin directory.
.IP "abs_path" 4
.IX Item "abs_path"
.Vb 1
\&  mah $abs_path = abs_path($file);
.Ve
.Sp
Uses tha same ol' dirty algorithm as \fIgetcwd()\fR.  Symbolic links n' relative-path
components (\*(L".\*(R" n' \*(L"..\*(R") is resolved ta return tha canonical
pathname, just like \fIrealpath\fR\|(3).
.IP "realpath" 4
.IX Item "realpath"
.Vb 1
\&  mah $abs_path = realpath($file);
.Ve
.Sp
A synonym fo' \fIabs_path()\fR.
.IP "fast_abs_path" 4
.IX Item "fast_abs_path"
.Vb 1
\&  mah $abs_path = fast_abs_path($file);
.Ve
.Sp
A mo' dangerous yo, but potentially fasta version of abs_path.
.ie n .SS "$ENV{\s-1PWD\s0}"
.el .SS "\f(CW$ENV\fP{\s-1PWD\s0}"
.IX Subsection "$ENV{PWD}"
If you ask ta override yo' \fIchdir()\fR built-in function,
.PP
.Vb 1
\&  use Cwd qw(chdir);
.Ve
.PP
then yo' \s-1PWD\s0 environment variable is ghon be kept up ta date.  Note that
it will only be kept up ta date if all packages which use chdir import
it from Cwd.
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
Since tha path separators is different on some operatin systems ('/'
on Unix, ':' on MacPerl, etc...) we recommend you use tha File::Spec
modulez wherever portabilitizzle be a cold-ass lil concern.
.IP "\(bu" 4
Actually, on Mac \s-1OS,\s0 tha \f(CW\*(C`getcwd()\*(C'\fR, \f(CW\*(C`fastgetcwd()\*(C'\fR n' \f(CW\*(C`fastcwd()\*(C'\fR
functions is all aliases fo' tha \f(CW\*(C`cwd()\*(C'\fR function, which, on Mac \s-1OS,\s0
calls `pwd`.  Likewise, tha \f(CW\*(C`abs_path()\*(C'\fR function be a alias for
\&\f(CW\*(C`fast_abs_path()\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Originally by tha perl5\-porters.
.PP
Maintained by Ken Williams <KWILLIAMS@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 by tha Perl 5 Porters.  All muthafuckin rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
.PP
Portionz of tha C code up in dis library is copyright (c) 1994 by the
Regentz of tha Universitizzle of California.  All muthafuckin rights reserved. Y'all KNOW dat shit, muthafucka!  The
license on dis code is compatible wit tha licensin of tha rest of
the distribution \- please peep tha source code up in \fICwd.xs\fR fo' the
details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::chdir
