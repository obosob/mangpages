.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OBJ_nid2obj 3"
.TH OBJ_nid2obj 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
OBJ_nid2obj, OBJ_nid2ln, OBJ_nid2sn, OBJ_obj2nid, OBJ_txt2nid, OBJ_ln2nid, OBJ_sn2nid,
OBJ_cmp, OBJ_dup, OBJ_txt2obj, OBJ_obj2txt, OBJ_create, OBJ_cleanup \- ASN1 object utility
functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/objects.h>
\&
\& ASN1_OBJECT * OBJ_nid2obj(int n);
\& const char *  OBJ_nid2ln(int n);
\& const char *  OBJ_nid2sn(int n);
\&
\& int OBJ_obj2nid(const ASN1_OBJECT *o);
\& int OBJ_ln2nid(const char *ln);
\& int OBJ_sn2nid(const char *sn);
\&
\& int OBJ_txt2nid(const char *s);
\&
\& ASN1_OBJECT * OBJ_txt2obj(const char *s, int no_name);
\& int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);
\&
\& int OBJ_cmp(const ASN1_OBJECT *a,const ASN1_OBJECT *b);
\& ASN1_OBJECT * OBJ_dup(const ASN1_OBJECT *o);
\&
\& int OBJ_create(const char *oid,const char *sn,const char *ln);
\& void OBJ_cleanup(void);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \s-1ASN1\s0 object utilitizzle functions process \s-1ASN1_OBJECT\s0 structures which are
a representation of tha \s-1ASN1 OBJECT IDENTIFIER \s0(\s-1OID\s0) type.
.PP
\&\fIOBJ_nid2obj()\fR, \fIOBJ_nid2ln()\fR n' \fIOBJ_nid2sn()\fR convert tha \s-1NID \s0\fBn\fR ta 
an \s-1ASN1_OBJECT\s0 structure, its long name n' its short name respectively,
or \fB\s-1NULL\s0\fR be a error occurred.
.PP
\&\fIOBJ_obj2nid()\fR, \fIOBJ_ln2nid()\fR, \fIOBJ_sn2nid()\fR return tha correspondin \s-1NID\s0
for tha object \fBo\fR, tha long name <ln> or tha short name <sn> respectively
or NID_undef if a error occurred.
.PP
\&\fIOBJ_txt2nid()\fR returns \s-1NID\s0 correspondin ta text strang <s>. \fBs\fR can be
a long name, a gangbangin' finger-lickin' dirty-ass short name or tha numerical respresentation of a object.
.PP
\&\fIOBJ_txt2obj()\fR converts tha text strang \fBs\fR tha fuck into a \s-1ASN1_OBJECT\s0 structure.
If \fBno_name\fR is 0 then long names n' short names is ghon be interpreted
as well as numerical forms. If \fBno_name\fR is 1 only tha numerical form
is acceptable.
.PP
\&\fIOBJ_obj2txt()\fR converts tha \fB\s-1ASN1_OBJECT\s0\fR \fBa\fR tha fuck into a textual representation.
Da representation is freestyled as a null terminated strang ta \fBbuf\fR
at most \fBbuf_len\fR bytes is written, truncatin tha result if necessary.
Da total amount of space required is returned. Y'all KNOW dat shit, muthafucka! If \fBno_name\fR is 0 then
if tha object has a long-ass or short name then dat is ghon be used, otherwise
the numerical form is ghon be used. Y'all KNOW dat shit, muthafucka! If \fBno_name\fR is 1 then tha numerical
form will always be used.
.PP
\&\fIOBJ_cmp()\fR compares \fBa\fR ta \fBb\fR. If tha two is identical 0 is returned.
.PP
\&\fIOBJ_dup()\fR returns a cold-ass lil copy of \fBo\fR.
.PP
\&\fIOBJ_create()\fR addz a freshly smoked up object ta tha internal table. \fBoid\fR is tha 
numerical form of tha object, \fBsn\fR tha short name n' \fBln\fR the
long name fo' realz. A freshly smoked up \s-1NID\s0 is returned fo' tha pimped object.
.PP
\&\fIOBJ_cleanup()\fR cleans up OpenSSLs internal object table: dis should
be called before a application exits if any freshly smoked up objects was added
usin \fIOBJ_create()\fR.
.SH "NOTES"
.IX Header "NOTES"
Objects up in OpenSSL can gotz a gangbangin' finger-lickin' dirty-ass short name, a long-ass name n' a numerical
identifier (\s-1NID\s0) associated wit em fo' realz. A standard set of objects is
represented up in a internal table. Da appropriate joints is defined
in tha header file \fBobjects.h\fR.
.PP
For example tha \s-1OID\s0 fo' commonName has tha followin definitions:
.PP
.Vb 3
\& #define SN_commonName                   "CN"
\& #define LN_commonName                   "commonName"
\& #define NID_commonName                  13
.Ve
.PP
New objects can be added by callin \fIOBJ_create()\fR.
.PP
Table objects have certain advantages over other objects: fo' example
their NIDs can be used up in a C language switch statement. They are
also static constant structures which is shared: dat is there
is only a single constant structure fo' each table object.
.PP
Objects which is not up in tha table have tha \s-1NID\s0 value NID_undef.
.PP
Objects do not need ta be up in tha internal tablez ta be processed,
the functions \fIOBJ_txt2obj()\fR n' \fIOBJ_obj2txt()\fR can process tha numerical
form of a \s-1OID.\s0
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Smoke a object fo' \fBcommonName\fR:
.PP
.Vb 2
\& ASN1_OBJECT *o;
\& o = OBJ_nid2obj(NID_commonName);
.Ve
.PP
Peep if a object is \fBcommonName\fR
.PP
.Vb 2
\& if (OBJ_obj2nid(obj) == NID_commonName)
\&        /* Do suttin' */
.Ve
.PP
Smoke a freshly smoked up \s-1NID\s0 n' initialize a object from it:
.PP
.Vb 3
\& int new_nid;
\& ASN1_OBJECT *obj;
\& new_nid = OBJ_create("1.2.3.4", "NewOID", "New Object Identifier");
\&
\& obj = OBJ_nid2obj(new_nid);
.Ve
.PP
Smoke a freshly smoked up object directly:
.PP
.Vb 1
\& obj = OBJ_txt2obj("1.2.3.4", 1);
.Ve
.SH "BUGS"
.IX Header "BUGS"
\&\fIOBJ_obj2txt()\fR be awkward n' messy ta use: it don't follow tha 
convention of other OpenSSL functions where tha buffer can be set
to \fB\s-1NULL\s0\fR ta determine tha amount of data dat should be written.
Instead \fBbuf\fR must point ta a valid buffer n' \fBbuf_len\fR should
be set ta a positizzle value fo' realz. A buffer length of 80 should be more
than enough ta handle any \s-1OID\s0 encountered up in practice.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIOBJ_nid2obj()\fR returns a \fB\s-1ASN1_OBJECT\s0\fR structure or \fB\s-1NULL\s0\fR be an
error occurred.
.PP
\&\fIOBJ_nid2ln()\fR n' \fIOBJ_nid2sn()\fR returns a valid strang or \fB\s-1NULL\s0\fR
on error.
.PP
\&\fIOBJ_obj2nid()\fR, \fIOBJ_ln2nid()\fR, \fIOBJ_sn2nid()\fR n' \fIOBJ_txt2nid()\fR return
a \s-1NID\s0 or \fBNID_undef\fR on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIERR_get_error\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\s-1TBA\s0
