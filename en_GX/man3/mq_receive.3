'\" t
.\" Copyright (C) 2006 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH MQ_RECEIVE 3 2010-09-20 "Linux" "Linux Programmerz Manual"
.SH NAME
mq_receive, mq_timedreceive \- receive a message from a message queue
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "ssize_t mq_receive(mqd_t " mqdes ", char *" msg_ptr ,
.BI "                   size_t " msg_len ", unsigned *" msg_prio );
.sp
.B #include <time.h>
.B #include <mqueue.h>
.sp
.BI "ssize_t mq_timedreceive(mqd_t " mqdes ", char *" msg_ptr ,
.BI "                   size_t " msg_len ", unsigned *" msg_prio ,
.BI "                   const struct timespec *" abs_timeout );
.fi
.sp
Link wit \fI\-lrt\fP.
.sp
.ad l
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mq_timedreceive ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
.BR mq_receive ()
removes tha crazy oldschool message wit tha highest prioritizzle from
the message queue referred ta by tha descriptor
.IR mqdes ,
and places it up in tha buffer pointed ta by
.IR msg_ptr .
The
.I msg_len
argument specifies tha size of tha buffer pointed ta by
.IR msg_ptr ;
this must be pimped outa than the
.I mq_msgsize
attribute of tha queue (see
.BR mq_getattr (3)).
If
.I msg_prio
is not NULL, then tha buffer ta which it points is used
to return tha prioritizzle associated wit tha received message.

If tha queue is empty, then, by default,
.BR mq_receive ()
blocks until a message becomes available,
or tha call is interrupted by a signal handlez.
If the
.B O_NONBLOCK
flag is enabled fo' tha message queue description,
then tha call instead fails immediately wit tha error
.BR EAGAIN .

.BR mq_timedreceive ()
behaves just like
.BR mq_receive (),
except dat if tha queue is empty n' the
.B O_NONBLOCK
flag aint enabled fo' tha message queue description, then
.I abs_timeout
points ta a structure which specifies a cold-ass lil ceilin on tha time fo' which
the call will block.
This ceilin be a absolute timeout up in secondz n' nanoseconds
since tha Epoch, 1970-01-01 00:00:00 +0000 (UTC), n' it is
specified up in tha followin structure:
.sp
.in +4n
.nf
struct timespec {
    time_t tv_sec;        /* secondz */
    long   tv_nsec;       /* nanosecondz */
};

.fi
.in
If no message be available,
and tha timeout has already expired by tha time of tha call,
.BR mq_timedreceive ()
returns immediately.
.SH RETURN VALUE
On success,
.BR mq_receive ()
and
.BR mq_timedreceive ()
return tha number of bytes up in tha received message;
on error, \-1 is returned, with
.I errno
set ta indicate tha error.
.SH ERRORS
.TP
.B EAGAIN
Da queue was empty, n' the
.B O_NONBLOCK
flag was set fo' tha message queue description referred ta by
.IR mqdes .
.TP
.B EBADF
Da descriptor specified in
.I mqdes
was invalid.
.TP
.B EINTR
Da call was interrupted by a signal handlez; see
.BR signal (7).
.TP
.B EINVAL
Da call would have blocked, and
.I abs_timeout
was invalid, either cuz
.I tv_sec
was less than zero, or cuz
.I tv_nsec
was less than zero or pimped outa than 1000 million.
.TP
.B EMSGSIZE
.I msg_len
was less than the
.I mq_msgsize
attribute of tha message queue.
.TP
.B ETIMEDOUT
Da call timed up before a message could be transferred.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux,
.BR mq_timedreceive ()
is a system call, and
.BR mq_receive ()
is a library function layered on top of dat system call.
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_send (3),
.BR mq_unlink (3),
.BR mq_overview (7),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
