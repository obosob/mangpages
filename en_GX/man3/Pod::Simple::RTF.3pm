.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Simple::RTF 3"
.TH Pod::Simple::RTF 3 "2013-05-03" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Simple::RTF \-\- format Pod as RTF
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  perl \-MPod::Simple::RTF \-e \e
\&   "exit Pod::Simple::RTF\->filter(shift)\->any_errata_seen" \e
\&   thangy.pod > thangy.rtf
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class be a gangbangin' formatta dat takes Pod n' rendaz it as \s-1RTF,\s0 phat for
viewing/printin up in MSWord, WordPad/write.exe, TextEdit, etc.
.PP
This be a subclass of Pod::Simple n' inherits all its methods.
.SH "FORMAT CONTROL ATTRIBUTES"
.IX Header "FORMAT CONTROL ATTRIBUTES"
Yo ass can set these attributes on tha parser object before you
call \f(CW\*(C`parse_file\*(C'\fR (or a similar method) on it:
.ie n .IP "$parser\->head1_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.el .IP "\f(CW$parser\fR\->head1_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.IX Item "$parser->head1_halfpoint_size( halfpoint_integer );"
.PD 0
.ie n .IP "$parser\->head2_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.el .IP "\f(CW$parser\fR\->head2_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.IX Item "$parser->head2_halfpoint_size( halfpoint_integer );"
.ie n .IP "$parser\->head3_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.el .IP "\f(CW$parser\fR\->head3_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.IX Item "$parser->head3_halfpoint_size( halfpoint_integer );"
.ie n .IP "$parser\->head4_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.el .IP "\f(CW$parser\fR\->head4_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.IX Item "$parser->head4_halfpoint_size( halfpoint_integer );"
.PD
These methodz set tha size (in half-points, like 52 fo' 26\-point)
that these headin levels will step tha fuck up as.
.ie n .IP "$parser\->codeblock_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.el .IP "\f(CW$parser\fR\->codeblock_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.IX Item "$parser->codeblock_halfpoint_size( halfpoint_integer );"
This method sets tha size (in half-points, like 21 fo' 10.5\-point)
that codeblocks (\*(L"verbatim sections\*(R") will step tha fuck up as.
.ie n .IP "$parser\->header_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.el .IP "\f(CW$parser\fR\->header_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.IX Item "$parser->header_halfpoint_size( halfpoint_integer );"
This method sets tha size (in half-points, like 15 fo' 7.5\-point)
that tha header on each page will step tha fuck up in. I aint talkin' bout chicken n' gravy biatch.  Da header
is probably just "\fImodulename\fR p. \fIpagenumber\fR".
.ie n .IP "$parser\->normal_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.el .IP "\f(CW$parser\fR\->normal_halfpoint_size( \fIhalfpoint_integer\fR );" 4
.IX Item "$parser->normal_halfpoint_size( halfpoint_integer );"
This method sets tha size (in half-points, like 26 fo' 13\-point)
that aiiight paragraphic text will step tha fuck up in.
.ie n .IP "$parser\->no_proofing_exemptions( \fItrue_or_false\fR );" 4
.el .IP "\f(CW$parser\fR\->no_proofing_exemptions( \fItrue_or_false\fR );" 4
.IX Item "$parser->no_proofing_exemptions( true_or_false );"
Set dis value ta legit if you don't want tha formatta ta try
puttin a hidden code on all Perl symbols (as dopest as it can
notice them) dat labels dem as bein not up in Gangsta, and
so not worth spellchecking.
.ie n .IP "$parser\->doc_lang( \fImicrosoft_decimal_language_code\fR )" 4
.el .IP "\f(CW$parser\fR\->doc_lang( \fImicrosoft_decimal_language_code\fR )" 4
.IX Item "$parser->doc_lang( microsizzles_decimal_language_code )"
This sets tha language code ta tag dis document as bein in. I aint talkin' bout chicken n' gravy biatch. By
default, it is currently tha value of tha environment variable
\&\f(CW\*(C`RTFDEFLANG\*(C'\fR, or if thatz not set, then tha value
1033 (for \s-1US\s0 Gangsta).
.Sp
Settin dis appropriately is useful if you wanna use tha \s-1RTF\s0
to spellcheck, and/or if you want it ta hyphenate right.
.Sp
Here is some notable joints:
.Sp
.Vb 12
\&  1033  US Gangsta
\&  2057  UK Gangsta
\&  3081  Australia Gangsta
\&  4105  Canada Gangsta
\&  1034  Spain Spanish
\&  2058  Mexico Spanish
\&  1031  Germany German
\&  1036  Frizzle French
\&  3084  Canada French
\&  1035  Finnish
\&  1044  Norwegian (Bokmal)
\&  2068  Norwegian (Nynorsk)
.Ve
.PP
If yo ass is particularly horny bout customizin dis modulez output
even more, peep tha source and/or write ta mah dirty ass.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Simple, RTF::Writer, RTF::Cookbook, RTF::Document,
RTF::Generator
.SH "SUPPORT"
.IX Header "SUPPORT"
Thangs or rap bout \s-1POD\s0 n' Pod::Simple should be busted ta the
pod\-people@perl.org mail list. Right back up in yo muthafuckin ass. Send a empty email to
pod\-people\-subscribe@perl.org ta subscribe.
.PP
This module is managed up in a open GitHub repository,
<https://github.com/theory/pod\-simple/>. Feel free ta fork n' contribute, or
to clone <git://github.com/theory/pod\-simple.git> n' bust patches!
.PP
Patches against Pod::Simple is welcome. Please bust bug reports to
<bug\-pod\-simple@rt.cpan.org>.
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2002 Shizzle M. Burke.
.PP
This library is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.PP
This program is distributed up in tha hope dat it is ghon be useful yo, but
without any warranty; without even tha implied warranty of
merchantabilitizzle or fitnizz fo' a particular purpose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pod::Simple was pimped by Shizzle M. Burke <sburke@cpan.org>.
But don't bother him, he retired.
.PP
Pod::Simple is maintained by:
.IP "\(bu" 4
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR
.IP "\(bu" 4
Hans Dieta Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR
.IP "\(bu" 4
Dizzy E. Wheela \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
