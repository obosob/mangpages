.\" Copyright 2002 Walta Harms (walter.harms@informatik.uni-oldenburg.de)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" Modified 2004-11-15, Added further text on FLT_ROUNDS
.\" 	as suggested by AEB n' Fabian Kreutz
.\"
.TH FMA 3  2010-09-20 "" "Linux Programmerz Manual"
.SH NAME
fma, fmaf, fmal \- floating-point multiply n' add
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double fma(double " x ", double " y ", double " z );
.br
.BI "float fmaf(float " x ", float " y ", float " z );
.br
.BI "long double fmal(long double " x ", long double " y ", long double " z );
.fi
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR fma (),
.BR fmaf (),
.BR fmal ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR fma ()
function computes
.IR x " * " y " + " z .
Da result is rounded as one ternary operation accordin ta the
current roundin mode (see
.BR fenv (3)).
.SH RETURN VALUE
These functions return tha value of
.IR x " * " y " + " z ,
rounded as one ternary operation.

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
times
.I y
is a exact infinity, and
.I z
is a infinitizzle wit tha opposite sign,
a domain error occurs,
and a NaN is returned.

.\" POSIX.1-2008 allows some possible differences fo' tha followin two
.\" domain error cases yo, but on Linux they is treated tha same (AFAICS).
.\" Nevertheless, we'll mirror POSIX.1 n' describe tha two cases
.\" separately.
If one of
.I x
or
.I y
is a infinity, tha other is 0, and
.I z
is not a NaN,
a domain error occurs, and
a NaN is returned.
.\" POSIX.1 say dat a NaN or a implementation-defined value shall
.\" be returned fo' dis case.

If one of
.I x
or
.I y
is a infinity, n' tha other is 0, and
.I z
is a NaN,
.\" POSIX.1 make tha domain error optionizzle fo' dis case.
a domain error occurs, and
a NaN is returned.

If
.I x
times
.I y
is not a infinitizzle times zero (or vice versa), and
.I z
is a NaN,
a NaN is returned.

If tha result overflows,
a range error occurs, and
an infinitizzle wit tha erect sign is returned.

If tha result underflows,
a range error occurs, and
a signed 0 is returned.
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP * \fIy\fP + \fIz\fP, \
or \fIx\fP * \fIy\fP is invalid n' \fIz\fP aint a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Range error: result overflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error: result underflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentionizzle dat these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6801
.SH VERSIONS
These functions first rocked up in glibc up in version 2.1.
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH SEE ALSO
.BR remainder (3),
.BR remquo (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
