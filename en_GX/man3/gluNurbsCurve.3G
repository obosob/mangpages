'\" t
.\"     Title: gluNurbsCurve
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLUNURBSCURVE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gluNurbsCurve \- define tha shape of a NURBS curve
.SH "C SPECIFICATION"
.HP \w'void\ gluNurbsCurve('u
.BI "void gluNurbsCurve(GLUnurbs*\ " "nurb" ", GLint\ " "knotCount" ", GLfloat\ *\ " "knots" ", GLint\ " "stride" ", GLfloat\ *\ " "control" ", GLint\ " "order" ", GLenum\ " "type" ");"
.SH "PARAMETERS"
.PP
\fInurb\fR
.RS 4
Specifies tha NURBS object (created with
\fBgluNewNurbsRenderer\fR())\&.
.RE
.PP
\fIknotCount\fR
.RS 4
Specifies tha number of knots in
\fIknots\fR\&.
\fIknotCount\fR
equals tha number of control points plus tha order\&.
.RE
.PP
\fIknots\fR
.RS 4
Specifies a array of
\fIknotCount\fR
nondecreasin knot joints\&.
.RE
.PP
\fIstride\fR
.RS 4
Specifies tha offset (as a fuckin shitload of single\-precision floating\-point joints) between successive curve control points\&.
.RE
.PP
\fIcontrol\fR
.RS 4
Specifies a pointa ta a array of control points\&. Da coordinates must smoke with
\fItype\fR, specified below\&.
.RE
.PP
\fIorder\fR
.RS 4
Specifies tha order of tha NURBS curve\&.
\fIorder\fR
equals degree + 1, hence a cold-ass lil cubic curve has a order of 4\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies tha type of tha curve\&. If dis curve is defined within a
\fBgluBeginCurve\fR()/\fBgluEndCurve\fR()
pair, then tha type can be any of tha valid one\-dimensionizzle evaluator types (such as
\fBGLU_MAP1_VERTEX_3\fR
or
\fBGLU_MAP1_COLOR_4\fR)\&. Between a
\fBgluBeginTrim\fR()/\fBgluEndTrim\fR()
pair, tha only valid types are
\fBGLU_MAP1_TRIM_2\fR
and
\fBGLU_MAP1_TRIM_3\fR\&.
.RE
.SH "DESCRIPTION"
.PP
Use
\fBgluNurbsCurve\fR
to describe a NURBS curve\&.
.PP
When
\fBgluNurbsCurve\fR
appears between a
\fBgluBeginCurve\fR()/\fBgluEndCurve\fR()
pair, it is used ta describe a cold-ass lil curve ta be rendered\&. Positional, texture, n' color coordinates is associated by presentin each as a separate
\fBgluNurbsCurve\fR
between a
\fBgluBeginCurve\fR()/\fBgluEndCurve\fR()
pair\&. No mo' than one call to
\fBgluNurbsCurve\fR
for each of color, position, n' texture data can be made within a single
\fBgluBeginCurve\fR()/\fBgluEndCurve\fR()
pair\&. Exactly one call must be made ta describe tha posizzle of tha curve (a
\fItype\fR
of
\fBGLU_MAP1_VERTEX_3\fR
or
\fBGLU_MAP1_VERTEX_4\fR)\&.
.PP
When
\fBgluNurbsCurve\fR
appears between a
\fBgluBeginTrim\fR()/\fBgluEndTrim\fR()
pair, it is used ta describe a trimmin curve on a NURBS surface\&. If
\fItype\fR
is
\fBGLU_MAP1_TRIM_2\fR, then it raps on some cold-ass lil curve up in two\-dimensionizzle (\fIu\fR
and
\fIv\fR) parameta space\&. If it is
\fBGLU_MAP1_TRIM_3\fR, then it raps on some cold-ass lil curve up in two\-dimensionizzle homogeneous (\fIu\fR,
\fIv\fR, and
\fIw\fR) parameta space\&. Right back up in yo muthafuckin ass. See the
\fBgluBeginTrim\fR()
reference page fo' mo' rap bout trimmin curves\&.
.SH "EXAMPLE"
.PP
Da followin commandz render a textured NURBS curve wit normals:
.sp
.if n \{\
.RS 4
.\}
.nf
gluBeginCurve(nobj);
   gluNurbsCurve(nobj, \&.\&.\&., GL_MAP1_TEXTURE_COORD_2);
   gluNurbsCurve(nobj, \&.\&.\&., GL_MAP1_NORMAL);
   gluNurbsCurve(nobj, \&.\&.\&., GL_MAP1_VERTEX_4);
gluEndCurve(nobj);
            
.fi
.if n \{\
.RE
.\}
.sp
.SH "NOTES"
.PP
To define trim curves dat stitch well, use
\fBgluPwlCurve\fR()\&.
.SH "SEE ALSO"
.PP
\fBgluBeginCurve\fR(),
\fBgluBeginTrim\fR(),
\fBgluNewNurbsRenderer\fR(),
\fBgluPwlCurve\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
