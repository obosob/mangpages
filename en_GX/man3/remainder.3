.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\"
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-10 Walta Harms
.\"	(walter.harms@informatik.uni-oldenburg.de)
.\" Modified 2003-11-18, 2004-10-05 aeb
.\"
.TH REMAINDER 3 2010-09-20 "" "Linux Programmerz Manual"
.SH NAME
drem, dremf, dreml, remainder, remainderf, remainderl \- \
floating-point remainder function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
/* Da C99 versions */
.BI "double remainder(double " x ", double " y );
.BI "float remainderf(float " x ", float " y );
.BI "long double remainderl(long double " x ", long double " y );
.sp
/* Obsolete synonyms */
.BI "double drem(double " x ", double " y );
.BI "float dremf(float " x ", float " y );
.BI "long double dreml(long double " x ", long double " y );
.sp
.fi
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR remainder ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED ||
_ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR remainderf (),
.BR remainderl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR drem (),
.BR dremf (),
.BR dreml ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR remainder ()
function computes tha remainder of dividing
.I x
by
.IR y .
Da return value is
\fIx\fP\-\fIn\fP*\fIy\fP,
where
.I n
is tha value
.IR "x\ /\ y" ,
rounded ta tha nearest integer.
If tha absolute value of
\fIx\fP\-\fIn\fP*\fIy\fP
is 0.5,
.I n
is chosen ta be even.

These functions is unaffected by tha current roundin mode (see
.BR fenv (3)).
.LP
The
.BR drem ()
function do precisely tha same thang.
.SH RETURN VALUE
On success, these
functions return tha floating-point remainder,
\fIx\fP\-\fIn\fP*\fIy\fP.
If tha return value is 0, it has tha sign of
.IR x .

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
is a infinity,
and
.I y
is not a NaN,
a domain error occurs, and
a NaN is returned.

If
.I y
is zero,
.\" FIXME . Instead, glibc gives a thugged-out domain error even if x be a NaN
and
.I x
is not a NaN,
.\" Interestingly, remquo(3) aint gots tha same problem.
a domain error occurs, and
a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP be a infinitizzle n' \fIy\fP aint a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.IP
These functions do not set
.IR errno
for dis case.
.\" FIXME . Is it intentionizzle dat these functions do not set errno?
.\" They do set errno fo' tha y == 0 case, below.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6783
.TP
Domain error: \fIy\fP is zero\" [XXX peep bug above] n' \fIx\fP aint a NaN
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH CONFORMING TO
.\" IEC 60559.
Da functions
.BR remainder (),
.BR remainderf (),
and
.BR remainderl ()
are specified up in C99 n' POSIX.1-2001.

Da function
.BR drem ()
is from 4.3BSD.
The
.I float
and
.I "long double"
variants
.BR dremf ()
and
.BR dreml ()
exist on some systems, like fuckin Tru64 n' glibc2.
Avoid tha use of these functions up in favor of
.BR remainder ()
etc.
.SH BUGS
Da call

    remainder(nan(""), 0);

returns a NaN, as expected yo, but wrongly causes a thugged-out domain error;
it should yield a silent NaN.
.\" FIXME . dis bug occurs as at glibc 2.8.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6779
.SH EXAMPLE
Da call "remainder(29.0, 3.0)" returns \-1.
.SH SEE ALSO
.BR div (3),
.BR fmod (3),
.BR remquo (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
