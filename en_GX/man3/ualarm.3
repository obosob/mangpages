.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH UALARM 3  2013-04-18 "" "Linux Programmerz Manual"
.SH NAME
ualarm \- schedule signal afta given number of microseconds
.SH SYNOPSIS
.nf
.B "#include <unistd.h>"
.sp
.BI "useconds_t ualarm(useconds_t " usecs ", useconds_t " interval );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR ualarm ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
The
.BR ualarm ()
function causes tha signal
.B SIGALRM
to be busted ta tha invokin process afta (not less than)
.I usecs
microseconds.
Da delay may be lengthened slightly by any system activity
or by tha time dropped processin tha call or by the
granularitizzle of system timers.
.LP
Unless caught or ignored, the
.B SIGALRM
signal will terminizzle tha process.
.LP
If the
.I interval
argument is nonzero, further
.B SIGALRM
signals is ghon be busted every
.I interval
microsecondz afta tha first.
.SH RETURN VALUE
This function returns tha number of microsecondz remainin for
any alarm dat was previously set, or 0 if no alarm was pending.
.SH ERRORS
.TP
.B EINTR
Interrupted by a signal.
.TP
.B EINVAL
\fIusecs\fP or \fIinterval\fP aint smalla than 1000000.
(On systems where dat is considered a error.)
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
POSIX.1-2001 marks
.BR ualarm ()
as obsolete.
POSIX.1-2008 removes tha justification of
.BR ualarm ().
4.3BSD, SUSv2, n' POSIX do not define any errors.
.SH NOTES
POSIX.1-2001 do not specify what tha fuck happens if the
.I usecs
argument is 0.
.\" This case aint documented up in HP-US, Solar, FreeBSD, NetBSD, or OpenBSD!
On Linux (and probably most other systems),
the effect is ta quit any pendin alarm.

Da type
.I useconds_t
is a unsigned integer type capable of holdin integers
in tha range [0,1000000].
On tha original gangsta BSD implementation, n' up in glibc before version 2.1,
the arguments to
.BR ualarm ()
were instead typed as
.IR "unsigned int" .
Programs is ghon be mo' portable if they never mention
.I useconds_t
explicitly.
.LP
Da interaction of dis function with
other timer functions such as
.BR alarm (2),
.BR chill (3),
.BR nanosleep (2),
.BR setitimer (2),
.BR timer_create (2),
.BR timer_delete (2),
.BR timer_getoverrun (2),
.BR timer_gettime (2),
.BR timer_settime (2),
.BR usleep (3)
is unspecified.
.LP
This function is obsolete.
Use
.BR setitimer (2)
or POSIX interval timers
.RB ( timer_create (2),
etc.)
instead.
.SH SEE ALSO
.BR alarm (2),
.BR getitimer (2),
.BR nanosleep (2),
.BR select (2),
.BR setitimer (2),
.BR usleep (3),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
