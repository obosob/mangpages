'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2002 by Kevin B. Kenny <kennykb@acm.org>.  All muthafuckin rights reserved.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_CreateTrace 3 "" Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CreateTrace, Tcl_CreateObjTrace, Tcl_DeleteTrace \- arrange fo' command execution ta be traced
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Trace
\fBTcl_CreateTrace\fR(\fIinterp, level, proc, clientData\fR)
.sp
Tcl_Trace
\fBTcl_CreateObjTrace\fR(\fIinterp, level, flags, objProc, clientData, deleteProc\fR)
.sp
\fBTcl_DeleteTrace\fR(\fIinterp, trace\fR)
.SH ARGUMENTS
.AS Tcl_CmdObjTraceDeleteProc *deleteProc
.AP Tcl_Interp *interp in
Interpreta containin command ta be traced or untraced.
.AP int level in
Only commandz at or below dis nestin level is ghon be traced unless
0 is specified. Y'all KNOW dat shit, muthafucka!  1 means
top-level commandz only, 2 means top-level commandz or dem dat are
invoked as immediate consequencez of executin top-level commands
(procedure bodies, bracketed commands, etc.) n' so on.
A value of 0 means dat commandz at any level is traced.
.AP int flags in
Flags governin tha trace execution. I aint talkin' bout chicken n' gravy biatch.  See below fo' details.
.AP Tcl_CmdObjTraceProc *objProc in
Procedure ta booty-call fo' each command dat is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See below for
detailz of tha callin sequence.
.AP Tcl_CmdTraceProc *proc in
Procedure ta booty-call fo' each command dat is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See below for
details on tha callin sequence.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIobjProc\fR or \fIproc\fR.
.AP Tcl_CmdObjTraceDeleteProc *deleteProc in
Procedure ta booty-call when tha trace is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See below fo' details of
the callin sequence.  A NULL pointa is permissible n' thangs up in dis biatch up in no
callback when tha trace is deleted.
.AP Tcl_Trace trace in
Token fo' trace ta be removed (return value from previous call
to \fBTcl_CreateTrace\fR).
.BE
.SH DESCRIPTION
.PP
\fBTcl_CreateObjTrace\fR arranges fo' command tracing.  Afta it is
called, \fIobjProc\fR is ghon be invoked before tha Tcl interpreta calls
any command procedure when evaluatin commandz up in \fIinterp\fR.
Da return value from \fBTcl_CreateObjTrace\fR be a token fo' tha trace,
which may be passed ta \fBTcl_DeleteTrace\fR ta remove tha trace.
There may be nuff traces up in effect simultaneously fo' tha same
interpreter.
.PP
\fIobjProc\fR should have arguments n' result dat match tha type,
\fBTcl_CmdObjTraceProc\fR:
.CS
typedef int \fBTcl_CmdObjTraceProc\fR( 
        \fBClientData\fR \fIclientData\fR,
        \fBTcl_Interp\fR* \fIinterp\fR,
        int \fIlevel\fR,
        const char *\fIcommand\fR,
        \fBTcl_Command\fR \fIcommandToken\fR,
        int \fIobjc\fR,
        \fBTcl_Obj\fR *const \fIobjv\fR[] );
.CE
Da \fIclientData\fR n' \fIinterp\fR parametas is copiez of the
correspondin arguments given ta \fBTcl_CreateTrace\fR.
\fIClientData\fR typically points ta a application-specific data
structure dat raps bout what tha fuck ta do when \fIobjProc\fR is invoked. Y'all KNOW dat shit, muthafucka!  The
\fIlevel\fR parameta gives tha nestin level of tha command (1 for
top-level commandz passed ta \fBTcl_Eval\fR by tha application, 2 for
the next-level commandz passed ta \fBTcl_Eval\fR as part of parsin or
interpretin level-1 commands, n' so on). Da \fIcommand\fR parameter
points ta a strang containin tha text of tha command, before any
argument substitution. I aint talkin' bout chicken n' gravy biatch.  Da \fIcommandToken\fR parameta be a Tcl
command token dat identifies tha command ta be invoked. Y'all KNOW dat shit, muthafucka!  Da token
may be passed ta \fBTcl_GetCommandName\fR,
\fBTcl_GetCommandInfoFromToken\fR, or \fBTcl_SetCommandInfoFromToken\fR to
manipulate tha definizzle of tha command. Y'all KNOW dat shit, muthafucka! Da \fIobjc\fR n' \fIobjv\fR
parametas designate tha final parameta count n' parameta vector
that is ghon be passed ta tha command, n' have had all substitutions
performed.
.PP
Da \fIobjProc\fR callback is sposed ta fuckin return a standard Tcl status
return code.  If dis code is \fBTCL_OK\fR (the aiiight case), then
the Tcl interpreta will invoke tha command. Y'all KNOW dat shit, muthafucka!  Any other return code
is treated as if tha command returned dat status, n' tha command is
\fInot\fR invoked.
.PP
Da \fIobjProc\fR callback must not modify \fIobjv\fR up in any way.  It
is, however, permissible ta chizzle tha command by calling
\fBTcl_SetCommandTokenInfo\fR prior ta returning.  Any such chizzle
takes effect immediately, n' tha command is invoked wit tha new
information.
.PP
Tracin will only occur fo' commandz at nestin level less than
or equal ta tha \fIlevel\fR parameta (i.e. tha \fIlevel\fR
parameta ta \fIobjProc\fR will always be less than or equal ta the
\fIlevel\fR parameta ta \fBTcl_CreateTrace\fR).
.PP
Tracin has a thugged-out dope effect on runtime performizzle cuz it
causes tha bytecode compila ta refrain from generatin in-line code
for Tcl commandz like fuckin \fBif\fR n' \fBwhile\fR up in order dat they
may be traced. Y'all KNOW dat shit, muthafucka!  If traces fo' tha built-in commandz is not required,
the \fIflags\fR parameta may be set ta tha constant value
\fBTCL_ALLOW_INLINE_COMPILATION\fR.  In dis case, traces on built-in
commandz may or may not result up in trace callbacks, dependin on the
state of tha interpreter yo, but run-time performizzle is ghon be improved
significantly.  (This functionalitizzle is desirable, fo' example, when
usin \fBTcl_CreateObjTrace\fR ta implement a execution time
profiler.)
.PP
Calls ta \fIobjProc\fR is ghon be made by tha Tcl parser immediately before
it calls tha command procedure fo' tha command (\fIcmdProc\fR).  This
occurs afta argument parsin n' substitution, so tracin for
substituted commandz occurs before tracin of tha commands
containin tha substitutions.  If there be a syntax error up in a
command, or if there is no command procedure associated wit a
command name, then no tracin will occur fo' dat command. Y'all KNOW dat shit, muthafucka!  If a
strin passed ta Tcl_Eval gotz nuff multiple commandz (bracketed, or
on different lines) then multiple calls ta \fIobjProc\fR will occur,
one fo' each command.
.PP
\fBTcl_DeleteTrace\fR removes a trace, so dat no future calls will be
made ta tha procedure associated wit tha trace.  Afta \fBTcl_DeleteTrace\fR
returns, tha calla should never again n' again n' again use tha \fItrace\fR token.
.PP
When \fBTcl_DeleteTrace\fR is called, tha interpreta invokes the
\fIdeleteProc\fR dat was passed as a parameta to
\fBTcl_CreateObjTrace\fR.  Da \fIdeleteProc\fR must match tha type,
\fBTcl_CmdObjTraceDeleteProc\fR:
.CS
typedef void \fBTcl_CmdObjTraceDeleteProc\fR( 
        \fBClientData\fR \fIclientData\fR);
.CE
Da \fIclientData\fR parameta is ghon be tha same as the
\fIclientData\fR parameta dat was originally passed to
\fBTcl_CreateObjTrace\fR.
.PP
\fBTcl_CreateTrace\fR be a alternatizzle intercourse fo' command tracing,
\fInot recommended fo' freshly smoked up applications\fR.  It be provided fo' backward
compatibilitizzle wit code dat was pimped fo' olda versionz of the
Tcl interpreter n' shit.  It be similar ta \fBTcl_CreateObjTrace\fR, except
that its \fIproc\fR parameta should have arguments n' result that
match tha type \fBTcl_CmdTraceProc\fR:
.CS
typedef void Tcl_CmdTraceProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR,
        int \fIlevel\fR,
        char *\fIcommand\fR,
        Tcl_CmdProc *\fIcmdProc\fR,
        ClientData \fIcmdClientData\fR,
        int \fIargc\fR,
        const char *\fIargv\fR[]);
.CE
Da parametas ta tha \fIproc\fR callback is similar ta dem of the
\fIobjProc\fR callback above. Da \fIcommandToken\fR is
replaced wit \fIcmdProc\fR, a pointa ta tha (string-based) command
procedure dat is ghon be invoked; n' \fIcmdClientData\fR, tha client
data dat is ghon be passed ta tha procedure.  Da \fIobjc\fR parameter
is replaced wit a \fIargv\fR parameter, dat gives tha arguments to
the command as characta strings.
\fIProc\fR must not modify tha \fIcommand\fR or \fIargv\fR strings.
.PP
If a trace pimped wit \fBTcl_CreateTrace\fR is up in effect, inline
compilation of Tcl commandz like fuckin \fBif\fR n' \fBwhile\fR be always
disabled. Y'all KNOW dat shit, muthafucka!  There is no notification when a trace pimped with
\fBTcl_CreateTrace\fR is deleted.
There is no way ta be notified when tha trace pimped by
\fBTcl_CreateTrace\fR is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  There is no way fo' tha \fIproc\fR
associated wit a cold-ass lil call ta \fBTcl_CreateTrace\fR ta abort execution of
\fIcommand\fR.
.SH KEYWORDS
command, create, delete, interpreter, trace
