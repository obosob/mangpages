'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbKeyNumGroups 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbKeyNumGroups \- Returns tha number of crewz of symbols bound ta tha key 
correspondin ta keycode
.SH SYNOPSIS
.HP
.B int XkbKeyNumGroups
.BI "(\^XkbDescPtr " "xkb" "\^,"
.BI "KeyCode " "keycode" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- xkb
Xkb description of interest
.TP
.I \- keycode
keycode of interest
.SH DESCRIPTION
.LP
Da 
.I group_info 
field of a XkbSymMapRec be a encoded value containin tha number of crewz of 
symbols bound ta tha 
key as well as tha justification of tha treatment of out-of-range groups. Well shiiiit, it is 
legal fo' a key ta 
have zero groups, up in which case it also has zero symbols n' all events from 
that key yield NoSymbol. 
To obtain tha number of crewz of symbols bound ta tha key, use 
.I XkbKeyNumGroups. 
To chizzle tha number of crews bound ta a key, use 
.I XkbChangeTypesOfKey. 
To obtain a mask dat determines tha treatment of out-of-range groups, use
.I XkbKeyGroupInfo 
and 
.I XkbOutOfRangeGroupInfo.

Da keyboard controls contain a 
.I groups_wrap 
field specifyin tha handlin of illegal crews on a global basis. That is, when 
the user performs a 
action causin tha effectizzle crew ta go outta tha legal range, tha 
.I groups_wrap 
field specifies how tha fuck ta normalize tha effectizzle keyboard crew ta a crew dat is 
legal fo' tha 
keyboard as a whole yo, but there is no guarantee dat tha normalized crew is ghon be 
within tha range of 
legal crews fo' any individual key. Da per-key 
.I group_info 
field specifies how tha fuck a key treats a legal effectizzle crew if tha key do not 
have a type specified fo' 
the crew of concern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. For example, tha Enta key probably has just one crew 
defined. Y'all KNOW dat shit, muthafucka! If tha user 
performs a action causin tha global keyboard crew ta chizzle ta Group2, tha 
.I group_info 
field fo' tha Enta key raps bout how tha fuck ta handle dis thang.

Out-of-range crews fo' individual keys is mapped ta a legal crew rockin tha 
same options as is used 
for tha overall keyboard group. Da particular type of mappin used is 
controlled by tha bits set up in 
the 
.I group_info 
flag, as shown up in Table 1.
.bp
.TS
c s
l l
l l.
Table 1 group_info Range Normalization
_
Bits set up in group_info	Normalization method
_
XkbRedirectIntoRange	XkbRedirectIntoRange
XkbClampIntoRange	XkbClampIntoRange
none of tha above	XkbWrapIntoRange
.TE

.\"--- Chapta 10
Da Xkb extension is composed of two parts: a server extension, n' a 
client-side X library extension. I aint talkin' bout chicken n' gravy biatch. 
This chapta discusses functions used ta modify controls effectin tha behavior 
of tha server portion 
of tha Xkb extension. I aint talkin' bout chicken n' gravy biatch. X Library Controls discusses functions used ta modify 
controls dat affect only 
the behavior of tha client portion of tha extension; dem controls is known as 
Library Controls.

Xkb gotz nuff control features dat affect tha entire keyboard, known as global 
keyboard controls. Right back up in yo muthafuckin ass. Some 
of tha controls may be selectively enabled n' disabled; these controls is 
known as tha 
.I Boolean Controls. 
Boolean Controls can be turned on or off under program control n' can also be 
automatically set ta a 
on or off condizzle when a cold-ass lil client program exits, n' you can put dat on yo' toast. Da remainin controls, known 
as tha 
.I Non-Boolean Controls, 
are always active. Da XkbControlsRec structure raps bout tha current state of 
most of tha global 
controls n' tha attributes effectin tha behavior of each of these Xkb 
features. This chapta 
raps bout tha Xkb controls n' how tha fuck ta manipulate em.

There is two possible components fo' each of tha Boolean Controls: attributes 
describin how tha fuck tha 
control should work, n' a state describin whether tha behavior as a whole is 
enabled or disabled. Y'all KNOW dat shit, muthafucka! 
Da attributes n' state fo' most of these controls is held up in tha 
XkbControlsRec structure.

Yo ass can manipulate tha Xkb controls individually, via convenience functions, or 
as a whole. To treat 
them as a group, modify a XkbControlsRec structure ta describe all of tha 
changes ta be made, n' 
then pass dat structure n' appropriate flags ta a Xkb library function, or 
use a 
XkbControlsChangesRec ta reduce network traffic. When rockin a cold-ass lil convenience 
function ta manipulate one 
control individually, you do not use a XkbControlsRec structure directly.

Da Xkb controls is grouped as shown up in Table 2.

.TS
c s s 
l l l
lw(2i) l l.
Table 2 Xkb Keyboard Controls
_
Type of Control	Control Name	Boolean Control?
_
T{
Controls fo' enablin n' disablin other controls
T}	EnabledControls	No
	AutoReset	No
T{
Control fo' bell behavior
T}	AudibleBell	Boolean
T{
Controls fo' repeat key behavior
T}	PerKeyRepeat	No
	RepeatKeys	Boolean
	DetectableAutorepeat	Boolean
T{
Controls fo' keyboard overlays
T}	Overlay1	Boolean
	Overlay2	Boolean
T{
Controls fo' rockin tha mouse from tha keyboard
T}	MouseKeys	Boolean
	MouseKeysAccel	Boolean
T{
Controls fo' betta keyboard access by
T}	AccessXFeedback	Boolean
T{
physically impaired peeps
T}	AccessXKeys	Boolean
	AccessXTimeout	Boolean
	BounceKeys	Boolean
	SlowKeys	Boolean
	StickyKeys	Boolean
T{
Controls fo' general keyboard mapping
T}	GroupsWrap	No
	IgnoreGroupLock	Boolean
	IgnoreLockMods	No
	InternalMods	No
.TE	

Da individual categories n' controls is busted lyrics bout first, together wit 
functions fo' manipulatin 
them.
.SH STRUCTURES
.LP
Da KeySymMapRec structure is defined as bigs up:
.nf

    #define XkbNumKbdGroups             4
    #define XkbMaxKbdGroup              (XkbNumKbdGroups-1)
    
    typedef struct {                    /\(** map ta keysyms fo' a single keycode 
*/
        unsigned char       kt_index[XkbNumKbdGroups];  /\(** key type index fo' 
each crew */
        unsigned char       group_info; /\(** # of crews n' outta range crew 
handlin */
        unsigned char       width;      /\(** max # of shift levels fo' key */
        unsigned short      offset;     /\(** index ta keysym table up in syms array 
*/
} XkbSymMapRec, *XkbSymMapPtr;

.fi

.nf
Da XkbControlsRec structure is defined as bigs up:

    #define XkbMaxLegalKeyCode     255
    #define XkbPerKeyBitArraySize  ((XkbMaxLegalKeyCode+1)/8)
    
    
    typedef struct {
        unsigned char   mk_dflt_btn;      /\(** default button fo' keyboard driven 
mouse */
        unsigned char   num_groups;       /\(** number of keyboard crews */
        unsigned char   groups_wrap;      /\(** how tha fuck ta wrap out-of-boundz crews */
        XkbModsRec      internal;         /\(** defines server internal modifiers 
*/
        XkbModsRec      ignore_lock;      /\(** modifiers ta ignore when checkin 
for grab */
        unsigned int    enabled_ctrls;    /\(** 1 bit => correspondin boolean 
control enabled */
        unsigned short  repeat_delay;     /\(** ms delay until first repeat */
        unsigned short  repeat_interval;  /\(** ms delay between repeats */
        unsigned short  slow_keys_delay;  /\(** ms minimum time key must be down ta 
be aiiight */
        unsigned short  debounce_delay;   /\(** ms delay before key reactivated */
        unsigned short  mk_delay;         /\(** ms delay ta second mouse motion 
event */
        unsigned short  mk_interval;      /\(** ms delay between repeat mouse 
events */
        unsigned short  mk_time_to_max;   /\(** # intervals until constant mouse 
move */
        unsigned short  mk_max_speed;     /\(** multiplier fo' maximum mouse speed 
*/
        short           mk_curve;         /\(** determines mouse move curve type */
        unsigned short  ax_options;       /\(** 1 bit => Access X option enabled */
        unsigned short  ax_timeout;       /\(** secondz until Access X disabled */
        unsigned short  axt_opts_mask;    /\(** 1 bit => options ta reset on Access 
X timeout */
        unsigned short  axt_opts_values;  /\(** 1 bit => turn option on, 0=> off */
        unsigned int    axt_ctrls_mask;   /\(** which bits up in enabled_ctrls ta 
modify */
        unsigned int    axt_ctrls_values; /\(** joints fo' freshly smoked up bits up in 
enabled_ctrls */
        unsigned char   per_key_repeat[XkbPerKeyBitArraySize];  /\(** per key auto 
repeat */
     } XkbControlsRec, *XkbControlsPtr;
.fi

.nf
Da XkbControlsRec structure is defined as bigs up:

    #define XkbMaxLegalKeyCode     255
    #define XkbPerKeyBitArraySize  ((XkbMaxLegalKeyCode+1)/8)
    
    
    typedef struct {
        unsigned char   mk_dflt_btn;      /\(** default button fo' keyboard driven 
mouse */
        unsigned char   num_groups;       /\(** number of keyboard crews */
        unsigned char   groups_wrap;      /\(** how tha fuck ta wrap out-of-boundz crews */
        XkbModsRec      internal;         /\(** defines server internal modifiers 
*/
        XkbModsRec      ignore_lock;      /\(** modifiers ta ignore when checkin 
for grab */
        unsigned int    enabled_ctrls;    /\(** 1 bit => correspondin boolean 
control enabled */
        unsigned short  repeat_delay;     /\(** ms delay until first repeat */
        unsigned short  repeat_interval;  /\(** ms delay between repeats */
        unsigned short  slow_keys_delay;  /\(** ms minimum time key must be down ta 
be aiiight */
        unsigned short  debounce_delay;   /\(** ms delay before key reactivated */
        unsigned short  mk_delay;         /\(** ms delay ta second mouse motion 
event */
        unsigned short  mk_interval;      /\(** ms delay between repeat mouse 
events */
        unsigned short  mk_time_to_max;   /\(** # intervals until constant mouse 
move */
        unsigned short  mk_max_speed;     /\(** multiplier fo' maximum mouse speed 
*/
        short           mk_curve;         /\(** determines mouse move curve type */
        unsigned short  ax_options;       /\(** 1 bit => Access X option enabled */
        unsigned short  ax_timeout;       /\(** secondz until Access X disabled */
        unsigned short  axt_opts_mask;    /\(** 1 bit => options ta reset on Access 
X timeout */
        unsigned short  axt_opts_values;  /\(** 1 bit => turn option on, 0=> off */
        unsigned int    axt_ctrls_mask;   /\(** which bits up in enabled_ctrls ta 
modify */
        unsigned int    axt_ctrls_values; /\(** joints fo' freshly smoked up bits up in 
enabled_ctrls */
        unsigned char   per_key_repeat[XkbPerKeyBitArraySize];  /\(** per key auto 
repeat */
     } XkbControlsRec, *XkbControlsPtr;
.fi
.SH "SEE ALSO"
.BR XkbChangeTypesOfKey (3),
.BR XkbKeyGroupInfo (3),
.BR XkbOutOfRangeGroupInfo. (3)
