" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::multiset< _Key, _Compare, _Alloc > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef _Rep_type::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
_Key_alloc_type::const_pointa \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef 
.br
_Key_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef 
.br
\fB_Rep_type::const_reverse_iterator\fP \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Rep_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Rep_type::const_iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Compare \fBkey_compare\fP"
.br
.ti -1c
.RI "typedef _Key \fBkey_type\fP"
.br
.ti -1c
.RI "typedef _Key_alloc_type::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Key_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef 
.br
\fB_Rep_type::const_reverse_iterator\fP \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Rep_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Compare \fBvalue_compare\fP"
.br
.ti -1c
.RI "typedef _Key \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmultiset\fP ()"
.br
.ti -1c
.RI "\fBmultiset\fP (const _Compare &__comp, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBmultiset\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBmultiset\fP (_InputIterator __first, _InputIterator __last, const _Compare &__comp, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fBmultiset\fP (const \fBmultiset\fP &__x)"
.br
.ti -1c
.RI "\fBmultiset\fP (\fBmultiset\fP &&__x) noexcept(\fBis_nothrow_copy_constructible\fP< _Compare >::value)"
.br
.ti -1c
.RI "\fBmultiset\fP (\fBinitializer_list\fP< value_type > __l, const _Compare &__comp=_Compare(), const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "iterator \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "size_type \fBcount\fP (const key_type &__x) const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> iterator \fBemplace\fP (_Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> iterator \fBemplace_hint\fP (const_iterator __pos, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBend\fP () const noexcept"
.br
.ti -1c
.RI "_GLIBCXX_ABI_TAG_CXX11 iterator \fBerase\fP (const_iterator __position)"
.br
.ti -1c
.RI "size_type \fBerase\fP (const key_type &__x)"
.br
.ti -1c
.RI "_GLIBCXX_ABI_TAG_CXX11 iterator \fBerase\fP (const_iterator __first, const_iterator __last)"
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const value_type &__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (value_type &&__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const_iterator __position, const value_type &__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const_iterator __position, value_type &&__x)"
.br
.ti -1c
.RI "template<typename _InputIterator > void \fBinsert\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "key_compare \fBkey_comp\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "\fBmultiset\fP & \fBoperator=\fP (const \fBmultiset\fP &__x)"
.br
.ti -1c
.RI "\fBmultiset\fP & \fBoperator=\fP (\fBmultiset\fP &&__x)"
.br
.ti -1c
.RI "\fBmultiset\fP & \fBoperator=\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "size_type \fBsize\fP () const noexcept"
.br
.ti -1c
.RI "void \fBswap\fP (\fBmultiset\fP &__x)"
.br
.ti -1c
.RI "value_compare \fBvalue_comp\fP () const "
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "iterator \fBfind\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBfind\fP (const key_type &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "iterator \fBlower_bound\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBlower_bound\fP (const key_type &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "iterator \fBupper_bound\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBupper_bound\fP (const key_type &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBstd::pair\fP< iterator, iterator > \fBequal_range\fP (const key_type &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< const_iterator, 
.br
const_iterator > \fBequal_range\fP (const key_type &__x) const "
.br
.in -1c
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _K1 , typename _C1 , typename _A1 > bool \fBoperator<\fP (const \fBmultiset\fP< _K1, _C1, _A1 > &, const \fBmultiset\fP< _K1, _C1, _A1 > &)"
.br
.ti -1c
.RI "template<typename _K1 , typename _C1 , typename _A1 > bool \fBoperator==\fP (const \fBmultiset\fP< _K1, _C1, _A1 > &, const \fBmultiset\fP< _K1, _C1, _A1 > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>>class std::multiset< _Key, _Compare, _Alloc >"
A standard container made up of elements, which can be retrieved up in logarithmic time\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Key\fP Type of key objects\&. 
.br
\fI_Compare\fP Comparison function object type, defaults ta less<_Key>\&. 
.br
\fI_Alloc\fP Allocator type, defaults ta allocator<_Key>\&.
.RE
.PP
Meets tha requirementz of a \fCcontainer\fP, a \fCreversible container\fP, n' a \fCassociatizzle container\fP (usin equivalent keys)\&. For a \fCmultiset<Key>\fP tha key_type n' value_type is Key\&.
.PP
Multisets support bidirectionizzle iterators\&.
.PP
Da private tree data is declared exactly tha same way fo' set n' multiset; tha distinction is made entirely up in how tha fuck tha tree functions is called (*_unique versus *_equal, same as tha standard)\&. 
.PP
Definizzle at line 92 of file stl_multiset\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP ()\fC [inline]\fP"

.PP
Default constructor creates no elements\&. 
.PP
Definizzle at line 137 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (const _Compare &__comp, const allocator_type &__a = \fCallocator_type()\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Creates a multiset wit no elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__comp\fP Comparator ta use\&. 
.br
\fI__a\fP An allocator object\&. 
.RE
.PP

.PP
Definizzle at line 146 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
Buildz a multiset from a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&.
.RE
.PP
Smoke a multiset consistin of copiez of tha elements from [first,last)\&. This is linear up in N if tha range be already sorted, n' NlogN otherwise (where N is distance(__first,__last))\&. 
.PP
Definizzle at line 160 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (_InputIterator__first, _InputIterator__last, const _Compare &__comp, const allocator_type &__a = \fCallocator_type()\fP)\fC [inline]\fP"

.PP
Buildz a multiset from a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&. 
.br
\fI__comp\fP A comparison functor\&. 
.br
\fI__a\fP An allocator object\&.
.RE
.PP
Smoke a multiset consistin of copiez of tha elements from [__first,__last)\&. This is linear up in N if tha range be already sorted, n' NlogN otherwise (where N is distance(__first,__last))\&. 
.PP
Definizzle at line 176 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (const \fBmultiset\fP< _Key, _Compare, _Alloc > &__x)\fC [inline]\fP"

.PP
Multiset copy constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A multiset of identical element n' allocator types\&.
.RE
.PP
Da newly-created multiset uses a cold-ass lil copy of tha allocation object used by \fI__x\fP\&. 
.PP
Definizzle at line 189 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (\fBmultiset\fP< _Key, _Compare, _Alloc > &&__x)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Multiset move constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A multiset of identical element n' allocator types\&.
.RE
.PP
Da newly-created multiset gotz nuff tha exact contentz of \fI__x\fP\&. Da contentz of \fI__x\fP is a valid yo, but unspecified multiset\&. 
.PP
Definizzle at line 200 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (\fBinitializer_list\fP< value_type >__l, const _Compare &__comp = \fC_Compare()\fP, const allocator_type &__a = \fCallocator_type()\fP)\fC [inline]\fP"

.PP
Buildz a multiset from a initializer_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP An initializer_list\&. 
.br
\fI__comp\fP A comparison functor\&. 
.br
\fI__a\fP An allocator object\&.
.RE
.PP
Smoke a multiset consistin of copiez of tha elements from tha list\&. This is linear up in N if tha list be already sorted, n' NlogN otherwise (where N is \fI__l\&.size()\fP)\&. 
.PP
Definizzle at line 214 of file stl_multiset\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha multiset\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 295 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha multiset\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 332 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::cend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha multiset\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 341 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::clear ()\fC [inline]\fP, \fC [noexcept]\fP"
Erases all elements up in a multiset\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 616 of file stl_multiset\&.h\&.
.PP
Referenced by std::multiset< _Key, _Compare, _Alloc >::operator=()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::count (const key_type &__x) const\fC [inline]\fP"

.PP
Findz tha number of elements wit given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key of elements ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of elements wit specified key\&. 
.RE
.PP

.PP
Definizzle at line 627 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::crbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last element up in tha multiset\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 350 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::crend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last element up in tha multiset\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 359 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename\&.\&.\&. _Args> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::emplace (_Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Buildz n' bangs a element tha fuck into tha multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__args\fP Arguments used ta generate tha element instizzle ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha banged element\&.
.RE
.PP
This function bangs a element tha fuck into tha multiset\&. Contrary ta a std::set tha multiset do not rely on unique keys n' thus multiple copiez of tha same element can be inserted\&.
.PP
Insertion requires logarithmic time\&. 
.PP
Definizzle at line 409 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename\&.\&.\&. _Args> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::emplace_hint (const_iterator__pos, _Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Buildz n' bangs a element tha fuck into tha multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP An iterator dat serves as a hint as ta where tha element should be inserted\&. 
.br
\fI__args\fP Arguments used ta generate tha element instizzle ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha banged element\&.
.RE
.PP
This function bangs a element tha fuck into tha multiset\&. Contrary ta a std::set tha multiset do not rely on unique keys n' thus multiple copiez of tha same element can be inserted\&.
.PP
Note dat tha straight-up original gangsta parameta is only a hint n' can potentially improve tha performizzle of tha insertion process\& fo' realz. A wack hint would cause no gains up in efficiency\&.
.PP
See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html fo' mo' on \fIhinting\fP\&.
.PP
Insertion requires logarithmic time (if tha hint aint taken)\&. 
.PP
Definizzle at line 435 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> bool \fBstd::multiset\fP< _Key, _Compare, _Alloc >::empty () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns legit if tha set is empty\&. 
.PP
Definizzle at line 365 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::end () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha multiset\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 304 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::pair\fP<iterator, iterator> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::equal_range (const key_type &__x)\fC [inline]\fP"

.PP
Findz a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators dat possibly points ta tha subsequence matchin given key\&.
.RE
.PP
This function is equivalent ta 
.PP
.nf
std::make_pair(c\&.lower_bound(val),
               c\&.upper_bound(val))

.fi
.PP
 (but is fasta than makin tha calls separately)\&.
.PP
This function probably only make sense fo' multisets\&. 
.PP
Definizzle at line 707 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::pair\fP<const_iterator, const_iterator> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::equal_range (const key_type &__x) const\fC [inline]\fP"

.PP
Findz a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators dat possibly points ta tha subsequence matchin given key\&.
.RE
.PP
This function is equivalent ta 
.PP
.nf
std::make_pair(c\&.lower_bound(val),
               c\&.upper_bound(val))

.fi
.PP
 (but is fasta than makin tha calls separately)\&.
.PP
This function probably only make sense fo' multisets\&. 
.PP
Definizzle at line 711 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::erase (const_iterator__position)\fC [inline]\fP"

.PP
Erases a element from a multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP An iterator pointin ta tha element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha element immediately followin \fIposition\fP prior ta tha element bein erased\&. If no such element exists, end() is returned\&.
.RE
.PP
This function erases a element, pointed ta by tha given iterator, from a multiset\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 537 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::erase (const key_type &__x)\fC [inline]\fP"

.PP
Erases elements accordin ta tha provided key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key of element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Da number of elements erased\&.
.RE
.PP
This function erases all elements located by tha given key from a multiset\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 567 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::erase (const_iterator__first, const_iterator__last)\fC [inline]\fP"

.PP
Erases a [first,last) range of elements from a multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator pointin ta tha start of tha range ta be erased\&. 
.br
\fI__last\fP Iterator pointin ta tha end of tha range ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Da iterator \fIlast\fP\&.
.RE
.PP
This function erases a sequence of elements from a multiset\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 589 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::find (const key_type &__x)\fC [inline]\fP"

.PP
Tries ta locate a element up in a set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta sought-afta element, or end() if not found\&.
.RE
.PP
This function takes a key n' tries ta locate tha element wit which tha key matches\&. If successful tha function returns a iterator pointin ta tha sought afta element\&. If unsuccessful it returns tha past-the-end ( \fCend()\fP ) iterator\&. 
.PP
Definizzle at line 645 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> const_iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::find (const key_type &__x) const\fC [inline]\fP"

.PP
Tries ta locate a element up in a set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta sought-afta element, or end() if not found\&.
.RE
.PP
This function takes a key n' tries ta locate tha element wit which tha key matches\&. If successful tha function returns a iterator pointin ta tha sought afta element\&. If unsuccessful it returns tha past-the-end ( \fCend()\fP ) iterator\&. 
.PP
Definizzle at line 649 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> allocator_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::get_allocator () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha memory allocation object\&. 
.PP
Definizzle at line 286 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (const value_type &__x)\fC [inline]\fP"

.PP
Inserts a element tha fuck into tha multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha banged element\&.
.RE
.PP
This function bangs a element tha fuck into tha multiset\&. Contrary ta a std::set tha multiset do not rely on unique keys n' thus multiple copiez of tha same element can be inserted\&.
.PP
Insertion requires logarithmic time\&. 
.PP
Definizzle at line 454 of file stl_multiset\&.h\&.
.PP
Referenced by std::multiset< _Key, _Compare, _Alloc >::insert(), n' std::multiset< _Key, _Compare, _Alloc >::operator=()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (const_iterator__position, const value_type &__x)\fC [inline]\fP"

.PP
Inserts a element tha fuck into tha multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP An iterator dat serves as a hint as ta where tha element should be inserted\&. 
.br
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha banged element\&.
.RE
.PP
This function bangs a element tha fuck into tha multiset\&. Contrary ta a std::set tha multiset do not rely on unique keys n' thus multiple copiez of tha same element can be inserted\&.
.PP
Note dat tha straight-up original gangsta parameta is only a hint n' can potentially improve tha performizzle of tha insertion process\& fo' realz. A wack hint would cause no gains up in efficiency\&.
.PP
See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html fo' mo' on \fIhinting\fP\&.
.PP
Insertion requires logarithmic time (if tha hint aint taken)\&. 
.PP
Definizzle at line 484 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
A template function dat tries ta bang a range of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator pointin ta tha start of tha range ta be inserted\&. 
.br
\fI__last\fP Iterator pointin ta tha end of tha range\&.
.RE
.PP
Complexitizzle similar ta dat of tha range constructor\&. 
.PP
Definizzle at line 503 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (\fBinitializer_list\fP< value_type >__l)\fC [inline]\fP"

.PP
Attempts ta bang a list of elements tha fuck into tha multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP A std::initializer_list<value_type> of elements ta be inserted\&.
.RE
.PP
Complexitizzle similar ta dat of tha range constructor\&. 
.PP
Definizzle at line 515 of file stl_multiset\&.h\&.
.PP
References std::multiset< _Key, _Compare, _Alloc >::insert()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> key_compare \fBstd::multiset\fP< _Key, _Compare, _Alloc >::key_comp () const\fC [inline]\fP"

.PP
Returns tha comparison object\&. 
.PP
Definizzle at line 278 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::lower_bound (const key_type &__x)\fC [inline]\fP"

.PP
Findz tha beginnin of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta first element equal ta or pimped outa than key, or end()\&.
.RE
.PP
This function returns tha straight-up original gangsta element of a subsequence of elements dat matches tha given key\&. If unsuccessful it returns a iterator pointin ta tha straight-up original gangsta element dat has a pimped outa value than given key or end() if no such element exists\&. 
.PP
Definizzle at line 666 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> const_iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::lower_bound (const key_type &__x) const\fC [inline]\fP"

.PP
Findz tha beginnin of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta first element equal ta or pimped outa than key, or end()\&.
.RE
.PP
This function returns tha straight-up original gangsta element of a subsequence of elements dat matches tha given key\&. If unsuccessful it returns a iterator pointin ta tha straight-up original gangsta element dat has a pimped outa value than given key or end() if no such element exists\&. 
.PP
Definizzle at line 670 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha maximum size of tha set\&. 
.PP
Definizzle at line 375 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBmultiset\fP& \fBstd::multiset\fP< _Key, _Compare, _Alloc >::operator= (const \fBmultiset\fP< _Key, _Compare, _Alloc > &__x)\fC [inline]\fP"

.PP
Multiset assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A multiset of identical element n' allocator types\&.
.RE
.PP
All tha elementz of \fI__x\fP is copied yo, but unlike tha copy constructor, tha allocator object aint copied\&. 
.PP
Definizzle at line 229 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBmultiset\fP& \fBstd::multiset\fP< _Key, _Compare, _Alloc >::operator= (\fBmultiset\fP< _Key, _Compare, _Alloc > &&__x)\fC [inline]\fP"

.PP
Multiset move assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A multiset of identical element n' allocator types\&.
.RE
.PP
Da contentz of \fI__x\fP is moved tha fuck into dis multiset (without copying)\&. \fI__x\fP be a valid yo, but unspecified multiset\&. 
.PP
Definizzle at line 245 of file stl_multiset\&.h\&.
.PP
References std::multiset< _Key, _Compare, _Alloc >::clear(), n' std::multiset< _Key, _Compare, _Alloc >::swap()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBmultiset\fP& \fBstd::multiset\fP< _Key, _Compare, _Alloc >::operator= (\fBinitializer_list\fP< value_type >__l)\fC [inline]\fP"

.PP
Multiset list assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP An initializer_list\&.
.RE
.PP
This function fills a multiset wit copiez of tha elements up in tha initializer list \fI__l\fP\&.
.PP
Note dat tha assignment straight-up chizzlez tha multiset n' dat tha resultin multisetz size is tha same ol' dirty as tha number of elements assigned\&. Oldskool data may be lost\&. 
.PP
Definizzle at line 266 of file stl_multiset\&.h\&.
.PP
References std::multiset< _Key, _Compare, _Alloc >::clear(), n' std::multiset< _Key, _Compare, _Alloc >::insert()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::rbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last element up in tha multiset\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 313 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::rend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last element up in tha multiset\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 322 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha size of tha set\&. 
.PP
Definizzle at line 370 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::swap (\fBmultiset\fP< _Key, _Compare, _Alloc > &__x)\fC [inline]\fP"

.PP
Swaps data wit another multiset\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A multiset of tha same element n' allocator types\&.
.RE
.PP
This exchanges tha elements between two multisets up in constant time\&. (It be only swappin a pointer, a integer, n' a instizzle of tha \fCCompare\fP type (which itself is often stateless n' empty), so it should be like fast\&.) Note dat tha global std::swap() function is specialized such dat std::swap(s1,s2) will feed ta dis function\&. 
.PP
Definizzle at line 390 of file stl_multiset\&.h\&.
.PP
Referenced by std::multiset< _Key, _Compare, _Alloc >::operator=(), n' std::swap()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::upper_bound (const key_type &__x)\fC [inline]\fP"

.PP
Findz tha end of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta tha straight-up original gangsta element pimped outa than key, or end()\&. 
.RE
.PP

.PP
Definizzle at line 682 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> const_iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::upper_bound (const key_type &__x) const\fC [inline]\fP"

.PP
Findz tha end of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta tha straight-up original gangsta element pimped outa than key, or end()\&. 
.RE
.PP

.PP
Definizzle at line 686 of file stl_multiset\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> value_compare \fBstd::multiset\fP< _Key, _Compare, _Alloc >::value_comp () const\fC [inline]\fP"

.PP
Returns tha comparison object\&. 
.PP
Definizzle at line 282 of file stl_multiset\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
