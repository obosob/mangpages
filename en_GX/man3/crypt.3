.\" Mike Haardt (michael@cantor.informatik.rwth.aachen.de)
.\"     Sat Sep  3 22:00:30 MET DST 1994
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Sun Feb 19 21:32:25 1995, faith@cs.unc.edu edited details away
.\"
.\" TO DO: This manual page should go mo' tha fuck into detail how tha fuck DES is perturbed,
.\" which strang is ghon be encrypted, n' what tha fuck determines tha repetizzle factor.
.\" Is a simple repetizzle rockin ECB used, or suttin' mo' advanced?  I hope
.\" tha presented explanations is at least betta than not a god damn thang yo, but by no
.\" means enough.
.\"
.\" added _XOPEN_SOURCE, aeb, 970705
.\" added GNU MD5 stuff, aeb, 011223
.\"
.TH CRYPT 3 2013-06-21 "" "Linux Programmerz Manual"
.SH NAME
crypt, crypt_r \- password n' data encryption
.SH SYNOPSIS
.nf
.BR "#define _XOPEN_SOURCE" "       /* See feature_test_macros(7) */"
.br
.B #include <unistd.h>
.sp
.BI "char *crypt(const char *" key ", const char *" salt );
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <crypt.h>
.sp
.BI "char *crypt_r(const char *" key ", const char *" salt ,
.BI "              struct crypt_data *" data );
.fi
.sp
Link wit \fI\-lcrypt\fP.
.SH DESCRIPTION
.BR crypt ()
is tha password encryption function.
It be based on tha Data Encryption
Standard algorithm wit variations intended (among other thangs) to
discourage use of hardware implementationz of a key search.
.PP
.I key
is a userz typed password.
.PP
.I salt
is a two-characta strang chosen from tha set
[\fBa\fP\(en\fBzA\fP\(en\fBZ0\fP\(en\fB9./\fP].
This strang is used to
perturb tha algorithm up in one of 4096 different ways.
.PP
By takin tha lowest 7 bitz of each of tha straight-up original gangsta eight charactaz of the
.IR key ,
a 56-bit key is obtained.
This 56-bit key is used ta encrypt repeatedly a
constant strang (usually a strang consistin of all zeros).
Da returned
value points ta tha encrypted password, a seriez of 13 printable ASCII
charactas (the first two charactas represent tha salt itself).
Da return value points ta static data whose content is
overwritten by each call.
.PP
Warning: Da key space consists of
.if t 2\s-2\u56\s0\d
.if n 2**56
equal 7.2e16 possible joints.
Exhaustizzle searchez of dis key space are
possible rockin massively parallel computers.
Software, such as
.BR crack (1),
is available which will search tha portion of dis key space dat is
generally used by humans fo' passwords.
Hence, password selection should,
at minimum, avoid common lyrics n' names.
Da use of a
.BR passwd (1)
program dat checks fo' crackable passwordz durin tha selection process is
recommended.
.PP
Da DES algorithm itself has all dem quirks which make tha use of the
.BR crypt ()
interface a straight-up skanky chizzle fo' anythang other than password
authentication.
If yo ass is plannin on rockin the
.BR crypt ()
interface fo' a cold-ass lil cryptography project, don't do it: git a phat book on
encryption n' one of tha widely available DES libraries.

.BR crypt_r ()
is a reentrant version of
.BR crypt ().
Da structure pointed ta by
.I data
is used ta store result data n' bookkeepin shiznit.
Other than allocatin it,
the only thang dat tha calla should do wit dis structure is ta set
.I data->initialized
to zero before tha straight-up original gangsta call to
.BR crypt_r ().
.SH RETURN VALUE
On success, a pointa ta tha encrypted password is returned.
On error, NULL is returned.
.SH ERRORS
.TP
.B ENOSYS
The
.BR crypt ()
function was not implemented, probably cuz of U.S.A. export restrictions.
.\" This level of detail aint necessary up in dis playa page. . .
.\" .PP
.\" When encryptin a plain text P rockin DES wit tha key K thangs up in dis biatch up in the
.\" encrypted text C, then tha complementary plain text P' bein encrypted
.\" rockin tha complementary key K' will result up in tha complementary encrypted
.\" text C'.
.\" .PP
.\" Weak keys is keys which stay invariant under tha DES key transformation.
.\" Da four known weak keys 0101010101010101, fefefefefefefefe,
.\" 1f1f1f1f0e0e0e0e n' e0e0e0e0f1f1f1f1 must be avoided.
.\" .PP
.\" There is six known half weak key pairs, which keys lead ta tha same
.\" encrypted data.  Keys which is part of such key clustas should be
.\" avoided.
.\" Sorry, I could not smoke up what tha fuck they are.
.\""
.\" .PP
.\" Heavily redundant data causes shiznit wit DES encryption, when used up in the
.\" .I codebook
.\" mode that
.\" .BR crypt ()
.\" implements, n' you can put dat on yo' toast.  The
.\" .BR crypt ()
.\" intercourse should be used only fo' its intended purpose of password
.\" verification, n' should not be used as part of a thugged-out data encryption tool.
.\" .PP
.\" Da first n' last three output bitz of tha fourth S-box can be
.\" represented as function of they input bits, n' you can put dat on yo' toast.  Empiric studies have
.\" shown dat S-boxes partially compute tha same output fo' similar input.
.\" It be suspected dat dis may contain a funky-ass back door which could allow the
.\" NSA ta decrypt DES encrypted data.
.\" .PP
.\" Makin encrypted data computed rockin crypt() publicly available has
.\" ta be considered insecure fo' tha given reasons.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR crypt ()
function aint thread-safe.
.LP
The
.BR crypt_r ()
function is thread-safe.
.SH CONFORMING TO
.BR crypt ():
SVr4, 4.3BSD, POSIX.1-2001.
.BR crypt_r ()
is a GNU extension.
.SH NOTES
.SS Glibc notes
Da glibc2 version of dis function supports additional
encryption algorithms.

If
.I salt
is a cold-ass lil characta strang startin wit tha charactas "$\fIid\fP$"
followed by a strang terminated by "$":
.RS

$\fIid\fP$\fIsalt\fP$\fIencrypted\fP

.RE
then instead of rockin tha DES machine,
.I id
identifies tha encryption method used n' dis then determines how tha fuck tha rest
of tha password strang is interpreted.
Da followin joints of
.I id
are supported:
.RS
.TS
l l.
ID  | Method
_
1   | MD5
2a  | Blowfish (not up in mainline glibc; added up in some
    | Linux distributions)
.\" openSUSE has Blowfish yo, but AFAICS, dis option aint supported
.\" natively by glibc -- mtk, Jul 08
.\"
.\" md5 | Sun MD5
.\" glibc don't step tha fuck up ta natively support Sun MD5; I don't give a fuck
.\" if any distros add tha support.
5   | SHA-256 (since glibc 2.7)
6   | SHA-512 (since glibc 2.7)
.TE
.RE

So $5$\fIsalt\fP$\fIencrypted\fP be a SHA-256 encoded
password n' $6$\fIsalt\fP$\fIencrypted\fP be an
SHA-512 encoded one.

"\fIsalt\fP" standz fo' tha up ta 16 characters
followin "$\fIid\fP$" up in tha salt.
Da encrypted part of tha password strang is tha actual computed password.
Da size of dis strang is fixed:
.TS
l l.
MD5     | 22 characters
SHA-256 | 43 characters
SHA-512 | 86 characters
.TE

Da charactas up in "\fIsalt\fP" n' "\fIencrypted\fP" is drawn from tha set
[\fBa\fP\(en\fBzA\fP\(en\fBZ0\fP\(en\fB9./\fP].
In tha MD5 n' SHA implementations tha entire
.I key
is dope (instead of only tha first
8 bytes up in DES).
.SH SEE ALSO
.BR login (1),
.BR passwd (1),
.BR encrypt (3),
.BR getpass (3),
.BR passwd (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
