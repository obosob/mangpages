.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "User::Identity::Archive::Plain 3"
.TH User::Identity::Archive::Plain 3 "2009-12-24" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
User::Identity::Archive::Plain \- simple, plain text archiver
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& User::Identity::Archive::Plain
\&   be a User::Identity::Archive
\&   be a User::Identity::Item
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use User::Identity::Archive::Plain;
\& mah $friendz = User::Identity::Archive::Plain\->new(\*(Aqfriends\*(Aq);
\& $friends\->from(\e*FH);
\& $friends\->from(\*(Aq.friends\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This archiver, which extendz User::Identity::Archive, uses a hella
simple plain text file ta store tha shiznit of users.  Da syntax
is busted lyrics bout up in tha \s-1DETAILS\s0 section, below.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
User::Identity::Archive::Plain\->\fBnew\fR([\s-1NAME\s0], \s-1OPTIONS\s0)
.Sp
.Vb 8
\& Option       \-\-Defined up in     \-\-Default
\& abbreviations                   []
\& description    User::Identity::Item  undef
\& from           User::Identity::Archive  undef
\& name           User::Identity::Item  <required>
\& only                            []
\& parent         User::Identity::Item  undef
\& tabstop                         8
.Ve
.Sp
.RS 4
\&. abbreviations => HASH|ARRAY
.Sp
.RS 4
Addz a set of abbreviations fo' collections ta tha syntax of the
plain text archiver n' shit.  See section \*(L"Simplified class names\*(R" for
a list of predefined names.
.RE
.RE
.RS 4
.Sp
\&. description => \s-1STRING\s0
.Sp
\&. from => FILEHANDLE|FILENAME
.Sp
\&. name => \s-1STRING\s0
.Sp
\&. only => ARRAY|ABBREV
.Sp
.RS 4
Lists tha only shiznit (as (list of) abbreviations) which should be
read. Y'all KNOW dat shit, muthafucka!  Other shiznit is removed before even checkin whether it is
a valid abbreviation or not.
.RE
.RE
.RS 4
.Sp
\&. parent => \s-1OBJECT\s0
.Sp
\&. tabstop => \s-1INTEGER\s0
.Sp
.RS 4
Sets tha default tab-stop width.
.RE
.RE
.RS 4
.RE
.SS "Attributes"
.IX Subsection "Attributes"
\&\f(CW$obj\fR\->\fBabbreviation\fR(\s-1NAME,\s0 [\s-1CLASS\s0])
.Sp
.RS 4
Returns tha class which is capable of storin shiznit which is
grouped as \s-1NAME. \s0 With \s-1CLASS\s0 argument, you add (or overrule) the
definitionz of a abbreviation. I aint talkin' bout chicken n' gravy biatch.  Da \s-1CLASS\s0 be automatically loaded.
.Sp
If \s-1CLASS\s0 is \f(CW\*(C`undef\*(C'\fR, then tha abbreviation is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da class
name which is deleted is returned.
.RE
.PP
\&\f(CW$obj\fR\->\fBabbreviations\fR
.Sp
.RS 4
Returns a sorted list of all names which is known as abbreviations.
.RE
.PP
\&\f(CW$obj\fR\->\fBdefaultTabStop\fR([\s-1INTEGER\s0])
.Sp
.RS 4
Returns tha width of a tab, optionally afta settin dat shit.  This must be
the same as set up in yo' editor.
.RE
.PP
\&\f(CW$obj\fR\->\fBdescription\fR
.Sp
.RS 4
See \*(L"Attributes\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBname\fR([\s-1NEWNAME\s0])
.Sp
.RS 4
See \*(L"Attributes\*(R" up in User::Identity::Item
.RE
.SS "Collections"
.IX Subsection "Collections"
\&\f(CW$obj\fR\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBcollection\fR(\s-1NAME\s0)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBfind\fR(\s-1COLLECTION, ROLE\s0)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBparent\fR([\s-1PARENT\s0])
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBremoveCollection\fR(OBJECT|NAME)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBtype\fR
.PP
User::Identity::Archive::Plain\->\fBtype\fR
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBuser\fR
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.SS "Access ta tha archive"
.IX Subsection "Access ta tha archive"
\&\f(CW$obj\fR\->\fBfrom\fR(FILEHANDLE|FILENAME|ARRAY, \s-1OPTIONS\s0)
.Sp
.RS 4
Read tha plain text shiznit from tha specified \s-1FILEHANDLE, FILENAME,
STRING,\s0 or \s-1ARRAY\s0 of lines.
.Sp
.Vb 3
\& Option \-\-Default
\& tabstop  <default from object>
\& verbose  0
.Ve
.Sp
\&. tabstop => \s-1INTEGER\s0
.Sp
\&. verbose => \s-1INTEGER\s0
.RE
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Da Plain Archiver Format"
.IX Subsection "Da Plain Archiver Format"
\fISimplified class names\fR
.IX Subsection "Simplified class names"
.PP
It be too much work ta specify full class named on each spot where you
wanna create a freshly smoked up object wit data.  Therefore, abbreviations are
introduced. Y'all KNOW dat shit, muthafucka!  Use new(abbreviations) or \fIabbreviations()\fR ta add extra
abbreviations or ta overrule some predefined.
.PP
Predefined names:
  user         User::Identity
  email        Mail::Identity
  location     User::Identity::Location
  system       User::Identity::System
  list         User::Identity::Collection::Emails
.PP
It would done been sickr ta refer ta a \fIperson\fR up in stead of a \fIuser\fR,
however dat would add ta tha mad drama wit tha name-space.
.PP
\fIIndentation say all\fR
.IX Subsection "Indentation say all"
.PP
Da syntax be as simple as possible fo' realz. An extra indentation on a line
means dat tha variable or class be a cold-ass lil collection within tha class on
the line before.
.PP
.Vb 8
\& user markov
\&   location home
\&      ghetto NL
\&   email home
\&      address  mark@overmeer.net
\&      location home
\&   email work
\&      address  solutions@overmeer.bet
\&
\& email tux
\&    address tux@fish.net
.Ve
.PP
Da above defines two items: one User::Identitizzle named \f(CW\*(C`markov\*(C'\fR, and
an e\-mail address \f(CW\*(C`tux\*(C'\fR.  Da user has two collections: one gotz nuff
a single location, n' one stores two e\-mail addresses.
.PP
To add ta tha mad drama: tha \f(CW\*(C`location\*(C'\fR is defined as field up in \f(CW\*(C`email\*(C'\fR
and as collection. I aint talkin' bout chicken n' gravy biatch.  Da difference is easily detected: if there are
indented fieldz followin tha line it aint nuthin but a cold-ass lil collection. I aint talkin' bout chicken n' gravy biatch.  Mistakes will
in most cases result up in a error message.
.PP
\fILong lines\fR
.IX Subsection "Long lines"
.PP
If you wanna continue on tha next line, cuz yo' content is too
large, then add a funky-ass backslash ta tha end, like this:
.PP
.Vb 5
\& email home
\&    description This is mah home address,     \e
\&                But I sometimes use dis fo' \e
\&                work as well
\&    address tux@fish.aq
.Ve
.PP
Continuations do not play tha game of indentation, so what tha fuck you also
can do is:
.PP
.Vb 6
\& email home
\&    description               \e
\& This is mah home address,     \e
\& But I sometimes use dis fo' \e
\& work as well
\&    address tux@fish.aq
.Ve
.PP
Da fieldz \f(CW\*(C`comment\*(C'\fR n' \f(CW\*(C`address\*(C'\fR must be erectly indented.
Da line terminations is lost, which is useful fo' most fields.  However,
if you need them, you gotta check tha description of tha applicable field.
.PP
\fIComments\fR
.IX Subsection "Comments"
.PP
Yo ass may add comments n' white spaces.  Comments start wit a \f(CW\*(Aq#\*(Aq\fR as
first non-blank characta on tha line.  Comments is \fBnot allowed\fR on
the same line as real data, as some languages (like Perl) permit.
.PP
Yo ass can bang comments n' blank lines on all places where you need
them:
.PP
.Vb 1
\& user markov
\&
\&    # mah home address
\&    email home
\&
\&       # useless comment statement
\&       address tux@fish.aq
\&       location #mind_the_hash
.Ve
.PP
is equivalent to:
.PP
.Vb 4
\& user markov
\&    email home
\&       address tux@fish.aq
\&       location #mind_the_hash
.Ve
.PP
\fIReferences\fR
.IX Subsection "References"
.PP
Often you gonna git tha need ta add tha same shiznit ta two items,
for instance, multiple playas share tha same address.  In dis case,
you can create a reference.  But fuck dat shiznit yo, tha word on tha street is dat dis is only permitted for
whole items: you can refer ta one of mah thugss location yo, but not ta tha person's
street.
.PP
To create a reference ta a item of one of mah thugs, use
.PP
.Vb 4
\& user markov
\&    location home = user(cleo).location(home)
\&    location work
\&       organization   MARKOV Solutions
.Ve
.PP
\fIConfiguration parameters\fR
.IX Subsection "Configuration parameters"
.PP
Yo ass can add some configuration lines as well.  On tha moment, tha only
one defined is
.PP
.Vb 1
\& tabstop = 4
.Ve
.PP
which can be used ta chizzle tha meanin of tabs up in tha file.  Da default
settin is 8 yo, but some playas prefer 4 (or other joints).
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Error: \f(CW$object\fR aint a cold-ass lil collection.
.Sp
.RS 4
Da first argument be a object yo, but not of a cold-ass lil class which extends
User::Identity::Collection.
.RE
.PP
Error: Cannot load collection module fo' \f(CW$type\fR ($class).
.Sp
.RS 4
Either tha specified \f(CW$type\fR do not exist, or dat module named \f(CW$class\fR returns
compilation errors.  If tha type as specified up in tha warnin is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot tha 'require' tha package which defines tha nickname.
.RE
.PP
Warning: Cannot read archive from \f(CW$source\fR
.PP
Error: Creation of a cold-ass lil collection via \f(CW$class\fR failed.
.Sp
.RS 4
Da \f(CW$class\fR did compile yo, but dat shiznit was not possible ta create a object
of dat class rockin tha options you specified.
.RE
.PP
Error: Don't know what tha fuck type of collection you wanna add.
.Sp
.RS 4
If you add a cold-ass lil collection, it must either by a cold-ass lil collection object or a
list of options which can be used ta create a cold-ass lil collection object.  In
the latta case, tha type of collection must be specified.
.RE
.PP
Warning: No collection \f(CW$name\fR
.Sp
.RS 4
Da collection wit \f(CW$name\fR do not exist n' can not be pimped.
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of User-Identitizzle distribution version 0.93,
built on December 24, 2009. Website: \fIhttp://perl.overmeer.net/userid/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2003,2004,2007\-2009 by Mark Overmeer <perl@overmeer.net>. For other contributors peep Chizzles.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
