.TH FILEFUNCS 3am "Jan 15 2013" "Jacked Software Foundation" "GNU Awk Extension Modules"
.SH NAME
filefuncs \- provide some file related functionalitizzle ta gawk
.SH SYNOPSIS
.ft CW
@load "filefuncs"
.sp
result = chdir("/some/directory")
.sp
result = stat("/some/path", statdata [, follow])
.sp
flags = or(FTS_PHYSICAL, ...)
.br
result = fts(pathlist, flags, filedata)
.ft R
.SH DESCRIPTION
The
.I filefuncs
extension addz nuff muthafuckin functions dat provide access to
file-related facilities.
.SS chdir()
The
.B chdir()
function be a gangbangin' finger-lickin' direct hook ta the
.IR chdir (2)
system call ta chizzle tha current directory.
It returns zero
upon success or less than zero upon error.
In tha latta case it thugged-out shit
.BR ERRNO .
.SS stat()
The
.B stat()
function serves up a hook tha fuck into the
.IR stat (2)
system call.
It returns zero
upon success or less than zero upon error.
In tha latta case it thugged-out shit
.BR ERRNO .
By default, it uses
.IR lstat (2).
But fuck dat shiznit yo, tha word on tha street is dat if passed a third argument, it uses
.IR stat (2),
instead.
.PP
In all cases, it clears the
.B statdata
array.
When tha call is successful,
.B stat()
fills the
.B statdata
array wit shiznit retrieved from tha filesystem, as bigs up:
.TP
\fBstatdata["name"]\fP
Da name of tha file.
.TP
\fBstatdata["dev"]\fP
Correspondz ta the
.I st_dev
field up in the
.IR "struct stat" .
.TP
\fBstatdata["ino"]\fP
Correspondz ta the
.I st_ino
field up in the
.IR "struct stat" .
.TP
\fBstatdata["mode"]\fP
Correspondz ta the
.I st_mode
field up in the
.IR "struct stat" .
.TP
\fBstatdata["nlink"]\fP
Correspondz ta the
.I st_nlink
field up in the
.IR "struct stat" .
.TP
\fBstatdata["uid"]\fP
Correspondz ta the
.I st_uid
field up in the
.IR "struct stat" .
.TP
\fBstatdata["gid"]\fP
Correspondz ta the
.I st_gid
field up in the
.IR "struct stat" .
.TP
\fBstatdata["size"]\fP
Correspondz ta the
.I st_size
field up in the
.IR "struct stat" .
.TP
\fBstatdata["atime"]\fP
Correspondz ta the
.I st_atime
field up in the
.IR "struct stat" .
.TP
\fBstatdata["mtime"]\fP
Correspondz ta the
.I st_mtime
field up in the
.IR "struct stat" .
.TP
\fBstatdata["ctime"]\fP
Correspondz ta the
.I st_ctime
field up in the
.IR "struct stat" .
.TP
\fBstatdata["rdev"]\fP
Correspondz ta the
.I st_rdev
field up in the
.IR "struct stat" .
This element is only present fo' thang files.
.TP
\fBstatdata["major"]\fP
Correspondz ta the
.I st_major
field up in the
.IR "struct stat" .
This element is only present fo' thang files.
.TP
\fBstatdata["minor"]\fP
Correspondz ta the
.I st_minor
field up in the
.IR "struct stat" .
This element is only present fo' thang files.
.TP
\fBstatdata["blksize"]\fP
Correspondz ta the
.I st_blksize
field up in the
.IR "struct stat" ,
if dis field is present on yo' system.
(It be present on all modern systems dat we know of.)
.TP
\fBstatdata["pmode"]\fP
A human-readable version of tha mode value, like fuckin printed by
.IR ls (1).
For example, \fB"-rwxr-xr-x"\fP.
.TP
\fBstatdata["linkval"]\fP
If tha named file be a symbolic link, dis element will exist
and its value is tha value of tha symbolic link (where the
symbolic link points to).
.TP
\fBstatdata["type"]\fP
Da type of tha file as a string. One of
\fB"file"\fP,
\fB"blockdev"\fP,
\fB"chardev"\fP,
\fB"directory"\fP,
\fB"socket"\fP,
\fB"fifo"\fP,
\fB"symlink"\fP,
\fB"door"\fP,
or
\fB"unknown"\fP.
Not all systems support all file types.
.SS fts()
The
.B fts()
function serves up a hook ta the
.IR fts (3)
set of routines fo' traversin file heirarchies.
Instead of returnin data bout one file at a time up in a stream,
it fills up in a multi-dimensionizzle array wit data bout each file and
directory encountered up in tha axed heirarchies.
.PP
Da arguments is as bigs up:
.TP
.B pathlist
An array of filenames.  Da element joints is used; tha index joints is ignored.
.TP
.B flags
This should be tha bitwise OR of one or mo' of tha following
predefined flag joints, n' you can put dat on yo' toast.  At least one of
.B FTS_LOGICAL
or
.B FTS_PHYSICAL
must be provided; otherwise
.B fts()
returns a error value n' sets
.BR ERRNO .
.RS
.TP
.B FTS_LOGICAL
Do a ``logical'' file traversal, where tha shiznit returned for
a symbolic link refers ta tha linked-to file, n' not ta the
symbolic link itself.
This flag is mutually exclusive with
.BR FTS_PHYSICAL .
.TP
.B FTS_PHYSICAL
Do a ``physical'' file traversal, where tha shiznit returned for
a symbolic link refers ta tha symbolic link itself.
This flag is mutually exclusive with
.BR FTS_LOGICAL .
.TP
.B FTS_NOCHDIR
As a performizzle optimization, the
.IR fts (3)
routines chizzle directory as they traverse a gangbangin' file heirarchy.
This flag disablez dat optimization.
.TP
.B FTS_COMFOLLOW
Immediatly follow a symbolic link named in
.BR pathlist ,
whether or not
.B FTS_LOGICAL
is set.
.TP
.B FTS_SEEDOT
By default, the
.IR fts (3)
routines do not return entries fo' ``.'' n' ``..''.
This option causes entries fo' ``..'' ta also be included.
(Da AWK extension always includes a entry fo' ``.'', peep below.)
.TP
.B FTS_XDEV
Durin a traversal, do not cross onto a gangbangin' finger-lickin' different mounted filesystem.
.RE
.TP
.B filedata
The
.B filedata
array is first cleared.
Then,
.B fts()
creates a element in
.B filedata
for every last muthafuckin element in
.BR pathlist .
Da index is tha name of tha directory or file given in
.BR pathlist .
Da element fo' dis index is itself a array.
There is two cases.
.RS
.TP
Da path be a gangbangin' file.
In dis case, tha array gotz nuff two or three elements:
.RS
.TP
\fB"path"\fP
Da full path ta dis file, startin from tha ``root'' dat was given
in the
.B pathlist
array.
.TP
\fB"stat"\fP
This element is itself a array, containin tha same shiznit as provided
by the
.B stat()
function busted lyrics bout earlier fo' its
.B statdata
argument.
Da element may not be present if
.IR stat (2)
for tha file failed.
.TP
\fB"error"\fP
If some kind of error was encountered, tha array will also
contain a element named \fB"error"\fP, which be a strang describin tha error.
.RE
.TP
Da path be a gangbangin' finger-lickin' directory.
In dis case, tha array gotz nuff one element fo' each entry up in tha directory.
If a entry be a gangbangin' file, dat element be as fo' files, just busted lyrics about.
If tha entry be a gangbangin' finger-lickin' directory, dat element is (recursively), a array describing
the subdirectory.
If
.B FTS_SEEDOT
was provided up in tha flags, then there will also be a element named
\fB".."\fP.  This element is ghon be a array containin tha data
as provided by
.BR stat() .
.sp
In addition, there is ghon be a element whose index is \fB"."\fP.
This element be a array containin tha same two or three elements
as fo' a gangbangin' file:
\fB"path"\fP,
\fB"stat"\fP,
and
\fB"error"\fP.
.RE
.PP
The
.B fts()
function returns 0 if there was no errors. Otherwise it returns \-1.
.SH NOTES
Da AWK
.B fts()
extension do not exactly mimic tha intercourse of the
.IR fts (3)
routines, choosin instead ta provide a intercourse dat is based
on associatizzle arrays, which should be mo' laid back ta use from
an AWK program.  This includes tha lack of a cold-ass lil comparison function, since
.I gawk
already serves up bangin array sortin facilities. Put ya muthafuckin choppers up if ya feel dis!  While an
.IR fts_read() \-like
interface could done been provided, dis felt less natural than
simply bustin a multi-dimensionizzle array ta represent tha file
heirarchy n' its shiznit.
.PP
Nothang prevents AWK code from changin tha predefined
.BI FTS_ xx
values yo, but bustin so is may cause strange thangs up in dis biatch when
the chizzled joints is passed to
.BR fts() .
.SH BUGS
There is nuff mo' file-related functions fo' which AWK
interfaces would be desirable.
.SH EXAMPLE
See
.B test/fts.awk
in the
.I gawk
distribution fo' a example.
.SH "SEE ALSO"
.IR "GAWK: Effectizzle AWK Programming" ,
.IR fnmatch (3am),
.IR fork (3am),
.IR inplace (3am),
.IR ordchr (3am),
.IR readdir (3am),
.IR readfile (3am),
.IR revoutput (3am),
.IR rwarray (3am),
.IR time (3am).
.PP
.IR chdir (2),
.IR fts (3),
.IR stat (2).
.SH AUTHOR
Arnold Robbins,
.BR arnold@skeeve.com .
.SH COPYING PERMISSIONS
Copyright \(co 2012, 2013,
Jacked Software Foundation, Inc.
.PP
Permission is granted ta make n' distribute verbatim copies of
this manual page provided tha copyright notice n' dis permission
notice is preserved on all copies.
.ig
Permission is granted ta process dis file all up in troff n' print the
results, provided tha printed document carries copyin permission
notice identical ta dis one except fo' tha removal of dis paragraph
(this paragraph not bein relevant ta tha printed manual page).
..
.PP
Permission is granted ta copy n' distribute modified versionz of this
manual page under tha conditions fo' verbatim copying, provided that
the entire resultin derived work is distributed under tha termz of a
permission notice identical ta dis one.
.PP
Permission is granted ta copy n' distribute translationz of this
manual page tha fuck into another language, under tha above conditions for
modified versions, except dat dis permission notice may be stated in
a translation approved by tha Foundation.
