'\" t
.\"     Title: glMultiDrawElementsIndirect
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLMULTIDRAWELEMENTSI" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glMultiDrawElementsIndirect \- render indexed primitives from array data, takin parametas from memory
.SH "C SPECIFICATION"
.HP \w'void\ glMultiDrawElementsIndirect('u
.BI "void glMultiDrawElementsIndirect(GLenum\ " "mode" ", GLenum\ " "type" ", const\ void\ *" "indirect" ", GLsizei\ " "drawcount" ", GLsizei\ " "stride" ");"
.SH "PARAMETERS"
.PP
\fImode\fR
.RS 4
Specifies what tha fuck kind of primitives ta render\&. Right back up in yo muthafuckin ass. Symbolic constants
\fBGL_POINTS\fR,
\fBGL_LINE_STRIP\fR,
\fBGL_LINE_LOOP\fR,
\fBGL_LINES\fR,
\fBGL_LINE_STRIP_ADJACENCY\fR,
\fBGL_LINES_ADJACENCY\fR,
\fBGL_TRIANGLE_STRIP\fR,
\fBGL_TRIANGLE_FAN\fR,
\fBGL_TRIANGLES\fR,
\fBGL_TRIANGLE_STRIP_ADJACENCY\fR,
\fBGL_TRIANGLES_ADJACENCY\fR, and
\fBGL_PATCHES\fR
are accepted\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies tha type of data up in tha buffer bound ta the
\fBGL_ELEMENT_ARRAY_BUFFER\fR
binding\&.
.RE
.PP
\fIindirect\fR
.RS 4
Specifies tha address of a structure containin a array of draw parameters\&.
.RE
.PP
\fIdrawcount\fR
.RS 4
Specifies tha number of elements up in tha array addressed by
\fIindirect\fR\&.
.RE
.PP
\fIstride\fR
.RS 4
Specifies tha distizzle up in basic machine units between elementz of tha draw parameta array\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglMultiDrawElementsIndirect\fR
specifies multiple indexed geometric primitives wit straight-up few subroutine calls\&.
\fBglMultiDrawElementsIndirect\fR
behaves similarly ta a multitude of calls to
\fBglDrawElementsInstancedBaseVertexBaseInstance\fR(), execpt dat tha parametas to
\fBglDrawElementsInstancedBaseVertexBaseInstance\fR()
are stored up in a array up in memory all up in tha address given by
\fIindirect\fR, separated by tha stride, up in basic machine units, specified by
\fIstride\fR\&. If
\fIstride\fR
is zero, then tha array be assumed ta be tightly packed up in memory\&.
.PP
Da parametas addressed by
\fIindirect\fR
are packed tha fuck into a structure dat takes tha form (in C):
.sp
.if n \{\
.RS 4
.\}
.nf
    typedef  struct {
        uint  count;
        uint  primCount;
        uint  firstIndex;
        uint  baseVertex;
        uint  baseInstance;
    } DrawElementsIndirectCommand;
.fi
.if n \{\
.RE
.\}
.PP
A single call to
\fBglMultiDrawElementsIndirect\fR
is equivalent, assumin no errors is generated to:
.sp
.if n \{\
.RS 4
.\}
.nf
    GLsizei n;
    fo' (n = 0; n < drawcount; n++)
    {
        const DrawElementsIndirectCommand  *cmd;
        if (stride != 0)
        {
            cmd = (const DrawElementsIndirectCommand  *)((uintptr)indirect + n * stride);
        }
        else
        {
            cmd = (const DrawElementsIndirectCommand  *)indirect + n;
        }

        glDrawElementsInstancedBaseVertexBaseInstance(mode,
                                                      cmd\->count,
                                                      type,
                                                      cmd\->firstIndex + size\-of\-type,
                                                      cmd\->primCount,
                                                      cmd\->baseVertex,
                                                      cmd\->baseInstance);
    }
.fi
.if n \{\
.RE
.\}
.PP
If a funky-ass buffer is bound ta the
\fBGL_DRAW_INDIRECT_BUFFER\fR
bindin all up in tha time of a cold-ass lil call to
\fBglDrawElementsIndirect\fR,
\fIindirect\fR
is interpreted as a offset, up in basic machine units, tha fuck into dat buffer n' tha parameta data is read from tha buffer rather than from client memory\&.
.PP
Note dat indices stored up in client memory is not supported\&. If no buffer is bound ta the
\fBGL_ELEMENT_ARRAY_BUFFER\fR
binding, a error is ghon be generated\&.
.PP
Da thangs up in dis biatch of tha operation is undefined if the
reservedMustBeZero
gangmember of tha parameta structure is non\-zero\&. But fuck dat shiznit yo, tha word on tha street is dat no error is generated up in dis case\&.
.PP
Vertex attributes dat is modified by
\fBglDrawElementsIndirect\fR
have a unspecified value after
\fBglDrawElementsIndirect\fR
returns\& fo' realz. Attributes dat aren\*(Aqt modified remain well defined\&.
.SH "NOTES"
.PP
The
\fIbaseInstance\fR
gangmember of the
\fIDrawElementsIndirectCommand\fR
structure is defined only if tha GL version is 4\&.2 or pimped outer\&. For versionz of tha GL less than 4\&.2, dis parameta is present but is reserved n' should be set ta zero\&. On earlier versionz of tha GL, behavior is undefined if it is non\-zero\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fImode\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIstride\fR
is not a multiple of four\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIdrawcount\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if no buffer is bound ta the
\fBGL_ELEMENT_ARRAY_BUFFER\fR
binding, or if such a funky-ass buffer\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta a enabled array or ta the
\fBGL_DRAW_INDIRECT_BUFFER\fR
bindin n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a geometry shader be actizzle and
\fImode\fR
is incompatible wit tha input primitizzle type of tha geometry shader up in tha currently installed program object\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fImode\fR
is
\fBGL_PATCHES\fR
and no tessellation control shader be active\&.
.SH "SEE ALSO"
.PP
\fBglDrawArrays\fR(),
\fBglDrawArraysInstanced\fR(),
\fBglDrawArraysIndirect\fR(),
\fBglDrawElements\fR(),
\fBglDrawRangeElements\fR(),
\fBglDrawElementsIndirect\fR(),
\fBglMultiDrawArraysIndirect\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2010\-2012 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
