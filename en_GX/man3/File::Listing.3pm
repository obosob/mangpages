.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Listin 3"
.TH File::Listin 3 "2012-02-15" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Listin \- parse directory listing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& use File::Listin qw(parse_dir);
\& $ENV{LANG} = "C";  # dates up in non\-Gangsta localez not supported
\& fo' (parse_dir(\`ls \-l\`)) {
\&     ($name, $type, $size, $mtime, $mode) = @$_;
\&     next if $type ne \*(Aqf\*(Aq; # plain file
\&     #...
\& }
\&
\& # directory listin can also be read from a gangbangin' file
\& open(LISTING, "zcat ls\-lR.gz|");
\& $dir = parse_dir(\e*LISTING, \*(Aq+0000\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module exports a single function called \fIparse_dir()\fR, which can be
used ta parse directory listings.
.PP
Da first parameta ta \fIparse_dir()\fR is tha directory listin ta parse.
It can be a scalar, a reference ta a array of directory lines or a
glob representin a gangbangin' filehandle ta read tha directory listin from.
.PP
Da second parameta is tha time unit ta use when parsin time stamps
in tha listing. If dis value is undefined, then tha local time unit is
assumed.
.PP
Da third parameta is tha type of listin ta assume.  Currently
supported formats is 'unix', 'apache' n' 'dosftp'.  Da default
value is 'unix'.  Ideally, tha listin type should be determined
automatically.
.PP
Da fourth parameta specifies how tha fuck unparseable lines should be treated.
Values can be 'ignore', 'warn' or a cold-ass lil code reference.  Warn means that
the perl \fIwarn()\fR function is ghon be called. Y'all KNOW dat shit, muthafucka!  If a cold-ass lil code reference is
passed, then dis routine is ghon be called n' tha return value from it
will be incorporated up in tha listing.  Da default is 'ignore'.
.PP
Only tha straight-up original gangsta parameta is mandatory.
.PP
Da return value from \fIparse_dir()\fR be a list of directory entries. Put ya muthafuckin choppers up if ya feel dis!  In
a scalar context tha return value be a reference ta tha list.  The
directory entries is represented by a array consistin of [
\&\f(CW$filename\fR, \f(CW$filetype\fR, \f(CW$filesize\fR, \f(CW$filetime\fR, \f(CW$filemode\fR ].  The
\&\f(CW$filetype\fR value is one of tha lettas 'f', 'd', 'l' or '?'.  The
\&\f(CW$filetime\fR value is tha secondz since Jan 1, 1970.  The
\&\f(CW$filemode\fR be a funky-ass bitmask like tha mode returned by \fIstat()\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2010, Gisle Aas
.PP
Based on lsparse.pl (from Lee McLoughlinz ftp mirror package) and
Net::FTPz parse_dir (Graham Barr).
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
