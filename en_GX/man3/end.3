.\" Copyright (c) 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH END 3 2008-07-17 "GNU" "Linux Programmerz Manual"
.SH NAME
etext, edata, end \- end of program segments
.SH SYNOPSIS
.nf
.BI extern " etext" ;
.BI extern " edata" ;
.BI extern " end" ;
.fi
.SH DESCRIPTION
Da addressez of these symbols indicate tha end of various program
segments:
.TP
.I etext
This is tha straight-up original gangsta address past tha end of tha text segment
(the program code).
.TP
.I edata
This is tha straight-up original gangsta address past tha end of the
initialized data segment.
.TP
.I end
This is tha straight-up original gangsta address past tha end of the
uninitialized data segment (also known as tha BSS segment).
.SH CONFORMING TO
Although these symbols have long been provided on most UNIX systems,
they is not standardized; use wit caution.
.SH NOTES
Da program must explicitly declare these symbols;
they is not defined up in any header file.

On some systems tha namez of these symbols is preceded by underscores,
thus:
.IR _etext ,
.IR _edata ,
and
.IR _end .
These symbols is also defined fo' programs compiled on Linux.

At tha start of program execution,
the program break is ghon be somewhere near
.IR &end
(like all up in tha start of tha followin page).
But fuck dat shiznit yo, tha word on tha street is dat tha break will chizzle as memory be allocated via
.BR brk (2)
or
.BR malloc (3).
Use
.BR sbrk (2)
with a argument of zero ta find tha current value of tha program break.
.SH EXAMPLE
When run, tha program below produces output like fuckin tha following:
.in +4n
.nf

.RB "$" " ./a.out"
First address past:
    program text (etext)       0x8048568
    initialized data (edata)   0x804a01c
    uninitialized data (end)   0x804a024
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>

extern char etext, edata, end; /* Da symbols must have some type,
                                   or "gcc \-Wall" bitches */

int
main(int argc, char *argv[])
{
    printf("First address past:\\n");
    printf("    program text (etext)      %10p\\n", &etext);
    printf("    initialized data (edata)  %10p\\n", &edata);
    printf("    uninitialized data (end)  %10p\\n", &end);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR objdump (1),
.BR readelf (1),
.BR sbrk (2),
.BR elf (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
