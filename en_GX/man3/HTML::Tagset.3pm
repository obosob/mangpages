.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tagset 3"
.TH Tagset 3 "2008-03-01" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Tagset \- data tablez useful up in parsin HTML
.SH "VERSION"
.IX Header "VERSION"
Version 3.20
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use HTML::Tagset;
\&  # Then use any of tha shit up in tha HTML::Tagset package
\&  #  as need arises
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module gotz nuff nuff muthafuckin data tablez useful up in various kindz of
\&\s-1HTML\s0 parsin operations.
.PP
Note dat all tag names used is lowercase.
.PP
In tha followin documentation, a \*(L"hashset\*(R" be a hash bein used as a
set \*(-- tha hash conveys dat its keys is there, n' tha actual joints
associated wit tha keys is not significant.  (But what tha fuck joints are
there, is always true.)
.SH "VARIABLES"
.IX Header "VARIABLES"
Note dat none of these variablez is exported.
.ie n .SS "hashset %HTML::Tagset::emptyElement"
.el .SS "hashset \f(CW%HTML::Tagset::emptyElement\fP"
.IX Subsection "hashset %HTML::Tagset::emptyElement"
This hashset has as joints tha tag-names (GIs) of elements dat cannot
have content.  (For example, \*(L"base\*(R", \*(L"br\*(R", \*(L"hr\*(R".)  So
\&\f(CW$HTML::Tagset::emptyElement{\*(Aqhr\*(Aq}\fR exists n' is true.
\&\f(CW$HTML::Tagset::emptyElement{\*(Aqdl\*(Aq}\fR do not exist, n' so aint true.
.ie n .SS "hashset %HTML::Tagset::optionalEndTag"
.el .SS "hashset \f(CW%HTML::Tagset::optionalEndTag\fP"
.IX Subsection "hashset %HTML::Tagset::optionalEndTag"
This hashset lists tag-names fo' elements dat can have content yo, but whose
end-tags is generally, \*(L"safely\*(R", omissible.  Example:
\&\f(CW$HTML::Tagset::emptyElement{\*(Aqli\*(Aq}\fR exists n' is true.
.ie n .SS "hash %HTML::Tagset::linkElements"
.el .SS "hash \f(CW%HTML::Tagset::linkElements\fP"
.IX Subsection "hash %HTML::Tagset::linkElements"
Values up in dis hash is tagnames fo' elements dat might contain
links, n' tha value fo' each be a reference ta a array of tha names
of attributes whose joints can be links.
.ie n .SS "hash %HTML::Tagset::boolean_attr"
.el .SS "hash \f(CW%HTML::Tagset::boolean_attr\fP"
.IX Subsection "hash %HTML::Tagset::boolean_attr"
This hash (not hashset) lists what tha fuck attributez of what tha fuck elements can be
printed without showin tha value (for example, tha \*(L"noshade\*(R" attribute
of \*(L"hr\*(R" elements).  For elements wit only one such attribute, its value
is simply dat attribute name.  For elements wit nuff such attributes,
the value be a reference ta a hashset containin all such attributes.
.ie n .SS "hashset %HTML::Tagset::isPhraseMarkup"
.el .SS "hashset \f(CW%HTML::Tagset::isPhraseMarkup\fP"
.IX Subsection "hashset %HTML::Tagset::isPhraseMarkup"
This hashset gotz nuff all phrasal-level elements.
.ie n .SS "hashset %HTML::Tagset::is_Possible_Strict_P_Content"
.el .SS "hashset \f(CW%HTML::Tagset::is_Possible_Strict_P_Content\fP"
.IX Subsection "hashset %HTML::Tagset::is_Possible_Strict_P_Content"
This hashset gotz nuff all phrasal-level elements dat be content of a
P element, fo' a strict model of \s-1HTML.\s0
.ie n .SS "hashset %HTML::Tagset::isHeadElement"
.el .SS "hashset \f(CW%HTML::Tagset::isHeadElement\fP"
.IX Subsection "hashset %HTML::Tagset::isHeadElement"
This hashset gotz nuff all elements dat elements dat should be
present only up in tha 'head' element of a \s-1HTML\s0 document.
.ie n .SS "hashset %HTML::Tagset::isList"
.el .SS "hashset \f(CW%HTML::Tagset::isList\fP"
.IX Subsection "hashset %HTML::Tagset::isList"
This hashset gotz nuff all elements dat can contain \*(L"li\*(R" elements.
.ie n .SS "hashset %HTML::Tagset::isTableElement"
.el .SS "hashset \f(CW%HTML::Tagset::isTableElement\fP"
.IX Subsection "hashset %HTML::Tagset::isTableElement"
This hashset gotz nuff all elements dat is ta be found only in/under
a \*(L"table\*(R" element.
.ie n .SS "hashset %HTML::Tagset::isFormElement"
.el .SS "hashset \f(CW%HTML::Tagset::isFormElement\fP"
.IX Subsection "hashset %HTML::Tagset::isFormElement"
This hashset gotz nuff all elements dat is ta be found only in/under
a \*(L"form\*(R" element.
.ie n .SS "hashset %HTML::Tagset::isBodyMarkup"
.el .SS "hashset \f(CW%HTML::Tagset::isBodyMarkup\fP"
.IX Subsection "hashset %HTML::Tagset::isBodyMarkup"
This hashset gotz nuff all elements dat is ta be found only in/under
the \*(L"body\*(R" element of a \s-1HTML\s0 document.
.ie n .SS "hashset %HTML::Tagset::isHeadOrBodyElement"
.el .SS "hashset \f(CW%HTML::Tagset::isHeadOrBodyElement\fP"
.IX Subsection "hashset %HTML::Tagset::isHeadOrBodyElement"
This hashset includes all elements dat I notice can fall either in
the head or up in tha body.
.ie n .SS "hashset %HTML::Tagset::isKnown"
.el .SS "hashset \f(CW%HTML::Tagset::isKnown\fP"
.IX Subsection "hashset %HTML::Tagset::isKnown"
This hashset lists all known \s-1HTML\s0 elements.
.ie n .SS "hashset %HTML::Tagset::canTighten"
.el .SS "hashset \f(CW%HTML::Tagset::canTighten\fP"
.IX Subsection "hashset %HTML::Tagset::canTighten"
This hashset lists elements dat might have ignorable whitespace as
lil pimps or siblings.
.ie n .SS "array @HTML::Tagset::p_closure_barriers"
.el .SS "array \f(CW@HTML::Tagset::p_closure_barriers\fP"
.IX Subsection "array @HTML::Tagset::p_closure_barriers"
This array has a meanin dat I have only peeped a need fo' in
\&\f(CW\*(C`HTML::TreeBuilder\*(C'\fR yo, but I include it here on tha off chizzle dat one of mah thugs
might find it of use:
.PP
When we peep a \*(L"<p>\*(R" token, we go lookup up tha lineage fo' a p
element we might gotta minimize.  At first sight, we might say that
if there be a a p anywhere up in tha lineage of dis freshly smoked up p, it should be
closed. Y'all KNOW dat shit, muthafucka!  But thatz wrong.  Consider dis document:
.PP
.Vb 10
\&  <html>
\&    <head>
\&      <title>foo</title>
\&    </head>
\&    <body>
\&      <p>foo
\&        <table>
\&          <tr>
\&            <td>
\&               foo
\&               <p>bar
\&            </td>
\&          </tr>
\&        </table>
\&      </p>
\&    </body>
\&  </html>
.Ve
.PP
Da second p is like legally inside a much higher p.
.PP
My fuckin formalization of tha reason why dis is legal yo, but this:
.PP
.Vb 1
\&  <p>foo<p>bar</p></p>
.Ve
.PP
aint, is dat suttin' bout tha table constitutes a \*(L"barrier\*(R" to
the application of tha rule bout what tha fuck p must minimize.
.PP
So \f(CW@HTML::Tagset::p_closure_barriers\fR is tha list of all such
barrier-tags.
.ie n .SS "hashset %isCDATA_Parent"
.el .SS "hashset \f(CW%isCDATA_Parent\fP"
.IX Subsection "hashset %isCDATA_Parent"
This hashset includes all elements whose content is \s-1CDATA.\s0
.SH "CAVEATS"
.IX Header "CAVEATS"
Yo ass may find it useful ta alta tha behavior of modulez (like
\&\f(CW\*(C`HTML::Element\*(C'\fR or \f(CW\*(C`HTML::TreeBuilder\*(C'\fR) dat use \f(CW\*(C`HTML::Tagset\*(C'\fR's
data tablez by alterin tha data tablez theyselves.  Yo ass is welcome
to try yo, but be careful; n' be aware dat different modulez may or may
react differently ta tha data tablez bein chizzled.
.PP
Note dat it may be inappropriate ta use these tablez fo' \fIproducing\fR
\&\s-1HTML\s0 \*(-- fo' example, \f(CW%isHeadOrBodyElement\fR lists tha tagnames
for all elements dat can step tha fuck up either up in tha head or up in tha body,
like fuckin \*(L"script\*(R".  That don't mean dat I be sayin yo' code that
produces \s-1HTML\s0 should feel free ta put script elements up in either place!
If yo ass is producin programs dat spit up \s-1HTML,\s0 you should be
\&\fIintimately\fR familiar wit tha DTDs fo' \s-1HTML\s0 or \s-1XHTML \s0(available at
\&\f(CW\*(C`http://www.w3.org/\*(C'\fR), n' you should slavishly obey them, not
the data tablez up in dis document.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Element, HTML::TreeBuilder, HTML::LinkExtor
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 1995\-2000 Gisle Aas.
.PP
Copyright 2000\-2005 Shizzle M. Burke.
.PP
Copyright 2005\-2008 Andy Lester.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Most of tha code/data up in dis module was adapted from code written
by Gisle Aas fo' \f(CW\*(C`HTML::Element\*(C'\fR, \f(CW\*(C`HTML::TreeBuilder\*(C'\fR, and
\&\f(CW\*(C`HTML::LinkExtor\*(C'\fR.  Then dat shiznit was maintained by Shizzle M. Burke.
.SH "AUTHOR"
.IX Header "AUTHOR"
Current maintainer: Andy Lester, \f(CW\*(C`<andy at petdance.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-html\-tagset at rt.cpan.org\*(C'\fR, or all up in tha wizzy intercourse at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTML\-Tagset>.  I will
be notified, n' then you gonna automatically be notified of progress on
your bug as I make chizzles.
