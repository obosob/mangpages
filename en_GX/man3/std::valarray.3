" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::valarray< _Tp > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvalarray\fP ()"
.br
.ti -1c
.RI "\fBvalarray\fP (size_t)"
.br
.ti -1c
.RI "\fBvalarray\fP (const _Tp &, size_t)"
.br
.ti -1c
.RI "\fBvalarray\fP (const _Tp *__restrict__, size_t)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBvalarray\fP &)"
.br
.ti -1c
.RI "\fBvalarray\fP (\fBvalarray\fP &&) noexcept"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBslice_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBgslice_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBmask_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBindirect_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (\fBinitializer_list\fP< _Tp >)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP (const _Expr< _Dom, _Tp > &__e)"
.br
.ti -1c
.RI "template<typename _Tp> \fBvalarray\fP (const _Tp *__restrict__ __p, size_t __n)"
.br
.ti -1c
.RI "_Expr< _ValFunClos< _ValArray, 
.br
_Tp >, _Tp > \fBapply\fP (_Tp func(_Tp)) const "
.br
.ti -1c
.RI "_Expr< _RefFunClos< _ValArray, 
.br
_Tp >, _Tp > \fBapply\fP (_Tp func(const _Tp &)) const "
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > \fBcshift\fP (int __n) const "
.br
.ti -1c
.RI "_Tp \fBmax\fP () const "
.br
.ti -1c
.RI "_Tp \fBmin\fP () const "
.br
.ti -1c
.RI "_UnaryOp< __logical_not >::_Rt \fBoperator!\fP () const "
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator%=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator%=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator%=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator&=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator&=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator&=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator*=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator*=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator*=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "_UnaryOp< __unary_plus >::_Rt \fBoperator+\fP () const "
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator+=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator+=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator+=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "_UnaryOp< __negate >::_Rt \fBoperator-\fP () const "
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator-=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator-=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator-=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator/=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator/=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator/=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator<<=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator<<=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator<<=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBvalarray\fP< _Tp > &__v)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (\fBvalarray\fP< _Tp > &&__v) noexcept"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const _Tp &__t)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBslice_array\fP< _Tp > &__sa)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBgslice_array\fP< _Tp > &__ga)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBmask_array\fP< _Tp > &__ma)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBindirect_array\fP< _Tp > &__ia)"
.br
.ti -1c
.RI "\fBvalarray\fP & \fBoperator=\fP (\fBinitializer_list\fP< _Tp > __l)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator>>=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator>>=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator>>=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "_Tp & \fBoperator[]\fP (size_t __i)"
.br
.ti -1c
.RI "const _Tp & \fBoperator[]\fP (size_t) const "
.br
.ti -1c
.RI "_Expr< _SClos< _ValArray, _Tp >
.br
, _Tp > \fBoperator[]\fP (\fBslice\fP __s) const "
.br
.ti -1c
.RI "\fBslice_array\fP< _Tp > \fBoperator[]\fP (\fBslice\fP __s)"
.br
.ti -1c
.RI "_Expr< _GClos< _ValArray, _Tp >
.br
, _Tp > \fBoperator[]\fP (const \fBgslice\fP &__s) const "
.br
.ti -1c
.RI "\fBgslice_array\fP< _Tp > \fBoperator[]\fP (const \fBgslice\fP &__s)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > \fBoperator[]\fP (const \fBvalarray\fP< bool > &__m) const "
.br
.ti -1c
.RI "\fBmask_array\fP< _Tp > \fBoperator[]\fP (const \fBvalarray\fP< bool > &__m)"
.br
.ti -1c
.RI "_Expr< _IClos< _ValArray, _Tp >
.br
, _Tp > \fBoperator[]\fP (const \fBvalarray\fP< size_t > &__i) const "
.br
.ti -1c
.RI "\fBindirect_array\fP< _Tp > \fBoperator[]\fP (const \fBvalarray\fP< size_t > &__i)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator^=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator^=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator^=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator|=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator|=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator|=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "_UnaryOp< __bitwise_not >::_Rt \fBoperator~\fP () const "
.br
.ti -1c
.RI "void \fBresize\fP (size_t __size, _Tp __c=_Tp())"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > \fBshift\fP (int __n) const "
.br
.ti -1c
.RI "size_t \fBsize\fP () const "
.br
.ti -1c
.RI "_Tp \fBsum\fP () const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBvalarray\fP< _Tp > &__v) noexcept"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB_Array< _Tp >\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _Tp>class std::valarray< _Tp >"
Smart array designed ta support numeric processing\&. 

A valarray be a array dat serves up constraints intended ta allow fo' effectizzle optimization of numeric array processin by reducin tha aliasin dat can result from pointa representations\&. Well shiiiit, it represents a one-dimensionizzle array from which different multidimensionizzle subsets can be accessed n' modified\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Tp\fP Type of object up in tha array\&. 
.RE
.PP

.PP
Definizzle at line 78 of file valarray\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class _Tp> \fBstd::valarray\fP< _Tp >::\fBvalarray\fP (const _Tp *__restrict__, size_t)"

.PP
Construct a array initialized ta tha straight-up original gangsta \fIn\fP elementz of \fIt\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
