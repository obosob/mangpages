.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::IMAP4 3"
.TH Mail::Box::IMAP4 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::IMAP4 \- handle IMAP4 foldaz as client
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::IMAP4
\&   be a Mail::Box::Net
\&   be a Mail::Box
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::IMAP4;
\& mah $folda = Mail::Box::IMAP4\->new(folda => $ENV{MAIL}, ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Maintain a gangbangin' folda which has its lyrics stored on a remote server n' shit.  The
communication between tha client application n' tha server is implemented
usin tha \s-1IMAP4\s0 protocol.  See also Mail::Server::IMAP4.
.PP
This class uses Mail::Transport::IMAP4 ta hide tha transhiznit of
information, n' focusses solely on tha erect handlin of lyrics
within a \s-1IMAP4\s0 folda n' shit.  Mo' than one \s-1IMAP4\s0 folda can be handled by
one single \s-1IMAP4\s0 connection.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.ie n .IP "overload: \fB""""\fR()" 4
.el .IP "overload: \fB``''\fR()" 4
.IX Item "overload: """"()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fB@{}\fR()" 4
.IX Item "overload: @{}()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fBcmp\fR()" 4
.IX Item "overload: cmp()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::IMAP4\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::IMAP4->new(OPTIONS)"
Da \f(CW\*(C`new\*(C'\fR can have nuff \s-1OPTIONS. \s0 Not only tha ones listed here below,
but also all tha \s-1OPTIONS\s0 fo' \fIMail::Transport::IMAP4::new()\fR can be
passed.
.Sp
Da default dependz on tha value of new(cache_head).
.Sp
Without folda name, no folda is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Only few methodz are
available now, fo' instizzle \fIlistSubFolders()\fR ta git tha top-level
folda names.  Usually, tha folda named \f(CW\*(C`INBOX\*(C'\fR is ghon be present.
.Sp
.Vb 10
\& \-Option           \-\-Defined up in     \-\-Default
\&  access             Mail::Box        \*(Aqr\*(Aq
\&  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
\&  body_type          Mail::Box        Mail::Message::Body::Lines
\&  cache_body                          NO
\&  cache_head                          NO or DELAY
\&  cache_labels                        NO or DELAY
\&  coerce_options     Mail::Box        []
\&  create             Mail::Box        <false>
\&  extract            Mail::Box        10240
\&  field_type         Mail::Box        undef
\&  fix_headaz        Mail::Box        <false>
\&  folda             Mail::Box        /
\&  folderdir          Mail::Box        <not used>
\&  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
\&  head_type          Mail::Box        Mail::Box::IMAP4::Head or Mail::Message::Head::Complete
\&  join_connection                     true
\&  keep_dups          Mail::Box        <false>
\&  lock_file          Mail::Box        undef
\&  lock_timeout       Mail::Box        1 hour
\&  lock_type          Mail::Box        \*(AqNONE\*(Aq
\&  lock_wait          Mail::Box        10 seconds
\&  locker             Mail::Box        undef
\&  log                Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  manager            Mail::Box        undef
\&  message_type       Mail::Box        Mail::Box::IMAP4::Message
\&  multipart_type     Mail::Box        Mail::Message::Body::Multipart
\&  password           Mail::Box::Net   undef
\&  remove_when_empty  Mail::Box        <false>
\&  save_on_exit       Mail::Box        <true>
\&  server_name        Mail::Box::Net   undef
\&  server_port        Mail::Box::Net   143
\&  trace              Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  transporta                         Mail::Transport::IMAP4
\&  trusted            Mail::Box        <false>
\&  username           Mail::Box::Net   undef
.Ve
.RS 4
.IP "access => \s-1MODE\s0" 2
.IX Item "access => MODE"
.PD 0
.IP "body_delayed_type => \s-1CLASS\s0" 2
.IX Item "body_delayed_type => CLASS"
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "cache_body => '\s-1NO\s0'|'\s-1YES\s0'|'\s-1DELAY\s0'" 2
.IX Item "cache_body => 'NO'|'YES'|'DELAY'"
.PD
Body objects is immutable yo, but may still cached or not.  In common
case, tha body of a message be axed via \fIMail::Message::body()\fR
or \fIMail::Message::decoded()\fR.  This returns a handle ta a funky-ass body object.
Yo ass may decizzle wether dat body object can be reused or not.  \f(CW\*(C`NO\*(C'\fR
means: retreive tha data each time again, \f(CW\*(C`YES\*(C'\fR will cache tha body data,
\&\f(CW\*(C`DELAY\*(C'\fR will bust tha whole message when tha folda is closed.
.Sp
.Vb 4
\&        [local cache]  [write]
\& NO         no           no
\& YES        yeaaaa          no
\& DELAY      yeaaaa          yes
.Ve
.IP "cache_head => '\s-1NO\s0'|'\s-1PARTIAL\s0'|'\s-1DELAY\s0'" 2
.IX Item "cache_head => 'NO'|'PARTIAL'|'DELAY'"
For a read-only folder, \f(CW\*(C`DELAY\*(C'\fR is tha default, otherwise \f(CW\*(C`NO\*(C'\fR is
chosen. I aint talkin' bout chicken n' gravy biatch.  Da four configuration parameta have subtile consequences.
To start wit a table:
.Sp
.Vb 4
\&        [local cache]  [write]  [default head_type]
\& NO         no           no     Mail::Box::IMAP4::Head
\& PARTIAL    yeaaaa          no     Mail::Box::IMAP4::Head
\& DELAY      yeaaaa          yeaaaa    Mail::Message::Head::Complete
.Ve
.Sp
Da default \f(CW\*(C`head_type\*(C'\fR is Mail::Box::IMAP4::Head, the
default \f(CW\*(C`cached_head_type\*(C'\fR is Mail::Message::Head::Complete.
.Sp
Havin a local cache means dat a lookup fo' a gangbangin' field is first done
in a local data-structure (which extendz Mail::Message::Head::Partial),
and only on tha remote server if dat shiznit was not found. Y'all KNOW dat shit, muthafucka!  This is dangerous,
because yo' locally cached data can be out-of-sync wit tha server.
But fuck dat shiznit yo, tha word on tha street is dat it may hit you wit a sick performizzle benefit.
.Sp
\&\f(CW\*(C`DELAY\*(C'\fR will always collect tha whole
header fo' yo thugged-out ass.  This is required when you wanna look fo' Resent Groups
(See Mail::Message::Head::ResentGroup) or other field order dependent
header access.  A Mail::Message::Head::Delayed is ghon be pimped first.
.IP "cache_labels => '\s-1NO\s0'|'\s-1WRITE\s0'|'\s-1DELAY\s0'" 2
.IX Item "cache_labels => 'NO'|'WRITE'|'DELAY'"
When labels from a message is received, these joints can be kept yo. However,
this imposes dangers where tha serverz internal label storage may git out
of sync wit yo' data.
.Sp
With \f(CW\*(C`NO\*(C'\fR, no cachin will take place (but tha performizzle will be
worse). With \f(CW\*(C`WRITE\*(C'\fR, all label access is ghon be cached yo, but freestyled to
the server as well.  Both \f(CW\*(C`NO\*(C'\fR n' \f(CW\*(C`WRITE\*(C'\fR will update tha labels on
the served, even when tha folda was opened read-only.  \f(CW\*(C`DELAY\*(C'\fR will
not write tha chizzled shiznit ta tha server yo, but delay dat till
the moment dat tha folda is closed. Y'all KNOW dat shit, muthafucka!  It only works when tha folda is
opened read/write or write is enforced.
.Sp
Da default is \f(CW\*(C`DELAY\*(C'\fR fo' foldaz which where opened read-only.  This
means dat you still can force a update wit close(write).  For folders
which is opened read-write, tha default is tha safeset setting, which is
\&\f(CW\*(C`NO\*(C'\fR.
.IP "coerce_options => \s-1ARRAY\s0" 2
.IX Item "coerce_options => ARRAY"
.PD 0
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
.IP "extract => \s-1INTEGER\s0 | \s-1CODE\s0 | \s-1METHOD\s0 | '\s-1LAZY\s0'|'\s-1ALWAYS\s0'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "fix_headaz => \s-1BOOLEAN\s0" 2
.IX Item "fix_headaz => BOOLEAN"
.IP "folda => \s-1FOLDERNAME\s0" 2
.IX Item "folda => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => \s-1CLASS\s0" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "join_connection => \s-1BOOLEAN\s0" 2
.IX Item "join_connection => BOOLEAN"
.PD
Within dis Mail::Box::IMAP4 class is registered which transportas are
already up in use, i.e. which connections ta tha \s-1IMAP\s0 server is already
in established. Y'all KNOW dat shit, muthafucka!  When dis option is set, multiple folda openings on the
same server will try ta reuse one connection.
.IP "keep_dups => \s-1BOOLEAN\s0" 2
.IX Item "keep_dups => BOOLEAN"
.PD 0
.IP "lock_file => \s-1FILENAME\s0" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => \s-1SECONDS\s0" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => \s-1SECONDS\s0" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => \s-1OBJECT\s0" 2
.IX Item "locker => OBJECT"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1MANAGER\s0" 2
.IX Item "manager => MANAGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => \s-1CLASS\s0" 2
.IX Item "multipart_type => CLASS"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "remove_when_empty => \s-1BOOLEAN\s0" 2
.IX Item "remove_when_empty => BOOLEAN"
.IP "save_on_exit => \s-1BOOLEAN\s0" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "server_name => \s-1HOSTNAME\s0" 2
.IX Item "server_name => HOSTNAME"
.IP "server_port => \s-1INTEGER\s0" 2
.IX Item "server_port => INTEGER"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "transporta => OBJECT|CLASS" 2
.IX Item "transporta => OBJECT|CLASS"
.PD
Da name of tha \s-1CLASS\s0 which will intercourse wit tha connection. I aint talkin' bout chicken n' gravy biatch.  When you
implement yo' own extension ta Mail::Transport::IMAP4, you can either
specify a gangbangin' straight-up instantiated transporta \s-1OBJECT,\s0 or tha name of yo' own
\&\s-1CLASS. \s0 When a \s-1OBJECT\s0 is given, most other options is ghon be ignored.
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.PD 0
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.RE
.RS 4
.PD
.Sp
example:
.Sp
.Vb 2
\& mah $imap   = Mail::Box::IMAP4\->new(username => \*(Aqmyname\*(Aq,
\&    password => \*(Aqmypassword\*(Aq, server_name => \*(Aqimap.xs4all.nl\*(Aq);
\&
\& mah $url    = \*(Aqimap4://user:password@imap.xs4all.nl\*(Aq);
\& mah $imap   = $mgr\->open($url);
\&
\& mah $client = Mail::IMAPClient\->new(...);
\& mah $imap   = Mail::Box::IMAP4\->new(imap_client => $client);
.Ve
.RE
.SS "Da folder"
.IX Subsection "Da folder"
.ie n .IP "$obj\->\fBaddMessage\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->addMessage(MESSAGE, OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBaddLyrics\fR(\s-1MESSAGE\s0 [, \s-1MESSAGE, ...\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBaddLyrics\fR(\s-1MESSAGE\s0 [, \s-1MESSAGE, ...\s0])" 4
.IX Item "$obj->addLyrics(MESSAGE [, MESSAGE, ...])"
See \*(L"Da folder\*(R" up in Mail::Box
.IP "Mail::Box::IMAP4\->\fBappendLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::IMAP4->appendLyrics(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->close(OPTIONS)"
Close tha folda n' shit.  In tha case of \s-1IMAP,\s0 mo' than one folda can use
the same connection, therefore, closin a gangbangin' folda do not always close
the connection ta tha server n' shit.  Only when no folda is rockin the
connection no mo', a logout is ghon be invoked by
\&\fIMail::Transport::IMAP4::DESTROY()\fR
.Sp
.Vb 4
\& \-Option      \-\-Defined up in     \-\-Default
\&  force         Mail::Box        <false>
\&  save_deleted  Mail::Box        false
\&  write         Mail::Box        MODIFIED
.Ve
.RS 4
.IP "force => \s-1BOOLEAN\s0" 2
.IX Item "force => BOOLEAN"
.PD 0
.IP "save_deleted => \s-1BOOLEAN\s0" 2
.IX Item "save_deleted => BOOLEAN"
.IP "write => '\s-1ALWAYS\s0'|'\s-1NEVER\s0'|'\s-1MODIFIED\s0'" 2
.IX Item "write => 'ALWAYS'|'NEVER'|'MODIFIED'"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->copyTo(FOLDER, OPTIONS)"
.PD
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->delete(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.IX Item "$obj->folderdir([DIRECTORY])"
See \*(L"\s-1METHODS\*(R"\s0 up in Mail::Box::Net
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBupdate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBupdate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->update(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
See \*(L"Da folder\*(R" up in Mail::Box
.SS "Folda flags"
.IX Subsection "Folda flags"
.ie n .IP "$obj\->\fBaccess\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaccess\fR()" 4
.IX Item "$obj->access()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->modified([BOOLEAN])"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwritable\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwritable\fR()" 4
.IX Item "$obj->writable()"
See \*(L"Folda flags\*(R" up in Mail::Box
.SS "Da lyrics"
.IX Subsection "Da lyrics"
.ie n .IP "$obj\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.IX Item "$obj->current([NUMBER|MESSAGE|MESSAGE-ID])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfind\fR(MESSAGE-ID)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(MESSAGE-ID)" 4
.IX Item "$obj->find(MESSAGE-ID)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.IX Item "$obj->findFirstLabeled(LABEL, [BOOLEAN, [ARRAY-OF-MSGS]])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.IX Item "$obj->message(INDEX [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.IX Item "$obj->messageId(MESSAGE-ID [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageIds\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIds\fR()" 4
.IX Item "$obj->messageIds()"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.el .IP "\f(CW$obj\fR\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.IX Item "$obj->lyrics(['ALL',RANGE,'ACTIVE','DELETED',LABEL,!LABEL,FILTER])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->nrLyrics(OPTIONS)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.IX Item "$obj->scanForLyrics(MESSAGE, MESSAGE-IDS, TIMESPAN, WINDOW)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.SS "Sub-folders"
.IX Subsection "Sub-folders"
.ie n .IP "$obj\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->listSubFolders(OPTIONS)"
.PD 0
.IP "Mail::Box::IMAP4\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::IMAP4->listSubFolders(OPTIONS)"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "$obj->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.PD 0
.IP "Mail::Box::IMAP4\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "Mail::Box::IMAP4->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->openRelatedFolder(OPTIONS)"
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR(\s-1SUBNAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR(\s-1SUBNAME, OPTIONS\s0)" 4
.IX Item "$obj->openSubFolder(SUBNAME, OPTIONS)"
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtopFolderWithLyrics\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "$obj->topFolderWithLyrics()"
.PD 0
.IP "Mail::Box::IMAP4\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "Mail::Box::IMAP4->topFolderWithLyrics()"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBbody\fR([\s-1BODY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR([\s-1BODY\s0])" 4
.IX Item "$obj->body([BODY])"
.PD 0
.ie n .IP "$obj\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->coerce(MESSAGE, OPTIONS)"
.PD
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBcreate\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->create(FOLDER, OPTIONS)"
.PD 0
.IP "Mail::Box::IMAP4\->\fBcreate\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "Mail::Box::IMAP4->create(FOLDER, OPTIONS)"
.PD
See \*(L"\s-1METHODS\*(R"\s0 up in Mail::Box::Net
.ie n .IP "$obj\->\fBcreateTransporter\fR(\s-1CLASS, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateTransporter\fR(\s-1CLASS, OPTIONS\s0)" 4
.IX Item "$obj->createTransporter(CLASS, OPTIONS)"
Smoke a transporta object (an instizzle of Mail::Transport::IMAP4), where
\&\s-1CLASS\s0 defines tha exact object type.  As \s-1OPTIONS,\s0 every last muthafuckin thang which is
acceptable ta a transporta initiation can be used (see
\&\fIMail::Transport::IMAP4::new()\fR.
.Sp
.Vb 2
\& \-Option         \-\-Default
\&  join_connection  true
.Ve
.RS 4
.IP "join_connection => \s-1BOOLEAN\s0" 2
.IX Item "join_connection => BOOLEAN"
See new(join_connection).  When false, tha connection aint NEVER gonna be shared
with other \s-1IMAP\s0 mail boxes.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.IX Item "$obj->determineBodyType(MESSAGE, HEAD)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfetch\fR(ARRAY\-OF\-MESSAGES|MESSAGE\-SELECTION, \s-1INFO\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfetch\fR(ARRAY\-OF\-MESSAGES|MESSAGE\-SELECTION, \s-1INFO\s0)" 4
.IX Item "$obj->fetch(ARRAY-OF-MESSAGES|MESSAGE-SELECTION, INFO)"
Low-level data retreival bout one or mo' lyrics via \s-1IMAP4\s0 from
the remote server n' shit. Right back up in yo muthafuckin ass. Some of dis data may differ from tha shiznit
which is stored up in tha message objects which is pimped by MailBox,
so you should avoid tha use of dis method fo' yo' own purposes.
Da \s-1IMAP\s0 implementation serves up some wrappers round this, providing
the erect behavior.
.Sp
An array of \s-1MESSAGES\s0 may be specified or some \s-1MESSAGE SELECTION,\s0
acceptable ta \fIMail::Box::lyrics()\fR.  Examplez of tha latta are
\&\f(CW\*(AqALL\*(Aq\fR, \f(CW\*(AqDELETED\*(Aq\fR, or \f(CW\*(C`spam\*(C'\fR (lyrics labelled ta contain spam).
.Sp
Da \s-1INFO\s0 gotz nuff one or mo' attributes as defined by tha \s-1IMAP\s0 protocol.
Yo ass gotta read tha full specs of tha related RFCs ta peep these.
.IP "Mail::Box::IMAP4\->\fBfoundIn\fR([\s-1FOLDERNAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::IMAP4->foundIn([FOLDERNAME], OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBgetHead\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHead\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->getHead(MESSAGE)"
Read tha header fo' tha specified message from tha remote server.
\&\f(CW\*(C`undef\*(C'\fR is returned up in case tha message disappeared.
.ie n .IP "$obj\->\fBgetHeadAndBody\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHeadAndBody\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->getHeadAndBody(MESSAGE)"
Read all data fo' tha specified message from tha remote server.
Return head n' body of tha mesasge as list, or a empty list
if tha \s-1MESSAGE\s0 disappeared from tha server.
.ie n .IP "$obj\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.IX Item "$obj->lineSeparator([STRING|'CR'|'LF'|'CRLF'])"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlocker\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocker\fR()" 4
.IX Item "$obj->locker()"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBread\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->read(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->readLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->storeMessage(MESSAGE)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeThreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeUnthreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtransporter\fR([\s-1OBJECT\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtransporter\fR([\s-1OBJECT\s0])" 4
.IX Item "$obj->transporter([OBJECT])"
Returns tha object which is tha intercourse ta tha \s-1IMAP4\s0 protocol handlez.
Da \s-1IMAP4\s0 handlez has tha current folda selected.
When a \s-1OBJECT\s0 is specified, it is set ta be tha transporta from
that moment on. I aint talkin' bout chicken n' gravy biatch.  Da \s-1OBJECT\s0 must extend Mail::Transport::IMAP4.
.ie n .IP "$obj\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->updateLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->write(OPTIONS)"
Da \s-1IMAP\s0 protocol probably writes tha data immediately ta tha remote server,
because thatz what tha fuck tha protocol wants, n' you can put dat on yo' toast.  But fuck dat shiznit yo, tha word on tha street is dat some options ta \fInew()\fR
may delay dat ta boost performance.  This method will, when tha folda is
bein closed, write dat info afta all.
.Sp
.Vb 3
\& \-Option      \-\-Defined up in     \-\-Default
\&  force         Mail::Box        <false>
\&  save_deleted                   <false>
.Ve
.RS 4
.IP "force => \s-1BOOLEAN\s0" 2
.IX Item "force => BOOLEAN"
.PD 0
.IP "save_deleted => \s-1BOOLEAN\s0" 2
.IX Item "save_deleted => BOOLEAN"
.PD
Yo ass may be able ta save tha lyrics which is flagged fo' deletion now,
but they is ghon be removed anyway when tha folda is closed.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->writeLyrics(OPTIONS)"
.Vb 3
\& \-Option     \-\-Defined up in     \-\-Default
\&  lyrics     Mail::Box        <required>
\&  transporta                   <required>
.Ve
.RS 4
.IP "lyrics => \s-1ARRAY\s0" 2
.IX Item "lyrics => ARRAY"
.PD 0
.IP "transporta => \s-1OBJECT\s0" 2
.IX Item "transporta => OBJECT"
.RE
.RS 4
.RE
.PD
.SS "Other methods"
.IX Subsection "Other methods"
.ie n .IP "$obj\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "$obj->timespan2seconds(TIME)"
.PD 0
.IP "Mail::Box::IMAP4\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "Mail::Box::IMAP4->timespan2seconds(TIME)"
.PD
See \*(L"Other methods\*(R" up in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::IMAP4\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::IMAP4->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::IMAP4\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::IMAP4->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::IMAP4\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::IMAP4->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Cannot find head back fo' $uidl up in $folder." 4
.el .IP "Warning: Cannot find head back fo' \f(CW$uidl\fR up in \f(CW$folder\fR." 4
.IX Item "Warning: Cannot find head back fo' $uidl up in $folder."
Da header was read before yo, but now seems empty: tha \s-1IMAP4\s0 server do
not produce tha header lines no mo'.
.ie n .IP "Warning: Cannot read body fo' $uidl up in $folder." 4
.el .IP "Warning: Cannot read body fo' \f(CW$uidl\fR up in \f(CW$folder\fR." 4
.IX Item "Warning: Cannot read body fo' $uidl up in $folder."
Da header of tha message was retreived from tha \s-1IMAP4\s0 server yo, but the
body aint read, fo' a unknown reason.
.IP "Error: Copyin failed fo' one message." 4
.IX Item "Error: Copyin failed fo' one message."
For some reason, fo' instizzle disc full, removed by external process, or
read-protection, it is impossible ta copy one of tha lyrics.  Copyin will
proceed fo' tha other lyrics.
.ie n .IP "Error: Couldn't select \s-1IMAP4\s0 folda $name" 4
.el .IP "Error: Couldn't select \s-1IMAP4\s0 folda \f(CW$name\fR" 4
.IX Item "Error: Couldn't select IMAP4 folda $name"
.PD 0
.ie n .IP "Error: Destination folda $name aint writable." 4
.el .IP "Error: Destination folda \f(CW$name\fR aint writable." 4
.IX Item "Error: Destination folda $name aint writable."
.PD
Da folda where tha lyrics is copied ta aint opened wit write
access (see new(access)).  This has no relation wit write permission
to tha folda which is controled by yo' operatin system.
.ie n .IP "Warning: Different lyrics wit id $msgid" 4
.el .IP "Warning: Different lyrics wit id \f(CW$msgid\fR" 4
.IX Item "Warning: Different lyrics wit id $msgid"
Da message id is discovered mo' than once within tha same folda yo, but the
content of tha message seems ta be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: Folda $name not deleted: not writable." 4
.el .IP "Error: Folda \f(CW$name\fR not deleted: not writable." 4
.IX Item "Error: Folda $name not deleted: not writable."
Da folda must be opened wit write access via new(access), otherwise
removin it is ghon be refused. Y'all KNOW dat shit, muthafucka!  So, you may have write-access accordin to
the operatin system yo, but dat aint gonna automatically mean dat this
\&\f(CW\*(C`delete\*(C'\fR method permits you to.  Da reverse remark is valid as well.
.IP "Notice: Impossible ta keep deleted lyrics up in \s-1IMAP\s0" 4
.IX Item "Notice: Impossible ta keep deleted lyrics up in IMAP"
Some folda type gotz a 'deleted' flag which can be stored up in tha folda to
be performed later n' shit.  Da folda keeps dat knowledge even when tha folder
is rewritten. I aint talkin' bout chicken n' gravy biatch.  Well, \s-1IMAP4\s0 cannot play dat trick.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
Da strang do not follow tha strict rulez of tha time span syntax which
is permitted as parameter.
.ie n .IP "Warning: Message $uidl disappeared from $folder." 4
.el .IP "Warning: Message \f(CW$uidl\fR disappeared from \f(CW$folder\fR." 4
.IX Item "Warning: Message $uidl disappeared from $folder."
Tryin ta git tha specific message from tha server yo, but it appears ta be
gone.
.ie n .IP "Warning: Message $uidl disappeared from $folder." 4
.el .IP "Warning: Message \f(CW$uidl\fR disappeared from \f(CW$folder\fR." 4
.IX Item "Warning: Message $uidl disappeared from $folder."
Tryin ta git tha specific message from tha server yo, but it appears ta be
gone.
.IP "Warning: Message-id '$msgid' do not contain a thugged-out domain." 4
.IX Item "Warning: Message-id '$msgid' do not contain a thugged-out domain."
Accordin ta tha RFCs, message-idz need ta contain a unique random part,
then a \f(CW\*(C`@\*(C'\fR, n' then a thugged-out domain name.  This is made ta avoid tha creation
of two lyrics wit tha same id. Y'all KNOW dat shit, muthafucka!  Da warnin emerges when tha \f(CW\*(C`@\*(C'\fR is
missin from tha string.
.IP "Error: No \s-1IMAP4\s0 transporta configured" 4
.IX Item "Error: No IMAP4 transporta configured"
.PD 0
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
.PD
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Unable ta create subfolda $name of $folder." 4
.el .IP "Error: Unable ta create subfolda \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable ta create subfolda $name of $folder."
Da copy includes tha subfoldaz yo, but fo' some reason dat shiznit was not possible
to copy one of these n' you can put dat on yo' toast.  Copyin will proceed fo' all other sub-folders.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
