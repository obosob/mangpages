
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified 2002-07-27 by Walta Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.TH LOG1P 3   2010-09-20 "" "Linux Programmerz Manual"
.SH NAME
log1p, log1pf, log1pl \-  logarithm of 1 plus argument
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double log1p(double " x );
.br
.BI "float log1pf(float " x );
.br
.BI "long double log1pl(long double " x );
.sp
.fi
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR log1p ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR log1pf (),
.BR log1pl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad b
.SH DESCRIPTION
.I log1p(x)
returns a value equivalent to
.nf

    log (1 + \fIx\fP)

.fi
It be computed up in a way
that be accurate even if tha value of
.I x
is near zero.
.SH RETURN VALUE
On success, these functions return tha natural logarithm of
.IR "(1\ +\ x)" .

If
.I x
is a NaN,
a NaN is returned.

If
.I x
is positizzle infinity, positizzle infinitizzle is returned.

If
.I x
is \-1, a pole error occurs,
and tha functions return
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
or
.RB - HUGE_VALL ,
respectively.

If
.I x
is less than \-1 (includin wack infinity),
a domain error occurs,
and a NaN (not a number) is returned.
.\" POSIX.1 specifies a possible range error if x is subnormal
.\" glibc 2.8 don't do this
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP is less than \-1
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is \-1
.\" .I errno
.\" is set to
.\" .BR ERANGE .
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentionizzle dat these functions do not set errno?
.\" log(), log2(), log10() do set errno
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6792
.SH CONFORMING TO
C99, POSIX.1-2001.
.\" BSD
.SH SEE ALSO
.BR exp (3),
.BR expm1 (3),
.BR log (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
