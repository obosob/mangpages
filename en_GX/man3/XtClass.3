.\" Copyright 1993 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be
.\" included up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtCheck-Subclass XtIs-Object XtIs-RectObj XtIs-Widget XtIs-Composite XtIs-Constraint XtIs-Shell XtIs-Override-Shell XtIs-WM-Shell XtIs-Vendor-Shell XtIs-Transient-Shell XtIs-Top-Level-Shell XtIs-Application-Shell wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtClass 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtClass, XtSuperclass, XtIsSubclass, XtCheckSubclass, XtIsObject, XtIsRectObj, XtIsWidget, XtIsComposite, XtIsConstraint, XtIsShell, XtIsOverrideShell, XtIsWMShell, XtIsVendorShell, XtIsTransientShell, XtIsTopLevelShell, XtIsApplicationShell, XtIsSessionShell \- obtain n' verify a widgetz class
.SH SYNTAX
.HP
WidgetClass XtClass(Widget \fIw\fP);
.HP
WidgetClass XtSuperclass(Widget \fIw\fP);
.HP
Boolean XtIsSubclass(Widget \fIw\fP, WidgetClass \fIwidget_class\fP);
.HP
void XtCheckSubclass(Widget \fIwidget\fP, WidgetClass \fIwidget_class\fP,
Strin \fImessage\fP);
.HP
Boolean XtIsObject(Widget \fIw\fP);
.HP
Boolean XtIsRectObj(Widget \fIw\fP);
.HP
Boolean XtIsWidget(Widget \fIw\fP);
.HP
Boolean XtIsComposite(Widget \fIw\fP);
.HP
Boolean XtIsConstraint(Widget \fIw\fP,
.HP
Boolean XtIsShell(Widget \fIw\fP);
.HP
Boolean XtIsOverrideShell(Widget \fIw\fP);
.HP
Boolean XtIsWMShell(Widget \fIw\fP);
.HP
Boolean XtIsVendorShell(Widget \fIw\fP);
.HP
Boolean XtIsTransientShell(Widget \fIw\fP);
.HP
Boolean XtIsTopLevelShell(Widget \fIw\fP);
.HP
Boolean XtIsApplicationShell(Widget \fIw\fP);
.HP
Boolean XtIsSessionShell(Widget \fIw\fP);
.SH ARGUMENTS
.IP \fIw\fP 1i
Specifies tha widget.
.IP \fIwidget_class\fP 1i
Specifies tha widget class\*(Wc.
.ds Me used
.IP \fImessage\fP 1i
Specifies tha message dat is ta be \*(Me.
.SH DESCRIPTION
The
.ZN XtClass
function returns a pointa ta tha widgetz class structure.
.LP
The
.ZN XtSuperclass
function returns a pointa ta tha widgetz superclass class structure.
.LP
The
.ZN XtIsSubclass
function returns
.ZN True
if tha class of tha specified widget is equal ta or be a subclass of
the specified class. Da widgetz class can be any number of subclasses
down tha chain n' need not be a immediate subclass of tha specified
class. Composite widgets dat need ta restrict tha class of tha items
they contain can use
.ZN XtIsSubclass
to smoke up if a widget belongs ta tha desired class of objects.
.LP
The
.ZN XtCheckSubclass
macro determines if tha class of tha specified widget is equal to
or be a subclass of tha specified widget class.
Da widget can be any number of subclasses down tha chain
and need not be a immediate subclass of tha specified widget class.
If tha specified widget aint a subclass,
.ZN XtCheckSubclass
constructs a error message from tha supplied message,
the widgetz actual class, n' tha expected class n' calls
.ZN XtErrorMsg .
.ZN XtCheckSubclass
should be used all up in tha entry point of exported routines ta ensure
that tha client has passed up in a valid widget class fo' tha exported operation.
.LP
.ZN XtCheckSubclass
is only executed when tha widget has been compiled wit tha compila symbol
DEBUG defined; otherwise, it is defined as tha empty string
and generates no code.
.LP
To test if a given widget belongs ta a subclass of a Intrinsics-defined
class, tha Intrinsics defines macros or functions equivalent to
.ZN XtIsSubclass
for each of tha built-in classes. These procedures are
.ZN XtIsObject ,
.ZN XtIsRectObj ,
.ZN XtIsWidget ,
.ZN XtIsComposite ,
.ZN XtIsConstraint ,
.ZN XtIsShell ,
.ZN XtIsOverrideShell ,
.ZN XtIsWMShell ,
.ZN XtIsVendorShell ,
.ZN XtIsTransientShell ,
.ZN XtIsTopLevelShell ,
.ZN XtIsApplicationShell ,
and
.ZN XtIsSessionShell .
.LP
The
.SH "SEE ALSO"
XtAppErrorMsg(3),
XtDisplay(3)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
