.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:00:59 1993 by Rik Faith (faith@cs.unc.edu)
.\" Clarification concernin realloc, iwj10@cus.cam.ac.uk (Ian Jackson), 950701
.\" Documented MALLOC_CHECK_, Wolfram Gloger (wmglo@dent.med.uni-muenchen.de)
.\" 2007-09-15 mtk: added notes on malloc()z use of sbrk() n' mmap().
.\"
.TH MALLOC 3  2012-05-10 "GNU" "Linux Programmerz Manual"
.SH NAME
malloc, free, calloc, realloc \- allocate n' free dynamic memory
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void *malloc(size_t " "size" );
.BI "void free(void " "*ptr" );
.BI "void *calloc(size_t " "nmemb" ", size_t " "size" );
.BI "void *realloc(void " "*ptr" ", size_t "  "size" );
.fi
.SH DESCRIPTION
.PP
The
.BR malloc ()
function allocates
.I size
bytes n' returns a pointa ta tha allocated memory.
.IR "Da memory aint initialized" .
If
.I size
is 0, then
.BR malloc ()
returns either NULL,
.\" glibc do this:
or a unique pointa value dat can lata be successfully passed to
.BR free ().
.PP
The
.BR free ()
function frees tha memory space pointed ta by
.IR ptr ,
which must done been returned by a previous call to
.BR malloc (),
.BR calloc ()
or
.BR realloc ().
Otherwise, or if
.I free(ptr)
has already been called before, undefined behavior occurs.
If
.I ptr
is NULL, no operation is performed.
.PP
The
.BR calloc ()
function allocates memory fo' a array of
.I nmemb
elements of
.I size
bytes each n' returns a pointa ta tha allocated memory.
Da memory is set ta zero.
If
.I nmemb
or
.I size
is 0, then
.BR calloc ()
returns either NULL,
.\" glibc do this:
or a unique pointa value dat can lata be successfully passed to
.BR free ().
.PP
The
.BR realloc ()
function chizzlez tha size of tha memory block pointed ta by
.I ptr
to
.I size
bytes.
Da contents is ghon be unchanged up in tha range from tha start of tha region
up ta tha minimum of tha oldschool n' freshly smoked up sizes.
If tha freshly smoked up size is larger than tha oldschool size, tha added memory will
.I not
be initialized.
If
.I ptr
is NULL, then tha call is equivalent to
.IR malloc(size) ,
for all joints of
.IR size ;
if
.I size
is equal ta zero,
and
.I ptr
is not NULL, then tha call is equivalent to
.IR free(ptr) .
Unless
.I ptr
is NULL, it must done been returned by a earlier call to
.BR malloc (),
.BR calloc ()
or
.BR realloc ().
If tha area pointed ta was moved, a
.I free(ptr)
is done.
.SH RETURN VALUE
The
.BR malloc ()
and
.BR calloc ()
functions return a pointa ta tha allocated memory
that is suitably aligned fo' any kind of variable.
On error, these functions return NULL.
NULL may also be returned by a successful call to
.BR malloc ()
with a
.I size
of zero,
or by a successful call to
.BR calloc ()
with
.I nmemb
or
.I size
equal ta zero.
.PP
The
.BR free ()
function returns no value.
.PP
The
.BR realloc ()
function returns a pointa ta tha newly allocated memory, which is suitably
aligned fo' any kind of variable n' may be different from
.IR ptr ,
or NULL if tha request fails.
If
.I size
was equal ta 0, either NULL or a pointa suitable ta be passed to
.BR free ()
is returned.
If
.BR realloc ()
fails tha original gangsta block is left untouched; it aint freed or moved.
.SH CONFORMING TO
C89, C99.
.SH NOTES
By default, Linux bigs up a optimistic memory allocation game.
This means dat when
.BR malloc ()
returns non-NULL there is no guarantee dat tha memory straight-up
is available.
In case it turns up dat tha system is outta memory,
one or mo' processes is ghon be capped by tha OOM killer.
For mo' shiznit, peep tha description of
.IR /proc/sys/vm/overcommit_memory
and
.IR /proc/sys/vm/oom_adj
in
.BR proc (5),
and tha Linux kernel source file
.IR Documentation/vm/overcommit-accountin .

Normally,
.BR malloc ()
allocates memory from tha heap, n' adjusts tha size of tha heap
as required, using
.BR sbrk (2).
When allocatin blockz of memory larger than
.B MMAP_THRESHOLD
bytes, tha glibc
.BR malloc ()
implementation allocates tha memory as a private anonymous mappin using
.BR mmap (2).
.B MMAP_THRESHOLD
is 128 kB by default yo, but be adjustable using
.BR mallopt (3).
Allocations performed using
.BR mmap (2)
are unaffected by the
.B RLIMIT_DATA
resource limit (see
.BR getrlimit (2)).

To avoid corruption up in multithreaded applications,
mutexes is used internally ta protect tha memory-management
data structures employed by these functions.
In a multithreaded application up in which threadz simultaneously
allocate n' free memory,
there could be contention fo' these mutexes.
To scalably handle memory allocation up in multithreaded applications,
glibc creates additional
.IR "memory allocation arenas"
if mutex contention is detected.
Each arena be a big-ass region of memory dat is internally allocated
by tha system
(using
.BR brk (2)
or
.BR mmap (2)),
and managed wit its own mutexes.

Da UNIX 98 standard requires
.BR malloc (),
.BR calloc (),
and
.BR realloc ()
to set
.I errno
to
.B ENOMEM
upon failure.
Glibc assumes dat dis is done
(and tha glibc versionz of these routines do this); if you
use a private malloc implementation dat do not set
.IR errno ,
then certain library routines may fail without having
a reason in
.IR errno .
.LP
Crashes in
.BR malloc (),
.BR calloc (),
.BR realloc (),
or
.BR free ()
are almost always related ta heap corruption, like fuckin overflowing
an allocated chunk or freein tha same pointa twice.
.PP
Recent versionz of Linux libc (lata than 5.4.23) n' glibc (2.x)
include a
.BR malloc ()
implementation which is tunable via environment variables.
For details, see
.BR mallopt (3).
.SH SEE ALSO
.\" http://g.oswego.edu/dl/html/malloc.html
.\" A Memory Allocator - by Doug Lea
.\"
.\" http://www.bozemanpass.com/info/linux/malloc/Linux_Heap_Contention.html
.\" Linux Heap, Contention up in free() - Dizzy Boreham
.\"
.\" http://www.citi.umich.edu/projects/linux-scalability/reports/malloc.html
.\" malloc() Performizzle up in a Multithreaded Linux Environment -
.\"     Peep Lever, Dizzy Boreham
.\"
.ad l
.nh
.BR brk (2),
.BR mmap (2),
.BR alloca (3),
.BR malloc_get_state (3),
.BR malloc_info (3),
.BR malloc_trim (3),
.BR malloc_usable_size (3),
.BR mallopt (3),
.BR mcheck (3),
.BR mtrace (3),
.BR posix_memalign (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
