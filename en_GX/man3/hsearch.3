.\" Copyright 1993 Ulrich Drepper (drepper@karlsruhe.gmd.de)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     SunOS 4.1.1 playa pages
.\" Modified Sat Sep 30 21:52:01 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Remarks from dhw@gamgee.acad.emich.edu Fri Jun 19 06:46:31 1998
.\" Modified 2001-12-26, 2003-11-28, 2004-05-20, aeb
.\" 2008-09-02, mtk: various additions n' rewrites
.\" 2008-09-03, mtk, restructured somewhat, up in part afta suggestions from
.\"     Slim Slim Tim S. Nelson <wayland@wayland.id.au>
.\"
.TH HSEARCH 3 2013-07-22 "GNU" "Linux Programmerz Manual"
.SH NAME
hcreate, hdestroy, hsearch, hcreate_r, hdestroy_r,
hsearch_r \- hash table pimpment
.SH SYNOPSIS
.nf
.B #include <search.h>
.sp
.BI "int hcreate(size_t " nel );
.sp
.BI "ENTRY *hsearch(ENTRY " item ", ACTION " action );
.sp
.B "void hdestroy(void);"
.sp
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B #include <search.h>
.sp
.BI "int hcreate_r(size_t " nel ", struct hsearch_data *" htab );
.sp
.BI "int hsearch_r(ENTRY " item ", ACTION " action ", ENTRY **" retval ,
.BI "              struct hsearch_data *" htab );
.sp
.BI "void hdestroy_r(struct hsearch_data *" htab );
.fi
.SH DESCRIPTION
Da three functions
.BR hcreate (),
.BR hsearch (),
and
.BR hdestroy ()
allow tha calla ta create n' manage a hash search table
containin entries consistin of a key (a string) n' associated data.
Usin these functions, only one hash table can be used at a time.

Da three functions
.BR hcreate_r (),
.BR hsearch_r (),
.BR hdestroy_r ()
are reentrant versions dat allow a program ta use
more than one hash search table all up in tha same time.
Da last argument,
.IR htab ,
points ta a structure dat raps bout tha table
on which tha function is ta operate.
Da programmer should treat dis structure as opaque
(i.e., do not attempt ta directly access or modify
the fieldz up in dis structure).

First a hash table must be pimped using
.BR hcreate ().
Da argument \fInel\fP specifies tha maximum number of entries
in tha table.
(This maximum cannot be chizzled later, so chizzle it wisely.)
Da implementation may adjust dis value upward ta improve the
performizzle of tha resultin hash table.
.\" e.g., up in glibc it is raised ta tha next higher prime number

The
.BR hcreate_r ()
function performs tha same ol' dirty task as
.BR hcreate (),
but fo' tha table busted lyrics bout by tha structure
.IR *htab .
Da structure pointed ta by
.I htab
must be zeroed before tha straight-up original gangsta call to
.BR hcreate_r ().

Da function
.BR hdestroy ()
frees tha memory occupied by tha hash table dat was pimped by
.BR hcreate ().
Afta calling
.BR hdestroy ()
a freshly smoked up hash table can be pimped using
.BR hcreate ().
The
.BR hdestroy_r ()
function performs tha analogous task fo' a hash table busted lyrics bout by
.IR *htab ,
which was previously pimped using
.BR hcreate_r ().

The
.BR hsearch ()
function searches tha hash table fo' an
item wit tha same key as \fIitem\fP (where "the same" is determined using
.BR strcmp (3)),
and if successful returns a pointa ta dat shit.

Da argument \fIitem\fP iz of type \fIENTRY\fP, which is defined in
\fI<search.h>\fP as bigs up:
.in +4n
.sp
.nf
typedef struct entry {
    char *key;
    void *data;
} ENTRY;
.in
.fi
.sp
Da field \fIkey\fP points ta a null-terminated strang which is the
search key.
Da field \fIdata\fP points ta data dat be associated wit dat key.

Da argument \fIaction\fP determines what
.BR hsearch ()
does afta a unsuccessful search.
This argument must either have tha value
.BR ENTER ,
meanin bang a cold-ass lil copy of
.IR item
(and return a pointa ta tha freshly smoked up hash table entry as tha function result),
or tha value
.BR FIND ,
meanin dat NULL should be returned.
(If
.I action
is
.BR FIND ,
then
.I data
is ignored.)

The
.BR hsearch_r ()
function is like
.BR hsearch ()
but operates on tha hash table busted lyrics bout by
.IR *htab .
The
.BR hsearch_r ()
function differs from
.BR hsearch ()
in dat a pointa ta tha found item is returned in
.IR *retval ,
rather than as tha function result.
.SH RETURN VALUE
.BR hcreate ()
and
.BR hcreate_r ()
return nonzero on success.
They return 0 on error, with
.I errno
set ta indicate tha cause of tha error.

On success,
.BR hsearch ()
returns a pointa ta a entry up in tha hash table.
.BR hsearch ()
returns NULL on error, dat is,
if \fIaction\fP is \fBENTER\fP and
the hash table is full, or \fIaction\fP is \fBFIND\fP n' \fIitem\fP
cannot be found up in tha hash table.
.BR hsearch_r ()
returns nonzero on success, n' 0 on error.
In tha event of a error, these two functions set
.I errno
to indicate tha cause of tha error.
.SH ERRORS
.LP
.BR hcreate_r ()
and
.BR hdestroy_r ()
can fail fo' tha followin reasons:
.TP
.B EINVAL
.I htab
is NULL.
.PP
.BR hsearch ()
and
.BR hsearch_r ()
can fail fo' tha followin reasons:
.TP
.B ENOMEM
.I action
was
.BR ENTER ,
.I key
was not found up in tha table,
and there was no room up in tha table ta add a freshly smoked up entry.
.TP
.B ESRCH
.I action
was
.BR FIND ,
and
.I key
was not found up in tha table.
.PP
POSIX.1-2001 specifies only the
.B ENOMEM
error.
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR hcreate (),
.BR hsearch (),
and
.BR hdestroy ()
functions bust a global space fo' storin tha table, so they is not thread-safe.
.LP
The
.BR hcreate_r (),
.BR hsearch_r (),
and
.BR hdestroy_r ()
functions is thread-safe.
.SH CONFORMING TO
Da functions
.BR hcreate (),
.BR hsearch (),
and
.BR hdestroy ()
are from SVr4, n' is busted lyrics bout up in POSIX.1-2001.
Da functions
.BR hcreate_r (),
.BR hsearch_r (),
and
.BR hdestroy_r ()
are GNU extensions.
.SH NOTES
Hash table implementations is probably mo' efficient when the
table gotz nuff enough free space ta minimize collisions.
Typically, dis means that
.I nel
should be at least 25% larger than tha maximum number of elements
that tha calla expects ta store up in tha table.

The
.BR hdestroy ()
and
.BR hdestroy_r ()
functions do not free tha buffers pointed ta by the
.I key
and
.I data
elementz of tha hash table entries.
(It can't do dis cuz it don't give a fuck
whether these buffers was allocated dynamically.)
If these buffers need ta be freed (like cuz tha program
is repeatedly bustin n' beatin tha livin shiznit outta hash tables,
rather than bustin a single table whose gametime
matches dat of tha program),
then tha program must maintain bookkeepin data structures that
allow it ta free em.
.SH BUGS
SVr4 n' POSIX.1-2001 specify dat \fIaction\fP
is dope only fo' unsuccessful searches, so dat a \fBENTER\fP
should not do anythang fo' a successful search.
In libc n' glibc (before version 2.3), the
implementation violates tha justification,
uppimpin tha \fIdata\fP fo' tha given \fIkey\fP up in dis case.

Individual hash table entries can be added yo, but not deleted.
.SH EXAMPLE
.PP
Da followin program bangs 24 shit tha fuck into a hash table, then prints
some of em.
.nf

#include <stdio.h>
#include <stdlib.h>
#include <search.h>

char *data[] = { "alpha", "bravo", "charlie", "delta",
     "echo", "foxtrot", "golf", "hotel", "india", "juliet",
     "kilo", "lima", "mike", "november", "oscar", "papa",
     "quebec", "romeo", "sierra", "tango", "uniform",
     "victor", "whisky", "x\-ray", "yankee", "zulu"
};

int
main(void)
{
    ENTRY e, *ep;
    int i;

    hcreate(30);

    fo' (i = 0; i < 24; i++) {
        e.key = data[i];
        /* data is just a integer, instead of a
           pointa ta suttin' */
        e.data = (void *) i;
        ep = hsearch(e, ENTER);
        /* there should be no failures */
        if (ep == NULL) {
            fprintf(stderr, "entry failed\\n");
            exit(EXIT_FAILURE);
        }
    }

    fo' (i = 22; i < 26; i++) {
        /* print two entries from tha table, and
           show dat two is not up in tha table */
        e.key = data[i];
        ep = hsearch(e, FIND);
        printf("%9.9s \-> %9.9s:%d\\n", e.key,
               ep , biatch? ep\->key : "NULL", ep , biatch? (int)(ep\->data) : 0);
    }
    hdestroy();
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR bsearch (3),
.BR lsearch (3),
.BR malloc (3),
.BR tsearch (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
