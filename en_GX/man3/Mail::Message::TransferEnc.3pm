.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::TransferEnc 3"
.TH Mail::Message::TransferEnc 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::TransferEnc \- message transfer encoder/decoder
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Message::TransferEnc
\&   be a Mail::Reporter
\&
\& Mail::Message::TransferEnc is extended by
\&   Mail::Message::TransferEnc::Base64
\&   Mail::Message::TransferEnc::Binary
\&   Mail::Message::TransferEnc::EightBit
\&   Mail::Message::TransferEnc::QuotedPrint
\&   Mail::Message::TransferEnc::SevenBit
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& mah Mail::Message $msg = ...;
\& mah $decoded = $msg\->decoded;
\& mah $encoded = $msg\->encode(transfer => \*(Aqbase64\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is tha base fo' various encodaz n' decoders, which are
used durin transhiznit of tha message.  These packages, n' all which are
derived, is invoked by tha messagez \fIMail::Message::decoded()\fR and
\&\fIMail::Message::encode()\fR methods:
.PP
.Vb 3
\& mah $message = $folder\->message(3);
\& mah $decoded_body = $message\->decoded;
\& mah $encoded_body = $message\->encode(transfer => \*(Aqbase64\*(Aq);
.Ve
.PP
Da followin coders/decodaz is currently available:
.IP "\(bu" 4
Mail::Message::TransferEnc::Base64
.Sp
\&\f(CW\*(C`base64\*(C'\fR fo' binary shiznit.
.IP "\(bu" 4
Mail::Message::TransferEnc::SevenBit
.Sp
\&\f(CW\*(C`7bit\*(C'\fR fo' plain oldschool \s-1ASCII\s0 charactas only.
.IP "\(bu" 4
Mail::Message::TransferEnc::EightBit
.Sp
\&\f(CW\*(C`8bit\*(C'\fR fo' extended characta set data, not encoded.
.IP "\(bu" 4
Mail::Message::TransferEnc::QuotedPrint
.Sp
\&\f(CW\*(C`quoted\-printable\*(C'\fR encdoded extended characta set data.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Message::TransferEnc\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Message::TransferEnc->new(OPTIONS)"
See \*(L"Constructors\*(R" up in Mail::Reporter
.SS "Da Encoder"
.IX Subsection "Da Encoder"
.IP "Mail::Message::TransferEnc\->\fBaddTransferEncoder\fR(\s-1TYPE, CLASS\s0)" 4
.IX Item "Mail::Message::TransferEnc->addTransferEncoder(TYPE, CLASS)"
Addz one freshly smoked up encoder ta tha list known by tha Mail::Box suite.  The
\&\s-1TYPE\s0 is found up in tha messagez header up in tha \f(CW\*(C`Content\-Transfer\-Encoding\*(C'\fR
field.
.ie n .IP "$obj\->\fBcreate\fR(\s-1TYPE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1TYPE, OPTIONS\s0)" 4
.IX Item "$obj->create(TYPE, OPTIONS)"
Smoke a freshly smoked up coder/decoder based on tha required type.
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Da name of tha encoder n' shit.  Case aint significant.
.SS "Encoding"
.IX Subsection "Encoding"
.ie n .IP "$obj\->\fBcheck\fR(\s-1BODY, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcheck\fR(\s-1BODY, OPTIONS\s0)" 4
.IX Item "$obj->check(BODY, OPTIONS)"
Peep whether tha body is erectly encoded. Y'all KNOW dat shit, muthafucka!  If so, tha body reference is
returned wit tha \f(CW\*(C`checked\*(C'\fR flag set.  Otherwise, a freshly smoked up object is pimped
and returned.
.Sp
.Vb 2
\& \-Option     \-\-Default
\&  result_type  <type of source body>
.Ve
.RS 4
.IP "result_type => \s-1CLASS\s0" 2
.IX Item "result_type => CLASS"
Da type of tha body ta be produced, when tha checker decides ta return
modified data.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBdecode\fR(\s-1BODY\s0 [, \s-1OPTIONS\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdecode\fR(\s-1BODY\s0 [, \s-1OPTIONS\s0])" 4
.IX Item "$obj->decode(BODY [, OPTIONS])"
Use tha encoder ta decode tha content of \s-1BODY.  A\s0 freshly smoked up body is returned.
.Sp
.Vb 2
\& \-Option     \-\-Default
\&  result_type  <type of source body>
.Ve
.RS 4
.IP "result_type => \s-1CLASS\s0" 2
.IX Item "result_type => CLASS"
Da type of tha body ta be produced, when tha decoder decides ta return
modified data.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBencode\fR(\s-1BODY, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(\s-1BODY, OPTIONS\s0)" 4
.IX Item "$obj->encode(BODY, OPTIONS)"
Use tha encoder ta encode tha content of \s-1BODY.\s0
.Sp
.Vb 2
\& \-Option     \-\-Default
\&  result_type  <type of source body>
.Ve
.RS 4
.IP "result_type => \s-1CLASS\s0" 2
.IX Item "result_type => CLASS"
Da type of tha body ta be produced, when tha decoder decides ta return
modified data.
.RE
.RS 4
.RE
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Message::TransferEnc\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Message::TransferEnc->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Message::TransferEnc\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Message::TransferEnc->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Message::TransferEnc\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Message::TransferEnc->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Decoder fo' transfer encodin $type do not work: $@" 4
.el .IP "Error: Decoder fo' transfer encodin \f(CW$type\fR do not work: $@" 4
.IX Item "Error: Decoder fo' transfer encodin $type do not work: $@"
Compilin tha required transfer encodin resulted up in errors, which means
that tha decoder can not be used.
.ie n .IP "Warning: No decoder fo' transfer encodin $type." 4
.el .IP "Warning: No decoder fo' transfer encodin \f(CW$type\fR." 4
.IX Item "Warning: No decoder fo' transfer encodin $type."
A decoder fo' tha specified type of transfer encodin aint implemented.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
