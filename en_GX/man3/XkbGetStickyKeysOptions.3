.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbGetStickyKeysOptions 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbGetStickyKeysOptions \- Queries tha current StickyKeys attributes fo' a keyboard device
.SH SYNOPSIS
.HP
.B Bool XkbGetStickyKeysOptions
.BI "(\^Display *" "display" "\^,"
.BI "unsigned int " "device_spec" "\^,"
.BI "unsigned int *" "options_rtrn" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- display
connection ta X server
.TP
.I \- device_spec
device ID, or XkbUseCoreKbd
.TP
.I \- options_rtrn
backfilled wit StickyKeys option mask
.SH DESCRIPTION
.LP
Da StickyKeys control has two options dat can be accessed via tha 
.I ax_options 
of a XkbControlsRec structure. Da first option, TwoKeys, specifies whether StickyKeys should 
automatically turn off when two keys is pressed all up in tha same time. This feature is useful fo' 
shared computas so playas whoz ass do not want dem do not need ta turn StickyKeys off if a previous 
user left StickyKeys on. I aint talkin' bout chicken n' gravy biatch. Da second option, LatchToLock, specifies whether or not StickyKeys 
locks a modifier when pressed twice up in a row.

.I XkbGetStickyKeysOptions 
requests tha attributez of tha StickyKeys control from tha server, waits fo' a reply, n' 
backfills 
.I options_rtrn 
with a mask indicatin whether tha individual StickyKeys options is on or off. Valid bits up in 
.I options_rtrn 
are:
.nf

     XkbAX_TwoKeysMask
     XkbAX_LatchToLockMask
     
.fi     
.I XkbGetStickyKeysOptions 
returns True if successful; if a cold-ass lil compatible version of tha Xkb extension aint available up in tha 
server 
.I XkbGetStickyKeysOptions 
returns False.
.SH "RETURN VALUES"
.TP 15
True
Da 
.I XkbGetStickyKeysOptions 
function returns True if tha request fo' tha attributez of tha StickyKeys control from tha 
server was successful.
.TP 15
False
Da 
.I XkbGetStickyKeysOptions 
function returns False if a cold-ass lil compatible version of tha Xkb extension aint available up in tha 
server n' shit. 
.SH STRUCTURES
.nf
Da XkbControlsRec structure is defined as bigs up:

    #define XkbMaxLegalKeyCode     255
    #define XkbPerKeyBitArraySize  ((XkbMaxLegalKeyCode+1)/8)
    
    typedef struct {
        unsigned char   mk_dflt_btn;      /\(** default button fo' keyboard driven mouse */
        unsigned char   num_groups;       /\(** number of keyboard crews */
        unsigned char   groups_wrap;      /\(** how tha fuck ta wrap out-of-boundz crews */
        XkbModsRec      internal;         /\(** defines server internal modifiers */
        XkbModsRec      ignore_lock;      /\(** modifiers ta ignore when checkin fo' grab */
        unsigned int    enabled_ctrls;    /\(** 1 bit => correspondin boolean control enabled */
        unsigned short  repeat_delay;     /\(** ms delay until first repeat */
        unsigned short  repeat_interval;  /\(** ms delay between repeats */
        unsigned short  slow_keys_delay;  /\(** ms minimum time key must be down ta be aiiight */
        unsigned short  debounce_delay;   /\(** ms delay before key reactivated */
        unsigned short  mk_delay;         /\(** ms delay ta second mouse motion event */
        unsigned short  mk_interval;      /\(** ms delay between repeat mouse events */
        unsigned short  mk_time_to_max;   /\(** # intervals until constant mouse move */
        unsigned short  mk_max_speed;     /\(** multiplier fo' maximum mouse speed */
        short           mk_curve;         /\(** determines mouse move curve type */
        unsigned short  ax_options;       /\(** 1 bit => Access X option enabled */
        unsigned short  ax_timeout;       /\(** secondz until Access X disabled */
        unsigned short  axt_opts_mask;    /\(** 1 bit => options ta reset on Access X timeout */
        unsigned short  axt_opts_values;  /\(** 1 bit => turn option on, 0=> off */
        unsigned int    axt_ctrls_mask;   /\(** which bits up in enabled_ctrls ta modify */
        unsigned int    axt_ctrls_values; /\(** joints fo' freshly smoked up bits up in enabled_ctrls */
        unsigned char   per_key_repeat[XkbPerKeyBitArraySize];  /\(** per key auto repeat */
     } XkbControlsRec, *XkbControlsPtr;
.fi
