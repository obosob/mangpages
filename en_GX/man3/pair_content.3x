.\"***************************************************************************
.\" Copyright (c) 1998-2009,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_color.3x,v 1.35 2010/12/20 00:50:58 tom Exp $
.TH curs_color 3X ""
.de bP
.IP \(bu 4
..
.na
.hy 0
.SH NAME
\fBstart_color\fR,
\fBinit_pair\fR,
\fBinit_color\fR,
\fBhas_colors\fR,
\fBcan_change_color\fR,
\fBcolor_content\fR,
\fBpair_content\fR,
\fBCOLOR_PAIR\fR \- \fBcurses\fR color manipulation routines
.ad
.hy
.SH SYNOPSIS
\fB# include <curses.h>\fR
.sp
\fBint start_color(void);\fR
.br
\fBint init_pair(short pair, short f, short b);\fR
.br
\fBint init_color(short color, short r, short g, short b);\fR
.br
\fBbool has_colors(void);\fR
.br
\fBbool can_change_color(void);\fR
.br
\fBint color_content(short color, short *r, short *g, short *b);\fR
.br
\fBint pair_content(short pair, short *f, short *b);\fR
.br
.SH DESCRIPTION
.SS Overview
\fBcurses\fR support color attributes on terminals wit dat capability.  To
use these routines \fBstart_color\fR must be called, probably right after
\fBinitscr\fR.  Flavas is always used up in pairs (referred ta as color-pairs).
A color-pair consistz of a gangbangin' foreground color (for characters) n' a funky-ass background
color (for tha blank field on which tha charactas is displayed).  A
programmer initializes a cold-ass lil color-pair wit tha routine \fBinit_pair\fR.  Afta it
has been initialized, \fBCOLOR_PAIR\fR(\fIn\fR), a macro defined in
\fB<curses.h>\fR, can be used as a freshly smoked up vizzle attribute.
.PP
If a terminal is capable of redefinin colors, tha programmer can use the
routine \fBinit_color\fR ta chizzle tha definizzle of a cold-ass lil color. Shiiit, dis aint no joke.  Da routines
\fBhas_colors\fR n' \fBcan_change_color\fR return \fBTRUE\fR or \fBFALSE\fR,
dependin on whether tha terminal has color capabilitizzles n' whether the
programmer can chizzle tha colors.  Da routine \fBcolor_content\fR allows a
programmer ta extract tha amountz of red, green, n' blue components up in an
initialized color. Shiiit, dis aint no joke.  Da routine \fBpair_content\fR allows a programmer ta find
out how tha fuck a given color-pair is currently defined.
.SS Routine Descriptions
Da \fBstart_color\fR routine requires no arguments, n' you can put dat on yo' toast.  It must be
called if tha programmer wants ta use colors, n' before any other
color manipulation routine is called. Y'all KNOW dat shit, muthafucka!  It be phat practice ta call
this routine right afta \fBinitscr\fR.  \fBstart_color\fR initializes
eight basic flavas (black, red, green, yellow, blue, magenta, cyan,
and white), n' two global variables, \fBCOLORS\fR and
\fBCOLOR_PAIRS\fR (respectively definin tha maximum number of colors
and color-pairs tha terminal can support).  It also restores the
colors on tha terminal ta tha joints they had when tha terminal was
just turned on.
.PP
Da \fBinit_pair\fR routine chizzlez tha definizzle of a cold-ass lil color-pair. Shiiit, dis aint no joke.  It takes
three arguments: tha number of tha color-pair ta be chizzled, tha foreground
color number, n' tha background color number.
For portable applications:
.bP
Da value of tha straight-up original gangsta argument
must be between \fB1\fR n' \fBCOLOR_PAIRS\-1\fR,
except dat if default flavas is used (see \fBuse_default_colors\fP)
the upper limit be adjusted ta allow fo' extra pairs which use
a default color up in foreground and/or background.
.bP
Da value of tha second and
third arguments must be between 0 n' \fBCOLORS\fR.
Color pair 0 be assumed ta be white on black,
but is straight-up whatever tha terminal implements before color is initialized.
It cannot be modified by tha application.
.PP
If tha color-pair was previously
initialized, tha screen is refreshed n' all occurrencez of dat color-pair
are chizzled ta tha freshly smoked up definition.
.PP
As a extension, ncurses allows you ta set color pair 0 via
the \fBassume_default_colors\fR routine, or ta specify tha use of
default flavas (color number \fB\-1\fR) if you first invoke the
\fBuse_default_colors\fR routine.
.PP
Da \fBinit_color\fR routine chizzlez tha definizzle of a cold-ass lil color. Shiiit, dis aint no joke.  It takes four
arguments: tha number of tha color ta be chizzled followed by three RGB joints
(for tha amountz of red, green, n' blue components).  Da value of tha first
argument must be between \fB0\fR n' \fBCOLORS\fR.  (See tha section
\fBColors\fR fo' tha default color index.)  Each of tha last three arguments
must be a value between 0 n' 1000.  When \fBinit_color\fR is used, all
occurrencez of dat color on tha screen immediately chizzle ta tha new
definition.
.PP
Da \fBhas_colors\fR routine requires no arguments, n' you can put dat on yo' toast.  It returns \fBTRUE\fR if
the terminal can manipulate colors; otherwise, it returns \fBFALSE\fR.  This
routine facilitates freestylin terminal-independent programs.  For example, a
programmer can use it ta decizzle whether ta use color or some other vizzle
attribute.
.PP
Da \fBcan_change_color\fR routine requires no arguments, n' you can put dat on yo' toast.  It returns
\fBTRUE\fR if tha terminal supports flavas n' can chizzle they definitions;
other, it returns \fBFALSE\fR.  This routine facilitates writing
terminal-independent programs.
.PP
Da \fBcolor_content\fR routine gives programmers a way ta find tha intensity
of tha red, green, n' blue (RGB) components up in a cold-ass lil color. Shiiit, dis aint no joke.  It requires four
arguments: tha color number, n' three addressez of \fBshort\fRs fo' storing
the shiznit bout tha amountz of red, green, n' blue components up in the
given color. Shiiit, dis aint no joke.  Da value of tha straight-up original gangsta argument must be between 0 and
\fBCOLORS\fR.  Da joints dat is stored all up in tha addresses pointed ta by the
last three arguments is between 0 (no component) n' 1000 (maximum amount of
component).
.PP
Da \fBpair_content\fR routine allows programmers ta smoke up what tha fuck flavas a
given color-pair consists of.  It requires three arguments: tha color-pair
number, n' two addressez of \fBshort\fRs fo' storin tha foreground n' the
background color numbers.  Da value of tha straight-up original gangsta argument must be between 1
and \fBCOLOR_PAIRS\-1\fR.  Da joints dat is stored all up in tha addresses pointed
to by tha second n' third arguments is between 0 n' \fBCOLORS\fR.
.SS Colors
In \fB<curses.h>\fR tha followin macros is defined. Y'all KNOW dat shit, muthafucka!  These is tha default
colors.  \fBcurses\fR also assumes dat \fBCOLOR_BLACK\fR is tha default
background color fo' all terminals.
.PP
.nf
      \fBCOLOR_BLACK\fR
      \fBCOLOR_RED\fR
      \fBCOLOR_GREEN\fR
      \fBCOLOR_YELLOW\fR
      \fBCOLOR_BLUE\fR
      \fBCOLOR_MAGENTA\fR
      \fBCOLOR_CYAN\fR
      \fBCOLOR_WHITE\fR
.fi
.SH RETURN VALUE
Da routines \fBcan_change_color()\fR n' \fBhas_colors()\fR return \fBTRUE\fR
or \fBFALSE\fR.
.PP
All other routines return tha integer \fBERR\fR upon failure n' a \fBOK\fR
(SVr4 specifies only "an integer value other than \fBERR\fR") upon successful
completion.
.PP
X/Open defines no error conditions.
This implementation will return \fBERR\fR on attempts to
use color joints outside tha range 0 ta COLORS\-1
(except fo' tha default flavas extension),
or use color pairs outside tha range 0 ta COLOR_PAIRS\-1.
Color joints used up in \fBinit_color\fP must be up in tha range 0 ta 1000.
An error is returned from all functions
if tha terminal has not been initialized.
An error is returned from secondary functions like fuckin \fBinit_pair\fP
if \fBstart_color\fP was not called.
.RS 3
.TP 5
\fBinit_color\fP
returns a error if tha terminal do not support
this feature, e.g., if tha \fIinitialize_color\fP capabilitizzle be absent
from tha terminal description.
.TP 5
\fBstart_color\fP
returns a error if tha color table cannot be allocated.
.RE
.SH NOTES
In tha \fIncurses\fR implementation, there be a separate color activation flag,
color palette, color pairs table, n' associated COLORS n' COLOR_PAIRS counts
for each screen; tha \fBstart_color\fR function only affects tha current
screen. I aint talkin' bout chicken n' gravy biatch.  Da SVr4/XSI intercourse aint straight-up designed wit dis up in mind, and
historical implementations may bust a single shared color palette.
.PP
Note dat settin a implicit background color via a cold-ass lil color pair affects only
characta cells dat a cold-ass lil characta write operation explicitly touches.  To chizzle
the background color used when partz of a window is blanked by erasin or
scrollin operations, peep \fBcurs_bkgd\fR(3X).
.PP
Several caveats apply on 386 n' 486 machines wit VGA-compatible graphics:
.bP
COLOR_YELLOW is straight-up brown. I aint talkin' bout chicken n' gravy biatch.  To git yellow, use COLOR_YELLOW combined with
the \fBA_BOLD\fR attribute.
.bP
Da A_BLINK attribute should up in theory cause tha background ta go bright.  This
often fails ta work, n' even some cardz fo' which it mostly works (like fuckin the
Paradise n' compatibles) do tha wack thang when you try ta set a funky-ass bright
"yellow" background (you git a funky-ass blinkin yellow foreground instead).
.bP
Color RGB joints is not settable.
.SH PORTABILITY
This implementation satisfies XSI Cursess minimum maximums
for \fBCOLORS\fR n' \fBCOLOR_PAIRS\fR.
.PP
Da \fBinit_pair\fP routine accepts wack jointz of foreground
and background color ta support tha \fBuse_default_colors\fP extension,
but only if dat routine has been first invoked.
.PP
Da assumption dat \fBCOLOR_BLACK\fR is tha default
background color fo' all terminals can be modified rockin the
\fBassume_default_colors\fP extension.
.PP
This implementation checks tha pointers,
e.g., fo' tha joints returned by
\fBcolor_content\fP n' \fBpair_content\fP,
and will treat dem as optionizzle parametas when null.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_initscr\fR(3X),
\fBcurs_attr\fR(3X),
\fBcurs_variables\fR(3X),
\fBdefault_colors\fR(3X)
