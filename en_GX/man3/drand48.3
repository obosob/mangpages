.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified Sat Jul 24 19:46:03 1993 by Rik Faith (faith@cs.unc.edu)
.TH DRAND48 3  2013-06-21 "" "Linux Programmerz Manual"
.SH NAME
drand48, erand48, lrand48, nrand48, mrand48, jrand48, srand48, seed48,
lcong48 \- generate uniformly distributed pseudo-random numbers
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.B double drand48(void);
.sp
.BI "double erand48(unsigned short " xsubi [3]);
.sp
.B long int lrand48(void);
.sp
.BI "long int nrand48(unsigned short " xsubi [3]);
.sp
.B long int mrand48(void);
.sp
.BI "long int jrand48(unsigned short " xsubi [3]);
.sp
.BI "void srand48(long int " seedval );
.sp
.BI "unsigned short *seed48(unsigned short " seed16v [3]);
.sp
.BI "void lcong48(unsigned short " param [7]);
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.\" .BR drand48 (),
.\" .BR erand48 (),
.\" .BR lrand48 (),
.\" .BR nrand48 (),
.\" .BR mrand48 (),
.\" .BR jrand48 (),
.\" .BR srand48 (),
.\" .BR seed48 (),
.\" .BR lcong48 ():
_SVID_SOURCE || _XOPEN_SOURCE
.ad b
.SH DESCRIPTION
These functions generate pseudo-random numbers rockin tha linear congruential
algorithm n' 48-bit integer arithmetic.
.PP
The
.BR drand48 ()
and
.BR erand48 ()
functions return nonnegative
double-precision floating-point joints uniformly distributed between
[0.0, 1.0).
.PP
The
.BR lrand48 ()
and
.BR nrand48 ()
functions return nonnegative
long integers uniformly distributed between 0 n' 2^31.
.PP
The
.BR mrand48 ()
and
.BR jrand48 ()
functions return signed long
integers uniformly distributed between \-2^31 n' 2^31.
.PP
The
.BR srand48 (),
.BR seed48 ()
and
.BR lcong48 ()
functions are
initialization functions, one of which should be called before using
.BR drand48 (),
.BR lrand48 ()
or
.BR mrand48 ().
Da functions
.BR erand48 (),
.BR nrand48 ()
and
.BR jrand48 ()
do not require
an initialization function ta be called first.
.PP
All tha functions work by generatin a sequence of 48-bit integers,
.IR Xi ,
accordin ta tha linear congruential formula:
.sp
.nf
.RS
.B Xn+1 = (aXn + c) mod m,   where n >= 0
.RE
.fi
.sp
Da parameter
.I m
= 2^48, hence 48-bit integer arithmetic is performed.
Unless
.BR lcong48 ()
is called,
.IR a
and
.I c
are given by:
.sp
.nf
.RS
.B a = 0x5DEECE66D
.B c = 0xB
.RE
.fi
.sp
Da value returned by any of tha functions
.BR drand48 (),
.BR erand48 (),
.BR lrand48 (),
.BR nrand48 (),
.BR mrand48 ()
or
.BR jrand48 ()
is
computed by first generatin tha next 48-bit
.I Xi
in tha sequence.
Then tha appropriate number of bits, accordin ta tha type of data item to
be returned, is copied from tha high-order bits of
.I Xi
and transformed
into tha returned value.
.PP
Da functions
.BR drand48 (),
.BR lrand48 ()
and
.BR mrand48 ()
store
the last 48-bit
.I Xi
generated up in a internal buffer.
Da functions
.BR erand48 (),
.BR nrand48 ()
and
.BR jrand48 ()
require tha calling
program ta provide storage fo' tha successive
.I Xi
values up in tha array
argument
.IR xsubi .
Da functions is initialized by placin tha initial
value of
.I Xi
into tha array before callin tha function fo' tha first
time.
.PP
Da initializer function
.BR srand48 ()
sets tha high order 32-bits of
.I Xi
to tha argument
.IR seedval .
Da low order 16-bits is set
to tha arbitrary value 0x330E.
.PP
Da initializer function
.BR seed48 ()
sets tha value of
.I Xi
to
the 48-bit value specified up in tha array argument
.IR seed16v .
The
previous value of
.I Xi
is copied tha fuck into a internal buffer n' a
pointa ta dis buffer is returned by
.BR seed48 ().
.PP
Da initialization function
.BR lcong48 ()
allows tha user ta specify
initial joints for
.IR Xi ,
.I a
and
.IR c .
Array argument
elements
.I param[0-2]
specify
.IR Xi ,
.I param[3-5]
specify
.IR a ,
and
.I param[6]
specifies
.IR c .
After
.BR lcong48 ()
has been called, a subsequent call ta either
.BR srand48 ()
or
.BR seed48 ()
will restore tha standard joints of
.I a
and
.IR c .
.SH ATTRIBUTES
.SS Multithreadin (see pthreads(7))
The
.BR drand48 (),
.BR erand48 (),
.BR lrand48 (),
.BR nrand48 (),
.BR mrand48 (),
.BR jrand48 (),
.BR srand48 (),
.BR seed48 (),
and
.BR lcong48 ()
functions record global state shiznit fo' tha random number generator,
so they is not thread-safe.
.SH CONFORMING TO
SVr4, POSIX.1-2001.
.SH NOTES
These functions is declared obsolete by SVID 3, which states that
.BR rand (3)
should be used instead.
.SH SEE ALSO
.BR rand (3),
.BR random (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
