.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::File 3pm"
.TH IO::File 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::File \- supply object methodz fo' filehandles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::File;
\&
\&    $fh = IO::File\->new();
\&    if ($fh\->open("< file")) {
\&        print <$fh>;
\&        $fh\->close;
\&    }
\&
\&    $fh = IO::File\->new("> file");
\&    if (defined $fh) {
\&        print $fh "bar\en";
\&        $fh\->close;
\&    }
\&
\&    $fh = IO::File\->new("file", "r");
\&    if (defined $fh) {
\&        print <$fh>;
\&        undef $fh;       # automatically closes tha file
\&    }
\&
\&    $fh = IO::File\->new("file", O_WRONLY|O_APPEND);
\&    if (defined $fh) {
\&        print $fh "corge\en";
\&
\&        $pos = $fh\->getpos;
\&        $fh\->setpos($pos);
\&
\&        undef $fh;       # automatically closes tha file
\&    }
\&
\&    autoflush STDOUT 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::File\*(C'\fR inherits from \f(CW\*(C`IO::Handle\*(C'\fR n' \f(CW\*(C`IO::Seekable\*(C'\fR. Well shiiiit, it extends
these classes wit methodz dat is specific ta file handles.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( \s-1FILENAME\s0 [,MODE [,PERMS]] )" 4
.IX Item "new ( FILENAME [,MODE [,PERMS]] )"
Creates a \f(CW\*(C`IO::File\*(C'\fR.  If it receives any parameters, they is passed to
the method \f(CW\*(C`open\*(C'\fR; if tha open fails, tha object is destroyed. Y'all KNOW dat shit, muthafucka!  Otherwise,
it is moonwalked back ta tha caller.
.IP "new_tmpfile" 4
.IX Item "new_tmpfile"
Creates a \f(CW\*(C`IO::File\*(C'\fR opened fo' read/write on a newly pimped temporary
file.  On systems where dis is possible, tha temporary file be anonymous
(i.e. it is unlinked afta creation yo, but held open).  If tha temporary
file cannot be pimped or opened, tha \f(CW\*(C`IO::File\*(C'\fR object is destroyed.
Otherwise, it is moonwalked back ta tha caller.
.SH "METHODS"
.IX Header "METHODS"
.IP "open( \s-1FILENAME\s0 [,MODE [,PERMS]] )" 4
.IX Item "open( FILENAME [,MODE [,PERMS]] )"
.PD 0
.IP "open( \s-1FILENAME, IOLAYERS \s0)" 4
.IX Item "open( FILENAME, IOLAYERS )"
.PD
\&\f(CW\*(C`open\*(C'\fR accepts one, two or three parameters.  With one parameter,
it is just a gangbangin' front end fo' tha built-in \f(CW\*(C`open\*(C'\fR function. I aint talkin' bout chicken n' gravy biatch.  With two or three
parameters, tha straight-up original gangsta parameta be a gangbangin' filename dat may include
whitespace or other special characters, n' tha second parameta is
the open mode, optionally followed by a gangbangin' file permission value.
.Sp
If \f(CW\*(C`IO::File::open\*(C'\fR receives a Perl mode strang (\*(L">\*(R", \*(L"+<\*(R", etc.)
or a \s-1ANSI C\s0 \fIfopen()\fR mode strang (\*(L"w\*(R", \*(L"r+\*(R", etc.), it uses tha basic
Perl \f(CW\*(C`open\*(C'\fR operator (but protects any special characters).
.Sp
If \f(CW\*(C`IO::File::open\*(C'\fR is given a numeric mode, it passes dat mode
and tha optionizzle permissions value ta tha Perl \f(CW\*(C`sysopen\*(C'\fR operator.
Da permissions default ta 0666.
.Sp
If \f(CW\*(C`IO::File::open\*(C'\fR is given a mode dat includes tha \f(CW\*(C`:\*(C'\fR character,
it passes all tha three arguments ta tha three-argument \f(CW\*(C`open\*(C'\fR operator.
.Sp
For convenience, \f(CW\*(C`IO::File\*(C'\fR exports tha O_XXX constants from the
Fcntl module, if dis module be available.
.IP "binmode( [\s-1LAYER\s0] )" 4
.IX Item "binmode( [LAYER] )"
\&\f(CW\*(C`binmode\*(C'\fR sets \f(CW\*(C`binmode\*(C'\fR on tha underlyin \f(CW\*(C`IO\*(C'\fR object, as documented
in \f(CW\*(C`perldoc \-f binmode\*(C'\fR.
.Sp
\&\f(CW\*(C`binmode\*(C'\fR accepts one optionizzle parameter, which is tha layer ta be
passed on ta tha \f(CW\*(C`binmode\*(C'\fR call.
.SH "NOTE"
.IX Header "NOTE"
Some operatin systems may big-ass up  \f(CW\*(C`IO::File::new()\*(C'\fR or \f(CW\*(C`IO::File::open()\*(C'\fR
on a gangbangin' finger-lickin' directory without errors.  This behavior aint portable n' not
suggested fo' use.  Usin \f(CW\*(C`opendir()\*(C'\fR n' \f(CW\*(C`readdir()\*(C'\fR or \f(CW\*(C`IO::Dir\*(C'\fR are
suggested instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc, 
\&\*(L"I/O Operators\*(R" up in perlop,
IO::Handle,
IO::Seekable,
IO::Dir
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <\fIgbarr@pobox.com\fR>.
