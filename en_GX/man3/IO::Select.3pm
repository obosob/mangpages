.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Select 3pm"
.TH IO::Select 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Select \- OO intercourse ta tha select system call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Select;
\&
\&    $s = IO::Select\->new();
\&
\&    $s\->add(\e*STDIN);
\&    $s\->add($some_handle);
\&
\&    @ready = $s\->can_read($timeout);
\&
\&    @ready = IO::Select\->new(@handles)\->can_read(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`IO::Select\*(C'\fR package implements a object approach ta tha system \f(CW\*(C`select\*(C'\fR
function call. Well shiiiit, it allows tha user ta peep what tha fuck \s-1IO\s0 handles, peep IO::Handle,
are locked n loaded fo' reading, freestylin or have a exception pending.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [ \s-1HANDLES \s0] )" 4
.IX Item "new ( [ HANDLES ] )"
Da constructor creates a freshly smoked up object n' optionally initialises it wit a set
of handles.
.SH "METHODS"
.IX Header "METHODS"
.IP "add ( \s-1HANDLES \s0)" 4
.IX Item "add ( HANDLES )"
Add tha list of handlez ta tha \f(CW\*(C`IO::Select\*(C'\fR object. Well shiiiit, it is these joints that
will be returned when a event occurs. \f(CW\*(C`IO::Select\*(C'\fR keeps these joints up in a
cache which is indexed by tha \f(CW\*(C`fileno\*(C'\fR of tha handle, so if mo' than one
handle wit tha same \f(CW\*(C`fileno\*(C'\fR is specified then only tha last one is cached.
.Sp
Each handle can be a \f(CW\*(C`IO::Handle\*(C'\fR object, a integer or a array
reference where tha straight-up original gangsta element be a \f(CW\*(C`IO::Handle\*(C'\fR or a integer.
.IP "remove ( \s-1HANDLES \s0)" 4
.IX Item "remove ( HANDLES )"
Remove all tha given handlez from tha object. This method also works
by tha \f(CW\*(C`fileno\*(C'\fR of tha handles. Right back up in yo muthafuckin ass. So tha exact handlez dat was added
need not be passed, just handlez dat have a equivalent \f(CW\*(C`fileno\*(C'\fR
.IP "exists ( \s-1HANDLE \s0)" 4
.IX Item "exists ( HANDLE )"
Returns a legit value (actually tha handle itself) if it is present.
Returns undef otherwise.
.IP "handles" 4
.IX Item "handles"
Return a array of all registered handles.
.IP "can_read ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_read ( [ TIMEOUT ] )"
Return a array of handlez dat is locked n loaded fo' reading. \f(CW\*(C`TIMEOUT\*(C'\fR is
the maximum amount of time ta wait before returnin a empty list, in
seconds, possibly fractional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If \f(CW\*(C`TIMEOUT\*(C'\fR aint given n' any
handlez is registered then tha call will block.
.IP "can_write ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_write ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check fo' handlez dat can be freestyled to.
.IP "has_exception ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "has_exception ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check fo' handlez dat have a exception
condition, fo' example pendin out-of-band data.
.IP "count ()" 4
.IX Item "count ()"
Returns tha number of handlez dat tha object will check fo' when
one of tha \f(CW\*(C`can_\*(C'\fR methodz is called or tha object is passed to
the \f(CW\*(C`select\*(C'\fR static method.
.IP "\fIbits()\fR" 4
.IX Item "bits()"
Return tha bit strang suitable as argument ta tha core \fIselect()\fR call.
.IP "select ( \s-1READ, WRITE, EXCEPTION\s0 [, \s-1TIMEOUT \s0] )" 4
.IX Item "select ( READ, WRITE, EXCEPTION [, TIMEOUT ] )"
\&\f(CW\*(C`select\*(C'\fR be a static method, dat is you call it wit tha package name
like \f(CW\*(C`new\*(C'\fR. \f(CW\*(C`READ\*(C'\fR, \f(CW\*(C`WRITE\*(C'\fR n' \f(CW\*(C`EXCEPTION\*(C'\fR is either \f(CW\*(C`undef\*(C'\fR or
\&\f(CW\*(C`IO::Select\*(C'\fR objects, n' you can put dat on yo' toast. \f(CW\*(C`TIMEOUT\*(C'\fR is optionizzle n' has tha same ol' dirty effect as
for tha core select call.
.Sp
Da result is ghon be a array of 3 elements, each a reference ta a array
which will hold tha handlez dat is locked n loaded fo' reading, freestylin n' have
exceptions respectively. Upon error a empty list is returned.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here be a gangbangin' finger-lickin' dirty-ass short example which shows how tha fuck \f(CW\*(C`IO::Select\*(C'\fR could be used
to write a server which communicates wit nuff muthafuckin sockets while also
listenin fo' mo' connections on a listen socket
.PP
.Vb 2
\&    use IO::Select;
\&    use IO::Socket;
\&
\&    $lsn = IO::Socket::INET\->new(Listen => 1, LocalPort => 8080);
\&    $sel = IO::Select\->new( $lsn );
\&
\&    while(@ready = $sel\->can_read) {
\&        foreach $fh (@ready) {
\&            if($fh == $lsn) {
\&                # Smoke a freshly smoked up socket
\&                $new = $lsn\->accept;
\&                $sel\->add($new);
\&            }
\&            else {
\&                # Process socket
\&
\&                # Maybe our crazy asses have finished wit tha socket
\&                $sel\->remove($fh);
\&                $fh\->close;
\&            }
\&        }
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Shiiit, dis aint no joke. Currently maintained by tha Perl Porters.  Please report all
bugs ta <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com> fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
