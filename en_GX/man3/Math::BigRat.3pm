.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigRat 3pm"
.TH Math::BigRat 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigRat \- Arbitrary big-ass rationizzle numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::BigRat;
\&
\&        mah $x = Math::BigRat\->new(\*(Aq3/7\*(Aq); $x += \*(Aq5/9\*(Aq;
\&
\&        print $x\->bstr(),"\en";
\&        print $x ** 2,"\en";
\&
\&        mah $y = Math::BigRat\->new(\*(Aqinf\*(Aq);
\&        print "$y ", ($y\->is_inf , biatch? \*(Aqis\*(Aq : \*(Aqis not\*(Aq) , " infinity\en";
\&
\&        mah $z = Math::BigRat\->new(144); $z\->bsqrt();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Math::BigRat complements Math::BigInt n' Math::BigFloat by providin support
for arbitrary big-ass rationizzle numbers.
.SS "\s-1MATH LIBRARY\s0"
.IX Subsection "MATH LIBRARY"
Yo ass can chizzle tha underlyin module dat do tha low-level
math operations by using:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqGMP\*(Aq;
.Ve
.PP
Note: This needz Math::BigInt::GMP installed.
.PP
Da followin would first try ta find Math::BigInt::Foo, then
Math::BigInt::Bar, n' when dis also fails, revert ta Math::BigInt::Calc:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you wanna git warned when tha fallback occurs, replace \*(L"try\*(R" with
\&\*(L"lib\*(R":
.PP
.Vb 1
\&        use Math::BigRat lib => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you want tha code ta take a thugged-out dirtnap instead, replace \*(L"try\*(R" with
\&\*(L"only\*(R":
.PP
.Vb 1
\&        use Math::BigRat only => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Any methodz not listed here is derived from Math::BigFloat (or
Math::BigInt), so make shizzle you check these two modulez fo' further
information.
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);
.Ve
.PP
Smoke a freshly smoked up Math::BigRat object. Input can come up in various forms:
.PP
.Vb 9
\&        $x = Math::BigRat\->new(123);                            # scalars
\&        $x = Math::BigRat\->new(\*(Aqinf\*(Aq);                          # infinity
\&        $x = Math::BigRat\->new(\*(Aq123.3\*(Aq);                        # float
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);                          # simple string
\&        $x = Math::BigRat\->new(\*(Aq1 / 3\*(Aq);                        # spaced
\&        $x = Math::BigRat\->new(\*(Aq1 / 0.1\*(Aq);                      # w/ floats
\&        $x = Math::BigRat\->new(Math::BigInt\->new(3));           # BigInt
\&        $x = Math::BigRat\->new(Math::BigFloat\->new(\*(Aq3.1\*(Aq));     # BigFloat
\&        $x = Math::BigRat\->new(Math::BigInt::Lite\->new(\*(Aq2\*(Aq));   # BigLite
\&
\&        # Yo ass can also give D n' N as different objects:
\&        $x = Math::BigRat\->new(
\&                Math::BigInt\->new(\-123),
\&                Math::BigInt\->new(7),
\&                );                      # => \-123/7
.Ve
.SS "\fInumerator()\fP"
.IX Subsection "numerator()"
.Vb 1
\&        $n = $x\->numerator();
.Ve
.PP
Returns a cold-ass lil copy of tha numerator (the part above tha line) as signed BigInt.
.SS "\fIdenominator()\fP"
.IX Subsection "denominator()"
.Vb 1
\&        $d = $x\->denominator();
.Ve
.PP
Returns a cold-ass lil copy of tha denominator (the part under tha line) as positizzle BigInt.
.SS "\fIparts()\fP"
.IX Subsection "parts()"
.Vb 1
\&        ($n,$d) = $x\->parts();
.Ve
.PP
Return a list consistin of (signed) numerator n' (unsigned) denominator as
BigInts.
.SS "\fInumify()\fP"
.IX Subsection "numify()"
.Vb 1
\&        mah $y = $x\->numify();
.Ve
.PP
Returns tha object as a scalar. Shiiit, dis aint no joke. This will lose some data if tha object
cannot be represented by a aiiight Perl scalar (integer or float), so
use \fIas_int()\fR or \*(L"\fIas_float()\fR\*(R" instead.
.PP
This routine be automatically used whenever a scalar is required:
.PP
.Vb 3
\&        mah $x = Math::BigRat\->new(\*(Aq3/1\*(Aq);
\&        @array = (0,1,2,3);
\&        $y = $array[$x];                # set $y ta 3
.Ve
.SS "\fIas_int()\fP/\fIas_number()\fP"
.IX Subsection "as_int()/as_number()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_int(),"\en";                # \*(Aq1\*(Aq
.Ve
.PP
Returns a cold-ass lil copy of tha object as BigInt, truncated ta a integer.
.PP
\&\f(CW\*(C`as_number()\*(C'\fR be a alias fo' \f(CW\*(C`as_int()\*(C'\fR.
.SS "\fIas_float()\fP"
.IX Subsection "as_float()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_float(),"\en";              # \*(Aq1\*(Aq
\&
\&        $x = Math::BigRat\->new(\*(Aq2/3\*(Aq);
\&        print $x\->as_float(5),"\en";             # \*(Aq0.66667\*(Aq
.Ve
.PP
Returns a cold-ass lil copy of tha object as BigFloat, preservin the
accuracy as wanted, or tha default of 40 digits.
.PP
This method was added up in v0.22 of Math::BigRat (April 2008).
.SS "\fIas_hex()\fP"
.IX Subsection "as_hex()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_hex(),"\en";                # \*(Aq0xd\*(Aq
.Ve
.PP
Returns tha BigRat as hexadecimal string. Works only fo' integers.
.SS "\fIas_bin()\fP"
.IX Subsection "as_bin()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_bin(),"\en";                # \*(Aq0x1101\*(Aq
.Ve
.PP
Returns tha BigRat as binary string. Works only fo' integers.
.SS "\fIas_oct()\fP"
.IX Subsection "as_oct()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_oct(),"\en";                # \*(Aq015\*(Aq
.Ve
.PP
Returns tha BigRat as octal string. Works only fo' integers.
.SS "\fIfrom_hex()\fP/\fIfrom_bin()\fP/\fIfrom_oct()\fP"
.IX Subsection "from_hex()/from_bin()/from_oct()"
.Vb 3
\&        mah $h = Math::BigRat\->from_hex(\*(Aq0x10\*(Aq);
\&        mah $b = Math::BigRat\->from_bin(\*(Aq0b10000000\*(Aq);
\&        mah $o = Math::BigRat\->from_oct(\*(Aq020\*(Aq);
.Ve
.PP
Smoke a BigRat from a hexadecimal, binary or octal number
in strang form.
.SS "\fIlength()\fP"
.IX Subsection "length()"
.Vb 1
\&        $len = $x\->length();
.Ve
.PP
Return tha length of \f(CW$x\fR up in digits fo' integer joints.
.SS "\fIdigit()\fP"
.IX Subsection "digit()"
.Vb 2
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(1);     # 1
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(\-1);    # 3
.Ve
.PP
Return tha N'ths digit from X when X be a integer value.
.SS "\fIbnorm()\fP"
.IX Subsection "bnorm()"
.Vb 1
\&        $x\->bnorm();
.Ve
.PP
Reduce tha number ta tha shortest form. This routine is called
automatically whenever it is needed.
.SS "\fIbfac()\fP"
.IX Subsection "bfac()"
.Vb 1
\&        $x\->bfac();
.Ve
.PP
Calculates tha factorial of \f(CW$x\fR. For instance:
.PP
.Vb 2
\&        print Math::BigRat\->new(\*(Aq3/1\*(Aq)\->bfac(),"\en";    # 1*2*3
\&        print Math::BigRat\->new(\*(Aq5/1\*(Aq)\->bfac(),"\en";    # 1*2*3*4*5
.Ve
.PP
Works currently only fo' integers.
.SS "\fIbround()\fP/\fIround()\fP/\fIbfround()\fP"
.IX Subsection "bround()/round()/bfround()"
Is not yet implemented.
.SS "\fIbmod()\fP"
.IX Subsection "bmod()"
.Vb 4
\&        use Math::BigRat;
\&        mah $x = Math::BigRat\->new(\*(Aq7/4\*(Aq);
\&        mah $y = Math::BigRat\->new(\*(Aq4/3\*(Aq);
\&        print $x\->bmod($y);
.Ve
.PP
Set \f(CW$x\fR ta tha remainder of tha division of \f(CW$x\fR by \f(CW$y\fR.
.SS "\fIbneg()\fP"
.IX Subsection "bneg()"
.Vb 1
\&        $x\->bneg();
.Ve
.PP
Used ta negate tha object in-place.
.SS "\fIis_one()\fP"
.IX Subsection "is_one()"
.Vb 1
\&        print "$x is 1\en" if $x\->is_one();
.Ve
.PP
Return legit if \f(CW$x\fR is exactly one, otherwise false.
.SS "\fIis_zero()\fP"
.IX Subsection "is_zero()"
.Vb 1
\&        print "$x is 0\en" if $x\->is_zero();
.Ve
.PP
Return legit if \f(CW$x\fR is exactly zero, otherwise false.
.SS "\fIis_pos()\fP/\fIis_positive()\fP"
.IX Subsection "is_pos()/is_positive()"
.Vb 1
\&        print "$x is >= 0\en" if $x\->is_positive();
.Ve
.PP
Return legit if \f(CW$x\fR is positizzle (greata than or equal ta zero), otherwise
false. Please note dat '+inf' be also positive, while 'NaN' n' '\-inf' aren't.
.PP
\&\f(CW\*(C`is_positive()\*(C'\fR be a alias fo' \f(CW\*(C`is_pos()\*(C'\fR.
.SS "\fIis_neg()\fP/\fIis_negative()\fP"
.IX Subsection "is_neg()/is_negative()"
.Vb 1
\&        print "$x is < 0\en" if $x\->is_negative();
.Ve
.PP
Return legit if \f(CW$x\fR is wack (smalla than zero), otherwise false. Please
note dat '\-inf' be also negative, while 'NaN' n' '+inf' aren't.
.PP
\&\f(CW\*(C`is_negative()\*(C'\fR be a alias fo' \f(CW\*(C`is_neg()\*(C'\fR.
.SS "\fIis_int()\fP"
.IX Subsection "is_int()"
.Vb 1
\&        print "$x be a integer\en" if $x\->is_int();
.Ve
.PP
Return legit if \f(CW$x\fR has a thugged-out denominator of 1 (e.g. no fraction parts), otherwise
false. Please note dat '\-inf', 'inf' n' 'NaN' aren't integer.
.SS "\fIis_odd()\fP"
.IX Subsection "is_odd()"
.Vb 1
\&        print "$x is odd\en" if $x\->is_odd();
.Ve
.PP
Return legit if \f(CW$x\fR is odd, otherwise false.
.SS "\fIis_even()\fP"
.IX Subsection "is_even()"
.Vb 1
\&        print "$x is even\en" if $x\->is_even();
.Ve
.PP
Return legit if \f(CW$x\fR is even, otherwise false.
.SS "\fIbceil()\fP"
.IX Subsection "bceil()"
.Vb 1
\&        $x\->bceil();
.Ve
.PP
Set \f(CW$x\fR ta tha next bigger integer value (e.g. truncate tha number ta integer
and then increment it by one).
.SS "\fIbfloor()\fP"
.IX Subsection "bfloor()"
.Vb 1
\&        $x\->bfloor();
.Ve
.PP
Truncate \f(CW$x\fR ta a integer value.
.SS "\fIbsqrt()\fP"
.IX Subsection "bsqrt()"
.Vb 1
\&        $x\->bsqrt();
.Ve
.PP
Calculate tha square root of \f(CW$x\fR.
.SS "\fIbroot()\fP"
.IX Subsection "broot()"
.Vb 1
\&        $x\->broot($n);
.Ve
.PP
Calculate tha N'th root of \f(CW$x\fR.
.SS "\fIbadd()\fP/\fIbmul()\fP/\fIbsub()\fP/\fIbdiv()\fP/\fIbdec()\fP/\fIbinc()\fP"
.IX Subsection "badd()/bmul()/bsub()/bdiv()/bdec()/binc()"
Please peep tha documentation up in Math::BigInt.
.SS "\fIcopy()\fP"
.IX Subsection "copy()"
.Vb 1
\&        mah $z = $x\->copy();
.Ve
.PP
Makes a thugged-out deep copy of tha object.
.PP
Please peep tha documentation up in Math::BigInt fo' further details.
.SS "\fIbstr()\fP/\fIbsstr()\fP"
.IX Subsection "bstr()/bsstr()"
.Vb 3
\&        mah $x = Math::BigInt\->new(\*(Aq8/4\*(Aq);
\&        print $x\->bstr(),"\en";                  # prints 1/2
\&        print $x\->bsstr(),"\en";                 # prints 1/2
.Ve
.PP
Return a strang representin dis object.
.SS "\fIbacmp()\fP/\fIbcmp()\fP"
.IX Subsection "bacmp()/bcmp()"
Used ta compare numbers.
.PP
Please peep tha documentation up in Math::BigInt fo' further details.
.SS "\fIblsft()\fP/\fIbrsft()\fP"
.IX Subsection "blsft()/brsft()"
Used ta shift numbers left/right.
.PP
Please peep tha documentation up in Math::BigInt fo' further details.
.SS "\fIbpow()\fP"
.IX Subsection "bpow()"
.Vb 1
\&        $x\->bpow($y);
.Ve
.PP
Compute \f(CW$x\fR ** \f(CW$y\fR.
.PP
Please peep tha documentation up in Math::BigInt fo' further details.
.SS "\fIbexp()\fP"
.IX Subsection "bexp()"
.Vb 1
\&        $x\->bexp($accuracy);            # calculate e ** X
.Ve
.PP
Calculates two integers A n' B so dat A/B is equal ta \f(CW\*(C`e ** $x\*(C'\fR, where \f(CW\*(C`e\*(C'\fR is
Eulerz number.
.PP
This method was added up in v0.20 of Math::BigRat (May 2007).
.PP
See also \*(L"\fIblog()\fR\*(R".
.SS "\fIbnok()\fP"
.IX Subsection "bnok()"
.Vb 1
\&        $x\->bnok($y);              # x over y (binomial coefficient n over k)
.Ve
.PP
Calculates tha binomial coefficient n over k, also called tha \*(L"choose\*(R"
function. I aint talkin' bout chicken n' gravy biatch. Da result is equivalent to:
.PP
.Vb 3
\&        ( n )      n!
\&        | \- |  = \-\-\-\-\-\-\-
\&        ( k )    k!(n\-k)!
.Ve
.PP
This method was added up in v0.20 of Math::BigRat (May 2007).
.SS "\fIconfig()\fP"
.IX Subsection "config()"
.Vb 1
\&        use Data::Dumper;
\&
\&        print Dumper ( Math::BigRat\->config() );
\&        print Math::BigRat\->config()\->{lib},"\en";
.Ve
.PP
Returns a hash containin tha configuration, e.g. tha version number, lib
loaded etc. Da followin hash keys is currently filled up in wit the
appropriate shiznit.
.PP
.Vb 10
\&        key             RO/RW   Description
\&                                Example
\&        ============================================================
\&        lib             RO      Name of tha Math library
\&                                Math::BigInt::Calc
\&        lib_version     RO      Version of \*(Aqlib\*(Aq
\&                                0.30
\&        class           RO      Da class of config you just called
\&                                Math::BigRat
\&        version         RO      version number of tha class you used
\&                                0.10
\&        upgrade         RW      To which class numbers is upgraded
\&                                undef
\&        downgrade       RW      To which class numbers is downgraded
\&                                undef
\&        precision       RW      Global precision
\&                                undef
\&        accuracy        RW      Global accuracy
\&                                undef
\&        round_mode      RW      Global round mode
\&                                even
\&        div_scale       RW      Fallback accuracy fo' div
\&                                40
\&        trap_nan        RW      Trap creation of NaN (undef = no)
\&                                undef
\&        trap_inf        RW      Trap creation of +inf/\-inf (undef = no)
\&                                undef
.Ve
.PP
By passin a reference ta a hash you may set tha configuration joints, n' you can put dat on yo' toast. This
works only fo' joints dat a marked wit a \f(CW\*(C`RW\*(C'\fR above, anythang else is
read-only.
.SS "\fIobjectify()\fP"
.IX Subsection "objectify()"
This be a internal routine dat turns scalars tha fuck into objects.
.SH "BUGS"
.IX Header "BUGS"
Some thangs is not yet implemented, or only implemented half-way:
.IP "inf handlin (partial)" 2
.IX Item "inf handlin (partial)"
.PD 0
.IP "NaN handlin (partial)" 2
.IX Item "NaN handlin (partial)"
.IP "roundin (not implemented except fo' bceil/bfloor)" 2
.IX Item "roundin (not implemented except fo' bceil/bfloor)"
.ie n .IP "$x ** $y where $y aint a integer" 2
.el .IP "\f(CW$x\fR ** \f(CW$y\fR where \f(CW$y\fR aint a integer" 2
.IX Item "$x ** $y where $y aint a integer"
.IP "\fIbmod()\fR, \fIblog()\fR, \fIbmodinv()\fR n' \fIbmodpow()\fR (partial)" 2
.IX Item "bmod(), blog(), bmodinv() n' bmodpow() (partial)"
.PD
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat n' Math::Big as well as
Math::BigInt::Pari n'  Math::BigInt::GMP.
.PP
See <http://search.cpan.org/search?dist=bignum> fo' a way ta use
Math::BigRat.
.PP
Da package at <http://search.cpan.org/search?dist=Math%3A%3ABigRat>
may contain mo' documentation n' examplez as well as testcases.
.SH "AUTHORS"
.IX Header "AUTHORS"
(C) by Tels <http://bloodgate.com/> 2001 \- 2009.
.PP
Currently maintained by Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> <http://leto.net>
