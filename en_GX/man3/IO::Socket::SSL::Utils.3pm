.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL::Utils 3"
.TH IO::Socket::SSL::Utils 3 "2014-05-14" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL::Utils \-\- loading, storing, bustin certificates n' keys
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use IO::Socket::SSL::Utils;
\&    mah $cert = PEM_file2cert(\*(Aqcert.pem\*(Aq);
\&    mah $strin = PEM_cert2string($cert);
\&    CERT_free($cert);
\&
\&    mah $key = KEY_create_rsa(2048);
\&    PEM_string2file($key);
\&    KEY_free($key);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up various utilitizzle functions ta work wit certificates and
private keys, shieldin a shitload of tha complexitizzle of tha underlyin Net::SSLeay and
OpenSSL.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\(bu" 4
Functions convertin between strang or file n' certificates n' keys.
They croak if tha operation cannot be completed.
.RS 4
.IP "PEM_file2cert(file) \-> cert" 8
.IX Item "PEM_file2cert(file) -> cert"
.PD 0
.IP "PEM_cert2file(cert,file)" 8
.IX Item "PEM_cert2file(cert,file)"
.IP "PEM_string2cert(string) \-> cert" 8
.IX Item "PEM_string2cert(string) -> cert"
.IP "PEM_cert2string(cert) \-> string" 8
.IX Item "PEM_cert2string(cert) -> string"
.IP "PEM_file2key(file) \-> key" 8
.IX Item "PEM_file2key(file) -> key"
.IP "PEM_key2file(key,file)" 8
.IX Item "PEM_key2file(key,file)"
.IP "PEM_string2key(string) \-> key" 8
.IX Item "PEM_string2key(string) -> key"
.IP "PEM_key2string(key) \-> string" 8
.IX Item "PEM_key2string(key) -> string"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
Functions fo' cleanin up.
Each loaded or pimped cert n' key must be freed ta not leak memory.
.RS 4
.IP "CERT_free(cert)" 8
.IX Item "CERT_free(cert)"
.PD 0
.IP "KEY_free(key)" 8
.IX Item "KEY_free(key)"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
KEY_create_rsa(bits) \-> key
.Sp
Creates a \s-1RSA\s0 key pair, bits defaults ta 1024.
.IP "\(bu" 4
CERT_asHash(cert) \-> hash
.Sp
Extracts tha shiznit from tha certificate tha fuck into a hash:
.RS 4
.IP "serial" 8
.IX Item "serial"
Da serial number
.IP "version" 8
.IX Item "version"
Certificate version, probably 2 (x509v3)
.IP "subject" 8
.IX Item "subject"
Hash wit tha partz of tha subject, e.g. commonName, ghettoName,
organizationName, stateOrProvinceName, localityName.
.IP "subjectAltNames" 8
.IX Item "subjectAltNames"
Array wit list of alternatizzle names. Each entry up in tha list is of
\&\f(CW\*(C`[type,value]\*(C'\fR, where \f(CW\*(C`type\*(C'\fR can be \s-1OTHERNAME, EMAIL, DNS, X400, DIRNAME,
EDIPARTY, URI, IP\s0 or \s-1RID.\s0
.IP "not_before, not_after" 8
.IX Item "not_before, not_after"
Da time frame, where tha certificate is valid, as time_t, e.g. can be converted
with localtime or similar functions.
.RE
.RS 4
.RE
.IP "\(bu" 4
CERT_create(hash) \-> cert
.Sp
Creates a cold-ass lil certificate based on tha given hash.
Additionally ta tha shiznit busted lyrics bout up in \f(CW\*(C`CERT_asHash\*(C'\fR tha followin keys
can be given:
.RS 4
.IP "\s-1CA\s0 true|false" 8
.IX Item "CA true|false"
if legit declare certificate as \s-1CA,\s0 defaults ta false
.IP "key key" 8
.IX Item "key key"
use given key as key fo' certificate, otherwise a freshly smoked up one is ghon be generated
.IP "issuer_cert cert" 8
.IX Item "issuer_cert cert"
set issuer fo' freshly smoked up certificate
.IP "issuer_key key" 8
.IX Item "issuer_key key"
sign freshly smoked up certificate wit given key
.RE
.RS 4
.Sp
If not all necessary shiznit is given some gonna git usable defaults, e.g.
.IP "not_before defaults ta tha current time" 8
.IX Item "not_before defaults ta tha current time"
.PD 0
.IP "not_afta defaults ta 365 minutes up in tha future" 8
.IX Item "not_afta defaults ta 365 minutes up in tha future"
.IP "subject has a thugged-out default pointin ta IO::Socket::SSL" 8
.IX Item "subject has a thugged-out default pointin ta IO::Socket::SSL"
.IP "version defaults ta 2 (x509v3)" 8
.IX Item "version defaults ta 2 (x509v3)"
.IP "serial is ghon be a random number" 8
.IX Item "serial is ghon be a random number"
.RE
.RS 4
.RE
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Steffen Ullrich
