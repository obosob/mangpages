'\" t
.\"     Title: gluTessCallback
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLUTESSCALLBACK" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gluTessCallback \- define a cold-ass lil callback fo' a tessellation object
.SH "C SPECIFICATION"
.HP \w'void\ gluTessCallback('u
.BI "void gluTessCallback(GLUtesselator*\ " "tess" ", GLenum\ " "which" ", _GLUfuncptr\ " "CallBackFunc" ");"
.SH "PARAMETERS"
.PP
\fItess\fR
.RS 4
Specifies tha tessellation object (created with
\fBgluNewTess\fR())\&.
.RE
.PP
\fIwhich\fR
.RS 4
Specifies tha callback bein defined\&. Da followin joints is valid:
\fBGLU_TESS_BEGIN\fR,
\fBGLU_TESS_BEGIN_DATA\fR,
\fBGLU_TESS_EDGE_FLAG\fR,
\fBGLU_TESS_EDGE_FLAG_DATA\fR,
\fBGLU_TESS_VERTEX\fR,
\fBGLU_TESS_VERTEX_DATA\fR,
\fBGLU_TESS_END\fR,
\fBGLU_TESS_END_DATA\fR,
\fBGLU_TESS_COMBINE\fR,
\fBGLU_TESS_COMBINE_DATA\fR,
\fBGLU_TESS_ERROR\fR, and
\fBGLU_TESS_ERROR_DATA\fR\&.
.RE
.PP
\fICallBackFunc\fR
.RS 4
Specifies tha function ta be called\&.
.RE
.SH "DESCRIPTION"
.PP
\fBgluTessCallback\fR
is used ta indicate a cold-ass lil callback ta be used by a tessellation object\&. If tha specified callback be already defined, then it is replaced\&. If
\fICallBackFunc\fR
is NULL, then tha existin callback becomes undefined\&.
.PP
These callbacks is used by tha tessellation object ta describe how tha fuck a polygon specified by tha user is fucked up tha fuck into triangles\&. Note dat there be two versionz of each callback: one wit user\-specified polygon data n' one without\&. If both versionz of a particular callback is specified, then tha callback wit user\-specified polygon data is ghon be used\&. Note dat the
\fIpolygon_data\fR
parameta used by a shitload of tha functions be a cold-ass lil copy of tha pointa dat was specified when
\fBgluTessBeginPolygon\fR()
was called\&. Da legal callbacks is as bigs up:
.PP
\fBGLU_TESS_BEGIN\fR
.RS 4
Da begin callback is invoked like
\fBglBegin\fR()
to indicate tha start of a (triangle) primitive\&. Da function takes a single argument of type GLenum\&. If the
\fBGLU_TESS_BOUNDARY_ONLY\fR
property is set to
\fBGLU_FALSE\fR, then tha argument is set ta either
\fBGLU_TRIANGLE_FAN\fR,
\fBGLU_TRIANGLE_STRIP\fR, or
\fBGLU_TRIANGLES\fR\&. If the
\fBGLU_TESS_BOUNDARY_ONLY\fR
property is set to
\fBGLU_TRUE\fR, then tha argument is ghon be set to
\fBGLU_LINE_LOOP\fR\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void begin( GLenum type );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_BEGIN_DATA\fR
.RS 4
Da same as the
\fBGLU_TESS_BEGIN\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa is identical ta tha opaque pointa provided when
\fBgluTessBeginPolygon\fR()
was called\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void beginData( GLenum type, void *polygon_data );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_EDGE_FLAG\fR
.RS 4
Da edge flag callback is similar to
\fBglEdgeFlag\fR()\&. Da function takes a single boolean flag dat indicates which edges lie on tha polygon boundary\&. If tha flag is
\fBGLU_TRUE\fR, then each vertex dat bigs up begins a edge dat lies on tha polygon boundary, dat is, a edge dat separates a interior region from a exterior one\&. If tha flag is
\fBGLU_FALSE\fR, then each vertex dat bigs up begins a edge dat lies up in tha polygon interior\&. Da edge flag callback (if defined) is invoked before tha straight-up original gangsta vertex callback\&.
.sp
Since triangle hustlas n' triangle strips do not support edge flags, tha begin callback aint called with
\fBGLU_TRIANGLE_FAN\fR
or
\fBGLU_TRIANGLE_STRIP\fR
if a non\-NULL edge flag callback is provided\&. (If tha callback is initialized ta NULL, there is no impact on performance)\&. Instead, tha hustlas n' strips is converted ta independent triangles\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void edgeFlag( GLboolean flag );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_EDGE_FLAG_DATA\fR
.RS 4
Da same as the
\fBGLU_TESS_EDGE_FLAG\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa is identical ta tha opaque pointa provided when
\fBgluTessBeginPolygon\fR()
was called\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void edgeFlagData( GLboolean flag, void *polygon_data );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_VERTEX\fR
.RS 4
Da vertex callback is invoked between tha begin n' end callbacks\&. Well shiiiit, it is similar to
\fBglVertex\fR(), n' it defines tha verticez of tha trianglez pimped by tha tessellation process\&. Da function takes a pointa as its only argument\&. This pointa is identical ta tha opaque pointa provided by tha user when tha vertex was busted lyrics bout (see
\fBgluTessVertex\fR())\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void vertex( void *vertex_data );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_VERTEX_DATA\fR
.RS 4
Da same as the
\fBGLU_TESS_VERTEX\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa is identical ta tha opaque pointa provided when
\fBgluTessBeginPolygon\fR()
was called\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void vertexData( void *vertex_data, void *polygon_data );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_END\fR
.RS 4
Da end callback serves tha same ol' dirty purpose as
\fBglEnd\fR()\&. Well shiiiit, it indicates tha end of a primitizzle n' it takes no arguments\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void end( void );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_END_DATA\fR
.RS 4
Da same as the
\fBGLU_TESS_END\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa is identical ta tha opaque pointa provided when
\fBgluTessBeginPolygon\fR()
was called\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void endData( void *polygon_data );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_COMBINE\fR
.RS 4
Da combine callback is called ta create a freshly smoked up vertex when tha tessellation detects a intersection or wishes ta merge features\&. Da function takes four arguments: a array of three elements each of type GLdouble, a array of four pointers, a array of four elements each of type GLfloat, n' a pointa ta a pointer\&. Da prototype is:
.sp
.if n \{\
.RS 4
.\}
.nf
void combine( GLdouble coords[3], void *vertex_data[4], 
              GLfloat weight[4], void **outData );
                        
.fi
.if n \{\
.RE
.\}
.sp
Da vertex is defined as a linear combination of up ta four existin vertices, stored in
\fIvertex_data\fR\&. Da coefficientz of tha linear combination is given by
\fIweight\fR; these weights always add up ta 1\& fo' realz. All vertex pointas is valid even when a shitload of tha weights is 0\&.
\fIcoords\fR
gives tha location of tha freshly smoked up vertex\&.
.sp
Da user must allocate another vertex, interpolate parametas using
\fIvertex_data\fR
and
\fIweight\fR, n' return tha freshly smoked up vertex pointa in
\fIoutData\fR\&. This handle is supplied durin renderin callbacks\&. Da user is responsible fo' freein tha memory some time after
\fBgluTessEndPolygon\fR()
is called\&.
.sp
For example, if tha polygon lies up in a arbitrary plane up in 3\-space, n' a cold-ass lil color be associated wit each vertex, the
\fBGLU_TESS_COMBINE\fR
callback might be lookin like this:
.sp
.if n \{\
.RS 4
.\}
.nf
void myCombine( GLdouble coords[3], VERTEX *d[4],
                GLfloat w[4], VERTEX **dataOut )
{
   VERTEX *new = new_vertex();

   new\->x = coords[0];
   new\->y = coords[1];
   new\->z = coords[2];
   new\->r = w[0]*d[0]\->r + w[1]*d[1]\->r + w[2]*d[2]\->r + w[3]*d[3]\->r;
   new\->g = w[0]*d[0]\->g + w[1]*d[1]\->g + w[2]*d[2]\->g + w[3]*d[3]\->g;
   new\->b = w[0]*d[0]\->b + w[1]*d[1]\->b + w[2]*d[2]\->b + w[3]*d[3]\->b;
   new\->a = w[0]*d[0]\->a + w[1]*d[1]\->a + w[2]*d[2]\->a + w[3]*d[3]\->a;
   *dataOut = new;
}
                        
.fi
.if n \{\
.RE
.\}
.sp
If tha tessellation detects a intersection, then the
\fBGLU_TESS_COMBINE\fR
or
\fBGLU_TESS_COMBINE_DATA\fR
callback (see below) must be defined, n' it must write a non\-NULL pointa into
\fIdataOut\fR\&. Otherwise the
\fBGLU_TESS_NEED_COMBINE_CALLBACK\fR
error occurs, n' no output is generated\&.
.RE
.PP
\fBGLU_TESS_COMBINE_DATA\fR
.RS 4
Da same as the
\fBGLU_TESS_COMBINE\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa is identical ta tha opaque pointa provided when
\fBgluTessBeginPolygon\fR()
was called\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void combineData( GLdouble coords[3], void *vertex_data[4], 
                  GLfloat weight[4], void **outData, 
                  void *polygon_data );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_TESS_ERROR\fR
.RS 4
Da error callback is called when a error is encountered\&. Da one argument iz of type GLenum; it indicates tha specific error dat occurred n' is ghon be set ta one of
\fBGLU_TESS_MISSING_BEGIN_POLYGON\fR,
\fBGLU_TESS_MISSING_END_POLYGON\fR,
\fBGLU_TESS_MISSING_BEGIN_CONTOUR\fR,
\fBGLU_TESS_MISSING_END_CONTOUR\fR,
\fBGLU_TESS_COORD_TOO_LARGE\fR,
\fBGLU_TESS_NEED_COMBINE_CALLBACK\fR, or
\fBGLU_OUT_OF_MEMORY\fR\&. Characta strings describin these errors can be retrieved wit the
\fBgluErrorString\fR()
call\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void error( GLenum errno );
                        
.fi
.if n \{\
.RE
.\}
.sp
Da GLU library will recover from tha straight-up original gangsta four errors by insertin tha missin call(s)\&.
\fBGLU_TESS_COORD_TOO_LARGE\fR
indicates dat some vertex coordinizzle exceeded tha predefined constant
\fBGLU_TESS_MAX_COORD\fR
in absolute value, n' dat tha value has been clamped\&. (Coordinizzle joints must be lil' small-ass enough so dat two can be multiplied together without overflow\&.)
\fBGLU_TESS_NEED_COMBINE_CALLBACK\fR
indicates dat tha tessellation detected a intersection between two edges up in tha input data, n' the
\fBGLU_TESS_COMBINE\fR
or
\fBGLU_TESS_COMBINE_DATA\fR
callback was not provided\&. No output is generated\&.
\fBGLU_OUT_OF_MEMORY\fR
indicates dat there aint enough memory so no output is generated\&.
.RE
.PP
\fBGLU_TESS_ERROR_DATA\fR
.RS 4
Da same as the
\fBGLU_TESS_ERROR\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa is identical ta tha opaque pointa provided when
\fBgluTessBeginPolygon\fR()
was called\&. Da function prototype fo' dis callback is:
.sp
.if n \{\
.RS 4
.\}
.nf
void errorData( GLenum errno, void *polygon_data );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "EXAMPLE"
.PP
Polygons tessellated can be rendered directly like this:
.sp
.if n \{\
.RS 4
.\}
.nf
gluTessCallback(tobj, GLU_TESS_BEGIN, glBegin);
gluTessCallback(tobj, GLU_TESS_VERTEX, glVertex3dv);
gluTessCallback(tobj, GLU_TESS_END, glEnd);
gluTessCallback(tobj, GLU_TESS_COMBINE, myCombine);
gluTessBeginPolygon(tobj, NULL);
   gluTessBeginContour(tobj);
      gluTessVertex(tobj, v, v);
      \&.\&.\&.
   gluTessEndContour(tobj);
gluTessEndPolygon(tobj);
            
.fi
.if n \{\
.RE
.\}
.sp
Typically, tha tessellated polygon should be stored up in a gangbangin' finger-lickin' display list so dat it do not need ta be retessellated every last muthafuckin time it is rendered\&.
.SH "SEE ALSO"
.PP
\fBgluErrorString\fR(),
\fBgluNewTess\fR(),
\fBgluTessBeginContour\fR(),
\fBgluTessBeginPolygon\fR(),
\fBgluTessNormal\fR(),
\fBgluTessProperty\fR(),
\fBgluTessVertex\fR(),
\fBglBegin\fR(),
\fBglEdgeFlag\fR(),
\fBglVertex\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
