.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Head::ListGroup 3"
.TH Mail::Message::Head::ListGroup 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Head::ListGroup \- mailinglist related header fields
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Head::ListGroup
\&   be a Mail::Message::Head::FieldGroup
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $lg = Mail::Message::Head::ListGroup\->new(head => $head, ...);
\& $head\->addListGroup($lg);
\&
\& mah $lg = $head\->addListGroup(...);
\&
\& $lg\->delete;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \fIlist group\fR be a set of header fieldz which is added by mailing-list
managin software.  This class knowns various details bout dat software.
.PP
Da knowledge n' test lyrics which is used ta initially implement
this module is taken from Mail::ListDetector, freestyled by
Mike Stevens <mailto:michael@etla.org>.  Da logic is redesigned to
add flexibilitizzle n' use tha bangin MailBox features.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBaddress\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaddress\fR()" 4
.IX Item "$obj->address()"
Returns a Mail::Message::Field::Address object (or \f(CW\*(C`undef\*(C'\fR) which
defines tha postin address of tha mailin list.
.ie n .IP "$obj\->\fBclone\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR()" 4
.IX Item "$obj->clone()"
See \*(L"Constructors\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfrom\fR(HEAD|MESSAGE)" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR(HEAD|MESSAGE)" 4
.IX Item "$obj->from(HEAD|MESSAGE)"
Smoke a \f(CW\*(C`Mail::Message::Head::ListGroup\*(C'\fR based up in tha specified \s-1MESSAGE\s0
or message \s-1HEAD.\s0
.ie n .IP "$obj\->\fBimplementedTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBimplementedTypes\fR()" 4
.IX Item "$obj->implementedTypes()"
.PD 0
.IP "Mail::Message::Head::ListGroup\->\fBimplementedTypes\fR()" 4
.IX Item "Mail::Message::Head::ListGroup->implementedTypes()"
.PD
See \*(L"Constructors\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBlistname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlistname\fR()" 4
.IX Item "$obj->listname()"
Returns tha name of tha mailin list, which is probably a part of the
e\-mail address which is used ta post tha lyrics to.
.IP "Mail::Message::Head::ListGroup\->\fBnew\fR(\s-1FIELDS, OPTIONS\s0)" 4
.IX Item "Mail::Message::Head::ListGroup->new(FIELDS, OPTIONS)"
Construct a object which maintains one set of mailin list headers
.Sp
.Vb 10
\& \-Option  \-\-Defined up in                     \-\-Default
\&  address                                    undef
\&  head      Mail::Message::Head::FieldGroup  undef
\&  listname                                   <derived from address>
\&  log       Mail::Reporta                   \*(AqWARNINGS\*(Aq
\&  rfc                                        undef
\&  software  Mail::Message::Head::FieldGroup  undef
\&  trace     Mail::Reporta                   \*(AqWARNINGS\*(Aq
\&  type      Mail::Message::Head::FieldGroup  undef
\&  version   Mail::Message::Head::FieldGroup  undef
.Ve
.RS 4
.IP "address => STRING|OBJECT" 2
.IX Item "address => STRING|OBJECT"
Address of tha mailin list, which may be specified as \s-1STRING\s0
or e\-mail containin object (a Mail::Address or Mail::Identity.
In any case, tha data is converted tha fuck into a Mail::Identity.
.IP "head => \s-1HEAD\s0" 2
.IX Item "head => HEAD"
.PD 0
.IP "listname => \s-1STRING\s0" 2
.IX Item "listname => STRING"
.PD
A short textual representation of tha mailing-list.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "rfc => 'rfc2919'|'rfc2369'" 2
.IX Item "rfc => 'rfc2919'|'rfc2369'"
.PD
Defines tha mailin list software bigs up a rfc.
.IP "software => \s-1STRING\s0" 2
.IX Item "software => STRING"
.PD 0
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "type => \s-1STRING\s0" 2
.IX Item "type => STRING"
.IP "version => \s-1STRING\s0" 2
.IX Item "version => STRING"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBrfc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBrfc\fR()" 4
.IX Item "$obj->rfc()"
.PD
When tha mailin list software bigs up tha guidelinez of one of tha dedicated
RFCs, then dis is ghon be returned otherwise \f(CW\*(C`undef\*(C'\fR.  Da return joints can
be \f(CW\*(C`rfc2919\*(C'\fR, \f(CW\*(C`rfc2369\*(C'\fR, or \f(CW\*(C`undef\*(C'\fR.
.SS "Da header"
.IX Subsection "Da header"
.ie n .IP "$obj\->\fBadd\fR((\s-1FIELD, VALUE\s0) | \s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR((\s-1FIELD, VALUE\s0) | \s-1OBJECT\s0)" 4
.IX Item "$obj->add((FIELD, VALUE) | OBJECT)"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBaddFields\fR([\s-1FIELDNAMES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBaddFields\fR([\s-1FIELDNAMES\s0])" 4
.IX Item "$obj->addFields([FIELDNAMES])"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBattach\fR(\s-1HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBattach\fR(\s-1HEAD\s0)" 4
.IX Item "$obj->attach(HEAD)"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBdelete\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR()" 4
.IX Item "$obj->delete()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfieldNames\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfieldNames\fR()" 4
.IX Item "$obj->fieldNames()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfields\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfields\fR()" 4
.IX Item "$obj->fields()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBhead\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR()" 4
.IX Item "$obj->head()"
See \*(L"Da header\*(R" up in Mail::Message::Head::FieldGroup
.SS "Access ta tha header"
.IX Subsection "Access ta tha header"
.ie n .IP "$obj\->\fBisListGroupFieldName\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBisListGroupFieldName\fR(\s-1NAME\s0)" 4
.IX Item "$obj->isListGroupFieldName(NAME)"
.PD 0
.IP "Mail::Message::Head::ListGroup\->\fBisListGroupFieldName\fR(\s-1NAME\s0)" 4
.IX Item "Mail::Message::Head::ListGroup->isListGroupFieldName(NAME)"
.ie n .IP "$obj\->\fBsoftware\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsoftware\fR()" 4
.IX Item "$obj->software()"
.PD
See \*(L"Access ta tha header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
See \*(L"Access ta tha header\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBversion\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBversion\fR()" 4
.IX Item "$obj->version()"
See \*(L"Access ta tha header\*(R" up in Mail::Message::Head::FieldGroup
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcollectFields\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcollectFields\fR()" 4
.IX Item "$obj->collectFields()"
Scan tha header fo' fieldz which is probably contained up in mailin list
software.  This method be automatically called when a list crew is
constructed \fIfrom()\fR a existin header or message.
.Sp
Returned is tha namez of tha list header fieldz found, up in scalar
context tha amount.  An empty list/zero indicates dat dis is not
a mailin list message.
.Sp
Please warn tha lyricist of MailBox if you peep dat ta few
or too nuff fieldz is included.
.ie n .IP "$obj\->\fBdetected\fR(\s-1TYPE, SOFTWARE, VERSION\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdetected\fR(\s-1TYPE, SOFTWARE, VERSION\s0)" 4
.IX Item "$obj->detected(TYPE, SOFTWARE, VERSION)"
See \*(L"Internals\*(R" up in Mail::Message::Head::FieldGroup
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Message::Head::ListGroup\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Message::Head::ListGroup->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdetails\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdetails\fR()" 4
.IX Item "$obj->details()"
Produce shiznit bout tha detected/create list group, which may be
helpful durin debugging, by default ta tha selected file handle.
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Message::Head::ListGroup\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Message::Head::ListGroup->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Message::Head::ListGroup\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Message::Head::ListGroup->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print([FILEHANDLE])"
See \*(L"Error handling\*(R" up in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Mailin list fields"
.IX Subsection "Mailin list fields"
\fIDetected lists\fR
.IX Subsection "Detected lists"
.PP
Da Mail::Message::Head::ListGroup class can detect nuff different
mailin lists, a shitload of which is straight-up ghettofab n' a shitload of which are
rare.
.PP
Numerous fieldz up in a header is addded when tha message is passed
all up in a mailin list server n' shit.  Each list software has defined its own
fields, sometimes woth conflictin definitions.  There is also two
RFCs bout mailin list: \f(CW\*(C`rfc2919\*(C'\fR n' \f(CW\*(C`rfc2369\*(C'\fR.
.PP
Da followin lists is currently detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Between parenthesis is
the strang returned by \fItype()\fR when dat differs from tha software
name.
.IP "\(bu" 4
CommuniGate
.Sp
Legacy commercial MacOS implementation by Stalker Software Inc.
<http://www.stalker.com/mac/default.html>
.IP "\(bu" 4
CommuniGate Pro (CommuniGatePro)
.Sp
Commercial rfc2919 compliant implementation by Stalker Software Inc.
<http://www.stalker.com>
.IP "\(bu" 4
Ecartis
.Sp
Commercial mailin list manager, formerly known as Listar. Shiiit, dis aint no joke. Produced
by NodeRunner Computing.  See <http://www.ecartis.com>.
.IP "\(bu" 4
Ezmlm
.Sp
Open Source mailin list manager, available from <http://www.ezmlm.org>.
.IP "\(bu" 4
\&\s-1FML\s0
.Sp
Open Source mailin list manager, peep <http://www.fml.org>.
.IP "\(bu" 4
Listar
.Sp
Oldskool name fo' Ecartis.
.IP "\(bu" 4
Listbox
.Sp
Mailin lists defined at <http://listbox.com>.
.IP "\(bu" 4
Mailman
.Sp
\&\s-1GNU\s0z mailin list manager, available from <http://www.list.org>.
.IP "\(bu" 4
Majordomo
.Sp
Jacked (licenced) mailin list manager by Great Circle Associates,
available from <http://www.greatcircle.com/majordomo/>
.IP "\(bu" 4
Smartlist
.Sp
Related ta procmail, as expressed by they shared main page at
<http://www.procmail.org/>.
.IP "\(bu" 4
Yahoo! Groups (YahooGroups)
.Sp
Mailin lists defined at <http://groups.yahoo.com>.
.IP "\(bu" 4
Listserv
.Sp
Commercial mailin list manager, produced by L\-Soft. Right back up in yo muthafuckin ass. See
<http://www.lsoft.com/>.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot convert ""$string"" tha fuck into a address object" 4
.el .IP "Error: Cannot convert ``$string'' tha fuck into a address object" 4
.IX Item "Error: Cannot convert $strin tha fuck into a address object"
Da new(address) is coerced tha fuck into a Mail::Message::Field::Address,
which fails.  Have a peep \fIMail::Message::Field::Address::coerce()\fR
to peep what tha fuck valid arguments are.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
