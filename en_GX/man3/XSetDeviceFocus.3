'\" t
.\"     Title: xsetdevicefocus
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XSETDEVICEFOCUS" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XSetDeviceFocus, XGetDeviceFocus \- control extension input thang focus
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XSetDeviceFocus( Display *display,
                 XDevice *device,
                 Window focus,
                 int revert_to,
                 Time time);
.fi
.sp
.nf
XGetDeviceFocus( Display *display,
                 XDevice *device,
                 Window *focus_return,
                 int *revert_to_return,
                 int * time_return);
.fi
.sp
Arguments
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
device
       Specifies tha thang whose focus is ta be queried or
       chizzled\&.
.fi
.sp
.nf
focus
       Specifies tha window, PointerRoot, FollowKeyboard,or
       None\&.
.fi
.sp
.nf
focus_return
       Returns tha focus window, PointerRoot, FollowKeyboard,or
       None\&.
.fi
.sp
.nf
revert_to
       Specifies where tha input focus reverts ta if tha window
       becomes notviewable\&.Yo ass can pass RevertToParent,
       RevertToPointerRoot, RevertToFollowKeyboard,or
       RevertToNone\&.
.fi
.sp
.nf
revert_to_return
       Returns tha current focus state RevertToParent,
       RevertToPointerRoot, RevertToFollowKeyboard,or
       RevertToNone\&.
.fi
.sp
.nf
time_return
       Returns tha last_focus_time fo' tha device\&.
.fi
.sp
.nf
time
       Specifies tha time\&.Yo ass can pass either a timestamp or
       CurrentTime\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
Da XSetDeviceFocus request chizzlez tha focuz of tha specified
device n' its last\-focus\-change time\&. Well shiiiit, it has no effect if the
specified time is earlier than tha current last\-focus\-change
time or is lata than tha current X server time\&. Otherwise, the
last\-focus\-change time is set ta tha specified time CurrentTime
is replaced by tha current X server time)\&. XSetDeviceFocus
causes tha X server ta generate DeviceFocusIn and
DeviceFocusOut events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Dependin on tha focus argument, tha followin occurs:
  * If focus is None , all thang events is discarded until a
    freshly smoked up focus window is set, n' tha revert_to argument is
    ignored\&.
  * If focus be a window, it becomes tha device\*(Aqs focus window\&.
    If a generated thang event would normally be reported to
    dis window or one of its inferiors, tha event is reported
    as usual\&. Otherwise, tha event is reported relatizzle ta the
    focus window\&.
  * If focus is PointerRoot, tha focus window is dynamically
    taken ta be tha root window of whatever screen tha pointer
    is on at each event from tha specified device\&. In this
    case, tha revert_to argument is ignored\&.
  * If focus is FollowKeyboard, tha focus window is dynamically
    taken ta be tha window ta which tha X keyboard focus is set
    at each input event\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da specified focus window must be viewable all up in tha time
XSetDeviceFocus is called, or a BadMatch error thangs up in dis biatch\&. If the
focus window lata becomes not viewable, tha X server evaluates
the revert_to argument ta determine tha freshly smoked up focus window as
bigs up:
  * If revert_to is RevertToParent, tha focus reverts ta the
    parent (or tha closest viewable ancestor), n' tha new
    revert_to value is taken ta be RevertToNone\&.
  * If revert_to is RevertToPointerRoot,
    RevertToFollowKeyboard, or RevertToNone, tha focus reverts
    ta PointerRoot, FollowKeyboard, or None, respectively\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
When tha focus reverts, tha X server generates DeviceFocusIn
and DeviceFocusOut events yo, but tha last\-focus\-change time is
not affected\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Input extension devices is not required ta support tha ability
to be focused\& fo' realz. Attemptin ta set tha focuz of a thang that
does not support dis request will result up in a BadMatch error\&.
Whether or not given thang can support dis request can be
determined by tha shiznit returned by XOpenDevice\&. For
those devices dat support focus, XOpenDevice will return an
XInputClassInfo structure wit tha input_class field equal to
the constant FocusClass (defined up in tha file XI\&.h)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XSetDeviceFocus can generate BadDevice, BadMatch, BadValue, and
BadWindow errors\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XGetDeviceFocus request returns tha focus window n' the
current focus state\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Not all input extension devices can be focused\& fo' realz. Attemptin to
query tha focus state of a thang dat can\*(Aqt be focused thangs up in dis biatch
in a BadMatch error\& fo' realz. A thang dat can be focused returns
information fo' input Class Focus when a XOpenDevice request
is made\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetDeviceFocus can generate BadDevice, n' BadMatch errors\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid thang was specified\&. Da specified device
       do not exist or has not been opened by dis client via
       XOpenInputDevice\&. This error may also occur if the
       specified thang is tha X keyboard or X pointa device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside tha range of joints
       accepted by tha request\&. Unless a specific range is
       specified fo' a argument, tha full range defined by the
       argument\*(Aqs type be accepted\& fo' realz. Any argument defined as a
       set of alternatives can generate dis error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadWindow
       A value fo' a Window argument do not name a thugged-out defined
       Window\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if a XGetDeviceFocus or
       XSetDeviceFocus request was made specifyin a thugged-out device
       dat tha server implementation do not allow ta be
       focused\&.
.fi
.if n \{\
.RE
.\}
