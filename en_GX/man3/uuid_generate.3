.\" Copyright 1999 Andreas Dilger (adilger@enel.ucalgary.ca)
.\"
.\" %Begin-Header%
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, n' tha entire permission notice up in its entirety,
.\"    includin tha disclaimer of warranties.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3. Da name of tha lyricist may not be used ta endorse or promote
.\"    shizzle derived from dis software without specific prior
.\"    freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ALL OF
.\" WHICH ARE HEREBY DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
.\" OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
.\" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
.\" USE OF THIS SOFTWARE, EVEN IF NOT ADVISED OF THE POSSIBILITY OF SUCH
.\" DAMAGE.
.\" %End-Header%
.\"
.\" Created  Wed Mar 10 17:42:12 1999, Andreas Dilger
.TH UUID_GENERATE 3 "May 2009" "util-linux" "Libuuid API"
.SH NAME
uuid_generate, uuid_generate_random, uuid_generate_time,
uuid_generate_time_safe \- create a freshly smoked up unique UUID value
.SH SYNOPSIS
.nf
.B #include <uuid.h>
.sp
.BI "void uuid_generate(uuid_t " up );
.BI "void uuid_generate_random(uuid_t " up );
.BI "void uuid_generate_time(uuid_t " up );
.BI "int uuid_generate_time_safe(uuid_t " up );
.fi
.SH DESCRIPTION
The
.B uuid_generate
function creates a freshly smoked up universally unique identifier (UUID).  Da uuid will
be generated based on high-qualitizzle randomnizz from
.IR /dev/urandom ,
if available.  If it aint available, then
.B uuid_generate
will use a alternatizzle algorithm which uses tha current time, the
local ethernet MAC address (if available), n' random data generated
usin a pseudo-random generator.
.sp
The
.B uuid_generate_random
function forces tha use of tha all-random UUID format, even if
a high-qualitizzle random number generator (i.e.,
.IR /dev/urandom )
is not available, up in which case a pseudo-random
generator is ghon be substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Note dat tha use of a pseudo-random
generator may compromise tha uniquenizz of UUIDs
generated up in dis fashion.
.sp
The
.B uuid_generate_time
function forces tha use of tha alternatizzle algorithm which uses the
current time n' tha local ethernet MAC address (if available).
This algorithm used ta be tha default one used ta generate UUID yo, but
because of tha use of tha ethernet MAC address, it can leak
information bout when n' where tha UUID was generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This can cause
privacy problems up in some applications, so the
.B uuid_generate
function only uses dis algorithm if a high-qualitizzle source of
randomnizz aint available.  To guarantee uniquenizz of UUIDs generated
by concurrently hustlin processes, tha uuid library uses global
clock state counta (if tha process has permissions ta bust exclusive access
to dis file) and/or the
.B uuidd
daemon, if it is hustlin already or can be spawned by tha process (if
installed n' tha process has enough permissions ta run it).  If neither of
these two synchronization mechanizzlez can be used, it is theoretically possible
that two concurrently hustlin processes obtain tha same UUID(s).  To tell
whether tha UUID has been generated up in a safe manner, use
.BR uuid_generate_time_safe .
.sp
The
.B uuid_generate_time_safe
is similar to
.BR uuid_generate_time ,
except dat it returns a value which denotes whether any of tha synchronization
mechanizzlez (see above) has been used.
.sp
Da UUID is 16 bytes (128 bits) long, which gives approximately 3.4x10^38
unique joints (there is approximately 10^80 elementary particlez in
the universe accordin ta Carl Sagan's
.IR Cosmos ).
Da freshly smoked up UUID can reasonably be considered unique among all UUIDs pimped
on tha local system, n' among UUIDs pimped on other systems up in tha past
and up in tha future.
.SH RETURN VALUE
Da newly pimped UUID is returned up in tha memory location pointed ta by
.IR up .
.B uuid_generate_time_safe
returns zero if tha UUID has been generated up in a safe manner, -1 otherwise.
.SH "CONFORMING TO"
OSF DCE 1.1
.SH AUTHOR
Theodore Y. Ts'o
.SH AVAILABILITY
.B libuuid
is part of tha util-linux package since version 2.15.1 n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
.SH "SEE ALSO"
.BR uuid (3),
.BR uuidgen (1),
.BR uuidd (8),
.BR uuid_clear (3),
.BR uuid_compare (3),
.BR uuid_copy (3),
.BR uuid_is_null (3),
.BR uuid_parse (3),
.BR uuid_time (3),
.BR uuid_unparse (3)
