.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509_VERIFY_PARAM_set_flags 3"
.TH X509_VERIFY_PARAM_set_flags 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
X509_VERIFY_PARAM_set_flags, X509_VERIFY_PARAM_clear_flags, X509_VERIFY_PARAM_get_flags, X509_VERIFY_PARAM_set_purpose, X509_VERIFY_PARAM_set_trust, X509_VERIFY_PARAM_set_depth, X509_VERIFY_PARAM_get_depth, X509_VERIFY_PARAM_set_time, X509_VERIFY_PARAM_add0_policy, X509_VERIFY_PARAM_set1_policies \- X509 verification parameters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/x509_vfy.h>
\&
\& int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags);
\& int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
\&                                                        unsigned long flags);
\& unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param);
\&
\& int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose);
\& int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);
\&
\& void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);
\&
\& int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
\&                                                ASN1_OBJECT *policy);
\& int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param, 
\&                                        STACK_OF(ASN1_OBJECT) *policies);
\&
\& void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);
\& int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These functions manipulate tha \fBX509_VERIFY_PARAM\fR structure associated with
a certificate verification operation.
.PP
Da \fIX509_VERIFY_PARAM_set_flags()\fR function sets tha flags up in \fBparam\fR by oring
it wit \fBflags\fR. Right back up in yo muthafuckin ass. See tha \fB\s-1VERIFICATION FLAGS\s0\fR section fo' a cold-ass lil complete
description of joints tha \fBflags\fR parameta can take.
.PP
\&\fIX509_VERIFY_PARAM_get_flags()\fR returns tha flags up in \fBparam\fR.
.PP
\&\fIX509_VERIFY_PARAM_clear_flags()\fR clears tha flags \fBflags\fR up in \fBparam\fR.
.PP
\&\fIX509_VERIFY_PARAM_set_purpose()\fR sets tha verification purpose up in \fBparam\fR
to \fBpurpose\fR. This determines tha aaight purpose of tha certificate
chain, fo' example \s-1SSL\s0 client or \s-1SSL\s0 server.
.PP
\&\fIX509_VERIFY_PARAM_set_trust()\fR sets tha trust settin up in \fBparam\fR ta 
\&\fBtrust\fR.
.PP
\&\fIX509_VERIFY_PARAM_set_time()\fR sets tha verification time up in \fBparam\fR to
\&\fBt\fR. Normally tha current time is used.
.PP
\&\fIX509_VERIFY_PARAM_add0_policy()\fR enablez policy checkin (it is disabled
by default) n' addz \fBpolicy\fR ta tha aaight policy set.
.PP
\&\fIX509_VERIFY_PARAM_set1_policies()\fR enablez policy checkin (it is disabled
by default) n' sets tha aaight policy set ta \fBpolicies\fR fo' realz. Any existing
policy set is cleared. Y'all KNOW dat shit, muthafucka! Da \fBpolicies\fR parameta can be \fB\s-1NULL\s0\fR ta clear
an existin policy set.
.PP
\&\fIX509_VERIFY_PARAM_set_depth()\fR sets tha maximum verification depth ta \fBdepth\fR.
That is tha maximum number of untrusted \s-1CA\s0 certificates dat can step tha fuck up in a
chain.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIX509_VERIFY_PARAM_set_flags()\fR, \fIX509_VERIFY_PARAM_clear_flags()\fR, 
\&\fIX509_VERIFY_PARAM_set_purpose()\fR, \fIX509_VERIFY_PARAM_set_trust()\fR,
\&\fIX509_VERIFY_PARAM_add0_policy()\fR n' \fIX509_VERIFY_PARAM_set1_policies()\fR return 1
for success n' 0 fo' failure.
.PP
\&\fIX509_VERIFY_PARAM_get_flags()\fR returns tha current verification flags.
.PP
\&\fIX509_VERIFY_PARAM_set_time()\fR n' \fIX509_VERIFY_PARAM_set_depth()\fR do not return
values.
.PP
\&\fIX509_VERIFY_PARAM_get_depth()\fR returns tha current verification depth.
.SH "VERIFICATION FLAGS"
.IX Header "VERIFICATION FLAGS"
Da verification flags consistz of zero or mo' of tha followin flags
ored together.
.PP
\&\fBX509_V_FLAG_CRL_CHECK\fR enablez \s-1CRL\s0 checkin fo' tha certificate chain leaf
certificate fo' realz. An error occurs if a suitable \s-1CRL\s0 cannot be found.
.PP
\&\fBX509_V_FLAG_CRL_CHECK_ALL\fR enablez \s-1CRL\s0 checkin fo' tha entire certificate
chain.
.PP
\&\fBX509_V_FLAG_IGNORE_CRITICAL\fR disabled critical extension checking. By default
any unhandled critical extensions up in certificates or (if checked) CRLs thangs up in dis biatch
in a gangbangin' fatal error. Shiiit, dis aint no joke. If dis flag is set unhandled critical extensions are
ignored. Y'all KNOW dat shit, muthafucka! \fB\s-1WARNING\s0\fR settin dis option fo' anythang other than debugging
purposes can be a securitizzle risk. Finer control over which extensions are
supported can be performed up in tha verification callback.
.PP
TDude \fBX509_V_FLAG_X509_STRICT\fR flag disablez workaroundz fo' some broken
certificates n' make tha verification strictly apply \fBX509\fR rules.
.PP
\&\fBX509_V_FLAG_ALLOW_PROXY_CERTS\fR enablez proxy certificate verification.
.PP
\&\fBX509_V_FLAG_POLICY_CHECK\fR enablez certificate policy checking, by default
no policy checkin is peformed. Y'all KNOW dat shit, muthafucka! Additionizzle shiznit is busted ta tha 
verification callback relatin ta policy checking.
.PP
\&\fBX509_V_FLAG_EXPLICIT_POLICY\fR, \fBX509_V_FLAG_INHIBIT_ANY\fR and
\&\fBX509_V_FLAG_INHIBIT_MAP\fR set tha \fBrequire explicit policy\fR, \fBinhibit any
policy\fR n' \fBinhibit policy mapping\fR flags respectively as defined in
\&\fB\s-1RFC3280\s0\fR. Policy checkin be automatically enabled if any of these flags
are set.
.PP
If \fBX509_V_FLAG_NOTIFY_POLICY\fR is set n' tha policy checkin is successful
a special status code is set ta tha verification callback. This permits it
to examine tha valid policy tree n' big-ass up additionizzle checks or simply
log it fo' debuggin purposes.
.PP
By default some addtionizzle features like fuckin indirect CRLs n' CRLs signed by
different keys is disabled. Y'all KNOW dat shit, muthafucka! If \fBX509_V_FLAG_EXTENDED_CRL_SUPPORT\fR is set
they is enabled.
.PP
If \fBX509_V_FLAG_USE_DELTAS\fR ise set delta CRLs (if present) is used to
determine certificate status. If not set deltas is ignored.
.PP
\&\fBX509_V_FLAG_CHECK_SS_SIGNATURE\fR enablez checkin of tha root \s-1CA\s0 self signed
cerificate signature. By default dis check is disabled cuz it don't
add any additionizzle securitizzle but up in some cases applications might want to
check tha signature anyway fo' realz. A side effect of not checkin tha root \s-1CA\s0
signature is dat disabled or unsupported message digests on tha root \s-1CA\s0
are not treated as fatal errors.
.PP
Da \fBX509_V_FLAG_CB_ISSUER_CHECK\fR flag enablez debuggin of certificate
issuer checks. Well shiiiit, it is \fBnot\fR needed unless yo ass is loggin certificate
verification. I aint talkin' bout chicken n' gravy biatch. If dis flag is set then additionizzle status codes is ghon be sent
to tha verification callback n' it \fBmust\fR be prepared ta handle such cases
without assumin they is hard errors.
.SH "NOTES"
.IX Header "NOTES"
Da above functions should be used ta manipulate verification parameters
instead of legacy functions which work up in specific structures such as
\&\fIX509_STORE_CTX_set_flags()\fR.
.SH "BUGS"
.IX Header "BUGS"
Delta \s-1CRL\s0 checkin is currently primitive. Only a single delta can be used and
(partly cuz of limitationz of \fBX509_STORE\fR) constructed CRLs is not 
maintained.
.PP
If CRLs checkin is enable CRLs is sposed ta fuckin be available up in the
correspondin \fBX509_STORE\fR structure. No attempt is made ta download
CRLs from tha \s-1CRL\s0 distribution points extension.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Enable \s-1CRL\s0 checkin when struttin certificate verification durin \s-1SSL \s0
connections associated wit a \fB\s-1SSL_CTX\s0\fR structure \fBctx\fR:
.PP
.Vb 5
\&  X509_VERIFY_PARAM *param;
\&  param = X509_VERIFY_PARAM_new();
\&  X509_VERIFY_PARAM_set_flags(param, X509_V_FLAG_CRL_CHECK);
\&  SSL_CTX_set1_param(ctx, param);
\&  X509_VERIFY_PARAM_free(param);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIX509_verify_cert\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\s-1TBA\s0
