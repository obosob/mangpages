.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FileCache 3pm"
.TH FileCache 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
FileCache \- keep mo' filez open than tha system permits
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    no strict \*(Aqrefs\*(Aq;
\&
\&    use FileCache;
\&    # or
\&    use FileCache maxopen => 16;
\&
\&    cacheout $mode, $path;
\&    # or
\&    cacheout $path;
\&    print $path @data;
\&
\&    $fh = cacheout $mode, $path;
\&    # or
\&    $fh = cacheout $path;
\&    print $fh @data;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`cacheout\*(C'\fR function will make shizzle dat there be a a gangbangin' filehandle open
for readin or freestylin available as tha pathname you give dat shit. It
automatically closes n' re-opens filez if you exceed yo' system's
maximum number of file descriptors, or tha suggested maximum \fImaxopen\fR.
.IP "cacheout \s-1EXPR\s0" 4
.IX Item "cacheout EXPR"
Da 1\-argument form of cacheout will open a gangbangin' file fo' freestylin (\f(CW\*(Aq>\*(Aq\fR)
on itz first use, n' appendin (\f(CW\*(Aq>>\*(Aq\fR) thereafter.
.Sp
Returns \s-1EXPR\s0 on success fo' convenience. Yo ass may neglect the
return value n' manipulate \s-1EXPR\s0 as tha filehandle directly if you prefer.
.IP "cacheout \s-1MODE, EXPR\s0" 4
.IX Item "cacheout MODE, EXPR"
Da 2\-argument form of cacheout will use tha supplied mode fo' tha initial
and subsequent openings. Most valid modes fo' 3\-argument \f(CW\*(C`open\*(C'\fR is supported
namely; \f(CW\*(Aq>\*(Aq\fR, \f(CW\*(Aq+>\*(Aq\fR, \f(CW\*(Aq<\*(Aq\fR, \f(CW\*(Aq<+\*(Aq\fR, \f(CW\*(Aq>>\*(Aq\fR,
\&\f(CW \*(Aq|\-\*(Aq \fR n' \f(CW \*(Aq\-|\*(Aq \fR
.Sp
To pass supplemenstrual arguments ta a program opened wit \f(CW \*(Aq|\-\*(Aq \fR or \f(CW \*(Aq\-|\*(Aq \fR
append dem ta tha command strang as you would system \s-1EXPR.\s0
.Sp
Returns \s-1EXPR\s0 on success fo' convenience. Yo ass may neglect the
return value n' manipulate \s-1EXPR\s0 as tha filehandle directly if you prefer.
.SH "CAVEATS"
.IX Header "CAVEATS"
While it is permissible ta \f(CW\*(C`close\*(C'\fR a FileCache managed file,
do not do so if yo ass is callin \f(CW\*(C`FileCache::cacheout\*(C'\fR from a package other
than which dat shiznit was imported, or wit another module which overrides \f(CW\*(C`close\*(C'\fR.
If you must, use \f(CW\*(C`FileCache::cacheout_close\*(C'\fR.
.PP
Although FileCache can be used wit piped opens ('\-|' or '|\-') bustin so is
strongly discouraged. Y'all KNOW dat shit, muthafucka!  If FileCache findz it necessary ta close n' then reopen
a pipe, tha command all up in tha far end of tha pipe is ghon be reexecuted \- tha thangs up in dis biatch
of struttin \s-1IO\s0 on FileCache'd pipes is unlikely ta be what tha fuck you expect.  The
abilitizzle ta use FileCache on pipes may be removed up in a gangbangin' future release.
.PP
FileCache do not store tha current file offset if it findz it necessary to
close a gangbangin' file.  When tha file is reopened, tha offset is ghon be as specified by the
original gangsta \f(CW\*(C`open\*(C'\fR file mode.  This could be construed ta be a funky-ass bug.
.PP
Da module functionalitizzle relies on symbolic references, so thangs will break
under 'use strict' unless 'no strict \*(L"refs\*(R"' be also specified.
.SH "BUGS"
.IX Header "BUGS"
\&\fIsys/param.h\fR lies wit its \f(CW\*(C`NOFILE\*(C'\fR define on some systems,
so you may gotta set \fImaxopen\fR yo ass.
