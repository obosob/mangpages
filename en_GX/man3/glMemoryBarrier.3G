'\" t
.\"     Title: glMemoryBarrier
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLMEMORYBARRIER" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glMemoryBarrier \- defines a funky-ass barrier orderin memory transactions
.SH "C SPECIFICATION"
.HP \w'void\ glMemoryBarrier('u
.BI "void glMemoryBarrier(GLbitfield\ " "barriers" ");"
.SH "PARAMETERS"
.PP
\fIbarriers\fR
.RS 4
Specifies tha barriers ta insert\&. Must be a funky-ass bitwise combination of
\fBGL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT\fR,
\fBGL_ELEMENT_ARRAY_BARRIER_BIT\fR,
\fBGL_UNIFORM_BARRIER_BIT\fR,
\fBGL_TEXTURE_FETCH_BARRIER_BIT\fR,
\fBGL_SHADER_IMAGE_ACCESS_BARRIER_BIT\fR,
\fBGL_COMMAND_BARRIER_BIT\fR,
\fBGL_PIXEL_BUFFER_BARRIER_BIT\fR,
\fBGL_TEXTURE_UPDATE_BARRIER_BIT\fR,
\fBGL_BUFFER_UPDATE_BARRIER_BIT\fR,
\fBGL_FRAMEBUFFER_BARRIER_BIT\fR,
\fBGL_TRANSFORM_FEEDBACK_BARRIER_BIT\fR,
\fBGL_ATOMIC_COUNTER_BARRIER_BIT\fR, or
\fBGL_SHADER_STORAGE_BARRIER_BIT\fR\&. If tha special value
\fBGL_ALL_BARRIER_BITS\fR
is specified, all supported barriers is ghon be inserted\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglMemoryBarrier\fR
defines a funky-ass barrier orderin tha memory transactions issued prior ta tha command relatizzle ta dem issued afta tha barrier\&. For tha purposez of dis ordering, memory transactions performed by shadaz is considered ta be issued by tha renderin command dat triggered tha execution of tha shader\&.
\fIbarriers\fR
is a funky-ass bitfield indicatin tha set of operations dat is synchronized wit shader stores; tha bits used in
\fIbarriers\fR
are as bigs up:
.PP
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT\fR
.RS 4
If set, vertex data sourced from buffer objects afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\&. Da set of buffer objects affected by dis bit is derived from tha buffer object bindings used fo' generic vertex attributes derived from the
\fBGL_VERTEX_ATTRIB_ARRAY_BUFFER\fR
bindings\&.
.RE
.PP
\fBGL_ELEMENT_ARRAY_BARRIER_BIT\fR
.RS 4
If set, vertex array indices sourced from buffer objects afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\&. Da buffer objects affected by dis bit is derived from the
\fBGL_ELEMENT_ARRAY_BUFFER\fR
binding\&.
.RE
.PP
\fBGL_UNIFORM_BARRIER_BIT\fR
.RS 4
Shader uniforms sourced from buffer objects afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\&.
.RE
.PP
\fBGL_TEXTURE_FETCH_BARRIER_BIT\fR
.RS 4
Texture fetches from shaders, includin fetches from buffer object memory via buffer textures, afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\&.
.RE
.PP
\fBGL_SHADER_IMAGE_ACCESS_BARRIER_BIT\fR
.RS 4
Memory accesses rockin shader image load, store, n' atomic built\-in functions issued afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\& fo' realz. Additionally, image stores n' atomics issued afta tha barrier aint gonna execute until all memory accesses (e\&.g\&., loads, stores, texture fetches, vertex fetches) initiated prior ta tha barrier complete\&.
.RE
.PP
\fBGL_COMMAND_BARRIER_BIT\fR
.RS 4
Command data sourced from buffer objects by Draw*Indirect commandz afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\&. Da buffer objects affected by dis bit is derived from the
\fBGL_DRAW_INDIRECT_BUFFER\fR
binding\&.
.RE
.PP
\fBGL_PIXEL_BUFFER_BARRIER_BIT\fR
.RS 4
Readz n' writez of buffer objects via the
\fBGL_PIXEL_PACK_BUFFER\fR
and
\fBGL_PIXEL_UNPACK_BUFFER\fR
bindings (via
\fBglReadPixels\fR(),
\fBglTexSubImage\fR(), etc\&.) afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\& fo' realz. Additionally, buffer object writes issued afta tha barrier will wait on tha completion of all shader writes initiated prior ta tha barrier\&.
.RE
.PP
\fBGL_TEXTURE_UPDATE_BARRIER_BIT\fR
.RS 4
Writes ta a texture via
\fBglTex(Sub)Image*\fR,
\fBglCopyTex(Sub)Image*\fR,
\fBglCompressedTex(Sub)Image*\fR, n' readz via
\fBglGetTexImage\fR()
afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\& fo' realz. Additionally, texture writes from these commandz issued afta tha barrier aint gonna execute until all shader writes initiated prior ta tha barrier complete\&.
.RE
.PP
\fBGL_BUFFER_UPDATE_BARRIER_BIT\fR
.RS 4
Readz or writes via
\fBglBufferSubData\fR(),
\fBglCopyBufferSubData\fR(), or
\fBglGetBufferSubData\fR(), or ta buffer object memory mapped by
\fBglMapBuffer\fR()
or
\fBglMapBufferRange\fR()
afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\& fo' realz. Additionally, writes via these commandz issued afta tha barrier will wait on tha completion of any shader writes ta tha same memory initiated prior ta tha barrier\&.
.RE
.PP
\fBGL_FRAMEBUFFER_BARRIER_BIT\fR
.RS 4
Readz n' writes via framebuffer object attachments afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\& fo' realz. Additionally, framebuffer writes issued afta tha barrier will wait on tha completion of all shader writes issued prior ta tha barrier\&.
.RE
.PP
\fBGL_TRANSFORM_FEEDBACK_BARRIER_BIT\fR
.RS 4
Writes via transform feedback bindings afta tha barrier will reflect data freestyled by shadaz prior ta tha barrier\& fo' realz. Additionally, transform feedback writes issued afta tha barrier will wait on tha completion of all shader writes issued prior ta tha barrier\&.
.RE
.PP
\fBGL_ATOMIC_COUNTER_BARRIER_BIT\fR
.RS 4
Accesses ta atomic countas afta tha barrier will reflect writes prior ta tha barrier\&.
.RE
.PP
\fBGL_SHADER_STORAGE_BARRIER_BIT\fR
.RS 4
Accesses ta shader storage blocks afta tha barrier will reflect writes prior ta tha barrier\&.
.RE
.PP
If
\fIbarriers\fR
is
\fBGL_ALL_BARRIER_BITS\fR, shader memory accesses is ghon be synchronized relatizzle ta all tha operations busted lyrics bout above\&.
.PP
Implementations may cache buffer object n' texture image memory dat could be freestyled by shadaz up in multiple caches; fo' example, there may be separate caches fo' texture, vertex fetching, n' one or mo' caches fo' shader memory accesses\&. Implementations is not required ta keep these caches coherent wit shader memory writes\&. Right back up in yo muthafuckin ass. Stores issued by one invocation may not be immediately observable by other pipeline stages or other shader invocations cuz tha value stored may remain up in a cold-ass lil cache local ta tha processor executin tha store, or cuz data overwritten by tha store is still up in a cold-ass lil cache elsewhere up in tha system\&. When
\fBglMemoryBarrier\fR
is called, tha GL flushes and/or invalidates any caches relevant ta tha operations specified by the
\fIbarriers\fR
parameta ta ensure consistent orderin of operations across tha barrier\&.
.PP
To allow fo' independent shader invocations ta rap by readz n' writes ta a cold-ass lil common memory address, image variablez up in tha OpenGL Shadin Language may be declared as "coherent"\&. Buffer object or texture image memory accessed all up in such variablez may be cached only if caches is automatically updated cuz of stores issued by any other shader invocation\&. If tha same address be accessed rockin both coherent n' non\-coherent variables, tha accesses rockin variablez declared as coherent will observe tha thangs up in dis biatch stored rockin coherent variablez up in other invocations\&. Usin variablez declared as "coherent" guarantees only dat tha thangs up in dis biatch of stores is ghon be immediately visible ta shader invocations rockin similarly\-declared variables; calling
\fBglMemoryBarrier\fR
is required ta ensure dat tha stores is visible ta other operations\&.
.PP
Da followin guidelines may be helpful up in choosin when ta use coherent memory accesses n' when ta use barriers\&.
.PP
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Data dat is read\-only or constant may be accessed without rockin coherent variablez or callin MemoryBarrier()\&. Updates ta tha read\-only data via API calls like fuckin BufferSubData will invalidate shader caches implicitly as required\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Data dat is shared between shader invocations at a gangbangin' fine granularitizzle (e\&.g\&., freestyled by one invocation, consumed by another invocation) should use coherent variablez ta read n' write tha shared data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Data freestyled by one shader invocation n' consumed by other shader invocations launched as a result of its execution ("dependent invocations") should use coherent variablez up in tha producin shader invocation n' call memoryBarrier() afta tha last write\&. Da consumin shader invocation should also use coherent variables\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Data freestyled ta image variablez up in one renderin pass n' read by tha shader up in a lata pass need not use coherent variablez or memoryBarrier()\&. Callin MemoryBarrier() wit tha SHADER_IMAGE_ACCESS_BARRIER_BIT set in
\fIbarriers\fR
between passes is necessary\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Data freestyled by tha shader up in one renderin pass n' read by another mechanizzle (e\&.g\&., vertex or index buffer pulling) up in a lata pass need not use coherent variablez or memoryBarrier()\&. Calling
\fBglMemoryBarrier\fR
with tha appropriate bits set in
\fIbarriers\fR
between passes is necessary\&.
.RE
.sp
.SH "NOTES"
.PP
\fBglMemoryBarrier\fR
is available only if tha GL version is 4\&.2 or higher\&.
.PP
\fBGL_SHADER_STORAGE_BARRIER_BIT\fR
is available only if tha GL version is 4\&.3 or higher\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIbarriers\fR
gotz nuff any bits other than dem listed above, or aint tha special value
\fBGL_ALL_BARRIER_BITS\fR\&.
.SH "SEE ALSO"
.PP
\fBglBindImageTexture\fR(),
\fBglBufferData\fR(),
\fBglMapBuffer\fR(),
\fBglMapBufferRange\fR(),
\fBglFlushMappedBufferRange\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2011 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
