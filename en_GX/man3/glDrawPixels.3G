'\" t
.\"     Title: glDrawPixels
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLDRAWPIXELS" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glDrawPixels \- write a funky-ass block of pixels ta tha frame buffer
.SH "C SPECIFICATION"
.HP \w'void\ glDrawPixels('u
.BI "void glDrawPixels(GLsizei\ " "width" ", GLsizei\ " "height" ", GLenum\ " "format" ", GLenum\ " "type" ", const\ GLvoid\ *\ " "data" ");"
.SH "PARAMETERS"
.PP
\fIwidth\fR, \fIheight\fR
.RS 4
Specify tha dimensionz of tha pixel rectangle ta be freestyled tha fuck into tha frame buffer\&.
.RE
.PP
\fIformat\fR
.RS 4
Specifies tha format of tha pixel data\&. Right back up in yo muthafuckin ass. Symbolic constants
\fBGL_COLOR_INDEX\fR,
\fBGL_STENCIL_INDEX\fR,
\fBGL_DEPTH_COMPONENT\fR,
\fBGL_RGB\fR,
\fBGL_BGR\fR,
\fBGL_RGBA\fR,
\fBGL_BGRA\fR,
\fBGL_RED\fR,
\fBGL_GREEN\fR,
\fBGL_BLUE\fR,
\fBGL_ALPHA\fR,
\fBGL_LUMINANCE\fR, and
\fBGL_LUMINANCE_ALPHA\fR
are accepted\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies tha data type for
\fIdata\fR\&. Right back up in yo muthafuckin ass. Symbolic constants
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_BYTE\fR,
\fBGL_BITMAP\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_INT\fR,
\fBGL_FLOAT\fR,
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR, and
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
are accepted\&.
.RE
.PP
\fIdata\fR
.RS 4
Specifies a pointa ta tha pixel data\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglDrawPixels\fR
readz pixel data from memory n' writes it tha fuck into tha frame buffer relatizzle ta tha current rasta position, provided dat tha rasta posizzle is valid\&. Use
\fBglRasterPos\fR()
or
\fBglWindowPos\fR()
to set tha current rasta position; use
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
to determine if tha specified rasta posizzle is valid, and
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION\fR
to query tha rasta position\&.
.PP
Several parametas define tha encodin of pixel data up in memory n' control tha processin of tha pixel data before it is placed up in tha frame buffer\&. These parametas is set wit four commands:
\fBglPixelStore\fR(),
\fBglPixelTransfer\fR(),
\fBglPixelMap\fR(), and
\fBglPixelZoom\fR()\&. This reference page raps bout tha effects on
\fBglDrawPixels\fR
of nuff yo, but not all, of tha parametas specified by these four commands\&.
.PP
Data is read from
\fIdata\fR
as a sequence of signed or unsigned bytes, signed or unsigned shorts, signed or unsigned integers, or single\-precision floating\-point joints, dependin on
\fItype\fR\&. When
\fItype\fR
is one of
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_INT\fR, or
\fBGL_FLOAT\fR
each of these bytes, shorts, integers, or floating\-point joints is interpreted as one color or depth component, or one index, dependin on
\fIformat\fR\&. When
\fItype\fR
is one of
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR, or
\fBGL_UNSIGNED_INT_10_10_10_2\fR, each unsigned value is interpreted as containin all tha components fo' a single pixel, wit tha color components arranged accordin to
\fIformat\fR\&. When
\fItype\fR
is one of
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR, or
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR, each unsigned value is interpreted as containin all color components, specified by
\fIformat\fR, fo' a single pixel up in a reversed order\&. Indices is always treated individually\&. Color components is treated as crewz of one, two, three, or four joints, again n' again n' again based on
\fIformat\fR\&. Both individual indices n' crewz of components is referred ta as pixels\&. If
\fItype\fR
is
\fBGL_BITMAP\fR, tha data must be unsigned bytes, and
\fIformat\fR
must be either
\fBGL_COLOR_INDEX\fR
or
\fBGL_STENCIL_INDEX\fR\&. Each unsigned byte is treated as eight 1\-bit pixels, wit bit orderin determined by
\fBGL_UNPACK_LSB_FIRST\fR
(see
\fBglPixelStore\fR())\&.
.PP
width \(mu height
pixels is read from memory, startin at location
\fIdata\fR\&. By default, these pixels is taken from adjacent memory locations, except dat afta all
\fIwidth\fR
pixels is read, tha read pointa be advanced ta tha next four\-byte boundary\&. Da four\-byte row alignment is specified by
\fBglPixelStore\fR()
with argument
\fBGL_UNPACK_ALIGNMENT\fR, n' it can be set ta one, two, four, or eight bytes\&. Other pixel store parametas specify different read pointa advancements, both before tha straight-up original gangsta pixel is read n' afta all
\fIwidth\fR
pixels is read\&. Right back up in yo muthafuckin ass. See the
\fBglPixelStore\fR()
reference page fo' details on these options\&.
.PP
If a non\-zero named buffer object is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a funky-ass block of pixels is specified,
\fIdata\fR
is treated as a funky-ass byte offset tha fuck into tha buffer object\*(Aqs data store\&.
.PP
The
width \(mu height
pixels dat is read from memory is each operated on up in tha same way, based on tha jointz of nuff muthafuckin parametas specified by
\fBglPixelTransfer\fR()
and
\fBglPixelMap\fR()\&. Da detailz of these operations, as well as tha target buffer tha fuck into which tha pixels is drawn, is specific ta tha format of tha pixels, as specified by
\fIformat\fR\&.
\fIformat\fR
can assume one of 13 symbolic joints:
.PP
\fBGL_COLOR_INDEX\fR
.RS 4
Each pixel be a single value, a cold-ass lil color index\&. Well shiiiit, it is converted ta fixed\-point format, wit a unspecified number of bits ta tha right of tha binary point, regardless of tha memory data type\&. Floating\-point joints convert ta legit fixed\-point joints\&. Right back up in yo muthafuckin ass. Signed n' unsigned integer data is converted wit all fraction bits set ta 0\&. Bitmap data convert ta either 0 or 1\&.
.sp
Each fixed\-point index is then shifted left by
\fBGL_INDEX_SHIFT\fR
bits n' added to
\fBGL_INDEX_OFFSET\fR\&. If
\fBGL_INDEX_SHIFT\fR
is negative, tha shift is ta tha right\&. In either case, zero bits fill otherwise unspecified bit locations up in tha result\&.
.sp
If tha GL is up in RGBA mode, tha resultin index is converted ta a RGBA pixel wit tha help of the
\fBGL_PIXEL_MAP_I_TO_R\fR,
\fBGL_PIXEL_MAP_I_TO_G\fR,
\fBGL_PIXEL_MAP_I_TO_B\fR, and
\fBGL_PIXEL_MAP_I_TO_A\fR
tables\&. If tha GL is up in color index mode, n' if
\fBGL_MAP_COLOR\fR
is true, tha index is replaced wit tha value dat it references up in lookup table
\fBGL_PIXEL_MAP_I_TO_I\fR\&. Whether tha lookup replacement of tha index is done or not, tha integer part of tha index is then ANDed with
2 b \- 1, where
b
is tha number of bits up in a cold-ass lil color index buffer\&.
.sp
Da GL then converts tha resultin indices or RGBA flavas ta fragments by attachin tha current rasta position
\fIz\fR
coordinizzle n' texture coordinates ta each pixel, then assigning
x
and
y
window coordinates ta the
nth fragment such that
x n = x r + n % widthy n = y r + n width .sp
where
x r y r
is tha current rasta position\&. These pixel fragments is then treated just like tha fragments generated by rasterizin points, lines, or polygons\&. Texture mapping, fog, n' all tha fragment operations is applied before tha fragments is freestyled ta tha frame buffer\&.
.RE
.PP
\fBGL_STENCIL_INDEX\fR
.RS 4
Each pixel be a single value, a stencil index\&. Well shiiiit, it is converted ta fixed\-point format, wit a unspecified number of bits ta tha right of tha binary point, regardless of tha memory data type\&. Floating\-point joints convert ta legit fixed\-point joints\&. Right back up in yo muthafuckin ass. Signed n' unsigned integer data is converted wit all fraction bits set ta 0\&. Bitmap data convert ta either 0 or 1\&.
.sp
Each fixed\-point index is then shifted left by
\fBGL_INDEX_SHIFT\fR
bits, n' added to
\fBGL_INDEX_OFFSET\fR\&. If
\fBGL_INDEX_SHIFT\fR
is negative, tha shift is ta tha right\&. In either case, zero bits fill otherwise unspecified bit locations up in tha result\&. If
\fBGL_MAP_STENCIL\fR
is true, tha index is replaced wit tha value dat it references up in lookup table
\fBGL_PIXEL_MAP_S_TO_S\fR\&. Whether tha lookup replacement of tha index is done or not, tha integer part of tha index is then ANDed with
2 b \- 1, where
b
is tha number of bits up in tha stencil buffer\&. Da resultin stencil indices is then freestyled ta tha stencil buffer such dat the
nth index is freestyled ta location
.sp
x n = x r + n % widthy n = y r + n width
.sp
where
x r y r
is tha current rasta position\&. Only tha pixel ballershizzle test, tha scissor test, n' tha stencil writemask affect these write operations\&.
.RE
.PP
\fBGL_DEPTH_COMPONENT\fR
.RS 4
Each pixel be a single\-depth component\&. Floating\-point data is converted directly ta a internal floating\-point format wit unspecified precision\&. Right back up in yo muthafuckin ass. Signed integer data is mapped linearly ta tha internal floating\-point format such dat da most thugged-out positizzle representable integer value maps ta 1\&.0, n' da most thugged-out wack representable value maps to
\-1\&.0\&. Unsigned integer data is mapped similarly: tha phattest integer value maps ta 1\&.0, n' 0 maps ta 0\&.0\&. Da resultin floating\-point depth value is then multiplied by
\fBGL_DEPTH_SCALE\fR
and added to
\fBGL_DEPTH_BIAS\fR\&. Da result is clamped ta tha range
0 1\&.
.sp
Da GL then converts tha resultin depth components ta fragments by attachin tha current rasta posizzle color or color index n' texture coordinates ta each pixel, then assigning
x
and
y
window coordinates ta the
nth fragment such that
.sp
x n = x r + n % widthy n = y r + n width
.sp
where
x r y r
is tha current rasta position\&. These pixel fragments is then treated just like tha fragments generated by rasterizin points, lines, or polygons\&. Texture mapping, fog, n' all tha fragment operations is applied before tha fragments is freestyled ta tha frame buffer\&.
.RE
.PP
\fBGL_RGBA\fR
.RS 4
.RE
.PP
\fBGL_BGRA\fR
.RS 4
Each pixel be a gangbangin' four\-component group: For
\fBGL_RGBA\fR, tha red component is first, followed by green, followed by blue, followed by alpha; for
\fBGL_BGRA\fR
the order is blue, green, red n' then alpha\&. Floating\-point joints is converted directly ta a internal floating\-point format wit unspecified precision\&. Right back up in yo muthafuckin ass. Signed integer joints is mapped linearly ta tha internal floating\-point format such dat da most thugged-out positizzle representable integer value maps ta 1\&.0, n' da most thugged-out wack representable value maps to
\-1\&.0\&. (Note dat dis mappin do not convert 0 precisely ta 0\&.0\&.) Unsigned integer data is mapped similarly: Da phattest integer value maps ta 1\&.0, n' 0 maps ta 0\&.0\&. Da resultin floating\-point color joints is then multiplied by
\fBGL_c_SCALE\fR
and added to
\fBGL_c_BIAS\fR, where
\fIc\fR
is RED, GREEN, BLUE, n' ALPHA fo' tha respectizzle color components\&. Da thangs up in dis biatch is clamped ta tha range
0 1\&.
.sp
If
\fBGL_MAP_COLOR\fR
is true, each color component is scaled by tha size of lookup table
\fBGL_PIXEL_MAP_c_TO_c\fR, then replaced by tha value dat it references up in dat table\&.
\fIc\fR
is R, G, B, or A respectively\&.
.sp
Da GL then converts tha resultin RGBA flavas ta fragments by attachin tha current rasta position
\fIz\fR
coordinizzle n' texture coordinates ta each pixel, then assigning
x
and
y
window coordinates ta the
nth fragment such that
.sp
x n = x r + n % widthy n = y r + n width
.sp
where
x r y r
is tha current rasta position\&. These pixel fragments is then treated just like tha fragments generated by rasterizin points, lines, or polygons\&. Texture mapping, fog, n' all tha fragment operations is applied before tha fragments is freestyled ta tha frame buffer\&.
.RE
.PP
\fBGL_RED\fR
.RS 4
Each pixel be a single red component\&. This component is converted ta tha internal floating\-point format up in tha same way tha red component of a RGBA pixel is\&. Well shiiiit, it is then converted ta a RGBA pixel wit chronic n' blue set ta 0, n' alpha set ta 1\& fo' realz. Afta dis conversion, tha pixel is treated as if it had been read as a RGBA pixel\&.
.RE
.PP
\fBGL_GREEN\fR
.RS 4
Each pixel be a single chronic component\&. This component is converted ta tha internal floating\-point format up in tha same way tha chronic component of a RGBA pixel is\&. Well shiiiit, it is then converted ta a RGBA pixel wit red n' blue set ta 0, n' alpha set ta 1\& fo' realz. Afta dis conversion, tha pixel is treated as if it had been read as a RGBA pixel\&.
.RE
.PP
\fBGL_BLUE\fR
.RS 4
Each pixel be a single blue component\&. This component is converted ta tha internal floating\-point format up in tha same way tha blue component of a RGBA pixel is\&. Well shiiiit, it is then converted ta a RGBA pixel wit red n' chronic set ta 0, n' alpha set ta 1\& fo' realz. Afta dis conversion, tha pixel is treated as if it had been read as a RGBA pixel\&.
.RE
.PP
\fBGL_ALPHA\fR
.RS 4
Each pixel be a single alpha component\&. This component is converted ta tha internal floating\-point format up in tha same way tha alpha component of a RGBA pixel is\&. Well shiiiit, it is then converted ta a RGBA pixel wit red, green, n' blue set ta 0\& fo' realz. Afta dis conversion, tha pixel is treated as if it had been read as a RGBA pixel\&.
.RE
.PP
\fBGL_RGB\fR
.RS 4
.RE
.PP
\fBGL_BGR\fR
.RS 4
Each pixel be a three\-component group: red first, followed by green, followed by blue; for
\fBGL_BGR\fR, tha straight-up original gangsta component is blue, followed by chronic n' then red\&. Each component is converted ta tha internal floating\-point format up in tha same way tha red, green, n' blue componentz of a RGBA pixel are\&. Da color triple is converted ta a RGBA pixel wit alpha set ta 1\& fo' realz. Afta dis conversion, tha pixel is treated as if it had been read as a RGBA pixel\&.
.RE
.PP
\fBGL_LUMINANCE\fR
.RS 4
Each pixel be a single luminizzle component\&. This component is converted ta tha internal floating\-point format up in tha same way tha red component of a RGBA pixel is\&. Well shiiiit, it is then converted ta a RGBA pixel wit red, green, n' blue set ta tha converted luminizzle value, n' alpha set ta 1\& fo' realz. Afta dis conversion, tha pixel is treated as if it had been read as a RGBA pixel\&.
.RE
.PP
\fBGL_LUMINANCE_ALPHA\fR
.RS 4
Each pixel be a two\-component group: luminizzle first, followed by alpha\&. Da two components is converted ta tha internal floating\-point format up in tha same way tha red component of a RGBA pixel is\&. They is then converted ta a RGBA pixel wit red, green, n' blue set ta tha converted luminizzle value, n' alpha set ta tha converted alpha value\& fo' realz. Afta dis conversion, tha pixel is treated as if it had been read as a RGBA pixel\&.
.RE
.PP
Da followin table summarizes tha meanin of tha valid constants fo' the
\fItype\fR
parameter:
.PP
.TS
allbox tab(:);
lB lB.
T{
\fB
                                        Type
                                        \fR
T}:T{
\fB
                                        Correspondin Type
                                        \fR
T}
.T&
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l.
T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
unsigned 8\-bit integer
T}
T{
\fBGL_BYTE\fR
T}:T{
signed 8\-bit integer
T}
T{
\fBGL_BITMAP\fR
T}:T{
single bits up in unsigned 8\-bit integers
T}
T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
unsigned 16\-bit integer
T}
T{
\fBGL_SHORT\fR
T}:T{
signed 16\-bit integer
T}
T{
\fBGL_UNSIGNED_INT\fR
T}:T{
unsigned 32\-bit integer
T}
T{
\fBGL_INT\fR
T}:T{
32\-bit integer
T}
T{
\fBGL_FLOAT\fR
T}:T{
single\-precision floating\-point
T}
T{
\fBGL_UNSIGNED_BYTE_3_3_2\fR
T}:T{
unsigned 8\-bit integer
T}
T{
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR
T}:T{
unsigned 8\-bit integer wit reversed component ordering
T}
T{
\fBGL_UNSIGNED_SHORT_5_6_5\fR
T}:T{
unsigned 16\-bit integer
T}
T{
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR
T}:T{
unsigned 16\-bit integer wit reversed component ordering
T}
T{
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR
T}:T{
unsigned 16\-bit integer
T}
T{
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR
T}:T{
unsigned 16\-bit integer wit reversed component ordering
T}
T{
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR
T}:T{
unsigned 16\-bit integer
T}
T{
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR
T}:T{
unsigned 16\-bit integer wit reversed component ordering
T}
T{
\fBGL_UNSIGNED_INT_8_8_8_8\fR
T}:T{
unsigned 32\-bit integer
T}
T{
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR
T}:T{
unsigned 32\-bit integer wit reversed component ordering
T}
T{
\fBGL_UNSIGNED_INT_10_10_10_2\fR
T}:T{
unsigned 32\-bit integer
T}
T{
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
T}:T{
unsigned 32\-bit integer wit reversed component ordering
T}
.TE
.sp 1
.PP
.PP
Da rasterization busted lyrics bout so far assumes pixel zoom factorz of 1\&. If
\fBglPixelZoom\fR()
is used ta chizzle the
x
and
y
pixel zoom factors, pixels is converted ta fragments as bigs up\&. If
x r y r
is tha current rasta position, n' a given pixel is up in the
nth column and
mth row of tha pixel rectangle, then fragments is generated fo' pixels whose centas is up in tha rectangle wit corners at
.PP
x r + zoom x ⁢ n y r + zoom y ⁢ m.PP x r + zoom x ⁡ n + 1 y r + zoom y ⁡ m + 1
.PP
where
zoom x
is tha value of
\fBGL_ZOOM_X\fR
and
zoom y
is tha value of
\fBGL_ZOOM_Y\fR\&.
.SH "NOTES"
.PP
\fBGL_BGR\fR
and
\fBGL_BGRA\fR
are only valid for
\fIformat\fR
if tha GL version is 1\&.2 or pimped outer\&.
.PP
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR, and
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
are only valid for
\fItype\fR
if tha GL version is 1\&.2 or pimped outer\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIformat\fR
or
\fItype\fR
is not one of tha accepted joints\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is
\fBGL_BITMAP\fR
and
\fIformat\fR
is not either
\fBGL_COLOR_INDEX\fR
or
\fBGL_STENCIL_INDEX\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if either
\fIwidth\fR
or
\fIheight\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIformat\fR
is
\fBGL_STENCIL_INDEX\fR
and there is no stencil buffer\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIformat\fR
is
\fBGL_RED\fR,
\fBGL_GREEN\fR,
\fBGL_BLUE\fR,
\fBGL_ALPHA\fR,
\fBGL_RGB\fR,
\fBGL_RGBA\fR,
\fBGL_BGR\fR,
\fBGL_BGRA\fR,
\fBGL_LUMINANCE\fR, or
\fBGL_LUMINANCE_ALPHA\fR, n' tha GL is up in color index mode\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIformat\fR
is one of
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR, or
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR
and
\fIformat\fR
is not
\fBGL_RGB\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIformat\fR
is one of
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR, or
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
and
\fIformat\fR
is neither
\fBGL_RGBA\fR
nor
\fBGL_BGRA\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target n' tha data would be unpacked from tha buffer object such dat tha memory readz required would exceed tha data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible tha fuck into tha number of bytes needed ta store up in memory a thugged-out datum indicated by
\fItype\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglDrawPixels\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglAlphaFunc\fR(),
\fBglBlendFunc\fR(),
\fBglCopyPixels\fR(),
\fBglDepthFunc\fR(),
\fBglLogicOp\fR(),
\fBglPixelMap\fR(),
\fBglPixelStore\fR(),
\fBglPixelTransfer\fR(),
\fBglPixelZoom\fR(),
\fBglRasterPos\fR(),
\fBglReadPixels\fR(),
\fBglScissor\fR(),
\fBglStencilFunc\fR(),
\fBglWindowPos\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
