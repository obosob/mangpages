.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box-Overview 3"
.TH Mail::Box-Overview 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box\-Overview \- objects used by Mail::Box
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
Da MailBox package be a suite of classes fo' accessin n' managing
email foldaz up in a gangbangin' folder-independent manner n' shit. This package be an
alternatizzle ta tha \f(CW\*(C`Mail::Folder\*(C'\fR n' \f(CW\*(C`MIME::*\*(C'\fR packages. Well shiiiit, it abstracts the
detailz of lyrics, message storage, n' message threads, while
providin betta performizzle than olda mail packages. Well shiiiit, it is meant to
provide a object-oriented toolset fo' all kindz of e\-mail applications,
under which Mail User-Agents (\s-1MUA\s0) n' mail filterin programs.
.PP
This package is modular \-\-partz of it can be used independently of the
rest. For example, tha Mail::Box::Manager can automatically determine
that a gangbangin' folda is up in Mbox format n' return a object of the
Mail::Box::Mbox class, or tha user program can bypass tha manager and
create Mail::Box::Mbox objects directly. Right back up in yo muthafuckin ass. Similarly, if tha user program
is only manipulatin a single message, a Mail::Message.
.PP
Da Mail::Box package has special features ta help \s-1MUA\s0z access folder
data quickly up in random order n' shit.  Yo ass aint gonna straight-up benefit (neither
slower) if you need tha full folda sequentially.
.PP
Yo ass may want ta git a peep tha sample scripts up in tha \f(CW\*(C`scripts\*(C'\fR
directory.
.SS "Da class relations"
.IX Subsection "Da class relations"
Mail::Box::Manager objects play a cold-ass lil central role up in any program which
is built wit MailBox.  Each program will create one manager, and
then open foldaz via dat manager n' shit.  Besides folders, tha manager can
also be used ta discover message threads: sequencez of lyrics with
their follow-ups.
.PP
.Vb 8
\&                       <has\-a>      Mail::Box::Mbox
\&  Mail::Box::Manager <\-\-\-\-\-\-\-\-\-*    (Mail::Box::MH)
\&         ^                :         (Mail::Box::Maildir)
\&         |           (maintains)    (Mail::Box::POP3)
\&         |                :
\&         |                :
\&         \`\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-*  Mail::Box::Thread::Manager
\&                      (<has\-a>)
.Ve
.PP
Each folda maintains a list of lyrics.  Much effort is made ta hide
differences between folda types n' kindz of lyrics.  Yo crazy-ass program can
be used fo' \s-1MBOX, MH,\s0 Maildir, n' \s-1POP3\s0 foldaz wit no chizzle at all (as
long as you stick ta tha rules).
.PP
.Vb 10
\& Mail::Box::Mbox  <\-\-\-\-\-\-\-\-\-\-\-* Mail::Box::Mbox::Message
\&        ^             <has\-a>            ^
\&        | <isa>                          | <isa>
\&        |                                |
\&    Mail::Box     ............. Mail::Box::Message
\&                                         ^
\&                                         | <isa>
\&                                         |
\&                                   Mail::Message
\&                                        / \e
\&                                       <has\-a>  
\&                                      /     \e
\&                           Mail::Message   Mail::Message 
\&                             ::Body            ::Head
.Ve
.PP
Da thang fo' \s-1MH\s0 n' Maildir foldaz be a lil mo' fucked up,
because they have a extra intermediate level of abstraction: Mail::Box::Dir.
Da \s-1POP3\s0 folda has a intermediate Mail::Box::Net.
.PP
In tha future, when mo' Mbox-like folda types git implemented, there
may be a Mail::Box::File level like a muthafucka.  Da followin be also true
for tha mail boxes
.PP
.Vb 12
\& MB::MH::Message                 MB::POP3::Message
\&       \e  MB::Maildir::Message            /
\&        \e         /                      /
\&         \e       /   MB::Mbox::Message  /
\&          \e     /         |            /
\&        MB::Dir::Message  |   MB::Net::Message
\&                     \e    |    /
\&                      \e   |   /
\&                      MB::Message
\&                          |
\&                          |
\&                     Mail::Message
.Ve
.SS "Da Manager"
.IX Subsection "Da Manager"
Da mailbox manager Mail::Box::Manager encapsulates folda pimpment
issues. Well shiiiit, it maintains a set of open mail foldaz (mailboxes), n' provides
methodz fo' openin n' closin them, efficiently movin lyrics between
folders, n' efficiently appendin lyrics ta folders.  It gotz nuff
Mail::Box objects which may be of different types.  Most folda types
can be detected automatically.
.PP
Da main manager also manages message-thread detector objects, n' informs them
when tha contentz of a gangbangin' folda have chizzled. Y'all KNOW dat shit, muthafucka! This manager class is the
only one you instantiate yo ass: objectz of all other classes will be
provided by yo' folda manager.
.PP
Yo ass is straight fuckin advised ta use dis object yo, but you can often do without it
and open a specific folder-type directly.
.SS "Da Lyrics"
.IX Subsection "Da Lyrics"
.IP "Mail::Message" 4
.IX Item "Mail::Message"
A base class dat defines a intercourse fo' manipulatin tha head and
body of a message.  There is various header object types
(Mail::Message::Head's) n' a funky-ass bunch of body object types
(Mail::Message::Body's).
.Sp
Da Mail::Message::Construct package is loaded when mo' complex tasks
have ta be performed on lyrics, like bustin replies, bounces, or a
forward message.  These
functionalitizzles is busted lyrics bout n' implemented up in tha ::Construct
file yo, but is automatically added ta tha Mail::Message namespace when used.
.Sp
Message types which is foreign ta MailBox can be used up in the
MailBox environment: there be some convertas implemented via
Mail::Message::Convert.  Particularly tha ghettofab Mail::Internet
and MIME::Entitizzle is supported.
.IP "Mail::Box::Message" 4
.IX Item "Mail::Box::Message"
An abstract base class which defines a intercourse fo' mail lyrics
which is stored up in any folda n' shit.  It inherits from Mail::Message, and
addz tha basic scam of \fIlocation\fR ta a message.
.IP "Mail::Message::Body" 4
.IX Item "Mail::Message::Body"
This is tha base class fo' all message bodies. Put ya muthafuckin choppers up if ya feel dis!  It raps bout what tha fuck you
can do wit any kind of body.  Da body types differ on tha way how tha fuck the
keep tha body content durin tha run of yo' program.
.Sp
One special case of tha body types is tha Mail::Message::Body::Multipart, which
gotz nuff a set of Mail::Message::Part objects, n' you can put dat on yo' toast.  These is just like
normal lyrics, except dat they is contained up in a other message.
Da Mail::Message::Body::Nested body type is comparible yo, but gotz nuff only
one message: they is used fo' \f(CW\*(C`message/rfc822\*(C'\fR message encodings.
.Sp
When needed, tha functionalitizzle of tha body objects is extended with
Mail::Message::Body::Construct n' Mail::Message::Body::Encode.  The
forma package implements thangs like concatenation, tha lata controls message
encodin n' decoding.  In tha current implementation dis is limited to
transfer encodings (implemented up in tha Mail::Message::TransferEnc packages).
Automatic characta n' mime recodings is on tha wish-list.
.IP "Mail::Message::Head" 4
.IX Item "Mail::Message::Head"
Da header fo' a single message. Maintains a set of Mail::Message::Field
objects, each containin one header line.  Fieldz is tha only
objects which have no loggin n' tracin facilities, purely fo' reasons
of performance.
.Sp
Da header object has three sub-classes: tha Mail::Message::Head::Complete
version knows all lines fo' sure, Mail::Message::Head::Subset maintains
an unknown subset of lines, n' tha Mail::Message::Head::Delayed has no
lines yet but knows where ta git em.
.Sp
Da latta two will automatically git tha missin header lines from the
mailbox filez when needed, n' so transform tha fuck into a \f(CW\*(C`::Complete\*(C'\fR header.
It be straight-up transparent ta tha user of MailBox up in which shape the
header straight-up is on tha moment.
.SS "Da Folda types"
.IX Subsection "Da Folda types"
.IP "Mail::Box" 4
.IX Item "Mail::Box"
A base class dat defines a standard intercourse fo' mail boxes which
is independent of mailbox type. Objectz of dis class contain
a Mail::Box::Locker n' a list of Mail::Box::Message objects.
.IP "Mail::Box::Dir" 4
.IX Item "Mail::Box::Dir"
Da base class fo' all foldaz which bust a gangbangin' finger-lickin' directory organization: each
message be a separate entitizzle (file) grouped up in a gangbangin' finger-lickin' directory.  Each
Mail::Box::Dir::Message represents one message, one such entity.
.IP "Mail::Box::Net" 4
.IX Item "Mail::Box::Net"
Da base class fo' all foldaz which have tha lyrics outside direct
reach of tha MailBox library, fo' instizzle on a remote system, or in
a database.
.IP "Mail::Box::Mbox" 4
.IX Item "Mail::Box::Mbox"
This class derives from Mail::Box, n' implements its intercourse for
mbox-style folders. Well shiiiit, it maintains a set of Mail::Box::Mbox::Message
objects, which is derived from a Mail::Box::Message.
.Sp
Mbox-style foldaz have one file containin multiple lyrics per
folda n' shit.  When foldaz git large, access tendz ta git slow.
.IP "Mail::Box::MH" 4
.IX Item "Mail::Box::MH"
This class derives from Mail::Box::Dir, n' implements its intercourse for
MH-style folders. Well shiiiit, it maintains a set of Mail::Box::MH::Message
objects, which is derived from a Mail::Box::Dir::Message.
.Sp
MH-style foldaz is represented by a gangbangin' finger-lickin' directory, where each message is
stored up in a separate file.  Da message filez is sequentially numbered.
It be fast ta open one single message yo, but hard ta git a overview.
.IP "Mail::Box::MH::Index" 4
.IX Item "Mail::Box::MH::Index"
Da base class fo' \s-1MH\s0 mailbox indexes which serves up methodz fo' reading,
writing, n' managin message indexes.  These indexes is used to
speed-up access ta directory based folders.
.IP "Mail::Box::MH::Labels" 4
.IX Item "Mail::Box::MH::Labels"
Also fo' efficiency reasons, a separate file is maintained which gotz nuff
flags bout tha lyrics.  This file fo' instizzle lists freshly smoked up files.  This
way, tha \s-1MH\s0 message filez do not gotta be opened ta find dat out.
.IP "Mail::Box::Maildir" 4
.IX Item "Mail::Box::Maildir"
Like tha \s-1MH\s0 folda type, dis class derives from Mail::Box::Dir. Shiiit, dis aint no joke.  It
implements its intercourse fo' Maildir-style folders. Well shiiiit, it maintains a set
of Mail::Box::Maildir::Message objects, which is derived from a
Mail::Box::Dir::Message.
.IP "Mail::Box::POP3" 4
.IX Item "Mail::Box::POP3"
Implements tha \s-1POP3\s0 protocol based on Mail::Box::Net.  The
Mail::Transport::POP3 implementation handlez tha protocol details.  In this
kind of folders, you can only read n' delete lyrics.
.SS "Various Other Classes"
.IX Subsection "Various Other Classes"
.IP "Mail::Box::Thread::Manager" 4
.IX Item "Mail::Box::Thread::Manager"
Maintains a set of message-threadz over one or mo' folders.  A
message-thread be a start message wit all tha replies on dat shit.  And the
replies on replies, n' so on. I aint talkin' bout chicken n' gravy biatch.  This object is used ta construct the
thread fo' a set of open folders.
.Sp
This object maintains linked listz of Mail::Box::Thread::Node objects.
Mail::Message::Dummyz fill-up some holes.
.IP "Mail::Box::Locker" 4
.IX Item "Mail::Box::Locker"
Provides a gangbangin' folda lockin intercourse which is inherited by tha Mail::Box
class.  Currently it supports dot-file lockin (\f(CW\*(C`filename.lock\*(C'\fR),
flock filehandle locking, n' lockin over \s-1NFS. \s0 Each is implemented up in a
separate class.  A multi-locker, rockin a set of lock-methodz at the
same time be also available.
.IP "Mail::Box::Search" 4
.IX Item "Mail::Box::Search"
Da set of search packages implement various search steez up in a uniformal
way.  Although implementin yo' own search algorithm is simple up in general,
in practice multiparts, encodings, n' mime-types complicate thangs.
.IP "Mail::Box::Parser" 4
.IX Item "Mail::Box::Parser"
Da parser readz lyrics, n' transforms dem tha fuck into data-structures such
that tha content of header n' body can be used within tha program.  The
first parser is implemented up in pure Perl.  A second parser is under pimpment,
and will freestyled up in C, ta bust speed.
.IP "Mail::Box::Tie" 4
.IX Item "Mail::Box::Tie"
Provides hash (Mail::Box::Tie::HASH) or array tied
(Mail::Box::Tie::ARRAY) access ta any mail folda derived from
Mail::Box.  This beautifies yo' code up in some applications.
.IP "Mail::Transport" 4
.IX Item "Mail::Transport"
Various wayz of bustin  n' receivin lyrics is implemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Sending
is possible via external programs, like \f(CW\*(C`mail\*(C'\fR, \f(CW\*(C`Mailx\*(C'\fR, \f(CW\*(C`sendmail\*(C'\fR, or
autonomously wit direct \s-1SMTP. \s0 Receivin is currently only implemented
via \s-1POP3.\s0
.IP "Mail::Reporter" 4
.IX Item "Mail::Reporter"
A debuggin n' loggin class which is inherited by most of tha Mail::
modules.  For each object, you can say what tha fuck log n' error reports must be
kept or directly presented ta tha user n' shit.  This way you can decizzle ta have
Mail::Box report bout problems, or do all dat shiznit yo ass.
.PP
All classes is freestyled ta be extensible.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
