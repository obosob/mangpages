'\" t
.\"     Title: glCopyPixels
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLCOPYPIXELS" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glCopyPixels \- copy pixels up in tha frame buffer
.SH "C SPECIFICATION"
.HP \w'void\ glCopyPixels('u
.BI "void glCopyPixels(GLint\ " "x" ", GLint\ " "y" ", GLsizei\ " "width" ", GLsizei\ " "height" ", GLenum\ " "type" ");"
.SH "PARAMETERS"
.PP
\fIx\fR, \fIy\fR
.RS 4
Specify tha window coordinatez of tha lower left corner of tha rectangular region of pixels ta be copied\&.
.RE
.PP
\fIwidth\fR, \fIheight\fR
.RS 4
Specify tha dimensionz of tha rectangular region of pixels ta be copied\&. Both must be nonnegative\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies whether color joints, depth joints, or stencil joints is ta be copied\&. Right back up in yo muthafuckin ass. Symbolic constants
\fBGL_COLOR\fR,
\fBGL_DEPTH\fR, and
\fBGL_STENCIL\fR
are accepted\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglCopyPixels\fR
copies a screen\-aligned rectangle of pixels from tha specified frame buffer location ta a region relatizzle ta tha current rasta position\&. Its operation is well defined only if tha entire pixel source region is within tha exposed portion of tha window\&. Resultz of copies from outside tha window, or from regionz of tha window dat is not exposed, is hardware dependent n' undefined\&.
.PP
\fIx\fR
and
\fIy\fR
specify tha window coordinatez of tha lower left corner of tha rectangular region ta be copied\&.
\fIwidth\fR
and
\fIheight\fR
specify tha dimensionz of tha rectangular region ta be copied\&. Both
\fIwidth\fR
and
\fIheight\fR
must not be negative\&.
.PP
Several parametas control tha processin of tha pixel data while it is bein copied\&. These parametas is set wit three commands:
\fBglPixelTransfer\fR(),
\fBglPixelMap\fR(), and
\fBglPixelZoom\fR()\&. This reference page raps bout tha effects on
\fBglCopyPixels\fR
of most yo, but not all, of tha parametas specified by these three commands\&.
.PP
\fBglCopyPixels\fR
copies joints from each pixel wit tha lower left\-hand corner at
x + i y + j
for
0 <= i < width
and
0 <= j < height\&. This pixel is holla'd ta be the
ith pixel up in the
jth row\&. Pixels is copied up in row order from tha lowest ta tha highest row, left ta right up in each row\&.
.PP
\fItype\fR
specifies whether color, depth, or stencil data is ta be copied\&. Da detailz of tha transfer fo' each data type is as bigs up:
.PP
\fBGL_COLOR\fR
.RS 4
Indices or RGBA flavas is read from tha buffer currently specified as tha read source buffer (see
\fBglReadBuffer\fR())\&. If tha GL is up in color index mode, each index dat is read from dis buffer is converted ta a gangbangin' fixed\-point format wit a unspecified number of bits ta tha right of tha binary point\&. Each index is then shifted left by
\fBGL_INDEX_SHIFT\fR
bits, n' added to
\fBGL_INDEX_OFFSET\fR\&. If
\fBGL_INDEX_SHIFT\fR
is negative, tha shift is ta tha right\&. In either case, zero bits fill otherwise unspecified bit locations up in tha result\&. If
\fBGL_MAP_COLOR\fR
is true, tha index is replaced wit tha value dat it references up in lookup table
\fBGL_PIXEL_MAP_I_TO_I\fR\&. Whether tha lookup replacement of tha index is done or not, tha integer part of tha index is then ANDed with
2 b \- 1, where
b
is tha number of bits up in a cold-ass lil color index buffer\&.
.sp
If tha GL is up in RGBA mode, tha red, green, blue, n' alpha componentz of each pixel dat is read is converted ta a internal floating\-point format wit unspecified precision\&. Da conversion maps tha phattest representable component value ta 1\&.0, n' component value 0 ta 0\&.0\&. Da resultin floating\-point color joints is then multiplied by
\fBGL_c_SCALE\fR
and added to
\fBGL_c_BIAS\fR, where
\fIc\fR
is RED, GREEN, BLUE, n' ALPHA fo' tha respectizzle color components\&. Da thangs up in dis biatch is clamped ta tha range [0,1]\&. If
\fBGL_MAP_COLOR\fR
is true, each color component is scaled by tha size of lookup table
\fBGL_PIXEL_MAP_c_TO_c\fR, then replaced by tha value dat it references up in dat table\&.
\fIc\fR
is R, G, B, or A\&.
.sp
If the
ARB_imaging
extension is supported, tha color joints may be additionally processed by color\-table lookups, color\-matrix transformations, n' convolution filters\&.
.sp
Da GL then converts tha resultin indices or RGBA flavas ta fragments by attachin tha current rasta position
\fIz\fR
coordinizzle n' texture coordinates ta each pixel, then assignin window coordinates
x r + i y r + j, where
x r y r
is tha current rasta position, n' tha pixel was the
ith pixel up in the
jth row\&. These pixel fragments is then treated just like tha fragments generated by rasterizin points, lines, or polygons\&. Texture mapping, fog, n' all tha fragment operations is applied before tha fragments is freestyled ta tha frame buffer\&.
.RE
.PP
\fBGL_DEPTH\fR
.RS 4
Depth joints is read from tha depth buffer n' converted directly ta a internal floating\-point format wit unspecified precision\&. Da resultin floating\-point depth value is then multiplied by
\fBGL_DEPTH_SCALE\fR
and added to
\fBGL_DEPTH_BIAS\fR\&. Da result is clamped ta tha range [0,1]\&.
.sp
Da GL then converts tha resultin depth components ta fragments by attachin tha current rasta posizzle color or color index n' texture coordinates ta each pixel, then assignin window coordinates
x r + i y r + j, where
x r y r
is tha current rasta position, n' tha pixel was the
ith pixel up in the
jth row\&. These pixel fragments is then treated just like tha fragments generated by rasterizin points, lines, or polygons\&. Texture mapping, fog, n' all tha fragment operations is applied before tha fragments is freestyled ta tha frame buffer\&.
.RE
.PP
\fBGL_STENCIL\fR
.RS 4
Stencil indices is read from tha stencil buffer n' converted ta a internal fixed\-point format wit a unspecified number of bits ta tha right of tha binary point\&. Each fixed\-point index is then shifted left by
\fBGL_INDEX_SHIFT\fR
bits, n' added to
\fBGL_INDEX_OFFSET\fR\&. If
\fBGL_INDEX_SHIFT\fR
is negative, tha shift is ta tha right\&. In either case, zero bits fill otherwise unspecified bit locations up in tha result\&. If
\fBGL_MAP_STENCIL\fR
is true, tha index is replaced wit tha value dat it references up in lookup table
\fBGL_PIXEL_MAP_S_TO_S\fR\&. Whether tha lookup replacement of tha index is done or not, tha integer part of tha index is then ANDed with
2 b \- 1, where
b
is tha number of bits up in tha stencil buffer\&. Da resultin stencil indices is then freestyled ta tha stencil buffer such dat tha index read from the
ith location of the
jth row is freestyled ta location
x r + i y r + j, where
x r y r
is tha current rasta position\&. Only tha pixel ballershizzle test, tha scissor test, n' tha stencil writemask affect these write operations\&.
.RE
.PP
Da rasterization busted lyrics bout thus far assumes pixel zoom factorz of 1\&.0\&. If
\fBglPixelZoom\fR()
is used ta chizzle the
x
and
y
pixel zoom factors, pixels is converted ta fragments as bigs up\&. If
x r y r
is tha current rasta position, n' a given pixel is up in the
ith location up in the
jth row of tha source pixel rectangle, then fragments is generated fo' pixels whose centas is up in tha rectangle wit corners at
.PP
x r + zoom x ⁢ i y r + zoom y ⁢ j
.PP
and
.PP
x r + zoom x ⁡ i + 1 y r + zoom y ⁡ j + 1
.PP
where
zoom x
is tha value of
\fBGL_ZOOM_X\fR
and
zoom y
is tha value of
\fBGL_ZOOM_Y\fR\&.
.SH "EXAMPLES"
.PP
To copy tha color pixel up in tha lower left corner of tha window ta tha current rasta position, use
.PP
.if n \{\
.RS 4
.\}
.nf
glCopyPixels(0, 0, 1, 1, \fBGL_COLOR\fR);
            
.fi
.if n \{\
.RE
.\}
.PP
.SH "NOTES"
.PP
Modes specified by
\fBglPixelStore\fR()
have no effect on tha operation of
\fBglCopyPixels\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if either
\fIwidth\fR
or
\fIheight\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItype\fR
is
\fBGL_DEPTH\fR
and there is no depth buffer\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItype\fR
is
\fBGL_STENCIL\fR
and there is no stencil buffer\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglCopyPixels\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
.SH "SEE ALSO"
.PP
\fBglColorTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglDepthFunc\fR(),
\fBglDrawBuffer\fR(),
\fBglDrawPixels\fR(),
\fBglMatrixMode\fR(),
\fBglPixelMap\fR(),
\fBglPixelTransfer\fR(),
\fBglPixelZoom\fR(),
\fBglRasterPos\fR(),
\fBglReadBuffer\fR(),
\fBglReadPixels\fR(),
\fBglSeparableFilter2D\fR(),
\fBglStencilFunc\fR(),
\fBglWindowPos\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
