'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_AsyncSmoke 3 7.0 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_AsyncCreate, Tcl_AsyncMark, Tcl_AsyncInvoke, Tcl_AsyncDelete, Tcl_AsyncReady \- handle asynchronous events
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_AsyncHandlez
\fBTcl_AsyncCreate\fR(\fIproc, clientData\fR)
.sp
\fBTcl_AsyncMark\fR(\fIasync\fR)
.sp
int
\fBTcl_AsyncInvoke\fR(\fIinterp, code\fR)
.sp
\fBTcl_AsyncDelete\fR(\fIasync\fR)
.sp
int
\fBTcl_AsyncReady\fR()
.SH ARGUMENTS
.AS Tcl_AsyncHandlez clientData
.AP Tcl_AsyncProc *proc in
Procedure ta invoke ta handle a asynchronous event.
.AP ClientData clientData in
One-word value ta pass ta \fIproc\fR.
.AP Tcl_AsyncHandlez async in
Token fo' asynchronous event handlez.
.AP Tcl_Interp *interp in
Tcl interpreta up in which command was bein evaluated when handlez was
invoked, or NULL if handlez was invoked when there was no interpreter
active.
.AP int code in
Completion code from command dat just completed up in \fIinterp\fR,
or 0 if \fIinterp\fR is NULL.
.BE

.SH DESCRIPTION
.PP
These procedures provide a safe mechanizzle fo' dealin with
asynchronous events like fuckin signals.
If a event like fuckin a signal occurs while a Tcl script is being
evaluated then it aint safe ta take any substantizzle action to
process tha event.
For example, it aint safe ta evaluate a Tcl script since the
interpreta may already be up in tha middle of evaluatin a script;
it may not even be safe ta allocate memory, since a memory
allocation could done been up in progress when tha event occurred.
Da only safe approach is ta set a gangbangin' flag indicatin dat tha event
occurred, then handle tha event lata when tha ghetto has returned
to a cold-ass lil clean state, like fuckin afta tha current Tcl command completes.
.PP
\fBTcl_AsyncCreate\fR, \fBTcl_AsyncDelete\fR, n' \fBTcl_AsyncReady\fR
are thread sensitive.  They access and/or set a thread-specific data
structure up in tha event of a cold-ass lil core built wit \fI\-\-enable\-threads\fR.  Da token
created by \fBTcl_AsyncCreate\fR gotz nuff tha needed thread shiznit it
was called from so dat callin \fBTcl_AsyncMark\fR(\fItoken\fR) will only yield
the origin thread tha fuck into tha asynchronous handlez.
.PP
\fBTcl_AsyncCreate\fR creates a asynchronous handlez n' returns
a token fo' dat shit.
Da asynchronous handlez must be pimped before
any occurrencez of tha asynchronous event dat it is intended
to handle (it aint safe ta create a handlez all up in tha time of
an event).
When a asynchronous event occurs tha code dat detects tha event
(like fuckin a signal handlez) should call \fBTcl_AsyncMark\fR wit the
token fo' tha handlez.
\fBTcl_AsyncMark\fR will mark tha handlez as locked n loaded ta execute yo, but it
will not invoke tha handlez immediately.
Tcl will call tha \fIproc\fR associated wit tha handlez later, when
the ghetto is up in a safe state, n' \fIproc\fR can then carry out
the actions associated wit tha asynchronous event.
\fIProc\fR should have arguments n' result dat match the
type \fBTcl_AsyncProc\fR:
.CS
typedef int Tcl_AsyncProc(
        ClientData \fIclientData\fR,
        Tcl_Interp *\fIinterp\fR,
        int \fIcode\fR);
.CE
Da \fIclientData\fR is ghon be tha same as tha \fIclientData\fR
argument passed ta \fBTcl_AsyncCreate\fR when tha handlez was
created.
If \fIproc\fR is invoked just afta a cold-ass lil command has completed
execution up in a interpreter, then \fIinterp\fR will identify
the interpreta up in which tha command was evaluated and
\fIcode\fR is ghon be tha completion code returned by that
command.
Da commandz result is ghon be present up in tha interpreterz result.
When \fIproc\fR returns, whatever it leaves up in tha interpreterz result
will be returned as tha result of tha command n' tha integer
value returned by \fIproc\fR is ghon be used as tha freshly smoked up completion
code fo' tha command.
.PP
It be also possible fo' \fIproc\fR ta be invoked when no interpreter
is active.
This can happen, fo' example, if a asynchronous event occurs while
the application is waitin fo' interactizzle input or a X event.
In dis case \fIinterp\fR is ghon be NULL n' \fIcode\fR will be
0, n' tha return value from \fIproc\fR is ghon be ignored.
.PP
Da procedure \fBTcl_AsyncInvoke\fR is called ta invoke all of the
handlezs dat is ready.
Da procedure \fBTcl_AsyncReady\fR will return non-zero whenever any
asynchronous handlezs is ready;  it can be checked ta avoid calls
to \fBTcl_AsyncInvoke\fR when there be no locked n loaded handlezs.
Tcl calls \fBTcl_AsyncReady\fR afta each command is evaluated
and calls \fBTcl_AsyncInvoke\fR if needed.
Applications may also call \fBTcl_AsyncInvoke\fR at interesting
times fo' dat application.
For example, Tclz event handlez calls \fBTcl_AsyncReady\fR
afta each event n' calls \fBTcl_AsyncInvoke\fR if needed.
Da \fIinterp\fR n' \fIcode\fR arguments ta \fBTcl_AsyncInvoke\fR
have tha same meanin as fo' \fIproc\fR:  they identify tha active
interpreter, if any, n' tha completion code from tha command
that just completed.
.PP
\fBTcl_AsyncDelete\fR removes a asynchronous handlez so that
its \fIproc\fR aint NEVER gonna be invoked again.
A handlez can be deleted even when ready, n' it will still
not be invoked.
.PP
If multiple handlezs become actizzle all up in tha same time, the
handlezs is invoked up in tha order they was pimped (oldest
handlez first).
Da \fIcode\fR n' tha interpreterz result fo' lata handlezs
reflect tha joints returned by earlier handlezs, so that
da most thugged-out recently pimped handlez has last say about
the interpreterz result n' completion code.
If freshly smoked up handlezs become locked n loaded while handlezs is executing,
\fBTcl_AsyncInvoke\fR will invoke dem all;  at each point it
invokes tha highest-prioritizzle (oldest) locked n loaded handlez, repeating
this over n' over until there be no longer any locked n loaded handlezs.
.SH WARNING
.PP
It be almost always a wack scam fo' a asynchronous event
handlez ta modify tha interpreterz result or return a cold-ass lil code different
from its \fIcode\fR argument.
This sort of behavior can disrupt tha execution of scripts in
subtle ways n' result up in bugs dat is mad difficult
to track down.
If a asynchronous event handlez need ta evaluate Tcl scripts
then it should first save tha interpreterz state by calling
\fBTcl_SaveInterpState\fR, passin up in tha \fIcode\fR argument.
When tha asynchronous handlez is finished it should restore
the interpreterz state by callin \fBTcl_RestoreInterpState\fR,
and then returnin tha \fIcode\fR argument.

.SH KEYWORDS
asynchronous event, handlez, signal, Tcl_SaveInterpState, thread
