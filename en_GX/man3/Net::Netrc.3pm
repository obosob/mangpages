.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Netrc 3pm"
.TH Net::Netrc 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Netrc \- OO intercourse ta playas netrc file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::Netrc;
\&
\&    $mach = Net::Netrc\->lookup(\*(Aqsome.machine\*(Aq);
\&    $login = $mach\->login;
\&    ($login, $password, $account) = $mach\->lpa;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Netrc\*(C'\fR be a cold-ass lil class implementin a simple intercourse ta tha .netrc file
used as by tha ftp program.
.PP
\&\f(CW\*(C`Net::Netrc\*(C'\fR also implements securitizzle checks just like tha ftp program,
these checks are, first dat tha .netrc file must be owned by tha user n' 
second tha ballershizzle permissions should be such dat only tha balla has
read n' write access. If these conditions is not kicked it wit then a warnin is
output n' tha .netrc file aint read.
.SH "THE .netrc FILE"
.IX Header "THE .netrc FILE"
Da .netrc file gotz nuff login n' initialization shiznit used by the
auto-login process.  It resides up in tha userz home directory.  Da following
tokens is recognized; they may be separated by spaces, tabs, or new-lines:
.IP "machine name" 4
.IX Item "machine name"
Identify a remote machine name. Da auto-login process searches
the .netrc file fo' a machine token dat matches tha remote machine
specified. Y'all KNOW dat shit, muthafucka!  Once a match is made, tha subsequent .netrc tokens
are processed, stoppin when tha end of file is reached or an\-
other machine or a thugged-out default token is encountered.
.IP "default" 4
.IX Item "default"
This is tha same ol' dirty as machine name except dat default matches
any name.  There can be only one default token, n' it must be
afta all machine tokens.  This is normally used as:
.Sp
.Vb 1
\&    default login anonymous password user@site
.Ve
.Sp
thereby givin tha user automatic anonymous login ta machines
not specified up in .netrc.
.IP "login name" 4
.IX Item "login name"
Identify a user on tha remote machine.  If dis token is present,
the auto-login process will initiate a login rockin the
specified name.
.IP "password string" 4
.IX Item "password string"
Supply a password. Y'all KNOW dat shit, muthafucka!  If dis token is present, tha auto-login
process will supply tha specified strang if tha remote server
requires a password as part of tha login process.
.IP "account string" 4
.IX Item "account string"
Supply a additionizzle account password. Y'all KNOW dat shit, muthafucka!  If dis token is present,
the auto-login process will supply tha specified string
if tha remote server requires a additionizzle account password.
.IP "macdef name" 4
.IX Item "macdef name"
Define a macro. \f(CW\*(C`Net::Netrc\*(C'\fR only parses dis field ta be compatible
with \fIftp\fR.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
Da constructor fo' a \f(CW\*(C`Net::Netrc\*(C'\fR object aint called freshly smoked up as it do not
really create a freshly smoked up object. But instead is called \f(CW\*(C`lookup\*(C'\fR as dis is
essentially what tha fuck it do.
.IP "lookup ( \s-1MACHINE\s0 [, \s-1LOGIN \s0])" 4
.IX Item "lookup ( MACHINE [, LOGIN ])"
Lookup n' return a reference ta tha entry fo' \f(CW\*(C`MACHINE\*(C'\fR. If \f(CW\*(C`LOGIN\*(C'\fR is given
then tha entry returned gonna git tha given login. I aint talkin' bout chicken n' gravy biatch. If \f(CW\*(C`LOGIN\*(C'\fR aint given then
the first entry up in tha .netrc file fo' \f(CW\*(C`MACHINE\*(C'\fR is ghon be returned.
.Sp
If a matchin entry cannot be found, n' a thugged-out default entry exists, then a
reference ta tha default entry is returned.
.Sp
If there is no matchin entry found n' there is no default defined, or
no .netrc file is found, then \f(CW\*(C`undef\*(C'\fR is returned.
.SH "METHODS"
.IX Header "METHODS"
.IP "login ()" 4
.IX Item "login ()"
Return tha login id fo' tha netrc entry
.IP "password ()" 4
.IX Item "password ()"
Return tha password fo' tha netrc entry
.IP "account ()" 4
.IX Item "account ()"
Return tha account shiznit fo' tha netrc entry
.IP "lpa ()" 4
.IX Item "lpa ()"
Return a list of login, password n' account shiznit fir tha netrc entry
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Netrc
Net::Cmd
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-1998 Graham Barr fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
