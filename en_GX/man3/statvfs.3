.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Da pathconf note is from Walta Harms
.\" This aint a system call on Linux
.\"
.\" Modified 2004-06-23 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.TH STATVFS 3 2003-08-22 "Linux" "Linux Programmerz Manual"
.SH NAME
statvfs, fstatvfs \- git file system statistics
.SH SYNOPSIS
.B #include <sys/statvfs.h>
.sp
.BI "int statvfs(const char *" path ", struct statvfs *" buf );
.br
.BI "int fstatvfs(int " fd ", struct statvfs *" buf );
.SH DESCRIPTION
Da function
.BR statvfs ()
returns shiznit on some mounted file system.
.I path
is tha pathname of any file within tha mounted file system.
.I buf
is a pointa ta a
.I statvfs
structure defined approximately as bigs up:

.in +4n
.nf
struct statvfs {
    unsigned long  f_bsize;    /* file system block size */
    unsigned long  f_frsize;   /* fragment size */
    fsblkcnt_t     f_blocks;   /* size of fs up in f_frsize units */
    fsblkcnt_t     f_bfree;    /* # free blocks */
    fsblkcnt_t     f_bavail;   /* # free blocks fo' unprivileged playas */
    fsfilcnt_t     f_files;    /* # inodes */
    fsfilcnt_t     f_ffree;    /* # free inodes */
    fsfilcnt_t     f_favail;   /* # free inodes fo' unprivileged playas */
    unsigned long  f_fsid;     /* file system ID */
    unsigned long  f_flag;     /* mount flags */
    unsigned long  f_namemax;  /* maximum filename length */
};
.fi
.in

Here tha types
.I fsblkcnt_t
and
.I fsfilcnt_t
are defined in
.IR <sys/types.h> .
Both used ta be
.IR "unsigned long" .

Da field
.I f_flag
is a lil' bit mask (of mount flags, see
.BR mount (8)).
Bits defined by POSIX are
.TP
.B ST_RDONLY
Read-only file system.
.TP
.B ST_NOSUID
Set-user-ID/set-group-ID bits is ignored by
.BR exec (3).
.LP
It be unspecified whether all thugz of tha returned struct
have meaningful joints on all file systems.

.BR fstatvfs ()
returns tha same ol' dirty shiznit bout a open file referenced by descriptor
.IR fd .
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
.RB ( statvfs ())
Search permission is denied fo' a cold-ass lil component of tha path prefix of
.IR path .
(See also
.BR path_resolution (7).)
.TP
.B EBADF
.RB ( fstatvfs ())
.I fd
is not a valid open file descriptor.
.TP
.B EFAULT
.I Buf
or
.I path
points ta a invalid address.
.TP
.B EINTR
This call was interrupted by a signal.
.TP
.B EIO
An I/O error occurred while readin from tha file system.
.TP
.B ELOOP
.RB ( statvfs ())
Too nuff symbolic links was encountered up in translating
.IR path .
.TP
.B ENAMETOOLONG
.RB ( statvfs ())
.I path
is too long.
.TP
.B ENOENT
.RB ( statvfs ())
Da file referred ta by
.I path
does not exist.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOSYS
Da file system do not support dis call.
.TP
.B ENOTDIR
.RB ( statvfs ())
A component of tha path prefix of
.I path
is not a gangbangin' finger-lickin' directory.
.TP
.B EOVERFLOW
Some joints was too big-ass ta be represented up in tha returned struct.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Da Linux kernel has system calls
.BR statfs (2)
and
.BR fstatfs (2)
to support dis library call.

Da current glibc implementations of
.sp
.nf
   pathconf(path, _PC_REC_XFER_ALIGN);
   pathconf(path, _PC_ALLOC_SIZE_MIN);
   pathconf(path, _PC_REC_MIN_XFER_SIZE);
.fi
.sp
respectively use the
.IR f_frsize ,
.IR f_frsize ,
and
.I f_bsize
fieldz of tha return value of
.IR "statvfs(path,buf)" .
.SH SEE ALSO
.BR statfs (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
