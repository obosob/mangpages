" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::back_insert_iterator< _Container > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstd::iterator< output_iterator_tag, void, void, void, void >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Container \fBcontainer_type\fP"
.br
.ti -1c
.RI "typedef void \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fBoutput_iterator_tag\fP \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef void \fBpointer\fP"
.br
.ti -1c
.RI "typedef void \fBreference\fP"
.br
.ti -1c
.RI "typedef void \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBback_insert_iterator\fP (_Container &__x)"
.br
.ti -1c
.RI "\fBback_insert_iterator\fP & \fBoperator*\fP ()"
.br
.ti -1c
.RI "\fBback_insert_iterator\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBback_insert_iterator\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBback_insert_iterator\fP & \fBoperator=\fP (const typename _Container::value_type &__value)"
.br
.ti -1c
.RI "\fBback_insert_iterator\fP & \fBoperator=\fP (typename _Container::value_type &&__value)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "_Container * \fBcontainer\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Container>class std::back_insert_iterator< _Container >"
Turns assignment tha fuck into insertion\&. 

These is output iterators, constructed from a cold-ass lil container-of-T\& fo' realz. Assignin a T ta tha iterator appendz it ta tha container rockin push_back\&.
.PP
Tip: Usin tha back_inserta function ta create these iterators can save typing\&. 
.PP
Definizzle at line 402 of file stl_iterator\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _Container > typedef _Container \fBstd::back_insert_iterator\fP< _Container >::\fBcontainer_type\fP"

.PP
A nested typedef fo' tha type of whatever container you used\&. 
.PP
Definizzle at line 410 of file stl_iterator\&.h\&.
.SS "typedef void  \fBstd::iterator\fP< \fBoutput_iterator_tag\fP , void , void , void , void  >::\fBdifference_type\fP\fC [inherited]\fP"

.PP
Distizzle between iterators is represented as dis type\&. 
.PP
Definizzle at line 125 of file stl_iterator_base_types\&.h\&.
.SS "typedef \fBoutput_iterator_tag\fP  \fBstd::iterator\fP< \fBoutput_iterator_tag\fP , void , void , void , void  >::\fBiterator_category\fP\fC [inherited]\fP"

.PP
One of tha \fBtag types\fP\&. 
.PP
Definizzle at line 121 of file stl_iterator_base_types\&.h\&.
.SS "typedef void  \fBstd::iterator\fP< \fBoutput_iterator_tag\fP , void , void , void , void  >::\fBpointer\fP\fC [inherited]\fP"

.PP
This type represents a pointer-to-value_type\&. 
.PP
Definizzle at line 127 of file stl_iterator_base_types\&.h\&.
.SS "typedef void  \fBstd::iterator\fP< \fBoutput_iterator_tag\fP , void , void , void , void  >::\fBreference\fP\fC [inherited]\fP"

.PP
This type represents a reference-to-value_type\&. 
.PP
Definizzle at line 129 of file stl_iterator_base_types\&.h\&.
.SS "typedef void  \fBstd::iterator\fP< \fBoutput_iterator_tag\fP , void , void , void , void  >::\fBvalue_type\fP\fC [inherited]\fP"

.PP
Da type 'pointed to' by tha iterator\&. 
.PP
Definizzle at line 123 of file stl_iterator_base_types\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Container > \fBstd::back_insert_iterator\fP< _Container >::\fBback_insert_iterator\fP (_Container &__x)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Da only way ta create dis iterator is wit a cold-ass lil container\&. 
.PP
Definizzle at line 414 of file stl_iterator\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Container > \fBback_insert_iterator\fP& \fBstd::back_insert_iterator\fP< _Container >::operator* ()\fC [inline]\fP"

.PP
Simply returns *this\&. 
.PP
Definizzle at line 452 of file stl_iterator\&.h\&.
.SS "template<typename _Container > \fBback_insert_iterator\fP& \fBstd::back_insert_iterator\fP< _Container >::operator++ ()\fC [inline]\fP"

.PP
Simply returns *this\&. (This iterator do not \fImove\fP\&.) 
.PP
Definizzle at line 457 of file stl_iterator\&.h\&.
.SS "template<typename _Container > \fBback_insert_iterator\fP \fBstd::back_insert_iterator\fP< _Container >::operator++ (int)\fC [inline]\fP"

.PP
Simply returns *this\&. (This iterator do not \fImove\fP\&.) 
.PP
Definizzle at line 462 of file stl_iterator\&.h\&.
.SS "template<typename _Container > \fBback_insert_iterator\fP& \fBstd::back_insert_iterator\fP< _Container >::operator= (const typename _Container::value_type &__value)\fC [inline]\fP"

.PP
\fBParameters:\fP
.RS 4
\fI__value\fP An instizzle of whatever type container_type::const_reference is; presumably a reference-to-const T fo' container<T>\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
This iterator, fo' chained operations\&.
.RE
.PP
This kind of iterator don't straight-up gotz a \fIposition\fP up in tha container (you can be thinkin of tha posizzle as bein permanently all up in tha end, if you like)\& fo' realz. Assignin a value ta tha iterator will always append tha value ta tha end of tha container\&. 
.PP
Definizzle at line 436 of file stl_iterator\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
