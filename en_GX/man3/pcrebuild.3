.TH PCREBUILD 3 "12 May 2013" "PCRE 8.33"
.SH NAME
PCRE - Perl-compatible regular expressions
.
.
.SH "BUILDING PCRE"
.rs
.sp
PCRE is distributed wit a \fBconfigure\fP script dat can be used ta build the
library up in Unix-like environments rockin tha applications known as Autotools.
Also up in tha distribution is filez ta support buildin rockin \fBCMake\fP
instead of \fBconfigure\fP. Da text file
.\" HTML <a href="README.txt">
.\" </a>
\fBREADME\fP
.\"
gotz nuff general shiznit bout buildin wit Autotools (some of which is
repeated below), n' also has some comments bout buildin on various operating
systems. There be a shitload mo' shiznit bout buildin PCRE without using
Autotools (includin shiznit bout rockin \fBCMake\fP n' buildin "by
hand") up in tha text file called
.\" HTML <a href="NON-AUTOTOOLS-BUILD.txt">
.\" </a>
\fBNON-AUTOTOOLS-BUILD\fP.
.\"
Yo ass should consult dis file as well as the
.\" HTML <a href="README.txt">
.\" </a>
\fBREADME\fP
.\"
file if yo ass is buildin up in a non-Unix-like environment.
.
.
.SH "PCRE BUILD-TIME OPTIONS"
.rs
.sp
Da rest of dis document raps bout tha optionizzle featurez of PCRE dat can be
selected when tha library is compiled. Y'all KNOW dat shit, muthafucka! Well shiiiit, it assumes use of tha \fBconfigure\fP
script, where tha optionizzle features is selected or deselected by providing
options ta \fBconfigure\fP before hustlin tha \fBmake\fP command. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat the
same options can be selected up in both Unix-like n' non-Unix-like environments
usin tha GUI facilitizzle of \fBcmake-gui\fP if yo ass is rockin \fBCMake\fP instead
of \fBconfigure\fP ta build PCRE.
.P
If yo ass is not rockin Autotools or \fBCMake\fP, option selection can be done by
editin tha \fBconfig.h\fP file, or by passin parameta settings ta the
compiler, as busted lyrics bout in
.\" HTML <a href="NON-AUTOTOOLS-BUILD.txt">
.\" </a>
\fBNON-AUTOTOOLS-BUILD\fP.
.\"
.P
Da complete list of options fo' \fBconfigure\fP (which includes tha standard
ones like fuckin tha selection of tha installation directory) can be obtained by
running
.sp
  ./configure --help
.sp
Da followin sections include descriptionz of options whose names begin with
--enable or --disable. These settings specify chizzlez ta tha defaults fo' the
\fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! Because of tha way dat \fBconfigure\fP works,
--enable n' --disable always come up in pairs, so tha complementary option always
exists as well yo, but as it specifies tha default, it aint busted lyrics about.
.
.
.SH "BUILDING 8-BIT, 16-BIT AND 32-BIT LIBRARIES"
.rs
.sp
By default, a library called \fBlibpcre\fP is built, containin functions that
take strang arguments contained up in vectorz of bytes, either as single-byte
characters, or interpreted as UTF-8 strings. Yo ass can also build a separate
library, called \fBlibpcre16\fP, up in which strings is contained up in vectors of
16-bit data units n' interpreted either as single-unit charactas or UTF-16
strings, by adding
.sp
  --enable-pcre16
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! Yo ass can also build yet another separate
library, called \fBlibpcre32\fP, up in which strings is contained up in vectors of
32-bit data units n' interpreted either as single-unit charactas or UTF-32
strings, by adding
.sp
  --enable-pcre32
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! If you do not want tha 8-bit library, add
.sp
  --disable-pcre8
.sp
as well fo' realz. At least one of tha three libraries must be built. Note dat tha C++
and POSIX wrappers is fo' tha 8-bit library only, n' dat \fBpcregrep\fP is
an 8-bit program. None of these is built if you select only tha 16-bit or
32-bit libraries.
.
.
.SH "BUILDING SHARED AND STATIC LIBRARIES"
.rs
.sp
Da Autotools PCRE buildin process uses \fBlibtool\fP ta build both shared and
static libraries by default. Yo ass can suppress one of these by addin one of
.sp
  --disable-shared
  --disable-static
.sp
to tha \fBconfigure\fP command, as required.
.
.
.SH "C++ SUPPORT"
.rs
.sp
By default, if tha 8-bit library is bein built, tha \fBconfigure\fP script
will search fo' a C++ compila n' C++ header files. If it findz them, it
automatically buildz tha C++ wrapper library (which supports only 8-bit
strings). Yo ass can disable dis by adding
.sp
  --disable-cpp
.sp
to tha \fBconfigure\fP command.
.
.
.SH "UTF-8, UTF-16 AND UTF-32 SUPPORT"
.rs
.sp
To build PCRE wit support fo' UTF Unicode characta strings, add
.sp
  --enable-utf
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! This settin applies ta all three libraries,
addin support fo' UTF-8 ta tha 8-bit library, support fo' UTF-16 ta tha 16-bit
library, n' support fo' UTF-32 ta tha ta tha 32-bit library. There is no
separate options fo' enablin UTF-8, UTF-16 n' UTF-32 independently cuz
that would allow wack settings like fuckin requestin UTF-16 support while
buildin only tha 8-bit library. Well shiiiit, it aint possible ta build one library with
UTF support n' another without up in tha same configuration. I aint talkin' bout chicken n' gravy biatch. (For backwards
compatibility, --enable-utf8 be a synonym of --enable-utf.)
.P
Of itself, dis settin do not make PCRE treat strings as UTF-8, UTF-16 or
UTF-32 fo' realz. As well as compilin PCRE wit dis option, you also have gotta set
the PCRE_UTF8, PCRE_UTF16 or PCRE_UTF32 option (as appropriate) when you call
one of tha pattern compilin functions.
.P
If you set --enable-utf when compilin up in a EBCDIC environment, PCRE expects
its input ta be either ASCII or UTF-8 (dependin on tha run-time option). Well shiiiit, it is
not possible ta support both EBCDIC n' UTF-8 codes up in tha same version of the
library. Consequently, --enable-utf n' --enable-ebcdic is mutually
exclusive.
.
.
.SH "UNICODE CHARACTER PROPERTY SUPPORT"
.rs
.sp
UTF support allows tha libraries ta process characta codepoints up ta 0x10ffff
in tha strings dat they handle. On its own, however, it do not provide any
facilitizzles fo' accessin tha propertizzlez of such characters. If you wanna be
able ta use tha pattern escapes \eP, \ep, n' \eX, which refer ta Unicode
characta properties, you must add
.sp
  --enable-unicode-properties
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! This implies UTF support, even if you have
not explicitly axed dat shit.
.P
Includin Unicode property support addz round 30K of tablez ta tha PCRE
library. Only tha general category propertizzles like fuckin \fILu\fP n' \fINd\fP are
supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Details is given up in the
.\" HREF
\fBpcrepattern\fP
.\"
documentation.
.
.
.SH "JUST-IN-TIME COMPILER SUPPORT"
.rs
.sp
Just-in-time compila support is included up in tha build by specifying
.sp
  --enable-jit
.sp
This support be available only fo' certain hardware architectures. If this
option is set fo' a unsupported architecture, a cold-ass lil compile time error occurs.
See the
.\" HREF
\fBpcrejit\fP
.\"
documentation fo' a gangbangin' finger-lickin' rap of JIT usage. When JIT support is enabled,
pcregrep automatically make use of it, unless you add
.sp
  --disable-pcregrep-jit
.sp
to tha "configure" command.
.
.
.SH "CODE VALUE OF NEWLINE"
.rs
.sp
By default, PCRE interprets tha linefeed (LF) characta as indicatin tha end
of a line. This is tha aiiight newline characta on Unix-like systems. Yo ass can
compile PCRE ta use carriage return (CR) instead, by adding
.sp
  --enable-newline-is-cr
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! There be also a --enable-newline-is-lf option,
which explicitly specifies linefeed as tha newline character.
.sp
Alternatively, you can specify dat line endings is ta be indicated by tha two
characta sequence CRLF. If you want this, add
.sp
  --enable-newline-is-crlf
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! There be a gangbangin' fourth option, specified by
.sp
  --enable-newline-is-anycrlf
.sp
which causes PCRE ta recognize any of tha three sequences CR, LF, or CRLF as
indicatin a line ending. Finally, a gangbangin' fifth option, specified by
.sp
  --enable-newline-is-any
.sp
causes PCRE ta recognize any Unicode newline sequence.
.P
Whatever line endin convention is selected when PCRE is built can be
overridden when tha library functions is called. Y'all KNOW dat shit, muthafucka! At build time it is
conventionizzle ta use tha standard fo' yo' operatin system.
.
.
.SH "WHAT \eR MATCHES"
.rs
.sp
By default, tha sequence \eR up in a pattern matches any Unicode newline sequence,
whatever has been selected as tha line endin sequence. If you specify
.sp
  --enable-bsr-anycrlf
.sp
the default is chizzled so dat \eR matches only CR, LF, or CRLF. Whatever is
selected when PCRE is built can be overridden when tha library functions are
called.
.
.
.SH "POSIX MALLOC USAGE"
.rs
.sp
When tha 8-bit library is called all up in tha POSIX intercourse (see the
.\" HREF
\fBpcreposix\fP
.\"
documentation), additionizzle hustlin storage is required fo' holdin tha pointers
to capturin substrings, cuz PCRE requires three integers per substring,
whereas tha POSIX intercourse serves up only two. If tha number of expected
substrings is small, tha wrapper function uses space on tha stack, cuz this
is fasta than rockin \fBmalloc()\fP fo' each call. Da default threshold above
which tha stack is no longer used is 10; it can be chizzled by addin a setting
such as
.sp
  --with-posix-malloc-threshold=20
.sp
to tha \fBconfigure\fP command.
.
.
.SH "HANDLING VERY LARGE PATTERNS"
.rs
.sp
Within a cold-ass lil compiled pattern, offset joints is used ta point from one part to
another (for example, from a openin parenthesis ta a alternation
metacharacter). By default, up in tha 8-bit n' 16-bit libraries, two-byte joints
are used fo' these offsets, leadin ta a maximum size fo' a cold-ass lil compiled pattern of
around 64K. This is sufficient ta handle all but da most thugged-out gigantic patterns.
Nevertheless, some playas do wanna process truly enormous patterns, so it is
possible ta compile PCRE ta use three-byte or four-byte offsets by addin a
settin such as
.sp
  --with-link-size=3
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! Da value given must be 2, 3, or 4. For the
16-bit library, a value of 3 is rounded up ta 4. In these libraries, using
longer offsets slows down tha operation of PCRE cuz it has ta load
additionizzle data when handlin em. For tha 32-bit library tha value be always
4 n' cannot be overridden; tha value of --with-link-size is ignored.
.
.
.SH "AVOIDING EXCESSIVE STACK USAGE"
.rs
.sp
When matchin wit tha \fBpcre_exec()\fP function, PCRE implements backtracking
by makin recursive calls ta a internal function called \fBmatch()\fP. In
environments where tha size of tha stack is limited, dis can severely limit
PCREz operation. I aint talkin' bout chicken n' gravy biatch. (Da Unix environment do not probably suffer from this
problem yo, but it may sometimes be necessary ta increase tha maximum stack size.
There be a gangbangin' finger-lickin' rap up in the
.\" HREF
\fBpcrestack\fP
.\"
documentation.) An alternatizzle approach ta recursion dat uses memory from the
heap ta remember data, instead of rockin recursive function calls, has been
implemented ta work round tha problem of limited stack size. If you want to
build a version of PCRE dat works dis way, add
.sp
  --disable-stack-for-recursion
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! With dis configuration, PCRE will use the
\fBpcre_stack_malloc\fP n' \fBpcre_stack_free\fP variablez ta booty-call memory
management functions. By default these point ta \fBmalloc()\fP and
\fBfree()\fP yo, but you can replace tha pointas so dat yo' own functions are
used instead.
.P
Separate functions is provided rather than rockin \fBpcre_malloc\fP and
\fBpcre_free\fP cuz tha usage is straight-up predictable: tha block sizes
axed is always tha same, n' tha blocks is always freed up in reverse
order n' shiznit fo' realz. A callin program might be able ta implement optimized functions that
perform betta than \fBmalloc()\fP n' \fBfree()\fP. PCRE runs noticeably more
slowly when built up in dis way. This option affects only tha \fBpcre_exec()\fP
function; it aint relevant fo' \fBpcre_dfa_exec()\fP.
.
.
.SH "LIMITING PCRE RESOURCE USAGE"
.rs
.sp
Internally, PCRE has a gangbangin' function called \fBmatch()\fP, which it calls repeatedly
(sometimes recursively) when matchin a pattern wit tha \fBpcre_exec()\fP
function. I aint talkin' bout chicken n' gravy biatch. By controllin tha maximum number of times dis function may be
called durin a single matchin operation, a limit can be placed on the
resources used by a single call ta \fBpcre_exec()\fP. Da limit can be chizzled
at run time, as busted lyrics bout up in the
.\" HREF
\fBpcreapi\fP
.\"
documentation. I aint talkin' bout chicken n' gravy biatch. Da default is 10 mazillion yo, but dis can be chizzled by addin a
settin such as
.sp
  --with-match-limit=500000
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! This settin has no effect on the
\fBpcre_dfa_exec()\fP matchin function.
.P
In some environments it is desirable ta limit tha depth of recursive calls of
\fBmatch()\fP mo' strictly than tha total number of calls, up in order to
restrict tha maximum amount of stack (or heap, if --disable-stack-for-recursion
is specified) dat is used. Y'all KNOW dat shit, muthafucka! A second limit controls this; it defaults ta the
value dat is set fo' --with-match-limit, which imposes no additional
constraints, n' you can put dat on yo' toast. But fuck dat shiznit yo, tha word on tha street is dat you can set a lower limit by adding, fo' example,
.sp
  --with-match-limit-recursion=10000
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! This value can also be overridden at run time.
.
.
.SH "CREATING CHARACTER TABLES AT BUILD TIME"
.rs
.sp
PCRE uses fixed tablez fo' processin charactas whose code joints is less
than 256. By default, PCRE is built wit a set of tablez dat is distributed
in tha file \fIpcre_chartables.c.dist\fP. These tablez is fo' ASCII codes
only. If you add
.sp
  --enable-rebuild-chartables
.sp
to tha \fBconfigure\fP command, tha distributed tablez is no longer used.
Instead, a program called \fBdftables\fP is compiled n' run. I aint talkin' bout chicken n' gravy biatch. This outputs the
source fo' freshly smoked up set of tables, pimped up in tha default locale of yo' C run-time
system. (This method of replacin tha tablez do not work if yo ass is cross
compiling, cuz \fBdftables\fP is run on tha local host. If you need to
create alternatizzle tablez when cross compiling, yo big-ass booty is ghon gotta do so "by
hand".)
.
.
.SH "USING EBCDIC CODE"
.rs
.sp
PCRE assumes by default dat it will run up in a environment where tha character
code is ASCII (or Unicode, which be a superset of ASCII). This is tha case for
most computa operatin systems. PCRE can, however, be compiled ta run up in an
EBCDIC environment by adding
.sp
  --enable-ebcdic
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! This settin implies
--enable-rebuild-chartables. Yo ass should only use it if you know dat yo ass is in
an EBCDIC environment (for example, a IBM mainframe operatin system). The
--enable-ebcdic option is incompatible wit --enable-utf.
.P
Da EBCDIC characta dat correspondz ta a ASCII LF be assumed ta have the
value 0x15 by default. But fuck dat shiznit yo, tha word on tha street is dat up in some EBCDIC environments, 0x25 is used. Y'all KNOW dat shit, muthafucka! In
such a environment you should use
.sp
  --enable-ebcdic-nl25
.sp
as well as, or instead of, --enable-ebcdic. Da EBCDIC characta fo' CR has the
same value as up in ASCII, namely, 0x0d. Y'all KNOW dat shit, muthafucka! Whichever of 0x15 n' 0x25 is \fInot\fP
chosen as LF is made ta correspond ta tha Unicode NEL characta (which, in
Unicode, is 0x85).
.P
Da options dat select newline behaviour, like fuckin --enable-newline-is-cr,
and equivalent run-time options, refer ta these characta joints up in a EBCDIC
environment.
.
.
.SH "PCREGREP OPTIONS FOR COMPRESSED FILE SUPPORT"
.rs
.sp
By default, \fBpcregrep\fP readz all filez as plain text. Yo ass can build it so
that it recognizes filez whose names end up in \fB.gz\fP or \fB.bz2\fP, n' reads
them wit \fBlibz\fP or \fBlibbz2\fP, respectively, by addin one or both of
.sp
  --enable-pcregrep-libz
  --enable-pcregrep-libbz2
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! These options naturally require dat the
relevant libraries is installed on yo' system. Configuration will fail if
they is not.
.
.
.SH "PCREGREP BUFFER SIZE"
.rs
.sp
\fBpcregrep\fP uses a internal buffer ta hold a "window" on tha file it is
scanning, up in order ta be able ta output "before" n' "after" lines when it
findz a match. Da size of tha buffer is controlled by a parameta whose
default value is 20K. Da buffer itself is three times dis size yo, but cuz
of tha way it is used fo' holdin "before" lines, tha longest line dat is
guaranteed ta be processable is tha parameta size. Yo ass can chizzle tha default
parameta value by adding, fo' example,
.sp
  --with-pcregrep-bufsize=50K
.sp
to tha \fBconfigure\fP command. Y'all KNOW dat shit, muthafucka! Da calla of \fPpcregrep\fP can, however,
override dis value by specifyin a run-time option.
.
.
.SH "PCRETEST OPTION FOR LIBREADLINE SUPPORT"
.rs
.sp
If you add
.sp
  --enable-pcretest-libreadline
.sp
to tha \fBconfigure\fP command, \fBpcretest\fP is linked wit the
\fBlibreadline\fP library, n' when its input is from a terminal, it readz it
usin tha \fBreadline()\fP function. I aint talkin' bout chicken n' gravy biatch. This serves up line-editin n' history
facilities. Put ya muthafuckin choppers up if ya feel dis! Note dat \fBlibreadline\fP is GPL-licensed, so if you distribute a
binary of \fBpcretest\fP linked up in dis way, there may be licensin issues.
.P
Settin dis option causes tha \fB-lreadline\fP option ta be added ta the
\fBpcretest\fP build. Y'all KNOW dat shit, muthafucka! In nuff operatin environments wit a sytem-installed
\fBlibreadline\fP dis is sufficient. But fuck dat shiznit yo, tha word on tha street is dat up in some environments (e.g.
if a unmodified distribution version of readline is up in use), some extra
configuration may be necessary. Da INSTALL file fo' \fBlibreadline\fP says
this:
.sp
  "Readline uses tha termcap functions yo, but do not link wit the
  termcap or curses library itself, allowin applications which link
  wit readline tha ta chizzle a appropriate library."
.sp
If yo' environment has not been set up so dat a appropriate library is
automatically included, you may need ta add suttin' like
.sp
  LIBS="-ncurses"
.sp
immediately before tha \fBconfigure\fP command.
.
.
.SH "DEBUGGING WITH VALGRIND SUPPORT"
.rs
.sp
By addin the
.sp
  --enable-valgrind
.sp
option ta ta tha \fBconfigure\fP command, PCRE will use valgrind annotations
to mark certain memory regions as unaddressable. This allows it ta detect
invalid memory accesses, n' is mostly useful fo' debuggin PCRE itself.
.
.
.SH "CODE COVERAGE REPORTING"
.rs
.sp
If yo' C compila is gcc, you can build a version of PCRE dat can generate a
code coverage report fo' its test suite. To enable this, you must install
\fBlcov\fP version 1.6 or above. Then specify
.sp
  --enable-coverage
.sp
to tha \fBconfigure\fP command n' build PCRE up in tha usual way.
.P
Note dat rockin \fBccache\fP (a cachin C compiler) is incompatible wit code
coverage reporting. If you have configured \fBccache\fP ta run automatically
on yo' system, you must set tha environment variable
.sp
  CCACHE_DISABLE=1
.sp
before hustlin \fBmake\fP ta build PCRE, so dat \fBccache\fP aint used.
.P
When --enable-coverage is used, tha followin addizzle targets is added ta the
\fIMakefile\fP:
.sp
  make coverage
.sp
This creates a gangbangin' fresh coverage report fo' tha PCRE test suite. Well shiiiit, it is equivalent
to hustlin "make coverage-reset", "make coverage-baseline", "make check", and
then "make coverage-report".
.sp
  make coverage-reset
.sp
This zeroes tha coverage countas yo, but do not a god damn thang else.
.sp
  make coverage-baseline
.sp
This captures baseline coverage shiznit.
.sp
  make coverage-report
.sp
This creates tha coverage report.
.sp
  make coverage-clean-report
.sp
This removes tha generated coverage report without cleanin tha coverage data
itself.
.sp
  make coverage-clean-data
.sp
This removes tha captured coverage data without removin tha coverage files
created at compile time (*.gcno).
.sp
  make coverage-clean
.sp
This cleans all coverage data includin tha generated coverage report. For more
information bout code coverage, peep tha \fBgcov\fP n' \fBlcov\fP
documentation.
.
.
.SH "SEE ALSO"
.rs
.sp
\fBpcreapi\fP(3), \fBpcre16\fP, \fBpcre32\fP, \fBpcre_config\fP(3).
.
.
.SH AUTHOR
.rs
.sp
.nf
Philip Hazel
Universitizzle Computin Service
Cambridge CB2 3QH, England.
.fi
.
.
.SH REVISION
.rs
.sp
.nf
Last updated: 12 May 2013
Copyright (c) 1997-2013 Universitizzle of Cambridge.
.fi
