.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Cap 3"
.TH Mail::Cap 3 "2012-12-21" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Cap \- Parse mailcap files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $mc = freshly smoked up Mail::Cap;
\& $desc = $mc\->description(\*(Aqimage/gif\*(Aq);
\&
\& print "GIF desc: $desc\en";
\& $cmd = $mc\->viewCmd(\*(Aqtext/plain; charset=iso\-8859\-1\*(Aq, \*(Aqfile.txt\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parse mailcap filez as specified up in "\s-1RFC 1524 \-\-A\s0 User Agent
Configuration Mechanizzle For Multimedia Mail Format Information>.  In
the description below \f(CW$type\fR refers ta tha \s-1MIME\s0 type as specified in
the \f(CW\*(C`Content\-Type\*(C'\fR header of mail or \s-1HTTP\s0 lyrics.  Examplez of
types are:
.PP
.Vb 3
\&  image/gif
\&  text/html
\&  text/plain; charset=iso\-8859\-1
.Ve
.PP
Yo ass could also take a peep tha File::MimeInfo distribution, which
are accessin tablez which is used by nuff applications on a system,
and therefore have succeeded tha mail-cap justifications on modern
(\s-1UNIX\s0) systems.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Cap\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Cap->new(OPTIONS)"
Smoke n' initialize a freshly smoked up Mail::Cap object.  If you give it an
argument it will try ta parse tha specified file.  Without any
arguments it will search fo' tha mailcap file rockin tha standard
mailcap path, or tha \s-1MAILCAPS\s0 environment variable if it is defined.
.Sp
.Vb 3
\& \-Option  \-\-Default
\&  filename  undef
\&  take      \*(AqFIRST\*(Aq
.Ve
.RS 4
.IP "filename => \s-1FILENAME\s0" 2
.IX Item "filename => FILENAME"
Add tha specified file ta tha list ta standard locations.  This file
is tried first.
.IP "take => '\s-1ALL\s0'|'\s-1FIRST\s0'" 2
.IX Item "take => 'ALL'|'FIRST'"
Include all mailcap filez you can find. Y'all KNOW dat shit, muthafucka!  By default, only tha first
file is parsed, however tha \s-1RFC\s0  drops some lyrics ta our asses ta include \s-1ALL. \s0 To maintain
backwardz compatibility, tha default only takes tha \s-1FIRST.\s0
.RE
.RS 4
.Sp
example:
.Sp
.Vb 5
\&  $mcap = freshly smoked up Mail::Cap;
\&  $mcap = freshly smoked up Mail::Cap "/mydir/mailcap";
\&  $mcap = freshly smoked up Mail::Cap filename => "/mydir/mailcap";
\&  $mcap = freshly smoked up Mail::Cap take => \*(AqALL\*(Aq;
\&  $mcap = Mail::Cap\->new(take => \*(AqALL\*(Aq);
.Ve
.RE
.SS "Run commands"
.IX Subsection "Run commands"
These methodz invoke a suitable progam presentin or manipulatin the
media object up in tha specified file.  They all return \f(CW1\fR if a cold-ass lil command
was found, n' \f(CW0\fR otherwise.  Yo ass might test \f(CW$?\fR fo' tha outcome
of tha command.
.ie n .IP "$obj\->\fBcompose\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompose\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->compose(TYPE, FILE)"
.PD 0
.ie n .IP "$obj\->\fBedit\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBedit\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->edit(TYPE, FILE)"
.ie n .IP "$obj\->\fBprint\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->print(TYPE, FILE)"
.ie n .IP "$obj\->\fBview\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBview\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->view(TYPE, FILE)"
.PD
.SS "Command creator"
.IX Subsection "Command creator"
These methodz return a strang dat is suitable fo' feedin ta \fIsystem()\fR
in order ta invoke a suitable progam presentin or manipulatin the
media object up in tha specified file.  It will return \f(CW\*(C`undef\*(C'\fR if no
suitable justification exists.
.ie n .IP "$obj\->\fBcomposeCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcomposeCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->composeCmd(TYPE, FILE)"
.PD 0
.ie n .IP "$obj\->\fBeditCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBeditCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->editCmd(TYPE, FILE)"
.ie n .IP "$obj\->\fBprintCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprintCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->printCmd(TYPE, FILE)"
.ie n .IP "$obj\->\fBviewCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBviewCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->viewCmd(TYPE, FILE)"
.PD
.SS "Look-up definitions"
.IX Subsection "Look-up definitions"
Methodz return tha correspondin mailcap field fo' tha type.
.ie n .IP "$obj\->\fBdescription\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->description(TYPE)"
.PD 0
.ie n .IP "$obj\->\fBfield\fR(\s-1TYPE, FIELD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfield\fR(\s-1TYPE, FIELD\s0)" 4
.IX Item "$obj->field(TYPE, FIELD)"
.PD
Returns tha specified field fo' tha type.  Returns undef if no
specification exsists.
.ie n .IP "$obj\->\fBnametemplate\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnametemplate\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->nametemplate(TYPE)"
.PD 0
.ie n .IP "$obj\->\fBtextualnewlines\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtextualnewlines\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->textualnewlines(TYPE)"
.ie n .IP "$obj\->\fBx11_bitmap\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBx11_bitmap\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->x11_bitmap(TYPE)"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of tha MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Da MailTools bundle was pimped by Graham Barr. Shiiit, dis aint no joke.  Later, Mark
Overmeer took over maintenizzle without commitment ta further pimpment.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peta Orbaek <poe@cit.dk>.
Mail::Maila n' Mail::Send by Slim Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors peep ChizzleLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
