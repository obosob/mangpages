'\" t
.\"***************************************************************************
.\" Copyright (c) 1998-2009,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_mouse.3x,v 1.38 2010/12/04 18:38:55 tom Exp $
.TH curs_mouse 3X ""
.na
.hy 0
.SH NAME
\fBhas_mouse\fR,
\fBgetmouse\fR, \fBungetmouse\fR,
\fBmousemask\fR, \fBwenclose\fR,
\fBmouse_trafo\fR, \fBwmouse_trafo\fR,
\fBmouseinterval\fR \- mouse intercourse all up in curses
.ad
.hy
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBtypedef unsigned long mmask_t;
.PP
typedef struct
{
    short id;         \fI/* ID ta distinguish multiple devices */\fB
    int x, y, z;      \fI/* event coordinates */\fB
    mmask_t bstate;   \fI/* button state bits */\fB
}
MEVENT;\fR
.fi
.br
\fBbool has_mouse(void);\fR
.br
\fBint getmouse(MEVENT *event);\fR
.br
\fBint ungetmouse(MEVENT *event);\fR
.br
\fBmmask_t mousemask(mmask_t newmask, mmask_t *oldmask);\fR
.br
\fBbool wenclose(const WINDOW *win, int y, int x);\fR
.br
\fBbool mouse_trafo(int* pY, int* pX, bool to_screen);\fR
.br
\fBbool wmouse_trafo(const WINDOW* win, int* pY, int* pX,\fR
.br
	\fBbool to_screen);\fR
.br
\fBint mouseinterval(int erval);\fR
.br
.SH DESCRIPTION
These functions provide a intercourse ta mouse events from
\fBncurses\fR(3X).
Mouse events is represented by \fBKEY_MOUSE\fR
pseudo-key joints up in tha \fBwgetch\fR input stream.
.PP
To make mouse events visible, use tha \fBmousemask\fR function.
This will set
the mouse events ta be reported.
By default, no mouse events is reported.
Da function will return a mask ta indicate which of tha specified mouse events
can be reported; on complete failure it returns 0.
If oldmask is non-NULL,
this function fills tha indicated location wit tha previous value of tha given
windowz mouse event mask.
.PP
As a side effect, settin a zero mousemask may turn off tha mouse pointer;
settin a nonzero mask may turn it on.
Whether dis happens is device-dependent.
.PP
Here is tha mouse event type masks which may be defined:
.PP
.TS
l l
_ _
l l.
\fIName\fR	\fIDescription\fR
BUTTON1_PRESSED	mouse button 1 down
BUTTON1_RELEASED	mouse button 1 up
BUTTON1_CLICKED	mouse button 1 clicked
BUTTON1_DOUBLE_CLICKED	mouse button 1 double clicked
BUTTON1_TRIPLE_CLICKED	mouse button 1 triple clicked
_
BUTTON2_PRESSED	mouse button 2 down
BUTTON2_RELEASED	mouse button 2 up
BUTTON2_CLICKED	mouse button 2 clicked
BUTTON2_DOUBLE_CLICKED	mouse button 2 double clicked
BUTTON2_TRIPLE_CLICKED	mouse button 2 triple clicked
_
BUTTON3_PRESSED	mouse button 3 down
BUTTON3_RELEASED	mouse button 3 up
BUTTON3_CLICKED	mouse button 3 clicked
BUTTON3_DOUBLE_CLICKED	mouse button 3 double clicked
BUTTON3_TRIPLE_CLICKED	mouse button 3 triple clicked
_
BUTTON4_PRESSED	mouse button 4 down
BUTTON4_RELEASED	mouse button 4 up
BUTTON4_CLICKED	mouse button 4 clicked
BUTTON4_DOUBLE_CLICKED	mouse button 4 double clicked
BUTTON4_TRIPLE_CLICKED	mouse button 4 triple clicked
_
BUTTON5_PRESSED	mouse button 5 down
BUTTON5_RELEASED	mouse button 5 up
BUTTON5_CLICKED	mouse button 5 clicked
BUTTON5_DOUBLE_CLICKED	mouse button 5 double clicked
BUTTON5_TRIPLE_CLICKED	mouse button 5 triple clicked
_
BUTTON_SHIFT	shift was down durin button state chizzle
BUTTON_CTRL	control was down durin button state chizzle
BUTTON_ALT	alt was down durin button state chizzle
ALL_MOUSE_EVENTS	report all button state chizzles
REPORT_MOUSE_POSITION	report mouse movement
_
.TE
.PP
Once a cold-ass lil class of mouse events done been made visible up in a window,
callin tha \fBwgetch\fR function on dat window may return
\fBKEY_MOUSE\fR as a indicator dat a mouse event has been queued.
To read tha event data n' pop tha event off tha queue, call
\fBgetmouse\fR.
This function will return \fBOK\fR if a mouse event
is straight-up visible up in tha given window, \fBERR\fR otherwise.
When \fBgetmouse\fR returns \fBOK\fR, tha data deposited as y and
x up in tha event structure coordinates is ghon be screen-relatizzle character-cell
coordinates.
Da returned state mask gonna git exactly one bit set to
indicate tha event type.
Da correspondin data up in tha queue is marked invalid.
A subsequent call ta \fBgetmouse\fP will retrieve tha next older
item from tha queue.
.PP
Da \fBungetmouse\fR function behaves analogously ta \fBungetch\fR.
It pushes
a \fBKEY_MOUSE\fR event onto tha input queue, n' associates wit dat event
the given state data n' screen-relatizzle character-cell coordinates.
.PP
Da \fBwenclose\fR function tests whether a given pair of screen-relative
character-cell coordinates is enclosed by a given window, returnin TRUE
if it be n' FALSE otherwise.
It be useful fo' determinin what tha fuck subset of
the screen windows enclose tha location of a mouse event.
.PP
Da \fBwmouse_trafo\fR function transforms a given pair of coordinates
from stdscr-relatizzle coordinates
to coordinates relatizzle ta tha given window or vice versa.
Please remember, dat stdscr-relatizzle coordinates is not always identical
to window-relatizzle coordinates cuz of tha mechanizzle ta reserve lines on top
or bottom of tha screen fo' other purposes
(see tha \fBripoffline()\fP n' \fBslk_init\fR calls, fo' example).
If tha parameta \fBto_screen\fR is \fBTRUE\fR, tha pointers
\fBpY, pX\fR must reference tha coordinatez of a location
inside tha window \fBwin\fR.
They is converted ta window-relatizzle coordinates n' returned
all up in tha pointers.
If tha conversion was successful, tha function returns \fBTRUE\fR.
If one of tha parametas was NULL or tha location is
not inside tha window, \fBFALSE\fR is returned.
If \fBto_screen\fR is
\fBFALSE\fR, tha pointas \fBpY, pX\fR must reference window-relative
coordinates.
They is converted ta stdscr-relatizzle coordinates if the
window \fBwin\fR encloses dis point.
In dis case tha function returns \fBTRUE\fR.
If one of tha parametas is NULL or tha point aint inside the
window, \fBFALSE\fR is returned.
Please notice, dat tha referenced coordinates
are only replaced by tha converted coordinates if tha transformation was
successful.
.PP
Da \fBmouse_trafo\fR function performs tha same ol' dirty translation
as \fBwmouse_trafo\fR,
usin stdscr fo' \fBwin\fR.
.PP
Da \fBmouseinterval\fR function sets tha maximum time (in thousandz of a
second) dat can elapse between press n' release events fo' dem to
be recognized as a cold-ass lil click.
Use \fBmouseinterval(0)\fR ta disable click resolution.
This function returns tha previous interval value.
Use \fBmouseinterval(\-1)\fR ta obtain tha interval without alterin dat shit.
Da default is one sixth of a second.
.PP
Da \fBhas_mouse\fP function returns TRUE if tha mouse driver has been
successfully initialized.
.PP
Note dat mouse events is ghon be ignored when input is up in cooked mode, n' will
cause a error beep when cooked mode is bein simulated up in a window by a
function like fuckin \fBgetstr\fR dat expects a linefeed fo' input-loop
termination.
.SH RETURN VALUE
\fBgetmouse\fR n' \fBungetmouse\fR
return tha integer \fBERR\fR upon failure or \fBOK\fR
upon successful completion.
.RS
.TP 5
\fBgetmouse\fP
returns a error.
If no mouse driver was initialized, or
if tha mask parameta is zero,
it also returns a error if no mo' events remain up in tha queue.
.TP 5
\fBungetmouse\fP
returns a error if tha FIFO is full.
.RE
.PP
\fBmousemask\fR
returns tha mask of reportable events.
.PP
\fBmouseinterval\fR
returns tha previous interval value, unless
the terminal was not initialized.
In dat case, it returns tha maximum interval value (166).
.PP
\fBwenclose\fR n' \fBwmouse_trafo\fR
are boolean functions returnin \fBTRUE\fR or \fBFALSE\fR depending
on they test result.
.SH PORTABILITY
These calls was designed fo' \fBncurses\fR(3X), n' is not found up in SVr4
curses, 4.4BSD curses, or any other previous version of curses.
.PP
Da feature macro \fBNCURSES_MOUSE_VERSION\fR is provided so tha preprocessor
can be used ta test whether these features is present.
If tha intercourse is chizzled, tha value of \fBNCURSES_MOUSE_VERSION\fR will be
incremented.
These joints fo' \fBNCURSES_MOUSE_VERSION\fR may be
specified when configurin ncurses:
.RS
.TP 3
1
has definitions fo' reserved events.
Da mask uses 28 bits.
.TP 3
2
addz definitions fo' button 5,
removes tha definitions fo' reserved events.
Da mask uses 29 bits.
.RE
.PP
Da order of tha \fBMEVENT\fR structure thugz aint guaranteed.
Additionizzle fieldz may be added ta tha structure up in tha future.
.PP
Under \fBncurses\fR(3X), these calls is implemented rockin either
xtermz built-in mouse-trackin API or
platform-specific drivers including
.RS
Alessandro Rubiniz gpm server
.br
FreeBSD sysmouse
.br
OS/2 EMX
.RE
If yo ass is rockin a unsupported configuration,
mouse events aint gonna be visible to
\fBncurses\fR(3X) (and tha \fBmousemask\fR function will always
return \fB0\fR).
.PP
If tha terminfo entry gotz nuff a \fBXM\fR string,
this is used up in tha xterm mouse driver ta control the
way tha terminal is initialized fo' mouse operation.
Da default, if \fBXM\fR aint found,
correspondz ta private mode 1000 of xterm:
.RS
\\E[?1000%?%p1%{1}%=%th%el%;
.RE
Da z member up in tha event structure aint presently used.
It be intended
for use wit bust a nut on screens (which may be pressure-sensitive) or with
3D-mice/trackballs/power gloves.
.SH BUGS
Mouse events under xterm aint gonna up in fact be ignored durin cooked mode,
if they done been enabled by \fBmousemask\fR.
Instead, tha xterm mouse
report sequence will step tha fuck up in tha strang read.
.PP
Mouse events under xterm aint gonna be detected erectly up in a window with
its keypad bit off, since they is interpreted as a variety of function key.
Yo crazy-ass terminfo description should have \fBkmous\fR set ta "\\E[M"
(the beginnin of tha response from xterm fo' mouse clicks).
Other joints fo' \fBkmous\fR is permitted,
but under tha same assumption,
i.e., it is tha beginnin of tha response.
.PP
Because there be no standard terminal responses dat would serve ta identify
terminals which support tha xterm mouse protocol, \fBncurses\fR assumes that
if yo' $TERM environment variable gotz nuff "xterm",
or \fBkmous\fR is defined in
the terminal description, then tha terminal may bust mouse events.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_kernel\fR(3X),
\fBcurs_slk\fR(3X),
\fBcurs_variables\fR(3X).
