'\" t
.\"     Title: glRasterPos
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLRASTERPOS" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glRasterPos \- specify tha rasta posizzle fo' pixel operations
.SH "C SPECIFICATION"
.HP \w'void\ glRasterPos2s('u
.BI "void glRasterPos2s(GLshort\ " "x" ", GLshort\ " "y" ");"
.HP \w'void\ glRasterPos2i('u
.BI "void glRasterPos2i(GLint\ " "x" ", GLint\ " "y" ");"
.HP \w'void\ glRasterPos2f('u
.BI "void glRasterPos2f(GLfloat\ " "x" ", GLfloat\ " "y" ");"
.HP \w'void\ glRasterPos2d('u
.BI "void glRasterPos2d(GLdouble\ " "x" ", GLdouble\ " "y" ");"
.HP \w'void\ glRasterPos3s('u
.BI "void glRasterPos3s(GLshort\ " "x" ", GLshort\ " "y" ", GLshort\ " "z" ");"
.HP \w'void\ glRasterPos3i('u
.BI "void glRasterPos3i(GLint\ " "x" ", GLint\ " "y" ", GLint\ " "z" ");"
.HP \w'void\ glRasterPos3f('u
.BI "void glRasterPos3f(GLfloat\ " "x" ", GLfloat\ " "y" ", GLfloat\ " "z" ");"
.HP \w'void\ glRasterPos3d('u
.BI "void glRasterPos3d(GLdouble\ " "x" ", GLdouble\ " "y" ", GLdouble\ " "z" ");"
.HP \w'void\ glRasterPos4s('u
.BI "void glRasterPos4s(GLshort\ " "x" ", GLshort\ " "y" ", GLshort\ " "z" ", GLshort\ " "w" ");"
.HP \w'void\ glRasterPos4i('u
.BI "void glRasterPos4i(GLint\ " "x" ", GLint\ " "y" ", GLint\ " "z" ", GLint\ " "w" ");"
.HP \w'void\ glRasterPos4f('u
.BI "void glRasterPos4f(GLfloat\ " "x" ", GLfloat\ " "y" ", GLfloat\ " "z" ", GLfloat\ " "w" ");"
.HP \w'void\ glRasterPos4d('u
.BI "void glRasterPos4d(GLdouble\ " "x" ", GLdouble\ " "y" ", GLdouble\ " "z" ", GLdouble\ " "w" ");"
.SH "PARAMETERS"
.PP
\fIx\fR, \fIy\fR, \fIz\fR, \fIw\fR
.RS 4
Specify the
x,
y,
z, and
w
object coordinates (if present) fo' tha rasta position\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glRasterPos2sv('u
.BI "void glRasterPos2sv(const\ GLshort\ *\ " "v" ");"
.HP \w'void\ glRasterPos2iv('u
.BI "void glRasterPos2iv(const\ GLint\ *\ " "v" ");"
.HP \w'void\ glRasterPos2fv('u
.BI "void glRasterPos2fv(const\ GLfloat\ *\ " "v" ");"
.HP \w'void\ glRasterPos2dv('u
.BI "void glRasterPos2dv(const\ GLdouble\ *\ " "v" ");"
.HP \w'void\ glRasterPos3sv('u
.BI "void glRasterPos3sv(const\ GLshort\ *\ " "v" ");"
.HP \w'void\ glRasterPos3iv('u
.BI "void glRasterPos3iv(const\ GLint\ *\ " "v" ");"
.HP \w'void\ glRasterPos3fv('u
.BI "void glRasterPos3fv(const\ GLfloat\ *\ " "v" ");"
.HP \w'void\ glRasterPos3dv('u
.BI "void glRasterPos3dv(const\ GLdouble\ *\ " "v" ");"
.HP \w'void\ glRasterPos4sv('u
.BI "void glRasterPos4sv(const\ GLshort\ *\ " "v" ");"
.HP \w'void\ glRasterPos4iv('u
.BI "void glRasterPos4iv(const\ GLint\ *\ " "v" ");"
.HP \w'void\ glRasterPos4fv('u
.BI "void glRasterPos4fv(const\ GLfloat\ *\ " "v" ");"
.HP \w'void\ glRasterPos4dv('u
.BI "void glRasterPos4dv(const\ GLdouble\ *\ " "v" ");"
.SH "PARAMETERS"
.PP
\fIv\fR
.RS 4
Specifies a pointa ta a array of two, three, or four elements, specifying
x,
y,
z, and
w
coordinates, respectively\&.
.RE
.SH "DESCRIPTION"
.PP
Da GL maintains a 3D posizzle up in window coordinates\&. This position, called tha rasta position, is used ta posizzle pixel n' bitmap write operations\&. Well shiiiit, it is maintained wit subpixel accuracy\&. Right back up in yo muthafuckin ass. See
\fBglBitmap\fR(),
\fBglDrawPixels\fR(), and
\fBglCopyPixels\fR()\&.
.PP
Da current rasta posizzle consistz of three window coordinates (x,
y,
z), a cold-ass lil clip coordinizzle value (w), a eye coordinizzle distance, a valid bit, n' associated color data n' texture coordinates\&. The
w
coordinizzle be a cold-ass lil clip coordinate, cuz
w
is not projected ta window coordinates\&.
\fBglRasterPos4\fR
specifies object coordinates
x,
y,
z, and
w
explicitly\&.
\fBglRasterPos3\fR
specifies object coordinate
x,
y, and
z
explicitly, while
w
is implicitly set ta 1\&.
\fBglRasterPos2\fR
uses tha argument joints for
x
and
y
while implicitly setting
z
and
w
to 0 n' 1\&.
.PP
Da object coordinates presented by
\fBglRasterPos\fR
are treated just like dem of a
\fBglVertex\fR()
command: They is transformed by tha current modelview n' projection matrices n' passed ta tha clippin stage\&. If tha vertex aint culled, then it is projected n' scaled ta window coordinates, which become tha freshly smoked up current rasta position, n' the
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
flag is set\&. If tha vertex
\fIis\fR
culled, then tha valid bit is cleared n' tha current rasta posizzle n' associated color n' texture coordinates is undefined\&.
.PP
Da current rasta posizzle also includes some associated color data n' texture coordinates\&. If lightin is enabled, then
\fBGL_CURRENT_RASTER_COLOR\fR
(in RGBA mode) or
\fBGL_CURRENT_RASTER_INDEX\fR
(in color index mode) is set ta tha color produced by tha lightin calculation (see
\fBglLight\fR(),
\fBglLightModel\fR(), and
\fBglShadeModel\fR())\&. If lightin is disabled, current color (in RGBA mode, state variable
\fBGL_CURRENT_COLOR\fR) or color index (in color index mode, state variable
\fBGL_CURRENT_INDEX\fR) is used ta update tha current rasta color\&.
\fBGL_CURRENT_RASTER_SECONDARY_COLOR\fR
(in RGBA mode) is likewise updated\&.
.PP
Likewise,
\fBGL_CURRENT_RASTER_TEXTURE_COORDS\fR
is updated as a gangbangin' function of
\fBGL_CURRENT_TEXTURE_COORDS\fR, based on tha texture matrix n' tha texture generation functions (see
\fBglTexGen\fR())\&. Finally, tha distizzle from tha origin of tha eye coordinizzle system ta tha vertex as transformed by only tha modelview matrix replaces
\fBGL_CURRENT_RASTER_DISTANCE\fR\&.
.PP
Initially, tha current rasta posizzle is (0, 0, 0, 1), tha current rasta distizzle is 0, tha valid bit is set, tha associated RGBA color is (1, 1, 1, 1), tha associated color index is 1, n' tha associated texture coordinates is (0, 0, 0, 1)\&. In RGBA mode,
\fBGL_CURRENT_RASTER_INDEX\fR
is always 1; up in color index mode, tha current rasta RGBA color always maintains its initial value\&.
.SH "NOTES"
.PP
Da rasta posizzle is modified by
\fBglRasterPos\fR,
\fBglBitmap\fR(), and
\fBglWindowPos\fR()\&.
.PP
When tha rasta posizzle coordinates is invalid, drawin commandz dat is based on tha rasta posizzle is ignored (that is, they do not result up in chizzlez ta GL state)\&.
.PP
Calling
\fBglDrawElements\fR()
or
\fBglDrawRangeElements\fR()
may leave tha current color or index indeterminate\&. If
\fBglRasterPos\fR
is executed while tha current color or index is indeterminate, tha current rasta color or current rasta index remains indeterminate\&.
.PP
To set a valid rasta posizzle outside tha viewport, first set a valid rasta position, then call
\fBglBitmap\fR()
with NULL as the
\fIbitmap\fR
parameter\&.
.PP
When the
ARB_imaging
extension is supported, there be distinct rasta texture coordinates fo' each texture unit\&. Each texture unit\*(Aqs current rasta texture coordinates is updated by
\fBglRasterPos\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglRasterPos\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_DISTANCE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_SECONDARY_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_INDEX\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_TEXTURE_COORDS\fR
.SH "SEE ALSO"
.PP
\fBglBitmap\fR(),
\fBglCopyPixels\fR(),
\fBglDrawArrays\fR(),
\fBglDrawElements\fR(),
\fBglDrawRangeElements\fR(),
\fBglDrawPixels\fR(),
\fBglMultiTexCoord\fR(),
\fBglTexCoord\fR(),
\fBglTexGen\fR(),
\fBglVertex\fR(),
\fBglWindowPos\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
