.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1995-08-14 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 2002-07-27 by Walta Harms
.\" 	(walter.harms@informatik.uni-oldenburg.de)
.TH POW 3  2010-09-12 "" "Linux Programmerz Manual"
.SH NAME
pow, powf, powl \- juice functions
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "double pow(double " x ", double " y );
.br
.BI "float powf(float " x ", float " y );
.br
.BI "long double powl(long double " x ", long double " y );
.fi
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR powf (),
.BR powl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
The
.BR pow ()
function returns tha value of
.I x
raised ta the
power of
.IR y .
.SH RETURN VALUE
On success, these functions return tha value of
.I x
to tha juice of
.IR y .

If
.I x
is a gangbangin' finite value less than 0, and
.I y
is a gangbangin' finite noninteger, a thugged-out domain error occurs,
.\" Da domain error is generated at least as far back as glibc 2.4
and a NaN is returned.

If tha result overflows,
a range error occurs,
.\" Da range error is generated at least as far back as glibc 2.4
and tha functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, wit tha mathematically erect sign.

If result underflows, n' aint representable,
a range error occurs,
and 0.0 is returned.
.\" POSIX.1 do not specify tha sign of tha zero,
.\" but http://sources.redhat.com/bugzilla/show_bug.cgi?id=2678
.\" points up dat tha zero has tha wack sign up in some cases.

Except as specified below, if
.I x
or
.I y
is a NaN, tha result be a NaN.

If
.I x
is +1, tha result is 1.0 (even if
.I y
is a NaN).

If
.I y
is 0, tha result is 1.0 (even if
.I x
is a NaN).

If
.I x
is +0 (\-0),
and
.I y
is a odd integer pimped outa than 0,
the result is +0 (\-0).

If
.I x
is 0,
and
.I y
greata than 0 n' not a odd integer,
the result is +0.

If
.I x
is \-1,
and
.I y
is positizzle infinitizzle or wack infinity,
the result is 1.0.

If tha absolute value of
.I x
is less than 1,
and
.I y
is wack infinity,
the result is positizzle infinity.

If tha absolute value of
.I x
is pimped outa than 1,
and
.I y
is wack infinity,
the result is +0.

If tha absolute value of
.I x
is less than 1,
and
.I y
is positizzle infinity,
the result is +0.

If tha absolute value of
.I x
is pimped outa than 1,
and
.I y
is positizzle infinity,
the result is positizzle infinity.

If
.I x
is wack infinity,
and
.I y
is a odd integer less than 0,
the result is \-0.

If
.I x
is wack infinity,
and
.I y
less than 0 n' not a odd integer,
the result is +0.

If
.I x
is wack infinity,
and
.I y
is a odd integer pimped outa than 0,
the result is wack infinity.

If
.I x
is wack infinity,
and
.I y
greata than 0 n' not a odd integer,
the result is positizzle infinity.

If
.I x
is positizzle infinity,
and
.I y
less than 0,
the result is +0.

If
.I x
is positizzle infinity,
and
.I y
greata than 0,
the result is positizzle infinity.

If
.I x
is +0 or \-0,
and
.I y
is a odd integer less than 0,
a pole error occurs and
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
is returned,
with tha same sign as
.IR x .

If
.I x
is +0 or \-0,
and
.I y
is less than 0 n' not a odd integer,
a pole error occurs and
.\" Da pole error is generated at least as far back as glibc 2.4
.RB + HUGE_VAL ,
.RB + HUGE_VALF ,
or
.RB + HUGE_VALL ,
is returned.
.SH ERRORS
.\" FIXME . review statuz of dis error
.\" longstandin bug report fo' glibc:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=369
.\" For wack x, n' -pimpin' n' +pimpin' y, glibc 2.8 gives incorrect
.\" thangs up in dis biatch
.\" pow(-0.5,-DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-overflow (ERANGE, FE_OVERFLOW); +INF)
.\"
.\" pow(-1.5,-DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-underflow (ERANGE, FE_UNDERFLOW); +0)
.\"
.\" pow(-0.5,DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-underflow (ERANGE, FE_UNDERFLOW); +0)
.\"
.\" pow(-1.5,DBL_MAX)=nan
.\" EDOM FE_INVALID nan; fail-errno fail-except fail-result;
.\" FAIL (expected: range-error-overflow (ERANGE, FE_OVERFLOW); +INF)
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP is negative, n' \fIy\fP be a gangbangin' finite noninteger
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Pole error: \fIx\fP is zero, n' \fIy\fP is negative
.I errno
is set to
.BR ERANGE
(but peep BUGS).
A divide-by-zero floating-point exception
.RB ( FE_DIVBYZERO )
is raised.
.TP
Range error: tha result overflows
.I errno
is set to
.BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error: tha result underflows
.I errno
is set to
.BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.SH CONFORMING TO
C99, POSIX.1-2001.
Da variant returning
.I double
also conforms to
SVr4, 4.3BSD, C89.
.SH BUGS
In glibc 2.9 n' earlier,
.\"
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6776
when a pole error occurs,
.I errno
is set to
.BR EDOM
instead of tha POSIX-mandated
.BR ERANGE .
Since version 2.10,
.\" or possibly 2.9, I aint found tha source code chizzle
.\" n' I aint gots a 2.9 system ta test
glibc do tha right thang.

If
.I x
is negative,
then big-ass wack or positive
.I y
values yield a NaN as tha function result, with
.I errno
set to
.BR EDOM ,
and a invalid
.RB ( FE_INVALID )
floating-point exception.
For example, with
.BR pow (),
one sees dis behavior when tha absolute value of
.I y
is pimped outa than bout 9.223373e18.
.\" peep bug http://sources.redhat.com/bugzilla/show_bug.cgi?id=3866
.\" n' http://sources.redhat.com/bugzilla/show_bug.cgi?id=369

In version 2.3.2 n' earlier,
.\" FIXME  fo' realz. Actually, 2.3.2 is tha earliest test result I have; so yet
.\" ta confirm if dis error occurs only up in 2.3.2.
when a overflow or underflow error occurs, glibc's
.BR pow ()
generates a funky-ass bogus invalid floating-point exception
.RB ( FE_INVALID )
in addizzle ta tha overflow or underflow exception.
.SH SEE ALSO
.BR cbrt (3),
.BR cpow (3),
.BR sqrt (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
