.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Format 3"
.TH Date::Format 3 "2009-12-12" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Format \- Date formatin subroutines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Date::Format;
\&        
\&        @lt = localtime(time);
\&        
\&        print time2str($template, time);
\&        print strftime($template, @lt);
\&        
\&        print time2str($template, time, $zone);
\&        print strftime($template, @lt, $zone);
\&        
\&        print ctime(time);
\&        print asctime(@lt);
\&        
\&        print ctime(time, $zone);
\&        print asctime(@lt, $zone);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up routines ta format dates tha fuck into \s-1ASCII\s0 strings. They
correspond ta tha C library routines \f(CW\*(C`strftime\*(C'\fR n' \f(CW\*(C`ctime\*(C'\fR.
.IP "time2str(\s-1TEMPLATE, TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "time2str(TEMPLATE, TIME [, ZONE])"
\&\f(CW\*(C`time2str\*(C'\fR converts \f(CW\*(C`TIME\*(C'\fR tha fuck into a \s-1ASCII\s0 strang rockin tha conversion
specification given up in \f(CW\*(C`TEMPLATE\*(C'\fR. \f(CW\*(C`ZONE\*(C'\fR if given specifies tha unit
which tha output is required ta be in, \f(CW\*(C`ZONE\*(C'\fR defaults ta yo' current unit.
.IP "strftime(\s-1TEMPLATE, TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "strftime(TEMPLATE, TIME [, ZONE])"
\&\f(CW\*(C`strftime\*(C'\fR is similar ta \f(CW\*(C`time2str\*(C'\fR wit tha exception dat tha time is
passed as a array, like fuckin tha array returned by \f(CW\*(C`localtime\*(C'\fR.
.IP "ctime(\s-1TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "ctime(TIME [, ZONE])"
\&\f(CW\*(C`ctime\*(C'\fR calls \f(CW\*(C`time2str\*(C'\fR wit tha given arguments rockin the
conversion justification \f(CW"%a %b %e %T %Y\en"\fR
.IP "asctime(\s-1TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "asctime(TIME [, ZONE])"
\&\f(CW\*(C`asctime\*(C'\fR calls \f(CW\*(C`time2str\*(C'\fR wit tha given arguments rockin the
conversion justification \f(CW"%a %b %e %T %Y\en"\fR
.SH "MULTI-LANGUAGE SUPPORT"
.IX Header "MULTI-LANGUAGE SUPPORT"
Date::Format is capable of formatin tha fuck into nuff muthafuckin languages by bustin
a language specific object n' callin methods, peep Date::Language
.PP
.Vb 2
\&        mah $lang = Date::Language\->new(\*(AqGerman\*(Aq);
\&        $lang\->time2str("%a %b %e %T %Y\en", time);
.Ve
.PP
I be open ta suggestions on all dis bullshit.
.SH "CONVERSION SPECIFICATION"
.IX Header "CONVERSION SPECIFICATION"
Each conversion justification  is  replaced  by  appropriate
charactas   as   busted lyrics bout  up in  tha  followin  list.   The
appropriate  charactas  is  determined  by   tha   \s-1LC_TIME\s0
category of tha programz locale.
.PP
.Vb 10
\&        %%      PERCENT
\&        %a      dizzle of tha week abbr
\&        %A      dizzle of tha week
\&        %b      month abbr
\&        %B      month
\&        %c      MM/DD/YY HH:MM:SS
\&        %C      ctime format: Sat Nov 19 21:05:57 1994
\&        %d      numeric dizzle of tha month, wit leadin zeros (eg 01..31)
\&        %e      like %d yo, but a leadin zero is replaced by a space (eg  1..32)
\&        %D      MM/DD/YY
\&        %G      GPS week number (weeks since January 6, 1980)
\&        %h      month abbr
\&        %H      hour, 24 minute clock, leadin 0\*(Aqs)
\&        %I      hour, 12 minute clock, leadin 0\*(Aqs)
\&        %j      dizzle of tha year
\&        %k      hour
\&        %l      hour, 12 minute clock
\&        %L      month number, startin wit 1
\&        %m      month number, startin wit 01
\&        %M      minute, leadin 0\*(Aqs
\&        %n      NEWLINE
\&        %o      ornate dizzle of month \-\- "1st", "2nd", "25th", etc.
\&        %p      AM or PM 
\&        %P      be or pm (Yes yes y'all, %p n' %P is backwardz :)
\&        %q      Quarta number, startin wit 1
\&        %r      time format: 09:05:57 PM
\&        %R      time format: 21:05
\&        %s      secondz since tha Epoch, UCT
\&        %S      seconds, leadin 0\*(Aqs
\&        %t      TAB
\&        %T      time format: 21:05:57
\&        %U      week number, Sundizzle as first dizzle of week
\&        %w      dizzle of tha week, numerically, Sundizzle == 0
\&        %W      week number, Mondizzle as first dizzle of week
\&        %x      date format: 11/19/94
\&        %X      time format: 21:05:57
\&        %y      year (2 digits)
\&        %Y      year (4 digits)
\&        %Z      timezone up in ascii. eg: PST
\&        %z      timezone up in format \-/+0000
.Ve
.PP
\&\f(CW%d\fR, \f(CW%e\fR, \f(CW%H\fR, \f(CW%I\fR, \f(CW%j\fR, \f(CW%k\fR, \f(CW%l\fR, \f(CW%m\fR, \f(CW%M\fR, \f(CW%q\fR,
\&\f(CW%y\fR n' \f(CW%Y\fR can be output up in Roman numerals by prefixin tha letter
with \f(CW\*(C`O\*(C'\fR, e.g. \f(CW%OY\fR will output tha year as roman numerals.
.SH "LIMITATION"
.IX Header "LIMITATION"
Da functions up in dis module is limited ta tha time range dat can be
represented by tha time_t data type, i.e. 1901\-12\-13 20:45:53 \s-1GMT\s0 to
2038\-01\-19 03:14:07 \s-1GMT.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-2009 Graham Barr. Shiiit, dis aint no joke. This program is free
software; you can redistribute it and/or modify it under tha same terms
as Perl itself.
