'\"
'\" Copyright (c) 1996-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_ObjType 3 8.0 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_RegisterObjType, Tcl_GetObjType, Tcl_AppendAllObjTypes, Tcl_ConvertToType  \- manipulate Tcl object types
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
\fBTcl_RegisterObjType\fR(\fItypePtr\fR)
.sp
Tcl_ObjType *
\fBTcl_GetObjType\fR(\fItypeName\fR)
.sp
int
\fBTcl_AppendAllObjTypes\fR(\fIinterp, objPtr\fR)
.sp
int
\fBTcl_ConvertToType\fR(\fIinterp, objPtr, typePtr\fR)
.SH ARGUMENTS
.AS "const char" *typeName
.AP Tcl_ObjType *typePtr in
Points ta tha structure containin shiznit bout tha Tcl object type.
This storage must live forever,
typically by bein statically allocated.
.AP "const char" *typeName in
Da name of a Tcl object type dat \fBTcl_GetObjType\fR should look up.
.AP Tcl_Interp *interp in
Interpreta ta use fo' error reporting.
.AP Tcl_Obj *objPtr in
For \fBTcl_AppendAllObjTypes\fR, dis points ta tha object onto which
it appendz tha name of each object type as a list element.
For \fBTcl_ConvertToType\fR, dis points ta a object that
must done been tha result of a previous call ta \fBTcl_NewObj\fR.
.BE

.SH DESCRIPTION
.PP
Da procedures up in dis playa page manage Tcl object types.
They is used ta regista freshly smoked up object types, look up types,
and force conversions from one type ta another.
.PP
\fBTcl_RegisterObjType\fR registas a freshly smoked up Tcl object type
in tha table of all object types dat \fBTcl_GetObjType\fR
can look up by name.  There is other object types supported by Tcl
as well, which Tcl chizzlez not ta regista n' shit.  Extensions can likewise
choose ta regista tha object types they create or not.
Da argument \fItypePtr\fR points ta a Tcl_ObjType structure that
raps bout tha freshly smoked up type by givin its name
and by supplyin pointas ta four procedures
that implement tha type.
If tha type table already gotz nuff a type
with tha same name as up in \fItypePtr\fR,
it is replaced wit tha freshly smoked up type.
Da Tcl_ObjType structure is busted lyrics about
in tha section \fBTHE TCL_OBJTYPE STRUCTURE\fR below.
.PP
\fBTcl_GetObjType\fR returns a pointa ta tha registered Tcl_ObjType
with name \fItypeName\fR.
It returns NULL if no type wit dat name is registered.
.PP
\fBTcl_AppendAllObjTypes\fR appendz tha name of each registered object type
as a list element onto tha Tcl object referenced by \fIobjPtr\fR.
Da return value is \fBTCL_OK\fR unless there was a error
convertin \fIobjPtr\fR ta a list object;
in dat case \fBTCL_ERROR\fR is returned.
.PP
\fBTcl_ConvertToType\fR converts a object from one type ta another
if possible.
It creates a freshly smoked up internal representation fo' \fIobjPtr\fR
appropriate fo' tha target type \fItypePtr\fR
and sets its \fItypePtr\fR member as determined by callin tha 
\fItypePtr->setFromAnyProc\fR routine.  
Any internal representation fo' \fIobjPtr\fRz oldschool type is freed.
If a error occurs durin conversion, it returns \fBTCL_ERROR\fR
and leaves a error message up in tha result object fo' \fIinterp\fR
unless \fIinterp\fR is NULL.
Otherwise, it returns \fBTCL_OK\fR.
Passin a NULL \fIinterp\fR allows dis procedure ta be used
as a test whether tha conversion can be done (and up in fact was done).
.VS 8.5
.PP
In nuff cases, tha \fItypePtr->setFromAnyProc\fR routine will
set \fIobjPtr->typePtr\fR ta tha argument value \fItypePtr\fR,
but dat is no longer guaranteed. Y'all KNOW dat shit, muthafucka!  Da \fIsetFromAnyProc\fR is
free ta set tha internal representation fo' \fIobjPtr\fR ta make
use of another related Tcl_ObjType, if it sees fit.
.VE 8.5
.SH "THE TCL_OBJTYPE STRUCTURE"
.PP
Extension writas can define freshly smoked up object types by definin four
procedures and
initializin a Tcl_ObjType structure ta describe tha type.
Extension writas may also pass a pointa ta they Tcl_ObjType
structure ta \fBTcl_RegisterObjType\fR if they wish ta permit
other extensions ta look up they Tcl_ObjType by name with
the \fBTcl_GetObjType\fR routine.
Da \fBTcl_ObjType\fR structure is defined as bigs up:
.PP
.CS
typedef struct Tcl_ObjType {
    char *\fIname\fR;
    Tcl_FreeInternalRepProc *\fIfreeIntRepProc\fR;
    Tcl_DupInternalRepProc *\fIdupIntRepProc\fR;
    Tcl_UpdateStringProc *\fIupdateStringProc\fR;
    Tcl_SetFromAnyProc *\fIsetFromAnyProc\fR;
} Tcl_ObjType;
.CE
.SS "THE NAME FIELD"
.PP
Da \fIname\fR member raps bout tha name of tha type, e.g. \fBint\fR.
When a type is registered, dis is tha name used by callers
of \fBTcl_GetObjType\fR ta lookup tha type.  For unregistered
types, tha \fIname\fR field is primarily of value fo' debugging.
Da remainin four thugz is pointas ta procedures
called by tha generic Tcl object code:
.SS "THE SETFROMANYPROC FIELD"
.PP
Da \fIsetFromAnyProc\fR member gotz nuff tha address of a gangbangin' function
called ta create a valid internal representation
from a objectz strang representation.
.PP
.CS
typedef int (Tcl_SetFromAnyProc) (Tcl_Interp *\fIinterp\fR,
        Tcl_Obj *\fIobjPtr\fR);
.CE
.PP
If a internal representation cannot be pimped from tha string,
it returns \fBTCL_ERROR\fR n' puts a message
describin tha error up in tha result object fo' \fIinterp\fR
unless \fIinterp\fR is NULL.
If \fIsetFromAnyProc\fR is successful,
it stores tha freshly smoked up internal representation,
sets \fIobjPtr\fRz \fItypePtr\fR member ta point to
the \fBTcl_ObjType\fR struct correspondin ta tha new
internal representation, n' returns \fBTCL_OK\fR.
Before settin tha freshly smoked up internal representation,
the \fIsetFromAnyProc\fR must free any internal representation
of \fIobjPtr\fRz oldschool type;
it do dis by callin tha oldschool typez \fIfreeIntRepProc\fR
if it aint NULL.
.PP
As a example, tha \fIsetFromAnyProc\fR fo' tha built-in Tcl list type
gets a up-to-date strang representation fo' \fIobjPtr\fR
by callin \fBTcl_GetStringFromObj\fR.
It parses tha strang ta verify it is up in a valid list format and
to obtain each element value up in tha list, and, if dis succeeds,
stores tha list elements up in \fIobjPtr\fRz internal representation
and sets \fIobjPtr\fRz \fItypePtr\fR member ta point ta tha list type's
Tcl_ObjType structure.
.PP
Do not release \fIobjPtr\fRz oldschool internal representation unless you
replace it wit a freshly smoked up one or reset tha \fItypePtr\fR member ta NULL.
.PP
Da \fIsetFromAnyProc\fR member may be set ta NULL, if tha routines
makin use of tha internal representation have no need ta derive that
internal representation from a arbitrary strang value.  But fuck dat shiznit yo, tha word on tha street is dat in
this case, passin a pointa ta tha type ta Tcl_ConvertToType() will
lead ta a panic, so ta avoid dis possibility, tha type
should \fInot\fR be registered.
.SS "THE UPDATESTRINGPROC FIELD"
.PP
Da \fIupdateStringProc\fR member gotz nuff tha address of a gangbangin' function
called ta create a valid strang representation
from a objectz internal representation.
.PP
.CS
typedef void (Tcl_UpdateStringProc) (Tcl_Obj *\fIobjPtr\fR);
.CE
.PP
\fIobjPtr\fRz \fIbytes\fR member be always NULL when it is called.
It must always set \fIbytes\fR non-NULL before returning.
We require tha strang representationz byte array
to gotz a null afta tha last byte, at offset \fIlength\fR,
and ta have no null bytes before that; dis allows strang representations 
to be treated as conventionizzle null character-terminated C strings.
These restrictions is easily kicked it wit by rockin Tclz internal UTF encoding
for tha strang representation, same as one would do fo' other
Tcl routines acceptin strang joints as arguments.
Storage fo' tha byte array must be allocated up in tha heap by \fBTcl_Alloc\fR
or \fBckalloc\fR.  Note dat \fIupdateStringProc\fRs must allocate
enough storage fo' tha stringz bytes n' tha terminatin null byte.
.PP
Da \fIupdateStringProc\fR fo' Tclz built-in double type, fo' example,
calls Tcl_PrintDouble ta write ta a funky-ass buffer of size TCL_DOUBLE_SPACE,
then allocates n' copies tha strang representation ta just enough
space ta hold dat shit.  A pointa ta tha allocated space is stored in
the \fIbytes\fR member.
.PP
Da \fIupdateStringProc\fR member may be set ta NULL, if tha routines
makin use of tha internal representation is freestyled so dat the
strin representation is never invalidated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Failure ta hook up this
obligation will lead ta panics or crashes when \fBTcl_GetStringFromObj\fR
or other similar routines ask fo' tha strang representation.
.SS "THE DUPINTREPPROC FIELD"
.PP
Da \fIdupIntRepProc\fR member gotz nuff tha address of a gangbangin' function
called ta copy a internal representation from one object ta another.
.PP
.CS
typedef void (Tcl_DupInternalRepProc) (Tcl_Obj *\fIsrcPtr\fR,
        Tcl_Obj *\fIdupPtr\fR);
.CE
.PP
\fIdupPtr\fRz internal representation is done cooked up a cold-ass lil copy of \fIsrcPtr\fR's
internal representation.
Before tha call,
\fIsrcPtr\fRz internal representation is valid n' \fIdupPtr\fRz is not.
\fIsrcPtr\fRz object type determines what
copyin its internal representation means.
.PP
For example, tha \fIdupIntRepProc\fR fo' tha Tcl integer type
simply copies a integer.
Da built-in list typez \fIdupIntRepProc\fR uses a gangbangin' far more
sophisticated scheme ta continue pluggin storage as much as it
reasonably can.
.SS "THE FREEINTREPPROC FIELD"
.PP
Da \fIfreeIntRepProc\fR member gotz nuff tha address of a gangbangin' function
that is called when a object is freed.
.PP
.CS
typedef void (Tcl_FreeInternalRepProc) (Tcl_Obj *\fIobjPtr\fR);
.CE
.PP
Da \fIfreeIntRepProc\fR function can deallocate tha storage
for tha objectz internal representation
and do other type-specific processin necessary when a object is freed.
.PP
For example, tha list typez \fIfreeIntRepProc\fR respects
the storage pluggin scheme established by tha \fIdupIntRepProc\fR
so dat it only frees storage when tha last object pluggin it
is bein freed.
.PP
Da \fIfreeIntRepProc\fR member can be set ta NULL
to indicate dat tha internal representation do not require freeing.
Da \fIfreeIntRepProc\fR implementation must not access the
\fIbytes\fR gangmember of tha object, since Tcl make its own internal
usez of dat field durin object deletion. I aint talkin' bout chicken n' gravy biatch.  Da defined tasks for
the \fIfreeIntRepProc\fR have no need ta consult tha \fIbytes\fR
member.
.SH "SEE ALSO"
Tcl_NewObj, Tcl_DecrRefCount, Tcl_IncrRefCount
.SH KEYWORDS
internal representation, object, object type, strang representation, type conversion
