'\" t
.\"     Title: glMapBufferRange
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLMAPBUFFERRANGE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glMapBufferRange \- map a section of a funky-ass buffer object\*(Aqs data store
.SH "C SPECIFICATION"
.HP \w'void\ *glMapBufferRange('u
.BI "void *glMapBufferRange(GLenum\ " "target" ", GLintptr\ " "offset" ", GLsizeiptr\ " "length" ", GLbitfield\ " "access" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies a funky-ass bindin ta which tha target buffer is bound\&.
.RE
.PP
\fIoffset\fR
.RS 4
Specifies a tha startin offset within tha buffer of tha range ta be mapped\&.
.RE
.PP
\fIlength\fR
.RS 4
Specifies a length of tha range ta be mapped\&.
.RE
.PP
\fIaccess\fR
.RS 4
Specifies a cold-ass lil combination of access flags indicatin tha desired access ta tha range\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglMapBufferRange\fR
maps all or part of tha data store of a funky-ass buffer object tha fuck into tha client\*(Aqs address space\&.
\fItarget\fR
specifies tha target ta which tha buffer is bound n' must be one of
\fBGL_ARRAY_BUFFER\fR,
\fBGL_ATOMIC_COUNTER_BUFFER\fR,
\fBGL_COPY_READ_BUFFER\fR,
\fBGL_COPY_WRITE_BUFFER\fR,
\fBGL_DRAW_INDIRECT_BUFFER\fR,
\fBGL_DISPATCH_INDIRECT_BUFFER\fR,
\fBGL_ELEMENT_ARRAY_BUFFER\fR,
\fBGL_PIXEL_PACK_BUFFER\fR,
\fBGL_PIXEL_UNPACK_BUFFER\fR,
\fBGL_TEXTURE_BUFFER\fR,
\fBGL_TRANSFORM_FEEDBACK_BUFFER\fR,
\fBGL_UNIFORM_BUFFER\fR
or
\fBGL_SHADER_STORAGE_BUFFER\fR\&.
\fIoffset\fR
and
\fIlength\fR
indicate tha range of data up in tha buffer object htat is ta be mapped, up in termz of basic machine units\&.
\fIaccess\fR
is a funky-ass bitfield containin flags which describe tha axed mapping\&. These flags is busted lyrics bout below\&.
.PP
If no error occurs, a pointa ta tha beginnin of tha mapped range is returned once all pendin operations on dat buffer have completed, n' may be used ta modify and/or query tha correspondin range of tha buffer, accordin ta tha followin flag bits set in
\fIaccess\fR:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_READ_BIT\fR
indicates dat tha returned pointa may be used ta read buffer object data\&. No GL error is generated if tha pointa is used ta query a mappin which excludes dis flag yo, but tha result is undefined n' system errors (possibly includin program termination) may occur\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_WRITE_BIT\fR
indicates dat tha returned pointa may be used ta modify buffer object data\&. No GL error is generated if tha pointa is used ta modify a mappin which excludes dis flag yo, but tha result is undefined n' system errors (possibly includin program termination) may occur\&.
.RE
.PP
Furthermore, tha following
\fIoptional\fR
flag bits in
\fIaccess\fR
may be used ta modify tha mapping:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_INVALIDATE_RANGE_BIT\fR
indicates dat tha previous contentz of tha specified range may be discarded\&. Data within dis range is undefined wit tha exception of subsequently freestyled data\&. No GL error is generated if sub\- sequent GL operations access unwritten data yo, but tha result is undefined n' system errors (possibly includin program termination) may occur\&. This flag may not be used up in combination with
\fBGL_MAP_READ_BIT\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_INVALIDATE_BUFFER_BIT\fR
indicates dat tha previous contentz of tha entire buffer may be discarded\&. Data within tha entire buffer is undefined wit tha exception of subsequently freestyled data\&. No GL error is generated if subsequent GL operations access unwritten data yo, but tha result is undefined n' system errors (possibly includin program termination) may occur\&. This flag may not be used up in combination with
\fBGL_MAP_READ_BIT\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_FLUSH_EXPLICIT_BIT\fR
indicates dat one or mo' discrete subrangez of tha mappin may be modified\&. When dis flag is set, modifications ta each subrange must be explicitly flushed by calling
\fBglFlushMappedBufferRange\fR()\&. No GL error is set if a subrange of tha mappin is modified n' not flushed yo, but data within tha correspondin subrange of tha buffer is undefined\&. This flag may only be used up in conjunction with
\fBGL_MAP_WRITE_BIT\fR\&. When dis option is selected, flushin is strictly limited ta regions dat is explicitly indicated wit calls to
\fBglFlushMappedBufferRange\fR()
prior ta unmap; if dis option aint selected
\fBglUnmapBuffer\fR()
will automatically flush tha entire mapped range when called\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_UNSYNCHRONIZED_BIT\fR
indicates dat tha GL should not attempt ta synchronize pendin operations on tha buffer prior ta returnin from
\fBglMapBufferRange\fR\&. No GL error is generated if pendin operations which source or modify tha buffer overlap tha mapped region yo, but tha result of such previous n' any subsequent operations is undefined\&.
.RE
.PP
If a error occurs,
\fBglMapBufferRange\fR
returns a
NULL
pointer\&. If no error occurs, tha returned pointa will reflect a alignment of at least
\fBGL_MIN_MAP_BUFFER_ALIGNMENT\fR
basic machine units\&. Da value of
\fBGL_MIN_MAP_BUFFER_ALIGNMENT\fR
can be retrieved by calling
\fBglGet\fR()
with
\fIpname\fR
set to
\fBGL_MIN_MAP_BUFFER_ALIGNMENT\fR
and must be a juice of two dat be at least 64\&. Right back up in yo muthafuckin ass. Subtracting
\fIoffset\fR
from dis returned pointed will always produce a multiple of
\fBGL_MIN_MAP_BUFFER_ALINMENT\fR\&.
.SH "NOTES"
.PP
Alignment of tha returned pointa is guaranteed only if tha version of tha GL version is 4\&.2 or pimped outer\& fo' realz. Also, the
\fBGL_ATOMIC_COUNTER_BUFFER\fR
target be accepted only if tha GL version is 4\&.2 or pimped outer\&.
.PP
The
\fBGL_DISPATCH_INDIRECT_BUFFER\fR
and
\fBGL_SHADER_STORAGE_BUFFER\fR
targets is accepted only if tha GL version is 4\&.3 or pimped outer\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if either of
\fIoffset\fR
or
\fIlength\fR
is negative, or if
\fIoffset\fR
+
\fIlength\fR
is pimped outa than tha value of
\fBGL_BUFFER_SIZE\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIaccess\fR
has any bits set other than dem defined above\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated fo' any of tha followin conditions:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da buffer be already up in a mapped state\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Neither
\fBGL_MAP_READ_BIT\fR
or
\fBGL_MAP_WRITE_BIT\fR
is set\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_READ_BIT\fR
is set n' any of
\fBGL_MAP_INVALIDATE_RANGE_BIT\fR,
\fBGL_MAP_INVALIDATE_BUFFER_BIT\fR, or
\fBGL_MAP_UNSYNCHRONIZED_BIT\fR
is set\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBGL_MAP_FLUSH_EXPLICIT_BIT\fR
is set and
\fBGL_MAP_WRITE_BIT\fR
is not set\&.
.RE
.PP
\fBGL_OUT_OF_MEMORY\fR
is generated if
\fBglMapBufferRange\fR
fails cuz memory fo' tha mappin could not be obtained\&.
.SH "SEE ALSO"
.PP
\fBglMapBuffer\fR(),
\fBglFlushMappedBufferRange\fR(),
\fBglBindBuffer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2010\-2012 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
