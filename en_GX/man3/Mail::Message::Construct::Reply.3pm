.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Construct::Reply 3"
.TH Mail::Message::Construct::Reply 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Construct::Reply \- reply ta a Mail::Message
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah Mail::Message $reply = $message\->reply;
\& mah $quoted  = $message\->replyPrelude($head\->get(\*(AqFrom\*(Aq));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Complex functionalitizzle on Mail::Message objects is implemented in
different filez which is autoloaded. Y'all KNOW dat shit, muthafucka!  This file implements the
functionalitizzle related ta bustin message replies.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructin a message"
.IX Subsection "Constructin a message"
.ie n .IP "$obj\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->reply(OPTIONS)"
Start a reply ta dis message. Right back up in yo muthafuckin ass. Some of tha header-linez of tha original
message is ghon be taken. I aint talkin' bout chicken n' gravy biatch fo' realz. A message-id is ghon be assigned. Y'all KNOW dat shit, muthafucka! Some header lines
will be updated ta facilitate message-thread detection
(see Mail::Box::Thread::Manager).
.Sp
Yo ass may reply ta a whole message or a message part.  Yo ass may wish to
overrule a shitload of tha default header settings fo' tha reply immediately,
or you may do dat lata wit \f(CW\*(C`set\*(C'\fR on tha header.
.Sp
\&\s-1ADDRESSES\s0 may be specified as string, or
a Mail::Address object, or as array of Mail::Address objects.
.Sp
All \s-1OPTIONS\s0 which is not listed below \s-1AND\s0 start wit a cold-ass lil capital, will
be added as additionizzle headaz ta tha reply message.
.Sp
.Vb 10
\& \-Option         \-\-Default
\&  Bcc              undef
\&  Cc               <\*(Aqcc\*(Aq up in current>
\&  From             <\*(Aqto\*(Aq up in current>
\&  Message\-ID       <uniquely generated>
\&  Subject          replySubject()
\&  To               <sender up in current>
\&  body             undef
\&  group_reply      <true>
\&  include          \*(AqINLINE\*(Aq
\&  max_signature    10
\&  message_type     Mail::Message
\&  postlude         undef
\&  prelude          undef
\&  quote            \*(Aq> \*(Aq
\&  signature        undef
\&  strip_signature  qr/^\-\-\es/
.Ve
.RS 4
.IP "Bcc => \s-1ADDRESSES\s0" 2
.IX Item "Bcc => ADDRESSES"
Receiverz of blind carbon copies: they names aint gonna be published to
other message receivers.
.IP "Cc => \s-1ADDRESSES\s0" 2
.IX Item "Cc => ADDRESSES"
Da carbon-copy receivers, by default a cold-ass lil copy of tha \f(CW\*(C`Cc\*(C'\fR field of
the source message.
.IP "From => \s-1ADDRESSES\s0" 2
.IX Item "From => ADDRESSES"
Yo crazy-ass identification, by default taken from tha \f(CW\*(C`To\*(C'\fR field of the
source message.
.IP "Message-ID => \s-1STRING\s0" 2
.IX Item "Message-ID => STRING"
Supply a \s-1STRING\s0 as specific message-id fo' tha reply.  By default, one is
generated fo' yo thugged-out ass.  If there be no anglez round yo' id, they will be
added.
.IP "Subject => STRING|CODE" 2
.IX Item "Subject => STRING|CODE"
Force tha subject line ta tha specific \s-1STRING,\s0 or tha result of the
subroutine specified by \s-1CODE. \s0 Da subroutine is ghon be called passing
the subject of tha original gangsta message as only argument.  By default,
\&\fIMail::Message::replySubject()\fR is used.
.IP "To => \s-1ADDRESSES\s0" 2
.IX Item "To => ADDRESSES"
Da destination of yo' message.  By default taken from tha \f(CW\*(C`Reply\-To\*(C'\fR
field up in tha source message.  If dat field aint present as well, the
\&\f(CW\*(C`From\*(C'\fR line is scanned. Y'all KNOW dat shit, muthafucka!  If they all fail, \f(CW\*(C`undef\*(C'\fR is returned by this
method: no reply message produced.
.IP "body => \s-1BODY\s0" 2
.IX Item "body => BODY"
Usually, tha reply method can create a sick, sufficient message from the
source messagez body.  In case you like mo' fucked up reformatting,
you may also create a funky-ass body yo ass first, n' pass dis on ta this
\&\f(CW\*(C`reply\*(C'\fR method. Y'all KNOW dat shit, muthafucka! Some of tha other options ta dis method is ghon be ingored
in dis case.
.IP "group_reply => \s-1BOOLEAN\s0" 2
.IX Item "group_reply => BOOLEAN"
Will tha playas listed up in tha \f(CW\*(C`Cc\*(C'\fR headaz (those whoz ass received the
message where you reply ta now) also receive dis message as carbon
copy?
.IP "include => '\s-1NO\s0'|'\s-1INLINE\s0'|'\s-1ATTACH\s0'" 2
.IX Item "include => 'NO'|'INLINE'|'ATTACH'"
Must tha message where dis be a reply ta be included up in tha message?
If \f(CW\*(C`NO\*(C'\fR then not.  With \f(CW\*(C`INLINE\*(C'\fR a reply body is composed. Y'all KNOW dat shit, muthafucka! \f(CW\*(C`ATTACH\*(C'\fR
will create a multi-part body, where tha original gangsta message be added
afta tha specified body.  It be only possible ta inline textual
lyrics, therefore binary or multipart lyrics will always be
enclosed as attachment.
.IP "max_signature => \s-1INTEGER\s0" 2
.IX Item "max_signature => INTEGER"
Passed ta \f(CW\*(C`stripSignature\*(C'\fR on tha body as parameta \f(CW\*(C`max_lines\*(C'\fR.  Only
effectizzle fo' single-part lyrics.
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
Smoke a message wit tha axed type.  By default, it is ghon be a
Mail::Message.  This is erect, cuz it is ghon be coerced into
the erect folda message type when it be added ta dat folder.
.IP "postlude => BODY|LINES" 2
.IX Item "postlude => BODY|LINES"
Da line(s) which ta be added afta tha quoted reply lines.  Smoke a
body fo' it first.  This should not include tha signature, which has its
own option. I aint talkin' bout chicken n' gravy biatch.  Da signature is ghon be added afta tha postlude when the
reply is INLINEd.
.IP "prelude => BODY|LINES" 2
.IX Item "prelude => BODY|LINES"
Da line(s) which is ghon be added before tha quoted reply lines.  If nothing
is specified, tha result of tha \fIreplyPrelude()\fR method
is taken. I aint talkin' bout chicken n' gravy biatch.  When \f(CW\*(C`undef\*(C'\fR is specified, no prelude is ghon be added.
.IP "quote => CODE|STRING" 2
.IX Item "quote => CODE|STRING"
Mangle tha linez of a \f(CW\*(C`INLINE\*(C'\fRd reply wit \s-1CODE,\s0 or by prependin a
\&\s-1STRING\s0 ta each line.  Da routine specified by \s-1CODE\s0 is called when the
line is up in \f(CW$_\fR.
.Sp
By default, \f(CW\*(Aq> \*(Aq\fR be added before each line.  Specify \f(CW\*(C`undef\*(C'\fR to
disable quoting.  This option is processed afta tha body has been decoded.
.IP "signature => BODY|MESSAGE" 2
.IX Item "signature => BODY|MESSAGE"
Da signature ta be added up in case of a multi-part reply.  Da mime-type
of tha signature body should indicate dis be a used as such.  However,
in \s-1INLINE\s0 mode, tha body is ghon be taken, a line containin \f(CW\*(Aq\-\- \*(Aq\fR added
before it, n' added behind tha epilogue.
.IP "strip_signature => REGEXP|STRING|CODE" 2
.IX Item "strip_signature => REGEXP|STRING|CODE"
Remove tha signature of tha sender n' shit.  Da value of dis parameta is
passed ta Mail::Message::Body::stripSignature(pattern) unless the
source text aint included. Y'all KNOW dat shit, muthafucka!  Da signature is stripped from tha message
before quoting.
.Sp
When a multipart body is encountered, n' tha message is included to
\&\s-1ATTACH,\s0 tha parts which be lookin like signatures is ghon be removed. Y'all KNOW dat shit, muthafucka!  If only
one message remains, it is ghon be tha added as single attachment, otherwise
a nested multipart is ghon be tha result.  Da value of dis option do not
matter, as long as it is present.  See Mail::Message::Body::Multipart.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 8
\&  mah $reply = $msg\->reply
\&   ( prelude         => "No spam, please!\en\en"
\&   , postlude        => "\enGreetings\en"
\&   , strip_signature => 1
\&   , signature       => $my_pgp_key
\&   , group_reply     => 1
\&   , \*(AqX\-Extra\*(Aq       => \*(Aqadditionizzle header\*(Aq
\&   );
.Ve
.RE
.ie n .IP "$obj\->\fBreplyPrelude\fR([STRING|FIELD|ADDRESS|ARRAY\-OF\-THINGS])" 4
.el .IP "\f(CW$obj\fR\->\fBreplyPrelude\fR([STRING|FIELD|ADDRESS|ARRAY\-OF\-THINGS])" 4
.IX Item "$obj->replyPrelude([STRING|FIELD|ADDRESS|ARRAY-OF-THINGS])"
Produces a list of lines (usually only one), which will preceded the
quoted body of tha message.  \s-1STRING\s0 must comply ta tha \s-1RFC822\s0 email
address justification, n' is probably tha content of a \f(CW\*(C`To\*(C'\fR or \f(CW\*(C`From\*(C'\fR
header line.  If a \s-1FIELD\s0 is specified, tha fieldz body must be
compliant.  Without argument \-or when tha argument is \f(CW\*(C`undef\*(C'\fR\- a
slightly different line is produced.
.Sp
An characteristic example of tha output is
.Sp
.Vb 1
\& On Thu Oct 13 04:54:34 1995, him@example.com wrote:
.Ve
.ie n .IP "$obj\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->replySubject(STRING)"
.PD 0
.IP "Mail::Message\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "Mail::Message->replySubject(STRING)"
.PD
Smoke a subject fo' a message which be a reply fo' dis one.  This routine
tries ta count tha level of reply up in subject field, n' transform it into
a standard form.  Please contribute improvements.
.Sp
example:
.Sp
.Vb 6
\& subject                 \-\-> Re: subject
\& Re: subject             \-\-> Re[2]: subject
\& Re[X]: subject          \-\-> Re[X+1]: subject
\& subject (Re)            \-\-> Re[2]: subject
\& subject (Forw)          \-\-> Re[2]: subject
\& <blank>                 \-\-> Re: yo' mail
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot include reply source as $include." 4
.el .IP "Error: Cannot include reply source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include reply source as $include."
Unknown alternatizzle fo' tha \f(CW\*(C`include\*(C'\fR option of \fIreply()\fR.  Valid
choices is \f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, n' \f(CW\*(C`ATTACH\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
