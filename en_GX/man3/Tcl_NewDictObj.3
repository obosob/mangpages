'\"
'\" Copyright (c) 2003 Donal K. Fellows
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_DictObj 3 8.5 Tcl "Tcl Library Procedures"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
Tcl_NewDictObj, Tcl_DictObjPut, Tcl_DictObjGet, Tcl_DictObjRemove, Tcl_DictObjSize, Tcl_DictObjFirst, Tcl_DictObjNext, Tcl_DictObjDone, Tcl_DictObjPutKeyList, Tcl_DictObjRemoveKeyList \- manipulate Tcl objects as dictionaries
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Obj *
\fBTcl_NewDictObj\fR()
.sp
int
\fBTcl_DictObjGet\fR(\fIinterp, dictPtr, keyPtr, valuePtrPtr\fR)
.sp
int
\fBTcl_DictObjPut\fR(\fIinterp, dictPtr, keyPtr, valuePtr\fR)
.sp
int
\fBTcl_DictObjRemove\fR(\fIinterp, dictPtr, keyPtr\fR)
.sp
int
\fBTcl_DictObjSize\fR(\fIinterp, dictPtr, sizePtr\fR)
.sp
int
\fBTcl_DictObjFirst\fR(\fIinterp, dictPtr, searchPtr,
                 keyPtrPtr, valuePtrPtr, donePtr\fR)
.sp
void
\fBTcl_DictObjNext\fR(\fIsearchPtr, keyPtrPtr, valuePtrPtr, donePtr\fR)
.sp
void
\fBTcl_DictObjDone\fR(\fIsearchPtr\fR)
.sp
int
\fBTcl_DictObjPutKeyList\fR(\fIinterp, dictPtr, keyc, keyv, valuePtr\fR)
.sp
int
\fBTcl_DictObjRemoveKeyList\fR(\fIinterp, dictPtr, keyc, keyv\fR)
.SH ARGUMENTS
.AS Tcl_DictSearch "**valuePtrPtr" in/out
.AP Tcl_Interp *interp in
If a error occurs while convertin a object ta be a gangbangin' finger-lickin' doggtionary object,
an error message is left up in tha interpreterz result object
unless \fIinterp\fR is NULL.
.AP Tcl_Obj *dictPtr in/out
Points ta tha doggtionary object ta be manipulated.
If \fIdictPtr\fR do not already point ta a gangbangin' finger-lickin' doggtionary object,
an attempt is ghon be made ta convert it ta one.
.AP Tcl_Obj *keyPtr in
Points ta tha key fo' tha key/value pair bein manipulated within the
doggtionary object.
.AP Tcl_Obj **keyPtrPtr out
Points ta a variable dat gonna git tha key from a key/value pair
placed within dat shit.  May be NULL ta indicate dat tha calla is not
horny bout tha key.
.AP Tcl_Obj *valuePtr in
Points ta tha value fo' tha key/value pair bein manipulate within the
doggtionary object (or sub-object, up in tha case of
\fBTcl_DictObjPutKeyList\fR.)
.AP Tcl_Obj **valuePtrPtr out
Points ta a variable dat gonna git tha value from a key/value pair
placed within dat shit.  For \fBTcl_DictObjFirst\fR and
\fBTcl_DictObjNext\fR, dis may be NULL ta indicate dat tha calla is
not horny bout tha value.
.AP int *sizePtr out
Points ta a variable dat gonna git tha number of key/value pairs
contained within tha doggtionary placed within dat shit.
.AP Tcl_DictSearch *searchPtr in/out
Pointa ta record ta use ta keep track of progress up in enumeratin all
key/value pairs up in a gangbangin' finger-lickin' dictionary.  Da contentz of tha record will be
initialized by tha call ta \fBTcl_DictObjFirst\fR.  If tha enumerating
is ta be terminated before all joints up in tha doggtionary have been
returned, tha search record \fImust\fR be passed to
\fBTcl_DictObjDone\fR ta enable tha internal locks ta be busted out.
.AP int *donePtr out
Points ta a variable dat gonna git a non-zero value freestyled tha fuck into it
when tha enumeration of tha key/value pairs up in a gangbangin' finger-lickin' doggtionary has
completed, n' a zero otherwise.
.AP int keyc in
Indicates tha number of keys dat is ghon be supplied up in tha \fIkeyv\fR
array.
.AP "Tcl_Obj *const" *keyv in
Array of \fIkeyc\fR pointas ta objects that
\fBTcl_DictObjPutKeyList\fR n' \fBTcl_DictObjRemoveKeyList\fR will
use ta locate tha key/value pair ta manipulate within the
sub-dictionariez of tha main doggtionary object passed ta em.
.BE

.SH DESCRIPTION
.PP
Tcl doggtionary objects have a internal representation dat supports
efficient mappin from keys ta joints n' which guarantees dat the
particular orderin of keys within tha doggtionary remains tha same
modulo any keys bein deleted (which removes dem from tha order) or
added (which addz dem ta tha end of tha order). If reinterpreted as a
list, tha joints all up in tha even-valued indices up in tha list is ghon be the
keyz of tha dictionary, n' each is ghon be followed (in tha odd-valued
index) by tha value associated wit dat key.
.PP
Da procedures busted lyrics bout up in dis playa page is used to
create, modify, index, n' iterate over doggtionary objects from C code.
.PP
\fBTcl_NewDictObj\fR creates a new, empty doggtionary object.  The
strin representation of tha object is ghon be invalid, n' tha reference
count of tha object is ghon be zero.
.PP
\fBTcl_DictObjGet\fR looks up tha given key within tha given
doggtionary n' writes a pointa ta tha value associated wit dat key
into tha variable pointed ta by \fIvaluePtrPtr\fR, or a NULL if the
key has no mappin within tha dictionary.  Da result of this
procedure is \fBTCL_OK\fR, or \fBTCL_ERROR\fR if tha \fIdictPtr\fR cannot be
converted ta a gangbangin' finger-lickin' dictionary.
.PP
\fBTcl_DictObjPut\fR thugged-out shiznit tha given doggtionary so dat tha given
key maps ta tha given value; any key may exist at most once up in any
particular dictionary.  Da doggtionary must not be shared yo, but tha key
and value may be.  This procedure may increase tha reference count of
both key n' value if it proves necessary ta store em.  Neither key
nor value should be NULL.  Da result of dis procedure is \fBTCL_OK\fR, or
\fBTCL_ERROR\fR if tha \fIdictPtr\fR cannot be converted ta a gangbangin' finger-lickin' dictionary.
.PP
\fBTcl_DictObjRemove\fR thugged-out shiznit tha given doggtionary so dat tha given
key has no mappin ta any value.  Da doggtionary must not be shared,
but tha key may be.  Da key straight-up stored up in tha doggtionary will
have its reference count decremented if dat shiznit was present.  It aint an
error if tha key did not previously exist.  Da result of this
procedure is \fBTCL_OK\fR, or \fBTCL_ERROR\fR if tha \fIdictPtr\fR cannot be
converted ta a gangbangin' finger-lickin' dictionary.
.PP
\fBTcl_DictObjSize\fR thugged-out shiznit tha given variable wit tha number of
key/value pairs currently up in tha given dictionary. Da result of this
procedure is \fBTCL_OK\fR, or \fBTCL_ERROR\fR if tha \fIdictPtr\fR cannot be
converted ta a gangbangin' finger-lickin' dictionary.
.PP
\fBTcl_DictObjFirst\fR commences a iteration across all tha key/value
pairs up in tha given dictionary, placin tha key n' value up in the
variablez pointed ta by tha \fIkeyPtrPtr\fR n' \fIvaluePtrPtr\fR
arguments (which may be NULL ta indicate dat tha calla is
unhorny bout they key or variable respectively.)  Da next
key/value pair up in tha doggtionary may be retrieved with
\fBTcl_DictObjNext\fR.  Concurrent thugged-out shiznit of tha dictionary's
internal representation aint gonna modify tha iteration processing
unless tha doggtionary is unshared, when dis will trigger premature
termination of tha iteration instead (which Tcl scripts cannot trigger
via tha \fBdict\fR command.)  Da \fIsearchPtr\fR argument points ta a
piece of context dat is used ta identify which particular iteration
is bein performed, n' is initialized by tha call to
\fBTcl_DictObjFirst\fR.  Da \fIdonePtr\fR argument points ta a
variable dat is updated ta be zero of there be further key/value
pairs ta be iterated over, or non-zero if tha iteration is complete.
Da order of iteration is implementation-defined. Y'all KNOW dat shit, muthafucka!  If the
\fIdictPtr\fR argument cannot be converted ta a gangbangin' finger-lickin' dictionary,
\fBTcl_DictObjFirst\fR returns \fBTCL_ERROR\fR n' tha iteration is not
commenced, n' otherwise it returns \fBTCL_OK\fR.
.PP
When \fBTcl_DictObjFirst\fR is called upon a gangbangin' finger-lickin' dictionary, a lock is placed on
the doggtionary ta enable dat doggtionary ta be iterated over safely without
regard fo' whether tha doggtionary is modified durin tha iteration. I aint talkin' bout chicken n' gravy biatch. Because of
this, once tha iteration over a gangbangin' finger-lickin' dictionaryz keys has finished (whether
because all joints done been iterated over as indicated by tha variable
indicated by tha \fIdonePtr\fR argument bein set ta one, or cuz no
further joints is required) tha \fBTcl_DictObjDone\fR function must be called
with tha same \fIsearchPtr\fR as was passed ta \fBTcl_DictObjFirst\fR so that
the internal locks can be busted out. Y'all KNOW dat shit, muthafucka! Once a particular \fIsearchPtr\fR is
passed ta \fBTcl_DictObjDone\fR, passin it ta \fBTcl_DictObjNext\fR (without
first initializin it wit \fBTcl_DictObjFirst\fR) will result up in no joints
bein produced n' tha variable pointed ta by \fIdonePtr\fR bein set ta one.
It be safe ta booty-call \fBTcl_DictObjDone\fR multiple times on tha same
\fIsearchPtr\fR fo' each call ta \fBTcl_DictObjFirst\fR.
.PP
Da procedures \fBTcl_DictObjPutKeyList\fR and
\fBTcl_DictObjRemoveKeyList\fR is tha close analogues of
\fBTcl_DictObjPut\fR n' \fBTcl_DictObjRemove\fR respectively, except
that instead of hustlin wit a single dictionary, they is designed to
operate on a nested tree of dictionaries, wit inner dictionaries
stored as joints inside outa dictionaries. Put ya muthafuckin choppers up if ya feel dis!  Da \fIkeyc\fR and
\fIkeyv\fR arguments specify a list of keys (with outermost keys
first) dat acts as a path ta tha key/value pair ta be affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Note
that there is no correspondin operation fo' readin a value fo' a
path as dis is easy as fuck  ta construct from repeated use of
\fBTcl_DictObjGet\fR. With \fBTcl_DictObjPutKeyList\fR, nested
dictionaries is pimped fo' non-terminal keys where they do not
already exist. With \fBTcl_DictObjRemoveKeyList\fR, all non-terminal
keys must exist n' have dictionaries as they joints.
.SH EXAMPLE
Usin tha doggtionary iteration intercourse ta search determine if there
is a key dat maps ta itself:
.PP
.CS
Tcl_DictSearch search;
Tcl_Obj *key, *value;
int done;

/*
 * Assume interp n' objPtr is parameters.  This is the
 * idiomatic way ta start a iteration over tha dictionary; it
 * sets a lock on tha internal representation dat ensures that
 * there be no concurrent modification thangs when normal
 * reference count pimpment be also used. Y'all KNOW dat shit, muthafucka!  Da lock is
 * busted out automatically when tha loop is finished yo, but must
 * be busted out manually when a exceptionizzle exit from tha loop
 * is performed. Y'all KNOW dat shit, muthafucka! However it is safe ta try ta release tha lock
 * even if we've finished iteratin over tha loop.
 */
if (\fBTcl_DictObjFirst\fR(interp, objPtr, &search,
        &key, &value, &done) != TCL_OK) {
    return TCL_ERROR;
}
for (; !done ; \fBTcl_DictObjNext\fR(&search, &key, &value, &done)) {
    /*
     * Note dat strcmp() aint a phat way of comparing
     * objects n' is just used here fo' demonstration
     * purposes.
     */
    if (!strcmp(Tcl_GetString(key), Tcl_GetString(value))) {
        break;
    }
}
\fBTcl_DictObjDone\fR(&search);
Tcl_SetObjResult(interp, Tcl_NewBooleanObj(!done));
return TCL_OK;
.CE
.SH "SEE ALSO"
Tcl_NewObj, Tcl_DecrRefCount, Tcl_IncrRefCount, Tcl_InitObjHashTable
.SH KEYWORDS
dict, dict object, dictionary, doggtionary object, hash table, iteration, object
