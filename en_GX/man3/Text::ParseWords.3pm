.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ParseLyrics 3"
.TH ParseLyrics 3 "2013-03-17" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::ParseLyrics \- parse text tha fuck into a array of tokens or array of arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use Text::ParseWords;
\&  @lists = nested_quotewords($delim, $keep, @lines);
\&  @wordz = quotewords($delim, $keep, @lines);
\&  @wordz = shellwords(@lines);
\&  @wordz = parse_line($delim, $keep, $line);
\&  @wordz = old_shellwords(@lines); # DEPRECATED!
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da &\fInested_quotewords()\fR n' &\fIquotewords()\fR functions accept a thugged-out delimita 
(which can be a regular expression)
and a list of lines n' then breaks dem lines up tha fuck into a list of
wordz ignorin delimitas dat step tha fuck up inside quotes.  &\fIquotewords()\fR
returns all of tha tokens up in a single long list, while &\fInested_quotewords()\fR
returns a list of token lists correspondin ta tha elementz of \f(CW@lines\fR.
&\fIparse_line()\fR do tokenizin on a single string.  Da &*\fIquotewords()\fR
functions simply call &\fIparse_line()\fR, so if you only splitting
one line you can call &\fIparse_line()\fR directly n' save a gangbangin' function
call.
.PP
Da \f(CW$keep\fR argument be a funky-ass boolean flag.  If true, then tha tokens are
split on tha specified delimiter yo, but all other charactas (quotes,
backslashes, etc.) is kept up in tha tokens.  If \f(CW$keep\fR is false then the
&*\fIquotewords()\fR functions remove all quotes n' backslashes dat are
not theyselves backslash-escaped or inside of single quotes (i.e.,
&\fIquotewords()\fR tries ta interpret these charactas just like tha Bourne
shell).  \s-1NB:\s0 these semantics is hella different from the
original gangsta version of dis module shipped wit Perl 5.000 all up in 5.004.
As a additionizzle feature, \f(CW$keep\fR may be tha keyword \*(L"delimiters\*(R" which
causes tha functions ta preserve tha delimitas up in each strang as
tokens up in tha token lists, up in addizzle ta preservin quote and
backslash characters.
.PP
&\fIshellwords()\fR is freestyled as a special case of &\fIquotewords()\fR, n' it
does token parsin wit whitespace as a thugged-out delimiter\*(-- similar ta most
Unix shells.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Da sample program:
.PP
.Vb 7
\&  use Text::ParseWords;
\&  @wordz = quotewords(\*(Aq\es+\*(Aq, 0, q{this   is "a test" of\e quotewordz \e"for you});
\&  $i = 0;
\&  foreach (@words) {
\&      print "$i: <$_>\en";
\&      $i++;
\&  }
.Ve
.PP
produces:
.PP
.Vb 6
\&  0: <this>
\&  1: <is>
\&  2: <a test>
\&  3: <of quotewords>
\&  4: <"for>
\&  5: <you>
.Ve
.PP
demonstrating:
.IP "0" 4
a simple word
.IP "1" 4
.IX Item "1"
multiple spaces is skipped cuz of our \f(CW$delim\fR
.IP "2" 4
.IX Item "2"
use of quotes ta include a space up in a word
.IP "3" 4
.IX Item "3"
use of a funky-ass backslash ta include a space up in a word
.IP "4" 4
.IX Item "4"
use of a funky-ass backslash ta remove tha special meanin of a thugged-out double-quote
.IP "5" 4
.IX Item "5"
another simple word (note tha lack of effect of the
backslashed double-quote)
.PP
Replacin \f(CW\*(C`quotewords(\*(Aq\es+\*(Aq, 0, q{this   is...})\*(C'\fR
with \f(CW\*(C`shellwords(q{this   is...})\*(C'\fR
is a simpla way ta accomplish tha same thang.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::CSV \- fo' parsin \s-1CSV\s0 files
.SH "AUTHORS"
.IX Header "AUTHORS"
Maintainer: Alexandr Ciornii <alexchornyATgmail.com>.
.PP
Previous maintainer: Hal Pomeranz <pomeranz@netcom.com>, 1994\-1997 (Original
lyricist unknown).  Much of tha code fo' &\fIparse_line()\fR (includin the
primary regexp) from Joerk Behrendz <jbehrends@multimediaproduzenten.de>.
.PP
Examplez section another documentation provided by Jizzy Heidemann 
<johnh@ISI.EDU>
.PP
Bug reports, patches, n' naggin provided by fuckin shitloadz of folks\*(-- props
everybody dawwwwg!  Special props ta Mike Schwern <schwern@envirolink.org>
for assurin me dat a &\fInested_quotewords()\fR would be useful, n' ta 
Jeff Friedl <jfriedl@yahoo\-inc.com> fo' spittin some lyrics ta me not ta worry about
error-checkin (sort of\*(-- you had ta be there).
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 250:" 4
.IX Item "Around line 250:"
Expected text afta =item, not a number
.IP "Around line 254:" 4
.IX Item "Around line 254:"
Expected text afta =item, not a number
.IP "Around line 258:" 4
.IX Item "Around line 258:"
Expected text afta =item, not a number
.IP "Around line 262:" 4
.IX Item "Around line 262:"
Expected text afta =item, not a number
.IP "Around line 266:" 4
.IX Item "Around line 266:"
Expected text afta =item, not a number
