.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RAND_add 3"
.TH RAND_add 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
RAND_add, RAND_seed, RAND_status, RAND_event, RAND_screen \- add
entropy ta tha PRNG
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/rand.h>
\&
\& void RAND_seed(const void *buf, int num);
\&
\& void RAND_add(const void *buf, int num, double entropy);
\&
\& int  RAND_status(void);
\&
\& int  RAND_event(UINT iMsg, WPARAM wParam, LPARAM lParam);
\& void RAND_screen(void);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIRAND_add()\fR mixes tha \fBnum\fR bytes at \fBbuf\fR tha fuck into tha \s-1PRNG\s0 state. Thus,
if tha data at \fBbuf\fR is unpredictable ta a adversary, this
increases tha uncertainty bout tha state n' make tha \s-1PRNG\s0 output
less predictable. Right back up in yo muthafuckin ass. Suitable input be reppin user interaction (random
key presses, mouse movements) n' certain hardware events, n' you can put dat on yo' toast. The
\&\fBentropy\fR argument is (the lower bound of) a estimate of how tha fuck much
randomnizz is contained up in \fBbuf\fR, measured up in bytes. Details about
sourcez of randomnizz n' how tha fuck ta estimate they entropy can be found
in tha literature, e.g. \s-1RFC 1750.\s0
.PP
\&\fIRAND_add()\fR may be called wit sensitizzle data like fuckin user entered
passwords. Da seed joints cannot be recovered from tha \s-1PRNG\s0 output.
.PP
OpenSSL make shizzle dat tha \s-1PRNG\s0 state is unique fo' each thread. Y'all KNOW dat shit, muthafucka! On
systems dat provide \f(CW\*(C`/dev/urandom\*(C'\fR, tha randomnizz thang is used
to seed tha \s-1PRNG\s0 transparently. But fuck dat shiznit yo, tha word on tha street is dat on all other systems, the
application is responsible fo' seedin tha \s-1PRNG\s0 by callin \fIRAND_add()\fR,
\&\fIRAND_egd\fR\|(3)
or \fIRAND_load_file\fR\|(3).
.PP
\&\fIRAND_seed()\fR is equivalent ta \fIRAND_add()\fR when \fBnum == entropy\fR.
.PP
\&\fIRAND_event()\fR collects tha entropy from Windows events like fuckin mouse
movements n' other user interaction. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it should be called wit the
\&\fBiMsg\fR, \fBwParam\fR n' \fBlParam\fR argumentz of \fIall\fR lyrics busted to
the window procedure. Well shiiiit, it will estimate tha entropy contained up in the
event message (if any), n' add it ta tha \s-1PRNG.\s0 Da program can then
process tha lyrics as usual.
.PP
Da \fIRAND_screen()\fR function be available fo' tha convenience of Windows
programmers. Well shiiiit, it addz tha current contentz of tha screen ta tha \s-1PRNG.\s0
For applications dat can catch Windows events, seedin tha \s-1PRNG\s0 by
callin \fIRAND_event()\fR be a hella betta source of
randomness. Well shiiiit, it should be noted dat both methodz cannot be used on
servers dat run without user interaction.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIRAND_status()\fR n' \fIRAND_event()\fR return 1 if tha \s-1PRNG\s0 has been seeded
with enough data, 0 otherwise.
.PP
Da other functions do not return joints.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIrand\fR\|(3), \fIRAND_egd\fR\|(3),
\&\fIRAND_load_file\fR\|(3), \fIRAND_cleanup\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIRAND_seed()\fR n' \fIRAND_screen()\fR is available up in all versionz of SSLeay
and OpenSSL. \fIRAND_add()\fR n' \fIRAND_status()\fR done been added up in OpenSSL
0.9.5, \fIRAND_event()\fR up in OpenSSL 0.9.5a.
