'\" t
.\"     Title: glLinkProgram
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLLINKPROGRAM" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glLinkProgram \- Links a program object
.SH "C SPECIFICATION"
.HP \w'void\ glLinkProgram('u
.BI "void glLinkProgram(GLuint\ " "program" ");"
.SH "PARAMETERS"
.PP
\fIprogram\fR
.RS 4
Specifies tha handle of tha program object ta be linked\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglLinkProgram\fR
links tha program object specified by
\fIprogram\fR\&. If any shader objectz of type
\fBGL_VERTEX_SHADER\fR
are attached to
\fIprogram\fR, they is ghon be used ta create a executable dat will run on tha programmable vertex processor\&. If any shader objectz of type
\fBGL_GEOMETRY_SHADER\fR
are attached to
\fIprogram\fR, they is ghon be used ta create a executable dat will run on tha programmable geometry processor\&. If any shader objectz of type
\fBGL_FRAGMENT_SHADER\fR
are attached to
\fIprogram\fR, they is ghon be used ta create a executable dat will run on tha programmable fragment processor\&.
.PP
Da statuz of tha link operation is ghon be stored as part of tha program object\*(Aqs state\&. This value is ghon be set to
\fBGL_TRUE\fR
if tha program object was linked without errors n' is locked n loaded fo' use, and
\fBGL_FALSE\fR
otherwise\&. Well shiiiit, it can be queried by calling
\fBglGetProgram\fR()
with arguments
\fIprogram\fR
and
\fBGL_LINK_STATUS\fR\&.
.PP
As a result of a successful link operation, all actizzle user\-defined uniform variablez belongin to
\fIprogram\fR
will be initialized ta 0, n' each of tha program object\*(Aqs actizzle uniform variablez is ghon be assigned a location dat can be queried by calling
\fBglGetUniformLocation\fR()\& fo' realz. Also, any actizzle user\-defined attribute variablez dat aint been bound ta a generic vertex attribute index is ghon be bound ta one at dis time\&.
.PP
Linkin of a program object can fail fo' a fuckin shitload of reasons as specified up in the
\fIOpenGL Shadin Language Justification\fR\&. Da followin lists a shitload of tha conditions dat will cause a link error\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da number of actizzle attribute variablez supported by tha implementation has been exceeded\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da storage limit fo' uniform variablez has been exceeded\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da number of actizzle uniform variablez supported by tha implementation has been exceeded\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fBmain\fR
function is missin fo' tha vertex, geometry or fragment shader\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A varyin variable straight-up used up in tha fragment shader aint declared up in tha same way (or aint declared at all) up in tha vertex shader, or geometry shader shader if present\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A reference ta a gangbangin' function or variable name is unresolved\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A shared global is declared wit two different types or two different initial joints\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
One or mo' of tha attached shader objects has not been successfully compiled\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Bindin a generic attribute matrix caused some rowz of tha matrix ta fall outside tha allowed maximum of
\fBGL_MAX_VERTEX_ATTRIBS\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Not enough contiguous vertex attribute slots could be found ta bind attribute matrices\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da program object gotz nuff objects ta form a gangbangin' fragment shader but do not contain objects ta form a vertex shader\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da program object gotz nuff objects ta form a geometry shader but do not contain objects ta form a vertex shader\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da program object gotz nuff objects ta form a geometry shader n' tha input primitizzle type, output primitizzle type, or maximum output vertex count aint specified up in any compiled geometry shader object\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da program object gotz nuff objects ta form a geometry shader n' tha input primitizzle type, output primitizzle type, or maximum output vertex count is specified differently up in multiple geometry shader objects\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da number of actizzle outputs up in tha fragment shader is pimped outa than tha value of
\fBGL_MAX_DRAW_BUFFERS\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da program has a actizzle output assigned ta a location pimped outa than or equal ta tha value of
\fBGL_MAX_DUAL_SOURCE_DRAW_BUFFERS\fR
and has a actizzle output assigned a index pimped outa than or equal ta one\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Mo' than one varyin up variable is bound ta tha same number n' index\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da explicit bindin assigments do not leave enough space fo' tha linker ta automatically assign a location fo' a varyin up array, which requires multiple contiguous locations\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fIcount\fR
specified by
\fBglTransformFeedbackVaryings\fR()
is non\-zero yo, but tha program object has no vertex or geometry shader\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Any variable name specified to
\fBglTransformFeedbackVaryings\fR()
in the
\fIvaryings\fR
array aint declared as a output up in tha vertex shader (or tha geometry shader, if active)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Any two entries up in the
\fIvaryings\fR
array given
\fBglTransformFeedbackVaryings\fR()
specify tha same varyin variable\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da total number of components ta capture up in any transform feedback varyin variable is pimped outa than tha constant
\fBGL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS\fR
and tha buffer mode is
\fBSEPARATE_ATTRIBS\fR\&.
.RE
.PP
When a program object has been successfully linked, tha program object can be made part of current state by calling
\fBglUseProgram\fR()\&. Whether or not tha link operation was successful, tha program object\*(Aqs shiznit log is ghon be overwritten\&. Da shiznit log can be retrieved by calling
\fBglGetProgramInfoLog\fR()\&.
.PP
\fBglLinkProgram\fR
will also install tha generated executablez as part of tha current renderin state if tha link operation was successful n' tha specified program object be already currently up in use as a result of a previous call to
\fBglUseProgram\fR()\&. If tha program object currently up in use is relinked unsuccessfully, its link status is ghon be set to
\fBGL_FALSE\fR
 yo, but tha executablez n' associated state will remain part of tha current state until a subsequent call to
\fBglUseProgram\fR
removes it from use\& fo' realz. Afta it is removed from use, it cannot be made part of current state until it has been successfully relinked\&.
.PP
If
\fIprogram\fR
gotz nuff shader objectz of type
\fBGL_VERTEX_SHADER\fR, n' optionally of type
\fBGL_GEOMETRY_SHADER\fR yo, but do not contain shader objectz of type
\fBGL_FRAGMENT_SHADER\fR, tha vertex shader executable is ghon be installed on tha programmable vertex processor, tha geometry shader executable, if present, is ghon be installed on tha programmable geometry processor yo, but no executable is ghon be installed on tha fragment processor\&. Da thangs up in dis biatch of rasterizin primitives wit such a program is ghon be undefined\&.
.PP
Da program object\*(Aqs shiznit log is updated n' tha program is generated all up in tha time of tha link operation\& fo' realz. Afta tha link operation, applications is free ta modify attached shader objects, compile attached shader objects, detach shader objects, delete shader objects, n' attach additionizzle shader objects\&. None of these operations affects tha shiznit log or tha program dat is part of tha program object\&.
.SH "NOTES"
.PP
If tha link operation is unsuccessful, any shiznit on some previous link operation on
\fIprogram\fR
is lost (i\&.e\&., a gangbangin' failed link do not restore tha oldschool state of
\fIprogram\fR
)\&. Certain shiznit can still be retrieved from
\fIprogram\fR
even afta a unsuccessful link operation\&. Right back up in yo muthafuckin ass. See fo' instance
\fBglGetActiveAttrib\fR()
and
\fBglGetActiveUniform\fR()\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIprogram\fR
is not a value generated by OpenGL\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIprogram\fR
is not a program object\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIprogram\fR
is tha currently actizzle program object n' transform feedback mode be active\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with tha argument
\fBGL_CURRENT_PROGRAM\fR
.PP
\fBglGetActiveAttrib\fR()
with argument
\fIprogram\fR
and tha index of a actizzle attribute variable
.PP
\fBglGetActiveUniform\fR()
with argument
\fIprogram\fR
and tha index of a actizzle uniform variable
.PP
\fBglGetAttachedShaders\fR()
with argument
\fIprogram\fR
.PP
\fBglGetAttribLocation\fR()
with argument
\fIprogram\fR
and a attribute variable name
.PP
\fBglGetProgram\fR()
with arguments
\fIprogram\fR
and
\fBGL_LINK_STATUS\fR
.PP
\fBglGetProgramInfoLog\fR()
with argument
\fIprogram\fR
.PP
\fBglGetUniform\fR()
with argument
\fIprogram\fR
and a uniform variable location
.PP
\fBglGetUniformLocation\fR()
with argument
\fIprogram\fR
and a uniform variable name
.PP
\fBglIsProgram\fR()
.SH "SEE ALSO"
.PP
\fBglAttachShader\fR(),
\fBglBindAttribLocation\fR(),
\fBglCompileShader\fR(),
\fBglCreateProgram\fR(),
\fBglDeleteProgram\fR(),
\fBglDetachShader\fR(),
\fBglUniform\fR(),
\fBglUseProgram\fR(),
\fBglValidateProgram\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2005 3Dlabs Inc\&. Ltd\&. Copyright
\(co
2010 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
