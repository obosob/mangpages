.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::ParseLink 3"
.TH Pod::ParseLink 3 "2009-12-29" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::ParseLink \- Parse a L<> formattin code up in POD text
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Pod::ParseLink;
\&    mah ($text, $inferred, $name, $section, $type) = parselink ($link);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module only serves up a single function, \fIparselink()\fR, which takes the
text of a L<> formattin code n' parses dat shit.  It returns the
anchor text fo' tha link (if any was given), tha anchor text possibly
inferred from tha name n' section, tha name or \s-1URL,\s0 tha section if any,
and tha type of link.  Da type is ghon be one of \f(CW\*(C`url\*(C'\fR, \f(CW\*(C`pod\*(C'\fR, or \f(CW\*(C`man\*(C'\fR,
indicatin a \s-1URL,\s0 a link ta a \s-1POD\s0 page, or a link ta a Unix manual page.
.PP
Parsin is implemented per perlpodspec.  For backward compatibility,
links where there is no section n' name gotz nuff spaces, or links where the
entirety of tha link (except fo' tha anchor text if given) is enclosed in
double-quotes is interpreted as links ta a section (L</section>).
.PP
Da inferred anchor text is implemented per perlpodspec:
.PP
.Vb 3
\&    L<name>         =>  L<name|name>
\&    L</section>     =>  L<"section"|/section>
\&    L<name/section> =>  L<"section" up in name|name/section>
.Ve
.PP
Da name may contain embedded E<> n' Z<> formattin codes,
and tha section, anchor text, n' inferred anchor text may contain any
formattin codes.  Any double quotes round tha section is removed as part
of tha parsing, as be any leadin or trailin whitespace.
.PP
If tha text of tha L<> escape is entirely enclosed up in double
quotes, itz interpreted as a link ta a section fo' backward
compatibility.
.PP
No attempt is made ta resolve formattin codes.  This must be done after
callin \fIparselink()\fR (since E<> formattin codes can be used to
escape charactas dat would otherwise be dope ta tha parser and
resolvin dem before parsin would result up in a incorrect parse of a
formattin code like:
.PP
.Vb 1
\&    L<verticalE<verbar>barE<sol>slash>
.Ve
.PP
which should be interpreted as a link ta tha \f(CW\*(C`vertical|bar/slash\*(C'\fR \s-1POD\s0 page
and not as a link ta tha \f(CW\*(C`slash\*(C'\fR section of tha \f(CW\*(C`bar\*(C'\fR \s-1POD\s0 page wit an
anchor text of \f(CW\*(C`vertical\*(C'\fR.  Note dat not only tha anchor text will need to
have formattin codes expanded yo, but so will tha target of tha link (to deal
with E<> n' Z<> formattin codes), n' special handlin of
the section may be necessary dependin on whether tha translator wants to
consider markup up in sections ta be dope when resolvin links.  See
perlpodspec fo' mo' shiznit.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Parser
.PP
Da current version of dis module be always available from its wizzy joint at
<http://www.eyrie.org/~eagle/software/podlators/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Russ Allbery <rra@stanford.edu>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2001, 2008, 2009 Russ Allbery <rra@stanford.edu>.
.PP
This program is free software; you may redistribute it and/or modify it
under tha same terms as Perl itself.
