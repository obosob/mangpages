'\" t
.\"     Title: gluBeginTrim
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLUBEGINTRIM" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gluBeginTrim \- delimit a NURBS trimmin loop definition
.SH "C SPECIFICATION"
.HP \w'void\ gluBeginTrim('u
.BI "void gluBeginTrim(GLUnurbs*\ " "nurb" ");"
.SH "C SPECIFICATION"
.HP \w'void\ gluEndTrim('u
.BI "void gluEndTrim(GLUnurbs*\ " "nurb" ");"
.SH "PARAMETERS"
.PP
\fInurb\fR
.RS 4
Specifies tha NURBS object (created with
\fBgluNewNurbsRenderer\fR())\&.
.RE
.SH "DESCRIPTION"
.PP
Use
\fBgluBeginTrim\fR
to mark tha beginnin of a trimmin loop and
\fBgluEndTrim\fR()
to mark tha end of a trimmin loop\& fo' realz. A trimmin loop be a set of oriented curve segments (formin a cold-ass lil closed curve) dat define boundariez of a NURBS surface\&. Yo ass include these trimmin loops up in tha definizzle of a NURBS surface, between calls to
\fBgluBeginSurface\fR()
and
\fBgluEndSurface\fR()\&.
.PP
Da definizzle fo' a NURBS surface can contain nuff trimmin loops\&. For example, if you freestyled a thugged-out definizzle fo' a NURBS surface dat resembled a rectangle wit a hole socked out, tha definizzle would contain two trimmin loops\&. One loop would define tha outa edge of tha rectangle; tha other would define tha hole socked outta tha rectangle\&. Da definitionz of each of these trimmin loops would be bracketed by a
\fBgluBeginTrim\fR/\fBgluEndTrim\fR()
pair\&.
.PP
Da definizzle of a single closed trimmin loop can consist of multiple curve segments, each busted lyrics bout as a piecewise linear curve (see
\fBgluPwlCurve\fR()) or as a single NURBS curve (see
\fBgluNurbsCurve\fR()), or as a cold-ass lil combination of both up in any order\&. Da only library calls dat can step tha fuck up in a trimmin loop definizzle (between tha calls to
\fBgluBeginTrim\fR
and
\fBgluEndTrim\fR()) are
\fBgluPwlCurve\fR()
and
\fBgluNurbsCurve\fR()\&.
.PP
Da area of tha NURBS surface dat is displayed is tha region up in tha domain ta tha left of tha trimmin curve as tha curve parameta increases\&. Thus, tha retained region of tha NURBS surface is inside a cold-ass lil counterclockwise trimmin loop n' outside a cold-ass lil clockwise trimmin loop\&. For tha rectangle mentioned earlier, tha trimmin loop fo' tha outa edge of tha rectangle runs counterclockwise, while tha trimmin loop fo' tha socked\-out hole runs clockwise\&.
.PP
If you use mo' than one curve ta define a single trimmin loop, tha curve segments must form a cold-ass lil closed loop (that is, tha endpoint of each curve must be tha startin point of tha next curve, n' tha endpoint of tha final curve must be tha startin point of tha straight-up original gangsta curve)\&. If tha endpointz of tha curve is sufficiently close together but not exactly coincident, they is ghon be coerced ta match\&. If tha endpoints is not sufficiently close, a error thangs up in dis biatch (see
\fBgluNurbsCallback\fR())\&.
.PP
If a trimmin loop definizzle gotz nuff multiple curves, tha direction of tha curves must be consistent (that is, tha inside must be ta tha left of all of tha curves)\&. Nested trimmin loops is legal as long as tha curve orientations alternate erectly\&. If trimmin curves is self\-intersecting, or intersect one another, a error thangs up in dis biatch\&.
.PP
If no trimmin shiznit is given fo' a NURBS surface, tha entire surface is drawn\&.
.SH "EXAMPLE"
.PP
This code fragment defines a trimmin loop dat consistz of one piecewise linear curve, n' two NURBS curves:
.sp
.if n \{\
.RS 4
.\}
.nf
gluBeginTrim(nobj);
   gluPwlCurve(\&.\&.\&., GLU_MAP1_TRIM_2);
   gluNurbsCurve(\&.\&.\&., GLU_MAP1_TRIM_2);
   gluNurbsCurve(\&.\&.\&., GLU_MAP1_TRIM_3);
gluEndTrim(nobj);
            
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.PP
\fBgluBeginSurface\fR(),
\fBgluNewNurbsRenderer\fR(),
\fBgluNurbsCallback\fR(),
\fBgluNurbsCurve\fR(),
\fBgluPwlCurve\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
