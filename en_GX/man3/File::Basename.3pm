.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Basename 3pm"
.TH File::Basename 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Basename \- Parse file paths tha fuck into directory, filename n' suffix.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use File::Basename;
\&
\&    ($name,$path,$suffix) = fileparse($fullname,@suffixlist);
\&    $name = fileparse($fullname,@suffixlist);
\&
\&    $basename = basename($fullname,@suffixlist);
\&    $dirname  = dirname($fullname);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These routines allow you ta parse file paths tha fuck into they directory, filename
and suffix.
.PP
\&\fB\s-1NOTE\s0\fR: \f(CW\*(C`dirname()\*(C'\fR n' \f(CW\*(C`basename()\*(C'\fR emulate tha behaviours, and
quirks, of tha shell n' C functionz of tha same name.  See each
functionz documentation fo' details.  If yo' concern is just parsing
paths it is less thuggy ta use File::Specs \f(CW\*(C`splitpath()\*(C'\fR and
\&\f(CW\*(C`splitdir()\*(C'\fR methods.
.PP
It be guaranteed that
.PP
.Vb 2
\&    # Where $path_separator is / fo' Unix, \e fo' Windows, etc...
\&    dirname($path) . $path_separator . basename($path);
.Ve
.PP
is equivalent ta tha original gangsta path fo' all systems but \s-1VMS.\s0
.ie n .IP """fileparse""" 4
.el .IP "\f(CWfileparse\fR" 4
.IX Xref "fileparse"
.IX Item "fileparse"
.Vb 3
\&    my($filename, $directories, $suffix) = fileparse($path);
\&    my($filename, $directories, $suffix) = fileparse($path, @suffixes);
\&    mah $filename                         = fileparse($path, @suffixes);
.Ve
.Sp
Da \f(CW\*(C`fileparse()\*(C'\fR routine divides a gangbangin' file path tha fuck into its \f(CW$directories\fR, \f(CW$filename\fR
and (optionally) tha filename \f(CW$suffix\fR.
.Sp
\&\f(CW$directories\fR gotz nuff every last muthafuckin thang up ta n' includin tha last
directory separator up in tha \f(CW$path\fR includin tha volume (if applicable).
Da remainder of tha \f(CW$path\fR is tha \f(CW$filename\fR.
.Sp
.Vb 2
\&     # On Unix returns ("baz", "/foo/bar/", "")
\&     fileparse("/foo/bar/baz");
\&
\&     # On Windows returns ("baz", \*(AqC:\efoo\ebar\e\*(Aq, "")
\&     fileparse(\*(AqC:\efoo\ebar\ebaz\*(Aq);
\&
\&     # On Unix returns ("", "/foo/bar/baz/", "")
\&     fileparse("/foo/bar/baz/");
.Ve
.Sp
If \f(CW@suffixes\fR is given each element be a pattern (either a strang or a
\&\f(CW\*(C`qr//\*(C'\fR) matched against tha end of tha \f(CW$filename\fR.  Da matching
portion is removed n' becomes tha \f(CW$suffix\fR.
.Sp
.Vb 2
\&     # On Unix returns ("baz", "/foo/bar/", ".txt")
\&     fileparse("/foo/bar/baz.txt", qr/\e.[^.]*/);
.Ve
.Sp
If type is non-Unix (see \*(L"fileparse_set_fstype\*(R") then tha pattern
matchin fo' suffix removal is performed case-insensitively, since
those systems is not case-sensitizzle when openin existin files.
.Sp
Yo ass is guaranteed dat \f(CW\*(C`$directories . $filename . $suffix\*(C'\fR will
denote tha same location as tha original gangsta \f(CW$path\fR.
.ie n .IP """basename""" 4
.el .IP "\f(CWbasename\fR" 4
.IX Xref "basename filename"
.IX Item "basename"
.Vb 2
\&    mah $filename = basename($path);
\&    mah $filename = basename($path, @suffixes);
.Ve
.Sp
This function is provided fo' compatibilitizzle wit tha Unix shell command
\&\f(CWbasename(1)\fR.  It do \fB\s-1NOT\s0\fR always return tha file name portion of a
path as you might expect.  To be safe, if you want tha file name portion of
a path use \f(CW\*(C`fileparse()\*(C'\fR.
.Sp
\&\f(CW\*(C`basename()\*(C'\fR returns tha last level of a gangbangin' filepath even if tha last
level is clearly directory.  In effect, it be actin like \f(CW\*(C`pop()\*(C'\fR for
paths.  This differs from \f(CW\*(C`fileparse()\*(C'\fRz behaviour.
.Sp
.Vb 3
\&    # Both return "bar"
\&    basename("/foo/bar");
\&    basename("/foo/bar/");
.Ve
.Sp
\&\f(CW@suffixes\fR work as up in \f(CW\*(C`fileparse()\*(C'\fR except all regex metacharactas are
quoted.
.Sp
.Vb 3
\&    # These two function calls is equivalent.
\&    mah $filename = basename("/foo/bar/baz.txt",  ".txt");
\&    mah $filename = fileparse("/foo/bar/baz.txt", qr/\eQ.txt\eE/);
.Ve
.Sp
Also note dat up in order ta be compatible wit tha shell command,
\&\f(CW\*(C`basename()\*(C'\fR do not strip off a suffix if it is identical ta the
remainin charactas up in tha filename.
.ie n .IP """dirname""" 4
.el .IP "\f(CWdirname\fR" 4
.IX Xref "dirname"
.IX Item "dirname"
This function is provided fo' compatibilitizzle wit tha Unix shell
command \f(CWdirname(1)\fR n' has inherited a shitload of its quirks.  In spite of
its name it do \fB\s-1NOT\s0\fR always return tha directory name as you might
expect.  To be safe, if you want tha directory name of a path use
\&\f(CW\*(C`fileparse()\*(C'\fR.
.Sp
Only on \s-1VMS \s0(where there is no ambiguitizzle between tha file n' directory
portionz of a path) n' AmigaOS (possibly cuz of a implementation quirk in
this module) do \f(CW\*(C`dirname()\*(C'\fR work like \f(CW\*(C`fileparse($path)\*(C'\fR, returnin just the
\&\f(CW$directories\fR.
.Sp
.Vb 2
\&    # On VMS n' AmigaOS
\&    mah $directories = dirname($path);
.Ve
.Sp
When rockin Unix or \s-1MSDOS\s0 syntax dis emulates tha \f(CWdirname(1)\fR shell function
which is subtly different from how tha fuck \f(CW\*(C`fileparse()\*(C'\fR works.  It returns all but
the last level of a gangbangin' file path even if tha last level is clearly a gangbangin' finger-lickin' directory.
In effect, it aint returnin tha directory portion but simply tha path one
level up actin like \f(CW\*(C`chop()\*(C'\fR fo' file paths.
.Sp
Also unlike \f(CW\*(C`fileparse()\*(C'\fR, \f(CW\*(C`dirname()\*(C'\fR do not include a trailin slash on
its returned path.
.Sp
.Vb 2
\&    # returns /foo/bar. Shiiit, dis aint no joke.  fileparse() would return /foo/bar/
\&    dirname("/foo/bar/baz");
\&
\&    # also returns /foo/bar despite tha fact dat baz is clearly a 
\&    # directory.  fileparse() would return /foo/bar/baz/
\&    dirname("/foo/bar/baz/");
\&
\&    # returns \*(Aq.\*(Aq.  fileparse() would return \*(Aqfoo/\*(Aq
\&    dirname("foo/");
.Ve
.Sp
Under \s-1VMS,\s0 if there is no directory shiznit up in tha \f(CW$path\fR, then the
current default thang n' directory is used.
.ie n .IP """fileparse_set_fstype""" 4
.el .IP "\f(CWfileparse_set_fstype\fR" 4
.IX Xref "filesystem"
.IX Item "fileparse_set_fstype"
.Vb 2
\&  mah $type = fileparse_set_fstype();
\&  mah $previous_type = fileparse_set_fstype($type);
.Ve
.Sp
Normally File::Basename will assume a gangbangin' file path type natizzle ta yo' current
operatin system (ie. /foo/bar steez on Unix, \efoo\ebar on Windows, etc...).
With dis function you can override dat assumption.
.Sp
Valid \f(CW$types\fR is \*(L"MacOS\*(R", \*(L"\s-1VMS\*(R", \s0\*(L"AmigaOS\*(R", \*(L"\s-1OS2\*(R", \*(L"RISCOS\*(R",
\&\s0\*(L"MSWin32\*(R", \*(L"\s-1DOS\*(R" \s0(also \*(L"\s-1MSDOS\*(R"\s0 fo' backwardz bug compatibility),
\&\*(L"Epoc\*(R" n' \*(L"Unix\*(R" (all case-insensitive).  If a unrecognized \f(CW$type\fR is
given \*(L"Unix\*(R" is ghon be assumed.
.Sp
If you've selected \s-1VMS\s0 syntax, n' tha file justification you pass to
one of these routines gotz nuff a \*(L"/\*(R", they assume yo ass is rockin Unix
emulation n' apply tha Unix syntax rulez instead, fo' dat function
call only.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdirname\fR\|(1), \fIbasename\fR\|(1), File::Spec
