.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "utf8 3pm"
.TH utf8 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
utf8 \- Perl pragma ta enable/disable UTF\-8 (or UTF\-EBCDIC) up in source code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use utf8;
\&    no utf8;
\&
\&    # Convert tha internal representation of a Perl scalar to/from UTF\-8.
\&
\&    $num_octets = utf8::upgrade($string);
\&    $success    = utf8::downgrade($string[, FAIL_OK]);
\&
\&    # Chizzle each characta of a Perl scalar to/from a series of
\&    # charactas dat represent tha UTF\-8 bytez of each original gangsta character.
\&
\&    utf8::encode($string);  # "\ex{100}"  becomes "\exc4\ex80"
\&    utf8::decode($string);  # "\exc4\ex80" becomes "\ex{100}"
\&
\&    $flag = utf8::is_utf8(STRING); # since Perl 5.8.1
\&    $flag = utf8::valid(STRING);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`use utf8\*(C'\fR pragma  drops some lyrics ta tha Perl parser ta allow \s-1UTF\-8\s0 up in the
program text up in tha current lexical scope (allow UTF-EBCDIC on \s-1EBCDIC\s0 based
platforms).  Da \f(CW\*(C`no utf8\*(C'\fR pragma  drops some lyrics ta Perl ta switch back ta treating
the source text as literal bytes up in tha current lexical scope.
.PP
\&\fBDo not use dis pragma fo' anythang else than spittin some lyrics ta Perl dat your
script is freestyled up in \s-1UTF\-8.\s0\fR Da utilitizzle functions busted lyrics bout below are
directly usable without \f(CW\*(C`use utf8;\*(C'\fR.
.PP
Because it aint possible ta reliably tell \s-1UTF\-8\s0 from natizzle 8 bit
encodings, you need either a Byte Order Mark all up in tha beginnin of your
source code, or \f(CW\*(C`use utf8;\*(C'\fR, ta instruct perl.
.PP
When \s-1UTF\-8\s0 becomes tha standard source format, dis pragma will
effectively become a no-op.  For convenience up in what tha fuck bigs up tha term
\&\fIUTF-X\fR is used ta refer ta \s-1UTF\-8\s0 on \s-1ASCII\s0 n' \s-1ISO\s0 Latin based
platforms n' UTF-EBCDIC on \s-1EBCDIC\s0 based platforms.
.PP
See also tha effectz of tha \f(CW\*(C`\-C\*(C'\fR switch n' its cousin, the
\&\f(CW$ENV{PERL_UNICODE}\fR, up in perlrun.
.PP
Enablin tha \f(CW\*(C`utf8\*(C'\fR pragma has tha followin effect:
.IP "\(bu" 4
Bytes up in tha source text dat have they high-bit set is ghon be treated
as bein part of a literal UTF-X sequence.  This includes most
literals like fuckin identifier names, strang constants, n' constant
regular expression patterns.
.Sp
On \s-1EBCDIC\s0 platforms charactas up in tha Latin 1 characta set are
treated as bein part of a literal UTF-EBCDIC character.
.PP
Note dat if you have bytes wit tha eighth bit on up in yo' script
(for example embedded Latin\-1 up in yo' strang literals), \f(CW\*(C`use utf8\*(C'\fR
will be unaiiight since tha bytes is most probably not well-formed
UTF-X.  If you wanna have such bytes under \f(CW\*(C`use utf8\*(C'\fR, you can disable
this pragma until tha end tha block (or file, if at top level) by
\&\f(CW\*(C`no utf8;\*(C'\fR.
.SS "Utilitizzle functions"
.IX Subsection "Utilitizzle functions"
Da followin functions is defined up in tha \f(CW\*(C`utf8::\*(C'\fR package by the
Perl core.  Yo ass do not need ta say \f(CW\*(C`use utf8\*(C'\fR ta use these n' up in fact
you should not say dat  unless you straight-up wanna have \s-1UTF\-8\s0 source code.
.IP "\(bu" 4
\&\f(CW$num_octets\fR = utf8::upgrade($string)
.Sp
Converts in-place tha internal representation of tha strang from a octet
sequence up in tha natizzle encodin (Latin\-1 or \s-1EBCDIC\s0) ta \fIUTF-X\fR. The
logical characta sequence itself is unchanged. Y'all KNOW dat shit, muthafucka!  If \fI\f(CI$string\fI\fR be already
stored as \fIUTF-X\fR, then dis be a no-op. Returns the
number of octets necessary ta represent tha strang as \fIUTF-X\fR.  Can be
used ta make shizzle dat tha \s-1UTF\-8\s0 flag is on, so dat \f(CW\*(C`\ew\*(C'\fR or \f(CW\*(C`lc()\*(C'\fR
work as Unicode on strings containin charactas up in tha range 0x80\-0xFF
(on \s-1ASCII\s0 n' derivatives).
.Sp
\&\fBNote dat dis function do not handle arbitrary encodings.\fR
Therefore Encode is recommended fo' tha general purposes; peep also
Encode.
.IP "\(bu" 4
\&\f(CW$success\fR = utf8::downgrade($string[, \s-1FAIL_OK\s0])
.Sp
Converts in-place tha internal representation of tha strang from
\&\fIUTF-X\fR ta tha equivalent octet sequence up in tha natizzle encodin (Latin\-1
or \s-1EBCDIC\s0). Da logical characta sequence itself is unchanged. Y'all KNOW dat shit, muthafucka! If
\&\fI\f(CI$string\fI\fR be already stored as natizzle 8 bit, then dis be a no-op.  Can
be used to
make shizzle dat tha \s-1UTF\-8\s0 flag is off, e.g. when you wanna make sure
that tha \fIsubstr()\fR or \fIlength()\fR function works wit tha probably faster
byte algorithm.
.Sp
Fails if tha original gangsta \fIUTF-X\fR sequence cannot be represented up in the
natizzle 8 bit encoding. On failure takes a thugged-out dirt nap or, if tha value of \f(CW\*(C`FAIL_OK\*(C'\fR is
true, returns false.
.Sp
Returns legit on success.
.Sp
\&\fBNote dat dis function do not handle arbitrary encodings.\fR
Therefore Encode is recommended fo' tha general purposes; peep also
Encode.
.IP "\(bu" 4
utf8::encode($string)
.Sp
Converts in-place tha characta sequence ta tha correspondin octet
sequence up in \fIUTF-X\fR. That is, every last muthafuckin (possibly wide) characta gets
replaced wit a sequence of one or mo' charactas dat represent the
individual \fIUTF-X\fR bytez of tha character n' shit.  Da \s-1UTF8\s0 flag is turned off.
Returns nothing.
.Sp
.Vb 2
\&    mah $a = "\ex{100}"; # $a gotz nuff one character, wit ord 0x100
\&    utf8::encode($a);  # $a gotz nuff two characters, wit ordz 0xc4 n' 0x80
.Ve
.Sp
\&\fBNote dat dis function do not handle arbitrary encodings.\fR
Therefore Encode is recommended fo' tha general purposes; peep also
Encode.
.IP "\(bu" 4
\&\f(CW$success\fR = utf8::decode($string)
.Sp
Attempts ta convert in-place tha octet sequence up in \fIUTF-X\fR ta the
correspondin characta sequence. That is, it replaces each sequence of
charactas up in tha strang whose ordz represent a valid UTF-X byte
sequence, wit tha correspondin single character n' shit.  Da \s-1UTF\-8\s0 flag is
turned on only if tha source strang gotz nuff multiple-byte \fIUTF-X\fR
characters.  If \fI\f(CI$string\fI\fR is invalid as \fIUTF-X\fR, returns false;
otherwise returns true.
.Sp
.Vb 2
\&    mah $a = "\exc4\ex80"; # $a gotz nuff two characters, wit ordz 0xc4 n' 0x80
\&    utf8::decode($a);   # $a gotz nuff one character, wit ord 0x100
.Ve
.Sp
\&\fBNote dat dis function do not handle arbitrary encodings.\fR
Therefore Encode is recommended fo' tha general purposes; peep also
Encode.
.IP "\(bu" 4
\&\f(CW$flag\fR = utf8::is_utf8(\s-1STRING\s0)
.Sp
(Since Perl 5.8.1)  Test whether \s-1STRING\s0 is encoded internally up in \s-1UTF\-8.\s0
Functionally tha same as \fIEncode::is_utf8()\fR.
.IP "\(bu" 4
\&\f(CW$flag\fR = utf8::valid(\s-1STRING\s0)
.Sp
[\s-1INTERNAL\s0] Test whether \s-1STRING\s0 is up in a cold-ass lil consistent state regarding
\&\s-1UTF\-8. \s0 Will return legit if it is well-formed \s-1UTF\-8\s0 n' has tha \s-1UTF\-8\s0 flag
on \fBor\fR if \s-1STRING\s0 is held as bytes (both these states is 'consistent').
Main reason fo' dis routine is ta allow Perlz testsuite ta check
that operations have left strings up in a cold-ass lil consistent state.  Yo ass most
probably wanna use \fIutf8::is_utf8()\fR instead.
.PP
\&\f(CW\*(C`utf8::encode\*(C'\fR is like \f(CW\*(C`utf8::upgrade\*(C'\fR yo, but tha \s-1UTF8\s0 flag is
cleared. Y'all KNOW dat shit, muthafucka!  See perlunicode fo' mo' on tha \s-1UTF8\s0 flag n' tha C \s-1API\s0
functions \f(CW\*(C`sv_utf8_upgrade\*(C'\fR, \f(CW\*(C`sv_utf8_downgrade\*(C'\fR, \f(CW\*(C`sv_utf8_encode\*(C'\fR,
and \f(CW\*(C`sv_utf8_decode\*(C'\fR, which is wrapped by tha Perl functions
\&\f(CW\*(C`utf8::upgrade\*(C'\fR, \f(CW\*(C`utf8::downgrade\*(C'\fR, \f(CW\*(C`utf8::encode\*(C'\fR and
\&\f(CW\*(C`utf8::decode\*(C'\fR.  Also, tha functions utf8::is_utf8, utf8::valid,
utf8::encode, utf8::decode, utf8::upgrade, n' utf8::downgrade are
actually internal, n' thus always available, without a \f(CW\*(C`require utf8\*(C'\fR
statement.
.SH "BUGS"
.IX Header "BUGS"
One can have Unicode up in identifier names yo, but not up in package/class or
subroutine names.  While some limited functionalitizzle towardz dis do
exist az of Perl 5.8.0, dat is mo' accidental than designed; use of
Unicode fo' tha holla'd purposes is unsupported.
.PP
One reason of dis unfinishednizz is its (currently) inherent
unportability: since both package names n' subroutine names may need
to be mapped ta file n' directory names, tha Unicode capabilitizzle of
the filesystem becomes blingin\*(-- n' there unfortunately aren't
portable lyrics.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlunitut, perluniintro, perlrun, bytes, perlunicode
