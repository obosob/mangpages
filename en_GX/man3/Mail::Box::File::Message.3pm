.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::File::Message 3"
.TH Mail::Box::File::Message 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::File::Message \- one message up in a Mbox folder
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::File::Message
\&   be a Mail::Box::Message
\&   be a Mail::Message
\&   be a Mail::Reporter
\&
\& Mail::Box::File::Message is extended by
\&   Mail::Box::Dbx::Message
\&   Mail::Box::Mbox::Message
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& mah $folda  = freshly smoked up Mail::Box::File folda => $ENV{MAIL}, ...;
\& mah $message = $folder\->message(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Maintain one message up in a file based folder, any Mail::Box::File
extension.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBclone\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->clone(OPTIONS)"
See \*(L"Constructors\*(R" up in Mail::Message
.IP "Mail::Box::File::Message\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::File::Message->new(OPTIONS)"
Lyrics up in file-based foldaz use tha followin options fo' creation:
.Sp
.Vb 10
\& \-Option    \-\-Defined up in        \-\-Default
\&  body        Mail::Message       undef
\&  body_type   Mail::Box::Message  <from folder>
\&  deleted     Mail::Message       <false>
\&  field_type  Mail::Message       undef
\&  folda      Mail::Box::Message  <required>
\&  from_line                       undef
\&  head        Mail::Message       undef
\&  head_type   Mail::Message       Mail::Message::Head::Complete
\&  labels      Mail::Message       {}
\&  log         Mail::Reporta      \*(AqWARNINGS\*(Aq
\&  messageId   Mail::Message       undef
\&  modified    Mail::Message       <false>
\&  size        Mail::Box::Message  undef
\&  trace       Mail::Reporta      \*(AqWARNINGS\*(Aq
\&  trusted     Mail::Message       <false>
.Ve
.RS 4
.IP "body => \s-1OBJECT\s0" 2
.IX Item "body => OBJECT"
.PD 0
.IP "body_type => CODE|CLASS" 2
.IX Item "body_type => CODE|CLASS"
.IP "deleted => \s-1BOOLEAN\s0" 2
.IX Item "deleted => BOOLEAN"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "folda => \s-1FOLDER\s0" 2
.IX Item "folda => FOLDER"
.IP "from_line => \s-1STRING\s0" 2
.IX Item "from_line => STRING"
.PD
Da line which begins each message up in tha file. Right back up in yo muthafuckin ass. Some playas detest
this line yo, but dis is just how tha fuck thangs was invented...
.IP "head => \s-1OBJECT\s0" 2
.IX Item "head => OBJECT"
.PD 0
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "labels => ARRAY|HASH" 2
.IX Item "labels => ARRAY|HASH"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "messageId => \s-1STRING\s0" 2
.IX Item "messageId => STRING"
.IP "modified => \s-1BOOLEAN\s0" 2
.IX Item "modified => BOOLEAN"
.IP "size => \s-1INTEGER\s0" 2
.IX Item "size => INTEGER"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.RE
.RS 4
.RE
.PD
.SS "Constructin a message"
.IX Subsection "Constructin a message"
.ie n .IP "$obj\->\fBbounce\fR([RG\-OBJECT|OPTIONS])" 4
.el .IP "\f(CW$obj\fR\->\fBbounce\fR([RG\-OBJECT|OPTIONS])" 4
.IX Item "$obj->bounce([RG-OBJECT|OPTIONS])"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Bounce
.IP "Mail::Box::File::Message\->\fBbuild\fR([MESSAGE|PART|BODY], \s-1CONTENT\s0)" 4
.IX Item "Mail::Box::File::Message->build([MESSAGE|PART|BODY], CONTENT)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Build
.IP "Mail::Box::File::Message\->\fBbuildFromBody\fR(\s-1BODY,\s0 [\s-1HEAD\s0], \s-1HEADERS\s0)" 4
.IX Item "Mail::Box::File::Message->buildFromBody(BODY, [HEAD], HEADERS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Build
.ie n .IP "$obj\->\fBforward\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforward\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forward(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardAttach\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardAttach\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardAttach(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardEncapsulate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardEncapsulate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardEncapsulate(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardInline\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardInline\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardInline(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardNo\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardNo\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->forwardNo(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardPostlude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPostlude\fR()" 4
.IX Item "$obj->forwardPostlude()"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardPrelude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPrelude\fR()" 4
.IX Item "$obj->forwardPrelude()"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->forwardSubject(STRING)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Forward
.IP "Mail::Box::File::Message\->\fBread\fR(FILEHANDLE|SCALAR|REF\-SCALAR|ARRAY\-OF\-LINES, \s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::File::Message->read(FILEHANDLE|SCALAR|REF-SCALAR|ARRAY-OF-LINES, OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Read
.ie n .IP "$obj\->\fBrebuild\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBrebuild\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->rebuild(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Rebuild
.ie n .IP "$obj\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreply\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->reply(OPTIONS)"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Reply
.ie n .IP "$obj\->\fBreplyPrelude\fR([STRING|FIELD|ADDRESS|ARRAY\-OF\-THINGS])" 4
.el .IP "\f(CW$obj\fR\->\fBreplyPrelude\fR([STRING|FIELD|ADDRESS|ARRAY\-OF\-THINGS])" 4
.IX Item "$obj->replyPrelude([STRING|FIELD|ADDRESS|ARRAY-OF-THINGS])"
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Reply
.ie n .IP "$obj\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->replySubject(STRING)"
.PD 0
.IP "Mail::Box::File::Message\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "Mail::Box::File::Message->replySubject(STRING)"
.PD
See \*(L"Constructin a message\*(R" up in Mail::Message::Construct::Reply
.SS "Da message"
.IX Subsection "Da message"
.ie n .IP "$obj\->\fBcontainer\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcontainer\fR()" 4
.IX Item "$obj->container()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->copyTo(FOLDER, OPTIONS)"
See \*(L"Da message\*(R" up in Mail::Box::Message
.ie n .IP "$obj\->\fBescapedBody\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBescapedBody\fR()" 4
.IX Item "$obj->escapedBody()"
Mbox foldaz contain multiple lyrics up in one file, rockin a separator
line ta keep dem apart.  Typically, these lines start wit \*(L"From \*(R".
Lines within tha message could interfere wit dis separator, n' should
therefore be translated.
.Sp
This method will return tha escaped text of tha body as reference.
.ie n .IP "$obj\->\fBfolder\fR([\s-1FOLDER\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR([\s-1FOLDER\s0])" 4
.IX Item "$obj->folder([FOLDER])"
See \*(L"Da message\*(R" up in Mail::Box::Message
.ie n .IP "$obj\->\fBfromLine\fR([\s-1LINE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfromLine\fR([\s-1LINE\s0])" 4
.IX Item "$obj->fromLine([LINE])"
Many playas detest file-style foldaz cuz they store lyrics all in
one file, where a line startin wit \f(CW\*(C`From \*(C'\fR leadz tha header n' shit.  If we
receive a message from a gangbangin' file-based folder, we store dat line.  If we write
to such a gangbangin' file yo, but there is no such line stored, then we try ta generate
one.
.Sp
If \s-1LINE\s0 is provided, then tha startin line is set ta dis value.
.ie n .IP "$obj\->\fBisDummy\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDummy\fR()" 4
.IX Item "$obj->isDummy()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisPart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisPart\fR()" 4
.IX Item "$obj->isPart()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBmessageId\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR()" 4
.IX Item "$obj->messageId()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBmoveTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmoveTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->moveTo(FOLDER, OPTIONS)"
See \*(L"Da message\*(R" up in Mail::Box::Message
.ie n .IP "$obj\->\fBpartNumber\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBpartNumber\fR()" 4
.IX Item "$obj->partNumber()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print([FILEHANDLE])"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBsend\fR([\s-1MAILER\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR([\s-1MAILER\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->send([MAILER], OPTIONS)"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBseqnr\fR([\s-1INTEGER\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBseqnr\fR([\s-1INTEGER\s0])" 4
.IX Item "$obj->seqnr([INTEGER])"
See \*(L"Da message\*(R" up in Mail::Box::Message
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtoplevel\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtoplevel\fR()" 4
.IX Item "$obj->toplevel()"
See \*(L"Da message\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBwrite\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->write([FILEHANDLE])"
Write one message ta a gangbangin' file handle.  It be tha message includin the
leadin 'From ' line n' trailin blank.  Da From-line may interfere
with lines up in tha body: dem lines is escaped wit a extra '>'.
.Sp
example:
.Sp
.Vb 3
\& $msg\->write(\e*FILE);    # print tha message wit encaps ta FILE
\& $msg\->write;            # message wit encaps ta selected filehandle
\& $msg\->print(\e*FILE);    # tha message without encaps.
.Ve
.SS "Da header"
.IX Subsection "Da header"
.ie n .IP "$obj\->\fBbcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbcc\fR()" 4
.IX Item "$obj->bcc()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcc\fR()" 4
.IX Item "$obj->cc()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdate\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdate\fR()" 4
.IX Item "$obj->date()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdestinations\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR()" 4
.IX Item "$obj->destinations()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBfrom\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR()" 4
.IX Item "$obj->from()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBget\fR(\s-1FIELDNAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR(\s-1FIELDNAME\s0)" 4
.IX Item "$obj->get(FIELDNAME)"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBguessTimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBguessTimestamp\fR()" 4
.IX Item "$obj->guessTimestamp()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBhead\fR([\s-1HEAD\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR([\s-1HEAD\s0])" 4
.IX Item "$obj->head([HEAD])"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBnrLines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnrLines\fR()" 4
.IX Item "$obj->nrLines()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBsender\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsender\fR()" 4
.IX Item "$obj->sender()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBstudy\fR(\s-1FIELDNAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstudy\fR(\s-1FIELDNAME\s0)" 4
.IX Item "$obj->study(FIELDNAME)"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBsubject\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsubject\fR()" 4
.IX Item "$obj->subject()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtimestamp\fR()" 4
.IX Item "$obj->timestamp()"
See \*(L"Da header\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBto\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBto\fR()" 4
.IX Item "$obj->to()"
See \*(L"Da header\*(R" up in Mail::Message
.SS "Da body"
.IX Subsection "Da body"
.ie n .IP "$obj\->\fBbody\fR([\s-1BODY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR([\s-1BODY\s0])" 4
.IX Item "$obj->body([BODY])"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBcontentType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcontentType\fR()" 4
.IX Item "$obj->contentType()"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdecoded\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdecoded\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->decoded(OPTIONS)"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBencode\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->encode(OPTIONS)"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisMultipart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisMultipart\fR()" 4
.IX Item "$obj->isMultipart()"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisNested\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisNested\fR()" 4
.IX Item "$obj->isNested()"
See \*(L"Da body\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBparts\fR(['\s-1ALL\s0'|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|'\s-1RECURSE\s0'|FILTER])" 4
.el .IP "\f(CW$obj\fR\->\fBparts\fR(['\s-1ALL\s0'|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|'\s-1RECURSE\s0'|FILTER])" 4
.IX Item "$obj->parts(['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER])"
See \*(L"Da body\*(R" up in Mail::Message
.SS "Flags"
.IX Subsection "Flags"
.ie n .IP "$obj\->\fBdelete\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR()" 4
.IX Item "$obj->delete()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdeleted\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdeleted\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->deleted([BOOLEAN])"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisDeleted\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDeleted\fR()" 4
.IX Item "$obj->isDeleted()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBlabel\fR(LABEL|PAIRS)" 4
.el .IP "\f(CW$obj\fR\->\fBlabel\fR(LABEL|PAIRS)" 4
.IX Item "$obj->label(LABEL|PAIRS)"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBlabels\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlabels\fR()" 4
.IX Item "$obj->labels()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBlabelsToStatus\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlabelsToStatus\fR()" 4
.IX Item "$obj->labelsToStatus()"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->modified([BOOLEAN])"
See \*(L"Flags\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBstatusToLabels\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstatusToLabels\fR()" 4
.IX Item "$obj->statusToLabels()"
See \*(L"Flags\*(R" up in Mail::Message
.SS "Da whole message as text"
.IX Subsection "Da whole message as text"
.ie n .IP "$obj\->\fBfile\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfile\fR()" 4
.IX Item "$obj->file()"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBlines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlines\fR()" 4
.IX Item "$obj->lines()"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBprintStructure\fR([FILEHANDLE|undef],[\s-1INDENT\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprintStructure\fR([FILEHANDLE|undef],[\s-1INDENT\s0])" 4
.IX Item "$obj->printStructure([FILEHANDLE|undef],[INDENT])"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBstring\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR()" 4
.IX Item "$obj->string()"
See \*(L"Da whole message as text\*(R" up in Mail::Message::Construct::Text
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBclonedFrom\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclonedFrom\fR()" 4
.IX Item "$obj->clonedFrom()"
See \*(L"Internals\*(R" up in Mail::Message
.IP "Mail::Box::File::Message\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "Mail::Box::File::Message->coerce(MESSAGE, OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdiskDelete\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdiskDelete\fR()" 4
.IX Item "$obj->diskDelete()"
See \*(L"Internals\*(R" up in Mail::Box::Message
.ie n .IP "$obj\->\fBfileLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfileLocation\fR()" 4
.IX Item "$obj->fileLocation()"
Returns tha location of tha whole message includin tha from-line.  In
\&\s-1LIST\s0 context, both begin n' end is returned. Y'all KNOW dat shit, muthafucka!  In \s-1SCALAR\s0 context, only
the begin is passed back.
.ie n .IP "$obj\->\fBisDelayed\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDelayed\fR()" 4
.IX Item "$obj->isDelayed()"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBloadBody\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBloadBody\fR()" 4
.IX Item "$obj->loadBody()"
.PD 0
.ie n .IP "$obj\->\fBmoveLocation\fR(\s-1DISTANCE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmoveLocation\fR(\s-1DISTANCE\s0)" 4
.IX Item "$obj->moveLocation(DISTANCE)"
.PD
Da message is relocated up in tha file, bein moved over \s-1DISTANCE\s0 bytes.
Settin a freshly smoked up location will update tha accordin shiznit up in tha header
and body.
.ie n .IP "$obj\->\fBreadBody\fR(\s-1PARSER, HEAD\s0 [, \s-1BODYTYPE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreadBody\fR(\s-1PARSER, HEAD\s0 [, \s-1BODYTYPE\s0])" 4
.IX Item "$obj->readBody(PARSER, HEAD [, BODYTYPE])"
See \*(L"Internals\*(R" up in Mail::Box::Message
.ie n .IP "$obj\->\fBreadFromParser\fR(\s-1PARSER\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreadFromParser\fR(\s-1PARSER\s0)" 4
.IX Item "$obj->readFromParser(PARSER)"
Read one message from a Mail::Box::File based folder, includin the
leadin message separator.
.ie n .IP "$obj\->\fBreadHead\fR(\s-1PARSER\s0 [,CLASS])" 4
.el .IP "\f(CW$obj\fR\->\fBreadHead\fR(\s-1PARSER\s0 [,CLASS])" 4
.IX Item "$obj->readHead(PARSER [,CLASS])"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBrecursiveRebuildPart\fR(\s-1PART, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBrecursiveRebuildPart\fR(\s-1PART, OPTIONS\s0)" 4
.IX Item "$obj->recursiveRebuildPart(PART, OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Message::Construct::Rebuild
.ie n .IP "$obj\->\fBstoreBody\fR(\s-1BODY\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreBody\fR(\s-1BODY\s0)" 4
.IX Item "$obj->storeBody(BODY)"
See \*(L"Internals\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtakeMessageId\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtakeMessageId\fR([\s-1STRING\s0])" 4
.IX Item "$obj->takeMessageId([STRING])"
See \*(L"Internals\*(R" up in Mail::Message
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"\s-1METHODS\*(R"\s0 up in Mail::Message::Construct
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::File::Message\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::File::Message->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::File::Message\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::File::Message->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::File::Message\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::File::Message->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBshortSize\fR([\s-1VALUE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBshortSize\fR([\s-1VALUE\s0])" 4
.IX Item "$obj->shortSize([VALUE])"
.PD 0
.IP "Mail::Box::File::Message\->\fBshortSize\fR([\s-1VALUE\s0])" 4
.IX Item "Mail::Box::File::Message->shortSize([VALUE])"
.PD
See \*(L"Error handling\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBshortString\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBshortString\fR()" 4
.IX Item "$obj->shortString()"
See \*(L"Error handling\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Message
.ie n .IP "$obj\->\fBdestruct\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdestruct\fR()" 4
.IX Item "$obj->destruct()"
See \*(L"Cleanup\*(R" up in Mail::Box::Message
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot coerce a $class object tha fuck into a $class object" 4
.el .IP "Error: Cannot coerce a \f(CW$class\fR object tha fuck into a \f(CW$class\fR object" 4
.IX Item "Error: Cannot coerce a $class object tha fuck into a $class object"
.PD 0
.ie n .IP "Error: Cannot include forward source as $include." 4
.el .IP "Error: Cannot include forward source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include forward source as $include."
.PD
Unknown alternatizzle fo' tha forward(include).  Valid chizzlez are
\&\f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, \f(CW\*(C`ATTACH\*(C'\fR, n' \f(CW\*(C`ENCAPSULATE\*(C'\fR.
.ie n .IP "Error: Cannot include reply source as $include." 4
.el .IP "Error: Cannot include reply source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include reply source as $include."
Unknown alternatizzle fo' tha \f(CW\*(C`include\*(C'\fR option of \fIreply()\fR.  Valid
choices is \f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, n' \f(CW\*(C`ATTACH\*(C'\fR.
.IP "Error: Method bounce requires To, Cc, or Bcc" 4
.IX Item "Error: Method bounce requires To, Cc, or Bcc"
Da message \fIbounce()\fR method forwardz a received message off ta one of mah thugs
else without modification; you must specified itz freshly smoked up destination.
If you have tha urge not ta specify any destination, you probably
are lookin fo' \fIreply()\fR. When you wish ta modify tha content, use
\&\fIforward()\fR.
.IP "Error: Method forwardAttach requires a preamble" 4
.IX Item "Error: Method forwardAttach requires a preamble"
.PD 0
.IP "Error: Method forwardEncapsulate requires a preamble" 4
.IX Item "Error: Method forwardEncapsulate requires a preamble"
.IP "Error: No address ta create forwarded to." 4
.IX Item "Error: No address ta create forwarded to."
.PD
If a gangbangin' forward message is pimped, a thugged-out destination address must be specified.
.IP "Error: No default maila found ta bust message." 4
.IX Item "Error: No default maila found ta bust message."
Da message \fIsend()\fR mechanizzle had not enough shiznit ta automatically
find a mail transfer agent ta busted dis message.  Specify a mailer
explicitly rockin tha \f(CW\*(C`via\*(C'\fR options.
.ie n .IP "Error: No rebuild rule $name defined." 4
.el .IP "Error: No rebuild rule \f(CW$name\fR defined." 4
.IX Item "Error: No rebuild rule $name defined."
.PD 0
.IP "Error: Only \fIbuild()\fR Mail::Message's; they is not up in a gangbangin' folda yet" 4
.IX Item "Error: Only build() Mail::Message's; they is not up in a gangbangin' folda yet"
.PD
Yo ass may wish ta construct a message ta be stored up in a some kind
of folda yo, but you need ta do dat up in two steps.  First, create a
normal Mail::Message, n' then add it ta tha folda n' shit.  Durin this
\&\fIMail::Box::addMessage()\fR process, tha message will git \fIcoerce()\fR\-d
into tha right message type, addin storage shiznit n' tha like.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.IP "Error: Unable ta read delayed body." 4
.IX Item "Error: Unable ta read delayed body."
.PD 0
.IP "Error: coercion starts wit some object" 4
.IX Item "Error: coercion starts wit some object"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
