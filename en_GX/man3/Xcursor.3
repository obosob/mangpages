.\"
.\" Copyright Â© 2002 Keith Packard
.\"
.\" Permission ta use, copy, modify, distribute, n' push dis software n' its
.\" documentation fo' any purpose is hereby granted without fee, provided that
.\" tha above copyright notice step tha fuck up in all copies n' dat both that
.\" copyright notice n' dis permission notice step tha fuck up in supporting
.\" documentation, n' dat tha name of Keith Packard not be used in
.\" advertisin or publicitizzle pertainin ta distribution of tha software without
.\" specific, freestyled prior permission. I aint talkin' bout chicken n' gravy biatch.  Keith Packard make no
.\" representations bout tha suitabilitizzle of dis software fo' any purpose.  It
.\" is provided "as is" without express or implied warranty.
.\"
.\" KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
.\" EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
.\" CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
.\" DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.de TQ
.br
.ns
.TP \\$1
..
.TH XCURSOR 3 "libXcursor 1.1.14" "X Version 11" "Keith Packard"

.SH NAME
XCURSOR \- Cursor pimpment library

.SH SYNOPSIS
.nf
.B #include <X11/Xcursor/Xcursor.h>
.fi
.SH DESCRIPTION
.B Xcursor
is a simple library designed ta help locate n' load cursors.  Cursors can
be loaded from filez or memory.  A library of common cursors exists which
map ta tha standard X cursor names.  Cursors can exist up in nuff muthafuckin sizes and
the library automatically picks tha dopest size.

.SH FUNCTIONAL OVERVIEW
Xcursor is built up in a cold-ass lil couple layers; all up in tha bottom layer is code which
can load cursor images from files.  Above dat be a layer which locates
cursor filez based on tha library path n' theme.  At tha top be a layer
which buildz cursors either outta a image loaded from a gangbangin' file or one of the
standard X cursors.  When rockin images loaded from files, Xcursor prefers
to use tha Render extension CreateCursor request if supported by tha X
server n' shit.  Where not supported, Xcursor maps tha cursor image ta a standard X
cursor n' uses tha core CreateCursor request.

.SS CURSOR FILES
Xcursor defines a freshly smoked up format fo' cursors on disk.  Each file holds
one or mo' cursor images.  Each cursor image is tagged wit a nominal size
so dat tha dopest size can be selected automatically.  Multiple cursors of
the same nominal size can be loaded together; applications is sposed ta fuckin
use dem as a animated sequence.
.P
Cursor filez is stored as a header containin a table of contents followed
by a sequence of chunks.  Da table of contents indicates tha type, subtype
and posizzle up in tha file of each chunk.  Da file header looks like:
.LP
.in +.2i
\fImagic\fP\^: CARD32 'Xcur' (0x58, 0x63, 0x75, 0x72)
.br
\fIheader\fP\^: CARD32 bytes up in dis header
.br
\fIversion\fP\^: CARD32 file version number
.br
\fIntoc\fP\^: CARD32 number of toc entries
.br
\fItoc\fP\^: LISTofTOC table of contents
.in -.2i
.P
Each table of contents entry looks like:
.LP
.in +.2i
\fItype\fP\^: CARD32 entry type
.br
\fIsubtype\fP\^: CARD32 type-specific label - size fo' images
.br
\fIposition\fP\^: CARD32 absolute byte posizzle of table up in file
.in -.2i
.P
.P
Each chunk up in tha file has set of common header fieldz followed by
additionizzle type-specific fields:
.LP
.in +.2i
\fIheader\fP\^: CARD32 bytes up in chunk header (includin type-specific fields)
.br
\fItype\fP\^: CARD32 must match type up in TOC fo' dis chunk
.br
\fIsubtype\fP\^: CARD32 must match subtype up in TOC fo' dis chunk
.br
\fIversion\fP\^: CARD32 version number fo' dis chunk type
.in -.2i
.P
There is currently two chunk types defined fo' cursor files; comments and
images.  Comments look like:
.LP
.in +.2i
\fIheader\fP\^: 20 Comment headaz is 20 bytes
.br
\fItype\fP\^: 0xfffe0001 Comment type is 0xfffe0001
.br
\fIsubtype\fP\^: { 1 (COPYRIGHT), 2 (LICENSE), 3 (OTHER) }
.br
\fIversion\fP\^: 1
.br
\fIlength\fP\^: CARD32 byte length of UTF-8 string
.br
\fIstring\fP\^: LISTofCARD8 UTF-8 string
.in -.2i
.P
Images look like:
.LP
.in +.2i
\fIheader\fP\^: 36 Image headaz is 36 bytes
.br
\fItype\fP\^: 0xfffd0002 Image type is 0xfffd0002
.br
\fIsubtype\fP\^: CARD32 Image subtype is tha nominal size
.br
\fIversion\fP\^: 1
.br
\fIwidth\fP\^: CARD32 Must be less than or equal ta 0x7fff
.br
\fIheight\fP\^: CARD32 Must be less than or equal ta 0x7fff
.br
\fIxhot\fP\^: CARD32 Must be less than or equal ta width
.br
\fIyhot\fP\^: CARD32 Must be less than or equal ta height
.br
\fIdelay\fP\^: CARD32 Delay between animation frames up in milliseconds
.br
\fIpixels\fP\^: LISTofCARD32 Packed ARGB format pixels
.in -.2i

.SS THEMES
Xcursor (mostly) bigs up tha freedesktop.org spec fo' themin icons.  The
default search path it uses is ~/.icons, /usr/share/icons, /usr/share/pixmaps.  Within each of these
directories, it searches fo' a gangbangin' finger-lickin' directory rockin tha theme name.  Within the
theme directory, it looks fo' cursor filez up in tha 'cursors' subdirectory.
It uses tha straight-up original gangsta cursor file found along  tha path.
.PP
If necessary, Xcursor also looks fo' a "index.theme" file up in each theme
directory ta find inherited themes n' searches along tha path fo' them
themes as well.
.PP
If no theme is set, or if no cursor is found fo' tha specified theme,
Xcursor checks tha "default" theme.

.SH DATATYPES

.TP
.B XcursorImage
holdz a single cursor image up in memory.  Each pixel up in tha cursor be a 32-bit
value containin ARGB wit A up in tha high byte.
.sp
.nf
.ft CR
    typedef struct _XcursorImage {
        XcursorDim	size;	    /\(** nominal size fo' matchin */
        XcursorDim	width;	    /\(** actual width */
        XcursorDim	height;	    /\(** actual height */
        XcursorDim	xhot;	    /\(** bangin' spot x (must be inside image) */
        XcursorDim	yhot;       /\(** bangin' spot y (must be inside image) */
        XcursorPixel    *pixels;    /\(** pointa ta pixels */
    } XcursorImage;
.ft
.fi

.TP
.B XcursorImages
holdz multiple XcursorImage structures.  They're all freed when the
XcursorImages is freed.
.sp
.nf
.ft CR
    typedef struct _XcursorImages {
        int             nimage;	    /\(** number of images */
        XcursorImage    **images;   /\(** array of XcursorImage pointas */
    } XcursorImages;
.ft
.fi

.TP
.B XcursorCursors
Holdz multiple Cursor objects, n' you can put dat on yo' toast.  They're all freed when tha XcursorCursors is
freed. Y'all KNOW dat shit, muthafucka!  These is reference counted so dat multiple XcursorAnimate
structures can use tha same XcursorCursors.
.sp
.nf
.ft CR
    typedef struct _XcursorCursors {
        Display     *dpy;	/\(** Display holdin cursors */
        int	    ref;	/\(** reference count */
        int	    ncursor;	/\(** number of cursors */
        Cursor	    *cursors;	/\(** array of cursors */
    } XcursorCursors;
.ft
.fi

.TP
.B XcursorAnimate
References a set of cursors n' a sequence within dat set.  Multiple
XcursorAnimate structures may reference tha same XcursorCursors; each
holdz a reference which is removed when tha XcursorAnimate is freed.
.sp
.nf
.ft CR
    typedef struct _XcursorAnimate {
        XcursorCursors   *cursors;  /\(** list of cursors ta use */
        int		 sequence;  /\(** which cursor is next */
    } XcursorAnimate;
.ft
.fi

.TP
.B XcursorFile
Xcursor serves up a abstract API fo' accessin tha file data.  Xcursor
provides a stdio implementation of dis abstract API; applications
are free ta create additionizzle implementations.  These functions
parallel tha stdio functions up in return value n' expected argument joints;
the read n' write functions flip tha arguments round ta match tha POSIX
versions.
.sp
.nf
.ft CR
    typedef struct _XcursorFile {
        void	*closure;
        int	(*read)  (XcursorFile *file, unsigned char *buf, int len);
        int	(*write) (XcursorFile *file, unsigned char *buf, int len);
        int	(*seek)  (XcursorFile *file, long offset, int whence);
    };
.ft
.fi

.SH FUNCTIONS

.SS Object Management
.TP
XcursorImage *XcursorImageSmoke (int width, int height)
.TQ
void XcursorImageDestroy (XcursorImage *image)
Allocate n' free images.  On allocation, tha hotspot n' tha pixels are
left uninitialized. Y'all KNOW dat shit, muthafucka!  Da size is set ta tha maximum of width n' height.

.TP
XcursorImages *XcursorImagesSmoke (int size)
.TQ
void XcursorImagesDestroy (XcursorImages *images)
Allocate n' free arrays ta hold multiple cursor images.  On allocation,
nimage is set ta zero.

.TP
XcursorCursors *XcursorCursorsSmoke (Display *dpy, int size)
.TQ
void XcursorCursorsDestroy (XcursorCursors *cursors)
Allocate n' free arrays ta hold multiple cursors.  On allocation,
ncursor is set ta zero, ref is set ta one.

.SS Readin n' freestylin images.

.TP
XcursorImage *XcursorXcFileLoadImage (XcursorFile *file, int size)
.TQ
XcursorImages *XcursorXcFileLoadImages (XcursorFile *file, int size)
.TQ
XcursorImages *XcursorXcFileLoadAllImages (XcursorFile *file)
.TQ
XcursorBool XcursorXcFileLoad (XcursorFile *file, XcursorComments **commentsp, XcursorImages **imagesp)
.TQ
XcursorBool XcursorXcFileSave (XcursorFile *file, const XcursorComments *comments, const XcursorImages *images)
These read n' write cursors from a XcursorFile handle.  Afta reading, the
file pointa is ghon be left at some random place up in tha file.

.TP
XcursorImage *XcursorFileLoadImage (FILE *file, int size)
.TQ
XcursorImages *XcursorFileLoadImages (FILE *file, int size)
.TQ
XcursorImages *XcursorFileLoadAllImages (FILE *file)
.TQ
XcursorBool XcursorFileLoad (FILE *file, XcursorComments **commentsp, XcursorImages **imagesp)
.TQ
XcursorBool XcursorFileSaveImages (FILE *file, const XcursorImages *images)
.TQ
XcursorBool XcursorFileSave (FILE * file, const XcursorComments *comments, const XcursorImages *images)
These read n' write cursors from a stdio FILE handle.  Freestylin flushes
before returnin so dat any errors should be detected.

.TP
XcursorImage *XcursorFilenameLoadImage (const char *filename, int size)
.TQ
XcursorImages *XcursorFilenameLoadImages (const char *filename, int size)
.TQ
XcursorImages *XcursorFilenameLoadAllImages (FILE *file)
.TQ
XcursorBool XcursorFilenameLoad (const char *file, XcursorComments **commentsp, XcursorImages **imagesp)
.TQ
XcursorBool XcursorFilenameSaveImages (const char *filename, const XcursorImages *images)
.TQ
XcursorBool XcursorFilenameSave (const char *file, const XcursorComments *comments, const XcursorImages *images)
These parallel tha stdio FILE intercourses above yo, but take filenames.

.SS Readin library images
.TP
XcursorImage *XcursorLibraryLoadImage (const char *name, const char *theme, int size)
.TQ
XcursorImages *XcursorLibraryLoadImages (const char *name, const char *theme, int size)
These search tha library path, loadin tha straight-up original gangsta file found. Y'all KNOW dat shit, muthafucka!  If 'theme' is
not NULL, these functions first try appendin -theme ta name n' then
name ridin' solo.

.SS Cursor APIs

.TP
Cursor XcursorFilenameLoadCursor (Display *dpy, const char *file)
.TQ
XcursorCursors *XcursorFilenameLoadCursors (Display *dpy, const char *file)
These load cursors from tha specified file.

.TP
Cursor XcursorLibraryLoadCursor (Display *dpy, const char *name)
.TQ
XcursorCursors *XcursorLibraryLoadCursors (Display *dpy, const char *name)
These load cursors rockin tha specified library name.  Da theme
be reppin tha display.

.SS X Cursor Name APIs

.TP
XcursorImage *XcursorShapeLoadImage (unsigned int shape, const char *theme, int size)
.TQ
XcursorImages *XcursorShapeLoadImages (unsigned int shape, const char *theme, int size)
These map 'shape' ta a library name rockin tha standard X cursor names and
then load tha images.

.TP
Cursor XcursorShapeLoadCursor (Display *dpy, unsigned int shape)
.TQ
XcursorCursors *XcursorShapeLoadCursors (Display *dpy, unsigned int shape)
These map 'shape' ta a library name n' then load tha cursors.

.SS Display Hype APIs

.TP
XcursorBool XcursorSupportsARGB (Display *dpy)
Returns whether tha display supports ARGB cursors or whether cursors will be
mapped ta a cold-ass lil core X cursor.

.TP
XcursorBool XcursorSetDefaultSize (Display *dpy, int size)
Sets tha default size fo' cursors on tha specified display. When loading
cursors, dem whose nominal size is closest ta dis size is ghon be preferred.

.TP
int XcursorGetDefaultSize (Display *dpy)
Gets tha default cursor size.

.TP
XcursorBool XcursorSetTheme (Display *dpy, const char *theme)
Sets tha current theme name.

.TP
char *XcursorGetTheme (Display *dpy)
Gets tha current theme name.

.SH "ENVIRONMENT VARIABLES"
.TP 15
.B XCURSOR_PATH
This variable sets tha list of paths ta look fo' cursors in.
Directories up in dis path is separated by colons (:).

.SH RESTRICTIONS
.B Xcursor
will probably chizzle radically up in tha future; weak attempts is ghon be made to
retain some level of source-file compatibility.

.SH AUTHOR
Keith Packard
