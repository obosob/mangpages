'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbGetKeyboardByName 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbGetKeyboardByName \- Build a freshly smoked up keyboard description from a set of named 
components, n' ta optionally have tha server use tha resultin description ta 
replace a actizzle one
.SH SYNOPSIS
.HP
.B XkbDescPtr XkbGetKeyboardByName
.BI "(\^Display *" "dpy" "\^,"
.BI "unsigned int " "device_spec" "\^,"
.BI "XkbComponentNamesPtr " "names" "\^,"
.BI "unsigned int " "want" "\^,"
.BI "unsigned int " "need" "\^,"
.BI "Bool " "load" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- dpy
connection ta X server
.TP
.I \- device_spec
device ID, or XkbUseCoreKbd
.TP
.I \- names
namez of components ta fetch
.TP
.I \- want
desired structures up in returned record
.TP
.I \- need
mandatory structures up in returned record
.TP
.I \- load
True => load tha fuck into 
.I device_spec
.SH DESCRIPTION
.LP
A client may request dat tha server fetch one or mo' components from its 
database n' use dem components ta build a freshly smoked up server keyboard description. I aint talkin' bout chicken n' gravy biatch. 
Da freshly smoked up keyboard description may be built from scratch, or it may be built 
startin wit tha current keyboard description fo' a particular device. Once tha 
keyboard description is built, all or part of it may be moonwalked back ta tha client. 
Da parts moonwalked back ta tha client need not include all of tha parts used ta build 
the description. I aint talkin' bout chicken n' gravy biatch fo' realz. At tha time it requests tha server ta build a freshly smoked up keyboard 
description, a cold-ass lil client may also request dat tha server use tha freshly smoked up description 
internally ta replace tha current keyboard description fo' a specific device, up in 
which case tha behavior of tha thang chizzlez accordingly.

To build a freshly smoked up keyboard description from a set of named components, n' ta 
optionally have tha server use tha resultin description ta replace a actizzle 
one, use 
.I XkbGetKeyboardByName.

.I names 
gotz nuff a set of expressions describin tha keyboard components tha 
server should use ta build tha freshly smoked up keyboard description. I aint talkin' bout chicken n' gravy biatch. 
.I want 
and 
.I need 
are bit fieldz describin tha partz of tha resultin keyboard description dat 
should be present up in tha returned XkbDescRec.
 
Da individual fieldz up in 
.I names 
are 
.I component expressions 
composed of keyboard component names (no wildcardin as may be used in
.I XkbListComponents), 
the special component name symbol `%', n' tha special operator charactas `+' 
and `|' fo' realz. A component expression is parsed left ta right, as bigs up:

.IP \(bu 5
Da special component name "computed" may be used up in keycodes component 
expressions n' refers ta a cold-ass lil component consistin of a set of keycodes computed 
automatically by tha server as needed.
.IP \(bu 5
Da special component name "canonical" may be used up in types component 
expressions n' refers ta a partial component definin tha four standard key 
types: ALPHABETIC, ONE_LEVEL, TWO_LEVEL, n' KEYPAD.
.IP \(bu 5
Da special component name `%' refers ta tha keyboard description fo' tha thang 
specified up in device_spec or tha keymap names component. If a keymap names 
component is specified dat do not begin wit `+' or `|' n' do not contain 
`%', then `%' refers ta tha description generated by tha keymap names component. 
Otherwise, it refers ta tha keyboard description fo' device_spec.
.IP \(bu 5
Da `+' operator specifies dat tha followin component should override tha 
currently assembled description; any definitions dat is present up in both 
components is taken from tha second.
.IP \(bu 5
Da `|' operator specifies dat tha next specified component should augment tha 
currently assembled description; any definitions dat is present up in both 
components is taken from tha first.
.IP \(bu 5
If tha component expression begins wit a operator, a leadin `%' is implied.
.IP \(bu 5
If any unknown or illegal charactas step tha fuck up anywhere up in tha expression, tha 
entire expression is invalid n' is ignored.

For example, if 
.I names->symbols 
contained tha expression "+de", it specifies dat 
the default gangmember of tha "de" class of symbols should be applied ta tha current 
keyboard mapping, overridin any existin definitions (it could also be freestyled 
"+de(default)").

Here be a slightly mo' involved example: tha expression 
"acme(ascii)+de(basic)|iso9995-3" constructs a German (de) mappin fo' tha ASCII 
keyboard supplied by tha "acme" vendor. Shiiit, dis aint no joke. Da freshly smoked up definizzle begins wit tha 
symbols fo' tha ASCII keyboard fo' Acme 
.I (acme(ascii)), 
overrides dem wit definitions fo' tha basic German keyboard 
.I (de(basic)), 
and then applies tha definitions from tha default iso9995-3 keyboard 
.I (iso9995-3) 
to any undefined keys or crewz of keys (part three of tha iso9995 standard 
defines a cold-ass lil common set of bindings fo' tha secondary crew yo, but allows nationistic 
layouts ta override dem definitions where necessary). 

.B NOTE 
Da interpretation of tha above expression components (acme, ascii, de, basic, 
iso9995-3) aint defined by Xkb; only tha operations n' they orderin are.

Note dat tha presence of a keymap 
.I names 
component dat do not contain `%' (either explicit or implied by virtue of a 
expression startin wit a operator) indicates a thugged-out description dat is 
independent of tha keyboard description fo' tha thang specified up in 
.I device_spec. 
Da same is legit of requests up in which tha keymap names component is empty n' 
all five other names components contain expressions void of references ta `%'. 
Requestz of dis form allow you ta deal wit keyboard definitions independent of 
any actual device.

Da server parses all non-NULL fieldz up in 
.I names 
and uses dem ta build a keyboard description. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat before parsin tha 
expressions up in 
.I names, 
the server ORs tha bits up in 
.I want 
and 
.I need 
together n' examines tha result up in relationshizzle ta tha expressions up in 
.I names. 
Table 1 identifies tha components dat is required fo' each of tha possible 
bits up in 
.I want 
or 
.I need. Y'all KNOW dat shit, muthafucka! 
If a required component has not been specified up in tha 
.I names structure (the correspondin field is NULL), tha server substitutes tha 
expression "%", resultin up in tha component joints bein taken from 
.I device_spec. 
In addition, if 
.I load 
is True, tha server modifies 
.I names 
if necessary (again rockin a "%" entry) ta ensure all of tha followin fieldz is 
non-NULL: 
.I types, keycodes, symbols, 
and 
.I compat.
.bp
.TS
c s s
l l l. 
Table 1 Want n' Need Mask Bits n' Required Names Components
_
want or need mask bit	Required names Components	value
_
XkbGBN_TypesMask	Types	(1L<<0)
XkbGBN_CompatMapMask	Compat	(1L<<1)
XkbGBN_ClientSymbolsMask	Types + Symbols + Keycodes	(1L<<2)
XkbGBN_ServerSymbolsMask	Types + Symbols + Keycodes	(1L<<3)
XkbGBN_SymbolsMask	Symbols	(1L<<1)
XkbGBN_IndicatorMapMask	Compat	(1L<<4)
XkbGBN_KeyNamesMask	Keycodes	(1L<<5)
XkbGBN_GeometryMask	Geometry	(1L<<6)
XkbGBN_OtherNamesMask	Types + Symbols + Keycodes + Compat + Geometry	(1L<<7)
XkbGBN_AllComponentsMask		(0xff)
.TE

.I need 
specifies a set of keyboard components dat tha server must be able ta 
resolve up in order fo' 
.I XkbGetKeyboardByName 
to succeed; if any of tha components specified up in 
.I need 
cannot be successfully resolved, 
.I XkbGetKeyboardByName 
fails.

.I want 
specifies a set of keyboard components dat tha server should attempt ta 
resolve yo, but dat is not mandatory. If tha server is unable ta resolve any of 
these components, 
.I XkbGetKeyboardByName 
still succeeds. Bits specified up in 
.I want 
that is also specified up in 
.I need 
have no effect up in tha context of 
.I want.

If 
.I load 
is True, tha server thugged-out shiznit its keyboard description fo' 
.I device_spec 
to match tha result of tha keyboard description just built. If load is False, 
the 
serverz description fo' thang 
.I device_spec 
is not updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In all cases, tha parts specified by 
.I want 
and 
.I need 
from tha just-built keyboard description is returned.

Da 
.I names 
structure up in a XkbDescRec keyboard description record gotz nuff one field fo' 
each of tha five component types used ta build a keyboard description. I aint talkin' bout chicken n' gravy biatch. When a 
keyboard description is built from a set of database components, tha 
correspondin fieldz up in dis 
.I names 
structure is set ta match tha expressions used ta build tha component. 

Buildin a New Keyboard Description from tha Server Database

Da shiznit moonwalked back ta tha client up in tha XkbDescRec is essentially tha 
result of a seriez of calls ta extract shiznit from a gangbangin' fictitious thang 
whose description matches tha one just built. Da calls correspondin ta each of 
the mask bits is summarized up in Table 2, together wit tha XkbDescRec 
components dat is filled in.

.TS
c s s
l l l.
Table 2 XkbDescRec Components Returned fo' Valuez of Want & Needs
_
Request (want+need)	Fills up in Xkb components	Equivalent Function Call
_
XkbGBN_TypesMask	map.types	XkbGetUpdatedMap(dpy, XkbTypesMask, Xkb)
XkbGBN_ServerSymbolsMask	server	XkbGetUpdatedMap(dpy, 
XkbAllClientInfoMask, Xkb)
XkbGBN_ClientSymbolsMask	map, includin map.types	
XkbGetUpdatedMap(dpy, XkbAllServerInfoMask, Xkb)
XkbGBN_IndicatorMaps	indicators	XkbGetIndicatorMap(dpy, 
XkbAllIndicators, Xkb)
XkbGBN_CompatMapMask	compat	XkbGetCompatMap(dpy, XkbAllCompatMask, Xkb)
XkbGBN_GeometryMask	geom	XkbGetGeometry(dpy, Xkb)
XkbGBN_KeyNamesMask	names.keys	XkbGetNames(dpy, XkbKeyNamesMask |
	names.key_aliases	XkbKeyAliasesMask, Xkb)
XkbGBN_OtherNamesMask	names.keycodes	XkbGetNames(dpy, XkbAllNamesMask &	
	names.geometry	~(XkbKeyNamesMask | XkbKeyAliasesMask),
	names.symbols	Xkb)
	names.types
	map.types[*].lvl_names[*]
	names.compat
	names.vmods
	names.indicators
	names.groups
	names.radio_groups
	names.phys_symbols
.TE

There is no way ta determine which components specified up in 
.I want 
(but not up in 
.I need) 
were straight-up fetched, other than breakin tha call tha fuck into successive calls ta 
.I XkbGetKeyboardByName 
and specifyin individual components.

.I XkbGetKeyboardByName 
always sets 
.I min_key_code 
and 
.I max_key_code 
in tha returned XkbDescRec structure.

.I XkbGetKeyboardByName 
is synchronous; it sendz tha request ta tha server ta build a freshly smoked up keyboard 
description n' waits fo' tha reply. If successful, tha return value is 
non-NULL. 
.I XkbGetKeyboardByName 
generates a BadMatch protocol error if errors is encountered when buildin tha 
keyboard description.
.SH STRUCTURES
.LP
Da complete description of a Xkb keyboard is given by a XkbDescRec. Da 
component 
structures up in tha XkbDescRec represent tha major Xkb components outlined up in 
Figure 1.1.

.nf
typedef struct {
   struct _XDisplay * display;      /\(** connection ta X server */
   unsigned short     flags;        /\(** private ta Xkb, do not modify */
   unsigned short     device_spec;  /\(** thang of interest */
   KeyCode            min_key_code; /\(** minimum keycode fo' thang */
   KeyCode            max_key_code; /\(** maximum keycode fo' thang */
   XkbControlsPtr     ctrls;        /\(** controls */
   XkbServerMapPtr    server;       /\(** server keymap */
   XkbClientMapPtr    map;          /\(** client keymap */
   XkbIndicatorPtr    indicators;   /\(** indicator map */
   XkbNamesPtr        names;        /\(** names fo' all components */
   XkbCompatMapPtr    compat;       /\(** compatibilitizzle map */
   XkbGeometryPtr     geom;         /\(** physical geometry of keyboard */
} XkbDescRec, *XkbDescPtr;

.fi
Da 
.I display 
field points ta a X display structure. Da 
.I flags field is private ta tha library: modifyin 
.I flags 
may yield unpredictable thangs up in dis biatch. Da 
.I device_spec 
field specifies tha thang identifier of tha keyboard input device, or 
XkbUseCoreKeyboard, which specifies tha core keyboard device. Da 
.I min_key_code
and 
.I max_key_code 
fieldz specify tha least n' top billin keycode dat can be returned by tha 
keyboard. Y'all KNOW dat shit, muthafucka! 

Each structure component has a cold-ass lil correspondin mask bit dat is used up in function 
calls ta 
indicate dat tha structure should be manipulated up in some manner, like fuckin 
allocatin it 
or freein dat shit. These masks n' they relationshizzlez ta tha fieldz up in tha 
XkbDescRec is 
shown up in Table 3.

.TS
c s s
l l l
l l l.
Table 3 Mask Bits fo' XkbDescRec
_
Mask Bit	XkbDescRec Field	Value
_
XkbControlsMask	ctrls	(1L<<0)
XkbServerMapMask	server	(1L<<1)
XkbIClientMapMask	map	(1L<<2)
XkbIndicatorMapMask	indicators	(1L<<3)
XkbNamesMask	names	(1L<<4)
XkbCompatMapMask	compat	(1L<<5)
XkbGeometryMask	geom	(1L<<6)
XkbAllComponentsMask	All Fields	(0x7f)
.TE
.SH DIAGNOSTICS
.TP 15
.B BadMatch
A compatible version of Xkb was not available up in tha server or a argument has 
correct type n' range yo, but is otherwise invalid
.SH "SEE ALSO"
.BR XkbListComponents (3)


