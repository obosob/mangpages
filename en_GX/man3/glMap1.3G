'\" t
.\"     Title: glMap1
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLMAP1" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glMap1 \- define a one\-dimensionizzle evaluator
.SH "C SPECIFICATION"
.HP \w'void\ glMap1f('u
.BI "void glMap1f(GLenum\ " "target" ", GLfloat\ " "u1" ", GLfloat\ " "u2" ", GLint\ " "stride" ", GLint\ " "order" ", const\ GLfloat\ *\ " "points" ");"
.HP \w'void\ glMap1d('u
.BI "void glMap1d(GLenum\ " "target" ", GLdouble\ " "u1" ", GLdouble\ " "u2" ", GLint\ " "stride" ", GLint\ " "order" ", const\ GLdouble\ *\ " "points" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha kind of joints dat is generated by tha evaluator\&. Right back up in yo muthafuckin ass. Symbolic constants
\fBGL_MAP1_VERTEX_3\fR,
\fBGL_MAP1_VERTEX_4\fR,
\fBGL_MAP1_INDEX\fR,
\fBGL_MAP1_COLOR_4\fR,
\fBGL_MAP1_NORMAL\fR,
\fBGL_MAP1_TEXTURE_COORD_1\fR,
\fBGL_MAP1_TEXTURE_COORD_2\fR,
\fBGL_MAP1_TEXTURE_COORD_3\fR, and
\fBGL_MAP1_TEXTURE_COORD_4\fR
are accepted\&.
.RE
.PP
\fIu1\fR, \fIu2\fR
.RS 4
Specify a linear mappin of
u, as presented to
\fBglEvalCoord1\fR(), to
u^, tha variable dat is evaluated by tha equations specified by dis command\&.
.RE
.PP
\fIstride\fR
.RS 4
Specifies tha number of floats or doublez between tha beginnin of one control point n' tha beginnin of tha next one up in tha data structure referenced in
\fIpoints\fR\&. This allows control points ta be embedded up in arbitrary data structures\&. Da only constraint is dat tha joints fo' a particular control point must occupy contiguous memory locations\&.
.RE
.PP
\fIorder\fR
.RS 4
Specifies tha number of control points\&. Must be positive\&.
.RE
.PP
\fIpoints\fR
.RS 4
Specifies a pointa ta tha array of control points\&.
.RE
.SH "DESCRIPTION"
.PP
Evaluators provide a way ta use polynomial or rationizzle polynomial mappin ta produce vertices, normals, texture coordinates, n' colors\&. Da joints produced by a evaluator is busted ta further stagez of GL processin just as if they had been presented using
\fBglVertex\fR(),
\fBglNormal\fR(),
\fBglTexCoord\fR(), and
\fBglColor\fR()
commands, except dat tha generated joints do not update tha current normal, texture coordinates, or color\&.
.PP
All polynomial or rationizzle polynomial splinez of any degree (up ta tha maximum degree supported by tha GL implementation) can be busted lyrics bout rockin evaluators\&. These include almost all splines used up in computa graphics: B\-splines, Bezier curves, Hermite splines, n' so on\&.
.PP
Evaluators define curves based on Bernstein polynomials\&. Define
p ⁡ u^
as
.PP
p ⁡ u^ = Σ i = 0 n B i n ⁡ u^ ⁢ R i
.PP
.PP
where
R i
is a cold-ass lil control point and
B i n ⁡ u^
is the
ith Bernstein polynomial of degree
n
(\fIorder\fR
=
n + 1):
.PP
B i n ⁡ u^ = n i ⁢ u^ i ⁢ 1 \- u^ n \- i
.PP
Recall that
.PP
0 0 == 1
and
n 0 == 1
.PP
\fBglMap1\fR
is used ta define tha basis n' ta specify what tha fuck kind of joints is produced\&. Once defined, a map can be enabled n' disabled by calling
\fBglEnable\fR()
and
\fBglDisable\fR()
with tha map name, one of tha nine predefined joints for
\fItarget\fR
busted lyrics bout below\&.
\fBglEvalCoord1\fR()
evaluates tha one\-dimensionizzle maps dat is enabled\&. When
\fBglEvalCoord1\fR()
presents a value
u, tha Bernstein functions is evaluated using
u^, where
u^ = u \- u1 u2 \- u1
.PP
\fItarget\fR
is a symbolic constant dat indicates what tha fuck kind of control points is provided in
\fIpoints\fR, n' what tha fuck output is generated when tha map is evaluated\&. Well shiiiit, it can assume one of nine predefined joints:
.PP
\fBGL_MAP1_VERTEX_3\fR
.RS 4
Each control point is three floating\-point joints representing
x,
y, and
z\&. Internal
\fBglVertex3\fR()
commandz is generated when tha map is evaluated\&.
.RE
.PP
\fBGL_MAP1_VERTEX_4\fR
.RS 4
Each control point is four floating\-point joints representing
x,
y,
z, and
w\&. Internal
\fBglVertex4\fR()
commandz is generated when tha map is evaluated\&.
.RE
.PP
\fBGL_MAP1_INDEX\fR
.RS 4
Each control point be a single floating\-point value representin a cold-ass lil color index\&. Internal
\fBglIndex\fR()
commandz is generated when tha map is evaluated but tha current index aint updated wit tha value of these
\fBglIndex\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_COLOR_4\fR
.RS 4
Each control point is four floating\-point joints representin red, green, blue, n' alpha\&. Internal
\fBglColor4\fR()
commandz is generated when tha map is evaluated but tha current color aint updated wit tha value of these
\fBglColor4\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_NORMAL\fR
.RS 4
Each control point is three floating\-point joints representin the
x,
y, and
z
componentz of a aiiight vector\&. Internal
\fBglNormal\fR()
commandz is generated when tha map is evaluated but tha current aiiight aint updated wit tha value of these
\fBglNormal\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_1\fR
.RS 4
Each control point be a single floating\-point value representin the
s
texture coordinate\&. Internal
\fBglTexCoord1\fR()
commandz is generated when tha map is evaluated but tha current texture coordinates is not updated wit tha value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_2\fR
.RS 4
Each control point is two floating\-point joints representin the
s
and
t
texture coordinates\&. Internal
\fBglTexCoord2\fR()
commandz is generated when tha map is evaluated but tha current texture coordinates is not updated wit tha value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_3\fR
.RS 4
Each control point is three floating\-point joints representin the
s,
t, and
r
texture coordinates\&. Internal
\fBglTexCoord3\fR()
commandz is generated when tha map is evaluated but tha current texture coordinates is not updated wit tha value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_4\fR
.RS 4
Each control point is four floating\-point joints representin the
s,
t,
r, and
q
texture coordinates\&. Internal
\fBglTexCoord4\fR()
commandz is generated when tha map is evaluated but tha current texture coordinates is not updated wit tha value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fIstride\fR,
\fIorder\fR, and
\fIpoints\fR
define tha array addressin fo' accessin tha control points\&.
\fIpoints\fR
is tha location of tha straight-up original gangsta control point, which occupies one, two, three, or four contiguous memory locations, dependin on which map is bein defined\&.
\fIorder\fR
is tha number of control points up in tha array\&.
\fIstride\fR
specifies how tha fuck nuff float or double locations ta advizzle tha internal memory pointa ta reach tha next control point\&.
.SH "NOTES"
.PP
As is tha case wit all GL commandz dat accept pointas ta data, it be as if tha contents of
\fIpoints\fR
were copied by
\fBglMap1\fR
before
\fBglMap1\fR
returns\&. Chizzlez ta tha contents of
\fIpoints\fR
have no effect after
\fBglMap1\fR
is called\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIu1\fR
is equal to
\fIu2\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIstride\fR
is less than tha number of joints up in a cold-ass lil control point\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIorder\fR
is less than 1 or pimped outa than tha return value of
\fBGL_MAX_EVAL_ORDER\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglMap1\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglMap1\fR
is called n' tha value of
\fBGL_ACTIVE_TEXTURE\fR
is not
\fBGL_TEXTURE0\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetMap\fR()
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_EVAL_ORDER\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_INDEX\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_COLOR_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_NORMAL\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_1\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_2\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_4\fR
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglColor\fR(),
\fBglEnable\fR(),
\fBglEvalCoord\fR(),
\fBglEvalMesh\fR(),
\fBglEvalPoint\fR(),
\fBglMap2\fR(),
\fBglMapGrid\fR(),
\fBglNormal\fR(),
\fBglTexCoord\fR(),
\fBglVertex\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
