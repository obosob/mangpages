.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Transport::Send 3"
.TH Mail::Transport::Send 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transport::Send \- bust a message
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Transport::Send
\&   be a Mail::Transport
\&   be a Mail::Reporter
\&
\& Mail::Transport::Send is extended by
\&   Mail::Transport::Exim
\&   Mail::Transport::Mailx
\&   Mail::Transport::Qmail
\&   Mail::Transport::SMTP
\&   Mail::Transport::Sendmail
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& mah $message = Mail::Message\->new(...);
\&
\& # Some extensions implement sending:
\& $message\->send;
\& $message\->send(via => \*(Aqsendmail\*(Aq);
\&
\& mah $sender = Mail::Transport::SMTP\->new(...);
\& $sender\->send($message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Send a message ta tha destinations as specified up in tha header n' shit.  The
\&\f(CW\*(C`Mail::Transport::Send\*(C'\fR module is capable of autodetectin which of the
followin modulez work on yo' system; you may simply call \f(CW\*(C`send\*(C'\fR
without \f(CW\*(C`via\*(C'\fR options ta git a message transported.
.IP "\(bu" 4
Mail::Transport::Sendmail
.Sp
Use sendmail ta process n' serve up tha mail.  This requires the
\&\f(CW\*(C`sendmail\*(C'\fR program ta be installed on yo' system.  Whether this
is a original gangsta sendmail, or a replacement from Postfix do matter.
.IP "\(bu" 4
Mail::Transport::Exim
.Sp
Use \f(CW\*(C`exim\*(C'\fR ta distribute tha message.
.IP "\(bu" 4
Mail::Transport::Qmail
.Sp
Use \f(CW\*(C`qmail\-inject\*(C'\fR ta distribute tha message.
.IP "\(bu" 4
Mail::Transport::SMTP
.Sp
In dis case, Perl is handlin mail transhiznit on its own. I aint talkin' bout chicken n' gravy biatch.  This is less
desired but mo' portable than bustin  wit sendmail or qmail.
Da advantage is dat dis sender is environment independent, n' easier to
configure.  But fuck dat shiznit yo, tha word on tha street is dat there is no daemon involved which means dat your
program will wait until tha message is delivered, n' tha message is
lost when yo' program is interrupted durin delivery (which may
take minutes ta complete).
.IP "\(bu" 4
Mail::Transport::Mailx
.Sp
Use tha external \f(CW\*(C`mail\*(C'\fR, \f(CW\*(C`mailx\*(C'\fR, or \f(CW\*(C`Mail\*(C'\fR programs ta bust the
message.  Usually, tha result is skanky, cuz some versionz of these
programs do not support \s-1MIME\s0 headers.  Besides, these programs are
known ta have exploitable securitizzle breaches.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Transport::Send\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Transport::Send->new(OPTIONS)"
.Vb 10
\& \-Option    \-\-Defined up in     \-\-Default
\&  executable  Mail::Transhiznit  undef
\&  hostname    Mail::Transhiznit  \*(Aqlocalhost\*(Aq
\&  interval    Mail::Transhiznit  30
\&  log         Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  password    Mail::Transhiznit  undef
\&  port        Mail::Transhiznit  undef
\&  proxy       Mail::Transhiznit  undef
\&  retry       Mail::Transhiznit  <false>
\&  timeout     Mail::Transhiznit  120
\&  trace       Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  username    Mail::Transhiznit  undef
\&  via         Mail::Transhiznit  \*(Aqsendmail\*(Aq
.Ve
.RS 4
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "hostname => HOSTNAME|ARRAY\-OF\-HOSTNAMES" 2
.IX Item "hostname => HOSTNAME|ARRAY-OF-HOSTNAMES"
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.PD
.SS "Sendin mail"
.IX Subsection "Sendin mail"
.ie n .IP "$obj\->\fBdestinations\fR(\s-1MESSAGE,\s0 [ADDRESS|ARRAY\-OF\-ADDRESSES])" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR(\s-1MESSAGE,\s0 [ADDRESS|ARRAY\-OF\-ADDRESSES])" 4
.IX Item "$obj->destinations(MESSAGE, [ADDRESS|ARRAY-OF-ADDRESSES])"
Determine tha destination fo' dis message.  If a valid \s-1ADDRESS\s0 is defined,
this is used ta overrule tha addresses within tha message.  If tha \s-1ADDRESS\s0
is \f(CW\*(C`undef\*(C'\fR it is ignored.
.Sp
If no \s-1ADDRESS\s0 is specified, tha message is scanned fo' resent groups
(see \fIMail::Message::Head::Complete::resentGroups()\fR).  Da addresses
found up in tha straight-up original gangsta (is sickest fuckin added) crew is used. Y'all KNOW dat shit, muthafucka!  If no resent groups
are found, tha aiiight \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, n' \f(CW\*(C`Bcc\*(C'\fR lines is taken.
.ie n .IP "$obj\->\fBputContent\fR(\s-1MESSAGE, FILEHANDLE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBputContent\fR(\s-1MESSAGE, FILEHANDLE, OPTIONS\s0)" 4
.IX Item "$obj->putContent(MESSAGE, FILEHANDLE, OPTIONS)"
Print tha content of tha \s-1MESSAGE\s0 ta tha \s-1FILEHANDLE.\s0
.Sp
.Vb 3
\& \-Option     \-\-Default
\&  body_only    <false>
\&  undisclosed  <false>
.Ve
.RS 4
.IP "body_only => \s-1BOOLEAN\s0" 2
.IX Item "body_only => BOOLEAN"
Print only tha body of tha message, not tha whole.
.IP "undisclosed => \s-1BOOLEAN\s0" 2
.IX Item "undisclosed => BOOLEAN"
Do not print tha \f(CW\*(C`Bcc\*(C'\fR n' \f(CW\*(C`Resent\-Bcc\*(C'\fR lines.  Default false, which
means dat they is not printed.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBsend\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->send(MESSAGE, OPTIONS)"
Transmit tha \s-1MESSAGE,\s0 which may be anythang what tha fuck can be coerced tha fuck into a
Mail::Message, so includin Mail::Internizzle n' MIME::Entity
lyrics.  It returns legit when tha transmission was successfully completed.
.Sp
.Vb 4
\& \-Option  \-\-Default
\&  interval  new(interval)
\&  retry     new(retry)
\&  ta        undef
.Ve
.RS 4
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.PD 0
.IP "retry => \s-1INTEGER\s0" 2
.IX Item "retry => INTEGER"
.IP "to => \s-1STRING\s0" 2
.IX Item "to => STRING"
.PD
Overrulez tha destination(s) of tha message, which is by default taken
from tha (Resent\-)To, (Resent\-)Cc, n' (Resent\-)Bcc.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBtrySend\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtrySend\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->trySend(MESSAGE, OPTIONS)"
Try ta bust tha message. This will return legit if successful, and
false up in case some problems where detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da \f(CW$?\fR gotz nuff
the exit statuz of tha command which was started.
.SS "Server connection"
.IX Subsection "Server connection"
.ie n .IP "$obj\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR(\s-1NAME\s0 [, \s-1DIRECTORIES\s0])" 4
.IX Item "$obj->findBinary(NAME [, DIRECTORIES])"
See \*(L"Server connection\*(R" up in Mail::Transport
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
See \*(L"Server connection\*(R" up in Mail::Transport
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
See \*(L"Server connection\*(R" up in Mail::Transport
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Transport::Send\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Transport::Send->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Transport::Send\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Transport::Send->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Transport::Send\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Transport::Send->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Warning: Message has no destination" 4
.IX Item "Warning: Message has no destination"
Dat shiznit was not possible ta figure-out where tha message is intended ta go
to.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.IP "Warning: Resent crew do not specify a thugged-out destination" 4
.IX Item "Warning: Resent crew do not specify a thugged-out destination"
Da message which is busted is tha result of a funky-ass bounce (for instance
created wit \fIMail::Message::bounce()\fR), n' therefore starts wit a
\&\f(CW\*(C`Received\*(C'\fR header field. Y'all KNOW dat shit, muthafucka!  With tha \f(CW\*(C`bounce\*(C'\fR, tha freshly smoked up destination(s)
of tha message is given, which should be included as \f(CW\*(C`Resent\-To\*(C'\fR,
\&\f(CW\*(C`Resent\-Cc\*(C'\fR, n' \f(CW\*(C`Resent\-Bcc\*(C'\fR.
.Sp
Da \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, n' \f(CW\*(C`Bcc\*(C'\fR header shiznit is only used if no
\&\f(CW\*(C`Received\*(C'\fR was found. Y'all KNOW dat shit, muthafucka!  That seems ta be tha dopest explanation of tha \s-1RFC.\s0
.Sp
As alternative, you may also specify tha \f(CW\*(C`to\*(C'\fR option ta a shitload of tha senders
(for instizzle Mail::Transport::SMTP::send(to) ta overrule any shiznit
found up in tha message itself bout tha destination.
.ie n .IP "Error: Transportaz of type $class cannot send." 4
.el .IP "Error: Transportaz of type \f(CW$class\fR cannot send." 4
.IX Item "Error: Transportaz of type $class cannot send."
Da Mail::Transhiznit object of tha specified type can not bust lyrics,
but only receive message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
