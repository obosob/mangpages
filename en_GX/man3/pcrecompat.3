.TH PCRECOMPAT 3 "19 March 2013" "PCRE 8.33"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH "DIFFERENCES BETWEEN PCRE AND PERL"
.rs
.sp
This document raps bout tha differences up in tha ways dat PCRE n' Perl handle
regular expressions. Da differences busted lyrics bout here is wit respect ta Perl
versions 5.10 n' above.
.P
1. PCRE has only a subset of Perlz Unicode support. Detailz of what tha fuck it do
have is given up in the
.\" HREF
\fBpcreunicode\fP
.\"
page.
.P
2. PCRE allows repeat quantifiers only on parenthesized assertions yo, but they do
not mean what tha fuck you might think. For example, (?!a){3} do not assert dat the
next three charactas is not "a". Well shiiiit, it just asserts dat tha next characta is
not "a" three times (in principle: PCRE optimizes dis ta run tha assertion
just once). Perl allows repeat quantifiers on other assertions like fuckin \eb yo, but
these do not seem ta have any use.
.P
3. Capturin subpatterns dat occur inside wack lookahead assertions are
counted yo, but they entries up in tha offsets vector is never set. Perl sometimes
(but not always) sets its numerical variablez from inside wack assertions.
.P
4. Though binary zero charactas is supported up in tha subject string, they are
not allowed up in a pattern strang cuz it is passed as a aiiight C string,
terminated by zero. Da escape sequence \e0 can be used up in tha pattern to
represent a funky-ass binary zero.
.P
5. Da followin Perl escape sequences is not supported: \el, \eu, \eL,
\eU, n' \eN when followed by a cold-ass lil characta name or Unicode value. (\eN on its
own, matchin a non-newline character, is supported.) In fact these are
implemented by Perlz general string-handlin n' is not part of its pattern
matchin engine. If any of these is encountered by PCRE, a error is
generated by default. But fuck dat shiznit yo, tha word on tha street is dat if tha PCRE_JAVASCRIPT_COMPAT option is set,
\eU n' \eu is interpreted as JavaScript interprets em.
.P
6. Da Perl escape sequences \ep, \eP, n' \eX is supported only if PCRE is
built wit Unicode characta property support. Da propertizzles dat can be
tested wit \ep n' \eP is limited ta tha general category propertizzles such as
Lu n' Nd, script names like fuckin Greek or Han, n' tha derived propertizzles Any
and L&. PCRE do support tha Cs (surrogate) property, which Perl do not; the
Perl documentation say "Because Perl hides tha need fo' tha user ta understand
the internal representation of Unicode characters, there is no need to
implement tha somewhat messy concept of surrogates."
.P
7. PCRE do support tha \eQ...\eE escape fo' quotin substrings. Charactas in
between is treated as literals. This is slightly different from Perl up in dat $
and @ is also handled as literals inside tha quotes. In Perl, they cause
variable interpolation (but of course PCRE aint gots variables). Note the
followin examples:
.sp
    Pattern            PCRE matches      Perl matches
.sp
.\" JOIN
    \eQabc$xyz\eE        abc$xyz           abc followed by the
                                           contentz of $xyz
    \eQabc\e$xyz\eE       abc\e$xyz          abc\e$xyz
    \eQabc\eE\e$\eQxyz\eE   abc$xyz           abc$xyz
.sp
Da \eQ...\eE sequence is recognized both inside n' outside characta classes.
.P
8. Fairly obviously, PCRE do not support tha (?{code}) n' (??{code})
constructions. But fuck dat shiznit yo, tha word on tha street is dat there is support fo' recursive patterns. This is not
available up in Perl 5.8 yo, but it is up in Perl 5.10 fo' realz. Also, tha PCRE "callout"
feature allows a external function ta be called durin pattern matching. Right back up in yo muthafuckin ass. See
the
.\" HREF
\fBpcrecallout\fP
.\"
documentation fo' details.
.P
9. Right back up in yo muthafuckin ass. Subpatterns dat is called as subroutines (whether or not recursively) are
always treated as atomic crews up in PCRE. This is like Python yo, but unlike Perl.
Captured joints dat is set outside a subroutine call can be reference from
inside up in PCRE yo, but not up in Perl. There be a gangbangin' finger-lickin' rap dat explains these
differences up in mo' detail up in the
.\" HTML <a href="pcrepattern.html#recursiondifference">
.\" </a>
section on recursion differences from Perl
.\"
in the
.\" HREF
\fBpcrepattern\fP
.\"
page.
.P
10. If any of tha backtrackin control verbs is used up in a subpattern dat is
called as a subroutine (whether or not recursively), they effect is confined
to dat subpattern; it do not extend ta tha surroundin pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. This is not
always tha case up in Perl. In particular, if (*THEN) is present up in a crew that
is called as a subroutine, its action is limited ta dat group, even if the
group do not contain any | characters. Note dat such subpatterns are
processed as anchored all up in tha point where they is tested.
.P
11. If a pattern gotz nuff mo' than one backtrackin control verb, tha first
one dat is backtracked onto acts, n' you can put dat on yo' toast. For example, up in tha pattern
A(*COMMIT)B(*PRUNE)C a gangbangin' failure up in B triggers (*COMMIT) yo, but a gangbangin' failure up in C
triggers (*PRUNE). Perlz behaviour is mo' complex; up in nuff cases it is the
same as PCRE yo, but there be examplez where it differs.
.P
12. Most backtrackin verbs up in assertions have they aiiight actions. They are
not confined ta tha assertion.
.P
13. There is some differences dat is concerned wit tha settingz of captured
strings when part of a pattern is repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For example, matchin "aba" against
the pattern /^(a(b)?)+$/ up in Perl leaves $2 unset yo, but up in PCRE it is set ta "b".
.P
14. PCREz handlin of duplicate subpattern numbers n' duplicate subpattern
names aint as general as Perl's. This be a cold-ass lil consequence of tha fact tha PCRE
works internally just wit numbers, rockin a external table ta translate
between numbers n' names. In particular, a pattern like fuckin (?|(?<a>A)|(?<b)B),
where tha two capturin parentheses have tha same number but different names,
is not supported, n' causes a error at compile time. If it was allowed, it
would not be possible ta distinguish which parentheses matched, cuz both
names map ta capturin subpattern number 1. To avoid dis confusin thang,
an error is given at compile time.
.P
15. Perl recognizes comments up in some places dat PCRE do not, fo' example,
between tha ( n' ? all up in tha start of a subpattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. If tha /x modifier is set,
Perl allows white space between ( n' ? but PCRE never do, even if the
PCRE_EXTENDED option is set.
.P
16. In PCRE, tha upper/lower case characta propertizzles Lu n' Ll is not
affected when case-independent matchin is specified. Y'all KNOW dat shit, muthafucka! For example, \ep{Lu}
always matches a upper case letter n' shit. I be thinkin Perl has chizzled up in dis respect;
in tha release all up in tha time of freestylin (5.16), \ep{Lu} n' \ep{Ll} match all
letters, regardless of case, when case independence is specified.
.P
17. PCRE serves up some extensions ta tha Perl regular expression facilities.
Perl 5.10 includes freshly smoked up features dat is not up in earlier versionz of Perl, some
of which (like fuckin named parentheses) done been up in PCRE fo' some time. This list
is wit respect ta Perl 5.10:
.sp
(a) Although lookbehind assertions up in PCRE must match fixed length strings,
each alternatizzle branch of a lookbehind assertion can match a gangbangin' finger-lickin' different length
of string. Perl requires dem all ta have tha same length.
.sp
(b) If PCRE_DOLLAR_ENDONLY is set n' PCRE_MULTILINE aint set, tha $
meta-characta matches only all up in tha straight-up end of tha string.
.sp
(c) If PCRE_EXTRA is set, a funky-ass backslash followed by a letta wit no special
meanin is faulted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Otherwise, like Perl, tha backslash is on tha fuckin' down-lowly ignored.
(Perl can be made ta issue a warning.)
.sp
(d) If PCRE_UNGREEDY is set, tha greedinizz of tha repetizzle quantifiers is
inverted, dat is, by default they is not greedy yo, but if followed by a
question mark they are.
.sp
(e) PCRE_ANCHORED can be used at matchin time ta force a pattern ta be tried
only all up in tha straight-up original gangsta matchin posizzle up in tha subject string.
.sp
(f) Da PCRE_NOTBOL, PCRE_NOTEOL, PCRE_NOTEMPTY, PCRE_NOTEMPTY_ATSTART, and
PCRE_NO_AUTO_CAPTURE options fo' \fBpcre_exec()\fP have no Perl equivalents.
.sp
(g) Da \eR escape sequence can be restricted ta match only CR, LF, or CRLF
by tha PCRE_BSR_ANYCRLF option.
.sp
(h) Da callout facilitizzle is PCRE-specific.
.sp
(i) Da partial matchin facilitizzle is PCRE-specific.
.sp
(j) Patterns compiled by PCRE can be saved n' re-used at a lata time, even on
different hosts dat have tha other endianness. But fuck dat shiznit yo, tha word on tha street is dat dis do not apply to
optimized data pimped by tha just-in-time compiler.
.sp
(k) Da alternatizzle matchin functions (\fBpcre_dfa_exec()\fP,
\fBpcre16_dfa_exec()\fP n' \fBpcre32_dfa_exec()\fP,) match up in a gangbangin' finger-lickin' different way
and is not Perl-compatible.
.sp
(l) PCRE recognizes some special sequences like fuckin (*CR) all up in tha start of
a pattern dat set overall options dat cannot be chizzled within tha pattern.
.
.
.SH AUTHOR
.rs
.sp
.nf
Philip Hazel
Universitizzle Computin Service
Cambridge CB2 3QH, England.
.fi
.
.
.SH REVISION
.rs
.sp
.nf
Last updated: 19 March 2013
Copyright (c) 1997-2013 Universitizzle of Cambridge.
.fi
