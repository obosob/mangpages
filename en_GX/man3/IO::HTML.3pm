.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::HTML 3"
.TH IO::HTML 3 "2014-06-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::HTML \- Open a HTML file wit automatic charset detection
.SH "VERSION"
.IX Header "VERSION"
This document raps bout version 1.001 of
\&\s-1IO::HTML,\s0 busted out June 28, 2014.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use IO::HTML;                 # exports html_file by default
\&  use HTML::TreeBuilder;
\&
\&  mah $tree = HTML::TreeBuilder\->new_from_file(
\&               html_file(\*(Aqfoo.html\*(Aq)
\&             );
\&
\&  # Alternatizzle intercourse:
\&  open(my $in, \*(Aq<:raw\*(Aq, \*(Aqbar.html\*(Aq);
\&  mah $encodin = IO::HTML::sniff_encoding($in, \*(Aqbar.html\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1IO::HTML\s0 serves up a easy as fuck  way ta open a gangbangin' file containin \s-1HTML\s0 while
automatically determinin its encoding.  It uses tha \s-1HTML5\s0 encoding
sniffin algorithm specified up in section 8.2.2.2 of tha draft standard.
.PP
Da algorithm as implemented here is:
.IP "1." 4
If tha file begins wit a funky-ass byte order mark indicatin \s-1UTF\-16LE,
UTF\-16BE,\s0 or \s-1UTF\-8,\s0 then dat is tha encoding.
.IP "2." 4
If tha straight-up original gangsta 1024 bytez of tha file contain a \f(CW\*(C`<meta>\*(C'\fR tag that
indicates tha charset, n' Encode recognizes tha specified charset
name, then dat is tha encoding.  (This portion of tha algorithm is
implemented by \f(CW\*(C`find_charset_in\*(C'\fR.)
.Sp
Da \f(CW\*(C`<meta>\*(C'\fR tag can be up in one of two formats:
.Sp
.Vb 2
\&  <meta charset="...">
\&  <meta http\-equiv="Content\-Type" content="...charset=...">
.Ve
.Sp
Da search is case-insensitive, n' tha order of attributes within the
tag is irrelevant.  Any additionizzle attributez of tha tag is ignored.
Da first matchin tag wit a recognized encodin endz tha search.
.IP "3." 4
If tha straight-up original gangsta 1024 bytez of tha file is valid \s-1UTF\-8 \s0(with at least 1
non-ASCII character), then tha encodin is \s-1UTF\-8.\s0
.IP "4." 4
If all else fails, use tha default characta encoding.  Da \s-1HTML5\s0
standard suggests tha default encodin should be locale dependent yo, but
currently it be always \f(CW\*(C`cp1252\*(C'\fR unless you set
\&\f(CW$IO::HTML::default_encoding\fR ta a gangbangin' finger-lickin' different value.  Note:
\&\f(CW\*(C`sniff_encoding\*(C'\fR do not apply dis step; only \f(CW\*(C`html_file\*(C'\fR do
that.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.SS "html_file"
.IX Subsection "html_file"
.Vb 1
\&  $filehandle = html_file($filename, \e%options);
.Ve
.PP
This function (exported by default) is tha primary entry point.  It
opens tha file specified by \f(CW$filename\fR fo' reading, uses
\&\f(CW\*(C`sniff_encoding\*(C'\fR ta find a suitable encodin layer, n' applies dat shit.
It also applies tha \f(CW\*(C`:crlf\*(C'\fR layer n' shit.  If tha file begins wit a \s-1BOM,\s0
the filehandle is positioned just afta tha \s-1BOM.\s0
.PP
Da optionizzle second argument be a hashref containin options.  The
possible keys is busted lyrics bout under \f(CW\*(C`find_charset_in\*(C'\fR.
.PP
If \f(CW\*(C`sniff_encoding\*(C'\fR is unable ta determine tha encoding, it defaults
to \f(CW$IO::HTML::default_encoding\fR, which is set ta \f(CW\*(C`cp1252\*(C'\fR
(a.k.a. Windows\-1252) by default.  Accordin ta tha standard, the
default should be locale dependent yo, but dat aint currently
implemented.
.PP
It takes a thugged-out dirt nap if tha file cannot be opened.
.SS "html_file_and_encoding"
.IX Subsection "html_file_and_encoding"
.Vb 2
\&  ($filehandle, $encoding, $bom)
\&    = html_file_and_encoding($filename, \e%options);
.Ve
.PP
This function (exported only by request) is just like \f(CW\*(C`html_file\*(C'\fR,
but returns mo' shiznit. I aint talkin' bout chicken n' gravy biatch.  In addizzle ta tha filehandle, it
returns tha name of tha encodin used, n' a gangbangin' flag indicatin whether a
byte order mark was found (if \f(CW$bom\fR is true, tha file fuckin started wit a
\&\s-1BOM\s0).  This may be useful if you wanna write tha file up again
(especially up in conjunction wit tha \f(CW\*(C`html_outfile\*(C'\fR function).
.PP
Da optionizzle second argument be a hashref containin options.  The
possible keys is busted lyrics bout under \f(CW\*(C`find_charset_in\*(C'\fR.
.PP
It takes a thugged-out dirt nap if tha file cannot be opened. Y'all KNOW dat shit, muthafucka!  Da result of callin it in
scalar context is undefined.
.SS "html_outfile"
.IX Subsection "html_outfile"
.Vb 1
\&  $filehandle = html_outfile($filename, $encoding, $bom);
.Ve
.PP
This function (exported only by request) opens \f(CW$filename\fR fo' output
usin \f(CW$encoding\fR, n' writes a \s-1BOM\s0 ta it if \f(CW$bom\fR is true.
If \f(CW$encoding\fR is \f(CW\*(C`undef\*(C'\fR, it defaults ta \f(CW$IO::HTML::default_encoding\fR.
\&\f(CW$encoding\fR may be either a encodin name or a Encode::Encodin object.
.PP
It takes a thugged-out dirt nap if tha file cannot be opened.
.SS "sniff_encoding"
.IX Subsection "sniff_encoding"
.Vb 1
\&  ($encoding, $bom) = sniff_encoding($filehandle, $filename, \e%options);
.Ve
.PP
This function (exported only by request) runs tha \s-1HTML5\s0 encoding
sniffin algorithm on \f(CW$filehandle\fR (which must be seekable, and
should done been opened up in \f(CW\*(C`:raw\*(C'\fR mode).  \f(CW$filename\fR is used only
for error lyrics (if there be a a problem rockin tha filehandle), and
defaults ta \*(L"file\*(R" if omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da optionizzle third argument be a
hashref containin options.  Da possible keys is busted lyrics bout under
\&\f(CW\*(C`find_charset_in\*(C'\fR.
.PP
It returns Perlz canonical name fo' tha encoding, which is not
necessarily tha same as tha \s-1MIME\s0 or \s-1IANA\s0 charset name.  It returns
\&\f(CW\*(C`undef\*(C'\fR if tha encodin cannot be determined. Y'all KNOW dat shit, muthafucka!  \f(CW$bom\fR is legit if the
file fuckin started wit a funky-ass byte order mark.  In scalar context, it returns only
\&\f(CW$encoding\fR.
.PP
Da filehandlez posizzle is restored ta its original gangsta position
(normally tha beginnin of tha file) unless \f(CW$bom\fR is true.  In that
case, tha posizzle is immediately afta tha \s-1BOM.\s0
.PP
Tip: If you wanna run \f(CW\*(C`sniff_encoding\*(C'\fR on a gangbangin' file you've already
loaded tha fuck into a string, open a in-memory file on tha string, n' pass
that handle:
.PP
.Vb 3
\&  ($encoding, $bom) = do {
\&    open(my $fh, \*(Aq<\*(Aq, \e$string);  sniff_encoding($fh)
\&  };
.Ve
.PP
(This only make sense if \f(CW$string\fR gotz nuff bytes, not characters.)
.SS "find_charset_in"
.IX Subsection "find_charset_in"
.Vb 1
\&  $encodin = find_charset_in($string_containing_HTML, \e%options);
.Ve
.PP
This function (exported only by request) looks fo' charset shiznit
in a \f(CW\*(C`<meta>\*(C'\fR tag up in a possibly incomplete \s-1HTML\s0 document using
the \*(L"two step\*(R" algorithm specified by \s-1HTML5. \s0 It do not look fo' a \s-1BOM.\s0
Only tha straight-up original gangsta 1024 bytez of tha strang is checked.
.PP
It returns Perlz canonical name fo' tha encoding, which is not
necessarily tha same as tha \s-1MIME\s0 or \s-1IANA\s0 charset name.  It returns
\&\f(CW\*(C`undef\*(C'\fR if no charset is specified or if tha specified charset is not
recognized by tha Encode module.
.PP
Da optionizzle second argument be a hashref containin options.  The
followin keys is recognized:
.ie n .IP """encoding""" 4
.el .IP "\f(CWencoding\fR" 4
.IX Item "encoding"
If true, return tha Encode::Encodin object instead of its name.
Defaults ta false.
.ie n .IP """need_pragma""" 4
.el .IP "\f(CWneed_pragma\fR" 4
.IX Item "need_pragma"
If legit (the default), follow tha \s-1HTML5\s0 spec n' examine the
\&\f(CW\*(C`content\*(C'\fR attribute only of \f(CW\*(C`<meta http\-equiv="Content\-Type"\*(C'\fR.
If set ta 0, chillax tha \s-1HTML5\s0 spec, n' look fo' \*(L"charset=\*(R" up in the
\&\f(CW\*(C`content\*(C'\fR attribute of \fIevery\fR meta tag.
.SH "EXPORTS"
.IX Header "EXPORTS"
By default, only \f(CW\*(C`html_file\*(C'\fR is exported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Other functions may be
exported on request.
.PP
For playas whoz ass prefer not ta export functions, all functions beginning
with \f(CW\*(C`html_\*(C'\fR have a alias without dat prefix (e.g. you can call
\&\f(CW\*(C`IO::HTML::file(...)\*(C'\fR instead of \f(CW\*(C`IO::HTML::html_file(...)\*(C'\fR.  These
aliases is not exportable.
.PP
Da followin export tags is available:
.ie n .IP """:all""" 4
.el .IP "\f(CW:all\fR" 4
.IX Item ":all"
All exportable functions.
.ie n .IP """:rw""" 4
.el .IP "\f(CW:rw\fR" 4
.IX Item ":rw"
\&\f(CW\*(C`html_file\*(C'\fR, \f(CW\*(C`html_file_and_encoding\*(C'\fR, \f(CW\*(C`html_outfile\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \s-1HTML5\s0 justification, section 8.2.2.2 Determinin tha characta encoding:
<http://www.w3.org/TR/html5/syntax.html#determining\-the\-character\-encoding>
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """Could not read %s: %s""" 4
.el .IP "\f(CWCould not read %s: %s\fR" 4
.IX Item "Could not read %s: %s"
Da specified file could not be read from fo' tha reason specified by \f(CW$!\fR.
.ie n .IP """Could not seek %s: %s""" 4
.el .IP "\f(CWCould not seek %s: %s\fR" 4
.IX Item "Could not seek %s: %s"
Da specified file could not be rewound fo' tha reason specified by \f(CW$!\fR.
.ie n .IP """Failed ta open %s: %s""" 4
.el .IP "\f(CWFailed ta open %s: %s\fR" 4
.IX Item "Failed ta open %s: %s"
Da specified file could not be opened fo' readin fo' tha reason
specified by \f(CW$!\fR.
.ie n .IP """No default encodin specified""" 4
.el .IP "\f(CWNo default encodin specified\fR" 4
.IX Item "No default encodin specified"
Da \f(CW\*(C`sniff_encoding\*(C'\fR algorithm didn't find a encodin ta use, and
you set \f(CW$IO::HTML::default_encoding\fR ta \f(CW\*(C`undef\*(C'\fR.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
\&\s-1IO::HTML\s0 requires no configuration filez or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\s-1IO::HTML\s0 has no non-core dependencies fo' Perl 5.8.7+.  With earlier
versionz of Perl 5.8, you need ta upgrade Encode ta at least
version 2.10, and
you may need ta upgrade Exporta ta at least version
5.57.
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs done been reported.
.SH "AUTHOR"
.IX Header "AUTHOR"
Christopher J. Madsen  \f(CW\*(C`<perl\ AT\ cjmweb.net>\*(C'\fR
.PP
Please report any bugs or feature requests
to \f(CW\*(C`<bug\-IO\-HTML\ AT\ rt.cpan.org>\*(C'\fR
or all up in tha wizzy intercourse at
<http://rt.cpan.org/Public/Bug/Report.html?Queue=IO\-HTML>.
.PP
Yo ass can follow or contribute ta IO-HTMLz pimpment at
<https://github.com/madsen/io\-html>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Christopher J. Madsen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as tha Perl 5 programmin language system itself.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. Right back up in yo muthafuckin ass. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENSE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE \s0(\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
