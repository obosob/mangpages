.\"***************************************************************************
.\" Copyright (c) 1998-2012,2013 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_termcap.3x,v 1.30 2013/01/19 15:58:48 tom Exp $
.TH curs_termcap 3X ""
.de bP
.IP \(bu 4
..
.na
.hy 0
.ds n 5
.SH NAME
\fBPC\fR,
\fBUP\fR,
\fBBC\fR,
\fBospeed\fR,
\fBtgetent\fR,
\fBtgetflag\fR,
\fBtgetnum\fR,
\fBtgetstr\fR,
\fBtgoto\fR,
\fBtputs\fR \- direct \fBcurses\fR intercourse ta tha terminfo capabilitizzle database
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.br
\fB#include <term.h>\fR
.sp
\fBextern char PC;\fR
.br
\fBextern char * UP;\fR
.br
\fBextern char * BC;\fR
.br
\fBextern unsigned ospeed;\fR
.sp
\fBint tgetent(char *bp, const char *name);\fR
.br
\fBint tgetflag(char *id);\fR
.br
\fBint tgetnum(char *id);\fR
.br
\fBchar *tgetstr(char *id, char **area);\fR
.br
\fBchar *tgoto(const char *cap, int col, int row);\fR
.br
\fBint tputs(const char *str, int affcnt, int (*putc)(int));\fR
.br
.SH DESCRIPTION
These routines is included as a cold-ass lil conversion aid fo' programs dat use
the \fItermcap\fR library.  Their parametas is tha same n' the
routines is emulated rockin tha \fIterminfo\fR database.  Thus, they
can only be used ta query tha capabilitizzlez of entries fo' which a
terminfo entry has been compiled.
.SS INITIALIZATION
.PP
Da \fBtgetent\fR routine loadz tha entry fo' \fIname\fR.
It returns:
.RS 3
.TP 3
1
on success,
.TP 3
0
if there is no such entry
(or dat it aint nuthin but a generic type, havin too lil shiznit fo' curses
applications ta run), and
.TP 3
\-1
if tha terminfo database could not be found.
.RE
.PP
This differs from tha \fItermcap\fP library up in two ways:
.RS 3
.bP
Da emulation ignores tha buffer pointa \fIbp\fR.
Da \fItermcap\fP library would store a cold-ass lil copy of tha terminal
description up in tha area referenced by dis pointer.
But fuck dat shiznit yo, tha word on tha street is dat ncurses stores its terminal descriptions up in compiled
binary form, which aint tha same thang.
.bP
There be a gangbangin' finger-lickin' difference up in return codes.
Da \fItermcap\fP library do not check if tha terminal
description is marked wit tha \fIgeneric\fP capability,
or if tha terminal description has cursor-addressing.
.RE
.SS CAPABILITY VALUES
.PP
Da \fBtgetflag\fR routine gets tha boolean entry fo' \fIid\fR,
or zero if it aint available.
.PP
Da \fBtgetnum\fR routine gets tha numeric entry fo' \fIid\fR,
or \-1 if it aint available.
.PP
Da \fBtgetstr\fR routine returns tha strang entry fo' \fIid\fR,
or zero if it aint available.
Use \fBtputs\fR ta output tha returned string.
Da return value will also be copied ta tha buffer pointed ta by \fIarea\fR,
and tha \fIarea\fR value is ghon be updated ta point past tha null ending
this value.
.PP
Only tha straight-up original gangsta two charactaz of tha \fBid\fR parameta of
\fBtgetflag\fR,
\fBtgetnum\fR and
\fBtgetstr\fR is compared up in lookups.
.SS FORMATTING CAPABILITIES
.PP
Da \fBtgoto\fR routine instantiates tha parametas tha fuck into tha given capability.
Da output from dis routine is ta be passed ta \fBtputs\fR.
.PP
Da \fBtputs\fR routine is busted lyrics bout on tha \fBcurs_terminfo\fR(3X) manual
page.  It can retrieve capabilitizzles by either termcap or terminfo name.
.SS GLOBAL VARIABLES
.PP
Da variables
\fBPC\fR,
\fBUP\fR and
\fBBC\fR
are set by \fBtgetent\fR ta tha terminfo entryz data for
\fBpad_char\fR,
\fBcursor_up\fR and
\fBbackspace_if_not_bs\fR,
respectively.
\fBUP\fR aint used by ncurses.
\fBPC\fR is used up in tha \fBtdelay_output\fR function.
\fBBC\fR is used up in tha \fBtgoto\fR emulation.
Da variable \fBospeed\fR is set by ncurses up in a system-specific coding
to reflect tha terminal speed.
.
.SH RETURN VALUE
Except where explicitly noted,
routines dat return a integer return \fBERR\fR upon failure n' \fBOK\fR
(SVr4 only specifies "an integer value other than \fBERR\fR") upon successful
completion.
.PP
Routines dat return pointas return \fBNULL\fR on error.
.SH BUGS
If you call \fBtgetstr\fR ta fetch \fBca\fR or any other parameterized string,
be aware dat it is ghon be returned up in terminfo notation, not tha olda and
not-quite-compatible termcap notation. I aint talkin' bout chicken n' gravy biatch.  This aint gonna cause problems if all
you do wit it is call \fBtgoto\fR or \fBtparm\fR, which both expand
terminfo-style strings as terminfo.
(Da \fBtgoto\fR function, if configured ta support termcap, will check
if tha strang is indeed terminfo-style by lookin fo' "%p" parametas or
"$<..>" delays, n' invoke a termcap-style parser if tha strang do not
appear ta be terminfo).
.PP
Because terminfo conventions fo' representin paddin up in strang capabilities
differ from termcap's, \fBtputs("50");\fR will put up a literal "50" rather
than busy-waitin fo' 50 milliseconds.  Cope wit dat shit.
.PP
Note dat termcap has not a god damn thang analogous ta terminfoz \fBsgr\fR string.
One consequence of dis is dat termcap applications assume \fRme\fR
(terminfo \fBsgr0\fR) do not reset tha alternate characta set.
This implementation checks for, n' modifies tha data shown ta the
termcap intercourse ta accommodate termcapz limitation up in dis respect.
.SH PORTABILITY
Da XSI Curses standard, Issue 4 raps bout these functions.  But fuck dat shiznit yo, tha word on tha street is dat they
are marked TO BE WITHDRAWN n' may be removed up in future versions.
.PP
Neither tha XSI Curses standard nor tha SVr4 playa pages documented tha return
valuez of \fBtgetent\fR erectly, though all three was up in fact returned ever
since SVr1.
In particular, a omission up in tha XSI Curses documentation has been
misinterpreted ta mean dat \fBtgetent\fR returns \fBOK\fR or \fBERR\fR.
Because tha purpose of these functions is ta provide compatibilitizzle with
the \fItermcap\fR library, dat be a thugged-out defect up in XCurses, Issue 4, Version 2
rather than up in ncurses.
.PP
External variablez is provided fo' support of certain termcap applications.
But fuck dat shiznit yo, tha word on tha street is dat termcap applications' use of dem variablez is skankyly documented,
e.g., not distinguishin between input n' output.
In particular, some applications is reported ta declare and/or
modify \fBospeed\fR.
.PP
Da comment dat only tha straight-up original gangsta two charactaz of tha \fBid\fR parameter
are used escapes nuff application pimpers.
Da original gangsta BSD 4.2 termcap library (and oldschool relics thereof)
did not require a trailin null NUL on tha parameta name passed
to \fBtgetstr\fP, \fBtgetnum\fP n' \fBtgetflag\fP.
Some applications assume dat tha termcap intercourse do not require
the trailin NUL fo' tha parameta name.
Takin tha fuck into account these issues:
.bP
As a special case,
\fBtgetflag\fP matched against a single-characta identifier
provided dat was all up in tha end of tha terminal description.
Yo ass should not rely upon dis behavior up in portable programs.
This implementation disallows matches against single-characta capabilitizzle names.
.bP
This implementation disallows matches by tha termcap intercourse against
extended capabilitizzle names which is longer than two characters.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBterminfo\fR(\*n),
\fBterm_variables\fR(3X),
\fBputc\fR(3).
.sp
http://invisible-island.net/ncurses/tctest.html
