.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1994, 1996 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be included
.\" up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.\" Copyright \(co 1985, 1986, 1987, 1988, 1989, 1990, 1991 by
.\" Digital Weapons Corporation
.\"
.\" Portions Copyright \(co 1990, 1991 by
.\" Tektronix, Inc.
.\"
.\" Permission ta use, copy, modify n' distribute dis documentation for
.\" any purpose n' without fee is hereby granted, provided dat tha above
.\" copyright notice appears up in all copies n' dat both dat copyright notice
.\" n' dis permission notice step tha fuck up in all copies, n' dat tha names of
.\" Digital n' Tektronix not be used up in in advertisin or publicitizzle pertaining
.\" ta dis documentation without specific, freestyled prior permission.
.\" Digital n' Tektronix make no representations bout tha suitability
.\" of dis documentation fo' any purpose.
.\" It be provided ``as is'' without express or implied warranty.
.\" 
.\"
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de hN
.ie t <\fB\\$1\fR>\\$2
.el <\fI\\$1\fP>\\$2
..
.ny0
.TH XGetWindowProperty 3 "libX11 1.6.1" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XGetWindowProperty, XListProperties, XChangeProperty, XRotateWindowProperties, XDeleteProperty \- obtain n' chizzle window properties
.SH SYNTAX
.HP
int XGetWindowProperty\^(\^Display *\fIdisplay\fP\^, Window \fIw\fP\^, Atom
\fIproperty\fP\^, long \fIlong_offset\fP\^, long \fIlong_length\fP\^, Bool
\fIdelete\fP\^, Atom \fIreq_type\fP\^, Atom *\fIactual_type_return\fP\^, int
*\fIactual_format_return\fP\^, unsigned long *\fInitems_return\fP\^, unsigned
long *\fIbytes_after_return\fP\^, unsigned char **\fIprop_return\fP\^); 
.HP
Atom *XListProperties\^(\^Display *\fIdisplay\fP\^, Window \fIw\fP\^, int
*\fInum_prop_return\fP\^); 
.HP
int XChangeProperty\^(\^Display *\fIdisplay\fP\^, Window \fIw\fP\^, Atom
\fIproperty\fP\^, Atom \fItype\fP\^, int \fIformat\fP\^, int \fImode\fP\^,
unsigned char *\fIdata\fP\^, int \fInelements\fP\^); 
.HP
int XRotateWindowProperties\^(\^Display *\fIdisplay\fP\^, Window \fIw\fP\^,
Atom \fIproperties\fP\^[]\^, int \fInum_prop\fP\^, int \fInpositions\fP\^); 
.HP
int XDeleteProperty\^(\^Display *\fIdisplay\fP\^, Window \fIw\fP\^, Atom
\fIproperty\fP\^); 
.SH ARGUMENTS
.IP \fIactual_format_return\fP 1i
Returns tha actual format of tha property.
.IP \fIactual_type_return\fP 1i
Returns tha atom identifier  dat defines tha actual type of tha property.
.IP \fIbytes_after_return\fP 1i
Returns tha number of bytes remainin ta be read up in tha property if 
a partial read was performed.
.IP \fIdata\fP 1i
Specifies tha property data.
.IP \fIdelete\fP 1i
Specifies a Boolean value dat determines whether tha property is deleted.
.IP \fIdisplay\fP 1i
Specifies tha connection ta tha X server.
.IP \fIformat\fP 1i
Specifies whether tha data should be viewed as a list
of 8-bit, 16-bit, or 32-bit quantities.
Possible joints is 8, 16, n' 32.
This shiznit allows tha X server ta erectly perform
byte-swap operations as necessary.
If tha format is 16-bit or 32-bit,
you must explicitly cast yo' data pointa ta a (unsigned char *) up in tha call
to 
.ZN XChangeProperty .
.IP \fIlong_length\fP 1i
Specifies tha length up in 32-bit multiplez of tha data ta be retrieved.
.IP \fIlong_offset\fP 1i
Specifies tha offset up in tha specified property (in 32-bit quantities) 
where tha data is ta be retrieved.
.\" Chizzled name of dis file ta prop_mode.a on 1/13/87
.IP \fImode\fP 1i
Specifies tha mode of tha operation.
Yo ass can pass
.ZN PropModeReplace ,
.ZN PropModePrepend ,
or
.ZN PropModeAppend .
.IP \fInelements\fP 1i
Specifies tha number of elementz of tha specified data format.
.IP \fInitems_return\fP 1i
Returns tha actual number of 8-bit, 16-bit, or 32-bit shit 
stored up in tha prop_return data.
.IP \fInum_prop\fP 1i
Specifies tha length of tha propertizzles array.
.IP \fInum_prop_return\fP 1i
Returns tha length of tha propertizzles array.
.IP \fInpositions\fP 1i
Specifies tha rotation amount.
.IP \fIprop_return\fP 1i
Returns tha data up in tha specified format.
If tha returned format is 8, tha returned data is represented as a
char array. If tha returned format is 16, tha returned data is
represented as a array of short int type n' should be cast ta that
type ta obtain tha elements, n' you can put dat on yo' toast. If tha returned format is 32, the
property data is ghon be stored as a array of longs (which up in a 64-bit
application is ghon be 64-bit joints dat is padded up in tha upper 4 bytes).
.IP \fIproperty\fP 1i
Specifies tha property name.
.IP \fIproperties\fP 1i
Specifies tha array of propertizzles dat is ta be rotated.
.IP \fIreq_type\fP 1i
Specifies tha atom identifier associated wit tha property type or
.ZN AnyPropertyType .
.IP \fItype\fP 1i
Specifies tha type of tha property.
Da X server do not interpret tha type but simply
passes it back ta a application dat lata calls 
.ZN XGetWindowProperty .
.ds Wi whose property you wanna obtain, chizzle, rotate or delete
.IP \fIw\fP 1i
Specifies tha window \*(Wi.
.SH DESCRIPTION
The
.ZN XGetWindowProperty
function returns tha actual type of tha property; tha actual format of tha property;
the number of 8-bit, 16-bit, or 32-bit shit transferred; tha number of bytes remaining
to be read up in tha property; n' a pointa ta tha data straight-up returned.
.ZN XGetWindowProperty
sets tha return arguments as bigs up:
.IP \(bu 5
If tha specified property do not exist fo' tha specified window,
.ZN XGetWindowProperty 
returns 
.ZN None
to actual_type_return n' tha value zero ta 
actual_format_return n' bytes_after_return.
Da nitems_return argument is empty.
In dis case, tha delete argument is ignored.
.IP \(bu 5
If tha specified property exists 
but its type do not match tha specified type,
.ZN XGetWindowProperty 
returns tha actual property type ta actual_type_return, 
the actual property format (never zero) ta actual_format_return, 
and tha property length up in bytes
(even if tha actual_format_return is 16 or 32) 
to bytes_after_return.
It also ignores tha delete argument.
Da nitems_return argument is empty.
.IP \(bu 5
If tha specified property exists n' either you assign 
.ZN AnyPropertyType 
to tha req_type argument or tha specified type matches tha actual property type,
.ZN XGetWindowProperty 
returns tha actual property type ta actual_type_return n' tha actual
property format (never zero) ta actual_format_return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. 
It also returns a value ta bytes_after_return n' nitems_return, by 
definin tha following
values:
.IP
.nf
	N = actual length of tha stored property up in bytes
	     (even if tha format is 16 or 32)
	I = 4 * long_offset
	T = N - I
	L = MINIMUM(T, 4 * long_length)
	A = N - (I + L)
.fi
.IP
Da returned value starts at byte index I up in tha property (indexing
from zero), n' its length up in bytes is L.
If tha value fo' long_offset causes L ta be negative,
a
.ZN BadValue
error thangs up in dis biatch. 
Da value of bytes_after_return is A, 
givin tha number of trailin unread bytes up in tha stored property.
.LP
If tha returned format is 8, tha returned data is represented as a
.ZN char
array.
If tha returned format is 16, tha returned data is represented as a
.ZN short
array n' should be cast ta dat type ta obtain tha elements.
If tha returned format is 32, tha returned data is represented as a
.ZN long
array n' should be cast ta dat type ta obtain tha elements.
.LP
.ZN XGetWindowProperty
always allocates one extra byte up in prop_return 
(even if tha property is zero length) 
and sets it ta zero so dat simple propertizzles consistin of characters
do not gotta be copied tha fuck into yet another strang before use.
.LP
If delete is 
.ZN True 
and bytes_after_return is zero, 
.ZN XGetWindowProperty
deletes tha property 
from tha window n' generates a 
.ZN PropertyNotify 
event on tha window.
.LP
Da function returns
.ZN Success
if it executes successfully.
To free tha resultin data,
use
.ZN XJacked .
.LP
.ZN XGetWindowProperty
can generate
.ZN BadAtom ,
.ZN BadValue ,
and
.ZN BadWindow 
errors.
.LP
The
.ZN XListProperties
function returns a pointa ta a array of atom propertizzles dat is defined fo' 
the specified window or returns NULL if no propertizzles was found.
To free tha memory allocated by dis function, use
.ZN XJacked .
.LP
.ZN XListProperties
can generate a
.ZN BadWindow 
error.
.LP
The
.ZN XChangeProperty
function altas tha property fo' tha specified window and
causes tha X server ta generate a
.ZN PropertyNotify
event on dat window.
.ZN XChangeProperty
performs tha following:
.IP \(bu 5
If mode is
.ZN PropModeReplace ,
.ZN XChangeProperty
discardz tha previous property value n' stores tha freshly smoked up data.
.IP \(bu 5
If mode is
.ZN PropModePrepend
or
.ZN PropModeAppend ,
.ZN XChangeProperty
inserts tha specified data before tha beginnin of tha existin data
or onto tha end of tha existin data, respectively.
Da type n' format must match tha existin property value,
or a
.ZN BadMatch
error thangs up in dis biatch.
If tha property is undefined, 
it is treated as defined wit tha erect type and
format wit zero-length data.
.LP
If tha specified format is 8, tha property data must be a
.ZN char
array.
If tha specified format is 16, tha property data must be a
.ZN short
array.
If tha specified format is 32, tha property data must be a
.ZN long
array.
.LP
Da gametime of a property aint tied ta tha storin client.
Propertizzles remain until explicitly deleted, until tha window is destroyed,
or until tha server resets.
For a gangbangin' finger-lickin' rap of what tha fuck happens when tha connection ta tha X server is closed,
see section 2.6. 
Da maximum size of a property is server dependent n' can vary dynamically
dependin on tha amount of memory tha server has available.
(If there is insufficient space, a
.ZN BadAlloc
error thangs up in dis biatch.)
.LP
.ZN XChangeProperty
can generate
.ZN BadAlloc ,
.ZN BadAtom ,
.ZN BadMatch ,
.ZN BadValue ,
and
.ZN BadWindow 
errors.
.LP
The
.ZN XRotateWindowProperties
function allows you ta rotate propertizzles on a window n' causes
the X server ta generate
.ZN PropertyNotify
events.
If tha property names up in tha propertizzles array is viewed as bein numbered 
startin from zero n' if there be num_prop property names up in tha list,
then tha value associated wit property name I becomes tha value associated 
with property name (I + npositions) mod N fo' all I from zero ta N \- 1.
Da effect is ta rotate tha states by npositions places round tha virtual ring
of property names (right fo' positizzle npositions, 
left fo' wack npositions).
If npositions mod N is nonzero,
the X server generates a
.ZN PropertyNotify
event fo' each property up in tha order dat they is listed up in tha array.
If a atom occurs mo' than once up in tha list or no property wit dat 
name is defined fo' tha window,
a 
.ZN BadMatch 
error thangs up in dis biatch.
If a 
.ZN BadAtom 
or 
.ZN BadMatch 
error thangs up in dis biatch,
no propertizzles is chizzled.
.LP
.ZN XRotateWindowProperties
can generate
.ZN BadAtom ,
.ZN BadMatch ,
and
.ZN BadWindow 
errors.
.LP
The
.ZN XDeleteProperty
function deletes tha specified property only if the
property was defined on tha specified window
and causes tha X server ta generate a
.ZN PropertyNotify
event on tha window unless tha property do not exist.
.LP
.ZN XDeleteProperty
can generate
.ZN BadAtom
and
.ZN BadWindow 
errors.
.SH DIAGNOSTICS
.TP 1i
.ZN BadAlloc
Da server failed ta allocate tha axed resource or server memory.
.TP 1i
.ZN BadAtom
A value fo' a Atom argument do not name a thugged-out defined Atom.
.TP 1i
.ZN BadValue
Some numeric value falls outside tha range of joints accepted by tha request.
Unless a specific range is specified fo' a argument, tha full range defined
by tha argumentz type be accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Any argument defined as a set of
alternatives can generate dis error.
.TP 1i
.ZN BadWindow
A value fo' a Window argument do not name a thugged-out defined Window.
.SH "SEE ALSO"
XFree(3),
XInternAtom(3)
.br
\fI\*(xL\fP
