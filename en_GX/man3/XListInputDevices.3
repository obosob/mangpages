'\" t
.\"     Title: xlistinputdevices
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XLISTINPUTDEVICES" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XListInputDevices, XFreeDeviceList \- list available input devices
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XDeviceInfo *XListInputDevices( Display *display,
                                int *ndevices_return);
.fi
.sp
.nf
int XFreeDeviceList( XDeviceInfo *list);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
ndevices_return
       Specifies a pointa ta a variable where tha number of
       available devices canbe returned\&.
.fi
.sp
.nf
list
       Specifies tha list of devices ta free\&. The
       XFreeDeviceList functionfrees tha list of available
       extension input devices\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
Da XListInputDevices request lists tha available input
devices\&. This list includes tha core keyboard n' any physical
input thang currently accessible all up in tha X server, n' any
input devices dat is not currently accessible all up in tha X
server but could be accessed if requested\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A masta pointa be a virtual pointa thang dat do not
represent a physical device\&. Well shiiiit, it is visually represented through
a cursor\& fo' realz. A masta keyboard be a virtual keyboard thang that
does not represent a physical device\&. Well shiiiit, it is virtually
representd all up in a keyboard focus\& fo' realz. A masta pointa n' a
masta keyboard is always paired (i\&.e\&. if shift is pressed on
the masta keyboard, a pointa click would be a gangbangin' finger-lickin' dirty-ass shift\-click)\&.
Multiple masta pointer/keyboard pairs can exist\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
X servers supportin tha X Input Extension version 2,
XListInputDevices only returns tha straight-up original gangsta masta pointer, the
first masta keyboard n' all slave devices\& fo' realz. Additionizzle master
devices is not listed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Physical devices (so\-called slave devices) is attached to
either a masta pointa or a masta keyboard, dependin on
their capabilities\&. If a slave thang generates a event, the
event be also generated by tha respectizzle masta device\&.
Multiple slave devices can be attached ta a single master
device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Some server implementations may make all physical input devices
available all up in tha time tha server is initialized\&. Others may
wait until axed by a cold-ass lil client ta access a input device\&. In
the latta case, it is possible dat a input thang will be
listed as available at one time but not at another\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For each input thang available ta tha server, the
XListInputDevices request returns a XDeviceInfo structure\&.
That structure gotz nuff a pointa ta a list of structures, each
of which gotz nuff shiznit bout one class of input
supported by tha device\&. Da XDeviceInfo structure is defined
as bigs up:
             typedef struct _XDeviceInfo {
             XID     id;
             Atom    type;
             char    *name;
             int         num_classes;
             int         use;
             XAnyClassPtr inputclassinfo;
             } XDeviceInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da id be a number up in tha range 0\-128 dat uniquely identifies
the device\&. Well shiiiit, it be assigned ta tha thang when it is initialized
by tha server\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da type field iz of type Atom n' indicates tha nature of the
device\&. Da type will correspond ta one of tha followin strings
(defined up in tha header file XI\&.h):
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XI_MOUSE XI_TABLET XI_KEYBOARD XI_TOUCHSCREEN XI_TOUCHPAD
XI_BUTTONBOX XI_BARCODE XI_TRACKBALL XI_QUADRATURE XI_ID_MODULE
XI_ONE_KNOB XI_NINE_KNOB XI_KNOB_BOX XI_SPACEBALL XI_DATAGLOVE
XI_EYETRACKER XI_CURSORKEYS XI_FOOTMOUSE XI_JOYSTICK
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
These strings may be used up in a XInternAtom request ta return
an atom dat can be compared wit tha type field of the
XDeviceInfo structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da name field gotz nuff a pointa ta a null\-terminated string
that serves as identifier of tha device\&. This identifier may be
user\-configured or automatically assigned by tha server\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da num_classes field be a number up in tha range 0\-255 that
specifies tha number of input classes supported by tha device
for which shiznit is returned by ListInputDevices\&. Right back up in yo muthafuckin ass. Some
input classes, like fuckin class Focus n' class Proximitizzle do not
have any shiznit ta be returned by ListInputDevices\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
All devices provide a AttachClass\&. This class specifies the
masta thang a given slave thang be attached to\&. For master
devices, tha class specifies tha respectizzle paired master
device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da use field specifies how tha fuck tha thang is currently bein used\&.
If tha value is IsXKeyboard, tha thang be a masta keyboard\&.
If tha value is IsXPointer, tha thang be a masta pointer\&. If
the value is IsXExtensionPointer, tha thang be a slave
pointer\&. If tha value is IsXExtensionKeyboard, tha thang be a
slave keyboard\&. If tha value is IsXExtensionDevice, tha device
is available fo' use as a extension device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da inputclassinfo field gotz nuff a pointa ta tha first
input\-class specific data\&. Da first two fieldz is common to
all classes\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da class field be a number up in tha range 0\-255\&. Well shiiiit, it uniquely
identifies tha class of input fo' which shiznit is
returned\&. Currently defined classes is KeyClass, ButtonClass,
and ValuatorClass\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da length field be a number up in tha range 0\- 255\&. Well shiiiit, it specifies
the number of bytez of data dat is contained up in dis input
class\&. Da length includes tha class n' length fields\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XKeyInfo structure raps bout tha characteristics of the
keys on tha device\&. Well shiiiit, it is defined as bigs up:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct _XKeyInfo {
XID class;
int length;
unsigned short min_keycode;
unsigned short max_keycode;
unsigned short num_keys;
} XKeyInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
min_keycode iz of type KEYCODE\&. Well shiiiit, it specifies tha minimum
keycode dat tha thang will report\&. Da minimum keycode will
not be smalla than 8\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
max_keycode iz of type KEYCODE\&. Well shiiiit, it specifies tha maximum
keycode dat tha thang will report\&. Da maximum keycode will
not be larger than 255\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
num_keys specifies tha number of keys dat tha thang has\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XButtonInfo structure defines tha characteristics of the
buttons on tha device\&. Well shiiiit, it is defined as bigs up:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct _XButtonInfo {
XID class;
int length;
short num_buttons;
} XButtonInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
num_buttons specifies tha number of buttons dat tha device
has\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XValuatorInfo structure defines tha characteristics of the
valuators on tha device\&. Well shiiiit, it is defined as bigs up:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct  _XValuatorInfo {
XID class;
int length;
unsigned char num_axes;
unsigned char mode;
unsigned long motion_buffer;
XAxisInfoPtr axes;
} XValuatorInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
num_axes gotz nuff tha number of axes tha thang supports\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
mode be a cold-ass lil constant dat has one of tha followin joints:
Absolute or Relative\&. Right back up in yo muthafuckin ass. Some devices allow tha mode ta be chizzled
dynamically via tha SetDeviceMode request\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
motion_buffer_size be a cold-ass lil cardinal number dat specifies the
number of elements dat can be contained up in tha motion history
buffer fo' tha device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da axes field gotz nuff a pointa ta a XAxisInfo structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XAxisInfo structure is defined as bigs up:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct _XAxisInfo {
int resolution;
int min_value;
int max_value;
} XAxisInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da resolution gotz nuff a number up in counts/meter\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da min_val field gotz nuff a number dat specifies tha minimum
value tha thang reports fo' dis axis\&. For devices whose mode
is Relative, tha min_val field will contain 0\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da max_val field gotz nuff a number dat specifies tha maximum
value tha thang reports fo' dis axis\&. For devices whose mode
is Relative, tha max_val field will contain 0\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XAttachInfo structure is defined as bigs up:
             typedef struct _XAttachInfo {
             int     attached;
             } XAttachInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If tha thang be a slave device, attached specifies tha device
ID of tha masta thang dis thang be attached to\&. If the
device aint attached ta a masta device, attached is
Floating\&. If tha thang be a masta device, attached specifies
the thang ID of tha masta thang dis thang is paired with\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To free tha XDeviceInfo array pimped by XListInputDevices, use
XFreeDeviceList\&.
.fi
.if n \{\
.RE
.\}
