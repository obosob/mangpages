" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::linear_congruential_engine< _UIntType, __a, __c, __m > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _UIntType \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBlinear_congruential_engine\fP (\fBresult_type\fP __s=default_seed)"
.br
.ti -1c
.RI "template<typename _Sseq , typename  = typename std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value> ::type> \fBlinear_congruential_engine\fP (_Sseq &__q)"
.br
.ti -1c
.RI "void \fBdiscard\fP (unsigned long long __z)"
.br
.ti -1c
.RI "\fBresult_type\fP \fBoperator()\fP ()"
.br
.ti -1c
.RI "void \fBseed\fP (\fBresult_type\fP __s=default_seed)"
.br
.ti -1c
.RI "template<typename _Sseq > \fBstd::enable_if\fP< \fBstd::is_class\fP
.br
< _Sseq >::value >::type \fBseed\fP (_Sseq &__q)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static constexpr \fBresult_type\fP \fBmax\fP ()"
.br
.ti -1c
.RI "static constexpr \fBresult_type\fP \fBmin\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr \fBresult_type\fP \fBdefault_seed\fP"
.br
.ti -1c
.RI "static constexpr \fBresult_type\fP \fBincrement\fP"
.br
.ti -1c
.RI "static constexpr \fBresult_type\fP \fBmodulus\fP"
.br
.ti -1c
.RI "static constexpr \fBresult_type\fP \fBmultiplier\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, 
.br
_Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::linear_congruential_engine\fP< _UIntType1, __a1, __c1, __m1 > &__lcr)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBlinear_congruential_engine\fP &__lhs, const \fBlinear_congruential_engine\fP &__rhs)"
.br
.ti -1c
.RI "template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, 
.br
_Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::linear_congruential_engine\fP< _UIntType1, __a1, __c1, __m1 > &__lcr)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>class std::linear_congruential_engine< _UIntType, __a, __c, __m >"
A model of a linear congruential random number generator\&. 

A random number generator dat produces pseudorandom numbers via linear function: \[ x_{i+1}\leftarrow(ax_{i} + c) \bmod m \]
.PP
Da template parameta \fC_UIntType\fP must be a unsigned integral type big-ass enough ta store joints up ta (__m-1)\&. If tha template parameta \fC__m\fP is 0, tha modulus \fC__m\fP used is std::numeric_limits<_UIntType>::max() plus 1\&. Otherwise, tha template parametas \fC__a\fP n' \fC__c\fP must be less than \fC__m\fP\&.
.PP
Da size of tha state is $1$\&. 
.PP
Definizzle at line 241 of file random\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> typedef _UIntType \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::\fBresult_type\fP"
Da type of tha generated random value\&. 
.PP
Definizzle at line 244 of file random\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::\fBlinear_congruential_engine\fP (\fBresult_type\fP__s = \fCdefault_seed\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructs a linear_congruential_engine random number generator engine wit seed \fC__s\fP\&. Da default seed value is 1\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Da initial seed value\&. 
.RE
.PP

.PP
Definizzle at line 268 of file random\&.h\&.
.PP
References std::linear_congruential_engine< _UIntType, __a, __c, __m >::seed()\&.
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> template<typename _Sseq , typename  = typename std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value> ::type> \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::\fBlinear_congruential_engine\fP (_Sseq &__q)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructs a linear_congruential_engine random number generator engine seeded from tha seed sequence \fC__q\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__q\fP tha seed sequence\&. 
.RE
.PP

.PP
Definizzle at line 281 of file random\&.h\&.
.PP
References std::linear_congruential_engine< _UIntType, __a, __c, __m >::seed()\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> void \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::discard (unsigned long long__z)\fC [inline]\fP"

.PP
Discard a sequence of random numbers\&. 
.PP
Definizzle at line 325 of file random\&.h\&.
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> static constexpr \fBresult_type\fP \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::max ()\fC [inline]\fP, \fC [static]\fP"

.PP
Gets tha phattest possible value up in tha output range\&. 
.PP
Definizzle at line 318 of file random\&.h\&.
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> static constexpr \fBresult_type\fP \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::min ()\fC [inline]\fP, \fC [static]\fP"

.PP
Gets tha smallest possible value up in tha output range\&. Da minimum dependz on tha \fC__c\fP parameter: if it is zero, tha minimum generated must be > 0, otherwise 0 be allowed\&. 
.PP
Definizzle at line 311 of file random\&.h\&.
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> \fBresult_type\fP \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::operator() ()\fC [inline]\fP"

.PP
Gets tha next random number up in tha sequence\&. 
.PP
Definizzle at line 335 of file random\&.h\&.
.SS "template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> void \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::seed (\fBresult_type\fP__s = \fCdefault_seed\fP)"

.PP
Reseedz tha linear_congruential_engine random number generator engine sequence ta tha seed \fC__s\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Da freshly smoked up seed\&.
.RE
.PP
Seedz tha LCR wit integral value \fC__s\fP, adjusted so dat tha rang identitizzle is never a gangmember of tha convergence set\&. 
.PP
Definizzle at line 120 of file bits/random\&.tcc\&.
.PP
Referenced by std::linear_congruential_engine< _UIntType, __a, __c, __m >::linear_congruential_engine()\&.
.SS "template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> template<typename _Sseq > \fBstd::enable_if\fP< \fBstd::is_class\fP< _Sseq >::value >::type \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::seed (_Sseq &__q)"

.PP
Reseedz tha linear_congruential_engine random number generator engine sequence rockin joints from tha seed sequence \fC__q\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__q\fP tha seed sequence\&.
.RE
.PP
Seedz tha LCR engine wit a value generated by \fC__q\fP\&. 
.PP
Definizzle at line 136 of file bits/random\&.tcc\&.
.PP
References std::__lg()\&.
.SH "Playas And Related Function Documentation"
.PP 
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBstd::linear_congruential_engine\fP< _UIntType1, __a1, __c1, __m1 > &__lcr)\fC [friend]\fP"

.PP
Writes tha textual representation of tha state x(i) of x ta \fC__os\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__os\fP Da output stream\&. 
.br
\fI__lcr\fP A % linear_congruential_engine random number generator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
__os\&. 
.RE
.PP

.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> bool operator== (const \fBlinear_congruential_engine\fP< _UIntType, __a, __c, __m > &__lhs, const \fBlinear_congruential_engine\fP< _UIntType, __a, __c, __m > &__rhs)\fC [friend]\fP"

.PP
Compares two linear congruential random number generator objectz of tha same type fo' equality\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP A linear congruential random number generator object\&. 
.br
\fI__rhs\fP Another linear congruential random number generator object\&.
.RE
.PP
\fBReturns:\fP
.RS 4
true if tha infinite sequencez of generated joints would be equal, false otherwise\&. 
.RE
.PP

.PP
Definizzle at line 353 of file random\&.h\&.
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBstd::linear_congruential_engine\fP< _UIntType1, __a1, __c1, __m1 > &__lcr)\fC [friend]\fP"

.PP
Sets tha state of tha engine by readin its textual representation from \fC__is\fP\&. Da textual representation must done been previously freestyled rockin a output stream whose imbued locale n' whose typez template specialization arguments _CharT n' _Traits was tha same as dem of \fC__is\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fI__is\fP Da input stream\&. 
.br
\fI__lcr\fP A % linear_congruential_engine random number generator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
__is\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::increment\fC [static]\fP"
An increment\&. 
.PP
Definizzle at line 255 of file random\&.h\&.
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::\fBmodulus\fP\fC [static]\fP"
Da modulus\&. 
.PP
Definizzle at line 257 of file random\&.h\&.
.SS "template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType \fBstd::linear_congruential_engine\fP< _UIntType, __a, __c, __m >::multiplier\fC [static]\fP"
Da multiplier\&. 
.PP
Definizzle at line 253 of file random\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
