'\" t
.\"     Title: glRect
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLRECT" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glRect \- draw a rectangle
.SH "C SPECIFICATION"
.HP \w'void\ glRectd('u
.BI "void glRectd(GLdouble\ " "x1" ", GLdouble\ " "y1" ", GLdouble\ " "x2" ", GLdouble\ " "y2" ");"
.HP \w'void\ glRectf('u
.BI "void glRectf(GLfloat\ " "x1" ", GLfloat\ " "y1" ", GLfloat\ " "x2" ", GLfloat\ " "y2" ");"
.HP \w'void\ glRecti('u
.BI "void glRecti(GLint\ " "x1" ", GLint\ " "y1" ", GLint\ " "x2" ", GLint\ " "y2" ");"
.HP \w'void\ glRects('u
.BI "void glRects(GLshort\ " "x1" ", GLshort\ " "y1" ", GLshort\ " "x2" ", GLshort\ " "y2" ");"
.SH "PARAMETERS"
.PP
\fIx1\fR, \fIy1\fR
.RS 4
Specify one vertex of a rectangle\&.
.RE
.PP
\fIx2\fR, \fIy2\fR
.RS 4
Specify tha opposite vertex of tha rectangle\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glRectdv('u
.BI "void glRectdv(const\ GLdouble\ *\ " "v1" ", const\ GLdouble\ *\ " "v2" ");"
.HP \w'void\ glRectfv('u
.BI "void glRectfv(const\ GLfloat\ *\ " "v1" ", const\ GLfloat\ *\ " "v2" ");"
.HP \w'void\ glRectiv('u
.BI "void glRectiv(const\ GLint\ *\ " "v1" ", const\ GLint\ *\ " "v2" ");"
.HP \w'void\ glRectsv('u
.BI "void glRectsv(const\ GLshort\ *\ " "v1" ", const\ GLshort\ *\ " "v2" ");"
.SH "PARAMETERS"
.PP
\fIv1\fR
.RS 4
Specifies a pointa ta one vertex of a rectangle\&.
.RE
.PP
\fIv2\fR
.RS 4
Specifies a pointa ta tha opposite vertex of tha rectangle\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglRect\fR
supports efficient justification of rectanglez as two corner points\&. Each rectangle command takes four arguments, organized either as two consecutizzle pairs of
x y
coordinates or as two pointas ta arrays, each containin an
x y
pair\&. Da resultin rectangle is defined up in the
z = 0
plane\&.
.PP
\fBglRect\fR(\fIx1\fR,
\fIy1\fR,
\fIx2\fR,
\fIy2\fR) is exactly equivalent ta tha followin sequence:
.sp
.if n \{\
.RS 4
.\}
.nf
glBegin(\fBGL_POLYGON\fR);
glVertex2(\fIx1\fR, \fIy1\fR);
glVertex2(\fIx2\fR, \fIy1\fR);
glVertex2(\fIx2\fR, \fIy2\fR);
glVertex2(\fIx1\fR, \fIy2\fR);
glEnd();
            
.fi
.if n \{\
.RE
.\}
.sp
Note dat if tha second vertex be above n' ta tha right of tha straight-up original gangsta vertex, tha rectangle is constructed wit a cold-ass lil counterclockwise winding\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglRect\fR
is executed between tha execution of
\fBglBegin\fR()
and tha correspondin execution of
\fBglEnd\fR()\&.
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglVertex\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
