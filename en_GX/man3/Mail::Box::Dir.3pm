.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Dir 3"
.TH Mail::Box::Dir 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Dir \- handle foldaz wit a gangbangin' file per message.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Dir
\&   be a Mail::Box
\&   be a Mail::Reporter
\&
\& Mail::Box::Dir is extended by
\&   Mail::Box::MH
\&   Mail::Box::Maildir
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Do not instantiate dis object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation raps bout tha way directory organized mailboxes work.
At tha moment, dis object is extended by
.IP "\(bu" 4
Mail::Box::MH
.Sp
\&\s-1MH\s0 folders, which is represented by a gangbangin' finger-lickin' directory containin filez which
are sequentially numbered.
.IP "\(bu" 4
Mail::Box::Maildir
.Sp
Maildir folders, which is located up in a gangbangin' finger-lickin' directory which has sub-directories
named \f(CW\*(C`tmp\*(C'\fR, \f(CW\*(C`new\*(C'\fR, n' \f(CW\*(C`cur\*(C'\fR.  Each of these directories may contain
filez wit names which is a cold-ass lil combination of a numeric timestamp n' some
status flags.
.IP "\(bu" 4
Mail::Box::Netzwert
.Sp
This folda type was especially pimped fo' Netzwert \s-1AG,\s0 optimized to
run on a cold-ass lil clusta of servers wit foldaz on \s-1NFS. \s0 Da code aint publicly
available (yet).
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.ie n .IP "overload: \fB""""\fR()" 4
.el .IP "overload: \fB``''\fR()" 4
.IX Item "overload: """"()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fB@{}\fR()" 4
.IX Item "overload: @{}()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.IP "overload: \fBcmp\fR()" 4
.IX Item "overload: cmp()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Box
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Dir\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Dir->new(OPTIONS)"
.Vb 10
\& \-Option           \-\-Defined up in     \-\-Default
\&  access             Mail::Box        \*(Aqr\*(Aq
\&  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
\&  body_type          Mail::Box        Mail::Message::Body::Lines
\&  coerce_options     Mail::Box        []
\&  create             Mail::Box        <false>
\&  directory                           <derived from folda name>
\&  extract            Mail::Box        10240
\&  field_type         Mail::Box        undef
\&  fix_headaz        Mail::Box        <false>
\&  folda             Mail::Box        $ENV{MAIL}
\&  folderdir          Mail::Box        undef
\&  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
\&  head_type          Mail::Box        Mail::Message::Head::Complete
\&  keep_dups          Mail::Box        <false>
\&  lock_file          Mail::Box        <folder>/.lock
\&  lock_timeout       Mail::Box        1 hour
\&  lock_type          Mail::Box        Mail::Box::Locker::DotLock
\&  lock_wait          Mail::Box        10 seconds
\&  locker             Mail::Box        undef
\&  log                Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  manager            Mail::Box        undef
\&  message_type       Mail::Box        <folder\-class>::Message
\&  multipart_type     Mail::Box        Mail::Message::Body::Multipart
\&  remove_when_empty  Mail::Box        <true>
\&  save_on_exit       Mail::Box        <true>
\&  trace              Mail::Reporta   \*(AqWARNINGS\*(Aq
\&  trusted            Mail::Box        <dependz on folda location>
.Ve
.RS 4
.IP "access => \s-1MODE\s0" 2
.IX Item "access => MODE"
.PD 0
.IP "body_delayed_type => \s-1CLASS\s0" 2
.IX Item "body_delayed_type => CLASS"
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "coerce_options => \s-1ARRAY\s0" 2
.IX Item "coerce_options => ARRAY"
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
.IP "directory => \s-1DIRECTORY\s0" 2
.IX Item "directory => DIRECTORY"
.PD
For rare folda types, tha directory name may differ from tha folder
name.
.IP "extract => \s-1INTEGER\s0 | \s-1CODE\s0 | \s-1METHOD\s0 | '\s-1LAZY\s0'|'\s-1ALWAYS\s0'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.PD 0
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "fix_headaz => \s-1BOOLEAN\s0" 2
.IX Item "fix_headaz => BOOLEAN"
.IP "folda => \s-1FOLDERNAME\s0" 2
.IX Item "folda => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => \s-1CLASS\s0" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "keep_dups => \s-1BOOLEAN\s0" 2
.IX Item "keep_dups => BOOLEAN"
.IP "lock_file => \s-1FILENAME\s0" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => \s-1SECONDS\s0" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => \s-1SECONDS\s0" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => \s-1OBJECT\s0" 2
.IX Item "locker => OBJECT"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1MANAGER\s0" 2
.IX Item "manager => MANAGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => \s-1CLASS\s0" 2
.IX Item "multipart_type => CLASS"
.IP "remove_when_empty => \s-1BOOLEAN\s0" 2
.IX Item "remove_when_empty => BOOLEAN"
.IP "save_on_exit => \s-1BOOLEAN\s0" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.RE
.RS 4
.RE
.PD
.SS "Da folder"
.IX Subsection "Da folder"
.ie n .IP "$obj\->\fBaddMessage\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->addMessage(MESSAGE, OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBaddLyrics\fR(\s-1MESSAGE\s0 [, \s-1MESSAGE, ...\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBaddLyrics\fR(\s-1MESSAGE\s0 [, \s-1MESSAGE, ...\s0])" 4
.IX Item "$obj->addLyrics(MESSAGE [, MESSAGE, ...])"
See \*(L"Da folder\*(R" up in Mail::Box
.IP "Mail::Box::Dir\->\fBappendLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Dir->appendLyrics(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->close(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->copyTo(FOLDER, OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->delete(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBdirectory\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdirectory\fR()" 4
.IX Item "$obj->directory()"
Returns tha directory related ta dis folder.
.Sp
example:
.Sp
.Vb 1
\& print $folder\->directory;
.Ve
.ie n .IP "$obj\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR([\s-1DIRECTORY\s0])" 4
.IX Item "$obj->folderdir([DIRECTORY])"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBupdate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBupdate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->update(OPTIONS)"
See \*(L"Da folder\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
See \*(L"Da folder\*(R" up in Mail::Box
.SS "Folda flags"
.IX Subsection "Folda flags"
.ie n .IP "$obj\->\fBaccess\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaccess\fR()" 4
.IX Item "$obj->access()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->modified([BOOLEAN])"
See \*(L"Folda flags\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwritable\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwritable\fR()" 4
.IX Item "$obj->writable()"
See \*(L"Folda flags\*(R" up in Mail::Box
.SS "Da lyrics"
.IX Subsection "Da lyrics"
.ie n .IP "$obj\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR([NUMBER|MESSAGE|MESSAGE\-ID])" 4
.IX Item "$obj->current([NUMBER|MESSAGE|MESSAGE-ID])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfind\fR(MESSAGE-ID)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(MESSAGE-ID)" 4
.IX Item "$obj->find(MESSAGE-ID)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR(\s-1LABEL,\s0 [\s-1BOOLEAN,\s0 [\s-1ARRAY\-OF\-MSGS\s0]])" 4
.IX Item "$obj->findFirstLabeled(LABEL, [BOOLEAN, [ARRAY-OF-MSGS]])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR(\s-1INDEX\s0 [,MESSAGE])" 4
.IX Item "$obj->message(INDEX [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR(MESSAGE-ID [,MESSAGE])" 4
.IX Item "$obj->messageId(MESSAGE-ID [,MESSAGE])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBmessageIds\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIds\fR()" 4
.IX Item "$obj->messageIds()"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.el .IP "\f(CW$obj\fR\->\fBlyrics\fR(['\s-1ALL\s0',RANGE,'\s-1ACTIVE\s0','\s-1DELETED\s0',LABEL,!LABEL,FILTER])" 4
.IX Item "$obj->lyrics(['ALL',RANGE,'ACTIVE','DELETED',LABEL,!LABEL,FILTER])"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnrLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->nrLyrics(OPTIONS)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForLyrics\fR(\s-1MESSAGE,\s0 MESSAGE-IDS, \s-1TIMESPAN, WINDOW\s0)" 4
.IX Item "$obj->scanForLyrics(MESSAGE, MESSAGE-IDS, TIMESPAN, WINDOW)"
See \*(L"Da lyrics\*(R" up in Mail::Box
.SS "Sub-folders"
.IX Subsection "Sub-folders"
.ie n .IP "$obj\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->listSubFolders(OPTIONS)"
.PD 0
.IP "Mail::Box::Dir\->\fBlistSubFolders\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Dir->listSubFolders(OPTIONS)"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "$obj->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.PD 0
.IP "Mail::Box::Dir\->\fBnameOfSubFolder\fR(\s-1SUBNAME,\s0 [\s-1PARENTNAME\s0])" 4
.IX Item "Mail::Box::Dir->nameOfSubFolder(SUBNAME, [PARENTNAME])"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenRelatedFolder\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->openRelatedFolder(OPTIONS)"
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR(\s-1SUBNAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR(\s-1SUBNAME, OPTIONS\s0)" 4
.IX Item "$obj->openSubFolder(SUBNAME, OPTIONS)"
See \*(L"Sub-folders\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtopFolderWithLyrics\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "$obj->topFolderWithLyrics()"
.PD 0
.IP "Mail::Box::Dir\->\fBtopFolderWithLyrics\fR()" 4
.IX Item "Mail::Box::Dir->topFolderWithLyrics()"
.PD
See \*(L"Sub-folders\*(R" up in Mail::Box
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR(\s-1MESSAGE, OPTIONS\s0)" 4
.IX Item "$obj->coerce(MESSAGE, OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBcreate\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.IX Item "$obj->create(FOLDERNAME, OPTIONS)"
.PD 0
.IP "Mail::Box::Dir\->\fBcreate\fR(\s-1FOLDERNAME, OPTIONS\s0)" 4
.IX Item "Mail::Box::Dir->create(FOLDERNAME, OPTIONS)"
.PD
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR(\s-1MESSAGE, HEAD\s0)" 4
.IX Item "$obj->determineBodyType(MESSAGE, HEAD)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBfolderToDirectory\fR(\s-1FOLDERNAME, FOLDERDIR\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfolderToDirectory\fR(\s-1FOLDERNAME, FOLDERDIR\s0)" 4
.IX Item "$obj->folderToDirectory(FOLDERNAME, FOLDERDIR)"
(class method)  Translate a gangbangin' foldername tha fuck into a gangbangin' filename, wit use of the
\&\s-1FOLDERDIR\s0 ta replace a leadin \f(CW\*(C`=\*(C'\fR.
.IP "Mail::Box::Dir\->\fBfoundIn\fR([\s-1FOLDERNAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "Mail::Box::Dir->foundIn([FOLDERNAME], OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR([STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'])" 4
.IX Item "$obj->lineSeparator([STRING|'CR'|'LF'|'CRLF'])"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBlocker\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocker\fR()" 4
.IX Item "$obj->locker()"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBread\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->read(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBreadMessageFilenames\fR(\s-1DIRECTORY\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreadMessageFilenames\fR(\s-1DIRECTORY\s0)" 4
.IX Item "$obj->readMessageFilenames(DIRECTORY)"
Returns a list of all filenames which is found up in dis folder
directory n' represent a message.  Da filenames is returned as
relatizzle path.
.ie n .IP "$obj\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreadLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->readLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreMessage\fR(\s-1MESSAGE\s0)" 4
.IX Item "$obj->storeMessage(MESSAGE)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeThreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->toBeUnthreaded(MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBupdateLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->updateLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->write(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwriteLyrics\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->writeLyrics(OPTIONS)"
See \*(L"Internals\*(R" up in Mail::Box
.SS "Other methods"
.IX Subsection "Other methods"
.ie n .IP "$obj\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "$obj->timespan2seconds(TIME)"
.PD 0
.IP "Mail::Box::Dir\->\fBtimespan2seconds\fR(\s-1TIME\s0)" 4
.IX Item "Mail::Box::Dir->timespan2seconds(TIME)"
.PD
See \*(L"Other methods\*(R" up in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Dir\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Dir->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Dir\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Dir->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Dir\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Dir->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Box
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Chizzlez not freestyled ta read-only folda $self." 4
.el .IP "Warning: Chizzlez not freestyled ta read-only folda \f(CW$self\fR." 4
.IX Item "Warning: Chizzlez not freestyled ta read-only folda $self."
Yo ass have opened tha folda read-only \-\-which is tha default set
by new(access)\-\-, made modifications, n' now wanna close dat shit.
Set close(force) if you wanna overrule tha access mode, or close
the folda wit close(write) set ta \f(CW\*(C`NEVER\*(C'\fR.
.IP "Error: Copyin failed fo' one message." 4
.IX Item "Error: Copyin failed fo' one message."
For some reason, fo' instizzle disc full, removed by external process, or
read-protection, it is impossible ta copy one of tha lyrics.  Copyin will
proceed fo' tha other lyrics.
.ie n .IP "Error: Destination folda $name aint writable." 4
.el .IP "Error: Destination folda \f(CW$name\fR aint writable." 4
.IX Item "Error: Destination folda $name aint writable."
Da folda where tha lyrics is copied ta aint opened wit write
access (see new(access)).  This has no relation wit write permission
to tha folda which is controled by yo' operatin system.
.ie n .IP "Warning: Different lyrics wit id $msgid" 4
.el .IP "Warning: Different lyrics wit id \f(CW$msgid\fR" 4
.IX Item "Warning: Different lyrics wit id $msgid"
Da message id is discovered mo' than once within tha same folda yo, but the
content of tha message seems ta be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: Folda $name is opened read-only" 4
.el .IP "Error: Folda \f(CW$name\fR is opened read-only" 4
.IX Item "Error: Folda $name is opened read-only"
Yo ass can not write ta dis folda unless you have opened tha folda to
write or append wit new(access), or tha \f(CW\*(C`force\*(C'\fR option is set true.
.ie n .IP "Error: Folda $name not deleted: not writable." 4
.el .IP "Error: Folda \f(CW$name\fR not deleted: not writable." 4
.IX Item "Error: Folda $name not deleted: not writable."
Da folda must be opened wit write access via new(access), otherwise
removin it is ghon be refused. Y'all KNOW dat shit, muthafucka!  So, you may have write-access accordin to
the operatin system yo, but dat aint gonna automatically mean dat this
\&\f(CW\*(C`delete\*(C'\fR method permits you to.  Da reverse remark is valid as well.
.ie n .IP "Warning: Folda directory $directory is write-protected." 4
.el .IP "Warning: Folda directory \f(CW$directory\fR is write-protected." 4
.IX Item "Warning: Folda directory $directory is write-protected."
Da folda directory do already exist n' is write protected, which may
interfere wit tha axed write access.  Chizzle new(access) or the
permissions on tha directory.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
Da strang do not follow tha strict rulez of tha time span syntax which
is permitted as parameter.
.IP "Warning: Message-id '$msgid' do not contain a thugged-out domain." 4
.IX Item "Warning: Message-id '$msgid' do not contain a thugged-out domain."
Accordin ta tha RFCs, message-idz need ta contain a unique random part,
then a \f(CW\*(C`@\*(C'\fR, n' then a thugged-out domain name.  This is made ta avoid tha creation
of two lyrics wit tha same id. Y'all KNOW dat shit, muthafucka!  Da warnin emerges when tha \f(CW\*(C`@\*(C'\fR is
missin from tha string.
.ie n .IP "Warning: No directory $name fo' folda of $class" 4
.el .IP "Warning: No directory \f(CW$name\fR fo' folda of \f(CW$class\fR" 4
.IX Item "Warning: No directory $name fo' folda of $class"
.PD 0
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
.PD
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Unable ta create subfolda $name of $folder." 4
.el .IP "Error: Unable ta create subfolda \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable ta create subfolda $name of $folder."
Da copy includes tha subfoldaz yo, but fo' some reason dat shiznit was not possible
to copy one of these n' you can put dat on yo' toast.  Copyin will proceed fo' all other sub-folders.
.ie n .IP "Error: Freestylin folda $name failed" 4
.el .IP "Error: Freestylin folda \f(CW$name\fR failed" 4
.IX Item "Error: Freestylin folda $name failed"
For some reason (you probably gots mo' error lyrics bout dis problem)
it is impossible ta write tha folder, although you should cuz there
were chizzlez made.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
