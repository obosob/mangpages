" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::basic_string< _CharT, _Traits, _Alloc > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef 
.br
__gnu_cxx::__normal_iterator
.br
< const_pointer, \fBbasic_string\fP > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
_CharT_alloc_type::const_pointa \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef 
.br
_CharT_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP
.br
< const_iterator > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
_CharT_alloc_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef 
.br
__gnu_cxx::__normal_iterator
.br
< pointer, \fBbasic_string\fP > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef 
.br
_CharT_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP
.br
< iterator > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
_CharT_alloc_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Traits \fBtraits_type\fP"
.br
.ti -1c
.RI "typedef _Traits::char_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_string\fP ()"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _Alloc &__a)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n, const _Alloc &__a)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _CharT *__s, size_type __n, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _CharT *__s, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (size_type __n, _CharT __c, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (\fBbasic_string\fP &&__str) noexcept"
.br
.ti -1c
.RI "\fBbasic_string\fP (\fBinitializer_list\fP< _CharT > __l, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP (_InputIterator __beg, _InputIterator __end, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB~basic_string\fP () noexcept"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_string\fP< _CharT, _Traits, 
.br
_Alloc > & \fB_M_replace_dispatch\fP (iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type)"
.br
.ti -1c
.RI "template<typename _InIterator > _CharT * \fB_S_construct\fP (_InIterator __beg, _InIterator __end, const _Alloc &__a, \fBforward_iterator_tag\fP)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP & \fBappend\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (\fBbasic_string\fP &&__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP & \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "const_reference \fBat\fP (size_type __n) const "
.br
.ti -1c
.RI "reference \fBat\fP (size_type __n)"
.br
.ti -1c
.RI "reference \fBback\fP ()"
.br
.ti -1c
.RI "const_reference \fBback\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "const _CharT * \fBc_str\fP () const noexcept"
.br
.ti -1c
.RI "size_type \fBcapacity\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBbasic_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n, const \fBbasic_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const "
.br
.ti -1c
.RI "size_type \fBcopy\fP (_CharT *__s, size_type __n, size_type __pos=0) const "
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.ti -1c
.RI "const _CharT * \fBdata\fP () const noexcept"
.br
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBend\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBend\fP () const noexcept"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBerase\fP (size_type __pos=0, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __position)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __first, iterator __last)"
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (_CharT __c, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (_CharT __c, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (_CharT __c, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const noexcept"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __p, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<class _InputIterator > void \fBinsert\fP (iterator __p, _InputIterator __beg, _InputIterator __end)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __p, \fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __p, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBlength\fP () const noexcept"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (\fBbasic_string\fP &&__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "const_reference \fBoperator[]\fP (size_type __pos) const "
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __pos)"
.br
.ti -1c
.RI "void \fBpop_back\fP ()"
.br
.ti -1c
.RI "void \fBpush_back\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, size_type __n2, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, _CharT *__k1, _CharT *__k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__k1, const _CharT *__k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, iterator __k1, iterator __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, \fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "void \fBreserve\fP (size_type __res_arg=0)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n)"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (_CharT __c, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "void \fBshrink_to_fit\fP ()"
.br
.ti -1c
.RI "size_type \fBsize\fP () const noexcept"
.br
.ti -1c
.RI "\fBbasic_string\fP \fBsubstr\fP (size_type __pos=0, size_type __n=\fBnpos\fP) const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBbasic_string\fP &__s)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const size_type \fBnpos\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT, typename _Traits, typename _Alloc>class std::basic_string< _CharT, _Traits, _Alloc >"
Managin sequencez of charactas n' character-like objects\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_CharT\fP Type of characta 
.br
\fI_Traits\fP Traits fo' characta type, defaults ta char_traits<_CharT>\&. 
.br
\fI_Alloc\fP Allocator type, defaults ta allocator<_CharT>\&.
.RE
.PP
Meets tha requirementz of a \fCcontainer\fP, a \fCreversible container\fP, n' a \fCsequence\fP\&. Of tha \fCoptionizzle sequence requirements\fP, only \fCpush_back\fP, \fCat\fP, n' \fCarray\fP access is supported\&.
.PP
\fBTodo\fP
.RS 4
Needz documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html
.RE
.PP
.PP
Documentation, biatch? Whatz that, biatch? Nathan Myers ncm@cantrip.org\&.
.PP
A strang be lookin like this:
.PP
.PP
.nf
                                     [_Rep]
                                     _M_length
[basic_string<char_type>]            _M_capacity
_M_dataplus                          _M_refcount
_M_p ---------------->               unnamed array of char_type
.fi
.PP
.PP
Where tha _M_p points ta tha straight-up original gangsta characta up in tha string, n' you cast it ta a pointer-to-_Rep n' subtract 1 ta git a pointa ta tha header\&.
.PP
This approach has tha enormous advantage dat a strang object requires only one allocation\& fo' realz. All tha uglinizz is confined within a single pair of inline functions, which each compile ta a single \fIadd\fP instruction: _Rep::_M_data(), n' string::_M_rep(); n' tha allocation function which gets a funky-ass block of raw bytes n' wit room enough n' constructs a _Rep object all up in tha front\&.
.PP
Da reason you want _M_data pointin ta tha characta array n' not tha _Rep is so dat tha debugger can peep tha strang contents\&. (Probably we should add a non-inline member ta git tha _Rep fo' tha debugger ta use, so playas can check tha actual strang length\&.)
.PP
Note dat tha _Rep object be a POD so dat you can gotz a static \fIempty string\fP _Rep object already \fIconstructed\fP before static constructors have run\&. Da reference-count encodin is chosen so dat a 0 indicates one reference, so you never try ta destroy tha empty-strin _Rep object\&.
.PP
All but tha last paragraph is considered pretty conventionizzle fo' a C++ strang implementation\&. 
.PP
Definizzle at line 112 of file basic_string\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP ()\fC [inline]\fP"

.PP
Default constructor creates a empty string\&. 
.PP
Definizzle at line 437 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::substr()\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const _Alloc &__a)\fC [explicit]\fP"

.PP
Construct a empty strang rockin allocator \fIa\fP\&. 
.PP
Definizzle at line 178 of file basic_string\&.tcc\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)"

.PP
Construct strang wit copy of value of \fIstr\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.RE
.PP

.PP
Definizzle at line 170 of file basic_string\&.tcc\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos, size_type__n = \fC\fBnpos\fP\fP)"

.PP
Construct strang as copy of a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.br
\fI__pos\fP Index of first characta ta copy from\&. 
.br
\fI__n\fP Number of charactas ta copy (default remainder)\&. 
.RE
.PP

.PP
Definizzle at line 184 of file basic_string\&.tcc\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos, size_type__n, const _Alloc &__a)"

.PP
Construct strang as copy of a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.br
\fI__pos\fP Index of first characta ta copy from\&. 
.br
\fI__n\fP Number of charactas ta copy\&. 
.br
\fI__a\fP Allocator ta use\&. 
.RE
.PP

.PP
Definizzle at line 194 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const _CharT *__s, size_type__n, const _Alloc &__a = \fC_Alloc()\fP)"

.PP
Construct strang initialized by a cold-ass lil characta array\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source characta array\&. 
.br
\fI__n\fP Number of charactas ta copy\&. 
.br
\fI__a\fP Allocator ta use (default is default allocator)\&.
.RE
.PP
NB: \fI__s\fP must have at least \fI__n\fP characters, '\\0' has no special meaning\&. 
.PP
Definizzle at line 206 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const _CharT *__s, const _Alloc &__a = \fC_Alloc()\fP)"

.PP
Construct strang as copy of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source C string\&. 
.br
\fI__a\fP Allocator ta use (default is default allocator)\&. 
.RE
.PP

.PP
Definizzle at line 213 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (size_type__n, _CharT__c, const _Alloc &__a = \fC_Alloc()\fP)"

.PP
Construct strang as multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of characters\&. 
.br
\fI__c\fP Characta ta use\&. 
.br
\fI__a\fP Allocator ta use (default is default allocator)\&. 
.RE
.PP

.PP
Definizzle at line 220 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (\fBbasic_string\fP< _CharT, _Traits, _Alloc > &&__str)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Move construct string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&.
.RE
.PP
Da newly-created strang gotz nuff tha exact contentz of \fI__str\fP\&. \fI__str\fP be a valid yo, but unspecified string\&. 
.PP
Definizzle at line 507 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (\fBinitializer_list\fP< _CharT >__l, const _Alloc &__a = \fC_Alloc()\fP)"

.PP
Construct strang from a initializer list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP std::initializer_list of characters\&. 
.br
\fI__a\fP Allocator ta use (default is default allocator)\&. 
.RE
.PP

.PP
Definizzle at line 235 of file basic_string\&.tcc\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> template<typename _InputIterator > \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (_InputIterator__beg, _InputIterator__end, const _Alloc &__a = \fC_Alloc()\fP)"

.PP
Construct strang as copy of a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__beg\fP Start of range\&. 
.br
\fI__end\fP End of range\&. 
.br
\fI__a\fP Allocator ta use (default is default allocator)\&. 
.RE
.PP

.PP
Definizzle at line 228 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::~\fBbasic_string\fP ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Destroy tha strang instance\&. 
.PP
Definizzle at line 538 of file basic_string\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)"

.PP
Append a strang ta dis string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Da strang ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 325 of file basic_string\&.tcc\&.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size(), n' std::size()\&.
.PP
Referenced by std::basic_string< char >::append(), std::collate< _CharT >::do_transform(), std::operator+(), std::basic_string< char >::operator+=(), n' std::operator>>()\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos, size_type__n)"

.PP
Append a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Da strang ta append\&. 
.br
\fI__pos\fP Index of tha straight-up original gangsta characta of str ta append\&. 
.br
\fI__n\fP Da number of charactas ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if \fI__pos\fP aint a valid index\&.
.RE
.PP
This function appendz \fI__n\fP charactas from \fI__str\fP startin at \fI__pos\fP ta dis string\&. If \fI__n\fP is is larger than tha number of available charactas up in \fI__str\fP, tha remainder of \fI__str\fP be appended\&. 
.PP
Definizzle at line 342 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const _CharT *__s, size_type__n)"

.PP
Append a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Da C strang ta append\&. 
.br
\fI__n\fP Da number of charactas ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 298 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const _CharT *__s)\fC [inline]\fP"

.PP
Append a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Da C strang ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 1006 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (size_type__n, _CharT__c)"

.PP
Append multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da number of charactas ta append\&. 
.br
\fI__c\fP Da characta ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&.
.RE
.PP
Appendz __n copiez of __c ta dis string\&. 
.PP
Definizzle at line 281 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (\fBinitializer_list\fP< _CharT >__l)\fC [inline]\fP"

.PP
Append a initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP Da initializer_list of charactas ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 1030 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
Append a range of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencin tha straight-up original gangsta characta ta append\&. 
.br
\fI__last\fP Iterator markin tha end of tha range\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&.
.RE
.PP
Appendz charactas up in tha range [__first,__last) ta dis string\&. 
.PP
Definizzle at line 1044 of file basic_string\&.h\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)"

.PP
Set value ta contentz of another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source strang ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 243 of file basic_string\&.tcc\&.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::get_allocator()\&.
.PP
Referenced by std::basic_string< char >::assign(), std::basic_string< char >::operator=(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), n' std::basic_stringbuf< _CharT, _Traits, _Alloc >::str()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (\fBbasic_string\fP< _CharT, _Traits, _Alloc > &&__str)\fC [inline]\fP"

.PP
Set value ta contentz of another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source strang ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&.
.RE
.PP
This function sets dis strang ta tha exact contentz of \fI__str\fP\&. \fI__str\fP be a valid yo, but unspecified string\&. 
.PP
Definizzle at line 1079 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos, size_type__n)\fC [inline]\fP"

.PP
Set value ta a substrin of a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Da strang ta use\&. 
.br
\fI__pos\fP Index of tha straight-up original gangsta characta of str\&. 
.br
\fI__n\fP Number of charactas ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if \fIpos\fP aint a valid index\&.
.RE
.PP
This function sets dis strang ta tha substrin of \fI__str\fP consistin of \fI__n\fP charactas at \fI__pos\fP\&. If \fI__n\fP is is larger than tha number of available charactas up in \fI__str\fP, tha remainder of \fI__str\fP is used\&. 
.PP
Definizzle at line 1100 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const _CharT *__s, size_type__n)"

.PP
Set value ta a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Da C strang ta use\&. 
.br
\fI__n\fP Number of charactas ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&.
.RE
.PP
This function sets tha value of dis strang ta tha straight-up original gangsta \fI__n\fP charactaz of \fI__s\fP\&. If \fI__n\fP is is larger than tha number of available charactas up in \fI__s\fP, tha remainder of \fI__s\fP is used\&. 
.PP
Definizzle at line 259 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const _CharT *__s)\fC [inline]\fP"

.PP
Set value ta contentz of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Da C strang ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&.
.RE
.PP
This function sets tha value of dis strang ta tha value of \fI__s\fP\&. Da data is copied, so there is no dependence on \fI__s\fP once tha function returns\&. 
.PP
Definizzle at line 1128 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (size_type__n, _CharT__c)\fC [inline]\fP"

.PP
Set value ta multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Length of tha resultin string\&. 
.br
\fI__c\fP Da characta ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&.
.RE
.PP
This function sets tha value of dis strang ta \fI__n\fP copiez of characta \fI__c\fP\&. 
.PP
Definizzle at line 1144 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
Set value ta a range of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencin tha straight-up original gangsta characta ta append\&. 
.br
\fI__last\fP Iterator markin tha end of tha range\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&.
.RE
.PP
Sets value of strang ta charactas up in tha range [__first,__last)\&. 
.PP
Definizzle at line 1157 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (\fBinitializer_list\fP< _CharT >__l)\fC [inline]\fP"

.PP
Set value ta a initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP Da initializer_list of charactas ta assign\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 1167 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::at (size_type__n) const\fC [inline]\fP"

.PP
Provides access ta tha data contained up in tha string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da index of tha characta ta access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (const) reference ta tha character\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fIn\fP be a invalid index\&.
.RE
.PP
This function serves up fo' less thuggy data access\&. Da parameta is first checked dat it is up in tha range of tha string\&. Da function throws out_of_range if tha check fails\&. 
.PP
Definizzle at line 864 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::at (size_type__n)\fC [inline]\fP"

.PP
Provides access ta tha data contained up in tha string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da index of tha characta ta access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference ta tha character\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fIn\fP be a invalid index\&.
.RE
.PP
This function serves up fo' less thuggy data access\&. Da parameta is first checked dat it is up in tha range of tha string\&. Da function throws out_of_range if tha check fails\&. Right back up in yo muthafuckin ass. Success thangs up in dis biatch up in unsharin tha string\&. 
.PP
Definizzle at line 883 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::back ()\fC [inline]\fP"
Returns a read/write reference ta tha data all up in tha last element of tha string\&. 
.PP
Definizzle at line 913 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::back () const\fC [inline]\fP"
Returns a read-only (constant) reference ta tha data all up in tha last element of tha string\&. 
.PP
Definizzle at line 921 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::begin ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write iterator dat points ta tha straight-up original gangsta characta up in tha string\&. Unshares tha string\&. 
.PP
Definizzle at line 605 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::crend(), std::regex_match(), std::regex_replace(), std::regex_search(), n' std::basic_string< char >::rend()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta characta up in tha string\&. 
.PP
Definizzle at line 616 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const _CharT* \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::c_str () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Return const pointa ta null-terminated contents\&. This be a handle ta internal data\&. Do not modify or dire thangs may happen\&. 
.PP
Definizzle at line 1800 of file basic_string\&.h\&.
.PP
Referenced by std::collate< _CharT >::do_compare(), std::money_get< _CharT, _InIta >::do_get(), std::num_get< _CharT, _InIta >::do_get(), std::collate< _CharT >::do_transform(), std::basic_filebuf< char_type, traits_type >::open(), n' std::operator==()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::capacitizzle () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns tha total number of charactas dat tha strang can hold before needin ta allocate mo' memory\&. 
.PP
Definizzle at line 776 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::push_back(), n' std::basic_string< char >::shrink_to_fit()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta characta up in tha string\&. 
.PP
Definizzle at line 680 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::cend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last characta up in tha string\&. 
.PP
Definizzle at line 688 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::clear ()\fC [inline]\fP, \fC [noexcept]\fP"
Erases tha string, makin it empty\&. 
.PP
Definizzle at line 803 of file basic_string\&.h\&.
.PP
Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::setbuf()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str) const\fC [inline]\fP"

.PP
Compare ta a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Strin ta compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Returns a integer < 0 if dis strang is ordered before \fI__str\fP, 0 if they joints is equivalent, or > 0 if dis strang is ordered afta \fI__str\fP\&. Determines tha effectizzle length rlen of tha strings ta compare as tha smallest of size() n' str\&.size()\&. Da function then compares tha two strings by callin traits::compare(data(), str\&.data(),rlen)\&. If tha result of tha comparison is nonzero returns it, otherwise tha shorta one is ordered first\&. 
.PP
Definizzle at line 2225 of file basic_string\&.h\&.
.PP
Referenced by std::sub_match< _Bi_ita >::compare(), std::operator<(), std::operator<=(), std::operator==(), std::operator>(), n' std::operator>=()\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type__pos, size_type__n, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str) const"

.PP
Compare substrin ta a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta of substring\&. 
.br
\fI__n\fP Number of charactas up in substring\&. 
.br
\fI__str\fP Strin ta compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form tha substrin of dis strang from tha \fI__n\fP charactas startin at \fI__pos\fP\&. Returns a integer < 0 if tha substrin is ordered before \fI__str\fP, 0 if they joints is equivalent, or > 0 if tha substrin is ordered afta \fI__str\fP\&. Determines tha effectizzle length rlen of tha strings ta compare as tha smallest of tha length of tha substrin n' \fI__str\&.size()\fP\&. Da function then compares tha two strings by callin traits::compare(substring\&.data(),str\&.data(),rlen)\&. If tha result of tha comparison is nonzero returns it, otherwise tha shorta one is ordered first\&. 
.PP
Definizzle at line 916 of file basic_string\&.tcc\&.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::data(), std::min(), n' std::basic_string< _CharT, _Traits, _Alloc >::size()\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type__pos1, size_type__n1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos2, size_type__n2) const"

.PP
Compare substrin ta a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Index of first characta of substring\&. 
.br
\fI__n1\fP Number of charactas up in substring\&. 
.br
\fI__str\fP Strin ta compare against\&. 
.br
\fI__pos2\fP Index of first characta of substrin of str\&. 
.br
\fI__n2\fP Number of charactas up in substrin of str\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form tha substrin of dis strang from tha \fI__n1\fP charactas startin at \fI__pos1\fP\&. Form tha substrin of \fI__str\fP from tha \fI__n2\fP charactas startin at \fI__pos2\fP\&. Returns a integer < 0 if dis substrin is ordered before tha substrin of \fI__str\fP, 0 if they joints is equivalent, or > 0 if dis substrin is ordered afta tha substrin of \fI__str\fP\&. Determines tha effectizzle length rlen of tha strings ta compare as tha smallest of tha lengthz of tha substrings\&. Da function then compares tha two strings by callin traits::compare(substring\&.data(),str\&.substr(pos2,n2)\&.data(),rlen)\&. If tha result of tha comparison is nonzero returns it, otherwise tha shorta one is ordered first\&. 
.PP
Definizzle at line 931 of file basic_string\&.tcc\&.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::data(), n' std::min()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (const _CharT *__s) const"

.PP
Compare ta a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang ta compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Returns a integer < 0 if dis strang is ordered before \fI__s\fP, 0 if they joints is equivalent, or > 0 if dis strang is ordered afta \fI__s\fP\&. Determines tha effectizzle length rlen of tha strings ta compare as tha smallest of size() n' tha length of a strang constructed from \fI__s\fP\&. Da function then compares tha two strings by callin traits::compare(data(),s,rlen)\&. If tha result of tha comparison is nonzero returns it, otherwise tha shorta one is ordered first\&. 
.PP
Definizzle at line 949 of file basic_string\&.tcc\&.
.PP
References std::min(), n' std::size()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type__pos, size_type__n1, const _CharT *__s) const"

.PP
Compare substrin ta a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta of substring\&. 
.br
\fI__n1\fP Number of charactas up in substring\&. 
.br
\fI__s\fP C strang ta compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form tha substrin of dis strang from tha \fI__n1\fP charactas startin at \fIpos\fP\&. Returns a integer < 0 if tha substrin is ordered before \fI__s\fP, 0 if they joints is equivalent, or > 0 if tha substrin is ordered afta \fI__s\fP\&. Determines tha effectizzle length rlen of tha strings ta compare as tha smallest of tha length of tha substrin n' tha length of a strang constructed from \fI__s\fP\&. Da function then compares tha two strang by callin traits::compare(substring\&.data(),__s,rlen)\&. If tha result of tha comparison is nonzero returns it, otherwise tha shorta one is ordered first\&. 
.PP
Definizzle at line 964 of file basic_string\&.tcc\&.
.PP
References std::min()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type__pos, size_type__n1, const _CharT *__s, size_type__n2) const"

.PP
Compare substrin against a cold-ass lil characta array\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta of substring\&. 
.br
\fI__n1\fP Number of charactas up in substring\&. 
.br
\fI__s\fP characta array ta compare against\&. 
.br
\fI__n2\fP Number of charactaz of s\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form tha substrin of dis strang from tha \fI__n1\fP charactas startin at \fI__pos\fP\&. Form a strang from tha straight-up original gangsta \fI__n2\fP charactaz of \fI__s\fP\&. Returns a integer < 0 if dis substrin is ordered before tha strang from \fI__s\fP, 0 if they joints is equivalent, or > 0 if dis substrin is ordered afta tha strang from \fI__s\fP\&. Determines tha effectizzle length rlen of tha strings ta compare as tha smallest of tha length of tha substrin n' \fI__n2\fP\&. Da function then compares tha two strings by callin traits::compare(substring\&.data(),s,rlen)\&. If tha result of tha comparison is nonzero returns it, otherwise tha shorta one is ordered first\&.
.PP
NB: s must have at least n2 characters, '\\0' has no special meaning\&. 
.PP
Definizzle at line 980 of file basic_string\&.tcc\&.
.PP
References std::min()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::copy (_CharT *__s, size_type__n, size_type__pos = \fC0\fP) const"

.PP
Copy substrin tha fuck into C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang ta copy value into\&. 
.br
\fI__n\fP Number of charactas ta copy\&. 
.br
\fI__pos\fP Index of first characta ta copy\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of charactas straight-up copied 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If __pos > size()\&.
.RE
.PP
Copies up ta \fI__n\fP charactas startin at \fI__pos\fP tha fuck into tha C strang \fI__s\fP\&. If \fI__pos\fP is pimped outa than size(), out_of_range is thrown\&. 
.PP
Definizzle at line 723 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::crbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last characta up in tha string\&. Iteration is done up in reverse element order\&. 
.PP
Definizzle at line 697 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::crend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta one before tha straight-up original gangsta characta up in tha string\&. Iteration is done up in reverse element order\&. 
.PP
Definizzle at line 706 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const _CharT* \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::data () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Return const pointa ta contents\&. This be a handle ta internal data\&. Do not modify or dire thangs may happen\&. 
.PP
Definizzle at line 1810 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::collate< _CharT >::do_compare(), std::collate< _CharT >::do_transform(), std::basic_string< char >::find(), std::basic_string< char >::find_first_not_of(), std::basic_string< char >::find_last_of(), std::match_results< _FwdIterT, _Alloc >::format(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::str(), n' std::regex_traits< _Ch_type >::transform()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> bool \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::empty () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns legit if tha strang is empty\&. Equivalent ta \fC*this == ''\fP\&. 
.PP
Definizzle at line 811 of file basic_string\&.h\&.
.PP
Referenced by std::tr2::operator>>(), n' std::operator>>()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::end ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write iterator dat points one past tha last characta up in tha string\&. Unshares tha string\&. 
.PP
Definizzle at line 624 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::crbegin(), std::basic_string< char >::rbegin(), std::regex_match(), std::regex_replace(), n' std::regex_search()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::end () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last characta up in tha string\&. 
.PP
Definizzle at line 635 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::erase (size_type__pos = \fC0\fP, size_type__n = \fC\fBnpos\fP\fP)\fC [inline]\fP"

.PP
Remove characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta ta remove (default 0)\&. 
.br
\fI__n\fP Number of charactas ta remove (default remainder)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fIpos\fP is beyond tha end of dis string\&.
.RE
.PP
Removes \fI__n\fP charactas from dis strang startin at \fI__pos\fP\&. Da length of tha strang is reduced by \fI__n\fP\&. If there be < \fI__n\fP charactas ta remove, tha remainder of tha strang is truncated\&. If \fI__p\fP is beyond end of string, out_of_range is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1362 of file basic_string\&.h\&.
.PP
Referenced by std::getline(), std::operator>>(), n' std::basic_string< char >::pop_back()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::erase (iterator__position)\fC [inline]\fP"

.PP
Remove one character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP Iterator referencin tha characta ta remove\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
iterator referencin same location afta removal\&.
.RE
.PP
Removes tha characta at \fI__position\fP from dis string\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1378 of file basic_string\&.h\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::erase (iterator__first, iterator__last)"

.PP
Remove a range of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencin tha straight-up original gangsta characta ta remove\&. 
.br
\fI__last\fP Iterator referencin tha end of tha range\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencin location of first afta removal\&.
.RE
.PP
Removes tha charactas up in tha range [first,last) from dis string\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 391 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (const _CharT *__s, size_type__pos, size_type__n) const"

.PP
Find posizzle of a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from\&. 
.br
\fI__n\fP Number of charactas from \fIs\fP ta search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' tha straight-up original gangsta \fI__n\fP charactas up in \fI__s\fP within dis string\&. If found, returns tha index where it begins\&. If not found, returns npos\&. 
.PP
Definizzle at line 737 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.PP
Referenced by std::basic_string< char >::find(), n' std::basic_string< char >::find_first_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find posizzle of a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Strin ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' value of \fI__str\fP within dis string\&. If found, returns tha index where it begins\&. If not found, returns npos\&. 
.PP
Definizzle at line 1846 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (const _CharT *__s, size_type__pos = \fC0\fP) const\fC [inline]\fP"

.PP
Find posizzle of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' tha value of \fI__s\fP within dis string\&. If found, returns tha index where it begins\&. If not found, returns npos\&. 
.PP
Definizzle at line 1861 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (_CharT__c, size_type__pos = \fC0\fP) const\fC [noexcept]\fP"

.PP
Find posizzle of a cold-ass lil character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Characta ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' \fI__c\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 760 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find posizzle of a cold-ass lil characta not up in string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Strin containin charactas ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' a cold-ass lil characta not contained up in \fI__str\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 2079 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::find_first_not_of()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (const _CharT *__s, size_type__pos, size_type__n) const"

.PP
Find posizzle of a cold-ass lil characta not up in C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang containin charactas ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search from\&. 
.br
\fI__n\fP Number of charactas from __s ta consider\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' a cold-ass lil characta not contained up in tha straight-up original gangsta \fI__n\fP charactaz of \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 852 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (const _CharT *__s, size_type__pos = \fC0\fP) const\fC [inline]\fP"

.PP
Find posizzle of a cold-ass lil characta not up in C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang containin charactas ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' a cold-ass lil characta not contained up in \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 2110 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (_CharT__c, size_type__pos = \fC0\fP) const\fC [noexcept]\fP"

.PP
Find posizzle of a gangbangin' finger-lickin' different character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Characta ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' a cold-ass lil characta other than \fI__c\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 864 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find posizzle of a cold-ass lil characta of string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Strin containin charactas ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' one of tha charactaz of \fI__str\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 1952 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::find_first_of()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (const _CharT *__s, size_type__pos, size_type__n) const"

.PP
Find posizzle of a cold-ass lil characta of C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Strin containin charactas ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from\&. 
.br
\fI__n\fP Number of charactas from s ta search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' one of tha straight-up original gangsta \fI__n\fP charactaz of \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 816 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (const _CharT *__s, size_type__pos = \fC0\fP) const\fC [inline]\fP"

.PP
Find posizzle of a cold-ass lil characta of C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Strin containin charactas ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' one of tha charactaz of \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 1982 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (_CharT__c, size_type__pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find posizzle of a cold-ass lil character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Characta ta locate\&. 
.br
\fI__pos\fP Index of characta ta search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches forward fo' tha characta \fI__c\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&.
.PP
Note: equivalent ta find(__c, __pos)\&. 
.PP
Definizzle at line 2001 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last posizzle of a cold-ass lil characta not up in string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Strin containin charactas ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' a cold-ass lil characta not contained up in \fI__str\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 2142 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::find_last_not_of()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (const _CharT *__s, size_type__pos, size_type__n) const"

.PP
Find last posizzle of a cold-ass lil characta not up in C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang containin charactas ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search back from\&. 
.br
\fI__n\fP Number of charactas from s ta consider\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' a cold-ass lil characta not contained up in tha straight-up original gangsta \fI__n\fP charactaz of \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 875 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (const _CharT *__s, size_type__pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Find last posizzle of a cold-ass lil characta not up in C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang containin charactas ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' a cold-ass lil characta not contained up in \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 2173 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (_CharT__c, size_type__pos = \fC\fBnpos\fP\fP) const\fC [noexcept]\fP"

.PP
Find last posizzle of a gangbangin' finger-lickin' different character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Characta ta avoid\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' a cold-ass lil characta other than \fI__c\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 896 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last posizzle of a cold-ass lil characta of string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Strin containin charactas ta locate\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' one of tha charactaz of \fI__str\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 2016 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::find_last_of()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (const _CharT *__s, size_type__pos, size_type__n) const"

.PP
Find last posizzle of a cold-ass lil characta of C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang containin charactas ta locate\&. 
.br
\fI__pos\fP Index of characta ta search back from\&. 
.br
\fI__n\fP Number of charactas from s ta search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' one of tha straight-up original gangsta \fI__n\fP charactaz of \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 831 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (const _CharT *__s, size_type__pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Find last posizzle of a cold-ass lil characta of C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang containin charactas ta locate\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' one of tha charactaz of \fI__s\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 2046 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (_CharT__c, size_type__pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last posizzle of a cold-ass lil character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Characta ta locate\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' \fI__c\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&.
.PP
Note: equivalent ta rfind(__c, __pos)\&. 
.PP
Definizzle at line 2065 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::front ()\fC [inline]\fP"
Returns a read/write reference ta tha data all up in tha straight-up original gangsta element of tha string\&. 
.PP
Definizzle at line 897 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::front () const\fC [inline]\fP"
Returns a read-only (constant) reference ta tha data all up in tha straight-up original gangsta element of tha string\&. 
.PP
Definizzle at line 905 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> allocator_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::get_allocator () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Return copy of allocator used ta construct dis string\&. 
.PP
Definizzle at line 1817 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::assign(), std::basic_string< char >::basic_string(), std::basic_string< _CharT, _Traits, _Alloc >::swap(), n' std::basic_string< char >::~basic_string()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator__p, size_type__n, _CharT__c)\fC [inline]\fP"

.PP
Insert multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencin location up in strang ta bang at\&. 
.br
\fI__n\fP Number of charactas ta bang 
.br
\fI__c\fP Da characta ta insert\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Inserts \fI__n\fP copiez of characta \fI__c\fP startin all up in tha posizzle referenced by iterator \fI__p\fP\&. If addin charactas causes tha length ta exceed max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1185 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::insert()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator__p, _InputIterator__beg, _InputIterator__end)\fC [inline]\fP"

.PP
Insert a range of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencin location up in strang ta bang at\&. 
.br
\fI__beg\fP Start of range\&. 
.br
\fI__end\fP End of range\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Inserts charactas up in range [__beg,__end)\&. If addin charactas causes tha length ta exceed max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1202 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator__p, \fBinitializer_list\fP< _CharT >__l)\fC [inline]\fP"

.PP
Insert a initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencin location up in strang ta bang at\&. 
.br
\fI__l\fP Da initializer_list of charactas ta insert\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&. 
.RE
.PP

.PP
Definizzle at line 1213 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type__pos1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)\fC [inline]\fP"

.PP
Insert value of a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Iterator referencin location up in strang ta bang at\&. 
.br
\fI__str\fP Da strang ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Inserts value of \fI__str\fP startin at \fI__pos1\fP\&. If addin charactas causes tha length ta exceed max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1233 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type__pos1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos2, size_type__n)\fC [inline]\fP"

.PP
Insert a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Iterator referencin location up in strang ta bang at\&. 
.br
\fI__str\fP Da strang ta insert\&. 
.br
\fI__pos2\fP Start of charactas up in str ta insert\&. 
.br
\fI__n\fP Number of charactas ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fIpos1\fP > size() or \fI__pos2\fP > \fIstr\&.size()\fP\&.
.RE
.PP
Startin at \fIpos1\fP, bang \fI__n\fP characta of \fI__str\fP beginnin wit \fI__pos2\fP\&. If addin charactas causes tha length ta exceed max_size(), length_error is thrown\&. If \fI__pos1\fP is beyond tha end of dis strang or \fI__pos2\fP is beyond tha end of \fI__str\fP, out_of_range is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1255 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type__pos, const _CharT *__s, size_type__n)"

.PP
Insert a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencin location up in strang ta bang at\&. 
.br
\fI__s\fP Da C strang ta insert\&. 
.br
\fI__n\fP Da number of charactas ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fI__pos\fP is beyond tha end of dis string\&.
.RE
.PP
Inserts tha straight-up original gangsta \fI__n\fP charactaz of \fI__s\fP startin at \fI__pos\fP\&. If addin charactas causes tha length ta exceed max_size(), length_error is thrown\&. If \fI__pos\fP is beyond end(), out_of_range is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 360 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type__pos, const _CharT *__s)\fC [inline]\fP"

.PP
Insert a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencin location up in strang ta bang at\&. 
.br
\fI__s\fP Da C strang ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fIpos\fP is beyond tha end of dis string\&.
.RE
.PP
Inserts tha straight-up original gangsta \fIn\fP charactaz of \fI__s\fP startin at \fI__pos\fP\&. If addin charactas causes tha length ta exceed max_size(), length_error is thrown\&. If \fI__pos\fP is beyond end(), out_of_range is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1296 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type__pos, size_type__n, _CharT__c)\fC [inline]\fP"

.PP
Insert multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index up in strang ta bang at\&. 
.br
\fI__n\fP Number of charactas ta bang 
.br
\fI__c\fP Da characta ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fI__pos\fP is beyond tha end of dis string\&.
.RE
.PP
Inserts \fI__n\fP copiez of characta \fI__c\fP startin at index \fI__pos\fP\&. If addin charactas causes tha length ta exceed max_size(), length_error is thrown\&. If \fI__pos\fP > length(), out_of_range is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1319 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator__p, _CharT__c)\fC [inline]\fP"

.PP
Insert one character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencin posizzle up in strang ta bang at\&. 
.br
\fI__c\fP Da characta ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencin newly banged char\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Inserts characta \fI__c\fP at posizzle referenced by \fI__p\fP\&. If addin characta causes tha length ta exceed max_size(), length_error is thrown\&. If \fI__p\fP is beyond end of string, out_of_range is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1337 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::length () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha number of charactas up in tha string, not includin any null-termination\&. 
.PP
Definizzle at line 721 of file basic_string\&.h\&.
.PP
Referenced by std::collate< _CharT >::do_compare(), n' std::collate< _CharT >::do_transform()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha size() of tha phattest possible string\&. 
.PP
Definizzle at line 726 of file basic_string\&.h\&.
.PP
Referenced by std::getline(), n' std::operator>>()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)\fC [inline]\fP"

.PP
Append a strang ta dis string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Da strang ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 932 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (const _CharT *__s)\fC [inline]\fP"

.PP
Append a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Da C strang ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 941 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (_CharT__c)\fC [inline]\fP"

.PP
Append a cold-ass lil character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Da characta ta append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 950 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (\fBinitializer_list\fP< _CharT >__l)\fC [inline]\fP"

.PP
Append a initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP Da initializer_list of charactas ta be appended\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP

.PP
Definizzle at line 963 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)\fC [inline]\fP"

.PP
Assign tha value of \fIstr\fP ta dis string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.RE
.PP

.PP
Definizzle at line 546 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (const _CharT *__s)\fC [inline]\fP"

.PP
Copy contentz of \fIs\fP tha fuck into dis string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source null-terminated string\&. 
.RE
.PP

.PP
Definizzle at line 554 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (_CharT__c)\fC [inline]\fP"

.PP
Set value ta strang of length 1\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Source character\&.
.RE
.PP
Assignin ta a cold-ass lil characta make dis strang length 1 n' (*this)[0] == \fIc\fP\&. 
.PP
Definizzle at line 565 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (\fBbasic_string\fP< _CharT, _Traits, _Alloc > &&__str)\fC [inline]\fP"

.PP
Move assign tha value of \fIstr\fP ta dis string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&.
.RE
.PP
Da contentz of \fIstr\fP is moved tha fuck into dis strang (without copying)\&. \fIstr\fP be a valid yo, but unspecified string\&. 
.PP
Definizzle at line 580 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (\fBinitializer_list\fP< _CharT >__l)\fC [inline]\fP"

.PP
Set value ta strang constructed from initializer list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP std::initializer_list\&. 
.RE
.PP

.PP
Definizzle at line 592 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator[] (size_type__pos) const\fC [inline]\fP"

.PP
Subscript access ta tha data contained up in tha string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Da index of tha characta ta access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (constant) reference ta tha character\&.
.RE
.PP
This operator allows fo' easy as fuck , array-style, data access\&. Note dat data access wit dis operator is unchecked n' out_of_range lookups is not defined\&. (For checked lookups peep at()\&.) 
.PP
Definizzle at line 826 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::back(), n' std::basic_string< char >::front()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator[] (size_type__pos)\fC [inline]\fP"

.PP
Subscript access ta tha data contained up in tha string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Da index of tha characta ta access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference ta tha character\&.
.RE
.PP
This operator allows fo' easy as fuck , array-style, data access\&. Note dat data access wit dis operator is unchecked n' out_of_range lookups is not defined\&. (For checked lookups peep at()\&.) Unshares tha string\&. 
.PP
Definizzle at line 843 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::pop_back ()\fC [inline]\fP"

.PP
Remove tha last character\&. Da strang must be non-empty\&. 
.PP
Definizzle at line 1407 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::push_back (_CharT__c)\fC [inline]\fP"

.PP
Append a single character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Characta ta append\&. 
.RE
.PP

.PP
Definizzle at line 1052 of file basic_string\&.h\&.
.PP
Referenced by std::collate< _CharT >::do_transform(), std::basic_string< char >::operator+=(), std::tr2::operator>>(), std::operator>>(), n' std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBreverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rbegin ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write reverse iterator dat points ta tha last characta up in tha string\&. Iteration is done up in reverse element order\&. Unshares tha string\&. 
.PP
Definizzle at line 644 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last characta up in tha string\&. Iteration is done up in reverse element order\&. 
.PP
Definizzle at line 653 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBreverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rend ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write reverse iterator dat points ta one before tha straight-up original gangsta characta up in tha string\&. Iteration is done up in reverse element order\&. Unshares tha string\&. 
.PP
Definizzle at line 662 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta one before tha straight-up original gangsta characta up in tha string\&. Iteration is done up in reverse element order\&. 
.PP
Definizzle at line 671 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type__pos, size_type__n, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)\fC [inline]\fP"

.PP
Replace charactas wit value from another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta ta replace\&. 
.br
\fI__n\fP Number of charactas ta be replaced\&. 
.br
\fI__str\fP Strin ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fIpos\fP is beyond tha end of dis string\&. 
.br
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__pos,__pos+__n) from dis string\&. In place, tha value of \fI__str\fP is inserted\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If tha length of tha result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1429 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::append(), std::basic_string< char >::assign(), std::basic_string< char >::insert(), n' std::basic_string< char >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type__pos1, size_type__n1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos2, size_type__n2)\fC [inline]\fP"

.PP
Replace charactas wit value from another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Index of first characta ta replace\&. 
.br
\fI__n1\fP Number of charactas ta be replaced\&. 
.br
\fI__str\fP Strin ta insert\&. 
.br
\fI__pos2\fP Index of first characta of str ta use\&. 
.br
\fI__n2\fP Number of charactas from str ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos1\fP > size() or \fI__pos2\fP > __str\&.size()\&. 
.br
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__pos1,__pos1 + n) from dis string\&. In place, tha value of \fI__str\fP is inserted\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If tha length of tha result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1451 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type__pos, size_type__n1, const _CharT *__s, size_type__n2)"

.PP
Replace charactas wit value of a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta ta replace\&. 
.br
\fI__n1\fP Number of charactas ta be replaced\&. 
.br
\fI__s\fP C strang ta insert\&. 
.br
\fI__n2\fP Number of charactas from \fIs\fP ta use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fIpos1\fP > size()\&. 
.br
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__pos,__pos + __n1) from dis string\&. In place, tha straight-up original gangsta \fI__n2\fP charactaz of \fI__s\fP is inserted, or all of \fI__s\fP if \fI__n2\fP is too large\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 414 of file basic_string\&.tcc\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type__pos, size_type__n1, const _CharT *__s)\fC [inline]\fP"

.PP
Replace charactas wit value of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta ta replace\&. 
.br
\fI__n1\fP Number of charactas ta be replaced\&. 
.br
\fI__s\fP C strang ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fIpos\fP > size()\&. 
.br
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__pos,__pos + __n1) from dis string\&. In place, tha charactaz of \fI__s\fP is inserted\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1496 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type__pos, size_type__n1, size_type__n2, _CharT__c)\fC [inline]\fP"

.PP
Replace charactas wit multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta ta replace\&. 
.br
\fI__n1\fP Number of charactas ta be replaced\&. 
.br
\fI__n2\fP Number of charactas ta insert\&. 
.br
\fI__c\fP Characta ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos\fP > size()\&. 
.br
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [pos,pos + n1) from dis string\&. In place, \fI__n2\fP copiez of \fI__c\fP is inserted\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1520 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator__i1, iterator__i2, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str)\fC [inline]\fP"

.PP
Replace range of charactas wit string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencin start of range ta replace\&. 
.br
\fI__i2\fP Iterator referencin end of range ta replace\&. 
.br
\fI__str\fP Strin value ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__i1,__i2)\&. In place, tha value of \fI__str\fP is inserted\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1538 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator__i1, iterator__i2, const _CharT *__s, size_type__n)\fC [inline]\fP"

.PP
Replace range of charactas wit C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencin start of range ta replace\&. 
.br
\fI__i2\fP Iterator referencin end of range ta replace\&. 
.br
\fI__s\fP C strang value ta insert\&. 
.br
\fI__n\fP Number of charactas from s ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__i1,__i2)\&. In place, tha straight-up original gangsta \fI__n\fP charactaz of \fI__s\fP is inserted\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1557 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator__i1, iterator__i2, const _CharT *__s)\fC [inline]\fP"

.PP
Replace range of charactas wit C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencin start of range ta replace\&. 
.br
\fI__i2\fP Iterator referencin end of range ta replace\&. 
.br
\fI__s\fP C strang value ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__i1,__i2)\&. In place, tha charactaz of \fI__s\fP is inserted\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1578 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator__i1, iterator__i2, size_type__n, _CharT__c)\fC [inline]\fP"

.PP
Replace range of charactas wit multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencin start of range ta replace\&. 
.br
\fI__i2\fP Iterator referencin end of range ta replace\&. 
.br
\fI__n\fP Number of charactas ta insert\&. 
.br
\fI__c\fP Characta ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__i1,__i2)\&. In place, \fI__n\fP copiez of \fI__c\fP is inserted\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1599 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator__i1, iterator__i2, _InputIterator__k1, _InputIterator__k2)\fC [inline]\fP"

.PP
Replace range of charactas wit range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencin start of range ta replace\&. 
.br
\fI__i2\fP Iterator referencin end of range ta replace\&. 
.br
\fI__k1\fP Iterator referencin start of range ta insert\&. 
.br
\fI__k2\fP Iterator referencin end of range ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__i1,__i2)\&. In place, charactas up in tha range [__k1,__k2) is inserted\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1623 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator__i1, iterator__i2, \fBinitializer_list\fP< _CharT >__l)\fC [inline]\fP"

.PP
Replace range of charactas wit initializer_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencin start of range ta replace\&. 
.br
\fI__i2\fP Iterator referencin end of range ta replace\&. 
.br
\fI__l\fP Da initializer_list of charactas ta insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference ta dis string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If freshly smoked up length exceedz \fCmax_size()\fP\&.
.RE
.PP
Removes tha charactas up in tha range [__i1,__i2)\&. In place, charactas up in tha range [__k1,__k2) is inserted\&. If tha length of result exceedz max_size(), length_error is thrown\&. Da value of tha strang don't chizzle if a error is thrown\&. 
.PP
Definizzle at line 1692 of file basic_string\&.h\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::reserve (size_type__res_arg = \fC0\fP)"

.PP
Attempt ta preallocate enough memory fo' specified number of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__res_arg\fP Number of charactas required\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If \fI__res_arg\fP exceedz \fCmax_size()\fP\&.
.RE
.PP
This function attempts ta reserve enough memory fo' tha strang ta hold tha specified number of characters\&. If tha number axed is mo' than max_size(), length_error is thrown\&.
.PP
Da advantage of dis function is dat if optimal code be a necessitizzle n' tha user can determine tha strang length dat is ghon be required, tha user can reserve tha memory up in advance, n' thus prevent a possible reallocation of memory n' copyin of strang data\&. 
.PP
Definizzle at line 502 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.PP
Referenced by std::num_get< _CharT, _InIta >::do_get(), std::tr2::operator>>(), std::operator>>(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), std::basic_string< char >::push_back(), n' std::basic_string< char >::shrink_to_fit()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::resize (size_type__n, _CharT__c)"

.PP
Resizes tha strang ta tha specified number of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of charactas tha strang should contain\&. 
.br
\fI__c\fP Characta ta fill any freshly smoked up elements\&.
.RE
.PP
This function will resize tha strang ta tha specified number of characters\&. If tha number is smalla than tha stringz current size tha strang is truncated, otherwise tha strang is extended n' freshly smoked up elements is set ta \fI__c\fP\&. 
.PP
Definizzle at line 640 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.PP
Referenced by std::money_get< _CharT, _InIta >::do_get(), n' std::basic_string< char >::resize()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::resize (size_type__n)\fC [inline]\fP"

.PP
Resizes tha strang ta tha specified number of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of charactas tha strang should contain\&.
.RE
.PP
This function will resize tha strang ta tha specified length\&. If tha freshly smoked up size is smalla than tha stringz current size tha strang is truncated, otherwise tha strang is extended n' freshly smoked up charactas is default-constructed\&. For basic types like fuckin char, dis means settin dem ta 0\&. 
.PP
Definizzle at line 753 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > &__str, size_type__pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last posizzle of a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Strin ta locate\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' value of \fI__str\fP within dis string\&. If found, returns tha index where it begins\&. If not found, returns npos\&. 
.PP
Definizzle at line 1891 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< char >::find_last_of(), n' std::basic_string< char >::rfind()\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (const _CharT *__s, size_type__pos, size_type__n) const"

.PP
Find last posizzle of a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang ta locate\&. 
.br
\fI__pos\fP Index of characta ta search back from\&. 
.br
\fI__n\fP Number of charactas from s ta search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' tha straight-up original gangsta \fI__n\fP charactas up in \fI__s\fP within dis string\&. If found, returns tha index where it begins\&. If not found, returns npos\&. 
.PP
Definizzle at line 778 of file basic_string\&.tcc\&.
.PP
References std::min(), n' std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (const _CharT *__s, size_type__pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Find last posizzle of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C strang ta locate\&. 
.br
\fI__pos\fP Index of characta ta start search at (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' tha value of \fI__s\fP within dis string\&. If found, returns tha index where it begins\&. If not found, returns npos\&. 
.PP
Definizzle at line 1921 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (_CharT__c, size_type__pos = \fC\fBnpos\fP\fP) const\fC [noexcept]\fP"

.PP
Find last posizzle of a cold-ass lil character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Characta ta locate\&. 
.br
\fI__pos\fP Index of characta ta search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Startin from \fI__pos\fP, searches backward fo' \fI__c\fP within dis string\&. If found, returns tha index where dat shiznit was found\&. If not found, returns npos\&. 
.PP
Definizzle at line 799 of file basic_string\&.tcc\&.
.PP
References std::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::shrink_to_fit ()\fC [inline]\fP"

.PP
A non-bindin request ta reduce capacity() ta size()\&. 
.PP
Definizzle at line 759 of file basic_string\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha number of charactas up in tha string, not includin any null-termination\&. 
.PP
Definizzle at line 715 of file basic_string\&.h\&.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::append(), std::basic_string< char >::assign(), std::basic_string< char >::at(), std::basic_string< char >::back(), std::basic_string< char >::cend(), std::basic_string< char >::clear(), std::basic_string< char >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::tr2::dynamic_bitset< _WordT, _Alloc >::dynamic_bitset(), std::basic_string< char >::empty(), std::basic_string< char >::end(), std::basic_string< char >::find(), std::basic_string< char >::find_first_not_of(), std::basic_string< char >::find_last_of(), std::match_results< _FwdIterT, _Alloc >::format(), std::basic_string< char >::insert(), std::operator+(), std::tr2::operator>>(), std::basic_string< char >::operator[](), std::basic_string< char >::pop_back(), std::basic_string< char >::push_back(), std::basic_string< char >::replace(), std::basic_string< char >::shrink_to_fit(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::str(), n' std::regex_traits< _Ch_type >::transform()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::substr (size_type__pos = \fC0\fP, size_type__n = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Git a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first characta (default 0)\&. 
.br
\fI__n\fP Number of charactas up in substrin (default remainder)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Da freshly smoked up string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If __pos > size()\&.
.RE
.PP
Construct n' return a freshly smoked up strang rockin tha \fI__n\fP charactas startin at \fI__pos\fP\&. If tha strang is too short, use tha remainder of tha characters\&. If \fI__pos\fP is beyond tha end of tha string, out_of_range is thrown\&. 
.PP
Definizzle at line 2206 of file basic_string\&.h\&.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::swap (\fBbasic_string\fP< _CharT, _Traits, _Alloc > &__s)"

.PP
Swap contents wit another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Strin ta swap with\&.
.RE
.PP
Exchanges tha contentz of dis strang wit dat of \fI__s\fP up in constant time\&. 
.PP
Definizzle at line 519 of file basic_string\&.tcc\&.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::get_allocator()\&.
.PP
Referenced by std::basic_string< char >::assign(), std::basic_string< char >::operator=(), n' std::swap()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::npos\fC [static]\fP"

.PP
Value returned by various member functions when they fail\&. 
.PP
Definizzle at line 285 of file basic_string\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
