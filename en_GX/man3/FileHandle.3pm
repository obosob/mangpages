.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FileHandle 3pm"
.TH FileHandle 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
FileHandle \- supply object methodz fo' filehandles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use FileHandle;
\&
\&    $fh = FileHandle\->new;
\&    if ($fh\->open("< file")) {
\&        print <$fh>;
\&        $fh\->close;
\&    }
\&
\&    $fh = FileHandle\->new("> FOO");
\&    if (defined $fh) {
\&        print $fh "bar\en";
\&        $fh\->close;
\&    }
\&
\&    $fh = FileHandle\->new("file", "r");
\&    if (defined $fh) {
\&        print <$fh>;
\&        undef $fh;       # automatically closes tha file
\&    }
\&
\&    $fh = FileHandle\->new("file", O_WRONLY|O_APPEND);
\&    if (defined $fh) {
\&        print $fh "corge\en";
\&        undef $fh;       # automatically closes tha file
\&    }
\&
\&    $pos = $fh\->getpos;
\&    $fh\->setpos($pos);
\&
\&    $fh\->setvbuf($buffer_var, _IOLBF, 1024);
\&
\&    ($readfh, $writefh) = FileHandle::pipe;
\&
\&    autoflush STDOUT 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1NOTE:\s0 This class is now a gangbangin' front-end ta tha IO::* classes.
.PP
\&\f(CW\*(C`FileHandle::new\*(C'\fR creates a \f(CW\*(C`FileHandle\*(C'\fR, which be a reference ta a
newly pimped symbol (see tha \f(CW\*(C`Symbol\*(C'\fR package).  If it receives any
parameters, they is passed ta \f(CW\*(C`FileHandle::open\*(C'\fR; if tha open fails,
the \f(CW\*(C`FileHandle\*(C'\fR object is destroyed. Y'all KNOW dat shit, muthafucka!  Otherwise, it is returned to
the caller.
.PP
\&\f(CW\*(C`FileHandle::new_from_fd\*(C'\fR creates a \f(CW\*(C`FileHandle\*(C'\fR like \f(CW\*(C`new\*(C'\fR do.
It requires two parameters, which is passed ta \f(CW\*(C`FileHandle::fdopen\*(C'\fR;
if tha fdopen fails, tha \f(CW\*(C`FileHandle\*(C'\fR object is destroyed.
Otherwise, it is moonwalked back ta tha caller.
.PP
\&\f(CW\*(C`FileHandle::open\*(C'\fR accepts one parameta or two.  With one parameter,
it is just a gangbangin' front end fo' tha built-in \f(CW\*(C`open\*(C'\fR function. I aint talkin' bout chicken n' gravy biatch.  With two
parameters, tha straight-up original gangsta parameta be a gangbangin' filename dat may include
whitespace or other special characters, n' tha second parameta is
the open mode, optionally followed by a gangbangin' file permission value.
.PP
If \f(CW\*(C`FileHandle::open\*(C'\fR receives a Perl mode strang (\*(L">\*(R", \*(L"+<\*(R", etc.)
or a \s-1POSIX\s0 \fIfopen()\fR mode strang (\*(L"w\*(R", \*(L"r+\*(R", etc.), it uses tha basic
Perl \f(CW\*(C`open\*(C'\fR operator.
.PP
If \f(CW\*(C`FileHandle::open\*(C'\fR is given a numeric mode, it passes dat mode
and tha optionizzle permissions value ta tha Perl \f(CW\*(C`sysopen\*(C'\fR operator.
For convenience, \f(CW\*(C`FileHandle::import\*(C'\fR tries ta import tha O_XXX
constants from tha Fcntl module.  If dynamic loadin aint available,
this may fail yo, but tha rest of FileHandle will still work.
.PP
\&\f(CW\*(C`FileHandle::fdopen\*(C'\fR is like \f(CW\*(C`open\*(C'\fR except dat its first parameter
is not a gangbangin' filename but rather a gangbangin' file handle name, a FileHandle object,
or a gangbangin' file descriptor number.
.PP
If tha C functions \fIfgetpos()\fR n' \fIfsetpos()\fR is available, then
\&\f(CW\*(C`FileHandle::getpos\*(C'\fR returns a opaque value dat represents the
current posizzle of tha FileHandle, n' \f(CW\*(C`FileHandle::setpos\*(C'\fR uses
that value ta return ta a previously hit up position.
.PP
If tha C function \fIsetvbuf()\fR be available, then \f(CW\*(C`FileHandle::setvbuf\*(C'\fR
sets tha bufferin policy fo' tha FileHandle.  Da callin sequence
for tha Perl function is tha same ol' dirty as its C counterpart, includin the
macros \f(CW\*(C`_IOFBF\*(C'\fR, \f(CW\*(C`_IOLBF\*(C'\fR, n' \f(CW\*(C`_IONBF\*(C'\fR, except dat tha buffer
parameta specifies a scalar variable ta use as a funky-ass buffer n' shit.  \s-1WARNING: A\s0
variable used as a funky-ass buffer by \f(CW\*(C`FileHandle::setvbuf\*(C'\fR must not be
modified up in any way until tha FileHandle is closed or until
\&\f(CW\*(C`FileHandle::setvbuf\*(C'\fR is called again, or memory corruption may
result!
.PP
See perlfunc fo' complete descriptionz of each of tha following
supported \f(CW\*(C`FileHandle\*(C'\fR methods, which is just front endz fo' the
correspondin built-in functions:
.PP
.Vb 8
\&    close
\&    fileno
\&    getc
\&    gets
\&    eof
\&    clearerr
\&    seek
\&    tell
.Ve
.PP
See perlvar fo' complete descriptionz of each of tha following
supported \f(CW\*(C`FileHandle\*(C'\fR methods:
.PP
.Vb 12
\&    autoflush
\&    output_field_separator
\&    output_record_separator
\&    input_record_separator
\&    input_line_number
\&    format_page_number
\&    format_lines_per_page
\&    format_lines_left
\&    format_name
\&    format_top_name
\&    format_line_break_characters
\&    format_formfeed
.Ve
.PP
Furthermore, fo' bustin aiiight I/O you might need these:
.ie n .IP "$fh\->print" 4
.el .IP "\f(CW$fh\fR\->print" 4
.IX Item "$fh->print"
See \*(L"print\*(R" up in perlfunc.
.ie n .IP "$fh\->printf" 4
.el .IP "\f(CW$fh\fR\->printf" 4
.IX Item "$fh->printf"
See \*(L"printf\*(R" up in perlfunc.
.ie n .IP "$fh\->getline" 4
.el .IP "\f(CW$fh\fR\->getline" 4
.IX Item "$fh->getline"
This works like <$fh> busted lyrics bout up in \*(L"I/O Operators\*(R" up in perlop
except dat itz mo' readable n' can be safely called up in a
list context but still returns just one line.
.ie n .IP "$fh\->getlines" 4
.el .IP "\f(CW$fh\fR\->getlines" 4
.IX Item "$fh->getlines"
This works like <$fh> when called up in a list context to
read all tha remainin lines up in a gangbangin' file, except dat itz mo' readable.
It will also \fIcroak()\fR if accidentally called up in a scalar context.
.PP
There is nuff other functions available since FileHandle is descended
from IO::File, IO::Seekable, n' IO::Handle.  Please peep them
respectizzle pages fo' documentation on mo' functions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fB\s-1IO\s0\fR extension,
perlfunc, 
\&\*(L"I/O Operators\*(R" up in perlop.
