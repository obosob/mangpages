.TH "wl_proxy" 3 "Mon Oct 7 2013" "Version 1.2.0" "Wayland" \" -*- nroff -*-
.ad l
.nh
.SH NAME
wl_proxy \- 
.PP
Represents a protocol object on tha client side\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <wayland-client\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "struct \fBwl_proxy\fP * \fBwl_proxy_create\fP (struct \fBwl_proxy\fP *factory, const struct wl_interface *interface)"
.br
.ti -1c
.RI "void \fBwl_proxy_destroy\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "int \fBwl_proxy_add_listener\fP (struct \fBwl_proxy\fP *proxy, void(**implementation)(void), void *data)"
.br
.ti -1c
.RI "void \fBwl_proxy_marshal\fP (struct \fBwl_proxy\fP *proxy, uint32_t opcode,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBwl_proxy_set_user_data\fP (struct \fBwl_proxy\fP *proxy, void *user_data)"
.br
.ti -1c
.RI "void * \fBwl_proxy_get_user_data\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "uint32_t \fBwl_proxy_get_id\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "const char * \fBwl_proxy_get_class\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "void \fBwl_proxy_set_queue\fP (struct \fBwl_proxy\fP *proxy, struct \fBwl_event_queue\fP *queue)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Represents a protocol object on tha client side\&. 

A \fBwl_proxy\fP acts as a cold-ass lil client side proxy ta a object existin up in tha compositor\&. Da proxy is responsible fo' convertin requests made by tha clients wit \fBwl_proxy_marshal()\fP tha fuck into Waylandz wire format\&. Events comin from tha compositor is also handled by tha proxy, which will up in turn call tha handlez set wit \fBwl_proxy_add_listener()\fP\&.
.PP
\fBNote:\fP
.RS 4
With tha exception of function \fBwl_proxy_set_queue()\fP, functions accessin a \fBwl_proxy\fP is not normally used by client code\&. Clients should normally use tha higher level intercourse generated by tha scanner ta interact wit compositor objects\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "int wl_proxy_add_listener (struct \fBwl_proxy\fP *proxy, void(**)(void)implementation, void *data)"
Set a proxyz listener
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy object 
.br
\fIimplementation\fP Da listener ta be added ta proxy 
.br
\fIdata\fP User data ta be associated wit tha proxy 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on failure
.RE
.PP
Set proxyz listener ta \fCimplementation\fP n' its user data ta \fCdata\fP\&. If a listener has already been set, dis function fails n' not a god damn thang is chizzled\&.
.PP
\fCimplementation\fP be a vector of function pointers\&. For a opcode \fCn\fP, \fCimplementation\fP[n] should point ta tha handlez of \fCn\fP fo' tha given object\&. 
.SS "struct \fBwl_proxy\fP * wl_proxy_create (struct \fBwl_proxy\fP *factory, const struct wl_interface *interface)"
Smoke a proxy object wit a given intercourse
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP Factory proxy object 
.br
\fIinterface\fP Interface tha proxy object should use 
.RE
.PP
\fBReturns:\fP
.RS 4
A newly allocated proxy object or NULL on failure
.RE
.PP
This function creates a freshly smoked up proxy object wit tha supplied intercourse\&. Da proxy object gonna git a id assigned from tha client id space\&. Da id should be pimped on tha compositor side by bustin  a appropriate request wit \fBwl_proxy_marshal()\fP\&.
.PP
Da proxy will inherit tha display n' event queue of tha factory object\&.
.PP
\fBNote:\fP
.RS 4
This should not normally be used by non-generated code\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwl_display\fP, \fBwl_event_queue\fP, \fBwl_proxy_marshal()\fP 
.RE
.PP

.SS "void wl_proxy_destroy (struct \fBwl_proxy\fP *proxy)"
Destroy a proxy object
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy ta be destroyed 
.RE
.PP

.SS "const char * wl_proxy_get_class (struct \fBwl_proxy\fP *proxy)"
Git tha intercourse name (class) of a proxy object
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy object 
.RE
.PP
\fBReturns:\fP
.RS 4
Da intercourse name of tha object associated wit tha proxy 
.RE
.PP

.SS "uint32_t wl_proxy_get_id (struct \fBwl_proxy\fP *proxy)"
Git tha id of a proxy object
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy object 
.RE
.PP
\fBReturns:\fP
.RS 4
Da id tha object associated wit tha proxy 
.RE
.PP

.SS "void * wl_proxy_get_user_data (struct \fBwl_proxy\fP *proxy)"
Git tha user data associated wit a proxy
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy object 
.RE
.PP
\fBReturns:\fP
.RS 4
Da user data associated wit proxy 
.RE
.PP

.SS "void wl_proxy_marshal (struct \fBwl_proxy\fP *proxy, uint32_topcode, \&.\&.\&.)"
Prepare a request ta be busted ta tha compositor
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy object 
.br
\fIopcode\fP Opcode of tha request ta be busted 
.br
\fI\&.\&.\&.\fP Extra arguments fo' tha given request
.RE
.PP
Translates tha request given by opcode n' tha extra arguments tha fuck into tha wire format n' write it ta tha connection buffer\&.
.PP
Da example below creates a proxy object wit tha wl_surface_interface rockin a wl_compositor factory intercourse n' sendz tha \fCcompositor\&.create_surface\fP request rockin \fBwl_proxy_marshal()\fP\&. Note tha \fCid\fP is tha extra argument ta tha request as specified by tha protocol\&.
.PP
.PP
.nf
* id = wl_proxy_create((struct wl_proxy *) wl_compositor,
*                      &wl_surface_interface);
* wl_proxy_marshal((struct wl_proxy *) wl_compositor,
*                  WL_COMPOSITOR_CREATE_SURFACE, id);
* 
.fi
.PP
.PP
\fBNote:\fP
.RS 4
This should not normally be used by non-generated code\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwl_proxy_create()\fP 
.RE
.PP

.SS "void wl_proxy_set_queue (struct \fBwl_proxy\fP *proxy, struct \fBwl_event_queue\fP *queue)"
Assign a proxy ta a event queue
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy object 
.br
\fIqueue\fP Da event queue dat will handle dis proxy
.RE
.PP
Assign proxy ta event queue\&. Events comin from \fCproxy\fP is ghon be queued up in \fCqueue\fP instead of tha displayz main queue\&.
.PP
\fBSee Also:\fP
.RS 4
\fBwl_display_dispatch_queue()\fP 
.RE
.PP

.SS "void wl_proxy_set_user_data (struct \fBwl_proxy\fP *proxy, void *user_data)"
Set tha user data associated wit a proxy
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP Da proxy object 
.br
\fIuser_data\fP Da data ta be associated wit proxy
.RE
.PP
Set tha user data associated wit \fCproxy\fP\&. When events fo' dis proxy is received, \fCuser_data\fP is ghon be supplied ta its listener\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen fo' Wayland from tha source code\&.
