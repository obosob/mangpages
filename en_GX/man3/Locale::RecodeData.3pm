.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Locale::RecodeData 3"
.TH Locale::RecodeData 3 "2013-08-04" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::RecodeData \- Abstract Base Class fo' Charset Converters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # For compatibilitizzle wit Perl 5.005 n' earlier, you must
\&    # *use* tha module before inheritin from dat shiznit son!
\&    use qw (Locale::RecodeData);
\&    use base qw (Locale::RecodeData);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da module \fBLocale::RecodeData\fR serves as a abstract base class to
all convertas used by \fILocale::Recode\fR\|(3).
.PP
Addin freshly smoked up conversion modulez is currently not straightforward, n' 
you will gotta edit tha sourcez of some modulez fo' dat purpose.
.PP
First, you gotta add yo' freshly smoked up converta class ta tha list found
in \fILocale::_Conversions\fR\|(3), so dat \fILocale::Recode\fR\|(3) knows about
its presence.  If there be valid aliases fo' tha codeset of your
converter, yo big-ass booty is ghon also gotta edit \fILocale::_Aliases\fR\|(3).
.PP
Finally, you gotta implement tha (protected) conversion routine
\&\fI_recode()\fR.  See below (\*(L"\s-1INTERFACE\*(R"\s0) fo' details.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "\fBnew (from => \s-1FROM_CODESET,\s0 ta => \s-1TO_CODESET\s0)\fR" 4
.IX Item "new (from => FROM_CODESET, ta => TO_CODESET)"
Da constructor takes two (named) arguments:
.RS 4
.IP "\fBfrom\fR" 8
.IX Item "from"
Da canonical name of tha source codeset.  Aliases have already been
resolved n' tha name is converted ta uppercase.
.IP "\fBto\fR" 8
.IX Item "to"
Da canonical name of tha destination codeset.  Aliases have already been
resolved n' tha name is converted ta uppercase.
.RE
.RS 4
.Sp
Yo ass normally don't gotta implement tha constructor. Shiiit, dis aint no joke.  Da default constructor
implemented here will store tha source n' destination codesets up in the
protected thugz \f(CW\*(C`_from\*(C'\fR n' \f(CW\*(C`_to\*(C'\fR.
.RE
.SH "METHODS"
.IX Header "METHODS"
Da class implements one method:
.IP "\fB_getError\fR" 4
.IX Item "_getError"
Returns tha (protected) member \f(CW\*(C`_error\*(C'\fR.
.SH "INTERFACE"
.IX Header "INTERFACE"
New conversion classes must provide tha followin intercourse:
.IP "\fBnew (from => \s-1FROM_CODESET,\s0 ta => \s-1TO_CODESET\s0)\fR" 4
.IX Item "new (from => FROM_CODESET, ta => TO_CODESET)"
Da constructor takes two (named) arguments:
.RS 4
.IP "\fBfrom\fR" 8
.IX Item "from"
Da canonical name of tha source codeset.  Aliases have already been
resolved n' tha name is converted ta uppercase.
.IP "\fBto\fR" 8
.IX Item "to"
Da canonical name of tha destination codeset.  Aliases have already been
resolved n' tha name is converted ta uppercase.
.RE
.RS 4
.RE
.IP "\fB_getError\fR" 4
.IX Item "_getError"
Should return tha last error (as a string) or false if there was no error.
.Sp
This method is implemented up in tha base class already.
.IP "\fB_recode \s-1STRINGREF\s0\fR" 4
.IX Item "_recode STRINGREF"
Should convert tha argument \f(CW\*(C`STRINGREF\*(C'\fR in-place.  In case of failure,
return false, n' make provisions dat tha method \f(CW\*(C`_getError()\*(C'\fR returns
an informatizzle error message.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2002\-2009, Guido Flohr <guido@imperia.net>, all
rights reserved. Y'all KNOW dat shit, muthafucka!  See tha source code fo' details.
.PP
This software is contributed ta tha Perl hood by Imperia 
(<http://www.imperia.net/>).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fILocale::Recode::_Aliases\fR\|(3pm), \fILocale::Recode::_Conversions\fR\|(3pm),
\&\fILocale::Recode\fR\|(3pm), \fIperl\fR\|(1)
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 178:" 4
.IX Item "Around line 178:"
=cut found outside a pod block.  Skippin ta next block.
