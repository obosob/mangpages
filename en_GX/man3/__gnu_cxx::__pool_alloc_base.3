.TH "__gnu_cxx::__pool_alloc_base" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::__pool_alloc_base \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fB__gnu_cxx::__pool_alloc< _Tp >\fP\fC [private]\fP\&.
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum { \fB_S_align\fP }"
.br
.ti -1c
.RI "enum { \fB_S_max_bytes\fP }"
.br
.ti -1c
.RI "enum { \fB_S_free_list_size\fP }"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "char * \fB_M_allocate_chunk\fP (size_t __n, int &__nobjs)"
.br
.ti -1c
.RI "_Obj *volatile * \fB_M_get_free_list\fP (size_t __bytes)  throw ()"
.br
.ti -1c
.RI "__mutex & \fB_M_get_mutex\fP ()  throw ()"
.br
.ti -1c
.RI "void * \fB_M_refill\fP (size_t __n)"
.br
.ti -1c
.RI "size_t \fB_M_round_up\fP (size_t __bytes)"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static char * \fB_S_end_free\fP"
.br
.ti -1c
.RI "static _Obj *volatile \fB_S_free_list\fP [_S_free_list_size]"
.br
.ti -1c
.RI "static size_t \fB_S_heap_size\fP"
.br
.ti -1c
.RI "static char * \fB_S_start_free\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class fo' __pool_alloc\&. 

Uses various allocators ta fulfill underlyin requests (and make as few requests as possible when up in default high-speed pool mode)\&.
.PP
Important implementation properties: 0\&. If globally mandated, then allocate objects from freshly smoked up 1\&. If tha clients request a object of size > _S_max_bytes, tha resultin object is ghon be obtained directly from freshly smoked up 2\&. In all other cases, we allocate a object of size exactly _S_round_up(requested_size)\&. Thus tha client has enough size shiznit dat we can return tha object ta tha proper free list without permanently losin part of tha object\&. 
.PP
Definizzle at line 78 of file pool_allocator\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
