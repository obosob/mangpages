" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::allocator< _Tp > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fB__gnu_cxx::new_allocator< typename >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef const _Tp * \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const _Tp & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Tp * \fBpointer\fP"
.br
.ti -1c
.RI "typedef \fBtrue_type\fP \fBpropagate_on_container_move_assignment\fP"
.br
.ti -1c
.RI "typedef _Tp & \fBreference\fP"
.br
.ti -1c
.RI "typedef size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBallocator\fP (const \fBallocator\fP &__a)  throw ()"
.br
.ti -1c
.RI "template<typename _Tp1 > \fBallocator\fP (const \fBallocator\fP< _Tp1 > &)  throw ()"
.br
.ti -1c
.RI "pointa \fBaddress\fP (reference __x) const noexcept"
.br
.ti -1c
.RI "const_pointa \fBaddress\fP (const_reference __x) const noexcept"
.br
.ti -1c
.RI "pointa \fBallocate\fP (size_type __n, const void *=0)"
.br
.ti -1c
.RI "template<typename _Up , typename\&.\&.\&. _Args> void \fBconstruct\fP (_Up *__p, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (pointa __p, size_type)"
.br
.ti -1c
.RI "template<typename _Up > void \fBdestroy\fP (_Up *__p)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp>class std::allocator< _Tp >"
Da \fIstandard\fP allocator, as per [20\&.4]\&. 

See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html fo' further details\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Tp\fP Type of allocated object\&. 
.RE
.PP

.PP
Definizzle at line 92 of file allocator\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
