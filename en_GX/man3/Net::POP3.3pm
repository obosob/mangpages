.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::POP3 3pm"
.TH Net::POP3 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::POP3 \- Post Office Protocol 3 Client class (RFC1939)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::POP3;
\&
\&    # Constructors
\&    $pop = Net::POP3\->new(\*(Aqpop3host\*(Aq);
\&    $pop = Net::POP3\->new(\*(Aqpop3host\*(Aq, Timeout => 60);
\&
\&    if ($pop\->login($username, $password) > 0) {
\&      mah $msgnums = $pop\->list; # hashref of msgnum => size
\&      foreach mah $msgnum (keys %$msgnums) {
\&        mah $msg = $pop\->get($msgnum);
\&        print @$msg;
\&        $pop\->delete($msgnum);
\&      }
\&    }
\&
\&    $pop\->quit;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a cold-ass lil client intercourse ta tha \s-1POP3\s0 protocol, enabling
a perl5 application ta rap ta \s-1POP3\s0 servers. This documentation assumes
that yo ass is familiar wit tha \s-1POP3\s0 protocol busted lyrics bout up in \s-1RFC1939.\s0
.PP
A freshly smoked up Net::POP3 object must be pimped wit tha \fInew\fR method. Y'all KNOW dat shit, muthafucka! Once
this has been done, all \s-1POP3\s0 commandz is accessed via method calls
on tha object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [ \s-1HOST \s0] [, \s-1OPTIONS \s0] 0" 4
.IX Item "new ( [ HOST ] [, OPTIONS ] 0"
This is tha constructor fo' a freshly smoked up Net::POP3 object. \f(CW\*(C`HOST\*(C'\fR is the
name of tha remote host ta which a \s-1POP3\s0 connection is required.
.Sp
\&\f(CW\*(C`HOST\*(C'\fR is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If \f(CW\*(C`HOST\*(C'\fR aint given then it may instead be
passed as tha \f(CW\*(C`Host\*(C'\fR option busted lyrics bout below. If neither is given then
the \f(CW\*(C`POP3_Hosts\*(C'\fR specified up in \f(CW\*(C`Net::Config\*(C'\fR is ghon be used.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR is passed up in a hash like fashion, rockin key n' value pairs.
Possible options are:
.Sp
\&\fBHost\fR \- \s-1POP3\s0 host ta connect to. Well shiiiit, it may be a single scalar, as defined for
the \f(CW\*(C`PeerAddr\*(C'\fR option up in IO::Socket::INET, or a reference to
an array wit hosts ta try up in turn, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da \*(L"host\*(R" method will return tha value
which was used ta connect ta tha host.
.Sp
\&\fBResvPort\fR \- If given then tha socket fo' tha \f(CW\*(C`Net::POP3\*(C'\fR object
will be bound ta tha local port given rockin \f(CW\*(C`bind\*(C'\fR when tha socket is
created.
.Sp
\&\fBTimeout\fR \- Maximum time, up in seconds, ta wait fo' a response from the
\&\s-1POP3\s0 server (default: 120)
.Sp
\&\fBDebug\fR \- Enable debuggin shiznit
.SH "METHODS"
.IX Header "METHODS"
Unless otherwise stated all methodz return either a \fItrue\fR or \fIfalse\fR
value, wit \fItrue\fR meanin dat tha operation was a success. When a method
states dat it returns a value, failure is ghon be returned as \fIundef\fR or an
empty list.
.IP "auth ( \s-1USERNAME, PASSWORD \s0)" 4
.IX Item "auth ( USERNAME, PASSWORD )"
Attempt \s-1SASL\s0 authentication.
.IP "user ( \s-1USER \s0)" 4
.IX Item "user ( USER )"
Send tha \s-1USER\s0 command.
.IP "pass ( \s-1PASS \s0)" 4
.IX Item "pass ( PASS )"
Send tha \s-1PASS\s0 command. Y'all KNOW dat shit, muthafucka! Returns tha number of lyrics up in tha mailbox.
.IP "login ( [ \s-1USER\s0 [, \s-1PASS \s0]] )" 4
.IX Item "login ( [ USER [, PASS ]] )"
Send both tha \s-1USER\s0 n' \s-1PASS\s0 commands. If \f(CW\*(C`PASS\*(C'\fR aint given the
\&\f(CW\*(C`Net::POP3\*(C'\fR uses \f(CW\*(C`Net::Netrc\*(C'\fR ta lookup tha password rockin tha host
and username. If tha username aint specified then tha current user name
will be used.
.Sp
Returns tha number of lyrics up in tha mailbox yo. However if there be no
lyrics on tha server tha strang \f(CW"0E0"\fR is ghon be returned. Y'all KNOW dat shit, muthafucka! This is
will give a legit value up in a funky-ass boolean context yo, but zero up in a numeric context.
.Sp
If there was a error authenticatin tha user then \fIundef\fR is ghon be returned.
.IP "apop ( [ \s-1USER\s0 [, \s-1PASS \s0]] )" 4
.IX Item "apop ( [ USER [, PASS ]] )"
Authenticate wit tha server identifyin as \f(CW\*(C`USER\*(C'\fR wit password \f(CW\*(C`PASS\*(C'\fR.
Similar ta \*(L"login\*(R" yo, but tha password aint busted up in clear text.
.Sp
To use dis method you must have tha Digest::MD5 or tha \s-1MD5\s0 module installed,
otherwise dis method will return \fIundef\fR.
.IP "banner ()" 4
.IX Item "banner ()"
Return tha severz connection banner
.IP "capa ()" 4
.IX Item "capa ()"
Return a reference ta a hash of tha capabilitizzlez of tha server n' shit.  \s-1APOP\s0
is added as a pseudo capability.  Note dat I've been unable to
find a list of tha standard capabilitizzle joints, n' some step tha fuck up to
be multi-word n' some is not.  We cook up a attempt at intelligently
parsin dem yo, but it may not be erect.
.IP "capabilitizzles ()" 4
.IX Item "capabilitizzles ()"
Just like capa yo, but only uses a cold-ass lil cache from tha last time we asked
the server, so as ta avoid askin mo' than once.
.IP "top ( \s-1MSGNUM\s0 [, \s-1NUMLINES \s0] )" 4
.IX Item "top ( MSGNUM [, NUMLINES ] )"
Git tha header n' tha straight-up original gangsta \f(CW\*(C`NUMLINES\*(C'\fR of tha body fo' tha message
\&\f(CW\*(C`MSGNUM\*(C'\fR. Returns a reference ta a array which gotz nuff tha linez of text
read from tha server.
.IP "list ( [ \s-1MSGNUM \s0] )" 4
.IX Item "list ( [ MSGNUM ] )"
If called wit a argument tha \f(CW\*(C`list\*(C'\fR returns tha size of tha message
in octets.
.Sp
If called without arguments a reference ta a hash is returned. Y'all KNOW dat shit, muthafucka! The
keys is ghon be tha \f(CW\*(C`MSGNUM\*(C'\fRz of all undeleted lyrics n' tha joints will
be they size up in octets.
.IP "get ( \s-1MSGNUM\s0 [, \s-1FH \s0] )" 4
.IX Item "get ( MSGNUM [, FH ] )"
Git tha message \f(CW\*(C`MSGNUM\*(C'\fR from tha remote mailbox. If \f(CW\*(C`FH\*(C'\fR aint given
then git returns a reference ta a array which gotz nuff tha lines of
text read from tha server n' shit. If \f(CW\*(C`FH\*(C'\fR is given then tha lines returned
from tha server is printed ta tha filehandle \f(CW\*(C`FH\*(C'\fR.
.IP "getfh ( \s-1MSGNUM \s0)" 4
.IX Item "getfh ( MSGNUM )"
As per \fIget()\fR yo, but returns a tied filehandle.  Readin from this
filehandle returns tha axed message.  Da filehandle will return
\&\s-1EOF\s0 all up in tha end of tha message n' should not be reused.
.IP "last ()" 4
.IX Item "last ()"
Returns tha highest \f(CW\*(C`MSGNUM\*(C'\fR of all tha lyrics accessed.
.IP "popstat ()" 4
.IX Item "popstat ()"
Returns a list of two elements, n' you can put dat on yo' toast. These is tha number of undeleted
elements n' tha size of tha mbox up in octets.
.IP "pin ( \s-1USER \s0)" 4
.IX Item "pin ( USER )"
Returns a list of two elements, n' you can put dat on yo' toast. These is tha number of freshly smoked up lyrics
and tha total number of lyrics fo' \f(CW\*(C`USER\*(C'\fR.
.IP "uidl ( [ \s-1MSGNUM \s0] )" 4
.IX Item "uidl ( [ MSGNUM ] )"
Returns a unique identifier fo' \f(CW\*(C`MSGNUM\*(C'\fR if given. I aint talkin' bout chicken n' gravy biatch. If \f(CW\*(C`MSGNUM\*(C'\fR is not
given \f(CW\*(C`uidl\*(C'\fR returns a reference ta a hash where tha keys is the
message numbers n' tha joints is tha unique identifiers.
.IP "delete ( \s-1MSGNUM \s0)" 4
.IX Item "delete ( MSGNUM )"
Mark message \f(CW\*(C`MSGNUM\*(C'\fR ta be deleted from tha remote mailbox fo' realz. All lyrics
that is marked ta be deleted is ghon be removed from tha remote mailbox
when tha server connection closed.
.IP "reset ()" 4
.IX Item "reset ()"
Reset tha statuz of tha remote \s-1POP3\s0 server n' shit. This includes resettin the
statuz of all lyrics ta not be deleted.
.IP "quit ()" 4
.IX Item "quit ()"
Quit n' close tha connection ta tha remote \s-1POP3\s0 server n' shiznit fo' realz. Any lyrics marked
as deleted is ghon be deleted from tha remote mailbox.
.SH "NOTES"
.IX Header "NOTES"
If a \f(CW\*(C`Net::POP3\*(C'\fR object goes outta scope before \f(CW\*(C`quit\*(C'\fR method is called
then tha \f(CW\*(C`reset\*(C'\fR method will called before tha connection is closed. Y'all KNOW dat shit, muthafucka! This
means dat any lyrics marked ta be deleted aint gonna be.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Netrc,
Net::Cmd
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-2003 Graham Barr fo' realz. All muthafuckin rights reserved.
This program is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
