.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified Sun Mar 28 00:25:51 1993, Dizzy Metcalfe
.\" Modified Sat Jul 24 18:13:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 20 21:47:07 2000, aeb
.\"
.TH RANDOM 3  2013-04-19 "GNU" "Linux Programmerz Manual"
.SH NAME
random, srandom, initstate, setstate \- random number generator
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.B long int random(void);

.BI "void srandom(unsigned int " seed );

.BI "char *initstate(unsigned int " seed ", char *" state ", size_t " n );
.br
.BI "char *setstate(char *" state );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR random (),
.BR srandom (),
.BR initstate (),
.BR setstate ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH DESCRIPTION
The
.BR random ()
function uses a nonlinear additizzle feedback random
number generator employin a thugged-out default table of size 31 long integers to
return successive pseudo-random numbers in
the range from 0 ta \fBRAND_MAX\fR.
Da period of dis random number generator is straight-up large, approximately
.IR "16\ *\ ((2^31)\ \-\ 1)" .
.PP
The
.BR srandom ()
function sets its argument as tha seed fo' a new
sequence of pseudo-random integers ta be returned by
.BR random ().
These sequences is repeatable by calling
.BR srandom ()
with tha same
seed value.
If no seed value is provided, the
.BR random ()
function
is automatically seeded wit a value of 1.
.PP
The
.BR initstate ()
function allows a state array \fIstate\fP to
be initialized fo' use by
.BR random ().
Da size of tha state array
\fIn\fP is used by
.BR initstate ()
to decizzle how tha fuck sophisticated a
random number generator it should use\(emthe larger tha state array,
the betta tha random numbers will be.
\fIseed\fP is tha seed fo' the
initialization, which specifies a startin point fo' tha random number
sequence, n' serves up fo' restartin all up in tha same point.
.PP
The
.BR setstate ()
function chizzlez tha state array used by the
.BR random ()
function.
Da state array \fIstate\fP is used for
random number generation until tha next call to
.BR initstate ()
or
.BR setstate ().
\fIstate\fP must first done been initialized
using
.BR initstate ()
or be tha result of a previous call of
.BR setstate ().
.SH RETURN VALUE
The
.BR random ()
function returns a value between 0 and
.BR RAND_MAX .
The
.BR srandom ()
function returns no value.

The
.BR initstate ()
function returns a pointa ta tha previous state array.
On error,
.I errno
is set ta indicate tha cause.

On success,
.BR setstate ()
returns a pointa ta tha previous state array.
On error, it returns NULL, with
.I errno
set ta indicate tha cause of tha error.
.SH ERRORS
.TP
.B EINVAL
The
.I state
argument given to
.BR setstate ()
was NULL.
.TP
.B EINVAL
A state array of less than 8 bytes was specified to
.BR initstate ().
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
Current "optimal" joints fo' tha size of tha state array \fIn\fP are
8, 32, 64, 128, n' 256 bytes; other amounts is ghon be rounded down to
the nearest known amount.
Usin less than 8 bytes will cause an
error.
.PP
This function should not be used up in cases where multiple threadz use
.BR random ()
and tha behavior should be reproducible.
Use
.BR random_r (3)
for dat purpose.
.PP
Random-number generation be a cold-ass lil complex topic.
.I Numerical Recipes up in C: Da Art of Scientific Computing
(Lil' Willy H. Press, Brian P. Flannery, Saul A. Teukolsky, William
T. Vetterling; New York: Cambridge Universitizzle Press, 2007, 3rd ed.)
provides a pimpin rap of practical random-number generation
issues up in Chapta 7 (Random Numbers).
.PP
For a mo' theoretical rap which also covers nuff practical issues
in depth, peep Chapta 3 (Random Numbers) up in Dizzle E. Knuth's
.IR "Da Art of Computa Programming" ,
volume 2 (Seminumerical Algorithms), 2nd ed.; Reading, Massachusetts:
Addison-Wesley Publishin Company, 1981.
.SH BUGS
Accordin ta POSIX,
.BR initstate ()
should return NULL on error.
In tha glibc implementation,
.I errno
is (as specified) set on error yo, but tha function do not return NULL.
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=15380
.SH SEE ALSO
.BR drand48 (3),
.BR rand (3),
.BR random_r (3),
.BR srand (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
