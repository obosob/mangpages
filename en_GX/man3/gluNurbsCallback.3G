'\" t
.\"     Title: gluNurbsCallback
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLUNURBSCALLBACK" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gluNurbsCallback \- define a cold-ass lil callback fo' a NURBS object
.SH "C SPECIFICATION"
.HP \w'void\ gluNurbsCallback('u
.BI "void gluNurbsCallback(GLUnurbs*\ " "nurb" ", GLenum\ " "which" ", _GLUfuncptr\ " "CallBackFunc" ");"
.SH "PARAMETERS"
.PP
\fInurb\fR
.RS 4
Specifies tha NURBS object (created with
\fBgluNewNurbsRenderer\fR())\&.
.RE
.PP
\fIwhich\fR
.RS 4
Specifies tha callback bein defined\&. Valid joints are
\fBGLU_NURBS_BEGIN\fR,
\fBGLU_NURBS_VERTEX\fR,
\fBGLU_NURBS_NORMAL\fR,
\fBGLU_NURBS_COLOR\fR,
\fBGLU_NURBS_TEXTURE_COORD\fR,
\fBGLU_NURBS_END\fR,
\fBGLU_NURBS_BEGIN_DATA\fR,
\fBGLU_NURBS_VERTEX_DATA\fR,
\fBGLU_NURBS_NORMAL_DATA\fR,
\fBGLU_NURBS_COLOR_DATA\fR,
\fBGLU_NURBS_TEXTURE_COORD_DATA\fR,
\fBGLU_NURBS_END_DATA\fR, and
\fBGLU_NURBS_ERROR\fR\&.
.RE
.PP
\fICallBackFunc\fR
.RS 4
Specifies tha function dat tha callback calls\&.
.RE
.SH "DESCRIPTION"
.PP
\fBgluNurbsCallback\fR
is used ta define a cold-ass lil callback ta be used by a NURBS object\&. If tha specified callback be already defined, then it is replaced\&. If
\fICallBackFunc\fR
is NULL, then dis callback aint gonna git invoked n' tha related data, if any, is ghon be lost\&.
.PP
Except tha error callback, these callbacks is used by NURBS tessellator (when
\fBGLU_NURBS_MODE\fR
is set ta be
\fBGLU_NURBS_TESSELLATOR\fR) ta return back tha OpenGL polygon primitives resultin from tha tessellation\&. Note dat there be two versionz of each callback: one wit a user data pointa n' one without\&. If both versions fo' a particular callback is specified then tha callback wit tha user data pointa is ghon be used\&. Note dat ``userData\*(Aq\*(Aq be a cold-ass lil copy of tha pointa dat was specified all up in tha last call to
\fBgluNurbsCallbackData\fR\&.
.PP
Da error callback function is effectizzle no matta which value that
\fBGLU_NURBS_MODE\fR
is set to\& fo' realz. All other callback functions is effectizzle only when
\fBGLU_NURBS_MODE\fR
is set to
\fBGLU_NURBS_TESSELLATOR\fR\&.
.PP
Da legal callbacks is as bigs up:
.PP
\fBGLU_NURBS_BEGIN\fR
.RS 4
.sp
Da begin callback indicates tha start of a primitive\&. Da function takes a single argument of type GLenum, which can be one of
\fBGLU_LINES\fR,
\fBGLU_LINE_STRIP\fR,
\fBGLU_TRIANGLE_FAN\fR,
\fBGLU_TRIANGLE_STRIP\fR,
\fBGLU_TRIANGLES\fR, or
\fBGLU_QUAD_STRIP\fR\&. Da default begin callback function is NULL\&. Da function prototype fo' dis callback looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void begin( GLenum type );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_BEGIN_DATA\fR
.RS 4
.sp
Da same as the
\fBGLU_NURBS_BEGIN\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa be a cold-ass lil copy of tha pointa dat was specified all up in tha last call to
\fBgluNurbsCallbackData\fR\&. Da default callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void beginData(GLenum type, void *userData);
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_VERTEX\fR
.RS 4
.sp
Da vertex callback indicates a vertex of tha primitive\&. Da coordinatez of tha vertex is stored up in tha parameta ``vertex\*(Aq\*(Aq\& fo' realz. All tha generated vertices have dimension 3; dat is, homogeneous coordinates done been transformed tha fuck into affine coordinates\&. Da default vertex callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void vertex( GLfloat *vertex );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_VERTEX_DATA\fR
.RS 4
.sp
This is tha same ol' dirty as the
\fBGLU_NURBS_VERTEX\fR
callback, except dat it takes a additionizzle pointa argument\&. This pointa be a cold-ass lil copy of tha pointa dat was specified all up in tha last call to
\fBgluNurbsCallbackData\fR\&. Da default callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void vertexData( GLfloat *vertex, void *userData );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_NORMAL\fR
.RS 4
.sp
Da aiiight callback is invoked as tha vertex aiiight is generated\&. Da componentz of tha aiiight is stored up in tha parameta ``normal\&.\*(Aq\*(Aq In tha case of a NURBS curve, tha callback function is effectizzle only when tha user serves up a aiiight map (\fBGLU_MAP1_NORMAL\fR)\&. In tha case of a NURBS surface, if a aiiight map (\fBGLU_MAP2_NORMAL\fR) is provided, then tha generated aiiight is computed from tha aiiight map\&. If a aiiight map aint provided, then a surface aiiight is computed up in a manner similar ta dat busted lyrics bout fo' evaluators when
\fBGLU_AUTO_NORMAL\fR
is enabled\&. Da default aiiight callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void normal( GLfloat *normal );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_NORMAL_DATA\fR
.RS 4
.sp
Da same as the
\fBGLU_NURBS_NORMAL\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa be a cold-ass lil copy of tha pointa dat was specified all up in tha last call to
\fBgluNurbsCallbackData\fR\&. Da default callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void normalData( GLfloat *normal, void *userData );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_COLOR\fR
.RS 4
.sp
Da color callback is invoked as tha color of a vertex is generated\&. Da componentz of tha color is stored up in tha parameta ``color\&.\*(Aq\*(Aq This callback is effectizzle only when tha user serves up a cold-ass lil color map (\fBGLU_MAP1_COLOR_4\fR
or
\fBGLU_MAP2_COLOR_4\fR)\&. ``color\*(Aq\*(Aq gotz nuff four components: R, G, B, A\&. Da default color callback function is NULL\&. Da prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void color( GLfloat *color );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_COLOR_DATA\fR
.RS 4
.sp
Da same as the
\fBGLU_NURBS_COLOR\fR
callback except dat it takes a additionizzle pointa argument\&. This pointa be a cold-ass lil copy of tha pointa dat was specified all up in tha last call to
\fBgluNurbsCallbackData\fR\&. Da default callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void colorData( GLfloat *color, void *userData );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_TEXTURE_COORD\fR
.RS 4
.sp
Da texture callback is invoked as tha texture coordinatez of a vertex is generated\&. These coordinates is stored up in tha parameta ``texCoord\&.\*(Aq\*(Aq Da number of texture coordinates can be 1, 2, 3, or 4 dependin on which type of texture map is specified (\fBGLU_MAP1_TEXTURE_COORD_1\fR,
\fBGLU_MAP1_TEXTURE_COORD_2\fR,
\fBGLU_MAP1_TEXTURE_COORD_3\fR,
\fBGLU_MAP1_TEXTURE_COORD_4\fR,
\fBGLU_MAP2_TEXTURE_COORD_1\fR,
\fBGLU_MAP2_TEXTURE_COORD_2\fR,
\fBGLU_MAP2_TEXTURE_COORD_3\fR,
\fBGLU_MAP2_TEXTURE_COORD_4\fR)\&. If no texture map is specified, dis callback function aint gonna be called\&. Da default texture callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void texCoord( GLfloat *texCoord );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_TEXTURE_COORD_DATA\fR
.RS 4
.sp
This is tha same ol' dirty as the
\fBGLU_NURBS_TEXTURE_COORD\fR
callback, except dat it takes a additionizzle pointa argument\&. This pointa be a cold-ass lil copy of tha pointa dat was specified all up in tha last call to
\fBgluNurbsCallbackData\fR\&. Da default callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void texCoordData( GLfloat *texCoord, void *userData );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_END\fR
.RS 4
.sp
Da end callback is invoked all up in tha end of a primitive\&. Da default end callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void end( void );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_END_DATA\fR
.RS 4
.sp
This is tha same ol' dirty as the
\fBGLU_NURBS_END\fR
callback, except dat it takes a additionizzle pointa argument\&. This pointa be a cold-ass lil copy of tha pointa dat was specified all up in tha last call to
\fBgluNurbsCallbackData\fR\&. Da default callback function is NULL\&. Da function prototype fo' dis callback function looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
void endData( void  *userData );
                        
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBGLU_NURBS_ERROR\fR
.RS 4
.sp
Da error function is called when a error is encountered\&. Its single argument iz of type GLenum, n' it indicates tha specific error dat occurred\&. There is 37 errors unique ta NURBS, named
\fBGLU_NURBS_ERROR1\fR
through
\fBGLU_NURBS_ERROR37\fR\&. Characta strings describin these errors can be retrieved with
\fBgluErrorString\fR()\&.
.RE
.SH "NOTES"
.PP
\fBgluNurbsCallback\fR
is available only if tha GLU version is 1\&.2 or pimped outer\&.
.PP
GLU version 1\&.2 supports only the
\fBGLU_ERROR\fR
parameta for
\fIwhich\fR\&. The
\fBGLU_ERROR\fR
value is deprecated up in GLU version 1\&.3 up in favor of
\fBGLU_NURBS_ERROR\fR\& fo' realz. All other accepted joints for
\fICallBackFunc\fR
are available only if tha GLU version is 1\&.3 or pimped outer\&.
.SH "SEE ALSO"
.PP
\fBgluErrorString\fR(),
\fBgluNewNurbsRenderer\fR(),
\fBgluNurbsCallbackData\fR,
\fBgluNurbsProperty\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
