" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::__detail::_Hash_code_base< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache_hash_code > \- 
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.SS "template<typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2, typename _Hash, bool __cache_hash_code>struct std::__detail::_Hash_code_base< _Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache_hash_code >"
Primary class template _Hash_code_base\&.
.PP
Encapsulates two policy thangs dat aren't like orthogonal\&. (1) tha difference between rockin a ranged hash function n' rockin tha combination of a hash function n' a range-hashin function\&. In tha forma case our phat asses aint gots such thangs as hash codes, so our crazy asses gotz a thugged-out dummy type as placeholder\&. (2) Whether or not we cache hash codes\&. Cachin hash codes is meaningless if our crazy asses gotz a ranged hash function\&.
.PP
We also put tha key extraction objects here, fo' convenience\&. Each specialization derives from one or mo' of tha template parametas ta benefit from Ebo\&. This is blingin as dis type is inherited up in some cases by tha _Local_iterator_base type used ta implement local_iterator n' const_local_iterator\& fo' realz. As wit any iterator type we prefer ta make it as lil' small-ass as possible\&.
.PP
Primary template is unused except as a hook fo' specializations\&. 
.PP
Definizzle at line 907 of file hashtable_policy\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
