'\"
'\" Copyright (c) 1995-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Exit 3 8.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_Exit, Tcl_Finalize, Tcl_CreateExitHandlez, Tcl_DeleteExitHandlez, Tcl_ExitThread, Tcl_FinalizeThread, Tcl_CreateThreadExitHandlez, Tcl_DeleteThreadExitHandlez, Tcl_SetExitProc \- end tha application or thread (and invoke exit handlezs)
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
\fBTcl_Exit\fR(\fIstatus\fR)
.sp
\fBTcl_Finalize\fR()
.sp
\fBTcl_CreateExitHandlez\fR(\fIproc, clientData\fR)
.sp
\fBTcl_DeleteExitHandlez\fR(\fIproc, clientData\fR)
.sp
\fBTcl_ExitThread\fR(\fIstatus\fR)
.sp
\fBTcl_FinalizeThread\fR()
.sp
\fBTcl_CreateThreadExitHandlez\fR(\fIproc, clientData\fR)
.sp
\fBTcl_DeleteThreadExitHandlez\fR(\fIproc, clientData\fR)
.sp
.VS 8.5
Tcl_ExitProc *
\fBTcl_SetExitProc\fR(\fIproc\fR)
.VE 8.5
.SH ARGUMENTS
.AS Tcl_ExitProc clientData
.AP int status  in
Provides shiznit bout why tha application or thread exited.
Exact meanin may
be platform-specific.  0 probably means a aiiight exit, any nonzero value
usually means dat a error occurred.
.AP Tcl_ExitProc *proc in
Procedure ta invoke before exitin application, or (for
\fBTcl_SetExitProc\fR) NULL ta uninstall tha current application exit
procedure.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIproc\fR.
.BE

.SH DESCRIPTION
.PP
Da procedures busted lyrics bout here provide a graceful mechanizzle ta end the
execution of a \fBTcl\fR application. I aint talkin' bout chicken n' gravy biatch. Exit handlezs is invoked ta cleanup the
applicationz state before endin tha execution of \fBTcl\fR code.
.PP
Invoke \fBTcl_Exit\fR ta end a \fBTcl\fR application n' ta exit from this
process. This procedure is invoked by tha \fBexit\fR command, n' can be
invoked anyplace else ta terminizzle tha application.
No-one should eva invoke tha \fBexit\fR system procedure directly;  always
invoke \fBTcl_Exit\fR instead, so dat it can invoke exit handlezs.
Note dat if other code invokes \fBexit\fR system procedure directly, or
otherwise causes tha application ta terminizzle without calling
\fBTcl_Exit\fR, tha exit handlezs aint gonna be run.
\fBTcl_Exit\fR internally invokes tha \fBexit\fR system call, thus it never
returns control ta its caller.
.VS 8.5
If a application exit handlez has been installed (see
\fBTcl_SetExitProc\fR), dat handlez is invoked wit a argument
consistin of tha exit status (cast ta ClientData); tha application
exit handlez should not return control ta Tcl.
.VE 8.5
.PP
\fBTcl_Finalize\fR is similar ta \fBTcl_Exit\fR except dat it do not
exit from tha current process.
It be useful fo' cleanin up when a process is finished rockin \fBTcl\fR but
wishes ta continue executing, n' when \fBTcl\fR is used up in a thugged-out dynamically
loaded extension dat be bout ta be unloaded.
On some systems \fBTcl\fR be automatically notified when it is being
unloaded, n' it calls \fBTcl_Finalize\fR internally; on these systems it
not necessary fo' tha calla ta explicitly call \fBTcl_Finalize\fR.
But fuck dat shiznit yo, tha word on tha street is dat ta ensure portability, yo' code should always invoke
\fBTcl_Finalize\fR when \fBTcl\fR is bein unloaded, ta ensure dat the
code will work on all platforms. \fBTcl_Finalize\fR can be safely called
more than once.
.PP
\fBTcl_ExitThread\fR is used ta terminizzle tha current thread n' invoke
per-thread exit handlezs.  This finalization is done by
\fBTcl_FinalizeThread\fR, which you can call if you just wanna clean
up per-thread state n' invoke tha thread exit handlezs.
\fBTcl_Finalize\fR calls \fBTcl_FinalizeThread\fR fo' tha current
thread automatically.
.PP
\fBTcl_CreateExitHandlez\fR arranges fo' \fIproc\fR ta be invoked
by \fBTcl_Finalize\fR n' \fBTcl_Exit\fR.
\fBTcl_CreateThreadExitHandlez\fR arranges fo' \fIproc\fR ta be invoked
by \fBTcl_FinalizeThread\fR n' \fBTcl_ExitThread\fR.
This serves up a hook fo' cleanup operations like fuckin flushin buffers
and freein global memory.
\fIProc\fR should match tha type \fBTcl_ExitProc\fR:
.CS
typedef void Tcl_ExitProc(ClientData \fIclientData\fR);
.CE
Da \fIclientData\fR parameta ta \fIproc\fR be a
copy of tha \fIclientData\fR argument given to
\fBTcl_CreateExitHandlez\fR or \fBTcl_CreateThreadExitHandlez\fR when
the callback
was pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Typically, \fIclientData\fR points ta a thugged-out data
structure containin application-specific shiznit about
what ta do up in \fIproc\fR.
.PP
\fBTcl_DeleteExitHandlez\fR n' \fBTcl_DeleteThreadExitHandlez\fR may be
called ta delete a
previously-created exit handlez n' shit.  It removes tha handlez
indicated by \fIproc\fR n' \fIclientData\fR so dat no call
to \fIproc\fR is ghon be made.  If no such handlez exists then
\fBTcl_DeleteExitHandlez\fR or \fBTcl_DeleteThreadExitHandlez\fR do nothing.
.PP
.PP
\fBTcl_Finalize\fR n' \fBTcl_Exit\fR execute all registered exit handlezs,
in reverse order from tha order up in which they was registered.
This matches tha natural order up in which extensions is loaded n' unloaded;
if extension \fBA\fR loadz extension \fBB\fR, it usually
unloadz \fBB\fR before it itself is unloaded.
If extension \fBA\fR registas its exit handlezs before loadin extension
\fBB\fR, dis ensures dat any exit handlezs fo' \fBB\fR is ghon be executed
before tha exit handlezs fo' \fBA\fR.
.PP
\fBTcl_Finalize\fR n' \fBTcl_Exit\fR call \fBTcl_FinalizeThread\fR 
and tha thread exit handlezs \fIafter\fR
the process-wide exit handlezs.  This is cuz thread finalization shuts
down tha I/O channel system, so any attempt at I/O by tha global exit
handlezs will vanish tha fuck into tha bitbucket.
.PP
.VS 8.5
\fBTcl_SetExitProc\fR installs a application exit handlez, returning
the previously-installed application exit handlez or NULL if no
application handlez was installed. Y'all KNOW dat shit, muthafucka!  If a application exit handlez is
installed, dat exit handlez takes over complete responsibilitizzle for
finalization of Tclz subsystems via \fBTcl_Finalize\fR at an
appropriate time.  Da argument passed ta \fIproc\fR when it is
invoked is ghon be tha exit status code (as passed ta \fBTcl_Exit\fR)
cast ta a ClientData value.
.VE 8.5

.SH KEYWORDS
callback, cleanup, dynamic loading, end application, exit, unloading, thread
