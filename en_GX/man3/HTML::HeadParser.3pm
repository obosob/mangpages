.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::HeadParser 3"
.TH HTML::HeadParser 3 "2013-05-08" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::HeadParser \- Parse <HEAD> section of a HTML document
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& require HTML::HeadParser;
\& $p = HTML::HeadParser\->new;
\& $p\->parse($text) n'  print "not finished";
\&
\& $p\->header(\*(AqTitle\*(Aq)          # ta access <title>....</title>
\& $p\->header(\*(AqContent\-Base\*(Aq)   # ta access <base href="http://...">
\& $p\->header(\*(AqFoo\*(Aq)            # ta access <meta http\-equiv="Foo" content="...">
\& $p\->header(\*(AqX\-Meta\-Author\*(Aq)  # ta access <meta name="author" content="...">
\& $p\->header(\*(AqX\-Meta\-Charset\*(Aq) # ta access <meta charset="...">
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`HTML::HeadParser\*(C'\fR be a specialized (and lightweight)
\&\f(CW\*(C`HTML::Parser\*(C'\fR dat will only parse tha <\s-1HEAD\s0>...</HEAD>
section of a \s-1HTML\s0 document.  Da \fIparse()\fR method
will return a \s-1FALSE\s0 value as soon as some <\s-1BODY\s0> element or body
text is found, n' should not be called again n' again n' again afta all dis bullshit.
.PP
Note dat tha \f(CW\*(C`HTML::HeadParser\*(C'\fR might git trippin if raw undecoded
\&\s-1UTF\-8\s0 is passed ta tha \fIparse()\fR method. Y'all KNOW dat shit, muthafucka!  Make shizzle tha strings are
properly decoded before passin dem on.
.PP
Da \f(CW\*(C`HTML::HeadParser\*(C'\fR keeps a reference ta a header object, n' the
parser will update dis header object as tha various elementz of the
<\s-1HEAD\s0> section of tha \s-1HTML\s0 document is recognized. Y'all KNOW dat shit, muthafucka!  Da following
header fieldz is affected:
.IP "Content-Base:" 4
.IX Item "Content-Base:"
Da \fIContent-Base\fR header is initialized from tha <base
href=\*(L"...\*(R"> element.
.IP "Title:" 4
.IX Item "Title:"
Da \fITitle\fR header is initialized from tha <title>...</title>
element.
.IP "Isindex:" 4
.IX Item "Isindex:"
Da \fIIsindex\fR header is ghon be added if there be a <isindex>
element up in tha <head>.  Da header value is initialized from the
\&\fIprompt\fR attribute if it is present.  If no \fIprompt\fR attribute is
given it gonna git '?' as tha value.
.IP "X\-Meta-Foo:" 4
.IX Item "X-Meta-Foo:"
All <meta> elements containin a \f(CW\*(C`name\*(C'\fR attribute will result in
headaz rockin tha prefix \f(CW\*(C`X\-Meta\-\*(C'\fR appended wit tha value of the
\&\f(CW\*(C`name\*(C'\fR attribute as tha name of tha header, n' tha value of the
\&\f(CW\*(C`content\*(C'\fR attribute as tha pushed header value.
.Sp
<meta> elements containin a \f(CW\*(C`http\-equiv\*(C'\fR attribute will result
in headaz as up in above yo, but without tha \f(CW\*(C`X\-Meta\-\*(C'\fR prefix up in the
header name.
.Sp
<meta> elements containin a \f(CW\*(C`charset\*(C'\fR attribute will result in
an \f(CW\*(C`X\-Meta\-Charset\*(C'\fR header, rockin tha value of tha \f(CW\*(C`charset\*(C'\fR
attribute as tha pushed header value.
.Sp
Da ':' characta can't be represented up in header field names, so
if tha meta element gotz nuff dis char itz substituted wit '\-'
before formin tha field name.
.SH "METHODS"
.IX Header "METHODS"
Da followin methodz (in addizzle ta dem provided by the
superclass) is available:
.ie n .IP "$hp = HTML::HeadParser\->new" 4
.el .IP "\f(CW$hp\fR = HTML::HeadParser\->new" 4
.IX Item "$hp = HTML::HeadParser->new"
.PD 0
.ie n .IP "$hp = HTML::HeadParser\->new( $header )" 4
.el .IP "\f(CW$hp\fR = HTML::HeadParser\->new( \f(CW$header\fR )" 4
.IX Item "$hp = HTML::HeadParser->new( $header )"
.PD
Da object constructor. Shiiit, dis aint no joke.  Da optionizzle \f(CW$header\fR argument should be a
reference ta a object dat implement tha \fIheader()\fR n' \fIpush_header()\fR
methodz as defined by tha \f(CW\*(C`HTTP::Headers\*(C'\fR class.  Normally it will be
of some class dat be a or delegates ta tha \f(CW\*(C`HTTP::Headers\*(C'\fR class.
.Sp
If no \f(CW$header\fR is given \f(CW\*(C`HTML::HeadParser\*(C'\fR will create an
\&\f(CW\*(C`HTTP::Headers\*(C'\fR object by itself (initially empty).
.ie n .IP "$hp\->header;" 4
.el .IP "\f(CW$hp\fR\->header;" 4
.IX Item "$hp->header;"
Returns a reference ta tha header object.
.ie n .IP "$hp\->header( $key )" 4
.el .IP "\f(CW$hp\fR\->header( \f(CW$key\fR )" 4
.IX Item "$hp->header( $key )"
Returns a header value.  It be just a gangbangin' finger-lickin' dirty-ass shorta way ta write
\&\f(CW\*(C`$hp\->header\->header($key)\*(C'\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 9
\& $h = HTTP::Headers\->new;
\& $p = HTML::HeadParser\->new($h);
\& $p\->parse(<<EOT);
\& <title>Stupid example</title>
\& <base href="http://www.linpro.no/lwp/">
\& Normal text starts here.
\& EOT
\& undef $p;
\& print $h\->title;   # should print "Stupid example"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Parser, HTTP::Headers
.PP
Da \f(CW\*(C`HTTP::Headers\*(C'\fR class is distributed as part of the
\&\fIlibwww-perl\fR package.  If you aint gots dat distribution installed
you need ta provide tha \f(CW$header\fR argument ta tha \f(CW\*(C`HTML::HeadParser\*(C'\fR
constructor wit yo' own object dat implements tha documented
protocol.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2001 Gisle Aas fo' realz. All muthafuckin rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
