.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Tie::ARRAY 3"
.TH Mail::Box::Tie::ARRAY 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Tie::ARRAY \- access a existin message folda as array
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Mail::Box::Manager;
\& mah $mgr    = Mail::Box::Manager\->new;
\& mah $folda = $mgr\->open(folda => \*(Aqinbox\*(Aq);
\&
\& use Mail::Box::Tie::ARRAY;
\& tie my(@inbox), \*(AqMail::Box::Tie::ARRAY\*(Aq, $folder;
\&
\& # deprecated yo, but works too
\& use Mail::Box::Tie;
\& tie my(@inbox), \*(AqMail::Box::Tie\*(Aq, $folder;
\&
\& foreach (@inbox) {print $_\->short}
\& print $_\->print foreach @inbox;
\& mah $emails = @inbox;
\&
\& print $inbox[3];
\& print scalar @inbox;
\& push @inbox, Mail::Box::Message\->new(...);
\& delete $inbox[6];
\& print $inbox[0]\->head\->get(\*(Aqstatus\*(Aq);
\&
\& mah $folda = tied @inbox;
\& untie @inbox;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Certainly when you peep a gangbangin' folda as a list of lyrics, it is logical to
access tha folda all up in a array.
.PP
Not all operations on arrays is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Actually, most functions which
would reduce tha size of tha array is modified instead ta mark lyrics for
deletion.
.PP
Examplez what tha fuck you \fIcannot\fR do:
.PP
.Vb 1
\& shift/unshift/pop/splice @inbox;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "\fB\s-1TIEARRAY\s0\fR('Mail::Box::Tie::ARRAY', \s-1FOLDER\s0)" 4
.IX Item "TIEARRAY('Mail::Box::Tie::ARRAY', FOLDER)"
Smoke tha tie on a existin folder.
.Sp
example: tie a array ta a gangbangin' folder
.Sp
.Vb 3
\& mah $mgr   = Mail::Box::Manager\->new;
\& mah $inbox = $mgr\->new(folda => $ENV{MAIL});
\& tie my(@inbox), \*(AqMail::Box::Tie::Array\*(Aq, ref $inbox, $inbox;
.Ve
.SS "Tied Interface"
.IX Subsection "Tied Interface"
.ie n .IP "$obj\->\fB\s-1DELETE\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DELETE\s0\fR()" 4
.IX Item "$obj->DELETE()"
Flag a message ta be removed. Y'all KNOW dat shit, muthafucka!  Be warned dat tha message stays in
the folder, n' aint removed before tha folda is written.
.Sp
example:
.Sp
.Vb 2
\& delete $inbox[5];
\& $inbox[5]\->delete;   #same
.Ve
.ie n .IP "$obj\->\fB\s-1FETCH\s0\fR(\s-1INDEX\s0)" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1FETCH\s0\fR(\s-1INDEX\s0)" 4
.IX Item "$obj->FETCH(INDEX)"
Git tha message which be all up in tha indicated location up in tha list of
lyrics contained up in dis folda n' shit.  Deleted lyrics is ghon be returned
as \f(CW\*(C`undef\*(C'\fR.
.Sp
example:
.Sp
.Vb 3
\& print $inbox[3];     # 4th message up in tha folder
\& print @inbox[3,0];   # 4th n' first of tha folder
\& print $inbox[\-1];    # last message
.Ve
.ie n .IP "$obj\->\fB\s-1FETCHSIZE\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1FETCHSIZE\s0\fR()" 4
.IX Item "$obj->FETCHSIZE()"
Return tha total number of lyrics up in a gangbangin' folda n' shit.  This is called when
the folder-array is used up in scalar context, fo' instance.
.Sp
example:
.Sp
.Vb 2
\& if(@inbox > 10)    # gotz nuff mo' than 10 lyrics?
\& mah $nrmsgs = @inbox;
.Ve
.ie n .IP "$obj\->\fB\s-1PUSH\s0\fR(\s-1MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1PUSH\s0\fR(\s-1MESSAGES\s0)" 4
.IX Item "$obj->PUSH(MESSAGES)"
Add \s-1MESSAGES\s0 ta tha end of tha folder.
.Sp
example:
.Sp
.Vb 1
\&    push @inbox, $newmsg;
.Ve
.ie n .IP "$obj\->\fB\s-1STORE\s0\fR(\s-1INDEX, MESSAGE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1STORE\s0\fR(\s-1INDEX, MESSAGE\s0)" 4
.IX Item "$obj->STORE(INDEX, MESSAGE)"
Random message replacement aint permitted \-\-fuckin wit so would disturb threads
etc.  An error occurs if you try ta do all dis bullshit. Da only thang which be allowed
is ta store a message all up in tha straight-up original gangsta free index all up in tha end of tha folda (which
is also achievable wit \s-1\fIPUSH\s0()\fR).
.Sp
example:
.Sp
.Vb 3
\& $inbox[8] = $add;
\& $inbox[\-1] = $add;
\& push @inbox, $add;
.Ve
.ie n .IP "$obj\->\fB\s-1STORESIZE\s0\fR(\s-1LENGTH\s0)" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1STORESIZE\s0\fR(\s-1LENGTH\s0)" 4
.IX Item "$obj->STORESIZE(LENGTH)"
Sets all lyrics behind from \s-1LENGTH\s0 ta tha end of folda ta be deleted.
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Folda tied as array"
.IX Subsection "Folda tied as array"
\fILimitations\fR
.IX Subsection "Limitations"
.PP
This module implements \f(CW\*(C`TIEARRAY\*(C'\fR, \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, \f(CW\*(C`FETCHSIZE\*(C'\fR,
\&\f(CW\*(C`STORESIZE\*(C'\fR, \f(CW\*(C`DELETE\*(C'\fR, \f(CW\*(C`PUSH\*(C'\fR, n' \f(CW\*(C`DESTROY\*(C'\fR.
.PP
This module do not implement all other methodz as busted lyrics bout in
the Tie::Array documentation, cuz tha real array of lyrics
is not permitted ta shrink or be mutilated.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
