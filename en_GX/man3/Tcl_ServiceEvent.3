'\"
'\" Copyright (c) 1998-1999 Scriptics Corporation
'\" Copyright (c) 1995-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Notifier 3 8.1 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CreateEventSource, Tcl_DeleteEventSource, Tcl_SetMaxBlockTime, Tcl_QueueEvent, Tcl_ThreadQueueEvent, Tcl_ThreadAlert, Tcl_GetCurrentThread, Tcl_DeleteEvents, Tcl_InitNotifier, Tcl_FinalizeNotifier, Tcl_WaitForEvent, Tcl_AlertNotifier, Tcl_SetTimer, Tcl_ServiceAll, Tcl_ServiceEvent, Tcl_GetServiceMode, Tcl_SetServiceMode \- tha event queue n' notifier intercourses
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
void
\fBTcl_CreateEventSource\fR(\fIsetupProc, checkProc, clientData\fR)
.sp
void
\fBTcl_DeleteEventSource\fR(\fIsetupProc, checkProc, clientData\fR)
.sp
void
\fBTcl_SetMaxBlockTime\fR(\fItimePtr\fR)
.sp
void
\fBTcl_QueueEvent\fR(\fIevPtr, position\fR)
.sp
void
\fBTcl_ThreadQueueEvent\fR(\fIthreadId, evPtr, position\fR)
.sp
void
\fBTcl_ThreadAlert\fR(\fIthreadId\fR)
.sp
Tcl_ThreadId
\fBTcl_GetCurrentThread\fR()
.sp
void
\fBTcl_DeleteEvents\fR(\fIdeleteProc, clientData\fR)
.sp
ClientData
\fBTcl_InitNotifier\fR()
.sp
void
\fBTcl_FinalizeNotifier\fR(\fIclientData\fR)
.sp
int
\fBTcl_WaitForEvent\fR(\fItimePtr\fR)
.sp
void
\fBTcl_AlertNotifier\fR(\fIclientData\fR)
.sp
void
\fBTcl_SetTimer\fR(\fItimePtr\fR)
.sp
int
\fBTcl_ServiceAll\fR()
.sp
int
\fBTcl_ServiceEvent\fR(\fIflags\fR)
.sp
int
\fBTcl_GetServiceMode\fR()
.sp
int
\fBTcl_SetServiceMode\fR(\fImode\fR)
.sp
void
\fBTcl_ServiceModeHook\fR(\fImode\fR)
.sp
void
\fBTcl_SetNotifier\fR(\fInotifierProcPtr\fR)
.SH ARGUMENTS
.AS Tcl_EventDeleteProc *notifierProcPtr
.AP Tcl_EventSetupProc *setupProc in
Procedure ta invoke ta prepare fo' event wait up in \fBTcl_DoOneEvent\fR.
.AP Tcl_EventCheckProc *checkProc in
Procedure fo' \fBTcl_DoOneEvent\fR ta invoke afta waitin for
events, n' you can put dat on yo' toast.  Checks ta peep if any events have occurred and, if so,
queues em.
.AP ClientData clientData in
Arbitrary one-word value ta pass ta \fIsetupProc\fR, \fIcheckProc\fR, or
\fIdeleteProc\fR.
.AP Tcl_Time *timePtr in
Indicates tha maximum amount of time ta wait fo' a event.  This
is specified as a interval (how long ta wait), not a absolute
time (when ta wakeup).  If tha pointa passed ta \fBTcl_WaitForEvent\fR
is NULL, it means there is no maximum wait time:  wait forever if
necessary.
.AP Tcl_Event *evPtr in
An event ta add ta tha event queue.  Da storage fo' tha event must
have been allocated by tha calla rockin \fBTcl_Alloc\fR or \fBckalloc\fR.
.AP Tcl_QueuePosizzle posizzle in
Where ta add tha freshly smoked up event up in tha queue:  \fBTCL_QUEUE_TAIL\fR,
\fBTCL_QUEUE_HEAD\fR, or \fBTCL_QUEUE_MARK\fR.
.AP Tcl_ThreadId threadId in
A unique identifier fo' a thread.
.AP Tcl_EventDeleteProc *deleteProc in
Procedure ta invoke fo' each queued event up in \fBTcl_DeleteEvents\fR.
.AP int flags in
What typez of events ta service.  These flags is tha same as them
passed ta \fBTcl_DoOneEvent\fR.
.AP int mode in
Indicates whether events should be serviced by \fBTcl_ServiceAll\fR.
Must be one of \fBTCL_SERVICE_NONE\fR or \fBTCL_SERVICE_ALL\fR.
.AP Tcl_NotifierProcs* notifierProcPtr in
Structure of function pointas describin notifier procedures dat are
to replace tha ones installed up in tha executable.  See
\fBREPLACING THE NOTIFIER\fR fo' details.
.BE

.SH INTRODUCTION
.PP
Da intercourses busted lyrics bout here is used ta customize tha Tcl event
loop.  Da two most common customizations is ta add freshly smoked up sources of
events n' ta merge Tclz event loop wit some other event loop, such
as one provided by a application up in which Tcl is embedded. Y'all KNOW dat shit, muthafucka!  Each of
these tasks is busted lyrics bout up in a separate section below.
.PP
Da procedures up in dis manual entry is tha buildin blocks outta which
the Tcl event notifier is constructed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da event notifier is tha lowest
layer up in tha Tcl event mechanism.  It consistz of three thangs:
.IP [1]
Event sources: these represent tha ways up in which events can be
generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example, there be a timer event source dat implements
the \fBTcl_CreateTimerHandlez\fR procedure n' tha \fBafter\fR
command, n' there be a gangbangin' file event source dat implements the
\fBTcl_CreateFileHandlez\fR procedure on Unix systems.  An event
source must work wit tha notifier ta detect events all up in tha right
times, record dem on tha event queue, n' eventually notify
higher-level software dat they have occurred. Y'all KNOW dat shit, muthafucka!  Da procedures
\fBTcl_CreateEventSource\fR, \fBTcl_DeleteEventSource\fR,
and \fBTcl_SetMaxBlockTime\fR, \fBTcl_QueueEvent\fR, and
\fBTcl_DeleteEvents\fR is used primarily by event sources.
.IP [2]
Da event queue: fo' non-threaded applications,
there be a single queue fo' tha whole application,
containin events dat done been detected but not yet serviced. Y'all KNOW dat shit, muthafucka!  Event
sources place events onto tha queue so dat they may be processed in
order at appropriate times durin tha event loop. Da event queue
guarantees a gangbangin' fair discipline of event handling, so dat no event
source can starve tha others.  It also allows events ta be saved for
servicin at a gangbangin' future time.  Threaded applications work up in a
similar manner, except dat there be a separate event queue for
each thread containin a Tcl interpreter.
\fBTcl_QueueEvent\fR is used (primarily
by event sources) ta add events ta tha event queue n' 
\fBTcl_DeleteEvents\fR is used ta remove events from tha queue without
processin em.  In a threaded application, \fBTcl_QueueEvent\fR adds
an event ta tha current threadz queue, n' \fBTcl_ThreadQueueEvent\fR
addz a event ta a queue up in a specific thread.
.IP [3]
Da event loop: up in order ta detect n' process events, tha application
entas a loop dat waits fo' events ta occur, places dem on tha event
queue, n' then processes em.  Most applications will do dis by
callin tha procedure \fBTcl_DoOneEvent\fR, which is busted lyrics bout up in a
separate manual entry.
.PP
Most Tcl applications need not worry bout any of tha internals of
the Tcl notifier n' shit.  But fuck dat shiznit yo, tha word on tha street is dat tha notifier now has enough flexibility
to be retargeted either fo' a freshly smoked up platform or ta use a external event
loop (like fuckin tha Motif event loop, when Tcl is embedded up in a Motif
application).  Da procedures \fBTcl_WaitForEvent\fR and
\fBTcl_SetTimer\fR is normally implemented by Tcl yo, but may be
replaced wit freshly smoked up versions ta retarget tha notifier (the
\fBTcl_InitNotifier\fR, \fBTcl_AlertNotifier\fR,
\fBTcl_FinalizeNotifier\fR, \fBTcl_Sleep\fR,
\fBTcl_CreateFileHandlez\fR, n' \fBTcl_DeleteFileHandlez\fR must
also be replaced; peep CREATING A NEW NOTIFIER below fo' details).
Da procedures \fBTcl_ServiceAll\fR, \fBTcl_ServiceEvent\fR,
\fBTcl_GetServiceMode\fR, n' \fBTcl_SetServiceMode\fR is provided
to help connect Tclz event loop ta a external event loop such as
Motif's.
.SH "NOTIFIER BASICS"
.PP
Da easiest way ta KNOW how tha fuck tha notifier works is ta consider
what happens when \fBTcl_DoOneEvent\fR is called.
\fBTcl_DoOneEvent\fR is passed a \fIflags\fR argument dat indicates
what sort of events it is OK ta process n' also whether or not to
block if no events is ready.  \fBTcl_DoOneEvent\fR do tha following
things:
.IP [1]
Peep tha event queue ta peep if it gotz nuff any events dat can
be serviced. Y'all KNOW dat shit, muthafucka!  If so, steez tha straight-up original gangsta possible event, remove it
from tha queue, n' return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  It do dis by calling
\fBTcl_ServiceEvent\fR n' passin up in tha \fIflags\fR argument.
.IP [2]
Prepare ta block fo' a event.  To do this, \fBTcl_DoOneEvent\fR
invokes a \fIsetup procedure\fR up in each event source.
Da event source will big-ass up event-source specific initialization and
possibly call \fBTcl_SetMaxBlockTime\fR ta limit how tha fuck long
\fBTcl_WaitForEvent\fR will block if no freshly smoked up events occur.
.IP [3]
Call \fBTcl_WaitForEvent\fR.  This procedure is implemented differently
on different platforms;  it waits fo' a event ta occur, based on the
information provided by tha event sources.
It may cause tha application ta block if \fItimePtr\fR specifies
an interval other than 0.
\fBTcl_WaitForEvent\fR returns when suttin' has happened,
like fuckin a gangbangin' file becomin readable or tha interval given by \fItimePtr\fR
expiring.  If there be no events fo' \fBTcl_WaitForEvent\fR to
wait for, so dat it would block forever, then it returns immediately
and \fBTcl_DoOneEvent\fR returns 0.
.IP [4]
Call a \fIcheck procedure\fR up in each event source.  Da check
procedure determines whether any eventz of interest ta dis source
occurred. Y'all KNOW dat shit, muthafucka!  If so, tha events is added ta tha event queue.
.IP [5]
Peep tha event queue ta peep if it gotz nuff any events dat can
be serviced. Y'all KNOW dat shit, muthafucka!  If so, steez tha straight-up original gangsta possible event, remove it
from tha queue, n' return.
.IP [6]
See if there be idle callbacks pending. If so, invoke all of dem and
return.
.IP [7]
Either return 0 ta indicate dat no events was ready, or go back to
step [2] if blockin was axed by tha caller.

.SH "CREATING A NEW EVENT SOURCE"
.PP
An event source consistz of three procedures invoked by tha notifier,
plus additionizzle C procedures dat is invoked by higher-level code
to arrange fo' event-driven callbacks.  Da three procedures called
by tha notifier consist of tha setup n' check procedures busted lyrics about
above, plus a additionizzle procedure dat is invoked when a event
is removed from tha event queue fo' servicing.
.PP
Da procedure \fBTcl_CreateEventSource\fR creates a freshly smoked up event source.
Its arguments specify tha setup procedure n' check procedure for
the event source.
\fISetupProc\fR should match tha followin prototype:
.CS
typedef void Tcl_EventSetupProc(
        ClientData \fIclientData\fR,
        int \fIflags\fR);
.CE
Da \fIclientData\fR argument is ghon be tha same as tha \fIclientData\fR
argument ta \fBTcl_CreateEventSource\fR;  it is typically used to
point ta private shiznit managed by tha event source.
Da \fIflags\fR argument is ghon be tha same as tha \fIflags\fR
argument passed ta \fBTcl_DoOneEvent\fR except dat it will never
be 0 (\fBTcl_DoOneEvent\fR replaces 0 wit \fBTCL_ALL_EVENTS\fR).
\fIFlags\fR indicates what tha fuck kindz of events should be considered;
if tha bit correspondin ta dis event source aint set, tha event
source should return immediately without bustin anything.  For
example, tha file event source checks fo' tha \fBTCL_FILE_EVENTS\fR
bit.
.PP
\fISetupProc\fRz thang is ta make shizzle dat tha application wakes up
when eventz of tha desired type occur. Shiiit, dis aint no joke.  This is typically done up in a
platform-dependent fashion. I aint talkin' bout chicken n' gravy biatch.  For example, under Unix a event source
might call \fBTcl_CreateFileHandlez\fR; under Windows it might
request notification wit a Windows event.  For timer-driven event
sources like fuckin timer events or any polled event, tha event source
can call \fBTcl_SetMaxBlockTime\fR ta force tha application ta wake
up afta a specified time even if no events have occurred.
If no event source calls \fBTcl_SetMaxBlockTime\fR
then \fBTcl_WaitForEvent\fR will wait as long as necessary fo' an
event ta occur; otherwise, it will only wait as long as tha shortest
interval passed ta \fBTcl_SetMaxBlockTime\fR by one of tha event
sources.  If a event source knows dat it already has events locked n loaded to
report, it can request a zero maximum block time.  For example, the
setup procedure fo' tha X event source looks ta peep if there are
events already queued. Y'all KNOW dat shit, muthafucka!  If there are, it calls
\fBTcl_SetMaxBlockTime\fR wit a 0 block time so that
\fBTcl_WaitForEvent\fR do not block if there is no freshly smoked up data on tha X
connection.
Da \fItimePtr\fR argument ta \fBTcl_WaitForEvent\fR points to
a structure dat raps on some time interval up in secondz and
microseconds:
.CS
typedef struct Tcl_Time {
        long \fIsec\fR;
        long \fIusec\fR;
} Tcl_Time;
.CE
Da \fIusec\fR field should be less than 1000000.
.PP
Hype provided ta \fBTcl_SetMaxBlockTime\fR
is only used fo' tha next call ta \fBTcl_WaitForEvent\fR; it is
discarded afta \fBTcl_WaitForEvent\fR returns.
Da next time a event wait is done each of tha event sources'
setup procedures is ghon be called again, n' they can specify new
information fo' dat event wait.
.PP
If tha application uses a external event loop rather than
\fBTcl_DoOneEvent\fR, tha event sources may need ta call
\fBTcl_SetMaxBlockTime\fR at other times.  For example, if a freshly smoked up event
handlez is registered dat need ta poll fo' events, tha event source
may call \fBTcl_SetMaxBlockTime\fR ta set tha block time ta zero to
force tha external event loop ta booty-call Tcl.  In dis case,
\fBTcl_SetMaxBlockTime\fR invokes \fBTcl_SetTimer\fR wit tha shortest
interval peeped since tha last call ta \fBTcl_DoOneEvent\fR or
\fBTcl_ServiceAll\fR.
.PP
In addizzle ta tha generic procedure \fBTcl_SetMaxBlockTime\fR, other
platform-specific procedures may also be available for
\fIsetupProc\fR, if there be additionizzle shiznit needed by
\fBTcl_WaitForEvent\fR on dat platform.  For example, on Unix systems
the \fBTcl_CreateFileHandlez\fR intercourse can be used ta wait fo' file events.
.PP
Da second procedure provided by each event source is its check
procedure, indicated by tha \fIcheckProc\fR argument to
\fBTcl_CreateEventSource\fR.  \fICheckProc\fR must match the
followin prototype:
.CS
typedef void Tcl_EventCheckProc(
        ClientData \fIclientData\fR,
        int \fIflags\fR);
.CE
Da arguments ta dis procedure is tha same as dem fo' \fIsetupProc\fR.
\fBCheckProc\fR is invoked by \fBTcl_DoOneEvent\fR afta it has waited
for events, n' you can put dat on yo' toast.  Presumably at least one event source is now prepared to
queue a event.  \fBTcl_DoOneEvent\fR calls each of tha event sources
in turn, so they all gotz a cold-ass lil chizzle ta queue any events dat is ready.
Da check procedure do two thangs.  First, it must peep if any events
have triggered. Y'all KNOW dat shit, muthafucka!  Different event sources do dis up in different ways.
.PP
If a event sourcez check procedure detects a bangin-ass event, it
must add tha event ta Tclz event queue.  To do this, tha event source
calls \fBTcl_QueueEvent\fR.  Da \fIevPtr\fR argument be a pointa to
a dynamically allocated structure containin tha event (see below for
more shiznit on memory pimpment issues).  Each event source can
define its own event structure wit whatever shiznit is relevant
to dat event source.  But fuck dat shiznit yo, tha word on tha street is dat tha straight-up original gangsta element of tha structure
must be a structure of type \fBTcl_Event\fR, n' tha address of this
structure is used when communicatin between tha event source n' the
rest of tha notifier n' shit.  A \fBTcl_Event\fR has tha followin definition:
.CS
typedef struct {
    Tcl_EventProc *\fIproc\fR;
    struct Tcl_Event *\fInextPtr\fR;
} Tcl_Event;
.CE
Da event source must fill up in tha \fIproc\fR field of
the event before callin \fBTcl_QueueEvent\fR.
Da \fInextPtr\fR is used ta link together tha events up in tha queue
and should not be modified by tha event source.
.PP
An event may be added ta tha queue at any of three positions, depending
on tha \fIposition\fR argument ta \fBTcl_QueueEvent\fR:
.IP \fBTCL_QUEUE_TAIL\fR 24
Add tha event all up in tha back of tha queue, so dat all other pending
events is ghon be serviced first.  This be almost always tha right
place fo' freshly smoked up events.
.IP \fBTCL_QUEUE_HEAD\fR 24
Add tha event all up in tha front of tha queue, so dat it is ghon be serviced
before all other queued events.
.IP \fBTCL_QUEUE_MARK\fR 24
Add tha event all up in tha front of tha queue, unless there be other
events all up in tha front whose posizzle is \fBTCL_QUEUE_MARK\fR;  if so,
add tha freshly smoked up event just afta all other \fBTCL_QUEUE_MARK\fR events.
This value of \fIposition\fR is used ta bang a ordered sequence of
events all up in tha front of tha queue, like fuckin a series of
Enta n' Leave events synthesized durin a grab or ungrab operation
in Tk.
.PP
When it is time ta handle a event from tha queue (steps 1 n' 4
above) \fBTcl_ServiceEvent\fR will invoke tha \fIproc\fR specified
in tha straight-up original gangsta queued \fBTcl_Event\fR structure.
\fIProc\fR must match tha followin prototype:
.CS
typedef int Tcl_EventProc(
        Tcl_Event *\fIevPtr\fR,
        int \fIflags\fR);
.CE
Da first argument ta \fIproc\fR be a pointa ta tha event, which will
be tha same as tha straight-up original gangsta argument ta tha \fBTcl_QueueEvent\fR call that
added tha event ta tha queue.
Da second argument ta \fIproc\fR is tha \fIflags\fR argument fo' the
current call ta \fBTcl_ServiceEvent\fR;  dis is used by tha event source
to return immediately if its events is not relevant.
.PP
It be up ta \fIproc\fR ta handle tha event, typically by invoking
one or mo' Tcl commandz or C-level callbacks.
Once tha event source has finished handlin tha event it returns 1
to indicate dat tha event can be removed from tha queue.
If fo' some reason tha event source decides dat tha event cannot
be handled at dis time, it may return 0 ta indicate dat tha event
should be deferred fo' processin later;  up in dis case \fBTcl_ServiceEvent\fR
will go on ta tha next event up in tha queue n' attempt ta steez dat shit.
There is nuff muthafuckin reasons why a event source might defer a event.
One possibilitizzle is dat eventz of dis type is excluded by the
\fIflags\fR argument.
For example, tha file event source will always return 0 if the
\fBTCL_FILE_EVENTS\fR bit aint set up in \fIflags\fR.
Another example of deferrin events happens up in Tk if
\fBTk_RestrictEvents\fR has been invoked ta defer certain kinds
of window events.
.PP
When \fIproc\fR returns 1, \fBTcl_ServiceEvent\fR will remove the
event from tha event queue n' free its storage.
Note dat tha storage fo' a event must be allocated by
the event source (usin \fBTcl_Alloc\fR or tha Tcl macro \fBckalloc\fR)
before callin \fBTcl_QueueEvent\fR yo, but it
will be freed by \fBTcl_ServiceEvent\fR, not by tha event source.
.PP
Threaded applications work up in a
similar manner, except dat there be a separate event queue for
each thread containin a Tcl interpreter.
Callin \fBTcl_QueueEvent\fR up in a multithreaded application adds
an event ta tha current threadz queue.
To add a event ta another threadz queue, use \fBTcl_ThreadQueueEvent\fR.
\fBTcl_ThreadQueueEvent\fR accepts as a argument a Tcl_ThreadId argument,
which uniquely identifies a thread up in a Tcl application. I aint talkin' bout chicken n' gravy biatch.  To obtain the
Tcl_ThreadID fo' tha current thread, use tha \fBTcl_GetCurrentThread\fR
procedure.  (A thread would then need ta pass dis identifier ta other
threadz fo' dem threadz ta be able ta add events ta its queue.)
Afta addin a event ta another threadz queue, you then typically
need ta booty-call \fBTcl_ThreadAlert\fR to
.QW "wake up"
that threadz notifier ta alert it ta tha freshly smoked up event.
.PP
\fBTcl_DeleteEvents\fR can be used ta explicitly remove one or more
events from tha event queue.  \fBTcl_DeleteEvents\fR calls \fIproc\fR
for each event up in tha queue, deletin dem fo' wit tha procedure
returns 1.  Events fo' which tha procedure returns 0 is left up in the
queue.  \fIProc\fR should match tha followin prototype:
.CS
typedef int Tcl_EventDeleteProc(
        Tcl_Event *\fIevPtr\fR,
        ClientData \fIclientData\fR);
.CE
Da \fIclientData\fR argument is ghon be tha same as tha \fIclientData\fR
argument ta \fBTcl_DeleteEvents\fR; it is typically used ta point to
private shiznit managed by tha event source.  Da \fIevPtr\fR will
point ta tha next event up in tha queue.
.PP
\fBTcl_DeleteEventSource\fR deletes a event source.  Da \fIsetupProc\fR,
\fIcheckProc\fR, n' \fIclientData\fR arguments must exactly match them
provided ta tha \fBTcl_CreateEventSource\fR fo' tha event source ta be deleted.
If no such source exists, \fBTcl_DeleteEventSource\fR has no effect.

.SH "CREATING A NEW NOTIFIER"
.PP
Da notifier consistz of all tha procedures busted lyrics bout up in dis manual
entry, plus \fBTcl_DoOneEvent\fR n' \fBTcl_Sleep\fR, which are
available on all platforms, n' \fBTcl_CreateFileHandlez\fR and
\fBTcl_DeleteFileHandlez\fR, which is Unix-specific.  Most of these
procedures is generic, up in dat they is tha same fo' all notifiers.
But fuck dat shiznit yo, tha word on tha street is dat none of tha procedures is notifier-dependent:
\fBTcl_InitNotifier\fR, \fBTcl_AlertNotifier\fR,
\fBTcl_FinalizeNotifier\fR, \fBTcl_SetTimer\fR, \fBTcl_Sleep\fR,
\fBTcl_WaitForEvent\fR, \fBTcl_CreateFileHandlez\fR,
\fBTcl_DeleteFileHandlez\fR n' \fBTcl_ServiceModeHook\fR.  To support a
new platform or ta integrate Tcl wit a application-specific event loop,
you must write freshly smoked up versionz of these procedures.
.PP
\fBTcl_InitNotifier\fR initializes tha notifier state n' returns
a handle ta tha notifier state.  Tcl calls this
procedure when initializin a Tcl interpreter n' shit.  Similarly,
\fBTcl_FinalizeNotifier\fR shuts down tha notifier, n' is
called by \fBTcl_Finalize\fR when shuttin down a Tcl interpreter.
.PP
\fBTcl_WaitForEvent\fR is tha lowest-level procedure up in tha notifier;
it is responsible fo' waitin fo' an
.QW interesting
event ta occur or
for a given time ta elapse.  Before \fBTcl_WaitForEvent\fR is invoked,
each of tha event sources' setup procedure gonna git been invoked.
Da \fItimePtr\fR argument to
\fBTcl_WaitForEvent\fR gives tha maximum time ta block fo' a event,
based on calls ta \fBTcl_SetMaxBlockTime\fR made by setup procedures
and on other shiznit (like fuckin tha \fBTCL_DONT_WAIT\fR bit in
\fIflags\fR).
.PP
Ideally, \fBTcl_WaitForEvent\fR should only wait fo' a event
to occur; it should not straight-up process tha event up in any way.
Lata on, the
event sources will process tha raw events n' create Tcl_Events on
the event queue up in they \fIcheckProc\fR procedures.
But fuck dat shiznit yo, tha word on tha street is dat on some platforms (like fuckin Windows) dis aint possible;
events may be processed up in \fBTcl_WaitForEvent\fR, includin queuing
Tcl_Events n' mo' (for example, callbacks fo' natizzle widgets may be
invoked).  Da return value from \fBTcl_WaitForEvent\fR must be either
0, 1, or \-1.  On platforms like fuckin Windows where events git processed in
\fBTcl_WaitForEvent\fR, a return value of 1 means dat there may be more
events still pendin dat aint been processed. Y'all KNOW dat shit, muthafucka!  This be a sign ta the
calla dat it must call \fBTcl_WaitForEvent\fR again n' again n' again if it wants all
pendin events ta be processed. Y'all KNOW dat shit, muthafucka! A 0 return value means dat calling
\fBTcl_WaitForEvent\fR again n' again n' again aint gonna have any effect: either dis be a
platform where \fBTcl_WaitForEvent\fR only waits without bustin any event
processing, or \fBTcl_WaitForEvent\fR knows fo' shizzle dat there be no
additionizzle events ta process (e.g. it returned cuz tha time
elapsed).  Finally, a return value of \-1 means dat tha event loop is
no longer operationizzle n' tha application should probably unwind and
terminate.  Under Windows dis happens when a WM_QUIT message is received;
under Unix it happens when \fBTcl_WaitForEvent\fR would have waited
forever cuz there was no actizzle event sources n' tha timeout was
infinite.
.PP
\fBTcl_AlertNotifier\fR is used up in multithreaded applications ta allow
any thread to
.QW "wake up"
the notifier ta alert it ta freshly smoked up events on its
queue.  \fBTcl_AlertNotifier\fR requires as a argument tha notifier
handle returned by \fBTcl_InitNotifier\fR.
.PP
If tha notifier is ghon be used wit a external event loop, then it must
also support tha \fBTcl_SetTimer\fR intercourse.  \fBTcl_SetTimer\fR is
invoked by \fBTcl_SetMaxBlockTime\fR whenever tha maximum blocking
time has been reduced. Y'all KNOW dat shit, muthafucka!  \fBTcl_SetTimer\fR should arrange fo' the
external event loop ta invoke \fBTcl_ServiceAll\fR afta tha specified
interval even if no events have occurred. Y'all KNOW dat shit, muthafucka!  This intercourse is needed
because \fBTcl_WaitForEvent\fR aint invoked when there be a external
event loop.  If the
notifier will only be used from \fBTcl_DoOneEvent\fR, then
\fBTcl_SetTimer\fR need not do anything.
.PP
\fBTcl_ServiceModeHook\fR is called by tha platform-independent portion
of tha notifier when client code cook up a cold-ass lil call to
\fBTcl_SetServiceMode\fR. This hook is provided ta support operating
systems dat require special event handlin when tha application is in
a modal loop (the Windows notifier, fo' instance, uses dis hook to
create a cold-ass lil communication window).
.PP
On Unix systems, tha file event source also needz support from the
notifier n' shit.  Da file event source consistz of the
\fBTcl_CreateFileHandlez\fR n' \fBTcl_DeleteFileHandlez\fR
procedures, which is busted lyrics bout up in tha \fBTcl_CreateFileHandlez\fR
manual page.
.PP
Da \fBTcl_Sleep\fR n' \fBTcl_DoOneEvent\fR intercourses is busted lyrics about
in they respectizzle manual pages.
.PP
Da easiest way ta create a freshly smoked up notifier is ta peep tha code
for a existin notifier, like fuckin tha filez \fBunix/tclUnixNotfy.c\fR
or \fBwin/tclWinNotify.c\fR up in tha Tcl source distribution.

.SH "REPLACING THE NOTIFIER"
.PP
A notifier dat has been freestyled accordin ta tha conventions above
can also be installed up in a hustlin process up in place of tha standard
notifier n' shit.  This mechanizzle is used so dat a single executable can be
used (with tha standard notifier) as a stand-alone program n' reused
(with a replacement notifier up in a loadable extension) as a extension
to another program, like fuckin a Web browser plugin.
.PP
To do this, tha extension cook up a cold-ass lil call ta \fBTcl_SetNotifier\fR
passin a pointa ta a \fBTcl_NotifierProcs\fR data structure.  The
structure has tha followin layout:
.CS
typedef struct Tcl_NotifierProcs {
    Tcl_SetTimerProc *setTimerProc;
    Tcl_WaitForEventProc *waitForEventProc;
    Tcl_CreateFileHandlezProc *createFileHandlezProc;
    Tcl_DeleteFileHandlezProc *deleteFileHandlezProc;
    Tcl_InitNotifierProc *initNotifierProc;
    Tcl_FinalizeNotifierProc *finalizeNotifierProc;
    Tcl_AlertNotifierProc *alertNotifierProc;
    Tcl_ServiceModeHookProc *serviceModeHookProc;
} Tcl_NotifierProcs;
.CE
Peepin tha call ta \fBTcl_SetNotifier\fR, tha pointas given in
the \fBTcl_NotifierProcs\fR structure replace whatever notifier had
been installed up in tha process.
.PP
It be extraordinarily unwise ta replace a hustlin notifier n' shit. Normally,
\fBTcl_SetNotifier\fR should be called at process initialization time
before tha straight-up original gangsta call ta \fBTcl_InitNotifier\fR.

.SH "EXTERNAL EVENT LOOPS"
.PP
Da notifier intercourses is designed so dat Tcl can be embedded into
applications dat have they own private event loops.  In dis case,
the application do not call \fBTcl_DoOneEvent\fR except up in tha case
of recursive event loops like fuckin calls ta tha Tcl commandz \fBupdate\fR
or \fBvwait\fR.  Most of tha time is dropped up in tha external event loop
of tha application. I aint talkin' bout chicken n' gravy biatch.  In dis case tha notifier must arrange fo' the
external event loop ta booty-call back tha fuck into Tcl when something
happens on tha various Tcl event sources.  These callbacks should
arrange fo' appropriate Tcl events ta be placed on tha Tcl event queue.
.PP
Because tha external event loop aint callin \fBTcl_DoOneEvent\fR on
a regular basis, it is up ta tha notifier ta arrange for
\fBTcl_ServiceEvent\fR ta be called whenever events is pendin on the
Tcl event queue.  Da easiest way ta do dis is ta invoke
\fBTcl_ServiceAll\fR all up in tha end of each callback from tha external
event loop.  This will ensure dat all of tha event sources are
polled, any queued events is serviced, n' any pendin idle handlezs
are processed before returnin control ta tha application. I aint talkin' bout chicken n' gravy biatch.  In
addition, event sources dat need ta poll fo' events can call
\fBTcl_SetMaxBlockTime\fR ta force tha external event loop ta call
Tcl even if no events is available on tha system event queue.
.PP
As a side effect of processin events detected up in tha main external
event loop, Tcl may invoke \fBTcl_DoOneEvent\fR ta start a recursive event
loop up in commandz like \fBvwait\fR.  \fBTcl_DoOneEvent\fR will invoke
the external event loop, which will result up in callbacks as busted lyrics about
in tha precedin paragraph, which will result up in calls to
\fBTcl_ServiceAll\fR.  But fuck dat shiznit yo, tha word on tha street is dat up in these cases it is undesirable to
service events up in \fBTcl_ServiceAll\fR.  Servicin events there is
unnecessary cuz control will immediately return ta the
external event loop n' hence ta \fBTcl_DoOneEvent\fR, which can
service tha events itself.  Furthermore, \fBTcl_DoOneEvent\fR is
supposed ta steez only a single event, whereas \fBTcl_ServiceAll\fR
normally skillz all pendin events, n' you can put dat on yo' toast.  To handle dis thang,
\fBTcl_DoOneEvent\fR sets a gangbangin' flag fo' \fBTcl_ServiceAll\fR
that causes it ta return without servicin any events.
This flag is called tha \fIservice mode\fR;
\fBTcl_DoOneEvent\fR restores it ta its previous value before it returns.
.PP
In some cases, however, it may be necessary fo' \fBTcl_ServiceAll\fR
to steez events
even when it has been invoked from \fBTcl_DoOneEvent\fR.  This happens
when there is yet another recursive event loop invoked via an
event handlez called by \fBTcl_DoOneEvent\fR (like fuckin one dat is
part of a natizzle widget).  In dis case, \fBTcl_DoOneEvent\fR may not
have a cold-ass lil chizzle ta steez events so \fBTcl_ServiceAll\fR must service
them all.  Any recursive event loop dat calls a external event
loop rather than \fBTcl_DoOneEvent\fR must reset tha steez mode so
that all events git processed up in \fBTcl_ServiceAll\fR.  This is done
by invokin tha \fBTcl_SetServiceMode\fR procedure.  If
\fBTcl_SetServiceMode\fR is passed \fBTCL_SERVICE_NONE\fR, then calls
to \fBTcl_ServiceAll\fR will return immediately without processin any
events, n' you can put dat on yo' toast.  If \fBTcl_SetServiceMode\fR is passed \fBTCL_SERVICE_ALL\fR,
then calls ta \fBTcl_ServiceAll\fR will behave normally.
\fBTcl_SetServiceMode\fR returns tha previous value of tha service
mode, which should be restored when tha recursive loop exits.
\fBTcl_GetServiceMode\fR returns tha current value of tha service
mode.

.SH "SEE ALSO"
\fBTcl_CreateFileHandlez\fR, \fBTcl_DeleteFileHandlez\fR, \fBTcl_Sleep\fR,
\fBTcl_DoOneEvent\fR, \fBThread(3)\fR
.SH KEYWORDS
event, notifier, event queue, event sources, file events, timer, idle, steez mode, threads
