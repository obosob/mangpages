'\" t
.\"***************************************************************************
.\" Copyright (c) 1998-2012,2013 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: ncurses.3x,v 1.111 2013/03/02 22:15:25 tom Exp $
.hy 0
.TH ncurses 3X ""
.de bP
.IP \(bu 4
..
.ds n 5
.ds d /usr/share/terminfo
.SH NAME
\fBncurses\fR \- CRT screen handlin n' optimization package
.SH SYNOPSIS
\fB#include <curses.h>\fR
.br
.SH DESCRIPTION
Da \fBncurses\fR library routines give tha user a terminal-independent method
of uppimpin characta screens wit reasonable optimization.
This implementation is ``new curses'' (ncurses) and
is tha approved replacement for
4.4BSD funky-ass curses, which has been discontinued.
This raps bout \fBncurses\fR
version 5.9 (patch 20130511).
.PP
Da \fBncurses\fR library emulates tha curses library of
System V Release 4 UNIX,
and XPG4 (X/Open Portabilitizzle Guide) curses (also known as XSI curses).
XSI standz fo' X/Open System Interfaces Extension.
Da \fBncurses\fR library is freely redistributable up in source form.
Differences from tha SVr4
curses is summarized under the
\fBEXTENSIONS\fP n' \fBPORTABILITY\fP sections below and
busted lyrics bout up in detail up in tha respective
\fBEXTENSIONS\fP, \fBPORTABILITY\fP n' \fBBUGS\fP sections
of individual playa pages.
.PP
Da \fBncurses\fR library also serves up nuff useful extensions,
i.e., features which cannot be implemented by a simple add-on library
but which require access ta tha internalz of tha library.
.PP
A program rockin these routines must be linked wit tha \fB\-lncurses\fR option,
or (if it has been generated) wit tha debuggin library \fB\-lncurses_g\fR.
(Yo crazy-ass system integrator may also have installed these libraries under
the names \fB\-lcurses\fR n' \fB\-lcurses_g\fR.)
Da ncurses_g library generates trace logs (in a gangbangin' file called 'trace' up in the
current directory) dat describe curses actions.
See also tha section on \fBALTERNATE CONFIGURATIONS\fP.
.PP
Da \fBncurses\fR package supports: overall screen, window n' pad
manipulation; output ta windows n' pads; readin terminal input; control over
terminal n' \fBcurses\fR input n' output options; environment query
routines; color manipulation; use of soft label keys; terminfo capabilities;
and access ta low-level terminal-manipulation routines.
.PP
Da library uses tha locale which tha callin program has initialized.
That is normally done wit \fBsetlocale\fP:
.sp
      \fBsetlocale(LC_ALL, "");\fP
.sp
If tha locale aint initialized,
the library assumes dat charactas is printable as up in ISO\-8859\-1,
to work wit certain legacy programs.
Yo ass should initialize tha locale n' not rely on specific details of
the library when tha locale has not been setup.
.PP
Da function \fBinitscr\fR or \fBnewterm\fR
must be called ta initialize tha library
before any of tha other routines dat deal wit windows
and screens is used.
Da routine \fBendwin\fR must be called before exiting.
.PP
To git character-at-a-time input without echoin (most
interactive, screen oriented programs want this), tha following
sequence should be used:
.sp
      \fBinitscr(); cbreak(); noecho();\fR
.sp
Most programs would additionally use tha sequence:
.sp
      \fBnonl();\fR
      \fBintrflush(stdscr, FALSE);\fR
      \fBkeypad(stdscr, TRUE);\fR
.sp
Before a \fBcurses\fR program is run, tha tab stopz of tha terminal
should be set n' its initialization strings, if defined, must be output.
This can be done by executin tha \fBtput init\fR command
afta tha shell environment variable \fBTERM\fR has been exported.
\fBtset(1)\fR is probably responsible fo' bustin all dis bullshit.
[See \fBterminfo\fR(\*n) fo' further details.]
.PP
Da \fBncurses\fR library permits manipulation of data structures,
called \fIwindows\fR, which can be thought of as two-dimensional
arrayz of charactas representin all or part of a CRT screen.
A default window called \fBstdscr\fR, which is tha size of tha terminal
screen, is supplied.
Others may be pimped wit \fBnewwin\fR.
.PP
Note dat \fBcurses\fR do not handle overlappin windows, thatz done by
the \fBpanel\fR(3X) library.
This means dat you can either use
\fBstdscr\fR or divide tha screen tha fuck into tiled windows n' not using
\fBstdscr\fR at all.
Mixin tha two will result up in unpredictable, n' undesired, effects.
.PP
Windows is referred ta by variablez declared as \fBWINDOW *\fR.
These data structures is manipulated wit routines busted lyrics bout here and
elsewhere up in tha \fBncurses\fR manual pages.
Among them, da most thugged-out basic
routines is \fBmove\fR n' \fBaddch\fR.
Mo' general versions of
these routines is included wit names beginnin wit \fBw\fR,
allowin tha user ta specify a window.
Da routines not beginning
with \fBw\fR affect \fBstdscr\fR.
.PP
Afta rockin routines ta manipulate a window, \fBrefresh\fR is called,
tellin \fBcurses\fR ta make tha userz CRT screen look like
\fBstdscr\fR.
Da charactas up in a window is straight-up of type
\fBchtype\fR, (characta n' attribute data) so dat other shiznit
about tha characta may also be stored wit each character.
.PP
Special windows called \fIpads\fR may also be manipulated.
These is windows
which is not constrained ta tha size of tha screen n' whose contents need not
be straight-up displayed.
See \fBcurs_pad\fR(3X) fo' mo' shiznit.
.PP
In addizzle ta drawin charactas on tha screen, vizzle attributes n' colors
may be supported, causin tha charactas ta show up in such modes as
underlined, up in reverse vizzle, or up in color on terminals dat support such
display enhancements.
Line drawin charactas may be specified ta be output.
On input, \fBcurses\fR be also able ta translate arrow n' function keys that
transmit escape sequences tha fuck into single joints.
Da vizzle attributes, line
drawin characters, n' input joints use names, defined up in \fB<curses.h>\fR,
like fuckin \fBA_REVERSE\fR, \fBACS_HLINE\fR, n' \fBKEY_LEFT\fR.
.PP
If tha environment variablez \fBLINES\fR n' \fBCOLUMNS\fR is set, or if the
program is executin up in a window environment, line n' column shiznit in
the environment will override shiznit read by \fIterminfo\fR.
This would affect a program hustlin up in a AT&T 630 layer,
for example, where tha size of a
screen is chizzleable (see \fBENVIRONMENT\fR).
.PP
If tha environment variable \fBTERMINFO\fR is defined, any program using
\fBcurses\fR checks fo' a local terminal definizzle before checkin up in the
standard place.
For example, if \fBTERM\fR is set ta \fBatt4424\fR, then the
compiled terminal definizzle is found in
.sp
      \fB\*d/a/att4424\fR.
.sp
(Da \fBa\fR is copied from tha straight-up original gangsta letta of \fBatt4424\fR ta avoid
creation of big-ass directories.)  But fuck dat shiznit yo, tha word on tha street is dat if \fBTERMINFO\fR is set to
\fB$HOME/myterms\fR, \fBcurses\fR first checks
.sp
      \fB$HOME/myterms/a/att4424\fR,
.sp
and if dat fails, it then checks
.sp
      \fB\*d/a/att4424\fR.
.sp
This is useful fo' pimpin experimenstrual definitions or when write
permission up in \fB\*d\fR aint available.
.PP
Da integer variablez \fBLINES\fR n' \fBCOLS\fR is defined in
\fB<curses.h>\fR n' is ghon be filled up in by \fBinitscr\fR wit tha size of the
screen.
Da constants \fBTRUE\fR n' \fBFALSE\fR have tha joints \fB1\fR and
\fB0\fR, respectively.
.PP
Da \fBcurses\fR routines also define tha \fBWINDOW *\fR variable \fBcurscr\fR
which is used fo' certain low-level operations like clearin n' redrawin a
screen containin garbage.
Da \fBcurscr\fR can be used up in only all dem routines.
.\"
.SS Routine n' Argument Names
Many \fBcurses\fR routines have two or mo' versions.
Da routines prefixed wit \fBw\fR require a window argument.
Da routines prefixed wit \fBp\fR require a pad argument.
Those without a prefix generally use \fBstdscr\fR.
.PP
Da routines prefixed wit \fBmv\fR require a \fIy\fR n' \fIx\fR
coordinizzle ta move ta before struttin tha appropriate action.
Da \fBmv\fR routines imply a cold-ass lil call ta \fBmove\fR before tha call ta the
other routine.
Da coordinizzle \fIy\fR always refers ta tha row (of
the window), n' \fIx\fR always refers ta tha column.
Da upper left-hand corner be always (0,0), not (1,1).
.PP
Da routines prefixed wit \fBmvw\fR take both a window argument and
\fIx\fR n' \fIy\fR coordinates.
Da window argument be always specified before tha coordinates.
.PP
In each case, \fIwin\fR is tha window affected, n' \fIpad\fR is the
pad affected; \fIwin\fR n' \fIpad\fR is always pointas ta type
\fBWINDOW\fR.
.PP
Option settin routines require a Boolean flag \fIbf\fR wit tha value
\fBTRUE\fR or \fBFALSE\fR; \fIbf\fR be alwayz of type \fBbool\fR.
Most of tha data types used up in tha library routines,
like fuckin \fBWINDOW\fR, \fBSCREEN\fR, \fBbool\fR, n' \fBchtype\fR
are defined up in \fB<curses.h>\fR.
Types used fo' tha terminfo routines such as
\fBTERMINAL\fR is defined up in \fB<term.h>\fR.
.PP
This manual page raps bout functions which may step tha fuck up in any configuration
of tha library.
There is two common configurationz of tha library:
.RS
.TP 5
ncurses
the "normal" library, which handlez 8-bit characters.
Da aiiight (8-bit) library stores charactas combined wit attributes
in \fBchtype\fP data.
.IP
Attributes ridin' solo (no correspondin character) may be stored up in \fBchtype\fP
or tha equivalent \fBattr_t\fP data.
In either case, tha data is stored up in suttin' like a integer.
.IP
Each cell (row n' column) up in a \fBWINDOW\fP is stored as a \fBchtype\fP.
.TP 5
ncursesw
the so-called "wide" library, which handlez multibyte characters
(see tha section on \fBALTERNATE CONFIGURATIONS\fP).
Da "wide" library includes all of tha calls from tha "normal" library.
It addz bout one third mo' calls rockin data types which store
multibyte characters:
.RS
.TP 5
.B cchar_t
correspondz ta \fBchtype\fP.
However it aint nuthin but a structure, cuz mo' data is stored than can fit into
an integer.
Da charactas is big-ass enough ta require a gangbangin' full integer value \- n' there
may be mo' than one characta per cell.
Da vizzle attributes n' color is stored up in separate fieldz of tha structure.
.IP
Each cell (row n' column) up in a \fBWINDOW\fP is stored as a \fBcchar_t\fP.
.TP 5
.B wchar_t
stores a "wide" character.
Like \fBchtype\fP, dis may be a integer.
.TP 5
.B wint_t
stores a \fBwchar_t\fP or \fBWEOF\fP \- not tha same, though both may have
the same size.
.RE
.IP
Da "wide" library serves up freshly smoked up functions which is analogous to
functions up in tha "normal" library.
There be a namin convention which relates nuff of tha normal/wide variants:
a "_w" is banged tha fuck into tha name.
For example, \fBwaddch\fP becomes \fBwadd_wch\fP.
.RE
.PP
.\"
.SS Routine Name Index
Da followin table lists each \fBcurses\fR routine n' tha name of
the manual page on which it is busted lyrics about.
Routines flagged wit `*'
are ncurses-specific, not busted lyrics bout by XPG4 or present up in SVr4.
.PP
.TS
centa tab(/);
l l
l l .
\fBcurses\fR Routine Name/Manual Page Name
=
COLOR_PAIR/\fBcurs_color\fR(3X)
PAIR_NUMBER/\fBcurs_attr\fR(3X)
_nc_free_and_exit/\fBcurs_memleaks\fR(3X)*
_nc_freeall/\fBcurs_memleaks\fR(3X)*
_nc_tracebits/\fBcurs_trace\fR(3X)*
_traceattr/\fBcurs_trace\fR(3X)*
_traceattr2/\fBcurs_trace\fR(3X)*
_tracechar/\fBcurs_trace\fR(3X)*
_tracechtype/\fBcurs_trace\fR(3X)*
_tracechtype2/\fBcurs_trace\fR(3X)*
_tracedump/\fBcurs_trace\fR(3X)*
_tracef/\fBcurs_trace\fR(3X)*
_tracemouse/\fBcurs_trace\fR(3X)*
add_wch/\fBcurs_add_wch\fR(3X)
add_wchnstr/\fBcurs_add_wchstr\fR(3X)
add_wchstr/\fBcurs_add_wchstr\fR(3X)
addch/\fBcurs_addch\fR(3X)
addchnstr/\fBcurs_addchstr\fR(3X)
addchstr/\fBcurs_addchstr\fR(3X)
addnstr/\fBcurs_addstr\fR(3X)
addnwstr/\fBcurs_addwstr\fR(3X)
addstr/\fBcurs_addstr\fR(3X)
addwstr/\fBcurs_addwstr\fR(3X)
assume_default_colors/\fBdefault_colors\fR(3X)*
attr_get/\fBcurs_attr\fR(3X)
attr_off/\fBcurs_attr\fR(3X)
attr_on/\fBcurs_attr\fR(3X)
attr_set/\fBcurs_attr\fR(3X)
attroff/\fBcurs_attr\fR(3X)
attron/\fBcurs_attr\fR(3X)
attrset/\fBcurs_attr\fR(3X)
baudrate/\fBcurs_termattrs\fR(3X)
beep/\fBcurs_beep\fR(3X)
bkgd/\fBcurs_bkgd\fR(3X)
bkgdset/\fBcurs_bkgd\fR(3X)
bkgrnd/\fBcurs_bkgrnd\fR(3X)
bkgrndset/\fBcurs_bkgrnd\fR(3X)
border/\fBcurs_border\fR(3X)
border_set/\fBcurs_border_set\fR(3X)
box/\fBcurs_border\fR(3X)
box_set/\fBcurs_border_set\fR(3X)
can_change_color/\fBcurs_color\fR(3X)
cbreak/\fBcurs_inopts\fR(3X)
chgat/\fBcurs_attr\fR(3X)
clear/\fBcurs_clear\fR(3X)
clearok/\fBcurs_outopts\fR(3X)
clrtobot/\fBcurs_clear\fR(3X)
clrtoeol/\fBcurs_clear\fR(3X)
color_content/\fBcurs_color\fR(3X)
color_set/\fBcurs_attr\fR(3X)
copywin/\fBcurs_overlay\fR(3X)
curs_set/\fBcurs_kernel\fR(3X)
curses_version/\fBcurs_extend\fR(3X)*
def_prog_mode/\fBcurs_kernel\fR(3X)
def_shell_mode/\fBcurs_kernel\fR(3X)
define_key/\fBdefine_key\fR(3X)*
del_curterm/\fBcurs_terminfo\fR(3X)
delay_output/\fBcurs_util\fR(3X)
delch/\fBcurs_delch\fR(3X)
deleteln/\fBcurs_deleteln\fR(3X)
delscreen/\fBcurs_initscr\fR(3X)
delwin/\fBcurs_window\fR(3X)
derwin/\fBcurs_window\fR(3X)
doupdate/\fBcurs_refresh\fR(3X)
dupwin/\fBcurs_window\fR(3X)
echo/\fBcurs_inopts\fR(3X)
echo_wchar/\fBcurs_add_wch\fR(3X)
echochar/\fBcurs_addch\fR(3X)
endwin/\fBcurs_initscr\fR(3X)
erase/\fBcurs_clear\fR(3X)
erasechar/\fBcurs_termattrs\fR(3X)
erasewchar/\fBcurs_termattrs\fR(3X)
filter/\fBcurs_util\fR(3X)
flash/\fBcurs_beep\fR(3X)
flushinp/\fBcurs_util\fR(3X)
get_wch/\fBcurs_get_wch\fR(3X)
get_wstr/\fBcurs_get_wstr\fR(3X)
getattrs/\fBcurs_attr\fR(3X)
getbegx/\fBcurs_legacy\fR(3X)*
getbegy/\fBcurs_legacy\fR(3X)*
getbegyx/\fBcurs_getyx\fR(3X)
getbkgd/\fBcurs_bkgd\fR(3X)
getbkgrnd/\fBcurs_bkgrnd\fR(3X)
getcchar/\fBcurs_getcchar\fR(3X)
getch/\fBcurs_getch\fR(3X)
getcurx/\fBcurs_legacy\fR(3X)*
getcury/\fBcurs_legacy\fR(3X)*
getmaxx/\fBcurs_legacy\fR(3X)*
getmaxy/\fBcurs_legacy\fR(3X)*
getmaxyx/\fBcurs_getyx\fR(3X)
getmouse/\fBcurs_mouse\fR(3X)*
getn_wstr/\fBcurs_get_wstr\fR(3X)
getnstr/\fBcurs_getstr\fR(3X)
getparx/\fBcurs_legacy\fR(3X)*
getpary/\fBcurs_legacy\fR(3X)*
getparyx/\fBcurs_getyx\fR(3X)
getstr/\fBcurs_getstr\fR(3X)
getsyx/\fBcurs_kernel\fR(3X)
getwin/\fBcurs_util\fR(3X)
getyx/\fBcurs_getyx\fR(3X)
halfdelay/\fBcurs_inopts\fR(3X)
has_colors/\fBcurs_color\fR(3X)
has_ic/\fBcurs_termattrs\fR(3X)
has_il/\fBcurs_termattrs\fR(3X)
has_key/\fBcurs_getch\fR(3X)*
hline/\fBcurs_border\fR(3X)
hline_set/\fBcurs_border_set\fR(3X)
idcok/\fBcurs_outopts\fR(3X)
idlok/\fBcurs_outopts\fR(3X)
immedok/\fBcurs_outopts\fR(3X)
in_wch/\fBcurs_in_wch\fR(3X)
in_wchnstr/\fBcurs_in_wchstr\fR(3X)
in_wchstr/\fBcurs_in_wchstr\fR(3X)
inch/\fBcurs_inch\fR(3X)
inchnstr/\fBcurs_inchstr\fR(3X)
inchstr/\fBcurs_inchstr\fR(3X)
init_color/\fBcurs_color\fR(3X)
init_pair/\fBcurs_color\fR(3X)
initscr/\fBcurs_initscr\fR(3X)
innstr/\fBcurs_instr\fR(3X)
innwstr/\fBcurs_inwstr\fR(3X)
ins_nwstr/\fBcurs_ins_wstr\fR(3X)
ins_wch/\fBcurs_ins_wch\fR(3X)
ins_wstr/\fBcurs_ins_wstr\fR(3X)
insch/\fBcurs_insch\fR(3X)
insdelln/\fBcurs_deleteln\fR(3X)
insertln/\fBcurs_deleteln\fR(3X)
insnstr/\fBcurs_insstr\fR(3X)
insstr/\fBcurs_insstr\fR(3X)
instr/\fBcurs_instr\fR(3X)
intrflush/\fBcurs_inopts\fR(3X)
inwstr/\fBcurs_inwstr\fR(3X)
is_cleared/\fBcurs_opaque\fR(3X)*
is_idcok/\fBcurs_opaque\fR(3X)*
is_idlok/\fBcurs_opaque\fR(3X)*
is_immedok/\fBcurs_opaque\fR(3X)*
is_keypad/\fBcurs_opaque\fR(3X)*
is_leaveok/\fBcurs_opaque\fR(3X)*
is_linetouched/\fBcurs_touch\fR(3X)
is_nodelay/\fBcurs_opaque\fR(3X)*
is_notimeout/\fBcurs_opaque\fR(3X)*
is_scrollok/\fBcurs_opaque\fR(3X)*
is_syncok/\fBcurs_opaque\fR(3X)*
is_term_resized/\fBresizeterm\fR(3X)*
is_wintouched/\fBcurs_touch\fR(3X)
isendwin/\fBcurs_initscr\fR(3X)
key_defined/\fBkey_defined\fR(3X)*
key_name/\fBcurs_util\fR(3X)
keybound/\fBkeybound\fR(3X)*
keyname/\fBcurs_util\fR(3X)
keyok/\fBkeyok\fR(3X)*
keypad/\fBcurs_inopts\fR(3X)
killchar/\fBcurs_termattrs\fR(3X)
killwchar/\fBcurs_termattrs\fR(3X)
leaveok/\fBcurs_outopts\fR(3X)
longname/\fBcurs_termattrs\fR(3X)
mcprint/\fBcurs_print\fR(3X)*
meta/\fBcurs_inopts\fR(3X)
mouse_trafo/\fBcurs_mouse\fR(3X)*
mouseinterval/\fBcurs_mouse\fR(3X)*
mousemask/\fBcurs_mouse\fR(3X)*
move/\fBcurs_move\fR(3X)
mvadd_wch/\fBcurs_add_wch\fR(3X)
mvadd_wchnstr/\fBcurs_add_wchstr\fR(3X)
mvadd_wchstr/\fBcurs_add_wchstr\fR(3X)
mvaddch/\fBcurs_addch\fR(3X)
mvaddchnstr/\fBcurs_addchstr\fR(3X)
mvaddchstr/\fBcurs_addchstr\fR(3X)
mvaddnstr/\fBcurs_addstr\fR(3X)
mvaddnwstr/\fBcurs_addwstr\fR(3X)
mvaddstr/\fBcurs_addstr\fR(3X)
mvaddwstr/\fBcurs_addwstr\fR(3X)
mvchgat/\fBcurs_attr\fR(3X)
mvcur/\fBcurs_terminfo\fR(3X)
mvdelch/\fBcurs_delch\fR(3X)
mvderwin/\fBcurs_window\fR(3X)
mvget_wch/\fBcurs_get_wch\fR(3X)
mvget_wstr/\fBcurs_get_wstr\fR(3X)
mvgetch/\fBcurs_getch\fR(3X)
mvgetn_wstr/\fBcurs_get_wstr\fR(3X)
mvgetnstr/\fBcurs_getstr\fR(3X)
mvgetstr/\fBcurs_getstr\fR(3X)
mvhline/\fBcurs_border\fR(3X)
mvhline_set/\fBcurs_border_set\fR(3X)
mvin_wch/\fBcurs_in_wch\fR(3X)
mvin_wchnstr/\fBcurs_in_wchstr\fR(3X)
mvin_wchstr/\fBcurs_in_wchstr\fR(3X)
mvinch/\fBcurs_inch\fR(3X)
mvinchnstr/\fBcurs_inchstr\fR(3X)
mvinchstr/\fBcurs_inchstr\fR(3X)
mvinnstr/\fBcurs_instr\fR(3X)
mvinnwstr/\fBcurs_inwstr\fR(3X)
mvins_nwstr/\fBcurs_ins_wstr\fR(3X)
mvins_wch/\fBcurs_ins_wch\fR(3X)
mvins_wstr/\fBcurs_ins_wstr\fR(3X)
mvinsch/\fBcurs_insch\fR(3X)
mvinsnstr/\fBcurs_insstr\fR(3X)
mvinsstr/\fBcurs_insstr\fR(3X)
mvinstr/\fBcurs_instr\fR(3X)
mvinwstr/\fBcurs_inwstr\fR(3X)
mvprintw/\fBcurs_printw\fR(3X)
mvscanw/\fBcurs_scanw\fR(3X)
mvvline/\fBcurs_border\fR(3X)
mvvline_set/\fBcurs_border_set\fR(3X)
mvwadd_wch/\fBcurs_add_wch\fR(3X)
mvwadd_wchnstr/\fBcurs_add_wchstr\fR(3X)
mvwadd_wchstr/\fBcurs_add_wchstr\fR(3X)
mvwaddch/\fBcurs_addch\fR(3X)
mvwaddchnstr/\fBcurs_addchstr\fR(3X)
mvwaddchstr/\fBcurs_addchstr\fR(3X)
mvwaddnstr/\fBcurs_addstr\fR(3X)
mvwaddnwstr/\fBcurs_addwstr\fR(3X)
mvwaddstr/\fBcurs_addstr\fR(3X)
mvwaddwstr/\fBcurs_addwstr\fR(3X)
mvwchgat/\fBcurs_attr\fR(3X)
mvwdelch/\fBcurs_delch\fR(3X)
mvwget_wch/\fBcurs_get_wch\fR(3X)
mvwget_wstr/\fBcurs_get_wstr\fR(3X)
mvwgetch/\fBcurs_getch\fR(3X)
mvwgetn_wstr/\fBcurs_get_wstr\fR(3X)
mvwgetnstr/\fBcurs_getstr\fR(3X)
mvwgetstr/\fBcurs_getstr\fR(3X)
mvwhline/\fBcurs_border\fR(3X)
mvwhline_set/\fBcurs_border_set\fR(3X)
mvwin/\fBcurs_window\fR(3X)
mvwin_wch/\fBcurs_in_wch\fR(3X)
mvwin_wchnstr/\fBcurs_in_wchstr\fR(3X)
mvwin_wchstr/\fBcurs_in_wchstr\fR(3X)
mvwinch/\fBcurs_inch\fR(3X)
mvwinchnstr/\fBcurs_inchstr\fR(3X)
mvwinchstr/\fBcurs_inchstr\fR(3X)
mvwinnstr/\fBcurs_instr\fR(3X)
mvwinnwstr/\fBcurs_inwstr\fR(3X)
mvwins_nwstr/\fBcurs_ins_wstr\fR(3X)
mvwins_wch/\fBcurs_ins_wch\fR(3X)
mvwins_wstr/\fBcurs_ins_wstr\fR(3X)
mvwinsch/\fBcurs_insch\fR(3X)
mvwinsnstr/\fBcurs_insstr\fR(3X)
mvwinsstr/\fBcurs_insstr\fR(3X)
mvwinstr/\fBcurs_instr\fR(3X)
mvwinwstr/\fBcurs_inwstr\fR(3X)
mvwprintw/\fBcurs_printw\fR(3X)
mvwscanw/\fBcurs_scanw\fR(3X)
mvwvline/\fBcurs_border\fR(3X)
mvwvline_set/\fBcurs_border_set\fR(3X)
napms/\fBcurs_kernel\fR(3X)
newpad/\fBcurs_pad\fR(3X)
newterm/\fBcurs_initscr\fR(3X)
newwin/\fBcurs_window\fR(3X)
nl/\fBcurs_outopts\fR(3X)
nocbreak/\fBcurs_inopts\fR(3X)
nodelay/\fBcurs_inopts\fR(3X)
noecho/\fBcurs_inopts\fR(3X)
nofilter/\fBcurs_util\fR(3X)*
nonl/\fBcurs_outopts\fR(3X)
noqiflush/\fBcurs_inopts\fR(3X)
noraw/\fBcurs_inopts\fR(3X)
notimeout/\fBcurs_inopts\fR(3X)
overlay/\fBcurs_overlay\fR(3X)
overwrite/\fBcurs_overlay\fR(3X)
pair_content/\fBcurs_color\fR(3X)
pechochar/\fBcurs_pad\fR(3X)
pnoutrefresh/\fBcurs_pad\fR(3X)
prefresh/\fBcurs_pad\fR(3X)
printw/\fBcurs_printw\fR(3X)
putp/\fBcurs_terminfo\fR(3X)
putwin/\fBcurs_util\fR(3X)
qiflush/\fBcurs_inopts\fR(3X)
raw/\fBcurs_inopts\fR(3X)
redrawwin/\fBcurs_refresh\fR(3X)
refresh/\fBcurs_refresh\fR(3X)
reset_prog_mode/\fBcurs_kernel\fR(3X)
reset_shell_mode/\fBcurs_kernel\fR(3X)
resetty/\fBcurs_kernel\fR(3X)
resizeterm/\fBresizeterm\fR(3X)*
restartterm/\fBcurs_terminfo\fR(3X)
ripoffline/\fBcurs_kernel\fR(3X)
savetty/\fBcurs_kernel\fR(3X)
scanw/\fBcurs_scanw\fR(3X)
scr_dump/\fBcurs_scr_dump\fR(3X)
scr_init/\fBcurs_scr_dump\fR(3X)
scr_restore/\fBcurs_scr_dump\fR(3X)
scr_set/\fBcurs_scr_dump\fR(3X)
scrl/\fBcurs_scroll\fR(3X)
scroll/\fBcurs_scroll\fR(3X)
scrollok/\fBcurs_outopts\fR(3X)
set_curterm/\fBcurs_terminfo\fR(3X)
set_term/\fBcurs_initscr\fR(3X)
setcchar/\fBcurs_getcchar\fR(3X)
setscrreg/\fBcurs_outopts\fR(3X)
setsyx/\fBcurs_kernel\fR(3X)
setterm/\fBcurs_terminfo\fR(3X)
setupterm/\fBcurs_terminfo\fR(3X)
slk_attr/\fBcurs_slk\fR(3X)*
slk_attr_off/\fBcurs_slk\fR(3X)
slk_attr_on/\fBcurs_slk\fR(3X)
slk_attr_set/\fBcurs_slk\fR(3X)
slk_attroff/\fBcurs_slk\fR(3X)
slk_attron/\fBcurs_slk\fR(3X)
slk_attrset/\fBcurs_slk\fR(3X)
slk_clear/\fBcurs_slk\fR(3X)
slk_color/\fBcurs_slk\fR(3X)
slk_init/\fBcurs_slk\fR(3X)
slk_label/\fBcurs_slk\fR(3X)
slk_noutrefresh/\fBcurs_slk\fR(3X)
slk_refresh/\fBcurs_slk\fR(3X)
slk_restore/\fBcurs_slk\fR(3X)
slk_set/\fBcurs_slk\fR(3X)
slk_touch/\fBcurs_slk\fR(3X)
standend/\fBcurs_attr\fR(3X)
standout/\fBcurs_attr\fR(3X)
start_color/\fBcurs_color\fR(3X)
subpad/\fBcurs_pad\fR(3X)
subwin/\fBcurs_window\fR(3X)
syncok/\fBcurs_window\fR(3X)
term_attrs/\fBcurs_termattrs\fR(3X)
termattrs/\fBcurs_termattrs\fR(3X)
termname/\fBcurs_termattrs\fR(3X)
tgetent/\fBcurs_termcap\fR(3X)
tgetflag/\fBcurs_termcap\fR(3X)
tgetnum/\fBcurs_termcap\fR(3X)
tgetstr/\fBcurs_termcap\fR(3X)
tgoto/\fBcurs_termcap\fR(3X)
tigetflag/\fBcurs_terminfo\fR(3X)
tigetnum/\fBcurs_terminfo\fR(3X)
tigetstr/\fBcurs_terminfo\fR(3X)
timeout/\fBcurs_inopts\fR(3X)
touchline/\fBcurs_touch\fR(3X)
touchwin/\fBcurs_touch\fR(3X)
tparm/\fBcurs_terminfo\fR(3X)
tputs/\fBcurs_termcap\fR(3X)
tputs/\fBcurs_terminfo\fR(3X)
trace/\fBcurs_trace\fR(3X)*
typeahead/\fBcurs_inopts\fR(3X)
unctrl/\fBcurs_util\fR(3X)
unget_wch/\fBcurs_get_wch\fR(3X)
ungetch/\fBcurs_getch\fR(3X)
ungetmouse/\fBcurs_mouse\fR(3X)*
untouchwin/\fBcurs_touch\fR(3X)
use_default_colors/\fBdefault_colors\fR(3X)*
use_env/\fBcurs_util\fR(3X)
use_extended_names/\fBcurs_extend\fR(3X)*
use_legacy_coding/\fBlegacy_coding\fR(3X)*
use_tioctl/\fBcurs_util\fR(3X)
vid_attr/\fBcurs_terminfo\fR(3X)
vid_puts/\fBcurs_terminfo\fR(3X)
vidattr/\fBcurs_terminfo\fR(3X)
vidputs/\fBcurs_terminfo\fR(3X)
vline/\fBcurs_border\fR(3X)
vline_set/\fBcurs_border_set\fR(3X)
vw_printw/\fBcurs_printw\fR(3X)
vw_scanw/\fBcurs_scanw\fR(3X)
vwprintw/\fBcurs_printw\fR(3X)
vwscanw/\fBcurs_scanw\fR(3X)
wadd_wch/\fBcurs_add_wch\fR(3X)
wadd_wchnstr/\fBcurs_add_wchstr\fR(3X)
wadd_wchstr/\fBcurs_add_wchstr\fR(3X)
waddch/\fBcurs_addch\fR(3X)
waddchnstr/\fBcurs_addchstr\fR(3X)
waddchstr/\fBcurs_addchstr\fR(3X)
waddnstr/\fBcurs_addstr\fR(3X)
waddnwstr/\fBcurs_addwstr\fR(3X)
waddstr/\fBcurs_addstr\fR(3X)
waddwstr/\fBcurs_addwstr\fR(3X)
wattr_get/\fBcurs_attr\fR(3X)
wattr_off/\fBcurs_attr\fR(3X)
wattr_on/\fBcurs_attr\fR(3X)
wattr_set/\fBcurs_attr\fR(3X)
wattroff/\fBcurs_attr\fR(3X)
wattron/\fBcurs_attr\fR(3X)
wattrset/\fBcurs_attr\fR(3X)
wbkgd/\fBcurs_bkgd\fR(3X)
wbkgdset/\fBcurs_bkgd\fR(3X)
wbkgrnd/\fBcurs_bkgrnd\fR(3X)
wbkgrndset/\fBcurs_bkgrnd\fR(3X)
wborder/\fBcurs_border\fR(3X)
wborder_set/\fBcurs_border_set\fR(3X)
wchgat/\fBcurs_attr\fR(3X)
wclear/\fBcurs_clear\fR(3X)
wclrtobot/\fBcurs_clear\fR(3X)
wclrtoeol/\fBcurs_clear\fR(3X)
wcolor_set/\fBcurs_attr\fR(3X)
wcursyncup/\fBcurs_window\fR(3X)
wdelch/\fBcurs_delch\fR(3X)
wdeleteln/\fBcurs_deleteln\fR(3X)
wecho_wchar/\fBcurs_add_wch\fR(3X)
wechochar/\fBcurs_addch\fR(3X)
wenclose/\fBcurs_mouse\fR(3X)*
werase/\fBcurs_clear\fR(3X)
wget_wch/\fBcurs_get_wch\fR(3X)
wget_wstr/\fBcurs_get_wstr\fR(3X)
wgetbkgrnd/\fBcurs_bkgrnd\fR(3X)
wgetch/\fBcurs_getch\fR(3X)
wgetn_wstr/\fBcurs_get_wstr\fR(3X)
wgetnstr/\fBcurs_getstr\fR(3X)
wgetstr/\fBcurs_getstr\fR(3X)
whline/\fBcurs_border\fR(3X)
whline_set/\fBcurs_border_set\fR(3X)
win_wch/\fBcurs_in_wch\fR(3X)
win_wchnstr/\fBcurs_in_wchstr\fR(3X)
win_wchstr/\fBcurs_in_wchstr\fR(3X)
winch/\fBcurs_inch\fR(3X)
winchnstr/\fBcurs_inchstr\fR(3X)
winchstr/\fBcurs_inchstr\fR(3X)
winnstr/\fBcurs_instr\fR(3X)
winnwstr/\fBcurs_inwstr\fR(3X)
wins_nwstr/\fBcurs_ins_wstr\fR(3X)
wins_wch/\fBcurs_ins_wch\fR(3X)
wins_wstr/\fBcurs_ins_wstr\fR(3X)
winsch/\fBcurs_insch\fR(3X)
winsdelln/\fBcurs_deleteln\fR(3X)
winsertln/\fBcurs_deleteln\fR(3X)
winsnstr/\fBcurs_insstr\fR(3X)
winsstr/\fBcurs_insstr\fR(3X)
winstr/\fBcurs_instr\fR(3X)
winwstr/\fBcurs_inwstr\fR(3X)
wmouse_trafo/\fBcurs_mouse\fR(3X)*
wmove/\fBcurs_move\fR(3X)
wnoutrefresh/\fBcurs_refresh\fR(3X)
wprintw/\fBcurs_printw\fR(3X)
wredrawln/\fBcurs_refresh\fR(3X)
wrefresh/\fBcurs_refresh\fR(3X)
wresize/\fBwresize\fR(3X)*
wscanw/\fBcurs_scanw\fR(3X)
wscrl/\fBcurs_scroll\fR(3X)
wsetscrreg/\fBcurs_outopts\fR(3X)
wstandend/\fBcurs_attr\fR(3X)
wstandout/\fBcurs_attr\fR(3X)
wsyncdown/\fBcurs_window\fR(3X)
wsyncup/\fBcurs_window\fR(3X)
wtimeout/\fBcurs_inopts\fR(3X)
wtouchln/\fBcurs_touch\fR(3X)
wunctrl/\fBcurs_util\fR(3X)
wvline/\fBcurs_border\fR(3X)
wvline_set/\fBcurs_border_set\fR(3X)
.TE
.SH RETURN VALUE
Routines dat return a integer return \fBERR\fR upon failure n' an
integer value other than \fBERR\fR upon successful completion, unless
otherwise noted up in tha routine descriptions.
.PP
As a general rule, routines check fo' null pointas passed as parameters,
and handle dis as a error.
.PP
All macros return tha value of tha \fBw\fR version, except \fBsetscrreg\fR,
\fBwsetscrreg\fR, \fBgetyx\fR, \fBgetbegyx\fR, n' \fBgetmaxyx\fR.
Da return joints of
\fBsetscrreg\fR,
\fBwsetscrreg\fR,
\fBgetyx\fR,
\fBgetbegyx\fR, and
\fBgetmaxyx\fR is undefined (i.e., these should not be used as the
right-hand side of assignment statements).
.PP
Routines dat return pointas return \fBNULL\fR on error.
.SH ENVIRONMENT
Da followin environment symbols is useful fo' customizin the
runtime behavior of tha \fBncurses\fR library.
Da most blingin ones done been already discussed up in detail.
.TP 5
BAUDRATE
Da debuggin library checks dis environment variable when tha application
has repimped up output ta a gangbangin' file.
Da variablez numeric value is used fo' tha baudrate.
If no value is found, \fBncurses\fR uses 9600.
This allows testas ta construct repeatable test-cases
that take tha fuck into account costs dat depend on baudrate.
.TP 5
CC
When set, chizzle occurrencez of tha command_character
(i.e., tha \fBcmdch\fP capability)
of tha loaded terminfo entries ta tha value of dis variable.
Straight-up few terminfo entries provide dis feature.
.IP
Because dis name be also used up in pimpment environments ta represent
the C compilerz name, \fBncurses\fR ignores it if it do not happen to
be a single character.
.TP 5
COLUMNS
Specify tha width of tha screen up in characters.
Applications hustlin up in a windowin environment probably is able to
obtain tha width of tha window up in which they is executing.
If neither tha \fBCOLUMNS\fP value nor tha terminalz screen size be available,
\fBncurses\fR uses tha size which may be specified up in tha terminfo database
(i.e., tha \fBcols\fR capability).
.IP
It be blingin dat yo' application bust a cold-ass lil erect size fo' tha screen.
This aint always possible cuz yo' application may be
runnin on a host which do not honor NAWS (Negotiations Bout Window
Size), or cuz yo ass is temporarily hustlin as another user.
But fuck dat shiznit yo, tha word on tha street is dat settin \fBCOLUMNS\fP and/or \fBLINES\fP overrides tha library's
use of tha screen size obtained from tha operatin system.
.IP
Either \fBCOLUMNS\fP or \fBLINES\fP symbols may be specified independently.
This is mainly useful ta circumvent legacy misfeaturez of terminal descriptions,
e.g., xterm which commonly specifies a 65 line screen.
For dopest thangs up in dis biatch, \fBlines\fR n' \fBcols\fR should not be specified in
a terminal description fo' terminals which is run as emulations.
.IP
Use tha \fBuse_env\fR function ta disable all use of external environment
(but not includin system calls) ta determine tha screen size.
Use tha \fBuse_tioctl\fR function ta update \fBCOLUMNS\fP or \fBLINES\fP
to match tha screen size obtained from system calls or tha terminal database.
.TP 5
ESCDELAY
Specifies tha total time, up in milliseconds, fo' which ncurses will
await a cold-ass lil characta sequence, e.g., a gangbangin' function key.
Da default value, 1000 milliseconds, is enough fo' most uses.
But fuck dat shiznit yo, tha word on tha street is dat it is done cooked up a variable ta accommodate unusual applications.
.IP
Da most common instizzle where you may wish ta chizzle dis value
is ta work wit slow hosts, e.g., hustlin on a network.
If tha host cannot read charactas rapidly enough, it gonna git tha same
effect as if tha terminal did not bust charactas rapidly enough.
Da library will still peep a timeout.
.IP
Note dat xterm mouse events is built up from characta sequences
received from tha xterm.
If yo' application make heavy use of multiple-clicking, you may
wish ta lengthen dis default value cuz tha timeout applies
to tha composed multi-click event as well as tha individual clicks.
.IP
In addizzle ta tha environment variable,
this implementation serves up a global variable wit tha same name.
Portable applications should not rely upon tha presence of ESCDELAY
in either form,
but settin tha environment variable rather than tha global variable
does not create problems when compilin a application.
.TP 5
HOME
Tells \fBncurses\fR where yo' home directory is.
That is where it may read n' write auxiliary terminal descriptions:
.IP
$HOME/.termcap
.br
$HOME/.terminfo
.TP 5
LINES
Like COLUMNS, specify tha height of tha screen up in characters.
See COLUMNS fo' a thugged-out detailed description.
.TP 5
MOUSE_BUTTONS_123
This applies only ta tha OS/2 EMX port.
It specifies tha order of buttons on tha mouse.
OS/2 numbers a 3-button mouse inconsistently from other
platforms:
.sp
1 = left
.br
2 = right
.br
3 = middle.
.sp
This variable lets you customize tha mouse.
Da variable must be three numeric digits 1\-3 up in any order, e.g., 123 or 321.
If it aint specified, \fBncurses\fR uses 132.
.TP 5
NCURSES_ASSUMED_COLORS
Override tha compiled-in assumption dat the
terminalz default flavas is white-on-black
(see \fBdefault_colors\fR(3X)).
Yo ass may set tha foreground n' background color joints wit dis environment
variable by provin a 2-element list: foreground,background.
For example, ta tell ncurses ta not assume anything
about tha colors, set dis ta "\-1,\-1".
To make it green-on-black, set it ta "2,0".
Any positizzle value from zero ta tha terminfo \fBmax_colors\fR value be allowed.
.TP 5
NCURSES_GPM_TERMS
This applies only ta ncurses configured ta use tha GPM intercourse.
.IP
If present,
the environment variable be a list of one or mo' terminal names
against which tha TERM environment variable is matched.
Settin it ta a empty value disablez tha GPM intercourse;
usin tha built-in support fo' xterm, etc.
.IP
If tha environment variable be absent,
ncurses will attempt ta open GPM if TERM gotz nuff "linux".
.TP 5
NCURSES_NO_HARD_TABS
\fBNcurses\fP may use tabs as part of tha cursor movement optimization.
In some cases,
your terminal driver may not handle these properly.
Set dis environment variable ta disable tha feature.
Yo ass can also adjust yo' \fBstty\fP settings ta avoid tha problem.
.TP 5
NCURSES_NO_MAGIC_COOKIES
Some terminals bust a magic-cookie feature which requires special handling
to make highlightin n' other vizzle attributes display properly.
Yo ass can suppress tha highlightin entirely fo' these terminals by
settin dis environment variable.
.TP 5
NCURSES_NO_PADDING
Most of tha terminal descriptions up in tha terminfo database is written
for real "hardware" terminals.
Many playas use terminal emulators
which run up in a windowin environment n' use curses-based applications.
Terminal emulators can duplicate
all of tha blingin aspectz of a hardware terminal yo, but they do not
have tha same limitations.
Da chizzle limitation of a hardware terminal from tha standpoint
of yo' application is tha pimpment of dataflow, i.e., timing.
Unless a hardware terminal is intercoursed tha fuck into a terminal concentrator
(which do flow control),
it (or yo' application) must manage dataflow, preventin overruns.
Da skankyest solution (no hardware cost)
is fo' yo' program ta do dis by pausin after
operations dat tha terminal do slowly, like fuckin clearin tha display.
.IP
As a result, nuff terminal descriptions (includin tha vt100)
have delay times embedded.
Yo ass may wish ta use these descriptions,
but not wanna pay tha performizzle penalty.
.IP
Set tha NCURSES_NO_PADDING environment variable ta disable all but mandatory
padding.
Mandatory paddin is used as a part of special control
sequences like fuckin \fIflash\fR.
.TP 5
NCURSES_NO_SETBUF
This settin is obsolete.
Before chizzles
.RS
.bP
started wit 5.9 patch 20120825 
and
.bP
continued
though 5.9 patch 20130126
.RE
.IP
\fBncurses\fR enabled buffered output durin terminal initialization.
This was done (as up in SVr4 curses) fo' performizzle reasons.
For testin purposes, both of \fBncurses\fR n' certain applications,
this feature was made optional.
Settin tha NCURSES_NO_SETBUF variable
disabled output buffering, leavin tha output up in tha original gangsta (usually
line buffered) mode.
.IP
In tha current implementation,
ncurses performs its own bufferin n' do not require dis workaround.
It do not modify tha bufferin of tha standard output.
.IP
Da reason fo' tha chizzle was ta make tha behavior fo' interrupts and
other signals mo' robust.
One drawback is dat certain nonconventionizzle programs would mix
ordinary stdio calls wit ncurses calls n' (usually) work.
This is no longer possible since ncurses aint using
the buffered standard output but its own output (to tha same file descriptor).
As a special case, tha low-level calls like fuckin \fBputp\fP still use the
standard output.
But high-level curses calls do not.
.TP 5
NCURSES_NO_UTF8_ACS
Durin initialization, tha \fBncurses\fR library
checks fo' special cases where VT100 line-drawin (and tha corresponding
alternate characta set capabilities) busted lyrics bout up in tha terminfo is known
to be missing.
Specifically, when hustlin up in a UTF\-8 locale,
the Linux console emulator n' tha GNU screen program ignore these.
Ncurses checks tha TERM environment variable fo' these.
For other special cases, you should set dis environment variable.
Bustin dis  drops some lyrics ta ncurses ta use Unicode joints which correspond to
the VT100 line-drawin glyphs.
That works fo' tha special cases cited,
and is likely ta work fo' terminal emulators.
.IP
When settin dis variable, you should set it ta a nonzero value.
Settin it ta zero (or ta a nonnumber)
disablez tha special check fo' "linux" n' "screen".
.IP
As a alternatizzle ta tha environment variable,
ncurses checks fo' a extended terminfo capabilitizzle \fBU8\fP.
This be a numeric capabilitizzle which can be compiled rockin \fBtic\ \-x\fP.
For example
.RS 5
.ft CW
.sp
.nf
# linux console, if patched ta provide working
# VT100 shift-in/shift-out, wit correspondin font.
linux-vt100|linux console wit VT100 line-graphics,
        U8#0, use=linux,
.sp
# uxterm wit vt100Graphics resource set ta false
xterm-utf8|xterm relyin on UTF-8 line-graphics,
        U8#1, use=xterm,
.fi
.ft
.RE
.IP
Da name "U8" is chosen ta be two characters,
to permit it ta be used by applications dat use ncurses'
termcap intercourse.
.TP 5
NCURSES_TRACE
Durin initialization, tha \fBncurses\fR debuggin library
checks tha NCURSES_TRACE environment variable.
If it is defined, ta a numeric value, \fBncurses\fR calls tha \fBtrace\fR
function, rockin dat value as tha argument.
.IP
Da argument joints, which is defined up in \fBcurses.h\fR, provide several
typez of shiznit.
When hustlin wit traces enabled, yo' application will write the
file \fBtrace\fR ta tha current directory.
.TP 5
TERM
Denotes yo' terminal type.
Each terminal type is distinct, though nuff is similar.
.TP 5
TERMCAP
If tha \fBncurses\fR library has been configured wit \fItermcap\fR
support, \fBncurses\fR will check fo' a terminalz description in
termcap form if it aint available up in tha terminfo database.
.IP
Da TERMCAP environment variable gotz nuff either a terminal description (with
newlines stripped out),
or a gangbangin' file name spittin some lyrics ta where tha shiznit denoted by
the TERM environment variable exists.
In either case, settin it directs \fBncurses\fR ta ignore
the usual place fo' dis shiznit, e.g., /etc/termcap.
.TP 5
TERMINFO
Overrides tha directory up in which \fBncurses\fR searches fo' yo' terminal
description.
This is tha simplest yo, but not tha only way ta chizzle tha list of directories.
Da complete list of directories up in order bigs up:
.RS
.bP
the last directory ta which \fBncurses\fR wrote, if any, is searched first
.bP
the directory specified by tha TERMINFO environment variable
.bP
$HOME/.terminfo
.bP
directories listed up in tha TERMINFO_DIRS environment variable
.bP
one or mo' directories whose names is configured n' compiled tha fuck into the
ncurses library, i.e.,
.RS
.bP
no default value (correspondin ta tha TERMINFO_DIRS variable)
.bP
/usr/share/terminfo (correspondin ta tha TERMINFO variable)
.RE
.RE
.TP 5
TERMINFO_DIRS
Specifies a list of directories ta search fo' terminal descriptions.
Da list is separated by colons (i.e., ":") on Unix, semicolons on OS/2 EMX.
.IP
All of tha terminal descriptions is up in terminfo form.
Normally these is stored up in a gangbangin' finger-lickin' directory tree,
usin subdirectories named by tha straight-up original gangsta letta of tha terminal names therein.
.IP
If \fBncurses\fP is built wit a hashed database,
then each entry up in dis list can also be tha path of tha corresponding
database file.
.IP
If \fBncurses\fP is built wit a support fo' readin termcap files
directly, then a entry up in dis list may be tha path of a termcap file.
.TP 5
TERMPATH
If TERMCAP do not hold a gangbangin' file name then \fBncurses\fR checks
the TERMPATH environment variable.
This be a list of filenames separated by spaces or colons (i.e., ":") on Unix,
semicolons on OS/2 EMX.
.IP
If tha TERMPATH environment variable aint set,
\fBncurses\fR looks up in tha files
/etc/termcap, /usr/share/misc/termcap n' $HOME/.termcap, up in dat order.
.PP
Da library may be configured ta disregard tha followin variablez when the
current user is tha superuser (root), or if tha application uses setuid or
setgid permissions:
.IP
$TERMINFO, $TERMINFO_DIRS, $TERMPATH, as well as $HOME.
.SH ALTERNATE CONFIGURATIONS
Several different configurations is possible,
dependin on tha configure script options used when buildin \fBncurses\fP.
There is all dem main options whose effects is visible ta tha applications
developer rockin \fBncurses\fP:
.TP 5
\-\-disable\-overwrite
Da standard include fo' \fBncurses\fP be as noted up in \fBSYNOPSIS\fP:
.RS
.sp
\fB#include <curses.h>\fR
.RE
.IP
This option is used ta avoid filename conflicts when \fBncurses\fP
is not tha main implementation of cursez of tha computer.
If \fBncurses\fP is installed disablin overwrite, it puts its headaz in
a subdirectory, e.g.,
.RS
.sp
\fB#include <ncurses/curses.h>\fR
.RE
.IP
It also omits a symbolic link which would allow you ta use \fB\-lcurses\fP
to build executables.
.TP 5
\-\-enable\-widec
Da configure script renames tha library and
(if tha \fB\-\-disable\-overwrite\fP option is used)
puts tha header filez up in a gangbangin' finger-lickin' different subdirectory.
All of tha library names gotz a "w" appended ta them,
i.e., instead of
.RS
.sp
\fB\-lncurses\fR
.RE
.IP
you link with
.RS
.sp
\fB\-lncursesw\fR
.RE
.IP
Yo ass must also define \fB_XOPEN_SOURCE_EXTENDED\fP when compilin fo' the
wide-characta library ta use tha extended (wide-character) functions.
Da \fBcurses.h\fP file which is installed fo' tha wide-character
library is designed ta be compatible wit tha aiiight libraryz header.
Only tha size of tha \fBWINDOW\fP structure differs, n' straight-up few
applications require mo' than a pointa ta \fBWINDOW\fPs.
If tha headaz is installed allowin overwrite,
the wide-characta libraryz headaz should be installed last,
to allow applications ta be built rockin either library
from tha same set of headers.
.TP 5
\-\-with\-shared
.TP
\-\-with\-normal
.TP
\-\-with\-debug
.TP
\-\-with\-profile
Da shared n' aiiight (static) library names differ by they suffixes,
e.g., \fBlibncurses.so\fP n' \fBlibncurses.a\fP.
Da debug n' profilin libraries add a "_g" n' a "_p" ta tha root
names respectively,
e.g., \fBlibncurses_g.a\fP n' \fBlibncurses_p.a\fP.
.TP 5
\-\-with\-trace
Da \fBtrace\fP function normally resides up in tha debug library,
but it is sometimes useful ta configure dis up in tha shared library.
Configure scripts should check fo' tha functionz existence rather
than assumin it be always up in tha debug library.
.SH FILES
.TP 5
/usr/share/tabset
directory containin initialization filez fo' tha terminal capabilitizzle database
/usr/share/terminfo
terminal capabilitizzle database
.SH SEE ALSO
\fBterminfo\fR(\*n) n' related pages whose names begin
"curs_" fo' detailed routine descriptions.
.br
\fBcurs_variables\fR(3X) 
.SH EXTENSIONS
Da \fBncurses\fR library can be compiled wit a option (\fB\-DUSE_GETCAP\fR)
that falls back ta tha old-style /etc/termcap file if tha terminal setup code
cannot find a terminfo entry correspondin ta \fBTERM\fR.
Use of dis feature
is not recommended, as it essentially includes a entire termcap compila in
the \fBncurses\fR startup code, at dope cost up in core n' startup cycles.
.PP
Da \fBncurses\fR library includes facilitizzles fo' capturin mouse events on
certain terminals (includin xterm).
See tha \fBcurs_mouse\fR(3X)
manual page fo' details.
.PP
Da \fBncurses\fR library includes facilitizzles fo' respondin ta window
resizin events, e.g., when hustlin up in a xterm.
See tha \fBresizeterm\fR(3X)
and \fBwresize\fR(3X) manual pages fo' details.
In addition, tha library may be configured wit a SIGWINCH handlez.
.PP
Da \fBncurses\fR library extendz tha fixed set of function key capabilities
of terminals by allowin tha application designer ta define additional
key sequences at runtime.
See tha \fBdefine_key\fR(3X)
\fBkey_defined\fR(3X),
and \fBkeyok\fR(3X) manual pages fo' details.
.PP
Da \fBncurses\fR library can exploit tha capabilitizzlez of terminals which
implement tha ISO\-6429 SGR 39 n' SGR 49 controls, which allow a application
to reset tha terminal ta its original gangsta foreground n' background colors.
From tha users' perspective, tha application be able ta draw colored
text on a funky-ass background whose color is set independently, providin better
control over color contrasts.
See tha \fBdefault_colors\fR(3X) manual page fo' details.
.PP
Da \fBncurses\fR library includes a gangbangin' function fo' directin application output
to a printa attached ta tha terminal device.
See tha \fBcurs_print\fR(3X) manual page fo' details.
.SH PORTABILITY
Da \fBncurses\fR library is intended ta be BASE-level conformant wit XSI
Curses.
Da EXTENDED XSI Curses functionality
(includin color support) is supported.
.PP
A lil' small-ass number of local differences (that is, individual differences between
the XSI Curses n' \fBncurses\fR calls) is busted lyrics bout up in \fBPORTABILITY\fR
sectionz of tha library playa pages.
.PP
Unlike other implementations, dis one checks parametas like fuckin pointers
to WINDOW structures ta ensure they is not null.
Da main reason fo' providin dis behavior is ta guard against programmer
error.
Da standard intercourse do not provide a way fo' tha library
to tell a application which of nuff muthafuckin possible errors was detected.
Relyin on dis (or some other) extension will adversely affect the
portabilitizzle of curses applications.
.PP
This implementation also gotz nuff nuff muthafuckin extensions:
.bP
Da routine \fBhas_key\fR aint part of XPG4, nor is it present up in SVr4.
See tha \fBcurs_getch\fR(3X) manual page fo' details.
.bP
Da routine \fBslk_attr\fR aint part of XPG4, nor is it present up in SVr4.
See tha \fBcurs_slk\fR(3X) manual page fo' details.
.bP
Da routines \fBgetmouse\fR, \fBmousemask\fR, \fBungetmouse\fR,
\fBmouseinterval\fR, n' \fBwenclose\fR relatin ta mouse interfacin is not
part of XPG4, nor is they present up in SVr4.
See tha \fBcurs_mouse\fR(3X) manual page fo' details.
.bP
Da routine \fBmcprint\fR was not present up in any previous curses implementation.
See tha \fBcurs_print\fR(3X) manual page fo' details.
.bP
Da routine \fBwresize\fR aint part of XPG4, nor is it present up in SVr4.
See tha \fBwresize\fR(3X) manual page fo' details.
.bP
Da WINDOW structurez internal details can be hidden from application
programs.
See \fBcurs_opaque\fR(3X) fo' tha rap of \fBis_scrollok\fR, etc.
.bP
This implementation can be configured ta provide rudimentary support
for multi-threaded applications.
See \fBcurs_threads\fR(3X) fo' details.
.bP
This implementation can also be configured ta provide a set of functions which
improve tha mobilitizzle ta manage multiple screens.
See \fBcurs_sp_funcs\fR(3X) fo' details.
.PP
In phat curses versions, delays embedded up in tha capabilitizzles \fBcr\fR,
\fBind\fR, \fBcub1\fR, \fBff\fR n' \fBtab\fR activated correspondin delay
bits up in tha UNIX tty driver.
In dis implementation, all paddin is done by bustin  NUL bytes.
This method is slightly mo' expensive yo, but narrows tha intercourse
to tha UNIX kernel hella n' increases tha packagez portability
correspondingly.
.SH NOTES
Da header file \fB<curses.h>\fR automatically includes tha header files
\fB<stdio.h>\fR n' \fB<unctrl.h>\fR.
.PP
If standard output from a \fBncurses\fR program is re-pimped up ta something
which aint a tty, screen thugged-out shiznit is ghon be pimped up ta standard error.
This was a undocumented feature of AT&T System V Release 3 curses.
.SH AUTHORS
Zeyd M. Ben-Halim, Eric S. Raymond, Thomas E. Dickey.
Based on pcurses by Pavel Curtis.
