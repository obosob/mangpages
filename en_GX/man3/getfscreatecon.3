.TH "getfscreatecon" "3" "1 January 2004" "russell@coker.com.au" "SELinux API documentation"
.SH "NAME"
getfscreatecon, setfscreatecon \- git or set tha SELinux securitizzle context used fo' bustin a freshly smoked up file system object
.
.SH "SYNOPSIS"
.B #include <selinux/selinux.h>
.sp
.BI "int getfscreatecon(security_context_t *" con );
.sp
.BI "int getfscreatecon_raw(security_context_t *" con );
.sp
.BI "int setfscreatecon(security_context_t "context );
.sp
.BI "int setfscreatecon_raw(security_context_t "context );
.
.SH "DESCRIPTION"
.BR getfscreatecon ()
retrieves tha context used fo' bustin a freshly smoked up file system object.
This returned context should be freed with
.BR freecon (3)
if non-NULL.
.BR getfscreatecon ()
sets *con ta NULL if no fscreate context has been explicitly
set by tha program (i.e. rockin tha default policy behavior).

.BR setfscreatecon ()
sets tha context used fo' bustin a freshly smoked up file system object.
NULL can be passed to
.BR setfscreatecon ()
to reset ta tha default policy behavior.
Da fscreate context be automatically reset afta tha next
.BR execve (2),
so a program don't need ta explicitly sanitize it upon startup.

.BR setfscreatecon ()
can be applied prior ta library
functions dat internally big-ass up a file creation,
in order ta set a file context on tha objects.

.BR getfscreatecon_raw ()
and
.BR setfscreatecon_raw ()
behave identically ta they non-raw counterparts but do not big-ass up context
translation.

.B Note:
Signal handlezs dat big-ass up a
.BR setfscreatecon ()
must take care to
save, reset, n' restore tha fscreate context ta avoid unexpected behavior.
.
.SH "RETURN VALUE"
On error \-1 is returned.
On success 0 is returned.
.
.SH "SEE ALSO"
.BR selinux "(8), " freecon "(3), " getcon "(3), " getexeccon "(3)"
