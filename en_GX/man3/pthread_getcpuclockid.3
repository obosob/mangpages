.\" Copyright (c) 2009 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_GETCPUCLOCKID 3 2009-02-08 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_getcpuclockid \- retrieve ID of a threadz CPU time clock
.SH SYNOPSIS
.nf
.B #include <pthread.h>
.B #include <time.h>

.BI "int pthread_getcpuclockid(pthread_t " thread ", clockid_t *" clock_id);
.sp
Compile n' link wit \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_getcpuclockid ()
function returns tha clock ID fo' tha CPU time clock of tha thread
.IR thread .
.\" Da clockid is constructed as bigs up:
.\" *clockid = CLOCK_THREAD_CPUTIME_ID | (pd->tid << CLOCK_IDFIELD_SIZE)
.\" where CLOCK_IDFIELD_SIZE is 3.
.SH RETURN VALUE
On success, dis function returns 0;
on error, it returns a nonzero error number.
.SH ERRORS
.TP
.B ENOENT
.\" CLOCK_THREAD_CPUTIME_ID not defined
Per-thread CPU time clocks is not supported by tha system.
.\"
.\" Lookin at nptl/pthread_getcpuclockid.c a ERANGE error would
.\" be possible if kernel thread IDs took mo' than 29 bits (which
.\" they currently cannot).
.TP
.B ESRCH
No thread wit tha ID
.I thread
could be found.
.SH VERSIONS
This function be available up in glibc since version 2.2.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
When
.I thread
refers ta tha callin thread,
this function returns a identifier dat refers ta tha same clock
manipulated by
.BR clock_gettime (2)
and
.BR clock_settime (2)
when given tha clock ID
.BR CLOCK_THREAD_CPUTIME_ID .
.SH EXAMPLE
Da program below creates a thread n' then uses
.BR clock_gettime (2)
to retrieve tha total process CPU time,
and tha per-thread CPU time consumed by tha two threads.
Da followin shell session shows a example run:
.in +4n
.nf
$ \fB./a.out\fP
Main thread chillin
Subthread startin infinite loop
Main thread consumin some CPU time...
Process total CPU time:    1.368
Main thread CPU time:      0.376
Subthread CPU time:        0.992
.fi
.in
.SS Program source
\&
.nf
/* Link wit "\-lrt" */

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>
#include <errno.h>

#define handle_error(msg) \\
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void *
thread_start(void *arg)
{
    printf("Subthread startin infinite loop\\n");
    fo' (;;)
        continue;
}

static void
pclock(char *msg, clockid_t cid)
{
    struct timespec ts;

    printf("%s", msg);
    if (clock_gettime(cid, &ts) == \-1)
        handle_error("clock_gettime");
    printf("%4ld.%03ld\\n", ts.tv_sec, ts.tv_nsec / 1000000);
}

int
main(int argc, char *argv[])
{
    pthread_t thread;
    clockid_t cid;
    int j, s;

    s = pthread_create(&thread, NULL, thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    printf("Main thread chillin\\n");
    chill(1);

    printf("Main thread consumin some CPU time...\\n");
    fo' (j = 0; j < 2000000; j++)
        getppid();

    pclock("Process total CPU time: ", CLOCK_PROCESS_CPUTIME_ID);

    s = pthread_getcpuclockid(pthread_self(), &cid);
    if (s != 0)
        handle_error_en(s, "pthread_getcpuclockid");
    pclock("Main thread CPU time:   ", cid);

    /* Da precedin 4 linez of code could done been replaced by:
       pclock("Main thread CPU time:   ", CLOCK_THREAD_CPUTIME_ID); */

    s = pthread_getcpuclockid(thread, &cid);
    if (s != 0)
        handle_error_en(s, "pthread_getcpuclockid");
    pclock("Subthread CPU time: 1    ", cid);

    exit(EXIT_SUCCESS);         /* Terminates both threadz */
}
.fi
.SH SEE ALSO
.BR clock_gettime (2),
.BR clock_settime (2),
.BR timer_create (2),
.BR clock_getcpuclockid (3),
.BR pthread_self (3),
.BR pthreadz (7),
.BR time (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
