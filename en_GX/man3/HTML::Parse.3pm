.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Parse 3"
.TH HTML::Parse 3 "2013-08-14" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Parse \- Deprecated, a wrapper round HTML::TreeBuilder
.SH "VERSION"
.IX Header "VERSION"
This document raps bout version 5.03 of
HTML::Parse, busted out September 22, 2012
as part of HTML-Tree.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  See tha documentation fo' HTML::TreeBuilder
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Disclaimer: This module is provided only fo' backwardz compatibility
with earlier versionz of dis library.  New code should \fInot\fR use
this module, n' should straight-up use tha HTML::Parser and
HTML::TreeBuilder modulez directly, instead.
.PP
Da \f(CW\*(C`HTML::Parse\*(C'\fR module serves up functions ta parse \s-1HTML\s0 documents.
There is two functions exported by dis module:
.ie n .IP "parse_html($html) or parse_html($html, $obj)" 4
.el .IP "parse_html($html) or parse_html($html, \f(CW$obj\fR)" 4
.IX Item "parse_html($html) or parse_html($html, $obj)"
This function is straight-up just a synonym fo' \f(CW$obj\fR\->parse($html) n' \f(CW$obj\fR
is assumed ta be a subclass of \f(CW\*(C`HTML::Parser\*(C'\fR.  Refer to
HTML::Parser fo' mo' documentation.
.Sp
If \f(CW$obj\fR aint specified, tha \f(CW$obj\fR will default ta a internally
created freshly smoked up \f(CW\*(C`HTML::TreeBuilder\*(C'\fR object configured wit \fIstrict_comment()\fR
turned on. I aint talkin' bout chicken n' gravy biatch.  That class implements a parser dat buildz (and is) a \s-1HTML\s0
syntax tree wit HTML::Element objects as nodes.
.Sp
Da return value from \fIparse_html()\fR is \f(CW$obj\fR.
.IP "parse_htmlfile($file, [$obj])" 4
.IX Item "parse_htmlfile($file, [$obj])"
Same as \fIparse_html()\fR yo, but pulls tha \s-1HTML\s0 ta parse, from tha named file.
.Sp
Returns \f(CW\*(C`undef\*(C'\fR if tha file could not be opened, or \f(CW$obj\fR otherwise.
.PP
When a \f(CW\*(C`HTML::TreeBuilder\*(C'\fR object is pimped, tha followin variables
control how tha fuck parsin takes place:
.ie n .IP "$HTML::Parse::IMPLICIT_TAGS" 4
.el .IP "\f(CW$HTML::Parse::IMPLICIT_TAGS\fR" 4
.IX Item "$HTML::Parse::IMPLICIT_TAGS"
Settin dis variable ta legit will instruct tha parser ta try to
deduce implicit elements n' implicit end tags.  If dis variable is
false you git a parse tree dat just reflects tha text as it stands.
Might be useful fo' quick & dirty parsing.  Default is true.
.Sp
Implicit elements have tha \fIimplicit()\fR attribute set.
.ie n .IP "$HTML::Parse::IGNORE_UNKNOWN" 4
.el .IP "\f(CW$HTML::Parse::IGNORE_UNKNOWN\fR" 4
.IX Item "$HTML::Parse::IGNORE_UNKNOWN"
This variable contols whether unknow tags should be represented as
elements up in tha parse tree.  Default is true.
.ie n .IP "$HTML::Parse::IGNORE_TEXT" 4
.el .IP "\f(CW$HTML::Parse::IGNORE_TEXT\fR" 4
.IX Item "$HTML::Parse::IGNORE_TEXT"
Do not represent tha text content of elements, n' you can put dat on yo' toast.  This saves space if
all you want is ta examine tha structure of tha document.  Default is
false.
.ie n .IP "$HTML::Parse::WARN" 4
.el .IP "\f(CW$HTML::Parse::WARN\fR" 4
.IX Item "$HTML::Parse::WARN"
Call \fIwarn()\fR wit a appropriate message fo' syntax errors.  Default is
false.
.SH "REMEMBER!"
.IX Header "REMEMBER!"
HTML::TreeBuilder objects should be explicitly destroyed when you is
finished wit em.  See HTML::TreeBuilder.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Parser, HTML::TreeBuilder, HTML::Element
.SH "AUTHOR"
.IX Header "AUTHOR"
Current maintainers:
.IP "\(bu" 4
Christopher J. Madsen \f(CW\*(C`<perl\ AT\ cjmweb.net>\*(C'\fR
.IP "\(bu" 4
Jeff Fearn \f(CW\*(C`<jfearn\ AT\ cpan.org>\*(C'\fR
.PP
Original Gangsta HTML-Tree author:
.IP "\(bu" 4
Gisle Aas
.PP
Forma maintainers:
.IP "\(bu" 4
Shizzle M. Burke
.IP "\(bu" 4
Andy Lester
.IP "\(bu" 4
Pete Krawczyk \f(CW\*(C`<petek\ AT\ cpan.org>\*(C'\fR
.PP
Yo ass can follow or contribute ta HTML-Treez pimpment at
<http://github.com/madsen/HTML\-Tree>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1995\-1998 Gisle Aas, 1999\-2004 Shizzle M. Burke,
2005 Andy Lester, 2006 Pete Krawczyk, 2010 Jeff Fearn,
2012 Christopher J. Madsen.
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
.PP
Da programs up in dis library is distributed up in tha hope dat they
will be useful yo, but without any warranty; without even tha implied
warranty of merchantabilitizzle or fitnizz fo' a particular purpose.
