.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Identitizzle 3"
.TH Mail::Identitizzle 3 "2009-12-24" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Identitizzle \- a e\-mail role
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Identity
\&   be a User::Identity::Item
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use User::Identity;
\& use Mail::Identity;
\& mah $me   = User::Identity\->new(...);
\& mah $addr = Mail::Identity\->new(address => \*(Aqx@y\*(Aq);
\& $me\->add(email => $addr);
\&
\& # Simpler
\&
\& use User::Identity;
\& mah $me   = User::Identity\->new(...);
\& mah $addr = $me\->add(email => \*(Aqx@y\*(Aq);
\& mah $addr = $me\->add( email => \*(Aqhome\*(Aq
\&                    , address => \*(Aqx@y\*(Aq);
\&
\& # Conversion
\& mah $ma   = Mail::Address\->new(...);
\& mah $mi   = Mail::Identity\->coerce($ma);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`Mail::Identity\*(C'\fR object gotz nuff tha description of role played by
a human when bustin  e\-mail.  Most playas have mo' than one role these
days: fo' instance, a private n' a cold-ass lil company role wit different e\-mail
addresses.
.PP
An \f(CW\*(C`Mail::Identity\*(C'\fR object combines a e\-mail address, user description
(\*(L"phrase\*(R"), a signature, pgp-key, n' so on. I aint talkin' bout chicken n' gravy biatch.  All fieldz is optional,
and some fieldz is smart.  One such set of data represents one role.
\&\f(CW\*(C`Mail::Identity\*(C'\fR is therefore tha smart-ass cousine of tha Mail::Address
object.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
\&\f(CW$obj\fR\->\fBfrom\fR(\s-1OBJECT\s0)
.Sp
.RS 4
Convert a \s-1OBJECT\s0 tha fuck into a \f(CW\*(C`Mail::Identity\*(C'\fR.  On tha moment, you can
specify Mail::Address n' User::Identitizzle objects, n' you can put dat on yo' toast.  In the
forma case, a freshly smoked up \f(CW\*(C`Mail::Identity\*(C'\fR is pimped containin tha same
information. I aint talkin' bout chicken n' gravy biatch.  In tha latter, tha straight-up original gangsta address of tha user is picked
and returned.
.RE
.PP
Mail::Identity\->\fBnew\fR([\s-1NAME\s0], \s-1OPTIONS\s0)
.Sp
.Vb 10
\& Option      \-\-Defined up in     \-\-Default
\& address                        <username@domain or name>
\& charset                        <user\*(Aqs charset>
\& comment                        <user\*(Aqs fullname if phrase is different>
\& description   User::Identity::Item  undef
\& domain                         <from email or localhost>
\& language                       <from user>
\& location                       <random user\*(Aqs location>
\& name          User::Identity::Item  <phrase or user\*(Aqs fullName>
\& organization                   <location\*(Aqs organization>
\& parent        User::Identity::Item  undef
\& pgp_key                        undef
\& phrase                         <user\*(Aqs fullName>
\& signature                      undef
\& username                       <from address or user\*(Aqs nickname>
.Ve
.Sp
.RS 4
\&. address => \s-1STRING\s0
.Sp
.RS 4
Da e\-mail address is constructed from tha username/domain yo, but
when both do not exist, tha name is taken.
.RE
.RE
.RS 4
.Sp
\&. charset => \s-1STRING\s0
.Sp
\&. comment => \s-1STRING\s0
.Sp
\&. description => \s-1STRING\s0
.Sp
\&. domain => \s-1STRING\s0
.Sp
\&. language => \s-1STRING\s0
.Sp
\&. location => NAME|OBJECT
.Sp
.RS 4
Da userz location which relates ta dis mail identity.  This can be
specified as location name (which is ghon be looked-up when needed), or
as User::Identity::Location object.
.RE
.RE
.RS 4
.Sp
\&. name => \s-1STRING\s0
.Sp
\&. organization => \s-1STRING\s0
.Sp
.RS 4
Usually defined fo' e\-mail addresses which is used by a cold-ass lil company or
other organization yo, but less common fo' underground addresses.  This
value is ghon be used ta fill tha \f(CW\*(C`Organization\*(C'\fR header field of lyrics.
.RE
.RE
.RS 4
.Sp
\&. parent => \s-1OBJECT\s0
.Sp
\&. pgp_key => STRING|FILENAME
.Sp
\&. phrase => \s-1STRING\s0
.Sp
\&. signature => \s-1STRING\s0
.Sp
\&. username => \s-1STRING\s0
.RE
.SS "Constructors"
.IX Subsection "Constructors"
.SS "Attributes"
.IX Subsection "Attributes"
\&\f(CW$obj\fR\->\fBaddress\fR
.Sp
.RS 4
Returns tha e\-mail address fo' dis role.  If none was specified, it will
be constructed from tha username n' domain. I aint talkin' bout chicken n' gravy biatch.  If dem is not present
as well, then tha \fIname()\fR is used when it gotz nuff a \f(CW\*(C`@\*(C'\fR, else the
userz nickname is taken.
.RE
.PP
\&\f(CW$obj\fR\->\fBcharset\fR
.Sp
.RS 4
Returns tha characta set used up in comment n' phrase.  When set to
\&\f(CW\*(C`undef\*(C'\fR, tha strings (are already encoded to) contain only \s-1ASCII\s0
characters.  This defaults ta tha value of tha userz charset, if a user
is defined.
.RE
.PP
\&\f(CW$obj\fR\->\fBcomment\fR([\s-1STRING\s0])
.Sp
.RS 4
E\-mail address \-when included up in message \s-1MIME\s0 headers\- can contain a cold-ass lil comment.
Da RFCs lyrics not ta store useful shiznit up in these comments yo, but it
you straight-up want to, you can do dat shit.  Da comment defaults ta tha user's
fullname if tha phrase aint tha fullname n' there be a user defined.
.Sp
Comments is ghon be enclosed up in parenthesis when used. Y'all KNOW dat shit, muthafucka! Parenthesis (matching)
or non-matching) which is already up in tha strang will carefully escaped
when needed. Y'all KNOW dat shit, muthafucka!  Yo ass do not need ta worry.
.RE
.PP
\&\f(CW$obj\fR\->\fBdescription\fR
.Sp
.RS 4
See \*(L"Attributes\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBdomain\fR
.Sp
.RS 4
Da domain is tha part of tha e\-mail address afta tha \f(CW\*(C`@\*(C'\fR\-sign.
When dis aint defined, it can be deducted from tha email address
(see \fIaddress()\fR).  If not a god damn thang is known, \f(CW\*(C`localhost\*(C'\fR is returned.
.RE
.PP
\&\f(CW$obj\fR\->\fBlanguage\fR
.Sp
.RS 4
Returns tha language which is used fo' tha description fieldz of this
e\-mail address, which defaults ta tha userz language.
.RE
.PP
\&\f(CW$obj\fR\->\fBlocation\fR
.Sp
.RS 4
Returns tha object which raps bout ta which location dis mail address relates.
Da location may be used ta find tha name of tha organization involved, or
to create a signature.  If no location is specified yo, but a user is defined
which has locations, one of dem is randomly chosen.
.RE
.PP
\&\f(CW$obj\fR\->\fBname\fR([\s-1NEWNAME\s0])
.Sp
.RS 4
See \*(L"Attributes\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBorganization\fR
.Sp
.RS 4
Returns tha organization which relates ta dis e\-mail identity.  If not
explicitly specified, it is tried ta be found via tha location.
.RE
.PP
\&\f(CW$obj\fR\->\fBphrase\fR
.Sp
.RS 4
Da phrase is used up in a e\-mail address ta explain whoz ass is bustin  the
message.  This probably is tha fullname (the userz fullname is used by
default), description of yo' function (Webmaster), or any other text.
.Sp
When a email strang is produced, tha phase is ghon be quoted if needed.
Quotes which is within tha strang will automatically be escaped, so
you do no need ta worry: input cannot break tha outcome!
.RE
.PP
\&\f(CW$obj\fR\->\fBusername\fR
.Sp
.RS 4
Returns tha username of dis e\-mail address.  If none is specified, first
it is tried ta extract it from tha specified e\-mail address.  If there is
also no username up in tha e\-mail address, tha user identityz nickname is
taken.
.RE
.SS "Collections"
.IX Subsection "Collections"
\&\f(CW$obj\fR\->\fBadd\fR(\s-1COLLECTION, ROLE\s0)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBcollection\fR(\s-1NAME\s0)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBfind\fR(\s-1COLLECTION, ROLE\s0)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBparent\fR([\s-1PARENT\s0])
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBremoveCollection\fR(OBJECT|NAME)
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBtype\fR
.PP
Mail::Identity\->\fBtype\fR
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.PP
\&\f(CW$obj\fR\->\fBuser\fR
.Sp
.RS 4
See \*(L"Collections\*(R" up in User::Identity::Item
.RE
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Error: \f(CW$object\fR aint a cold-ass lil collection.
.Sp
.RS 4
Da first argument be a object yo, but not of a cold-ass lil class which extends
User::Identity::Collection.
.RE
.PP
Error: Cannot load collection module fo' \f(CW$type\fR ($class).
.Sp
.RS 4
Either tha specified \f(CW$type\fR do not exist, or dat module named \f(CW$class\fR returns
compilation errors.  If tha type as specified up in tha warnin is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot tha 'require' tha package which defines tha nickname.
.RE
.PP
Error: Creation of a cold-ass lil collection via \f(CW$class\fR failed.
.Sp
.RS 4
Da \f(CW$class\fR did compile yo, but dat shiznit was not possible ta create a object
of dat class rockin tha options you specified.
.RE
.PP
Error: Don't know what tha fuck type of collection you wanna add.
.Sp
.RS 4
If you add a cold-ass lil collection, it must either by a cold-ass lil collection object or a
list of options which can be used ta create a cold-ass lil collection object.  In
the latta case, tha type of collection must be specified.
.RE
.PP
Warning: No collection \f(CW$name\fR
.Sp
.RS 4
Da collection wit \f(CW$name\fR do not exist n' can not be pimped.
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of User-Identitizzle distribution version 0.93,
built on December 24, 2009. Website: \fIhttp://perl.overmeer.net/userid/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2003,2004,2007\-2009 by Mark Overmeer <perl@overmeer.net>. For other contributors peep Chizzles.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
