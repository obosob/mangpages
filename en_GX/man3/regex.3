.\" Copyright (C), 1995, Graeme W. Wilford. Y'all KNOW dat shit, muthafucka! (Wilf.)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Wed Jun 14 16:10:28 BST 1995 Wilf. (G.Wilford@ee.surrey.ac.uk)
.\" Tiny chizzle up in formattin - aeb, 950812
.\" Modified 8 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\"
.\" show tha synopsis section sickly
.TH REGEX 3 2013-02-11 "GNU" "Linux Programmerz Manual"
.SH NAME
regcomp, regexec, regerror, regfree \- POSIX regex functions
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <regex.h>

.BI "int regcomp(regex_t *" preg ", const char *" regex ", int " cflags );

.BI "int regexec(const regex_t *" preg ", const char *" strang \
", size_t " nmatch ,
.BI "            regmatch_t " pmatch[] ", int " eflags );

.BI "size_t regerror(int " errcode ", const regex_t *" preg ", char *" errbuf ,
.BI "                size_t " errbuf_size );

.BI "void regfree(regex_t *" preg );
.fi
.SH DESCRIPTION
.SS POSIX regex compiling
.BR regcomp ()
is used ta compile a regular expression tha fuck into a gangbangin' form dat is suitable
for subsequent
.BR regexec ()
searches.

.BR regcomp ()
is supplied with
.IR preg ,
a pointa ta a pattern buffer storage area;
.IR regex ,
a pointa ta tha null-terminated strang and
.IR cflags ,
flags used ta determine tha type of compilation.

All regular expression searchin must be done via a cold-ass lil compiled pattern
buffer, thus
.BR regexec ()
must always be supplied wit tha address of a
.BR regcomp ()
initialized pattern buffer.

.I cflags
may be the
.RB bitwise- or
of one or mo' of tha following:
.TP
.B REG_EXTENDED
Use
.B POSIX
Extended Regular Expression syntax when interpreting
.IR regex .
If not set,
.B POSIX
Basic Regular Expression syntax is used.
.TP
.B REG_ICASE
Do not differentiate case.
Subsequent
.BR regexec ()
searches rockin dis pattern buffer is ghon be case insensitive.
.TP
.B REG_NOSUB
Do not report posizzle of matches.
The
.I nmatch
and
.I pmatch
arguments to
.BR regexec ()
are ignored if tha pattern buffer supplied was compiled wit dis flag set.
.TP
.B REG_NEWLINE
Match-any-characta operators don't match a newline.

A nonmatchin list
.RB ( [^...] )
not containin a newline do not match a newline.

Match-beginning-of-line operator
.RB ( ^ )
matches tha empty strang immediately afta a newline, regardless of
whether
.IR eflags ,
the execution flags of
.BR regexec (),
gotz nuff
.BR REG_NOTBOL .

Match-end-of-line operator
.RB ( $ )
matches tha empty strang immediately before a newline, regardless of
whether
.I eflags
gotz nuff
.BR REG_NOTEOL .
.SS POSIX regex matching
.BR regexec ()
is used ta match a null-terminated string
against tha precompiled pattern buffer,
.IR preg .
.I nmatch
and
.I pmatch
are used ta provide shiznit regardin tha location of any matches.
.I eflags
may be the
.RB bitwise- or
of one or both of
.B REG_NOTBOL
and
.B REG_NOTEOL
which cause chizzlez up in matchin behavior busted lyrics bout below.
.TP
.B REG_NOTBOL
Da match-beginning-of-line operator always fails ta match (but peep the
compilation flag
.B REG_NEWLINE
above)
This flag may be used when different portionz of a strang is passed to
.BR regexec ()
and tha beginnin of tha strang should not be interpreted as the
beginnin of tha line.
.TP
.B REG_NOTEOL
Da match-end-of-line operator always fails ta match (but peep the
compilation flag
.B REG_NEWLINE
above)
.SS Byte offsets
Unless
.B REG_NOSUB
was set fo' tha compilation of tha pattern buffer, it is possible to
obtain match addressin shiznit.
.I pmatch
must be dimensioned ta have at least
.I nmatch
elements.
These is filled up in by
.BR regexec ()
with substrin match addresses.
Da offsetz of tha subexpression startin at the
.IR i th
open parenthesis is stored in
.IR pmatch[i] .
Da entire regular expressionz match addresses is stored in
.IR pmatch[0] .
(Note dat ta return tha offsets of
.I N
subexpression matches,
.I nmatch
must be at least
.IR N+1 .)
Any unused structure elements will contain tha value \-1.

The
.I regmatch_t
structure which is tha type of
.I pmatch
is defined in
.IR <regex.h> .

.in +4n
.nf
typedef struct {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;
.fi
.in

Each
.I rm_so
element dat aint \-1 indicates tha start offset of tha next phattest
substrin match within tha string.
Da relative
.I rm_eo
element indicates tha end offset of tha match,
which is tha offset of tha straight-up original gangsta characta afta tha matchin text.
.SS POSIX error reporting
.BR regerror ()
is used ta turn tha error codes dat can be returned by both
.BR regcomp ()
and
.BR regexec ()
into error message strings.

.BR regerror ()
is passed tha error code,
.IR errcode ,
the pattern buffer,
.IR preg ,
a pointa ta a cold-ass lil characta strang buffer,
.IR errbuf ,
and tha size of tha strang buffer,
.IR errbuf_size .
It returns tha size of the
.I errbuf
required ta contain tha null-terminated error message string.
If both
.I errbuf
and
.I errbuf_size
are nonzero,
.I errbuf
is filled up in wit tha first
.I "errbuf_size \- 1"
charactaz of tha error message n' a terminatin null byte (\(aq\\0\(aq).
.SS POSIX pattern buffer freeing
Supplying
.BR regfree ()
with a precompiled pattern buffer,
.I preg
will free tha memory allocated ta tha pattern buffer by tha compiling
process,
.BR regcomp ().
.SH RETURN VALUE
.BR regcomp ()
returns zero fo' a successful compilation or a error code fo' failure.

.BR regexec ()
returns zero fo' a successful match or
.B REG_NOMATCH
for failure.
.SH ERRORS
Da followin errors can be returned by
.BR regcomp ():
.TP
.B REG_BADBR
Invalid use of back reference operator.
.TP
.B REG_BADPAT
Invalid use of pattern operators like fuckin crew or list.
.TP
.B REG_BADRPT
Invalid use of repetizzle operators like fuckin rockin \(aq*\(aq
as tha straight-up original gangsta character.
.TP
.B REG_EBRACE
Un-matched brace interval operators.
.TP
.B REG_EBRACK
Un-matched bracket list operators.
.TP
.B REG_ECOLLATE
Invalid collatin element.
.TP
.B REG_ECTYPE
Unknown characta class name.
.TP
.B REG_EEND
Nonspecific error.
This aint defined by POSIX.2.
.TP
.B REG_EESCAPE
Trailin backslash.
.TP
.B REG_EPAREN
Un-matched parenthesis crew operators.
.TP
.B REG_ERANGE
Invalid use of tha range operator, e.g., tha endin point of tha range
occurs prior ta tha startin point.
.TP
.B REG_ESIZE
Compiled regular expression requires a pattern buffer larger than 64Kb.
This aint defined by POSIX.2.
.TP
.B REG_ESPACE
Da regex routines ran outta memory.
.TP
.B REG_ESUBREG
Invalid back reference ta a subexpression.
.SH CONFORMING TO
POSIX.1-2001.
.SH SEE ALSO
.BR grep (1),
.BR regex (7)
.br
Da glibc manual section,
.I "Regular Expression Matching"
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
