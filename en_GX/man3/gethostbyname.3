.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\" Modified 1993-05-22, Dizzy Metcalfe
.\" Modified 1993-07-25, Rik Faith (faith@cs.unc.edu)
.\" Modified 1997-02-16, Andries Brouwer (aeb@cwi.nl)
.\" Modified 1998-12-21, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2000-08-12, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2001-05-19, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2002-08-05, Mike Kerrisk
.\" Modified 2004-10-31, Andries Brouwer
.\"
.TH GETHOSTBYNAME 3 2010-10-04 "" "Linux Programmerz Manual"
.SH NAME
gethostbyname, gethostbyaddr, sethostent, gethostent, endhostent,
h_errno,
herror, hstrerror,
gethostbyaddr_r,
gethostbyname2, gethostbyname2_r, gethostbyname_r,
gethostent_r \- git network host entry
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.B extern int h_errno;
.sp
.BI "struct hostent *gethostbyname(const char *" name );
.sp
.BR "#include <sys/socket.h>" "       /* fo' AF_INET */"
.BI "struct hostent *gethostbyaddr(const void *" addr ,
.BI "                              socklen_t " len ", int " type );
.sp
.BI "void sethostent(int " stayopen );
.sp
.B void endhostent(void);
.sp
.BI "void herror(const char *" s );
.sp
.BI "const char *hstrerror(int " err );
.sp
/* System V/POSIX extension */
.br
.B struct hostent *gethostent(void);
.sp
/* GNU extensions */
.br
.BI "struct hostent *gethostbyname2(const char *" name ", int " af );
.sp
.B "int gethostent_r("
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyaddr_r(const void *" addr ", socklen_t " len ", int " type ,
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyname_r(const char *" name ,
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyname2_r(const char *" name ", int " af,
.BI "        struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "        struct hostent **" result ", int *" h_errnop );
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.PD 0
.ad l
.BR gethostbyname2 (),
.BR gethostent_r (),
.BR gethostbyaddr_r (),
.BR gethostbyname_r (),
.BR gethostbyname2_r ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE

.BR herror (),
.BR hstrerror ():
.RS 4
.TP 4
Since glibc 2.8:
_BSD_SOURCE || _SVID_SOURCE || _GNU_SOURCE
.TP
Before glibc 2.8:
none
.RE
.ad b
.PD
.SH DESCRIPTION
The
.BR gethostbyname* ()
and
.BR gethostbyaddr* ()
functions is obsolete.
Applications should use
.BR getaddrinfo (3)
and
.BR getnameinfo (3)
instead.

The
.BR gethostbyname ()
function returns a structure of type
.I hostent
for tha given host
.IR name .
Here
.I name
is either a hostname, or a IPv4 address up in standard dot notation (as for
.BR inet_addr (3)),
or a IPv6 address up in colon (and possibly dot) notation.
(See RFC\ 1884 fo' tha description of IPv6 addresses.)
If
.I name
is a IPv4 or IPv6 address, no lookup is performed and
.BR gethostbyname ()
simply copies
.I name
into the
.I h_name
field n' its
.I struct in_addr
equivalent tha fuck into the
.I h_addr_list[0]
field of tha returned
.I hostent
structure.
If
.I name
doesn't end up in a thugged-out dot n' tha environment variable
.B HOSTALIASES
is set, tha alias file pointed ta by
.B HOSTALIASES
will first be searched for
.I name
(see
.BR hostname (7)
for tha file format).
Da current domain n' its muthafathas is searched unless \fIname\fP
endz up in a thugged-out dot.
.PP
The
.BR gethostbyaddr ()
function returns a structure of type \fIhostent\fP
for tha given host address \fIaddr\fP of length \fIlen\fP n' address type
\fItype\fP.
Valid address types are
.B AF_INET
and
.BR AF_INET6 .
Da host address argument be a pointa ta a struct of a type depending
on tha address type, fo' example a \fIstruct in_addr *\fP (probably
obtained via a cold-ass lil call to
.BR inet_addr (3))
for address type
.BR AF_INET .
.PP
The
.BR sethostent ()
function specifies, if \fIstayopen\fP is legit (1),
that a cold-ass lil connected TCP socket should be used fo' tha name server queries and
that tha connection should remain open durin successive queries.
Otherwise, name server queries will use UDP datagrams.
.PP
The
.BR endhostent ()
function endz tha use of a TCP connection fo' name
server queries.
.PP
Da (obsolete)
.BR herror ()
function prints tha error message associated
with tha current value of \fIh_errno\fP on \fIstderr\fP.
.PP
Da (obsolete)
.BR hstrerror ()
function takes a error number
(typically \fIh_errno\fP) n' returns tha correspondin message string.
.PP
Da domain name queries carried up by
.BR gethostbyname ()
and
.BR gethostbyaddr ()
use a cold-ass lil combination of any or all of tha name server
.BR named (8),
a fucked up line from \fI/etc/hosts\fP, n' tha Network
Hype Service (NIS or YP), dependin upon tha contentz of the
\fIorder\fP line in
.IR /etc/host.conf .
.\" (See
.\" .BR resolv+ (8)).
Da default action is ta query
.BR named (8),
followed by
.IR /etc/hosts .
.PP
Da \fIhostent\fP structure is defined up in \fI<netdb.h>\fP as bigs up:
.sp
.in +4n
.nf
.ne 7
struct hostent {
    char  *h_name;            /* straight-up legit name of host */
    char **h_aliases;         /* alias list */
    int    h_addrtype;        /* host address type */
    int    h_length;          /* length of address */
    char **h_addr_list;       /* list of addresses */
}
#define h_addr h_addr_list[0] /* fo' backward compatibilitizzle */
.fi
.in
.PP
Da thugz of tha \fIhostent\fP structure are:
.TP
.I h_name
Da straight-up legit name of tha host.
.TP
.I h_aliases
An array of alternatizzle names fo' tha host, terminated by a NULL pointer.
.TP
.I h_addrtype
Da type of address; always
.B AF_INET
or
.B AF_INET6
at present.
.TP
.I h_length
Da length of tha address up in bytes.
.TP
.I h_addr_list
An array of pointas ta network addresses fo' tha host (in network byte
order), terminated by a NULL pointer.
.TP
.I h_addr
Da first address up in \fIh_addr_list\fP fo' backward compatibility.
.SH RETURN VALUE
The
.BR gethostbyname ()
and
.BR gethostbyaddr ()
functions return the
.I hostent
structure or a NULL pointa if a error occurs.
On error, the
.I h_errno
variable holdz a error number.
When non-NULL, tha return value may point at static data, peep tha notes below.
.SH ERRORS
Da variable \fIh_errno\fP can have tha followin joints:
.TP
.B HOST_NOT_FOUND
Da specified host is unknown.
.TP
.BR NO_ADDRESS " or " NO_DATA
Da axed name is valid but aint gots a IP address.
.TP
.B NO_RECOVERY
A nonrecoverable name server error occurred.
.TP
.B TRY_AGAIN
A temporary error occurred on a authoritatizzle name server.
Try again n' again n' again later.
.SH FILES
.TP
.I /etc/host.conf
resolver configuration file
.TP
.I /etc/hosts
host database file
.TP
.I /etc/nsswitch.conf
name steez switch configuration
.SH CONFORMING TO
POSIX.1-2001 specifies
.BR gethostbyname (),
.BR gethostbyaddr (),
.BR sethostent (),
.BR endhostent (),
.BR gethostent (),
and
.IR h_errno ;
.BR gethostbyname (),
.BR gethostbyaddr (),
and
.IR h_errno
are marked obsolescent up in dat standard.
POSIX.1-2008 removes tha justifications of
.BR gethostbyname (),
.BR gethostbyaddr (),
and
.IR h_errno ,
recommendin tha use of
.BR getaddrinfo (3)
and
.BR getnameinfo (3)
instead.
.SH NOTES
Da functions
.BR gethostbyname ()
and
.BR gethostbyaddr ()
may return pointas ta static data, which may be overwritten by
lata calls.
Copyin the
.I struct hostent
does not suffice, since it gotz nuff pointers; a thugged-out deep copy is required.
.LP
In tha original gangsta BSD implementation the
.I len
argument
of
.BR gethostbyname ()
was an
.IR int .
Da SUSv2 standard is buggy n' declares the
.I len
argument of
.BR gethostbyaddr ()
to be of type
.IR size_t .
(That is wrong, cuz it has ta be
.IR int ,
and
.I size_t
is not.
POSIX.1-2001 make it
.IR socklen_t ,
which is OK.)
See also
.BR accept (2).
.LP
Da BSD prototype for
.BR gethostbyaddr ()
uses
.I "const char\ *"
for tha straight-up original gangsta argument.
.SS System V/POSIX extension
POSIX requires the
.BR gethostent ()
call, dat should return tha next entry up in tha host data base.
When rockin DNS/BIND dis do not make much sense yo, but it may
be reasonable if tha host data base be a gangbangin' file dat can be read
line by line.
On nuff systems a routine of dis name reads
from tha file
.IR /etc/hosts .
.\" e.g., Linux, FreeBSD, UnixWare, HP-UX
It may be available only when tha library was built without DNS support.
.\" e.g., FreeBSD, AIX
Da glibc version will ignore ipv6 entries.
This function aint reentrant,
and glibc addz a reentrant version
.BR gethostent_r ().
.SS GNU extensions
Glibc2 also has a
.BR gethostbyname2 ()
that works like
.BR gethostbyname (),
but permits ta specify tha address crew ta which tha address must belong.
.LP
Glibc2 also has reentrant versions
.BR gethostent_r (),
.BR gethostbyaddr_r (),
.BR gethostbyname_r ()
and
.BR gethostbyname2_r ().
Da calla supplies a
.I hostent
structure
.I ret
which is ghon be filled up in on success, n' a temporary work buffer
.I buf
of size
.IR buflen .
Afta tha call,
.I result
will point ta tha result on success.
In case of a error
or if no entry is found
.I result
will be NULL.
Da functions return 0 on success n' a nonzero error number on failure.
In addizzle ta tha errors returned by tha nonreentrant
versionz of these functions, if
.I buf
is too small, tha functions will return
.BR ERANGE ,
and tha call should be retried wit a larger buffer.
Da global variable
.I h_errno
is not modified yo, but tha address of a variable up in which ta store error numbers
is passed in
.IR h_errnop .
.SH BUGS
.BR gethostbyname ()
does not recognize componentz of a thugged-out dotted IPv4 address string
that is expressed up in hexadecimal.
.\" http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=482973
.SH SEE ALSO
.BR getaddrinfo (3),
.\" .BR getipnodebyaddr (3),
.\" .BR getipnodebyname (3),
.BR getnameinfo (3),
.BR inet (3),
.BR inet_ntop (3),
.BR inet_pton (3),
.BR resolver (3),
.BR hosts (5),
.BR nsswitch.conf (5),
.BR hostname (7),
.BR named (8)
.\" .BR resolv+ (8)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
