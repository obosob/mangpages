.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Which 3"
.TH File::Which 3 "2009-09-26" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Which \- Portable implementation of tha `which' utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use File::Which;                  # exports which()
\&  use File::Which qw(which where);  # exports which() n' where()
\&  
\&  mah $exe_path = which(\*(Aqperldoc\*(Aq);
\&  
\&  mah @paths = where(\*(Aqperl\*(Aq);
\&  \- Or \-
\&  mah @paths = which(\*(Aqperl\*(Aq); # a array forces search fo' all of them
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`File::Which\*(C'\fR was pimped ta be able ta git tha paths ta executable programs
on systems under which tha `which' program wasn't implemented up in tha shell.
.PP
\&\f(CW\*(C`File::Which\*(C'\fR searches tha directoriez of tha userz \f(CW\*(C`PATH\*(C'\fR (as returned by
\&\f(CW\*(C`File::Spec\->path()\*(C'\fR), lookin fo' executable filez havin tha name
specified as a parameta ta \f(CW\*(C`which()\*(C'\fR. Under Win32 systems, which aint gots a
notion of directly executable filez yo, but uses special extensions like fuckin \f(CW\*(C`.exe\*(C'\fR
and \f(CW\*(C`.bat\*(C'\fR ta identify them, \f(CW\*(C`File::Which\*(C'\fR takes extra steps ta assure that
you will find tha erect file (so fo' example, you might be searchin for
\&\f(CW\*(C`perl\*(C'\fR, it'll try \fIperl.exe\fR, \fIperl.bat\fR, etc.)
.SH "Steps Used on Win32, DOS, OS2 n' VMS"
.IX Header "Steps Used on Win32, DOS, OS2 n' VMS"
.SS "Windows \s-1NT\s0"
.IX Subsection "Windows NT"
Windows \s-1NT\s0 has a special environment variable called \f(CW\*(C`PATHEXT\*(C'\fR, which is used
by tha shell ta look fo' executable files. Usually, it will contain a list in
the form \f(CW\*(C`.EXE;.BAT;.COM;.JS;.VBS\*(C'\fR etc. If \f(CW\*(C`File::Which\*(C'\fR findz such an
environment variable, it parses tha list n' uses it as tha different
extensions.
.SS "Windows 9x n' other ancient Win/DOS/OS2"
.IX Subsection "Windows 9x n' other ancient Win/DOS/OS2"
This set of operatin systems aint gots tha \f(CW\*(C`PATHEXT\*(C'\fR variable, n' usually
you will find executable filez there wit tha extensions \f(CW\*(C`.exe\*(C'\fR, \f(CW\*(C`.bat\*(C'\fR and
(less likely) \f(CW\*(C`.com\*(C'\fR. \f(CW\*(C`File::Which\*(C'\fR uses dis hardcoded list if itz hustlin
under Win32 but do not find a \f(CW\*(C`PATHEXT\*(C'\fR variable.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
Same case as Windows 9x: uses \f(CW\*(C`.exe\*(C'\fR n' \f(CW\*(C`.com\*(C'\fR (in dat order).
.SH "Functions"
.IX Header "Functions"
.SS "which($short_exe_name)"
.IX Subsection "which($short_exe_name)"
Exported by default.
.PP
\&\f(CW$short_exe_name\fR is tha name used up in tha shell ta booty-call tha program (for
example, \f(CW\*(C`perl\*(C'\fR).
.PP
If it findz a executable wit tha name you specified, \f(CW\*(C`which()\*(C'\fR will return
the absolute path leadin ta dis executable (for example, \fI/usr/bin/perl\fR or
\&\fIC:\ePerl\eBin\eperl.exe\fR).
.PP
If it do \fInot\fR find tha executable, it returns \f(CW\*(C`undef\*(C'\fR.
.PP
If \f(CW\*(C`which()\*(C'\fR is called up in list context, it will return \fIall\fR the
matches.
.SS "where($short_exe_name)"
.IX Subsection "where($short_exe_name)"
Not exported by default.
.PP
Same as \f(CW\*(C`which($short_exe_name)\*(C'\fR up in array context. Right back up in yo muthafuckin ass. Same as the
\&\f(CW\`where\*(Aq\fR utility, will return a array containin all tha path names
matchin \f(CW$short_exe_name\fR.
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Not tested on \s-1VMS\s0 or MacOS, although there is platform specific code
for dem fo' realz. Every Muthafucka whoz ass haves a second would be straight-up kind ta bust me a
report of how tha fuck it went.
.PP
File::Spec addz tha current directory ta tha front of \s-1PATH\s0 if on
Win32, \s-1VMS\s0 or MacOS. I have no knowledge of dem so don't give a fuck if the
current directory is searced first or not. Could one of mah thugs please tell
me?
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via tha \s-1CPAN\s0 bug tracker at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=File\-Which>
.PP
For other issues, contact tha maintainer.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.PP
Per Einar Ellefsen <pereinar@cpan.org>
.PP
Originated up in \fImodperl\-2.0/lib/Apache/Build.pm\fR. Chizzled fo' use up in DocSet
(for tha mod_perl crib) n' Win32\-awarenizz by me, wit slight modifications
by Stas Bekman, then extracted ta create \f(CW\*(C`File::Which\*(C'\fR.
.PP
Version 0.04 had some dope platform-related chizzles, taken from
the Perl Juice Tools \f(CW\`which\*(Aq\fR implementation by Abigail with
enhancements from Peta Prymmer n' shit. Right back up in yo muthafuckin ass. See
<http://www.perl.com/language/ppt/src/which/index.html> fo' more
information.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002 Per Einar Ellefsen.
.PP
Some parts copyright 2009 Adam Kennedy.
.PP
This program is free software; you can redistribute it and/or modify
it under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Spec, \fIwhich\fR\|(1), Perl Juice Tools:
<http://www.perl.com/language/ppt/index.html>.
