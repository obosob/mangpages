'\"
'\" Copyright (c) 1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 1998-1999 Scriptics Corporation
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_RegExpMatch 3 8.1 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_RegExpMatch, Tcl_RegExpCompile, Tcl_RegExpExec, Tcl_RegExpRange, Tcl_GetRegExpFromObj, Tcl_RegExpMatchObj, Tcl_RegExpExecObj, Tcl_RegExpGetInfo \- Pattern matchin wit regular expressions
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_RegExpMatchObj\fR(\fIinterp\fR, \fItextObj\fR, \fIpatObj\fR)
.sp
int
\fBTcl_RegExpMatch\fR(\fIinterp\fR, \fItext\fR, \fIpattern\fR)
.sp
Tcl_RegExp
\fBTcl_RegExpCompile\fR(\fIinterp\fR, \fIpattern\fR)
.sp
int
\fBTcl_RegExpExec\fR(\fIinterp\fR, \fIregexp\fR, \fItext\fR, \fIstart\fR)
.sp
void
\fBTcl_RegExpRange\fR(\fIregexp\fR, \fIindex\fR, \fIstartPtr\fR, \fIendPtr\fR)
.sp
Tcl_RegExp
\fBTcl_GetRegExpFromObj\fR(\fIinterp\fR, \fIpatObj\fR, \fIcflags\fR)
.sp
int
\fBTcl_RegExpExecObj\fR(\fIinterp\fR, \fIregexp\fR, \fItextObj\fR, \fIoffset\fR, \fInmatches\fR, \fIeflags\fR)
.sp
void
\fBTcl_RegExpGetInfo\fR(\fIregexp\fR, \fIinfoPtr\fR)
.fi
.SH ARGUMENTS
.AS Tcl_RegExpInfo *interp in/out
.AP Tcl_Interp *interp in
Tcl interpreta ta use fo' error reporting.  Da interpreta may be
NULL if no error reportin is desired.
.AP Tcl_Obj *textObj in/out
Refers ta tha object from which ta git tha text ta search.  The
internal representation of tha object may be converted ta a gangbangin' form that
can be efficiently searched.
.AP Tcl_Obj *patObj in/out
Refers ta tha object from which ta git a regular expression. I aint talkin' bout chicken n' gravy biatch. The
compiled regular expression is cached up in tha object.
.AP char *text in
Text ta search fo' a match wit a regular expression.
.AP "const char" *pattern in
Strin up in tha form of a regular expression pattern.
.AP Tcl_RegExp regexp in
Compiled regular expression. I aint talkin' bout chicken n' gravy biatch.  Must done been returned previously
by \fBTcl_GetRegExpFromObj\fR or \fBTcl_RegExpCompile\fR.
.AP char *start in
If \fItext\fR is just a portion of some other string, dis argument
identifies tha beginnin of tha larger string.
If it aint tha same as \fItext\fR, then no
.QW \fB^\fR
matches is ghon be allowed.
.AP int index in
Specifies which range is desired:  0 means tha range of tha entire
match, 1 or pimped outa means tha range dat matched a parenthesized
sub-expression.
.AP "const char" **startPtr out
Da address of tha straight-up original gangsta characta up in tha range is stored here, or
NULL if there is no such range.
.AP "const char" **endPtr out
Da address of tha characta just afta tha last one up in tha range
is stored here, or NULL if there is no such range.
.AP int cflags in
OR-ed combination of tha compilation flags \fBTCL_REG_ADVANCED\fR,
\fBTCL_REG_EXTENDED\fR, \fBTCL_REG_BASIC\fR, \fBTCL_REG_EXPANDED\fR,
\fBTCL_REG_QUOTE\fR, \fBTCL_REG_NOCASE\fR, \fBTCL_REG_NEWLINE\fR,
\fBTCL_REG_NLSTOP\fR, \fBTCL_REG_NLANCH\fR, \fBTCL_REG_NOSUB\fR, and
\fBTCL_REG_CANMATCH\fR. Right back up in yo muthafuckin ass. See below fo' mo' shiznit.
.AP int offset in
Da characta offset tha fuck into tha text where matchin should begin.
Da value of tha offset has no impact on \fB^\fR matches.  This
behavior is controlled by \fIeflags\fR.
.AP int nmatches in
Da number of matchin subexpressions dat should be remembered for
lata use.  If dis value is 0, then no subexpression match
information is ghon be computed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha value is \-1, then
all of tha matchin subexpressions is ghon be remembered. Y'all KNOW dat shit, muthafucka!  Any other
value is ghon be taken as tha maximum number of subexpressions to
remember.
.AP int eflags in
OR-ed combination of tha execution flags \fBTCL_REG_NOTBOL\fR and
\fBTCL_REG_NOTEOL\fR. Right back up in yo muthafuckin ass. See below fo' mo' shiznit.
.AP Tcl_RegExpInfo *infoPtr out
Da address of tha location where shiznit on some previous match
should be stored by \fBTcl_RegExpGetInfo\fR.
.BE
.SH DESCRIPTION
.PP
\fBTcl_RegExpMatch\fR determines whether its \fIpattern\fR argument
matches \fIregexp\fR, where \fIregexp\fR is interpreted
as a regular expression rockin tha rulez up in tha \fBre_syntax\fR
reference page. 
If there be a match then \fBTcl_RegExpMatch\fR returns 1.
If there is no match then \fBTcl_RegExpMatch\fR returns 0.
If a error occurs up in tha matchin process (e.g. \fIpattern\fR
is not a valid regular expression) then \fBTcl_RegExpMatch\fR
returns \-1 n' leaves a error message up in tha interpreta result.
\fBTcl_RegExpMatchObj\fR is similar ta \fBTcl_RegExpMatch\fR except it
operates on tha Tcl objects \fItextObj\fR n' \fIpatObj\fR instead of
UTF strings. 
\fBTcl_RegExpMatchObj\fR is generally mo' efficient than
\fBTcl_RegExpMatch\fR, so it is tha preferred intercourse.
.PP
\fBTcl_RegExpCompile\fR, \fBTcl_RegExpExec\fR, n' \fBTcl_RegExpRange\fR
provide lower-level access ta tha regular expression pattern matcher.
\fBTcl_RegExpCompile\fR compilez a regular expression strang into
the internal form used fo' efficient pattern matching.
Da return value be a token fo' dis compiled form, which can be
used up in subsequent calls ta \fBTcl_RegExpExec\fR or \fBTcl_RegExpRange\fR.
If a error occurs while compilin tha regular expression then
\fBTcl_RegExpCompile\fR returns NULL n' leaves a error message
in tha interpreta result.
Note:  tha return value from \fBTcl_RegExpCompile\fR is only valid
up ta tha next call ta \fBTcl_RegExpCompile\fR;  it aint safe to
retain these joints fo' long periodz of time.
.PP
\fBTcl_RegExpExec\fR executes tha regular expression pattern matcher.
It returns 1 if \fItext\fR gotz nuff a range of charactas that
match \fIregexp\fR, 0 if no match is found, and
\-1 if a error occurs.
In tha case of a error, \fBTcl_RegExpExec\fR leaves a error
message up in tha interpreta result.
When searchin a strang fo' multiple matchez of a pattern,
it is blingin ta distinguish between tha start of tha original
strin n' tha start of tha current search.
For example, when searchin fo' tha second occurrence of a
match, tha \fItext\fR argument might point ta tha character
just afta tha straight-up original gangsta match;  however, it is blingin fo' the
pattern matcher ta know dat dis aint tha start of tha entire string,
so dat it do not allow
.QW \fB^\fR
atoms up in tha pattern ta match.
Da \fIstart\fR argument serves up dis shiznit by pointing
to tha start of tha overall strang containin \fItext\fR.
\fIStart\fR is ghon be less than or equal ta \fItext\fR;  if it
is less than \fItext\fR then no \fB^\fR matches is ghon be allowed.
.PP
\fBTcl_RegExpRange\fR may be invoked afta \fBTcl_RegExpExec\fR
returns;  it serves up detailed shiznit bout what tha fuck ranges of
the strang matched what tha fuck partz of tha pattern.
\fBTcl_RegExpRange\fR returns a pair of pointas up in \fI*startPtr\fR
and \fI*endPtr\fR dat identify a range of charactas in
the source strang fo' da most thugged-out recent call ta \fBTcl_RegExpExec\fR.
\fIIndex\fR indicates which of nuff muthafuckin ranges is desired:
if \fIindex\fR is 0, shiznit is returned bout tha overall range
of charactas dat matched tha entire pattern;  otherwise,
information is returned bout tha range of charactas dat matched the
\fIindex\fR'th parenthesized subexpression within tha pattern.
If there is no range correspondin ta \fIindex\fR then NULL
is stored up in \fI*startPtr\fR n' \fI*endPtr\fR.
.PP
\fBTcl_GetRegExpFromObj\fR, \fBTcl_RegExpExecObj\fR, and
\fBTcl_RegExpGetInfo\fR is object intercourses dat provide da most thugged-out
direct control of Henry Spencerz regular expression library.  For
users dat need ta modify compilation n' execution options directly,
it is recommended dat you use these intercourses instead of callin the
internal regexp functions.  These intercourses handle tha detailz of UTF
to Unicode translations as well as providin improved performance
all up in cachin up in tha pattern n' strang objects.
.PP
\fBTcl_GetRegExpFromObj\fR attempts ta return a cold-ass lil compiled regular
expression from tha \fIpatObj\fR.  If tha object do not already
contain a cold-ass lil compiled regular expression it will attempt ta create one
from tha strang up in tha object n' assign it ta tha internal
representation of tha \fIpatObj\fR.  Da return value of dis function
iz of type \fBTcl_RegExp\fR.  Da return value be a token fo' this
compiled form, which can be used up in subsequent calls to
\fBTcl_RegExpExecObj\fR or \fBTcl_RegExpGetInfo\fR.  If a error
occurs while compilin tha regular expression then
\fBTcl_GetRegExpFromObj\fR returns NULL n' leaves a error message in
the interpreta result.  Da regular expression token can be used as
long as tha internal representation of \fIpatObj\fR refers ta the
compiled form.  Da \fIcflags\fR argument be a funky-ass bit-wise OR of
zero or mo' of tha followin flags dat control tha compilation of
\fIpatObj\fR:
.RS 2
.TP
\fBTCL_REG_ADVANCED\fR
Compile advanced regular expressions
.PQ ARE s .
This mode correspondz to
the aiiight regular expression syntax accepted by tha Tcl \fBregexp\fR and
\fBregsub\fR commands.
.TP
\fBTCL_REG_EXTENDED\fR
Compile extended regular expressions
.PQ ERE s .
This mode corresponds
to tha regular expression syntax recognized by Tcl 8.0 n' earlier
versions. 
.TP
\fBTCL_REG_BASIC\fR
Compile basic regular expressions
.PQ BRE s .
This mode corresponds
to tha regular expression syntax recognized by common Unix utilities
like \fBsed\fR n' \fBgrep\fR.  This is tha default if no flags are
specified.
.TP
\fBTCL_REG_EXPANDED\fR
Compile tha regular expression (basic, extended, or advanced) rockin an
expanded syntax dat allows comments n' whitespace.  This mode causes
non-backslashed non-bracket-expression white
space n' #-to-end-of-line comments ta be ignored.
.TP
\fBTCL_REG_QUOTE\fR
Compile a literal string, wit all charactas treated as ordinary characters.
.TP
\fBTCL_REG_NOCASE\fR
Compile fo' matchin dat ignores upper/lower case distinctions.
.TP
\fBTCL_REG_NEWLINE\fR
Compile fo' newline-sensitizzle matching.  By default, newline be a
completely ordinary characta wit no special meanin up in either
regular expressions or strings.  With dis flag,
.QW [^
bracket expressions and
.QW .
never match newline,
.QW ^
matches a empty string
afta any newline up in addizzle ta its aiiight function, and
.QW $
matches
an empty strang before any newline up in addizzle ta its aiiight function.
\fBREG_NEWLINE\fR is tha bit-wise OR of \fBREG_NLSTOP\fR and
\fBREG_NLANCH\fR.
.TP
\fBTCL_REG_NLSTOP\fR
Compile fo' partial newline-sensitizzle matching,
with tha behavior of
.QW [^
bracket expressions and
.QW .
affected yo, but not tha behavior of
.QW ^
and
.QW $ .
In dis mode,
.QW [^
bracket expressions and
.QW .
never match newline.
.TP
\fBTCL_REG_NLANCH\fR
Compile fo' inverse partial newline-sensitizzle matching,
with tha behavior of
.QW ^
and
.QW $
(the
.QW anchors )
affected yo, but not tha behavior of
.QW [^
bracket expressions and
.QW . .
In dis mode
.QW ^
matches a empty string
afta any newline up in addizzle ta its aiiight function, and
.QW $
matches
an empty strang before any newline up in addizzle ta its aiiight function.
.TP
\fBTCL_REG_NOSUB\fR
Compile fo' matchin dat reports only success or failure,
not what tha fuck was matched. Y'all KNOW dat shit, muthafucka!  This reduces compile overhead n' may improve
performance.  Subsequent calls ta \fBTcl_RegExpGetInfo\fR or
\fBTcl_RegExpRange\fR aint gonna report any match shiznit.
.TP
\fBTCL_REG_CANMATCH\fR
Compile fo' matchin dat reports tha potential ta complete a partial
match given mo' text (see below).
.RE
.PP
Only one of
\fBTCL_REG_EXTENDED\fR,
\fBTCL_REG_ADVANCED\fR,
\fBTCL_REG_BASIC\fR, and
\fBTCL_REG_QUOTE\fR may be specified.
.PP
\fBTcl_RegExpExecObj\fR executes tha regular expression pattern
matcher n' shit.  It returns 1 if \fIobjPtr\fR gotz nuff a range of characters
that match \fIregexp\fR, 0 if no match is found, n' \-1 if a error
occurs.  In tha case of a error, \fBTcl_RegExpExecObj\fR leaves an
error message up in tha interpreta result.  Da \fInmatches\fR value
indicates ta tha matcher how tha fuck nuff subexpressions iz of interest.  If
\fInmatches\fR is 0, then no subexpression match shiznit is
recorded, which may allow tha matcher ta make various optimizations.
If tha value is \-1, then all of tha subexpressions up in tha pattern are
remembered. Y'all KNOW dat shit, muthafucka!  If tha value be a positizzle integer, then only dat number
of subexpressions is ghon be remembered. Y'all KNOW dat shit, muthafucka!  Matchin begins at the
specified Unicode characta index given by \fIoffset\fR.  Unlike
\fBTcl_RegExpExec\fR, tha behavior of anchors aint affected by the
offset value.  Instead tha behavior of tha anchors is explicitly
controlled by tha \fIeflags\fR argument, which be a funky-ass bit-wise OR of
zero or mo' of tha followin flags:
.RS 2
.TP
\fBTCL_REG_NOTBOL\fR
Da startin characta aint gonna be treated as tha beginnin of a
line or tha beginnin of tha string, so
.QW ^
will not match there.
Note dat dis flag has no effect on how
.QW \fB\eA\fR
matches.
.TP
\fBTCL_REG_NOTEOL\fR
Da last characta up in tha strang aint gonna be treated as tha end of a
line or tha end of tha string, so
.QW $
will not match there.
Note dat dis flag has no effect on how
.QW \fB\eZ\fR
matches.
.RE
.PP
\fBTcl_RegExpGetInfo\fR retrieves shiznit bout tha last match
performed wit a given regular expression \fIregexp\fR.  The
\fIinfoPtr\fR argument gotz nuff a pointa ta a structure dat is
defined as bigs up:
.PP
.CS
typedef struct Tcl_RegExpInfo {
        int \fInsubs\fR;
        Tcl_RegExpIndices *\fImatches\fR;
        long \fIextendStart\fR;
} Tcl_RegExpInfo;
.CE
.PP
Da \fInsubs\fR field gotz nuff a cold-ass lil count of tha number of parenthesized
subexpressions within tha regular expression. I aint talkin' bout chicken n' gravy biatch.  If tha \fBTCL_REG_NOSUB\fR
was used, then dis value is ghon be zero.  Da \fImatches\fR field
points ta a array of \fInsubs\fR+1 joints dat indicate tha boundz of each
subexpression matched. Y'all KNOW dat shit, muthafucka!  Da first element up in tha array refers ta the
range matched by tha entire regular expression, n' subsequent elements
refer ta tha parenthesized subexpressions up in tha order dat they
appear up in tha pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  Each element be a structure dat is defined as
bigs up:
.PP
.CS
typedef struct Tcl_RegExpIndices {
        long \fIstart\fR;
        long \fIend\fR;
} Tcl_RegExpIndices;
.CE
.PP
Da \fIstart\fR n' \fIend\fR joints is Unicode characta indices
relatizzle ta tha offset location within \fIobjPtr\fR where matchin fuckin started.
Da \fIstart\fR index identifies tha straight-up original gangsta characta of tha matched
subexpression. I aint talkin' bout chicken n' gravy biatch.  Da \fIend\fR index identifies tha straight-up original gangsta character
afta tha matched subexpression. I aint talkin' bout chicken n' gravy biatch.  If tha subexpression matched the
empty string, then \fIstart\fR n' \fIend\fR is ghon be equal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If the
subexpression did not participate up in tha match, then \fIstart\fR and
\fIend\fR is ghon be set ta \-1.
.PP
Da \fIextendStart\fR field up in \fBTcl_RegExpInfo\fR is only set if the
\fBTCL_REG_CANMATCH\fR flag was used. Y'all KNOW dat shit, muthafucka!  It indicates tha first
characta up in tha strang where a match could occur. Shiiit, dis aint no joke.  If a match was
found, dis is ghon be tha same as tha beginnin of tha current match.
If no match was found, then it indicates tha earliest point at which a
match might occur if additionizzle text be appended ta tha string.  If it
is no match is possible even wit further text, dis field is ghon be set 
to \-1.
.SH "SEE ALSO"
re_syntax(n)
.SH KEYWORDS
match, pattern, regular expression, string, subexpression, Tcl_RegExpIndices, Tcl_RegExpInfo
