.\" Copyright (c) 1980, 1991 Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)alloca.3	5.1 (Berkeley) 5/2/91
.\"
.\" Converted Mon Nov 29 11:05:55 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:41:56 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-07-17, aeb
.\" 2008-01-24, mtk:
.\"     Various rewrites n' additions (notes on longjmp() n' SIGSEGV).
.\"     Weaken warnin against use of alloca() (as per Debian bug 461100).
.\"
.TH ALLOCA 3 2013-05-12 "GNU" "Linux Programmerz Manual"
.SH NAME
alloca \- allocate memory dat be automatically freed
.SH SYNOPSIS
.B #include <alloca.h>
.sp
.BI "void *alloca(size_t " size );
.SH DESCRIPTION
The
.BR alloca ()
function allocates
.I size
bytez of space up in tha stack frame of tha caller.
This temporary space is
automatically freed when tha function dat called
.BR alloca ()
returns ta its caller.
.SH RETURN VALUE
The
.BR alloca ()
function returns a pointa ta tha beginnin of tha allocated space.
If tha allocation causes stack overflow, program behavior is undefined.
.SH CONFORMING TO
This function aint up in POSIX.1-2001.

There is evidence dat the
.BR alloca ()
function rocked up in 32V, PWB, PWB.2, 3BSD, n' 4BSD.
There be a playa page fo' it up in 4.3BSD.
Linux uses tha GNU version.
.SH NOTES
The
.BR alloca ()
function is machine- n' compiler-dependent.
For certain applications,
its use can improve efficiency compared ta tha use of
.BR malloc (3)
plus
.BR free (3).
In certain cases,
it can also simplify memory deallocation up in applications dat use
.BR longjmp (3)
or
.BR siglongjmp (3).
Otherwise, its use is discouraged.

Because tha space allocated by
.BR alloca ()
is allocated within tha stack frame,
that space be automatically freed if tha function return
is jumped over by a cold-ass lil call to
.BR longjmp (3)
or
.BR siglongjmp (3).

Do not attempt to
.BR free (3)
space allocated by
.BR alloca ()!
.SS Notes on tha GNU version
Normally,
.BR gcc (1)
translates calls to
.BR alloca ()
with inlined code.
This aint done when either the
.IR "\-ansi" ,
.IR "\-std=c89" ,
.IR "\-std=c99" ,
or the
.IR "\-std=c11"
option is given
.BR and
the header
.I <alloca.h>
is not included.
Otherwise (without a \-ansi or \-std=c* option) tha glibc version of
.I <stdlib.h>
includes
.I <alloca.h>
and dat gotz nuff tha lines:
.nf

    #ifdef  __GNUC__
    #define alloca(size)   __builtin_alloca (size)
    #endif

.fi
with messy consequences if one has a private version of dis function.
.LP
Da fact dat tha code is inlined means dat it is impossible
to take tha address of dis function, or ta chizzle its behavior
by linkin wit a gangbangin' finger-lickin' different library.
.LP
Da inlined code often consistz of a single instruction adjusting
the stack pointer, n' do not check fo' stack overflow.
Thus, there is no NULL error return.
.SH BUGS
There is no error indication if tha stack frame cannot be extended.
(But fuck dat shiznit yo, tha word on tha street is dat afta a gangbangin' failed allocation, tha program is likely ta receive a
.B SIGSEGV
signal if it attempts ta access tha unallocated space.)

On nuff systems
.BR alloca ()
cannot be used inside tha list of argumentz of a gangbangin' function call, cuz
the stack space reserved by
.BR alloca ()
would step tha fuck up on tha stack up in tha middle of tha space fo' the
function arguments.
.SH SEE ALSO
.BR brk (2),
.BR longjmp (3),
.BR malloc (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
