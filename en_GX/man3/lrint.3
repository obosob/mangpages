.
.\" n' Copyright 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH LRINT 3  2010-09-20 "" "Linux Programmerz Manual"
.SH NAME
lrint, lrintf, lrintl, llrint, llrintf, llrintl \- round ta nearest integer
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
.BI "long int lrint(double " x );
.br
.BI "long int lrintf(float " x );
.br
.BI "long int lrintl(long double " x );
.sp
.BI "long long int llrint(double " x );
.br
.BI "long long int llrintf(float " x );
.br
.BI "long long int llrintl(long double " x );
.fi
.sp
Link wit \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH DESCRIPTION
These functions round they argument ta tha nearest integer value,
usin tha current roundin direction (see
.BR fesetround (3)).

Note dat unlike
.BR rint (3),
etc., tha return type of these functions differs from
that of they arguments.
.SH RETURN VALUE
These functions return tha rounded integer value.

If
.I x
is a NaN or a infinity,
or tha rounded value is too big-ass ta be stored up in a
.I long
.RI ( "long long"
in tha case of the
.B ll*
functions)
then a thugged-out domain error occurs, n' tha return value is unspecified.
.\" Da return value is -(LONG_MAX - 1) or -(LLONG_MAX -1)
.SH ERRORS
See
.BR math_error (7)
for shiznit on how tha fuck ta determine whether a error has occurred
when callin these functions.
.PP
Da followin errors can occur:
.TP
Domain error: \fIx\fP be a NaN or infinite, or tha rounded value is too large
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentionizzle dat these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6798
.SH VERSIONS
These functions first rocked up in glibc up in version 2.1.
.SH CONFORMING TO
C99, POSIX.1-2001.
.SH SEE ALSO
.BR ceil (3),
.BR floor (3),
.BR lround (3),
.BR nearbyint (3),
.BR rint (3),
.BR round (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
