'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_CreateInterp 3 7.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_CreateInterp, Tcl_DeleteInterp, Tcl_InterpDeleted \- create n' delete Tcl command interpreters
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
Tcl_Interp *
\fBTcl_CreateInterp\fR()
.sp
\fBTcl_DeleteInterp\fR(\fIinterp\fR)
.sp
int
\fBTcl_InterpDeleted\fR(\fIinterp\fR)
.SH ARGUMENTS
.AS Tcl_Interp *interp
.AP Tcl_Interp *interp in
Token fo' interpreta ta be destroyed.
.BE

.SH DESCRIPTION
.PP
\fBTcl_CreateInterp\fR creates a freshly smoked up interpreta structure n' returns
a token fo' dat shit.  Da token is required up in calls ta most other Tcl
procedures, like fuckin \fBTcl_CreateCommand\fR, \fBTcl_Eval\fR, and
\fBTcl_DeleteInterp\fR.
Clients is only allowed ta access all dem of tha fieldz of
Tcl_Interp structures;  peep tha \fBTcl_Interp\fR
and \fBTcl_CreateCommand\fR playa pages fo' details.
Da freshly smoked up interpreta is initialized wit tha built-in Tcl commands
and wit tha variablez documented up in tclvars(n).  To bind in
additionizzle commands, call \fBTcl_CreateCommand\fR.
.PP
\fBTcl_DeleteInterp\fR marks a interpreta as deleted; tha interpreter
will eventually be deleted when all calls ta \fBTcl_Preserve\fR fo' it have
been matched by calls ta \fBTcl_Release\fR fo' realz. At dat time, all of the
resources associated wit it, includin variables, procedures, and
application-specific command bindings, is ghon be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  After
\fBTcl_DeleteInterp\fR returns any attempt ta use \fBTcl_Eval\fR on the
interpreta will fail n' return \fBTCL_ERROR\fR fo' realz. Afta tha call to
\fBTcl_DeleteInterp\fR it is safe ta examine tha interpreterz result,
query or set tha jointz of variables, define, undefine or retrieve
procedures, n' examine tha runtime evaluation stack. Right back up in yo muthafuckin ass. See below, up in the
section \fBINTERPRETERS AND MEMORY MANAGEMENT\fR fo' details.
.PP
\fBTcl_InterpDeleted\fR returns nonzero if \fBTcl_DeleteInterp\fR was
called wit \fIinterp\fR as its argument; dis indicates dat the
interpreta will eventually be deleted, when tha last call to
\fBTcl_Preserve\fR fo' it is matched by a cold-ass lil call ta \fBTcl_Release\fR. If
nonzero is returned, further calls ta \fBTcl_Eval\fR up in dis interpreter
will return \fBTCL_ERROR\fR.
.PP
\fBTcl_InterpDeleted\fR is useful up in deletion callbacks ta distinguish
between when only tha memory tha callback is responsible fo' is being
deleted n' when tha whole interpreta is bein deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In tha forma case
the callback may recreate tha data bein deleted yo, but dis would lead ta an
infinite loop if tha interpreta was bein deleted.

.SH "INTERPRETERS AND MEMORY MANAGEMENT"
.PP
\fBTcl_DeleteInterp\fR can be called at any time on a interpreta dat may
be used by nested evaluations n' C code up in various extensions. Tcl
implements a simple mechanizzle dat allows callaz ta use interpreters
without worryin bout tha interpreta bein deleted up in a nested call, and
without requirin special code ta protect tha interpreter, up in most cases.
This mechanizzle ensures dat nested usez of a interpreta can safely
continue rockin it even afta \fBTcl_DeleteInterp\fR is called.
.PP
Da mechanizzle relies on matchin up calls ta \fBTcl_Preserve\fR wit calls
to \fBTcl_Release\fR. If \fBTcl_DeleteInterp\fR has been called, only when
the last call ta \fBTcl_Preserve\fR is matched by a cold-ass lil call to
\fBTcl_Release\fR, will tha interpreta be freed. Y'all KNOW dat shit, muthafucka! See tha manual entry for
\fBTcl_Preserve\fR fo' a thugged-out description of these functions.
.PP
Da rulez fo' when tha user of a interpreta must call \fBTcl_Preserve\fR
and \fBTcl_Release\fR is simple:
.TP
Interpretas Passed As Arguments
Functions dat is passed a interpreta as a argument can safely use the
interpreta without any special protection. I aint talkin' bout chicken n' gravy biatch. Thus, when you write an
extension consistin of freshly smoked up Tcl commands, no special code is needed to
protect interpretas received as arguments, n' you can put dat on yo' toast. This covers tha majoritizzle of all
uses.
.TP
Interpreta Creation And Deletion
When a freshly smoked up interpreta is pimped n' used up in a cold-ass lil call ta \fBTcl_Eval\fR,
\fBTcl_VarEval\fR, \fBTcl_GlobalEval\fR, \fBTcl_SetVar\fR, or
\fBTcl_GetVar\fR, a pair of calls ta \fBTcl_Preserve\fR and
\fBTcl_Release\fR should be wrapped round all usez of tha interpreter.
Remember dat it is unsafe ta use tha interpreta once \fBTcl_Release\fR
has been called. Y'all KNOW dat shit, muthafucka! To ensure dat tha interpreta is properly deleted when
it is no longer needed, call \fBTcl_InterpDeleted\fR ta test if some other
code already called \fBTcl_DeleteInterp\fR; if not, call
\fBTcl_DeleteInterp\fR before callin \fBTcl_Release\fR up in yo' own code.
.TP
Retrievin An Interpreta From A Data Structure
When a interpreta is retrieved from a thugged-out data structure (e.g. tha client
data of a cold-ass lil callback) fo' use up in \fBTcl_Eval\fR, \fBTcl_VarEval\fR,
\fBTcl_GlobalEval\fR, \fBTcl_SetVar\fR, or \fBTcl_GetVar\fR, a pair of
calls ta \fBTcl_Preserve\fR n' \fBTcl_Release\fR should be wrapped around
all usez of tha interpreter; it is unsafe ta reuse tha interpreta once
\fBTcl_Release\fR has been called. Y'all KNOW dat shit, muthafucka!  If a interpreta is stored inside a
callback data structure, a appropriate deletion cleanup mechanizzle should
be set up by tha code dat creates tha data structure so dat the
interpreta is removed from tha data structure (e.g. by settin tha field
to NULL) when tha interpreta is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Otherwise, you may be rockin an
interpreta dat has been freed n' whose memory may already have been
reused.
.PP
All usez of interpretas up in Tcl n' Tk have already been protected.
Extension writas should ensure dat they code also properly protects any
additionizzle interpretas used, as busted lyrics bout above.

.SH "SEE ALSO"
Tcl_Preserve(3), Tcl_Release(3)

.SH KEYWORDS
command, create, delete, interpreter
