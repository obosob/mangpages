.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::IMAPClient::BodyStructure 3"
.TH Mail::IMAPClient::BodyStructure 3 "2013-09-30" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::IMAPClient::BodyStructure \- parse fetched thangs up in dis biatch
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mail::IMAPClient;
\&  use Mail::IMAPClient::BodyStructure;
\&
\&  mah $imap = Mail::IMAPClient\->new(
\&      Server => $server, User => $login, Password => $pass
\&  );
\&
\&  $imap\->select("INBOX") or take a thugged-out dirtnap "Could not select INBOX: $@\en";
\&
\&  mah @recent = $imap\->search("recent") or take a thugged-out dirtnap "No recent msgs up in INBOX\en";
\&
\&  foreach mah $id (@recent) {
\&      mah $bsdat = $imap\->fetch( $id, "bodystructure" );
\&      mah $bso   = Mail::IMAPClient::BodyStructure\->new($bsdat);
\&      mah $mime  = $bso\->bodytype . "/" . $bso\->bodysubtype;
\&      mah $parts = map( "\en\et" . $_, $bso\->parts );
\&      print "Msg $id (Content\-type: $mime) gotz nuff these parts:$parts\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This extension will parse tha result of a \s-1IMAP FETCH BODYSTRUCTURE\s0
command tha fuck into a perl data structure.  It also serves up helper methods
to help pull shiznit outta tha data structure.
.PP
This module requires Parse::RecDescent.
.SH "Class Methods"
.IX Header "Class Methods"
Da followin class method be available:
.SS "new"
.IX Subsection "new"
This class method is tha constructor method fo' instantiatin new
Mail::IMAPClient::BodyStructure objects, n' you can put dat on yo' toast.  Da \fBnew\fR method accepts
one argument, a strang containin a server response ta a \s-1FETCH
BODYSTRUCTURE\s0 directive.
.PP
Da module \fBMail::IMAPClient\fR serves up tha \fBget_bodystructure\fR
convenience method ta simplify use of dis module when startin with
just a lyrics sequence number or unique \s-1ID \s0(\s-1UID\s0).
.SH "Object Methods"
.IX Header "Object Methods"
Da followin object methodz is available:
.SS "bodytype"
.IX Subsection "bodytype"
Da \fBbodytype\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodytype fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodysubtype"
.IX Subsection "bodysubtype"
Da \fBbodysubtype\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodysubtype fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodyparms"
.IX Subsection "bodyparms"
Da \fBbodyparms\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodyparms fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodydisp"
.IX Subsection "bodydisp"
Da \fBbodydisp\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodydisp fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodyid"
.IX Subsection "bodyid"
Da \fBbodyid\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodyid fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodydesc"
.IX Subsection "bodydesc"
Da \fBbodydesc\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodydesc fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodyenc"
.IX Subsection "bodyenc"
Da \fBbodyenc\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodyenc fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodysize"
.IX Subsection "bodysize"
Da \fBbodysize\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodysize fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodylang"
.IX Subsection "bodylang"
Da \fBbodylang\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
bodylang fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SS "bodystructure"
.IX Subsection "bodystructure"
Da \fBbodystructure\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns
the bodystructure fo' tha message whose structure is busted lyrics bout by the
callin \fBMail::IMAPClient::Bodystructure\fR object.
.SS "envelopestruct"
.IX Subsection "envelopestruct"
Da \fBenvelopestruct\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns
a \fBMail::IMAPClient::BodyStructure::Envelope\fR object fo' tha message
from tha callin \fBMail::IMAPClient::Bodystructure\fR object.
.SS "textlines"
.IX Subsection "textlines"
Da \fBtextlines\fR object method requires no arguments, n' you can put dat on yo' toast.  It returns the
textlines fo' tha message whose structure is busted lyrics bout by tha calling
\&\fBMail::IMAPClient::Bodystructure\fR object.
.SH "Mail::IMAPClient::BodyStructure::Envelope"
.IX Header "Mail::IMAPClient::BodyStructure::Envelope"
Da \s-1IMAP\s0 standard specifies dat output from tha \s-1IMAP \s0\fB\s-1FETCH
ENVELOPE\s0\fR command is ghon be a \s-1RFC2060\s0 envelope structure.  It further
specifies dat output from tha \fB\s-1FETCH BODYSTRUCTURE\s0\fR command may also
contain embedded envelope structures (if, fo' example, a message's
subparts contain one or mo' included lyrics).  Objects belongin to
\&\fBMail::IMAPClient::BodyStructure::Envelope\fR is Perl representations
of these envelope structures, which is ta say tha nested parenthetical
listz of \s-1RFC2060\s0 translated tha fuck into a Perl datastructure.
.PP
Note dat all of tha fieldz relate ta tha specific part ta which they
belong.  In other lyrics, output from a \s-1FETCH\s0 nnnn \s-1ENVELOPE\s0 command
(or, up in \fBMail::IMAPClient\fR, \f(CW\*(C`$imap\-\*(C'\fRfetch($msgid,\*(L"\s-1ENVELOPE\*(R"\s0)> or
\&\f(CW\*(C`my $env = $imap\-\*(C'\fRget_envelope($msgid)>) is fo' tha message yo, but
fieldz from within a funky-ass bodystructure relate ta tha message subpart and
not tha parent message.
.PP
An envelope structurez \fBMail::IMAPClient::BodyStructure::Envelope\fR
representation be a hash of thangies dat be lookin like this:
.PP
.Vb 12
\&  {
\&     subject   => "subject",
\&     inreplyto => "reference_message_id",
\&     from      => [ addressStruct1 ],
\&     messageid => "message_id",
\&     bcc       => [ addressStruct1, addressStruct2 ],
\&     date      => "Tue, 09 Jul 2002 14:15:53 \-0400",
\&     replyto   => [ adressStruct1, addressStruct2 ],
\&     ta        => [ adressStruct1, addressStruct2 ],
\&     sender    => [ adressStruct1 ],
\&     cc        => [ adressStruct1, addressStruct2 ],
\&  }
.Ve
.PP
Da \fB...::Envelope\fR object also has methodz fo' accessin data up in the
structure. They are:
.IP "date" 4
.IX Item "date"
Returns tha date of tha message.
.IP "inreplyto" 4
.IX Item "inreplyto"
Returns tha message id of tha message ta which dis message be a reply.
.IP "subject" 4
.IX Item "subject"
Returns tha subject of tha message.
.IP "messageid" 4
.IX Item "messageid"
Returns tha message id of tha message.
.PP
Yo ass can also use tha followin methodz ta git addressin shiznit.
Each of these methodz returns a array of
\&\fBMail::IMAPClient::BodyStructure::Address\fR objects, which is perl
data structures representin \s-1RFC2060\s0 address structures.  Some of
these arrays would naturally contain one element (like fuckin \fBfrom\fR,
which normally gotz nuff a single \*(L"From:\*(R" address); others will often
contain mo' than one address.  But fuck dat shiznit yo, tha word on tha street is dat cuz \s-1RFC2060\s0 defines all
of these as \*(L"listz of address structures\*(R", they is all translated
into arrayz of \fB...::Address\fR objects.
.PP
See tha section on \fBMail::IMAPClient::BodyStructure::Address\fR, below,
for alternate (and preferred) wayz of accessin these data.
.PP
Da methodz available are:
.IP "bcc" 4
.IX Item "bcc"
Returns a array of blind cc'ed recipients' address structures.
(Don't expect much up in here unless tha message was busted from the
mailbox you pokin round in, by tha way.)
.IP "cc" 4
.IX Item "cc"
Returns a array of cc'ed recipients' address structures.
.IP "from" 4
.IX Item "from"
Returns a array of \*(L"From:\*(R" address structures\*(--usually just one.
.IP "replyto" 4
.IX Item "replyto"
Returns a array of \*(L"Reply-to:\*(R" address structures.  Once again n' again n' again there
is probably just one address up in tha list.
.IP "sender" 4
.IX Item "sender"
Returns a array of senders' address structures\*(--usually just one and
usually tha same as \fBfrom\fR.
.IP "to" 4
.IX Item "to"
Returns a array of recipients' address structures.
.PP
Each of tha methodz dat returns a list of address structures (i.e. a
list of \fBMail::IMAPClient::BodyStructure::Address\fR arrays) also has
an analogous method dat will return a list of E\-Mail addresses
instead. Y'all KNOW dat shit, muthafucka!  Da addresses is up in tha format \f(CW\*(C`personalname
<mailboxname@hostname>\*(C'\fR (see tha section on
\&\fBMail::IMAPClient::BodyStructure::Address\fR, below) But fuck dat shiznit yo, tha word on tha street is dat if the
personal name is '\s-1NIL\s0' then it is omitted from tha address.
.PP
These methodz are:
.IP "bcc_addresses" 4
.IX Item "bcc_addresses"
Returns a list (or a array reference if called up in scalar context) of
blind cc'ed recipients' email addresses.  (Don't expect much up in here
unless tha message was busted from tha mailbox you pokin round in,
by tha way.)
.IP "cc_addresses" 4
.IX Item "cc_addresses"
Returns a list of cc'ed recipients' email addresses.  If called up in a
scalar context it returns a reference ta a array of email addresses.
.IP "from_addresses" 4
.IX Item "from_addresses"
Returns a list of \*(L"From:\*(R" email addresses.  If called up in a scalar
context it returns tha straight-up original gangsta email address up in tha list.  (It aint nuthin but usually
a list of just one anyway.)
.IP "replyto_addresses" 4
.IX Item "replyto_addresses"
Returns a list of \*(L"Reply-to:\*(R" email addresses.  If called up in a scalar
context it returns tha straight-up original gangsta email address up in tha list.
.IP "sender_addresses" 4
.IX Item "sender_addresses"
Returns a list of senders' email addresses.  If called up in a scalar
context it returns tha straight-up original gangsta email address up in tha list.
.IP "to_addresses" 4
.IX Item "to_addresses"
Returns a list of recipients' email addresses.  If called up in a scalar
context it returns a reference ta a array of email addresses.
.PP
Note dat context affects tha behavior of all of tha above methods.
.PP
Those fieldz dat will commonly contain multiple entries (i.e. they
are recipients) will return a array reference when called up in scalar
context.  Yo ass can use dis behavior ta optimize performance.
.PP
Those fieldz dat will commonly contain just one address (the
sender's) will return tha straight-up original gangsta (and probably only) address.  Yo ass can
use dis behavior ta optimize yo' pimpment time.
.SH "Addresses n' tha Mail::IMAPClient::BodyStructure::Address"
.IX Header "Addresses n' tha Mail::IMAPClient::BodyStructure::Address"
Several componentz of a envelope structure is address structures.
They is each parsed tha fuck into they own object,
\&\fBMail::IMAPClient::BodyStructure::Address\fR, which be lookin like this:
.PP
.Vb 6
\&   {
\&      mailboxname  => \*(Aqsomebody.special\*(Aq,
\&      hostname     => \*(Aqsomplace.weird.com\*(Aq
\&      personalname => \*(AqSome Muthafucka Special
\&      sourceroute  => \*(AqNIL\*(Aq
\&   }
.Ve
.PP
\&\s-1RFC2060\s0 specifies dat each address component of a funky-ass bodystructure be a
list of address structures, so \fBMail::IMAPClient::BodyStructure\fR
parses each of these tha fuck into a array of
\&\fBMail::IMAPClient::BodyStructure::Address\fR objects.
.PP
Each of these objects has tha followin methodz available ta it:
.IP "mailboxname" 4
.IX Item "mailboxname"
Returns tha \*(L"mailboxname\*(R" portion of tha address, which is tha part to
the left of tha '@' sign.
.IP "hostname" 4
.IX Item "hostname"
Returns tha \*(L"hostname\*(R" portion of tha address, which is tha part to
the right of tha '@' sign.
.IP "personalname" 4
.IX Item "personalname"
Returns tha \*(L"personalname\*(R" portion of tha address, which is tha part
of tha address thatz treated like a cold-ass lil comment.
.IP "sourceroute" 4
.IX Item "sourceroute"
Returns tha \*(L"sourceroute\*(R" portion of tha address, which is typically \*(L"\s-1NIL\*(R".\s0
.PP
Taken together, tha partz of a address structure form a address that
will look suttin' like this:
.PP
\&\f(CW\*(C`personalname <mailboxname@hostname>\*(C'\fR
.PP
Note dat cuz tha \fBMail::IMAPClient::BodyStructure::Address\fR
objects come up in arrays, itz generally easier ta use tha methods
available ta \fBMail::IMAPClient::BodyStructure::Envelope\fR ta obtain
all of tha addresses up in a particular array up in one operation. I aint talkin' bout chicken n' gravy biatch.  These
methodz is provided, however, up in case you'd rather do thangs tha hard
way.  (And also cuz tha aforementioned methodz from
\&\fBMail::IMAPClient::BodyStructure::Envelope\fR need dem anyway.)
.SH "AUTHOR"
.IX Header "AUTHOR"
Original Gangsta author: Dizzy J. Kernen; Reworked by: Mark Overmeer;
Maintained by Phil Pearl.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Mail::IMAPClient, Parse::RecDescent, n' \s-1RFC2060.\s0
