.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config 3pm"
.TH Config 3pm "2014-10-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config \- access Perl configuration shiznit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Config;
\&    if ($Config{usethreads}) {
\&        print "has thread support\en"
\&    } 
\&
\&    use Config qw(myconfig config_sh config_vars config_re);
\&
\&    print myconfig();
\&
\&    print config_sh();
\&
\&    print config_re();
\&
\&    config_vars(qw(osname archname));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da Config module gotz nuff all tha shiznit dat was available to
the \f(CW\*(C`Configure\*(C'\fR program at Perl build time (over 900 joints).
.PP
Shell variablez from tha \fIconfig.sh\fR file (written by Configure) are
stored up in tha readonly-variable \f(CW%Config\fR, indexed by they names.
.PP
Values stored up in config.sh as 'undef' is returned as undefined
values.  Da perl \f(CW\*(C`exists\*(C'\fR function can be used ta check if a
named variable exists.
.PP
For a thugged-out description of tha variables, please gotz a peep the
Glossary file, as freestyled up in tha Portin folder, or use tha url:
http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/Glossary
.IP "\fImyconfig()\fR" 4
.IX Item "myconfig()"
Returns a textual summary of tha major perl configuration joints.
See also \f(CW\*(C`\-V\*(C'\fR up in \*(L"Command Switches\*(R" up in perlrun.
.IP "\fIconfig_sh()\fR" 4
.IX Item "config_sh()"
Returns tha entire perl configuration shiznit up in tha form of the
original gangsta config.sh shell variable assignment script.
.IP "config_re($regex)" 4
.IX Item "config_re($regex)"
Like \fIconfig_sh()\fR but returns, as a list, only tha config entries who's
names match tha \f(CW$regex\fR.
.IP "config_vars(@names)" 4
.IX Item "config_vars(@names)"
Prints ta \s-1STDOUT\s0 tha jointz of tha named configuration variable. Each is
printed on a separate line up in tha form:
.Sp
.Vb 1
\&  name=\*(Aqvalue\*(Aq;
.Ve
.Sp
Names which is unknown is output as \f(CW\*(C`name=\*(AqUNKNOWN\*(Aq;\*(C'\fR.
See also \f(CW\*(C`\-V:name\*(C'\fR up in \*(L"Command Switches\*(R" up in perlrun.
.IP "\fIbincompat_options()\fR" 4
.IX Item "bincompat_options()"
Returns a list of C pre-processor options used when compilin dis \fIperl\fR
binary, which affect its binary compatibilitizzle wit extensions.
\&\f(CW\*(C`bincompat_options()\*(C'\fR n' \f(CW\*(C`non_bincompat_options()\*(C'\fR is shown together in
the output of \f(CW\*(C`perl \-V\*(C'\fR as \fICompile-time options\fR.
.IP "\fInon_bincompat_options()\fR" 4
.IX Item "non_bincompat_options()"
Returns a list of C pre-processor options used when compilin dis \fIperl\fR
binary, which do not affect binary compatibilitizzle wit extensions.
.IP "\fIcompile_date()\fR" 4
.IX Item "compile_date()"
Returns tha compile date (as a string), equivalent ta what tha fuck is shown by
\&\f(CW\*(C`perl \-V\*(C'\fR
.IP "\fIlocal_patches()\fR" 4
.IX Item "local_patches()"
Returns a list of tha namez of locally applied patches, equivalent ta what
is shown by \f(CW\*(C`perl \-V\*(C'\fR.
.IP "\fIheader_files()\fR" 4
.IX Item "header_files()"
Returns a list of tha header filez dat should be used as dependencies for
\&\s-1XS\s0 code, fo' dis version of Perl on dis platform.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Herez a mo' sophisticated example of rockin \f(CW%Config:\fR
.PP
.Vb 2
\&    use Config;
\&    use strict;
\&
\&    mah %sig_num;
\&    mah @sig_name;
\&    unless($Config{sig_name} && $Config{sig_num}) {
\&        take a thugged-out dirtnap "No sigs?";
\&    } else {
\&        mah @names = split \*(Aq \*(Aq, $Config{sig_name};
\&        @sig_num{@names} = split \*(Aq \*(Aq, $Config{sig_num};
\&        foreach (@names) {
\&            $sig_name[$sig_num{$_}] ||= $_;
\&        }   
\&    }
\&
\&    print "signal #17 = $sig_name[17]\en";
\&    if ($sig_num{ALRM}) { 
\&        print "SIGALRM is $sig_num{ALRM}\en";
\&    }
.Ve
.SH "WARNING"
.IX Header "WARNING"
Because dis shiznit aint stored within tha perl executable
itself it is possible (but unlikely) dat tha shiznit do not
relate ta tha actual perl binary which is bein used ta access dat shit.
.PP
Da Config module is installed tha fuck into tha architecture n' version
specific library directory ($Config{installarchlib}) n' it checks the
perl version number when loaded.
.PP
Da joints stored up in config.sh may be either single-quoted or
double-quoted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Double-quoted strings is handy fo' dem cases where you
need ta include escape sequences up in tha strings. To avoid runtime variable
interpolation, any \f(CW\*(C`$\*(C'\fR n' \f(CW\*(C`@\*(C'\fR charactas is replaced by \f(CW\*(C`\e$\*(C'\fR and
\&\f(CW\*(C`\e@\*(C'\fR, respectively. This aint foolproof, of course, so don't embed \f(CW\*(C`\e$\*(C'\fR
or \f(CW\*(C`\e@\*(C'\fR up in double-quoted strings unless you willin ta deal wit the
consequences. (Da slashes will end up escaped n' tha \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR will
trigger variable interpolation)
.SH "GLOSSARY"
.IX Header "GLOSSARY"
Most \f(CW\*(C`Config\*(C'\fR variablez is determined by tha \f(CW\*(C`Configure\*(C'\fR script
on platforms supported by it (which is most \s-1UNIX\s0 platforms).  Some
platforms have custom-made \f(CW\*(C`Config\*(C'\fR variables, n' may thus not have
some of tha variablez busted lyrics bout below, or may have extraneous variables
specific ta dat particular port.  See tha port specific documentation
in such cases.
.SS "_"
.IX Subsection "_"
.ie n .IP """_a""" 4
.el .IP "\f(CW_a\fR" 4
.IX Item "_a"
From \fIUnix.U\fR:
.Sp
This variable defines tha extension used fo' ordinary library files.
For unix, it is \fI.a\fR.  Da \fI.\fR is included. Y'all KNOW dat shit, muthafucka!  Other possible
values include \fI.lib\fR.
.ie n .IP """_exe""" 4
.el .IP "\f(CW_exe\fR" 4
.IX Item "_exe"
From \fIUnix.U\fR:
.Sp
This variable defines tha extension used fo' executable files.
\&\f(CW\*(C`DJGPP\*(C'\fR, Cygwin n' \fI\s-1OS/2\s0\fR use \fI.exe\fR.  Stratus \f(CW\*(C`VOS\*(C'\fR uses \fI.pm\fR.
On operatin systems which do not require a specific extension
for executable files, dis variable is empty.
.ie n .IP """_o""" 4
.el .IP "\f(CW_o\fR" 4
.IX Item "_o"
From \fIUnix.U\fR:
.Sp
This variable defines tha extension used fo' object files.
For unix, it is \fI.o\fR.  Da \fI.\fR is included. Y'all KNOW dat shit, muthafucka!  Other possible
values include \fI.obj\fR.
.SS "a"
.IX Subsection "a"
.ie n .IP """afs""" 4
.el .IP "\f(CWafs\fR" 4
.IX Item "afs"
From \fIafs.U\fR:
.Sp
This variable is set ta \f(CW\*(C`true\*(C'\fR if \f(CW\*(C`AFS\*(C'\fR (Andrew File System) is used
on tha system, \f(CW\*(C`false\*(C'\fR otherwise.  It be possible ta override this
with a hint value or command line option yo, but you'd betta know
what yo ass is bustin.
.ie n .IP """afsroot""" 4
.el .IP "\f(CWafsroot\fR" 4
.IX Item "afsroot"
From \fIafs.U\fR:
.Sp
This variable is by default set ta \fI/afs\fR. In tha unlikely case
this aint tha erect root, it is possible ta override dis with
a hint value or command line option. I aint talkin' bout chicken n' gravy biatch.  This is ghon be used up in subsequent
tests fo' AFSnizz up in tha configure n' test process.
.ie n .IP """alignbytes""" 4
.el .IP "\f(CWalignbytes\fR" 4
.IX Item "alignbytes"
From \fIalignbytes.U\fR:
.Sp
This variable holdz tha number of bytes required ta align a
double\*(-- or a long-ass double when applicable. Usual joints are
2, 4 n' 8.  Da default is eight, fo' safety.
.ie n .IP """ansi2knr""" 4
.el .IP "\f(CWansi2knr\fR" 4
.IX Item "ansi2knr"
From \fIansi2knr.U\fR:
.Sp
This variable is set if tha user need ta run ansi2knr.
Currently, dis aint supported, so our laid-back asses just abort.
.ie n .IP """aphostname""" 4
.el .IP "\f(CWaphostname\fR" 4
.IX Item "aphostname"
From \fId_gethname.U\fR:
.Sp
This variable gotz nuff tha command which can be used ta compute the
host name. Da command is straight-up qualified by its absolute path, ta make
it safe when used by a process wit super-user privileges.
.ie n .IP """api_revision""" 4
.el .IP "\f(CWapi_revision\fR" 4
.IX Item "api_revision"
From \fIpatchlevel.U\fR:
.Sp
Da three variables, api_revision, api_version, and
api_subversion, specify tha version of tha crazy oldschool perl binary
compatible wit tha present perl.  In a gangbangin' full version string
like fuckin \fI5.6.1\fR, api_revision is tha \f(CW5\fR.
Prior ta 5.5.640, tha format was a gangbangin' floatin point number,
like 5.00563.
.Sp
\&\fIperl.c\fR:\fIincpush()\fR n' \fIlib/lib.pm\fR will automatically search in
\&\fI\f(CI$sitelib\fI/.\fR. fo' olda directories back ta tha limit specified
by these api_ variables.  This is only useful if you have a
perl library directory tree structured like tha default one.
See \f(CW\*(C`INSTALL\*(C'\fR fo' how tha fuck dis works.  Da versioned crib_perl
directory was introduced up in 5.005, so dat is tha lowest
possible value.  Da version list appropriate fo' tha current
system is determined up in \fIinc_version_list.U\fR.
.Sp
\&\f(CW\*(C`XXX\*(C'\fR To do:  Since compatibilitizzle can depend on compile time
options (like fuckin bincompat, longlong, etc.) it should
(like) be set by Configure yo, but currently it aint.
Currently, we read a hard-wired value from \fIpatchlevel.h\fR.
Perhaps what tha fuck we ought ta do is take tha hard-wired value from
\&\fIpatchlevel.h\fR but then modify it if tha current Configure
options warrant.  \fIpatchlevel.h\fR then would use a #ifdef guard.
.ie n .IP """api_subversion""" 4
.el .IP "\f(CWapi_subversion\fR" 4
.IX Item "api_subversion"
From \fIpatchlevel.U\fR:
.Sp
Da three variables, api_revision, api_version, and
api_subversion, specify tha version of tha crazy oldschool perl binary
compatible wit tha present perl.  In a gangbangin' full version string
like fuckin \fI5.6.1\fR, api_subversion is tha \f(CW1\fR.  See api_revision for
full details.
.ie n .IP """api_version""" 4
.el .IP "\f(CWapi_version\fR" 4
.IX Item "api_version"
From \fIpatchlevel.U\fR:
.Sp
Da three variables, api_revision, api_version, and
api_subversion, specify tha version of tha crazy oldschool perl binary
compatible wit tha present perl.  In a gangbangin' full version string
like fuckin \fI5.6.1\fR, api_version is tha \f(CW6\fR.  See api_revision for
full details.  As a special case, 5.5.0 is rendered up in the
old-style as 5.005.  (In tha 5.005_0x maintenizzle series,
this was tha only versioned directory up in \f(CW$sitelib\fR.)
.ie n .IP """api_versionstring""" 4
.el .IP "\f(CWapi_versionstring\fR" 4
.IX Item "api_versionstring"
From \fIpatchlevel.U\fR:
.Sp
This variable combines api_revision, api_version, and
api_subversion up in a gangbangin' format like fuckin 5.6.1 (or 5_6_1) suitable
for use as a gangbangin' finger-lickin' directory name.  This is filesystem dependent.
.ie n .IP """ar""" 4
.el .IP "\f(CWar\fR" 4
.IX Item "ar"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha ar program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`ar\*(C'\fR n' aint useful.
.ie n .IP """archlib""" 4
.el .IP "\f(CWarchlib\fR" 4
.IX Item "archlib"
From \fIarchlib.U\fR:
.Sp
This variable holdz tha name of tha directory up in which tha user wants
to put architecture-dependent hood library filez fo' \f(CW$package\fR.
It be most often a local directory like fuckin \fI/usr/local/lib\fR.
Programs rockin dis variable must be prepared ta deal
with filename expansion.
.ie n .IP """archlibexp""" 4
.el .IP "\f(CWarchlibexp\fR" 4
.IX Item "archlibexp"
From \fIarchlib.U\fR:
.Sp
This variable is tha same ol' dirty as tha archlib variable yo, but is
filename expanded at configuration time, fo' convenient use.
.ie n .IP """archname""" 4
.el .IP "\f(CWarchname\fR" 4
.IX Item "archname"
From \fIarchname.U\fR:
.Sp
This variable be a gangbangin' finger-lickin' dirty-ass short name ta characterize tha current
architecture.  It be used mainly ta construct tha default archlib.
.ie n .IP """archname64""" 4
.el .IP "\f(CWarchname64\fR" 4
.IX Item "archname64"
From \fIuse64bits.U\fR:
.Sp
This variable is used fo' tha 64\-bitnizz part of \f(CW$archname\fR.
.ie n .IP """archobjs""" 4
.el .IP "\f(CWarchobjs\fR" 4
.IX Item "archobjs"
From \fIUnix.U\fR:
.Sp
This variable defines any additionizzle objects dat must be linked
in wit tha program on dis architecture.  On unix, it is usually
empty.  It be typically used ta include emulationz of unix calls
or other facilities. Put ya muthafuckin choppers up if ya feel dis!  For perl on \fI\s-1OS/2\s0\fR, fo' example, dis would
include \fIos2/os2.obj\fR.
.ie n .IP """asctime_r_proto""" 4
.el .IP "\f(CWasctime_r_proto\fR" 4
.IX Item "asctime_r_proto"
From \fId_asctime_r.U\fR:
.Sp
This variable encodes tha prototype of asctime_r.
It be zero if d_asctime_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_asctime_r
is defined.
.ie n .IP """awk""" 4
.el .IP "\f(CWawk\fR" 4
.IX Item "awk"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha awk program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`awk\*(C'\fR n' aint useful.
.SS "b"
.IX Subsection "b"
.ie n .IP """baserev""" 4
.el .IP "\f(CWbaserev\fR" 4
.IX Item "baserev"
From \fIbaserev.U\fR:
.Sp
Da base revision level of dis package, from tha \fI.package\fR file.
.ie n .IP """bash""" 4
.el .IP "\f(CWbash\fR" 4
.IX Item "bash"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """bin""" 4
.el .IP "\f(CWbin\fR" 4
.IX Item "bin"
From \fIbin.U\fR:
.Sp
This variable holdz tha name of tha directory up in which tha user wants
to put publicly executable images fo' tha package up in question. I aint talkin' bout chicken n' gravy biatch.  It
is most often a local directory like fuckin \fI/usr/local/bin\fR. Programs using
this variable must be prepared ta deal wit \fI~name\fR substitution.
.ie n .IP """bin_ELF""" 4
.el .IP "\f(CWbin_ELF\fR" 4
.IX Item "bin_ELF"
From \fIdlsrc.U\fR:
.Sp
This variable saves tha result from configure if generated binaries
are up in \f(CW\*(C`ELF\*(C'\fR format. Only set ta defined when tha test has actually
been performed, n' tha result was positive.
.ie n .IP """binexp""" 4
.el .IP "\f(CWbinexp\fR" 4
.IX Item "binexp"
From \fIbin.U\fR:
.Sp
This is tha same ol' dirty as tha bin variable yo, but is filename expanded at
configuration time, fo' use up in yo' makefiles.
.ie n .IP """bison""" 4
.el .IP "\f(CWbison\fR" 4
.IX Item "bison"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha bison program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`bison\*(C'\fR n' aint useful.
.ie n .IP """bootstrap_charset""" 4
.el .IP "\f(CWbootstrap_charset\fR" 4
.IX Item "bootstrap_charset"
From \fIebcdic.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`BOOTSTRAP_CHARSET\*(C'\fR if
this system uses non\-\f(CW\*(C`ASCII\*(C'\fR encoding.
.ie n .IP """byacc""" 4
.el .IP "\f(CWbyacc\fR" 4
.IX Item "byacc"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha byacc program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`byacc\*(C'\fR n' aint useful.
.ie n .IP """byteorder""" 4
.el .IP "\f(CWbyteorder\fR" 4
.IX Item "byteorder"
From \fIbyteorder.U\fR:
.Sp
This variable holdz tha byte order up in a \f(CW\*(C`UV\*(C'\fR. In tha following,
larger digits indicate mo' significance.  Da variable byteorder
is either 4321 on a funky-ass big-endian machine, or 1234 on a lil-endian,
or 87654321 on a Cray ... or 3412 wit weird order !
.SS "c"
.IX Subsection "c"
.ie n .IP """c""" 4
.el .IP "\f(CWc\fR" 4
.IX Item "c"
From \fIn.U\fR:
.Sp
This variable gotz nuff tha \ec strang if dat is what tha fuck causes tha echo
command ta suppress newline.  Otherwise it is null.  Correct usage is
\&\f(CW$echo\fR \f(CW$n\fR \*(L"prompt fo' a question: \f(CW$c\fR\*(R".
.ie n .IP """castflags""" 4
.el .IP "\f(CWcastflags\fR" 4
.IX Item "castflags"
From \fId_castneg.U\fR:
.Sp
This variable gotz nuff a gangbangin' flag dat precise bullshit the
compila has castin odd floatin joints ta unsigned long:
0 = ok
1 = couldn't cast < 0
2 = couldn't cast >= 0x80000000
4 = couldn't cast up in argument expression list
.ie n .IP """cat""" 4
.el .IP "\f(CWcat\fR" 4
.IX Item "cat"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha pussaaaaay program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`cat\*(C'\fR n' aint useful.
.ie n .IP """cc""" 4
.el .IP "\f(CWcc\fR" 4
.IX Item "cc"
From \fIcc.U\fR:
.Sp
This variable holdz tha name of a cold-ass lil command ta execute a C compila which
can resolve multiple global references dat happen ta have tha same
name.  Usual joints is \f(CW\*(C`cc\*(C'\fR n' \f(CW\*(C`gcc\*(C'\fR.
Fervent \f(CW\*(C`ANSI\*(C'\fR compilaz may be called \f(CW\*(C`c89\*(C'\fR.  \f(CW\*(C`AIX\*(C'\fR has xlc.
.ie n .IP """cccdlflags""" 4
.el .IP "\f(CWcccdlflags\fR" 4
.IX Item "cccdlflags"
From \fIdlsrc.U\fR:
.Sp
This variable gotz nuff any special flags dat might need ta be
passed wit \f(CW\*(C`cc \-c\*(C'\fR ta compile modulez ta be used ta create a gangbangin' finger-lickin' dirty-ass shared
library dat is ghon be used fo' dynamic loading.  For hpux, this
should be +z.  It be up ta tha makefile ta use dat shit.
.ie n .IP """ccdlflags""" 4
.el .IP "\f(CWccdlflags\fR" 4
.IX Item "ccdlflags"
From \fIdlsrc.U\fR:
.Sp
This variable gotz nuff any special flags dat might need ta be
passed ta cc ta link wit a gangbangin' finger-lickin' dirty-ass shared library fo' dynamic loading.
It be up ta tha makefile ta use dat shit.  For sunos 4.1, it should
be empty.
.ie n .IP """ccflags""" 4
.el .IP "\f(CWccflags\fR" 4
.IX Item "ccflags"
From \fIccflags.U\fR:
.Sp
This variable gotz nuff any additionizzle C compila flags desired by
the user n' shit.  It be up ta tha Makefile ta use all dis bullshit.
.ie n .IP """ccflags_uselargefiles""" 4
.el .IP "\f(CWccflags_uselargefiles\fR" 4
.IX Item "ccflags_uselargefiles"
From \fIuselfs.U\fR:
.Sp
This variable gotz nuff tha compila flags needed by big-ass file builds
and added ta ccflags by hints files.
.ie n .IP """ccname""" 4
.el .IP "\f(CWccname\fR" 4
.IX Item "ccname"
From \fICheckcc.U\fR:
.Sp
This can set either by hints filez or by Configure.  If using
gcc, dis is gcc, n' if not, probably equal ta cc, unimpressive, no?
Some platforms, however, make phat use of dis by storin the
flavor of tha C compila bein used here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  For example if using
the Sun WorkShop suite, ccname is ghon be \f(CW\*(C`workshop\*(C'\fR.
.ie n .IP """ccsymbols""" 4
.el .IP "\f(CWccsymbols\fR" 4
.IX Item "ccsymbols"
From \fICppsym.U\fR:
.Sp
Da variable gotz nuff tha symbols defined by tha C compila ridin' solo.
Da symbols defined by cpp or by cc when it calls cpp is not in
this list, peep cppsymbols n' cppccsymbols.
Da list be a space-separated list of symbol=value tokens.
.ie n .IP """ccversion""" 4
.el .IP "\f(CWccversion\fR" 4
.IX Item "ccversion"
From \fICheckcc.U\fR:
.Sp
This can set either by hints filez or by Configure.  If using
a (non-gcc) vendor cc, dis variable may contain a version for
the compiler.
.ie n .IP """cf_by""" 4
.el .IP "\f(CWcf_by\fR" 4
.IX Item "cf_by"
From \fIcf_who.U\fR:
.Sp
Login name of tha thug whoz ass ran tha Configure script n' answered the
questions. This is used ta tag both \fIconfig.sh\fR n' \fIconfig_h.SH\fR.
.ie n .IP """cf_email""" 4
.el .IP "\f(CWcf_email\fR" 4
.IX Item "cf_email"
From \fIcf_email.U\fR:
.Sp
Electronic mail address of tha thug whoz ass ran Configure. This can be
used by units dat require tha userz e\-mail, like \fIMailList.U\fR.
.ie n .IP """cf_time""" 4
.el .IP "\f(CWcf_time\fR" 4
.IX Item "cf_time"
From \fIcf_who.U\fR:
.Sp
Holdz tha output of tha \f(CW\*(C`date\*(C'\fR command when tha configuration file was
produced. Y'all KNOW dat shit, muthafucka! This is used ta tag both \fIconfig.sh\fR n' \fIconfig_h.SH\fR.
.ie n .IP """charbits""" 4
.el .IP "\f(CWcharbits\fR" 4
.IX Item "charbits"
From \fIcharsize.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`CHARBITS\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bits there be up in a cold-ass lil character.
.ie n .IP """charsize""" 4
.el .IP "\f(CWcharsize\fR" 4
.IX Item "charsize"
From \fIcharsize.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`CHARSIZE\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bytes there be up in a cold-ass lil character.
.ie n .IP """chgrp""" 4
.el .IP "\f(CWchgrp\fR" 4
.IX Item "chgrp"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """chmod""" 4
.el .IP "\f(CWchmod\fR" 4
.IX Item "chmod"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha chmod program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`chmod\*(C'\fR n' aint useful.
.ie n .IP """chown""" 4
.el .IP "\f(CWchown\fR" 4
.IX Item "chown"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """clocktype""" 4
.el .IP "\f(CWclocktype\fR" 4
.IX Item "clocktype"
From \fId_times.U\fR:
.Sp
This variable holdz tha type returned by \fItimes()\fR. Well shiiiit, it can be long,
or clock_t on \f(CW\*(C`BSD\*(C'\fR cribs (in which case <sys/types.h> should be
included).
.ie n .IP """comm""" 4
.el .IP "\f(CWcomm\fR" 4
.IX Item "comm"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha comm program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`comm\*(C'\fR n' aint useful.
.ie n .IP """compress""" 4
.el .IP "\f(CWcompress\fR" 4
.IX Item "compress"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """config_arg0""" 4
.el .IP "\f(CWconfig_arg0\fR" 4
.IX Item "config_arg0"
From \fIOptions.U\fR:
.Sp
This variable gotz nuff tha strang used ta invoke tha Configure
command, as reported by tha shell up in tha \f(CW$0\fR variable.
.ie n .IP """config_argc""" 4
.el .IP "\f(CWconfig_argc\fR" 4
.IX Item "config_argc"
From \fIOptions.U\fR:
.Sp
This variable gotz nuff tha number of command-line arguments
passed ta Configure, as reported by tha shell up in tha $# variable.
Da individual arguments is stored as variablez config_arg1,
config_arg2, etc.
.ie n .IP """config_args""" 4
.el .IP "\f(CWconfig_args\fR" 4
.IX Item "config_args"
From \fIOptions.U\fR:
.Sp
This variable gotz nuff a single strang givin tha command-line
arguments passed ta Configure.	Spaces within arguments,
quotes, n' escaped charactas is not erectly preserved.
To reconstruct tha command line, you must assemble tha individual
command line pieces, given up in config_arg[0\-9]*.
.ie n .IP """gotz nuff""" 4
.el .IP "\f(CWgotz nuff\fR" 4
.IX Item "gotz nuff"
From \fIgotz nuff.U\fR:
.Sp
This variable holdz tha command ta do a grep wit a proper return
status.  On most sane systems it is simply \f(CW\*(C`grep\*(C'\fR.  On crazy systems
it be a grep followed by a cold-ass lil pussaaaaay followed by a test.  This variable
is primarily fo' tha use of other Configure units.
.ie n .IP """cp""" 4
.el .IP "\f(CWcp\fR" 4
.IX Item "cp"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha cp program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`cp\*(C'\fR n' aint useful.
.ie n .IP """cpio""" 4
.el .IP "\f(CWcpio\fR" 4
.IX Item "cpio"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """cpp""" 4
.el .IP "\f(CWcpp\fR" 4
.IX Item "cpp"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha cpp program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`cpp\*(C'\fR n' aint useful.
.ie n .IP """cpp_stuff""" 4
.el .IP "\f(CWcpp_stuff\fR" 4
.IX Item "cpp_stuff"
From \fIcpp_stuff.U\fR:
.Sp
This variable gotz nuff a identification of tha concatenation mechanism
used by tha C preprocessor.
.ie n .IP """cppccsymbols""" 4
.el .IP "\f(CWcppccsymbols\fR" 4
.IX Item "cppccsymbols"
From \fICppsym.U\fR:
.Sp
Da variable gotz nuff tha symbols defined by tha C compiler
when it calls cpp.  Da symbols defined by tha cc ridin' solo or cpp
alone is not up in dis list, peep ccsymbols n' cppsymbols.
Da list be a space-separated list of symbol=value tokens.
.ie n .IP """cppflags""" 4
.el .IP "\f(CWcppflags\fR" 4
.IX Item "cppflags"
From \fIccflags.U\fR:
.Sp
This variable holdz tha flags dat is ghon be passed ta tha C pre\-
processor. Shiiit, dis aint no joke. Well shiiiit, it is up ta tha Makefile ta use dat shit.
.ie n .IP """cpplast""" 4
.el .IP "\f(CWcpplast\fR" 4
.IX Item "cpplast"
From \fIcppstdin.U\fR:
.Sp
This variable has tha same ol' dirty functionalitizzle as cppminus, only it applies
to cpprun n' not cppstdin.
.ie n .IP """cppminus""" 4
.el .IP "\f(CWcppminus\fR" 4
.IX Item "cppminus"
From \fIcppstdin.U\fR:
.Sp
This variable gotz nuff tha second part of tha strang which will invoke
the C preprocessor on tha standard input n' produce ta standard
output.  This variable gonna git tha value \f(CW\*(C`\-\*(C'\fR if cppstdin needs
a minus ta specify standard input, otherwise tha value is "".
.ie n .IP """cpprun""" 4
.el .IP "\f(CWcpprun\fR" 4
.IX Item "cpprun"
From \fIcppstdin.U\fR:
.Sp
This variable gotz nuff tha command which will invoke a C preprocessor
on standard input n' put tha output ta stdout. Well shiiiit, it is guaranteed not
to be a wrapper n' may be a null strang if no preprocessor can be
made directly available. This preprocessor might be different from the
one used by tha C compila n' shit. Don't forget ta append cpplast afta the
preprocessor options.
.ie n .IP """cppstdin""" 4
.el .IP "\f(CWcppstdin\fR" 4
.IX Item "cppstdin"
From \fIcppstdin.U\fR:
.Sp
This variable gotz nuff tha command which will invoke tha C
preprocessor on standard input n' put tha output ta stdout.
It be primarily used by other Configure units dat ask about
preprocessor symbols.
.ie n .IP """cppsymbols""" 4
.el .IP "\f(CWcppsymbols\fR" 4
.IX Item "cppsymbols"
From \fICppsym.U\fR:
.Sp
Da variable gotz nuff tha symbols defined by tha C preprocessor
alone.  Da symbols defined by cc or by cc when it calls cpp are
not up in dis list, peep ccsymbols n' cppccsymbols.
Da list be a space-separated list of symbol=value tokens.
.ie n .IP """crypt_r_proto""" 4
.el .IP "\f(CWcrypt_r_proto\fR" 4
.IX Item "crypt_r_proto"
From \fId_crypt_r.U\fR:
.Sp
This variable encodes tha prototype of crypt_r.
It be zero if d_crypt_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_crypt_r
is defined.
.ie n .IP """cryptlib""" 4
.el .IP "\f(CWcryptlib\fR" 4
.IX Item "cryptlib"
From \fId_crypt.U\fR:
.Sp
This variable holdz \-lcrypt or tha path ta a \fIlibcrypt.a\fR archive if
the \fIcrypt()\fR function aint defined up in tha standard C library. Well shiiiit, it is
up ta tha Makefile ta use all dis bullshit.
.ie n .IP """csh""" 4
.el .IP "\f(CWcsh\fR" 4
.IX Item "csh"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha csh program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`csh\*(C'\fR n' aint useful.
.ie n .IP """ctermid_r_proto""" 4
.el .IP "\f(CWctermid_r_proto\fR" 4
.IX Item "ctermid_r_proto"
From \fId_ctermid_r.U\fR:
.Sp
This variable encodes tha prototype of ctermid_r.
It be zero if d_ctermid_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_ctermid_r
is defined.
.ie n .IP """ctime_r_proto""" 4
.el .IP "\f(CWctime_r_proto\fR" 4
.IX Item "ctime_r_proto"
From \fId_ctime_r.U\fR:
.Sp
This variable encodes tha prototype of ctime_r.
It be zero if d_ctime_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_ctime_r
is defined.
.SS "d"
.IX Subsection "d"
.ie n .IP """d_\|_fwalk""" 4
.el .IP "\f(CWd_\|_fwalk\fR" 4
.IX Item "d__fwalk"
From \fId_\|_fwalk.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_\|_FWALK\*(C'\fR if \fI_fwalk()\fR is
available ta apply a gangbangin' function ta all tha file handles.
.ie n .IP """d_access""" 4
.el .IP "\f(CWd_access\fR" 4
.IX Item "d_access"
From \fId_access.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_ACCESS\*(C'\fR if tha \fIaccess()\fR system
call be available ta check fo' access permissions rockin real IDs.
.ie n .IP """d_accessx""" 4
.el .IP "\f(CWd_accessx\fR" 4
.IX Item "d_accessx"
From \fId_accessx.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ACCESSX\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIaccessx()\fR routine be available.
.ie n .IP """d_aintl""" 4
.el .IP "\f(CWd_aintl\fR" 4
.IX Item "d_aintl"
From \fId_aintl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_AINTL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIaintl()\fR routine be available.
If copysignl be also present we can emulate modfl.
.ie n .IP """d_alarm""" 4
.el .IP "\f(CWd_alarm\fR" 4
.IX Item "d_alarm"
From \fId_alarm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ALARM\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIalarm()\fR routine be available.
.ie n .IP """d_archlib""" 4
.el .IP "\f(CWd_archlib\fR" 4
.IX Item "d_archlib"
From \fIarchlib.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`ARCHLIB\*(C'\fR ta hold tha pathname
of architecture-dependent library filez fo' \f(CW$package\fR.  If
\&\f(CW$archlib\fR is tha same ol' dirty as \f(CW$privlib\fR, then dis is set ta undef.
.ie n .IP """d_asctime64""" 4
.el .IP "\f(CWd_asctime64\fR" 4
.IX Item "d_asctime64"
From \fId_timefuncs64.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_ASCTIME64\s0 symbol, which
indicates ta tha C program dat tha asctime64 () routine be available.
.ie n .IP """d_asctime_r""" 4
.el .IP "\f(CWd_asctime_r\fR" 4
.IX Item "d_asctime_r"
From \fId_asctime_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ASCTIME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIasctime_r()\fR
routine be available.
.ie n .IP """d_atolf""" 4
.el .IP "\f(CWd_atolf\fR" 4
.IX Item "d_atolf"
From \fIatolf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ATOLF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIatolf()\fR routine be available.
.ie n .IP """d_atoll""" 4
.el .IP "\f(CWd_atoll\fR" 4
.IX Item "d_atoll"
From \fIatoll.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ATOLL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIatoll()\fR routine be available.
.ie n .IP """d_attribute_deprecated""" 4
.el .IP "\f(CWd_attribute_deprecated\fR" 4
.IX Item "d_attribute_deprecated"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HASATTRIBUTE_DEPRECATED\*(C'\fR, which
indicates dat \f(CW\*(C`GCC\*(C'\fR can handle tha attribute fo' markin deprecated
APIs
.ie n .IP """d_attribute_format""" 4
.el .IP "\f(CWd_attribute_format\fR" 4
.IX Item "d_attribute_format"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HASATTRIBUTE_FORMAT\*(C'\fR, which
indicates tha C compila can check fo' printf-like formats.
.ie n .IP """d_attribute_malloc""" 4
.el .IP "\f(CWd_attribute_malloc\fR" 4
.IX Item "d_attribute_malloc"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HASATTRIBUTE_MALLOC\*(C'\fR, which
indicates tha C compila can KNOW functions as having
malloc-like semantics.
.ie n .IP """d_attribute_nonnull""" 4
.el .IP "\f(CWd_attribute_nonnull\fR" 4
.IX Item "d_attribute_nonnull"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HASATTRIBUTE_NONNULL\*(C'\fR, which
indicates dat tha C compila can know dat certain arguments
must not be \f(CW\*(C`NULL\*(C'\fR, n' will check accordingly at compile time.
.ie n .IP """d_attribute_noreturn""" 4
.el .IP "\f(CWd_attribute_noreturn\fR" 4
.IX Item "d_attribute_noreturn"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HASATTRIBUTE_NORETURN\*(C'\fR, which
indicates dat tha C compila can know dat certain functions
are guaranteed never ta return.
.ie n .IP """d_attribute_pure""" 4
.el .IP "\f(CWd_attribute_pure\fR" 4
.IX Item "d_attribute_pure"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HASATTRIBUTE_PURE\*(C'\fR, which
indicates dat tha C compila can know dat certain functions
are \f(CW\*(C`pure\*(C'\fR functions, meanin dat they have no side effects, and
only rely on function input \fIand/or\fR global data fo' they thangs up in dis biatch.
.ie n .IP """d_attribute_unused""" 4
.el .IP "\f(CWd_attribute_unused\fR" 4
.IX Item "d_attribute_unused"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HASATTRIBUTE_UNUSED\*(C'\fR, which
indicates dat tha C compila can know dat certain variables
and arguments may not always be used, n' ta not throw warnings
if they don't git used.
.ie n .IP """d_attribute_warn_unused_result""" 4
.el .IP "\f(CWd_attribute_warn_unused_result\fR" 4
.IX Item "d_attribute_warn_unused_result"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines
\&\f(CW\*(C`HASATTRIBUTE_WARN_UNUSED_RESULT\*(C'\fR, which indicates dat tha C
compila can know dat certain functions gotz a return joints
that must not be ignored, like fuckin \fImalloc()\fR or \fIopen()\fR.
.ie n .IP """d_bcmp""" 4
.el .IP "\f(CWd_bcmp\fR" 4
.IX Item "d_bcmp"
From \fId_bcmp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_BCMP\*(C'\fR symbol if
the \fIbcmp()\fR routine be available ta compare strings.
.ie n .IP """d_bcopy""" 4
.el .IP "\f(CWd_bcopy\fR" 4
.IX Item "d_bcopy"
From \fId_bcopy.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_BCOPY\*(C'\fR symbol if
the \fIbcopy()\fR routine be available ta copy strings.
.ie n .IP """d_bsd""" 4
.el .IP "\f(CWd_bsd\fR" 4
.IX Item "d_bsd"
From \fIGuess.U\fR:
.Sp
This symbol conditionally defines tha symbol \f(CW\*(C`BSD\*(C'\fR when hustlin on a
\&\f(CW\*(C`BSD\*(C'\fR system.
.ie n .IP """d_bsdgetpgrp""" 4
.el .IP "\f(CWd_bsdgetpgrp\fR" 4
.IX Item "d_bsdgetpgrp"
From \fId_getpgrp.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_BSD_GETPGRP\*(C'\fR if
getpgrp needz one arguments whereas \f(CW\*(C`USG\*(C'\fR one needz none.
.ie n .IP """d_bsdsetpgrp""" 4
.el .IP "\f(CWd_bsdsetpgrp\fR" 4
.IX Item "d_bsdsetpgrp"
From \fId_setpgrp.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_BSD_SETPGRP\*(C'\fR if
setpgrp needz two arguments whereas \f(CW\*(C`USG\*(C'\fR one needz none.
See also d_setpgid fo' a \f(CW\*(C`POSIX\*(C'\fR intercourse.
.ie n .IP """d_builtin_choose_expr""" 4
.el .IP "\f(CWd_builtin_choose_expr\fR" 4
.IX Item "d_builtin_choose_expr"
From \fId_builtin.U\fR:
.Sp
This conditionally defines \f(CW\*(C`HAS_BUILTIN_CHOOSE_EXPR\*(C'\fR, which
indicates dat tha compila supports _\|_builtin_choose_expr(x,y,z).
This built-in function be analogous ta tha \f(CW\*(C`x?y:z\*(C'\fR operator up in C,
except dat tha expression returned has its type unaltered by
promotion rulez fo' realz. Also, tha built-in function do not evaluate
the expression dat was not chosen.
.ie n .IP """d_builtin_expect""" 4
.el .IP "\f(CWd_builtin_expect\fR" 4
.IX Item "d_builtin_expect"
From \fId_builtin.U\fR:
.Sp
This conditionally defines \f(CW\*(C`HAS_BUILTIN_EXPECT\*(C'\fR, which indicates
that tha compila supports _\|_builtin_expect(exp,c).  Yo ass may use
_\|_builtin_expect ta provide tha compila wit branch prediction
information.
.ie n .IP """d_bzero""" 4
.el .IP "\f(CWd_bzero\fR" 4
.IX Item "d_bzero"
From \fId_bzero.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_BZERO\*(C'\fR symbol if
the \fIbzero()\fR routine be available ta set memory ta 0.
.ie n .IP """d_c99_variadic_macros""" 4
.el .IP "\f(CWd_c99_variadic_macros\fR" 4
.IX Item "d_c99_variadic_macros"
From \fId_c99_variadic.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_C99_VARIADIC_MACROS\s0
symbol, which indicates ta tha C program dat C99 variadic macros
are available.
.ie n .IP """d_casti32""" 4
.el .IP "\f(CWd_casti32\fR" 4
.IX Item "d_casti32"
From \fId_casti32.U\fR:
.Sp
This variable conditionally defines \s-1CASTI32,\s0 which indicates
whether tha C compila can cast big-ass floats ta 32\-bit ints.
.ie n .IP """d_castneg""" 4
.el .IP "\f(CWd_castneg\fR" 4
.IX Item "d_castneg"
From \fId_castneg.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`CASTNEG\*(C'\fR, which indicates
whether tha C compila can cast wack float ta unsigned.
.ie n .IP """d_charvspr""" 4
.el .IP "\f(CWd_charvspr\fR" 4
.IX Item "d_charvspr"
From \fId_vprintf.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`CHARVSPRINTF\*(C'\fR if dis system
has vsprintf returnin type (char*).  Da trend seems ta be to
declare it as \*(L"int \fIvsprintf()\fR\*(R".
.ie n .IP """d_chown""" 4
.el .IP "\f(CWd_chown\fR" 4
.IX Item "d_chown"
From \fId_chown.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CHOWN\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIchown()\fR routine be available.
.ie n .IP """d_chroot""" 4
.el .IP "\f(CWd_chroot\fR" 4
.IX Item "d_chroot"
From \fId_chroot.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CHROOT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIchroot()\fR routine be available.
.ie n .IP """d_chsize""" 4
.el .IP "\f(CWd_chsize\fR" 4
.IX Item "d_chsize"
From \fId_chsize.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`CHSIZE\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIchsize()\fR routine be available
to truncate files.  Yo ass might need a \-lx ta git dis routine.
.ie n .IP """d_class""" 4
.el .IP "\f(CWd_class\fR" 4
.IX Item "d_class"
From \fId_class.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CLASS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIclass()\fR routine be available.
.ie n .IP """d_clearenv""" 4
.el .IP "\f(CWd_clearenv\fR" 4
.IX Item "d_clearenv"
From \fId_clearenv.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CLEARENV\*(C'\fR symbol, which
indicates ta tha C program dat tha clearenv () routine be available.
.ie n .IP """d_closedir""" 4
.el .IP "\f(CWd_closedir\fR" 4
.IX Item "d_closedir"
From \fId_closedir.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_CLOSEDIR\*(C'\fR if \fIclosedir()\fR is
available.
.ie n .IP """d_cmsghdr_s""" 4
.el .IP "\f(CWd_cmsghdr_s\fR" 4
.IX Item "d_cmsghdr_s"
From \fId_cmsghdr_s.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRUCT_CMSGHDR\*(C'\fR symbol,
which indicates dat tha struct cmsghdr is supported.
.ie n .IP """d_const""" 4
.el .IP "\f(CWd_const\fR" 4
.IX Item "d_const"
From \fId_const.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HASCONST\*(C'\fR symbol, which
indicates ta tha C program dat dis C compila knows bout the
const type.
.ie n .IP """d_copysignl""" 4
.el .IP "\f(CWd_copysignl\fR" 4
.IX Item "d_copysignl"
From \fId_copysignl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_COPYSIGNL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIcopysignl()\fR routine be available.
If aintl be also present we can emulate modfl.
.ie n .IP """d_cplusplus""" 4
.el .IP "\f(CWd_cplusplus\fR" 4
.IX Item "d_cplusplus"
From \fId_cplusplus.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_CPLUSPLUS\*(C'\fR symbol, which
indicates dat a \*(C+ compila was used ta compiled Perl n' will be
used ta compile extensions.
.ie n .IP """d_crypt""" 4
.el .IP "\f(CWd_crypt\fR" 4
.IX Item "d_crypt"
From \fId_crypt.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`CRYPT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIcrypt()\fR routine be available
to encrypt passwordz n' tha like.
.ie n .IP """d_crypt_r""" 4
.el .IP "\f(CWd_crypt_r\fR" 4
.IX Item "d_crypt_r"
From \fId_crypt_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CRYPT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIcrypt_r()\fR
routine be available.
.ie n .IP """d_csh""" 4
.el .IP "\f(CWd_csh\fR" 4
.IX Item "d_csh"
From \fId_csh.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`CSH\*(C'\fR symbol, which
indicates ta tha C program dat tha C\-shell exists.
.ie n .IP """d_ctermid""" 4
.el .IP "\f(CWd_ctermid\fR" 4
.IX Item "d_ctermid"
From \fId_ctermid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`CTERMID\*(C'\fR if \fIctermid()\fR is
available ta generate filename fo' terminal.
.ie n .IP """d_ctermid_r""" 4
.el .IP "\f(CWd_ctermid_r\fR" 4
.IX Item "d_ctermid_r"
From \fId_ctermid_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CTERMID_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIctermid_r()\fR
routine be available.
.ie n .IP """d_ctime64""" 4
.el .IP "\f(CWd_ctime64\fR" 4
.IX Item "d_ctime64"
From \fId_timefuncs64.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_CTIME64\s0 symbol, which
indicates ta tha C program dat tha ctime64 () routine be available.
.ie n .IP """d_ctime_r""" 4
.el .IP "\f(CWd_ctime_r\fR" 4
.IX Item "d_ctime_r"
From \fId_ctime_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CTIME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIctime_r()\fR
routine be available.
.ie n .IP """d_cuserid""" 4
.el .IP "\f(CWd_cuserid\fR" 4
.IX Item "d_cuserid"
From \fId_cuserid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_CUSERID\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIcuserid()\fR routine be available
to git characta login names.
.ie n .IP """d_dbl_dig""" 4
.el .IP "\f(CWd_dbl_dig\fR" 4
.IX Item "d_dbl_dig"
From \fId_dbl_dig.U\fR:
.Sp
This variable conditionally defines d_dbl_dig if dis system's
header filez provide \f(CW\*(C`DBL_DIG\*(C'\fR, which is tha number of significant
digits up in a thugged-out double precision number.
.ie n .IP """d_dbminitproto""" 4
.el .IP "\f(CWd_dbminitproto\fR" 4
.IX Item "d_dbminitproto"
From \fId_dbminitproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_DBMINIT_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIdbminit()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_difftime""" 4
.el .IP "\f(CWd_difftime\fR" 4
.IX Item "d_difftime"
From \fId_difftime.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_DIFFTIME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIdifftime()\fR routine be available.
.ie n .IP """d_difftime64""" 4
.el .IP "\f(CWd_difftime64\fR" 4
.IX Item "d_difftime64"
From \fId_timefuncs64.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_DIFFTIME64\s0 symbol, which
indicates ta tha C program dat tha difftime64 () routine be available.
.ie n .IP """d_dir_dd_fd""" 4
.el .IP "\f(CWd_dir_dd_fd\fR" 4
.IX Item "d_dir_dd_fd"
From \fId_dir_dd_fd.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_DIR_DD_FD\*(C'\fR symbol, which
indicates dat tha \f(CW\*(C`DIR\*(C'\fR directory stream type gotz nuff a member
variable called dd_fd.
.ie n .IP """d_dirfd""" 4
.el .IP "\f(CWd_dirfd\fR" 4
.IX Item "d_dirfd"
From \fId_dirfd.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_DIRFD\*(C'\fR constant,
which indicates ta tha C program dat \fIdirfd()\fR be available
to return tha file descriptor of a gangbangin' finger-lickin' directory stream.
.ie n .IP """d_dirnamlen""" 4
.el .IP "\f(CWd_dirnamlen\fR" 4
.IX Item "d_dirnamlen"
From \fIi_dirent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`DIRNAMLEN\*(C'\fR, which indicates
to tha C program dat tha length of directory entry names is
provided by a thugged-out d_namelen field.
.ie n .IP """d_dlerror""" 4
.el .IP "\f(CWd_dlerror\fR" 4
.IX Item "d_dlerror"
From \fId_dlerror.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_DLERROR\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIdlerror()\fR routine be available.
.ie n .IP """d_dlopen""" 4
.el .IP "\f(CWd_dlopen\fR" 4
.IX Item "d_dlopen"
From \fId_dlopen.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_DLOPEN\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIdlopen()\fR routine be available.
.ie n .IP """d_dlsymun""" 4
.el .IP "\f(CWd_dlsymun\fR" 4
.IX Item "d_dlsymun"
From \fId_dlsymun.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`DLSYM_NEEDS_UNDERSCORE\*(C'\fR, which
indicates dat we need ta prepend a underscore ta tha symbol
name before callin \fIdlsym()\fR.
.ie n .IP """d_dosuid""" 4
.el .IP "\f(CWd_dosuid\fR" 4
.IX Item "d_dosuid"
From \fId_dosuid.U\fR:
.Sp
This variable conditionally defines tha symbol \f(CW\*(C`DOSUID\*(C'\fR, which
 drops some lyrics ta tha C program dat it should bang setuid emulation code
on hosts which have setuid #! scripts disabled.
.ie n .IP """d_drand48_r""" 4
.el .IP "\f(CWd_drand48_r\fR" 4
.IX Item "d_drand48_r"
From \fId_drand48_r.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_DRAND48_R\s0 symbol,
which indicates ta tha C program dat tha \fIdrand48_r()\fR
routine be available.
.ie n .IP """d_drand48proto""" 4
.el .IP "\f(CWd_drand48proto\fR" 4
.IX Item "d_drand48proto"
From \fId_drand48proto.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_DRAND48_PROTO\s0 symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIdrand48()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_dup2""" 4
.el .IP "\f(CWd_dup2\fR" 4
.IX Item "d_dup2"
From \fId_dup2.U\fR:
.Sp
This variable conditionally defines \s-1HAS_DUP2\s0 if \fIdup2()\fR is
available ta duplicate file descriptors.
.ie n .IP """d_eaccess""" 4
.el .IP "\f(CWd_eaccess\fR" 4
.IX Item "d_eaccess"
From \fId_eaccess.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_EACCESS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIeaccess()\fR routine be available.
.ie n .IP """d_endgrent""" 4
.el .IP "\f(CWd_endgrent\fR" 4
.IX Item "d_endgrent"
From \fId_endgrent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDGRENT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIendgrent()\fR routine be available
for sequential access of tha crew database.
.ie n .IP """d_endgrent_r""" 4
.el .IP "\f(CWd_endgrent_r\fR" 4
.IX Item "d_endgrent_r"
From \fId_endgrent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDGRENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIendgrent_r()\fR
routine be available.
.ie n .IP """d_endhent""" 4
.el .IP "\f(CWd_endhent\fR" 4
.IX Item "d_endhent"
From \fId_endhent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_ENDHOSTENT\*(C'\fR if \fIendhostent()\fR is
available ta close whatever was bein used fo' host queries.
.ie n .IP """d_endhostent_r""" 4
.el .IP "\f(CWd_endhostent_r\fR" 4
.IX Item "d_endhostent_r"
From \fId_endhostent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDHOSTENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIendhostent_r()\fR
routine be available.
.ie n .IP """d_endnent""" 4
.el .IP "\f(CWd_endnent\fR" 4
.IX Item "d_endnent"
From \fId_endnent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_ENDNETENT\*(C'\fR if \fIendnetent()\fR is
available ta close whatever was bein used fo' network queries.
.ie n .IP """d_endnetent_r""" 4
.el .IP "\f(CWd_endnetent_r\fR" 4
.IX Item "d_endnetent_r"
From \fId_endnetent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDNETENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIendnetent_r()\fR
routine be available.
.ie n .IP """d_endpent""" 4
.el .IP "\f(CWd_endpent\fR" 4
.IX Item "d_endpent"
From \fId_endpent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_ENDPROTOENT\*(C'\fR if \fIendprotoent()\fR is
available ta close whatever was bein used fo' protocol queries.
.ie n .IP """d_endprotoent_r""" 4
.el .IP "\f(CWd_endprotoent_r\fR" 4
.IX Item "d_endprotoent_r"
From \fId_endprotoent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDPROTOENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIendprotoent_r()\fR
routine be available.
.ie n .IP """d_endpwent""" 4
.el .IP "\f(CWd_endpwent\fR" 4
.IX Item "d_endpwent"
From \fId_endpwent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDPWENT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIendpwent()\fR routine be available
for sequential access of tha passwd database.
.ie n .IP """d_endpwent_r""" 4
.el .IP "\f(CWd_endpwent_r\fR" 4
.IX Item "d_endpwent_r"
From \fId_endpwent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDPWENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIendpwent_r()\fR
routine be available.
.ie n .IP """d_endsent""" 4
.el .IP "\f(CWd_endsent\fR" 4
.IX Item "d_endsent"
From \fId_endsent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_ENDSERVENT\*(C'\fR if \fIendservent()\fR is
available ta close whatever was bein used fo' steez queries.
.ie n .IP """d_endservent_r""" 4
.el .IP "\f(CWd_endservent_r\fR" 4
.IX Item "d_endservent_r"
From \fId_endservent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ENDSERVENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIendservent_r()\fR
routine be available.
.ie n .IP """d_eofnblk""" 4
.el .IP "\f(CWd_eofnblk\fR" 4
.IX Item "d_eofnblk"
From \fInblock_io.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`EOF_NONBLOCK\*(C'\fR if \f(CW\*(C`EOF\*(C'\fR can be seen
when readin from a non-blockin I/O source.
.ie n .IP """d_eunice""" 4
.el .IP "\f(CWd_eunice\fR" 4
.IX Item "d_eunice"
From \fIGuess.U\fR:
.Sp
This variable conditionally defines tha symbols \f(CW\*(C`EUNICE\*(C'\fR n' \f(CW\*(C`VAX\*(C'\fR, which
alerts tha C program dat it must deal wit idiosyncrasiez of \f(CW\*(C`VMS\*(C'\fR.
.ie n .IP """d_faststdio""" 4
.el .IP "\f(CWd_faststdio\fR" 4
.IX Item "d_faststdio"
From \fId_faststdio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FAST_STDIO\*(C'\fR symbol,
which indicates ta tha C program dat tha \*(L"fast stdio\*(R" be available
to manipulate tha stdio buffers directly.
.ie n .IP """d_fchdir""" 4
.el .IP "\f(CWd_fchdir\fR" 4
.IX Item "d_fchdir"
From \fId_fchdir.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FCHDIR\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfchdir()\fR routine be available.
.ie n .IP """d_fchmod""" 4
.el .IP "\f(CWd_fchmod\fR" 4
.IX Item "d_fchmod"
From \fId_fchmod.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FCHMOD\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfchmod()\fR routine be available
to chizzle mode of opened files.
.ie n .IP """d_fchown""" 4
.el .IP "\f(CWd_fchown\fR" 4
.IX Item "d_fchown"
From \fId_fchown.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FCHOWN\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfchown()\fR routine be available
to chizzle ballershizzle of opened files.
.ie n .IP """d_fcntl""" 4
.el .IP "\f(CWd_fcntl\fR" 4
.IX Item "d_fcntl"
From \fId_fcntl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FCNTL\*(C'\fR symbol, n' indicates
whether tha \fIfcntl()\fR function exists
.ie n .IP """d_fcntl_can_lock""" 4
.el .IP "\f(CWd_fcntl_can_lock\fR" 4
.IX Item "d_fcntl_can_lock"
From \fId_fcntl_can_lock.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`FCNTL_CAN_LOCK\*(C'\fR symbol
and indicates whether file lockin wit \fIfcntl()\fR works.
.ie n .IP """d_fd_macros""" 4
.el .IP "\f(CWd_fd_macros\fR" 4
.IX Item "d_fd_macros"
From \fId_fd_set.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`HAS_FD_MACROS\*(C'\fR symbol,
which indicates if yo' C compila knows bout tha macros which
manipulate a fd_set.
.ie n .IP """d_fd_set""" 4
.el .IP "\f(CWd_fd_set\fR" 4
.IX Item "d_fd_set"
From \fId_fd_set.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`HAS_FD_SET\*(C'\fR symbol,
which indicates if yo' C compila knows bout tha fd_set typedef.
.ie n .IP """d_fds_bits""" 4
.el .IP "\f(CWd_fds_bits\fR" 4
.IX Item "d_fds_bits"
From \fId_fd_set.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`HAS_FDS_BITS\*(C'\fR symbol,
which indicates if yo' fd_set typedef gotz nuff tha fds_bits member.
If you have a fd_set typedef yo, but tha dweebs whoz ass installed it did
a half-fast thang n' neglected ta provide tha macros ta manipulate
an fd_set, \f(CW\*(C`HAS_FDS_BITS\*(C'\fR will let our asses know how tha fuck ta fix tha gaffe.
.ie n .IP """d_fgetpos""" 4
.el .IP "\f(CWd_fgetpos\fR" 4
.IX Item "d_fgetpos"
From \fId_fgetpos.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_FGETPOS\*(C'\fR if \fIfgetpos()\fR is
available ta git tha file posizzle indicator.
.ie n .IP """d_finite""" 4
.el .IP "\f(CWd_finite\fR" 4
.IX Item "d_finite"
From \fId_finite.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FINITE\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfinite()\fR routine be available.
.ie n .IP """d_finitel""" 4
.el .IP "\f(CWd_finitel\fR" 4
.IX Item "d_finitel"
From \fId_finitel.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FINITEL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfinitel()\fR routine be available.
.ie n .IP """d_flexfnam""" 4
.el .IP "\f(CWd_flexfnam\fR" 4
.IX Item "d_flexfnam"
From \fId_flexfnam.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`FLEXFILENAMES\*(C'\fR symbol, which
indicates dat tha system supports filenames longer than 14 characters.
.ie n .IP """d_flock""" 4
.el .IP "\f(CWd_flock\fR" 4
.IX Item "d_flock"
From \fId_flock.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_FLOCK\*(C'\fR if \fIflock()\fR is
available ta do file locking.
.ie n .IP """d_flockproto""" 4
.el .IP "\f(CWd_flockproto\fR" 4
.IX Item "d_flockproto"
From \fId_flockproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FLOCK_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIflock()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_fork""" 4
.el .IP "\f(CWd_fork\fR" 4
.IX Item "d_fork"
From \fId_fork.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FORK\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfork()\fR routine be available.
.ie n .IP """d_fp_class""" 4
.el .IP "\f(CWd_fp_class\fR" 4
.IX Item "d_fp_class"
From \fId_fp_class.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FP_CLASS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfp_class()\fR routine be available.
.ie n .IP """d_fpathconf""" 4
.el .IP "\f(CWd_fpathconf\fR" 4
.IX Item "d_fpathconf"
From \fId_pathconf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FPATHCONF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIpathconf()\fR routine be available
to determine file-system related limits n' options associated
with a given open file descriptor.
.ie n .IP """d_fpclass""" 4
.el .IP "\f(CWd_fpclass\fR" 4
.IX Item "d_fpclass"
From \fId_fpclass.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FPCLASS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfpclass()\fR routine be available.
.ie n .IP """d_fpclassify""" 4
.el .IP "\f(CWd_fpclassify\fR" 4
.IX Item "d_fpclassify"
From \fId_fpclassify.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FPCLASSIFY\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfpclassify()\fR routine be available.
.ie n .IP """d_fpclassl""" 4
.el .IP "\f(CWd_fpclassl\fR" 4
.IX Item "d_fpclassl"
From \fId_fpclassl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FPCLASSL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfpclassl()\fR routine be available.
.ie n .IP """d_fpos64_t""" 4
.el .IP "\f(CWd_fpos64_t\fR" 4
.IX Item "d_fpos64_t"
From \fId_fpos64_t.U\fR:
.Sp
This symbol is ghon be defined if tha C compila supports fpos64_t.
.ie n .IP """d_frexpl""" 4
.el .IP "\f(CWd_frexpl\fR" 4
.IX Item "d_frexpl"
From \fId_frexpl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FREXPL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfrexpl()\fR routine be available.
.ie n .IP """d_fs_data_s""" 4
.el .IP "\f(CWd_fs_data_s\fR" 4
.IX Item "d_fs_data_s"
From \fId_fs_data_s.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRUCT_FS_DATA\*(C'\fR symbol,
which indicates dat tha struct fs_data is supported.
.ie n .IP """d_fseeko""" 4
.el .IP "\f(CWd_fseeko\fR" 4
.IX Item "d_fseeko"
From \fId_fseeko.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FSEEKO\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfseeko()\fR routine be available.
.ie n .IP """d_fsetpos""" 4
.el .IP "\f(CWd_fsetpos\fR" 4
.IX Item "d_fsetpos"
From \fId_fsetpos.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_FSETPOS\*(C'\fR if \fIfsetpos()\fR is
available ta set tha file posizzle indicator.
.ie n .IP """d_fstatfs""" 4
.el .IP "\f(CWd_fstatfs\fR" 4
.IX Item "d_fstatfs"
From \fId_fstatfs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FSTATFS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfstatfs()\fR routine be available.
.ie n .IP """d_fstatvfs""" 4
.el .IP "\f(CWd_fstatvfs\fR" 4
.IX Item "d_fstatvfs"
From \fId_statvfs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FSTATVFS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfstatvfs()\fR routine be available.
.ie n .IP """d_fsync""" 4
.el .IP "\f(CWd_fsync\fR" 4
.IX Item "d_fsync"
From \fId_fsync.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FSYNC\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfsync()\fR routine be available.
.ie n .IP """d_ftello""" 4
.el .IP "\f(CWd_ftello\fR" 4
.IX Item "d_ftello"
From \fId_ftello.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FTELLO\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIftello()\fR routine be available.
.ie n .IP """d_ftime""" 4
.el .IP "\f(CWd_ftime\fR" 4
.IX Item "d_ftime"
From \fId_ftime.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FTIME\*(C'\fR symbol, which indicates
that tha \fIftime()\fR routine exists, n' you can put dat on yo' toast.  Da \fIftime()\fR routine is basically
a sub-second accuracy clock.
.ie n .IP """d_futimes""" 4
.el .IP "\f(CWd_futimes\fR" 4
.IX Item "d_futimes"
From \fId_futimes.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_FUTIMES\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIfutimes()\fR routine be available.
.ie n .IP """d_Gconvert""" 4
.el .IP "\f(CWd_Gconvert\fR" 4
.IX Item "d_Gconvert"
From \fId_gconvert.U\fR:
.Sp
This variable holdz what tha fuck Gconvert is defined as ta convert
floatin point numbers tha fuck into strings.  By default, Configure
sets \f(CW\*(C`this\*(C'\fR macro ta use tha straight-up original gangsta of gconvert, gcvt, or sprintf
that pass sprintf\-%g\-like behavior tests, n' you can put dat on yo' toast.  If perl is using
long doubles, tha macro uses tha straight-up original gangsta of tha following
functions dat pass Configurez tests: qgcvt, sprintf (if
Configure knows how tha fuck ta make sprintf format long doubles\*(--see
sPRIgldbl), gconvert, gcvt, n' sprintf (castin ta double).
Da gconvert_preference n' gconvert_ld_preference variables
can be used ta alta Configurez preferences, fo' doublez and
long doubles, respectively.  If present, they contain a
space-separated list of one or mo' of tha above function
names up in tha order they should be tried.
.Sp
d_Gconvert may be set ta override Configure wit a platform\-
specific function. I aint talkin' bout chicken n' gravy biatch.  If dis function expects a thugged-out double, a
different value may need ta be set by tha \fIuselongdouble.cbu\fR
call-back unit so dat long doublez can be formatted without
loss of precision.
.ie n .IP """d_gdbm_ndbm_h_uses_prototypes""" 4
.el .IP "\f(CWd_gdbm_ndbm_h_uses_prototypes\fR" 4
.IX Item "d_gdbm_ndbm_h_uses_prototypes"
From \fIi_ndbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`NDBM_H_USES_PROTOTYPES\*(C'\fR symbol,
which indicates dat tha gdbm\-\fIndbm.h\fR include file uses real \f(CW\*(C`ANSI\*(C'\fR C
prototypes instead of K&R steez function declarations. K&R style
declarations is unsupported up in \*(C+, so tha include file requires
special handlin when rockin a \*(C+ compila n' dis variable is
undefined. Y'all KNOW dat shit, muthafucka! Consult tha different d_*ndbm_h_uses_prototypes variables
to git tha same shiznit fo' alternatizzle \fIndbm.h\fR include files.
.ie n .IP """d_gdbmndbm_h_uses_prototypes""" 4
.el .IP "\f(CWd_gdbmndbm_h_uses_prototypes\fR" 4
.IX Item "d_gdbmndbm_h_uses_prototypes"
From \fIi_ndbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`NDBM_H_USES_PROTOTYPES\*(C'\fR symbol,
which indicates dat tha \fIgdbm/ndbm.h\fR include file uses real \f(CW\*(C`ANSI\*(C'\fR C
prototypes instead of K&R steez function declarations. K&R style
declarations is unsupported up in \*(C+, so tha include file requires
special handlin when rockin a \*(C+ compila n' dis variable is
undefined. Y'all KNOW dat shit, muthafucka! Consult tha different d_*ndbm_h_uses_prototypes variables
to git tha same shiznit fo' alternatizzle \fIndbm.h\fR include files.
.ie n .IP """d_getaddrinfo""" 4
.el .IP "\f(CWd_getaddrinfo\fR" 4
.IX Item "d_getaddrinfo"
From \fId_getaddrinfo.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETADDRINFO\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetaddrinfo()\fR function
is available.
.ie n .IP """d_getcwd""" 4
.el .IP "\f(CWd_getcwd\fR" 4
.IX Item "d_getcwd"
From \fId_getcwd.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETCWD\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetcwd()\fR routine be available
to git tha current hustlin directory.
.ie n .IP """d_getespwnam""" 4
.el .IP "\f(CWd_getespwnam\fR" 4
.IX Item "d_getespwnam"
From \fId_getespwnam.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETESPWNAM\*(C'\fR if \fIgetespwnam()\fR is
available ta retrieve enhanced (shadow) password entries by name.
.ie n .IP """d_getfsstat""" 4
.el .IP "\f(CWd_getfsstat\fR" 4
.IX Item "d_getfsstat"
From \fId_getfsstat.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETFSSTAT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetfsstat()\fR routine be available.
.ie n .IP """d_getgrent""" 4
.el .IP "\f(CWd_getgrent\fR" 4
.IX Item "d_getgrent"
From \fId_getgrent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETGRENT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetgrent()\fR routine be available
for sequential access of tha crew database.
.ie n .IP """d_getgrent_r""" 4
.el .IP "\f(CWd_getgrent_r\fR" 4
.IX Item "d_getgrent_r"
From \fId_getgrent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETGRENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetgrent_r()\fR
routine be available.
.ie n .IP """d_getgrgid_r""" 4
.el .IP "\f(CWd_getgrgid_r\fR" 4
.IX Item "d_getgrgid_r"
From \fId_getgrgid_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETGRGID_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetgrgid_r()\fR
routine be available.
.ie n .IP """d_getgrnam_r""" 4
.el .IP "\f(CWd_getgrnam_r\fR" 4
.IX Item "d_getgrnam_r"
From \fId_getgrnam_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETGRNAM_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetgrnam_r()\fR
routine be available.
.ie n .IP """d_getgrps""" 4
.el .IP "\f(CWd_getgrps\fR" 4
.IX Item "d_getgrps"
From \fId_getgrps.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETGROUPS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetgroups()\fR routine be available
to git tha list of process groups.
.ie n .IP """d_gethbyaddr""" 4
.el .IP "\f(CWd_gethbyaddr\fR" 4
.IX Item "d_gethbyaddr"
From \fId_gethbyad.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETHOSTBYADDR\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgethostbyaddr()\fR routine be available
to look up hosts by they \f(CW\*(C`IP\*(C'\fR addresses.
.ie n .IP """d_gethbyname""" 4
.el .IP "\f(CWd_gethbyname\fR" 4
.IX Item "d_gethbyname"
From \fId_gethbynm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETHOSTBYNAME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgethostbyname()\fR routine be available
to look up host names up in some data base or other.
.ie n .IP """d_gethent""" 4
.el .IP "\f(CWd_gethent\fR" 4
.IX Item "d_gethent"
From \fId_gethent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETHOSTENT\*(C'\fR if \fIgethostent()\fR is
available ta look up host names up in some data base or another.
.ie n .IP """d_gethname""" 4
.el .IP "\f(CWd_gethname\fR" 4
.IX Item "d_gethname"
From \fId_gethname.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETHOSTNAME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgethostname()\fR routine may be
used ta derive tha host name.
.ie n .IP """d_gethostbyaddr_r""" 4
.el .IP "\f(CWd_gethostbyaddr_r\fR" 4
.IX Item "d_gethostbyaddr_r"
From \fId_gethostbyaddr_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETHOSTBYADDR_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgethostbyaddr_r()\fR
routine be available.
.ie n .IP """d_gethostbyname_r""" 4
.el .IP "\f(CWd_gethostbyname_r\fR" 4
.IX Item "d_gethostbyname_r"
From \fId_gethostbyname_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETHOSTBYNAME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgethostbyname_r()\fR
routine be available.
.ie n .IP """d_gethostent_r""" 4
.el .IP "\f(CWd_gethostent_r\fR" 4
.IX Item "d_gethostent_r"
From \fId_gethostent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETHOSTENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgethostent_r()\fR
routine be available.
.ie n .IP """d_gethostprotos""" 4
.el .IP "\f(CWd_gethostprotos\fR" 4
.IX Item "d_gethostprotos"
From \fId_gethostprotos.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETHOST_PROTOS\*(C'\fR symbol,
which indicates ta tha C program dat <netdb.h> supplies
prototypes fo' tha various gethost*() functions.
See also \fInetdbtype.U\fR fo' probin fo' various netdb types.
.ie n .IP """d_getitimer""" 4
.el .IP "\f(CWd_getitimer\fR" 4
.IX Item "d_getitimer"
From \fId_getitimer.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETITIMER\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetitimer()\fR routine be available.
.ie n .IP """d_getlogin""" 4
.el .IP "\f(CWd_getlogin\fR" 4
.IX Item "d_getlogin"
From \fId_getlogin.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETLOGIN\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetlogin()\fR routine be available
to git tha login name.
.ie n .IP """d_getlogin_r""" 4
.el .IP "\f(CWd_getlogin_r\fR" 4
.IX Item "d_getlogin_r"
From \fId_getlogin_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETLOGIN_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetlogin_r()\fR
routine be available.
.ie n .IP """d_getmnt""" 4
.el .IP "\f(CWd_getmnt\fR" 4
.IX Item "d_getmnt"
From \fId_getmnt.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETMNT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetmnt()\fR routine be available
to retrieve one or mo' mount info blocks by filename.
.ie n .IP """d_getmntent""" 4
.el .IP "\f(CWd_getmntent\fR" 4
.IX Item "d_getmntent"
From \fId_getmntent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETMNTENT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetmntent()\fR routine be available
to iterate all up in mounted filez ta git they mount info.
.ie n .IP """d_getnameinfo""" 4
.el .IP "\f(CWd_getnameinfo\fR" 4
.IX Item "d_getnameinfo"
From \fId_getnameinfo.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETNAMEINFO\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetnameinfo()\fR function
is available.
.ie n .IP """d_getnbyaddr""" 4
.el .IP "\f(CWd_getnbyaddr\fR" 4
.IX Item "d_getnbyaddr"
From \fId_getnbyad.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETNETBYADDR\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetnetbyaddr()\fR routine be available
to look up networks by they \f(CW\*(C`IP\*(C'\fR addresses.
.ie n .IP """d_getnbyname""" 4
.el .IP "\f(CWd_getnbyname\fR" 4
.IX Item "d_getnbyname"
From \fId_getnbynm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETNETBYNAME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetnetbyname()\fR routine be available
to look up networks by they names.
.ie n .IP """d_getnent""" 4
.el .IP "\f(CWd_getnent\fR" 4
.IX Item "d_getnent"
From \fId_getnent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETNETENT\*(C'\fR if \fIgetnetent()\fR is
available ta look up network names up in some data base or another.
.ie n .IP """d_getnetbyaddr_r""" 4
.el .IP "\f(CWd_getnetbyaddr_r\fR" 4
.IX Item "d_getnetbyaddr_r"
From \fId_getnetbyaddr_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETNETBYADDR_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetnetbyaddr_r()\fR
routine be available.
.ie n .IP """d_getnetbyname_r""" 4
.el .IP "\f(CWd_getnetbyname_r\fR" 4
.IX Item "d_getnetbyname_r"
From \fId_getnetbyname_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETNETBYNAME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetnetbyname_r()\fR
routine be available.
.ie n .IP """d_getnetent_r""" 4
.el .IP "\f(CWd_getnetent_r\fR" 4
.IX Item "d_getnetent_r"
From \fId_getnetent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETNETENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetnetent_r()\fR
routine be available.
.ie n .IP """d_getnetprotos""" 4
.el .IP "\f(CWd_getnetprotos\fR" 4
.IX Item "d_getnetprotos"
From \fId_getnetprotos.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETNET_PROTOS\*(C'\fR symbol,
which indicates ta tha C program dat <netdb.h> supplies
prototypes fo' tha various getnet*() functions.
See also \fInetdbtype.U\fR fo' probin fo' various netdb types.
.ie n .IP """d_getpagsz""" 4
.el .IP "\f(CWd_getpagsz\fR" 4
.IX Item "d_getpagsz"
From \fId_getpagsz.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETPAGESIZE\*(C'\fR if \fIgetpagesize()\fR
is available ta git tha system page size.
.ie n .IP """d_getpbyname""" 4
.el .IP "\f(CWd_getpbyname\fR" 4
.IX Item "d_getpbyname"
From \fId_getprotby.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPROTOBYNAME\*(C'\fR
symbol, which indicates ta tha C program dat the
\&\fIgetprotobyname()\fR routine be available ta look up protocols
by they name.
.ie n .IP """d_getpbynumber""" 4
.el .IP "\f(CWd_getpbynumber\fR" 4
.IX Item "d_getpbynumber"
From \fId_getprotby.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPROTOBYNUMBER\*(C'\fR
symbol, which indicates ta tha C program dat the
\&\fIgetprotobynumber()\fR routine be available ta look up protocols
by they number.
.ie n .IP """d_getpent""" 4
.el .IP "\f(CWd_getpent\fR" 4
.IX Item "d_getpent"
From \fId_getpent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETPROTOENT\*(C'\fR if \fIgetprotoent()\fR is
available ta look up protocols up in some data base or another.
.ie n .IP """d_getpgid""" 4
.el .IP "\f(CWd_getpgid\fR" 4
.IX Item "d_getpgid"
From \fId_getpgid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPGID\*(C'\fR symbol, which
indicates ta tha C program dat tha getpgid(pid) function
is available ta git tha process crew id.
.ie n .IP """d_getpgrp""" 4
.el .IP "\f(CWd_getpgrp\fR" 4
.IX Item "d_getpgrp"
From \fId_getpgrp.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETPGRP\*(C'\fR if \fIgetpgrp()\fR is
available ta git tha current process group.
.ie n .IP """d_getpgrp2""" 4
.el .IP "\f(CWd_getpgrp2\fR" 4
.IX Item "d_getpgrp2"
From \fId_getpgrp2.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_GETPGRP2\s0 symbol, which
indicates ta tha C program dat tha \fIgetpgrp2()\fR (as up in \fI\s-1DG/\s0\f(CI\*(C`UX\*(C'\fI\fR) routine
is available ta git tha current process group.
.ie n .IP """d_getppid""" 4
.el .IP "\f(CWd_getppid\fR" 4
.IX Item "d_getppid"
From \fId_getppid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPPID\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetppid()\fR routine be available
to git tha parent process \f(CW\*(C`ID\*(C'\fR.
.ie n .IP """d_getprior""" 4
.el .IP "\f(CWd_getprior\fR" 4
.IX Item "d_getprior"
From \fId_getprior.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETPRIORITY\*(C'\fR if \fIgetpriority()\fR
is available ta git a processs priority.
.ie n .IP """d_getprotobyname_r""" 4
.el .IP "\f(CWd_getprotobyname_r\fR" 4
.IX Item "d_getprotobyname_r"
From \fId_getprotobyname_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPROTOBYNAME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetprotobyname_r()\fR
routine be available.
.ie n .IP """d_getprotobynumber_r""" 4
.el .IP "\f(CWd_getprotobynumber_r\fR" 4
.IX Item "d_getprotobynumber_r"
From \fId_getprotobynumber_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPROTOBYNUMBER_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetprotobynumber_r()\fR
routine be available.
.ie n .IP """d_getprotoent_r""" 4
.el .IP "\f(CWd_getprotoent_r\fR" 4
.IX Item "d_getprotoent_r"
From \fId_getprotoent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPROTOENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetprotoent_r()\fR
routine be available.
.ie n .IP """d_getprotoprotos""" 4
.el .IP "\f(CWd_getprotoprotos\fR" 4
.IX Item "d_getprotoprotos"
From \fId_getprotoprotos.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPROTO_PROTOS\*(C'\fR symbol,
which indicates ta tha C program dat <netdb.h> supplies
prototypes fo' tha various getproto*() functions.
See also \fInetdbtype.U\fR fo' probin fo' various netdb types.
.ie n .IP """d_getprpwnam""" 4
.el .IP "\f(CWd_getprpwnam\fR" 4
.IX Item "d_getprpwnam"
From \fId_getprpwnam.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETPRPWNAM\*(C'\fR if \fIgetprpwnam()\fR is
available ta retrieve protected (shadow) password entries by name.
.ie n .IP """d_getpwent""" 4
.el .IP "\f(CWd_getpwent\fR" 4
.IX Item "d_getpwent"
From \fId_getpwent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPWENT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIgetpwent()\fR routine be available
for sequential access of tha passwd database.
.ie n .IP """d_getpwent_r""" 4
.el .IP "\f(CWd_getpwent_r\fR" 4
.IX Item "d_getpwent_r"
From \fId_getpwent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPWENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetpwent_r()\fR
routine be available.
.ie n .IP """d_getpwnam_r""" 4
.el .IP "\f(CWd_getpwnam_r\fR" 4
.IX Item "d_getpwnam_r"
From \fId_getpwnam_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPWNAM_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetpwnam_r()\fR
routine be available.
.ie n .IP """d_getpwuid_r""" 4
.el .IP "\f(CWd_getpwuid_r\fR" 4
.IX Item "d_getpwuid_r"
From \fId_getpwuid_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETPWUID_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetpwuid_r()\fR
routine be available.
.ie n .IP """d_getsbyname""" 4
.el .IP "\f(CWd_getsbyname\fR" 4
.IX Item "d_getsbyname"
From \fId_getsrvby.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETSERVBYNAME\*(C'\fR
symbol, which indicates ta tha C program dat the
\&\fIgetservbyname()\fR routine be available ta look up skillz
by they name.
.ie n .IP """d_getsbyport""" 4
.el .IP "\f(CWd_getsbyport\fR" 4
.IX Item "d_getsbyport"
From \fId_getsrvby.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETSERVBYPORT\*(C'\fR
symbol, which indicates ta tha C program dat the
\&\fIgetservbyport()\fR routine be available ta look up skillz
by they port.
.ie n .IP """d_getsent""" 4
.el .IP "\f(CWd_getsent\fR" 4
.IX Item "d_getsent"
From \fId_getsent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETSERVENT\*(C'\fR if \fIgetservent()\fR is
available ta look up network skillz up in some data base or another.
.ie n .IP """d_getservbyname_r""" 4
.el .IP "\f(CWd_getservbyname_r\fR" 4
.IX Item "d_getservbyname_r"
From \fId_getservbyname_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETSERVBYNAME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetservbyname_r()\fR
routine be available.
.ie n .IP """d_getservbyport_r""" 4
.el .IP "\f(CWd_getservbyport_r\fR" 4
.IX Item "d_getservbyport_r"
From \fId_getservbyport_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETSERVBYPORT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetservbyport_r()\fR
routine be available.
.ie n .IP """d_getservent_r""" 4
.el .IP "\f(CWd_getservent_r\fR" 4
.IX Item "d_getservent_r"
From \fId_getservent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETSERVENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetservent_r()\fR
routine be available.
.ie n .IP """d_getservprotos""" 4
.el .IP "\f(CWd_getservprotos\fR" 4
.IX Item "d_getservprotos"
From \fId_getservprotos.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETSERV_PROTOS\*(C'\fR symbol,
which indicates ta tha C program dat <netdb.h> supplies
prototypes fo' tha various getserv*() functions.
See also \fInetdbtype.U\fR fo' probin fo' various netdb types.
.ie n .IP """d_getspnam""" 4
.el .IP "\f(CWd_getspnam\fR" 4
.IX Item "d_getspnam"
From \fId_getspnam.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_GETSPNAM\*(C'\fR if \fIgetspnam()\fR is
available ta retrieve SysV shadow password entries by name.
.ie n .IP """d_getspnam_r""" 4
.el .IP "\f(CWd_getspnam_r\fR" 4
.IX Item "d_getspnam_r"
From \fId_getspnam_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETSPNAM_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgetspnam_r()\fR
routine be available.
.ie n .IP """d_gettimeod""" 4
.el .IP "\f(CWd_gettimeod\fR" 4
.IX Item "d_gettimeod"
From \fId_ftime.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GETTIMEOFDAY\*(C'\fR symbol, which
indicates dat tha \fIgettimeofday()\fR system call exists (to obtain a
sub-second accuracy clock). Yo ass should probably include <sys/resource.h>.
.ie n .IP """d_gmtime64""" 4
.el .IP "\f(CWd_gmtime64\fR" 4
.IX Item "d_gmtime64"
From \fId_timefuncs64.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_GMTIME64\s0 symbol, which
indicates ta tha C program dat tha gmtime64 () routine be available.
.ie n .IP """d_gmtime_r""" 4
.el .IP "\f(CWd_gmtime_r\fR" 4
.IX Item "d_gmtime_r"
From \fId_gmtime_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_GMTIME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIgmtime_r()\fR
routine be available.
.ie n .IP """d_gnulibc""" 4
.el .IP "\f(CWd_gnulibc\fR" 4
.IX Item "d_gnulibc"
From \fId_gnulibc.U\fR:
.Sp
Defined if our phat asses dealin wit tha \f(CW\*(C`GNU\*(C'\fR C Library.
.ie n .IP """d_grpasswd""" 4
.el .IP "\f(CWd_grpasswd\fR" 4
.IX Item "d_grpasswd"
From \fIi_grp.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`GRPASSWD\*(C'\fR, which indicates
that struct crew up in <grp.h> gotz nuff gr_passwd.
.ie n .IP """d_hasmntopt""" 4
.el .IP "\f(CWd_hasmntopt\fR" 4
.IX Item "d_hasmntopt"
From \fId_hasmntopt.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_HASMNTOPT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIhasmntopt()\fR routine be available
to query tha mount optionz of file systems.
.ie n .IP """d_htonl""" 4
.el .IP "\f(CWd_htonl\fR" 4
.IX Item "d_htonl"
From \fId_htonl.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_HTONL\*(C'\fR if \fIhtonl()\fR n' its
friendz is available ta do network order byte swapping.
.ie n .IP """d_ilogbl""" 4
.el .IP "\f(CWd_ilogbl\fR" 4
.IX Item "d_ilogbl"
From \fId_ilogbl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ILOGBL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIilogbl()\fR routine be available.
If scalbnl be also present we can emulate frexpl.
.ie n .IP """d_inc_version_list""" 4
.el .IP "\f(CWd_inc_version_list\fR" 4
.IX Item "d_inc_version_list"
From \fIinc_version_list.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PERL_INC_VERSION_LIST\*(C'\fR.
It be set ta undef when \f(CW\*(C`PERL_INC_VERSION_LIST\*(C'\fR is empty.
.ie n .IP """d_index""" 4
.el .IP "\f(CWd_index\fR" 4
.IX Item "d_index"
From \fId_strchr.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_INDEX\*(C'\fR if \fIindex()\fR and
\&\fIrindex()\fR is available fo' strang searching.
.ie n .IP """d_inetaton""" 4
.el .IP "\f(CWd_inetaton\fR" 4
.IX Item "d_inetaton"
From \fId_inetaton.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_INET_ATON\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIinet_aton()\fR function be available
to parse \f(CW\*(C`IP\*(C'\fR address \f(CW\*(C`dotted\-quad\*(C'\fR strings.
.ie n .IP """d_inetntop""" 4
.el .IP "\f(CWd_inetntop\fR" 4
.IX Item "d_inetntop"
From \fId_inetntop.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_INETNTOP\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIinet_ntop()\fR function
is available.
.ie n .IP """d_inetpton""" 4
.el .IP "\f(CWd_inetpton\fR" 4
.IX Item "d_inetpton"
From \fId_inetpton.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_INETPTON\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIinet_pton()\fR function
is available.
.ie n .IP """d_int64_t""" 4
.el .IP "\f(CWd_int64_t\fR" 4
.IX Item "d_int64_t"
From \fId_int64_t.U\fR:
.Sp
This symbol is ghon be defined if tha C compila supports int64_t.
.ie n .IP """d_ip_mreq""" 4
.el .IP "\f(CWd_ip_mreq\fR" 4
.IX Item "d_ip_mreq"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_IP_MREQ\*(C'\fR symbol, which
indicates tha availabilitizzle of a struct ip_mreq.
.ie n .IP """d_ip_mreq_source""" 4
.el .IP "\f(CWd_ip_mreq_source\fR" 4
.IX Item "d_ip_mreq_source"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_IP_MREQ_SOURCE\*(C'\fR symbol,
which indicates tha availabilitizzle of a struct ip_mreq_source.
.ie n .IP """d_ipv6_mreq""" 4
.el .IP "\f(CWd_ipv6_mreq\fR" 4
.IX Item "d_ipv6_mreq"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_IPV6_MREQ\s0 symbol, which
indicates tha availabilitizzle of a struct ipv6_mreq.
.ie n .IP """d_ipv6_mreq_source""" 4
.el .IP "\f(CWd_ipv6_mreq_source\fR" 4
.IX Item "d_ipv6_mreq_source"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_IPV6_MREQ_SOURCE\s0 symbol,
which indicates tha availabilitizzle of a struct ipv6_mreq_source.
.ie n .IP """d_isascii""" 4
.el .IP "\f(CWd_isascii\fR" 4
.IX Item "d_isascii"
From \fId_isascii.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ISASCII\*(C'\fR constant,
which indicates ta tha C program dat \fIisascii()\fR be available.
.ie n .IP """d_isblank""" 4
.el .IP "\f(CWd_isblank\fR" 4
.IX Item "d_isblank"
From \fId_isblank.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ISBLANK\*(C'\fR constant,
which indicates ta tha C program dat \fIisblank()\fR be available.
.ie n .IP """d_isfinite""" 4
.el .IP "\f(CWd_isfinite\fR" 4
.IX Item "d_isfinite"
From \fId_isfinite.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ISFINITE\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIisfinite()\fR routine be available.
.ie n .IP """d_isinf""" 4
.el .IP "\f(CWd_isinf\fR" 4
.IX Item "d_isinf"
From \fId_isinf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ISINF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIisinf()\fR routine be available.
.ie n .IP """d_isnan""" 4
.el .IP "\f(CWd_isnan\fR" 4
.IX Item "d_isnan"
From \fId_isnan.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ISNAN\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIisnan()\fR routine be available.
.ie n .IP """d_isnanl""" 4
.el .IP "\f(CWd_isnanl\fR" 4
.IX Item "d_isnanl"
From \fId_isnanl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_ISNANL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIisnanl()\fR routine be available.
.ie n .IP """d_killpg""" 4
.el .IP "\f(CWd_killpg\fR" 4
.IX Item "d_killpg"
From \fId_killpg.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_KILLPG\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIkillpg()\fR routine be available
to bust a cap up in process groups.
.ie n .IP """d_lchown""" 4
.el .IP "\f(CWd_lchown\fR" 4
.IX Item "d_lchown"
From \fId_lchown.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_LCHOWN\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIlchown()\fR routine be available
to operate on a symbolic link (instead of followin tha link).
.ie n .IP """d_ldbl_dig""" 4
.el .IP "\f(CWd_ldbl_dig\fR" 4
.IX Item "d_ldbl_dig"
From \fId_ldbl_dig.U\fR:
.Sp
This variable conditionally defines d_ldbl_dig if dis system's
header filez provide \f(CW\*(C`LDBL_DIG\*(C'\fR, which is tha number of significant
digits up in a long-ass double precision number.
.ie n .IP """d_libm_lib_version""" 4
.el .IP "\f(CWd_libm_lib_version\fR" 4
.IX Item "d_libm_lib_version"
From \fId_libm_lib_version.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`LIBM_LIB_VERSION\*(C'\fR symbol,
which indicates ta tha C program dat \fImath.h\fR defines \f(CW\*(C`_LIB_VERSION\*(C'\fR
bein available up in libm
.ie n .IP """d_link""" 4
.el .IP "\f(CWd_link\fR" 4
.IX Item "d_link"
From \fId_link.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_LINK\*(C'\fR if \fIlink()\fR is
available ta create hard links.
.ie n .IP """d_localtime64""" 4
.el .IP "\f(CWd_localtime64\fR" 4
.IX Item "d_localtime64"
From \fId_timefuncs64.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_LOCALTIME64\s0 symbol, which
indicates ta tha C program dat tha localtime64 () routine be available.
.ie n .IP """d_localtime_r""" 4
.el .IP "\f(CWd_localtime_r\fR" 4
.IX Item "d_localtime_r"
From \fId_localtime_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_LOCALTIME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIlocaltime_r()\fR
routine be available.
.ie n .IP """d_localtime_r_needs_tzset""" 4
.el .IP "\f(CWd_localtime_r_needs_tzset\fR" 4
.IX Item "d_localtime_r_needs_tzset"
From \fId_localtime_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`LOCALTIME_R_NEEDS_TZSET\*(C'\fR
symbol, which make our asses call tzset before \fIlocaltime_r()\fR
.ie n .IP """d_locconv""" 4
.el .IP "\f(CWd_locconv\fR" 4
.IX Item "d_locconv"
From \fId_locconv.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_LOCALECONV\*(C'\fR if \fIlocaleconv()\fR is
available fo' numeric n' monetary formattin conventions.
.ie n .IP """d_lockf""" 4
.el .IP "\f(CWd_lockf\fR" 4
.IX Item "d_lockf"
From \fId_lockf.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_LOCKF\*(C'\fR if \fIlockf()\fR is
available ta do file locking.
.ie n .IP """d_longdbl""" 4
.el .IP "\f(CWd_longdbl\fR" 4
.IX Item "d_longdbl"
From \fId_longdbl.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_LONG_DOUBLE\*(C'\fR if
the long double type is supported.
.ie n .IP """d_longlong""" 4
.el .IP "\f(CWd_longlong\fR" 4
.IX Item "d_longlong"
From \fId_longlong.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_LONG_LONG\*(C'\fR if
the long long type is supported.
.ie n .IP """d_lseekproto""" 4
.el .IP "\f(CWd_lseekproto\fR" 4
.IX Item "d_lseekproto"
From \fId_lseekproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_LSEEK_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIlseek()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_lstat""" 4
.el .IP "\f(CWd_lstat\fR" 4
.IX Item "d_lstat"
From \fId_lstat.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_LSTAT\*(C'\fR if \fIlstat()\fR is
available ta do file stats on symbolic links.
.ie n .IP """d_madvise""" 4
.el .IP "\f(CWd_madvise\fR" 4
.IX Item "d_madvise"
From \fId_madvise.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_MADVISE\*(C'\fR if \fImadvise()\fR is
available ta map a gangbangin' file tha fuck into memory.
.ie n .IP """d_malloc_good_size""" 4
.el .IP "\f(CWd_malloc_good_size\fR" 4
.IX Item "d_malloc_good_size"
From \fId_malloc_size.U\fR:
.Sp
This symbol, if defined, indicates dat tha malloc_good_size
routine be available fo' use.
.ie n .IP """d_malloc_size""" 4
.el .IP "\f(CWd_malloc_size\fR" 4
.IX Item "d_malloc_size"
From \fId_malloc_size.U\fR:
.Sp
This symbol, if defined, indicates dat tha malloc_size
routine be available fo' use.
.ie n .IP """d_mblen""" 4
.el .IP "\f(CWd_mblen\fR" 4
.IX Item "d_mblen"
From \fId_mblen.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MBLEN\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImblen()\fR routine be available
to find tha number of bytes up in a multibye character.
.ie n .IP """d_mbstowcs""" 4
.el .IP "\f(CWd_mbstowcs\fR" 4
.IX Item "d_mbstowcs"
From \fId_mbstowcs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MBSTOWCS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImbstowcs()\fR routine be available
to convert a multibyte strang tha fuck into a wide characta string.
.ie n .IP """d_mbtowc""" 4
.el .IP "\f(CWd_mbtowc\fR" 4
.IX Item "d_mbtowc"
From \fId_mbtowc.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MBTOWC\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImbtowc()\fR routine be available
to convert multibyte ta a wide character.
.ie n .IP """d_memchr""" 4
.el .IP "\f(CWd_memchr\fR" 4
.IX Item "d_memchr"
From \fId_memchr.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MEMCHR\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImemchr()\fR routine be available
to locate charactas within a C string.
.ie n .IP """d_memcmp""" 4
.el .IP "\f(CWd_memcmp\fR" 4
.IX Item "d_memcmp"
From \fId_memcmp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MEMCMP\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImemcmp()\fR routine be available
to compare blockz of memory.
.ie n .IP """d_memcpy""" 4
.el .IP "\f(CWd_memcpy\fR" 4
.IX Item "d_memcpy"
From \fId_memcpy.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MEMCPY\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImemcpy()\fR routine be available
to copy blockz of memory.
.ie n .IP """d_memmove""" 4
.el .IP "\f(CWd_memmove\fR" 4
.IX Item "d_memmove"
From \fId_memmove.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MEMMOVE\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImemmove()\fR routine be available
to copy potentially overlappin blockz of memory.
.ie n .IP """d_memset""" 4
.el .IP "\f(CWd_memset\fR" 4
.IX Item "d_memset"
From \fId_memset.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MEMSET\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImemset()\fR routine be available
to set blockz of memory.
.ie n .IP """d_mkdir""" 4
.el .IP "\f(CWd_mkdir\fR" 4
.IX Item "d_mkdir"
From \fId_mkdir.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MKDIR\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImkdir()\fR routine be available
to create \fIdirectories.\fR.
.ie n .IP """d_mkdtemp""" 4
.el .IP "\f(CWd_mkdtemp\fR" 4
.IX Item "d_mkdtemp"
From \fId_mkdtemp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MKDTEMP\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImkdtemp()\fR routine be available
to exclusively create a uniquely named temporary directory.
.ie n .IP """d_mkfifo""" 4
.el .IP "\f(CWd_mkfifo\fR" 4
.IX Item "d_mkfifo"
From \fId_mkfifo.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MKFIFO\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImkfifo()\fR routine be available.
.ie n .IP """d_mkstemp""" 4
.el .IP "\f(CWd_mkstemp\fR" 4
.IX Item "d_mkstemp"
From \fId_mkstemp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MKSTEMP\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImkstemp()\fR routine be available
to exclusively create n' open a uniquely named temporary file.
.ie n .IP """d_mkstemps""" 4
.el .IP "\f(CWd_mkstemps\fR" 4
.IX Item "d_mkstemps"
From \fId_mkstemps.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MKSTEMPS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImkstemps()\fR routine be available
to exclusively create n' open a uniquely named (with a suffix)
temporary file.
.ie n .IP """d_mktime""" 4
.el .IP "\f(CWd_mktime\fR" 4
.IX Item "d_mktime"
From \fId_mktime.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MKTIME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImktime()\fR routine be available.
.ie n .IP """d_mktime64""" 4
.el .IP "\f(CWd_mktime64\fR" 4
.IX Item "d_mktime64"
From \fId_timefuncs64.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_MKTIME64\s0 symbol, which
indicates ta tha C program dat tha mktime64 () routine be available.
.ie n .IP """d_mmap""" 4
.el .IP "\f(CWd_mmap\fR" 4
.IX Item "d_mmap"
From \fId_mmap.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_MMAP\*(C'\fR if \fImmap()\fR is
available ta map a gangbangin' file tha fuck into memory.
.ie n .IP """d_modfl""" 4
.el .IP "\f(CWd_modfl\fR" 4
.IX Item "d_modfl"
From \fId_modfl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MODFL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImodfl()\fR routine be available.
.ie n .IP """d_modfl_pow32_bug""" 4
.el .IP "\f(CWd_modfl_pow32_bug\fR" 4
.IX Item "d_modfl_pow32_bug"
From \fId_modfl.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_MODFL_POW32_BUG\s0 symbol,
which indicates dat \fImodfl()\fR is fucked up fo' long doublez >= pow(2, 32).
For example from 4294967303.150000 one would git 4294967302.000000
and 1.150000.  Da bug has been peeped up in certain versionz of glibc,
release 2.2.2 is known ta be aiiight.
.ie n .IP """d_modflproto""" 4
.el .IP "\f(CWd_modflproto\fR" 4
.IX Item "d_modflproto"
From \fId_modfl.U\fR:
.Sp
This symbol, if defined, indicates dat tha system provides
a prototype fo' tha \fImodfl()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is up
to tha program ta supply one.  C99 say it should be
long double modfl(long double, long double *);
.ie n .IP """d_mprotect""" 4
.el .IP "\f(CWd_mprotect\fR" 4
.IX Item "d_mprotect"
From \fId_mprotect.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_MPROTECT\*(C'\fR if \fImprotect()\fR is
available ta modify tha access protection of a memory mapped file.
.ie n .IP """d_msg""" 4
.el .IP "\f(CWd_msg\fR" 4
.IX Item "d_msg"
From \fId_msg.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSG\*(C'\fR symbol, which
indicates dat tha entire msg*(2) library is present.
.ie n .IP """d_msg_ctrunc""" 4
.el .IP "\f(CWd_msg_ctrunc\fR" 4
.IX Item "d_msg_ctrunc"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSG_CTRUNC\*(C'\fR symbol,
which indicates dat tha \f(CW\*(C`MSG_CTRUNC\*(C'\fR be available.  #ifdef is
not enough cuz it may be a enum, glibc has been known ta do all dis bullshit.
.ie n .IP """d_msg_dontroute""" 4
.el .IP "\f(CWd_msg_dontroute\fR" 4
.IX Item "d_msg_dontroute"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSG_DONTROUTE\*(C'\fR symbol,
which indicates dat tha \f(CW\*(C`MSG_DONTROUTE\*(C'\fR be available.  #ifdef is
not enough cuz it may be a enum, glibc has been known ta do all dis bullshit.
.ie n .IP """d_msg_oob""" 4
.el .IP "\f(CWd_msg_oob\fR" 4
.IX Item "d_msg_oob"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSG_OOB\*(C'\fR symbol,
which indicates dat tha \f(CW\*(C`MSG_OOB\*(C'\fR be available.  #ifdef is
not enough cuz it may be a enum, glibc has been known ta do all dis bullshit.
.ie n .IP """d_msg_peek""" 4
.el .IP "\f(CWd_msg_peek\fR" 4
.IX Item "d_msg_peek"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSG_PEEK\*(C'\fR symbol,
which indicates dat tha \f(CW\*(C`MSG_PEEK\*(C'\fR be available.  #ifdef is
not enough cuz it may be a enum, glibc has been known ta do all dis bullshit.
.ie n .IP """d_msg_proxy""" 4
.el .IP "\f(CWd_msg_proxy\fR" 4
.IX Item "d_msg_proxy"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSG_PROXY\*(C'\fR symbol,
which indicates dat tha \f(CW\*(C`MSG_PROXY\*(C'\fR be available.  #ifdef is
not enough cuz it may be a enum, glibc has been known ta do all dis bullshit.
.ie n .IP """d_msgctl""" 4
.el .IP "\f(CWd_msgctl\fR" 4
.IX Item "d_msgctl"
From \fId_msgctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSGCTL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImsgctl()\fR routine be available.
.ie n .IP """d_msgget""" 4
.el .IP "\f(CWd_msgget\fR" 4
.IX Item "d_msgget"
From \fId_msgget.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSGGET\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImsgget()\fR routine be available.
.ie n .IP """d_msghdr_s""" 4
.el .IP "\f(CWd_msghdr_s\fR" 4
.IX Item "d_msghdr_s"
From \fId_msghdr_s.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRUCT_MSGHDR\*(C'\fR symbol,
which indicates dat tha struct msghdr is supported.
.ie n .IP """d_msgrcv""" 4
.el .IP "\f(CWd_msgrcv\fR" 4
.IX Item "d_msgrcv"
From \fId_msgrcv.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSGRCV\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImsgrcv()\fR routine be available.
.ie n .IP """d_msgsnd""" 4
.el .IP "\f(CWd_msgsnd\fR" 4
.IX Item "d_msgsnd"
From \fId_msgsnd.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_MSGSND\*(C'\fR symbol, which
indicates ta tha C program dat tha \fImsgsnd()\fR routine be available.
.ie n .IP """d_msync""" 4
.el .IP "\f(CWd_msync\fR" 4
.IX Item "d_msync"
From \fId_msync.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_MSYNC\*(C'\fR if \fImsync()\fR is
available ta synchronize a mapped file.
.ie n .IP """d_munmap""" 4
.el .IP "\f(CWd_munmap\fR" 4
.IX Item "d_munmap"
From \fId_munmap.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_MUNMAP\*(C'\fR if \fImunmap()\fR is
available ta unmap a region mapped by \fImmap()\fR.
.ie n .IP """d_mymalloc""" 4
.el .IP "\f(CWd_mymalloc\fR" 4
.IX Item "d_mymalloc"
From \fImallocsrc.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`MYMALLOC\*(C'\fR up in case other parts
of tha source wanna take special action if \f(CW\*(C`MYMALLOC\*(C'\fR is used.
This may include different sortz of profilin or error detection.
.ie n .IP """d_ndbm""" 4
.el .IP "\f(CWd_ndbm\fR" 4
.IX Item "d_ndbm"
From \fIi_ndbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_NDBM\*(C'\fR symbol, which
indicates dat both tha \fIndbm.h\fR include file n' a appropriate ndbm
library exist.  Consult tha different i_*ndbm variables
to smoke up tha actual include location. I aint talkin' bout chicken n' gravy biatch.  Sometimes, a system has the
header file but not tha library.  This variable will only be set if
the system has both.
.ie n .IP """d_ndbm_h_uses_prototypes""" 4
.el .IP "\f(CWd_ndbm_h_uses_prototypes\fR" 4
.IX Item "d_ndbm_h_uses_prototypes"
From \fIi_ndbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`NDBM_H_USES_PROTOTYPES\*(C'\fR symbol,
which indicates dat tha \fIndbm.h\fR include file uses real \f(CW\*(C`ANSI\*(C'\fR C
prototypes instead of K&R steez function declarations. K&R style
declarations is unsupported up in \*(C+, so tha include file requires
special handlin when rockin a \*(C+ compila n' dis variable is
undefined. Y'all KNOW dat shit, muthafucka! Consult tha different d_*ndbm_h_uses_prototypes variables
to git tha same shiznit fo' alternatizzle \fIndbm.h\fR include files.
.ie n .IP """d_nice""" 4
.el .IP "\f(CWd_nice\fR" 4
.IX Item "d_nice"
From \fId_nice.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_NICE\*(C'\fR symbol, which
indicates ta tha C program dat tha \fInice()\fR routine be available.
.ie n .IP """d_nl_langinfo""" 4
.el .IP "\f(CWd_nl_langinfo\fR" 4
.IX Item "d_nl_langinfo"
From \fId_nl_langinfo.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_NL_LANGINFO\*(C'\fR symbol, which
indicates ta tha C program dat tha \fInl_langinfo()\fR routine be available.
.ie n .IP """d_nv_preserves_uv""" 4
.el .IP "\f(CWd_nv_preserves_uv\fR" 4
.IX Item "d_nv_preserves_uv"
From \fIperlxv.U\fR:
.Sp
This variable indicates whether a variable of type nvtype
can preserve all tha bits a variable of type uvtype.
.ie n .IP """d_nv_zero_is_allbits_zero""" 4
.el .IP "\f(CWd_nv_zero_is_allbits_zero\fR" 4
.IX Item "d_nv_zero_is_allbits_zero"
From \fIperlxv.U\fR:
.Sp
This variable indicates whether a variable of type nvtype
stores 0.0 up in memory as all bits zero.
.ie n .IP """d_off64_t""" 4
.el .IP "\f(CWd_off64_t\fR" 4
.IX Item "d_off64_t"
From \fId_off64_t.U\fR:
.Sp
This symbol is ghon be defined if tha C compila supports off64_t.
.ie n .IP """d_old_pthread_create_joinable""" 4
.el .IP "\f(CWd_old_pthread_create_joinable\fR" 4
.IX Item "d_old_pthread_create_joinable"
From \fId_pthrattrj.U\fR:
.Sp
This variable conditionally defines pthread_create_joinable.
undef if \fIpthread.h\fR defines \f(CW\*(C`PTHREAD_CREATE_JOINABLE\*(C'\fR.
.ie n .IP """d_oldpthreads""" 4
.el .IP "\f(CWd_oldpthreads\fR" 4
.IX Item "d_oldpthreads"
From \fIusethreads.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`OLD_PTHREADS_API\*(C'\fR symbol,
and indicates dat Perl should be built ta use tha old
draft \f(CW\*(C`POSIX\*(C'\fR threadz \f(CW\*(C`API\*(C'\fR.  This is only potentially meaningful if
usethreadz is set.
.ie n .IP """d_oldsock""" 4
.el .IP "\f(CWd_oldsock\fR" 4
.IX Item "d_oldsock"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`OLDSOCKET\*(C'\fR symbol, which
indicates dat tha \f(CW\*(C`BSD\*(C'\fR socket intercourse is based on 4.1c n' not 4.2.
.ie n .IP """d_open3""" 4
.el .IP "\f(CWd_open3\fR" 4
.IX Item "d_open3"
From \fId_open3.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_OPEN3\s0 manifest constant,
which indicates ta tha C program dat tha 3 argument version of
the \fIopen\fR\|(2) function be available.
.ie n .IP """d_pathconf""" 4
.el .IP "\f(CWd_pathconf\fR" 4
.IX Item "d_pathconf"
From \fId_pathconf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PATHCONF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIpathconf()\fR routine be available
to determine file-system related limits n' options associated
with a given filename.
.ie n .IP """d_pause""" 4
.el .IP "\f(CWd_pause\fR" 4
.IX Item "d_pause"
From \fId_pause.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PAUSE\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIpause()\fR routine be available
to suspend a process until a signal is received.
.ie n .IP """d_perl_otherlibdirs""" 4
.el .IP "\f(CWd_perl_otherlibdirs\fR" 4
.IX Item "d_perl_otherlibdirs"
From \fIotherlibdirs.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PERL_OTHERLIBDIRS\*(C'\fR, which
gotz nuff a cold-ass lil colon-separated set of paths fo' tha perl binary to
include up in @\f(CW\*(C`INC\*(C'\fR.  See also otherlibdirs.
.ie n .IP """d_phostname""" 4
.el .IP "\f(CWd_phostname\fR" 4
.IX Item "d_phostname"
From \fId_gethname.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PHOSTNAME\*(C'\fR symbol, which
gotz nuff tha shell command which, when fed ta \fIpopen()\fR, may be
used ta derive tha host name.
.ie n .IP """d_pipe""" 4
.el .IP "\f(CWd_pipe\fR" 4
.IX Item "d_pipe"
From \fId_pipe.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PIPE\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIpipe()\fR routine be available
to create a inter-process channel.
.ie n .IP """d_poll""" 4
.el .IP "\f(CWd_poll\fR" 4
.IX Item "d_poll"
From \fId_poll.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_POLL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIpoll()\fR routine be available
to poll actizzle file descriptors.
.ie n .IP """d_portable""" 4
.el .IP "\f(CWd_portable\fR" 4
.IX Item "d_portable"
From \fId_portable.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`PORTABLE\*(C'\fR symbol, which
indicates ta tha C program dat it should not assume dat it is
runnin on tha machine dat shiznit was compiled on.
.ie n .IP """d_prctl""" 4
.el .IP "\f(CWd_prctl\fR" 4
.IX Item "d_prctl"
From \fId_prctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PRCTL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIprctl()\fR routine be available.
.ie n .IP """d_prctl_set_name""" 4
.el .IP "\f(CWd_prctl_set_name\fR" 4
.IX Item "d_prctl_set_name"
From \fId_prctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PRCTL_SET_NAME\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIprctl()\fR routine supports
the \f(CW\*(C`PR_SET_NAME\*(C'\fR option.
.ie n .IP """d_PRId64""" 4
.el .IP "\f(CWd_PRId64\fR" 4
.IX Item "d_PRId64"
From \fIquadfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRId64 symbol, which
indicates dat stdio has a symbol ta print 64\-bit decimal numbers.
.ie n .IP """d_PRIeldbl""" 4
.el .IP "\f(CWd_PRIeldbl\fR" 4
.IX Item "d_PRIeldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIfldbl symbol, which
indicates dat stdio has a symbol ta print long doubles.
.ie n .IP """d_PRIEUldbl""" 4
.el .IP "\f(CWd_PRIEUldbl\fR" 4
.IX Item "d_PRIEUldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIfldbl symbol, which
indicates dat stdio has a symbol ta print long doubles.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from d_PRIeldbl so dat even
case-blind systems can peep tha difference.
.ie n .IP """d_PRIfldbl""" 4
.el .IP "\f(CWd_PRIfldbl\fR" 4
.IX Item "d_PRIfldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIfldbl symbol, which
indicates dat stdio has a symbol ta print long doubles.
.ie n .IP """d_PRIFUldbl""" 4
.el .IP "\f(CWd_PRIFUldbl\fR" 4
.IX Item "d_PRIFUldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIfldbl symbol, which
indicates dat stdio has a symbol ta print long doubles.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from d_PRIfldbl so dat even
case-blind systems can peep tha difference.
.ie n .IP """d_PRIgldbl""" 4
.el .IP "\f(CWd_PRIgldbl\fR" 4
.IX Item "d_PRIgldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIfldbl symbol, which
indicates dat stdio has a symbol ta print long doubles.
.ie n .IP """d_PRIGUldbl""" 4
.el .IP "\f(CWd_PRIGUldbl\fR" 4
.IX Item "d_PRIGUldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIfldbl symbol, which
indicates dat stdio has a symbol ta print long doubles.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from d_PRIgldbl so dat even
case-blind systems can peep tha difference.
.ie n .IP """d_PRIi64""" 4
.el .IP "\f(CWd_PRIi64\fR" 4
.IX Item "d_PRIi64"
From \fIquadfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIi64 symbol, which
indicates dat stdio has a symbol ta print 64\-bit decimal numbers.
.ie n .IP """d_printf_format_null""" 4
.el .IP "\f(CWd_printf_format_null\fR" 4
.IX Item "d_printf_format_null"
From \fId_attribut.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PRINTF_FORMAT_NULL_OK\*(C'\fR, which
indicates tha C compila allows printf-like formats ta be null.
.ie n .IP """d_PRIo64""" 4
.el .IP "\f(CWd_PRIo64\fR" 4
.IX Item "d_PRIo64"
From \fIquadfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIo64 symbol, which
indicates dat stdio has a symbol ta print 64\-bit octal numbers.
.ie n .IP """d_PRIu64""" 4
.el .IP "\f(CWd_PRIu64\fR" 4
.IX Item "d_PRIu64"
From \fIquadfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIu64 symbol, which
indicates dat stdio has a symbol ta print 64\-bit unsigned decimal
numbers.
.ie n .IP """d_PRIx64""" 4
.el .IP "\f(CWd_PRIx64\fR" 4
.IX Item "d_PRIx64"
From \fIquadfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIx64 symbol, which
indicates dat stdio has a symbol ta print 64\-bit hexadecimal numbers.
.ie n .IP """d_PRIXU64""" 4
.el .IP "\f(CWd_PRIXU64\fR" 4
.IX Item "d_PRIXU64"
From \fIquadfio.U\fR:
.Sp
This variable conditionally defines tha \s-1PERL_PRIXU64\s0 symbol, which
indicates dat stdio has a symbol ta print 64\-bit hExADECimAl numbers.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from d_PRIx64 so dat even
case-blind systems can peep tha difference.
.ie n .IP """d_procselfexe""" 4
.el .IP "\f(CWd_procselfexe\fR" 4
.IX Item "d_procselfexe"
From \fId_procselfexe.U\fR:
.Sp
Defined if \f(CW$procselfexe\fR is symlink ta tha absolute
pathname of tha executin program.
.ie n .IP """d_pseudofork""" 4
.el .IP "\f(CWd_pseudofork\fR" 4
.IX Item "d_pseudofork"
From \fId_vfork.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PSEUDOFORK\*(C'\fR symbol,
which indicates dat a emulation of tha fork routine be available.
.ie n .IP """d_pthread_atfork""" 4
.el .IP "\f(CWd_pthread_atfork\fR" 4
.IX Item "d_pthread_atfork"
From \fId_pthread_atfork.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PTHREAD_ATFORK\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIpthread_atfork()\fR
routine be available.
.ie n .IP """d_pthread_attr_setscope""" 4
.el .IP "\f(CWd_pthread_attr_setscope\fR" 4
.IX Item "d_pthread_attr_setscope"
From \fId_pthread_attr_ss.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_PTHREAD_ATTR_SETSCOPE\*(C'\fR if
\&\fIpthread_attr_setscope()\fR be available ta set tha contention scope
attribute of a thread attribute object.
.ie n .IP """d_pthread_yield""" 4
.el .IP "\f(CWd_pthread_yield\fR" 4
.IX Item "d_pthread_yield"
From \fId_pthread_y.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_PTHREAD_YIELD\*(C'\fR
symbol if tha pthread_yield routine be available ta yield
the execution of tha current thread.
.ie n .IP """d_pwage""" 4
.el .IP "\f(CWd_pwage\fR" 4
.IX Item "d_pwage"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWAGE\*(C'\fR, which indicates
that struct passwd gotz nuff pw_age.
.ie n .IP """d_pwchange""" 4
.el .IP "\f(CWd_pwchange\fR" 4
.IX Item "d_pwchange"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWCHANGE\*(C'\fR, which indicates
that struct passwd gotz nuff pw_change.
.ie n .IP """d_pwclass""" 4
.el .IP "\f(CWd_pwclass\fR" 4
.IX Item "d_pwclass"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWCLASS\*(C'\fR, which indicates
that struct passwd gotz nuff pw_class.
.ie n .IP """d_pwcomment""" 4
.el .IP "\f(CWd_pwcomment\fR" 4
.IX Item "d_pwcomment"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWCOMMENT\*(C'\fR, which indicates
that struct passwd gotz nuff pw_comment.
.ie n .IP """d_pwexpire""" 4
.el .IP "\f(CWd_pwexpire\fR" 4
.IX Item "d_pwexpire"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWEXPIRE\*(C'\fR, which indicates
that struct passwd gotz nuff pw_expire.
.ie n .IP """d_pwgecos""" 4
.el .IP "\f(CWd_pwgecos\fR" 4
.IX Item "d_pwgecos"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWGECOS\*(C'\fR, which indicates
that struct passwd gotz nuff pw_gecos.
.ie n .IP """d_pwpasswd""" 4
.el .IP "\f(CWd_pwpasswd\fR" 4
.IX Item "d_pwpasswd"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWPASSWD\*(C'\fR, which indicates
that struct passwd gotz nuff pw_passwd.
.ie n .IP """d_pwquota""" 4
.el .IP "\f(CWd_pwquota\fR" 4
.IX Item "d_pwquota"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PWQUOTA\*(C'\fR, which indicates
that struct passwd gotz nuff pw_quota.
.ie n .IP """d_qgcvt""" 4
.el .IP "\f(CWd_qgcvt\fR" 4
.IX Item "d_qgcvt"
From \fId_qgcvt.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_QGCVT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIqgcvt()\fR routine be available.
.ie n .IP """d_quad""" 4
.el .IP "\f(CWd_quad\fR" 4
.IX Item "d_quad"
From \fIquadtype.U\fR:
.Sp
This variable, if defined,  drops some lyrics ta dat there be a a 64\-bit integer type,
quadtype.
.ie n .IP """d_random_r""" 4
.el .IP "\f(CWd_random_r\fR" 4
.IX Item "d_random_r"
From \fId_random_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_RANDOM_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIrandom_r()\fR
routine be available.
.ie n .IP """d_readdir""" 4
.el .IP "\f(CWd_readdir\fR" 4
.IX Item "d_readdir"
From \fId_readdir.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_READDIR\*(C'\fR if \fIreaddir()\fR is
available ta read directory entries.
.ie n .IP """d_readdir64_r""" 4
.el .IP "\f(CWd_readdir64_r\fR" 4
.IX Item "d_readdir64_r"
From \fId_readdir64_r.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_READDIR64_R\s0 symbol,
which indicates ta tha C program dat tha \fIreaddir64_r()\fR
routine be available.
.ie n .IP """d_readdir_r""" 4
.el .IP "\f(CWd_readdir_r\fR" 4
.IX Item "d_readdir_r"
From \fId_readdir_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_READDIR_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIreaddir_r()\fR
routine be available.
.ie n .IP """d_readlink""" 4
.el .IP "\f(CWd_readlink\fR" 4
.IX Item "d_readlink"
From \fId_readlink.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_READLINK\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIreadlink()\fR routine be available
to read tha value of a symbolic link.
.ie n .IP """d_readv""" 4
.el .IP "\f(CWd_readv\fR" 4
.IX Item "d_readv"
From \fId_readv.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_READV\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIreadv()\fR routine be available.
.ie n .IP """d_recvmsg""" 4
.el .IP "\f(CWd_recvmsg\fR" 4
.IX Item "d_recvmsg"
From \fId_recvmsg.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_RECVMSG\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIrecvmsg()\fR routine be available.
.ie n .IP """d_rename""" 4
.el .IP "\f(CWd_rename\fR" 4
.IX Item "d_rename"
From \fId_rename.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_RENAME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIrename()\fR routine be available
to rename files.
.ie n .IP """d_rewinddir""" 4
.el .IP "\f(CWd_rewinddir\fR" 4
.IX Item "d_rewinddir"
From \fId_readdir.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_REWINDDIR\*(C'\fR if \fIrewinddir()\fR is
available.
.ie n .IP """d_rmdir""" 4
.el .IP "\f(CWd_rmdir\fR" 4
.IX Item "d_rmdir"
From \fId_rmdir.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_RMDIR\*(C'\fR if \fIrmdir()\fR is
available ta remove directories.
.ie n .IP """d_safebcpy""" 4
.el .IP "\f(CWd_safebcpy\fR" 4
.IX Item "d_safebcpy"
From \fId_safebcpy.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SAFE_BCOPY\*(C'\fR symbol if
the \fIbcopy()\fR routine can do overlappin copies. Put ya muthafuckin choppers up if ya feel dis!  Normally, you
should probably use \fImemmove()\fR.
.ie n .IP """d_safemcpy""" 4
.el .IP "\f(CWd_safemcpy\fR" 4
.IX Item "d_safemcpy"
From \fId_safemcpy.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SAFE_MEMCPY\*(C'\fR symbol if
the \fImemcpy()\fR routine can do overlappin copies.
For overlappin copies, \fImemmove()\fR should be used, if available.
.ie n .IP """d_sanemcmp""" 4
.el .IP "\f(CWd_sanemcmp\fR" 4
.IX Item "d_sanemcmp"
From \fId_sanemcmp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SANE_MEMCMP\*(C'\fR symbol if
the \fImemcpy()\fR routine be available n' can be used ta compare relative
magnitudez of chars wit they high bits set.
.ie n .IP """d_sbrkproto""" 4
.el .IP "\f(CWd_sbrkproto\fR" 4
.IX Item "d_sbrkproto"
From \fId_sbrkproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SBRK_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIsbrk()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_scalbnl""" 4
.el .IP "\f(CWd_scalbnl\fR" 4
.IX Item "d_scalbnl"
From \fId_scalbnl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SCALBNL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIscalbnl()\fR routine be available.
If ilogbl be also present we can emulate frexpl.
.ie n .IP """d_sched_yield""" 4
.el .IP "\f(CWd_sched_yield\fR" 4
.IX Item "d_sched_yield"
From \fId_pthread_y.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SCHED_YIELD\*(C'\fR
symbol if tha sched_yield routine be available ta yield
the execution of tha current thread.
.ie n .IP """d_scm_rights""" 4
.el .IP "\f(CWd_scm_rights\fR" 4
.IX Item "d_scm_rights"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SCM_RIGHTS\*(C'\fR symbol,
which indicates dat tha \f(CW\*(C`SCM_RIGHTS\*(C'\fR be available.  #ifdef is
not enough cuz it may be a enum, glibc has been known ta do all dis bullshit.
.ie n .IP """d_SCNfldbl""" 4
.el .IP "\f(CWd_SCNfldbl\fR" 4
.IX Item "d_SCNfldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable conditionally defines tha PERL_PRIfldbl symbol, which
indicates dat stdio has a symbol ta scan long doubles.
.ie n .IP """d_seekdir""" 4
.el .IP "\f(CWd_seekdir\fR" 4
.IX Item "d_seekdir"
From \fId_readdir.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SEEKDIR\*(C'\fR if \fIseekdir()\fR is
available.
.ie n .IP """d_select""" 4
.el .IP "\f(CWd_select\fR" 4
.IX Item "d_select"
From \fId_select.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SELECT\*(C'\fR if \fIselect()\fR is
available ta select actizzle file descriptors fo' realz. A <sys/time.h>
inclusion may be necessary fo' tha timeout field.
.ie n .IP """d_sem""" 4
.el .IP "\f(CWd_sem\fR" 4
.IX Item "d_sem"
From \fId_sem.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SEM\*(C'\fR symbol, which
indicates dat tha entire sem*(2) library is present.
.ie n .IP """d_semctl""" 4
.el .IP "\f(CWd_semctl\fR" 4
.IX Item "d_semctl"
From \fId_semctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SEMCTL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsemctl()\fR routine be available.
.ie n .IP """d_semctl_semid_ds""" 4
.el .IP "\f(CWd_semctl_semid_ds\fR" 4
.IX Item "d_semctl_semid_ds"
From \fId_union_semun.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_SEMCTL_SEMID_DS\*(C'\fR, which
indicates dat struct semid_dz * is ta be used fo' semctl \f(CW\*(C`IPC_STAT\*(C'\fR.
.ie n .IP """d_semctl_semun""" 4
.el .IP "\f(CWd_semctl_semun\fR" 4
.IX Item "d_semctl_semun"
From \fId_union_semun.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_SEMCTL_SEMUN\*(C'\fR, which
indicates dat union semun is ta be used fo' semctl \f(CW\*(C`IPC_STAT\*(C'\fR.
.ie n .IP """d_semget""" 4
.el .IP "\f(CWd_semget\fR" 4
.IX Item "d_semget"
From \fId_semget.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SEMGET\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsemget()\fR routine be available.
.ie n .IP """d_semop""" 4
.el .IP "\f(CWd_semop\fR" 4
.IX Item "d_semop"
From \fId_semop.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SEMOP\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsemop()\fR routine be available.
.ie n .IP """d_sendmsg""" 4
.el .IP "\f(CWd_sendmsg\fR" 4
.IX Item "d_sendmsg"
From \fId_sendmsg.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SENDMSG\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsendmsg()\fR routine be available.
.ie n .IP """d_setegid""" 4
.el .IP "\f(CWd_setegid\fR" 4
.IX Item "d_setegid"
From \fId_setegid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETEGID\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetegid()\fR routine be available
to chizzle tha effectizzle gid of tha current program.
.ie n .IP """d_seteuid""" 4
.el .IP "\f(CWd_seteuid\fR" 4
.IX Item "d_seteuid"
From \fId_seteuid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETEUID\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIseteuid()\fR routine be available
to chizzle tha effectizzle uid of tha current program.
.ie n .IP """d_setgrent""" 4
.el .IP "\f(CWd_setgrent\fR" 4
.IX Item "d_setgrent"
From \fId_setgrent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETGRENT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetgrent()\fR routine be available
for initializin sequential access ta tha crew database.
.ie n .IP """d_setgrent_r""" 4
.el .IP "\f(CWd_setgrent_r\fR" 4
.IX Item "d_setgrent_r"
From \fId_setgrent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETGRENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsetgrent_r()\fR
routine be available.
.ie n .IP """d_setgrps""" 4
.el .IP "\f(CWd_setgrps\fR" 4
.IX Item "d_setgrps"
From \fId_setgrps.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETGROUPS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetgroups()\fR routine be available
to set tha list of process groups.
.ie n .IP """d_sethent""" 4
.el .IP "\f(CWd_sethent\fR" 4
.IX Item "d_sethent"
From \fId_sethent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETHOSTENT\*(C'\fR if \fIsethostent()\fR is
available.
.ie n .IP """d_sethostent_r""" 4
.el .IP "\f(CWd_sethostent_r\fR" 4
.IX Item "d_sethostent_r"
From \fId_sethostent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETHOSTENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsethostent_r()\fR
routine be available.
.ie n .IP """d_setitimer""" 4
.el .IP "\f(CWd_setitimer\fR" 4
.IX Item "d_setitimer"
From \fId_setitimer.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETITIMER\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetitimer()\fR routine be available.
.ie n .IP """d_setlinebuf""" 4
.el .IP "\f(CWd_setlinebuf\fR" 4
.IX Item "d_setlinebuf"
From \fId_setlnbuf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETLINEBUF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetlinebuf()\fR routine be available
to chizzle stderr or stdout from block-buffered or unbuffered ta a
line-buffered mode.
.ie n .IP """d_setlocale""" 4
.el .IP "\f(CWd_setlocale\fR" 4
.IX Item "d_setlocale"
From \fId_setlocale.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETLOCALE\*(C'\fR if \fIsetlocale()\fR is
available ta handle locale-specific ctype implementations.
.ie n .IP """d_setlocale_r""" 4
.el .IP "\f(CWd_setlocale_r\fR" 4
.IX Item "d_setlocale_r"
From \fId_setlocale_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETLOCALE_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsetlocale_r()\fR
routine be available.
.ie n .IP """d_setnent""" 4
.el .IP "\f(CWd_setnent\fR" 4
.IX Item "d_setnent"
From \fId_setnent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETNETENT\*(C'\fR if \fIsetnetent()\fR is
available.
.ie n .IP """d_setnetent_r""" 4
.el .IP "\f(CWd_setnetent_r\fR" 4
.IX Item "d_setnetent_r"
From \fId_setnetent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETNETENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsetnetent_r()\fR
routine be available.
.ie n .IP """d_setpent""" 4
.el .IP "\f(CWd_setpent\fR" 4
.IX Item "d_setpent"
From \fId_setpent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETPROTOENT\*(C'\fR if \fIsetprotoent()\fR is
available.
.ie n .IP """d_setpgid""" 4
.el .IP "\f(CWd_setpgid\fR" 4
.IX Item "d_setpgid"
From \fId_setpgid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETPGID\*(C'\fR symbol if the
setpgid(pid, gpid) function be available ta set process crew \f(CW\*(C`ID\*(C'\fR.
.ie n .IP """d_setpgrp""" 4
.el .IP "\f(CWd_setpgrp\fR" 4
.IX Item "d_setpgrp"
From \fId_setpgrp.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETPGRP\*(C'\fR if \fIsetpgrp()\fR is
available ta set tha current process group.
.ie n .IP """d_setpgrp2""" 4
.el .IP "\f(CWd_setpgrp2\fR" 4
.IX Item "d_setpgrp2"
From \fId_setpgrp2.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_SETPGRP2\s0 symbol, which
indicates ta tha C program dat tha \fIsetpgrp2()\fR (as up in \fI\s-1DG/\s0\f(CI\*(C`UX\*(C'\fI\fR) routine
is available ta set tha current process group.
.ie n .IP """d_setprior""" 4
.el .IP "\f(CWd_setprior\fR" 4
.IX Item "d_setprior"
From \fId_setprior.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETPRIORITY\*(C'\fR if \fIsetpriority()\fR
is available ta set a processs priority.
.ie n .IP """d_setproctitle""" 4
.el .IP "\f(CWd_setproctitle\fR" 4
.IX Item "d_setproctitle"
From \fId_setproctitle.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETPROCTITLE\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsetproctitle()\fR routine
is available.
.ie n .IP """d_setprotoent_r""" 4
.el .IP "\f(CWd_setprotoent_r\fR" 4
.IX Item "d_setprotoent_r"
From \fId_setprotoent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETPROTOENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsetprotoent_r()\fR
routine be available.
.ie n .IP """d_setpwent""" 4
.el .IP "\f(CWd_setpwent\fR" 4
.IX Item "d_setpwent"
From \fId_setpwent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETPWENT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetpwent()\fR routine be available
for initializin sequential access ta tha passwd database.
.ie n .IP """d_setpwent_r""" 4
.el .IP "\f(CWd_setpwent_r\fR" 4
.IX Item "d_setpwent_r"
From \fId_setpwent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETPWENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsetpwent_r()\fR
routine be available.
.ie n .IP """d_setregid""" 4
.el .IP "\f(CWd_setregid\fR" 4
.IX Item "d_setregid"
From \fId_setregid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETREGID\*(C'\fR if \fIsetregid()\fR is
available ta chizzle tha real n' effectizzle gid of tha current
process.
.ie n .IP """d_setresgid""" 4
.el .IP "\f(CWd_setresgid\fR" 4
.IX Item "d_setresgid"
From \fId_setregid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETRESGID\*(C'\fR if \fIsetresgid()\fR is
available ta chizzle tha real, effectizzle n' saved gid of tha current
process.
.ie n .IP """d_setresuid""" 4
.el .IP "\f(CWd_setresuid\fR" 4
.IX Item "d_setresuid"
From \fId_setreuid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETREUID\*(C'\fR if \fIsetresuid()\fR is
available ta chizzle tha real, effectizzle n' saved uid of tha current
process.
.ie n .IP """d_setreuid""" 4
.el .IP "\f(CWd_setreuid\fR" 4
.IX Item "d_setreuid"
From \fId_setreuid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETREUID\*(C'\fR if \fIsetreuid()\fR is
available ta chizzle tha real n' effectizzle uid of tha current
process.
.ie n .IP """d_setrgid""" 4
.el .IP "\f(CWd_setrgid\fR" 4
.IX Item "d_setrgid"
From \fId_setrgid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETRGID\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetrgid()\fR routine be available
to chizzle tha real gid of tha current program.
.ie n .IP """d_setruid""" 4
.el .IP "\f(CWd_setruid\fR" 4
.IX Item "d_setruid"
From \fId_setruid.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETRUID\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetruid()\fR routine be available
to chizzle tha real uid of tha current program.
.ie n .IP """d_setsent""" 4
.el .IP "\f(CWd_setsent\fR" 4
.IX Item "d_setsent"
From \fId_setsent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETSERVENT\*(C'\fR if \fIsetservent()\fR is
available.
.ie n .IP """d_setservent_r""" 4
.el .IP "\f(CWd_setservent_r\fR" 4
.IX Item "d_setservent_r"
From \fId_setservent_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETSERVENT_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsetservent_r()\fR
routine be available.
.ie n .IP """d_setsid""" 4
.el .IP "\f(CWd_setsid\fR" 4
.IX Item "d_setsid"
From \fId_setsid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SETSID\*(C'\fR if \fIsetsid()\fR is
available ta set tha process crew \f(CW\*(C`ID\*(C'\fR.
.ie n .IP """d_setvbuf""" 4
.el .IP "\f(CWd_setvbuf\fR" 4
.IX Item "d_setvbuf"
From \fId_setvbuf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETVBUF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsetvbuf()\fR routine be available
to chizzle bufferin on a open stdio stream.
.ie n .IP """d_sfio""" 4
.el .IP "\f(CWd_sfio\fR" 4
.IX Item "d_sfio"
From \fId_sfio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_SFIO\*(C'\fR symbol,
and indicates whether sfio be available (and should be used).
.ie n .IP """d_shm""" 4
.el .IP "\f(CWd_shm\fR" 4
.IX Item "d_shm"
From \fId_shm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SHM\*(C'\fR symbol, which
indicates dat tha entire shm*(2) library is present.
.ie n .IP """d_shmat""" 4
.el .IP "\f(CWd_shmat\fR" 4
.IX Item "d_shmat"
From \fId_shmat.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SHMAT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIshmat()\fR routine be available.
.ie n .IP """d_shmatprototype""" 4
.el .IP "\f(CWd_shmatprototype\fR" 4
.IX Item "d_shmatprototype"
From \fId_shmat.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SHMAT_PROTOTYPE\*(C'\fR
symbol, which indicates dat \fIsys/shm.h\fR has a prototype for
shmat.
.ie n .IP """d_shmctl""" 4
.el .IP "\f(CWd_shmctl\fR" 4
.IX Item "d_shmctl"
From \fId_shmctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SHMCTL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIshmctl()\fR routine be available.
.ie n .IP """d_shmdt""" 4
.el .IP "\f(CWd_shmdt\fR" 4
.IX Item "d_shmdt"
From \fId_shmdt.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SHMDT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIshmdt()\fR routine be available.
.ie n .IP """d_shmget""" 4
.el .IP "\f(CWd_shmget\fR" 4
.IX Item "d_shmget"
From \fId_shmget.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SHMGET\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIshmget()\fR routine be available.
.ie n .IP """d_sigaction""" 4
.el .IP "\f(CWd_sigaction\fR" 4
.IX Item "d_sigaction"
From \fId_sigaction.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SIGACTION\*(C'\fR symbol, which
indicates dat tha Vr4 \fIsigaction()\fR routine be available.
.ie n .IP """d_signbit""" 4
.el .IP "\f(CWd_signbit\fR" 4
.IX Item "d_signbit"
From \fId_signbit.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SIGNBIT\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsignbit()\fR routine be available
and safe ta use wit perlz intern \f(CW\*(C`NV\*(C'\fR type.
.ie n .IP """d_sigprocmask""" 4
.el .IP "\f(CWd_sigprocmask\fR" 4
.IX Item "d_sigprocmask"
From \fId_sigprocmask.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SIGPROCMASK\*(C'\fR
if \fIsigprocmask()\fR be available ta examine or chizzle tha signal mask
of tha callin process.
.ie n .IP """d_sigsetjmp""" 4
.el .IP "\f(CWd_sigsetjmp\fR" 4
.IX Item "d_sigsetjmp"
From \fId_sigsetjmp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SIGSETJMP\*(C'\fR symbol,
which indicates dat tha \fIsigsetjmp()\fR routine be available to
call \fIsetjmp()\fR n' optionally save tha processs signal mask.
.ie n .IP """d_sin6_scope_id""" 4
.el .IP "\f(CWd_sin6_scope_id\fR" 4
.IX Item "d_sin6_scope_id"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_SIN6_SCOPE_ID\s0 symbol, which
indicates dat a struct sockaddr_in6 structure has tha sin6_scope_id
member.
.ie n .IP """d_sitearch""" 4
.el .IP "\f(CWd_sitearch\fR" 4
.IX Item "d_sitearch"
From \fIsitearch.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`SITEARCH\*(C'\fR ta hold tha pathname
of architecture-dependent library filez fo' \f(CW$package\fR.  If
\&\f(CW$sitearch\fR is tha same ol' dirty as \f(CW$archlib\fR, then dis is set ta undef.
.ie n .IP """d_snprintf""" 4
.el .IP "\f(CWd_snprintf\fR" 4
.IX Item "d_snprintf"
From \fId_snprintf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SNPRINTF\*(C'\fR symbol, which
indicates ta tha C program dat tha snprintf () library function
is available.
.ie n .IP """d_sockaddr_in6""" 4
.el .IP "\f(CWd_sockaddr_in6\fR" 4
.IX Item "d_sockaddr_in6"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_SOCKADDR_IN6\s0 symbol, which
indicates tha availabilitizzle of a struct sockaddr_in6.
.ie n .IP """d_sockaddr_sa_len""" 4
.el .IP "\f(CWd_sockaddr_sa_len\fR" 4
.IX Item "d_sockaddr_sa_len"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SOCKADDR_SA_LEN\*(C'\fR symbol,
which indicates dat a struct sockaddr structure has tha sa_len
member.
.ie n .IP """d_sockatmark""" 4
.el .IP "\f(CWd_sockatmark\fR" 4
.IX Item "d_sockatmark"
From \fId_sockatmark.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SOCKATMARK\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsockatmark()\fR routine be available.
.ie n .IP """d_sockatmarkproto""" 4
.el .IP "\f(CWd_sockatmarkproto\fR" 4
.IX Item "d_sockatmarkproto"
From \fId_sockatmarkproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SOCKATMARK_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIsockatmark()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_socket""" 4
.el .IP "\f(CWd_socket\fR" 4
.IX Item "d_socket"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SOCKET\*(C'\fR, which indicates
that tha \f(CW\*(C`BSD\*(C'\fR socket intercourse is supported.
.ie n .IP """d_socklen_t""" 4
.el .IP "\f(CWd_socklen_t\fR" 4
.IX Item "d_socklen_t"
From \fId_socklen_t.U\fR:
.Sp
This symbol is ghon be defined if tha C compila supports socklen_t.
.ie n .IP """d_sockpair""" 4
.el .IP "\f(CWd_sockpair\fR" 4
.IX Item "d_sockpair"
From \fId_socket.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SOCKETPAIR\*(C'\fR symbol, which
indicates dat tha \f(CW\*(C`BSD\*(C'\fR \fIsocketpair()\fR is supported.
.ie n .IP """d_socks5_init""" 4
.el .IP "\f(CWd_socks5_init\fR" 4
.IX Item "d_socks5_init"
From \fId_socks5_init.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_SOCKS5_INIT\s0 symbol, which
indicates ta tha C program dat tha \fIsocks5_init()\fR routine be available.
.ie n .IP """d_sprintf_returns_strlen""" 4
.el .IP "\f(CWd_sprintf_returns_strlen\fR" 4
.IX Item "d_sprintf_returns_strlen"
From \fId_sprintf_len.U\fR:
.Sp
This variable defines whether sprintf returns tha length of tha string
(as per tha \f(CW\*(C`ANSI\*(C'\fR spec). Right back up in yo muthafuckin ass. Some C libraries retain compatibilitizzle with
pre\-\f(CW\*(C`ANSI\*(C'\fR C n' return a pointa ta tha passed up in buffer; fo' these
this variable is ghon be undef.
.ie n .IP """d_sqrtl""" 4
.el .IP "\f(CWd_sqrtl\fR" 4
.IX Item "d_sqrtl"
From \fId_sqrtl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SQRTL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsqrtl()\fR routine be available.
.ie n .IP """d_srand48_r""" 4
.el .IP "\f(CWd_srand48_r\fR" 4
.IX Item "d_srand48_r"
From \fId_srand48_r.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_SRAND48_R\s0 symbol,
which indicates ta tha C program dat tha \fIsrand48_r()\fR
routine be available.
.ie n .IP """d_srandom_r""" 4
.el .IP "\f(CWd_srandom_r\fR" 4
.IX Item "d_srandom_r"
From \fId_srandom_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SRANDOM_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIsrandom_r()\fR
routine be available.
.ie n .IP """d_sresgproto""" 4
.el .IP "\f(CWd_sresgproto\fR" 4
.IX Item "d_sresgproto"
From \fId_sresgproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETRESGID_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIsetresgid()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_sresuproto""" 4
.el .IP "\f(CWd_sresuproto\fR" 4
.IX Item "d_sresuproto"
From \fId_sresuproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SETRESUID_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIsetresuid()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_statblks""" 4
.el .IP "\f(CWd_statblks\fR" 4
.IX Item "d_statblks"
From \fId_statblks.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_STAT_BLOCKS\*(C'\fR
if dis system has a stat structure declaring
st_blksize n' st_blocks.
.ie n .IP """d_statfs_f_flags""" 4
.el .IP "\f(CWd_statfs_f_flags\fR" 4
.IX Item "d_statfs_f_flags"
From \fId_statfs_f_flags.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRUCT_STATFS_F_FLAGS\*(C'\fR
symbol, which indicates ta struct statfs from has f_flags member.
This kind of struct statfs is comin from \fIsys/mount.h\fR (\f(CW\*(C`BSD\*(C'\fR),
not from \fIsys/statfs.h\fR (\f(CW\*(C`SYSV\*(C'\fR).
.ie n .IP """d_statfs_s""" 4
.el .IP "\f(CWd_statfs_s\fR" 4
.IX Item "d_statfs_s"
From \fId_statfs_s.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRUCT_STATFS\*(C'\fR symbol,
which indicates dat tha struct statfs is supported.
.ie n .IP """d_static_inline""" 4
.el .IP "\f(CWd_static_inline\fR" 4
.IX Item "d_static_inline"
From \fId_static_inline.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STATIC_INLINE\*(C'\fR symbol,
which indicates dat tha C compila supports C99\-style static
inline.  That is, tha function can't be called from another
translation unit.
.ie n .IP """d_statvfs""" 4
.el .IP "\f(CWd_statvfs\fR" 4
.IX Item "d_statvfs"
From \fId_statvfs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STATVFS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstatvfs()\fR routine be available.
.ie n .IP """d_stdio_cnt_lval""" 4
.el .IP "\f(CWd_stdio_cnt_lval\fR" 4
.IX Item "d_stdio_cnt_lval"
From \fId_stdstdio.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`STDIO_CNT_LVALUE\*(C'\fR if the
\&\f(CW\*(C`FILE_cnt\*(C'\fR macro can be used as a lvalue.
.ie n .IP """d_stdio_ptr_lval""" 4
.el .IP "\f(CWd_stdio_ptr_lval\fR" 4
.IX Item "d_stdio_ptr_lval"
From \fId_stdstdio.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`STDIO_PTR_LVALUE\*(C'\fR if the
\&\f(CW\*(C`FILE_ptr\*(C'\fR macro can be used as a lvalue.
.ie n .IP """d_stdio_ptr_lval_nochange_cnt""" 4
.el .IP "\f(CWd_stdio_ptr_lval_nochange_cnt\fR" 4
.IX Item "d_stdio_ptr_lval_nochange_cnt"
From \fId_stdstdio.U\fR:
.Sp
This symbol is defined if rockin tha \f(CW\*(C`FILE_ptr\*(C'\fR macro as a lvalue
to increase tha pointa by n leaves File_cnt(fp) unchanged.
.ie n .IP """d_stdio_ptr_lval_sets_cnt""" 4
.el .IP "\f(CWd_stdio_ptr_lval_sets_cnt\fR" 4
.IX Item "d_stdio_ptr_lval_sets_cnt"
From \fId_stdstdio.U\fR:
.Sp
This symbol is defined if rockin tha \f(CW\*(C`FILE_ptr\*(C'\fR macro as a lvalue
to increase tha pointa by n has tha side effect of decreasin the
value of File_cnt(fp) by n.
.ie n .IP """d_stdio_stream_array""" 4
.el .IP "\f(CWd_stdio_stream_array\fR" 4
.IX Item "d_stdio_stream_array"
From \fIstdio_streams.U\fR:
.Sp
This variable  drops some lyrics ta whether there be a array holding
the stdio streams.
.ie n .IP """d_stdiobase""" 4
.el .IP "\f(CWd_stdiobase\fR" 4
.IX Item "d_stdiobase"
From \fId_stdstdio.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_STDIO_BASE\*(C'\fR if dis system
has a \f(CW\*(C`FILE\*(C'\fR structure declarin a usable _base field (or equivalent)
in \fIstdio.h\fR.
.ie n .IP """d_stdstdio""" 4
.el .IP "\f(CWd_stdstdio\fR" 4
.IX Item "d_stdstdio"
From \fId_stdstdio.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_STDIO_PTR\*(C'\fR if dis system
has a \f(CW\*(C`FILE\*(C'\fR structure declarin usable _ptr n' _cnt fieldz (or
equivalent) up in \fIstdio.h\fR.
.ie n .IP """d_strchr""" 4
.el .IP "\f(CWd_strchr\fR" 4
.IX Item "d_strchr"
From \fId_strchr.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_STRCHR\*(C'\fR if \fIstrchr()\fR and
\&\fIstrrchr()\fR is available fo' strang searching.
.ie n .IP """d_strcoll""" 4
.el .IP "\f(CWd_strcoll\fR" 4
.IX Item "d_strcoll"
From \fId_strcoll.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_STRCOLL\*(C'\fR if \fIstrcoll()\fR is
available ta compare strings rockin collatin shiznit.
.ie n .IP """d_strctcpy""" 4
.el .IP "\f(CWd_strctcpy\fR" 4
.IX Item "d_strctcpy"
From \fId_strctcpy.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_STRUCT_COPY\*(C'\fR symbol, which
indicates ta tha C program dat dis C compila knows how tha fuck ta copy
structures.
.ie n .IP """d_strerrm""" 4
.el .IP "\f(CWd_strerrm\fR" 4
.IX Item "d_strerrm"
From \fId_strerror.U\fR:
.Sp
This variable holdz what tha fuck Strerror is defined as ta translate a error
code condizzle tha fuck into a error message string. Well shiiiit, it could be \f(CW\*(C`strerror\*(C'\fR
or a mo' \f(CW\*(C`complex\*(C'\fR macro emulatin strerror wit sys_errlist[], or the
\&\f(CW\*(C`unknown\*(C'\fR strang when both strerror n' sys_errlist is missing.
.ie n .IP """d_strerror""" 4
.el .IP "\f(CWd_strerror\fR" 4
.IX Item "d_strerror"
From \fId_strerror.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_STRERROR\*(C'\fR if \fIstrerror()\fR is
available ta translate error numbers ta strings.
.ie n .IP """d_strerror_r""" 4
.el .IP "\f(CWd_strerror_r\fR" 4
.IX Item "d_strerror_r"
From \fId_strerror_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRERROR_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIstrerror_r()\fR
routine be available.
.ie n .IP """d_strftime""" 4
.el .IP "\f(CWd_strftime\fR" 4
.IX Item "d_strftime"
From \fId_strftime.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRFTIME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrftime()\fR routine be available.
.ie n .IP """d_strlcat""" 4
.el .IP "\f(CWd_strlcat\fR" 4
.IX Item "d_strlcat"
From \fId_strlcat.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRLCAT\*(C'\fR symbol, which
indicates ta tha C program dat tha strlcat () routine be available.
.ie n .IP """d_strlcpy""" 4
.el .IP "\f(CWd_strlcpy\fR" 4
.IX Item "d_strlcpy"
From \fId_strlcpy.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRLCPY\*(C'\fR symbol, which
indicates ta tha C program dat tha strlcpy () routine be available.
.ie n .IP """d_strtod""" 4
.el .IP "\f(CWd_strtod\fR" 4
.IX Item "d_strtod"
From \fId_strtod.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOD\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtod()\fR routine be available
to provide betta numeric strang conversion than \fIatof()\fR.
.ie n .IP """d_strtol""" 4
.el .IP "\f(CWd_strtol\fR" 4
.IX Item "d_strtol"
From \fId_strtol.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtol()\fR routine be available
to provide betta numeric strang conversion than \fIatoi()\fR n' playas.
.ie n .IP """d_strtold""" 4
.el .IP "\f(CWd_strtold\fR" 4
.IX Item "d_strtold"
From \fId_strtold.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOLD\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtold()\fR routine be available.
.ie n .IP """d_strtoll""" 4
.el .IP "\f(CWd_strtoll\fR" 4
.IX Item "d_strtoll"
From \fId_strtoll.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOLL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtoll()\fR routine be available.
.ie n .IP """d_strtoq""" 4
.el .IP "\f(CWd_strtoq\fR" 4
.IX Item "d_strtoq"
From \fId_strtoq.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOQ\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtoq()\fR routine be available.
.ie n .IP """d_strtoul""" 4
.el .IP "\f(CWd_strtoul\fR" 4
.IX Item "d_strtoul"
From \fId_strtoul.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOUL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtoul()\fR routine be available
to provide conversion of strings ta unsigned long.
.ie n .IP """d_strtoull""" 4
.el .IP "\f(CWd_strtoull\fR" 4
.IX Item "d_strtoull"
From \fId_strtoull.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOULL\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtoull()\fR routine be available.
.ie n .IP """d_strtouq""" 4
.el .IP "\f(CWd_strtouq\fR" 4
.IX Item "d_strtouq"
From \fId_strtouq.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_STRTOUQ\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIstrtouq()\fR routine be available.
.ie n .IP """d_strxfrm""" 4
.el .IP "\f(CWd_strxfrm\fR" 4
.IX Item "d_strxfrm"
From \fId_strxfrm.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_STRXFRM\*(C'\fR if \fIstrxfrm()\fR is
available ta transform strings.
.ie n .IP """d_suidsafe""" 4
.el .IP "\f(CWd_suidsafe\fR" 4
.IX Item "d_suidsafe"
From \fId_dosuid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`SETUID_SCRIPTS_ARE_SECURE_NOW\*(C'\fR
if setuid scripts can be secure.  This test looks up in \fI/dev/fd/\fR.
.ie n .IP """d_symlink""" 4
.el .IP "\f(CWd_symlink\fR" 4
.IX Item "d_symlink"
From \fId_symlink.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SYMLINK\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsymlink()\fR routine be available
to create symbolic links.
.ie n .IP """d_syscall""" 4
.el .IP "\f(CWd_syscall\fR" 4
.IX Item "d_syscall"
From \fId_syscall.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SYSCALL\*(C'\fR if \fIsyscall()\fR is
available call arbitrary system calls.
.ie n .IP """d_syscallproto""" 4
.el .IP "\f(CWd_syscallproto\fR" 4
.IX Item "d_syscallproto"
From \fId_syscallproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SYSCALL_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIsyscall()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_sysconf""" 4
.el .IP "\f(CWd_sysconf\fR" 4
.IX Item "d_sysconf"
From \fId_sysconf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_SYSCONF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIsysconf()\fR routine be available
to determine system related limits n' options.
.ie n .IP """d_sysernlst""" 4
.el .IP "\f(CWd_sysernlst\fR" 4
.IX Item "d_sysernlst"
From \fId_strerror.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SYS_ERRNOLIST\*(C'\fR if sys_errnolist[]
is available ta translate error numbers ta tha symbolic name.
.ie n .IP """d_syserrlst""" 4
.el .IP "\f(CWd_syserrlst\fR" 4
.IX Item "d_syserrlst"
From \fId_strerror.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SYS_ERRLIST\*(C'\fR if sys_errlist[] is
available ta translate error numbers ta strings.
.ie n .IP """d_system""" 4
.el .IP "\f(CWd_system\fR" 4
.IX Item "d_system"
From \fId_system.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_SYSTEM\*(C'\fR if \fIsystem()\fR is
available ta issue a gangbangin' finger-lickin' dirty-ass shell command.
.ie n .IP """d_tcgetpgrp""" 4
.el .IP "\f(CWd_tcgetpgrp\fR" 4
.IX Item "d_tcgetpgrp"
From \fId_tcgtpgrp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TCGETPGRP\*(C'\fR symbol, which
indicates ta tha C program dat tha \fItcgetpgrp()\fR routine be available.
to git foreground process crew \f(CW\*(C`ID\*(C'\fR.
.ie n .IP """d_tcsetpgrp""" 4
.el .IP "\f(CWd_tcsetpgrp\fR" 4
.IX Item "d_tcsetpgrp"
From \fId_tcstpgrp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TCSETPGRP\*(C'\fR symbol, which
indicates ta tha C program dat tha \fItcsetpgrp()\fR routine be available
to set foreground process crew \f(CW\*(C`ID\*(C'\fR.
.ie n .IP """d_telldir""" 4
.el .IP "\f(CWd_telldir\fR" 4
.IX Item "d_telldir"
From \fId_readdir.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_TELLDIR\*(C'\fR if \fItelldir()\fR is
available.
.ie n .IP """d_telldirproto""" 4
.el .IP "\f(CWd_telldirproto\fR" 4
.IX Item "d_telldirproto"
From \fId_telldirproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TELLDIR_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fItelldir()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_time""" 4
.el .IP "\f(CWd_time\fR" 4
.IX Item "d_time"
From \fId_time.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TIME\*(C'\fR symbol, which indicates
that tha \fItime()\fR routine exists, n' you can put dat on yo' toast.  Da \fItime()\fR routine is normally
provided on \f(CW\*(C`UNIX\*(C'\fR systems.
.ie n .IP """d_timegm""" 4
.el .IP "\f(CWd_timegm\fR" 4
.IX Item "d_timegm"
From \fId_timegm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TIMEGM\*(C'\fR symbol, which
indicates ta tha C program dat tha timegm () routine be available.
.ie n .IP """d_times""" 4
.el .IP "\f(CWd_times\fR" 4
.IX Item "d_times"
From \fId_times.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TIMES\*(C'\fR symbol, which indicates
that tha \fItimes()\fR routine exists, n' you can put dat on yo' toast.  Da \fItimes()\fR routine is normally
provided on \f(CW\*(C`UNIX\*(C'\fR systems. Yo ass may gotta include <sys/times.h>.
.ie n .IP """d_tm_tm_gmtoff""" 4
.el .IP "\f(CWd_tm_tm_gmtoff\fR" 4
.IX Item "d_tm_tm_gmtoff"
From \fIi_time.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_TM_TM_GMTOFF\*(C'\fR, which indicates
indicates ta tha C program dat tha struct tm has tha tm_gmtoff field.
.ie n .IP """d_tm_tm_zone""" 4
.el .IP "\f(CWd_tm_tm_zone\fR" 4
.IX Item "d_tm_tm_zone"
From \fIi_time.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_TM_TM_ZONE\*(C'\fR, which indicates
indicates ta tha C program dat tha struct tm has tha tm_zone field.
.ie n .IP """d_tmpnam_r""" 4
.el .IP "\f(CWd_tmpnam_r\fR" 4
.IX Item "d_tmpnam_r"
From \fId_tmpnam_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TMPNAM_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fItmpnam_r()\fR
routine be available.
.ie n .IP """d_truncate""" 4
.el .IP "\f(CWd_truncate\fR" 4
.IX Item "d_truncate"
From \fId_truncate.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_TRUNCATE\*(C'\fR if \fItruncate()\fR is
available ta truncate files.
.ie n .IP """d_ttyname_r""" 4
.el .IP "\f(CWd_ttyname_r\fR" 4
.IX Item "d_ttyname_r"
From \fId_ttyname_r.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_TTYNAME_R\*(C'\fR symbol,
which indicates ta tha C program dat tha \fIttyname_r()\fR
routine be available.
.ie n .IP """d_tzname""" 4
.el .IP "\f(CWd_tzname\fR" 4
.IX Item "d_tzname"
From \fId_tzname.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_TZNAME\*(C'\fR if tzname[] is
available ta access timezone names.
.ie n .IP """d_u32align""" 4
.el .IP "\f(CWd_u32align\fR" 4
.IX Item "d_u32align"
From \fId_u32align.U\fR:
.Sp
This variable  drops some lyrics ta whether you must access characta data
all up in U32\-aligned pointers.
.ie n .IP """d_ualarm""" 4
.el .IP "\f(CWd_ualarm\fR" 4
.IX Item "d_ualarm"
From \fId_ualarm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_UALARM\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIualarm()\fR routine be available.
.ie n .IP """d_umask""" 4
.el .IP "\f(CWd_umask\fR" 4
.IX Item "d_umask"
From \fId_umask.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_UMASK\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIumask()\fR routine be available.
to set n' git tha value of tha file creation mask.
.ie n .IP """d_uname""" 4
.el .IP "\f(CWd_uname\fR" 4
.IX Item "d_uname"
From \fId_gethname.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_UNAME\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIuname()\fR routine may be
used ta derive tha host name.
.ie n .IP """d_union_semun""" 4
.el .IP "\f(CWd_union_semun\fR" 4
.IX Item "d_union_semun"
From \fId_union_semun.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_UNION_SEMUN\*(C'\fR if the
union semun is defined by includin <sys/sem.h>.
.ie n .IP """d_unordered""" 4
.el .IP "\f(CWd_unordered\fR" 4
.IX Item "d_unordered"
From \fId_unordered.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_UNORDERED\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIunordered()\fR routine be available.
.ie n .IP """d_unsetenv""" 4
.el .IP "\f(CWd_unsetenv\fR" 4
.IX Item "d_unsetenv"
From \fId_unsetenv.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_UNSETENV\*(C'\fR symbol, which
indicates ta tha C program dat tha unsetenv () routine be available.
.ie n .IP """d_usleep""" 4
.el .IP "\f(CWd_usleep\fR" 4
.IX Item "d_usleep"
From \fId_usleep.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_USLEEP\*(C'\fR if \fIusleep()\fR is
available ta do high granularitizzle chills.
.ie n .IP """d_usleepproto""" 4
.el .IP "\f(CWd_usleepproto\fR" 4
.IX Item "d_usleepproto"
From \fId_usleepproto.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_USLEEP_PROTO\*(C'\fR symbol,
which indicates ta tha C program dat tha system provides
a prototype fo' tha \fIusleep()\fR function. I aint talkin' bout chicken n' gravy biatch.  Otherwise, it is
up ta tha program ta supply one.
.ie n .IP """d_ustat""" 4
.el .IP "\f(CWd_ustat\fR" 4
.IX Item "d_ustat"
From \fId_ustat.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_USTAT\*(C'\fR if \fIustat()\fR is
available ta query file system statistics by dev_t.
.ie n .IP """d_vendorarch""" 4
.el .IP "\f(CWd_vendorarch\fR" 4
.IX Item "d_vendorarch"
From \fIvendorarch.U\fR:
.Sp
This variable conditionally defined \f(CW\*(C`PERL_VENDORARCH\*(C'\fR.
.ie n .IP """d_vendorbin""" 4
.el .IP "\f(CWd_vendorbin\fR" 4
.IX Item "d_vendorbin"
From \fIvendorbin.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PERL_VENDORBIN\*(C'\fR.
.ie n .IP """d_vendorlib""" 4
.el .IP "\f(CWd_vendorlib\fR" 4
.IX Item "d_vendorlib"
From \fIvendorlib.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PERL_VENDORLIB\*(C'\fR.
.ie n .IP """d_vendorscript""" 4
.el .IP "\f(CWd_vendorscript\fR" 4
.IX Item "d_vendorscript"
From \fIvendorscript.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`PERL_VENDORSCRIPT\*(C'\fR.
.ie n .IP """d_vfork""" 4
.el .IP "\f(CWd_vfork\fR" 4
.IX Item "d_vfork"
From \fId_vfork.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_VFORK\*(C'\fR symbol, which
indicates tha \fIvfork()\fR routine be available.
.ie n .IP """d_void_closedir""" 4
.el .IP "\f(CWd_void_closedir\fR" 4
.IX Item "d_void_closedir"
From \fId_closedir.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`VOID_CLOSEDIR\*(C'\fR if \fIclosedir()\fR
does not return a value.
.ie n .IP """d_voidsig""" 4
.el .IP "\f(CWd_voidsig\fR" 4
.IX Item "d_voidsig"
From \fId_voidsig.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`VOIDSIG\*(C'\fR if dis system
declares \*(L"void (*signal(...))()\*(R" up in \fIsignal.h\fR.  Da oldschool way was to
declare it as \*(L"int (*signal(...))()\*(R".
.ie n .IP """d_voidtty""" 4
.el .IP "\f(CWd_voidtty\fR" 4
.IX Item "d_voidtty"
From \fIi_sysioctl.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`USE_IOCNOTTY\*(C'\fR ta indicate dat the
\&\fIioctl()\fR call wit \f(CW\*(C`TIOCNOTTY\*(C'\fR should be used ta void tty association.
Otherwise (on \f(CW\*(C`USG\*(C'\fR probably), it is enough ta close tha standard file
descriptors n' do a \fIsetpgrp()\fR.
.ie n .IP """d_volatile""" 4
.el .IP "\f(CWd_volatile\fR" 4
.IX Item "d_volatile"
From \fId_volatile.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HASVOLATILE\*(C'\fR symbol, which
indicates ta tha C program dat dis C compila knows bout the
volatile declaration.
.ie n .IP """d_vprintf""" 4
.el .IP "\f(CWd_vprintf\fR" 4
.IX Item "d_vprintf"
From \fId_vprintf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_VPRINTF\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIvprintf()\fR routine be available
to printf wit a pointa ta a argument list.
.ie n .IP """d_vsnprintf""" 4
.el .IP "\f(CWd_vsnprintf\fR" 4
.IX Item "d_vsnprintf"
From \fId_snprintf.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_VSNPRINTF\*(C'\fR symbol, which
indicates ta tha C program dat tha vsnprintf () library function
is available.
.ie n .IP """d_wait4""" 4
.el .IP "\f(CWd_wait4\fR" 4
.IX Item "d_wait4"
From \fId_wait4.U\fR:
.Sp
This variable conditionally defines tha \s-1HAS_WAIT4\s0 symbol, which
indicates tha \fIwait4()\fR routine be available.
.ie n .IP """d_waitpid""" 4
.el .IP "\f(CWd_waitpid\fR" 4
.IX Item "d_waitpid"
From \fId_waitpid.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`HAS_WAITPID\*(C'\fR if \fIwaitpid()\fR is
available ta wait fo' lil pimp process.
.ie n .IP """d_wcstombs""" 4
.el .IP "\f(CWd_wcstombs\fR" 4
.IX Item "d_wcstombs"
From \fId_wcstombs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_WCSTOMBS\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIwcstombs()\fR routine be available
to convert wide characta strings ta multibyte strings.
.ie n .IP """d_wctomb""" 4
.el .IP "\f(CWd_wctomb\fR" 4
.IX Item "d_wctomb"
From \fId_wctomb.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_WCTOMB\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIwctomb()\fR routine be available
to convert a wide characta ta a multibyte.
.ie n .IP """d_writev""" 4
.el .IP "\f(CWd_writev\fR" 4
.IX Item "d_writev"
From \fId_writev.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`HAS_WRITEV\*(C'\fR symbol, which
indicates ta tha C program dat tha \fIwritev()\fR routine be available.
.ie n .IP """d_xenix""" 4
.el .IP "\f(CWd_xenix\fR" 4
.IX Item "d_xenix"
From \fIGuess.U\fR:
.Sp
This variable conditionally defines tha symbol \f(CW\*(C`XENIX\*(C'\fR, which alerts
the C program dat it runs under Xenix.
.ie n .IP """date""" 4
.el .IP "\f(CWdate\fR" 4
.IX Item "date"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha date program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`date\*(C'\fR n' aint useful.
.ie n .IP """db_hashtype""" 4
.el .IP "\f(CWdb_hashtype\fR" 4
.IX Item "db_hashtype"
From \fIi_db.U\fR:
.Sp
This variable gotz nuff tha type of tha hash structure element
in tha <db.h> header file.  In olda versionz of \f(CW\*(C`DB\*(C'\fR, it was
int, while up in newer ones it is u_int32_t.
.ie n .IP """db_prefixtype""" 4
.el .IP "\f(CWdb_prefixtype\fR" 4
.IX Item "db_prefixtype"
From \fIi_db.U\fR:
.Sp
This variable gotz nuff tha type of tha prefix structure element
in tha <db.h> header file.  In olda versionz of \f(CW\*(C`DB\*(C'\fR, it was
int, while up in newer ones it is size_t.
.ie n .IP """db_version_major""" 4
.el .IP "\f(CWdb_version_major\fR" 4
.IX Item "db_version_major"
From \fIi_db.U\fR:
.Sp
This variable gotz nuff tha major version number of
Berkeley \f(CW\*(C`DB\*(C'\fR found up in tha <db.h> header file.
.ie n .IP """db_version_minor""" 4
.el .IP "\f(CWdb_version_minor\fR" 4
.IX Item "db_version_minor"
From \fIi_db.U\fR:
.Sp
This variable gotz nuff tha minor version number of
Berkeley \f(CW\*(C`DB\*(C'\fR found up in tha <db.h> header file.
For \f(CW\*(C`DB\*(C'\fR version 1 dis be always 0.
.ie n .IP """db_version_patch""" 4
.el .IP "\f(CWdb_version_patch\fR" 4
.IX Item "db_version_patch"
From \fIi_db.U\fR:
.Sp
This variable gotz nuff tha patch version number of
Berkeley \f(CW\*(C`DB\*(C'\fR found up in tha <db.h> header file.
For \f(CW\*(C`DB\*(C'\fR version 1 dis be always 0.
.ie n .IP """defvoidused""" 4
.el .IP "\f(CWdefvoidused\fR" 4
.IX Item "defvoidused"
From \fIvoidflags.U\fR:
.Sp
This variable gotz nuff tha default value of tha \f(CW\*(C`VOIDUSED\*(C'\fR symbol (15).
.ie n .IP """direntrytype""" 4
.el .IP "\f(CWdirentrytype\fR" 4
.IX Item "direntrytype"
From \fIi_dirent.U\fR:
.Sp
This symbol is set ta \f(CW\*(C`struct direct\*(C'\fR or \f(CW\*(C`struct dirent\*(C'\fR dependin on
whether dirent be available or not. Yo ass should use dis pseudo type to
portably declare yo' directory entries.
.ie n .IP """dlext""" 4
.el .IP "\f(CWdlext\fR" 4
.IX Item "dlext"
From \fIdlext.U\fR:
.Sp
This variable gotz nuff tha extension dat is ta be used fo' the
dynamically loaded modulez dat perl generates.
.ie n .IP """dlsrc""" 4
.el .IP "\f(CWdlsrc\fR" 4
.IX Item "dlsrc"
From \fIdlsrc.U\fR:
.Sp
This variable gotz nuff tha name of tha dynamic loadin file that
will be used wit tha package.
.ie n .IP """doublesize""" 4
.el .IP "\f(CWdoublesize\fR" 4
.IX Item "doublesize"
From \fIdoublesize.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`DOUBLESIZE\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bytes there be up in a thugged-out double.
.ie n .IP """drand01""" 4
.el .IP "\f(CWdrand01\fR" 4
.IX Item "drand01"
From \fIrandfunc.U\fR:
.Sp
Indicates tha macro ta be used ta generate normalized
random numbers.  Uses randfunc, often divided by
(double) (((unsigned long) 1 << randbits)) up in order to
normalize tha result.
In C programs, tha macro \f(CW\*(C`Drand01\*(C'\fR is mapped ta drand01.
.ie n .IP """drand48_r_proto""" 4
.el .IP "\f(CWdrand48_r_proto\fR" 4
.IX Item "drand48_r_proto"
From \fId_drand48_r.U\fR:
.Sp
This variable encodes tha prototype of drand48_r.
It be zero if d_drand48_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_drand48_r
is defined.
.ie n .IP """dtrace""" 4
.el .IP "\f(CWdtrace\fR" 4
.IX Item "dtrace"
From \fIusedtrace.U\fR:
.Sp
This variable holdz tha location of tha dtrace executable.
.ie n .IP """dynamic_ext""" 4
.el .IP "\f(CWdynamic_ext\fR" 4
.IX Item "dynamic_ext"
From \fIExtensions.U\fR:
.Sp
This variable holdz a list of \f(CW\*(C`XS\*(C'\fR extension filez we want to
link dynamically tha fuck into tha package.  It be used by Makefile.
.SS "e"
.IX Subsection "e"
.ie n .IP """eagain""" 4
.el .IP "\f(CWeagain\fR" 4
.IX Item "eagain"
From \fInblock_io.U\fR:
.Sp
This variable bears tha symbolic errno code set by \fIread()\fR when no
data is present on tha file n' non-blockin I/O was enabled (otherwise,
\&\fIread()\fR blocks naturally).
.ie n .IP """ebcdic""" 4
.el .IP "\f(CWebcdic\fR" 4
.IX Item "ebcdic"
From \fIebcdic.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`EBCDIC\*(C'\fR if this
system uses \f(CW\*(C`EBCDIC\*(C'\fR encoding.
.ie n .IP """echo""" 4
.el .IP "\f(CWecho\fR" 4
.IX Item "echo"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha echo program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`echo\*(C'\fR n' aint useful.
.ie n .IP """egrep""" 4
.el .IP "\f(CWegrep\fR" 4
.IX Item "egrep"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha egrep program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`egrep\*(C'\fR n' aint useful.
.ie n .IP """emacs""" 4
.el .IP "\f(CWemacs\fR" 4
.IX Item "emacs"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """endgrent_r_proto""" 4
.el .IP "\f(CWendgrent_r_proto\fR" 4
.IX Item "endgrent_r_proto"
From \fId_endgrent_r.U\fR:
.Sp
This variable encodes tha prototype of endgrent_r.
It be zero if d_endgrent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_endgrent_r
is defined.
.ie n .IP """endhostent_r_proto""" 4
.el .IP "\f(CWendhostent_r_proto\fR" 4
.IX Item "endhostent_r_proto"
From \fId_endhostent_r.U\fR:
.Sp
This variable encodes tha prototype of endhostent_r.
It be zero if d_endhostent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_endhostent_r
is defined.
.ie n .IP """endnetent_r_proto""" 4
.el .IP "\f(CWendnetent_r_proto\fR" 4
.IX Item "endnetent_r_proto"
From \fId_endnetent_r.U\fR:
.Sp
This variable encodes tha prototype of endnetent_r.
It be zero if d_endnetent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_endnetent_r
is defined.
.ie n .IP """endprotoent_r_proto""" 4
.el .IP "\f(CWendprotoent_r_proto\fR" 4
.IX Item "endprotoent_r_proto"
From \fId_endprotoent_r.U\fR:
.Sp
This variable encodes tha prototype of endprotoent_r.
It be zero if d_endprotoent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_endprotoent_r
is defined.
.ie n .IP """endpwent_r_proto""" 4
.el .IP "\f(CWendpwent_r_proto\fR" 4
.IX Item "endpwent_r_proto"
From \fId_endpwent_r.U\fR:
.Sp
This variable encodes tha prototype of endpwent_r.
It be zero if d_endpwent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_endpwent_r
is defined.
.ie n .IP """endservent_r_proto""" 4
.el .IP "\f(CWendservent_r_proto\fR" 4
.IX Item "endservent_r_proto"
From \fId_endservent_r.U\fR:
.Sp
This variable encodes tha prototype of endservent_r.
It be zero if d_endservent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_endservent_r
is defined.
.ie n .IP """eunicefix""" 4
.el .IP "\f(CWeunicefix\fR" 4
.IX Item "eunicefix"
From \fIInit.U\fR:
.Sp
When hustlin under Eunice dis variable gotz nuff a cold-ass lil command which will
convert a gangbangin' finger-lickin' dirty-ass shell script ta tha proper form of text file fo' it ta be
executable by tha shell.  On other systems it aint nuthin but a no-op.
.ie n .IP """exe_ext""" 4
.el .IP "\f(CWexe_ext\fR" 4
.IX Item "exe_ext"
From \fIUnix.U\fR:
.Sp
This be a oldschool synonym fo' _exe.
.ie n .IP """expr""" 4
.el .IP "\f(CWexpr\fR" 4
.IX Item "expr"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha expr program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`expr\*(C'\fR n' aint useful.
.ie n .IP """extensions""" 4
.el .IP "\f(CWextensions\fR" 4
.IX Item "extensions"
From \fIExtensions.U\fR:
.Sp
This variable holdz a list of all extension filez (both \f(CW\*(C`XS\*(C'\fR and
non-xs linked tha fuck into tha package.  It be propagated ta \fIConfig.pm\fR
and is typically used ta test whether a particular extension
is available.
.ie n .IP """extern_C""" 4
.el .IP "\f(CWextern_C\fR" 4
.IX Item "extern_C"
From \fICsym.U\fR:
.Sp
\&\f(CW\*(C`ANSI\*(C'\fR C requires \f(CW\*(C`extern\*(C'\fR where \*(C+ requires 'extern \f(CW\*(C`C\*(C'\fR'. This
variable can be used up in Configure ta do tha right thang.
.ie n .IP """extras""" 4
.el .IP "\f(CWextras\fR" 4
.IX Item "extras"
From \fIExtras.U\fR:
.Sp
This variable holdz a list of extra modulez ta install.
.SS "f"
.IX Subsection "f"
.ie n .IP """fflushall""" 4
.el .IP "\f(CWfflushall\fR" 4
.IX Item "fflushall"
From \fIfflushall.U\fR:
.Sp
This symbol, if defined,  drops some lyrics ta dat ta flush
all pendin stdio output one must loop all up in all
the stdio file handlez stored up in a array n' fflush em.
Note dat if fflushNULL is defined, fflushall will not
even be probed fo' n' is ghon be left undefined.
.ie n .IP """fflushNULL""" 4
.el .IP "\f(CWfflushNULL\fR" 4
.IX Item "fflushNULL"
From \fIfflushall.U\fR:
.Sp
This symbol, if defined,  drops some lyrics ta dat fflush(\f(CW\*(C`NULL\*(C'\fR) do flush
all pendin stdio output.
.ie n .IP """find""" 4
.el .IP "\f(CWfind\fR" 4
.IX Item "find"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """firstmakefile""" 4
.el .IP "\f(CWfirstmakefile\fR" 4
.IX Item "firstmakefile"
From \fIUnix.U\fR:
.Sp
This variable defines tha straight-up original gangsta file searched by make.  On unix,
it is makefile (then Makefile).  On case-insensitizzle systems,
it might be suttin' else.  This is only used ta deal with
convoluted make depend tricks.
.ie n .IP """flex""" 4
.el .IP "\f(CWflex\fR" 4
.IX Item "flex"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """fpossize""" 4
.el .IP "\f(CWfpossize\fR" 4
.IX Item "fpossize"
From \fIfpossize.U\fR:
.Sp
This variable gotz nuff tha size of a gangbangin' fpostype up in bytes.
.ie n .IP """fpostype""" 4
.el .IP "\f(CWfpostype\fR" 4
.IX Item "fpostype"
From \fIfpostype.U\fR:
.Sp
This variable defines Fpos_t ta be suttin' like fpos_t, long,
uint, or whatever type is used ta declare file positions up in libc.
.ie n .IP """freetype""" 4
.el .IP "\f(CWfreetype\fR" 4
.IX Item "freetype"
From \fImallocsrc.U\fR:
.Sp
This variable gotz nuff tha return type of \fIfree()\fR.  It be usually
void yo, but occasionally int.
.ie n .IP """from""" 4
.el .IP "\f(CWfrom\fR" 4
.IX Item "from"
From \fICross.U\fR:
.Sp
This variable gotz nuff tha command used by Configure
to copy filez from tha target host.  Useful n' available
only durin Perl build.
Da strang \f(CW\*(C`:\*(C'\fR if not cross-compiling.
.ie n .IP """full_ar""" 4
.el .IP "\f(CWfull_ar\fR" 4
.IX Item "full_ar"
From \fILoc_ar.U\fR:
.Sp
This variable gotz nuff tha full pathname ta \f(CW\*(C`ar\*(C'\fR, whether or
not tha user has specified \f(CW\*(C`portability\*(C'\fR.  This is only used
in tha \fIMakefile.SH\fR.
.ie n .IP """full_csh""" 4
.el .IP "\f(CWfull_csh\fR" 4
.IX Item "full_csh"
From \fId_csh.U\fR:
.Sp
This variable gotz nuff tha full pathname ta \f(CW\*(C`csh\*(C'\fR, whether or
not tha user has specified \f(CW\*(C`portability\*(C'\fR.  This is only used
in tha compiled C program, n' we assume dat all systems which
can share dis executable gonna git tha same full pathname to
\&\fIcsh.\fR
.ie n .IP """full_sed""" 4
.el .IP "\f(CWfull_sed\fR" 4
.IX Item "full_sed"
From \fILoc_sed.U\fR:
.Sp
This variable gotz nuff tha full pathname ta \f(CW\*(C`sed\*(C'\fR, whether or
not tha user has specified \f(CW\*(C`portability\*(C'\fR.  This is only used
in tha compiled C program, n' we assume dat all systems which
can share dis executable gonna git tha same full pathname to
\&\fIsed.\fR
.SS "g"
.IX Subsection "g"
.ie n .IP """gccansipedantic""" 4
.el .IP "\f(CWgccansipedantic\fR" 4
.IX Item "gccansipedantic"
From \fIgccvers.U\fR:
.Sp
If \f(CW\*(C`GNU\*(C'\fR cc (gcc) is used, dis variable will enable (if set) the
\&\-ansi n' \-pedantic ccflags fo' buildin core filez (through
cflags script). (See \fIPorting/pumpkin.pod\fR fo' full description).
.ie n .IP """gccosandvers""" 4
.el .IP "\f(CWgccosandvers\fR" 4
.IX Item "gccosandvers"
From \fIgccvers.U\fR:
.Sp
If \f(CW\*(C`GNU\*(C'\fR cc (gcc) is used, dis variable holdz tha operatin system
and version used ta compile gcc.  It be set ta '' if not gcc,
or if not a god damn thang useful can be parsed as tha os version.
.ie n .IP """gccversion""" 4
.el .IP "\f(CWgccversion\fR" 4
.IX Item "gccversion"
From \fIgccvers.U\fR:
.Sp
If \f(CW\*(C`GNU\*(C'\fR cc (gcc) is used, dis variable holdz \f(CW1\fR or \f(CW2\fR to
indicate whether tha compila is version 1 or 2.  This is used in
settin a shitload of tha default cflags.  It be set ta '' if not gcc.
.ie n .IP """getgrent_r_proto""" 4
.el .IP "\f(CWgetgrent_r_proto\fR" 4
.IX Item "getgrent_r_proto"
From \fId_getgrent_r.U\fR:
.Sp
This variable encodes tha prototype of getgrent_r.
It be zero if d_getgrent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getgrent_r
is defined.
.ie n .IP """getgrgid_r_proto""" 4
.el .IP "\f(CWgetgrgid_r_proto\fR" 4
.IX Item "getgrgid_r_proto"
From \fId_getgrgid_r.U\fR:
.Sp
This variable encodes tha prototype of getgrgid_r.
It be zero if d_getgrgid_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getgrgid_r
is defined.
.ie n .IP """getgrnam_r_proto""" 4
.el .IP "\f(CWgetgrnam_r_proto\fR" 4
.IX Item "getgrnam_r_proto"
From \fId_getgrnam_r.U\fR:
.Sp
This variable encodes tha prototype of getgrnam_r.
It be zero if d_getgrnam_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getgrnam_r
is defined.
.ie n .IP """gethostbyaddr_r_proto""" 4
.el .IP "\f(CWgethostbyaddr_r_proto\fR" 4
.IX Item "gethostbyaddr_r_proto"
From \fId_gethostbyaddr_r.U\fR:
.Sp
This variable encodes tha prototype of gethostbyaddr_r.
It be zero if d_gethostbyaddr_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_gethostbyaddr_r
is defined.
.ie n .IP """gethostbyname_r_proto""" 4
.el .IP "\f(CWgethostbyname_r_proto\fR" 4
.IX Item "gethostbyname_r_proto"
From \fId_gethostbyname_r.U\fR:
.Sp
This variable encodes tha prototype of gethostbyname_r.
It be zero if d_gethostbyname_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_gethostbyname_r
is defined.
.ie n .IP """gethostent_r_proto""" 4
.el .IP "\f(CWgethostent_r_proto\fR" 4
.IX Item "gethostent_r_proto"
From \fId_gethostent_r.U\fR:
.Sp
This variable encodes tha prototype of gethostent_r.
It be zero if d_gethostent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_gethostent_r
is defined.
.ie n .IP """getlogin_r_proto""" 4
.el .IP "\f(CWgetlogin_r_proto\fR" 4
.IX Item "getlogin_r_proto"
From \fId_getlogin_r.U\fR:
.Sp
This variable encodes tha prototype of getlogin_r.
It be zero if d_getlogin_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getlogin_r
is defined.
.ie n .IP """getnetbyaddr_r_proto""" 4
.el .IP "\f(CWgetnetbyaddr_r_proto\fR" 4
.IX Item "getnetbyaddr_r_proto"
From \fId_getnetbyaddr_r.U\fR:
.Sp
This variable encodes tha prototype of getnetbyaddr_r.
It be zero if d_getnetbyaddr_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getnetbyaddr_r
is defined.
.ie n .IP """getnetbyname_r_proto""" 4
.el .IP "\f(CWgetnetbyname_r_proto\fR" 4
.IX Item "getnetbyname_r_proto"
From \fId_getnetbyname_r.U\fR:
.Sp
This variable encodes tha prototype of getnetbyname_r.
It be zero if d_getnetbyname_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getnetbyname_r
is defined.
.ie n .IP """getnetent_r_proto""" 4
.el .IP "\f(CWgetnetent_r_proto\fR" 4
.IX Item "getnetent_r_proto"
From \fId_getnetent_r.U\fR:
.Sp
This variable encodes tha prototype of getnetent_r.
It be zero if d_getnetent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getnetent_r
is defined.
.ie n .IP """getprotobyname_r_proto""" 4
.el .IP "\f(CWgetprotobyname_r_proto\fR" 4
.IX Item "getprotobyname_r_proto"
From \fId_getprotobyname_r.U\fR:
.Sp
This variable encodes tha prototype of getprotobyname_r.
It be zero if d_getprotobyname_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getprotobyname_r
is defined.
.ie n .IP """getprotobynumber_r_proto""" 4
.el .IP "\f(CWgetprotobynumber_r_proto\fR" 4
.IX Item "getprotobynumber_r_proto"
From \fId_getprotobynumber_r.U\fR:
.Sp
This variable encodes tha prototype of getprotobynumber_r.
It be zero if d_getprotobynumber_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getprotobynumber_r
is defined.
.ie n .IP """getprotoent_r_proto""" 4
.el .IP "\f(CWgetprotoent_r_proto\fR" 4
.IX Item "getprotoent_r_proto"
From \fId_getprotoent_r.U\fR:
.Sp
This variable encodes tha prototype of getprotoent_r.
It be zero if d_getprotoent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getprotoent_r
is defined.
.ie n .IP """getpwent_r_proto""" 4
.el .IP "\f(CWgetpwent_r_proto\fR" 4
.IX Item "getpwent_r_proto"
From \fId_getpwent_r.U\fR:
.Sp
This variable encodes tha prototype of getpwent_r.
It be zero if d_getpwent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getpwent_r
is defined.
.ie n .IP """getpwnam_r_proto""" 4
.el .IP "\f(CWgetpwnam_r_proto\fR" 4
.IX Item "getpwnam_r_proto"
From \fId_getpwnam_r.U\fR:
.Sp
This variable encodes tha prototype of getpwnam_r.
It be zero if d_getpwnam_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getpwnam_r
is defined.
.ie n .IP """getpwuid_r_proto""" 4
.el .IP "\f(CWgetpwuid_r_proto\fR" 4
.IX Item "getpwuid_r_proto"
From \fId_getpwuid_r.U\fR:
.Sp
This variable encodes tha prototype of getpwuid_r.
It be zero if d_getpwuid_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getpwuid_r
is defined.
.ie n .IP """getservbyname_r_proto""" 4
.el .IP "\f(CWgetservbyname_r_proto\fR" 4
.IX Item "getservbyname_r_proto"
From \fId_getservbyname_r.U\fR:
.Sp
This variable encodes tha prototype of getservbyname_r.
It be zero if d_getservbyname_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getservbyname_r
is defined.
.ie n .IP """getservbyport_r_proto""" 4
.el .IP "\f(CWgetservbyport_r_proto\fR" 4
.IX Item "getservbyport_r_proto"
From \fId_getservbyport_r.U\fR:
.Sp
This variable encodes tha prototype of getservbyport_r.
It be zero if d_getservbyport_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getservbyport_r
is defined.
.ie n .IP """getservent_r_proto""" 4
.el .IP "\f(CWgetservent_r_proto\fR" 4
.IX Item "getservent_r_proto"
From \fId_getservent_r.U\fR:
.Sp
This variable encodes tha prototype of getservent_r.
It be zero if d_getservent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getservent_r
is defined.
.ie n .IP """getspnam_r_proto""" 4
.el .IP "\f(CWgetspnam_r_proto\fR" 4
.IX Item "getspnam_r_proto"
From \fId_getspnam_r.U\fR:
.Sp
This variable encodes tha prototype of getspnam_r.
It be zero if d_getspnam_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_getspnam_r
is defined.
.ie n .IP """gidformat""" 4
.el .IP "\f(CWgidformat\fR" 4
.IX Item "gidformat"
From \fIgidf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printin a Gid_t.
.ie n .IP """gidsign""" 4
.el .IP "\f(CWgidsign\fR" 4
.IX Item "gidsign"
From \fIgidsign.U\fR:
.Sp
This variable gotz nuff tha signednizz of a gidtype.
1 fo' unsigned, \-1 fo' signed.
.ie n .IP """gidsize""" 4
.el .IP "\f(CWgidsize\fR" 4
.IX Item "gidsize"
From \fIgidsize.U\fR:
.Sp
This variable gotz nuff tha size of a gidtype up in bytes.
.ie n .IP """gidtype""" 4
.el .IP "\f(CWgidtype\fR" 4
.IX Item "gidtype"
From \fIgidtype.U\fR:
.Sp
This variable defines Gid_t ta be suttin' like gid_t, int,
ushort, or whatever type is used ta declare tha return type
of \fIgetgid()\fR.  Typically, it is tha type of crew idz up in tha kernel.
.ie n .IP """glibpth""" 4
.el .IP "\f(CWglibpth\fR" 4
.IX Item "glibpth"
From \fIlibpth.U\fR:
.Sp
This variable holdz tha general path (space-separated) used to
find libraries. Put ya muthafuckin choppers up if ya feel dis!  It may contain directories dat do not exist on
this platform, libpth is tha cleaned-up version.
.ie n .IP """gmake""" 4
.el .IP "\f(CWgmake\fR" 4
.IX Item "gmake"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha gmake program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`gmake\*(C'\fR n' aint useful.
.ie n .IP """gmtime_r_proto""" 4
.el .IP "\f(CWgmtime_r_proto\fR" 4
.IX Item "gmtime_r_proto"
From \fId_gmtime_r.U\fR:
.Sp
This variable encodes tha prototype of gmtime_r.
It be zero if d_gmtime_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_gmtime_r
is defined.
.ie n .IP """gnulibc_version""" 4
.el .IP "\f(CWgnulibc_version\fR" 4
.IX Item "gnulibc_version"
From \fId_gnulibc.U\fR:
.Sp
This variable gotz nuff tha version number of tha \f(CW\*(C`GNU\*(C'\fR C library.
It be probably suttin' like \fI2.2.5\fR.  It be a plain '' if this
is not tha \f(CW\*(C`GNU\*(C'\fR C library, or if tha version is unknown.
.ie n .IP """grep""" 4
.el .IP "\f(CWgrep\fR" 4
.IX Item "grep"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha grep program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`grep\*(C'\fR n' aint useful.
.ie n .IP """groupcat""" 4
.el .IP "\f(CWgroupcat\fR" 4
.IX Item "groupcat"
From \fInis.U\fR:
.Sp
This variable gotz nuff a cold-ass lil command dat produces tha text of the
\&\fI/etc/group\fR file.  This is normally "cat \fI/etc/group\fR\*(L" yo, but can be
\&\*(R"ypcat group" when \f(CW\*(C`NIS\*(C'\fR is used.
On some systems, like fuckin os390, there may be no equivalent
command, up in which case dis variable is unset.
.ie n .IP """groupstype""" 4
.el .IP "\f(CWgroupstype\fR" 4
.IX Item "groupstype"
From \fIgroupstype.U\fR:
.Sp
This variable defines Groups_t ta be suttin' like gid_t, int,
ushort, or whatever type is used fo' tha second argument to
\&\fIgetgroups()\fR n' \fIsetgroups()\fR.  Usually, dis is tha same ol' dirty as
gidtype (gid_t) yo, but sometimes it aint.
.ie n .IP """gzip""" 4
.el .IP "\f(CWgzip\fR" 4
.IX Item "gzip"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha gzip program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`gzip\*(C'\fR n' aint useful.
.SS "h"
.IX Subsection "h"
.ie n .IP """h_fcntl""" 4
.el .IP "\f(CWh_fcntl\fR" 4
.IX Item "h_fcntl"
From \fIh_fcntl.U\fR:
.Sp
This is variable gets set up in various places ta tell i_fcntl that
<fcntl.h> should be included.
.ie n .IP """h_sysfile""" 4
.el .IP "\f(CWh_sysfile\fR" 4
.IX Item "h_sysfile"
From \fIh_sysfile.U\fR:
.Sp
This is variable gets set up in various places ta tell i_sys_file that
<sys/file.h> should be included.
.ie n .IP """hint""" 4
.el .IP "\f(CWhint\fR" 4
.IX Item "hint"
From \fIOldconfig.U\fR:
.Sp
Gives tha type of hints used fo' previous lyrics. May be one of
\&\f(CW\*(C`default\*(C'\fR, \f(CW\*(C`recommended\*(C'\fR or \f(CW\*(C`previous\*(C'\fR.
.ie n .IP """hostcat""" 4
.el .IP "\f(CWhostcat\fR" 4
.IX Item "hostcat"
From \fInis.U\fR:
.Sp
This variable gotz nuff a cold-ass lil command dat produces tha text of the
\&\fI/etc/hosts\fR file.  This is normally "cat \fI/etc/hosts\fR\*(L" yo, but can be
\&\*(R"ypcat hosts" when \f(CW\*(C`NIS\*(C'\fR is used.
On some systems, like fuckin os390, there may be no equivalent
command, up in which case dis variable is unset.
.ie n .IP """html1dir""" 4
.el .IP "\f(CWhtml1dir\fR" 4
.IX Item "html1dir"
From \fIhtml1dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which html
source pages is ta be put.  This directory is fo' pages
that describe whole programs, not libraries or modules.  It
is intended ta correspond roughly ta section 1 of tha Unix
manuals.
.ie n .IP """html1direxp""" 4
.el .IP "\f(CWhtml1direxp\fR" 4
.IX Item "html1direxp"
From \fIhtml1dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha html1dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.ie n .IP """html3dir""" 4
.el .IP "\f(CWhtml3dir\fR" 4
.IX Item "html3dir"
From \fIhtml3dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which html
source pages is ta be put.  This directory is fo' pages
that describe libraries or modules.  It be intended to
correspond roughly ta section 3 of tha Unix manuals.
.ie n .IP """html3direxp""" 4
.el .IP "\f(CWhtml3direxp\fR" 4
.IX Item "html3direxp"
From \fIhtml3dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha html3dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.SS "i"
.IX Subsection "i"
.ie n .IP """i16size""" 4
.el .IP "\f(CWi16size\fR" 4
.IX Item "i16size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a I16 up in bytes.
.ie n .IP """i16type""" 4
.el .IP "\f(CWi16type\fR" 4
.IX Item "i16type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz I16.
.ie n .IP """i32size""" 4
.el .IP "\f(CWi32size\fR" 4
.IX Item "i32size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a I32 up in bytes.
.ie n .IP """i32type""" 4
.el .IP "\f(CWi32type\fR" 4
.IX Item "i32type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz I32.
.ie n .IP """i64size""" 4
.el .IP "\f(CWi64size\fR" 4
.IX Item "i64size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a I64 up in bytes.
.ie n .IP """i64type""" 4
.el .IP "\f(CWi64type\fR" 4
.IX Item "i64type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz I64.
.ie n .IP """i8size""" 4
.el .IP "\f(CWi8size\fR" 4
.IX Item "i8size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a I8 up in bytes.
.ie n .IP """i8type""" 4
.el .IP "\f(CWi8type\fR" 4
.IX Item "i8type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz I8.
.ie n .IP """i_arpainet""" 4
.el .IP "\f(CWi_arpainet\fR" 4
.IX Item "i_arpainet"
From \fIi_arpainet.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_ARPA_INET\*(C'\fR symbol,
and indicates whether a C program should include <arpa/inet.h>.
.ie n .IP """i_assert""" 4
.el .IP "\f(CWi_assert\fR" 4
.IX Item "i_assert"
From \fIi_assert.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_ASSERT\*(C'\fR symbol, which
indicates ta tha C program dat <assert.h> exists n' could be
included.
.ie n .IP """i_bsdioctl""" 4
.el .IP "\f(CWi_bsdioctl\fR" 4
.IX Item "i_bsdioctl"
From \fIi_sysioctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_BSDIOCTL\*(C'\fR symbol, which
indicates ta tha C program dat <sys/bsdioctl.h> exists n' should
be included.
.ie n .IP """i_crypt""" 4
.el .IP "\f(CWi_crypt\fR" 4
.IX Item "i_crypt"
From \fIi_crypt.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_CRYPT\*(C'\fR symbol, n' indicates
whether a C program should include <crypt.h>.
.ie n .IP """i_db""" 4
.el .IP "\f(CWi_db\fR" 4
.IX Item "i_db"
From \fIi_db.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_DB\*(C'\fR symbol, n' indicates
whether a C program may include Berkeleyz \f(CW\*(C`DB\*(C'\fR include file <db.h>.
.ie n .IP """i_dbm""" 4
.el .IP "\f(CWi_dbm\fR" 4
.IX Item "i_dbm"
From \fIi_dbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_DBM\*(C'\fR symbol, which
indicates ta tha C program dat <dbm.h> exists n' should
be included.
.ie n .IP """i_dirent""" 4
.el .IP "\f(CWi_dirent\fR" 4
.IX Item "i_dirent"
From \fIi_dirent.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_DIRENT\*(C'\fR, which indicates
to tha C program dat it should include <dirent.h>.
.ie n .IP """i_dld""" 4
.el .IP "\f(CWi_dld\fR" 4
.IX Item "i_dld"
From \fIi_dld.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_DLD\*(C'\fR symbol, which
indicates ta tha C program dat <dld.h> (\f(CW\*(C`GNU\*(C'\fR dynamic loading)
exists n' should be included.
.ie n .IP """i_dlfcn""" 4
.el .IP "\f(CWi_dlfcn\fR" 4
.IX Item "i_dlfcn"
From \fIi_dlfcn.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_DLFCN\*(C'\fR symbol, which
indicates ta tha C program dat <dlfcn.h> exists n' should
be included.
.ie n .IP """i_fcntl""" 4
.el .IP "\f(CWi_fcntl\fR" 4
.IX Item "i_fcntl"
From \fIi_fcntl.U\fR:
.Sp
This variable controls tha value of \f(CW\*(C`I_FCNTL\*(C'\fR (which tells
the C program ta include <fcntl.h>).
.ie n .IP """i_float""" 4
.el .IP "\f(CWi_float\fR" 4
.IX Item "i_float"
From \fIi_float.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_FLOAT\*(C'\fR symbol, n' indicates
whether a C program may include <float.h> ta git symbols like \f(CW\*(C`DBL_MAX\*(C'\fR
or \f(CW\*(C`DBL_MIN\*(C'\fR, \fIi.e\fR. machine dependent floatin point joints.
.ie n .IP """i_fp""" 4
.el .IP "\f(CWi_fp\fR" 4
.IX Item "i_fp"
From \fIi_fp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_FP\*(C'\fR symbol, n' indicates
whether a C program should include <fp.h>.
.ie n .IP """i_fp_class""" 4
.el .IP "\f(CWi_fp_class\fR" 4
.IX Item "i_fp_class"
From \fIi_fp_class.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_FP_CLASS\*(C'\fR symbol, n' indicates
whether a C program should include <fp_class.h>.
.ie n .IP """i_gdbm""" 4
.el .IP "\f(CWi_gdbm\fR" 4
.IX Item "i_gdbm"
From \fIi_gdbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_GDBM\*(C'\fR symbol, which
indicates ta tha C program dat <gdbm.h> exists n' should
be included.
.ie n .IP """i_gdbm_ndbm""" 4
.el .IP "\f(CWi_gdbm_ndbm\fR" 4
.IX Item "i_gdbm_ndbm"
From \fIi_ndbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_GDBM_NDBM\*(C'\fR symbol, which
indicates ta tha C program dat <gdbm\-\fIndbm.h\fR> exists n' should
be included. Y'all KNOW dat shit, muthafucka!  This is tha location of tha \fIndbm.h\fR compatibilitizzle file
in Debian 4.0.
.ie n .IP """i_gdbmndbm""" 4
.el .IP "\f(CWi_gdbmndbm\fR" 4
.IX Item "i_gdbmndbm"
From \fIi_ndbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_GDBMNDBM\*(C'\fR symbol, which
indicates ta tha C program dat <gdbm/ndbm.h> exists n' should
be included. Y'all KNOW dat shit, muthafucka!  This was tha location of tha \fIndbm.h\fR compatibilitizzle file
in RedHat 7.1.
.ie n .IP """i_grp""" 4
.el .IP "\f(CWi_grp\fR" 4
.IX Item "i_grp"
From \fIi_grp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_GRP\*(C'\fR symbol, n' indicates
whether a C program should include <grp.h>.
.ie n .IP """i_ieeefp""" 4
.el .IP "\f(CWi_ieeefp\fR" 4
.IX Item "i_ieeefp"
From \fIi_ieeefp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_IEEEFP\*(C'\fR symbol, n' indicates
whether a C program should include <ieeefp.h>.
.ie n .IP """i_inttypes""" 4
.el .IP "\f(CWi_inttypes\fR" 4
.IX Item "i_inttypes"
From \fIi_inttypes.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_INTTYPES\*(C'\fR symbol,
and indicates whether a C program should include <inttypes.h>.
.ie n .IP """i_langinfo""" 4
.el .IP "\f(CWi_langinfo\fR" 4
.IX Item "i_langinfo"
From \fIi_langinfo.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_LANGINFO\*(C'\fR symbol,
and indicates whether a C program should include <langinfo.h>.
.ie n .IP """i_libutil""" 4
.el .IP "\f(CWi_libutil\fR" 4
.IX Item "i_libutil"
From \fIi_libutil.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_LIBUTIL\*(C'\fR symbol, n' indicates
whether a C program should include <libutil.h>.
.ie n .IP """i_limits""" 4
.el .IP "\f(CWi_limits\fR" 4
.IX Item "i_limits"
From \fIi_limits.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_LIMITS\*(C'\fR symbol, n' indicates
whether a C program may include <limits.h> ta git symbols like \f(CW\*(C`WORD_BIT\*(C'\fR
and playas.
.ie n .IP """i_locale""" 4
.el .IP "\f(CWi_locale\fR" 4
.IX Item "i_locale"
From \fIi_locale.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_LOCALE\*(C'\fR symbol,
and indicates whether a C program should include <locale.h>.
.ie n .IP """i_machcthr""" 4
.el .IP "\f(CWi_machcthr\fR" 4
.IX Item "i_machcthr"
From \fIi_machcthr.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_MACH_CTHREADS\*(C'\fR symbol,
and indicates whether a C program should include <mach/cthreads.h>.
.ie n .IP """i_malloc""" 4
.el .IP "\f(CWi_malloc\fR" 4
.IX Item "i_malloc"
From \fIi_malloc.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_MALLOC\*(C'\fR symbol, n' indicates
whether a C program should include <malloc.h>.
.ie n .IP """i_mallocmalloc""" 4
.el .IP "\f(CWi_mallocmalloc\fR" 4
.IX Item "i_mallocmalloc"
From \fIi_mallocmalloc.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_MALLOCMALLOC\*(C'\fR symbol,
and indicates whether a C program should include <malloc/malloc.h>.
.ie n .IP """i_math""" 4
.el .IP "\f(CWi_math\fR" 4
.IX Item "i_math"
From \fIi_math.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_MATH\*(C'\fR symbol, n' indicates
whether a C program may include <math.h>.
.ie n .IP """i_memory""" 4
.el .IP "\f(CWi_memory\fR" 4
.IX Item "i_memory"
From \fIi_memory.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_MEMORY\*(C'\fR symbol, n' indicates
whether a C program should include <memory.h>.
.ie n .IP """i_mntent""" 4
.el .IP "\f(CWi_mntent\fR" 4
.IX Item "i_mntent"
From \fIi_mntent.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_MNTENT\*(C'\fR symbol, n' indicates
whether a C program should include <mntent.h>.
.ie n .IP """i_ndbm""" 4
.el .IP "\f(CWi_ndbm\fR" 4
.IX Item "i_ndbm"
From \fIi_ndbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_NDBM\*(C'\fR symbol, which
indicates ta tha C program dat <ndbm.h> exists n' should
be included.
.ie n .IP """i_netdb""" 4
.el .IP "\f(CWi_netdb\fR" 4
.IX Item "i_netdb"
From \fIi_netdb.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_NETDB\*(C'\fR symbol, n' indicates
whether a C program should include <netdb.h>.
.ie n .IP """i_neterrno""" 4
.el .IP "\f(CWi_neterrno\fR" 4
.IX Item "i_neterrno"
From \fIi_neterrno.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_NET_ERRNO\*(C'\fR symbol, which
indicates ta tha C program dat <net/errno.h> exists n' should
be included.
.ie n .IP """i_netinettcp""" 4
.el .IP "\f(CWi_netinettcp\fR" 4
.IX Item "i_netinettcp"
From \fIi_netinettcp.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_NETINET_TCP\*(C'\fR symbol,
and indicates whether a C program should include <netinet/tcp.h>.
.ie n .IP """i_niin""" 4
.el .IP "\f(CWi_niin\fR" 4
.IX Item "i_niin"
From \fIi_niin.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_NETINET_IN\*(C'\fR, which indicates
to tha C program dat it should include <netinet/in.h>. Otherwise,
you may try <sys/in.h>.
.ie n .IP """i_poll""" 4
.el .IP "\f(CWi_poll\fR" 4
.IX Item "i_poll"
From \fIi_poll.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_POLL\*(C'\fR symbol, n' indicates
whether a C program should include <poll.h>.
.ie n .IP """i_prot""" 4
.el .IP "\f(CWi_prot\fR" 4
.IX Item "i_prot"
From \fIi_prot.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_PROT\*(C'\fR symbol, n' indicates
whether a C program should include <prot.h>.
.ie n .IP """i_pthread""" 4
.el .IP "\f(CWi_pthread\fR" 4
.IX Item "i_pthread"
From \fIi_pthread.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_PTHREAD\*(C'\fR symbol,
and indicates whether a C program should include <pthread.h>.
.ie n .IP """i_pwd""" 4
.el .IP "\f(CWi_pwd\fR" 4
.IX Item "i_pwd"
From \fIi_pwd.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_PWD\*(C'\fR, which indicates
to tha C program dat it should include <pwd.h>.
.ie n .IP """i_rpcsvcdbm""" 4
.el .IP "\f(CWi_rpcsvcdbm\fR" 4
.IX Item "i_rpcsvcdbm"
From \fIi_dbm.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_RPCSVC_DBM\*(C'\fR symbol, which
indicates ta tha C program dat <rpcsvc/dbm.h> exists n' should
be included. Y'all KNOW dat shit, muthafucka!  Some System V systems might need dis instead of <dbm.h>.
.ie n .IP """i_sfio""" 4
.el .IP "\f(CWi_sfio\fR" 4
.IX Item "i_sfio"
From \fIi_sfio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SFIO\*(C'\fR symbol,
and indicates whether a C program should include <sfio.h>.
.ie n .IP """i_sgtty""" 4
.el .IP "\f(CWi_sgtty\fR" 4
.IX Item "i_sgtty"
From \fIi_termio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SGTTY\*(C'\fR symbol, which
indicates ta tha C program dat it should include <sgtty.h> rather
than <termio.h>.
.ie n .IP """i_shadow""" 4
.el .IP "\f(CWi_shadow\fR" 4
.IX Item "i_shadow"
From \fIi_shadow.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SHADOW\*(C'\fR symbol, n' indicates
whether a C program should include <shadow.h>.
.ie n .IP """i_socks""" 4
.el .IP "\f(CWi_socks\fR" 4
.IX Item "i_socks"
From \fIi_socks.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SOCKS\*(C'\fR symbol, n' indicates
whether a C program should include <socks.h>.
.ie n .IP """i_stdarg""" 4
.el .IP "\f(CWi_stdarg\fR" 4
.IX Item "i_stdarg"
From \fIi_varhdr.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_STDARG\*(C'\fR symbol, which
indicates ta tha C program dat <stdarg.h> exists n' should
be included.
.ie n .IP """i_stdbool""" 4
.el .IP "\f(CWi_stdbool\fR" 4
.IX Item "i_stdbool"
From \fIi_stdbool.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_STDBOOL\*(C'\fR symbol, which
indicates ta tha C program dat <stdbool.h> exists n' should
be included.
.ie n .IP """i_stddef""" 4
.el .IP "\f(CWi_stddef\fR" 4
.IX Item "i_stddef"
From \fIi_stddef.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_STDDEF\*(C'\fR symbol, which
indicates ta tha C program dat <stddef.h> exists n' should
be included.
.ie n .IP """i_stdlib""" 4
.el .IP "\f(CWi_stdlib\fR" 4
.IX Item "i_stdlib"
From \fIi_stdlib.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_STDLIB\*(C'\fR symbol, which
indicates ta tha C program dat <stdlib.h> exists n' should
be included.
.ie n .IP """i_string""" 4
.el .IP "\f(CWi_string\fR" 4
.IX Item "i_string"
From \fIi_string.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_STRING\*(C'\fR symbol, which
indicates dat <string.h> should be included rather than <strings.h>.
.ie n .IP """i_sunmath""" 4
.el .IP "\f(CWi_sunmath\fR" 4
.IX Item "i_sunmath"
From \fIi_sunmath.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SUNMATH\*(C'\fR symbol, n' indicates
whether a C program should include <sunmath.h>.
.ie n .IP """i_sysaccess""" 4
.el .IP "\f(CWi_sysaccess\fR" 4
.IX Item "i_sysaccess"
From \fIi_sysaccess.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_ACCESS\*(C'\fR symbol,
and indicates whether a C program should include <sys/access.h>.
.ie n .IP """i_sysdir""" 4
.el .IP "\f(CWi_sysdir\fR" 4
.IX Item "i_sysdir"
From \fIi_sysdir.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_DIR\*(C'\fR symbol, n' indicates
whether a C program should include <sys/dir.h>.
.ie n .IP """i_sysfile""" 4
.el .IP "\f(CWi_sysfile\fR" 4
.IX Item "i_sysfile"
From \fIi_sysfile.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_FILE\*(C'\fR symbol, n' indicates
whether a C program should include <sys/file.h> ta git \f(CW\*(C`R_OK\*(C'\fR n' playas.
.ie n .IP """i_sysfilio""" 4
.el .IP "\f(CWi_sysfilio\fR" 4
.IX Item "i_sysfilio"
From \fIi_sysioctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_FILIO\*(C'\fR symbol, which
indicates ta tha C program dat <sys/filio.h> exists n' should
be included up in preference ta <sys/ioctl.h>.
.ie n .IP """i_sysin""" 4
.el .IP "\f(CWi_sysin\fR" 4
.IX Item "i_sysin"
From \fIi_niin.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_SYS_IN\*(C'\fR, which indicates
to tha C program dat it should include <sys/in.h> instead of
<netinet/in.h>.
.ie n .IP """i_sysioctl""" 4
.el .IP "\f(CWi_sysioctl\fR" 4
.IX Item "i_sysioctl"
From \fIi_sysioctl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_IOCTL\*(C'\fR symbol, which
indicates ta tha C program dat <sys/ioctl.h> exists n' should
be included.
.ie n .IP """i_syslog""" 4
.el .IP "\f(CWi_syslog\fR" 4
.IX Item "i_syslog"
From \fIi_syslog.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSLOG\*(C'\fR symbol,
and indicates whether a C program should include <syslog.h>.
.ie n .IP """i_sysmman""" 4
.el .IP "\f(CWi_sysmman\fR" 4
.IX Item "i_sysmman"
From \fIi_sysmman.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_MMAN\*(C'\fR symbol, and
indicates whether a C program should include <sys/mman.h>.
.ie n .IP """i_sysmode""" 4
.el .IP "\f(CWi_sysmode\fR" 4
.IX Item "i_sysmode"
From \fIi_sysmode.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSMODE\*(C'\fR symbol,
and indicates whether a C program should include <sys/mode.h>.
.ie n .IP """i_sysmount""" 4
.el .IP "\f(CWi_sysmount\fR" 4
.IX Item "i_sysmount"
From \fIi_sysmount.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSMOUNT\*(C'\fR symbol,
and indicates whether a C program should include <sys/mount.h>.
.ie n .IP """i_sysndir""" 4
.el .IP "\f(CWi_sysndir\fR" 4
.IX Item "i_sysndir"
From \fIi_sysndir.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_NDIR\*(C'\fR symbol, n' indicates
whether a C program should include <sys/ndir.h>.
.ie n .IP """i_sysparam""" 4
.el .IP "\f(CWi_sysparam\fR" 4
.IX Item "i_sysparam"
From \fIi_sysparam.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_PARAM\*(C'\fR symbol, n' indicates
whether a C program should include <sys/param.h>.
.ie n .IP """i_syspoll""" 4
.el .IP "\f(CWi_syspoll\fR" 4
.IX Item "i_syspoll"
From \fIi_syspoll.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_POLL\*(C'\fR symbol, which
indicates ta tha C program dat it should include <sys/poll.h>.
.ie n .IP """i_sysresrc""" 4
.el .IP "\f(CWi_sysresrc\fR" 4
.IX Item "i_sysresrc"
From \fIi_sysresrc.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_RESOURCE\*(C'\fR symbol,
and indicates whether a C program should include <sys/resource.h>.
.ie n .IP """i_syssecrt""" 4
.el .IP "\f(CWi_syssecrt\fR" 4
.IX Item "i_syssecrt"
From \fIi_syssecrt.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_SECURITY\*(C'\fR symbol,
and indicates whether a C program should include <sys/security.h>.
.ie n .IP """i_sysselct""" 4
.el .IP "\f(CWi_sysselct\fR" 4
.IX Item "i_sysselct"
From \fIi_sysselct.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_SYS_SELECT\*(C'\fR, which indicates
to tha C program dat it should include <sys/select.h> up in order to
get tha definizzle of struct timeval.
.ie n .IP """i_syssockio""" 4
.el .IP "\f(CWi_syssockio\fR" 4
.IX Item "i_syssockio"
From \fIi_sysioctl.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_SYS_SOCKIO\*(C'\fR ta indicate ta the
C program dat socket ioctl codes may be found up in <sys/sockio.h>
instead of <sys/ioctl.h>.
.ie n .IP """i_sysstat""" 4
.el .IP "\f(CWi_sysstat\fR" 4
.IX Item "i_sysstat"
From \fIi_sysstat.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_STAT\*(C'\fR symbol,
and indicates whether a C program should include <sys/stat.h>.
.ie n .IP """i_sysstatfs""" 4
.el .IP "\f(CWi_sysstatfs\fR" 4
.IX Item "i_sysstatfs"
From \fIi_sysstatfs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSSTATFS\*(C'\fR symbol,
and indicates whether a C program should include <sys/statfs.h>.
.ie n .IP """i_sysstatvfs""" 4
.el .IP "\f(CWi_sysstatvfs\fR" 4
.IX Item "i_sysstatvfs"
From \fIi_sysstatvfs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSSTATVFS\*(C'\fR symbol,
and indicates whether a C program should include <sys/statvfs.h>.
.ie n .IP """i_systime""" 4
.el .IP "\f(CWi_systime\fR" 4
.IX Item "i_systime"
From \fIi_time.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_SYS_TIME\*(C'\fR, which indicates
to tha C program dat it should include <sys/time.h>.
.ie n .IP """i_systimek""" 4
.el .IP "\f(CWi_systimek\fR" 4
.IX Item "i_systimek"
From \fIi_time.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_SYS_TIME_KERNEL\*(C'\fR, which
indicates ta tha C program dat it should include <sys/time.h>
with \f(CW\*(C`KERNEL\*(C'\fR defined.
.ie n .IP """i_systimes""" 4
.el .IP "\f(CWi_systimes\fR" 4
.IX Item "i_systimes"
From \fIi_systimes.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_TIMES\*(C'\fR symbol, n' indicates
whether a C program should include <sys/times.h>.
.ie n .IP """i_systypes""" 4
.el .IP "\f(CWi_systypes\fR" 4
.IX Item "i_systypes"
From \fIi_systypes.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYS_TYPES\*(C'\fR symbol,
and indicates whether a C program should include <sys/types.h>.
.ie n .IP """i_sysuio""" 4
.el .IP "\f(CWi_sysuio\fR" 4
.IX Item "i_sysuio"
From \fIi_sysuio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSUIO\*(C'\fR symbol, n' indicates
whether a C program should include <sys/uio.h>.
.ie n .IP """i_sysun""" 4
.el .IP "\f(CWi_sysun\fR" 4
.IX Item "i_sysun"
From \fIi_sysun.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_SYS_UN\*(C'\fR, which indicates
to tha C program dat it should include <sys/un.h> ta git \f(CW\*(C`UNIX\*(C'\fR
domain socket definitions.
.ie n .IP """i_sysutsname""" 4
.el .IP "\f(CWi_sysutsname\fR" 4
.IX Item "i_sysutsname"
From \fIi_sysutsname.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSUTSNAME\*(C'\fR symbol,
and indicates whether a C program should include <sys/utsname.h>.
.ie n .IP """i_sysvfs""" 4
.el .IP "\f(CWi_sysvfs\fR" 4
.IX Item "i_sysvfs"
From \fIi_sysvfs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_SYSVFS\*(C'\fR symbol,
and indicates whether a C program should include <sys/vfs.h>.
.ie n .IP """i_syswait""" 4
.el .IP "\f(CWi_syswait\fR" 4
.IX Item "i_syswait"
From \fIi_syswait.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_SYS_WAIT\*(C'\fR, which indicates
to tha C program dat it should include <sys/wait.h>.
.ie n .IP """i_termio""" 4
.el .IP "\f(CWi_termio\fR" 4
.IX Item "i_termio"
From \fIi_termio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_TERMIO\*(C'\fR symbol, which
indicates ta tha C program dat it should include <termio.h> rather
than <sgtty.h>.
.ie n .IP """i_termios""" 4
.el .IP "\f(CWi_termios\fR" 4
.IX Item "i_termios"
From \fIi_termio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_TERMIOS\*(C'\fR symbol, which
indicates ta tha C program dat tha \f(CW\*(C`POSIX\*(C'\fR <termios.h> file is
to be included.
.ie n .IP """i_time""" 4
.el .IP "\f(CWi_time\fR" 4
.IX Item "i_time"
From \fIi_time.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_TIME\*(C'\fR, which indicates
to tha C program dat it should include <time.h>.
.ie n .IP """i_unistd""" 4
.el .IP "\f(CWi_unistd\fR" 4
.IX Item "i_unistd"
From \fIi_unistd.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_UNISTD\*(C'\fR symbol, n' indicates
whether a C program should include <unistd.h>.
.ie n .IP """i_ustat""" 4
.el .IP "\f(CWi_ustat\fR" 4
.IX Item "i_ustat"
From \fIi_ustat.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_USTAT\*(C'\fR symbol, n' indicates
whether a C program should include <ustat.h>.
.ie n .IP """i_utime""" 4
.el .IP "\f(CWi_utime\fR" 4
.IX Item "i_utime"
From \fIi_utime.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_UTIME\*(C'\fR symbol, n' indicates
whether a C program should include <utime.h>.
.ie n .IP """i_values""" 4
.el .IP "\f(CWi_values\fR" 4
.IX Item "i_values"
From \fIi_values.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_VALUES\*(C'\fR symbol, n' indicates
whether a C program may include <values.h> ta git symbols like \f(CW\*(C`MAXLONG\*(C'\fR
and playas.
.ie n .IP """i_varargs""" 4
.el .IP "\f(CWi_varargs\fR" 4
.IX Item "i_varargs"
From \fIi_varhdr.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`I_VARARGS\*(C'\fR, which indicates
to tha C program dat it should include <varargs.h>.
.ie n .IP """i_varhdr""" 4
.el .IP "\f(CWi_varhdr\fR" 4
.IX Item "i_varhdr"
From \fIi_varhdr.U\fR:
.Sp
Gotz Nuff tha name of tha header ta be included ta git va_dcl definition.
Typically one of \fIvarargs.h\fR or \fIstdarg.h\fR.
.ie n .IP """i_vfork""" 4
.el .IP "\f(CWi_vfork\fR" 4
.IX Item "i_vfork"
From \fIi_vfork.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`I_VFORK\*(C'\fR symbol, n' indicates
whether a C program should include \fIvfork.h\fR.
.ie n .IP """ignore_versioned_solibs""" 4
.el .IP "\f(CWignore_versioned_solibs\fR" 4
.IX Item "ignore_versioned_solibs"
From \fIlibs.U\fR:
.Sp
This variable should be non-empty if non-versioned shared
libraries (\fIlibfoo.so.x.y\fR) is ta be ignored (because they
cannot be linked against).
.ie n .IP """inc_version_list""" 4
.el .IP "\f(CWinc_version_list\fR" 4
.IX Item "inc_version_list"
From \fIinc_version_list.U\fR:
.Sp
This variable specifies tha list of subdirectories up in over
which \fIperl.c\fR:\fIincpush()\fR n' \fIlib/lib.pm\fR will automatically
search when addin directories ta @\f(CW\*(C`INC\*(C'\fR.  Da elements in
the list is separated by spaces.  This is only useful
if you gotz a perl library directory tree structured like the
default one.  See \f(CW\*(C`INSTALL\*(C'\fR fo' how tha fuck dis works.  Da versioned
site_perl directory was introduced up in 5.005, so dat is the
lowest possible value.
.Sp
This list includes architecture-dependent directories back to
version \f(CW$api_versionstring\fR (e.g. 5.5.640) and
architecture-independent directories all tha way back to
5.005.
.ie n .IP """inc_version_list_init""" 4
.el .IP "\f(CWinc_version_list_init\fR" 4
.IX Item "inc_version_list_init"
From \fIinc_version_list.U\fR:
.Sp
This variable holdz tha same ol' dirty list as inc_version_list yo, but
each item is enclosed up in double quotes n' separated by commas,
suitable fo' use up in tha \f(CW\*(C`PERL_INC_VERSION_LIST\*(C'\fR initialization.
.ie n .IP """incpath""" 4
.el .IP "\f(CWincpath\fR" 4
.IX Item "incpath"
From \fIusrinc.U\fR:
.Sp
This variable must precede tha aiiight include path ta git the
right one, as up in \fI$\fIincpath/usr/include\fI\fR or \fI$\fIincpath/usr/lib\fI\fR.
Value can be "" or \fI/bsd43\fR on mips.
.ie n .IP """inews""" 4
.el .IP "\f(CWinews\fR" 4
.IX Item "inews"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """initialinstalllocation""" 4
.el .IP "\f(CWinitialinstalllocation\fR" 4
.IX Item "initialinstalllocation"
From \fIbin.U\fR:
.Sp
When userelocatableinc is true, dis variable holdz tha location
that make install should copy tha perl binary to, wit all the
run-time relocatable paths calculated from dis at install time.
When used, it is initialized ta tha original gangsta value of binexp, and
then binexp is set ta \fI.../\fR, as tha other binaries is found
relatizzle ta tha perl binary.
.ie n .IP """installarchlib""" 4
.el .IP "\f(CWinstallarchlib\fR" 4
.IX Item "installarchlib"
From \fIarchlib.U\fR:
.Sp
This variable is straight-up tha same as archlibexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installbin""" 4
.el .IP "\f(CWinstallbin\fR" 4
.IX Item "installbin"
From \fIbin.U\fR:
.Sp
This variable is tha same ol' dirty as binexp unless \f(CW\*(C`AFS\*(C'\fR is hustlin up in which case
the user is explicitly prompted fo' dat shit. This variable should always
be used up in yo' makefilez fo' maximum portability.
.ie n .IP """installhtml1dir""" 4
.el .IP "\f(CWinstallhtml1dir\fR" 4
.IX Item "installhtml1dir"
From \fIhtml1dir.U\fR:
.Sp
This variable is straight-up tha same as html1direxp, unless yo ass is
usin a gangbangin' finger-lickin' different installprefix.  For extra portability, you
should only use dis variable within yo' makefiles.
.ie n .IP """installhtml3dir""" 4
.el .IP "\f(CWinstallhtml3dir\fR" 4
.IX Item "installhtml3dir"
From \fIhtml3dir.U\fR:
.Sp
This variable is straight-up tha same as html3direxp, unless yo ass is
usin a gangbangin' finger-lickin' different installprefix.  For extra portability, you
should only use dis variable within yo' makefiles.
.ie n .IP """installman1dir""" 4
.el .IP "\f(CWinstallman1dir\fR" 4
.IX Item "installman1dir"
From \fIman1dir.U\fR:
.Sp
This variable is straight-up tha same as man1direxp, unless yo ass is using
\&\f(CW\*(C`AFS\*(C'\fR up in which case it points ta tha read/write location whereas
man1direxp only points ta tha read-only access location. I aint talkin' bout chicken n' gravy biatch. For extra
portability, you should only use dis variable within yo' makefiles.
.ie n .IP """installman3dir""" 4
.el .IP "\f(CWinstallman3dir\fR" 4
.IX Item "installman3dir"
From \fIman3dir.U\fR:
.Sp
This variable is straight-up tha same as man3direxp, unless yo ass is using
\&\f(CW\*(C`AFS\*(C'\fR up in which case it points ta tha read/write location whereas
man3direxp only points ta tha read-only access location. I aint talkin' bout chicken n' gravy biatch. For extra
portability, you should only use dis variable within yo' makefiles.
.ie n .IP """installprefix""" 4
.el .IP "\f(CWinstallprefix\fR" 4
.IX Item "installprefix"
From \fIinstallprefix.U\fR:
.Sp
This variable holdz tha name of tha directory below which
\&\*(L"make install\*(R" will install tha package.  For most users, this
is tha same ol' dirty as prefix.  But fuck dat shiznit yo, tha word on tha street is dat it is useful for
installin tha software tha fuck into a gangbangin' finger-lickin' different (usually temporary)
location afta which it can be bundled up n' moved somehow
to tha final location specified by prefix.
.ie n .IP """installprefixexp""" 4
.el .IP "\f(CWinstallprefixexp\fR" 4
.IX Item "installprefixexp"
From \fIinstallprefix.U\fR:
.Sp
This variable holdz tha full absolute path of installprefix
with all \fI~\fR\-expansion done.
.ie n .IP """installprivlib""" 4
.el .IP "\f(CWinstallprivlib\fR" 4
.IX Item "installprivlib"
From \fIprivlib.U\fR:
.Sp
This variable is straight-up tha same as privlibexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installscript""" 4
.el .IP "\f(CWinstallscript\fR" 4
.IX Item "installscript"
From \fIscriptdir.U\fR:
.Sp
This variable is probably tha same as scriptdirexp, unless yo ass is on
a system hustlin \f(CW\*(C`AFS\*(C'\fR, up in which case they may differ slightly. You
should always use dis variable within yo' makefilez fo' portability.
.ie n .IP """installsitearch""" 4
.el .IP "\f(CWinstallsitearch\fR" 4
.IX Item "installsitearch"
From \fIsitearch.U\fR:
.Sp
This variable is straight-up tha same as cribarchexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installsitebin""" 4
.el .IP "\f(CWinstallsitebin\fR" 4
.IX Item "installsitebin"
From \fIsitebin.U\fR:
.Sp
This variable is probably tha same as cribbinexp, unless yo ass is on
a system hustlin \f(CW\*(C`AFS\*(C'\fR, up in which case they may differ slightly. You
should always use dis variable within yo' makefilez fo' portability.
.ie n .IP """installsitehtml1dir""" 4
.el .IP "\f(CWinstallsitehtml1dir\fR" 4
.IX Item "installsitehtml1dir"
From \fIsitehtml1dir.U\fR:
.Sp
This variable is straight-up tha same as cribhtml1direxp, unless yo ass is using
\&\f(CW\*(C`AFS\*(C'\fR up in which case it points ta tha read/write location whereas
html1direxp only points ta tha read-only access location. I aint talkin' bout chicken n' gravy biatch. For extra
portability, you should only use dis variable within yo' makefiles.
.ie n .IP """installsitehtml3dir""" 4
.el .IP "\f(CWinstallsitehtml3dir\fR" 4
.IX Item "installsitehtml3dir"
From \fIsitehtml3dir.U\fR:
.Sp
This variable is straight-up tha same as cribhtml3direxp, unless yo ass is using
\&\f(CW\*(C`AFS\*(C'\fR up in which case it points ta tha read/write location whereas
html3direxp only points ta tha read-only access location. I aint talkin' bout chicken n' gravy biatch. For extra
portability, you should only use dis variable within yo' makefiles.
.ie n .IP """installsitelib""" 4
.el .IP "\f(CWinstallsitelib\fR" 4
.IX Item "installsitelib"
From \fIsitelib.U\fR:
.Sp
This variable is straight-up tha same as criblibexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installsiteman1dir""" 4
.el .IP "\f(CWinstallsiteman1dir\fR" 4
.IX Item "installsiteman1dir"
From \fIsiteman1dir.U\fR:
.Sp
This variable is straight-up tha same as cribman1direxp, unless yo ass is using
\&\f(CW\*(C`AFS\*(C'\fR up in which case it points ta tha read/write location whereas
man1direxp only points ta tha read-only access location. I aint talkin' bout chicken n' gravy biatch. For extra
portability, you should only use dis variable within yo' makefiles.
.ie n .IP """installsiteman3dir""" 4
.el .IP "\f(CWinstallsiteman3dir\fR" 4
.IX Item "installsiteman3dir"
From \fIsiteman3dir.U\fR:
.Sp
This variable is straight-up tha same as cribman3direxp, unless yo ass is using
\&\f(CW\*(C`AFS\*(C'\fR up in which case it points ta tha read/write location whereas
man3direxp only points ta tha read-only access location. I aint talkin' bout chicken n' gravy biatch. For extra
portability, you should only use dis variable within yo' makefiles.
.ie n .IP """installsitescript""" 4
.el .IP "\f(CWinstallsitescript\fR" 4
.IX Item "installsitescript"
From \fIsitescript.U\fR:
.Sp
This variable is probably tha same as cribscriptexp, unless yo ass is on
a system hustlin \f(CW\*(C`AFS\*(C'\fR, up in which case they may differ slightly. You
should always use dis variable within yo' makefilez fo' portability.
.ie n .IP """installstyle""" 4
.el .IP "\f(CWinstallstyle\fR" 4
.IX Item "installstyle"
From \fIinstallstyle.U\fR:
.Sp
This variable raps bout tha \f(CW\*(C`style\*(C'\fR of tha perl installation.
This is intended ta be useful fo' tools dat need to
manipulate entire perl distributions.  Perl itself don't use
this ta find its libraries \*(-- tha library directories are
stored directly up in \fIConfig.pm\fR.  Currently, there be only two
styles:  \f(CW\*(C`lib\*(C'\fR n' \fIlib/perl5\fR.  Da default library locations
(e.g. privlib, criblib) is either \fI\f(CI$prefix\fI/lib\fR or
\&\fI\f(CI$prefix\fI/lib/perl5\fR.  Da forma is useful if \f(CW$prefix\fR be a
directory all bout perl (e.g. \fI/opt/perl\fR), while tha latter
is useful if \f(CW$prefix\fR is shared by nuff packages, e.g. if
\&\f(CW$prefix\fR=\fI/usr/local\fR.
.Sp
Unfortunately, while dis \f(CW\*(C`style\*(C'\fR variable is used ta set
defaults fo' all three directory hierarchies (core, vendor, and
site), there is no guarantee dat tha same steez be actually
appropriate fo' all dem directories. Put ya muthafuckin choppers up if ya feel dis!  For example, \f(CW$prefix\fR
might be \fI/opt/perl\fR yo, but \f(CW$siteprefix\fR might be \fI/usr/local\fR.
(Perhaps, up in retrospect, tha \f(CW\*(C`lib\*(C'\fR steez should never have been
supported yo, but it did seem like a sick scam all up in tha time.)
.Sp
Da thang is even less clear fo' tools like fuckin MakeMaker
that can be used ta install additionizzle modulez into
non-standard places.  For example, if a user intendz ta install
a module tha fuck into a private directory (like by settin \f(CW\*(C`PREFIX\*(C'\fR on
the \fIMakefile.PL\fR command line), then there is no reason to
assume dat tha Configure-time \f(CW$installstyle\fR settin will be
relevant fo' dat \f(CW\*(C`PREFIX\*(C'\fR.
.Sp
This may lata be extended ta include other shiznit, so
be careful wit pattern-matchin on tha thangs up in dis biatch.
.Sp
For compatibilitizzle wit \fIperl5.005\fR n' earlier, tha default
settin is based on whether or not \f(CW$prefix\fR gotz nuff tha string
\&\f(CW\*(C`perl\*(C'\fR.
.ie n .IP """installusrbinperl""" 4
.el .IP "\f(CWinstallusrbinperl\fR" 4
.IX Item "installusrbinperl"
From \fIinstubperl.U\fR:
.Sp
This variable  drops some lyrics ta whether Perl should be installed also as
\&\fI/usr/bin/perl\fR up in addizzle to
\&\fI\f(CI$installbin\fI/perl\fR
.ie n .IP """installvendorarch""" 4
.el .IP "\f(CWinstallvendorarch\fR" 4
.IX Item "installvendorarch"
From \fIvendorarch.U\fR:
.Sp
This variable is straight-up tha same as vendorarchexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installvendorbin""" 4
.el .IP "\f(CWinstallvendorbin\fR" 4
.IX Item "installvendorbin"
From \fIvendorbin.U\fR:
.Sp
This variable is straight-up tha same as vendorbinexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installvendorhtml1dir""" 4
.el .IP "\f(CWinstallvendorhtml1dir\fR" 4
.IX Item "installvendorhtml1dir"
From \fIvendorhtml1dir.U\fR:
.Sp
This variable is straight-up tha same as vendorhtml1direxp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installvendorhtml3dir""" 4
.el .IP "\f(CWinstallvendorhtml3dir\fR" 4
.IX Item "installvendorhtml3dir"
From \fIvendorhtml3dir.U\fR:
.Sp
This variable is straight-up tha same as vendorhtml3direxp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installvendorlib""" 4
.el .IP "\f(CWinstallvendorlib\fR" 4
.IX Item "installvendorlib"
From \fIvendorlib.U\fR:
.Sp
This variable is straight-up tha same as vendorlibexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installvendorman1dir""" 4
.el .IP "\f(CWinstallvendorman1dir\fR" 4
.IX Item "installvendorman1dir"
From \fIvendorman1dir.U\fR:
.Sp
This variable is straight-up tha same as vendorman1direxp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installvendorman3dir""" 4
.el .IP "\f(CWinstallvendorman3dir\fR" 4
.IX Item "installvendorman3dir"
From \fIvendorman3dir.U\fR:
.Sp
This variable is straight-up tha same as vendorman3direxp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """installvendorscript""" 4
.el .IP "\f(CWinstallvendorscript\fR" 4
.IX Item "installvendorscript"
From \fIvendorscript.U\fR:
.Sp
This variable is straight-up tha same as vendorscriptexp but may differ on
those systems rockin \f(CW\*(C`AFS\*(C'\fR. For extra portability, only dis variable
should be used up in makefiles.
.ie n .IP """intsize""" 4
.el .IP "\f(CWintsize\fR" 4
.IX Item "intsize"
From \fIintsize.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`INTSIZE\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bytes there be up in a int.
.ie n .IP """issymlink""" 4
.el .IP "\f(CWissymlink\fR" 4
.IX Item "issymlink"
From \fIissymlink.U\fR:
.Sp
This variable holdz tha test command ta test fo' a symbolic link
(if they is supported).  Typical joints include \f(CW\*(C`test \-h\*(C'\fR and
\&\f(CW\*(C`test \-L\*(C'\fR.
.ie n .IP """ivdformat""" 4
.el .IP "\f(CWivdformat\fR" 4
.IX Item "ivdformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`IV\*(C'\fR as a signed decimal integer.
.ie n .IP """ivsize""" 4
.el .IP "\f(CWivsize\fR" 4
.IX Item "ivsize"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a \f(CW\*(C`IV\*(C'\fR up in bytes.
.ie n .IP """ivtype""" 4
.el .IP "\f(CWivtype\fR" 4
.IX Item "ivtype"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz \f(CW\*(C`IV\*(C'\fR.
.SS "k"
.IX Subsection "k"
.ie n .IP """known_extensions""" 4
.el .IP "\f(CWknown_extensions\fR" 4
.IX Item "known_extensions"
From \fIExtensions.U\fR:
.Sp
This variable holdz a list of all \f(CW\*(C`XS\*(C'\fR extensions included in
the package.
.ie n .IP """ksh""" 4
.el .IP "\f(CWksh\fR" 4
.IX Item "ksh"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.SS "l"
.IX Subsection "l"
.ie n .IP """ld""" 4
.el .IP "\f(CWld\fR" 4
.IX Item "ld"
From \fIdlsrc.U\fR:
.Sp
This variable indicates tha program ta be used ta link
libraries fo' dynamic loading.  On some systems, it is \f(CW\*(C`ld\*(C'\fR.
On \f(CW\*(C`ELF\*(C'\fR systems, it should be \f(CW$cc\fR.  Mostly, we'll try ta respect
the hint file setting.
.ie n .IP """ld_can_script""" 4
.el .IP "\f(CWld_can_script\fR" 4
.IX Item "ld_can_script"
From \fIdlsrc.U\fR:
.Sp
This variable shows if tha loader accepts scripts up in tha form of
\&\-Wl,\-\-version\-script=\fIld.script\fR. This is currently only supported
for \f(CW\*(C`GNU\*(C'\fR ld on \f(CW\*(C`ELF\*(C'\fR up in dynamic loadin builds.
.ie n .IP """lddlflags""" 4
.el .IP "\f(CWlddlflags\fR" 4
.IX Item "lddlflags"
From \fIdlsrc.U\fR:
.Sp
This variable gotz nuff any special flags dat might need ta be
passed ta \f(CW$ld\fR ta create a gangbangin' finger-lickin' dirty-ass shared library suitable fo' dynamic
loading.  It be up ta tha makefile ta use dat shit.  For hpux, it
should be \f(CW\*(C`\-b\*(C'\fR.  For sunos 4.1, it is empty.
.ie n .IP """ldflags""" 4
.el .IP "\f(CWldflags\fR" 4
.IX Item "ldflags"
From \fIccflags.U\fR:
.Sp
This variable gotz nuff any additionizzle C loader flags desired by
the user n' shit.  It be up ta tha Makefile ta use all dis bullshit.
.ie n .IP """ldflags_uselargefiles""" 4
.el .IP "\f(CWldflags_uselargefiles\fR" 4
.IX Item "ldflags_uselargefiles"
From \fIuselfs.U\fR:
.Sp
This variable gotz nuff tha loader flags needed by big-ass file builds
and added ta ldflags by hints files.
.ie n .IP """ldlibpthname""" 4
.el .IP "\f(CWldlibpthname\fR" 4
.IX Item "ldlibpthname"
From \fIlibperl.U\fR:
.Sp
This variable holdz tha name of tha shared library
search path, often \f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR.  To git a empty
string, tha hints file must set dis ta \f(CW\*(C`none\*(C'\fR.
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha less program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`less\*(C'\fR n' aint useful.
.ie n .IP """lib_ext""" 4
.el .IP "\f(CWlib_ext\fR" 4
.IX Item "lib_ext"
From \fIUnix.U\fR:
.Sp
This be a oldschool synonym fo' _a.
.ie n .IP """libc""" 4
.el .IP "\f(CWlibc\fR" 4
.IX Item "libc"
From \fIlibc.U\fR:
.Sp
This variable gotz nuff tha location of tha C library.
.ie n .IP """libperl""" 4
.el .IP "\f(CWlibperl\fR" 4
.IX Item "libperl"
From \fIlibperl.U\fR:
.Sp
Da perl executable is obtained by linkin \fIperlmain.c\fR with
libperl, any static extensions (usually just DynaLoader),
and any other libraries needed on dis system.  libperl
is probably \fIlibperl.a\fR yo, but can also be \fIlibperl.so.xxx\fR if
the user wishes ta build a perl executable wit a gangbangin' finger-lickin' dirty-ass shared
library.
.ie n .IP """libpth""" 4
.el .IP "\f(CWlibpth\fR" 4
.IX Item "libpth"
From \fIlibpth.U\fR:
.Sp
This variable holdz tha general path (space-separated) used ta find
libraries. Put ya muthafuckin choppers up if ya feel dis! Well shiiiit, it is intended ta be used by other units.
.ie n .IP """libs""" 4
.el .IP "\f(CWlibs\fR" 4
.IX Item "libs"
From \fIlibs.U\fR:
.Sp
This variable holdz tha additionizzle libraries we wanna use.
It be up ta tha Makefile ta deal wit dat shit.  Da list can be empty.
.ie n .IP """libsdirs""" 4
.el .IP "\f(CWlibsdirs\fR" 4
.IX Item "libsdirs"
From \fIlibs.U\fR:
.Sp
This variable holdz tha directory names aka dirnamez of tha libraries
we found n' accepted, duplicates is removed.
.ie n .IP """libsfiles""" 4
.el .IP "\f(CWlibsfiles\fR" 4
.IX Item "libsfiles"
From \fIlibs.U\fR:
.Sp
This variable holdz tha filenames aka basenamez of tha libraries
we found n' accepted.
.ie n .IP """libsfound""" 4
.el .IP "\f(CWlibsfound\fR" 4
.IX Item "libsfound"
From \fIlibs.U\fR:
.Sp
This variable holdz tha full pathnamez of tha libraries
we found n' accepted.
.ie n .IP """libspath""" 4
.el .IP "\f(CWlibspath\fR" 4
.IX Item "libspath"
From \fIlibs.U\fR:
.Sp
This variable holdz tha directory names probed fo' libraries.
.ie n .IP """libswanted""" 4
.el .IP "\f(CWlibswanted\fR" 4
.IX Item "libswanted"
From \fIMyinit.U\fR:
.Sp
This variable holdz a list of all tha libraries we want to
search.  Da order is chosen ta pick up tha c library
ahead of ucb or bsd libraries fo' \s-1SVR4.\s0
.ie n .IP """libswanted_uselargefiles""" 4
.el .IP "\f(CWlibswanted_uselargefiles\fR" 4
.IX Item "libswanted_uselargefiles"
From \fIuselfs.U\fR:
.Sp
This variable gotz nuff tha libraries needed by big-ass file builds
and added ta ldflags by hints files.  It be a space separated list
of tha library names without tha \f(CW\*(C`lib\*(C'\fR prefix or any suffix, just
like \fIlibswanted.\fR.
.ie n .IP """line""" 4
.el .IP "\f(CWline\fR" 4
.IX Item "line"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """lint""" 4
.el .IP "\f(CWlint\fR" 4
.IX Item "lint"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """lkflags""" 4
.el .IP "\f(CWlkflags\fR" 4
.IX Item "lkflags"
From \fIccflags.U\fR:
.Sp
This variable gotz nuff any additionizzle C partial linker flags desired by
the user n' shit.  It be up ta tha Makefile ta use all dis bullshit.
.ie n .IP """ln""" 4
.el .IP "\f(CWln\fR" 4
.IX Item "ln"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha ln program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`ln\*(C'\fR n' aint useful.
.ie n .IP """lns""" 4
.el .IP "\f(CWlns\fR" 4
.IX Item "lns"
From \fIlns.U\fR:
.Sp
This variable holdz tha name of tha command ta make
symbolic links (if they is supported).  It can be used
in tha Makefile. Well shiiiit, it is either \f(CW\*(C`ln \-s\*(C'\fR or \f(CW\*(C`ln\*(C'\fR
.ie n .IP """localtime_r_proto""" 4
.el .IP "\f(CWlocaltime_r_proto\fR" 4
.IX Item "localtime_r_proto"
From \fId_localtime_r.U\fR:
.Sp
This variable encodes tha prototype of localtime_r.
It be zero if d_localtime_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_localtime_r
is defined.
.ie n .IP """locincpth""" 4
.el .IP "\f(CWlocincpth\fR" 4
.IX Item "locincpth"
From \fIccflags.U\fR:
.Sp
This variable gotz nuff a list of additionizzle directories ta be
searched by tha compila n' shit.  Da appropriate \f(CW\*(C`\-I\*(C'\fR directives will
be added ta ccflags.  This is intended ta simplify setting
local directories from tha Configure command line.
It aint nuthin but not much yo, but it parallels tha loclibpth shiznit up in \fIlibpth.U\fR.
.ie n .IP """loclibpth""" 4
.el .IP "\f(CWloclibpth\fR" 4
.IX Item "loclibpth"
From \fIlibpth.U\fR:
.Sp
This variable holdz tha paths (space-separated) used ta find local
libraries. Put ya muthafuckin choppers up if ya feel dis!  It be prepended ta libpth, n' is intended ta be easily
set from tha command line.
.ie n .IP """longdblsize""" 4
.el .IP "\f(CWlongdblsize\fR" 4
.IX Item "longdblsize"
From \fId_longdbl.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`LONG_DOUBLESIZE\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bytes there be up in a long-ass double,
if dis system supports long doubles.
.ie n .IP """longlongsize""" 4
.el .IP "\f(CWlonglongsize\fR" 4
.IX Item "longlongsize"
From \fId_longlong.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`LONGLONGSIZE\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bytes there be up in a long-ass long,
if dis system supports long long.
.ie n .IP """longsize""" 4
.el .IP "\f(CWlongsize\fR" 4
.IX Item "longsize"
From \fIintsize.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`LONGSIZE\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bytes there be up in a long.
.ie n .IP """lp""" 4
.el .IP "\f(CWlp\fR" 4
.IX Item "lp"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """lpr""" 4
.el .IP "\f(CWlpr\fR" 4
.IX Item "lpr"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """ls""" 4
.el .IP "\f(CWls\fR" 4
.IX Item "ls"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha ls program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`ls\*(C'\fR n' aint useful.
.ie n .IP """lseeksize""" 4
.el .IP "\f(CWlseeksize\fR" 4
.IX Item "lseeksize"
From \fIlseektype.U\fR:
.Sp
This variable defines lseektype ta be suttin' like off_t, long,
or whatever type is used ta declare lseek offsetz type up in the
kernel (which also appears ta be lseekz return type).
.ie n .IP """lseektype""" 4
.el .IP "\f(CWlseektype\fR" 4
.IX Item "lseektype"
From \fIlseektype.U\fR:
.Sp
This variable defines lseektype ta be suttin' like off_t, long,
or whatever type is used ta declare lseek offsetz type up in the
kernel (which also appears ta be lseekz return type).
.SS "m"
.IX Subsection "m"
.ie n .IP """mad""" 4
.el .IP "\f(CWmad\fR" 4
.IX Item "mad"
From \fImad.U\fR:
.Sp
This variable indicates dat tha Misc Attribute Definizzle code is to
be compiled.
.ie n .IP """madlyh""" 4
.el .IP "\f(CWmadlyh\fR" 4
.IX Item "madlyh"
From \fImad.U\fR:
.Sp
If tha Misc Attribute Decoration is ta be compiled, dis variable is
set ta tha name of tha extra header filez ta be used, else it is ''
.ie n .IP """madlyobj""" 4
.el .IP "\f(CWmadlyobj\fR" 4
.IX Item "madlyobj"
From \fImad.U\fR:
.Sp
If tha Misc Attribute Decoration is ta be compiled, dis variable is
set ta tha name of tha extra object filez ta be used, else it is ''
.ie n .IP """madlysrc""" 4
.el .IP "\f(CWmadlysrc\fR" 4
.IX Item "madlysrc"
From \fImad.U\fR:
.Sp
If tha Misc Attribute Decoration is ta be compiled, dis variable is
set ta tha name of tha extra C source filez ta be used, else it is ''
.ie n .IP """mail""" 4
.el .IP "\f(CWmail\fR" 4
.IX Item "mail"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """mailx""" 4
.el .IP "\f(CWmailx\fR" 4
.IX Item "mailx"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """make""" 4
.el .IP "\f(CWmake\fR" 4
.IX Item "make"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha make program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`make\*(C'\fR n' aint useful.
.ie n .IP """make_set_make""" 4
.el .IP "\f(CWmake_set_make\fR" 4
.IX Item "make_set_make"
From \fImake.U\fR:
.Sp
Some versionz of \f(CW\*(C`make\*(C'\fR set tha variable \f(CW\*(C`MAKE\*(C'\fR.  Others do not.
This variable gotz nuff tha strang ta be included up in \fIMakefile.SH\fR
so dat \f(CW\*(C`MAKE\*(C'\fR is set if needed, n' not if not needed.
Possible joints are:
.Sp
make_set_make=\f(CW\*(C`#\*(C'\fR		# If yo' make program handlez dis fo' you,
.Sp
make_set_make=\f(CW\*(C`MAKE=$make\*(C'\fR	# if it don't.
.Sp
This uses a cold-ass lil comment characta so dat we can distinguish a
\&\f(CW\*(C`set\*(C'\fR value (from a previous \fIconfig.sh\fR or Configure \f(CW\*(C`\-D\*(C'\fR option)
from a uncomputed value.
.ie n .IP """mallocobj""" 4
.el .IP "\f(CWmallocobj\fR" 4
.IX Item "mallocobj"
From \fImallocsrc.U\fR:
.Sp
This variable gotz nuff tha name of tha \fImalloc.o\fR dat dis package
generates, if dat \fImalloc.o\fR is preferred over tha system malloc.
Otherwise tha value is null.  This variable is intended fo' generating
Makefiles.  See mallocsrc.
.ie n .IP """mallocsrc""" 4
.el .IP "\f(CWmallocsrc\fR" 4
.IX Item "mallocsrc"
From \fImallocsrc.U\fR:
.Sp
This variable gotz nuff tha name of tha \fImalloc.c\fR dat comes with
the package, if dat \fImalloc.c\fR is preferred over tha system malloc.
Otherwise tha value is null.  This variable is intended fo' generating
Makefiles.
.ie n .IP """malloctype""" 4
.el .IP "\f(CWmalloctype\fR" 4
.IX Item "malloctype"
From \fImallocsrc.U\fR:
.Sp
This variable gotz nuff tha kind of ptr returned by malloc n' realloc.
.ie n .IP """man1dir""" 4
.el .IP "\f(CWman1dir\fR" 4
.IX Item "man1dir"
From \fIman1dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which manual
source pages is ta be put.  It be tha responsibilitizzle of the
\&\fIMakefile.SH\fR ta git tha value of dis tha fuck into tha proper command.
Yo ass must be prepared ta do tha \fI~name\fR expansion yo ass.
.ie n .IP """man1direxp""" 4
.el .IP "\f(CWman1direxp\fR" 4
.IX Item "man1direxp"
From \fIman1dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha man1dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.ie n .IP """man1ext""" 4
.el .IP "\f(CWman1ext\fR" 4
.IX Item "man1ext"
From \fIman1dir.U\fR:
.Sp
This variable gotz nuff tha extension dat tha manual page should
have: one of \f(CW\*(C`n\*(C'\fR, \f(CW\*(C`l\*(C'\fR, or \f(CW1\fR.  Da Makefile must supply tha \fI.\fR.
See man1dir.
.ie n .IP """man3dir""" 4
.el .IP "\f(CWman3dir\fR" 4
.IX Item "man3dir"
From \fIman3dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which manual
source pages is ta be put.  It be tha responsibilitizzle of the
\&\fIMakefile.SH\fR ta git tha value of dis tha fuck into tha proper command.
Yo ass must be prepared ta do tha \fI~name\fR expansion yo ass.
.ie n .IP """man3direxp""" 4
.el .IP "\f(CWman3direxp\fR" 4
.IX Item "man3direxp"
From \fIman3dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha man3dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.ie n .IP """man3ext""" 4
.el .IP "\f(CWman3ext\fR" 4
.IX Item "man3ext"
From \fIman3dir.U\fR:
.Sp
This variable gotz nuff tha extension dat tha manual page should
have: one of \f(CW\*(C`n\*(C'\fR, \f(CW\*(C`l\*(C'\fR, or \f(CW3\fR.  Da Makefile must supply tha \fI.\fR.
See man3dir.
.ie n .IP """mips_type""" 4
.el .IP "\f(CWmips_type\fR" 4
.IX Item "mips_type"
From \fIusrinc.U\fR:
.Sp
This variable holdz tha environment type fo' tha mips system.
Possible joints is \*(L"\s-1BSD 4.3\*(R"\s0 n' \*(L"System V\*(R".
.ie n .IP """mistrustnm""" 4
.el .IP "\f(CWmistrustnm\fR" 4
.IX Item "mistrustnm"
From \fICsym.U\fR:
.Sp
This variable can be used ta establish a gangbangin' fallall up in fo' tha cases
where nm fails ta find a symbol.  If usenm is false or usenm is true
and mistrustnm is false, dis variable has no effect.  If usenm is true
and mistrustnm is \f(CW\*(C`compile\*(C'\fR, a test program is ghon be compiled ta try to
find any symbol dat can't be located via nm lookup.  If mistrustnm is
\&\f(CW\*(C`run\*(C'\fR, tha test program is ghon be run as well as bein compiled.
.ie n .IP """mkdir""" 4
.el .IP "\f(CWmkdir\fR" 4
.IX Item "mkdir"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha mkdir program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`mkdir\*(C'\fR n' aint useful.
.ie n .IP """mmaptype""" 4
.el .IP "\f(CWmmaptype\fR" 4
.IX Item "mmaptype"
From \fId_mmap.U\fR:
.Sp
This symbol gotz nuff tha type of pointa returned by \fImmap()\fR
(and simultaneously tha type of tha straight-up original gangsta argument).
It can be \f(CW\*(C`void *\*(C'\fR or \f(CW\*(C`caddr_t\*(C'\fR.
.ie n .IP """modetype""" 4
.el .IP "\f(CWmodetype\fR" 4
.IX Item "modetype"
From \fImodetype.U\fR:
.Sp
This variable defines modetype ta be suttin' like mode_t,
int, unsigned short, or whatever type is used ta declare file
modes fo' system calls.
.ie n .IP """more""" 4
.el .IP "\f(CWmore\fR" 4
.IX Item "more"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha mo' program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`more\*(C'\fR n' aint useful.
.ie n .IP """multiarch""" 4
.el .IP "\f(CWmultiarch\fR" 4
.IX Item "multiarch"
From \fImultiarch.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`MULTIARCH\*(C'\fR symbol
which signifies tha presence of multiplatform files.
This is normally set by hints files.
.ie n .IP """mv""" 4
.el .IP "\f(CWmv\fR" 4
.IX Item "mv"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """myarchname""" 4
.el .IP "\f(CWmyarchname\fR" 4
.IX Item "myarchname"
From \fIarchname.U\fR:
.Sp
This variable holdz tha architecture name computed by Configure in
a previous run. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it aint intended ta be perused by any user and
should never be set up in a hint file.
.ie n .IP """mydomain""" 4
.el .IP "\f(CWmydomain\fR" 4
.IX Item "mydomain"
From \fImyhostname.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`MYDOMAIN\*(C'\fR symbol,
which is tha domain of tha host tha program is goin ta run on.
Da domain must be appended ta myhostname ta form a cold-ass lil complete host name.
Da dot comes wit mydomain, n' need not be supplied by tha program.
.ie n .IP """myhostname""" 4
.el .IP "\f(CWmyhostname\fR" 4
.IX Item "myhostname"
From \fImyhostname.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`MYHOSTNAME\*(C'\fR symbol,
which is tha name of tha host tha program is goin ta run on.
Da domain aint kept wit hostname yo, but must be gotten from mydomain.
Da dot comes wit mydomain, n' need not be supplied by tha program.
.ie n .IP """myuname""" 4
.el .IP "\f(CWmyuname\fR" 4
.IX Item "myuname"
From \fIOldconfig.U\fR:
.Sp
Da output of \f(CW\*(C`uname \-a\*(C'\fR if available, otherwise tha hostname.
Da whole thang is then lower-cased n' slashes n' single quotes are
removed.
.SS "n"
.IX Subsection "n"
.ie n .IP """n""" 4
.el .IP "\f(CWn\fR" 4
.IX Item "n"
From \fIn.U\fR:
.Sp
This variable gotz nuff tha \f(CW\*(C`\-n\*(C'\fR flag if dat is what tha fuck causes tha echo
command ta suppress newline.  Otherwise it is null.  Correct usage is
\&\f(CW$echo\fR \f(CW$n\fR \*(L"prompt fo' a question: \f(CW$c\fR\*(R".
.ie n .IP """need_va_copy""" 4
.el .IP "\f(CWneed_va_copy\fR" 4
.IX Item "need_va_copy"
From \fIneed_va_copy.U\fR:
.Sp
This symbol, if defined, indicates dat tha system stores
the variable argument list datatype, va_list, up in a gangbangin' format
that cannot be copied by simple assignment, so dat some
other means must be used when copyin is required.
As such systems vary up in they provision (or non-provision)
of copyin mechanisms, \fIhandy.h\fR defines a platform\-
\&\f(CW\*(C`independent\*(C'\fR macro, Perl_va_copy(src, dst), ta do tha thang.
.ie n .IP """netdb_hlen_type""" 4
.el .IP "\f(CWnetdb_hlen_type\fR" 4
.IX Item "netdb_hlen_type"
From \fInetdbtype.U\fR:
.Sp
This variable holdz tha type used fo' tha 2nd argument to
\&\fIgethostbyaddr()\fR.  Usually, dis is int or size_t or unsigned.
This is only useful if you have \fIgethostbyaddr()\fR, naturally.
.ie n .IP """netdb_host_type""" 4
.el .IP "\f(CWnetdb_host_type\fR" 4
.IX Item "netdb_host_type"
From \fInetdbtype.U\fR:
.Sp
This variable holdz tha type used fo' tha 1st argument to
\&\fIgethostbyaddr()\fR.  Usually, dis is char * or void *,  possibly
with or without a cold-ass lil const prefix.
This is only useful if you have \fIgethostbyaddr()\fR, naturally.
.ie n .IP """netdb_name_type""" 4
.el .IP "\f(CWnetdb_name_type\fR" 4
.IX Item "netdb_name_type"
From \fInetdbtype.U\fR:
.Sp
This variable holdz tha type used fo' tha argument to
\&\fIgethostbyname()\fR.  Usually, dis is char * or const char *.
This is only useful if you have \fIgethostbyname()\fR, naturally.
.ie n .IP """netdb_net_type""" 4
.el .IP "\f(CWnetdb_net_type\fR" 4
.IX Item "netdb_net_type"
From \fInetdbtype.U\fR:
.Sp
This variable holdz tha type used fo' tha 1st argument to
\&\fIgetnetbyaddr()\fR.  Usually, dis is int or long.
This is only useful if you have \fIgetnetbyaddr()\fR, naturally.
.ie n .IP """nm""" 4
.el .IP "\f(CWnm\fR" 4
.IX Item "nm"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha nm program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`nm\*(C'\fR n' aint useful.
.ie n .IP """nm_opt""" 4
.el .IP "\f(CWnm_opt\fR" 4
.IX Item "nm_opt"
From \fIusenm.U\fR:
.Sp
This variable holdz tha options dat may be necessary fo' nm.
.ie n .IP """nm_so_opt""" 4
.el .IP "\f(CWnm_so_opt\fR" 4
.IX Item "nm_so_opt"
From \fIusenm.U\fR:
.Sp
This variable holdz tha options dat may be necessary fo' nm
to work on a gangbangin' finger-lickin' dirty-ass shared library but dat can not be used on an
archive library.  Currently, dis is only used by Linux, where
nm \-\-dynamic is *required* ta git symbols from a \f(CW\*(C`ELF\*(C'\fR library which
has been stripped yo, but nm \-\-dynamic is *fatal* on a archive library.
Maybe Linux should just always set usenm=false.
.ie n .IP """nonxs_ext""" 4
.el .IP "\f(CWnonxs_ext\fR" 4
.IX Item "nonxs_ext"
From \fIExtensions.U\fR:
.Sp
This variable holdz a list of all non-xs extensions included
in tha package.  All of dem is ghon be built.
.ie n .IP """nroff""" 4
.el .IP "\f(CWnroff\fR" 4
.IX Item "nroff"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha nroff program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`nroff\*(C'\fR n' aint useful.
.ie n .IP """nv_overflows_integers_at""" 4
.el .IP "\f(CWnv_overflows_integers_at\fR" 4
.IX Item "nv_overflows_integers_at"
From \fIperlxv.U\fR:
.Sp
This variable gives tha phattest integer value dat NVs can hold
as a cold-ass lil constant floatin point expression.
If it could not be determined, it holdz tha value 0.
.ie n .IP """nv_preserves_uv_bits""" 4
.el .IP "\f(CWnv_preserves_uv_bits\fR" 4
.IX Item "nv_preserves_uv_bits"
From \fIperlxv.U\fR:
.Sp
This variable indicates how tha fuck nuff of bits type uvtype
a variable nvtype can preserve.
.ie n .IP """nveformat""" 4
.el .IP "\f(CWnveformat\fR" 4
.IX Item "nveformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`NV\*(C'\fR rockin \f(CW%e\fR\-ish floatin point format.
.ie n .IP """nvEUformat""" 4
.el .IP "\f(CWnvEUformat\fR" 4
.IX Item "nvEUformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`NV\*(C'\fR rockin \f(CW%E\fR\-ish floatin point format.
.ie n .IP """nvfformat""" 4
.el .IP "\f(CWnvfformat\fR" 4
.IX Item "nvfformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`NV\*(C'\fR rockin \f(CW%f\fR\-ish floatin point format.
.ie n .IP """nvFUformat""" 4
.el .IP "\f(CWnvFUformat\fR" 4
.IX Item "nvFUformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`NV\*(C'\fR rockin \f(CW%F\fR\-ish floatin point format.
.ie n .IP """nvgformat""" 4
.el .IP "\f(CWnvgformat\fR" 4
.IX Item "nvgformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`NV\*(C'\fR rockin \f(CW%g\fR\-ish floatin point format.
.ie n .IP """nvGUformat""" 4
.el .IP "\f(CWnvGUformat\fR" 4
.IX Item "nvGUformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`NV\*(C'\fR rockin \f(CW%G\fR\-ish floatin point format.
.ie n .IP """nvsize""" 4
.el .IP "\f(CWnvsize\fR" 4
.IX Item "nvsize"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a \f(CW\*(C`NV\*(C'\fR up in bytes.
.ie n .IP """nvtype""" 4
.el .IP "\f(CWnvtype\fR" 4
.IX Item "nvtype"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz \f(CW\*(C`NV\*(C'\fR.
.SS "o"
.IX Subsection "o"
.ie n .IP """o_nonblock""" 4
.el .IP "\f(CWo_nonblock\fR" 4
.IX Item "o_nonblock"
From \fInblock_io.U\fR:
.Sp
This variable bears tha symbol value ta be used durin \fIopen()\fR or \fIfcntl()\fR
to turn on non-blockin I/O fo' a gangbangin' file descriptor. Shiiit, dis aint no joke. If you wish ta switch
between blockin n' non-blocking, you may try ioctl(\f(CW\*(C`FIOSNBIO\*(C'\fR) instead,
but dat is only supported by some devices.
.ie n .IP """obj_ext""" 4
.el .IP "\f(CWobj_ext\fR" 4
.IX Item "obj_ext"
From \fIUnix.U\fR:
.Sp
This be a oldschool synonym fo' _o.
.ie n .IP """old_pthread_create_joinable""" 4
.el .IP "\f(CWold_pthread_create_joinable\fR" 4
.IX Item "old_pthread_create_joinable"
From \fId_pthrattrj.U\fR:
.Sp
This variable defines tha constant ta use fo' bustin joinable
(aka undetached) pthreads.  Unused if \fIpthread.h\fR defines
\&\f(CW\*(C`PTHREAD_CREATE_JOINABLE\*(C'\fR.  If used, possible joints are
\&\f(CW\*(C`PTHREAD_CREATE_UNDETACHED\*(C'\fR n' \f(CW\*(C`_\|_UNDETACHED\*(C'\fR.
.ie n .IP """optimize""" 4
.el .IP "\f(CWoptimize\fR" 4
.IX Item "optimize"
From \fIccflags.U\fR:
.Sp
This variable gotz nuff any \fIoptimizer/debugger\fR flag dat should be used.
It be up ta tha Makefile ta use dat shit.
.ie n .IP """orderlib""" 4
.el .IP "\f(CWorderlib\fR" 4
.IX Item "orderlib"
From \fIorderlib.U\fR:
.Sp
This variable is \f(CW\*(C`true\*(C'\fR if tha componentz of libraries must be ordered
(with `lorder $* | tsort`) before placin dem up in a archive.  Set to
\&\f(CW\*(C`false\*(C'\fR if ranlib or ar can generate random libraries.
.ie n .IP """osname""" 4
.el .IP "\f(CWosname\fR" 4
.IX Item "osname"
From \fIOldconfig.U\fR:
.Sp
This variable gotz nuff tha operatin system name (e.g. sunos,
solaris, hpux, etc.).  It can be useful lata on fo' setting
defaults, n' you can put dat on yo' toast.  Any spaces is replaced wit underscores.  It be set
to a null strang if we can't figure it out.
.ie n .IP """osvers""" 4
.el .IP "\f(CWosvers\fR" 4
.IX Item "osvers"
From \fIOldconfig.U\fR:
.Sp
This variable gotz nuff tha operatin system version (e.g.
4.1.3, 5.2, etc.).  It be primarily used fo' helpin select
an appropriate hints file yo, but might be useful elsewhere for
settin defaults, n' you can put dat on yo' toast.  It be set ta '' if we can't figure it out.
We try ta be flexible bout how tha fuck much of tha version number
to keep, e.g. if 4.1.1, 4.1.2, n' 4.1.3 is essentially the
same fo' dis package, hints filez might just be \fIos_4.0\fR or
\&\fIos_4.1\fR, etc., not keepin separate filez fo' each lil release.
.ie n .IP """otherlibdirs""" 4
.el .IP "\f(CWotherlibdirs\fR" 4
.IX Item "otherlibdirs"
From \fIotherlibdirs.U\fR:
.Sp
This variable gotz nuff a cold-ass lil colon-separated set of paths fo' tha perl
binary ta search fo' additionizzle library filez or modules.
These directories is ghon be tacked ta tha end of @\f(CW\*(C`INC\*(C'\fR.
Perl will automatically search below each path fo' version\-
and architecture-specific directories. Put ya muthafuckin choppers up if ya feel dis!  See inc_version_list
for mo' details.
A value of \f(CW\*(C` \*(C'\fR means \f(CW\*(C`none\*(C'\fR n' is used ta preserve dis value
for tha next run all up in Configure.
.SS "p"
.IX Subsection "p"
.ie n .IP """package""" 4
.el .IP "\f(CWpackage\fR" 4
.IX Item "package"
From \fIpackage.U\fR:
.Sp
This variable gotz nuff tha name of tha package bein constructed.
It be primarily intended fo' tha use of lata Configure units.
.ie n .IP """pager""" 4
.el .IP "\f(CWpager\fR" 4
.IX Item "pager"
From \fIpager.U\fR:
.Sp
This variable gotz nuff tha name of tha preferred pager on tha system.
Usual joints is (the full pathnames of) more, less, pg, or cat.
.ie n .IP """passcat""" 4
.el .IP "\f(CWpasscat\fR" 4
.IX Item "passcat"
From \fInis.U\fR:
.Sp
This variable gotz nuff a cold-ass lil command dat produces tha text of the
\&\fI/etc/passwd\fR file.  This is normally "cat \fI/etc/passwd\fR\*(L" yo, but can be
\&\*(R"ypcat passwd" when \f(CW\*(C`NIS\*(C'\fR is used.
On some systems, like fuckin os390, there may be no equivalent
command, up in which case dis variable is unset.
.ie n .IP """patchlevel""" 4
.el .IP "\f(CWpatchlevel\fR" 4
.IX Item "patchlevel"
From \fIpatchlevel.U\fR:
.Sp
Da patchlevel level of dis package.
Da value of patchlevel be reppin tha \fIpatchlevel.h\fR file.
In a version number like fuckin 5.6.1, dis is tha \f(CW6\fR.
In \fIpatchlevel.h\fR, dis is referred ta as \f(CW\*(C`PERL_VERSION\*(C'\fR.
.ie n .IP """path_sep""" 4
.el .IP "\f(CWpath_sep\fR" 4
.IX Item "path_sep"
From \fIUnix.U\fR:
.Sp
This be a oldschool synonym fo' p_ up in \fIHead.U\fR, tha character
used ta separate elements up in tha command shell search \f(CW\*(C`PATH\*(C'\fR.
.ie n .IP """perl""" 4
.el .IP "\f(CWperl\fR" 4
.IX Item "perl"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha perl program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`perl\*(C'\fR n' aint useful.
.ie n .IP """perl5""" 4
.el .IP "\f(CWperl5\fR" 4
.IX Item "perl5"
From \fIperl5.U\fR:
.Sp
This variable gotz nuff tha full path (if any) ta a previously
installed \fIperl5.005\fR or lata suitable fo' hustlin tha script
to determine inc_version_list.
.SS "P"
.IX Subsection "P"
.ie n .IP """PERL_API_REVISION""" 4
.el .IP "\f(CWPERL_API_REVISION\fR" 4
.IX Item "PERL_API_REVISION"
From \fIpatchlevel.h\fR:
.Sp
This number raps bout tha earliest compatible \f(CW\*(C`PERL_REVISION\*(C'\fR of
Perl (\f(CW\*(C`compatibility\*(C'\fR here bein defined as sufficient \fIbinary/\f(CI\*(C`API\*(C'\fI\fR
compatibilitizzle ta run \f(CW\*(C`XS\*(C'\fR code built wit tha olda version).
Normally dis do not chizzle across maintenizzle releases.
Please read tha comment up in \fIpatchlevel.h\fR.
.ie n .IP """PERL_API_SUBVERSION""" 4
.el .IP "\f(CWPERL_API_SUBVERSION\fR" 4
.IX Item "PERL_API_SUBVERSION"
From \fIpatchlevel.h\fR:
.Sp
This number raps bout tha earliest compatible \f(CW\*(C`PERL_SUBVERSION\*(C'\fR of
Perl (\f(CW\*(C`compatibility\*(C'\fR here bein defined as sufficient \fIbinary/\f(CI\*(C`API\*(C'\fI\fR
compatibilitizzle ta run \f(CW\*(C`XS\*(C'\fR code built wit tha olda version).
Normally dis do not chizzle across maintenizzle releases.
Please read tha comment up in \fIpatchlevel.h\fR.
.ie n .IP """PERL_API_VERSION""" 4
.el .IP "\f(CWPERL_API_VERSION\fR" 4
.IX Item "PERL_API_VERSION"
From \fIpatchlevel.h\fR:
.Sp
This number raps bout tha earliest compatible \f(CW\*(C`PERL_VERSION\*(C'\fR of
Perl (\f(CW\*(C`compatibility\*(C'\fR here bein defined as sufficient \fIbinary/\f(CI\*(C`API\*(C'\fI\fR
compatibilitizzle ta run \f(CW\*(C`XS\*(C'\fR code built wit tha olda version).
Normally dis do not chizzle across maintenizzle releases.
Please read tha comment up in \fIpatchlevel.h\fR.
.ie n .IP """PERL_CONFIG_SH""" 4
.el .IP "\f(CWPERL_CONFIG_SH\fR" 4
.IX Item "PERL_CONFIG_SH"
From \fIOldsyms.U\fR:
.Sp
This is set ta \f(CW\*(C`true\*(C'\fR up in \fIconfig.sh\fR so dat a gangbangin' finger-lickin' dirty-ass shell script
sourcin \fIconfig.sh\fR can tell if it has been sourced already.
.ie n .IP """PERL_PATCHLEVEL""" 4
.el .IP "\f(CWPERL_PATCHLEVEL\fR" 4
.IX Item "PERL_PATCHLEVEL"
From \fIOldsyms.U\fR:
.Sp
This symbol reflects tha patchlevel, if available. Will usually
come from tha \fI.patch\fR file, which be available when tha perl
source tree was fetched wit rsync.
.ie n .IP """perl_patchlevel""" 4
.el .IP "\f(CWperl_patchlevel\fR" 4
.IX Item "perl_patchlevel"
From \fIpatchlevel.U\fR:
.Sp
This is tha Perl patch level, a numeric chizzle identifier,
as defined by whichever source code maintenizzle system
is used ta maintain tha patches; currently Perforce.
It do not correlate wit tha Perl version numbers or
the maintenizzle versus pimpment dichotomy except
by also bein increasing.
.ie n .IP """PERL_REVISION""" 4
.el .IP "\f(CWPERL_REVISION\fR" 4
.IX Item "PERL_REVISION"
From \fIOldsyms.U\fR:
.Sp
In a Perl version number like fuckin 5.6.2, dis is tha 5.
This value is manually set up in \fIpatchlevel.h\fR
.ie n .IP """perl_static_inline""" 4
.el .IP "\f(CWperl_static_inline\fR" 4
.IX Item "perl_static_inline"
From \fId_static_inline.U\fR:
.Sp
This variable defines tha \f(CW\*(C`PERL_STATIC_INLINE\*(C'\fR symbol to
the best-guess incantation ta use fo' static inline functions.
Possibilitizzles include
static inline       (c99)
static _\|_inline_\|_   (gcc \-ansi)
static _\|_inline     (\f(CW\*(C`MSVC\*(C'\fR)
static _inline      (olda \f(CW\*(C`MSVC\*(C'\fR)
static              (c89 compilers)
.ie n .IP """PERL_SUBVERSION""" 4
.el .IP "\f(CWPERL_SUBVERSION\fR" 4
.IX Item "PERL_SUBVERSION"
From \fIOldsyms.U\fR:
.Sp
In a Perl version number like fuckin 5.6.2, dis is tha 2.
Values pimped outa than 50 represent potentially unstable
development subversions.
This value is manually set up in \fIpatchlevel.h\fR
.ie n .IP """PERL_VERSION""" 4
.el .IP "\f(CWPERL_VERSION\fR" 4
.IX Item "PERL_VERSION"
From \fIOldsyms.U\fR:
.Sp
In a Perl version number like fuckin 5.6.2, dis is tha 6.
This value is manually set up in \fIpatchlevel.h\fR
.ie n .IP """perladmin""" 4
.el .IP "\f(CWperladmin\fR" 4
.IX Item "perladmin"
From \fIperladmin.U\fR:
.Sp
Electronic mail address of tha perl5 administrator.
.ie n .IP """perllibs""" 4
.el .IP "\f(CWperllibs\fR" 4
.IX Item "perllibs"
From \fIEnd.U\fR:
.Sp
Da list of libraries needed by Perl only (any libraries needed
by extensions only will by dropped, if rockin dynamic loading).
.ie n .IP """perlpath""" 4
.el .IP "\f(CWperlpath\fR" 4
.IX Item "perlpath"
From \fIperlpath.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`PERLPATH\*(C'\fR symbol,
which gotz nuff tha name of tha perl interpreta ta be used in
shell scripts n' up in tha "eval \f(CW\*(C`exec\*(C'\fR" idiom.  This variable is
not necessarily tha pathname of tha file containin tha perl
interpreter; you must append tha executable extension (_exe) if
it aint already present.  Note dat Perl code dat runs during
the Perl build process cannot reference dis variable, as Perl
may not done been installed, or even if installed, may be a
different version of Perl.
.ie n .IP """pg""" 4
.el .IP "\f(CWpg\fR" 4
.IX Item "pg"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha pg program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`pg\*(C'\fR n' aint useful.
.ie n .IP """phostname""" 4
.el .IP "\f(CWphostname\fR" 4
.IX Item "phostname"
From \fImyhostname.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`PHOSTNAME\*(C'\fR symbol,
which be a cold-ass lil command dat can be fed ta \fIpopen()\fR ta git tha host name.
Da program should probably not presume dat tha domain is or aint
there already.
.ie n .IP """pidtype""" 4
.el .IP "\f(CWpidtype\fR" 4
.IX Item "pidtype"
From \fIpidtype.U\fR:
.Sp
This variable defines \f(CW\*(C`PIDTYPE\*(C'\fR ta be suttin' like pid_t, int,
ushort, or whatever type is used ta declare process idz up in tha kernel.
.ie n .IP """plibpth""" 4
.el .IP "\f(CWplibpth\fR" 4
.IX Item "plibpth"
From \fIlibpth.U\fR:
.Sp
Holdz tha private path used by Configure ta smoke up tha libraries.
Its value is prepend ta libpth. This variable takes care of special
machines, like tha mips.  Usually, it should be empty.
.ie n .IP """pmake""" 4
.el .IP "\f(CWpmake\fR" 4
.IX Item "pmake"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """pr""" 4
.el .IP "\f(CWpr\fR" 4
.IX Item "pr"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """prefix""" 4
.el .IP "\f(CWprefix\fR" 4
.IX Item "prefix"
From \fIprefix.U\fR:
.Sp
This variable holdz tha name of tha directory below which the
user will install tha package.  Usually, dis is \fI/usr/local\fR, and
executablez go up in \fI/usr/local/bin\fR, library shiznit up in \fI/usr/local/lib\fR,
man pages up in \fI/usr/local/man\fR, etc.  It be only used ta set defaults
for thangs up in \fIbin.U\fR, \fImansrc.U\fR, \fIprivlib.U\fR, or \fIscriptdir.U\fR.
.ie n .IP """prefixexp""" 4
.el .IP "\f(CWprefixexp\fR" 4
.IX Item "prefixexp"
From \fIprefix.U\fR:
.Sp
This variable holdz tha full absolute path of tha directory below
which tha user will install tha package.  Derived from prefix.
.ie n .IP """privlib""" 4
.el .IP "\f(CWprivlib\fR" 4
.IX Item "privlib"
From \fIprivlib.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`PRIVLIB\*(C'\fR symbol,
which is tha name of tha private library fo' dis package.  It may
have a \fI~\fR on tha front. Well shiiiit, it is up ta tha makefile ta eventually create
this directory while struttin installation (with \fI~\fR substitution).
.ie n .IP """privlibexp""" 4
.el .IP "\f(CWprivlibexp\fR" 4
.IX Item "privlibexp"
From \fIprivlib.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of privlib, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """procselfexe""" 4
.el .IP "\f(CWprocselfexe\fR" 4
.IX Item "procselfexe"
From \fId_procselfexe.U\fR:
.Sp
If d_procselfexe is defined, \f(CW$procselfexe\fR is tha filename
of tha symbolic link pointin ta tha absolute pathname of
the executin program.
.ie n .IP """prototype""" 4
.el .IP "\f(CWprototype\fR" 4
.IX Item "prototype"
From \fIprototype.U\fR:
.Sp
This variable holdz tha eventual value of \f(CW\*(C`CAN_PROTOTYPE\*(C'\fR, which
indicates tha C compila can handle function prototypes.
.ie n .IP """ptrsize""" 4
.el .IP "\f(CWptrsize\fR" 4
.IX Item "ptrsize"
From \fIptrsize.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`PTRSIZE\*(C'\fR symbol, which
indicates ta tha C program how tha fuck nuff bytes there be up in a pointer.
.SS "q"
.IX Subsection "q"
.ie n .IP """quadkind""" 4
.el .IP "\f(CWquadkind\fR" 4
.IX Item "quadkind"
From \fIquadtype.U\fR:
.Sp
This variable, if defined, encodes tha type of a quad:
1 = int, 2 = long, 3 = long long, 4 = int64_t.
.ie n .IP """quadtype""" 4
.el .IP "\f(CWquadtype\fR" 4
.IX Item "quadtype"
From \fIquadtype.U\fR:
.Sp
This variable defines Quad_t ta be suttin' like long, int,
long long, int64_t, or whatever type is used fo' 64\-bit integers.
.SS "r"
.IX Subsection "r"
.ie n .IP """randbits""" 4
.el .IP "\f(CWrandbits\fR" 4
.IX Item "randbits"
From \fIrandfunc.U\fR:
.Sp
Indicates how tha fuck nuff bits is produced by tha function used to
generate normalized random numbers.
.ie n .IP """randfunc""" 4
.el .IP "\f(CWrandfunc\fR" 4
.IX Item "randfunc"
From \fIrandfunc.U\fR:
.Sp
Indicates tha name of tha random number function ta use.
Values include drand48, random, n' rand. Y'all KNOW dat shit, muthafucka! In C programs,
the \f(CW\*(C`Drand01\*(C'\fR macro is defined ta generate uniformly distributed
random numbers over tha range [0., 1.[ (see drand01 n' nrand).
.ie n .IP """random_r_proto""" 4
.el .IP "\f(CWrandom_r_proto\fR" 4
.IX Item "random_r_proto"
From \fId_random_r.U\fR:
.Sp
This variable encodes tha prototype of random_r.
It be zero if d_random_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_random_r
is defined.
.ie n .IP """randseedtype""" 4
.el .IP "\f(CWrandseedtype\fR" 4
.IX Item "randseedtype"
From \fIrandfunc.U\fR:
.Sp
Indicates tha type of tha argument of tha seedfunc.
.ie n .IP """ranlib""" 4
.el .IP "\f(CWranlib\fR" 4
.IX Item "ranlib"
From \fIorderlib.U\fR:
.Sp
This variable is set ta tha pathname of tha ranlib program, if it is
needed ta generate random libraries. Put ya muthafuckin choppers up if ya feel dis!  Set ta \f(CW\*(C`:\*(C'\fR if ar can generate
random libraries or if random libraries is not supported
.ie n .IP """rd_nodata""" 4
.el .IP "\f(CWrd_nodata\fR" 4
.IX Item "rd_nodata"
From \fInblock_io.U\fR:
.Sp
This variable holdz tha return code from \fIread()\fR when no data is
present. Well shiiiit, it should be \-1 yo, but some systems return 0 when \f(CW\*(C`O_NDELAY\*(C'\fR is
used, which be a gangbangin' finger-lickin' dirty-ass shame cuz you cannot make tha difference between
no data n' a \fI\s-1EOF.\s0\fR. Right back up in yo muthafuckin ass. Sigh!
.ie n .IP """readdir64_r_proto""" 4
.el .IP "\f(CWreaddir64_r_proto\fR" 4
.IX Item "readdir64_r_proto"
From \fId_readdir64_r.U\fR:
.Sp
This variable encodes tha prototype of readdir64_r.
It be zero if d_readdir64_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_readdir64_r
is defined.
.ie n .IP """readdir_r_proto""" 4
.el .IP "\f(CWreaddir_r_proto\fR" 4
.IX Item "readdir_r_proto"
From \fId_readdir_r.U\fR:
.Sp
This variable encodes tha prototype of readdir_r.
It be zero if d_readdir_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_readdir_r
is defined.
.ie n .IP """revision""" 4
.el .IP "\f(CWrevision\fR" 4
.IX Item "revision"
From \fIpatchlevel.U\fR:
.Sp
Da value of revision be reppin tha \fIpatchlevel.h\fR file.
In a version number like fuckin 5.6.1, dis is tha \f(CW5\fR.
In \fIpatchlevel.h\fR, dis is referred ta as \f(CW\*(C`PERL_REVISION\*(C'\fR.
.ie n .IP """rm""" 4
.el .IP "\f(CWrm\fR" 4
.IX Item "rm"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha rm program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`rm\*(C'\fR n' aint useful.
.ie n .IP """rm_try""" 4
.el .IP "\f(CWrm_try\fR" 4
.IX Item "rm_try"
From \fIUnix.U\fR:
.Sp
This be a cold-ass lil cleanup variable fo' try test programs.
Internal Configure use only.
.ie n .IP """rmail""" 4
.el .IP "\f(CWrmail\fR" 4
.IX Item "rmail"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """run""" 4
.el .IP "\f(CWrun\fR" 4
.IX Item "run"
From \fICross.U\fR:
.Sp
This variable gotz nuff tha command used by Configure
to copy n' execute a cold-ass lil cross-compiled executable up in the
target host.  Useful n' available only durin Perl build.
Empty strang '' if not cross-compiling.
.ie n .IP """runnm""" 4
.el .IP "\f(CWrunnm\fR" 4
.IX Item "runnm"
From \fIusenm.U\fR:
.Sp
This variable gotz nuff \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR dependin whether the
nm extraction should be performed or not, accordin ta tha value
of usenm n' tha flags on tha Configure command line.
.SS "s"
.IX Subsection "s"
.ie n .IP """sched_yield""" 4
.el .IP "\f(CWsched_yield\fR" 4
.IX Item "sched_yield"
From \fId_pthread_y.U\fR:
.Sp
This variable defines tha way ta yield tha execution
of tha current thread.
.ie n .IP """scriptdir""" 4
.el .IP "\f(CWscriptdir\fR" 4
.IX Item "scriptdir"
From \fIscriptdir.U\fR:
.Sp
This variable holdz tha name of tha directory up in which tha user wants
to put publicly scripts fo' tha package up in question. I aint talkin' bout chicken n' gravy biatch.  It be either
the same directory as fo' binaries, or a special one dat can be
mounted across different architectures, like \fI/usr/share\fR. Programs
must be prepared ta deal wit \fI~name\fR expansion.
.ie n .IP """scriptdirexp""" 4
.el .IP "\f(CWscriptdirexp\fR" 4
.IX Item "scriptdirexp"
From \fIscriptdir.U\fR:
.Sp
This variable is tha same ol' dirty as scriptdir yo, but is filename expanded
at configuration time, fo' programs not wantin ta bother wit dat shit.
.ie n .IP """sed""" 4
.el .IP "\f(CWsed\fR" 4
.IX Item "sed"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha sed program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`sed\*(C'\fR n' aint useful.
.ie n .IP """seedfunc""" 4
.el .IP "\f(CWseedfunc\fR" 4
.IX Item "seedfunc"
From \fIrandfunc.U\fR:
.Sp
Indicates tha random number generatin seed function.
Values include srand48, srandom, n' srand.
.ie n .IP """selectminbits""" 4
.el .IP "\f(CWselectminbits\fR" 4
.IX Item "selectminbits"
From \fIselectminbits.U\fR:
.Sp
This variable holdz tha minimum number of bits operated by select.
That is, if you do select(n, ...), how tha fuck nuff bits at least will be
cleared up in tha masks if some activitizzle is detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Usually this
is either n or 32*ceil(\fIn/32\fR), especially nuff lil-endians do
the latter n' shit.  This is only useful if you have \fIselect()\fR, naturally.
.ie n .IP """selecttype""" 4
.el .IP "\f(CWselecttype\fR" 4
.IX Item "selecttype"
From \fIselecttype.U\fR:
.Sp
This variable holdz tha type used fo' tha 2nd, 3rd, n' 4th
arguments ta select.  Usually, dis is \f(CW\*(C`fd_set *\*(C'\fR, if \f(CW\*(C`HAS_FD_SET\*(C'\fR
is defined, n' \f(CW\*(C`int *\*(C'\fR otherwise.  This is only useful if you
have \fIselect()\fR, naturally.
.ie n .IP """sendmail""" 4
.el .IP "\f(CWsendmail\fR" 4
.IX Item "sendmail"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """setgrent_r_proto""" 4
.el .IP "\f(CWsetgrent_r_proto\fR" 4
.IX Item "setgrent_r_proto"
From \fId_setgrent_r.U\fR:
.Sp
This variable encodes tha prototype of setgrent_r.
It be zero if d_setgrent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_setgrent_r
is defined.
.ie n .IP """sethostent_r_proto""" 4
.el .IP "\f(CWsethostent_r_proto\fR" 4
.IX Item "sethostent_r_proto"
From \fId_sethostent_r.U\fR:
.Sp
This variable encodes tha prototype of sethostent_r.
It be zero if d_sethostent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_sethostent_r
is defined.
.ie n .IP """setlocale_r_proto""" 4
.el .IP "\f(CWsetlocale_r_proto\fR" 4
.IX Item "setlocale_r_proto"
From \fId_setlocale_r.U\fR:
.Sp
This variable encodes tha prototype of setlocale_r.
It be zero if d_setlocale_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_setlocale_r
is defined.
.ie n .IP """setnetent_r_proto""" 4
.el .IP "\f(CWsetnetent_r_proto\fR" 4
.IX Item "setnetent_r_proto"
From \fId_setnetent_r.U\fR:
.Sp
This variable encodes tha prototype of setnetent_r.
It be zero if d_setnetent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_setnetent_r
is defined.
.ie n .IP """setprotoent_r_proto""" 4
.el .IP "\f(CWsetprotoent_r_proto\fR" 4
.IX Item "setprotoent_r_proto"
From \fId_setprotoent_r.U\fR:
.Sp
This variable encodes tha prototype of setprotoent_r.
It be zero if d_setprotoent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_setprotoent_r
is defined.
.ie n .IP """setpwent_r_proto""" 4
.el .IP "\f(CWsetpwent_r_proto\fR" 4
.IX Item "setpwent_r_proto"
From \fId_setpwent_r.U\fR:
.Sp
This variable encodes tha prototype of setpwent_r.
It be zero if d_setpwent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_setpwent_r
is defined.
.ie n .IP """setservent_r_proto""" 4
.el .IP "\f(CWsetservent_r_proto\fR" 4
.IX Item "setservent_r_proto"
From \fId_setservent_r.U\fR:
.Sp
This variable encodes tha prototype of setservent_r.
It be zero if d_setservent_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_setservent_r
is defined.
.ie n .IP """sGMTIME_max""" 4
.el .IP "\f(CWsGMTIME_max\fR" 4
.IX Item "sGMTIME_max"
From \fItime_size.U\fR:
.Sp
This variable defines tha maximum value of tha time_t offset that
the system function gmtime () accepts
.ie n .IP """sGMTIME_min""" 4
.el .IP "\f(CWsGMTIME_min\fR" 4
.IX Item "sGMTIME_min"
From \fItime_size.U\fR:
.Sp
This variable defines tha minimum value of tha time_t offset that
the system function gmtime () accepts
.ie n .IP """sh""" 4
.el .IP "\f(CWsh\fR" 4
.IX Item "sh"
From \fIsh.U\fR:
.Sp
This variable gotz nuff tha full pathname of tha shell used
on dis system ta execute Bourne shell scripts, n' you can put dat on yo' toast.  Usually, dis will be
\&\fI/bin/sh\fR, though itz possible dat some systems gonna git \fI/bin/ksh\fR,
\&\fI/bin/pdksh\fR, \fI/bin/ash\fR, \fI/bin/bash\fR, or even suttin' such as
D:\fI/bin/sh.exe\fR.
This unit comes before \fIOptions.U\fR, so you can't set sh wit a \f(CW\*(C`\-D\*(C'\fR
option, though you can override dis (and startsh)
with \f(CW\*(C`\-O \-Dsh=\f(CI/bin/whatever\f(CW \-Dstartsh=whatever\*(C'\fR
.ie n .IP """shar""" 4
.el .IP "\f(CWshar\fR" 4
.IX Item "shar"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """sharpbang""" 4
.el .IP "\f(CWsharpbang\fR" 4
.IX Item "sharpbang"
From \fIspitshell.U\fR:
.Sp
This variable gotz nuff tha strang #! if dis system supports that
construct.
.ie n .IP """shmattype""" 4
.el .IP "\f(CWshmattype\fR" 4
.IX Item "shmattype"
From \fId_shmat.U\fR:
.Sp
This symbol gotz nuff tha type of pointa returned by \fIshmat()\fR.
It can be \f(CW\*(C`void *\*(C'\fR or \f(CW\*(C`char *\*(C'\fR.
.ie n .IP """shortsize""" 4
.el .IP "\f(CWshortsize\fR" 4
.IX Item "shortsize"
From \fIintsize.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`SHORTSIZE\*(C'\fR symbol which
indicates ta tha C program how tha fuck nuff bytes there be up in a gangbangin' finger-lickin' dirty-ass short.
.ie n .IP """shrpenv""" 4
.el .IP "\f(CWshrpenv\fR" 4
.IX Item "shrpenv"
From \fIlibperl.U\fR:
.Sp
If tha user buildz a gangbangin' finger-lickin' dirty-ass shared \fIlibperl.so\fR, then we need ta tell the
\&\f(CW\*(C`perl\*(C'\fR executable where it is ghon be able ta find tha installed \fIlibperl.so\fR.
One way ta do dis on some systems is ta set tha environment variable
\&\f(CW\*(C`LD_RUN_PATH\*(C'\fR ta tha directory dat is ghon be tha final location of the
shared \fIlibperl.so\fR.  Da makefile can use dis wit suttin' like
\&\f(CW$shrpenv\fR $(\f(CW\*(C`CC\*(C'\fR) \-o perl \fIperlmain.o\fR \f(CW$libperl\fR \f(CW$libs\fR
Typical joints are
shrpenv="env \f(CW\*(C`LD_RUN_PATH\*(C'\fR=\fI\f(CI$archlibexp\fI/\f(CI\*(C`CORE\*(C'\fI\fR"
or
shrpenv=''
See tha main perl \fIMakefile.SH\fR fo' actual hustlin usage.
Alternatively, we might be able ta bust a cold-ass lil command line option such
as \-R \fI\f(CI$archlibexp\fI/\f(CI\*(C`CORE\*(C'\fI\fR (Solaris) or \-Wl,\-rpath
\&\fI\f(CI$archlibexp\fI/\f(CI\*(C`CORE\*(C'\fI\fR (Linux).
.ie n .IP """shsharp""" 4
.el .IP "\f(CWshsharp\fR" 4
.IX Item "shsharp"
From \fIspitshell.U\fR:
.Sp
This variable  drops some lyrics ta further Configure units whether yo' sh can
handle # comments.
.ie n .IP """sig_count""" 4
.el .IP "\f(CWsig_count\fR" 4
.IX Item "sig_count"
From \fIsig_name.U\fR:
.Sp
This variable holdz a number larger than tha phattest valid
signal number n' shit.  This is probably tha same as tha \f(CW\*(C`NSIG\*(C'\fR macro.
.ie n .IP """sig_name""" 4
.el .IP "\f(CWsig_name\fR" 4
.IX Item "sig_name"
From \fIsig_name.U\fR:
.Sp
This variable holdz tha signal names, space separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da leading
\&\f(CW\*(C`SIG\*(C'\fR up in signal name is removed. Y'all KNOW dat shit, muthafucka!  A \f(CW\*(C`ZERO\*(C'\fR is prepended ta tha list.
This is currently not used, sig_name_init is used instead.
.ie n .IP """sig_name_init""" 4
.el .IP "\f(CWsig_name_init\fR" 4
.IX Item "sig_name_init"
From \fIsig_name.U\fR:
.Sp
This variable holdz tha signal names, enclosed up in double quotes and
separated by commas, suitable fo' use up in tha \f(CW\*(C`SIG_NAME\*(C'\fR definition
below.  A \f(CW\*(C`ZERO\*(C'\fR is prepended ta tha list, n' tha list is
terminated wit a plain 0.  Da leadin \f(CW\*(C`SIG\*(C'\fR up in signal names
is removed. Y'all KNOW dat shit, muthafucka! See sig_num.
.ie n .IP """sig_num""" 4
.el .IP "\f(CWsig_num\fR" 4
.IX Item "sig_num"
From \fIsig_name.U\fR:
.Sp
This variable holdz tha signal numbers, space separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A \f(CW\*(C`ZERO\*(C'\fR is
prepended ta tha list (correspondin ta tha fake \f(CW\*(C`SIGZERO\*(C'\fR).
Those numbers correspond ta  tha value of tha signal listed
in tha same place within tha sig_name list.
This is currently not used, sig_num_init is used instead.
.ie n .IP """sig_num_init""" 4
.el .IP "\f(CWsig_num_init\fR" 4
.IX Item "sig_num_init"
From \fIsig_name.U\fR:
.Sp
This variable holdz tha signal numbers, enclosed up in double quotes and
separated by commas, suitable fo' use up in tha \f(CW\*(C`SIG_NUM\*(C'\fR definition
below.  A \f(CW\*(C`ZERO\*(C'\fR is prepended ta tha list, n' tha list is
terminated wit a plain 0.
.ie n .IP """sig_size""" 4
.el .IP "\f(CWsig_size\fR" 4
.IX Item "sig_size"
From \fIsig_name.U\fR:
.Sp
This variable gotz nuff tha number of elementz of tha sig_name
and sig_num arrays.
.ie n .IP """signal_t""" 4
.el .IP "\f(CWsignal_t\fR" 4
.IX Item "signal_t"
From \fId_voidsig.U\fR:
.Sp
This variable holdz tha type of tha signal handlez (void or int).
.ie n .IP """sitearch""" 4
.el .IP "\f(CWsitearch\fR" 4
.IX Item "sitearch"
From \fIsitearch.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`SITEARCH\*(C'\fR symbol,
which is tha name of tha private library fo' dis package.  It may
have a \fI~\fR on tha front. Well shiiiit, it is up ta tha makefile ta eventually create
this directory while struttin installation (with \fI~\fR substitution).
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
architecture-dependent modulez up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """sitearchexp""" 4
.el .IP "\f(CWsitearchexp\fR" 4
.IX Item "sitearchexp"
From \fIsitearch.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of cribarch, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """sitebin""" 4
.el .IP "\f(CWsitebin\fR" 4
.IX Item "sitebin"
From \fIsitebin.U\fR:
.Sp
This variable holdz tha name of tha directory up in which tha user wants
to put add-on publicly executable filez fo' tha package up in question. I aint talkin' bout chicken n' gravy biatch.  It
is most often a local directory like fuckin \fI/usr/local/bin\fR. Programs using
this variable must be prepared ta deal wit \fI~name\fR substitution.
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
executablez up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """sitebinexp""" 4
.el .IP "\f(CWsitebinexp\fR" 4
.IX Item "sitebinexp"
From \fIsitebin.U\fR:
.Sp
This is tha same ol' dirty as tha cribbin variable yo, but is filename expanded at
configuration time, fo' use up in yo' makefiles.
.ie n .IP """sitehtml1dir""" 4
.el .IP "\f(CWsitehtml1dir\fR" 4
.IX Item "sitehtml1dir"
From \fIsitehtml1dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which crib-specific
html source pages is ta be put.  It be tha responsibilitizzle of the
\&\fIMakefile.SH\fR ta git tha value of dis tha fuck into tha proper command.
Yo ass must be prepared ta do tha \fI~name\fR expansion yo ass.
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
html pages up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """sitehtml1direxp""" 4
.el .IP "\f(CWsitehtml1direxp\fR" 4
.IX Item "sitehtml1direxp"
From \fIsitehtml1dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha cribhtml1dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.ie n .IP """sitehtml3dir""" 4
.el .IP "\f(CWsitehtml3dir\fR" 4
.IX Item "sitehtml3dir"
From \fIsitehtml3dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which crib-specific
library html source pages is ta be put.  It be tha responsibilitizzle of the
\&\fIMakefile.SH\fR ta git tha value of dis tha fuck into tha proper command.
Yo ass must be prepared ta do tha \fI~name\fR expansion yo ass.
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
library html pages up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """sitehtml3direxp""" 4
.el .IP "\f(CWsitehtml3direxp\fR" 4
.IX Item "sitehtml3direxp"
From \fIsitehtml3dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha cribhtml3dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.ie n .IP """sitelib""" 4
.el .IP "\f(CWsitelib\fR" 4
.IX Item "sitelib"
From \fIsitelib.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`SITELIB\*(C'\fR symbol,
which is tha name of tha private library fo' dis package.  It may
have a \fI~\fR on tha front. Well shiiiit, it is up ta tha makefile ta eventually create
this directory while struttin installation (with \fI~\fR substitution).
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
architecture-independent modulez up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """sitelib_stem""" 4
.el .IP "\f(CWsitelib_stem\fR" 4
.IX Item "sitelib_stem"
From \fIsitelib.U\fR:
.Sp
This variable is \f(CW$sitelibexp\fR wit any trailin version-specific component
removed. Y'all KNOW dat shit, muthafucka!  Da elements up in inc_version_list (\fIinc_version_list.U\fR) can
be tacked onto dis variable ta generate a list of directories ta search.
.ie n .IP """sitelibexp""" 4
.el .IP "\f(CWsitelibexp\fR" 4
.IX Item "sitelibexp"
From \fIsitelib.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of criblib, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """siteman1dir""" 4
.el .IP "\f(CWsiteman1dir\fR" 4
.IX Item "siteman1dir"
From \fIsiteman1dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which crib-specific
manual source pages is ta be put.  It be tha responsibilitizzle of the
\&\fIMakefile.SH\fR ta git tha value of dis tha fuck into tha proper command.
Yo ass must be prepared ta do tha \fI~name\fR expansion yo ass.
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
man1 pages up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """siteman1direxp""" 4
.el .IP "\f(CWsiteman1direxp\fR" 4
.IX Item "siteman1direxp"
From \fIsiteman1dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha cribman1dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.ie n .IP """siteman3dir""" 4
.el .IP "\f(CWsiteman3dir\fR" 4
.IX Item "siteman3dir"
From \fIsiteman3dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory up in which crib-specific
library playa source pages is ta be put.  It be tha responsibilitizzle of the
\&\fIMakefile.SH\fR ta git tha value of dis tha fuck into tha proper command.
Yo ass must be prepared ta do tha \fI~name\fR expansion yo ass.
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
man3 pages up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """siteman3direxp""" 4
.el .IP "\f(CWsiteman3direxp\fR" 4
.IX Item "siteman3direxp"
From \fIsiteman3dir.U\fR:
.Sp
This variable is tha same ol' dirty as tha cribman3dir variable yo, but is filename
expanded at configuration time, fo' convenient use up in makefiles.
.ie n .IP """siteprefix""" 4
.el .IP "\f(CWsiteprefix\fR" 4
.IX Item "siteprefix"
From \fIsiteprefix.U\fR:
.Sp
This variable holdz tha full absolute path of tha directory below
which tha user will install add-on packages.
See \f(CW\*(C`INSTALL\*(C'\fR fo' usage n' examples.
.ie n .IP """siteprefixexp""" 4
.el .IP "\f(CWsiteprefixexp\fR" 4
.IX Item "siteprefixexp"
From \fIsiteprefix.U\fR:
.Sp
This variable holdz tha full absolute path of tha directory below
which tha user will install add-on packages.  Derived from cribprefix.
.ie n .IP """sitescript""" 4
.el .IP "\f(CWsitescript\fR" 4
.IX Item "sitescript"
From \fIsitescript.U\fR:
.Sp
This variable holdz tha name of tha directory up in which tha user wants
to put add-on publicly executable filez fo' tha package up in question. I aint talkin' bout chicken n' gravy biatch.  It
is most often a local directory like fuckin \fI/usr/local/bin\fR. Programs using
this variable must be prepared ta deal wit \fI~name\fR substitution.
Da standard distribution will put not a god damn thang up in dis directory.
Afta perl has been installed, playas may install they own local
scripts up in dis directory with
MakeMaker \fIMakefile.PL\fR
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """sitescriptexp""" 4
.el .IP "\f(CWsitescriptexp\fR" 4
.IX Item "sitescriptexp"
From \fIsitescript.U\fR:
.Sp
This is tha same ol' dirty as tha cribscript variable yo, but is filename expanded at
configuration time, fo' use up in yo' makefiles.
.ie n .IP """sizesize""" 4
.el .IP "\f(CWsizesize\fR" 4
.IX Item "sizesize"
From \fIsizesize.U\fR:
.Sp
This variable gotz nuff tha size of a sizetype up in bytes.
.ie n .IP """sizetype""" 4
.el .IP "\f(CWsizetype\fR" 4
.IX Item "sizetype"
From \fIsizetype.U\fR:
.Sp
This variable defines sizetype ta be suttin' like size_t,
unsigned long, or whatever type is used ta declare length
parametas fo' strang functions.
.ie n .IP """sleep""" 4
.el .IP "\f(CWsleep\fR" 4
.IX Item "sleep"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """sLOCALTIME_max""" 4
.el .IP "\f(CWsLOCALTIME_max\fR" 4
.IX Item "sLOCALTIME_max"
From \fItime_size.U\fR:
.Sp
This variable defines tha maximum value of tha time_t offset that
the system function localtime () accepts
.ie n .IP """sLOCALTIME_min""" 4
.el .IP "\f(CWsLOCALTIME_min\fR" 4
.IX Item "sLOCALTIME_min"
From \fItime_size.U\fR:
.Sp
This variable defines tha minimum value of tha time_t offset that
the system function localtime () accepts
.ie n .IP """smail""" 4
.el .IP "\f(CWsmail\fR" 4
.IX Item "smail"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """so""" 4
.el .IP "\f(CWso\fR" 4
.IX Item "so"
From \fIso.U\fR:
.Sp
This variable holdz tha extension used ta identify shared libraries
(also known as shared objects) on tha system. Usually set ta \f(CW\*(C`so\*(C'\fR.
.ie n .IP """sockethdr""" 4
.el .IP "\f(CWsockethdr\fR" 4
.IX Item "sockethdr"
From \fId_socket.U\fR:
.Sp
This variable has any cpp \f(CW\*(C`\-I\*(C'\fR flags needed fo' socket support.
.ie n .IP """socketlib""" 4
.el .IP "\f(CWsocketlib\fR" 4
.IX Item "socketlib"
From \fId_socket.U\fR:
.Sp
This variable has tha namez of any libraries needed fo' socket support.
.ie n .IP """socksizetype""" 4
.el .IP "\f(CWsocksizetype\fR" 4
.IX Item "socksizetype"
From \fIsocksizetype.U\fR:
.Sp
This variable holdz tha type used fo' tha size argument
for various socket calls like accept.  Usual joints include
socklen_t, size_t, n' int.
.ie n .IP """sort""" 4
.el .IP "\f(CWsort\fR" 4
.IX Item "sort"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha sort program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`sort\*(C'\fR n' aint useful.
.ie n .IP """spackage""" 4
.el .IP "\f(CWspackage\fR" 4
.IX Item "spackage"
From \fIpackage.U\fR:
.Sp
This variable gotz nuff tha name of tha package bein constructed,
with tha straight-up original gangsta letta uppercased, \fIi.e\fR. suitable fo' starting
sentences.
.ie n .IP """spitshell""" 4
.el .IP "\f(CWspitshell\fR" 4
.IX Item "spitshell"
From \fIspitshell.U\fR:
.Sp
This variable gotz nuff tha command necessary ta spit up a runnable
shell on dis system.  It be either pussaaaaay or a grep \f(CW\*(C`\-v\*(C'\fR fo' # comments.
.ie n .IP """sPRId64""" 4
.el .IP "\f(CWsPRId64\fR" 4
.IX Item "sPRId64"
From \fIquadfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format 64\-bit decimal numbers (format \f(CW\*(C`d\*(C'\fR) fo' output.
.ie n .IP """sPRIeldbl""" 4
.el .IP "\f(CWsPRIeldbl\fR" 4
.IX Item "sPRIeldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format long doublez (format \f(CW\*(C`e\*(C'\fR) fo' output.
.ie n .IP """sPRIEUldbl""" 4
.el .IP "\f(CWsPRIEUldbl\fR" 4
.IX Item "sPRIEUldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format long doublez (format \f(CW\*(C`E\*(C'\fR) fo' output.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from sPRIeldbl so dat even
case-blind systems can peep tha difference.
.ie n .IP """sPRIfldbl""" 4
.el .IP "\f(CWsPRIfldbl\fR" 4
.IX Item "sPRIfldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format long doublez (format \f(CW\*(C`f\*(C'\fR) fo' output.
.ie n .IP """sPRIFUldbl""" 4
.el .IP "\f(CWsPRIFUldbl\fR" 4
.IX Item "sPRIFUldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format long doublez (format \f(CW\*(C`F\*(C'\fR) fo' output.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from sPRIfldbl so dat even
case-blind systems can peep tha difference.
.ie n .IP """sPRIgldbl""" 4
.el .IP "\f(CWsPRIgldbl\fR" 4
.IX Item "sPRIgldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format long doublez (format \f(CW\*(C`g\*(C'\fR) fo' output.
.ie n .IP """sPRIGUldbl""" 4
.el .IP "\f(CWsPRIGUldbl\fR" 4
.IX Item "sPRIGUldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format long doublez (format \f(CW\*(C`G\*(C'\fR) fo' output.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from sPRIgldbl so dat even
case-blind systems can peep tha difference.
.ie n .IP """sPRIi64""" 4
.el .IP "\f(CWsPRIi64\fR" 4
.IX Item "sPRIi64"
From \fIquadfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format 64\-bit decimal numbers (format \f(CW\*(C`i\*(C'\fR) fo' output.
.ie n .IP """sPRIo64""" 4
.el .IP "\f(CWsPRIo64\fR" 4
.IX Item "sPRIo64"
From \fIquadfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format 64\-bit octal numbers (format \f(CW\*(C`o\*(C'\fR) fo' output.
.ie n .IP """sPRIu64""" 4
.el .IP "\f(CWsPRIu64\fR" 4
.IX Item "sPRIu64"
From \fIquadfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format 64\-bit unsigned decimal numbers (format \f(CW\*(C`u\*(C'\fR) fo' output.
.ie n .IP """sPRIx64""" 4
.el .IP "\f(CWsPRIx64\fR" 4
.IX Item "sPRIx64"
From \fIquadfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format 64\-bit hexadecimal numbers (format \f(CW\*(C`x\*(C'\fR) fo' output.
.ie n .IP """sPRIXU64""" 4
.el .IP "\f(CWsPRIXU64\fR" 4
.IX Item "sPRIXU64"
From \fIquadfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format 64\-bit hExADECimAl numbers (format \f(CW\*(C`X\*(C'\fR) fo' output.
Da \f(CW\*(C`U\*(C'\fR up in tha name is ta separate dis from sPRIx64 so dat even
case-blind systems can peep tha difference.
.ie n .IP """srand48_r_proto""" 4
.el .IP "\f(CWsrand48_r_proto\fR" 4
.IX Item "srand48_r_proto"
From \fId_srand48_r.U\fR:
.Sp
This variable encodes tha prototype of srand48_r.
It be zero if d_srand48_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_srand48_r
is defined.
.ie n .IP """srandom_r_proto""" 4
.el .IP "\f(CWsrandom_r_proto\fR" 4
.IX Item "srandom_r_proto"
From \fId_srandom_r.U\fR:
.Sp
This variable encodes tha prototype of srandom_r.
It be zero if d_srandom_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_srandom_r
is defined.
.ie n .IP """src""" 4
.el .IP "\f(CWsrc\fR" 4
.IX Item "src"
From \fIsrc.U\fR:
.Sp
This variable holdz tha (possibly relative) path of tha package source.
It be up ta tha Makefile ta use dis variable n' set \f(CW\*(C`VPATH\*(C'\fR accordingly
to find tha sources remotely.  Use \f(CW$pkgsrc\fR ta have a absolute path.
.ie n .IP """sSCNfldbl""" 4
.el .IP "\f(CWsSCNfldbl\fR" 4
.IX Item "sSCNfldbl"
From \fIlongdblfio.U\fR:
.Sp
This variable, if defined, gotz nuff tha strang used by stdio to
format long doublez (format \f(CW\*(C`f\*(C'\fR) fo' input.
.ie n .IP """ssizetype""" 4
.el .IP "\f(CWssizetype\fR" 4
.IX Item "ssizetype"
From \fIssizetype.U\fR:
.Sp
This variable defines ssizetype ta be suttin' like ssize_t,
long or int.  It be used by functions dat return a cold-ass lil count
of bytes or a error condition. I aint talkin' bout chicken n' gravy biatch.  It must be a signed type.
Us thugs will pick a type such dat sizeof(SSize_t) == sizeof(Size_t).
.ie n .IP """st_ino_sign""" 4
.el .IP "\f(CWst_ino_sign\fR" 4
.IX Item "st_ino_sign"
From \fIst_ino_def.U\fR:
.Sp
This variable gotz nuff tha signednizz of struct statz st_ino.
1 fo' unsigned, \-1 fo' signed.
.ie n .IP """st_ino_size""" 4
.el .IP "\f(CWst_ino_size\fR" 4
.IX Item "st_ino_size"
From \fIst_ino_def.U\fR:
.Sp
This variable gotz nuff tha size of struct statz st_ino up in bytes.
.ie n .IP """startperl""" 4
.el .IP "\f(CWstartperl\fR" 4
.IX Item "startperl"
From \fIstartperl.U\fR:
.Sp
This variable gotz nuff tha strang ta put on tha front of a perl
script ta make shizzle (hopefully) dat it runs wit perl n' not some
shell. Of course, dat leadin line must be followed by tha classical
perl idiom:
eval 'exec perl \-S \f(CW$0\fR ${1+\f(CW$@\fR}'
if \f(CW$running_under_some_shell\fR;
to guarantee perl startup should tha shell execute tha script. Note
that dis magic incantation aint understood by csh.
.ie n .IP """startsh""" 4
.el .IP "\f(CWstartsh\fR" 4
.IX Item "startsh"
From \fIstartsh.U\fR:
.Sp
This variable gotz nuff tha strang ta put on tha front of a gangbangin' finger-lickin' dirty-ass shell
script ta make shizzle (hopefully) dat it runs wit sh n' not some
other shell.
.ie n .IP """static_ext""" 4
.el .IP "\f(CWstatic_ext\fR" 4
.IX Item "static_ext"
From \fIExtensions.U\fR:
.Sp
This variable holdz a list of \f(CW\*(C`XS\*(C'\fR extension filez we want to
link statically tha fuck into tha package.  It be used by Makefile.
.ie n .IP """stdchar""" 4
.el .IP "\f(CWstdchar\fR" 4
.IX Item "stdchar"
From \fIstdchar.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`STDCHAR\*(C'\fR ta be tha type of char
used up in \fIstdio.h\fR.  It has tha joints \*(L"unsigned char\*(R" or \f(CW\*(C`char\*(C'\fR.
.ie n .IP """stdio_base""" 4
.el .IP "\f(CWstdio_base\fR" 4
.IX Item "stdio_base"
From \fId_stdstdio.U\fR:
.Sp
This variable defines how, given a \f(CW\*(C`FILE\*(C'\fR pointer, fp, ta access the
_base field (or equivalent) of \fIstdio.h\fRz \f(CW\*(C`FILE\*(C'\fR structure.  This will
be used ta define tha macro FILE_base(fp).
.ie n .IP """stdio_bufsiz""" 4
.el .IP "\f(CWstdio_bufsiz\fR" 4
.IX Item "stdio_bufsiz"
From \fId_stdstdio.U\fR:
.Sp
This variable defines how, given a \f(CW\*(C`FILE\*(C'\fR pointer, fp, ta determine
the number of bytes store up in tha I/O buffer pointa ta by the
_base field (or equivalent) of \fIstdio.h\fRz \f(CW\*(C`FILE\*(C'\fR structure.  This will
be used ta define tha macro FILE_bufsiz(fp).
.ie n .IP """stdio_cnt""" 4
.el .IP "\f(CWstdio_cnt\fR" 4
.IX Item "stdio_cnt"
From \fId_stdstdio.U\fR:
.Sp
This variable defines how, given a \f(CW\*(C`FILE\*(C'\fR pointer, fp, ta access the
_cnt field (or equivalent) of \fIstdio.h\fRz \f(CW\*(C`FILE\*(C'\fR structure.  This will
be used ta define tha macro FILE_cnt(fp).
.ie n .IP """stdio_filbuf""" 4
.el .IP "\f(CWstdio_filbuf\fR" 4
.IX Item "stdio_filbuf"
From \fId_stdstdio.U\fR:
.Sp
This variable defines how, given a \f(CW\*(C`FILE\*(C'\fR pointer, fp, ta tell
stdio ta refill its internal buffers (?).  This will
be used ta define tha macro FILE_filbuf(fp).
.ie n .IP """stdio_ptr""" 4
.el .IP "\f(CWstdio_ptr\fR" 4
.IX Item "stdio_ptr"
From \fId_stdstdio.U\fR:
.Sp
This variable defines how, given a \f(CW\*(C`FILE\*(C'\fR pointer, fp, ta access the
_ptr field (or equivalent) of \fIstdio.h\fRz \f(CW\*(C`FILE\*(C'\fR structure.  This will
be used ta define tha macro FILE_ptr(fp).
.ie n .IP """stdio_stream_array""" 4
.el .IP "\f(CWstdio_stream_array\fR" 4
.IX Item "stdio_stream_array"
From \fIstdio_streams.U\fR:
.Sp
This variable  drops some lyrics ta tha name of tha array holdin tha stdio streams.
Usual joints include _iob, _\|_iob, n' _\|_sF.
.ie n .IP """strerror_r_proto""" 4
.el .IP "\f(CWstrerror_r_proto\fR" 4
.IX Item "strerror_r_proto"
From \fId_strerror_r.U\fR:
.Sp
This variable encodes tha prototype of strerror_r.
It be zero if d_strerror_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_strerror_r
is defined.
.ie n .IP """strings""" 4
.el .IP "\f(CWstrings\fR" 4
.IX Item "strings"
From \fIi_string.U\fR:
.Sp
This variable holdz tha full path of tha strang header dat will be
used. Y'all KNOW dat shit, muthafucka! Typically \fI/usr/include/string.h\fR or \fI/usr/include/strings.h\fR.
.ie n .IP """submit""" 4
.el .IP "\f(CWsubmit\fR" 4
.IX Item "submit"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """subversion""" 4
.el .IP "\f(CWsubversion\fR" 4
.IX Item "subversion"
From \fIpatchlevel.U\fR:
.Sp
Da subversion level of dis package.
Da value of subversion be reppin tha \fIpatchlevel.h\fR file.
In a version number like fuckin 5.6.1, dis is tha \f(CW1\fR.
In \fIpatchlevel.h\fR, dis is referred ta as \f(CW\*(C`PERL_SUBVERSION\*(C'\fR.
This is unique ta perl.
.ie n .IP """sysman""" 4
.el .IP "\f(CWsysman\fR" 4
.IX Item "sysman"
From \fIsysman.U\fR:
.Sp
This variable holdz tha place where tha manual is located on this
system. Well shiiiit, it aint tha place where tha user wants ta put his crazy-ass manual
pages. Rather it is tha place where Configure may look ta find manual
for unix commandz (section 1 of tha manual usually). Right back up in yo muthafuckin ass. See mansrc.
.SS "t"
.IX Subsection "t"
.ie n .IP """tail""" 4
.el .IP "\f(CWtail\fR" 4
.IX Item "tail"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """tar""" 4
.el .IP "\f(CWtar\fR" 4
.IX Item "tar"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """targetarch""" 4
.el .IP "\f(CWtargetarch\fR" 4
.IX Item "targetarch"
From \fICross.U\fR:
.Sp
If cross-compiling, dis variable gotz nuff tha target architecture.
If not, dis is ghon be empty.
.ie n .IP """tbl""" 4
.el .IP "\f(CWtbl\fR" 4
.IX Item "tbl"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """tee""" 4
.el .IP "\f(CWtee\fR" 4
.IX Item "tee"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """test""" 4
.el .IP "\f(CWtest\fR" 4
.IX Item "test"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha test program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`test\*(C'\fR n' aint useful.
.ie n .IP """timeincl""" 4
.el .IP "\f(CWtimeincl\fR" 4
.IX Item "timeincl"
From \fIi_time.U\fR:
.Sp
This variable holdz tha full path of tha included time header(s).
.ie n .IP """timetype""" 4
.el .IP "\f(CWtimetype\fR" 4
.IX Item "timetype"
From \fId_time.U\fR:
.Sp
This variable holdz tha type returned by \fItime()\fR. Well shiiiit, it can be long,
or time_t on \f(CW\*(C`BSD\*(C'\fR cribs (in which case <sys/types.h> should be
included) fo' realz. Anyway, tha type Time_t should be used.
.ie n .IP """tmpnam_r_proto""" 4
.el .IP "\f(CWtmpnam_r_proto\fR" 4
.IX Item "tmpnam_r_proto"
From \fId_tmpnam_r.U\fR:
.Sp
This variable encodes tha prototype of tmpnam_r.
It be zero if d_tmpnam_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_tmpnam_r
is defined.
.ie n .IP """to""" 4
.el .IP "\f(CWto\fR" 4
.IX Item "to"
From \fICross.U\fR:
.Sp
This variable gotz nuff tha command used by Configure
to copy ta from tha target host.  Useful n' available
only durin Perl build.
Da strang \f(CW\*(C`:\*(C'\fR if not cross-compiling.
.ie n .IP """touch""" 4
.el .IP "\f(CWtouch\fR" 4
.IX Item "touch"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha bust a nut on program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`touch\*(C'\fR n' aint useful.
.ie n .IP """tr""" 4
.el .IP "\f(CWtr\fR" 4
.IX Item "tr"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha tr program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`tr\*(C'\fR n' aint useful.
.ie n .IP """trnl""" 4
.el .IP "\f(CWtrnl\fR" 4
.IX Item "trnl"
From \fItrnl.U\fR:
.Sp
This variable gotz nuff tha value ta be passed ta tha \fItr\fR\|(1)
command ta transliterate a newline.  Typical joints are
\&\f(CW\*(C`\e012\*(C'\fR n' \f(CW\*(C`\en\*(C'\fR.  This is needed fo' \f(CW\*(C`EBCDIC\*(C'\fR systems where
newline aint necessarily \f(CW\*(C`\e012\*(C'\fR.
.ie n .IP """troff""" 4
.el .IP "\f(CWtroff\fR" 4
.IX Item "troff"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """ttyname_r_proto""" 4
.el .IP "\f(CWttyname_r_proto\fR" 4
.IX Item "ttyname_r_proto"
From \fId_ttyname_r.U\fR:
.Sp
This variable encodes tha prototype of ttyname_r.
It be zero if d_ttyname_r is undef, n' one of the
\&\f(CW\*(C`REENTRANT_PROTO_T_ABC\*(C'\fR macroz of \fIreentr.h\fR if d_ttyname_r
is defined.
.SS "u"
.IX Subsection "u"
.ie n .IP """u16size""" 4
.el .IP "\f(CWu16size\fR" 4
.IX Item "u16size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a U16 up in bytes.
.ie n .IP """u16type""" 4
.el .IP "\f(CWu16type\fR" 4
.IX Item "u16type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz U16.
.ie n .IP """u32size""" 4
.el .IP "\f(CWu32size\fR" 4
.IX Item "u32size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a U32 up in bytes.
.ie n .IP """u32type""" 4
.el .IP "\f(CWu32type\fR" 4
.IX Item "u32type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz U32.
.ie n .IP """u64size""" 4
.el .IP "\f(CWu64size\fR" 4
.IX Item "u64size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a U64 up in bytes.
.ie n .IP """u64type""" 4
.el .IP "\f(CWu64type\fR" 4
.IX Item "u64type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz U64.
.ie n .IP """u8size""" 4
.el .IP "\f(CWu8size\fR" 4
.IX Item "u8size"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a U8 up in bytes.
.ie n .IP """u8type""" 4
.el .IP "\f(CWu8type\fR" 4
.IX Item "u8type"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz U8.
.ie n .IP """uidformat""" 4
.el .IP "\f(CWuidformat\fR" 4
.IX Item "uidformat"
From \fIuidf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printin a Uid_t.
.ie n .IP """uidsign""" 4
.el .IP "\f(CWuidsign\fR" 4
.IX Item "uidsign"
From \fIuidsign.U\fR:
.Sp
This variable gotz nuff tha signednizz of a uidtype.
1 fo' unsigned, \-1 fo' signed.
.ie n .IP """uidsize""" 4
.el .IP "\f(CWuidsize\fR" 4
.IX Item "uidsize"
From \fIuidsize.U\fR:
.Sp
This variable gotz nuff tha size of a uidtype up in bytes.
.ie n .IP """uidtype""" 4
.el .IP "\f(CWuidtype\fR" 4
.IX Item "uidtype"
From \fIuidtype.U\fR:
.Sp
This variable defines Uid_t ta be suttin' like uid_t, int,
ushort, or whatever type is used ta declare user idz up in tha kernel.
.ie n .IP """uname""" 4
.el .IP "\f(CWuname\fR" 4
.IX Item "uname"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha uname program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`uname\*(C'\fR n' aint useful.
.ie n .IP """uniq""" 4
.el .IP "\f(CWuniq\fR" 4
.IX Item "uniq"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha uniq program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`uniq\*(C'\fR n' aint useful.
.ie n .IP """uquadtype""" 4
.el .IP "\f(CWuquadtype\fR" 4
.IX Item "uquadtype"
From \fIquadtype.U\fR:
.Sp
This variable defines Uquad_t ta be suttin' like unsigned long,
unsigned int, unsigned long long, uint64_t, or whatever type is
used fo' 64\-bit integers.
.ie n .IP """use5005threads""" 4
.el .IP "\f(CWuse5005threads\fR" 4
.IX Item "use5005threads"
From \fIusethreads.U\fR:
.Sp
This variable conditionally defines tha \s-1USE_5005THREADS\s0 symbol,
and indicates dat Perl should be built ta use tha 5.005\-based
threadin implementation. I aint talkin' bout chicken n' gravy biatch. Only valid up ta 5.8.x.
.ie n .IP """use64bitall""" 4
.el .IP "\f(CWuse64bitall\fR" 4
.IX Item "use64bitall"
From \fIuse64bits.U\fR:
.Sp
This variable conditionally defines tha \s-1USE_64_BIT_ALL\s0 symbol,
and indicates dat 64\-bit integer types should be used
when available.  Da maximal possible
64\-bitnizz is employed: \s-1LP64\s0 or \s-1ILP64,\s0 meanin dat you will
be able ta use mo' than 2 gigabytez of memory.  This mode is
even mo' binary incompatible than \s-1USE_64_BIT_INT.\s0 Yo ass may not
be able ta run tha resultin executable up in a 32\-bit \f(CW\*(C`CPU\*(C'\fR at all or
you may need at least ta reboot yo' \f(CW\*(C`OS\*(C'\fR ta 64\-bit mode.
.ie n .IP """use64bitint""" 4
.el .IP "\f(CWuse64bitint\fR" 4
.IX Item "use64bitint"
From \fIuse64bits.U\fR:
.Sp
This variable conditionally defines tha \s-1USE_64_BIT_INT\s0 symbol,
and indicates dat 64\-bit integer types should be used
when available.  Da minimal possible 64\-bitness
is employed, just enough ta git 64\-bit integers tha fuck into Perl.
This may mean rockin fo' example \*(L"long longs\*(R", while yo' memory
may still be limited ta 2 gigabytes.
.ie n .IP """usecrosscompile""" 4
.el .IP "\f(CWusecrosscompile\fR" 4
.IX Item "usecrosscompile"
From \fICross.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_CROSS_COMPILE\*(C'\fR symbol,
and indicates dat Perl has been cross-compiled.
.ie n .IP """usedevel""" 4
.el .IP "\f(CWusedevel\fR" 4
.IX Item "usedevel"
From \fIDevel.U\fR:
.Sp
This variable indicates dat Perl was configured wit pimpment
features enabled. Y'all KNOW dat shit, muthafucka!  This should not be done fo' thang builds.
.ie n .IP """usedl""" 4
.el .IP "\f(CWusedl\fR" 4
.IX Item "usedl"
From \fIdlsrc.U\fR:
.Sp
This variable indicates if tha system supports dynamic
loadin of some sort.  See also dlsrc n' dlobj.
.ie n .IP """usedtrace""" 4
.el .IP "\f(CWusedtrace\fR" 4
.IX Item "usedtrace"
From \fIusedtrace.U\fR:
.Sp
This variable indicates whether we is compilin wit dtrace
support. Right back up in yo muthafuckin ass. See also dtrace.
.ie n .IP """usefaststdio""" 4
.el .IP "\f(CWusefaststdio\fR" 4
.IX Item "usefaststdio"
From \fIusefaststdio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_FAST_STDIO\*(C'\fR symbol,
and indicates dat Perl should be built ta use \f(CW\*(C`fast stdio\*(C'\fR.
Defaults ta define up in Perls 5.8 n' earlier, ta undef later.
.ie n .IP """useithreads""" 4
.el .IP "\f(CWuseithreads\fR" 4
.IX Item "useithreads"
From \fIusethreads.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_ITHREADS\*(C'\fR symbol,
and indicates dat Perl should be built ta use tha interpreter-based
threadin implementation.
.ie n .IP """usekernprocpathname""" 4
.el .IP "\f(CWusekernprocpathname\fR" 4
.IX Item "usekernprocpathname"
From \fIusekernprocpathname.U\fR:
.Sp
This variable, indicates dat we can use sysctl with
\&\f(CW\*(C`KERN_PROC_PATHNAME\*(C'\fR ta git a gangbangin' full path fo' tha executable, n' hence
convert $^X ta a absolute path.
.ie n .IP """uselargefiles""" 4
.el .IP "\f(CWuselargefiles\fR" 4
.IX Item "uselargefiles"
From \fIuselfs.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_LARGE_FILES\*(C'\fR symbol,
and indicates dat big-ass file intercourses should be used when
available.
.ie n .IP """uselongdouble""" 4
.el .IP "\f(CWuselongdouble\fR" 4
.IX Item "uselongdouble"
From \fIuselongdbl.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_LONG_DOUBLE\*(C'\fR symbol,
and indicates dat long doublez should be used when available.
.ie n .IP """usemallocwrap""" 4
.el .IP "\f(CWusemallocwrap\fR" 4
.IX Item "usemallocwrap"
From \fImallocsrc.U\fR:
.Sp
This variable gotz nuff y if we is wrappin malloc ta prevent
integer overflow durin size calculations.
.ie n .IP """usemorebits""" 4
.el .IP "\f(CWusemorebits\fR" 4
.IX Item "usemorebits"
From \fIusemorebits.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_MORE_BITS\*(C'\fR symbol,
and indicates dat explicit 64\-bit intercourses n' long doubles
should be used when available.
.ie n .IP """usemultiplicity""" 4
.el .IP "\f(CWusemultiplicity\fR" 4
.IX Item "usemultiplicity"
From \fIusemultiplicity.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`MULTIPLICITY\*(C'\fR symbol,
and indicates dat Perl should be built ta use multiplicity.
.ie n .IP """usemymalloc""" 4
.el .IP "\f(CWusemymalloc\fR" 4
.IX Item "usemymalloc"
From \fImallocsrc.U\fR:
.Sp
This variable gotz nuff y if tha malloc dat comes wit dis package
is desired over tha systemz version of malloc.  Muthafuckas often include
special versionz of malloc fo' efficiency yo, but such versions is often
less portable.  See also mallocsrc n' mallocobj.
If dis is \f(CW\*(C`y\*(C'\fR, then \-lmalloc is removed from \f(CW$libs\fR.
.ie n .IP """usenm""" 4
.el .IP "\f(CWusenm\fR" 4
.IX Item "usenm"
From \fIusenm.U\fR:
.Sp
This variable gotz nuff \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR dependin whether the
nm extraction is wanted or not.
.ie n .IP """usensgetexecutablepath""" 4
.el .IP "\f(CWusensgetexecutablepath\fR" 4
.IX Item "usensgetexecutablepath"
From \fIusensgetexecutablepath.U\fR:
.Sp
This symbol, if defined, indicates dat we can use _NSGetExecutablePath
and realpath ta git a gangbangin' full path fo' tha executable, n' hence convert
$^X ta a absolute path.
.ie n .IP """useopcode""" 4
.el .IP "\f(CWuseopcode\fR" 4
.IX Item "useopcode"
From \fIExtensions.U\fR:
.Sp
This variable holdz either \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR ta indicate
whether tha Opcode extension should be used. Y'all KNOW dat shit, muthafucka!  Da sole
use fo' dis currently is ta allow a easy as fuck  mechanism
for playas ta skip tha Opcode extension from tha Configure
command line.
.ie n .IP """useperlio""" 4
.el .IP "\f(CWuseperlio\fR" 4
.IX Item "useperlio"
From \fIuseperlio.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_PERLIO\*(C'\fR symbol,
and indicates dat tha PerlIO abstraction should be
used throughout.
.ie n .IP """useposix""" 4
.el .IP "\f(CWuseposix\fR" 4
.IX Item "useposix"
From \fIExtensions.U\fR:
.Sp
This variable holdz either \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR ta indicate
whether tha \f(CW\*(C`POSIX\*(C'\fR extension should be used. Y'all KNOW dat shit, muthafucka!  Da sole
use fo' dis currently is ta allow a easy as fuck  mechanism
for hints filez ta indicate dat \f(CW\*(C`POSIX\*(C'\fR aint gonna compile
on a particular system.
.ie n .IP """usereentrant""" 4
.el .IP "\f(CWusereentrant\fR" 4
.IX Item "usereentrant"
From \fIusethreads.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_REENTRANT_API\*(C'\fR symbol,
which indicates dat tha thread code may try ta use tha various
_r versionz of library functions.  This is only potentially
meaningful if usethreadz is set n' is straight-up experimental, it is
not even prompted for.
.ie n .IP """userelocatableinc""" 4
.el .IP "\f(CWuserelocatableinc\fR" 4
.IX Item "userelocatableinc"
From \fIbin.U\fR:
.Sp
This variable is set ta legit ta indicate dat perl should relocate
@\f(CW\*(C`INC\*(C'\fR entries at runtime based on tha path ta tha perl binary.
Any @\f(CW\*(C`INC\*(C'\fR paths startin \fI.../\fR is relocated relatizzle ta tha directory
containin tha perl binary, n' a logical cleanup of tha path is then
made round tha join point (removin \fIdir/../\fR pairs)
.ie n .IP """usesfio""" 4
.el .IP "\f(CWusesfio\fR" 4
.IX Item "usesfio"
From \fId_sfio.U\fR:
.Sp
This variable is set ta legit when tha user agrees ta use sfio.
It be set ta false when sfio aint available or when tha user
explicitly requests not ta use sfio.  It be here primarily so
that command-line settings can override tha auto-detection of
d_sfio without hustlin tha fuck into a \*(L"\s-1WHOA THERE\*(R".\s0
.ie n .IP """useshrplib""" 4
.el .IP "\f(CWuseshrplib\fR" 4
.IX Item "useshrplib"
From \fIlibperl.U\fR:
.Sp
This variable is set ta \f(CW\*(C`true\*(C'\fR if tha user wishes
to build a gangbangin' finger-lickin' dirty-ass shared libperl, n' \f(CW\*(C`false\*(C'\fR otherwise.
.ie n .IP """usesitecustomize""" 4
.el .IP "\f(CWusesitecustomize\fR" 4
.IX Item "usesitecustomize"
From \fId_sitecustomize.U\fR:
.Sp
This variable is set ta legit when tha user requires a mechanizzle that
allows tha sysadmin ta add entries ta @\f(CW\*(C`INC\*(C'\fR at runtime.  This variable
bein set, make perl run \fI$\fIsitelib/sitecustomize.pl\fI\fR at startup.
.ie n .IP """usesocks""" 4
.el .IP "\f(CWusesocks\fR" 4
.IX Item "usesocks"
From \fIusesocks.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_SOCKS\*(C'\fR symbol,
and indicates dat Perl should be built ta use \f(CW\*(C`SOCKS\*(C'\fR.
.ie n .IP """usethreads""" 4
.el .IP "\f(CWusethreads\fR" 4
.IX Item "usethreads"
From \fIusethreads.U\fR:
.Sp
This variable conditionally defines tha \f(CW\*(C`USE_THREADS\*(C'\fR symbol,
and indicates dat Perl should be built ta use threads.
.ie n .IP """usevendorprefix""" 4
.el .IP "\f(CWusevendorprefix\fR" 4
.IX Item "usevendorprefix"
From \fIvendorprefix.U\fR:
.Sp
This variable  drops some lyrics ta whether tha vendorprefix
and consequently other vendor* paths is up in use.
.ie n .IP """useversionedarchname""" 4
.el .IP "\f(CWuseversionedarchname\fR" 4
.IX Item "useversionedarchname"
From \fIarchname.U\fR:
.Sp
This variable indicates whether ta include tha \f(CW$api_versionstring\fR
as a cold-ass lil component of tha \f(CW$archname\fR.
.ie n .IP """usevfork""" 4
.el .IP "\f(CWusevfork\fR" 4
.IX Item "usevfork"
From \fId_vfork.U\fR:
.Sp
This variable is set ta legit when tha user accepts ta use vfork.
It be set ta false when no vfork be available or when tha user
explicitly requests not ta use vfork.
.ie n .IP """usrinc""" 4
.el .IP "\f(CWusrinc\fR" 4
.IX Item "usrinc"
From \fIusrinc.U\fR:
.Sp
This variable holdz tha path of tha include files, which is
usually \fI/usr/include\fR. Well shiiiit, it is mainly used by other Configure units.
.ie n .IP """uuname""" 4
.el .IP "\f(CWuuname\fR" 4
.IX Item "uuname"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """uvoformat""" 4
.el .IP "\f(CWuvoformat\fR" 4
.IX Item "uvoformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`UV\*(C'\fR as a unsigned octal integer.
.ie n .IP """uvsize""" 4
.el .IP "\f(CWuvsize\fR" 4
.IX Item "uvsize"
From \fIperlxv.U\fR:
.Sp
This variable is tha size of a \f(CW\*(C`UV\*(C'\fR up in bytes.
.ie n .IP """uvtype""" 4
.el .IP "\f(CWuvtype\fR" 4
.IX Item "uvtype"
From \fIperlxv.U\fR:
.Sp
This variable gotz nuff tha C type used fo' Perlz \f(CW\*(C`UV\*(C'\fR.
.ie n .IP """uvuformat""" 4
.el .IP "\f(CWuvuformat\fR" 4
.IX Item "uvuformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`UV\*(C'\fR as a unsigned decimal integer.
.ie n .IP """uvxformat""" 4
.el .IP "\f(CWuvxformat\fR" 4
.IX Item "uvxformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`UV\*(C'\fR as a unsigned hexadecimal integer up in lowercase abcdef.
.ie n .IP """uvXUformat""" 4
.el .IP "\f(CWuvXUformat\fR" 4
.IX Item "uvXUformat"
From \fIperlxvf.U\fR:
.Sp
This variable gotz nuff tha format strang used fo' printing
a Perl \f(CW\*(C`UV\*(C'\fR as a unsigned hexadecimal integer up in uppercase \f(CW\*(C`ABCDEF\*(C'\fR.
.SS "v"
.IX Subsection "v"
.ie n .IP """vaproto""" 4
.el .IP "\f(CWvaproto\fR" 4
.IX Item "vaproto"
From \fIvaproto.U\fR:
.Sp
This variable conditionally defines \f(CW\*(C`CAN_VAPROTO\*(C'\fR on systems supporting
prototype declaration of functions wit a variable number of
arguments, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See also prototype.
.ie n .IP """vendorarch""" 4
.el .IP "\f(CWvendorarch\fR" 4
.IX Item "vendorarch"
From \fIvendorarch.U\fR:
.Sp
This variable gotz nuff tha value of tha \f(CW\*(C`PERL_VENDORARCH\*(C'\fR symbol.
It may gotz a \fI~\fR on tha front.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place they own
architecture-dependent modulez n' extensions up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorarchexp""" 4
.el .IP "\f(CWvendorarchexp\fR" 4
.IX Item "vendorarchexp"
From \fIvendorarch.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorarch, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """vendorbin""" 4
.el .IP "\f(CWvendorbin\fR" 4
.IX Item "vendorbin"
From \fIvendorbin.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`VENDORBIN\*(C'\fR symbol.
It may gotz a \fI~\fR on tha front.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place additional
binaries up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorbinexp""" 4
.el .IP "\f(CWvendorbinexp\fR" 4
.IX Item "vendorbinexp"
From \fIvendorbin.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorbin, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """vendorhtml1dir""" 4
.el .IP "\f(CWvendorhtml1dir\fR" 4
.IX Item "vendorhtml1dir"
From \fIvendorhtml1dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory fo' html
pages.  It may gotz a \fI~\fR on tha front.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place they own
html pages up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorhtml1direxp""" 4
.el .IP "\f(CWvendorhtml1direxp\fR" 4
.IX Item "vendorhtml1direxp"
From \fIvendorhtml1dir.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorhtml1dir, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """vendorhtml3dir""" 4
.el .IP "\f(CWvendorhtml3dir\fR" 4
.IX Item "vendorhtml3dir"
From \fIvendorhtml3dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory fo' html
library pages.  It may gotz a \fI~\fR on tha front.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place they own
html pages fo' modulez n' extensions up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorhtml3direxp""" 4
.el .IP "\f(CWvendorhtml3direxp\fR" 4
.IX Item "vendorhtml3direxp"
From \fIvendorhtml3dir.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorhtml3dir, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """vendorlib""" 4
.el .IP "\f(CWvendorlib\fR" 4
.IX Item "vendorlib"
From \fIvendorlib.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`VENDORLIB\*(C'\fR symbol,
which is tha name of tha private library fo' dis package.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place they own
modulez up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorlib_stem""" 4
.el .IP "\f(CWvendorlib_stem\fR" 4
.IX Item "vendorlib_stem"
From \fIvendorlib.U\fR:
.Sp
This variable is \f(CW$vendorlibexp\fR wit any trailin version-specific component
removed. Y'all KNOW dat shit, muthafucka!  Da elements up in inc_version_list (\fIinc_version_list.U\fR) can
be tacked onto dis variable ta generate a list of directories ta search.
.ie n .IP """vendorlibexp""" 4
.el .IP "\f(CWvendorlibexp\fR" 4
.IX Item "vendorlibexp"
From \fIvendorlib.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorlib, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """vendorman1dir""" 4
.el .IP "\f(CWvendorman1dir\fR" 4
.IX Item "vendorman1dir"
From \fIvendorman1dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory fo' man1
pages.  It may gotz a \fI~\fR on tha front.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place they own
man1 pages up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorman1direxp""" 4
.el .IP "\f(CWvendorman1direxp\fR" 4
.IX Item "vendorman1direxp"
From \fIvendorman1dir.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorman1dir, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """vendorman3dir""" 4
.el .IP "\f(CWvendorman3dir\fR" 4
.IX Item "vendorman3dir"
From \fIvendorman3dir.U\fR:
.Sp
This variable gotz nuff tha name of tha directory fo' man3
pages.  It may gotz a \fI~\fR on tha front.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place they own
man3 pages up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorman3direxp""" 4
.el .IP "\f(CWvendorman3direxp\fR" 4
.IX Item "vendorman3direxp"
From \fIvendorman3dir.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorman3dir, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """vendorprefix""" 4
.el .IP "\f(CWvendorprefix\fR" 4
.IX Item "vendorprefix"
From \fIvendorprefix.U\fR:
.Sp
This variable holdz tha full absolute path of tha directory below
which tha vendor will install add-on packages.
See \f(CW\*(C`INSTALL\*(C'\fR fo' usage n' examples.
.ie n .IP """vendorprefixexp""" 4
.el .IP "\f(CWvendorprefixexp\fR" 4
.IX Item "vendorprefixexp"
From \fIvendorprefix.U\fR:
.Sp
This variable holdz tha full absolute path of tha directory below
which tha vendor will install add-on packages.  Derived from vendorprefix.
.ie n .IP """vendorscript""" 4
.el .IP "\f(CWvendorscript\fR" 4
.IX Item "vendorscript"
From \fIvendorscript.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`VENDORSCRIPT\*(C'\fR symbol.
It may gotz a \fI~\fR on tha front.
Da standard distribution will put not a god damn thang up in dis directory.
Vendors whoz ass distribute perl may wish ta place additional
executable scripts up in dis directory with
MakeMaker \fIMakefile.PL\fR \f(CW\*(C`INSTALLDIRS\*(C'\fR=vendor
or equivalent.  See \f(CW\*(C`INSTALL\*(C'\fR fo' details.
.ie n .IP """vendorscriptexp""" 4
.el .IP "\f(CWvendorscriptexp\fR" 4
.IX Item "vendorscriptexp"
From \fIvendorscript.U\fR:
.Sp
This variable is tha \fI~name\fR expanded version of vendorscript, so dat you
may use it directly up in Makefilez or shell scripts.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
From \fIpatchlevel.U\fR:
.Sp
Da full version number of dis package, like fuckin 5.6.1 (or 5_6_1).
This combines revision, patchlevel, n' subversion ta git the
full version number, includin any possible subversions.
This is suitable fo' use as a gangbangin' finger-lickin' directory name, n' hence is
filesystem dependent.
.ie n .IP """version_patchlevel_string""" 4
.el .IP "\f(CWversion_patchlevel_string\fR" 4
.IX Item "version_patchlevel_string"
From \fIpatchlevel.U\fR:
.Sp
This be a strang combinin version, subversion and
perl_patchlevel (if perl_patchlevel is non-zero).
It be typically suttin' like
\&'version 7 subversion 1'  or
\&'version 7 subversion 1 patchlevel 11224'
It be computed here ta avoid duplication of code up in \fImyconfig.SH\fR
and \fIlib/Config.pm\fR.
.ie n .IP """versiononly""" 4
.el .IP "\f(CWversiononly\fR" 4
.IX Item "versiononly"
From \fIversiononly.U\fR:
.Sp
If set, dis symbol indicates dat only tha version-specific
componentz of a perl installation should be installed.
This may be useful fo' bustin a test installation of a new
version without disturbin tha existin installation.
Settin versiononly is equivalent ta settin installperlz \-v option.
In particular, tha non-versioned scripts n' programs such as
a2p, c2ph, h2xs, pod2*, n' perldoc is not installed
(see \f(CW\*(C`INSTALL\*(C'\fR fo' a mo' complete list).  Nor is tha man
pages installed.
Usually, dis is undef.
.ie n .IP """vi""" 4
.el .IP "\f(CWvi\fR" 4
.IX Item "vi"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """voidflags""" 4
.el .IP "\f(CWvoidflags\fR" 4
.IX Item "voidflags"
From \fIvoidflags.U\fR:
.Sp
This variable gotz nuff tha eventual value of tha \f(CW\*(C`VOIDFLAGS\*(C'\fR symbol,
which indicates how tha fuck much support of tha void type is given by this
compila n' shit.  See \f(CW\*(C`VOIDFLAGS\*(C'\fR fo' mo' info.
.SS "x"
.IX Subsection "x"
.ie n .IP """xlibpth""" 4
.el .IP "\f(CWxlibpth\fR" 4
.IX Item "xlibpth"
From \fIlibpth.U\fR:
.Sp
This variable holdz extra path (space-separated) used ta find
libraries on dis platform, fo' example \f(CW\*(C`CPU\*(C'\fR\-specific libraries
(on multi\-\f(CW\*(C`CPU\*(C'\fR platforms) may be listed here.
.SS "y"
.IX Subsection "y"
.ie n .IP """yacc""" 4
.el .IP "\f(CWyacc\fR" 4
.IX Item "yacc"
From \fIyacc.U\fR:
.Sp
This variable holdz tha name of tha compila compila we
wanna use up in tha Makefile. Well shiiiit, it can be yacc, byacc, or bison \-y.
.ie n .IP """yaccflags""" 4
.el .IP "\f(CWyaccflags\fR" 4
.IX Item "yaccflags"
From \fIyacc.U\fR:
.Sp
This variable gotz nuff any additionizzle yacc flags desired by the
user n' shit.  It be up ta tha Makefile ta use all dis bullshit.
.SS "z"
.IX Subsection "z"
.ie n .IP """zcat""" 4
.el .IP "\f(CWzcat\fR" 4
.IX Item "zcat"
From \fILoc.U\fR:
.Sp
This variable is defined but not used by Configure.
Da value is tha empty strang n' aint useful.
.ie n .IP """zip""" 4
.el .IP "\f(CWzip\fR" 4
.IX Item "zip"
From \fILoc.U\fR:
.Sp
This variable is used internally by Configure ta determine the
full pathname (if any) of tha zip program.  Afta Configure runs,
the value is reset ta a plain \f(CW\*(C`zip\*(C'\fR n' aint useful.
.SH "GIT DATA"
.IX Header "GIT DATA"
Hype on tha git commit from which tha current perl binary was compiled
can be found up in tha variable \f(CW$Config::Git_Data\fR.  Da variable be a
structured strang dat looks suttin' like this:
.PP
.Vb 6
\&  git_commit_id=\*(Aqea0c2dbd5f5ac6845ecc7ec6696415bf8e27bd52\*(Aq
\&  git_describe=\*(AqGitLive\-blead\-1076\-gea0c2db\*(Aq
\&  git_branch=\*(Aqsmartmatch\*(Aq
\&  git_uncommitted_changes=\*(Aq\*(Aq
\&  git_commit_id_title=\*(AqCommit id:\*(Aq
\&  git_commit_date=\*(Aq2009\-05\-09 17:47:31 +0200\*(Aq
.Ve
.PP
Its format aint guaranteed not ta chizzle over time.
.SH "NOTE"
.IX Header "NOTE"
This module gotz nuff a phat example of how tha fuck ta use tie ta implement a
cache n' a example of how tha fuck ta cook up a tied variable readonly ta them
outside of dat shit.
