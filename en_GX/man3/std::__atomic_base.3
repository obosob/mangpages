" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::__atomic_base< _IntTp > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBstd::atomic< char >\fP, \fBstd::atomic< char16_t >\fP, \fBstd::atomic< char32_t >\fP, \fBstd::atomic< int >\fP, \fBstd::atomic< long >\fP, \fBstd::atomic< long long >\fP, \fBstd::atomic< short >\fP, \fBstd::atomic< signed char >\fP, \fBstd::atomic< unsigned char >\fP, \fBstd::atomic< unsigned int >\fP, \fBstd::atomic< unsigned long >\fP, \fBstd::atomic< unsigned long long >\fP, \fBstd::atomic< unsigned short >\fP, n' \fBstd::atomic< wchar_t >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__atomic_base\fP (const \fB__atomic_base\fP &)=delete"
.br
.ti -1c
.RI "constexpr \fB__atomic_base\fP (__int_type __i) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m1, \fBmemory_order\fP __m2) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m1, \fBmemory_order\fP __m2) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_strong\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m1, \fBmemory_order\fP __m2) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m1, \fBmemory_order\fP __m2) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "bool \fBcompare_exchange_weak\fP (__int_type &__i1, __int_type __i2, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBexchange\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "__int_type \fBexchange\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_add\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_add\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_and\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_and\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_or\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_or\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_sub\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_sub\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_xor\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "__int_type \fBfetch_xor\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.ti -1c
.RI "bool \fBis_lock_free\fP () const noexcept"
.br
.ti -1c
.RI "bool \fBis_lock_free\fP () const volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBload\fP (\fBmemory_order\fP __m=memory_order_seq_cst) const noexcept"
.br
.ti -1c
.RI "__int_type \fBload\fP (\fBmemory_order\fP __m=memory_order_seq_cst) const volatilenoexcept"
.br
.ti -1c
.RI "\fBoperator __int_type\fP () const noexcept"
.br
.ti -1c
.RI "\fBoperator __int_type\fP () const volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator&=\fP (__int_type __i) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator&=\fP (__int_type __i) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator++\fP (int) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator++\fP (int) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator++\fP () noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator++\fP () volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator+=\fP (__int_type __i) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator+=\fP (__int_type __i) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator--\fP (int) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator--\fP (int) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator--\fP () noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator--\fP () volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator-=\fP (__int_type __i) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator-=\fP (__int_type __i) volatilenoexcept"
.br
.ti -1c
.RI "\fB__atomic_base\fP & \fBoperator=\fP (const \fB__atomic_base\fP &)=delete"
.br
.ti -1c
.RI "\fB__atomic_base\fP & \fBoperator=\fP (const \fB__atomic_base\fP &) volatile=delete"
.br
.ti -1c
.RI "__int_type \fBoperator=\fP (__int_type __i) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator=\fP (__int_type __i) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator^=\fP (__int_type __i) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator^=\fP (__int_type __i) volatilenoexcept"
.br
.ti -1c
.RI "__int_type \fBoperator|=\fP (__int_type __i) noexcept"
.br
.ti -1c
.RI "__int_type \fBoperator|=\fP (__int_type __i) volatilenoexcept"
.br
.ti -1c
.RI "void \fBstore\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) noexcept"
.br
.ti -1c
.RI "void \fBstore\fP (__int_type __i, \fBmemory_order\fP __m=memory_order_seq_cst) volatilenoexcept"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _IntTp>struct std::__atomic_base< _IntTp >"
Base class fo' atomic integrals\&. 
.PP
Definizzle at line 117 of file atomic_base\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
