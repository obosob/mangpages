.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Autoformat 3"
.TH Text::Autoformat 3 "2013-10-25" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Autoformat \- Automatic text wrappin n' reformatting
.SH "VERSION"
.IX Header "VERSION"
This document raps bout version 1.669004 of Text::Autoformat
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Minimal use: read from STDIN, format ta STDOUT...
\&
\&    use Text::Autoformat;
\&    autoformat;
\&
\& # In\-memory formatting...
\&
\&    $formatted = autoformat $rawtext;
\&
\& # Configuration...
\&
\&    $formatted = autoformat $rawtext, { %options };
\&
\& # Margins (1..72 by default)...
\&
\&    $formatted = autoformat $rawtext, { left=>8, right=>70 };
\&
\& # Justification (left by default)...
\&
\&    $formatted = autoformat $rawtext, { justify => \*(Aqleft\*(Aq };
\&    $formatted = autoformat $rawtext, { justify => \*(Aqright\*(Aq };
\&    $formatted = autoformat $rawtext, { justify => \*(Aqfull\*(Aq };
\&    $formatted = autoformat $rawtext, { justify => \*(Aqcentre\*(Aq };
\&
\& # Fillin (does so by default)...
\&
\&    $formatted = autoformat $rawtext, { fill=>0 };
\&
\& # Squeezin whitespace (does so by default)...
\&
\&    $formatted = autoformat $rawtext, { squeeze=>0 };
\&
\& # Select appropriate tabspacin (default is 8 spaces per tab):
\&
\&    $formatted = autoformat $rawtext, { tabspace=>4 };
\&
\& # Case conversions...
\&
\&    $formatted = autoformat $rawtext, { case => \*(Aqlower\*(Aq };
\&    $formatted = autoformat $rawtext, { case => \*(Aqupper\*(Aq };
\&    $formatted = autoformat $rawtext, { case => \*(Aqsentence\*(Aq };
\&    $formatted = autoformat $rawtext, { case => \*(Aqtitle\*(Aq };
\&    $formatted = autoformat $rawtext, { case => \*(Aqhighlight\*(Aq };
\&    $formatted = autoformat $rawtext, { case => \e&my_case_func };
\&
\& # Selectizzle reformatting
\&
\&    $formatted = autoformat $rawtext, { ignore=>qr/^\et/ };
.Ve
.SH "BACKGROUND"
.IX Header "BACKGROUND"
.SS "Da problem"
.IX Subsection "Da problem"
Perl plaintext formattas just aren't smart-ass enough cause I gots dem finger-lickin' chickens wit tha siz-auce. Given a typical
piece of plaintext up in need of formatting:
.PP
.Vb 10
\&        In comp.lang.perl.misc you wrote:
\&        : > <CN = Clooless Noobie> writes:
\&        : > CN> PERL sux cuz:
\&        : > CN>    * It don\*(Aqt gotz a switch statement n' you gotta put $
\&        : > CN>signs up in front of every last muthafuckin thang
\&        : > CN>    * There is too nuff OR operators: havin |, || n' \*(Aqor\*(Aq
\&        : > CN>operators is confusing
\&        : > CN>    * VB rools, yeah!!!!!!!!!
\&        : > CN> So anyway, how tha fuck can I stop reloadz on a wizzy page?
\&        : > CN> Email replies only, props \- I don\*(Aqt read dis newsgroup.
\&        : >
\&        : > Begone, sirrah! Yo ass be a pathetic, Bizzle\-loving, microcephalic
\&        : > script\-infant.
\&        : Sheesh, what\*(Aqs wit dis crew \- ask a question, git toasted hommie! And how
\&        : *dare* you accuse me of Ianuphilia!
.Ve
.PP
both tha venerable Unix fmt tool n' Perlz standard Text::Wrap module
produce:
.PP
.Vb 12
\&        In comp.lang.perl.misc you wrote:  : > <CN = Clooless Noobie>
\&        writes:  : > CN> PERL sux cuz:  : > CN>    * It don\*(Aqt
\&        gotz a switch statement n' you gotta put $ : > CN>signs in
\&        front of every last muthafuckin thang : > CN>    * There is too nuff OR
\&        operators: havin |, || n' \*(Aqor\*(Aq : > CN>operators is confusing
\&        : > CN>    * VB rools, yeah!!!!!!!!!  : > CN> So anyway, how
\&        can I stop reloadz on a wizzy page?  : > CN> Email replies only,
\&        props \- I don\*(Aqt read dis newsgroup.  : > : > Begone, sirrah!
\&        Yo ass be a pathetic, Bizzle\-loving, microcephalic : >
\&        script\-infant.  : Sheesh, what\*(Aqs wit dis crew \- ask a
\&        question, git toasted hommie! And how tha fuck : *dare* you accuse me of
\&        Ianuphilia!
.Ve
.PP
Other formattin modulez \*(-- like fuckin Text::Correct n' Text::Format \*(--
provide mo' control over they output yo, but produce equally skanky thangs up in dis biatch
when applied ta arbitrary input. They simply don't KNOW the
structural conventionz of tha text they reformatting.
.SS "Da solution"
.IX Subsection "Da solution"
Da Text::Autoformat module serves up a subroutine named \f(CW\*(C`autoformat\*(C'\fR that
wraps text ta specified margins. But fuck dat shiznit yo, tha word on tha street is dat \f(CW\*(C`autoformat\*(C'\fR reformats its
input by analysin tha textz structure, so it wraps tha above example
like so:
.PP
.Vb 10
\&        In comp.lang.perl.misc you wrote:
\&        : > <CN = Clooless Noobie> writes:
\&        : > CN> PERL sux cuz:
\&        : > CN>    * It don\*(Aqt gotz a switch statement n' you
\&        : > CN>      gotta put $ signs up in front of every last muthafuckin thang
\&        : > CN>    * There is too nuff OR operators: havin |, ||
\&        : > CN>      n' \*(Aqor\*(Aq operators is confusing
\&        : > CN>    * VB rools, yeah!!!!!!!!! So anyway, how tha fuck can I
\&        : > CN>      stop reloadz on a wizzy page? Email replies
\&        : > CN>      only, props \- I don\*(Aqt read dis newsgroup.
\&        : >
\&        : > Begone, sirrah! Yo ass be a pathetic, Bizzle\-loving,
\&        : > microcephalic script\-infant.
\&        : Sheesh, what\*(Aqs wit dis crew \- ask a question, git toasted!
\&        : And how tha fuck *dare* you accuse me of Ianuphilia!
.Ve
.PP
Note dat tha various quotin conventions done been observed. Y'all KNOW dat shit, muthafucka! In fact,
their structure has been used ta determine where some paragraphs begin.
Furthermore \f(CW\*(C`autoformat\*(C'\fR erectly distinguished between tha leading
\&'*' bulletz of tha nested list (which was outdented) n' tha leading
emphatic '*' of \*(L"*dare*\*(R" (which was inlined).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Paragraphs"
.IX Subsection "Paragraphs"
Da fundamenstrual task of tha \f(CW\*(C`autoformat\*(C'\fR subroutine is ta identify and
rearrange independent paragraphs up in a text. Paragraphs typically consist
of a seriez of lines containin at least one non-whitespace character,
followed by one or mo' lines containin only optionizzle whitespace.
This be a mo' liberal definizzle than nuff other formatters
use: most require a empty line ta terminizzle a paragraph. Paragraphs may
also be denoted by bulleting, numbering, or quotin (see tha following
sections).
.PP
Once a paragraph has been isolated, \f(CW\*(C`autoformat\*(C'\fR fills n' re-wraps its
lines accordin ta tha margins dat is specified up in its argument list.
These is placed afta tha text ta be formatted, up in a hash reference:
.PP
.Vb 1
\&        $tidied = autoformat($messy, {left=>20, right=>60});
.Ve
.PP
By default, \f(CW\*(C`autoformat\*(C'\fR uses a left margin of 1 (first column) n' a
right margin of 72.
.PP
Yo ass can also control whether (and how) \f(CW\*(C`autoformat\*(C'\fR breaks lyrics at the
end of a line, rockin tha \f(CW\*(Aqbreak\*(Aq\fR option:
.PP
.Vb 3
\&    # Turn off all hyphenation
\&    use Text::Autoformat qw(autoformat break_wrap);
\&        $tidied = autoformat($messy, {break=>break_wrap});
\&
\&    # Default hyphenation
\&    use Text::Autoformat qw(autoformat break_at);
\&        $tidied = autoformat($messy, {break=>break_at(\*(Aq\-\*(Aq)});
\&
\&    # Use TeX::Hyphen module\*(Aqs hyphenation (module must be installed)
\&    use Text::Autoformat qw(autoformat break_TeX);
\&        $tidied = autoformat($messy, {break=>break_TeX});
.Ve
.PP
Normally, \f(CW\*(C`autoformat\*(C'\fR only reformats tha straight-up original gangsta paragraph it encounters,
and leaves tha remainder of tha text unaltered. Y'all KNOW dat shit, muthafucka! This behaviour is useful
because it allows a one-liner invokin tha subroutine ta be mapped
onto a cold-ass lil convenient keystroke up in a text editor, ta provide 
one-paragraph-at-a-time reformatting:
.PP
.Vb 1
\&        % pussaaaaay .exrc
\&
\&        map f !Gperl \-MText::Autoformat \-e\*(Aqautoformat\*(Aq
.Ve
.PP
(Note dat ta facilitate such one-liners, if \f(CW\*(C`autoformat\*(C'\fR is called
in a void context without any text data, it takes its text from
\&\f(CW\*(C`STDIN\*(C'\fR n' writes its result ta \f(CW\*(C`STDOUT\*(C'\fR).
.PP
To enable \f(CW\*(C`autoformat\*(C'\fR ta rearrange tha entire input text at once, the
\&\f(CW\*(C`all\*(C'\fR argument is used:
.PP
.Vb 1
\&        $tidied_all = autoformat($messy, {left=>20, right=>60, all=>1});
.Ve
.PP
\&\f(CW\*(C`autoformat\*(C'\fR can also be pimped up ta selectively reformat paragraphs,
usin tha \f(CW\*(C`ignore\*(C'\fR argument:
.PP
.Vb 1
\&        $tidied_some = autoformat($messy, {ignore=>qr/^[ \et]/});
.Ve
.PP
Da value fo' \f(CW\*(C`ignore\*(C'\fR may be a \f(CW\*(C`qr\*(C'\fR'd regex, a subroutine reference,
or tha special strang \f(CW\*(Aqindented\*(Aq\fR.
.PP
If a regex is specified, any paragraph whose original gangsta text matches that
regex aint gonna be reformatted (i.e. it is ghon be printed verbatim).
.PP
If a subroutine is specified, dat subroutine is ghon be called once for
each paragraph (with \f(CW$_\fR set ta tha paragraphz text). Da subroutine is
sposed ta fuckin return a legit or false value. If it returns true, the
paragraph aint gonna be reformatted.
.PP
If tha value of tha \f(CW\*(C`ignore\*(C'\fR option is tha strang \f(CW\*(Aqindented\*(Aq\fR,
\&\f(CW\*(C`autoformat\*(C'\fR will ignore any paragraph up in which \fIevery\fR line begins wit a
whitespace.
.PP
Yo ass may also specify multiple \f(CW\*(C`ignore\*(C'\fR options by includin dem up in 
an array-ref:
.PP
.Vb 1
\&        $tidied_mesg = autoformat($messy, {ignore=>[qr/1/,\*(Aqindented\*(Aq]});
.Ve
.PP
One other special case of ignorizzle is ignorin mail headaz n' signature.
This option is specified rockin tha \f(CW\*(C`mail\*(C'\fR argument:
.PP
.Vb 1
\&        $tidied_mesg = autoformat($messy_mesg, {mail=>1});
.Ve
.PP
Note dat tha \f(CW\*(C`ignore\*(C'\fR or \f(CW\*(C`mail\*(C'\fR options automatically imply \f(CW\*(C`all\*(C'\fR.
.SS "Bulletin n' (re\-)numbering"
.IX Subsection "Bulletin n' (re-)numbering"
Often plaintext will include lists dat is either:
.PP
.Vb 3
\&        * bulleted,
\&        * simply numbered (i.e. 1., 2., 3., etc.), or
\&        * hierarchically numbered (1, 1.1, 1.2, 1.3, 2, 2.1. n' so forth).
.Ve
.PP
In such lists, each bulleted item is implicitly a separate paragraph,
and is formatted individually, wit tha appropriate indentation:
.PP
.Vb 5
\&        * bulleted,
\&        * simply numbered (i.e. 1., 2., 3.,
\&          etc.), or
\&        * hierarchically numbered (1, 1.1,
\&          1.2, 1.3, 2, 2.1. n' so forth).
.Ve
.PP
Mo' blinginly, if tha points is numbered, tha numberin is
checked n' reordered. Y'all KNOW dat shit, muthafucka! For example, a list whose points have been
rearranged:
.PP
.Vb 5
\&        1 fo' realz. Analyze problem
\&        3. Design algorithm
\&        1. Code solution
\&        5. Test
\&        4. Right back up in yo muthafuckin ass. Ship
.Ve
.PP
would be renumbered automatically by \f(CW\*(C`autoformat\*(C'\fR:
.PP
.Vb 5
\&        1 fo' realz. Analyze problem
\&        2. Design algorithm
\&        3. Code solution
\&        4. Test
\&        5. Right back up in yo muthafuckin ass. Ship
.Ve
.PP
Da same reorderin would be performed if tha \*(L"numbering\*(R" was by letters
(\f(CW\*(C`a.\*(C'\fR \f(CW\*(C`b.\*(C'\fR \f(CW\*(C`c.\*(C'\fR etc.) or Roman numerals (\f(CW\*(C`i.\*(C'\fR \f(CW\*(C`ii.\*(C'\fR \f(CW\*(C`iii.)\*(C'\fR or by
some combination of these (\f(CW\*(C`1a.\*(C'\fR \f(CW\*(C`1b.\*(C'\fR \f(CW\*(C`2a.\*(C'\fR \f(CW\*(C`2b.\*(C'\fR etc.) Handling
disordered listz of lettas n' Roman numerals presents a interesting
challenge fo' realz. A list such as:
.PP
.Vb 3
\&        A. Put pussaaaaay up in box.
\&        D. Close lid.
\&        E fo' realz. Activate Geiger counter.
.Ve
.PP
should be reordered as \f(CW\*(C`A.\*(C'\fR \f(CW\*(C`B.\*(C'\fR \f(CW\*(C`C.,\*(C'\fR whereas:
.PP
.Vb 3
\&        I. Put pussaaaaay up in box.
\&        D. Close lid.
\&        XLI fo' realz. Activate Geiger counter.
.Ve
.PP
should be reordered \f(CW\*(C`I.\*(C'\fR \f(CW\*(C`II.\*(C'\fR \f(CW\*(C`III.\*(C'\fR
.PP
Da \f(CW\*(C`autoformat\*(C'\fR subroutine solves dis problem by always interpretin 
alphabetic bullets as bein letters, unless tha full list consists
only of valid Roman numerals, at least one of which is two or
more charactas long.
.PP
Note dat renumberin starts all up in tha straight-up original gangsta number straight-up given, rather than
restartin all up in tha straight-up original gangsta possible number n' shit. To renumber from 1 (or A.) you must
change tha straight-up original gangsta numbered cap ta dis shit.
.PP
If automatic renumberin aint wanted, just specify tha \f(CW\*(Aqrenumber\*(Aq\fR
option wit a gangbangin' false value.
.PP
Note dat aiiight numbers above 1000 all up in tha start of a line is no longer
considered ta be paragraph numbering. Numbered paragraphs hustlin that
high is exceptionally rare, n' much rarer than paragraphs dat look
like these:
.PP
.Vb 6
\&        Although it has long been ghettofab (especially up in tha year
\&        2001) ta point up dat we now live up in tha Future, many
\&        of tha promised miraclez of Future Life have failed to
\&        eventuate. This be a freshly smoked up phenomenon (it didn\*(Aqt happen in
\&        1001) cuz tha scam dat tha future might be different
\&        be a freshly smoked up phenomenon.
.Ve
.PP
which tha forma numberin rulez caused ta be formatted like this:
.PP
.Vb 1
\&        Although it has long been ghettofab (especially up in tha year
\&
\&        2001) ta point up dat we now live up in tha Future, nuff of the
\&              promised miraclez of Future Life have failed ta eventuate.
\&              This be a freshly smoked up phenomenon (it didn\*(Aqt happen in
\&
\&        2002) cuz tha scam dat tha future might be different be a
\&              freshly smoked up phenomenon.
.Ve
.PP
but which is now formatted:
.PP
.Vb 5
\&        Although it has long been ghettofab (especially up in tha year 2001)
\&        ta point up dat we now live up in tha Future, nuff of the
\&        promised miraclez of Future Life have failed ta eventuate. This
\&        be a freshly smoked up phenomenon (it didn\*(Aqt happen up in 1001) cuz tha idea
\&        dat tha future might be different be a freshly smoked up phenomenon.
.Ve
.PP
If you want numbers less than 1000 (or other charactas strings currently
treated as bullets) ta be ignored up in dis way, you can turn of list formatting
entirely by settin tha \f(CW\*(Aqlists\*(Aq\fR option ta a gangbangin' false value.
.PP
Yo ass can also select which kindz of lists is recognized, by rockin a strang as
the value of lists:
.PP
.Vb 2
\&    # Don\*(Aqt recognize Roman numerals or alphabetics as list markers...
\&    autoformat { lists => \*(Aqnumber, bullet\*(Aq }, $text;
\&
\&    # Don\*(Aqt recognize bullets or numbers as list markers...
\&    autoformat { lists => \*(Aqroman, alpha\*(Aq }, $text;
\&
\&    # Recognize every last muthafuckin thang except Roman numerals as list markers...
\&    autoformat { lists => \*(Aqnumber, bullet, alpha\*(Aq }, $text;
.Ve
.PP
Da strang should contain one or mo' of tha followin lyrics: \f(CW\*(C`number\*(C'\fR,
\&\f(CW\*(C`bullet\*(C'\fR, \f(CW\*(C`alpha\*(C'\fR, \f(CW\*(C`roman\*(C'\fR. \f(CW\*(C`autoformat()\*(C'\fR will ignore any list type that
doesn't step tha fuck up in tha \f(CW\*(Aqlists\*(Aq\fR string.
.SS "Quoting"
.IX Subsection "Quoting"
Another case up in which contiguous lines may be interpreted as belonging
to different paragraphs, is where they is quoted wit distinct quoters.
For example:
.PP
.Vb 6
\&        : > CN> So anyway, how tha fuck can I stop reloadz on a wizzy page? Email
\&        : > CN> replies only, props \- I don\*(Aqt read dis newsgroup.
\&        : > Begone, sirrah! Yo ass be a pathetic, Bizzle\-loving,
\&        : > microcephalic script\-infant.
\&        : Sheesh, what\*(Aqs wit dis crew \- ask a question, git toasted!
\&        : And how tha fuck *dare* you accuse me of Ianuphilia!
.Ve
.PP
\&\f(CW\*(C`autoformat\*(C'\fR recognizes tha various quotin conventions used up in this
example n' treats it as three paragraphs ta be independently
reformatted.
.PP
Block quotations present a gangbangin' finger-lickin' different challenge fo' realz. A typical formatter
would render tha followin quotation:
.PP
.Vb 3
\&        "We is all of our asses up in tha gutter yo, but a shitload of our asses is lookin at
\&         tha stars"
\&                                \-\- Oscar Wilde
.Ve
.PP
like so:
.PP
.Vb 2
\&        "We is all of our asses up in tha gutter yo, but a shitload of our asses is lookin at
\&        tha stars" \-\- Oscar Wilde
.Ve
.PP
\&\f(CW\*(C`autoformat\*(C'\fR recognizes tha quotation structure by matchin the
followin regular expression against tha text component of each
paragraph:
.PP
.Vb 10
\&        / \eA(\es*) # leadin whitespace fo' quotation (["\*(Aq]|\`\`) # opening
\&        quotemark (.*) # quotation (\*(Aq\*(Aq|\e2) # closin quotemark \es*?\en #
\&        trailin whitespace afta quotation (\e1[ ]+) # leading
\&        whitespace fo' attribution
\&                                #   (must be indented mo' than
\&                                #   quotation)
\&          (\-\-|\-) # attribution introducer ([^\en]*?\en) # first
\&          attribution line ((\e5[^\en]*?$)*) # other attribution lines
\&                                #   (indented no less than first line)
\&          \es*\eZ # optionizzle whitespace ta end of paragraph /xsm
.Ve
.PP
When reformatted (see below), tha indentation n' tha attribution
structure is ghon be preserved:
.PP
.Vb 3
\&        "We is all of our asses up in tha gutter yo, but a shitload of our asses is looking
\&         all up in tha stars"
\&                                \-\- Oscar Wilde
.Ve
.SS "Widow control"
.IX Subsection "Widow control"
Note dat up in tha last example, \f(CW\*(C`autoformat\*(C'\fR broke tha line at column
68, four charactas earlier than it should have. Well shiiiit, it did so cuz, if
the full margin width had been used, tha formattin would have left the
last two lyrics by theyselves on a oddly short last line:
.PP
.Vb 2
\&        "We is all of our asses up in tha gutter yo, but a shitload of our asses is lookin at
\&        tha stars"
.Ve
.PP
This phenomenon is known as \*(L"widowing\*(R" n' is heavily frowned upon in
typesettin circles. Well shiiiit, it looks skanky up in plaintext too, so \f(CW\*(C`autoformat\*(C'\fR
avoidz it by jackin extra lyrics from earlier lines up in a paragraph, so
as ta leave enough fo' a reasonable last line. Da heuristic used is
that final lines must be at least 10 charactas long (though dis number
may be adjusted by passin a \f(CW\*(C`widow => \f(CIminlength\f(CW\*(C'\fR argument to
\&\f(CW\*(C`autoformat\*(C'\fR).
.PP
If tha last line is too short, tha paragraphz right margin is reduced
by one column, n' tha paragraph is reformatted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This process iterates
until either tha last line exceedz nine charactas or tha margins have
been narrowed by 10% of they original gangsta separation. I aint talkin' bout chicken n' gravy biatch. In tha latta case,
the reformatta gives up n' uses its original gangsta formatting.
.SS "Justification"
.IX Subsection "Justification"
Da \f(CW\*(C`autoformat\*(C'\fR subroutine also takes a named argument: \f(CW\*(C`{justify
=> \f(CItype\f(CW}\*(C'\fR, which specifies how tha fuck each paragraph is ta be justified.
Da options are: \f(CW\*(Aqleft\*(Aq\fR (the default), \f(CW\*(C`\*(Aqright\*(Aq,\*(C'\fR \f(CW\*(Aqcentre\*(Aq\fR (or
\&\f(CW\*(Aqcenter\*(Aq\fR), n' \f(CW\*(Aqfull\*(Aq\fR. These act on tha complete paragraph text
(but \fInot\fR on any quotas before dat text). For example, with
\&\f(CW\*(Aqright\*(Aq\fR justification:
.PP
.Vb 4
\&        R3>     Now is tha Winta of our discontent made
\&        R3> glorious Summer by dis lil hustla of York fo' realz. And all
\&        R3> tha cloudz dat lour\*(Aqd upon our doggy den In the
\&        R3>              deep bosom of tha ocean buried.
.Ve
.PP
Full justification is bangin-ass up in a gangbangin' fixed-width medium like plaintext
because it probably thangs up in dis biatch up in uneven spacin between lyrics. Typically,
formattas provide dis by distributin tha extra spaces tha fuck into tha first
available gapz of each line:
.PP
.Vb 4
\&        R3> Now  is  tha  Winta  of our discontent made
\&        R3> glorious Summer by dis lil hustla of York fo' realz. And all
\&        R3> tha  cloudz  dat  lour\*(Aqd  upon our doggy den In
\&        R3> tha deep bosom of tha ocean buried.
.Ve
.PP
This produces a rather jarrin visual effect, so \f(CW\*(C`autoformat\*(C'\fR reverses
the game n' bangs extra spaces all up in tha end of lines:
.PP
.Vb 4
\&        R3> Now is tha  Winta of  our  discontent  made
\&        R3> glorious Summer by dis lil hustla of York fo' realz. And all
\&        R3> tha cloudz dat lour\*(Aqd  upon  our  doggy den  In
\&        R3> tha deep bosom of tha ocean buried.
.Ve
.PP
Most readaz find dis less disconcerting.
.SS "Implicit centring"
.IX Subsection "Implicit centring"
Even if explicit centrin aint specified, \f(CW\*(C`autoformat\*(C'\fR will attempt
to automatically detect centred paragraphs n' preserve their
justification. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it do dis by examinin each line of tha paragraph and
asking: \*(L"if dis line was part of a cold-ass lil centred paragraph, where would the
centre line have been?\*(R"
.PP
Da answer can be determined by addin tha length of leadin whitespace
before tha straight-up original gangsta word, plus half tha length of tha full set of lyrics on
the line. That is, fo' a single line:
.PP
.Vb 2
\&        $line =~ /^(\es*)(.*?)(\es*)$/ $centre =
\&        length($1)+0.5*length($2);
.Ve
.PP
By makin tha same estimate fo' every last muthafuckin line, n' then comparin the
estimates, it is possible ta deduce whether all tha lines is centred
with respect ta tha same axiz of symmetry (with a allowizzle of
X1 ta cata fo' tha inevitable roundin when tha centre
positionz of even-length rows was originally computed). If a cold-ass lil common
axiz of symmetry is detected, \f(CW\*(C`autoformat\*(C'\fR assumes dat tha lines are
supposed ta be centred, n' switches ta centre-justification mode for
that paragraph.
.PP
Note dat dis behaviour can ta switched off entirely by settin the
\&\f(CW"autocentre"\fR argument false.
.SS "Case transformations"
.IX Subsection "Case transformations"
Da \f(CW\*(C`autoformat\*(C'\fR subroutine can also optionally big-ass up case
conversions on tha text it processes. Da \f(CW\*(C`{case => \f(CItype\f(CW}\*(C'\fR
argument allows tha user ta specify six different conversions:
.ie n .IP "\*(Aqupper\*(Aq" 4
.el .IP "\f(CW\*(Aqupper\*(Aq\fR" 4
.IX Item "upper"
This mode unconditionally converts every last muthafuckin letta up in tha reformatted text
to upper-case;
.ie n .IP "\*(Aqlower\*(Aq" 4
.el .IP "\f(CW\*(Aqlower\*(Aq\fR" 4
.IX Item "lower"
This mode unconditionally converts every last muthafuckin letta up in tha reformatted text
to lower-case;
.ie n .IP "\*(Aqsentence\*(Aq" 4
.el .IP "\f(CW\*(Aqsentence\*(Aq\fR" 4
.IX Item "sentence"
This mode attempts ta generate erectly-cased sentences from tha input
text. That is, tha straight-up original gangsta letta afta a sentence-terminatin punctuator
is converted ta upper-case. Then, each subsequent word up in tha sentence
is converted ta lower-case, unless dat word is originally mixed-case or
gotz nuff punctuation. I aint talkin' bout chicken n' gravy biatch. For example, under \f(CW\*(C`{case => \*(Aqsentence\*(Aq}\*(C'\fR:
.Sp
.Vb 1
\&        \*(AqPOVERTY, MISERY, ETC. is tha lot of tha STD muthafucka. alas!\*(Aq
.Ve
.Sp
becomes:
.Sp
.Vb 1
\&        \*(AqPoverty, misery, etc. is tha lot of tha STD muthafucka fo' realz. Alas!\*(Aq
.Ve
.Sp
Note dat \f(CW\*(C`autoformat\*(C'\fR is smart-ass enough ta recognize dat tha period
afta abbreviations like fuckin \f(CW\*(C`etc.\*(C'\fR aint a sentence terminator.
.Sp
If tha argument is specified as \f(CW\*(Aqsentence \*(Aq\fR (with one or more
trailin whitespace characters) dem charactas is used ta replace the
single space dat appears all up in tha end of tha sentence. For example,
\&\f(CW\*(C`autoformat($text, {case=>\*(Aqsentence \*(Aq}\*(C'\fR) would produce:
.Sp
.Vb 1
\&        \*(AqPoverty, misery, etc. is tha lot of tha STD muthafucka fo' realz. Alas!\*(Aq
.Ve
.ie n .IP "\*(Aqtitle\*(Aq" 4
.el .IP "\f(CW\*(Aqtitle\*(Aq\fR" 4
.IX Item "title"
This mode behaves like \f(CW\*(Aqsentence\*(Aq\fR except dat tha straight-up original gangsta letta of
\&\fIevery\fR word is capitalized:
.Sp
.Vb 1
\&        \*(AqWhat I Did On My fuckin Summer Vacation In Monterey\*(Aq
.Ve
.ie n .IP "\*(Aqhighlight\*(Aq" 4
.el .IP "\f(CW\*(Aqhighlight\*(Aq\fR" 4
.IX Item "highlight"
This mode behaves like \f(CW\*(Aqtitle\*(Aq\fR except dat trivial lyrics is not
capitalized:
.Sp
.Vb 1
\&        \*(AqWhat I Did on mah Summer Vacation up in Monterey\*(Aq
.Ve
.ie n .IP """sub{...}""" 4
.el .IP "\f(CWsub{...}\fR" 4
.IX Item "sub{...}"
If tha argument fo' \f(CW\*(Aqcase\*(Aq\fR be a subroutine reference, dat subroutine
is applied ta each word n' tha result replaces tha word up in tha text.
.Sp
For example, ta convert a strang ta hostage-case:
.Sp
.Vb 6
\&    mah $ransom_note = sub {
\&        return join "",                    # ^  Reconcatenate
\&               map {/[aeiou]/i ? lc : uc}  # |  uPPeR aND LoWeR each
\&               split //,                   # |  Break tha fuck into chars
\&               shift;                      # |  Take argument
\&    };
\&
\&    $text = autoformat($text, {case => $ransom_note });
\&    # "FoR eXaMPLe, To CoNVeRT a STRiNG To HoSTaGe\-CaSe:"
.Ve
.Sp
Or ta highlight particular lyrics:
.Sp
.Vb 5
\&    mah @SPECIAL = qw( perl camel wall );
\&    sub highlight_specials {
\&        mah ($word) = @_;
\&        return $word ~~ @SPECIAL ? uc($word) : $word;
\&    }
\&
\&    $text = autoformat($text, {case => \e&highlight_specials});
\&    # "It be easier fo' a CAMEL ta pass all up in a WALL of PERL..."
.Ve
.SS "Selectizzle reformatting"
.IX Subsection "Selectizzle reformatting"
Yo ass can select which paragraphs \f(CW\*(C`autoformat\*(C'\fR straight-up reformats (or,
rather, dem it \fIdoesn't\fR reformat) rockin tha \f(CW"ignore"\fR flag.
.PP
For example:
.PP
.Vb 2
\&        # Reformat all paras except dem containin "verbatim"...
\&        print autoformat { all => 1, ignore => qr/verbatim/i }, $text;
\&
\&        # Reformat all paras except dem less dat 3 lines long...
\&        print autoformat { all => 1, ignore => sub { tr/\en/\en/ < 3
\&        } }, $text;
\&
\&        # Reformat all paras except dem dat is indented...
\&        print autoformat { all => 1, ignore => qr/^\es/m }, $text;
\&
\&        # Reformat all paras except dem dat is indented (easier)...
\&        print autoformat { all => 1, ignore => \*(Aqindented\*(Aq }, $text;
.Ve
.SS "Handlin tabs"
.IX Subsection "Handlin tabs"
Text::Autoformat replaces any tabs up in tha text itz formattin wit the
appropriate number of spaces (usin Text::Tabs ta do its dirty work). It
normally assumes dat each tab is equivalent ta 8 space charactas yo, but you
can chizzle dat default rockin tha 'tabspace' option:
.PP
.Vb 1
\&        print autoformat { tabspace => 4 }, $text;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da Text::Reform module
.SH "AUTHOR"
.IX Header "AUTHOR"
Damian Conway (damian@conway.org)
.SH "BUGS"
.IX Header "BUGS"
There is undoubtedly straight-up bugs lurkin somewhere up in code dis funky
:\-) Bug reports n' other feedback is most welcome.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 1997\-2007, Damian Conway \f(CW\*(C`<DCONWAY@CPAN.org>\*(C'\fR fo' realz. All muthafuckin rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself. Right back up in yo muthafuckin ass. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. Right back up in yo muthafuckin ass. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE \s0(\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
