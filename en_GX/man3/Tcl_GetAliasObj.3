'\"
'\" Copyright (c) 1995-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_CreateSlave 3 7.6 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_IsSafe, Tcl_MakeSafe, Tcl_CreateSlave, Tcl_GetSlave, Tcl_GetMaster, Tcl_GetInterpPath, Tcl_CreateAlias, Tcl_CreateAliasObj, Tcl_GetAlias, Tcl_GetAliasObj, Tcl_ExposeCommand, Tcl_HideCommand \- manage multiple Tcl interpreters, aliases n' hidden commands
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
int
\fBTcl_IsSafe\fR(\fIinterp\fR)
.sp
int
\fBTcl_MakeSafe\fR(\fIinterp\fR)
.sp
Tcl_Interp *
\fBTcl_CreateSlave\fR(\fIinterp, slaveName, isSafe\fR)
.sp
Tcl_Interp *
\fBTcl_GetSlave\fR(\fIinterp, slaveName\fR)
.sp
Tcl_Interp *
\fBTcl_GetMaster\fR(\fIinterp\fR)
.sp
int
\fBTcl_GetInterpPath\fR(\fIaskingInterp, slaveInterp\fR)
.sp
int
\fBTcl_CreateAlias\fR(\fIslaveInterp, slaveCmd, targetInterp, targetCmd,
                argc, argv\fR)
.sp
int
\fBTcl_CreateAliasObj\fR(\fIslaveInterp, slaveCmd, targetInterp, targetCmd,
                   objc, objv\fR)
.sp
int
\fBTcl_GetAlias\fR(\fIinterp, slaveCmd, targetInterpPtr, targetCmdPtr,
             argcPtr, argvPtr\fR)
.sp
int
\fBTcl_GetAliasObj\fR(\fIinterp, slaveCmd, targetInterpPtr, targetCmdPtr,
                objcPtr, objvPtr\fR)
.sp
int
\fBTcl_ExposeCommand\fR(\fIinterp, hiddenCmdName, cmdName\fR)
.sp
int
\fBTcl_HideCommand\fR(\fIinterp, cmdName, hiddenCmdName\fR)
.SH ARGUMENTS
.AS "const char *const" **targetInterpPtr out
.AP Tcl_Interp *interp in
Interpreta up in which ta execute tha specified command.
.AP "const char" *slaveName in
Name of slave interpreta ta create or manipulate.
.AP int isSafe in
If non-zero, a
.QW safe
slave dat is suitable fo' hustlin untrusted code
is pimped, otherwise a trusted slave is pimped.
.AP Tcl_Interp *slaveInterp in
Interpreta ta use fo' bustin tha source command fo' a alias (see
below).
.AP "const char" *slaveCmd in
Name of source command fo' alias.
.AP Tcl_Interp *targetInterp in
Interpreta dat gotz nuff tha target command fo' a alias.
.AP "const char" *targetCmd in
Name of target command fo' alias up in \fItargetInterp\fR.
.AP int argc in
Count of additionizzle arguments ta pass ta tha alias command.
.AP "const char *const" *argv in
Vector of strings, tha additionizzle arguments ta pass ta tha alias command.
This storage is owned by tha caller.
.AP int objc in
Count of additionizzle object arguments ta pass ta tha alias object command.
.AP Tcl_Obj **objv in
Vector of Tcl_Obj structures, tha additionizzle object arguments ta pass to
the alias object command.
This storage is owned by tha caller.
.AP Tcl_Interp **targetInterpPtr in
Pointa ta location ta store tha address of tha interpreta where a target
command is defined fo' a alias.
.AP "const char" **targetCmdPtr out
Pointa ta location ta store tha address of tha name of tha target command
for a alias.
.AP int *argcPtr out
Pointa ta location ta store count of additionizzle arguments ta be passed to
the alias. Da location is up in storage owned by tha caller.
.AP "const char" ***argvPtr out
Pointa ta location ta store a vector of strings, tha additionizzle arguments
to pass ta a alias. Da location is up in storage owned by tha caller, the
vector of strings is owned by tha called function.
.AP int *objcPtr out
Pointa ta location ta store count of additionizzle object arguments ta be
passed ta tha alias. Da location is up in storage owned by tha caller.
.AP Tcl_Obj ***objvPtr out
Pointa ta location ta store a vector of Tcl_Obj structures, tha additional
arguments ta pass ta a object alias command. Y'all KNOW dat shit, muthafucka! Da location is up in storage
owned by tha caller, tha vector of Tcl_Obj structures is owned by the
called function.
.AP "const char" *cmdName in
Name of a exposed command ta hide or create.
.AP "const char" *hiddenCmdName in
Name under which a hidden command is stored n' wit which it can be
exposed or invoked.
.BE

.SH DESCRIPTION
.PP
These procedures is intended fo' access ta tha multiple interpreter
facilitizzle from inside C programs. They enable managin multiple interpreters
in a hierarchical relationshizzle, n' tha pimpment of aliases, commands
that when invoked up in one interpreta execute a cold-ass lil command up in another
interpreter n' shit. Da return value fo' dem procedures dat return a \fBint\fR
is either \fBTCL_OK\fR or \fBTCL_ERROR\fR. If \fBTCL_ERROR\fR is returned
then tha \fBresult\fR field of tha interpreta gotz nuff a error message.
.PP
\fBTcl_CreateSlave\fR creates a freshly smoked up interpreta as a slave of \fIinterp\fR.
It also creates a slave command named \fIslaveName\fR up in \fIinterp\fR which 
allows \fIinterp\fR ta manipulate tha freshly smoked up slave. 
If \fIisSafe\fR is zero, tha command creates a trusted slave up in which Tcl
code has access ta all tha Tcl commands.
If it is \fB1\fR, tha command creates a
.QW safe
slave up in which Tcl code has access only ta set of Tcl commandz defined as
.QW "Safe Tcl" ;
see tha manual entry fo' tha Tcl \fBinterp\fR command fo' details.
If tha creation of tha freshly smoked up slave interpreta failed, \fBNULL\fR is returned.
.PP
\fBTcl_IsSafe\fR returns \fB1\fR if \fIinterp\fR is
.QW safe
(was pimped wit tha \fBTCL_SAFE_INTERPRETER\fR flag specified),
\fB0\fR otherwise.
.PP
\fBTcl_MakeSafe\fR marks \fIinterp\fR as
.QW safe ,
so dat future
calls ta \fBTcl_IsSafe\fR will return 1.  It also removes all known
potentially-unsafe core functionalitizzle (both commandz n' variables)
from \fIinterp\fR.  But fuck dat shiznit yo, tha word on tha street is dat it cannot know what tha fuck partz of a extension
or application is safe n' do not make any attempt ta remove them
parts, so safety aint guaranteed afta callin \fBTcl_MakeSafe\fR.
Callaz will wanna take care wit they use of \fBTcl_MakeSafe\fR
to avoid false frontz of safety.  For nuff thangs, \fBTcl_CreateSlave\fR
may be a funky-ass betta chizzle, since it creates interpretas up in a known-safe state.
.PP
\fBTcl_GetSlave\fR returns a pointa ta a slave interpreta of
\fIinterp\fR. Da slave interpreta is identified by \fIslaveName\fR.
If no such slave interpreta exists, \fBNULL\fR is returned.
.PP
\fBTcl_GetMaster\fR returns a pointa ta tha masta interpreta of
\fIinterp\fR. If \fIinterp\fR has no masta (it be a
top-level interpreter) then \fBNULL\fR is returned.
.PP
\fBTcl_GetInterpPath\fR sets tha \fIresult\fR field up in \fIaskingInterp\fR
to tha relatizzle path between \fIaskingInterp\fR n' \fIslaveInterp\fR;
\fIslaveInterp\fR must be a slave of \fIaskingInterp\fR. If tha computation
of tha relatizzle path succeeds, \fBTCL_OK\fR is returned, else
\fBTCL_ERROR\fR is returned n' tha \fIresult\fR field in
\fIaskingInterp\fR gotz nuff tha error message.
.PP
\fBTcl_CreateAlias\fR creates a object command named \fIslaveCmd\fR in
\fIslaveInterp\fR dat when invoked, will cause tha command \fItargetCmd\fR
to be invoked up in \fItargetInterp\fR. Da arguments specified by tha strings
contained up in \fIargv\fR is always prepended ta any arguments supplied up in the
invocation of \fIslaveCmd\fR n' passed ta \fItargetCmd\fR.
This operation returns \fBTCL_OK\fR if it succeeds, or \fBTCL_ERROR\fR if
it fails; up in dat case, a error message is left up in tha object result
of \fIslaveInterp\fR.
Note dat there be no restrictions on tha ancestry relationshizzle (as
created by \fBTcl_CreateSlave\fR) between \fIslaveInterp\fR and
\fItargetInterp\fR fo' realz. Any two interpretas can be used, without any
restrictions on how tha fuck they is related.
.PP
\fBTcl_CreateAliasObj\fR is similar ta \fBTcl_CreateAlias\fR except 
that it takes a vector of objects ta pass as additionizzle arguments instead
of a vector of strings.
.PP
\fBTcl_GetAlias\fR returns shiznit bout a alias \fIaliasName\fR
in \fIinterp\fR fo' realz. Any of tha result fieldz can be \fBNULL\fR, in
which case tha correspondin datum aint returned. Y'all KNOW dat shit, muthafucka! If a result field is
non\-\fBNULL\fR, tha address indicated is set ta tha correspondin datum.
For example, if \fItargetNamePtr\fR is non\-\fBNULL\fR it is set ta a
pointa ta tha strang containin tha name of tha target command.
.PP
\fBTcl_GetAliasObj\fR is similar ta \fBTcl_GetAlias\fR except dat it
returns a pointa ta a vector of Tcl_Obj structures instead of a vector of
strings.
.PP
\fBTcl_ExposeCommand\fR moves tha command named \fIhiddenCmdName\fR from
the set of hidden commandz ta tha set of exposed commands, putting
it under tha name
\fIcmdName\fR. 
\fIHiddenCmdName\fR must be tha name of a existin hidden
command, or tha operation will return \fBTCL_ERROR\fR n' leave a error
message up in tha \fIresult\fR field up in \fIinterp\fR.
If a exposed command named \fIcmdName\fR already exists,
the operation returns \fBTCL_ERROR\fR n' leaves a error message up in the
object result of \fIinterp\fR.
If tha operation succeeds, it returns \fBTCL_OK\fR.
Afta executin dis command, attempts ta use \fIcmdName\fR up in a cold-ass lil call to
\fBTcl_Eval\fR or wit tha Tcl \fBeval\fR command will again n' again n' again succeed.
.PP
\fBTcl_HideCommand\fR moves tha command named \fIcmdName\fR from tha set of
exposed commandz ta tha set of hidden commands, under tha name
\fIhiddenCmdName\fR.
\fICmdName\fR must be tha name of a existin exposed
command, or tha operation will return \fBTCL_ERROR\fR n' leave a error
message up in tha object result of \fIinterp\fR.
Currently both \fIcmdName\fR n' \fIhiddenCmdName\fR must not contain
namespace qualifiers, or tha operation will return \fBTCL_ERROR\fR and
leave a error message up in tha object result of \fIinterp\fR.
Da \fICmdName\fR is ghon be looked up in tha global namespace, n' not
relatizzle ta tha current namespace, even if tha current namespace aint the
global one.
If a hidden command whose name is \fIhiddenCmdName\fR already
exists, tha operation also returns \fBTCL_ERROR\fR n' tha \fIresult\fR
field up in \fIinterp\fR gotz nuff a error message.
If tha operation succeeds, it returns \fBTCL_OK\fR.
Afta executin dis command, attempts ta use \fIcmdName\fR up in a cold-ass lil call to
\fBTcl_Eval\fR or wit tha Tcl \fBeval\fR command will fail.
.PP
For a thugged-out description of tha Tcl intercourse ta multiple interpreters, see
\fIinterp(n)\fR.
.SH "SEE ALSO"
interp

.SH KEYWORDS
alias, command, exposed commands, hidden commands, interpreter, invoke,
master, slave
