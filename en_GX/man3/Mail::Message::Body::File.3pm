.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Body::File 3"
.TH Mail::Message::Body::File 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Body::File \- body of a message temporarily stored up in a gangbangin' file
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Body::File
\&   be a Mail::Message::Body
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& See Mail::Message::Body
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da body (content) of a message can be stored up in various ways.  In this
documentation you find tha description of extra functionalitizzle you have
when a message is stored up in a gangbangin' file.
.PP
Storin a whole message be a gangbangin' file is useful when tha body is large.  Although
access all up in a gangbangin' file is slower, it is savin a shitload of memory.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.ie n .IP "overload: \fB""""\fR()" 4
.el .IP "overload: \fB``''\fR()" 4
.IX Item "overload: """"()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Body
.IP "overload: \fB'==' n' '!='\fR()" 4
.IX Item "overload: '==' n' '!='()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Body
.IP "overload: \fB@{}\fR()" 4
.IX Item "overload: @{}()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Body
.IP "overload: \fBbool\fR()" 4
.IX Item "overload: bool()"
See \*(L"\s-1OVERLOADED\*(R"\s0 up in Mail::Message::Body
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBclone\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR()" 4
.IX Item "$obj->clone()"
See \*(L"Constructors\*(R" up in Mail::Message::Body
.IP "Mail::Message::Body::File\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Message::Body::File->new(OPTIONS)"
.Vb 10
\& \-Option           \-\-Defined up in         \-\-Default
\&  based_on           Mail::Message::Body  undef
\&  charset            Mail::Message::Body  \*(AqPERL\*(Aq or <undef>
\&  checked            Mail::Message::Body  <false>
\&  content_id         Mail::Message::Body  undef
\&  data               Mail::Message::Body  undef
\&  description        Mail::Message::Body  undef
\&  disposizzle        Mail::Message::Body  undef
\&  eol                Mail::Message::Body  \*(AqNATIVE\*(Aq
\&  file               Mail::Message::Body  undef
\&  log                Mail::Reporta       \*(AqWARNINGS\*(Aq
\&  message            Mail::Message::Body  undef
\&  mime_type          Mail::Message::Body  \*(Aqtext/plain\*(Aq
\&  modified           Mail::Message::Body  <false>
\&  trace              Mail::Reporta       \*(AqWARNINGS\*(Aq
\&  transfer_encodin  Mail::Message::Body  \*(Aqnone\*(Aq
.Ve
.RS 4
.IP "based_on => \s-1BODY\s0" 2
.IX Item "based_on => BODY"
.PD 0
.IP "charset => CHARSET|'\s-1PERL\s0'" 2
.IX Item "charset => CHARSET|'PERL'"
.IP "checked => \s-1BOOLEAN\s0" 2
.IX Item "checked => BOOLEAN"
.IP "content_id => \s-1STRING\s0" 2
.IX Item "content_id => STRING"
.IP "data => ARRAY-OF-LINES | \s-1STRING\s0" 2
.IX Item "data => ARRAY-OF-LINES | STRING"
.IP "description => STRING|FIELD" 2
.IX Item "description => STRING|FIELD"
.IP "disposizzle => STRING|FIELD" 2
.IX Item "disposizzle => STRING|FIELD"
.IP "eol => '\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'|'\s-1NATIVE\s0'" 2
.IX Item "eol => 'CR'|'LF'|'CRLF'|'NATIVE'"
.IP "file => FILENAME|FILEHANDLE|IOHANDLE" 2
.IX Item "file => FILENAME|FILEHANDLE|IOHANDLE"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "message => \s-1MESSAGE\s0" 2
.IX Item "message => MESSAGE"
.IP "mime_type => STRING|FIELD|MIME" 2
.IX Item "mime_type => STRING|FIELD|MIME"
.IP "modified => \s-1BOOLEAN\s0" 2
.IX Item "modified => BOOLEAN"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "transfer_encodin => STRING|FIELD" 2
.IX Item "transfer_encodin => STRING|FIELD"
.RE
.RS 4
.RE
.PD
.SS "Constructin a funky-ass body"
.IX Subsection "Constructin a funky-ass body"
.ie n .IP "$obj\->\fBattach\fR(\s-1MESSAGES, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBattach\fR(\s-1MESSAGES, OPTIONS\s0)" 4
.IX Item "$obj->attach(MESSAGES, OPTIONS)"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Construct
.ie n .IP "$obj\->\fBcheck\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcheck\fR()" 4
.IX Item "$obj->check()"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBconcatenate\fR(\s-1COMPONENTS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBconcatenate\fR(\s-1COMPONENTS\s0)" 4
.IX Item "$obj->concatenate(COMPONENTS)"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Construct
.ie n .IP "$obj\->\fBdecoded\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdecoded\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->decoded(OPTIONS)"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBencode\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->encode(OPTIONS)"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBencoded\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBencoded\fR()" 4
.IX Item "$obj->encoded()"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBeol\fR(['\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'|'\s-1NATIVE\s0'])" 4
.el .IP "\f(CW$obj\fR\->\fBeol\fR(['\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'|'\s-1NATIVE\s0'])" 4
.IX Item "$obj->eol(['CR'|'LF'|'CRLF'|'NATIVE'])"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBforeachLine\fR(\s-1CODE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforeachLine\fR(\s-1CODE\s0)" 4
.IX Item "$obj->foreachLine(CODE)"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Construct
.ie n .IP "$obj\->\fBstripSignature\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBstripSignature\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->stripSignature(OPTIONS)"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Construct
.ie n .IP "$obj\->\fBunify\fR(\s-1BODY\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBunify\fR(\s-1BODY\s0)" 4
.IX Item "$obj->unify(BODY)"
See \*(L"Constructin a funky-ass body\*(R" up in Mail::Message::Body::Encode
.SS "Da body"
.IX Subsection "Da body"
.ie n .IP "$obj\->\fBisDelayed\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDelayed\fR()" 4
.IX Item "$obj->isDelayed()"
See \*(L"Da body\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBisMultipart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisMultipart\fR()" 4
.IX Item "$obj->isMultipart()"
See \*(L"Da body\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBisNested\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisNested\fR()" 4
.IX Item "$obj->isNested()"
See \*(L"Da body\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBmessage\fR([\s-1MESSAGE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR([\s-1MESSAGE\s0])" 4
.IX Item "$obj->message([MESSAGE])"
See \*(L"Da body\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBpartNumberOf\fR(\s-1PART\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBpartNumberOf\fR(\s-1PART\s0)" 4
.IX Item "$obj->partNumberOf(PART)"
See \*(L"Da body\*(R" up in Mail::Message::Body
.SS "Bout tha payload"
.IX Subsection "Bout tha payload"
.ie n .IP "$obj\->\fBcharset\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcharset\fR()" 4
.IX Item "$obj->charset()"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBchecked\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBchecked\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->checked([BOOLEAN])"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBcontentId\fR([STRING|FIELD])" 4
.el .IP "\f(CW$obj\fR\->\fBcontentId\fR([STRING|FIELD])" 4
.IX Item "$obj->contentId([STRING|FIELD])"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBdescription\fR([STRING|FIELD])" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR([STRING|FIELD])" 4
.IX Item "$obj->description([STRING|FIELD])"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBdisposition\fR([STRING|FIELD])" 4
.el .IP "\f(CW$obj\fR\->\fBdisposition\fR([STRING|FIELD])" 4
.IX Item "$obj->disposition([STRING|FIELD])"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBdispositionFilename\fR([\s-1DIRECTORY\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdispositionFilename\fR([\s-1DIRECTORY\s0])" 4
.IX Item "$obj->dispositionFilename([DIRECTORY])"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBisBinary\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisBinary\fR()" 4
.IX Item "$obj->isBinary()"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBisText\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisText\fR()" 4
.IX Item "$obj->isText()"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBmimeType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmimeType\fR()" 4
.IX Item "$obj->mimeType()"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBnrLines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnrLines\fR()" 4
.IX Item "$obj->nrLines()"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBtransferEncoding\fR([STRING|FIELD])" 4
.el .IP "\f(CW$obj\fR\->\fBtransferEncoding\fR([STRING|FIELD])" 4
.IX Item "$obj->transferEncoding([STRING|FIELD])"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBtype\fR([STRING|FIELD])" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR([STRING|FIELD])" 4
.IX Item "$obj->type([STRING|FIELD])"
See \*(L"Bout tha payload\*(R" up in Mail::Message::Body
.SS "Access ta tha payload"
.IX Subsection "Access ta tha payload"
.ie n .IP "$obj\->\fBendsOnNewline\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBendsOnNewline\fR()" 4
.IX Item "$obj->endsOnNewline()"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBfile\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfile\fR()" 4
.IX Item "$obj->file()"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBlines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlines\fR()" 4
.IX Item "$obj->lines()"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR([\s-1FILEHANDLE\s0])" 4
.IX Item "$obj->print([FILEHANDLE])"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBprintEscapedFrom\fR(\s-1FILEHANDLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprintEscapedFrom\fR(\s-1FILEHANDLE\s0)" 4
.IX Item "$obj->printEscapedFrom(FILEHANDLE)"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBstring\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR()" 4
.IX Item "$obj->string()"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBstripTrailingNewline\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstripTrailingNewline\fR()" 4
.IX Item "$obj->stripTrailingNewline()"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->write(OPTIONS)"
See \*(L"Access ta tha payload\*(R" up in Mail::Message::Body
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBaddTransferEncHandlez\fR(\s-1NAME,\s0 CLASS|OBJECT)" 4
.el .IP "\f(CW$obj\fR\->\fBaddTransferEncHandlez\fR(\s-1NAME,\s0 CLASS|OBJECT)" 4
.IX Item "$obj->addTransferEncHandlez(NAME, CLASS|OBJECT)"
.PD 0
.IP "Mail::Message::Body::File\->\fBaddTransferEncHandlez\fR(\s-1NAME,\s0 CLASS|OBJECT)" 4
.IX Item "Mail::Message::Body::File->addTransferEncHandlez(NAME, CLASS|OBJECT)"
.PD
See \*(L"Internals\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBcontentInfoFrom\fR(\s-1HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcontentInfoFrom\fR(\s-1HEAD\s0)" 4
.IX Item "$obj->contentInfoFrom(HEAD)"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBcontentInfoTo\fR(\s-1HEAD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcontentInfoTo\fR(\s-1HEAD\s0)" 4
.IX Item "$obj->contentInfoTo(HEAD)"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBfileLocation\fR([\s-1BEGIN,END\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBfileLocation\fR([\s-1BEGIN,END\s0])" 4
.IX Item "$obj->fileLocation([BEGIN,END])"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBgetTransferEncHandlez\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBgetTransferEncHandlez\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->getTransferEncHandlez(TYPE)"
See \*(L"Internals\*(R" up in Mail::Message::Body::Encode
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBload\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBload\fR()" 4
.IX Item "$obj->load()"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR([\s-1BOOLEAN\s0])" 4
.IX Item "$obj->modified([BOOLEAN])"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBmoveLocation\fR([\s-1DISTANCE\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBmoveLocation\fR([\s-1DISTANCE\s0])" 4
.IX Item "$obj->moveLocation([DISTANCE])"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBread\fR(\s-1PARSER, HEAD, BODYTYPE\s0 [,CHARS [,LINES]])" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(\s-1PARSER, HEAD, BODYTYPE\s0 [,CHARS [,LINES]])" 4
.IX Item "$obj->read(PARSER, HEAD, BODYTYPE [,CHARS [,LINES]])"
See \*(L"Internals\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBtempFilename\fR([\s-1FILENAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtempFilename\fR([\s-1FILENAME\s0])" 4
.IX Item "$obj->tempFilename([FILENAME])"
Returns tha name of tha temporary file which is used ta store dis body.
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Message::Body
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Message::Body::File\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Message::Body::File->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Message::Body::File\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Message::Body::File->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Message::Body::File\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Message::Body::File->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Da temporary file be automatically removed when tha body is
not required no mo'.
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot write ta temporary body file $filename: $!" 4
.el .IP "Error: Cannot write ta temporary body file \f(CW$filename:\fR $!" 4
.IX Item "Error: Cannot write ta temporary body file $filename: $!"
Da message body is ta be stored up in a temporary file (probably cuz it be a
pimpin' body) yo, but fo' tha indicated reason, dis file cannot be pimped.
.ie n .IP "Warning: Charset $name aint known" 4
.el .IP "Warning: Charset \f(CW$name\fR aint known" 4
.IX Item "Warning: Charset $name aint known"
Da encodin or decodin of a message body encountas a cold-ass lil characta set which
is not understood by Perlz Encode module.
.ie n .IP "Warning: No decoder defined fo' transfer encodin $name." 4
.el .IP "Warning: No decoder defined fo' transfer encodin \f(CW$name\fR." 4
.IX Item "Warning: No decoder defined fo' transfer encodin $name."
Da data (message body) is encoded up in a way which aint currently understood,
therefore no decodin (or recoding) can take place.
.ie n .IP "Warning: No encoder defined fo' transfer encodin $name." 4
.el .IP "Warning: No encoder defined fo' transfer encodin \f(CW$name\fR." 4
.IX Item "Warning: No encoder defined fo' transfer encodin $name."
Da data (message body) has been decoded yo, but tha required encodin is
unknown. I aint talkin' bout chicken n' gravy biatch.  Da decoded data is returned.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Unable ta read file $filename fo' message body file: $!" 4
.el .IP "Error: Unable ta read file \f(CW$filename\fR fo' message body file: $!" 4
.IX Item "Error: Unable ta read file $filename fo' message body file: $!"
A Mail::Message::Body::File object is ta be pimped from a named file yo, but
it is impossible ta read dat file ta retrieve tha lines within. I aint talkin' bout chicken n' gravy biatch.  Therefore,
no copy ta a temporary file can be made.
.ie n .IP "Warning: Unknown line terminator $eol ignored" 4
.el .IP "Warning: Unknown line terminator \f(CW$eol\fR ignored" 4
.IX Item "Warning: Unknown line terminator $eol ignored"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
