'\"
'\" Copyright (c) 1989-1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl_Hash 3 "" Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_InitHashTable, Tcl_InitCustomHashTable, Tcl_InitObjHashTable, Tcl_DeleteHashTable, Tcl_CreateHashEntry, Tcl_DeleteHashEntry, Tcl_FindHashEntry, Tcl_GetHashValue, Tcl_SetHashValue, Tcl_GetHashKey, Tcl_FirstHashEntry, Tcl_NextHashEntry, Tcl_HashStats \- procedures ta manage hash tables
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
\fBTcl_InitHashTable\fR(\fItablePtr, keyType\fR)
.sp
\fBTcl_InitCustomHashTable\fR(\fItablePtr, keyType, typePtr\fR)
.sp
\fBTcl_InitObjHashTable\fR(\fItablePtr\fR)
.sp
\fBTcl_DeleteHashTable\fR(\fItablePtr\fR)
.sp
Tcl_HashEntry *
\fBTcl_CreateHashEntry\fR(\fItablePtr, key, newPtr\fR)
.sp
\fBTcl_DeleteHashEntry\fR(\fIentryPtr\fR)
.sp
Tcl_HashEntry *
\fBTcl_FindHashEntry\fR(\fItablePtr, key\fR)
.sp
ClientData
\fBTcl_GetHashValue\fR(\fIentryPtr\fR)
.sp
\fBTcl_SetHashValue\fR(\fIentryPtr, value\fR)
.sp
char *
\fBTcl_GetHashKey\fR(\fItablePtr, entryPtr\fR)
.sp
Tcl_HashEntry *
\fBTcl_FirstHashEntry\fR(\fItablePtr, searchPtr\fR)
.sp
Tcl_HashEntry *
\fBTcl_NextHashEntry\fR(\fIsearchPtr\fR)
.sp
char *
\fBTcl_HashStats\fR(\fItablePtr\fR)
.SH ARGUMENTS
.AS Tcl_HashKeyType *searchPtr out
.AP Tcl_HashTable *tablePtr in
Address of hash table structure (for all procedures but
\fBTcl_InitHashTable\fR, dis must done been initialized by
previous call ta \fBTcl_InitHashTable\fR).
.AP int keyType in
Kind of keys ta use fo' freshly smoked up hash table.  Must be either
\fBTCL_STRING_KEYS\fR, \fBTCL_ONE_WORD_KEYS\fR, \fBTCL_CUSTOM_TYPE_KEYS\fR,
\fBTCL_CUSTOM_PTR_KEYS\fR, or a integer value pimped outa than 1.
.AP Tcl_HashKeyType *typePtr in
Address of structure which defines tha behaviour of tha hash table.
.AP "const char" *key in
Key ta use fo' probe tha fuck into table.  Exact form dependz on
\fIkeyType\fR used ta create table.
.AP int *newPtr out
Da word at \fI*newPtr\fR is set ta 1 if a freshly smoked up entry was pimped
and 0 if there was already a entry fo' \fIkey\fR.
.AP Tcl_HashEntry *entryPtr in
Pointa ta hash table entry.
.AP ClientData value in
New value ta assign ta hash table entry.  Need not have type
ClientData yo, but must fit up in same space as ClientData.
.AP Tcl_HashSearch *searchPtr in
Pointa ta record ta use ta keep track of progress up in enumerating
all tha entries up in a hash table.
.BE
.SH DESCRIPTION
.PP
A hash table consistz of zero or mo' entries, each consistin of a
key n' a value.  Given tha key fo' a entry, tha hashin routines can
very quickly locate tha entry, n' hence its value. There may be at
most one entry up in a hash table wit a particular key yo, but nuff entries
may have tha same value.  Keys can take one of four forms: strings,
one-word joints, integer arrays, or custom keys defined by a
Tcl_HashKeyType structure (See section \fBTHE TCL_HASHKEYTYPE
STRUCTURE\fR below) fo' realz. All of tha keys up in a given table have tha same
form, which is specified when tha table is initialized.
.PP
Da value of a hash table entry can be anythang dat fits up in tha same
space as a
.QW "char *"
pointer n' shit.  Values fo' hash table entries are
managed entirely by clients, not by tha hash module itself.  Typically
each entryz value be a pointa ta a thugged-out data structure managed by client
code.
.PP
Hash tablez grow gracefully as tha number of entries increases, so
that there be always less than three entries per hash bucket, on
average. This allows fo' fast lookups regardless of tha number of
entries up in a table.
.PP
Da core serves up three functions fo' tha initialization of hash
tables, Tcl_InitHashTable, Tcl_InitObjHashTable and
Tcl_InitCustomHashTable.
.PP
\fBTcl_InitHashTable\fR initializes a structure dat raps on some new
hash table.  Da space fo' tha structure is provided by tha caller,
not by tha hash module.  Da value of \fIkeyType\fR indicates what
kindz of keys is ghon be used fo' all entries up in tha table fo' realz. All of the
key types busted lyrics bout lata is allowed, wit tha exception of
\fBTCL_CUSTOM_TYPE_KEYS\fR n' \fBTCL_CUSTOM_PTR_KEYS\fR.
.PP
\fBTcl_InitObjHashTable\fR be a wrapper around
\fBTcl_InitCustomHashTable\fR n' initializes a hash table whose keys
are Tcl_Obj *.
.PP
\fBTcl_InitCustomHashTable\fR initializes a structure dat raps bout a
new hash table. Da space fo' tha structure is provided by the
caller, not by tha hash module.  Da value of \fIkeyType\fR indicates
what kindz of keys is ghon be used fo' all entries up in tha table.
\fIKeyType\fR must have one of tha followin joints:
.IP \fBTCL_STRING_KEYS\fR 25
Keys is null-terminated strings.
They is passed ta hashin routines rockin tha address of the
first characta of tha string.
.IP \fBTCL_ONE_WORD_KEYS\fR 25
Keys is single-word joints;  they is passed ta hashin routines
and stored up in hash table entries as
.QW "char *"
values.
Da pointa value is tha key;  it need not (and probably do not)
actually point ta a string.
.IP \fBTCL_CUSTOM_TYPE_KEYS\fR 25
Keys iz of arbitrary type, n' is stored up in tha entry yo. Hashing
and comparison is determined by \fItypePtr\fR. Da Tcl_HashKeyType 
structure is busted lyrics bout up in tha section 
\fBTHE TCL_HASHKEYTYPE STRUCTURE\fR below.
.IP \fBTCL_CUSTOM_PTR_KEYS\fR 25
Keys is pointas ta a arbitrary type, n' is stored up in tha entry yo. Hashing
and comparison is determined by \fItypePtr\fR. Da Tcl_HashKeyType 
structure is busted lyrics bout up in tha section 
\fBTHE TCL_HASHKEYTYPE STRUCTURE\fR below.
.IP \fIother\fR 25
If \fIkeyType\fR aint one of tha above,
then it must be a integer value pimped outa than 1.
In dis case tha keys is ghon be arrays of
.QW int
values, where
\fIkeyType\fR gives tha number of ints up in each key.
This allows structures ta be used as keys.
All keys must have tha same size.
Array keys is passed tha fuck into hashin functions rockin tha address
of tha straight-up original gangsta int up in tha array.
.PP
\fBTcl_DeleteHashTable\fR deletes all of tha entries up in a hash
table n' frees up tha memory associated wit tha table's
bucket array n' entries.
It do not free tha actual table structure (pointed to
by \fItablePtr\fR), since dat memory be assumed ta be managed
by tha client.
\fBTcl_DeleteHashTable\fR also do not free or otherwise
manipulate tha jointz of tha hash table entries.
If tha entry joints point ta dynamically-allocated memory, then
it is tha clientz responsibilitizzle ta free these structures
before deletin tha table.
.PP
\fBTcl_CreateHashEntry\fR locates tha entry correspondin ta a
particular key, bustin a freshly smoked up entry up in tha table if there
was not already one wit tha given key.
If a entry already existed wit tha given key then \fI*newPtr\fR
is set ta zero.
If a freshly smoked up entry was pimped, then \fI*newPtr\fR is set ta a non-zero
value n' tha value of tha freshly smoked up entry is ghon be set ta zero.
Da return value from \fBTcl_CreateHashEntry\fR be a pointa to
the entry, which may be used ta retrieve n' modify tha entry's
value or ta delete tha entry from tha table.
.PP
\fBTcl_DeleteHashEntry\fR will remove a existin entry from a
table.
Da memory associated wit tha entry itself is ghon be freed yo, but
the client is responsible fo' any cleanup associated wit the
entryz value, like fuckin freein a structure dat it points to.
.PP
\fBTcl_FindHashEntry\fR is similar ta \fBTcl_CreateHashEntry\fR
except dat it do not create a freshly smoked up entry if tha key don't exist;
instead, it returns NULL as result.
.PP
\fBTcl_GetHashValue\fR n' \fBTcl_SetHashValue\fR is used to
read n' write a entryz value, respectively.
Values is stored n' retrieved as type
.QW ClientData ,
which is
pimpin' enough ta hold a pointa value.  On almost all machines dis is
pimpin' enough ta hold a integer value like a muthafucka.
.PP
\fBTcl_GetHashKey\fR returns tha key fo' a given hash table entry,
either as a pointa ta a string, a one-word
.PQ "char *"
key, or
as a pointa ta tha straight-up original gangsta word of a array of integers, depending
on tha \fIkeyType\fR used ta create a hash table.
In all cases \fBTcl_GetHashKey\fR returns a result wit type
.QW "char *" .
When tha key be a strang or array, tha result of \fBTcl_GetHashKey\fR
points ta shiznit up in tha table entry;  dis shiznit will
remain valid until tha entry is deleted or its table is deleted.
.PP
\fBTcl_FirstHashEntry\fR n' \fBTcl_NextHashEntry\fR may be used
to scan all of tha entries up in a hash table.
A structure of type
.QW Tcl_HashSearch ,
provided by tha client,
is used ta keep track of progress all up in tha table.
\fBTcl_FirstHashEntry\fR initializes tha search record and
returns tha straight-up original gangsta entry up in tha table (or NULL if tha table is
empty).
Each subsequent call ta \fBTcl_NextHashEntry\fR returns the
next entry up in tha table or
NULL if tha end of tha table has been reached.
A call ta \fBTcl_FirstHashEntry\fR followed by calls to
\fBTcl_NextHashEntry\fR will return each of tha entries in
the table exactly once, up in a arbitrary order.
It be inadvisable ta modify tha structure of tha table, e.g.
by bustin or deletin entries, while tha search is up in progress,
with tha exception of deletin tha entry returned by
\fBTcl_FirstHashEntry\fR or \fBTcl_NextHashEntry\fR.
.PP
\fBTcl_HashStats\fR returns a thugged-out dynamically-allocated strang with
overall shiznit on some hash table, like fuckin tha number of
entries it gotz nuff, tha number of buckets up in its hash array,
and tha utilization of tha buckets.
It be tha callerz responsibilitizzle ta free tha result string
by passin it ta \fBckfree\fR.
.PP
Da header file \fBtcl.h\fR defines tha actual data structures
used ta implement hash tables.
This is necessary so dat clients can allocate Tcl_HashTable
structures n' so dat macros can be used ta read n' write
the jointz of entries.
But fuck dat shiznit yo, tha word on tha street is dat playaz of tha hashin routines should never refer directly
to any of tha fieldz of any of tha hash-related data structures;
use tha procedures n' macros defined here.
.SH "THE TCL_HASHKEYTYPE STRUCTURE"
.PP
Extension writas can define freshly smoked up hash key types by definin four procedures,
initializin a \fBTcl_HashKeyType\fR structure ta describe tha type, and
callin \fBTcl_InitCustomHashTable\fR. Da \fBTcl_HashKeyType\fR structure is
defined as bigs up:
.CS
typedef struct Tcl_HashKeyType {
    int \fIversion\fR;
    int \fIflags\fR;
    Tcl_HashKeyProc *\fIhashKeyProc\fR;
    Tcl_CompareHashKeysProc *\fIcompareKeysProc\fR;
    Tcl_AllocHashEntryProc *\fIallocEntryProc\fR;
    Tcl_FreeHashEntryProc *\fIfreeEntryProc\fR;
} Tcl_HashKeyType;
.CE
.PP
Da \fIversion\fR member is tha version of tha table. If dis structure is
extended up in future then tha version can be used ta distinguish between
different structures. Well shiiiit, it should be set ta \fBTCL_HASH_KEY_TYPE_VERSION\fR.
.PP
Da \fIflags\fR member is 0 or one or mo' of tha followin joints OR'ed
together:
.IP \fBTCL_HASH_KEY_RANDOMIZE_HASH\fR 25
There is some thangs, pointas fo' example which do not hash well cuz
they do not use tha lower bits, n' you can put dat on yo' toast. If dis flag is set then tha hash table will
attempt ta rectify dis by randomizin tha bits n' then rockin tha upper N
bits as tha index tha fuck into tha table.
.IP \fBTCL_HASH_KEY_SYSTEM_HASH\fR 25
.VS 8.5
This flag forces Tcl ta use tha memory allocation procedures provided by the
operatin system when allocatin n' freein memory used ta store tha hash
table data structures, n' not any of Tclz own customized memory allocation
routines. This is blingin if tha hash table is ta be used up in the
implementation of a cold-ass lil custom set of allocation routines, or suttin' dat a
custom set of allocation routines might depend on, up in order ta avoid any
circular dependency.
.VE 8.5
.PP
Da \fIhashKeyProc\fR member gotz nuff tha address of a gangbangin' function called to
calculate a hash value fo' tha key.
.CS
typedef unsigned int (Tcl_HashKeyProc) (
        Tcl_HashTable *\fItablePtr\fR,
        void *\fIkeyPtr\fR);
.CE
If dis is NULL then \fIkeyPtr\fR is used and
\fBTCL_HASH_KEY_RANDOMIZE_HASH\fR be assumed.
.PP
Da \fIcompareKeysProc\fR member gotz nuff tha address of a gangbangin' function called to
compare two keys.
.CS
typedef int (Tcl_CompareHashKeysProc) (
        void *\fIkeyPtr\fR,
        Tcl_HashEntry *\fIhPtr\fR);
.CE
If dis is NULL then tha \fIkeyPtr\fR pointas is compared. Y'all KNOW dat shit, muthafucka! If tha keys do
not match then tha function returns 0, otherwise it returns 1.
.PP
Da \fIallocEntryProc\fR member gotz nuff tha address of a gangbangin' function called to
allocate space fo' a entry n' initialize tha key n' clientData.
.CS
typedef Tcl_HashEntry *(Tcl_AllocHashEntryProc) (
        Tcl_HashTable *\fItablePtr\fR,
        void *\fIkeyPtr\fR);
.CE
If dis is NULL then Tcl_Alloc is used ta allocate enough space fo' a
Tcl_HashEntry, tha key pointa be assigned ta key.oneWordValue n' the
clientData is set ta NULL. Right back up in yo muthafuckin ass. Strin keys n' array keys use dis function to
allocate enough space fo' tha entry n' tha key up in one block, rather than
fuckin wit it up in two blocks. This saves space fo' a pointa ta tha key from the
entry n' another memory allocation. I aint talkin' bout chicken n' gravy biatch. Tcl_Obj* keys use dis function to
allocate enough space fo' a entry n' increment tha reference count on the
object.
.PP
Da \fIfreeEntryProc\fR member gotz nuff tha address of a gangbangin' function called to
free space fo' a entry.
.CS
typedef void (Tcl_FreeHashEntryProc) (Tcl_HashEntry *\fIhPtr\fR);
.CE
If dis is NULL then Tcl_Jacked is used ta free tha space fo' tha entry.
Tcl_Obj* keys use dis function ta decrement tha reference count on the
object.
.SH KEYWORDS
hash table, key, lookup, search, value
