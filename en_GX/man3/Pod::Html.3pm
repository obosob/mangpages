.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Html 3pm"
.TH Pod::Html 3pm "2014-10-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Html \- module ta convert pod filez ta HTML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Pod::Html;
\&    pod2html([options]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Converts filez from pod format (see perlpod) ta \s-1HTML\s0 format.  It
can automatically generate indexes n' cross-references, n' it keeps
a cache of thangs it knows how tha fuck ta cross-reference.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "pod2html"
.IX Subsection "pod2html"
.Vb 7
\&    pod2html("pod2html",
\&             "\-\-podpath=lib:ext:pod:vms",
\&             "\-\-podroot=/usr/src/perl",
\&             "\-\-htmlroot=/perl/nmanual",
\&             "\-\-recurse",
\&             "\-\-infile=foo.pod",
\&             "\-\-outfile=/perl/nmanual/foo.html");
.Ve
.PP
pod2html takes tha followin arguments:
.IP "backlink" 4
.IX Item "backlink"
.Vb 1
\&    \-\-backlink
.Ve
.Sp
Turns every last muthafuckin \f(CW\*(C`head1\*(C'\fR headin tha fuck into a link back ta tha top of tha page.
By default, no backlinks is generated.
.IP "cachedir" 4
.IX Item "cachedir"
.Vb 1
\&    \-\-cachedir=name
.Ve
.Sp
Creates tha directory cache up in tha given directory.
.IP "css" 4
.IX Item "css"
.Vb 1
\&    \-\-css=stylesheet
.Ve
.Sp
Specify tha \s-1URL\s0 of a cold-ass lil cascadin steez sheet.  Also disablez all \s-1HTML/CSS
\&\s0\f(CW\*(C`style\*(C'\fR attributes dat is output by default (to avoid conflicts).
.IP "flush" 4
.IX Item "flush"
.Vb 1
\&    \-\-flush
.Ve
.Sp
Flushes tha directory cache.
.IP "header" 4
.IX Item "header"
.Vb 2
\&    \-\-header
\&    \-\-noheader
.Ve
.Sp
Creates header n' foota blocks containin tha text of tha \f(CW\*(C`NAME\*(C'\fR
section. I aint talkin' bout chicken n' gravy biatch.  By default, no headaz is generated.
.IP "help" 4
.IX Item "help"
.Vb 1
\&    \-\-help
.Ve
.Sp
Displays tha usage message.
.IP "htmldir" 4
.IX Item "htmldir"
.Vb 1
\&    \-\-htmldir=name
.Ve
.Sp
Sets tha directory ta which all cross references up in tha resulting
html file is ghon be relative. Not passin dis causes all links ta be
absolute since dis is tha value dat  drops some lyrics ta Pod::Html tha root of tha 
documentation tree.
.Sp
Do not use dis n' \-\-htmlroot up in tha same call ta pod2html; they are
mutually exclusive.
.IP "htmlroot" 4
.IX Item "htmlroot"
.Vb 1
\&    \-\-htmlroot=name
.Ve
.Sp
Sets tha base \s-1URL\s0 fo' tha \s-1HTML\s0 files.  When cross-references is made,
the \s-1HTML\s0 root is prepended ta tha \s-1URL.\s0
.Sp
Do not use dis if relatizzle links is desired: use \-\-htmldir instead.
.Sp
Do not pass both dis n' \-\-htmldir ta pod2html; they is mutually
exclusive.
.IP "index" 4
.IX Item "index"
.Vb 2
\&    \-\-index
\&    \-\-noindex
.Ve
.Sp
Generate a index all up in tha top of tha \s-1HTML\s0 file.  This is tha default
behaviour.
.IP "infile" 4
.IX Item "infile"
.Vb 1
\&    \-\-infile=name
.Ve
.Sp
Specify tha pod file ta convert.  Input is taken from \s-1STDIN\s0 if no
infile is specified.
.IP "outfile" 4
.IX Item "outfile"
.Vb 1
\&    \-\-outfile=name
.Ve
.Sp
Specify tha \s-1HTML\s0 file ta create.  Output goes ta \s-1STDOUT\s0 if no outfile
is specified.
.IP "poderrors" 4
.IX Item "poderrors"
.Vb 2
\&    \-\-poderrors
\&    \-\-nopoderrors
.Ve
.Sp
Include a \*(L"\s-1POD ERRORS\*(R"\s0 section up in tha outfile if there was any \s-1POD \s0
errors up in tha infile. This section is included by default.
.IP "podpath" 4
.IX Item "podpath"
.Vb 1
\&    \-\-podpath=name:...:name
.Ve
.Sp
Specify which subdirectoriez of tha podroot contain pod filez whose
\&\s-1HTML\s0 converted forms can be linked ta up in cross references.
.IP "podroot" 4
.IX Item "podroot"
.Vb 1
\&    \-\-podroot=name
.Ve
.Sp
Specify tha base directory fo' findin library pods. Default is the
current hustlin directory.
.IP "quiet" 4
.IX Item "quiet"
.Vb 2
\&    \-\-quiet
\&    \-\-noquiet
.Ve
.Sp
Don't display \fImostly harmless\fR warnin lyrics.  These lyrics
will be displayed by default.  But dis aint tha same as \f(CW\*(C`verbose\*(C'\fR
mode.
.IP "recurse" 4
.IX Item "recurse"
.Vb 2
\&    \-\-recurse
\&    \-\-norecurse
.Ve
.Sp
Recurse tha fuck into subdirectories specified up in podpath (default behaviour).
.IP "title" 4
.IX Item "title"
.Vb 1
\&    \-\-title=title
.Ve
.Sp
Specify tha title of tha resultin \s-1HTML\s0 file.
.IP "verbose" 4
.IX Item "verbose"
.Vb 2
\&    \-\-verbose
\&    \-\-noverbose
.Ve
.Sp
Display progress lyrics.  By default, they won't be displayed.
.SS "htmlify"
.IX Subsection "htmlify"
.Vb 1
\&    htmlify($heading);
.Ve
.PP
Converts a pod section justification ta a suitable section justification
for \s-1HTML.\s0 Note dat we keep spaces n' special charactas except
\&\f(CW\*(C`", ?\*(C'\fR (Netscape problem) n' tha hyphen (writerz problem...).
.SS "anchorify"
.IX Subsection "anchorify"
.Vb 1
\&    anchorify(@heading);
.Ve
.PP
Similar ta \f(CW\*(C`htmlify()\*(C'\fR yo, but turns non-alphanumerics tha fuck into underscores.  Note
that \f(CW\*(C`anchorify()\*(C'\fR aint exported by default.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Uses \f(CW$Config{pod2html}\fR ta setup default options.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Green, <marcgreen@cpan.org>.
.PP
Original Gangsta version by Tomothy Christiansen, <tchrist@perl.com>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlpod
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is distributed under tha Artistic License.
