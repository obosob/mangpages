.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::DOM::Document 3"
.TH XML::DOM::Document 3 "2001-08-26" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::DOM::Document \- An XML document node up in XML::DOM
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::DOM::Document extendz XML::DOM::Node.
.PP
It be tha main root of tha \s-1XML\s0 document structure as returned by 
XML::DOM::Parser::parse n' XML::DOM::Parser::parsefile.
.PP
Since elements, text nodes, comments, processin instructions, etc.
cannot exist outside tha context of a Document, tha Document intercourse
also gotz nuff tha factory methodz needed ta create these objects, n' you can put dat on yo' toast. The
Node objects pimped gotz a getOwnerDocument method which associates
them wit tha Document within whose context they was pimped.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "getDocumentElement" 4
.IX Item "getDocumentElement"
This be a cold-ass lil convenience method dat allows direct access to
the lil pimp node dat is tha root Element of tha document.
.IP "getDoctype" 4
.IX Item "getDoctype"
Da Document Type Declaration (see DocumentType) associated
with dis document. For \s-1HTML\s0 documents as well as \s-1XML\s0
documents without a thugged-out document type declaration dis returns
undef. Da \s-1DOM\s0 Level 1 do not support editin tha Document
Type Declaration.
.Sp
\&\fBNot In \s-1DOM\s0 Spec\fR: This implementation allows editin tha doctype. 
See \fIXML::DOM::ignoreReadOnly\fR fo' details.
.IP "getImplementation" 4
.IX Item "getImplementation"
Da DOMImplementation object dat handlez dis document fo' realz. A
\&\s-1DOM\s0 application may use objects from multiple implementations.
.IP "createElement (tagName)" 4
.IX Item "createElement (tagName)"
Creates a element of tha type specified. Y'all KNOW dat shit, muthafucka! Note dat the
instizzle returned implements tha Element intercourse, so
attributes can be specified directly on tha returned object.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha tagName do not conform ta tha \s-1XML\s0 spec.
.RE
.RS 4
.RE
.IP "createTextNode (data)" 4
.IX Item "createTextNode (data)"
Creates a Text node given tha specified string.
.IP "createComment (data)" 4
.IX Item "createComment (data)"
Creates a Comment node given tha specified string.
.IP "createCDATASection (data)" 4
.IX Item "createCDATASection (data)"
Creates a CDATASection node given tha specified string.
.IP "createAttribute (name [, value [, specified ]])" 4
.IX Item "createAttribute (name [, value [, specified ]])"
Creates a Attr of tha given name. Note dat tha Attr
instizzle can then be set on a Element rockin tha setAttribute method.
.Sp
\&\fBNot In \s-1DOM\s0 Spec\fR: Da \s-1DOM\s0 Spec do not allow passin tha value or tha 
specified property up in dis method. Y'all KNOW dat shit, muthafucka! In dis implementation they is optional.
.Sp
Parameters:
 \fIvalue\fR     Da attributez value. Right back up in yo muthafuckin ass. See Attr::setValue fo' details.
              If tha value aint supplied, tha specified property is set ta 0.
 \fIspecified\fR Whether tha attribute value was specified or whether tha default
              value was used. Y'all KNOW dat shit, muthafucka! If not supplied, itz assumed ta be 1.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha name do not conform ta tha \s-1XML\s0 spec.
.RE
.RS 4
.RE
.IP "createProcessingInstruction (target, data)" 4
.IX Item "createProcessingInstruction (target, data)"
Creates a ProcessingInstruction node given tha specified name n' data strings.
.Sp
Parameters:
 \fItarget\fR  Da target part of tha processin instruction.
 \fIdata\fR    Da data fo' tha node.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha target do not conform ta tha \s-1XML\s0 spec.
.RE
.RS 4
.RE
.IP "createDocumentFragment" 4
.IX Item "createDocumentFragment"
Creates a empty DocumentFragment object.
.IP "createEntityReference (name)" 4
.IX Item "createEntityReference (name)"
Creates a EntityReference object.
.SS "Additionizzle methodz not up in tha \s-1DOM\s0 Spec"
.IX Subsection "Additionizzle methodz not up in tha DOM Spec"
.IP "getXMLDecl n' setXMLDecl (xmlDecl)" 4
.IX Item "getXMLDecl n' setXMLDecl (xmlDecl)"
Returns tha XMLDecl fo' dis Document or undef if none was specified.
Note dat XMLDecl aint part of tha list of lil pimp nodes.
.IP "setDoctype (doctype)" 4
.IX Item "setDoctype (doctype)"
Sets or replaces tha DocumentType. 
\&\fB\s-1NOTE\s0\fR: Don't use appendLil Pimp or insertBefore ta set tha DocumentType.
Even though doctype is ghon be part of tha list of lil pimp nodes, it is handled
specially.
.IP "getDefaultAttrValue (elem, attr)" 4
.IX Item "getDefaultAttrValue (elem, attr)"
Returns tha default attribute value as a strang or undef, if none be available.
.Sp
Parameters:
 \fIelem\fR    Da element tagName.
 \fIattr\fR    Da attribute name.
.IP "getEntitizzle (name)" 4
.IX Item "getEntitizzle (name)"
Returns tha Entitizzle wit tha specified name.
.IP "createXMLDecl (version, encoding, standalone)" 4
.IX Item "createXMLDecl (version, encoding, standalone)"
Creates a XMLDecl object fo' realz. All parametas may be undefined.
.IP "createDocumentType (name, sysId, pubId)" 4
.IX Item "createDocumentType (name, sysId, pubId)"
Creates a DocumentType object. Right back up in yo muthafuckin ass. SysId n' pubId may be undefined.
.IP "createNotation (name, base, sysId, pubId)" 4
.IX Item "createNotation (name, base, sysId, pubId)"
Creates a freshly smoked up Notation object. Consider rockin 
XML::DOM::DocumentType::addNotation!
.IP "createEntitizzle (parameter, notationName, value, sysId, pubId, ndata)" 4
.IX Item "createEntitizzle (parameter, notationName, value, sysId, pubId, ndata)"
Creates a Entitizzle object. Consider rockin XML::DOM::DocumentType::addEntity!
.IP "createElementDecl (name, model)" 4
.IX Item "createElementDecl (name, model)"
Creates a ElementDecl object.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha element name (tagName) do not conform ta tha \s-1XML\s0 spec.
.RE
.RS 4
.RE
.IP "createAttlistDecl (name)" 4
.IX Item "createAttlistDecl (name)"
Creates a AttlistDecl object.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha element name (tagName) do not conform ta tha \s-1XML\s0 spec.
.RE
.RS 4
.RE
.IP "expandEntitizzle (entitizzle [, parameter])" 4
.IX Item "expandEntitizzle (entitizzle [, parameter])"
Expandz tha specified entitizzle or parameta entitizzle (if parameter=1) n' returns
its value as a string, or undef if tha entitizzle do not exist.
(Da entitizzle name should not contain tha '%', '&' or ';' delimiters.)
.IP "check ( [$checker] )" 4
.IX Item "check ( [$checker] )"
Uses tha specified XML::Checker ta validate tha document.
If no XML::Checker is supplied, a freshly smoked up XML::Checker is pimped.
See XML::Checker fo' details.
.IP "check_sax ( [$checker] )" 4
.IX Item "check_sax ( [$checker] )"
Similar ta \fIcheck()\fR except it uses tha \s-1SAX\s0 intercourse ta XML::Checker instead of 
the expat intercourse. This method may disappear or replace \fIcheck()\fR at some time.
.IP "createChecker ()" 4
.IX Item "createChecker ()"
Creates a XML::Checker based on tha documentz \s-1DTD.\s0
Da \f(CW$checker\fR can be reused ta check any elements within tha document.
Smoke a freshly smoked up XML::Checker whenever tha \s-1DOCTYPE\s0 section of tha document 
is altered!
