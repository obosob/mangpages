.TH "getsockcreatecon" "3" "24 September 2008" "dwalsh@redhat.com" "SELinux API documentation"
.SH "NAME"
getsockcreatecon, setsockcreatecon \- git or set tha SELinux securitizzle context used fo' bustin a freshly smoked up labeled sockets
.
.SH "SYNOPSIS"
.B #include <selinux/selinux.h>
.sp
.BI "int getsockcreatecon(security_context_t *" con );
.sp
.BI "int getsockcreatecon_raw(security_context_t *" con );
.sp
.BI "int setsockcreatecon(security_context_t "context );
.sp
.BI "int setsockcreatecon_raw(security_context_t "context );
.
.SH "DESCRIPTION"
.BR getsockcreatecon ()
retrieves tha context used fo' bustin a freshly smoked up labeled network socket.
This returned context should be freed with
.BR freecon (3)
if non-NULL.
.BR getsockcreatecon ()
sets *con ta NULL if no sockcreate context has been explicitly
set by tha program (i.e. rockin tha default policy behavior).

.BR setsockcreatecon ()
sets tha context used fo' bustin a freshly smoked up labeled network sockets
NULL can be passed to
.BR setsockcreatecon ()
to reset ta tha default policy behavior.
Da sockcreate context be automatically reset afta tha next
.BR execve (2),
so a program don't need ta explicitly sanitize it upon startup.

.BR setsockcreatecon ()
can be applied prior ta library
functions dat internally big-ass up a file creation,
in order ta set a file context on tha objects.

.BR getsockcreatecon_raw ()
and
.BR setsockcreatecon_raw ()
behave identically ta they non-raw counterparts but do not big-ass up context
translation.

.B Note:
Signal handlezs dat big-ass up a
.BR setsockcreatecon ()
must take care to
save, reset, n' restore tha sockcreate context ta avoid unexpected behavior.
.
.SH "RETURN VALUE"
On error \-1 is returned.
On success 0 is returned.
.
.SH "SEE ALSO"
.BR selinux "(8), " freecon "(3), " getcon "(3)
