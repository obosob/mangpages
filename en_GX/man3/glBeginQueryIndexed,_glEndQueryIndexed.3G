'\" t
.\"     Title: glBeginQueryIndexed, glEndQueryIndexed
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLBEGINQUERYINDEXED," "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBeginQueryIndexed,_glEndQueryIndexed \- delimit tha boundariez of a query object on a indexed target
.SH "C SPECIFICATION"
.HP \w'void\ glBeginQueryIndexed('u
.BI "void glBeginQueryIndexed(GLenum\ " "target" ", GLuint\ " "index" ", GLuint\ " "id" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha target type of query object established between
\fBglBeginQueryIndexed\fR
and tha subsequent
\fBglEndQueryIndexed\fR()\&. Da symbolic constant must be one of
\fBGL_SAMPLES_PASSED\fR,
\fBGL_ANY_SAMPLES_PASSED\fR,
\fBGL_PRIMITIVES_GENERATED\fR,
\fBGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR, or
\fBGL_TIME_ELAPSED\fR\&.
.RE
.PP
\fIindex\fR
.RS 4
Specifies tha index of tha query target upon which ta begin tha query\&.
.RE
.PP
\fIid\fR
.RS 4
Specifies tha name of a query object\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glEndQueryIndexed('u
.BI "void glEndQueryIndexed(GLenum\ " "target" ", GLuint\ " "index" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha target type of query object ta be concluded\&. Da symbolic constant must be one of
\fBGL_SAMPLES_PASSED\fR,
\fBGL_ANY_SAMPLES_PASSED\fR,
\fBGL_PRIMITIVES_GENERATED\fR,
\fBGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR, or
\fBGL_TIME_ELAPSED\fR\&.
.RE
.PP
\fIindex\fR
.RS 4
Specifies tha index of tha query target upon which ta end tha query\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglBeginQueryIndexed\fR
and
\fBglEndQueryIndexed\fR()
delimit tha boundariez of a query object\&.
\fIquery\fR
must be a name previously returned from a cold-ass lil call to
\fBglGenQueries\fR()\&. If a query object wit name
\fIid\fR
does not yet exist it is pimped wit tha type determined by
\fItarget\fR\&.
\fItarget\fR
must be one of
\fBGL_SAMPLES_PASSED\fR,
\fBGL_ANY_SAMPLES_PASSED\fR,
\fBGL_PRIMITIVES_GENERATED\fR,
\fBGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR, or
\fBGL_TIME_ELAPSED\fR\&. Da behavior of tha query object dependz on its type n' be as bigs up\&.
.PP
\fIindex\fR
specifies tha index of tha query target n' must be between a
\fItarget\fR\-specific maximum\&.
.PP
If
\fItarget\fR
is
\fBGL_SAMPLES_PASSED\fR,
\fIid\fR
must be a unused name, or tha name of a existin occlusion query object\&. When
\fBglBeginQueryIndexed\fR
is executed, tha query object\*(Aqs samples\-passed counta is reset ta 0\&. Right back up in yo muthafuckin ass. Subsequent renderin will increment tha counta fo' every last muthafuckin sample dat passes tha depth test\&. If tha value of
\fBGL_SAMPLE_BUFFERS\fR
is 0, then tha samples\-passed count is incremented by 1 fo' each fragment\&. If tha value of
\fBGL_SAMPLE_BUFFERS\fR
is 1, then tha samples\-passed count is incremented by tha number of samplez whose coverage bit is set\&. But fuck dat shiznit yo, tha word on tha street is dat implementations, at they discression may instead increase tha samples\-passed count by tha value of
\fBGL_SAMPLES\fR
if any sample up in tha fragment is covered\&. When
\fBglEndQueryIndexed\fR
is executed, tha samples\-passed counta be assigned ta tha query object\*(Aqs result value\&. This value can be queried by calling
\fBglGetQueryObject\fR()
with
\fIpname\fR\fBGL_QUERY_RESULT\fR\&. When
\fItarget\fR
is
\fBGL_SAMPLES_PASSED\fR,
\fIindex\fR
must be zero\&.
.PP
If
\fItarget\fR
is
\fBGL_ANY_SAMPLES_PASSED\fR,
\fIid\fR
must be a unused name, or tha name of a existin boolean occlusion query object\&. When
\fBglBeginQueryIndexed\fR
is executed, tha query object\*(Aqs samples\-passed flag is reset to
\fBGL_FALSE\fR\&. Right back up in yo muthafuckin ass. Subsequent renderin causes tha flag ta be set to
\fBGL_TRUE\fR
if any sample passes tha depth test\&. When
\fBglEndQueryIndexed\fR
is executed, tha samples\-passed flag be assigned ta tha query object\*(Aqs result value\&. This value can be queried by calling
\fBglGetQueryObject\fR()
with
\fIpname\fR\fBGL_QUERY_RESULT\fR\&. When
\fItarget\fR
is
\fBGL_ANY_SAMPLES_PASSED\fR,
\fIindex\fR
must be zero\&.
.PP
If
\fItarget\fR
is
\fBGL_PRIMITIVES_GENERATED\fR,
\fIid\fR
must be a unused name, or tha name of a existin primitizzle query object previously bound ta the
\fBGL_PRIMITIVES_GENERATED\fR
query binding\&. When
\fBglBeginQueryIndexed\fR
is executed, tha query object\*(Aqs primitives\-generated counta is reset ta 0\&. Right back up in yo muthafuckin ass. Subsequent renderin will increment tha counta once fo' every last muthafuckin vertex dat is emitted from tha geometry shader ta tha stream given by
\fIindex\fR, or from tha vertex shader if
\fIindex\fR
is zero n' no geometry shader is present\&. When
\fBglEndQueryIndexed\fR
is executed, tha primitives\-generated counta fo' stream
\fIindex\fR
is assigned ta tha query object\*(Aqs result value\&. This value can be queried by calling
\fBglGetQueryObject\fR()
with
\fIpname\fR\fBGL_QUERY_RESULT\fR\&. When
\fItarget\fR
is
\fBGL_PRIMITIVES_GENERATED\fR,
\fIindex\fR
must be less than tha value of
\fBGL_MAX_VERTEX_STREAMS\fR\&.
.PP
If
\fItarget\fR
is
\fBGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR,
\fIid\fR
must be a unused name, or tha name of a existin primitizzle query object previously bound ta the
\fBGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR
query binding\&. When
\fBglBeginQueryIndexed\fR
is executed, tha query object\*(Aqs primitives\-written counta fo' tha stream specified by
\fIindex\fR
is reset ta 0\&. Right back up in yo muthafuckin ass. Subsequent renderin will increment tha counta once fo' every last muthafuckin vertex dat is freestyled tha fuck into tha bound transform feedback buffer(s) fo' stream
\fIindex\fR\&. If transform feedback mode aint activated between tha call to
\fBglBeginQueryIndexed\fR
and
\fBglEndQueryIndexed\fR, tha counta aint gonna be incremented\&. When
\fBglEndQueryIndexed\fR
is executed, tha primitives\-written counta fo' stream
\fIindex\fR
is assigned ta tha query object\*(Aqs result value\&. This value can be queried by calling
\fBglGetQueryObject\fR()
with
\fIpname\fR\fBGL_QUERY_RESULT\fR\&. When
\fItarget\fR
is
\fBGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR,
\fIindex\fR
must be less than tha value of
\fBGL_MAX_VERTEX_STREAMS\fR\&.
.PP
If
\fItarget\fR
is
\fBGL_TIME_ELAPSED\fR,
\fIid\fR
must be a unused name, or tha name of a existin timer query object previously bound ta the
\fBGL_TIME_ELAPSED\fR
query binding\&. When
\fBglBeginQueryIndexed\fR
is executed, tha query object\*(Aqs time counta is reset ta 0\&. When
\fBglEndQueryIndexed\fR
is executed, tha elapsed server time dat has passed since tha call to
\fBglBeginQueryIndexed\fR
is freestyled tha fuck into tha query object\*(Aqs time counter\&. This value can be queried by calling
\fBglGetQueryObject\fR()
with
\fIpname\fR\fBGL_QUERY_RESULT\fR\&. When
\fItarget\fR
is
\fBGL_TIME_ELAPSED\fR,
\fIindex\fR
must be zero\&.
.PP
Queryin the
\fBGL_QUERY_RESULT\fR
implicitly flushes tha GL pipeline until tha renderin delimited by tha query object has completed n' tha result be available\&.
\fBGL_QUERY_RESULT_AVAILABLE\fR
can be queried ta determine if tha result is immediately available or if tha renderin aint yet complete\&.
.SH "NOTES"
.PP
If tha query target\*(Aqs count exceedz tha maximum value representable up in tha number of available bits, as reported by
\fBglGetQueryiv\fR()
with
\fItarget\fR
set ta tha appropriate query target and
\fIpname\fR\fBGL_QUERY_COUNTER_BITS\fR, tha count becomes undefined\&.
.PP
An implementation may support 0 bits up in its counter, up in which case query thangs up in dis biatch is always undefined n' essentially useless\&.
.PP
When
\fBGL_SAMPLE_BUFFERS\fR
is 0, tha samples\-passed counta of a occlusion query will increment once fo' each fragment dat passes tha depth test\&. When
\fBGL_SAMPLE_BUFFERS\fR
is 1, a implementation may either increment tha samples\-passed counta individually fo' each sample of a gangbangin' fragment dat passes tha depth test, or it may chizzle ta increment tha counta fo' all samplez of a gangbangin' fragment if any one of dem passes tha depth test\&.
.PP
Calling
\fBglBeginQuery\fR()
or
\fBglEndQuery\fR()
is equivalent ta calling
\fBglBeginQueryIndexed\fR()
or
\fBglEndQueryIndexed\fR()
with
\fIindex\fR
set ta zero, respectively\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not one of tha accepted tokens\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIindex\fR
is pimped outa than tha query target\-specific maximum\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglBeginQueryIndexed\fR
is executed while a query object of tha same
\fItarget\fR
is already active\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglEndQueryIndexed\fR()
is executed when a query object of tha same
\fItarget\fR
is not active\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIid\fR
is 0\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIid\fR
is tha name of a already actizzle query object\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIid\fR
refers ta a existin query object whose type do not do not match
\fItarget\fR\&.
.SH "SEE ALSO"
.PP
\fBglDeleteQueries\fR(),
\fBglBeginQuery\fR(),
\fBglEndQuery\fR(),
\fBglGenQueries\fR(),
\fBglGetQueryiv\fR(),
\fBglGetQueryObject\fR(),
\fBglIsQuery\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2010 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
