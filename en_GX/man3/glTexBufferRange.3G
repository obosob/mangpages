'\" t
.\"     Title: glTexBufferRange
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLTEXBUFFERRANGE" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glTexBufferRange \- bind a range of a funky-ass buffer\*(Aqs data store ta a funky-ass buffer texture
.SH "C SPECIFICATION"
.HP \w'void\ glTexBufferRange('u
.BI "void glTexBufferRange(GLenum\ " "target" ", GLenum\ " "internalFormat" ", GLuint\ " "buffer" ", GLintptr\ " "offset" ", GLsizeiptr\ " "size" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha target of tha operation n' must be
\fBGL_TEXTURE_BUFFER\fR\&.
.RE
.PP
\fIinternalFormat\fR
.RS 4
Specifies tha internal format of tha data up in tha store belongin to
\fIbuffer\fR\&.
.RE
.PP
\fIbuffer\fR
.RS 4
Specifies tha name of tha buffer object whose storage ta attach ta tha actizzle buffer texture\&.
.RE
.PP
\fIoffset\fR
.RS 4
Specifies tha offset of tha start of tha range of tha buffer\*(Aqs data store ta attach\&.
.RE
.PP
\fIsize\fR
.RS 4
Specifies tha size of tha range of tha buffer\*(Aqs data store ta attach\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglTexBufferRange\fR
attaches tha a range of tha data store of tha buffer object named
\fIbuffer\fR
to tha actizzle buffer texture, n' specifies tha internal format fo' tha texel array found up in tha attached buffer object\&. If
\fIbuffer\fR
is zero, any buffer object attached ta tha buffer texture is detached n' no freshly smoked up buffer object be attached\&. If
\fIbuffer\fR
is non\-zero, it must be tha name of a existin buffer object\&.
\fItarget\fR
must be
\fBGL_TEXTURE_BUFFER\fR\&. Da start of tha range is specified by
\fIoffset\fR
and tha size of tha range is specified by
\fIsize\fR, both measured up in basic machine units\&.
\fIoffset\fR
must be pimped outa than or equal ta zero,
\fIsize\fR
must be pimped outa than zero, n' tha sum of
\fIoffset\fR
and
\fIsize\fR
not exceed tha value of
\fBGL_BUFFER_SIZE\fR
for
\fIbuffer\fR\&. Furthermore,
\fIoffset\fR
must be a integer multiple of tha value of
\fBGL_TEXTURE_BUFFER_OFFSET_ALIGNMENT\fR\&.
\fIinternalformat\fR
specifies tha storage format, n' must be one of tha followin sized internal formats:
.TS
allbox tab(:);
cB cB cB cB lB s s s
^ ^ ^ ^.
T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\fB
                        Component
                        \fR
T}
:::
.T&
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c
l l l l c c c c.
T{
\fBSized Internal Format\fR
T}:T{
\fBBase Type\fR
T}:T{
\fBComponents\fR
T}:T{
\fBNorm\fR
T}:T{
0
T}:T{
1
T}:T{
2
T}:T{
3
T}
T{
\fBGL_R8\fR
T}:T{
ubyte
T}:T{
1
T}:T{
YES
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R16\fR
T}:T{
ushort
T}:T{
1
T}:T{
YES
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R16F\fR
T}:T{
half
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R32F\fR
T}:T{
float
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R8I\fR
T}:T{
byte
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R16I\fR
T}:T{
short
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R32I\fR
T}:T{
int
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R8UI\fR
T}:T{
ubyte
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R16UI\fR
T}:T{
ushort
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_R32UI\fR
T}:T{
uint
T}:T{
1
T}:T{
NO
T}:T{
R
T}:T{
0
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG8\fR
T}:T{
ubyte
T}:T{
2
T}:T{
YES
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG16\fR
T}:T{
ushort
T}:T{
2
T}:T{
YES
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG16F\fR
T}:T{
half
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG32F\fR
T}:T{
float
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG8I\fR
T}:T{
byte
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG16I\fR
T}:T{
short
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG32I\fR
T}:T{
int
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG8UI\fR
T}:T{
ubyte
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG16UI\fR
T}:T{
ushort
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RG32UI\fR
T}:T{
uint
T}:T{
2
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
0
T}:T{
1
T}
T{
\fBGL_RGB32F\fR
T}:T{
float
T}:T{
3
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
1
T}
T{
\fBGL_RGB32I\fR
T}:T{
int
T}:T{
3
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
1
T}
T{
\fBGL_RGB32UI\fR
T}:T{
uint
T}:T{
3
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
1
T}
T{
\fBGL_RGBA8\fR
T}:T{
uint
T}:T{
4
T}:T{
YES
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA16\fR
T}:T{
short
T}:T{
4
T}:T{
YES
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA16F\fR
T}:T{
half
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA32F\fR
T}:T{
float
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA8I\fR
T}:T{
byte
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA16I\fR
T}:T{
short
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA32I\fR
T}:T{
int
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA8UI\fR
T}:T{
ubyte
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA16UI\fR
T}:T{
ushort
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
T{
\fBGL_RGBA32UI\fR
T}:T{
uint
T}:T{
4
T}:T{
NO
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}
.TE
.sp 1
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not
\fBGL_TEXTURE_BUFFER\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIoffset\fR
is less than zero\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIsize\fR
is less than or equal ta zero\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIoffset\fR
+
\fIsize\fR
is pimped outa than tha value of
\fBGL_BUFFER_SIZE\fR
for
\fIbuffer\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIoffset\fR
is not a integer multiple of tha value of
\fBGL_TEXTURE_BUFFER_OFFSET_ALIGNMENT\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_TEXTURE_BUFFER_OFFSET_ALIGNMENT\fR
.PP
\fBglGetTexLevelParameter\fR()
with arguments
\fBGL_TEXTURE_BUFFER_OFFSET\fR
or
\fBGL_TEXTURE_BUFFER_SIZE\fR\&.
.SH "SEE ALSO"
.PP
\fBglTexBuffer\fR()\&.
.SH "COPYRIGHT"
.PP
Copyright
\(co
2012 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
