" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::set< _Key, _Compare, _Alloc > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "typedef _Key \fBkey_type\fP"
.br
.ti -1c
.RI "typedef _Key \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef _Compare \fBkey_compare\fP"
.br
.ti -1c
.RI "typedef _Compare \fBvalue_compare\fP"
.br
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "typedef _Key_alloc_type::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef 
.br
_Key_alloc_type::const_pointa \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Key_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef 
.br
_Key_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Rep_type::const_iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Rep_type::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
\fB_Rep_type::const_reverse_iterator\fP \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
\fB_Rep_type::const_reverse_iterator\fP \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Rep_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Rep_type::difference_type \fBdifference_type\fP"
.br
.in -1c
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBset\fP ()"
.br
.ti -1c
.RI "\fBset\fP (const _Compare &__comp, const \fBallocator_type\fP &__a=\fBallocator_type\fP())"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBset\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBset\fP (_InputIterator __first, _InputIterator __last, const _Compare &__comp, const \fBallocator_type\fP &__a=\fBallocator_type\fP())"
.br
.ti -1c
.RI "\fBset\fP (const \fBset\fP &__x)"
.br
.ti -1c
.RI "\fBset\fP (\fBset\fP &&__x) noexcept(\fBis_nothrow_copy_constructible\fP< _Compare >::value)"
.br
.ti -1c
.RI "\fBset\fP (\fBinitializer_list\fP< \fBvalue_type\fP > __l, const _Compare &__comp=_Compare(), const \fBallocator_type\fP &__a=\fBallocator_type\fP())"
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBiterator\fP \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBiterator\fP \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "\fBsize_type\fP \fBcount\fP (const \fBkey_type\fP &__x) const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fBstd::pair\fP< \fBiterator\fP, bool > \fBemplace\fP (_Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fBiterator\fP \fBemplace_hint\fP (\fBconst_iterator\fP __pos, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.ti -1c
.RI "\fBiterator\fP \fBend\fP () const noexcept"
.br
.ti -1c
.RI "_GLIBCXX_ABI_TAG_CXX11 \fBiterator\fP \fBerase\fP (\fBconst_iterator\fP __position)"
.br
.ti -1c
.RI "\fBsize_type\fP \fBerase\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "_GLIBCXX_ABI_TAG_CXX11 \fBiterator\fP \fBerase\fP (\fBconst_iterator\fP __first, \fBconst_iterator\fP __last)"
.br
.ti -1c
.RI "\fBallocator_type\fP \fBget_allocator\fP () const noexcept"
.br
.ti -1c
.RI "\fBstd::pair\fP< \fBiterator\fP, bool > \fBinsert\fP (const \fBvalue_type\fP &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< \fBiterator\fP, bool > \fBinsert\fP (\fBvalue_type\fP &&__x)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP __position, const \fBvalue_type\fP &__x)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP __position, \fBvalue_type\fP &&__x)"
.br
.ti -1c
.RI "template<typename _InputIterator > void \fBinsert\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBinitializer_list\fP< \fBvalue_type\fP > __l)"
.br
.ti -1c
.RI "\fBkey_compare\fP \fBkey_comp\fP () const "
.br
.ti -1c
.RI "\fBsize_type\fP \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "\fBset\fP & \fBoperator=\fP (const \fBset\fP &__x)"
.br
.ti -1c
.RI "\fBset\fP & \fBoperator=\fP (\fBset\fP &&__x)"
.br
.ti -1c
.RI "\fBset\fP & \fBoperator=\fP (\fBinitializer_list\fP< \fBvalue_type\fP > __l)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "\fBsize_type\fP \fBsize\fP () const noexcept"
.br
.ti -1c
.RI "void \fBswap\fP (\fBset\fP &__x)"
.br
.ti -1c
.RI "\fBvalue_compare\fP \fBvalue_comp\fP () const "
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBfind\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBfind\fP (const \fBkey_type\fP &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBlower_bound\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBlower_bound\fP (const \fBkey_type\fP &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBupper_bound\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBupper_bound\fP (const \fBkey_type\fP &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBstd::pair\fP< \fBiterator\fP, \fBiterator\fP > \fBequal_range\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< \fBconst_iterator\fP, 
.br
\fBconst_iterator\fP > \fBequal_range\fP (const \fBkey_type\fP &__x) const "
.br
.in -1c
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _K1 , typename _C1 , typename _A1 > bool \fBoperator<\fP (const \fBset\fP< _K1, _C1, _A1 > &, const \fBset\fP< _K1, _C1, _A1 > &)"
.br
.ti -1c
.RI "template<typename _K1 , typename _C1 , typename _A1 > bool \fBoperator==\fP (const \fBset\fP< _K1, _C1, _A1 > &, const \fBset\fP< _K1, _C1, _A1 > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>>class std::set< _Key, _Compare, _Alloc >"
A standard container made up of unique keys, which can be retrieved up in logarithmic time\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Key\fP Type of key objects\&. 
.br
\fI_Compare\fP Comparison function object type, defaults ta less<_Key>\&. 
.br
\fI_Alloc\fP Allocator type, defaults ta allocator<_Key>\&.
.RE
.PP
Meets tha requirementz of a \fCcontainer\fP, a \fCreversible container\fP, n' a \fCassociatizzle container\fP (usin unique keys)\&.
.PP
Sets support bidirectionizzle iterators\&.
.PP
Da private tree data is declared exactly tha same way fo' set n' multiset; tha distinction is made entirely up in how tha fuck tha tree functions is called (*_unique versus *_equal, same as tha standard)\&. 
.PP
Definizzle at line 90 of file stl_set\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Alloc \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBallocator_type\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 107 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Rep_type::const_iterator \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBconst_iterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 128 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Key_alloc_type::const_pointa \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBconst_pointer\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 121 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Key_alloc_type::const_reference \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBconst_reference\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 123 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef \fB_Rep_type::const_reverse_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBconst_reverse_iterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 130 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Rep_type::difference_type \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBdifference_type\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 132 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Rep_type::const_iterator \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBiterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 127 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Compare \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBkey_compare\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 105 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Key \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBkey_type\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 103 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Key_alloc_type::pointa \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBpointer\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 120 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Key_alloc_type::reference \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBreference\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 122 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef \fB_Rep_type::const_reverse_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBreverse_iterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 129 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Rep_type::size_type \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBsize_type\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 131 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Compare \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBvalue_compare\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 106 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> typedef _Key \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBvalue_type\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 104 of file stl_set\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBset\fP ()\fC [inline]\fP"

.PP
Default constructor creates no elements\&. 
.PP
Definizzle at line 139 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBset\fP (const _Compare &__comp, const \fBallocator_type\fP &__a = \fC\fBallocator_type\fP()\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Creates a set wit no elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__comp\fP Comparator ta use\&. 
.br
\fI__a\fP An allocator object\&. 
.RE
.PP

.PP
Definizzle at line 148 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBset\fP (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
Buildz a set from a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&.
.RE
.PP
Smoke a set consistin of copiez of tha elements from [__first,__last)\&. This is linear up in N if tha range be already sorted, n' NlogN otherwise (where N is distance(__first,__last))\&. 
.PP
Definizzle at line 163 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBset\fP (_InputIterator__first, _InputIterator__last, const _Compare &__comp, const \fBallocator_type\fP &__a = \fC\fBallocator_type\fP()\fP)\fC [inline]\fP"

.PP
Buildz a set from a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&. 
.br
\fI__comp\fP A comparison functor\&. 
.br
\fI__a\fP An allocator object\&.
.RE
.PP
Smoke a set consistin of copiez of tha elements from [__first,__last)\&. This is linear up in N if tha range be already sorted, n' NlogN otherwise (where N is distance(__first,__last))\&. 
.PP
Definizzle at line 180 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBset\fP (const \fBset\fP< _Key, _Compare, _Alloc > &__x)\fC [inline]\fP"

.PP
Set copy constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A set of identical element n' allocator types\&.
.RE
.PP
Da newly-created set uses a cold-ass lil copy of tha allocation object used by \fI__x\fP\&. 
.PP
Definizzle at line 193 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBset\fP (\fBset\fP< _Key, _Compare, _Alloc > &&__x)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Set move constructor 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A set of identical element n' allocator types\&.
.RE
.PP
Da newly-created set gotz nuff tha exact contentz of \fIx\fP\&. Da contentz of \fIx\fP is a valid yo, but unspecified set\&. 
.PP
Definizzle at line 204 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::set\fP< _Key, _Compare, _Alloc >::\fBset\fP (\fBinitializer_list\fP< \fBvalue_type\fP >__l, const _Compare &__comp = \fC_Compare()\fP, const \fBallocator_type\fP &__a = \fC\fBallocator_type\fP()\fP)\fC [inline]\fP"

.PP
Buildz a set from a initializer_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP An initializer_list\&. 
.br
\fI__comp\fP A comparison functor\&. 
.br
\fI__a\fP An allocator object\&.
.RE
.PP
Smoke a set consistin of copiez of tha elements up in tha list\&. This is linear up in N if tha list be already sorted, n' NlogN otherwise (where N is \fI__l\&.size()\fP)\&. 
.PP
Definizzle at line 218 of file stl_set\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha set\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 298 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha set\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 335 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::cend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha set\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 344 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::set\fP< _Key, _Compare, _Alloc >::clear ()\fC [inline]\fP, \fC [noexcept]\fP"
Erases all elements up in a set\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 630 of file stl_set\&.h\&.
.PP
Referenced by std::set< _StateIdT >::operator=()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBsize_type\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::count (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Findz tha number of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of elements wit specified key\&.
.RE
.PP
This function only make sense fo' multisets; fo' set tha result will either be 0 (not present) or 1 (present)\&. 
.PP
Definizzle at line 644 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::crbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha last element up in tha set\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 353 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::crend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last pair up in tha set\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 362 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename\&.\&.\&. _Args> \fBstd::pair\fP<\fBiterator\fP, bool> \fBstd::set\fP< _Key, _Compare, _Alloc >::emplace (_Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Attempts ta build n' bang a element tha fuck into tha set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__args\fP Arguments used ta generate a element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pair, of which tha straight-up original gangsta element be a iterator dat points ta tha possibly banged element, n' tha second be a funky-ass bool dat is legit if tha element was straight-up inserted\&.
.RE
.PP
This function attempts ta build n' bang a element tha fuck into tha set\& fo' realz. A set relies on unique keys n' thus a element is only banged if it aint already present up in tha set\&.
.PP
Insertion requires logarithmic time\&. 
.PP
Definizzle at line 413 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename\&.\&.\&. _Args> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::emplace_hint (\fBconst_iterator\fP__pos, _Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP An iterator dat serves as a hint as ta where tha element should be inserted\&. 
.br
\fI__args\fP Arguments used ta generate tha element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha element wit key equivalent ta tha one generated from \fI__args\fP (may or may not be tha element itself)\&.
.RE
.PP
This function aint concerned bout whether tha insertion took place, n' thus do not return a funky-ass boolean like tha single-argument emplace() do\&. Note dat tha straight-up original gangsta parameta is only a hint n' can potentially improve tha performizzle of tha insertion process\& fo' realz. A wack hint would cause no gains up in efficiency\&.
.PP
For mo' on \fIhinting\fP, see: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html
.PP
Insertion requires logarithmic time (if tha hint aint taken)\&. 
.PP
Definizzle at line 439 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> bool \fBstd::set\fP< _Key, _Compare, _Alloc >::empty () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns legit if tha set is empty\&. 
.PP
Definizzle at line 368 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::end () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha set\&. Iteration is done up in ascendin order accordin ta tha keys\&. 
.PP
Definizzle at line 307 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::pair\fP<\fBiterator\fP, \fBiterator\fP> \fBstd::set\fP< _Key, _Compare, _Alloc >::equal_range (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Findz a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators dat possibly points ta tha subsequence matchin given key\&.
.RE
.PP
This function is equivalent ta 
.PP
.nf
std::make_pair(c\&.lower_bound(val),
               c\&.upper_bound(val))

.fi
.PP
 (but is fasta than makin tha calls separately)\&.
.PP
This function probably only make sense fo' multisets\&. 
.PP
Definizzle at line 724 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::pair\fP<\fBconst_iterator\fP, \fBconst_iterator\fP> \fBstd::set\fP< _Key, _Compare, _Alloc >::equal_range (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Findz a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators dat possibly points ta tha subsequence matchin given key\&.
.RE
.PP
This function is equivalent ta 
.PP
.nf
std::make_pair(c\&.lower_bound(val),
               c\&.upper_bound(val))

.fi
.PP
 (but is fasta than makin tha calls separately)\&.
.PP
This function probably only make sense fo' multisets\&. 
.PP
Definizzle at line 728 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::erase (\fBconst_iterator\fP__position)\fC [inline]\fP"

.PP
Erases a element from a set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP An iterator pointin ta tha element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha element immediately followin \fI__position\fP prior ta tha element bein erased\&. If no such element exists, end() is returned\&.
.RE
.PP
This function erases a element, pointed ta by tha given iterator, from a set\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 551 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBsize_type\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::erase (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Erases elements accordin ta tha provided key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key of element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Da number of elements erased\&.
.RE
.PP
This function erases all tha elements located by tha given key from a set\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 581 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::erase (\fBconst_iterator\fP__first, \fBconst_iterator\fP__last)\fC [inline]\fP"

.PP
Erases a [__first,__last) range of elements from a set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator pointin ta tha start of tha range ta be erased\&.
.br
\fI__last\fP Iterator pointin ta tha end of tha range ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Da iterator \fI__last\fP\&.
.RE
.PP
This function erases a sequence of elements from a set\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 603 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::find (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Tries ta locate a element up in a set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta sought-afta element, or end() if not found\&.
.RE
.PP
This function takes a key n' tries ta locate tha element wit which tha key matches\&. If successful tha function returns a iterator pointin ta tha sought afta element\&. If unsuccessful it returns tha past-the-end ( \fCend()\fP ) iterator\&. 
.PP
Definizzle at line 662 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBconst_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::find (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Tries ta locate a element up in a set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta sought-afta element, or end() if not found\&.
.RE
.PP
This function takes a key n' tries ta locate tha element wit which tha key matches\&. If successful tha function returns a iterator pointin ta tha sought afta element\&. If unsuccessful it returns tha past-the-end ( \fCend()\fP ) iterator\&. 
.PP
Definizzle at line 666 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBallocator_type\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::get_allocator () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha allocator object wit which tha set was constructed\&. 
.PP
Definizzle at line 289 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::pair\fP<\fBiterator\fP, bool> \fBstd::set\fP< _Key, _Compare, _Alloc >::insert (const \fBvalue_type\fP &__x)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pair, of which tha straight-up original gangsta element be a iterator dat points ta tha possibly banged element, n' tha second be a funky-ass bool dat is legit if tha element was straight-up inserted\&.
.RE
.PP
This function attempts ta bang a element tha fuck into tha set\& fo' realz. A set relies on unique keys n' thus a element is only banged if it aint already present up in tha set\&.
.PP
Insertion requires logarithmic time\&. 
.PP
Definizzle at line 460 of file stl_set\&.h\&.
.PP
Referenced by std::set< _StateIdT >::insert(), n' std::set< _StateIdT >::operator=()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::insert (\fBconst_iterator\fP__position, const \fBvalue_type\fP &__x)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP An iterator dat serves as a hint as ta where tha element should be inserted\&. 
.br
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha element wit key of \fI__x\fP (may or may not be tha element passed in)\&.
.RE
.PP
This function aint concerned bout whether tha insertion took place, n' thus do not return a funky-ass boolean like tha single-argument insert() do\&. Note dat tha straight-up original gangsta parameta is only a hint n' can potentially improve tha performizzle of tha insertion process\& fo' realz. A wack hint would cause no gains up in efficiency\&.
.PP
For mo' on \fIhinting\fP, see: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html
.PP
Insertion requires logarithmic time (if tha hint aint taken)\&. 
.PP
Definizzle at line 497 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > void \fBstd::set\fP< _Key, _Compare, _Alloc >::insert (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
A template function dat attempts ta bang a range of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator pointin ta tha start of tha range ta be inserted\&. 
.br
\fI__last\fP Iterator pointin ta tha end of tha range\&.
.RE
.PP
Complexitizzle similar ta dat of tha range constructor\&. 
.PP
Definizzle at line 517 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::set\fP< _Key, _Compare, _Alloc >::insert (\fBinitializer_list\fP< \fBvalue_type\fP >__l)\fC [inline]\fP"

.PP
Attempts ta bang a list of elements tha fuck into tha set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP A std::initializer_list<value_type> of elements ta be inserted\&.
.RE
.PP
Complexitizzle similar ta dat of tha range constructor\&. 
.PP
Definizzle at line 529 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBkey_compare\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::key_comp () const\fC [inline]\fP"

.PP
Returns tha comparison object wit which tha set was constructed\&. 
.PP
Definizzle at line 281 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::lower_bound (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Findz tha beginnin of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta first element equal ta or pimped outa than key, or end()\&.
.RE
.PP
This function returns tha straight-up original gangsta element of a subsequence of elements dat matches tha given key\&. If unsuccessful it returns a iterator pointin ta tha straight-up original gangsta element dat has a pimped outa value than given key or end() if no such element exists\&. 
.PP
Definizzle at line 683 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBconst_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::lower_bound (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Findz tha beginnin of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta first element equal ta or pimped outa than key, or end()\&.
.RE
.PP
This function returns tha straight-up original gangsta element of a subsequence of elements dat matches tha given key\&. If unsuccessful it returns a iterator pointin ta tha straight-up original gangsta element dat has a pimped outa value than given key or end() if no such element exists\&. 
.PP
Definizzle at line 687 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBsize_type\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha maximum size of tha set\&. 
.PP
Definizzle at line 378 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBset\fP& \fBstd::set\fP< _Key, _Compare, _Alloc >::operator= (const \fBset\fP< _Key, _Compare, _Alloc > &__x)\fC [inline]\fP"

.PP
Set assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A set of identical element n' allocator types\&.
.RE
.PP
All tha elementz of \fI__x\fP is copied yo, but unlike tha copy constructor, tha allocator object aint copied\&. 
.PP
Definizzle at line 233 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBset\fP& \fBstd::set\fP< _Key, _Compare, _Alloc >::operator= (\fBset\fP< _Key, _Compare, _Alloc > &&__x)\fC [inline]\fP"

.PP
Set move assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A set of identical element n' allocator types\&.
.RE
.PP
Da contentz of \fI__x\fP is moved tha fuck into dis set (without copying)\&. \fI__x\fP be a valid yo, but unspecified set\&. 
.PP
Definizzle at line 248 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBset\fP& \fBstd::set\fP< _Key, _Compare, _Alloc >::operator= (\fBinitializer_list\fP< \fBvalue_type\fP >__l)\fC [inline]\fP"

.PP
Set list assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP An initializer_list\&.
.RE
.PP
This function fills a set wit copiez of tha elements up in tha initializer list \fI__l\fP\&.
.PP
Note dat tha assignment straight-up chizzlez tha set n' dat tha resultin setz size is tha same ol' dirty as tha number of elements assigned\&. Oldskool data may be lost\&. 
.PP
Definizzle at line 269 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::rbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha last element up in tha set\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 316 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::rend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator dat points ta tha last pair up in tha set\&. Iteration is done up in descendin order accordin ta tha keys\&. 
.PP
Definizzle at line 325 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBsize_type\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha size of tha set\&. 
.PP
Definizzle at line 373 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::set\fP< _Key, _Compare, _Alloc >::swap (\fBset\fP< _Key, _Compare, _Alloc > &__x)\fC [inline]\fP"

.PP
Swaps data wit another set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP A set of tha same element n' allocator types\&.
.RE
.PP
This exchanges tha elements between two sets up in constant time\&. (It be only swappin a pointer, a integer, n' a instizzle of tha \fCCompare\fP type (which itself is often stateless n' empty), so it should be like fast\&.) Note dat tha global std::swap() function is specialized such dat std::swap(s1,s2) will feed ta dis function\&. 
.PP
Definizzle at line 393 of file stl_set\&.h\&.
.PP
Referenced by std::set< _StateIdT >::operator=(), n' std::swap()\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBiterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::upper_bound (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Findz tha end of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta tha straight-up original gangsta element pimped outa than key, or end()\&. 
.RE
.PP

.PP
Definizzle at line 699 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBconst_iterator\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::upper_bound (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Findz tha end of a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta tha straight-up original gangsta element pimped outa than key, or end()\&. 
.RE
.PP

.PP
Definizzle at line 703 of file stl_set\&.h\&.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBvalue_compare\fP \fBstd::set\fP< _Key, _Compare, _Alloc >::value_comp () const\fC [inline]\fP"

.PP
Returns tha comparison object wit which tha set was constructed\&. 
.PP
Definizzle at line 285 of file stl_set\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
