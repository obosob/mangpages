.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509_STORE_CTX_new 3"
.TH X509_STORE_CTX_new 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
X509_STORE_CTX_new, X509_STORE_CTX_cleanup, X509_STORE_CTX_free, X509_STORE_CTX_init, X509_STORE_CTX_trusted_stack, X509_STORE_CTX_set_cert, X509_STORE_CTX_set_chain, X509_STORE_CTX_set0_crls, X509_STORE_CTX_get0_param, X509_STORE_CTX_set0_param, X509_STORE_CTX_set_default \- X509_STORE_CTX initialisation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/x509_vfy.h>
\&
\& X509_STORE_CTX *X509_STORE_CTX_new(void);
\& void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);
\& void X509_STORE_CTX_free(X509_STORE_CTX *ctx);
\&
\& int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,
\&                         X509 *x509, STACK_OF(X509) *chain);
\&
\& void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx, STACK_OF(X509) *sk);
\&
\& void   X509_STORE_CTX_set_cert(X509_STORE_CTX *ctx,X509 *x);
\& void   X509_STORE_CTX_set_chain(X509_STORE_CTX *ctx,STACK_OF(X509) *sk);
\& void   X509_STORE_CTX_set0_crls(X509_STORE_CTX *ctx, STACK_OF(X509_CRL) *sk);
\&
\& X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);
\& void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);
\& int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These functions initialise a \fBX509_STORE_CTX\fR structure fo' subsequent use
by \fIX509_verify_cert()\fR.
.PP
\&\fIX509_STORE_CTX_new()\fR returns a newly initialised \fBX509_STORE_CTX\fR structure.
.PP
\&\fIX509_STORE_CTX_cleanup()\fR internally cleans up a \fBX509_STORE_CTX\fR structure.
Da context can then be reused wit a freshly smoked up call ta \fIX509_STORE_CTX_init()\fR.
.PP
\&\fIX509_STORE_CTX_free()\fR straight-up frees up \fBctx\fR fo' realz. Afta dis call \fBctx\fR
is no longer valid.
.PP
\&\fIX509_STORE_CTX_init()\fR sets up \fBctx\fR fo' a subsequent verification operation.
Da trusted certificate store is set ta \fBstore\fR, tha end entitizzle certificate
to be verified is set ta \fBx509\fR n' a set of additionizzle certificates (which
will be untrusted but may be used ta build tha chain) up in \fBchain\fR fo' realz. Any or
all of tha \fBstore\fR, \fBx509\fR n' \fBchain\fR parametas can be \fB\s-1NULL\s0\fR.
.PP
\&\fIX509_STORE_CTX_trusted_stack()\fR sets tha set of trusted certificatez of \fBctx\fR
to \fBsk\fR. This be a alternatizzle way of specifyin trusted certificates 
instead of rockin a \fBX509_STORE\fR.
.PP
\&\fIX509_STORE_CTX_set_cert()\fR sets tha certificate ta be vertified up in \fBctx\fR to
\&\fBx\fR.
.PP
\&\fIX509_STORE_CTX_set_chain()\fR sets tha additionizzle certificate chain used by \fBctx\fR
to \fBsk\fR.
.PP
\&\fIX509_STORE_CTX_set0_crls()\fR sets a set of CRLs ta use ta aid certificate
verification ta \fBsk\fR. These CRLs will only be used if \s-1CRL\s0 verification is
enabled up in tha associated \fBX509_VERIFY_PARAM\fR structure. This might be
used where additionizzle \*(L"useful\*(R" CRLs is supplied as part of a protocol,
for example up in a PKCS#7 structure.
.PP
X509_VERIFY_PARAM *\fIX509_STORE_CTX_get0_param()\fR retrieves a intenal pointer
to tha verification parametas associated wit \fBctx\fR.
.PP
\&\fIX509_STORE_CTX_set0_param()\fR sets tha intenal verification parameta pointer
to \fBparam\fR fo' realz. Afta dis call \fBparam\fR should not be used.
.PP
\&\fIX509_STORE_CTX_set_default()\fR looks up n' sets tha default verification
method ta \fBname\fR. This uses tha function \fIX509_VERIFY_PARAM_lookup()\fR to
find a appropriate set of parametas from \fBname\fR.
.SH "NOTES"
.IX Header "NOTES"
Da certificates n' CRLs up in a store is used internally n' should \fBnot\fR
be freed up until afta tha associated \fBX509_STORE_CTX\fR is freed. Y'all KNOW dat shit, muthafucka! Legacy
applications might implicitly use a \fBX509_STORE_CTX\fR like this:
.PP
.Vb 2
\&  X509_STORE_CTX ctx;
\&  X509_STORE_CTX_init(&ctx, store, cert, chain);
.Ve
.PP
this is \fBnot\fR recommended up in freshly smoked up applications they should instead do:
.PP
.Vb 5
\&  X509_STORE_CTX *ctx;
\&  ctx = X509_STORE_CTX_new();
\&  if (ctx == NULL)
\&        /* Wack error */
\&  X509_STORE_CTX_init(ctx, store, cert, chain);
.Ve
.SH "BUGS"
.IX Header "BUGS"
Da certificates n' CRLs up in a cold-ass lil context is used internally n' should \fBnot\fR
be freed up until afta tha associated \fBX509_STORE_CTX\fR is freed. Y'all KNOW dat shit, muthafucka! Copies
should be made or reference counts increased instead.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIX509_STORE_CTX_new()\fR returns a newly allocates context or \fB\s-1NULL\s0\fR be an
error occurred.
.PP
\&\fIX509_STORE_CTX_init()\fR returns 1 fo' success or 0 if a error occurred.
.PP
\&\fIX509_STORE_CTX_get0_param()\fR returns a pointa ta a \fBX509_VERIFY_PARAM\fR
structure or \fB\s-1NULL\s0\fR if a error occurred.
.PP
\&\fIX509_STORE_CTX_cleanup()\fR, \fIX509_STORE_CTX_free()\fR, \fIX509_STORE_CTX_trusted_stack()\fR,
\&\fIX509_STORE_CTX_set_cert()\fR, \fIX509_STORE_CTX_set_chain()\fR,
\&\fIX509_STORE_CTX_set0_crls()\fR n' \fIX509_STORE_CTX_set0_param()\fR do not return
values.
.PP
\&\fIX509_STORE_CTX_set_default()\fR returns 1 fo' success or 0 if a error occurred.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIX509_verify_cert\fR\|(3)
\&\fIX509_VERIFY_PARAM_set_flags\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIX509_STORE_CTX_set0_crls()\fR was first added ta OpenSSL 1.0.0
