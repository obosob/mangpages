
.\" n' Copyright (c) 2008 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References: RFC 2553
.TH INET_PTON 3 2008-06-18 "Linux" "Linux Programmerz Manual"
.SH NAME
inet_pton \- convert IPv4 n' IPv6 addresses from text ta binary form
.SH SYNOPSIS
.nf
.B #include <arpa/inet.h>

.BI "int inet_pton(int " "af" ", const char *" "src" ", void *" "dst" );
.fi
.SH DESCRIPTION
This function converts tha characta string
.I src
into a network address structure up in the
.I af
address crew, then
copies
the network address structure to
.IR dst .
The
.I af
argument must be either
.B AF_INET
or
.BR AF_INET6 .
.PP
Da followin address crews is currently supported:
.TP
.B AF_INET
.I src
points ta a cold-ass lil characta strang containin a IPv4 network address in
dotted-decimal format, "\fIddd.ddd.ddd.ddd\fP", where
.I ddd
is a thugged-out decimal number of up ta three digits up in tha range 0 ta 255.
Da address is converted ta a
.I struct in_addr
and copied to
.IR dst ,
which must be
.I sizeof(struct in_addr)
(4) bytes (32 bits) long.
.TP
.B AF_INET6
.I src
points ta a cold-ass lil characta strang containin a IPv6 network address.
Da address is converted ta a
.I struct in6_addr
and copied to
.IR dst ,
which must be
.I sizeof(struct in6_addr)
(16) bytes (128 bits) long.
Da allowed formats fo' IPv6 addresses follow these rules:
.RS
.IP 1. 3
Da preferred format is
.IR x:x:x:x:x:x:x:x .
This form consistz of eight hexadecimal numbers,
each of which expresses a 16-bit value (i.e., each
.I x
can be up ta 4 hex digits).
.IP 2.
A seriez of contiguous zero joints up in tha preferred format
can be abbreviated to
.IR :: .
Only one instizzle of
.I ::
can occur up in a address.
For example, tha loopback address
.I 0:0:0:0:0:0:0:1
can be abbreviated as
.IR ::1 .
Da wildcard address, consistin of all zeros, can be freestyled as
.IR :: .
.IP 3.
An alternate format is useful fo' expressin IPv4-mapped IPv6 addresses.
This form is freestyled as
.IR x:x:x:x:x:x:d.d.d.d ,
where tha six leading
.IR x s
are hexadecimal joints dat define tha six most-significant
16-bit piecez of tha address (i.e., 96 bits), n' the
.IR d s
express a value up in dotted-decimal notation that
defines tha least dope 32 bitz of tha address.
An example of such a address is
.IR ::FFFF:204.152.189.116 .
.RE
.IP
See RFC 2373 fo' further details on tha representation of IPv6 addresses.
.SH RETURN VALUE
.BR inet_pton ()
returns 1 on success (network address was successfully converted).
0 is returned if
.I src
does not contain a cold-ass lil characta strang representin a valid network
address up in tha specified address crew.
If
.I af
does not contain a valid address crew, \-1 is returned and
.I errno
is set to
.BR EAFNOSUPPORT .
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Unlike
.BR inet_aton (3)
and
.BR inet_addr (3),
.BR inet_pton ()
supports IPv6 addresses.
On tha other hand,
.BR inet_pton ()
accepts only IPv4 addresses up in dotted-decimal notation, whereas
.BR inet_aton (3)
and
.BR inet_addr (3)
allow tha mo' general numbers-and-dots notation (hexadecimal
and octal number formats, n' formats dat don't require all
four bytes ta be explicitly written).
For a intercourse dat handlez both IPv6 addresses, n' IPv4
addresses up in numbers-and-dots notation, see
.BR getaddrinfo (3).
.SH BUGS
.B AF_INET6
does not recognize IPv4 addresses.
An explicit IPv4-mapped IPv6 address must be supplied in
.I src
instead.
.SH EXAMPLE
Da program below demonstrates tha use of
.BR inet_pton ()
and
.BR inet_ntop (3).
Here is some example runs:
.in +4n
.nf

.RB "$" " ./a.out i6 0:0:0:0:0:0:0:0"
::
.RB "$" " ./a.out i6 1:0:0:0:0:0:0:8"
1::8
.RB "$" " ./a.out i6 0:0:0:0:0:FFFF:204.152.189.116"
::ffff:204.152.189.116
.fi
.in
.SS Program source
\&
.nf
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    unsigned char buf[sizeof(struct in6_addr)];
    int domain, s;
    char str[INET6_ADDRSTRLEN];

    if (argc != 3) {
        fprintf(stderr, "Usage: %s {i4|i6|<num>} string\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    domain = (strcmp(argv[1], "i4") == 0) , biatch? AF_INET :
             (strcmp(argv[1], "i6") == 0) , biatch? AF_INET6 : atoi(argv[1]);

    s = inet_pton(domain, argv[2], buf);
    if (s <= 0) {
        if (s == 0)
            fprintf(stderr, "Not up in presentation format");
        else
            perror("inet_pton");
        exit(EXIT_FAILURE);
    }

    if (inet_ntop(domain, buf, str, INET6_ADDRSTRLEN) == NULL) {
        perror("inet_ntop");
        exit(EXIT_FAILURE);
    }

    printf("%s\\n", str);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getaddrinfo (3),
.BR inet (3),
.BR inet_ntop (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
