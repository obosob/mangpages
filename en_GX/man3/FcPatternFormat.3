.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "FcPatternFormat" "3" "11 10æœˆ 2013" "" ""
.SH NAME
FcPatternFormat \- Format a pattern tha fuck into a strang accordin ta a gangbangin' format specifier
.SH SYNOPSIS
.nf
\fB#include <fontconfig/fontconfig.h>
.sp
FcChar8 * FcPatternFormat (FcPattern *\fIpat\fB, const FcChar8 *\fIformat\fB);
.fi\fR
.SH "DESCRIPTION"
.PP
Converts given pattern \fIpat\fR tha fuck into text busted lyrics bout by
the format specifier \fIformat\fR\&.
Da return value refers ta newly allocated memory which should be freed by the
calla rockin free(), or NULL if \fIformat\fR is invalid.
.PP
Da format is loosely modeled afta printf-style format string.
Da format strang is composed of zero or mo' directives: ordinary
charactas (not "%"), which is copied unchanged ta tha output stream;
and tags which is interpreted ta construct text from tha pattern up in a
variety of ways (explained below).
Special charactas can be escaped
usin backslash. C-strin steez special charactas like \\n n' \\r are
also supported (this is useful when tha format strang aint a C string
literal).
It be advisable ta always escape curly braces that
are meant ta be copied ta tha output as ordinary characters.
.PP
Each tag is introduced by tha characta "%",
followed by a optionizzle minimum field width,
followed by tag contents up in curly braces ({}).
If tha minimum field width value is provided tha tag
will be expanded n' tha result padded ta big up tha minimum width.
If tha minimum field width is positive, tha paddin will right-align
the text. Negatizzle field width will left-align.
Da rest of dis section raps bout various supported tag contents
and they expansion.
.PP
A \fIsimple\fR tag
is one where tha content be a identifier n' shit. When simple
tags is expanded, tha named identifier is ghon be looked up in
\fIpattern\fR n' tha resultin list of joints returned,
joined together rockin comma. For example, ta print tha crew name n' steez of the
pattern, use tha format "%{family} %{style}\\n". To extend tha crew column
to forty charactas use "%-40{family}%{style}\\n".
.PP
Simple tags expand ta list of all joints fo' a element. To only chizzle
one of tha joints, one can index rockin tha syntax "%{elt[idx]}". For example,
to git tha straight-up original gangsta crew name only, use "%{family[0]}".
.PP
If a simple tag endz wit "=" n' tha element is found up in tha pattern, the
name of tha element followed by "=" is ghon be output before tha list of joints.
For example, "%{weight=}" may expand ta tha strang "weight=80". Or ta tha empty
strin if \fIpattern\fR aint gots weight set.
.PP
If a simple tag starts wit ":" n' tha element is found up in tha pattern, ":"
will be printed first. For example, combinin dis wit tha =, tha format
"%{:weight=}" may expand ta ":weight=80" or ta tha empty string
if \fIpattern\fR aint gots weight set.
.PP
If a simple tag gotz nuff tha strang ":-", tha rest of tha the tag contents
will be used as a thugged-out default string. Da default strang is output if tha element
is not found up in tha pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. For example, tha format
"%{:weight=:-123}" may expand ta ":weight=80" or ta tha string
":weight=123" if \fIpattern\fR aint gots weight set.
.PP
A \fIcount\fR tag
is one dat starts wit tha characta "#" followed by a element
name, n' expandz ta tha number of joints fo' tha element up in tha pattern.
For example, "%{#family}" expandz ta tha number of crew names
\fIpattern\fR has set, which may be zero.
.PP
A \fIsub-expression\fR tag
is one dat expandz a sub-expression. I aint talkin' bout chicken n' gravy biatch. Da tag contents
are tha sub-expression ta expand placed inside another set of curly braces.
Sub-expression tags is useful fo' alignin a entire sub-expression, or to
apply convertas (explained later) ta tha entire sub-expression output.
For example, tha format "%40{{%{family} %{style}}}" expandz tha sub-expression
to construct tha crew name followed by tha style, then takes tha entire
strin n' padz it on tha left ta be at least forty characters.
.PP
A \fIfilter-out\fR tag
is one startin wit tha characta "-" followed by a
comma-separated list of element names, followed by a sub-expression enclosed
in curly braces. Da sub-expression is ghon be expanded but wit a pattern that
has tha listed elements removed from dat shit.
For example, tha format "%{-size,pixelsize{sub-expr}}" will expand "sub-expr"
with \fIpattern\fR sans tha size n' pixelsize elements.
.PP
A \fIfilter-in\fR tag
is one startin wit tha characta "+" followed by a
comma-separated list of element names, followed by a sub-expression enclosed
in curly braces. Da sub-expression is ghon be expanded but wit a pattern that
only has tha listed elements from tha surroundin pattern.
For example, tha format "%{+family,familylang{sub-expr}}" will expand "sub-expr"
with a sub-pattern consistin only tha crew n' crew lang elements of
\fIpattern\fR\&.
.PP
A \fIconditional\fR tag
is one startin wit tha characta "?" followed by a
comma-separated list of element conditions, followed by two sub-expression
enclosed up in curly braces fo' realz. An element condizzle can be a element name,
in which case it tests whether tha element is defined up in pattern, or
the characta "!" followed by a element name, up in which case tha test
is negated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da conditionizzle passes if all tha element conditions pass.
Da tag expandz tha straight-up original gangsta sub-expression if tha conditionizzle passes, and
expandz tha second sub-expression otherwise.
For example, tha format "%{?size,dpi,!pixelsize{pass}{fail}}" will expand
to "pass" if \fIpattern\fR has size n' dpi elements but
no pixelsize element, n' ta "fail" otherwise.
.PP
An \fIenumerate\fR tag
is one startin wit tha strang "[]" followed by a
comma-separated list of element names, followed by a sub-expression enclosed
in curly braces. Da list of joints fo' tha named elements is strutted in
parallel n' tha sub-expression expanded each time wit a pattern just having
a single value fo' dem elements, startin from tha straight-up original gangsta value and
continuin as long as any of dem elements has a value.
For example, tha format "%{[]family,familylang{%{family} (%{familylang})\\n}}"
will expand tha pattern "%{family} (%{familylang})\\n" wit a pattern
havin only tha straight-up original gangsta value of tha crew n' crewlang elements, then expands
it wit tha second joints, then tha third, etc.
.PP
As a special case, if a enumerate tag has only one element, n' dat element
has only one value up in tha pattern, n' dat value iz of type FcLangSet, the
individual languages up in tha language set is enumerated.
.PP
A \fIbuiltin\fR tag
is one startin wit tha characta "=" followed by a funky-ass builtin
name. Da followin builtins is defined:
.TP
\fBunparse\fR
Expandz ta tha result of callin FcNameUnparse() on tha pattern.
.TP
\fBfcmatch\fR
Expandz ta tha output of tha default output format of tha fc-match
command on tha pattern, without tha final newline.
.TP
\fBfclist\fR
Expandz ta tha output of tha default output format of tha fc-list
command on tha pattern, without tha final newline.
.TP
\fBfccat\fR
Expandz ta tha output of tha default output format of tha fc-cat
command on tha pattern, without tha final newline.
.TP
\fBpkgkit\fR
Expandz ta tha list of PackageKit font() tags fo' tha pattern.
Currently dis includes tags fo' each crew name, n' each language
from tha pattern, enumerated n' sanitized tha fuck into a set of tags terminated
by newline. Package pimpment systems can use these tags ta tag their
packages accordingly.
.PP
For example, tha format "%{+family,style{%{=unparse}}}\\n" will expand
to a unparsed name containin only tha crew n' steez element joints
from \fIpattern\fR\&.
.PP
Da contentz of any tag can be followed by a set of zero or more
\fIconverter\fRs fo' realz. A converta is specified by the
characta "|" followed by tha converta name n' arguments, n' you can put dat on yo' toast. The
followin convertas is defined:
.TP
\fBbasename\fR
Replaces text wit tha thangs up in dis biatch of callin FcStrBasename() on dat shit.
.TP
\fBdirname\fR
Replaces text wit tha thangs up in dis biatch of callin FcStrDirname() on dat shit.
.TP
\fBdowncase\fR
Replaces text wit tha thangs up in dis biatch of callin FcStrDowncase() on dat shit.
.TP
\fBshescape\fR
Escapes text fo' one level of shell expansion.
(Escapes single-quotes, also encloses text up in single-quotes.)
.TP
\fBcescape\fR
Escapes text such dat it can be used as part of a C strang literal.
(Escapes backslash n' double-quotes.)
.TP
\fBxmlescape\fR
Escapes text such dat it can be used up in XML n' HTML.
(Escapes less-than, pimped outer-than, n' ampersand.)
.TP
\fBdelete(\fIchars\fB)\fR
Deletes all occurrencez of each of tha charactas up in \fIchars\fR
from tha text.
FIXME: This converta aint UTF-8 aware yet.
.TP
\fBescape(\fIchars\fB)\fR
Escapes all occurrencez of each of tha charactas up in \fIchars\fR
by prependin it by tha straight-up original gangsta characta up in \fIchars\fR\&.
FIXME: This converta aint UTF-8 aware yet.
.TP
\fBtranslate(\fIfrom\fB,\fIto\fB)\fR
Translates all occurrencez of each of tha charactas up in \fIfrom\fR
by replacin dem wit they correspondin characta up in \fIto\fR\&.
If \fIto\fR has fewer charactas than
\fIfrom\fR, it is ghon be extended by repeatin its last
character.
FIXME: This converta aint UTF-8 aware yet.
.PP
For example, tha format "%{family|downcase|delete( )}\\n" will expand
to tha jointz of tha crew element up in \fIpattern\fR,
lower-cased n' wit spaces removed.
.SH "VERSION"
.PP
Fontconfig version 2.11.0
