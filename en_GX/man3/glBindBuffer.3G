'\" t
.\"     Title: glBindBuffer
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLBINDBUFFER" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBindBuffer \- bind a named buffer object
.SH "C SPECIFICATION"
.HP \w'void\ glBindBuffer('u
.BI "void glBindBuffer(GLenum\ " "target" ", GLuint\ " "buffer" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies tha target ta which tha buffer object is bound\&. Da symbolic constant must be
\fBGL_ARRAY_BUFFER\fR,
\fBGL_ATOMIC_COUNTER_BUFFER\fR,
\fBGL_COPY_READ_BUFFER\fR,
\fBGL_COPY_WRITE_BUFFER\fR,
\fBGL_DRAW_INDIRECT_BUFFER\fR,
\fBGL_DISPATCH_INDIRECT_BUFFER\fR,
\fBGL_ELEMENT_ARRAY_BUFFER\fR,
\fBGL_PIXEL_PACK_BUFFER\fR,
\fBGL_PIXEL_UNPACK_BUFFER\fR,
\fBGL_SHADER_STORAGE_BUFFER\fR,
\fBGL_TEXTURE_BUFFER\fR,
\fBGL_TRANSFORM_FEEDBACK_BUFFER\fR, or
\fBGL_UNIFORM_BUFFER\fR\&.
.RE
.PP
\fIbuffer\fR
.RS 4
Specifies tha name of a funky-ass buffer object\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglBindBuffer\fR
bindz a funky-ass buffer object ta tha specified buffer bindin point\&. Calling
\fBglBindBuffer\fR
with
\fItarget\fR
set ta one of tha accepted symbolic constants and
\fIbuffer\fR
set ta tha name of a funky-ass buffer object bindz dat buffer object name ta tha target\&. If no buffer object wit name
\fIbuffer\fR
exists, one is pimped wit dat name\&. When a funky-ass buffer object is bound ta a target, tha previous bindin fo' dat target be automatically broken\&.
.PP
Buffer object names is unsigned integers\&. Da value zero is reserved yo, but there is no default buffer object fo' each buffer object target\&. Instead,
\fIbuffer\fR
set ta zero effectively unbindz any buffer object previously bound, n' restores client memory usage fo' dat buffer object target (if supported fo' dat target)\&. Buffer object names n' tha correspondin buffer object contents is local ta tha shared object space of tha current GL renderin context; two renderin contexts share buffer object names only if they explicitly enable pluggin between contexts all up in tha appropriate GL windows intercourses functions\&.
.PP
\fBglGenBuffers\fR()
must be used ta generate a set of unused buffer object names\&.
.PP
Da state of a funky-ass buffer object immediately afta it is first bound be a unmapped zero\-sized memory buffer with
\fBGL_READ_WRITE\fR
access and
\fBGL_STATIC_DRAW\fR
usage\&.
.PP
While a non\-zero buffer object name is bound, GL operations on tha target ta which it is bound affect tha bound buffer object, n' queriez of tha target ta which it is bound return state from tha bound buffer object\&. While buffer object name zero is bound, as up in tha initial state, attempts ta modify or query state on tha target ta which it is bound generates an
\fBGL_INVALID_OPERATION\fR
error\&.
.PP
When a non\-zero buffer object is bound ta the
\fBGL_ARRAY_BUFFER\fR
target, tha vertex array pointa parameta is interpreted as a offset within tha buffer object measured up in basic machine units\&.
.PP
When a non\-zero buffer object is bound ta the
\fBGL_DRAW_INDIRECT_BUFFER\fR
target, parametas fo' draws issued through
\fBglDrawArraysIndirect\fR()
and
\fBglDrawElementsIndirect\fR()
are sourced from tha specified offset up in dat buffer object\*(Aqs data store\&.
.PP
When a non\-zero buffer object is bound ta the
\fBGL_DISPATCH_INDIRECT_BUFFER\fR
target, tha parametas fo' compute dispatches issued through
\fBglDispatchComputeIndirect\fR()
are sourced from tha specified offset up in dat buffer object\*(Aqs data store\&.
.PP
While a non\-zero buffer object is bound ta the
\fBGL_ELEMENT_ARRAY_BUFFER\fR
target, tha indices parameta of
\fBglDrawElements\fR(),
\fBglDrawElementsInstanced\fR(),
\fBglDrawElementsBaseVertex\fR(),
\fBglDrawRangeElements\fR(),
\fBglDrawRangeElementsBaseVertex\fR(),
\fBglMultiDrawElements\fR(), or
\fBglMultiDrawElementsBaseVertex\fR()
is interpreted as a offset within tha buffer object measured up in basic machine units\&.
.PP
While a non\-zero buffer object is bound ta the
\fBGL_PIXEL_PACK_BUFFER\fR
target, tha followin commandz is affected:
\fBglGetCompressedTexImage\fR(),
\fBglGetTexImage\fR(), and
\fBglReadPixels\fR()\&. Da pointa parameta is interpreted as a offset within tha buffer object measured up in basic machine units\&.
.PP
While a non\-zero buffer object is bound ta the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target, tha followin commandz is affected:
\fBglCompressedTexImage1D\fR(),
\fBglCompressedTexImage2D\fR(),
\fBglCompressedTexImage3D\fR(),
\fBglCompressedTexSubImage1D\fR(),
\fBglCompressedTexSubImage2D\fR(),
\fBglCompressedTexSubImage3D\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(), and
\fBglTexSubImage3D\fR()\&. Da pointa parameta is interpreted as a offset within tha buffer object measured up in basic machine units\&.
.PP
Da buffer targets
\fBGL_COPY_READ_BUFFER\fR
and
\fBGL_COPY_WRITE_BUFFER\fR
are provided ta allow
\fBglCopyBufferSubData\fR()
to be used without disturbin tha state of other bindings\& yo. However,
\fBglCopyBufferSubData\fR()
may be used wit any pair of buffer bindin points\&.
.PP
The
\fBGL_TRANSFORM_FEEDBACK_BUFFER\fR
buffer bindin point may be passed to
\fBglBindBuffer\fR yo, but aint gonna directly affect transform feedback state\&. Instead, tha indexed
\fBGL_TRANSFORM_FEEDBACK_BUFFER\fR
bindings must be used all up in a cold-ass lil call to
\fBglBindBufferBase\fR()
or
\fBglBindBufferRange\fR()\&. This will affect tha generic
\fBGL_TRANSFORM_FEEDABCK_BUFFER\fR
binding\&.
.PP
Likewise, the
\fBGL_UNIFORM_BUFFER\fR,
\fBGL_ATOMIC_COUNTER_BUFFER\fR
and
\fBGL_SHADER_STORAGE_BUFFER\fR
buffer bindin points may be used yo, but do not directly affect uniform buffer, atomic counta buffer or shader storage buffer state, respectively\&.
\fBglBindBufferBase\fR()
or
\fBglBindBufferRange\fR()
must be used ta bind a funky-ass buffer ta a indexed uniform buffer, atomic counta buffer or shader storage buffer bindin point\&.
.PP
A buffer object bindin pimped with
\fBglBindBuffer\fR
remains actizzle until a gangbangin' finger-lickin' different buffer object name is bound ta tha same target, or until tha bound buffer object is deleted with
\fBglDeleteBuffers\fR()\&.
.PP
Once pimped, a named buffer object may be re\-bound ta any target as often as needed\&. But fuck dat shiznit yo, tha word on tha street is dat tha GL implementation may make chizzlez bout how tha fuck ta optimize tha storage of a funky-ass buffer object based on its initial bindin target\&.
.SH "NOTES"
.PP
The
\fBGL_COPY_READ_BUFFER\fR,
\fBGL_UNIFORM_BUFFER\fR
and
\fBGL_TEXTURE_BUFFER\fR
targets is available only if tha GL version is 3\&.1 or pimped outer\&.
.PP
The
\fBGL_ATOMIC_COUNTER_BUFER\fR
target be available only if tha GL version is 4\&.2 or pimped outer\&.
.PP
The
\fBGL_DISPATCH_INDIRECT_BUFFER\fR
and
\fBGL_SHADER_STORAGE_BUFFER\fR
targets is available only if tha GL version is 4\&.3 or pimped outer\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not one of tha allowable joints\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIbuffer\fR
is not a name previously returned from a cold-ass lil call to
\fBglGenBuffers\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_ARRAY_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_ATOMIC_COUNTER_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_COPY_READ_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_COPY_WRITE_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_DRAW_INDIRECT_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_DISPATCH_INDIRECT_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_ELEMENT_ARRAY_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_PACK_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_SHADER_STORAGE_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_TRANSFORM_FEEDBACK_BUFFER_BINDING\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNIFORM_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglGenBuffers\fR(),
\fBglBindBufferBase\fR(),
\fBglBindBufferRange\fR(),
\fBglMapBuffer\fR(),
\fBglUnmapBuffer\fR(),
\fBglDeleteBuffers\fR(),
\fBglGet\fR(),
\fBglIsBuffer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2005 Addison\-Wesley\&. Copyright
\(co
2010\-2011 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
