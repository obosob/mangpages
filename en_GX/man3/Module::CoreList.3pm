.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::CoreList 3pm"
.TH Module::CoreList 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::CoreList \- what tha fuck modulez shipped wit versionz of perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Module::CoreList;
\&
\& print $Module::CoreList::version{5.00503}{CPAN}; # prints 1.48
\&
\& print Module::CoreList\->first_release(\*(AqFile::Spec\*(Aq);         # prints 5.00405
\& print Module::CoreList\->first_release_by_date(\*(AqFile::Spec\*(Aq); # prints 5.005
\& print Module::CoreList\->first_release(\*(AqFile::Spec\*(Aq, 0.82);   # prints 5.006001
\&
\& if (Module::CoreList::is_core(\*(AqFile::Spec\*(Aq)) {
\&   print "File::Spec be a cold-ass lil core module\en";
\& }
\&
\& print join \*(Aq, \*(Aq, Module::CoreList\->find_modules(qr/Data/);
\&    # prints \*(AqData::Dumper\*(Aq
\& print join \*(Aq, \*(Aq, Module::CoreList\->find_modules(qr/test::h.*::.*s/i, 5.008008);
\&    # prints \*(AqTest::Harness::Assert, Test::Harness::Straps\*(Aq
\&
\& print join ", ", @{ $Module::CoreList::families{5.005} };
\&    # prints "5.005, 5.00503, 5.00504"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Module::CoreList serves up shiznit on which core n' dual-life modulez shipped
with each version of perl.
.PP
It serves up a fuckin shitload of mechanizzlez fo' queryin dis shiznit.
.PP
There be a utilitizzle called corelist provided wit dis module
which be a cold-ass lil convenient way of queryin from tha command-line.
.PP
There be a gangbangin' functionizzle programmin \s-1API\s0 available fo' programmers ta query
information.
.PP
Programmers may also query tha contained hash structures ta find relevant
information.
.SH "FUNCTIONS API"
.IX Header "FUNCTIONS API"
These is tha functions dat is available, they may either be called as functions or class methods:
.PP
.Vb 1
\&  Module::CoreList::first_release(\*(AqFile::Spec\*(Aq); # as a gangbangin' function
\&
\&  Module::CoreList\->first_release(\*(AqFile::Spec\*(Aq); # class method
.Ve
.ie n .IP """first_release( MODULE )""" 4
.el .IP "\f(CWfirst_release( MODULE )\fR" 4
.IX Item "first_release( MODULE )"
Behaviour since version 2.11
.Sp
Requires a \s-1MODULE\s0 name as a argument, returns tha perl version when dat module first
appeared up in core as ordered by perl version number or undef ( up in scalar context )
or a empty list ( up in list context ) if dat module aint up in core.
.ie n .IP """first_release_by_date( MODULE )""" 4
.el .IP "\f(CWfirst_release_by_date( MODULE )\fR" 4
.IX Item "first_release_by_date( MODULE )"
Requires a \s-1MODULE\s0 name as a argument, returns tha perl version when dat module first
appeared up in core as ordered by release date or undef ( up in scalar context )
or a empty list ( up in list context ) if dat module aint up in core.
.ie n .IP """find_modules( REGEX, [ LIST OF PERLS ] )""" 4
.el .IP "\f(CWfind_modules( REGEX, [ LIST OF PERLS ] )\fR" 4
.IX Item "find_modules( REGEX, [ LIST OF PERLS ] )"
Takes a regex as a argument, returns a list of modulez dat match tha regex given.
If only a regex is provided applies ta all modulez up in all perl versions. Optionally
you may provide a list of perl versions ta limit tha regex search.
.ie n .IP """find_version( PERL_VERSION )""" 4
.el .IP "\f(CWfind_version( PERL_VERSION )\fR" 4
.IX Item "find_version( PERL_VERSION )"
Takes a perl version as a argument. Returns dat perl version if it exists or \f(CW\*(C`undef\*(C'\fR
otherwise.
.ie n .IP """is_core( MODULE, [ MODULE_VERSION, [ PERL_VERSION ] ] )""" 4
.el .IP "\f(CWis_core( MODULE, [ MODULE_VERSION, [ PERL_VERSION ] ] )\fR" 4
.IX Item "is_core( MODULE, [ MODULE_VERSION, [ PERL_VERSION ] ] )"
Available up in version 2.99 n' above.
.Sp
Returns legit if \s-1MODULE\s0 was bundled wit tha specified version of Perl.
Yo ass can optionally specify a minimum version of tha module,
and can also specify a version of Perl.
If a version of Perl aint specified,
\&\f(CW\*(C`is_core()\*(C'\fR will use tha version of Perl dat is hustlin (ie \f(CW$^V\fR).
.Sp
If you wanna specify tha version of Perl yo, but couldn't give a fuckin shiznit about
the version of tha module, pass \f(CW\*(C`undef\*(C'\fR fo' tha module version:
.ie n .IP """is_deprecated( MODULE, PERL_VERSION )""" 4
.el .IP "\f(CWis_deprecated( MODULE, PERL_VERSION )\fR" 4
.IX Item "is_deprecated( MODULE, PERL_VERSION )"
Available up in version 2.22 n' above.
.Sp
Returns legit if \s-1MODULE\s0 is marked as deprecated up in \s-1PERL_VERSION. \s0 If \s-1PERL_VERSION\s0 is
omitted, it defaults ta tha current version of Perl.
.ie n .IP """deprecated_in( MODULE )""" 4
.el .IP "\f(CWdeprecated_in( MODULE )\fR" 4
.IX Item "deprecated_in( MODULE )"
Available up in version 2.77 n' above.
.Sp
Returns tha straight-up original gangsta \s-1PERL_VERSION\s0 where tha \s-1MODULE\s0 was marked as deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Returns \f(CW\*(C`undef\*(C'\fR
if tha \s-1MODULE\s0 has not been marked as deprecated.
.ie n .IP """removed_from( MODULE )""" 4
.el .IP "\f(CWremoved_from( MODULE )\fR" 4
.IX Item "removed_from( MODULE )"
Available up in version 2.32 n' above
.Sp
Takes a module name as a argument, returns tha straight-up original gangsta perl version where dat module
was removed from core. Returns undef if tha given module was never up in core or remains
in core.
.ie n .IP """removed_from_by_date( MODULE )""" 4
.el .IP "\f(CWremoved_from_by_date( MODULE )\fR" 4
.IX Item "removed_from_by_date( MODULE )"
Available up in version 2.32 n' above
.Sp
Takes a module name as a argument, returns tha straight-up original gangsta perl version by release date where dat module
was removed from core. Returns undef if tha given module was never up in core or remains
in core.
.ie n .IP """changes_between( PERL_VERSION, PERL_VERSION )""" 4
.el .IP "\f(CWchanges_between( PERL_VERSION, PERL_VERSION )\fR" 4
.IX Item "changes_between( PERL_VERSION, PERL_VERSION )"
Available up in version 2.66 n' above.
.Sp
Given two perl versions, dis returns a list of pairs describin tha chizzlez in
core module content between em.  Da list is suitable fo' storin up in a hash.
Da keys is library names n' tha joints is hashrefs.  Each hashref has an
entry fo' one or both of \f(CW\*(C`left\*(C'\fR n' \f(CW\*(C`right\*(C'\fR, givin tha versionz of the
library up in each of tha left n' right perl distributions.
.Sp
For example, it might return these data (among others) fo' tha difference
between 5.008000 n' 5.008001:
.Sp
.Vb 4
\&  \*(AqPod::ParseLink\*(Aq  => { left => \*(Aq1.05\*(Aq, right => \*(Aq1.06\*(Aq },
\&  \*(AqPod::ParseUtils\*(Aq => { left => \*(Aq0.22\*(Aq, right => \*(Aq0.3\*(Aq  },
\&  \*(AqPod::Perldoc\*(Aq    => {                 right => \*(Aq3.10\*(Aq },
\&  \*(AqPod::Perldoc::BaseTo\*(Aq => {            right => undef  },
.Ve
.Sp
This shows our asses two libraries bein updated n' two bein added, one of which has
an undefined version up in tha right-hand side version.
.SH "DATA STRUCTURES"
.IX Header "DATA STRUCTURES"
These is tha hash data structures dat is available:
.ie n .IP "%Module::CoreList::version" 4
.el .IP "\f(CW%Module::CoreList::version\fR" 4
.IX Item "%Module::CoreList::version"
A hash of hashes dat is keyed on perl version as indicated
in $].  Da second level hash is module => version pairs.
.Sp
Note, it is possible fo' tha version of a module ta be unspecified,
whereby tha value is \f(CW\*(C`undef\*(C'\fR, so use \f(CW\*(C`exists $version{$foo}{$bar}\*(C'\fR if
thatz what tha fuck you testin for.
.Sp
Startin wit 2.10, tha special module name \f(CW\*(C`Unicode\*(C'\fR refers ta tha version of
the Unicode Characta Database bundled wit Perl.
.ie n .IP "%Module::CoreList::delta" 4
.el .IP "\f(CW%Module::CoreList::delta\fR" 4
.IX Item "%Module::CoreList::delta"
Available up in version 3.00 n' above.
.Sp
\&\f(CW%Module::CoreList::version\fR is implemented via \f(CW\*(C`Module::CoreList::TieHashDelta\*(C'\fR
usin dis hash of delta chizzles.
.Sp
It be a hash of hashes dat is keyed on perl version. I aint talkin' bout chicken n' gravy biatch. Each keyed hash gonna git the
followin keys:
.Sp
.Vb 3
\&  delta_from \- a previous perl version dat tha chizzlez is based on
\&  chizzled    \- a hash of module/versions dat have chizzled
\&  removed    \- a hash of modulez dat done been removed
.Ve
.ie n .IP "%Module::CoreList::released" 4
.el .IP "\f(CW%Module::CoreList::released\fR" 4
.IX Item "%Module::CoreList::released"
Keyed on perl version dis gotz nuff \s-1ISO\s0
formatted versionz of tha release dates, as gleaned from perlhist.
.ie n .IP "%Module::CoreList::families" 4
.el .IP "\f(CW%Module::CoreList::families\fR" 4
.IX Item "%Module::CoreList::families"
New, up in 1.96, a hash that
clustas known perl releases by they major versions.
.ie n .IP "%Module::CoreList::deprecated" 4
.el .IP "\f(CW%Module::CoreList::deprecated\fR" 4
.IX Item "%Module::CoreList::deprecated"
A hash of hashes keyed on perl version n' on module name.
If a module is defined it indicates dat that module is
deprecated up in dat perl version n' is scheduled fo' removal
from core at some future point.
.ie n .IP "%Module::CoreList::upstream" 4
.el .IP "\f(CW%Module::CoreList::upstream\fR" 4
.IX Item "%Module::CoreList::upstream"
A hash dat gotz nuff shiznit on where patches should be directed
for each core module.
.Sp
\&\s-1UPSTREAM\s0 indicates where patches should go. \f(CW\*(C`undef\*(C'\fR implies
that dis aint been discussed fo' tha module at hand.
\&\f(CW\*(C`blead\*(C'\fR indicates dat tha copy of tha module up in tha blead
sources is ta be considered canonical, \f(CW\*(C`cpan\*(C'\fR means dat the
module on \s-1CPAN\s0 is ta be patched first. \f(CW\*(C`first\-come\*(C'\fR means
that blead can be patched freely if it is up in sync wit the
latest release on \s-1CPAN.\s0
.ie n .IP "%Module::CoreList::bug_tracker" 4
.el .IP "\f(CW%Module::CoreList::bug_tracker\fR" 4
.IX Item "%Module::CoreList::bug_tracker"
A hash dat gotz nuff shiznit on tha appropriate bug tracker
for each core module.
.Sp
\&\s-1BUGS\s0 be a email or url ta post bug reports, n' you can put dat on yo' toast.  For modulez with
\&\s-1UPSTREAM\s0 => 'blead', use perl5\-porters@perl.org.  rt.cpan.org
appears ta automatically provide a \s-1URL\s0 fo' \s-1CPAN\s0 modules; any value
given here overrides tha default:
http://rt.cpan.org/Public/Dist/Display.html?Name=$ModuleName
.SH "CAVEATS"
.IX Header "CAVEATS"
Module::CoreList currently covers tha 5.000, 5.001, 5.002, 5.003_07,
5.004, 5.004_05, 5.005, 5.005_03, 5.005_04, 5.6.0, 5.6.1, 5.6.2, 5.7.3,
5.8.0, 5.8.1, 5.8.2, 5.8.3, 5.8.4, 5.8.5, 5.8.6, 5.8.7, 5.8.8, 5.8.9,
5.9.0, 5.9.1, 5.9.2, 5.9.3, 5.9.4, 5.9.5, 5.10.0, 5.10.1, 5.11.0, 5.11.1,
5.11.2, 5.11.3, 5.11.4, 5.11.5, 5.12.0, 5.12.1, 5.12.2, 5.12.3, 5.12.4,
5.12.5, 5.13.0, 5.13.1, 5.13.2, 5.13.3, 5.13.4, 5.13.5, 5.13.6, 5.13.7,
5.13.8, 5.13.9, 5.13.10, 5.13.11, 5.14.0, 5.14.1, 5.14.2 5.14.3, 5.14.4,
5.15.0, 5.15.1, 5.15.2, 5.15.3, 5.15.4, 5.15.5, 5.15.6, 5.15.7, 5.15.8,
5.15.9, 5.16.0, 5.16.1, 5.16.2, 5.16.3, 5.17.0, 5.17.1, 5.17.2, 5.17.3,
5.17.4, 5.17.5, 5.17.6, 5.17.7, 5.17.8, 5.17.9, 5.17.10, 5.17.11, 5.18.0,
5.19.0, 5.19.1, 5.19.2, 5.19.3, 5.19.4, 5.19.5, 5.19.6 n' 5.19.7 releasez of perl.
.SH "HISTORY"
.IX Header "HISTORY"
Moved ta Chizzlez file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Slick Rick Clamp <richardc@unixbeard.net>
.PP
Currently maintained by tha perl 5 portas <perl5\-porters@perl.org>.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2002\-2009 Slick Rick Clamp.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
corelist, Module::Info, perl, <http://perlpunks.de/corelist>
