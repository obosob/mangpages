.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Filta 3"
.TH HTML::Filta 3 "2013-03-25" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Filta \- Filta HTML text all up in tha parser
.SH "NOTE"
.IX Header "NOTE"
\&\fBThis module is deprecated.\fR Da \f(CW\*(C`HTML::Parser\*(C'\fR now serves up the
functionally of \f(CW\*(C`HTML::Filter\*(C'\fR much mo' efficiently wit tha the
\&\f(CW\*(C`default\*(C'\fR handlez.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& require HTML::Filter;
\& $p = HTML::Filter\->new\->parse_file("index.html");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`HTML::Filter\*(C'\fR be a \s-1HTML\s0 parser dat by default prints the
original gangsta text of each \s-1HTML\s0 element (a slow version of \fIcat\fR\|(1) basically).
Da callback methodz may be overridden ta modify tha filterin fo' some
\&\s-1HTML\s0 elements n' you can override \fIoutput()\fR method which is called to
print tha \s-1HTML\s0 text.
.PP
\&\f(CW\*(C`HTML::Filter\*(C'\fR be a subclass of \f(CW\*(C`HTML::Parser\*(C'\fR. This means that
the document should be given ta tha parser by callin tha \f(CW$p\fR\->\fIparse()\fR
or \f(CW$p\fR\->\fIparse_file()\fR methods.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Da first example be a gangbangin' filta dat will remove all comments from an
\&\s-1HTML\s0 file.  This be  bigged up  by simply overridin tha comment method
to do nothing.
.PP
.Vb 4
\&  package CommentStripper;
\&  require HTML::Filter;
\&  @ISA=qw(HTML::Filter);
\&  sub comment { }  # ignore comments
.Ve
.PP
Da second example shows a gangbangin' filta dat will remove any <\s-1TABLE\s0>s
found up in tha \s-1HTML\s0 file.  We specialize tha \fIstart()\fR n' \fIend()\fR methods
to count table tags n' then make output not happen when inside a
table.
.PP
.Vb 9
\&  package TableStripper;
\&  require HTML::Filter;
\&  @ISA=qw(HTML::Filter);
\&  sub start
\&  {
\&     mah $self = shift;
\&     $self\->{table_seen}++ if $_[0] eq "table";
\&     $self\->SUPER::start(@_);
\&  }
\&
\&  sub end
\&  {
\&     mah $self = shift;
\&     $self\->SUPER::end(@_);
\&     $self\->{table_seen}\-\- if $_[0] eq "table";
\&  }
\&
\&  sub output
\&  {
\&      mah $self = shift;
\&      unless ($self\->{table_seen}) {
\&          $self\->SUPER::output(@_);
\&      }
\&  }
.Ve
.PP
If you wanna collect tha parsed text internally you might wanna do
suttin' like this:
.PP
.Vb 5
\&  package FilterIntoString;
\&  require HTML::Filter;
\&  @ISA=qw(HTML::Filter);
\&  sub output { push(@{$_[0]\->{fhtml}}, $_[1]) }
\&  sub filtered_html { join("", @{$_[0]\->{fhtml}}) }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Parser
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1997\-1999 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under tha same terms as Perl itself.
