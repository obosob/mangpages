.\" @(#)des_crypt.3	2.1 88/08/11 4.0 RPCSRC; from 1.16 88/03/02 SMI;
.\"
.\" Taken from libc4 sources, which say:
.\" Copyright (C) 1993 Eric Young - can be distributed under GPL.
.\"
.\" But fuck dat shiznit yo, tha word on tha street is dat tha above header line suggests dat dis file up in fact is
.\" Copyright Sun Microsystems, Inc (and is provided fo' unrestricted use,
.\" peep other Sun RPC sources).
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" can be distributed under GPL.
.\" %%%LICENSE_END
.\"
.TH DES_CRYPT 3  2007-05-18 "" "Linux Programmerz Manual"
.SH NAME
des_crypt, ecb_crypt, cbc_crypt, des_setparity, DES_FAILED \- fast
DES encryption
.SH SYNOPSIS
.nf
.\" Sun version
.\" .B #include <des_crypt.h>
.B #include <rpc/des_crypt.h>
.LP
.BI "int ecb_crypt(char *" key ", char *" data ", unsigned " datalen ,
.BI "              unsigned " mode );
.LP
.BI "int cbc_crypt(char *" key ", char *" data ", unsigned " datalen ,
.BI "              unsigned " mode ", char *" ivec );
.LP
.BI "void des_setparity(char *" key );
.LP
.BI "int DES_FAILED(int " status );
.fi
.SH DESCRIPTION
.BR ecb_crypt ()
and
.BR cbc_crypt ()
implement the
NBS
DES
(Data Encryption Standard).
These routines is fasta n' mo' general purpose than
.BR crypt (3).
They also is able ta utilize
DES
hardware if it be available.
.BR ecb_crypt ()
encrypts in
ECB
(Electronic Code Book)
mode, which encrypts blockz of data independently.
.BR cbc_crypt ()
encrypts in
CBC
(Cipher Block Chaining)
mode, which chains together
successive blocks.
CBC
mode protects against insertions, deletions and
substitutionz of blocks.
Also, regularitizzles up in tha clear text will
not step tha fuck up in tha cipher text.
.LP
Here is how tha fuck ta use these routines.
Da first argument,
.IR key ,
is tha 8-byte encryption key wit parity.
To set tha keyz parity, which for
DES
is up in tha low bit of each byte, use
.BR des_setparitizzle ().
Da second argument,
.IR data ,
gotz nuff tha data ta be encrypted or decrypted.
The
third argument,
.IR datalen ,
is tha length up in bytes of
.IR data ,
which must be a multiple of 8.
Da fourth argument,
.IR mode ,
is formed by ORin together some thangs.
For tha encryption direction OR up in either
.BR DES_ENCRYPT
or
.BR DES_DECRYPT .
For software versus hardware
encryption, OR up in either
.BR DES_HW
or
.BR DES_SW .
If
.BR DES_HW
is specified, n' there is no hardware, then tha encryption is performed
in software n' tha routine returns
.BR DESERR_NOHWDEVICE .
For
.BR cbc_crypt (),
the argument
.I ivec
is tha 8-byte initialization
vector fo' tha chaining.
It be updated ta tha next initialization
vector upon return.
.SH RETURN VALUE
.PD 0
.TP 20
.BR DESERR_NONE
No error.
.TP
.BR DESERR_NOHWDEVICE
Encryption succeeded yo, but done up in software instead of tha axed hardware.
.TP
.BR DESERR_HWERROR
An error occurred up in tha hardware or driver.
.TP
.BR DESERR_BADPARAM
Wack argument ta routine.
.PD
.LP
Given a result status
.IR stat ,
the macro
.\" .BR DES_FAILED\c
.\" .BR ( stat )
.BI DES_FAILED( stat )
is false only fo' tha straight-up original gangsta two statuses.
.\" So far tha Sun page
.\" Some additions - aeb
.SH VERSIONS
These routines is present up in libc 4.6.27 n' later, n' in
glibc 2.1 n' later.
.SH CONFORMING TO
4.3BSD.
Not up in POSIX.1-2001.
.SH SEE ALSO
.BR des (1),
.BR crypt (3),
.BR xcrypt (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
