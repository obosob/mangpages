.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_clear 3"
.TH SSL_clear 3 "2015-01-13" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_clear \- reset SSL object ta allow another connection
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& int SSL_clear(SSL *ssl);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reset \fBssl\fR ta allow another connection. I aint talkin' bout chicken n' gravy biatch fo' realz. All settings (method, ciphers,
BIOs) is kept.
.SH "NOTES"
.IX Header "NOTES"
SSL_clear is used ta prepare a \s-1SSL\s0 object fo' a freshly smoked up connection. I aint talkin' bout chicken n' gravy biatch. While all
settings is kept, a side effect is tha handlin of tha current \s-1SSL\s0 session.
If a session is still \fBopen\fR, it is considered wack n' is ghon be removed
from tha session cache, as required by \s-1RFC2246 fo' realz. A\s0 session is considered open,
if \fISSL_shutdown\fR\|(3) was not called fo' tha connection
or at least \fISSL_set_shutdown\fR\|(3) was used to
set tha \s-1SSL_SENT_SHUTDOWN\s0 state.
.PP
If a session was closed cleanly, tha session object is ghon be kept n' all
settings corresponding. This explicitly means, dat e.g. tha special method
used durin tha session is ghon be kept fo' tha next handshake. Right back up in yo muthafuckin ass. So if the
session was a TLSv1 session, a \s-1SSL\s0 client object will bust a TLSv1 client
method fo' tha next handshake n' a \s-1SSL\s0 server object will bust a TLSv1
server method, even if SSLv23_*_methodz was chosen on startup. This
will might lead ta connection failures (see \fISSL_new\fR\|(3))
for a thugged-out description of tha methodz properties.
.SH "WARNINGS"
.IX Header "WARNINGS"
\&\fISSL_clear()\fR resets tha \s-1SSL\s0 object ta allow fo' another connection. I aint talkin' bout chicken n' gravy biatch. The
reset operation however keeps nuff muthafuckin settingz of tha last sessions
(some of these settings was made automatically durin tha last
handshake). Well shiiiit, it only make sense fo' a freshly smoked up connection wit tha exact
same peer dat shares these settings, n' may fail if dat peer
changes its settings between connections. Use tha sequence
\&\fISSL_get_session\fR\|(3);
\&\fISSL_new\fR\|(3);
\&\fISSL_set_session\fR\|(3);
\&\fISSL_free\fR\|(3)
instead ta avoid such failures
(or simply \fISSL_free\fR\|(3); \fISSL_new\fR\|(3)
if session reuse aint desired).
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Da followin return joints can occur:
.ie n .IP "0" 4
.el .IP "\f(CW0\fR" 4
.IX Item "0"
Da \fISSL_clear()\fR operation could not be performed. Y'all KNOW dat shit, muthafucka! Peep tha error stack to
smoke up tha reason.
.ie n .IP "1" 4
.el .IP "\f(CW1\fR" 4
.IX Item "1"
Da \fISSL_clear()\fR operation was successful.
.PP
\&\fISSL_new\fR\|(3), \fISSL_free\fR\|(3),
\&\fISSL_shutdown\fR\|(3), \fISSL_set_shutdown\fR\|(3),
\&\fISSL_CTX_set_options\fR\|(3), \fIssl\fR\|(3),
\&\fISSL_CTX_set_client_cert_cb\fR\|(3)
