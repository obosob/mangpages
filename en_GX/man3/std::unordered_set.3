" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::unordered_set< _Value, _Hash, _Pred, _Alloc > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits std::__allow_copy_cons< bool >\&.
.SS "Public Types"

.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "typedef _Hashtable::key_type \fBkey_type\fP"
.br
.ti -1c
.RI "typedef _Hashtable::value_type \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef _Hashtable::hasher \fBhasher\fP"
.br
.ti -1c
.RI "typedef _Hashtable::key_equal \fBkey_equal\fP"
.br
.ti -1c
.RI "typedef _Hashtable::allocator_type \fBallocator_type\fP"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "typedef allocator_type::pointa \fBpointer\fP"
.br
.ti -1c
.RI "typedef 
.br
allocator_type::const_pointa \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef allocator_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef 
.br
allocator_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Hashtable::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Hashtable::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Hashtable::local_iterator \fBlocal_iterator\fP"
.br
.ti -1c
.RI "typedef 
.br
_Hashtable::const_local_iterator \fBconst_local_iterator\fP"
.br
.ti -1c
.RI "typedef _Hashtable::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Hashtable::difference_type \fBdifference_type\fP"
.br
.in -1c
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBunordered_set\fP (\fBsize_type\fP __n=10, const \fBhasher\fP &__hf=\fBhasher\fP(), const \fBkey_equal\fP &__eql=\fBkey_equal\fP(), const \fBallocator_type\fP &__a=\fBallocator_type\fP())"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBunordered_set\fP (_InputIterator __f, _InputIterator __l, \fBsize_type\fP __n=0, const \fBhasher\fP &__hf=\fBhasher\fP(), const \fBkey_equal\fP &__eql=\fBkey_equal\fP(), const \fBallocator_type\fP &__a=\fBallocator_type\fP())"
.br
.ti -1c
.RI "\fBunordered_set\fP (const \fBunordered_set\fP &)=default"
.br
.ti -1c
.RI "\fBunordered_set\fP (\fBunordered_set\fP &&)=default"
.br
.ti -1c
.RI "\fBunordered_set\fP (\fBinitializer_list\fP< \fBvalue_type\fP > __l, \fBsize_type\fP __n=0, const \fBhasher\fP &__hf=\fBhasher\fP(), const \fBkey_equal\fP &__eql=\fBkey_equal\fP(), const \fBallocator_type\fP &__a=\fBallocator_type\fP())"
.br
.ti -1c
.RI "\fBsize_type\fP \fBbucket\fP (const \fBkey_type\fP &__key) const "
.br
.ti -1c
.RI "\fBsize_type\fP \fBbucket_count\fP () const noexcept"
.br
.ti -1c
.RI "\fBsize_type\fP \fBbucket_size\fP (\fBsize_type\fP __n) const "
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "\fBsize_type\fP \fBcount\fP (const \fBkey_type\fP &__x) const "
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fBstd::pair\fP< \fBiterator\fP, bool > \fBemplace\fP (_Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. _Args> \fBiterator\fP \fBemplace_hint\fP (\fBconst_iterator\fP __pos, _Args &&\&.\&.\&.__args)"
.br
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.ti -1c
.RI "\fBsize_type\fP \fBerase\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase\fP (\fBconst_iterator\fP __first, \fBconst_iterator\fP __last)"
.br
.ti -1c
.RI "\fBallocator_type\fP \fBget_allocator\fP () const noexcept"
.br
.ti -1c
.RI "\fBhasher\fP \fBhash_function\fP () const "
.br
.ti -1c
.RI "template<typename _InputIterator > void \fBinsert\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBinitializer_list\fP< \fBvalue_type\fP > __l)"
.br
.ti -1c
.RI "\fBkey_equal\fP \fBkey_eq\fP () const "
.br
.ti -1c
.RI "float \fBload_factor\fP () const noexcept"
.br
.ti -1c
.RI "\fBsize_type\fP \fBmax_bucket_count\fP () const noexcept"
.br
.ti -1c
.RI "float \fBmax_load_factor\fP () const noexcept"
.br
.ti -1c
.RI "void \fBmax_load_factor\fP (float __z)"
.br
.ti -1c
.RI "\fBsize_type\fP \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "\fBunordered_set\fP & \fBoperator=\fP (const \fBunordered_set\fP &)=default"
.br
.ti -1c
.RI "\fBunordered_set\fP & \fBoperator=\fP (\fBunordered_set\fP &&)=default"
.br
.ti -1c
.RI "\fBunordered_set\fP & \fBoperator=\fP (\fBinitializer_list\fP< \fBvalue_type\fP > __l)"
.br
.ti -1c
.RI "void \fBrehash\fP (\fBsize_type\fP __n)"
.br
.ti -1c
.RI "void \fBreserve\fP (\fBsize_type\fP __n)"
.br
.ti -1c
.RI "\fBsize_type\fP \fBsize\fP () const noexcept"
.br
.ti -1c
.RI "void \fBswap\fP (\fBunordered_set\fP &__x)"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const noexcept"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBend\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const noexcept"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBstd::pair\fP< \fBiterator\fP, bool > \fBinsert\fP (const \fBvalue_type\fP &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< \fBiterator\fP, bool > \fBinsert\fP (\fBvalue_type\fP &&__x)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP __hint, const \fBvalue_type\fP &__x)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP __hint, \fBvalue_type\fP &&__x)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBerase\fP (\fBconst_iterator\fP __position)"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase\fP (\fBiterator\fP __it)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiterator\fP \fBfind\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBfind\fP (const \fBkey_type\fP &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBstd::pair\fP< \fBiterator\fP, \fBiterator\fP > \fBequal_range\fP (const \fBkey_type\fP &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< \fBconst_iterator\fP, 
.br
\fBconst_iterator\fP > \fBequal_range\fP (const \fBkey_type\fP &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBlocal_iterator\fP \fBbegin\fP (\fBsize_type\fP __n)"
.br
.ti -1c
.RI "\fBconst_local_iterator\fP \fBbegin\fP (\fBsize_type\fP __n) const "
.br
.ti -1c
.RI "\fBconst_local_iterator\fP \fBcbegin\fP (\fBsize_type\fP __n) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBlocal_iterator\fP \fBend\fP (\fBsize_type\fP __n)"
.br
.ti -1c
.RI "\fBconst_local_iterator\fP \fBend\fP (\fBsize_type\fP __n) const "
.br
.ti -1c
.RI "\fBconst_local_iterator\fP \fBcend\fP (\fBsize_type\fP __n) const "
.br
.in -1c
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _Value1 , typename _Hash1 , typename _Pred1 , typename _Alloc1 > bool \fBoperator==\fP (const \fBunordered_set\fP< _Value1, _Hash1, _Pred1, _Alloc1 > &, const \fBunordered_set\fP< _Value1, _Hash1, _Pred1, _Alloc1 > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>>class std::unordered_set< _Value, _Hash, _Pred, _Alloc >"
A standard container composed of unique keys (containin at most one of each key value) up in which tha elements' keys is tha elements theyselves\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Value\fP Type of key objects\&. 
.br
\fI_Hash\fP Hashin function object type, defaults ta hash<_Value>\&.
.br
\fI_Pred\fP Predicate function object type, defaults ta equal_to<_Value>\&.
.br
\fI_Alloc\fP Allocator type, defaults ta allocator<_Key>\&.
.RE
.PP
Meets tha requirementz of a \fCcontainer\fP, n' \fCunordered associatizzle container\fP
.PP
Base is _Hashtable, dispatched at compile time via template alias __uset_hashtable\&. 
.PP
Definizzle at line 93 of file unordered_set\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::allocator_type \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBallocator_type\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 106 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::const_iterator \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBconst_iterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 116 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::const_local_iterator \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBconst_local_iterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 118 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef allocator_type::const_pointa \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBconst_pointer\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 112 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef allocator_type::const_reference \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBconst_reference\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 114 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::difference_type \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBdifference_type\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 120 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::hasher \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBhasher\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 104 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::iterator \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBiterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 115 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::key_equal \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBkey_equal\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 105 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::key_type \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBkey_type\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 102 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::local_iterator \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBlocal_iterator\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 117 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef allocator_type::pointa \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBpointer\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 111 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef allocator_type::reference \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBreference\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 113 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::size_type \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBsize_type\fP"

.PP
Iterator-related typedefs\&. 
.PP
Definizzle at line 119 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> typedef _Hashtable::value_type \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBvalue_type\fP"

.PP
Public typedefs\&. 
.PP
Definizzle at line 103 of file unordered_set\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBunordered_set\fP (\fBsize_type\fP__n = \fC10\fP, const \fBhasher\fP &__hf = \fC\fBhasher\fP()\fP, const \fBkey_equal\fP &__eql = \fC\fBkey_equal\fP()\fP, const \fBallocator_type\fP &__a = \fC\fBallocator_type\fP()\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Default constructor creates no elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Initial number of buckets\&. 
.br
\fI__hf\fP A hash functor\&. 
.br
\fI__eql\fP A key equalitizzle functor\&. 
.br
\fI__a\fP An allocator object\&. 
.RE
.PP

.PP
Definizzle at line 132 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> template<typename _InputIterator > \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBunordered_set\fP (_InputIterator__f, _InputIterator__l, \fBsize_type\fP__n = \fC0\fP, const \fBhasher\fP &__hf = \fC\fBhasher\fP()\fP, const \fBkey_equal\fP &__eql = \fC\fBkey_equal\fP()\fP, const \fBallocator_type\fP &__a = \fC\fBallocator_type\fP()\fP)\fC [inline]\fP"

.PP
Buildz a unordered_set from a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP An input iterator\&. 
.br
\fI__last\fP An input iterator\&. 
.br
\fI__n\fP Minimal initial number of buckets\&. 
.br
\fI__hf\fP A hash functor\&. 
.br
\fI__eql\fP A key equalitizzle functor\&. 
.br
\fI__a\fP An allocator object\&.
.RE
.PP
Smoke a unordered_set consistin of copiez of tha elements from [__first,__last)\&. This is linear up in N (where N is distance(__first,__last))\&. 
.PP
Definizzle at line 153 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBunordered_set\fP (const \fBunordered_set\fP< _Value, _Hash, _Pred, _Alloc > &)\fC [default]\fP"

.PP
Copy constructor\&. 
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBunordered_set\fP (\fBunordered_set\fP< _Value, _Hash, _Pred, _Alloc > &&)\fC [default]\fP"

.PP
Move constructor\&. 
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::\fBunordered_set\fP (\fBinitializer_list\fP< \fBvalue_type\fP >__l, \fBsize_type\fP__n = \fC0\fP, const \fBhasher\fP &__hf = \fC\fBhasher\fP()\fP, const \fBkey_equal\fP &__eql = \fC\fBkey_equal\fP()\fP, const \fBallocator_type\fP &__a = \fC\fBallocator_type\fP()\fP)\fC [inline]\fP"

.PP
Buildz a unordered_set from a initializer_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP An initializer_list\&. 
.br
\fI__n\fP Minimal initial number of buckets\&. 
.br
\fI__hf\fP A hash functor\&. 
.br
\fI__eql\fP A key equalitizzle functor\&. 
.br
\fI__a\fP An allocator object\&.
.RE
.PP
Smoke a unordered_set consistin of copiez of tha elements up in tha list\&. This is linear up in N (where N is \fI__l\&.size()\fP)\&. 
.PP
Definizzle at line 178 of file unordered_set\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::begin ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha unordered_set\&. 
.PP
Definizzle at line 243 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha unordered_set\&. 
.PP
Definizzle at line 247 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBlocal_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::begin (\fBsize_type\fP__n)\fC [inline]\fP"

.PP
Returns a read-only (constant) iterator pointin ta tha straight-up original gangsta bucket element\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da bucket index\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A read-only local iterator\&. 
.RE
.PP

.PP
Definizzle at line 593 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_local_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::begin (\fBsize_type\fP__n) const\fC [inline]\fP"

.PP
Returns a read-only (constant) iterator pointin ta tha straight-up original gangsta bucket element\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da bucket index\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A read-only local iterator\&. 
.RE
.PP

.PP
Definizzle at line 597 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBsize_type\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::bucket_count () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha number of bucketz of tha unordered_set\&. 
.PP
Definizzle at line 559 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points ta tha straight-up original gangsta element up in tha unordered_set\&. 
.PP
Definizzle at line 270 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_local_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::cbegin (\fBsize_type\fP__n) const\fC [inline]\fP"

.PP
Returns a read-only (constant) iterator pointin ta tha straight-up original gangsta bucket element\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da bucket index\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A read-only local iterator\&. 
.RE
.PP

.PP
Definizzle at line 601 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::cend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha unordered_set\&. 
.PP
Definizzle at line 278 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_local_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::cend (\fBsize_type\fP__n) const\fC [inline]\fP"

.PP
Returns a read-only (constant) iterator pointin ta one past tha last bucket elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da bucket index\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A read-only local iterator\&. 
.RE
.PP

.PP
Definizzle at line 621 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> void \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::clear ()\fC [inline]\fP, \fC [noexcept]\fP"
Erases all elements up in a unordered_set\&. Note dat dis function only erases tha elements, n' dat if tha elements theyselves is pointers, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 471 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBsize_type\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::count (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Findz tha number of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of elements wit specified key\&.
.RE
.PP
This function only make sense fo' unordered_multisets; fo' unordered_set tha result will either be 0 (not present) or 1 (present)\&. 
.PP
Definizzle at line 534 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> template<typename\&.\&.\&. _Args> \fBstd::pair\fP<\fBiterator\fP, bool> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::emplace (_Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Attempts ta build n' bang a element tha fuck into tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__args\fP Arguments used ta generate a element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pair, of which tha straight-up original gangsta element be a iterator dat points ta tha possibly banged element, n' tha second be a funky-ass bool dat is legit if tha element was straight-up inserted\&.
.RE
.PP
This function attempts ta build n' bang a element tha fuck into tha unordered_set\& fo' realz. An unordered_set relies on unique keys n' thus a element is only banged if it aint already present up in tha unordered_set\&.
.PP
Insertion requires amortized constant time\&. 
.PP
Definizzle at line 300 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> template<typename\&.\&.\&. _Args> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::emplace_hint (\fBconst_iterator\fP__pos, _Args &&\&.\&.\&.__args)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP An iterator dat serves as a hint as ta where tha element should be inserted\&. 
.br
\fI__args\fP Arguments used ta generate tha element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha element wit key equivalent ta tha one generated from \fI__args\fP (may or may not be tha element itself)\&.
.RE
.PP
This function aint concerned bout whether tha insertion took place, n' thus do not return a funky-ass boolean like tha single-argument emplace() do\&. Note dat tha straight-up original gangsta parameta is only a hint n' can potentially improve tha performizzle of tha insertion process\& fo' realz. A wack hint would cause no gains up in efficiency\&.
.PP
For mo' on \fIhinting\fP, see: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html
.PP
Insertion requires amortized constant time\&. 
.PP
Definizzle at line 326 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> bool \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::empty () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns legit if tha unordered_set is empty\&. 
.PP
Definizzle at line 222 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::end ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha unordered_set\&. 
.PP
Definizzle at line 257 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::end () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator dat points one past tha last element up in tha unordered_set\&. 
.PP
Definizzle at line 261 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBlocal_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::end (\fBsize_type\fP__n)\fC [inline]\fP"

.PP
Returns a read-only (constant) iterator pointin ta one past tha last bucket elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da bucket index\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A read-only local iterator\&. 
.RE
.PP

.PP
Definizzle at line 613 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_local_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::end (\fBsize_type\fP__n) const\fC [inline]\fP"

.PP
Returns a read-only (constant) iterator pointin ta one past tha last bucket elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da bucket index\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A read-only local iterator\&. 
.RE
.PP

.PP
Definizzle at line 617 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::pair\fP<\fBiterator\fP, \fBiterator\fP> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::equal_range (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Findz a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators dat possibly points ta tha subsequence matchin given key\&.
.RE
.PP
This function probably only make sense fo' multisets\&. 
.PP
Definizzle at line 547 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::pair\fP<\fBconst_iterator\fP, \fBconst_iterator\fP> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::equal_range (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Findz a subsequence matchin given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators dat possibly points ta tha subsequence matchin given key\&.
.RE
.PP
This function probably only make sense fo' multisets\&. 
.PP
Definizzle at line 551 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::erase (\fBconst_iterator\fP__position)\fC [inline]\fP"

.PP
Erases a element from a unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP An iterator pointin ta tha element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha element immediately followin \fI__position\fP prior ta tha element bein erased\&. If no such element exists, end() is returned\&.
.RE
.PP
This function erases a element, pointed ta by tha given iterator, from a unordered_set\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 421 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::erase (\fBiterator\fP__it)\fC [inline]\fP"

.PP
Erases a element from a unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP An iterator pointin ta tha element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointin ta tha element immediately followin \fI__position\fP prior ta tha element bein erased\&. If no such element exists, end() is returned\&.
.RE
.PP
This function erases a element, pointed ta by tha given iterator, from a unordered_set\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 426 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBsize_type\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::erase (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Erases elements accordin ta tha provided key\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Key of element ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Da number of elements erased\&.
.RE
.PP
This function erases all tha elements located by tha given key from a unordered_set\&. For a unordered_set tha result of dis function can only be 0 (not present) or 1 (present)\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 443 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::erase (\fBconst_iterator\fP__first, \fBconst_iterator\fP__last)\fC [inline]\fP"

.PP
Erases a [__first,__last) range of elements from a unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator pointin ta tha start of tha range ta be erased\&. 
.br
\fI__last\fP Iterator pointin ta tha end of tha range ta be erased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Da iterator \fI__last\fP\&.
.RE
.PP
This function erases a sequence of elements from a unordered_set\&. Note dat dis function only erases tha element, n' dat if tha element is itself a pointer, tha pointed-to memory aint touched up in any way\&. Managin tha pointa is tha userz responsibility\&. 
.PP
Definizzle at line 461 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::find (const \fBkey_type\fP &__x)\fC [inline]\fP"

.PP
Tries ta locate a element up in a unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta sought-afta element, or end() if not found\&.
.RE
.PP
This function takes a key n' tries ta locate tha element wit which tha key matches\&. If successful tha function returns a iterator pointin ta tha sought afta element\&. If unsuccessful it returns tha past-the-end ( \fCend()\fP ) iterator\&. 
.PP
Definizzle at line 516 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBconst_iterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::find (const \fBkey_type\fP &__x) const\fC [inline]\fP"

.PP
Tries ta locate a element up in a unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be located\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointin ta sought-afta element, or end() if not found\&.
.RE
.PP
This function takes a key n' tries ta locate tha element wit which tha key matches\&. If successful tha function returns a iterator pointin ta tha sought afta element\&. If unsuccessful it returns tha past-the-end ( \fCend()\fP ) iterator\&. 
.PP
Definizzle at line 520 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBallocator_type\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::get_allocator () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha allocator object wit which tha unordered_set was constructed\&. 
.PP
Definizzle at line 215 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBhasher\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::hash_function () const\fC [inline]\fP"

.PP
Returns tha hash functor object wit which tha unordered_set was constructed\&. 
.PP
Definizzle at line 492 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::pair\fP<\fBiterator\fP, bool> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::insert (const \fBvalue_type\fP &__x)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pair, of which tha straight-up original gangsta element be a iterator dat points ta tha possibly banged element, n' tha second be a funky-ass bool dat is legit if tha element was straight-up inserted\&.
.RE
.PP
This function attempts ta bang a element tha fuck into tha unordered_set\& fo' realz. An unordered_set relies on unique keys n' thus a element is only banged if it aint already present up in tha unordered_set\&.
.PP
Insertion requires amortized constant time\&. 
.PP
Definizzle at line 344 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBstd::pair\fP<\fBiterator\fP, bool> \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::insert (\fBvalue_type\fP &&__x)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pair, of which tha straight-up original gangsta element be a iterator dat points ta tha possibly banged element, n' tha second be a funky-ass bool dat is legit if tha element was straight-up inserted\&.
.RE
.PP
This function attempts ta bang a element tha fuck into tha unordered_set\& fo' realz. An unordered_set relies on unique keys n' thus a element is only banged if it aint already present up in tha unordered_set\&.
.PP
Insertion requires amortized constant time\&. 
.PP
Definizzle at line 348 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::insert (\fBconst_iterator\fP__hint, const \fBvalue_type\fP &__x)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__hint\fP An iterator dat serves as a hint as ta where tha element should be inserted\&. 
.br
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha element wit key of \fI__x\fP (may or may not be tha element passed in)\&.
.RE
.PP
This function aint concerned bout whether tha insertion took place, n' thus do not return a funky-ass boolean like tha single-argument insert() do\&. Note dat tha straight-up original gangsta parameta is only a hint n' can potentially improve tha performizzle of tha insertion process\& fo' realz. A wack hint would cause no gains up in efficiency\&.
.PP
For mo' on \fIhinting\fP, see: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html
.PP
Insertion requires amortized constant\&. 
.PP
Definizzle at line 373 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBiterator\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::insert (\fBconst_iterator\fP__hint, \fBvalue_type\fP &&__x)\fC [inline]\fP"

.PP
Attempts ta bang a element tha fuck into tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__hint\fP An iterator dat serves as a hint as ta where tha element should be inserted\&. 
.br
\fI__x\fP Element ta be inserted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator dat points ta tha element wit key of \fI__x\fP (may or may not be tha element passed in)\&.
.RE
.PP
This function aint concerned bout whether tha insertion took place, n' thus do not return a funky-ass boolean like tha single-argument insert() do\&. Note dat tha straight-up original gangsta parameta is only a hint n' can potentially improve tha performizzle of tha insertion process\& fo' realz. A wack hint would cause no gains up in efficiency\&.
.PP
For mo' on \fIhinting\fP, see: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html
.PP
Insertion requires amortized constant\&. 
.PP
Definizzle at line 377 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> template<typename _InputIterator > void \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::insert (_InputIterator__first, _InputIterator__last)\fC [inline]\fP"

.PP
A template function dat attempts ta bang a range of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator pointin ta tha start of tha range ta be inserted\&. 
.br
\fI__last\fP Iterator pointin ta tha end of tha range\&.
.RE
.PP
Complexitizzle similar ta dat of tha range constructor\&. 
.PP
Definizzle at line 392 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> void \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::insert (\fBinitializer_list\fP< \fBvalue_type\fP >__l)\fC [inline]\fP"

.PP
Attempts ta bang a list of elements tha fuck into tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP A std::initializer_list<value_type> of elements ta be inserted\&.
.RE
.PP
Complexitizzle similar ta dat of tha range constructor\&. 
.PP
Definizzle at line 403 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBkey_equal\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::key_eq () const\fC [inline]\fP"

.PP
Returns tha key comparison object wit which tha unordered_set was constructed\&. 
.PP
Definizzle at line 498 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> float \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::load_factor () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha average number of elements per bucket\&. 
.PP
Definizzle at line 629 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBsize_type\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::max_bucket_count () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha maximum number of bucketz of tha unordered_set\&. 
.PP
Definizzle at line 564 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> float \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::max_load_factor () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns a positizzle number dat tha unordered_set tries ta keep tha load factor less than or equal to\&. 
.PP
Definizzle at line 635 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> void \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::max_load_factor (float__z)\fC [inline]\fP"

.PP
Change tha unordered_set maximum load factor\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__z\fP Da freshly smoked up maximum load factor\&. 
.RE
.PP

.PP
Definizzle at line 643 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBsize_type\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha maximum size of tha unordered_set\&. 
.PP
Definizzle at line 232 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBunordered_set\fP& \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::operator= (const \fBunordered_set\fP< _Value, _Hash, _Pred, _Alloc > &)\fC [default]\fP"

.PP
Copy assignment operator\&. 
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBunordered_set\fP& \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::operator= (\fBunordered_set\fP< _Value, _Hash, _Pred, _Alloc > &&)\fC [default]\fP"

.PP
Move assignment operator\&. 
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBunordered_set\fP& \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::operator= (\fBinitializer_list\fP< \fBvalue_type\fP >__l)\fC [inline]\fP"

.PP
Unordered_set list assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP An initializer_list\&.
.RE
.PP
This function fills a unordered_set wit copiez of tha elements up in tha initializer list \fI__l\fP\&.
.PP
Note dat tha assignment straight-up chizzlez tha unordered_set n' dat tha resultin unordered_setz size is tha same ol' dirty as tha number of elements assigned\&. Oldskool data may be lost\&. 
.PP
Definizzle at line 206 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> void \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::rehash (\fBsize_type\fP__n)\fC [inline]\fP"

.PP
May rehash tha unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Da freshly smoked up number of buckets\&.
.RE
.PP
Rehash will occur only if tha freshly smoked up number of buckets respect tha unordered_set maximum load factor\&. 
.PP
Definizzle at line 654 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> void \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::reserve (\fBsize_type\fP__n)\fC [inline]\fP"

.PP
Prepare tha unordered_set fo' a specified number of elements\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of elements required\&.
.RE
.PP
Same as rehash(ceil(n / max_load_factor()))\&. 
.PP
Definizzle at line 665 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> \fBsize_type\fP \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns tha size of tha unordered_set\&. 
.PP
Definizzle at line 227 of file unordered_set\&.h\&.
.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> void \fBstd::unordered_set\fP< _Value, _Hash, _Pred, _Alloc >::swap (\fBunordered_set\fP< _Value, _Hash, _Pred, _Alloc > &__x)\fC [inline]\fP"

.PP
Swaps data wit another unordered_set\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP An unordered_set of tha same element n' allocator types\&.
.RE
.PP
This exchanges tha elements between two sets up in constant time\&. Note dat tha global std::swap() function is specialized such dat std::swap(s1,s2) will feed ta dis function\&. 
.PP
Definizzle at line 484 of file unordered_set\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
