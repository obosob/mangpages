.TH xcb_allow_events 3  2013-08-04 "XCB" "XCB Requests"
.ad l
.SH NAME
xcb_allow_events \- release queued events
.SH SYNOPSIS
.hy 0
.B #include <xcb/xproto.h>
.SS Request function
.HP
xcb_void_cookie_t \fBxcb_allow_events\fP(xcb_connection_t\ *\fIconn\fP, uint8_t\ \fImode\fP, xcb_timestamp_t\ \fItime\fP);
.br
.hy 1
.SH REQUEST ARGUMENTS
.IP \fIconn\fP 1i
Da XCB connection ta X11.
.IP \fImode\fP 1i
One of tha followin joints:
.RS 1i
.IP \fIXCB_ALLOW_ASYNC_POINTER\fP 1i
For AsyncPointer, if tha pointa is frozen by tha client, pointa event
processin continues normally. If tha pointa is frozen twice by tha client on
behalf of two separate grabs, AsyncPointa thaws fo' both fo' realz. AsyncPointa has no
effect if tha pointa aint frozen by tha client yo, but tha pointa need not be
grabbed by tha client.

TODO: rewrite dis up in mo' understandable terms.
.IP \fIXCB_ALLOW_SYNC_POINTER\fP 1i
For SyncPointer, if tha pointa is frozen n' actively grabbed by tha client,
pointa event processin continues normally until tha next ButtonPress or
ButtonRelease event is reported ta tha client, at which time tha pointa again
appears ta freeze. But fuck dat shiznit yo, tha word on tha street is dat if tha reported event causes tha pointa grab ta be
released, then tha pointa do not freeze. Right back up in yo muthafuckin ass. SyncPointa has no effect if the
pointa aint frozen by tha client or if tha pointa aint grabbed by the
client.
.IP \fIXCB_ALLOW_REPLAY_POINTER\fP 1i
For ReplayPointer, if tha pointa be actively grabbed by tha client n' is
frozen as tha result of a event havin been busted ta tha client (either from
the activation of a GrabButton or from a previous AllowEvents wit mode
SyncPointa but not from a GrabPointer), then tha pointa grab is busted out and
that event is straight-up reprocessed, dis time ignorin any passive grabs at
or above (towardz tha root) tha grab-window of tha grab just busted out. Y'all KNOW dat shit, muthafucka! The
request has no effect if tha pointa aint grabbed by tha client or if the
pointa aint frozen as tha result of a event.
.IP \fIXCB_ALLOW_ASYNC_KEYBOARD\fP 1i
For AsyncKeyboard, if tha keyboard is frozen by tha client, keyboard event
processin continues normally. If tha keyboard is frozen twice by tha client on
behalf of two separate grabs, AsyncKeyboard thaws fo' both fo' realz. AsyncKeyboard has
no effect if tha keyboard aint frozen by tha client yo, but tha keyboard need
not be grabbed by tha client.
.IP \fIXCB_ALLOW_SYNC_KEYBOARD\fP 1i
For SyncKeyboard, if tha keyboard is frozen n' actively grabbed by tha client,
keyboard event processin continues normally until tha next KeyPress or
KeyRelease event is reported ta tha client, at which time tha keyboard again
appears ta freeze. But fuck dat shiznit yo, tha word on tha street is dat if tha reported event causes tha keyboard grab to
be busted out, then tha keyboard do not freeze. Right back up in yo muthafuckin ass. SyncKeyboard has no effect if
the keyboard aint frozen by tha client or if tha keyboard aint grabbed by
the client.
.IP \fIXCB_ALLOW_REPLAY_KEYBOARD\fP 1i
For ReplayKeyboard, if tha keyboard be actively grabbed by tha client n' is
frozen as tha result of a event havin been busted ta tha client (either from
the activation of a GrabKey or from a previous AllowEvents wit mode
SyncKeyboard but not from a GrabKeyboard), then tha keyboard grab is busted out
and dat event is straight-up reprocessed, dis time ignorin any passive grabs
at or above (towardz tha root) tha grab-window of tha grab just busted out. Y'all KNOW dat shit, muthafucka! The
request has no effect if tha keyboard aint grabbed by tha client or if the
keyboard aint frozen as tha result of a event.
.IP \fIXCB_ALLOW_ASYNC_BOTH\fP 1i
For AsyncBoth, if tha pointa n' tha keyboard is frozen by tha client, event
processin fo' both devices continues normally. If a thang is frozen twice by
the client on behalf of two separate grabs, AsyncBoth thaws fo' both fo' realz. AsyncBoth
has no effect unless both pointa n' keyboard is frozen by tha client.
.IP \fIXCB_ALLOW_SYNC_BOTH\fP 1i
For SyncBoth, if both pointa n' keyboard is frozen by tha client, event
processin (for both devices) continues normally until tha next ButtonPress,
ButtonRelease, KeyPress, or KeyRelease event is reported ta tha client fo' a
grabbed thang (button event fo' tha pointer, key event fo' tha keyboard), at
which time tha devices again n' again n' again step tha fuck up ta freeze. But fuck dat shiznit yo, tha word on tha street is dat if tha reported event
causes tha grab ta be busted out, then tha devices do not freeze (but if the
other thang is still grabbed, then a subsequent event fo' it will still cause
both devices ta freeze). Right back up in yo muthafuckin ass. SyncBoth has no effect unless both pointa and
keyboard is frozen by tha client. If tha pointa or keyboard is frozen twice
by tha client on behalf of two separate grabs, SyncBoth thaws fo' both (but a
subsequent freeze fo' SyncBoth will only freeze each thang once).
.RE
.RS 1i


.RE
.IP \fItime\fP 1i
Timestamp ta avoid race conditions when hustlin X over tha network.

Da special value \fIXCB_CURRENT_TIME\fP is ghon be replaced wit tha current server
time.
.SH DESCRIPTION
Releases queued events if tha client has caused a thang (pointer/keyboard) to
freeze cuz of grabbin it actively. This request has no effect if \fItime\fP is
earlier than tha last-grab time of da most thugged-out recent actizzle grab fo' dis client
or if \fItime\fP is lata than tha current X server time.
.SH RETURN VALUE
Returns a \fIxcb_void_cookie_t\fP. Errors (if any) gotta be handled up in tha event loop.

If you wanna handle errors directly wit \fIxcb_request_check\fP instead, use \fIxcb_allow_events_checked\fP. Right back up in yo muthafuckin ass. See \fBxcb-requests(3)\fP fo' details.
.SH ERRORS
.IP \fIxcb_value_error_t\fP 1i
Yo ass specified a invalid \fImode\fP.
.SH SEE ALSO
.BR xcb-requests (3)
.SH AUTHOR
Generated from xproto.xml. Contact xcb@lists.freedesktop.org fo' erections n' improvements.
