'\" t
.\"     Title: xselectextensionevent
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XSELECTEXTENSIONEVEN" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XSelectExtensionEvent, XGetSelectedExtensionEvents \- select extension events, git tha list of currently selected extension events
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XSelectExtensionEvent( Display *display,
                       Window w,
                       XEventClass *event_list,
                       int event_count);
.fi
.sp
.nf
XGetSelectedExtensionEvents( Display *display,
                             Window w,
                             int *this_client_event_count_return,
                             XEventClass **this_client_event_list_return,
                             int *all_clients_event_count_return,
                             XEventClass **all_clients_event_list_return);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
w
       Specifies tha window whose events yo ass is interested in\&.
.fi
.sp
.nf
event_list
       Specifies tha list of event classes dat describe the
       events yo ass is interested in\&.
.fi
.sp
.nf
event_count
       Specifies tha count of event classes up in tha event list\&.
.fi
.sp
.nf
this_client_event_count_return
       Returns tha count of event classes selected by this
       client\&.
.fi
.sp
.nf
this_client_event_list_return
       Returns a pointa ta tha list of event classes selected
       by dis client\&.
.fi
.sp
.nf
all_clients_event_count_return
       Returns tha count of event classes selected by all
       clients\&.
.fi
.sp
.nf
all_clients_event_list_return
       Returns a pointa ta tha list of event classes selected
       by all clients\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
Da XSelectExtensionEvent request causes tha X server ta report
the events associated wit tha specified list of event classes\&.
Initially, X aint gonna report any of these events\&. Events are
reported relatizzle ta a window\&. If a window aint interested in
a thang event, it probably propagates ta tha closest ancestor
that is interested, unless tha do_not_propagate mask prohibits
it\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Multiple clients can select fo' tha same events on tha same
window wit tha followin restrictions:
  * Multiple clients can select events on tha same window
    cuz they event masks is disjoint\&. When tha X server
    generates a event, it reports it ta all interested
    clients\&.
  * Only one client at a time can select a DeviceButtonPress
    event wit automatic passive grabbin enabled, which is
    associated wit tha event class DeviceButtonPressGrab\&. To
    receive DeviceButtonPress events without automatic passive
    grabbing, use event class DeviceButtonPress but do not
    specify event class DeviceButtonPressGrab\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da server reports tha event ta all interested clients\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Hype contained up in tha XDevice structure returned by
XOpenDevice is used by macros ta obtain tha event classes that
clients use up in makin XSelectExtensionEvent requests\&. Currently
defined macros include DeviceKeyPress, DeviceKeyRelease,
DeviceButtonPress, DeviceButtonRelese, DeviceMotionNotify,
DeviceFocusIn, DeviceFocusOut, ProximityIn, ProximityOut,
DeviceStateNotify, DeviceMappingNotify, ChizzleDeviceNotify,
DevicePointerMotionHint, DeviceButton1Motion,
DeviceButton2Motion, DeviceButton3Motion, DeviceButton4Motion,
DeviceButton5Motion, DeviceButtonMotion, DeviceOwnerGrabButton,
DeviceButtonPressGrab, n' NoExtensionEvent\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To obtain tha proper event class fo' a particular device, one
of tha above macros is invoked rockin tha XDevice structure for
that device\&. For example,
             DeviceKeyPress (*device, type, eventclass);
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
returns tha DeviceKeyPress event type n' tha eventclass for
selectin DeviceKeyPress events from dis device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XSelectExtensionEvent can generate a BadWindow or BadClass
error\&. Da XGetSelectedExtensionEvents request reports the
extension events selected by dis client n' all clients for
the specified window\&. This request returns pointas ta two
XEventClass arrays\&. One lists tha input extension events
selected by dis client from tha specified window\&. Da other
lists tha event classes selected by all clients from the
specified window\&. Yo ass should use XJacked ta free these two
arrays\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetSelectedExtensionEvents can generate a BadWindow error\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadWindow
       A value fo' a Window argument do not name a thugged-out defined
       window\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadClass
       A value fo' a XEventClass is invalid\&.
.fi
.if n \{\
.RE
.\}
