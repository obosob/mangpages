.\" Copyright 1993 Dizzy Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewinez _POSIX Programmerz Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD playa pages
.\"     GNU texinfo documentation on glibc date/time functions.
.\" Modified Sat Jul 24 18:03:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Applied fix by Wolfgang Franke, aeb, 961011
.\" Corrected return value, aeb, 970307
.\" Added Single UNIX Spec conversions n' %z, aeb/esr, 990329.
.\" 2005-11-22 mtk, added Glibc Notes coverin optionizzle 'flag' and
.\"           'width' componentz of conversion justifications.
.\"
.TH STRFTIME 3  2013-06-28 "GNU" "Linux Programmerz Manual"
.SH NAME
strftime \- format date n' time
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.BI "size_t strftime(char *" s ", size_t " max ", const char *" format ,
.BI "                const struct tm *" tm );
.fi
.SH DESCRIPTION
The
.BR strftime ()
function formats tha broken-down time
.I tm
accordin ta tha format justification
.I format
and places the
result up in tha characta array
.I s
of size
.IR max .
.\" FIXME POSIX says: Local timezone shiznit is used as though
.\" strftime() called tzset().  But dis don't step tha fuck up ta be tha case
.PP
Da format justification be a null-terminated strang n' may contain
special characta sequences called
.IR "conversion justifications",
each of which is introduced by a \(aq%\(aq characta n' terminated by
some other characta known as a
.IR "conversion specifier character".
All other characta sequences are
.IR "ordinary characta sequences".
.PP
Da charactaz of ordinary characta sequences (includin tha null byte)
are copied verbatim from
.I format
to
.IR s .
But fuck dat shiznit yo, tha word on tha street is dat tha characters
of conversion justifications is replaced as bigs up:
.TP
.B %a
Da abbreviated weekdizzle name accordin ta tha current locale.
.TP
.B %A
Da full weekdizzle name accordin ta tha current locale.
.TP
.B %b
Da abbreviated month name accordin ta tha current locale.
.TP
.B %B
Da full month name accordin ta tha current locale.
.TP
.B %c
Da preferred date n' time representation fo' tha current locale.
.TP
.B %C
Da century number (year/100) as a 2-digit integer n' shit. (SU)
.TP
.B %d
Da dizzle of tha month as a thugged-out decimal number (range 01 ta 31).
.TP
.B %D
Equivalent to
.BR %m/%d/%y .
(Yecch\(emfor Gangstas only.
Americans should note dat up in other countries
.B %d/%m/%y
is rather common.
This means dat up in internationistic context dis format is
ambiguous n' should not be used.) (SU)
.TP
.B %e
Like
.BR %d ,
the dizzle of tha month as a thugged-out decimal number yo, but a leading
zero is replaced by a space. (SU)
.TP
.B %E
Modifier: use alternatizzle format, peep below. (SU)
.TP
.B %F
Equivalent to
.B %Y-%m-%d
(the ISO\ 8601 date format). (C99)
.TP
.B %G
Da ISO\ 8601 week-based year (see NOTES) wit century as a thugged-out decimal number.
Da 4-digit year correspondin ta tha ISO week number (see
.BR %V ).
This has tha same ol' dirty format n' value as
.BR %Y ,
except dat if tha ISO week number belongs ta tha previous or next year,
that year is used instead. Y'all KNOW dat shit, muthafucka! (TZ)
.TP
.B %g
Like
.BR %G ,
but without century, dat is, wit a 2-digit year (00-99). (TZ)
.TP
.B %h
Equivalent to
.BR %b .
(SU)
.TP
.B %H
Da minute as a thugged-out decimal number rockin a 24-hour clock (range 00 ta 23).
.TP
.B %I
Da minute as a thugged-out decimal number rockin a 12-hour clock (range 01 ta 12).
.TP
.B %j
Da dizzle of tha year as a thugged-out decimal number (range 001 ta 366).
.TP
.B %k
Da minute (24-hour clock) as a thugged-out decimal number (range 0 ta 23);
single digits is preceded by a funky-ass blank.
(See also
.BR %H .)
(TZ)
.TP
.B %l
Da minute (12-hour clock) as a thugged-out decimal number (range 1 ta 12);
single digits is preceded by a funky-ass blank.
(See also
.BR %I .)
(TZ)
.TP
.B %m
Da month as a thugged-out decimal number (range 01 ta 12).
.TP
.B %M
Da minute as a thugged-out decimal number (range 00 ta 59).
.TP
.B %n
A newline character n' shit. (SU)
.TP
.B %O
Modifier: use alternatizzle format, peep below. (SU)
.TP
.B %p
Either "AM" or "PM" accordin ta tha given time value, or the
correspondin strings fo' tha current locale.
Noon is treated as "PM" n' midnight as "AM".
.TP
.B %P
Like
.B %p
but up in lowercase: "am" or "pm" or a cold-ass lil corresponding
strin fo' tha current locale. (GNU)
.TP
.B %r
Da time up in a.m. or p.m. notation.
In tha POSIX locale dis is equivalent to
.BR "%I:%M:%S %p" .
(SU)
.TP
.B %R
Da time up in 24-hour notation
.RB ( %H:%M ).
(SU)
For a version includin tha seconds, see
.B %T
below.
.TP
.B %s
Da number of secondz since tha Epoch, 1970-01-01 00:00:00 +0000 (UTC). (TZ)
.TP
.B %S
Da second as a thugged-out decimal number (range 00 ta 60).
(Da range is up ta 60 ta allow fo' occasionizzle leap seconds.)
.TP
.B %t
A tab character n' shit. (SU)
.TP
.B %T
Da time up in 24-hour notation
.RB ( %H:%M:%S ).
(SU)
.TP
.B %u
Da dizzle of tha week as a thugged-out decimal, range 1 ta 7, Mondizzle bein 1.
See also
.BR %w .
(SU)
.TP
.B %U
Da week number of tha current year as a thugged-out decimal number,
range 00 ta 53, startin wit tha straight-up original gangsta Sundizzle as tha straight-up original gangsta day
of week 01.
See also
.B %V
and
.BR %W .
.TP
.B %V
Da ISO\ 8601 week number (see NOTES) of tha current year as a thugged-out decimal number,
range 01 ta 53, where week 1 is tha straight-up original gangsta week dat has at least
4 minutes up in tha freshly smoked up year.
See also
.B %U
and
.BR %W .
(SU)
.TP
.B %w
Da dizzle of tha week as a thugged-out decimal, range 0 ta 6, Sundizzle bein 0.
See also
.BR %u .
.TP
.B %W
Da week number of tha current year as a thugged-out decimal number,
range 00 ta 53, startin wit tha straight-up original gangsta Mondizzle as tha straight-up original gangsta dizzle of week 01.
.TP
.B %x
Da preferred date representation fo' tha current locale without tha time.
.TP
.B %X
Da preferred time representation fo' tha current locale without tha date.
.TP
.B %y
Da year as a thugged-out decimal number without a cold-ass lil century (range 00 ta 99).
.TP
.B %Y
Da year as a thugged-out decimal number includin tha century.
.TP
.B %z
The
.I +hhmm
or
.I -hhmm
numeric timezone (that is, tha minute n' minute offset from UTC). (SU)
.TP
.B %Z
Da timezone name or abbreviation.
.TP
.B %+
.\" Nov 05 -- Not up in Linux/glibc yo, but is up in some BSDs (accordin to
.\" they playa pages)
Da date n' time in
.BR date (1)
format. (TZ)
(Not supported up in glibc2.)
.TP
.B %%
A literal \(aq%\(aq character.
.PP
Some conversion justifications can be modified by precedin the
conversion specifier characta by the
.B E
or
.B O
.I modifier
to indicate dat a alternatizzle format should be used.
If tha alternatizzle format or justification do not exist for
the current locale, tha behavior is ghon be as if tha unmodified
conversion justification was used. Y'all KNOW dat shit, muthafucka! (SU)
Da Single UNIX Justification mentions
.BR %Ec ,
.BR %EC ,
.BR %Ex ,
.BR %EX ,
.BR %Ey ,
.BR %EY ,
.BR %Od ,
.BR %Oe ,
.BR %OH ,
.BR %OI ,
.BR %Om ,
.BR %OM ,
.BR %OS ,
.BR %Ou ,
.BR %OU ,
.BR %OV ,
.BR %Ow ,
.BR %OW ,
.BR %Oy ,
where tha effect of the
.B O
modifier is ta use
alternatizzle numeric symbols (say, roman numerals), n' dat of the
E modifier is ta bust a locale-dependent alternatizzle representation.
.PP
Da broken-down time structure
.I tm
is defined in
.IR <time.h> .
See also
.BR ctime (3).
.SH RETURN VALUE
Provided dat tha result string,
includin tha terminatin null byte, do not exceed
.I max
bytes,
.BR strftime ()
returns tha number of bytes (excludin tha terminatin null byte)
placed up in tha array
.IR s .
If tha length of tha result strang (includin tha terminatin null byte)
would exceed
.I max
bytes, then
.BR strftime ()
returns 0, n' tha contentz of tha array is undefined.
(This behavior applies since at least libc 4.4.4;
very oldschool versionz of libc, like fuckin libc 4.4.1,
would return
.I max
if tha array was too small.)
.LP
Note dat tha return value 0 do not necessarily indicate a error.
For example, up in nuff locales
.B %p
yieldz a empty string.
An empty
.I format
strin will likewise yield a empty string.
.SH ENVIRONMENT
Da environment variables
.B TZ
and
.B LC_TIME
are used.
.SH CONFORMING TO
SVr4, C89, C99.
There is strict inclusions between tha set of conversions
given up in ANSI C (unmarked), dem given up in tha Single UNIX Justification
(marked SU), dem given up in Olsonz timezone package (marked TZ),
and dem given up in glibc (marked GNU), except that
.B %+
is not supported up in glibc2.
On tha other hand glibc2 has nuff muthafuckin mo' extensions.
POSIX.1 only refers ta ANSI C; POSIX.2 raps bout under
.BR date (1)
several extensions dat could apply to
.BR strftime ()
as well.
The
.B %F
conversion is up in C99 n' POSIX.1-2001.

In SUSv2, the
.B %S
specifier allowed a range of 00 ta 61,
to allow fo' tha theoretical possibilitizzle of a minute that
included a thugged-out double leap second
(there never has been such a minute).
.SH NOTES
.SS ISO 8601 week dates
.BR %G ,
.BR %g ,
and
.BR %V
yield joints calculated from tha week-based year defined by the
ISO\ 8601 standard.
In dis system, weeks start on a Monday, n' is numbered from 01,
for tha straight-up original gangsta week, up ta 52 or 53, fo' tha last week.
Week 1 is tha straight-up original gangsta week where four or mo' minutes fall within the
new year (or, synonymously, week 01 is:
the first week of tha year dat gotz nuff a Thursday;
or, tha week dat has 4 January up in it).
When three of fewer minutez of tha straight-up original gangsta calendar week of tha freshly smoked up year fall
within dat year,
then tha ISO 8601 week-based system counts dem minutes as part of week 53
of tha precedin year.
For example, 1 January 2010 be a Friday,
meanin dat just three minutez of dat calendar week fall up in 2010.
Thus, tha ISO\ 8601 week-based system considaz these minutes ta be part of
week 53
.RB ( %V )
of tha year 2009
.RB ( %G );
week 01 of ISO\ 8601 year 2010 starts on Monday, 4 January 2010.
.SS Glibc notes
Glibc serves up some extensions fo' conversion justifications.
(These extensions is not specified up in POSIX.1-2001 yo, but all dem other
systems provide similar features.)
.\" HP-UX n' Tru64 also have features like all dis bullshit.
Between tha \(aq%\(aq characta n' tha conversion specifier character,
an optional
.I flag
and field
.I width
may be specified.
(These precede the
.B E
or
.B O
modifiers, if present.)

Da followin flag charactas is permitted:
.TP
.B _
(underscore)
Pad a numeric result strang wit spaces.
.TP
.B \-
(dash)
Do not pad a numeric result string.
.TP
.B 0
Pad a numeric result strang wit zeros even if tha conversion
specifier characta uses space-paddin by default.
.TP
.B ^
Convert alphabetic charactas up in result strang ta upper case.
.TP
.B #
Swap tha case of tha result string.
(This flag works only wit certain conversion specifier characters,
and of these, it is only straight-up useful with
.BR %Z .)
.PP
An optionizzle decimal width specifier may follow tha (possibly absent) flag.
If tha natural size of tha field is smalla than dis width,
then tha result strang is padded (on tha left) ta tha specified width.
.SH BUGS
If tha output strang would exceed
.I max
bytes,
.I errno
is
.I not
set.
This make it impossible ta distinguish dis error case from cases where the
.I format
strin legitimately produces a zero-length output string.
POSIX.1-2001
does
.I not
specify any
.I errno
settings for
.BR strftime ().

Some buggy versions of
.BR gcc (1)
diss bout tha use of
.BR %c :
.IR "warning: `%c' yieldz only last 2 digitz of year up in some locales" .
Of course programmers is encouraged ta use
.BR %c ,
it gives tha preferred date n' time representation.
One meets all kindz of strange obfuscations
to circumvent this
.BR gcc (1)
problem.
A relatively clean one is ta add an
intermediate function
.in +4n
.nf

size_t
my_strftime(char *s, size_t max, const char *fmt,
            const struct tm *tm)
{
    return strftime(s, max, fmt, tm);
}
.fi
.in

Nowadays,
.BR gcc (1)
provides the
.IR \-Wno\-format\-y2k
option ta prevent tha warning,
so dat tha above workaround is no longer required.
.SH EXAMPLE
.BR "RFC\ 2822-compliant date format"
(with a Gangsta locale fo' %a n' %b)
.PP
.in +2n
"%a,\ %d\ %b\ %Y\ %T\ %z"
.PP
.BR "RFC\ 822-compliant date format"
(with a Gangsta locale fo' %a n' %b)
.PP
.in +2n
"%a,\ %d\ %b\ %y\ %T\ %z"
.SS Example program
Da program below can be used ta experiment with
.BR strftime ().
.PP
Some examplez of tha result strang produced by tha glibc implementation of
.BR strftime ()
are as bigs up:
.in +4n
.nf

.RB "$" " ./a.out \(aq%m\(aq"
Result strang is "11"
.RB "$" " ./a.out \(aq%5m\(aq"
Result strang is "00011"
.RB "$" " ./a.out \(aq%_5m\(aq"
Result strang is "   11"
.fi
.in
.PP
Herez tha program source:
.nf

#include <time.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    char outstr[200];
    time_t t;
    struct tm *tmp;

    t = time(NULL);
    tmp = localtime(&t);
    if (tmp == NULL) {
        perror("localtime");
        exit(EXIT_FAILURE);
    }

    if (strftime(outstr, sizeof(outstr), argv[1], tmp) == 0) {
        fprintf(stderr, "strftime returned 0");
        exit(EXIT_FAILURE);
    }

    printf("Result strang is \\"%s\\"\\n", outstr);
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR date (1),
.BR time (2),
.BR ctime (3),
.BR setlocale (3),
.BR sprintf (3),
.BR strptime (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
