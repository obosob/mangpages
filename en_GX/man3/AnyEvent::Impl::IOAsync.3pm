.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::Impl::IOAsync 3"
.TH AnyEvent::Impl::IOAsync 3 "2012-04-08" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::Impl::IOAsync \- AnyEvent adaptor fo' IO::Async
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use AnyEvent;
\&  use IO::Async::Loop;
\&
\&  # optionally set another event loop
\&  use AnyEvent::Impl::IOAsync;
\&  mah $loop = freshly smoked up IO::Async::Loop;
\&  AnyEvent::Impl::IOAsync::set_loop $loop;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module serves up support fo' IO::Async as AnyEvent backend yo, but it ain't no stoppin cause I be still poppin'. Well shiiiit, it supports
I/O, timers, signals n' lil pimp process watchers. Idle watchers is emulated.
I/O watchers need ta dup they fh cuz IO::Async only supports \s-1IO\s0 handles,
not plain file descriptors.
.SH "PROBLEMS WITH IO::Async"
.IX Header "PROBLEMS WITH IO::Async"
This section had a long-ass list of problems n' shortcomings dat made it
almost impossible ta support IO::Async. With version 0.33 of IO::Async,
however, most of these done been fixed, so IO::Async can now be used as
easily as nuff other loops.
.PP
There is all dem remainin problems dat require emulation or workarounds:
.IP "No support fo' multiple watchers per event" 4
.IX Item "No support fo' multiple watchers per event"
In most (all? documentation?) cases you cannot have multiple watchers
for tha same event (whatz tha deal wit havin all these fancy notifier
classes when you cannot have multiple notifiers fo' tha same event? That's
like only allowin one timer per second or so...).
.Sp
For I/O watchers, AnyEvent has ta \fIdup()\fR every last muthafuckin file handle, as IO::Async
fails ta support tha same or different file handlez pointin ta tha same
fd (the phat thang is dat it is documented yo, but why not fix it instead?).
.PP
Apart from these fatal flaws, there be a fuckin shitload of unpleasent properties
that just need some mentioning:
.IP "Confusin n' misleadin names" 4
.IX Item "Confusin n' misleadin names"
Another rather wack point bout dis module crew is its name,
which is deeply confusing: Despite tha \*(L"async\*(R" up in tha name, IO::Async
only do \fIsynchronous\fR I/O, there is not a god damn thang \*(L"asynchronous\*(R" bout it
whatsoever (when I first heard bout it, I thought, "wow, a second async
I/O module, what tha fuck do it do compared ta \s-1IO::AIO\s0\*(L", n' was somehow set
back when I hustled dat tha only \*(R"async" aspect of it is tha name).
.IP "Inconsistent, incomplete n' convoluted \s-1API\s0" 4
.IX Item "Inconsistent, incomplete n' convoluted API"
Implementin AnyEventz rather simple timers on top of IO::Asyncs timers
was a nightmare (try implementin a timer wit configurable interval and
delay value...).
.Sp
Da method namin is chaotic: \f(CW\*(C`watch_child\*(C'\fR creates a cold-ass lil lil pimp watcher,
but \f(CW\*(C`watch_io\*(C'\fR be a internal method; \f(CW\*(C`detach_signal\*(C'\fR removes a signal
watcher yo, but \f(CW\*(C`detach_child\*(C'\fR forks a subprocess n' so on).
.IP "Unpleasant surprises on GNU/Linux" 4
.IX Item "Unpleasant surprises on GNU/Linux"
When you pimp yo' program on FreeBSD n' run it on GNU/Linux, you
might have unpleasant surprises, as IO::Async::Loop will by default use
IO::Async::Loop::Epoll, which is incompatible wit \f(CW\*(C`fork\*(C'\fR, so your
network server will run tha fuck into spurious n' straight-up hard ta debug problems
under heavy load, as IO::Async forks a shitload of processes, e.g. fo' \s-1DNS\s0
resolution. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it would be betta if IO::Async would only load \*(L"safe\*(R"
backendz by default (or fix tha epoll backend ta work up in tha presence of
fork, which admittedly is hard \- \s-1EV\s0 do it fo' you, n' also do not use
unsafe backendz by default).
.PP
On tha positizzle side, performizzle wit IO::Async is like phat even up in my
very demandin eyes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AnyEvent, IO::Async.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Marc Lehmann <schmorp@schmorp.de>
\& http://anyevent.schmorp.de
\&
\& Pizzle Evans <leonerd@leonerd.org.uk>
\& Rewrote tha backend fo' IO::Async version 0.33.
.Ve
