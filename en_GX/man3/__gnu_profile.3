.TH "__gnu_profile" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_profile \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB__container_size_info\fP"
.br
.ti -1c
.RI "class \fB__container_size_stack_info\fP"
.br
.ti -1c
.RI "class \fB__hashfunc_info\fP"
.br
.ti -1c
.RI "class \fB__hashfunc_stack_info\fP"
.br
.ti -1c
.RI "class \fB__list2vector_info\fP"
.br
.ti -1c
.RI "class \fB__map2umap_info\fP"
.br
.ti -1c
.RI "class \fB__map2umap_stack_info\fP"
.br
.ti -1c
.RI "class \fB__object_info_base\fP"
.br
.ti -1c
.RI "struct \fB__reentrance_guard\fP"
.br
.ti -1c
.RI "class \fB__stack_hash\fP"
.br
.ti -1c
.RI "class \fB__stack_info_base\fP"
.br
.ti -1c
.RI "class \fB__trace_base\fP"
.br
.ti -1c
.RI "class \fB__trace_container_size\fP"
.br
.ti -1c
.RI "class \fB__trace_hash_func\fP"
.br
.ti -1c
.RI "class \fB__trace_hashtable_size\fP"
.br
.ti -1c
.RI "class \fB__trace_map2umap\fP"
.br
.ti -1c
.RI "class \fB__trace_vector_size\fP"
.br
.ti -1c
.RI "class \fB__trace_vector_to_list\fP"
.br
.ti -1c
.RI "class \fB__vector2list_info\fP"
.br
.ti -1c
.RI "class \fB__vector2list_stack_info\fP"
.br
.ti -1c
.RI "struct \fB__warning_data\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef std::::vector
.br
< __cost_factor * > \fB__cost_factor_vector\fP"
.br
.ti -1c
.RI "typedef std::::unordered_map
.br
< \fBstd::string\fP, \fBstd::string\fP > \fB__env_t\fP"
.br
.ti -1c
.RI "typedef void * \fB__instruction_address_t\fP"
.br
.ti -1c
.RI "typedef const void * \fB__object_t\fP"
.br
.ti -1c
.RI "typedef std::::vector
.br
< __instruction_address_t > \fB__stack_npt\fP"
.br
.ti -1c
.RI "typedef __stack_npt * \fB__stack_t\fP"
.br
.ti -1c
.RI "typedef std::::vector
.br
< \fB__warning_data\fP > \fB__warning_vector_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB__state_type\fP { \fB__ON\fP, \fB__OFF\fP, \fB__INVALID\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::size_t \fB__env_to_size_t\fP (const char *__env_var, std::size_t __default_value)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Function > _Function \fB__for_each\fP (_InputIterator __first, _InputIterator __last, _Function __f)"
.br
.ti -1c
.RI "__stack_t \fB__get_stack\fP ()"
.br
.ti -1c
.RI "template<typename _Container > void \fB__insert_top_n\fP (_Container &__output, const typename _Container::value_type &__value, typename _Container::size_type __n)"
.br
.ti -1c
.RI "bool \fB__is_invalid\fP ()"
.br
.ti -1c
.RI "bool \fB__is_off\fP ()"
.br
.ti -1c
.RI "bool \fB__is_on\fP ()"
.br
.ti -1c
.RI "int \fB__log2\fP (std::size_t __size)"
.br
.ti -1c
.RI "int \fB__log_magnitude\fP (float __f)"
.br
.ti -1c
.RI "float \fB__map_erase_cost\fP (std::size_t __size)"
.br
.ti -1c
.RI "float \fB__map_find_cost\fP (std::size_t __size)"
.br
.ti -1c
.RI "float \fB__map_insert_cost\fP (std::size_t __size)"
.br
.ti -1c
.RI "std::size_t \fB__max_mem\fP ()"
.br
.ti -1c
.RI "FILE * \fB__open_output_file\fP (const char *__extension)"
.br
.ti -1c
.RI "bool \fB__profcxx_init\fP ()"
.br
.ti -1c
.RI "void \fB__profcxx_init_unconditional\fP ()"
.br
.ti -1c
.RI "void \fB__read_cost_factors\fP ()"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp > _ForwardIterator \fB__remove\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)"
.br
.ti -1c
.RI "void \fB__report\fP (void)"
.br
.ti -1c
.RI "void \fB__set_cost_factors\fP ()"
.br
.ti -1c
.RI "void \fB__set_max_mem\fP ()"
.br
.ti -1c
.RI "void \fB__set_max_stack_trace_depth\fP ()"
.br
.ti -1c
.RI "void \fB__set_max_warn_count\fP ()"
.br
.ti -1c
.RI "void \fB__set_trace_path\fP ()"
.br
.ti -1c
.RI "std::size_t \fB__size\fP (__stack_t __stack)"
.br
.ti -1c
.RI "std::size_t \fB__stack_max_depth\fP ()"
.br
.ti -1c
.RI "template<typename _Container > void \fB__top_n\fP (const _Container &__input, _Container &__output, typename _Container::size_type __n)"
.br
.ti -1c
.RI "void \fB__trace_hash_func_construct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_hash_func_destruct\fP (const void *, std::size_t, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_hash_func_init\fP ()"
.br
.ti -1c
.RI "void \fB__trace_hash_func_report\fP (FILE *__f, __warning_vector_t &__warnings)"
.br
.ti -1c
.RI "void \fB__trace_hashtable_size_construct\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_hashtable_size_destruct\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_hashtable_size_init\fP ()"
.br
.ti -1c
.RI "void \fB__trace_hashtable_size_report\fP (FILE *__f, __warning_vector_t &__warnings)"
.br
.ti -1c
.RI "void \fB__trace_hashtable_size_resize\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_list_to_set_construct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_set_destruct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_set_find\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_list_to_set_insert\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_list_to_set_invalid_operator\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_set_iterate\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_list_to_slist_construct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_slist_destruct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_slist_init\fP ()"
.br
.ti -1c
.RI "void \fB__trace_list_to_slist_operation\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_slist_report\fP (FILE *__f, __warning_vector_t &__warnings)"
.br
.ti -1c
.RI "void \fB__trace_list_to_slist_rewind\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_construct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_destruct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_init\fP ()"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_insert\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_invalid_operator\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_iterate\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_report\fP (FILE *__f, __warning_vector_t &__warnings)"
.br
.ti -1c
.RI "void \fB__trace_list_to_vector_resize\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_construct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_destruct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_erase\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_find\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_init\fP ()"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_insert\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_invalidate\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_iterate\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_map_to_unordered_map_report\fP (FILE *__f, __warning_vector_t &__warnings)"
.br
.ti -1c
.RI "void \fB__trace_vector_size_construct\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_vector_size_destruct\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_vector_size_init\fP ()"
.br
.ti -1c
.RI "void \fB__trace_vector_size_report\fP (FILE *, __warning_vector_t &)"
.br
.ti -1c
.RI "void \fB__trace_vector_size_resize\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_construct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_destruct\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_find\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_init\fP ()"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_insert\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_invalid_operator\fP (const void *)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_iterate\fP (const void *, std::size_t)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_report\fP (FILE *, __warning_vector_t &)"
.br
.ti -1c
.RI "void \fB__trace_vector_to_list_resize\fP (const void *, std::size_t, std::size_t)"
.br
.ti -1c
.RI "bool \fB__turn\fP (__state_type __s)"
.br
.ti -1c
.RI "bool \fB__turn_off\fP ()"
.br
.ti -1c
.RI "bool \fB__turn_on\fP ()"
.br
.ti -1c
.RI "void \fB__write\fP (FILE *__f, __stack_t __stack)"
.br
.ti -1c
.RI "void \fB__write_cost_factors\fP ()"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__state_type, __state, __INVALID)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (\fB__trace_hash_func\fP *, _S_hash_func, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (\fB__trace_hashtable_size\fP *, _S_hashtable_size, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (\fB__trace_map2umap\fP *, _S_map2umap, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (\fB__trace_vector_size\fP *, _S_vector_size, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (\fB__trace_vector_to_list\fP *, _S_vector_to_list, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__trace_list_to_slist *, _S_list_to_slist, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__trace_list_to_vector *, _S_list_to_vector, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __vector_shift_cost_factor,{'__vector_shift_cost_factor', 1\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __vector_iterate_cost_factor,{'__vector_iterate_cost_factor', 1\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __vector_resize_cost_factor,{'__vector_resize_cost_factor', 1\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __list_shift_cost_factor,{'__list_shift_cost_factor', 0\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __list_iterate_cost_factor,{'__list_iterate_cost_factor', 10\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __list_resize_cost_factor,{'__list_resize_cost_factor', 0\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __map_insert_cost_factor,{'__map_insert_cost_factor', 1\&.5})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __map_erase_cost_factor,{'__map_erase_cost_factor', 1\&.5})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __map_find_cost_factor,{'__map_find_cost_factor', 1})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __map_iterate_cost_factor,{'__map_iterate_cost_factor', 2\&.3})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __umap_insert_cost_factor,{'__umap_insert_cost_factor', 12\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __umap_erase_cost_factor,{'__umap_erase_cost_factor', 12\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __umap_find_cost_factor,{'__umap_find_cost_factor', 10\&.0})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor, __umap_iterate_cost_factor,{'__umap_iterate_cost_factor', 1\&.7})"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (__cost_factor_vector *, __cost_factors, 0)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (const char *, _S_trace_file_name, _GLIBCXX_PROFILE_TRACE_PATH_ROOT)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (std::size_t, _S_max_warn_count, _GLIBCXX_PROFILE_MAX_WARN_COUNT)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (std::size_t, _S_max_stack_depth, _GLIBCXX_PROFILE_MAX_STACK_DEPTH)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_DATA\fP (std::size_t, _S_max_mem, _GLIBCXX_PROFILE_MEM_PER_DIAGNOSTIC)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_UNINIT_DATA\fP (\fB__env_t\fP, __env)"
.br
.ti -1c
.RI "\fB_GLIBCXX_PROFILE_DEFINE_UNINIT_DATA\fP (__gnu_cxx::__mutex, __global_lock)"
.br
.in -1c
.SH "Detailed Description"
.PP 
GNU flava code fo' hood use\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef std:: ::\fBunordered_map\fP<\fBstd::string\fP, \fBstd::string\fP> \fB__gnu_profile::__env_t\fP"

.PP
Internal environment\&. Values can be set one of two ways: 1\&. In config file 'var = value'\&. Da default config file path is libstdcxx-profile\&.conf\&. 2\&. By settin process environment variables\&. For instance, up in a Bash shell you can set tha unit cost of iteratin all up in a map like this: export __map_iterate_cost_factor=5\&.0\&. If a value is set both up in tha input file n' all up in a environment variable, tha environment value takes precedence\&. 
.PP
Definizzle at line 65 of file profiler_trace\&.h\&.
.SH "Function Documentation"
.PP 
.SS "bool __gnu_profile::__profcxx_init ()\fC [inline]\fP"

.PP
This function must be called by each instrumentation point\&. Da common path is inlined fully\&. 
.PP
Definizzle at line 649 of file profiler_trace\&.h\&.
.SS "void __gnu_profile::__report (void)\fC [inline]\fP"

.PP
Final report method, registered wit \fBatexit\fP\&. This can also be called directly by user code, includin signal handlezs\&. Well shiiiit, it is protected against deadlocks by tha reentrizzle guard up in profiler\&.h\&. But fuck dat shiznit yo, tha word on tha street is dat when called from a signal handlez dat triggers while within __gnu_profile (under tha guarded unit), no output is ghon be produced\&. 
.PP
Definizzle at line 440 of file profiler_trace\&.h\&.
.PP
References std::min()\&.
.SS "__gnu_profile::_GLIBCXX_PROFILE_DEFINE_UNINIT_DATA (__gnu_cxx::__mutex, __global_lock)"

.PP
Masta lock\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
