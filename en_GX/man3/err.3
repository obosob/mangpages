.\" Copyright (c) 1993
.\"	Da Regentz of tha Universitizzle of California.  All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	From: @(#)err.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/gen/err.3,v 1.11.2.5 2001/08/17 15:42:32 ru Exp $
.\"
.\" 2011-09-10, mtk, Converted from mdoc ta playa macros
.\"
.TH ERR 3 2012-03-15 "Linux" "Linux Programmerz Manual"
.SH NAME
err, verr, errx, verrx, warn, vwarn, warnx, vwarnx \- formatted error lyrics
.SH SYNOPSIS
.nf
.B #include <err.h>
.sp
.BI "void err(int " eval ", const char *" fmt ", ...);"
.sp
.BI "void errx(int " eval ", const char *" fmt ", ...);"
.sp
.BI "void warn(const char *" fmt ", ...);"
.sp
.BI "void warnx(const char *" fmt ", ...);"
.sp
.B #include <stdarg.h>
.sp
.BI "void verr(int " eval ", const char *" fmt ", va_list " args );
.sp
.BI "void verrx(int " eval ", const char *" fmt ", va_list " args );
.sp
.BI "void vwarn(const char *" fmt ", va_list " args );
.sp
.BI "void vwarnx(const char *" fmt ", va_list " args );
.fi
.SH DESCRIPTION
The
.BR err ()
and
.BR warn ()
family of functions display a gangbangin' formatted error message on tha standard
error output.
In all cases, tha last component of tha program name, a cold-ass lil colon character,
and a space is output.
If the
.I fmt
argument aint NULL, the
.BR printf (3)-like
formatted error message is output.
Da output is terminated by a newline character.
.PP
The
.BR err (),
.BR verr (),
.BR warn (),
and
.BR vwarn ()
functions append a error message obtained from
.BR strerror (3)
based on tha global variable
.IR errno ,
preceded by another colon n' space unless the
.I fmt
argument is
NULL.
.PP
The
.BR errx ()
and
.BR warnx ()
functions do not append a error message.
.PP
The
.BR err (),
.BR verr (),
.BR errx (),
and
.BR verrx ()
functions do not return yo, but exit wit tha value of tha argument
.IR eval .
.SH CONFORMING TO
These functions is nonstandard BSD extensions.
.\" .SH HISTORY
.\" The
.\" .BR err ()
.\" and
.\" .BR warn ()
.\" functions first rocked up in
.\" 4.4BSD.
.SH EXAMPLE
Display tha current
.I errno
information strang n' exit:
.in +4n
.nf

if ((p = malloc(size)) == NULL)
    err(1, NULL);
if ((fd = open(file_name, O_RDONLY, 0)) == \-1)
    err(1, "%s", file_name);
.fi
.in
.PP
Display a error message n' exit:
.in +4n
.nf

if (tm.tm_hour < START_TIME)
    errx(1, "too early, wait until %s", start_time_string);
.fi
.in
.PP
Warn of a error:
.in +4n
.nf

if ((fd = open(raw_device, O_RDONLY, 0)) == \-1)
    warnx("%s: %s: tryin tha block device",
            raw_device, strerror(errno));
if ((fd = open(block_device, O_RDONLY, 0)) == \-1)
    err(1, "%s", block_device);
.fi
.in
.SH SEE ALSO
.BR error (3),
.BR exit (3),
.BR perror (3),
.BR printf (3),
.BR strerror (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
