.TH "__gnu_parallel" 3 "Thu Sep 11 2014" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_parallel \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fB__accumulate_binop_reduct\fP"
.br
.ti -1c
.RI "struct \fB__accumulate_selector\fP"
.br
.ti -1c
.RI "struct \fB__adjacent_difference_selector\fP"
.br
.ti -1c
.RI "struct \fB__adjacent_find_selector\fP"
.br
.ti -1c
.RI "class \fB__binder1st\fP"
.br
.ti -1c
.RI "class \fB__binder2nd\fP"
.br
.ti -1c
.RI "struct \fB__count_if_selector\fP"
.br
.ti -1c
.RI "struct \fB__count_selector\fP"
.br
.ti -1c
.RI "struct \fB__fill_selector\fP"
.br
.ti -1c
.RI "struct \fB__find_first_of_selector\fP"
.br
.ti -1c
.RI "struct \fB__find_if_selector\fP"
.br
.ti -1c
.RI "struct \fB__for_each_selector\fP"
.br
.ti -1c
.RI "struct \fB__generate_selector\fP"
.br
.ti -1c
.RI "struct \fB__generic_find_selector\fP"
.br
.ti -1c
.RI "struct \fB__generic_for_each_selector\fP"
.br
.ti -1c
.RI "struct \fB__identity_selector\fP"
.br
.ti -1c
.RI "struct \fB__inner_product_selector\fP"
.br
.ti -1c
.RI "struct \fB__max_element_reduct\fP"
.br
.ti -1c
.RI "struct \fB__min_element_reduct\fP"
.br
.ti -1c
.RI "struct \fB__mismatch_selector\fP"
.br
.ti -1c
.RI "struct \fB__multiway_merge_3_variant_sentinel_switch\fP"
.br
.ti -1c
.RI "struct \fB__multiway_merge_3_variant_sentinel_switch< true, _RAIterIterator, _RAIter3, _DifferenceTp, _Compare >\fP"
.br
.ti -1c
.RI "struct \fB__multiway_merge_4_variant_sentinel_switch\fP"
.br
.ti -1c
.RI "struct \fB__multiway_merge_4_variant_sentinel_switch< true, _RAIterIterator, _RAIter3, _DifferenceTp, _Compare >\fP"
.br
.ti -1c
.RI "struct \fB__multiway_merge_k_variant_sentinel_switch\fP"
.br
.ti -1c
.RI "struct \fB__multiway_merge_k_variant_sentinel_switch< false, __stable, _RAIterIterator, _RAIter3, _DifferenceTp, _Compare >\fP"
.br
.ti -1c
.RI "struct \fB__replace_if_selector\fP"
.br
.ti -1c
.RI "struct \fB__replace_selector\fP"
.br
.ti -1c
.RI "struct \fB__transform1_selector\fP"
.br
.ti -1c
.RI "struct \fB__transform2_selector\fP"
.br
.ti -1c
.RI "class \fB__unary_negate\fP"
.br
.ti -1c
.RI "struct \fB_DRandomShufflingGlobalData\fP"
.br
.ti -1c
.RI "struct \fB_DRSSorterPU\fP"
.br
.ti -1c
.RI "struct \fB_DummyReduct\fP"
.br
.ti -1c
.RI "class \fB_EqualFromLess\fP"
.br
.ti -1c
.RI "struct \fB_EqualTo\fP"
.br
.ti -1c
.RI "class \fB_GuardedIterator\fP"
.br
.ti -1c
.RI "class \fB_IteratorPair\fP"
.br
.ti -1c
.RI "class \fB_IteratorTriple\fP"
.br
.ti -1c
.RI "struct \fB_Job\fP"
.br
.ti -1c
.RI "struct \fB_Less\fP"
.br
.ti -1c
.RI "class \fB_Lexicographic\fP"
.br
.ti -1c
.RI "class \fB_LexicographicReverse\fP"
.br
.ti -1c
.RI "class \fB_LoserTree\fP"
.br
.ti -1c
.RI "class \fB_LoserTree< false, _Tp, _Compare >\fP"
.br
.ti -1c
.RI "class \fB_LoserTreeBase\fP"
.br
.ti -1c
.RI "class \fB_LoserTreePointer\fP"
.br
.ti -1c
.RI "class \fB_LoserTreePointer< false, _Tp, _Compare >\fP"
.br
.ti -1c
.RI "class \fB_LoserTreePointerBase\fP"
.br
.ti -1c
.RI "class \fB_LoserTreePointerUnguarded\fP"
.br
.ti -1c
.RI "class \fB_LoserTreePointerUnguarded< false, _Tp, _Compare >\fP"
.br
.ti -1c
.RI "class \fB_LoserTreePointerUnguardedBase\fP"
.br
.ti -1c
.RI "struct \fB_LoserTreeTraits\fP"
.br
.ti -1c
.RI "class \fB_LoserTreeUnguarded\fP"
.br
.ti -1c
.RI "class \fB_LoserTreeUnguarded< false, _Tp, _Compare >\fP"
.br
.ti -1c
.RI "class \fB_LoserTreeUnguardedBase\fP"
.br
.ti -1c
.RI "struct \fB_Multiplies\fP"
.br
.ti -1c
.RI "struct \fB_Nothing\fP"
.br
.ti -1c
.RI "struct \fB_Piece\fP"
.br
.ti -1c
.RI "struct \fB_Plus\fP"
.br
.ti -1c
.RI "struct \fB_PMWMSSortingData\fP"
.br
.ti -1c
.RI "class \fB_PseudoSequence\fP"
.br
.ti -1c
.RI "class \fB_PseudoSequenceIterator\fP"
.br
.ti -1c
.RI "struct \fB_QSBThreadLocal\fP"
.br
.ti -1c
.RI "class \fB_RandomNumber\fP"
.br
.ti -1c
.RI "class \fB_RestrictedBoundedConcurrentQueue\fP"
.br
.ti -1c
.RI "struct \fB_SamplingSorter\fP"
.br
.ti -1c
.RI "struct \fB_SamplingSorter< false, _RAIter, _StrictWeakOrderin >\fP"
.br
.ti -1c
.RI "struct \fB_Settings\fP"
.br
.ti -1c
.RI "struct \fB_SplitConsistently\fP"
.br
.ti -1c
.RI "struct \fB_SplitConsistently< false, _RAIter, _Compare, _SortingPlacesIterator >\fP"
.br
.ti -1c
.RI "struct \fB_SplitConsistently< true, _RAIter, _Compare, _SortingPlacesIterator >\fP"
.br
.ti -1c
.RI "struct \fBbalanced_quicksort_tag\fP"
.br
.ti -1c
.RI "struct \fBbalanced_tag\fP"
.br
.ti -1c
.RI "struct \fBconstant_size_blocks_tag\fP"
.br
.ti -1c
.RI "struct \fBdefault_parallel_tag\fP"
.br
.ti -1c
.RI "struct \fBequal_split_tag\fP"
.br
.ti -1c
.RI "struct \fBexact_tag\fP"
.br
.ti -1c
.RI "struct \fBfind_tag\fP"
.br
.ti -1c
.RI "struct \fBgrowing_blocks_tag\fP"
.br
.ti -1c
.RI "struct \fBmultiway_mergesort_exact_tag\fP"
.br
.ti -1c
.RI "struct \fBmultiway_mergesort_sampling_tag\fP"
.br
.ti -1c
.RI "struct \fBmultiway_mergesort_tag\fP"
.br
.ti -1c
.RI "struct \fBomp_loop_static_tag\fP"
.br
.ti -1c
.RI "struct \fBomp_loop_tag\fP"
.br
.ti -1c
.RI "struct \fBparallel_tag\fP"
.br
.ti -1c
.RI "struct \fBquicksort_tag\fP"
.br
.ti -1c
.RI "struct \fBsampling_tag\fP"
.br
.ti -1c
.RI "struct \fBsequential_tag\fP"
.br
.ti -1c
.RI "struct \fBunbalanced_tag\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned short \fB_BinIndex\fP"
.br
.ti -1c
.RI "typedef int64_t \fB_CASable\fP"
.br
.ti -1c
.RI "typedef uint64_t \fB_SequenceIndex\fP"
.br
.ti -1c
.RI "typedef uint16_t \fB_ThreadIndex\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_AlgorithmStrategy\fP { \fBheuristic\fP, \fBforce_sequential\fP, \fBforce_parallel\fP }"
.br
.ti -1c
.RI "enum \fB_FindAlgorithm\fP { \fBGROWING_BLOCKS\fP, \fBCONSTANT_SIZE_BLOCKS\fP, \fBEQUAL_SPLIT\fP }"
.br
.ti -1c
.RI "enum \fB_MultiwayMergeAlgorithm\fP { \fBLOSER_TREE\fP }"
.br
.ti -1c
.RI "enum \fB_Parallelism\fP { \fBsequential\fP, \fBparallel_unbalanced\fP, \fBparallel_balanced\fP, \fBparallel_omp_loop\fP, \fBparallel_omp_loop_static\fP, \fBparallel_taskqueue\fP }"
.br
.ti -1c
.RI "enum \fB_PartialSumAlgorithm\fP { \fBRECURSIVE\fP, \fBLINEAR\fP }"
.br
.ti -1c
.RI "enum \fB_SortAlgorithm\fP { \fBMWMS\fP, \fBQS\fP, \fBQS_BALANCED\fP }"
.br
.ti -1c
.RI "enum \fB_SplittingAlgorithm\fP { \fBSAMPLING\fP, \fBEXACT\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Tp > _Tp \fB__add_omp\fP (volatile _Tp *__ptr, _Tp __addend)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _DifferenceTp > void \fB__calc_borders\fP (_RAIta __elements, _DifferenceTp __length, _DifferenceTp *__off)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fB__cas_omp\fP (volatile _Tp *__ptr, _Tp __comparand, _Tp __replacement)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fB__compare_and_swap\fP (volatile _Tp *__ptr, _Tp __comparand, _Tp __replacement)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator > _OutputIterator \fB__copy_tail\fP (\fBstd::pair\fP< _IIter, _IIta > __b, \fBstd::pair\fP< _IIter, _IIta > __e, _OutputIterator __r)"
.br
.ti -1c
.RI "void \fB__decode2\fP (\fB_CASable\fP __x, int &__a, int &__b)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _DifferenceTp > void \fB__determine_samples\fP (\fB_PMWMSSortingData\fP< _RAIta > *__sd, _DifferenceTp __num_samples)"
.br
.ti -1c
.RI "\fB_CASable\fP \fB__encode2\fP (int __a, int __b)"
.br
.ti -1c
.RI "template<typename _DifferenceType , typename _OutputIterator > _OutputIterator \fB__equally_split\fP (_DifferenceType __n, \fB_ThreadIndex\fP __num_threads, _OutputIterator __s)"
.br
.ti -1c
.RI "template<typename _DifferenceType > _DifferenceType \fB__equally_split_point\fP (_DifferenceType __n, \fB_ThreadIndex\fP __num_threads, \fB_ThreadIndex\fP __thread_no)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__fetch_and_add\fP (volatile _Tp *__ptr, _Tp __addend)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP< _RAIter1, _RAIter2 > \fB__find_template\fP (_RAIter1 __begin1, _RAIter1 __end1, _RAIter2 __begin2, _Pred __pred, _Selector __selector)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP< _RAIter1, _RAIter2 > \fB__find_template\fP (_RAIter1 __begin1, _RAIter1 __end1, _RAIter2 __begin2, _Pred __pred, _Selector __selector, \fBequal_split_tag\fP)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP< _RAIter1, _RAIter2 > \fB__find_template\fP (_RAIter1 __begin1, _RAIter1 __end1, _RAIter2 __begin2, _Pred __pred, _Selector __selector, \fBgrowing_blocks_tag\fP)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP< _RAIter1, _RAIter2 > \fB__find_template\fP (_RAIter1 __begin1, _RAIter1 __end1, _RAIter2 __begin2, _Pred __pred, _Selector __selector, \fBconstant_size_blocks_tag\fP)"
.br
.ti -1c
.RI "template<typename _IIta , typename _UserOp , typename _Functionalitizzle , typename _Red , typename _Result > _UserOp \fB__for_each_template_random_access\fP (_IIta __begin, _IIta __end, _UserOp __user_op, _Functionalitizzle &__functionality, _Red __reduction, _Result __reduction_start, _Result &__output, typename std::iterator_traits< _IIta >::difference_type __bound, \fB_Parallelism\fP __parallelism_tag)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op \fB__for_each_template_random_access_ed\fP (_RAIta __begin, _RAIta __end, _Op __o, _Fu &__f, _Red __r, _Result __base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type __bound)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op \fB__for_each_template_random_access_omp_loop\fP (_RAIta __begin, _RAIta __end, _Op __o, _Fu &__f, _Red __r, _Result __base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type __bound)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op \fB__for_each_template_random_access_omp_loop_static\fP (_RAIta __begin, _RAIta __end, _Op __o, _Fu &__f, _Red __r, _Result __base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type __bound)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op \fB__for_each_template_random_access_workstealing\fP (_RAIta __begin, _RAIta __end, _Op __op, _Fu &__f, _Red __r, _Result __base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type __bound)"
.br
.ti -1c
.RI "\fB_ThreadIndex\fP \fB__get_max_threads\fP ()"
.br
.ti -1c
.RI "bool \fB__is_parallel\fP (const \fB_Parallelism\fP __p)"
.br
.ti -1c
.RI "template<typename _IIta , typename _Compare > bool \fB__is_sorted\fP (_IIta __begin, _IIta __end, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > _RAIta \fB__median_of_three_iterators\fP (_RAIta __a, _RAIta __b, _RAIta __c, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare > _OutputIterator \fB__merge_advance\fP (_RAIter1 &__begin1, _RAIter1 __end1, _RAIter2 &__begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare > _OutputIterator \fB__merge_advance_movc\fP (_RAIter1 &__begin1, _RAIter1 __end1, _RAIter2 &__begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare > _OutputIterator \fB__merge_advance_usual\fP (_RAIter1 &__begin1, _RAIter1 __end1, _RAIter2 &__begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter2 , typename _RAIter3 , typename _Compare > _RAIter3 \fB__parallel_merge_advance\fP (_RAIter1 &__begin1, _RAIter1 __end1, _RAIter2 &__begin2, _RAIter2 __end2, _RAIter3 __target, typename std::iterator_traits< _RAIter1 >::difference_type __max_length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIter1 , typename _RAIter3 , typename _Compare > _RAIter3 \fB__parallel_merge_advance\fP (_RAIter1 &__begin1, _RAIter1 __end1, _RAIter1 &__begin2, _RAIter1 __end2, _RAIter3 __target, typename std::iterator_traits< _RAIter1 >::difference_type __max_length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > void \fB__parallel_nth_element\fP (_RAIta __begin, _RAIta __nth, _RAIta __end, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > void \fB__parallel_partial_sort\fP (_RAIta __begin, _RAIta __middle, _RAIta __end, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _BinaryOperation > _OutputIterator \fB__parallel_partial_sum\fP (_IIta __begin, _IIta __end, _OutputIterator __result, _BinaryOperation __bin_op)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _BinaryOperation > _OutputIterator \fB__parallel_partial_sum_basecase\fP (_IIta __begin, _IIta __end, _OutputIterator __result, _BinaryOperation __bin_op, typename std::iterator_traits< _IIta >::value_type __value)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _BinaryOperation > _OutputIterator \fB__parallel_partial_sum_linear\fP (_IIta __begin, _IIta __end, _OutputIterator __result, _BinaryOperation __bin_op, typename std::iterator_traits< _IIta >::difference_type __n)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Predicate > std::iterator_traits< _RAIta >
.br
::difference_type \fB__parallel_partition\fP (_RAIta __begin, _RAIta __end, _Predicate __pred, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _RandomNumberGenerator > void \fB__parallel_random_shuffle\fP (_RAIta __begin, _RAIta __end, _RandomNumberGenerator __rng=\fB_RandomNumber\fP())"
.br
.ti -1c
.RI "template<typename _RAIta , typename _RandomNumberGenerator > void \fB__parallel_random_shuffle_drs\fP (_RAIta __begin, _RAIta __end, typename std::iterator_traits< _RAIta >::difference_type __n, \fB_ThreadIndex\fP __num_threads, _RandomNumberGenerator &__rng)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _RandomNumberGenerator > void \fB__parallel_random_shuffle_drs_pu\fP (\fB_DRSSorterPU\fP< _RAIter, _RandomNumberGenerator > *__pus)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _Compare > _OutputIterator \fB__parallel_set_difference\fP (_IIta __begin1, _IIta __end1, _IIta __begin2, _IIta __end2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _Compare > _OutputIterator \fB__parallel_set_intersection\fP (_IIta __begin1, _IIta __end1, _IIta __begin2, _IIta __end2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _Operation > _OutputIterator \fB__parallel_set_operation\fP (_IIta __begin1, _IIta __end1, _IIta __begin2, _IIta __end2, _OutputIterator __result, _Operation __op)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _Compare > _OutputIterator \fB__parallel_set_symmetric_difference\fP (_IIta __begin1, _IIta __end1, _IIta __begin2, _IIta __end2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _IIta , typename _OutputIterator , typename _Compare > _OutputIterator \fB__parallel_set_union\fP (_IIta __begin1, _IIta __end1, _IIta __begin2, _IIta __end2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare , typename _Parallelizzle > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fB_Parallelism\fP __parallelism)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fBmultiway_mergesort_tag\fP __parallelism)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fBmultiway_mergesort_exact_tag\fP __parallelism)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fBmultiway_mergesort_sampling_tag\fP __parallelism)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fBquicksort_tag\fP __parallelism)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fBbalanced_quicksort_tag\fP __parallelism)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fBdefault_parallel_tag\fP __parallelism)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIta , typename _Compare > void \fB__parallel_sort\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fBparallel_tag\fP __parallelism)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > void \fB__parallel_sort_qs\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > void \fB__parallel_sort_qs_conquer\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > std::iterator_traits< _RAIta >
.br
::difference_type \fB__parallel_sort_qs_divide\fP (_RAIta __begin, _RAIta __end, _Compare __comp, typename std::iterator_traits< _RAIta >::difference_type __pivot_rank, typename std::iterator_traits< _RAIta >::difference_type __num_samples, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > void \fB__parallel_sort_qsb\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<typename _IIta , class _OutputIterator , class _BinaryPredicate > _OutputIterator \fB__parallel_unique_copy\fP (_IIta __first, _IIta __last, _OutputIterator __result, _BinaryPredicate __binary_pred)"
.br
.ti -1c
.RI "template<typename _IIta , class _OutputIterator > _OutputIterator \fB__parallel_unique_copy\fP (_IIta __first, _IIta __last, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > void \fB__qsb_conquer\fP (\fB_QSBThreadLocal\fP< _RAIta > **__tls, _RAIta __begin, _RAIta __end, _Compare __comp, \fB_ThreadIndex\fP __iam, \fB_ThreadIndex\fP __num_threads, bool __parent_wait)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > std::iterator_traits< _RAIta >
.br
::difference_type \fB__qsb_divide\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _Compare > void \fB__qsb_local_sort_with_helping\fP (\fB_QSBThreadLocal\fP< _RAIta > **__tls, _Compare &__comp, \fB_ThreadIndex\fP __iam, bool __wait)"
.br
.ti -1c
.RI "template<typename _RandomNumberGenerator > int \fB__random_number_pow2\fP (int __logp, _RandomNumberGenerator &__rng)"
.br
.ti -1c
.RI "template<typename _Size > _Size \fB__rd_log2\fP (_Size __n)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__round_up_to_pow2\fP (_Tp __x)"
.br
.ti -1c
.RI "template<typename __RAIter1 , typename __RAIter2 , typename _Pred > __RAIter1 \fB__search_template\fP (__RAIter1 __begin1, __RAIter1 __end1, __RAIter2 __begin2, __RAIter2 __end2, _Pred __pred)"
.br
.ti -1c
.RI "template<bool __stable, bool __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 \fB__sequential_multiway_merge\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits< typename std::iterator_traits< _RAIterIterator >::value_type::first_type >::value_type &__sentinel, _DifferenceTp __length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RAIta , typename _RandomNumberGenerator > void \fB__sequential_random_shuffle\fP (_RAIta __begin, _RAIta __end, _RandomNumberGenerator &__rng)"
.br
.ti -1c
.RI "template<typename _IIta > void \fB__shrink\fP (\fBstd::vector\fP< _IIta > &__os_starts, size_t &__count_to_two, size_t &__range_length)"
.br
.ti -1c
.RI "template<typename _IIta > void \fB__shrink_and_double\fP (\fBstd::vector\fP< _IIta > &__os_starts, size_t &__count_to_two, size_t &__range_length, const bool __make_twice)"
.br
.ti -1c
.RI "void \fB__yield\fP ()"
.br
.ti -1c
.RI "template<typename _IIta , typename _FunctorType > size_t \fBlist_partition\fP (const _IIta __begin, const _IIta __end, _IIta *__starts, size_t *__lengths, const int __num_parts, _FunctorType &__f, int __oversampling=0)"
.br
.ti -1c
.RI "template<typename _Tp > const _Tp & \fBmax\fP (const _Tp &__a, const _Tp &__b)"
.br
.ti -1c
.RI "template<typename _Tp > const _Tp & \fBmin\fP (const _Tp &__a, const _Tp &__b)"
.br
.ti -1c
.RI "template<typename _RanSeqs , typename _RankType , typename _RankIterator , typename _Compare > void \fBmultiseq_partition\fP (_RanSeqs __begin_seqs, _RanSeqs __end_seqs, _RankType __rank, _RankIterator __begin_offsets, _Compare __comp=\fBstd::less\fP< typename std::iterator_traits< typename std::iterator_traits< _RanSeqs >::value_type::first_type >::value_type >())"
.br
.ti -1c
.RI "template<typename _Tp , typename _RanSeqs , typename _RankType , typename _Compare > _Tp \fBmultiseq_selection\fP (_RanSeqs __begin_seqs, _RanSeqs __end_seqs, _RankType __rank, _RankType &__offset, _Compare __comp=\fBstd::less\fP< _Tp >())"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::sequential_tag\fP)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::exact_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::sampling_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBparallel_tag\fP __tag=\fBparallel_tag\fP(0))"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBdefault_parallel_tag\fP __tag)"
.br
.ti -1c
.RI "template<template< typename RAI, typename C > class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 \fBmultiway_merge_3_variant\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)"
.br
.ti -1c
.RI "template<template< typename RAI, typename C > class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 \fBmultiway_merge_4_variant\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType > void \fBmultiway_merge_exact_splitting\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _DifferenceType __length, _DifferenceType __total_length, _Compare __comp, \fBstd::vector\fP< \fBstd::pair\fP< _DifferenceType, _DifferenceType > > *__pieces)"
.br
.ti -1c
.RI "template<typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 \fBmultiway_merge_loser_tree\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename UnguardedLoserTree , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 \fBmultiway_merge_loser_tree_sentinel\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits< typename std::iterator_traits< _RAIterIterator >::value_type::first_type >::value_type &__sentinel, _DifferenceTp __length, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 \fBmultiway_merge_loser_tree_unguarded\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits< typename std::iterator_traits< _RAIterIterator >::value_type::first_type >::value_type &__sentinel, _DifferenceTp __length, _Compare __comp)"
.br
.ti -1c
.RI "template<bool __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType > void \fBmultiway_merge_sampling_splitting\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _DifferenceType __length, _DifferenceType __total_length, _Compare __comp, \fBstd::vector\fP< \fBstd::pair\fP< _DifferenceType, _DifferenceType > > *__pieces)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::sequential_tag\fP)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::exact_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBsampling_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBparallel_tag\fP __tag=\fBparallel_tag\fP(0))"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBmultiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBdefault_parallel_tag\fP __tag)"
.br
.ti -1c
.RI "template<bool __stable, bool __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Splitta , typename _Compare > _RAIter3 \fBparallel_multiway_merge\fP (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _Splitta __splitter, _DifferenceTp __length, _Compare __comp, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<bool __stable, bool __exact, typename _RAIta , typename _Compare > void \fBparallel_sort_mwms\fP (_RAIta __begin, _RAIta __end, _Compare __comp, \fB_ThreadIndex\fP __num_threads)"
.br
.ti -1c
.RI "template<bool __stable, bool __exact, typename _RAIta , typename _Compare > void \fBparallel_sort_mwms_pu\fP (\fB_PMWMSSortingData\fP< _RAIta > *__sd, _Compare &__comp)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::sequential_tag\fP)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::exact_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBsampling_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBparallel_tag\fP __tag=\fBparallel_tag\fP(0))"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBdefault_parallel_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::sequential_tag\fP)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fB__gnu_parallel::exact_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBsampling_tag\fP __tag)"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBparallel_tag\fP __tag=\fBparallel_tag\fP(0))"
.br
.ti -1c
.RI "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut \fBstable_multiway_merge_sentinels\fP (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, \fBdefault_parallel_tag\fP __tag)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const int \fB_CASable_bits\fP"
.br
.ti -1c
.RI "static const \fB_CASable\fP \fB_CASable_mask\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
GNU parallel code fo' hood use\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef unsigned short \fB__gnu_parallel::_BinIndex\fP"

.PP
Type ta hold tha index of a funky-ass bin\&. Right back up in yo muthafuckin ass. Since nuff variablez of dis type is allocated, it should be chosen as lil' small-ass as possible\&. 
.PP
Definizzle at line 47 of file random_shuffle\&.h\&.
.SS "typedef int64_t \fB__gnu_parallel::_CASable\fP"

.PP
Longest compare-and-swappable integer type on dis platform\&. 
.PP
Definizzle at line 127 of file types\&.h\&.
.SS "typedef uint64_t \fB__gnu_parallel::_SequenceIndex\fP"

.PP
Unsigned integer ta index __elements\&. Da total number of elements fo' each algorithm must fit tha fuck into dis type\&. 
.PP
Definizzle at line 117 of file types\&.h\&.
.SS "typedef uint16_t \fB__gnu_parallel::_ThreadIndex\fP"

.PP
Unsigned integer ta index a thread number\&. Da maximum thread number (for each processor) must fit tha fuck into dis type\&. 
.PP
Definizzle at line 123 of file types\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB__gnu_parallel::_AlgorithmStrategy\fP"

.PP
Strategies fo' run-time algorithm selection: 
.PP
Definizzle at line 67 of file types\&.h\&.
.SS "enum \fB__gnu_parallel::_FindAlgorithm\fP"

.PP
Find algorithms: 
.PP
Definizzle at line 106 of file types\&.h\&.
.SS "enum \fB__gnu_parallel::_MultiwayMergeAlgorithm\fP"

.PP
Mergin algorithms: 
.PP
Definizzle at line 85 of file types\&.h\&.
.SS "enum \fB__gnu_parallel::_Parallelism\fP"

.PP
Run-time equivalents fo' tha compile-time tags\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIsequential \fP\fP
Not parallel\&. 
.TP
\fB\fIparallel_unbalanced \fP\fP
Parallel unbalanced (equal-sized chunks)\&. 
.TP
\fB\fIparallel_balanced \fP\fP
Parallel balanced (work-stealing)\&. 
.TP
\fB\fIparallel_omp_loop \fP\fP
Parallel wit OpenMP dynamic load-balancing\&. 
.TP
\fB\fIparallel_omp_loop_static \fP\fP
Parallel wit OpenMP static load-balancing\&. 
.TP
\fB\fIparallel_taskqueue \fP\fP
Parallel wit OpenMP taskqueue construct\&. 
.PP
Definizzle at line 44 of file types\&.h\&.
.SS "enum \fB__gnu_parallel::_PartialSumAlgorithm\fP"

.PP
Partial sum algorithms: recursive, linear\&. 
.PP
Definizzle at line 91 of file types\&.h\&.
.SS "enum \fB__gnu_parallel::_SortAlgorithm\fP"

.PP
Sortin algorithms: 
.PP
Definizzle at line 76 of file types\&.h\&.
.SS "enum \fB__gnu_parallel::_SplittingAlgorithm\fP"

.PP
Sorting/mergin algorithms: sampling, __exact\&. 
.PP
Definizzle at line 98 of file types\&.h\&.
.SH "Function Documentation"
.PP 
.SS "template<typename _RAIta , typename _DifferenceTp > void __gnu_parallel::__calc_bordaz (_RAIter__elements, _DifferenceTp__length, _DifferenceTp *__off)"

.PP
Precalculate __advances fo' Knuth-Morris-Pratt algorithm\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__elements\fP Begin iterator of sequence ta search for\&. 
.br
\fI__length\fP Length of sequence ta search for\&. 
.br
\fI__off\fP Returned __offsets\&. 
.RE
.PP

.PP
Definizzle at line 51 of file search\&.h\&.
.PP
Referenced by __search_template()\&.
.SS "template<typename _Tp > bool __gnu_parallel::__compare_and_swap (volatile _Tp *__ptr, _Tp__comparand, _Tp__replacement)\fC [inline]\fP"

.PP
Compare-and-swap\&. Compare \fC*__ptr\fP n' \fC__comparand\fP\&. If equal, let \fC*__ptr=__replacement\fP n' return \fCtrue\fP, return \fCfalse\fP otherwise\&.
.PP
\fBParameters:\fP
.RS 4
\fI__ptr\fP Pointa ta signed integer\&. 
.br
\fI__comparand\fP Compare value\&. 
.br
\fI__replacement\fP Replacement value\&. 
.RE
.PP

.PP
Definizzle at line 108 of file parallel/compatibility\&.h\&.
.PP
Referenced by __parallel_partition(), __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::pop_back(), n' __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::pop_front()\&.
.SS "void __gnu_parallel::__decode2 (_CASable__x, int &__a, int &__b)\fC [inline]\fP"

.PP
Decode two integers from one gnu_parallel::_CASable\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP __gnu_parallel::_CASable ta decode integers from\&. 
.br
\fI__a\fP First integer, ta be decoded from da most thugged-out-significant \fC_CASable_bits/2\fP bitz of \fC__x\fP\&. 
.br
\fI__b\fP Second integer, ta be encoded up in tha least-significant \fC_CASable_bits/2\fP bitz of \fC__x\fP\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
__encode2 
.RE
.PP

.PP
Definizzle at line 133 of file parallel/base\&.h\&.
.PP
References _CASable_bits, n' _CASable_mask\&.
.PP
Referenced by __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::pop_back(), __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::pop_front(), n' __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::push_front()\&.
.SS "template<typename _RAIta , typename _DifferenceTp > void __gnu_parallel::__determine_samplez (_PMWMSSortingData< _RAIta > *__sd, _DifferenceTp__num_samples)"

.PP
Select _M_samplez from a sequence\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__sd\fP Pointa ta algorithm data\&. _Result is ghon be placed up in \fC__sd->_M_samples\fP\&. 
.br
\fI__num_samples\fP Number of _M_samplez ta select\&. 
.RE
.PP

.PP
Definizzle at line 97 of file multiway_mergesort\&.h\&.
.PP
References __equally_split(), __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_samples, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_source, n' __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_starts\&.
.SS "\fB_CASable\fP __gnu_parallel::__encode2 (int__a, int__b)\fC [inline]\fP"

.PP
Encode two integers tha fuck into one gnu_parallel::_CASable\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__a\fP First integer, ta be encoded up in da most thugged-out-significant \fC_CASable_bits/2\fP bits\&. 
.br
\fI__b\fP Second integer, ta be encoded up in tha least-significant \fC_CASable_bits/2\fP bits\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
value encodin \fC__a\fP n' \fC__b\fP\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
__decode2 
.RE
.PP

.PP
Definizzle at line 119 of file parallel/base\&.h\&.
.PP
References _CASable_bits\&.
.PP
Referenced by __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::_RestrictedBoundedConcurrentQueue(), __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::pop_back(), __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::pop_front(), n' __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::push_front()\&.
.SS "template<typename _DifferenceType , typename _OutputIterator > _OutputIterator __gnu_parallel::__equally_split (_DifferenceType__n, _ThreadIndex__num_threads, _OutputIterator__s)"

.PP
function ta split a sequence tha fuck into partz of almost equal size\&. Da resultin sequence __z of length __num_threads+1 gotz nuff tha splittin positions when splittin tha range [0,__n) tha fuck into partz of almost equal size (plus minus 1)\&. Da first entry is 0, tha last one n\&. There may result empty parts\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of elements 
.br
\fI__num_threads\fP Number of parts 
.br
\fI__s\fP Splittas 
.RE
.PP
\fBReturns:\fP
.RS 4
End of __splitta sequence, i\&.e\&. \fC__s+__num_threads+1\fP 
.RE
.PP

.PP
Definizzle at line 48 of file equally_split\&.h\&.
.PP
Referenced by __determine_samples(), __find_template(), __parallel_partial_sum_linear(), __parallel_unique_copy(), __search_template(), n' multiway_merge_exact_splitting()\&.
.SS "template<typename _DifferenceType > _DifferenceType __gnu_parallel::__equally_split_point (_DifferenceType__n, _ThreadIndex__num_threads, _ThreadIndex__thread_no)"

.PP
function ta split a sequence tha fuck into partz of almost equal size\&. Returns tha posizzle of tha splittin point between thread number __thread_no (included) n' thread number __thread_no+1 (excluded)\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of elements 
.br
\fI__num_threads\fP Number of parts 
.br
\fI__thread_no\fP Number of threadz 
.RE
.PP
\fBReturns:\fP
.RS 4
splittin point 
.RE
.PP

.PP
Definizzle at line 75 of file equally_split\&.h\&.
.PP
Referenced by __for_each_template_random_access_ed()\&.
.SS "template<typename _Tp > _Tp __gnu_parallel::__fetch_and_add (volatile _Tp *__ptr, _Tp__addend)\fC [inline]\fP"

.PP
Add a value ta a variable, atomically\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__ptr\fP Pointa ta a signed integer\&. 
.br
\fI__addend\fP Value ta add\&. 
.RE
.PP

.PP
Definizzle at line 74 of file parallel/compatibility\&.h\&.
.PP
Referenced by __parallel_partition(), n' __gnu_parallel::_RestrictedBoundedConcurrentQueue< pair< _RAIter, _RAIta > >::push_front()\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP<_RAIter1, _RAIter2> __gnu_parallel::__find_template (_RAIter1__begin1, _RAIter1__end1, _RAIter2__begin2, _Pred__pred, _Selector__selector)\fC [inline]\fP"

.PP
Parallel std::find, switch fo' different algorithms\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. Must have same length as first sequence\&. 
.br
\fI__pred\fP Find predicate\&. 
.br
\fI__selector\fP _Functionalitizzle (e\&. g\&. std::find_if(), std::equal(),\&.\&.\&.) 
.RE
.PP
\fBReturns:\fP
.RS 4
Place of findin up in both sequences\&. 
.RE
.PP

.PP
Definizzle at line 60 of file find\&.h\&.
.PP
References __gnu_parallel::_Settings::get(), n' std::make_pair()\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP<_RAIter1, _RAIter2> __gnu_parallel::__find_template (_RAIter1__begin1, _RAIter1__end1, _RAIter2__begin2, _Pred__pred, _Selector__selector, equal_split_tag)"

.PP
Parallel std::find, equal splittin variant\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. Right back up in yo muthafuckin ass. Second __sequence must have same length as first sequence\&. 
.br
\fI__pred\fP Find predicate\&. 
.br
\fI__selector\fP _Functionalitizzle (e\&. g\&. std::find_if(), std::equal(),\&.\&.\&.) 
.RE
.PP
\fBReturns:\fP
.RS 4
Place of findin up in both sequences\&. 
.RE
.PP

.PP
Definizzle at line 97 of file find\&.h\&.
.PP
References __equally_split(), n' _GLIBCXX_CALL\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP<_RAIter1, _RAIter2> __gnu_parallel::__find_template (_RAIter1__begin1, _RAIter1__end1, _RAIter2__begin2, _Pred__pred, _Selector__selector, growing_blocks_tag)"

.PP
Parallel std::find, growin block size variant\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. Right back up in yo muthafuckin ass. Second __sequence must have same length as first sequence\&. 
.br
\fI__pred\fP Find predicate\&. 
.br
\fI__selector\fP _Functionalitizzle (e\&. g\&. std::find_if(), std::equal(),\&.\&.\&.) 
.RE
.PP
\fBReturns:\fP
.RS 4
Place of findin up in both sequences\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
__gnu_parallel::_Settings::find_sequential_search_size 
.PP
__gnu_parallel::_Settings::find_scale_factor
.RE
.PP
There is two main differences between tha growin blocks n' tha constant-size blocks variants\&. 1\&. For GB, tha block size grows; fo' CSB, tha block size is fixed\&. 2\&. For GB, tha blocks is allocated dynamically; fo' CSB, tha blocks is allocated up in a predetermined manner, namely spacial round-robin\&. 
.PP
Definizzle at line 185 of file find\&.h\&.
.PP
References _GLIBCXX_CALL, __gnu_parallel::_Settings::find_scale_factor, __gnu_parallel::_Settings::find_sequential_search_size, n' __gnu_parallel::_Settings::get()\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector > \fBstd::pair\fP<_RAIter1, _RAIter2> __gnu_parallel::__find_template (_RAIter1__begin1, _RAIter1__end1, _RAIter2__begin2, _Pred__pred, _Selector__selector, constant_size_blocks_tag)"

.PP
Parallel std::find, constant block size variant\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. Right back up in yo muthafuckin ass. Second __sequence must have same length as first sequence\&. 
.br
\fI__pred\fP Find predicate\&. 
.br
\fI__selector\fP _Functionalitizzle (e\&. g\&. std::find_if(), std::equal(),\&.\&.\&.) 
.RE
.PP
\fBReturns:\fP
.RS 4
Place of findin up in both sequences\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
__gnu_parallel::_Settings::find_sequential_search_size 
.PP
__gnu_parallel::_Settings::find_block_size There is two main differences between tha growin blocks n' tha constant-size blocks variants\&. 1\&. For GB, tha block size grows; fo' CSB, tha block size is fixed\&. 2\&. For GB, tha blocks is allocated dynamically; fo' CSB, tha blocks is allocated up in a predetermined manner, namely spacial round-robin\&. 
.RE
.PP

.PP
Definizzle at line 315 of file find\&.h\&.
.PP
References _GLIBCXX_CALL, __gnu_parallel::_Settings::find_initial_block_size, __gnu_parallel::_Settings::find_sequential_search_size, n' __gnu_parallel::_Settings::get()\&.
.SS "template<typename _IIta , typename _UserOp , typename _Functionalitizzle , typename _Red , typename _Result > _UserOp __gnu_parallel::__for_each_template_random_access (_IIter__begin, _IIter__end, _UserOp__user_op, _Functionalitizzle &__functionality, _Red__reduction, _Result__reduction_start, _Result &__output, typename std::iterator_traits< _IIta >::difference_type__bound, _Parallelism__parallelism_tag)"

.PP
Chose tha desired algorithm by evaluatin \fC__parallelism_tag\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__user_op\fP A user-specified functor (comparator, predicate, associatizzle operator,\&.\&.\&.) 
.br
\fI__functionality\fP functor ta \fIprocess\fP a element wit __user_op (dependz on desired functionality, e\&. g\&. accumulate, for_each,\&.\&.\&. 
.br
\fI__reduction\fP Reduction functor\&. 
.br
\fI__reduction_start\fP Initial value fo' reduction\&. 
.br
\fI__output\fP Output iterator\&. 
.br
\fI__bound\fP Maximum number of elements processed\&. 
.br
\fI__parallelism_tag\fP Parallelization method 
.RE
.PP

.PP
Definizzle at line 61 of file for_each\&.h\&.
.PP
References __for_each_template_random_access_ed(), __for_each_template_random_access_omp_loop(), __for_each_template_random_access_workstealing(), parallel_omp_loop, parallel_omp_loop_static, n' parallel_unbalanced\&.
.SS "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op __gnu_parallel::__for_each_template_random_access_ed (_RAIter__begin, _RAIter__end, _Op__o, _Fu &__f, _Red__r, _Result__base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type__bound)"

.PP
Embarrassingly parallel algorithm fo' random access iterators, rockin hand-crafted parallelization by equal splittin tha work\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of element sequence\&. 
.br
\fI__end\fP End iterator of element sequence\&. 
.br
\fI__o\fP User-supplied functor (comparator, predicate, addin functor, \&.\&.\&.) 
.br
\fI__f\fP Functor ta 'process' a element wit __op (dependz on desired functionality, e\&. g\&. fo' std::for_each(), \&.\&.\&.)\&. 
.br
\fI__r\fP Functor ta 'add' a single __result ta tha already processed elements (dependz on functionality)\&. 
.br
\fI__base\fP Base value fo' reduction\&. 
.br
\fI__output\fP Pointa ta posizzle where final result is freestyled ta 
.br
\fI__bound\fP Maximum number of elements processed (e\&. g\&. fo' std::count_n())\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
User-supplied functor (that may contain a part of tha result)\&. 
.RE
.PP

.PP
Definizzle at line 67 of file par_loop\&.h\&.
.PP
References __equally_split_point()\&.
.PP
Referenced by __for_each_template_random_access()\&.
.SS "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op __gnu_parallel::__for_each_template_random_access_omp_loop (_RAIter__begin, _RAIter__end, _Op__o, _Fu &__f, _Red__r, _Result__base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type__bound)"

.PP
Embarrassingly parallel algorithm fo' random access iterators, rockin a OpenMP fo' loop\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of element sequence\&. 
.br
\fI__end\fP End iterator of element sequence\&. 
.br
\fI__o\fP User-supplied functor (comparator, predicate, addin functor, etc\&.)\&. 
.br
\fI__f\fP Functor ta \fIprocess\fP a element wit __op (dependz on desired functionality, e\&. g\&. fo' std::for_each(), \&.\&.\&.)\&. 
.br
\fI__r\fP Functor ta \fIadd\fP a single __result ta tha already processed elements (dependz on functionality)\&. 
.br
\fI__base\fP Base value fo' reduction\&. 
.br
\fI__output\fP Pointa ta posizzle where final result is freestyled ta 
.br
\fI__bound\fP Maximum number of elements processed (e\&. g\&. fo' std::count_n())\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
User-supplied functor (that may contain a part of tha result)\&. 
.RE
.PP

.PP
Definizzle at line 67 of file omp_loop\&.h\&.
.PP
Referenced by __for_each_template_random_access()\&.
.SS "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op __gnu_parallel::__for_each_template_random_access_omp_loop_static (_RAIter__begin, _RAIter__end, _Op__o, _Fu &__f, _Red__r, _Result__base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type__bound)"

.PP
Embarrassingly parallel algorithm fo' random access iterators, rockin a OpenMP fo' loop wit static scheduling\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of element sequence\&. 
.br
\fI__end\fP End iterator of element sequence\&. 
.br
\fI__o\fP User-supplied functor (comparator, predicate, addin functor, \&.\&.\&.)\&. 
.br
\fI__f\fP Functor ta \fIprocess\fP a element wit __op (dependz on desired functionality, e\&. g\&. fo' std::for_each(), \&.\&.\&.)\&. 
.br
\fI__r\fP Functor ta \fIadd\fP a single __result ta tha already processed __elements (dependz on functionality)\&. 
.br
\fI__base\fP Base value fo' reduction\&. 
.br
\fI__output\fP Pointa ta posizzle where final result is freestyled ta 
.br
\fI__bound\fP Maximum number of elements processed (e\&. g\&. fo' std::count_n())\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
User-supplied functor (that may contain a part of tha result)\&. 
.RE
.PP

.PP
Definizzle at line 66 of file omp_loop_static\&.h\&.
.SS "template<typename _RAIta , typename _Op , typename _Fu , typename _Red , typename _Result > _Op __gnu_parallel::__for_each_template_random_access_workstealin (_RAIter__begin, _RAIter__end, _Op__op, _Fu &__f, _Red__r, _Result__base, _Result &__output, typename std::iterator_traits< _RAIta >::difference_type__bound)"

.PP
Work jackin algorithm fo' random access iterators\&. Uses O(1) additionizzle memory\&. Right back up in yo muthafuckin ass. Synchronization at thang lists is done wit atomic operations\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of element sequence\&. 
.br
\fI__end\fP End iterator of element sequence\&. 
.br
\fI__op\fP User-supplied functor (comparator, predicate, addin functor, \&.\&.\&.)\&. 
.br
\fI__f\fP Functor ta \fIprocess\fP a element wit __op (dependz on desired functionality, e\&. g\&. fo' std::for_each(), \&.\&.\&.)\&. 
.br
\fI__r\fP Functor ta \fIadd\fP a single __result ta tha already processed elements (dependz on functionality)\&. 
.br
\fI__base\fP Base value fo' reduction\&. 
.br
\fI__output\fP Pointa ta posizzle where final result is freestyled ta 
.br
\fI__bound\fP Maximum number of elements processed (e\&. g\&. fo' std::count_n())\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
User-supplied functor (that may contain a part of tha result)\&. 
.RE
.PP

.PP
Definizzle at line 99 of file workstealing\&.h\&.
.PP
References __gnu_debug::__base(), __yield(), _GLIBCXX_CALL, __gnu_parallel::_Job< _DifferenceTp >::_M_first, __gnu_parallel::_Job< _DifferenceTp >::_M_last, __gnu_parallel::_Job< _DifferenceTp >::_M_load, __gnu_parallel::_Settings::cache_line_size, __gnu_parallel::_Settings::get(), n' min()\&.
.PP
Referenced by __for_each_template_random_access()\&.
.SS "template<typename _IIta , typename _Compare > bool __gnu_parallel::__is_sorted (_IIter__begin, _IIter__end, _Compare__comp)"

.PP
Peep whether \fC\fP[__begin, \fC__end\fP) is sorted accordin ta \fC__comp\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of sequence\&. 
.br
\fI__end\fP End iterator of sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if sorted, \fCfalse\fP otherwise\&. 
.RE
.PP

.PP
Definizzle at line 51 of file checkers\&.h\&.
.PP
Referenced by __sequential_multiway_merge(), multiway_merge_loser_tree_sentinel(), n' parallel_multiway_merge()\&.
.SS "template<typename _RAIta , typename _Compare > _RAIta __gnu_parallel::__median_of_three_iterators (_RAIter__a, _RAIter__b, _RAIter__c, _Compare__comp)"

.PP
Compute tha median of three referenced elements, accordin ta \fC__comp\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__a\fP First iterator\&. 
.br
\fI__b\fP Second iterator\&. 
.br
\fI__c\fP Third iterator\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP

.PP
Definizzle at line 398 of file parallel/base\&.h\&.
.PP
Referenced by __qsb_divide()\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare > _OutputIterator __gnu_parallel::__merge_advizzle (_RAIter1 &__begin1, _RAIter1__end1, _RAIter2 &__begin2, _RAIter2__end2, _OutputIterator__target, _DifferenceTp__max_length, _Compare__comp)\fC [inline]\fP"

.PP
Merge routine bein able ta merge only tha \fC__max_length\fP smallest elements\&. Da \fC__begin\fP iterators is advanced accordingly, they might not reach \fC__end\fP, up in contrast ta tha usual variant\&. Right back up in yo muthafuckin ass. Static switch on whether ta use tha conditional-move variant\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. 
.br
\fI__end2\fP End iterator of second sequence\&. 
.br
\fI__target\fP Target begin iterator\&. 
.br
\fI__max_length\fP Maximum number of elements ta merge\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Output end iterator\&. 
.RE
.PP

.PP
Definizzle at line 171 of file merge\&.h\&.
.PP
References __merge_advance_movc(), n' _GLIBCXX_CALL\&.
.PP
Referenced by __parallel_merge_advance(), n' __sequential_multiway_merge()\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare > _OutputIterator __gnu_parallel::__merge_advance_movc (_RAIter1 &__begin1, _RAIter1__end1, _RAIter2 &__begin2, _RAIter2__end2, _OutputIterator__target, _DifferenceTp__max_length, _Compare__comp)"

.PP
Merge routine bein able ta merge only tha \fC__max_length\fP smallest elements\&. Da \fC__begin\fP iterators is advanced accordingly, they might not reach \fC__end\fP, up in contrast ta tha usual variant\&. Right back up in yo muthafuckin ass. Specially designed code should allow tha compila ta generate conditionizzle moves instead of branches\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. 
.br
\fI__end2\fP End iterator of second sequence\&. 
.br
\fI__target\fP Target begin iterator\&. 
.br
\fI__max_length\fP Maximum number of elements ta merge\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Output end iterator\&. 
.RE
.PP

.PP
Definizzle at line 105 of file merge\&.h\&.
.PP
Referenced by __merge_advance()\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare > _OutputIterator __gnu_parallel::__merge_advance_usual (_RAIter1 &__begin1, _RAIter1__end1, _RAIter2 &__begin2, _RAIter2__end2, _OutputIterator__target, _DifferenceTp__max_length, _Compare__comp)"

.PP
Merge routine bein able ta merge only tha \fC__max_length\fP smallest elements\&. Da \fC__begin\fP iterators is advanced accordingly, they might not reach \fC__end\fP, up in contrast ta tha usual variant\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. 
.br
\fI__end2\fP End iterator of second sequence\&. 
.br
\fI__target\fP Target begin iterator\&. 
.br
\fI__max_length\fP Maximum number of elements ta merge\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Output end iterator\&. 
.RE
.PP

.PP
Definizzle at line 57 of file merge\&.h\&.
.SS "template<typename _RAIter1 , typename _RAIter2 , typename _RAIter3 , typename _Compare > _RAIter3 __gnu_parallel::__parallel_merge_advizzle (_RAIter1 &__begin1, _RAIter1__end1, _RAIter2 &__begin2, _RAIter2__end2, _RAIter3__target, typename std::iterator_traits< _RAIter1 >::difference_type__max_length, _Compare__comp)\fC [inline]\fP"

.PP
Merge routine fallback ta sequential up in case tha iteratorz of tha two input sequences iz of different type\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. 
.br
\fI__end2\fP End iterator of second sequence\&. 
.br
\fI__target\fP Target begin iterator\&. 
.br
\fI__max_length\fP Maximum number of elements ta merge\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Output end iterator\&. 
.RE
.PP

.PP
Definizzle at line 195 of file merge\&.h\&.
.PP
References __merge_advance()\&.
.SS "template<typename _RAIter1 , typename _RAIter3 , typename _Compare > _RAIter3 __gnu_parallel::__parallel_merge_advizzle (_RAIter1 &__begin1, _RAIter1__end1, _RAIter1 &__begin2, _RAIter1__end2, _RAIter3__target, typename std::iterator_traits< _RAIter1 >::difference_type__max_length, _Compare__comp)\fC [inline]\fP"

.PP
Parallel merge routine bein able ta merge only tha \fC__max_length\fP smallest elements\&. Da \fC__begin\fP iterators is advanced accordingly, they might not reach \fC__end\fP, up in contrast ta tha usual variant\&. Da functionalitizzle is projected onto parallel_multiway_merge\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. 
.br
\fI__end2\fP End iterator of second sequence\&. 
.br
\fI__target\fP Target begin iterator\&. 
.br
\fI__max_length\fP Maximum number of elements ta merge\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Output end iterator\&. 
.RE
.PP

.PP
Definizzle at line 223 of file merge\&.h\&.
.PP
References std::make_pair(), multiway_merge_exact_splitting(), n' parallel_multiway_merge()\&.
.SS "template<typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_nth_element (_RAIter__begin, _RAIter__nth, _RAIter__end, _Compare__comp)"

.PP
Parallel implementation of std::nth_element()\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__nth\fP _Iterator of element dat must be up in posizzle afterwards\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP

.PP
Definizzle at line 332 of file partition\&.h\&.
.PP
References __parallel_partition(), _GLIBCXX_CALL, __gnu_parallel::_Settings::get(), std::max(), __gnu_parallel::_Settings::nth_element_minimal_n, n' __gnu_parallel::_Settings::partition_minimal_n\&.
.PP
Referenced by __parallel_partial_sort()\&.
.SS "template<typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_partial_sort (_RAIter__begin, _RAIter__middle, _RAIter__end, _Compare__comp)"

.PP
Parallel implementation of std::partial_sort()\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__middle\fP Sort until dis position\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP

.PP
Definizzle at line 422 of file partition\&.h\&.
.PP
References __parallel_nth_element()\&.
.SS "template<typename _IIta , typename _OutputIterator , typename _BinaryOperation > _OutputIterator __gnu_parallel::__parallel_partial_sum (_IIter__begin, _IIter__end, _OutputIterator__result, _BinaryOperation__bin_op)"

.PP
Parallel partial sum front-__end\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__result\fP Begin iterator of output sequence\&. 
.br
\fI__bin_op\fP Associatizzle binary function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 205 of file partial_sum\&.h\&.
.PP
References __parallel_partial_sum_linear(), _GLIBCXX_CALL, n' __gnu_parallel::_Settings::get()\&.
.SS "template<typename _IIta , typename _OutputIterator , typename _BinaryOperation > _OutputIterator __gnu_parallel::__parallel_partial_sum_basecase (_IIter__begin, _IIter__end, _OutputIterator__result, _BinaryOperation__bin_op, typename std::iterator_traits< _IIta >::value_type__value)"

.PP
Base case prefix sum routine\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__result\fP Begin iterator of output sequence\&. 
.br
\fI__bin_op\fP Associatizzle binary function\&. 
.br
\fI__value\fP Start value\&. Must be passed since tha neutral element is unknown up in general\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 58 of file partial_sum\&.h\&.
.PP
Referenced by __parallel_partial_sum_linear()\&.
.SS "template<typename _IIta , typename _OutputIterator , typename _BinaryOperation > _OutputIterator __gnu_parallel::__parallel_partial_sum_linear (_IIter__begin, _IIter__end, _OutputIterator__result, _BinaryOperation__bin_op, typename std::iterator_traits< _IIta >::difference_type__n)"

.PP
Parallel partial sum implementation, two-phase approach, no recursion\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__result\fP Begin iterator of output sequence\&. 
.br
\fI__bin_op\fP Associatizzle binary function\&. 
.br
\fI__n\fP Length of sequence\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 89 of file partial_sum\&.h\&.
.PP
References __equally_split(), __parallel_partial_sum_basecase(), std::accumulate(), __gnu_parallel::_Settings::get(), n' __gnu_parallel::_Settings::partial_sum_dilation\&.
.PP
Referenced by __parallel_partial_sum()\&.
.SS "template<typename _RAIta , typename _Predicate > std::iterator_traits<_RAIter>::difference_type __gnu_parallel::__parallel_partizzle (_RAIter__begin, _RAIter__end, _Predicate__pred, _ThreadIndex__num_threads)"

.PP
Parallel implementation of std::partition\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence ta split\&. 
.br
\fI__end\fP End iterator of input sequence ta split\&. 
.br
\fI__pred\fP Partizzle predicate, possibly includin some kind of pivot\&. 
.br
\fI__num_threads\fP Maximum number of threadz ta use fo' dis task\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of elements not fulfillin tha predicate\&. 
.RE
.PP

.PP
Definizzle at line 56 of file partition\&.h\&.
.PP
References __compare_and_swap(), __fetch_and_add(), _GLIBCXX_CALL, _GLIBCXX_VOLATILE, __gnu_parallel::_Settings::get(), __gnu_parallel::_Settings::partition_chunk_share, n' __gnu_parallel::_Settings::partition_chunk_size\&.
.PP
Referenced by __parallel_nth_element(), __parallel_sort_qs_divide(), n' __qsb_divide()\&.
.SS "template<typename _RAIta , typename _RandomNumberGenerator > void __gnu_parallel::__parallel_random_shuffle (_RAIter__begin, _RAIter__end, _RandomNumberGenerator__rng = \fC_RandomNumber()\fP)\fC [inline]\fP"

.PP
Parallel random hood call\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of sequence\&. 
.br
\fI__end\fP End iterator of sequence\&. 
.br
\fI__rng\fP Random number generator ta use\&. 
.RE
.PP

.PP
Definizzle at line 522 of file random_shuffle\&.h\&.
.PP
References __parallel_random_shuffle_drs()\&.
.SS "template<typename _RAIta , typename _RandomNumberGenerator > void __gnu_parallel::__parallel_random_shuffle_drs (_RAIter__begin, _RAIter__end, typename std::iterator_traits< _RAIta >::difference_type__n, _ThreadIndex__num_threads, _RandomNumberGenerator &__rng)"

.PP
Main parallel random shuffle step\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of sequence\&. 
.br
\fI__end\fP End iterator of sequence\&. 
.br
\fI__n\fP Length of sequence\&. 
.br
\fI__num_threads\fP Number of threadz ta use\&. 
.br
\fI__rng\fP Random number generator ta use\&. 
.RE
.PP

.PP
Definizzle at line 265 of file random_shuffle\&.h\&.
.PP
References __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::__bins_end, __parallel_random_shuffle_drs_pu(), __rd_log2(), __round_up_to_pow2(), __sequential_random_shuffle(), _GLIBCXX_CALL, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_bin_proc, __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::_M_bins_begin, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_dist, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_num_bins, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_num_bits, __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::_M_num_threads, __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::_M_sd, __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::_M_seed, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_starts, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_temporaries, __gnu_parallel::_Settings::get(), __gnu_parallel::_Settings::L2_cache_size, std::min(), n' __gnu_parallel::_Settings::TLB_size\&.
.PP
Referenced by __parallel_random_shuffle()\&.
.SS "template<typename _RAIta , typename _RandomNumberGenerator > void __gnu_parallel::__parallel_random_shuffle_drs_pu (_DRSSorterPU< _RAIter, _RandomNumberGenerator > *__pus)"

.PP
Random shuffle code executed by each thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pus\fP Array of thread-local data records\&. 
.RE
.PP

.PP
Definizzle at line 122 of file random_shuffle\&.h\&.
.PP
References __random_number_pow2(), __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_dist, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_num_bins, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_num_bits, __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::_M_num_threads, __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::_M_sd, __gnu_parallel::_DRSSorterPU< _RAIter, _RandomNumberGenerator >::_M_seed, __gnu_parallel::_DRandomShufflingGlobalData< _RAIta >::_M_starts, n' std::partial_sum()\&.
.PP
Referenced by __parallel_random_shuffle_drs()\&.
.SS "template<bool __stable, typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort (_RAIter__begin, _RAIter__end, _Compare__comp, multiway_mergesort_tag__parallelism)\fC [inline]\fP"

.PP
Choose multiway mergesort, splittin variant at run-time, fo' parallel sorting\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI__stable\fP Sort stable\&. 
.RE
.PP

.PP
Definizzle at line 75 of file sort\&.h\&.
.PP
References __gnu_parallel::parallel_tag::__get_num_threads(), _GLIBCXX_CALL, n' __gnu_parallel::_Settings::get()\&.
.SS "template<bool __stable, typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort (_RAIter__begin, _RAIter__end, _Compare__comp, multiway_mergesort_exact_tag__parallelism)\fC [inline]\fP"

.PP
Choose multiway mergesort wit exact splitting, fo' parallel sorting\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI__stable\fP Sort stable\&. 
.RE
.PP

.PP
Definizzle at line 99 of file sort\&.h\&.
.PP
References __gnu_parallel::parallel_tag::__get_num_threads(), n' _GLIBCXX_CALL\&.
.SS "template<bool __stable, typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort (_RAIter__begin, _RAIter__end, _Compare__comp, multiway_mergesort_sampling_tag__parallelism)\fC [inline]\fP"

.PP
Choose multiway mergesort wit splittin by sampling, fo' parallel sorting\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI__stable\fP Sort stable\&. 
.RE
.PP

.PP
Definizzle at line 120 of file sort\&.h\&.
.PP
References __gnu_parallel::parallel_tag::__get_num_threads(), n' _GLIBCXX_CALL\&.
.SS "template<bool __stable, typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort (_RAIter__begin, _RAIter__end, _Compare__comp, quicksort_tag__parallelism)\fC [inline]\fP"

.PP
Choose quicksort fo' parallel sorting\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI__stable\fP Sort stable\&. 
.RE
.PP

.PP
Definizzle at line 140 of file sort\&.h\&.
.PP
References __gnu_parallel::parallel_tag::__get_num_threads(), __parallel_sort_qs(), n' _GLIBCXX_CALL\&.
.SS "template<bool __stable, typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort (_RAIter__begin, _RAIter__end, _Compare__comp, balanced_quicksort_tag__parallelism)\fC [inline]\fP"

.PP
Choose balanced quicksort fo' parallel sorting\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI__stable\fP Sort stable\&. 
.RE
.PP

.PP
Definizzle at line 161 of file sort\&.h\&.
.PP
References __gnu_parallel::parallel_tag::__get_num_threads(), __parallel_sort_qsb(), n' _GLIBCXX_CALL\&.
.SS "template<bool __stable, typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort (_RAIter__begin, _RAIter__end, _Compare__comp, default_parallel_tag__parallelism)\fC [inline]\fP"

.PP
Choose multiway mergesort wit exact splitting, fo' parallel sorting\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI__stable\fP Sort stable\&. 
.RE
.PP

.PP
Definizzle at line 183 of file sort\&.h\&.
.PP
References __gnu_parallel::parallel_tag::__get_num_threads(), n' _GLIBCXX_CALL\&.
.SS "template<bool __stable, typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort (_RAIter__begin, _RAIter__end, _Compare__comp, parallel_tag__parallelism)\fC [inline]\fP"

.PP
Choose a parallel sortin algorithm\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI__stable\fP Sort stable\&. 
.RE
.PP

.PP
Definizzle at line 203 of file sort\&.h\&.
.PP
References __gnu_parallel::parallel_tag::__get_num_threads(), __parallel_sort_qs(), __parallel_sort_qsb(), _GLIBCXX_CALL, n' __gnu_parallel::_Settings::get()\&.
.SS "template<typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort_qs (_RAIter__begin, _RAIter__end, _Compare__comp, _ThreadIndex__num_threads)"

.PP
Unbalanced quicksort main call\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator input sequence, ignored\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__num_threads\fP Number of threadz dat is allowed ta work on dis part\&. 
.RE
.PP

.PP
Definizzle at line 154 of file quicksort\&.h\&.
.PP
References __parallel_sort_qs_conquer(), n' _GLIBCXX_CALL\&.
.PP
Referenced by __parallel_sort()\&.
.SS "template<typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort_qs_conquer (_RAIter__begin, _RAIter__end, _Compare__comp, _ThreadIndex__num_threads)"

.PP
Unbalanced quicksort conquer step\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of subsequence\&. 
.br
\fI__end\fP End iterator of subsequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__num_threads\fP Number of threadz dat is allowed ta work on dis part\&. 
.RE
.PP

.PP
Definizzle at line 101 of file quicksort\&.h\&.
.PP
References __parallel_sort_qs_divide(), n' __gnu_parallel::_Settings::get()\&.
.PP
Referenced by __parallel_sort_qs()\&.
.SS "template<typename _RAIta , typename _Compare > std::iterator_traits<_RAIter>::difference_type __gnu_parallel::__parallel_sort_qs_divide (_RAIter__begin, _RAIter__end, _Compare__comp, typename std::iterator_traits< _RAIta >::difference_type__pivot_rank, typename std::iterator_traits< _RAIta >::difference_type__num_samples, _ThreadIndex__num_threads)"

.PP
Unbalanced quicksort divide step\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of subsequence\&. 
.br
\fI__end\fP End iterator of subsequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__pivot_rank\fP Desired __rank of tha pivot\&. 
.br
\fI__num_samples\fP Chizzle pivot from dat nuff samples\&. 
.br
\fI__num_threads\fP Number of threadz dat is allowed ta work on dis part\&. 
.RE
.PP

.PP
Definizzle at line 51 of file quicksort\&.h\&.
.PP
References __parallel_partition(), n' std::min()\&.
.PP
Referenced by __parallel_sort_qs_conquer()\&.
.SS "template<typename _RAIta , typename _Compare > void __gnu_parallel::__parallel_sort_qsb (_RAIter__begin, _RAIter__end, _Compare__comp, _ThreadIndex__num_threads)"

.PP
Top-level quicksort routine\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of sequence\&. 
.br
\fI__end\fP End iterator of sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__num_threads\fP Number of threadz dat is allowed ta work on dis part\&. 
.RE
.PP

.PP
Definizzle at line 430 of file balanced_quicksort\&.h\&.
.PP
References __qsb_conquer(), __rd_log2(), _GLIBCXX_CALL, __gnu_parallel::_QSBThreadLocal< _RAIta >::_M_elements_leftover, n' std::make_pair()\&.
.PP
Referenced by __parallel_sort()\&.
.SS "template<typename _IIta , class _OutputIterator , class _BinaryPredicate > _OutputIterator __gnu_parallel::__parallel_unique_copy (_IIter__first, _IIter__last, _OutputIterator__result, _BinaryPredicate__binary_pred)"

.PP
Parallel std::unique_copy(), w/__o explicit equalitizzle predicate\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Begin iterator of input sequence\&. 
.br
\fI__last\fP End iterator of input sequence\&. 
.br
\fI__result\fP Begin iterator of result __sequence\&. 
.br
\fI__binary_pred\fP Equalitizzle predicate\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of result __sequence\&. 
.RE
.PP

.PP
Definizzle at line 50 of file unique_copy\&.h\&.
.PP
References __equally_split(), n' _GLIBCXX_CALL\&.
.PP
Referenced by __parallel_unique_copy()\&.
.SS "template<typename _IIta , class _OutputIterator > _OutputIterator __gnu_parallel::__parallel_unique_copy (_IIter__first, _IIter__last, _OutputIterator__result)\fC [inline]\fP"

.PP
Parallel std::unique_copy(), without explicit equalitizzle predicate\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Begin iterator of input sequence\&. 
.br
\fI__last\fP End iterator of input sequence\&. 
.br
\fI__result\fP Begin iterator of result __sequence\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of result __sequence\&. 
.RE
.PP

.PP
Definizzle at line 186 of file unique_copy\&.h\&.
.PP
References __parallel_unique_copy()\&.
.SS "template<typename _RAIta , typename _Compare > void __gnu_parallel::__qsb_conquer (_QSBThreadLocal< _RAIta > **__tls, _RAIter__begin, _RAIter__end, _Compare__comp, _ThreadIndex__iam, _ThreadIndex__num_threads, bool__parent_wait)"

.PP
Quicksort conquer step\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__tls\fP Array of thread-local storages\&. 
.br
\fI__begin\fP Begin iterator of subsequence\&. 
.br
\fI__end\fP End iterator of subsequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__iam\fP Number of tha thread processin dis function\&. 
.br
\fI__num_threads\fP Number of threadz dat is allowed ta work on dis part\&. 
.RE
.PP

.PP
Definizzle at line 171 of file balanced_quicksort\&.h\&.
.PP
References __qsb_divide(), __qsb_local_sort_with_helping(), __gnu_parallel::_QSBThreadLocal< _RAIta >::_M_elements_leftover, n' __gnu_parallel::_QSBThreadLocal< _RAIta >::_M_initial\&.
.PP
Referenced by __parallel_sort_qsb()\&.
.SS "template<typename _RAIta , typename _Compare > std::iterator_traits<_RAIter>::difference_type __gnu_parallel::__qsb_divide (_RAIter__begin, _RAIter__end, _Compare__comp, _ThreadIndex__num_threads)"

.PP
Balanced quicksort divide step\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of subsequence\&. 
.br
\fI__end\fP End iterator of subsequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__num_threads\fP Number of threadz dat is allowed ta work on dis part\&. 
.RE
.PP
\fBPrecondition:\fP
.RS 4
\fC\fP(__end-__begin)>=1 
.RE
.PP

.PP
Definizzle at line 100 of file balanced_quicksort\&.h\&.
.PP
References __median_of_three_iterators(), n' __parallel_partition()\&.
.PP
Referenced by __qsb_conquer()\&.
.SS "template<typename _RAIta , typename _Compare > void __gnu_parallel::__qsb_local_sort_with_helpin (_QSBThreadLocal< _RAIta > **__tls, _Compare &__comp, _ThreadIndex__iam, bool__wait)"

.PP
Quicksort step bustin load-balanced local sort\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__tls\fP Array of thread-local storages\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__iam\fP Number of tha thread processin dis function\&. 
.RE
.PP

.PP
Definizzle at line 247 of file balanced_quicksort\&.h\&.
.PP
References __yield(), _GLIBCXX_ASSERTIONS, __gnu_parallel::_QSBThreadLocal< _RAIta >::_M_elements_leftover, __gnu_parallel::_QSBThreadLocal< _RAIta >::_M_initial, __gnu_parallel::_QSBThreadLocal< _RAIta >::_M_leftover_parts, __gnu_parallel::_QSBThreadLocal< _RAIta >::_M_num_threads, __gnu_parallel::_Settings::get(), std::make_pair(), n' __gnu_parallel::_Settings::sort_qsb_base_case_maximal_n\&.
.PP
Referenced by __qsb_conquer()\&.
.SS "template<typename _RandomNumberGenerator > int __gnu_parallel::__random_number_pow2 (int__logp, _RandomNumberGenerator &__rng)\fC [inline]\fP"

.PP
Generate a random number up in \fC\fP[0,2^__logp)\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__logp\fP Logarithm (basis 2) of tha upper range __bound\&. 
.br
\fI__rng\fP Random number generator ta use\&. 
.RE
.PP

.PP
Definizzle at line 115 of file random_shuffle\&.h\&.
.PP
Referenced by __parallel_random_shuffle_drs_pu(), n' __sequential_random_shuffle()\&.
.SS "template<typename _Size > _Size __gnu_parallel::__rd_log2 (_Size__n)\fC [inline]\fP"

.PP
Calculates tha rounded-down logarithm of \fC__n\fP fo' base 2\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Argument\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 0 fo' any argument <1\&. 
.RE
.PP

.PP
Definizzle at line 102 of file parallel/base\&.h\&.
.PP
Referenced by __parallel_random_shuffle_drs(), __parallel_sort_qsb(), __round_up_to_pow2(), __sequential_random_shuffle(), __gnu_parallel::_LoserTreeBase< _Tp, _Compare >::_LoserTreeBase(), multiseq_partition(), n' multiseq_selection()\&.
.SS "template<typename _Tp > _Tp __gnu_parallel::__round_up_to_pow2 (_Tp__x)"

.PP
Round up ta tha next pimped outa juice of 2\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP _Integer ta round up 
.RE
.PP

.PP
Definizzle at line 248 of file random_shuffle\&.h\&.
.PP
References __rd_log2()\&.
.PP
Referenced by __parallel_random_shuffle_drs(), __sequential_random_shuffle(), n' multiseq_selection()\&.
.SS "template<typename __RAIter1 , typename __RAIter2 , typename _Pred > __RAIter1 __gnu_parallel::__search_template (__RAIter1__begin1, __RAIter1__end1, __RAIter2__begin2, __RAIter2__end2, _Pred__pred)"

.PP
Parallel std::search\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin1\fP Begin iterator of first sequence\&. 
.br
\fI__end1\fP End iterator of first sequence\&. 
.br
\fI__begin2\fP Begin iterator of second sequence\&. 
.br
\fI__end2\fP End iterator of second sequence\&. 
.br
\fI__pred\fP Find predicate\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Place of findin up in first sequences\&. 
.RE
.PP

.PP
Definizzle at line 81 of file search\&.h\&.
.PP
References __calc_borders(), __equally_split(), _GLIBCXX_CALL, n' std::min()\&.
.SS "template<bool __stable, bool __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 __gnu_parallel::__sequential_multiway_merge (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _RAIter3__target, const typename std::iterator_traits< typename std::iterator_traits< _RAIterIterator >::value_type::first_type >::value_type &__sentinel, _DifferenceTp__length, _Compare__comp)"

.PP
Sequential multi-way mergin switch\&. Da _GLIBCXX_PARALLEL_DECISION is based on tha branchin factor n' runtime settings\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP Begin iterator of iterator pair input sequence\&. 
.br
\fI__seqs_end\fP End iterator of iterator pair input sequence\&. 
.br
\fI__target\fP Begin iterator of output sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__length\fP Maximum length ta merge, possibly larger than tha number of elements available\&. 
.br
\fI__sentinel\fP Da sequences have __a __sentinel element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 920 of file multiway_merge\&.h\&.
.PP
References __is_sorted(), __merge_advance(), _GLIBCXX_CALL, n' _GLIBCXX_PARALLEL_LENGTH\&.
.PP
Referenced by multiway_merge(), n' multiway_merge_sentinels()\&.
.SS "template<typename _RAIta , typename _RandomNumberGenerator > void __gnu_parallel::__sequential_random_shuffle (_RAIter__begin, _RAIter__end, _RandomNumberGenerator &__rng)"

.PP
Sequential cache-efficient random shuffle\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of sequence\&. 
.br
\fI__end\fP End iterator of sequence\&. 
.br
\fI__rng\fP Random number generator ta use\&. 
.RE
.PP

.PP
Definizzle at line 410 of file random_shuffle\&.h\&.
.PP
References __random_number_pow2(), __rd_log2(), __round_up_to_pow2(), __gnu_parallel::_Settings::get(), __gnu_parallel::_Settings::L2_cache_size, std::min(), std::partial_sum(), n' __gnu_parallel::_Settings::TLB_size\&.
.PP
Referenced by __parallel_random_shuffle_drs()\&.
.SS "template<typename _IIta > void __gnu_parallel::__shrink (\fBstd::vector\fP< _IIta > &__os_starts, size_t &__count_to_two, size_t &__range_length)"

.PP
Combines two ranges tha fuck into one n' thus halves tha number of ranges\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__os_starts\fP Start positions hit dat shiznit on (oversampled)\&. 
.br
\fI__count_to_two\fP Counts up ta 2\&. 
.br
\fI__range_length\fP Current length of a cold-ass lil chunk\&. 
.RE
.PP

.PP
Definizzle at line 70 of file list_partition\&.h\&.
.PP
References std::vector< _Tp, _Alloc >::size()\&.
.PP
Referenced by __shrink_and_double()\&.
.SS "template<typename _IIta > void __gnu_parallel::__shrink_and_double (\fBstd::vector\fP< _IIta > &__os_starts, size_t &__count_to_two, size_t &__range_length, const bool__make_twice)"

.PP
Shrinks n' doublez tha ranges\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__os_starts\fP Start positions hit dat shiznit on (oversampled)\&. 
.br
\fI__count_to_two\fP Counts up ta 2\&. 
.br
\fI__range_length\fP Current length of a cold-ass lil chunk\&. 
.br
\fI__make_twice\fP Whether tha \fC__os_starts\fP be allowed ta be grown or not 
.RE
.PP

.PP
Definizzle at line 50 of file list_partition\&.h\&.
.PP
References __shrink(), std::vector< _Tp, _Alloc >::resize(), n' std::vector< _Tp, _Alloc >::size()\&.
.PP
Referenced by list_partition()\&.
.SS "void __gnu_parallel::__yield ()\fC [inline]\fP"

.PP
Yield control ta another thread, without waitin fo' tha end of tha time slice\&. 
.PP
Definizzle at line 121 of file parallel/compatibility\&.h\&.
.PP
Referenced by __for_each_template_random_access_workstealing(), n' __qsb_local_sort_with_helping()\&.
.SS "template<typename _IIta , typename _FunctorType > size_t __gnu_parallel::list_partizzle (const _IIter__begin, const _IIter__end, _IIta *__starts, size_t *__lengths, const int__num_parts, _FunctorType &__f, int__oversamplin = \fC0\fP)"

.PP
Splits a sequence given by input iterators tha fuck into partz of almost equal size\&. Da function needz only one pass over tha sequence\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of input sequence\&. 
.br
\fI__end\fP End iterator of input sequence\&. 
.br
\fI__starts\fP Start iterators fo' tha resultin parts, dimension \fC__num_parts+1\fP\&. For convenience, \fC__starts\fP \fC\fP[__num_parts] gotz nuff tha end iterator of tha sequence\&. 
.br
\fI__lengths\fP Length of tha resultin parts\&. 
.br
\fI__num_parts\fP Number of parts ta split tha sequence into\&. 
.br
\fI__f\fP Functor ta be applied ta each element by traversin __it 
.br
\fI__oversampling\fP Oversamplin factor\&. If 0, then tha partitions will differ up in at most {{__end} - {__begin}} __elements\&. Otherwise, tha ratio between tha longest n' tha shortest part is bounded by 1/({__oversampling}  {num}) 
.RE
.PP
\fBReturns:\fP
.RS 4
Length of tha whole sequence\&. 
.RE
.PP

.PP
Definizzle at line 101 of file list_partition\&.h\&.
.PP
References __shrink_and_double(), n' std::vector< _Tp, _Alloc >::size()\&.
.SS "template<typename _Tp > const _Tp& __gnu_parallel::max (const _Tp &__a, const _Tp &__b)\fC [inline]\fP"

.PP
Equivalent ta std::max\&. 
.PP
Definizzle at line 150 of file parallel/base\&.h\&.
.SS "template<typename _Tp > const _Tp& __gnu_parallel::min (const _Tp &__a, const _Tp &__b)\fC [inline]\fP"

.PP
Equivalent ta std::min\&. 
.PP
Definizzle at line 144 of file parallel/base\&.h\&.
.PP
Referenced by __for_each_template_random_access_workstealing()\&.
.SS "template<typename _RanSeqs , typename _RankType , typename _RankIterator , typename _Compare > void __gnu_parallel::multiseq_partizzle (_RanSeqs__begin_seqs, _RanSeqs__end_seqs, _RankType__rank, _RankIterator__begin_offsets, _Compare__comp = \fC\fBstd::less\fP< typename std::iterator_traits<typename std::iterator_traits<_RanSeqs>::value_type:: first_type>::value_type>()\fP)"

.PP
Splits nuff muthafuckin sorted sequences at a cold-ass lil certain global __rank, resultin up in a splittin point fo' each sequence\&. Da sequences is passed via a sequence of random-access iterator pairs, none of tha sequences may be empty\&. If there be nuff muthafuckin equal elements across tha split, tha ones on tha __left side is ghon be chosen from sequences wit smalla number\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin_seqs\fP Begin of tha sequence of iterator pairs\&. 
.br
\fI__end_seqs\fP End of tha sequence of iterator pairs\&. 
.br
\fI__rank\fP Da global rank ta partizzle at\&. 
.br
\fI__begin_offsets\fP A random-access __sequence __begin where tha __result is ghon be stored in\&. Each element of tha sequence be a iterator dat points ta tha straight-up original gangsta element on tha pimped outa part of tha respectizzle __sequence\&. 
.br
\fI__comp\fP Da orderin functor, defaults ta std::less<_Tp>\&. 
.RE
.PP

.PP
Definizzle at line 122 of file multiseq_selection\&.h\&.
.PP
References __rd_log2(), _GLIBCXX_CALL, std::vector< _Tp, _Alloc >::begin(), std::distance(), std::priority_queue< _Tp, _Sequence, _Compare >::empty(), std::vector< _Tp, _Alloc >::end(), std::make_pair(), std::max(), std::min(), std::priority_queue< _Tp, _Sequence, _Compare >::pop(), std::priority_queue< _Tp, _Sequence, _Compare >::push(), std::vector< _Tp, _Alloc >::push_back(), n' std::priority_queue< _Tp, _Sequence, _Compare >::top()\&.
.PP
Referenced by multiway_merge_exact_splitting()\&.
.SS "template<typename _Tp , typename _RanSeqs , typename _RankType , typename _Compare > _Tp __gnu_parallel::multiseq_selection (_RanSeqs__begin_seqs, _RanSeqs__end_seqs, _RankType__rank, _RankType &__offset, _Compare__comp = \fC\fBstd::less\fP<_Tp>()\fP)"

.PP
Selects tha element at a cold-ass lil certain global __rank from nuff muthafuckin sorted sequences\&. Da sequences is passed via a sequence of random-access iterator pairs, none of tha sequences may be empty\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin_seqs\fP Begin of tha sequence of iterator pairs\&. 
.br
\fI__end_seqs\fP End of tha sequence of iterator pairs\&. 
.br
\fI__rank\fP Da global rank ta partizzle at\&. 
.br
\fI__offset\fP Da rank of tha selected element up in tha global subsequence of elements equal ta tha selected element\&. If tha selected element is unique, dis number is 0\&. 
.br
\fI__comp\fP Da orderin functor, defaults ta std::less\&. 
.RE
.PP

.PP
Definizzle at line 388 of file multiseq_selection\&.h\&.
.PP
References __rd_log2(), __round_up_to_pow2(), _GLIBCXX_CALL, std::vector< _Tp, _Alloc >::begin(), std::distance(), std::priority_queue< _Tp, _Sequence, _Compare >::empty(), std::vector< _Tp, _Alloc >::end(), std::make_pair(), std::max(), std::min(), std::priority_queue< _Tp, _Sequence, _Compare >::pop(), std::priority_queue< _Tp, _Sequence, _Compare >::push(), std::vector< _Tp, _Alloc >::push_back(), n' std::priority_queue< _Tp, _Sequence, _Compare >::top()\&.
.SS "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut __gnu_parallel::multiway_merge (_RAIterPairIterator__seqs_begin, _RAIterPairIterator__seqs_end, _RAIterOut__target, _DifferenceTp__length, _Compare__comp, \fB__gnu_parallel::sequential_tag\fP)"

.PP
Multiway Merge Frontend\&. Merge tha sequences specified by seqs_begin n' __seqs_end tha fuck into __target\&. __seqs_begin n' __seqs_end must point ta a sequence of pairs\&. These pairs must contain a iterator ta tha beginnin of a sequence up in they first entry n' a iterator tha _M_end of tha same sequence up in they second entry\&.
.PP
Ties is fucked up arbitrarily\&. Right back up in yo muthafuckin ass. See stable_multiway_merge fo' a variant dat breaks tizzles by sequence number but is slower\&.
.PP
Da first entriez of tha pairs (i\&.e\&. tha begin iterators) is ghon be moved forward\&.
.PP
Da output sequence has ta provide enough space fo' all elements dat is freestyled ta it\&.
.PP
This function will merge tha input sequences:
.PP
.IP "\(bu" 2
not stable
.IP "\(bu" 2
parallel, dependin on tha input size n' Settings
.IP "\(bu" 2
usin samplin fo' splitting
.IP "\(bu" 2
not rockin sentinels
.PP
.PP
Example:
.PP
.PP
.nf

  int sequences[10][10];
  fo' (int __i = 0; __i < 10; ++__i)
    fo' (int __j = 0; __i < 10; ++__j)
      sequences[__i][__j] = __j;
.fi
.PP
.PP
.PP
.nf
  int __out[33];
  std::vector<std::pair<int*> > seqs;
  fo' (int __i = 0; __i < 10; ++__i)
    { seqs\&.push(std::make_pair<int*>(sequences[__i],
                                     sequences[__i] + 10)) }
.fi
.PP
.PP
.PP
.nf
  multiway_merge(seqs\&.begin(), seqs\&.end(), __target, std::less<int>(), 33);
.fi
.PP
.PP
\fBSee Also:\fP
.RS 4
stable_multiway_merge
.RE
.PP
\fBPrecondition:\fP
.RS 4
All input sequences must be sorted\&. 
.PP
Target must provide enough space ta merge up length elements or tha number of elements up in all sequences, whichever is smaller\&.
.RE
.PP
\fBPostcondition:\fP
.RS 4
[__target, return __value) gotz nuff merged __elements from tha input sequences\&. 
.PP
return __value - __target = min(__length, number of elements up in all sequences)\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_RAIterPairIterator\fP iterator over sequence of pairz of iterators 
.br
\fI_RAIterOut\fP iterator over target sequence 
.br
\fI_DifferenceTp\fP difference type fo' tha sequence 
.br
\fI_Compare\fP strict weak orderin type ta compare elements up in sequences
.RE
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP __begin of sequence __sequence 
.br
\fI__seqs_end\fP _M_end of sequence __sequence 
.br
\fI__target\fP target sequence ta merge to\&. 
.br
\fI__comp\fP strict weak orderin ta use fo' element comparison\&. 
.br
\fI__length\fP Maximum length ta merge, possibly larger than tha number of elements available\&.
.RE
.PP
\fBReturns:\fP
.RS 4
_M_end iterator of output sequence 
.RE
.PP

.PP
Definizzle at line 1418 of file multiway_merge\&.h\&.
.PP
References __sequential_multiway_merge(), n' _GLIBCXX_CALL\&.
.SS "template<template< typename RAI, typename C > class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 __gnu_parallel::multiway_merge_3_variant (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _RAIter3__target, _DifferenceTp__length, _Compare__comp)"

.PP
Highly efficient 3-way mergin procedure\&. Mergin is done wit tha algorithm implementation busted lyrics bout by Peta Sanders\&. Basically, tha scam is ta minimize tha number of necessary comparison afta mergin a element\&. Da implementation trick dat make dis fast is dat tha order of tha sequences is stored up in tha instruction pointa (translated tha fuck into labels up in C++)\&.
.PP
This works well fo' mergin up ta 4 sequences\&.
.PP
Note dat makin tha mergin stable do \fInot\fP come at a performizzle hit\&.
.PP
Whether tha mergin is done guarded or unguarded is selected by tha used iterator class\&.
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP Begin iterator of iterator pair input sequence\&. 
.br
\fI__seqs_end\fP End iterator of iterator pair input sequence\&. 
.br
\fI__target\fP Begin iterator of output sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__length\fP Maximum length ta merge, less equal than tha total number of elements available\&.
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 241 of file multiway_merge\&.h\&.
.PP
References _GLIBCXX_CALL\&.
.SS "template<template< typename RAI, typename C > class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 __gnu_parallel::multiway_merge_4_variant (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _RAIter3__target, _DifferenceTp__length, _Compare__comp)"

.PP
Highly efficient 4-way mergin procedure\&. Mergin is done wit tha algorithm implementation busted lyrics bout by Peta Sanders\&. Basically, tha scam is ta minimize tha number of necessary comparison afta mergin a element\&. Da implementation trick dat make dis fast is dat tha order of tha sequences is stored up in tha instruction pointa (translated tha fuck into goto labels up in C++)\&.
.PP
This works well fo' mergin up ta 4 sequences\&.
.PP
Note dat makin tha mergin stable do \fInot\fP come at a performizzle hit\&.
.PP
Whether tha mergin is done guarded or unguarded is selected by tha used iterator class\&.
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP Begin iterator of iterator pair input sequence\&. 
.br
\fI__seqs_end\fP End iterator of iterator pair input sequence\&. 
.br
\fI__target\fP Begin iterator of output sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__length\fP Maximum length ta merge, less equal than tha total number of elements available\&.
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 360 of file multiway_merge\&.h\&.
.PP
References _GLIBCXX_CALL\&.
.SS "template<bool __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType > void __gnu_parallel::multiway_merge_exact_splittin (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _DifferenceType__length, _DifferenceType__total_length, _Compare__comp, \fBstd::vector\fP< \fBstd::pair\fP< _DifferenceType, _DifferenceType > > *__pieces)"

.PP
Exact splittin fo' parallel multiway-merge routine\&. None of tha passed sequences may be empty\&. 
.PP
Definizzle at line 1120 of file multiway_merge\&.h\&.
.PP
References __equally_split(), _GLIBCXX_PARALLEL_LENGTH, std::vector< _Tp, _Alloc >::begin(), std::vector< _Tp, _Alloc >::end(), multiseq_partition(), n' std::vector< _Tp, _Alloc >::resize()\&.
.PP
Referenced by __parallel_merge_advance()\&.
.SS "template<typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 __gnu_parallel::multiway_merge_loser_tree (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _RAIter3__target, _DifferenceTp__length, _Compare__comp)"

.PP
Multi-way mergin procedure fo' a high branchin factor, guarded case\&. This mergin variant uses a LoserTree class as selected by \fC_LT\fP\&.
.PP
Stabilitizzle is selected all up in tha used LoserTree class \fC_LT\fP\&.
.PP
At least one non-empty sequence is required\&.
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP Begin iterator of iterator pair input sequence\&. 
.br
\fI__seqs_end\fP End iterator of iterator pair input sequence\&. 
.br
\fI__target\fP Begin iterator of output sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__length\fP Maximum length ta merge, less equal than tha total number of elements available\&.
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 491 of file multiway_merge\&.h\&.
.PP
References _GLIBCXX_CALL, n' _GLIBCXX_PARALLEL_LENGTH\&.
.SS "template<typename UnguardedLoserTree , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 __gnu_parallel::multiway_merge_loser_tree_sentinel (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _RAIter3__target, const typename std::iterator_traits< typename std::iterator_traits< _RAIterIterator >::value_type::first_type >::value_type &__sentinel, _DifferenceTp__length, _Compare__comp)"

.PP
Multi-way mergin procedure fo' a high branchin factor, requirin sentinels ta exist\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIUnguardedLoserTree\fP _Loser Tree variant ta use fo' tha unguarded merging\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP Begin iterator of iterator pair input sequence\&. 
.br
\fI__seqs_end\fP End iterator of iterator pair input sequence\&. 
.br
\fI__target\fP Begin iterator of output sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__length\fP Maximum length ta merge, less equal than tha total number of elements available\&.
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 662 of file multiway_merge\&.h\&.
.PP
References __is_sorted(), n' _GLIBCXX_CALL\&.
.SS "template<typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare > _RAIter3 __gnu_parallel::multiway_merge_loser_tree_unguarded (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _RAIter3__target, const typename std::iterator_traits< typename std::iterator_traits< _RAIterIterator >::value_type::first_type >::value_type &__sentinel, _DifferenceTp__length, _Compare__comp)"

.PP
Multi-way mergin procedure fo' a high branchin factor, unguarded case\&. Mergin is done rockin tha LoserTree class \fC_LT\fP\&.
.PP
Stabilitizzle is selected by tha used LoserTrees\&.
.PP
\fBPrecondition:\fP
.RS 4
No input will run outta elements durin tha merge\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP Begin iterator of iterator pair input sequence\&. 
.br
\fI__seqs_end\fP End iterator of iterator pair input sequence\&. 
.br
\fI__target\fP Begin iterator of output sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__length\fP Maximum length ta merge, less equal than tha total number of elements available\&.
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 574 of file multiway_merge\&.h\&.
.PP
References _GLIBCXX_CALL\&.
.SS "template<bool __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType > void __gnu_parallel::multiway_merge_sampling_splittin (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _DifferenceType__length, _DifferenceType__total_length, _Compare__comp, \fBstd::vector\fP< \fBstd::pair\fP< _DifferenceType, _DifferenceType > > *__pieces)"

.PP
Samplin based splittin fo' parallel multiway-merge routine\&. 
.PP
Definizzle at line 1035 of file multiway_merge\&.h\&.
.PP
References _GLIBCXX_PARALLEL_LENGTH, __gnu_parallel::_Settings::get(), n' __gnu_parallel::_Settings::merge_oversampling\&.
.SS "template<typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare > _RAIterOut __gnu_parallel::multiway_merge_sentinels (_RAIterPairIterator__seqs_begin, _RAIterPairIterator__seqs_end, _RAIterOut__target, _DifferenceTp__length, _Compare__comp, \fB__gnu_parallel::sequential_tag\fP)"

.PP
Multiway Merge Frontend\&. Merge tha sequences specified by seqs_begin n' __seqs_end tha fuck into __target\&. __seqs_begin n' __seqs_end must point ta a sequence of pairs\&. These pairs must contain a iterator ta tha beginnin of a sequence up in they first entry n' a iterator tha _M_end of tha same sequence up in they second entry\&.
.PP
Ties is fucked up arbitrarily\&. Right back up in yo muthafuckin ass. See stable_multiway_merge fo' a variant dat breaks tizzles by sequence number but is slower\&.
.PP
Da first entriez of tha pairs (i\&.e\&. tha begin iterators) is ghon be moved forward accordingly\&.
.PP
Da output sequence has ta provide enough space fo' all elements dat is freestyled ta it\&.
.PP
This function will merge tha input sequences:
.PP
.IP "\(bu" 2
not stable
.IP "\(bu" 2
parallel, dependin on tha input size n' Settings
.IP "\(bu" 2
usin samplin fo' splitting
.IP "\(bu" 2
usin sentinels
.PP
.PP
Yo ass gotta take care dat tha element tha _M_end iterator points ta is readable n' gotz nuff a value dat is pimped outa than any other non-sentinel value up in all sequences\&.
.PP
Example:
.PP
.PP
.nf

  int sequences[10][11];
  fo' (int __i = 0; __i < 10; ++__i)
    fo' (int __j = 0; __i < 11; ++__j)
      sequences[__i][__j] = __j; // __last one is sentinel!
.fi
.PP
.PP
.PP
.nf
  int __out[33];
  std::vector<std::pair<int*> > seqs;
  fo' (int __i = 0; __i < 10; ++__i)
    { seqs\&.push(std::make_pair<int*>(sequences[__i],
                                     sequences[__i] + 10)) }
.fi
.PP
.PP
.PP
.nf
  multiway_merge(seqs\&.begin(), seqs\&.end(), __target, std::less<int>(), 33);
.fi
.PP
.PP
\fBPrecondition:\fP
.RS 4
All input sequences must be sorted\&. 
.PP
Target must provide enough space ta merge up length elements or tha number of elements up in all sequences, whichever is smaller\&. 
.PP
For each \fC__i\fP, \fC__seqs_begin\fP[__i]\&.second must be tha end marker of tha sequence yo, but also reference tha one mo' __sentinel element\&.
.RE
.PP
\fBPostcondition:\fP
.RS 4
[__target, return __value) gotz nuff merged __elements from tha input sequences\&. 
.PP
return __value - __target = min(__length, number of elements up in all sequences)\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
stable_multiway_merge_sentinels
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_RAIterPairIterator\fP iterator over sequence of pairz of iterators 
.br
\fI_RAIterOut\fP iterator over target sequence 
.br
\fI_DifferenceTp\fP difference type fo' tha sequence 
.br
\fI_Compare\fP strict weak orderin type ta compare elements up in sequences
.RE
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP __begin of sequence __sequence 
.br
\fI__seqs_end\fP _M_end of sequence __sequence 
.br
\fI__target\fP target sequence ta merge to\&. 
.br
\fI__comp\fP strict weak orderin ta use fo' element comparison\&. 
.br
\fI__length\fP Maximum length ta merge, possibly larger than tha number of elements available\&.
.RE
.PP
\fBReturns:\fP
.RS 4
_M_end iterator of output sequence 
.RE
.PP

.PP
Definizzle at line 1782 of file multiway_merge\&.h\&.
.PP
References __sequential_multiway_merge(), n' _GLIBCXX_CALL\&.
.SS "template<bool __stable, bool __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Splitta , typename _Compare > _RAIter3 __gnu_parallel::parallel_multiway_merge (_RAIterIterator__seqs_begin, _RAIterIterator__seqs_end, _RAIter3__target, _Splitter__splitter, _DifferenceTp__length, _Compare__comp, _ThreadIndex__num_threads)"

.PP
Parallel multi-way merge routine\&. Da _GLIBCXX_PARALLEL_DECISION is based on tha branchin factor n' runtime settings\&.
.PP
Must not be called if tha number of sequences is 1\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Splitter\fP functor ta split input (either __exact or samplin based) 
.br
\fI__stable\fP Stable mergin incurs a performizzle penalty\&. 
.br
\fI__sentinel\fP Ignored\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fI__seqs_begin\fP Begin iterator of iterator pair input sequence\&. 
.br
\fI__seqs_end\fP End iterator of iterator pair input sequence\&. 
.br
\fI__target\fP Begin iterator of output sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__length\fP Maximum length ta merge, possibly larger than tha number of elements available\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
End iterator of output sequence\&. 
.RE
.PP

.PP
Definizzle at line 1225 of file multiway_merge\&.h\&.
.PP
References __is_sorted(), _GLIBCXX_CALL, _GLIBCXX_PARALLEL_LENGTH, __gnu_parallel::_Settings::get(), std::make_pair(), n' __gnu_parallel::_Settings::merge_oversampling\&.
.PP
Referenced by __parallel_merge_advance()\&.
.SS "template<bool __stable, bool __exact, typename _RAIta , typename _Compare > void __gnu_parallel::parallel_sort_mwms (_RAIter__begin, _RAIter__end, _Compare__comp, _ThreadIndex__num_threads)"

.PP
PMWMS main call\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__begin\fP Begin iterator of sequence\&. 
.br
\fI__end\fP End iterator of sequence\&. 
.br
\fI__comp\fP Comparator\&. 
.br
\fI__num_threads\fP Number of threadz ta use\&. 
.RE
.PP

.PP
Definizzle at line 395 of file multiway_mergesort\&.h\&.
.PP
References _GLIBCXX_CALL, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_num_threads, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_offsets, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_pieces, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_samples, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_source, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_starts, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_temporary, __gnu_parallel::_Settings::get(), n' __gnu_parallel::_Settings::sort_mwms_oversampling\&.
.SS "template<bool __stable, bool __exact, typename _RAIta , typename _Compare > void __gnu_parallel::parallel_sort_mwms_pu (_PMWMSSortingData< _RAIta > *__sd, _Compare &__comp)"

.PP
PMWMS code executed by each thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__sd\fP Pointa ta algorithm data\&. 
.br
\fI__comp\fP Comparator\&. 
.RE
.PP

.PP
Definizzle at line 308 of file multiway_mergesort\&.h\&.
.PP
References __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_num_threads, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_pieces, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_source, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_starts, __gnu_parallel::_PMWMSSortingData< _RAIta >::_M_temporary, __gnu_parallel::_Settings::get(), std::make_pair(), __gnu_parallel::_Settings::sort_mwms_oversampling, n' std::uninitialized_copy()\&.
.SH "Variable Documentation"
.PP 
.SS "const int __gnu_parallel::_CASable_bits\fC [static]\fP"

.PP
Number of bitz of _CASable\&. 
.PP
Definizzle at line 130 of file types\&.h\&.
.PP
Referenced by __decode2(), n' __encode2()\&.
.SS "const \fB_CASable\fP __gnu_parallel::_CASable_mask\fC [static]\fP"

.PP
_CASable wit tha right half of bits set ta 1\&. 
.PP
Definizzle at line 133 of file types\&.h\&.
.PP
Referenced by __decode2()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen fo' libstdc++ from tha source code\&.
