.\" Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_INIT 3 2008-11-11 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_attr_init, pthread_attr_destroy \- initialize n' destroy
thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_init(pthread_attr_t *" attr );
.BI "int pthread_attr_destroy(pthread_attr_t *" attr );
.sp
Compile n' link wit \fI\-pthread\fP.
.fi
.SH DESCRIPTION
The
.BR pthread_attr_init ()
function initializes tha thread attributes object pointed ta by
.IR attr
with default attribute joints.
Afta dis call, individual attributez of tha object can be set
usin various related functions (listed under SEE ALSO),
and then tha object can be used up in one or more
.BR pthread_create (3)
calls dat create threads.

Calling
.BR pthread_attr_init ()
on a thread attributes object dat has already been initialized
results up in undefined behavior.

When a thread attributes object is no longer required,
it should be destroyed rockin the
.BR pthread_attr_destroy ()
function.
Destroyin a thread attributes object has no effect
on threadz dat was pimped rockin dat object.

Once a thread attributes object has been destroyed,
it can be reinitialized using
.BR pthread_attr_init ().
Any other use of a thugged-out destroyed thread attributes object
has undefined thangs up in dis biatch.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
POSIX.1-2001 documents an
.B ENOMEM
error for
.BR pthread_attr_init ();
on Linux these functions always succeed
(but portable n' future-proof applications should nevertheless
handle a possible error return).
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
The
.I pthread_attr_t
type should be treated as opaque:
any access ta tha object other than via pthreadz functions
is nonportable n' produces undefined thangs up in dis biatch.
.SH EXAMPLE
Da program below optionally make use of
.BR pthread_attr_init ()
and various related functions ta initialize a thread attributes
object dat is used ta create a single thread.
Once pimped, tha thread uses the
.BR pthread_getattr_np (3)
function (a nonstandard GNU extension) ta retrieve tha thread's
attributes, n' then displays dem attributes.

If tha program is run wit no command-line argument,
then it passes NULL as the
.I attr
argument of
.BR pthread_create (3),
so dat tha thread is pimped wit default attributes.
Hustlin tha program on Linux/x86-32 wit tha NPTL threadin implementation,
we peep tha following:

.in +4n
.nf
.\" Results from glibc 2.8, SUSE 11.0; Oct 2008
.RB "$" " ulimit \-s" "       # No stack imit ==> default stack size is 2MB"
unlimited
.RB "$" " ./a.out"
Thread attributes:
        Detach state        = PTHREAD_CREATE_JOINABLE
        Scope               = PTHREAD_SCOPE_SYSTEM
        Inherit schedula   = PTHREAD_INHERIT_SCHED
        Schedulin policy   = SCHED_OTHER
        Schedulin prioritizzle = 0
        Guard size          = 4096 bytes
        Stack address       = 0x40196000
        Stack size          = 0x201000 bytes
.fi
.in

When we supply a stack size as a cold-ass lil command-line argument,
the program initializes a thread attributes object,
sets various attributes up in dat object,
and passes a pointa ta tha object up in tha call to
.BR pthread_create (3).
Hustlin tha program on Linux/x86-32 wit tha NPTL threadin implementation,
we peep tha following:

.in +4n
.nf
.\" Results from glibc 2.8, SUSE 11.0; Oct 2008
.RB "$" " ./a.out 0x3000000"
posix_memalign() allocated at 0x40197000
Thread attributes:
        Detach state        = PTHREAD_CREATE_DETACHED
        Scope               = PTHREAD_SCOPE_SYSTEM
        Inherit schedula   = PTHREAD_EXPLICIT_SCHED
        Schedulin policy   = SCHED_OTHER
        Schedulin prioritizzle = 0
        Guard size          = 0 bytes
        Stack address       = 0x40197000
        Stack size          = 0x3000000 bytes
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE     /* To git pthread_getattr_np() declaration */
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#define handle_error_en(en, msg) \\
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void
display_pthread_attr(pthread_attr_t *attr, char *prefix)
{
    int s, i;
    size_t v;
    void *stkaddr;
    struct sched_param sp;

    s = pthread_attr_getdetachstate(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getdetachstate");
    printf("%sDetach state        = %s\\n", prefix,
            (i == PTHREAD_CREATE_DETACHED) ? "PTHREAD_CREATE_DETACHED" :
            (i == PTHREAD_CREATE_JOINABLE) ? "PTHREAD_CREATE_JOINABLE" :
            "???");

    s = pthread_attr_getscope(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getscope");
    printf("%sScope               = %s\\n", prefix,
            (i == PTHREAD_SCOPE_SYSTEM)  ? "PTHREAD_SCOPE_SYSTEM" :
            (i == PTHREAD_SCOPE_PROCESS) ? "PTHREAD_SCOPE_PROCESS" :
            "???");

    s = pthread_attr_getinheritsched(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getinheritsched");
    printf("%sInherit schedula   = %s\\n", prefix,
            (i == PTHREAD_INHERIT_SCHED)  ? "PTHREAD_INHERIT_SCHED" :
            (i == PTHREAD_EXPLICIT_SCHED) ? "PTHREAD_EXPLICIT_SCHED" :
            "???");

    s = pthread_attr_getschedpolicy(attr, &i);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getschedpolicy");
    printf("%sSchedulin policy   = %s\\n", prefix,
            (i == SCHED_OTHER) ? "SCHED_OTHER" :
            (i == SCHED_FIFO)  ? "SCHED_FIFO" :
            (i == SCHED_RR)    ? "SCHED_RR" :
            "???");

    s = pthread_attr_getschedparam(attr, &sp);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getschedparam");
    printf("%sSchedulin prioritizzle = %d\\n", prefix, sp.sched_priority);

    s = pthread_attr_getguardsize(attr, &v);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getguardsize");
    printf("%sGuard size          = %d bytes\\n", prefix, v);

    s = pthread_attr_getstack(attr, &stkaddr, &v);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getstack");
    printf("%sStack address       = %p\\n", prefix, stkaddr);
    printf("%sStack size          = 0x%x bytes\\n", prefix, v);
}

static void *
thread_start(void *arg)
{
    int s;
    pthread_attr_t gattr;

    /* pthread_getattr_np() be a non\-standard GNU extension that
       retrieves tha attributez of tha thread specified up in its
       first argument */

    s = pthread_getattr_np(pthread_self(), &gattr);
    if (s != 0)
        handle_error_en(s, "pthread_getattr_np");

    printf("Thread attributes:\\n");
    display_pthread_attr(&gattr, "\\t");

    exit(EXIT_SUCCESS);         /* Terminizzle all threadz */
}

int
main(int argc, char *argv[])
{
    pthread_t thr;
    pthread_attr_t attr;
    pthread_attr_t *attrp;      /* NULL or &attr */
    int s;

    attrp = NULL;

    /* If a cold-ass lil command\-line argument was supplied, use it ta set the
       stack\-size attribute n' set all dem other thread attributes,
       n' set attrp pointin ta thread attributes object */

    if (argc > 1) {
        int stack_size;
        void *sp;

        attrp = &attr;

        s = pthread_attr_init(&attr);
        if (s != 0)
            handle_error_en(s, "pthread_attr_init");

        s = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setdetachstate");

        s = pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setinheritsched");

        stack_size = strtoul(argv[1], NULL, 0);

        s = posix_memalign(&sp, sysconf(_SC_PAGESIZE), stack_size);
        if (s != 0)
            handle_error_en(s, "posix_memalign");

        printf("posix_memalign() allocated at %p\\n", sp);

        s = pthread_attr_setstack(&attr, sp, stack_size);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setstack");
    }

    s = pthread_create(&thr, attrp, &thread_start, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    if (attrp != NULL) {
        s = pthread_attr_destroy(attrp);
        if (s != 0)
            handle_error_en(s, "pthread_attr_destroy");
    }

    pause();    /* Terminates when other thread calls exit() */
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR pthread_attr_setaffinity_np (3),
.BR pthread_attr_setdetachstate (3),
.BR pthread_attr_setguardsize (3),
.BR pthread_attr_setinheritsched (3),
.BR pthread_attr_setschedparam (3),
.BR pthread_attr_setschedpolicy (3),
.BR pthread_attr_setscope (3),
.BR pthread_attr_setstack (3),
.BR pthread_attr_setstackaddr (3),
.BR pthread_attr_setstacksize (3),
.BR pthread_create (3),
.BR pthread_getattr_np (3),
.BR pthreadz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
