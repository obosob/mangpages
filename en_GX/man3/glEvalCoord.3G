'\" t
.\"     Title: glEvalCoord
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLEVALCOORD" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glEvalCoord \- evaluate enabled one\- n' two\-dimensionizzle maps
.SH "C SPECIFICATION"
.HP \w'void\ glEvalCoord1f('u
.BI "void glEvalCoord1f(GLfloat\ " "u" ");"
.HP \w'void\ glEvalCoord1d('u
.BI "void glEvalCoord1d(GLdouble\ " "u" ");"
.HP \w'void\ glEvalCoord2f('u
.BI "void glEvalCoord2f(GLfloat\ " "u" ", GLfloat\ " "v" ");"
.HP \w'void\ glEvalCoord2d('u
.BI "void glEvalCoord2d(GLdouble\ " "u" ", GLdouble\ " "v" ");"
.SH "PARAMETERS"
.PP
\fIu\fR
.RS 4
Specifies a value dat is tha domain coordinate
u
to tha basis function defined up in a previous
\fBglMap1\fR()
or
\fBglMap2\fR()
command\&.
.RE
.PP
\fIv\fR
.RS 4
Specifies a value dat is tha domain coordinate
v
to tha basis function defined up in a previous
\fBglMap2\fR()
command\&. This argument aint present up in a
\fBglEvalCoord1\fR
command\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glEvalCoord1fv('u
.BI "void glEvalCoord1fv(const\ GLfloat\ *\ " "u" ");"
.HP \w'void\ glEvalCoord1dv('u
.BI "void glEvalCoord1dv(const\ GLdouble\ *\ " "u" ");"
.HP \w'void\ glEvalCoord2fv('u
.BI "void glEvalCoord2fv(const\ GLfloat\ *\ " "u" ");"
.HP \w'void\ glEvalCoord2dv('u
.BI "void glEvalCoord2dv(const\ GLdouble\ *\ " "u" ");"
.SH "PARAMETERS"
.PP
\fIu\fR
.RS 4
Specifies a pointa ta a array containin either one or two domain coordinates\&. Da first coordinizzle is
u\&. Da second coordinizzle is
v, which is present only in
\fBglEvalCoord2\fR
versions\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglEvalCoord1\fR
evaluates enabled one\-dimensionizzle maps at argument
\fIu\fR\&.
\fBglEvalCoord2\fR
does tha same ol' dirty fo' two\-dimensionizzle maps rockin two domain joints,
\fIu\fR
and
\fIv\fR\&. To define a map, call
\fBglMap1\fR()
and
\fBglMap2\fR(); ta enable n' disable it, call
\fBglEnable\fR()
and
\fBglDisable\fR()\&.
.PP
When one of the
\fBglEvalCoord\fR
commandz is issued, all currently enabled mapz of tha indicated dimension is evaluated\&. Then, fo' each enabled map, it be as if tha correspondin GL command had been issued wit tha computed value\&. That is, if
\fBGL_MAP1_INDEX\fR
or
\fBGL_MAP2_INDEX\fR
is enabled, a
\fBglIndex\fR()
command is simulated\&. If
\fBGL_MAP1_COLOR_4\fR
or
\fBGL_MAP2_COLOR_4\fR
is enabled, a
\fBglColor\fR()
command is simulated\&. If
\fBGL_MAP1_NORMAL\fR
or
\fBGL_MAP2_NORMAL\fR
is enabled, a aiiight vector is produced, n' if any of
\fBGL_MAP1_TEXTURE_COORD_1\fR,
\fBGL_MAP1_TEXTURE_COORD_2\fR,
\fBGL_MAP1_TEXTURE_COORD_3\fR,
\fBGL_MAP1_TEXTURE_COORD_4\fR,
\fBGL_MAP2_TEXTURE_COORD_1\fR,
\fBGL_MAP2_TEXTURE_COORD_2\fR,
\fBGL_MAP2_TEXTURE_COORD_3\fR, or
\fBGL_MAP2_TEXTURE_COORD_4\fR
is enabled, then a appropriate
\fBglTexCoord\fR()
command is simulated\&.
.PP
For color, color index, normal, n' texture coordinates tha GL uses evaluated joints instead of current joints fo' dem evaluations dat is enabled, n' current joints otherwise, But fuck dat shiznit yo, tha word on tha street is dat tha evaluated joints do not update tha current joints\&. Thus, if
\fBglVertex\fR()
commandz is interspersed with
\fBglEvalCoord\fR
commands, tha color, normal, n' texture coordinates associated wit the
\fBglVertex\fR()
commandz is not affected by tha joints generated by the
\fBglEvalCoord\fR
commandz yo, but only by da most thugged-out recent
\fBglColor\fR(),
\fBglIndex\fR(),
\fBglNormal\fR(), and
\fBglTexCoord\fR()
commands\&.
.PP
No commandz is issued fo' maps dat is not enabled\&. If mo' than one texture evaluation is enabled fo' a particular dimension (for example,
\fBGL_MAP2_TEXTURE_COORD_1\fR
and
\fBGL_MAP2_TEXTURE_COORD_2\fR), then only tha evaluation of tha map dat produces tha larger number of coordinates (in dis case,
\fBGL_MAP2_TEXTURE_COORD_2\fR) is carried out\&.
\fBGL_MAP1_VERTEX_4\fR
overrides
\fBGL_MAP1_VERTEX_3\fR, and
\fBGL_MAP2_VERTEX_4\fR
overrides
\fBGL_MAP2_VERTEX_3\fR, up in tha same manner\&. If neither a three\- nor a gangbangin' four\-component vertex map is enabled fo' tha specified dimension, the
\fBglEvalCoord\fR
command is ignored\&.
.PP
If you have enabled automatic aiiight generation, by calling
\fBglEnable\fR()
with argument
\fBGL_AUTO_NORMAL\fR,
\fBglEvalCoord2\fR
generates surface normals analytically, regardless of tha contents or enablin of the
\fBGL_MAP2_NORMAL\fR
map\&. Let
.PP
m = ∂ p ∂ u \(mu ∂ p ∂ v
.PP
Then tha generated normal
n
is
n = m m
.PP
If automatic aiiight generation is disabled, tha correspondin aiiight map
\fBGL_MAP2_NORMAL\fR, if enabled, is used ta produce a normal\&. If neither automatic aiiight generation nor a aiiight map is enabled, no aiiight is generated for
\fBglEvalCoord2\fR
commands\&.
.SH "ASSOCIATED GETS"
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_INDEX\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_COLOR_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_NORMAL\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_1\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_2\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_VERTEX_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_VERTEX_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_INDEX\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_COLOR_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_NORMAL\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_1\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_2\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_AUTO_NORMAL\fR
.PP
\fBglGetMap\fR()
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglColor\fR(),
\fBglEnable\fR(),
\fBglEvalMesh\fR(),
\fBglEvalPoint\fR(),
\fBglIndex\fR(),
\fBglMap1\fR(),
\fBglMap2\fR(),
\fBglMapGrid\fR(),
\fBglNormal\fR(),
\fBglTexCoord\fR(),
\fBglVertex\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under tha SGI Jacked Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
