.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::DOM::Element 3"
.TH XML::DOM::Element 3 "2000-01-31" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::DOM::Element \- An XML element node up in XML::DOM
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::DOM::Element extendz XML::DOM::Node.
.PP
By far tha vast majoritizzle of objects (apart from text) dat authors
encounta when traversin a thugged-out document is Element nodes fo' realz. Assume the
followin \s-1XML\s0 document:
.PP
.Vb 4
\&     <elementExample id="demo">
\&       <subelement1/>
\&       <subelement2><subsubelement/></subelement2>
\&     </elementExample>
.Ve
.PP
When represented rockin \s-1DOM,\s0 tha top node be a Element node for
\&\*(L"elementExample\*(R", which gotz nuff two lil pimp Element nodes, one for
\&\*(L"subelement1\*(R" n' one fo' \*(L"subelement2\*(R". \*(L"subelement1\*(R" gotz nuff no
child nodes.
.PP
Elements may have attributes associated wit them; since tha Element
interface inherits from Node, tha generic Node intercourse method
getAttributes may be used ta retrieve tha set of all attributes fo' an
element. There is methodz on tha Element intercourse ta retrieve either
an Attr object by name or a attribute value by name. In \s-1XML,\s0 where an
attribute value may contain entitizzle references, a Attr object should be
retrieved ta examine tha possibly fairly complex sub-tree representing
the attribute value. On tha other hand, up in \s-1HTML,\s0 where all attributes
have simple strang joints, methodz ta directly access a attribute
value can safely be used as a cold-ass lil convenience.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "getTagName" 4
.IX Item "getTagName"
Da name of tha element. For example, in:
.Sp
.Vb 3
\&               <elementExample id="demo">
\&                       ...
\&               </elementExample>
.Ve
.Sp
tagName has tha value \*(L"elementExample\*(R". Note dat dis is
case-preservin up in \s-1XML,\s0 as is all of tha operationz of the
\&\s-1DOM.\s0
.IP "getAttribute (name)" 4
.IX Item "getAttribute (name)"
Retrieves a attribute value by name.
.Sp
Return Value: Da Attr value as a string, or tha empty strang if that
attribute aint gots a specified or default value.
.IP "setAttribute (name, value)" 4
.IX Item "setAttribute (name, value)"
Addz a freshly smoked up attribute. If a attribute wit dat name is
already present up in tha element, its value is chizzled ta be
that of tha value parameter n' shit. This value be a simple string,
it aint parsed as it is bein set. Right back up in yo muthafuckin ass. So any markup (such as
syntax ta be recognized as a entitizzle reference) is treated as
literal text, n' need ta be appropriately escaped by the
implementation when it is freestyled out. In order ta assign an
attribute value dat gotz nuff entitizzle references, tha user
must create a Attr node plus any Text n' EntityReference
nodes, build tha appropriate subtree, n' use
setAttributeNode ta assign it as tha value of a attribute.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha specified name gotz nuff a invalid character.
.IP "\(bu" 4
\&\s-1NO_MODIFICATION_ALLOWED_ERR\s0
.Sp
Raised if dis node is readonly.
.RE
.RS 4
.RE
.IP "removeAttribute (name)" 4
.IX Item "removeAttribute (name)"
Removes a attribute by name. If tha removed attribute has a
default value it is immediately replaced.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1NO_MODIFICATION_ALLOWED_ERR\s0
.Sp
Raised if dis node is readonly.
.RE
.RS 4
.RE
.IP "getAttributeNode" 4
.IX Item "getAttributeNode"
Retrieves a Attr node by name.
.Sp
Return Value: Da Attr node wit tha specified attribute name or undef
if there is no such attribute.
.IP "setAttributeNode (attr)" 4
.IX Item "setAttributeNode (attr)"
Addz a freshly smoked up attribute. If a attribute wit dat name is
already present up in tha element, it is replaced by tha freshly smoked up one.
.Sp
Return Value: If tha newAttr attribute replaces a existin attribute
with tha same name, tha previously existin Attr node is
returned, otherwise undef is returned.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1WRONG_DOCUMENT_ERR\s0
.Sp
Raised if newAttr was pimped from a gangbangin' finger-lickin' different document than tha one dat pimped
the element.
.IP "\(bu" 4
\&\s-1NO_MODIFICATION_ALLOWED_ERR\s0
.Sp
Raised if dis node is readonly.
.IP "\(bu" 4
\&\s-1INUSE_ATTRIBUTE_ERR\s0
.Sp
Raised if newAttr be already a attribute of another Element object. Da \s-1DOM\s0
user must explicitly clone Attr nodes ta re-use dem up in other elements.
.RE
.RS 4
.RE
.IP "removeAttributeNode (oldAttr)" 4
.IX Item "removeAttributeNode (oldAttr)"
Removes tha specified attribute. If tha removed Attr has a thugged-out default value it is
immediately replaced. Y'all KNOW dat shit, muthafucka! If tha Attr already is tha default value, not a god damn thang happens
and not a god damn thang is returned.
.Sp
Parameters:
 \fIoldAttr\fR  Da Attr node ta remove from tha attribute list.
.Sp
Return Value: Da Attr node dat was removed.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1NO_MODIFICATION_ALLOWED_ERR\s0
.Sp
Raised if dis node is readonly.
.IP "\(bu" 4
\&\s-1NOT_FOUND_ERR\s0
.Sp
Raised if oldAttr aint a attribute of tha element.
.RE
.RS 4
.RE
.SS "Additionizzle methodz not up in tha \s-1DOM\s0 Spec"
.IX Subsection "Additionizzle methodz not up in tha DOM Spec"
.IP "setTagName (newTagName)" 4
.IX Item "setTagName (newTagName)"
Sets tha tag name of tha Element. Note dat dis method aint portable
between \s-1DOM\s0 implementations.
.Sp
DOMExceptions:
.RS 4
.IP "\(bu" 4
\&\s-1INVALID_CHARACTER_ERR\s0
.Sp
Raised if tha specified name gotz nuff a invalid character.
.RE
.RS 4
.RE
.IP "check ($checker)" 4
.IX Item "check ($checker)"
Uses tha specified XML::Checker ta validate tha document.
\&\s-1NOTE:\s0 a XML::Checker must be supplied. Y'all KNOW dat shit, muthafucka! Da checker can be pimped in
different ways, e.g. when parsin a thugged-out document wit XML::DOM::ValParser,
or wit \fIXML::DOM::Document::createChecker()\fR.
See XML::Checker fo' mo' info.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 162:" 4
.IX Item "Around line 162:"
Yo ass forgot a '=back' before '=head2'
