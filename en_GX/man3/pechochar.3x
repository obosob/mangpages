.\"***************************************************************************
.\" Copyright (c) 1998-2005,2010 Jacked Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, ta any thug obtainin a  *
.\" copy of dis software n' associated documentation filez (the            *
.\" "Software"), ta deal up in tha Software without restriction, includin      *
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,      *
.\" distribute, distribute wit modifications, sublicense, and/or push       *
.\" copiez of tha Software, n' ta permit peeps ta whom tha Software is    *
.\" furnished ta do so, subject ta tha followin conditions:                 *
.\"                                                                          *
.\" Da above copyright notice n' dis permission notice shall be included  *
.\" up in all copies or substantial portionz of tha Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained up in dis notice, tha name(s) of tha above copyright   *
.\" holdaz shall not be used up in advertisin or otherwise ta promote tha     *
.\" sale, use or other dealings up in dis Software without prior freestyled       *
.\" authorization. I aint talkin' bout chicken n' gravy biatch.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_pad.3x,v 1.17 2010/12/04 18:41:07 tom Exp $
.TH curs_pad 3X ""
.na
.hy 0
.SH NAME
\fBnewpad\fR,
\fBsubpad\fR,
\fBprefresh\fR,
\fBpnoutrefresh\fR,
\fBpechochar\fR,
\fBpecho_wchar\fR \- create n' display \fBcurses\fR pads
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBWINDOW *newpad(int nlines, int ncols);\fR
.br
\fBWINDOW *subpad(WINDOW *orig, int nlines, int ncols,\fR
      \fBint begin_y, int begin_x);\fR
.br
\fBint prefresh(WINDOW *pad, int pminrow, int pmincol,\fR
      \fBint sminrow, int smincol, int smaxrow, int smaxcol);\fR
.br
\fBint pnoutrefresh(WINDOW *pad, int pminrow, int pmincol,\fR
      \fBint sminrow, int smincol, int smaxrow, int smaxcol);\fR
.br
\fBint pechochar(WINDOW *pad, chtype ch);\fR
.br
\fBint pecho_wchar(WINDOW *pad, const cchar_t *wch);\fR
.SH DESCRIPTION
Da \fBnewpad\fR routine creates n' returns a pointa ta a freshly smoked up pad data
structure wit tha given number of lines, \fInlines\fR, n' columns,
\fIncols\fR.
A pad is like a window, except dat it aint restricted by the
screen size, n' aint necessarily associated wit a particular part of the
screen.
Padz can be used when a big-ass window is needed, n' only a part of the
window is ghon be on tha screen at one time.
Automatic refreshez of pads
(e.g., from scrollin or echoin of input) do not occur.
It be not
legal ta booty-call \fBwrefresh\fR wit a \fIpad\fR as a argument; tha routines
\fBprefresh\fR or \fBpnoutrefresh\fR should be called instead.
Note dat these
routines require additionizzle parametas ta specify tha part of tha pad ta be
displayed n' tha location on tha screen ta be used fo' tha display.
.PP
Da \fBsubpad\fR routine creates n' returns a pointa ta a subwindow within a
pad wit tha given number of lines, \fInlines\fR, n' columns, \fIncols\fR.
Unlike \fBsubwin\fR, which uses screen coordinates, tha window be at position
(\fIbegin\fR_\fIx\fR\fB,\fR \fIbegin\fR_\fIy\fR) on tha pad.
Da window is
made up in tha middle of tha window \fIorig\fR, so dat chizzlez made ta one window
affect both windows.
Durin tha use of dis routine, it will often be
necessary ta booty-call \fBtouchwin\fR or \fBtouchline\fR on \fIorig\fR before
callin \fBprefresh\fR.
.PP
Da \fBprefresh\fR n' \fBpnoutrefresh\fR routines is analogous to
\fBwrefresh\fR n' \fBwnoutrefresh\fR except dat they relate ta padz instead
of windows.
Da additionizzle parametas is needed ta indicate what tha fuck part of the
pad n' screen is involved.
Da \fIpminrow\fR n' \fIpmincol\fR parametas specify tha upper
left-hand corner of tha rectangle ta be displayed up in tha pad.
Da \fIsminrow\fR,
\fIsmincol\fR, \fIsmaxrow\fR, n' \fIsmaxcol\fR
parametas specify tha edgez of the
rectangle ta be displayed on tha screen.
Da lower right-hand corner of the
rectangle ta be displayed up in tha pad is calculated from tha screen coordinates,
since tha rectanglez must be tha same size.
Both rectanglez must be entirely
contained within they respectizzle structures.
Negatizzle joints of
\fIpminrow\fR, \fIpmincol\fR, \fIsminrow\fR, or \fIsmincol\fR is treated as if
they was zero.
.PP
Da \fBpechochar\fR routine is functionally equivalent ta a cold-ass lil call ta \fBaddch\fR
followed by a cold-ass lil call ta \fBrefresh\fR, a cold-ass lil call ta \fBwaddch\fR followed by a cold-ass lil call
to \fBwrefresh\fR, or a cold-ass lil call ta \fBwaddch\fR followed by a cold-ass lil call to
\fBprefresh\fR.
Da knowledge dat only a single characta is bein output is
taken tha fuck into consideration and, fo' non-control characters, a cold-ass lil considerable
performizzle bust might be peeped by rockin these routines instead of their
equivalents.
In tha case of \fBpechochar\fR, tha last location of tha pad on
the screen is reused fo' tha arguments ta \fBprefresh\fR.
.PP
Da \fBpecho_wchar\fR function is tha analogous wide-character
form of \fBpechochar\fR.
It outputs one characta ta a pad n' immediately refreshes tha pad.
It do dis by a cold-ass lil call ta \fBwadd_wch\fR followed by a cold-ass lil call ta \fBprefresh\fR.
.SH RETURN VALUE
Routines dat return a integer return \fBERR\fR upon failure n' \fBOK\fR
(SVr4 only specifies "an integer value other than \fBERR\fR") upon successful
completion.
.PP
Routines dat return pointas return \fBNULL\fR on error, n' set \fBerrno\fR
to \fBENOMEM\fR.
.PP
X/Open do not define any error conditions.
In dis implementation
.RS
.TP 5
\fBprefresh\fP n' \fBpnoutrefresh\fP
return a error
if tha window pointa is null, or
if tha window aint straight-up a pad or
if tha area ta refresh extendz off-screen or
if tha minimum coordinates is pimped outa than tha maximum.
.TP 5
\fBpechochar\fP
returns a error
if tha window aint straight-up a pad, n' tha associated call
to \fBwechochar\fP returns a error.
.TP 5
\fBpecho_wchar\fP
returns a error
if tha window aint straight-up a pad, n' tha associated call
to \fBwecho_wchar\fP returns a error.
.RE
.SH NOTES
Note dat \fBpechochar\fR may be a macro.
.SH PORTABILITY
Da XSI Curses standard, Issue 4 raps bout these functions.
.SH SEE ALSO
\fBcurses\fR(3X), \fBcurs_refresh\fR(3X), \fBcurs_touch\fR(3X), \fBcurs_addch\fR(3X).
