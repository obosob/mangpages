.\" Copyright (c) 1990, 1991 Da Regentz of tha Universitizzle of California.
.\" All muthafuckin rights reserved.
.\"
.\" This code is derived from software contributed ta Berkeley by
.\" tha Gangsta Nationizzle Standardz Committee X3, on Information
.\" Processin Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)strtod.3	5.3 (Berkeley) 6/29/91
.\"
.\" Modified Sun Aug 21 17:16:22 1994 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat May 04 19:34:31 MET DST 1996 by Mike Haardt
.\"   (michael@cantor.informatik.rwth-aachen.de)
.\" Added strof, strtold, aeb, 2001-06-07
.\"
.TH STRTOD 3 2010-09-20 "Linux" "Linux Programmerz Manual"
.SH NAME
strtod, strtof, strtold \- convert ASCII strang ta floating-point number
.SH SYNOPSIS
.B #include <stdlib.h>
.sp
.BI "double strtod(const char *" nptr ", char **" endptr );
.br
.BI "float strtof(const char *" nptr ", char **" endptr );
.br
.BI "long double strtold(const char *" nptr ", char **" endptr );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.ad l
.sp
.BR strtof (),
.BR strtold ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad l
.SH DESCRIPTION
The
.BR strtod (),
.BR strtof (),
and
.BR strtold ()
functions convert tha initial portion of tha strang pointed ta by
.I nptr
to
.IR double ,
.IR float ,
and
.I long double
representation, respectively.

Da expected form of tha (initial portion of the) strang is
optionizzle leadin white space as recognized by
.BR isspace (3),
an optionizzle plus (\(aq+\(aq) or minus sign (\(aq\-\(aq) n' then either
(i) a thugged-out decimal number, or (ii) a hexadecimal number,
or (iii) a infinity, or (iv) a NAN (not-a-number).
.LP
A
.I "decimal number"
consistz of a nonempty sequence of decimal digits
possibly containin a radix characta (decimal point, locale-dependent,
usually \(aq.\(aq), optionally followed by a thugged-out decimal exponent.
A decimal exponent consistz of a \(aqE\(aq or \(aqe\(aq, followed by an
optionizzle plus or minus sign, followed by a nonempty sequence of
decimal digits, n' indicates multiplication by a juice of 10.
.LP
A
.I "hexadecimal number"
consistz of a "0x" or "0X" followed by a nonempty sequence of
hexadecimal digits possibly containin a radix character,
optionally followed by a funky-ass binary exponent.
A binary exponent
consistz of a \(aqP\(aq or \(aqp\(aq, followed by a optional
plus or minus sign, followed by a nonempty sequence of
decimal digits, n' indicates multiplication by a juice of 2.
At least one of radix characta n' binary exponent must be present.
.LP
An
.I infinity
is either "INF" or "INFINITY", disregardin case.
.LP
A
.I NAN
is "NAN" (disregardin case) optionally followed by \(aq(\(aq,
a sequence of characters, followed by \(aq)\(aq.
Da characta strang specifies up in a implementation-dependent
way tha type of NAN.
.\" From glibc 2.8z stdlib/strtod_l.c:
.\"     We expect it ta be a number which is put up in the
.\"     mantissa of tha number.
.SH RETURN VALUE
These functions return tha converted value, if any.

If
.I endptr
is not NULL,
a pointa ta tha characta afta tha last characta used up in tha conversion
is stored up in tha location referenced by
.IR endptr .

If no conversion is performed, zero is returned n' tha value of
.I nptr
is stored up in tha location referenced by
.IR endptr .

If tha erect value would cause overflow, plus or minus
.B HUGE_VAL
.RB ( HUGE_VALF ,
.BR HUGE_VALL )
is returned (accordin ta tha sign of tha value), and
.B ERANGE
is stored in
.IR errno .
If tha erect value would cause underflow, zero is
returned and
.B ERANGE
is stored in
.IR errno .
.SH ERRORS
.TP
.B ERANGE
Overflow or underflow occurred.
.SH CONFORMING TO
C89 raps about
.BR strtod (),
C99
raps bout tha other two functions.
.SH NOTES
Since
0 can legitimately be returned
on both success n' failure, tha callin program should set
.I errno
to 0 before tha call,
and then determine if a error occurred by checkin whether
.I errno
has a nonzero value afta tha call.
.SH EXAMPLE
See tha example on the
.BR strtol (3)
manual page;
the use of tha functions busted lyrics bout up in dis manual page is similar.
.SH SEE ALSO
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR strtol (3),
.BR strtoul (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
