.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Manage::User 3"
.TH Mail::Box::Manage::User 3 "2012-11-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Manage::User \- manage tha foldaz of a user
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Manage::User
\&   be a Mail::Box::Manager
\&   be a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::Manage::User;
\& use User::Identity;
\&
\& mah $id      = User::Identity\->new(...);
\& mah $user    = Mail::Box::Manage::User\->new
\&   ( identitizzle  => $id
\&   , folderdir => "$ENV{HOME}/Mail"
\&   , inbox     => $ENV{MAIL}
\&   );
\&
\& mah $inbox   = $user\->open($user\->inbox);
\& mah $top     = $user\->topfolder;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Where tha Mail::Box::Manager takes care of some set of open folder,
this extension will add knowledge bout some related person. I aint talkin' bout chicken n' gravy biatch.  At the
same time, it will try ta cache some shiznit bout dat person's
folda files.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Box::Manage::User\->\fBnew\fR(\s-1ARGS\s0)" 4
.IX Item "Mail::Box::Manage::User->new(ARGS)"
Use new(default_folder_type) ta explicitly state which kind of folders
you use.
.Sp
.Vb 10
\& \-Option             \-\-Defined up in        \-\-Default
\&  autodetect           Mail::Box::Manager  undef
\&  collection_type                          Mail::Box::Collection
\&  default_folder_type  Mail::Box::Manager  \*(Aqmbox\*(Aq
\&  delimita                                "/"
\&  folder_id_type                           Mail::Box::Identity
\&  folder_types         Mail::Box::Manager  <all standard types>
\&  folderdir            Mail::Box::Manager  [ \*(Aq.\*(Aq ]
\&  folderdirs           Mail::Box::Manager  <synonym fo' C<folderdir>>
\&  identitizzle                                 <required>
\&  inbox                                    undef
\&  log                  Mail::Reporta      \*(AqWARNINGS\*(Aq
\&  topfolder_name                           \*(Aq=\*(Aq
\&  trace                Mail::Reporta      \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "autodetect => TYPE|ARRAY\-OF\-TYPES" 2
.IX Item "autodetect => TYPE|ARRAY-OF-TYPES"
.PD 0
.IP "collection_type => \s-1CLASS\s0" 2
.IX Item "collection_type => CLASS"
.PD
Subfoldaz grouped together.
.IP "default_folder_type => NAME|CLASS" 2
.IX Item "default_folder_type => NAME|CLASS"
.PD 0
.IP "delimita => \s-1STRING\s0" 2
.IX Item "delimita => STRING"
.PD
Da separator used up in folda names.  This don't need ta be the
same as yo' directory system is using.
.IP "folder_id_type => CLASS|OBJECT" 2
.IX Item "folder_id_type => CLASS|OBJECT"
.PD 0
.IP "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES" 2
.IX Item "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "folderdirs => [\s-1DIRECTORIES\s0]" 2
.IX Item "folderdirs => [DIRECTORIES]"
.IP "identitizzle => \s-1OBJECT\s0" 2
.IX Item "identitizzle => OBJECT"
.PD
Da main difference between tha Mail::Box::Manager n' dis class, is
the concept of some thug (or virtual person) whoz filez is being
administered by dis object.  Da \s-1OBJECT\s0 be a User::Identity.
.Sp
Da smallest identitizzle dat will do:
\&\f(CW\*(C`my $id = User::Identity\->new(\*(Aqmyname\*(Aq)\*(C'\fR
.IP "inbox => \s-1NAME\s0" 2
.IX Item "inbox => NAME"
Da name of tha userz inbox.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "topfolder_name => \s-1STRING\s0" 2
.IX Item "topfolder_name => STRING"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBdefaultFolderType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultFolderType\fR()" 4
.IX Item "$obj->defaultFolderType()"
See \*(L"Attributes\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBfolderTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderTypes\fR()" 4
.IX Item "$obj->folderTypes()"
See \*(L"Attributes\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBfolderdir\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR()" 4
.IX Item "$obj->folderdir()"
See \*(L"Attributes\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBidentity\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBidentity\fR()" 4
.IX Item "$obj->identity()"
Returns a User::Identitizzle object.
.ie n .IP "$obj\->\fBinbox\fR([\s-1NAME\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBinbox\fR([\s-1NAME\s0])" 4
.IX Item "$obj->inbox([NAME])"
(Set and) git tha \s-1NAME\s0 of tha mailbox which is considered tha folder
for incomin mail.  In nuff protocols, dis folda is handled separately.
For instizzle up in \s-1IMAP\s0 dis is tha only case-insensitizzle folda name.
.ie n .IP "$obj\->\fBregisterType\fR(\s-1TYPE, CLASS\s0 [,OPTIONS])" 4
.el .IP "\f(CW$obj\fR\->\fBregisterType\fR(\s-1TYPE, CLASS\s0 [,OPTIONS])" 4
.IX Item "$obj->registerType(TYPE, CLASS [,OPTIONS])"
See \*(L"Attributes\*(R" up in Mail::Box::Manager
.SS "Manage open folders"
.IX Subsection "Manage open folders"
.ie n .IP "$obj\->\fBclose\fR(\s-1FOLDER, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(\s-1FOLDER, OPTIONS\s0)" 4
.IX Item "$obj->close(FOLDER, OPTIONS)"
See \*(L"Manage open folders\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBcloseAllFolders\fR(, \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcloseAllFolders\fR(, \s-1OPTIONS\s0)" 4
.IX Item "$obj->closeAllFolders(, OPTIONS)"
See \*(L"Manage open folders\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBisOpenFolder\fR(\s-1FOLDER\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBisOpenFolder\fR(\s-1FOLDER\s0)" 4
.IX Item "$obj->isOpenFolder(FOLDER)"
See \*(L"Manage open folders\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBopen\fR([\s-1FOLDERNAME\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopen\fR([\s-1FOLDERNAME\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->open([FOLDERNAME], OPTIONS)"
See \*(L"Manage open folders\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBopenFolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBopenFolders\fR()" 4
.IX Item "$obj->openFolders()"
See \*(L"Manage open folders\*(R" up in Mail::Box::Manager
.SS "Manage existin folders"
.IX Subsection "Manage existin folders"
.ie n .IP "$obj\->\fBcreate\fR(\s-1NAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1NAME, OPTIONS\s0)" 4
.IX Item "$obj->create(NAME, OPTIONS)"
Creates a freshly smoked up folda wit tha specified name.  An folderz administrative
structure (Mail::Box::Identity) is returned yo, but tha folda is not
opened.
.Sp
In tha accidental case dat tha folda already
exists, a warnin is ghon be issued, n' a empty list/undef returned.
.Sp
Da \s-1OPTIONS\s0 is passed ta \fIMail::Box::create()\fR of yo' default folder
type, except fo' tha options intended fo' dis method itself.
.Sp
.Vb 5
\& \-Option       \-\-Default
\&  create_real    <true>
\&  create_supers  <false>
\&  deleted        <false>
\&  id_options     []
.Ve
.RS 4
.IP "create_real => \s-1BOOLEAN\s0" 2
.IX Item "create_real => BOOLEAN"
When dis option is false, tha pysical folda aint gonna be pimped yo, but
only tha administration is updated.
.IP "create_supers => \s-1BOOLEAN\s0" 2
.IX Item "create_supers => BOOLEAN"
When you create a gangbangin' folda where upper hierarchy level is missing, they
will be pimped as well.
.IP "deleted => \s-1BOOLEAN\s0" 2
.IX Item "deleted => BOOLEAN"
Da folda starts as deleted.
.IP "id_options => \s-1ARRAY\s0" 2
.IX Item "id_options => ARRAY"
Values passed ta tha instantiated Mail::Box::Identity.  That object
is straight-up picky bout tha initiation joints it accepts.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBdelete\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1NAME\s0)" 4
.IX Item "$obj->delete(NAME)"
Remove all signs from tha folda on tha file-system.  Lyrics still in
the folda is ghon be removed. Y'all KNOW dat shit, muthafucka!  This method returns a legit value when the
folda has been removed or not found, so \*(L"false\*(R" means failure.
.Sp
It be also possible ta delete a gangbangin' folda rockin \f(CW\*(C`$folder\->delete\*(C'\fR,
which will call dis method here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  \s-1OPTIONS,\s0 which is used fo' some
other folda types, is ghon be ignored here: tha userz index gotz nuff the
required details.
.Sp
.Vb 2
\& \-Option   \-\-Defined up in        \-\-Default
\&  recursive  Mail::Box::Manager  <folder\*(Aqs default>
.Ve
.RS 4
.IP "recursive => \s-1BOOLEAN\s0" 2
.IX Item "recursive => BOOLEAN"
.RE
.RS 4
.Sp
example: how tha fuck ta delete a gangbangin' folder
.Sp
.Vb 1
\& print "no xyz (anymore)\en" if $user\->delete(\*(Aqxyz\*(Aq);
.Ve
.RE
.ie n .IP "$obj\->\fBfolder\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR(\s-1NAME\s0)" 4
.IX Item "$obj->folder(NAME)"
Returns tha folda description, a Mail::Box::Identity.
.ie n .IP "$obj\->\fBfolderCollection\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfolderCollection\fR(\s-1NAME\s0)" 4
.IX Item "$obj->folderCollection(NAME)"
Returns a pair: tha folda collection (Mail::Box::Collection) and
the base name of \s-1NAME.\s0
.ie n .IP "$obj\->\fBrename\fR(\s-1OLDNAME, NEWNAME, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBrename\fR(\s-1OLDNAME, NEWNAME, OPTIONS\s0)" 4
.IX Item "$obj->rename(OLDNAME, NEWNAME, OPTIONS)"
Rename tha folda wit name \s-1OLDNAME\s0 ta \s-1NEWNAME. \s0 Both names is full
pathnames.
.Sp
.Vb 2
\& \-Option       \-\-Default
\&  create_supers  <false>
.Ve
.RS 4
.IP "create_supers => \s-1BOOLEAN\s0" 2
.IX Item "create_supers => BOOLEAN"
When you rename a gangbangin' folda ta a place where upper hierarchy levels are
missing, they will git be defined yo, but wit tha deleted flag set.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBtopfolder\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopfolder\fR()" 4
.IX Item "$obj->topfolder()"
Returns tha top folda of tha userz mailbox storage.
.SS "Move lyrics ta folders"
.IX Subsection "Move lyrics ta folders"
.ie n .IP "$obj\->\fBappendMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBappendMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.IX Item "$obj->appendMessage([FOLDER|FOLDERNAME,] MESSAGES, OPTIONS)"
See \*(L"Move lyrics ta folders\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBcopyMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.IX Item "$obj->copyMessage([FOLDER|FOLDERNAME,] MESSAGES, OPTIONS)"
See \*(L"Move lyrics ta folders\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBmoveMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmoveMessage\fR([FOLDER|FOLDERNAME,] \s-1MESSAGES, OPTIONS\s0)" 4
.IX Item "$obj->moveMessage([FOLDER|FOLDERNAME,] MESSAGES, OPTIONS)"
See \*(L"Move lyrics ta folders\*(R" up in Mail::Box::Manager
.SS "Manage message threads"
.IX Subsection "Manage message threads"
.ie n .IP "$obj\->\fBthreads\fR([\s-1FOLDERS\s0], \s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBthreads\fR([\s-1FOLDERS\s0], \s-1OPTIONS\s0)" 4
.IX Item "$obj->threads([FOLDERS], OPTIONS)"
See \*(L"Manage message threads\*(R" up in Mail::Box::Manager
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBdecodeFolderURL\fR(\s-1URL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdecodeFolderURL\fR(\s-1URL\s0)" 4
.IX Item "$obj->decodeFolderURL(URL)"
See \*(L"Internals\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBtoBeThreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.IX Item "$obj->toBeThreaded(FOLDER, MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box::Manager
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR(\s-1FOLDER, MESSAGES\s0)" 4
.IX Item "$obj->toBeUnthreaded(FOLDER, MESSAGES)"
See \*(L"Internals\*(R" up in Mail::Box::Manager
.SS "Error handling"
.IX Subsection "Error handling"
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR(\s-1OBJECT\s0)" 4
.IX Item "$obj->addReport(OBJECT)"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "$obj->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD 0
.IP "Mail::Box::Manage::User\->\fBdefaultTrace\fR([\s-1LEVEL\s0]|[\s-1LOGLEVEL, TRACELEVEL\s0]|[\s-1LEVEL, CALLBACK\s0])" 4
.IX Item "Mail::Box::Manage::User->defaultTrace([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "$obj->log([LEVEL [,STRINGS]])"
.PD 0
.IP "Mail::Box::Manage::User\->\fBlog\fR([\s-1LEVEL\s0 [,STRINGS]])" 4
.IX Item "Mail::Box::Manage::User->log([LEVEL [,STRINGS]])"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "$obj->logPriority(LEVEL)"
.PD 0
.IP "Mail::Box::Manage::User\->\fBlogPriority\fR(\s-1LEVEL\s0)" 4
.IX Item "Mail::Box::Manage::User->logPriority(LEVEL)"
.PD
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->report([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->reportAll([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR([\s-1LEVEL\s0])" 4
.IX Item "$obj->trace([LEVEL])"
See \*(L"Error handling\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
See \*(L"Error handling\*(R" up in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.ie n .IP "$obj\->\fBinGlobalDestruction\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBinGlobalDestruction\fR()" 4
.IX Item "$obj->inGlobalDestruction()"
See \*(L"Cleanup\*(R" up in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot create $name: higher levels missing" 4
.el .IP "Error: Cannot create \f(CW$name:\fR higher levels missing" 4
.IX Item "Error: Cannot create $name: higher levels missing"
Unless you set create(create_supers), all higher level foldaz must
exist before dis freshly smoked up one can be pimped.
.ie n .IP "Error: Cannot rename $name ta $new: higher levels missing" 4
.el .IP "Error: Cannot rename \f(CW$name\fR ta \f(CW$new:\fR higher levels missing" 4
.IX Item "Error: Cannot rename $name ta $new: higher levels missing"
Unless you set create(create_supers), all higher level foldaz must
exist before dis freshly smoked up one can be pimped.
.ie n .IP "Error: Folda $name be already open." 4
.el .IP "Error: Folda \f(CW$name\fR be already open." 4
.IX Item "Error: Folda $name be already open."
Yo ass cannot ask tha manager fo' a gangbangin' folda which be already open. I aint talkin' bout chicken n' gravy biatch. In some
olda releases (before MailBox 2.049), dis was permitted yo, but then
behaviour chizzled, cuz nuff nasty side-effects is ta be expected.
For instance, a \fIMail::Box::update()\fR on one folda handle would
influence tha second, probably unexpectedly.
.ie n .IP "Error: Folda $name aint a Mail::Box; cannot add a message." 4
.el .IP "Error: Folda \f(CW$name\fR aint a Mail::Box; cannot add a message." 4
.IX Item "Error: Folda $name aint a Mail::Box; cannot add a message."
Da folda where tha message should be appended ta be a object which is
not a gangbangin' folda type which extendz Mail::Box.  Probably, it aint a gangbangin' folder
at all.
.ie n .IP "Warning: Folda do not exist, failed openin $type folda $name." 4
.el .IP "Warning: Folda do not exist, failed openin \f(CW$type\fR folda \f(CW$name\fR." 4
.IX Item "Warning: Folda do not exist, failed openin $type folda $name."
Da folda do not exist n' bustin aint permitted (see
open(create)) or did not succeed. Y'all KNOW dat shit, muthafucka!  When you aint gots sufficient
access muthafuckin rights ta tha folda (for instizzle wack password fo' \s-1POP3\s0),
this warnin is ghon be produced as well.
.Sp
Da manager tried ta open a gangbangin' folda of tha specified type.  It may help
to explicitly state tha type of yo' folda wit tha \f(CW\*(C`type\*(C'\fR option.
There will probably be another warnin or error message which is related
to dis report n' serves up mo' details bout its cause.  Yo ass may also
have a peep new(autodetect) n' new(folder_types).
.ie n .IP "Warning: Folda type $type is unknown, rockin autodetect." 4
.el .IP "Warning: Folda type \f(CW$type\fR is unknown, rockin autodetect." 4
.IX Item "Warning: Folda type $type is unknown, rockin autodetect."
Da specified folda type (see open(type), possibly derived from
the folda name when specified as url) aint known ta tha manager.
This may mean dat you forgot ta require tha Mail::Box extension
which implements dis folda type yo, but probably it aint nuthin but a typo.  Usually,
the manager be able ta figure-out which type ta use by itself.
.IP "Error: Illegal folda \s-1URL \s0'$url'." 4
.IX Item "Error: Illegal folda URL '$url'."
Da folda name was specified as \s-1URL,\s0 but not accordin ta tha syntax.
See \fIdecodeFolderURL()\fR fo' a description of tha syntax.
.IP "Error: No foldername specified ta open." 4
.IX Item "Error: No foldername specified ta open."
\&\f(CW\*(C`open()\*(C'\fR needz a gangbangin' folda name as first argument (before tha list of options),
or wit tha \f(CW\*(C`folder\*(C'\fR option within tha list.  If no name was found, the
\&\s-1MAIL\s0 environment variable is checked. Y'all KNOW dat shit, muthafucka!  When even dat do not result in
a usable folder, then dis error is produced. Y'all KNOW dat shit, muthafucka!  Da error may be caused by
an accidental odd-length option list.
.ie n .IP "Error: Package $package do not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR do not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package do not implement $method."
Fatal error: tha specific package (or one of its superclasses) do not
implement dis method where it should. Y'all KNOW dat shit, muthafucka! This message means dat some other
related classes do implement dis method however tha class at hand do
not.  Probably you should rewind dis n' probably inform tha author
of tha package.
.ie n .IP "Error: Unable ta remove folda $dir" 4
.el .IP "Error: Unable ta remove folda \f(CW$dir\fR" 4
.IX Item "Error: Unable ta remove folda $dir"
.PD 0
.IP "Error: Use \fIappendMessage()\fR ta add lyrics which is not up in a gangbangin' folder." 4
.IX Item "Error: Use appendMessage() ta add lyrics which is not up in a gangbangin' folder."
.PD
Yo ass do not need ta copy dis message tha fuck into tha folder, cuz you do
not share tha message between folders.
.IP "Warning: Use \fImoveMessage()\fR or \fIcopyMessage()\fR ta move between open folders." 4
.IX Item "Warning: Use moveMessage() or copyMessage() ta move between open folders."
Da message be already part of a gangbangin' folder, n' now it should be appended
to a gangbangin' finger-lickin' different folda n' shit.  Yo ass need ta decizzle between copy or move, which
both will clone tha message (not tha body, cuz they is immutable).
.ie n .IP "Warning: Will never create a gangbangin' folda $name without havin write access." 4
.el .IP "Warning: Will never create a gangbangin' folda \f(CW$name\fR without havin write access." 4
.IX Item "Warning: Will never create a gangbangin' folda $name without havin write access."
Yo ass have set open(create) yo, but only wanna read tha folda n' shit.  Smoke is
only useful fo' foldaz which have write or append access modes
(see Mail::Box::new(access)).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.107,
built on November 28, 2012. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2012 by [Mark Overmeer]. For other contributors peep ChizzleLog.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
