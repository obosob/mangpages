.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Config 3pm"
.TH Net::Config 3pm "2014-10-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Config \- Local configuration data fo' libnet
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&    use Net::Config qw(%NetConfig);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Config\*(C'\fR holdz configuration data fo' tha modulez up in tha libnet
distribution. I aint talkin' bout chicken n' gravy biatch. Durin installation yo big-ass booty is ghon be axed fo' these joints.
.PP
Da configuration data is held globally up in a gangbangin' file up in tha perl installation
tree yo, but a user may override any of these joints by providin they own. I aint talkin' bout chicken n' gravy biatch. This
can be done by havin a \f(CW\*(C`.libnetrc\*(C'\fR file up in they home directory. This file
should return a reference ta a \s-1HASH\s0 containin tha keys busted lyrics bout below.
For example
.PP
.Vb 6
\&    # .libnetrc
\&    {
\&        nntp_hosts => [ "my_preferred_host" ],
\&        ph_hosts   => [ "my_ph_server" ],
\&    }
\&    _\|_END_\|_
.Ve
.SH "METHODS"
.IX Header "METHODS"
\&\f(CW\*(C`Net::Config\*(C'\fR defines tha followin methods. They is methodz as they are
invoked as class methods. This is cuz \f(CW\*(C`Net::Config\*(C'\fR inherits from
\&\f(CW\*(C`Net::LocalCfg\*(C'\fR so you can override these methodz if you want.
.IP "requires_firewall \s-1HOST\s0" 4
.IX Item "requires_firewall HOST"
Attempts ta determine if a given host is outside yo' firewall. Possible
return joints are.
.Sp
.Vb 3
\&  \-1  Cannot lookup hostname
\&   0  Host is inside firewall (or there is no ftp_firewall entry)
\&   1  Host is outside tha firewall
.Ve
.Sp
This is done by rockin hostname lookup n' tha \f(CW\*(C`local_netmask\*(C'\fR entry in
the configuration data.
.SH "NetConfig VALUES"
.IX Header "NetConfig VALUES"
.IP "nntp_hosts" 4
.IX Item "nntp_hosts"
.PD 0
.IP "snpp_hosts" 4
.IX Item "snpp_hosts"
.IP "pop3_hosts" 4
.IX Item "pop3_hosts"
.IP "smtp_hosts" 4
.IX Item "smtp_hosts"
.IP "ph_hosts" 4
.IX Item "ph_hosts"
.IP "daytime_hosts" 4
.IX Item "daytime_hosts"
.IP "time_hosts" 4
.IX Item "time_hosts"
.PD
Each be a reference ta a array of hostnames (in order of preference),
which should be used fo' tha given protocol
.IP "inet_domain" 4
.IX Item "inet_domain"
Yo crazy-ass internizzle domain name
.IP "ftp_firewall" 4
.IX Item "ftp_firewall"
If you have a \s-1FTP\s0 proxy firewall (\fB\s-1NOT\s0\fR a \s-1HTTP\s0 or \s-1SOCKS\s0 firewall)
then dis value should be set ta tha firewall hostname. If yo' firewall
does not dig port 21, then dis value should be set to
\&\f(CW"hostname:port"\fR (eg \f(CW"hostname:99"\fR)
.IP "ftp_firewall_type" 4
.IX Item "ftp_firewall_type"
There is nuff different ftp firewall shizzle available. But unfortunately
there is no standard fo' how tha fuck ta traverse a gangbangin' firewall.  Da list below shows the
sequence of commandz dat Net::FTP will use
.Sp
.Vb 5
\&  user        Username fo' remote host
\&  pass        Password fo' remote host
\&  fwuser      Username fo' firewall
\&  fwpass      Password fo' firewall
\&  remote.host Da hostname of tha remote ftp server
.Ve
.RS 4
.IP "0" 4
There is no firewall
.IP "1" 4
.IX Item "1"
.Vb 2
\&     USER user@remote.host
\&     PASS pass
.Ve
.IP "2" 4
.IX Item "2"
.Vb 4
\&     USER fwuser
\&     PASS fwpass
\&     USER user@remote.host
\&     PASS pass
.Ve
.IP "3" 4
.IX Item "3"
.Vb 5
\&     USER fwuser
\&     PASS fwpass
\&     SITE remote.site
\&     USER user
\&     PASS pass
.Ve
.IP "4" 4
.IX Item "4"
.Vb 5
\&     USER fwuser
\&     PASS fwpass
\&     OPEN remote.site
\&     USER user
\&     PASS pass
.Ve
.IP "5" 4
.IX Item "5"
.Vb 2
\&     USER user@fwuser@remote.site
\&     PASS pass@fwpass
.Ve
.IP "6" 4
.IX Item "6"
.Vb 4
\&     USER fwuser@remote.site
\&     PASS fwpass
\&     USER user
\&     PASS pass
.Ve
.IP "7" 4
.IX Item "7"
.Vb 4
\&     USER user@remote.host
\&     PASS pass
\&     AUTH fwuser
\&     RESP fwpass
.Ve
.RE
.RS 4
.RE
.IP "ftp_ext_passive" 4
.IX Item "ftp_ext_passive"
.PD 0
.IP "ftp_int_passive" 4
.IX Item "ftp_int_passive"
.PD
\&\s-1FTP\s0 servers can work up in passive or actizzle mode fo' realz. Actizzle mode is when
you wanna transfer data you gotta tell tha server tha address and
port ta connect to.  Passive mode is when tha server provide the
address n' port n' you establish tha connection.
.Sp
With some firewalls actizzle mode do not work as tha server cannot
connect ta yo' machine (because yo ass is behind a gangbangin' firewall) n' tha firewall
does not re-write tha command. Y'all KNOW dat shit, muthafucka! In dis case you should set \f(CW\*(C`ftp_ext_passive\*(C'\fR
to a \fItrue\fR value.
.Sp
Some servers is configured ta only work up in passive mode. If you have
one of these you can force \f(CW\*(C`Net::FTP\*(C'\fR ta always transfer up in passive
mode; when not goin via a gangbangin' firewall, by settin \f(CW\*(C`ftp_int_passive\*(C'\fR to
a \fItrue\fR value.
.IP "local_netmask" 4
.IX Item "local_netmask"
A reference ta a list of netmask strings up in tha form \f(CW"134.99.4.0/24"\fR.
These is used by tha \f(CW\*(C`requires_firewall\*(C'\fR function ta determine if a given
host is inside or outside yo' firewall.
.PP
Da followin entries is used durin installation & testin on the
libnet package
.IP "test_hosts" 4
.IX Item "test_hosts"
If legit then \f(CW\*(C`make test\*(C'\fR may attempt ta connect ta hosts given up in the
configuration.
.IP "test_exists" 4
.IX Item "test_exists"
If legit then \f(CW\*(C`Configure\*(C'\fR will check each hostname given dat it exists
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 220:" 4
.IX Item "Around line 220:"
Expected text afta =item, not a number
.IP "Around line 225:" 4
.IX Item "Around line 225:"
Expected text afta =item, not a number
.IP "Around line 232:" 4
.IX Item "Around line 232:"
Expected text afta =item, not a number
.IP "Around line 240:" 4
.IX Item "Around line 240:"
Expected text afta =item, not a number
.IP "Around line 248:" 4
.IX Item "Around line 248:"
Expected text afta =item, not a number
.IP "Around line 253:" 4
.IX Item "Around line 253:"
Expected text afta =item, not a number
.IP "Around line 260:" 4
.IX Item "Around line 260:"
Expected text afta =item, not a number
