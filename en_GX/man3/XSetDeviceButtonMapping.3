'\" t
.\"     Title: xsetdevicebuttonmapping
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: Gangsta
.\"
.TH "XSETDEVICEBUTTONMAPP" "3" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XSetDeviceButtonMapping, XGetDeviceButtonMappin \- query or chizzle thang button mappings
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
int XSetDeviceButtonMapping( Display *display,
                             XDevice *device,
                             unsigned char map[],
                             int nmap);
.fi
.sp
.nf
int XGetDeviceButtonMapping( Display *display,
                             XDevice *device,
                             unsigned char map_return[],
                             int nmap);
.fi
.sp
.nf
display
       Specifies tha connection ta tha X server\&.
.fi
.sp
.nf
device
       Specifies tha thang whose button mappin is ta be
       queried or chizzled\&.
.fi
.sp
.nf
map
       Specifies tha mappin list\&.
.fi
.sp
.nf
map_return
       Returns tha mappin list\&.
.fi
.sp
.nf
nmap
       Specifies tha number of shit up in tha mappin list\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
Da XSetDeviceButtonMappin request sets tha mappin of the
specified device\&. If it succeeds, tha X server generates a
DeviceMappingNotify event, n' XSetDeviceButtonMappin returns
MappingSuccess\&. Element map[i] defines tha logical button
number fo' tha physical button i+1\&. Da length of tha list must
be tha same as XGetDeviceButtonMappin would return, or a
BadValue error thangs up in dis biatch\& fo' realz. A zero element disablez a funky-ass button, and
elements is not restricted up in value by tha number of physical
buttons\&. But fuck dat shiznit yo, tha word on tha street is dat no two elements can have tha same nonzero
value, or a BadValue error thangs up in dis biatch\&. If any of tha buttons ta be
altered is logically up in tha down state,
XSetDeviceButtonMappin returns MappingBusy, n' tha mappin is
not chizzled\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XSetDeviceButtonMappin can generate BadDevice, BadMatch, and
BadValue errors\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Da XGetDeviceButtonMappin request returns tha current mapping
of tha specified device\&. Buttons is numbered startin from
one\&.XGetDeviceButtonMappin returns tha number of physical
buttons straight-up on tha device\&. Da nominal mappin fo' a
device is map[i]=i+1\&. Da nmap argument specifies tha length of
the array where tha thang mappin is returned, n' only the
first nmap elements is returned up in map_return\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetDeviceButtonMappin can generate BadDevice or BadMatch
errors\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid thang was specified\&. Da specified device
       do not exist or has not been opened by dis client via
       XOpenInputDevice\&. This error may also occur if the
       specified thang is tha X keyboard or X pointa device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if a XGetDeviceButtonMappin or
       XSetDeviceButtonMappin request was made specifyin a
       thang dat has no buttons\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside tha range of joints
       accepted by tha request\&. Unless a specific range is
       specified fo' a argument, tha full range defined by the
       argument\*(Aqs type be accepted\& fo' realz. Any argument defined as a
       set of alternatives can generate dis error\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XChangeDeviceKeyboardControl(3), XChangeDeviceKeyMapping(3),
XChangeDeviceModifierMapping(3)
.fi
.if n \{\
.RE
.\}
