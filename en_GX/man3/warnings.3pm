.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "warnings 3pm"
.TH warnings 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
warnings \- Perl pragma ta control optionizzle warnings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use warnings;
\&    no warnings;
\&
\&    use warnings "all";
\&    no warnings "all";
\&
\&    use warnings::register;
\&    if (warnings::enabled()) {
\&        warnings::warn("some warning");
\&    }
\&
\&    if (warnings::enabled("void")) {
\&        warnings::warn("void", "some warning");
\&    }
\&
\&    if (warnings::enabled($object)) {
\&        warnings::warn($object, "some warning");
\&    }
\&
\&    warnings::warnif("some warning");
\&    warnings::warnif("void", "some warning");
\&    warnings::warnif($object, "some warning");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \f(CW\*(C`warnings\*(C'\fR pragma be a replacement fo' tha command line flag \f(CW\*(C`\-w\*(C'\fR,
but tha pragma is limited ta tha enclosin block, while tha flag is global.
See perllexwarn fo' mo' shiznit n' tha list of built-in warning
categories.
.PP
If no import list is supplied, all possible warnings is either enabled
or disabled.
.PP
A number of functions is provided ta assist module authors.
.IP "use warnings::register" 4
.IX Item "use warnings::register"
Creates a freshly smoked up warnings category wit tha same name as tha package where
the call ta tha pragma is used.
.IP "\fIwarnings::enabled()\fR" 4
.IX Item "warnings::enabled()"
Use tha warnings category wit tha same name as tha current package.
.Sp
Return \s-1TRUE\s0 if dat warnings category is enabled up in tha callin module.
Otherwise returns \s-1FALSE.\s0
.IP "warnings::enabled($category)" 4
.IX Item "warnings::enabled($category)"
Return \s-1TRUE\s0 if tha warnings category, \f(CW$category\fR, is enabled up in the
callin module.
Otherwise returns \s-1FALSE.\s0
.IP "warnings::enabled($object)" 4
.IX Item "warnings::enabled($object)"
Use tha name of tha class fo' tha object reference, \f(CW$object\fR, as the
warnings category.
.Sp
Return \s-1TRUE\s0 if dat warnings category is enabled up in tha straight-up original gangsta scope
where tha object is used.
Otherwise returns \s-1FALSE.\s0
.IP "\fIwarnings::fatal_enabled()\fR" 4
.IX Item "warnings::fatal_enabled()"
Return \s-1TRUE\s0 if tha warnings category wit tha same name as tha current
package has been set ta \s-1FATAL\s0 up in tha callin module.
Otherwise returns \s-1FALSE.\s0
.IP "warnings::fatal_enabled($category)" 4
.IX Item "warnings::fatal_enabled($category)"
Return \s-1TRUE\s0 if tha warnings category \f(CW$category\fR has been set ta \s-1FATAL\s0 in
the callin module.
Otherwise returns \s-1FALSE.\s0
.IP "warnings::fatal_enabled($object)" 4
.IX Item "warnings::fatal_enabled($object)"
Use tha name of tha class fo' tha object reference, \f(CW$object\fR, as the
warnings category.
.Sp
Return \s-1TRUE\s0 if dat warnings category has been set ta \s-1FATAL\s0 up in tha first
scope where tha object is used.
Otherwise returns \s-1FALSE.\s0
.IP "warnings::warn($message)" 4
.IX Item "warnings::warn($message)"
Print \f(CW$message\fR ta \s-1STDERR.\s0
.Sp
Use tha warnings category wit tha same name as tha current package.
.Sp
If dat warnings category has been set ta \*(L"\s-1FATAL\*(R"\s0 up in tha callin module
then take a thugged-out dirt nap. Otherwise return.
.ie n .IP "warnings::warn($category, $message)" 4
.el .IP "warnings::warn($category, \f(CW$message\fR)" 4
.IX Item "warnings::warn($category, $message)"
Print \f(CW$message\fR ta \s-1STDERR.\s0
.Sp
If tha warnings category, \f(CW$category\fR, has been set ta \*(L"\s-1FATAL\*(R"\s0 up in the
callin module then take a thugged-out dirt nap. Otherwise return.
.ie n .IP "warnings::warn($object, $message)" 4
.el .IP "warnings::warn($object, \f(CW$message\fR)" 4
.IX Item "warnings::warn($object, $message)"
Print \f(CW$message\fR ta \s-1STDERR.\s0
.Sp
Use tha name of tha class fo' tha object reference, \f(CW$object\fR, as the
warnings category.
.Sp
If dat warnings category has been set ta \*(L"\s-1FATAL\*(R"\s0 up in tha scope where \f(CW$object\fR
is first used then take a thugged-out dirt nap. Otherwise return.
.IP "warnings::warnif($message)" 4
.IX Item "warnings::warnif($message)"
Equivalent to:
.Sp
.Vb 2
\&    if (warnings::enabled())
\&      { warnings::warn($message) }
.Ve
.ie n .IP "warnings::warnif($category, $message)" 4
.el .IP "warnings::warnif($category, \f(CW$message\fR)" 4
.IX Item "warnings::warnif($category, $message)"
Equivalent to:
.Sp
.Vb 2
\&    if (warnings::enabled($category))
\&      { warnings::warn($category, $message) }
.Ve
.ie n .IP "warnings::warnif($object, $message)" 4
.el .IP "warnings::warnif($object, \f(CW$message\fR)" 4
.IX Item "warnings::warnif($object, $message)"
Equivalent to:
.Sp
.Vb 2
\&    if (warnings::enabled($object))
\&      { warnings::warn($object, $message) }
.Ve
.IP "warnings::register_categories(@names)" 4
.IX Item "warnings::register_categories(@names)"
This registas warnin categories fo' tha given names n' is primarily for
use by tha warnings::regista pragma, fo' which peep perllexwarn.
.PP
See \*(L"Pragmatic Modules\*(R" up in perlmodlib n' perllexwarn.
