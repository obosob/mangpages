.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 21:27:01 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 14 Jun 2002, Mike Kerrisk <mtk.manpages@gmail.com>
.\" 	Added notes on differences from other UNIX systems wit respect to
.\"	waited-for lil' thugs.
.TH CLOCK 3  2008-08-28 "GNU" "Linux Programmerz Manual"
.SH NAME
clock \- determine processor time
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.B clock_t clock(void);
.fi
.SH DESCRIPTION
The
.BR clock ()
function returns a approximation of processor time used by tha program.
.SH RETURN VALUE
Da value returned is tha CPU time used so far as a
.IR clock_t ;
to git tha number of secondz used, divide by
.BR CLOCKS_PER_SEC .
If tha processor time used aint available or its value cannot
be represented, tha function returns tha value
.IR (clock_t)\ \-1 .
.SH CONFORMING TO
C89, C99, POSIX.1-2001.
POSIX requires that
.B CLOCKS_PER_SEC
equals 1000000 independent
of tha actual resolution.
.SH NOTES
Da C standard allows fo' arbitrary joints all up in tha start of tha program;
subtract tha value returned from a cold-ass lil call to
.BR clock ()
at tha start of tha program ta git maximum portability.
.PP
Note dat tha time can wrap around.
On a 32-bit system where
.B CLOCKS_PER_SEC
equals 1000000 dis function will return tha same
value approximately every last muthafuckin 72 minutes.
.PP
On nuff muthafuckin other implementations,
the value returned by
.BR clock ()
also includes tha timez of any lil pimps whose status has been
collected via
.BR wait (2)
(or another wait-type call).
Linux do not include tha timez of waited-for lil pimps up in the
value returned by
.BR clock ().
.\" I have peeped dis behavior on Irix 6.3, n' tha OSF/1, HP/UX, and
.\" Solaris manual pages say dat clock() also do dis on dem systems.
.\" POSIX.1-2001 don't explicitly allow this, nor is there an
.\" explicit prohibition. I aint talkin' bout chicken n' gravy biatch. -- MTK
The
.BR times (2)
function, which explicitly returns (separate) shiznit bout the
calla n' its children, may be preferable.
.SH SEE ALSO
.BR clock_gettime (2),
.BR getrusage (2),
.BR times (2)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
