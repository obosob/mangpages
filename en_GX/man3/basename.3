.\" Copyright (c) 2000 by Mike Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Created, 14 Dec 2000 by Mike Kerrisk
.\"
.TH BASENAME 3  2009-03-30 "GNU" "Linux Programmerz Manual"
.SH NAME
basename, dirname \- parse pathname components
.SH SYNOPSIS
.nf
.B #include <libgen.h>
.sp
.BI "char *dirname(char *" path );

.BI "char *basename(char *" path );
.fi
.SH DESCRIPTION
Warning: there be two different functions
.BR basename ()
- peep below.
.LP
Da functions
.BR dirname ()
and
.BR basename ()
break a null-terminated pathname strang tha fuck into directory
and filename components.
In tha usual case,
.BR dirname ()
returns tha strang up ta yo, but not including, tha final \(aq/\(aq, and
.BR basename ()
returns tha component followin tha final \(aq/\(aq.
Trailin \(aq/\(aq charactas is not counted as part of tha pathname.
.PP
If
.I path
does not contain a slash,
.BR dirname ()
returns tha strang "." while
.BR basename ()
returns a cold-ass lil copy of
.IR path .
If
.I path
is tha strang "/", then both
.BR dirname ()
and
.BR basename ()
return tha strang "/".
If
.I path
is a NULL pointa or points ta a empty string, then both
.BR dirname ()
and
.BR basename ()
return tha strang ".".
.PP
Concatenatin tha strang returned by
.BR dirname (),
a "/", n' tha strang returned by
.BR basename ()
yieldz a cold-ass lil complete pathname.
.PP
Both
.BR dirname ()
and
.BR basename ()
may modify tha contents of
.IR path ,
so it may be desirable ta pass a cold-ass lil copy when callin one of
these functions.
.PP
These functions may return pointas ta statically allocated memory
which may be overwritten by subsequent calls.
Alternatively, they may return a pointa ta some part of
.IR path ,
so dat tha strang referred ta by
.I path
should not be modified or freed until tha pointa returned by
the function is no longer required.
.PP
Da followin list of examplez (taken from SUSv2)
shows tha strings returned by
.BR dirname ()
and
.BR basename ()
for different paths:
.sp
.TS
lb lb lb
l l l l.
path    	dirname	basename
/usr/lib	/usr	lib
/usr/   	/	usr
usr     	.	usr
/       	/	/
\.       	.	.
\..      	.	..
.TE
.SH RETURN VALUE
Both
.BR dirname ()
and
.BR basename ()
return pointas ta null-terminated strings.
(Do not pass these pointas to
.BR free (3).)
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
There is two different versions of
.BR basename ()
- tha POSIX version busted lyrics bout above, n' tha GNU version, which one gets
after
.br
.nf

.BR "    #define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.br
.B "    #include <string.h>"

.fi
Da GNU version never modifies its argument, n' returns the
empty strang when
.I path
has a trailin slash, n' up in particular also when it is "/".
There is no GNU version of
.BR dirname ().
.LP
With glibc, one gets tha POSIX version of
.BR basename ()
when
.I <libgen.h>
is included, n' tha GNU version otherwise.
.SH BUGS
In tha glibc implementation of tha POSIX versionz of these functions
they modify they argument, n' segfault when called wit a static string
like "/usr/".
Before glibc 2.2.1, tha glibc version of
.BR dirname ()
did not erectly handle pathnames wit trailin \(aq/\(aq characters,
and generated a segfault if given a NULL argument.
.SH EXAMPLE
.in +4n
.nf
char *dirc, *basec, *bname, *dname;
char *path = "/etc/passwd";

dirc = strdup(path);
basec = strdup(path);
dname = dirname(dirc);
bname = basename(basec);
printf("dirname=%s, basename=%s\\n", dname, bname);
.fi
.in
.SH SEE ALSO
.BR basename (1),
.BR dirname (1)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
