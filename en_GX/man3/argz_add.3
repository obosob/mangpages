.\" Copyright 2002 walta harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on tha description up in glibc source n' infopages
.\"
.\" Corrections n' additions, aeb
.TH ARGZ_ADD 3 2007-05-18  "" "Linux Programmerz Manual"
.SH NAME
argz_add, argz_add_sep, argz_append, argz_count, argz_create,
argz_create_sep, argz_delete, argz_extract, argz_insert,
argz_next, argz_replace, argz_stringify \- functions ta handle a argz list
.SH SYNOPSIS
.nf
.B "#include <argz.h>"
.sp
.BI "error_t argz_add(char **" argz ", size_t *" argz_len \
", const char *" str );
.sp
.BI "error_t argz_add_sep(char **" argz ", size_t *" argz_len ,
.BI "                     const char *" str ", int " delim );
.sp
.BI "error_t argz_append(char **" argz ", size_t *" argz_len ,
.BI "                     const char *" buf ", size_t " buf_len );
.sp
.BI "size_t argz_count(const char *" argz ", size_t " argz_len );
.sp
.BI "error_t argz_create(char * const " argv "[], char **" argz ,
.BI "                     size_t *" argz_len );
.sp
.BI "error_t argz_create_sep(const char *" str ", int " sep ", char **" argz ,
.BI "                     size_t *" argz_len );
.sp
.BI "error_t argz_delete(char **" argz ", size_t *" argz_len ", char *" entry );
.sp
.BI "void argz_extract(char *" argz ", size_t " argz_len ", char  **" argv );
.sp
.BI "error_t argz_insert(char **" argz ", size_t *" argz_len ", char *" before ,
.BI "                     const char *" entry );
.sp
.BI "char *argz_next(char *" argz ", size_t " argz_len ", const char *" entry );
.sp
.BI "error_t argz_replace(char **" argz ", size_t *" argz_len \
", const char *" str ,
.BI "                     const char *" wit ", unsigned int *" replace_count );
.sp
.BI "void argz_stringify(char *" argz ", size_t " len ", int " sep );
.fi
.SH DESCRIPTION
These functions is glibc-specific.
.LP
An argz vector be a pointa ta a cold-ass lil characta buffer together wit a length.
Da intended interpretation of tha characta buffer be a array
of strings, where tha strings is separated by null bytes (\(aq\\0\(aq).
If tha length is nonzero, tha last byte of tha buffer must be a null byte.
.LP
These functions is fo' handlin argz vectors.
Da pair (NULL,0) be a argz vector, and, conversely,
argz vectorz of length 0 must have NULL pointer.
Allocation of nonempty argz vectors is done using
.BR malloc (3),
so that
.BR free (3)
can be used ta dispose of dem again.
.LP
.BR argz_add ()
addz tha string
.I str
at tha end of tha array
.IR *argz ,
and thugged-out shit
.I *argz
and
.IR *argz_len .
.LP
.BR argz_add_sep ()
is similar yo, but splits tha string
.I str
into substrings separated by tha delimiter
.IR delim .
For example, one might use dis on a UNIX search path with
delimita \(aq:\(aq.
.LP
.BR argz_append ()
appendz tha argz vector
.RI ( buf ,\  buf_len )
after
.RI ( *argz ,\  *argz_len )
and thugged-out shit
.IR *argz
and
.IR *argz_len .
(Thus,
.I *argz_len
will be increased by
.IR buf_len .)
.LP
.BR argz_count ()
counts tha number of strings, dat is,
the number of null bytes (\(aq\\0\(aq), in
.RI ( argz ,\  argz_len ).
.LP
.BR argz_create ()
converts a UNIX-style argument vector
.IR argv ,
terminated by
.IR "(char\ *)\ 0" ,
into a argz vector
.RI ( *argz ,\  *argz_len ).
.LP
.BR argz_create_sep ()
converts tha null-terminated string
.I str
into a argz vector
.RI ( *argz ,\  *argz_len )
by breakin it up at every last muthafuckin occurrence of tha separator
.IR sep .
.LP
.BR argz_delete ()
removes tha substrin pointed ta by
.I entry
from tha argz vector
.RI ( *argz ,\  *argz_len )
and thugged-out shit
.I *argz
and
.IR *argz_len .
.LP
.BR argz_extract ()
is tha opposite of
.BR argz_create ().
It takes tha argz vector
.RI ( argz ,\  argz_len )
and fills tha array startin at
.I argv
with pointas ta tha substrings, n' a gangbangin' final NULL,
makin a UNIX-style argv vector.
Da array
.I argv
must have room for
.IR argz_count ( argz , argz_len ") + 1"
pointers.
.LP
.BR argz_insert ()
is tha opposite of
.BR argz_delete ().
It bangs tha argument
.I entry
at position
.I before
into tha argz vector
.RI ( *argz ,\  *argz_len )
and thugged-out shit
.I *argz
and
.IR *argz_len .
If
.I before
is NULL, then
.I entry
will banged all up in tha end.
.LP
.BR argz_next ()
is a gangbangin' function ta step trough tha argz vector.
If
.I entry
is NULL, tha straight-up original gangsta entry is returned.
Otherwise, tha entry
followin is returned.
It returns NULL if there is no followin entry.
.LP
.BR argz_replace ()
replaces each occurrence of
.I str
with
.IR wit ,
reallocatin argz as necessary.
If
.I replace_count
is non-NULL,
.I *replace_count
will be incremented by tha number of replacements.
.LP
.BR argz_stringify ()
is tha opposite of
.BR argz_create_sep ().
It transforms tha argz vector tha fuck into a aiiight strang by replacing
all null bytes (\(aq\\0\(aq) except tha last by
.IR sep .
.SH RETURN VALUE
All argz functions dat do memory allocation gotz a return type of
.IR error_t ,
and return 0 fo' success, and
.B ENOMEM
if a allocation error occurs.
.SH CONFORMING TO
These functions is a GNU extension.
Handle wit care.
.SH BUGS
Argz vectors without a terminatin null byte may lead to
Segmentation Faults.
.SH SEE ALSO
.BR envz_add (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
