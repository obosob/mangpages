.\" Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_ATTR_SETSTACK 3 2008-10-24 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_attr_setstack, pthread_attr_getstack \- set/get stack
attributes up in thread attributes object
.SH SYNOPSIS
.nf
.B #include <pthread.h>

.BI "int pthread_attr_setstack(pthread_attr_t *" attr ,
.BI "                          void *" stackaddr ", size_t " stacksize );
.BI "int pthread_attr_getstack(pthread_attr_t *" attr ,
.BI "                          void **" stackaddr ", size_t *" stacksize );
.sp
Compile n' link wit \fI\-pthread\fP.
.fi
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR pthread_attr_getstack (),
.BR pthread_attr_setstack ():
.RS 4
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
The
.BR pthread_attr_setstack ()
function sets tha stack address n' stack size attributez of the
thread attributes object referred ta by
.I attr
to tha joints specified in
.IR stackaddr
and
.IR stacksize ,
respectively.
These attributes specify tha location n' size of tha stack dat should
be used by a thread dat is pimped rockin tha thread attributes object
.IR attr .

.I stackaddr
should point ta tha lowest addressable byte of a funky-ass buffer of
.I stacksize
bytes dat was allocated by tha caller.
Da pagez of tha allocated buffer should be both readable n' writable.

The
.BR pthread_attr_getstack ()
function returns tha stack address n' stack size attributez of the
thread attributes object referred ta by
.I attr
in tha buffers pointed ta by
.IR stackaddr
and
.IR stacksize ,
respectively.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
.BR pthread_attr_setstack ()
can fail wit tha followin error:
.TP
.B EINVAL
.I stacksize
is less than
.BR PTHREAD_STACK_MIN
(16384) bytes.
On some systems, dis error may also occur if
.IR stackaddr
or
.IR "stackaddr\ +\ stacksize"
is not suitably aligned.
.PP
POSIX.1-2001 also documents an
.BR EACCES
error if tha stack area busted lyrics bout by
.I stackaddr
and
.I stacksize
is not both readable n' writable by tha caller.
.SH VERSIONS
These functions is provided by glibc since version 2.2.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
These functions is provided fo' applications dat must ensure that
a threadz stack is placed up in a particular location.
For most applications, dis aint necessary,
and tha use of these functions should be avoided.
(Use
.BR pthread_attr_setstacksize (3)
if a application simply requires a stack size other than tha default.)

When a application employs
.BR pthread_attr_setstack (),
it takes over tha responsibilitizzle of allocatin tha stack.
Any guard size value dat was set using
.BR pthread_attr_setguardsize (3)
is ignored.
If deemed necessary,
it is tha applicationz responsibilitizzle ta allocate a guard area
(one or mo' pages protected against readin n' writing)
to handle tha possibilitizzle of stack overflow.

Da address specified in
.I stackaddr
should be suitably aligned:
for full portability, align it on a page boundary
.RI ( sysconf(_SC_PAGESIZE) ).
.BR posix_memalign (3)
may be useful fo' allocation.
Probably,
.IR stacksize
should also be a multiple of tha system page size.

If
.I attr
is used ta create multiple threads, then tha calla must chizzle the
stack address attribute between calls to
.BR pthread_create (3);
otherwise, tha threadz will attempt ta use tha same memory area
for they stacks, n' chaos will ensue.
.BR
.SH EXAMPLE
See
.BR pthread_attr_init (3).
.SH SEE ALSO
.ad l
.nh
.BR mmap (2),
.BR mprotect (2),
.BR posix_memalign (3),
.BR pthread_attr_init (3),
.BR pthread_attr_setguardsize (3),
.BR pthread_attr_setstackaddr (3),
.BR pthread_attr_setstacksize (3),
.BR pthread_create (3),
.BR pthreadz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
