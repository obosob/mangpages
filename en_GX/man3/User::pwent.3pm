.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "User::pwent 3pm"
.TH User::pwent 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
User::pwent \- by\-name intercourse ta Perlz built\-in getpw*() functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use User::pwent;
\& $pw = getpwnam(\*(Aqdaemon\*(Aq)       || take a thugged-out dirtnap "No daemon user";
\& if ( $pw\->uid == 1 && $pw\->dir =~ m#^/(bin|tmp)?\ez#s ) {
\&     print "gid 1 on root dir";
\& }
\&
\& $real_shell = $pw\->shell || \*(Aq/bin/sh\*(Aq;
\&
\& fo' (($fullname, $office, $workphone, $homephone) =
\&        split /\es*,\es*/, $pw\->gecos)
\& {
\&    s/&/ucfirst(lc($pw\->name))/ge;
\& }
\&
\& use User::pwent qw(:FIELDS);
\& getpwnam(\*(Aqdaemon\*(Aq)             || take a thugged-out dirtnap "No daemon user";
\& if ( $pw_uid == 1 && $pw_dir =~ m#^/(bin|tmp)?\ez#s ) {
\&     print "gid 1 on root dir";
\& }
\&
\& $pw = getpw($whoever);
\&
\& use User::pwent qw/:DEFAULT pw_has/;
\& if (pw_has(qw[gecos expire quota])) { .... }
\& if (pw_has("name uid gid passwd"))  { .... }
\& print "Yo crazy-ass struct pwd has: ", scalar pw_has(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modulez default exports override tha core \fIgetpwent()\fR, \fIgetpwuid()\fR,
and \fIgetpwnam()\fR functions, replacin dem wit versions dat return
\&\f(CW\*(C`User::pwent\*(C'\fR objects, n' you can put dat on yo' toast.  This object has methodz dat return the
similarly named structure field name from tha Cz passwd structure
from \fIpwd.h\fR, stripped of they leadin \*(L"pw_\*(R" parts, namely \f(CW\*(C`name\*(C'\fR,
\&\f(CW\*(C`passwd\*(C'\fR, \f(CW\*(C`uid\*(C'\fR, \f(CW\*(C`gid\*(C'\fR, \f(CW\*(C`change\*(C'\fR, \f(CW\*(C`age\*(C'\fR, \f(CW\*(C`quota\*(C'\fR, \f(CW\*(C`comment\*(C'\fR,
\&\f(CW\*(C`class\*(C'\fR, \f(CW\*(C`gecos\*(C'\fR, \f(CW\*(C`dir\*(C'\fR, \f(CW\*(C`shell\*(C'\fR, n' \f(CW\*(C`expire\*(C'\fR.  Da \f(CW\*(C`passwd\*(C'\fR,
\&\f(CW\*(C`gecos\*(C'\fR, n' \f(CW\*(C`shell\*(C'\fR fieldz is tainted when hustlin up in taint mode.
.PP
Yo ass may also import all tha structure fieldz directly tha fuck into your
namespace as regular variablez rockin tha :FIELDS import tag.  (Note
that dis still overrides yo' core functions.)  Access these fields
as variablez named wit a precedin \f(CW\*(C`pw_\*(C'\fR up in front they method
names.  Thus, \f(CW\*(C`$passwd_obj\->shell\*(C'\fR correspondz ta \f(CW$pw_shell\fR
if you import tha fields.
.PP
Da \fIgetpw()\fR function be a simple front-end dat forwards
a numeric argument ta \fIgetpwuid()\fR n' tha rest ta \fIgetpwnam()\fR.
.PP
To access dis functionalitizzle without tha core overrides, pass the
\&\f(CW\*(C`use\*(C'\fR a empty import list, n' then access function functions
with they full qualified names.  Da built-ins is always still
available via tha \f(CW\*(C`CORE::\*(C'\fR pseudo-package.
.SS "System Specifics"
.IX Subsection "System Specifics"
Perl believes dat no machine eva has mo' than one of \f(CW\*(C`change\*(C'\fR,
\&\f(CW\*(C`age\*(C'\fR, or \f(CW\*(C`quota\*(C'\fR implemented, nor mo' than one of either
\&\f(CW\*(C`comment\*(C'\fR or \f(CW\*(C`class\*(C'\fR.  Some machines do not support \f(CW\*(C`expire\*(C'\fR,
\&\f(CW\*(C`gecos\*(C'\fR, or allegedly, \f(CW\*(C`passwd\*(C'\fR.  Yo ass may call these methods
no matta what tha fuck machine you on yo, but they return \f(CW\*(C`undef\*(C'\fR if
unimplemented.
.PP
Yo ass may ask whether one of these was implemented on tha system Perl
was built on by askin tha importable \f(CW\*(C`pw_has\*(C'\fR function bout em.
This function returns legit if all parametas is supported fields
on tha build platform, false if one or mo' was not, n' raises
an exception if you axed on some gangbangin' field dat Perl never knows how
to provide.  Parametas may be up in a space-separated string, or as
separate arguments, n' you can put dat on yo' toast.  If you pass no parameters, tha function returns
the list of \f(CW\*(C`struct pwd\*(C'\fR fieldz supported by yo' build platform's
C library, as a list up in list context, or a space-separated string
in scalar context.  Note dat just cuz yo' C library had
a field don't necessarily mean dat itz straight-up implemented on
that system.
.PP
Interpretation of tha \f(CW\*(C`gecos\*(C'\fR field varies between systems yo, but
traditionally holdz 4 comma-separated fieldz containin tha user's
full name, crib location, work beeper number, n' home beeper number.
An \f(CW\*(C`&\*(C'\fR up in tha gecos field should be replaced by tha userz properly
capitalized login \f(CW\*(C`name\*(C'\fR.  Da \f(CW\*(C`shell\*(C'\fR field, if blank, must be
assumed ta be \fI/bin/sh\fR.  Perl do not do dis fo' yo thugged-out ass.  The
\&\f(CW\*(C`passwd\*(C'\fR is one-way hashed garble, not clear text, n' may not be
unhashed save by brute-force guessing.  Secure systems use mo' a
more secure hashin than \s-1DES. \s0 On systems supportin shadow password
systems, Perl automatically returns tha shadow password entry when
called by a suitably empowered user, even if yo' underlying
vendor-provided C library was too short-sighted ta realize it should
do all dis bullshit.
.PP
See \fIpasswd\fR\|(5) n' \fIgetpwent\fR\|(3) fo' details.
.SH "NOTE"
.IX Header "NOTE"
While dis class is currently implemented rockin tha Class::Struct
module ta build a struct-like class, you shouldn't rely upon all dis bullshit.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tomothy Christiansen
.SH "HISTORY"
.IX Header "HISTORY"
.IP "March 18th, 2000" 4
.IX Item "March 18th, 2000"
Reworked internals ta support betta intercourse ta dodgey fields
than aiiight Perl function provides.  Added \fIpw_has()\fR field. Y'all KNOW dat shit, muthafucka!  Improved
documentation.
