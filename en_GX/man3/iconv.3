
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code n' manual
.\"   OpenGroupz Single UNIX justification
.\"	http://www.UNIX-systems.org/online.html
.\"
.\" 2000-06-30 erection by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" 2000-11-15 aeb, fixed prototype
.\"
.TH ICONV 3 2012-05-10 "GNU" "Linux Programmerz Manual"
.SH NAME
iconv \- big-ass up characta set conversion
.SH SYNOPSIS
.nf
.B #include <iconv.h>
.sp
.BI "size_t iconv(iconv_t " cd ,
.BI "             char **" inbuf ", size_t *" inbytesleft ,
.BI "             char **" outbuf ", size_t *" outbytesleft );
.fi
.SH DESCRIPTION
The
.BR iconv ()
function converts a sequence of charactas up in one characta encoding
to a sequence of charactas up in another characta encoding.
The
.I cd
argument be a cold-ass lil conversion descriptor,
previously pimped by a cold-ass lil call to
.BR iconv_open (3);
the conversion descriptor defines tha characta encodings that
.BR iconv ()
uses fo' tha conversion.
The
.I inbuf
argument is tha address of a variable dat points to
the first characta of tha input sequence;
.I inbytesleft
indicates tha number of bytes up in dat buffer.
The
.I outbuf
argument is tha address of a variable dat points to
the first byte available up in tha output buffer;
.I outbytesleft
indicates tha number of bytes available up in tha output buffer.
.PP
Da main case is when \fIinbuf\fP aint NULL n' \fI*inbuf\fP aint NULL.
In dis case, the
.BR iconv ()
function converts tha multibyte sequence
startin at \fI*inbuf\fP ta a multibyte sequence startin at \fI*outbuf\fP.
At most \fI*inbytesleft\fP bytes, startin at \fI*inbuf\fP, is ghon be read.
At most \fI*outbytesleft\fP bytes, startin at \fI*outbuf\fP, is ghon be written.
.PP
The
.BR iconv ()
function converts one multibyte characta at a time, n' for
each characta conversion it increments \fI*inbuf\fP n' decrements
\fI*inbytesleft\fP by tha number of converted input bytes, it increments
\fI*outbuf\fP n' decrements \fI*outbytesleft\fP by tha number of converted
output bytes, n' it thugged-out shiznit tha conversion state contained up in \fIcd\fP.
If tha characta encodin of tha input is stateful, the
.BR iconv ()
function can also convert a sequence of input bytes
to a update ta tha conversion state without producin any output bytes;
such input is called a \fIshift sequence\fP.
Da conversion can stop fo' four reasons:
.IP 1. 3
An invalid multibyte sequence is encountered up in tha input.
In dis case
it sets \fIerrno\fP ta \fBEILSEQ\fP n' returns
.IR (size_t)\ \-1 .
\fI*inbuf\fP
is left pointin ta tha beginnin of tha invalid multibyte sequence.
.IP 2.
Da input byte sequence has been entirely converted,
that is, \fI*inbytesleft\fP has gone down ta 0.
In dis case
.BR iconv ()
returns tha number of
nonreversible conversions performed durin dis call.
.IP 3.
An incomplete multibyte sequence is encountered up in tha input, n' the
input byte sequence terminates afta dat shit.
In dis case it sets \fIerrno\fP to
\fBEINVAL\fP n' returns
.IR (size_t)\ \-1 .
\fI*inbuf\fP is left pointin ta the
beginnin of tha incomplete multibyte sequence.
.IP 4.
Da output buffer has no mo' room fo' tha next converted character.
In dis case it sets \fIerrno\fP ta \fBE2BIG\fP n' returns
.IR (size_t)\ \-1 .
.PP
A different case is when \fIinbuf\fP is NULL or \fI*inbuf\fP is NULL yo, but
\fIoutbuf\fP aint NULL n' \fI*outbuf\fP aint NULL.
In dis case, the
.BR iconv ()
function attempts ta set \fIcd\fPz conversion state ta the
initial state n' store a cold-ass lil correspondin shift sequence at \fI*outbuf\fP.
At most \fI*outbytesleft\fP bytes, startin at \fI*outbuf\fP, is ghon be written.
If tha output buffer has no mo' room fo' dis reset sequence, it sets
\fIerrno\fP ta \fBE2BIG\fP n' returns
.IR (size_t)\ \-1 .
Otherwise it increments
\fI*outbuf\fP n' decrements \fI*outbytesleft\fP by tha number of bytes
written.
.PP
A third case is when \fIinbuf\fP is NULL or \fI*inbuf\fP is NULL, and
\fIoutbuf\fP is NULL or \fI*outbuf\fP is NULL.
In dis case, the
.BR iconv ()
function sets \fIcd\fPz conversion state ta tha initial state.
.SH RETURN VALUE
The
.BR iconv ()
function returns tha number of charactas converted up in a
nonreversible way durin dis call; reversible conversions is not counted.
In case of error, it sets \fIerrno\fP n' returns
.IR (size_t)\ \-1 .
.SH ERRORS
Da followin errors can occur, among others:
.TP
.B E2BIG
There aint sufficient room at \fI*outbuf\fP.
.TP
.B EILSEQ
An invalid multibyte sequence has been encountered up in tha input.
.TP
.B EINVAL
An incomplete multibyte sequence has been encountered up in tha input.
.SH VERSIONS
This function be available up in glibc since version 2.1.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
Although
.I inbuf
and
.I outbuf
are typed as
.IR "char\ **" ,
this do not mean dat tha objects they point can be interpreted
as C strings or as arrayz of characters:
the interpretation of characta byte sequences is
handled internally by tha conversion functions.
In some encodings, a zero byte may be a valid part of a multibyte character.

Da calla of
.BR iconv ()
must ensure dat tha pointas passed ta tha function is suitable
for accessin charactas up in tha appropriate characta set.
This includes ensurin erect alignment on platforms dat have
tight restrictions on alignment.
.SH SEE ALSO
.BR iconv_close (3),
.BR iconv_open (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
