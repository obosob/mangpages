.TH PCRE_DFA_EXEC 3 "12 May 2013" "PCRE 8.33"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH SYNOPSIS
.rs
.sp
.B #include <pcre.h>
.PP
.SM
.B int pcre_dfa_exec(const pcre *\fIcode\fP, "const pcre_extra *\fIextra\fP,"
.ti +5n
.B "const char *\fIsubject\fP," int \fIlength\fP, int \fIstartoffset\fP,
.ti +5n
.B int \fIoptions\fP, int *\fIovector\fP, int \fIovecsize\fP,
.ti +5n
.B int *\fIworkspace\fP, int \fIwscount\fP);
.PP
.B int pcre16_dfa_exec(const pcre16 *\fIcode\fP, "const pcre16_extra *\fIextra\fP,"
.ti +5n
.B "PCRE_SPTR16 \fIsubject\fP," int \fIlength\fP, int \fIstartoffset\fP,
.ti +5n
.B int \fIoptions\fP, int *\fIovector\fP, int \fIovecsize\fP,
.ti +5n
.B int *\fIworkspace\fP, int \fIwscount\fP);
.PP
.B int pcre32_dfa_exec(const pcre32 *\fIcode\fP, "const pcre32_extra *\fIextra\fP,"
.ti +5n
.B "PCRE_SPTR32 \fIsubject\fP," int \fIlength\fP, int \fIstartoffset\fP,
.ti +5n
.B int \fIoptions\fP, int *\fIovector\fP, int \fIovecsize\fP,
.ti +5n
.B int *\fIworkspace\fP, int \fIwscount\fP);
.
.SH DESCRIPTION
.rs
.sp
This function matches a cold-ass lil compiled regular expression against a given subject
string, rockin a alternatizzle matchin algorithm dat scans tha subject string
just once (\fInot\fP Perl-compatible). Note dat tha main, Perl-compatible,
matchin function is \fBpcre[16|32]_exec()\fP. Da arguments fo' dis function
are:
.sp
  \fIcode\fP         Points ta tha compiled pattern
  \fIextra\fP        Points ta a associated \fBpcre[16|32]_extra\fP structure,
                 or is NULL
  \fIsubject\fP      Points ta tha subject string
  \fIlength\fP       Length of tha subject string
  \fIstartoffset\fP  Offset up in tha subject at which ta start matching
  \fIoptions\fP      Option bits
  \fIovector\fP      Points ta a vector of ints fo' result offsets
  \fIovecsize\fP     Number of elements up in tha vector
  \fIworkspace\fP    Points ta a vector of ints used as hustlin space
  \fIwscount\fP      Number of elements up in tha vector
.sp
Da units fo' \fIlength\fP n' \fIstartoffset\fP is bytes for
\fBpcre_exec()\fP, 16-bit data shit fo' \fBpcre16_exec()\fP, n' 32-bit items
for \fBpcre32_exec()\fP. Da options are:
.sp
  PCRE_ANCHORED          Match only all up in tha straight-up original gangsta position
  PCRE_BSR_ANYCRLF       \eR matches only CR, LF, or CRLF
  PCRE_BSR_UNICODE       \eR matches all Unicode line endings
  PCRE_NEWLINE_ANY       Recognize any Unicode newline sequence
  PCRE_NEWLINE_ANYCRLF   Recognize CR, LF, & CRLF as newline sequences
  PCRE_NEWLINE_CR        Recognize CR as tha only newline sequence
  PCRE_NEWLINE_CRLF      Recognize CRLF as tha only newline sequence
  PCRE_NEWLINE_LF        Recognize LF as tha only newline sequence
  PCRE_NOTBOL            Subject aint tha beginnin of a line
  PCRE_NOTEOL            Subject aint tha end of a line
  PCRE_NOTEMPTY          An empty strang aint a valid match
  PCRE_NOTEMPTY_ATSTART  An empty strang all up in tha start of tha subject
                           aint a valid match
  PCRE_NO_START_OPTIMIZE Do not do "start-match" optimizations
  PCRE_NO_UTF16_CHECK    Do not check tha subject fo' UTF-16
                           validitizzle (only relevant if PCRE_UTF16
                           was set at compile time)
  PCRE_NO_UTF32_CHECK    Do not check tha subject fo' UTF-32
                           validitizzle (only relevant if PCRE_UTF32
                           was set at compile time)
  PCRE_NO_UTF8_CHECK     Do not check tha subject fo' UTF-8
                           validitizzle (only relevant if PCRE_UTF8
                           was set at compile time)
  PCRE_PARTIAL           ) Return PCRE_ERROR_PARTIAL fo' a partial
  PCRE_PARTIAL_SOFT      )   match if no full matches is found
  PCRE_PARTIAL_HARD      Return PCRE_ERROR_PARTIAL fo' a partial match
                           even if there be a gangbangin' full match as well
  PCRE_DFA_SHORTEST      Return only tha shortest match
  PCRE_DFA_RESTART       Restart afta a partial match
.sp
There is restrictions on what tha fuck may step tha fuck up in a pattern when rockin dis matching
function. I aint talkin' bout chicken n' gravy biatch. Details is given up in the
.\" HREF
\fBpcrematching\fP
.\"
documentation. I aint talkin' bout chicken n' gravy biatch. For detailz of partial matching, peep the
.\" HREF
\fBpcrepartial\fP
.\"
page.
.P
A \fBpcre[16|32]_extra\fP structure gotz nuff tha followin fields:
.sp
  \fIflags\fP            Bits indicatin which fieldz is set
  \fIstudy_data\fP       Opaque data from \fBpcre[16|32]_study()\fP
  \fImatch_limit\fP      Limit on internal resource use
  \fImatch_limit_recursion\fP  Limit on internal recursion depth
  \fIcallout_data\fP     Opaque data passed back ta callouts
  \fItables\fP           Points ta characta tablez or is NULL
  \fImark\fP             For passin back a *MARK pointer
  \fIexecutable_jit\fP   Opaque data from JIT compilation
.sp
Da flag bits is PCRE_EXTRA_STUDY_DATA, PCRE_EXTRA_MATCH_LIMIT,
PCRE_EXTRA_MATCH_LIMIT_RECURSION, PCRE_EXTRA_CALLOUT_DATA,
PCRE_EXTRA_TABLES, PCRE_EXTRA_MARK n' PCRE_EXTRA_EXECUTABLE_JIT. For this
matchin function, tha \fImatch_limit\fP n' \fImatch_limit_recursion\fP fields
are not used, n' must not be set. Da PCRE_EXTRA_EXECUTABLE_JIT flag and
the correspondin variable is ignored.
.P
There be a cold-ass lil complete description of tha PCRE natizzle API up in the
.\" HREF
\fBpcreapi\fP
.\"
page n' a thugged-out description of tha POSIX API up in the
.\" HREF
\fBpcreposix\fP
.\"
page.
