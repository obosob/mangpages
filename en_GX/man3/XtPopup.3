.\" Copyright 1993 X Consortium
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtaining
.\" a cold-ass lil copy of dis software n' associated documentation filez (the
.\" "Software"), ta deal up in tha Software without restriction, including
.\" without limitation tha muthafuckin rights ta use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or push copiez of tha Software, n' to
.\" permit peeps ta whom tha Software is furnished ta do so, subject to
.\" tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice shall be
.\" included up in all copies or substantial portionz of tha Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained up in dis notice, tha name of tha X Consortium shall
.\" not be used up in advertisin or otherwise ta promote tha sale, use or
.\" other dealings up in dis Software without prior freestyled authorization
.\" from tha X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtPopup-Spring-Loaded XtCallback-None XtCallback-Nonexclusive XtCallback-Exclusive wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" bust a index entry ta tha stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtPopup 3 "libXt 1.1.4" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtPopup, XtPopupSpringLoaded, XtCallbackNone, XtCallbackNonexclusive, XtCallbackExclusive \- map a pop-up
.SH SYNTAX
.HP
void XtPopup(Widget \fIpopup_shell\fP, XtGrabKind \fIgrab_kind\fP);
.HP
void XtPopupSpringLoaded(Widget \fIpopup_shell\fP);
.HP
void XtCallbackNone(Widget \fIw\fP, XtPointa \fIclient_data\fP, XtPointer
\fIcall_data\fP):
.HP
void XtCallbackNonexclusive(Widget \fIw\fP, XtPointa \fIclient_data\fP,
XtPointa \fIcall_data\fP);
.HP
void XtCallbackExclusive(Widget \fIw\fP, XtPointa \fIclient_data\fP,
XtPointa \fIcall_data\fP);
.HP
void MenuPopup(Strin \fIshell_name\fP);
.SH ARGUMENTS
.IP \fIcall_data\fP 1i
Specifies tha callback data,
which aint used by dis procedure.
.IP \fIclient_data\fP 1i
Specifies tha pop-up shell.
.IP \fIgrab_kind\fP 1i
Specifies tha way up in which user events should be constrained.
.IP \fIpopup_shell\fP 1i
Specifies tha widget shell\*(Ps.
.IP \fIw\fP 1i
Specifies tha widget.
.SH DESCRIPTION
The
.ZN XtPopup
function performs tha following:
.IP \(bu 5
Calls
.ZN XtCheckSubclass
.\".ZN XtCheckSubclass(popup_shell, popupShellWidgetClass)
to ensure popup_shell be a subclass of
.ZN Shell .
.IP \(bu 5
Generates a error if tha shellz popped_up field be already
.ZN True .
.IP \(bu 5
Calls tha callback procedures on tha shellz popup_callback list.
.IP \(bu 5
Sets tha shell popped_up field to
.ZN True ,
the shell spring_loaded field to
.ZN False ,
and tha shell grab_kind field from grab_kind.
.IP \(bu 5
If tha shellz create_popup_child field is non-NULL,
.ZN XtPopup
calls it wit popup_shell as tha parameter.
.IP \(bu 5
If grab_kind is either
.ZN XtGrabNonexclusive
or
.ZN XtGrabExclusive ,
it calls:
.LP
.Ds
XtAddGrab(popup_shell, (grab_kind == XtGrabExclusive), False)
.De
.IP \(bu 5
Calls
.ZN XtRealizeWidget
with popup_shell specified.
.IP \(bu 5
Calls
.ZN XMapWindow
with popup_shell specified.
.LP
The
.ZN XtPopupSpringLoaded
function performs exactly as
.ZN XtPopup
except dat it sets tha shell \fIspring_loaded\fP field to
.ZN True
and always calls
.ZN XtAddGrab
with \fIexclusive\fP
.ZN True
and \fIspring_loaded\fP
.ZN True .
.LP
The
.ZN XtCallbackNone ,
.ZN XtCallbackNonexclusive ,
and
.ZN XtCallbackExclusive
functions call
.ZN XtPopup
with tha shell specified by tha client data argument
and grab_kind set as tha name specifies.
.ZN XtCallbackNone ,
.ZN XtCallbackNonexclusive ,
and
.ZN XtCallbackExclusive
specify
.ZN XtGrabNone ,
.ZN XtGrabNonexclusive ,
and
.ZN XtGrabExclusive ,
respectively.
Each function then sets tha widget dat executed tha callback list
to be insensitizzle by using
.ZN XtSetSensitizzle .
Usin these functions up in callbacks aint required.
In particular,
an application must provide customized code for
callbacks dat create pop-up shells dynamically or dat must do mo' than
desensitizin tha button.
.LP
.ZN MenuPopup
is known ta tha translation manager,
which must big-ass up special actions fo' spring-loaded pop-ups.
Calls to
.ZN MenuPopup
in a translation justification is mapped tha fuck into calls ta a
nonexported action procedure,
and tha translation manager fills up in parameters
based on tha event specified on tha left-hand side of a translation.
.LP
If
.ZN MenuPopup
is invoked on
.ZN ButtonPress
(possibly wit modifiers),
the translation manager pops up tha shell wit grab_kind set to
.ZN XtGrabExclusive
and spring_loaded set to
.ZN True .
If
.ZN MenuPopup
is invoked on
.ZN EnterWindow
(possibly wit modifiers),
the translation manager pops up tha shell wit grab_kind set to
.ZN XtGrabNonexclusive
and spring_loaded set to
.ZN False .
Otherwise, tha translation manager generates a error.
When tha widget is popped up,
the followin actions occur:
.IP \(bu 5
Calls
.ZN XtCheckSubclass
.\".ZN XtCheckSubclass(popup_shell, popupShellWidgetClass)
to ensure popup_shell be a subclass of
.ZN Shell .
.IP \(bu 5
Generates a error if tha shellz popped_up field be already
.ZN True .
.IP \(bu 5
Calls tha callback procedures on tha shellz popup_callback list.
.IP \(bu 5
Sets tha shell popped_up field to
.ZN True
and tha shell grab_kind n' spring_loaded fieldz appropriately.
.IP \(bu 5
If tha shellz create_popup_child field is non-NULL,
it is called wit popup_shell as tha parameter.
.IP \(bu 5
Calls:
.LP
.Ds
XtAddGrab(popup_shell, (grab_kind == XtGrabExclusive), spring_loaded)
.De
.IP \(bu 5
Calls
.ZN XtRealizeWidget
with popup_shell specified.
.IP \(bu 5
Calls
.ZN XMapWindow
with popup_shell specified.
.LP
(Note dat these actions is tha same as dem for
.ZN XtPopup .)
.ZN MenuPopup
tries ta find tha shell by searchin tha widget tree startin at
the parent of tha widget up in which it is invoked.
If it findz a gangbangin' finger-lickin' dirty-ass shell wit tha specified name up in tha pop-up lil pimps of
that parent, it pops up tha shell wit tha appropriate parameters.
Otherwise, it moves up tha parent chain as needed.
If
.ZN MenuPopup
gets ta tha application widget n' cannot find a matchin shell,
it generates a error.
.SH "SEE ALSO"
XtCreatePopupShell(3),
XtPopdown(3)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
