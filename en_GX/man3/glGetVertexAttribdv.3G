'\" t
.\"     Title: glGetVertexAttrib
.\"    Author: opengl.org
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/03/2013
.\"    Manual: OpenGL Manual
.\"    Source: opengl.org
.\"  Language: Gangsta
.\"
.TH "GLGETVERTEXATTRIB" "3G" "08/03/2013" "opengl.org" "OpenGL Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glGetVertexAttribdv, glGetVertexAttribfv, glGetVertexAttribiv, glGetVertexAttribIiv, glGetVertexAttribIuiv, glGetVertexAttribLdv \- Return a generic vertex attribute parameter
.SH "C SPECIFICATION"
.HP \w'void\ glGetVertexAttribdv('u
.BI "void glGetVertexAttribdv(GLuint\ " "index" ", GLenum\ " "pname" ", GLdouble\ *" "params" ");"
.HP \w'void\ glGetVertexAttribfv('u
.BI "void glGetVertexAttribfv(GLuint\ " "index" ", GLenum\ " "pname" ", GLfloat\ *" "params" ");"
.HP \w'void\ glGetVertexAttribiv('u
.BI "void glGetVertexAttribiv(GLuint\ " "index" ", GLenum\ " "pname" ", GLint\ *" "params" ");"
.HP \w'void\ glGetVertexAttribIiv('u
.BI "void glGetVertexAttribIiv(GLuint\ " "index" ", GLenum\ " "pname" ", GLint\ *" "params" ");"
.HP \w'void\ glGetVertexAttribIuiv('u
.BI "void glGetVertexAttribIuiv(GLuint\ " "index" ", GLenum\ " "pname" ", GLuint\ *" "params" ");"
.HP \w'void\ glGetVertexAttribLdv('u
.BI "void glGetVertexAttribLdv(GLuint\ " "index" ", GLenum\ " "pname" ", GLdouble\ *" "params" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies tha generic vertex attribute parameta ta be queried\&.
.RE
.PP
\fIpname\fR
.RS 4
Specifies tha symbolic name of tha vertex attribute parameta ta be queried\& fo' realz. Accepted joints are
\fBGL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\fR,
\fBGL_VERTEX_ATTRIB_ARRAY_ENABLED\fR,
\fBGL_VERTEX_ATTRIB_ARRAY_SIZE\fR,
\fBGL_VERTEX_ATTRIB_ARRAY_STRIDE\fR,
\fBGL_VERTEX_ATTRIB_ARRAY_TYPE\fR,
\fBGL_VERTEX_ATTRIB_ARRAY_NORMALIZED\fR,
\fBGL_VERTEX_ATTRIB_ARRAY_INTEGER\fR,
\fBGL_VERTEX_ATTRIB_ARRAY_DIVISOR\fR, or
\fBGL_CURRENT_VERTEX_ATTRIB\fR\&.
.RE
.PP
\fIparams\fR
.RS 4
Returns tha axed data\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglGetVertexAttrib\fR
returns in
\fIparams\fR
the value of a generic vertex attribute parameter\&. Da generic vertex attribute ta be queried is specified by
\fIindex\fR, n' tha parameta ta be queried is specified by
\fIpname\fR\&.
.PP
Da accepted parameta names is as bigs up:
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\fR
.RS 4
.sp
\fIparams\fR
returns a single value, tha name of tha buffer object currently bound ta tha bindin point correspondin ta generic vertex attribute array
\fIindex\fR\&. If no buffer object is bound, 0 is returned\&. Da initial value is 0\&.
.RE
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_ENABLED\fR
.RS 4
.sp
\fIparams\fR
returns a single value dat is non\-zero (true) if tha vertex attribute array for
\fIindex\fR
is enabled n' 0 (false) if it is disabled\&. Da initial value is
\fBGL_FALSE\fR\&.
.RE
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_SIZE\fR
.RS 4
.sp
\fIparams\fR
returns a single value, tha size of tha vertex attribute array for
\fIindex\fR\&. Da size is tha number of joints fo' each element of tha vertex attribute array, n' it is ghon be 1, 2, 3, or 4\&. Da initial value is 4\&.
.RE
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_STRIDE\fR
.RS 4
.sp
\fIparams\fR
returns a single value, tha array stride fo' (number of bytes between successive elements in) tha vertex attribute array for
\fIindex\fR\& fo' realz. A value of 0 indicates dat tha array elements is stored sequentially up in memory\&. Da initial value is 0\&.
.RE
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_TYPE\fR
.RS 4
.sp
\fIparams\fR
returns a single value, a symbolic constant indicatin tha array type fo' tha vertex attribute array for
\fIindex\fR\&. Possible joints are
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_INT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_FLOAT\fR, and
\fBGL_DOUBLE\fR\&. Da initial value is
\fBGL_FLOAT\fR\&.
.RE
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_NORMALIZED\fR
.RS 4
.sp
\fIparams\fR
returns a single value dat is non\-zero (true) if fixed\-point data types fo' tha vertex attribute array indicated by
\fIindex\fR
are normalized when they is converted ta floatin point, n' 0 (false) otherwise\&. Da initial value is
\fBGL_FALSE\fR\&.
.RE
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_INTEGER\fR
.RS 4
.sp
\fIparams\fR
returns a single value dat is non\-zero (true) if fixed\-point data types fo' tha vertex attribute array indicated by
\fIindex\fR
have integer data types, n' 0 (false) otherwise\&. Da initial value is 0 (\fBGL_FALSE\fR)\&.
.RE
.PP
\fBGL_VERTEX_ATTRIB_ARRAY_DIVISOR\fR
.RS 4
.sp
\fIparams\fR
returns a single value dat is tha frequency divisor used fo' instanced rendering\&. Right back up in yo muthafuckin ass. See
\fBglVertexAttribDivisor\fR()\&. Da initial value is 0\&.
.RE
.PP
\fBGL_CURRENT_VERTEX_ATTRIB\fR
.RS 4
.sp
\fIparams\fR
returns four joints dat represent tha current value fo' tha generic vertex attribute specified by index\&. Generic vertex attribute 0 is unique up in dat it has no current state, so a error is ghon be generated if
\fIindex\fR
is 0\&. Da initial value fo' all other generic vertex attributes is (0,0,0,1)\&.
.sp
\fBglGetVertexAttribdv\fR
and
\fBglGetVertexAttribfv\fR
return tha current attribute joints as four single\-precision floating\-point joints;
\fBglGetVertexAttribiv\fR
readz dem as floating\-point joints n' converts dem ta four integer joints;
\fBglGetVertexAttribIiv\fR
and
\fBglGetVertexAttribIuiv\fR
read n' return dem as signed or unsigned integer joints, respectively;
\fBglGetVertexAttribLdv\fR
readz n' returns dem as four double\-precision floating\-point joints\&.
.RE
.PP
All of tha parametas except
\fBGL_CURRENT_VERTEX_ATTRIB\fR
represent state stored up in tha currently bound vertex array object\&.
.SH "NOTES"
.PP
If a error is generated, no chizzle is made ta tha contents of
\fIparams\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIpname\fR
is not
\fBGL_CURRENT_VERTEX_ATTRIB\fR
and there is no currently bound vertex array object\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIindex\fR
is pimped outa than or equal to
\fBGL_MAX_VERTEX_ATTRIBS\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIpname\fR
is not a accepted value\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIindex\fR
is 0 and
\fIpname\fR
is
\fBGL_CURRENT_VERTEX_ATTRIB\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_VERTEX_ATTRIBS\fR
.PP
\fBglGetVertexAttribPointerv\fR()
with arguments
\fIindex\fR
and
\fBGL_VERTEX_ATTRIB_ARRAY_POINTER\fR
.SH "SEE ALSO"
.PP
\fBglBindAttribLocation\fR(),
\fBglBindBuffer\fR(),
\fBglDisableVertexAttribArray\fR(),
\fBglEnableVertexAttribArray\fR(),
\fBglVertexAttrib\fR(),
\fBglVertexAttribDivisor\fR(),
\fBglVertexAttribPointer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2005 3Dlabs Inc\&. Ltd\&. Copyright
\(co
2010 Khronos Group\&. This material may be distributed subject ta tha terms n' conditions set forth up in tha Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "AUTHORS"
.PP
\fBopengl\&.org\fR
