'\" t
.\" Copyright 1999 Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
.\"
.\" Permission is hereby granted, free of charge, ta any thug obtainin a
.\" copy of dis software n' associated documentation filez (the "Software"),
.\" ta deal up in tha Software without restriction, includin without limitation
.\" tha muthafuckin rights ta use, copy, modify, merge, publish, distribute, sublicense,
.\" and/or push copiez of tha Software, n' ta permit peeps ta whom the
.\" Software is furnished ta do so, subject ta tha followin conditions:
.\"
.\" Da above copyright notice n' dis permission notice (includin tha next
.\" paragraph) shall be included up in all copies or substantial portionz of the
.\" Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
.\" THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
.\" FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
.\" DEALINGS IN THE SOFTWARE.
.\"
.TH XkbApplyCompatMapToKey 3 "libX11 1.6.1" "X Version 11" "XKB FUNCTIONS"
.SH NAME
XkbApplyCompatMapToKey \- Apply tha freshly smoked up compatibilitizzle mappin ta a individual 
key ta git its semantics updated
.SH SYNOPSIS
.HP
.B Bool XkbApplyCompatMapToKey
.BI "(\^XkbDescPtr " "xkb" "\^,"
.BI "KeyCode " "key" "\^,"
.BI "XkbChangesPtr " "changes" "\^);"
.if n .ti +5n
.if t .ti +.5i
.SH ARGUMENTS
.TP
.I \- xkb
keyboard description ta be updated
.TP
.I \- key
key ta be updated
.TP
.I \- chizzles
notes chizzlez ta tha Xkb keyboard description
.SH DESCRIPTION
.LP
.I XkbApplyCompatMapToKey 
essentially performs tha operation busted lyrics bout up in Core Keyboard Mappin ta Xkb 
Keyboard Mappin Transformation ta a specific key. This thugged-out shiznit tha behavior, 
actions, repeat status, n' virtual modifier bindingz of tha key.

.B Core Keyboard Mappin ta Xkb Keyboard Mappin Transformation

When a cold-ass lil core protocol keyboard mappin request is received by tha server, tha 
serverz core keyboard map is updated, n' then tha Xkb map maintained by tha 
server is updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Because a cold-ass lil client may have explicitly configured a shitload of tha 
Xkb keyboard mappin up in tha server, dis automatic regeneration of tha Xkb 
keyboard mappin from tha core protocol keyboard mappin should not modify any 
componentz of tha Xkb keyboard mappin dat was explicitly set by a cold-ass lil client. Da 
client must set explicit override controls ta prevent dis from goin down (see 
Explicit Components-Avoidin Automatic Remappin by tha Server). Da core-to-Xkb 
mappin is done as bigs up:

.B Explicit Components-Avoidin Automatic Remappin by tha Server

Whenever a cold-ass lil client remaps tha keyboard rockin core protocol requests, Xkb examines 
the map ta determine likely default joints fo' tha components dat cannot be 
specified rockin tha core protocol.

This automatic remappin might replace definitions explicitly axed by a 
application, so tha Xkb keyboard description defines a explicit components mask 
for each key fo' realz. Any aspectz of tha automatic remappin listed up in tha explicit 
components mask fo' a key is not chizzled by tha automatic keyboard mapping. 

Da explicit components masks is held up in tha 
.I explicit 
field of tha server map, which be a array indexed by keycode. Each entry up in 
this array be a mask dat be a funky-ass bitwise inclusive OR of tha joints shown up in Table 
1.

.TS
c s s
l l l
l l lw(3i).
Table 1 Explicit Component Masks
_
Bit up in Explicit Mask	Value	Protects Against
_
ExplicitKeyType1	(1<<0)	T{
Automatic determination of tha key type associated wit Group1.
T}
ExplicitKeyType2	(1<<1)	T{
Automatic determination of tha key type associated wit Group2.
T}
ExplicitKeyType3	(1<<2)	T{
Automatic determination of tha key type associated wit Group3.
T}
ExplicitKeyType4	(1<<3)	T{
Automatic determination of tha key type associated wit Group4.
T}
ExplicitInterpret	(1<<4)	T{
Application of any of tha fieldz of a symbol interpretation ta tha key up in 
question.
T}
ExplicitAutoRepeat	(1<<5)	T{
Automatic determination of auto-repeat status fo' tha key, as specified up in a 
symbol interpretation.
T}
ExplicitBehavior	(1<<6)	T{
Automatic assignment of tha XkbKB_Lock behavior ta tha key, if tha 
XkbSI_LockingKey flag is set up in a symbol interpretation.
T}
ExplicitVModMap	(1<<7)	T{
Automatic determination of tha virtual modifier map fo' tha key based on tha 
actions assigned ta tha key n' tha symbol interpretations dat match tha key.
T}
.TE
.TP 4
1.
Map tha symbols from tha keys up in tha core keyboard map ta crews n' symbols on 
keys up in tha Xkb keyboard map. Da core keyboard mappin iz of fixed width, so 
each key up in tha core mappin has tha same ol' dirty number of symbols associated wit dat shit. 
Da Xkb mappin allows a gangbangin' finger-lickin' different number of symbols ta be associated wit each 
key; dem symbols may be divided tha fuck into a gangbangin' finger-lickin' different number of crews (1-4) fo' 
each key. For each key, dis process therefore involves partitionin tha fixed 
number of symbols from tha core mappin tha fuck into a set of variable-length crews 
with a variable number of symbols up in each group. For example, if tha core 
protocol map iz of width five, tha partizzle fo' one key might result up in one 
group wit two symbols n' another wit three symbols fo' realz. A different key might 
result up in two crews wit two symbols plus a third crew wit one symbol. Da 
core protocol map requires at least two symbols up in each of tha straight-up original gangsta two groups.
.TP 4
1a.
For each chizzled key, determine tha number of crews represented up in tha freshly smoked up core 
keyboard map. This thangs up in dis biatch up in a tentatizzle crew count fo' each key up in tha Xkb 
map.
.TP 4
1b.
For each chizzled key, determine tha number of symbols up in each of tha crews 
found up in step 1a. There is one explicit override control associated wit each of 
the four possible crews fo' each Xkb key, ExplicitKeyType1 all up in 
ExplicitKeyType4. If no explicit override control is set fo' a group, tha number 
of symbols used fo' dat crew from tha core map is two.  If tha explicit 
override control is set fo' a crew on tha key, tha number of symbols used fo' 
that Xkb crew from tha core map is tha width of tha Xkb crew wit one 
exception: cuz of tha core protocol requirement fo' at least two symbols up in 
each of crews one n' two, tha number of symbols used fo' crews one n' two is 
the maximum of 2 or tha width of tha Xkb group.
.TP 4
1c.
For each chizzled key, assign tha symbols up in tha core map ta tha appropriate 
group on tha key. If tha total number of symbols required by tha Xkb map fo' a 
particular key needz mo' symbols than tha core protocol map gotz nuff, tha 
additionizzle symbols is taken ta be NoSymbol keysyms appended ta tha end of tha 
core set. If tha core map gotz nuff mo' symbols than is needed by tha Xkb map, 
trailin symbols up in tha core map is discarded. Y'all KNOW dat shit, muthafucka! In tha absence of a explicit 
override fo' crew one or two, symbols is assigned up in order by group; tha straight-up original gangsta 
symbols up in tha core map is assigned ta crew one, up in order, followed by crew 
two, n' so on. I aint talkin' bout chicken n' gravy biatch. For example, if tha core map contained eight symbols per key, 
and a particular Xkb map contained 2 symbols fo' G1 n' G2 n' three fo' G3, tha 
symbols would be assigned as (G is group, L is shift level):
.nf

              G1L1 G1L2 G2L1 G2L2 G3L1 G3L2 G3L3
                    
.fi                    
If a explicit override control is set fo' crew one or two, tha symbols is 
taken from tha core set up in a somewhat different order n' shit. Da first four symbols 
from tha core set is assigned ta G1L1, G1L2, G2L1, G2L2, respectively. If crew 
one requires mo' symbols, they is taken next, n' then any additionizzle symbols 
needed by crew two. Group three n' four symbols is taken up in complete sequence 
afta crew two. For example, a key wit four crews n' three symbols up in each 
group would take symbols from tha core set up in tha followin order:
.nf

   G1L1 G1L2 G2L1 G2L2 G1L3 G2L3 G3L1 G3L2 G3L3 G4L1 G4L2 G4L3
         
.fi         
As previously noted, tha core protocol map requires at lease two symbols up in 
groups one n' two. Because of this, if a explicit override control fo' a Xkb 
key is set n' crew one n' / or crew two iz of width one, it aint possible 
to generate tha symbols taken from tha core protocol set n' assigned ta 
posizzle G1L2 n' / or G2L2.
.TP 4
1d.
For each crew on each chizzled key, assign a key type appropriate fo' tha 
symbols up in tha group.
.TP 4
1e.
For each chizzled key, remove any empty or redundant groups.

At dis point, tha crews n' they associated symbols done been assigned ta tha 
correspondin key definitions up in tha Xkb map.
.TP 4
2.
Apply symbol interpretations ta modify key operation. I aint talkin' bout chicken n' gravy biatch. This phase is straight-up 
skipped if tha  ExplicitInterpret override control bit is set up in tha explicit 
controls mask fo' tha Xkb key (see Explicit Components-Avoidin Automatic 
Remappin by tha Server).
.TP 4
2a.
For each symbol on each chizzled key, attempt ta match tha symbol n' modifiers 
from tha Xkb map ta a symbol interpretation describin how tha fuck ta generate tha 
symbol.
.TP 4
2b.
When a match is found up in step 2a, apply tha symbol interpretation ta chizzle tha 
semantics associated wit tha symbol up in tha Xkb key map. If no match is found, 
apply a thugged-out default interpretation.
.LP
Da symbol interpretations used up in step 2 is configurable n' may be specified 
usin XkbSymInterpretRec structures referenced by tha sym_interpret field of a 
XkbCompatMapRec.

.B Symbol Interpretations - tha XkbSymInterpretRec Structure

Symbol interpretations is used ta guide tha X server when it modifies tha Xkb 
keymap up in step 2 fo' realz. An initial set of symbol interpretations is loaded by tha 
server when it starts fo' realz. A client may add freshly smoked up ones rockin XkbSetCompatMap.

Symbol interpretations result up in key semantics bein set. When a symbol 
interpretation be applied, tha followin componentz of server key event 
processin may be modified fo' tha particular key involved:
.nf

    Virtual modifier map
    Auto repeat
    Key behavior (may be set ta XkbKB_Lock)
    Key action
            
.fi            
Da XkbSymInterpretRec structure specifies a symbol interpretation:
.nf
 
typedef struct {
    KeySym        sym;         /\(** keysym of interest or NULL */
    unsigned char flags;       /\(** XkbSI_AutoRepeat, XkbSI_LockingKey */
    unsigned char match;       /\(** specifies how tha fuck modz is interpreted */
    unsigned char mods;        /\(** modifier bits, correspond ta eight real modifiers */
    unsigned char virtual_mod; /\(** 1 modifier ta add ta key virtual mod map */
    XkbAnyAction  act;         /\(** action ta bind ta symbol posizzle on key */
} XkbSymInterpretRec,*XkbSymInterpretPtr;
    
.fi    
If sym aint NULL, it limits tha symbol interpretation ta keys on which dat 
particular keysym is selected by tha modifiers matchin tha criteria specified 
by 
.I modz 
and 
.I match. 
If 
.I sym 
is NULL, tha interpretation may be applied ta any symbol selected on a key when 
the modifiers match tha criteria specified by 
.I modz 
and 
.I match.

.I match 
must be one of tha joints shown up in Table 2 n' specifies how tha fuck tha real modifiers 
specified up in 
.I modz 
are ta be interpreted.

.TS
c s s
l l l
l l lw(3i).
Table 2 Symbol Interpretation Match Criteria
_
Match Criteria	Value	Effect
_
XkbSI_NoneOf	(0)	T{
None of tha bits dat is on up in modz can be set yo, but other bits can be.
T}
XkbSI_AnyOfOrNone	(1)	T{
Zero or mo' of tha bits dat is on up in modz can be set, as well as others.
T}
XkbSI_AnyOf	(2)	T{
One or mo' of tha bits dat is on up in modz can be set, as well as any others.
T}
XkbSI_AllOf	(3)	T{
All of tha bits dat is on up in modz must be set yo, but others may be set as well.
T}
XkbSI_Exactly	(4)	T{
All of tha bits dat is on up in modz must be set, n' no other bits may be set.
T}
.TE

In addizzle ta tha above bits, 
.I match 
may contain tha XkbSI_LevelOneOnly bit, up in which case tha modifier match 
criteria specified by 
.I modz 
and 
.I match 
applies only if 
.I sym 
is up in level one of its group; otherwise, 
.I modz 
and 
.I match 
are ignored n' tha symbol matches a cold-ass lil condizzle where no modifiers is set.
.nf

\&#define XkbSI_LevelOneOnly  (0x80)  /\(** use modz + match only if sym is level 1 */
    
.fi    
If no matchin symbol interpretation is found, tha server uses a thugged-out default 
interpretation where:
.nf

    sym =           0
    flags =         XkbSI_AutoRepeat
    match =         XkbSI_AnyOfOrNone
    modz =          0
    virtual_mod =   XkbNoModifier
    act =           SA_NoAction
    
.fi    
When a matchin symbol interpretation is found up in step 2a, tha interpretation is 
applied ta modify tha Xkb map as bigs up.

Da 
.I act 
field specifies a single action ta be bound ta tha symbol position; any key event dat selects tha symbol 
causes tha action ta be taken. I aint talkin' bout chicken n' gravy biatch. Valid actions is defined up in Key Actions.

If tha Xkb keyboard map fo' tha key aint gots its ExplicitVModMap control set, tha XkbSI_LevelOneOnly bit 
and symbol posizzle is examined. Y'all KNOW dat shit, muthafucka! If tha XkbSI_LevelOneOnly bit aint set in
.I match 
or tha symbol is up in posizzle G1L1, tha 
.I virtual_mod 
field is examined. Y'all KNOW dat shit, muthafucka! If 
.I virtual_mod 
is not XkbNoModifier, 
.I virtual_mod 
specifies a single virtual modifier ta be added ta tha virtual modifier map fo' tha key. 
.I virtual_mod 
is specified as a index up in tha range [0..15]. 

If tha matchin symbol is up in posizzle G1L1 of tha key, two bits up in tha flags field potentially specify 
additionizzle behavior modifications:
.nf

\&#define  XkbSI_AutoRepeat  (1<<0)  /\(** key repeats if sym is up in posizzle G1L1 */
\&#define  XkbSI_LockingKey  (1<<1)  /\(** set KB_Lock behavior if sym is up in psn G1L1 */
    
.fi
If tha Xkb keyboard map fo' tha key aint gots its ExplicitAutoRepeat control set, its auto repeat behavior 
is set based on tha value of tha XkbSI_AutoRepeat bit. If tha XkbSI_AutoRepeat bit is set, tha auto-repeat 
behavior of tha key is turned on; otherwise, it is turned off.

If tha Xkb keyboard map fo' tha key aint gots its ExplicitBehavior control set, its lockin behavior is 
set based on tha value of tha XkbSI_LockingKey bit. If XkbSI_LockingKey is set, tha key behavior is set ta 
KB_Lock; otherwise, it is turned off.
.SH "SEE ALSO"
.BR XkbKeyAction (3),
.BR XkbKeyActionEntry (3),
.BR XkbKeyActionsPtr (3),
.BR XkbKeyHasActions (3),
.BR XkbKeyNumActions (3)
