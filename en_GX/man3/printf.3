.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Earlier versionz of dis page hyped up tha present text.
.\" Dat shiznit was derived from a Berkeley page wit version
.\"       @(#)printf.3    6.14 (Berkeley) 7/30/91
.\" converted fo' Linux by faith@cs.unc.edu, updated by
.\" Helmut.Geyer@iwr.uni-heidelberg.de, agulbra@troll.no n' Bruno Haible.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1999-11-25 aeb - Rewritten, rockin SUSv2 n' C99.
.\" 2000-07-26 jsm28@hermes.cam.ac.uk - three lil' small-ass fixes
.\" 2000-10-16 jsm28@hermes.cam.ac.uk - mo' fixes
.\"
.TH PRINTF 3  2013-03-05 "GNU" "Linux Programmerz Manual"
.SH NAME
printf, fprintf, sprintf, snprintf, vprintf, vfprintf, vsprintf,
vsnprintf \- formatted output conversion
.SH SYNOPSIS
.B #include <stdio.h>
.sp
.BI "int printf(const char *" format ", ...);"
.br
.BI "int fprintf(FILE *" stream ", const char *" format ", ...);"
.br
.BI "int sprintf(char *" str ", const char *" format ", ...);"
.br
.BI "int snprintf(char *" str ", size_t " size ", const char *" format ", ...);"
.sp
.B #include <stdarg.h>
.sp
.BI "int vprintf(const char *" format ", va_list " ap );
.br
.BI "int vfprintf(FILE *" stream ", const char *" format ", va_list " ap );
.br
.BI "int vsprintf(char *" str ", const char *" format ", va_list " ap );
.br
.BI "int vsnprintf(char *" str ", size_t " size ", const char *" format \
", va_list " ap );
.sp
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR snprintf (),
.BR vsnprintf ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I "cc -std=c99"
.RE
.ad
.SH DESCRIPTION
Da functions up in the
.BR printf ()
family produce output accordin ta a
.I format
as busted lyrics bout below.
Da functions
.BR printf ()
and
.BR vprintf ()
write output to
.IR stdout ,
the standard output stream;
.BR fprintf ()
and
.BR vfprintf ()
write output ta tha given output
.IR stream ;
.BR sprintf (),
.BR snprintf (),
.BR vsprintf ()
and
.BR vsnprintf ()
write ta tha characta string
.IR str .
.PP
Da functions
.BR snprintf ()
and
.BR vsnprintf ()
write at most
.I size
bytes (includin tha terminatin null byte (\(aq\e0\(aq)) to
.IR str .
.PP
Da functions
.BR vprintf (),
.BR vfprintf (),
.BR vsprintf (),
.BR vsnprintf ()
are equivalent ta tha functions
.BR printf (),
.BR fprintf (),
.BR sprintf (),
.BR snprintf (),
respectively, except dat they is called wit a
.I va_list
instead of a variable number of arguments.
These functions do not call the
.I va_end
macro.
Because they invoke the
.I va_arg
macro, tha value of
.I ap
is undefined afta tha call.
See
.BR stdarg (3).
.PP
These eight functions write tha output under tha control of a
.I format
strin dat specifies how tha fuck subsequent arguments (or arguments accessed via
the variable-length argument facilitizzles of
.BR stdarg (3))
are converted fo' output.

C99 n' POSIX.1-2001 specify dat tha thangs up in dis biatch is undefined if a cold-ass lil call to
.BR sprintf (),
.BR snprintf (),
.BR vsprintf (),
or
.BR vsnprintf ()
would cause copyin ta take place between objects dat overlap
(e.g., if tha target strang array n' one of tha supplied input arguments
refer ta tha same buffer).
See NOTES.
.SS Return value
Upon successful return, these functions return tha number of characters
printed (excludin tha null byte used ta end output ta strings).

Da functions
.BR snprintf ()
and
.BR vsnprintf ()
do not write mo' than
.I size
bytes (includin tha terminatin null byte (\(aq\e0\(aq)).
If tha output was truncated cuz of dis limit then tha return value
is tha number of charactas (excludin tha terminatin null byte)
which would done been freestyled ta tha final strang if enough space
had been available.
Thus, a return value of
.I size
or mo' means dat tha output was truncated.
(See also below under NOTES.)

If a output error is encountered, a wack value is returned.
.SS Format of tha format string
Da format strang be a cold-ass lil characta string, beginnin n' ending
in its initial shift state, if any.
Da format strang is composed of zero or mo' directives: ordinary
charactas (not
.BR % ),
which is copied unchanged ta tha output stream;
and conversion justifications, each of which thangs up in dis biatch up in fetchin zero or
more subsequent arguments.
Each conversion justification is introduced by
the character
.BR % ,
and endz wit a
.IR "conversion specifier" .
In between there may be (in dis order) zero or more
.IR flags ,
an optionizzle minimum
.IR "field width" ,
an optional
.I precision
and a optional
.IR "length modifier" .

Da arguments must correspond properly (afta type promotion) wit the
conversion specifier.
By default, tha arguments is used up in tha order
given, where each \(aq*\(aq n' each conversion specifier asks fo' tha next
argument (and it be a error if insufficiently nuff arguments is given).
One can also specify explicitly which argument is taken,
at each place where a argument is required, by freestylin "%m$" instead
of \(aq%\(aq n' "*m$" instead of \(aq*\(aq,
where tha decimal integer m denotes
the posizzle up in tha argument list of tha desired argument, indexed starting
from 1.
Thus,
.in +4n
.nf

printf("%*d", width, num);

.fi
.in
and
.in +4n
.nf

printf("%2$*1$d", width, num);

.fi
.in
are equivalent.
Da second steez allows repeated references ta the
same argument.
Da C99 standard do not include tha steez rockin \(aq$\(aq,
which be reppin tha Single UNIX Justification.
If tha steez using
\(aq$\(aq is used, it must be used all up in fo' all conversions takin an
argument n' all width n' precision arguments yo, but it may be mixed
with "%%" formats which do not consume a argument.
There may be no
gaps up in tha numberz of arguments specified rockin \(aq$\(aq; fo' example, if
arguments 1 n' 3 is specified, argument 2 must also be specified
somewhere up in tha format string.

For some numeric conversions a radix characta ("decimal point") or
thousands' groupin characta is used.
Da actual characta used
dependz on the
.B LC_NUMERIC
part of tha locale.
Da POSIX locale
uses \(aq.\(aq as radix character, n' aint gots a groupin character.
Thus,
.in +4n
.nf

    printf("%\(aq.2f", 1234567.89);

.fi
.in
results up in "1234567.89" up in tha POSIX locale, up in "1234567,89" up in the
nl_NL locale, n' up in "1.234.567,89" up in tha da_DK locale.
.SS Da flag characters
Da characta % is followed by zero or mo' of tha followin flags:
.TP
.B #
Da value should be converted ta a "alternate form".
For
.B o
conversions, tha straight-up original gangsta characta of tha output strang is made zero
(by prefixin a 0 if dat shiznit was not zero already).
For
.B x
and
.B X
conversions, a nonzero result has tha strang "0x" (or "0X" for
.B X
conversions) prepended ta dat shit.
For
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
and
.B G
conversions, tha result will always contain a thugged-out decimal point, even if no
digits follow it (normally, a thugged-out decimal point appears up in tha thangs up in dis biatch of them
conversions only if a gangbangin' finger-lickin' digit bigs up).
For
.B g
and
.B G
conversions, trailin zeros is not removed from tha result as they would
otherwise be.
For other conversions, tha result is undefined.
.TP
.B \&0
Da value should be zero padded.
For
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
and
.B G
conversions, tha converted value is padded on tha left wit zeros rather
than blanks.
If the
.B \&0
and
.B \-
flags both appear, the
.B \&0
flag is ignored.
If a precision is given wit a numeric conversion
.RB ( d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
and
.BR X ),
the
.B \&0
flag is ignored.
For other conversions, tha behavior is undefined.
.TP
.B \-
Da converted value is ta be left adjusted on tha field boundary.
(Da default is right justification.)
Except for
.B n
conversions, tha converted value is padded on tha right wit blanks, rather
than on tha left wit blanks or zeros.
A
.B \-
overrides a
.B \&0
if both is given.
.TP
.B \(aq \(aq
(a space) A blank should be left before a positizzle number
(or empty string) produced by a signed conversion.
.TP
.B +
A sign (+ or \-) should always be placed before a number produced by a signed
conversion.
By default a sign is used only fo' wack numbers.
A
.B +
overrides a space if both is used.
.PP
Da five flag charactas above is defined up in tha C standard.
Da SUSv2 specifies one further flag character.
.TP
.B \(aq
For decimal conversion
.RB ( i ,
.BR d ,
.BR u ,
.BR f ,
.BR F ,
.BR g ,
.BR G )
the output is ta be grouped wit thousands' groupin characters
if tha locale shiznit indicates any.
Note dat nuff versions of
.BR gcc (1)
cannot parse dis option n' will issue a warning.
SUSv2 do not
include \fI%\(aqF\fP.
.PP
glibc 2.2 addz one further flag character.
.TP
.B I
For decimal integer conversion
.RB ( i ,
.BR d ,
.BR u )
the output uses tha localez alternatizzle output digits, if any.
For example, since glibc 2.2.3 dis will give Arabic-Indic digits
in tha Persian ("fa_IR") locale.
.\" outdigits keyword up in locale file
.SS Da field width
An optionizzle decimal digit strang (with nonzero first digit) specifying
a minimum field width.
If tha converted value has fewer characters
than tha field width, it is ghon be padded wit spaces on tha left
(or right, if tha left-adjustment flag has been given).
Instead of a thugged-out decimal digit strang one may write "*" or "*m$"
(for some decimal integer \fIm\fP) ta specify dat tha field width
is given up in tha next argument, or up in tha \fIm\fP-th argument, respectively,
which must be of type
.IR int .
A wack field width is taken as a \(aq\-\(aq flag followed by a
positizzle field width.
In no case do a nonexistent or lil' small-ass field width cause truncation of a
field; if tha result of a cold-ass lil conversion is wider than tha field width, the
field is expanded ta contain tha conversion result.
.SS Da precision
An optionizzle precision, up in tha form of a period (\(aq.\(aq)  followed by an
optionizzle decimal digit string.
Instead of a thugged-out decimal digit strang one may write "*" or "*m$"
(for some decimal integer m) ta specify dat tha precision
is given up in tha next argument, or up in tha m-th argument, respectively,
which must be of type
.IR int .
If tha precision is given as just \(aq.\(aq, or tha precision is negative,
the precision is taken ta be zero.
This gives tha minimum number of digits ta step tha fuck up for
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
and
.B X
conversions, tha number of digits ta step tha fuck up afta tha radix characta for
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
and
.B F
conversions, tha maximum number of dope digits for
.B g
and
.B G
conversions, or tha maximum number of charactas ta be printed from a
strin for
.B s
and
.B S
conversions.
.SS Da length modifier
Here, "integer conversion" standz for
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
.B X
conversion.
.TP
.B hh
A followin integer conversion correspondz ta a
.I signed char
or
.I unsigned char
argument, or a gangbangin' following
.B n
conversion correspondz ta a pointa ta a
.I signed char
argument.
.TP
.B h
A followin integer conversion correspondz ta a
.I short int
or
.I unsigned short int
argument, or a gangbangin' following
.B n
conversion correspondz ta a pointa ta a
.I short int
argument.
.TP
.B l
(ell) A followin integer conversion correspondz ta a
.I long int
or
.I unsigned long int
argument, or a gangbangin' following
.B n
conversion correspondz ta a pointa ta a
.I long int
argument, or a gangbangin' following
.B c
conversion correspondz ta a
.I wint_t
argument, or a gangbangin' following
.B s
conversion correspondz ta a pointa to
.I wchar_t
argument.
.TP
.B ll
(ell-ell).
A followin integer conversion correspondz ta a
.I long long int
or
.I unsigned long long int
argument, or a gangbangin' following
.B n
conversion correspondz ta a pointa ta a
.I long long int
argument.
.TP
.B L
A following
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
or
.B G
conversion correspondz ta a
.I long double
argument.
(C99 allows %LF yo, but SUSv2 do not.)
.TP
.B q
("quad". 4.4BSD n' Linux libc5 only.
Don't use.)
This be a synonym for
.BR ll .
.TP
.B j
A followin integer conversion correspondz ta an
.I intmax_t
or
.I uintmax_t
argument.
.TP
.B z
A followin integer conversion correspondz ta a
.I size_t
or
.I ssize_t
argument.
(Linux libc5 has
.B Z
with dis meaning.
Don't use dat shit.)
.TP
.B t
A followin integer conversion correspondz ta a
.I ptrdiff_t
argument.
.PP
Da SUSv2 knows bout only tha length modifiers
.B h
(in
.BR hd ,
.BR hi ,
.BR ho ,
.BR hx ,
.BR hX ,
.BR hn )
and
.B l
(in
.BR ld ,
.BR li ,
.BR lo ,
.BR lx ,
.BR lX ,
.BR ln ,
.BR lc ,
.BR ls )
and
.B L
(in
.BR Le ,
.BR LE ,
.BR Lf ,
.BR Lg ,
.BR LG ).
.SS Da conversion specifier
A characta dat specifies tha type of conversion ta be applied.
Da conversion specifiers n' they meanings are:
.TP
.BR d ", " i
The
.I int
argument is converted ta signed decimal notation.
Da precision, if any, gives tha minimum number of digits
that must appear; if tha converted value requires fewer digits, it is
padded on tha left wit zeros.
Da default precision is 1.
When 0 is printed wit a explicit precision 0, tha output is empty.
.TP
.BR o ", " u ", " x ", " X
The
.I "unsigned int"
argument is converted ta unsigned octal
.RB ( o ),
unsigned decimal
.RB ( u ),
or unsigned hexadecimal
.RB ( x
and
.BR X )
notation.
Da letters
.B abcdef
are used for
.B x
conversions; tha letters
.B ABCDEF
are used for
.B X
conversions.
Da precision, if any, gives tha minimum number of digits
that must appear; if tha converted value requires fewer digits, it is
padded on tha left wit zeros.
Da default precision is 1.
When 0 is printed wit a explicit precision 0, tha output is empty.
.TP
.BR e ", " E
The
.I double
argument is rounded n' converted up in tha style
.RB [\-]d \&. ddd e \(+-dd
where there is one digit before tha decimal-point characta n' tha number
of digits afta it is equal ta tha precision; if tha precision is missing,
it is taken as 6; if tha precision is zero, no decimal-point character
appears.
An
.B E
conversion uses tha letter
.B E
(rather than
.BR e )
to introduce tha exponent.
Da exponent always gotz nuff at least two
digits; if tha value is zero, tha exponent is 00.
.TP
.BR f ", " F
The
.I double
argument is rounded n' converted ta decimal notation up in tha style
.RB [\-]ddd \&. ddd,
where tha number of digits afta tha decimal-point characta is equal to
the precision justification.
If tha precision is missing, it is taken as
6; if tha precision is explicitly zero, no decimal-point characta appears.
If a thugged-out decimal point appears, at least one digit appears before dat shit.

(Da SUSv2 do not know about
.B F
and say dat characta strang representations fo' infinitizzle n' NaN
may be made available.
Da C99 standard specifies "[\-]inf" or "[\-]infinity"
for infinity, n' a strang startin wit "nan" fo' NaN, up in tha case of
.B f
conversion, n' "[\-]INF" or "[\-]INFINITY" or "NAN*" up in tha case of
.B F
conversion.)
.TP
.BR g ", " G
The
.I double
argument is converted up in style
.B f
or
.B e
(or
.B F
or
.B E
for
.B G
conversions).
Da precision specifies tha number of dope digits.
If tha precision is missing, 6 digits is given; if tha precision is zero,
it is treated as 1.
Style
.B e
is used if tha exponent from its conversion is less than \-4 or pimped outer
than or equal ta tha precision.
Trailin zeros is removed from the
fractionizzle part of tha result; a thugged-out decimal point appears only if it is
followed by at least one digit.
.TP
.BR a ", " A
(C99; not up in SUSv2) For
.B a
conversion, the
.I double
argument is converted ta hexadecimal notation (usin tha lettas abcdef)
in tha style
.RB [\-] 0x h \&. hhhh p \(+-;
for
.B A
conversion tha prefix
.BR 0X ,
the lettas ABCDEF, n' tha exponent separator
.B P
is used.
There is one hexadecimal digit before tha decimal point,
and tha number of digits afta it is equal ta tha precision.
Da default precision suffices fo' a exact representation of tha value
if a exact representation up in base 2 exists
and otherwise is sufficiently big-ass ta distinguish jointz of type
.IR double .
Da digit before tha decimal point is unspecified fo' nonnormalized
numbers, n' nonzero but otherwise unspecified fo' normalized numbers.
.TP
.B c
If no
.B l
modifier is present, the
.I int
argument is converted ta an
.IR "unsigned char" ,
and tha resultin characta is written.
If an
.B l
modifier is present, the
.I wint_t
(wide character) argument is converted ta a multibyte sequence by a cold-ass lil call
to the
.BR wcrtomb (3)
function, wit a cold-ass lil conversion state startin up in tha initial state, n' the
resultin multibyte strang is written.
.TP
.B s
If no
.B l
modifier is present: The
.I "const char\ *"
argument is sposed ta fuckin be a pointa ta a array of characta type (pointer
to a string).
Charactas from tha array is freestyled up ta (but not
including) a terminatin null byte (\(aq\\0\(aq);
if a precision is specified, no mo' than tha number specified
are written.
If a precision is given, no null byte need be present;
if tha precision aint specified, or is pimped outa than tha size of the
array, tha array must contain a terminatin null byte.

If an
.B l
modifier is present: The
.I "const wchar_t\ *"
argument is sposed ta fuckin be a pointa ta a array of wide characters.
Wide charactas from tha array is converted ta multibyte characters
(each by a cold-ass lil call ta the
.BR wcrtomb (3)
function, wit a cold-ass lil conversion state startin up in tha initial state before
the first wide character), up ta n' includin a terminatin null
wide character.
Da resultin multibyte charactas is freestyled up to
(but not including) tha terminatin null byte.
If a precision is
specified, no mo' bytes than tha number specified is written yo, but
no partial multibyte charactas is written.
Note dat tha precision
determines tha number of
.I bytes
written, not tha number of
.I wide characters
or
.IR "screen positions" .
Da array must contain a terminatin null wide character, unless a
precision is given n' it is so lil' small-ass dat tha number of bytes written
exceedz it before tha end of tha array is reached.
.TP
.B C
(Not up in C99 yo, but up in SUSv2.)
Synonym for
.BR lc .
Don't use.
.TP
.B S
(Not up in C99 yo, but up in SUSv2.)
Synonym for
.BR ls .
Don't use.
.TP
.B p
The
.I "void\ *"
pointa argument is printed up in hexadecimal (as if by
.B %#x
or
.BR  %#lx ).
.TP
.B n
Da number of charactas freestyled so far is stored tha fuck into tha integer
indicated by the
.I "int\ *"
(or variant) pointa argument.
No argument is converted.
.TP
.B m
(Glibc extension.)
Print output of
.IR strerror(errno) .
No argument is required.
.TP
.B %
A \(aq%\(aq is written.
No argument is converted.
Da complete conversion
specification is \(aq%%\(aq.
.SH CONFORMING TO
The
.BR fprintf (),
.BR printf (),
.BR sprintf (),
.BR vprintf (),
.BR vfprintf (),
and
.BR vsprintf ()
functions conform ta C89 n' C99.
The
.BR snprintf ()
and
.BR vsnprintf ()
functions conform ta C99.
.PP
Concernin tha return value of
.BR snprintf (),
SUSv2 n' C99 contradict each other: when
.BR snprintf ()
is called with
.IR size =0
then SUSv2 stipulates a unspecified return value less than 1,
while C99 allows
.I str
to be NULL up in dis case, n' gives tha return value (as always)
as tha number of charactas dat would done been freestyled up in case
the output strang has been big-ass enough.
.PP
Linux libc4 knows bout tha five C standard flags.
It knows bout tha length modifiers \fBh\fP, \fBl\fP, \fBL\fP,
and tha conversions
\fBc\fP, \fBd\fP, \fBe\fP, \fBE\fP, \fBf\fP, \fBF\fP,
\fBg\fP, \fBG\fP, \fBi\fP, \fBn\fP, \fBo\fP, \fBp\fP,
\fBs\fP, \fBu\fP, \fBx\fP, n' \fBX\fP,
where \fBF\fP be a synonym fo' \fBf\fP.
Additionally, it accepts \fBD\fP, \fBO\fP, n' \fBU\fP as synonyms
for \fBld\fP, \fBlo\fP, n' \fBlu\fP.
(This is bad, n' caused straight-up bugs later, when
support fo' \fB%D\fP disappeared.)
No locale-dependent radix character,
no thousands' separator, no NaN or infinity, no "%m$" n' "*m$".
.PP
Linux libc5 knows bout tha five C standard flags n' tha \(aq flag,
locale, "%m$" n' "*m$".
It knows bout tha length modifiers \fBh\fP, \fBl\fP, \fBL\fP,
\fBZ\fP, n' \fBq\fP yo, but accepts \fBL\fP n' \fBq\fP
both fo' \fIlong double\fP n' fo' \fIlong long int\fP (this be a funky-ass bug).
It no longer recognizes \fBF\fP, \fBD\fP, \fBO\fP, n' \fBU\fP,
but addz tha conversion character
.BR m ,
which outputs
.IR strerror(errno) .
.PP
glibc 2.0 addz conversion charactas \fBC\fP n' \fBS\fP.
.PP
glibc 2.1 addz length modifiers \fBhh\fP, \fBj\fP, \fBt\fP, n' \fBz\fP
and conversion charactas \fBa\fP n' \fBA\fP.
.PP
glibc 2.2 addz tha conversion characta \fBF\fP wit C99 semantics,
and tha flag characta \fBI\fP.
.SH NOTES
Some programs imprudently rely on code like fuckin tha following

    sprintf(buf, "%s some further text", buf);

to append text to
.IR buf .
But fuck dat shiznit yo, tha word on tha street is dat tha standardz explicitly note dat tha thangs up in dis biatch is undefined
if source n' destination buffers overlap when calling
.BR sprintf (),
.BR snprintf (),
.BR vsprintf (),
and
.BR vsnprintf ().
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7075
Dependin on tha version of
.BR gcc (1)
used, n' tha compila options employed, calls like fuckin tha above will
.B not
produce tha expected thangs up in dis biatch.

Da glibc implementation of tha functions
.BR snprintf ()
and
.BR vsnprintf ()
conforms ta tha C99 standard, dat is, behaves as busted lyrics bout above,
since glibc version 2.1.
Until glibc 2.0.6 they would return \-1
when tha output was truncated.
.\" .SH HISTORY
.\" UNIX V7 defines tha three routines
.\" .BR printf (),
.\" .BR fprintf (),
.\" .BR sprintf (),
.\" n' has tha flag \-, tha width or precision *, tha length modifier l,
.\" n' tha conversions doxfegcsu, n' also D,O,U,X as synonyms fo' ld,lo,lu,lx.
.\" This is still legit fo' 2.9.1BSD yo, but 2.10BSD has tha flags
.\" #, + n' <space> n' no longer mentions D,O,U,X.
.\" 2.11BSD has
.\" .BR vprintf (),
.\" .BR vfprintf (),
.\" .BR vsprintf (),
.\" n' warns not ta use D,O,U,X.
.\" 4.3BSD Reno has tha flag 0, tha length modifiers h n' L,
.\" n' tha conversions n, p, E, G, X (with current meaning)
.\" n' deprecates D,O,U.
.\" 4.4BSD introduces tha functions
.\" .BR snprintf ()
.\" and
.\" .BR vsnprintf (),
.\" n' tha length modifier q.
.\" FreeBSD also has functions
.\" .BR asprintf ()
.\" and
.\" .BR vasprintf (),
.\" dat allocate a funky-ass buffer big-ass enough for
.\" .BR sprintf ().
.\" In glibc there be functions
.\" .BR dprintf ()
.\" and
.\" .BR vdprintf ()
.\" dat print ta a gangbangin' file descriptor instead of a stream.
.SH BUGS
Because
.BR sprintf ()
and
.BR vsprintf ()
assume a arbitrarily long string, callaz must be careful not ta overflow
the actual space; dis is often impossible ta assure.
Note dat tha length
of tha strings produced is locale-dependent n' hard as fuck ta predict.
Use
.BR snprintf ()
and
.BR vsnprintf ()
instead (or
.BR asprintf (3)
and
.BR vasprintf (3)).
.PP
Linux libc4.[45] aint gots a
.BR snprintf (),
but serves up a libbsd dat gotz nuff an
.BR snprintf ()
equivalent to
.BR sprintf (),
that is, one dat ignores the
.I size
argument.
Thus, tha use of
.BR snprintf ()
with early libc4 leadz ta straight-up securitizzle problems.
.PP
Code such as
.BI printf( foo );
often indicates a funky-ass bug, since
.I foo
may contain a % character.
If
.I foo
be reppin untrusted user input, it may contain \fB%n\fP, causin the
.BR printf ()
call ta write ta memory n' bustin a securitizzle hole.
.\" .PP
.\" Some floating-point conversions under early libc4
.\" caused memory leaks.
.SH EXAMPLE
To print
.I Pi
to five decimal places:
.in +4n
.nf

#include <math.h>
#include <stdio.h>
fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.fi
.in
.PP
To print a thugged-out date n' time up in tha form "Sunday, July 3, 10:02",
where
.I weekday
and
.I month
are pointas ta strings:
.in +4n
.nf

#include <stdio.h>
fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
        weekday, month, day, hour, min);
.fi
.in
.PP
Many ghettos use tha day-month-year order.
Hence, a internationalized version must be able ta print
the arguments up in a order specified by tha format:
.in +4n
.nf

#include <stdio.h>
fprintf(stdout, format,
        weekday, month, day, hour, min);

.fi
.in
where
.I format
dependz on locale, n' may permute tha arguments.
With tha value:
.in +4n
.nf

"%1$s, %3$d. Y'all KNOW dat shit, muthafucka! %2$s, %4$d:%5$.2d\en"

.fi
.in
one might obtain "Sonntag, 3. Juli, 10:02".
.PP
To allocate a sufficiently big-ass strang n' print tha fuck into it
(code erect fo' both glibc 2.0 n' glibc 2.1):
.PP
If truncation occurs up in glibc versions prior ta 2.0.6, dis is treated as an
error instead of bein handled gracefully.
.nf

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

char *
make_message(const char *fmt, ...)
{
    int n;
    int size = 100;     /* Guess we need no mo' than 100 bytes */
    char *p, *np;
    va_list ap;

    if ((p = malloc(size)) == NULL)
        return NULL;

    while (1) {

        /* Try ta print up in tha allocated space */

        va_start(ap, fmt);
        n = vsnprintf(p, size, fmt, ap);
        va_end(ap);

        /* Peep error code */

        if (n < 0)
            return NULL;

        /* If dat worked, return tha strang */

        if (n < size)
            return p;

        /* Else try again n' again n' again wit mo' space */

        size = n + 1;       /* Precisely what tha fuck is needed */


        if ((np = realloc (p, size)) == NULL) {
            free(p);
            return NULL;
        } else {
            p = np;
        }
    }
}
.fi
.SH SEE ALSO
.BR printf (1),
.BR asprintf (3),
.BR dprintf (3),
.BR scanf (3),
.BR setlocale (3),
.BR wcrtomb (3),
.BR wprintf (3),
.BR locale (5)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
