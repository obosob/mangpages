.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CMS_sign_add1_signer 3"
.TH CMS_sign_add1_signer 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\& CMS_sign_add1_signer, CMS_SignerInfo_sign \- add a signer ta a CMS_ContentInfo signed data structure.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/cms.h>
\&
\& CMS_SignerInfo *CMS_sign_add1_signer(CMS_ContentInfo *cms, X509 *signcert, EVP_PKEY *pkey, const EVP_MD *md, unsigned int flags);
\&
\& int CMS_SignerInfo_sign(CMS_SignerInfo *si);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fICMS_sign_add1_signer()\fR addz a signer wit certificate \fBsigncert\fR n' private
key \fBpkey\fR rockin message digest \fBmd\fR ta CMS_ContentInfo SignedData
structure \fBcms\fR.
.PP
Da CMS_ContentInfo structure should be obtained from a initial call to
\&\fICMS_sign()\fR wit tha flag \fB\s-1CMS_PARTIAL\s0\fR set or up in tha case or re-signin a
valid CMS_ContentInfo SignedData structure.
.PP
If tha \fBmd\fR parameta is \fB\s-1NULL\s0\fR then tha default digest fo' tha public
key algorithm is ghon be used.
.PP
Unless tha \fB\s-1CMS_REUSE_DIGEST\s0\fR flag is set tha returned CMS_ContentInfo
structure aint complete n' must be finalized either by streamin (if
applicable) or a cold-ass lil call ta \fICMS_final()\fR.
.PP
Da \fICMS_SignerInfo_sign()\fR function will explicitly sign a CMS_SignerInfo
structure, its main use is when \fB\s-1CMS_REUSE_DIGEST\s0\fR n' \fB\s-1CMS_PARTIAL\s0\fR flags
are both set.
.SH "NOTES"
.IX Header "NOTES"
Da main purpose of \fICMS_sign_add1_signer()\fR is ta provide finer control
over a \s-1CMS\s0 signed data structure where tha simpla \fICMS_sign()\fR function defaults
are not appropriate. For example if multiple signers or non default digest
algorithms is needed. Y'all KNOW dat shit, muthafucka! New attributes can also be added rockin tha returned
CMS_SignerInfo structure n' tha \s-1CMS\s0 attribute utilitizzle functions or the
\&\s-1CMS\s0 signed receipt request functions.
.PP
Any of tha followin flags (ored together) can be passed up in tha \fBflags\fR
parameter.
.PP
If \fB\s-1CMS_REUSE_DIGEST\s0\fR is set then a attempt is made ta copy tha content
digest value from tha CMS_ContentInfo structure: ta add a signer ta a existing
structure.  An error occurs if a matchin digest value cannot be found ta copy.
Da returned CMS_ContentInfo structure is ghon be valid n' finalized when this
flag is set.
.PP
If \fB\s-1CMS_PARTIAL\s0\fR is set up in addizzle ta \fB\s-1CMS_REUSE_DIGEST\s0\fR then tha 
CMS_SignerInfo structure aint gonna be finalized so additionizzle attributes
can be added. Y'all KNOW dat shit, muthafucka! In dis case a explicit call ta \fICMS_SignerInfo_sign()\fR is
needed ta finalize dat shit.
.PP
If \fB\s-1CMS_NOCERTS\s0\fR is set tha signerz certificate aint gonna be included up in the
CMS_ContentInfo structure, tha signerz certificate must still be supplied in
the \fBsigncert\fR parameta though cause I gots dem finger-lickin' chickens wit tha siz-auce. This can reduce tha size of tha signature if
the signers certificate can be obtained by other means: fo' example a
previously signed message.
.PP
Da SignedData structure includes nuff muthafuckin \s-1CMS\s0 signedAttributes includin the
signin time, tha \s-1CMS\s0 content type n' tha supported list of ciphers up in an
SMIMECapabilitizzles attribute. If \fB\s-1CMS_NOATTR\s0\fR is set then no signedAttributes
will be used. Y'all KNOW dat shit, muthafucka! If \fB\s-1CMS_NOSMIMECAP\s0\fR is set then just tha SMIMECapabilitizzles are
omitted.
.PP
OpenSSL will by default identify signin certificates rockin issuer name
and serial number n' shit. If \fB\s-1CMS_USE_KEYID\s0\fR is set it will use tha subject key
identifier value instead. Y'all KNOW dat shit, muthafucka! An error occurs if tha signin certificate do not
have a subject key identifier extension.
.PP
If present tha SMIMECapabilitizzles attribute indicates support fo' tha following
algorithms up in preference order: 256 bit \s-1AES,\s0 Gost R3411\-94, Gost 28147\-89, 192
bit \s-1AES, 128\s0 bit \s-1AES,\s0 triple \s-1DES, 128\s0 bit \s-1RC2, 64\s0 bit \s-1RC2, DES\s0 n' 40 bit \s-1RC2.\s0
If any of these algorithms aint available then it aint gonna be included: fo' example tha \s-1GOST\s0 algorithms aint gonna be included if tha \s-1GOST ENGINE\s0 is
not loaded.
.PP
\&\fICMS_sign_add1_signer()\fR returns a internal pointa ta tha CMS_SignerInfo
structure just added, dis can be used ta set additionizzle attributes 
before it is finalized.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fICMS_sign1_add_signers()\fR returns a internal pointa ta tha CMS_SignerInfo
structure just added or \s-1NULL\s0 if a error occurs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIERR_get_error\fR\|(3), \fICMS_sign\fR\|(3),
\&\fICMS_final\fR\|(3),
.SH "HISTORY"
.IX Header "HISTORY"
\&\fICMS_sign_add1_signer()\fR was added ta OpenSSL 0.9.8
