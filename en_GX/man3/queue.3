.\" Copyright (c) 1993
.\"     Da Regentz of tha Universitizzle of California.  All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"     This thang includes software pimped by tha Universitizzle of
.\"     California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)queue.3     8.2 (Berkeley) 1/24/94
.\"
.\" hch, 2002-03-25
.\" 2007-12-08, mtk, Converted from mdoc ta playa macros
.\"
.TH QUEUE 3 2007-12-28 "Linux" "Linux Programmerz Manual"
.SH NAME
LIST_ENTRY, LIST_HEAD, LIST_INIT, LIST_INSERT_AFTER,
LIST_INSERT_HEAD, LIST_REMOVE, TAILQ_ENTRY, TAILQ_HEAD,
TAILQ_INIT, TAILQ_INSERT_AFTER, TAILQ_INSERT_HEAD, TAILQ_INSERT_TAIL,
TAILQ_REMOVE, CIRCLEQ_ENTRY, CIRCLEQ_HEAD, CIRCLEQ_INIT,
CIRCLEQ_INSERT_AFTER, CIRCLEQ_INSERT_BEFORE,
CIRCLEQ_INSERT_HEAD, CIRCLEQ_INSERT_TAIL,
CIRCLEQ_REMOVE \- implementationz of lists, tail queues, n' circular queues
.SH SYNOPSIS
.nf
.B #include <sys/queue.h>

.BI "LIST_ENTRY(" TYPE );
.BI "LIST_HEAD(" HEADNAME ", " TYPE );
.BI "LIST_INIT(LIST_HEAD *" head );
.BI "LIST_INSERT_AFTER(LIST_ENTRY *" listelm ", "
.BI "                TYPE *" elm ", LIST_ENTRY " NAME );
.BI "LIST_INSERT_HEAD(LIST_HEAD *" head ", "
.BI "                TYPE *" elm ", LIST_ENTRY " NAME );
.BI "LIST_REMOVE(TYPE *" elm ", LIST_ENTRY " NAME );

.BI "TAILQ_ENTRY(" TYPE );
.BI "TAILQ_HEAD("HEADNAME ", " TYPE );
.BI "TAILQ_INIT(TAILQ_HEAD *" head );
.BI "TAILQ_INSERT_AFTER(TAILQ_HEAD *" head ", TYPE *" listelm ", "
.BI "                TYPE *" elm ", TAILQ_ENTRY " NAME );
.BI "TAILQ_INSERT_HEAD(TAILQ_HEAD *" head ", "
.BI "                TYPE *" elm ", TAILQ_ENTRY " NAME );
.BI "TAILQ_INSERT_TAIL(TAILQ_HEAD *" head ", "
.BI "                TYPE *" elm ", TAILQ_ENTRY " NAME );
.BI "TAILQ_REMOVE(TAILQ_HEAD *" head ", TYPE *" elm ", TAILQ_ENTRY " NAME );

.BI CIRCLEQ_ENTRY( TYPE );
.BI "CIRCLEQ_HEAD(" HEADNAME ", " TYPE );
.BI "CIRCLEQ_INIT(CIRCLEQ_HEAD *" head );
.BI "CIRCLEQ_INSERT_AFTER(CIRCLEQ_HEAD *" head ", TYPE *" listelm ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_INSERT_BEFORE(CIRCLEQ_HEAD *" head ", TYPE *" listelm ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_INSERT_HEAD(CIRCLEQ_HEAD *" head ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_INSERT_TAIL(CIRCLEQ_HEAD *" head ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.BI "CIRCLEQ_REMOVE(CIRCLEQ_HEAD *" head ", "
.BI "                TYPE *" elm ", CIRCLEQ_ENTRY " NAME );
.fi
.SH DESCRIPTION
These macros define n' operate on three typez of data structures:
lists, tail queues, n' circular queues.
All three structures support tha followin functionality:
.sp
.RS 4
.PD 0
.IP * 4
Insertion of a freshly smoked up entry all up in tha head of tha list.
.IP *
Insertion of a freshly smoked up entry afta any element up in tha list.
.IP *
Removal of any entry up in tha list.
.IP *
Forward traversal all up in tha list.
.PD
.RE
.PP
Lists is tha simplest of tha three data structures n' support
only tha above functionality.

Tail queues add tha followin functionality:
.RS 4
.IP * 4
Entries can be added all up in tha end of a list.
.RE
.PP
However:
.sp
.RS 4
.PD 0
.IP 1. 4
All list insertions n' removals must specify tha head of tha list.
.IP 2.
Each head entry requires two pointas rather than one.
.IP 3.
Code size be bout 15% pimped outa n' operations run bout 20% slower
than lists.
.PD
.RE
.PP
Circular queues add tha followin functionality:
.sp
.RS 4
.PD 0
.IP * 4
Entries can be added all up in tha end of a list.
.IP *
Entries can be added before another entry.
.IP *
They may be traversed backward, from tail ta head.
.PD
.RE
.PP
However:
.sp
.RS 4
.PD 0
.IP 1. 4
All list insertions n' removals must specify tha head of tha list.
.IP 2.
Each head entry requires two pointas rather than one.
.IP 3.
Da termination condizzle fo' traversal is mo' complex.
.IP 4.
Code size be bout 40% pimped outa n' operations run bout 45% slower
than lists.
.PD
.RE
.PP
In tha macro definitions,
.I TYPE
is tha name of a user-defined structure,
that must contain a gangbangin' field of type
.BR "LIST_ENTRY" ,
.BR "TAILQ_ENTRY" ,
or
.BR "CIRCLEQ_ENTRY" ,
named
.IR NAME .
Da argument
.I HEADNAME
is tha name of a user-defined structure dat must be declared
usin tha macros
.BR "LIST_HEAD" ,
.BR "TAILQ_HEAD" ,
or
.BR "CIRCLEQ_HEAD" .
See tha examplez below fo' further explanation of how tha fuck these
macros is used.
.SS Lists
A list is headed by a structure defined by the
.B LIST_HEAD
macro.
This structure gotz nuff a single pointa ta tha straight-up original gangsta element
on tha list.
Da elements is doubly linked so dat a arbitrary element can be
removed without traversin tha list.
New elements can be added ta tha list afta a existin element or
at tha head of tha list.
A
.B LIST_HEAD
structure is declared as bigs up:
.in +4n
.nf

LIST_HEAD(HEADNAME, TYPE) head;
.fi
.in
.PP
where
.I HEADNAME
is tha name of tha structure ta be defined, and
.I TYPE
is tha type of tha elements ta be linked tha fuck into tha list.
A pointa ta tha head of tha list can lata be declared as:
.in +4n
.nf

struct HEADNAME *headp;
.fi
.in
.PP
(Da names
.IR "head"
and
.IR "headp"
are user selectable.)
.PP
Da macro
.B LIST_ENTRY
declares a structure dat connects tha elements in
the list.
.PP
Da macro
.B LIST_INIT
initializes tha list referenced by
.IR head .
.PP
Da macro
.B LIST_INSERT_HEAD
inserts tha freshly smoked up element
.I elm
at tha head of tha list.
.PP
Da macro
.B LIST_INSERT_AFTER
inserts tha freshly smoked up element
.I elm
afta tha element
.IR listelm .
.PP
Da macro
.B LIST_REMOVE
removes tha element
.I elm
from tha list.
.SS List example
.nf
LIST_HEAD(listhead, entry) head;
struct listhead *headp;                 /* List head. Y'all KNOW dat shit, muthafucka! */
struct entry {
    ...
    LIST_ENTRY(entry) entries;          /* List. */
    ...
} *n1, *n2, *np;

LIST_INIT(&head);                       /* Initialize tha list. */

n1 = malloc(sizeof(struct entry));      /* Insert all up in tha head. Y'all KNOW dat shit, muthafucka! */
LIST_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));      /* Insert afta n' shit. */
LIST_INSERT_AFTER(n1, n2, entries);
                                        /* Forward traversal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. */
for (np = head.lh_first; np != NULL; np = np\->entries.le_next)
    np\-> ...

.\" FIXME http://sourceware.org/bugzilla/show_bug.cgi?id=1506
while (head.lh_first != NULL)           /* Delete. */
    LIST_REMOVE(head.lh_first, entries);
.fi
.SS Tail queues
A tail queue is headed by a structure defined by the
.B TAILQ_HEAD
macro.
This structure gotz nuff a pair of pointers,
one ta tha straight-up original gangsta element up in tha tail queue n' tha other to
the last element up in tha tail queue.
Da elements is doubly linked so dat a arbitrary element can be
removed without traversin tha tail queue.
New elements can be added ta tha tail queue afta a existin element,
at tha head of tha tail queue, or all up in tha end of tha tail queue.
A
.B TAILQ_HEAD
structure is declared as bigs up:
.in +4n
.nf

TAILQ_HEAD(HEADNAME, TYPE) head;
.fi
.in
.PP
where
.IR "HEADNAME"
is tha name of tha structure ta be defined, and
.IR "TYPE"
is tha type of tha elements ta be linked tha fuck into tha tail queue.
A pointa ta tha head of tha tail queue can lata be declared as:
.in +4n
.nf

struct HEADNAME *headp;
.fi
.in
.PP
(Da names
.IR "head"
and
.IR "headp"
are user selectable.)
.PP
Da macro
.B TAILQ_ENTRY
declares a structure dat connects tha elements in
the tail queue.
.PP
Da macro
.B TAILQ_INIT
initializes tha tail queue referenced by
.IR head .
.PP
Da macro
.B TAILQ_INSERT_HEAD
inserts tha freshly smoked up element
.I elm
at tha head of tha tail queue.
.PP
Da macro
.B TAILQ_INSERT_TAIL
inserts tha freshly smoked up element
.I elm
at tha end of tha tail queue.
.PP
Da macro
.B TAILQ_INSERT_AFTER
inserts tha freshly smoked up element
.I elm
afta tha element
.IR listelm .
.PP
Da macro
.B TAILQ_REMOVE
removes tha element
.I elm
from tha tail queue.
.SS Tail queue example
.nf
TAILQ_HEAD(tailhead, entry) head;
struct tailhead *headp;                 /* Tail queue head. Y'all KNOW dat shit, muthafucka! */
struct entry {
    ...
    TAILQ_ENTRY(entry) entries;         /* Tail queue. */
    ...
} *n1, *n2, *np;

TAILQ_INIT(&head);                      /* Initialize tha queue. */

n1 = malloc(sizeof(struct entry));      /* Insert all up in tha head. Y'all KNOW dat shit, muthafucka! */
TAILQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));      /* Insert all up in tha tail. */
TAILQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));      /* Insert afta n' shit. */
TAILQ_INSERT_AFTER(&head, n1, n2, entries);
                                        /* Forward traversal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. */
for (np = head.tqh_first; np != NULL; np = np\->entries.tqe_next)
    np\-> ...
                                        /* Delete. */
while (head.tqh_first != NULL)
    TAILQ_REMOVE(&head, head.tqh_first, entries);
.fi
.SS Circular queues
A circular queue is headed by a structure defined by the
.B CIRCLEQ_HEAD
macro.
This structure gotz nuff a pair of pointers,
one ta tha straight-up original gangsta element up in tha circular queue n' tha other ta the
last element up in tha circular queue.
Da elements is doubly linked so dat a arbitrary element can be
removed without traversin tha queue.
New elements can be added ta tha queue afta a existin element,
before a existin element, all up in tha head of tha queue, or all up in tha end
of tha queue.
A
.B CIRCLEQ_HEAD
structure is declared as bigs up:
.in +4n
.nf

CIRCLEQ_HEAD(HEADNAME, TYPE) head;
.fi
.in
.PP
where
.IR "HEADNAME"
is tha name of tha structure ta be defined, and
.IR "TYPE"
is tha type of tha elements ta be linked tha fuck into tha circular queue.
A pointa ta tha head of tha circular queue can lata be declared as:
.in +4n
.nf

struct HEADNAME *headp;
.fi
.in
.PP
(Da names
.IR "head"
and
.IR "headp"
are user selectable.)
.PP
Da macro
.B CIRCLEQ_ENTRY
declares a structure dat connects tha elements in
the circular queue.
.PP
Da macro
.B CIRCLEQ_INIT
initializes tha circular queue referenced by
.IR head .
.PP
Da macro
.B CIRCLEQ_INSERT_HEAD
inserts tha freshly smoked up element
.I elm
at tha head of tha circular queue.
.PP
Da macro
.B CIRCLEQ_INSERT_TAIL
inserts tha freshly smoked up element
.I elm
at tha end of tha circular queue.
.PP
Da macro
.B CIRCLEQ_INSERT_AFTER
inserts tha freshly smoked up element
.I elm
afta tha element
.IR listelm .
.PP
Da macro
.B CIRCLEQ_INSERT_BEFORE
inserts tha freshly smoked up element
.I elm
before tha element
.IR listelm .
.PP
Da macro
.B CIRCLEQ_REMOVE
removes tha element
.I elm
from tha circular queue.
.SS Circular queue example
.nf
CIRCLEQ_HEAD(circleq, entry) head;
struct circleq *headp;              /* Circular queue head. Y'all KNOW dat shit, muthafucka! */
struct entry {
    ...
    CIRCLEQ_ENTRY(entry) entries;   /* Circular queue. */
    ...
} *n1, *n2, *np;

CIRCLEQ_INIT(&head);                /* Initialize tha circular queue. */

n1 = malloc(sizeof(struct entry));  /* Insert all up in tha head. Y'all KNOW dat shit, muthafucka! */
CIRCLEQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));  /* Insert all up in tha tail. */
CIRCLEQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));  /* Insert afta n' shit. */
CIRCLEQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));  /* Insert before. */
CIRCLEQ_INSERT_BEFORE(&head, n1, n2, entries);
                                    /* Forward traversal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. */
for (np = head.cqh_first; np != (void *)&head;
        np = np\->entries.cqe_next)
    np\-> ...
                                    /* Reverse traversal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. */
for (np = head.cqh_last; np != (void *)&head; np = np\->entries.cqe_prev)
    np\-> ...
                                    /* Delete. */
while (head.cqh_first != (void *)&head)
    CIRCLEQ_REMOVE(&head, head.cqh_first, entries);
.fi
.SH CONFORMING TO
Not up in POSIX.1-2001.
Present on tha BSDs.
The
queue functions first rocked up in
4.4BSD.
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
