.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BIO_s_accept 3"
.TH BIO_s_accept 3 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
BIO_s_accept, BIO_set_accept_port, BIO_get_accept_port,
BIO_set_nbio_accept, BIO_set_accept_bios, BIO_set_bind_mode,
BIO_get_bind_mode, BIO_do_accept \- accept BIO
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/bio.h>
\&
\& BIO_METHOD *BIO_s_accept(void);
\&
\& long BIO_set_accept_port(BIO *b, char *name);
\& char *BIO_get_accept_port(BIO *b);
\&
\& BIO *BIO_new_accept(char *host_port);
\&
\& long BIO_set_nbio_accept(BIO *b, int n);
\& long BIO_set_accept_bios(BIO *b, char *bio);
\&
\& long BIO_set_bind_mode(BIO *b, long mode);
\& long BIO_get_bind_mode(BIO *b, long dummy);
\&
\& #define BIO_BIND_NORMAL                0
\& #define BIO_BIND_REUSEADDR_IF_UNUSED   1
\& #define BIO_BIND_REUSEADDR             2
\&
\& int BIO_do_accept(BIO *b);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIBIO_s_accept()\fR returns tha accept \s-1BIO\s0 method. Y'all KNOW dat shit, muthafucka! This be a wrapper
round tha platformz \s-1TCP/IP\s0 socket accept routines.
.PP
Usin accept BIOs, \s-1TCP/IP\s0 connections can be accepted n' data
transferred rockin only \s-1BIO\s0 routines. In dis way any platform
specific operations is hidden by tha \s-1BIO\s0 abstraction.
.PP
Read n' write operations on a accept \s-1BIO\s0 will big-ass up I/O
on tha underlyin connection. I aint talkin' bout chicken n' gravy biatch. If no connection is established
and tha port (see below) is set up properly then tha \s-1BIO\s0
waits fo' a incomin connection.
.PP
Accept BIOs support \fIBIO_puts()\fR but not \fIBIO_gets()\fR.
.PP
If tha close flag is set on a accept \s-1BIO\s0 then any active
connection on dat chain is shutdown n' tha socket closed when
the \s-1BIO\s0 is freed.
.PP
Callin \fIBIO_reset()\fR on a accept \s-1BIO\s0 will close any active
connection n' reset tha \s-1BIO\s0 tha fuck into a state where it awaits another
incomin connection.
.PP
\&\fIBIO_get_fd()\fR n' \fIBIO_set_fd()\fR can be called ta retrieve or set
the accept socket. Right back up in yo muthafuckin ass. See \fIBIO_s_fd\fR\|(3)
.PP
\&\fIBIO_set_accept_port()\fR uses tha strang \fBname\fR ta set tha accept
port. Da port is represented as a strang of tha form \*(L"host:port\*(R",
where \*(L"host\*(R" is tha intercourse ta use n' \*(L"port\*(R" is tha port.
Either or both joints can be \*(L"*\*(R" which is interpreted as meaning
any intercourse or port respectively. \*(L"port\*(R" has tha same ol' dirty syntax
as tha port specified up in \fIBIO_set_conn_port()\fR fo' connect BIOs,
that is it can be a numerical port strang or a strang ta lookup
usin \fIgetservbyname()\fR n' a strang table.
.PP
\&\fIBIO_new_accept()\fR combines \fIBIO_new()\fR n' \fIBIO_set_accept_port()\fR into
a single call: dat is it creates a freshly smoked up accept \s-1BIO\s0 wit port
\&\fBhost_port\fR.
.PP
\&\fIBIO_set_nbio_accept()\fR sets tha accept socket ta blockin mode
(the default) if \fBn\fR is 0 or non blockin mode if \fBn\fR is 1.
.PP
\&\fIBIO_set_accept_bios()\fR can be used ta set a cold-ass lil chain of BIOs which
will be duplicated n' prepended ta tha chain when a incoming
connection is received. Y'all KNOW dat shit, muthafucka! This is useful if, fo' example, a 
bufferin or \s-1SSL BIO\s0 is required fo' each connection. I aint talkin' bout chicken n' gravy biatch. The
chain of BIOs must not be freed afta dis call, they will
be automatically freed when tha accept \s-1BIO\s0 is freed.
.PP
\&\fIBIO_set_bind_mode()\fR n' \fIBIO_get_bind_mode()\fR set n' retrieve
the current bind mode. If \s-1BIO_BIND_NORMAL \s0(the default) is set
then another socket cannot be bound ta tha same port. If
\&\s-1BIO_BIND_REUSEADDR\s0 is set then other sockets can bind ta the
same port. If \s-1BIO_BIND_REUSEADDR_IF_UNUSED\s0 is set then and
attempt is first made ta use \s-1BIO_BIN_NORMAL,\s0 if dis fails
and tha port aint up in use then a second attempt is made
usin \s-1BIO_BIND_REUSEADDR.\s0
.PP
\&\fIBIO_do_accept()\fR serves two functions. When it is first
called, afta tha accept \s-1BIO\s0 has been setup, it will attempt
to create tha accept socket n' bind a address ta dat shit. Right back up in yo muthafuckin ass. Second
and subsequent calls ta \fIBIO_do_accept()\fR will await a incoming
connection, or request a retry up in non blockin mode.
.SH "NOTES"
.IX Header "NOTES"
When a accept \s-1BIO\s0 be all up in tha end of a cold-ass lil chain it will await an
incomin connection before processin I/O calls. When a accept
\&\s-1BIO\s0 aint at then end of a cold-ass lil chain it passes I/O calls ta tha next
\&\s-1BIO\s0 up in tha chain.
.PP
When a cold-ass lil connection is established a freshly smoked up socket \s-1BIO\s0 is pimped for
the connection n' appended ta tha chain. I aint talkin' bout chicken n' gravy biatch. That is tha chain is now
accept\->socket. This effectively means dat attemptin I/O on
an initial accept socket will await a incomin connection then
perform I/O on dat shit.
.PP
If any additionizzle BIOs done been set rockin \fIBIO_set_accept_bios()\fR
then they is placed between tha socket n' tha accept \s-1BIO,\s0
that is tha chain is ghon be accept\->otherbios\->socket.
.PP
If a server wishes ta process multiple connections (as is normally
the case) then tha accept \s-1BIO\s0 must be made available fo' further
incomin connections. This can be done by waitin fo' a cold-ass lil connection and
then calling:
.PP
.Vb 1
\& connection = BIO_pop(accept);
.Ve
.PP
Afta dis call \fBconnection\fR will contain a \s-1BIO\s0 fo' tha recently
established connection n' \fBaccept\fR will now be a single \s-1BIO\s0
again which can be used ta await further incomin connections.
If no further connections is ghon be accepted tha \fBaccept\fR can
be freed rockin \fIBIO_free()\fR.
.PP
If only a single connection is ghon be processed it is possible to
perform I/O rockin tha accept \s-1BIO\s0 itself. This is often undesirable
however cuz tha accept \s-1BIO\s0 will still accept additionizzle incoming
connections. This can be resolved by rockin \fIBIO_pop()\fR (see above)
and freein up tha accept \s-1BIO\s0 afta tha initial connection.
.PP
If tha underlyin accept socket is non-blockin n' \fIBIO_do_accept()\fR is
called ta await a incomin connection it is possible for
\&\fIBIO_should_io_special()\fR wit tha reason \s-1BIO_RR_ACCEPT.\s0 If dis happens
then it be a indication dat a accept attempt would block: tha application
should take appropriate action ta wait until tha underlyin socket has
accepted a cold-ass lil connection n' retry tha call.
.PP
\&\fIBIO_set_accept_port()\fR, \fIBIO_get_accept_port()\fR, \fIBIO_set_nbio_accept()\fR,
\&\fIBIO_set_accept_bios()\fR, \fIBIO_set_bind_mode()\fR, \fIBIO_get_bind_mode()\fR and
\&\fIBIO_do_accept()\fR is macros.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\s-1TBA\s0
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example accepts two connections on port 4444, sendz lyrics
down each n' finally closes both down.
.PP
.Vb 3
\& BIO *abio, *cbio, *cbio2;
\& ERR_load_crypto_strings();
\& abio = BIO_new_accept("4444");
\&
\& /* First call ta BIO_accept() sets up accept BIO */
\& if(BIO_do_accept(abio) <= 0) {
\&        fprintf(stderr, "Error settin up accept\en");
\&        ERR_print_errors_fp(stderr);
\&        exit(0);                
\& }
\&
\& /* Wait fo' incomin connection */
\& if(BIO_do_accept(abio) <= 0) {
\&        fprintf(stderr, "Error acceptin connection\en");
\&        ERR_print_errors_fp(stderr);
\&        exit(0);                
\& }
\& fprintf(stderr, "Connection 1 established\en");
\& /* Retrieve BIO fo' connection */
\& cbio = BIO_pop(abio);
\& BIO_puts(cbio, "Connection 1: Sendin up Data on initial connection\en");
\& fprintf(stderr, "Sent up data on connection 1\en");
\& /* Wait fo' another connection */
\& if(BIO_do_accept(abio) <= 0) {
\&        fprintf(stderr, "Error acceptin connection\en");
\&        ERR_print_errors_fp(stderr);
\&        exit(0);                
\& }
\& fprintf(stderr, "Connection 2 established\en");
\& /* Close accept BIO ta refuse further connections */
\& cbio2 = BIO_pop(abio);
\& BIO_free(abio);
\& BIO_puts(cbio2, "Connection 2: Sendin up Data on second\en");
\& fprintf(stderr, "Sent up data on connection 2\en");
\&
\& BIO_puts(cbio, "Connection 1: Second connection established\en");
\& /* Close tha two established connections */
\& BIO_free(cbio);
\& BIO_free(cbio2);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1TBA\s0
