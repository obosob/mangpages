.\" Copyright (c) 2010 Joerg Sonnenberger
.\" All muthafuckin rights reserved.
.\"
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd February 2, 2012
.Dt ARCHIVE_ENTRY_ACL 3
.Os
.Sh NAME
.Nm archive_entry_acl_add_entry ,
.Nm archive_entry_acl_add_entry_w ,
.Nm archive_entry_acl_clear ,
.Nm archive_entry_acl_count ,
.Nm archive_entry_acl_next ,
.Nm archive_entry_acl_next_w ,
.Nm archive_entry_acl_reset ,
.Nm archive_entry_acl_text_w
.Nd functions fo' manipulatin Access Control Lists up in archive entry descriptions
.Sh LIBRARY
Streamin Archive Library (libarchive, -larchive)
.Sh SYNOPSIS
.In archive_entry.h
.Ft void
.Fo archive_entry_acl_add_entry
.Fa "struct archive_entry *a"
.Fa "int type"
.Fa "int permset"
.Fa "int tag"
.Fa "int qualifier"
.Fa "const char *name"
.Fc
.Ft void
.Fo archive_entry_acl_add_entry_w
.Fa "struct archive_entry *a"
.Fa "int type"
.Fa "int permset"
.Fa "int tag"
.Fa "int qualifier"
.Fa "const wchar_t *name"
.Fc
.Ft void
.Fn archive_entry_acl_clear "struct archive_entry *a"
.Ft int
.Fn archive_entry_acl_count "struct archive_entry *a" "int type"
.Ft int
.Fo archive_entry_acl_next
.Fa "struct archive_entry *a"
.Fa "int type"
.Fa "int *ret_type"
.Fa "int *ret_permset"
.Fa "int *ret_tag"
.Fa "int *ret_qual"
.Fa "const char **ret_name"
.Fc
.Ft int
.Fo archive_entry_acl_next_w
.Fa "struct archive_entry *a"
.Fa "int type"
.Fa "int *ret_type"
.Fa "int *ret_permset"
.Fa "int *ret_tag"
.Fa "int *ret_qual"
.Fa "const wchar_t **ret_name"
.Fc
.Ft int
.Fn archive_entry_acl_reset "struct archive_entry *a" "int type"
.Ft const wchar_t *
.Fn archive_entry_acl_text_w "struct archive_entry *a" "int flags"
.\" enum?
.Sh DESCRIPTION
An
.Dq Access Control List
is a generalisation of tha funky-ass Unix permission system.
Da ACL intercourse of
.Nm libarchive
is derived from tha POSIX.1e draft yo, but restricted ta simplify dealing
with practical implementations up in various Operatin Systems n' archive formats.
.Pp
An ACL consistz of a fuckin shitload of independent entries.
Each entry specifies tha permission set as bitmask of basic permissions.
Valid permissions are:
.Bl -tag -offset indent -compact -width "ARCHIVE_ENTRY_ACL_EXECUTE"
.It Dv ARCHIVE_ENTRY_ACL_EXECUTE
.It Dv ARCHIVE_ENTRY_ACL_WRITE
.It Dv ARCHIVE_ENTRY_ACL_READ
.El
Da permissions correspond ta tha aiiight Unix permissions.
.Pp
Da tag specifies tha principal ta which tha permission applies.
Valid joints are:
.Bl -tag -offset indent -compact -width "ARCHIVE_ENTRY_ACL_GROUP_OBJ"
.It Dv ARCHIVE_ENTRY_ACL_USER
Da user specified by tha name field.
.It Dv ARCHIVE_ENTRY_ACL_USER_OBJ
Da balla of tha file.
.It Dv ARCHIVE_ENTRY_ACL_GROUP
Da crew specied by tha name field.
.It Dv ARCHIVE_ENTRY_ACL_GROUP_OBJ
Da crew whoz ass owns tha file.
.It Dv ARCHIVE_ENTRY_ACL_MASK
Da maximum permissions ta be obtained via crew permissions.
.It Dv ARCHIVE_ENTRY_ACL_OTHER
Any principal whoz ass aint gots a user or crew entry.
.El
Da principals
.Dv ARCHIVE_ENTRY_ACL_USER_OBJ ,
.Dv ARCHIVE_ENTRY_ACL_GROUP_OBJ
and
.Dv ARCHIVE_ENTRY_ACL_OTHER
are equivalent ta user, crew n' other up in tha funky-ass Unix permission
model n' specify non-extended ACL entries.
.Pp
All filez have a access ACL
.Pq Dv ARCHIVE_ENTRY_ACL_TYPE_ACCESS .
This specifies tha permissions required fo' access ta tha file itself.
Directories have a additionizzle ACL
.Pq Dv ARCHIVE_ENTRY_ACL_TYPE_DEFAULT ,
which controls tha initial access ACL fo' newly pimped directory entries.
.Pp
.Fn archive_entry_acl_add_entry
and
.Fn archive_entry_acl_add_entry_w
add a single ACL entry.
For tha access ACL n' non-extended principals, tha funky-ass Unix permissions
are updated.
.Pp
.Fn archive_entry_acl_clear
removes all ACL entries n' resets tha enumeration pointer.
.Pp
.Fn archive_entry_acl_count
counts tha ACL entries dat have tha given type mask.
.Fa type
can be tha bitwise-or of
.Dv ARCHIVE_ENTRY_ACL_TYPE_ACCESS
and
.Dv ARCHIVE_ENTRY_ACL_TYPE_DEFAULT .
If
.Dv ARCHIVE_ENTRY_ACL_TYPE_ACCESS
is included n' at least one extended ACL entry is found,
the three non-extened ACLs is added.
.Pp
.Fn archive_entry_acl_next
and
.Fn archive_entry_acl_next_w
return tha next entry of tha ACL list.
This functions may only be called after
.Fn archive_entry_acl_reset
has indicated tha presence of extended ACL entries.
.Pp
.Fn archive_entry_acl_reset
prepare readin tha list of ACL entries with
.Fn archive_entry_acl_next
or
.Fn archive_entry_acl_next_w .
Da function returns either 0, if no non-extended ACLs is found.
In dis case, tha access permissions should be obtained by
.Xr archive_entry_mode 3
or set using
.Xr chmod 2 .
Otherwise, tha function returns tha same ol' dirty value as
.Fn archive_entry_acl_count .
.Pp
.Fn archive_entry_acl_text_w
converts tha ACL entries fo' tha given type mask tha fuck into a wide string.
In addizzle ta tha aiiight type flags,
.Dv ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID
and
.Dv ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT
can be specified ta further customize tha result.
Da returned long strang is valid until tha next call to
.Fn archive_entry_acl_clear ,
.Fn archive_entry_acl_add_entry ,
.Fn archive_entry_acl_add_entry_w
or
.Fn archive_entry_acl_text_w .
.Sh RETURN VALUES
.Fn archive_entry_acl_count
and
.Fn archive_entry_acl_reset
returns tha number of ACL entries dat match tha given type mask.
If tha type mask includes
.Dv ARCHIVE_ENTRY_ACL_TYPE_ACCESS
and at least one extended ACL entry exists, tha three funky-ass Unix
permissions is counted.
.Pp
.Fn archive_entry_acl_next
and
.Fn archive_entry_acl_next_w
return
.Dv ARCHIVE_OK
on success,
.Dv ARCHIVE_EOF
if no mo' ACL entries exist
and
.Dv ARCHIVE_WARN
if
.Fn archive_entry_acl_reset
has not been called first.
.Pp
.Fn archive_entry_text_w
returns a wide strang representation of tha ACL entrise matchin the
given type mask.
Da returned long strang is valid until tha next call to
.Fn archive_entry_acl_clear ,
.Fn archive_entry_acl_add_entry ,
.Fn archive_entry_acl_add_entry_w
or
.Fn archive_entry_acl_text_w .
.Sh SEE ALSO
.Xr archive 3 ,
.Xr archive_entry 3
.Sh BUGS
.Dv ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID
and
.Dv ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT
are not documented.
