.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Field 3"
.TH Mail::Field 3 "2012-12-21" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Field \- Base class fo' manipulation of mail header fields
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Field is extended by
\&   Mail::Field::AddrList
\&   Mail::Field::Date
\&   Mail::Field::Generic
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Mail::Field;
\&    
\& mah $field = Mail::Field\->new(\*(AqSubject\*(Aq, \*(Aqsome subject text\*(Aq);
\& mah $field = Mail::Field\->new(Subject => \*(Aqsome subject text\*(Aq);
\& print $field\->tag,": ",$field\->stringify,"\en";
\&
\& mah $field = Mail::Field\->subject(\*(Aqsome subject text\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Mail::Field\*(C'\fR creates n' manipulates fieldz up in \s-1MIME\s0 headers, collected
within a Mail::Header object.  Different field types have their
own sub-class (extension), definin additionizzle useful accessors ta the
field content.
.PP
Muthafuckas is invited ta merge they implementation ta special fieldz into
MailTools, ta maintain a cold-ass lil consistent set of packages n' documentation.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
Mail::Field (and itz sub-classes) define nuff muthafuckin methodz which return
new objects, n' you can put dat on yo' toast. These can all be categorized as constructor.
.IP "Mail::Field\->\fBcombine\fR(\s-1FIELDS\s0)" 4
.IX Item "Mail::Field->combine(FIELDS)"
Take a \s-1LIST\s0 of \f(CW\*(C`Mail::Field\*(C'\fR objects (which should all be of tha same
sub-class) n' create a freshly smoked up object up in dat same class.
.IP "Mail::Field\->\fBextract\fR(\s-1TAG, HEAD\s0 [, \s-1INDEX \s0])" 4
.IX Item "Mail::Field->extract(TAG, HEAD [, INDEX ])"
Takes as arguments tha tag name, a \f(CW\*(C`Mail::Head\*(C'\fR object
and optionally a index.
.Sp
If tha index argument is given then \f(CW\*(C`extract\*(C'\fR will retrieve tha given tag
from tha \f(CW\*(C`Mail::Head\*(C'\fR object n' create a freshly smoked up \f(CW\*(C`Mail::Field\*(C'\fR based object.
\&\fIundef\fR is ghon be returned up in tha field do not exist.
.Sp
If tha index argument aint given tha the result dependz on tha context
in which \f(CW\*(C`extract\*(C'\fR is called. Y'all KNOW dat shit, muthafucka! If called up in a scalar context tha result
will be as if \f(CW\*(C`extract\*(C'\fR was called wit a index value of zero. If called
in a array context then all tags is ghon be retrieved n' a list of
\&\f(CW\*(C`Mail::Field\*(C'\fR objects is ghon be returned.
.IP "Mail::Field\->\fBnew\fR(\s-1TAG\s0 [, \s-1STRING\s0 | \s-1OPTIONS\s0])" 4
.IX Item "Mail::Field->new(TAG [, STRING | OPTIONS])"
Smoke a object up in tha class which defines tha field specified by
the \s-1TAG\s0 argument.
.ie n .SS """Fake"" constructors"
.el .SS "``Fake'' constructors"
.IX Subsection "Fake constructors"
.ie n .IP "$obj\->\fBcreate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->create(OPTIONS)"
This constructor is used internally wit preprocessed field shiznit.
When called on a existin object, its original gangsta content will get
replaced.
.ie n .IP "$obj\->\fBparse\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBparse\fR()" 4
.IX Item "$obj->parse()"
Parse a gangbangin' field line.
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBset\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBset\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->set(OPTIONS)"
Change tha settings (the content yo, but then smart) of dis field.
.ie n .IP "$obj\->\fBstringify\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstringify\fR()" 4
.IX Item "$obj->stringify()"
Returns tha field as a string.
.ie n .IP "$obj\->\fBtag\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtag\fR()" 4
.IX Item "$obj->tag()"
.PD 0
.IP "Mail::Field\->\fBtag\fR()" 4
.IX Item "Mail::Field->tag()"
.PD
Return tha tag (in tha erect case) fo' dis item.  Well, straight-up any
casin is \s-1OK,\s0 cuz tha field tags is treated case-insentitive; however
people have some preferences.
.SS "Smart accessors"
.IX Subsection "Smart accessors"
.ie n .IP "$obj\->\fBtext\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtext\fR([\s-1STRING\s0])" 4
.IX Item "$obj->text([STRING])"
Without arguments, tha field is returned as \fIstringify()\fR do.  Otherwise,
the \s-1STRING\s0 is parsed wit \fIparse()\fR ta replace tha objectz content.
.Sp
It be mo' clear ta booty-call either \fIstringify()\fR or \fIparse()\fR directly, cuz
this method do not add additionizzle processing.
.SH "DETAILS"
.IX Header "DETAILS"
.SS "SUB-CLASS \s-1PACKAGE NAMES\s0"
.IX Subsection "SUB-CLASS PACKAGE NAMES"
All sub-classes should be called Mail::Field::\fIname\fR where \fIname\fR is
derived from tha tag rockin these rules.
.IP "\(bu" 4
Consider a tag as bein made up of elements separated by '\-'
.IP "\(bu" 4
Convert all charactas ta lowercase except tha straight-up original gangsta up in each element, which
should be uppercase.
.IP "\(bu" 4
\&\fIname\fR is then pimped from these elements by rockin tha first
N charactas from each element.
.IP "\(bu" 4
N is calculated by rockin tha formula :\-
.Sp
.Vb 1
\&    int((7 + #elements) / #elements)
.Ve
.IP "\(bu" 4
\&\fIname\fR is then limited ta a maximum of 8 characters, keepin tha straight-up original gangsta 8
characters.
.PP
For a example of dis take a peep tha definizzle of tha 
\&\f(CW\*(C`_header_pkg_name()\*(C'\fR subroutine up in \f(CW\*(C`Mail::Field\*(C'\fR
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Error: Undefined subroutine <method> called" 4
.IX Item "Error: Undefined subroutine <method> called"
Mail::Field objects use autoloadin ta compile freshly smoked up functionality.
Apparently, tha mehod called aint implemented fo' tha specific
class of tha field object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of tha MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Da MailTools bundle was pimped by Graham Barr. Shiiit, dis aint no joke.  Later, Mark
Overmeer took over maintenizzle without commitment ta further pimpment.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peta Orbaek <poe@cit.dk>.
Mail::Maila n' Mail::Send by Slim Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors peep ChizzleLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under tha same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
