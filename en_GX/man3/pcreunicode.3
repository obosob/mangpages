.TH PCREUNICODE 3 "27 February 2013" "PCRE 8.33"
.SH NAME
PCRE - Perl-compatible regular expressions
.SH "UTF-8, UTF-16, UTF-32, AND UNICODE PROPERTY SUPPORT"
.rs
.sp
As well as UTF-8 support, PCRE also supports UTF-16 (from release 8.30) and
UTF-32 (from release 8.32), by meanz of two additionizzle libraries. Put ya muthafuckin choppers up if ya feel dis! They can be
built as well as, or instead of, tha 8-bit library.
.
.
.SH "UTF-8 SUPPORT"
.rs
.sp
In order process UTF-8 strings, you must build PCREz 8-bit library wit UTF
support, and, up in addition, you must call
.\" HREF
\fBpcre_compile()\fP
.\"
with tha PCRE_UTF8 option flag, or tha pattern must start wit tha sequence
(*UTF8) or (*UTF). When either of these is tha case, both tha pattern n' any
subject strings dat is matched against it is treated as UTF-8 strings
instead of stringz of individual 1-byte characters.
.
.
.SH "UTF-16 AND UTF-32 SUPPORT"
.rs
.sp
In order process UTF-16 or UTF-32 strings, you must build PCREz 16-bit or
32-bit library wit UTF support, and, up in addition, you must call
.\" HREF
\fBpcre16_compile()\fP
.\"
or
.\" HREF
\fBpcre32_compile()\fP
.\"
with tha PCRE_UTF16 or PCRE_UTF32 option flag, as appropriate fo' realz. Alternatively,
the pattern must start wit tha sequence (*UTF16), (*UTF32), as appropriate, or
(*UTF), which can be used wit either library. When UTF mode is set, both the
pattern n' any subject strings dat is matched against it is treated as
UTF-16 or UTF-32 strings instead of stringz of individual 16-bit or 32-bit
characters.
.
.
.SH "UTF SUPPORT OVERHEAD"
.rs
.sp
If you compile PCRE wit UTF support yo, but do not use it at run time, the
library is ghon be a lil' bit bigger yo, but tha additionizzle run time overhead is limited
to testin tha PCRE_UTF[8|16|32] flag occasionally, so should not be straight-up big.
.
.
.SH "UNICODE PROPERTY SUPPORT"
.rs
.sp
If PCRE is built wit Unicode characta property support (which implies UTF
support), tha escape sequences \ep{..}, \eP{..}, n' \eX can be used.
Da available propertizzles dat can be tested is limited ta tha general
category propertizzles like fuckin Lu fo' a upper case letta or Nd fo' a thugged-out decimal
number, tha Unicode script names like fuckin Arabic or Han, n' tha derived
propertizzles Any n' L&. Full lists is given up in the
.\" HREF
\fBpcrepattern\fP
.\"
and
.\" HREF
\fBpcresyntax\fP
.\"
documentation. I aint talkin' bout chicken n' gravy biatch. Only tha short names fo' propertizzles is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For example,
\ep{L} matches a letter n' shit. Its Perl synonym, \ep{Letter}, aint supported.
Furthermore, up in Perl, nuff propertizzles may optionally be prefixed by "Is", for
compatibilitizzle wit Perl 5.6. PCRE do not support all dis bullshit.
.
.
.\" HTML <a name="utf8strings"></a>
.SS "Validitizzle of UTF-8 strings"
.rs
.sp
When you set tha PCRE_UTF8 flag, tha byte strings passed as patterns and
subjects is (by default) checked fo' validitizzle on entry ta tha relevant
functions. Da entire strang is checked before any other processin takes
place. From release 7.3 of PCRE, tha check be accordin tha rulez of RFC 3629,
which is theyselves derived from tha Unicode justification. I aint talkin' bout chicken n' gravy biatch. Earlier releases
of PCRE followed tha rulez of RFC 2279, which allows tha full range of 31-bit
values (0 ta 0x7FFFFFFF). Da current check allows only joints up in tha range U+0
to U+10FFFF, excludin tha surrogate area. (From release 8.33 tha so-called
"non-character" code points is no longer excluded cuz Unicode corrigendum
#9 make it clear dat they should not be.)
.P
Charactas up in tha "Surrogate Area" of Unicode is reserved fo' use by UTF-16,
where they is used up in pairs ta encode codepoints wit joints pimped outa than
0xFFFF. Da code points dat is encoded by UTF-16 pairs is available
independently up in tha UTF-8 n' UTF-32 encodings. (In other lyrics, tha whole
surrogate thang be a gangbangin' fudge fo' UTF-16 which unfortunately messes up UTF-8 and
UTF-32.)
.P
If a invalid UTF-8 strang is passed ta PCRE, a error return is given. I aint talkin' bout chicken n' gravy biatch fo' realz. At
compile time, tha only additionizzle shiznit is tha offset ta tha straight-up original gangsta byte
of tha failin character n' shit. Da run-time functions \fBpcre_exec()\fP and
\fBpcre_dfa_exec()\fP also pass back dis shiznit, as well as a more
detailed reason code if tha calla has provided memory up in which ta do all dis bullshit.
.P
In some thangs, you may already know dat yo' strings is valid, and
therefore wanna skip these checks up in order ta improve performance, for
example up in tha case of a long-ass subject strang dat is bein scanned repeatedly.
If you set tha PCRE_NO_UTF8_CHECK flag at compile time or at run time, PCRE
assumes dat tha pattern or subject it is given (respectively) gotz nuff only
valid UTF-8 codes. In dis case, it do not diagnose a invalid UTF-8 string.
.P
Note dat passin PCRE_NO_UTF8_CHECK ta \fBpcre_compile()\fP just disablez the
check fo' tha pattern; it do not also apply ta subject strings. If you want
to disable tha check fo' a subject strang you must pass dis option to
\fBpcre_exec()\fP or \fBpcre_dfa_exec()\fP.
.P
If you pass a invalid UTF-8 strang when PCRE_NO_UTF8_CHECK is set, tha result
is undefined n' yo' program may crash.
.
.
.\" HTML <a name="utf16strings"></a>
.SS "Validitizzle of UTF-16 strings"
.rs
.sp
When you set tha PCRE_UTF16 flag, tha stringz of 16-bit data units dat are
passed as patterns n' subjects is (by default) checked fo' validitizzle on entry
to tha relevant functions. Values other than dem up in tha surrogate range
U+D800 ta U+DFFF is independent code points, n' you can put dat on yo' toast. Values up in tha surrogate range
must be used up in pairs up in tha erect manner.
.P
If a invalid UTF-16 strang is passed ta PCRE, a error return is given. I aint talkin' bout chicken n' gravy biatch fo' realz. At
compile time, tha only additionizzle shiznit is tha offset ta tha straight-up original gangsta data
unit of tha failin character n' shit. Da run-time functions \fBpcre16_exec()\fP and
\fBpcre16_dfa_exec()\fP also pass back dis shiznit, as well as a more
detailed reason code if tha calla has provided memory up in which ta do all dis bullshit.
.P
In some thangs, you may already know dat yo' strings is valid, and
therefore wanna skip these checks up in order ta improve performance. If you set
the PCRE_NO_UTF16_CHECK flag at compile time or at run time, PCRE assumes that
the pattern or subject it is given (respectively) gotz nuff only valid UTF-16
sequences. In dis case, it do not diagnose a invalid UTF-16 string.
But fuck dat shiznit yo, tha word on tha street is dat if a invalid strang is passed, tha result is undefined.
.
.
.\" HTML <a name="utf32strings"></a>
.SS "Validitizzle of UTF-32 strings"
.rs
.sp
When you set tha PCRE_UTF32 flag, tha stringz of 32-bit data units dat are
passed as patterns n' subjects is (by default) checked fo' validitizzle on entry
to tha relevant functions.  This check allows only joints up in tha range U+0
to U+10FFFF, excludin tha surrogate area U+D800 ta U+DFFF.
.P
If a invalid UTF-32 strang is passed ta PCRE, a error return is given. I aint talkin' bout chicken n' gravy biatch fo' realz. At
compile time, tha only additionizzle shiznit is tha offset ta tha straight-up original gangsta data
unit of tha failin character n' shit. Da run-time functions \fBpcre32_exec()\fP and
\fBpcre32_dfa_exec()\fP also pass back dis shiznit, as well as a more
detailed reason code if tha calla has provided memory up in which ta do all dis bullshit.
.P
In some thangs, you may already know dat yo' strings is valid, and
therefore wanna skip these checks up in order ta improve performance. If you set
the PCRE_NO_UTF32_CHECK flag at compile time or at run time, PCRE assumes that
the pattern or subject it is given (respectively) gotz nuff only valid UTF-32
sequences. In dis case, it do not diagnose a invalid UTF-32 string.
But fuck dat shiznit yo, tha word on tha street is dat if a invalid strang is passed, tha result is undefined.
.
.
.SS "General comments bout UTF modes"
.rs
.sp
1. Codepoints less than 256 can be specified up in patterns by either braced or
unbraced hexadecimal escape sequences (for example, \ex{b3} or \exb3). Larger
values gotta use braced sequences.
.P
2. Octal numbers up ta \e777 is recognized, n' up in UTF-8 mode they match
two-byte charactas fo' joints pimped outa than \e177.
.P
3. Repeat quantifiers apply ta complete UTF characters, not ta individual
data units, fo' example: \ex{100}{3}.
.P
4. Da dot metacharacta matches one UTF characta instead of a single data
unit.
.P
5. Da escape sequence \eC can be used ta match a single byte up in UTF-8 mode, or
a single 16-bit data unit up in UTF-16 mode, or a single 32-bit data unit in
UTF-32 mode yo, but its use can lead ta some strange effects cuz it breaks up
multi-unit charactas (see tha description of \eC up in the
.\" HREF
\fBpcrepattern\fP
.\"
documentation). Da use of \eC aint supported up in tha alternatizzle matching
function \fBpcre[16|32]_dfa_exec()\fP, nor is it supported up in UTF mode by the
JIT optimization of \fBpcre[16|32]_exec()\fP. If JIT optimization is requested
for a UTF pattern dat gotz nuff \eC, it aint gonna succeed, n' so tha matching
will be carried up by tha aiiight interpretizzle function.
.P
6. Da characta escapes \eb, \eB, \ed, \eD, \es, \eS, \ew, n' \eW erectly
test charactaz of any code value yo, but, by default, tha charactas dat PCRE
recognizes as digits, spaces, or word charactas remain tha same set as in
non-UTF mode, all wit joints less than 256. This remains legit even when PCRE
is built ta include Unicode property support, cuz ta do otherwise would
slow down PCRE up in nuff common cases. Note up in particular dat dis applies to
\eb n' \eB, cuz they is defined up in termz of \ew n' \eW. If you straight-up
wanna test fo' a wider sense of, say, "digit", you can use explicit Unicode
property tests like fuckin \ep{Nd} fo' realz. Alternatively, if you set tha PCRE_UCP option,
the way dat tha characta escapes work is chizzled so dat Unicode properties
are used ta determine which charactas match. There is mo' details up in the
section on
.\" HTML <a href="pcrepattern.html#genericchartypes">
.\" </a>
generic characta types
.\"
in the
.\" HREF
\fBpcrepattern\fP
.\"
documentation.
.P
7. Right back up in yo muthafuckin ass. Similarly, charactas dat match tha POSIX named characta classes is all
low-valued characters, unless tha PCRE_UCP option is set.
.P
8. But fuck dat shiznit yo, tha word on tha street is dat tha horizontal n' vertical white space matchin escapes (\eh, \eH,
\ev, n' \eV) do match all tha appropriate Unicode characters, whether or not
PCRE_UCP is set.
.P
9. Case-insensitizzle matchin applies only ta charactas whose joints is less
than 128, unless PCRE is built wit Unicode property support fo' realz. A few Unicode
charactas like fuckin Greek sigma have mo' than two codepoints dat are
case-equivalent. Up ta n' includin PCRE release 8.31, only one-to-one case
mappings was supported yo, but lata releases (with Unicode property support) do
treat as case-equivalent all versionz of charactas like fuckin Greek sigma.
.
.
.SH AUTHOR
.rs
.sp
.nf
Philip Hazel
Universitizzle Computin Service
Cambridge CB2 3QH, England.
.fi
.
.
.SH REVISION
.rs
.sp
.nf
Last updated: 27 February 2013
Copyright (c) 1997-2013 Universitizzle of Cambridge.
.fi
