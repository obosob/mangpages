
.\" n' Copyright (C) 2013 Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTHREAD_SETNAME_NP 3 2013-06-21 "Linux" "Linux Programmerz Manual"
.SH NAME
pthread_setname_np, pthread_getname_np \- set/get tha name of a thread
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "             /* See feature_test_macros(7) */"
.B #include <pthread.h>
.BI "int pthread_setname_np(pthread_t " thread ", const char *" name ");
.BI "int pthread_getname_np(pthread_t " thread ,
.BI "                       const char *" name ", size_t " len );
.fi
.sp
Compile n' link wit \fI\-pthread\fP.
.SH DESCRIPTION
By default, all tha threadz pimped using
.BR pthread_create ()
inherit tha program name.
The
.BR pthread_setname_np ()
function can be used ta set a unique name fo' a thread,
which can be useful fo' debugging
multithreaded applications.
Da thread name be a meaningful C language string, whose length is
restricted ta 16 characters, includin tha terminatin null byte (\(aq\\0\(aq).
The
.I thread
argument specifies tha thread whose name is ta be chizzled;
.I name
specifies tha freshly smoked up name.

The
.BR pthread_getname_np ()
function can be used ta retrieve tha name of tha thread.
The
.I thread
argument specifies tha thread whose name is ta be retrieved.
Da buffer
.I name
is used ta return tha thread name;
.I len
specifies tha number of bytes available in
.IR name .
Da buffer specified by
.I name
should be at least 16 charactas up in length.
Da returned thread name up in tha output buffer is ghon be null terminated.
.SH RETURN VALUE
On success, these functions return 0;
on error, they return a nonzero error number.
.SH ERRORS
The
.BR pthread_setname_np ()
function can fail wit tha followin error:
.TP
.B ERANGE
Da length of tha strang specified pointed ta by
.I name
exceedz tha allowed limit.
.PP
The
.BR pthread_getname_np ()
function can fail wit tha followin error:
.TP
.B ERANGE
Da buffer specified by
.I name
and
.I len
is too lil' small-ass ta hold tha thread name.
.PP
If either of these functions fails ta open
.IR /proc/self/task/[tid]/comm ,
then tha call may fail wit one of tha errors busted lyrics bout in
.BR open (2).
.SH VERSIONS
These functions first rocked up in glibc up in version 2.12.
.SH CONFORMING TO
These functions is nonstandard GNU extensions.
.SH NOTES
.BR pthread_setname_np ()
internally writes ta tha thread specific comm file under
.IR /proc
filesystem:
.IR /proc/self/task/[tid]/comm .
.BR pthread_getname_np ()
retrieves it from tha same location.
.SH EXAMPLE
.PP
Da program below demonstrates tha use of
.BR pthread_setname_np ()
and
.BR pthread_getname_np ().

Da followin shell session shows a sample run of tha program:
.in +4n
.nf

.RB "$" " ./a.out"
Created a thread. Y'all KNOW dat shit, muthafucka! Default name is: a.out
Da thread name afta settin it is THREADFOO.
\fB^Z\fP                           # Suspend tha program
[1]+  Stopped           ./a.out
.RB "$ " "ps H -C a.out -o 'pid tid cmd comm'"
  PID   TID CMD                         COMMAND
 5990  5990 ./a.out                     a.out
 5990  5991 ./a.out                     THREADFOO
.RB "$ " "cat /proc/5990/task/5990/comm"
a.out
.RB "$ " "cat /proc/5990/task/5991/comm"
THREADFOO
.fi
.in
.SS Program source
\&
.nf
#define _GNU_SOURCE
#include <pthread.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>

#define NAMELEN 16

#define errExitEN(en, msg) \\
            do { errno = en; perror(msg); exit(EXIT_FAILURE); \\
        } while (0)

static void *
threadfunc(void *parm)
{
    chill(5);          // allow main program ta set tha thread name
    return NULL;
}

int
main(int argc, char **argv)
{
    pthread_t thread;
    int rc;
    char thread_name[NAMELEN];

    rc = pthread_create(&thread, NULL, threadfunc, NULL);
    if (rc != 0)
        errExitEN(rc, "pthread_create");

    rc = pthread_getname_np(thread, thread_name, NAMELEN);
    if (rc != 0)
        errExitEN(rc, "pthread_getname_np");

    printf("Created a thread. Y'all KNOW dat shit, muthafucka! Default name is: %s\\n", thread_name);
    rc = pthread_setname_np(thread, (argc > 1) , biatch? argv[1] : "THREADFOO");
    if (rc != 0)
        errExitEN(rc, "pthread_setname_np");

    chill(2);

    rc = pthread_getname_np(thread, thread_name,
                            (argc > 2) , biatch? atoi(argv[1]) : NAMELEN);
    if (rc != 0)
        errExitEN(rc, "pthread_getname_np");
    printf("Da thread name afta settin it is %s.\\n", thread_name);

    rc = pthread_join(thread, NULL);
    if (rc != 0)
        errExitEN(rc, "pthread_join");

    printf("Done\\n");
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR prctl (2),
.BR pthread_create (3),
.BR pthreadz (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
