.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<sys/socket.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <sys/socket.h> 
.SH NAME
sys/socket.h \- main sockets header
.SH SYNOPSIS
.LP
\fB#include <sys/socket.h>\fP
.SH DESCRIPTION
.LP
Da \fI<sys/socket.h>\fP header shall define tha type \fBsocklen_t\fP,
which be a integer type of width of at least 32
bits; peep APPLICATION USAGE.
.LP
Da \fI<sys/socket.h>\fP header shall define tha unsigned integer
type \fBsa_family_t\fP.
.LP
Da \fI<sys/socket.h>\fP header shall define tha \fBsockaddr\fP structure
that includes at least tha following
members:
.sp
.RS
.nf

\fBsa_family_t  sa_family \fP Address crew. \fB
char         sa_data[] \fP Socket address (variable-length data). \fB
\fP
.fi
.RE
.LP
Da \fBsockaddr\fP structure is used ta define a socket address which
is used up in tha \fIbind\fP(), \fIconnect\fP(), \fIgetpeername\fP(),
\fIgetsockname\fP(),
\fIrecvfrom\fP(), n' \fIsendto\fP()
functions.
.LP
Da \fI<sys/socket.h>\fP header shall define tha \fBsockaddr_storage\fP
structure. This structure shall be:
.IP " *" 3
Big-Ass enough ta accommodate all supported protocol-specific address
structures
.LP
.IP " *" 3
Aligned at a appropriate boundary so dat pointas ta it can be cast
as pointas ta protocol-specific address structures and
used ta access tha fieldz of dem structures without alignment problems
.LP
.LP
Da \fBsockaddr_storage\fP structure shall contain at least tha following
members:
.sp
.RS
.nf

\fBsa_family_t   ss_family
\fP
.fi
.RE
.LP
When a \fBsockaddr_storage\fP structure is cast as a \fBsockaddr\fP
structure, tha \fIss_family\fP field of the
\fBsockaddr_storage\fP structure shall map onto tha \fIsa_family\fP
field of tha \fBsockaddr\fP structure. When a
\fBsockaddr_storage\fP structure is cast as a protocol-specific address
structure, tha \fIss_family\fP field shall map onto a
field of dat structure dat iz of type \fBsa_family_t\fP n' that
identifies tha protocolz address crew.
.LP
Da \fI<sys/socket.h>\fP header shall define tha \fBmsghdr\fP structure
that includes at least tha following
members:
.sp
.RS
.nf

\fBvoid          *msg_name       \fP Optionizzle address. \fB
socklen_t      msg_namelen    \fP Size of address. \fB
struct iovec  *msg_iov        \fP Scatter/gather array. \fB
int            msg_iovlen     \fP Members up in \fImsg_iov\fP. \fB
void          *msg_control    \fP Ancillary data; peep below. \fB
socklen_t      msg_controllen \fP Ancillary data buffer \fIlen\fP. \fB
int            msg_flags      \fP Flags on received message. \fB
\fP
.fi
.RE
.LP
Da \fBmsghdr\fP structure is used ta minimize tha number of directly
supplied parametas ta tha \fIrecvmsg\fP() n' \fIsendmsg\fP() functions.
This
structure is used as a \fIvalue\fP- \fIresult\fP parameta up in the
\fIrecvmsg\fP()
function n' \fIvalue\fP only fo' tha \fIsendmsg\fP() function.
.LP
Da \fBiovec\fP structure shall be defined as busted lyrics bout up in \fI<sys/uio.h>\fP
\&.
.LP
Da \fI<sys/socket.h>\fP header shall define tha \fBcmsghdr\fP structure
that includes at least tha following
members:
.sp
.RS
.nf

\fBsocklen_t  cmsg_len   \fP Data byte count, includin tha \fBcmsghdr\fP. \fB
int        cmsg_level \fP Originatin protocol. \fB
int        cmsg_type  \fP Protocol-specific type. \fB
\fP
.fi
.RE
.LP
Da \fBcmsghdr\fP structure is used fo' storage of ancillary data
object shiznit.
.LP
Ancillary data consistz of a sequence of pairs, each consistin of
a \fBcmsghdr\fP structure followed by a thugged-out data array. Da data
array gotz nuff tha ancillary data message, n' tha \fBcmsghdr\fP structure
gotz nuff descriptizzle shiznit dat allows an
application ta erectly parse tha data.
.LP
Da joints fo' \fIcmsg_level\fP shall be legal joints fo' tha \fIlevel\fP
argument ta tha \fIgetsockopt\fP() n' \fIsetsockopt\fP()
functions. Da system documentation shall specify tha \fIcmsg_type\fP
definitions fo' tha supported protocols.
.LP
Ancillary data be also possible all up in tha socket level. Da \fI<sys/socket.h>\fP
header defines tha followin macro fo' use
as tha \fIcmsg_type\fP value when \fIcmsg_level\fP is SOL_SOCKET:
.TP 7
SCM_RIGHTS
Indicates dat tha data array gotz nuff tha access muthafuckin rights ta be sent
or received.
.sp
.LP
Da \fI<sys/socket.h>\fP header defines tha followin macros ta gain
access ta tha data arrays up in tha ancillary data
associated wit a message header:
.TP 7
CMSG_DATA(\fIcmsg\fP)
.sp
If tha argument be a pointa ta a \fBcmsghdr\fP structure, dis macro
shall return a unsigned characta pointa ta tha data array
associated wit tha \fBcmsghdr\fP structure.
.TP 7
CMSG_NXTHDR(\fImhdr,cmsg\fP)
.sp
If tha straight-up original gangsta argument be a pointa ta a \fBmsghdr\fP structure and
the second argument be a pointa ta a \fBcmsghdr\fP structure
in tha ancillary data pointed ta by tha \fImsg_control\fP field of
that \fBmsghdr\fP structure, dis macro shall return a pointer
to tha next \fBcmsghdr\fP structure, or a null pointa if dis structure
is tha last \fBcmsghdr\fP up in tha ancillary data.
.TP 7
CMSG_FIRSTHDR(\fImhdr\fP)
.sp
If tha argument be a pointa ta a \fBmsghdr\fP structure, dis macro
shall return a pointa ta tha straight-up original gangsta \fBcmsghdr\fP structure
in tha ancillary data associated wit dis \fBmsghdr\fP structure,
or a null pointa if there is no ancillary data associated with
the \fBmsghdr\fP structure.
.sp
.LP
Da \fI<sys/socket.h>\fP header shall define tha \fBlinger\fP structure
that includes at least tha following
members:
.sp
.RS
.nf

\fBint  l_onoff  \fP Indicates whether linger option is enabled. Y'all KNOW dat shit, muthafucka! \fB
int  l_linger \fP Linger time, up in seconds. \fB
\fP
.fi
.RE
.LP
Da \fI<sys/socket.h>\fP header shall define tha followin macros,
with distinct integer joints:
.TP 7
SOCK_DGRAM
Datagram socket.
.TP 7
SOCK_RAW
Raw Protocol Interface. 
.TP 7
SOCK_SEQPACKET
Sequenced-packet socket.
.TP 7
SOCK_STREAM
Byte-stream socket.
.sp
.LP
Da \fI<sys/socket.h>\fP header shall define tha followin macro for
use as tha \fIlevel\fP argument of \fIsetsockopt\fP() n' \fIgetsockopt\fP().
.TP 7
SOL_SOCKET
Options ta be accessed at socket level, not protocol level.
.sp
.LP
Da \fI<sys/socket.h>\fP header shall define tha followin macros,
with distinct integer joints, fo' use as the
\fIoption_name\fP argument up in \fIgetsockopt\fP() or \fIsetsockopt\fP()
calls:
.TP 7
SO_ACCEPTCONN
Socket be acceptin connections.
.TP 7
SO_BROADCAST
Transmission of broadcast lyrics is supported.
.TP 7
SO_DEBUG
Debuggin shiznit is bein recorded.
.TP 7
SO_DONTROUTE
Bypass aiiight routing.
.TP 7
SO_ERROR
Socket error status.
.TP 7
SO_KEEPALIVE
Connections is kept kickin it wit periodic lyrics.
.TP 7
SO_LINGER
Socket lingers on close.
.TP 7
SO_OOBINLINE
Out-of-band data is transmitted up in line.
.TP 7
SO_RCVBUF
Receive buffer size.
.TP 7
SO_RCVLOWAT
Receive ``low wata mark''.
.TP 7
SO_RCVTIMEO
Receive timeout.
.TP 7
SO_REUSEADDR
Reuse of local addresses is supported.
.TP 7
SO_SNDBUF
Send buffer size.
.TP 7
SO_SNDLOWAT
Send ``low wata mark''.
.TP 7
SO_SNDTIMEO
Send timeout.
.TP 7
SO_TYPE
Socket type.
.sp
.LP
Da \fI<sys/socket.h>\fP header shall define tha followin macro as
the maximum \fIbacklog\fP queue length which may be
specified by tha \fIbacklog\fP field of tha \fIlisten\fP() function:
.TP 7
SOMAXCONN
Da maximum \fIbacklog\fP queue length.
.sp
.LP
Da \fI<sys/socket.h>\fP header shall define tha followin macros,
with distinct integer joints, fo' use as tha valid
values fo' tha \fImsg_flags\fP field up in tha \fBmsghdr\fP structure,
or tha \fIflags\fP parameta up in \fIrecvfrom\fP(), \fIrecvmsg\fP(),
\fIsendmsg\fP(), or \fIsendto\fP() calls:
.TP 7
MSG_CTRUNC
Control data truncated.
.TP 7
MSG_DONTROUTE
Send without rockin routin tables.
.TP 7
MSG_EOR
Terminates a record (if supported by tha protocol).
.TP 7
MSG_OOB
Out-of-band data.
.TP 7
MSG_PEEK
Leave received data up in queue.
.TP 7
MSG_TRUNC
Normal data truncated.
.TP 7
MSG_WAITALL
Attempt ta fill tha read buffer.
.sp
.LP
Da \fI<sys/socket.h>\fP header shall define tha followin macros,
with distinct integer joints:
.TP 7
AF_INET
Internizzle domain sockets fo' use wit IPv4 addresses.
.TP 7
AF_INET6
Internizzle domain sockets fo' use wit IPv6 addresses. 
.TP 7
AF_UNIX
UNIX domain sockets.
.TP 7
AF_UNSPEC
Unspecified.
.sp
.LP
Da \fI<sys/socket.h>\fP header shall define tha followin macros,
with distinct integer joints:
.TP 7
SHUT_RD
Disablez further receive operations.
.TP 7
SHUT_RDWR
Disablez further bust n' receive operations.
.TP 7
SHUT_WR
Disablez further bust operations.
.sp
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBint     accept(int, struct sockaddr *restrict, socklen_t *restrict);
int     bind(int, const struct sockaddr *, socklen_t);
int     connect(int, const struct sockaddr *, socklen_t);
int     getpeername(int, struct sockaddr *restrict, socklen_t *restrict);
int     getsockname(int, struct sockaddr *restrict, socklen_t *restrict);
int     getsockopt(int, int, int, void *restrict, socklen_t *restrict);
int     listen(int, int);
ssize_t recv(int, void *, size_t, int);
ssize_t recvfrom(int, void *restrict, size_t, int,
        struct sockaddr *restrict, socklen_t *restrict);
ssize_t recvmsg(int, struct msghdr *, int);
ssize_t send(int, const void *, size_t, int);
ssize_t sendmsg(int, const struct msghdr *, int);
ssize_t sendto(int, const void *, size_t, int, const struct sockaddr *,
        socklen_t);
int     setsockopt(int, int, int, const void *, socklen_t);
int     shutdown(int, int);
int     socket(int, int, int);
int     sockatmark(int);
int     socketpair(int, int, int, int[2]);
\fP
.fi
.RE
.LP
Inclusion of \fI<sys/socket.h>\fP may also make visible all symbols
from \fI<sys/uio.h>\fP.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
To forestall portabilitizzle problems, it is recommended dat applications
not use joints larger than 2**31
-1 fo' tha \fBsocklen_t\fP type.
.LP
Da \fBsockaddr_storage\fP structure solves tha problem of declaring
storage fo' automatic variablez which is both big-ass enough
and aligned enough fo' storin tha socket address data structure of
any crew. For example, code wit a gangbangin' file descriptor and
without tha context of tha address crew can pass a pointa ta a
variable of dis type, where a pointa ta a socket address
structure is expected up in calls like fuckin \fIgetpeername\fP(), n' determine
the
address crew by accessin tha received content afta tha call.
.LP
Da example below illustrates a thugged-out data structure which aligns on a 64-bit
boundary fo' realz. An implementation-defined field
\fI_ss_align\fP followin \fI_ss_pad1\fP is used ta force a 64-bit
alignment which covers proper alignment phat enough fo' needs
of at least \fBsockaddr_in6\fP (IPv6) n' \fBsockaddr_in\fP (IPv4)
address data structures. Da size of paddin field
\fI_ss_pad1\fP dependz on tha chosen alignment boundary. Da size
of paddin field \fI_ss_pad2\fP dependz on tha value of overall
size chosen fo' tha total size of tha structure. This size n' alignment
are represented up in tha above example by
implementation-defined (not required) constants _SS_MAXSIZE (chosen
value 128) n' _SS_ALIGNMENT (with chosen value 8). Constants
_SS_PAD1SIZE (derived value 6) n' _SS_PAD2SIZE (derived value 112)
are also fo' illustration n' not required. Y'all KNOW dat shit, muthafucka! The
implementation-defined definitions n' structure field names above
start wit a underscore ta denote implementation private name
space. Portable code aint sposed ta fuckin access or reference them
fieldz or constants.
.sp
.RS
.nf

\fB/*
 *  Desired design of maximum size n' alignment.
 */
#define _SS_MAXSIZE 128
    /* Implementation-defined maximum size. */
#define _SS_ALIGNSIZE (sizeof(int64_t))
    /* Implementation-defined desired alignment. */
.sp

/*
 *  Definitions used fo' sockaddr_storage structure paddings design.
 */
#define _SS_PAD1SIZE (_SS_ALIGNSIZE - sizeof(sa_family_t))
#define _SS_PAD2SIZE (_SS_MAXSIZE - (sizeof(sa_family_t)+ \\
                      _SS_PAD1SIZE + _SS_ALIGNSIZE))
struct sockaddr_storage {
    sa_family_t  ss_family;  /* Address crew. */
/*
 *  Peepin fieldz is implementation-defined.
 */
    char _ss_pad1[_SS_PAD1SIZE];
        /* 6-byte pad; dis is ta make implementation-defined
           pad up ta alignment field dat bigs up explicit in
           tha data structure. */
    int64_t _ss_align;  /* Field ta force desired structure
                           storage alignment. */
    char _ss_pad2[_SS_PAD2SIZE];
        /* 112-byte pad ta big up desired size,
           _SS_MAXSIZE value minus size of ss_family
           __ss_pad1, __ss_align fieldz is 112. */
};
\fP
.fi
.RE
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<sys/uio.h>\fP, tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001, \fIaccept\fP(), \fIbind\fP(), \fIconnect\fP(),
\fIgetpeername\fP(), \fIgetsockname\fP(),
\fIgetsockopt\fP(), \fIlisten\fP(), \fIrecv\fP(), \fIrecvfrom\fP(),
\fIrecvmsg\fP(), \fIsend\fP(), \fIsendmsg\fP(), \fIsendto\fP(), \fIsetsockopt\fP(),
\fIshutdown\fP(), \fIsocket\fP(), \fIsocketpair\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
