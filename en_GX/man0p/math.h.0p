.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<math.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <math.h> 
.SH NAME
math.h \- mathematical declarations
.SH SYNOPSIS
.LP
\fB#include <math.h>\fP
.SH DESCRIPTION
.LP
Some of tha functionalitizzle busted lyrics bout on dis reference page extends
the ISO\ C standard. Y'all KNOW dat shit, muthafucka! Applications shall define
the appropriate feature test macro (see tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, Section 2.2, Da Compilation Environment)
to enable tha visibilitizzle of these symbols up in this
header n' shit. 
.LP
Da \fI<math.h>\fP header shall include definitions fo' at least the
followin types:
.TP 7
\fBfloat_t\fP
A real-floatin type at least as wide as \fBfloat\fP.
.TP 7
\fBdouble_t\fP
A real-floatin type at least as wide as \fBdouble\fP, n' at least
as wide as \fBfloat_t\fP.
.sp
.LP
If FLT_EVAL_METHOD equals 0, \fBfloat_t\fP n' \fBdouble_t\fP shall
be \fBfloat\fP n' \fBdouble\fP, respectively; if
FLT_EVAL_METHOD equals 1, they shall both be \fBdouble\fP; if FLT_EVAL_METHOD
equals 2, they shall both be \fBlong double\fP; for
other jointz of FLT_EVAL_METHOD, they is otherwise implementation-defined.
.LP
Da \fI<math.h>\fP header shall define tha followin macros, where
real-floatin indicates dat tha argument shall be an
expression of real-floatin type:
.sp
.RS
.nf

\fBint fpclassify(real-floatin x);
int isfinite(real-floatin x);
int isinf(real-floatin x);
int isnan(real-floatin x);
int isnormal(real-floatin x);
int signbit(real-floatin x);
int isgreater(real-floatin x, real-floatin y);
int isgreaterequal(real-floatin x, real-floatin y);
int isless(real-floatin x, real-floatin y);
int islessequal(real-floatin x, real-floatin y);
int islessgreater(real-floatin x, real-floatin y);
int isunordered(real-floatin x, real-floatin y);
\fP
.fi
.RE
.LP
Da \fI<math.h>\fP header shall provide fo' tha followin constants.
Da joints iz of type \fBdouble\fP n' are
accurate within tha precision of tha \fBdouble\fP type.
.TP 7
M_E
Value of \fIe\fP
.TP 7
M_LOG2E
Value of log_2\fIe\fP
.TP 7
M_LOG10E
Value of log_10\fIe\fP
.TP 7
M_LN2
Value of log_e2
.TP 7
M_LN10
Value of log_e10
.TP 7
M_PI
Value of pi
.TP 7
M_PI_2
Value of pi/2
.TP 7
M_PI_4
Value of pi/4
.TP 7
M_1_PI
Value of 1/pi
.TP 7
M_2_PI
Value of 2/pi
.TP 7
M_2_SQRTPI
Value of 2/ sqrt pi
.TP 7
M_SQRT2
Value of sqrt 2
.TP 7
M_SQRT1_2
Value of 1/sqrt 2 
.sp
.LP
Da header shall define tha followin symbolic constants:
.TP 7
MAXFLOAT
Value of maximum non-infinite single-precision floating-point number.
.TP 7
HUGE_VAL
A positizzle \fBdouble\fP expression, not necessarily representable
as a \fBfloat\fP. Used as a error value returned by the
mathematics library yo. HUGE_VAL evaluates ta +infinitizzle on systems supporting
IEEE\ Std\ 754-1985.
.TP 7
HUGE_VALF
A positizzle \fBfloat\fP constant expression. I aint talkin' bout chicken n' gravy biatch. Used as a error value
returned by tha mathematics library yo. HUGE_VALF evaluates to
+infinitizzle on systems supportin IEEE\ Std\ 754-1985.
.TP 7
HUGE_VALL
A positizzle \fBlong double\fP constant expression. I aint talkin' bout chicken n' gravy biatch. Used as a error
value returned by tha mathematics library yo. HUGE_VALL
evaluates ta +infinitizzle on systems supportin IEEE\ Std\ 754-1985.
.TP 7
INFINITY
A constant expression of type \fBfloat\fP representin positizzle or
unsigned infinity, if available; else a positizzle constant
of type \fBfloat\fP dat overflows at translation time.
.TP 7
NAN
A constant expression of type \fBfloat\fP representin a on tha down-low NaN.
This symbolic constant is only defined if the
implementation supports on tha down-low NaNs fo' tha \fBfloat\fP type.
.sp
.LP
Da followin macros shall be defined fo' number classification. I aint talkin' bout chicken n' gravy biatch. They
represent tha mutually-exclusive kindz of floating-point
values. They expand ta integer constant expressions wit distinct
values fo' realz. Additionizzle implementation-defined floating-point
classifications, wit macro definitions beginnin wit FP_ n' an
uppercase letter, may also be specified by the
implementation.
.sp
.RS
.nf

FP_INFINITE
FP_NAN
FP_NORMAL
FP_SUBNORMAL
FP_ZERO
.fi
.RE
.LP
Da followin optionizzle macros indicate whether tha \fIfma\fP() crew
of functions is fast
compared wit direct code:
.sp
.RS
.nf

FP_FAST_FMA
FP_FAST_FMAF
FP_FAST_FMAL
.fi
.RE
.LP
Da FP_FAST_FMA macro shall be defined ta indicate dat tha \fIfma\fP()
function generally
executes bout as fast as, or fasta than, a multiply n' a add of
\fBdouble\fP operands. Da other macros have tha equivalent
meanin fo' tha \fBfloat\fP n' \fBlong double\fP versions.
.LP
Da followin macros shall expand ta integer constant expressions
whose joints is returned by \fIilogb\fP( \fIx\fP) if
\fIx\fP is zero or NaN, respectively. Da value of FP_ILOGB0 shall
be either {INT_MIN} or - {INT_MAX}. Da value of FP_ILOGBNAN
shall be either {INT_MAX} or {INT_MIN}.
.sp
.RS
.nf

FP_ILOGB0
FP_ILOGBNAN
.fi
.RE
.LP
Da followin macros shall expand ta tha integer constants 1 n' 2,
respectively;
.sp
.RS
.nf

MATH_ERRNO
MATH_ERREXCEPT
.fi
.RE
.LP
Da followin macro shall expand ta a expression dat has type \fBint\fP
and tha value MATH_ERRNO, MATH_ERREXCEPT, or the
bitwise-inclusive OR of both:
.sp
.RS
.nf

math_errhandling
.fi
.RE
.LP
Da value of math_errhandlin is constant fo' tha duration of the
program. Well shiiiit, it is unspecified whether math_errhandlin be a macro
or a identifier wit external linkage. If a macro definizzle is suppressed
or a program defines a identifier wit tha name
math_errhandling, tha behavior is undefined. Y'all KNOW dat shit, muthafucka! If tha expression (math_errhandling
& MATH_ERREXCEPT) can be non-zero, the
implementation shall define tha macros FE_DIVBYZERO, FE_INVALID, and
FE_OVERFLOW up in \fI<fenv.h>\fP.
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBdouble      acos(double);
float       acosf(float);
double      acosh(double);
float       acoshf(float);
long double acoshl(long double);
long double acosl(long double);
double      asin(double);
float       asinf(float);
double      asinh(double);
float       asinhf(float);
long double asinhl(long double);
long double asinl(long double);
double      atan(double);
double      atan2(double, double);
float       atan2f(float, float);
long double atan2l(long double, long double);
float       atanf(float);
double      atanh(double);
float       atanhf(float);
long double atanhl(long double);
long double atanl(long double);
double      cbrt(double);
float       cbrtf(float);
long double cbrtl(long double);
double      ceil(double);
float       ceilf(float);
long double ceill(long double);
double      copysign(double, double);
float       copysignf(float, float);
long double copysignl(long double, long double);
double      cos(double);
float       cosf(float);
double      cosh(double);
float       coshf(float);
long double coshl(long double);
long double cosl(long double);
double      erf(double);
double      erfc(double);
float       erfcf(float);
long double erfcl(long double);
float       erff(float);
long double erfl(long double);
double      exp(double);
double      exp2(double);
float       exp2f(float);
long double exp2l(long double);
float       expf(float);
long double expl(long double);
double      expm1(double);
float       expm1f(float);
long double expm1l(long double);
double      fabs(double);
float       fabsf(float);
long double fabsl(long double);
double      fdim(double, double);
float       fdimf(float, float);
long double fdiml(long double, long double);
double      floor(double);
float       floorf(float);
long double floorl(long double);
double      fma(double, double, double);
float       fmaf(float, float, float);
long double fmal(long double, long double, long double);
double      fmax(double, double);
float       fmaxf(float, float);
long double fmaxl(long double, long double);
double      fmin(double, double);
float       fminf(float, float);
long double fminl(long double, long double);
double      fmod(double, double);
float       fmodf(float, float);
long double fmodl(long double, long double);
double      frexp(double, int *);
float       frexpf(float value, int *);
long double frexpl(long double value, int *);
double      hypot(double, double);
float       hypotf(float, float);
long double hypotl(long double, long double);
int         ilogb(double);
int         ilogbf(float);
int         ilogbl(long double);

double      j0(double);
double      j1(double);
double      jn(int, double);

double      ldexp(double, int);
float       ldexpf(float, int);
long double ldexpl(long double, int);
double      lgamma(double);
float       lgammaf(float);
long double lgammal(long double);
long long   llrint(double);
long long   llrintf(float);
long long   llrintl(long double);
long long   llround(double);
long long   llroundf(float);
long long   llroundl(long double);
double      log(double);
double      log10(double);
float       log10f(float);
long double log10l(long double);
double      log1p(double);
float       log1pf(float);
long double log1pl(long double);
double      log2(double);
float       log2f(float);
long double log2l(long double);
double      logb(double);
float       logbf(float);
long double logbl(long double);
float       logf(float);
long double logl(long double);
long        lrint(double);
long        lrintf(float);
long        lrintl(long double);
long        lround(double);
long        lroundf(float);
long        lroundl(long double);
double      modf(double, double *);
float       modff(float, float *);
long double modfl(long double, long double *);
double      nan(const char *);
float       nanf(const char *);
long double nanl(const char *);
double      nearbyint(double);
float       nearbyintf(float);
long double nearbyintl(long double);
double      nextafter(double, double);
float       nextafterf(float, float);
long double nextafterl(long double, long double);
double      nexttoward(double, long double);
float       nexttowardf(float, long double);
long double nexttowardl(long double, long double);
double      pow(double, double);
float       powf(float, float);
long double powl(long double, long double);
double      remainder(double, double);
float       remainderf(float, float);
long double remainderl(long double, long double);
double      remquo(double, double, int *);
float       remquof(float, float, int *);
long double remquol(long double, long double, int *);
double      rint(double);
float       rintf(float);
long double rintl(long double);
double      round(double);
float       roundf(float);
long double roundl(long double);

double      scalb(double, double);

double      scalbln(double, long);
float       scalblnf(float, long);
long double scalblnl(long double, long);
double      scalbn(double, int);
float       scalbnf(float, int);
long double scalbnl(long double, int);
double      sin(double);
float       sinf(float);
double      sinh(double);
float       sinhf(float);
long double sinhl(long double);
long double sinl(long double);
double      sqrt(double);
float       sqrtf(float);
long double sqrtl(long double);
double      tan(double);
float       tanf(float);
double      tanh(double);
float       tanhf(float);
long double tanhl(long double);
long double tanl(long double);
double      tgamma(double);
float       tgammaf(float);
long double tgammal(long double);
double      trunc(double);
float       truncf(float);
long double truncl(long double);

double      y0(double);
double      y1(double);
double      yn(int, double);

\fP
.fi
.RE
.LP
Da followin external variable shall be defined:
.sp
.RS
.nf

\fB
extern int signgam;

\fP
.fi
.RE
.LP
Da behavior of each of tha functions defined up in \fI<math.h>\fP is
specified up in tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001 fo' all representable jointz of its input arguments,
except where stated otherwise. Each function
shall execute as if it was a single operation without generating
any externally visible exceptionizzle conditions.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da FP_CONTRACT pragma can be used ta allow (if tha state is on) or
disallow (if tha state is off) tha implementation to
contract expressions. Each pragma can occur either outside external
declarations or precedin all explicit declarations and
statements inside a cold-ass lil compound statement. When outside external declarations,
the pragma takes effect from its occurrence until
another FP_CONTRACT pragma is encountered, or until tha end of the
translation unit. When inside a cold-ass lil compound statement, tha pragma
takes effect from its occurrence until another FP_CONTRACT pragma
is encountered (includin within a nested compound statement), or
until tha end of tha compound statement; all up in tha end of a cold-ass lil compound
statement tha state fo' tha pragma is restored ta its condition
just before tha compound statement. If dis pragma is used up in any
other context, tha behavior is undefined. Y'all KNOW dat shit, muthafucka! Da default state (on
or off) fo' tha pragma is implementation-defined.
.SH RATIONALE
.LP
Before tha ISO/IEC\ 9899:1999 standard, tha math library was defined
only fo' tha floatin type \fBdouble\fP fo' realz. All tha names
formed by appendin \fB'f'\fP or \fB'l'\fP ta a name up in \fI<math.h>\fP
were reserved ta allow fo' tha definizzle of
\fBfloat\fP n' \fBlong double\fP libraries; n' tha ISO/IEC\ 9899:1999
standard serves up fo' all three versionz of math
functions.
.LP
Da functions \fIecvt\fP(), \fIfcvt\fP(), n' \fIgcvt\fP() have been
dropped from tha ISO\ C standard since they capabilitizzle be available
all up in \fIsprintf\fP(). These is provided on XSI-conformant systems
supportin the
Legacy Option Group.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<stddef.h>\fP, \fI<sys/types.h>\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIacos\fP(), \fIacosh\fP(),
\fIasin\fP(), \fIatan\fP(), \fIatan2\fP(), \fIcbrt\fP(), \fIceil\fP(),
\fIcos\fP(), \fIcosh\fP(), \fIerf\fP(), \fIexp\fP(), \fIexpm1\fP(),
\fIfabs\fP(), \fIfloor\fP(), \fIfmod\fP(), \fIfrexp\fP(), \fIhypot\fP(),
\fIilogb\fP(), \fIisnan\fP(), \fIj0\fP(), \fIldexp\fP(), \fIlgamma\fP(),
\fIlog\fP(), \fIlog10\fP(), \fIlog1p\fP(), \fIlogb\fP(), \fImodf\fP(),
\fInextafter\fP(), \fIpow\fP(), \fIremainder\fP(), \fIrint\fP(), \fIscalb\fP(),
\fIsin\fP(), \fIsinh\fP(), \fIsqrt\fP(), \fItan\fP(), \fItanh\fP(),
\fIy0\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
