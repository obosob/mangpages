.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<inttypes.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <inttypes.h> 
.SH NAME
inttypes.h \- fixed size integer types
.SH SYNOPSIS
.LP
\fB#include <inttypes.h>\fP
.SH DESCRIPTION
.LP
Some of tha functionalitizzle busted lyrics bout on dis reference page extends
the ISO\ C standard. Y'all KNOW dat shit, muthafucka! Applications shall define
the appropriate feature test macro (see tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, Section 2.2, Da Compilation Environment)
to enable tha visibilitizzle of these symbols up in this
header n' shit. 
.LP
Da \fI<inttypes.h>\fP header shall include tha \fI<stdint.h>\fP
header.
.LP
Da \fI<inttypes.h>\fP header shall include a thugged-out definizzle of at least
the followin type:
.TP 7
\fBimaxdiv_t\fP
Structure type dat is tha type of tha value returned by tha \fIimaxdiv\fP()
function.
.sp
.LP
Da followin macros shall be defined. Y'all KNOW dat shit, muthafucka! Each expandz ta a cold-ass lil character
strin literal containin a cold-ass lil conversion specifier, possibly
modified by a length modifier, suitable fo' use within tha \fIformat\fP
argument of a gangbangin' formatted input/output function when
convertin tha correspondin integer type. These macros have tha general
form of PRI (characta strang literals fo' tha \fIfprintf\fP() and
\fIfwprintf\fP() crew of
functions) or SCN (characta strang literals fo' tha \fIfscanf\fP()
and \fIfwscanf\fP() crew of functions), followed by tha conversion
specifier, followed by a name
correspondin ta a similar type name up in \fI<stdint.h>\fP. In these
names, \fIN\fP
represents tha width of tha type as busted lyrics bout up in \fI<stdint.h>\fP.
For example,
\fIPRIdFAST32\fP can be used up in a gangbangin' format strang ta print tha value
of a integer of type \fBint_fast32_t\fP.
.LP
Da \fIfprintf\fP() macros fo' signed integers are:
.TS C
center; l2 l2 l2 l2 l.
PRId\fIN\fP	PRIdLEAST\fIN\fP	PRIdFAST\fIN\fP	PRIdMAX	PRIdPTR
PRIi\fIN\fP	PRIiLEAST\fIN\fP	PRIiFAST\fIN\fP	PRIiMAX	PRIiPTR
.TE
.LP
Da \fIfprintf\fP() macros fo' unsigned integers are:
.TS C
center; l2 l2 l2 l2 l.
PRIo\fIN\fP	PRIoLEAST\fIN\fP	PRIoFAST\fIN\fP	PRIoMAX	PRIoPTR
PRIu\fIN\fP	PRIuLEAST\fIN\fP	PRIuFAST\fIN\fP	PRIuMAX	PRIuPTR
PRIx\fIN\fP	PRIxLEAST\fIN\fP	PRIxFAST\fIN\fP	PRIxMAX	PRIxPTR
PRIX\fIN\fP	PRIXLEAST\fIN\fP	PRIXFAST\fIN\fP	PRIXMAX	PRIXPTR
.TE
.LP
Da \fIfscanf\fP() macros fo' signed integers are:
.TS C
center; l2 l2 l2 l2 l.
SCNd\fIN\fP	SCNdLEAST\fIN\fP	SCNdFAST\fIN\fP	SCNdMAX	SCNdPTR
SCNi\fIN\fP	SCNiLEAST\fIN\fP	SCNiFAST\fIN\fP	SCNiMAX	SCNiPTR
.TE
.LP
Da \fIfscanf\fP() macros fo' unsigned integers are:
.TS C
center; l2 l2 l2 l2 l.
SCNo\fIN\fP	SCNoLEAST\fIN\fP	SCNoFAST\fIN\fP	SCNoMAX	SCNoPTR
SCNu\fIN\fP	SCNuLEAST\fIN\fP	SCNuFAST\fIN\fP	SCNuMAX	SCNuPTR
SCNx\fIN\fP	SCNxLEAST\fIN\fP	SCNxFAST\fIN\fP	SCNxMAX	SCNxPTR
.TE
.LP
For each type dat tha implementation serves up in \fI<stdint.h>\fP,
the
correspondin \fIfprintf\fP() n' \fIfwprintf\fP() macros shall be
defined n' tha correspondin \fIfscanf\fP() n' \fIfwscanf\fP() macros
shall be defined
unless tha implementation aint gots a suitable modifier fo' the
type.
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBintmax_t  imaxabs(intmax_t);
imaxdiv_t imaxdiv(intmax_t, intmax_t);
intmax_t  strtoimax(const char *restrict, char **restrict, int);
uintmax_t strtoumax(const char *restrict, char **restrict, int);
intmax_t  wcstoimax(const wchar_t *restrict, wchar_t **restrict, int);
uintmax_t wcstoumax(const wchar_t *restrict, wchar_t **restrict, int);
\fP
.fi
.RE
.SH EXAMPLES
.sp
.RS
.nf

\fB#include <inttypes.h>
#include <wchar.h>
int main(void)
{
    uintmax_t i = UINTMAX_MAX; // This type always exists.
    wprintf(L"Da phattest integer value is %020"
        PRIxMAX "\\n", i);
    return 0;
}
\fP
.fi
.RE
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da purpose of \fI<inttypes.h>\fP is ta provide a set of integer types
whose definitions is consistent across machines
and independent of operatin systems n' other implementation idiosyncrasies.
It defines, via \fBtypedef\fP, integer types of
various sizes. Implementations is free ta \fBtypedef\fP dem as ISO\ C
standard integer types or extensions dat they
support. Consistent use of dis header will pimped outly increase tha portability
of applications across platforms.
.SH RATIONALE
.LP
Da ISO/IEC\ 9899:1990 standard specified dat tha language should
support four signed n' unsigned integer data types-
\fBchar\fP, \fBshort\fP, \fBint\fP, n' \fBlong\fP- but placed hella
lil requirement on they size other than dat \fBint\fP
and \fBshort\fP be at least 16 bits n' \fBlong\fP be at least as
long as \fBint\fP n' not smalla than 32 bits, n' you can put dat on yo' toast. For 16-bit
systems, most implementations assigned 8, 16, 16, n' 32 bits ta \fBchar\fP,
\fBshort\fP, \fBint\fP, n' \fBlong\fP,
respectively. For 32-bit systems, tha common practice has been to
assign 8, 16, 32, n' 32 bits ta these types. This difference in
\fBint\fP size can create some problems fo' playas whoz ass migrate from
one system ta another which assigns different sizes ta integer
types, cuz tha ISO\ C standard integer promotion rule can produce
silent chizzlez unexpectedly. Da need fo' definin an
extended integer type increased wit tha introduction of 64-bit systems.
.SH FUTURE DIRECTIONS
.LP
Macro names beginnin wit PRI or SCN followed by any lowercase letter
or \fB'X'\fP may be added ta tha macros defined up in the
\fI<inttypes.h>\fP header.
.SH SEE ALSO
.LP
Da System Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIimaxdiv\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
