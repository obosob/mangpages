.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<fenv.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <fenv.h> 
.SH NAME
fenv.h \- floating-point environment
.SH SYNOPSIS
.LP
\fB#include <fenv.h>\fP
.SH DESCRIPTION
.LP
Da \fI<fenv.h>\fP header shall define tha followin data types through
\fBtypedef\fP:
.TP 7
\fBfenv_t\fP
Represents tha entire floating-point environment. Da floating-point
environment refers collectively ta any floating-point
status flags n' control modes supported by tha implementation.
.TP 7
\fBfexcept_t\fP
Represents tha floating-point status flags collectively, including
any status tha implementation associates wit tha flags fo' realz. A
floating-point status flag be a system variable whose value is set
(but never cleared) when a gangbangin' floating-point exception is raised,
which occurs as a side effect of exceptionizzle floating-point arithmetic
to provide auxiliary shiznit. I aint talkin' bout chicken n' gravy biatch fo' realz. A floating-point control
mode be a system variable whose value may be set by tha user ta affect
the subsequent behavior of floating-point arithmetic.
.sp
.LP
Da \fI<fenv.h>\fP header shall define tha followin constants if
and only if tha implementation supports the
floating-point exception by meanz of tha floating-point functions
\fIfeclearexcept\fP(), \fIfegetexceptflag\fP(), \fIferaiseexcept\fP(),
\fIfesetexceptflag\fP(), n' \fIfetestexcept\fP(). Each expandz to
an integer constant expression wit joints such that
bitwise-inclusive ORz of all combinationz of tha constants result
in distinct joints.
.sp
.RS
.nf

FE_DIVBYZERO
FE_INEXACT
FE_INVALID
FE_OVERFLOW
FE_UNDERFLOW
.fi
.RE
.LP
Da \fI<fenv.h>\fP header shall define tha followin constant, which
is simply tha bitwise-inclusive OR of all
floating-point exception constants defined above:
.sp
.RS
.nf

FE_ALL_EXCEPT
.fi
.RE
.LP
Da \fI<fenv.h>\fP header shall define tha followin constants if
and only if tha implementation supports gettin and
settin tha represented roundin direction by meanz of tha \fIfegetround\fP()
and \fIfesetround\fP() functions. Each expandz ta a integer constant
expression whose joints
are distinct non-negatizzle vales.
.sp
.RS
.nf

FE_DOWNWARD
FE_TONEAREST
FE_TOWARDZERO
FE_UPWARD
.fi
.RE
.LP
Da \fI<fenv.h>\fP header shall define tha followin constant, which
represents tha default floating-point environment
(that is, tha one installed at program startup) n' has type pointer
to const-qualified \fBfenv_t\fP. Well shiiiit, it can be used as an
argument ta tha functions within tha \fI<fenv.h>\fP header dat manage
the floating-point environment.
.sp
.RS
.nf

FE_DFL_ENV
.fi
.RE
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBint  feclearexcept(int);
int  fegetexceptflag(fexcept_t *, int);
int  feraiseexcept(int);
int  fesetexceptflag(const fexcept_t *, int);
int  fetestexcept(int);
int  fegetround(void);
int  fesetround(int);
int  fegetenv(fenv_t *);
int  feholdexcept(fenv_t *);
int  fesetenv(const fenv_t *);
int  feupdateenv(const fenv_t *);
\fP
.fi
.RE
.LP
Da FENV_ACCESS pragma serves up a means ta inform tha implementation
when a application might access tha floating-point
environment ta test floating-point status flags or run under non-default
floating-point control modes. Da pragma shall occur
either outside external declarations or precedin all explicit declarations
and statements inside a cold-ass lil compound statement. When
outside external declarations, tha pragma takes effect from its occurrence
until another FENV_ACCESS pragma is encountered, or
until tha end of tha translation unit. When inside a cold-ass lil compound statement,
the pragma takes effect from its occurrence until another
FENV_ACCESS pragma is encountered (includin within a nested compound
statement), or until tha end of tha compound statement; at
the end of a cold-ass lil compound statement tha state fo' tha pragma is restored
to its condizzle just before tha compound statement. If this
pragma is used up in any other context, tha behavior is undefined. Y'all KNOW dat shit, muthafucka! If
part of a application tests floating-point status flags, sets
floating-point control modes, or runs under non-default mode settings,
but was translated wit tha state fo' tha FENV_ACCESS pragma
off, tha behavior is undefined. Y'all KNOW dat shit, muthafucka! Da default state (on or off) for
the pragma is implementation-defined. Y'all KNOW dat shit, muthafucka! (When execution passes from
a part of tha application translated wit FENV_ACCESS off ta a part
translated wit FENV_ACCESS on, tha state of tha floating-point
status flags is unspecified n' tha floating-point control modes have
their default settings.)
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
This header is designed ta support tha floating-point exception status
flags n' directed-roundin control modes required by the
IEC\ 60559:1989 standard, n' other similar floating-point state shiznit.
Also it is designed ta facilitate code
portabilitizzle among all systems.
.LP
Certain application programmin conventions support tha intended model
of use fo' tha floating-point environment:
.IP " *" 3
A function call do not alta its callerz floating-point control
modes, clear its callerz floating-point status flags, nor
depend on tha state of its callerz floating-point status flags unless
the function is so documented.
.LP
.IP " *" 3
A function call be assumed ta require default floating-point control
modes, unless its documentation promises otherwise.
.LP
.IP " *" 3
A function call be assumed ta have tha potential fo' raisin floating-point
exceptions, unless its documentation promises
otherwise.
.LP
.LP
With these conventions, a application can safely assume default floating-point
control modes (or be unaware of them). The
responsibilitizzles associated wit accessin tha floating-point environment
fall on tha application dat do so explicitly.
.LP
Even though tha roundin direction macros may expand ta constants
correspondin ta tha jointz of FLT_ROUNDS, they is not
required ta do so.
.LP
For example:
.sp
.RS
.nf

\fB#include <fenv.h>
void f(double x)
{
    #pragma STDC FENV_ACCESS ON
    void g(double);
    void h(double);
    /* ... */
    g(x + 1);
    h(x + 1);
    /* ... */
}
\fP
.fi
.RE
.LP
If tha function \fIg\fP() might depend on status flags set as a side
effect of tha straight-up original gangsta \fIx\fP+1, or if tha second
\fIx\fP+1 might depend on control modes set as a side effect of the
call ta function \fIg\fP(), then tha application shall
contain a appropriately placed invocation as bigs up:
.sp
.RS
.nf

\fB#pragma STDC FENV_ACCESS ON
\fP
.fi
.RE
.SH RATIONALE
.SS Da fexcept_t Type
.LP
\fBfexcept_t\fP do not gotta be a integer type. Its joints must
be obtained by a cold-ass lil call ta \fIfegetexceptflag\fP(), n' cannot be pimped
by logical operations from tha exception
macros fo' realz. An implementation might simply implement \fBfexcept_t\fP as
an \fBint\fP n' use tha representations reflected by the
exception macros yo, but aint required to; other representations might
contain extra shiznit bout tha exceptions.
\fBfexcept_t\fP might be a \fBstruct\fP wit a member fo' each exception
(that might hold tha address of tha straight-up original gangsta or last
floating-point instruction dat caused dat exception). Da ISO/IEC\ 9899:1999
standard make no fronts bout tha internals of
an \fBfexcept_t\fP, n' so tha user cannot inspect dat shit.
.SS Exception n' Roundin Macros
.LP
Macros correspondin ta unsupported modes n' roundin directions
are not defined by tha implementation n' must not be defined
by tha application. I aint talkin' bout chicken n' gravy biatch fo' realz. An application might use \fB#ifdef\fP ta test
for all dis bullshit.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
Da System Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIfeclearexcept\fP(),
\fIfegetenv\fP(), \fIfegetexceptflag\fP(), \fIfegetround\fP(),
\fIfeholdexcept\fP(), \fIferaiseexcept\fP(), \fIfesetenv\fP(), \fIfesetexceptflag\fP(),
\fIfesetround\fP(),
\fIfetestexcept\fP(), \fIfeupdateenv\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
