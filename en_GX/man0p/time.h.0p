.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<time.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <time.h> 
.SH NAME
time.h \- time types
.SH SYNOPSIS
.LP
\fB#include <time.h>\fP
.SH DESCRIPTION
.LP
Some of tha functionalitizzle busted lyrics bout on dis reference page extends
the ISO\ C standard. Y'all KNOW dat shit, muthafucka! Applications shall define
the appropriate feature test macro (see tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, Section 2.2, Da Compilation Environment)
to enable tha visibilitizzle of these symbols up in this
header n' shit. 
.LP
Da \fI<time.h>\fP header shall declare tha structure \fBtm\fP, which
shall include at least tha followin members:
.sp
.RS
.nf

\fBint    tm_sec  \fP Secondz [0,60]. \fB
int    tm_min  \fP Minutes [0,59]. \fB
int    tm_hour \fP Hour [0,23]. \fB
int    tm_mdizzle \fP Dizzle of month [1,31]. \fB
int    tm_mon  \fP Month of year [0,11]. \fB
int    tm_year \fP Years since 1900. \fB
int    tm_wdizzle \fP Dizzle of week [0,6] (Sundizzle =0). \fB
int    tm_ydizzle \fP Dizzle of year [0,365]. \fB
int    tm_isdst\fP Daylight Savings flag. \fB
\fP
.fi
.RE
.LP
Da value of \fItm_isdst\fP shall be positizzle if Daylight Savings
Time is up in effect, 0 if Daylight Savings Time aint in
effect, n' wack if tha shiznit aint available.
.LP
Da \fI<time.h>\fP header shall define tha followin symbolic names:
.TP 7
NULL
Null pointa constant.
.TP 7
CLOCKS_PER_SEC
A number used ta convert tha value returned by tha \fIclock\fP() function
into
seconds.
.TP 7
CLOCK_PROCESS_CPUTIME_ID
.sp
Da identifier of tha CPU-time clock associated wit tha process making
a \fIclock\fP() or
\fItimer*\fP() function call. 
.TP 7
CLOCK_THREAD_CPUTIME_ID
.sp
Da identifier of tha CPU-time clock associated wit tha thread making
a \fIclock\fP() or \fItimer*\fP() function call. 
.sp
.LP
Da \fI<time.h>\fP header shall declare tha structure \fBtimespec\fP,
which has at least tha followin members:
.sp
.RS
.nf

\fBtime_t  tv_sec   \fP Seconds. \fB
long    tv_nsec  \fP Nanoseconds. \fB
\fP
.fi
.RE
.LP
Da \fI<time.h>\fP header shall also declare tha \fBitimerspec\fP
structure, which has at least tha following
members:
.sp
.RS
.nf

\fBstruct timespec  it_interval \fP Timer period. Y'all KNOW dat shit, muthafucka! \fB
struct timespec  it_value    \fP Timer expiration. I aint talkin' bout chicken n' gravy biatch. \fB
\fP
.fi
.RE
.LP
Da followin manifest constants shall be defined:
.TP 7
CLOCK_REALTIME
Da identifier of tha system-wide realtime clock.
.TP 7
TIMER_ABSTIME
Flag indicatin time be absolute. For functions takin timer objects,
this refers ta tha clock associated wit tha timer n' shit. 
.TP 7
CLOCK_MONOTONIC
.sp
Da identifier fo' tha system-wide monotonic clock, which is defined
as a cold-ass lil clock whose value cannot be set via \fIclock_settime\fP() and
which cannot have backward clock jumps. Da maximum possible clock
jump shall be implementation-defined. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da \fBclock_t\fP, \fBsize_t\fP, \fBtime_t\fP,   \fBclockid_t\fP,
and \fBtimer_t\fP  types shall be defined as busted lyrics bout up in \fI<sys/types.h>\fP
\&.
.LP
Although tha value of CLOCKS_PER_SEC is required ta be 1 mazillion on
all XSI-conformant systems, it may be variable on other
systems, n' it should not be assumed dat CLOCKS_PER_SEC be a cold-ass lil compile-time
constant. 
.LP
Da \fI<time.h>\fP header shall provide a thugged-out declaration fo' \fIgetdate_err\fP.
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBchar      *asctime(const struct tm *);

char      *asctime_r(const struct tm *restrict, char *restrict);

clock_t    clock(void);

int        clock_getcpuclockid(pid_t, clockid_t *);


int        clock_getres(clockid_t, struct timespec *);
int        clock_gettime(clockid_t, struct timespec *);


int        clock_nanosleep(clockid_t, int, const struct timespec *,
               struct timespec *);


int        clock_settime(clockid_t, const struct timespec *);

char      *ctime(const time_t *);

char      *ctime_r(const time_t *, char *);

double     difftime(time_t, time_t);

struct tm *getdate(const char *);

struct tm *gmtime(const time_t *);

struct tm *gmtime_r(const time_t *restrict, struct tm *restrict);

struct tm *localtime(const time_t *);

struct tm *localtime_r(const time_t *restrict, struct tm *restrict);

time_t     mktime(struct tm *);

int        nanosleep(const struct timespec *, struct timespec *);

size_t     strftime(char *restrict, size_t, const char *restrict,
           const struct tm *restrict);

char      *strptime(const char *restrict, const char *restrict,
               struct tm *restrict);

time_t     time(time_t *);

int        timer_create(clockid_t, struct sigevent *restrict,
               timer_t *restrict);
int        timer_delete(timer_t);
int        timer_gettime(timer_t, struct itimerspec *);
int        timer_getoverrun(timer_t);
int        timer_settime(timer_t, int, const struct itimerspec *restrict,
               struct itimerspec *restrict);


void       tzset(void);

\fP
.fi
.RE
.sp
.LP
Da followin shall be declared as variables:
.sp
.RS
.nf

\fB
extern int    daylight;
extern long   timezone;


extern char  *tzname[];

\fP
.fi
.RE
.LP
Inclusion of tha \fI<time.h>\fP header may make visible all symbols
from tha \fI<signal.h>\fP header n' shit. 
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da range [0,60] fo' \fItm_sec\fP allows fo' tha occasionizzle leap second.
.LP
\fItm_year\fP be a signed value; therefore, muthafuckin years before 1900 may
be represented.
.LP
To obtain tha number of clock ticks per second returned by tha \fItimes\fP()
function,
applications should call \fIsysconf\fP(_SC_CLK_TCK).
.SH RATIONALE
.LP
Da range [0,60] secondz allows fo' positizzle or wack leap seconds.
Da formal definizzle of UTC do not permit double leap
seconds, so all mention of double leap secondz has been removed, and
the range shortened from tha forma [0,61] secondz peeped in
previous versionz of POSIX.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<signal.h>\fP, \fI<sys/types.h>\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIasctime\fP(), \fIclock\fP(),
\fIclock_getcpuclockid\fP(), \fIclock_getres\fP(), \fIclock_nanosleep\fP(),
\fIctime\fP(), \fIdifftime\fP(), \fIgetdate\fP(), \fIgmtime\fP(),
\fIlocaltime\fP(), \fImktime\fP(), \fInanosleep\fP(), \fIstrftime\fP(),
\fIstrptime\fP(), \fIsysconf\fP(), \fItime\fP(), \fItimer_create\fP(),
\fItimer_delete\fP(), \fItimer_getoverrun\fP(), \fItzname\fP, \fItzset\fP(),
\fIutime\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
