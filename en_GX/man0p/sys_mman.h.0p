.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<sys/mman.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <sys/mman.h> 
.SH NAME
sys/mman.h \- memory pimpment declarations
.SH SYNOPSIS
.LP
\fB#include <sys/mman.h>\fP
.SH DESCRIPTION
.LP
Da \fI<sys/mman.h>\fP header shall be supported if tha implementation
supports at least one of tha following
options:
.IP " *" 3
Da Memory Mapped Filez option 
.LP
.IP " *" 3
Da Shared Memory Objects option 
.LP
.IP " *" 3
Da Process Memory Lockin option 
.LP
.IP " *" 3
Da Memory Protection option 
.LP
.IP " *" 3
Da Typed Memory Objects option 
.LP
.IP " *" 3
Da Synchronized Input n' Output option 
.LP
.IP " *" 3
Da Advisory Hype option 
.LP
.IP " *" 3
Da Typed Memory Objects option 
.LP
.LP
If one or mo' of tha Advisory Information, Memory Mapped Files, or
Shared Memory Objects options is supported, tha following
protection options shall be defined: 
.TP 7
PROT_READ
Page can be read. Y'all KNOW dat shit, muthafucka! 
.TP 7
PROT_WRITE
Page can be written. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
PROT_EXEC
Page can be executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.TP 7
PROT_NONE
Page cannot be accessed. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da followin \fIflag\fP options shall be defined:
.TP 7
MAP_SHARED
Smoke up chizzles. 
.TP 7
MAP_PRIVATE
Changes is private. 
.TP 7
MAP_FIXED
Interpret \fIaddr\fP exactly. 
.sp
.LP
Da followin flags shall be defined fo' \fImsync\fP():
.TP 7
MS_ASYNC
Perform asynchronous writes. 
.TP 7
MS_SYNC
Perform synchronous writes. 
.TP 7
MS_INVALIDATE
Invalidate mappings. 
.sp
.LP
Da followin symbolic constants shall be defined fo' tha \fImlockall\fP()
function:
.TP 7
MCL_CURRENT
Lock currently mapped pages. 
.TP 7
MCL_FUTURE
Lock pages dat become mapped. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da symbolic constant MAP_FAILED shall be defined ta indicate a gangbangin' failure
from tha \fImmap\fP() function. I aint talkin' bout chicken n' gravy biatch. 
.LP
If tha Advisory Hype n' either tha Memory Mapped Filez or
Shared Memory Objects options is supported, joints for
\fIadvice\fP used by \fIposix_madvise\fP() shall be defined as bigs up:
.TP 7
POSIX_MADV_NORMAL
.sp
Da application has no lyrics ta give on its behavior wit respect
to tha specified range. Well shiiiit, it is tha default characteristic if no
advice is given fo' a range of memory.
.TP 7
POSIX_MADV_SEQUENTIAL
.sp
Da application expects ta access tha specified range sequentially
from lower addresses ta higher addresses.
.TP 7
POSIX_MADV_RANDOM
.sp
Da application expects ta access tha specified range up in a random
order.
.TP 7
POSIX_MADV_WILLNEED
.sp
Da application expects ta access tha specified range up in tha near
future.
.TP 7
POSIX_MADV_DONTNEED
.sp
Da application expects dat it aint gonna access tha specified range
in tha near future.
.sp
.LP
Da followin flags shall be defined fo' \fIposix_typed_mem_open\fP():
.TP 7
POSIX_TYPED_MEM_ALLOCATE
.sp
Allocate on \fImmap\fP().
.TP 7
POSIX_TYPED_MEM_ALLOCATE_CONTIG
.sp
Allocate contiguously on \fImmap\fP().
.TP 7
POSIX_TYPED_MEM_MAP_ALLOCATABLE
.sp
Map on \fImmap\fP(), without affectin allocatability.
.sp
.LP
Da \fBmode_t\fP, \fBoff_t\fP, n' \fBsize_t\fP types shall be defined
as busted lyrics bout up in \fI<sys/types.h>\fP .
.LP
Da \fI<sys/mman.h>\fP header shall define tha structure \fBposix_typed_mem_info\fP,
which includes at least the
followin member:
.sp
.RS
.nf

\fBsize_t  posix_tmi_length \fP Maximum length which may be allocated \fB
                         \fP from a typed memory object. \fB
\fP
.fi
.RE
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fB
int    mlock(const void *, size_t);


int    mlockall(int);


void  *mmap(void *, size_t, int, int, int, off_t);


int    mprotect(void *, size_t, int);


int    msync(void *, size_t, int);


int    munlock(const void *, size_t);


int    munlockall(void);


int    munmap(void *, size_t);


int    posix_madvise(void *, size_t, int);


int    posix_mem_offset(const void *restrict, size_t, off_t *restrict,
           size_t *restrict, int *restrict);
int    posix_typed_mem_get_info(int, struct posix_typed_mem_info *);
int    posix_typed_mem_open(const char *, int, int);


int    shm_open(const char *, int, mode_t);
int    shm_unlink(const char *);

\fP
.fi
.RE
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<sys/types.h>\fP, tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001, \fImlock\fP(), \fImlockall\fP(), \fImmap\fP(),
\fImprotect\fP(), \fImsync\fP(), \fImunlock\fP(), \fImunlockall\fP(),
\fImunmap\fP(), \fIposix_mem_offset\fP(),
\fIposix_typed_mem_get_info\fP(), \fIposix_typed_mem_open\fP(), \fIshm_open\fP(),
\fIshm_unlink\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
