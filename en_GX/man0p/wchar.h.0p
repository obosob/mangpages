.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<wchar.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <wchar.h> 
.SH NAME
wchar.h \- wide-characta handling
.SH SYNOPSIS
.LP
\fB#include <wchar.h>\fP
.SH DESCRIPTION
.LP
Some of tha functionalitizzle busted lyrics bout on dis reference page extends
the ISO\ C standard. Y'all KNOW dat shit, muthafucka! Applications shall define
the appropriate feature test macro (see tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, Section 2.2, Da Compilation Environment)
to enable tha visibilitizzle of these symbols up in this
header n' shit. 
.LP
Da \fI<wchar.h>\fP header shall define tha followin types:
.TP 7
\fBwchar_t\fP
As busted lyrics bout up in \fI<stddef.h>\fP .
.TP 7
\fBwint_t\fP
An integer type capable of storin any valid value of \fBwchar_t\fP
or WEOF.
.TP 7
\fBwctype_t\fP
A scalar type of a thugged-out data object dat can hold joints which represent
locale-specific characta classification. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
\fBmbstate_t\fP
An object type other than a array type dat can hold tha conversion
state shiznit necessary ta convert between sequences
of (possibly multi-byte) charactas n' wide characters.  If a
codeset is bein used such dat a \fBmbstate_t\fP needz to
preserve mo' than 2 levelz of reserved state, tha thangs up in dis biatch is unspecified.
.TP 7
\fBFILE\fP
As busted lyrics bout up in \fI<stdio.h>\fP . 
.TP 7
\fBsize_t\fP
As busted lyrics bout up in \fI<stddef.h>\fP .
.TP 7
\fBva_list\fP
As busted lyrics bout up in \fI<stdarg.h>\fP . 
.sp
.LP
Da implementation shall support one or mo' programmin environments
in which tha width of \fBwint_t\fP is no pimped outa than the
width of type \fBlong\fP. Da namez of these programmin environments
can be obtained rockin tha \fIconfstr\fP() function or tha \fIgetconf\fP
utility.
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBwint_t        btowc(int);
wint_t        fgetwc(FILE *);
wchar_t      *fgetws(wchar_t *restrict, int, FILE *restrict);
wint_t        fputwc(wchar_t, FILE *);
int           fputws(const wchar_t *restrict, FILE *restrict);
int           fwide(FILE *, int);
int           fwprintf(FILE *restrict, const wchar_t *restrict, ...);
int           fwscanf(FILE *restrict, const wchar_t *restrict, ...);
wint_t        getwc(FILE *);
wint_t        getwchar(void);

int           iswalnum(wint_t);
int           iswalpha(wint_t);
int           iswcntrl(wint_t);
int           iswctype(wint_t, wctype_t);
int           iswdigit(wint_t);
int           iswgraph(wint_t);
int           iswlower(wint_t);
int           iswprint(wint_t);
int           iswpunct(wint_t);
int           iswspace(wint_t);
int           iswupper(wint_t);
int           iswxdigit(wint_t);

size_t        mbrlen(const char *restrict, size_t, mbstate_t *restrict);
size_t        mbrtowc(wchar_t *restrict, const char *restrict, size_t,
                  mbstate_t *restrict);
int           mbsinit(const mbstate_t *);
size_t        mbsrtowcs(wchar_t *restrict, const char **restrict, size_t,
                  mbstate_t *restrict);
wint_t        putwc(wchar_t, FILE *);
wint_t        putwchar(wchar_t);
int           swprintf(wchar_t *restrict, size_t,
                  const wchar_t *restrict, ...);
int           swscanf(const wchar_t *restrict,
                  const wchar_t *restrict, ...);

wint_t        towlower(wint_t);
wint_t        towupper(wint_t);

wint_t        ungetwc(wint_t, FILE *);
int           vfwprintf(FILE *restrict, const wchar_t *restrict, va_list);
int           vfwscanf(FILE *restrict, const wchar_t *restrict, va_list);
int           vwprintf(const wchar_t *restrict, va_list);
int           vswprintf(wchar_t *restrict, size_t,
                  const wchar_t *restrict, va_list);
int           vswscanf(const wchar_t *restrict, const wchar_t *restrict,
                  va_list);
int           vwscanf(const wchar_t *restrict, va_list);
size_t        wcrtomb(char *restrict, wchar_t, mbstate_t *restrict);
wchar_t      *wcscat(wchar_t *restrict, const wchar_t *restrict);
wchar_t      *wcschr(const wchar_t *, wchar_t);
int           wcscmp(const wchar_t *, const wchar_t *);
int           wcscoll(const wchar_t *, const wchar_t *);
wchar_t      *wcscpy(wchar_t *restrict, const wchar_t *restrict);
size_t        wcscspn(const wchar_t *, const wchar_t *);
size_t        wcsftime(wchar_t *restrict, size_t,
                  const wchar_t *restrict, const struct tm *restrict);
size_t        wcslen(const wchar_t *);
wchar_t      *wcsncat(wchar_t *restrict, const wchar_t *restrict, size_t);
int           wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t      *wcsncpy(wchar_t *restrict, const wchar_t *restrict, size_t);
wchar_t      *wcspbrk(const wchar_t *, const wchar_t *);
wchar_t      *wcsrchr(const wchar_t *, wchar_t);
size_t        wcsrtombs(char *restrict, const wchar_t **restrict,
                  size_t, mbstate_t *restrict);
size_t        wcsspn(const wchar_t *, const wchar_t *);
wchar_t      *wcsstr(const wchar_t *restrict, const wchar_t *restrict);
double        wcstod(const wchar_t *restrict, wchar_t **restrict);
float         wcstof(const wchar_t *restrict, wchar_t **restrict);
wchar_t      *wcstok(wchar_t *restrict, const wchar_t *restrict,
                  wchar_t **restrict);
long          wcstol(const wchar_t *restrict, wchar_t **restrict, int);
long double   wcstold(const wchar_t *restrict, wchar_t **restrict);
long long     wcstoll(const wchar_t *restrict, wchar_t **restrict, int);
unsigned long wcstoul(const wchar_t *restrict, wchar_t **restrict, int);
unsigned long long
              wcstoull(const wchar_t *restrict, wchar_t **restrict, int);

wchar_t      *wcswcs(const wchar_t *, const wchar_t *);
int           wcswidth(const wchar_t *, size_t);

size_t        wcsxfrm(wchar_t *restrict, const wchar_t *restrict, size_t);
int           wctob(wint_t);

wctype_t      wctype(const char *);
int           wcwidth(wchar_t);

wchar_t      *wmemchr(const wchar_t *, wchar_t, size_t);
int           wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t      *wmemcpy(wchar_t *restrict, const wchar_t *restrict, size_t);
wchar_t      *wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t      *wmemset(wchar_t *, wchar_t, size_t);
int           wprintf(const wchar_t *restrict, ...);
int           wscanf(const wchar_t *restrict, ...);
\fP
.fi
.RE
.LP
Da \fI<wchar.h>\fP header shall define tha followin macros:
.TP 7
WCHAR_MAX
Da maximum value representable by a object of type \fBwchar_t\fP.
.TP 7
WCHAR_MIN
Da minimum value representable by a object of type \fBwchar_t\fP.
.TP 7
WEOF
Constant expression of type \fBwint_t\fP dat is returned by several
WP functions ta indicate end-of-file.
.TP 7
NULL
As busted lyrics bout up in \fI<stddef.h>\fP .
.sp
.LP
Da tag \fBtm\fP shall be declared as namin a incomplete structure
type, tha contentz of which is busted lyrics bout up in tha header \fI<time.h>\fP
\&.
.LP
Inclusion of tha \fI<wchar.h>\fP header may make visible all symbols
from tha headaz \fI<ctype.h>\fP, \fI<string.h>\fP, \fI<stdarg.h>\fP,
\fI<stddef.h>\fP, \fI<stdio.h>\fP, \fI<stdlib.h>\fP, n' \fI<time.h>\fP.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da \fIiswblank\fP() function was a late addizzle ta tha ISO\ C standard
and was
introduced all up in tha same time as tha ISO\ C standard introduced \fI<wctype.h>\fP,
which gotz nuff all of tha \fIisw*\fP() functions. Da Open Group Base
Specifications had
previously aligned wit tha MSE hustlin draft n' had introduced the
rest of tha \fIisw*\fP()
functions tha fuck into \fI<wchar.h>\fP. For backwards-compatibility, tha original
set of 
\fIisw*\fP() functions, without \fIiswblank\fP(), are
permitted (as a XSI extension) up in \fI<wchar.h>\fP. For maximum portability,
applications should include \fI<wctype.h>\fP up in order ta obtain declarations
for tha 
\fIisw*\fP() functions.
.SH RATIONALE
.LP
In tha ISO\ C standard, tha symbols referenced as XSI extensions are
in \fI<wctype.h>\fP. Their presence here is thus a extension.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<ctype.h>\fP, \fI<stdarg.h>\fP, \fI<stddef.h>\fP, \fI<stdio.h>\fP,
\fI<stdlib.h>\fP, \fI<string.h>\fP, \fI<time.h>\fP, \fI<wctype.h>\fP,
the System Interfaces volume of
IEEE\ Std\ 1003.1-2001, \fIbtowc\fP(), \fIconfstr\fP(), \fIfgetwc\fP(),
\fIfgetws\fP(), \fIfputwc\fP(), \fIfputws\fP(), \fIfwide\fP(), \fIfwprintf\fP(),
\fIfwscanf\fP(), \fIgetwc\fP(), \fIgetwchar\fP(), \fIiswalnum\fP(),
\fIiswalpha\fP(), \fIiswcntrl\fP(), \fIiswctype\fP(), \fIiswdigit\fP(),
\fIiswgraph\fP(), \fIiswlower\fP(), \fIiswprint\fP(), \fIiswpunct\fP(),
\fIiswspace\fP(), \fIiswupper\fP(), \fIiswxdigit\fP(), \fIiswctype\fP(),
\fImbsinit\fP(), \fImbrlen\fP(), \fImbrtowc\fP(), \fImbsrtowcs\fP(),
\fIputwc\fP(), \fIputwchar\fP(), \fIswprintf\fP(), \fIswscanf\fP(),
\fItowlower\fP(), \fItowupper\fP(), \fIungetwc\fP(), \fIvfwprintf\fP(),
\fIvfwscanf\fP(), \fIvswprintf\fP(), \fIvswscanf\fP(), \fIvwscanf\fP(),
\fIwcrtomb\fP(), \fIwcsrtombs\fP(), \fIwcscat\fP(), \fIwcschr\fP(),
\fIwcscmp\fP(), \fIwcscoll\fP(), \fIwcscpy\fP(), \fIwcscspn\fP(),
\fIwcsftime\fP(), \fIwcslen\fP(), \fIwcsncat\fP(), \fIwcsncmp\fP(),
\fIwcsncpy\fP(), \fIwcspbrk\fP(), \fIwcsrchr\fP(), \fIwcsspn\fP(),
\fIwcsstr\fP(), \fIwcstod\fP(), \fIwcstof\fP(), \fIwcstok\fP(), \fIwcstol\fP(),
\fIwcstold\fP(), \fIwcstoll\fP(), \fIwcstoul\fP(), \fIwcstoull\fP(),
\fIwcswcs\fP(), \fIwcswidth\fP(), \fIwcsxfrm\fP(), \fIwctob\fP(),
\fIwctype\fP(), \fIwcwidth\fP(), \fIwmemchr\fP(), \fIwmemcmp\fP(),
\fIwmemcpy\fP(), \fIwmemmove\fP(), \fIwmemset\fP(), \fIwprintf\fP(),
\fIwscanf\fP(), tha Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001,
\fIgetconf\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
