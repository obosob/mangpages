.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<complex.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <complex.h> 
.SH NAME
complex.h \- complex arithmetic
.SH SYNOPSIS
.LP
\fB#include <complex.h>\fP
.SH DESCRIPTION
.LP
Da \fI<complex.h>\fP header shall define tha followin macros:
.TP 7
complex
Expandz ta \fB_Complex\fP.
.TP 7
_Complex_I
Expandz ta a cold-ass lil constant expression of type \fBconst float _Complex\fP,
with tha value of tha imaginary unit (that is, a number
\fIi\fP such dat \fIi\fP**2=-1).
.TP 7
imaginary
Expandz ta \fB_Imaginary\fP.
.TP 7
_Imaginary_I
Expandz ta a cold-ass lil constant expression of type \fBconst float _Imaginary\fP
with tha value of tha imaginary unit.
.TP 7
I
Expandz ta either _Imaginary_I or _Complex_I. If _Imaginary_I is not
defined, I expandz ta _Complex_I.
.sp
.LP
Da macros imaginary n' _Imaginary_I shall be defined if n' only
if tha implementation supports imaginary types.
.LP
An application may undefine n' then, like, redefine tha complex,
imaginary, n' I macros.
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBdouble               cabs(double complex);
float                cabsf(float complex);
long double          cabsl(long double complex);
double complex       cacos(double complex);
float complex        cacosf(float complex);
double complex       cacosh(double complex);
float complex        cacoshf(float complex);
long double complex  cacoshl(long double complex);
long double complex  cacosl(long double complex);
double               carg(double complex);
float                cargf(float complex);
long double          cargl(long double complex);
double complex       casin(double complex);
float complex        casinf(float complex);
double complex       casinh(double complex);
float complex        casinhf(float complex);
long double complex  casinhl(long double complex);
long double complex  casinl(long double complex);
double complex       catan(double complex);
float complex        catanf(float complex);
double complex       catanh(double complex);
float complex        catanhf(float complex);
long double complex  catanhl(long double complex);
long double complex  catanl(long double complex);
double complex       ccos(double complex);
float complex        ccosf(float complex);
double complex       ccosh(double complex);
float complex        ccoshf(float complex);
long double complex  ccoshl(long double complex);
long double complex  ccosl(long double complex);
double complex       cexp(double complex);
float complex        cexpf(float complex);
long double complex  cexpl(long double complex);
double               cimag(double complex);
float                cimagf(float complex);
long double          cimagl(long double complex);
double complex       clog(double complex);
float complex        clogf(float complex);
long double complex  clogl(long double complex);
double complex       conj(double complex);
float complex        conjf(float complex);
long double complex  conjl(long double complex);
double complex       cpow(double complex, double complex);
float complex        cpowf(float complex, float complex);
long double complex  cpowl(long double complex, long double complex);
double complex       cproj(double complex);
float complex        cprojf(float complex);
long double complex  cprojl(long double complex);
double               creal(double complex);
float                crealf(float complex);
long double          creall(long double complex);
double complex       csin(double complex);
float complex        csinf(float complex);
double complex       csinh(double complex);
float complex        csinhf(float complex);
long double complex  csinhl(long double complex);
long double complex  csinl(long double complex);
double complex       csqrt(double complex);
float complex        csqrtf(float complex);
long double complex  csqrtl(long double complex);
double complex       ctan(double complex);
float complex        ctanf(float complex);
double complex       ctanh(double complex);
float complex        ctanhf(float complex);
long double complex  ctanhl(long double complex);
long double complex  ctanl(long double complex);
\fP
.fi
.RE
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Values is interpreted as radians, not degrees.
.SH RATIONALE
.LP
Da chizzle of \fII\fP instead of \fIi\fP fo' tha imaginary unit concedes
to tha widespread use of tha identifier \fIi\fP for
other purposes. Da application can bust a gangbangin' finger-lickin' different identifier, say
\fIj\fP, fo' tha imaginary unit by followin tha inclusion of
the \fI<complex.h>\fP header with:
.sp
.RS
.nf

\fB#undef I
#define j _Imaginary_I
\fP
.fi
.RE
.LP
An \fII\fP suffix ta designate imaginary constants aint required,
as multiplication by \fII\fP serves up a sufficiently
convenient n' mo' generally useful notation fo' imaginary terms.
Da correspondin real type fo' tha imaginary unit is
\fBfloat\fP, so dat use of \fII\fP fo' algorithmic or notational
convenience aint gonna result up in widenin types.
.LP
On systems wit imaginary types, tha application has tha mobilitizzle to
control whether use of tha macro I introduces a imaginary
type, by explicitly definin I ta be _Imaginary_I or _Complex_I. Disallowing
imaginary types is useful fo' some applications
intended ta run on implementations without support fo' such types.
.LP
Da macro _Imaginary_I serves up a test fo' whether imaginary types
are supported.
.LP
Da \fIcis\fP() function (\fIcos\fP(\fIx\fP) + \fII\fP*\fIsin\fP(\fIx\fP))
was considered but rejected cuz its
implementation is easy as fuck  n' straightforward, even though some implementations
could compute sine n' cosine mo' efficiently in
tandem.
.SH FUTURE DIRECTIONS
.LP
Da followin function names n' tha same names suffixed wit \fIf\fP
or \fIl\fP is reserved fo' future use, n' may be added
to tha declarations up in tha \fI<complex.h>\fP header.
.TS C
center; lw(26) lw(26) lw(26).
T{
.br
\fIcerf\fP()
.br
\fIcerfc\fP()
.br
\fIcexp2\fP()
.br
\ 
T}	T{
.br
\fIcexpm1\fP()
.br
\fIclog10\fP()
.br
\fIclog1p\fP()
.br
\ 
T}	T{
.br
\fIclog2\fP()
.br
\fIclgamma\fP()
.br
\fIctgamma\fP()
.br
\ 
T}
.TE
.SH SEE ALSO
.LP
Da System Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIcabs\fP(),
\fIcacos\fP(), \fIcacosh\fP(), \fIcarg\fP(), \fIcasin\fP(), \fIcasinh\fP(),
\fIcatan\fP(), \fIcatanh\fP(), \fIccos\fP(), \fIccosh\fP(), \fIcexp\fP(),
\fIcimag\fP(), \fIclog\fP(), \fIconj\fP(), \fIcpow\fP(), \fIcproj\fP(),
\fIcreal\fP(), \fIcsin\fP(), \fIcsinh\fP(), \fIcsqrt\fP(), \fIctan\fP(),
\fIctanh\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
