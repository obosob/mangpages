.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<signal.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <signal.h> 
.SH NAME
signal.h \- signals
.SH SYNOPSIS
.LP
\fB#include <signal.h>\fP
.SH DESCRIPTION
.LP
Some of tha functionalitizzle busted lyrics bout on dis reference page extends
the ISO\ C standard. Y'all KNOW dat shit, muthafucka! Applications shall define
the appropriate feature test macro (see tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, Section 2.2, Da Compilation Environment)
to enable tha visibilitizzle of these symbols up in this
header n' shit. 
.LP
Da \fI<signal.h>\fP header shall define tha followin symbolic constants,
each of which expandz ta a gangbangin' finger-lickin' distinct constant
expression of tha type:
.sp
.RS
.nf

\fBvoid (*)(int)
\fP
.fi
.RE
.LP
whose value matches no declarable function.
.TP 7
SIG_DFL
Request fo' default signal handling.
.TP 7
SIG_ERR
Return value from \fIsignal\fP() up in case of error.
.TP 7
SIG_HOLD
Request dat signal be held. Y'all KNOW dat shit, muthafucka! 
.TP 7
SIG_IGN
Request dat signal be ignored.
.sp
.LP
Da followin data types shall be defined all up in \fBtypedef\fP:
.TP 7
\fBsig_atomic_t\fP
Possibly volatile-qualified integer type of a object dat can be
accessed as a atomic entity, even up in tha presence of
asynchronous interrupts.
.TP 7
\fBsigset_t\fP
Integer or structure type of a object used ta represent setz of signals.
.TP 7
\fBpid_t\fP
As
busted lyrics bout up in \fI<sys/types.h>\fP . 
.sp
.LP
Da \fI<signal.h>\fP header shall define tha \fBsigevent\fP structure,
which has at least tha followin members:
.sp
.RS
.nf

\fBint                    sigev_notify           \fP Notification type. \fB
int                    sigev_signo            \fP Signal number n' shit. \fB
union sigval           sigev_value            \fP Signal value. \fB
void(*)(union sigval)  sigev_notify_function  \fP Notification function. I aint talkin' bout chicken n' gravy biatch. \fB
(pthread_attr_t *)     sigev_notify_attributes\fP Notification attributes. \fB
\fP
.fi
.RE
.LP
Da followin jointz of \fIsigev_notify\fP shall be defined:
.TP 7
SIGEV_NONE
No asynchronous notification is served up when tha event of interest
occurs.
.TP 7
SIGEV_SIGNAL
A queued signal, wit a application-defined value, is generated when
the event of interest occurs.
.TP 7
SIGEV_THREAD
A notification function is called ta big-ass up notification.
.sp
.LP
Da \fBsigval\fP union shall be defined as:
.sp
.RS
.nf

\fBint    sival_int   \fP Integer signal value. \fB
void  *sival_ptr   \fP Pointa signal value. \fB
\fP
.fi
.RE
.LP
This header shall also declare tha macros SIGRTMIN n' SIGRTMAX, which
evaluate ta integer expressions, n' specify a range of
signal numbers dat is reserved fo' application use n' fo' which
the realtime signal behavior specified up in dis volume of
IEEE\ Std\ 1003.1-2001 is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da signal numbers up in dis range
do not overlap any of tha signals specified up in the
followin table.
.LP
Da range SIGRTMIN all up in SIGRTMAX inclusive shall include at least
{RTSIG_MAX} signal numbers.
.LP
It be implementation-defined whether realtime signal behavior is supported
for other signals. 
.LP
This header also declares tha constants dat is used ta refer to
the signals dat occur up in tha system. Right back up in yo muthafuckin ass. Signals defined here
begin wit tha lettas SIG. Each of tha signals have distinct positive
integer joints, n' you can put dat on yo' toast. Da value 0 is reserved fo' use as tha null
signal (see \fIkill\fP()) fo' realz. Additionizzle implementation-defined signals
may occur up in the
system.
.LP
The
ISO\ C standard only requires tha signal names SIGABRT, SIGFPE, SIGILL,
SIGINT, SIGSEGV, n' SIGTERM ta be defined. Y'all KNOW dat shit, muthafucka! 
.LP
Da followin signals shall be supported on all implementations (default
actions is explained below tha table):
.TS C
center; l1 l1 lw(40).
\fBSignal\fP	\fBDefault Action\fP	T{
.na
\fBDescription\fP
.ad
T}
SIGABRT	A	T{
.na
Process abort signal.
.ad
T}
SIGALRM	T	T{
.na
Alarm clock.
.ad
T}
SIGBUS	A	T{
.na
Access ta a undefined portion of a memory object.
.ad
T}
SIGCHLD	I	T{
.na
Lil Pimp process terminated, stopped,
.ad
T}
\ 	\ 	T{
.na
or continued.
.ad
T}
SIGCONT	C	T{
.na
Continue executing, if stopped.
.ad
T}
SIGFPE	A	T{
.na
Erroneous arithmetic operation.
.ad
T}
SIGHUP	T	T{
.na
Hangup.
.ad
T}
SIGILL	A	T{
.na
Illegal instruction.
.ad
T}
SIGINT	T	T{
.na
Terminal interrupt signal.
.ad
T}
SIGKILL	T	T{
.na
Bust a cap up in (cannot be caught or ignored).
.ad
T}
SIGPIPE	T	T{
.na
Write on a pipe wit no one ta read dat shit.
.ad
T}
SIGQUIT	A	T{
.na
Terminal quit signal.
.ad
T}
SIGSEGV	A	T{
.na
Invalid memory reference.
.ad
T}
SIGSTOP	S	T{
.na
Quit executin (cannot be caught or ignored).
.ad
T}
SIGTERM	T	T{
.na
Termination signal.
.ad
T}
SIGTSTP	S	T{
.na
Terminal stop signal.
.ad
T}
SIGTTIN	S	T{
.na
Background process attemptin read.
.ad
T}
SIGTTOU	S	T{
.na
Background process attemptin write.
.ad
T}
SIGUSR1	T	T{
.na
User-defined signal 1.
.ad
T}
SIGUSR2	T	T{
.na
User-defined signal 2.
.ad
T}
SIGPOLL	T	T{
.na
Pollable event.
.ad
T}
SIGPROF	T	T{
.na
Profilin timer expired.
.ad
T}
SIGSYS	A	T{
.na
Wack system call.
.ad
T}
SIGTRAP	A	T{
.na
Trace/breakpoint trap.
.ad
T}
SIGURG	I	T{
.na
High bandwidth data be available at a socket.
.ad
T}
SIGVTALRM	T	T{
.na
Virtual timer expired.
.ad
T}
SIGXCPU	A	T{
.na
CPU time limit exceeded.
.ad
T}
SIGXFSZ	A	T{
.na
File size limit exceeded.
.ad
T}
.TE
.LP
Da default actions is as bigs up:
.TP 7
T
Abnormal termination of tha process. Da process is terminated with
all tha consequencez of \fI_exit\fP() except dat tha status made
available ta \fIwait\fP() n' \fIwaitpid\fP() indicates abnormal
termination by tha specified signal.
.TP 7
A
Abnormal termination of tha process.
.br
Additionally, implementation-defined abnormal termination actions,
like fuckin creation of a \fBcore\fP file, may occur. Shiiit, dis aint no joke. 
.TP 7
I
Ignore tha signal.
.TP 7
S
Quit tha process.
.TP 7
C
Continue tha process, if it is stopped; otherwise, ignore tha signal.
.sp
.sp
.LP
The
header shall provide a thugged-out declaration of \fBstruct sigaction\fP, including
at least tha followin members:
.sp
.RS
.nf

\fBvoid (*sa_handlez)(int) \fP Pointa ta a signal-catchin function or one of tha macros \fB
                        \fP SIG_IGN or SIG_DFL. \fB
sigset_t sa_mask        \fP Set of signals ta be blocked durin execution of tha signal \fB
                        \fP handlin function. I aint talkin' bout chicken n' gravy biatch. \fB
int      sa_flags       \fP Special flags. \fB
void (*sa_sigaction)(int, siginfo_t *, void *)
                        \fP Pointa ta a signal-catchin function. I aint talkin' bout chicken n' gravy biatch. \fB
\fP
.fi
.RE
.LP
Da storage occupied by \fIsa_handlez\fP n' \fIsa_sigaction\fP may
overlap, n' a cold-ass lil conformin application shall not use both
simultaneously. 
.LP
Da followin shall be declared as constants:
.TP 7
SA_NOCLDSTOP
Do
not generate SIGCHLD when lil pimps stop 
.br
or
stopped lil pimps continue. 
.TP 7
SIG_BLOCK
Da resultin set is tha union of tha current set n' tha signal set
pointed ta by tha argument \fIset\fP. 
.TP 7
SIG_UNBLOCK
Da resultin set is tha intersection of tha current set n' tha complement
of tha signal set pointed ta by tha argument
\fIset\fP. 
.TP 7
SIG_SETMASK
Da resultin set is tha signal set pointed ta by tha argument \fIset\fP.
.TP 7
SA_ONSTACK
Causes signal delivery ta occur on a alternate stack. 
.TP 7
SA_RESETHAND
Causes signal dispositions ta be set ta SIG_DFL on entry ta signal
handlezs. 
.TP 7
SA_RESTART
Causes certain functions ta become restartable. 
.TP 7
SA_SIGINFO
Causes extra shiznit ta be passed ta signal handlezs all up in tha time
of receipt of a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. 
.TP 7
SA_NOCLDWAIT
Causes implementations not ta create zombie processes on lil pimp dirtnap.
.TP 7
SA_NODEFER
Causes signal not ta be automatically blocked on entry ta signal handlez.
.TP 7
SS_ONSTACK
Process is executin on a alternate signal stack. 
.TP 7
SS_DISABLE
Alternate signal stack is disabled. Y'all KNOW dat shit, muthafucka! 
.TP 7
MINSIGSTKSZ
Minimum stack size fo' a signal handlez n' shit. 
.TP 7
SIGSTKSZ
Default size up in bytes fo' tha alternate signal stack. 
.sp
.LP
Da \fBucontext_t\fP structure shall be defined all up in \fBtypedef\fP
as busted lyrics bout up in \fI<ucontext.h>\fP.
.LP
Da \fBmcontext_t\fP type shall be defined all up in \fBtypedef\fP as
busted lyrics bout up in \fI<ucontext.h>\fP.
.LP
Da \fI<signal.h>\fP header shall define tha \fBstack_t\fP type as
a structure dat includes at least tha following
members:
.sp
.RS
.nf

\fBvoid     *ss_sp      \fP Stack base or pointer n' shit. \fB
size_t    ss_size    \fP Stack size. \fB
int       ss_flags   \fP Flags. \fB
\fP
.fi
.RE
.LP
Da \fI<signal.h>\fP header shall define tha \fBsigstack\fP structure
that includes at least tha followin members:
.sp
.RS
.nf

\fBint       ss_onstack \fP Non-zero when signal stack is up in use. \fB
void     *ss_sp      \fP Signal stack pointer n' shit. \fB
\fP
.fi
.RE
.LP
The
\fI<signal.h>\fP header shall define tha \fBsiginfo_t\fP type as a
structure dat includes at least tha followin members:
.sp
.RS
.nf

\fB
int           si_signo \fP Signal number n' shit. \fB


int           si_errno \fP If non-zero, a \fIerrno\fP value associated wit \fB
                       \fP dis signal, as defined up in \fB<errno.h>.\fP \fB


int           si_code  \fP Signal code. \fB


pid_t         si_pid   \fP Sendin process ID. \fB
uid_t         si_uid   \fP Real user ID of bustin  process. \fB
void         *si_addr  \fP Address of faultin instruction. I aint talkin' bout chicken n' gravy biatch. \fB
int           si_status\fP Exit value or signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. \fB
long          si_band  \fP Band event fo' SIGPOLL. \fB


union sigval  si_value \fP Signal value. \fB

\fP
.fi
.RE
.LP
Da macros specified up in tha \fBCode\fP column of tha followin table
are defined fo' use as jointz of \fIsi_code\fP dat are
\ signal-specific or  non-signal-specific reasons why tha signal
was generated.
.TS C
center; l l lw(40).
\fBSignal\fP	\fBCode\fP	T{
.na
\fBReason\fP
.ad
T}
SIGILL	ILL_ILLOPC	T{
.na
Illegal opcode.
.ad
T}
\ 	ILL_ILLOPN	T{
.na
Illegal operand.
.ad
T}
\ 	ILL_ILLADR	T{
.na
Illegal addressin mode.
.ad
T}
\ 	ILL_ILLTRP	T{
.na
Illegal trap.
.ad
T}
\ 	ILL_PRVOPC	T{
.na
Privileged opcode.
.ad
T}
\ 	ILL_PRVREG	T{
.na
Privileged register.
.ad
T}
\ 	ILL_COPROC	T{
.na
Coprocessor error.
.ad
T}
\ 	ILL_BADSTK	T{
.na
Internal stack error.
.ad
T}
SIGFPE	FPE_INTDIV	T{
.na
Integer divide by zero.
.ad
T}
\ 	FPE_INTOVF	T{
.na
Integer overflow.
.ad
T}
\ 	FPE_FLTDIV	T{
.na
Floating-point divide by zero.
.ad
T}
\ 	FPE_FLTOVF	T{
.na
Floating-point overflow.
.ad
T}
\ 	FPE_FLTUND	T{
.na
Floating-point underflow.
.ad
T}
\ 	FPE_FLTRES	T{
.na
Floating-point inexact result.
.ad
T}
\ 	FPE_FLTINV	T{
.na
Invalid floating-point operation.
.ad
T}
\ 	FPE_FLTSUB	T{
.na
Subscript outta range.
.ad
T}
SIGSEGV	SEGV_MAPERR	T{
.na
Address not mapped ta object.
.ad
T}
\ 	SEGV_ACCERR	T{
.na
Invalid permissions fo' mapped object.
.ad
T}
SIGBUS	BUS_ADRALN	T{
.na
Invalid address alignment.
.ad
T}
\ 	BUS_ADRERR	T{
.na
Nonexistent physical address.
.ad
T}
\ 	BUS_OBJERR	T{
.na
Object-specific hardware error.
.ad
T}
SIGTRAP	TRAP_BRKPT	T{
.na
Process breakpoint.
.ad
T}
\ 	TRAP_TRACE	T{
.na
Process trace trap.
.ad
T}
SIGCHLD	CLD_EXITED	T{
.na
Lil Pimp has exited.
.ad
T}
\ 	CLD_KILLED	T{
.na
Lil Pimp has terminated abnormally n' did not create a \fBcore\fP file.
.ad
T}
\ 	CLD_DUMPED	T{
.na
Lil Pimp has terminated abnormally n' pimped a \fBcore\fP file.
.ad
T}
\ 	CLD_TRAPPED	T{
.na
Traced lil pimp has trapped.
.ad
T}
\ 	CLD_STOPPED	T{
.na
Lil Pimp has stopped.
.ad
T}
\ 	CLD_CONTINUED	T{
.na
Stopped lil pimp has continued.
.ad
T}
SIGPOLL	POLL_IN	T{
.na
Data input available.
.ad
T}
\ 	POLL_OUT	T{
.na
Output buffers available.
.ad
T}
\ 	POLL_MSG	T{
.na
Input message available.
.ad
T}
\ 	POLL_ERR	T{
.na
I/O error.
.ad
T}
\ 	POLL_PRI	T{
.na
High prioritizzle input available.
.ad
T}
\ 	POLL_HUP	T{
.na
Device disconnected.
.ad
T}
Any	SI_USER	T{
.na
Signal busted by \fIkill\fP().
.ad
T}
\ 	SI_QUEUE	T{
.na
Signal busted by tha \fIsigqueue\fP().
.ad
T}
\ 	SI_TIMER	T{
.na
Signal generated by expiration of a timer set by \fItimer_settime\fP().
.ad
T}
\ 	SI_ASYNCIO	T{
.na
Signal generated by completion of a asynchronous I/O request.
.ad
T}
\ 	SI_MESGQ	T{
.na
Signal generated by arrival of a message on a empty message queue.
.ad
T}
.TE
.LP
Implementations may support additionizzle \fIsi_code\fP joints not included
in dis list, may generate joints included up in dis list
under circumstances other than dem busted lyrics bout up in dis list, n' may
contain extensions or limitations dat prevent some joints
from bein generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Implementations do not generate a gangbangin' finger-lickin' different
value from tha ones busted lyrics bout up in dis list fo' circumstances
busted lyrics bout up in dis list.
.LP
In addition, tha followin signal-specific shiznit shall be available:
.TS C
center; l1 l1 l.
\fBSignal\fP	\fBMember\fP	\fBValue\fP
SIGILL	\fBvoid * \fIsi_addr\fP\fP	Address of faultin instruction.
SIGFPE	\fB\ \fP	\ 
SIGSEGV	\fBvoid * \fIsi_addr\fP\fP	Address of faultin memory reference.
SIGBUS	\fB\ \fP	\ 
SIGCHLD	\fBpid_t \fIsi_pid\fP\fP	Lil Pimp process ID.
\ 	\fBint \fIsi_status\fP\fP	Exit value or signal.
\ 	\fBuid_t \fIsi_uid\fP\fP	Real user ID of tha process dat busted tha signal.
SIGPOLL	\fBlong \fIsi_band\fP\fP	Band event fo' POLL_IN, POLL_OUT, or POLL_MSG.
.TE
.LP
For some implementations, tha value of \fIsi_addr\fP may be inaccurate.
.LP
Da followin shall be declared as functions n' may also be defined
as macros:
.sp
.RS
.nf

\fB
void (*bsd_signal(int, void (*)(int)))(int);


int    kill(pid_t, int);


int    killpg(pid_t, int);


int    pthread_kill(pthread_t, int);
int    pthread_sigmask(int, const sigset_t *, sigset_t *);

int    raise(int);

int    sigaction(int, const struct sigaction *restrict,
           struct sigaction *restrict);
int    sigaddset(sigset_t *, int);


int    sigaltstack(const stack_t *restrict, stack_t *restrict);


int    sigdelset(sigset_t *, int);
int    sigemptyset(sigset_t *);
int    sigfillset(sigset_t *);


int    sighold(int);
int    sigignore(int);
int    siginterrupt(int, int);


int    sigismember(const sigset_t *, int);

void (*signal(int, void (*)(int)))(int);

int    sigpause(int);


int    sigpending(sigset_t *);
int    sigprocmask(int, const sigset_t *restrict, sigset_t *restrict);


int    sigqueue(pid_t, int, const union sigval);


int    sigrelse(int);
void (*sigset(int, void (*)(int)))(int);


int    sigsuspend(const sigset_t *);


int    sigtimedwait(const sigset_t *restrict, siginfo_t *restrict,
           const struct timespec *restrict);


int    sigwait(const sigset_t *restrict, int *restrict);


int    sigwaitinfo(const sigset_t *restrict, siginfo_t *restrict);

\fP
.fi
.RE
.LP
Inclusion of tha \fI<signal.h>\fP header may make visible all symbols
from tha \fI<time.h>\fP header n' shit. 
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<errno.h>\fP, \fI<stropts.h>\fP, \fI<sys/types.h>\fP, \fI<time.h>\fP,
\fI<ucontext.h>\fP, tha System Interfaces volume of IEEE\ Std\ 1003.1-2001,
\fIalarm\fP(), \fIbsd_signal\fP(), \fIioctl\fP(), \fIkill\fP(), \fIkillpg\fP(),
\fIraise\fP(), \fIsigaction\fP(), \fIsigaddset\fP(), \fIsigaltstack\fP(),
\fIsigdelset\fP(), \fIsigemptyset\fP(), \fIsigfillset\fP(), \fIsiginterrupt\fP(),
\fIsigismember\fP(), \fIsignal\fP(), \fIsigpending\fP(), \fIsigprocmask\fP(),
\fIsigqueue\fP(), \fIsigsuspend\fP(), \fIsigwaitinfo\fP(), \fIwait\fP(),
\fIwaitid\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
