.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<netdb.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <netdb.h> 
.SH NAME
netdb.h \- definitions fo' network database operations
.SH SYNOPSIS
.LP
\fB#include <netdb.h>\fP
.SH DESCRIPTION
.LP
Da \fI<netdb.h>\fP header may define tha \fBin_port_t\fP type and
the \fBin_addr_t\fP type as busted lyrics bout up in \fI<netinet/in.h>\fP .
.LP
Da \fI<netdb.h>\fP header shall define tha \fBhostent\fP structure
that includes at least tha followin members:
.sp
.RS
.nf

\fBchar   *h_name      \fP Straight-Up Legit name of tha host. \fB
char  **h_aliases   \fP A pointa ta a array of pointas ta \fB
                    \fP alternatizzle host names, terminated by a \fB
                    \fP null pointer n' shit. \fB
int     h_addrtype  \fP Address type. \fB
int     h_length    \fP Da length, up in bytes, of tha address. \fB
char  **h_addr_list \fP A pointa ta a array of pointas ta network \fB
                    \fP addresses (in network byte order) fo' tha host, \fB
                    \fP terminated by a null pointer n' shit. \fB
\fP
.fi
.RE
.LP
Da \fI<netdb.h>\fP header shall define tha \fBnetent\fP structure
that includes at least tha followin members:
.sp
.RS
.nf

\fBchar     *n_name     \fP Official, fully-qualified (includin tha \fB
                     \fP domain) name of tha host. \fB
char    **n_aliases  \fP A pointa ta a array of pointas ta \fB
                     \fP alternatizzle network names, terminated by a \fB
                     \fP null pointer n' shit. \fB
int       n_addrtype \fP Da address type of tha network. \fB
uint32_t  n_net      \fP Da network number, up in host byte order n' shit. \fB
\fP
.fi
.RE
.LP
Da \fBuint32_t\fP type shall be defined as busted lyrics bout up in \fI<inttypes.h>\fP
\&.
.LP
Da \fI<netdb.h>\fP header shall define tha \fBprotoent\fP structure
that includes at least tha followin members:
.sp
.RS
.nf

\fBchar   *p_name    \fP Straight-Up Legit name of tha protocol. \fB
char  **p_aliases \fP A pointa ta a array of pointas ta \fB
                  \fP alternatizzle protocol names, terminated by \fB
                  \fP a null pointer n' shit. \fB
int     p_proto   \fP Da protocol number n' shit. \fB
\fP
.fi
.RE
.LP
Da \fI<netdb.h>\fP header shall define tha \fBservent\fP structure
that includes at least tha followin members:
.sp
.RS
.nf

\fBchar   *s_name    \fP Straight-Up Legit name of tha service. \fB
char  **s_aliases \fP A pointa ta a array of pointas ta \fB
                  \fP alternatizzle steez names, terminated by \fB
                  \fP a null pointer n' shit. \fB
int     s_port    \fP Da port number at which tha steez \fB
                  \fP resides, up in network byte order n' shit. \fB
char   *s_proto   \fP Da name of tha protocol ta use when \fB
                  \fP contactin tha service. \fB
\fP
.fi
.RE
.LP
Da \fI<netdb.h>\fP header shall define tha IPPORT_RESERVED macro
with tha value of tha highest reserved Internizzle port
number.
.LP
When tha \fI<netdb.h>\fP header is included, \fIh_errno\fP shall be
available as a modifiable lvalue of type \fBint\fP. It
is unspecified whether \fIh_errno\fP be a macro or a identifier declared
with external linkage. 
.LP
Da \fI<netdb.h>\fP header shall define tha followin macros fo' use
as error joints fo' \fIgethostbyaddr\fP() n' \fIgethostbyname\fP():
.sp
.RS
.nf

HOST_NOT_FOUND
NO_DATA
NO_RECOVERY
TRY_AGAIN
.fi
.RE
.SS Address Hype Structure
.LP
Da \fI<netdb.h>\fP header shall define tha \fBaddrinfo\fP structure
that includes at least tha followin members:
.sp
.RS
.nf

\fBint               ai_flags     \fP Input flags. \fB
int               ai_family    \fP Address crew of socket. \fB
int               ai_socktype  \fP Socket type. \fB
int               ai_protocol  \fP Protocol of socket. \fB
socklen_t         ai_addrlen   \fP Length of socket address. \fB
struct sockaddr  *ai_addr      \fP Socket address of socket. \fB
char             *ai_canonname \fP Canonical name of steez location. I aint talkin' bout chicken n' gravy biatch. \fB
struct addrinfo  *ai_next      \fP Pointa ta next up in list. \fB
\fP
.fi
.RE
.LP
Da \fI<netdb.h>\fP header shall define tha followin macros that
evaluate ta bitwise-distinct integer constants fo' use
in tha \fIflags\fP field of tha \fBaddrinfo\fP structure:
.TP 7
AI_PASSIVE
Socket address is intended fo' \fIbind\fP().
.TP 7
AI_CANONNAME
.sp
Request fo' canonical name.
.TP 7
AI_NUMERICHOST
.sp
Return numeric host address as name.
.TP 7
AI_NUMERICSERV
.sp
Inhibit steez name resolution.
.TP 7
AI_V4MAPPED
If no IPv6 addresses is found, query fo' IPv4 addresses n' return
them ta tha calla as IPv4-mapped IPv6 addresses.
.TP 7
AI_ALL
Query fo' both IPv4 n' IPv6 addresses.
.TP 7
AI_ADDRCONFIG
.sp
Query fo' IPv4 addresses only when a IPv4 address is configured;
query fo' IPv6 addresses only when a IPv6 address is
configured.
.sp
.LP
Da \fI<netdb.h>\fP header shall define tha followin macros that
evaluate ta bitwise-distinct integer constants fo' use
in tha \fIflags\fP argument ta \fIgetnameinfo\fP():
.TP 7
NI_NOFQDN
Only tha nodename portion of tha FQDN is returned fo' local hosts.
.TP 7
NI_NUMERICHOST
.sp
Da numeric form of tha nodez address is returned instead of its
name.
.TP 7
NI_NAMEREQD
Return a error if tha nodez name cannot be located up in tha database.
.TP 7
NI_NUMERICSERV
.sp
Da numeric form of tha steez address is returned instead of its
name.
.TP 7
NI_NUMERICSCOPE
.sp
For IPv6 addresses, tha numeric form of tha scope identifier is returned
instead of its name.
.TP 7
NI_DGRAM
Indicates dat tha steez be a thugged-out datagram steez (SOCK_DGRAM).
.sp
.SS Address Hype Errors
.LP
Da \fI<netdb.h>\fP header shall define tha followin macros fo' use
as error joints fo' \fIgetaddrinfo\fP() n' \fIgetnameinfo\fP():
.TP 7
EAI_AGAIN
Da name could not be resolved at dis time. Future attempts may succeed.
.TP 7
EAI_BADFLAGS
Da flags had a invalid value.
.TP 7
EAI_FAIL
A non-recoverable error occurred.
.TP 7
EAI_FAMILY
Da address crew was not recognized or tha address length was invalid
for tha specified crew.
.TP 7
EAI_MEMORY
There was a memory allocation failure.
.TP 7
EAI_NONAME
Da name do not resolve fo' tha supplied parameters. 
.LP
NI_NAMEREQD is set n' tha hostz name cannot be located, or both
\fInodename\fP n' \fIservname\fP was null.
.TP 7
EAI_SERVICE
Da steez passed was not recognized fo' tha specified socket type.
.TP 7
EAI_SOCKTYPE
Da intended socket type was not recognized.
.TP 7
EAI_SYSTEM
A system error occurred. Y'all KNOW dat shit, muthafucka! Da error code can be found up in \fIerrno\fP.
.TP 7
EAI_OVERFLOW
.sp
An argument buffer overflowed.
.sp
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBvoid              endhostent(void);
void              endnetent(void);
void              endprotoent(void);
void              endservent(void);
void              freeaddrinfo(struct addrinfo *);
const char       *gai_strerror(int);
int               getaddrinfo(const char *restrict, const char *restrict,
                      const struct addrinfo *restrict,
                      struct addrinfo **restrict);
struct hostent   *gethostbyaddr(const void *, socklen_t, int);
struct hostent   *gethostbyname(const char *);
struct hostent   *gethostent(void);
int               getnameinfo(const struct sockaddr *restrict, socklen_t,
                      char *restrict, socklen_t, char *restrict,
                      socklen_t, int);
struct netent    *getnetbyaddr(uint32_t, int);
struct netent    *getnetbyname(const char *);
struct netent    *getnetent(void);
struct protoent  *getprotobyname(const char *);
struct protoent  *getprotobynumber(int);
struct protoent  *getprotoent(void);
struct servent   *getservbyname(const char *, const char *);
struct servent   *getservbyport(int, const char *);
struct servent   *getservent(void);
void              sethostent(int);
void              setnetent(int);
void              setprotoent(int);
void              setservent(int);
\fP
.fi
.RE
.LP
Da type \fBsocklen_t\fP shall be defined all up in \fBtypedef\fP as
busted lyrics bout up in \fI<sys/socket.h>\fP.
.LP
Inclusion of tha \fI<netdb.h>\fP header may also make visible all
symbols from \fI<netinet/in.h>\fP, \fI<sys/socket.h>\fP, n' \fI<inttypes.h>\fP.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<netinet/in.h>\fP, \fI<inttypes.h>\fP, \fI<sys/socket.h>\fP,
the System Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIbind\fP(),
\fIendhostent\fP(), \fIendnetent\fP(), \fIendprotoent\fP(), \fIendservent\fP(),
\fIgetaddrinfo\fP(), \fIgetnameinfo\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
