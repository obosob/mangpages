.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<sys/stat.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <sys/stat.h> 
.SH NAME
sys/stat.h \- data returned by tha stat() function
.SH SYNOPSIS
.LP
\fB#include <sys/stat.h>\fP
.SH DESCRIPTION
.LP
Da \fI<sys/stat.h>\fP header shall define tha structure of tha data
returned by tha functions \fIfstat\fP(), \fIlstat\fP(), n' \fIstat\fP().
.LP
Da \fBstat\fP structure shall contain at least tha followin members:
.sp
.RS
.nf

\fBdev_t     st_dev    \fP Device ID of thang containin file. \fB
ino_t     st_ino    \fP File serial number n' shit. \fB
mode_t    st_mode   \fP Mode of file (see below). \fB
nlink_t   st_nlink  \fP Number of hard links ta tha file. \fB
uid_t     st_uid    \fP User ID of file. \fB
gid_t     st_gid    \fP Group ID of file. \fB

dev_t     st_rdev   \fP Device ID (if file is characta or block special). \fB

off_t     st_size   \fP For regular files, tha file size up in bytes. \fB
                    \fP For symbolic links, tha length up in bytez of tha \fB
                    \fP pathname contained up in tha symbolic link. \fB

                    \fP For a gangbangin' finger-lickin' dirty-ass shared memory object, tha length up in bytes. \fB


                    \fP For a typed memory object, tha length up in bytes. \fB

                    \fP For other file types, tha use of dis field is \fB
                    \fP unspecified. Y'all KNOW dat shit, muthafucka! \fB
time_t    st_atime  \fP Time of last access. \fB
time_t    st_mtime  \fP Time of last data modification. I aint talkin' bout chicken n' gravy biatch. \fB
time_t    st_ctime  \fP Time of last status chizzle. \fB

blksize_t st_blksize\fP A file system-specific preferred I/O block size fo' \fB
                    \fP dis object. In some file system types, dis may \fB
                    \fP vary from file ta file. \fB
blkcnt_t  st_blocks \fP Number of blocks allocated fo' dis object. \fB

\fP
.fi
.RE
.LP
Da \fIst_ino\fP n' \fIst_dev\fP fieldz taken together uniquely identify
the file within tha system. Da \fBblkcnt_t\fP,
\fBblksize_t\fP, \fBdev_t\fP, \fBino_t\fP, \fBmode_t\fP, \fBnlink_t\fP,
\fBuid_t\fP, \fBgid_t\fP, \fBoff_t\fP, and
\fBtime_t\fP types shall be defined as busted lyrics bout up in \fI<sys/types.h>\fP
\&. Times
shall be given up in secondz since tha Epoch.
.LP
Unless otherwise specified, tha structure thugz \fIst_mode\fP, \fIst_ino\fP,
\fIst_dev\fP, \fIst_uid\fP, \fIst_gid\fP,
\fIst_atime\fP, \fIst_ctime\fP, n' \fIst_mtime\fP shall have meaningful
values fo' all file types defined in
IEEE\ Std\ 1003.1-2001.
.LP
For symbolic links, tha \fIst_mode\fP member shall contain meaningful
information, which can be used wit tha file type macros
busted lyrics bout below, dat take a \fImode\fP argument. Da \fIst_size\fP
member shall contain tha length, up in bytes, of tha pathname
contained up in tha symbolic link. File mode bits n' tha contents of
the remainin thugz of tha \fBstat\fP structure are
unspecified. Y'all KNOW dat shit, muthafucka! Da value returned up in tha \fIst_size\fP field shall be
the length of tha contentz of tha symbolic link, n' shall not
count a trailin null if one is present.
.LP
Da followin symbolic names fo' tha jointz of type \fBmode_t\fP shall
also be defined.
.LP
File type:
.TP 7
S_IFMT
Type of file. 
.TP 7
S_IFBLK
.RS
Block special.
.RE
.TP 7
S_IFCHR
.RS
Characta special.
.RE
.TP 7
S_IFIFO
.RS
FIFO special.
.RE
.TP 7
S_IFREG
.RS
Regular.
.RE
.TP 7
S_IFDIR
.RS
Directory.
.RE
.TP 7
S_IFLNK
.RS
Symbolic link.
.RE
.TP 7
S_IFSOCK
.RS
Socket. 
.RE
.sp
.sp
.LP
File mode bits:
.TP 7
S_IRWXU
Read, write, execute/search by balla n' shit. 
.TP 7
S_IRUSR
.RS
Read permission, baller.
.RE
.TP 7
S_IWUSR
.RS
Write permission, baller.
.RE
.TP 7
S_IXUSR
.RS
Execute/search permission, baller.
.RE
.sp
.TP 7
S_IRWXG
Read, write, execute/search by group. 
.TP 7
S_IRGRP
.RS
Read permission, group.
.RE
.TP 7
S_IWGRP
.RS
Write permission, group.
.RE
.TP 7
S_IXGRP
.RS
Execute/search permission, group.
.RE
.sp
.TP 7
S_IRWXO
Read, write, execute/search by others. 
.TP 7
S_IROTH
.RS
Read permission, others.
.RE
.TP 7
S_IWOTH
.RS
Write permission, others.
.RE
.TP 7
S_IXOTH
.RS
Execute/search permission, others.
.RE
.sp
.TP 7
S_ISUID
Set-user-ID on execution.
.TP 7
S_ISGID
Set-group-ID on execution.
.TP 7
S_ISVTX
On directories, restricted deletion flag. 
.sp
.LP
Da bits defined by S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP,
S_IROTH, S_IWOTH, S_IXOTH, S_ISUID, S_ISGID,  and
S_ISVTX shall be unique.
.LP
S_IRWXU is tha bitwise-inclusive OR of S_IRUSR, S_IWUSR, n' S_IXUSR.
.LP
S_IRWXG is tha bitwise-inclusive OR of S_IRGRP, S_IWGRP, n' S_IXGRP.
.LP
S_IRWXO is tha bitwise-inclusive OR of S_IROTH, S_IWOTH, n' S_IXOTH.
.LP
Implementations may OR other implementation-defined bits tha fuck into S_IRWXU,
S_IRWXG, n' S_IRWXO yo, but they shall not overlap any of
the other bits defined up in dis volume of IEEE\ Std\ 1003.1-2001. The
\fIfile permission bits\fP is defined ta be them
correspondin ta tha bitwise-inclusive OR of S_IRWXU, S_IRWXG, and
S_IRWXO.
.LP
Da followin macros shall be provided ta test whether a gangbangin' file is of
the specified type. Da value \fIm\fP supplied ta the
macros is tha value of \fIst_mode\fP from a \fBstat\fP structure.
Da macro shall evaluate ta a non-zero value if tha test is
true; 0 if tha test is false.
.TP 7
S_ISBLK(\fIm\fP)
Test fo' a funky-ass block special file.
.TP 7
S_ISCHR(\fIm\fP)
Test fo' a cold-ass lil characta special file.
.TP 7
S_ISDIR(\fIm\fP)
Test fo' a gangbangin' finger-lickin' directory.
.TP 7
S_ISFIFO(\fIm\fP)
Test fo' a pipe or FIFO special file.
.TP 7
S_ISREG(\fIm\fP)
Test fo' a regular file.
.TP 7
S_ISLNK(\fIm\fP)
Test fo' a symbolic link.
.TP 7
S_ISSOCK(\fIm\fP)
Test fo' a socket.
.sp
.LP
Da implementation may implement message queues, semaphores, or shared
memory objects as distinct file types. Da following
macros shall be provided ta test whether a gangbangin' file iz of tha specified
type. Da value of tha \fIbuf\fP argument supplied ta the
macros be a pointa ta a \fBstat\fP structure. Da macro shall evaluate
to a non-zero value if tha specified object is implemented
as a gangbangin' finger-lickin' distinct file type n' tha specified file type is contained in
the \fBstat\fP structure referenced by \fIbuf\fP. Otherwise,
the macro shall evaluate ta zero.
.TP 7
S_TYPEISMQ(\fIbuf\fP)
Test fo' a message queue.
.TP 7
S_TYPEISSEM(\fIbuf\fP)
Test fo' a semaphore.
.TP 7
S_TYPEISSHM(\fIbuf\fP)
Test fo' a gangbangin' finger-lickin' dirty-ass shared memory object.
.sp
.LP
Da implementation may implement typed memory objects as distinct
file types, n' tha followin macro shall test whether a
file iz of tha specified type. Da value of tha \fIbuf\fP argument
supplied ta tha macros be a pointa ta a \fBstat\fP structure.
Da macro shall evaluate ta a non-zero value if tha specified object
is implemented as a gangbangin' finger-lickin' distinct file type n' tha specified file
type is contained up in tha \fBstat\fP structure referenced by \fIbuf\fP.
Otherwise, tha macro shall evaluate ta zero.
.TP 7
S_TYPEISTMO(\fIbuf\fP)
Test macro fo' a typed memory object.
.sp
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBint    chmod(const char *, mode_t);
int    fchmod(int, mode_t);
int    fstat(int, struct stat *);
int    lstat(const char *restrict, struct stat *restrict);
int    mkdir(const char *, mode_t);
int    mkfifo(const char *, mode_t);

int    mknod(const char *, mode_t, dev_t);

int    stat(const char *restrict, struct stat *restrict);
mode_t umask(mode_t);
\fP
.fi
.RE
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Use of tha macros is recommended fo' determinin tha type of a gangbangin' file.
.SH RATIONALE
.LP
A conformin C-language application must include \fI<sys/stat.h>\fP
for functions dat have arguments or return joints of
type \fBmode_t\fP, so dat symbolic joints fo' dat type can be used.
An alternatizzle would be ta require dat these constants are
also defined by includin \fI<sys/types.h>\fP.
.LP
Da S_ISUID n' S_ISGID bits may be cleared on any write, not just
on \fIopen\fP(), as
some oldschool implementations do.
.LP
System calls dat update tha time entry fieldz up in tha \fBstat\fP structure
must be documented by tha implementors.
POSIX-conformin systems should not update tha time entry fieldz for
functions listed up in tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001 unless tha standard requires dat they do,
except up in tha case of documented extensions ta the
standard.
.LP
Note dat \fIst_dev\fP must be unique within a Local Area Network
(LAN) up in a ``system'' made up of multiple computers' file
systems connected by a LAN.
.LP
Networked implementationz of a POSIX-conformin system must guarantee
that all filez visible within tha file tree (including
partz of tha tree dat may be remotely mounted from other machines
on tha network) on each individual processor is uniquely
identified by tha combination of tha \fIst_ino\fP n' \fIst_dev\fP
fields.
.LP
Da unit fo' tha \fIst_blocks\fP gangmember of tha \fBstat\fP structure
is not defined within IEEE\ Std\ 1003.1-2001. In
some implementations it is 512 bytes. Well shiiiit, it may differ on a gangbangin' file system
basis. There is no correlation between jointz of the
\fIst_blocks\fP n' \fIst_blksize\fP, n' tha \fIf_bsize\fP (from
\fI<sys/statvfs.h>\fP) structure members.
.LP
Traditionally, some implementations defined tha multiplier fo' \fIst_blocks\fP
in 
\fI<sys/param.h>\fP as tha symbol DEV_BSIZE.
.SH FUTURE DIRECTIONS
.LP
No freshly smoked up S_IFMT symbolic names fo' tha file type jointz of \fBmode_t\fP
will be defined by IEEE\ Std\ 1003.1-2001; if new
file types is required, they will only be testable all up in \fIS_ISxx\fP()
or \fIS_TYPEISxxx\fP() macros instead.
.SH SEE ALSO
.LP
\fI<sys/statvfs.h>\fP, \fI<sys/types.h>\fP, tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001, \fIchmod\fP(), \fIfchmod\fP(), \fIfstat\fP(),
\fIlstat\fP(), \fImkdir\fP(), \fImkfifo\fP(), \fImknod\fP(), \fIstat\fP(),
\fIumask\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
