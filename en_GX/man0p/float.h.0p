.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<float.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <float.h> 
.SH NAME
float.h \- floatin types
.SH SYNOPSIS
.LP
\fB#include <float.h>\fP
.SH DESCRIPTION
.LP
Da characteristics of floatin types is defined up in termz of a model
that raps on some representation of floating-point numbers
and joints dat provide shiznit bout a implementationz floating-point
arithmetic.
.LP
Da followin parametas is used ta define tha model fo' each floating-point
type:
.TP 7
\fIs\fP
Sign (\(+-1).
.TP 7
\fIb\fP
Base or radix of exponent representation (an integer >1).
.TP 7
\fIe\fP
Exponent (an integer between a minimum \fIe\fP_min n' a maximum \fIe\fP_max).
.TP 7
\fIp\fP
Precision (the number of base-\fIb\fP digits up in tha significand).
.TP 7
\fIf\fP_k
Non-negatizzle integers less than \fIb\fP (the significand digits).
.sp
.LP
A floating-point number \fIx\fP is defined by tha followin model:
.LP
.LP
In addizzle ta normalized floating-point numbers (\fIf\fP_1>0 if \fIx\fP!=0),
floatin types may be able ta contain other
kindz of floating-point numbers, like fuckin subnormal floating-point
numbers ( \fIx\fP!=0, \fIe\fP= \fIe\fP_min, \fIf\fP_1=0) and
unnormalized floating-point numbers ( \fIx\fP!=0, \fIe\fP> \fIe\fP_min,
\fIf\fP_1=0), n' joints dat is not floating-point
numbers, like fuckin infinitizzles n' NaNs fo' realz. A \fINaN\fP be a encodin signifying
Not-a-Number n' shiznit fo' realz. A \fIquiet NaN\fP propagates through
almost every last muthafuckin arithmetic operation without raisin a gangbangin' floating-point
exception; a \fIsignalin NaN\fP generally raises a
floating-point exception when occurrin as a arithmetic operand.
.LP
Da accuracy of tha floating-point operations ( \fB'+'\fP, \fB'-'\fP,
\fB'*'\fP, \fB'/'\fP ) n' of tha library
functions up in \fI<math.h>\fP n' \fI<complex.h>\fP dat return floating-point
results is implementation-defined. Y'all KNOW dat shit, muthafucka! The
implementation may state dat tha accuracy is unknown.
.LP
All integer joints up in tha \fI<float.h>\fP header, except FLT_ROUNDS,
shall be constant expressions suitable fo' use in
\fB#if\fP preprocessin directives; all floatin joints shall be constant
expressions fo' realz. All except DECIMAL_DIG, FLT_EVAL_METHOD,
FLT_RADIX, n' FLT_ROUNDS have separate names fo' all three floating-point
types. Da floating-point model representation is
provided fo' all joints except FLT_EVAL_METHOD n' FLT_ROUNDS.
.LP
Da roundin mode fo' floating-point addizzle is characterized by
the implementation-defined value of FLT_ROUNDS:
.TP 7
-1
Indeterminable.
.TP 7
\ 0
Toward zero.
.TP 7
\ 1
To nearest.
.TP 7
\ 2
Toward positizzle infinity.
.TP 7
\ 3
Toward wack infinity.
.sp
.LP
All other joints fo' FLT_ROUNDS characterize implementation-defined
roundin behavior.
.LP
Da jointz of operations wit floatin operandz n' joints subject
to tha usual arithmetic conversions n' of floatin constants
are evaluated ta a gangbangin' format whose range n' precision may be pimped outer
than required by tha type. Da use of evaluation formats is
characterized by tha implementation-defined value of FLT_EVAL_METHOD:
.TP 7
-1
Indeterminable.
.TP 7
\ 0
Evaluate all operations n' constants just ta tha range n' precision
of tha type.
.TP 7
\ 1
Evaluate operations n' constantz of type \fBfloat\fP n' \fBdouble\fP
to tha range n' precision of tha \fBdouble\fP type;
evaluate \fBlong double\fP operations n' constants ta tha range and
precision of tha \fBlong double\fP type.
.TP 7
\ 2
Evaluate all operations n' constants ta tha range n' precision of
the \fBlong double\fP type.
.sp
.LP
All other wack joints fo' FLT_EVAL_METHOD characterize implementation-defined
behavior.
.LP
Da joints given up in tha followin list shall be defined as constant
expressions wit implementation-defined joints dat are
greata or equal up in magnitude (absolute value) ta dem shown, with
the same sign.
.IP " *" 3
Radix of exponent representation, \fIb\fP.
.TP 7
FLT_RADIX
.RS
2
.RE
.sp
.LP
.IP " *" 3
Number of base-FLT_RADIX digits up in tha floating-point significand,
\fIp\fP.
.TP 7
FLT_MANT_DIG
.TP 7
DBL_MANT_DIG
.TP 7
LDBL_MANT_DIG
.sp
.LP
.IP " *" 3
Number of decimal digits, \fIn\fP, such dat any floating-point number
in tha widest supported floatin type wit \fIp\fP_max
radix \fIb\fP digits can be rounded ta a gangbangin' floating-point number with
\fIn\fP decimal digits n' back again n' again n' again without chizzle ta the
value.
.LP
.TP 7
DECIMAL_DIG
.RS
10
.RE
.sp
.LP
.IP " *" 3
Number of decimal digits, \fIq\fP, such dat any floating-point number
with \fIq\fP decimal digits can be rounded tha fuck into a
floating-point number wit \fIp\fP radix \fIb\fP digits n' back again
without chizzle ta tha \fIq\fP decimal digits.
.LP
.TP 7
FLT_DIG
.RS
6
.RE
.TP 7
DBL_DIG
.RS
10
.RE
.TP 7
LDBL_DIG
.RS
10
.RE
.sp
.LP
.IP " *" 3
Minimum wack integer such dat FLT_RADIX raised ta dat power
minus 1 be a normalized floating-point number, \fIe\fP_min.
.TP 7
FLT_MIN_EXP
.TP 7
DBL_MIN_EXP
.TP 7
LDBL_MIN_EXP
.sp
.LP
.IP " *" 3
Minimum wack integer such dat 10 raised ta dat juice is up in the
range of normalized floating-point numbers.
.LP
.TP 7
FLT_MIN_10_EXP
.RS
-37
.RE
.TP 7
DBL_MIN_10_EXP
.RS
-37
.RE
.TP 7
LDBL_MIN_10_EXP
.RS
-37
.RE
.sp
.LP
.IP " *" 3
Maximum integer such dat FLT_RADIX raised ta dat juice minus 1 is
a representable finite floating-point number, \fIe\fP_max.
.TP 7
FLT_MAX_EXP
.TP 7
DBL_MAX_EXP
.TP 7
LDBL_MAX_EXP
.sp
.LP
.IP " *" 3
Maximum integer such dat 10 raised ta dat juice is up in tha range
of representable finite floating-point numbers.
.LP
.TP 7
FLT_MAX_10_EXP
.RS
+37
.RE
.TP 7
DBL_MAX_10_EXP
.RS
+37
.RE
.TP 7
LDBL_MAX_10_EXP
.RS
+37
.RE
.sp
.LP
.LP
Da joints given up in tha followin list shall be defined as constant
expressions wit implementation-defined joints dat are
greata than or equal ta dem shown:
.IP " *" 3
Maximum representable finite floating-point number.
.LP
.TP 7
FLT_MAX
.RS
1E+37
.RE
.TP 7
DBL_MAX
.RS
1E+37
.RE
.TP 7
LDBL_MAX
.RS
1E+37
.RE
.sp
.LP
.LP
Da joints given up in tha followin list shall be defined as constant
expressions wit implementation-defined (positive) joints
that is less than or equal ta dem shown:
.IP " *" 3
Da difference between 1 n' tha least value pimped outa than 1 dat is
representable up in tha given floating-point type, \fIb\fP**1-\fIp\fP.
.TP 7
FLT_EPSILON
.RS
1E-5
.RE
.TP 7
DBL_EPSILON
.RS
1E-9
.RE
.TP 7
LDBL_EPSILON
.RS
1E-9
.RE
.sp
.LP
.IP " *" 3
Minimum normalized positizzle floating-point number, \fIb\fP**\fIe\fP_min.
.TP 7
FLT_MIN
.RS
1E-37
.RE
.TP 7
DBL_MIN
.RS
1E-37
.RE
.TP 7
LDBL_MIN
.RS
1E-37
.RE
.sp
.LP
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<complex.h>\fP, \fI<math.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
