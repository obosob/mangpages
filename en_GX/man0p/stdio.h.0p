.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<stdio.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <stdio.h> 
.SH NAME
stdio.h \- standard buffered input/output
.SH SYNOPSIS
.LP
\fB#include <stdio.h>\fP
.SH DESCRIPTION
.LP
Some of tha functionalitizzle busted lyrics bout on dis reference page extends
the ISO\ C standard. Y'all KNOW dat shit, muthafucka! Applications shall define
the appropriate feature test macro (see tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, Section 2.2, Da Compilation Environment)
to enable tha visibilitizzle of these symbols up in this
header n' shit. 
.LP
Da \fI<stdio.h>\fP header shall define tha followin macros as positive
integer constant expressions:
.TP 7
BUFSIZ
Size of \fI<stdio.h>\fP buffers.
.TP 7
_IOFBF
Input/output straight-up buffered.
.TP 7
_IOLBF
Input/output line buffered.
.TP 7
_IONBF
Input/output unbuffered.
.TP 7
L_ctermid
Maximum size of characta array ta hold \fIctermid\fP() output. 
.TP 7
L_tmpnam
Maximum size of characta array ta hold \fItmpnam\fP() output.
.TP 7
SEEK_CUR
Seek relatizzle ta current position.
.TP 7
SEEK_END
Seek relatizzle ta end-of-file.
.TP 7
SEEK_SET
Seek relatizzle ta start-of-file.
.sp
.LP
Da followin macros shall be defined as positizzle integer constant
expressions which denote implementation limits:
.TP 7
{FILENAME_MAX}
Maximum size up in bytez of tha longest filename strang dat tha implementation
guarantees can be opened.
.TP 7
{FOPEN_MAX}
Number of streams which tha implementation guarantees can be open
simultaneously. Da value be at least eight.
.TP 7
{TMP_MAX}
Minimum number of unique filenames generated by \fItmpnam\fP(). Maximum
number of times
an application can call \fItmpnam\fP() reliably. Da value of {TMP_MAX}
is at least 25.
\ On XSI-conformant systems, tha value of {TMP_MAX} be at least 10000.
.sp
.LP
Da followin macro name shall be defined as a wack integer constant
expression:
.TP 7
EOF
End-of-file return value.
.sp
.LP
Da followin macro name shall be defined as a null pointa constant:
.TP 7
NULL
Null pointer.
.sp
.LP
Da followin macro name shall be defined as a strang constant:
.TP 7
P_tmpdir
Default directory prefix fo' \fItempnam\fP(). 
.sp
.LP
Da followin shall be defined as expressionz of type "pointa to
\fBFILE\fP" dat point ta tha \fBFILE\fP objects
associated, respectively, wit tha standard error, input, n' output
streams:
.TP 7
\fIstderr\fP
Standard error output stream.
.TP 7
\fIstdin\fP
Standard input stream.
.TP 7
\fIstdout\fP
Standard output stream.
.sp
.LP
Da followin data types shall be defined all up in \fBtypedef\fP:
.TP 7
\fBFILE\fP
A structure containin shiznit on some gangbangin' file.
.TP 7
\fBfpos_t\fP
A non-array type containin all shiznit needed ta specify uniquely
every posizzle within a gangbangin' file.
.TP 7
\fBva_list\fP
As busted lyrics bout up in \fI<stdarg.h>\fP . 
.TP 7
\fBsize_t\fP
As busted lyrics bout up in \fI<stddef.h>\fP .
.sp
.LP
Da followin shall be declared as functions n' may also be defined
as macros. Function prototypes shall be provided.
.sp
.RS
.nf

\fBvoid     clearerr(FILE *);

char    *ctermid(char *);

int      fclose(FILE *);

FILE    *fdopen(int, const char *);

int      feof(FILE *);
int      ferror(FILE *);
int      fflush(FILE *);
int      fgetc(FILE *);
int      fgetpos(FILE *restrict, fpos_t *restrict);
char    *fgets(char *restrict, int, FILE *restrict);

int      fileno(FILE *);


void     flockfile(FILE *);

FILE    *fopen(const char *restrict, const char *restrict);
int      fprintf(FILE *restrict, const char *restrict, ...);
int      fputc(int, FILE *);
int      fputs(const char *restrict, FILE *restrict);
size_t   fread(void *restrict, size_t, size_t, FILE *restrict);
FILE    *freopen(const char *restrict, const char *restrict,
             FILE *restrict);
int      fscanf(FILE *restrict, const char *restrict, ...);
int      fseek(FILE *, long, int);

int      fseeko(FILE *, off_t, int);

int      fsetpos(FILE *, const fpos_t *);
long     ftell(FILE *);

off_t    ftello(FILE *);


int      ftrylockfile(FILE *);
void     funlockfile(FILE *);

size_t   fwrite(const void *restrict, size_t, size_t, FILE *restrict);
int      getc(FILE *);
int      getchar(void);

int      getc_unlocked(FILE *);
int      getchar_unlocked(void);

char    *gets(char *);

int      pclose(FILE *);

void     perror(const char *);

FILE    *popen(const char *, const char *);

int      printf(const char *restrict, ...);
int      putc(int, FILE *);
int      putchar(int);

int      putc_unlocked(int, FILE *);
int      putchar_unlocked(int);

int      puts(const char *);
int      remove(const char *);
int      rename(const char *, const char *);
void     rewind(FILE *);
int      scanf(const char *restrict, ...);
void     setbuf(FILE *restrict, char *restrict);
int      setvbuf(FILE *restrict, char *restrict, int, size_t);
int      snprintf(char *restrict, size_t, const char *restrict, ...);
int      sprintf(char *restrict, const char *restrict, ...);
int      sscanf(const char *restrict, const char *restrict, int ...);

char    *tempnam(const char *, const char *);

FILE    *tmpfile(void);
char    *tmpnam(char *);
int      ungetc(int, FILE *);
int      vfprintf(FILE *restrict, const char *restrict, va_list);
int      vfscanf(FILE *restrict, const char *restrict, va_list);
int      vprintf(const char *restrict, va_list);
int      vscanf(const char *restrict, va_list);
int      vsnprintf(char *restrict, size_t, const char *restrict, va_list;
int      vsprintf(char *restrict, const char *restrict, va_list);
int      vsscanf(const char *restrict, const char *restrict, va_list arg);
\fP
.fi
.RE
.LP
Inclusion of tha \fI<stdio.h>\fP header may also make visible all
symbols from \fI<stddef.h>\fP. 
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<stdarg.h>\fP, \fI<stddef.h>\fP, \fI<sys/types.h>\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIclearerr\fP(), \fIctermid\fP(),
\fIfclose\fP(), \fIfdopen\fP(), \fIfgetc\fP(), \fIfgetpos\fP(), \fIferror\fP(),
\fIfeof\fP(), \fIfflush\fP(), \fIfgets\fP(), \fIfileno\fP(), \fIflockfile\fP(),
\fIfopen\fP(), \fIfputc\fP(), \fIfputs\fP(), \fIfread\fP(), \fIfreopen\fP(),
\fIfseek\fP(), \fIfsetpos\fP(), \fIftell\fP(), \fIfwrite\fP(), \fIgetc\fP(),
\fIgetc_unlocked\fP(), \fIgetwchar\fP(), \fIgetchar\fP(), \fIgetopt\fP(),
\fIgets\fP(), \fIpclose\fP(), \fIperror\fP(), \fIpopen\fP(), \fIprintf\fP(),
\fIputc\fP(), \fIputchar\fP(), \fIputs\fP(), \fIputwchar\fP(), \fIremove\fP(),
\fIrename\fP(), \fIrewind\fP(), \fIscanf\fP(), \fIsetbuf\fP(), \fIsetvbuf\fP(),
\fIsscanf\fP(), \fIstdin\fP, \fIsystem\fP(), \fItempnam\fP(), \fItmpfile\fP(),
\fItmpnam\fP(), \fIungetc\fP(), \fIvfscanf\fP(), \fIvscanf\fP(), \fIvprintf\fP(),
\fIvsscanf\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
