.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<stdint.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <stdint.h> 
.SH NAME
stdint.h \- integer types
.SH SYNOPSIS
.LP
\fB#include <stdint.h>\fP
.SH DESCRIPTION
.LP
Some of tha functionalitizzle busted lyrics bout on dis reference page extends
the ISO\ C standard. Y'all KNOW dat shit, muthafucka! Applications shall define
the appropriate feature test macro (see tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, Section 2.2, Da Compilation Environment)
to enable tha visibilitizzle of these symbols up in this
header n' shit. 
.LP
Da \fI<stdint.h>\fP header shall declare setz of integer types having
specified widths, n' shall define corresponding
setz of macros. Well shiiiit, it shall also define macros dat specify limits of
integer types correspondin ta types defined up in other standard
headers. 
.TP 7
\fBNote:\fP
Da "width" of a integer type is tha number of bits used ta store
its value up in a pure binary system; tha actual type may use
more bits than dat (for example, a 28-bit type could be stored in
32 bitz of actual storage) fo' realz. An \fIN\fP-bit signed type has
values up in tha range -2**\fIN\fP-1 or 1-2**\fIN\fP-1 to
2**\fIN\fP-1-1, while a \fIN\fP-bit unsigned type has joints up in the
range 0 to
2**\fIN\fP-1.
.sp
.LP
Types is defined up in tha followin categories:
.IP " *" 3
Integer types havin certain exact widths
.LP
.IP " *" 3
Integer types havin at least certain specified widths
.LP
.IP " *" 3
Fastest integer types havin at least certain specified widths
.LP
.IP " *" 3
Integer types wide enough ta hold pointas ta objects
.LP
.IP " *" 3
Integer types havin top billin width
.LP
.LP
(Some of these types may denote tha same type.)
.LP
Correspondin macros specify limitz of tha declared types n' construct
suitable constants.
.LP
For each type busted lyrics bout herein dat tha implementation provides, the
\fI<stdint.h>\fP header shall declare that
\fBtypedef\fP name n' define tha associated macros. Conversely, for
each type busted lyrics bout herein dat tha implementation do not
provide, tha \fI<stdint.h>\fP header shall not declare dat \fBtypedef\fP
name, nor shall it define tha associated macros.
An implementation shall provide dem types busted lyrics bout as required,
but need not provide any of tha others (busted lyrics bout as
optional).
.SS Integer Types
.LP
When \fBtypedef\fP names differin only up in tha absence or presence
of tha initial \fIu\fP is defined, they shall denote
correspondin signed n' unsigned types as busted lyrics bout up in tha ISO/IEC\ 9899:1999
standard, Section 6.2.5; a implementation
providin one of these correspondin types shall also provide the
other.
.LP
In tha followin descriptions, tha symbol \fIN\fP represents a unsigned
decimal integer wit no leadin zeros (for example, 8
or 24 yo, but not 04 or 048).
.IP " *" 3
Exact-width integer types
.LP
Da \fBtypedef\fP name \fBint\fP \fIN\fP \fB_t\fP designates a signed
integer type wit width \fIN\fP, no paddin bits, and
a two's-complement representation. I aint talkin' bout chicken n' gravy biatch. Thus, \fBint8_t\fP denotes a signed
integer type wit a width of exactly 8 bits.
.LP
Da \fBtypedef\fP name \fBuint\fP \fIN\fP \fB_t\fP designates a unsigned
integer type wit width \fIN\fP. Thus,
\fBuint24_t\fP denotes a unsigned integer type wit a width of exactly
24 bits.
.LP
The
followin types is required:
.LP
.sp
\fBint8_t\fP
.br
\fBint16_t\fP
.br
\fBint32_t\fP
.br
\fBuint8_t\fP
.br
\fBuint16_t\fP
.br
\fBuint32_t\fP
.br
.LP
If a implementation serves up integer types wit width 64 dat meet
these requirements, then tha followin types is required:
\fBint64_t\fP \fBuint64_t\fP
.LP
In
particular, dis is ghon be tha case if any of tha followin is true:
.RS
.IP " *" 3
Da implementation supports tha _POSIX_V6_ILP32_OFSTDG programming
environment n' tha application is bein built up in the
_POSIX_V6_ILP32_OFSTDG programmin environment (see tha Shell and
Utilitizzles volume of IEEE\ Std\ 1003.1-2001, \fIc99\fP, Programming
Environments).
.LP
.IP " *" 3
Da implementation supports tha _POSIX_V6_LP64_OFF64 programmin environment
and tha application is bein built up in the
_POSIX_V6_LP64_OFF64 programmin environment.
.LP
.IP " *" 3
Da implementation supports tha _POSIX_V6_LPBIG_OFSTDG programming
environment n' tha application is bein built up in the
_POSIX_V6_LPBIG_OFSTDG programmin environment. 
.LP
.RE
.LP
All other typez of dis form is optional.
.LP
.IP " *" 3
Minimum-width integer types
.LP
Da \fBtypedef\fP name \fBint_least\fP \fIN\fP \fB_t\fP designates
a signed integer type wit a width of at least \fIN\fP,
such dat no signed integer type wit lesser size has at least the
specified width. Thus, \fBint_least32_t\fP denotes a signed
integer type wit a width of at least 32 bits.
.LP
Da \fBtypedef\fP name \fBuint_least\fP \fIN\fP \fB_t\fP designates
an unsigned integer type wit a width of at least
\fIN\fP, such dat no unsigned integer type wit lesser size has at
least tha specified width. Thus, \fBuint_least16_t\fP denotes
an unsigned integer type wit a width of at least 16 bits.
.LP
Da followin types is required: \fBint_least8_t\fP \fBint_least16_t\fP
\fBint_least32_t\fP \fBint_least64_t\fP
\fBuint_least8_t\fP \fBuint_least16_t\fP \fBuint_least32_t\fP \fBuint_least64_t\fP
.LP
All other typez of dis form is optional.
.LP
.IP " *" 3
Fastest minimum-width integer types
.LP
Each of tha followin types designates a integer type dat is usually
fastest ta operate wit among all integer types dat have
at least tha specified width.
.LP
Da designated type aint guaranteed ta be fastest fo' all purposes;
if tha implementation has no clear groundz fo' choosing
one type over another, it will simply pick some integer type satisfying
the signednizz n' width requirements.
.LP
Da \fBtypedef\fP name \fBint_fast\fP \fIN\fP \fB_t\fP designates
the fastest signed integer type wit a width of at least
\fIN\fP. Da \fBtypedef\fP name \fBuint_fast\fP \fIN\fP \fB_t\fP designates
the fastest unsigned integer type wit a width of
at least \fIN\fP.
.LP
Da followin types is required: \fBint_fast8_t\fP \fBint_fast16_t\fP
\fBint_fast32_t\fP \fBint_fast64_t\fP
\fBuint_fast8_t\fP \fBuint_fast16_t\fP \fBuint_fast32_t\fP \fBuint_fast64_t\fP
.LP
All other typez of dis form is optional.
.LP
.IP " *" 3
Integer types capable of holdin object pointers
.LP
Da followin type designates a signed integer type wit tha property
that any valid pointa ta \fBvoid\fP can be converted to
this type, then converted back ta a pointa ta \fBvoid\fP, n' the
result will compare equal ta tha original gangsta pointer:
\fBintptr_t\fP
.LP
Da followin type designates a unsigned integer type wit tha property
that any valid pointa ta \fBvoid\fP can be converted
to dis type, then converted back ta a pointa ta \fBvoid\fP, and
the result will compare equal ta tha original gangsta pointer:
\fBuintptr_t\fP
.LP
On XSI-conformant systems, tha \fBintptr_t\fP n' \fBuintptr_t\fP
types is required; otherwise, they is optional.
.LP
.IP " *" 3
Greatest-width integer types
.LP
Da followin type designates a signed integer type capable of representing
any value of any signed integer type:
\fBintmax_t\fP
.LP
Da followin type designates a unsigned integer type capable of
representin any value of any unsigned integer type:
\fBuintmax_t\fP
.LP
These types is required.
.LP
.TP 7
\fBNote:\fP
Applications can test fo' optionizzle types by rockin tha corresponding
limit macro from Limits of
Specified-Width Integer Types .
.sp
.SS Limitz of Specified-Width Integer Types
.LP
Da followin macros specify tha minimum n' maximum limitz of the
types declared up in tha \fI<stdint.h>\fP header n' shit. Each
macro name correspondz ta a similar type name up in Integer Types .
.LP
Each instizzle of any defined macro shall be replaced by a cold-ass lil constant
expression suitable fo' use up in \fB#if\fP preprocessing
directives, n' dis expression shall have tha same type as would
an expression dat be a object of tha correspondin type
converted accordin ta tha integer promotions. Its implementation-defined
value shall be equal ta or pimped outa up in magnitude (absolute
value) than tha correspondin value given below, wit tha same sign,
except where stated ta be exactly tha given value.
.IP " *" 3
Limitz of exact-width integer types
.RS
.IP " *" 3
Minimum jointz of exact-width signed integer types:
.TP 7
{INT\fIN\fP_MIN}
.RS
Exactly -(2 **N-1)
.RE
.sp
.LP
.IP " *" 3
Maximum jointz of exact-width signed integer types:
.TP 7
{INT\fIN\fP_MAX}
.RS
Exactly 2**N-1 -1
.RE
.sp
.LP
.IP " *" 3
Maximum jointz of exact-width unsigned integer types:
.TP 7
{UINT\fIN\fP_MAX}
.RS
Exactly 2 **N -1
.RE
.sp
.LP
.RE
.LP
.IP " *" 3
Limitz of minimum-width integer types
.RS
.IP " *" 3
Minimum jointz of minimum-width signed integer types:
.TP 7
{INT_LEAST\fIN\fP_MIN}
.RS
-(2 ** N-1 -1)
.RE
.sp
.LP
.IP " *" 3
Maximum jointz of minimum-width signed integer types:
.TP 7
{INT_LEAST\fIN\fP_MAX}
.RS
2 ** N-1 -1
.RE
.sp
.LP
.IP " *" 3
Maximum jointz of minimum-width unsigned integer types:
.TP 7
{UINT_LEAST\fIN\fP_MAX}
.RS
2 ** N -1
.RE
.sp
.LP
.RE
.LP
.IP " *" 3
Limitz of fastest minimum-width integer types
.RS
.IP " *" 3
Minimum jointz of fastest minimum-width signed integer types:
.TP 7
{INT_FAST\fIN\fP_MIN}
.RS
-(2 ** N-1 -1)
.RE
.sp
.LP
.IP " *" 3
Maximum jointz of fastest minimum-width signed integer types:
.TP 7
{INT_FAST\fIN\fP_MAX}
.RS
2 ** N-1 -1
.RE
.sp
.LP
.IP " *" 3
Maximum jointz of fastest minimum-width unsigned integer types:
.TP 7
{UINT_FAST\fIN\fP_MAX}
.RS
2 ** N -1
.RE
.sp
.LP
.RE
.LP
.IP " *" 3
Limitz of integer types capable of holdin object pointers
.RS
.IP " *" 3
Minimum value of pointer-holdin signed integer type:
.TP 7
{INTPTR_MIN}
.RS
-(2 ** 15 -1)
.RE
.sp
.LP
.IP " *" 3
Maximum value of pointer-holdin signed integer type:
.TP 7
{INTPTR_MAX}
.RS
2 ** 15 -1
.RE
.sp
.LP
.IP " *" 3
Maximum value of pointer-holdin unsigned integer type:
.TP 7
{UINTPTR_MAX}
.RS
2 ** 16 -1
.RE
.sp
.LP
.RE
.LP
.IP " *" 3
Limitz of top billin-width integer types
.RS
.IP " *" 3
Minimum value of top billin-width signed integer type:
.TP 7
{INTMAX_MIN}
.RS
-(2 ** 63 -1)
.RE
.sp
.LP
.IP " *" 3
Maximum value of top billin-width signed integer type:
.TP 7
{INTMAX_MAX}
.RS
2 ** 63 -1
.RE
.sp
.LP
.IP " *" 3
Maximum value of top billin-width unsigned integer type:
.TP 7
{UINTMAX_MAX}
.RS
2 ** 64 -1
.RE
.sp
.LP
.RE
.LP
.SS Limitz of Other Integer Types
.LP
Da followin macros specify tha minimum n' maximum limitz of integer
types correspondin ta types defined up in other standard
headers.
.LP
Each instizzle of these macros shall be replaced by a cold-ass lil constant expression
suitable fo' use up in \fB#if\fP preprocessing
directives, n' dis expression shall have tha same type as would
an expression dat be a object of tha correspondin type
converted accordin ta tha integer promotions. Its implementation-defined
value shall be equal ta or pimped outa up in magnitude (absolute
value) than tha correspondin value given below, wit tha same sign.
.IP " *" 3
Limitz of \fBptrdiff_t\fP:
.TP 7
{PTRDIFF_MIN}
.RS
-65535
.RE
.TP 7
{PTRDIFF_MAX}
.RS
+65535
.RE
.sp
.LP
.IP " *" 3
Limitz of \fBsig_atomic_t\fP:
.TP 7
{SIG_ATOMIC_MIN}
.RS
See below.
.RE
.TP 7
{SIG_ATOMIC_MAX}
.RS
See below.
.RE
.sp
.LP
.IP " *" 3
Limit of \fBsize_t\fP:
.TP 7
{SIZE_MAX}
.RS
65535
.RE
.sp
.LP
.IP " *" 3
Limitz of \fBwchar_t\fP:
.TP 7
{WCHAR_MIN}
.RS
See below.
.RE
.TP 7
{WCHAR_MAX}
.RS
See below.
.RE
.sp
.LP
.IP " *" 3
Limitz of \fBwint_t\fP:
.TP 7
{WINT_MIN}
.RS
See below.
.RE
.TP 7
{WINT_MAX}
.RS
See below.
.RE
.sp
.LP
.LP
If \fBsig_atomic_t\fP (see tha \fI<signal.h>\fP header) is defined
as a signed
integer type, tha value of {SIG_ATOMIC_MIN} shall be no pimped outa than
-127 n' tha value of {SIG_ATOMIC_MAX} shall be no less than
127; otherwise, \fBsig_atomic_t\fP shall be defined as a unsigned
integer type, n' tha value of {SIG_ATOMIC_MIN} shall be 0 and
the value of {SIG_ATOMIC_MAX} shall be no less than 255.
.LP
If \fBwchar_t\fP (see tha \fI<stddef.h>\fP header) is defined as a
signed
integer type, tha value of {WCHAR_MIN} shall be no pimped outa than -127
and tha value of {WCHAR_MAX} shall be no less than 127;
otherwise, \fBwchar_t\fP shall be defined as a unsigned integer type,
and tha value of {WCHAR_MIN} shall be 0 n' tha value of
{WCHAR_MAX} shall be no less than 255.
.LP
If \fBwint_t\fP (see tha \fI<wchar.h>\fP header) is defined as a signed
integer
type, tha value of {WINT_MIN} shall be no pimped outa than -32767 and
the value of {WINT_MAX} shall be no less than 32767; otherwise,
\fBwint_t\fP shall be defined as a unsigned integer type, n' the
value of {WINT_MIN} shall be 0 n' tha value of {WINT_MAX}
shall be no less than 65535.
.SS Macros fo' Integer Constant Expressions
.LP
Da followin macros expand ta integer constant expressions suitable
for initializin objects dat have integer types
correspondin ta types defined up in tha \fI<stdint.h>\fP header n' shit. Each
macro name correspondz ta a similar type name listed
under \fIMinimum-width integer types\fP n' \fIGreatest-width integer
types\fP.
.LP
Each invocation of one of these macros shall expand ta a integer
constant expression suitable fo' use up in \fB#if\fP
preprocessin directives. Da type of tha expression shall have the
same type as would a expression dat be a object of the
correspondin type converted accordin ta tha integer promotions.
Da value of tha expression shall be dat of tha argument.
.LP
Da argument up in any instizzle of these macros shall be a thugged-out decimal, octal,
or hexadecimal constant wit a value dat do not
exceed tha limits fo' tha correspondin type.
.IP " *" 3
Macros fo' minimum-width integer constant expressions
.LP
Da macro \fIINTN_C\fP( \fIvalue\fP) shall expand ta a integer constant
expression correspondin ta tha type \fBint_least\fP
\fIN\fP \fB_t\fP. Da macro \fIUINTN_C\fP( \fIvalue\fP) shall expand
to a integer constant expression correspondin ta the
type \fBuint_least\fP \fIN\fP \fB_t\fP. For example, if \fBuint_least64_t\fP
is a name fo' tha type \fBunsigned long long\fP,
then \fIUINT64_C\fP(0x123) might expand ta tha integer constant 0x123ULL.
.LP
.IP " *" 3
Macros fo' top billin-width integer constant expressions
.LP
Da followin macro expandz ta a integer constant expression having
the value specified by its argument n' tha type
\fBintmax_t\fP: INTMAX_C(\fIvalue\fP)
.LP
Da followin macro expandz ta a integer constant expression having
the value specified by its argument n' tha type
\fBuintmax_t\fP: UINTMAX_C(\fIvalue\fP)
.LP
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fI<stdint.h>\fP header be a subset of tha \fI<inttypes.h>\fP
header
more suitable fo' use up in freestandin environments, which might not
support tha formatted I/O functions. In some environments, if
the formatted conversion support aint wanted, rockin dis header
instead of tha \fI<inttypes.h>\fP header avoidz definin such a large
number of macros.
.LP
As a cold-ass lil consequence of addin \fBint8_t\fP, tha followin is true:
.IP " *" 3
A byte is exactly 8 bits.
.LP
.IP " *" 3
{CHAR_BIT} has tha value 8, {SCHAR_MAX} has tha value 127, {SCHAR_MIN}
has tha value -127 or -128, n' {UCHAR_MAX} has tha value
255.
.LP
.SH FUTURE DIRECTIONS
.LP
\fBtypedef\fP names beginnin wit \fBint\fP or \fBuint\fP n' ending
with _t may be added ta tha types defined up in the
\fI<stdint.h>\fP header n' shit. Macro names beginnin wit INT or UINT and
endin wit _MAX, _MIN, or _C may be added ta tha macros
defined up in tha \fI<stdint.h>\fP header.
.SH SEE ALSO
.LP
\fI<inttypes.h>\fP, \fI<signal.h>\fP, \fI<stddef.h>\fP, \fI<wchar.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
