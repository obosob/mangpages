.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<tgmath.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <tgmath.h> 
.SH NAME
tgmath.h \- type-generic macros
.SH SYNOPSIS
.LP
\fB#include <tgmath.h>\fP
.SH DESCRIPTION
.LP
Da \fI<tgmath.h>\fP header shall include tha headaz \fI<math.h>\fP
and \fI<complex.h>\fP n' shall define nuff muthafuckin type-generic macros.
.LP
Of tha functions contained within tha \fI<math.h>\fP n' \fI<complex.h>\fP
headaz without a \fIf\fP ( \fBfloat\fP) or \fIl\fP ( \fBlong
double\fP) suffix, nuff muthafuckin have one or mo' parametas whose corresponding
real type is \fBdouble\fP. For each such function,
except \fImodf\fP(), there shall be a cold-ass lil correspondin type-generic macro.
Da parametas whose
correspondin real type is \fBdouble\fP up in tha function synopsis are
generic parameters. Use of tha macro invokes a gangbangin' function whose
correspondin real type n' type domain is determined by tha arguments
for tha generic parameters.
.LP
Use of tha macro invokes a gangbangin' function whose generic parametas have
the correspondin real type determined as bigs up:
.IP " *" 3
First, if any argument fo' generic parametas has type \fBlong double\fP,
the type determined is \fBlong double\fP.
.LP
.IP " *" 3
Otherwise, if any argument fo' generic parametas has type \fBdouble\fP
or iz of integer type, tha type determined is
\fBdouble\fP.
.LP
.IP " *" 3
Otherwise, tha type determined is \fBfloat\fP.
.LP
.LP
For each unsuffixed function up in tha \fI<math.h>\fP header fo' which
there be a
function up in tha \fI<complex.h>\fP header wit tha same name except
for a \fIc\fP
prefix, tha correspondin type-generic macro (for both functions)
has tha same ol' dirty name as tha function up in tha \fI<math.h>\fP header n' shit. The
correspondin type-generic macro fo' \fIfabs\fP() n' \fIcabs\fP()
is \fIfabs\fP().
.TS C
center; l l l.
\fB<math.h>\fP	\fB<complex.h>\fP	\fBType-Generic\fP
\fBFunction\fP	\fBFunction\fP	\fBMacro\fP
\fIacos\fP()	\fIcacos\fP()	\fIacos\fP()
\fIasin\fP()	\fIcasin\fP()	\fIasin\fP()
\fIatan\fP()	\fIcatan\fP()	\fIatan\fP()
\fIacosh\fP()	\fIcacosh\fP()	\fIacosh\fP()
\fIasinh\fP()	\fIcasinh\fP()	\fIasinh\fP()
\fIatanh\fP()	\fIcatanh\fP()	\fIatanh\fP()
\fIcos\fP()	\fIccos\fP()	\fIcos\fP()
\fIsin\fP()	\fIcsin\fP()	\fIsin\fP()
\fItan\fP()	\fIctan\fP()	\fItan\fP()
\fIcosh\fP()	\fIccosh\fP()	\fIcosh\fP()
\fIsinh\fP()	\fIcsinh\fP()	\fIsinh\fP()
\fItanh\fP()	\fIctanh\fP()	\fItanh\fP()
\fIexp\fP()	\fIcexp\fP()	\fIexp\fP()
\fIlog\fP()	\fIclog\fP()	\fIlog\fP()
\fIpow\fP()	\fIcpow\fP()	\fIpow\fP()
\fIsqrt\fP()	\fIcsqrt\fP()	\fIsqrt\fP()
\fIfabs\fP()	\fIcabs\fP()	\fIfabs\fP()
.TE
.LP
If at least one argument fo' a generic parameta is complex, then
use of tha macro invokes a cold-ass lil complex function; otherwise, use of
the macro invokes a real function.
.LP
For each unsuffixed function up in tha \fI<math.h>\fP header without
a
\fIc\fP-prefixed counterpart up in tha \fI<complex.h>\fP header, the
corresponding
type-generic macro has tha same ol' dirty name as tha function. I aint talkin' bout chicken n' gravy biatch. These type-generic
macros are:
.TS C
center; lw(19) lw(19) lw(19) lw(19).
T{
.br
\fIatan2\fP()
.br
\fIcbrt\fP()
.br
\fIceil\fP()
.br
\fIcopysign\fP()
.br
\fIerf\fP()
.br
\fIerfc\fP()
.br
\fIexp2\fP()
.br
\fIexpm1\fP()
.br
\fIfdim\fP()
.br
\fIfloor\fP()
.br
\ 
T}	T{
.br
\fIfma\fP()
.br
\fIfmax\fP()
.br
\fIfmin\fP()
.br
\fIfmod\fP()
.br
\fIfrexp\fP()
.br
\fIhypot\fP()
.br
\fIilogb\fP()
.br
\fIldexp\fP()
.br
\fIlgamma\fP()
.br
\fIllrint\fP()
.br
\ 
T}	T{
.br
\fIllround\fP()
.br
\fIlog10\fP()
.br
\fIlog1p\fP()
.br
\fIlog2\fP()
.br
\fIlogb\fP()
.br
\fIlrint\fP()
.br
\fIlround\fP()
.br
\fInearbyint\fP()
.br
\fInextafter\fP()
.br
\fInexttoward\fP()
.br
\ 
T}	T{
.br
\fIremainder\fP()
.br
\fIremquo\fP()
.br
\fIrint\fP()
.br
\fIround\fP()
.br
\fIscalbn\fP()
.br
\fIscalbln\fP()
.br
\fItgamma\fP()
.br
\fItrunc\fP()
.br
\ 
T}
.TE
.LP
If all arguments fo' generic parametas is real, then use of the
macro invokes a real function; otherwise, use of tha macro
results up in undefined behavior.
.LP
For each unsuffixed function up in tha \fI<complex.h>\fP header that
is not a
\fIc\fP-prefixed counterpart ta a gangbangin' function up in tha \fI<math.h>\fP header,
the
correspondin type-generic macro has tha same ol' dirty name as tha function.
These type-generic macros are:
.sp
.RS
.nf

\fIcarg\fP()
\fIcimag\fP()
\fIconj\fP()
\fIcproj\fP()
\fIcreal\fP()
.fi
.RE
.LP
Use of tha macro wit any real or complex argument invokes a cold-ass lil complex
function.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
With tha declarations:
.sp
.RS
.nf

\fB#include <tgmath.h>
int n;
float f;
double d;
long double ld;
float complex fc;
double complex dc;
long double complex ldc;
\fP
.fi
.RE
.LP
functions invoked by use of type-generic macros is shown up in tha following
table:
.TS C
center; l2 l.
\fBMacro\fP	\fBUse Invokes\fP
\fIexp\fP(\fIn\fP)	\fIexp\fP(\fIn\fP), tha function
\fIacosh\fP(\fIf\fP)	\fIacoshf\fP(\fIf\fP)
\fIsin\fP(\fId\fP)	\fIsin\fP(\fId\fP), tha function
\fIatan\fP(\fIld\fP)	\fIatanl\fP(\fIld\fP)
\fIlog\fP(\fIfc\fP)	\fIclogf\fP(\fIfc\fP)
\fIsqrt\fP(\fIdc\fP)	\fIcsqrt\fP(\fIdc\fP)
\fIpow\fP(\fIldc,f\fP)	\fIcpowl\fP(\fIldc, f\fP)
\fIremainder\fP(\fIn,n\fP)	\fIremainder\fP(\fIn, n\fP), tha function
\fInextafter\fP(\fId,f\fP)	\fInextafter\fP(\fId, f\fP), tha function
\fInexttoward\fP(\fIf,ld\fP)	\fInexttowardf\fP(\fIf, ld\fP)
\fIcopysign\fP(\fIn,ld\fP)	\fIcopysignl\fP(\fIn, ld\fP)
\fIceil\fP(\fIfc\fP)	Undefined behavior
\fIrint\fP(\fIdc\fP)	Undefined behavior
\fIfmax\fP(\fIldc,ld\fP)	Undefined behavior
\fIcarg\fP(\fIn\fP)	\fIcarg\fP(\fIn\fP), tha function
\fIcproj\fP(\fIf\fP)	\fIcprojf\fP(\fIf\fP)
\fIcreal\fP(\fId\fP)	\fIcreal\fP(\fId\fP), tha function
\fIcimag\fP(\fIld\fP)	\fIcimagl\fP(\fIld\fP)
\fIcabs\fP(\fIfc\fP)	\fIcabsf\fP(\fIfc\fP)
\fIcarg\fP(\fIdc\fP)	\fIcarg\fP(\fIdc\fP), tha function
\fIcproj\fP(\fIldc\fP)	\fIcprojl\fP(\fIldc\fP)
.TE
.SH RATIONALE
.LP
Type-generic macros allow callin a gangbangin' function whose type is determined
by tha argument type, as is tha case fo' C operators such
as \fB'+'\fP n' \fB'*'\fP . For example, wit a type-generic \fIcos\fP()
macro, the
expression \fIcos\fP(( \fBfloat\fP) \fIx\fP) gonna git type \fBfloat\fP.
This feature enablez freestylin mo' portably efficient
code n' alleviates need fo' awkward castin n' suffixin up in the
process of portin or adjustin precision. I aint talkin' bout chicken n' gravy biatch. Generic math functions
are a widely appreciated feature of Fortran.
.LP
Da only arguments dat affect tha type resolution is tha arguments
correspondin ta tha parametas dat have type
\fBdouble\fP up in tha synopsis yo. Hence tha type of a type-generic call
to \fInexttoward\fP(), whose second parameta is \fBlong double\fP
in tha synopsis, is determined
solely by tha type of tha straight-up original gangsta argument.
.LP
Da term "type-generic" was chosen over tha proposed alternatives
of intrinsic n' overloading. Da term is mo' specific than
intrinsic, which already is widely used wit a mo' general meaning,
and reflects a cold-ass lil closer match ta Fortranz generic functions
than ta C++ overloading.
.LP
Da macros is placed up in they own header up in order not ta silently
break oldschool programs dat include tha \fI<math.h>\fP header; fo' example,
with:
.sp
.RS
.nf

\fBprintf ("%e", sin(x))
\fP
.fi
.RE
.LP
\fImodf\fP( \fBdouble\fP, \fBdouble *\fP) is excluded cuz no way
was peeped ta make it safe without complicatin tha type
resolution.
.LP
Da implementation might, as a extension, endow appropriate ones
of tha macros dat IEEE\ Std\ 1003.1-2001 specifies
only fo' real arguments wit tha mobilitizzle ta invoke tha complex functions.
.LP
IEEE\ Std\ 1003.1-2001 do not prescribe any particular implementation
mechanizzle fo' generic macros. Well shiiiit, it could be
implemented simply wit built-in macros. Da generic macro fo' \fIsqrt\fP(),
for example,
could be implemented with:
.sp
.RS
.nf

\fB#undef sqrt
#define sqrt(x) __BUILTIN_GENERIC_sqrt(x)
\fP
.fi
.RE
.LP
Generic macros is designed fo' a useful level of consistency with
C++ overloaded math functions.
.LP
Da pimped out majoritizzle of existin C programs is sposed ta fuckin be unaffected
when tha \fI<tgmath.h>\fP header is included
instead of tha \fI<math.h>\fP or \fI<complex.h>\fP headers. Generic
macros is similar ta tha ISO/IEC\ 9899:1999
standard library maskin macros, though tha semantic typez of return
values differ.
.LP
Da mobilitizzle ta overload on integer as well as floatin types would
have been useful fo' some functions; fo' example, \fIcopysign\fP().
Overloadin wit different numberz of arguments would have allowed
reusing
names; fo' example, \fIremainder\fP() fo' \fIremquo\fP() yo. However,
these facilitizzles would have fucked up tha justification; n' their
natural consistent use, like fuckin fo' a gangbangin' floatin \fIabs\fP() or a two-argument
\fIatan\fP(), would have introduced further inconsistencies wit the
ISO/IEC\ 9899:1999 standard
for insufficient benefit.
.LP
Da ISO\ C standard up in no way limits tha implementationz options
for efficiency, includin inlinin library functions.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<math.h>\fP, \fI<complex.h>\fP, tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001, \fIcabs\fP(), \fIfabs\fP(), \fImodf\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
