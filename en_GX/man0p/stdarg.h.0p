.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "<stdarg.h>" 0P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" <stdarg.h> 
.SH NAME
stdarg.h \- handle variable argument list
.SH SYNOPSIS
.LP
\fB#include <stdarg.h>
.br
.sp
void va_start(va_list\fP \fIap\fP\fB,\fP \fIargN\fP\fB);
.br
void va_copy(va_list\fP \fIdest\fP\fB, va_list\fP \fIsrc\fP\fB);
.br
type va_arg(va_list\fP \fIap\fP\fB,\fP \fItype\fP\fB);
.br
void va_end(va_list\fP \fIap\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fI<stdarg.h>\fP header shall contain a set of macros which allows
portable functions dat accept variable argument
lists ta be written. I aint talkin' bout chicken n' gravy biatch. Functions dat have variable argument lists (such
as \fIprintf\fP())
but do not use these macros is inherently non-portable, as different
systems use different argument-passin conventions.
.LP
Da type \fBva_list\fP shall be defined fo' variablez used ta traverse
the list.
.LP
Da \fIva_start\fP() macro is invoked ta initialize \fIap\fP ta the
beginnin of tha list before any calls to
\fIva_arg\fP().
.LP
Da \fIva_copy\fP() macro initializes \fIdest\fP as a cold-ass lil copy of \fIsrc\fP,
as if tha \fIva_start\fP() macro had been applied
to \fIdest\fP followed by tha same sequence of usez of tha \fIva_arg\fP()
macro as had previously been used ta reach tha present
state of \fIsrc\fP. Neither tha \fIva_copy\fP() nor \fIva_start\fP()
macro shall be invoked ta reinitialize \fIdest\fP without
an intervenin invocation of tha \fIva_end\fP() macro fo' tha same
\fIdest\fP.
.LP
Da object \fIap\fP may be passed as a argument ta another function;
if dat function invokes tha \fIva_arg\fP() macro with
parameta \fIap\fP, tha value of \fIap\fP up in tha callin function
is unspecified n' shall be passed ta tha \fIva_end\fP() macro
prior ta any further reference ta \fIap\fP. Da parameta \fIargN\fP
is tha identifier of tha rightmost parameta up in tha variable
parameta list up in tha function definizzle (the one just before the
\&...). If tha parameta \fIargN\fP is declared wit the
\fBregister\fP storage class, wit a gangbangin' function type or array type,
or wit a type dat aint compatible wit tha type dat thangs up in dis biatch
afta application of tha default argument promotions, tha behavior
is undefined.
.LP
Da \fIva_arg\fP() macro shall return tha next argument up in tha list
pointed ta by \fIap\fP. Each invocation of \fIva_arg\fP()
modifies \fIap\fP so dat tha jointz of successive arguments is returned
in turn, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da \fItype\fP parameta shall be a type name
specified such dat tha type of a pointa ta a object dat has the
specified type can be obtained simply by postfixin a
\fB'*'\fP ta type. If there is no actual next argument, or if \fItype\fP
is not compatible wit tha type of tha actual next
argument (as promoted accordin ta tha default argument promotions),
the behavior is undefined, except fo' tha followin cases:
.IP " *" 3
One type be a signed integer type, tha other type is tha corresponding
unsigned integer type, n' tha value is representable in
both types.
.LP
.IP " *" 3
One type be a pointa ta \fBvoid\fP n' tha other be a pointa to
a characta type.
.LP
.IP " *" 3
Both types is pointers. 
.LP
.LP
Different types can be mixed yo, but it is up ta tha routine ta know
what type of argument is expected.
.LP
Da \fIva_end\fP() macro is used ta clean up; it invalidates \fIap\fP
for use (unless \fIva_start\fP() or \fIva_copy\fP() is
invoked again).
.LP
Each invocation of tha \fIva_start\fP() n' \fIva_copy\fP() macros
shall be matched by a cold-ass lil correspondin invocation of the
\fIva_end\fP() macro up in tha same function.
.LP
Multiple traversals, each bracketed by \fIva_start\fP() ... \fIva_end\fP(),
are possible.
.SH EXAMPLES
.LP
This example be a possible implementation of \fIexecl\fP():
.sp
.RS
.nf

\fB#include <stdarg.h>
.sp

#define  MAXARGS     31

.sp

/*
 * execl is called by
 * execl(file, arg1, arg2, ..., (char *)(0));
 */
int execl(const char *file, const char *args, ...)
{
    va_list ap;
    char *array[MAXARGS +1];
    int argno = 0;
.sp

    va_start(ap, args);
    while (args != 0 && argno < MAXARGS)
    {
        array[argno++] = args;
        args = va_arg(ap, const char *);
    }
    array[argno] = (char *) 0;
    va_end(ap);
    return execv(file, array);
}
\fP
.fi
.RE
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
It be up ta tha callin routine ta rap ta tha called routine
how nuff arguments there are, since it aint always
possible fo' tha called routine ta determine dis up in any other way.
For example, \fIexecl\fP() is passed a null pointa ta signal the
end of tha list. Da \fIprintf\fP() function can tell how tha fuck nuff arguments
are there by tha \fIformat\fP argument.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
Da System Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIexec\fP,
\fIprintf\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
