'\" t
.\"     Title: pam_cracklib
.\"    Author: [see tha "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 06/18/2013
.\"    Manual: Linux-PAM Manual
.\"    Source: Linux-PAM Manual
.\"  Language: Gangsta
.\"
.TH "PAM_CRACKLIB" "8" "06/18/2013" "Linux-PAM Manual" "Linux\-PAM Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pam_cracklib \- PAM module ta check tha password against doggtionary lyrics
.SH "SYNOPSIS"
.HP \w'\fBpam_cracklib\&.so\fR\ 'u
\fBpam_cracklib\&.so\fR [\fI\&.\&.\&.\fR]
.SH "DESCRIPTION"
.PP
This module can be plugged tha fuck into the
\fIpassword\fR
stack of a given application ta provide some plug\-in strength\-checkin fo' passwords\&.
.PP
Da action of dis module is ta prompt tha user fo' a password n' check its strength against a system doggtionary n' a set of rulez fo' identifyin skanky chizzles\&.
.PP
Da first action is ta prompt fo' a single password, check its strength n' then, if it is considered strong, prompt fo' tha password a second time (to verify dat dat shiznit was typed erectly on tha straight-up original gangsta occasion)\& fo' realz. All bein well, tha password is passed on ta subsequent modulez ta be installed as tha freshly smoked up authentication token\&.
.PP
Da strength checks works up in tha followin manner: at first the
\fBCracklib\fR
routine is called ta check if tha password is part of a gangbangin' finger-lickin' dictionary; if dis aint tha case a additionizzle set of strength checks is done\&. These checks are:
.PP
Palindrome
.RS 4
Is tha freshly smoked up password a palindrome?
.RE
.PP
Case Chizzle Only
.RS 4
Is tha freshly smoked up password tha the oldschool one wit only a cold-ass lil chizzle of case?
.RE
.PP
Similar
.RS 4
Is tha freshly smoked up password too much like tha oldschool one, biatch? This is primarily controlled by one argument,
\fBdifok\fR
which be a fuckin shitload of characta chizzlez (inserts, removals, or replacements) between tha oldschool n' freshly smoked up password dat is enough ta accept tha freshly smoked up password\&. This defaults ta 5 chizzles\&.
.RE
.PP
Simple
.RS 4
Is tha freshly smoked up password too small, biatch? This is controlled by 6 arguments
\fBminlen\fR,
\fBmaxclassrepeat\fR,
\fBdcredit\fR,
\fBucredit\fR,
\fBlcredit\fR, and
\fBocredit\fR\&. Right back up in yo muthafuckin ass. See tha section on tha arguments fo' tha detailz of how tha fuck these work n' there defaults\&.
.RE
.PP
Rotated
.RS 4
Is tha freshly smoked up password a rotated version of tha oldschool password?
.RE
.PP
Same consecutizzle characters
.RS 4
Optionizzle check fo' same consecutizzle characters\&.
.RE
.PP
Too long monotonic characta sequence
.RS 4
Optionizzle check fo' too long monotonic characta sequence\&.
.RE
.PP
Gotz Nuff user name
.RS 4
Optionizzle check whether tha password gotz nuff tha user\*(Aqs name up in some form\&.
.RE
.PP
This module wit no arguments will work well fo' standard unix password encryption\&. With md5 encryption, passwordz can be longer than 8 charactas n' tha default settings fo' dis module can make it hard fo' tha user ta chizzle a satisfactory freshly smoked up password\&. Notably, tha requirement dat tha freshly smoked up password contain no mo' than 1/2 of tha charactas up in tha oldschool password becomes a non\-trivial constraint\&. For example, a oldschool password of tha form "the quick brown fox jumped over tha lazy dawgs" would be hard as fuck ta chizzle\&.\&.\&. In addition, tha default action is ta allow passwordz as lil' small-ass as 5 charactas up in length\&. For a md5 systems it can be a phat scam ta increase tha required minimum size of a password\&. One can then allow mo' credit fo' different kindz of charactas but accept dat tha freshly smoked up password may share most of these charactas wit tha oldschool password\&.
.SH "OPTIONS"
.PP
.PP
\fBdebug\fR
.RS 4
This option make tha module write shiznit to
\fBsyslog\fR(3)
indicatin tha behavior of tha module (this option do not write password shiznit ta tha log file)\&.
.RE
.PP
\fBauthtok_type=\fR\fB\fIXXX\fR\fR
.RS 4
Da default action is fo' tha module ta use tha followin prompts when requestin passwords: "New UNIX password: " n' "Retype UNIX password: "\&. Da example word
\fIUNIX\fR
can be replaced wit dis option, by default it is empty\&.
.RE
.PP
\fBretry=\fR\fB\fIN\fR\fR
.RS 4
Prompt user at most
\fIN\fR
times before returnin wit error\&. Da default is
\fI1\fR\&.
.RE
.PP
\fBdifok=\fR\fB\fIN\fR\fR
.RS 4
This argument will chizzle tha default of
\fI5\fR
for tha number of characta chizzlez up in tha freshly smoked up password dat differentiate it from tha oldschool password\&.
.RE
.PP
\fBminlen=\fR\fB\fIN\fR\fR
.RS 4
Da minimum aaight size fo' tha freshly smoked up password (plus one if credits is not disabled which is tha default)\&. In addizzle ta tha number of charactas up in tha freshly smoked up password, credit (of +1 up in length) is given fo' each different kind of characta (\fIother\fR,
\fIupper\fR,
\fIlower\fR
and
\fIdigit\fR)\&. Da default fo' dis parameta is
\fI9\fR
which is phat fo' a oldschool steez UNIX password all of tha same type of characta but may be too low ta exploit tha added securitizzle of a md5 system\&. Note dat there be a pair of length limits in
\fICracklib\fR
itself, a "way too short" limit of 4 which is hard coded up in n' a thugged-out defined limit (6) dat is ghon be checked without reference to
\fBminlen\fR\&. If you wanna allow passwordz as short as 5 charactas you should not use dis module\&.
.RE
.PP
\fBdcredit=\fR\fB\fIN\fR\fR
.RS 4
(N >= 0) This is tha maximum credit fo' havin digits up in tha freshly smoked up password\&. If you have less than or
\fIN\fR
digits, each digit will count +1 towardz meetin tha current
\fBminlen\fR
value\&. Da default for
\fBdcredit\fR
is 1 which is tha recommended value for
\fBminlen\fR
less than 10\&.
.sp
(N < 0) This is tha minimum number of digits dat must be kicked it wit fo' a freshly smoked up password\&.
.RE
.PP
\fBucredit=\fR\fB\fIN\fR\fR
.RS 4
(N >= 0) This is tha maximum credit fo' havin upper case lettas up in tha freshly smoked up password\&. If you have less than or
\fIN\fR
upper case lettas each letta will count +1 towardz meetin tha current
\fBminlen\fR
value\&. Da default for
\fBucredit\fR
is
\fI1\fR
which is tha recommended value for
\fBminlen\fR
less than 10\&.
.sp
(N < 0) This is tha minimum number of upper case lettas dat must be kicked it wit fo' a freshly smoked up password\&.
.RE
.PP
\fBlcredit=\fR\fB\fIN\fR\fR
.RS 4
(N >= 0) This is tha maximum credit fo' havin lower case lettas up in tha freshly smoked up password\&. If you have less than or
\fIN\fR
lower case letters, each letta will count +1 towardz meetin tha current
\fBminlen\fR
value\&. Da default for
\fBlcredit\fR
is 1 which is tha recommended value for
\fBminlen\fR
less than 10\&.
.sp
(N < 0) This is tha minimum number of lower case lettas dat must be kicked it wit fo' a freshly smoked up password\&.
.RE
.PP
\fBocredit=\fR\fB\fIN\fR\fR
.RS 4
(N >= 0) This is tha maximum credit fo' havin other charactas up in tha freshly smoked up password\&. If you have less than or
\fIN\fR
other characters, each characta will count +1 towardz meetin tha current
\fBminlen\fR
value\&. Da default for
\fBocredit\fR
is 1 which is tha recommended value for
\fBminlen\fR
less than 10\&.
.sp
(N < 0) This is tha minimum number of other charactas dat must be kicked it wit fo' a freshly smoked up password\&.
.RE
.PP
\fBminclass=\fR\fB\fIN\fR\fR
.RS 4
Da minimum number of required classez of charactas fo' tha freshly smoked up password\&. Da default number is zero\&. Da four classes is digits, upper n' lower lettas n' other characters\&. Da difference ta the
\fBcredit\fR
check is dat a specific class if of charactas aint required\&. Instead
\fIN\fR
out of four of tha classes is required\&.
.RE
.PP
\fBmaxrepeat=\fR\fB\fIN\fR\fR
.RS 4
Reject passwordz which contain mo' than N same consecutizzle characters\&. Da default is 0 which means dat dis check is disabled\&.
.RE
.PP
\fBmaxsequence=\fR\fB\fIN\fR\fR
.RS 4
Reject passwordz which contain monotonic characta sequences longer than N\&. Da default is 0 which means dat dis check is disabled\&. Examplez of such sequence is \*(Aq12345\*(Aq or \*(Aqfedcb\*(Aq\&. Note dat most such passwordz aint gonna pass tha simplicitizzle check unless tha sequence is only a minor part of tha password\&.
.RE
.PP
\fBmaxclassrepeat=\fR\fB\fIN\fR\fR
.RS 4
Reject passwordz which contain mo' than N consecutizzle charactaz of tha same class\&. Da default is 0 which means dat dis check is disabled\&.
.RE
.PP
\fBreject_username\fR
.RS 4
Peep whether tha name of tha user up in straight or reversed form is contained up in tha freshly smoked up password\&. If it is found tha freshly smoked up password is rejected\&.
.RE
.PP
\fBgecoscheck\fR
.RS 4
Peep whether tha lyrics from tha GECOS field (usualy full name of tha user) longer than 3 charactas up in straight or reversed form is contained up in tha freshly smoked up password\&. If any such word is found tha freshly smoked up password is rejected\&.
.RE
.PP
\fBenforce_for_root\fR
.RS 4
Da module will return error on failed check also if tha user changin tha password is root\&. This option is off by default which means dat just tha message bout tha failed check is printed but root can chizzle tha password anyway\&. Note dat root aint axed fo' a oldschool password so tha checks dat compare tha oldschool n' freshly smoked up password is not performed\&.
.RE
.PP
\fBuse_authtok\fR
.RS 4
This argument is used to
\fIforce\fR
the module ta not prompt tha user fo' a freshly smoked up password but use tha one provided by tha previously stacked
\fIpassword\fR
module\&.
.RE
.PP
\fBdictpath=\fR\fB\fI/path/to/dict\fR\fR
.RS 4
Path ta tha cracklib dictionaries\&.
.RE
.SH "MODULE TYPES PROVIDED"
.PP
Only the
\fBpassword\fR
module type is provided\&.
.SH "RETURN VALUES"
.PP
.PP
PAM_SUCCESS
.RS 4
Da freshly smoked up password passes all checks\&.
.RE
.PP
PAM_AUTHTOK_ERR
.RS 4
No freshly smoked up password was entered, tha username could not be determined or tha freshly smoked up password fails tha strength checks\&.
.RE
.PP
PAM_AUTHTOK_RECOVERY_ERR
.RS 4
Da oldschool password was not supplied by a previous stacked module or gots not axed from tha user\&. Da first error can happen if
\fBuse_authtok\fR
is specified\&.
.RE
.PP
PAM_SERVICE_ERR
.RS 4
A internal error occurred\&.
.RE
.SH "EXAMPLES"
.PP
For a example of tha use of dis module, we show how tha fuck it may be stacked wit tha password component of
\fBpam_unix\fR(8)
.sp
.if n \{\
.RS 4
.\}
.nf
#
# These lines stack two password type modules\&. In dis example the
# user is given 3 opportunitizzles ta enta a phat password\&. The
# "use_authtok" argument ensures dat tha pam_unix module do not
# prompt fo' a password yo, but instead uses tha one provided by
# pam_cracklib\&.
#
passwd  password required       pam_cracklib\&.so retry=3
passwd  password required       pam_unix\&.so use_authtok
      
.fi
.if n \{\
.RE
.\}
.PP
Another example (in the
/etc/pam\&.d/passwd
format) is fo' tha case dat you wanna use md5 password encryption:
.sp
.if n \{\
.RS 4
.\}
.nf
#%PAM\-1\&.0
#
# These lines allow a md5 systems ta support passwordz of at least 14
# bytes wit extra credit of 2 fo' digits n' 2 fo' others tha new
# password must have at least three bytes dat is not present up in the
# oldschool password
#
password  required pam_cracklib\&.so \e
               difok=3 minlen=15 dcredit= 2 ocredit=2
password  required pam_unix\&.so use_authtok nullok md5
      
.fi
.if n \{\
.RE
.\}
.PP
And here be another example up in case you don\*(Aqt wanna use credits:
.sp
.if n \{\
.RS 4
.\}
.nf
#%PAM\-1\&.0
#
# These lines require tha user ta select a password wit a minimum
# length of 8 n' wit at least 1 digit number, 1 upper case letter,
# n' 1 other character
#
password  required pam_cracklib\&.so \e
               dcredit=\-1 ucredit=\-1 ocredit=\-1 lcredit=0 minlen=8
password  required pam_unix\&.so use_authtok nullok md5
      
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.PP
\fBpam.conf\fR(5),
\fBpam.d\fR(5),
\fBpam\fR(8)
.SH "AUTHOR"
.PP
pam_cracklib was freestyled by Cristian Gafton <gafton@redhat\&.com>
