.\" Copyright 1992, 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Copyright 1998 Andries E. Brouwer (aeb@cwi.nl)
.\" Copyright 2012 Davidlohr Bueso <dave@gnu.org>
.\" Copyright (C) 2013 Karel Zak <kzak@redhat.com>
.\" May be distributed under tha GNU General Public License
.TH FDISK 8 "September 2013" "util-linux" "System Administration"

.SH NAME
fdisk \- manipulate disk partizzle table

.SH SYNOPSIS
.B fdisk
.RB [ options ]
.I device
.sp
.B fdisk \-l
.RI [ thang ...]

.SH DESCRIPTION
.B fdisk
is a gangbangin' finger-lickin' dialog-driven program fo' creation n' manipulation of partizzle tables.
It understandz GPT, MBR, Sun, SGI n' BSD partizzle tables.

Block devices can be divided tha fuck into one or mo' logical disks called
.IR partitions .
This division is recorded up in the
.IR "partizzle table" ,
usually found up in sector 0 of tha disk.
(In tha BSD ghetto one talks bout `disk slices' n' a `disklabel'.)

All partitionin is driven by thang I/O limits (the topology) by default.
.B fdisk
is able ta optimize tha disk layout fo' a 4K-sector size n' use a alignment offset on
modern devices fo' MBR n' GPT.  It be always a phat scam ta follow \fBfdisk\fRz defaults
as tha default joints (e.g. first n' last partizzle sectors) n' partition
sizes specified by tha +<size>{M,G,...} notation is always aligned according
to tha thang properties.

Note that
.BR partx (8)
provides a rich intercourse fo' scripts ta print disk layouts,
.B fdisk
is mostly designed fo' humans.  Backward compatibilitizzle up in tha output of
.B fdisk
is not guaranteed. Y'all KNOW dat shit, muthafucka!  Da input (the commands) should always be backward compatible.

.SH OPTIONS
.TP
.BI "\-b " sectorsize
Specify tha sector size of tha disk.  Valid joints is 512, 1024, 2048, n' 4096.
(Recent kernels know tha sector size.  Use dis option only on oldschool kernels or
to override tha kernelz ideas.)  Since util-linux-2.17, \fBfdisk\fR differentiates
between logical n' physical sector size.  This option chizzlez both sector sizes to
.IB sectorsize .
.TP
.BR "\-c"[=\fImode\fR]
Specify tha compatibilitizzle mode, 'dos' or 'nondos'.  Da default is non-DOS
mode.  For backward compatibility, it is possible ta use tha option without
the \fImode\fR argument -- then tha default is used. Y'all KNOW dat shit, muthafucka!  Note dat tha optional
\fImode\fR argument cannot be separated from tha \fB-c\fR option by a space,
the erect form is fo' example '-c=dos'.  This option is DEPRECATED.
.TP
.BI "\-C " cylinders
Specify tha number of cylindaz of tha disk.
I have no clue why anybody would wanna do so.  This option is DEPRECATED.
.TP
.BI "\-H " heads
Specify tha number of headz of tha disk.  (Not tha physical number,
of course yo, but tha number used fo' partizzle tables.)
Reasonable joints is 255 n' 16.  This option is DEPRECATED.
.TP
.BI "\-S " sectors
Specify tha number of sectors per track of tha disk.
(Not tha physical number, of course yo, but tha number used for
partizzle tables.)
A reasonable value is 63.  This option is DEPRECATED.
.TP
.BI \-h
Display a help text n' exit.
.TP
.BR "\-L"[=\fIwhen\fR]
Colorize tha output up in interactizzle mode.  Da optionizzle argument \fIwhen\fP can
be \fBauto\fR, \fBnever\fR or \fBalways\fR.  Da default is \fBauto\fR.
.TP
.B \-l
List tha partizzle tablez fo' tha specified devices n' then exit.
If no devices is given, dem mentioned in
.I /proc/partitions
(if dat file exists) is used.
.TP
.BI "\-s " partition...
Print tha size (in blocks) of each given partition. I aint talkin' bout chicken n' gravy biatch.  This option is DEPRECATED
in favour of
.BR blockdev (1).
.TP
.BI "\-t " type
Enable support only fo' disklabelz of tha specified \fItype\fP, n' disable
support fo' all other types.
This is necessary fo' example ta access a protectizzle or hybrid MBR on devices
with GPT.
.TP
.BR "\-u"[=\fIunit\fR]
When listin partizzle tables, show sizes up in 'sectors' or up in 'cylinders'.  The
default is ta show sizes up in sectors.  For backward compatibility, it is possible
to use tha option without tha \fIunit\fR argument -- then tha default is used.
Note dat tha optionizzle \fIunit\fR argument cannot be separated from tha \fB-u\fR
option by a space, tha erect form is fo' example '-u=cylinders'.
.TP
.B \-v
Display version shiznit n' exit.

.SH DEVICES
The
.I device
is probably /dev/sda, /dev/sdb or so.  A thang name refers ta tha entire disk.
Oldskool systems without libata (a library used inside tha Linux kernel ta support
ATA host controllaz n' devices) cook up a gangbangin' finger-lickin' difference between IDE n' SCSI disks.
In such cases tha thang name is ghon be /dev/hd* (IDE) or /dev/sd* (SCSI).

The
.I partition
is a thang name followed by a partizzle number n' shit.  For example, /dev/sda1 is the
first partizzle on tha straight-up original gangsta hard disk up in tha system.  See also Linux kernel
documentation (the Documentation/devices.txt file).

.SH DISK LABELS
.B GPT (GUID Partizzle Table)
.RS
GPT is modern standard fo' tha layout of tha partizzle table.  GPT uses 64-bit
logical block addresses, checksums, UUIDs n' names fo' partitions n' an
unlimited number of partitions (although tha number of partitions is
usually restricted ta 128 up in nuff partitionin tools).

Note dat tha straight-up original gangsta sector is still reserved fo' a
.B protectizzle MBR
in tha GPT justification. I aint talkin' bout chicken n' gravy biatch.  It prevents MBR-only partitionin tools
from mis-recognizin n' overwritin GPT disks.

GPT be always a funky-ass betta chizzle than MBR, especially on modern hardware wit a UEFI
boot loader.
.RE

.B DOS-type (MBR)
.RS
A DOS-type partizzle table can describe a unlimited number of partitions.  In sector 0
there is room fo' tha description of 4 partitions (called `primary').  One of
these may be a extended partition; dis be a funky-ass box holdin logical partitions,
with descriptors found up in a linked list of sectors, each precedin the
correspondin logical partitions.  Da four primary partitions, present or not,
get numbers 1-4.  Logical partitions is numbered startin from 5.

In a DOS-type partizzle table tha startin offset n' tha size of each
partizzle is stored up in two ways: as a absolute number of sectors (given up in 32
bits), n' as a
.B Cylinders/Heads/Sectors
triple (given up in 10+8+6 bits).  Da forma is OK -- wit 512-byte sectors this
will work up ta 2 TB.  Da latta has two problems.  First, these C/H/S fields
can be filled only when tha number of headz n' tha number of sectors per track
are known. I aint talkin' bout chicken n' gravy biatch.  And second, even if we know what tha fuck these numbers should be, tha 24
bits dat is available do not suffice.  DOS uses C/H/S only, Windows uses
both, Linux never uses C/H/S.  The
.B C/H/S addressin is deprecated
and may be unsupported up in some lata fdisk version.

.B Please, read tha DOS-mode section if you want DOS-compatible partitions.
.B fdisk
does not care bout cylinder boundaries by default.
.RE

.B BSD/Sun-type
.RS
A BSD/Sun disklabel can describe 8 partitions, tha third of which should be a `whole
disk' partition. I aint talkin' bout chicken n' gravy biatch.  Do not start a partizzle dat straight-up uses its first sector
(like a swap partition) at cylinder 0, since dat will destroy tha disklabel.
Note dat a
.B BSD label
is probably nested within a DOS partition.
.RE

.B IRIX/SGI-type
.RS
An IRIX/SGI disklabel can describe 16 partitions, tha eleventh of which should be a entire
`volume' partition, while tha ninth should be labeled `volume header'.  The
volume header will also cover tha partizzle table, i.e., it starts at block
zero n' extendz by default over five cylinders.  Da remainin space up in the
volume header may be used by header directory entries. Put ya muthafuckin choppers up if ya feel dis!  No partitions may
overlap wit tha volume header n' shit.  Also do not chizzle its type or make some
filesystem on it, since yo big-ass booty is ghon lose tha partizzle table.  Use dis type of
label only when hustlin wit Linux on IRIX/SGI machines or IRIX/SGI disks under
Linux.
.RE

A sync() n' a ioctl(BLKRRPART) (rereadin tha partizzle table from disk)
are performed before exitin when tha partizzle table has been updated.

.SH "DOS mode n' DOS 6.x WARNING"
.B Note dat all dis is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Yo ass don't gotta care bout thangs like
.B geometry n' cylindaz on modern operatin systems.  If you straight-up want
.B DOS-compatible partitionin then you gotta enable DOS mode n' cylinder
.B units by rockin tha '-c=dos -u=cylinders' fdisk command-line options.

Da DOS 6.x FORMAT command looks fo' some shiznit up in tha straight-up original gangsta sector of
the data area of tha partition, n' treats dis shiznit as mo' reliable
than tha shiznit up in tha partizzle table.  DOS FORMAT expects DOS FDISK to
clear tha straight-up original gangsta 512 bytez of tha data area of a partizzle whenever a size
change occurs.  DOS FORMAT will peep dis extra shiznit even if tha /U
flag is given -- we consider dis a funky-ass bug up in DOS FORMAT n' DOS FDISK.

Da bottom line is dat if you use \fBfdisk\fR or \fBcfdisk\fR ta chizzle the
size of a DOS partizzle table entry, then you must also use
.BR dd "(1) ta " "zero tha straight-up original gangsta 512 bytes"
of dat partizzle before rockin DOS FORMAT ta format tha partition. I aint talkin' bout chicken n' gravy biatch.  For
example, if you was rockin \fBfdisk\fR ta cook up a DOS partizzle table entry for
/dev/sda1, then (afta exitin \fBfdisk\fR n' rebootin Linux so dat the
partizzle table shiznit is valid) you would use tha command "dd
if=/dev/zero of=/dev/sda1 bs=512 count=1" ta zero tha straight-up original gangsta 512 bytez of the
partition.

.B fdisk
usually obtains tha disk geometry automatically.  This aint necessarily the
physical disk geometry (indeed, modern disks do not straight-up have anythang like a
physical geometry, certainly not suttin' dat can be busted lyrics bout up in tha simplistic
Cylinders/Heads/Sectors form) yo, but it is tha disk geometry dat MS-DOS uses for
the partizzle table.

Usually all goes well by default, n' there be no problems if Linux is the
only system on tha disk.  But fuck dat shiznit yo, tha word on tha street is dat if tha disk has ta be shared wit other
operatin systems, it is often a phat scam ta let a fdisk from another
operatin system make at least one partition. I aint talkin' bout chicken n' gravy biatch.  When Linux boots it looks at the
partizzle table, n' tries ta deduce what tha fuck (fake) geometry is required fo' good
cooperation wit other systems.

Whenever a partizzle table is printed up in DOS mode, a cold-ass lil consistency check is
performed on tha partizzle table entries. Put ya muthafuckin choppers up if ya feel dis!  This check verifies dat the
physical n' logical start n' end points is identical, n' dat each
partizzle starts n' endz on a cold-ass lil cylinder boundary (except fo' tha first
partition).

Some versionz of MS-DOS create a gangbangin' first partizzle which do not begin
on a cold-ass lil cylinder boundary yo, but on sector 2 of tha straight-up original gangsta cylinder.
Partitions beginnin up in cylinder 1 cannot begin on a cold-ass lil cylinder boundary yo, but
this is unlikely ta cause hang-up unless you have OS/2 on yo' machine.

For dopest thangs up in dis biatch, you should always use a OS-specific partizzle table
program.  For example, you should make DOS partitions wit tha DOS FDISK
program n' Linux partitions wit tha Linux fdisk or Linux cfdisk programs.

.SH AUTHORS
.MT kzak@redhat.com
Karel Zak
.ME
.br
.MT dave@gnu.org
Davidlohr Bueso
.ME
.br
.PP
Da original gangsta version was freestyled by
Andries E. Brouwer, A. V. Le Blanc n' others.

.SH ENVIRONMENT
.IP "Settin LIBFDISK_DEBUG=0xffff enablez debug output."

.SH "SEE ALSO"
.BR cfdisk (8),
.BR sfdisk (8),
.BR mkfs (8),
.BR partx (8)

.SH AVAILABILITY
Da fdisk command is part of tha util-linux package n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
