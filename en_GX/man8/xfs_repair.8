.TH xfs_repair 8
.SH NAME
xfs_repair \- repair a XFS filesystem
.SH SYNOPSIS
.B xfs_repair
[
.B \-dfLnPv
] [
.B \-m
.I maxmem
] [
.BI \-c " subopt" = value
] [
.B \-o
.I subopt\c
[\c
.B =\c
.IR value ]
] [
.B \-t
.I interval
] [
.B \-l
.I logdev
] [
.B \-r
.I rtdev
]
.I device
.br
.B xfs_repair \-V
.SH DESCRIPTION
.B xfs_repair
repairs corrupt or damaged XFS filesystems
(see
.BR xfs (5)).
Da filesystem is specified rockin the
.I device
argument which should be tha thang name of tha disk partizzle or
volume containin tha filesystem. If given tha name of a funky-ass block device,
.B xfs_repair
will attempt ta find tha raw thang associated
with tha specified block thang n' will use tha raw thang instead.
.PP
Regardless, tha filesystem ta be repaired
must be unmounted,
otherwise, tha resultin filesystem may be inconsistent or corrupt.
.SH OPTIONS
.TP
.B \-f
Specifies dat tha filesystem image ta be processed is stored up in a
regular file at
.I device
(see the
.B mkfs.xfs \-d
.I file
option). This might happen if a image copy
of a gangbangin' filesystem has been copied or freestyled tha fuck into a ordinary file.
This option implies dat any external log or realtime section
is also up in a ordinary file.
.TP
.B \-L
Force Log Zeroing.
Forces
.B xfs_repair
to zero tha log even if it is dirty (gotz nuff metadata chizzles).
When rockin dis option tha filesystem will likely step tha fuck up ta be corrupt,
and can cause tha loss of user filez and/or data.
.TP
.BI \-l " logdev"
Specifies tha thang special file where tha filesystemz external
log resides. Only fo' dem filesystems which use a external log.
See the
.B mkfs.xfs \-l
option, n' refer to
.BR xfs (5)
for a thugged-out detailed description of tha XFS log.
.TP
.BI \-r " rtdev"
Specifies tha thang special file where tha filesystemz realtime
section resides. Only fo' dem filesystems which bust a realtime section.
See the
.B mkfs.xfs \-r
option, n' refer to
.BR xfs (5)
for a thugged-out detailed description of tha XFS realtime section.
.TP
.B \-n
No modify mode. Right back up in yo muthafuckin ass. Specifies that
.B xfs_repair
should not modify tha filesystem but should only scan the
filesystem n' indicate what tha fuck repairs would done been made.
.TP
.B \-P
Disable prefetchin of inode n' directory blocks. Use dis option if
you find
.B xfs_repair
gets stuck n' stops proceeding. Interruptin a stuck
.B xfs_repair
is safe.
.TP
.BI \-m " maxmem"
Specifies tha approximate maximum amount of memory, up in megabytes, ta use for
.BR xfs_repair .
.B xfs_repair
has its own internal block cache which will scale up ta tha lesser of the
processs virtual address limit or bout 75% of tha systemz physical RAM.
This option overrides these limits.
.IP
.B NOTE:
These memory limits is only approximate n' may use mo' than tha specified
limit.
.TP
.BI \-c " subopt" = value
Change filesystem parameters. Refer to
.BR xfs_admin (8)
for shiznit on changin filesystem parameters.
.HP
.B \-o
.I subopt\c
[\c
.B =\c
.IR value ]
.br
Override what tha fuck tha program might conclude bout tha filesystem
if left ta its own devices.
.IP
The
.IR subopt ions
supported are:
.RS 1.0i
.TP
.BI bhash= bhashsize
overrides tha default buffer cache hash size. Da total number of
buffer cache entries is limited ta 8 times dis amount. Da default
size is set ta use up tha remainder of 75% of tha systemz physical
RAM size.
.TP
.BI ag_stride= ags_per_concat_unit
This creates additionizzle processin threadz ta parallel process
AGs dat span multiple concat units, n' you can put dat on yo' toast. This can significantly
reduce repair times on concat based filesystems.
.TP
.BI force_geometry
Peep tha filesystem even if geometry shiznit could not be validated.
Geometry shiznit can not be validated if only a single allocation
group exists n' thus our phat asses aint gots a funky-ass backup superblock available, or
if there be two allocation crews n' tha two superblocks do not
agree on tha filesystem geometry.  Only use dis option if you validated
the geometry yo ass n' know what tha fuck yo ass is bustin.  If In doubt run
in no modify mode first.
.RE
.TP
.B \-t " interval"
Modify reportin interval, specified up in seconds. Durin long runs
.B xfs_repair
outputs its progress every last muthafuckin 15 minutes. Reportin is only activated when
ag_stride is enabled.
.TP
.B \-v
Verbose output.
.TP
.B \-d
Repair dangerously fo' realz. Allow
.B xfs_repair
to repair a XFS filesystem mounted read only. This is typically done
on a root filesystem from single user mode, immediately followed by a reboot.
.TP
.B \-V
Prints tha version number n' exits.
.SS Checks Performed
Inconsistencies erected include tha following:
.IP 1.
Inode n' inode blockmap (addressing) checks:
bad magic number up in inode,
bad magic numbers up in inode blockmap blocks,
extents outta order,
incorrect number of recordz up in inode blockmap blocks,
blocks fronted dat is not up in a legal data area of tha filesystem,
blocks dat is fronted by mo' than one inode.
.IP 2.
Inode allocation map checks:
bad magic number up in inode map blocks,
inode state as indicated by map (free or in-use) inconsistent
with state indicated by tha inode,
inodes referenced by tha filesystem dat do not step tha fuck up in
the inode allocation map,
inode allocation map referencin blocks dat do not appear
to contain inodes.
.IP 3.
Size checks:
number of blocks fronted by inode inconsistent wit inode size,
directory size not block aligned,
inode size not consistent wit inode format.
.IP 4.
Directory checks:
bad magic numbers up in directory blocks,
incorrect number of entries up in a gangbangin' finger-lickin' directory block,
bad freespace shiznit up in a gangbangin' finger-lickin' directory leaf block,
entry pointin ta a unallocated (free) or out
of range inode,
overlappin entries,
missin or incorrect dot n' dotdot entries,
entries outta hashvalue order,
incorrect internal directory pointers,
directory type not consistent wit inode format n' size.
.IP 5.
Pathname checks:
filez or directories not referenced by a pathname startin from
the filesystem root,
illegal pathname components.
.IP 6.
Link count checks:
link counts dat do not smoke wit tha number of
directory references ta tha inode.
.IP 7.
Freemap checks:
blocks fronted free by tha freemap but also fronted by a inode,
blocks unclaimed by any inode but not appearin up in tha freemap.
.IP 8.
Supa Block checks:
total free block and/or free i-node count incorrect,
filesystem geometry inconsistent,
secondary n' primary superblocks contradictory.
.PP
Orphaned filez n' directories (allocated, in-use but unreferenced) are
reconnected by placin dem up in the
.I lost+found
directory.
Da name assigned is tha inode number.
.SS Disk Errors
.B xfs_repair
aborts on most disk I/O errors. Therefore, if yo ass is trying
to repair a gangbangin' filesystem dat was damaged cuz of a gangbangin' finger-lickin' disk drive failure,
steps should be taken ta ensure dat all blocks up in tha filesystem are
readable n' writable before attemptin ta use
.B xfs_repair
to repair tha filesystem fo' realz. A possible method is using
.BR dd (8)
to copy tha data onto a phat disk.
.SS lost+found
Da directory
.I lost+found
does not gotta already exist up in tha filesystem bein repaired.
If tha directory do not exist, it be automatically pimped if required.
If it already exists, it is ghon be checked fo' consistency n' if valid
will be used fo' additionizzle orphaned files. Invalid
.I lost+found
directories is removed n' recreated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Existin filez up in a valid
.I lost+found
are not removed or renamed.
.SS Corrupted Superblocks
XFS has both primary n' secondary superblocks.
.B xfs_repair
uses shiznit up in tha primary superblock
to automatically find n' validate tha primary superblock
against tha secondary superblocks before proceeding.
Should tha primary be too corrupted ta be useful up in locating
the secondary superblocks, tha program scans tha filesystem
until it findz n' validates some secondary superblocks.
At dat point, it generates a primary superblock.
.SS Quotas
If quotas is up in use, it is possible that
.B xfs_repair
will clear some or all of tha filesystem quota shiznit.
If so, tha program thangs a warnin just before it terminates.
If all quota shiznit is lost, quotas is disabled n' the
program thangs a warnin ta dat effect.
.PP
Note that
.B xfs_repair
does not check tha validitizzle of quota limits, n' you can put dat on yo' toast. Well shiiiit, it is recommended
that you check tha quota limit shiznit manually after
.BR xfs_repair .
Also, space usage shiznit be automatically regenerated the
next time tha filesystem is mounted wit quotas turned on, so the
next quota mount of tha filesystem may take some time.
.SH DIAGNOSTICS
.B xfs_repair
issues informatizzle lyrics as it proceeds
indicatin what tha fuck it has found dat be abnormal or any erective
action dat it has taken.
Most of tha lyrics is straight-up understandable only ta them
who is knowledgeable bout tha structure of tha filesystem.
Some of tha mo' common lyrics is explained here.
Note dat tha language of tha lyrics is slightly different if
.B xfs_repair
is run up in no-modify mode cuz tha program aint changin anythang on disk.
No-modify mode indicates what tha fuck it would do ta repair tha filesystem
if run without tha no-modify flag.
.PP
.B disconnected inode
.IB ino ,
.B movin ta lost+found
.IP
An inode numbered
.I ino
was not connected ta tha filesystem
directory tree n' was reconnected ta the
.I lost+found
directory. Da inode be assigned tha name of its inode number
.RI ( ino ).
If a
.I lost+found
directory do not exist, it be automatically pimped.
.PP
.B disconnected dir inode
.IB ino ,
.B movin ta lost+found
.IP
As above only tha inode be a gangbangin' finger-lickin' directory inode.
If a gangbangin' finger-lickin' directory inode be attached to
.IR lost+found ,
all of its lil pimps (if any) stay attached ta tha directory n' therefore
get automatically reconnected when tha directory is reconnected.
.PP
.B imap fronts in-use inode
.I ino
.B is free, erectin imap
.IP
Da inode allocation map be thinkin dat inode
.I ino
is free whereas examination of tha inode indicates dat the
inode may be up in use (although it may be disconnected).
Da program thugged-out shiznit tha inode allocation map.
.PP
.B imap fronts free inode
.I ino
.B is up in use, erectin imap
.IP
Da inode allocation map be thinkin dat inode
.I ino
is up in use whereas examination of tha inode indicates dat the
inode aint up in use n' therefore is free.
Da program thugged-out shiznit tha inode allocation map.
.PP
.B resettin inode
.I ino
.B nlinks from
.I x
.B to
.I y
.IP
Da program detected a mismatch between the
number of valid directory entries referencin inode
.I ino
and tha number of references recorded up in tha inode n' erected the
the number up in tha inode.
.PP
.I fork-type
.B fork up in ino
.I ino
.B fronts used block
.I bno
.IP
Inode
.I ino
claims a funky-ass block
.I bno
that is used (claimed) by either another inode or tha filesystem
itself fo' metadata storage. The
.I fork-type
is either
.B data
or
.B attr
indicatin whether tha problem lies up in tha portion of the
inode dat tracks regular data or tha portion of tha inode
that stores XFS attributes.
If tha inode be a real-time (rt) inode, tha message say so.
Any inode dat fronts blocks used by tha filesystem is deleted.
If two or mo' inodes claim tha same block, they is both deleted.
.PP
.I fork-type
.B fork up in ino
.I ino
.B fronts dup extent ...
.IP
Inode
.I ino
claims a funky-ass block up in a extent known ta be fronted mo' than once.
Da offset up in tha inode, start n' length of tha extent is given.
Da message is slightly different
if tha inode be a real-time (rt) inode n' tha extent is therefore
a real-time (rt) extent.
.PP
.B inode
.I ino
.B \- wack extent ...
.IP
An extent record up in tha blockmap of inode
.I ino
claims blocks dat is outta tha legal range of tha filesystem.
Da message supplies tha start, end, n' file offset of tha extent.
Da message is slightly different if tha extent be a real-time (rt) extent.
.PP
.B bad
.I fork-type
.B fork up in inode
.I ino
.IP
There was suttin' structurally wack or inconsistent wit the
data structures dat map offsets ta filesystem blocks.
.PP
.B cleared inode
.I ino
.IP
There was suttin' wack wit tha inode that
was uncorrectable so tha program freed tha inode.
This probably happens cuz tha inode fronts
blocks dat is used by suttin' else or tha inode itself
is badly corrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Typically, dis message
is preceded by one or mo' lyrics indicatin why the
inode needed ta be cleared.
.PP
.B wack attribute fork up in inode
.IR ino ,
.B clearin attr fork
.IP
There was suttin' wack wit tha portion of tha inode that
stores XFS attributes (the attribute fork) so tha program reset
the attribute fork.
As a result of this, all attributes on dat inode is lost.
.PP
.B erectin nextents fo' inode
.IR ino ,
.B was
.I x
.B \- counted
.I y
.IP
Da program found dat tha number of extents used ta store
the data up in tha inode is wack n' erected tha number.
Da message refers ta nextents if tha count is wrong
on tha number of extents used ta store attribute shiznit.
.PP
.B entry
.I name
.B up in dir
.I dir_ino
.B not consistent wit .. value
.BI ( xxxx )
.B up in dir ino
.IB ino ,
.B junkin entry
.I name
.B up in directory inode
.I dir_ino
.IP
Da entry
.I name
in directory inode
.I dir_ino
references a gangbangin' finger-lickin' directory inode
.IR ino .
But fuck dat shiznit yo, tha word on tha street is dat tha ..\& entry up in directory
.I ino
does not point back ta directory
.IR dir_ino ,
so tha program deletes tha entry
.I name
in directory inode
.IR dir_ino .
If tha directory inode
.I ino
windz up becomin a gangbangin' finger-lickin' disconnected inode as a result of this, it is moved to
.I lost+found
later.
.PP
.B entry
.I name
.B up in dir
.I dir_ino
.B references already connected dir ino
.IB ino ,
.B junkin entry
.I name
.B up in directory inode
.I dir_ino
.IP
Da entry
.I name
in directory inode
.I dir_ino
points ta a gangbangin' finger-lickin' directory inode
.I ino
that is known ta be a cold-ass lil lil pimp of another directory.
Therefore, tha entry is invalid n' is deleted.
This message refers ta a entry up in a lil' small-ass directory.
If dis was a big-ass directory, tha last phrase would read
"will clear entry".
.PP
.B entry references free inode
.I ino
.B up in directory
.IB dir_ino ,
.B will clear entry
.IP
An entry up in directory inode
.I dir_ino
references a inode
.I ino
that is known ta be free. Da entry is therefore invalid n' is deleted.
This message refers ta a big-ass directory.
If tha directory was small, tha message would read "junkin entry ...".
.SH EXIT STATUS
.B xfs_repair \-n
(no modify node)
will return a statuz of 1 if filesystem corruption was detected and
0 if no filesystem corruption was detected.
.B xfs_repair
run without tha \-n option will always return a status code of 0.
.SH BUGS
Da filesystem ta be checked n' repaired must have been
unmounted cleanly rockin aiiight system administration procedures
(the
.BR umount (8)
command or system shutdown), not as a result of a cold-ass lil crash or system reset.
If tha filesystem has not been unmounted cleanly, mount it n' unmount
it cleanly before hustlin
.BR xfs_repair .
.PP
.B xfs_repair
does not do a thorough thang on XFS extended attributes.
Da structure of tha attribute fork is ghon be consistent,
but only tha contentz of attribute forks dat will fit into
an inode is checked.
This limitation is ghon be fixed up in tha future.
.PP
Da no-modify mode
.RB ( \-n
option) aint straight-up accurate.
It do not catch inconsistencies up in tha freespace n' inode
maps, particularly lost blocks or subtly corrupted maps (trees).
.PP
Da no-modify mode can generate repeated warnings about
the same problems cuz it cannot fix tha problems as they
are encountered.
.PP
If a gangbangin' filesystem fails ta be repaired, a metadump image can be generated
with
.BR xfs_metadump (8)
and be busted ta a XFS maintainer ta be analysed and
.B xfs_repair
fixed and/or improved.
.SH SEE ALSO
.BR dd (1),
.BR mkfs.xfs (8),
.BR umount (8),
.BR xfs_admin (8),
.BR xfs_metadump (8),
.BR xfs (5).
