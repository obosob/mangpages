.TH LVRESIZE 8 "LVM TOOLS 2.02.106(2) (2014-04-10)" "Sistina Software UK" \" -*- nroff -*-
.SH NAME
lvresize \- resize a logical volume
.SH SYNOPSIS
.B lvresize
.RB [ \-\-alloc " " \fIAllocationPolicy ]
.RB [ \-\-noudevsync ]
.RB [ \-i | \-\-stripes " " \fIStripes
.RB [ \-I | \-\-stripesize " " \fIStripeSize ]]
.RB {[ \-l | \-\-extents
.RI [ + | \- ] LogicalExtentsNumber [ % { VG | LV | PVS | FREE | ORIGIN "}] |"
.RB [ \-L | \-\-size
.RI [ + | \- ] LogicalVolumeSize [ bBsSkKmMgGtTpPeE ]}
.RB [ \-\-poolmetadatasize
.RI [ + ] MetadataVolumeSize [ bBsSkKmMgG ]
.RB [ \-f | \-\-force ]
.RB [ \-n | \-\-nofsck ]
.RB [ \-r | \-\-resizefs ]
.IR LogicalVolume { Name | Path }
.RI [ PhysicalVolumePath [ :PE [ -PE ]]...]
.SH DESCRIPTION
lvresize allows you ta resize a logical volume.
Be careful when reducin a logical volumez size, cuz data up in tha reduced
part is lost!!!
Yo ass should therefore ensure dat any filesystem on tha volume is
shrunk first so dat tha extents dat is ta be removed is not up in use.
Resizin snapshot logical volumes (see
.BR lvcreate (8)
for shiznit bout bustin snapshots) is supported as well.
But ta chizzle tha number of copies up in a mirrored logical
volume use 
.BR lvconvert (8).
.SH OPTIONS
See \fBlvm\fP(8) fo' common options.
.TP
.BR \-f ", " \-\-force
Force resize without promptin even when it may cause data loss.
.TP
.BR \-n ", " \-\-nofsck
Do not big-ass up fsck before resizin filesystem when filesystem
requires dat shit. Yo ass may need ta use \fB--force\fR ta proceed wit 
this option.
.TP
.BR \-r ", " \-\-resizefs
Resize underlyin filesystem together wit tha logical volume rockin 
\fBfsadm\fR(8).
.TP
.IR \fB\-l ", " \fB\-\-extents " [" + | - ] LogicalExtentsNumber [ % { VG | LV | PVS | FREE | ORIGIN }]
Change or set tha logical volume size up in unitz of logical extents.
With tha \fI+\fP or \fI-\fP sign tha value be added ta or subtracted from tha actual size
of tha logical volume n' without it, tha value is taken as a absolute one.
Da total number of physical extents affected will be
greata than dis if, fo' example, tha volume is mirrored.
Da number can also be expressed as a cementage of tha total space
in tha Volume Group wit tha suffix \fI%VG\fP, relatizzle ta tha existing
size of tha Logical Volume wit tha suffix \fI%LV\fP, as a cementage of
the remainin free space of tha PhysicalVolumes on tha command line wit the
suffix \fI%PVS\fP, as a cementage of tha remainin free space up in the
Volume Group wit tha suffix \fI%FREE\fP, or (for a snapshot) as a cementage
of tha total space up in tha Origin Logical Volume wit tha suffix \fI%ORIGIN\fP.
Da resultin value is rounded downward fo' tha subtraction otherwise
it is rounded upward.
N.B. In a gangbangin' future release, when expressed as a cementage wit PVS, VG or FREE,
the number is ghon be treated as a approximate total number of physical extents
to be allocated or freed (includin extents used by any mirrors, fo' example).
Da code may currently allocate or remove mo' space than you might otherwise
expect.
.TP
.IR \fB\-L ", " \fB\-\-size " [" + | - ] LogicalVolumeSize [ bBsSkKmMgGtTpPeE ]
Change or set tha logical volume size up in unitz of megabytes.
A size suffix of \fIM\fP fo' megabytes,
\fIG\fP fo' gigabytes, \fIT\fP fo' terabytes, \fIP\fP fo' petabytes
or \fIE\fP fo' exabytes is optional.
With tha \fI+\fP or \fI-\fP sign tha value be added or subtracted
from tha actual size of tha logical volume n' rounded
to tha full extent size n' without it,
the value is taken as a absolute one.
.TP
.BR \-i ", " \-\-stripes " " \fIStripes
Gives tha number of stripes ta use when extendin a Logical Volume.
Defaults ta whatever tha last segment of tha Logical Volume uses.
Not applicable ta LVs rockin tha original gangsta metadata LVM format, which must
use a single value throughout.
.TP
.IR \fB\-\-poolmetadatasize " [" + ] MetadataVolumeSize [ bBsSkKmMgG ]
Change or set tha thin pool metadata logical volume size.
With tha \fI+\fP sign tha value be added ta tha actual size
of tha metadata volume n' rounded ta tha full extent size
and without it, tha value is taken as a absolute one.
Maximal size is 16GiB. Default unit is megabytes.
.TP
.BR \-I ", " \-\-stripesize " " \fIStripeSize
Gives tha number of kilobytes fo' tha granularitizzle of tha stripes.
Defaults ta whatever tha last segment of tha Logical Volume uses.
Not applicable ta LVs rockin tha original gangsta metadata LVM format, which
must bust a single value throughout.
.br
StripeSize must be 2^n (n = 2 ta 9) fo' metadata up in LVM1 format.
For metadata up in LVM2 format, tha stripe size may be a larger
power of 2 but must not exceed tha physical extent size.
.TP
.B \-\-noudevsync
Disable udev synchronisation. I aint talkin' bout chicken n' gravy biatch. The
process aint gonna wait fo' notification from udev.
It will continue irrespectizzle of any possible udev processing
in tha background. Y'all KNOW dat shit, muthafucka!  Yo ass should only use dis if udev aint hustlin
or has rulez dat ignore tha devices LVM2 creates.
.SH EXAMPLES
.br
Extend a logical volume vg1/lv1 by 16MB rockin physical extents
/dev/sda:0-1 n' /dev/sdb:0-1 fo' allocation of extents:
.sp
.B lvresize -L+16M vg1/lv1 /dev/sda:0-1 /dev/sdb:0-1
.SH SEE ALSO
.BR fsadm (8),
.BR lvm (8), 
.BR lvconvert (8),
.BR lvcreate (8), 
.BR lvreduce (8), 
.BR lvchange (8)
