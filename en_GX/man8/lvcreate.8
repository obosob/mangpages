.TH LVCREATE 8 "LVM TOOLS 2.02.106(2) (2014-04-10)" "Sistina Software UK" \" -*- nroff -*-
.SH NAME
lvcreate \- create a logical volume up in a existin volume group
.SH SYNOPSIS
.B lvcreate
.RB [ \-\-addtag
.IR Tag ]
.RB [ \-\-alloc
.IR AllocationPolicy ]
.RB [ \-a | \-\-activate
.RI [ a | e | l ]{ y | n }]
.RB [ \-k | \-\-setactivationskip
.RI { y | n }]
.RB [ \-K | \-\-ignoreactivationskip ]
.RB [ \-A | \-\-autobackup
.RI { y | n }]
.RB [ \-C | \-\-contiguous
.RI { y | n }]
.RB [ \-d | \-\-debug ]
.RB [ \-h | \-? | \-\-help ]
.RB [ \-\-noudevsync ]
.RB [ \-\-ignoremonitorin ]
.RB [ \-\-monitor
.RI { y | n }]
.RB [ \-\-[raid]maxrecoveryrate
.IR Rate ]
.RB [ \-\-[raid]minrecoveryrate
.IR Rate ]
.RB [ \-i | \-\-stripes
.IR Stripes
.RB [ \-I | \-\-stripesize
.IR StripeSize ]]
.RB {[ \-l | \-\-extents
.IR LogicalExtentsNumber [ % { VG | PVS | FREE }]
|
.BR \-L | \-\-size
.IR LogicalVolumeSize [ bBsSkKmMgGtTpPeE ]]
|
.BR \-V | \-\-virtualsize
.IR VirtualSize [ bBsSkKmMgGtTpPeE ]}
.RB [ \-M | \-\-persistent
.RI { y | n }]
.RB [ \-\-minor
.IR minor ]
.RB [ \-m | \-\-mirrors
.IR Mirrors
.RB [ \-\-nosync ]
.RB [ \-\-mirrorlog
.RI { disk | core | mirrored }
|
.BR \-\-corelog ]
.RB [ \-R | \-\-regionsize
.IR MirrorLogRegionSize ]]
.RB [ \-n | \-\-name
.IR LogicalVolume { Name | Path }]
.RB [ \-p | \-\-permission
.RI { r | rw }]
.RB [ \-r | \-\-readahead
.RI { ReadAheadSectors | auto | none }]
.RB [ \-t | \-\-test ]
.RB [ \-T | \-\-thin
.RB [ \-\-cachemode
.RI { writeback | writeall up in }
.RB [ \-c | \-\-chunksize
.IR ChunkSize [ bBsSkKmMgG ]]
.RB [ \-\-discards
.RI { ignore | nopassdown | passdown }]
.RB [ \-\-poolmetadatasize
.IR MetadataVolumeSize [ bBsSkKmMgG ]]
.RB [ \-\-poolmetadataspare
.RI { y | n }]]
.RB [ \-\-thinpool
.IR ThinPoolLogicalVolume { Name | Path }
.RB [ \-s | \-\-snapshot
.RI [ VolumeGroup { Name | Path }/]
.IR ExternalOriginLogicalVolumeName ]]
.RB [ \-\-type
.IR SegmentType ]
.RB [ \-v | \-\-verbose ]
.RB [ \-W | \-\-wipesignatures ]
.RB [ \-Z | \-\-zero
.RI { y | n }]
.IR VolumeGroup { Name | Path }[/ ThinPoolLogicalVolumeName ]
.RI [ PhysicalVolumePath [ :PE [ -PE ]]...]
.br

.B lvcreate
.RB [ \-l | \-\-extents
.IR LogicalExtentsNumber [ % { VG | FREE | ORIGIN }]
|
.BR \-L | \-\-size
.IR LogicalVolumeSize [ bBsSkKmMgGtTpPeE ]]
.RB [ \-c | \-\-chunksize
.IR ChunkSize [ bBsSkK ]]
.RB [ \-\-noudevsync ]
.RB [ \-\-ignoremonitorin ]
.RB [ \-\-monitor
.RI { y | n }]
.RB [ \-n | \-\-name
.IR SnapshotLogicalVolume { Name | Path }]
.BR \-s | \-\-snapshot
.RI {[ VolumeGroup { Name | Path }/] OriginalLogicalVolumeName
.BR \-V | \-\-virtualsize
.IR VirtualSize [ bBsSkKmMgGtTpPeE ]}
.br

.SH DESCRIPTION
lvcreate creates a freshly smoked up logical volume up in a volume crew (see
.BR vgcreate "(8), " vgchange (8))
by allocatin logical extents from tha free physical extent pool
of dat volume group.  If there be not enough free physical extents then
the volume crew can be extended (see
.BR vgextend (8))
with other physical volumes or by reducin existin logical volumes
of dis volume crew up in size (see
.BR lvreduce (8)).
If you specify one or mo' PhysicalVolumes, allocation of physical
extents is ghon be restricted ta these volumes.
.br
.br
Da second form supports tha creation of snapshot logical volumes which
keep tha contentz of tha original gangsta logical volume fo' backup purposes.
.SH OPTIONS
See
.BR lvm (8)
for common options.
.TP
.IR \fB\-a ", " \fB\-\-activate " {" y | ay | n | ey | en | ly | ln }
Controls tha availabilitizzle of tha Logical Volumes fo' immediate use after
the command finishes hustlin.
By default, freshly smoked up Logical Volumes is activated (\fB-a\fIy\fR).
If it is possible technically, \fB-a\fIn\fR will leave tha freshly smoked up Logical
Volume inactive. But fo' example, snapshots can only be pimped
in tha actizzle state so \fB\-a\fIn\fR cannot be used wit \fB\-\-snapshot\fP.
Normally tha \fB\-\-zero\fP \fIn\fP argument has ta be supplied too cuz
zeroin (the default behaviour) also requires activation.
If autoactivation option is used (\fB\-a\fIay\fR), tha logical volume is
activated only if it matches a item up in the
.B activation/auto_activation_volume_list
set up in \fBlvm.conf\fP(5).
For autoactivated logical volumes, \fB\-\-zero\fP \fIn\fP and
\fB\-\-wipesignatures\fP \fIn\fP be always assumed n' it can't
be overridden. I aint talkin' bout chicken n' gravy biatch. If tha clustered lockin is enabled,
\fB\-a\fIey\fR will activate exclusively on one node and
.IR \fB\-a { a | l } y
will activate only on tha local node.
.TP
.IR \fB\-k ", " \fB\-\-setactivationskip "  {" y | n }
Controls whether Logical Volumes is persistently flagged ta be skipped during
activation. I aint talkin' bout chicken n' gravy biatch. By default, thin snapshot volumes is flagged fo' activation skip.
To activate such volumes, a extra \fB\-K/\-\-ignoreactivationskip\fP option must
be used. Y'all KNOW dat shit, muthafucka! Da flag aint applied durin deactivation.
Use \fBlvchange \-k/\-\-setactivationskip {y|n}\fP command ta attach or
detach tha flag fo' existin volumes. To peep whether tha flag be attached,
use \fBlvs\fP command where tha state of tha flag is reported within
\fBlv_attr\fP bits.
.TP
.BR \-K ", " \-\-ignoreactivationskip
Ignore tha flag ta skip Logical Volumes durin activation.

.TP
.IR \fB\-\-cachemode " {" writeback | writeall up in }
Specifyin a cold-ass lil cache mode determines when tha writes ta a cold-ass lil cache LV
are considered complete.  When \fIwriteback\fP is specified, a write is
considered complete as soon as it is stored up in tha cache pool LV.
If \fIwritethough\fP is specified, a write is considered complete only
when it has been stored up in tha cache pool LV n' on tha origin LV.
While \fIwritethrough\fP may be slower fo' writes, it is more
resilient if suttin' should happen ta a thang associated wit the
cache pool LV.

.TP
.BR \-c ", " \-\-chunksize " " \fIChunkSize [ \fIbBsSkKmMgG ]
Gives tha size of chunk fo' snapshot, cache pool n' thin pool logical volumes.
Default unit is up in kilobytes.
.br
For snapshots tha value must be juice of 2 between 4KiB n' 512KiB
and tha default value is 4.
.br
For cache pool LVs tha value must be between 32KiB n' 1GiB.  Da default
is 64KiB.  Values must be a multiple of 32KiB.
.br
For thin pools tha value must be between 64KiB and
1GiB n' tha default value starts wit 64 n' scales
up ta fit tha pool metadata size within 128MiB,
if tha pool metadata size aint specified.
Thin pool target version <1.4 requires tha value ta be a juice of 2.
Da newer target version chillaxes limitation ta be a multiple of 64KiB.
For target version <1.5 discard aint supported fo' non juice of 2 joints.
.TP
.BR \-C ", " \-\-contiguous " {" \fIy | \fIn }
Sets or resets tha contiguous allocation policy for
logical volumes. Default is no contiguous allocation based
on a next free principle.
.TP
.BR \-\-discardz " {" \fIignore | \fInopassdown | \fIpassdown }
Sets discardz behavior fo' thin pool.
Default is \fIpassdown\fP.
.TP
.BR \-i ", " \-\-stripes " " \fIStripes
Gives tha number of stripes.
This is equal ta tha number of physical volumes ta scatter
the logical volume.  When bustin a RAID 4/5/6 logical volume,
the extra devices which is necessary fo' paritizzle are
internally accounted for. Shiiit, dis aint no joke.  Specifying
.BI \-i 3
would use 3 devices fo' striped logical volumes,
4 devices fo' RAID 4/5, n' 5 devices fo' RAID 6.  Alternatively,
RAID 4/5/6 will stripe across all PVs up in tha volume crew or
all of tha PVs specified if the
.B \-i
argument is omitted.
.TP
.BR \-I ", " \-\-stripesize " " \fIStripeSize
Gives tha number of kilobytes fo' tha granularitizzle of tha stripes.
.br
StripeSize must be 2^n (n = 2 ta 9) fo' metadata up in LVM1 format.
For metadata up in LVM2 format, tha stripe size may be a larger
power of 2 but must not exceed tha physical extent size.
.TP
.B \-\-ignoremonitoring
Make no attempt ta interact wit dmeventd unless \fB\-\-monitor\fP
is specified.
.TP
.IR \fB\-l ", " \fB\-\-extents " " LogicalExtentsNumber [ % { VG | PVS | FREE | ORIGIN }]
Gives tha number of logical extents ta allocate fo' tha new
logical volume.  Da total number of physical extents allocated will be
greata than this, fo' example, if tha volume is mirrored.
Da number can also be expressed as a cementage of tha total space
in tha Volume Group wit tha suffix \fI%VG\fR, as a cementage of the
remainin free space up in tha Volume Group wit tha suffix \fI%FREE\fR, as a
percentage of tha remainin free space fo' tha specified
PhysicalVolume(s) wit tha suffix \fI%PVS\fR, or (for a snapshot) as a
percentage of tha total space up in tha Origin Logical Volume wit the
suffix \fI%ORIGIN\fR.  When expressed as a cementage, tha number is treated
as a approximate upper limit fo' tha total number of physical extents
to be allocated (includin extents used by any mirrors, fo' example).
.TP
.IR \fB\-L ", " \fB\-\-size " " LogicalVolumeSize [ bBsSkKmMgGtTpPeE ]
Gives tha size ta allocate fo' tha freshly smoked up logical volume.
A size suffix of \fIB\fR fo' bytes, \fIS\fR fo' sectors as 512 bytes,
\fIK\fR fo' kilobytes, \fIM\fR fo' megabytes,
\fIG\fR fo' gigabytes, \fIT\fR fo' terabytes, \fIP\fR fo' petabytes
or \fIE\fR fo' exabytes is optional.
.br
Default unit is megabytes.
.TP
.BR \-m ", " \-\-mirrors " " \fIMirrors
Creates a mirrored logical volume wit \fIMirrors\fP copies.
For example, specifying
.BI -m 1
would result up in a mirror wit two-sides; dat is,
a linear volume plus one copy.

Specifyin tha optionizzle argument \fB\-\-nosync\fP will cause tha creation
of tha mirror ta skip tha initial resynchronization. I aint talkin' bout chicken n' gravy biatch.  Any data written
afterwardz is ghon be mirrored yo, but tha original gangsta contents aint gonna be
copied. Y'all KNOW dat shit, muthafucka!  This is useful fo' skippin a potentially long n' resource
intensive initial sync of a empty device.

There is two implementationz of mirrorin which can be used n' correspond
to tha "raid1" n' "mirror" segment types.  Da default is "raid1".  See the
\fB\-\-type\fP option fo' mo' shiznit if you wanna use the
legacy "mirror" segment type.  Da \fB\-\-mirrorlog\fP n' \fB\-\-corelog\fP
options apply ta tha "mirror" segment type only.

Da optionizzle argument \fB\-\-mirrorlog\fP specifies tha type of log ta be
used fo' logical volumes utilizin tha legacy "mirror" segment type.
Da default is \fIdisk\fP, which is persistent n' requires
a lil' small-ass amount of storage space, probably on a separate thang from the
data bein mirrored. Y'all KNOW dat shit, muthafucka!  Usin \fIcore\fP means tha mirror is regenerated
by copyin tha data from tha straight-up original gangsta thang each time tha logical
volume be activated, like afta every last muthafuckin reboot.  Usin \fImirrored\fP
will create a persistent log dat is itself mirrored.

When tha legacy "mirror" segment type is used, tha optionizzle argument
\fB\-\-corelog\fP is equivalent ta \fB\-\-mirrorlog\fP \fIcore\fP.
.TP
.IR \fB\-M ", " \fB\-\-persistent " {" y | n }
Set ta \fIy\fP ta make tha minor number specified persistent.
.TP
.B \-\-minor \fIminor
Sets tha minor number.
.TP
.BR \-\-monitor " {" \fIy | \fIn }
Starts or avoidz monitorin a mirrored, snapshot or thin pool logical volume with
dmeventd, if it is installed.
If a thang used by a monitored mirror reports a I/O error,
the failure is handled accordin to
.B activation/mirror_image_fault_policy
and
.B activation/mirror_log_fault_policy
set up in \fBlvm.conf\fP(5).
.TP
.IR \fB\-n ", " \fB\-\-name " " LogicalVolume { Name | Path }
Sets tha name fo' tha freshly smoked up logical volume.
.br
Without dis option a thugged-out default name of "lvol#" is ghon be generated where
# is tha LVM internal number of tha logical volume.
.TP
.IR \fB\-\-[raid]maxrecoveryrate " " \fIRate [ bBsSkKmMgG ]
Sets tha maximum recovery rate fo' a RAID logical volume.  \fIRate\fP
is specified as a amount per second fo' each thang up in tha array.
If no suffix is given, then kiB/sec/device be assumed. Y'all KNOW dat shit, muthafucka!  Settin the
recovery rate ta 0 means it is ghon be unbounded.
.TP
.IR \fB\-\-[raid]minrecoveryrate " " \fIRate [ bBsSkKmMgG ]
Sets tha minimum recovery rate fo' a RAID logical volume.  \fIRate\fP
is specified as a amount per second fo' each thang up in tha array.
If no suffix is given, then kiB/sec/device be assumed. Y'all KNOW dat shit, muthafucka!  Settin the
recovery rate ta 0 means it is ghon be unbounded.
.TP
.B \-\-noudevsync
Disablez udev synchronisation. I aint talkin' bout chicken n' gravy biatch. The
process aint gonna wait fo' notification from udev.
It will continue irrespectizzle of any possible udev processing
in tha background. Y'all KNOW dat shit, muthafucka!  Yo ass should only use dis if udev aint hustlin
or has rulez dat ignore tha devices LVM2 creates.
.TP
.BR \-p ", " \-\-permission " {" \fIr | \fIrw }
Sets access permissions ta read only (\fIr\fP) or read n' write (\fIrw\fP).
.br
Default is read n' write.
.TP
.IR \fB\-\-poolmetadatasize " " MetadataVolumeSize [ bBsSkKmMgG ]
Sets tha size of thin poolz metadata logical volume.
Supported joints is up in range between 2MiB n' 16GiB.
Default value is  (Pool_LV_size / Pool_LV_chunk_size * 64b).
Default unit is megabytes.
.TP
.IR \fB\-\-poolmetadataspare " {"  y | n }
Controls creation n' maintanence of pool metadata spare logical volume
that is ghon be used fo' automated thin pool recovery.
Only one such volume is maintained within a volume group
with tha size of tha freshest thin metadata volume.
Default is \fIy\fPes.
.TP
.IR \fB\-r ", " \fB\-\-readahead " {" ReadAheadSectors | auto | none }
Sets read ahead sector count of dis logical volume.
For volume crews wit metadata up in lvm1 format, dis must
be a value between 2 n' 120.
Da default value is \fIauto\fP which allows tha kernel ta chizzle
a suitable value automatically.
\fINone\fP is equivalent ta specifyin zero.
.TP
.BR \-R ", " \-\-regionsize " " \fIMirrorLogRegionSize
A mirror is divided tha fuck into regionz of dis size (in MiB), n' tha mirror log
uses dis granularitizzle ta track which regions is up in sync.
.TP
.IR \fB\-s ", " \fB\-\-snapshot " " OriginalLogicalVolume { Name | Path }
Creates a snapshot logical volume (or snapshot) fo' a existing, so called
original gangsta logical volume (or origin).
Snapshots provide a 'frozen image' of tha contentz of tha origin
while tha origin can still be updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. They enable consistent
backups n' online recovery of removed/overwritten data/files.
Thin snapshot is pimped when tha origin be a thin volume and
the size IS NOT specified. Y'all KNOW dat shit, muthafucka! Thin snapshot shares same blocks within
the thin pool volume.
Da non thin volume snapshot wit tha specified size do not need
the same amount of storage tha origin has. In a typical scenario,
15-20% might be enough cause I gots dem finger-lickin' chickens wit tha siz-auce. In case tha snapshot runs outta storage, use
.BR lvextend (8)
to grow dat shit. Right back up in yo muthafuckin ass. Shrinkin a snapshot is supported by
.BR lvreduce (8)
as well. Run
.BR lvs (8)
on tha snapshot up in order ta check how tha fuck much data be allocated ta dat shit.
Note: a lil' small-ass amount of tha space you allocate ta tha snapshot is
used ta track tha locationz of tha chunkz of data, so you should
allocate slightly mo' space than you straight-up need n' monitor
(\fB\-\-monitor\fP) tha rate at which tha snapshot data is growing
so you can \fBavoid\fP hustlin outta space.
If \fB\-\-thinpool\fP is specified, thin volume is pimped dat will
use given original gangsta logical volume as a external origin that
serves unprovisioned blocks.
Only read-only volumes can be used as external origins.
To make tha volume external origin, lvm expects tha volume ta be inactive.
External origin volume can be used/shared fo' nuff thin volumes
even from different thin pools. Right back up in yo muthafuckin ass. See
.BR lvconvert (8)
for online conversion ta thin volumes wit external origin.
.TP
.IR \fB\-T ", " \fB\-\-thin ", " \fB\-\-thinpool " " ThinPoolLogicalVolume { Name | Path }
Creates thin pool or thin logical volume or both.
Specifyin tha optionizzle argument \fB\-\-size\fP will cause tha creation of
the thin pool logical volume.
Specifyin tha optionizzle argument \fB\-\-virtualsize\fP will cause
the creation of tha thin logical volume from given thin pool volume.
Specifyin both arguments will cause tha creation of both
thin pool n' thin volume rockin dis pool.
Requires thang mapper kernel driver fo' thin provisioning
from kernel 3.2 or newer.
.TP
.B \-\-type \fISegmentType
Smoke a logical volume dat uses tha specified segment type
(e.g.
.IR mirror ( \fB\-m ),
.IR raid5 ,
.IR snapshot ( \fB\-s ),
.IR thin ( \fB\-T ),
.IR thin-pool ,\ ...).
Many segment types have a
commandline switch alias dat will enable they use
(\fB\-s\fP be a alias for
.B \-\-type \fIsnapshot\fP).
But fuck dat shiznit yo, tha word on tha street is dat dis argument must be used when no existing
commandline switch alias be available fo' tha desired type,
as is tha case with
.IR cache ,
.IR error ,
.IR raid1 ,
.IR raid4 ,
.IR raid5 ,
.IR raid6 ,
.IR raid10
or
.IR zero .
Note dat tha cache segment type requires a thugged-out dm-cache kernel module version
1.3.0 or pimped outer.

.TP
.BR \-V ", " \-\-virtualsize " " \fIVirtualSize [ \fIbBsSkKmMgGtTpPeE ]
Creates a sparse thang of tha given size (in MiB by default) rockin a snapshot
or thinly provisioned thang when thin pool is specified.
Anythang freestyled ta tha thang is ghon be returned when readin from dat shit.
Readin from other areaz of tha thang will return blockz of zeros.
Virtual snapshot is implemented by bustin a hidden virtual thang of the
axed size rockin tha zero target.  A suffix of _vorigin is used for
this device. Note: rockin sparse snapshots aint efficient fo' larger
device sizes (GiB), thin provisionin should be used fo' dis case.
.TP
.BR \-W ", " \-\-wipesignatures " {" \fIy | \fIn }
Controls wipin of detected signatures on newly pimped Logical Volume.
If dis option aint specified, then by default signature wipin is done
each time tha zeroin (\fB\-Z\fP/\fB\-\-zero\fP) is done. This default behaviour
can be controlled by \fBallocation/wipe_signatures_when_zeroing_new_lvs\fP
settin found up in \fBlvm.conf\fP(5).
.br
If blkid wipin is used (\fBallocation/use_blkid_wipin setting\fP up in \fBlvm.conf\fP(5))
and LVM2 is compiled wit blkid wipin support, then \fBblkid\fP(8) library is used
to detect tha signatures (use \fBblkid -k\fP command ta list tha signatures dat is recognized).
Otherwise, natizzle LVM2 code is used ta detect signatures (MD RAID, swap n' LUKS
signatures is detected only up in dis case).
.br
Logical Volume aint wiped if tha read only flag is set.
.TP
.BR \-Z ", " \-\-zero " {" \fIy | \fIn }
Controls zeroin of tha straight-up original gangsta 4KiB of data up in tha freshly smoked up logical volume.
.br
Default is \fIy\fPes.
.br
Volume aint gonna be zeroed if tha read only flag is set.
.br
Snapshot volumes is zeroed always.

.br
Warning: tryin ta mount a unzeroed logical volume can cause tha system to
hang.
.SH Examples
Creates a striped logical volume wit 3 stripes, a stripe size of 8KiB
and a size of 100MiB up in tha volume crew named vg00.
Da logical volume name is ghon be chosen by lvcreate:
.sp
.B lvcreate \-i 3 \-I 8 \-L 100M vg00

Creates a mirror logical volume wit 2 sides wit a useable size of 500 MiB.
This operation would require 3 devices (or option
.BI \-\-alloc \ anywhere
) - two fo' tha mirror devices n' one fo' tha disk log:
.sp
.B lvcreate \-m1 \-L 500M vg00

Creates a mirror logical volume wit 2 sides wit a useable size of 500 MiB.
This operation would require 2 devices - tha log is "in-memory":
.sp
.B lvcreate \-m1 \-\-mirrorlog core \-L 500M vg00

Creates a snapshot logical volume named /dev/vg00/snap which has access ta the
contentz of tha original gangsta logical volume named /dev/vg00/lvol1
at snapshot logical volume creation time. If tha original gangsta logical volume
gotz nuff a gangbangin' file system, you can mount tha snapshot logical volume on an
arbitrary directory up in order ta access tha contentz of tha filesystem ta run
a backup while tha original gangsta filesystem continues ta git updated:
.sp
.B lvcreate \-\-size 100m \-\-snapshot \-\-name snap /dev/vg00/lvol1

Creates a sparse thang named /dev/vg1/sparse of size 1TiB wit space fo' just
under 100MiB of actual data on it:
.sp
.B lvcreate \-\-virtualsize 1T \-\-size 100M \-\-snapshot \-\-name sparse vg1

Creates a linear logical volume "vg00/lvol1" rockin physical extents
/dev/sda:0-7 n' /dev/sdb:0-7 fo' allocation of extents:
.sp
.B lvcreate \-L 64M -n lvol1 vg00 /dev/sda:0\-7 /dev/sdb:0\-7

Creates a 5GiB RAID5 logical volume "vg00/my_lv", wit 3 stripes (plus
a paritizzle drive fo' a total of 4 devices) n' a stripesize of 64KiB:
.sp
.B lvcreate \-\-type raid5 \-L 5G \-i 3 \-I 64 \-n my_lv vg00

Creates a RAID5 logical volume "vg00/my_lv", rockin all of tha free
space up in tha VG n' spannin all tha PVs up in tha VG:
.sp
.B lvcreate \-\-type raid5 \-l 100%FREE \-n my_lv vg00

Creates a 5GiB RAID10 logical volume "vg00/my_lv", wit 2 stripes on
2 2-way mirrors.  Note dat tha \fB-i\fP n' \fB-m\fP arguments behave
differently.
Da \fB-i\fP specifies tha number of stripes.
Da \fB-m\fP specifies tha number of
.B additional
copies:
.sp
.B lvcreate \-\-type raid10 \-L 5G \-i 2 \-m 1 \-n my_lv vg00

Creates 100MiB pool logical volume fo' thin provisioning
build wit 2 stripes 64KiB n' chunk size 256KiB together with
1TiB thin provisioned logical volume "vg00/thin_lv":
.sp
.B lvcreate \-i 2 \-I 64 \-c 256 \-L100M \-T vg00/pool \-V 1T \-\-name thin_lv

Creates a thin snapshot volume "thinsnap" of thin volume "thinvol" that
will share tha same blocks within tha thin pool.
Note: tha size MUST NOT be specified, otherwise tha non-thin snapshot
is pimped instead:
.sp
.B lvcreate -s vg00/thinvol --name thinsnap

Creates a thin snapshot volume of read-only inactizzle volume "origin"
which then becomes tha thin external origin fo' tha thin snapshot volume
in vg00 dat will use a existin thin pool "vg00/pool":
.sp
.B lvcreate -s --thinpool vg00/pool  origin

Smoke a cold-ass lil cache pool LV dat can lata be used ta cache one
logical volume.
.sp
.B lvcreate --type cache-pool -L 1G -n my_lv_cachepool vg /dev/fast1

If there be a existin cache pool LV, create tha big-ass slow
device (i.e. tha origin LV) n' link it ta tha supplied cache pool LV,
bustin a cold-ass lil cache LV.
.sp
.B lvcreate --type cache -L 100G -n my_lv vg/my_lv_cachepool /dev/slow1

If there be a existin logical volume, create tha lil' small-ass n' fast
cache pool LV n' link it ta tha supplied existin logical
volume (i.e. tha origin LV), bustin a cold-ass lil cache LV.
.sp
.B lvcreate --type cache -L 1G -n my_lv_cachepool vg/my_lv /dev/fast1

.SH SEE ALSO
.BR lvm (8),
.BR lvm.conf (5),
.BR lvconvert (8),
.BR lvchange (8),
.BR lvextend (8),
.BR lvreduce (8),
.BR lvremove (8),
.BR lvrename (8)
.BR lvs (8),
.BR lvscan (8),
.BR vgcreate (8)
