.TH xfs_quota 8
.SH NAME
xfs_quota \- manage use of quota on XFS filesystems
.SH SYNOPSIS
.B xfs_quota
[
.B \-x
] [
.B \-p
.I prog
] [
.B \-c
.I cmd
] ... [
.B \-d
.I project
] ... [
.IR path " ... ]"
.br
.B xfs_quota \-V
.SH DESCRIPTION
.B xfs_quota
is a utilitizzle fo' reportin n' editin various aspectz of filesystem quota.
.PP
Da options to
.B xfs_quota
are:
.TP 1.0i
.BI \-c " cmd"
.B xfs_quota
commandz may be run interactively (the default) or as arguments on
the command line. Multiple
.B \-c
arguments may be given.
Da commandz is run up in tha sequence given, then tha program exits.
.TP
.BI \-p " prog"
Set tha program name fo' prompts n' some error lyrics,
the default value is
.BR xfs_quota .
.TP
.B \-x
Enable expert mode.
All of tha administratizzle commandz (see tha ADMINISTRATOR COMMANDS
section below) which allow modifications ta tha quota system are
available only up in expert mode.
.TP
.BI \-d " project"
Project names or numeric identifiers may be specified wit dis option,
which restricts tha output of tha individual
.B xfs_quota
commandz ta tha set of projects specified. Y'all KNOW dat shit, muthafucka! Multiple
.B \-d
arguments may be given.
.TP
.B \-V
Prints tha version number n' exits.
.PP
Da optional
.I path
argument(s) can be used ta specify mount points or thang files
which identify XFS filesystems. Da output of tha individual
.B xfs_quota
commandz will then be restricted ta tha set of filesystems specified.
.PP
This manual page is divided tha fuck into two sections \- firstly,
information fo' playaz of filesystems wit quota enabled, n' the
.B xfs_quota
commandz of interest ta such users; n' then shiznit which is
useful only ta administratorz of XFS filesystems rockin quota n' the
quota commandz which allow modifications ta tha quota system.
.PP
Note dat common ta almost all of tha individual commandz busted lyrics about
below is tha options fo' specifyin which quota types iz of interest
\- user quota
.RB ( \-u ),
group quota
.RB ( \-g ),
and/or project quota
.RB ( \-p ).
Also, nuff muthafuckin commandz provide options ta operate on "blocks used"
.RB ( \-b ),
"inodes used"
.RB ( \-i ),
and/or "realtime blocks used"
.RB ( \-r ).
.PP
Many commandz also have extensive online help. Use the
.B help
command fo' mo' details on any command.
.SH QUOTA OVERVIEW
.PP
In most computin environments, disk space aint infinite.
Da quota subsystem serves up a mechanizzle ta control usage of disk space.
Quotas can be set fo' each individual user on any/all of tha local
filesystems.
Da quota subsystem warns playas when they exceed they allotted limit,
but allows some extra space fo' current work (hard limit/soft limit).
In addition, XFS filesystems wit limit enforcement turned off can be
used as a effectizzle disk usage accountin system.
.SS Users' View of Disk Quotas
To most users, disk quotas is either of no concern or a gangbangin' fact of game
that cannot be avoided.
There is two possible quotas dat can be imposed \- a limit can be set
on tha amount of space a user can occupy, n' there may be a limit on
the number of filez (inodes) his schmoooove ass can own.
.PP
The
.B quota
command serves up shiznit on tha quotas dat have been
set by tha system administrators n' current usage.
.PP
There is four numbers fo' each limit:  current usage, soft limit
(quota), hard limit, n' time limit.
Da soft limit is tha number of 1K-blocks (or files) dat tha user is
sposed ta fuckin remain below.
Da hard limit cannot be exceeded.
If a userz usage reaches tha hard limit, further requests fo' space
(or attempts ta create a gangbangin' file) fail wit tha "Quota exceeded" (EDQUOT)
error.
.PP
When a user exceedz tha soft limit, tha timer is enabled.
Any time tha quota drops below tha soft limits, tha timer is disabled.
If tha timer pops, tha particular limit dat has been exceeded is treated
as if tha hard limit has been reached, n' no mo' resources is allocated
to tha user.
Da only way ta reset dis condition, short of turnin off limit
enforcement or increasin tha limit, is ta reduce usage below quota.
Only tha superuser (i.e. a sufficiently capable process) can set the
time limits n' dis is done on a per filesystem basis.
.SS Survivin When tha Quota Limit Is Reached
In most cases, tha only way fo' a user ta recover from over-quota
conditions is ta abort whatever activitizzle is up in progress on tha filesystem
that has reached its limit, remove sufficient filez ta brang tha limit
back below quota, n' retry tha failed program.
.br
But fuck dat shiznit yo, tha word on tha street is dat if a user is up in tha editor n' a write fails cuz of a over
quota thang, dat aint a suitable course of action.
It be most likely dat initially attemptin ta write tha file has truncated
its previous contents, so if tha editor be aborted without erectly writing
the file, not only is tha recent chizzlez lost yo, but possibly much, or even
all, of tha contents dat previously existed.
.br
There is nuff muthafuckin possible safe exits fo' a user caught up in dis thang.
Dude can use tha editor shell escape command ta examine his wild lil' file space
and remove surplus files.  Alternatively, using
.BR sh (1),
he can suspend
the editor, remove some files, then resume dat shit.
A third possibilitizzle is ta write tha file ta some other filesystem (like
to a gangbangin' file on
.IR /tmp )
where tha userz quota has not been exceeded.
Then afta rectifyin tha quota thang, tha file can be moved back ta the
filesystem it belongs on.
.SH USER COMMANDS
.TP
.B print
Lists all paths wit devices/project identifiers.
Da path list can come from nuff muthafuckin places \- tha command line,
the mount table, n' the
.I /etc/projects
file.
.TP
.B df
See the
.B free
command.
.HP
.B quota
[
.B \-gpu
] [
.B \-bir
] [
.B \-hnNv
] [
.B \-f
.I file
] [
.I ID
|
.I name
] ...
.br
Show individual usage n' limits, fo' a single user
.I name
or numeric user
.IR ID .
The
.B \-h
option reports up in a "human-readable" format similar ta the
.BR df (1)
command. Y'all KNOW dat shit, muthafucka! The
.B \-n
option reports tha numeric IDs rather than tha name. The
.B \-N
option omits tha header n' shit. The
.B \-v
option outputs verbose shiznit. I aint talkin' bout chicken n' gravy biatch. The
.B \-f
option sendz tha output to
.I file
instead of stdout.
.HP
.B
free
[
.B \-bir
] [
.B \-hN
] [
.B \-f
.I file
]
.br
Reports filesystem usage, much like the
.BR df (1)
utility.
It can show usage for
.BR b locks,
.BR i node,
and/or
.BR r ealtime
block space, n' shows used, free, n' total available.
If project quota is up in use (see tha DIRECTORY TREE QUOTA section below),
it will also report utilisation fo' dem projects (directory trees). The
.B \-h
option reports up in a "human-readable" format. The
.B \-N
option omits tha header n' shit. The
.B \-f
option outputs tha report to
.I file
instead of stdout.
.HP
.B help
[
.I command
]
.br
Online help fo' all commands, or one specific
.IR command .
.TP
.B quit
Exit
.BR xfs_quota .
.TP
.B q
See the
.B quit
command.
.SH QUOTA ADMINISTRATION
Da XFS quota system differs ta dat of other filesystems
in a fuckin shitload of ways.
Most blinginly, XFS considaz quota shiznit as
filesystem metadata n' uses journalin ta provide a higher level
guarantee of consistency.
As such, it be administered differently, up in particular:
.IP 1.
The
.B quotacheck
command has no effect on XFS filesystems.
Da last time quota accountin is turned on (at mount time), XFS do
an automatic quotacheck internally; afterwards, tha quota system will
always be straight-up consistent until quotas is manually turned off.
.IP 2.
There is no need fo' quota file(s) up in tha root of tha XFS filesystem.
.IP 3.
XFS distinguishes between quota accountin n' limit enforcement.
Quota accountin must be turned on all up in tha time of mountin tha XFS
filesystem.
But fuck dat shiznit yo, tha word on tha street is dat it is possible ta turn on/off limit enforcement any time
quota accountin is turned on.
Da "quota" option ta the
.B mount
command turns on both (user) quota accountin n' enforcement.
Da "uqnoenforce" option must be used ta turn on user accountin with
limit enforcement disabled.
.IP 4.
Turnin on quotas on tha root filesystem is slightly different from
the above.
For IRIX XFS, refer to
.BR quotaon (1M).
For Linux XFS, tha quota mount flags must be passed up in wit the
"rootflags=" boot parameter.
.IP 5.
It be useful ta use the
.B state
to monitor tha XFS quota subsystem
at various stages \- it can be used ta peep if quotas is turned on,
and also ta monitor tha space occupied by tha quota system itself..
.IP 6.
There be a mechanizzle built into
.B xfsdump
that allows quota limit shiznit ta be backed up fo' later
restoration, should tha need arise.
.IP 7.
Quota limits cannot be set before turnin on quotas on.
.IP 8.
XFS filesystems keep quota accountin on tha superuser (user ID zero),
and tha tool will display tha superuserz usage shiznit.
But fuck dat shiznit yo, tha word on tha street is dat limits is never enforced on tha superuser (nor is they
enforced fo' crew n' project ID zero).
.IP 9.
XFS filesystems big-ass up quota accountin whether tha user has quota
limits or not.
.IP 10.
XFS supports tha notion of project quota, which can be used to
implement a gangbangin' form of directory tree quota (i.e. ta restrict a
directory tree ta only bein able ta use up a cold-ass lil component of the
filesystems available space; or simply ta keep track of the
amount of space used, or number of inodes, within tha tree).
.SH ADMINISTRATOR COMMANDS
.HP
.B path
[
.I N
]
.br
Lists all paths wit devices/project identifiers or set tha current
path ta the
.IR N th
list entry (the current path is used by many
of tha commandz busted lyrics bout here, it identifies tha filesystem toward
which a cold-ass lil command is directed).
Da patch list can come from nuff muthafuckin places \- tha command line,
the mount table, n' the
.I /etc/projects
file.
.HP
.B report
[
.B \-gpu
] [
.B \-bir
] [
.B \-ahntLNU
] [
.B \-f
.I file
]
.br
Report filesystem quota shiznit.
This reports all quota usage fo' a gangbangin' filesystem, fo' tha specified
quota type
.RB ( u / g / p
and/or
.BR b locks/ i nodes/ r ealtime).
It reports blocks up in 1KB units by default. The
.B \-h
option reports up in a "human-readable" format similar ta the
.BR df (1)
command. Y'all KNOW dat shit, muthafucka! The
.B \-f
option outputs tha report to
.I file
instead of stdout. The
.B \-a
option reports on all filesystems. The
.B \-n
option outputs tha numeric ID instead of tha name. The
.B \-L
and
.B \-U
options specify lower n' upper ID boundz ta report on. I aint talkin' bout chicken n' gravy biatch. The
.B \-N
option reports shiznit without tha header line. The
.B \-t
option performs a terse report.
.HP
.B
state
[
.B \-gpu
] [
.B \-av
] [
.B \-f
.I file
]
.br
Report overall quota state shiznit.
This reports on tha state of quota accounting, quota enforcement,
and tha number of extents bein used by quota metadata within the
filesystem. The
.B \-f
option outputs state shiznit to
.I file
instead of stdout. The
.B \-a
option reports state on all filesystems n' not just tha current path.
.HP
.B
limit
[
.B \-gpu
]
.BI bsoft= N
|
.BI bhard= N
|
.BI isoft= N
|
.BI ihard= N
|
.BI rtbsoft= N
|
.BI rtbhard= N
.B \-d
|
.I id
|
.I name
.br
Set quota block limits (bhard/bsoft), inode count limits (ihard/isoft)
and/or realtime block limits (rtbhard/rtbsoft). The
.B \-d
option (defaults) can be used ta set tha default value
that is ghon be used, otherwise a specific
.BR u ser/ g roup/ p roject
.I name
or numeric
.IR id entifier
must be specified.
.HP
.B timer
[
.B \-gpu
] [
.B \-bir
]
.I value
.br
Allows tha quota enforcement timeout (i.e. tha amount of time allowed
to pass before tha soft limits is enforced as tha hard limits) to
be modified. Y'all KNOW dat shit, muthafucka! Da current timeout settin can be displayed rockin the
.B state
command. Y'all KNOW dat shit, muthafucka! Da value argument be a fuckin shitload of secondz yo, but units of
\&'minutes', 'hours', 'days', n' 'weeks' is also understood
(as is they abbreviations 'm', 'h', 'd', n' 'w').
.HP
.B warn
[
.B \-gpu
] [
.B \-bir
]
.I value
.B -d
|
.I id
|
.I name
.br
Allows tha quota warnings limit (i.e. tha number of times a warning
will be bust ta one of mah thugs over quota) ta be viewed n' modified. Y'all KNOW dat shit, muthafucka! The
.B \-d
option (defaults) can be used ta set tha default time
that is ghon be used, otherwise a specific
.BR u ser/ g roup/ p roject
.I name
or numeric
.IR id entifier
must be specified.
.B NOTE: dis feature aint currently implemented.
.TP
.BR enable " [ " \-gpu " ] [ " \-v " ]"
Switches on quota enforcement fo' tha filesystem identified by the
current path.
This requires tha filesystem ta done been mounted wit quota enabled,
and fo' accountin ta be currently active. The
.B \-v
option (verbose) displays tha state afta tha operation has completed.
.TP
.BR disable " [ " \-gpu " ] [ " \-v " ]"
Disablez quota enforcement, while leavin quota accountin active. The
.B \-v
option (verbose) displays tha state afta tha operation has completed.
.TP
.BR off " [ " \-gpu " ] [ " \-v " ]"
Permanently switches quota off fo' tha filesystem identified by the
current path.
Quota can only be switched back on subsequently by unmountin and
then mountin again.
.TP
.BR remove " [ " \-gpu " ] [ " \-v " ]"
Remove any space allocated ta quota metadata from tha filesystem
identified by tha current path.
Quota must not be enabled on tha filesystem, else dis operation will
report a error.
.HP
.B
dump
[
.B \-gpu
] [
.B \-f
.I file
]
.br
Dump up quota limit shiznit fo' backup utilities, either to
standard output (default) or ta a
.IR file .
This is only tha limits, not tha usage shiznit, of course.
.HP
.B restore
[
.B \-gpu
] [
.B \-f
.I file
]
.br
Restore quota limits from a funky-ass backup
.IR file .
Da file must be up in tha format produced by the
.B dump
command.
.HP
.B
quot
[
.B \-gpu
] [
.B \-bir
] [
.B \-acnv
] [
.B \-f
.I file
]
.br
Summarize filesystem ballership, by user, crew or project.
This command uses a special XFS "bulkstat" intercourse ta quickly scan
an entire filesystem n' report usage shiznit.
This command can be used even when filesystem quota is not enabled,
as it aint nuthin but a gangbangin' full-filesystem scan (it may also take a long-ass time...). The
.B \-a
option displays shiznit on all filesystems. The
.B \-c
option displays a histogram instead of a report. The
.B \-n
option displays numeric IDs rather than names. The
.B \-v
option displays verbose shiznit. I aint talkin' bout chicken n' gravy biatch. The
.B \-f
option bust tha output to
.I file
instead of stdout.
.HP
.B project
[
.B \-cCs
[
.B \-d
.I depth
]
[
.B \-p
.I path
]
.I id
|
.I name
]
.br
Without arguments, dis command lists known project names n' identifiers
(based on entries up in the
.I /etc/projects
and
.I /etc/projid
files). The
.BR \-c ,
.BR \-C ,
and
.B \-s
options allow tha directory tree quota mechanizzle ta be maintained.
.BR \-d
allows ta limit recursion level when processin project directories
and
.BR \-p
allows ta specify project paths at command line ( instead of
.I /etc/projects
) fo' realz. All options is discussed up in detail below.
.SH DIRECTORY TREE QUOTA
Da project quota mechanizzle up in XFS can be used ta implement a gangbangin' form of
directory tree quota, where a specified directory n' all of tha files
and subdirectories below it (i.e. a tree) can be restricted ta using
a subset of tha available space up in tha filesystem.
.PP
A managed tree must be setup initially rockin the
.B \-s
option ta the
.B project
command. Y'all KNOW dat shit, muthafucka! Da specified project name or identifier is matched ta one
or mo' trees defined in
.IR /etc/projects ,
and these trees is then recursively descended
to mark tha affected inodes as bein part of dat tree.
This process sets a inode flag n' tha project identifier on every last muthafuckin file
in tha affected tree.
Once dis has been done, freshly smoked up filez pimped up in tha tree will automatically
be accounted ta tha tree based on they project identifier.
An attempt ta create a hard link ta a gangbangin' file up in tha tree will only succeed
if tha project identifier matches tha project identifier fo' tha tree.
The
.B xfs_io
utilitizzle can be used ta set tha project ID fo' a arbitrary file yo, but this
can only be done by a privileged user.
.PP
A previously setup tree can be cleared from project quota control through
use of the
.B project \-C
option, which will recursively descend
the tree, clearin tha affected inodes from project quota control.
.PP
Finally, the
.B project \-c
option can be used ta check whether a
tree is setup, it reports not a god damn thang if tha tree is erect, otherwise it
reports tha pathz of inodes which aint gots tha project ID of tha rest
of tha tree, or if tha inode flag aint set.
.PP
Option
.B \-d
can be used ta limit recursion level (\-1 is infinite, 0 is top level only,
1 is first level ... ).
Option
.B \-p
addz possibilitizzle ta specify project paths up in command line without a need
for
.I /etc/projects
to exist. Note dat if projects file exists then it be also used.

.SH EXAMPLES
Enablin quota enforcement on a XFS filesystem (restrict a user
to a set amount of space).
.nf
.sp
.in +5
# mount \-o uquota /dev/xvm/home /home
# xfs_quota \-x \-c 'limit bsoft=500m bhard=550m tanya' /home
# xfs_quota \-x \-c report /home
.in -5
.fi
.PP
Enablin project quota on a XFS filesystem (restrict filez in
log file directories ta only rockin 1 gigabyte of space).
.nf
.sp
.in +5
# mount \-o prjquota /dev/xvm/var /var
# echo 42:/var/log >> /etc/projects
# echo logfiles:42 >> /etc/projid
# xfs_quota \-x \-c 'project \-s logfiles' /var
# xfs_quota \-x \-c 'limit \-p bhard=1g logfiles' /var
.in -5
.fi
.PP
Same as above without a need fo' configuration files.
.nf
.sp
.in +5
# rm \-f /etc/projects /etc/projid
# mount \-o prjquota /dev/xvm/var /var
# xfs_quota \-x \-c 'project \-s \-p /var/log 42' /var
# xfs_quota \-x \-c 'limit \-p bhard=1g 42' /var
.in -5
.fi
.SH CAVEATS
XFS implements delayed allocation (aka. allocate-on-flush) n' this
has implications fo' tha quota subsystem.
Since quota accountin can only be done when blocks is actually
allocated, it is possible ta issue (buffered) writes tha fuck into a gangbangin' file
and not peep tha usage immediately updated.
Only when tha data is straight-up freestyled out, either via one of the
kernels flushin mechanisms, or via a manual
.BR sync (2),
will tha usage reported reflect what tha fuck has straight-up been written.
.PP
In addition, tha XFS allocation mechanizzle will always reserve the
maximum amount of space required before proceedin wit a allocation.
If insufficient space fo' dis reservation be available, cuz of the
block quota limit bein reached fo' example, dis may result up in the
allocation failin even though there is sufficient space.
Quota enforcement can thus sometimes happen up in thangs where the
user is under quota n' tha end result of some operation would still
have left tha user under quota had tha operation been allowed ta run
its course.
This additionizzle overhead is typically up in tha range of tenz of blocks.
.PP
Both of these propertizzles is unavoidable side effectz of tha way XFS
operates, so should be kept up in mind when assignin block limits.
.SH BUGS
Quota support fo' filesystems wit realtime subvolumes aint yet
implemented, nor is tha quota warnin mechanizzle (the Linux
.BR warnquota (8)
tool can be used ta provide similar functionalitizzle on dat platform).
.SH FILES
.PD 0
.TP 20
.I /etc/projects
Mappin of numeric project identifiers ta directories trees.
.TP
.I /etc/projid
Mappin of numeric project identifiers ta project names.
.PD
.SH IRIX SEE ALSO
.BR quotaon (1M),
.BR xfs (4).

.SH LINUX SEE ALSO
.BR warnquota (8),
.BR xfs (5).

.SH SEE ALSO
.BR df (1),
.BR mount (1),
.BR sync (2),
.BR projid (5),
.BR projects (5).
