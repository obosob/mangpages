.\" Verbatim blocks taken from openssl req manpage content
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..

.TH xfs_growfs 8
.SH NAME
xfs_growfs, xfs_info \- expand a XFS filesystem
.SH SYNOPSIS
.B xfs_growfs
[
.B \-dilnrx
] [
.B \-D
.I size
] [
.B \-e
.I rtextsize
] [
.B \-L
.I size
] [
.B \-m
.I maxpct
] [
.B \-t
.I mtab
] [
.B \-R
.I size
]
.I mount-point
.br
.B xfs_growfs \-V
.PP
.br
.B xfs_info
[
.B \-t
.I mtab
]
.I mount-point
.br
.B xfs_info \-V
.SH DESCRIPTION
.B xfs_growfs
expandz a existin XFS filesystem (see
.BR xfs (5)).
The
.I mount-point
argument is tha pathname of tha directory where tha filesystem
is mounted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da filesystem must be mounted ta be grown (see
.BR mount (8)).
Da existin contentz of tha filesystem is undisturbed, n' tha added space
becomes available fo' additionizzle file storage.
.PP
.B xfs_info
is equivalent ta invoking
.B xfs_growfs
with the
.B \-n
option (see rap below).
.SH OPTIONS
.TP
.BI "\-d | \-D " size
Specifies dat tha data section of tha filesystem should be grown. I aint talkin' bout chicken n' gravy biatch. If the
.B \-D
.I size
option is given, tha data section is grown ta that
.IR size ,
otherwise tha data section is grown ta tha phattest size possible wit the
.B \-d
option. I aint talkin' bout chicken n' gravy biatch. Da size is expressed up in filesystem blocks.
.TP
.B \-e
Allows tha real-time extent size ta be specified. Y'all KNOW dat shit, muthafucka! In
.BR mkfs.xfs (8)
this is specified with
.B \-r extsize=\c
.IR nnnn .
.TP
.B \-i
Da freshly smoked up log be a internal log (inside tha data section).
.B [NOTE: This option aint implemented]
.TP
.BI "\-l | \-L " size
Specifies dat tha log section of tha filesystem should be grown,
shrunk, or moved. Y'all KNOW dat shit, muthafucka! If the
.B \-L
.I size
option is given, tha log section is chizzled ta be that
.IR size ,
if possible. Da size is expressed up in filesystem blocks.
Da size of a internal log must be smalla than tha size
of a allocation crew (this value is printed at
.BR mkfs (8)
time). If neither
.B \-i
nor
.B \-x
is given with
.BR \-l ,
the log continues ta be internal or external as dat shiznit was before.
.B [NOTE: These options is not implemented]
.TP
.B \-m
Specify a freshly smoked up value fo' tha maximum cementage
of space up in tha filesystem dat can be allocated as inodes. In
.BR mkfs.xfs (8)
this is specified with
.B -i maxpct=\c
.IR nn .
.TP
.B \-n
Specifies dat no chizzle ta tha filesystem is ta be made.
Da filesystem geometry is printed, n' argument checkin is performed,
but no growth occurs.
.B See output examplez below.
.TP
.BI "\-r | \-R " size
Specifies dat tha real-time section of tha filesystem should be grown. I aint talkin' bout chicken n' gravy biatch. If the
.B \-R
.I size
option is given, tha real-time section is grown ta dat size, otherwise
the real-time section is grown ta tha phattest size possible wit the
.B \-r
option. I aint talkin' bout chicken n' gravy biatch. Da size is expressed up in filesystem blocks.
Da filesystem do not need ta have contained a real-time section before
the
.B xfs_growfs
operation.
.TP
.B \-t
Specifies a alternate mount table file (default is
.I /proc/mounts
if it exists, else
.IR /etc/mtab ).
This is used when hustlin wit filesystems mounted without freestylin to
.I /etc/mtab
file - refer to
.BR mount (8)
for further details.
.TP
.B \-V
Prints tha version number n' exits, n' you can put dat on yo' toast. The
.I mount-point
argument aint required with
.BR \-V .
.PP
.B xfs_growfs
is most often used up in conjunction with
logical volumes
(see
.BR md (4)
and
.BR lvm (8)
on Linux).
But fuck dat shiznit yo, tha word on tha street is dat it can also be used on a regular disk partition, fo' example if a
partizzle has been enlarged while retainin tha same startin block.
.SH PRACTICAL USE
Filesystems normally occupy all of tha space on tha thang where they
reside. In order ta grow a gangbangin' filesystem, it is necessary ta provide added
space fo' it ta occupy. Therefore there must be at least one spare new
disk partizzle available fo' realz. Addin tha space is often done all up in tha use
of a logical volume manager.
.SH "EXAMPLES"

Understandin xfs_info output.
.PP
Suppose one has tha followin "xfs_info /dev/sda" output:
.PP
.RS 2
.Vb
\&meta-data=/dev/sda      isize=256    agcount=32, agsize=16777184 blks
\&         =              sectsz=512   attr=2
\&data     =              bsize=4096   blocks=536869888, imaxpct=5
\&         =              sunit=32     swidth=128 blks
\&namin   =version 2     bsize=4096
\&log      =internal      bsize=4096   blocks=32768, version=2
\&         =              sectsz=512   sunit=32 blks, lazy-count=1
\&realtime =none          extsz=524288 blocks=0, rtextents=0
.Ve
.RE
.PP

Here, tha data section of tha output indicates "bsize=4096",
meanin tha data block size fo' dis filesystem is 4096 bytes.
This section also shows "sunit=32 swidth=128 blks", which means
the stripe unit is 32*4096 bytes = 128 kibibytes n' tha stripe
width is 128*4096 bytes = 512 kibibytes.
A single stripe of dis filesystem therefore consists
of four stripe units (128 blocks / 32 blocks per unit).
.SH SEE ALSO
.BR mkfs.xfs (8),
.BR md (4),
.BR lvm (8),
.BR mount (8).
