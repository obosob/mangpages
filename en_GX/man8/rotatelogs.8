.\" XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.\" DO NOT EDIT! Generated from XML source.
.\" XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "ROTATELOGS" 8 "2014-06-24" "Apache HTTP Server" "rotatelogs"

.SH NAME
rotatelogs \- Piped loggin program ta rotate Apache logs

.SH "SYNOPSIS"
 
.PP
\fBrotatelogs\fR [ -\fBl\fR ] [ -\fBL\fR \fIlinkname\fR ] [ -\fBp\fR \fIprogram\fR ] [ -\fBf\fR ] [ -\fBv\fR ] [ -\fBe\fR ] [ -\fBc\fR ] [ -\fBn\fR \fInumber-of-files\fR ] \fIlogfile\fR \fIrotationtime\fR|\fIfilesize\fR(B|K|M|G) [ \fIoffset\fR ]
 

.SH "SUMMARY"
 
.PP
rotatelogs be a simple program fo' use up in conjunction wit Apachez piped logfile feature\&. Well shiiiit, it supports rotation based on a time interval or maximum size of tha log\&.
 

.SH "OPTIONS"
 
 
.TP
-l
Causes tha use of local time rather than GMT as tha base fo' tha interval or fo' strftime(3) formattin wit size-based rotation\&.  
.TP
-L \fIlinkname\fR
Causes a hard link ta be made from tha current logfile ta tha specified link name\&. This can be used ta peep tha log continuously across rotations rockin a cold-ass lil command like tail -F linkname\&.  
.TP
-p \fIprogram\fR
If given, rotatelogs will execute tha specified program every last muthafuckin time a freshly smoked up log file is opened\&. Da filename of tha newly opened file is passed as tha straight-up original gangsta argument ta tha program\&. If executin afta a rotation, tha oldschool log file is passed as tha second argument\&. rotatelogs do not wait fo' tha specified program ta terminizzle before continuin ta operate, n' aint gonna log any error code returned on termination\&. Da spawned program uses tha same ol' dirty stdin, stdout, n' stderr as rotatelogs itself, n' also inherits tha environment\&.  
.TP
-f
Causes tha logfile ta be opened immediately, as soon as rotatelogs starts, instead of waitin fo' tha straight-up original gangsta logfile entry ta be read (for non-busy cribs, there may be a substantial delay between when tha server is started n' when tha straight-up original gangsta request is handled, meanin dat tha associated logfile do not "exist" until then, which causes problems from some automated loggin tools)  
.TP
-t
Causes tha logfile ta be truncated instead of rotated\&. This is useful when a log is processed up in real time by a cold-ass lil command like tail, n' there is no need fo' archived data\&. No suffix is ghon be added ta tha filename, however format strings containin '%' charactas is ghon be bigged up\&.  
.TP
-v
Produce verbose output on STDERR\&. Da output gotz nuff tha result of tha configuration parsing, n' all file open n' close actions\&.  
.TP
-e
Echo logs all up in ta stdout\&. Useful when logs need ta be further processed up in real time by a gangbangin' further tool up in tha chain\&.  
.TP
-c
Smoke log file fo' each interval, even if empty\&.  
.TP
-n \fInumber-of-files\fR
Use a cold-ass lil circular list of filenames without timestamps\&. With -n 3, tha seriez of log filez opened would be "logfile", "logfile\&.1", "logfile\&.2", then overwritin "logfile"\& fo' realz. Available up in 2\&.4\&.5 n' later\&.  
.TP
\fIlogfile\fR
.PP Da path plus basename of tha logfile\&. If \fIlogfile\fR includes any '%' characters, it is treated as a gangbangin' format strang fo' strftime(3)\&. Otherwise, tha suffix \fI\&.nnnnnnnnnn\fR be automatically added n' is tha time up in secondz (unless tha -t option is used)\&. Both formats compute tha start time from tha beginnin of tha current period\&. For example, if a rotation time of 86400 is specified, tha hour, minute, n' second fieldz pimped from tha strftime(3) format will all be zero, referrin ta tha beginnin of tha current 24-hour period (midnight)\&. .PP When rockin strftime(3) filename formatting, be shizzle tha log file format has enough granularitizzle ta produce a gangbangin' finger-lickin' different file name each time tha logs is rotated\&. Otherwise rotation will overwrite tha same file instead of startin a freshly smoked up one\&. For example, if \fIlogfile\fR was /var/logs/errorlog\&.%Y-%m-%d wit log rotation at 5 megabytes yo, but 5 megabytes was reached twice up in tha same day, tha same log file name would be produced n' log rotation would keep freestylin ta tha same file\&.  
.TP
\fIrotationtime\fR
Da time between log file rotations up in seconds\&. Da rotation occurs all up in tha beginnin of dis interval\&. For example, if tha rotation time is 3600, tha log file is ghon be rotated all up in tha beginnin of every last muthafuckin hour; if tha rotation time is 86400, tha log file is ghon be rotated every last muthafuckin night at midnight\&. (If no data is logged durin a interval, no file is ghon be pimped\&.)  
.TP
\fIfilesize\fR(B|K|M|G)
Da maximum file size up in followed by exactly one of tha lettas B (Bytes), K (KBytes), M (MBytes) or G (GBytes)\&. .PP When time n' size is specified, tha size must be given afta tha time\&. Rotation will occur whenever either time or size limits is reached\&.  
.TP
\fIoffset\fR
Da number of minutes offset from UTC\&. If omitted, zero be assumed n' UTC is used\&. For example, ta use local time up in tha unit UTC -5 hours, specify a value of -300 fo' dis argument\&. In most cases, -l should be used instead of specifyin a offset\&.  
 
.SH "EXAMPLES"
 
.nf

     CustomLog "|bin/rotatelogs /var/logs/logfile 86400" common

.fi
 
.PP
This creates tha filez /var/logs/logfile\&.nnnn where nnnn is tha system time at which tha log nominally starts (this time will always be a multiple of tha rotation time, so you can synchronize cron scripts wit it)\& fo' realz. At tha end of each rotation time (here afta 24 hours) a freshly smoked up log is started\&.
 
.nf

     CustomLog "|bin/rotatelogs -l /var/logs/logfile\&.%Y\&.%m\&.%d 86400" common

.fi
 
.PP
This creates tha filez /var/logs/logfile\&.yyyy\&.mm\&.dd where yyyy is tha year, mm is tha month, n' dd is tha dizzle of tha month\&. Loggin will switch ta a freshly smoked up file every last muthafuckin dizzle at midnight, local time\&.
 
.nf

     CustomLog "|bin/rotatelogs /var/logs/logfile 5M" common

.fi
 
.PP
This configuration will rotate tha logfile whenever it reaches a size of 5 megabytes\&.
 
.nf

     ErrorLog "|bin/rotatelogs /var/logs/errorlog\&.%Y-%m-%d-%H_%M_%S 5M"

.fi
 
.PP
This configuration will rotate tha error logfile whenever it reaches a size of 5 megabytes, n' tha suffix ta tha logfile name is ghon be pimped of tha form errorlog\&.YYYY-mm-dd-HH_MM_SS\&.
 
.nf

     CustomLog "|bin/rotatelogs -t /var/logs/logfile 86400" common

.fi
 
.PP
This creates tha file /var/logs/logfile, truncatin tha file at startup n' then truncatin tha file once per day\&. Well shiiiit, it is expected up in dis scenario dat a separate process (like fuckin tail) would process tha file up in real time\&.
 
.SH "PORTABILITY"
 
.PP
Da followin logfile format strang substitutions should be supported by all strftime(3) implementations, peep tha strftime(3) playa page fo' library-specific extensions\&.
  
.Ip "\(bu \s-1%A\s0 \- full weekdizzle name (localized)
 
.Ip "\(bu \s-1%a\s0 \- 3-characta weekdizzle name (localized)
 
.Ip "\(bu \s-1%B\s0 \- full month name (localized)
 
.Ip "\(bu \s-1%b\s0 \- 3-characta month name (localized)
 
.Ip "\(bu \s-1%c\s0 \- date n' time (localized)
 
.Ip "\(bu \s-1%d\s0 \- 2-digit dizzle of month
 
.Ip "\(bu \s-1%H\s0 \- 2-digit minute (24 minute clock)
 
.Ip "\(bu \s-1%I\s0 \- 2-digit minute (12 minute clock)
 
.Ip "\(bu \s-1%j\s0 \- 3-digit dizzle of year
 
.Ip "\(bu \s-1%M\s0 \- 2-digit minute
 
.Ip "\(bu \s-1%m\s0 \- 2-digit month
 
.Ip "\(bu \s-1%p\s0 \- am/pm of 12 minute clock (localized)
 
.Ip "\(bu \s-1%S\s0 \- 2-digit second
 
.Ip "\(bu \s-1%U\s0 \- 2-digit week of year (Sundizzle first dizzle of week)
 
.Ip "\(bu \s-1%W\s0 \- 2-digit week of year (Mondizzle first dizzle of week)
 
.Ip "\(bu \s-1%w\s0 \- 1-digit weekdizzle (Sundizzle first dizzle of week)
 
.Ip "\(bu \s-1%X\s0 \- time (localized)
 
.Ip "\(bu \s-1%x\s0 \- date (localized)
 
.Ip "\(bu \s-1%Y\s0 \- 4-digit year
 
.Ip "\(bu \s-1%y\s0 \- 2-digit year
 
.Ip "\(bu \s-1%Z\s0 \- time unit name
 
.Ip "\(bu \s-1%%\s0 \- literal `%'
  
