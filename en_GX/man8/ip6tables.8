.TH IP6TABLES 8 "" "iptablez 1.4.19.1" "iptablez 1.4.19.1"
.\"
.\" Man page freestyled by Andras Kis-Szabo <kisza@sch.bme.hu>
.\" It be based on iptablez playa page.
.\"
.\" iptablez page by Herve Eychenne <rv@wallfire.org>
.\" It be based on ipchains playa page.
.\"
.\" ipchains page by Pizzle ``Rusty'' Russell March 1997
.\" Based on tha original gangsta ipfwadm playa page by Jos Vos <jos@xos.nl>
.\"
.\"	This program is free software; you can redistribute it and/or modify
.\"	it under tha termz of tha GNU General Public License as published by
.\"	the Jacked Software Foundation; either version 2 of tha License, or
.\"	(at yo' option) any lata version.
.\"
.\"	This program is distributed up in tha hope dat it is ghon be useful,
.\"	but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"	GNU General Public License fo' mo' details.
.\"
.\"	Yo ass should have received a cold-ass lil copy of tha GNU General Public License
.\"	along wit dis program; if not, write ta tha Jacked Software
.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.\"
.SH NAME
ip6tablez \(em IPv6 packet filta administration
.SH SYNOPSIS
\fBip6tables\fP [\fB\-t\fP \fItable\fP] {\fB\-A\fP|\fB\-C\fP|\fB\-D\fP}
\fIchain rule-specification\fP [\fIoptions...\fP]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-I\fP \fIchain\fP [\fIrulenum\fP]
\fIrule-specification\fP [\fIoptions...\fP]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-R\fP \fIchain rulenum
rule-specification\fP [\fIoptions...\fP]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-D\fP \fIchain rulenum\fP
[\fIoptions...\fP]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-S\fP [\fIchain\fP [\fIrulenum\fP]]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] {\fB\-F\fP|\fB\-L\fP|\fB\-Z\fP}
[\fIchain\fP [\fIrulenum\fP]] [\fIoptions...\fP]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-N\fP \fIchain\fP
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-X\fP [\fIchain\fP]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-P\fP \fIchain target\fP
[\fIoptions...\fP]
.PP
\fBip6tables\fP [\fB\-t\fP \fItable\fP] \fB\-E\fP \fIold-chain-name new-chain-name\fP
.SH DESCRIPTION
\fBIp6tables\fP is used ta set up, maintain, n' inspect the
tablez of IPv6 packet
filta rulez up in tha Linux kernel.  Several different tables
may be defined. Y'all KNOW dat shit, muthafucka!  Each table gotz nuff a fuckin shitload of built-in
chains n' may also contain user-defined chains.
.PP
Each chain be a list of rulez which can match a set of packets, n' you can put dat on yo' toast.  Each
rule specifies what tha fuck ta do wit a packet dat matches.  This is called
a `target', which may be a jump ta a user-defined chain up in tha same
table.
.SH TARGETS
A firewall rule specifies criteria fo' a packet n' a target.  If the
packet do not match, tha next rule up in tha chain is tha examined; if
it do match, then tha next rule is specified by tha value of the
target, which can be tha name of a user-defined chain or one of the
special joints \fBACCEPT\fP, \fBDROP\fP, \fBQUEUE\fP or \fBRETURN\fP.
.PP
\fBACCEPT\fP means ta let tha packet through.
\fBDROP\fP means ta drop tha packet on tha floor.
\fBQUEUE\fP means ta pass tha packet ta userspace.
(How tha fuck tha packet can be received
by a userspace process differs by tha particular queue handlez n' shit.  2.4.x
and 2.6.x kernels up ta 2.6.13 include tha \fBip_queue\fP
queue handlez n' shit.  Kernels 2.6.14 n' lata additionally include the
\fBnfnetlink_queue\fP queue handlez n' shit.  Packets wit a target of QUEUE will be
sent ta queue number '0' up in dis case. Please also peep tha \fBNFQUEUE\fP
target as busted lyrics bout lata up in dis playa page.)
\fBRETURN\fP means stop traversin dis chain n' resume all up in tha next
rule up in the
previous (calling) chain. I aint talkin' bout chicken n' gravy biatch.  If tha end of a funky-ass built-in chain is reached
or a rule up in a funky-ass built-in chain wit target \fBRETURN\fP
is matched, tha target specified by tha chain policy determines the
fate of tha packet.
.SH TABLES
There is currently five independent tablez (which tablez is present
at any time dependz on tha kernel configuration options n' which
modulez is present).
.TP
\fB\-t\fP, \fB\-\-table\fP \fItable\fP
This option specifies tha packet matchin table which tha command
should operate on. I aint talkin' bout chicken n' gravy biatch.  If tha kernel is configured wit automatic module
loading, a attempt is ghon be made ta load tha appropriate module for
that table if it aint already there.

Da tablez is as bigs up:
.RS
.TP .4i
\fBfilter\fP:
This is tha default table (if no \-t option is passed). Well shiiiit, it gotz nuff
the built-in chains \fBINPUT\fP (for packets destined ta local sockets),
\fBFORWARD\fP (for packets bein routed all up in tha box), and
\fBOUTPUT\fP (for locally-generated packets).
.TP
\fBnat\fP:
This table is consulted when a packet dat creates a new
connection is encountered. Y'all KNOW dat shit, muthafucka!  It consistz of three built-ins: \fBPREROUTING\fP
(for alterin packets as soon as they come in), \fBOUTPUT\fP
(for alterin locally-generated packets before routing), n' \fBPOSTROUTING\fP
(for alterin packets as they is bout ta go out) fo' realz. Available since kernel 3.7.
.TP
\fBmangle\fP:
This table is used fo' specialized packet alteration. I aint talkin' bout chicken n' gravy biatch.  Until kernel
2.4.17 it had two built-in chains: \fBPREROUTING\fP
(for alterin incomin packets before routing) n' \fBOUTPUT\fP
(for alterin locally-generated packets before routing).
Since kernel 2.4.18, three other built-in chains is also supported:
\fBINPUT\fP (for packets comin tha fuck into tha box itself), \fBFORWARD\fP
(for alterin packets bein routed all up in tha box), n' \fBPOSTROUTING\fP
(for alterin packets as they is bout ta go out).
.TP
\fBraw\fP:
This table is used mainly fo' configurin exemptions from connection
trackin up in combination wit tha NOTRACK target.  It registas all up in tha netfilter
hooks wit higher prioritizzle n' is thus called before ip_conntrack, or any other
IP tables.  It serves up tha followin built-in chains: \fBPREROUTING\fP
(for packets arrivin via any network intercourse) \fBOUTPUT\fP
(for packets generated by local processes)
.TP
\fBsecurity\fP:
This table is used fo' Mandatory Access Control (MAC) networkin rules, such
as dem enabled by tha \fBSECMARK\fP n' \fBCONNSECMARK\fP targets.
Mandatory Access Control is implemented by Linux Securitizzle Modulez such as
SELinux.  Da securitizzle table is called afta tha filta table, allowin any
Discretionary Access Control (DAC) rulez up in tha filta table ta take effect
before MAC rules.  This table serves up tha followin built-in chains:
\fBINPUT\fP (for packets comin tha fuck into tha box itself),
\fBOUTPUT\fP (for alterin locally-generated packets before routing), and
\fBFORWARD\fP (for alterin packets bein routed all up in tha box).
.RE
.SH OPTIONS
Da options dat is recognized by
\fBip6tables\fP can be divided tha fuck into nuff muthafuckin different groups.
.SS COMMANDS
These options specify tha specific action ta perform.  Only one of them
can be specified on tha command line unless otherwise specified
below.  For all tha long versionz of tha command n' option names, you
need ta use only enough lettas ta ensure that
\fBip6tables\fP can differentiate it from all other options.
.TP
\fB\-A\fP, \fB\-\-append\fP \fIchain rule-specification\fP
Append one or mo' rulez ta tha end of tha selected chain.
When tha source and/or destination names resolve ta mo' than one
address, a rule is ghon be added fo' each possible address combination.
.TP
\fB\-C\fP, \fB\-\-check\fP \fIchain rule-specification\fP
Peep whether a rule matchin tha justification do exist up in the
selected chain. I aint talkin' bout chicken n' gravy biatch. This command uses tha same ol' dirty logic as \fB\-D\fP to
find a matchin entry yo, but do not alta tha existin iptables
configuration n' uses its exit code ta indicate success or failure.
.TP
\fB\-D\fP, \fB\-\-delete\fP \fIchain rule-specification\fP
.ns
.TP
\fB\-D\fP, \fB\-\-delete\fP \fIchain rulenum\fP
Delete one or mo' rulez from tha selected chain. I aint talkin' bout chicken n' gravy biatch.  There is two
versionz of dis command: tha rule can be specified as a number up in the
chain (startin at 1 fo' tha straight-up original gangsta rule) or a rule ta match.
.TP
\fB\-I\fP, \fB\-\-insert\fP \fIchain\fP [\fIrulenum\fP] \fIrule-specification\fP
Insert one or mo' rulez up in tha selected chain as tha given rule
number n' shit.  So, if tha rule number is 1, tha rule or rulez is inserted
at tha head of tha chain. I aint talkin' bout chicken n' gravy biatch.  This be also tha default if no rule number
is specified.
.TP
\fB\-R\fP, \fB\-\-replace\fP \fIchain rulenum rule-specification\fP
Replace a rule up in tha selected chain. I aint talkin' bout chicken n' gravy biatch.  If tha source and/or
destination names resolve ta multiple addresses, tha command will
fail.  Rulez is numbered startin at 1.
.TP
\fB\-L\fP, \fB\-\-list\fP [\fIchain\fP]
List all rulez up in tha selected chain. I aint talkin' bout chicken n' gravy biatch.  If no chain is selected, all
chains is listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Like every last muthafuckin other ip6tablez command, it applies ta the
specified table (filta is tha default).
.IP ""
Please note dat it is often used wit tha \fB\-n\fP
option, up in order ta avoid long reverse DNS lookups.
It be legal ta specify tha \fB\-Z\fP
(zero) option as well, up in which case tha chain(s) is ghon be atomically
listed n' zeroed. Y'all KNOW dat shit, muthafucka!  Da exact output be affected by tha other
arguments given. I aint talkin' bout chicken n' gravy biatch. Da exact rulez is suppressed until you use
.nf
 ip6tablez \-L \-v
.fi
.TP
\fB\-S\fP, \fB\-\-list\-rules\fP [\fIchain\fP]
Print all rulez up in tha selected chain. I aint talkin' bout chicken n' gravy biatch.  If no chain is selected, all
chains is printed like ip6tables-save. Like every last muthafuckin other ip6tablez command,
it applies ta tha specified table (filta is tha default).
.TP
\fB\-F\fP, \fB\-\-flush\fP [\fIchain\fP]
Flush tha selected chain (all tha chains up in tha table if none is given).
This is equivalent ta deletin all tha rulez one by one.
.TP
\fB\-Z\fP, \fB\-\-zero\fP [\fIchain\fP [\fIrulenum\fP]]
Zero tha packet n' byte countas up in all chains, or only tha given chain,
or only tha given rule up in a cold-ass lil chain. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is legal to
specify the
\fB\-L\fP, \fB\-\-list\fP
(list) option as well, ta peep tha countas immediately before they are
cleared. Y'all KNOW dat shit, muthafucka! (See above.)
.TP
\fB\-N\fP, \fB\-\-new\-chain\fP \fIchain\fP
Smoke a freshly smoked up user-defined chain by tha given name.  There must be no
target of dat name already.
.TP
\fB\-X\fP, \fB\-\-delete\-chain\fP [\fIchain\fP]
Delete tha optionizzle user-defined chain specified. Y'all KNOW dat shit, muthafucka!  There must be no references
to tha chain. I aint talkin' bout chicken n' gravy biatch.  If there are, you must delete or replace tha referrin rules
before tha chain can be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da chain must be empty, i.e. not contain
any rules.  If no argument is given, it will attempt ta delete every
non-builtin chain up in tha table.
.TP
\fB\-P\fP, \fB\-\-policy\fP \fIchain target\fP
Set tha policy fo' tha chain ta tha given target.  See tha section \fBTARGETS\fP
for tha legal targets, n' you can put dat on yo' toast.  Only built-in (non-user-defined) chains can have
policies, n' neither built-in nor user-defined chains can be policy
targets.
.TP
\fB\-E\fP, \fB\-\-rename\-chain\fP \fIold\-chain new\-chain\fP
Rename tha user specified chain ta tha user supplied name.  This is
cosmetic, n' has no effect on tha structure of tha table.
.TP
\fB\-A\fP, \fB\-\-append\fP \fIchain rule-specification\fP
Append one or mo' rulez ta tha end of tha selected chain.
When tha source and/or destination names resolve ta mo' than one
address, a rule is ghon be added fo' each possible address combination.
.TP
\fB\-h\fP
Help.
Give a (currently straight-up brief) description of tha command syntax.
.SS PARAMETERS
Da followin parametas make up a rule justification (as used up in the
add, delete, insert, replace n' append commands).
.TP
\fB\-4\fP, \fB\-\-ipv4\fP
If a rule rockin tha \fB\-4\fP option is banged wit (and only with)
ip6tables-restore, it is ghon be silently ignored. Y'all KNOW dat shit, muthafucka! Any other uses will throw an
error. Shiiit, dis aint no joke. This option allows ta put both IPv4 n' IPv6 rulez up in a single rule file
for use wit both iptables-restore n' ip6tables-restore.
.TP
\fB\-6\fP, \fB\-\-ipv6\fP
This option has no effect up in ip6tablez n' ip6tables-restore.
.TP
[\fB!\fP] \fB\-p\fP, \fB\-\-protocol\fP \fIprotocol\fP
Da protocol of tha rule or of tha packet ta check.
Da specified protocol can be one of \fBtcp\fP, \fBudp\fP, \fBudplite\fP,
\fBicmpv6\fP, \fBesp\fP, \fBmh\fP or tha special keyword "\fBall\fP",
or it can be a numeric value, representin one of these protocols or a
different one fo' realz. A protocol name from /etc/protocols be also allowed.
But IPv6 extension headaz except \fBesp\fP is not allowed.
\fBesp\fP n' \fBipv6\-nonext\fP
can be used wit Kernel version 2.6.11 or later.
A "!" argument before tha protocol inverts the
test.  Da number zero is equivalent ta \fBall\fP, which means dat you cannot
test tha protocol field fo' tha value 0 directly. To match on a HBH header,
even if it was tha last, you cannot use \fB\-p 0\fP yo, but always need
\fB\-m hbh\fP.
"\fBall\fP"
will match wit all protocols n' is taken as default when this
option is omitted.
.TP
[\fB!\fP] \fB\-s\fP, \fB\-\-source\fP \fIaddress\fP[\fB/\fP\fImask\fP]
Source justification.
\fIAddress\fP can be either be a hostname,
a network IP address (with \fB/\fP\fImask\fP), or a plain IP address.
Names is ghon be resolved once only, before tha rule is submitted ta tha kernel.
Please note dat specifyin any name ta be resolved wit a remote query such as
DNS be a straight-up wack idea.
(Resolvin network names aint supported at dis time.)
Da \fImask\fP be a plain number,
specifyin tha number of 1z all up in tha left side of tha network mask.
A "!" argument before tha address justification inverts tha sense of
the address. Da flag \fB\-\-src\fP
is a alias fo' dis option.
Multiple addresses can be specified yo, but dis will \fBexpand ta multiple
rules\fP (when addin wit \-A), or will cause multiple rulez ta be
deleted (with \-D).
.TP
[\fB!\fP] \fB\-d\fP, \fB\-\-destination\fP \fIaddress\fP[\fB/\fP\fImask\fP]
Destination justification. I aint talkin' bout chicken n' gravy biatch. 
See tha description of tha \fB\-s\fP
(source) flag fo' a thugged-out detailed description of tha syntax.  Da flag
\fB\-\-dst\fP be a alias fo' dis option.
.TP
\fB\-m\fP, \fB\-\-match\fP \fImatch\fP
Specifies a match ta use, dat is, a extension module dat tests fo' a
specific property. Da set of matches make up tha condizzle under which a
target is invoked. Y'all KNOW dat shit, muthafucka! Matches is evaluated first ta last as specified on the
command line n' work up in short-circuit fashion, i.e. if one extension yields
false, evaluation will stop.
.TP
\fB\-j\fP, \fB\-\-jump\fP \fItarget\fP
This specifies tha target of tha rule; i.e., what tha fuck ta do if tha packet
matches dat shit.  Da target can be a user-defined chain (other than the
one dis rule is in), one of tha special builtin targets which decide
the fate of tha packet immediately, or a extension (see \fBEXTENSIONS\fP
below).  If this
option is omitted up in a rule (and \fB\-g\fP
is not used), then matchin tha rule gonna git no
effect on tha packetz fate yo, but tha countas on tha rule will be
incremented.
.TP
\fB\-g\fP, \fB\-\-goto\fP \fIchain\fP
This specifies dat tha processin should continue up in a user
specified chain. I aint talkin' bout chicken n' gravy biatch. Unlike tha \-\-jump option return aint gonna continue
processin up in dis chain but instead up in tha chain dat called our asses via
\-\-jump.
.TP
[\fB!\fP] \fB\-i\fP, \fB\-\-in\-interface\fP \fIname\fP
Name of a intercourse via which a packet was received (only for
packets enterin tha \fBINPUT\fP, \fBFORWARD\fP n' \fBPREROUTING\fP
chains).  When tha "!" argument is used before tha intercourse name, the
sense is inverted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha intercourse name endz up in a "+", then any
interface which begins wit dis name will match.  If dis option is
omitted, any intercourse name will match.
.TP
[\fB!\fP] \fB\-o\fP, \fB\-\-out\-interface\fP \fIname\fP
Name of a intercourse via which a packet is goin ta be busted (for packets
enterin tha \fBFORWARD\fP, \fBOUTPUT\fP n' \fBPOSTROUTING\fP
chains).  When tha "!" argument is used before tha intercourse name, the
sense is inverted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha intercourse name endz up in a "+", then any
interface which begins wit dis name will match.  If dis option is
omitted, any intercourse name will match.
.\" Currently not supported (header-based)
.\" .TP
.\" [\fB!\fP] \fB\-f\fP, \fB\-\-fragment\fP
.\" This means dat tha rule only refers ta second n' further fragments
.\" of fragmented packets, n' you can put dat on yo' toast.  Since there is no way ta tell tha source or
.\" destination portz of such a packet (or ICMP type), such a packet will
.\" not match any rulez which specify em.  When tha "!" argument
.\" precedes tha "\-f" flag, tha rule will only match head fragments, or
.\" unfragmented packets.
.TP
\fB\-c\fP, \fB\-\-set\-counters\fP \fIpackets bytes\fP
This enablez tha administrator ta initialize tha packet n' byte
countaz of a rule (durin \fBINSERT\fP, \fBAPPEND\fP, \fBREPLACE\fP
operations).
.SS "OTHER OPTIONS"
Da followin additionizzle options can be specified:
.TP
\fB\-v\fP, \fB\-\-verbose\fP
Verbose output.  This option make tha list command show tha intercourse
name, tha rule options (if any), n' tha TOS masks.  Da packet and
byte countas is also listed, wit tha suffix 'K', 'M' or 'G' for
1000, 1,000,000 n' 1,000,000,000 multipliers respectively (but see
the \fB\-x\fP flag ta chizzle this).
For appending, insertion, deletion n' replacement, dis causes
detailed shiznit on tha rule or rulez ta be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. \fB\-v\fP may be
specified multiple times ta possibly emit mo' detailed debug statements.
.TP
\fB\-n\fP, \fB\-\-numeric\fP
Numeric output.
IP addresses n' port numbers is ghon be printed up in numeric format.
By default, tha program will try ta display dem as host names,
network names, or skillz (whenever applicable).
.TP
\fB\-x\fP, \fB\-\-exact\fP
Expand numbers.
Display tha exact value of tha packet n' byte counters,
instead of only tha rounded number up in Kz (multiplez of 1000)
Mz (multiplez of 1000K) or Gz (multiplez of 1000M).  This option is
only relevant fo' tha \fB\-L\fP command.
.TP
\fB\-\-line\-numbers\fP
When listin rules, add line numbers ta tha beginnin of each rule,
correspondin ta dat rulez posizzle up in tha chain.
.TP
\fB\-\-modprobe=\fP\fIcommand\fP
When addin or insertin rulez tha fuck into a cold-ass lil chain, use \fIcommand\fP
to load any necessary modulez (targets, match extensions, etc).
.SH MATCH EXTENSIONS
.PP
iptablez can use extended packet matchin n' target modules.
A list of these be available up in tha \fBiptables\-extensions\fP(8) manpage.
.SH DIAGNOSTICS
Various error lyrics is printed ta standard error. Shiiit, dis aint no joke.  Da exit code
is 0 fo' erect functioning.  Errors which step tha fuck up ta be caused by
invalid or played command line parametas cause a exit code of 2, and
other errors cause a exit code of 1.
.SH BUGS
Bugs?  Whatz this? ;-)
Well... tha countas is not reliable on sparc64.
.SH COMPATIBILITY WITH IPCHAINS
This \fBip6tables\fP
is straight-up similar ta ipchains by Rusty Russell.  Da main difference is
that tha chains \fBINPUT\fP n' \fBOUTPUT\fP
are only traversed fo' packets comin tha fuck into tha local host and
originatin from tha local host respectively.  Hence every last muthafuckin packet only
passes all up in one of tha three chains (except loopback traffic, which
involves both INPUT n' OUTPUT chains); previously a gangbangin' forwarded packet
would pass all up in all three.
.PP
Da other main difference is dat \fB\-i\fP refers ta tha input intercourse;
\fB\-o\fP refers ta tha output intercourse, n' both is available fo' packets
enterin tha \fBFORWARD\fP chain.
There is nuff muthafuckin other chizzlez up in ip6tables.
.SH SEE ALSO
\fBip6tables\-save\fP(8),
\fBip6tables\-restore\fP(8),
\fBiptables\fP(8),
\fBiptables\-apply\fP(8),
\fBiptables\-extensions\fP(8),
\fBiptables\-save\fP(8),
\fBiptables\-restore\fP(8),
\fBlibipq\fP(3).
.PP
Da packet-filtering-HOWTO details iptablez usage for
packet filtering,
the netfilter-extensions-HOWTO details tha extensions dat are
not up in tha standard distribution,
and tha netfilter-hacking-HOWTO details tha netfilta internals.
.br
See
.BR "http://www.netfilter.org/" .
.SH AUTHORS
Rusty Russell freestyled iptables, up in early consultation wit Michael
Neuling.
.PP
Marc Boucher made Rusty abandon ipnatctl by lobbyin fo' a generic packet
selection framework up in iptables, then freestyled tha mangle table, tha balla match,
the mark stuff, n' ran round bustin def shiznit all over dis biiiatch.
.PP
Jizzy Morris freestyled tha TOS target, n' tos match.
.PP
Jozsef Kadlecsik freestyled tha REJECT target.
.PP
Harald Welte freestyled tha ULOG n' NFQUEUE target, tha freshly smoked up libiptc, as well as TTL match+target n' libipulog.
.PP
Da Netfilta Core Crew is: Marc Boucher, Martin Josefsson, Yasuyuki Kozakai,
Jozsef Kadlecsik, Patrick McHardy, Jizzy Morris, Pablo Neira Ayuso,
Harald Welte n' Rusty Russell.
.PP
ip6tablez playa page pimped by Andras Kis-Szabo, based on
iptablez playa page freestyled by Herve Eychenne <rv@wallfire.org>.
.\" .. n' did I mention dat we is incredibly def people?
.\" .. sexy, too ..
.\" .. witty, charming, bangin ..
.\" .. n' most of all, modest ..
.SH VERSION
.PP
This manual page applies ta ip6tablez @PACKAGE_VERSION@.
