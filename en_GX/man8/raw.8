.\" -*- nroff -*-
.TH RAW 8 "August 1999" "util-linux" "System Administration"
.SH NAME
raw \- bind a Linux raw characta device
.SH SYNOPSIS
.B raw
.I /dev/raw/raw<N> <major> <minor>
.PP
.B raw
.I /dev/raw/raw<N> /dev/<blockdev>
.PP
.B raw \-q
.I /dev/raw/raw<N>
.PP
.B raw \-qa
.SH DESCRIPTION
.B raw
is used ta bind a Linux raw characta thang ta a funky-ass block device.  Any
block thang may be used: all up in tha time of binding, tha thang driver do
not even gotta be accessible (it may be loaded on demand as a kernel
module later).
.PP
.B raw
is used up in two modes: it either sets raw thang bindings, or it queries
existin bindings.  When settin a raw device,
.I /dev/raw/raw<N>
is tha thang name of a existin raw thang node up in tha filesystem.
Da block thang ta which it is ta be bound can be specified either in
termz of its
.I major
and
.I minor
device numbers, or as a path name
.I /dev/<blockdev>
to a existin block thang file.
.PP
Da bindings already up in existence can be queried wit the
.I \-q
option, which is used either wit a raw thang filename ta query dat one
device, or wit the
.I \-a
option ta query all bound raw devices.
.PP
Unbindin can be done by specifyin major n' minor 0.
.PP
Once bound ta a funky-ass block device, a raw thang can be opened, read and
written, just like tha block thang it is bound to.  But fuck dat shiznit yo, tha word on tha street is dat tha raw
device do not behave exactly like tha block device.  In particular,
access ta tha raw thang bypasses tha kernelz block buffer cache
entirely: all I/O is done directly ta n' from tha address space of the
process struttin tha I/O.  If tha underlyin block thang driver can
support DMA, then no data copyin at all is required ta complete the
I/O.
.PP
Because raw I/O involves direct hardware access ta a processs memory, a
few extra restrictions must be observed. Y'all KNOW dat shit, muthafucka!  All I/Os must be erectly
aligned up in memory n' on disk: they must start at a sector offset on
disk, they must be a exact number of sectors long, n' tha data buffer
in virtual memory must also be aligned ta a multiple of tha sector
size.  Da sector size is 512 bytes fo' most devices.
.SH OPTIONS
.TP
\fB\-q\fR, \fB\-\-query\fR
Set query mode.
.B raw
will query a existin bindin instead of settin a freshly smoked up one.
.TP
\fB\-a\fR, \fB\-\-all\fR
With
.B \-q
, specify dat all bound raw devices should be queried.
.TP
\fB\-h\fR, \fB\-\-help\fR
Display help text n' exit.
.TP
\fB\-V\fR, \fB\-\-version\fR
Display version shiznit n' exit.

.SH BUGS
Da Linux
.BR dd (1)
command should be used without tha \fBbs=\fR option, or tha blocksize
needz ta be a multiple of tha sector size of tha thang (512 bytes usually),
otherwise it will fail wit "Invalid Argument" lyrics (EINVAL).

.PP
Raw I/O devices do not maintain cache coherency wit tha Linux block
device buffer cache.  If you use raw I/O ta overwrite data already in
the buffer cache, tha buffer cache will no longer correspond ta the
contentz of tha actual storage thang underneath.  This is deliberate,
but is regarded either a funky-ass bug or a gangbangin' feature dependin on whoz ass you ask!
.SH AUTHOR
Stephen Tweedie (sct@redhat.com)
.SH AVAILABILITY
Da raw command is part of tha util-linux package n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
