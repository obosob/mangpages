.TH TCPD 8
.SH NAME
tcpd \- access control facilitizzle fo' internizzle skillz
.SH DESCRIPTION
.PP
Da \fItcpd\fR program can be set up ta monitor incomin requests for
\fItelnet\fR, \fIfinger\fR, \fIftp\fR, \fIexec\fR, \fIrsh\fR,
\fIrlogin\fR, \fItftp\fR, \fItalk\fR, \fIcomsat\fR n' other skillz
that gotz a one-to-one mappin onto executable files.
.PP
Da program supports both 4.3BSD-style sockets n' System V.4-style
TLI.  Functionalitizzle may be limited when tha protocol underneath TLI is
not a internizzle protocol.
.PP
Operation be as bigs up: whenever a request fo' steez arrives, the
\fIinetd\fP daemon is tricked tha fuck into hustlin tha \fItcpd\fP program
instead of tha desired server n' shit. \fItcpd\fP logs tha request n' do
some additionizzle checks. When all is well, \fItcpd\fP runs the
appropriate server program n' goes away.
.PP
Optionizzle features are: pattern-based access control, client username
lookups wit tha RFC 931 etc. protocol, protection against hosts that
pretend ta have one of mah thugss host name, n' protection against hosts
that pretend ta have one of mah thugss network address.
.SH LOGGING
Connections dat is monitored by
.I tcpd
are reported all up in tha \fIsyslog\fR(3) facility. Each record gotz nuff
a time stamp, tha client host name n' tha name of tha requested
service.  Da shiznit can be useful ta detect unwanted activities,
especially when logfile shiznit from nuff muthafuckin hosts is merged.
.PP
In order ta smoke up where yo' logs is going, examine tha syslog
configuration file, probably /etc/syslog.conf.
.SH ACCESS CONTROL
Optionally,
.I tcpd
supports a simple form of access control dat is based on pattern
matching.  Da access-control software serves up hooks fo' tha execution
of shell commandz when a pattern fires.  For details, peep the
\fIhosts_access\fR(5) manual page.
.SH HOST NAME VERIFICATION
Da authentication scheme of some protocols (\fIrlogin, rsh\fR) relies
on host names. Right back up in yo muthafuckin ass. Some implementations believe tha host name dat they get
from any random name server; other implementations is mo' careful but
use a gangbangin' flawed algorithm.
.PP
.I tcpd
verifies tha client host name dat is returned by tha address->name DNS
server by lookin all up in tha host name n' address dat is returned by the
name->address DNS server n' shit.  If any discrepancy is detected,
.I tcpd
concludes dat it is dealin wit a host dat pretendz ta have one of mah thugs
elses host name.
.PP
If tha sources is compiled wit -DPARANOID,
.I tcpd
will drop tha connection up in case of a host name/address mismatch.
Otherwise, tha hostname can be matched wit tha \fIPARANOID\fR wildcard,
afta which suitable action can be taken.
.SH HOST ADDRESS SPOOFING
Optionally,
.I tcpd
disablez source-routin socket options on every last muthafuckin connection dat it
deals with. This will take care of most attacks from hosts dat pretend
to have a address dat belongs ta one of mah thugss network. UDP skillz
do not benefit from dis protection. I aint talkin' bout chicken n' gravy biatch. This feature must be turned on
at compile time.
.SH RFC 931
When RFC 931 etc. lookups is enabled (compile-time option) \fItcpd\fR
will attempt ta establish tha name of tha client user n' shit. This will
succeed only if tha client host runs a RFC 931-compliant daemon.
Client user name lookups aint gonna work fo' datagram-oriented
connections, n' may cause noticeable delays up in tha case of connections
from PCs.
.SH EXAMPLES
Da detailz of rockin \fItcpd\fR depend on pathname shiznit dat was
compiled tha fuck into tha program.
.SH EXAMPLE 1
This example applies when \fItcpd\fR expects dat tha original gangsta network
daemons is ghon be moved ta a "other" place.
.PP
In order ta monitor access ta tha \fIfinger\fR service, move the
original gangsta finger daemon ta tha "other" place n' install tcpd up in the
place of tha original gangsta finger daemon. I aint talkin' bout chicken n' gravy biatch. No chizzlez is required to
configuration files.
.nf
.sp
.in +5
# mkdir /other/place
# mv /usr/etc/in.fingerd /other/place
# cp tcpd /usr/etc/in.fingerd
.fi
.PP
Da example assumes dat tha network daemons live up in /usr/etc. On some
systems, network daemons live up in /usr/sbin or up in /usr/libexec, or have
no `in.\' prefix ta they name.
.SH EXAMPLE 2
This example applies when \fItcpd\fR expects dat tha network daemons
are left up in they original gangsta place.
.PP
In order ta monitor access ta tha \fIfinger\fR service, big-ass up the
followin edits on tha \fIinetd\fR configuration file (usually 
\fI/etc/inetd.conf\fR or \fI/etc/inet/inetd.conf\fR):
.nf
.sp
.ti +5
finger  stream  tcp  nowait  no muthafucka  /usr/etc/in.fingerd  in.fingerd
.sp
becomes:
.sp
.ti +5
finger  stream  tcp  nowait  no muthafucka  /some/where/tcpd     in.fingerd
.sp
.fi
.PP
Da example assumes dat tha network daemons live up in /usr/etc. On some
systems, network daemons live up in /usr/sbin or up in /usr/libexec, the
daemons have no `in.\' prefix ta they name, or there is no userid
field up in tha inetd configuration file.
.PP
Similar chizzlez is ghon be needed fo' tha other skillz dat is ta be
covered by \fItcpd\fR.  Send a `kill -HUP\' ta tha \fIinetd\fR(8)
process ta make tha chizzlez effectizzle fo' realz. AIX playas may also have to
execute tha `inetimp\' command.
.SH EXAMPLE 3
In tha case of daemons dat do not live up in a cold-ass lil common directory ("secret"
or otherwise), edit tha \fIinetd\fR configuration file so dat it
specifies a absolute path name fo' tha process name field. Y'all KNOW dat shit, muthafucka! For example:
.nf
.sp
    ntalk  dgram  udp  wait  root  /some/where/tcpd  /usr/local/lib/ntalkd
.sp
.fi
.PP
Only tha last component (ntalkd) of tha pathname is ghon be used for
access control n' logging.
.SH BUGS
Some UDP (and RPC) daemons linger round fo' a while afta they have
finished they work, up in case another request comes in. I aint talkin' bout chicken n' gravy biatch.  In tha inetd
configuration file these skillz is registered wit tha \fIwait\fR
option. I aint talkin' bout chicken n' gravy biatch. Only tha request dat started such a thugged-out daemon is ghon be logged.
.PP
Da program do not work wit RPC skillz over TCP. These skillz
are registered as \fIrpc/tcp\fR up in tha inetd configuration file. The
only non-trivial steez dat be affected by dis limitation is
\fIrexd\fR, which is used by tha \fIon(1)\fR command. Y'all KNOW dat shit, muthafucka! This is no pimped out
loss.  On most systems, \fIrexd\fR is less secure than a wildcard in
/etc/hosts.equiv.
.PP
RPC broadcast requests (for example: \fIrwall, rup, rusers\fR) always
appear ta come from tha respondin host. What happens is dat the
client broadcasts tha request ta all \fIportmap\fR daemons on its
network; each \fIportmap\fR daemon forwardz tha request ta a local
daemon. I aint talkin' bout chicken n' gravy biatch fo' realz. As far as tha \fIrwall\fR etc.  daemons know, tha request comes
from tha local host.
.SH FILES
.PP
Da default locationz of tha host access control tablez are:
.PP
/etc/hosts.allow
.br
/etc/hosts.deny
.SH SEE ALSO
.na
.nf
hosts_access(5), format of tha tcpd access control tables.
syslog.conf(5), format of tha syslogd control file.
inetd.conf(5), format of tha inetd control file.
.SH AUTHORS
.na
.nf
Wietse Venema (wietse@wzv.win.tue.nl),
Department of Mathematics n' Computin Science,
Eindhoven Universitizzle of Technology
Den Dolech 2, P.O. Box 513, 
5600 MB Eindhoven, Da Netherlands
\" @(#) tcpd.8 1.5 96/02/21 16:39:16
