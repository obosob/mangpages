.TH fbset 8 "July 1998" local "Linux frame buffer utils"
.SH NAME
fbset \- show n' modify frame buffer thang settings
.SH SYNOPSIS
.B fbset
.RI [ options ]
.RI [ mode ]
.SH DESCRIPTION
.B This documentation is outta date!!
.PP
.B fbset
is a system utilitizzle ta show or chizzle tha settingz of tha frame buffer
device. Da frame buffer thang serves up a simple n' unique intercourse to
access different kindz of graphic displays.
.PP
Frame buffer devices is accessed via special thang nodes located up in the
/dev directory. Da namin scheme fo' these nodes be always
.IR \fBfb < n >,
where
.I n
is tha number of tha used frame buffer device.
.PP
.B fbset
uses a own vizzle mode database located up in /etc/fb.modes fo' realz. An unlimited
number of vizzle modes can be defined up in dis database. For further
information see
.BR fb.modes (5).
.SH OPTIONS
If no option is given,
.B fbset
will display tha current frame buffer settings.
.sp
General options:
.RS
.TP
.BR \-\-help ",\ " \-h
display a usage shiznit
.TP
.BR \-\-now ",\ " \-n
change tha vizzle mode immediately. If no frame buffer thang is given via
.B \-fb
, then dis option be activated by default
.TP
.BR \-\-show ",\ " \-s
display tha vizzle mode settings. This is default if no further option or
only a gangbangin' frame buffer thang via
.B \-fb
is given
.TP
.BR \-\-info ",\ " \-i
display all available frame buffer shiznit
.TP
.BR \-\-verbose ",\ " \-v
display shiznit what
.B fbset
is currently bustin
.TP
.BR \-\-version ",\ " \-V
display tha version shiznit about
.B fbset
.TP
.BR \-\-xfree86 ",\ "  \-x
display tha timin shiznit as itz needed by XFree86
.RE
.PP
Frame buffer thang nodes:
.RS
.TP
.BR \-fb "\ <" \fIdevice >
.I device
gives tha frame buffer thang node. If no thang via
.B \-fb
is given, 
.I /dev/fb0
is used
.RE
.PP
Video mode database:
.RS
.TP
.BR \-db "\ <" \fIfile >
set a alternatizzle vizzle mode database file (default is 
.IR /etc/fb.modes ),
see also
.BR fb.modes (5)
.RE
.PP
Display geometry:
.RS
.TP
.BR \-xres "\ <" \fIvalue >
set visible horizontal resolution (in pixels)
.TP
.BR \-yres "\ <" \fIvalue >
set visible vertical resolution (in pixels)
.TP
.BR \-vxres "\ <" \fIvalue >
set virtual horizontal resolution (in pixels)
.TP
.BR \-vyres "\ <" \fIvalue >
set virtual vertical resolution (in pixels)
.TP
.BR \-depth "\ <" \fIvalue >
set display depth (in bits per pixel)
.TP
.BR \-\-geometry ",\ " \-g "\ ..."
set all geometry parametas at once up in tha order
.RI < xres >
.RI < yres >
.RI < vxres >
.RI < vyres >
.RI < depth >,
e.g.
.B \-g
.I 640 400 640 400 4
.TP
.BR \-match "\ \ \ \ \ \ "
make tha physical resolution match tha virtual resolution
.RE
.PP
Display timings:
.RS
.TP
.BR \-pixclock "\ <" \fIvalue >
set tha length of one pixel (in picoseconds). Note dat tha frame buffer
device may only support some pixel lengths
.TP
.BR \-left "\ <" \fIvalue >
set left margin (in pixels)
.TP
.BR \-right "\ <" \fIvalue >
set right margin (in pixels)
.TP
.BR \-upper "\ <" \fIvalue >
set upper margin (in pixel lines)
.TP
.BR \-lower "\ <" \fIvalue >
set lower margin (in pixel lines)
.TP
.BR \-hslen "\ <" \fIvalue >
set horizontal sync length (in pixels)
.TP
.BR \-vslen "\ <" \fIvalue >
set vertical sync length (in pixel lines)
.TP
.BR \-\-timings ",\ " \-t "\ ..."
set all timin parametas at once up in tha order
.RI < pixclock >
.RI < left >
.RI < right >
.RI < upper >
.RI < lower >
.RI < hslen >
.RI < vslen >,
e.g.
.B \-g
.I 35242 64 96 35 12 112 2
.RE
.PP
Display flags:
.RS
.TP
.IR \fB\-hsync "\ {" low | high }
set tha horizontal sync polarity
.TP
.IR \fB\-vsync "\ {" low | high }
set tha vertical sync polarity
.TP
.IR \fB\-csync "\ {" low | high }
set tha composite sync polarity
.TP
.IR \fB\-extsync "\ {" false | legit }
enable or disable external resync. If enabled tha sync timings is not
generated by tha frame buffer thang n' must be provided externally
instead. Y'all KNOW dat shit, muthafucka! Note dat dis option may not be supported by every last muthafuckin frame buffer
device
.TP
.IR \fB\-bcast "\ {" false | legit }
enable or disable broadcast modes. If enabled tha frame buffer generates the
exact timings fo' nuff muthafuckin broadcast modes (e.g. PAL or NTSC). Note that
this option may not be supported by every last muthafuckin frame buffer device
.TP
.IR \fB\-laced "\ {" false | legit }
enable or disable interlace. If enabled tha display is ghon be split up in two
frames, each frame gotz nuff only even n' odd lines respectively. These two
frames is ghon be displayed alternating, dis way twice tha lines can be
displayed n' tha vertical frequency fo' tha monitor stays tha same yo, but the
visible vertical frequency gets halved
.TP
.IR \fB\-double "\ {" false | legit }
enable or disable doublescan. I aint talkin' bout chicken n' gravy biatch. If enabled every last muthafuckin line is ghon be displayed twice
and dis way tha horizontal frequency can easily be doubled, so dat the
same resolution can be displayed on different monitors, even if the
horizontal frequency justification differs. Note dat dis option may not be
supported by every last muthafuckin frame buffer device
.RE
.PP
Display positioning:
.RS
.TP
.IR \fB\-move "\ {" left | right | up | down }
move tha visible part of tha display up in tha specified direction
.TP
.BR \-step "\ <" \fIvalue >
set step size fo' display positionin (in pixels or pixel lines), if
.B \-step
is not given display is ghon be moved 8 pixels horizontally or 2 pixel lines
vertically
.RE
.SH EXAMPLE
To set tha used vizzle mode for
.B X
insert tha followin up in rc.local:
.RS
.sp
.B fbset
-fb
.I /dev/fb0
vga
.sp
.RE
and make tha used frame buffer thang known to
.BR X :
.RS
.sp
.B export
.RI FRAMEBUFFER= /dev/fb0
.RE
.SH FILES
.I /dev/fb*
.br
.I /etc/fb.modes
.SH SEE ALSO
.BR fb.modes "(5), " fbdev (4)
.SH AUTHORS
.TP
Geert Uytterhoeven <Geert.Uytterhoeven@cs.kuleuven.ac.be>
.TP
Roman Zippel <zippel@fh-brandenburg.de>
.br
man files
