.TH ntp-keygen 8
.SH NAME
ntp-keygen - generate hood n' private keys
.SH \ 

.SH SYNOPSIS

\fBntp-keygen [ -deGHIMPT ] [ -b \fImodulus\fB ] [ -c [RSA-MD2 | RSA-MD5 | RSA-SHA | RSA-SHA1 | RSA-MDC2 | RSA-RIPEMD160 | DSA-SHA | DSA-SHA1 ] ] [ -C \fIcipher\fB ] [ -i \fIgroup\fB ] [ -m \fImodulus\fB ] [ -p \fIpasswd2\fB ] [ -q \fIpasswd1\fB ] [ -S [ RSA | DSA ] ] [ -s \fIhost\fB ] [ -V \fInkeys\fB ]\fR

.SH DESCRIPTION

This program generates cryptographic data filez used by tha NTPv4 authentication n' identitizzle schemes. Well shiiiit, it can generate message digest keys used up in symmetric key cryptography and, if tha OpenSSL software library has been installed, it can generate host keys, sign keys, certificates n' identitizzle keys used by tha Autokey hood key cryptography. Da message digest keys file is generated up in a gangbangin' format compatible wit NTPv3 fo' realz. All other filez is up in PEM-encoded printable ASCII format so they can be embedded as MIME attachments up in mail ta other cribs.

When used ta generate message digest keys, tha program produces a gangbangin' file containin ten pseudo-random printable ASCII strings suitable fo' tha MD5 message digest algorithm included up in tha distribution. I aint talkin' bout chicken n' gravy biatch. If tha OpenSSL library is installed, it produces a additionizzle ten hex-encoded random bit strings suitable fo' tha SHA1 n' other message digest algorithms. Printable ASCII keys can have length from one ta 20 characters, inclusive. Bit strang keys have length 20 octets (40 hex characters) fo' realz. All keys is 160 bits up in length.

 Da file can be edited lata wit purpose-chosen passwordz fo' tha \fBntpq\fR n' \fBntpdc\fR programs. Each line of tha file gotz nuff three fields, first a integer between 1 n' 65534, inclusive, representin tha key identifier used up in tha \fBserver\fR n' \fBpeer\fR configuration commands. Next is tha key type fo' tha message digest algorithm, which up in tha absence of tha OpenSSL library should be tha strang \fBMD5\fR ta designate tha MD5 message digest algorithm. If tha OpenSSL library is installed, tha key type can be any message digest algorithm supported by dat library. But fuck dat shiznit yo, tha word on tha street is dat if compatibilitizzle wit FIPS 140-2 is required, tha key type must be either \fBSHA\fR or \fBSHA1\fR\[char46]Finally is tha key itself as a printable ASCII strang excludin tha space n' # characters. If not pimped outa than 20 charactas up in length, tha strang is tha key itself; otherwise, it is interpreted as a hex-encoded bit strin fo' realz. As is custom, # n' tha remainin charactas on tha line is ignored. Y'all KNOW dat shit, muthafucka! Later, dis file can be edited ta include tha passwordz fo' tha \fBntpq\fR n' \fBntpdc\fR utilities. Put ya muthafuckin choppers up if ya feel dis! If dis is tha only need, run \fBntp-keygen\fR wit tha \fB-M\fR option n' disregard tha remainder of dis page. 

Da remainin generated filez is compatible wit other OpenSSL applications n' other Public Key Infrastructure (PKI) resources. Certificates generated by dis program should be compatible wit extant industry practice, although some playas might find tha interpretation of X509v3 extension fieldz somewhat liberal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. But fuck dat shiznit yo, tha word on tha street is dat tha identitizzle keys is probably not compatible wit anythang other than Autokey.

Most filez used by dis program is encrypted rockin a private password. Y'all KNOW dat shit, muthafucka! Da \fB-p\fR option specifies tha password fo' local filez n' tha \fB-q\fR option tha password fo' filez busted ta remote cribs. If no local password is specified, tha host name returned by tha Unix \fBgethostname()\fR function, normally tha DNS name of tha host, is used. Y'all KNOW dat shit, muthafucka! If no remote password is specified, tha local password is used.

Da \fBpw\fR option of tha \fBcrypto\fR configuration command specifies tha read password fo' previously encrypted files. This must match tha local password used by dis program. If not specified, tha host name is used. Y'all KNOW dat shit, muthafucka! Thus, if filez is generated by dis program without password, they can be read back by \fBntpd\fR without password yo, but only on tha same host.

All filez n' links is probably installed up in tha directory \fB/usr/local/etc\fR, which is normally up in a gangbangin' finger-lickin' dirty-ass shared filesystem up in NFS-mounted networks n' cannot be chizzled by shared clients, n' you can put dat on yo' toast. Da location of tha keys directory can be chizzled by tha \fBkeysdir\fR configuration command up in such cases. Normally, encrypted filez fo' each host is generated by dat host n' used only by dat host, although exceptions exist as noted lata on dis page.

This program directs commentary n' error lyrics ta tha standard error stream \fBstderr\fR n' remote filez ta tha standard output stream \fBstdout\fR where they can be piped ta other applications or repimped up ta a gangbangin' file. Da names used fo' generated filez n' links all begin wit tha strang \fBntpkey\fR n' include tha file type, generatin host n' filestamp, as busted lyrics bout up in tha Cryptographic Data Filez section below

.SH RUNNING THE PROGRAM

To test n' bust experience wit Autokey concepts, log up in as root n' chizzle ta tha keys directory, probably \fB/usr/local/etc\fR\[char46] When run fo' tha last time, or if all filez wit names beginnin \fBntpkey\fR done been removed, use tha \fBntp-keygen \fRcommand without arguments ta generate a thugged-out default RSA host key n' matchin RSA-MD5 certificate wit expiration date one year hence. If run again, tha program uses tha existin keys n' parametas n' generates only a freshly smoked up certificate wit freshly smoked up expiration date one year hence; however, tha certificate aint generated if tha \fB-e\fR or \fB-q\fR options is present.

Run tha command on as nuff hosts as necessary. Designate one of dem as tha trusted host (TH) rockin \fBntp-keygen\fR wit tha \fB-T\fR option n' configure it ta synchronize from reliable Internizzle servers. Then configure tha other hosts ta synchronize ta tha TH directly or indirectly fo' realz. A certificate trail is pimped when Autokey asks tha immediately ascendant host towardz tha TH ta sign its certificate, which is then provided ta tha immediately descendant host on request fo' realz. All crew hosts should have acyclic certificate trails endin on tha TH.

Da host key is used ta encrypt tha cookie when required n' so must be RSA type. By default, tha host key be also tha sign key used ta encrypt signatures fo' realz. A different sign key can be assigned rockin tha \fB-S\fR option n' dis can be either RSA or DSA type. By default, tha signature message digest type is MD5 yo, but any combination of sign key type n' sign digest type supported by tha OpenSSL library can be specified rockin tha \fB-c\fR option. I aint talkin' bout chicken n' gravy biatch fo' realz. At tha moment, legacy considerations require tha NTP packet header digest type ta be MD5.

.SH TRUSTED HOSTS AND SECURE GROUPS

As busted lyrics bout on tha Authentication Options page, a NTP secure crew consistz of one or mo' low-stratum THs as tha root from which all other crew hosts derive synchronization directly or indirectly. For authentication purposes all hosts up in a crew must have tha same crew name specified by tha \fB-i\fR option n' matchin tha \fBident\fR option of tha \fBcrypto\fR configuration command. Y'all KNOW dat shit, muthafucka! Da crew name is used up in tha subject n' issuer fieldz of trusted, self-signed certificates n' when constructin tha file names fo' identitizzle keys fo' realz. All hosts must have different host names, either tha default host name or as specified by tha \fB-s\fR option n' matchin tha \fBhost\fR option of tha \fBcrypto\fR configuration command. Y'all KNOW dat shit, muthafucka! Most installations need not specify tha \fB-i\fR option nor tha \fBhost\fR option. I aint talkin' bout chicken n' gravy biatch yo. Host names is used up in tha subject n' issuer fieldz of self-signed, nontrusted certificates n' when constructin tha file names fo' host n' sign keys n' certificates yo. Host n' crew names is used only fo' authentication purposes n' have not a god damn thang ta do wit DNS names.

.SH IDENTITY SCHEMES

As busted lyrics bout on tha Authentication Options page, there be five identitizzle schemes, three of which - IFF, GQ n' MV - require identitizzle keys specific ta each scheme. There is two typez of filez fo' each scheme, a encrypted keys file n' a nonencrypted parametas file, which probably gotz nuff a subset of tha keys file. In general, NTP secondary servers operatin as certificate signin authoritizzles (CSA) use tha keys file n' clients use tha parametas file. Both filez is generated by tha TA operatin as a cold-ass lil certificate authoritizzle (CA) on behalf of all servers n' clients up in tha group.

Da parametas filez is public; they can be stored up in a hood place n' busted up in tha clear. Shiiit, dis aint no joke. Da keys filez is encrypted wit tha local password. Y'all KNOW dat shit, muthafucka! To retrieve tha keys file, a host can bust a mail request ta tha TA includin its local password. Y'all KNOW dat shit, muthafucka! Da TA encrypts tha keys file wit dis password n' returns it as a attachment. Da attachment is then copied intact ta tha keys directory wit name given up in tha straight-up original gangsta line of tha file yo, but all up in lower case n' wit tha filestamp deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Alternatively, tha parametas file can be retrieved from a secure wizzy crib.

For example, tha TA generates default host key, IFF keys n' trusted certificate rockin tha command

\fBntp-keygen -p \fIlocal_passwd\fB -T -I -i\fIgroup_name\fB\fR

Each crew host generates default host keys n' nontrusted certificate use tha same command line but omittin tha \fB-i\fR option. I aint talkin' bout chicken n' gravy biatch. Once these media done been generated, tha TA can then generate tha hood parametas rockin tha command

\fBntp-keygen -p local_passwd -e >\fIparameters_file\fB\fR

where tha \fB-e\fR option redirects tha unencrypted parametas ta tha standard output stream fo' a mail application or stored locally fo' lata distribution. I aint talkin' bout chicken n' gravy biatch. In a similar fashizzle tha \fB-q\fR option redirects tha encrypted server keys ta tha standard output stream.

.SH COMMAND LINE OPTIONS

.RS 0 
.TP 8
\fB-b \fImodulus\fB\fR 
Set tha modulus fo' generatin identitizzle keys ta \fImodulus\fR bits, n' you can put dat on yo' toast. Da modulus defaults ta 256 yo, but can be set from 256 (32 octets) ta 2048 (256 octets). Use tha larger moduli wit caution, as dis can consume considerable computin resources n' increases tha size of authenticated packets.
.TP 8
\fB-c [ RSA-MD2 | RSA-MD5 | RSA-SHA | RSA-SHA1 | RSA-MDC2 | RSA-RIPEMD160 | DSA-SHA | DSA-SHA1 ]\fR 
Select certificate n' message digest/signature encryption scheme. Note dat RSA schemes must be used wit a RSA sign key n' DSA schemes must be used wit a DSA sign key. Da default without dis option is \fBRSA-MD5\fR\[char46] If compatibilitizzle wit FIPS 140-2 is required, either tha \fBDSA-SHA\fR or \fBDSA-SHA1\fR scheme must be used.
.TP 8
\fB-C \fIcipher\fB\fR 
Select tha cipher which is used ta encrypt tha filez containin private keys. Da default is three-key triple DES up in STD mode, equivalent ta "-C des-ede3-cbc". Da openssl tool lists ciphers available up in "openssl -h" output.
.TP 8
\fB-d\fR 
Enable debugging. This option displays tha cryptographic data produced fo' eye-friendly billboards.
.TP 8
\fB-e\fR 
Extract tha IFF or GQ hood parametas from tha \fBIFFkey\fR or \fBGQkey\fR keys file previously specified. Y'all KNOW dat shit, muthafucka! Send tha unencrypted data ta tha standard output stream \fBstdout\fR\[char46] While tha IFF parametas do not reveal tha private crew key,  tha GQ parametas should be used wit caution, as they include tha crew key. Use tha \fB-q\fR option wit password instead. Y'all KNOW dat shit, muthafucka! Note: a freshly smoked up certificate aint generated when dis option is present. This allows multiple commandz wit dis option but without disturbin existin media.
.TP 8
\fB-G\fR 
Generate a freshly smoked up encrypted GQ key file n' link fo' tha Guillou-Quisquata (GQ) identitizzle scheme.
.TP 8
\fB-H\fR 
Generate a freshly smoked up encrypted RSA public/private host key file n' link\fB\fR\[char46] Note dat if tha sign key is tha same ol' dirty as tha host key, generatin a freshly smoked up host key invalidates all certificates signed wit tha oldschool host key.
.TP 8
\fB-i \fIgroup\fB\fR 
Set tha crew name ta \fB\fIgroup\fB\fR\[char46] This is used up in tha identitizzle file names. Well shiiiit, it must match tha crew name specified up in tha \fBident\fR option of tha \fBcrypto\fR configuration command.
.TP 8
\fB-I\fR 
Generate a freshly smoked up encrypted IFF key file\fB \fRand link\fB \fRfor tha Schnorr (IFF) identitizzle scheme.
.TP 8
\fB-m \fImodulus\fB\fR 
Set tha modulus fo' generatin filez ta \fImodulus\fR bits, n' you can put dat on yo' toast. Da modulus defaults ta 512 yo, but can be set from 256 (32 octets) ta 2048 (256 octets).
.TP 8
\fB-M\fR 
Generate a freshly smoked up MD5 key file containin 16, 128-bit pseudo-random keys fo' symmetric cryptography..
.TP 8
\fB-P\fR 
Generate a freshly smoked up private certificate used by tha PC identitizzle scheme. By default, tha program generates hood certificates. Note: tha PC identitizzle scheme aint recommended fo' freshly smoked up installations.
.TP 8
\fB-p \fIpasswd\fB\fR 
Set tha password fo' readin n' freestylin encrypted filez ta \fB\fIpasswd\fB\fR\[char46] By default, tha password is tha host name.
.TP 8
\fB-q \fIpasswd\fB\fR 
Extract tha encrypted IFF or GQ server keys from tha \fBIFFkey\fR or \fBGQkey\fR key file previously generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da data is busted ta tha standard output stream \fBstdout\fR\[char46] Set tha password fo' freestylin tha data, which be also tha password ta read tha data file up in another host. By default, tha password is tha host name. Note: a freshly smoked up certificate aint generated when dis option is present. This allows multiple commandz wit dis option but without disturbin existin media.
.TP 8
\fB-S [ RSA | DSA ]\fR 
Generate a freshly smoked up sign key of tha specified type. By default, tha sign key is tha host key n' has tha same ol' dirty type. If compatibly wit FIPS 140-2 is required, tha sign key type must be \fBDSA\fR\[char46] Note dat generatin a freshly smoked up sign key invalidates all certificates signed wit tha oldschool sign key.
.TP 8
\fB-s \fIhost\fB\fR 
Set tha host name ta \fB\fIhost\fB\fR\[char46] This is used up in tha host n' sign key file names. Well shiiiit, it must match tha host name specified up in tha \fBhost\fR option of tha \fBcrypto\fR configuration command.
.TP 8
\fB-T\fR 
Generate a trusted certificate. By default, tha program generates nontrusted certificates.
.TP 8
\fB-V \fInkeys\fB\fR 
Generate server parametas \fBMV\fR n' \fB\fInkeys\fB\fR client keys fo' tha Mu-Varadharajan (MV) identitizzle scheme. Note: support fo' dis option should be considered a work up in progress. 
.RE

.SH RANDOM SEED FILE

All cryptographically sound key generation schemes must have means ta randomize tha entropy seed used ta initialize tha internal pseudo-random number generator used by tha OpenSSL library routines. If a joint supports \fBssh\fR, it is straight-up likely dat means ta do dis is already available. Da entropy seed used by tha OpenSSL library is contained up in a gangbangin' file, probably called \fB\[char46]rnd\fR, which must be available when startin tha \fBntp-keygen\fR program or \fBntpd\fR daemon.

Da OpenSSL library looks fo' tha file rockin tha path specified by tha \fBRANDFILE\fR environment variable up in tha user home directory, whether root or some other user n' shit. If tha \fBRANDFILE\fR environment variable aint present, tha library looks fo' tha \fB\[char46]rnd\fR file up in tha user home directory. Right back up in yo muthafuckin ass. Since both tha \fBntp-keygen\fR program n' \fBntpd\fR daemon must run as root, tha logical place ta put dis file is up in \fB/.rnd\fR or \fB/root/.rnd\fR\[char46] If tha file aint available or cannot be written, tha program exits wit a message ta tha system log.

.SH CRYPTOGRAPHIC DATA FILES

File n' link names is up in tha form \fBntpkey_\fIkey\fB_\fIname\fB\[char46]\fIfstamp\fB\fR, where \fB\fIkey\fB\fR is tha key or parameta type, \fB\fIname\fB\fR is tha host or crew name n' \fB\fIfstamp\fB\fR is tha filestamp (NTP seconds) when tha file was pimped). By convention, key fieldz up in generated file names include both upper n' lower case alphanumeric characters, while key fieldz up in generated link names include only lower case characters. Da filestamp aint used up in generated link names.

Da key type be a strang definin tha cryptographic function. I aint talkin' bout chicken n' gravy biatch. Key types include public/private keys \fBhost\fR n' \fBsign\fR, certificate \fBcert\fR n' nuff muthafuckin challenge/response key types. By convention, filez used fo' challenges gotz a \fBpar\fR subtype, as up in tha IFF challenge \fBIFFpar\fR, while filez fo' responses gotz a \fBkey\fR subtype, as up in tha GQ response \fBGQkey\fR\[char46]

All filez begin wit two nonencrypted lines. Da first line gotz nuff tha file name up in tha format \fBntpkey_\fIkey\fB_\fIhost\fB\[char46]\fIfstamp\fB\fR\[char46] Da second line gotz nuff tha datestamp up in conventionizzle Unix \fBdate\fR format. Lines beginnin wit \fB#\fR is ignored.

Da remainder of tha file gotz nuff cryptographic data encoded first rockin ASN.1 rules, then encrypted rockin tha cipher selected wit \fB-C\fR n' given password n' finally freestyled up in PEM-encoded printable ASCII text preceded n' followed by MIME content identifier lines.

Da format of tha symmetric keys file is somewhat different than tha other filez up in tha interest of backward compatibility. Right back up in yo muthafuckin ass. Since DES-CBC is deprecated up in NTPv4, tha only key format of interest is MD5 alphanumeric strings. Peepin tha header tha keys is entered one per line up in tha format

\fI\fBkeyno type key\fI\fR

where \fI\fBkeyno\fI\fR be a positizzle integer up in tha range 1-65,535, \fI\fBtype\fI\fR is tha strang \fBMD5\fR definin tha key format n' \fI\fBkey\fI\fR is tha key itself, which be a printable ASCII strang 16 charactas or less up in length. Each characta is chosen from tha 93 printable charactas up in tha range 0x21 all up in 0x7f excludin space n' tha '#' character.

Note dat tha keys used by tha \fBntpq\fR n' \fBntpdc\fR programs is checked against passwordz axed by tha programs n' entered by hand, so it is generally appropriate ta specify these keys up in human readable ASCII format.

Da \fBntp-keygen\fR program generates a MD5 symmetric keys file \fBntpkey_MD5key_\fIhostname.filestamp\fB\fR\[char46] Since tha file gotz nuff private shared keys, it should be visible only ta root n' distributed by secure means ta other subnet hosts, n' you can put dat on yo' toast. Da NTP daemon loadz tha file \fBntp.keys\fR, so \fBntp-keygen\fR installs a soft link from dis name ta tha generated file. Right back up in yo muthafuckin ass. Subsequently, similar soft links must be installed by manual or automated means on tha other subnet hosts, n' you can put dat on yo' toast. While dis file aint used wit tha Autokey Version 2 protocol, it is needed ta authenticate some remote configuration commandz used by tha \fBntpq\fR n' \fBntpdc\fR utilities.

.SH BUGS

It can take like a while ta generate some cryptographic joints, from one ta nuff muthafuckin minutes wit modern architectures like fuckin UltraSPARC n' up ta tenz of minutes ta a minute wit olda architectures like fuckin SPARC IPC.

.SH SEE ALSO

ntpd(8), ntp_auth(5)

Da straight-up legit HTML documentation.

This file was automatically generated from HTML source.

