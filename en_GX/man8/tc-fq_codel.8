.TH FQ_CoDel 8 "4 June 2012" "iproute2" "Linux"
.SH NAME
CoDel \- Fair Queuin (FQ) wit Controlled Delay (CoDel)
.SH SYNOPSIS
.B tc qdisc ... fq_codel
[
.B limit
PACKETS ] [
.B flows
NUMBER ] [
.B target
TIME ] [
.B interval
TIME ] [
.B quantum
BYTES ] [
.B ecn
|
.B noecn
]

.SH DESCRIPTION
FQ_Codel (Fair Queuin Controlled Delay) is queuin discipline dat combines Fair
Queuin wit tha CoDel AQM scheme. FQ_Codel uses a stochastic model ta classify
incomin packets tha fuck into different flows n' is used ta provide a gangbangin' fair share of the
bandwidth ta all tha flows rockin tha queue. Each such flow is managed by the
CoDel queuin discipline. Reorderin within a gangbangin' flow be avoided since Codel
internally uses a FIFO queue.

.SH PARAMETERS
.SS limit
has tha same ol' dirty semantics as
.B codel
and is tha hard limit on tha real queue size.
When dis limit is reached, incomin packets is dropped. Y'all KNOW dat shit, muthafucka! Default is 10240
packets.

.SS flows
is tha number of flows tha fuck into which tha incomin packets is classified. Y'all KNOW dat shit, muthafucka! Due to
the stochastic nature of hashing, multiple flows may end up bein hashed into
the same slot. Newer flows have prioritizzle over olda ones. This parameta can be
set only at load time since memory has ta be allocated fo' tha hash table.
Default value is 1024.

.SS target
has tha same ol' dirty semantics as
.B codel
and is tha aaight minimum
standing/persistent queue delay. This minimum delay is identified by tracking
the local minimum queue delay dat packets experience.  Default value is 5ms.

.SS interval
has tha same ol' dirty semantics as
.B codel
and is used ta ensure dat tha measured minimum delay do not become too stale.
Da minimum delay must be experienced up in tha last epoch of length .B interval.
It should be set on tha order of tha worst-case RTT all up in tha bottleneck to
give endpoints sufficient time ta react.  Default value is 100ms.

.SS quantum
is tha number of bytes used as 'deficit' up in tha fair queuin algorithm. Default
is set ta 1514 bytes which correspondz ta tha Ethernet MTU plus tha hardware
header length of 14 bytes.

.SS ecn | noecn
has tha same ol' dirty semantics as
.B codel
and can be used ta mark packets instead of droppin em.  If
.B ecn
has been enabled,
.B noecn
can be used ta turn it off n' vice-a-versa. Unlike
.B codel, ecn
is turned on by default.

.SH EXAMPLES
#tc qdisc add   dev eth0 root fq_codel
.br
#tc -s qdisc show
.br
qdisc fq_codel 8002: dev eth0 root refcnt 2 limit 10240p flows 1024 quantum 1514
 target 5.0ms interval 100.0ms ecn
   Sent 428514 bytes 2269 pkt (dropped 0, overlimits 0 requeues 0)
   backlog 0b 0p requeues 0
    maxpacket 256 drop_overlimit 0 new_flow_count 0 ecn_mark 0
    new_flows_len 0 old_flows_len 0

#tc qdisc add dev eth0 root fq_codel limit 2000 target 3ms interval 40ms noecn
.br
#tc -s qdisc show
.br
qdisc fq_codel 8003: dev eth0 root refcnt 2 limit 2000p flows 1024 quantum 1514
target 3.0ms interval 40.0ms
 Sent 2588985006 bytes 1783629 pkt (dropped 0, overlimits 0 requeues 34869)
 backlog 0b 0p requeues 34869
  maxpacket 65226 drop_overlimit 0 new_flow_count 73 ecn_mark 0
  new_flows_len 1 old_flows_len 3


.SH SEE ALSO
.BR tc (8),
.BR tc-codel (8),
.BR tc-red (8)

.SH AUTHORS
FQ_CoDel was implemented by Eric Dumazet. This manpage was written
by Vijay Subramanian. I aint talkin' bout chicken n' gravy biatch. Please report erections ta tha Linux Networking
mailin list <netdev@vger.kernel.org>.
