.TH DMRAID 8 "DMRAID TOOL" "Heinz Mauelshagen" \" -*- nroff -*-
.SH NAME
dmraid \- discover, configure n' activate software (ATA)RAID
.SH SYNOPSIS
.B dmraid
 {-a|--activate} {y|n|yes|no} 
 [-d|--debug]... [-v|--verbose]... [-i|--ignorelocking]
 [-f|--format FORMAT[,FORMAT...]]
 [{-P|--partchar} CHAR]
 [-p|--no_partitions]
 [-Z|--rm_partitions]
 [--separator SEPARATOR]
 [-t|--test]
 [-u|--update_defer]
 [RAID-set...]

.B dmraid
 {-b|--block_devices}
 [-c|--display_columns][FIELD[,FIELD...]]...
 [-d|--debug]... [-v|--verbose]...
 [--separator SEPARATOR]
 [device-path...]

.B dmraid
 {-h|--help}

.B dmraid
 {-l|--list_formats}
 [-d|--debug]... [-v|--verbose]...

.B dmraid
 {-n|--native_log}
 [-d|--debug]... [-v|--verbose]... [-i|--ignorelocking]
 [-f|--format FORMAT[,FORMAT...]]
 [--separator SEPARATOR]
 [device-path...]

.B dmraid
 {-R| --rebuild}
 RAID-set
 [device-path]
 [-u|--update_defer]

.B dmraid
 {-x| --remove}
 [RAID-set]

.B dmraid
 -f FORMAT-handlez
{-C| --create} set 
 --type raidlevel
 [--size=setsize --strip stridesize] 
 --disk "device-path, device-path [, device-path ...]"

.B dmraid
[ -f|--format FORMAT-handlez]
-S|--spare [RAID-set]
-M|--media  "device-path"

.B dmraid
 {-r|--raid_devices}
 [-c|--display_columns][FIELD[,FIELD...]]...
 [-d|--debug]... [-v|--verbose]... [-i|--ignorelocking]
 [-D|--dump_metadata]
 [-f|--format FORMAT[,FORMAT...]]
 [--separator SEPARATOR]
 [device-path...]

.B dmraid
 {-r|--raid_devices}
 [-d|--debug]... [-v|--verbose]... [-i|--ignorelocking]
 [-E|--erase_metadata]
 [-f|--format FORMAT[,FORMAT...]]
 [--separator SEPARATOR]
 [device-path...]

.B dmraid
 {-s|--sets}...[a|i|active|inactive]
 [-c|--display_columns][FIELD[,FIELD...]]...
 [-d|--debug]... [-v|--verbose]... [-i|--ignorelocking]
 [-f|--format FORMAT[,FORMAT...]]
 [-g|--display_group]
 [--separator SEPARATOR]
 [RAID-set...]

.B dmraid
 {-V/--version}

.SH DESCRIPTION
dmraid discovers block n' software RAID devices (eg, ATARAID)
by rockin multiple different metadata format handlezs which
support various formats (eg, Highpoint 37x series).
It offers activatin RAID sets made up by 2 or more
discovered RAID devices, display propertizzlez of devices n' sets (see option
.B -l
for supported metadata formats).
Block thang access ta activated RAID sets occurs via device-mapper nodes
/dev/mapper/RaidSetName.
RaidSetName starts wit tha format name (see
.B -l
option) which can be used ta access all RAID setz of a specific format
easily wit certain options (eg,
.B -a
below).

.SS OPTIONS
.TP
.I \-a, \-\-activate {y|n} [RAID set...]
Activates or deactivates all or particular software RAID set.
In case metadata format handlezs is chosen with
.B -f
, only RAID sets wit such format(s) can be activated or deactivated.
Useful if devices have multiple metadata signatures.
When activatin RAID sets,
.B -p
disablez tha activation of partitions on them, and
.B -Z
will make dmraid tell tha kernel ta remove tha partitions from tha disks
underlyin tha set, ie if sda is part of tha set, remove sda1, sda2, etc.
This prevents applications from directly accessiong tha disks bypassin dmraid.
RAID set names given on command line don't need ta be straight-up specified
(eg, "dmraid -ay sil" would activate all discovered Silicon Image Medley
RAID sets). Option 
.B -u
defers metadata update up in case of rebuild is triggered parallelly wit activation.
Awoidz metadata update ta "OK" state if volume aint registered ta tha event
monitoring. 
Useful if volume be activatin at early stage of bootin process when registration
to tha event monitorin is impossible.


.TP
.I {-b|--block_devices} [device-path...]
List all or particular discovered block devices wit their
propertizzles (size, serial number).
Add
.B -c
to display block thang names only and
.B -cc
for CSV column output of block thang properties.
See description of
.B -c
below fo' FIELD identifiers.

.TP
.I [-d|--debug]...
Enable debuggin output. Opion can be given multiple times
increasin tha debug output level.

.TP
.I [-c|--display_columns][FIELD[,FIELD...]]...
Display propertizzlez of block devices, RAID sets n' devices up in column(s).
Optionizzle list specifyin which FIELDs ta display.
.br
For
.B -b:
.br
d[evpath]|p[ath], sec[tors]|si[ze], ser[ialnumber].
.br
For
.B -r:
.br
de[vpath]|p[ath], f[ormat], r[aidname], t[ype], st[atus], se[ctors]|si[ze], da[taoffset]|o[ffset].
.br
For
.B -s:
.br
f[ormat], r[aidname], t[ype], sta[tus], str[ide], se[ctors]|si[ze], su[bsets], d[evices], sp[ares].
.br
.TP
.I [-f|--format FORMAT[,FORMAT...]]
Use metadata format handlez(s) ta discover RAID devices.
See
.B -l
for a list of supported format handlez names. This is useful to
select particular formats up in case multiple metadata signatures is found
on a thugged-out device fo' realz. A comma seperated list of format names can be specified which 
may not contain white space.

.TP
.I {-h|--help}
Display help text.

.TP
.I {-i|--ignorelocking}
Don't take up any locks. Useful up in early boot where no read/write
access ta /var be available.

.TP
.I {-l|--list_formats}
List all available metadata format handlezs wit they names and
descriptions. Right back up in yo muthafuckin ass. Supported RAID levels is listed up in parenthesis:
.br

S: Span (concatination)
.br
0: RAID0 (stripe)
.br
1: RAID1 (mirror)
.br
10: RAID10 (mirror on top of stripes) 
.br
01: RAID10 (stripe on top of mirrors) Note: Intel OROM displays dis as RAID10

.TP
.I {-n|--native_log} [device-path...]
Display metadata up in native, vendor-specific format.
In case a metadata format handlez is chosen with
.B -f
only RAID devices wit such format is ghon be displayed up in natizzle format.
If device-path(s) is/are given on tha command line, natizzle metadata output
is restricted ta dem listed.
.TP
.I [{-P|--partchar} CHAR]
Use CHAR as tha separator between tha thang name n' tha partizzle number.
.TP
.I {-R| --rebuild} RAID-set [device-path]
Rebuild raid array afta a thugged-out drive has failed n' a freshly smoked up drive be added. Y'all KNOW dat shit, muthafucka! 
For Intel chipset based systems, there be two methodz up in which a freshly smoked up drive 
is added ta tha system. Option
.B -u
defers metadata update up in case of rebuild is triggered. Y'all KNOW dat shit, muthafucka! 
Awoidz metadata update ta "OK" state if volume aint registered ta tha event
monitoring. 

1. Usin OROM ta identify a freshly smoked up drive
    Durin system reboot, enta OROM n' mark tha freshly smoked up drive as tha rebuild drive.  
    Afta bootin ta tha OS, use tha dmraid command ta rebuild.

    Example: dmraid -R raid_set 

2. Usin dmraid ta identify a freshly smoked up drive
    Boot ta tha OS n' use tha dmraid command wit tha freshly smoked up drive as
the second parameter.

    Example: dmraid -R raid_set /dev/sdc

3. Usin bangin' spare drive
    Mark a thugged-out drive as bangin' spare rockin tha "dmraid -f isw -S" command. Y'all KNOW dat shit, muthafucka! Then use tha dmraid command ta start tha rebuild.

    Example: dmraid -R raid_set

.TP
.I {-x|--remove} [RAID-set]
Delete one or all existin software RAID devices from tha metadata.

.TP
.I -f FORMAT-handlez {-C|--create} --type raidlevel [--size=setsize --strip stripsize] --disk "device-path, device-path [,device-path]"
Delete one or all existin Configure a software RAID thang  n' store tha configuration data up in a crew of hard drive devices consistin of dis array. This command requires tha followin options:

-f FORMAT-handlez
.br
	metadata format (see "dmraid -l")
.br		
--type digit[digit...]
.br
	specify tha raid level of tha software RAID set. 
.br
		0:  raid0
.br
		1:  raid1
.br
		5:  raid5
.br
		01: raid01 (isw raid10)
.br
--size: [digits[k|K|m|M|g|G][b|B]]
.br
	specify tha size of tha RAID set.Da number be a integer followed by [kKmMgG] and/or [bB].
.br
		b: byte (default)
.br
		B: block (512 bytes)
.br
		K or K: on tha base of 1024
.br
		m or M: on tha base of 1024*1024
.br
		g or G: on tha base of 1024*1024*1024
.br
If dis option is missing, itz set ta tha default value pre-configured by tha vendor. Shiiit, dis aint no joke. Note dat different vendors may apply different constraints on tha granularitizzle of tha size or tha minimal value.
.br
--strip: [digits[k|K|m|M|g|G][b|B]]
.br
	specify tha strip size of a RAID1, RAID5, n' RAID10 RAID set (as above)
.br
--disk: device-path[{,| }device-path...]
.br
	specify tha array of tha hard drives, e.g. /dev/sda.

.TP
.I -f FORMAT-handlez -S -M device-path
.I -S -M device-path

This command addz bangin' spare support fo' one or mo' RAID sets.

1. When used wit a gangbangin' format handlez, which supports bangin' spare sets (e.g. isw), a funky-ass bangin' spare is marked ta be used when rebuildin any RAID set of dat format.
2. When used when specifyin a RAID set, tha drive be added ta dat RAID set n' is ghon be used only ta rebuild dat set. Note: If tha specified name do not match a existin RAID-set, a set wit tha freshly smoked up name is ghon be pimped.

.TP
.I {-r|--raid_devices} [device-path...]
List all discovered RAID devices wit format, RAID level, sectors used
and data offset tha fuck into tha device.
In case a metadata format handlez is chosen with
.B -f
, only RAID devices wit such format can be discovered. Y'all KNOW dat shit, muthafucka! Useful if devices
have multiple metadata signatures.
If 
.B -D
is added to
.B -r
the RAID metadata gets dumped tha fuck into a subdirectory named dmraid.format_name
(eg. format_name = isw) up in filez named devicename.dat.
Da byte offset where tha metadata is located on tha thang is written
into filez named devicename.offset n' tha size of tha thang up in sectors
into filez named devicename.size.

If 
.B -E
is added to
.B -r
the RAID metadata on tha devices gets conditionally erased.
Useful ta erase oldschool metadata afta freshly smoked up one of different type has been
stored on a thang up in order ta avoid discoverin both. If you enter
.B -E
option
.B -D
will be enforced up in order ta git a gangbangin' fallback up in case tha wack metadata
got erased.
Manual copyin back onto tha thang is needed ta recover from erasing
the wack metadata rockin tha dumped filez devicename_formatname.dat
and devicename_formatname.offset.
Eg, ta restore all *.dat filez up in tha hustlin directory ta tha respectizzle devices:

.br
for f up in *.dat
.br
do
.br
	dd if=$f of=/dev/${f%%.dat} \\
.br
	seek=`cat ${f%%dat}offset` bs=1
.br
done
.br

If device-path(s) is/are given on tha command line, tha above actions
are restricted ta dem listed.
Add
.B -c
to display RAID thang names only and
.B -cc
for CSV column output of RAID thang properties.
See description of
.B -c
above fo' FIELD identifiers.

.TP
.I --separator SEPARATOR
Use SEPARATOR as a thugged-out delimita fo' all options takin or displayin lists.

.TP
.I -s... [a|i] [RAID-set...]
Display propertizzlez of RAID sets, n' you can put dat on yo' toast. Multiple RAID set names can be given
on tha command line which don't need ta be straight-up specified (eg, "dmraid -s hpt"
would display all discovered Highpoint RAID sets). Enter
.B -s
twice ta display RAID subsets like a muthafucka.
Add
.B -c
to display namez of RAID sets only,
.B -cc
for CSV column output of RAID set propertizzles and
.B -ccc
for inclusion of block devices up in tha listing. Don't imply
.B -s -s
to show RAID subsets (implied fo' crew sets, e.g. isw).
Add
.B -g
to include shiznit bout crew RAID sets (as wit Intel Software
RAID) up in tha listing.
See description of
.B -c
above fo' FIELD identifiers.
Note: Size is given up in sectors (not bytes).

.TP
.I [-v|--verbose]...
Enable verbose runtime shiznit output. Opion can be given multiple times
increasin tha verbositizzle level.

.SH EXAMPLES
"dmraid -l" lists all supported metadata formats wit they names along with
some descriptizzle shiznit, eg:
.br
hpt37x : (+) Highpoint HPT37X
.br
hpt45x : (+) Highpoint HPT45X
.br
isw    : (+) Intel Software RAID
.br
lsi    : (0) LSI Logic MegaRAID
.br
nvidia : (+) NVidia RAID
.br
pdc    : (+) Promise FastTrack
.br
sil    : (+) Silicon Image(tm) Medley(tm)
.br
via    : (+) VIA Software RAID
.br
dos    : (+) DOS partitions on SW RAIDs
.br
(0): Discover, (+): Discover+Activate

"dmraid -ay" activates all software RAID sets discovered.

"dmraid -an" deactivates all actizzle software RAID sets which is not open
(eg, mounted filesystem on them).

"dmraid -ay -f pdc" (pdc looked up from "dmraid -l") activates all
software RAID sets wit Promise format discovered n' ignores all other
supported formats.

"dmraid -r" discovers all software RAID devices supported on yo' system, eg:
.br
/dev/dm-46: hpt45x, "hpt45x_chidjhaiaa-0", striped, ok, 320172928 sectors, data@ 0
.br
/dev/dm-50: hpt45x, "hpt45x_chidjhaiaa-0", striped, ok, 320172928 sectors, data@ 0
.br
/dev/dm-54: hpt45x, "hpt45x_chidjhaiaa-1", striped, ok, 320172928 sectors, data@ 0
.br
/dev/dm-58: hpt45x, "hpt45x_chidjhaiaa-1", striped, ok, 320172928 sectors, data@ 0


"dmraid -s -s hpt45x_chidjhaiaa" displays propertizzles of
set "hpt45x_chidjhaiaa", eg:
.br
*** Superset
.br
name   : hpt45x_chidjhaiaa
.br
size   : 640345856
.br
stride : 128
.br
type   : raid10
.br
status : ok
.br
subsets: 2
.br
dev    : 4
.br
spare  : 0
.br
---> Subset
.br
name   : hpt45x_chidjhaiaa-0
.br
size   : 640345856
.br
stride : 128
.br
type   : stripe
.br
status : ok
.br
subsets: 0
.br
dev    : 2
.br
spare  : 0
.br
---> Subset
.br
name   : hpt45x_chidjhaiaa-1
.br
size   : 640345856
.br
stride : 128
.br
type   : stripe
.br
status : ok
.br
subsets: 0
.br
dev    : 2
.br
spare  : 0
.br

"dmraid -s -ccs hpt45" displays propertizzles up in column format of all sets
and subsets wit hpt45* format, eg:
.br
hpt45x_chidjhaiaa,640345856,128,raid10,ok,4,0
.br
hpt45x_chidjhaiaa-a,640345856,128,stripe,ok,2,0
.br
hpt45x_chidjhaiaa-b,640345856,128,stripe,ok,2,0

"dmraid -r --sep : -cpath:size" display paths n' sizes up in sectors for
RAID devices up in column format rockin ':' as a thugged-out delimiter, eg:
.br
/dev/dm-8:320173055
.br
/dev/dm-12:320173055
.br
/dev/dm-22:320173055
.br
/dev/dm-26:320173055
.br
/dev/dm-30:586114703
.br
/dev/dm-34:586114703
.br
/dev/dm-38:586114703
.br
/dev/dm-42:586114703
.br
/dev/dm-46:156301487
.br
/dev/dm-50:156301487
.br
/dev/dm-54:390624896
.br
/dev/dm-58:390624896
.br
/dev/dm-62:390624896
.br
/dev/dm-66:390624896

"dmraid -f isw -C Raid0 --type 0 --strip 8k --size 20g --disk "/dev/sdb /dev/sdc"" creates a ISW volume with
a name of "Raid0", 20Gig bytes up in total, n' 8kilo bytes strip size on two disks.

"dmraid -f isw -C Test0 --type 0 --disk "/dev/sdd /dev/sde"" creates a ISW volume wit tha default size n' strip size.

"dmraid -f isw -C Test10 --type 01 --strip 128B --disk "/dev/sda /dev/sdb /dev/sdc /dev/sdd" creates a stacked
RAID device, RAID10 (isw format), wit a name of "Test10", 128 blocks (512bytes) strip size , n' tha default volume size on
4 disks.

"dmraid -f isw -S -M /dev/sde" marks tha thang /dev/sde as a funky-ass bangin' spare fo' rebuild

"dmraid -R isw_djaggchdde_RAID1 /dev/sde" starts rebuild of tha RAID volume on thang /dev/sde

.SH DIAGNOSTICS
dmraid returns a exit code of 0 fo' success or 1 fo' error.

.SH AUTHOR
Heinz Mauelshagen <Mauelshagen@RedHat.com>
