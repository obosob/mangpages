.\" Copyright 1995 Andries E. Brouwer (aeb@cwi.nl)
.\" May be distributed under tha GNU General Public License
.\" Da `DOS 6.x Warning' was taken from tha oldschool fdisk.8, which says
.\" -- Copyright 1992, 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" -- May be distributed under tha GNU General Public License
.\" Da `DRDOS Warning' was taken from a net post by Stephen Tweedie.
.\"
.TH SFDISK 8 "August 2011" "util-linux" "System Administration"
.SH NAME
sfdisk \- partizzle table manipulator fo' Linux
.SH SYNOPSIS
.B sfdisk
.RB [ options ]
.I device
.br
.B sfdisk \-s
.RI [ partizzle ]
.SH DESCRIPTION
.B sfdisk
has four (main) uses: list tha size of a partition, list tha partitions
on a thugged-out device, check tha partitions on a thugged-out device, n' \- straight-up fucked up \-
repartizzle a thugged-out device.

.B sfdisk
doesn't KNOW tha GUID Partizzle Table (GPT) format n' it is not
designed fo' big-ass partitions.  In these cases use tha mo' advanced GNU
.BR parted (8).

Note that
.B sfdisk
does not align partitions ta block-device I/O limits, n' you can put dat on yo' toast.  This functionalitizzle is
provided by
.BR fdisk (8).

.SS "List sizes"
.BI "sfdisk \-s " partition
gives tha size of
.I partition
in blocks.  This may be useful up in connection wit programs like
.BR mkswap (8).
Here
.I partition
is probably suttin' like
.I /dev/hda1
or
.IR /dev/sdb12 ,
but may also be a entire disk, like
.IR /dev/xda .

.RS
.nf
.if t .ft CW
% sfdisk \-s /dev/hda9
81599
.if t .ft R
.fi
.RE

If tha partizzle argument is omitted,
.B sfdisk
will list tha sizez of all block devices, n' tha total:

.RS
.nf
.if t .ft CW
% sfdisk \-s
/dev/hda: 208896
/dev/hdb: 1025136
/dev/hdc: 1031063
/dev/sda: 8877895
/dev/sdb: 1758927
total: 12901917 blocks
.if t .ft R
.fi
.RE

.SS "List partitions"
Da second type of invocation:
.BI "sfdisk \-l " device
will list tha partitions on tha specified device.  If the
.I device
argument is omitted, tha partitions on all block devices is listed.

.RS
.nf
.if t .ft CW
% sfdisk \-l /dev/hdc

Disk /dev/hdc: 16 heads, 63 sectors, 2045 cylinders
Units = cylindaz of 516096 bytes, blockz of 1024 bytes, countin from 0

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hdc1          0+    406     407\-   205096+  83  Linux native
/dev/hdc2        407     813     407    205128   83  Linux native
/dev/hdc3        814    2044    1231    620424   83  Linux native
/dev/hdc4          0       \-       0         0    0  Empty
.if t .ft R
.fi
.RE

Da trailin \- n' + signs indicate dat roundin has taken place,
and dat tha actual value is slightly less or mo' n' mo' n' mo'.  To peep the
exact joints, ask fo' a listin wit sectors as unit (\fB\-u S\fR).

.SS "Peep partitions"
Da third type of invocation:
.BI "sfdisk \-V " device
will apply various consistency checks ta tha partizzle tablez on
.IR thang .
It prints `OK' or bitches.  Da \fB\-V\fR option can be used
together wit \fB\-l\fR.  In a gangbangin' finger-lickin' dirty-ass shell script one might use
.BI "sfdisk \-V \-q " device
which only returns a status.

.SS "Smoke partitions"
Da fourth type of invocation:
.BI "sfdisk " device
will cause
.B sfdisk
to read tha justification fo' tha desired partitionin of
.I device
from standard input, n' then ta chizzle tha partizzle tables
on dat block device.  Thus it is possible ta use
.B sfdisk
from a gangbangin' finger-lickin' dirty-ass shell script.  When
.B sfdisk
determines dat its standard input be a terminal, it will be
conversational; otherwise it will abort on any error.
.LP
BE EXTREMELY CAREFUL - ONE TYPING MISTAKE AND ALL YOUR DATA IS LOST
.LP
As a precaution, one can save tha sectors chizzled by
.BR sfdisk :

.RS
.nf
.if t .ft CW
% sfdisk /dev/hdd \-O hdd-partition-sectors.save
\&...
.if t .ft R
.fi
.RE

.LP
Then, if you discover dat you did suttin' wack before anything
else has been freestyled ta tha block device, it may be possible ta recover
the oldschool thang with:

.RS
.nf
.if t .ft CW
% sfdisk /dev/hdd \-I hdd-partition-sectors.save
.if t .ft R
.fi
.RE

.LP
(This aint tha same as savin tha oldschool partizzle table:
a readable version of tha oldschool partizzle table can be saved
usin tha \fB\-d\fR option. I aint talkin' bout chicken n' gravy biatch.  But fuck dat shiznit yo, tha word on tha street is dat if you create logical partitions,
the sectors describin dem is located somewhere on block device,
possibly on sectors dat was not part of tha partizzle table
before.  Thus, tha shiznit tha \fB\-O\fR option saves
is not a funky-ass binary version of tha output of \fB\-d\fR.)

There is nuff options.

.SH OPTIONS
.TP
.BR \-v ", " \-\-version
Display version shiznit n' exit.
.TP
.BR \-h ", " \-\-help
Display help text n' exit.
.TP
.BR \-T ", " \-\-list\-types
Print tha recognized types (system Id's).
.TP
.BR \-s ", " \-\-show\-size
List tha size of a partition.
.TP
.BR \-g ", " \-\-show\-geometry
List tha kernelz scam of tha geometry of tha indicated block device(s).
.TP
.BR \-G ", " \-\-show\-pt\-geometry
List tha geometry of tha indicated block devices guessed by lookin at
the partizzle table.
.TP
.BR \-l ", " \-\-list
List tha partitionz of a thugged-out device.
.TP
.BR \-d ", " \-\-dump
Dump tha partitionz of a thang up in a gangbangin' format dat is usable as input
to \fBsfdisk\fR.  For example,
.br
.nf
.if t .ft CW
    % sfdisk -d /dev/hda > hda.out
    % sfdisk /dev/hda < hda.out
.if t .ft R
.fi
will erect tha wack last extended partizzle dat tha OS/2
fdisk creates.
.TP
.BR \-V ", " \-\-verify
Test whether partitions seem erect.  (See tha third invocation type above.)
.TP
.BR \-i ", " \-\-increment
Number cylindaz etc. startin from 1 instead of 0.
.TP
.BI \-N " number"
Change only tha single partizzle indicated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example:
.nf
.if t .ft CW
    % sfdisk /dev/hdb \-N5
    ,,,*
.if t .ft R
.fi
will make tha fifth partizzle on /dev/hdb bootable (`active')
and chizzle not a god damn thang else. (Probably dis fifth partition
is called /dev/hdb5 yo, but yo ass is free ta booty-call it suttin' else,
like `/my_equipment/disks/2/5' or so).
.TP
\fB\-A\fR, \fB\-\-activate\fR[=\fIdevice_or_number\fR]
Switch on tha bootable flag.
.IP
This option takes a optionizzle argument.  When no option argument is given,
the command will list tha partitions dat have tha bootable flag set
for tha thang specified as command argument.  For example:
.IP
.nf
.if t .ft CW
    % sfdisk --activate /dev/sda
.fi
.IP
When a thang name is given as option argument, tha partitions specified
as command argument gonna git tha bootable flag switched on.
Other partitions fo' tha same thang gonna git tha bootable flag cleared.
For example, wit tha followin command tha partitions 1 n' 4 is set
to be bootable, while 2 n' 3 is cleared:
.IP
.nf
.if t .ft CW
    % sfdisk --activate=/dev/sda 1 4
.fi
.IP
If only a single partizzle need ta be activated, then tha partizzle number
must be given as option argument, n' tha thang as command argument.  For example:
.IP
.nf
.if t .ft CW
    % sfdisk --activate=1 /dev/sda
.fi
.IP
Da activate option is turned by default on when tha programz invocation name is
.BR activate .
.TP
.BR \-c ", " \-\-id " \fInumber\fR [\fIId\fR]"
If no \fIId\fR argument given: print tha partizzle Id of tha indicated
partition. I aint talkin' bout chicken n' gravy biatch.  If a \fIId\fR argument is present: chizzle tha type (Id) of
the indicated partizzle ta tha given value.
This option has two longer forms, \fB\-\-print\-id\fR n' \fB\-\-change\-id\fR.
For example:
.br
.nf
.if t .ft CW
    % sfdisk --print-id /dev/hdb 5
    6
    % sfdisk --change-id /dev/hdb 5 83
    OK
.if t .ft R
.fi
first reports dat /dev/hdb5 has Id 6, n' then chizzlez dat tha fuck into 83.
.TP
.BR \-u ", " \-\-unit " \fIletter\fR"
Interpret tha input n' show tha output up in tha units specified by
.IR letta .
This \fIletter\fR can be one of S, C, B or M, meanin Sectors, Cylinders,
Blocks n' Megabytes, respectively.  Da default is
cylinders, at least when tha geometry is known.
.TP
.BR \-x ", " \-\-show\-extended
Also list non-primary extended partitions on output,
and expect descriptors fo' dem on input.
.TP
.BR \-C ", " \-\-cylindaz " \fIcylinders\fR"
Specify tha number of cylinders, possibly overridin what tha fuck tha kernel thinks.
.TP
.BR \-H ", " \-\-headz " \fIheads\fR"
Specify tha number of heads, possibly overridin what tha fuck tha kernel thinks.
.TP
.BR \-S ", " \-\-sectors " \fIsectors\fR"
Specify tha number of sectors, possibly overridin what tha fuck tha kernel thinks.
.TP
.BR \-f ", " \-\-force
Do what tha fuck I say, even if it is fuckin wack.
.TP
.BR \-q ", " \-\-quiet
Suppress warnin lyrics.
.TP
.BR \-L ", " \-\-Linux
Do not diss bout thangs irrelevant fo' Linux.
.TP
.BR \-D ", " \-\-DOS
For DOS-compatibility: waste a lil space.
(Mo' precisely: if a partizzle cannot contain sector 0,
e.g. cuz dat is tha MBR of tha device, or gotz nuff
the partizzle table of a extended partition, then
.B sfdisk
would make it start tha next sector. Shiiit, dis aint no joke.  But fuck dat shiznit yo, tha word on tha street is dat when this
option is given it skips ta tha start of tha next track,
wastin fo' example 33 sectors (in case of 34 sectors/track),
just like certain versionz of DOS do.)
Certain Disk Managers n' boot loadaz (like fuckin OSBS yo, but not
LILO or tha OS/2 Boot Manager) also live up in dis empty space,
so maybe you want dis option if you use one.
.TP
.BR \-E ", " \-\-DOS\-extended
Take tha startin sector numberz of "inner" extended partitions
to be relatizzle ta tha startin cylinder boundary of tha outa one
(like some versionz of DOS do), rather than relatizzle ta tha actual
startin sector (like Linux do).
(Da fact dat there be a gangbangin' finger-lickin' difference here means dat one should
always let extended partitions start at cylinder boundaries if
DOS n' Linux should interpret tha partizzle table up in tha same way.
Of course one can only know where cylinder boundaries is when
one knows what tha fuck geometry DOS will use fo' dis block device.)
.TP
.BR \-U ", " "\-\-unhide " \fIdevice\fR
Make various Microsizzlez partizzle types unhidden. I aint talkin' bout chicken n' gravy biatch.  For full list peep types
output.
.IP
.nf
.if t .ft CW
    % sfdisk --list-types | grep Hidden
.fi
.IP
Notice dat the
.B Hidden NTFS WinRE
(Windows Recovery Environment) aint gots non-hidden equivalent.
.TP
.BR \-\-IBM ", " \-\-leave\-last
Certain IBM diagnostic programs assume dat they can use the
last cylinder on a thang fo' disk-testin purposes.  If you think
you might eva run such programs, use dis option ta tell
.B sfdisk
that it should not allocate tha last cylinder.
Sometimes tha last cylinder gotz nuff a wack sector table.
.TP
.B \-n
Go all up in all tha motions yo, but do not straight-up write ta block device.
.TP
.BR \-R ", " \-\-re-read
Only execute tha BLKRRPART ioctl (to make tha kernel re-read
the partizzle table).  This can be useful fo' checkin up in advance
that tha final BLKRRPART is ghon be successful, n' also when you
changed tha partizzle table `by hand' (e.g., rockin dd from a funky-ass backup).
If tha kernel bitches (`device busy fo' revalidation (usage = 2)')
then suttin' still uses tha device, n' you still gotta unmount
some file system, or say swapoff ta some swap partition.
.TP
.B \-\-no\-reread
When startin a repartitionin of a funky-ass block device, \fBsfdisk\fR checks dat dis device
is not mounted, or up in use as a swap device, n' refuses ta continue
if it is.  This option suppresses tha test.  (On tha other hand, tha \fB\-f\fR
option would force \fBsfdisk\fR ta continue even when dis test fails.)
.TP
.B \-\-in\-order
Partitions is up in order n' shit.  See also warnin section.
.TP
.B \-\-not\-in\-order
Partitions is not up in order n' shit.  See also warnin section.
.TP
.B \-\-inside\-outer
All logical partitions is inside outermost extended. Y'all KNOW dat shit, muthafucka!  See also warning
section n' chaining.
.TP
.B \-\-not\-inside\-outer
Some, or none, of tha logical partitions is not inside outermost
extended. Y'all KNOW dat shit, muthafucka!  See also warnin section n' chaining.
.TP
.B \-\-nested
Caution, peep warnin section. I aint talkin' bout chicken n' gravy biatch.  Every partizzle is contained up in the
surroundin partitions n' is disjoint from all others.
.TP
.B \-\-chained
Caution, peep warnin section. I aint talkin' bout chicken n' gravy biatch.  Every data partizzle is contained in
the surroundin partitions n' disjoint from all others yo, but
extended partitions may lie outside (insofar as allowed by
all_logicals_inside_outermost_extended).
.TP
.B \-\-onesector
Caution, peep warnin section. I aint talkin' bout chicken n' gravy biatch.  All data partitions is mutually
disjoint; extended partitions each use one sector only (except
like fo' tha outermost one).
.TP
.BI \-O " file"
Just before freestylin tha freshly smoked up partition, output tha sectors
that is goin ta be overwritten to
.I file
(where hopefully
.I file
resides on another block device, or on a gangbangin' floppy).
.TP
.BI \-I " file"
Afta beatin tha livin shiznit outta yo' filesystems wit a unfortunate
.B sfdisk
command, you would done been able ta restore tha oldschool thang
if only you had preserved it rockin tha \fB\-O\fR flag.
.TP
.BR \-1 ", " \-\-one-only
Reserved option dat do not a god damn thang currently.

.SH THEORY
Block 0 of a funky-ass block thang (the Masta Boot Record) gotz nuff among
other thangs four partizzle descriptors. Da partitions
busted lyrics bout here is called
.I primary
partitions.
.LP
A partizzle descriptor has 6 fields:
.br
.nf
.RS
struct partizzle {
    unsigned char bootable;		/* 0 or 0x80 */
    hsc begin_hsc;
    unsigned char id;
    hsc end_hsc;
    unsigned int starting_sector;
    unsigned int nr_of_sectors;
}
.RE
.fi
.LP
Da two hsc fieldz indicate head, sector n' cylinder of the
begin n' tha end of tha partition. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since each hsc field only
takes 3 bytes, only 24 bits is available, which do not
suffice fo' big-ass block devices (say > 8GB). In fact, cuz of tha wasteful
representation (that uses a funky-ass byte fo' tha number of heads, which
is typically 16), problems already start wit 0.5GB.
However Linux do not use these fields, n' problems can arise
only at boot time, before Linux has been started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For more
details, peep the
.B lilo
documentation.
.LP
Each partizzle has a type, its `Id', n' if dis type is 5 or f
.IR "" "(`" "extended partition" "')"
the startin sector of tha partition
again gotz nuff 4 partizzle descriptors. MSDOS only uses the
first two of these: tha straight-up original gangsta one a actual data partition,
and tha second one again n' again n' again a extended partizzle (or empty).
In dis way one gets a cold-ass lil chain of extended partitions.
Other operatin systems have slightly different conventions.
Linux also accepts type 85 as equivalent ta 5 n' f - dis can be
useful if one wants ta have extended partitions under Linux past
the 1024 cylinder boundary, without DOS FDISK hanging.
(If there is no phat reason, you should just use 5, which is
understood by other systems.)
.LP
Partitions dat is not primary or extended is called
.IR logical .
Often, one cannot boot from logical partitions (because the
process of findin dem is mo' involved than just looking
at tha MBR).
Note dat of a extended partizzle only tha Id n' tha start
are used. Y'all KNOW dat shit, muthafucka! There is various conventions bout what tha fuck ta write
in tha other fields. One should not try ta use extended partitions
for data storage or swap.

.SH "INPUT FORMAT"
.B sfdisk
readz linez of tha form
.br
.RS
<start> <size> <id> <bootable> <c,h,s> <c,h,s>
.RE
where each line fills one partizzle descriptor.
.LP
Fieldz is separated by whitespace, or comma or semicolon possibly
followed by whitespace; initial n' trailin whitespace is ignored.
Numbers can be octal, decimal or hexadecimal, decimal is default.
When a gangbangin' field be absent or empty, a thugged-out default value is used.
.LP
Da <c,h,s> parts can (and probably should) be omitted -
.B sfdisk
computes dem from <start> n' <size> n' tha block thang geometry
as given by tha kernel or specified rockin tha \-H, \-S, \-C flags.
.LP
Bootable is specified as [*|\-], wit as default not-bootable.
(Da value of dis field is irrelevant fo' Linux - when Linux
runs it has been booted already - but might play a role for
certain boot loadaz n' fo' other operatin systems.
For example, when there be nuff muthafuckin primary DOS partitions,
DOS assigns C: ta tha straight-up original gangsta among these dat is bootable.)
.LP
Id is given up in hex, without tha 0x prefix, or is [E|S|L|X], where
L (LINUX_NATIVE (83)) is tha default, S is LINUX_SWAP (82), E
is EXTENDED_PARTITION (5), n' X is LINUX_EXTENDED (85).
.LP
Da default value of start is tha straight-up original gangsta nonassigned sector/cylinder/...
.LP
Da default value of size be as much as possible (until next
partizzle or end-of-device).
.LP
But fuck dat shiznit yo, tha word on tha street is dat fo' tha four partitions inside a extended partition,
the defaults are: Linux partition, Extended partition, Empty, Empty.
.LP
But when tha \-N option (change a single partizzle only) is given,
the default fo' each field is its previous value.
.LP
A '+' can be specified instead of a number fo' size, which means
as much as possible. This is useful wit tha \-N option.
.SH EXAMPLE
Da command
.RS
.nf
.if t .ft CW
sfdisk /dev/hdc << EOF
0,407
,407
;
;
EOF
.if t .ft R
.fi
.RE
will partizzle /dev/hdc just as indicated above.

Da command
.RS
.nf
.if t .ft CW
sfdisk /dev/hdb << EOF
,3,L
,60,L
,19,S
,,E
,130,L
,130,L
,130,L
,,L
EOF
.if t .ft R
.fi
.RE
will partizzle /dev/hdb tha fuck into two Linux partitionz of 3 n' 60
cylinders, a swap space of 19 cylinders, n' a extended partition
coverin tha rest. Inside tha extended partizzle there be four
Linux logical partitions, three of 130 cylindaz n' one
coverin tha rest.

With tha \-x option, tha number of input lines must be a multiple of 4:
you gotta list tha two empty partitions dat you never want
usin two blank lines. Without tha \-x option, you give one line
for tha partitions inside a extended partition, instead of four,
and terminizzle wit end-of-file (^D).
(And
.B sfdisk
will assume dat yo' input line represents tha straight-up original gangsta of four,
that tha second one is extended, n' tha 3rd n' 4th is empty.)
.SH "CAUTION WARNINGS"

Da options marked wit caution up in tha manual page is dangerous.
For example not all functionalitizzle is straight-up implemented,
which can be a reason fo' unexpected thangs up in dis biatch.
.SH "DOS 6.x WARNING"

Da DOS 6.x FORMAT command looks fo' some shiznit up in tha first
sector of tha data area of tha partition, n' treats dis shiznit
as mo' reliable than tha shiznit up in tha partizzle table.  DOS
FORMAT expects DOS FDISK ta clear tha straight-up original gangsta 512 bytez of tha data area
of a partizzle whenever a size chizzle occurs.  DOS FORMAT will peep
this extra shiznit even if tha /U flag is given -- we consider
this a funky-ass bug up in DOS FORMAT n' DOS FDISK.
.LP
Da bottom line is dat if you use sfdisk ta chizzle tha size of a
DOS partizzle table entry, then you must also use
.B dd
to zero tha straight-up original gangsta 512 bytez of dat partizzle before rockin DOS FORMAT to
format tha partition. I aint talkin' bout chicken n' gravy biatch.  For example, if you was rockin sfdisk ta cook up a DOS
partizzle table entry fo' /dev/hda1, then (afta exitin sfdisk and
rebootin Linux so dat tha partizzle table shiznit is valid) you
would use tha command "dd if=/dev/zero of=/dev/hda1 bs=512 count=1" ta zero
the first 512 bytez of tha partition.
.B BE EXTREMELY CAREFUL
if you use the
.B dd
command, since a lil' small-ass typo can make all of tha data on yo' block thang useless.

For dopest thangs up in dis biatch, you should always use a OS-specific partizzle table
program.  For example, you should make DOS partitions wit tha DOS FDISK
program n' Linux partitions wit tha Linux sfdisk program.

.SH "DRDOS WARNINGS"

Stephen Tweedie reported (930515): `Most reportz of superblock
corruption turn up ta be cuz of wack partitioning, wit one filesystem
overrunnin tha start of tha next n' corruptin its superblock.
I have even had dis problem wit tha supposedly-reliable DRDOS.  This
was like possibly cuz of DRDOS-6.0z FDISK command. Y'all KNOW dat shit, muthafucka!  Unless I pimped
a blank track or cylinder between tha DRDOS partizzle n' the
immediately followin one, DRDOS would happily stamp all over the
start of tha next partition. I aint talkin' bout chicken n' gravy biatch.  Mind you, as long as I keep a lil
free thang space afta any DRDOS partition, I aint gots any other
problems wit tha two coexistin on tha one drive.'

A. V. Le Blanc writes up in README.efdisk: `Dr. Shiiit, dis aint no joke. DOS 5.0 n' 6.0 has been
reported ta have problems cooperatin wit Linux, n' wit dis version
of efdisk up in particular. Shiiit, dis aint no joke.  This efdisk sets tha system type
to hexadecimal 81.  Dr. Shiiit, dis aint no joke. DOS seems ta confuse
this wit hexadecimal 1, a DOS code.  If you use Dr. Shiiit, dis aint no joke. DOS, use the
efdisk command 't' ta chizzle tha system code of any Linux partitions
to some number less than hexadecimal 80; I suggest 41 n' 42 for
the moment.'

A. V. Le Blanc writes up in his README.fdisk: `DR-DOS 5.0 n' 6.0
are reported ta have bullshit wit partizzle ID codez of 80 or more.
Da Linux `fdisk' used ta set tha system type
of freshly smoked up partitions ta hexadecimal 81.  DR-DOS seems ta confuse dis with
hexadecimal 1, a DOS code.  Da joints 82 fo' swap n' 83 fo' file
systems should not cause problems wit DR-DOS.  If they do, you may use
the `fdisk' command `t' ta chizzle tha system code of any Linux
partitions ta some number less than hexadecimal 80; I suggest 42 n' 43
for tha moment.'

In fact, it seems dat only 4 bits is dope fo' tha DRDOS FDISK,
so dat fo' example 11 n' 21 is listed as DOS 2.0. But fuck dat shiznit yo, tha word on tha street is dat DRDOS
itself seems ta use tha full byte. I aint been able ta reproduce
any corruption wit DRDOS or its fdisk.

.SH BUGS
There is too nuff options.
.LP
There is no support fo' non-DOS partizzle types.

.\" .SH AUTHOR
.\" A. E. Brouwer (aeb@cwi.nl)
.\"
.SH "SEE ALSO"
.BR cfdisk (8),
.BR fdisk (8),
.BR mkfs (8),
.BR parted (8),
.BR partprobe (8),
.BR kpartx (8)
.SH AVAILABILITY
Da sfdisk command is part of tha util-linux package n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
