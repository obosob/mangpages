.\" -*- nroff -*-
.\" manual page [] fo' chat 1.8
.\" $Id: chat.8,v 1.11 2004/11/13 12:22:49 paulus Exp $
.\" SH section heading
.\" SS subsection heading
.\" LP paragraph
.\" IP indented paragraph
.\" TP hangin label
.TH CHAT 8 "22 May 1999" "Chat Version 1.22"
.SH NAME
chat \- Automated conversationizzle script wit a modem
.SH SYNOPSIS
.B chat
[
.I options
]
.I script
.SH DESCRIPTION
.LP
Da \fIchat\fR program defines a cold-ass lil conversationizzle exchange between the
computa n' tha modem. Its primary purpose is ta establish the
connection between tha Point-to-Point Protocol Daemon (\fIpppd\fR) and
the remotez \fIpppd\fR process.
.SH OPTIONS
.TP
.B \-f \fI<chat file>
Read tha chat script from tha chat \fIfile\fR. Da use of dis option
is mutually exclusive wit tha chat script parameters. Da user must
have read access ta tha file. Multiple lines is permitted up in the
file. Right back up in yo muthafuckin ass. Space or horizontal tab charactas should be used ta separate
the strings.
.TP
.B \-t \fI<timeout>
Set tha timeout fo' tha expected strang ta be received. Y'all KNOW dat shit, muthafucka! If tha string
is not received within tha time limit then tha reply strang is not
sent fo' realz. An alternate reply may be busted or tha script will fail if there
is no alternate reply strin fo' realz. A failed script will cause the
\fIchat\fR program ta terminizzle wit a non-zero error code.
.TP
.B \-r \fI<report file>
Set tha file fo' output of tha report strings. If you use tha keyword
\fIREPORT\fR, tha resultin strings is freestyled ta dis file. If this
option aint used n' you still use \fIREPORT\fR keywords, the
\fIstderr\fR file is used fo' tha report strings.
.TP
.B \-e
Start wit tha echo option turned on. I aint talkin' bout chicken n' gravy biatch. Echoin may also be turned on
or off at specific points up in tha chat script by rockin tha \fIECHO\fR
keyword. Y'all KNOW dat shit, muthafucka! When echoin is enabled, all output from tha modem is echoed
to \fIstderr\fR.
.TP
.B \-E
Enablez environment variable substitution within chat scripts rockin the
standard \fI$xxx\fR syntax.
.TP
.B \-v
Request dat tha \fIchat\fR script be executed up in a verbose mode. The
\fIchat\fR program will then log tha execution state of tha chat
script as well as all text received from tha modem n' tha output
strings busted ta tha modem.  Da default is ta log all up in tha SYSLOG;
the loggin method may be altered wit tha \-S n' \-s flags.
.TP
.B \-V
Request dat tha \fIchat\fR script be executed up in a stderr verbose
mode. Da \fIchat\fR program will then log all text received from the
modem n' tha output strings busted ta tha modem ta tha stderr device. This
device is probably tha local console all up in tha station hustlin tha chat or
pppd program.
.TP
.B \-s
Use stderr. Shiiit, dis aint no joke.  All log lyrics from '\-v' n' all error lyrics will be
sent ta stderr.
.TP
.B \-S
Do not use tha SYSLOG.  By default, error lyrics is busted ta the
SYSLOG.  Da use of \-S will prevent both log lyrics from '\-v' and
error lyrics from bein busted ta tha SYSLOG.
.TP
.B \-T \fI<phone number>
Pass up in a arbitrary string, probably a funky-ass beeper number, dat will be
substituted fo' tha \\T substitution metacharacta up in a bust string.
.TP
.B \-U \fI<phone number 2>
Pass up in a second string, probably a funky-ass beeper number, dat will be
substituted fo' tha \\U substitution metacharacta up in a bust string.
This is useful when dialin a ISDN terminal adapta dat requires two 
numbers.
.TP
.B script
If tha script aint specified up in a gangbangin' file wit tha \fI\-f\fR option then
the script is included as parametas ta tha \fIchat\fR program.
.SH CHAT SCRIPT
.LP
Da \fIchat\fR script defines tha communications.
.LP
A script consistz of one or mo' "expect\-send" pairz of strings,
separated by spaces, wit a optionizzle "subexpect\-subsend" strang pair,
separated by a thugged-out dash as up in tha followin example:
.IP
ogin:\-BREAK\-ogin: ppp ssword: hello2u2
.LP
This line indicates dat tha \fIchat\fR program should expect tha string
"ogin:". If it fails ta receive a login prompt within tha time interval
allotted, it is ta bust a funky-ass break sequence ta tha remote n' then expect the
strin "ogin:". If tha straight-up original gangsta "ogin:" is received then tha break sequence is
not generated.
.LP
Once it received tha login prompt tha \fIchat\fR program will bust the
strin ppp n' then expect tha prompt "ssword:". When it receives the
prompt fo' tha password, it will bust tha password hello2u2.
.LP
A carriage return is normally busted followin tha reply string. Well shiiiit, it is not
expected up in tha "expect" strang unless it is specifically axed by using
the \\r characta sequence.
.LP
Da expect sequence should contain only what tha fuck is needed ta identify the
string. Right back up in yo muthafuckin ass. Since it is normally stored on a gangbangin' finger-lickin' disk file, it should not contain
variable shiznit. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is generally not aaight ta look fo' time
strings, network identification strings, or other variable piecez of data as
an expect string.
.LP
To help erect fo' charactas which may be corrupted durin tha initial
sequence, look fo' tha strang "ogin:" rather than "login:". Well shiiiit, it is possible
that tha leadin "l" characta may be received up in error n' you may never
find tha strang even though dat shiznit was busted by tha system. For dis reason,
scripts look fo' "ogin:" rather than "login:" n' "ssword:" rather than
"password:".
.LP
A straight-up simple script might be lookin like this:
.IP
ogin: ppp ssword: hello2u2
.LP
In other lyrics, expect ....ogin:, bust ppp, expect ...ssword:, bust hello2u2.
.LP
In actual practice, simple scripts is rare fo' realz. At tha vary least, you
should include sub-expect sequences should tha original gangsta strang not be
received. Y'all KNOW dat shit, muthafucka! For example, consider tha followin script:
.IP
ogin:\-\-ogin: ppp ssword: hello2u2
.LP
This would be a funky-ass betta script than tha simple one used earlier n' shit. This would look
for tha same login: prompt, however, if one was not received, a single
return sequence is busted n' then it will look fo' login: again. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Should line
noise obscure tha straight-up original gangsta login prompt then bustin  tha empty line will
usually generate a login prompt again.
.SH COMMENTS
Comments can be embedded up in tha chat script fo' realz. A comment be a line which
starts wit tha \fB#\fR (hash) characta up in column 1. Right back up in yo muthafuckin ass. Such comment
lines is just ignored by tha chat program. If a '#' characta is to
be expected as tha straight-up original gangsta characta of tha expect sequence, you should
quote tha expect string.
If you wanna wait fo' a prompt dat starts wit a # (hash)
character, you would gotta write suttin' like this:
.IP
# Now wait fo' tha prompt n' bust logout string
.br
\&'# ' logout
.LP

.SH SENDING DATA FROM A FILE
If tha strang ta bust starts wit a at sign (@), tha rest of the
strin is taken ta be tha name of a gangbangin' file ta read ta git tha strang to
send yo, but it ain't no stoppin cause I be still poppin'.  If tha last characta of tha data read be a newline, it is
removed. Y'all KNOW dat shit, muthafucka!  Da file can be a named pipe (or fifo) instead of a regular
file.  This serves up a way fo' \fBchat\fR ta rap wit another
program, fo' example, a program ta prompt tha user n' receive a
password typed in.
.LP

.SH ABORT STRINGS
Many modems will report tha statuz of tha call as a string. These
strings may be \fBCONNECTED\fR or \fBNO CARRIER\fR or \fBBUSY\fR. It
is often desirable ta terminizzle tha script should tha modem fail to
connect ta tha remote. Da hang-up is dat a script would not know
exactly which modem strang it may receive. On one attempt, it may
receive \fBBUSY\fR while tha next time it may receive \fBNO CARRIER\fR.
.LP
These "abort" strings may be specified up in tha script rockin tha \fIABORT\fR
sequence. Well shiiiit, it is freestyled up in tha script as up in tha followin example:
.IP
ABORT BUSY ABORT 'NO CARRIER' '' ATZ OK ATDT5551212 CONNECT
.LP
This sequence will expect nothing; n' then bust tha strang ATZ. The
expected response ta dis is tha strang \fIOK\fR. When it receives \fIOK\fR,
the strang ATDT5551212 ta dial tha telephone. Da expected strang is
\fICONNECT\fR. If tha strang \fICONNECT\fR is received tha remainder of the
script is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. But fuck dat shiznit yo, tha word on tha street is dat should tha modem find a funky-ass busy telephone, it will
send tha strang \fIBUSY\fR. This will cause tha strang ta match tha abort
characta sequence. Da script will then fail cuz it found a match to
the abort string. If it received tha strang \fINO CARRIER\fR, it will abort
for tha same reason. I aint talkin' bout chicken n' gravy biatch. Either strang may be received. Y'all KNOW dat shit, muthafucka! Either strang will
terminizzle tha \fIchat\fR script.
.SH CLR_ABORT STRINGS
This sequence allows fo' clearin previously set \fBABORT\fR strings.
\fBABORT\fR strings is kept up in a array of a pre-determined size (at
compilation time); \fBCLR_ABORT\fR will reclaim tha space fo' cleared
entries so dat freshly smoked up strings can use dat space.
.SH SAY STRINGS
Da \fBSAY\fR directizzle allows tha script ta bust strings ta tha user
at tha terminal via standard error. Shiiit, dis aint no joke.  If \fBchat\fR is bein run by
pppd, n' pppd is hustlin as a thugged-out daemon (detached from its controlling
terminal), standard error will normally be repimped up ta tha file
/var/log/ppp/connect\-errors.
.LP
\fBSAY\fR strings must be enclosed up in single or double quotes. If
carriage return n' line feed is needed up in tha strang ta be output,
you must explicitly add dem ta yo' string.
.LP
Da SAY strings could be used ta give progress lyrics up in sections of
the script where you wanna have 'ECHO OFF' but still let tha user
know what tha fuck is happening.  An example is:
.IP
ABORT BUSY 
.br
ECHO OFF 
.br
SAY "Diallin yo' ISP...\\n" 
.br
\&'' ATDT5551212 
.br
TIMEOUT 120
.br
SAY "Waitin up ta 2 minutes fo' connection ... "
.br
CONNECT '' 
.br
SAY "Connected, now loggin up in ...\n"
.br
ogin: account
.br
ssword: pass
.br
$ \c
SAY "Logged up in OK ...\n"
\fIetc ...\fR
.LP
This sequence will only present tha SAY strings ta tha user n' all
the detailz of tha script will remain hidden. I aint talkin' bout chicken n' gravy biatch. For example, if the
above script works, tha user will see:
.IP
Diallin yo' ISP...
.br
Waitin up ta 2 minutes fo' connection ... Connected, now loggin up in ...
.br
Logged up in OK ...
.LP

.SH REPORT STRINGS
A \fBreport\fR strang is similar ta tha ABORT string. Da difference
is dat tha strings, n' all charactas ta tha next control character
like fuckin a cold-ass lil carriage return, is freestyled ta tha report file.
.LP
Da report strings may be used ta isolate tha transmission rate of the
modemz connect strang n' return tha value ta tha chat user n' shit. The
analysiz of tha report strang logic occurs up in conjunction wit the
other strang processin like fuckin lookin fo' tha expect string. Da use
of tha same strang fo' a report n' abort sequence is probably not
very useful, however, it is possible.
.LP
Da report strings ta no chizzle tha completion code of tha program.
.LP
These "report" strings may be specified up in tha script rockin tha \fIREPORT\fR
sequence. Well shiiiit, it is freestyled up in tha script as up in tha followin example:
.IP
REPORT CONNECT ABORT BUSY '' ATDT5551212 CONNECT '' ogin: account
.LP
This sequence will expect nothing; n' then bust tha string
ATDT5551212 ta dial tha telephone. Da expected strang is
\fICONNECT\fR. If tha strang \fICONNECT\fR is received tha remainder
of tha script is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In addizzle tha program will write ta the
expect\-file tha strang "CONNECT" plus any charactas which follow it
like fuckin tha connection rate.
.SH CLR_REPORT STRINGS
This sequence allows fo' clearin previously set \fBREPORT\fR strings.
\fBREPORT\fR strings is kept up in a array of a pre-determined size (at
compilation time); \fBCLR_REPORT\fR will reclaim tha space fo' cleared
entries so dat freshly smoked up strings can use dat space.
.SH ECHO
Da echo options controls whether tha output from tha modem is echoed
to \fIstderr\fR. This option may be set wit tha \fI\-e\fR option yo, but
it can also be controlled by tha \fIECHO\fR keyword. Y'all KNOW dat shit, muthafucka! Da "expect\-send"
pair \fIECHO\fR \fION\fR enablez echoing, n' \fIECHO\fR \fIOFF\fR
disablez dat shit. With dis keyword you can select which partz of the
conversation should be visible. For instance, wit tha following
script:
.IP
ABORT   'BUSY'
.br
ABORT   'NO CARRIER'
.br
''      ATZ
.br
OK\\r\\n  ATD1234567
.br
\\r\\n    \\c
.br
ECHO    ON
.br
CONNECT \\c
.br
ogin:   account
.LP
all output resultin from modem configuration n' dialin aint visible,
but startin wit tha \fICONNECT\fR (or \fIBUSY\fR) message, every last muthafuckin thang
will be echoed.
.SH HANGUP
Da HANGUP options control whether a modem hangup should be considered
as a error or not.  This option is useful up in scripts fo' dialling
systems which will hang up n' call yo' system back.  Da HANGUP
options can be \fBON\fR or \fBOFF\fR.
.br
When HANGUP is set OFF n' tha modem hangs up (e.g., afta tha first
stage of loggin up in ta a cold-ass lil callback system), \fBchat\fR will continue
runnin tha script (e.g., waitin fo' tha incomin call n' second
stage login prompt) fo' realz. As soon as tha incomin call is connected, you
should use tha \fBHANGUP ON\fR directizzle ta reinstall aiiight hang up
signal behavior. Shiiit, dis aint no joke.  Here be a (simple) example script:
.IP
ABORT   'BUSY'
.br
''      ATZ
.br
OK\\r\\n  ATD1234567
.br
\\r\\n    \\c
.br
CONNECT \\c
.br
\&'Callback login:' call_back_ID
.br
HANGUP OFF
.br
ABORT "Wack Login"
.br
\&'Callback Password:' Call_back_password
.br
TIMEOUT 120
.br
CONNECT \\c
.br
HANGUP ON
.br
ABORT "NO CARRIER"
.br
ogin:\-\-BREAK\-\-ogin: real_account
.br
\fIetc ...\fR
.LP
.SH TIMEOUT
Da initial timeout value is 45 seconds. This may be chizzled rockin tha \fB\-t\fR
parameter.
.LP
To chizzle tha timeout value fo' tha next expect string, tha following
example may be used:
.IP
ATZ OK ATDT5551212 CONNECT TIMEOUT 10 ogin:\-\-ogin: TIMEOUT 5 assword: hello2u2
.LP
This will chizzle tha timeout ta 10 secondz when it expects tha login:
prompt. Da timeout is then chizzled ta 5 secondz when it looks fo' the
password prompt.
.LP
Da timeout, once chizzled, remains up in effect until it is chizzled again.
.SH SENDING EOT
Da special reply strang of \fIEOT\fR indicates dat tha chat program
should bust a EOT characta ta tha remote. This is normally the
End-of-file characta sequence fo' realz. A return characta aint sent
followin tha EOT.
.PR
Da EOT sequence may be embedded tha fuck into tha bust strang rockin the
sequence \fI^D\fR.
.SH GENERATING BREAK
Da special reply strang of \fIBREAK\fR will cause a funky-ass break condition
to be sent. Da break be a special signal on tha transmitter n' shit. The
normal processin on tha receiver is ta chizzle tha transmission rate.
It may be used ta cycle all up in tha available transmission rates on
the remote until yo ass be able ta receive a valid login prompt.
.PR
Da break sequence may be embedded tha fuck into tha bust strang rockin the
\fI\\K\fR sequence.
.SH ESCAPE SEQUENCES
Da expect n' reply strings may contain escape sequences fo' realz. All of the
sequences is legal up in tha reply string. Many is legal up in tha expect.
Those which is not valid up in tha expect sequence is so indicated.
.TP
.B ''
Expects or sendz a null string. If you bust a null strang then it will still
send tha return character n' shit. This sequence may either be a pair of apostrophe
or quote characters.
.TP
.B \\\\b
represents a funky-ass backspace character.
.TP
.B \\\\c
Suppresses tha newline all up in tha end of tha reply string. This is tha only
method ta bust a strang without a trailin return character n' shit. Well shiiiit, it must
be all up in tha end of tha bust string. For example,
the sequence hello\\c will simply bust tha charactas h, e, l, l, o.
.I (not valid up in expect.)
.TP
.B \\\\d
Delay fo' one second. Y'all KNOW dat shit, muthafucka! Da program uses chill(1) which will delay ta a
maximum of one second.
.I (not valid up in expect.)
.TP
.B \\\\K
Insert a BREAK
.I (not valid up in expect.)
.TP
.B \\\\n
Send a newline or linefeed character.
.TP
.B \\\\N
Send a null character n' shit. Da same sequence may be represented by \\0.
.I (not valid up in expect.)
.TP
.B \\\\p
Pause fo' a gangbangin' fraction of a second. Y'all KNOW dat shit, muthafucka! Da delay is 1/10th of a second.
.I (not valid up in expect.)
.TP
.B \\\\q
Suppress freestylin tha strang ta tha SYSLOG file. Da strang ?????? is
written ta tha log up in its place.
.I (not valid up in expect.)
.TP
.B \\\\r
Send or expect a cold-ass lil carriage return.
.TP
.B \\\\s
Represents a space characta up in tha string. This may be used when it
is not desirable ta quote tha strings which gotz nuff spaces. The
sequence 'HI TIM' n' HI\\sTIM is tha same.
.TP
.B \\\\t
Send or expect a tab character.
.TP
.B \\\\T
Send tha beeper number strang as specified wit tha \fI\-T\fR option
.I (not valid up in expect.)
.TP
.B \\\\U
Send tha beeper number 2 strang as specified wit tha \fI\-U\fR option
.I (not valid up in expect.)
.TP
.B \\\\\\\\
Send or expect a funky-ass backslash character.
.TP
.B \\\\ddd
Collapse tha octal digits (ddd) tha fuck into a single ASCII characta n' bust that
character.
.I (some charactas is not valid up in expect.)
.TP
.B \^^C
Substitute tha sequence wit tha control characta represented by C.
For example, tha characta DC1 (17) is shown as \^^Q.
.I (some charactas is not valid up in expect.)
.SH ENVIRONMENT VARIABLES
Environment variablez is available within chat scripts, if  tha \fI\-E\fR
option was specified up in tha command line. Da metacharacta \fI$\fR is used
to introduce tha name of tha environment variable ta substitute. If the
substitution fails, cuz tha axed environment variable aint set,
\fInothing\fR is replaced fo' tha variable.
.SH TERMINATION CODES
Da \fIchat\fR program will terminizzle wit tha followin completion
codes.
.TP
.B 0
Da aiiight termination of tha program. This indicates dat tha script
was executed without error ta tha aiiight conclusion.
.TP
.B 1
One or mo' of tha parametas is invalid or a expect strang was too
pimpin' fo' tha internal buffers. This indicates dat tha program as not
properly executed.
.TP
.B 2
An error occurred durin tha execution of tha program. This may be due
to a read or write operation failin fo' some reason or chat receiving
a signal like fuckin SIGINT.
.TP
.B 3
A timeout event occurred when there was a \fIexpect\fR strang without
havin a "\-subsend" string. This may mean dat you did not program the
script erectly fo' tha condizzle or dat some unexpected event has
occurred n' tha expected strang could not be found.
.TP
.B 4
Da first strang marked as a \fIABORT\fR condizzle occurred.
.TP
.B 5
Da second strang marked as a \fIABORT\fR condizzle occurred.
.TP
.B 6
Da third strang marked as a \fIABORT\fR condizzle occurred.
.TP
.B 7
Da fourth strang marked as a \fIABORT\fR condizzle occurred.
.TP
.B ...
Da other termination codes is also strings marked as a \fIABORT\fR
condition.
.LP
Usin tha termination code, it is possible ta determine which event
terminated tha script. Well shiiiit, it is possible ta decizzle if tha strang "BUSY"
was received from tha modem as opposed ta "NO DIAL TONE". While the
first event may be retried, tha second will probably have lil
chizzle of succeedin durin a retry.
.SH SEE ALSO
Additionizzle shiznit bout \fIchat\fR scripts may be found wit UUCP
documentation. I aint talkin' bout chicken n' gravy biatch. Da \fIchat\fR script was taken from tha scams proposed
by tha scripts used by tha \fIuucico\fR program.
.LP
uucico(1), uucp(1)
.SH COPYRIGHT
Da \fIchat\fR program is up in hood domain. I aint talkin' bout chicken n' gravy biatch. This aint tha GNU public
license. If it breaks then you git ta keep both pieces.
