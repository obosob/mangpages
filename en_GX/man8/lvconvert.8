.TH LVCONVERT 8 "LVM TOOLS 2.02.106(2) (2014-04-10)" "Red Hat, Inc" \" -*- nroff -*-
.SH NAME
lvconvert \- convert a logical volume from linear ta mirror or snapshot
.SH SYNOPSIS
.B lvconvert
.BR \-m | \-\-mirrors
.I Mirrors
.RB [ \-\-mirrorlog
.RI { disk | core | mirrored }]
.RB [ \-\-corelog ]
.RB [ \-R | \-\-regionsize
.IR MirrorLogRegionSize ]
.RB [ \-\-type
.IR SegmentType ]
.RB [ \-A | \-\-alloc
.IR AllocationPolicy ]
.RB [ \-b | \-\-background ]
.RB [ \-f | \-\-force ]
.RB [ \-i | \-\-interval
.IR Secondz ]
.RB [ \-h | \-? | \-\-help ]
.RB [ \-\-stripes
.I Stripes
.RB [ \-I | \-\-stripesize
.IR StripeSize ]]
.RB [ \-\-noudevsync ]
.RB [ \-v | \-\-verbose ]
.RB [ \-y | \-\-yes ]
.RB [ \-\-version ]
.IR LogicalVolume [ Path ]
.RI [ PhysicalVolume [ Path ][ :PE [ -PE ]]...]
.sp
.B lvconvert \-\-splitmirrors \fIImages
.RB [ \-\-name
.IR SplitLogicalVolumeName ]
.RB [ \-\-trackchanges ]
.IR MirrorLogicalVolume [ Path ]
.RI [ SplittablePhysicalVolume [ Path ][ :PE [ -PE ]]...]
.sp
.B lvconvert
.BR \-\-splitsnapshot
.RB [ \-h | \-? | \-\-help ]
.RB [ \-\-noudevsync ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.IR SnapshotLogicalVolume [ Path ]
.sp
.B lvconvert
.BR \-s | \-\-snapshot
.RB [ \-c | \-\-chunksize
.IR ChunkSize [ bBsSkK ]]
.RB [ \-h | \-? | \-\-help ]
.RB [ \-\-noudevsync ]
.RB [ \-v | \-\-verbose ]
.RB [ \-Z | \-\-zero
.RI { y | n }]
.RB [ \-\-version ]
.IR OriginalLogicalVolume [ Path ]
.IR SnapshotLogicalVolume [ Path ]
.sp
.B lvconvert \-\-merge
.RB [ \-b | \-\-background ]
.RB [ \-i | \-\-interval
.IR Secondz ]
.RB [ \-h | \-? | \-\-help ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.IR LogicalVolume [ Path ]...
.sp
.B lvconvert \-\-repair
.RB [ \-h | \-? | \-\-help ]
.RB [ \-\-stripes
.I Stripes
.RB [ \-I | \-\-stripesize
.IR StripeSize ]]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.IR LogicalVolume [ Path ]
.RI [ PhysicalVolume [ Path ]...]
.sp
.B lvconvert \-\-replace \fIPhysicalVolume
.RB [ \-h | \-? | \-\-help ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.IR LogicalVolume [ Path ]
.RI [ PhysicalVolume [ Path ]...]
.sp
.B lvconvert \-\-thinpool
.IR ThinPoolLogicalVolume { Name | Path }
.RB [ \-c | \-\-chunksize
.IR ChunkSize [ bBsSkKmMgG ]]
.RB [ \-\-discards
.RI { ignore | nopassdown | passdown }]
.RB [{ \-\-poolmetadata
.IR ThinPoolMetadataLogicalVolume { Name | Path }
|
.B \-\-poolmetadatasize
.IR ThinPoolMetadataSize [ bBsSkKmMgG ]}]
.RB [ \-r | \-\-readahead
.RI { ReadAheadSectors | auto | none }]
.RB [ \-\-stripes
.I Stripes
.RB [ \-I | \-\-stripesize
.IR StripeSize ]]]
.RB [ \-Z | \-\-zero
.RI { y | n }]
.RB [ \-T | \-\-thin
.IR ExternalOriginLogicalVolume { Name | Path }
.RB [ \-\-originname
.IR NewExternalOriginVolumeName ]]
.RI [ PhysicalVolume [ Path ][ :PE [ -PE ]]...]
.RB [ \-h | \-? | \-\-help ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.sp
.B lvconvert \-\-type \fIcache-pool
.RB [ \-c | \-\-chunksize
.IR ChunkSize [ bBsSkKmMgG ]]
.RB [ \-\-cachemode
.RI { writeback | writeall up in }]
.RB [{ \-\-poolmetadata
.IR CachePoolMetadataLogicalVolume { Name | Path }
|
.B \-\-poolmetadatasize
.IR CachePoolMetadataSize [ bBsSkKmMgG ]}]
.IR LogicalVolume [ Path ]
.RI [ PhysicalVolume [ Path ][ :PE [ -PE ]]...]
.RB [ \-h | \-? | \-\-help ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.sp
.B lvconvert \-\-type \fIcache
.B \-\-cachepool
.IR CachePoolLV { Name | Path }
.IR LogicalVolume [ Path ]
.RB [ \-h | \-? | \-\-help ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.sp

.SH DESCRIPTION
lvconvert is used ta chizzle tha segment type (i.e. linear, mirror, etc) or
characteristics of a logical volume.  For example, it can add or remove the
redundant imagez of a logical volume, chizzle tha log type of a mirror, or
designate a logical volume as a snapshot repository.
.br
If tha conversion requires allocation of physical extents (for
example, when convertin from linear ta mirror) n' you specify
one or mo' PhysicalVolumes (optionally wit rangez of physical
extents), allocation of physical extents is ghon be restricted to
these physical extents, n' you can put dat on yo' toast.  If tha conversion frees physical extents
(for example, when convertin from a mirror ta a linear, or reducing
mirror legs) n' you specify one or mo' PhysicalVolumes,
the freed extents come first from tha specified PhysicalVolumes.
.SH OPTIONS
See \fBlvm\fP(8) fo' common options.
.br
Exactly one of
.BR \-\-merge ,
.BR \-\-mirrors ,
.BR \-\-repair ,
.BR \-\-replace ,
.BR \-\-splitsnapshot ,
.BR \-\-snapshot ,
.BR \-\-splitmirrors
or
.BR \-\-thinpool
arguments is required.
.TP
.BR \-b ", " \-\-background
Run tha daemon up in tha background.
.TP
.BR \-\-cachepool " " \fCachePoolLV
This argument is necessary when convertin a logical volume ta a cold-ass lil cache LV.
For mo' shiznit on cache pool LVs n' cache LVs, peep \fBlvm\fP(8).
.TP
.BR \-m ", " \-\-mirrors " " \fIMirrors
Specifies tha degree of tha mirror you wish ta create.
For example, "\fB-m 1\fP" would convert tha original gangsta logical
volume ta a mirror volume wit 2-sides; dat is, a
linear volume plus one copy.  There is two implementationz of mirroring
which correspond ta tha "raid1" n' "mirror" segment types.  Da default
mirrorin segment type is "raid1".  If tha legacy "mirror" segment type
is desired, tha \fB\-\-type\fP argument must be used ta explicitly
select tha desired type.  Da \fB\-\-mirrorlog\fP n' \fB\-\-corelog\fP
options below is only relevant ta tha legacy "mirror" segment type.
.TP
.IR \fB\-\-mirrorlog " {" disk | core | mirrored }
Specifies tha type of log ta use.
Da default is \fIdisk\fP, which is persistent n' requires
a lil' small-ass amount of storage space, probably on a separate device
from tha data bein mirrored.
\fICore\fP may be useful fo' short-lived mirrors: It means tha mirror is
regenerated by copyin tha data from tha straight-up original gangsta thang again n' again n' again every
time tha thang be activated - like, fo' example, afta every last muthafuckin reboot.
Usin \fImirrored\fP will create a persistent log dat is itself mirrored.
.TP
.B \-\-corelog
Da optionizzle argument \fB\-\-corelog\fP is tha same ol' dirty as specifying
\fB\-\-mirrorlog\fP \fIcore\fP.
.TP
.BR \-R ", " \-\-regionsize " " \fIMirrorLogRegionSize
A mirror is divided tha fuck into regionz of dis size (in MB), n' tha mirror log
uses dis granularitizzle ta track which regions is up in sync.
.TP
.B \-\-type \fISegmentType
Used ta convert a logical volume ta another segment type, like cache-pool,
cache, raid1, or thin-pool.  When convertin a logical volume ta a cold-ass lil cache LV,
the \-\-cachepool argument is required.
.TP
.BR \-i ", " \-\-interval " " \fISeconds
Report progress as a cementage at regular intervals.
.TP
.B \-\-noudevsync
Disablez udev synchronisation. I aint talkin' bout chicken n' gravy biatch. The
process aint gonna wait fo' notification from udev.
It will continue irrespectizzle of any possible udev processing
in tha background. Y'all KNOW dat shit, muthafucka!  Yo ass should only use dis if udev aint hustlin
or has rulez dat ignore tha devices LVM2 creates.
.TP
.B \-\-splitmirrors \fIImages
Da number of redundant Imagez of a mirror ta be split off n' used
to form a freshly smoked up logical volume.  A name must be supplied fo' the
newly-split-off logical volume rockin tha \fB\-\-name\fP argument, unless
the \fB\-\-trackchanges\fP argument is given.
.TP
.BR \-n ", " \-\-name\  \fIName
Da name ta apply ta a logical volume which has been split off from
a mirror logical volume.
.TP
.B \-\-trackchanges
Used wit \fB\-\-splitmirrors\fP on a raid1 device, dis tracks chizzlez so
that tha read-only detached image can be merged efficiently back into
the mirror later n' shit. Only tha regionz of tha detached thang where
the data chizzled git resynchronized.

Please note dat dis feature is only supported wit tha freshly smoked up md-based mirror
implementation n' not wit tha original gangsta device-mapper mirror implementation.
.TP
.B \-\-splitsnapshot
Separates SnapshotLogicalVolume from its origin.
Da volume dat is split off gotz nuff tha chunks dat differ from tha origin
along wit tha metadata describin em.  This volume can be wiped n' then
destroyed wit lvremove.
Da inverse of \-\-snapshot.
.TP
.B \-s, \-\-snapshot
Recreates a snapshot from constituent logical volumes (or copiez of them) after
havin been separated rockin \-\-splitsnapshot.  For dis ta work erectly, no
changes may be made ta tha contentz of either volume afta tha split.
.TP
.BR \-c ", " \-\-chunksize " " \fIChunkSize [ \fIbBsSkKmMgG ]
Gives tha size of chunk fo' snapshot n' thin pool logical volumes.
Default unit is up in kilobytes.
.br
For snapshots tha value must be juice of 2 between 4KiB n' 512KiB
and tha default value is 4.
.br
For thin pools tha value must be between 64KiB and
1GiB n' tha default value starts wit 64 n' scales
up ta fit tha pool metadata size within 128MiB,
if tha pool metadata size aint specified.
Da value must be a multiple of 64KiB. 
(Early kernel support until thin target version 1.4 required tha value
to be a juice of 2.  Discardz weren't supported fo' non-power of 2 joints
until thin target version 1.5.)
Default unit is up in kilobytes.
.TP
.BR \-\-discardz " {" \fIignore | \fInopassdown | \fIpassdown }
Specifies whether or not discardz is ghon be processed by tha thin layer up in the
kernel n' passed down ta tha Physical Volume.
Default is \fIpassdown\fP.
.TP
.BR \-Z ", " \-\-zero " {" \fIy | \fIn }
Controls zeroin of tha straight-up original gangsta 4KiB of data up in tha snapshot.
If tha volume is read-only tha snapshot aint gonna be zeroed.
For thin pool volumes it controls zeroin of provisioned blocks.
Note: Provisionin of big-ass zeroed chunks impacts performance.
.TP
.B \-\-merge
Merges a snapshot tha fuck into its origin volume or merges a raid1 image dat has
been split from its mirror wit \fB\-\-trackchanges\fP back tha fuck into its mirror.

To check if yo' kernel supports tha snapshot merge feature, look
for 'snapshot-merge' up in tha output
of \fBdmsetup targets\fP.  If both tha origin n' snapshot volume is not
open tha merge will start immediately.  Otherwise, tha merge will start
the last time either tha origin or snapshot is activated n' both is closed.
Mergin a snapshot tha fuck into a origin dat cannot be closed, fo' example a root
filesystem, is deferred until tha next time tha origin volume be activated.
When mergin starts, tha resultin logical volume gonna git tha originz name,
minor number n' UUID.  While tha merge is up in progress, readz or writes ta the
origin step tha fuck up as they was pimped up ta tha snapshot bein merged. Y'all KNOW dat shit, muthafucka!  When the
merge finishes, tha merged snapshot is removed. Y'all KNOW dat shit, muthafucka!  Multiple snapshots may
be specified on tha commandline or a @tag may be used ta specify
multiple snapshots be merged ta they respectizzle origin.
.TP
.B \-\-originname \fINewExternalOriginVolumeName\fP
Da freshly smoked up name fo' original gangsta logical volume, which becomes external origin volume.
.br
Without dis option a thugged-out default namez of "lvol#" is ghon be generated where
# is tha LVM internal number of tha logical volume.
This volume is ghon be read-only n' cannot be further modified as long,
as it is bein used as external origin.
.TP
.BR \-\-poolmetadata " " \fIThinPoolMetadataLogicalVolume { \fIName | \fIPath }
Specifies thin pool metadata logical volume.
Da size should be up in between 2MiB n' 16GiB.
Thin pool is specified wit tha option
\fB\-\-thinpool\fP.
When tha specified thin pool already exists,
the thin poolz metadata volume is ghon be swapped wit tha given LV.
Propertizzlez of tha thin pool like chunk size, discardz or zero
are preserved by default up in dis case.
It can be useful fo' thin pool metadata repair or its offline resize,
since tha content of metadata becomes accessible for
thin provisionin tools \fBthin_dump\fP(8) n' \fBthin_restore\fP(8).
.TP
.BR \-\-poolmetadatasize " " \fIThinPoolMetadataSize [ \fIbBsSkKmMgG ]
Sets tha size of thin poolz metadata logical volume,
if tha pool metadata volume is undefined.
Thin pool is specified wit tha option
\fB\-\-thinpool\fP.
Supported value is up in tha range between 2MiB n' 16GiB.
Da default value is estimated wit dis formula
(Pool_LV_size / Pool_LV_chunk_size * 64b).
Default unit is megabytes.
.TP
.IR \fB\-r ", " \fB\-\-readahead " {" ReadAheadSectors | auto | none }
Sets read ahead sector count of thin pool metadata logical volume.
Da default value is "auto" which allows tha kernel ta chizzle
a suitable value automatically.
"None" is equivalent ta specifyin zero.
.TP
.B \-\-repair
Repair a mirror afta sufferin a gangbangin' finger-lickin' disk failure or try ta fix thin pool metadata.

Da mirror is ghon be brought back tha fuck into a cold-ass lil consistent state.
By default, tha original gangsta number of mirrors will be
restored if possible.  Specify \fB\-y\fP on tha command line ta skip
the prompts, n' you can put dat on yo' toast. Use \fB\-f\fP if you do not want any replacement.
Additionally, you may use \fB\-\-use\-policies\fP ta use tha device
replacement policy specified up in \fBlvm.conf\fP(5),
viz. activation/mirror_log_fault_policy or
activation/mirror_device_fault_policy.

Thin pool repair automates tha use of \fBthin_repair\fP(8) tool.
Only inactizzle thin pool volumes can be repaired.
There is no validation of metadata between kernel n' lvm2.
This requires further manual work.
Afta successfull repair tha oldschool unmodified metadata is still
available up in \fB<pool>_tmeta<n>\fP LV.
.TP
.B \-\-replace \fIPhysicalVolume
Remove tha specified thang (\fIPhysicalVolume\fP) n' replace it wit one
that be available up in tha volume crew or from tha specific list provided.
This option is only available ta RAID segment types
(e.g. "raid1", "raid5", etc).
.TP
.BR \-\-stripes " " \fIStripes
Gives tha number of stripes.
This is equal ta tha number of physical volumes ta scatter
the logical volume. This do not apply ta existin allocated
space, only newly allocated space can be striped.
.TP
.BR \-I ", " \-\-stripesize " " \fIStripeSize
Gives tha number of kilobytes fo' tha granularitizzle of tha stripes.
.br
StripeSize must be 2^n (n = 2 ta 9) fo' metadata up in LVM1 format.
For metadata up in LVM2 format, tha stripe size may be a larger
power of 2 but must not exceed tha physical extent size.
.TP
.IR \fB\-T ", " \fB\-\-thin " " ExternalOriginLogicalVolume { Name | Path }
Converts tha logical volume tha fuck into a thin logical volume of tha thin pool
specified wit \fB\-\-thinpool\fP. Da original gangsta logical volume
.I ExternalOriginLogicalVolume
is renamed tha fuck into a freshly smoked up read-only logical volume.
Da non-default name fo' dis volume use \fB\-\-originname\fP.
Da volume cannot be further modified as long as it is used as an
external origin volume fo' unprovisioned areaz of any thin logical volume.
.TP
.IR \fB\-\-thinpool " " ThinPoolLogicalVolume { Name | Path }
Changes logical volume tha fuck into a thin pool volume. Da volume
will store tha poolz data.
Thin pool metadata logical volume can be specified wit tha option
\fB\-\-poolmetadata\fP or allocated wit \fB\-\-poolmetadatasize\fP.

.SH Examples
Converts tha linear logical volume "vg00/lvol1" ta a two-way mirror
logical volume:
.sp
.B lvconvert \-m1 vg00/lvol1

Converts tha linear logical volume "vg00/lvol1" ta a two-way RAID1
logical volume:
.sp
.B lvconvert \-\-type raid1 \-m1 vg00/lvol1

Converts a mirror wit a gangbangin' finger-lickin' disk log ta a mirror wit a in-memory log:
.sp
.B lvconvert \-\-mirrorlog core vg00/lvol1

Converts a mirror wit a in-memory log ta a mirror wit a gangbangin' finger-lickin' disk log:
.sp
.B lvconvert \-\-mirrorlog disk vg00/lvol1

Converts a mirror logical volume ta a linear logical volume:
.sp
.B lvconvert \-m0 vg00/lvol1

Converts a mirror logical volume ta a RAID1 logical volume wit tha same
number of images:
.sp
.B lvconvert \-\-type raid1 vg00/mirror_lv

Converts logical volume "vg00/lvol2" ta snapshot of original gangsta volume
"vg00/lvol1":
.sp
.B lvconvert \-s vg00/lvol1 vg00/lvol2

Converts linear logical volume "vg00/lvol1" ta a two-way mirror,
usin physical extents /dev/sda:0-15 n' /dev/sdb:0-15 fo' allocation
of freshly smoked up extents:
.sp
.B lvconvert \-m1 vg00/lvol1 /dev/sda:0-15 /dev/sdb:0-15

Converts mirror logical volume "vg00/lvmirror1" ta linear, freein physical
extents from /dev/sda:
.sp
.B lvconvert \-m0 vg00/lvmirror1 /dev/sda

Merges "vg00/lvol1_snap" tha fuck into its origin:
.sp
.B lvconvert \-\-merge vg00/lvol1_snap

If "vg00/lvol1", "vg00/lvol2" n' "vg00/lvol3" is all tagged wit "some_tag"
each snapshot logical volume is ghon be merged serially,
e.g.: "vg00/lvol1", then "vg00/lvol2", then "vg00/lvol3".
If \-\-background was used it would start
all snapshot logical volume merges up in parallel.
.sp
.B lvconvert \-\-merge @some_tag

Extracts one image from tha mirror, makin it a freshly smoked up logical volume named
"lv_split".  Da mirror tha image is extracted from is reduced accordingly.
If dat shiznit was a 2-way mirror (created wit '-m 1'), then tha resultin original
volume is ghon be linear.
.sp
.B lvconvert \-\-splitmirrors 1 \-\-name lv_split vg00/lvmirror1

A mirrored logical volume pimped wit \-\-type raid1 can use the
\-\-trackchanges argument when splittin off a image.
Detach one image from tha mirrored logical volume lv_raid1 as a separate
read-only thang n' track tha chizzlez made ta tha mirror while it is detached.
Da split-off thang has a name of tha form lv_raid1_rimage_N, where N is
a number, n' it cannot be renamed.
.sp
.B lvconvert \-\-splitmirrors 1 \-\-trackchanges vg00/lv_raid1

Merge a image dat was detached temporarily from its mirror with
the \-\-trackchanges argument back tha fuck into its original gangsta mirror and
brin its contents back up-to-date.
.sp
.B lvconvert \-\-merge vg00/lv_raid1_rimage_1

Replaces tha physical volume "/dev/sdb1" up in tha RAID1 logical volume "my_raid1"
with tha specified physical volume "/dev/sdf1".  Had tha argument "/dev/sdf1"
been left out, lvconvert would attempt ta find a suitable thang from them
available up in tha volume group.
.sp
.B lvconvert \-\-replace /dev/sdb1 vg00/my_raid1 /dev/sdf1

Convert tha logical volume "vg00/lvpool" tha fuck into a thin pool wit chunk size 128KiB
and convert "vg00/lv1" tha fuck into a thin volume rockin dis pool. Original Gangsta "vg00/lv1"
is used as a external read-only origin, where all writes ta such volume
are stored up in tha "vg00/lvpool".
.sp
.B lvconvert \-\-thinpool vg00/lvpool -c 128 -T lv1

Convert tha logical volume "vg00/origin" tha fuck into a thin volume from tha thin pool
"vg00/lvpool". This thin volume will use "vg00/origin" as a external origin
volume fo' unprovisioned areas up in dis volume.
For tha read-only external origin use tha freshly smoked up name "vg00/external".
.sp
.B lvconvert \-\-thinpool vg00/lvpool \-\-originname external -T vg00/origin

Convert a existin logical volume ta a cold-ass lil cache pool LV rockin the
given cache metadata LV.
.sp
.B lvconvert --type cache-pool --poolmetadata vg00/lvx_meta vg00/lvx_data
.br
.B lvrename vg00/lvx_data vg00/lvx_cachepool

Convert a existin logical volume ta a cold-ass lil cache LV rockin tha given
cache pool LV.
.sp
.B lvconvert \-\-type cache  \-\-cachepool vg00/lvx_cachepool vg00/lvx

.SH SEE ALSO
.BR lvm (8),
.BR lvm.conf (5),
.BR lvdisplay (8),
.BR lvextend (8),
.BR lvreduce (8),
.BR lvremove (8),
.BR lvrename (8),
.BR lvscan (8),
.BR vgcreate (8),
.BR thin_dump (8),
.BR thin_repair (8)
.BR thin_restore (8)
