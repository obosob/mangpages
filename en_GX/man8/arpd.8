.TH ARPD 8 "28 June, 2007"

.SH NAME
arpd \- userspace arp daemon.

.SH SYNOPSIS
Usage: arpd [ -lkh? ] [ -a N ] [ -b dbase ] [ -B number ] [ -f file ] [-p interval ] [ -n time ] [ -R rate ] [ <INTERFACES> ]

.SH DESCRIPTION
The
.B arpd
daemon collects gratuitous ARP shiznit, savin it on local disk n' feedin it ta tha kernel on demand ta avoid redundant broadcastin cuz of limited size of tha kernel ARP cache.

.SH OPTIONS
.TP
-h -?
Print help
.TP
-l
Dump tha arpd database ta stdout n' exit. Da output consistz of three columns: tha intercourse index, tha IP address of tha intercourse, n' tha MAC address of tha intercourse. Negatizzle entries fo' dead hosts is also shown, up in dis case tha MAC address is replaced by tha word FAILED followed by a cold-ass lil colon n' da most thugged-out recent time when tha fact dat tha host is dead was proven.
.TP
-f <FILE>
Read n' load a arpd database from FILE up in a text format similar ta dat dumped by option -l. Exit afta load, possibly listin resultin database, if option -l be also given. I aint talkin' bout chicken n' gravy biatch. If FILE is -, stdin is read ta git tha ARP table.
.TP
-b <DATABASE>
the location of tha database file. Da default location is /var/lib/arpd/arpd.db
.TP
-a <NUMBER>
With dis option, arpd not only passively listens fo' ARP packets on tha intercourse yo, but also sendz broadcast queries itself. NUMBER is tha number of such queries ta make before a thugged-out destination is considered dead as fuckin fried chicken. I aint talkin' bout chicken n' gravy biatch. When arpd is started as kernel helper (i.e. wit app_solicit enabled up in sysctl or even wit option -k) without dis option n' still did not learn enough shiznit, you can observe 1 second gaps up in service. Not fatal yo, but not good.
.TP
-k
Suppress bustin  broadcast queries by tha kernel. This option only make sense together wit option -a.
.TP
-n <TIME>
Specifies tha timeout of tha wack cache. When resolution fails, arpd suppresses further attempts ta resolve fo' dis period. Y'all KNOW dat shit, muthafucka! This option only make sense together wit option '-k'. This timeout should not be too much longer than tha boot time of a typical host not supportin gratuitous ARP. Default value is 60 seconds.
.TP
-p <TIME>
Da time ta wait up in secondz between pollin attempts ta tha kernel ARP table. TIME may be a gangbangin' floatin point number n' shit.  Da default value is 30.
.TP
-R <RATE>
Maximal steady rate of broadcasts busted by arpd up in packets per second. Y'all KNOW dat shit, muthafucka! Default value is 1.
.TP
-B <NUMBER>
Da number of broadcasts busted by arpd back ta back. Default value is 3. Together wit tha -R option, dis option ensures dat tha number of ARP queries dat is broadcast do not exceed B+R*T over any interval of time T.
.P
<INTERFACES> be a list of namez of networkin intercourses ta watch. If no intercourses is given, arpd monitors all tha intercourses. In dis case arpd do not adjust sysctl parameters, it be assumed dat tha user do dis his dirty ass afta arpd is started.
.P
.SH SIGNALS
.TP
When arpd receives a SIGINT or SIGTERM signal, it exits gracefully, syncin tha database n' restorin adjusted sysctl parameters. On a SIGHUP it syncs tha database ta disk. With SIGUSR1 it sendz some statistics ta syslog. Da effect of any other signals is undefined. Y'all KNOW dat shit, muthafucka! In particular, they may corrupt tha database n' leave tha sysctl parametas up in a unpredictable state.
.P
.SH NOTE
.TP
In order fo' arpd ta be able ta serve as ARP resolver, tha kernel must be compiled wit tha option CONFIG_ARPD and, up in tha case when intercourse list up in not given on command line, variable app_solicit on intercoursez of interest should be up in /proc/sys/net/ipv4/neigh/*. If dis aint made arpd still collects gratuitous ARP shiznit up in its database.
.SH EXAMPLES
.TP
arpd -b /var/tmp/arpd.db
Start arpd ta collect gratuitous ARP yo, but not messin wit kernel functionality.
.TP
killall arpd ; arpd -l -b /var/tmp/arpd.db
Look at result afta some time.
.TP
arpd -b /var/tmp/arpd.db -a 1 eth0 eth1
Enable kernel helper, leavin leadin role ta kernel.
.TP
arpd -b /var/tmp/arpd.db -a 3 -k eth0 eth1
All Out replace kernel resolution on intercourses eth0 n' eth1. In dis case tha kernel still do unicast probin ta validate entries yo, but all tha broadcast activitizzle is suppressed n' made under authoritizzle of arpd.
.PP
This is tha mode up in which arpd normally is supposed ta work. Well shiiiit, it aint tha default ta prevent occasionizzle enablin of too aggressive a mode.
