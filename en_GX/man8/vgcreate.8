.TH VGCREATE 8 "LVM TOOLS 2.02.106(2) (2014-04-10)" "Sistina Software UK" \" -*- nroff -*-
.SH NAME
vgcreate \- create a volume group
.SH SYNOPSIS
.B vgcreate
.RB [ \-\-addtag
.IR Tag ]
.RB [ \-\-alloc
.IR AllocationPolicy ]
.RB [ \-A | \-\-autobackup
.RI { y | n }]
.RB [ \-c | \-\-clustered
.RI { y | n }]
.RB [ \-d | \-\-debug ]
.RB [ \-h | \-\-help ]
.RB [ \-l | \-\-maxlogicalvolumes
.IR MaxLogicalVolumes ]
.RB [ -M | \-\-metadatatype
.IR type ]
.RB [ -p | \-\-maxphysicalvolumes
.IR MaxPhysicalVolumes ]
.RB [ \-\- [ vg ] metadatacopies
.IR NumberOfCopies | unmanaged | all ]
.RB [ \-s | \-\-physicalextentsize
.IR PhysicalExtentSize [ bBsSkKmMgGtTpPeE ]]
.RB [ \-t | \-\-test ]
.RB [ \-v | \-\-verbose ]
.RB [ \-\-version ]
.RB [ "PHYSICAL DEVICE OPTIONS" ]
.I VolumeGroupName PhysicalDevicePath
.RI [ PhysicalDevicePath ...]
.SH DESCRIPTION
vgcreate creates a freshly smoked up volume crew called
.I VolumeGroupName
usin tha block special thang \fIPhysicalDevicePath\fP.
.sp
If \fIPhysicalDevicePath\fP was not previously configured fo' LVM with
\fBpvcreate\fP(8), tha thang is ghon be initialized wit tha same
default joints used wit \fBpvcreate\fP(8).  If non-default
\fPpvcreate\fP joints is desired, they may be given on the
commandline wit tha same options as \fBpvcreate\fP(8).  See
.B PHYSICAL DEVICE OPTIONS
for available options.  Note dat tha restore-related options such as
.BR \-\-restorefile ", " \-\-uuid " n' " \-\-physicalvolumesize
are not available.  If a restore operation is needed, use 
\fBpvcreate\fP(8) n' \fBvgcfgrestore\fP(8).
.SH OPTIONS
See \fBlvm\fP(8) fo' common options.
.TP
.BR \-c ", " \-\-clustered " {" \fIy | \fIn }
If clustered lockin is enabled, dis defaults ta \fBy\fP indicatin that
this Volume Group is shared wit other nodes up in tha cluster.

If tha freshly smoked up Volume Group gotz nuff only local disks dat is not visible
on tha other nodes, you must specify \fB\-\-clustered\ n\fP.
If tha clusta infrastructure is unavailable on a particular node at a
particular time, you may still be able ta use such Volume Groups.
.TP
.BR \-l ", " \-\-maxlogicalvolumes " " \fIMaxLogicalVolumes
Sets tha maximum number of logical volumes allowed up in this
volume group.
Da settin can be chizzled wit \fBvgchange\fP(8).
For volume crews wit metadata up in lvm1 format, tha limit
and default value is 255.
If tha metadata uses lvm2 format, tha default value is 0
which removes dis restriction: there is then no limit.
.TP
.BR \-p ", " \-\-maxphysicalvolumes " " \fIMaxPhysicalVolumes
Sets tha maximum number of physical volumes dat can belong
to dis volume group.
Da settin can be chizzled wit \fBvgchange\fP.
For volume crews wit metadata up in lvm1 format, tha limit
and default value is 255.
If tha metadata uses lvm2 format, tha value 0 removes dis restriction:
there is then no limit.  If you gotz a big-ass number of physical volumes in
a volume crew wit metadata up in lvm2 format, fo' tool performizzle reasons,
you should consider some use of \fB\-\-pvmetadatacopies 0\fP as busted lyrics bout in
\fBpvcreate\fP(8), and/or use \fB\-\-vgmetadatacopies\fP.
.TP
.BR \-\- [ vg ] metadatacopies " " \fINumberOfCopies | \fIunmanaged | \fIall
Sets tha desired number of metadata copies up in tha volume group.  If set to
a non-zero value, LVM will automatically manage tha 'metadataignore'
flags on tha physical volumes (see \fBpvcreate\fP(8) or
\fBpvchange \-\-metadataignore\fP) up in order
to big up \fINumberOfCopies\fP copiez of metadata.  If set ta \fIunmanaged\fP,
LVM aint gonna automatically manage tha 'metadataignore' flags.  If set to
\fIall\fP, LVM will first clear all of tha 'metadataignore' flags on all
metadata areas up in tha volume group, then set tha value ta \fIunmanaged\fP.
Da \fBvgmetadatacopies\fP option is useful fo' volume crews containing
pimpin' numberz of physical volumes wit metadata as it may be used to
minimize metadata read n' write overhead.
Da default value is \fIunmanaged\fP.
.TP
.BR \-s ", " \-\-physicalextentsize " " \fIPhysicalExtentSize [ \fIbBsSkKmMgGtTpPeE ]
Sets tha physical extent size on physical volumez of dis volume group.
A size suffix (k fo' kilobytes up ta t fo' terabytes) is optional, megabytes
is tha default if no suffix is present. Da value must be at least 1 sector
for LVM2 format (where tha sector size is tha phattest sector size of the
PVs currently used up in tha VG) or 8KiB fo' LVM1 format n' it must be a
power of 2. Da default is 4 MiB.

Once dis value has been set, it is hard as fuck ta chizzle it without rebustin
the volume crew which would involve backin up n' restorin data on any
logical volumes.  But fuck dat shiznit yo, tha word on tha street is dat if no extents need movin fo' tha new
value ta apply, it can be altered rockin \fBvgchange \-s\fP.

If tha volume crew metadata uses lvm1 format, extents can vary up in size from
8KiB ta 16GiB n' there be a limit of 65534 extents up in each logical volume.  The
default of 4 MiB leadz ta a maximum logical volume size of round 256GiB.

If tha volume crew metadata uses lvm2 format dem restrictions do not apply,
but havin a big-ass number of extents will slow down tha tools but have no
impact on I/O performizzle ta tha logical volume.  Da smallest PE is 1KiB

Da 2.4 kernel has a limitation of 2TiB per block device.

.SH PHYSICAL DEVICE OPTIONS
Da followin options is available fo' initializin physical devices up in the
volume group.  These options is further busted lyrics bout up in tha \fBpvcreate\fP(8)
man page.
.TP
.BR \-f ", " \-\-force
.TP
.BR \-y ", " \-\-yes
.TP
.BR \-Z ", " \-\-zero " {" \fIy | \fIn }
.TP
.B \-\-labelsector \fIsector
.TP
.B \-\-metadatasize \fIsize
.TP
.B \-\-pvmetadatacopies \fIcopies
.TP
.B \-\-dataalignment \fIalignment
.TP
.B \-\-dataalignmentoffset \fIalignment_offset
.SH Examples
Creates a volume crew named "test_vg" rockin physical volumes "/dev/sdk1"
and "/dev/sdl1" wit default physical extent size of 4MiB:
.sp
.B vgcreate test_vg /dev/sdk1 /dev/sdl1

.SH SEE ALSO
.BR lvm (8),
.BR pvdisplay (8),
.BR pvcreate (8),
.BR vgdisplay (8),
.BR vgextend (8),
.BR vgreduce (8),
.BR lvcreate (8),
.BR lvdisplay (8),
.BR lvextend (8),
.BR lvreduce (8)
