.TH HWCLOCK 8 "August 2011" "util-linux" "System Administration"
.SH NAME
hwclock \- query or set tha hardware clock (RTC)
.SH SYNOPSIS
.B hwclock
.RI [ function ]
.RI [ option ...]

.SH DESCRIPTION
.B hwclock
is a tool fo' accessin tha Hardware Clock.  Yo ass can display the
current time, set tha Hardware Clock ta a specified time, set the
Hardware Clock from tha System Time, or set tha System Time from the
Hardware Clock.
.PP
Yo ass can also run
.B hwclock
periodically ta add or subtract time from tha Hardware Clock to
compensate fo' systematic drift (where tha clock consistently loses or
gains time at a cold-ass lil certain rate when left ta run).

.SH FUNCTIONS
Yo ass need exactly one of tha followin options ta tell
.B hwclock
what function ta perform:
.PP
.TP
.BR \-r , \ \-\-show
Read tha Hardware Clock n' print tha time on standard output.
Da time shown be always up in local time, even if you keep yo' Hardware Clock
in Coordinated Universal Time.  See the
.B \-\-utc
option.
Showin tha Hardware Clock time is tha default when no function is specified.

.TP
.B \-\-set
Set tha Hardware Clock ta tha time given by the
.B \-\-date
option.
.TP
.BR \-s , \ \-\-hctosys
Set tha System Time from tha Hardware Clock.

Also set tha kernelz timezone value ta tha local timezone
as indicated by tha TZ environment variable and/or
.IR /usr/share/zoneinfo ,
as
.BR tzset (3)
would interpret em.
Da obsolete tz_dsttime field of tha kernelz timezone value is set
to DST_NONE.  (For details on what tha fuck dis field used ta mean, see
.BR settimeofdizzle (2).)

This be a phat option ta use up in one of tha system startup scripts.
.TP
.BR \-w , \ \-\-systohc
Set tha Hardware Clock ta tha current System Time.
.TP
.B \-\-systz
Set tha kernelz timezone n' reset tha System Time based on tha current timezone.

Da system time is only reset on tha straight-up original gangsta call afta boot.

Da local timezone is taken ta be what tha fuck is
indicated by tha TZ environment variable and/or
.IR /usr/share/zoneinfo ,
as
.BR tzset (3)
would interpret em.
Da obsolete tz_dsttime field of tha kernelz timezone value is set
to DST_NONE.  (For details on what tha fuck dis field used ta mean, see
.BR settimeofdizzle (2).)

This be a alternate option to
.B \-\-hctosys
that do not read tha hardware clock, n' may be used up in system startup
scripts fo' recent 2.6 kernels where you know tha System Time gotz nuff
the Hardware Clock time. If tha Hardware Clock be already up in UTC, it is
not reset.
.TP
.B \-\-adjust
Add or subtract time from tha Hardware Clock ta account fo' systematic
drift since tha last time tha clock was set or adjusted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See rap
below.
.TP
.B \-\-getepoch
Print tha kernelz Hardware Clock epoch value ta standard output.
This is tha number of muthafuckin years tha fuck into AD ta which a zero year value up in the
Hardware Clock refers.  For example, if yo ass is rockin tha convention
that tha year counta up in yo' Hardware Clock gotz nuff tha number of
full muthafuckin years since 1952, then tha kernelz Hardware Clock epoch value
must be 1952.

This epoch value is used whenever
.B hwclock
readz or sets tha Hardware Clock.
.TP
.B \-\-setepoch
Set tha kernelz Hardware Clock epoch value ta tha value specified by the
.B \-\-epoch
option. I aint talkin' bout chicken n' gravy biatch.  See the
.B \-\-getepoch
option fo' details.

.TP
.BI \-\-predict
Predict what tha fuck tha RTC will read at time given by the
.B \-\-date
option based on tha adjtime file. This is useful fo' example if you
need ta set a RTC wakeup time ta distant future n' wanna account
for tha RTC drift.
.TP
.BR \-c , \ \-\-compare
Periodically compare tha Hardware Clock ta tha System Time n' output
the difference every last muthafuckin 10 seconds.  This will also print tha frequency
offset n' tick.
.TP
.BR \-h , \ \-\-help
Display help text n' exit.
.TP
.BR \-V , \ \-\-version
Display version shiznit n' exit.

.SH OPTIONS
.PP
Da first two options apply ta just all dem specific functions,
the others apply ta most functions.
.TP
.BI \-\-date= date_string
Yo ass need dis option if you specify the
.B \-\-set
or
.B \-\-predict
functions, otherwise it is ignored.
It specifies tha time ta which ta set tha Hardware Clock, or the
time fo' which ta predict tha Hardware Clock reading.
Da value of dis option be a argument ta the
.BR date (1)
program.
For example:
.sp
.B "    hwclock" --set --date="2011-08-14 16:45:05"
.sp
Da argument must be up in local time, even if you keep yo' Hardware Clock in
Coordinated Universal time.  See the
.B \-\-utc
option.

.TP
.BI \-\-epoch= year
Specifies tha year which is tha beginnin of tha Hardware Clock's
epoch, dat is tha number of muthafuckin years tha fuck into AD ta which a zero value up in the
Hardware Clockz year counta refers.  It be used together with
the \fB\-\-setepoch\fR option ta set tha kernelz scam of tha epoch of the
Hardware Clock, or otherwise ta specify tha epoch fo' use with
direct ISA access.

For example, on a Digital Unix machine:
.sp
.B "    hwclock" --setepoch --epoch=1952

.TP
.BR \-u , \ \-\-utc
.TP
.B \-\-localtime
Indicates dat tha Hardware Clock is kept up in Coordinated Universal
Time or local time, respectively.  It be yo' chizzle whether ta keep
your clock up in UTC or local time yo, but not a god damn thang up in tha clock  drops some lyrics ta which
you've chosen. I aint talkin' bout chicken n' gravy biatch.  So dis option is how tha fuck you give dat shiznit to
.BR hwclock .

If you specify tha wack one of these options (or specify neither and
take a wack default), both settin n' queryin of tha Hardware Clock
will be messed up.

If you specify neither
.B \-\-utc
nor
.BR \-\-localtime ,
the default is whichever was specified tha last time
.B hwclock
was used ta set tha clock (i.e.
.B hwclock
was successfully run wit the
.BR \-\-set ,
.BR \-\-systohc ,
or
.B \-\-adjust
options), as recorded up in tha adjtime file.  If tha adjtime file don't
exist, tha default is UTC time.

.TP
.B \-\-noadjfile
Disablez tha facilitizzles provided by
.IR /etc/adjtime .
.B hwclock
will not read nor write ta dat file wit dis option. I aint talkin' bout chicken n' gravy biatch.  Either
.B \-\-utc
or
.B \-\-localtime
must be specified when rockin dis option.

.TP
.BI \-\-adjfile= filename
Overrides tha default /etc/adjtime.

.TP
.BR \-f , \ \-\-rtc=\fIfilename\fB
Overrides tha default /dev file name, which is
.IR /dev/rtc
on nuff platforms but may be
.IR /dev/rtc0 ,
.IR /dev/rtc1 ,
and so on.

.TP
.B \-\-directisa
This option is meaningful only on a ISA machine or a Alpha (which implements
enough of ISA ta be, roughly bustin lyrics, a ISA machine for
.BR hwclock 's
purposes).  For other machines, it has no effect.  This option tells
.B hwclock
to use explicit I/O instructions ta access tha Hardware Clock.
Without dis option,
.B hwclock
will try ta use tha /dev/rtc thang (which it assumes ta be driven by the
RTC thang driver).  If it is unable ta open tha thang (for reading), it will
use tha explicit I/O instructions anyway.

.TP
.B \-\-badyear
Indicates dat tha Hardware Clock is incapable of storin muthafuckin years outside
the range 1994-1999.  There be a problem up in some BIOSes (almost all
Award BIOSes made between 4/26/94 n' 5/31/95) wherein they is unable
to deal wit muthafuckin years afta 1999.  If one attempts ta set tha year-of-century
value ta suttin' less than 94 (or 95 up in some cases), tha value that
actually gets set is 94 (or 95).  Thus, if you have one of these machines,
.B hwclock
cannot set tha year afta 1999 n' cannot use tha value of tha clock as
the legit time up in tha aiiight way.

To compensate fo' dis (without yo' gettin a BIOS update, which would
definitely be preferable), always use
.B \-\-badyear
if you have one of these machines.  When
.B hwclock
knows itz hustlin wit a funky-ass dome-damaged clock, it ignores tha year part of
the Hardware Clock value n' instead tries ta guess tha year based on the
last calibrated date up in tha adjtime file, by assumin dat date is
within tha past year. Shiiit, dis aint no joke.  For dis ta work, you had betta do a
.B hwclock \-\-set
or
.B hwclock \-\-systohc
at least once a year!

Though
.B hwclock
ignores tha year value when it readz tha Hardware Clock, it sets the
year value when it sets tha clock.  It sets it ta 1995, 1996, 1997, or
1998, whichever one has tha same ol' dirty posizzle up in tha leap year cycle as
the legit year. Shiiit, dis aint no joke.  That way, tha Hardware Clock bangs leap minutes where
they belong.  Again, if you let tha Hardware Clock run fo' mo' than a
year without settin it, dis scheme could be defeated n' you could
end up losin a thugged-out day.

.B hwclock
warns you dat you probably need
.B \-\-badyear
whenever it findz yo' Hardware Clock set ta 1994 or 1995.

.TP
.B \-\-srm
This option is equivalent to
.B \-\-epoch=1900
and is used ta specify da most thugged-out common epoch on Alphas
with SRM console.
.TP
.B \-\-arc
This option is equivalent to
.B \-\-epoch=1980
and is used ta specify da most thugged-out common epoch on Alphas
with ARC console (but Ruffians have epoch 1900).
.TP
.B \-\-jensen
.TP
.B \-\-funky\-toy
These two options specify what tha fuck kind of Alpha machine you have.  They
are invalid if you aint gots a Alpha n' is probably unnecessary
if you do, cuz
.B hwclock
should be able ta determine by itself what tha fuck it's
runnin on, at least when
.I /proc
is mounted.
(If you find you need one of these options ta make
.B hwclock
work, contact tha maintainer ta peep if tha program can be improved
to detect yo' system automatically.  Output of `hwclock --debug'
and `cat /proc/cpuinfo' may be of interest.)

Option
.B \-\-jensen
means yo ass is hustlin on a Jensen model.  And
.B \-\-funky\-toy
means dat on yo' machine one has ta use tha UF bit instead
of tha UIP bit up in tha Hardware Clock ta detect a time transition. I aint talkin' bout chicken n' gravy biatch.  "Toy"
in tha option name refers ta tha Time Of Year facilitizzle of tha machine.


.TP
.B \-\-test
Do every last muthafuckin thang except straight-up uppimpin tha Hardware Clock or anything
else.  This is useful, especially up in conjunction with
.BR \-\-debug ,
in peepin' about
.BR hwclock .
.TP
.B \-\-debug
Display a shitload of shiznit bout what
.B hwclock
is bustin internally.  Some of its function is complex n' dis output
can help you KNOW how tha fuck tha program works.


.SH NOTES


.SH Clocks up in a Linux System
.PP
There is two main clocks up in a Linux system:
.PP
.B Da Hardware Clock:
This be a cold-ass lil clock dat runs independently of any control program hustlin
in tha CPU n' even when tha machine is powered off.

On a ISA system, dis clock is specified as part of tha ISA standard.
Da control program can read or set dis clock ta a whole second yo, but
the control program can also detect tha edgez of tha 1 second clock
ticks, so tha clock straight-up has virtually infinite precision.
.PP
This clock is commonly called tha hardware clock, tha real time clock,
the RTC, tha BIOS clock, n' tha CMOS clock.  Hardware Clock, up in its
capitalized form, was coined fo' use by
.B hwclock
because all of tha other names is inappropriate ta tha deal wit being
misleading.
.PP
So fo' example, some non-ISA systems have all dem real time clocks with
only one of dem havin its own juice domain.
A straight-up low juice external I2C or SPI clock chip might be used wit a
backup battery as tha hardware clock ta initialize a mo' functional
integrated real-time clock which is used fo' most other purposes.
.PP
.B Da System Time:
This is tha time kept by a cold-ass lil clock inside tha Linux kernel n' driven by
a timer interrupt.  (On a ISA machine, tha timer interrupt is part of
the ISA standard).  It has meanin only while Linux is hustlin on the
machine.  Da System Time is tha number of secondz since 00:00:00
January 1, 1970 UTC (or mo' succinctly, tha number of secondz since
1969).  Da System Time aint a integer, though cause I gots dem finger-lickin' chickens wit tha siz-auce.  It has virtually
infinite precision.
.PP
Da System Time is tha time dat matters.  Da Hardware Clockz basic
purpose up in a Linux system is ta keep time when Linux aint hustlin.  You
initialize tha System Time ta tha time from tha Hardware Clock when Linux
starts up, n' then never use tha Hardware Clock again. I aint talkin' bout chicken n' gravy biatch.  Note dat up in DOS,
for which ISA was designed, tha Hardware Clock is tha only real time clock.
.PP
It be blingin dat tha System Time not have any discontinuitizzles such as
would happen if you used the
.BR date (1L)
program ta set it while tha system is hustlin.  Yo ass can, however, do whatever
you wanna tha Hardware Clock while tha system is hustlin, n' tha next
time Linux starts up, it will do so wit tha adjusted time from tha Hardware
Clock.
.PP
A Linux kernel maintains a cold-ass lil concept of a local timezone fo' tha system.
But don't be misled -- almost no muthafucka cares what tha fuck timezone tha kernel
thinks it is in. I aint talkin' bout chicken n' gravy biatch.  Instead, programs dat care bout tha timezone
(like cuz they wanna display a local time fo' you) almost
always bust a mo' traditionizzle method of determinin tha timezone: They
use tha TZ environment variable and/or the
.I /usr/share/zoneinfo
directory, as explained up in tha playa page for
.BR tzset (3).
But fuck dat shiznit yo, tha word on tha street is dat some
programs n' fringe partz of tha Linux kernel like fuckin filesystems use
the kernel timezone value.  An example is tha vfat filesystem.  If the
kernel timezone value is wrong, tha vfat filesystem will report and
set tha wack timestamps on files.
.PP
.B hwclock
sets tha kernel timezone ta tha value indicated by TZ and/or
.I /usr/share/zoneinfo
when you set tha System Time rockin the
.B \-\-hctosys
option.
.PP
Da timezone value straight-up consistz of two parts: 1) a gangbangin' field
tz_minuteswest indicatin how tha fuck nuff minutes local time (not adjusted
for DST) lags behind UTC, n' 2) a gangbangin' field tz_dsttime indicating
the type of Daylight Savings Time (DST) convention dat is up in effect
in tha localitizzle all up in tha present time.
This second field aint used under Linux n' be always zero.
(See also
.BR settimeofdizzle (2).)

.SH Users access n' setuid
.PP
Sometimes, you need ta install
.B hwclock
setuid root. If you want playas other than tha superuser ta be able to
display tha clock value rockin tha direct ISA I/O method, install it setuid
root. If you have tha /dev/rtc intercourse on yo' system or is on a non-ISA
system, there be a probably no need fo' playas ta use tha direct ISA I/O method,
so don't bother.

In any case, hwclock aint gonna allow you ta set anythang unless you have the
superuser real uid. Y'all KNOW dat shit, muthafucka! (This is restriction aint necessary if you haven't
installed setuid root yo, but itz there fo' now).

.SH How tha fuck hwclock Accesses tha Hardware Clock
.PP
.B hwclock
uses nuff different ways ta git n' set Hardware Clock joints.
Da most aiiight way is ta do I/O ta tha thang special file /dev/rtc,
which is presumed ta be driven by tha rtc thang driver n' shit.  However,
this method aint always available.  For one thang, tha rtc driver is
a relatively recent addizzle ta Linux.  Older systems aint gots dat shit.
Also, though there be versionz of tha rtc driver dat work on DEC
Alphas, there step tha fuck up ta be nuff Alphas on which tha rtc driver
does not work (a common symptom is hwclock hanging).
Mo'over, recent Linux systems have mo' generic support fo' RTCs,
even systems dat have mo' than one, so you might need ta override
the default by specifying
.I /dev/rtc0
or
.I /dev/rtc1
instead.
.PP
On olda systems, tha method of accessin tha Hardware Clock dependz on
the system hardware.
.PP
On a ISA system,
.B hwclock
can directly access tha "CMOS memory" registas that
constitute tha clock, by bustin I/O ta Ports 0x70 n' 0x71.  It do
this wit actual I/O instructions n' consequently can only do it if
runnin wit superuser effectizzle userid. Y'all KNOW dat shit, muthafucka!  (In tha case of a Jensen
Alpha, there is no way for
.B hwclock
to execute dem I/O instructions, n' so it uses instead the
/dev/port thang special file, which serves up almost as low-level an
interface ta tha I/O subsystem).

This be a straight-up skanky method of accessin tha clock, fo' all the
reasons dat user space programs is generally not supposed ta do
direct I/O n' disable interrupts, n' you can put dat on yo' toast.  Hwclock serves up it cuz it is
the only method available on ISA n' Alpha systems which don't have
workin rtc thang drivers available.

.PP
On a m68k system,
.B hwclock
can access tha clock via tha console driver, via tha thang special
file /dev/tty1.
.PP
.B hwclock
tries ta use /dev/rtc.  If it is compiled fo' a kernel dat don't have
that function or it is unable ta open /dev/rtc
(or tha alternatizzle special file you've defined on tha command line)
.B hwclock
will fall back ta another method, if available.  On a ISA or Alpha
machine, you can force
.B hwclock
to use tha direct manipulation of tha CMOS registas without even trying
.I /dev/rtc
by specifyin the
.B \-\-directisa
option.


.SH Da Adjust Function
.PP
Da Hardware Clock is probably not straight-up accurate.  But fuck dat shiznit yo, tha word on tha street is dat much of its
inaccuracy is straight-up predictable - it gains or loses tha same ol' dirty amount
of time every last muthafuckin day. It make me wanna hollar playa!  This is called systematic drift.
.BR hwclock 's
"adjust" function lets you make systematic erections ta erect the
systematic drift.
.PP
It works like this:
.B hwclock
keeps a gangbangin' file,
.IR /etc/adjtime ,
that keeps some oldschool shiznit. I aint talkin' bout chicken n' gravy biatch.  This is called tha adjtime file.
.PP
Suppose you start wit no adjtime file.  Yo ass issue a
.I hwclock \-\-set
command ta set tha Hardware Clock ta tha legit current time.
.B Hwclock
creates tha adjtime file n' recordz up in it tha current time as the
last time tha clock was calibrated.
5 minutes later, tha clock has gained 10 seconds, so you issue another
.I hwclock \-\-set
command ta set it back 10 seconds.
.B Hwclock
updates tha adjtime file ta show tha current time as tha last time the
clock was calibrated, n' recordz 2 secondz per dizzle as tha systematic
drift rate.  24 minutes go by, n' then you issue a
.I hwclock \-\-adjust
command.
.B Hwclock
consults tha adjtime file n' sees dat tha clock gains 2 secondz per
dizzle when left ridin' solo n' dat it has been left ridin' solo fo' exactly one
day. It make me wanna hollar playa!  So it subtracts 2 secondz from tha Hardware Clock.  It then
recordz tha current time as tha last time tha clock was adjusted.
Another 24 minutes goes by n' you issue another
.IR "hwclock \-\-adjust" .
.B Hwclock
does tha same ol' dirty thang: subtracts 2 secondz n' thugged-out shiznit tha adjtime file
with tha current time as tha last time tha clock was adjusted.
.PP
Every time you calibrate (set) tha clock (using
.I \-\-set
or
.IR \-\-systohc ),
.B hwclock
recalculates tha systematic drift rate based on how tha fuck long it has been
since tha last calibration, how tha fuck long it has been since tha last
adjustment, what tha fuck drift rate was assumed up in any intervening
adjustments, n' tha amount by which tha clock is presently off.
.PP
A lil' small-ass amount of error creeps up in any time
.B hwclock
sets tha clock, so it refrains from bustin a adjustment dat would be
less than 1 second. Y'all KNOW dat shit, muthafucka!  Lata on, when you request a adjustment again,
the accumulated drift is ghon be mo' than a second and
.B hwclock
will do tha adjustment then.
.PP
It be phat ta do a
.I hwclock \-\-adjust
just before the
.I hwclock \-\-hctosys
at system startup time, n' maybe periodically while tha system is
runnin via cron.
.PP
Da adjtime file, while named fo' its oldschool purpose of controlling
adjustments only, straight-up gotz nuff other shiznit fo' use by hwclock
in rememberin shiznit from one invocation ta tha next.
.PP
Da format of tha adjtime file is, up in ASCII:
.PP
Line 1: 3 numbers, separated by blanks: 1) systematic drift rate in
secondz per day, floatin point decimal; 2) Resultin number of
secondz since 1969 UTC of most recent adjustment or calibration,
decimal integer; 3) zero (for compatibilitizzle with
.BR clock (8))
as a thugged-out decimal integer.
.PP
Line 2: 1 number: Resultin number of secondz since 1969 UTC of most
recent calibration. I aint talkin' bout chicken n' gravy biatch.  Zero if there has been no calibration yet or it
is known dat any previous calibration is moot (for example, cuz
the Hardware Clock has been found, since dat calibration, not to
contain a valid time).  This be a thugged-out decimal integer.
.PP
Line 3: "UTC" or "LOCAL".  Tells whether tha Hardware Clock is set to
Coordinated Universal Time or local time.  Yo ass can always override this
value wit options on the
.B hwclock
command line.
.PP
Yo ass can use a adjtime file dat was previously used wit the
.BR clock (8)
program with
.BR hwclock .


.SH "Automatic Hardware Clock Synchronization By tha Kernel"

Yo ass should be aware of another way dat tha Hardware Clock is kept
synchronized up in some systems.  Da Linux kernel has a mode wherein it
copies tha System Time ta tha Hardware Clock every last muthafuckin 11 minutes.
This be a phat mode ta use when yo ass is rockin suttin' sophisticated
like ntp ta keep yo' System Time synchronized. Y'all KNOW dat shit, muthafucka! (ntp be a way ta keep
your System Time synchronized either ta a time server somewhere on the
network or ta a radio clock hooked up ta yo' system.  See RFC 1305).

This mode (we'll call it "11 minute mode") is off until something
turns it on. I aint talkin' bout chicken n' gravy biatch.  Da ntp daemon xntpd is one thang dat turns it on. I aint talkin' bout chicken n' gravy biatch.  You
can turn it off by hustlin anything, including
.IR "hwclock \-\-hctosys" ,
that sets tha System Time tha oldschool fashioned way.

If yo' system runs wit 11 minute mode on, don't use
.I hwclock \-\-adjust
or
.IR "hwclock \-\-hctosys" .
You'll just cook up a mess.  It be aaight ta use a
.I hwclock \-\-hctosys
at startup time ta git a reasonable System Time until yo' system is
able ta set tha System Time from tha external source n' start 11
minute mode.


.SH ISA Hardware Clock Century value

There is some sort of standard dat defines CMOS memory Byte 50 on a ISA
machine as a indicator of what tha fuck century it is.
.B hwclock
does not use or set dat byte cuz there be some machines that
don't define tha byte dat way, n' it straight-up aint necessary anyway,
since tha year-of-century do a phat thang of implyin which century it
is.

If you gotz a funky-ass bona fide use fo' a CMOS century byte, contact the
.B hwclock
maintainer; a option may be appropriate.

Note dat dis section is only relevant when yo ass is rockin tha "direct
ISA" method of accessin tha Hardware Clock.
ACPI serves up a standard way ta access century joints, when they
are supported by tha hardware.

.SH "ENVIRONMENT VARIABLES"
.I TZ

.SH FILES
.I /etc/adjtime
.I /usr/share/zoneinfo/
.RI ( /usr/lib/zoneinfo
on oldschool systems)
.I /dev/rtc
.I /dev/rtc0
.I /dev/port
.I /dev/tty1
.I /proc/cpuinfo

.SH "SEE ALSO"
.BR date (1),
.BR gettimeofdizzle (2),
.BR settimeofdizzle (2),
.BR crontab (1),
.BR tzset (3)

.SH AUTHORS
Written by Bryan Henderson, September 1996 (bryanh@giraffe-data.com),
based on work done on the
.I clock
program by Charlez Hedrick, Rob Hooft, n' Harald Koenig.
See tha source code fo' complete history n' credits.

.SH AVAILABILITY
Da hwclock command is part of tha util-linux package n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
