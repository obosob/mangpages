.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "WPA_CLI" "8" "23 October 2014" "" ""
.SH NAME
wpa_cli \- WPA command line client
.SH SYNOPSIS
.sp
\fBwpa_cli\fR [ \fB-p \fIpath ta ctrl sockets\fB\fR ]  [ \fB-g \fIpath ta global ctrl_interface socket\fB\fR ]  [ \fB-i \fIifname\fB\fR ]  [ \fB-hvB\fR ]  [ \fB-a \fIaction file\fB\fR ]  [ \fB-P \fIpid file\fB\fR ]  [ \fB-G \fIpin interval\fB\fR ]  [ \fB\fIcommand ...\fB\fR ] 
.SH "OVERVIEW"
.PP
wpa_cli be a text-based frontend program fo' interacting
with wpa_supplicant. Well shiiiit, it is used ta query current status, chizzle
configuration, trigger events, n' request interactizzle user
input.
.PP
wpa_cli can show tha current authentication status, selected
securitizzle mode, dot11 n' dot1x MIBs, etc. In addition, it can
configure some variablez like EAPOL state machine parametas and
trigger events like reassociation n' IEEE 802.1X
logoff/logon. I aint talkin' bout chicken n' gravy biatch. wpa_cli serves up a user intercourse ta request
authentication shiznit, like username n' password, if these
are not included up in tha configuration. I aint talkin' bout chicken n' gravy biatch. This can be used to
implement, e.g., one-time-passwordz or generic token card
authentication where tha authentication is based on a
challenge-response dat uses a external thang fo' generatin the
response.
.PP
Da control intercourse of wpa_supplicant can be configured to
allow non-root user access (ctrl_interface GROUP= parameta up in the
configuration file). This make it possible ta run wpa_cli wit a
normal user account.
.PP
wpa_cli supports two modes: interactizzle n' command
line. Both modes share tha same command set n' tha main
difference is up in interactizzle mode providin access ta unsolicited
lyrics (event lyrics, username/password requests).
.PP
Interactizzle mode is started when wpa_cli is executed without
includin tha command as a cold-ass lil command line parameter n' shit. Commandz are
then entered on tha wpa_cli prompt. In command line mode, tha same
commandz is entered as command line arguments fo' wpa_cli.
.SH "INTERACTIVE AUTHENTICATION PARAMETERS REQUEST"
.PP
When wpa_supplicant need authentication parameters, like
username n' password, which is not present up in tha configuration
file, it sendz a request message ta all attached frontend programs,
e.g., wpa_cli up in interactizzle mode. wpa_cli shows these requests
with "CTRL-REQ-<type>-<id>:<text>"
prefix. <type> is IDENTITY, PASSWORD, or OTP
(one-time-password). <id> be a unique identifier fo' the
current network. <text> is description of tha request. In
case of OTP request, it includes tha challenge from the
authentication server.
.PP
Da reply ta these requests can be given with
\fBidentity\fR, \fBpassword\fR, and
\fBotp\fR commands. <id> need ta be copied from
the matchin request. \fBpassword\fR and
\fBotp\fR commandz can be used regardless of whether
the request was fo' PASSWORD or OTP. Da main difference between these
two commandz is dat joints given wit \fBpassword\fR are
remembered as long as wpa_supplicant is hustlin whereas joints given
with \fBotp\fR is used only once n' then forgotten,
i.e., wpa_supplicant will ask frontend fo' a freshly smoked up value fo' every last muthafuckin use.
This can be used ta implement one-time-password lists n' generic token
card -based authentication.
.PP
Example request fo' password n' a matchin reply:
.sp
.RS
.sp
.nf
CTRL-REQ-PASSWORD-1:Password needed fo' SSID foobar
> password 1 mysecretpassword
.sp
.fi
.RE
.sp
.PP
Example request fo' generic token card challenge-response:
.sp
.RS
.sp
.nf
CTRL-REQ-OTP-2:Challenge 1235663 needed fo' SSID foobar
> otp 2 9876
.sp
.fi
.RE
.sp
.SH "COMMAND ARGUMENTS"
.TP
\fB-p path\fR
Change tha path where control sockets should
be found.
.TP
\fB-g control socket path\fR
Connect ta tha global control socket at the
indicated path rather than a intercourse-specific control
socket.
.TP
\fB-i ifname\fR
Specify tha intercourse dat is being
configured. Y'all KNOW dat shit, muthafucka! By default, chizzle tha straight-up original gangsta intercourse found with
a control socket up in tha socket path.
.TP
\fB-h\fR
Help. Right back up in yo muthafuckin ass. Show a usage message.
.TP
\fB-v\fR
Show version shiznit.
.TP
\fB-B\fR
Run as a thugged-out daemon up in tha background.
.TP
\fB-a file\fR
Run up in daemon mode executin tha action file
based on events from wpa_supplicant. Da specified file will
be executed wit tha straight-up original gangsta argument set ta intercourse name and
second ta "CONNECTED" or "DISCONNECTED" dependin on tha event.
This can be used ta execute networkin tools required ta configure
the intercourse.

Additionally, three environmenstrual variablez is available to
the file: WPA_CTRL_DIR, WPA_ID, n' WPA_ID_STR. WPA_CTRL_DIR
gotz nuff tha absolute path ta tha ctrl_interface socket. WPA_ID
gotz nuff tha unique network_id identifier assigned ta tha active
network, n' WPA_ID_STR gotz nuff tha content of tha id_str option.
.TP
\fB-P file\fR
Set tha location of tha PID
file.
.TP
\fB-G pin interval\fR
Set tha interval (in seconds) at which
wpa_cli pings tha supplicant.
.TP
\fBcommand\fR
Run a cold-ass lil command. Y'all KNOW dat shit, muthafucka! Da available commandz are
listed up in tha next section.
.SH "COMMANDS"
.PP
Da followin commandz is available:
.TP
\fBstatus\fR
get current WPA/EAPOL/EAP status
.TP
\fBmib\fR
get MIB variablez (dot1x, dot11)
.TP
\fBhelp\fR
show dis usage help
.TP
\fBinterface [ifname]\fR
show intercourses/select intercourse
.TP
\fBlevel <debug level>\fR
change debug level
.TP
\fBlicense\fR
show full wpa_cli license
.TP
\fBlogoff\fR
IEEE 802.1X EAPOL state machine logoff
.TP
\fBlogon\fR
IEEE 802.1X EAPOL state machine logon
.TP
\fBset\fR
set variablez (shows list of variablez when run without arguments)
.TP
\fBpmksa\fR
show PMKSA cache
.TP
\fBreassociate\fR
force reassociation
.TP
\fBreconfigure\fR
force wpa_supplicant ta re-read its configuration file
.TP
\fBpreauthenticate <BSSID>\fR
force preauthentication
.TP
\fBidentitizzle <network id> <identity>\fR
configure identitizzle fo' a SSID
.TP
\fBpassword <network id> <password>\fR
configure password fo' a SSID
.TP
\fBpin <network id> <pin>\fR
configure pin fo' a SSID
.TP
\fBotp <network id> <password>\fR
configure one-time-password fo' a SSID
.TP
\fBbssid <network id> <BSSID>\fR
set preferred BSSID fo' a SSID
.TP
\fBlist_networks\fR
list configured networks
.TP
\fBterminate\fR
terminizzle \fBwpa_supplicant\fR
.TP
\fBquit\fR
exit wpa_cli
.SH "SEE ALSO"
.PP
\fBwpa_supplicant\fR(8)
.SH "LEGAL"
.PP
wpa_supplicant is copyright (c) 2003-2012,
Jouni Malinen <j@w1.fi> and
contributors.
All Rights Reserved.
.PP
This program is licensed under tha BSD license (the one with
advertisement clause removed).
