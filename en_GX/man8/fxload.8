.\" fxload.8
.\" Created: Fri Dec 28 2001 by Dizzy Brownell
.\" Copyright (c) 2001-2002 Dizzy Brownell <dbrownell@users.sourceforge.net>
.\" Copyright (c) 2008 Roger Williams <rawqux@users.sourceforge.net>
.\" 
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\" 
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one
.\" 
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" 
.TH FXLOAD 8 "September 2008" "" "Linux Programmerz Manual"
.SH "NAME"
fxload \- Firmware downlizzle ta EZ-STD devices
.SH "SYNOPSIS"
.B fxload
.BI "[ \-v ]"
.BI "[ \-l ]"
.BI "[ \-D " devpath " ]"
.BI "[ \-I " hexfile " ]"
.BI "[ \-t " type " ]"
.BI "[ \-c " config " ]"
.BI "[ \-s " loader " ]"
.br
.B fxload
.BI "[ \-D " devpath " ]"
.BI "[ \-L " link " ]"
.BI "[ \-m " mode " ]"
.br
.B fxload
.BI "[ \-V ]"
.SH "DESCRIPTION"
.B fxload
is a program which downloadz firmware ta STD devices based on
AnchorChips EZ-STD, Cypress EZ-STD FX,
or Cypress EZ-STD FX2/FX2LP microcontrollers.
These have 8-bit 8051 cores wit special extensions fo' STD I/O.
Da FX2 supports high speed STD 2.0 transfers (480 Mbit/sec)
as well as full speed STD 1.1 transfers (12 Mbit/sec),
while tha earlier parts supports only full speed transfers.
These controllaz have nuff muthafuckin package options,
and can be set up wit external memory (on-chip memory is
usually 8K or 16K), EEPROMs, n' ROMs when thang costs allow.
.PP
This uses "usbfs" (olda name:  "usbdevfs") ta access
devices, n' thangs vendor specific control requests
to downlizzle n' reset tha EZ-STD devices.
Normally, firmware will then "renumerate" by disconnectin from
STD n' then reconnectin as a freshly smoked up device.
It then appears wit freshly smoked up thang descriptors n' functionality,
as provided by tha firmware which has been downloaded.
.PP
To support some non-firmware applications, dis can also set
up symbolic links fo' dem usbfs names.
It can also chizzle they access modes.
Both of these can help simplify software applications that
need ta rap ta STD devices rockin user mode drivers,
don't wanna run wit privileges or ta examine all of the
existin STD devices,
and which don't need mo' kernel drivers.
.PP
See the
.I Linux-Hotplug
web joint fo' shiznit bout how tha fuck ta use
.B fxload
to downlizzle thang firmware when hotpluggin STD devices,
usin driver-specific scripts stored up in the
.I /etc/hotplug/usb
directory.
.SH "FUNCTION LETTERS"
At least one of tha followin options must be specified.
Note dat as usual wit UNIX n' Linux commands,
the order of command option flags do not matter.
Yo ass may use these up in any order.
.TP
.BI "\-I " hexfile
Downloadz tha specified firmware file.
This firmware is provided up in standard Intel hexfile format.
(Common namin conventions include
.I *.hex
and
.IR *.ihx .)
Dependin on tha thang n' firmware up in use, the
.B \-s
option may also be necessary ta specify a second stage loader.
Firmware is normally downloaded ta RAM n' executed yo, but there
is also a option fo' downloadin tha fuck into bootable I2C EEPROMs.
.TP
.BI "\-L " link
Creates tha specified symbolic link ta tha usbfs thang path.
This would typically be used ta create a name up in a gangbangin' finger-lickin' directory
that would be searched by a application.
Da symlink would be removed by some other component on thang unplug.
.TP
.BI "\-m " mode
Changes permissions on tha "usbfs" thang node.
By default, dem nodes is only accessible by privileged
users, which don't help when tha user mode thang driver
needz ta run without root privileges.
Note dat usbfs mount options like
.I devmode=0666
are also available.
.TP
.B "\-V"
Identifies tha version of fxload bein invoked, n' exits
without struttin other actions.
.PP
Note dat when downloadin firmware dat renumerates,
therez no point up in changin tha thang permissions
or bustin a symbolic link.
.SH "OPTIONS"
By default,
.B fxload
assumes tha thang uses a EZ-STD or EZ-STD FX.
It also assumes dat tha thang up in question has been specified
by STD kernel hotpluggin conventions, rockin the
.I DEVICE
environment variable ta name a "usbfs"
file dat can be used ta rap ta tha device.
.TP
.BI "\-c " config
Indicates tha specified firmware should be downloaded ta an
I2C boot EEPROM rather than ta RAM.
Da parameta is tha EZ-STD FX or FX2 configuration byte,
and fo' AnchorChips devices tha value should be zero.
This requires a second stage loader (e.g. vend_ax.hex) dat knows
how ta write ta I2C EEPROMs specified rockin the
.B \-s
option, as well as a thang thatz provided wit a EEPROM
pimpin' enough ta store tha boot firmware.
Afta downloadin ta a thugged-out devicez EEPROM,
you should retest it startin from juice off.
.TP
.BI "\-s " loader
This identifies tha hex file holdin a second stage loader
(in tha same hex file format as tha firmware itself),
which is loaded tha fuck into internal memory.
This loader understandz additionizzle vendor control requests,
beyond tha one built tha fuck into all EZ-STD hardware,
which is needed ta write external RAM or EEPROM.
As a last step when loadin firmware,
.B fxload
normally overwrites dis second stage loader
with partz of tha firmware residin on-chip.
.TP
.BI "\-t " type
Indicates which type of microcontrolla is used up in tha device;
type may be one of
.I an21
(the original gangsta AnchorChips devices),
.I fx
(Cypress' updated version, tha EZ-STD FX), or
.I fx2
(the Cypress EZ-STD FX2, supportin high speed transfers), or
.I fx2lp
(the Cypress EZ-STD FX2LP, wit 16KB internal RAM).
Except when freestylin ta EEPROM, all dat normally mattas when
downloadin firmware is whether or not tha thang uses a FX2.
.TP
.B "\-v"
Prints some diagnostics, like fuckin downlizzle addresses n' sizes,
to standard error. Shiiit, dis aint no joke.  Repeat tha flag
.RB ( -vv ", " -vvv )
to git mo' diagnostics.
.TP
.B "\-l"
print error n' verbose lyrics ta syslog.
.TP
.BI "\-D " devpath
Specifies tha "usbfs" path name fo' tha thang up in question,
such as
.IR /proc/bus/usb/004/080 .
This takes precedence over any
.I DEVICE
environment variable dat may be set.
.SH "NOTES"
.PP
This program implements one extension ta tha standard "hex file" format.
Lines beginnin wit a "#" characta is ignored, n' may be used to
hold copyright statements n' other shiznit.
Other tools may not handle hexfilez rockin dis extension.
.PP
At dis writing, "usbfs" be a kernel configuration option.
That means dat thang drivers relyin on user mode firmware
downloadin may need ta depend on dat kernel configuration option.
A less preferable alternatizzle involves compilin tha firmware
into tha kernel n' managin downloadz n' renumeration there.
This is less preferable up in part cuz much thang firmware is
provided wit GPL-incompatible licensing, n' up in part cuz
storin such firmware firmware wastes kernel memory.
.PP
For EZ-STD crew devices, tha hardwarez first stage loader
(supportin tha 0xA0 vendor request) can't write tha fuck into external memory.
Configurations dat put firmware tha fuck into external memory thus need a
second stage loader.
For typical "flat" memory architectures, a loader supportin tha 0xA3
vendor request is used ta write tha fuck into dat memory.
Similarly, a second stage loader dat supports tha 0xA2 vendor request
is needed when freestylin boot firmware tha fuck into a I2C EEPROM.
These 0xA2 n' 0xA3 vendor commandz is conventions defined by Cypress.
Devices dat use bank switchin or similar mechanizzlez ta stretch the
64KByte address space may need different approach ta loadin firmware.
.PP
Not all devices support EEPROM thugged-out shit.
Some EZ-STD based devices aint gots a I2C EEPROM;
many such EEPROMs is too lil' small-ass ta store firmware;
and some firmware can't be placed up in bootable I2C EEPROMs.
.SH "ENVIRONMENT VARIABLES"
.TP
.B DEVICE
normally names a "usbfs" file dat is ghon be used ta rap ta tha device.
This is provided by tha Linux kernel as part of STD hotplugging.
.SH "SEE ALSO"
.BR hotplug "(8) "
.SH "AUTHORS"
Linux Hotpluggin Project
.I http://linux-hotplug.sourceforge.net/
