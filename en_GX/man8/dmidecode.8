.TH DMIDECODE 8 "March 2012" "dmidecode"
.SH NAME
dmidecode \- \s-1DMI\s0 table decoder
.SH SYNOPSIS
.B dmidecode
.RB [ OPTIONS ]

.SH DESCRIPTION
.B dmidecode
is a tool fo' dumpin a cold-ass lil computerz \s-1DMI\s0 (some say \s-1SMBIOS\s0) table
contents up in a human-readable format. This table gotz nuff a thugged-out description of the
systemz hardware components, as well as other useful piecez of shiznit
like fuckin serial numbers n' \s-1BIOS\s0 revision. I aint talkin' bout chicken n' gravy biatch. Thanks ta dis table, you can
retrieve dis shiznit without havin ta probe fo' tha actual hardware.
While dis be a phat point up in termz of report speed n' safeness, dis also
makes tha presented shiznit possibly unreliable.

Da \s-1DMI\s0 table don't only describe what tha fuck tha system is currently made
of, it also can report tha possible evolutions (like fuckin tha fastest supported
\s-1CPU\s0 or tha maximal amount of memory supported).

\s-1SMBIOS\s0 standz fo' System Management \s-1BIOS\s0, while \s-1DMI\s0
standz fo' Desktop Management Interface. Both standardz is tightly related
and pimped by tha \s-1DMTF\s0 (Desktop Management Task Force).

As you run it,
.B dmidecode
will try ta locate tha \s-1DMI\s0 table. If it succeeds, it will then parse
this table n' display a list of recordz like dis one:

Handle 0x0002, DMI type 2, 8 bytes.
Base Board Information
        Manufacturer: Intel
        Product Name: C440GX+
        Version: 727281-001
        Serial Number: INCY92700942

Each record has:
.IP \(bu "\w'\(bu'u+1n"
A handle. This be a unique identifier, which allows recordz to
reference each other n' shit. For example, processor recordz probably reference
cache memory recordz rockin they handles.
.IP \(bu
A type. Da \s-1SMBIOS\s0 justification defines different typez of elements
a computa can be made of. In dis example, tha type is 2, which
means dat tha record gotz nuff "Base Board Information".
.IP \(bu
A size. Each record has a 4-byte header (2 fo' tha handle, 1 fo' tha type,
1 fo' tha size), tha rest is used by tha record data. This value don't
take text strings tha fuck into account (these is placed all up in tha end of tha record),
so tha actual length of tha record may be (and is often) pimped outa than the
displayed value.
.IP \(bu
Decoded joints, n' you can put dat on yo' toast. Da shiznit presented of course dependz on tha type
of record. Y'all KNOW dat shit, muthafucka! Here, our slick asses learn bout tha boardz manufacturer, model, version
and serial number.

.SH OPTIONS
.TP
.BR "-d" ", " "--dev-mem FILE"
Read memory from thang \fBFILE\fR (default: \fB/dev/mem\fR)
.TP
.BR "-q" ", " "--quiet"
Be less verbose. Unknown, inactizzle n' \s-1OEM\s0-specific entries is not
displayed. Y'all KNOW dat shit, muthafucka! Meta-data n' handle references is hidden.
.TP
.BR "-s" ", " "--strin KEYWORD"
Only display tha value of tha \s-1DMI\s0 strang identified by \fBKEYWORD\fR.
\fBKEYWORD\fR must be a keyword from tha followin list: \fBbios-vendor\fR,
\fBbios-version\fR, \fBbios-release-date\fR,
\fBsystem-manufacturer\fR, \fBsystem-product-name\fR,
\fBsystem-version\fR, \fBsystem-serial-number\fR,
\fBsystem-uuid\fR,
\fBbaseboard-manufacturer\fR, \fBbaseboard-product-name\fR,
\fBbaseboard-version\fR, \fBbaseboard-serial-number\fR,
\fBbaseboard-asset-tag\fR, \fBchassis-manufacturer\fR,
\fBchassis-type\fR,
\fBchassis-version\fR, \fBchassis-serial-number\fR,
\fBchassis-asset-tag\fR, \fBprocessor-family\fR,
\fBprocessor-manufacturer\fR,
\fBprocessor-version\fR, \fBprocessor-frequency\fR.
Each keyword correspondz ta a given \s-1DMI\s0 type n' a given offset
within dis entry type.
Not all strings may be meaningful or even defined on all systems. Right back up in yo muthafuckin ass. Some
keywordz may return mo' than one result on some systems (e.g.
\fBprocessor-version\fR on a multi-processor system).
If \fBKEYWORD\fR aint provided or not valid, a list of all valid
keywordz is printed and
.B dmidecode
exits wit a error.
This option cannot be used mo' than once.
.TP
.BR "-t" ", " "--type TYPE"
Only display tha entriez of type \fBTYPE\fR. \fBTYPE\fR can be either a
\s-1DMI\s0 type number, or a cold-ass lil comma-separated list of type numbers, or a
keyword from tha followin list: \fBbios\fR, \fBsystem\fR,
\fBbaseboard\fR, \fBchassis\fR, \fBprocessor\fR, \fBmemory\fR,
\fBcache\fR, \fBconnector\fR, \fBslot\fR. Refer ta tha DMI TYPES section
below fo' details.
If dis option is used mo' than once, tha set of displayed entries will be
the union of all tha given types.
If \fBTYPE\fR aint provided or not valid, a list of all valid keywords
is printed and
.B dmidecode
exits wit a error.
.TP
.BR "-u" ", " "--dump"
Do not decode tha entries, dump they contents as hexadecimal instead.
Note dat dis is still a text output, no binary data is ghon be thrown upon
you fo'sho. Da strings attached ta each entry is displayed as both
hexadecimal n' \s-1ASCII\s0. This option is mainly useful fo' debugging.
.TP
.BR "  " "  " "--dump-bin FILE"
Do not decode tha entries, instead dump tha DMI data ta a gangbangin' file up in binary
form. Da generated file is suitable ta pass ta \fB--from-dump\fR
later.
.TP
.BR "  " "  " "--from-dump FILE"
Read tha DMI data from a funky-ass binary file previously generated rockin 
\fB--dump-bin\fR.
.TP
.BR "-h" ", " "--help"
Display usage shiznit n' exit
.TP
.BR "-V" ", " "--version"
Display tha version n' exit
.P
Options --string, --type n' --dump-bin
determine tha output format n' is mutually exclusive.
.P
Please note up in case of
.B dmidecode
is run on a system wit BIOS dat boasts freshly smoked up SMBIOS justification, which
is not supported by tha tool yet, it will print up relevant message in
addizzle ta axed data on tha straight-up top of tha output. Thus informs the
output data aint reliable.

.SH "DMI TYPES"
Da \s-1SMBIOS\s0 justification defines tha followin \s-1DMI\s0 types:

.TS
r l
__
r l.
Type	Information
0	BIOS
1	System
2	Baseboard
3	Chassis
4	Processor
5	Memory Controller
6	Memory Module
7	Cache
8	Port Connector
9	System Slots
10	On Board Devices
11	OEM Strings
12	System Configuration Options
13	BIOS Language
14	Group Associations
15	System Event Log
16	Physical Memory Array
17	Memory Device
18	32-bit Memory Error
19	Memory Array Mapped Address
20	Memory Device Mapped Address
21	Built-in Pointin Device
22	Portable Battery
23	System Reset
24	Hardware Security
25	System Juice Controls
26	Voltage Probe
27	Coolin Device
28	Temperature Probe
29	Electrical Current Probe
30	Out-of-band Remote Access
31	Boot Integritizzle Skillz
32	System Boot
33	64-bit Memory Error
34	Management Device
35	Management Device Component
36	Management Device Threshold Data
37	Memory Channel
38	IPMI Device
39	Juice Supply
40	Additionizzle Information
41	Onboard Devices Extended Information
42	Management Controlla Host Interface
.TE

Additionally, type 126 is used fo' disabled entries n' type 127 be an
end-of-table marker n' shit. Types 128 ta 255 is fo' \s-1OEM\s0-specific data.
.B dmidecode
will display these entries by default yo, but it can only decode them
when tha vendors have contributed documentation or code fo' em.

Keywordz can be used instead of type numbers wit \fB--type\fR.
Each keyword is equivalent ta a list of type numbers:

.TS
l l
__
l l.
Keyword	Types
bios	0, 13
system	1, 12, 15, 23, 32
baseboard	2, 10, 41
chassis	3
processor	4
memory	5, 6, 16, 17
cache	7
connector	8
slot	9
.TE

Keywordz is matched case-insensitively. Da followin command lines is equivalent:
.IP \(bu "\w'\(bu'u+1n"
dmidecode --type 0 --type 13
.IP \(bu
dmidecode --type 0,13
.IP \(bu
dmidecode --type bios
.IP \(bu
dmidecode --type BIOS

.SH BINARY DUMP FILE FORMAT
Da binary dump filez generated by --dump-bin n' read rockin --from-dump
are formatted as bigs up:
.IP \(bu "\w'\(bu'u+1n"
Da SMBIOS or DMI entry point is located at offset 0x00.
It be crafted ta hard-code tha table address at offset 0x20.
.IP \(bu "\w'\(bu'u+1n"
Da DMI table is located at offset 0x20.

.SH FILES
.I /dev/mem
.SH BUGS
Mo' often than not, shiznit contained up in tha \s-1DMI\s0 tablez is inaccurate,
incomplete or simply wrong.
.SH AUTHORS
Alan Cox, Jean Delvare
.SH "SEE ALSO"
.BR biosdecode (8),
.BR mem (4),
.BR ballershizzle (8),
.BR vpddecode (8)
