.TH  "nx_server_selinux"  "8"  "nx_server" "mgrepl@redhat.com" "nx_server SELinux Policy documentation"
.SH "NAME"
nx_server_r \- \fBnx_server user role\fP - Securitizzle Enhanced Linux Policy

.SH DESCRIPTION

SELinux supports Rolez Based Access Control (RBAC), some Linux rolez is login roles, while other rolez need ta be transizzle into.

.I Note:
Examplez up in dis playa page will use the
.B staff_u
SELinux user.

Non login rolez is probably used fo' administratizzle tasks. For example, tasks dat require root privileges.  Rolez control which types a user can run processes with. Rolez often have default types assigned ta em.

Da default type fo' tha nx_server_r role is nx_server_t.

The
.B newrole
program ta transizzle directly ta dis role.

.B newrole -r nx_server_r -t nx_server_t

.B sudo
is tha preferred method ta do transizzle from one role ta another n' shit.  Yo ass setup sudo ta transizzle ta nx_server_r by addin a similar line ta tha /etc/sudoers file.

USERNAME ALL=(ALL) ROLE=nx_server_r TYPE=nx_server_t COMMAND

.br
sudo will run COMMAND as staff_u:nx_server_r:nx_server_t:LEVEL

When rockin a a non login role, you need ta setup SELinux so dat yo' SELinux user can reach nx_server_r role.

Execute tha followin ta peep all of tha assigned SELinux roles:

.B semanage user -l

Yo ass need ta add nx_server_r ta tha staff_u user n' shit.  Yo ass could setup tha staff_u user ta be able ta use tha nx_server_r role wit a cold-ass lil command like:

.B $ semanage user -m -R 'staff_r system_r nx_server_r' staff_u


.SH BOOLEANS
SELinux policy is customizable based on least access required. Y'all KNOW dat shit, muthafucka!  nx_server policy is mad flexible n' has nuff muthafuckin booleans dat allow you ta manipulate tha policy n' run nx_server wit tha tightest access possible.


.PP
If you wanna deny any process from ptracin or debuggin any other processes, you must turn on tha deny_ptrace boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P deny_ptrace 1

.EE

.PP
If you wanna allow all domains ta use other domains file descriptors, you must turn on tha domain_fd_use boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P domain_fd_use 1

.EE

.PP
If you wanna allow all domains ta have tha kernel load modules, you must turn on tha domain_kernel_load_modulez boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P domain_kernel_load_modulez 1

.EE

.PP
If you wanna allow all domains ta execute up in fips_mode, you must turn on tha fips_mode boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P fips_mode 1

.EE

.PP
If you wanna enable readin of urandom fo' all domains, you must turn on tha global_ssp boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P global_ssp 1

.EE

.SH "MANAGED FILES"

Da SELinux process type nx_server_t can manage filez labeled wit tha followin file types.  Da paths listed is tha default paths fo' these file types.  Note tha processes UID still need ta have DAC permissions.

.br
.B nx_server_home_ssh_t

	/opt/NX/home/nx/\.ssh(/.*)?
.br
	/usr/NX/home/nx/\.ssh(/.*)?
.br
	/var/lib/nxserver/home/.ssh(/.*)?
.br

.br
.B nx_server_tmp_t


.br
.B nx_server_var_lib_t

	/opt/NX/home(/.*)?
.br
	/usr/NX/home(/.*)?
.br
	/var/lib/nxserver(/.*)?
.br

.br
.B nx_server_var_run_t

	/opt/NX/var(/.*)?
.br

.br
.B ssh_home_t

	/var/lib/[^/]+/\.ssh(/.*)?
.br
	/root/\.ssh(/.*)?
.br
	/var/lib/one/\.ssh(/.*)?
.br
	/var/lib/pgsql/\.ssh(/.*)?
.br
	/var/lib/openshift/[^/]+/\.ssh(/.*)?
.br
	/var/lib/amanda/\.ssh(/.*)?
.br
	/var/lib/stickshift/[^/]+/\.ssh(/.*)?
.br
	/var/lib/gitolite/\.ssh(/.*)?
.br
	/var/lib/nocpulse/\.ssh(/.*)?
.br
	/var/lib/gitolite3/\.ssh(/.*)?
.br
	/var/lib/openshift/gear/[^/]+/\.ssh(/.*)?
.br
	/root/\.shosts
.br
	/home/[^/]*/\.ssh(/.*)?
.br
	/home/[^/]*/\.ansible/cp/.*
.br
	/home/[^/]*/\.shosts
.br

.SH "COMMANDS"
.B semanage fcontext
can also be used ta manipulate default file context mappings.
.PP
.B semanage permissive
can also be used ta manipulate whether or not a process type is permissive.
.PP
.B semanage module
can also be used ta enable/disable/install/remove policy modules.

.B semanage boolean
can also be used ta manipulate tha booleans

.PP
.B system-config-selinux
is a GUI tool available ta customize SELinux policy settings.

.SH AUTHOR
This manual page was auto-generated using
.B "sepolicy manpage".

.SH "SEE ALSO"
selinux(8), nx_server(8), semanage(8), restorecon(8), chcon(1), sepolicy(8)
, setsebool(8), nx_server_ssh_selinux(8), nx_server_ssh_selinux(8)</textarea>

<div id="button">
<br/>
<input type="submit" name="translate" value="Tranzizzle Dis Shiznit" />
</div>

</form> 

</div>

<div id="space3"></div>
<div id="disclaimer"><h2>Use this to translate your words into gangsta</h2>
<h2>Click <a href="more.html">here</a> to learn more about Gizoogle</h2></div>

</body>
</html>
