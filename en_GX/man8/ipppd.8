.\" manual page [] fo' ipppd 2.0
.\" $Id: ipppd.man.in,v 1.11 2003/07/01 09:03:45 keil Exp $
.\" CHECKIN $Date: 2003/07/01 09:03:45 $
.\" SH section heading
.\" SS subsection heading
.\" LP paragraph
.\" IP indented paragraph
.\" TP hangin label
.TH IPPPD 8 "2003/07/01" isdn4k-utils-3.13 "Linux System Administration"
.SH NAME
ipppd \- (ISDN) Point ta Point Protocol daemon
.SH SYNOPSIS
.B /usr/sbin/ipppd
[
.I options
] [
.I device
]
.SH DESCRIPTION
.LP
Da Point-to-Point Protocol (PPP) serves up a method fo' transmitting
datagrams over serial point-to-point links.  PPP
is composed of three parts: a method fo' encapsulatin datagrams over
serial links, a extensible Link Control Protocol (LCP), and
a crew of Network Control Protocols (NCP) fo' establishing
and configurin different network-layer protocols.
.LP
Da encapsulation scheme is provided by driver code up in tha kernel.
.I ipppd
provides tha basic LCP, authentication support, n' an
NCP fo' establishin n' configurin tha Internizzle Protocol (IP)
(called tha IP Control Protocol, IPCP).
.SH NOTES fo' (ISDN) IPPPD
This special (ISDN) PPP daemon be a modified version of pppd 
and serves up synchronous PPP fo' ISDN connections.
.PP
If you need asynchronous PPP over ISDN lines use pppd
instead wit tha ISDN characta devices, see
.BR ttyI (4).
.PP
Da 
.I ipppd 
can handle multiple devices. This is necessary to
link nuff muthafuckin connections together ta one bundle.
.I ipppd 
should be started once. Well shiiiit, it opens tha devices
and waits fo' connections. 
If tha connections is closed
.I ipppd
reopens tha thang automatically (the device, thatz it ... not tha link
to tha remote).
So you shouldn't bust a cap up in tha ipppd ta close a link. Instead, trigger
a hangup on tha netdevice layer  by 'isdnctrl hangup <device>'.
.PP
Da facilitizzle ta configure tha daemon via file
/etc/ppp/ioptions.<devname> is disabled. Y'all KNOW dat shit, muthafucka! 
Da 'file' option or tha command line may be used fo' individual
configuration.
.PP
Do not set tha permissionz of tha program ta 'setuid ta root 
on execution'. Call tha daemon as root instead.
No common user should have tha need ta booty-call tha daemon!
.SH OPTIONS
.TP
.I <device>
Communicate over tha named device.  Da strang "/dev/"
is prepended if necessary.  If no thang name is given,
or if tha name of tha controllin terminal is given,
.I ipppd
will use tha controllin terminal, n' aint gonna fork ta put itself in
the background.
.TP
.I <local_IP_address>\fB:\fI<remote_IP_address>
Set tha local and/or remote intercourse IP addresses.  Either one may be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da IP addresses can be specified wit a host name or in
decimal dot notation (e.g. 150.234.56.78).  Da default local
address is tha (first) IP address of tha system (unless the
.B noipdefault
option is given).  Da remote address is ghon be obtained from tha peer
if not specified up in any option. I aint talkin' bout chicken n' gravy biatch.  Thus, up in simple cases, dis option is
not required. Y'all KNOW dat shit, muthafucka!  If a local and/or remote IP address is specified with
this option,
.I ipppd
will not accept a gangbangin' finger-lickin' different value from tha peer up in tha IPCP
negotiation, unless the
.B ipcp-accept-local
and/or
.B ipcp-accept-remote
options is given, respectively.
.TP
.B active-filta \fIfilter-expression
Specifies a packet filta ta be applied ta data packets ta determine
which packets is ta be regarded as link activity, n' therefore reset
the idle timer, or cause tha link ta be brought up in demand-dialling
mode. This option is useful up in conjunction wit the
\fBidle\fR option if there be packets bein busted or received
regularly over tha link (for example, routin shiznit packets)
which would otherwise prevent tha link from eva appearin ta be idle.
Da \fIfilter-expression\fR syntax be as busted lyrics bout fo' tcpdump(1),
except dat qualifiers which is inappropriate fo' a PPP link, such as
\fBether\fR n' \fBarp\fR, is not permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Generally tha filter
expression should be enclosed up in single-quotes ta prevent whitespace
in tha expression from bein interpreted by tha shell. This option
is currently only available if both tha kernel n' ipppd was compiled
with IPPP_FILTER defined.
.TP
.B -ac
Disable Address/Control compression negotiation (use default, i.e.
address/control field compression disabled).
.TP
.B -all
Don't request or allow negotiation of any options fo' LCP n' IPCP (use
default joints).
.TP
.B auth
Require tha peer ta authenticate itself before allowin network
packets ta be busted or received.
.TP
.B bsdcomp \fInr,nt
Request dat tha peer compress packets dat it sends, rockin the
BSD-Compress scheme, wit a maximum code size of \fInr\fR bits, and
agree ta compress packets busted ta tha peer wit a maximum code size of
\fInt\fR bits, n' you can put dat on yo' toast.  If \fInt\fR aint specified, it defaults ta tha value
given fo' \fInr\fR.  Values up in tha range 9 ta 15 may be used for
\fInr\fR n' \fInt\fR; larger joints give betta compression but
consume mo' kernel memory fo' compression dictionaries.
Alternatively, a value of 0 fo' \fInr\fR or \fInt\fR disables
compression up in tha correspondin direction.
.TP
.B \-bsdcomp
Disablez compression; \fIipppd\fR aint gonna request or smoke ta compress
packets rockin tha BSD-Compress scheme.
.TP
.B callback \fI<string>
Request tha peer ta booty-call back all up in tha location given in
<string>. Usually dis be a funky-ass beeper number yo, but it may be interpreted
differently (or ignored) dependin on tha \fBcallback-type\fR option.
If <string> is tha empty string, \fIipppd\fR automatically tries to
negotiate a cold-ass lil callback type dat do not need a location ta be specified.
.TP
.B callback-delay \fI<n>
Callback delay fo' CBCP up in seconds. If callback is negotiated using
CBCP, request dat tha peer waits at least <n> secondz before calling
back. Ignored if callback is negotiated as specified up in RFC
1570. Legal range is 0..255, default is 5.
.TP
.B callback-cbcp
Enable callback negotiation via CBCB (default).
.TP
.B -callback-cbcp
Disable callback negotiation via CBCB.
.TP
.B no-callback-cbcp
Disable callback negotiation via CBCB.
.TP
.B callback-cbcp-preferred
If both CBCP n' RFC 1570 steez callback negotiation is enabled, CBCP
is preferred (default)
.TP
.B callback-rfc1570-preferred
If both CBCP n' RFC 1570 steez callback negotiation is enabled, RFC
1570 steez is preferred.
.TP
.B callback-rfc1570
Enable RFC 1570 steez callback negotiation (default).
.TP
.B -callback-rfc1570
Disable RFC 1570 steez callback negotiation.
.TP
.B no-callback-rfc1570
Disable RFC 1570 steez callback negotiation (default).
.TP
.B callback-type \fI<n>
Specifies how tha fuck ta interpret tha location identifier given as
parameta of tha \fBcallback\fR option. I aint talkin' bout chicken n' gravy biatch. Legal joints is 0..4 fo' realz. A value 
of 0 means dat only callback types should be negotiated dat need no 
extra location id. Y'all KNOW dat shit, muthafucka! No location id is busted ta tha peer up in dis case.
For RFC 1570 steez callback negotiation, tha joints 1..4
indicate how tha fuck tha peer should interpret tha location identifier:
1 - id be a system specific dial string,  2 - id is used fo' database
lookup by tha peer, 3 - id be a funky-ass beeper number, n' 4 id be a name. For
CBCP callback negotiation, tha location id be always interpreted as a
phone number.
.TP
.B -ccp
Necessary fo' all dem netblazers on tha remote side.
.TP
.B noccp
same as
.B -ccp
.TP
.B +chap
Require tha peer ta authenticate itself rockin CHAP [Cryptographic
Handshake Authentication Protocol] authentication.
.TP
.B -chap
Don't smoke ta authenticate rockin CHAP.
.TP
.B chap-interval \fI<n>
If dis option is given,
.I ipppd
will rechallenge tha peer every last muthafuckin <n> seconds.
.TP
.B chap-max-challenge \fI<n>
Set tha maximum number of CHAP challenge transmissions ta <n> (default
10).
.TP
.B chap-restart \fI<n>
Set tha CHAP restart interval (retransmission timeout fo' challenges)
to <n> secondz (default 3).
.TP
.B debug
Increase debuggin level (same as \fB\-d\fR).
If dis option is given, \fIipppd\fR will log tha contentz of all
control packets busted or received up in a readable form.  Da packets are
logged all up in syslog wit facilitizzle \fIdaemon\fR n' level
\fIdebug\fR.  This shiznit can be pimped up ta a gangbangin' file by settin up
/etc/syslog.conf appropriately (see syslog.conf(5)).
.TP
.B -d
Increase debuggin level (same as tha \fBdebug\fR option).
.TP
.B defaultroute
Add a thugged-out default route ta tha system routin tables, rockin tha peer as
the gateway, when IPCP negotiation is successfully completed.
This entry is removed when tha PPP connection is broken.
.TP 
.B \-defaultroute
Disable tha \fBdefaultroute\fR option. I aint talkin' bout chicken n' gravy biatch.  Da system administrator who
wishes ta prevent playas from bustin default routes wit \fIipppd\fR
can do so by placin dis option up in tha /etc/ppp/ioptions file.
.TP
.B deldefaultroute
Replace default route if it already exists, n' you can put dat on yo' toast. Together wit tha option 
\fBdefaultroute\fR, dis will replace any existin default route by a new
one all up in dis ipppdz intercourse when it comes up.
.TP 
.B -detach
Don't fork ta become a funky-ass background process (otherwise
.I ipppd
will do so if a serial thang other than its controllin terminal is
specified).
.TP
.B domain \fI<d>
Append tha domain name <d> ta tha local host name fo' authentication
purposes.  For example, if gethostname() returns tha name porsche yo, but the
fully qualified domain name is porsche.Quotron.COM, you would use the
domain option ta set tha domain name ta Quotron.COM.
.TP
.B file \fI<f>
Read options from file <f> (the format is busted lyrics bout below).
.TP
.B -ip
Disable IP address negotiation. I aint talkin' bout chicken n' gravy biatch.  If dis option is used, tha remote IP
address must be specified wit a option on tha command line or up in an
options file.
.TP
.B +ip-protocol
Enable tha IPCP n' IP protocols. This is tha default condition. I aint talkin' bout chicken n' gravy biatch. This
option is only needed if tha default settin is -ip-protocol.
.TP
.B -ip-protocol
Disable tha IPCP n' IP protocols. This should only be used if you
know dat yo ass is rockin a cold-ass lil client which only understandz IPX n' you
don't wanna confuse tha client wit tha IPCP protocol.
.TP
.B +ipx-protocol
Enable tha IPXCP n' IPX protocols. This is tha default condizzle if
your kernel supports IPX. This option is only needed if tha default
settin is -ipx-protocol. If yo' kernel do not support IPX then this
option gonna git no effect.
.TP
.B -ipx-protocol
Disable tha IPXCP n' IPX protocols. This should only be used if you
know dat yo ass is rockin a cold-ass lil client which only understandz IP n' you
don't wanna confuse tha client wit tha IPXCP protocol.
.TP
.B ipcp-accept-local
With dis option,
.I ipppd
will accept tha peerz scam of our local IP address, even if the
local IP address was specified up in a option.
.TP
.B ipcp-accept-remote
With dis option,
.I ipppd
will accept tha peerz scam of its (remote) IP address, even if the
remote IP address was specified up in a option.
.TP
.B ipcp-max-configure \fI<n>
Set tha maximum number of IPCP configure-request transmissions ta <n>
(default 10).
.TP
.B ipcp-max-failure \fI<n>
Set tha maximum number of IPCP configure-NAKs returned before starting
to bust configure-Rejects instead ta <n> (default 10).
.TP
.B ipcp-max-terminizzle \fI<n>
Set tha maximum number of IPCP terminate-request transmissions ta <n>
(default 3).
.TP
.B ipcp-restart \fI<n>
Set tha IPCP restart interval (retransmission timeout) ta <n> seconds
(default 3).
.TP
.B ipparam \fIstring
Provides a extra parameta ta tha ip-up n' ip-down scripts, n' you can put dat on yo' toast.  If this
option is given, tha \fIstring\fR supplied is given as tha 6th
parameta ta dem scripts.
.TP
.B ipx-network \fI<n>
Set tha IPX network number up in tha IPXCP configure request frame to
<n>. There is no valid default. If dis option aint specified then
the network number is obtained from tha peer n' shit. If tha peer do not
have tha network number, tha IPX protocol aint gonna be started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is
a hexadecimal number n' is entered without any leadin sequence such
as 0x. Well shiiiit, it is related ta tha \fIipxcp-accept-network\fR option.
.TP
.B ipx-node \fI<n>:<m>
Set tha IPX node numbers. Da two node numbers is separated from each
other wit a cold-ass lil colon character n' shit. Da first number <n> is tha local node
number n' shit. Da second number <m> is tha peerz node number n' shit. Each node number
is a hexadecimal number, ta tha maximum of ten dope digits, n' you can put dat on yo' toast. The
node numbers on tha ipx-network must be unique. There is no valid
default. If dis option aint specified then tha node number is
obtained from tha peer n' shit. This option be a related ta the
\fIipxcp-accept-local\fR n' \fIipxcp-accept-remote\fR options.
.TP
.B ipx-router-name \fI<string>
Set tha name of tha router n' shit. This be a strang n' is busted ta tha peer
as shiznit data.
.TP
.B ipx-routin \fI<n>
Set tha routin protocol ta be received by dis option. I aint talkin' bout chicken n' gravy biatch. Use a
comma-separated list if you wanna specify mo' than one 
protocol.
Da '\fInone\fR'
option (0) may be specified as tha only instizzle of ipx-routing. The
values may be \fI0\fR fo' \fINONE\fR, \fI2\fR fo' \fIRIP/SAP\fR, and
\fI4\fR fo' \fINLSP\fR.
.TP
.B ipxcp-accept-local
Accept tha peerz NAK fo' tha node number specified up in tha ipx-node
option. I aint talkin' bout chicken n' gravy biatch. If a node number was specified, n' non-zero, tha default is
to insist dat tha value be used. Y'all KNOW dat shit, muthafucka! If you include dis option then you
will permit tha peer ta override tha entry of tha node number.
.TP
.B ipxcp-accept-network
Accept tha peerz NAK fo' tha network number specified up in the
ipx-network option. I aint talkin' bout chicken n' gravy biatch. If a network number was specified, n' non-zero, the
default is ta insist dat tha value be used. Y'all KNOW dat shit, muthafucka! If you include this
option then yo big-ass booty is ghon permit tha peer ta override tha entry of tha node
number.
.TP
.B ipxcp-accept-remote
Use tha peerz network number specified up in tha configure request
frame. If a node number was specified fo' tha peer n' dis option was
not specified, tha peer is ghon be forced ta use tha value which you have
specified.
.TP
.B ipxcp-max-configure \fI<n>
Set tha maximum number of IPXCP configure request frames which the
system will bust ta <n>. Da default is 10.
.TP
.B ipxcp-max-failure \fI<n>
Set tha maximum number of IPXCP NAK frames which tha local system will
send before it rejects tha options. Da default value is 3.
.TP
.B ipxcp-max-terminizzle \fI<n>
Set tha maximum number of IPXCP terminizzle request frames before the
local system considaz dat tha peer aint listenin ta em. The
default value is 3.
.TP
.B kdebug \fIn
Enable debuggin code up in tha kernel-level PPP driver n' shit.  Da argument
\fIn\fR be a number which is tha sum of tha followin joints: 1 to
enable general debug lyrics, 2 ta request dat tha contents of
received packets be printed, n' 4 ta request dat tha contents of
transmitted packets be printed.
.TP
.B lcp-echo-failure \fI<n>
If dis option is given, \fIipppd\fR will presume tha peer ta be dead
if \fIn\fR LCP echo-requests is busted without receivin a valid LCP
echo-reply.  If dis happens, \fIipppd\fR will terminizzle the
connection. I aint talkin' bout chicken n' gravy biatch.  Use of dis option requires a non-zero value fo' the
\fBlcp-echo-interval\fR parameter n' shit.  This option can be used ta enable
\fIipppd\fR ta terminizzle afta tha physical connection has been broken
(e.g., tha line hung up) up in thangs where no hardware modem
control lines is available.
.TP
.B lcp-echo-interval \fI<n>
If dis option is given, \fIipppd\fR will bust a LCP echo-request
frame ta tha peer every last muthafuckin \fIn\fR seconds.  With Linux, the
echo-request is busted when no packets done been received from tha peer
for \fIn\fR seconds.  Normally tha peer should respond ta the
echo-request by bustin  a echo-reply.  This option can be used with
the \fBlcp-echo-failure\fR option ta detect dat tha peer is no longer
connected.
.TP
.B lcp-max-configure \fI<n>
Set tha maximum number of LCP configure-request transmissions ta <n>
(default 10).
.TP
.B lcp-max-failure \fI<n>
Set tha maximum number of LCP configure-NAKs returned before starting
to bust configure-Rejects instead ta <n> (default 10).
.TP
.B lcp-max-terminizzle \fI<n>
Set tha maximum number of LCP terminate-request transmissions ta <n>
(default 3).
.TP
.B lcp-restart \fI<n>
Set tha LCP restart interval (retransmission timeout) ta <n> seconds
(default 3).
.TP
.B lock
Specifies dat \fIipppd\fR should create a UUCP-style lock file fo' the
serial thang ta ensure exclusive access ta tha device.
.TP
.B login
Use tha system password database fo' authenticatin tha peer using
PAP, n' record tha user up in tha system wtmp file.
.TP
.B -mn
Disable magic number negotiation. I aint talkin' bout chicken n' gravy biatch.  With dis option,
.I ipppd
cannot detect a looped-back line.
.TP
.B +mp
enablez MPPP negotiation
.TP
.B mru \fI<n>
Set tha MRU [Maximum Receive Unit] value ta <n> fo' negotiation.
.I ipppd
will ask tha peer ta bust packetz of no mo' than <n> bytes.  The
minimum MRU value is 128.  Da default MRU value is 1500.  A value of
296 is recommended fo' slow links (40 bytes fo' TCP/IP header + 256
bytez of data).
.TP
.B -mru
Disable MRU [Maximum Receive Unit] negotiation. I aint talkin' bout chicken n' gravy biatch.  With dis option,
\fIipppd\fR will use tha default MRU value of 1500 bytes.
.TP
.B ms-dns \fI<n>
This option sets tha IP address or addresses fo' tha Domain Name
Server n' shit. Well shiiiit, it is used by Microsizzlez Windows clients, n' you can put dat on yo' toast. Da primary DNS
address is specified by tha straight-up original gangsta instizzle of tha ms-dns option. I aint talkin' bout chicken n' gravy biatch. The
secondary is specified by tha second instance.
.TP
.B ms-get-dns
Implements tha client side of RFC1877.  If \fIipppd\fR be actin as a cold-ass lil client
to a server dat implements RFC1877 like fuckin one intended ta be used
with Microsizzlez Windows clients, dis option allows \fIipppd\fR ta obtain one
or two DNS (Domain Name Server) addresses from tha server n' shit.  It do
not do anythang wit these addresses except put dem up in the
environment (MS_DNS1 MS_DNS2) dat is passed ta scripts, n' you can put dat on yo' toast.  For
compatibilitizzle wit tha async pppd, DNS1 DNS2 environment variablez are
also set fo' realz. A sample resolv.conf is pimped up in /etc/ppp/resolv.conf.
Da /etc/ppp/ip-up script should use dis shiznit ta perform
whatever adjustment is necessary.  Note: RFC1877 be a wack protocol
layerin violation, tha erect approach would be ta use DHCP after
the IPCP phase.
.TP
.B ms-get-wins
As ms-get-dns but fo' WINS (Windows Internizzle Name Skillz) server
addresses. Environment variablez is MS_WINS1 n' MS_WINS2.
.TP
.B mtu \fI<n>
Set tha MTU [Maximum Transmit Unit] value ta \fI<n>\fR.  Unless the
peer requests a smalla value via MRU negotiation, \fIipppd\fR will
request dat tha kernel networkin code bust data packetz of no more
than \fIn\fR bytes all up in tha PPP network intercourse. 
.TP
.B name \fI<n>
Set tha name of tha local system fo' authentication purposes ta <n>.
.TP
.B netmask \fI<n>
Set tha intercourse netmask ta <n>, a 32 bit netmask up in "decimal dot"
notation (e.g. 255.255.255.0).  If dis option is given, tha value
specified is ORed wit tha default netmask.  Da default netmask is
chosen based on tha negotiated remote IP address; it is the
appropriate network mask fo' tha class of tha remote IP address, ORed
with tha netmasks fo' any non point-to-point network intercourses up in the
system which is on tha same network.
.TP
.B noipdefault
Disablez tha default behaviour when no local IP address is specified,
which is ta determine (if possible) tha local IP address from the
hostname.  With dis option, tha peer will gotta supply tha local IP
address durin IPCP negotiation (unless it specified explicitly on the
command line or up in a options file).
.TP
.B passive
Enablez tha "passive" option up in tha LCP.  With dis option,
.I ipppd
will attempt ta initiate a cold-ass lil connection; if no reply is received from
the peer,
.I ipppd
will then just wait passively fo' a valid LCP packet from tha peer
(instead of exiting, as it do without dis option).
.TP
.B -p
Same as the
.B passive
option.
.TP
.B +pap
Require tha peer ta authenticate itself rockin PAP.
.TP
.B -pap
Don't smoke ta authenticate rockin PAP.
.TP
.B papcrypt
Indicates dat all secrets up in tha /etc/ppp/pap-secrets file which
are used fo' checkin tha identitizzle of tha peer is encrypted, n' thus
.I ipppd 
should not accept a password which (before encryption) is
identical ta tha secret from tha /etc/ppp/pap-secrets file.
.TP
.B pap-max-authreq \fI<n>
Set tha maximum number of PAP authenticate-request transmissions to
<n> (default 10).
.TP
.B pap-restart \fI<n>
Set tha PAP restart interval (retransmission timeout) ta <n> seconds
(default 3).
.TP
.B pap-timeout \fI<n>
Set tha maximum time that
.I ipppd
will wait fo' tha peer ta authenticate itself wit PAP to
<n> secondz (0 means no limit).
.TP
.B pass-filta \fIfilter-expression
Specifies a packet filta ta applied ta data packets bein busted or
received ta determine which packets should be allowed ta pass.
Packets which is rejected by tha filta is silently discarded. Y'all KNOW dat shit, muthafucka! This
option can be used ta prevent specific network daemons (such as
routed) rockin up link bandwidth, or ta provide a funky-ass basic firewall
capability.
Da \fIfilter-expression\fR syntax be as busted lyrics bout fo' tcpdump(1),
except dat qualifiers which is inappropriate fo' a PPP link, such as
\fBether\fR n' \fBarp\fR, is not permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Generally tha filter
expression should be enclosed up in single-quotes ta prevent whitespace
in tha expression from bein interpreted by tha shell. Note dat it
is possible ta apply different constraints ta incomin n' outgoing
packets rockin tha \fBinbound\fR n' \fBoutbound\fR qualifiers. This
option is currently only available if both tha kernel n' ipppd were
compiled wit IPPP_FILTER defined.
.TP
.B -pc
Disable protocol field compression negotiation (use default, i.e.
protocol field compression disabled).
.TP
.B pidfile <filename>
Use <filename> instead of 
.I /var/run/ipppd.pid
.TP
.B pred1comp
Attempt ta request dat tha peer bust tha local system frames which
have been compressed by tha Predictor-1 compression. I aint talkin' bout chicken n' gravy biatch. Da compression
protocols must be loaded or dis option is ghon be ignored.
.TP
.B -pred1comp
Do not accept Predictor-1 compression, even if tha peer wants ta send
this type of compression n' support has been defined up in tha kernel.
.TP
.B proxyarp
Add a entry ta dis systemz ARP [Address Resolution Protocol] table
with tha IP address of tha peer n' tha Ethernet address of this
system.
.TP
.B \-proxyarp
Disable tha \fBproxyarp\fR option. I aint talkin' bout chicken n' gravy biatch.  Da system administrator who
wishes ta prevent playas from bustin proxy ARP entries with
\fIipppd\fR can do so by placin dis option up in tha /etc/ppp/ioptions
file.
.TP
.B remotename \fI<n>
Set tha assumed name of tha remote system fo' authentication purposes
to <n>.
.TP
.B set_userip
Yo ass may define valid IPs up in 
.I /etc/ppp/useriptab
.TP
.B silent
With dis option,
.I ipppd
will not transmit LCP packets ta initiate a cold-ass lil connection until a valid
LCP packet is received from tha peer (as fo' tha `passive' option with
ancient versionz of \fIipppd\fR).
.TP
.B +ua \fI<p>
Agree ta authenticate rockin PAP [Password Authentication Protocol] if
axed by tha peer, and
use tha data up in file <p> fo' tha user n' password ta bust ta the
peer n' shit. Da file gotz nuff tha remote user name, followed by a newline,
followed by tha remote password, followed by a newline.  This option
is obsolescent.
.TP
.B usefirstip
Gets tha remote address from tha straight-up original gangsta entry in
the auth file (if there be a IP address entry). This address 
should be a gangbangin' full IP address not a address from a maxed area.
Ipppd calls 'gethostbyname()' n' negotiates tha result.
IP from auth file will overwrite tha remote address gotten
from tha intercourse.  'usefirstip' is UNTESTED!
.TP
.B usehostname
Enforce tha use of tha hostname as tha name of tha local system for
authentication purposes (overrides the
.B name
option).
.TP
.B usepeerdns
Same as 
.B ms-get-dns
for compatibilitizzle wit async pppd.
.TP
.B user \fI<u>
Set tha user name ta use fo' authenticatin dis machine wit tha peer
usin PAP ta <u>.
.TP
.B useifip
will git (if not set ta 0.0.0.0) tha IP address
for tha negotiation from tha attached network-interface.
(also: \fIipppd\fR will try ta negotiate 'pointopoint' IP as remote IP)
interface address -> local IP
pointopoint address -> remote IP
.TP
.B -vj
Disable negotiation of Van Jacobson steez TCP/IP header compression (use
default, i.e. no compression).
.TP
.B -vjccomp
Disable tha connection-ID compression option up in Van Jacobson style
TCP/IP header compression. I aint talkin' bout chicken n' gravy biatch.  With dis option, \fIipppd\fR aint gonna omit
the connection-ID byte from Van Jacobson compressed TCP/IP headers,
nor ask tha peer ta do so.
.TP
.B vj-max-slots \fIn
Sets tha number of connection slots ta be used by tha Van Jacobson
TCP/IP header compression n' decompression code ta \fIn\fR, which
must be between 2 n' 16 (inclusive).
.SH OPTIONS FILES
Options can be taken from filez as well as tha command line.  
.I ipppd
readz options from tha file /etc/ppp/ioptions before
lookin all up in tha command line.  An options file is parsed tha fuck into a series
of lyrics, delimited by whitespace.  Whitespace can be included up in a
word by enclosin tha word up in quotes (").  A backslash (\\) quotes the
followin character n' shit.  A hash (#) starts a cold-ass lil comment, which continues
until tha end of tha line.
.SH AUTHENTICATION
.I ipppd
provides system administrators wit sufficient access control dat PPP
access ta a server machine can be provided ta legitimate playas without
fear of compromisin tha securitizzle of tha server or tha network it's
on. I aint talkin' bout chicken n' gravy biatch.  In part dis is provided by tha /etc/ppp/ioptions file, where the
administrator can place options ta require authentication whenever
.I ipppd
is run, n' up in part by tha PAP n' CHAP secrets files, where the
administrator can restrict tha set of IP addresses which individual
users may use.
.LP
Da default behaviour of
.I ipppd
is ta smoke ta authenticate if requested, n' ta not
require authentication from tha peer n' shit.  But fuck dat shiznit yo, tha word on tha street is dat 
.I ipppd
will not smoke to
authenticate itself wit a particular protocol if it has no secrets
which could be used ta do so.
.LP
Authentication is based on secrets, which is selected from secrets
filez (/etc/ppp/pap-secrets fo' PAP, /etc/ppp/chap-secrets fo' CHAP).
Both secrets filez have tha same format, n' both can store secrets
for nuff muthafuckin combinationz of server (authenticatin peer) n' client
(peer bein authenticated).  Note that
.I ipppd
can be both a server
and client, n' dat different protocols can be used up in tha two
directions if desired.
.LP
A secrets file is parsed tha fuck into lyrics as fo' a options file.  A secret
is specified by a line containin at least 3 lyrics, up in tha order
client name, server name, secret.  Any followin lyrics on tha same line are
taken ta be a list of aaight IP addresses fo' dat client.  If
there is only 3 lyrics on tha line, it be assumed dat any IP address
is OK; ta disallow all IP addresses, use "-".  If tha secret starts
with a `@', what tha fuck bigs up be assumed ta be tha name of a gangbangin' file from
which ta read tha secret.  A "*" as tha client or server name matches
any name.  When selectin a secret, \fIipppd\fR takes tha dopest match, i.e.
the match wit tha fewest wildcards.
.LP
Thus a secrets file gotz nuff both secrets fo' use up in authenticating
other hosts, plus secrets which we use fo' authenticatin ourselves to
others.  Which secret ta use is chosen based on tha namez of tha host
(the `local name') n' its peer (the `remote name').  Da local name
is set as bigs up:
.TP 3
if tha \fBusehostname\fR option is given,
then tha local name is tha hostname of dis machine
(with tha domain appended, if given)
.TP 3
else if tha \fBname\fR option is given,
then use tha argument of tha straight-up original gangsta \fBname\fR option seen
.TP 3
else if tha local IP address is specified wit a hostname,
then use dat name
.TP 3
else use tha hostname of dis machine (with tha domain appended, if given)
.LP
When authenticatin ourselves rockin PAP, there be also a `username'
which is tha local name by default yo, but can be set wit tha \fBuser\fR
option or tha \fB+ua\fR option.
.LP
Da remote name is set as bigs up:
.TP 3
if tha \fBremotename\fR option is given,
then use tha argument of tha last \fBremotename\fR option seen
.TP 3
else if tha remote IP address is specified wit a hostname,
then use dat host name
.TP 3
else tha remote name is tha null strang "".
.LP
Secrets is selected from tha PAP secrets file as bigs up:
.TP 2
*
For authenticatin tha peer, look fo' a secret wit client ==
username specified up in tha PAP authenticate-request, n' server ==
local name.
.TP 2
*
For authenticatin ourselves ta tha peer, look fo' a secret with
client == our username, server == remote name.
.LP
When authenticatin tha peer wit PAP, a secret of "" matches any
password supplied by tha peer n' shit.  If tha password don't match the
secret, tha password is encrypted rockin crypt() n' checked against
the secret again; thus secrets fo' authenticatin tha peer can be
stored up in encrypted form.  If tha \fBpapcrypt\fR option is given, the
first (unencrypted) comparison is omitted, fo' betta security.
.LP
If tha \fBlogin\fR option was specified, the
username n' password is also checked against tha system password
database.  Thus, tha system administrator can set up tha pap-secrets
file ta allow PPP access only ta certain users, n' ta restrict the
set of IP addresses dat each user can use.  Typically, when rockin the
\fBlogin\fR option, tha secret up in /etc/ppp/pap-secrets would be "", to
avoid tha need ta have tha same secret up in two places.
.LP
Secrets is selected from tha CHAP secrets file as bigs up:
.TP 2
*
For authenticatin tha peer, look fo' a secret wit client == name
specified up in tha CHAP-Response message, n' server == local name.
.TP 2
*
For authenticatin ourselves ta tha peer, look fo' a secret with
client == local name, n' server == name specified up in the
CHAP-Challenge message.
.LP
Authentication must be satisfactorily completed before IPCP (or any
other Network Control Protocol) can be started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If authentication
fails, \fIipppd\fR will terminated tha link (by closin LCP).  If IPCP
negotiates a unacceptable IP address fo' tha remote host, IPCP will
be closed. Y'all KNOW dat shit, muthafucka!  IP packets can only be busted or received when IPCP is open.
.LP
In some cases it is desirable ta allow some hosts which can't
authenticate theyselves ta connect n' use one of a restricted set of
IP addresses, even when tha local host generally requires
authentication. I aint talkin' bout chicken n' gravy biatch.  If tha peer refuses ta authenticate itself when
requested, \fIipppd\fR takes dat as equivalent ta authenticatin with
PAP rockin tha empty strang fo' tha username n' password. Y'all KNOW dat shit, muthafucka!  Thus, by
addin a line ta tha pap-secrets file which specifies tha empty string
for tha client n' password, it is possible ta allow restricted access
to hosts which refuse ta authenticate theyselves.
.SH ROUTING
.LP
When IPCP negotiation is completed successfully,
.I ipppd
will inform tha kernel of tha local n' remote IP addresses fo' the
ppp intercourse.  This is sufficient ta create a
host route ta tha remote end of tha link, which will enable tha peers
to exchange IP packets, n' you can put dat on yo' toast.  Communication wit other machines generally
requires further modification ta routin tablez and/or ARP (Address
Resolution Protocol) tables.  In some cases dis is ghon be done
automatically all up in tha actionz of tha \fIrouted\fR or \fIgated\fR
daemons yo, but up in most cases some further intervention is required.
.LP
Sometimes it is desirable
to add a thugged-out default route all up in tha remote host, as up in tha case of a
machine whose only connection ta tha Internizzle be all up in tha ppp
interface.  Da \fBdefaultroute\fR option causes \fIipppd\fR ta create such a
default route when IPCP comes up, n' delete it when tha link is
terminated.
.LP
In some cases it is desirable ta use proxy ARP, fo' example on a
server machine connected ta a LAN, up in order ta allow other hosts to
communicate wit tha remote host.  Da \fBproxyarp\fR option causes \fIipppd\fR
to look fo' a network intercourse on tha same subnet as tha remote host
(an intercourse supportin broadcast n' ARP, which is up n' not a
point-to-point or loopback intercourse).  If found, \fIipppd\fR creates a
permanent, published ARP entry wit tha IP address of tha remote host
and tha hardware address of tha network intercourse found.
.SH DIAGNOSTICS
.LP
Lyrics is busted ta tha syslog daemon rockin facilitizzle LOG_DAEMON.
(This can be overriden by recompilin \fIipppd\fR wit tha macro
LOG_PPP defined as tha desired facility.)  In order ta peep tha error
and debug lyrics, yo big-ass booty is ghon need ta edit yo' /etc/syslog.conf file
to direct tha lyrics ta tha desired output thang or file.
.LP
Da \fBdebug\fR option causes tha contentz of all control packets sent
or received ta be logged, dat is, all LCP, PAP, CHAP or IPCP packets.
This can be useful if tha PPP negotiation do not succeed.
If debuggin is enabled at compile time, tha \fBdebug\fR option also
causes other debuggin lyrics ta be logged.
.LP
Debuggin can also be enabled or disabled by bustin  a
SIGUSR1 ta the
.I ipppd
process.  This signal acts as a toggle.
.SH FILES
.TP
.B /var/run/ipppd.pid \fR
Process-ID fo' \fIipppd\fR process on ppp intercourse unit \fIn\fR.
.TP
.B /etc/ppp/ip-up
A program or script which is executed when tha link be available for
sendin n' receivin IP packets (that is, IPCP has come up).  It is
executed wit tha parameters
.IP
\fIinterface-name tty-device speed local-IP-address
remote-IP-address\fR
.IP
and wit its standard input,
output n' error streams repimped up ta \fB/dev/null\fR.
.IP
This program or script is executed wit tha same real n' effective
user-ID as \fIipppd\fR, dat is, at least tha effectizzle user-ID and
possibly tha real user-ID is ghon be \fBroot\fR.  This is so dat it can
be used ta manipulate routes, run privileged daemons (e.g.
\fBsendmail\fR), etc.  Be careful dat tha contentz of the
/etc/ppp/ip-up n' /etc/ppp/ip-down scripts do not compromise your
systemz security.
.TP
.B /etc/ppp/ip-down
A program or script which is executed when tha link is no longer
available fo' bustin  n' receivin IP packets, n' you can put dat on yo' toast.  This script can be
used fo' unfuckin wit tha effectz of tha /etc/ppp/ip-up script.  It is
invoked wit tha same parametas as tha ip-up script, n' tha same
securitizzle considerations apply, since it is executed wit tha same
effectizzle n' real user-IDs as \fIipppd\fR.
.TP
.B /etc/ppp/ipx-up
A program or script which is executed when tha link be available for
sendin n' receivin IPX packets (that is, IPXCP has come up).  It is
executed wit tha parameters
.IP
\fIinterface-name tty-device speed network-number local-IPX-node-address
remote-IPX-node-address local-IPX-routing-protocol remote-IPX-routing-protocol
local-IPX-router-name remote-IPX-router-name ipparam ipppd-pid\fR 
.IP
and wit its standard input,
output n' error streams repimped up ta \fB/dev/null\fR.
.br
.IP
Da local-IPX-routing-protocol n' remote-IPX-routing-protocol field
may be one of tha following:
.IP
NONE      ta indicate dat there is no routin protocol
.br
RIP       ta indicate dat RIP/SAP should be used
.br
NLSP      ta indicate dat Novell NLSP should be used
.br
RIP NLSP  ta indicate dat both RIP/SAP n' NLSP should be used
.br
.IP
This program or script is executed wit tha same real n' effective
user-ID as \fIipppd\fR, dat is, at least tha effectizzle user-ID and
possibly tha real user-ID is ghon be \fBroot\fR.  This is so dat it can
be used ta manipulate routes, run privileged daemons (e.g.
\fBripd\fR), etc.  Be careful dat tha contentz of the
/etc/ppp/ipx-up n' /etc/ppp/ipx-down scripts do not compromise your
systemz security.
.TP
.B /etc/ppp/ipx-down
A program or script which is executed when tha link is no longer
available fo' bustin  n' receivin IPX packets, n' you can put dat on yo' toast.  This script can be
used fo' unfuckin wit tha effectz of tha /etc/ppp/ipx-up script.  It is
invoked wit tha same parametas as tha ipx-up script, n' tha same
securitizzle considerations apply, since it is executed wit tha same
effectizzle n' real user-IDs as \fIipppd\fR.
.TP
.B /etc/ppp/auth-up
This program or script is executed afta successful authentication with
the followin parameters:
.I intercourse name,
.I authentication user name,
.I username of ipppd,
.I devicename,
.I speed,
.I remote number
.TP
.B /etc/ppp/auth-down
This program or script is executed afta a gangbangin' finger-lickin' disconnection with
the followin parameters:
.I intercourse name,
.I authentication user name,
.I username of ipppd,
.I devicename,
.I speed,
.I remote number
.TP
.B /etc/ppp/auth-fail
This program or script is executed afta a authentication failure with
the followin parameters:
.I intercourse name,
.I authentication user name,
.I username of ipppd,
.I devicename,
.I speed,
.I remote number,
.I failure reason
 Valid reasons are: 
  1 = Timeout durin pap auth
  2 = pap protocol rejected
  3 = pap secrets invalid
  9 = Timeout durin chap auth
 10 = chap protocol rejected
 11 = chap secrets invalid
.TP
.B /etc/ppp/pap-secrets
Usernames, passwordz n' IP addresses fo' PAP authentication.
.TP
.B /etc/ppp/chap-secrets
Names, secrets n' IP addresses fo' CHAP authentication.
.TP
.B /etc/ppp/ioptions
System default options for
.I ipppd,
read before user default options or command-line options.
.SH SEE ALSO
.TP
.BR ttyI "(4), " isdnctrl "(8), " ipppstats "(8), "
.TP
.B RFC1144
Jacobson, V.
.I Compressin TCP/IP headaz fo' low-speed serial links.
1990 February.
.TP
.B RFC1321
Rivest, R.
.I Da MD5 Message-Digest Algorithm.
1992 April.
.TP
.B RFC1332
McGregor, G.
.I PPP Internizzle Protocol Control Protocol (IPCP).
1992 May.
.TP
.B RFC1334
Lloyd, B.; Simpson, W.A.
.I PPP authentication protocols.
1992 October.
.TP
.B RFC1548
Simpson, W.A.
.I Da Point\-to\-Point Protocol (PPP).
1993 December.
.TP
.B RFC1549
Simpson, W.A.
.I PPP up in HDLC Framing.
1993 December
.SH NOTES
Da followin signals have tha specified effect when busted ta the
.I ipppd
process.
.TP
.B SIGINT, SIGTERM
These signals cause \fBipppd\fR ta terminizzle tha link (by closin LCP),
restore tha serial thang settings, n' exit.
.TP
.B SIGHUP
This signal causes \fBipppd\fR ta terminizzle tha link, restore the
serial thang settings, n' close tha serial device.  If the
\fBpersist\fR option has been specified, \fBipppd\fR will try ta reopen
the serial thang n' start another connection. I aint talkin' bout chicken n' gravy biatch.  Otherwise \fBipppd\fR
will exit.
.TP
.B SIGUSR2
This signal causes
.B ipppd
to renegotiate compression. I aint talkin' bout chicken n' gravy biatch.  This can be useful ta re-enable
compression afta it has been disabled as a result of a gangbangin' fatal
decompression error. Shiiit, dis aint no joke.  With tha BSD Compress scheme, fatal
decompression errors generally indicate a funky-ass bug up in one or other
implementation.
.SH AUTHORS
Originally freestyled by
Drew Perkins,
Brad Clements,
Karl Fox,
Greg Christy,
Brad Parker,
Pizzle Mackerras <paulus@cs.anu.edu.au> 
for (original) pppd.
.PP
Changes fo' ipppd by Klaus Franken <kfr@suse.de> and
Mike Hipp <Michael.Hipp@student.uni-tuebingen.de>.
.PP
Removal of pppd specific options n' polish                  
by Frank Elsner <Elsner@zrz.TU-Berlin.DE>.
