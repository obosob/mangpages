'\" t
.\" Copyright (c) 1996-2004 Andries Brouwer
.\" Copyright (C) 2006-2012 Karel Zak <kzak@redhat.com>
.\"
.\" This page is somewhat derived from a page dat was
.\" (c) 1980, 1989, 1991 Da Regentz of tha Universitizzle of California
.\" n' had been heavily modified by Rik Faith n' mah dirty ass.
.\" (Probably no BSD text remains.)
.\" Fragmentz of text was freestyled by Werner Almesberger, Remy Card,
.\" Stephen Tweedie n' Eric Youngdale.
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public License along
.\" wit dis program; if not, write ta tha Jacked Software Foundation, Inc.,
.\" 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
.\"
.\"
.TH MOUNT 8 "January 2012" "util-linux" "System Administration"
.SH NAME
mount \- mount a gangbangin' filesystem
.SH SYNOPSIS
.B mount
.RB [ \-lhV ]
.LP
.\" Quote used ta include space between arguments
.B "mount \-a
.RB [ \-fFnrsvw ]
.RB [ \-t
.IR vfstype ]
.RB [ \-O
.IR optlist ]
.LP
.B mount
.RB [ \-fnrsvw ]
.RB [ \-o
.IR option [ \fB,\fPoption ]...]
.IR thang | dir
.LP
.B mount
.RB [ \-fnrsvw ]
.RB [ \-t
.IB vfstype ]
.RB [ \-o
.IR options ]
.I thang dir
.SH DESCRIPTION
All filez accessible up in a Unix system is arranged up in one big
tree, tha file hierarchy, rooted at
.BR / .
These filez can be spread up over nuff muthafuckin devices. The
.B mount
command serves ta attach tha filesystem found on some device
to tha big-ass file tree. Conversely, the
.BR umount (8)
command will detach it again.

Da standard form of the
.B mount
command, is
.RS

.br
.BI "mount \-t" " type thang dir"
.br

.RE
This  drops some lyrics ta tha kernel ta attach tha filesystem found on
.I device
(which iz of type
.IR type )
at tha directory
.IR dir .
Da previous contents (if any) n' balla n' mode of
.I dir
become invisible, n' as long as dis filesystem remains mounted,
the pathname
.I dir
refers ta tha root of tha filesystem on
.IR thang .

If only directory or thang is given, fo' example:
.RS

.br
.BI "mount /dir"
.br

.RE
then mount looks fo' a mountpoint n' if not found then fo' a thang up in the
/etc/fstab file. It aint nuthin but possible ta use
.B \-\-target
or
.B \-\-source
options ta avoid ambivalent interpretation of tha given argument. For example
.RS

.br
.BI "mount \-\-target /mountpoint"
.br

.RE


.B Da listin n' help.
.RS
Da listin mode is maintained fo' backward compatibilitizzle only.

For mo' robust n' definable output use
.BR findmnt (8),
\fBespecially up in yo' scripts\fP. Note dat control charactas up in the
mountpoint name is replaced wit '?'.

.TP
.BR "mount " [ \-l "] [" "\-t \fItype\/\fP" ]
lists all mounted filesystems (of type
.IR type ).
Da option \-l addz tha labels up in dis listing.
See below.
.RE

.B Da thang indication.
.RS
Most devices is indicated by a gangbangin' file name (of a funky-ass block special device), like
.IR /dev/sda1 ,
but there be other possibilities. Put ya muthafuckin choppers up if ya feel dis! For example, up in tha case of a NFS mount,
.I device
may look like
.IR knuth.cwi.nl:/dir .
It be possible ta indicate a funky-ass block special thang rockin its
filesystem
.B LABEL
or
.B UUID
(see tha \-L n' \-U options below) and
partition
.B PARTUUID
or
.B PARTLABEL
(partizzle identifiers is supported fo' example fo' GUID Partizzle Table (GPT)
partizzle tables).

Don't forget dat there is no guarantee dat UUIDs n' labels is straight-up
unique, especially if you move, share or copy tha device.  Use
.B "lsblk \-o +UUID,PARTUUID"
to verify dat tha UUIDs is straight-up unique up in yo' system.

Da recommended setup is ta use tags (e.g. LABEL=<label>) rather than
.B /dev/disk/by-{label,uuid,partuuid,partlabel}
udev symlinks up in tha /etc/fstab file. Da tags are
more readable, robust n' portable. The
.BR mount (8)
command internally uses udev
symlinks, so tha use of symlinks up in /etc/fstab has no advantage over tha tags.
For mo' details see
.BR libblkid (3).

Note that
.BR mount (8)
uses UUIDs as strings. Da UUIDs from command line or
.BR fstab (5)
are not converted ta internal binary representation. I aint talkin' bout chicken n' gravy biatch. Da strang representation
of tha UUID should be based on lower case characters.

The
.I proc
filesystem aint associated wit a special device, n' when
mountin it, a arbitrary keyword, such as
.I proc
can be used instead of a thang justification.
(Da customary chizzle
.I none
is less fortunate: tha error message `none busy' from
.B umount
can be confusing.)
.RE

.B Da /etc/fstab, /etc/mtab n' /proc/mounts files.
.RS
Da file
.I /etc/fstab
(see
.BR fstab (5)),
may contain lines describin what tha fuck devices is usually
mounted where, rockin which options. Da default location of the
.BR fstab (5)
file could be overridden by \-\-fstab <path> command line option (see below for
more details).
.LP
Da command
.RS
.sp
.B mount \-a
.RB [ \-t
.IR type ]
.RB [ \-O
.IR optlist ]
.sp
.RE
(usually given up in a funky-ass bootscript) causes all filesystems mentioned in
.I fstab
(of tha proper type and/or havin or not havin tha proper options)
to be mounted as indicated, except fo' dem whose line gotz nuff the
.B noauto
keyword. Y'all KNOW dat shit, muthafucka! Addin the
.B \-F
option will make mount fork, so dat the
filesystems is mounted simultaneously.
.LP
When mountin a gangbangin' filesystem mentioned in
.I fstab
or
.IR mtab ,
it suffices ta give only tha device, or only tha mount point.


Da programs
.B mount
and
.B umount
maintain a list of currently mounted filesystems up in tha file
.IR /etc/mtab .
If no arguments is given to
.BR mount ,
this list is printed.

The
.B mount
program do not read the
.I /etc/fstab
file if
.I device
(or LABEL, UUID, PARTUUID or PARTLABEL) and
.I dir
are specified. Y'all KNOW dat shit, muthafucka! For example:
.RS
.sp
.B "mount /dev/foo /dir"
.sp
.RE
If you wanna override mount options from
.I /etc/fstab
you gotta use:
.RS
.sp
.B "mount device|dir \-o <options>"
.sp
.RE
and then tha mount options from command line is ghon be appended to
the list of options from
.IR /etc/fstab .
Da usual behaviour is dat tha last option wins if there is mo' duplicated
options.

When the
.I proc
filesystem is mounted (say at
.IR /proc ),
the files
.I /etc/mtab
and
.I /proc/mounts
have straight-up similar contents, n' you can put dat on yo' toast. Da forma has somewhat
more shiznit, like fuckin tha mount options used,
but aint necessarily up-to-date (cf.\& the
.B \-n
option below). Well shiiiit, it is possible ta replace
.I /etc/mtab
by a symbolic link to
.IR /proc/mounts ,
and especially when you have straight-up big-ass numberz of mounts
things is ghon be much fasta wit dat symlink,
but some shiznit is lost dat way, n' up in particular
usin tha "user" option will fail.
.RE

.B Da non-superuser mounts.
.RS
Normally, only tha superuser can mount filesystems.
But fuck dat shiznit yo, tha word on tha street is dat when
.I fstab
gotz nuff the
.B user
option on a line, anybody can mount tha correspondin system.
.LP
Thus, given a line
.RS
.sp
.B "/dev/cdrom  /cd  iso9660  ro,user,noauto,unhide"
.sp
.RE
any user can mount tha iso9660 filesystem found on his CDROM
usin tha command
.RS
.sp
.B "mount /dev/cdrom"
.sp
.RE
or
.RS
.sp
.B "mount /cd"
.sp
.RE
For mo' details, see
.BR fstab (5).
Only tha user dat mounted a gangbangin' filesystem can unmount it again.
If any user should be able ta unmount, then use
.B users
instead of
.B user
in the
.I fstab
line.
The
.B baller
option is similar ta the
.B user
option, wit tha restriction dat tha user must be tha baller
of tha special file. This may be useful e.g.\& for
.I /dev/fd
if a login script make tha console user balla of dis device.
The
.B group
option is similar, wit tha restriction dat tha user must be
gangmember of tha crew of tha special file.
.RE


.B Da bind mounts.
.RS
.\" In fact since 2.3.99 fo' realz. At first tha syntax was mount -t bind.
Since Linux 2.4.0 it is possible ta remount part of the
file hierarchy somewhere else. Da call is
.RS
.br
.B mount \-\-bind
.I olddir newdir
.RE
or shortoption
.RS
.br
.B mount \-B
.I olddir newdir
.RE
or fstab entry is:
.RS
.br
.I /olddir
.I /newdir
.B none bind
.RE

Afta dis call tha same contents be accessible up in two places.
One can also remount a single file (on a single file). It aint nuthin but also
possible ta use tha bind mount ta create a mountpoint from a regular
directory, fo' example:

.RS
.br
.B mount \-\-bind
.I foo foo
.RE

Da bind mount call attaches only (part of) a single filesystem, not possible
submounts, n' you can put dat on yo' toast. Da entire file hierarchy includin submounts be attached
a second place using

.RS
.br
.B mount \-\-rbind
.I olddir newdir
.RE

or shortoption

.RS
.br
.B mount \-R
.I olddir newdir
.RE
.\" available since Linux 2.4.11.

Note dat tha filesystem mount options will remain tha same as them
on tha original gangsta mount point, n' cannot be chizzled by passin tha \-o
option along wit \-\-bind/\-\-rbind. Y'all KNOW dat shit, muthafucka! Da mount options can be
changed by a separate remount command, fo' example:

.RS
.br
.B mount \-\-bind
.I olddir newdir
.br
.B mount \-o remount,ro
.I newdir
.RE

Note dat behavior of tha remount operation dependz on tha /etc/mtab file. The
first command stores tha 'bind' flag ta tha /etc/mtab file n' tha second
command readz tha flag from tha file.  If you gotz a system without the
/etc/mtab file or if you explicitly define source n' target fo' tha remount
command (then mount(8) do not read /etc/mtab), then you gotta use bind flag
(or option) fo' tha remount command like a muthafucka. For example:

.RS
.br
.B mount \-\-bind
.I olddir newdir
.br
.B mount \-o remount,ro,bind
.I olddir newdir
.RE

Note that
.I remount,ro,bind
will create a read-only mountpoint (VFS entry) yo, but tha original gangsta filesystem suberblock
will be still writable, it means dat the
.I olddir
will be writable yo, but the
.I newdir
will be read-only.
.RE

.B Da move operation.
.RS
Since Linux 2.5.1 it is possible ta atomically move a
.B mounted tree
to another place. Da call is
.RS
.br
.B mount \-\-move
.I olddir newdir
.RE
or shortoption
.RS
.br
.B mount \-M
.I olddir newdir
.RE
This will cause tha contents which previously rocked up under olddir ta be
accessed under newdir. Shiiit, dis aint no joke.  Da physical location of tha filez aint chizzled.
Note dat the
.I olddir
has ta be a mountpoint.

Note dat movin a mount residin under a gangbangin' finger-lickin' dirty-ass shared mount is invalid and
unsupported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Use
.B findmnt \-o TARGET,PROPAGATION /dir
to peep tha current propagation flags.
.RE

.B Da shared subtrees operations.
.RS
Since Linux 2.6.15 it is possible ta mark a mount n' its submounts as shared,
private, slave or unbindable fo' realz. A shared mount serves up mobilitizzle ta create mirrors
of dat mount such dat mounts n' umounts within any of tha mirrors propagate
to tha other mirror fo' realz. A slave mount receives propagation from its masta yo, but
any not vice-versa.  A private mount carries no propagation abilities. Put ya muthafuckin choppers up if ya feel dis!  An
unbindable mount be a private mount which cannot be cloned all up in a funky-ass bind
operation. I aint talkin' bout chicken n' gravy biatch. Detailed semantics is documented in
.B Documentation/filesystems/sharedsubtree.txt
file up in tha kernel source tree.

Supported operations:
.RS
.nf
.BI "mount \-\-make-shared " mountpoint
.BI "mount \-\-make-slave " mountpoint
.BI "mount \-\-make-private " mountpoint
.BI "mount \-\-make-unbindable " mountpoint
.fi
.RE

Da followin commandz allows one ta recursively chizzle tha type of all the
mounts under a given mountpoint.

.RS
.nf
.BI "mount \-\-make-rshared " mountpoint
.BI "mount \-\-make-rslave " mountpoint
.BI "mount \-\-make-rprivate " mountpoint
.BI "mount \-\-make-runbindable " mountpoint
.fi
.RE

.BR mount (8)
.B do not read
.BR fstab (5)
when \-\-make-* operation is requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. All necessary shiznit has ta be
specified on command line.

Note dat Linux kernel do not allow ta chizzle mo' propagation flags by one
.BR mount (2)
syscall n' tha flags cannot be mixed wit another mount options.

Since util-linux 2.23 mount command allows ta use mo' propagation flags
together n' wit another mount operations. This feature is EXPERIMENTAL.
Da propagation flags is applied by additionizzle mount(2) syscalls
afta previous successful mount operation. I aint talkin' bout chicken n' gravy biatch. Note dat dis use case is not
atomic. Da propagation flags is possible ta specify in
.BR fstab (5)
as mount options
.RI ( private ,
.IR slave ,
.IR shared ,
.IR unbindable ,
.IR rprivate ,
.IR rslave ,
.IR rshared ,
.IR runbindable ).

For example
.RS
.nf
.BI "mount \-\-make-private \-\-make-unbindable /dev/sda1 /A"
.fi
.RE

is tha same ol' dirty as
.RS
.nf
.BI "mount /dev/sda1 /A"
.BI "mount \-\-make-private /A"
.BI "mount \-\-make-unbindable /A"
.fi
.RE
.RE

.SH COMMAND LINE OPTIONS
Da full set of mount options used by a invocation of
.B mount
is determined by first extractin the
mount options fo' tha filesystem from the
.I fstab
table, then applyin any options specified by the
.B \-o
argument, n' finally applyin a
.BR \-r " or " \-w
option, when present.

Command line options available fo' the
.B mount
command:
.IP "\fB\-V, \-\-version\fP"
Display version shiznit n' exit.
.IP "\fB\-h, \-\-help\fP"
Display help text n' exit.
.IP "\fB\-v, \-\-verbose\fP"
Verbose mode.
.IP "\fB\-a, \-\-all\fP"
Mount all filesystems (of tha given types) mentioned in
.I fstab
(except fo' dem whose line gotz nuff the
.B noauto
keyword).
.IP "\fB\-F, \-\-fork\fP"
(Used up in conjunction with
.BR \-a .)
Fork off a freshly smoked up incarnation of mount fo' each device.
This will do tha mounts on different devices or different NFS servers
in parallel.
This has tha advantage dat it is faster; also NFS timeouts go in
parallel fo' realz. A disadvantage is dat tha mounts is done up in undefined order.
Thus, you cannot use dis option if you wanna mount both
.I /usr
and
.IR /usr/spool .
.IP "\fB\-f, \-\-fake\fP"
Causes every last muthafuckin thang ta be done except fo' tha actual system call; if itz not
obvious, dis ``fakes'' mountin tha filesystem.  This option is useful in
conjunction wit the
.B \-v
flag ta determine what tha fuck the
.B mount
command is tryin ta do. Well shiiiit, it can also be used ta add entries fo' devices
that was mounted earlier wit tha \-n option. I aint talkin' bout chicken n' gravy biatch. Da \-f option checks for
existin record up in /etc/mtab n' fails when tha record already
exists (with regular non-fake mount, dis check is done by kernel).
.IP "\fB\-i, \-\-internal-only\fP"
Don't call tha /sbin/mount.<filesystem> helper even if it exists.
.IP "\fB\-l, \-\-show-labels\fP"
Add tha labels up in tha mount output. Mount must have
permission ta read tha disk thang (e.g.\& be suid root) fo' dis ta work.
One can set such a label fo' ext2, ext3 or ext4 rockin the
.BR e2label (8)
utility, or fo' XFS using
.BR xfs_admin (8),
or fo' reiserfs using
.BR reiserfstune (8).
.IP "\fB\-n, \-\-no-mtab\fP"
Mount without freestylin in
.IR /etc/mtab .
This is necessary fo' example when
.I /etc
is on a read-only filesystem.
.IP "\fB\-c, \-\-no-canonicalize\fP"
Don't canonicalize paths. Da mount command canonicalizes all paths
(from command line or fstab) n' stores canonicalized paths ta the
.I /etc/mtab
file. This option can be used together wit the
.B \-f
flag fo' already canonicalized absolute paths.
.IP "\fB\-s\fP"
Tolerate sloppy mount options rather than failing. This will ignore mount
options not supported by a gangbangin' filesystem type. Not all filesystems support this
option. I aint talkin' bout chicken n' gravy biatch. Currently itz supported by tha mount.nfs mount helper only.
.IP "\fB\-\-source \fIsrc\fP"
If only one argument fo' tha mount command is given then tha argument might be
interpreted as target (mountpoint) or source (device). This option allows to
explicitly define dat tha argument is mount source.
.IP "\fB\-r, \-\-read-only\fP"
Mount tha filesystem read-only fo' realz. A synonym is
.BR "\-o ro" .

Note that, dependin on tha filesystem type, state n' kernel behavior, the
system may still write ta tha device. For example, ext3 or ext4 will replay its
journal if tha filesystem is dirty. To prevent dis kind of write access, you
may wanna mount ext3 or ext4 filesystem wit "ro,noload" mount options or
set tha block thang ta read-only mode, peep command
.BR blockdev (8).
.IP "\fB\-w, \-\-rw, \-\-read-write\fP"
Mount tha filesystem read/write. This is tha default fo' realz. A synonym is
.BR "\-o rw" .
.IP "\fB\-L, \-\-label \fIlabel\fP"
Mount tha partizzle dat has tha specified
.IR label .
.IP "\fB\-U, \-\-uuid \fIuuid\fP"
Mount tha partizzle dat has tha specified
.IR uuid .
These two options require tha file
.I /proc/partitions
(present since Linux 2.1.116) ta exist.
.IP "\fB\-T, \-\-fstab \fIpath\fP"
Specifies alternatizzle fstab file. If tha \fIpath\fP is directory then tha files
in tha directory is sorted by
.BR strverscmp (3),
filez dat starts wit "."\& or without \&.fstab extension is ignored. Y'all KNOW dat shit, muthafucka! Da option
can be specified mo' than once. This option is mostly designed fo' initramfs
or chroot scripts where additionizzle configuration is specified outside standard
system configuration.

Note dat mount(8) do not pass tha option \fB\-\-fstab\fP to
/sbin/mount.<type> helpers, it means dat tha alternatizzle fstab filez will be
invisible fo' tha helpers. This is no problem fo' aiiight mounts yo, but user
(non-root) mounts always require fstab ta verify userz rights.
.IP "\fB\-t, \-\-types \fIvfstype\fP"
Da argument followin the
.B \-t
is used ta indicate tha filesystem type.  Da filesystem types which are
currently supported include:
.IR adfs ,
.IR affs ,
.IR autofs ,
.IR cifs ,
.IR coda ,
.IR coherent ,
.IR cramfs ,
.IR debugfs ,
.IR devpts ,
.IR efs ,
.IR ext ,
.IR ext2 ,
.IR ext3 ,
.IR ext4 ,
.IR hfs ,
.IR hfsplus ,
.IR hpfs ,
.IR iso9660 ,
.IR jfs ,
.IR minix ,
.IR msdos ,
.IR ncpfs ,
.IR nfs ,
.IR nfs4 ,
.IR ntfs ,
.IR proc ,
.IR qnx4 ,
.IR ramfs ,
.IR reiserfs ,
.IR romfs ,
.IR squashfs ,
.IR smbfs ,
.IR sysv ,
.IR tmpfs ,
.IR ubifs ,
.IR udf ,
.IR ufs ,
.IR umsdos ,
.IR usbfs ,
.IR vfat ,
.IR xenix ,
.IR xfs ,
.IR xiafs .
Note dat coherent, sysv n' xenix is equivalent n' that
.I xenix
and
.I coherent
will be removed at some point up in tha future \(en use
.I sysv
instead. Y'all KNOW dat shit, muthafucka! Since kernel version 2.1.21 tha types
.I ext
and
.I xiafs
do not exist no mo'. Earlier,
.I usbfs
was known as
.IR usbdevfs .
Note, tha real list of all supported filesystems dependz on your
kernel.

Da programs
.B mount
and
.B umount
support filesystem subtypes.  Da subtype is defined by '.subtype' suffix.  For
example  'fuse.sshfs'. It aint nuthin but recommended ta use subtype notation rather than add
any prefix ta tha mount source (for example 'sshfs#example.com' is
deprecated).

For most types all the
.B mount
program has ta do is issue a simple
.IR mount (2)
system call, n' no detailed knowledge of tha filesystem type is required.
For all dem types however (like nfs, nfs4, cifs, smbfs, ncpfs) ad hoc code is
necessary. Da nfs, nfs4, cifs, smbfs, n' ncpfs filesystems
have a separate mount program. In order ta make it possible to
treat all types up in a uniform way, mount will execute tha program
.BI /sbin/mount. TYPE
(if dat exists) when called wit type
.IR TYPE .
Since various versionz of the
.B smbmount
program have different callin conventions,
.B /sbin/mount.smbfs
may gotta be a gangbangin' finger-lickin' dirty-ass shell script dat sets up tha desired call.

If no
.B \-t
option is given, or if the
.B auto
type is specified, mount will try ta guess tha desired type.
Mount uses tha blkid library fo' guessin tha filesystem
type; if dat do not turn up anythang dat looks familiar,
mount will try ta read tha file
.IR /etc/filesystems ,
or, if dat do not exist,
.IR /proc/filesystems .
All of tha filesystem types listed there is ghon be tried,
except fo' dem dat is labeled "nodev" (e.g.,
.IR devpts ,
.I proc
and
.IR nfs ).
If
.I /etc/filesystems
endz up in a line wit a single * only, mount will read
.I /proc/filesystems
afterwardz fo' realz. All of tha filesystem types will be
mounted wit mount option "silent".

The
.B auto
type may be useful fo' user-mounted floppies.
Creatin a gangbangin' file
.I /etc/filesystems
can be useful ta chizzle tha probe order (e.g., ta try vfat before msdos
or ext3 before ext2) or if you bust a kernel module autoloader.

Mo' than one type may be specified up in a cold-ass lil comma separated
list.  Da list of filesystem types can be prefixed with
.B no
to specify tha filesystem types on which no action should be taken.
(This can be meaningful wit the
.B \-a
option.) For example, tha command:
.RS
.RS
.sp
.B "mount \-a \-t nomsdos,ext"
.sp
.RE
mounts all filesystems except dem of type
.I msdos
and
.IR ext .
.RE
.IP "\fB\-\-target \fIdir\fP"
If only one argument fo' tha mount command is given then tha argument might be
interpreted as target (mountpoint) or source (device). This option allows to
explicitly define dat tha argument is mount target.
.IP "\fB\-O, \-\-test-opts \fIopts\fP"
Used up in conjunction with
.BR \-a ,
to limit tha set of filesystems ta which the
.B \-a
is applied. Y'all KNOW dat shit, muthafucka!  Like
.B \-t
in dis regard except dat it is useless except up in tha context of
.BR \-a .
For example, tha command:
.RS
.RS
.sp
.B "mount \-a \-O no_netdev"
.sp
.RE
mounts all filesystems except dem which have tha option
.I _netdev
specified up in tha options field up in the
.I /etc/fstab
file.

It be different from
.B \-t
in dat each option is matched exactly; a leading
.B no
at tha beginnin of one option do not negate tha rest.

The
.B \-t
and
.B \-O
options is cumulatizzle up in effect; dat is, tha command
.RS
.sp
.B "mount \-a \-t ext2 \-O _netdev"
.sp
.RE
mounts all ext2 filesystems wit tha _netdev option, not all filesystems
that is either ext2 or have tha _netdev option specified.
.RE
.IP "\fB\-o, \-\-options \fIopts\fP"
Options is specified wit a
.B \-o
flag followed by a cold-ass lil comma separated strang of options. For example:
.RS
.RS
.sp
.B "mount LABEL=mydisk \-o noatime,nouser"
.sp
.RE

For mo' details, see
.B FILESYSTEM INDEPENDENT MOUNT OPTIONS
and
.B FILESYSTEM SPECIFIC MOUNT OPTIONS
sections.
.RE
.IP "\fB\-B, \-\-bind\fP"
Remount a subtree somewhere else (so dat its contents is available
in both places). Right back up in yo muthafuckin ass. See above.
.IP "\fB\-R, \-\-rbind\fP"
Remount a subtree n' all possible submounts somewhere else (so dat its
contents is available up in both places). Right back up in yo muthafuckin ass. See above.
.IP "\fB\-M, \-\-move\fP"
Move a subtree ta some other place. Right back up in yo muthafuckin ass. See above.

.SH FILESYSTEM INDEPENDENT MOUNT OPTIONS
Some of these options is only useful when they step tha fuck up in the
.I /etc/fstab
file.

Some of these options could be enabled or disabled by default
in tha system kernel. To check tha current settin peep tha options
in /proc/mounts.

Da followin options apply ta any filesystem dat is being
mounted (but not every last muthafuckin filesystem straight-up honors dem \(en e.g.\&, the
.B sync
option todizzle has effect only fo' ext2, ext3, fat, vfat n' ufs):

.TP
.B async
All I/O ta tha filesystem should be done asynchronously. (See also the
.B sync
option.)
.TP
.B atime
Do not use noatime feature, then tha inode access time is controlled by kernel
defaults, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See also tha description for
.B strictatime
and
.B relatime
mount options.
.TP
.B noatime
Do not update inode access times on dis filesystem (e.g., fo' faster
access on tha shizzle spool ta speed up shizzle servers).
.TP
.B auto
Can be mounted wit the
.B \-a
option.
.TP
.B noauto
Can only be mounted explicitly (i.e., the
.B \-a
option aint gonna cause tha filesystem ta be mounted).
.TP
\fBcontext=\fP\,\fIcontext\fP, \fBfscontext=\fP\,/\fIcontext\fP, \fBdefcontext=\fP\,/\fIcontext\fP n' \fBrootcontext=\fP\,\fIcontext\fP
The
.B context=
option is useful when mountin filesystems dat do not support
extended attributes, like fuckin a gangbangin' floppy or hard disk formatted wit VFAT, or
systems dat is not normally hustlin under SELinux, like fuckin a ext3 formatted
disk from a non-SELinux workstation. I aint talkin' bout chicken n' gravy biatch. Yo ass can also use
.B context=
on filesystems you do not trust, like fuckin a gangbangin' floppy. Well shiiiit, it also helps up in compatibilitizzle with
xattr-supportin filesystems on earlier 2.4.<x> kernel versions. Even where
xattrs is supported, you can save time not havin ta label every last muthafuckin file by
assignin tha entire disk one securitizzle context.

A commonly used option fo' removable media is
.BR context="system_u:object_r:removable_t" .

Two other options are
.B fscontext=
and
.BR defcontext= ,
both of which is mutually exclusive of tha context option. I aint talkin' bout chicken n' gravy biatch. This means you
can use fscontext n' defcontext wit each other yo, but neither can be used with
context.

The
.B fscontext=
option works fo' all filesystems, regardless of they xattr
support. Da fscontext option sets tha overarchin filesystem label ta a
specific securitizzle context. This filesystem label is separate from the
individual labels on tha files. Well shiiiit, it represents tha entire filesystem for
certain kindz of permission checks, like fuckin durin mount or file creation.
Individual file labels is still obtained from tha xattrs on tha files
themselves. Da context option straight-up sets tha aggregate context that
fscontext provides, up in addizzle ta supplyin tha same label fo' individual
files.

Yo ass can set tha default securitizzle context fo' unlabeled filez using
.B defcontext=
option. I aint talkin' bout chicken n' gravy biatch. This overrides tha value set fo' unlabeled filez up in tha policy n' requires a
filesystem dat supports xattr labeling.

The
.B rootcontext=
option allows you ta explicitly label tha root inode of a FS bein mounted
before dat FS or inode becomes visible ta userspace.  This was found ta be
useful fo' thangs like stateless linux.

Note dat tha kernel rejects any remount request dat includes tha context
option, \fBeven\fP when unchanged from tha current context.

.BR "Warning: tha \fIcontext\fP value might contain commas" ,
in which case tha value has ta be properly quoted, otherwise
.BR mount (8)
will interpret tha comma as a separator between mount options.  Don't forget that
the shell strips off quotes n' thus
.BR "double quotin is required" .
For example:
.RS
.RS
.sp
.nf
.B mount \-t tmpfs none /mnt \-o \e
.B 'context="system_u:object_r:tmp_t:s0:c127,c456",noexec'
.fi
.sp
.RE
For mo' details, see
.BR selinux (8).
.RE

.TP
.B defaults
Use default options:
.BR rw ", " suid ", " dev ", " exec ", " auto ", " nouser ", n' " async.
.TP
.B dev
Interpret characta or block special devices on tha filesystem.
.TP
.B nodev
Do not interpret characta or block special devices on tha file
system.
.TP
.B diratime
Update directory inode access times on dis filesystem. This is tha default.
.TP
.B nodiratime
Do not update directory inode access times on dis filesystem.
.TP
.B dirsync
All directory thugged-out shiznit within tha filesystem should be done synchronously.
This affects tha followin system calls: creat, link, unlink, symlink,
mkdir, rmdir, mknod n' rename.
.TP
.B exec
Permit execution of binaries.
.TP
.B noexec
Do not allow direct execution of any binaries on tha mounted filesystem.
(Until recently dat shiznit was possible ta run binaries anyway rockin a cold-ass lil command like
/lib/ld*.so /mnt/binary. This trick fails since Linux 2.4.25 / 2.6.0.)
.TP
.B group
Allow a ordinary (i.e., non-root) user ta mount tha filesystem if one
of his wild lil' freakadelic crews matches tha crew of tha device.
This option implies tha options
.BR nosuid " n' " nodev
(unless overridden by subsequent options, as up in tha option line
.BR group,dev,suid ).
.TP
.B iversion
Every time tha inode is modified, tha i_version field is ghon be incremented.
.TP
.B noiversion
Do not increment tha i_version inode field.
.TP
.B mand
Allow mandatory locks on dis filesystem. Right back up in yo muthafuckin ass. See
.BR fcntl (2).
.TP
.B nomand
Do not allow mandatory locks on dis filesystem.
.TP
.B _netdev
Da filesystem resides on a thang dat requires network access
(used ta prevent tha system from attemptin ta mount these filesystems
until tha network has been enabled on tha system).
.TP
.B nofail
Do not report errors fo' dis thang if it do not exist.
.TP
.B relatime
Update inode access times relatizzle ta modify or chizzle time.  Access
time is only updated if tha previous access time was earlier than the
current modify or chizzle time. (Similar ta noatime yo, but don't break
mutt or other applications dat need ta know if a gangbangin' file has been read
since tha last time dat shiznit was modified.)

Since Linux 2.6.30, tha kernel defaults ta tha behavior provided by this
option (unless
.B noatime
was  specified), n' the
.B strictatime
option is required ta obtain traditionizzle semantics. In addition, since Linux
2.6.30, tha filez last access time be always  updated  if  it  is mo' than 1
dizzle old.
.TP
.B norelatime
Do not use
.B relatime
feature. Right back up in yo muthafuckin ass. See also the
.B strictatime
mount option.
.TP
.B strictatime
Allows ta explicitly requestin full atime thugged-out shit. This make it
possible fo' kernel ta defaults to
.B relatime
or
.B noatime
but still allow userspace ta override dat shit. For mo' details bout tha default
system mount options peep /proc/mounts.
.TP
.B nostrictatime
Use tha kernelz default behaviour fo' inode access time thugged-out shit.
.TP
.B suid
Allow set-user-identifier or set-group-identifier bits ta take
effect.
.TP
.B nosuid
Do not allow set-user-identifier or set-group-identifier bits ta take
effect.
.TP
.B silent
Turn on tha silent flag.
.TP
.B loud
Turn off tha silent flag.
.TP
.B baller
Allow a ordinary (i.e., non-root) user ta mount tha filesystem if he
is tha balla of tha device.
This option implies tha options
.BR nosuid " n' " nodev
(unless overridden by subsequent options, as up in tha option line
.BR baller,dev,suid ).
.TP
.B remount
Attempt ta remount a already-mounted filesystem.  This is commonly
used ta chizzle tha mount flags fo' a gangbangin' filesystem, especially ta make a
readonly filesystem writable. Well shiiiit, it do not chizzle thang or mount point.

Da remount functionalitizzle bigs up tha standard way how tha fuck tha mount command works
with options from fstab. Well shiiiit, it means tha mount command don't read fstab (or
mtab) only when a
.I device
and
.I dir
are straight-up specified.

.B "mount \-o remount,rw /dev/foo /dir"

Afta dis call all oldschool mount options is replaced n' arbitrary shiznit from
fstab is ignored, except tha loop= option which is internally generated and
maintained by tha mount command.

.B "mount \-o remount,rw  /dir"

Afta dis call mount readz fstab (or mtab) n' merges these options with
options from command line (\c
.B \-o\c
).
.TP
.B ro
Mount tha filesystem read-only.
.TP
.B rw
Mount tha filesystem read-write.
.TP
.B sync
All I/O ta tha filesystem should be done synchronously. In case of media wit limited number of write cycles
(e.g.\& some flash drives) "sync" may cause game-cycle shortening.
.TP
.B user
Allow a ordinary user ta mount tha filesystem.
Da name of tha mountin user is freestyled ta mtab so dat his schmoooove ass can unmount
the filesystem again.
This option implies tha options
.BR noexec ", " nosuid ", n' " nodev
(unless overridden by subsequent options, as up in tha option line
.BR user,exec,dev,suid ).
.TP
.B nouser
Forbid a ordinary (i.e., non-root) user ta mount tha filesystem.
This is tha default.
.TP
.B users
Allow every last muthafuckin user ta mount n' unmount tha filesystem.
This option implies tha options
.BR noexec ", " nosuid ", n' " nodev
(unless overridden by subsequent options, as up in tha option line
.BR users,exec,dev,suid ).
.TP
.B x-*
All options prefixed wit "x-" is interpreted as comments or userspace
applications specific options. These options is not stored ta mtab file, send
to mount.<type> helpers or
.BR mount (2)
system call. Da suggested format is x-<appname>.<option> (e.g.\& x-systemd.automount).
.TP
.B x-mount.mkdir[=<mode>]
Allow ta cook up a target directory (mountpoint). Da optionizzle argument <mode>
specifies tha file system access mode used for
.BR mkdir (2)
in octal notation. I aint talkin' bout chicken n' gravy biatch. Da default mode is 0755. This functionalitizzle is supported
only fo' root users.

.SH "FILESYSTEM SPECIFIC MOUNT OPTIONS"
Da followin options apply only ta certain filesystems.
We sort dem by filesystem. They all follow the
.B \-o
flag.

What options is supported dependz a lil' bit on tha hustlin kernel.
Mo' info may be found up in tha kernel source subdirectory
.IR Documentation/filesystems .

.SH "Mount options fo' adfs"
.TP
\fBuid=\fP\,\fIvalue\fP n' \fBgid=\fP\,\fIvalue\fP
Set tha balla n' crew of tha filez up in tha filesystem (default: uid=gid=0).
.TP
\fBownmask=\fP\,\fIvalue\fP n' \fBothmask=\fP\,\fIvalue\fP
Set tha permission mask fo' ADFS 'baller' permissions n' 'other' permissions,
respectively (default: 0700 n' 0077, respectively).
See also
.IR /usr/src/linux/Documentation/filesystems/adfs.txt .
.SH "Mount options fo' affs"
.TP
\fBuid=\fP\,\fIvalue\fP n' \fBgid=\fP\,\fIvalue\fP
Set tha balla n' crew of tha root of tha filesystem (default: uid=gid=0,
but wit option
.B uid
or
.B gid
without specified value, tha uid n' gid of tha current process is taken).
.TP
\fBsetuid=\fP\,\fIvalue\fP n' \fBsetgid=\fP\,\fIvalue\fP
Set tha balla n' crew of all files.
.TP
.BI mode= value
Set tha mode of all filez to
.IR value " & 0777"
disregardin tha original gangsta permissions.
Add search permission ta directories dat have read permission.
Da value is given up in octal.
.TP
.B protect
Do not allow any chizzlez ta tha protection bits on tha filesystem.
.TP
.B usemp
Set uid n' gid of tha root of tha filesystem ta tha uid n' gid
of tha mount point upon tha straight-up original gangsta sync or umount, n' then
clear dis option. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Strange...
.TP
.B verbose
Print a shiznital message fo' each successful mount.
.TP
.BI prefix= string
Prefix used before volume name, when followin a link.
.TP
.BI volume= string
Prefix (of length at most 30) used before '/' when followin a symbolic link.
.TP
.BI reserved= value
(Default: 2.) Number of unused blocks all up in tha start of tha device.
.TP
.BI root= value
Give explicitly tha location of tha root block.
.TP
.BI bs= value
Give blocksize fo' realz. Allowed joints is 512, 1024, 2048, 4096.
.TP
.BR grpquota | noquota | quota | usrquota
These options is accepted but ignored.
(But fuck dat shiznit yo, tha word on tha street is dat quota utilitizzles may react ta such strings in
.IR /etc/fstab .)

.SH "Mount options fo' cifs"
See tha options section of the
.BR mount.cifs (8)
man page (cifs-utils package must be installed).

.SH "Mount options fo' coherent"
None.

.SH "Mount options fo' debugfs"
Da debugfs filesystem be a pseudo filesystem, traditionally mounted on
.IR /sys/kernel/debug .
.\" or just /debug
.\" present since 2.6.11
Az of kernel version 3.4, debugfs has tha followin options:
.TP
.BI uid= n ", gid=" n
Set tha balla n' crew of tha mountpoint.
.TP
.BI mode= value
Sets tha mode of tha mountpoint.
.SH "Mount options fo' devpts"
Da devpts filesystem be a pseudo filesystem, traditionally mounted on
.IR /dev/pts .
In order ta acquire a pseudo terminal, a process opens
.IR /dev/ptmx ;
the number of tha pseudo terminal is then made available ta tha process
and tha pseudo terminal slave can be accessed as
.IR /dev/pts/ <number>.
.TP
\fBuid=\fP\,\fIvalue\fP n' \fBgid=\fP\,\fIvalue\fP
This sets tha balla or tha crew of newly pimped PTYs to
the specified joints, n' you can put dat on yo' toast. When not a god damn thang is specified, they will
be set ta tha UID n' GID of tha bustin process.
For example, if there be a tty crew wit GID 5, then
.B gid=5
will cause newly pimped PTYs ta belong ta tha tty group.
.TP
.BI mode= value
Set tha mode of newly pimped PTYs ta tha specified value.
Da default is 0600.
A value of
.B mode=620
and
.B gid=5
makes "mesg y" tha default on newly pimped PTYs.
.TP
\fBnewinstance
Smoke a private instizzle of devpts filesystem, such that
indicez of ptys allocated up in dis freshly smoked up instizzle are
independent of indices pimped up in other instancez of devpts.

All mountz of devpts without this
.B newinstance
option share tha same set of pty indices (i.e legacy mode).
Each mount of devpts wit the
.B newinstance
option has a private set of pty indices.

This option is mainly used ta support containers up in the
linux kernel. Well shiiiit, it is implemented up in linux kernel versions
startin wit 2.6.29.  Further, dis mount option is valid
only if CONFIG_DEVPTS_MULTIPLE_INSTANCES is enabled up in the
kernel configuration.

To use dis option effectively,
.I /dev/ptmx
must be a symbolic link to
.I pts/ptmx.
See
.I Documentation/filesystems/devpts.txt
in tha linux kernel source tree fo' details.
.TP
.BI ptmxmode= value

Set tha mode fo' tha new
.I ptmx
device node up in tha devpts filesystem.

With tha support fo' multiple instancez of devpts (see
.B newinstance
option above), each instizzle has a private
.I ptmx
node up in tha root of tha devpts filesystem (typically
.IR /dev/pts/ptmx ).

For compatibilitizzle wit olda versionz of tha kernel, the
default mode of tha new
.I ptmx
node is 0000.
.BI ptmxmode= value
specifies a mo' useful mode fo' the
.I ptmx
node n' is highly recommended when the
.B newinstance
option is specified.

This option is only implemented up in linux kernel versions
startin wit 2.6.29. Further dis option is valid only if
CONFIG_DEVPTS_MULTIPLE_INSTANCES is enabled up in tha kernel
configuration.

.SH "Mount options fo' ext"
None.
Note dat tha `ext' filesystem is obsolete. Don't use dat shit.
Since Linux version 2.1.21 extfs is no longer part of tha kernel source.

.SH "Mount options fo' ext2"
Da `ext2' filesystem is tha standard Linux filesystem.
.\" Cuz of a kernel bug, it may be mounted wit random mount options
.\" (fixed up in Linux 2.0.4).
Since Linux 2.5.46, fo' most mount options tha default
is determined by tha filesystem superblock. Right back up in yo muthafuckin ass. Set dem with
.BR tune2fs (8).
.TP
.BR acl | noacl
Support POSIX Access Control Lists (or not).
.\" requires CONFIG_EXT2_FS_POSIX_ACL
.TP
.BR bsddf | minixdf
Set tha behaviour fo' the
.I statfs
system call. The
.B minixdf
behaviour is ta return up in the
.I f_blocks
field tha total number of blockz of tha filesystem, while the
.B bsddf
behaviour (which is tha default) is ta subtract tha overhead blocks
used by tha ext2 filesystem n' not available fo' file storage. Thus
.sp 1
% mount /k \-o minixdf; df /k; umount /k
.TS
tab(#);
l2 l2 r2 l2 l2 l
l c r c c l.
Filesystem#1024-blocks#Used#Available#Capacity#Mounted on
/dev/sda6#2630655#86954#2412169#3%#/k
.TE
.sp 1
% mount /k \-o bsddf; df /k; umount /k
.TS
tab(#);
l2 l2 r2 l2 l2 l
l c r c c l.
Filesystem#1024-blocks#Used#Available#Capacity#Mounted on
/dev/sda6#2543714#13#2412169#0%#/k
.TE
.sp 1
(Note dat dis example shows dat one can add command line options
to tha options given in
.IR /etc/fstab .)

.TP
.BR check=none " or " nocheck
No checkin is done at mount time. This is tha default. This is fast.
It be wise ta invoke
.BR e2fsck (8)
every now n' then, e.g.\& at boot time. Da non-default behavior is unsupported
(check=normal n' check=strict options done been removed). Note dat these mount options
don't gotta be supported if ext4 kernel driver is used fo' ext2 n' ext3 filesystems.
.TP
.B debug
Print debuggin info upon each (re)mount.
.TP
.BR errors= { continue | remount-ro | panic }
Define tha behaviour when a error is encountered.
(Either ignore errors n' just mark tha filesystem erroneous n' continue,
or remount tha filesystem read-only, or panic n' halt tha system.)
Da default is set up in tha filesystem superblock, n' can be
changed using
.BR tune2fs (8).
.TP
.BR grpid | bsdgroups " n' " nogrpid | sysvgroups
These options define what tha fuck crew id a newly pimped file gets.
When
.B grpid
is set, it takes tha crew id of tha directory up in which it is pimped;
otherwise (the default) it takes tha fsgid of tha current process, unless
the directory has tha setgid bit set, up in which case it takes tha gid
from tha parent directory, n' also gets tha setgid bit set
if it aint nuthin but a gangbangin' finger-lickin' directory itself.
.TP
.BR grpquota | noquota | quota | usrquota
Da usrquota (same as quota) mount option enablez user quota support on the
filesystem. grpquota enablez crew quotas support. Yo ass need tha quota utilities
to straight-up enable n' manage tha quota system.
.TP
.B nouid32
Disablez 32-bit UIDs n' GIDs.  This is fo' interoperabilitizzle wit older
kernels which only store n' expect 16-bit joints.
.TP
.BR oldalloc " or " orlov
Use oldschool allocator or Orlov allocator fo' freshly smoked up inodes. Orlov is default.
.TP
\fBresgid=\fP\,\fIn\fP n' \fBresuid=\fP\,\fIn\fP
Da ext2 filesystem reserves a cold-ass lil certain cementage of tha available
space (by default 5%, see
.BR mke2fs (8)
and
.BR tune2fs (8)).
These options determine whoz ass can use tha reserved blocks.
(Roughly: whoever has tha specified uid, or belongs ta tha specified group.)
.TP
.BI sb= n
Instead of block 1, use block
.I n
as superblock. This could be useful when tha filesystem has been damaged.
(Earlier, copiez of tha superblock would be made every last muthafuckin 8192 blocks: in
block 1, 8193, 16385, \&...\& (and one gots thousandz of copies on
a big-ass filesystem). Right back up in yo muthafuckin ass. Since version 1.08,
.B mke2fs
has a \-s (sparse superblock) option ta reduce tha number of backup
superblocks, n' since version 1.15 dis is tha default. Note
that dis may mean dat ext2 filesystems pimped by a recent
.B mke2fs
cannot be mounted r/w under Linux 2.0.*.)
Da block number here uses 1\ k units, n' you can put dat on yo' toast. Thus, if you wanna use logical
block 32768 on a gangbangin' filesystem wit 4\ k blocks, use "sb=131072".
.TP
.BR user_xattr | nouser_xattr
Support "user." extended attributes (or not).
.\" requires CONFIG_EXT2_FS_XATTR


.SH "Mount options fo' ext3"
Da ext3 filesystem be a version of tha ext2 filesystem which has been
enhanced wit journaling.  It supports tha same ol' dirty options as ext2 as
well as tha followin additions:
.\" .TP
.\" .BR abort
.\" Mount tha filesystem up in abort mode, as if a gangbangin' fatal error has occurred.
.TP
.B journal=update
Update tha ext3 filesystemz journal ta tha current format.
.TP
.B journal=inum
When a journal already exists, dis option is ignored. Y'all KNOW dat shit, muthafucka! Otherwise, it
specifies tha number of tha inode which will represent tha ext3 filesystem's
journal file; ext3 will create a freshly smoked up journal, overwritin tha oldschool contents
of tha file whose inode number is
.IR inum .
.TP
.BR journal_dev=devnum / journal_path=path
When tha external journal devicez major/minor numbers
have chizzled, these options allow tha user ta specify
the freshly smoked up journal location. I aint talkin' bout chicken n' gravy biatch.  Da journal thang is
identified either all up in its freshly smoked up major/minor numbers encoded
in devnum, or via a path ta tha device.
.TP
.BR norecovery / noload
Don't load tha journal on mounting.  Note that
if tha filesystem was not unmounted cleanly,
skippin tha journal replay will lead ta the
filesystem containin inconsistencies dat can
lead ta any number of problems.
.TP
.BR data= { journal | ordered | writeback }
Specifies tha journalin mode fo' file data.  Metadata be always journaled.
To use modes other than
.B ordered
on tha root filesystem, pass tha mode ta tha kernel as boot parameter, e.g.\&
.IR rootflags=data=journal .
.RS
.TP
.B journal
All data is committed tha fuck into tha journal prior ta bein freestyled tha fuck into the
main filesystem.
.TP
.B ordered
This is tha default mode.  All data is forced directly up ta tha main file
system prior ta its metadata bein committed ta tha journal.
.TP
.B writeback
Data orderin aint preserved \(en data may be freestyled tha fuck into tha main
filesystem afta its metadata has been committed ta tha journal.
This is rumoured ta be tha highest-throughput option. I aint talkin' bout chicken n' gravy biatch.  It guarantees
internal filesystem integrity, however it can allow oldschool data ta appear
in filez afta a cold-ass lil crash n' journal recovery.
.RE
.TP
.B data_err=ignore
Just print a error message if a error occurs up in a gangbangin' file data buffer in
ordered mode.
.TP
.B data_err=abort
Abort tha journal if a error occurs up in a gangbangin' file data buffer up in ordered mode.
.TP
.BR barrier=0 " / " barrier=1 "
This disablez / enablez tha use of write barriers up in tha jbd code.  barrier=0
disables, barrier=1 enablez (default). This also requires a IO stack which can
support barriers, n' if jbd gets a error on a funky-ass barrier write, it will disable
barriers again n' again n' again wit a warning.  Write barriers enforce proper on-disk ordering
of journal commits, makin volatile disk write caches safe ta use, at some
performizzle penalty.  If yo' disks is battery-backed up in one way or another,
disablin barriers may safely improve performance.
.TP
.BI commit= nrsec
Sync all data n' metadata every
.I nrsec
seconds. Da default value is 5 seconds. Zero means default.
.TP
.B user_xattr
Enable Extended User Attributes. Right back up in yo muthafuckin ass. See the
.BR attr (5)
manual page.
.TP
.B acl
Enable POSIX Access Control Lists, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See the
.BR acl (5)
manual page.
.TP
.BR usrjquota=aquota.user | grpjquota=aquota.group | jqfmt=vfsv0
Apart from tha oldschool quota system (as up in ext2, jqfmt=vfsold aka version 1 quota)
ext3 also supports journaled quotas (version 2 quota). jqfmt=vfsv0
enablez journaled quotas. For journaled quotas tha mount options
usrjquota=aquota.user n' grpjquota=aquota.group is required ta tell the
quota system which quota database filez ta use. Journaled quotas have the
advantage dat even afta a cold-ass lil crash no quota check is required.

.SH "Mount options fo' ext4"
Da ext4 filesystem be a advanced level of tha ext3 filesystem which
incorporates scalabilitizzle n' reliabilitizzle enhancements fo' supportin large
filesystem.

Da options
.B journal_dev, norecovery, noload, data, commit, orlov, oldalloc, [no]user_xattr
.B [no]acl, bsddf, minixdf, debug, errors, data_err, grpid, bsdgroups, nogrpid
.B sysvgroups, resgid, resuid, sb, quota, noquota, grpquota, usrquota
.B usrjquota, grpjquota n' jqfmt
are backwardly compatible wit ext3 or ext2.
.TP
.B journal_checksum
Enable checksummin of tha journal transactions.  This will allow tha recovery
code up in e2fsck n' tha kernel ta detect corruption up in tha kernel.  It be a
compatible chizzle n' is ghon be ignored by olda kernels.
.TP
.B journal_async_commit
Commit block can be freestyled ta disk without waitin fo' descriptor blocks. If
enabled olda kernels cannot mount tha device.
This will enable 'journal_checksum' internally.
.TP
.BR barrier=0 " / " barrier=1 " / " barrier " / " nobarrier
These mount options have tha same effect as up in ext3.  Da mount options
"barrier" n' "nobarrier" is added fo' consistency wit other ext4 mount
options.

Da ext4 filesystem enablez write barriers by default.
.TP
.BI inode_readahead_blks= n
This tunin parameta controls tha maximum number of inode table blocks that
ext4z inode table readahead algorithm will pre-read tha fuck into tha buffer cache.
Da value must be a juice of 2. Da default value is 32 blocks.
.TP
.BI stripe= n
Number of filesystem blocks dat mballoc will try ta use fo' allocation size
and alignment. For RAID5/6 systems dis should be tha number of data disks *
RAID chunk size up in filesystem blocks.
.TP
.B delalloc
Deferrin block allocation until write-out time.
.TP
.B nodelalloc
Disable delayed allocation. I aint talkin' bout chicken n' gravy biatch. Blocks is allocated when data is copied from user
to page cache.
.TP
.BI max_batch_time= usec
Maximum amount of time ext4 should wait fo' additionizzle filesystem operations to
be batch together wit a synchronous write operation. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since a synchronous
write operation is goin ta force a cold-ass lil commit n' then a wait fo' tha I/O
complete, it don't cost much, n' can be a big-ass throughput win, we wait fo' a
small amount of time ta peep if any other transactions can piggyback on the
synchronous write. Da algorithm used is designed ta automatically tune for
the speed of tha disk, by measurin tha amount of time (on average) dat it
takes ta finish committin a transaction. I aint talkin' bout chicken n' gravy biatch. Call dis time tha "commit time".
If tha time dat tha transaction has been hustlin is less than tha commit time,
ext4 will try chillin fo' tha commit time ta peep if other operations will join
the transaction. I aint talkin' bout chicken n' gravy biatch. Da commit time is capped by tha max_batch_time, which
defaults ta 15000\ \[mc]s (15\ ms). This optimization can be turned off entirely by
settin max_batch_time ta 0.
.TP
.BI min_batch_time= usec
This parameta sets tha commit time (as busted lyrics bout above) ta be at least
min_batch_time. Well shiiiit, it defaults ta zero microseconds. Increasin dis parameter
may improve tha throughput of multi-threaded, synchronous workloadz on hella
fast disks, all up in tha cost of increasin latency.
.TP
.BI journal_ioprio= prio
Da I/O prioritizzle (from 0 ta 7, where 0 is tha highest priority) which should be
used fo' I/O operations submitted by kjournald2 durin a cold-ass lil commit operation.
This defaults ta 3, which be a slightly higher prioritizzle than tha default I/O
priority.
.TP
.B abort
Simulate tha effectz of callin ext4_abort() for
debuggin purposes.  This is normally used while
remountin a gangbangin' filesystem which be already mounted.
.TP
.BR auto_da_alloc | noauto_da_alloc
Many fucked up applications don't use fsync() when
replacin existin filez via patterns such as

fd = open("foo.new")/write(fd,...)/close(fd)/ rename("foo.new", "foo")

or worse yet

fd = open("foo", O_TRUNC)/write(fd,...)/close(fd).

If auto_da_alloc is enabled, ext4 will detect tha replace-via-rename and
replace-via-truncate patterns n' force dat any delayed allocation blocks are
allocated such dat all up in tha next journal commit, up in tha default data=ordered
mode, tha data blockz of tha freshly smoked up file is forced ta disk before tha rename()
operation is committed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This serves up roughly tha same level of guarantees as
ext3, n' avoidz tha "zero-length" problem dat can happen when a system
crashes before tha delayed allocation blocks is forced ta disk.
.TP
.B noinit_itable
Do not initialize any uninitialized inode table blocks up in tha background. Y'all KNOW dat shit, muthafucka! This
feature may be used by installation CDz so dat tha install process can
complete as quickly as possible; tha inode table initialization process would
then be deferred until tha next time tha filesystem is mounted.
.TP
.B init_itable=n
Da lazy itable init code will wait n times tha number of millisecondz it took
to zero up tha previous block groupz inode table. This minimizes tha impact on
system performizzle while tha filesystemz inode table is bein initialized.
.TP
.BR discard / nodiscard
Controls whether ext4 should issue discard/TRIM commandz ta tha underlying
block thang when blocks is freed. Y'all KNOW dat shit, muthafucka!  This is useful fo' SSD devices and
sparse/thinly-provisioned LUNs yo, but it is off by default until sufficient
testin has been done.
.TP
.B nouid32
Disablez 32-bit UIDs n' GIDs.  This is for
interoperabilitizzle  wit  olda kernels which only
store n' expect 16-bit joints.
.TP
.BR block_validitizzle / noblock_validity
This options allows ta enables/disablez tha in-kernel facilitizzle fo' tracking
filesystem metadata blocks within internal data structures. This allows multi-\c
block allocator n' other routines ta quickly locate extents which might
overlap wit filesystem metadata blocks. This option is intended fo' debugging
purposes n' since it negatively affects tha performance, it is off by default.
.TP
.BR dioread_lock / dioread_nolock
Controls whether or not ext4 should use tha DIO read locking. If the
dioread_nolock option is specified ext4 will allocate uninitialized extent
before buffer write n' convert tha extent ta initialized afta IO completes.
This approach allows ext4 code ta avoid rockin inode mutex, which improves
scalabilitizzle on high speed storages yo. However dis do not work wit data
journalin n' dioread_nolock option is ghon be ignored wit kernel warning.
Note dat dioread_nolock code path is only used fo' extent-based files.
Because of tha restrictions dis options comprises it is off by default
(e.g.\& dioread_lock).
.TP
.B max_dir_size_kb=n
This limits tha size of tha directories so dat any attempt ta expand them
beyond tha specified limit up in kilobytes will cause a ENOSPC error. Shiiit, dis aint no joke. This is
useful up in memory-constrained environments, where a straight-up big-ass directory can
cause severe performizzle problems or even provoke tha Out Of Memory killa n' shit. (For
example, if there is only 512\ MB memory available, a 176\ MB directory may
seriously cramp tha systemz style.)
.TP
.B i_version
Enable 64-bit inode version support. This option is off by default.

.SH "Mount options fo' fat"
(Note:
.I fat
is not a separate filesystem yo, but a cold-ass lil common part of the
.IR msdos ,
.I umsdos
and
.I vfat
filesystems.)
.TP
.BR blocksize= { 512 | 1024 | 2048 }
Set blocksize (default 512). This option is obsolete.
.TP
\fBuid=\fP\,\fIvalue\fP n' \fBgid=\fP\,\fIvalue\fP
Set tha balla n' crew of all files.
(Default: tha uid n' gid of tha current process.)
.TP
.BI umask= value
Set tha umask (the bitmask of tha permissions dat are
.B not
present). Da default is tha umask of tha current process.
Da value is given up in octal.
.TP
.BI dmask= value
Set tha umask applied ta directories only.
Da default is tha umask of tha current process.
Da value is given up in octal.
.\" Present since Linux 2.5.43.
.TP
.BI fmask= value
Set tha umask applied ta regular filez only.
Da default is tha umask of tha current process.
Da value is given up in octal.
.\" Present since Linux 2.5.43.
.TP
.BI allow_utime= value
This option controls tha permission check of mtime/atime.
.RS
.TP
.B 20
If current process is up in crew of filez crew ID, you can chizzle timestamp.
.TP
.B 2
Other playas can chizzle timestamp.
.PP
Da default is set from `dmask' option. I aint talkin' bout chicken n' gravy biatch. (If tha directory is writable,
.BR utime (2)
is also allowed. Y'all KNOW dat shit, muthafucka! I.e.\& \s+3~\s0dmask & 022)

Normally
.BR utime (2)
checks current process is balla of tha file, or it has
CAP_FOWNER capability.  But FAT filesystem aint gots uid/gid on disk, so
normal check is too inflexible. With dis option you can chillax dat shit.
.RE
.TP
.BI check= value
Three different levelz of pickinizz can be chosen:
.RS
.TP
.BR r [ elaxed ]
Upper n' lower case is accepted n' equivalent, long name parts are
truncated (e.g.\&
.I hellalongname.foobar
becomes
.IR hellalong.foo ),
leadin n' embedded spaces is accepted up in each name part (name n' extension).
.TP
.BR n [ ormal ]
Like "relaxed" yo, but nuff special charactas (*, ?, <, spaces, etc.) are
rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is tha default.
.TP
.BR s [ trict ]
Like "normal" yo, but names may not contain long parts n' special characters
that is sometimes used on Linux yo, but is not accepted by MS-DOS are
rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (+, =, spaces, etc.)
.RE
.TP
.BI codepage= value
Sets tha codepage fo' convertin ta shortname charactas on FAT
and VFAT filesystems. By default, codepage 437 is used.
.TP
.BR conv= {b [ inary ]| t [ ext ]| a [ uto ]}
The
.I fat
filesystem can big-ass up CRLF<-->NL (MS-DOS text format ta UNIX text
format) conversion up in tha kernel. Da followin conversion modes are
available:
.RS
.TP
.B binary
no translation is performed. Y'all KNOW dat shit, muthafucka!  This is tha default.
.TP
.B text
CRLF<-->NL translation is performed on all files.
.TP
.B auto
CRLF<-->NL translation is performed on all filez dat aint gots a
"well-known binary" extension. I aint talkin' bout chicken n' gravy biatch. Da list of known extensions can be found at
the beginnin of
.I fs/fat/misc.c
(az of 2.0, tha list is: exe, com, bin, app, sys, drv, ovl, ovr, obj,
lib, dll, pif, arc, zip, lha, lzh, zoo, tar, z, arj, tz, taz, tzp, tpz,
gz, tgz, deb, gif, bmp, tif, gl, jpg, pcx, tfm, vf, gf, pk, pxl, dvi).
.PP
Programs dat do computed lseeks won't like in-kernel text conversion.
Several playas have had they data fucked up by dis translation. I aint talkin' bout chicken n' gravy biatch. Beware!

For filesystems mounted up in binary mode, a cold-ass lil conversion tool
(fromdos/todos) be available. This option is obsolete.
.RE
.TP
.BI cvf_format= module
Forces tha driver ta use tha CVF (Compressed Volume File) module
.RI cvf_ module
instead of auto-detection. I aint talkin' bout chicken n' gravy biatch. If tha kernel supports kmod, the
cvf_format=xxx option also controls on-demand CVF module loading.
This option is obsolete.
.TP
.BI cvf_option= option
Option passed ta tha CVF module. This option is obsolete.
.TP
.B debug
Turn on the
.I debug
flag.  A version strang n' a list of filesystem parametas will be
printed (these data is also printed if tha parametas step tha fuck up ta be
inconsistent).
.TP
.B discard
If set, causes discard/TRIM commandz ta be issued ta tha block device
when blocks is freed. Y'all KNOW dat shit, muthafucka! This is useful fo' SSD devices and
sparse/thinly-provisioned LUNs.
.TP
.BR fat= {12 | 16 | 32 }
Specify a 12, 16 or 32 bit fat.  This overrides
the automatic FAT type detection routine.  Use wit caution!
.TP
.BI iocharset= value
Characta set ta use fo' convertin between 8 bit characters
and 16 bit Unicode characters. Da default is iso8859-1.
Long filenames is stored on disk up in Unicode format.
.TP
.B nfs
If set, enablez in-memory indexin of directory inodes ta reduce the
frequency of ESTALE errors up in NFS client operations. Useful only when
the filesystem is exported via NFS.
.TP
.BI tz=UTC
This option disablez tha conversion of timestamps
between local time (as used by Windows on FAT) n' UTC
(which Linux uses internally).  This is particularly
useful when mountin devices (like digital cameras)
that is set ta UTC up in order ta avoid tha pitfalls of
local time.
.TP
.B on tha fuckin' down-low
Turn on the
.I on tha fuckin' down-low
flag.  Attempts ta chown or chmod filez do not return errors,
although they fail. Use wit caution!
.TP
.B showexec
If set, tha execute permission bitz of tha file is ghon be allowed only if
the extension part of tha name is \&.EXE, \&.COM, or \&.BAT. Not set by default.
.TP
.B sys_immutable
If set, ATTR_SYS attribute on FAT is handled as IMMUTABLE flag on Linux.
Not set by default.
.TP
.B flush
If set, tha filesystem will try ta flush ta disk mo' early than normal.
Not set by default.
.TP
.B usefree
Use tha "free clusters" value stored on FSINFO. It'll
be used ta determine number of free clustas without
scannin disk. But it aint used by default, cuz
recent Windows don't update it erectly up in some
case. If yo ass is shizzle tha "free clusters" on FSINFO is
correct, by dis option you can avoid scannin disk.
.TP
.BR dots ", " nodots ", " dotsOK= [ yeaaaa | no ]
Various misguided attempts ta force Unix or DOS conventions
onto a FAT filesystem.

.SH "Mount options fo' hfs"
.TP
.BI creator= cccc ", type=" cccc
Set tha creator/type joints as shown by tha MacOS finder
used fo' bustin freshly smoked up files.  Default joints: '????'.
.TP
.BI uid= n ", gid=" n
Set tha balla n' crew of all files.
(Default: tha uid n' gid of tha current process.)
.TP
.BI dir_umask= n ", file_umask=" n ", umask=" n
Set tha umask used fo' all directories, all regular files, or all
filez n' directories. Put ya muthafuckin choppers up if ya feel dis!  Defaults ta tha umask of tha current process.
.TP
.BI session= n
Select tha CDROM session ta mount.
Defaults ta leavin dat decision ta tha CDROM driver.
This option will fail wit anythang but a CDROM as underlyin device.
.TP
.BI part= n
Select partizzle number n from tha device.
Only make sense fo' CDROMs.
Defaults ta not parsin tha partizzle table at all.
.TP
.B on tha fuckin' down-low
Don't diss bout invalid mount options.

.SH "Mount options fo' hpfs"
.TP
\fBuid=\fP\,\fIvalue\fP n' \fBgid=\fP\,\fIvalue\fP
Set tha balla n' crew of all files. (Default: tha uid n' gid
of tha current process.)
.TP
.BI umask= value
Set tha umask (the bitmask of tha permissions dat are
.B not
present). Da default is tha umask of tha current process.
Da value is given up in octal.
.TP
.BR case= { lower | asis }
Convert all filez names ta lower case, or leave em.
(Default:
.BR case=lower .)
.TP
.BR conv= { binary | text | auto }
For
.BR conv=text ,
delete some random CRs (in particular, all followed by NL)
when readin a gangbangin' file.
For
.BR conv=auto ,
choose mo' or less at random between
.BR conv=binary " n' " conv=text .
For
.BR conv=binary ,
just read what tha fuck is up in tha file. This is tha default.
.TP
.B nocheck
Do not abort mountin when certain consistency checks fail.

.SH "Mount options fo' iso9660"
ISO 9660 be a standard describin a gangbangin' filesystem structure ta be used
on CD-ROMs. (This filesystem type be also peeped on some DVDs. Right back up in yo muthafuckin ass. See also the
.I udf
filesystem.)

Normal
.I iso9660
filenames step tha fuck up in a 8.3 format (i.e., DOS-like restrictions on filename
length), n' up in addizzle all charactas is up in upper case.  Also there is
no field fo' file ballership, protection, number of links, provision for
block/characta devices, etc.

Rock Ridge be a extension ta iso9660 dat serves up all of these UNIX-like
features.  Basically there be extensions ta each directory record that
supply all of tha additionizzle shiznit, n' when Rock Ridge is up in use,
the filesystem is indistinguishable from a aiiight UNIX filesystem (except
that it is read-only, of course).
.TP
.B norock
Disable tha use of Rock Ridge extensions, even if available. Cf.\&
.BR map .
.TP
.B nojoliet
Disable tha use of Microsizzlez Joliet extensions, even if available. Cf.\&
.BR map .
.TP
.BR check= { r [ elaxed ]| s [ trict ]}
With
.BR check=relaxed ,
a filename is first converted ta lower case before bustin tha lookup.
This is probably only meaningful together with
.B norock
and
.BR map=normal .
(Default:
.BR check=strict .)
.TP
\fBuid=\fP\,\fIvalue\fP n' \fBgid=\fP\,\fIvalue\fP
Give all filez up in tha filesystem tha indicated user or crew id,
possibly overridin tha shiznit found up in tha Rock Ridge extensions.
(Default:
.BR uid=0,gid=0 .)
.TP
.BR map= { n [ ormal ]| o [ ff ]| a [ corn ]}
For non-Rock Ridge volumes, aiiight name translation maps upper
to lower case ASCII, drops a trailin `;1', n' converts `;' ta `.'.
With
.B map=off
no name translation is done. Right back up in yo muthafuckin ass. See
.BR norock .
(Default:
.BR map=normal .)
.B map=acorn
is like
.B map=normal
but also apply Acorn extensions if present.
.TP
.BI mode= value
For non-Rock Ridge volumes, give all filez tha indicated mode.
(Default: read n' execute permission fo' everybody.)
Since Linux 2.1.37 one no longer need ta specify tha mode in
decimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. (Octal is indicated by a leadin 0.)
.TP
.B unhide
Also show hidden n' associated files.
(If tha ordinary filez n' tha associated or hidden filez have
the same filenames, dis may make tha ordinary filez inaccessible.)
.TP
.BR block= { 512 | 1024 | 2048 }
Set tha block size ta tha indicated value.
(Default:
.BR block=1024 .)
.TP
.BR conv= { a [ uto ]| b [ inary ]| m [ text ]| t [ ext ]}
(Default:
.BR conv=binary .)
Since Linux 1.3.54 dis option has no effect no mo'.
(And non-binary settings used ta be straight-up dangerous,
possibly leadin ta silent data corruption.)
.TP
.B cruft
If tha high byte of tha file length gotz nuff other garbage,
set dis mount option ta ignore tha high order bitz of tha file length.
This implies dat a gangbangin' file cannot be larger than 16\ MB.
.TP
.BI session= x
Select number of session on multisession CD. (Since 2.3.4.)
.TP
.BI sbsector= xxx
Session begins from sector xxx. (Since 2.3.4.)
.LP
Da followin options is tha same as fo' vfat n' specifyin dem only makes
sense when rockin discs encoded rockin Microsoftz Joliet extensions.
.TP
.BI iocharset= value
Characta set ta use fo' convertin 16 bit Unicode charactas on CD
to 8 bit characters. Da default is iso8859-1.
.TP
.B utf8
Convert 16 bit Unicode charactas on CD ta UTF-8.

.SH "Mount options fo' jfs"
.TP
.BI iocharset= name
Characta set ta use fo' convertin from Unicode ta ASCII.  Da default is
to do no conversion. I aint talkin' bout chicken n' gravy biatch.  Use
.B iocharset=utf8
for UTF8 translations.  This requires CONFIG_NLS_UTF8 ta be set in
the kernel
.I ".config"
file.
.TP
.BI resize= value
Resize tha volume to
.I value
blocks. JFS only supports growin a volume, not shrinkin dat shit. This option
is only valid durin a remount, when tha volume is mounted read-write. The
.B resize
keyword wit no value will grow tha volume ta tha full size of tha partition.
.TP
.B nointegrity
Do not write ta tha journal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da primary use of dis option is ta allow
for higher performizzle when restorin a volume from backup media. The
integritizzle of tha volume aint guaranteed if tha system abnormally ends.
.TP
.B integrity
Default.  Commit metadata chizzlez ta tha journal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Use dis option ta remount
a volume where the
.B nointegrity
option was previously specified up in order ta restore aiiight behavior.
.TP
.BR errors= { continue | remount-ro | panic }
Define tha behaviour when a error is encountered.
(Either ignore errors n' just mark tha filesystem erroneous n' continue,
or remount tha filesystem read-only, or panic n' halt tha system.)
.TP
.BR noquota | quota | usrquota | grpquota
These options is accepted but ignored.

.SH "Mount options fo' minix"
None.

.SH "Mount options fo' msdos"
See mount options fo' fat.
If the
.I msdos
filesystem detects a inconsistency, it reports a error n' sets tha file
system read-only. Da filesystem can be made writable again n' again n' again by remounting
it.

.SH "Mount options fo' ncpfs"
Just like
.IR nfs ", tha " ncpfs
implementation expects a funky-ass binary argument (a
.IR "struct ncp_mount_data" )
to tha mount system call. This argument is constructed by
.BR ncpmount (8)
and tha current version of
.B mount
(2.12) do not know anythang bout ncpfs.

.SH "Mount options fo' nfs n' nfs4"
See tha options section of the
.BR nfs (5)
man page (nfs-utils package must be installed).

The
.IR nfs " n' " nfs4
implementation expects a funky-ass binary argument (a
.IR "struct nfs_mount_data" )
to tha mount system call. This argument is constructed by
.BR mount.nfs (8)
and tha current version of
.B mount
(2.13) do not know anythang bout nfs n' nfs4.

.SH "Mount options fo' ntfs"
.TP
.BI iocharset= name
Characta set ta use when returnin file names.
Unlike VFAT, NTFS suppresses names dat contain
nonconvertible characters. Deprecated.
.\" since 2.5.11
.TP
.BI nls= name
New name fo' tha option earlier called
.IR iocharset .
.\" since 2.5.11
.TP
.B utf8
Use UTF-8 fo' convertin file names.
.TP
.BR uni_xlate= { 0 | 1 | 2 }
For 0 (or `no' or `false'), do not use escape sequences
for unknown Unicode characters.
For 1 (or `yes' or `true') or 2, use vfat-style 4-byte escape sequences
startin wit ":" yo. Here 2 give a lil-endian encoding
and 1 a funky-ass byteswapped bigendian encoding.
.TP
.B posix=[0|1]
If enabled (posix=1), tha filesystem distinguishes between
upper n' lower case. Da 8.3 alias names is presented as
hard links instead of bein suppressed. Y'all KNOW dat shit, muthafucka! This option is obsolete.
.TP
\fBuid=\fP\,\fIvalue\fP, \fBgid=\fP\,\fIvalue\fP n' \fBumask=\fP\,\fIvalue\fP
Set tha file permission on tha filesystem.
Da umask value is given up in octal.
By default, tha filez is owned by root n' not readable by some muthafucka else.

.SH "Mount options fo' proc"
.TP
\fBuid=\fP\,\fIvalue\fP n' \fBgid=\fP\,\fIvalue\fP
These options is recognized yo, but have no effect as far as I can see.

.SH "Mount options fo' ramfs"
Ramfs be a memory based filesystem. Mount it n' you have dat shit. Unmount it
and it is gone. Present since Linux 2.3.99pre4.
There is no mount options.

.SH "Mount options fo' reiserfs"
Reiserfs be a journalin filesystem.
.TP
.B conv
Instructs version 3.6 reiserfs software ta mount a version 3.5 filesystem,
usin tha 3.6 format fo' newly pimped objects, n' you can put dat on yo' toast. This filesystem will no
longer be compatible wit reiserfs 3.5 tools.
.TP
.BR hash= { rupasov | chronic | r5 | detect }
Choose which hash function reiserfs will use ta find filez within directories.
.RS
.TP
.B rupasov
A hash invented by Yury Yu fo'sho. Rupasov.  It be fast n' preserves locality,
mappin lexicographically close file names ta close hash joints.
This option should not be used, as it causes a high probabilitizzle of hash
collisions.
.TP
.B tea
A Davis-Meyer function implemented by Jeremy Fitzhardinge.
It uses hash permutin bits up in tha name.  It gets high randomness
and, therefore, low probabilitizzle of hash collisions at some CPU cost.
This may be used if EHASHCOLLISION errors is experienced wit tha r5 hash.
.TP
.B r5
A modified version of tha rupasov hash. Well shiiiit, it is used by default n' is
the dopest chizzle unless tha filesystem has big-ass directories and
unusual file-name patterns.
.TP
.B detect
Instructs
.I mount
to detect which hash function is up in use by examining
the filesystem bein mounted, n' ta write dis shiznit into
the reiserfs superblock. This is only useful on tha straight-up original gangsta mount of
an oldschool format filesystem.
.RE
.TP
.B hashed_relocation
Tunes tha block allocator. Shiiit, dis aint no joke. This may provide performizzle improvements
in some thangs.
.TP
.B no_unhashed_relocation
Tunes tha block allocator. Shiiit, dis aint no joke. This may provide performizzle improvements
in some thangs.
.TP
.B noborder
Disable tha border allocator algorithm invented by Yury Yu fo'sho. Rupasov.
This may provide performizzle improvements up in some thangs.
.TP
.B nolog
Disable journaling. This will provide slight performizzle improvements in
some thangs all up in tha cost of losin reiserfss fast recovery from crashes.
Even wit dis option turned on, reiserfs still performs all journaling
operations, save fo' actual writes tha fuck into its journalin area.  Implementation
of
.I nolog
is a work up in progress.
.TP
.B notail
By default, reiserfs stores lil' small-ass filez n' `file tails' directly tha fuck into its
tree. This confuses some utilitizzles such as
.BR LILO (8).
This option is used ta disable packin of filez tha fuck into tha tree.
.TP
.B replayonly
Replay tha transactions which is up in tha journal yo, but do not actually
mount tha filesystem. Mainly used by
.IR reiserfsck .
.TP
.BI resize= number
A remount option which permits online expansion of reiserfs partitions.
Instructs reiserfs ta assume dat tha thang has
.I number
blocks.
This option is designed fo' use wit devices which is under logical
volume pimpment (LVM).
There be a special
.I resizer
utilitizzle which can be obtained from
.IR ftp://ftp.namesys.com/pub/reiserfsprogs .
.TP
.B user_xattr
Enable Extended User Attributes. Right back up in yo muthafuckin ass. See the
.BR attr (5)
manual page.
.TP
.B acl
Enable POSIX Access Control Lists, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See the
.BR acl (5)
manual page.
.TP
.BR barrier=none " / " barrier=flush "
This disablez / enablez tha use of write barriers up in tha journalin code.
barrier=none disables, barrier=flush enablez (default). This also requires an
IO stack which can support barriers, n' if reiserfs gets a error on a funky-ass barrier
write, it will disable barriers again n' again n' again wit a warning.  Write barriers enforce
proper on-disk orderin of journal commits, makin volatile disk write caches
safe ta use, at some performizzle penalty.  If yo' disks is battery-backed in
one way or another, disablin barriers may safely improve performance.

.SH "Mount options fo' romfs"
None.

.SH "Mount options fo' squashfs"
None.

.SH "Mount options fo' smbfs"
Just like
.IR nfs ", tha " smbfs
implementation expects a funky-ass binary argument (a
.IR "struct smb_mount_data" )
to tha mount system call. This argument is constructed by
.BR smbmount (8)
and tha current version of
.B mount
(2.12) do not know anythang bout smbfs.

.SH "Mount options fo' sysv"
None.

.SH "Mount options fo' tmpfs"
.TP
.BI size= nbytes
Override default maximum size of tha filesystem.
Da size is given up in bytes, n' rounded up ta entire pages.
Da default is half of tha memory. Da size parameta also accepts a suffix %
to limit dis tmpfs instizzle ta dat cementage of yo' physical RAM:
the default, when neither size nor nr_blocks is specified, is size=50%
.TP
.B nr_blocks=
Da same as size yo, but up in blockz of PAGE_CACHE_SIZE
.TP
.B nr_inodes=
Da maximum number of inodes fo' dis instance. Da default
is half of tha number of yo' physical RAM pages, or (on a
machine wit highmem) tha number of lowmem RAM pages,
whichever is tha lower.
.PP
Da tmpfs mount options fo' sizin (\c
.BR size ,
.BR nr_blocks ,
and
.BR nr_inodes )
accept a suffix
.BR k ,
.B m
or
.B g
for Ki, Mi, Gi (binary kilo (kibi), binary mega (mebi) n' binary giga (gibi)) n' can be chizzled on remount.

.TP
.B mode=
Set initial permissionz of tha root directory.
.TP
.B uid=
Da user id.
.TP
.B gid=
Da crew id.
.TP
.B mpol=[default|prefer:Node|bind:NodeList|interleave|interleave:NodeList]
Set tha NUMA memory allocation policy fo' all filez up in that
instizzle (if tha kernel CONFIG_NUMA is enabled) \(en which can be adjusted on the
fly via 'mount \-o remount \&...'
.RS
.TP
.B default
prefers ta allocate memory from tha local node
.TP
.B prefer:Node
prefers ta allocate memory from tha given Node
.TP
.B bind:NodeList
allocates memory only from nodes up in NodeList
.TP
.B interleave
prefers ta allocate from each node up in turn
.TP
.B interleave:NodeList
allocates from each node of NodeList up in turn.
.PP
Da NodeList format be a cold-ass lil comma-separated list of decimal numbers n' ranges, a
range bein two "hyphen-minus"-separated decimal numbers, tha smallest n' phattest node
numbers up in tha range.  For example, mpol=bind:0\(en3,5,7,9\(en15

Note dat tryin ta mount a tmpfs wit a mpol option will fail if the
runnin kernel do not support NUMA; n' will fail if its nodelist
specifies a node which aint online. Put ya muthafuckin choppers up if ya feelin dis shiznit!  If yo' system relies on that
tmpfs bein mounted yo, but from time ta time runs a kernel built without
NUMA capabilitizzle (like a safe recovery kernel), or wit fewer nodes
online, then it be advisable ta omit tha mpol option from automatic
mount options.  It can be added later, when tha tmpfs be already mounted
on MountPoint, by 'mount \-o remount,mpol=Policy:NodeList MountPoint'.

.SH "Mount options fo' ubifs"
UBIFS be a gangbangin' flash file system which works on top of UBI volumes. Note that
.B
atime
is not supported n' be always turned off.
.TP
Da thang name may be specified as
.RS
.B ubiX_Y
UBI thang number
.BR X ,
volume number
.B Y
.TP
.B ubiY
UBI thang number
.BR 0 ,
volume number
.B Y
.TP
.B ubiX:NAME
UBI thang number
.BR X ,
volume wit name
.B NAME
.TP
.B ubi:NAME
UBI thang number
.BR 0 ,
volume wit name
.B NAME
.RE
Alternative
.B !
separator may be used instead of
.BR : .
.TP
Da followin mount options is available:
.TP
.B bulk_read
Enable bulk-read. Y'all KNOW dat shit, muthafucka! VFS read-ahead is disabled cuz it slows down tha file
system. Bulk-Read be a internal optimization. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Some flashes may read fasta if
the data is read at one go, rather than at nuff muthafuckin read requests, n' you can put dat on yo' toast. For
example, OneNAND can do "read-while-load" if it readz mo' than one NAND page.
.TP
.B no_bulk_read
Do not bulk-read. Y'all KNOW dat shit, muthafucka! This is tha default.
.TP
.B chk_data_crc
Peep data CRC-32 checksums. This is tha default.
.TP
.BR no_chk_data_crc .
Do not check data CRC-32 checksums. With dis option, tha filesystem do not
check CRC-32 checksum fo' data yo, but it do check it fo' tha internal indexing
information. I aint talkin' bout chicken n' gravy biatch. This option only affects reading, not writing. CRC-32 be always
calculated when freestylin tha data.
.TP
.BR compr= { none | lzo | zlib }
Select tha default compressor which is used when freshly smoked up filez is written. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is
still possible ta read compressed filez if mounted wit the
.B none
option.

.SH "Mount options fo' udf"
udf is tha "Universal Disk Format" filesystem defined by tha Optical
Storage Technologizzle Association, n' is often used fo' DVD-ROM.
See also
.IR iso9660 .
.TP
.B gid=
Set tha default group.
.TP
.B umask=
Set tha default umask.
Da value is given up in octal.
.TP
.B uid=
Set tha default user.
.TP
.B unhide
Show otherwise hidden files.
.TP
.B undelete
Show deleted filez up in lists.
.TP
.B nostrict
Unset strict conformance.
.\" .TP
.\" .B utf8
.\" (unused).
.TP
.B iocharset
Set tha NLS characta set.
.TP
.B bs=
Set tha block size. (May not work unless 2048.)
.TP
.B novrs
Skip volume sequence recognition.
.TP
.B session=
Set tha CDROM session countin from 0. Default: last session.
.TP
.B anchor=
Override standard anchor location. I aint talkin' bout chicken n' gravy biatch. Default: 256.
.TP
.B volume=
Override tha VolumeDesc location. I aint talkin' bout chicken n' gravy biatch. (unused)
.TP
.B partition=
Override tha PartitionDesc location. I aint talkin' bout chicken n' gravy biatch. (unused)
.TP
.B lastblock=
Set tha last block of tha filesystem.
.TP
.B fileset=
Override tha fileset block location. I aint talkin' bout chicken n' gravy biatch. (unused)
.TP
.B rootdir=
Override tha root directory location. I aint talkin' bout chicken n' gravy biatch. (unused)

.SH "Mount options fo' ufs"
.TP
.BI ufstype= value
UFS be a gangbangin' filesystem widely used up in different operatin systems.
Da problem is differences among implementations. Featurez of some
implementations is undocumented, so its hard ta recognize the
type of ufs automatically.
Thatz why tha user must specify tha type of ufs by mount option.
Possible joints are:
.RS
.TP
.B old
Oldskool format of ufs, dis is tha default, read only.
(Don't forget ta give tha \-r option.)
.TP
.B 44bsd
For filesystems pimped by a BSD-like system (NetBSD, FreeBSD, OpenBSD).
.TP
.B ufs2
Used up in FreeBSD 5.x supported as read-write.
.TP
.B 5xbsd
Synonym fo' ufs2.
.TP
.B sun
For filesystems pimped by SunOS or Solaris on Sparc.
.TP
.B sunx86
For filesystems pimped by Solaris on x86.
.TP
.B hp
For filesystems pimped by HP-UX, read-only.
.TP
.B nextstep
For filesystems pimped by NeXTStep (on NeXT station) (currently read only).
.TP
.B nextstep-cd
For NextStep CDROMs (block_size == 2048), read-only.
.TP
.B openstep
For filesystems pimped by OpenStep (currently read only).
Da same filesystem type be also used by Mac OS X.
.RE

.TP
.BI onerror= value
Set behaviour on error:
.RS
.TP
.B panic
If a error is encountered, cause a kernel panic.
.TP
.RB [ lock | umount | repair ]
These mount options don't do anythang at present;
when a error is encountered only a cold-ass lil console message is printed.
.RE

.SH "Mount options fo' umsdos"
See mount options fo' msdos.
The
.B dotsOK
option is explicitly capped by
.IR umsdos .

.SH "Mount options fo' vfat"
First of all, tha mount options for
.I fat
are recognized.
The
.B dotsOK
option is explicitly capped by
.IR vfat .
Furthermore, there are
.TP
.B uni_xlate
Translate unhandled Unicode charactas ta special escaped sequences.
This lets you backup n' restore filenames dat is pimped wit any
Unicode characters. Without dis option, a '?' is used when no
translation is possible. Da escape characta is ':' cuz it is
otherwise invalid on tha vfat filesystem. Da escape sequence
that gets used, where u is tha unicode character,
is: ':', (u & 0x3f), ((u>>6) & 0x3f), (u>>12).
.TP
.B posix
Allow two filez wit names dat only differ up in case.
This option is obsolete.
.TP
.B nonumtail
First try ta cook up a gangbangin' finger-lickin' dirty-ass short name without sequence number,
before trying
.IR name\s+3~\s0num.ext .
.TP
.B utf8
UTF8 is tha filesystem safe 8-bit encodin of Unicode dat is used by the
console. Well shiiiit, it can be enabled fo' tha filesystem wit dis option or disabled
with utf8=0, utf8=no or utf8=false. If `uni_xlate' gets set, UTF8 gets
disabled.
.TP
.BR shortname= { lower | win95 | winnt | mixed }

Defines tha behaviour fo' creation n' display of filenames which fit into
8.3 characters. If a long-ass name fo' a gangbangin' file exists, it will always be
preferred display. There is four modes:
:
.RS
.TP
.I lower
Force tha short name ta lower case upon display; store a long-ass name when
the short name aint all upper case.
.TP
.I win95
Force tha short name ta upper case upon display; store a long-ass name when
the short name aint all upper case.
.TP
.I winnt
Display tha shortname as is; store a long-ass name when tha short name is
not all lower case or all upper case.
.TP
.I mixed
Display tha short name as is; store a long-ass name when tha short name is not
all upper case. This mode is tha default since Linux 2.6.32.
.RE


.SH "Mount options fo' usbfs"
.TP
\fBdevuid=\fP\,\fIuid\fP n' \fBdevgid=\fP\,\fIgid\fP n' \fBdevmode=\fP\,\fImode\fP
Set tha balla n' crew n' mode of tha thang filez up in tha usbfs filesystem
(default: uid=gid=0, mode=0644). Da mode is given up in octal.
.TP
\fBbusuid=\fP\,\fIuid\fP n' \fBbusgid=\fP\,\fIgid\fP n' \fBbusmode=\fP\,\fImode\fP
Set tha balla n' crew n' mode of tha bus directories up in tha usbfs
filesystem (default: uid=gid=0, mode=0555). Da mode is given up in octal.
.TP
\fBlistuid=\fP\,\fIuid\fP n' \fBlistgid=\fP\,\fIgid\fP n' \fBlistmode=\fP\,\fImode\fP
Set tha balla n' crew n' mode of tha file
.I devices
(default: uid=gid=0, mode=0444). Da mode is given up in octal.

.SH "Mount options fo' xenix"
None.

.SH "Mount options fo' xfs"
.TP
.B allocsize=size
Sets tha buffered I/O end-of-file preallocation size when
fuckin wit delayed allocation writeout (default size is 64\ KiB).
Valid joints fo' dis option is page size (typically 4\ KiB)
all up in ta 1\ GiB, inclusive, up in power-of-2 increments.
.sp
Da default behaviour is fo' dynamic end-of-file
preallocation size, which uses a set of heuristics to
optimise tha preallocation size based on tha current
allocation patterns within tha file n' tha access patterns
to tha file. Right back up in yo muthafuckin ass. Specifyin a gangbangin' fixed allocsize value turns off
the dynamic behaviour.
.TP
.BR attr2 | noattr2
Da options enable/disable a "opportunistic" improvement to
be made up in tha way inline extended attributes is stored
on-disk.  When tha freshly smoked up form is used fo' tha last time when
attr2 is selected (either when settin or removin extended
attributes) tha on-disk superblock feature bit field will be
updated ta reflect dis format bein up in use.
.sp
Da default behaviour is determined by tha on-disk feature
bit indicatin dat attr2 behaviour be active. If either
mount option it set, then dat becomes tha freshly smoked up default used
by tha filesystem.
.sp
CRC enabled filesystems always use tha attr2 format, n' so
will reject tha noattr2 mount option if it is set.
.TP
.BR barrier | nobarrier
Enables/disablez tha use of block layer write barriers for
writes tha fuck into tha journal n' fo' data integritizzle operations.
This allows fo' drive level write cachin ta be enabled, for
devices dat support write barriers.
.TP
.BR discard | nodiscard
Enable/disable tha issuin of commandz ta let tha block
device reclaim space freed by tha filesystem.  This is
useful fo' SSD devices, thinly provisioned LUNs n' virtual
machine images yo, but may gotz a performizzle impact.
.sp
Note: It be currently recommended dat you use tha fstrim
application ta discard unused blocks rather than tha discard
mount option cuz tha performizzle impact of dis option
is like severe.
.TP
.BR grpid | bsdgroups | nogrpid | sysvgroups
These options define what tha fuck crew ID a newly pimped file
gets, n' you can put dat on yo' toast.  When grpid is set, it takes tha crew ID of the
directory up in which it is pimped; otherwise it takes the
fsgid of tha current process, unless tha directory has the
setgid bit set, up in which case it takes tha gid from the
parent directory, n' also gets tha setgid bit set if it is
a directory itself.
.TP
.B filestreams
Make tha data allocator use tha filestreams allocation mode
across tha entire filesystem rather than just on directories
configured ta use dat shit.
.TP
.BR ikeep | noikeep
When ikeep is specified, XFS do not delete empty inode
clustas n' keeps dem round on disk.  When noikeep is
specified, empty inode clustas is moonwalked back ta tha free
space pool.
.TP
.BR inode32 | inode64
When inode32 is specified, it indicates dat XFS limits
inode creation ta locations which aint gonna result up in inode
numbers wit mo' than 32 bitz of significance.
.sp
When inode64 is specified, it indicates dat XFS be allowed
to create inodes at any location up in tha filesystem,
includin dem which will result up in inode numbers occupying
more than 32 bitz of significance.
.sp
inode32 is provided fo' backwardz compatibilitizzle wit older
systems n' applications, since 64 bits inode numbers might
cause problems fo' some applications dat cannot handle
pimpin' inode numbers.  If applications is up in use which do
not handle inode numbers bigger than 32 bits, tha inode32
option should be specified.
.TP
.BR  largeio | nolargeio
If "nolargeio" is specified, tha optimal I/O reported in
st_blksize by stat(2) is ghon be as lil' small-ass as possible ta allow
user applications ta avoid inefficient read/modify/write
I/O.  This is typically tha page size of tha machine, as
this is tha granularitizzle of tha page cache.
.sp
If "largeio" specified, a gangbangin' filesystem dat was pimped wit a
"swidth" specified will return tha "swidth" value (in bytes)
in st_blksize. If tha filesystem aint gots a "swidth"
specified but do specify a "allocsize" then "allocsize"
(in bytes) is ghon be returned instead. Y'all KNOW dat shit, muthafucka! Otherwise tha behaviour
is tha same ol' dirty as if "nolargeio" was specified.
.TP
.B logbufs=value
Set tha number of in-memory log buffers.  Valid numbers
range from 2\(en8 inclusive.
.sp
Da default value is 8 buffers.
.sp
If tha memory cost of 8 log buffers is too high on small
systems, then it may be reduced at some cost ta performance
on metadata intensive workloads. Da logbsize option below
controls tha size of each buffer n' so be also relevant to
this case.
.TP
.B logbsize=value
Set tha size of each in-memory log buffer n' shit.  Da size may be
specified up in bytes, or up in kibibytes (KiB) wit a "k" suffix.
Valid sizes fo' version 1 n' version 2 logs is 16384 (value=16k)
and 32768 (value=32k).  Valid sizes fo' version 2 logs also
include 65536 (value=64k), 131072 (value=128k) n' 262144 (value=256k). The
logbsize must be a integer multiple of tha log
stripe unit configured at mkfs time.
.sp
Da default value fo' version 1 logs is 32768, while the
default value fo' version 2 logs is MAX(32768, log_sunit).
.TP
.BR logdev=device n' rtdev=device
Use a external log (metadata journal) and/or real-time device.
An XFS filesystem has up ta three parts: a thugged-out data section, a log
section, n' a real-time section. I aint talkin' bout chicken n' gravy biatch.  Da real-time section is
optional, n' tha log section can be separate from tha data
section or contained within dat shit.
.TP
.B noalign
Data allocations aint gonna be aligned at stripe unit
boundaries. Put ya muthafuckin choppers up if ya feel dis! This is only relevant ta filesystems pimped
with non-zero data alignment parametas (sunit, swidth) by
mkfs.
.TP
.B norecovery
Da filesystem is ghon be mounted without hustlin log recovery.
If tha filesystem was not cleanly unmounted, it is likely to
be inconsistent when mounted up in "norecovery" mode.
Some filez or directories may not be accessible cuz of all dis bullshit.
Filesystems mounted "norecovery" must be mounted read-only or
the mount will fail.
.TP
.B nouuid
Don't check fo' double mounted file systems rockin tha file
system uuid. Y'all KNOW dat shit, muthafucka!  This is useful ta mount LVM snapshot volumes,
and often used up in combination wit "norecovery" fo' mounting
read-only snapshots.
.TP
.B noquota
Forcibly turns off all quota accountin n' enforcement
within tha filesystem.
.TP
.B uquota/usrquota/uqnoenforce/quota
User disk quota accountin enabled, n' limits (optionally)
enforced. Y'all KNOW dat shit, muthafucka!  Refer ta xfs_quota(8) fo' further details.
.TP
.B gquota/grpquota/gqnoenforce
Group disk quota accountin enabled n' limits (optionally)
enforced. Y'all KNOW dat shit, muthafucka!  Refer ta xfs_quota(8) fo' further details.
.TP
.B pquota/prjquota/pqnoenforce
Project disk quota accountin enabled n' limits (optionally)
enforced. Y'all KNOW dat shit, muthafucka!  Refer ta xfs_quota(8) fo' further details.
.TP
.BR sunit=value " n' " swidth=value
Used ta specify tha stripe unit n' width fo' a RAID device
or a stripe volume.  "value" must be specified up in 512-byte
block units, n' you can put dat on yo' toast. These options is only relevant ta filesystems
that was pimped wit non-zero data alignment parameters.
.sp
Da sunit n' swidth parametas specified must be compatible
with tha existin filesystem alignment characteristics.  In
general, dat means tha only valid chizzlez ta sunit are
increasin it by a power-of-2 multiple. Valid swidth joints
are any integer multiple of a valid sunit value.
.sp
Typically tha only time these mount options is necessary if
afta a underlyin RAID thang has had itz geometry
modified, like fuckin addin a freshly smoked up disk ta a RAID5 lun and
reshapin dat shit.
.TP
.B swalloc
Data allocations is ghon be rounded up ta stripe width boundaries
when tha current end of file is bein extended n' tha file
size is larger than tha stripe width size.
.TP
.B wsync
When specified, all filesystem namespace operations are
executed synchronously. This ensures dat when tha namespace
operation (create, unlink, etc) completes, tha chizzle ta the
namespace is on stable storage. This is useful up in HA setups
where failover must not result up in clients seeing
inconsistent namespace presentation durin or afta a
failover event.

.SH "Mount options fo' xiafs"
None fo' realz. Although not a god damn thang is poppin' off wit xiafs, it aint used much,
and aint maintained. Y'all KNOW dat shit, muthafucka! Probably one shouldn't use dat shit.
Since Linux version 2.1.21 xiafs is no longer part of tha kernel source.

.SH "THE LOOP DEVICE"
One further possible type be a mount via tha loop device. For example,
the command
.RS
.sp
.B "mount /tmp/disk.img /mnt \-t vfat \-o loop=/dev/loop"
.sp
.RE
will set up tha loop device
.I /dev/loop3
to correspond ta tha file
.IR /tmp/disk.img ,
and then mount dis thang on
.IR /mnt .

If no explicit loop thang is mentioned
(but just a option `\fB\-o loop\fP' is given), then
.B mount
will try ta find some unused loop thang n' use that, fo' example
.RS
.sp
.B "mount /tmp/disk.img /mnt \-o loop"
.sp
.RE
Da mount command
.B automatically
creates a loop thang from a regular file if a gangbangin' filesystem type is
not specified or tha filesystem is known fo' libblkid, fo' example:
.RS
.sp
.B "mount /tmp/disk.img /mnt"
.sp
.B "mount \-t ext3 /tmp/disk.img /mnt"
.sp
.RE
This type of mount knows bout four options, namely
.BR loop ", " offset " n' " sizelimit " ,
that is straight-up options to
.BR \%losetup (8).
(These options can be used up in addizzle ta dem specific
to tha filesystem type.)

Since Linux 2.6.25 is supported auto-destruction of loop devices and
then any loop thang allocated by
.B mount
will be freed by
.B umount
independently on
.IR /etc/mtab .

Yo ass can also free a loop thang by hand, rockin `losetup \-d' or `umount \-d`.

.SH RETURN CODES
.B mount
has tha followin return codes (the bits can be ORed):
.TP
.B 0
success
.TP
.B 1
incorrect invocation or permissions
.TP
.B 2
system error (out of memory, cannot fork, no mo' loop devices)
.TP
.B 4
internal
.B mount
bug
.TP
.B 8
user interrupt
.TP
.B 16
problems freestylin or lockin /etc/mtab
.TP
.B 32
mount failure
.TP
.B 64
some mount succeeded
.RE

Da command mount \-a returns 0 (all success), 32 (all failed) or 64 (some
failed, some success).

.SH "EXTERNAL HELPERS"
Da syntax of external mount helpers is:

.RS
.BI /sbin/mount. <suffix>
.I spec dir
.RB [ \-sfnv ]
.RB [ \-o
.IR options ]
.RB [ \-t
.IR type.subtype ]
.RE

where tha <type> is filesystem type n' \-sfnvo options have same meanin like
standard mount options. Da \-t option is used  fo' filesystems wit subtypes
support (for example /sbin/mount.fuse \-t fuse.sshfs).

Da command mount do not pass mount options
.BR unbindable ,
.BR runbindable ,
.BR private ,
.BR rprivate ,
.BR slave ,
.BR rslave ,
.BR shared ,
.BR rshared ,
.BR auto ,
.BR noauto ,
.BR comment ,
.BR x-* ,
.BR loop ,
.B offset
and
.B sizelimit
to mount.<suffix> helpers. Da all others options are
used up in comma delimited list as argument fo' tha option \-o.

.SH FILES
.TP 18n
.I /etc/fstab
filesystem table
.TP
.I /etc/mtab
table of mounted filesystems
.TP
.I /etc/mtab\s+3~\s0
lock file
.TP
.I /etc/mtab.tmp
temporary file
.TP
.I /etc/filesystems
a list of filesystem types ta try
.SH ENVIRONMENT
.IP LIBMOUNT_FSTAB=<path>
overrides tha default location of tha fstab file
.IP LIBMOUNT_MTAB=<path>
overrides tha default location of tha mtab file
.IP LIBMOUNT_DEBUG=0xffff
enablez debug output
.SH "SEE ALSO"
.BR mount (2),
.BR umount (2),
.BR fstab (5),
.BR umount (8),
.BR swapon (8),
.BR findmnt (8),
.BR nfs (5),
.BR xfs (5),
.BR e2label (8),
.BR xfs_admin (8),
.BR mountd (8),
.BR nfsd (8),
.BR mke2fs (8),
.BR tune2fs (8),
.BR losetup (8)
.SH BUGS
It be possible fo' a cold-ass lil corrupted filesystem ta cause a cold-ass lil crash.
.PP
Some Linux filesystems don't support
.B "\-o sync n' \-o dirsync"
(the ext2, ext3, fat n' vfat filesystems
.I do
support synchronous thugged-out shiznit (a la BSD) when mounted wit the
.B sync
option).
.PP
The
.B "\-o remount"
may not be able ta chizzle mount parametas (all
.IR ext2fs -specific
parameters, except
.BR sb ,
are chizzleable wit a remount, fo' example yo, but you can't chizzle
.B gid
or
.B umask
for the
.IR fatfs ).
.PP
It be possible dat files
.I /etc/mtab
and
.I /proc/mounts
don't match. Da first file is based only on tha mount command options yo, but the
content of tha second file also dependz on tha kernel n' others settings (e.g.\&
remote NFS server n' shit. In particular case tha mount command may reports unreliable
information on some NFS mount point n' tha /proc/mounts file probably gotz nuff
more reliable shiznit.)
.PP
Checkin filez on NFS filesystem referenced by file descriptors (i.e.\& the
.B fcntl
and
.B ioctl
familiez of functions) may lead ta inconsistent result cuz of tha lack of
consistency check up in kernel even if noac is used.
.PP
The
.B loop
option wit the
.B offset
or
.B sizelimit
options used may fail when rockin olda kernels if the
.B mount
command can't confirm dat tha size of tha block thang has been configured
as requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This thang can be hit dat shiznit round by using
the
.B losetup
command manually before calling
.B mount
with tha configured loop device.
.SH HISTORY
A
.B mount
command existed up in Version 5 AT&T UNIX.
.SH AUTHORS
.nf
Karel Zak <kzak@redhat.com>
.fi
.SH AVAILABILITY
Da mount command is part of tha util-linux package n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.

