.TH POSTSCREEN 8 
.ad
.fi
.SH NAME
postscreen
\-
Postfix zombie blocker
.SH "SYNOPSIS"
.na
.nf
\fBpostscreen\fR [generic Postfix daemon options]
.SH DESCRIPTION
.ad
.fi
Da Postfix \fBpostscreen\fR(8) server serves up additional
protection against mail server overload. Y'all KNOW dat shit, muthafucka! One \fBpostscreen\fR(8)
process handlez multiple inbound SMTP connections, n' decides
which clients may rap ta a Postfix SMTP server process.
By keepin spambots away, \fBpostscreen\fR(8) leaves more
SMTP server processes available fo' legitimate clients, and
delays tha onset of server overload conditions.

This program should not be used on SMTP ports dat receive
mail from end-user clients (MUAs). In a typical deployment,
\fBpostscreen\fR(8) handlez tha MX steez on TCP port 25,
while MUA clients submit mail via tha \fBsubmission\fR
service on TCP port 587 which requires client authentication.
Alternatively, a joint could set up a thugged-out dedicated, non-postscreen,
"port 25" server dat serves up \fBsubmission\fR steez and
client authentication yo, but no MX service.

\fBpostscreen\fR(8) maintains a temporary whitelist for
clients dat have passed a fuckin shitload of tests, n' you can put dat on yo' toast.  When a SMTP
client IP address is whitelisted, \fBpostscreen\fR(8) hands
off tha connection immediately ta a Postfix SMTP server
process. This minimizes tha overhead fo' legitimate mail.

By default, \fBpostscreen\fR(8) logs statistics n' hands
off every last muthafuckin connection ta a Postfix SMTP server process, while
excludin clients up in mynetworks from all tests (primarily,
to avoid problems wit non-standard SMTP implementations
in network appliances).  This mode is useful fo' non-destructive
testing.

In a typical thang setting, \fBpostscreen\fR(8) is
configured ta reject mail from clients dat fail one or
more tests, n' you can put dat on yo' toast. \fBpostscreen\fR(8) logs rejected mail wit the
client address, helo, sender n' recipient shiznit.

\fBpostscreen\fR(8) aint a SMTP proxy; dis is intentional.
Da purpose is ta keep spambots away from Postfix SMTP
server processes, while minimizin overhead fo' legitimate
traffic.
.SH "SECURITY"
.na
.nf
.ad
.fi
Da \fBpostscreen\fR(8) server is moderately security-sensitive.
It talks ta untrusted clients on tha network. Da process
can be run chrooted at fixed low privilege.
.SH "STANDARDS"
.na
.nf
RFC 821 (SMTP protocol)
RFC 1123 (Host requirements)
RFC 1652 (8bit-MIME transport)
RFC 1869 (SMTP steez extensions)
RFC 1870 (Message Size Declaration)
RFC 1985 (ETRN command)
RFC 2034 (SMTP Enhanced Status Codes)
RFC 2821 (SMTP protocol)
Not: RFC 2920 (SMTP Pipelining)
RFC 3207 (STARTTLS command)
RFC 3461 (SMTP DSN Extension)
RFC 3463 (Enhanced Status Codes)
RFC 5321 (SMTP protocol, includin multi-line 220 banners)
.SH DIAGNOSTICS
.ad
.fi
Problems n' transactions is logged ta \fBsyslogd\fR(8).
.SH BUGS
.ad
.fi
Da \fBpostscreen\fR(8) built-in SMTP protocol engine
currently do not announce support fo' AUTH, XCLIENT or
XFORWARD.
If you need ta make these skillz available
on port 25, then do not enable tha optionizzle "afta 220
server greeting" tests, n' do not use DNSBLs dat reject
traffic from dial-up n' residential networks.

Da optionizzle "afta 220 server greeting" tests involve
\fBpostscreen\fR(8)z built-in SMTP protocol engine. When
these tests succeed, \fBpostscreen\fR(8) addz tha client
to tha temporary whitelist yo, but it cannot not hand off the
"live" connection ta a Postfix SMTP server process up in the
middle of a session. I aint talkin' bout chicken n' gravy biatch.  Instead, \fBpostscreen\fR(8) defers
attempts ta serve up mail wit a 4XX status, n' waits for
the client ta disconnect.  When tha client connects again,
\fBpostscreen\fR(8) will allow tha client ta rap ta a
Postfix SMTP server process (provided dat tha whitelist
status has not expired).  \fBpostscreen\fR(8) mitigates
the impact of dis limitation by givin tha "afta 220
server greeting" tests a long-ass expiration time.
.SH "CONFIGURATION PARAMETERS"
.na
.nf
.ad
.fi
Changes ta main.cf is not picked up automatically, as
\fBpostscreen\fR(8) processes may run fo' nuff muthafuckin hours.
Use tha command "postfix reload" afta a cold-ass lil configuration
change.

Da text below serves up only a parameta summary. Right back up in yo muthafuckin ass. See
\fBpostconf\fR(5) fo' mo' details includin examples.

NOTE: Some \fBpostscreen\fR(8) parametas implement
stress-dependent behavior. Shiiit, dis aint no joke.  This is supported only when the
default parameta value is stress-dependent (that is, it
looks like ${stress?X}${stress:Y}, or it is tha $\fIname\fR
of a smtpd parameta wit a stress-dependent default).
Other parametas always evaluate as if tha \fBstress\fR
parameta value is tha empty string.
.SH "COMPATIBILITY CONTROLS"
.na
.nf
.ad
.fi
.IP "\fBpostscreen_command_filta ($smtpd_command_filter)\fR"
A mechanizzle ta transform commandz from remote SMTP clients.
.IP "\fBpostscreen_discard_ehlo_keyword_address_maps ($smtpd_discard_ehlo_keyword_address_maps)\fR"
Lookup tables, indexed by tha remote SMTP client address, with
case insensitizzle listz of EHLO keywordz (pipelining, starttls, auth,
etc.) dat tha \fBpostscreen\fR(8) server aint gonna bust up in tha EHLO response
to a remote SMTP client.
.IP "\fBpostscreen_discard_ehlo_keywordz ($smtpd_discard_ehlo_keywords)\fR"
A case insensitizzle list of EHLO keywordz (pipelining, starttls,
auth, etc.) dat tha \fBpostscreen\fR(8) server aint gonna bust up in tha EHLO
response ta a remote SMTP client.
.SH "TROUBLE SHOOTING CONTROLS"
.na
.nf
.ad
.fi
.IP "\fBpostscreen_expansion_filta (see 'postconf -d' output)\fR"
List of charactas dat is permitted up in postscreen_reject_footer
attribute expansions.
.IP "\fBpostscreen_reject_foota ($smtpd_reject_footer)\fR"
Optionizzle shiznit dat be appended afta a 4XX or 5XX
\fBpostscreen\fR(8) server
response.
.IP "\fBsoft_bounce (no)\fR"
Safety net ta keep mail queued dat would otherwise be returned to
the sender.
.SH "BEFORE-POSTSCREEN PROXY AGENT"
.na
.nf
.ad
.fi
Available up in Postfix version 2.10 n' later:
.IP "\fBpostscreen_upstream_proxy_protocol (empty)\fR"
Da name of tha proxy protocol used by a optionizzle before-postscreen
proxy agent.
.IP "\fBpostscreen_upstream_proxy_timeout (5s)\fR"
Da time limit fo' tha proxy protocol specified wit the
postscreen_upstream_proxy_protocol parameter.
.SH "PERMANENT WHITE/BLACKLIST TEST"
.na
.nf
.ad
.fi
This test is executed immediately afta a remote SMTP client
connects, n' you can put dat on yo' toast. If a cold-ass lil client is permanently whitelisted, tha client
will be handed off immediately ta a Postfix SMTP server
process.
.IP "\fBpostscreen_access_list (permit_mynetworks)\fR"
Permanent white/blacklist fo' remote SMTP client IP addresses.
.IP "\fBpostscreen_blacklist_action (ignore)\fR"
Da action dat \fBpostscreen\fR(8) takes when a remote SMTP client is
permanently blacklisted wit tha postscreen_access_list parameter.
.SH "MAIL EXCHANGER POLICY TESTS"
.na
.nf
.ad
.fi
When \fBpostscreen\fR(8) is configured ta monitor all primary
and backup MX addresses, it can refuse ta whitelist clients
that connect ta a funky-ass backup MX address only. For lil' small-ass cribs,
this requires configurin primary n' backup MX addresses
on tha same MTA. Larger cribs would gotta share the
\fBpostscreen\fR(8) cache between primary n' backup MTAs,
which would introduce a cold-ass lil common point of failure.
.IP "\fBpostscreen_whitelist_interfaces (static:all)\fR"
A list of local \fBpostscreen\fR(8) server IP addresses where a
non-whitelisted remote SMTP client can obtain \fBpostscreen\fR(8)z temporary
whitelist status.
.SH "BEFORE-GREETING TESTS"
.na
.nf
.ad
.fi
These tests is executed before tha remote SMTP client
receives tha "220 servername" greeting. If no tests remain
afta tha successful completion of dis phase, tha client
will be handed off immediately ta a Postfix SMTP server
process.
.IP "\fBdnsblog_service_name (dnsblog)\fR"
Da name of tha \fBdnsblog\fR(8) steez entry up in master.cf.
.IP "\fBpostscreen_dnsbl_action (ignore)\fR"
Da action dat \fBpostscreen\fR(8) takes when a remote SMTP clientz combined
DNSBL score is equal ta or pimped outa than a threshold (as defined
with tha postscreen_dnsbl_sites n' postscreen_dnsbl_threshold
parameters).
.IP "\fBpostscreen_dnsbl_reply_map (empty)\fR"
A mappin from actual DNSBL domain name which includes a secret
password, ta tha DNSBL domain name dat postscreen will reply with
when it rejects mail.
.IP "\fBpostscreen_dnsbl_sites (empty)\fR"
Optionizzle list of DNS white/blacklist domains, filtas n' weight
factors.
.IP "\fBpostscreen_dnsbl_threshold (1)\fR"
Da inclusive lower bound fo' blockin a remote SMTP client, based on
its combined DNSBL score as defined wit tha postscreen_dnsbl_sites
parameter.
.IP "\fBpostscreen_greet_action (ignore)\fR"
Da action dat \fBpostscreen\fR(8) takes when a remote SMTP client speaks
before its turn within tha time specified wit tha postscreen_greet_wait
parameter.
.IP "\fBpostscreen_greet_banner ($smtpd_banner)\fR"
Da \fItext\fR up in tha optionizzle "220-\fItext\fR..." server
response that
\fBpostscreen\fR(8) sendz ahead of tha real Postfix SMTP serverz "220
text..." response, up in a attempt ta confuse wack SMTP clients so
that they drop a rhyme before they turn (pre-greet).
.IP "\fBpostscreen_greet_wait (${stress?2}${stress:6}s)\fR"
Da amount of time dat \fBpostscreen\fR(8) will wait fo' a SMTP
client ta bust a cold-ass lil command before its turn, n' fo' DNS blocklist
lookup thangs up in dis biatch ta arrive (default: up ta 2 secondz under stress,
up ta 6 secondz otherwise).
.IP "\fBsmtpd_service_name (smtpd)\fR"
Da internal steez dat \fBpostscreen\fR(8) handz off allowed
connections to.
.SH "AFTER-GREETING TESTS"
.na
.nf
.ad
.fi
These tests is executed afta tha remote SMTP client
receives tha "220 servername" greeting. If a cold-ass lil client passes
all tests durin dis phase, it will receive a 4XX response
to RCPT TO commandz until tha client hangs up fo' realz. Afta this,
the client is ghon be allowed ta rap directly ta a Postfix
SMTP server process.
.IP "\fBpostscreen_bare_newline_action (ignore)\fR"
Da action dat \fBpostscreen\fR(8) takes when a remote SMTP client sends
a bare newline character, dat is, a newline not preceded by carriage
return.
.IP "\fBpostscreen_bare_newline_enable (no)\fR"
Enable "bare newline" SMTP protocol tests up in tha \fBpostscreen\fR(8)
server.
.IP "\fBpostscreen_disable_vrfy_command ($disable_vrfy_command)\fR"
Disable tha SMTP VRFY command up in tha \fBpostscreen\fR(8) daemon.
.IP "\fBpostscreen_forbidden_commandz ($smtpd_forbidden_commands)\fR"
List of commandz dat tha \fBpostscreen\fR(8) server considaz in
violation of tha SMTP protocol.
.IP "\fBpostscreen_helo_required ($smtpd_helo_required)\fR"
Require dat a remote SMTP client sendz HELO or EHLO before
commencin a MAIL transaction.
.IP "\fBpostscreen_non_smtp_command_action (drop)\fR"
Da action dat \fBpostscreen\fR(8) takes when a remote SMTP client sends
non-SMTP commandz as specified wit tha postscreen_forbidden_commands
parameter.
.IP "\fBpostscreen_non_smtp_command_enable (no)\fR"
Enable "non-SMTP command" tests up in tha \fBpostscreen\fR(8) server.
.IP "\fBpostscreen_pipelining_action (enforce)\fR"
Da action dat \fBpostscreen\fR(8) takes when a remote SMTP client
sends
multiple commandz instead of bustin  one command n' waitin for
the server ta respond.
.IP "\fBpostscreen_pipelining_enable (no)\fR"
Enable "pipelining" SMTP protocol tests up in tha \fBpostscreen\fR(8)
server.
.SH "CACHE CONTROLS"
.na
.nf
.ad
.fi
.IP "\fBpostscreen_cache_cleanup_interval (12h)\fR"
Da amount of time between \fBpostscreen\fR(8) cache cleanup runs.
.IP "\fBpostscreen_cache_map (btree:$data_directory/postscreen_cache)\fR"
Persistent storage fo' tha \fBpostscreen\fR(8) server decisions.
.IP "\fBpostscreen_cache_retention_time (7d)\fR"
Da amount of time dat \fBpostscreen\fR(8) will cache a expired
temporary whitelist entry before it is removed.
.IP "\fBpostscreen_bare_newline_ttl (30d)\fR"
Da amount of time dat \fBpostscreen\fR(8) will use tha result from
a successful "bare newline" SMTP protocol test.
.IP "\fBpostscreen_dnsbl_ttl (1h)\fR"
Da amount of time dat \fBpostscreen\fR(8) will use tha result from
a successful DNS blocklist test.
.IP "\fBpostscreen_greet_ttl (1d)\fR"
Da amount of time dat \fBpostscreen\fR(8) will use tha result from
a successful PREGREET test.
.IP "\fBpostscreen_non_smtp_command_ttl (30d)\fR"
Da amount of time dat \fBpostscreen\fR(8) will use tha result from
a successful "non_smtp_command" SMTP protocol test.
.IP "\fBpostscreen_pipelining_ttl (30d)\fR"
Da amount of time dat \fBpostscreen\fR(8) will use tha result from
a successful "pipelining" SMTP protocol test.
.SH "RESOURCE CONTROLS"
.na
.nf
.ad
.fi
.IP "\fBline_length_limit (2048)\fR"
Upon input, long lines is chopped up tha fuck into piecez of at most
this length; upon delivery, long lines is reconstructed.
.IP "\fBpostscreen_client_connection_count_limit ($smtpd_client_connection_count_limit)\fR"
How tha fuck nuff simultaneous connections any remote SMTP client is
allowed ta have
with tha \fBpostscreen\fR(8) daemon.
.IP "\fBpostscreen_command_count_limit (20)\fR"
Da limit on tha total number of commandz per SMTP session for
\fBpostscreen\fR(8)z built-in SMTP protocol engine.
.IP "\fBpostscreen_command_time_limit (${stress?10}${stress:300}s)\fR"
Da time limit ta read a entire command line wit \fBpostscreen\fR(8)'s
built-in SMTP protocol engine.
.IP "\fBpostscreen_post_queue_limit ($default_process_limit)\fR"
Da number of clients dat can be waitin fo' steez from a
real Postfix SMTP server process.
.IP "\fBpostscreen_pre_queue_limit ($default_process_limit)\fR"
Da number of non-whitelisted clients dat can be waitin for
a decision whether they will receive steez from a real Postfix
SMTP server
process.
.IP "\fBpostscreen_watchdog_timeout (10s)\fR"
How tha fuck much time a \fBpostscreen\fR(8) process may take ta respond to
a remote SMTP client command or ta big-ass up a cold-ass lil cache operation before it
is terminated by a funky-ass built-in watchdog timer.
.SH "STARTTLS CONTROLS"
.na
.nf
.ad
.fi
.IP "\fBpostscreen_tls_security_level ($smtpd_tls_security_level)\fR"
Da SMTP TLS securitizzle level fo' tha \fBpostscreen\fR(8) server; when
a non-empty value is specified, dis overrides tha obsolete parameters
postscreen_use_tls n' postscreen_enforce_tls.
.IP "\fBtlsproxy_service_name (tlsproxy)\fR"
Da name of tha \fBtlsproxy\fR(8) steez entry up in master.cf.
.SH "OBSOLETE STARTTLS SUPPORT CONTROLS"
.na
.nf
.ad
.fi
These parametas is supported fo' compatibilitizzle with
\fBsmtpd\fR(8) legacy parameters.
.IP "\fBpostscreen_use_tls ($smtpd_use_tls)\fR"
Opportunistic TLS: announce STARTTLS support ta remote SMTP clients,
but do not require dat clients use TLS encryption.
.IP "\fBpostscreen_enforce_tls ($smtpd_enforce_tls)\fR"
Mandatory TLS: announce STARTTLS support ta remote SMTP clients, and
require dat clients use TLS encryption.
.SH "MISCELLANEOUS CONTROLS"
.na
.nf
.ad
.fi
.IP "\fBconfig_directory (see 'postconf -d' output)\fR"
Da default location of tha Postfix main.cf n' master.cf
configuration files.
.IP "\fBdelay_logging_resolution_limit (2)\fR"
Da maximal number of digits afta tha decimal point when logging
sub-second delay joints.
.IP "\fBcommand_directory (see 'postconf -d' output)\fR"
Da location of all postfix administratizzle commands.
.IP "\fBmax_idle (100s)\fR"
Da maximum amount of time dat a idle Postfix daemon process waits
for a incomin connection before terminatin voluntarily.
.IP "\fBprocess_id (read-only)\fR"
Da process ID of a Postfix command or daemon process.
.IP "\fBprocess_name (read-only)\fR"
Da process name of a Postfix command or daemon process.
.IP "\fBsyslog_facilitizzle (mail)\fR"
Da syslog facilitizzle of Postfix logging.
.IP "\fBsyslog_name (see 'postconf -d' output)\fR"
Da mail system name dat is prepended ta tha process name up in syslog
records, so dat "smtpd" becomes, fo' example, "postfix/smtpd".
.SH "SEE ALSO"
.na
.nf
smtpd(8), Postfix SMTP server
tlsproxy(8), Postfix TLS proxy server
dnsblog(8), DNS black/whitelist logger
syslogd(8), system logging
.SH "README FILES"
.na
.nf
.ad
.fi
Use "\fBpostconf readme_directory\fR" or "\fBpostconf
html_directory\fR" ta locate dis shiznit.
.nf
.na
POSTSCREEN_README, Postfix Postscreen Howto
.SH "LICENSE"
.na
.nf
.ad
.fi
Da Secure Maila license must be distributed wit dis software.
.SH "HISTORY"
.na
.nf
.ad
.fi
This steez was introduced wit Postfix version 2.8.

Many scams up in \fBpostscreen\fR(8) was explored up in earlier
work by Mike Tokarev, up in OpenBSD spamd, n' up in MailChannels
Traffic Control.
.SH "AUTHOR(S)"
.na
.nf
Wietse Venema
IBM T.J. Watson Research
P.O. Box 704
Yorktown Heights, NY 10598, USA
