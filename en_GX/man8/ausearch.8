.TH AUSEARCH: "8" "Sept 2009" "Red Hat" "System Administration Utilities"
.SH NAME
ausearch \- a tool ta query audit daemon logs
.SH SYNOPSIS
.B ausearch
.RI [ options ]
.SH DESCRIPTION
\fBausearch\fP be a tool dat can query tha audit daemon logs based fo' events based on different search criteria. Da ausearch utilitizzle can also take input from stdin as long as tha input is tha raw log data. Each commandline option given forms a "and" statement. For example, searchin wit \fB\-m\fP n' \fB\-ui\fP means return events dat have both tha axed type n' match tha user id given. I aint talkin' bout chicken n' gravy biatch fo' realz. An exception is tha \fB\-n\fP option; multiple nodes is allowed up in a search which will return any matchin node.

It should also be noted dat each syscall excursion from user space tha fuck into tha kernel n' back tha fuck into user space has one event ID dat is unique fo' realz. Any auditable event dat is triggered durin dis trip share dis ID so dat they may be correlated.

Different partz of tha kernel may add supplemenstrual records. For example, a audit event on tha syscall "open" will also cause tha kernel ta emit a PATH record wit tha file name. Da ausearch utilitizzle will present all recordz dat make up one event together n' shit. This could mean dat even though you search fo' a specific kind of record, tha resultin events may contain SYSCALL records.

Also be aware dat not all record types have tha axed shiznit. I aint talkin' bout chicken n' gravy biatch. For example, a PATH record aint gots a hostname or a loginuid.

.SH OPTIONS
.TP
.BR \-a ,\  \-\-event \ \fIaudit-event-id\fP
Search fo' a event based on tha given \fIevent ID\fP. Lyrics always start wit suttin' like msg=audit(1116360555.329:2401771). Da event ID is tha number afta tha ':' fo' realz. All audit events dat is recorded from one applicationz syscall have tha same audit event ID fo' realz. A second syscall made by tha same application gonna git a gangbangin' finger-lickin' different event ID. This way they is unique.
.TP
.BR \-\-arch \ \fICPU\fP
Search fo' events based on a specific CPU architecture.  If you do not know tha arch of yo' machine but you wanna use tha 32 bit syscall table n' yo' machine supports 32 bits, you can also use
.B b32
for tha arch. Da same applies ta tha 64 bit syscall table, you can use
.B b64.
Da arch of yo' machine can be found by bustin 'uname -m'.
.TP
.BR \-c ,\  \-\-comm \ \fIcomm-name\fP
Search fo' a event based on tha given \fIcomm name\fP. Da comm name is tha executablez name from tha task structure.
.TP
.BR \-\-debug
Write malformed events dat is skipped ta stderr.
.TP
.BR \-\-checkpoint \ \fIcheckpoint-file\fP
Checkpoint tha output between successive invocationz of ausearch such dat only events not
previously output will print up in subsequent invocations.

An auditd event is made up of one or mo' records. When processin events, ausearch defines
events as either complete or in-complete.  A complete event is either a single record event or
one whose event time occurred 2 secondz up in tha past compared ta tha event bein currently
processed.

A checkpoint be  bigged up  by recordin tha last completed event output along wit tha device
number n' inode of tha file tha last completed event rocked up in \fIcheckpoint-file\fP. On a subsequent invocation,
ausearch will load dis checkpoint data n' as it processes tha log files, it will discard all
complete events until it matches tha checkpointed one fo' realz. At dis point, it will start
outputtin complete events.

Should tha file or tha last checkpointed event not be found, one of a fuckin shitload of errors will result n' ausearch will terminate. Right back up in yo muthafuckin ass. See \fBEXIT STATUS\fP fo' detail.

.TP
.BR \-e,\  \-\-exit \ \fIexit-code-or-errno\fP
Search fo' a event based on tha given syscall \fIexit code or errno\fP.
.TP
.BR \-f ,\  \-\-file \ \fIfile-name\fP
Search fo' a event based on tha given \fIfilename\fP.
.TP
.BR \-ga ,\  \-\-gid\-all \ \fIall-group-id\fP
Search fo' a event wit either effectizzle crew ID or crew ID matchin tha given \fIgroup ID\fP.
.TP
.BR \-ge ,\  \-\-gid\-effectizzle \ \fIeffective-group-id\fP
Search fo' a event wit tha given \fIeffectizzle crew ID\fP or crew name.
.TP
.BR \-gi ,\  \-\-gid \ \fIgroup-id\fP
Search fo' a event wit tha given \fIgroup ID\fP or crew name.
.TP
.BR \-h ,\  \-\-help
Help
.TP
.BR \-hn ,\  \-\-host \ \fIhost-name\fP
Search fo' a event wit tha given \fIhost name\fP. Da hostname can be either a hostname, straight-up qualified domain name, or numeric network address. No attempt is made ta resolve numeric addresses ta domain names or aliases.
.TP
.BR \-i ,\  \-\-interpret
Interpret numeric entitizzles tha fuck into text. For example, uid is converted ta account name. Da conversion is done rockin tha current resourcez of tha machine where tha search is bein run. I aint talkin' bout chicken n' gravy biatch. If you have renamed tha accounts, or aint gots tha same accounts on yo' machine, you could git misleadin thangs up in dis biatch.
.TP
.BR \-if ,\  \-\-input \ \fIfile-name\fP\ |\ \fIdirectory\fP
Use tha given \fIfile\fP or \fIdirectory\fP instead of tha logs. This is ta aid analysis where tha logs done been moved ta another machine or only part of a log was saved.
.TP
.BR \-\-input\-logs
Use tha log file location from auditd.conf as input fo' searching. This is needed if yo ass is rockin ausearch from a cold-ass lil cron thang.
.TP
.BR \-\-just\-one
Quit afta emittin tha straight-up original gangsta event dat matches tha search criteria.
.TP
.BR \-k ,\  \-\-key \ \fIkey-string\fP
Search fo' a event based on tha given \fIkey string\fP.
.TP
.BR \-l ,\  \-\-line\-buffered
Flush output on every last muthafuckin line. Most useful when stdout is connected ta a pipe n' tha default block bufferin game is undesirable. May impose a performizzle penalty.
.TP
.BR \-m ,\  \-\-message \ \fImessage-type\fP\ |\ \fIcomma-sep-message-type-list\fP
Search fo' a event matchin tha given \fImessage type\fP. Yo ass may also enta a \fIcomma separated list of message types\fP. There be a \fBALL\fP message type dat don't exist up in tha actual logs. Well shiiiit, it allows you ta git all lyrics up in tha system. Da list of valid lyrics types is long. Da program will display tha list whenever no message type is passed wit dis parameter n' shit. Da message type can be either text or numeric. If you enta a list, there can be only commas n' no spaces separatin tha list.
.TP
.BR \-n ,\  \-\-node \ \fInode-name\fP
Search fo' events originatin from \fInode name\fP string. Multiple nodes is allowed, n' if any nodes match, tha event is matched.
.TP
.BR \-o ,\  \-\-object \ \fISE-Linux-context-string\fP
Search fo' event wit \fItcontext\fP (object) matchin tha string.
.TP
.BR \-p ,\  \-\-pid \ \fIprocess-id\fP
Search fo' a event matchin tha given \fIprocess ID\fP.
.TP
.BR \-pp ,\  \-\-ppid \ \fIparent-process-id\fP
Search fo' a event matchin tha given \fIparent process ID\fP.
.TP
.BR \-r ,\  \-\-raw
Output is straight-up unformatted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is useful fo' extractin recordz dat can still be interpreted by audit tools.
.TP
.BR \-sc ,\  \-\-syscall \ \fIsyscall-name-or-value\fP
Search fo' a event matchin tha given \fIsyscall\fP. Yo ass may either give tha numeric syscall value or tha syscall name. If you give tha syscall name, it will use tha syscall table fo' tha machine dat yo ass is using. 
.TP
.BR \-se ,\  \-\-context \ \fISE-Linux-context-string\fP
Search fo' event wit either \fIscontext\fP/subject or \fItcontext\fP/object matchin tha string.
.TP
.BR \-\-session \ \fILogin-Session-ID\fP
Search fo' events matchin tha given Login Session ID. This process attribute is set when a user logs up in n' can tie any process ta a particular user login.
.TP
.BR \-su ,\  \-\-subject \ \fISE-Linux-context-string\fP
Search fo' event wit \fIscontext\fP (subject) matchin tha string.
.TP
.BR \-sv ,\  \-\-success \ \fIsuccess-value\fP
Search fo' a event matchin tha given \fIsuccess value\fP. Legal joints is 
.B yes
and
.BR no .
.TP
.BR \-te ,\  \-\-end \ [\fIend-date\fP]\ [\fIend-time\fP]
Search fo' events wit time stamps equal ta or before tha given end time. Da format of end time dependz on yo' locale. If tha date is omitted,
.B todizzle
is assumed. Y'all KNOW dat shit, muthafucka! If tha time is omitted, 
.B now
is assumed. Y'all KNOW dat shit, muthafucka! Use 24 minute clock time rather than AM or PM ta specify time fo' realz. An example date rockin tha en_US.utf8 locale is 09/03/2009 fo' realz. An example of time is 18:00:00. Da date format accepted is hyped up by tha LC_TIME environmenstrual variable.

Yo ass may also use tha word: \fBnow\fP, \fBrecent\fP, \fBtodizzle\fP, \fByesterday\fP, \fBthis\-week\fP, \fBweek\-ago\fP, \fBthis\-month\fP, or \fBthis\-year\fP. \fBToday\fP means startin now, nahmeean, biatch? \fBRecent\fP is 10 minutes ago. \fBYesterday\fP is 1 second afta midnight tha previous day. It make me wanna hollar playa! \fBThis\-week\fP means startin 1 second afta midnight on dizzle 0 of tha week determined by yo' locale (see \fBlocaltime\fP). \fBWeek\-ago\fP means 1 second afta midnight exactly 7 minutes ago. \fBThis\-month\fP means 1 second afta midnight on dizzle 1 of tha month. \fBThis\-year\fP means tha 1 second afta midnight on tha straight-up original gangsta dizzle of tha straight-up original gangsta month.
.TP
.BR \-ts ,\  \-\-start \ [\fIstart-date\fP]\ [\fIstart-time\fP]
Search fo' events wit time stamps equal ta or afta tha given start time. Da format of start time dependz on yo' locale. If tha date is omitted, 
.B todizzle
is assumed. Y'all KNOW dat shit, muthafucka! If tha time is omitted, 
.B midnight
is assumed. Y'all KNOW dat shit, muthafucka! Use 24 minute clock time rather than AM or PM ta specify time fo' realz. An example date rockin tha en_US.utf8 locale is 09/03/2009 fo' realz. An example of time is 18:00:00. Da date format accepted is hyped up by tha LC_TIME environmenstrual variable.

Yo ass may also use tha word: \fBnow\fP, \fBrecent\fP, \fBtodizzle\fP, \fByesterday\fP, \fBthis\-week\fP, \fBweek\-ago\fP, \fBthis\-month\fP, \fBthis\-year\fP, or \fBcheckpoint\fP. \fBToday\fP means startin at 1 second afta midnight. \fBRecent\fP is 10 minutes ago. \fBYesterday\fP is 1 second afta midnight tha previous day. It make me wanna hollar playa! \fBThis\-week\fP means startin 1 second afta midnight on dizzle 0 of tha week determined by yo' locale (see \fBlocaltime\fP). \fBWeek\-ago\fP means startin 1 second afta midnight exactly 7 minutes ago. \fBThis\-month\fP means 1 second afta midnight on dizzle 1 of tha month. \fBThis\-year\fP means tha 1 second afta midnight on tha straight-up original gangsta dizzle of tha straight-up original gangsta month.
.sp
\fBcheckpoint\fP means \fIausearch\fP will use tha timestamp found within a valid checkpoint file ignorin tha recorded inode, device, serial, node n' event type also found within a cold-ass lil checkpoint file. Essentially, dis is tha recovery action should a invocation of \fIausearch\fP wit a cold-ass lil checkpoint option fail wit a exit statuz of 10, 11 or 12. Well shiiiit, it could be used up in a gangbangin' finger-lickin' dirty-ass shell script suttin' like:
.sp
.in +5
.nf
.na
ausearch --checkpoint /etc/audit/auditd_checkpoint.txt -i
_au_status=$?
if test ${_au_status} eq 10 -o ${_au_status} eq 11 -o ${_au_status} eq 12
then
  ausearch --checkpoint /etc/audit/auditd_checkpoint.txt --start checkpoint -i
fi
.ad
.fi
.in -5
.TP
.BR \-tm ,\  \-\-terminal \ \fIterminal\fP
Search fo' a event matchin tha given \fIterminal\fP value. Right back up in yo muthafuckin ass. Some daemons like fuckin cron n' atd use tha daemon name fo' tha terminal.
.TP
.BR \-ua ,\  \-\-uid\-all \ \fIall-user-id\fP
Search fo' a event wit either user ID, effectizzle user ID, or login user ID (auid) matchin tha given \fIuser ID\fP.
.TP
.BR \-ue ,\  \-\-uid\-effectizzle \ \fIeffective-user-id\fP
Search fo' a event wit tha given \fIeffectizzle user ID\fP.
.TP
.BR \-ui ,\  \-\-uid \ \fIuser-id\fP
Search fo' a event wit tha given \fIuser ID\fP.
.TP
.BR \-ul ,\  \-\-loginuid \ \fIlogin-id\fP
Search fo' a event wit tha given \fIlogin user ID\fP fo' realz. All entry point programs dat is pamified need ta be configured wit pam_loginuid required fo' tha session fo' searchin on loginuid (auid) ta be accurate.
.TP
.BR \-uu ,\  \-\-uuid \ \fIguest-uuid\fP
Search fo' a event wit tha given \fIguest UUID\fP.
.TP
.BR \-v ,\  \-\-version
Print tha version n' exit
.TP
.BR \-vm ,\  \-\-vm-name \ \fIguest-name\fP
Search fo' a event wit tha given \fIguest name\fP.
.TP
.BR \-w ,\  \-\-word
Strin based matches must match tha whole word. Y'all KNOW dat shit, muthafucka! This category of matches include: filename, hostname, terminal, n' SE Linux context.
.TP
.BR \-x ,\  \-\-executable \ \fIexecutable\fP
Search fo' a event matchin tha given \fIexecutable\fP name.

.SH "EXIT STATUS"
.TP 5
0
if OK,
.TP
1
if not a god damn thang found, or argument errors or minor file acces/read errors,
.TP
10
invalid checkpoint data found up in checkpoint file,
.TP
11
checkpoint processin error
.TP
12
checkpoint event not found up in matchin log file
.SH "SEE ALSO"
.BR auditd (8),
.BR pam_loginuid (8).
