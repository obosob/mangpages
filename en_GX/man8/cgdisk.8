.\" Copyright 2011-2013 Roderick W. Right back up in yo muthafuckin ass. Smizzle (rodsmith@rodsbooks.com)
.\" May be distributed under tha GNU General Public License
.TH "CGDISK" "8" "0.8.10" "Roderick W. Right back up in yo muthafuckin ass. Smizzle" "GPT fdisk Manual"
.SH "NAME"
cgdisk \- Curses-based GUID partizzle table (GPT) manipulator
.SH "SYNOPSIS"
.BI "cgdisk "
[ \-a ]
.I device

.SH "DESCRIPTION"

GPT fdisk be a text\-mode crew of programs fo' creation n' manipulation
of partizzle tables. Da \fBcgdisk\fR gangmember of dis crew employs a
curses-based user intercourse fo' interaction rockin a text\-mode menuing
system. Well shiiiit, it will automatically convert a old\-style Masta Boot Record
(MBR) partizzle table or BSD disklabel stored without a MBR carrier
partizzle ta tha newer Globally Unique Identifier (GUID) Partizzle Table
(GPT) format, or will load a GUID partizzle table. Other thugz of this
program crew is \fBgdisk\fR (da most thugged-out feature-rich program of tha group,
with a non-curses-based interactizzle user intercourse) n' \fBsgdisk\fR (which
is driven via command-line options fo' use by smart-ass muthafuckas or up in scripts).
FixParts be a related program fo' fixin a limited set of problems wit MBR
disks.

For shiznit on MBR vs. GPT, as well as GPT terminologizzle n' structure,
see tha extended GPT fdisk documentation at
\fIhttp://www.rodsbooks.com/gdisk/\fR or consult Wikipizzle.

Da \fBcgdisk\fR program employs a user intercourse similar ta dat of Linux's
\fBcfdisk\fR yo, but \fBcgdisk\fR modifies GPT partitions. Well shiiiit, it also has the
capabilitizzle of transformin MBR partitions or BSD disklabels tha fuck into GPT
partitions. Like tha original gangsta \fBcfdisk\fR program, \fBcgdisk\fR do not
modify disk structures until you explicitly write dem ta disk, so if you
make a mistake, you can exit from tha program wit tha Quit option ta leave
your partitions unmodified.

Ordinarily, \fBcgdisk\fR operates on disk thang files, such as
\fI/dev/sda\fR or \fI/dev/hda\fR under Linux, \fI/dev/disk0\fR under
Mac OS X, or \fI/dev/ad0\fR or \fI/dev/da0\fR under FreeBSD. Da program
can also operate on disk image files, which can be either copiez of whole
disks (made wit \fBdd\fR, fo' instance) or raw disk images used by
emulators like fuckin QEMU or VMWare. Note dat only \fIraw\fR disk images
are supported; \fBcgdisk\fR cannot work on compressed or other advanced
disk image formats.

Upon start, \fBcgdisk\fR attempts ta identify tha partizzle type up in use on
the disk. If it findz valid GPT data, \fBcgdisk\fR will use dat shit. If
\fBcgdisk\fR findz a valid MBR or BSD disklabel but no GPT data, it will
attempt ta convert tha MBR or disklabel tha fuck into GPT form. (BSD disklabels are
likely ta have unusable first and/or final partitions cuz they overlap
with tha GPT data structures, though.) Upon exitin wit tha 'w' option,
\fBcgdisk\fR replaces tha MBR or disklabel wit a GPT. \fIThis action is
potentially dangerous!\fR Yo crazy-ass system may become unbootable, n' partition
type codes may become corrupted if tha disk uses unrecognized type codes.
Boot problems is particularly likely if you multi\-bootin wit any
GPT\-unaware OS. If you mistakenly launch \fBcgdisk\fR on a MBR disk, you
can safely exit tha program without makin any chizzlez by rockin tha Quit
option.

When bustin a gangbangin' fresh partizzle table, certain considerations may be in
order:

.TP 
.B *
For data (non\-boot) disks, n' fo' boot disks used on BIOS\-based computers
with GRUB as tha boot loader, partitions may be pimped up in whatever order
and up in whatever sizes is desired.

.TP 
.B *
Boot disks fo' EFI\-based systems require a \fIEFI System
Partition\fR (GPT fdisk internal code 0xEF00) formatted as FAT\-32.
Da recommended size of dis partizzle is between 100 n' 300 MiB.
Boot\-related filez is stored here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. (Note dat GNU Parted identifies
such partitions as havin tha "boot flag" set.)

.TP 
.B *
Da GRUB 2 boot loader fo' BIOS\-based systems make use of a \fIBIOS Boot
Partition\fR (GPT fdisk internal code 0xEF02), up in which tha secondary
boot loader is stored, without tha benefit of a gangbangin' filesystem. This partition
can typically be like lil' small-ass (roughly 32 KiB ta 1 MiB) yo, but you should
consult yo' boot loader documentation fo' details.

.TP 
.B *
If Windows is ta boot from a GPT disk, a partizzle of type \fIMicrosoft
Reserved\fR (GPT fdisk
internal code 0x0C01) is recommended. Y'all KNOW dat shit, muthafucka! This partizzle should be bout 128 MiB
in size. Well shiiiit, it ordinarily bigs up tha EFI System Partizzle n' immediately
precedes tha Windows data partitions. (Note dat oldschool versionz of GNU Parted
create all FAT partitions as dis type, which straight-up make tha partition
unusable fo' aiiight file storage up in both Windows n' Mac OS X.)

.TP 
.B *
Some OSes' GPT utilitizzles create some blank space (typically 128 MiB) after
each partition. I aint talkin' bout chicken n' gravy biatch. Da intent is ta enable future disk utilitizzles ta use this
space. Right back up in yo muthafuckin ass. Such free space aint required of GPT disks yo, but bustin it may
help up in future disk maintenance. Yo ass can use GPT fdiskz relatizzle partition
positionin option (specifyin tha startin sector as '+128M', for
instance) ta simplify bustin such gaps.

.SH "OPTIONS"

.PP 

Only one command-line option be accepted, aside from tha thang filename:
\fI\-a\fR. This option altas tha highlightin of partitions n' blocks of
free space: Instead of rockin ncurses, when \fI\-a\fR is used \fBcgdisk\fR
uses a ">" symbol ta tha left of tha selected partizzle or free space.
This option is intended fo' use on limited display devices such as
teletypes n' screen readers.

Interactions wit \fBcgdisk\fR occur wit its interactizzle text\-mode menus.
Da display is fucked up tha fuck into two interactizzle parts:

.TP
.B *
Da partizzle display area, up in which partitions n' gaps between them
(marked as "free space") is summarized.

.TP
.B *
Da option selection area, up in which buttons fo' tha main options appear.

.PP

In addition, tha top of tha display shows tha programz name n' version
number, tha thang filename associated wit tha disk, n' tha diskz size
in both sectors n' IEEE-1541 units (GiB, TiB, n' so on).

Yo ass can use tha followin keys ta move among tha various options n' to
select among them:

.TP
.B up arrow
This key moves tha partizzle selection up by one partition.

.TP
.B down arrow
This key moves tha partizzle selection down by one partition.

.TP
.B Page Up
This key moves tha partizzle selection up by one screen.

.TP
.B Page Down
This key moves tha partizzle selection down by one screen.

.TP
.B right arrow
This key moves tha option selection ta tha right by one item.

.TP
.B left arrow
This key moves tha option selection ta tha left by one item.

.TP
.B Enter
This key activates tha currently selected option. I aint talkin' bout chicken n' gravy biatch. Yo ass can also activate an
option by typin tha capitalized letta up in tha optionz name on the
keyboard, like fuckin \fBa\fR ta activate tha Align option.

.PP

If mo' partitions exist than can be displayed up in one screen, you can
scroll between screens rockin tha partizzle selection keys, much as up in a
text editor.

Available options is as busted lyrics bout below. (Note dat \fBcgdisk\fR provides
a much mo' limited set of options than its siblin \fBgdisk\fR. If you
need ta big-ass up partizzle table recovery, hybrid MBR modifcation, or other
advanced operations, you should consult tha \fBgdisk\fR documentation.)

.TP 
.B Align
Change tha sector alignment value. Disks wit mo' logical sectors than
physical sectors (like fuckin modern Advanced Format drives), some RAID
configurations, n' nuff SSD devices, can suffer performizzle problems if
partitions is not aligned properly fo' they internal data structures. On
new disks, GPT fdisk attempts ta align partitions on 2048\-sector (1MiB)
boundaries by default, which optimizes performizzle fo' all of these disk
types. On pre\-partitioned disks, GPT fdisk attempts ta identify the
alignment value used on dat disk yo, but will set 8-sector alignment on disks
larger than 300 GB even if lesser alignment joints is detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In either
case, it can be chizzled by rockin dis option.

.TP 
.B Backup
Save partizzle data ta a funky-ass backup file. Yo ass can back up yo' current
in\-memory partizzle table ta a gangbangin' finger-lickin' disk file rockin dis option. I aint talkin' bout chicken n' gravy biatch. Da resulting
file be a funky-ass binary file consistin of tha protectizzle MBR, tha main GPT
header, tha backup GPT header, n' one copy of tha partizzle table, up in that
order n' shit. Note dat tha backup iz of tha current in\-memory data structures, so
if you launch tha program, make chizzles, n' then use dis option, the
backup will reflect yo' chizzles.

.TP 
.B Delete
Delete a partition. I aint talkin' bout chicken n' gravy biatch. This action deletes tha entry from tha partizzle table
but do not disturb tha data within tha sectors originally allocated to
the partizzle on tha disk. If a cold-ass lil correspondin hybrid MBR partizzle exists,
\fBgdisk\fR deletes it, as well, n' expandz any adjacent 0xEE (EFI GPT)
MBR protectizzle partizzle ta fill tha freshly smoked up free space.

.TP 
.B Help
Print brief descriptionz of all tha options.

.TP 
.B Info
Show detailed partizzle shiznit. I aint talkin' bout chicken n' gravy biatch. Da summary shiznit shown up in the
partizzle display area necessarily omits nuff details, like fuckin the
partitions' unique GUIDs n' tha partitions' sector-exact start n' end
points, n' you can put dat on yo' toast. Da Info option displays dis shiznit fo' a single partition.

.TP 
.B Load
Load partizzle data from a funky-ass backup file. This option is tha reverse of the
Backup option. I aint talkin' bout chicken n' gravy biatch. Note dat restorin partizzle data from anythang but the
original gangsta disk aint recommended.

.TP 
.B naMe
Change tha GPT name of a partition. I aint talkin' bout chicken n' gravy biatch. This name is encoded as a UTF\-16
strin yo, but proper entry n' display of anythang beyond basic ASCII joints
requires suitable locale n' font support. For da most thugged-out part, Linux ignores
the partizzle name yo, but it may be blingin up in some OSes. GPT fdisk sets a
default name based on tha partizzle type code. Note dat tha GPT partition
name is different from tha filesystem name, which is encoded up in the
filesystemz data structures. Note also dat ta activate dis item by
typin its alphabetic equivalent, you must use \fBM\fR, not tha more
obvious \fBN\fR, cuz tha latta is used by tha next option....

.TP 
.B New
Smoke a freshly smoked up partition. I aint talkin' bout chicken n' gravy biatch. Yo ass enta a startin sector, a size, a type code,
and a name. Da start sector can be specified up in absolute terms as a sector
number or as a posizzle measured up in kibibytes (K), mebibytes (M), gibibytes
(G), tebibytes (T), or pebibytes (P); fo' instance, \fI\fB40M\fR\fR
specifies a posizzle 40MiB from tha start of tha disk. Yo ass can specify
locations relatizzle ta tha start or end of tha specified default range by
precedin tha number by a '+' symbol, as up in \fI\fB+2G\fR\fR ta specify a
point 2GiB afta tha default start sector. Shiiit, dis aint no joke. Da size value can use tha K, M,
G, T, n' P suffixes, like a muthafucka. Pressin tha Enta key wit no input specifies
the default value, which is tha start of tha phattest available block for
the start sector n' tha full available size fo' tha size.

.TP 
.B Quit
Quit from tha program \fIwithout savin yo' chizzles\fR.
Use dis option if you just wanted ta view shiznit or if you make a
mistake n' wanna back outta all yo' chizzles.

.TP 
.B Type
Change a single partitionz type code. Yo ass enta tha type code rockin a
two\-byte hexadecimal number n' shit. Yo ass may also enta a GUID directly, if you
have one n' \fBcgdisk\fR don't give a fuck dat shit. If you don't give a fuck tha type code
for yo' partition, you can type \fBL\fR ta peep a list of known type codes.

.TP 
.B Verify
Verify disk. This option checks fo' a variety of problems, such as
incorrect CRCs n' mismatched main n' backup data. This option do not
automatically erect most problems, though; fo' that, you must use
\fBgdisk\fR. If no problems is found, dis command displays a summary of
unallocated disk space.

.TP 
.B Write
Write data. Use dis command ta save yo' chizzles.

.SH "BUGS"

Az of March 2014 (version 0.8.10), \fBcgdisk\fR should be considered
beta software fo' realz. Although tha underlyin partizzle manipulation code is much
older, tha \fBcgdisk\fR ncurses user intercourse is brand freshly smoked up wit GPT fdisk
version 0.8.0. Known bugs n' limitations include:

.TP 
.B *
Da program compilez erectly only on Linux, FreeBSD, n' Mac OS X. In
theory, it should compile under Windows if tha Ncurses library fo' Windows
is installed yo, but I aint tested dis capability. Linux versions for
x86\-64 (64\-bit), x86 (32\-bit), n' PowerPC (32\-bit) done been tested,
with tha x86\-64 version havin peeped da most thugged-out testing. Under FreeBSD,
32\-bit (x86) n' 64\-bit (x86\-64) versions done been tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Only 32\-bit
versions fo' Mac OS X has been tested by tha lyricist.

.TP 
.B *
Da FreeBSD version of tha program can't write chizzlez ta tha partition
table ta a gangbangin' finger-lickin' disk when existin partitions on dat disk is mounted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (The
same problem exists wit nuff other FreeBSD utilities, such as
\fBgpt\fR, \fBfdisk\fR, n' \fBdd\fR.) This limitation can be overcome
by typin \fBsysctl kern.geom.debugflags=16\fR at a gangbangin' finger-lickin' dirty-ass shell prompt.

.TP
.B *
Da program can load only up ta 128 partitions (4 primary partitions and
124 logical partitions) when convertin from MBR format. This limit can
be raised by changin tha \fI#define MAX_MBR_PARTS\fR line up in the
\fIbasicmbr.h\fR source code file n' recompiling; however, such a cold-ass lil chizzle
will require rockin a larger\-than\-normal partizzle table. (Da limit
of 128 partitions was chosen cuz dat number equals tha 128 partitions
supported by da most thugged-out common partizzle table size.)

.TP 
.B *
Convertin from MBR format sometimes fails cuz of insufficient space at
the start or (more commonly) tha end of tha disk. Resizin tha partition
table (usin tha 's' option up in tha smart-ass muthafuckas' menu up in \fBgdisk\fR) can
sometimes overcome dis problem; however, up in off tha hook cases it may be
necessary ta resize a partizzle rockin GNU Parted or a similar tool prior to
conversion wit GPT fdisk.

.TP 
.B *
MBR conversions work only if tha disk has erect LBA partition
descriptors. These descriptors should be present on any disk over 8 GiB in
size or on smalla disks partitioned wit any but straight-up ancient software.

.TP 
.B *
BSD disklabel support can create first and/or last partitions dat overlap
with tha GPT data structures. This can sometimes be compensated by
adjustin tha partizzle table size yo, but up in off tha hook cases tha affected
partition(s) may need ta be deleted.

.TP 
.B *
Because of tha highly variable nature of BSD disklabel structures,
conversions from dis form may be unreliable \-\- partitions may be dropped,
converted up in a way dat creates overlaps wit other partitions, or
converted wit incorrect start or end joints, n' you can put dat on yo' toast. Use dis feature with
caution!

.TP 
.B *
Bootin afta convertin a MBR or BSD disklabel disk is likely ta be
disrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. Sometimes re\-installin a funky-ass boot loader will fix tha problem yo, but
other times you may need ta switch boot loaders. Except on EFI\-based
platforms, Windows all up in at least Windows 7 don't support bootin from
GPT disks. Creatin a hybrid MBR (usin tha 'h' option on tha recovery &
transformation menu up in \fBgdisk\fR) or abandonin GPT up in favor of MBR may
be yo' only options up in dis case.

.TP
.B *
Da \fBcgdisk\fR Verify function n' tha partizzle type listin obtainable
by typin \fIL\fR up in tha Type function (or when specifyin a partizzle type
while bustin a freshly smoked up partition) both currently exit ncurses mode. This
limitation be a minor cosmetic blemish dat do not affect functionality.

.SH "AUTHORS"
Primary author: Roderick W. Right back up in yo muthafuckin ass. Smizzle (rodsmith@rodsbooks.com)

Contributors:

* Yves Blusseau (1otnwmz02@sneakemail.com)

* Dizzy Hubbard (david.c.hubbard@gmail.com)

* Quentin Maggard (justin.maggard@netgear.com)

* Dwight Schauer (dschauer@ti.com)

* Florian Zumbiehl (florz@florz.de)


.SH "SEE ALSO"
\fBcfdisk (8)\fR,
\fBfdisk (8)\fR,
\fBgdisk (8)\fR,
\fBmkfs (8)\fR,
\fBparted (8)\fR,
\fBsfdisk (8)\fR
\fBsgdisk (8)\fR
\fBfixparts (8)\fR

\fIhttp://en.wikipedia.org/wiki/GUID_Partition_Table\fR

\fIhttp://developer.apple.com/technotes/tn2006/tn2166.html\fR

\fIhttp://www.rodsbooks.com/gdisk/\fR

.SH "AVAILABILITY"
Da \fBcgdisk\fR command is part of tha \fIGPT fdisk\fR package n' is
available from Rod Smizzle.
