.\"  OpenVPN -- An application ta securely tunnel IP networks
.\"             over a single TCP/UDP port, wit support fo' SSL/TLS-based
.\"             session authentication n' key exchange,
.\"             packet encryption, packet authentication, and
.\"             packet compression.
.\"
.\"  Copyright (C) 2002-2010 OpenVPN Technologies, Inc. <sales@openvpn.net>
.\"
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under tha termz of tha GNU General Public License version 2
.\"  as published by tha Jacked Software Foundation.
.\"
.\"  This program is distributed up in tha hope dat it is ghon be useful,
.\"  but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License fo' mo' details.
.\"
.\"  Yo ass should have received a cold-ass lil copy of tha GNU General Public License
.\"  along wit dis program (see tha file COPYING included wit this
.\"  distribution); if not, write ta tha Jacked Software Foundation, Inc.,
.\"  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
.\"
.\" Manual page fo' openvpn
.\
.\" SH section heading
.\" SS subsection heading
.\" LP paragraph
.\" IP indented paragraph
.\" TP hangin label
.\
.\" .nf -- no formatting
.\" .fi -- resume formatting
.\" .ft 3 -- boldface
.\" .ft -- aiiight face
.\" .in +|-{n} -- indent
.\"
.TH openvpn 8 "17 November 2008"
.\"*********************************************************
.SH NAME
openvpn \- secure IP tunnel daemon.
.\"*********************************************************
.SH SYNOPSIS
.ft 3
openvpn [ options ... ]
.ft
.\"*********************************************************
.SH INTRODUCTION
.LP
OpenVPN be a open source VPN daemon by Jizzy Yonan.
Because OpenVPN tries to
be a universal VPN tool offerin a pimped out deal of flexibility,
there is a shitload of options on dis manual page.
If you freshly smoked up ta OpenVPN, you might wanna skip ahead ta the
examplez section where yo big-ass booty is ghon peep how tha fuck ta construct simple
VPNs on tha command line without even needin a cold-ass lil configuration file.

Also note dat there be a mo' documentation n' examplez on
the OpenVPN wizzy crib:
.I http://openvpn.net/

And if you wanna peep a gangbangin' finger-lickin' dirty-ass shorta version of dis manual,
see tha openvpn usage message which can be obtained by
running
.B openvpn
without any parameters.
.\"*********************************************************
.SH DESCRIPTION
.LP
OpenVPN be a robust n' highly flexible VPN daemon.
OpenVPN supports SSL/TLS security, ethernet bridging,
TCP or UDP tunnel transhiznit all up in proxies or NAT,
support fo' dynamic IP addresses n' DHCP,
scalabilitizzle ta hundredz or thousandz of users,
and portabilitizzle ta most major OS platforms.

OpenVPN is tightly bound ta tha OpenSSL library, n' derives much
of its crypto capabilitizzles from dat shit.

OpenVPN supports
conventionizzle encryption
usin a pre-shared secret key
.B (Static Key mode)
or
hood key security
.B (SSL/TLS mode)
usin client & server certificates.
OpenVPN also
supports non-encrypted TCP/UDP tunnels.  

OpenVPN is designed ta work wit the
.B TUN/TAP
virtual networkin intercourse dat exists on most platforms.

Overall, OpenVPN aims ta offer nuff of tha key featurez of IPSec but
with a relatively lightweight footprint.
.\"*********************************************************
.SH OPTIONS
OpenVPN allows any option ta be placed either on tha command line
or up in a cold-ass lil configuration file.  Though all command line options is preceded
by a thugged-out double-leading-dash ("\-\-"), dis prefix can be removed when
an option is placed up in a cold-ass lil configuration file.
.\"*********************************************************
.TP
.B \-\-help
Show options.
.\"*********************************************************
.TP
.B \-\-config file
Load additionizzle config options from
.B file
where each line correspondz ta one command line option,
but wit tha leadin '\-\-' removed.

If
.B \-\-config file
is tha only option ta tha openvpn command,
the
.B \-\-config
can be removed, n' tha command can be given as
.B openvpn file

Note that
configuration filez can be nested ta a reasonable depth.

Double quotation or single quotation charactas ("", '')
can be used ta enclose single parametas containin whitespace,
and "#" or ";" charactas up in tha straight-up original gangsta column
can be used ta denote comments.

Note dat OpenVPN 2.0 n' higher performs backslash-based shell
escapin fo' charactas not up in single quotations,
so tha followin mappings should be observed:

.nf
.ft 3
.in +4
\\\\       Maps ta a single backslash characta (\\).
\\"       Pass a literal doublequote characta ("), don't
         interpret it as enclosin a parameter.
\\[SPACE] Pass a literal space or tab character, don't
         interpret it as a parameta delimiter.
.in -4
.ft
.fi

For example on Windows, use double backslashes to
represent pathnames:

.nf
.ft 3
.in +4
secret "c:\\\\OpenVPN\\\\secret.key"
.in -4
.ft
.fi

For examplez of configuration files,
see
.I http://openvpn.net/examples.html

Here be a example configuration file:

.nf
.ft 3
.in +4
#
# Sample OpenVPN configuration file for
# rockin a pre-shared static key.
#
# '#' or ';' may be used ta delimit comments.

# Use a thugged-out dynamic tun device.
dev tun

# Our remote peer
remote mypeer.mydomain

# 10.1.0.1 is our local VPN endpoint
# 10.1.0.2 is our remote VPN endpoint
ifconfig 10.1.0.1 10.1.0.2

# Our pre-shared static key
secret static.key
.in -4
.ft
.fi
.\"*********************************************************
.SS Tunnel Options:
.TP
.B \-\-mode m
Set OpenVPN major mode.  By default, OpenVPN runs in
point-to-point mode ("p2p").  OpenVPN 2.0 introduces
a freshly smoked up mode ("server") which implements a multi-client
server capability.
.\"*********************************************************
.TP
.B \-\-local host
Local host name or IP address fo' bind.
If specified, OpenVPN will bind ta dis address only.
If unspecified, OpenVPN will bind ta all intercourses.
.\"*********************************************************
.TP
.B \-\-remote host [port] [proto]
Remote host name or IP address.  On tha client, multiple
.B \-\-remote
options may be specified fo' redundancy, each referring
to a gangbangin' finger-lickin' different OpenVPN server n' shit.  Specifyin multiple
.B \-\-remote
options fo' dis purpose be a special case of tha more
general connection-profile feature.  See the
.B <connection>
documentation below.

Da OpenVPN client will try ta connect ta a server at
.B host:port
in tha order specified by tha list of
.B \-\-remote
options.

.B proto
indicates tha protocol ta use when connectin wit the
remote, n' may be "tcp" or "udp".

Da client will move on ta tha next host up in tha list,
in tha event of connection failure.
Note dat at any given time, tha OpenVPN client
will at most be connected to
one server.

Note dat since UDP is connectionless, connection failure
is defined by the
.B \-\-ping
and
.B \-\-ping-restart
options.

Note tha followin corner case:  If you use multiple
.B \-\-remote
options, AND yo ass is droppin root privileges on
the client with
.B \-\-user
and/or
.B \-\-group,
AND tha client is hustlin a non-Windows OS, if tha client needs
to switch ta a gangbangin' finger-lickin' different server, n' dat server pushes
back different TUN/TAP or route settings, tha client may lack
the necessary privileges ta close n' reopen tha TUN/TAP intercourse.
This could cause tha client ta exit wit a gangbangin' fatal error.

If
.B \-\-remote
is unspecified, OpenVPN will listen
for packets from any IP address yo, but aint gonna act on dem packets unless
they pass all authentication tests, n' you can put dat on yo' toast.  This requirement fo' authentication
is bindin on all potential peers, even dem from known n' supposedly
trusted IP addresses (it is straight-up easy as fuck  ta forge a source IP address on
a UDP packet).

When used up in TCP mode, 
.B \-\-remote
will act as a gangbangin' filter, rejectin connections from any host which do
not match
.B host.

If
.B host
is a DNS name which resolves ta multiple IP addresses,
one is ghon be randomly
chosen, providin a sort of basic load-balancin and
failover capability.
.\"*********************************************************
.TP
.B \-\-remote-random-hostname
Prepend a random strang (6 bytes, 12 hex characters) ta hostname ta prevent
DNS caching.  For example, "foo.bar.gov" would be modified to
"<random-chars>.foo.bar.gov".
.\"*********************************************************
.TP
.B <connection>
Define a cold-ass lil client connection
profile.  Client connection profilez is crewz of OpenVPN options that
describe how tha fuck ta connect ta a given OpenVPN server n' shit.  Client connection
profilez is specified within a OpenVPN configuration file, and
each flava is bracketed by
.B <connection>
and
.B </connection>.

An OpenVPN client will try each connection flava sequentially
until it achieves a successful connection. I aint talkin' bout chicken n' gravy biatch.  

.B \-\-remote-random
can be used ta initially "scramble" tha connection
list.

Here be a example of connection flava usage:

.nf
.ft 3
.in +4
client
dev tun

<connection>
remote 198.19.34.56 1194 udp
</connection>

<connection>
remote 198.19.34.56 443 tcp
</connection>

<connection>
remote 198.19.34.56 443 tcp
http-proxy 192.168.0.8 8080
http-proxy-retry
</connection>

<connection>
remote 198.19.36.99 443 tcp
http-proxy 192.168.0.8 8080
http-proxy-retry
</connection>

persist-key
persist-tun
pkcs12 client.p12
ns-cert-type server
verb 3
.in -4
.ft
.fi

First we try ta connect ta a server at 198.19.34.56:1194 rockin UDP.
If dat fails, we then try ta connect ta 198.19.34.56:443 rockin TCP.
If dat also fails, then try connectin all up in a HTTP proxy at 
192.168.0.8:8080 ta 198.19.34.56:443 rockin TCP.  Finally, try to
connect all up in tha same proxy ta a server at 198.19.36.99:443
usin TCP.

Da followin OpenVPN options may be used inside of
a
.B <connection>
block:

.B bind,
.B connect-retry,
.B connect-retry-max,
.B connect-timeout,
.B explicit-exit-notify,
.B float,
.B fragment,
.B http-proxy,
.B http-proxy-option,
.B http-proxy-retry,
.B http-proxy-timeout,
.B link-mtu,
.B local,
.B lport,
.B mssfix,
.B mtu-disc,
.B nobind,
.B port,
.B proto,
.B remote,
.B rport,
.B socks-proxy,
.B socks-proxy-retry,
.B tun-mtu and
.B tun-mtu-extra.

A defaultin mechanizzle exists fo' specifyin options ta apply to
all
.B <connection>
profiles.  If any of tha above options (with tha exception of
.B remote
) step tha fuck up outside of a
.B <connection>
block yo, but up in a cold-ass lil configuration file which has one or more
.B <connection>
blocks, tha option settin is ghon be used as a thugged-out default for
.B <connection>
blocks which follow it up in tha configuration file.

For example, suppose the
.B nobind
option was placed up in tha sample configuration file above, near
the top of tha file, before tha first
.B <connection>
block.  Da effect would be as if
.B nobind
were declared up in all
.B <connection>
blocks below dat shit.
.\"*********************************************************
.TP
.B \-\-proto-force p
When iteratin all up in connection profiles,
only consider profilez rockin protocol
.B p
('tcp'|'udp'). 
.\"*********************************************************
.TP
.B \-\-remote-random
When multiple
.B \-\-remote
address/ports is specified, or if connection profilez is being
used, initially randomize tha order of tha list
as a kind of basic load-balancin measure.
.\"*********************************************************
.TP
.B \-\-proto p
Use protocol
.B p
for communicatin wit remote host.
.B p
can be
.B udp,
.B tcp-client,
or
.B tcp-server.

Da default protocol is
.B udp
when
.B \-\-proto
is not specified.

For UDP operation,
.B \-\-proto udp
should be specified on both peers.

For TCP operation, one peer must use
.B \-\-proto tcp-server
and tha other must use
.B \-\-proto tcp-client.
A peer started with
.B tcp-server
will wait indefinitely fo' a incomin connection. I aint talkin' bout chicken n' gravy biatch.  A peer
started with
.B tcp-client
will attempt ta connect, n' if dat fails, will chill fo' 5
secondz (adjustable via the
.B \-\-connect-retry
option) n' try again n' again n' again infinite or up ta N retries (adjustable via the
.B \-\-connect-retry-max
option).  Both TCP client n' server will simulate
a SIGUSR1 restart signal if either side resets tha connection.

OpenVPN is designed ta operate optimally over UDP yo, but TCP capabilitizzle is provided
for thangs where UDP cannot be used.
In comparison wit UDP, TCP will probably be
somewhat less efficient n' less robust when used over unreliable or congested
networks.

This article outlines a shitload of problems wit tunnelin IP over TCP:

.I http://sites.inka.de/sites/bigred/devel/tcp-tcp.html

There is certain cases, however, where rockin TCP may be advantageous from
a securitizzle n' robustnizz perspective, like fuckin tunnelin non-IP or
application-level UDP protocols, or tunnelin protocols which don't
possess a funky-ass built-in reliabilitizzle layer.
.\"*********************************************************
.TP
.B \-\-connect-retry n
For
.B \-\-proto tcp-client,
take
.B n
as the
number of secondz ta wait
between connection retries (default=5).
.\"*********************************************************
.TP
.B \-\-connect-timeout n
For
.B \-\-proto tcp-client,
set connection timeout to
.B n
secondz (default=10).
.\"*********************************************************
.TP
.B \-\-connect-retry-max n
For
.B \-\-proto tcp-client,
take
.B n
as the
number of retriez of connection attempt (default=infinite).
.\"*********************************************************
.TP
.B \-\-show-proxy-settings
Show sensed HTTP or SOCKS proxy settings. Currently, only Windows clients
support dis option.
.\"*********************************************************
.TP
.B \-\-http-proxy server port [authfile|'auto'|'auto-nct'] [auth-method]
Connect ta remote host all up in a HTTP proxy at address
.B server
and port
.B port.
If HTTP Proxy-Authenticate is required,
.B authfile
is a gangbangin' file containin a username n' password on 2 lines, or
"stdin" ta prompt from console.

.B auth-method
should be one of "none", "basic", or "ntlm".

HTTP Digest authentication is supported as well yo, but only via
the
.B auto
or
.B auto-nct
flags (below).

The
.B auto
flag causes OpenVPN ta automatically determine the
.B auth-method
and query stdin or tha pimpment intercourse for
username/password credentials, if required. Y'all KNOW dat shit, muthafucka!  This flag
exists on OpenVPN 2.1 or higher.

The
.B auto-nct
flag (no clear-text auth) instructs OpenVPN ta automatically
determine tha authentication method yo, but ta reject weak
authentication protocols like fuckin HTTP Basic Authentication.
.\"*********************************************************
.TP
.B \-\-http-proxy-retry
Retry indefinitely on HTTP proxy errors.  If a HTTP proxy error
occurs, simulate a SIGUSR1 reset.
.\"*********************************************************
.TP
.B \-\-http-proxy-timeout n
Set proxy timeout to
.B n
seconds, default=5.
.\"*********************************************************
.TP
.B \-\-http-proxy-option type [parm]
Set extended HTTP proxy options.
Repeat ta set multiple options.

.B VERSION version \-\-
Set HTTP version number to
.B version
(default=1.0).

.B AGENT user-agent \-\-
Set HTTP "User-Agent" strang to
.B user-agent.
.\"*********************************************************
.TP
.B \-\-socks-proxy server [port] [authfile]
Connect ta remote host all up in a Socks5 proxy at address
.B server
and port
.B port
(default=1080).
.B authfile
(optional) be a gangbangin' file containin a username n' password on 2 lines, or
"stdin" ta prompt from console.
.\"*********************************************************
.TP
.B \-\-socks-proxy-retry
Retry indefinitely on Socks proxy errors.  If a Socks proxy error
occurs, simulate a SIGUSR1 reset.
.\"*********************************************************
.TP
.B \-\-resolv-retry n
If hostname resolve fails for
.B \-\-remote,
retry resolve for
.B n
secondz before failing.

Set
.B n
to "infinite" ta retry indefinitely.

By default,
.B \-\-resolv-retry infinite
is enabled. Y'all KNOW dat shit, muthafucka!  Yo ass can disable by settin n=0.
.\"*********************************************************
.TP
.B \-\-float
Allow remote peer ta chizzle its IP address and/or port number, like fuckin due to
DHCP (this is tha default if
.B \-\-remote
is not used).
.B \-\-float
when specified with
.B \-\-remote
allows a OpenVPN session ta initially connect ta a peer
at a known address, however if packets arrive from a new
address n' pass all authentication tests, tha freshly smoked up address
will take control of tha session. I aint talkin' bout chicken n' gravy biatch.  This is useful when
yo ass is connectin ta a peer which holdz a thugged-out dynamic address
like fuckin a gangbangin' finger-lickin' dial-in user or DHCP client.

Essentially,
.B \-\-float
 drops some lyrics ta OpenVPN ta accept authenticated packets
from any address, not only tha address which was specified up in the
.B \-\-remote
option.
.\"*********************************************************
.TP
.B \-\-ipchange cmd
Run command
.B cmd
when our remote ip-address is initially authenticated or
changes.

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

When
.B cmd
is executed two arguments is appended afta any arguments specified in
.B cmd
, as bigs up:

.B cmd ip_address port_number

Don't use
.B \-\-ipchange
in
.B \-\-mode server
mode.  Use a
.B \-\-client-connect
script instead.

See tha "Environmenstrual Variables" section below for
additionizzle parametas passed as environmenstrual variables.

If yo ass is hustlin up in a thugged-out dynamic IP address environment where
the IP addressez of either peer could chizzle without notice,
you can use dis script, fo' example, ta edit the
.I /etc/hosts
file wit tha current address of tha peer n' shit.  Da script will
be run every last muthafuckin time tha remote peer chizzlez its IP address.

Similarly if
.I our
IP address chizzlez cuz of DHCP, we should configure
our IP address chizzle script (see playa page for
.BR dhcpcd (8)
) ta serve up a
.B SIGHUP
or
.B SIGUSR1
signal ta OpenVPN.  OpenVPN will then
reestablish a cold-ass lil connection wit its most recently authenticated
peer on its freshly smoked up IP address.
.\"*********************************************************
.TP
.B \-\-port port
TCP/UDP port number fo' both local n' remote.  Da current
default of 1194 represents tha straight-up legit IANA port number
assignment fo' OpenVPN n' has been used since version 2.0-beta17.
Previous versions used port 5000 as tha default.
.\"*********************************************************
.TP
.B \-\-lport port
TCP/UDP port number fo' bind.
.\"*********************************************************
.TP
.B \-\-rport port
TCP/UDP port number fo' remote.
.\"*********************************************************
.TP
.B \-\-bind
Bind ta local address n' port. This is tha default unless any of 
.B \-\-proto tcp-client
,
.B \-\-http-proxy
or
.B \-\-socks-proxy
are used.
.\"*********************************************************
.TP
.B \-\-nobind
Do not bind ta local address n' port.  Da IP stack will allocate
a dynamic port fo' returnin packets, n' you can put dat on yo' toast.  Since tha value of tha dynamic port
could not be known up in advizzle by a peer, dis option is only suitable for
peers which is ghon be initiatin connections by rockin the
.B \-\-remote
option.
.\"*********************************************************
.TP
.B \-\-dev tunX | tapX | null
TUN/TAP virtual network thang (
.B X
can be omitted fo' a thugged-out dynamic device.)

See examplez section below
for a example on settin up a TUN device.

Yo ass must use either tun devices on both endz of tha connection
or tap devices on both ends.  Yo ass cannot mix them, as they
represent different underlyin network layers.

.B tun
devices encapsulate IPv4 or IPv6 (OSI Layer 3) while
.B tap
devices encapsulate Ethernet 802.3 (OSI Layer 2).
.\"*********************************************************
.TP
.B \-\-dev-type device-type
Which thang type is we using?
.B device-type
should be
.B tun
(OSI Layer 3)
or
.B tap
(OSI Layer 2).
Use dis option only if tha TUN/TAP thang used with
.B \-\-dev
does not begin with
.B tun
or
.B tap.
.\"*********************************************************
.TP
.B \-\-topologizzle mode
Configure virtual addressin topologizzle when hustlin in
.B \-\-dev tun
mode.  This directizzle has no meanin in
.B \-\-dev tap
mode, which always uses a
.B subnet
topology.

If you set dis directizzle on tha server, the
.B \-\-server
and
.B \-\-server-bridge
directives will automatically push yo' chosen topologizzle settin ta clients
as well.  This directizzle can also be manually pushed ta clients, n' you can put dat on yo' toast.  Like the
.B \-\-dev
directive, dis directizzle must always be compatible between client n' server.

.B mode
can be one of:

.B net30 \-\-
Use a point-to-point topology, by allocatin one /30 subnet per client.
This is designed ta allow point-to-point semantics when some
or all of tha connectin clients might be Windows systems.  This is the
default on OpenVPN 2.0.

.B p2p \-\-
Use a point-to-point topologizzle where tha remote endpoint of tha client's
tun intercourse always points ta tha local endpoint of tha serverz tun intercourse.
This mode allocates a single IP address per connectin client.
Only use
when none of tha connectin clients is Windows systems.  This mode
is functionally equivalent ta the
.B \-\-ifconfig-pool-linear
directizzle which be available up in OpenVPN 2.0 n' is now deprecated.

.B subnet \-\-
Use a subnet rather than a point-to-point topologizzle by
configurin tha tun intercourse wit a local IP address n' subnet mask,
similar ta tha topologizzle used in
.B \-\-dev tap
and ethernet bridgin mode.
This mode allocates a single IP address per connectin client n' works on
Windows as well.  Only available when server n' clients is OpenVPN 2.1 or
higher, or OpenVPN 2.0.x which has been manually patched wit the
.B \-\-topology
directizzle code.  When used on Windows, requires version 8.2 or higher
of tha TAP-Win32 driver n' shit.  When used on *nix, requires dat tha tun
driver supports an
.BR ifconfig (8)
command which sets a subnet instead of a remote endpoint IP address.

This option exists up in OpenVPN 2.1 or higher.
.\"*********************************************************
.TP
.B \-\-tun-ipv6
Build a tun link capable of forwardin IPv6 traffic.
Should be used up in conjunction with
.B \-\-dev tun
or
.B \-\-dev tunX.
A warnin is ghon be displayed
if no specific IPv6 TUN support fo' yo' OS has been compiled tha fuck into OpenVPN.

See below fo' further IPv6-related configuration options.
.\"*********************************************************
.TP
.B \-\-dev-node node
Explicitly set tha thang node rather than using
/dev/net/tun, /dev/tun, /dev/tap, etc.  If OpenVPN
cannot figure up whether
.B node
is a TUN or TAP thang based on tha name, you should
also specify
.B \-\-dev-type tun
or
.B \-\-dev-type tap.

Under Mac OS X dis option can be used ta specify tha default tun
implementation. I aint talkin' bout chicken n' gravy biatch. Using
.B \-\-dev\-node utun
forces usage of tha natizzle Darwin tun kernel support. Use
.B \-\-dev\-node utunN
to select a specific utun instance. To force rockin tha tun.kext (/dev/tunX) use
.B \-\-dev\-node tun\fR.
When not specifyin a
.B \-\-dev\-node
option openvpn will first try ta open utun, n' fall back ta tun.kext.

On Windows systems, select tha TAP-Win32 adapta which
is named
.B node
in tha Network Connections Control Panel or the
raw GUID of tha adapta enclosed by braces.
The
.B \-\-show-adapters
option under Windows can also be used
to enumerate all available TAP-Win32
adaptas n' will show both tha network
connections control panel name n' tha GUID for
each TAP-Win32 adapter.
.TP
.B \-\-lladdr address
Specify tha link layer address, mo' commonly known as tha MAC address.
Only applied ta TAP devices.
.\"*********************************************************
.TP
.B \-\-iproute cmd
Set alternate command ta execute instead of default iproute2 command.
May be used up in order ta execute OpenVPN up in unprivileged environment.
.\"*********************************************************
.TP
.B \-\-ifconfig l rn
Set TUN/TAP adapta parameters. 
.B l
is tha IP address of tha local VPN endpoint.
For TUN devices,
.B rn
is tha IP address of tha remote VPN endpoint.
For TAP devices,
.B rn
is tha subnet mask of tha virtual ethernet segment
which is bein pimped or connected to.

For TUN devices, which facilitate virtual
point-to-point IP connections,
the proper usage of
.B \-\-ifconfig
is ta use two private IP addresses
which is not a gangmember of any
existin subnet which is up in use.
Da IP addresses may be consecutive
and should have they order reversed
on tha remote peer n' shit.  Afta tha VPN
is established, by pinging
.B rn,
you is ghon be pingin across tha VPN.

For TAP devices, which provide
the mobilitizzle ta create virtual
ethernet segments,
.B \-\-ifconfig
is used ta set a IP address and
subnet mask just as a physical
ethernet adapta would be
similarly configured. Y'all KNOW dat shit, muthafucka!  If yo ass is
attemptin ta connect ta a remote
ethernet bridge, tha IP address
and subnet should be set ta joints
which would be valid on the
the bridged ethernet segment (note
also dat DHCP can be used fo' the
same purpose).

This option, while primarily a proxy fo' the
.BR ifconfig (8)
command, is designed ta simplify TUN/TAP
tunnel configuration by providin a
standard intercourse ta tha different
ifconfig implementations on different
platforms.

.B \-\-ifconfig
parametas which is IP addresses can
also be specified as a DNS or /etc/hosts
file resolvable name.

For TAP devices,
.B \-\-ifconfig
should not be used if tha TAP intercourse will be
gettin a IP address lease from a DHCP
server.
.\"*********************************************************
.TP
.B \-\-ifconfig-noexec
Don't straight-up execute ifconfig/netsh commands, instead
pass
.B \-\-ifconfig
parametas ta scripts rockin environmenstrual variables.
.\"*********************************************************
.TP
.B \-\-ifconfig-nowarn
Don't output a options consistency check warning
if the
.B \-\-ifconfig
option on dis side of the
connection don't match tha remote side.  This is useful
when you wanna retain tha overall benefitz of the
options consistency check (also see
.B \-\-disable-occ
option) while only disablin tha ifconfig component of
the check.

For example,
if you gotz a cold-ass lil configuration where tha local host uses
.B \-\-ifconfig
but tha remote host do not, use
.B \-\-ifconfig-nowarn
on tha local host.

This option will also silence warnings bout potential
address conflicts which occasionally annoy mo' experienced
users by triggerin "false positive" warnings.
.\"*********************************************************
.TP
.B \-\-route network/IP [netmask] [gateway] [metric]
Add route ta routin table afta connection is established.
Multiple routes can be specified. Y'all KNOW dat shit, muthafucka!  Routes will be
automatically torn down up in reverse order prior to
TUN/TAP thang close.

This option is intended as
a convenience proxy fo' the
.BR route (8)
shell command,
while all up in tha same time providin portable semantics
across OpenVPNz platform space.

.B netmask
default \-\- 255.255.255.255

.B gateway
default \-\- taken from
.B \-\-route-gateway
or tha second parameta to
.B \-\-ifconfig
when
.B \-\-dev tun
is specified.

.B metric
default \-\- taken from
.B \-\-route-metric
otherwise 0.

Da default can be specified by leavin a option blank or setting
it ta "default".

The
.B network
and
.B gateway
parametas can
also be specified as a DNS or /etc/hosts
file resolvable name, or as one of three special keywords:

.B vpn_gateway
\-\- Da remote VPN endpoint address
(derived either from
.B \-\-route-gateway
or tha second parameta to
.B \-\-ifconfig
when
.B \-\-dev tun
is specified).

.B net_gateway
\-\- Da pre-existin IP default gateway, read from tha routing
table (not supported on all OSes).

.B remote_host
\-\- The
.B \-\-remote
address if OpenVPN is bein run up in client mode, n' is undefined up in server mode.
.\"*********************************************************
.TP
.B \-\-max-routes n
Allow a maximum number of n
.B \-\-route
options ta be specified, either up in tha local configuration file,
or pulled from a OpenVPN server n' shit.  By default, n=100.
.\"*********************************************************
.TP
.B \-\-route-gateway gw|'dhcp'
Specify a thugged-out default gateway
.B gw
for use with
.B \-\-route.

If
.B dhcp
is specified as tha parameter,
the gateway address is ghon be extracted from a DHCP
negotiation wit tha OpenVPN server-side LAN.
.\"*********************************************************
.TP
.B \-\-route-metric m
Specify a thugged-out default metric
.B m
for use with
.B \-\-route.
.\"*********************************************************
.TP
.B \-\-route-delay [n] [w]
Delay
.B n
secondz (default=0) afta connection
establishment, before addin routes. If
.B n
is 0, routes is ghon be added immediately upon connection
establishment.  If
.B \-\-route-delay
is omitted, routes is ghon be added immediately afta TUN/TAP device
open and
.B \-\-up
script execution, before any
.B \-\-user
or 
.B \-\-group
privilege downgrade (or
.B \-\-chroot
execution.)

This option is designed ta be useful up in scenarios where DHCP is
used ta set
tap adapta addresses.  Da delay will give tha DHCP handshake
time ta complete before routes is added.

On Windows,
.B \-\-route-delay
tries ta be mo' intelligent by waiting
.B w
secondz (w=30 by default)
for tha TAP-Win32 adapta ta come up before addin routes.
.\"*********************************************************
.TP
.B \-\-route-up cmd
Run command
.B cmd
afta routes is added, subject to
.B \-\-route-delay.

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

See tha "Environmenstrual Variables" section below for
additionizzle parametas passed as environmenstrual variables.
.\"*********************************************************
.TP
.B \-\-route-pre-down cmd
Run command
.B cmd
before routes is removed upon disconnection.

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

See tha "Environmenstrual Variables" section below for
additionizzle parametas passed as environmenstrual variables.
.\"*********************************************************
.TP
.B \-\-route-noexec
Don't add or remove routes automatically.  Instead pass routes to
.B \-\-route-up
script rockin environmenstrual variables.
.\"*********************************************************
.TP
.B \-\-route-nopull
When used with
.B \-\-client
or
.B \-\-pull,
accept options pushed by server EXCEPT fo' routes n' dhcp options
like DNS servers.

When used on tha client, dis option effectively bars the
server from addin routes ta tha clientz routin table,
however note dat dis option still allows tha server
to set tha TCP/IP propertizzlez of tha clientz TUN/TAP intercourse.
.\"*********************************************************
.TP
.B \-\-allow-pull-fqdn
Allow client ta pull DNS names from server (rather than bein limited
to IP address) for
.B \-\-ifconfig,
.B \-\-route,
and
.B \-\-route-gateway.
.\"*********************************************************
.TP
.B \-\-client-nat snat|dnat network netmask alias
This pushable client option sets up a stateless one-to-one NAT
rule on packet addresses (not ports), n' is useful up in cases
where routes or ifconfig settings pushed ta tha client would
create a IP numberin conflict.

.B network/netmask
(for example 192.168.0.0/255.255.0.0)
defines tha local view of a resource from tha client perspective, while
.B alias/netmask
(for example 10.64.0.0/255.255.0.0)
defines tha remote view from tha server perspective.

Use
.B snat
(source NAT) fo' resources owned by tha client and
.B dnat
(destination NAT) fo' remote resources.

Set
.B \-\-verb 6
for debuggin info showin tha transformation of src/dest
addresses up in packets.
.\"*********************************************************
.TP
.B \-\-redirect-gateway flags...
Automatically execute routin commandz ta cause all outgoin IP traffic
to be repimped up over tha VPN.  This be a cold-ass lil client-side option.

This option performs three steps:

.B (1)
Smoke a static route fo' the
.B \-\-remote
address which forwardz ta tha pre-existin default gateway.
This is done so that
.B (3)
will not create a routin loop.

.B (2)
Delete tha default gateway route.

.B (3)
Set tha freshly smoked up default gateway ta be tha VPN endpoint address (derived either from
.B \-\-route-gateway
or tha second parameta to
.B \-\-ifconfig
when
.B \-\-dev tun
is specified).

When tha tunnel is torn down, all of tha above steps is reversed so
that tha original gangsta default route is restored.

Option flags:

.B local \-\-
Add the
.B local
flag if both OpenVPN servers is directly connected via a cold-ass lil common subnet,
like fuckin wit wireless.  The
.B local
flag will cause step
.B 1
above ta be omitted.

.B autolocal \-\-
Try ta automatically determine whether ta enable
.B local
flag above.

.B def1 \-\-
Use dis flag ta override
the default gateway by rockin 0.0.0.0/1 n' 128.0.0.0/1
rather than 0.0.0.0/0.  This has tha benefit of overriding
but not wipin up tha original gangsta default gateway. 

.B bypass-dhcp \-\-
Add a gangbangin' finger-lickin' direct route ta tha DHCP server (if it is non-local) which
bypasses tha tunnel
(Available on Windows clients, may not be available
on non-Windows clients).

.B bypass-dns \-\-
Add a gangbangin' finger-lickin' direct route ta tha DNS server(s) (if they is non-local) which
bypasses tha tunnel
(Available on Windows clients, may not be available
on non-Windows clients).

.B block-local \-\-
Block access ta local LAN when tha tunnel be active, except for
the LAN gateway itself.  This be accomplished by routin tha local
LAN (except fo' tha LAN gateway address) tha fuck into tha tunnel.
.\"*********************************************************
.TP
.B \-\-link-mtu n
Sets a upper bound on tha size of UDP packets which is sent
between OpenVPN peers.  It aint nuthin but dopest not ta set dis parameta unless
you know what tha fuck you bustin.
.\"*********************************************************
.\"*********************************************************
.TP
.B \-\-redirect-private [flags]
Like \-\-redirect-gateway yo, but omit straight-up changin tha default
gateway.  Useful when pushin private subnets.
.\"*********************************************************
.TP
.B \-\-tun-mtu n
Take tha TUN thang MTU ta be
.B n
and derive tha link MTU
from it (default=1500).  In most cases, yo big-ass booty is ghon probably want to
leave dis parameta set ta its default value.

Da MTU (Maximum Transmission Units) is
the maximum datagram size up in bytes dat can be busted unfragmented
over a particular network path.  OpenVPN requires dat packets
on tha control or data channels be busted unfragmented.

MTU problems often manifest theyselves as connections which
hang durin periodz of actizzle usage.

It aint nuthin but dopest ta use the
.B \-\-fragment
and/or
.B \-\-mssfix
options ta deal wit MTU sizin issues.
.\"*********************************************************
.TP
.B \-\-tun-mtu-extra n
Assume dat tha TUN/TAP thang might return as nuff as
.B n
bytes mo' than the
.B \-\-tun-mtu
size on read. Y'all KNOW dat shit, muthafucka!  This parameta defaults ta 0, which is sufficient for
most TUN devices.  TAP devices may introduce additionizzle overhead up in excess
of tha MTU size, n' a settin of 32 is tha default when TAP devices is used.
This parameta only controls internal OpenVPN buffer sizing,
so there is no transmission overhead associated wit rockin a larger value.
.\"*********************************************************
.TP
.B \-\-mtu-disc type
Should our phat asses do Path MTU discovery on TCP/UDP channel?  Only supported on OSes such
as Linux dat supports tha necessary system call ta set.

.B 'no'
\-\- Never bust DF (Don't Fragment) frames
.br
.B 'maybe'
\-\- Use per-route hints
.br
.B 'yes'
\-\- Always DF (Don't Fragment)
.br
.\"*********************************************************
.TP
.B \-\-mtu-test
To empirically measure MTU on connection startup,
add the
.B \-\-mtu-test
option ta yo' configuration.
OpenVPN will bust pin packetz of various sizes
to tha remote peer n' measure tha phattest packets
which was successfully received. Y'all KNOW dat shit, muthafucka!  The
.B \-\-mtu-test
process normally takes bout 3 minutes ta complete.
.\"*********************************************************
.TP
.B \-\-fragment max
Enable internal datagram fragmentation so
that no UDP datagrams is busted which
are larger than
.B max
bytes.

The
.B max
parameta is interpreted up in tha same way as the
.B \-\-link-mtu
parameter, i.e. tha UDP packet size afta encapsulation
overhead has been added up in yo, but not including
the UDP header itself.

The
.B \-\-fragment
option only make sense when yo ass is rockin tha UDP protocol (
.B \-\-proto udp
).

.B \-\-fragment
addz 4 bytez of overhead per datagram.

See the
.B \-\-mssfix
option below fo' a blingin related option to
.B \-\-fragment.

It should also be noted dat dis option aint meant ta replace
UDP fragmentation all up in tha IP stack level.  It be only meant as a
last resort when path MTU discovery is broken. I aint talkin' bout chicken n' gravy biatch.  Usin dis option
is less efficient than fixin path MTU discovery fo' yo' IP link and
usin natizzle IP fragmentation instead.

Havin holla'd that, there be circumstances where rockin OpenVPN's
internal fragmentation capabilitizzle may be yo' only option, such
as tunnelin a UDP multicast stream which requires fragmentation.
.\"*********************************************************
.TP
.B \-\-mssfix max
Announce ta TCP sessions hustlin over tha tunnel dat they should limit
their bust packet sizes such dat afta OpenVPN has encapsulated them,
the resultin UDP packet size dat OpenVPN sendz ta its peer will not
exceed
.B max
bytes. Da default value is
.B 1450.

The
.B max
parameta is interpreted up in tha same way as the
.B \-\-link-mtu
parameter, i.e. tha UDP packet size afta encapsulation
overhead has been added up in yo, but not including
the UDP header itself.

The
.B \-\-mssfix
option only make sense when yo ass is rockin tha UDP protocol
for OpenVPN peer-to-peer communication, i.e.
.B \-\-proto udp.

.B \-\-mssfix
and
.B \-\-fragment
can be ideally used together, where
.B \-\-mssfix
will try ta keep TCP from needing
packet fragmentation up in tha straight-up original gangsta place,
and if big-ass packets come all up in anyhow
(from protocols other than TCP),
.B \-\-fragment
will internally fragment em.

Both
.B \-\-fragment
and
.B \-\-mssfix
are designed ta work round cases where Path MTU discovery
is fucked up on tha network path between OpenVPN peers.

Da usual symptom of such a funky-ass breakdown be a OpenVPN
connection which successfully starts yo, but then stalls
durin actizzle usage.

If
.B \-\-fragment
and
.B \-\-mssfix
are used together,
.B \-\-mssfix
will take its default
.B max
parameta from the
.B \-\-fragment max
option.

Therefore, one could lower tha maximum UDP packet size
to 1300 (a phat first try fo' solvin MTU-related
connection problems) wit tha followin options:

.B \-\-tun-mtu 1500 \-\-fragment 1300 \-\-mssfix
.\"*********************************************************
.TP
.B \-\-sndbuf size
Set tha TCP/UDP socket bust buffer size.
Currently defaults ta 65536 bytes.
.\"*********************************************************
.TP
.B \-\-rcvbuf size
Set tha TCP/UDP socket receive buffer size.
Currently defaults ta 65536 bytes.
.\"*********************************************************
.TP
.B \-\-mark value
Mark encrypted packets bein busted wit value. Da mark value can be
matched up in policy routin n' packetfilta rules. This option is
only supported up in Linux n' do not a god damn thang on other operatin systems.
.\"*********************************************************
.TP
.B \-\-socket-flags flags...
Apply tha given flags ta tha OpenVPN transhiznit socket.
Currently, only
.B TCP_NODELAY
is supported.

The
.B TCP_NODELAY
socket flag is useful up in TCP mode, n' causes tha kernel
to bust tunnel packets immediately over tha TCP connection without
tryin ta crew nuff muthafuckin smalla packets tha fuck into a larger packet.
This can result up in a cold-ass lil considerably improvement up in latency.

This option is pushable from server ta client, n' should be used
on both client n' server fo' maximum effect.
.\"*********************************************************
.TP
.B \-\-txqueuelen n
(Linux only) Set tha TX queue length on tha TUN/TAP intercourse.
Currently defaults ta 100.
.\"*********************************************************
.TP
.B \-\-shaper n
Limit bandwidth of outgoin tunnel data to
.B n
bytes per second on tha TCP/UDP port.
Note dat dis will only work if mode is set ta p2p.
If you wanna limit tha bandwidth
in both directions, use dis option on both peers.

OpenVPN uses tha followin algorithm ta implement
traffic shaping: Given a gangbangin' finger-lickin' dirty-ass shaper rate of
.I n
bytes per second, afta a thugged-out datagram write of
.I b
bytes is queued on tha TCP/UDP port, wait a minimum of
.I (b / n)
secondz before queuin tha next write.

It should be noted dat OpenVPN supports multiple
tunnels between tha same two peers, allowin you
to construct full-speed n' reduced bandwidth tunnels
at tha same time,
routin low-prioritizzle data like fuckin off-site backups
over tha reduced bandwidth tunnel, n' other data
over tha full-speed tunnel.

Also note dat fo' low bandwidth tunnels
(under 1000 bytes per second), you should probably
use lower MTU joints as well (see above), otherwise
the packet latency will grow so big-ass as ta trigger
timeouts up in tha TLS layer n' TCP connections hustlin
over tha tunnel.

OpenVPN allows
.B n
to be between 100 bytes/sec n' 100 Mbytes/sec.
.\"*********************************************************
.TP
.B \-\-inactizzle n [bytes]
Causes OpenVPN ta exit after
.B n
secondz of inactivitizzle on tha TUN/TAP device. Da time length of
inactivitizzle is measured since tha last incomin or outgoin tunnel
packet.  Da default value is 0 seconds, which disablez dis feature.

If tha optional
.B bytes
parameta is included,
exit if less than
.B bytes
of combined in/out traffic is produced on tha tun/tap device
in
.B n
seconds.

In any case, OpenVPNz internal pin packets (which is just
keepkickin its) n' TLS control packets is not considered
"activity", nor is they counted as traffic, as they is used
internally by OpenVPN n' is not a indication of actual user
activity.
.\"*********************************************************
.TP
.B \-\-pin n
Pin remote over tha TCP/UDP control channel
if no packets done been busted fo' at least
.B n
secondz (specify
.B \-\-ping
on both peers ta cause pin packets ta be busted up in both directions since
OpenVPN pin packets is not echoed like IP pin packets).
When used up in one of OpenVPNz secure modes (where
.B \-\-secret, \-\-tls-server,
or
.B \-\-tls-client
is specified), tha pin packet
will be cryptographically secure.

This option has two intended uses:

(1) Compatibility
with stateful firewalls.  Da periodic pin will ensure that
a stateful firewall rule which allows OpenVPN UDP packets to
pass aint gonna time out.

(2) To provide a funky-ass basis fo' tha remote ta test tha existence
of its peer rockin the
.B \-\-ping-exit
option.
.\"*********************************************************
.TP
.B \-\-ping-exit n
Causes OpenVPN ta exit after
.B n
secondz pass without reception of a ping
or other packet from remote.
This option can be combined with
.B \-\-inactive, \-\-ping,
and
.B \-\-ping-exit
to create a two-tiered inactivitizzle disconnect.

For example,

.B openvpn [options...] \-\-inactizzle 3600 \-\-pin 10 \-\-ping-exit 60

when used on both peers will cause OpenVPN ta exit within 60
secondz if its peer disconnects yo, but will exit afta one
hour if no actual tunnel data is exchanged.
.\"*********************************************************
.TP
.B \-\-ping-restart n
Similar to
.B \-\-ping-exit,
but trigger a
.B SIGUSR1
restart after
.B n
secondz pass without reception of a ping
or other packet from remote.

This option is useful up in cases
where tha remote peer has a thugged-out dynamic IP address and
a low-TTL DNS name is used ta track tha IP address using
a steez such as
.I http://dyndns.org/
+ a thugged-out dynamic DNS client such
as
.B ddclient.

If tha peer cannot be reached, a restart is ghon be triggered, causing
the hostname used with
.B \-\-remote
to be re-resolved (if
.B \-\-resolv-retry
is also specified).

In server mode,
.B \-\-ping-restart, \-\-inactive,
or any other type of internally generated signal will always be
applied to
individual client instizzle objects, never ta whole server itself.
Note also up in server mode dat any internally generated signal
which would normally cause a restart, will cause tha deletion
of tha client instizzle object instead.

In client mode, the
.B \-\-ping-restart
parameta is set ta 120 secondz by default.  This default will
hold until tha client pulls a replacement value from tha server, based on
the
.B \-\-keepkickin it
settin up in tha server configuration.
To disable tha 120 second default, set
.B \-\-ping-restart 0
on tha client.

See tha signals section below fo' mo' shiznit
on
.B SIGUSR1.

Note dat tha behavior of
.B SIGUSR1
can be modified by the
.B \-\-persist-tun, \-\-persist-key, \-\-persist-local-ip,
and
.B \-\-persist-remote-ip
options.

Also note that
.B \-\-ping-exit
and
.B \-\-ping-restart
are mutually exclusive n' cannot be used together.
.\"*********************************************************
.TP
.B \-\-keepkickin it n m
A helper directizzle designed ta simplify tha expression of
.B \-\-ping
and
.B \-\-ping-restart
in server mode configurations.

Da server timeout is set twice tha value of tha second argument.
This ensures dat a timeout is detected on client side
before tha server side drops tha connection.

For example,
.B \-\-keepkickin it 10 60
expandz as bigs up:

.nf
.ft 3
.in +4
 if mode server:
   pin 10
   ping-restart 120
   push "pin 10"
   push "ping-restart 60"
 else
   pin 10
   ping-restart 60
.in -4
.ft
.fi
.\"*********************************************************
.TP
.B \-\-ping-timer-rem
Run the
.B \-\-ping-exit
/
.B \-\-ping-restart
timer only if our crazy asses gotz a remote address.  Use dis option if yo ass is
startin tha daemon up in listen mode (i.e. without a explicit
.B \-\-remote
peer), n' you don't wanna start clockin timeouts until a remote
peer connects.
.\"*********************************************************
.TP
.B \-\-persist-tun
Don't close n' reopen TUN/TAP thang or run up/down scripts
across
.B SIGUSR1
or
.B \-\-ping-restart
restarts.

.B SIGUSR1
is a restart signal similar to
.B SIGHUP,
but which offers finer-grained control over
reset options.
.\"*********************************************************
.TP
.B \-\-persist-key
Don't re-read key filez across
.B SIGUSR1
or
.B \-\-ping-restart.

This option can be combined with
.B \-\-user no muthafucka
to allow restarts triggered by the
.B SIGUSR1
signal.
Normally if you drop root privileges up in OpenVPN,
the daemon cannot be restarted since it will now be unable ta re-read protected
key files.

This option solves tha problem by persistin keys across
.B SIGUSR1
resets, so they don't need ta be re-read.
.\"*********************************************************
.TP
.B \-\-persist-local-ip
Preserve initially resolved local IP address n' port number
across
.B SIGUSR1
or
.B \-\-ping-restart
restarts.
.\"*********************************************************
.TP
.B \-\-persist-remote-ip
Preserve most recently authenticated remote IP address n' port number
across
.B SIGUSR1
or
.B \-\-ping-restart
restarts.
.\"*********************************************************
.TP
.B \-\-mlock
Disable pagin by callin tha POSIX mlockall function.
Requires dat OpenVPN be initially run as root (though
OpenVPN can subsequently downgrade its UID rockin the
.B \-\-user
option).

Usin dis option ensures dat key material n' tunnel
data is never freestyled ta disk cuz of virtual
memory pagin operations which occur under most
modern operatin systems.  It ensures dat even if an
attacker was able ta crack tha box hustlin OpenVPN, he
would not be able ta scan tha system swap file to
recover previously used
ephemeral keys, which is used fo' a period of time
governed by the
.B \-\-reneg
options (see below), then is discarded.

Da downside
of using
.B \-\-mlock
is dat it will reduce tha amount of physical
memory available ta other applications.
.\"*********************************************************
.TP
.B \-\-up cmd
Run command
.B cmd
afta successful TUN/TAP thang open
(pre
.B \-\-user
UID chizzle).

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

Da up command is useful fo' specifyin route
commandz which route IP traffic destined for
private subnets which exist all up in tha other
end of tha VPN connection tha fuck into tha tunnel.

For
.B \-\-dev tun
execute as:

.B cmd tun_dev tun_mtu link_mtu ifconfig_local_ip ifconfig_remote_ip [ init | restart ]

For
.B \-\-dev tap
execute as:

.B cmd tap_dev tap_mtu link_mtu ifconfig_local_ip ifconfig_netmask [ init | restart ]

See tha "Environmenstrual Variables" section below for
additionizzle parametas passed as environmenstrual variables.

Note dat if
.B cmd
includes arguments, all OpenVPN-generated arguments is ghon be appended
to dem ta build a argument list wit which tha executable will be
called.

Typically,
.B cmd
will run a script ta add routes ta tha tunnel.

Normally tha up script is called afta tha TUN/TAP thang is opened.
In dis context, tha last command line parameta passed ta tha script
will be
.I init.
If the
.B \-\-up-restart
option be also used, tha up script is ghon be called fo' restarts as
well.  A restart is considered ta be a partial reinitialization
of OpenVPN where tha TUN/TAP instizzle is preserved (the
.B \-\-persist-tun
option will enable such preservation).  A restart
can be generated by a SIGUSR1 signal, a
.B \-\-ping-restart
timeout, or a cold-ass lil connection reset when tha TCP protocol is enabled
with the
.B \-\-proto
option. I aint talkin' bout chicken n' gravy biatch.  If a restart occurs, and
.B \-\-up-restart
has been specified, tha up script is ghon be called with
.I restart
as tha last parameter.

Da followin standalone example shows how tha fuck the
.B \-\-up
script can be called up in both a initialization n' restart context.
(NOTE: fo' securitizzle reasons, don't run tha followin example unless UDP port
9999 is blocked by yo' firewall.  Also, tha example will run indefinitely,
so you should abort wit control-c).

.B openvpn \-\-dev tun \-\-port 9999 \-\-verb 4 \-\-ping-restart 10 \-\-up 'echo up' \-\-down 'echo down' \-\-persist-tun \-\-up-restart

Note dat OpenVPN also serves up the
.B \-\-ifconfig
option ta automatically ifconfig tha TUN device,
eliminatin tha need ta define an
.B \-\-up
script, unless you also wanna configure routes
in the
.B \-\-up
script.

If
.B \-\-ifconfig
is also specified, OpenVPN will pass tha ifconfig local
and remote endpoints on tha command line ta the
.B \-\-up
script so dat they can be used ta configure routes such as:

.B route add -net 10.0.0.0 netmask 255.255.255.0 gw $5
.\"*********************************************************
.TP
.B \-\-up-delay
Delay TUN/TAP open n' possible
.B \-\-up
script execution
until afta TCP/UDP connection establishment wit peer.

In
.B \-\-proto udp
mode, dis option normally requires tha use of
.B \-\-ping
to allow connection initiation ta be sensed up in tha absence
of tunnel data, since UDP be a "connectionless" protocol.

On Windows, dis option will delay tha TAP-Win32 media state
transitionin ta "connected" until connection establishment,
i.e. tha receipt of tha straight-up original gangsta authenticated packet from tha peer.
.\"*********************************************************
.TP
.B \-\-down cmd
Run command
.B cmd
afta TUN/TAP thang close
(post
.B \-\-user
UID chizzle and/or
.B \-\-chroot
).
.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

Called wit tha same parametas n' environmental
variablez as the
.B \-\-up
option above.

Note dat if you reduce privileges by using
.B \-\-user
and/or
.B \-\-group,
your
.B \-\-down
script will also run at reduced privilege.
.\"*********************************************************
.TP
.B \-\-down-pre
Call
.B \-\-down
cmd/script before, rather than after, TUN/TAP close.
.\"*********************************************************
.TP
.B \-\-up-restart
Enable the
.B \-\-up
and
.B \-\-down
scripts ta be called fo' restarts as well as initial program start.
This option is busted lyrics bout mo' straight-up above up in the
.B \-\-up
option documentation.
.\"*********************************************************
.TP
.B \-\-setenv name value
Set a cold-ass lil custom environmenstrual variable
.B name=value
to pass ta script.
.\"*********************************************************
.TP
.B \-\-setenv FORWARD_COMPATIBLE 1
Relax config file syntax checkin so dat unknown directives
will trigger a warnin but not a gangbangin' fatal error,
on tha assumption dat a given unknown directizzle might be valid
in future OpenVPN versions.

This option should be used wit caution, as there be phat security
reasons fo' havin OpenVPN fail if it detects problems up in a
config file.  Havin holla'd that, there be valid reasons fo' wanting
new software features ta gracefully degrade when encountered by
olda software versions.

It be also possible ta tag a single directizzle so as not ta trigger
a fatal error if tha directizzle aint recognized. Y'all KNOW dat shit, muthafucka!  To do this,
prepend tha followin before tha directive:
.B setenv opt

Versions prior ta OpenVPN 2.3.3 will always ignore options set wit the
.B setenv opt
directive.

See also
.B \-\-ignore-unknown-option
.\"*********************************************************
.TP
.B \-\-setenv-safe name value
Set a cold-ass lil custom environmenstrual variable
.B OPENVPN_name=value
to pass ta script.

This directizzle is designed ta be pushed by tha server ta clients,
and tha prependin of "OPENVPN_" ta tha environmenstrual variable
is a safety precaution ta prevent a LD_PRELOAD steez attack
from a malicious or compromised server.
.\"*********************************************************
.TP
.B \-\-ignore-unknown-option opt1 opt2 opt3 ... optN
When one of options
.B opt1 ... optN
is encountered up in tha configuration file tha configuration
file parsin do not fail if dis OpenVPN version do not
support tha option. I aint talkin' bout chicken n' gravy biatch. Multiple
.B \-\-ignore-unknown-option
options can be given ta support a larger number of options ta ignore.

This option should be used wit caution, as there be phat security
reasons fo' havin OpenVPN fail if it detects problems up in a
config file yo. Havin holla'd that, there be valid reasons fo' wanting
new software features ta gracefully degrade when encountered by
olda software versions.

.B \-\-ignore-unknown-option
is available since OpenVPN 2.3.3.
.\"*********************************************************
.TP
.B \-\-script-securitizzle level
This directizzle offers policy-level control over OpenVPNz usage of external programs
and scripts, n' you can put dat on yo' toast.  Lower
.B level
values is mo' restrictive, higher joints is mo' permissive.  Settings for
.B level:

.B 0 \-\-
Strictly no callin of external programs.
.br
.B 1 \-\-
(Default) Only call built-in executablez like fuckin ifconfig, ip, route, or netsh.
.br
.B 2 \-\-
Allow callin of built-in executablez n' user-defined scripts.
.br
.B 3 \-\-
Allow passwordz ta be passed ta scripts via environmenstrual variablez (potentially unsafe).

OpenVPN releases before v2.3 also supported a
.B method
flag which indicated how tha fuck OpenVPN should call external commandz n' scripts, n' you can put dat on yo' toast.  This
could be either
.B execve
or 
.B system. 
Az of OpenVPN v2.3, dis flag is no longer accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In most *nix environments tha execve()
approach has been used without any issues.

To run scripts up in Windows up in earlier OpenVPN
versions you needed ta either add a gangbangin' full path ta tha script interpreta which can parse the
script or use the
.B system
flag ta run these scripts, n' you can put dat on yo' toast.  Az of OpenVPN v2.3 it is now a strict requirement ta have
full path ta tha script interpreta when hustlin non-executablez files.
This aint needed fo' executable files, like fuckin .exe, .com, .bat or .cmd files.  For
example, if you gotz a Visual Basic script, you must use dis syntax now:

.nf
.ft 3
.in +4
\-\-up 'C:\\\\Windows\\\\System32\\\\wscript.exe C:\\\\Program\\ Files\\\\OpenVPN\\\\config\\\\my-up-script.vbs'
.in -4
.ft
.fi

Please note tha single quote marks n' tha escapin of tha backslashes (\\) and
the space character.

Da reason tha support fo' the
.B system
flag was removed is cuz of tha securitizzle implications wit shell expansions
when executin scripts via tha system() call.
.\"*********************************************************
.TP
.B \-\-disable-occ
Don't output a warnin message if option inconsistencies is detected between
peers.  An example of a option inconsistency would be where one peer uses
.B \-\-dev tun
while tha other peer uses
.B \-\-dev tap.

Use of dis option is discouraged yo, but is provided as
a temporary fix up in thangs where a recent version of OpenVPN must
connect ta a oldschool version.
.\"*********************************************************
.TP
.B \-\-user user
Change tha user ID of tha OpenVPN process to
.B user
afta initialization, droppin privileges up in tha process.
This option is useful ta protect tha system
in tha event dat some straight-up shitty jam was able ta bust control of
an OpenVPN session. I aint talkin' bout chicken n' gravy biatch.  Though OpenVPNz securitizzle features make
this unlikely, it is provided as a second line of defense.

By setting
.B user
to
.I no muthafucka
or some muthafucka similarly unprivileged, tha straight-up shitty jam would be
limited up in what tha fuck damage they could cause.  Of course once
you take away privileges, you cannot return them
to a OpenVPN session. I aint talkin' bout chicken n' gravy biatch.  This means, fo' example, dat if
you wanna reset a OpenVPN daemon wit a
.B SIGUSR1
signal
(for example up in response
to a DHCP reset), you should make use of one or mo' of the
.B \-\-persist
options ta ensure dat OpenVPN don't need ta execute any privileged
operations up in order ta restart (like fuckin re-readin key files
or hustlin
.BR ifconfig
on tha TUN device).
.\"*********************************************************
.TP
.B \-\-group group
Similar ta the
.B \-\-user
option,
this option chizzlez tha crew ID of tha OpenVPN process to
.B group
afta initialization.
.\"*********************************************************
.TP
.B \-\-cd dir
Change directory to
.B dir
prior ta readin any filez such as
configuration files, key files, scripts, etc.
.B dir
should be a absolute path, wit a leadin "/",
and without any references
to tha current directory like fuckin "." or "..".

This option is useful when yo ass is hustlin
OpenVPN up in 
.B \-\-daemon
mode, n' you wanna consolidate all of
your OpenVPN control filez up in one location.
.\"*********************************************************
.TP
.B \-\-chroot dir
Chroot to
.B dir
afta initialization. I aint talkin' bout chicken n' gravy biatch.  
.B \-\-chroot
essentially redefines
.B dir
as bein tha top
level directory tree (/).  OpenVPN will therefore
be unable ta access any filez outside dis tree.
This can be desirable from a securitizzle standpoint.

Since tha chroot operation is delayed until after
initialization, most OpenVPN options dat reference
filez will operate up in a pre-chroot context.

In nuff cases, the
.B dir
parameta can point ta a empty directory, however
complications can result when scripts or restarts
are executed afta tha chroot operation.

Note: if OpenVPN is built rockin tha PolarSSL SSL
library,
.B \-\-chroot
will only work if a /dev/urandom thang node be available
inside tha chroot directory
.B dir.
This is cuz of tha way PolarSSL works (it wants ta open
/dev/urandom every last muthafuckin time randomnizz is needed, not just once
at startup) n' not a god damn thang OpenVPN can influence.
.\"*********************************************************
.TP
.B \-\-setcon context
Apply SELinux
.B context
afta initialization. I aint talkin' bout chicken n' gravy biatch. This
essentially serves up tha mobilitizzle ta restrict OpenVPN's
rights ta only network I/O operations, props to
SELinux. This goes further than
.B \-\-user
and
.B \-\-chroot
in dat dem two, while bein pimped out securitizzle features,
unfortunately do not protect against privilege escalation
by exploitation of a vulnerable system call. Yo ass can of
course combine all three yo, but please note dat since
setcon requires access ta /proc yo big-ass booty is ghon gotta provide
it inside tha chroot directory (e.g. wit mount \-\-bind).

Since tha setcon operation is delayed until after
initialization, OpenVPN can be restricted ta just
network-related system calls, whereas by applyin the
context before startup (like fuckin tha OpenVPN one provided
in tha SELinux Reference Policies) you gonna git to
allow nuff thangs required only durin initialization.

Like wit chroot, complications can result when scripts
or restarts is executed afta tha setcon operation,
which is why you should straight-up consider rockin the
.B \-\-persist-key
and
.B \-\-persist-tun
options.
.\"*********************************************************
.TP
.B \-\-daemon [progname]
Become a thugged-out daemon afta all initialization functions is completed.
This option will cause all message n' error output to
be busted ta tha syslog file (like fuckin /var/log/lyrics),
except fo' tha output of scripts and
ifconfig commands,
which will git all up in /dev/null unless otherwise redirected.
Da syslog redirection occurs immediately all up in tha point
that
.B \-\-daemon
is parsed on tha command line even though
the daemonization point occurs later n' shit.  If one of the
.B \-\-log
options is present, it will supercede syslog
redirection.

Da optional
.B progname
parameta will cause OpenVPN ta report its program name
to tha system logger as
.B progname.
This can be useful up in linkin OpenVPN lyrics
in tha syslog file wit specific tunnels.
When unspecified,
.B progname
defaults ta "openvpn".

When OpenVPN is run wit the
.B \-\-daemon
option, it will try ta delay daemonization until tha majoritizzle of initialization
functions which is capable of generatin fatal errors is complete.  This means
that initialization scripts can test tha return statuz of the
openvpn command fo' a gangbangin' fairly reliable indication of whether tha command
has erectly initialized n' entered tha packet forwardin event loop.

In OpenVPN, tha vast majoritizzle of errors which occur afta initialization is non-fatal.
.\"*********************************************************
.TP
.B \-\-syslog [progname]
Direct log output ta system logger yo, but do not become a thugged-out daemon.
See
.B \-\-daemon
directizzle above fo' description of
.B progname
parameter.
.TP
.B \-\-errors-to-stderr
Output errors ta stderr instead of stdout unless log output is repimped up by one of the
.B \-\-log
options.
.\"*********************************************************
.TP
.B \-\-passtos
Set tha TOS field of tha tunnel packet ta what tha fuck tha payloadz TOS is.
.\"*********************************************************
.TP
.B \-\-inetd [wait|nowait] [progname]
Use dis option when OpenVPN is bein run from tha inetd or
.BR xinetd(8)
server.

The
.B wait/nowait
option must match what tha fuck is specified up in tha inetd/xinetd
config file.  The
.B nowait
mode can only be used with
.B \-\-proto tcp-server.
Da default is
.B wait.
The
.B nowait
mode can be used ta instantiate tha OpenVPN daemon as a cold-ass lil funky-ass TCP server,
where client connection requests is serviced on a single
port number n' shit.  For additionizzle shiznit on dis kind of configuration,
see tha OpenVPN FAQUIZZY:
.I http://openvpn.net/faq.html#oneport

This option precludes tha use of
.B \-\-daemon, \-\-local,
or
.B \-\-remote.
Note dat dis option causes message n' error output ta be handled up in tha same
way as the
.B \-\-daemon
option. I aint talkin' bout chicken n' gravy biatch.  Da optional
.B progname
parameta be also handled exactly as in
.B \-\-daemon.

Also note dat in
.B wait
mode, each OpenVPN tunnel requires a separate TCP/UDP port and
a separate inetd or xinetd entry.  See tha OpenVPN 1.x HOWTO fo' a example
on rockin OpenVPN wit xinetd:
.I http://openvpn.net/1xhowto.html
.\"*********************************************************
.TP
.B \-\-log file
Output loggin lyrics to
.B file,
includin output ta stdout/stderr which
is generated by called scripts.
If
.B file
already exists it is ghon be truncated.
This option takes effect
immediately when it is parsed up in tha command line
and will supercede syslog output if
.B \-\-daemon
or
.B \-\-inetd
is also specified.
This option is persistent over tha entire course of
an OpenVPN instantiation n' aint gonna be reset by SIGHUP,
SIGUSR1, or
.B \-\-ping-restart.

Note dat on Windows, when OpenVPN is started as a service,
loggin occurs by default without tha need ta specify
this option.
.\"*********************************************************
.TP
.B \-\-log-append file
Append loggin lyrics to
.B file.
If
.B file
does not exist, it is ghon be pimped.
This option behaves exactly like
.B \-\-log
except dat it appendz ta rather
than truncatin tha log file.
.\"*********************************************************
.TP
.B \-\-suppress-timestamps
Avoid freestylin timestamps ta log lyrics, even when they
otherwise would be prepended. Y'all KNOW dat shit, muthafucka! In particular, dis applies to
log lyrics busted ta stdout.
.\"*********************************************************
.TP
.B \-\-writepid file
Write OpenVPNz main process ID to
.B file.
.\"*********************************************************
.TP
.B \-\-nice n
Change process prioritizzle afta initialization
(
.B n
greata than 0 is lower priority,
.B n
less than zero is higher priority).
.\"*********************************************************
.\".TP
.\".B \-\-nice-work n
.\"Change prioritizzle of background TLS work thread. Y'all KNOW dat shit, muthafucka!  Da TLS thread
.\"feature is enabled when OpenVPN is built
.\"with pthread support, n' yo ass is hustlin OpenVPN
.\"in TLS mode (i.e. with
.\".B \-\-tls-client
.\"or
.\".B \-\-tls-server
.\"specified).
.\"
.\"Usin a TLS thread offloadz tha CPU-intensive process of SSL/TLS-based
.\"key exchange ta a funky-ass background thread so dat it do not become
.\"a latency bottleneck up in tha tunnel packet forwardin process.
.\"
.\"Da parameter
.\".B n
.\"is interpreted exactly as wit the
.\".B \-\-nice
.\"option above yo, but up in relation ta tha work thread rather
.\"than tha main thread.
.\"*********************************************************
.TP
.B \-\-fast-io
(Experimental) Optimize TUN/TAP/UDP I/O writes by avoiding
a call ta poll/epoll/select prior ta tha write operation. I aint talkin' bout chicken n' gravy biatch.  Da purpose
of such a cold-ass lil call would normally be ta block until tha device
or socket is locked n loaded ta accept tha write.  Such blockin is unnecessary
on some platforms which don't support write blockin on UDP sockets
or TUN/TAP devices.  In such cases, one can optimize tha event loop
by avoidin tha poll/epoll/select call, pimpin-out CPU efficiency
by 5% ta 10%.

This option can only be used on non-Windows systems, when
.B \-\-proto udp
is specified, n' when
.B \-\-shaper
is NOT specified.
.\"*********************************************************
.TP
.B \-\-multihome
Configure a multi-homed UDP server n' shit.  This option need ta be used when
a server has mo' than one IP address (e.g. multiple intercourses, or
secondary IP addresses), n' aint using
.B \-\-local
to force bindin ta one specific address only.  This option will
add some extra lookups ta tha packet path ta ensure dat tha UDP reply
packets is always busted from tha address dat tha client is
talkin to. This aint supported on all platforms, n' it addz more
processing, so it aint enabled by default.

Note: dis option is only relevant fo' UDP servers.

Note 2: if you do a IPv6+IPv4 dual-stack bind on a Linux machine with
multiple IPv4 address, connections ta IPv4 addresses aint gonna work
right on kernels before 3.15, cuz of missin kernel support fo' the
IPv4-mapped case (some distributions have ported dis ta earlier kernel
versions, though).
.\"*********************************************************
.TP
.B \-\-echo [parms...]
Echo
.B parms
to log output.

Designed ta be used ta bust lyrics ta a cold-ass lil controllin application
which is receivin tha OpenVPN log output.
.\"*********************************************************
.TP
.B \-\-remap-usr1 signal
Control whether internally or externally
generated SIGUSR1 signals is remapped to
SIGHUP (restart without persistin state) or
SIGTERM (exit).

.B signal
can be set ta "SIGHUP" or "SIGTERM".  By default, no remapping
occurs.
.\"*********************************************************
.TP
.B \-\-verb n
Set output verbositizzle to
.B n
(default=1).  Each level shows all info from tha previous levels.
Level 3 is recommended if you want a phat summary
of whatz goin down without bein swamped by output.

.B 0 \-\-
No output except fatal errors.
.br
.B 1 ta 4 \-\-
Normal usage range.
.br
.B 5 \-\-
Output
.B R
and
.B W
charactas ta tha console fo' each packet read n' write, uppercase is
used fo' TCP/UDP packets n' lowercase is used fo' TUN/TAP packets.
.br
.B 6 ta 11 \-\-
Debug info range (see errlevel.h fo' additional
information on debug levels).
.\"*********************************************************
.TP
.B \-\-status file [n]
Write operationizzle status to
.B file
every
.B n
seconds.

Status can also be freestyled ta tha syslog by bustin  a
.B SIGUSR2
signal.
.\"*********************************************************
.TP
.B \-\-status-version [n]
Choose tha status file format version number n' shit.  Currently
.B n
can be 1, 2, or 3 n' defaults ta 1.
.\"*********************************************************
.TP
.B \-\-mute n
Log at most
.B n
consecutizzle lyrics up in tha same category.  This is useful to
limit repetitizzle loggin of similar message types.
.\"*********************************************************
.TP
.B \-\-comp-lzo [mode]
Use fast LZO compression \-\- may add up ta 1 byte per
packet fo' incompressible data.
.B mode
may be "yes", "no", or "adaptive" (default).

In a server mode setup, it is possible ta selectively turn
compression on or off fo' individual clients.

First, make shizzle tha client-side config file enablez selective
compression by havin at least one
.B \-\-comp-lzo
directive, such as
.B \-\-comp-lzo no.
This will turn off compression by default,
but allow a gangbangin' future directizzle push from tha server to
dynamically chizzle the
on/off/adaptizzle setting.

Next up in a
.B \-\-client-config-dir
file, specify tha compression settin fo' tha client,
for example:

.nf
.ft 3
.in +4
comp-lzo yes
push "comp-lzo yes"
.in -4
.ft
.fi

Da first line sets the
.B comp-lzo
settin fo' tha server
side of tha link, tha second sets tha client side.
.\"*********************************************************
.TP
.B \-\-comp-noadapt
When used up in conjunction with
.B \-\-comp-lzo,
this option will disable OpenVPNz adaptizzle compression algorithm.
Normally, adaptizzle compression is enabled with
.B \-\-comp-lzo.

Adaptizzle compression tries ta optimize tha case where you have
compression enabled yo, but yo ass is bustin  predominantly incompressible
(or pre-compressed) packets over tha tunnel, like fuckin a FTP or rsync transfer
of a large, compressed file.  With adaptizzle compression,
OpenVPN will periodically sample tha compression process ta measure its
efficiency.  If tha data bein busted over tha tunnel be already compressed,
the compression efficiency is ghon be straight-up low, triggerin openvpn ta disable
compression fo' a period of time until tha next re-sample test.
.\"*********************************************************
.TP
.B \-\-management IP port [pw-file]
Enable a TCP server on
.B IP:port
to handle daemon pimpment functions.
.B pw-file,
if specified,
is a password file (password on first line)
or "stdin" ta prompt from standard input.  Da password
provided will set tha password which TCP clients will need
to provide up in order ta access pimpment functions.

Da pimpment intercourse can also listen on a unix domain socket,
for dem platforms dat support dat shit.  To bust a unix domain socket, specify
the unix socket pathname up in place of
.B IP
and set
.B port
to 'unix'.  While tha default behavior is ta create a unix domain socket
that may be connected ta by any process, the
.B \-\-management-client-user
and
.B \-\-management-client-group
directives can be used ta restrict access.

Da pimpment intercourse serves up a special mode where tha TCP
management link can operate over tha tunnel itself.  To enable dis mode,
set
.B IP
= "tunnel".  Tunnel mode will cause tha pimpment intercourse
to listen fo' a TCP connection on tha local VPN address of the
TUN/TAP intercourse.

While tha pimpment port is designed fo' programmatic control
of OpenVPN by other applications, it is possible ta telnet
to tha port, rockin a telnet client up in "raw" mode.  Once connected,
type "help" fo' a list of commands.

For detailed documentation on tha pimpment intercourse, see
the pimpment-notes.txt file up in the
.B pimpment
folda of
the OpenVPN source distribution.

It be straight fuckin recommended that
.B IP
be set ta 127.0.0.1
(localhost) ta restrict accessibilitizzle of tha pimpment
server ta local clients, n' you can put dat on yo' toast. 
.TP
.B \-\-management-client
Management intercourse will connect as a TCP/unix domain client to
.B IP:port
specified by
.B \-\-management
rather than listen as a TCP server or on a unix domain socket.

If tha client connection fails ta connect or is disconnected,
a SIGTERM signal is ghon be generated causin OpenVPN ta quit.
.\"*********************************************************
.TP
.B \-\-management-query-passwords
Query pimpment channel fo' private key password and
.B \-\-auth-user-pass
username/password. Y'all KNOW dat shit, muthafucka!  Only query tha pimpment channel
for inputs which ordinarily would done been queried from the
console.
.\"*********************************************************
.TP
.B \-\-management-query-proxy
Query pimpment channel fo' proxy server shiznit fo' a specific
.B \-\-remote
(client-only).
.\"*********************************************************
.TP
.B \-\-management-query-remote
Allow pimpment intercourse ta override
.B \-\-remote
directives (client-only).
.\"*********************************************************
.B \-\-management-external-key
Allows usage fo' external private key file instead of
.B \-\-key
option (client-only).
.\"*********************************************************
.TP
.B \-\-management-forget-disconnect
Make OpenVPN forget passwordz when pimpment session
disconnects.

This directizzle do not affect the
.B \-\-http-proxy
username/password. Y'all KNOW dat shit, muthafucka!  It be always cached.
.\"*********************************************************
.TP
.B \-\-management-hold
Start OpenVPN up in a hibernatin state, until a cold-ass lil client
of tha pimpment intercourse explicitly starts it
with the
.B hold release
command.
.\"*********************************************************
.TP
.B \-\-management-signal
Send SIGUSR1 signal ta OpenVPN if pimpment session disconnects.
This is useful when you wish ta disconnect a OpenVPN session on
user logoff. For --management-client dis option aint needed since
a disconnect will always generate a SIGTERM.
.\"*********************************************************
.TP
.B \-\-management-log-cache n
Cache da most thugged-out recent
.B n
linez of log file history fo' usage
by tha pimpment channel.
.\"*********************************************************
.TP
.B \-\-management-up-down
Report tunnel up/down events ta pimpment intercourse.
.B 
.\"*********************************************************
.TP
.B \-\-management-client-auth
Gives pimpment intercourse client tha responsibility
to authenticate clients afta they client certificate
has been verified. Y'all KNOW dat shit, muthafucka!  See pimpment-notes.txt up in OpenVPN
distribution fo' detailed notes.
.\"*********************************************************
.TP
.B \-\-management-client-pf
Management intercourse clients must specify a packet
filta file fo' each connectin client.  See pimpment-notes.txt
in OpenVPN distribution fo' detailed notes.
.\"*********************************************************
.TP
.B \-\-management-client-user u
When tha pimpment intercourse is listenin on a unix domain socket,
only allow connections from user
.B u.
.\"*********************************************************
.TP
.B \-\-management-client-group g
When tha pimpment intercourse is listenin on a unix domain socket,
only allow connections from group
.B g.
.\"*********************************************************
.TP
.B \-\-plugin module-pathname [init-string]
Load plug-in module from tha file
.B module-pathname,
passing
.B init-string
as a argument
to tha module initialization function. I aint talkin' bout chicken n' gravy biatch.  Multiple
plugin modulez may be loaded tha fuck into one OpenVPN
process.

For mo' shiznit n' examplez on how tha fuck ta build OpenVPN
plug-in modules, peep tha README file up in the
.B plugin
folda of tha OpenVPN source distribution.

If yo ass is rockin a RPM install of OpenVPN, see
/usr/lib64/openvpn/plugin. I aint talkin' bout chicken n' gravy biatch.  Da documentation is
in
.B doc
and tha actual plugin modulez is in
.B lib.

Multiple plugin modulez can be cascaded, n' modulez can be
used up in tandem wit scripts, n' you can put dat on yo' toast.  Da modulez is ghon be called by
OpenVPN up in tha order dat they is declared up in tha config
file.  If both a plugin n' script is configured fo' tha same
callback, tha script is ghon be called last.  If the
return code of tha module/script controls a authentication
function (like fuckin tls-verify, auth-user-pass-verify, or
client-connect), then
every module n' script must return success (0) up in order for
the connection ta be authenticated.
.\"*********************************************************
.SS Server Mode
Startin wit OpenVPN 2.0, a multi-client TCP/UDP server mode
is supported, n' can be enabled wit the
.B \-\-mode server
option. I aint talkin' bout chicken n' gravy biatch.  In server mode, OpenVPN will listen on a single
port fo' incomin client connections.  All client
connections is ghon be routed all up in a single tun or tap
interface.  This mode is designed fo' scalabilitizzle n' should
be able ta support hundredz or even thousandz of clients
on sufficiently fast hardware.  SSL/TLS authentication must
be used up in dis mode.
.\"*********************************************************
.TP
.B \-\-server network netmask ['nopool']
A helper directizzle designed ta simplify tha configuration
of OpenVPNz server mode.  This directizzle will set up an
OpenVPN server which will allocate addresses ta clients
out of tha given network/netmask.  Da server itself
will take tha ".1" address of tha given network
for use as tha server-side endpoint of tha local
TUN/TAP intercourse.

For example,
.B \-\-server 10.8.0.0 255.255.255.0
expandz as bigs up:

.nf
.ft 3
.in +4
 mode server
 tls-server
 push "topologizzle [topology]"

 if dev tun AND (topologizzle == net30 OR topologizzle == p2p):
   ifconfig 10.8.0.1 10.8.0.2
   if !nopool:
     ifconfig-pool 10.8.0.4 10.8.0.251
   route 10.8.0.0 255.255.255.0
   if client-to-client:
     push "route 10.8.0.0 255.255.255.0"
   else if topologizzle == net30:
     push "route 10.8.0.1"

 if dev tap OR (dev tun AND topologizzle == subnet):
   ifconfig 10.8.0.1 255.255.255.0
   if !nopool:
     ifconfig-pool 10.8.0.2 10.8.0.254 255.255.255.0
   push "route-gateway 10.8.0.1"
   if route-gateway unset:
     route-gateway 10.8.0.2

.in -4
.ft
.fi

Don't use
.B \-\-server
if yo ass is ethernet bridging.  Use
.B \-\-server-bridge
instead.
.\"*********************************************************
.TP
.B \-\-server-bridge gateway netmask pool-start-IP pool-end-IP
.TP
.B \-\-server-bridge ['nogw']

A helper directizzle similar to
.B \-\-server
which is designed ta simplify tha configuration
of OpenVPNz server mode up in ethernet bridgin configurations.

If
.B \-\-server-bridge
is used without any parameters, it will enable a DHCP-proxy
mode, where connectin OpenVPN clients will receive a IP
address fo' they TAP adapta from tha DHCP server hustlin
on tha OpenVPN server-side LAN.
Note dat only clients dat support
the bindin of a DHCP client wit tha TAP adapta (such as
Windows) can support dis mode.  Da optionizzle 
.B nogw
flag (advanced) indicates dat gateway shiznit should not be
pushed ta tha client.

To configure ethernet bridging, you 
must first use yo' OSz bridgin capability
to bridge tha TAP intercourse wit tha ethernet
NIC intercourse.  For example, on Linux dis is done
with the
.B brctl
tool, n' wit Windows XP it is done up in tha Network
Connections Panel by selectin tha ethernet and
TAP adaptas n' right-clickin on "Bridge Connections".

Next you you must manually set the
IP/netmask on tha bridge intercourse.  The
.B gateway
and
.B netmask
parametas to
.B \-\-server-bridge
can be set ta either tha IP/netmask of the
bridge intercourse, or tha IP/netmask of the
default gateway/routa on tha bridged
subnet.

Finally, set aside a IP range up in tha bridged
subnet,
denoted by
.B pool-start-IP
and
.B pool-end-IP,
for OpenVPN ta allocate ta connecting
clients.

For example,
.B server-bridge 10.8.0.4 255.255.255.0 10.8.0.128 10.8.0.254
expandz as bigs up:

.nf
.ft 3
.in +4
mode server
tls-server

ifconfig-pool 10.8.0.128 10.8.0.254 255.255.255.0
push "route-gateway 10.8.0.4"
.in -4
.ft
.fi

In another example,
.B \-\-server-bridge
(without parameters) expandz as bigs up:

.nf
.ft 3
.in +4
mode server
tls-server

push "route-gateway dhcp"
.in -4
.ft
.fi

Or
.B \-\-server-bridge nogw
expandz as bigs up:

.nf
.ft 3
.in +4
mode server
tls-server
.in -4
.ft
.fi
.\"*********************************************************
.TP
.B \-\-push "option"
Push a cold-ass lil config file option back ta tha client fo' remote
execution. I aint talkin' bout chicken n' gravy biatch.  Note that
.B
option
must be enclosed up in double quotes ("").  Da client must specify
.B \-\-pull
in its config file.  Da set of options which can be
pushed is limited by both feasibilitizzle n' security.
Some options like fuckin dem which would execute scripts
are banned, since they would effectively allow a cold-ass lil compromised
server ta execute arbitrary code on tha client.
Other options like fuckin TLS or MTU parameters
cannot be pushed cuz tha client need ta know
them before tha connection ta tha server can be initiated.

This be a partial list of options which can currently be pushed:
.B \-\-route, \-\-route-gateway, \-\-route-delay, \-\-redirect-gateway,
.B \-\-ip-win32, \-\-dhcp-option,
.B \-\-inactive, \-\-ping, \-\-ping-exit, \-\-ping-restart,
.B \-\-setenv,
.B \-\-persist-key, \-\-persist-tun, \-\-echo,
.B \-\-comp-lzo,
.B \-\-socket-flags,
.B \-\-sndbuf, \-\-rcvbuf
.\"*********************************************************
.TP
.B \-\-push-reset
Don't inherit tha global push list fo' a specific client instance.
Specify dis option up in a cold-ass lil client-specific context such
as wit a
.B \-\-client-config-dir
configuration file.  This option will ignore
.B \-\-push
options all up in tha global config file level.
.TP
.B \-\-push-peer-info
Push additionizzle shiznit bout tha client ta server n' shit.  Da additionizzle shiznit
consistz of tha followin data:

IV_VER=<version> -- tha client OpenVPN version

IV_PLAT=[linux|solaris|openbsd|mac|netbsd|freebsd|win] -- tha client OS platform

IV_HWADDR=<mac address> -- tha MAC address of clients default gateway

IV_LZO_STUB=1 -- if client was built wit LZO stub capability

UV_<name>=<value> -- client environment variablez whose names start wit "UV_"
.\"*********************************************************
.TP
.B \-\-disable
Disable a particular client (based on tha common name)
from connecting.  Don't use dis option ta disable a cold-ass lil client
due ta key or password compromise.  Use a CRL (certificate
revocation list) instead (see the
.B \-\-crl-verify
option).

This option must be associated wit a specific client instance,
which means dat it must be specified either up in a cold-ass lil client
instizzle config file using
.B \-\-client-config-dir
or dynamically generated rockin a
.B \-\-client-connect
script.
.\"*********************************************************
.TP
.B \-\-ifconfig-pool start-IP end-IP [netmask]
Set aside a pool of subnets ta be
dynamically allocated ta connectin clients, similar
to a DHCP server n' shit.  For tun-style
tunnels, each client is ghon be given a /30 subnet (for
interoperabilitizzle wit Windows clients).  For tap-style
tunnels, individual addresses is ghon be allocated, n' the
optional
.B netmask
parameta will also be pushed ta clients.

.\"*********************************************************
.TP
.B \-\-ifconfig-pool-persist file [seconds]
Persist/unpersist ifconfig-pool
data to
.B file,
at
.B seconds
intervals (default=600), as well as on program startup and
shutdown.

Da goal of dis option is ta provide a long-term association
between clients (denoted by they common name) n' tha virtual
IP address assigned ta dem from tha ifconfig-pool.
Maintainin a long-term
association is phat fo' clients cuz it allows them
to effectively use the
.B \-\-persist-tun
option.

.B file
is a cold-ass lil comma-delimited ASCII file, formatted as
<Common-Name>,<IP-address>.

If
.B seconds
= 0,
.B file
will be treated as read-only.  This is useful if
you wanna treat
.B file
as a cold-ass lil configuration file.

Note dat tha entries up in dis file is treated by OpenVPN as
suggestions only, based on past associations between
a common name n' IP address.  They do not guarantee dat tha given common
name will always receive tha given IP address.  If you want guaranteed
assignment, use
.B \-\-ifconfig-push
.\"*********************************************************
.TP
.B \-\-ifconfig-pool-linear
Modifies the
.B \-\-ifconfig-pool
directizzle to
allocate individual TUN intercourse addresses for
clients rather than /30 subnets, n' you can put dat on yo' toast.  NOTE:  This option
is incompatible wit Windows clients.

This option is deprecated, n' should be replaced with
.B \-\-topologizzle p2p
which is functionally equivalent.
.\"*********************************************************
.TP
.B \-\-ifconfig-push local remote-netmask [alias]
Push virtual IP endpoints fo' client tunnel,
overridin tha \-\-ifconfig-pool dynamic allocation.

Da parameters
.B local
and
.B remote-netmask
are set accordin ta the
.B \-\-ifconfig
directizzle which you wanna execute on tha client machine to
configure tha remote end of tha tunnel.  Note dat tha parameters
.B local
and
.B remote-netmask
are from tha perspectizzle of tha client, not tha server n' shit.  They may be
DNS names rather than IP addresses, up in which case they is ghon be resolved
on tha server all up in tha time of client connection.

Da optional
.B alias
parameta may be used up in cases where NAT causes tha client view
of its local endpoint ta differ from tha server view.  In dis case
.B local/remote-netmask
will refer ta tha server view while
.B alias/remote-netmask
will refer ta tha client view.

This option must be associated wit a specific client instance,
which means dat it must be specified either up in a cold-ass lil client
instizzle config file using
.B \-\-client-config-dir
or dynamically generated rockin a
.B \-\-client-connect
script.

Remember also ta include a
.B \-\-route
directizzle up in tha main OpenVPN config file which encloses
.B local,
so dat tha kernel will know ta route it
to tha serverz TUN/TAP intercourse.

OpenVPNz internal client IP address selection algorithm works as
bigs up:

.B 1
\-\- Use
.B \-\-client-connect script
generated file fo' static IP (first chizzle).
.br
.B 2
\-\- Use
.B \-\-client-config-dir
file fo' static IP (next chizzle).
.br
.B 3
\-\- Use
.B \-\-ifconfig-pool
allocation fo' dynamic IP (last chizzle).
.br
.\"*********************************************************
.TP
.B \-\-iroute network [netmask]
Generate a internal route ta a specific
client. The
.B netmask
parameter, if omitted, defaults ta 255.255.255.255.

This directizzle can be used ta route a gangbangin' fixed subnet from
the server ta a particular client, regardless
of where tha client is connectin from.  Remember
that you must also add tha route ta tha system
routin table as well (like fuckin by rockin the
.B \-\-route
directive).  Da reason why two routes is needed
is dat the
.B \-\-route
directizzle routes tha packet from tha kernel
to OpenVPN.  Once up in OpenVPN, the
.B \-\-iroute
directizzle routes ta tha specific client.

This option must be specified either up in a cold-ass lil client
instizzle config file using
.B \-\-client-config-dir
or dynamically generated rockin a
.B \-\-client-connect
script.

The
.B \-\-iroute
directizzle also has a blingin interaction with
.B \-\-push
"route ...".
.B \-\-iroute
essentially defines a subnet which is owned by a
particular client (we will call dis client A).
If you wanna other clients ta be able ta reach A's
subnet, you can use
.B \-\-push
"route ..."
together with
.B \-\-client-to-client
to effect all dis bullshit.  In order fo' all clients ta see
Az subnet, OpenVPN must push dis route ta all clients
EXCEPT fo' A, since tha subnet be already owned by A.
OpenVPN accomplishes dis by not
not pushin a route ta a cold-ass lil client
if it matches one of tha clientz iroutes.
.\"*********************************************************
.TP
.B \-\-client-to-client
Because tha OpenVPN server mode handlez multiple clients
all up in a single tun or tap intercourse, it is effectively
a router n' shit.  The
.B \-\-client-to-client
flag  drops some lyrics ta OpenVPN ta internally route client-to-client
traffic rather than pushin all client-originatin traffic
to tha TUN/TAP intercourse.

When dis option is used, each client will "see" tha other
clients which is currently connected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Otherwise, each
client will only peep tha server n' shit.  Don't use dis option
if you wanna firewall tunnel traffic using
custom, per-client rules.
.\"*********************************************************
.TP
.B \-\-duplicate-cn
Allow multiple clients wit tha same common name ta concurrently connect.
In tha absence of dis option, OpenVPN will disconnect a cold-ass lil client instance
upon connection of a freshly smoked up client havin tha same common name.
.\"*********************************************************
.TP
.B \-\-client-connect cmd
Run
.B command cmd
on client connection.

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

Da command is passed tha common name
and IP address of tha just-authenticated client
as environmenstrual variablez (see environmenstrual variable section
below).  Da command be also passed
the pathname of a gangbangin' freshly pimped temporary file as tha last argument
(afta any arguments specified in
.B cmd
), ta be used by tha command
to pass dynamically generated config file directives back ta OpenVPN.

If tha script wants ta generate a thugged-out dynamic config file
to be applied on tha server when tha client connects,
it should write it ta tha file named by tha last argument.

See the
.B \-\-client-config-dir
option below fo' options which
can be legally used up in a thugged-out dynamically generated config file.

Note dat tha return value of
.B script
is significant.  If
.B script
returns a non-zero error status, it will cause tha client
to be disconnected.
.\"*********************************************************
.TP
.B \-\-client-disconnect cmd
Like
.B \-\-client-connect
but called on client instizzle shutdown. I aint talkin' bout chicken n' gravy biatch.  Will not be called
unless the
.B \-\-client-connect
script n' plugins (if defined)
were previously called on dis instizzle with
successful (0) status returns.

Da exception ta dis rule is if the
.B \-\-client-disconnect
command or plugins is cascaded, n' at least one client-connect
function succeeded, then ALL of tha client-disconnect functions for
scripts n' plugins is ghon be called on client instizzle object deletion,
even up in cases where a shitload of tha related client-connect functions returned
an error status.

The
.B \-\-client-disconnect
command is passed tha same pathname as tha corresponding
.B \-\-client-connect
command as its last argument. (afta any arguments specified in
.B cmd
).
.B 
.\"*********************************************************
.TP
.B \-\-client-config-dir dir
Specify a gangbangin' finger-lickin' directory
.B dir
for custom client config files.  After
a connectin client has been authenticated, OpenVPN will
look up in dis directory fo' a gangbangin' file havin tha same name
as tha clientz X509 common name.  If a matchin file
exists, it is ghon be opened n' parsed fo' client-specific
configuration options.  If no matchin file is found, OpenVPN
will instead try ta open n' parse a thugged-out default file called
"DEFAULT", which may be provided but aint required. Y'all KNOW dat shit, muthafucka! Note that
the configuration filez must be readable by tha OpenVPN process
afta it has dropped itz root privileges.

This file can specify a gangbangin' fixed IP address fo' a given
client using
.B \-\-ifconfig-push,
as well as fixed subnets owned by tha client using
.B \-\-iroute.

One of tha useful propertizzlez of dis option is dat it
allows client configuration filez ta be conveniently
created, edited, or removed while tha server is live,
without needin ta restart tha server.

Da following
options is legal up in a cold-ass lil client-specific context:
.B \-\-push, \-\-push-reset, \-\-iroute, \-\-ifconfig-push,
and
.B \-\-config.
.\"*********************************************************
.TP
.B \-\-ccd-exclusive
Require, as a
condizzle of authentication, dat a cold-ass lil connectin client has a
.B \-\-client-config-dir
file.
.\"*********************************************************
.TP
.B \-\-tmp-dir dir
Specify a gangbangin' finger-lickin' directory
.B dir
for temporary files.  This directory is ghon be used by
openvpn processes n' script ta rap temporary
data wit openvpn main process. Note that
the directory must be writable by tha OpenVPN process
afta it has dropped itz root privileges.

This directory is ghon be used by up in tha followin cases:

*
.B \-\-client-connect
scripts ta dynamically generate client-specific
configuration files.

*
.B OPENVPN_PLUGIN_AUTH_USER_PASS_VERIFY
plugin hook ta return success/failure via auth_control_file
when rockin deferred auth method

*
.B OPENVPN_PLUGIN_ENABLE_PF
plugin hook ta pass filterin rulez via pf_file
.\"*********************************************************
.TP
.B \-\-hash-size r v
Set tha size of tha real address hash table to
.B r
and tha virtual address table to
.B v.
By default, both tablez is sized at 256 buckets.
.\"*********************************************************
.TP
.B \-\-bcast-buffers n
Allocate
.B n
buffers fo' broadcast datagrams (default=256).
.\"*********************************************************
.TP
.B \-\-tcp-queue-limit n
Maximum number of output packets queued before TCP (default=64).

When OpenVPN is tunnelin data from a TUN/TAP thang ta a
remote client over a TCP connection, it is possible dat tha TUN/TAP device
might produce data at a gangbangin' fasta rate than tha TCP connection
can support.  When tha number of output packets queued before bustin  to
the TCP socket reaches dis limit fo' a given client connection,
OpenVPN will start ta drop outgoin packets directed
at dis client.
.\"*********************************************************
.TP
.B \-\-tcp-nodelay
This macro sets tha TCP_NODELAY socket flag on tha server
as well as pushes it ta connectin clients, n' you can put dat on yo' toast.  Da TCP_NODELAY
flag disablez tha Nagle algorithm on TCP sockets causing
packets ta be transmitted immediately wit low latency,
rather than waitin a gangbangin' finger-lickin' dirty-ass short period of time up in order
to aggregate nuff muthafuckin packets tha fuck into a larger containing
packet.  In VPN applications over TCP, TCP_NODELAY
is generally a phat latency optimization.

Da macro expandz as bigs up:

.nf
.ft 3
.in +4
 if mode server:
   socket-flags TCP_NODELAY
   push "socket-flags TCP_NODELAY"
.in -4
.ft
.fi
.\"*********************************************************
.TP
.B \-\-max-clients n
Limit server ta a maximum of
.B n
concurrent clients.
.\"*********************************************************
.TP
.B \-\-max-routes-per-client n
Allow a maximum of
.B n
internal routes per client (default=256).
This is designed to
help contain DoS attacks where a authenticated client floodz the
server wit packets appearin ta come from nuff unique MAC addresses,
forcin tha server ta deplete
virtual memory as its internal routin table expands.
This directizzle can be used up in a
.B \-\-client-config-dir
file or auto-generated by a
.B \-\-client-connect
script ta override tha global value fo' a particular client.

Note dat this
directizzle affects OpenVPNz internal routin table, not the
kernel routin table.
.\"*********************************************************
.TP
.B \-\-stale-routes-check n [t]
Remove routes aint had activitizzle for
.B n
secondz (i.e. tha agein time).

This check is ran every
.B t
secondz (i.e. check interval).

If
.B t
is not present it defaults to
.B n

This option helps ta keep tha dynamic routin table small.
See also
.B \-\-max-routes-per-client
.\"*********************************************************
.TP
.B \-\-connect-freq n sec
Allow a maximum of
.B n
new connections per
.B sec 
secondz from clients, n' you can put dat on yo' toast.  This is designed ta contain DoS attacks which flood
the server wit connection requests rockin certificates which
will ultimately fail ta authenticate.

This be a imslick solution however, cuz up in a real
DoS scenario, legitimate connections might also be refused.

For tha dopest protection against DoS attacks up in server mode,
use
.B \-\-proto udp
and
.B \-\-tls-auth.
.\"*********************************************************
.TP
.B \-\-learn-address cmd
Run command
.B cmd
to validate client virtual addresses or routes.

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

Three arguments is ghon be appended ta any arguments in
.B cmd
as bigs up:

.B [1] operation \-\-
"add", "update", or "delete" based on whether or not
the address is bein added to, modified, or deleted from
OpenVPNz internal routin table.
.br
.B [2] address \-\-
Da address bein hustled or unlearned. Y'all KNOW dat shit, muthafucka!  This can be
an IPv4 address like fuckin "198.162.10.14", a IPv4 subnet
like fuckin "198.162.10.0/24", or a ethernet MAC address (when
.B \-\-dev tap
is bein used) like fuckin "00:FF:01:02:03:04".
.br
.B [3] common name \-\-
Da common name on tha certificate associated wit the
client linked ta dis address.  Only present fo' "add"
or "update" operations, not "delete".

On "add" or "update" methods, if tha script returns
a failure code (non-zero), OpenVPN will reject tha address
and aint gonna modify its internal routin table.

Normally, the
.B cmd
script will use tha shiznit provided above ta set
appropriate firewall entries on tha VPN TUN/TAP intercourse.
Since OpenVPN serves up tha association between virtual IP
or MAC address n' tha clientz authenticated common name,
it allows a user-defined script ta configure firewall access
policies wit regard ta tha clientz high-level common name,
rather than tha low level client virtual addresses.
.\"*********************************************************
.TP
.B \-\-auth-user-pass-verify cmd method
Require tha client ta provide a username/password (possibly
in addizzle ta a cold-ass lil client certificate) fo' authentication.

OpenVPN will run
.B command cmd
to validate tha username/password
provided by tha client.

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

If
.B method
is set ta "via-env", OpenVPN will call
.B script
with tha environmenstrual variables
.B username
and
.B password
set ta tha username/password strings provided by tha client.
Be aware dat dis method is insecure on some platforms which
make tha environment of a process publicly visible ta other
unprivileged processes.

If
.B method
is set ta "via-file", OpenVPN will write tha username and
password ta tha straight-up original gangsta two linez of a temporary file.  Da filename
will be passed as a argument to
.B script,
and tha file is ghon be automatically deleted by OpenVPN after
the script returns.  Da location of tha temporary file is
controlled by the
.B \-\-tmp-dir
option, n' will default ta tha current directory if unspecified.
For security, consider settin 
.B \-\-tmp-dir
to a volatile storage medium such as
.B /dev/shm
(if available) ta prevent tha username/password file from touchin tha hard drive.

Da script should examine tha username
and password,
returnin a success exit code (0) if the
clientz authentication request is ta be accepted, or a gangbangin' failure
code (1) ta reject tha client.

This directizzle is designed ta enable a plugin-style intercourse
for extendin OpenVPNz authentication capabilities.

To protect against a cold-ass lil client passin a maliciously formed
username or password string, tha username strang must
consist only of these characters: alphanumeric, underbar
('_'), dash ('-'), dot ('.'), or at ('@').  Da password
strin can consist of any printable charactas except for
CR or LF.  Any illegal charactas up in either tha username
or password strang is ghon be converted ta underbar ('_').

Care must be taken by any user-defined scripts ta avoid
bustin a securitizzle vulnerabilitizzle up in tha way dat these
strings is handled. Y'all KNOW dat shit, muthafucka!  Never use these strings up in such a way
that they might be escaped or evaluated by a gangbangin' finger-lickin' dirty-ass shell interpreter.

For a sample script dat performs PAM authentication, see
.B sample-scripts/auth-pam.pl
in tha OpenVPN source distribution.
.\"*********************************************************
.TP
.B \-\-opt-verify
Clients dat hook tha fuck up wit options dat is incompatible
with dem of tha server is ghon be disconnected.

Options dat is ghon be compared fo' compatibilitizzle include
dev-type, link-mtu, tun-mtu, proto, tun-ipv6, ifconfig,
comp-lzo, fragment, keydir, cipher, auth, keysize, secret,
no-replay, no-iv, tls-auth, key-method, tls-server, n' tls-client.

This option requires that
.B \-\-disable-occ
NOT be used.
.\"*********************************************************
.TP
.B \-\-auth-user-pass-optional
Allow connections by clients dat do not specify a username/password.
Normally, when
.B \-\-auth-user-pass-verify
or
.B \-\-management-client-auth
is specified (or a authentication plugin module), the
OpenVPN server daemon will require connectin clients ta specify a
username n' password. Y'all KNOW dat shit, muthafucka!  This option make tha submission of a username/password
by clients optional, passin tha responsibilitizzle ta tha user-defined authentication
module/script ta accept or deny tha client based on other factors
(like fuckin tha settin of X509 certificate fields).  When dis option is used,
and a cold-ass lil connectin client do not submit a username/password, tha user-defined
authentication module/script will peep tha username n' password as bein set
to empty strings ("").  Da authentication module/script MUST have logic
to detect dis condizzle n' respond accordingly.
.\"*********************************************************
.TP
.B \-\-client-cert-not-required
Don't require client certificate, client will authenticate
usin username/password only.  Be aware dat rockin dis directive
is less secure than requirin certificates from all clients.

If you use dis directive, the
entire responsibilitizzle of authentication will rest on your
.B \-\-auth-user-pass-verify
script, so keep up in mind dat bugs up in yo' script
could potentially compromise tha securitizzle of yo' VPN.

If you don't use dis directizzle yo, but you also specify an
.B \-\-auth-user-pass-verify
script, then OpenVPN will big-ass up double authentication. I aint talkin' bout chicken n' gravy biatch.  The
client certificate verification AND the
.B \-\-auth-user-pass-verify
script will need ta succeed up in order fo' a cold-ass lil client ta be
authenticated n' accepted onto tha VPN.
.\"*********************************************************
.TP
.B \-\-username-as-common-name
For
.B \-\-auth-user-pass-verify
authentication, use
the authenticated username as tha common name,
rather than tha common name from tha client cert.
.\"*********************************************************
.TP
.B \-\-compat\-names [no\-remapping] (DEPRECATED)
Until OpenVPN v2.3 tha format of tha X.509 Subject fieldz was formatted
like this:
.IP
.B
/C=US/L=Somewhere/CN=Jizzy Doe/emailAddress=john@example.com
.IP
In addizzle tha oldschool behaviour was ta remap any characta other than
alphanumeric, underscore ('_'), dash ('-'), dot ('.'), n' slash ('/') to
underscore ('_').  Da X.509 Subject strang as returned by the
.B tls_id
environmenstrual variable, could additionally contain colon (':') or equal ('=').
.IP
When rockin the
.B \-\-compat\-names
option, dis oldschool formattin n' remappin is ghon be re-enabled again. I aint talkin' bout chicken n' gravy biatch.  This is
purely implemented fo' compatibilitizzle reasons when rockin olda plug-ins or
scripts which do not handle tha freshly smoked up formattin or UTF-8 characters.
.IP
In OpenVPN v2.3 tha formattin of these fieldz chizzled tha fuck into a more
standardised format.  It now looks like:
.IP
.B
C=US, L=Somewhere, CN=Jizzy Doe, emailAddress=john@example.com
.IP
Da freshly smoked up default format up in OpenVPN v2.3 also do not do tha characta remapping
which happened earlier n' shit.  This freshly smoked up format enablez proper support fo' UTF\-8
charactas up in tha usernames, X.509 Subject fieldz n' Common Name variablez and
it complies ta tha RFC 2253, UTF\-8 Strin Representation of Distinguished
Names.

The
.B no\-remapping
mode flag can be used wit the
.B
\-\-compat\-names
option ta be compatible wit tha now deprecated \-\-no\-name\-remappin option.
It be only available all up in tha server n' shit. When dis mode flag is used, tha Common Name,
Subject, n' username strings is allowed ta include any printable character
includin space yo, but excludin control charactas like fuckin tab, newline, and
carriage-return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. no-remappin is only available on tha server side.

.B Please note:
This option is immediately deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It be only implemented
to make tha transizzle ta tha freshly smoked up formattin less intrusive.  It will be
removed either up in OpenVPN v2.4 or v2.5.  So please make shizzle you use the
.B \-\-verify-x509-name
option instead of
.B \-\-tls-remote
as soon as possible n' update yo' scripts where necessary.
.\"*********************************************************
.TP
.B \-\-no\-name\-remappin (DEPRECATED)
The
.B \-\-no\-name\-remapping
option be a alias for
.B \-\-compat\-names\ no\-remapping.
It ensures compatibilitizzle wit server configurations rockin the
.B \-\-no\-name\-remapping
option.

.B Please note:
This option is now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It is ghon be removed either up in OpenVPN v2.4
or v2.5.  So please make shizzle you support tha freshly smoked up X.509 name formatting
busted lyrics bout wit the
.B \-\-compat\-names
option quicker than a muthafucka.
.\"*********************************************************
.TP
.B \-\-port-share host port [dir]
When run up in TCP server mode, share tha OpenVPN port with
another application, like fuckin a HTTPS server n' shit.  If OpenVPN
senses a cold-ass lil connection ta its port which is rockin a non-OpenVPN
protocol, it will proxy tha connection ta tha server at
.B host:port.
Currently only designed ta work wit HTTP/HTTPS,
though it would be theoretically possible ta extend to
other protocols like fuckin ssh.

.B dir
specifies a optionizzle directory where a temporary file wit name N
containin content C is ghon be dynamically generated fo' each proxy
connection, where N is tha source IP:port of tha client connection
and C is tha source IP:port of tha connection ta tha proxy
receiver n' shit.  This directory can be used as a gangbangin' finger-lickin' doggtionary by
the proxy receiver ta determine tha origin of tha connection.
Each generated file is ghon be automatically deleted when tha proxied
connection is torn down.

Not implemented on Windows.
.\"*********************************************************
.SS Client Mode
Use client mode when connectin ta a OpenVPN server
which has
.B \-\-server, \-\-server-bridge,
or
.B \-\-mode server
in itz configuration.
.\"*********************************************************
.TP
.B \-\-client
A helper directizzle designed ta simplify tha configuration
of OpenVPNz client mode.  This directizzle is equivalent to:

.nf
.ft 3
.in +4
 pull
 tls-client
.in -4
.ft
.fi
.\"*********************************************************
.TP
.B \-\-pull
This option must be used on a cold-ass lil client which is connecting
to a multi-client server n' shit.  It indicates ta OpenVPN dat it
should accept options pushed by tha server, provided they
are part of tha legal set of pushable options (note dat the
.B \-\-pull
option is implied by
.B \-\-client
).

In particular,
.B \-\-pull
allows tha server ta push routes ta tha client, so you should
not use
.B \-\-pull
or
.B \-\-client
in thangs where you don't trust tha server ta have control
over tha clientz routin table.
.\"*********************************************************
.TP
.B \-\-auth-user-pass [up]
Authenticate wit server rockin username/password.
.B up
is a gangbangin' file containin username/password on 2 lines (Note: OpenVPN
will only read passwordz from a gangbangin' file if it has been built
with tha \-\-enable-password-save configure option, or on Windows
by definin ENABLE_PASSWORD_SAVE up in win/settings.in).

If
.B up
is omitted, username/password is ghon be prompted from the
console.

Da server configuration must specify an
.B \-\-auth-user-pass-verify
script ta verify tha username/password provided by
the client.
.\"*********************************************************
.TP
.B \-\-auth-retry type
Controls how tha fuck OpenVPN respondz ta username/password verification
errors like fuckin tha client-side response ta a AUTH_FAILED message from tha server
or verification failure of tha private key password.

Normally used ta prevent auth errors from bein fatal
on tha client side, n' ta permit username/password requeries up in case
of error.

An AUTH_FAILED message is generated by tha server if tha client
fails
.B \-\-auth-user-pass
authentication, or if tha server-side
.B \-\-client-connect
script returns a error status when tha client
tries ta connect.

.B type
can be one of:

.B none \-\-
Client will exit wit a gangbangin' fatal error (this is tha default).
.br
.B nointeract \-\-
Client will retry tha connection without requeryin fo' an
.B \-\-auth-user-pass
username/password. Y'all KNOW dat shit, muthafucka!  Use dis option fo' unattended clients.
.br
.B interact \-\-
Client will requery fo' an
.B \-\-auth-user-pass
username/password and/or private key password before attemptin a reconnection.

Note dat while dis option cannot be pushed, it can be controlled
from tha pimpment intercourse.
.\"*********************************************************
.TP
.B \-\-static\-challenge t e
Enable static challenge/response protocol rockin challenge text
.B t,
with
echo flag given by
.B e
(0|1).

Da echo flag indicates whether or not tha userz response
to tha challenge should be echoed.

See pimpment\-notes.txt up in tha OpenVPN distribution fo' a
description of tha OpenVPN challenge/response protocol.
.\"*********************************************************
.TP
.B \-\-server-poll-timeout n
when pollin possible remote servers ta connect to
in a round-robin fashion, spend no mo' than
.B n
secondz waitin fo' a response before tryin tha next server.
.\"*********************************************************
.TP
.B \-\-explicit-exit-notify [n]
In UDP client mode or point-to-point mode, bust server/peer a exit notification
if tunnel is restarted or OpenVPN process is exited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In client mode, on
exit/restart, this
option will tell tha server ta immediately close its client instizzle object
rather than waitin fo' a timeout.  The
.B n
parameta (default=1) controls tha maximum number of attempts dat tha client
will try ta resend tha exit notification message.  OpenVPN aint gonna bust any exit
notifications unless dis option is enabled.
.\"*********************************************************
.SS Data Channel Encryption Options:
These options is meaningful fo' both Static & TLS-negotiated key modes
(must be compatible between peers).
.\"*********************************************************
.TP
.B \-\-secret file [direction]
Enable Static Key encryption mode (non-TLS).
Use pre-shared secret
.B file
which was generated with
.B \-\-genkey.

Da optional
.B direction
parameta enablez tha use of 4 distinct keys
(HMAC-send, cipher-encrypt, HMAC-receive, cipher-decrypt), so that
each data flow direction has a gangbangin' finger-lickin' different set of HMAC n' cipher keys.
This has a fuckin shitload of desirable securitizzle propertizzles including
eliminatin certain kindz of DoS n' message replay attacks.

When the
.B direction
parameta is omitted, 2 keys is used bidirectionally, one fo' HMAC
and tha other fo' encryption/decryption.

The
.B direction
parameta should always be complementary on either side of tha connection,
i.e. one side should use "0" n' tha other should use "1", or both sides
should omit it altogether.

The
.B direction
parameta requires that
.B file
gotz nuff a 2048 bit key.  While pre-1.5 versionz of OpenVPN
generate 1024 bit key files, any version of OpenVPN which
supports the
.B direction
parameter, will also support 2048 bit key file generation
usin the
.B \-\-genkey
option.

Static key encryption mode has certain advantages,
the primary bein ease of configuration.

There is no certificates
or certificate authoritizzles or fucked up negotiation handshakes n' protocols.
Da only requirement is dat you gotz a pre-existin secure channel with
your peer (such as
.B ssh
) ta initially copy tha key.  This requirement, along wit the
fact dat yo' key never chizzlez unless you manually generate a freshly smoked up one,
makes it somewhat less secure than TLS mode (see below).  If a attacker
manages ta loot yo' key, every last muthafuckin thang dat was eva encrypted with
it is compromised. Y'all KNOW dat shit, muthafucka!  Contrast dat ta tha slick forward secrecy features of
TLS mode (usin Diffie Hellman key exchange), where even if a attacker
was able ta loot yo' private key, da thug would bust no shiznit ta help
him decrypt past sessions.

Another advantageous aspect of Static Key encryption mode is that
it be a handshake-free protocol 
without any distinguishin signature or feature
(like fuckin a header or protocol handshake sequence) 
that would mark tha ciphertext packets as being
generated by OpenVPN.  Every Muthafucka eavesdroppin on tha wire
would peep nothing
but random-lookin data.
.\"*********************************************************
.TP
.B \-\-key-direction
Alternatizzle way of specifyin tha optionizzle direction parameta fo' the
.B \-\-tls-auth
and
.B \-\-secret
options. Useful when rockin inline filez (See section on inline files).
.\"*********************************************************
.TP
.B \-\-auth alg
Authenticate packets wit HMAC rockin message
digest algorithm
.B alg.
(Da default is
.B SHA1
).
HMAC be a cold-ass lil commonly used message authentication algorithm (MAC) dat uses
a data string, a secure hash algorithm, n' a key, ta produce
a digital signature.

OpenVPNz usage of HMAC is ta first encrypt a packet, then HMAC tha resultin ciphertext.

In static-key encryption mode, tha HMAC key
is included up in tha key file generated by
.B \-\-genkey.
In TLS mode, tha HMAC key is dynamically generated n' shared
between peers via tha TLS control channel.  If OpenVPN receives a packet with
a wack HMAC it will drop tha packet.
HMAC probably addz 16 or 20 bytes per packet.
Set
.B alg=none
to disable authentication.

For mo' shiznit on HMAC see
.I http://www.cs.ucsd.edu/users/mihir/papers/hmac.html
.\"*********************************************************
.TP
.B \-\-cipher alg
Encrypt packets wit cipher algorithm
.B alg.
Da default is
.B BF-CBC,
an abbreviation fo' Blowfish up in Cipher Block Chainin mode.
Blowfish has tha advantagez of bein fast, straight-up secure, n' allowin key sizes
of up ta 448 bits, n' you can put dat on yo' toast.  Blowfish is designed ta be used up in thangs where
keys is chizzled infrequently.

For mo' shiznit on blowfish, see
.I http://www.counterpane.com/blowfish.html

To peep other ciphers dat is available with
OpenVPN, use the
.B \-\-show-ciphers
option.

OpenVPN supports tha CBC, CFB, n' OFB cipher modes,
however STD is recommended n' CFB n' OFB should
be considered advanced modes.

Set
.B alg=none
to disable encryption.
.\"*********************************************************
.TP
.B \-\-keysize n
Size of cipher key up in bits (optional).
If unspecified, defaults ta cipher-specific default.  The
.B \-\-show-ciphers
option (see below) shows all available OpenSSL ciphers,
their default key sizes, n' whether tha key size can
be chizzled. Y'all KNOW dat shit, muthafucka!  Use care up in changin a cold-ass lil cipherz default
key size.  Many ciphers aint been extensively
cryptanalyzed wit non-standard key lengths, n' a
larger key may offer no real guarantee of pimped outer
security, or may even reduce security.
.\"*********************************************************
.TP
.B \-\-prng alg [nsl]
(Advanced) For PRNG (Pseudo-random number generator),
use digest algorithm
.B alg
(default=sha1), n' set
.B nsl
(default=16)
to tha size up in bytez of tha nonce secret length (between 16 n' 64).

Set
.B alg=none
to disable tha PRNG n' use tha OpenSSL RAND_bytes function
instead fo' all of OpenVPNz pseudo-random number needs.
.\"*********************************************************
.TP
.B \-\-engine [engine-name]
Enable OpenSSL hardware-based crypto engine functionality.

If
.B engine-name
is specified,
use a specific crypto engine.  Use the
.B \-\-show-engines
standalone option ta list tha crypto engines which are
supported by OpenSSL.
.\"*********************************************************
.TP
.B \-\-no-replay
(Advanced) Disable OpenVPNz protection against replay attacks.
Don't use dis option unless yo ass is prepared ta make
a tradeoff of pimped outa efficiency up in exchange fo' less
security.

OpenVPN serves up datagram replay protection by default.

Replay protection be accomplished
by taggin each outgoin datagram wit a identifier
that is guaranteed ta be unique fo' tha key bein used.
Da peer dat receives tha datagram will check for
the uniquenizz of tha identifier n' shit.  If tha identifier
was already received up in a previous datagram, OpenVPN
will drop tha packet.  Replay protection is blingin
to defeat attacks like fuckin a SYN flood attack, where
the attacker listens up in tha wire, intercepts a TCP
SYN packet (identifyin it by tha context up in which
it occurs up in relation ta other packets), then floods
the receivin peer wit copiez of dis packet.

OpenVPNz replay protection is implemented up in slightly
different ways, dependin on tha key pimpment mode
you have selected.

In Static Key mode
or when rockin a CFB or OFB mode cipher, OpenVPN uses a
64 bit unique identifier dat combines a time stamp with
an incrementin sequence number.

When rockin TLS mode fo' key exchange n' a STD cipher
mode, OpenVPN uses only a 32 bit sequence number without
a time stamp, since OpenVPN can guarantee tha uniqueness
of dis value fo' each key.  As up in IPSec, if tha sequence number is
close ta wrappin back ta zero, OpenVPN will trigger
a freshly smoked up key exchange.

To check fo' replays, OpenVPN uses
the
.I slidin window
algorithm used
by IPSec.
.\"*********************************************************
.TP
.B \-\-replay-window n [t]
Use a replay protection sliding-window of size
.B n
and a time window of
.B t
seconds.

By default
.B n
is 64 (the IPSec default) and
.B t
is 15 seconds.

This option is only relevant up in UDP mode, i.e.
when either
.B \-\-proto udp
is specifed, or no
.B \-\-proto
option is specified.

When OpenVPN tunnels IP packets over UDP, there is tha possibilitizzle that
packets might be dropped or served up outta order n' shit.  Because OpenVPN, like IPSec,
is emulatin tha physical network layer,
it will accept a out-of-order packet sequence, and
will serve up such packets up in tha same order they was received to
the TCP/IP protocol stack, provided they satisfy nuff muthafuckin constraints.

.B (a)
Da packet cannot be a replay (unless
.B \-\-no-replay
is specified, which disablez replay protection altogether).

.B (b)
If a packet arrives outta order, it will only be accepted if tha difference
between its sequence number n' tha highest sequence number received
so far is less than
.B n.

.B (c)
If a packet arrives outta order, it will only be accepted if it arrives no later
than
.B t
secondz afta any packet containin a higher sequence number.

If yo ass is rockin a network link wit a big-ass pipeline (meanin that
the thang of bandwidth n' latency is high), you may wanna use
a larger value for
.B n.
Satellite links up in particular often require all dis bullshit.

If you run OpenVPN at
.B \-\-verb 4,
you will peep tha message "Replay-window backtrack occurred [x]"
every time tha maximum sequence number backtrack peeped thus far
increases.  This can be used ta calibrate
.B n.

There is some controversy on tha appropriate method of handlin packet
reorderin all up in tha securitizzle layer.

Namely, ta what tha fuck extent should the
securitizzle layer protect tha encapsulated protocol from attacks which masquerade
as tha kindz of aiiight packet loss n' reorderin dat occur over IP networks?

Da IPSec n' OpenVPN approach is ta allow packet reorderin within a cold-ass lil certain
fixed sequence number window.

OpenVPN addz ta tha IPSec model by limitin tha window size up in time as well as
sequence space.

OpenVPN also addz TCP transhiznit as a option (not offered by IPSec) up in which
case OpenVPN can adopt a straight-up strict attitude towardz message deletion and
reordering:  Don't allow dat shit.  Since TCP guarantees reliability, any packet
loss or reorderin event can be assumed ta be a attack.

In dis sense, it could be broke off some disrespec dat TCP tunnel transhiznit is preferred when
tunnelin non-IP or UDP application protocols which might be vulnerable ta a
message deletion or reorderin battle which falls within tha normal
operationizzle parametaz of IP networks.

So I would make tha statement dat one should never tunnel a non-IP protocol
or UDP application protocol over UDP, if tha protocol might be vulnerable ta a
message deletion or reorderin battle dat falls within tha aiiight operating
parametaz of what tha fuck is ta be expected from tha physical IP layer n' shit.  Da problem
is easily fixed by simply rockin TCP as tha VPN transhiznit layer.
.\"*********************************************************
.TP
.B \-\-mute-replay-warnings
Silence tha output of replay warnings, which is a cold-ass lil common
false alarm on WiFi networks.  This option preserves
the securitizzle of tha replay protection code without
the verbositizzle associated wit warnings bout duplicate
packets.
.\"*********************************************************
.TP
.B \-\-replay-persist file
Persist replay-protection state across sessions using
.B file
to save n' reload tha state.

This option will strengthen protection against replay attacks,
especially when yo ass is rockin OpenVPN up in a thugged-out dynamic context (such
as with
.B \-\-inetd)
when OpenVPN sessions is frequently started n' stopped. Y'all KNOW dat shit, muthafucka! 

This option will keep a gangbangin' finger-lickin' disk copy of tha current replay protection
state (i.e. da most thugged-out recent packet timestamp n' sequence number
received from tha remote peer), so dat if a OpenVPN session
is stopped n' restarted, it will reject any replayz of packets
which was already received by tha prior session.

This option only make sense when replay protection is enabled
(the default) n' yo ass is rockin either
.B \-\-secret
(shared-secret key mode) or TLS mode with
.B \-\-tls-auth.
.\"*********************************************************
.TP
.B \-\-no-iv
(Advanced) Disable OpenVPNz use of IV (cipher initialization vector).
Don't use dis option unless yo ass is prepared ta make
a tradeoff of pimped outa efficiency up in exchange fo' less
security.

OpenVPN uses a IV by default, n' requires it fo' CFB and
OFB cipher modes (which is straight-up insecure without it).
Usin a IV is blingin fo' securitizzle when multiple
lyrics is bein encrypted/decrypted wit tha same key.

IV is implemented differently dependin on tha cipher mode used.

In STD mode, OpenVPN uses a pseudo-random IV fo' each packet.

In CFB/OFB mode, OpenVPN uses a unique sequence number n' time stamp
as tha IV.  In fact, up in CFB/OFB mode, OpenVPN uses a thugged-out datagram
space-savin optimization dat uses tha unique identifier for
datagram replay protection as tha IV.
.\"*********************************************************
.TP
.B \-\-use-prediction-resistance
Enable prediction resistizzle on PolarSSLz RNG.

Enablin prediction resistizzle causes tha RNG ta reseed up in each
call fo' random. Reseedin dis often can quickly deplete tha kernel
entropy pool.

If you need dis option, please consider hustlin a thugged-out daemon dat adds
entropy ta tha kernel pool.

Note dat dis option only works wit PolarSSL versions pimped outer
than 1.1.
.\"*********************************************************
.TP
.B \-\-test-crypto
Do a self-test of OpenVPNz crypto options by encryptin and
decryptin test packets rockin tha data channel encryption options
specified above.  This option do not require a peer ta function,
and therefore can be specified without
.B \-\-dev
or
.B \-\-remote.

Da typical usage of
.B \-\-test-crypto
would be suttin' like this:

.B openvpn \-\-test-crypto \-\-secret key

or

.B openvpn \-\-test-crypto \-\-secret key \-\-verb 9

This option is straight-up useful ta test OpenVPN afta it has been ported to
a freshly smoked up platform, or ta isolate problems up in tha compiler, OpenSSL
crypto library, or OpenVPNz crypto code.  Since it aint nuthin but a self-test mode,
problems wit encryption n' authentication can be debugged independently
of network n' tunnel issues.
.\"*********************************************************
.SS TLS Mode Options:
TLS mode is da most thugged-out bangin crypto mode of OpenVPN up in both securitizzle n' flexibility.
TLS mode works by establishin control and
data channels which is multiplexed over a single TCP/UDP port.  OpenVPN initiates
a TLS session over tha control channel n' uses it ta exchange cipher
and HMAC keys ta protect tha data channel.  TLS mode uses a robust reliability
layer over tha UDP connection fo' all control channel communication, while
the data channel, over which encrypted tunnel data passes, is forwarded without
any mediation. I aint talkin' bout chicken n' gravy biatch.  Da result is tha dopest of both ghettos: a gangbangin' fast data channel
that forwardz over UDP wit only tha overhead of encrypt,
decrypt, n' HMAC functions,
and a cold-ass lil control channel dat serves up all of tha securitizzle featurez of TLS,
includin certificate-based authentication n' Diffie Hellman forward secrecy.

To use TLS mode, each peer dat runs OpenVPN should have its own local
certificate/key pair (
.B \-\-cert
and
.B \-\-key
), signed by tha root certificate which is specified
in
.B \-\-ca.

When two OpenVPN peers connect, each presents its local certificate ta the
other n' shit.  Each peer will then check dat its partner peer presented a
certificate which was signed by tha masta root certificate as specified in
.B \-\-ca.

If dat check on both peers succeeds, then tha TLS negotiation
will succeed, both OpenVPN
peers will exchange temporary session keys, n' tha tunnel will begin
passin data.

Da OpenVPN distribution gotz nuff a set of scripts for
managin RSA certificates & keys,
located up in the
.I easy as fuck -rsa
subdirectory.

Da easy as fuck -rsa package be also rendered up in wizzy form here:
.I http://openvpn.net/easyrsa.html
.\"*********************************************************
.TP
.B \-\-tls-server
Enable TLS n' assume server role durin TLS handshake.  Note that
OpenVPN is designed as a peer-to-peer application. I aint talkin' bout chicken n' gravy biatch.  Da designation
of client or server is only fo' tha purpose of negotiatin tha TLS
control channel.
.\"*********************************************************
.TP
.B \-\-tls-client
Enable TLS n' assume client role durin TLS handshake.
.\"*********************************************************
.TP
.B \-\-ca file
Certificate authoritizzle (CA) file up in .pem format, also referred ta as the
.I root
certificate.  This file can have multiple
certificates up in .pem format, concatenated together n' shit.  Yo ass can construct yo' own
certificate authoritizzle certificate n' private key by rockin a cold-ass lil command such as:

.B openssl req -nodes -new -x509 -keyout ca.key -out ca.crt

Then edit yo' openssl.cnf file n' edit the
.B certificate
variable ta point ta yo' freshly smoked up root certificate
.B ca.crt.

For testin purposes only, tha OpenVPN distribution includes a sample
CA certificate (ca.crt).
Of course you should never use
the test certificates n' test keys distributed wit OpenVPN up in a
thang environment, since by virtue of tha fact that
they is distributed wit OpenVPN, they is straight-up insecure.
.\"*********************************************************
.TP
.B \-\-capath dir
Directory containin trusted certificates (CAs n' CRLs).
Available wit OpenSSL version >= 0.9.7 dev.
Not available wit PolarSSL.
.\"*********************************************************
.TP
.B \-\-dh file
File containin Diffie Hellman parameters
in .pem format (required for
.B \-\-tls-server
only). Use

.B openssl dhparam -out dh1024.pem 1024

to generate yo' own, or use tha existin dh1024.pem file
included wit tha OpenVPN distribution. I aint talkin' bout chicken n' gravy biatch.  Diffie Hellman parameters
may be considered public.
.\"*********************************************************
.TP
.B \-\-cert file
Local peerz signed certificate up in .pem format \-\- must be signed
by a cold-ass lil certificate authoritizzle whose certificate is in
.B \-\-ca file.
Each peer up in a OpenVPN link hustlin up in TLS mode should have its own
certificate n' private key file.  In addition, each certificate should
have been signed by tha key of a cold-ass lil certificate
authoritizzle whose hood key resides up in the
.B \-\-ca
certificate authoritizzle file.
Yo ass can easily make yo' own certificate authoritizzle (see above) or pay scrilla
to bust a cold-ass lil commercial steez like fuckin thawte.com (in which case yo big-ass booty is ghon be
helpin ta finizzle tha ghettoz second space tourist :).
To generate a cold-ass lil certificate,
you can bust a cold-ass lil command such as:

.B openssl req -nodes -new -keyout mycert.key -out mycert.csr

If yo' certificate authoritizzle private key lives on another machine, copy
the certificate signin request (mycert.csr) ta dis other machine (this can
be done over a insecure channel like fuckin email).  Now sign tha certificate
with a cold-ass lil command such as:

.B openssl ca -out mycert.crt -in mycert.csr

Now copy tha certificate (mycert.crt)
back ta tha peer which initially generated tha .csr file (this
can be over a hood medium).
Note dat the
.B openssl ca
command readz tha location of tha certificate authoritizzle key from its
configuration file such as
.B /usr/share/ssl/openssl.cnf
\-\- note also
that fo' certificate authoritizzle functions, you must set up tha files
.B index.txt
(may be empty) and
.B serial
(initialize to
.B 
01
).
.\"*********************************************************
.TP
.B \-\-extra-certs file
Specify a
.B file
containin one or mo' PEM certs (concatenated together)
that complete the
local certificate chain.

This option is useful fo' "split" CAs, where tha CA fo' server
certs is different than tha CA fo' client certs, n' you can put dat on yo' toast.  Puttin certs
in dis file allows dem ta be used ta complete tha local
certificate chain without trustin dem ta verify tha peer-submitted
certificate, as would be tha case if tha certs was placed up in the
.B ca
file.
.\"*********************************************************
.TP
.B \-\-key file
Local peerz private key up in .pem format.  Use tha private key which was generated
when you built yo' peerz certificate (see
.B -cert file
above).
.\"*********************************************************
.TP
.B \-\-tls-version-min version ['or-highest']
Enable TLS version negotiation, n' set tha minimum
TLS version we will accept from tha peer (default is "1.0").
Examplez fo' version
include "1.0", "1.1", or "1.2".  If 'or-highest' is specified
and version aint recognized, we will only accept tha highest TLS
version supported by tha local SSL implementation.

If dis options aint set, tha code up in OpenVPN 2.3.4 will default
to rockin TLS 1.0 only, without any version negotiation. I aint talkin' bout chicken n' gravy biatch.  This reverts
the beaviour ta what tha fuck OpenVPN versions up ta 2.3.2 did, as it turned
out dat TLS version negotiation can lead ta handshake problems due
to freshly smoked up signature algorithms up in TLS 1.2.
.\"*********************************************************
.TP
.B \-\-tls-version-max version
Set tha maximum TLS version we will use (default is tha highest version
supported).  Examplez fo' version include "1.0", "1.1", or "1.2".
.\"*********************************************************
.TP
.B \-\-pkcs12 file
Specify a PKCS #12 file containin local private key,
local certificate, n' root CA certificate.
This option can be used instead of
.B \-\-ca, \-\-cert,
and
.B \-\-key.
Not available wit PolarSSL.
.\"*********************************************************
.TP
.B \-\-verify-hash hash
Specify SHA1 fingerprint fo' level-1 cert.  Da level-1 cert is the
CA (or intermediate cert) dat signs tha leaf certificate, n' is
one removed from tha leaf certificate up in tha direction of tha root.
When acceptin a cold-ass lil connection from a peer, tha level-1 cert
fingerprint must match
.B hash
or certificate verification will fail.  Hash is specified
as XX:XX:...  For example: AD:B0:95:D8:09:C8:36:45:12:A9:89:C8:90:09:CB:13:72:A6:AD:16
.\"*********************************************************
.TP
.B \-\-pkcs11-cert-private [0|1]...
Set if access ta certificate object should be performed afta login.
Every provider has its own setting.
.\"*********************************************************
.TP
.B \-\-pkcs11-id name
Specify tha serialized certificate id ta be used. Y'all KNOW dat shit, muthafucka! Da id can be gotten
by tha standalone
.B \-\-show-pkcs11-ids
option.
.\"*********************************************************
.TP
.B \-\-pkcs11-id-management
Acquire PKCS#11 id from pimpment intercourse. In dis case a NEED-STR 'pkcs11-id-request'
real-time message is ghon be triggered, application may use pkcs11-id-count command to
retrieve available number of certificates, n' pkcs11-id-get command ta retrieve certificate
id n' certificate body.
.\"*********************************************************
.TP
.B \-\-pkcs11-pin-cache seconds
Specify how tha fuck nuff secondz tha PIN can be cached, tha default is until tha token is removed.
.\"*********************************************************
.TP
.B \-\-pkcs11-protected-authentication [0|1]...
Use PKCS#11 protected authentication path, useful fo' biometric n' external
keypad devices.
Every provider has its own setting.
.\"*********************************************************
.TP
.B \-\-pkcs11-providaz provider...
Specify a RSA Securitizzle Inc. PKCS #11 Cryptographic Token Interface (Cryptoki) providers
to load.
This option can be used instead of
.B \-\-cert, \-\-key,
and
.B \-\-pkcs12.
.\"*********************************************************
.TP
.B \-\-pkcs11-private-mode mode...
Specify which method ta use up in order ta big-ass up private key operations.
A different mode can be specified fo' each provider.
Mode is encoded as hex number, n' can be a mask one of tha following:

.B 0
(default) \-\- Try ta determine automatically.
.br
.B 1
\-\- Use sign.
.br
.B 2
\-\- Use sign recover.
.br
.B 4
\-\- Use decrypt.
.br
.B 8
\-\- Use unwrap.
.br
.\"*********************************************************
.TP
.B \-\-cryptoapicert select-string
Load tha certificate n' private key from the
Windows Certificate System Store (Windows/OpenSSL Only).

Use dis option instead of
.B \-\-cert
and
.B \-\-key.

This makes
it possible ta use any smart-ass card, supported by Windows yo, but also any
kind of certificate, residin up in tha Cert Store, where you have access to
the private key.  This option has been tested wit a cold-ass lil couple different
smart cardz (GemSAFE, Cryptoflex, n' Swedish Post Office eID) on the
client side, n' also a imported PKCS12 software certificate on the
server side.

To select a cold-ass lil certificate, based on a substrin search up in the
certificatez subject:

.B cryptoapicert
"SUBJ:Peta Runestig"

To select a cold-ass lil certificate, based on certificatez thumbprint:

.B cryptoapicert
"THUMB:f6 49 24 41 01 b4 ..."

Da thumbprint hex strang can easily be copy-and-pasted from tha Windows
Certificate Store GUI.

.\"*********************************************************
.TP
.B \-\-key-method m
Use data channel key negotiation method
.B m.
Da key method must match on both sidez of tha connection.

Afta OpenVPN negotiates a TLS session, a freshly smoked up set of keys
for protectin tha tunnel data channel is generated and
exchanged over tha TLS session.

In method 1 (the default fo' OpenVPN 1.x), both sides generate
random encrypt n' HMAC-send keys which is forwarded to
the other host over tha TLS channel.

In method 2, (the default fo' OpenVPN 2.0)
the client generates a random key.  Both client
and server also generate some random seed material. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  All key source
material is exchanged over tha TLS channel. Da actual
keys is generated rockin tha TLS PRF function, takin source
entropy from both client n' server n' shit.  Method 2 is designed to
closely parallel tha key generation process used by TLS 1.0.

Note dat up in TLS mode, two separate levels 
of keyin occur:

(1) Da TLS connection is initially negotiated, wit both sides
of tha connection producin certificates n' verifyin tha certificate
(or other authentication info provided) of
the other side.  The
.B \-\-key-method
parameta has no effect on dis process.

(2) Afta tha TLS connection is established, tha tunnel session keys are
separately negotiated over tha existin secure TLS channel.  Here,
.B \-\-key-method
determines tha derivation of tha tunnel session keys.
.\"*********************************************************
.TP
.B \-\-tls-cipher l
A list
.B l
of allowable TLS ciphers delimited by a cold-ass lil colon (":").
If you require a high level of security,
you may wanna set dis parameta manually, ta prevent a
version rollback battle where a man-in-the-middle attacker tries
to force two peers ta negotiate ta tha lowest level
of securitizzle they both support.
Use
.B \-\-show-tls
to peep a list of supported TLS ciphers.
.\"*********************************************************
.TP
.B \-\-tls-timeout n
Packet retransmit timeout on TLS control channel
if no acknowledgment from remote within
.B n
secondz (default=2).  When OpenVPN sendz a cold-ass lil control
packet ta its peer, it will expect ta receive an
acknowledgement within
.B n
secondz or it will retransmit tha packet, subject
to a TCP-like exponential backoff algorithm.  This parameter
only applies ta control channel packets, n' you can put dat on yo' toast.  Data channel
packets (which carry encrypted tunnel data) is never
acknowledged, sequenced, or retransmitted by OpenVPN cuz
the higher level network protocols hustlin on top of tha tunnel
like fuckin TCP expect dis role ta be left ta em.
.\"*********************************************************
.TP
.B \-\-reneg-bytes n
Renegotiate data channel key after
.B n
bytes busted or received (disabled by default).
OpenVPN allows tha gametime of a key
to be expressed as a fuckin shitload of bytes encrypted/decrypted, a fuckin shitload of packets, or
a number of seconds.  A key renegotiation is ghon be forced
if any of these three criteria is kicked it wit by either peer.
.\"*********************************************************
.TP
.B \-\-reneg-pkts n
Renegotiate data channel key after
.B n
packets busted n' received (disabled by default).
.\"*********************************************************
.TP
.B \-\-reneg-sec n
Renegotiate data channel key after
.B n
secondz (default=3600).

When rockin dual-factor authentication, note dat dis default value may
cause tha end user ta be challenged ta reauthorize once per hour.

Also, keep up in mind dat dis option can be used on both tha client n' server,
and whichever uses tha lower value is ghon be tha one ta trigger tha renegotiation.
A common fuck up is ta set
.B \-\-reneg-sec
to a higher value on either tha client or server, while tha other side of tha connection
is still rockin tha default value of 3600 seconds, meanin dat tha renegotiation will
still occur once per 3600 seconds.  Da solution is ta increase \-\-reneg-sec on both the
client n' server, or set it ta 0 on one side of tha connection (to disable), n' to
your chosen value on tha other side.
.\"*********************************************************
.TP
.B \-\-hand-window n
Handshake Window \-\- tha TLS-based key exchange must finalize within
.B n
seconds
of handshake initiation by any peer (default = 60 seconds).
If tha handshake fails
we will attempt ta reset our connection wit our peer n' try again.
Even up in tha event of handshake failure we will still use
our expirin key fo' up to
.B \-\-tran-window
secondz ta maintain continuitizzle of transmission of tunnel
data.
.\"*********************************************************
.TP
.B \-\-tran-window n
Transizzle window \-\- our oldschool key can live dis nuff seconds
afta a freshly smoked up a key renegotiation begins (default = 3600 seconds).
This feature allows fo' a graceful transizzle from oldschool ta new
key, n' removes tha key renegotiation sequence from tha critical
path of tunnel data forwarding.
.\"*********************************************************
.TP
.B \-\-single-session
Afta initially connectin ta a remote peer, disallow any freshly smoked up connections.
Usin this
option means dat a remote peer cannot connect, disconnect, n' then
reconnect.

If tha daemon is reset by a signal or
.B \-\-ping-restart,
it will allow one freshly smoked up connection.

.B \-\-single-session
can be used with
.B \-\-ping-exit
or
.B \-\-inactive
to create a single dynamic session dat will exit when finished.
.\"*********************************************************
.TP
.B \-\-tls-exit
Exit on TLS negotiation failure.
.\"*********************************************************
.TP
.B \-\-tls-auth file [direction]
Add a additionizzle layer of HMAC authentication on top of tha TLS
control channel ta protect against DoS attacks.

In a nutshell,
.B \-\-tls-auth
enablez a kind of "HMAC firewall" on OpenVPNz TCP/UDP port,
where TLS control channel packets
bearin a incorrect HMAC signature can be dropped immediately without
response.

.B file
(required) be a key file which can be up in one of two formats:

.B (1)
An OpenVPN static key file generated by
.B \-\-genkey
(required if
.B direction
parameta is used).

.B (2)
A freeform passphrase file.  In dis case tha HMAC key will
be derived by takin a secure hash of dis file, similar to
the
.BR md5sum (1)
or
.BR sha1sum (1)
commands.

OpenVPN will first try format (1), n' if tha file fails ta parse as
a static key file, format (2) is ghon be used.

See the
.B \-\-secret
option fo' mo' shiznit on tha optional
.B direction
parameter.

.B \-\-tls-auth
is recommended when yo ass is hustlin OpenVPN up in a mode where
it is listenin fo' packets from any IP address, like fuckin when
.B \-\-remote
is not specified, or
.B \-\-remote
is specified with
.B \-\-float.

Da rationale for
this feature be as bigs up.  TLS requires a multi-packet exchange
before it be able ta authenticate a peer n' shit.  Durin dis time
before authentication, OpenVPN be allocatin resources (memory
and CPU) ta dis potential peer n' shit.  Da potential peer be also
exposin nuff partz of OpenVPN n' tha OpenSSL library ta tha packets
it is sending.  Most successful network attacks todizzle seek
to either exploit bugs up in programs (like fuckin buffer overflow attacks) or
force a program ta consume all kindsa muthafuckin resources dat it becomes unusable.
Of course tha straight-up original gangsta line of defense be always ta produce clean,
well-audited code.  OpenVPN has been freestyled wit buffer overflow
battle prevention as a top priority.
But as history has shown, nuff of da most thugged-out widely used
network applications have, from time ta time,
fallen ta buffer overflow attacks.

So as a second line of defense, OpenVPN offers
this special layer of authentication on top of tha TLS control channel so that
every packet on tha control channel be authenticated by an
HMAC signature n' a unique ID fo' replay protection.
This signature will also help protect against DoS (Denial of Service) attacks.
An blingin rule of thumb up in reducin vulnerabilitizzle ta DoS attacks is to
minimize tha amount of resources a potential yo, but as yet unauthenticated,
client be able ta consume.

.B \-\-tls-auth
does dis by signin every last muthafuckin TLS control channel packet wit a HMAC signature,
includin packets which is busted before tha TLS level has had a cold-ass lil chance
to authenticate tha peer.
Da result is dat packets without
the erect signature can be dropped immediately upon reception,
before they gotz a cold-ass lil chizzle ta consume additionizzle system resources
like fuckin by initiatin a TLS handshake.
.B \-\-tls-auth
can be strengthened by addin the
.B \-\-replay-persist
option which will keep OpenVPNz replay protection state
in a gangbangin' file so dat it aint lost across restarts.

It should be emphasized dat dis feature is optionizzle n' dat the
passphrase/key file used with
.B \-\-tls-auth
gives a peer not a god damn thang mo' than tha juice ta initiate a TLS
handshake.  It aint used ta encrypt or authenticate any tunnel data.
.\"*********************************************************
.TP
.B \-\-askpass [file]
Git certificate password from console or
.B file
before our phat asses daemonize.

For tha mad
securitizzle conscious, it is possible ta protect yo' private key with
a password. Y'all KNOW dat shit, muthafucka!  Of course dis means dat every last muthafuckin time tha OpenVPN
daemon is started you must be there ta type tha password. Y'all KNOW dat shit, muthafucka!  The
.B \-\-askpass
option allows you ta start OpenVPN from tha command line.  It will
query you fo' a password before it daemonizes.  To protect a private
key wit a password you should omit the
.B -nodes
option when you use the
.B openssl
command line tool ta manage certificates n' private keys.

If
.B file
is specified, read tha password from tha straight-up original gangsta line of
.B file.
Keep it realz in mind dat storin yo' password up in a gangbangin' file
to a cold-ass lil certain extent invalidates tha extra securitizzle provided by
usin a encrypted key (Note: OpenVPN
will only read passwordz from a gangbangin' file if it has been built
with tha \-\-enable-password-save configure option, or on Windows
by definin ENABLE_PASSWORD_SAVE up in win/settings.in).
.\"*********************************************************
.TP
.B \-\-auth-nocache
Don't cache
.B \-\-askpass
or
.B \-\-auth-user-pass
username/passwordz up in virtual memory.

If specified, dis directizzle will cause OpenVPN ta immediately
forget username/password inputs afta they is used. Y'all KNOW dat shit, muthafucka!  As a result,
when OpenVPN needz a username/password, it will prompt fo' input
from stdin, which may be multiple times durin tha duration of an
OpenVPN session.

This directizzle do not affect the
.B \-\-http-proxy
username/password. Y'all KNOW dat shit, muthafucka!  It be always cached.
.\"*********************************************************
.TP
.B \-\-tls-verify cmd
Run command
.B cmd
to verify tha X509 name of a
pendin TLS connection dat has otherwise passed all other
testz of certification (except fo' revocation via
.B \-\-crl-verify
directive; tha revocation test occurs afta the
.B \-\-tls-verify
test).

.B cmd
should return 0 ta allow tha TLS handshake ta proceed, or 1 ta fail.

.B cmd
consistz of a path ta script (or executable program), optionally
followed by arguments, n' you can put dat on yo' toast. Da path n' arguments may be single- or double-quoted
and/or escaped rockin a funky-ass backslash, n' should be separated by one or mo' spaces.

When
.B cmd
is executed two arguments is appended afta any arguments specified in
.B cmd
, as bigs up:

.B cmd certificate_depth subject

These arguments are, respectively, tha current certificate depth and
the X509 common name (cn) of tha peer.

This feature is useful if tha peer you wanna trust has a cold-ass lil certificate
which was signed by a cold-ass lil certificate authoritizzle whoz ass also signed many
other certificates, where you don't necessarily wanna trust all of them,
but rather be selectizzle bout which
peer certificate yo big-ass booty is ghon accept.  This feature allows you ta write a script
which will test tha X509 name on a cold-ass lil certificate n' decizzle whether or
not it should be accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For a simple perl script which will test
the common name field on tha certificate, peep tha file
.B verify-cn
in tha OpenVPN distribution.

See tha "Environmenstrual Variables" section below for
additionizzle parametas passed as environmenstrual variables.
.\"*********************************************************
.TP
.B \-\-tls-export-cert directory
Store tha certificates tha clients uses upon connection ta this
directory. This is ghon be done before \-\-tls-verify is called. Y'all KNOW dat shit, muthafucka!  The
certificates will bust a temporary name n' is ghon be deleted when
the tls-verify script returns.  Da file name used fo' tha certificate
is available via tha peer_cert environment variable.
.\"*********************************************************
.TP
.B \-\-x509-username-field [ext:\]fieldname
Field up in tha X.509 certificate subject ta be used as tha username (default=CN).
Typically, dis option is specified with
.B fieldname
as either of tha following:

.B \-\-x509-username-field
emailAddress
.br
.B \-\-x509-username-field ext:\fRsubjectAltName

Da first example uses tha value of tha "emailAddress" attribute up in the
certificatez Subject field as tha username.  Da second example uses
the
.B ext:
prefix ta signify dat tha X.509 extension
.B fieldname
"subjectAltName" be searched fo' a rfc822Name (email) field ta be used
as tha username.  In cases where there be multiple email addresses
in
.B ext:fieldname\fR,
the last occurrence is chosen.

When dis option is used, the
.B \-\-verify-x509-name
option will match against tha chosen
.B fieldname
instead of tha Common Name.

.B Please note:
This option has a gangbangin' feature which will convert a all-lowercase
.B fieldname
to uppercase characters, e.g., ou -> OU.  A mixed-case
.B fieldname
or one havin the
.B ext:
prefix is ghon be left as-is.  This automatic upcasin feature
is deprecated n' is ghon be removed up in a gangbangin' future release.
.\"*********************************************************
.TP
.B \-\-tls-remote name (DEPRECATED)
Accept connections only from a host wit X509 name
or common name equal to
.B name.
Da remote host must also pass all other tests
of verification.

.B NOTE:
Because tls-remote may test against a cold-ass lil common name prefix,
only use dis option when yo ass is rockin OpenVPN wit a cold-ass lil custom CA
certificate dat is under yo' control.
Never use dis option when yo' client certificates is signed by
a third party, like fuckin a cold-ass lil commercial wizzy CA.

Name can also be a cold-ass lil common name prefix, fo' example if you
want a cold-ass lil client ta only accept connections ta "Server-1",
"Server-2", etc., you can simply use
.B \-\-tls-remote Server

Usin a cold-ass lil common name prefix be a useful alternatizzle ta managing
a CRL (Certificate Revocation List) on tha client, since it allows tha client
to refuse all certificates except fo' dem associated
with designated servers.

.B \-\-tls-remote
is a useful replacement fo' the
.B \-\-tls-verify
option ta verify tha remote host, cuz
.B \-\-tls-remote
works up in a
.B \-\-chroot
environment like a muthafucka.

.B Please also note:
This option is now deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It is ghon be removed either up in OpenVPN v2.4
or v2.5.  So please make shizzle you support tha freshly smoked up X.509 name formatting
busted lyrics bout wit the
.B \-\-compat-names
option quicker than a muthafucka by uppimpin yo' configurations ta use
.B \-\-verify-x509-name
instead.
.\"*********************************************************
.TP
.B \-\-verify-x509-name name type
Accept connections only if a hostz X.509 name is equal to
.B name.
Da remote host must also pass all other testz of verification.

Which X.509 name is compared to
.B name
dependz on tha settin of type.
.B type
can be "subject" ta match tha complete subject DN (default),
"name" ta match a subject RDN or "name-prefix" ta match a subject RDN prefix.
Which RDN is verified as name dependz on the
.B \-\-x509-username-field
option. I aint talkin' bout chicken n' gravy biatch. But it defaults ta tha common name (CN), e.g. a cold-ass lil certificate wit a
subject DN "C=KG, ST=NA, L=Bishkek, CN=Server-1" would be matched by:

.B \-\-verify-x509-name 'C=KG, ST=NA, L=Bishkek, CN=Server-1'
and
.B \-\-verify-x509-name Server-1 name
or you could use
.B \-\-verify-x509-name Server- name-prefix
if you want a cold-ass lil client ta only accept connections ta "Server-1", "Server-2", etc.

.B \-\-verify-x509-name
is a useful replacement fo' the
.B \-\-tls-verify
option ta verify tha remote host, cuz
.B \-\-verify-x509-name
works up in a
.B \-\-chroot
environment without any dependencies.

Usin a name prefix be a useful alternatizzle ta managing
a CRL (Certificate Revocation List) on tha client, since it allows tha client
to refuse all certificates except fo' dem associated
with designated servers.

.B NOTE:
Test against a name prefix only when yo ass is rockin OpenVPN with
a custom CA certificate dat is under yo' control.
Never use dis option wit type "name-prefix" when yo' client certificates
are signed by a third party, like fuckin a cold-ass lil commercial wizzy CA.
.\"*********************************************************
.TP
.B \-\-x509-track attribute
Save peer X509
.B attribute
value up in environment fo' use by plugins n' pimpment intercourse.
Prepend a '+' to
.B attribute
to save joints from full cert chain. I aint talkin' bout chicken n' gravy biatch.  Values is ghon be encoded
as X509_<depth>_<attribute>=<value>.  Multiple
.B \-\-x509-track
options can be defined ta track multiple attributes.
Not available wit PolarSSL.
.\"*********************************************************
.TP
.B \-\-ns-cert-type client|server
Require dat peer certificate was signed wit a explicit
.B nsCertType
designation of "client" or "server".

This be a useful securitizzle option fo' clients, ta ensure that
the host they hook tha fuck up wit be a thugged-out designated server.

See tha easy as fuck -rsa/build-key-server script fo' a example
of how tha fuck ta generate a cold-ass lil certificate wit the
.B nsCertType
field set ta "server".

If tha server certificatez nsCertType field is set
to "server", then tha clients can verify dis with
.B \-\-ns-cert-type server.

This be a blingin securitizzle precaution ta protect against
a man-in-the-middle battle where a authorized client
attempts ta connect ta another client by impersonatin tha server.
Da battle is easily prevented by havin clients verify
the server certificate rockin any one of
.B \-\-ns-cert-type, \-\-verify-x509-name,
or
.B \-\-tls-verify.
.\"*********************************************************
.TP
.B \-\-remote-cert-ku v...
Require dat peer certificate was signed wit a explicit
.B key usage.

This be a useful securitizzle option fo' clients, ta ensure that
the host they connect ta be a thugged-out designated server.

Da key usage should be encoded up in hex, mo' than one key
usage can be specified.
.\"*********************************************************
.TP
.B \-\-remote-cert-eku oid
Require dat peer certificate was signed wit a explicit
.B extended key usage.

This be a useful securitizzle option fo' clients, ta ensure that
the host they connect ta be a thugged-out designated server.

Da extended key usage should be encoded up in oid notation, or
OpenSSL symbolic representation.
.\"*********************************************************
.TP
.B \-\-remote-cert-tls client|server
Require dat peer certificate was signed wit a explicit
.B key usage
and
.B extended key usage
based on RFC3280 TLS rules.

This be a useful securitizzle option fo' clients, ta ensure that
the host they connect ta be a thugged-out designated server.

The
.B \-\-remote-cert-tls client
option is equivalent to
.B
\-\-remote-cert-ku 80 08 88 \-\-remote-cert-eku "TLS Web Client Authentication"

Da key usage is digitalSignature and/or keyAgreement.

The
.B \-\-remote-cert-tls server
option is equivalent to
.B
\-\-remote-cert-ku a0 88 \-\-remote-cert-eku "TLS Web Server Authentication"

Da key usage is digitalSignature n' ( keyEncipherment or keyAgreement ).

This be a blingin securitizzle precaution ta protect against
a man-in-the-middle battle where a authorized client
attempts ta connect ta another client by impersonatin tha server.
Da battle is easily prevented by havin clients verify
the server certificate rockin any one of
.B \-\-remote-cert-tls, \-\-verify-x509-name,
or
.B \-\-tls-verify.
.\"*********************************************************
.TP
.B \-\-crl-verify crl ['dir']
Peep peer certificate against tha file
.B crl
in PEM format.

A CRL (certificate revocation list) is used when a particular key is
compromised but when tha overall PKI is still intact.

Suppose you had a PKI consistin of a CA, root certificate, n' a number of
client certificates.  Suppose a laptop computa containin a cold-ass lil client key and
certificate was jacked. I aint talkin' bout chicken n' gravy biatch.  By addin tha jacked certificate ta tha CRL file,
you could reject any connection which attempts ta use it, while preservin the
overall integritizzle of tha PKI.

Da only time when it would be necessary ta rebuild tha entire PKI from scratch would be
if tha root certificate key itself was compromised.

If tha optional
.B dir
flag is specified, enable a gangbangin' finger-lickin' different mode where
.B crl
is a gangbangin' finger-lickin' directory containin filez named as revoked serial numbers
(the filez may be empty, tha contents is never read).  If a cold-ass lil client
requests a cold-ass lil connection, where tha client certificate serial number
(decimal string) is tha name of a gangbangin' file present up in tha directory,
it is ghon be rejected.
.\"*********************************************************
.SS SSL Library shiznit:
.\"*********************************************************
.TP
.B \-\-show-ciphers
(Standalone)
Show all cipher algorithms ta use wit the
.B \-\-cipher
option.
.\"*********************************************************
.TP
.B \-\-show-digests
(Standalone)
Show all message digest algorithms ta use wit the
.B \-\-auth
option.
.\"*********************************************************
.TP
.B \-\-show-tls
(Standalone)
Show all TLS ciphers (TLS used only as a cold-ass lil control channel).  Da TLS
ciphers is ghon be sorted from highest preference (most secure) to
lowest.
.\"*********************************************************
.TP
.B \-\-show-engines
(Standalone)
Show currently available hardware-based crypto acceleration
engines supported by tha OpenSSL library.
.\"*********************************************************
.SS Generate a random key:
Used only fo' non-TLS static key encryption mode.
.\"*********************************************************
.TP
.B \-\-genkey
(Standalone)
Generate a random key ta be used as a gangbangin' finger-lickin' dirty-ass shared secret,
for use wit the
.B \-\-secret
option. I aint talkin' bout chicken n' gravy biatch.  This file must be shared wit the
peer over a pre-existin secure channel such as
.BR scp (1)
.
.\"*********************************************************
.TP
.B \-\-secret file
Write key to
.B file.
.\"*********************************************************
.SS TUN/TAP persistent tunnel config mode:
Available wit linux 2.4.7+.  These options comprise a standalone mode
of OpenVPN which can be used ta create n' delete persistent tunnels.
.\"*********************************************************
.TP
.B \-\-mktun
(Standalone)
Smoke a persistent tunnel on platforms which support dem such
as Linux.  Normally TUN/TAP tunnels exist only for
the period of time dat a application has dem open. I aint talkin' bout chicken n' gravy biatch.  This option
takes advantage of tha TUN/TAP driverz mobilitizzle ta build persistent
tunnels dat live all up in multiple instantiationz of OpenVPN n' die
only when they is deleted or tha machine is rebooted.

One of tha advantagez of persistent tunnels is dat they eliminizzle the
need fo' separate
.B \-\-up
and
.B \-\-down
scripts ta run tha appropriate
.BR ifconfig (8)
and
.BR route (8)
commands.  These commandz can be placed up in tha the same shell script
which starts or terminates a OpenVPN session.

Another advantage is dat open connections all up in tha TUN/TAP-based tunnel
will not be reset if tha OpenVPN peer restarts, n' you can put dat on yo' toast.  This can be useful to
provide uninterrupted connectivitizzle all up in tha tunnel up in tha event of a DHCP
reset of tha peerz hood IP address (see the
.B \-\-ipchange
option above).

One disadvantage of persistent tunnels is dat it is harder ta automatically
configure they MTU value (see
.B \-\-link-mtu
and
.B \-\-tun-mtu
above).

On some platforms like fuckin Windows, TAP-Win32 tunnels is persistent by
default.
.\"*********************************************************
.TP
.B \-\-rmtun
(Standalone)
Remove a persistent tunnel.
.\"*********************************************************
.TP
.B \-\-dev tunX | tapX
TUN/TAP device
.\"*********************************************************
.TP
.B \-\-user user
Optionizzle user ta be balla of dis tunnel.
.\"*********************************************************
.TP
.B \-\-group group
Optionizzle crew ta be balla of dis tunnel.
.\"*********************************************************
.SS Windows-Specific Options:
.\"*********************************************************
.TP
.B \-\-win-sys path
Set tha Windows system directory pathname ta use when lookin fo' system
executablez such as
.B route.exe
and
.B netsh.exe.
By default, if dis directizzle is
not specified, OpenVPN will use tha SystemRoot environment variable.

This option have chizzled behaviour up in OpenVPN 2.3.  Earlier you had to
define
.B --win-sys env
to use tha SystemRoot environment variable, otherwise it defaulted ta C:\\WINDOWS.
It aint needed ta use the
.B env
keyword any more, n' it will just be ignored. Y'all KNOW dat shit, muthafucka! A warnin is logged when this
is found up in tha configuration file.
.\"*********************************************************
.TP
.B \-\-ip-win32 method
When using
.B \-\-ifconfig
on Windows, set tha TAP-Win32 adapter
IP address n' netmask using
.B method.
Don't use dis option unless yo ass be also using
.B \-\-ifconfig.

.B manual \-\-
Don't set tha IP address or netmask automatically.
Instead output a message
to tha console spittin some lyrics ta tha user ta configure the
adapta manually n' indicatin tha IP/netmask which
OpenVPN expects tha adapta ta be set to.

.B dynamic [offset] [lease-time] \-\-
Automatically set tha IP address n' netmask by replyin to
DHCP query lyrics generated by tha kernel.  This mode is
probably tha "cleanest" solution
for settin tha TCP/IP propertizzles since it uses tha well-known
DHCP protocol.  There are, however, two prerequisites fo' using
this mode: (1) Da TCP/IP propertizzles fo' tha TAP-Win32
adapta must be set ta "Obtain a IP address automatically," and
(2) OpenVPN need ta claim a IP address up in tha subnet fo' use
as tha virtual DHCP server address.  By default in
.B \-\-dev tap
mode, OpenVPN will
take tha normally unused first address up in tha subnet.  For example,
if yo' subnet is 192.168.4.0 netmask 255.255.255.0, then
OpenVPN will take tha IP address 192.168.4.0 ta use as the
virtual DHCP server address.  In
.B \-\-dev tun
mode, OpenVPN will cause tha DHCP server ta masquerade as if it were
comin from tha remote endpoint.  Da optionizzle offset parameta is
an integer which is > -256 n' < 256 n' which defaults ta 0.
If offset is positive, tha DHCP server will masquerade as tha IP
address at network address + offset.
If offset is negative, tha DHCP server will masquerade as tha IP
address at broadcast address + offset.  Da Windows
.B ipconfig /all
command can be used ta show what tha fuck Windows be thinkin tha DHCP server
address is.  OpenVPN will "claim" dis address, so make shizzle to
use a gangbangin' free address.  Havin holla'd that, different OpenVPN instantiations,
includin different endz of tha same connection, can share tha same
virtual DHCP server address.  The
.B lease-time
parameta controls tha lease time of tha DHCP assignment given to
the TAP-Win32 adapter, n' is denoted up in seconds.
Normally a straight-up long lease time is preferred
because it prevents routes involvin tha TAP-Win32 adapta from
bein lost when tha system goes ta chill.  Da default
lease time is one year.

.B netsh \-\-
Automatically set tha IP address n' netmask using
the Windows command-line "netsh"
command. Y'all KNOW dat shit, muthafucka!  This method appears ta work erectly on
Windows XP but not Windows 2000.

.B ipapi \-\-
Automatically set tha IP address n' netmask rockin the
Windows IP Helper API.  This approach
does not have ideal semantics, though testin has indicated
that it works all gravy up in practice.  If you use dis option,
it is dopest ta leave tha TCP/IP propertizzles fo' tha TAP-Win32
adapta up in they default state, i.e. "Obtain a IP address
automatically."

.B adaptizzle \-\-
(Default) Try
.B dynamic
method initially n' fail over to
.B netsh
if tha DHCP negotiation wit tha TAP-Win32 adapta do
not succeed up in 20 seconds.  Such failures done been known
to occur when certain third-party firewall packages installed
on tha client machine block tha DHCP negotiation used by
the TAP-Win32 adapter.
Note dat if the
.B netsh
failover occurs, tha TAP-Win32 adapter
TCP/IP propertizzles is ghon be reset from DHCP ta static, n' this
will cause future OpenVPN startups rockin the
.B adaptive
mode ta use
.B netsh
immediately, rather than trying
.B dynamic
first.  To "unstick" the
.B adaptive
mode from using
.B netsh,
run OpenVPN at least once rockin the
.B dynamic
mode ta restore tha TAP-Win32 adapta TCP/IP properties
to a DHCP configuration.
.\"*********************************************************
.TP
.B \-\-route-method m
Which method
.B m
to use fo' addin routes on Windows?

.B adaptive
(default) \-\- Try IP helper API first.  If dat fails, fall
back ta tha route.exe shell command.
.br
.B ipapi
\-\- Use IP helper API.
.br
.B exe
\-\- Call tha route.exe shell command.
.\"*********************************************************
.TP
.B \-\-dhcp-option type [parm]
Set extended TAP-Win32 TCP/IP properties, must
be used with
.B \-\-ip-win32 dynamic
or
.B \-\-ip-win32 adaptive.
This option can be used ta set additionizzle TCP/IP properties
on tha TAP-Win32 adapter, n' is particularly useful for
configurin a OpenVPN client ta access a Samba server
across tha VPN.

.B DOMAIN name \-\-
Set Connection-specific DNS Suffix.

.B DNS addr \-\-
Set primary domain name server address.  Repeat
this option ta set secondary DNS server addresses.

.B WINS addr \-\-
Set primary WINS server address (NetBIOS over TCP/IP Name Server).
Repeat dis option ta set secondary WINS server addresses.

.B NBDD addr \-\-
Set primary NBDD server address (NetBIOS over TCP/IP Datagram Distribution Server)
Repeat dis option
to set secondary NBDD server addresses.

.B NTP addr \-\-
Set primary NTP server address (Network Time Protocol).
Repeat dis option
to set secondary NTP server addresses.

.B NBT type \-\-
Set NetBIOS over TCP/IP Node type.  Possible options:
.B 1
= b-node (broadcasts),
.B 2
= p-node (point-to-point
name queries ta a WINS server),
.B 4
= m-node (broadcast
then query name server), and
.B 8
= h-node (query name server, then broadcast).

.B NBS scope-id \-\-
Set NetBIOS over TCP/IP Scope fo' realz. A NetBIOS Scope ID serves up a extended
namin steez fo' tha NetBIOS over TCP/IP (Known as NBT) module. The
primary purpose of a NetBIOS scope ID is ta isolate NetBIOS traffic on
a single network ta only dem nodes wit tha same NetBIOS scope ID.
Da NetBIOS scope ID be a cold-ass lil characta strang dat be appended ta tha NetBIOS
name. Da NetBIOS scope ID on two hosts must match, or tha two hosts
will not be able ta rap. Da NetBIOS Scope ID also allows
computas ta use tha same computa name, as they have different
scope IDs. Da Scope ID becomes a part of tha NetBIOS name, makin tha name unique.
(This description of NetBIOS scopes courtesy of NeonSurge@abyss.com)

.B DISABLE-NBT \-\-
Disable Netbios-over-TCP/IP.

Note dat if
.B \-\-dhcp-option
is pushed via
.B \-\-push
to a non-windows client, tha option is ghon be saved up in tha client's
environment before tha up script is called, under
the name "foreign_option_{n}".
.\"*********************************************************
.TP
.B \-\-tap-sleep n
Cause OpenVPN ta chill for
.B n
secondz immediately afta tha TAP-Win32 adapta state
is set ta "connected".

This option is intended ta be used ta shitshoot problems
with the
.B \-\-ifconfig
and
.B \-\-ip-win32
options, n' is used ta give
the TAP-Win32 adapta time ta come up before
Windows IP Helper API operations is applied ta dat shit.
.\"*********************************************************
.TP
.B \-\-show-net-up
Output OpenVPNz view of tha system routin table n' network
adapta list ta tha syslog or log file afta tha TUN/TAP adapter
has been brought up n' any routes done been added.
.\"*********************************************************
.TP
.B \-\-dhcp-renew
Ask Windows ta renew tha TAP adapta lease on startup.
This option is normally unnecessary, as Windows automatically
triggers a DHCP renegotiation on tha TAP adapta when it
comes up, however if you set tha TAP-Win32 adapter
Media Status property ta "Always Connected", you may need this
flag.
.\"*********************************************************
.TP
.B \-\-dhcp-release
Ask Windows ta release tha TAP adapta lease on shutdown.
This option has tha same ol' dirty caveats as
.B \-\-dhcp-renew
above.
.\"*********************************************************
.TP
.B \-\-register-dns
Run net stop dnscache, net start dnscache, ipconfig /flushdns
and ipconfig /registerdns on connection initiation.
This is known ta kick Windows into
recognizin pushed DNS servers.
.\"*********************************************************
.TP
.B \-\-pause-exit
Put up a "press any key ta continue" message on tha console prior
to OpenVPN program exit.  This option be automatically used by the
Windows explorer when OpenVPN is run on a cold-ass lil configuration
file rockin tha right-click explorer menu.
.\"*********************************************************
.TP
.B \-\-service exit-event [0|1]
Should be used when OpenVPN is bein automatically executed by another
program up in such
a context dat no interaction wit tha user via display or keyboard
is possible.  In general, end-users should never need ta explicitly
use dis option, as it be automatically added by tha OpenVPN steez wrapper
when a given OpenVPN configuration is bein run as a service.

.B exit-event
is tha name of a Windows global event object, n' OpenVPN will continuously
monitor tha state of dis event object n' exit when it becomes signaled.

Da second parameta indicates tha initial state of
.B exit-event
and normally defaults ta 0.

Multiple OpenVPN processes can be simultaneously executed wit tha same
.B exit-event
parameter n' shit.  In any case, tha controllin process can signal
.B exit-event,
causin all such OpenVPN processes ta exit.

When executin a OpenVPN process rockin the
.B \-\-service
directive, OpenVPN will probably not gotz a cold-ass lil console
window ta output status/error
lyrics, therefore it is useful ta use
.B \-\-log
or
.B \-\-log-append
to write these lyrics ta a gangbangin' file.
.\"*********************************************************
.TP
.B \-\-show-adapters
(Standalone)
Show available TAP-Win32 adaptas which can be selected rockin the
.B \-\-dev-node
option. I aint talkin' bout chicken n' gravy biatch.  On non-Windows systems, the
.BR ifconfig (8)
command serves up similar functionality.
.\"*********************************************************
.TP
.B \-\-allow-nonadmin [TAP-adapter]
(Standalone)
Set
.B TAP-adapter
to allow access from non-administratizzle accounts, n' you can put dat on yo' toast.  If
.B TAP-adapter
is omitted, all TAP adaptas on tha system is ghon be configured ta allow
non-admin access.
Da non-admin access settin will only persist fo' tha length of time that
the TAP-Win32 thang object n' driver remain loaded, n' will need
to be re-enabled afta a reboot, or if tha driver is unloaded
and reloaded.
This directizzle can only be used by a administrator.
.\"*********************************************************
.TP
.B \-\-show-valid-subnets
(Standalone)
Show valid subnets for
.B \-\-dev tun
emulation. I aint talkin' bout chicken n' gravy biatch.  Since tha TAP-Win32 driver
exports a ethernet intercourse ta Windows, n' since TUN devices are
point-to-point up in nature, it is necessary fo' tha TAP-Win32 driver
to impose certain constraints on TUN endpoint address selection.

Namely, tha point-to-point endpoints used up in TUN thang emulation
must be tha middle two addressez of a /30 subnet (netmask 255.255.255.252).
.\"*********************************************************
.TP
.B \-\-show-net
(Standalone)
Show OpenVPNz view of tha system routin table n' network
adapta list.
.\"*********************************************************
.SS PKCS#11 Standalone Options:
.\"*********************************************************
.TP
.B \-\-show-pkcs11-idz provider [cert_private]
(Standalone)
Show PKCS#11 token object list. Right back up in yo muthafuckin ass. Specify cert_private as 1
if certificates is stored as private objects.

.B \-\-verb
option can be used BEFORE dis option ta produce debuggin shiznit.
.\"*********************************************************
.SS IPv6 Related Options
.\"*********************************************************
Da followin options exist ta support IPv6 tunnelin up in peer-to-peer
and client-server mode.  All options is modeled afta they IPv4
counterparts, so mo' detailed explanations given there apply here
as well (except for
.B \-\-topology
, which has no effect on IPv6).
.TP
.B --ifconfig-ipv6 ipv6addr/bits ipv6remote
configure IPv6 address
.B ipv6addr/bits
on tha ``tun'' device.  Da second parameta is used as route target for
.B --route-ipv6
if no gateway is specified.
.TP
.B --route-ipv6 ipv6addr/bits [gateway] [metric]
setup IPv6 routin up in tha system ta bust tha specified IPv6 network
into OpenVPNz ``tun'' device
.TP
.B --server-ipv6 ipv6addr/bits
convenience-function ta enable a fuckin shitload of IPv6 related options at
once, namely
.B --ifconfig-ipv6, --ifconfig-ipv6-pool, --tun-ipv6
and
.B --push tun-ipv6
Is only accepted if ``--mode server'' or ``--server'' is set.
.TP
.B --ifconfig-ipv6-pool ipv6addr/bits
Specify a IPv6 address pool fo' dynamic assignment ta clients, n' you can put dat on yo' toast.  The
pool starts at
.B ipv6addr
and increments by +1 fo' every last muthafuckin freshly smoked up client (linear mode).  The
.B /bits
settin controls tha size of tha pool.  Cuz of implementation details,
the pool size must be between /64 n' /112.
.TP
.B --ifconfig-ipv6-push ipv6addr/bits ipv6remote
for ccd/ per-client static IPv6 intercourse configuration, see
.B --client-config-dir
and
.B --ifconfig-push
for mo' details.
.TP
.B --iroute-ipv6 ipv6addr/bits
for ccd/ per-client static IPv6 route configuration, see
.B --iroute
for mo' details how tha fuck ta setup n' use this, n' how
.B --iroute
and
.B --route
interact.

.\"*********************************************************
.SH SCRIPTING AND ENVIRONMENTAL VARIABLES
OpenVPN exports a series
of environmenstrual variablez fo' use by user-defined scripts.
.\"*********************************************************
.SS Script Order of Execution
.\"*********************************************************
.TP
.B \-\-up
Executed afta TCP/UDP socket bind n' TUN/TAP open.
.\"*********************************************************
.TP
.B \-\-tls-verify
Executed when our crazy asses gotz a still untrusted remote peer.
.\"*********************************************************
.TP
.B \-\-ipchange
Executed afta connection authentication, or remote IP address chizzle.
.\"*********************************************************
.TP
.B \-\-client-connect
Executed in
.B \-\-mode server
mode immediately afta client authentication.
.\"*********************************************************
.TP
.B \-\-route-up
Executed afta connection authentication, either
immediately after, or some number of secondz after
as defined by the
.B \-\-route-delay
option.
.\"*********************************************************
.TP
.B \-\-route-pre-down
Executed right before tha routes is removed.
.\"*********************************************************
.TP
.B \-\-client-disconnect
Executed in
.B \-\-mode server
mode on client instizzle shutdown.
.\"*********************************************************
.TP
.B \-\-down
Executed afta TCP/UDP n' TUN/TAP close.
.\"*********************************************************
.TP
.B \-\-learn-address
Executed in
.B \-\-mode server
mode whenever a IPv4 address/route or MAC address be added ta OpenVPN's
internal routin table.
.\"*********************************************************
.TP
.B \-\-auth-user-pass-verify
Executed in
.B \-\-mode server
mode on freshly smoked up client connections, when tha client is
still untrusted.
.\"*********************************************************
.SS Strin Types n' Remapping
In certain cases, OpenVPN will big-ass up remappin of characters
in strings.  Essentially, any charactas outside tha set of
permitted charactas fo' each strang type is ghon be converted
to underbar ('_').

.B Q:
Why is strang remappin necessary?

.B A:
It aint nuthin but a blingin securitizzle feature ta prevent tha malicious codin of
strings from untrusted sources ta be passed as parametas ta scripts,
saved up in tha environment, used as a cold-ass lil common name, translated ta a gangbangin' filename,
etc.

.B Q:
Can strang remappin be disabled?

.B A:
Yes, by rockin the
.B \-\-no-name-remapping
option, however dis should be considered a advanced option.

Here be a funky-ass brief rundown of OpenVPNz current strang types n' tha 
permitted characta class fo' each string:

.B X509 Names:
Alphanumeric, underbar ('_'), dash ('-'), dot ('.'), at 
('@'), colon (':'), slash ('/'), n' equal ('=').  Alphanumeric is defined 
as a cold-ass lil characta which will cause tha C library isalnum() function ta return 
true.

.B Common Names:
Alphanumeric, underbar ('_'), dash ('-'), dot ('.'), n' at                
('@').

.B \-\-auth-user-pass username:
Same as Common Name, wit one exception: startin wit OpenVPN 2.0.1,
the username is passed ta tha OPENVPN_PLUGIN_AUTH_USER_PASS_VERIFY plugin up in its raw form,
without strang remapping.

.B \-\-auth-user-pass password:
Any "printable" characta except CR or LF.  
Printable is defined ta be a cold-ass lil characta which will cause tha C library 
isprint() function ta return true.

.B \-\-client-config-dir filename as derived from common name or username:
Alphanumeric, underbar ('_'), dash ('-'), n' dot ('.') except fo' "." or 
".." as standalone strings.  Az of 2.0.1-rc6, tha at ('@') characta has
been added as well fo' compatibilitizzle wit tha common name characta class.

.B Environmenstrual variable names:
Alphanumeric or underbar ('_').

.B Environmenstrual variable joints:
Any printable character.

For all cases, charactas up in a strang which is not thugz of tha legal 
characta class fo' dat strang type is ghon be remapped ta underbar ('_').
.\"*********************************************************
.SS Environmenstrual Variables
Once set, a variable is persisted
indefinitely until it is reset by a freshly smoked up value or a restart,

Az of OpenVPN 2.0-beta12, up in server mode, environmental
variablez set by OpenVPN
are scoped accordin ta tha client objects
they are
associated with, so there should not be any thangs with
scripts havin access ta stale, previously set variables
which refer ta different client instances.
.\"*********************************************************
.TP
.B bytes_received
Total number of bytes received from client durin VPN session.
Set prior ta execution of the
.B \-\-client-disconnect
script.
.\"*********************************************************
.TP
.B bytes_sent
Total number of bytes busted ta client durin VPN session.
Set prior ta execution of the
.B \-\-client-disconnect
script.
.\"*********************************************************
.TP
.B common_name
Da X509 common name of a authenticated client.
Set prior ta execution of
.B \-\-client-connect, \-\-client-disconnect,
and
.B \-\-auth-user-pass-verify
scripts.
.\"*********************************************************
.TP
.B config
Name of first
.B \-\-config
file.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B daemon
Set ta "1" if the
.B \-\-daemon
directizzle is specified, or "0" otherwise.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B daemon_log_redirect
Set ta "1" if the
.B \-\-log
or
.B \-\-log-append
directives is specified, or "0" otherwise.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B dev
Da actual name of tha TUN/TAP device, including
a unit number if it exists.
Set prior to
.B \-\-up
or
.B \-\-down
script execution.
.\"*********************************************************
.TP
.B foreign_option_{n}
An option pushed via
.B \-\-push
to a cold-ass lil client which do not natively support it,
such as
.B \-\-dhcp-option
on a non-Windows system, is ghon be recorded ta this
environmenstrual variable sequence prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_broadcast
Da broadcast address fo' tha virtual
ethernet segment which is derived from the
.B \-\-ifconfig
option when
.B \-\-dev tap
is used.
Set prior ta OpenVPN callin the
.I ifconfig
or
.I netsh
(windows version of ifconfig) commandz which
normally occurs prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_ipv6_local
Da local VPN endpoint IPv6 address specified up in the
.B \-\-ifconfig-ipv6
option (first parameter).
Set prior ta OpenVPN callin the
.I ifconfig
or
.I netsh
(windows version of ifconfig) commandz which
normally occurs prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_ipv6_netbits
Da prefix length of tha IPv6 network on tha VPN intercourse.  Derived from
the /nnn parameta of tha IPv6 address up in the
.B \-\-ifconfig-ipv6
option (first parameter).
Set prior ta OpenVPN callin the
.I ifconfig
or
.I netsh
(windows version of ifconfig) commandz which
normally occurs prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_ipv6_remote
Da remote VPN endpoint IPv6 address specified up in the
.B \-\-ifconfig-ipv6
option (second parameter).
Set prior ta OpenVPN callin the
.I ifconfig
or
.I netsh
(windows version of ifconfig) commandz which
normally occurs prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_local
Da local VPN endpoint IP address specified up in the
.B \-\-ifconfig
option (first parameter).
Set prior ta OpenVPN callin the
.I ifconfig
or
.I netsh
(windows version of ifconfig) commandz which
normally occurs prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_remote
Da remote VPN endpoint IP address specified up in the
.B \-\-ifconfig
option (second parameter) when
.B \-\-dev tun
is used.
Set prior ta OpenVPN callin the
.I ifconfig
or
.I netsh
(windows version of ifconfig) commandz which
normally occurs prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_netmask
Da subnet mask of tha virtual ethernet segment
that is specified as tha second parameta to
.B \-\-ifconfig
when
.B \-\-dev tap
is bein used.
Set prior ta OpenVPN callin the
.I ifconfig
or
.I netsh
(windows version of ifconfig) commandz which
normally occurs prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B ifconfig_pool_local_ip
Da local
virtual IP address fo' tha TUN/TAP tunnel taken from an
.B \-\-ifconfig-push
directizzle if specified, or otherwise from
the ifconfig pool (controlled by the
.B \-\-ifconfig-pool
config file directive).
Only set for
.B \-\-dev tun
tunnels.
This option is set on tha server prior ta execution
of the
.B \-\-client-connect
and
.B \-\-client-disconnect
scripts.
.\"*********************************************************
.TP
.B ifconfig_pool_netmask
The
virtual IP netmask fo' tha TUN/TAP tunnel taken from an
.B \-\-ifconfig-push
directizzle if specified, or otherwise from
the ifconfig pool (controlled by the
.B \-\-ifconfig-pool
config file directive).
Only set for
.B \-\-dev tap
tunnels.
This option is set on tha server prior ta execution
of the
.B \-\-client-connect
and
.B \-\-client-disconnect
scripts.
.\"*********************************************************
.TP
.B ifconfig_pool_remote_ip
Da remote
virtual IP address fo' tha TUN/TAP tunnel taken from an
.B \-\-ifconfig-push
directizzle if specified, or otherwise from
the ifconfig pool (controlled by the
.B \-\-ifconfig-pool
config file directive).
This option is set on tha server prior ta execution
of the
.B \-\-client-connect
and
.B \-\-client-disconnect
scripts.
.\"*********************************************************
.TP
.B link_mtu
Da maximum packet size (not includin tha IP header)
of tunnel data up in UDP tunnel transhiznit mode.
Set prior to
.B \-\-up
or
.B \-\-down
script execution.
.\"*********************************************************
.TP
.B local
The
.B \-\-local
parameter.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B local_port
Da local port number, specified by
.B \-\-port
or
.B \-\-lport.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B password
Da password provided by a cold-ass lil connectin client.
Set prior to
.B \-\-auth-user-pass-verify
script execution only when the
.B via-env
modifier is specified, n' deleted from tha environment
afta tha script returns.
.\"*********************************************************
.TP
.B proto
The
.B \-\-proto
parameter.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B remote_{n}
The
.B \-\-remote
parameter.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B remote_port_{n}
Da remote port number, specified by
.B \-\-port
or
.B \-\-rport.
Set on program initiation n' reset on SIGHUP.
.\"*********************************************************
.TP
.B route_net_gateway
Da pre-existin default IP gateway up in tha system routing
table.
Set prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B route_vpn_gateway
Da default gateway used by
.B \-\-route
options, as specified up in either the
.B \-\-route-gateway
option or tha second parameta to
.B \-\-ifconfig
when
.B \-\-dev tun
is specified.
Set prior to
.B \-\-up
script execution.
.\"*********************************************************
.TP
.B route_{parm}_{n}
A set of variablez which define each route ta be added, and
are set prior to
.B \-\-up
script execution.

.B parm
will be one of "network", "netmask", "gateway", or "metric".

.B n
is tha OpenVPN route number, startin from 1.

If tha network or gateway is resolvable DNS names,
their IP address translations is ghon be recorded rather
than they names as denoted on tha command line
or configuration file.
.\"*********************************************************
.TP
.B route_ipv6_{parm}_{n}
A set of variablez which define each IPv6 route ta be added, and
are set prior to
.B \-\-up
script execution.

.B parm
will be one of "network" or "gateway" ("netmask" is contained as "/nnn"
in tha route_ipv6_network_{n}, unlike IPv4 where it is passed up in a separate
environment variable).

.B n
is tha OpenVPN route number, startin from 1.

If tha network or gateway is resolvable DNS names,
their IP address translations is ghon be recorded rather
than they names as denoted on tha command line
or configuration file.
.\"*********************************************************
.TP
.B peer_cert
Temporary file name containin tha client certificate upon
connection. I aint talkin' bout chicken n' gravy biatch.  Useful up in conjunction wit --tls-verify
.\"*********************************************************
.TP
.B script_context
Set ta "init" or "restart" prior ta up/down script execution.
For mo' shiznit, see
documentation for
.B \-\-up.
.\"*********************************************************
.TP
.B script_type
Prior ta execution of any script, dis variable is set ta tha type of
script bein run. I aint talkin' bout chicken n' gravy biatch.  It can be one of tha following:
.B up, down, ipchange, route-up, tls-verify, auth-user-pass-verify,
.B client-connect, client-disconnect, 
or
.B learn-address.
Set prior ta execution of any script.
.\"*********************************************************
.TP
.B signal
Da reason fo' exit or restart.  Can be one of
.B sigusr1, sighup, sigterm, sigint, inactive
(controlled by
.B \-\-inactive
option),
.B ping-exit
(controlled by
.B \-\-ping-exit
option),
.B ping-restart
(controlled by
.B \-\-ping-restart
option),
.B connection-reset
(triggered on TCP connection reset),
.B error,
or
.B unknown
(unknown signal).  This variable is set just prior ta down script execution.
.\"*********************************************************
.TP
.B time_ascii
Client connection timestamp, formatted as a human-readable
time string.
Set prior ta execution of the
.B \-\-client-connect
script.
.\"*********************************************************
.TP
.B time_duration
Da duration (in seconds) of tha client session which is now
disconnecting.
Set prior ta execution of the
.B \-\-client-disconnect
script.
.\"*********************************************************
.TP
.B time_unix
Client connection timestamp, formatted as a unix integer
date/time value.
Set prior ta execution of the
.B \-\-client-connect
script.
.\"*********************************************************
.TP
.B tls_digest_{n}
Gotz Nuff tha certificate SHA1 fingerprint/digest hash value,
where
.B n
is tha verification level.  Only set fo' TLS connections.  Set prior
to execution of
.B \-\-tls-verify
script.
.\"*********************************************************
.TP
.B tls_id_{n}
A seriez of certificate fieldz from tha remote peer,
where
.B n
is tha verification level.  Only set fo' TLS connections.  Set prior
to execution of
.B \-\-tls-verify
script.
.\"*********************************************************
.TP
.B tls_serial_{n}
Da serial number of tha certificate from tha remote peer,
where
.B n
is tha verification level.  Only set fo' TLS connections.  Set prior
to execution of
.B \-\-tls-verify
script. This is up in tha form of a thugged-out decimal strang like "933971680", which is
suitable fo' bustin serial-based OCSP queries (with OpenSSL, do not
prepend "0x" ta tha string) If suttin' goes wack while reading
the value from tha certificate it is ghon be a empty string, so your
code should check dis shit.
See tha contrib/OCSP_check/OCSP_check.sh script fo' a example.
.\"*********************************************************
.TP
.B tls_serial_hex_{n}
Like
.B tls_serial_{n}\fR,
but up in hex form (e.g. "12:34:56:78:9A").
.\"*********************************************************
.TP
.B tun_mtu
Da MTU of tha TUN/TAP device.
Set prior to
.B \-\-up
or
.B \-\-down
script execution.
.\"*********************************************************
.TP
.B trusted_ip (or trusted_ip6)
Actual IP address of connectin client or peer which has been authenticated.
Set prior ta execution of
.B \-\-ipchange, \-\-client-connect,
and
.B \-\-client-disconnect
scripts.
If rockin ipv6 endpoints (udp6, tcp6),
.B trusted_ip6
will be set instead.
.\"*********************************************************
.TP
.B trusted_port
Actual port number of connectin client or peer which has been authenticated.
Set prior ta execution of
.B \-\-ipchange, \-\-client-connect,
and
.B \-\-client-disconnect
scripts.
.\"*********************************************************
.TP
.B untrusted_ip (or untrusted_ip6)
Actual IP address of connectin client or peer which has not been authenticated
yet.  Sometimes used to
.B nmap
the connectin host up in a
.B \-\-tls-verify
script ta ensure it is firewalled properly.
Set prior ta execution of
.B \-\-tls-verify
and
.B \-\-auth-user-pass-verify
scripts.
If rockin ipv6 endpoints (udp6, tcp6),
.B untrusted_ip6
will be set instead.
.\"*********************************************************
.TP
.B untrusted_port
Actual port number of connectin client or peer which has not been authenticated
yet.
Set prior ta execution of
.B \-\-tls-verify
and
.B \-\-auth-user-pass-verify
scripts.
.\"*********************************************************
.TP
.B username
Da username provided by a cold-ass lil connectin client.
Set prior to
.B \-\-auth-user-pass-verify
script execution only when the
.B via-env
modifier is specified.
.\"*********************************************************
.TP
.B X509_{n}_{subject_field}
An X509 subject field from tha remote peer certificate,
where
.B n
is tha verification level.  Only set fo' TLS connections.  Set prior
to execution of
.B \-\-tls-verify
script.  This variable is similar to
.B tls_id_{n}
except tha component X509 subject fieldz is fucked up out, and
no strang remappin occurs on these field joints (except fo' remapping
of control charactas ta "_").
For example, tha followin variablez would be set on the
OpenVPN server rockin tha sample client certificate
in sample-keys (client.crt).
Note dat tha verification level is 0 fo' tha client certificate
and 1 fo' tha CA certificate.

.nf
.ft 3
.in +4
X509_0_emailAddress=me@myhost.mydomain
X509_0_CN=Test-Client
X509_0_O=OpenVPN-TEST
X509_0_ST=NA
X509_0_C=KG
X509_1_emailAddress=me@myhost.mydomain
X509_1_O=OpenVPN-TEST
X509_1_L=BISHKEK
X509_1_ST=NA
X509_1_C=KG
.in -4
.ft
.fi
.\"*********************************************************
.SH INLINE FILE SUPPORT
OpenVPN allows includin filez up in tha main configuration fo' the
.B \-\-ca, \-\-cert, \-\-dh, \-\-extra-certs, \-\-key, \-\-pkcs12, \-\-secret
and
.B \-\-tls-auth
options.

Each inline file started by tha line
.B <option>
and ended by tha line
.B </option>

Here be a example of a inline file usage

.nf
.ft 3
.in +4
<cert>
-----BEGIN CERTIFICATE-----
[...]
-----END CERTIFICATE-----
</cert>
.in -4
.ft
.fi

When rockin tha inline file feature with
.B \-\-pkcs12
the inline file has ta be base64 encoded. Y'all KNOW dat shit, muthafucka! Encodin of a .p12 file tha fuck into base64 can be done fo' example wit OpenSSL by hustlin
.B openssl base64 -in input.p12

.SH SIGNALS
.TP
.B SIGHUP
Cause OpenVPN ta close all TUN/TAP and
network connections,
restart, re-read tha configuration file (if any),
and reopen TUN/TAP n' network connections.
.\"*********************************************************
.TP
.B SIGUSR1
Like 
.B SIGHUP,
except don't re-read configuration file, n' possibly don't close n' reopen TUN/TAP
device, re-read key files, preserve local IP address/port, or preserve most recently authenticated
remote IP address/port based on
.B \-\-persist-tun, \-\-persist-key, \-\-persist-local-ip,
and
.B \-\-persist-remote-ip
options respectively (see above).

This signal may also be internally generated by a timeout condition, governed
by the
.B \-\-ping-restart
option.

This signal, when combined with
.B \-\-persist-remote-ip,
may be
sent when tha underlyin parametaz of tha hostz network intercourse chizzle
like fuckin when tha host be a DHCP client n' be assigned a freshly smoked up IP address.
See
.B \-\-ipchange
above fo' mo' shiznit.
.\"*********************************************************
.TP
.B SIGUSR2
Causes OpenVPN ta display its current statistics (to tha syslog
file if
.B \-\-daemon
is used, or stdout otherwise).
.\"*********************************************************
.TP
.B SIGINT, SIGTERM
Causes OpenVPN ta exit gracefully.
.\"*********************************************************
.SH TUN/TAP DRIVER SETUP
If yo ass is hustlin Linux 2.4.7 or higher, you probably have tha TUN/TAP driver
already installed. Y'all KNOW dat shit, muthafucka!  If so, there be still all dem thangs you need ta do:

Make device:
.B mknod /dev/net/tun c 10 200

Load driver:
.B modprobe tun
.\"*********************************************************
.SH EXAMPLES
Prior ta hustlin these examples, you should have OpenVPN installed on two
machines wit network connectivitizzle between em.  If you have not
yet installed OpenVPN, consult tha INSTALL file included up in tha OpenVPN
distribution.
.\"*********************************************************
.SS TUN/TAP Setup:
If yo ass is rockin Linux 2.4 or higher,
make tha tun thang node n' load tha tun module:
.IP
.B mknod /dev/net/tun c 10 200
.LP
.IP
.B modprobe tun
.LP
If you installed from RPM, the
.B mknod
step may be omitted, cuz tha RPM install do dat fo' yo thugged-out ass.

Only Linux 2.4 n' newer is supported.

For other platforms, consult tha INSTALL file at
.I http://openvpn.net/install.html
for mo' shiznit.
.\"*********************************************************
.SS Firewall Setup:
If firewalls exist between
the two machines, they should be set ta forward UDP port 1194
in both directions.  If you aint gots control over tha firewalls
between tha two machines, you may still be able ta use OpenVPN by adding
.B \-\-pin 15
to each of the
.B openvpn
commandz used below up in tha examplez (this will cause each peer ta bust out
a UDP pin ta its remote peer once every last muthafuckin 15 secondz which will cause many
stateful firewalls ta forward packets up in both directions
without a explicit firewall rule).

If yo ass is rockin a Linux iptables-based firewall, you may need ta enter
the followin command ta allow incomin packets on tha TUN device:
.IP
.B iptablez -A INPUT -i tun+ -j ACCEPT
.LP
See tha firewalls section below fo' mo' shiznit on configurin firewalls
for use wit OpenVPN.
.\"*********************************************************
.SS VPN Address Setup:
For purposes
of our example, our two machines is ghon be called
.B may.kg
and
.B june.kg.
If yo ass is constructin a VPN over tha internet, then replace
.B may.kg
and
.B june.kg
with tha internizzle hostname or IP address dat each machine will use
to contact tha other over tha internet.

Now we will chizzle tha tunnel endpoints, n' you can put dat on yo' toast.  Tunnel endpoints are
private IP addresses dat only have meanin up in tha context of
the VPN.  Each machine will use tha tunnel endpoint of tha other
machine ta access it over tha VPN.  In our example,
the tunnel endpoint fo' may.kg
will be 10.4.0.1 n' fo' june.kg, 10.4.0.2.

Once tha VPN is established, you have essentially
created a secure alternate path between tha two hosts
which be addressed by rockin tha tunnel endpoints, n' you can put dat on yo' toast.  Yo ass can
control which network
traffic passes between tha hosts 
(a) over tha VPN or (b) independently of tha VPN, by choosin whether ta use
(a) tha VPN endpoint address or (b) tha hood internizzle address,
to access tha remote host. For example if yo ass is on may.kg n' you wish ta connect ta june.kg
via
.B ssh
without rockin tha VPN (since
.B ssh
has its own built-in security) you would use tha command
.B ssh june.kg.
However up in tha same scenario, you could also use tha command
.B telnet 10.4.0.2
to create a telnet session wit june.kg over tha VPN, dat would
use tha VPN ta secure tha session rather than
.B ssh.

Yo ass can use any address you wish fo' the
tunnel endpoints
but make shizzle dat they is private addresses
(like fuckin dem dat begin wit 10 or 192.168) n' dat they are
not part of any existin subnet on tha networks of
either peer, unless yo ass is bridging.  If you use a address dat is part of
your local subnet fo' either of tha tunnel endpoints,
you will git a weird feedback loop.
.\"*********************************************************
.SS Example 1: A simple tunnel without security
.LP
On may:
.IP
.B openvpn \-\-remote june.kg \-\-dev tun1 \-\-ifconfig 10.4.0.1 10.4.0.2 \-\-verb 9
.LP
On june:
.IP
.B openvpn \-\-remote may.kg \-\-dev tun1 \-\-ifconfig 10.4.0.2 10.4.0.1 \-\-verb 9
.LP
Now verify tha tunnel is hustlin by pingin across tha tunnel.
.LP
On may:
.IP
.B pin 10.4.0.2
.LP
On june:
.IP
.B pin 10.4.0.1
.LP
The
.B \-\-verb 9
option will produce verbose output, similar ta the
.BR tcpdump (8)
program.  Omit the
.B \-\-verb 9
option ta have OpenVPN run on tha fuckin' down-lowly.
.\"*********************************************************
.SS Example 2: A tunnel wit static-key securitizzle (i.e. rockin a pre-shared secret)
First build a static key on may.
.IP
.B openvpn \-\-genkey \-\-secret key
.LP
This command will build a random key file called
.B key
(in ascii format).
Now copy
.B key
to june over a secure medium like fuckin by
usin the
.BR scp (1)
program.
.LP
On may:
.IP
.B openvpn \-\-remote june.kg \-\-dev tun1 \-\-ifconfig 10.4.0.1 10.4.0.2 \-\-verb 5 \-\-secret key
.LP
On june:
.IP
.B openvpn \-\-remote may.kg \-\-dev tun1 \-\-ifconfig 10.4.0.2 10.4.0.1 \-\-verb 5 \-\-secret key
.LP
Now verify tha tunnel is hustlin by pingin across tha tunnel.
.LP
On may:
.IP
.B pin 10.4.0.2
.LP
On june:
.IP
.B pin 10.4.0.1
.\"*********************************************************
.SS Example 3: A tunnel wit full TLS-based security
For dis test, we will designate
.B may
as tha TLS client and
.B june
as tha TLS server.
.I Note dat client or server designation only has meanin fo' tha TLS subsystem.  It has no bearin on OpenVPNz peer-to-peer, UDP-based communication model.

First, build a separate certificate/key pair
for both may n' june (see above where
.B \-\-cert
is discussed fo' mo' info).  Then construct
Diffie Hellman parametas (see above where
.B \-\-dh
is discussed fo' mo' info).  Yo ass can also use the
included test filez client.crt, client.key,
server.crt, server.key n' ca.crt.
Da .crt filez is certificates/public-keys, tha .key
filez is private keys, n' ca.crt be a cold-ass lil certification
authoritizzle whoz ass has signed both
client.crt n' server.crt.  For Diffie Hellman
parametas you can use tha included file dh1024.pem.
.I Note dat all client, server, n' certificate authoritizzle certificates n' keys included up in tha OpenVPN distribution is straight-up insecure n' should be used fo' testin only.
.LP
On may:
.IP
.B openvpn \-\-remote june.kg \-\-dev tun1 \-\-ifconfig 10.4.0.1 10.4.0.2 \-\-tls-client \-\-ca ca.crt \-\-cert client.crt \-\-key client.key \-\-reneg-sec 60 \-\-verb 5
.LP
On june:
.IP
.B openvpn \-\-remote may.kg \-\-dev tun1 \-\-ifconfig 10.4.0.2 10.4.0.1 \-\-tls-server \-\-dh dh1024.pem \-\-ca ca.crt \-\-cert server.crt \-\-key server.key \-\-reneg-sec 60 \-\-verb 5
.LP
Now verify tha tunnel is hustlin by pingin across tha tunnel.
.LP
On may:
.IP
.B pin 10.4.0.2
.LP
On june:
.IP
.B pin 10.4.0.1
.LP
Notice the
.B \-\-reneg-sec 60
option we used above.  That  drops some lyrics ta OpenVPN ta renegotiate
the data channel keys every last muthafuckin minute.
Since we used
.B \-\-verb 5
above, yo big-ass booty is ghon peep status shiznit on each freshly smoked up key negotiation.

For thang operations, a key renegotiation interval of 60 seconds
is probably too frequent.  Omit the
.B \-\-reneg-sec 60
option ta use OpenVPNz default key renegotiation interval of one hour.
.\"*********************************************************
.SS Routing:
Assumin you can pin across tha tunnel,
the next step is ta route a real subnet over
the secure tunnel.  Suppose dat may n' june have two network
interfaces each, one connected
to tha internet, n' tha other ta a private
network.  Our goal is ta securely connect
both private networks.  Us thugs will assume dat mayz private subnet
is 10.0.0.0/24 n' junez is 10.0.1.0/24.
.LP
First, ensure dat IP forwardin is enabled on both peers.
On Linux, enable routing:
.IP
.B echo 1 > /proc/sys/net/ipv4/ip_forward
.LP
and enable TUN packet forwardin all up in tha firewall:
.IP
.B iptablez -A FORWARD -i tun+ -j ACCEPT
.LP
On may:
.IP
.B route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.4.0.2
.LP
On june:
.IP
.B route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.4.0.1
.LP
Now any machine on tha 10.0.0.0/24 subnet can
access any machine on tha 10.0.1.0/24 subnet
over tha secure tunnel (or vice versa).

In a thang environment, you could put tha route command(s)
in a script n' execute wit the
.B \-\-up
option.
.\"*********************************************************
.SH FIREWALLS
OpenVPNz usage of a single UDP port make it fairly firewall-friendly.
Yo ass should add a entry ta yo' firewall rulez ta allow incomin OpenVPN
packets, n' you can put dat on yo' toast.  On Linux 2.4+:
.IP
.B iptablez -A INPUT -p udp -s 1.2.3.4 \-\-dport 1194 -j ACCEPT
.LP
This will allow incomin packets on UDP port 1194 (OpenVPNz default UDP port)
from a OpenVPN peer at 1.2.3.4.

If yo ass is rockin HMAC-based packet authentication (the default up in any of
OpenVPNz secure modes), havin tha firewall filta on source
address can be considered optional, since HMAC packet authentication
is a much mo' secure method of verifyin tha authenticitizzle of
a packet source.  In dat case:
.IP
.B iptablez -A INPUT -p udp \-\-dport 1194 -j ACCEPT
.LP
would be adequate n' would not render tha host inflexible with
respect ta its peer havin a thugged-out dynamic IP address.

OpenVPN also works well on stateful firewalls.  In some cases, you may
not need ta add any static rulez ta tha firewall list if yo ass is
usin a stateful firewall dat knows how tha fuck ta track UDP connections.
If you specify
.B \-\-pin n,
OpenVPN is ghon be guaranteed
to bust a packet ta its peer at least once every
.B n
seconds.  If
.B n
is less than tha stateful firewall connection timeout, you can
maintain a OpenVPN connection indefinitely without explicit
firewall rules.

Yo ass should also add firewall rulez ta allow incomin IP traffic on
TUN or TAP devices such as:
.IP
.B iptablez -A INPUT -i tun+ -j ACCEPT
.LP
to allow input packets from tun devices,
.IP
.B iptablez -A FORWARD -i tun+ -j ACCEPT
.LP
to allow input packets from tun devices ta be forwarded to
other hosts on tha local network,
.IP
.B iptablez -A INPUT -i tap+ -j ACCEPT
.LP
to allow input packets from tap devices, and
.IP
.B iptablez -A FORWARD -i tap+ -j ACCEPT
.LP
to allow input packets from tap devices ta be forwarded to
other hosts on tha local network.

These rulez is secure if you use packet authentication,
since no incomin packets will arrive on a TUN or TAP
virtual device
unless they first pass a HMAC authentication test.
.\"*********************************************************
.SH FAQUIZZY
.I http://openvpn.net/faq.html
.\"*********************************************************
.SH HOWTO
For a mo' comprehensive guide ta settin up OpenVPN
in a thang setting, peep tha OpenVPN HOWTO at
.I http://openvpn.net/howto.html
.\"*********************************************************
.SH PROTOCOL
For a thugged-out description of OpenVPNz underlyin protocol,
see 
.I http://openvpn.net/security.html
.\"*********************************************************
.SH WEB
OpenVPNz wizzy joint be at
.I http://openvpn.net/

Go here ta downlizzle tha sickest fuckin version of OpenVPN, subscribe
to tha mailin lists, read tha mailin list
archives, or browse tha SVN repository.
.\"*********************************************************
.SH BUGS
Report all bugs ta tha OpenVPN crew <info@openvpn.net>.
.\"*********************************************************
.SH "SEE ALSO"
.BR dhcpcd (8),
.BR ifconfig (8),
.BR openssl (1),
.BR route (8),
.BR scp (1)
.BR ssh (1)
.\"*********************************************************
.SH NOTES 
.LP
This thang includes software pimped by the
OpenSSL Project (
.I http://www.openssl.org/
)

For mo' shiznit on tha TLS protocol, see
.I http://www.ietf.org/rfc/rfc2246.txt

For mo' shiznit on tha LZO real-time compression library see
.I http://www.oberhumer.com/opensource/lzo/
.\"*********************************************************
.SH COPYRIGHT
Copyright (C) 2002-2010 OpenVPN Technologies, Inc. This program is free software;
you can redistribute it and/or modify
it under tha termz of tha GNU General Public License version 2
as published by tha Jacked Software Foundation.
.\"*********************************************************
.SH AUTHORS
Jizzy Yonan <jim@yonan.net>
