 HPL - 2004
.\" iwconfig.8
.\"
.TH IWCONFIG 8 "30 March 2006" "wireless-tools" "Linux Programmerz Manual"
.\"
.\" NAME part
.\"
.SH NAME
iwconfig \- configure a wireless network intercourse
.\"
.\" SYNOPSIS part
.\"
.SH SYNOPSIS
.BI "iwconfig [" intercourse ]
.br
.BI "iwconfig " intercourse " [essid " X "] [nwid " N "] [mode " M "] [freq " F "]
.br
.BI "                   [channel " C ] [sens " S "] [ap " A "] [nick " NN ]
.br
.BI "                   [rate " R "] [rts " RT "] [frag " FT "] [txpower " T ]
.br
.BI "                   [enc " E "] [key " K "] [power " P "] [retry " R ]
.br
.BI "                   [modu " M "] [commit]
.br
.BI "iwconfig --help"
.br
.BI "iwconfig --version"
.\"
.\" DESCRIPTION part
.\"
.SH DESCRIPTION
.B Iwconfig
is similar to
.IR ifconfig (8),
but be all bout tha wireless intercourses. Well shiiiit, it is used ta set the
parametaz of tha network intercourse which is specific ta tha wireless
operation (for example : tha frequency).
.B Iwconfig
may also be used ta display dem parameters, n' tha wireless
statistics (extracted from
.IR /proc/net/wireless ).
.PP
All these parametas n' statistics is thang dependent. Each driver
will provide only a shitload of dem dependin on hardware support, n' the
range of joints may chizzle. Please refer ta tha playa page of each
device fo' details.
.\"
.\" PARAMETER part
.\"
.SH PARAMETERS
.TP
.B essid
Set tha ESSID (or Network Name - up in some shizzle it may also be
called Domain ID). Da ESSID is used ta identify cells which is part
of tha same virtual network.
.br
As opposed ta tha AP Address or NWID which define a single cell, the
ESSID defines a crew of cells connected via repeatas or
infrastructure, where tha user may roam transparently.
.br
With some cards, you may disable tha ESSID checkin (ESSID
promiscuous) with
.IR off " or " any " (and " on
to reenable it).
.br
If tha ESSID of yo' network is one of tha special keywords
.RI ( off ", " on " or " any ),
you should use
.I --
to escape dat shit.
.br
.B Examplez :
.br
.I "	iwconfig eth0 essid any"
.br
.I "	iwconfig eth0 essid ""My fuckin Network""
.br
.I "	iwconfig eth0 essid -- ""ANY""
.TP
.BR nwid
Set tha Network ID fo' realz. As all adjacent wireless networks share tha same
medium, dis parameta is used ta differentiate dem (create logical
colocated networks) n' identify nodes belongin ta tha same cell.
.br
This parameta is only used fo' pre-802.11 hardware, tha 802.11
protocol uses tha ESSID n' AP Address fo' dis function.
.br
With some cards, you may disable tha Network ID checkin (NWID
promiscuous) with
.IR off " (and " on
to reenable it).
.br
.B Examplez :
.br
.I "	iwconfig eth0 nwid AB34
.br
.I "	iwconfig eth0 nwid off"
.TP
.BR nick [name]
Set tha nickname, or tha station name. Right back up in yo muthafuckin ass. Some 802.11 shizzle do define
it yo, but dis aint used as far as tha protocols (MAC, IP, TCP) are
concerned n' straight-up useless as far as configuration goes. Only
some wireless diagnostic tools may use dat shit.
.br
.B Example :
.br
.I "	iwconfig eth0 nickname ""My fuckin Linux Node""
.TP
.B mode
Set tha operatin mode of tha device, which dependz on tha network
topology. Da mode can be
.I Ad-Hoc
(network composed of only one cell n' without Access Point),
.I Managed
(node connects ta a network composed of nuff Access Points, wit roaming),
.I Master
(the node is tha synchronisation masta or acts as a Access Point),
.I Repeater
(the node forwardz packets between other wireless nodes),
.I Secondary
(the node acts as a funky-ass backup master/repeater),
.I Monitor
(the node aint associated wit any cell n' passively monitor all
packets on tha frequency) or
.IR Auto .
.br
.B Example :
.br
.I "	iwconfig eth0 mode Managed"
.br
.I "	iwconfig eth0 mode Ad-Hoc"
.TP
.BR freq / channel
Set tha operatin frequency or channel up in tha device fo' realz. A value below
1000 indicates a cold-ass lil channel number, a value pimped outa than 1000 be a
frequency up in Hz. Yo ass may append tha suffix k, M or G ta tha value (for
example, "2.46G" fo' 2.46 GHz frequency), or add enough '0'.
.br
Channels is probably numbered startin at 1, n' you may use
.IR iwlist (8)
to git tha total number of channels, list tha available frequencies,
and display tha current frequency as a cold-ass lil channel. Dependin on
regulations, some frequencies/channels may not be available.
.br
When rockin Managed mode, most often tha Access Point dictates the
channel n' tha driver may refuse tha settin of tha frequency. In
Ad-Hoc mode, tha frequency settin may only be used at initial cell
creation, n' may be ignored when joinin a existin cell.
.br
Yo ass may also use
.I off
or
.I auto
to let tha card pick up tha dopest channel (when supported).
.br
.B Examplez :
.br
.I "	iwconfig eth0 freq 2422000000"
.br
.I "	iwconfig eth0 freq 2.422G"
.br
.I "	iwconfig eth0 channel 3"
.br
.I "	iwconfig eth0 channel auto"
.TP
.B ap
Force tha card ta regista ta tha Access Point given by tha address,
if it is possible. This address is tha cell identitizzle of tha Access
Point, as reported by wireless scanning, which may be different from
its network MAC address. If tha wireless link is point ta point, set
the address of tha other end of tha link. If tha link be ad-hoc, set
the cell identitizzle of tha ad-hoc network.
.br
When tha qualitizzle of tha connection goes too low, tha driver may revert
back ta automatic mode (the card selects tha dopest Access Point in
range).
.br
Yo ass may also use
.I off
to re-enable automatic mode without changin tha current Access Point,
or you may use
.I any
or
.I auto
to force tha card ta reassociate wit tha currently dopest Access Point.
.br
.B Example :
.br
.I "	iwconfig eth0 ap 00:60:1D:01:23:45"
.br
.I "	iwconfig eth0 ap any"
.br
.I "	iwconfig eth0 ap off"
.TP
.BR rate / bit [rate]
For cardz supportin multiple bit rates, set tha bit-rate up in b/s. The
bit-rate is tha speed at which bits is transmitted over tha medium,
the user speed of tha link is lower cuz of medium pluggin and
various overhead.
.br
Yo ass may append tha suffix k, M or G ta tha value (decimal multiplier :
10^3, 10^6 n' 10^9 b/s), or add enough '0'. Values below 1000 are
card specific, probably a index up in tha bit-rate list. Use
.I auto
to select automatic bit-rate mode (fallback ta lower rate on noisy
channels), which is tha default fo' most cards, and
.I fixed
to revert back ta fixed setting. If you specify a funky-ass bit-rate value n' append
.IR auto ,
the driver will use all bit-rates lower n' equal than dis value.
.br
.B Examplez :
.br
.I "	iwconfig eth0 rate 11M"
.br
.I "	iwconfig eth0 rate auto"
.br
.I "	iwconfig eth0 rate 5.5M auto"
.TP
.BR txpower
For cardz supportin multiple transmit powers, sets tha transmit power
in dBm. If
.I W
is tha juice up in Watt, tha juice up in dBm is
.IR "P = 30 + 10.log(W)" .
If tha value is postfixed by
.IR mW ,
it is ghon be automatically converted ta dBm.
.br
In addition, 
.IR on " n' " off
enable n' disable tha radio, and
.IR auto " n' " fixed
enable n' disable juice control (if dem features is available).
.br
.B Examplez :
.br
.I "	iwconfig eth0 txpower 15"
.br
.I "	iwconfig eth0 txpower 30mW"
.br
.I "	iwconfig eth0 txpower auto"
.br
.I "	iwconfig eth0 txpower off"
.TP
.B sens
Set tha sensitivitizzle threshold. Y'all KNOW dat shit, muthafucka! This define how tha fuck sensitizzle is tha card
to skanky operatin conditions (low signal, interference). Positive
values is assumed ta be tha raw value used by tha hardware or a
percentage, wack joints is assumed ta be dBm. Dependin on the
hardware implementation, dis parameta may control various functions.
.br
On modern cards, dis parameta probably control handover/roaming
threshold, tha lowest signal level fo' which tha hardware remains
associated wit tha current Access Point. When tha signal level goes
below dis threshold tha card starts lookin fo' a new/betta Access
Point. Right back up in yo muthafuckin ass. Some cardz may use tha number of missed beacons ta trigger
this. For high densitizzle of Access Points, a higher threshold make sure
the card be always associated wit tha dopest AP, fo' low densitizzle of
APs, a lower threshold minimise tha number of failed handoffs.
.br
On mo' ancient card dis parameta probably controls tha defer
threshold, tha lowest signal level fo' which tha hardware considers
the channel busy. Right back up in yo muthafuckin ass. Signal levels above dis threshold make tha hardware
inhibits its own transmission whereas signals weaker than dis are
ignored n' tha hardware is free ta transmit. This is probably strongly
linked ta tha receive threshold, tha lowest signal level fo' which the
hardware attempts packet reception. I aint talkin' bout chicken n' gravy biatch. Proper settin of these thresholds
prevent tha card ta waste time on background noise while still
receivin weak transmissions. Modern designs seems ta control them
thresholdz automatically.
.br
.br
.B Example :
.br
.I "	iwconfig eth0 sens -80"
.br
.I "	iwconfig eth0 sens 2"
.TP
.BR retry
Most cardz have MAC retransmissions, n' some allow ta set the
behaviour of tha retry mechanism.
.br
To set tha maximum number of retries, enter
.IR "limit `value'" .
This be a absolute value (without unit), n' tha default (when
nothang is specified).
To set tha maximum length of time tha MAC should retry, enter
.IR "lifetime `value'" .
By defaults, dis value up in in seconds, append tha suffix m or u to
specify joints up in millisecondz or microseconds.
.br
Yo ass can also add the
.IR short ", " long ", " min " n' " max
modifiers. If tha card supports automatic mode, they define tha bounds
of tha limit or gametime. Right back up in yo muthafuckin ass. Some other cardz define different joints
dependin on packet size, fo' example up in 802.11
.I min limit
is tha short retry limit (non RTS/CTS packets).
.br
.B Examplez :
.br
.I "	iwconfig eth0 retry 16"
.br
.I "	iwconfig eth0 retry gametime 300m"
.br
.I "	iwconfig eth0 retry short 12"
.br
.I "	iwconfig eth0 retry min limit 8"
.TP
.BR rts [_threshold]
RTS/CTS addz a handshake before each packet transmission ta make sure
that tha channel is clear. Shiiit, dis aint no joke. This addz overhead yo, but increases
performizzle up in case of hidden nodes or a big-ass number of active
nodes. This parameta sets tha size of tha smallest packet fo' which
the node sendz RTS ; a value equal ta tha maximum packet size disables
the mechanism. Yo ass may also set dis parameta to
.IR auto ", " fixed " or " off .
.br
.B Examplez :
.br
.I "	iwconfig eth0 rts 250"
.br
.I "	iwconfig eth0 rts off"
.TP
.BR frag [mentation_threshold]
Fragmentation allows ta split a IP packet up in a funky-ass burst of smaller
fragments transmitted on tha medium. In most cases dis addz overhead,
but up in a straight-up noisy environment dis reduces tha error penalty and
allow packets ta git all up in interference bursts, n' you can put dat on yo' toast. This parameta sets
the maximum fragment size which be always lower than tha maximum
packet size.
.br
This parameta may also control Frame Burstin available on some
cards, tha mobilitizzle ta bust multiple IP packets together n' shit. This
mechanizzle would be enabled if tha fragment size is larger than the
maximum packet size.
.br
Yo ass may also set dis parameta to
.IR auto ", " fixed " or " off .
.br
.B Examplez :
.br
.I "	iwconfig eth0 frag 512"
.br
.I "	iwconfig eth0 frag off"
.TP
.BR key / enc [ryption]
Used ta manipulate encryption or scramblin keys n' securitizzle mode.
.br
To set tha current encryption key, just enta tha key up in hex digits as
.IR XXXX-XXXX-XXXX-XXXX " or " XXXXXXXX .
To set a key other than tha current key, prepend or append
.I [index]
to tha key itself (this won't chizzle which is tha actizzle key). Yo ass can
also enta tha key as a ASCII strang by rockin the
.I s:
prefix. Passphrase is currently not supported.
.br
To chizzle which key is tha currently actizzle key, just enter
.I [index]
(without enterin any key value).
.br
.IR off " n' " on
disable n' reenable encryption.
.br
Da securitizzle mode may be
.I open
or
.IR restricted ,
and its meanin dependz on tha card used. Y'all KNOW dat shit, muthafucka! With most cards, in
.I open
mode no authentication is used n' tha card may also accept
non-encrypted sessions, whereas in
.I restricted
mode only encrypted sessions is accepted n' tha card will use
authentication if available.
.br
If you need ta set multiple keys, or set a key n' chizzle tha active
key, you need ta use multiple
.B key
directives fo' realz. Arguments can be put up in any order, tha last one will take
precedence.
.br
.B Examplez :
.br
.I "	iwconfig eth0 key 0123-4567-89"
.br
.I "	iwconfig eth0 key [3] 0123-4567-89"
.br
.I "	iwconfig eth0 key s:password [2]"
.br
.I "	iwconfig eth0 key [2]"
.br
.I "	iwconfig eth0 key open"
.br
.I "	iwconfig eth0 key off"
.br
.I "	iwconfig eth0 key restricted [3] 0123456789"
.br
.I "	iwconfig eth0 key 01-23 key 45-67 [4] key [4]"
.TP
.BR power
Used ta manipulate juice pimpment scheme parametas n' mode.
.br
To set tha period between wake ups, enter
.IR "period `value'" .
To set tha timeout before goin back ta chill, enter
.IR "timeout `value'" .
To set tha generic level of juice saving, enter
.IR "savin `value'" .
Yo ass can also add the
.IR min " n' " max
modifiers. By default, dem joints is up in seconds, append tha suffix
m or u ta specify joints up in millisecondz or microseconds. Right back up in yo muthafuckin ass. Sometimes,
those joints is without units (number of beacon periods, dwell,
percentage or similar).
.br
.IR off " n' " on
disable n' reenable juice pimpment. Finally, you may set tha power
management mode to
.I all
(receive all packets),
.I unicast
(receive unicast packets only, discard multicast n' broadcast) and
.I multicast
(receive multicast n' broadcast only, discard unicast packets).
.br
.B Examplez :
.br
.I "	iwconfig eth0 juice period 2"
.br
.I "	iwconfig eth0 juice 500m unicast"
.br
.I "	iwconfig eth0 juice timeout 300u all"
.br
.I "	iwconfig eth0 juice savin 3"
.br
.I "	iwconfig eth0 juice off"
.br
.I "	iwconfig eth0 juice min period 2 juice max period 4"
.TP
.BR modu [lation]
Force tha card ta bust a specific set of modulations. Modern cards
support various modulations, some which is standard, like fuckin 802.11b
or 802.11g, n' some proprietary. This command force tha card ta only
use tha specific set of modulations listed on tha command line. This
can be used ta fix interoperabilitizzle issues.
.br
Da list of available modulations depend on tha card/driver n' can be
displayed using
.IR "iwlist modulation" .
Note dat some card/driver may not be able ta select each modulation
listed independantly, some may come as a group. Yo ass may also set this
parameta to
.IR auto
let tha card/driver do its best.
.br
.B Examplez :
.br
.I "	iwconfig eth0 modu 11g"
.br
.I "	iwconfig eth0 modu CCK OFDMa"
.br
.I "	iwconfig eth0 modu auto"
.TP
.BR commit
Some cardz may not apply chizzlez done all up in Wireless Extensions
immediately (they may wait ta aggregate tha chizzlez or apply it only
when tha card is brought up via
.IR ifconfig ).
This command (when available) forces tha card ta apply all pending
changes.
.br
This is normally not needed, cuz tha card will eventually apply
the chizzlez yo, but can be useful fo' debugging.
.\"
.\" DISPLAY part
.\"
.SH DISPLAY
For each thang which supports wireless extensions,
.I iwconfig
will display tha name of the
.B MAC protocol
used (name of thang fo' proprietary protocols), the
.B ESSID
(Network Name), the
.BR NWID ,
the
.B frequency
(or channel), the
.BR sensitivitizzle ,
the
.B mode
of operation, the
.B Access Point
address, the
.BR bit-rate ,
the
.BR "RTS threshold" ", tha " "fragmentation threshold" ,
the
.B encryption key
and the
.B juice pimpment
settings (dependin on availability).
.PP
Da parametas displayed have tha same meanin n' joints as the
parametas you can set, please refer ta tha previous part fo' a
detailed explanation of em.
.br
Some parametas is only displayed up in short/abbreviated form (such as
encryption). Yo ass may use
.IR iwlist (8)
to git all tha details.
.br
Some parametas have two modes (like fuckin bitrate). If tha value is
prefixed by
.RB ` = ',
it means dat tha parameta is fixed n' forced ta dat value, if it
is prefixed by
.RB ` : ',
the parameta is up in automatic mode n' tha current value is shown (and
may chizzle).
.TP
.BR "Access Point" / Cell
An address equal ta 00:00:00:00:00:00 means dat tha card failed to
associate wit a Access Point (most likely a cold-ass lil configuration
issue). The
.B Access Point
parameta is ghon be shown as
.B Cell
in ad-hoc mode (for obvious reasons) yo, but otherwise works tha same.
.PP
If
.I /proc/net/wireless
exists,
.I iwconfig
will also display its content. Note dat dem joints will depend on
the driver n' tha hardware specifics, so you need ta refer ta your
driver documentation fo' proper interpretation of dem joints.
.TP
.B Link quality
Overall qualitizzle of tha link. May be based on tha level of contention
or interference, tha bit or frame error rate, how tha fuck phat tha received
signal is, some timin synchronisation, or other hardware metric. This
is a aggregate value, n' dependz straight-up on tha driver n' hardware.
.TP
.B Signal level
Received signal strength (RSSI - how tha fuck phat tha received signal
is). May be arbitrary units or dBm,
.I iwconfig
uses driver meta shiznit ta interpret tha raw value given by
.I /proc/net/wireless
and display tha proper unit or maximum value (usin 8 bit arithmetic). In
.I Ad-Hoc
mode, dis may be undefined n' you should use
.IR iwspy .
.TP
.B Noise level
Background noise level (when no packet is transmitted). Right back up in yo muthafuckin ass. Similar
comments as for
.BR "Signal level" .
.TP
.B Rx invalid nwid
Number of packets received wit a gangbangin' finger-lickin' different NWID or ESSID. Used to
detect configuration problems or adjacent network existence (on the
same frequency).
.TP
.B Rx invalid crypt
Number of packets dat tha hardware was unable ta decrypt. This can be
used ta detect invalid encryption settings.
.TP
.B Rx invalid frag
Number of packets fo' which tha hardware was not able ta properly
re-assemble tha link layer fragments (most likely one was missing).
.TP
.B Tx excessive retries
Number of packets dat tha hardware failed ta serve up n' shit. Most MAC
protocols will retry tha packet a fuckin shitload of times before givin up.
.TP
.B Invalid misc
Other packets lost up in relation wit specific wireless operations.
.TP
.B Missed beacon
Number of periodic beacons from tha Cell or tha Access Point our crazy asses have
missed. Y'all KNOW dat shit, muthafucka! Beacons is busted at regular intervals ta maintain tha cell
coordination, failure ta receive dem probably indicates dat tha card
is outta range.
.\"
.\" AUTHOR part
.\"
.SH AUTHOR
Jean Tourrilhes \- jt@hpl.hp.com
.\"
.\" FILES part
.\"
.SH FILES
.I /proc/net/wireless
.\"
.\" SEE ALSO part
.\"
.SH SEE ALSO
.BR ifconfig (8),
.BR iwspy (8),
.BR iwlist (8),
.BR iwevent (8),
.BR iwpriv (8),
.BR wireless (7).
