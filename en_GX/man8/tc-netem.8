.TH NETEM 8 "25 November 2011" "iproute2" "Linux"
.SH NAME
NetEm \- Network Emulator
.SH SYNOPSIS
.B "tc qdisc ... dev" 
.IR DEVICE " ] "
.BR "add netem" 
.I OPTIONS

.IR OPTIONS " := [ " LIMIT " ] [ " DELAY " ] [ " LOSS \
" ] [ " CORRUPT " ] [ " DUPLICATION " ] [ " REORDERING " ][ " RATE " ]"

.IR LIMIT " := "
.B limit
.I packets

.IR DELAY " := "
.BI delay 
.IR TIME " [ " JITTER " [ " CORRELATION " ]]]"
.br
       [ 
.BR distribution " { "uniform " | " aiiight " | " pareto " |  " paretonormal " } ]"

.IR LOSS " := "
.BR loss " { "
.BI random 
.IR PERCENT " [ " CORRELATION " ]  |"
.br
.RB "               " state
.IR p13 " [ " p31 " [ " p32 " [ " p23 " [ " p14 "]]]] |"
.br
.RB "               " gemodel
.IR p " [ " r " [ " 1-h " [ " 1-k " ]]] } "
.RB  " [ " ecn " ] "

.IR CORRUPT " := "
.B corrupt
.IR PERCENT " [ " CORRELATION " ]]"

.IR DUPLICATION " := "
.B duplicate
.IR PERCENT " [ " CORRELATION " ]]"

.IR REORDERING " := "
.B reorder
.IR PERCENT " [ " CORRELATION " ] [ "
.B gap 
.IR DISTANCE " ]"

.IR RATE " := "
.B rate
.IR RATE " [ " PACKETOVERHEAD " [ " CELLSIZE " [ " CELLOVERHEAD " ]]]]"
	

.SH DESCRIPTION
NetEm be a enhancement of tha Linux traffic control facilities
that allow ta add delay, packet loss, duplication n' mo' other
characteristics ta packets outgoin from a selected network
interface. NetEm is built rockin tha existin Qualitizzle Of Service (QOS)
and Differentiated Skillz (diffserv) facilitizzles up in tha Linux
kernel.

.SH netem OPTIONS
netem has tha followin options:

.SS limit packets

limits tha effect of selected options ta tha indicated number of next packets.

.SS delay
addz tha chosen delay ta tha packets outgoin ta chosen network intercourse. The
optionizzle parametas allows ta introduce a thugged-out delay variation n' a cold-ass lil correlation.
Delay n' jitta joints is expressed up in ms while correlation is cementage.

.SS distribution
allow tha user ta chizzle tha delay distribution. I aint talkin' bout chicken n' gravy biatch. If not specified, tha default
distribution is Normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. Additionizzle parametas allow ta consider thangs in
which network has variable delays dependin on traffic flows concurrin on the
same path, dat causes nuff muthafuckin delay peaks n' a tail.

.SS loss random
addz a independent loss probabilitizzle ta tha packets outgoin from tha chosen
network intercourse. Well shiiiit, it be also possible ta add a cold-ass lil correlation yo, but dis option
is now deprecated cuz of tha noticed wack behavior.

.SS loss state
addz packet losses accordin ta tha 4-state Markov rockin tha transition
probabilitizzles as input parameters. Da parameta p13 is mandatory n' if used
alone correspondz ta tha Bernoulli model. Da optionizzle parametas allows to
extend tha model ta 2-state (p31), 3-state (p23 n' p32) n' 4-state (p14).
State 1 correspondz ta phat reception, State 4 ta independent losses, State 3
to burst losses n' State 2 ta phat reception within a funky-ass burst.

.SS loss gemodel
addz packet losses accordin ta tha Gilbert-Elliot loss model or its special
cases (Gilbert, Simple Gilbert n' Bernoulli). To use tha Bernoulli model, the
only needed parameta is p while tha others is ghon be set ta tha default
values r=1-p, 1-h=1 n' 1-k=0. Da parametas needed fo' tha Simple Gilbert
model is two (p n' r), while three parametas (p, r, 1-h) is needed fo' the
Gilbert model n' four (p, r, 1-h n' 1-k) is needed fo' tha Gilbert-Elliot
model fo' realz. As known, p n' r is tha transizzle probabilitizzles between tha wack and
the phat states, 1-h is tha loss probabilitizzle up in tha wack state n' 1-k is the
loss probabilitizzle up in tha phat state.

.SS ecn
can be used optionally ta mark packets instead of droppin em fo' realz. A loss model
has ta be used fo' dis ta be enabled.

.SS corrupt
allows tha emulation of random noise introducin a error up in a random position
for a cold-ass lil chosen cement of packets, n' you can put dat on yo' toast. Well shiiiit, it be also possible ta add a cold-ass lil correlation
all up in tha proper parameter.

.SS duplicate
usin dis option tha chosen cement of packets is duplicated before queuing
them. Well shiiiit, it be also possible ta add a cold-ass lil correlation all up in tha proper parameter.

.SS reorder
to use reordering, a thugged-out delay option must be specified. Y'all KNOW dat shit, muthafucka! There is two ways ta use
this option (assumin 'delay 10ms' up in tha options list).

.B "reorder "
.I 25% 50%
.B "gap"
.I 5
.br
in dis first example, tha straight-up original gangsta 4 (gap - 1) packets is delayed by 10ms and
subsequent packets is busted immediately wit a probabilitizzle of 0.25 (with
correlation of 50% ) or delayed wit a probabilitizzle of 0.75 fo' realz. Afta a packet is
reordered, tha process restarts i.e. tha next 4 packets is delayed and
subsequent packets is busted immediately or delayed based on reordering
probability. To cause a repeatable pattern where every last muthafuckin 5th packet is reordered
reliably, a reorder probabilitizzle of 100% can be used.

.B reorder
.I 25% 50%
.br
in dis second example 25% of packets is busted immediately (with correlation of
50%) while tha others is delayed by 10 ms.

.SS rate
delay packets based on packet size n' be a replacement fo' 
.IR TBF .
Rate can be
specified up in common units (e.g. 100kbit). Optionizzle 
.I PACKETOVERHEAD 
(in bytes) specify a per packet overhead n' can be negatizzle fo' realz. A positizzle value can be
used ta simulate additionizzle link layer headaz fo' realz. A wack value can be used to
artificial strip tha Ethernet header (e.g. -14) and/or simulate a link layer
header compression scheme. Da third parameta - a unsigned value - specify
the cellsize. Cellsize can be used ta simulate link layer schemes fo' realz. ATM for
example has a payload cellsize of 48 bytes n' 5 byte per cell header n' shit. If a
packet is 50 byte then ATM must use two cells: 2 * 48 bytes payload includin 2
* 5 byte header, thus consume 106 byte on tha wire.  Da last optionizzle value
.I CELLOVERHEAD 
can be used ta specify per cell overhead - fo' our ATM example 5.
.I CELLOVERHEAD
can be negatizzle yo, but use wack joints wit caution.

Note dat rate throttlin is limited by nuff muthafuckin factors: tha kernel clock
granularitizzle avoid a slick shapin at a specific level. This will show up in
an artificial packet compression (bursts) fo' realz. Another influence factor is network
adapta buffers which can also add artificial delay.

.SH LIMITATIONS
Da main known limitation of Netem is related ta timer granularity, since
Linux aint a real-time operatin system.

.SH EXAMPLES
.PP
tc qdisc add dev eth0 root netem rate 5kbit 20 100 5
.RS 4
delay all outgoin packets on thang eth0 wit a rate of 5kbit, a per packet
overhead of 20 byte, a cold-ass lil cellsize of 100 byte n' a per celloverhead of 5 byte:
.RE

.SH SOURCES
.IP " 1. " 4
Hemminger S. , "Network Emulation wit NetEm", Open Source Development Lab,
April 2005
(http://devresources.linux-foundation.org/shemminger/netem/LCA2005_paper.pdf)

.IP " 2. " 4
Netem page from Linux foundation, (http://www.linuxfoundation.org/en/Net:Netem)

.IP " 3. " 4
Salsano S., Ludovici F., Ordine A., "Definizzle of a general n' intuitizzle loss
model fo' packet networks n' its implementation up in tha Netem module up in the
Linux kernel", available at http://netgroup.uniroma2.it/NetemCLG

.SH SEE ALSO
.BR tc (8),
.BR tc-tbf (8)

.SH AUTHOR
Netem was freestyled by Stephen Hemminger at Linux foundation n' is based on NISTnet.
This manpage was pimped by Fabio Ludovici <fabio.ludovici at yahoo dot it> and
Hagen Pizzle Pfeifer <hagen@jauu.net>
