.TH AUDITCTL: "8" "Aug 2014" "Red Hat" "System Administration Utilities"
.SH NAME
auditctl \- a utilitizzle ta assist controllin tha kernelz audit system
.SH SYNOPSIS
\fBauditctl\fP [\fIoptions\fP]
.SH DESCRIPTION
Da \fBauditctl\fP program is used ta configure kernel options related ta auditing, ta peep statuz of tha configuration, n' ta load discretionary audit rules.
.SH CONFIGURATION OPTIONS
.TP
.BI \-b\  backlog
Set max number of outstandin audit buffers allowed (Kernel Default=64) If all buffers is full, tha failure flag is consulted by tha kernel fo' action.
.TP
.BI \-\-backlog_wait_time \ \fIwait_time\fP
Set tha time fo' tha kernel ta wait (Kernel Default 60*HZ) when tha backlog_limit is reached before queuin mo' audit events ta be transferred ta auditd. Y'all KNOW dat shit, muthafucka! Da number must be pimped outa than or equal ta zero n' less dat 10 times tha default value.
.TP
.B \-c
Continue loadin rulez up in spite of a error. Shiiit, dis aint no joke. This summarizes tha thangs up in dis biatch of loadin tha rules. Da exit code aint gonna be success if any rule fails ta load.
.TP
.B \-D
Delete all rulez n' watches. This can take a key option (\-k), like a muthafucka.
.TP
\fB\-e\fP [\fB0\fP..\fB2\fP]
Set enabled flag. When \fB0\fP is passed, dis can be used ta temporarily disable auditing. When \fB1\fP is passed as a argument, it will enable auditing. To lock tha audit configuration so dat it can't be chizzled, pass a \fB2\fP as tha argument. Lockin tha configuration is intended ta be tha last command up in audit.rulez fo' mah playas wishin dis feature ta be actizzle fo' realz. Any attempt ta chizzle tha configuration up in dis mode is ghon be audited n' denied. Y'all KNOW dat shit, muthafucka! Da configuration can only be chizzled by rebootin tha machine.
.TP
\fB\-f\fP [\fB0\fP..\fB2\fP]
Set failure flag
\fB0\fP=silent \fB1\fP=printk \fB2\fP=panic. This option lets you determine how tha fuck you want tha kernel ta handle critical errors. Example conditions where dis flag is consulted includes: transmission errors ta userspace audit daemon, backlog limit exceeded, outta kernel memory, n' rate limit exceeded. Y'all KNOW dat shit, muthafucka! Da default value is \fB1\fP. Right back up in yo muthafuckin ass. Secure environments will probably wanna set dis ta \fB2\fP.
.TP
.B \-h
Help
.TP
.B \-i
Ignore errors when readin rulez from a gangbangin' file. This causes auditctl ta always return a success exit code.
.TP
.BI \-\-loginuid-immutable
This option  drops some lyrics ta tha kernel ta make loginuidz unchangeable once they is set. Changin loginuidz requires CAP_AUDIT_CONTROL. Right back up in yo muthafuckin ass. So, its not suttin' dat can be done by unprivileged users. Right back up in yo muthafuckin ass. Settin dis make loginuid tamper-proof yo, but can cause some problems up in certain kindz of containers.
.TP
.BI \-q\  mount-point,subtree
If you have a existin directory peep n' bind or move mount another subtree up in tha peeped subtree, you need ta tell tha kernel ta make tha subtree bein mounted equivalent ta tha directory bein watched. Y'all KNOW dat shit, muthafucka! If tha subtree be already mounted all up in tha time tha directory peep is issued, tha subtree be automatically tagged fo' watching. Please note tha comma separatin tha two joints, n' you can put dat on yo' toast. Omittin it will cause errors.
.TP
.BI \-r\  rate
Set limit up in lyrics/sec (\fB0\fP=none). If dis \fIrate\fP is non-zero n' is exceeded, tha failure flag is consulted by tha kernel fo' action. I aint talkin' bout chicken n' gravy biatch. Da default value is \fB0\fP.
.TP
.BI \-R\  file
Read rulez from a \fIfile\fP. Da rulez must be 1 per line n' up in tha order dat they is ta be executed in. I aint talkin' bout chicken n' gravy biatch. Da rule file must be owned by root n' not readable by other playas or it is ghon be rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da rule file may have comments embedded by startin tha line wit a '#' character n' shit. Rulez dat is read from a gangbangin' file is identical ta what tha fuck you would type on a cold-ass lil command line except they is not preceded by auditctl (since auditctl is tha one executin tha file) n' you would not use shell escapin since auditctl is readin tha file instead of bash.
.TP
.BI \-t
Trim tha subtrees afta a mount command.
.SH STATUS OPTIONS
.TP
.B \-l
List all rulez 1 per line. Two mo' options may be given ta dis command. Y'all KNOW dat shit, muthafucka! Yo ass can give either a key option (\-k) ta list rulez dat match a key or a (\-i) ta have a0 all up in a3 interpretted ta help determine tha syscall argument joints is erect .
.TP
.BI \-m\  text
Send a user space message tha fuck into tha audit system. This can only be done if you have CAP_AUDIT_WRITE capabilitizzle (normally tha root user has this). Da resultin event is ghon be tha USER type.
.TP
.B \-s
Report tha kernelz audit subsystem status. Well shiiiit, it will rap  tha in-kernel joints dat can be set by \fB-e\fP, \fB-f\fP, \fB-r\fP, n' \fB-b\fP options. Da pid value is tha process number of tha audit daemon. I aint talkin' bout chicken n' gravy biatch. Note dat a pid of 0 indicates dat tha audit daemon aint hustlin. Da lost entry will rap  how tha fuck nuff event recordz dat done been discarded cuz of tha kernel audit queue overflowing. Da backlog field  drops some lyrics ta how tha fuck nuff event recordz is currently queued waitin fo' auditd ta read em.
.TP
.BI \-v
Print tha version of auditctl.

.SH RULE OPTIONS
.TP
.BI \-a\  [ list,action | action,list ]
Append rule ta tha end of \fIlist\fP wit \fIaction\fP. Please note tha comma separatin tha two joints, n' you can put dat on yo' toast. Omittin it will cause errors. Da fieldz may be up in either order n' shit. Well shiiiit, it could be list,action or action,list. Da followin raps bout tha valid \fIlist\fP names:
.RS
.TP 12
.B task
Add a rule ta tha per task list. This rule list is used only all up in tha time a task is pimped -- when fork() or clone() is called by tha parent task. When rockin dis list, you should only use fieldz dat is known at task creation time, like fuckin tha uid, gid, etc.
.TP
.B exit
Add a rule ta tha syscall exit list. This list is used upon exit from a system call ta determine if a audit event should be pimped.
.TP
.B user
Add a rule ta tha user message filta list. This list is used by tha kernel ta filta events originatin up in user space before relayin dem ta tha audit daemon. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it should be noted dat tha only fieldz dat is valid are: uid, auid, gid, pid, subj_user, subj_role, subj_type, subj_sen, subj_clr, n' msgtype fo' realz. All other fieldz is ghon be treated as non-matching. Well shiiiit, it should be understood dat any event originatin from user space from a process dat has CAP_AUDIT_WRITE is ghon be recorded tha fuck into tha audit trail. This means dat da most thugged-out likely use fo' dis filta is wit rulez dat have a action of never since not a god damn thang has ta be done ta allow events ta be recorded.
.TP
.B exclude
Add a rule ta tha event type exclusion filta list. This list is used ta filta events dat you do not wanna see. For example, if you do not wanna peep any avc lyrics, you would rockin dis list ta record dis shit. Da message type dat you do not wish ta peep is given wit tha msgtype field. Y'all KNOW dat shit, muthafucka! 
.RE

Da followin raps bout tha valid \fIactions\fP fo' tha rule:
.RS
.TP 12
.B never
No audit recordz is ghon be generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This can be used ta suppress event generation. I aint talkin' bout chicken n' gravy biatch. In general, you want suppressions all up in tha top of tha list instead of tha bottom. This is cuz tha event triggers on tha straight-up original gangsta matchin rule.
.TP
.B always
Allocate a audit context, always fill it up in at syscall entry time, n' always write up a record at syscall exit time.
.RE
.TP
.BI \-A\  list , action
Add rule ta tha beginnin \fIlist\fP wit \fIaction\fP.
.TP
\fB\-C\fP [\fIf\fP\fB=\fP\fIf\fP | \fIf\fP\fB!=\fP\fIf\fP]
Build a inter-field comparison rule: field, operation, field. Y'all KNOW dat shit, muthafucka! Yo ass may pass multiple comparisons on a single command line. Each one must start wit \fB\-C\fP. Each inter-field equation be anded wit each other as well as equations startin wit \fB\-F\fP ta trigger a audit record. Y'all KNOW dat shit, muthafucka! There is 2 operators supported - equal, n' not equal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Valid fieldz are:
.RS
.TP 12
.B auid, uid, euid, suid, fsuid, obj_uid; n' gid, egid, sgid, fsgid, obj_gid
.RE

.RS
Da two crewz of uid n' gid cannot be mixed. Y'all KNOW dat shit, muthafucka! But any comparison within tha crew can be made. Da obj_uid/gid fieldz is collected from tha object of tha event like fuckin a gangbangin' file or directory.
.RE

.TP
.BI \-d\  list , action
Delete rule from \fIlist\fP wit \fIaction\fP. Da rule is deleted only if it exactly matches syscall name(s) n' every last muthafuckin field name n' value.
.TP
\fB\-F\fP [\fIn\fP\fB=\fP\fIv\fP | \fIn\fP\fB!=\fP\fIv\fP | \fIn\fP\fB<\fP\fIv\fP | \fIn\fP\fB>\fP\fIv\fP | \fIn\fP\fB<=\fP\fIv\fP | \fIn\fP\fB>=\fP\fIv\fP | \fIn\fP\fB&\fP\fIv\fP | \fIn\fP\fB&=\fP\fIv\fP]
Build a rule field: name, operation, value. Yo ass may have up ta 64 fieldz passed on a single command line. Each one must start wit \fB\-F\fP. Each field equation be anded wit each other (as well as equations startin wit \fB\-C\fP) ta trigger a audit record. Y'all KNOW dat shit, muthafucka! There is 8 operators supported - equal, not equal, less than, pimped outa than, less than or equal, n' pimped outa than or equal, bit mask, n' bit test respectively. Bit test will "and" tha joints n' check dat they is equal, bit mask just "ands" tha joints, n' you can put dat on yo' toast. Fieldz dat take a user ID may instead have tha userz name; tha program will convert tha name ta user ID. Da same is legit of crew names. Valid fieldz are:
.RS
.TP 12
.B a0, a1, a2, a3
Respectively, tha straight-up original gangsta 4 arguments ta a syscall. Note dat strang arguments is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is cuz tha kernel is passed a pointa ta tha string. Triggerin on a pointa address value aint likely ta work. Right back up in yo muthafuckin ass. So, when rockin this, you should only use on numeric joints, n' you can put dat on yo' toast. This is most likely ta be used on platforms dat multiplex socket or IPC operations.
.TP
.B arch
Da CPU architecture of tha syscall. Da arch can be found bustin 'uname \-m'. If you do not know tha arch of yo' machine but you wanna use tha 32 bit syscall table n' yo' machine supports 32 bit, you can also use
.B b32
for tha arch. Da same applies ta tha 64 bit syscall table, you can use
.B b64.
In dis way, you can write rulez dat is somewhat arch independent cuz tha crew type is ghon be auto detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. But fuck dat shiznit yo, tha word on tha street is dat syscalls can be arch specific n' what tha fuck be available on x86_64, may not be available on ppc. Da arch directizzle should precede tha \-S option so dat auditctl knows which internal table ta use ta look up tha syscall numbers.
.TP
.B auid
Da original gangsta ID tha user logged up in with. Its a abbreviation of audit uid. Y'all KNOW dat shit, muthafucka! Sometimes its referred ta as loginuid. Y'all KNOW dat shit, muthafucka! Either tha user account text or number may be used.
.TP
.B devmajor
Device Major Number
.TP
.B devminor
Device Minor Number
.TP
.B dir
Full Path of Directory ta watch. This will place a recursive peep on tha directory n' its whole subtree. Well shiiiit, it can only be used on exit list. Right back up in yo muthafuckin ass. See "\fB\-w\fP".
.TP
.B egid
Effectizzle Group ID. May be numeric or tha crews name.
.TP
.B euid
Effectizzle User ID. May be numeric or tha user account name.
.TP
.B exit
Exit value from a syscall. If tha exit code be a errno, you may use tha text representation, like a muthafucka.
.TP
.B fsgid
Filesystem Group ID. May be numeric or tha crews name.
.TP
.B fsuid
Filesystem User ID. May be numeric or tha user account name.
.TP
.B filetype
Da target filez type. Can be either file, dir, socket, link, character, block, or fifo.
.TP
.B gid
Group ID. May be numeric or tha crews name.
.TP
.B inode
Inode Number
.TP
.B key
This be another way of settin a gangbangin' filta key. Right back up in yo muthafuckin ass. See rap above fo' \fB\-k\fP option.
.TP
.B msgtype
This is used ta match tha eventz record type. Well shiiiit, it should only be used on tha exclude or user filta lists.
.TP
.B obj_uid
Objectz UID
.TP
.B obj_gid
Objectz GID
.TP
.B obj_user
Resourcez SE Linux User
.TP
.B obj_role
Resourcez SE Linux Role
.TP
.B obj_type
Resourcez SE Linux Type
.TP
.B obj_lev_low
Resourcez SE Linux Low Level
.TP
.B obj_lev_high
Resourcez SE Linux High Level
.TP
.B path
Full Path of File ta watch. Well shiiiit, it can only be used on exit list.
.TP
.B perm
Permission filta fo' file operations. Right back up in yo muthafuckin ass. See "\fB\-p\fP". Well shiiiit, it can only be used on exit list. Yo ass can use dis without specifyin a syscall n' tha kernel will select tha syscalls dat satisfy tha permissions bein requested.
.TP
.B pers
OS Personalitizzle Number
.TP
.B pid
Process ID
.TP
.B ppid
Parentz Process ID
.TP
.B subj_user
Programz SE Linux User
.TP
.B subj_role
Programz SE Linux Role
.TP
.B subj_type
Programz SE Linux Type
.TP
.B subj_sen
Programz SE Linux Sensitivity
.TP
.B subj_clr
Programz SE Linux Clearance
.TP
.B sgid
Saved Group ID. Right back up in yo muthafuckin ass. See getresgid(2) playa page.
.TP
.B success
If tha exit value is >= 0 dis is true/yes otherwise its false/no. When freestylin a rule, bust a 1 fo' true/yes n' a 0 fo' false/no
.TP
.B suid
Saved User ID. Right back up in yo muthafuckin ass. See getresuid(2) playa page.
.TP
.B uid
User ID. May be numeric or tha user account name.
.RE
.TP
.BI \-k\  key
Set a gangbangin' filta key on a audit rule. Da filta key be a arbitrary strang of text dat can be up ta 31 bytes long. Well shiiiit, it can uniquely identify tha audit recordz produced by a rule. Typical use is fo' when you have nuff muthafuckin rulez dat together satisfy a securitizzle requirement. Da key value can be searched on wit ausearch so dat no matta which rule triggered tha event, you can find its thangs up in dis biatch. Da key can also be used on delete all (\-D) n' list rulez (\-l) ta select rulez wit a specific key. Yo ass may have mo' than one key on a rule if you wanna be able ta search logged events up in multiple ways or if you have a audispd plugin dat uses a key ta aid its analysis.
.TP
\fB\-p\fP [\fBr\fP|\fBw\fP|\fBx\fP|\fBa\fP]
Describe tha permission access type dat a gangbangin' file system peep will trigger on. I aint talkin' bout chicken n' gravy biatch. \fBr\fP=read, \fBw\fP=write, \fBx\fP=execute, \fBa\fP=attribute chizzle. These permissions is not tha standard file permissions yo, but rather tha kind of syscall dat would do dis kind of thang. Da read & write syscalls is omitted from dis set since they would overwhelm tha logs. But rather fo' readz or writes, tha open flags is looked at ta peep what tha fuck permission was requested.
.TP
\fB\-S\fP [\fISyscall name or number\fP|\fBall\fP]
Any \fIsyscall name\fP or \fInumber\fP may be used. Y'all KNOW dat shit, muthafucka! Da word '\fBall\fP' may also be used. Y'all KNOW dat shit, muthafucka!  If tha given syscall is made by a program, then start a audit record. Y'all KNOW dat shit, muthafucka! If a gangbangin' field rule is given n' no syscall is specified, it will default ta all syscalls. Yo ass may also specify multiple syscalls up in tha same rule by rockin multiple \-S options up in tha same rule. Bustin so improves performizzle since fewer rulez need ta be evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Alternatively, you may pass a cold-ass lil comma separated list of syscall names. If yo ass is on a funky-ass bi-arch system, like x86_64, you should be aware dat auditctl simply takes tha text, looks it up fo' tha natizzle arch (in dis case b64) n' sendz dat rule ta tha kernel. If there be no additionizzle arch directives, IT WILL APPLY TO BOTH 32 & 64 BIT SYSCALLS. This can have undesirable effects since there is no guarantee dat any syscall has tha same ol' dirty number on both 32 n' 64 bit intercourses. Yo ass will likely wanna control dis n' write 2 rules, one wit arch equal ta b32 n' one wit b64 ta make shizzle tha kernel findz tha events dat you intend yo, but it ain't no stoppin cause I be still poppin'. Right back up in yo muthafuckin ass. See tha arch field rap fo' mo' info.
.TP
.BI \-w\  path
Insert a peep fo' tha file system object at \fIpath\fP. Yo ass cannot bang a peep ta tha top level directory. This is prohibited by tha kernel. Wildcardz is not supported either n' will generate a warning. Da way dat watches work is by trackin tha inode internally. If you place a peep on a gangbangin' file, its tha same ol' dirty as rockin tha \-F path option on a syscall rule. If you place a peep on a gangbangin' finger-lickin' directory, its tha same ol' dirty as rockin tha \-F dir option on a syscall rule. Da \-w form of freestylin watches is fo' backwardz compatibilitizzle n' tha syscall based form is mo' expressive. Unlike most syscall auditin rules, watches do not impact performizzle based on tha number of rulez busted ta tha kernel. Da only valid options when rockin a peep is tha \-p n' \-k. If you need ta anythang fancy like audit a specific user accessin a gangbangin' file, then use tha syscall auditin form wit tha path or dir fields. Right back up in yo muthafuckin ass. See tha EXAMPLES section fo' a example of convertin one form ta another.
.TP
.BI \-W\  path
Remove a peep fo' tha file system object at \fIpath\fP. Da rule must match exactly. Right back up in yo muthafuckin ass. See \fB-d\fP rap fo' mo' info.
.SH "PERFORMANCE TIPS"
Syscall rulez git evaluated fo' each syscall fo' every last muthafuckin program. If you have 10 syscall rules, every last muthafuckin program on yo' system will delay durin a syscall while tha audit system evaluates each rule. Too nuff syscall rulez will hurt performance. Try ta combine as nuff as you can whenever tha filter, action, key, n' fieldz is identical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. For example:

.nf
.B auditctl \-a always,exit \-S openat \-F success=0
.fi
.nf
.B auditctl \-a always,exit \-S truncate \-F success=0
.fi

could be re-written as one rule:

.nf
.B auditctl \-a always,exit \-S openat \-S truncate \-F success=0
.fi

Also, try ta use file system auditin wherever practical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This improves performance. For example, if you was wantin ta capture all failed opens & truncates like above yo, but was only concerned bout filez up in /etc n' didn't care bout /usr or /sbin, its possible ta use dis rule:

.nf
.B auditctl \-a always,exit \-S openat \-S truncate \-F dir=/etc \-F success=0
.fi

This is ghon be higher performizzle since tha kernel aint gonna evaluate it each n' every last muthafuckin syscall. Well shiiiit, it is ghon be handled by tha filesystem auditin code n' only checked on filesystem related syscalls.
.SH "EXAMPLES"
To peep all syscalls made by a specific program:

.nf
.B auditctl \-a always,exit \-S all \-F pid=1005
.fi

To peep filez opened by a specific user:

.nf
.B auditctl \-a always,exit \-S openat \-F auid=510
.fi

To peep unsuccessful openat calls:

.nf
.B auditctl \-a always,exit \-S openat \-F success=0
.fi

To peep a gangbangin' file fo' chizzlez (2 ways ta express):

.nf
.B auditctl \-w /etc/shadow \-p wa
.B auditctl \-a always,exit \-F path=/etc/shadow \-F perm=wa
.fi

To recursively peep a gangbangin' finger-lickin' directory fo' chizzlez (2 ways ta express):

.nf
.B auditctl \-w /etc/ \-p wa
.B auditctl \-a always,exit \-F dir=/etc/ \-F perm=wa
.fi

To peep if a admin be accessin other userz files:

.nf
.B auditctl \-a always,exit \-F dir=/home/ \-F uid=0 \-C auid!=obj_uid
.fi

.SH FILES
.TP
.I /etc/audit/audit.rules

.SH "SEE ALSO"
.BR audit.rulez (7),
.BR auditd (8).

.SH AUTHOR
Steve Grubb
