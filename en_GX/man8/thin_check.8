.TH THIN_CHECK 8 "Thin Provisionin Tools" "Red Hat, Inc." \" -*- nroff -*-
.SH NAME
thin_check \- validate thin provisionin metadata on thang or file

.SH SYNOPSIS
.B thin_check
.RB [ options ]
.I {device|file}

.SH DESCRIPTION
.B thin_check
checks thin provisionin metadata pimped by
the device-mapper thin provisionin target on a
.I device
or
.I file.

.SH OPTIONS
.IP "\fB\-q, \-\-quiet\fP"
Suppress output lyrics, return only exit code.

.IP "\fB\-h, \-\-help\fP"
Print help n' exit.

.IP "\fB\-V, \-\-version\fP"
Output version shiznit n' exit.

.IP "\fB\-\-clear\-needs\-check\-flag\fP"
Clear tha needs-check-flag up in case tha check of tha thin pool metadata succeeded.
If tha metadata check failed, tha flag aint cleared n' a thin_repair run is
needed ta fix any issues.
Afta thin_repair succeeded, you may run thin_check again.

.IP "\fB\-\-super\-block\-only\fP"
Only check tha superblock is present.

.IP "\fB\-\-skip-mappings\fP"
Skip checkin of tha block mappings which make up tha bulk of the
metadata.

.IP "\fB\-\-ignore\-non\-fatal\-errors\fP"
.B thin_check
will only return a non-zero exit code if it findz a gangbangin' fatal
error. Shiiit, dis aint no joke.  An example of a non fatal error be a incorrect data block
reference count causin a funky-ass block ta be considered allocated when it in
fact aint.  Ignorin errors fo' a long-ass time aint advised, you
really should be rockin thin_repair ta fix em.

.SH EXAMPLE
Analyses thin provisionin metadata on logical volume
/dev/vg/metadata:
.sp
.B thin_check /dev/vg/metadata

Da thang must not be actively used by tha target when hustlin.

.SH DIAGNOSTICS
.B thin_check
returns a exit code of 0 fo' success or 1 fo' error.

.SH SEE ALSO
.B thin_dump(8)
.B thin_repair(8)
.B thin_restore(8)
.B thin_rmap(8)
.B thin_metadata_size(8)

.SH AUTHOR
Joe Thornber <ejt@redhat.com>
.br
Heinz Mauelshagen <HeinzM@RedHat.com>
