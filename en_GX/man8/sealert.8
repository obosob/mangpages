.TH "sealert" "8" "20061121" "" ""
.SH "NAME"
sealert \- seshitshoot client tool

.SH "SYNOPSIS"
.B sealert
.I [\-b] [-f local_id] [-h] [-s] [-S] [\-l id] [\-a file] [-u] [-p] [-P plugin_name]

.SH "DESCRIPTION"
This manual page raps bout the
.BR sealert
program.
.P
sealert is tha user intercourse component (either GUI or command line)
to tha seshitshoot system. seshitshoot is used ta diagnose
SELinux denials n' attempts ta provide user thugged-out explanations for
a SELinux denial (e.g fo' realz. AVC) n' recommendations fo' how tha fuck one might
adjust tha system ta prevent tha denial up in tha future.
.P
In a standard configuration seshitshoot is composed of two
components, seshitshootd n' sealert.
.P
seshitshootd be a system daemon which runs wit root privileges and
listens fo' audit events emitted from tha kernel related to
SELinux. Da audit daemon must be hustlin.  Da audit daemon sendz a thugged-out dbus 
message ta tha seshitshootd daemon when tha system gets a SELinux AVC 
denial. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da seshitshootd daemon then runs a seriez of analysis plugins 
which examines tha audit data related ta tha AVC. Well shiiiit, it recordz tha thangs up in dis biatch of 
the analysis n' signals any clients which have attached ta tha 
seshitshootd daemon dat a freshly smoked up alert has been seen.
.P
sealert can be run up in either a GUI mode or a cold-ass lil command line mode. In
both instances sealert run as a user process wit tha privileges
associated wit tha user n' shit. In GUI mode it attaches ta a seshitshootd
server instizzle n' listens fo' notificationz of freshly smoked up alerts, n' you can put dat on yo' toast. When a freshly smoked up alert 
arrives it alerts tha desktop user via a notification up in tha status icon area. 
Da user may then click on tha alert notification which will open a alert 
browser n' shit. In addizzle ta tha current alert sealert communicates wit tha 
seshitshootd daemon ta access all prior alerts stored up in tha seshitshoot
database.
.P
Da user may elect ta tag any given alert as "ignore" up in the
browser which prevents any future notification fo' tha given
alert. This is useful when a user be already aware of a reoccurring
problem. 
.P
sealert may also be run up in command line mode. Da two most useful
command line options is -l ta "lookup" a alert ID n' -a to
"analyze" a log file. When seshitshootd generates a freshly smoked up alert it
assigns it a local ID n' writes dis as a syslog message. Da -l
lookup option may then be used ta retrieve tha alert from the
seshitshootd alert database n' write it ta stdout. This is most
useful when seshitshootd is bein run on a headless system without
the GUI desktop alert facility. Da -a analyze option is equivalent to
the "Scan Logfile" command up in tha browser n' shit. Da log file is scanned for
audit lyrics, analysis is performed, alerts generated, n' then
written ta stdout. 

.SH "LOG FILE SCANNING"
Yo ass may ask sealert ta parse a gangbangin' file accumulatin all tha audit
lyrics it findz up in dat file fo' realz. As each audit event is recognized it
is presented fo' analysis which may generate a alert report if the
analysis was successful naaahhmean? If tha same type of event is peeped multiple times
resultin up in tha same report tha thangs up in dis biatch is coalesced tha fuck into a single
report. Da report count field will indicate tha number of times the
tool thought it saw tha same issue. Da report will also include a
list of every last muthafuckin line number on which it found a audit record which
contributed ta tha coalesced report. This will allow you ta coordinate
the contentz of tha file wit tha analysis thangs up in dis biatch if need be.
.P
Log file scannin may be initiated from tha sealert browser via the
File::ScanLogFile menu or from tha command line via 'sealert -a
filename'. Please note dat sealert runs as a user level process with
the permissionz of tha user hustlin dat shit. Many system log filez are
readable by root only. To work round dis if you have root access one
can copy tha file as root ta a temporary file n' chizzle its
permissions. This be a phat solution when scannin via tha GUI as a
normal user n' shit. Or you might consider su'in ta root n' run tha analysis
via tha command line (e.g. sealert -a filename).
.P
Da audit recordz up in tha log file must be valid syntactically erect
audit lyrics or tha parser will ignore em.

.SH "OPTIONS"
.TP 
.B \-b \-\-browser        
Launch tha browser
.TP 
.B \-f \-\-fix
Execute tha fix command fo' tha avc wit tha given uuid n' plugin, requires --plugin option.
.TP 
.B \-h \-\-help           
Show dis message
.TP 
.B \-s \-\-service        
Start sealert service,  Usually used by dbus.
.TP 
.B \-S \-\-noservice      
Start sealert without dbus steez as stand ridin' solo app
.TP 
.B \-l \-\-lookupid id    
Lookup alert by id, if id is wildcard * then return all alerts
.TP 
.B \-a \-\-analyze file   
Scan a log file, analyze its AVC's
.TP 
.B \-u \-\-user        
logon as user
.TP 
.B \-p \-\-password        
set user password
.TP 
.B \-P \-\-plugin
Set plugin name associated wit tha --fix option

.SH "AUTHOR"
This playa page was freestyled by Jizzy Dennis <jdennis@redhat.com> n' Don Juan Walsh <dwalsh@redhat.com>.

.SH "SEE ALSO"
.BR selinux (8),
