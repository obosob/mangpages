.TH DNSMASQ 8
.SH NAME
dnsmasq \- A lightweight DHCP n' cachin DNS server.
.SH SYNOPSIS
.B dnsmasq
.I [OPTION]...
.SH "DESCRIPTION"
.BR dnsmasq
is a lightweight DNS, TFTP, PXE, routa advertisement n' DHCP server n' shit. Well shiiiit, it is intended ta provide 
coupled DNS n' DHCP steez ta a LAN.
.PP
Dnsmasq accepts DNS queries n' either lyrics dem from a small, local,
cache or forwardz dem ta a real, recursive, DNS server n' shit. Well shiiiit, it loadz the
contentz of /etc/hosts so dat local hostnames
which do not step tha fuck up in tha global DNS can be resolved n' also lyrics
DNS queries fo' DHCP configured hosts, n' you can put dat on yo' toast. Well shiiiit, it can also act as tha authoritatizzle DNS server fo' one or mo' domains, allowin local names ta step tha fuck up in tha global DNS.
.PP
Da dnsmasq DHCP server supports static address assignments n' multiple
networks. Well shiiiit, it automatically
sendz a sensible default set of DHCP options, n' can be configured to
send any desired set of DHCP options, includin vendor-encapsulated
options. Well shiiiit, it includes a secure, read-only,
TFTP server ta allow net/PXE boot of DHCP hosts n' also supports BOOTP. Da PXE support is full featured, n' includes a proxy mode which supplies PXE shiznit ta clients whilst DHCP address allocation is done by another server.
.PP
Da dnsmasq DHCPv6 server serves up tha same set of features as the
DHCPv4 server, n' up in addition, it includes routa advertisements and
a neat feature which allows namein fo' clients which use DHCPv4 and
stateless autoconfiguration only fo' IPv6 configuration. I aint talkin' bout chicken n' gravy biatch. There is support fo' bustin address allocation (both DHCPv6 n' RA) from subnets which is dynamically delegated via DHCPv6 prefix delegation.
.PP
Dnsmasq is coded wit lil' small-ass embedded systems up in mind. Y'all KNOW dat shit, muthafucka! Well shiiiit, it aims fo' tha smallest possible memory footprint compatible wit tha supported functions,  n' allows uneeded functions ta be omitted from tha compiled binary.  
.SH OPTIONS
Note dat up in general missin parametas is allowed n' switch off
functions, fo' instizzle "--pid-file" disablez freestylin a PID file. On
BSD, unless tha GNU getopt library is linked, tha long form of the
options do not work on tha command line; it is still recognised in
the configuration file.
.TP
.B --test
Read n' syntax check configuration file(s). Exit wit code 0 if all
is OK, or a non-zero code otherwise. Do not start up dnsmasq.
.TP
.B \-h, --no-hosts
Don't read tha hostnames up in /etc/hosts.
.TP
.B \-H, --addn-hosts=<file>
Additionizzle hosts file. Read tha specified file as well as /etc/hosts, n' you can put dat on yo' toast. If -h is given, read
only tha specified file. This option may be repeated fo' mo' than one
additionizzle hosts file. If a gangbangin' finger-lickin' directory is given, then read all tha filez contained up in dat directory. 
.TP
.B \-E, --expand-hosts
Add tha domain ta simple names (without a period) up in /etc/hosts
in tha same way as fo' DHCP-derived names. Note dat dis do not
apply ta domain names up in cnames, PTR records, TXT recordz etc.
.TP
.B \-T, --local-ttl=<time>
When replyin wit shiznit from /etc/hosts or tha DHCP leases
file dnsmasq by default sets tha time-to-live field ta zero, meaning
that tha requesta should not itself cache tha shiznit. I aint talkin' bout chicken n' gravy biatch. This is
the erect thang ta do up in almost all thangs. This option allows a
time-to-live (in seconds) ta be given fo' these replies. Put ya muthafuckin choppers up if ya feel dis! This will
reduce tha load on tha server all up in tha expense of clients rockin stale
data under some circumstances.
.TP
.B --neg-ttl=<time>
Negatizzle replies from upstream servers normally contain time-to-live
information up in SOA recordz which dnsmasq uses fo' caching. If the
replies from upstream servers omit dis shiznit, dnsmasq do not
cache tha reply. This option gives a thugged-out default value fo' time-to-live
(in seconds) which dnsmasq uses ta cache wack replies even up in 
the absence of a SOA record. Y'all KNOW dat shit, muthafucka! 
.TP
.B --max-ttl=<time>
Set a maximum TTL value dat is ghon be handed up ta clients, n' you can put dat on yo' toast. Da specified
maximum TTL is ghon be given ta clients instead of tha legit TTL value if it is 
lower n' shit. Da legit TTL value is however kept up in tha cache ta avoid floodin 
the upstream DNS servers.
.TP
.B --max-cache-ttl=<time>
Set a maximum TTL value fo' entries up in tha cache.
.TP
.B --auth-ttl=<time>
Set tha TTL value returned up in lyrics from tha authoritatizzle server.
.TP
.B \-k, --keep-in-foreground
Do not go tha fuck into tha background at startup but otherwise run as
normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This is intended fo' use when dnsmasq is run under daemontools
or launchd.
.TP
.B \-d, --no-daemon
Debug mode: don't fork ta tha background, don't write a pid file,
don't chizzle user id, generate a cold-ass lil complete cache dump on receipt on
SIGUSR1, log ta stderr as well as syslog, don't fork freshly smoked up processes
to handle TCP queries. Put ya muthafuckin choppers up if ya feel dis! Note dat dis option is fo' use up in debugging
only, ta stop dnsmasq daemonisin up in thang, use 
.B -k.
.TP
.B \-q, --log-queries
Log tha thangs up in dis biatch of DNS queries handled by dnsmasq. Enable a gangbangin' full cache dump on receipt of SIGUSR1.
.TP
.B \-8, --log-facility=<facility>
Set tha facilitizzle ta which dnsmasq will bust syslog entries, this
defaults ta DAEMON, n' ta LOCAL0 when debug mode is up in operation. I aint talkin' bout chicken n' gravy biatch. If
the facilitizzle given gotz nuff at least one '/' character, it is taken to
be a gangbangin' filename, n' dnsmasq logs ta tha given file, instead of
syslog. If tha facilitizzle is '-' then dnsmasq logs ta stderr.
(Errors whilst readin configuration will still git all up in syslog,
but all output from a successful startup, n' all output whilst
running, will go exclusively ta tha file.) When loggin ta a gangbangin' file,
dnsmasq will close n' reopen tha file when it receives SIGUSR2. This 
allows tha log file ta be rotated without stoppin dnsmasq.
.TP
.B --log-async[=<lines>]
Enable asynchronous loggin n' optionally set tha limit on the
number of lines
which is ghon be queued by dnsmasq when freestylin ta tha syslog is slow. 
Dnsmasq can log asynchronously: this
allows it ta continue functionin without bein blocked by syslog, and
allows syslog ta use dnsmasq fo' DNS queries without riskin deadlock.
If tha queue of log-lines becomes full, dnsmasq will log the
overflow, n' tha number of lyrics  lost. Da default queue length is
5, a sane value would be 5-25, n' a maximum limit of 100 is imposed.
.TP
.B \-x, --pid-file=<path>
Specify a alternate path fo' dnsmasq ta record its process-id in. I aint talkin' bout chicken n' gravy biatch. Normally /var/run/dnsmasq.pid.
.TP
.B \-u, --user=<username>
Specify tha userid ta which dnsmasq will chizzle afta startup. Dnsmasq must normally be started as root yo, but it will drop root 
privileges afta startup by changin id ta another user n' shit. Normally dis user is "nobody" but dat 
can be over-ridden wit dis switch.
.TP
.B \-g, --group=<groupname> 
Specify tha crew which dnsmasq will run
as. Da defaults ta "dip", if available, ta facilitate access to
/etc/ppp/resolv.conf which aint normally ghetto readable.
.TP
.B \-v, --version
Print tha version number.
.TP
.B \-p, --port=<port>
Listen on <port> instead of tha standard DNS port (53). Right back up in yo muthafuckin ass. Settin this
to zero straight-up disablez DNS function, leavin only DHCP and/or TFTP.
.TP
.B \-P, --edns-packet-max=<size>
Specify tha phattest EDNS.0 UDP packet which is supported by tha DNS
forwarder n' shit. Defaults ta 4096, which is tha RFC5625-recommended size.
.TP
.B \-Q, --query-port=<query_port>
Send outbound DNS queries from, n' listen fo' they replies on, the
specific UDP port <query_port> instead of rockin random ports, n' you can put dat on yo' toast. NOTE
that rockin dis option will make dnsmasq less secure against DNS
spoofin attacks but it may be fasta n' use less resources.  Settin dis option
to zero make dnsmasq bust a single port allocated ta it by the
OS: dis was tha default behaviour up in versions prior ta 2.43. 
.TP
.B --min-port=<port>
Do not use ports less than dat given as source fo' outbound DNS
queries. Put ya muthafuckin choppers up if ya feel dis! Dnsmasq picks random ports as source fo' outbound queries:
when dis option is given, tha ports used will always ta larger
than dat specified. Y'all KNOW dat shit, muthafucka! Useful fo' systems behind firewalls. 
.TP
.B \-i, --interface=<interface name>
Listen only on tha specified intercourse(s). Dnsmasq automatically adds
the loopback (local) intercourse ta tha list of intercourses ta use when
the
.B \--interface
option  is used. Y'all KNOW dat shit, muthafucka! If no
.B \--interface
or
.B \--listen-address
options is given dnsmasq listens on all available intercourses except any
given in
.B \--except-interface
options. IP alias intercourses (eg "eth1:0") cannot be used with
.B --interface
or
.B --except-interface
options, use --listen-address instead. Y'all KNOW dat shit, muthafucka! A simple wildcard, consisting
of a trailin '*', can be used up in 
.B \--interface 
and
.B \--except-interface
options. 
.TP
.B \-I, --except-interface=<interface name>
Do not listen on tha specified intercourse. Note dat tha order of
.B \--listen-address
.B --interface
and
.B --except-interface
options do not matta n' dat 
.B --except-interface
options always override tha others.
.TP
.B --auth-server=<domain>,<interface>|<ip-address>
Enable DNS authoritatizzle mode fo' queries arrivin at a intercourse or address. Note dat tha intercourse or address
need not be mentioned up in 
.B --interface
or 
.B --listen-address
configuration, indeed
.B --auth-server
will overide these n' provide a gangbangin' finger-lickin' different DNS steez on the
specified intercourse. Da <domain> is tha "glue record". Well shiiiit, it should
resolve up in tha global DNS ta a A and/or AAAA record which points to
the address dnsmasq is listenin on. I aint talkin' bout chicken n' gravy biatch. When a intercourse is specified,
it may be qualified wit "/4" or "/6" ta specify only tha IPv4 or IPv6
addresses associated wit tha intercourse.
.TP 
.B \-2, --no-dhcp-interface=<interface name>
Do not provide DHCP or TFTP on tha specified intercourse yo, but do provide DNS service.
.TP
.B \-a, --listen-address=<ipaddr>
Listen on tha given IP address(es). Both 
.B \--interface
and
.B \--listen-address
options may be given, up in which case tha set of both intercourses and
addresses is used. Y'all KNOW dat shit, muthafucka! Note dat if no
.B \--interface
option is given yo, but 
.B \--listen-address
is, dnsmasq aint gonna automatically listen on tha loopback
interface. To bust dis, its IP address, 127.0.0.1, must be
explicitly given as a 
.B \--listen-address
option.
.TP
.B \-z, --bind-interfaces
On systems which support it, dnsmasq bindz tha wildcard address,
even when it is listenin on only some intercourses. Well shiiiit, it then discards
requests dat it shouldn't reply to. This has tha advantage of 
workin even when intercourses come n' go n' chizzle address. This
option forces dnsmasq ta straight-up bind only tha intercourses it is
listenin on. I aint talkin' bout chicken n' gravy biatch fo' realz. Bout tha only time when dis is useful is when 
runnin another nameserver (or another instizzle of dnsmasq) on the
same machine. Right back up in yo muthafuckin ass. Settin dis option also enablez multiple instances of
dnsmasq which provide DHCP steez ta run up in tha same machine.
.TP
.B --bind-dynamic
Enable a network mode which be a hybrid between 
.B --bind-interfaces
and tha default. Dnsmasq bindz tha address of individual intercourses,
allowin multiple dnsmasq instances yo, but if freshly smoked up intercourses or
addresses appear, it automatically listens on dem (subject ta any
access-control configuration). This make dynamically pimped
interfaces work up in tha same way as tha default. Implementin this
option requires non-standard networkin APIs n' it is only available
under Linux. On other platforms it falls-back ta --bind-interfaces mode.
.TP
.B \-y, --localise-queries
Return lyrics ta DNS queries from /etc/hosts which depend on tha intercourse over which tha query was
received. Y'all KNOW dat shit, muthafucka! If a name up in /etc/hosts has mo' than one address associated with
it, n' at least one of dem addresses is on tha same subnet as the
interface ta which tha query was sent, then return only the
address(es) on dat subnet. This allows fo' a server  ta have multiple
addresses up in /etc/hosts correspondin ta each of its intercourses, and
hosts will git tha erect address based on which network they are
attached to. Currently dis facilitizzle is limited ta IPv4.
.TP
.B \-b, --bogus-priv
Bogus private reverse lookups fo' realz. All reverse lookups fo' private IP ranges (ie 192.168.x.x, etc)
which is not found up in /etc/hosts or tha DHCP leases file is answered
with "no such domain" rather than bein forwarded upstream.
.TP
.B \-V, --alias=[<old-ip>]|[<start-ip>-<end-ip>],<new-ip>[,<mask>]
Modify IPv4 addresses returned from upstream nameservers; old-ip is
replaced by new-ip. If tha optionizzle mask is given then any address
which matches tha maxed old-ip is ghon be re-written. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. So, fo' instance
.B --alias=1.2.3.0,6.7.8.0,255.255.255.0 
will map 1.2.3.56 ta 6.7.8.56 n' 1.2.3.67 ta 6.7.8.67. This is what
Cisco PIX routas call "DNS doctoring". If tha oldschool IP is given as
range, then only addresses up in tha range, rather than a whole subnet,
are re-written. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. So 
.B --alias=192.168.0.10-192.168.0.40,10.0.0.0,255.255.255.0
maps 192.168.0.10->192.168.0.40 ta 10.0.0.10->10.0.0.40
.TP 
.B \-B, --bogus-nxdomain=<ipaddr>
Transform replies which contain tha IP address given tha fuck into "No such
domain" replies. Put ya muthafuckin choppers up if ya feel dis! This is intended ta counteract a thugged-out devious move made by
Verisign up in September 2003 when they started returnin tha address of
an advertisin wizzy page up in response ta queries fo' unregistered names,
instead of tha erect NXDOMAIN response. This option  drops some lyrics ta dnsmasq to
fake tha erect response when it sees dis behaviour fo' realz. As at Sept 2003
the IP address bein returned by Verisign is 64.94.110.11
.TP
.B \-f, --filterwin2k
Lata versionz of windows make periodic DNS requests which don't git sensible lyrics from
the hood DNS n' can cause problems by triggerin dial-on-demand links. This flag turns on a option
to filta such requests, n' you can put dat on yo' toast. Da requests blocked is fo' recordz of types SOA n' SRV, n' type ANY where tha 
axed name has underscores, ta catch LDAP requests.
.TP
.B \-r, --resolv-file=<file>
Read tha IP addressez of tha upstream nameservers from <file>, instead of
/etc/resolv.conf. For tha format of dis file see
.BR resolv.conf (5). 
Da only lines relevant ta dnsmasq is nameserver ones. Dnsmasq can
be holla'd at ta poll mo' than one resolv.conf file, tha straight-up original gangsta file name  specified
overrides tha default, subsequent ones add ta tha list. This is only
allowed when polling; tha file wit tha currently sickest fuckin modification
time is tha one used. Y'all KNOW dat shit, muthafucka! 
.TP
.B \-R, --no-resolv
Don't read /etc/resolv.conf. Git upstream servers only from tha command
line or tha dnsmasq configuration file.
.TP
.B \-1, --enable-dbus[=<service-name>]
Allow dnsmasq configuration ta be updated via DBus method calls. The
configuration which can be chizzled is upstream DNS servers (and
correspondin domains) n' cache clear. Shiiit, dis aint no joke. Requires dat dnsmasq has
been built wit DBus support. If tha steez name is given, dnsmasq
provides steez at dat name, rather than tha default which is 
.B uk.org.thekelleys.dnsmasq
.TP 
.B \-o, --strict-order
By default, dnsmasq will bust queries ta any of tha upstream servers
it knows bout n' tries ta favour servers dat is known to
be up. Right back up in yo muthafuckin ass. Settin dis flag forces dnsmasq ta try each query wit each
server strictly up in tha order they step tha fuck up in /etc/resolv.conf
.TP
.B --all-servers
By default, when dnsmasq has mo' than one upstream server available,
it will bust queries ta just one server n' shit. Right back up in yo muthafuckin ass. Settin dis flag forces
dnsmasq ta bust all queries ta all available servers. Da reply from
the server which lyrics first is ghon be moonwalked back ta tha original gangsta requester.
.TP
.B --stop-dns-rebind
Reject (and log) addresses from upstream nameservers which is up in the
private IP ranges. This blocks a battle where a funky-ass browser behind a
firewall is used ta probe machines on tha local network.
.TP
.B --rebind-localhost-ok
Exempt 127.0.0.0/8 from rebindin checks. This address range is
returned by realtime black hole servers, so blockin it may disable
these skillz.
.TP 
.B  --rebind-domain-ok=[<domain>]|[[/<domain>/[<domain>/]
Do not detect n' block dns-rebind on queries ta these domains. The
argument may be either a single domain, or multiple domains surrounded
by '/', like tha --server syntax, eg. 
.B  --rebind-domain-ok=/domain1/domain2/domain3/
.TP
.B \-n, --no-poll
Don't poll /etc/resolv.conf fo' chizzles.
.TP
.B --clear-on-reload
Whenever /etc/resolv.conf is re-read or tha upstream servers is set
via DBus, clear tha DNS cache.
This is useful when freshly smoked up nameservers may have different
data than dat held up in cache.
.TP
.B \-D, --domain-needed
Tells dnsmasq ta never forward A or AAAA queries fo' plain names, without dots
or domain parts, ta upstream nameservers. If tha name aint known
from /etc/hosts or DHCP then a "not found" answer is returned.
.TP
.B \-S, --local, --server=[/[<domain>]/[domain/]][<ipaddr>[#<port>][@<source-ip>|<interface>[#<port>]]
Specify IP address of upstream servers directly. Right back up in yo muthafuckin ass. Settin dis flag do
not suppress readin of /etc/resolv.conf, use -R ta do dis shit. If one or
more 
optionizzle domains is given, dat server is used only fo' dem domains
and they is queried only rockin tha specified server n' shit. This is
intended fo' private nameservers: if you gotz a nameserver on your
network which deals wit namez of tha form
xxx.internal.thekelleys.org.uk at 192.168.1.1 then givin  tha flag 
.B -S /internal.thekelleys.org.uk/192.168.1.1 
will bust all queries for
internal machines ta dat nameserver, every last muthafuckin thang else will git all up in the
servers up in /etc/resolv.conf fo' realz. An empty domain justification,
.B // 
has tha special meanin of "unqualified names only" ie names without any
dots up in em fo' realz. A non-standard port may be specified as 
part of tha IP
address rockin a # character.
Mo' than one -S flag be allowed, with
repeated domain or ipaddr parts as required.

Mo' specific domains take precendence over less specific domains, so:
.B --server=/google.com/1.2.3.4
.B --server=/www.google.com/2.3.4.5
will bust queries fo' *.google.com ta 1.2.3.4, except *www.google.com,
which will git all up in 2.3.4.5

Da special server address '#' means, "use tha standard servers", so
.B --server=/google.com/1.2.3.4
.B --server=/www.google.com/#
will bust queries fo' *.google.com ta 1.2.3.4, except *www.google.com which will
be forwarded as usual.

Also permitted be a -S
flag which gives a thugged-out domain but no IP address; dis  drops some lyrics ta dnsmasq that
a domain is local n' it may answer queries from /etc/hosts or DHCP
but should never forward queries on dat domain ta any upstream
servers.
.B local
is a synonym for
.B server
to make configuration filez clearer up in dis case.

IPv6 addresses may include a %interface scope-id, eg
fe80::202:a412:4512:7bbf%eth0.

Da optionizzle strang afta tha @ characta tells
dnsmasq how tha fuck ta set tha source of tha queries ta this
nameserver n' shit. Well shiiiit, it should be a ip-address, which should belong ta tha machine on which
dnsmasq is hustlin otherwise dis server line is ghon be logged n' then
ignored, or a intercourse name. If a intercourse name is given, then
queries ta tha server is ghon be forced via dat intercourse; if an
ip-address is given then tha source address of tha queries is ghon be set
to dat address.
Da query-port flag is ignored fo' any servers which have a
source address specified but tha port may be specified directly as
part of tha source address. Forcin queries ta a intercourse is not
implemented on all platforms supported by dnsmasq.
.TP
.B \-A, --address=/<domain>/[domain/]<ipaddr>
Specify a IP address ta return fo' any host up in tha given domains.
Queries up in tha domains is never forwarded n' always replied to
with tha specified IP address which may be IPv4 or IPv6. To give
both IPv4 n' IPv6 addresses fo' a thugged-out domain, use repeated -A flags.
Note dat /etc/hosts n' DHCP leases override dis fo' individual
names fo' realz. A common use of dis is ta redirect tha entire doubleclick.net
domain ta some thugged-out local wizzy server ta avoid banner ads. The
domain justification works up in tha same was as fo' --server, wit the
additionizzle facilitizzle dat /#/ matches any domain. I aint talkin' bout chicken n' gravy biatch. Thus
--address=/#/1.2.3.4 will always return 1.2.3.4 fo' any query not
answered from /etc/hosts or DHCP n' not busted ta a upstream
nameserver by a mo' specific --server directive.
.TP
.B --ipset=/<domain>/[domain/]<ipset>[,<ipset>]
Places tha resolved IP addressez of queries fo' tha specified domains
in tha specified netfilta ip sets, n' you can put dat on yo' toast. Domains n' subdomains is matched
in tha same way as --address. These ip sets must already exist. Right back up in yo muthafuckin ass. See
ipset(8) fo' mo' details.
.TP
.B \-m, --mx-host=<mx name>[[,<hostname>],<preference>]
Return a MX record named <mx name> pointin ta tha given hostname (if
given), or
the host specified up in tha --mx-target switch
or, if dat switch aint given, tha host on which dnsmasq 
is hustlin. Da default is useful fo' directin mail from systems on a LAN
to a cold-ass lil central server n' shit. Da preference value is optional, n' defaults to
1 if not given. I aint talkin' bout chicken n' gravy biatch. Mo' than one MX record may be given fo' a host.
.TP 
.B \-t, --mx-target=<hostname>
Specify tha default target fo' tha MX record returned by dnsmasq. Right back up in yo muthafuckin ass. See
--mx-host.  If --mx-target is given yo, but not --mx-host, then dnsmasq
returns a MX record containin tha MX target fo' MX queries on tha 
hostname of tha machine on which dnsmasq is hustlin.
.TP
.B \-e, --selfmx
Return a MX record pointin ta itself fo' each local
machine. Local machines is dem up in /etc/hosts or wit DHCP leases.
.TP 
.B \-L, --localmx
Return a MX record pointin ta tha host given by mx-target (or the
machine on which dnsmasq is hustlin) fo' each
local machine. Local machines is dem up in /etc/hosts or wit DHCP
leases.
.TP
.B \-W, --srv-host=<_service>.<_prot>.[<domain>],[<target>[,<port>[,<priority>[,<weight>]]]]
Return a SRV DNS record. Y'all KNOW dat shit, muthafucka! See RFC2782 fo' details. If not supplied, the
domain defaults ta dat given by
.B --domain.
Da default fo' tha target domain is empty, n' tha default fo' port
is one n' tha defaults fo' 
weight n' prioritizzle is zero. Be careful if transposin data from BIND
zone files: tha port, weight n' prioritizzle numbers is up in a gangbangin' finger-lickin' different
order n' shit. Mo' than one SRV record fo' a given service/domain be allowed,
all dat match is returned.
.TP
.B --host-record=<name>[,<name>....][<IPv4-address>],[<IPv6-address>]
Add A, AAAA n' PTR recordz ta tha DNS. This addz one or mo' names to
the DNS wit associated IPv4 (A) n' IPv6 (AAAA) recordz fo' realz. A name may
appear up in mo' than one 
.B host-record
and therefore be assigned mo' than one address. Only tha first
address creates a PTR record linkin tha address ta tha name. This is
the same rule as is used readin hosts-files. 
.B host-record
options is considered ta be read before host-files, so a name
appearin there inhibits PTR-record creation if it appears in
hosts-file also. Unlike hosts-files, names is not expanded, even when
.B expand-hosts
is up in effect. Right back up in yo muthafuckin ass. Short n' long names may step tha fuck up in tha same 
.B host-record,
eg. 
.B --host-record=laptop,laptop.thekelleys.org,192.168.0.1,1234::100
.TP
.B \-Y, --txt-record=<name>[[,<text>],<text>]
Return a TXT DNS record. Y'all KNOW dat shit, muthafucka! Da value of TXT record be a set of strings,
so  any number may be included, delimited by commas; use quotes ta put
commas tha fuck into a string. Note dat tha maximum length of a single string
is 255 characters, longer strings is split tha fuck into 255 characta chunks.
.TP
.B --ptr-record=<name>[,<target>]
Return a PTR DNS record.
.TP
.B --naptr-record=<name>,<order>,<preference>,<flags>,<service>,<regexp>[,<replacement>]
Return a NAPTR DNS record, as specified up in RFC3403.
.TP
.B --cname=<cname>,<target>
Return a CNAME record which indicates dat <cname> is straight-up
<target>. There is dope limitations on tha target; it must be a
DNS name which is known ta dnsmasq from /etc/hosts (or additional
hosts files), from DHCP, from --interface-name or from another 
.B --cname.
If tha target do not satisfy this
criteria, tha whole cname is ignored. Y'all KNOW dat shit, muthafucka! Da cname must be unique yo, but it
is permissable ta have mo' than one cname pointin ta tha same target.
.TP
.B --dns-rr=<name>,<RR-number>,[<hex data>]
Return a arbitrary DNS Resource Record. Y'all KNOW dat shit, muthafucka! Da number is tha type of the
record (which be always up in tha C_IN class). Da value of tha record is
given by tha hex data, which may be of tha form 01:23:45 or 01 23 45 or
012345 or any mixture of these.
.TP
.B --interface-name=<name>,<interface>[/4|/6]
Return a DNS record associatin tha name wit tha primary address on
the given intercourse. This flag specifies a A or AAAA record fo' tha given
name up in tha same way as a /etc/hosts line, except dat tha address is
not constant yo, but taken from tha given intercourse. Da intercourse may be
followed by "/4" or "/6" ta specify dat only IPv4 or IPv6 addresses
of tha intercourse should be used. Y'all KNOW dat shit, muthafucka! If tha intercourse is
down, not configured or non-existent, a empty record is returned. Y'all KNOW dat shit, muthafucka! The
matchin PTR record be also pimped, mappin tha intercourse address to
the name. Mo' than one name may be associated wit a intercourse
address by repeatin tha flag; up in dat case tha straight-up original gangsta instizzle is used
for tha reverse address-to-name mapping.
.TP
.B --synth-domain=<domain>,<address range>[,<prefix>]
Smoke artificial A/AAAA n' PTR recordz fo' a address range. The
recordz use tha address, wit periodz (or colons fo' IPv6) replaced
with dashes.

An example should make dis clearer.
.B --synth-domain=thekelleys.org.uk,192.168.0.0/24,internal-
will result up in a query fo' internal-192-168-0-56.thekelleys.org.uk returning
192.168.0.56 n' a reverse query vice versa. Da same applies ta IPv6,
but IPv6 addresses may start wit '::'
but DNS labels may not start wit '-' so up in dis case if no prefix is
configured a zero be added up in front of tha label. ::1 becomes 0--1.

Da address range can be of tha form
<ip address>,<ip address> or <ip address>/<netmask>
.TP
.B --add-mac
Add tha MAC address of tha requestor ta DNS queries which are
forwarded upstream. This may be used ta DNS filterin by tha upstream
server n' shit. Da MAC address can only be added if tha requestor is on tha same
subnet as tha dnsmasq server n' shit. Note dat tha mechanizzle used ta bust dis (an EDNS0 option)
is not yet standardised, so dis should be considered
experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. Also note dat exposin MAC addresses up in dis way may
have securitizzle n' privacy implications. Da warnin bout caching
given fo' --add-subnet applies ta --add-mac like a muthafucka.
.TP 
.B --add-subnet[[=<IPv4 prefix length>],<IPv6 prefix length>]
Add tha subnet address of tha requestor ta tha DNS queries which are
forwarded upstream. Da amount of tha address forwarded dependz on the
prefix length parameter: 32 (128 fo' IPv6) forwardz tha whole address,
zero forwardz none of it but still marks tha request so dat no
upstream nameserver will add client address shiznit either n' shit. The
default is zero fo' both IPv4 n' IPv6. Note dat upstream nameservers
may be configured ta return different thangs up in dis biatch based on this
information yo, but tha dnsmasq cache do not take account. If a thugged-out dnsmasq
instizzle is configured such dat different thangs up in dis biatch may be encountered,
cachin should be disabled.
.TP
.B \-c, --cache-size=<cachesize>
Set tha size of dnsmasqz cache. Da default is 150 names. Right back up in yo muthafuckin ass. Settin tha cache size ta zero disablez caching.
.TP
.B \-N, --no-negcache
Disable wack caching. Negatizzle cachin allows dnsmasq ta remember
"no such domain" lyrics from upstream nameservers n' answer
identical queries without forwardin dem again. I aint talkin' bout chicken n' gravy biatch. 
.TP
.B \-0, --dns-forward-max=<queries>
Set tha maximum number of concurrent DNS queries. Put ya muthafuckin choppers up if ya feel dis! Da default value is
150, which should be fine fo' most setups. Da only known thang
where dis need ta be increased is when rockin web-server log file
resolvers, which can generate big-ass numberz of concurrent queries.
.TP
.B --proxy-dnssec
A resolver on a cold-ass lil client machine can do DNSSEC validation up in two ways: it
can big-ass up tha cryptograhic operations on tha reply it receives, or
it can rely on tha upstream recursive nameserver ta do tha validation
and set a lil' bit up in tha reply if it succeeds. Dnsmasq aint a DNSSEC
validator, so it cannot big-ass up tha validation role of tha recursive nameserver,
but it can pass all up in tha validation thangs up in dis biatch from its own upstream
nameservers. This option enablez dis behaviour. Shiiit, dis aint no joke. Yo ass should only do
this if you trust all tha configured upstream nameservers 
.I n' tha network between you n' em.
If you use tha straight-up original gangsta DNSSEC mode, valipimpin resolvers up in clients,
this option aint required. Y'all KNOW dat shit, muthafucka! Dnsmasq always returns all tha data
needed fo' a cold-ass lil client ta do validation itself. 
.TP
.B --auth-zone=<domain>[,<subnet>[/<prefix length>][,<subnet>[/<prefix length>].....]]
Define a DNS unit fo' which dnsmasq acts as authoritatizzle server n' shit. Locally defined DNS recordz which is up in tha domain
will be served. Y'all KNOW dat shit, muthafucka! If subnet(s) is given, A n' AAAA recordz must be up in one of the
specified subnets.

As alternatizzle ta directly specifyin tha subnets, itz possible to
give tha name of a intercourse, up in which case tha subnets implied by
that intercoursez configured addresses n' netmask/prefix-length are
used; dis is useful when rockin constructed DHCP ranges as tha actual
address is dynamic n' not known when configurin dnsmasq. The
interface addresses may be confined ta only IPv6 addresses using
<interface>/6 or ta only IPv4 rockin <interface>/4. This is useful when
an intercourse has dynamically determined global IPv6 addresses which should
appear up in tha unit yo, but RFC1918 IPv4 addresses which should not.
Interface-name n' address-literal subnet justifications may be used
freely up in tha same --auth-zone declaration.

Da subnet(s) is also used ta define in-addr.arpa and
ipv6.arpa domains which is served fo' reverse-DNS queries. Put ya muthafuckin choppers up if ya feel dis! If not
specified, tha prefix length defaults ta 24 fo' IPv4 n' 64 fo' IPv6.
For IPv4 subnets, tha prefix length should be have tha value 8, 16 or 24
unless yo ass is familiar wit RFC 2317 n' have arranged the
in-addr.arpa delegation accordingly. Note dat if no subnets are
specified, then no reverse queries is answered.
.TP
.B --auth-soa=<serial>[,<hostmaster>[,<refresh>[,<retry>[,<expiry>]]]]
Specify fieldz up in tha SOA record associated wit authoritative
zones. Note dat dis is optional, all tha joints is set ta sane defaults.
.TP
.B --auth-sec-servers=<domain>[,<domain>[,<domain>...]]
Specify any secondary servers fo' a unit fo' which dnsmasq is
authoritative. These servers must be configured ta git unit data from
dnsmasq by unit transfer, n' answer queries fo' tha same
authoritatizzle units as dnsmasq.
.TP
.B --auth-peer=<ip-address>[,<ip-address>[,<ip-address>...]]
Specify tha addressez of secondary servers which is allowed to
initiate unit transfer (AXFR) requests fo' units fo' which dnsmasq is
authoritative. If dis option aint given, then AXFR requests will be
accepted from any secondary. 
.TP 
.B --conntrack
Read tha Linux connection track mark associated wit incomin DNS
queries n' set tha same mark value on upstream traffic used ta answer
those queries. Put ya muthafuckin choppers up if ya feel dis! This allows traffic generated by dnsmasq ta be
associated wit tha queries which cause it, useful fo' bandwidth
accountin n' firewalling. Dnsmasq must have conntrack support
compiled up in n' tha kernel must have conntrack support
included n' configured. Y'all KNOW dat shit, muthafucka! This option cannot be combined with
--query-port. 
.TP
.B \-F, --dhcp-range=[tag:<tag>[,tag:<tag>],][set:<tag>,]<start-addr>[,<end-addr>][,<mode>][,<netmask>[,<broadcast>]][,<lease time>]
.TP
.B \-F, --dhcp-range=[tag:<tag>[,tag:<tag>],][set:<tag>,]<start-IPv6addr>[,<end-IPv6addr>|constructor:<interface>][,<mode>][,<prefix-len>][,<lease time>]

Enable tha DHCP server n' shiznit fo' realz. Addresses is ghon be given up from tha range
<start-addr> ta <end-addr> n' from statically defined addresses given
in 
.B dhcp-host
options. If tha lease time is given, then leases
will be given fo' dat length of time. Da lease time is up in seconds,
or minutes (eg 45m) or minutes (eg 1h) or "infinite". If not given,
the default lease time is one hour. Shiiit, dis aint no joke. The
minimum lease time is two minutes. For IPv6 ranges, tha lease time
maybe "deprecated"; dis sets tha preferred gametime busted up in a DHCP
lease or routa advertisement ta zero, which causes clients ta use
other addresses, if available, fo' freshly smoked up connections as a prelude ta renumbering.

This option may be repeated, wit different addresses, ta enable DHCP
service ta mo' than one network. For directly connected networks (ie,
networks on which tha machine hustlin dnsmasq has a intercourse) the
netmask is optional: dnsmasq will determine it from tha intercourse
configuration. I aint talkin' bout chicken n' gravy biatch. For networks which receive DHCP steez via a relay
agent, dnsmasq cannot determine tha netmask itself, so it should be
specified, otherwise dnsmasq will gotta guess, based on tha class (A, B or
C) of tha network address. Da broadcast address is
always optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Well shiiiit, it be always
allowed ta have mo' than one dhcp-range up in a single subnet. 

For IPv6, tha parametas is slightly different: instead of netmask
and broadcast address, there be a optionizzle prefix length which must
be equal ta or larger then tha prefix length on tha local intercourse. If not
given, dis defaults ta 64. Unlike tha IPv4 case, tha prefix length is not
automatically derived from tha intercourse configuration. I aint talkin' bout chicken n' gravy biatch. Da mimimum
size of tha prefix length is 64.

IPv6 (only) supports another type of range. In this, tha start address n' optionizzle end address contain only tha network part (ie ::1) n' they is followed by
.B constructor:<interface>.
This forms a template which raps bout how tha fuck ta create ranges, based on tha addresses assigned ta tha intercourse. For instance

.B --dhcp-range=::1,::400,constructor:eth0

will look fo' addresses on
eth0 n' then create a range from <network>::1 ta <network>::400. If
the intercourse be assigned mo' than one network, then the
correspondin ranges is ghon be automatically pimped, n' then
deprecated n' finally removed again n' again n' again as tha address is deprecated and
then deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da intercourse name may gotz a gangbangin' final "*" wildcard. Y'all KNOW dat shit, muthafucka! Note
that just any address on eth0 aint gonna do: it must not be an
autoconfigured or privacy address, or be deprecated.

If a thugged-out dhcp-range is only bein used fo' stateless DHCP and/or SLAAC,
then tha address can be simply ::

.B --dhcp-range=::,constructor:eth0


Da optionizzle 
.B set:<tag> 
sets a alphanumeric label which marks dis network so that
dhcp options may be specified on a per-network basis. 
When it is prefixed wit 'tag:' instead, then its meanin chizzlez from setting
a tag ta matchin dat shit. Only one tag may be set yo, but mo' than one tag
may be matched.

Da optionizzle <mode> keyword may be 
.B static
which  drops some lyrics ta dnsmasq ta enable DHCP fo' tha network specified yo, but not
to dynamically allocate IP addresses: only hosts which have static
addresses given via 
.B dhcp-host
or from /etc/ethers is ghon be served. Y'all KNOW dat shit, muthafucka! A static-only subnet wit address
all zeros may be used as a "catch-all" address ta enable replies ta all
Information-request packets on a subnet which is provided with
stateless DHCPv6, ie
.B --dhcp=range=::,static

For IPv4, tha <mode> may be 
.B proxy
in which case dnsmasq will provide proxy-DHCP on tha specified
subnet. (See 
.B pxe-prompt
and 
.B pxe-service
for details.)

For IPv6, tha mode may be some combination of
.B ra-only, slaac, ra-names, ra-stateless.

.B ra-only
 drops some lyrics ta dnsmasq ta offer Routa Advertisement only on dis subnet,
and not DHCP. 

.B slaac
 drops some lyrics ta dnsmasq ta offer Routa Advertisement on dis subnet n' ta set
the A bit up in tha routa advertisement, so dat tha client will use
SLAAC addresses. When used wit a DHCP range or static DHCP address
this thangs up in dis biatch up in tha client havin both a DHCP-assigned n' a SLAAC
address.

.B ra-stateless
sendz routa advertisements wit tha O n' A bits set, n' serves up a
stateless DHCP service. Da client will bust a SLAAC address, n' use
DHCP fo' other configuration shiznit.

.B ra-names
enablez a mode
which gives DNS names ta dual-stack hosts which do SLAAC for
IPv6. Dnsmasq uses tha hostz IPv4 lease ta derive tha name, network
segment n' MAC address n' assumes dat tha host will also have an
IPv6 address calculated rockin tha SLAAC algorithm, on tha same network
segment. Da address is pinged, n' if a reply is received, a AAAA
record be added ta tha DNS fo' dis IPv6
address. Note dat dis is only happens fo' directly-connected
networks, (not one bustin DHCP via a relay) n' it aint gonna work 
if a host is rockin privacy extensions. 
.B ra-names
can be combined  wit 
.B ra-stateless
and
.B slaac.

.TP
.B \-G, --dhcp-host=[<hwaddr>][,id:<client_id>|*][,set:<tag>][,<ipaddr>][,<hostname>][,<lease_time>][,ignore]
Specify per host parametas fo' tha DHCP server n' shit. This allows a machine
with a particular hardware address ta be always allocated tha same
hostname, IP address n' lease time fo' realz. A hostname specified like this
overrides any supplied by tha DHCP client on tha machine. Well shiiiit, it be also
allowable ta omit tha hardware address n' include tha hostname, in
which case tha IP address n' lease times will apply ta any machine
claimin dat name. For example 
.B --dhcp-host=00:20:e0:3b:13:af,wap,infinite 
 drops some lyrics ta dnsmasq ta give
the machine wit hardware address 00:20:e0:3b:13:af tha name wap, and
an infinite DHCP lease. 
.B --dhcp-host=lap,192.168.0.199 
tells
dnsmasq ta always allocate tha machine lap tha IP address
192.168.0.199. 

Addresses allocated like dis is not constrained ta be
in tha range given by tha --dhcp-range option yo, but they must be in
the same subnet as some valid dhcp-range.  For
subnets which don't need a pool of dynamically allocated addresses,
use tha "static" keyword up in tha dhcp-range declaration.

It be allowed ta use client identifiers (called client
DUID up in IPv6-land rather than
hardware addresses ta identify hosts by prefixin wit 'id:'. Thus: 
.B --dhcp-host=id:01:02:03:04,..... 
refers ta tha host wit client identifier 01:02:03:04. Well shiiiit, it be also
allowed ta specify tha client ID as text, like this:
.B --dhcp-host=id:clientidastext,..... 

A single
.B dhcp-host 
may contain a IPv4 address or a IPv6 address, or both. IPv6 addresses must be bracketed by square brackets thus:
.B --dhcp-host=laptop,[1234::56]
IPv6 addresses may contain only tha host-identifier part:
.B --dhcp-host=laptop,[::56]
in which case they act as wildcardz up in constructed dhcp ranges, with
the appropriate network part inserted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
Note dat up in IPv6 DHCP, tha hardware address may not be
available, though it normally is fo' direct-connected clients, or
clients rockin DHCP relays which support RFC 6939.


For DHCPv4, tha  special option id:* means "ignore any client-id 
and use MAC addresses only." This is useful when a cold-ass lil client presents a cold-ass lil client-id sometimes 
but not others.

If a name appears up in /etc/hosts, tha associated address can be
allocated ta a DHCP lease yo, but only if a 
.B --dhcp-host
option specifyin tha name also exists, n' you can put dat on yo' toast. Only one hostname can be
given up in a 
.B dhcp-host
option yo, but aliases is possible by rockin CNAMEs. (See 
.B --cname
).

Da special keyword "ignore"
 drops some lyrics ta dnsmasq ta never offer a DHCP lease ta a machine. Da machine
can be specified by hardware address, client ID or hostname, for
instance
.B --dhcp-host=00:20:e0:3b:13:af,ignore
This is
useful when there be another DHCP server on tha network which should
be used by some machines.

Da set:<tag> construct sets tha tag
whenever dis dhcp-host directizzle is up in use. This can be used ta 
selectively bust DHCP options just fo' dis host. Mo' than one tag
can be set up in a thugged-out dhcp-host directizzle (but not up in other places where
"set:<tag>" be allowed). When a host matches any
dhcp-host directizzle (or one implied by /etc/ethers) then tha special
tag "known" is set. This allows dnsmasq ta be configured to
ignore requests from unknown machines using
.B --dhcp-ignore=tag:!known
Ethernet addresses (but not client-ids) may have
wildcard bytes, so fo' example 
.B --dhcp-host=00:20:e0:3b:13:*,ignore 
will cause dnsmasq ta ignore a range of hardware addresses. Note that
the "*" will need ta be escaped or quoted on a cold-ass lil command line yo, but not
in tha configuration file.

Hardware addresses normally match any
network (ARP) type yo, but it is possible ta restrict dem ta a single
ARP type by precedin dem wit tha ARP-type (in HEX) n' "-". so 
.B --dhcp-host=06-00:20:e0:3b:13:af,1.2.3.4 
will only match a
Token-Rin hardware address, since tha ARP-address type fo' token ring
is 6. 

As a special case, up in DHCPv4, it is possible ta include mo' than one
hardware address. eg:
.B --dhcp-host=11:22:33:44:55:66,12:34:56:78:90:12,192.168.0.2
This allows a IP address ta be associated with
multiple hardware addresses, n' gives dnsmasq permission ta abandon a
DHCP lease ta one of tha hardware addresses when another one asks for
a lease. Beware dat dis be a gangbangin' fucked up thang ta do, it will only
work reliably if only one of tha hardware addresses be actizzle at any
time n' there is no way fo' dnsmasq ta enforce all dis bullshit. Well shiiiit, it is, fo' instance,
useful ta allocate a stable IP address ta a laptop which
has both wired n' wireless intercourses.
.TP
.B --dhcp-hostsfile=<path>
Read DHCP host shiznit from tha specified file. If a gangbangin' finger-lickin' directory
is given, then read all tha filez contained up in dat directory. Da file gotz nuff 
information bout one host per line. Da format of a line is tha same
as text ta tha right of '=' up in --dhcp-host. Da advantage of storin DHCP host shiznit
in dis file is dat it can be chizzled without re-startin dnsmasq:
the file is ghon be re-read when dnsmasq receives SIGHUP.
.TP
.B --dhcp-optsfile=<path>
Read DHCP option shiznit from tha specified file.  If a gangbangin' finger-lickin' directory
is given, then read all tha filez contained up in dat directory. Da advantage of 
usin dis option is tha same ol' dirty as fo' --dhcp-hostsfile: the
dhcp-optsfile is ghon be re-read when dnsmasq receives SIGHUP. Note that
it is possible ta encode tha shiznit up in a
.B --dhcp-boot
flag as DHCP options, rockin tha options names bootfile-name,
server-ip-address n' tftp-server n' shit. This allows these ta be included
in a thugged-out dhcp-optsfile.
.TP 
.B \-Z, --read-ethers
Read /etc/ethers fo' shiznit bout hosts fo' tha DHCP server n' shit. The
format of /etc/ethers be a hardware address, followed by either a
hostname or dotted-quad IP address. When read by dnsmasq these lines
have exactly tha same effect as
.B --dhcp-host
options containin tha same shiznit. I aint talkin' bout chicken n' gravy biatch. /etc/ethers is re-read when 
dnsmasq receives SIGHUP. IPv6 addresses is NOT read from /etc/ethers.
.TP
.B \-O, --dhcp-option=[tag:<tag>,[tag:<tag>,]][encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],][<opt>|option:<opt-name>|option6:<opt>|option6:<opt-name>],[<value>[,<value>]]
Specify different or extra options ta DHCP clients, n' you can put dat on yo' toast. By default,
dnsmasq sendz some standard options ta DHCP clients, tha netmask and
broadcast address is set ta tha same as tha host hustlin dnsmasq, and
the DNS server n' default route is set ta tha address of tha machine
runnin dnsmasq. (Equivalent rulez apply fo' IPv6.) If tha domain name option has been set, dat is sent.
This configuration allows these defaults ta be overridden,
or other options specified. Y'all KNOW dat shit, muthafucka! Da option, ta be busted may be given as a
decimal number or as "option:<option-name>" Da option numbers are
specified up in RFC2132 n' subsequent RFCs. Da set of option-names
known by dnsmasq can be discovered by hustlin "dnsmasq --help dhcp".
For example, ta set tha default route option ta 
192.168.4.4, do 
.B --dhcp-option=3,192.168.4.4 
or
.B --dhcp-option = option:router, 192.168.4.4
and ta set tha time-server address ta 192.168.0.4, do
.B --dhcp-option = 42,192.168.0.4 
or 
.B --dhcp-option = option:ntp-server, 192.168.0.4
Da special address 0.0.0.0 (or [::] fo' DHCPv6) is taken ta mean "the address of the
machine hustlin dnsmasq". Data types allowed is comma separated
dotted-quad IP addresses, a thugged-out decimal number, colon-separated hex digits
and a text string. If tha optionizzle tags is given then
this option is only busted when all tha tags is matched.

Special processin is done on a text argument fo' option 119, to
conform wit RFC 3397. Text or dotted-quad IP addresses as arguments
to option 120 is handled as per RFC 3361. Dotted-quad IP addresses 
which is followed by a slash n' then a netmask size is encoded as
busted lyrics bout up in RFC 3442.

IPv6 options is specified rockin tha 
.B option6:
keyword, followed by tha option number or option name. Da IPv6 option
name space is disjoint from tha IPv4 option name space. IPv6 addresses
in options must be bracketed wit square brackets, eg. 
.B --dhcp-option=option6:ntp-server,[1234::56]
 

Be careful: no checkin is done dat tha erect type of data fo' the
option number is sent, it is like possible to
persuade dnsmasq ta generate illegal DHCP packets wit injudicious use
of dis flag. When tha value be a thugged-out decimal number, dnsmasq must determine how tha fuck 
pimpin' tha data item is. Well shiiiit, it do dis by examinin tha option number and/or the
value yo, but can be overridden by appendin a single letta flag as bigs up:
b = one byte, s = two bytes, i = four bytes. This is mainly useful wit 
encapsulated vendor class options (see below) where dnsmasq cannot
determine data size from tha  option number n' shit. Option data which
consists solely of periodz n' digits is ghon be interpreted by dnsmasq
as a IP address, n' banged tha fuck into a option as such. To force a
literal string, use quotes. For instizzle when rockin option 66 ta send
a literal IP address as TFTP server name, it is necessary ta do
.B --dhcp-option=66,"1.2.3.4"

Encapsulated Vendor-class options may also be specified (IPv4 only) using
--dhcp-option: fo' instizzle 
.B --dhcp-option=vendor:PXEClient,1,0.0.0.0 
sendz tha encapsulated vendor
class-specific option "mftp-address=0.0.0.0" ta any client whose
vendor-class matches "PXEClient". Da vendor-class matchin is
substrin based (see --dhcp-vendorclass fo' details). If a
vendor-class option (number 60) is busted by dnsmasq, then dat is used 
for selectin encapsulated options up in preference ta any busted by the
client. Well shiiiit, it is
possible ta omit tha vendorclass straight-up;
.B --dhcp-option=vendor:,1,0.0.0.0
in which case tha encapsulated option be always sent. 

Options may be encapsulated (IPv4 only) within other options: fo' instance
.B --dhcp-option=encap:175, 190, "iscsi-client0"
will bust option 175, within which is tha option 190. If multiple
options is given which is encapsulated wit tha same option number
then they is ghon be erectly combined tha fuck into one encapsulated option.
encap: n' vendor: is may not both be set up in tha same dhcp-option.

Da final variant on encapsulated options is "Vendor-Identifying
Vendor Options" as specified by RFC3925. These is denoted like this: 
.B --dhcp-option=vi-encap:2, 10, "text"
Da number up in tha vi-encap: section is tha IANA enterprise number
used ta identify dis option. I aint talkin' bout chicken n' gravy biatch. This form of encapsulation is supported
in IPv6.
 
Da address 0.0.0.0 aint treated specially in
encapsulated options.
.TP
.B --dhcp-option-force=[tag:<tag>,[tag:<tag>,]][encap:<opt>,][vi-encap:<enterprise>,][vendor:[<vendor-class>],]<opt>,[<value>[,<value>]]
This works up in exactly tha same way as
.B --dhcp-option
except dat tha option will always be sent, even if tha client do
not ask fo' it up in tha parameta request list. This is sometimes
needed, fo' example when bustin  options ta PXELinux.
.TP
.B --dhcp-no-override
(IPv4 only) Disable re-use of tha DHCP servername n' filename fieldz as extra
option space. If it can, dnsmasq moves tha boot server n' filename
information (from dhcp-boot) outta they dedicated fieldz into
DHCP options. This make extra space available up in tha DHCP packet for
options but can, rarely, confuse oldschool or fucked up clients, n' you can put dat on yo' toast. This flag
forces "simple n' safe" behaviour ta avoid problems up in such a cold-ass lil case.
.TP
.B --dhcp-relay=<local address>,<server address>[,<interface]
Configure dnsmasq ta do DHCP relay. Da local address be a address
allocated ta a intercourse on tha host hustlin dnsmasq fo' realz. All DHCP
requests arrivin on dat intercourse will we relayed ta a remote DHCP
server all up in tha server address. Well shiiiit, it is possible ta relay from a single local
address ta multiple remote servers by rockin multiple dhcp-relay
configs wit tha same local address n' different server
addresses fo' realz. A server address must be a IP literal address, not a
domain name. In tha case of DHCPv6, tha server address may be the
ALL_SERVERS multicast address, ff05::1:3. In dis case tha intercourse
must be given, not be wildcard, n' is used ta direct tha multicast ta the
correct intercourse ta reach tha DHCP server n' shit. 

Access control fo' DHCP clients has tha same ol' dirty rulez as fo' tha DHCP
server, peep --interface, --except-interface, etc. Da optional
interface name up in tha dhcp-relay config has a gangbangin' finger-lickin' different function: it
controls on which intercourse DHCP replies from tha server will be
accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is intended fo' configurations which have three
interfaces: one bein relayed from, a second connectin tha DHCP
server, n' a third untrusted network, typically tha wider
internet. Well shiiiit, it avoidz tha possibilitizzle of spoof replies arrivin via this
third intercourse.

It be allowed ta have dnsmasq act as a DHCP server on one set of
interfaces n' relay from a gangbangin' finger-lickin' disjoint set of intercourses. Note that
whilst it is like possible ta write configurations which step tha fuck up to
act as a server n' a relay on tha same intercourse, dis is not
supported: tha relay function will take precedence.

Both DHCPv4 n' DHCPv6 relay is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. It aint nuthin but not possible ta relay
DHCPv4 ta a DHCPv6 server or vice-versa.
.TP
.B \-U, --dhcp-vendorclass=set:<tag>,[enterprise:<IANA-enterprise number>,]<vendor-class>
Map from a vendor-class strang ta a tag. Most DHCP clients provide a 
"vendor class" which represents, up in some sense, tha type of host. This option 
maps vendor classes ta tags, so dat DHCP options may be selectively delivered
to different classez of hosts, n' you can put dat on yo' toast. For example 
.B dhcp-vendorclass=set:printers,Hewlett-Packard JetDirect
will allow options ta be set only fo' HP printas like so:
.B --dhcp-option=tag:printers,3,192.168.4.4 
Da vendor-class strang is
substrin matched against tha vendor-class supplied by tha client, to
allow fuzzy matching. Da set: prefix is optionizzle but allowed for
consistency. 

Note dat up in IPv6 only, vendorclasses is namespaced wit a 
IANA-allocated enterprise number n' shit. This is given wit enterprise:
keyword n' specifies dat only vendorclasses matchin tha specified
number should be searched.
.TP
.B \-j, --dhcp-userclass=set:<tag>,<user-class>
Map from a user-class strang ta a tag (with substring
matching, like vendor classes). Most DHCP clients provide a 
"user class" which is configurable. This option
maps user classes ta tags, so dat DHCP options may be selectively delivered
to different classez of hosts, n' you can put dat on yo' toast. Well shiiiit, it is possible, fo' instizzle ta use
this ta set a gangbangin' finger-lickin' different printa server fo' hosts up in tha class
"accounts" than fo' hosts up in tha class "engineering".
.TP
.B \-4, --dhcp-mac=set:<tag>,<MAC address>
Map from a MAC address ta a tag. Da MAC address may include
wildcards. For example
.B --dhcp-mac=set:3com,01:34:23:*:*:*
will set tha tag "3com" fo' any host whose MAC address matches tha pattern.
.TP
.B --dhcp-circuitid=set:<tag>,<circuit-id>, --dhcp-remoteid=set:<tag>,<remote-id>
Map from RFC3046 relay agent options ta tags. This data may
be provided by DHCP relay agents, n' you can put dat on yo' toast. Da circuit-id or remote-id is
normally given as colon-separated hex yo, but be also allowed ta be a
simple string. If a exact match be  bigged up  between tha circuit or
agent ID n' one provided by a relay agent, tha tag is set. 

.B dhcp-remoteid
(but not dhcp-circuitid) is supported up in IPv6. 
.TP
.B --dhcp-subscrid=set:<tag>,<subscriber-id>
(IPv4 n' IPv6) Map from RFC3993 subscriber-id relay agent options ta tags.
.TP
.B --dhcp-proxy[=<ip addr>]......
(IPv4 only) A aiiight DHCP relay agent is only used ta forward tha initial parts of
a DHCP interaction ta tha DHCP server n' shit. Once a cold-ass lil client is configured, it
communicates directly wit tha server n' shit. This is undesirable if the
relay agent be addin extra shiznit ta tha DHCP packets, such as
that used by
.B dhcp-circuitid
and
.B dhcp-remoteid.
A full relay implementation can use tha RFC 5107 serverid-override
option ta force tha DHCP server ta use tha relay as a gangbangin' full proxy, wit all
packets passin all up in dat shit. This flag serves up a alternatizzle method
of bustin tha same thang, fo' relays which don't support RFC
5107. Given alone, it manipulates tha server-id fo' all interactions
via relays. If a list of IP addresses is given, only interactions via
relays at dem addresses is affected.
.TP
.B --dhcp-match=set:<tag>,<option number>|option:<option name>|vi-encap:<enterprise>[,<value>]
Without a value, set tha tag if tha client sendz a DHCP
option of tha given number or name. When a value is given, set tha tag only if
the option is busted n' matches tha value. Da value may be of tha form
"01:ff:*:02" up in which case tha value must match (apart from wildcards)
but tha option busted may have unmatched data past tha end of the
value. Da value may also be of tha same form as up in 
.B dhcp-option
in which case tha option busted is treated as a array, n' one element
must match, so

--dhcp-match=set:efi-ia32,option:client-arch,6

will set tha tag "efi-ia32" if tha the number 6 appears up in tha list of
architectures busted by tha client up in option 93. (See RFC 4578 for
details.)  If tha value be a string, substrin matchin is used.

Da special form wit vi-encap:<enterprise number> matches against
vendor-identifyin vendor classes fo' tha specified enterprise. Please
see RFC 3925 fo' mo' detailz of these rare n' bangin-ass beasts.
.TP
.B --tag-if=set:<tag>[,set:<tag>[,tag:<tag>[,tag:<tag>]]]
Perform boolean operations on tags fo' realz. Any tag appearin as set:<tag> is set if
all tha tags which step tha fuck up as tag:<tag> is set, (or unset when tag:!<tag> is used)
If no tag:<tag> appears set:<tag> tags is set unconditionally.
Any number of set: n' tag: forms may appear, up in any order n' shit. 
Tag-if lines ares executed up in order, so if tha tag up in tag:<tag> be a
tag set by another
.B tag-if,
the line which sets tha tag must precede tha one which tests dat shit.
.TP
.B \-J, --dhcp-ignore=tag:<tag>[,tag:<tag>]
When all tha given tags step tha fuck up in tha tag set ignore tha host n' do
not allocate it a DHCP lease.
.TP
.B --dhcp-ignore-names[=tag:<tag>[,tag:<tag>]]
When all tha given tags step tha fuck up in tha tag set, ignore any hostname
provided by tha host. Note that, unlike dhcp-ignore, it is permissible
to supply no tags, up in which case DHCP-client supplied hostnames
are always ignored, n' DHCP hosts is added ta tha DNS rockin only
dhcp-host configuration up in dnsmasq n' tha contentz of /etc/hosts and
/etc/ethers.
.TP
.B --dhcp-generate-names=tag:<tag>[,tag:<tag>]
(IPv4 only) Generate a name fo' DHCP clients which do not otherwise have one,
usin tha MAC address expressed up in hex, separated by dashes. Note that
if a host serves up a name, it is ghon be used by preference ta this,
unless 
.B --dhcp-ignore-names 
is set.
.TP
.B --dhcp-broadcast[=tag:<tag>[,tag:<tag>]]
(IPv4 only) When all tha given tags step tha fuck up in tha tag set, always use broadcast to
communicate wit tha host when it is unconfigured. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is permissible
to supply no tags, up in which case dis is unconditional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Most DHCP clients which
need broadcast replies set a gangbangin' flag up in they requests so dat this
happens automatically, some oldschool BOOTP clients do not.
.TP
.B \-M, --dhcp-boot=[tag:<tag>,]<filename>,[<servername>[,<server address>|<tftp_servername>]]
(IPv4 only) Set BOOTP options ta be returned by tha DHCP server n' shit. Right back up in yo muthafuckin ass. Server name and
address is optional: if not provided, tha name is left empty, n' the
address set ta tha address of tha machine hustlin dnsmasq. If dnsmasq
is providin a TFTP steez (see 
.B --enable-tftp
) then only tha filename is required here ta enable network booting.
If tha optionizzle tag(s) is given,
they must match fo' dis configuration ta be sent. 
Instead of a IP address, tha TFTP server address can be given as a thugged-out domain
name which is looked up in /etc/hosts, n' you can put dat on yo' toast. This name can be associated in
/etc/hosts wit multiple IP addresses, which is used round-robin.
This facilitizzle can be used ta load balizzle tha tftp load among a set of servers.
.TP
.B --dhcp-sequential-ip
Dnsmasq is designed ta chizzle IP addresses fo' DHCP clients rockin a
hash of tha clientz MAC address. This normally allows a cold-ass lil client's
address ta remain stable long-term, even if tha client  sometimes allows its DHCP
lease ta expire. In dis default mode IP addresses is distributed
pseudo-randomly over tha entire available address range. There are
sometimes circumstances (typically server deployment) where it is more
convenient ta have IP
addresses allocated sequentially, startin from tha lowest available
address, n' settin dis flag enablez dis mode. Note dat up in the
sequential mode, clients which allow a lease ta expire is much more
likely ta move IP address; fo' dis reason it should not be generally used.
.TP
.B --pxe-service=[tag:<tag>,]<CSA>,<menu text>[,<basename>|<bootservicetype>][,<server address>|<server_name>]
Most usez of PXE boot-ROMS simply allow tha PXE
system ta obtain a IP address n' then downlizzle tha file specified by
.B dhcp-boot
and execute it yo. However tha PXE system is capable of mo' complex
functions when supported by a suitable DHCP server.

This specifies a funky-ass boot option which may step tha fuck up in a PXE boot menu fo'sho. <CSA> is
client system type, only skillz of tha erect type will step tha fuck up in a
menu fo'sho. Da known types is x86PC, PC98, IA64_EFI, Alpha, Arc_x86,
Intel_Lean_Client, IA32_EFI, BC_EFI, Xscale_EFI n' X86-64_EFI; an
integer may be used fo' other types. The
parameta afta tha menu text may be a gangbangin' file name, up in which case dnsmasq acts as a
boot server n' directs tha PXE client ta downlizzle tha file by TFTP,
either from itself (
.B enable-tftp 
must be set fo' dis ta work) or another TFTP server if tha final server
address/name is given.
Note dat tha "layer"
suffix (normally ".0") is supplied by PXE, n' should not be added to
the basename. If a integer boot steez type, rather than a funky-ass basename
is given, then tha PXE client will search fo' a
suitable boot steez fo' dat type on tha network. This search may be done
by broadcast, or direct ta a server if its IP address/name is provided. Y'all KNOW dat shit, muthafucka!  
If no boot steez type or filename is provided (or a funky-ass boot steez type of 0 is specified)
then tha menu entry will abort tha net boot procedure and
continue bootin from local media. Da server address can be given as a thugged-out domain
name which is looked up in /etc/hosts, n' you can put dat on yo' toast. This name can be associated in
/etc/hosts wit multiple IP addresses, which is used round-robin.
.TP
.B --pxe-prompt=[tag:<tag>,]<prompt>[,<timeout>]
Settin dis serves up a prompt ta be displayed afta PXE boot. If the
timeout is given then afta the
timeout has elapsed wit no keyboard input, tha straight-up original gangsta available menu
option is ghon be automatically executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha timeout is zero then tha straight-up original gangsta available menu
item is ghon be executed immediately. If 
.B pxe-prompt
is omitted tha system will wait fo' user input if there be multiple
items up in tha menu yo, but boot immediately if
there is only one. Right back up in yo muthafuckin ass. See
.B pxe-service 
for detailz of menu items.

Dnsmasq supports PXE "proxy-DHCP", up in dis case another DHCP server on
the network is responsible fo' allocatin IP addresses, n' dnsmasq
simply serves up tha shiznit given up in 
.B pxe-prompt
and
.B pxe-service
to allow netbooting. This mode is enabled rockin the
.B proxy
keyword in
.B dhcp-range.
.TP  
.B \-X, --dhcp-lease-max=<number>
Limits dnsmasq ta tha specified maximum number of DHCP leases. The
default is 1000. This limit is ta prevent DoS attacks from hosts which
create thousandz of leases n' use fuckin shitloadz of memory up in tha dnsmasq
process.
.TP
.B \-K, --dhcp-authoritative
Should be set when dnsmasq is definitely tha only DHCP server on a network.
For DHCPv4, it chizzlez tha behaviour from strict RFC compliizzle so dat DHCP requests on
unknown leases from unknown hosts is not ignored. Y'all KNOW dat shit, muthafucka! This allows freshly smoked up hosts
to git a lease without a tedious timeout under all circumstances. Well shiiiit, it also 
allows dnsmasq ta rebuild its lease database without each client needin ta 
reacquire a lease, if tha database is lost. For DHCPv6 it sets the
prioritizzle up in replies ta 255 (the maximum) instead of 0 (the minimum).
.TP
.B --dhcp-alternate-port[=<server port>[,<client port>]]
(IPv4 only) Chizzle tha ports used fo' DHCP from tha default. If dis option is
given alone, without arguments, it chizzlez tha ports used fo' DHCP
from 67 n' 68 ta 1067 n' 1068. If a single argument is given, that
port number is used fo' tha server n' tha port number plus one used
for tha client. Finally, two port numbers allows arbitrary
specification of both server n' client ports fo' DHCP.
.TP
.B \-3, --bootp-dynamic[=<network-id>[,<network-id>]]
(IPv4 only) Enable dynamic allocation of IP addresses ta BOOTP clients, n' you can put dat on yo' toast. Use this
with care, since each address allocated ta a BOOTP client is leased
forever, n' therefore becomes permanently unavailable fo' re-use by
other hosts, n' you can put dat on yo' toast. if dis is given without tags, then it unconditionally
enablez dynamic allocation. I aint talkin' bout chicken n' gravy biatch. With tags, only when tha tags is all
set. Well shiiiit, it may be repeated wit different tag sets, n' you can put dat on yo' toast. 
.TP
.B \-5, --no-ping
(IPv4 only) By default, tha DHCP server will attempt ta ensure dat a address in
not up in use before allocatin it ta a host. Well shiiiit, it do dis by bustin  an
ICMP echo request (aka "ping") ta tha address up in question. I aint talkin' bout chicken n' gravy biatch. If it gets
a reply, then tha address must already be up in use, n' another is
tried. Y'all KNOW dat shit, muthafucka! This flag disablez dis check. Use wit caution.
.TP
.B --log-dhcp
Extra loggin fo' DHCP: log all tha options busted ta DHCP clients and
the tags used ta determine em.
.TP
.B --quiet-dhcp, --quiet-dhcp6, --quiet-ra
Suppress loggin of tha routine operation of these protocols. Errors and
problems will still be logged. Y'all KNOW dat shit, muthafucka! --quiet-dhcp n' on tha fuckin' down-low-dhcp6 are
over-ridden by --log-dhcp.
.TP
.B \-l, --dhcp-leasefile=<path>
Use tha specified file ta store DHCP lease shiznit.
.TP 
.B --dhcp-duid=<enterprise-id>,<uid>
(IPv6 only) Specify tha server persistent UID which tha DHCPv6 server
will use. This option aint normally required as dnsmasq creates a
DUID automatically when it is first needed. Y'all KNOW dat shit, muthafucka! When given, dis option
provides dnsmasq tha data required ta create a DUID-EN type DUID. Note
that once set, tha DUID is stored up in tha lease database, so ta chizzle between DUID-EN and
automatically pimped DUIDs or vice-versa, tha lease database must be
re-intialised. Y'all KNOW dat shit, muthafucka! Da enterprise-id be assigned by IANA, n' tha uid be a
strin of hex octets unique ta a particular device.
.TP
.B \-6 --dhcp-script=<path>
Whenever a freshly smoked up DHCP lease is pimped, or a oldschool one destroyed, or a
TFTP file transfer completes, the
executable specified by dis option is run. I aint talkin' bout chicken n' gravy biatch.  <path>
must be a absolute pathname, no PATH search occurs. 
Da arguments ta tha process
are "add", "old" or "del", tha MAC
address of tha host (or DUID fo' IPv6) , tha IP address, n' tha hostname,
if known. I aint talkin' bout chicken n' gravy biatch. "add" means a lease has been pimped, "del" means it has
been destroyed, "old" be a notification of a existin lease when
dnsmasq starts or a cold-ass lil chizzle ta MAC address or hostname of a existing
lease (also, lease length or expiry n' client-id, if leasefile-ro is set).
If tha MAC address is from a network type other than ethernet,
it gonna git tha network type prepended, eg "06-01:23:45:67:89:ab" for
token ring. Da process is run as root (assumin dat dnsmasq was originally run as
root) even if dnsmasq is configured ta chizzle UID ta a unprivileged user.

Da environment is inherited from tha invoker of dnsmasq, wit some or
all of tha followin variablez added

For both IPv4 n' IPv6:

DNSMASQ_DOMAIN if tha fully-qualified domain name of tha host is
known, dis is set ta tha  domain part. (Note dat tha hostname passed
to tha script as a argument is never fully-qualified.)

If tha client serves up a hostname, DNSMASQ_SUPPLIED_HOSTNAME

If tha client serves up user-classes, DNSMASQ_USER_CLASS0..DNSMASQ_USER_CLASSn 

If dnsmasq was compiled wit HAVE_BROKEN_RTC, then
the length of tha lease (in seconds) is stored in
DNSMASQ_LEASE_LENGTH, otherwise tha time of lease expiry is stored in
DNSMASQ_LEASE_EXPIRES. Da number of secondz until lease expiry is
always stored up in DNSMASQ_TIME_REMAINING. 

If a lease used ta git a hostname, which is
removed, a "old" event is generated wit tha freshly smoked up state of tha lease, 
ie no name, n' tha forma name is provided up in tha environment 
variable DNSMASQ_OLD_HOSTNAME. 

DNSMASQ_INTERFACE stores tha name of
the intercourse on which tha request arrived; dis aint set fo' "old"
actions when dnsmasq restarts, n' you can put dat on yo' toast. 

DNSMASQ_RELAY_ADDRESS is set if tha client
used a DHCP relay ta contact dnsmasq n' tha IP address of tha relay
is known. I aint talkin' bout chicken n' gravy biatch. 

DNSMASQ_TAGS gotz nuff all tha tags set durin the
DHCP transaction, separated by spaces.

DNSMASQ_LOG_DHCP is set if
.B --log-dhcp
is up in effect.

For IPv4 only:

DNSMASQ_CLIENT_ID if tha host provided a cold-ass lil client-id.

DNSMASQ_CIRCUIT_ID, DNSMASQ_SUBSCRIBER_ID, DNSMASQ_REMOTE_ID if a
DHCP relay-agent added any of these options.
 
If tha client serves up vendor-class, DNSMASQ_VENDOR_CLASS.

For IPv6 only:

If tha client serves up vendor-class, DNSMASQ_VENDOR_CLASS_ID,
containin tha IANA enterprise id fo' tha class, and
DNSMASQ_VENDOR_CLASS0..DNSMASQ_VENDOR_CLASSn fo' tha data.

DNSMASQ_SERVER_DUID containin tha DUID of tha server: dis is tha same ol' dirty for
every call ta tha script.

DNSMASQ_IAID containin tha IAID fo' tha lease. If tha lease be a
temporary allocation, dis is prefixed ta 'T'.

DNSMASQ_MAC containin tha MAC address of tha client, if known.

Note dat tha supplied hostname, vendorclass n' userclass data is
only  supplied for
"add" actions or "old" actions when a host resumes a existin lease,
since these data is not held up in dnsmasqz lease
database.



All file descriptors are
closed except stdin, stdout n' stderr which is open ta /dev/null
(except up in debug mode).

Da script aint invoked concurrently: at most one instance
of tha script is eva hustlin (dnsmasq waits fo' a instizzle of script ta exit
before hustlin tha next). Chizzlez ta tha lease database is which
require tha script ta be invoked is queued awaitin exit of a hustlin instance.
If dis queuein allows multiple state chizzlez occur ta a single
lease before tha script can be run then 
earlier states is discarded n' tha current state of dat lease is
reflected when tha script finally runs. 

At dnsmasq startup, tha script is ghon be invoked for
all existin leases as they is read from tha lease file. Expired
leases is ghon be called wit "del" n' others wit "old". When dnsmasq
receives a HUP signal, tha script is ghon be invoked fo' existin leases
with a "old " event.


There is two further actions which may step tha fuck up as tha straight-up original gangsta argument
to tha script, "init" n' "tftp". Mo' may be added up in tha future, so
scripts should be freestyled ta ignore unknown actions. "init" is
busted lyrics bout below up in 
.B --leasefile-ro
Da "tftp" action is invoked when a TFTP file transfer completes: the
arguments is tha file size up in bytes, tha address ta which tha file
was sent, n' tha complete pathname of tha file.
 
.TP
.B --dhcp-luascript=<path>
Specify a script freestyled up in Lua, ta be run when leases is pimped,
destroyed or chizzled. Y'all KNOW dat shit, muthafucka! To use dis option, dnsmasq must be compiled
with tha erect support. Da Lua interpreta is intialised once, when
dnsmasq starts, so dat global variablez persist between lease
events, n' you can put dat on yo' toast. Da Lua code must define a
.B lease
function, n' may provide
.B init
and
.B shutdown
functions, which is called, without arguments when dnsmasq starts up
and terminates. Well shiiiit, it may also provide a 
.B tftp
function.

Da 
.B lease
function receives tha shiznit detailed up in 
.B --dhcp-script. 
It gets two arguments, firstly tha action, which be a string
containing, "add", "old" or "del", n' secondly a table of tag value
pairs. Da tags mostly correspond ta tha environment variables
detailed above, fo' instizzle tha tag "domain" holdz tha same ol' dirty data as
the environment variable DNSMASQ_DOMAIN. There is all dem extra tags
which hold tha data supplied as arguments to
.B --dhcp-script. 
These is 
.B mac_address, ip_address
and 
.B hostname
for IPv4, n' 
.B client_duid, ip_address
and 
.B hostname
for IPv6.

Da  
.B tftp
function is called up in tha same way as tha lease function, n' the
table holdz tha tags 
.B destination_address,
.B file_name
and 
.B file_size.
.TP
.B --dhcp-scriptuser
Specify tha user as which ta run tha lease-change script or Lua script. This defaults ta root yo, but can be chizzled ta another user rockin dis flag. 
.TP 
.B \-9, --leasefile-ro
All Out suppress use of tha lease database file. Da file will not
be pimped, read, or written. I aint talkin' bout chicken n' gravy biatch. Chizzle tha way tha lease-change
script (if one is provided) is called, so dat tha lease database may
be maintained up in external storage by tha script. In addizzle ta the
invocations  given up in 
.B  --dhcp-script
the lease-change script is called once, at dnsmasq startup, wit the
single argument "init". When called like dis tha script should write
the saved state of tha lease database, up in dnsmasq leasefile format, to
stdout n' exit wit zero exit code. Right back up in yo muthafuckin ass. Settin this
option also forces tha leasechange script ta be called on chizzles
to tha client-id n' lease length n' expiry time.
.TP
.B --bridge-interface=<interface>,<alias>[,<alias>]
Treat DHCP request packets arrivin at any of tha <alias> intercourses
as if they had arrived at <interface>. This option is necessary when
usin "old style" bridgin on BSD platforms, since
packets arrive at tap intercourses which aint gots a IP address.
.TP
.B \-s, --domain=<domain>[,<address range>[,local]]
Specifies DNS domains fo' tha DHCP server n' shit. Domains may be be given 
unconditionally (without tha IP range) or fo' limited IP ranges. This has two effects;
firstly it causes tha DHCP server ta return tha domain ta any hosts
which request it, n' secondly it sets tha domain which it is legal
for DHCP-configured hosts ta claim. Da intention is ta constrain
hostnames so dat a untrusted host on tha LAN cannot advertise 
its name via dhcp as e.g. "microsoft.com" n' capture traffic not 
meant fo' dat shit. If no domain suffix is specified, then any DHCP
hostname wit a thugged-out domain part (ie wit a period) is ghon be disallowed 
and logged. Y'all KNOW dat shit, muthafucka! If suffix is specified, then hostnames wit a thugged-out domain 
part is allowed, provided tha domain part matches tha suffix. In
addition, when a suffix is set then hostnames without a thugged-out domain
part have tha suffix added as a optionizzle domain part. Eg on mah network I can set 
.B --domain=thekelleys.org.uk
and gotz a machine whose DHCP hostname is "laptop". Da IP address fo' dat machine be available from 
.B dnsmasq
both as "laptop" n' "laptop.thekelleys.org.uk". If tha domain is
given as "#" then tha domain is read from tha straight-up original gangsta "search" directive
in /etc/resolv.conf (or equivalent).

Da address range can be of tha form
<ip address>,<ip address> or <ip address>/<netmask> or just a single
<ip address>. Right back up in yo muthafuckin ass. See 
.B --dhcp-fqdn
which can chizzle tha behaviour of dnsmasq wit domains.

If tha address range is given as ip-address/network-size, then a
additionizzle flag "local" may be supplied which has tha effect of adding
--local declarations fo' forward n' reverse DNS queries. Put ya muthafuckin choppers up if ya feel dis! Eg.
.B --domain=thekelleys.org.uk,192.168.0.0/24,local
is identical to
.B --domain=thekelleys.org.uk,192.168.0.0/24
--local=/thekelleys.org.uk/ --local=/0.168.192.in-addr.arpa/
Da network size must be 8, 16 or 24 fo' dis ta be legal.
.TP
.B --dhcp-fqdn
In tha default mode, dnsmasq bangs tha unqualified names of
DHCP clients tha fuck into tha DNS. For dis reason, tha names must be unique,
even if two clients which have tha same name is up in different
domains. If a second DHCP client appears which has tha same ol' dirty name as an
existin client, tha name is transferred ta tha freshly smoked up client. If 
.B --dhcp-fqdn
is set, dis behaviour chizzles: tha unqualified name is no longer
put up in tha DNS, only tha qualified name. Two DHCP clients wit the
same name may both keep tha name, provided dat tha domain part is
different (ie tha straight-up qualified names differ.) To ensure dat all
names gotz a thugged-out domain part, there must be at least 
.B --domain 
without a address specified when 
.B --dhcp-fqdn 
is set.
.TP
.B --dhcp-client-update
Normally, when givin a DHCP lease, dnsmasq sets flags up in tha FQDN
option ta tell tha client not ta attempt a DDNS update wit its name
and IP address. This is cuz tha name-IP pair be automatically
added tha fuck into dnsmasqz DNS view. This flag suppresses dat behaviour,
this is useful, fo' instance, ta allow Windows clients ta update
Actizzle Directory servers. Right back up in yo muthafuckin ass. See RFC 4702 fo' details. 
.TP
.B --enable-ra
Enable dnsmasqz IPv6 Routa Advertisement feature. DHCPv6 don't
handle complete network configuration up in tha same way as DHCPv4. Router
discovery n' (possibly) prefix discovery fo' autonomous address
creation is handled by a gangbangin' finger-lickin' different protocol. When DHCP is up in use,
only a subset of dis is needed, n' dnsmasq can handle it, using
existin DHCP configuration ta provide most data. When RA is enabled,
dnsmasq will advertise a prefix fo' each dhcp-range, wit default
routa n' recursive DNS server as tha relevant link-local address on 
the machine hustlin dnsmasq. By default, he "managed address" bits is set, and
the "use SLAAC" bit is reset. This can be chizzled fo' individual
subnets wit tha mode keywordz busted lyrics bout in
.B --dhcp-range.
RFC6106 DNS parametas is included up in tha advertisements, n' you can put dat on yo' toast. By default,
the relevant link-local address of tha machine hustlin dnsmasq is sent
as recursive DNS server n' shit. If provided, tha DHCPv6 options dns-server and
domain-search is used fo' RDNSS n' DNSSL.
.TP
.B --ra-param=<interface>,[high|low],[[<ra-interval>],<routa gametime>]
Set non-default joints fo' routa advertisements busted via an
interface. Da prioritizzle field fo' tha routa may be altered from the
default of medium wit eg
.B --ra-param=eth0,high.
Da interval between routa advertisements may be set (in seconds) wit 
.B --ra-param=eth0,60.
Da gametime of tha route may be chizzled or set ta zero, which allows
a routa ta advertise prefixes but not a route via itself. 
.B --ra-parm=eth0,0,0
(A value of zero fo' tha interval means tha default value.) All three parametas may be set at once.
.B --ra-param=low,60,1200
Da intercourse field may include a wildcard.
.TP
.B --enable-tftp[=<interface>[,<interface>]]
Enable tha TFTP server function. I aint talkin' bout chicken n' gravy biatch. This is deliberately limited ta that
needed ta net-boot a cold-ass lil client. Only readin be allowed; tha tsize and
blksize extensions is supported (tsize is only supported up in octet
mode). Without a argument, tha TFTP steez is provided ta tha same set of intercourses as DHCP service. 
If tha list of intercourses is provided, dat defines which intercourses recieve TFTP service.
.TP
.B --tftp-root=<directory>[,<interface>]
Look fo' filez ta transfer rockin TFTP relatizzle ta tha given
directory. When dis is set, TFTP paths which include ".." are
rejected, ta stop clients gettin outside tha specified root.
Absolute paths (startin wit /) is allowed yo, but they must be within
the tftp-root. If tha optionizzle intercourse argument is given, the
directory is only used fo' TFTP requests via dat intercourse.
.TP
.B --tftp-unique-root
Add tha IP address of tha TFTP client as a path component on tha end
of tha TFTP-root (in standard dotted-quad format). Only valid if a
tftp-root is set n' tha directory exists, n' you can put dat on yo' toast. For instance, if tftp-root is "/tftp" n' client 
1.2.3.4 requests file "myfile" then tha effectizzle path will be
"/tftp/1.2.3.4/myfile" if /tftp/1.2.3.4 exists or /tftp/myfile otherwise.
.TP
.B --tftp-secure
Enable TFTP secure mode: without this, any file which is readable by
the dnsmasq process under aiiight unix access-control rulez is
available via TFTP. When tha --tftp-secure flag is given, only files
owned by tha user hustlin tha dnsmasq process is accessible. If
dnsmasq is bein run as root, different rulez apply: --tftp-secure
has no effect yo, but only filez which have tha ghetto-readable bit set
are accessible. Well shiiiit, it aint recommended ta run dnsmasq as root wit TFTP
enabled, n' certainly not without specifyin --tftp-root. Bustin so
can expose any ghetto-readable file on tha server ta any host on tha net. Put yo muthafuckin choppers up if ya feel this muthafucka! 
.TP
.B --tftp-lowercase
Convert filenames up in TFTP requests ta all lowercase. This is useful
for requests from Windows machines, which have case-insensitive
filesystems n' tend ta play fast-and-loose wit case up in filenames.
Note dat dnsmasqz tftp server always converts "\\" ta "/" up in filenames.
.TP
.B --tftp-max=<connections>
Set tha maximum number of concurrent TFTP connections allowed. Y'all KNOW dat shit, muthafucka! This
defaults ta 50. When servin a big-ass number of TFTP connections,
per-process file descriptor limits may be encountered. Y'all KNOW dat shit, muthafucka! Dnsmasq needs
one file descriptor fo' each concurrent TFTP connection n' one
file descriptor per unique file (plus all dem others). Right back up in yo muthafuckin ass. So servin the
same file simultaneously ta n clients will use require bout n + 10 file
descriptors, servin different filez simultaneously ta n clients will
require bout (2*n) + 10 descriptors. If 
.B --tftp-port-range
is given, dat can affect tha number of concurrent connections.
.TP
.B --tftp-no-blocksize
Quit tha TFTP server from negotiatin tha "blocksize" option wit a
client. Right back up in yo muthafuckin ass. Some buggy clients request dis option but then behave badly
when it is granted.
.TP
.B --tftp-port-range=<start>,<end>
A TFTP server listens on a well-known port (69) fo' connection initiation,
but it also uses a thugged-out dynamically-allocated port fo' each
connection. I aint talkin' bout chicken n' gravy biatch. Normally these is allocated by tha OS yo, but dis option
specifies a range of ports fo' use by TFTP transfers. This can be
useful when TFTP has ta traverse a gangbangin' firewall. Da start of tha range
cannot be lower than 1025 unless dnsmasq is hustlin as root. Da number
of concurrent TFTP connections is limited by tha size of tha port range. 
.TP  
.B \-C, --conf-file=<file>
Specify a gangbangin' finger-lickin' different configuration file. Da conf-file option be also allowed in
configuration files, ta include multiple configuration filez fo' realz. A
filename of "-" causes dnsmasq ta read configuration from stdin.
.TP
.B \-7, --conf-dir=<directory>[,<file-extension>......]
Read all tha filez up in tha given directory as configuration
files. If extension(s) is given, any filez which end up in them
extensions is skipped. Y'all KNOW dat shit, muthafucka! Any filez whose names end up in ~ or start wit . or start n' end
with # is always skipped. Y'all KNOW dat shit, muthafucka! This flag may be given on tha command
line or up in a cold-ass lil configuration file.
.SH CONFIG FILE
At startup, dnsmasq reads
.I /etc/dnsmasq.conf,
if it exists, n' you can put dat on yo' toast. (On
FreeBSD, tha file is 
.I /usr/local/etc/dnsmasq.conf
) (but peep tha 
.B \-C
and
.B \-7
options.) Da format of this
file consistz of one option per line, exactly as tha long options detailed 
in tha OPTIONS section but without tha leadin "--". Lines startin wit # is comments n' ignored. Y'all KNOW dat shit, muthafucka! For
options which may only be specified once, tha configuration file overrides 
the command line.  Quotin be allowed up in a cold-ass lil config file:
between " quotes tha special meaningz of ,:. n' # is removed n' the
followin escapes is allowed: \\\\ \\" \\t \\e \\b \\r n' \\n. I aint talkin' bout chicken n' gravy biatch. Da lata 
correspondin ta tab, escape, backspace, return n' newline.
.SH NOTES
When it receives a SIGHUP, 
.B dnsmasq 
clears its cache n' then re-loadz 
.I /etc/hosts
and 
.I /etc/ethers 
and any file given by --dhcp-hostsfile, --dhcp-optsfile or --addn-hosts.
Da dhcp lease chizzle script is called fo' all
existin DHCP leases. If 
.B
--no-poll
is set SIGHUP also re-reads
.I /etc/resolv.conf.
SIGHUP
does NOT re-read tha configuration file.
.PP
When it receives a SIGUSR1,
.B dnsmasq 
writes statistics ta tha system log. Well shiiiit, it writes tha cache size,
the number of names which have had ta removed from tha cache before
they expired up in order ta make room fo' freshly smoked up names n' tha total number
of names dat done been banged tha fuck into tha cache. For each upstream
server it gives tha number of queries sent, n' tha number which
resulted up in a error. Shiiit, dis aint no joke. In 
.B --no-daemon
mode or when full loggin is enabled (-q), a cold-ass lil complete dump of the
contentz of tha cache is made.
.PP 
When it receives SIGUSR2 n' it is loggin direct ta a gangbangin' file (see
.B --log-facility
) 
.B dnsmasq
will close n' reopen tha log file. Note dat durin dis operation,
dnsmasq aint gonna be hustlin as root. When it first creates tha logfile
dnsmasq chizzlez tha ballershizzle of tha file ta tha non-root user it will run
as. Logrotate should be configured ta create a freshly smoked up log file with
the ballershizzle which matches tha existin one before bustin  SIGUSR2.
If TCP DNS queries is up in progress, tha oldschool logfile will remain open in
child processes which is handlin TCP queries n' may continue ta be
written. I aint talkin' bout chicken n' gravy biatch. There be a limit of 150 seconds, afta which all existin TCP
processes gonna git expired: fo' dis reason, it aint wise to
configure logfile compression fo' logfilez which have just been
rotated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Usin logrotate, tha required options is 
.B create 
and
.B delaycompress.

 
.PP
Dnsmasq be a DNS query forwarder: it it not capable of recursively
answerin arbitrary queries startin from tha root servers but
forwardz such queries ta a gangbangin' straight-up recursive upstream DNS server which is
typically provided by a ISP. By default, dnsmasq reads
.I /etc/resolv.conf
to discover tha IP
addressez of tha upstream nameservers it should use, since the
information is typically stored there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Unless
.B --no-poll
is used,
.B dnsmasq
checks tha modification time of
.I /etc/resolv.conf
(or equivalent if 
.B \--resolv-file 
is used) n' re-readz it if it chizzles. This allows tha DNS servers to
be set dynamically by PPP or DHCP since both protocols provide the
information.
Absence of
.I /etc/resolv.conf
is not a error
since it may not done been pimped before a PPP connection exists, n' you can put dat on yo' toast. Dnsmasq 
simply keeps checkin up in case
.I /etc/resolv.conf 
is pimped at any
time. Dnsmasq can be holla'd at ta parse mo' than one resolv.conf
file. This is useful on a laptop, where both PPP n' DHCP may be used:
dnsmasq can be set ta poll both 
.I /etc/ppp/resolv.conf 
and
.I /etc/dhcpc/resolv.conf 
and will use tha contentz of whichever chizzled
last, givin automatic switchin between DNS servers.
.PP
Upstream servers may also be specified on tha command line or in
the configuration file. These server justifications optionally take a
domain name which  drops some lyrics ta dnsmasq ta use dat server only ta find names
in dat particular domain.
.PP
In order ta configure dnsmasq ta act as cache fo' tha host on which it is hustlin, put "nameserver 127.0.0.1" in
.I /etc/resolv.conf
to force local processes ta bust queries to
dnsmasq. Then either specify tha upstream servers directly ta dnsmasq
usin 
.B \--server
options or put they addresses real up in another file, say
.I /etc/resolv.dnsmasq
and run dnsmasq wit tha 
.B \-r /etc/resolv.dnsmasq
option. I aint talkin' bout chicken n' gravy biatch. This second technique allows fo' dynamic update of tha server
addresses by PPP or DHCP.
.PP
Addresses up in /etc/hosts will "shadow" different addresses fo' tha same
names up in tha upstream DNS, so "mycompany.com 1.2.3.4" up in /etc/hosts will ensure that
queries fo' "mycompany.com" always return 1.2.3.4 even if queries in
the upstream DNS would otherwise return a gangbangin' finger-lickin' different address. There is
one exception ta this: if tha upstream DNS gotz nuff a CNAME which
points ta a gangbangin' finger-lickin' dirty-ass shadowed name, then lookin up tha CNAME all up in dnsmasq
will result up in tha unshadowed address associated wit tha target of
the CNAME. To work round this, add tha CNAME ta /etc/hosts so that
the CNAME is shadowed like a muthafucka.

.PP
Da tag system works as bigs up: For each DHCP request, dnsmasq
collects a set of valid tags from actizzle configuration lines which
include set:<tag>, includin one from tha 
.B dhcp-range
used ta allocate tha address, one from any matchin 
.B dhcp-host
(and "known" if a thugged-out dhcp-host matches) 
Da tag "bootp" is set fo' BOOTP requests, n' a tag whose name is tha 
name of tha intercourse on which tha request arrived be also set.

Any configuration lines which include one or mo' tag:<tag> constructs
will only be valid if all dat tags is matched up in tha set derived
above. Typically dis is dhcp-option.
.B dhcp-option 
which has tags is ghon be used up in preference  ta a untagged 
.B dhcp-option,
provided dat _all_ tha tags match somewhere up in the
set collected as busted lyrics bout above. Da prefix '!' on a tag means 'not'
so --dhcp=option=tag:!purple,3,1.2.3.4 sendz tha option when the
tag purple aint up in tha set of valid tags. (If rockin dis up in a
command line rather than a cold-ass lil configuration file, be shizzle ta escape !,
which be a gangbangin' finger-lickin' dirty-ass shell metacharacter)

When selectin dhcp-options, a tag from dhcp-range is second class
relatizzle ta other tags, ta make it easy as fuck  ta override options for
individual hosts, so 
.B dhcp-range=set:interface1,......
.B dhcp-host=set:myhost,.....
.B dhcp-option=tag:interface1,option:nis-domain,"domain1"
.B dhcp-option=tag:myhost,option:nis-domain,"domain2"
will set tha NIS-domain ta domain1 fo' hosts up in tha range yo, but
override dat ta domain2 fo' a particular host.

.PP
Note dat fo' 
.B dhcp-range 
both tag:<tag> n' set:<tag> is allowed, ta both select tha range in
use based on (eg) dhcp-host, n' ta affect tha options sent, based on
the range selected.

This system evolved from a earlier, mo' limited one n' fo' backward
compatibilitizzle "net:" may be used instead of "tag:" n' "set:" may be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (Except up in 
.B dhcp-host,
where "net:" may be used instead of "set:".) For tha same reason, '#'
may be used instead of '!' ta indicate NOT.
.PP 
Da DHCP server up in dnsmasq will function as a BOOTP server also,
provided dat tha MAC address n' IP address fo' clients is given,
either rockin 
.B dhcp-host 
configurations or in
.I /etc/ethers
, n' a
.B dhcp-range 
configuration option is present ta activate tha DHCP server
on a particular network. (Settin --bootp-dynamic removes tha need for
static address mappings.) Da filename
parameta up in a BOOTP request is used as a tag,
as is tha tag "bootp", allowin some control over tha options returned to
different classez of hosts.

.SH AUTHORITATIVE CONFIGURATION
.PP 
Configurin dnsmasq ta act as a authoritatizzle DNS server is
fucked up by tha fact dat it involves configuration of external DNS
servers ta provide delegation. I aint talkin' bout chicken n' gravy biatch. Us thugs will strutt all up in three scenarios of
increasin complexity. Prerequisites fo' all of these scenarios
are a globally accessible IP address, a A or AAAA record pointin ta dat address,
and a external DNS server capable of bustin delegation of tha unit in
question. I aint talkin' bout chicken n' gravy biatch. For tha straight-up original gangsta part of dis explanation, we will call tha A (or AAAA) record
for tha globally accessible address server.example.com, n' tha unit
for which dnsmasq be authoritatizzle our.zone.com.

Da simplest configuration consistz of two linez of dnsmasq configuration; suttin' like

.nf
.B auth-server=server.example.com,eth0
.B auth-zone=our.zone.com,1.2.3.0/24
.fi

and two recordz up in tha external DNS

.nf
server.example.com       A    192.0.43.10
our.zone.com            NS    server.example.com
.fi

eth0 is tha external network intercourse on which dnsmasq is listening,
and has (globally accessible) address 192.0.43.10. 

Note dat tha external IP address may well be dynamic (ie assigned
from a ISP by DHCP or PPP) If so, tha A record must be linked ta this
dynamic assignment by one of tha usual dynamic-DNS systems.

A mo' complex yo, but practically useful configuration has tha address
record fo' tha globally accessible IP address residin up in the
authoritatizzle unit which dnsmasq is serving, typically all up in tha root. Now
we have

.nf
.B auth-server=our.zone.com,eth0
.B auth-zone=our.zone.com,1.2.3.0/24
.fi

.nf
our.zone.com             A    1.2.3.4
our.zone.com            NS    our.zone.com
.fi

Da A record fo' our.zone.com has now become a glue record, it solves
the chicken-and-egg problem of findin tha IP address of the
nameserver fo' our.zone.com when tha A record is within that
zone. Note dat dis is tha only role of dis record: as dnsmasq is
now authoritatizzle from our.zone.com it too must provide this
record. Y'all KNOW dat shit, muthafucka! If tha external address is static, dis can be done wit an
.B /etc/hosts 
entry or 
.B --host-record.

.nf
.B auth-server=our.zone.com,eth0
.B host-record=our.zone.com,1.2.3.4
.B auth-zone=our.zone.com,1.2.3.0/24
.fi

If tha external address is dynamic, tha address
associated wit our.zone.com must be derived from tha address of the
relevant intercourse. This is done rockin 
.B intercourse-name
Somethang like:

.nf
.B auth-server=our.zone.com,eth0
.B intercourse-name=our.zone.com,eth0
.B auth-zone=our.zone.com,1.2.3.0/24,eth0
.fi

(Da "eth0" argument up in auth-zone addz tha subnet containin eth0's
dynamic address ta tha unit, so dat tha intercourse-name returns the
address up in outside queries.)

Our final configuration buildz on dat above yo, but also addz a
secondary DNS server n' shit. This be another DNS server which learns tha DNS data
for tha unit by bustin units transfer, n' acts as a funky-ass backup should
the primary server become inaccessible. Da configuration of the
secondary is beyond tha scope of dis man-page yo, but tha extra
configuration of dnsmasq is simple:

.nf
.B auth-sec-servers=secondary.myisp.com
.fi

and

.nf
our.zone.com           NS    secondary.myisp.com
.fi

Addin auth-sec-servers enablez unit transfer up in dnsmasq, ta allow the
secondary ta collect tha DNS data. If you wish ta restrict dis data
to particular hosts then

.nf
.B auth-peer=<IP address of secondary>
.fi

will do so.

Dnsmasq acts as a authoritatizzle server fo'  in-addr.arpa and
ipv6.arpa domains associated wit tha subnets given up in auth-zone
declarations, so reverse (address ta name) lookups can be simply
configured wit a suitable NS record, fo' instizzle up in dis example,
where we allow 1.2.3.0/24 addresses.

.nf
 3.2.1.in-addr.arpa  NS    our.zone.com
.fi

Note dat at present, reverse (in-addr.arpa n' ip6.arpa) units are
not available up in unit transfers, so there is no point arranging
secondary servers fo' reverse lookups.

.PP
When dnsmasq is configured ta act as a authoritatizzle server, the
followin data is used ta populate tha authoritatizzle unit.
.PP
.B --mx-host, --srv-host, --dns-rr, --txt-record, --naptr-record
, as long as tha record names is up in tha authoritatizzle domain.
.PP
.B --cname
as long as tha record name is up in  tha authoritatizzle domain. I aint talkin' bout chicken n' gravy biatch. If the
target of tha CNAME is unqualified, then it  is qualified wit the
authoritatizzle unit name.
.PP
IPv4 n' IPv6 addresses from /etc/hosts (and 
.B --addn-hosts
) and
.B --host-record
and 
.B --interface-name
provided tha address falls tha fuck into one of tha subnets specified up in the
.B --auth-zone.
.PP
Addressez of DHCP leases, provided tha address falls tha fuck into one of tha subnets specified up in the
.B --auth-zone.
(If contructed DHCP ranges is is use, which depend on tha address dynamically 
assigned ta a intercourse, then tha form of
.B --auth-zone
which defines subnets by tha dynamic address of a intercourse should
be used ta ensure dis condizzle is met.)
.PP 
In tha default mode, where a DHCP lease
has a unqualified name, n' possibly a qualified name constructed
usin 
.B --domain
then tha name up in tha authoritatizzle unit is constructed from the
unqualified name n' tha unitz domain. I aint talkin' bout chicken n' gravy biatch. This may or may not equal
that specified by 
.B --domain.
If 
.B --dhcp-fqdn
is set, then tha straight-up qualified names associated wit DHCP leases are
used, n' must match tha unitz domain.
 


.SH EXIT CODES
.PP
0 - Dnsmasq successfully forked tha fuck into tha background, or terminated
normally if backgroundin aint enabled.
.PP
1 - A problem wit configuration was detected.
.PP
2 - A problem wit network access occurred (address up in use, attempt
to use privileged ports without permission).
.PP
3 - A problem occurred wit a gangbangin' filesystem operation (missing
file/directory, permissions).
.PP
4 - Memory allocation failure.
.PP
5 - Other miscellaneous problem.
.PP
11 or pimped outa - a non zero return code was received from the
lease-script process "init" call. Da exit code from dnsmasq is the
scriptz exit code wit 10 added. Y'all KNOW dat shit, muthafucka! 

.SH LIMITS
Da default joints fo' resource limits up in dnsmasq is generally
conservative, n' appropriate fo' embedded routa type devices with
slow processors n' limited memory. On mo' capable hardware, it is
possible ta increase tha limits, n' handle nuff mo' clients, n' you can put dat on yo' toast. The
followin applies ta dnsmasq-2.37: earlier versions did not scale as well.
 
.PP
Dnsmasq is capable of handlin DNS n' DHCP fo' at least a thousand
clients, n' you can put dat on yo' toast. Da DHCP lease times should not be straight-up short (less than one hour). The
value of 
.B --dns-forward-max 
can be increased: start wit it equal to
the number of clients n' increase if DNS seems slow. Note dat DNS
performizzle dependz too on tha performizzle of tha upstream
nameservers. Da size of tha DNS cache may be increased: tha hard
limit is 10000 names n' tha default (150) is straight-up low. Right back up in yo muthafuckin ass. Sending
SIGUSR1 ta dnsmasq make it log shiznit which is useful fo' tuning
the cache size. Right back up in yo muthafuckin ass. See tha 
.B NOTES
section fo' details.

.PP
Da built-in TFTP server is capable of nuff simultaneous file
transfers: tha absolute limit is related ta tha number of file-handles
allowed ta a process n' tha mobilitizzle of tha select() system call to
cope wit big-ass numberz of file handles. If tha limit is set too high
usin 
.B --tftp-max
it is ghon be scaled down n' tha actual limit logged at
start-up. Note dat mo' transfers is possible when tha same file is
bein busted than when each transfer sendz a gangbangin' finger-lickin' different file.

.PP
It be possible ta use dnsmasq ta block Web advertisin by rockin a list
of known banner-ad servers, all resolvin ta 127.0.0.1 or 0.0.0.0, in
.B /etc/hosts 
or a additionizzle hosts file. Da list can be straight-up long, 
dnsmasq has been tested successfully wit one mazillion names. That size
file needz a 1GHz processor n' bout 60Mb of RAM.

.SH INTERNATIONALISATION
Dnsmasq can be compiled ta support internationalisation. I aint talkin' bout chicken n' gravy biatch. To do this,
the make targets "all-i18n" n' "install-i18n" should be used instead of
the standard targets "all" n' "install". When internationalisation
is compiled in, dnsmasq will produce log lyrics up in tha local
language n' support internationalised domain names (IDN). Domain
names up in /etc/hosts, /etc/ethers n' /etc/dnsmasq.conf which contain
non-ASCII charactas is ghon be translated ta tha DNS-internal punycode
representation. I aint talkin' bout chicken n' gravy biatch. Note that
dnsmasq determines both tha language fo' lyrics n' tha assumed
charset fo' configuration
filez from tha LANG environment variable. This should be set ta tha system
default value by tha script which is responsible fo' starting
dnsmasq. When editin tha configuration files, be careful ta do so
usin only tha system-default locale n' not user-specific one, since
dnsmasq has no direct way of determinin tha charset up in use, n' must
assume dat it is tha system default. 
 
.SH FILES
.IR /etc/dnsmasq.conf 

.IR /usr/local/etc/dnsmasq.conf

.IR /etc/resolv.conf
.IR /var/run/dnsmasq/resolv.conf
.IR /etc/ppp/resolv.conf
.IR /etc/dhcpc/resolv.conf

.IR /etc/hosts

.IR /etc/ethers

.IR /var/lib/dnsmasq/dnsmasq.leases 

.IR /var/db/dnsmasq.leases

.IR /var/run/dnsmasq.pid
.SH SEE ALSO
.BR hosts (5), 
.BR resolver (5)
.SH AUTHOR
This manual page was freestyled by Semen Kelley <simon@thekelleys.org.uk>.


