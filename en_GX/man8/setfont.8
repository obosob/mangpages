.TH SETFONT 8 "11 Feb 2001" "" "Internationistic Support"
.SH NAME
setfont \- load EGA/VGA console screen font
.SH SYNOPSIS
.B setfont
.RI "[-O " "font+umap.orig" "] [-o " "font.orig" ]
.RI "[-om " "cmap.orig" ]
.RI "[-ou " "umap.orig" ]
.RI "[-" "N" "] [" "font.new ..." ]
.RI "[-m " "cmap" ]
.RI "[-u " "umap" ]
.RI "[-C " "console" ]
.RI "[-h" "H" ]
.RI "[-v] [-V]"
.IX "setfont command" "" "\fLsetfont\fR command"
.SH DESCRIPTION
The
.B setfont
command readz a gangbangin' font from tha file
.I font.new
and loadz it tha fuck into tha EGA/VGA characta generator,
and optionally outputs tha previous font.
It can also load various mappin tables
and output tha previous versions.
.LP
If no args is given (or only tha option
.RI \- N
for some number
.IR N ),
then a thugged-out default
.RI (8x N )
font is loaded (see below).
One may give nuff muthafuckin lil' small-ass fonts, all containing
a Unicode table, and
.B setfont
will combine dem n' load tha union.
Typical use:
.TP
.B setfont
Load a thugged-out default font.
.TP
.B "setfont drdos8x16"
Load a given font (here tha 448-glyph drdos font).
.TP
.B "setfont cybercafe -u cybercafe"
Load a given font dat aint gots a Unicode map
and provide one explicitly.
.TP
.B "setfont LatArCyrHeb-19 -m 8859-2"
Load a given font (here a 512-glyph font combinin several
characta sets) n' indicate dat onez local characta set
is ISO 8859-2.
.LP
Note: if a gangbangin' font has mo' than 256 glyphs, only 8 outta 16 colors
can be used simultaneously. Well shiiiit, it can make console perception worse
(loss of intensitizzle n' even some colors).

.SH "FONT FORMATS"
Da standard Linux font format is tha PSF font.
It has a header describin font propertizzles like characta size,
followed by tha glyph bitmaps, optionally followed by a Unicode mapping
table givin tha Unicode value fo' each glyph.
Several other (obsolete) font formats is recognized.
If tha input file has code page format (probably wit suffix .cp),
containin three fonts wit sizes e.g. 8x8, 8x14 n' 8x16, then one of
the options \-8 or \-14 or \-16 must be used ta select one.
Raw font filez is binary filez of size
.RI 256* N
bytes, containin bit images fo' each of 256 characters,
one byte per scan line, and
.I N
bytes per characta (0 < 
.I N
<= 32).
Most fonts gotz a width of 8 bits yo, but wit tha framebuffer thang (fb)
other widths can be used.

.SH "FONT HEIGHT"
Da program
.B setfont
has no built-in knowledge of VGA vizzle modes yo, but just asks
the kernel ta load tha characta ROM of tha vizzle card with
certain bitmaps. But fuck dat shiznit yo, tha word on tha street is dat since Linux 1.3.1 tha kernel knows
enough bout EGA/VGA vizzle modes ta select a gangbangin' finger-lickin' different line
distance. Da default characta height is ghon be tha number
.I N
inferred from tha font or specified by option. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat the
user can specify a gangbangin' finger-lickin' different characta height
.I H
usin the
.I "\-h"
option.

.SH "CONSOLE MAPS"
Several mappings is involved up in tha path from user program
output ta console display. If tha console is up in utf8 mode (see
.BR unicode_start (1))
then tha kernel expects dat user program output is coded as UTF-8 (see
.BR utf-8 (7)),
and converts dat ta Unicode (ucs2).
Otherwise, a translation table is used from tha 8-bit program output
to 16-bit Unicode joints, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Such a translation table is called a
.IR "Unicode console map" .
There is four of them: three built tha fuck into tha kernel, tha fourth
settable rockin the
.I "\-m"
option of
.BR setfont .
An escape sequence chizzlez between these four tables; afta loadin a
.IR cmap ,
.B setfont
will output tha escape sequence Esc ( K dat make it tha actizzle translation.
.LP
Suitable arguments fo' the
.I "\-m"
option is fo' example
.IR 8859-1 ,
.IR 8859-2 ", ...,"
.IR 8859-15 ,
.IR cp437 ", ...,"
.IR cp1250 .
.LP
Given tha Unicode value of tha symbol ta be displayed, tha kernel
findz tha right glyph up in tha font rockin tha Unicode mappin info
of tha font n' displays dat shit.
.LP
Oldskool fonts aint gots Unicode mappin info, n' up in order ta handle
them there be direct-to-font maps (also loaded using
.IR "\-m" )
that give a cold-ass lil correspondence between user bytes n' font positions.
Da most common correspondence is tha one given up in tha file
.I trivial
(where user byte joints is used directly as font positions).
Other correspondences is sometimes preferable since the
PC vizzle hardware expects line drawin charactas up in certain
font positions.
.LP
Givin a
.I "\-m none"
argument inhibits tha loadin n' activation of a mappin table.
Da previous console map can be saved ta a gangbangin' file rockin the
.I "\-om file"
option.
These optionz of setfont render
.BR mapscrn (8)
obsolete. (But fuck dat shiznit yo, tha word on tha street is dat it may be useful ta read dat playa page.)

.SH "UNICODE FONT MAPS"
Da correspondence between tha glyphs up in tha font and
Unicode joints is busted lyrics bout by a Unicode mappin table.
Many fonts gotz a Unicode mappin table included in
the font file, n' a explicit table can be indicated using
the
.I "\-u"
option. I aint talkin' bout chicken n' gravy biatch. Da program
.B setfont
will load such a Unicode mappin table, unless a
.I "\-u none"
argument is given. I aint talkin' bout chicken n' gravy biatch. Da previous Unicode mappin table
will be saved as part of tha saved font file when tha \-O
option is used. Y'all KNOW dat shit, muthafucka! Well shiiiit, it can be saved ta a separate file rockin the
.I "\-ou file"
option.
These optionz of setfont render
.BR loadunimap (8)
obsolete.
.LP
Da Unicode mappin table should assign some glyph to
the `missin character' value U+fffd, otherwise missing
charactas is not translated, givin a probably straight-up confusing
result.

Usually no mappin table is needed, n' a Unicode mappin table
is already contained up in tha font (sometimes dis is indicated
by tha .psfu extension), so dat most playas need not worry
about tha precise meanin n' functionin of these mappin tables.

One may add a Unicode mappin table ta a psf font using
.BR psfaddtable (1).

.SH OPTIONS
.TP
.BI "\-h " H
Override font height.
.TP
.BI "\-m " file
Load console map or Unicode console map from
.IR file .
.TP
.BI "\-o " file
Save previous font in
.IR file .
.TP
.BI "\-O " file
Save previous font n' Unicode map in
.IR file .
.TP
.BI "\-om " file
Store console map in
.IR file .
.TP
.BI "\-ou " file
Save previous Unicode map in
.IR file .
.TP
.BI "\-u " file
Load Unicode table describin tha font from
.IR file .
.TP
.BI "\-C " console
Set tha font fo' tha indicated console. (May require root permissions.)
.TP
.B \-v
Be verbose.
.TP
.B \-V
Print version n' exit.

.SH NOTE
PC vizzle hardware allows one ta use tha "intensity" bit
either ta indicate brightness, or ta address 512 (instead of 256)
glyphs up in tha font. Right back up in yo muthafuckin ass. So, if tha font has mo' than 256 glyphs,
the console is ghon be reduced ta 8 (instead of 16) colors.

.SH FILES
.I /lib/kbd/consolefonts
is tha default font directory.
.I /lib/kbd/unimaps
is tha default directory fo' Unicode maps.
.I /lib/kbd/consoletrans
is tha default directory fo' screen mappings.
Da default font be a gangbangin' file
.I default
(or
.IR default8x N
if tha \-N option was given fo' some number N)
like wit suitable extension (like .psf).
.SH "SEE ALSO"
.BR psfaddtable (1),
.BR unicode_start (1),
.BR loadunimap (8),
.BR utf-8 (7),
.BR mapscrn (8)
.\" .SH "AUTHORS"
.\" Eugene G. Crosser (crosser@pccross.msk.su)
.\" .br
.\" Andries E. Brouwer (aeb@cwi.nl)
