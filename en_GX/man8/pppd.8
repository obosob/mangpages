.\" manual page [] fo' pppd 2.4
.\" $Id: pppd.8,v 1.90 2008/03/26 12:09:40 paulus Exp $
.\" SH section heading
.\" SS subsection heading
.\" LP paragraph
.\" IP indented paragraph
.\" TP hangin label
.\" 
.\" Copyright (c) 1993-2003 Pizzle Mackerras <paulus@samba.org>
.\"
.\" Permission ta use, copy, modify, n' distribute dis software fo' any
.\" purpose wit or without fee is hereby granted, provided dat tha above
.\" copyright notice n' dis permission notice step tha fuck up in all copies.
.\"
.\" THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.TH PPPD 8
.SH NAME
pppd \- Point-to-Point Protocol Daemon
.SH SYNOPSIS
.B pppd
[
.I options
]
.SH DESCRIPTION
.LP
PPP is tha protocol used fo' establishin internizzle links over dial-up
modems, DSL connections, n' nuff other typez of point-to-point
links.  Da \fIpppd\fR daemon works together wit tha kernel PPP
driver ta establish n' maintain a PPP link wit another system
(called tha \fIpeer\fR) n' ta negotiate Internizzle Protocol (IP)
addresses fo' each end of tha link.  Pppd can also authenticate the
peer and/or supply authentication shiznit ta tha peer n' shit.  PPP can be
used wit other network protocols besides IP yo, but such use is becoming
increasingly rare.
.SH FREQUENTLY USED OPTIONS
.TP
.I ttyname
Use tha serial port called \fIttyname\fR ta rap wit the
peer n' shit.  If \fIttyname\fR do not begin wit a slash (/),
the strang "/dev/" is prepended ta \fIttyname\fR ta form the
name of tha thang ta open. I aint talkin' bout chicken n' gravy biatch.  If no thang name is given, or if the
name of tha terminal
connected ta tha standard input is given, pppd will use dat terminal,
and aint gonna fork ta put itself up in tha background. Y'all KNOW dat shit, muthafucka!  A value fo' this
option from a privileged source cannot be overridden by a
non-privileged user.
.TP
.I speed
An option dat be a thugged-out decimal number is taken as tha desired baud rate
for tha serial device.  On systems such as
4.4BSD n' NetBSD, any speed can be specified. Y'all KNOW dat shit, muthafucka!  Other systems
(e.g. Linux, SunOS) only support tha commonly-used baud rates.
.TP
.B asyncmap \fImap
This option sets tha Async-Control-Character-Map (ACCM) fo' dis end
of tha link.  Da ACCM be a set of 32 bits, one fo' each of the
ASCII control charactas wit joints from 0 ta 31, where a 1 bit
indicates dat tha correspondin control characta should not be used
in PPP packets busted ta dis system.  Da map is encoded as a
hexadecimal number (without a leadin 0x) where tha least significant
bit (00000001) represents characta 0 n' da most thugged-out dope bit
(80000000) represents characta 31.
Pppd will ask tha peer ta bust these charactas as a 2-byte
escape sequence.
If multiple \fIasyncmap\fR options is given, tha joints is ORed
together n' shit.  If no \fIasyncmap\fR option is given, tha default is zero,
so pppd will ask tha peer not ta escape any control characters.
To escape transmitted characters, use tha \fIescape\fR option.
.TP
.B auth
Require tha peer ta authenticate itself before allowin network
packets ta be busted or received. Y'all KNOW dat shit, muthafucka!  This option is tha default if the
system has a thugged-out default route.  If neither dis option nor the
\fInoauth\fR option is specified, pppd will only allow tha peer ta use
IP addresses ta which tha system do not already gotz a route.
.TP
.B call \fIname
Read additionizzle options from tha file /etc/ppp/peers/\fIname\fR.  This
file may contain privileged options, like fuckin \fInoauth\fR, even if pppd
is not bein run by root.  Da \fIname\fR strang may not begin wit /
or include .. as a pathname component.  Da format of tha options file
is busted lyrics bout below.
.TP
.B connect \fIscript
Usually there is suttin' which need ta be done ta prepare tha link
before tha PPP protocol can be started; fo' instance, wit a gangbangin' finger-lickin' dial-up
modem, commandz need ta be busted ta tha modem ta dial tha appropriate
phone number n' shit.  This option specifies a command fo' pppd ta execute
(by passin it ta a gangbangin' finger-lickin' dirty-ass shell) before attemptin ta start PPP negotiation.
Da chat (8) program is often useful here, as it serves up a way to
send arbitrary strings ta a modem n' respond ta received characters.
A value
for dis option from a privileged source cannot be overridden by a
non-privileged user.
.TP
.B crtscts
Specifies dat pppd should set tha serial port ta use hardware flow
control rockin tha RTS n' CTS signals up in tha RS-232 intercourse.
If neither tha \fIcrtscts\fR, the
\fInocrtscts\fR, tha \fIcdtrcts\fR nor tha \fInocdtrcts\fR option
is given, tha hardware flow control settin fo' tha serial port is
left unchanged.
Some serial ports (like fuckin Macintosh serial ports) lack a true
RTS output. Right back up in yo muthafuckin ass. Such serial ports use dis mode ta implement
unidirectionizzle flow control. Da serial port will
suspend transmission when axed by tha modem (via CTS)
but is ghon be unable ta request tha modem ta stop bustin  ta the
computer n' shit. This mode retains tha mobilitizzle ta use DTR as
a modem control line.
.TP
.B defaultroute
Add a thugged-out default route ta tha system routin tables, rockin tha peer as
the gateway, when IPCP negotiation is successfully completed.
This entry is removed when tha PPP connection is broken. I aint talkin' bout chicken n' gravy biatch.  This option
is privileged if tha \fInodefaultroute\fR option has been specified.
.TP
.B disconnect \fIscript
Execute tha command specified by \fIscript\fR, by passin it ta a
shell, after
pppd has terminated tha link.  This command could, fo' example, issue
commandz ta tha modem ta cause it ta hang up if hardware modem control
signals was not available.  Da disconnect script aint run if the
modem has already hung up.  A value fo' dis option from a privileged
source cannot be overridden by a non-privileged user.
.TP
.B escape \fIxx,yy,...
Specifies dat certain charactas should be escaped on transmission
(regardless of whether tha peer requests dem ta be escaped wit its
async control characta map).  Da charactas ta be escaped are
specified as a list of hex numbers separated by commas.  Note that
almost any characta can be specified fo' tha \fIescape\fR option,
unlike tha \fIasyncmap\fR option which only allows control characters
to be specified. Y'all KNOW dat shit, muthafucka!  Da charactas which may not be escaped is them
with hex joints 0x20 - 0x3f or 0x5e.
.TP
.B file \fIname
Read options from file \fIname\fR (the format is busted lyrics bout below).
Da file must be readable by tha user whoz ass has invoked pppd.
.TP
.B init \fIscript
Execute tha command specified by \fIscript\fR, by passin it ta a gangbangin' finger-lickin' dirty-ass shell, to
initialize tha serial line.  This script would typically use the
chat(8) program ta configure tha modem ta enable auto answer n' shit.  A value
for dis option from a privileged source cannot be overridden by a
non-privileged user.
.TP
.B lock
Specifies dat pppd should create a UUCP-style lock file fo' the
serial thang ta ensure exclusive access ta tha device.  By default,
pppd aint gonna create a lock file.
.TP
.B mru \fIn
Set tha MRU [Maximum Receive Unit] value ta \fIn\fR. Pppd
will ask tha peer ta bust packetz of no mo' than \fIn\fR bytes.
Da value of \fIn\fR must be between 128 n' 16384; tha default is 1500.
A value of
296 works well on straight-up slow links (40 bytes fo' TCP/IP header + 256
bytez of data).
Note dat fo' tha IPv6 protocol, tha MRU must be at least 1280.
.TP
.B mtu \fIn
Set tha MTU [Maximum Transmit Unit] value ta \fIn\fR.  Unless the
peer requests a smalla value via MRU negotiation, pppd will
request dat tha kernel networkin code bust data packetz of no more
than \fIn\fR bytes all up in tha PPP network intercourse.  Note dat fo' 
the IPv6 protocol, tha MTU must be at least 1280.
.TP
.B passive
Enablez tha "passive" option up in tha LCP.  With dis option, pppd will
attempt ta initiate a cold-ass lil connection; if no reply is received from the
peer, pppd will then just wait passively fo' a valid LCP packet from
the peer, instead of exiting, as it would without dis option.
.SH OPTIONS
.TP
.I <local_IP_address>\fB:\fI<remote_IP_address>
Set tha local and/or remote intercourse IP addresses.  Either one may be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da IP addresses can be specified wit a host name or in
decimal dot notation (e.g. 150.234.56.78).  Da default local
address is tha (first) IP address of tha system (unless the
\fInoipdefault\fR
option is given).  Da remote address is ghon be obtained from tha peer
if not specified up in any option. I aint talkin' bout chicken n' gravy biatch.  Thus, up in simple cases, dis option is
not required. Y'all KNOW dat shit, muthafucka!  If a local and/or remote IP address is specified with
this option, pppd
will not accept a gangbangin' finger-lickin' different value from tha peer up in tha IPCP
negotiation, unless tha \fIipcp\-accept\-local\fR and/or
\fIipcp\-accept\-remote\fR options is given, respectively.
.TP
.B ipv6 \fI<local_interface_identifier>\fR,\fI<remote_interface_identifier>
Set tha local and/or remote 64-bit intercourse identifier n' shit. Either one may be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da identifier must be specified up in standard ASCII notation of
IPv6 addresses (e.g. ::dead:beef). If the
\fIipv6cp\-use\-ipaddr\fR
option is given, tha local identifier is tha local IPv4 address (see above).
On systems which supports a unique persistent id, like fuckin EUI\-48 derived
from tha Ethernet MAC address, \fIipv6cp\-use\-persistent\fR option can be
used ta replace tha \fIipv6 <local>,<remote>\fR option. I aint talkin' bout chicken n' gravy biatch. Otherwise tha 
identifier is randomized.
.TP
.B active\-filta \fIfilter\-expression
Specifies a packet filta ta be applied ta data packets ta determine
which packets is ta be regarded as link activity, n' therefore reset
the idle timer, or cause tha link ta be brought up in demand-dialling
mode.  This option is useful up in conjunction wit the
\fBidle\fR option if there be packets bein busted or received
regularly over tha link (for example, routin shiznit packets)
which would otherwise prevent tha link from eva appearin ta be idle.
Da \fIfilter\-expression\fR syntax be as busted lyrics bout fo' tcpdump(1),
except dat qualifiers which is inappropriate fo' a PPP link, such as
\fBether\fR n' \fBarp\fR, is not permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Generally tha filter
expression should be enclosed up in single-quotes ta prevent whitespace
in tha expression from bein interpreted by tha shell. This option
is currently only available under Linux, n' requires dat tha kernel
was configured ta include PPP filterin support (CONFIG_PPP_FILTER).
Note dat it
is possible ta apply different constraints ta incomin n' outgoing
packets rockin tha \fBinbound\fR n' \fBoutbound\fR qualifiers.
.TP
.B allow\-ip \fIaddress(es)
Allow peers ta use tha given IP address or subnet without
authenticatin theyselves.  Da parameta is parsed as fo' each
element of tha list of allowed IP addresses up in tha secrets filez (see
the AUTHENTICATION section below).
.TP
.B allow\-number \fInumber
Allow peers ta connect from tha given telephone number n' shit.  A trailing
`*' characta will match all numbers beginnin wit tha leadin part.
.TP
.B bsdcomp \fInr,nt
Request dat tha peer compress packets dat it sends, rockin the
BSD-Compress scheme, wit a maximum code size of \fInr\fR bits, and
agree ta compress packets busted ta tha peer wit a maximum code size of
\fInt\fR bits, n' you can put dat on yo' toast.  If \fInt\fR aint specified, it defaults ta tha value
given fo' \fInr\fR.  Values up in tha range 9 ta 15 may be used for
\fInr\fR n' \fInt\fR; larger joints give betta compression but
consume mo' kernel memory fo' compression dictionaries.
Alternatively, a value of 0 fo' \fInr\fR or \fInt\fR disables
compression up in tha correspondin direction. I aint talkin' bout chicken n' gravy biatch.  Use \fInobsdcomp\fR or
\fIbsdcomp 0\fR ta disable BSD-Compress compression entirely.
.TP
.B cdtrcts
Use a non-standard hardware flow control (i.e. DTR/CTS) ta control
the flow of data on tha serial port.  If neither tha \fIcrtscts\fR,
the \fInocrtscts\fR, tha \fIcdtrcts\fR nor tha \fInocdtrcts\fR
option is given, tha hardware flow control settin fo' tha serial
port is left unchanged.
Some serial ports (like fuckin Macintosh serial ports) lack a true
RTS output. Right back up in yo muthafuckin ass. Such serial ports use dis mode ta implement true
bi-directionizzle flow control. Da sacrifice is dat dis flow
control mode do not permit rockin DTR as a modem control line.
.TP
.B chap\-interval \fIn
If dis option is given, pppd will rechallenge tha peer every last muthafuckin \fIn\fR
seconds.
.TP
.B chap\-max\-challenge \fIn
Set tha maximum number of CHAP challenge transmissions ta \fIn\fR
(default 10).
.TP
.B chap\-restart \fIn
Set tha CHAP restart interval (retransmission timeout fo' challenges)
to \fIn\fR secondz (default 3).
.TP
.B child\-timeout \fIn
When exiting, wait fo' up ta \fIn\fR secondz fo' any lil pimp processes
(like fuckin tha command specified wit tha \fBpty\fR command) ta exit
before exiting.  At tha end of tha timeout, pppd will bust a SIGTERM
signal ta any remainin lil pimp processes n' exit.  A value of 0 means
no timeout, dat is, pppd will wait until all lil pimp processes have
exited.
.TP
.B connect\-delay \fIn
Wait fo' up ta \fIn\fR millisecondz afta tha connect script finishes for
a valid PPP packet from tha peer n' shit.  At tha end of dis time, or when a
valid PPP packet is received from tha peer, pppd will commence
negotiation by bustin  its first LCP packet.  Da default value is
1000 (1 second).  This wait period only applies if tha \fBconnect\fR
or \fBpty\fR option is used.
.TP
.B debug
Enablez connection debuggin facilities.
If dis option is given, pppd will log tha contentz of all
control packets busted or received up in a readable form.  Da packets are
logged all up in syslog wit facilitizzle \fIdaemon\fR n' level
\fIdebug\fR.  This shiznit can be pimped up ta a gangbangin' file by settin up
/etc/syslog.conf appropriately (see syslog.conf(5)).
.TP
.B default\-asyncmap
Disable asyncmap negotiation, forcin all control charactas ta be
escaped fo' both tha transmit n' tha receive direction.
.TP
.B default\-mru
Disable MRU [Maximum Receive Unit] negotiation. I aint talkin' bout chicken n' gravy biatch.  With dis option,
pppd will use tha default MRU value of 1500 bytes fo' both the
transmit n' receive direction.
.TP
.B deflate \fInr,nt
Request dat tha peer compress packets dat it sends, rockin the
Deflate scheme, wit a maximum window size of \fI2**nr\fR bytes, and
agree ta compress packets busted ta tha peer wit a maximum window size
of \fI2**nt\fR bytes.  If \fInt\fR aint specified, it defaults to
the value given fo' \fInr\fR.  Values up in tha range 9 ta 15 may be used
for \fInr\fR n' \fInt\fR; larger joints give betta compression but
consume mo' kernel memory fo' compression dictionaries.
Alternatively, a value of 0 fo' \fInr\fR or \fInt\fR disables
compression up in tha correspondin direction. I aint talkin' bout chicken n' gravy biatch.  Use \fInodeflate\fR or
\fIdeflate 0\fR ta disable Deflate compression entirely.  (Note: pppd
requests Deflate compression up in preference ta BSD-Compress if tha peer
can do either.)
.TP
.B demand
Initiate tha link only on demand, i.e. when data traffic is present.
With dis option, tha remote IP address must be specified by tha user
on tha command line or up in a options file.  Pppd will initially
configure tha intercourse n' enable it fo' IP traffic without
connectin ta tha peer n' shit.  When traffic be available, pppd will
connect ta tha peer n' big-ass up negotiation, authentication, etc.
When dis is completed, pppd will commence passin data packets
(i.e., IP packets) across tha link.

Da \fIdemand\fR option implies tha \fIpersist\fR option. I aint talkin' bout chicken n' gravy biatch.  If this
behaviour aint desired, use tha \fInopersist\fR option afta the
\fIdemand\fR option. I aint talkin' bout chicken n' gravy biatch.  Da \fIidle\fR n' \fIholdoff\fR
options is also useful up in conjunction wit tha \fIdemand\fR option.
.TP
.B domain \fId
Append tha domain name \fId\fR ta tha local host name fo' authentication
purposes.  For example, if gethostname() returns tha name porsche yo, but
the straight-up qualified domain name is porsche.Quotron.COM, you could
specify \fIdomain Quotron.COM\fR.  Pppd would then use tha name
\fIporsche.Quotron.COM\fR fo' lookin up secrets up in tha secrets file,
and as tha default name ta bust ta tha peer when authenticatin itself
to tha peer n' shit.  This option is privileged.
.TP
.B dryrun
With tha \fBdryrun\fR option, pppd will print up all tha option
values which done been set n' then exit, afta parsin tha command
line n' options filez n' checkin tha option joints yo, but before
initiatin tha link.  Da option joints is logged at level info, and
also printed ta standard output unless tha thang on standard output
is tha thang dat pppd would be rockin ta rap wit tha peer.
.TP
.B dump
With tha \fBdump\fR option, pppd will print up all tha option joints
which done been set.  This option is like tha \fBdryrun\fR option
except dat pppd proceedz as aiiight rather than exiting.
.TP
.B enable-session
Enablez session accountin via PAM or wtwp/wtmpx, as appropriate.
When PAM is enabled, tha PAM "account" n' "session" module stacks
determine behavior, n' is enabled fo' all PPP authentication
protocols.  When PAM is disabled, wtmp/wtmpx entries is recorded
regardless of whether tha peer name identifies a valid user on the
local system, makin peers visible up in tha last(1) log.  This feature
is automatically enabled when tha pppd \fBlogin\fR option is used.
Session accountin is disabled by default.
.TP
.B endpoint \fI<epdisc>
Sets tha endpoint discriminator busted by tha local machine ta tha peer
durin multilink negotiation ta \fI<epdisc>\fR.  Da default is ta use
the MAC address of tha straight-up original gangsta ethernet intercourse on tha system, if any,
otherwise tha IPv4 address correspondin ta tha hostname, if any,
provided it aint up in tha multicast or locally-assigned IP address
ranges, or tha localhost address.  Da endpoint discriminator can be
the strang \fBnull\fR or of tha form \fItype\fR:\fIvalue\fR, where
type be a thugged-out decimal number or one of tha strings \fBlocal\fR, \fBIP\fR,
\fBMAC\fR, \fBmagic\fR, or \fBphone\fR.  Da value be a IP address in
dotted-decimal notation fo' tha \fBIP\fR type, or a strang of bytes in
hexadecimal, separated by periodz or colons fo' tha other types.  For
the MAC type, tha value may also be tha name of a ethernet or similar
network intercourse.  This option is currently only available under
Linux.
.TP
.B eap\-interval \fIn
If dis option is given n' pppd authenticates tha peer wit EAP
(i.e., is tha server), pppd will restart EAP authentication every
\fIn\fR seconds.  For EAP SRP\-SHA1, peep also tha \fBsrp\-interval\fR
option, which enablez lightweight rechallenge.
.TP
.B eap\-max\-rreq \fIn
Set tha maximum number of EAP Requests ta which pppd will respond (as
a client) without hearin EAP Success or Failure.  (Default is 20.)
.TP
.B eap\-max\-sreq \fIn
Set tha maximum number of EAP Requests dat pppd will issue (as a
server) while attemptin authentication. I aint talkin' bout chicken n' gravy biatch.  (Default is 10.)
.TP
.B eap\-restart \fIn
Set tha retransmit timeout fo' EAP Requests when actin as a server
(authenticator).  (Default is 3 seconds.)
.TP
.B eap\-timeout \fIn
Set tha maximum time ta wait fo' tha peer ta bust a EAP Request when
actin as a cold-ass lil client (authenticatee).  (Default is 20 seconds.)
.TP
.B hide\-password
When loggin tha contentz of PAP packets, dis option causes pppd to
exclude tha password strang from tha log.  This is tha default.
.TP
.B holdoff \fIn
Specifies how tha fuck nuff secondz ta wait before re-initiatin tha link after
it terminates.  This option only has any effect if tha \fIpersist\fR
or \fIdemand\fR option is used. Y'all KNOW dat shit, muthafucka!  Da holdoff period aint applied if
the link was terminated cuz dat shiznit was idle.
.TP
.B idle \fIn
Specifies dat pppd should disconnect if tha link is idle fo' \fIn\fR
seconds.  Da link is idle when no data packets (i.e. IP packets) are
bein busted or received. Y'all KNOW dat shit, muthafucka!  Note: it aint advisable ta use dis option
with tha \fIpersist\fR option without tha \fIdemand\fR option.
If tha \fBactive\-filter\fR
option is given, data packets which is rejected by tha specified
activitizzle filta also count as tha link bein idle.
.TP
.B ipcp\-accept\-local
With dis option, pppd will accept tha peerz scam of our local IP
address, even if tha local IP address was specified up in a option.
.TP
.B ipcp\-accept\-remote
With dis option, pppd will accept tha peerz scam of its (remote) IP
address, even if tha remote IP address was specified up in a option.
.TP
.B ipcp\-max\-configure \fIn
Set tha maximum number of IPCP configure-request transmissions to
\fIn\fR (default 10).
.TP
.B ipcp\-max\-failure \fIn
Set tha maximum number of IPCP configure-NAKs returned before starting
to bust configure-Rejects instead ta \fIn\fR (default 10).
.TP
.B ipcp\-max\-terminizzle \fIn
Set tha maximum number of IPCP terminate-request transmissions to
\fIn\fR (default 3).
.TP
.B ipcp\-restart \fIn
Set tha IPCP restart interval (retransmission timeout) ta \fIn\fR
secondz (default 3).
.TP
.B ipparam \fIstring
Provides a extra parameta ta tha ip\-up, ip\-pre\-up n' ip\-down
scripts, n' you can put dat on yo' toast.  If this
option is given, tha \fIstring\fR supplied is given as tha 6th
parameta ta dem scripts.
.TP
.B ipv6cp\-max\-configure \fIn
Set tha maximum number of IPv6CP configure-request transmissions to
\fIn\fR (default 10).
.TP
.B ipv6cp\-max\-failure \fIn
Set tha maximum number of IPv6CP configure-NAKs returned before starting
to bust configure-Rejects instead ta \fIn\fR (default 10).
.TP
.B ipv6cp\-max\-terminizzle \fIn
Set tha maximum number of IPv6CP terminate-request transmissions to
\fIn\fR (default 3).
.TP
.B ipv6cp\-restart \fIn
Set tha IPv6CP restart interval (retransmission timeout) ta \fIn\fR
secondz (default 3).
.TP
.B ipx
Enable tha IPXCP n' IPX protocols.  This option is presently only
supported under Linux, n' only if yo' kernel has been configured to
include IPX support.
.TP
.B ipx\-network \fIn
Set tha IPX network number up in tha IPXCP configure request frame to
\fIn\fR, a hexadecimal number (without a leadin 0x).  There is no
valid default.  If dis option aint specified, tha network number is
obtained from tha peer n' shit.  If tha peer aint gots tha network number,
the IPX protocol aint gonna be started.
.TP
.B ipx\-node \fIn\fB:\fIm
Set tha IPX node numbers. Da two node numbers is separated from each
other wit a cold-ass lil colon character n' shit. Da first number \fIn\fR is tha local
node number n' shit. Da second number \fIm\fR is tha peerz node number n' shit. Each
node number be a hexadecimal number, at most 10 digits long. Da node
numbers on tha ipx\-network must be unique. There is no valid
default. If dis option aint specified then tha node numbers are
obtained from tha peer.
.TP
.B ipx\-router\-name \fI<string>
Set tha name of tha router n' shit. This be a strang n' is busted ta tha peer
as shiznit data.
.TP
.B ipx\-routin \fIn
Set tha routin protocol ta be received by dis option. I aint talkin' bout chicken n' gravy biatch. Mo' than one
instizzle of \fIipx\-routing\fR may be specified. Y'all KNOW dat shit, muthafucka! Da '\fInone\fR'
option (0) may be specified as tha only instizzle of ipx\-routing. The
values may be \fI0\fR fo' \fINONE\fR, \fI2\fR fo' \fIRIP/SAP\fR, and
\fI4\fR fo' \fINLSP\fR.
.TP
.B ipxcp\-accept\-local
Accept tha peerz NAK fo' tha node number specified up in tha ipx\-node
option. I aint talkin' bout chicken n' gravy biatch. If a node number was specified, n' non-zero, tha default is
to insist dat tha value be used. Y'all KNOW dat shit, muthafucka! If you include dis option then you
will permit tha peer ta override tha entry of tha node number.
.TP
.B ipxcp\-accept\-network
Accept tha peerz NAK fo' tha network number specified up in the
ipx\-network option. I aint talkin' bout chicken n' gravy biatch. If a network number was specified, n' non-zero, the
default is ta insist dat tha value be used. Y'all KNOW dat shit, muthafucka! If you include this
option then yo big-ass booty is ghon permit tha peer ta override tha entry of tha node
number.
.TP
.B ipxcp\-accept\-remote
Use tha peerz network number specified up in tha configure request
frame. If a node number was specified fo' tha peer n' dis option was
not specified, tha peer is ghon be forced ta use tha value which you have
specified.
.TP
.B ipxcp\-max\-configure \fIn
Set tha maximum number of IPXCP configure request frames which the
system will bust ta \fIn\fR. Da default is 10.
.TP
.B ipxcp\-max\-failure \fIn
Set tha maximum number of IPXCP NAK frames which tha local system will
send before it rejects tha options. Da default value is 3.
.TP
.B ipxcp\-max\-terminizzle \fIn
Set tha maximum number of IPXCP terminizzle request frames before the
local system considaz dat tha peer aint listenin ta em. The
default value is 3.
.TP
.B kdebug \fIn
Enable debuggin code up in tha kernel-level PPP driver n' shit.  Da argument
values depend on tha specific kernel driver yo, but up in general a value of
1 will enable general kernel debug lyrics.  (Note dat these
lyrics is probably only useful fo' debuggin tha kernel driver
itself.)  For tha Linux 2.2.x kernel driver, tha value be a sum of
bits: 1 to
enable general debug lyrics, 2 ta request dat tha contents of
received packets be printed, n' 4 ta request dat tha contents of
transmitted packets be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  On most systems, lyrics printed by
the kernel is logged by syslog(1) ta a gangbangin' file as pimped up in the
/etc/syslog.conf configuration file.
.TP
.B ktune
Enablez pppd ta alta kernel settings as appropriate.  Under Linux,
pppd will enable IP forwardin (i.e. set /proc/sys/net/ipv4/ip_forward
to 1) if tha \fIproxyarp\fR option is used, n' will enable the
dynamic IP address option (i.e. set /proc/sys/net/ipv4/ip_dynaddr to
1) up in demand mode if tha local address chizzles.
.TP
.B lcp\-echo\-failure \fIn
If dis option is given, pppd will presume tha peer ta be dead
if \fIn\fR LCP echo\-requests is busted without receivin a valid LCP
echo\-reply.  If dis happens, pppd will terminizzle the
connection. I aint talkin' bout chicken n' gravy biatch.  Use of dis option requires a non-zero value fo' the
\fIlcp\-echo\-interval\fR parameter n' shit.  This option can be used ta enable
pppd ta terminizzle afta tha physical connection has been broken
(e.g., tha modem has hung up) up in thangs where no hardware modem
control lines is available.
.TP
.B lcp\-echo\-interval \fIn
If dis option is given, pppd will bust a LCP echo\-request frame to
the peer every last muthafuckin \fIn\fR seconds.  Normally tha peer should respond to
the echo\-request by bustin  a echo\-reply.  This option can be used
with tha \fIlcp\-echo\-failure\fR option ta detect dat tha peer is no
longer connected.
.TP
.B lcp\-max\-configure \fIn
Set tha maximum number of LCP configure-request transmissions to
\fIn\fR (default 10).
.TP
.B lcp\-max\-failure \fIn
Set tha maximum number of LCP configure-NAKs returned before starting
to bust configure-Rejects instead ta \fIn\fR (default 10).
.TP
.B lcp\-max\-terminizzle \fIn
Set tha maximum number of LCP terminate-request transmissions to
\fIn\fR (default 3).
.TP
.B lcp\-restart \fIn
Set tha LCP restart interval (retransmission timeout) ta \fIn\fR
secondz (default 3).
.TP
.B linkname \fIname\fR
Sets tha logical name of tha link ta \fIname\fR.  Pppd will create a
file named \fBppp\-\fIname\fB.pid\fR up in /var/run (or /etc/ppp on some
systems) containin its process ID.  This can be useful up in determining
which instizzle of pppd is responsible fo' tha link ta a given peer
system.  This be a privileged option.
.TP
.B local
Don't use tha modem control lines.  With dis option, pppd will ignore
the state of tha CD (Carrier Detect) signal from tha modem n' will
not chizzle tha state of tha DTR (Data Terminal Ready) signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This is
the opposite of tha \fBmodem\fR option.
.TP
.B logfd \fIn
Send log lyrics ta file descriptor \fIn\fR.  Pppd will bust log
lyrics ta at most one file or file descriptor (as well as sending
the log lyrics ta syslog), so dis option n' tha \fBlogfile\fR
option is mutually exclusive.  Da default is fo' pppd ta bust log
lyrics ta stdout (file descriptor 1), unless tha serial port is
already open on stdout.
.TP
.B logfile \fIfilename
Append log lyrics ta tha file \fIfilename\fR (as well as bustin  the
log lyrics ta syslog).  Da file is opened wit tha privileges of
the user whoz ass invoked pppd, up in append mode.
.TP
.B login
Use tha system password database fo' authenticatin tha peer using
PAP, n' record tha user up in tha system wtmp file.  Note dat tha peer
must have a entry up in tha /etc/ppp/pap\-secrets file as well as the
system password database ta be allowed access.  See also the
\fBenable\-session\fR option.
.TP
.B maxconnect \fIn
Terminizzle tha connection when it has been available fo' network
traffic fo' \fIn\fR secondz (i.e. \fIn\fR secondz afta tha first
network control protocol comes up).
.TP
.B maxfail \fIn
Terminizzle afta \fIn\fR consecutizzle failed connection attempts, n' you can put dat on yo' toast.  A
value of 0 means no limit.  Da default value is 10.
.TP
.B modem
Use tha modem control lines.  This option is tha default.  With this
option, pppd will wait fo' tha CD (Carrier Detect) signal from the
modem ta be asserted when openin tha serial thang (unless a cold-ass lil connect
script is specified), n' it will drop tha DTR (Data Terminal Ready)
signal briefly when tha connection is terminated n' before executing
the connect script.  On Ultrix, dis option implies hardware flow
control, as fo' tha \fIcrtscts\fR option. I aint talkin' bout chicken n' gravy biatch.  This is tha opposite of the
\fBlocal\fR option.
.TP
.B mp
Enablez tha use of PPP multilink; dis be a alias fo' tha `multilink'
option. I aint talkin' bout chicken n' gravy biatch.  This option is currently only available under Linux.
.TP
.B mppe\-stateful
Allow MPPE ta use stateful mode.  Stateless mode is still attempted first.
Da default is ta disallow stateful mode.  
.TP
.B mpshortseq
Enablez tha use of short (12-bit) sequence numbers up in multilink
headers, as opposed ta 24-bit sequence numbers.  This option is only
available under Linux, n' only has any effect if multilink is
enabled (see tha multilink option).
.TP
.B mrru \fIn
Sets tha Maximum Reconstructed Receive Unit ta \fIn\fR.  Da MRRU is
the maximum size fo' a received packet on a multilink bundle, n' is
analogous ta tha MRU fo' tha individual links.  This option is
currently only available under Linux, n' only has any effect if
multilink is enabled (see tha multilink option).
.TP
.B ms\-dns \fI<addr>
If pppd be actin as a server fo' Microsizzlez Windows clients, this
option allows pppd ta supply one or two DNS (Domain Name Server)
addresses ta tha clients, n' you can put dat on yo' toast.  Da first instizzle of dis option specifies
the primary DNS address; tha second instizzle (if given) specifies the
secondary DNS address.  (This option was present up in some older
versionz of pppd under tha name \fBdns\-addr\fR.)
.TP
.B ms\-wins \fI<addr>
If pppd be actin as a server fo' Microsizzlez Windows or "Samba"
clients, dis option allows pppd ta supply one or two WINS (Windows
Internizzle Name Skillz) server addresses ta tha clients, n' you can put dat on yo' toast.  Da first
instizzle of dis option specifies tha primary WINS address; tha second
instizzle (if given) specifies tha secondary WINS address.
.TP
.B multilink
Enablez tha use of tha PPP multilink protocol.  If tha peer also
supports multilink, then dis link can become part of a funky-ass bundle between
the local system n' tha peer n' shit.  If there be a existin bundle ta the
peer, pppd will join dis link ta dat bundle, otherwise pppd will
create a freshly smoked up bundle.  See tha MULTILINK section below.  This option is
currently only available under Linux.
.TP
.B name \fIname
Set tha name of tha local system fo' authentication purposes to
\fIname\fR.  This be a privileged option. I aint talkin' bout chicken n' gravy biatch.  With dis option, pppd will
use lines up in tha secrets filez which have \fIname\fR as tha second
field when lookin fo' a secret ta use up in authenticatin tha peer n' shit.  In
addition, unless overridden wit tha \fIuser\fR option, \fIname\fR
will be used as tha name ta bust ta tha peer when authenticatin the
local system ta tha peer n' shit.  (Note dat pppd do not append tha domain
name ta \fIname\fR.)
.TP
.B noaccomp
Disable Address/Control compression up in both directions (send and
receive).
.TP
.B noauth
Do not require tha peer ta authenticate itself.  This option is
privileged.
.TP
.B nobsdcomp
Disablez BSD-Compress compression; \fBpppd\fR aint gonna request or
agree ta compress packets rockin tha BSD-Compress scheme.
.TP
.B noccp
Disable CCP (Compression Control Protocol) negotiation. I aint talkin' bout chicken n' gravy biatch.  This option
should only be required if tha peer is buggy n' gets trippin by
requests from pppd fo' CCP negotiation.
.TP
.B nocrtscts
Disable hardware flow control (i.e. RTS/CTS) on tha serial port.
If neither tha \fIcrtscts\fR nor tha \fInocrtscts\fR nor the
\fIcdtrcts\fR nor tha \fInocdtrcts\fR option is given, tha hardware
flow control settin fo' tha serial port is left unchanged.
.TP
.B nocdtrcts
This option be a synonym fo' \fInocrtscts\fR. Either of these options will
disable both formz of hardware flow control.
.TP
.B nodefaultroute
Disable tha \fIdefaultroute\fR option. I aint talkin' bout chicken n' gravy biatch.  Da system administrator who
wishes ta prevent playas from bustin default routes wit pppd
can do so by placin dis option up in tha /etc/ppp/options file.
.TP
.B nodeflate
Disablez Deflate compression; pppd aint gonna request or smoke to
compress packets rockin tha Deflate scheme.
.TP
.B nodetach
Don't detach from tha controllin terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Without dis option, if a
serial thang other than tha terminal on tha standard input is
specified, pppd will fork ta become a funky-ass background process.
.TP
.B noendpoint
Disablez pppd from bustin  a endpoint discriminator ta tha peer or
acceptin one from tha peer (see tha MULTILINK section below).  This
option should only be required if tha peer is buggy.
.TP
.B noip
Disable IPCP negotiation n' IP communication. I aint talkin' bout chicken n' gravy biatch.  This option should
only be required if tha peer is buggy n' gets trippin by requests
from pppd fo' IPCP negotiation.
.TP
.B noipv6
Disable IPv6CP negotiation n' IPv6 communication. I aint talkin' bout chicken n' gravy biatch. This option should
only be required if tha peer is buggy n' gets trippin by requests
from pppd fo' IPv6CP negotiation.
.TP
.B noipdefault
Disablez tha default behaviour when no local IP address is specified,
which is ta determine (if possible) tha local IP address from the
hostname.  With dis option, tha peer will gotta supply tha local IP
address durin IPCP negotiation (unless it specified explicitly on the
command line or up in a options file).
.TP
.B noipx
Disable tha IPXCP n' IPX protocols.  This option should only be
required if tha peer is buggy n' gets trippin by requests from pppd
for IPXCP negotiation.
.TP
.B noktune
Opposite of tha \fIktune\fR option; disablez pppd from changin system
settings.
.TP
.B nolock
Opposite of tha \fIlock\fR option; specifies dat pppd should not
create a UUCP-style lock file fo' tha serial device.  This option is
privileged.
.TP
.B nolog
Do not bust log lyrics ta a gangbangin' file or file descriptor. Shiiit, dis aint no joke.  This option
cancels tha \fBlogfd\fR n' \fBlogfile\fR options.
.TP
.B nomagic
Disable magic number negotiation. I aint talkin' bout chicken n' gravy biatch.  With dis option, pppd cannot
detect a looped-back line.  This option should only be needed if the
peer is buggy.
.TP
.B nomp
Disablez tha use of PPP multilink.  This option is currently only
available under Linux.
.TP
.B nomppe
Disablez MPPE (Microsizzlez Point ta Point Encryption).  This is tha default.
.TP
.B nomppe\-40
Disable 40-bit encryption wit MPPE.
.TP
.B nomppe\-128
Disable 128-bit encryption wit MPPE.
.TP
.B nomppe\-stateful
Disable MPPE stateful mode.  This is tha default.
.TP
.B nompshortseq
Disablez tha use of short (12-bit) sequence numbers up in tha PPP
multilink protocol, forcin tha use of 24-bit sequence numbers.  This
option is currently only available under Linux, n' only has any
effect if multilink is enabled.
.TP
.B nomultilink
Disablez tha use of PPP multilink.  This option is currently only
available under Linux.
.TP
.B nopcomp
Disable protocol field compression negotiation up in both tha receive and
the transmit direction.
.TP
.B nopersist
Exit once a cold-ass lil connection has been made n' terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This is the
default unless tha \fIpersist\fR or \fIdemand\fR option has been
specified.
.TP
.B nopredictor1
Do not accept or smoke ta Predictor\-1 compression.
.TP
.B noproxyarp
Disable tha \fIproxyarp\fR option. I aint talkin' bout chicken n' gravy biatch.  Da system administrator who
wishes ta prevent playas from bustin proxy ARP entries wit pppd can
do so by placin dis option up in tha /etc/ppp/options file.
.TP
.B noremoteip
Allow pppd ta operate without havin a IP address fo' tha peer n' shit.  This
option is only available under Linux.  Normally, pppd will request the
peerz IP address, n' if tha peer do not supply it, pppd will not
brin up tha link fo' IP traffic.  With dis option, if tha peer do
not supply its IP address, pppd aint gonna ask tha peer fo' it, n' will
not set tha destination address of tha ppp intercourse.  In this
situation, tha ppp intercourse can be used fo' routin by bustin
device routes yo, but tha peer itself cannot be addressed directly fo' IP
traffic.
.TP
.B notty
Normally, pppd requires a terminal device.  With dis option, pppd
will allocate itself a pseudo-tty master/slave pair n' use tha slave
as its terminal device.  Pppd will create a cold-ass lil lil pimp process ta act as a
`characta shunt' ta transfer charactas between tha pseudo-tty master
and its standard input n' output.  Thus pppd will transmit characters
on its standard output n' receive charactas on its standard input
even if they is not terminal devices.  This option increases the
latency n' CPU overhead of transferrin data over tha ppp intercourse
as all of tha charactas busted n' received must flow all up in the
characta shunt process.  An explicit thang name may not be given if
this option is used.
.TP
.B novj
Disable Van Jacobson steez TCP/IP header compression up in both the
transmit n' tha receive direction.
.TP
.B novjccomp
Disable tha connection-ID compression option up in Van Jacobson style
TCP/IP header compression. I aint talkin' bout chicken n' gravy biatch.  With dis option, pppd aint gonna omit the
connection-ID byte from Van Jacobson compressed TCP/IP headers, nor
ask tha peer ta do so.
.TP
.B papcrypt
Indicates dat all secrets up in tha /etc/ppp/pap\-secrets file which are
used fo' checkin tha identitizzle of tha peer is encrypted, n' thus
pppd should not accept a password which, before encryption, is
identical ta tha secret from tha /etc/ppp/pap\-secrets file.
.TP
.B pap\-max\-authreq \fIn
Set tha maximum number of PAP authenticate-request transmissions to
\fIn\fR (default 10).
.TP
.B pap\-restart \fIn
Set tha PAP restart interval (retransmission timeout) ta \fIn\fR
secondz (default 3).
.TP
.B pap\-timeout \fIn
Set tha maximum time dat pppd will wait fo' tha peer ta authenticate
itself wit PAP ta \fIn\fR secondz (0 means no limit).
.TP
.B pass\-filta \fIfilter\-expression
Specifies a packet filta ta applied ta data packets bein busted or
received ta determine which packets should be allowed ta pass.
Packets which is rejected by tha filta is silently discarded. Y'all KNOW dat shit, muthafucka!  This
option can be used ta prevent specific network daemons (such as
routed) rockin up link bandwidth, or ta provide a straight-up basic firewall
capability.
Da \fIfilter\-expression\fR syntax be as busted lyrics bout fo' tcpdump(1),
except dat qualifiers which is inappropriate fo' a PPP link, such as
\fBether\fR n' \fBarp\fR, is not permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Generally tha filter
expression should be enclosed up in single-quotes ta prevent whitespace
in tha expression from bein interpreted by tha shell.  Note dat it
is possible ta apply different constraints ta incomin n' outgoing
packets rockin tha \fBinbound\fR n' \fBoutbound\fR qualifiers. This
option is currently only available under Linux, n' requires dat the
kernel was configured ta include PPP filterin support (CONFIG_PPP_FILTER).
.TP
.B password \fIpassword\-string
Specifies tha password ta use fo' authenticatin ta tha peer n' shit.  Use
of dis option is discouraged, as tha password is likely ta be visible
to other playas on tha system (for example, by rockin ps(1)).
.TP
.B persist
Do not exit afta a cold-ass lil connection is terminated; instead try ta reopen
the connection. I aint talkin' bout chicken n' gravy biatch. Da \fBmaxfail\fR option still has a effect on
persistent connections.
.TP
.B plugin \fIfilename
Load tha shared library object file \fIfilename\fR as a plugin. I aint talkin' bout chicken n' gravy biatch.  This
is a privileged option. I aint talkin' bout chicken n' gravy biatch.  If \fIfilename\fR do not contain a slash
(/), pppd will look up in tha \fB/usr/lib/pppd/\fIversion\fR directory
for tha plugin, where
\fIversion\fR is tha version number of pppd (for example, 2.4.2).
.TP
.B predictor1
Request dat tha peer compress frames dat it sendz rockin Predictor-1
compression, n' smoke ta compress transmitted frames wit Predictor-1
if requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option has no effect unless tha kernel driver
supports Predictor-1 compression.
.TP
.B privgroup \fIgroup\-name
Allows thugz of crew \fIgroup\-name\fR ta use privileged options.
This be a privileged option. I aint talkin' bout chicken n' gravy biatch.  Use of dis option requires care as
there is no guarantee dat thugz of \fIgroup\-name\fR cannot use pppd
to become root theyselves.  Consider it equivalent ta puttin the
thugz of \fIgroup\-name\fR up in tha kmem or disk group.
.TP
.B proxyarp
Add a entry ta dis systemz ARP [Address Resolution Protocol] table
with tha IP address of tha peer n' tha Ethernet address of this
system.  This gonna git tha effect of makin tha peer step tha fuck up ta other
systems ta be on tha local ethernet.
.TP
.B pty \fIscript
Specifies dat tha command \fIscript\fR is ta be used ta communicate
rather than a specific terminal device.  Pppd will allocate itself a
pseudo-tty master/slave pair n' use tha slave as its terminal
device.  Da \fIscript\fR is ghon be run up in a cold-ass lil lil pimp process wit the
pseudo-tty masta as its standard input n' output.  An explicit
device name may not be given if dis option is used. Y'all KNOW dat shit, muthafucka!  (Note: if the
\fIrecord\fR option is used up in conjunction wit tha \fIpty\fR option,
the lil pimp process gonna git pipes on its standard input n' output.)
.TP
.B receive\-all
With dis option, pppd will accept all control charactas from the
peer, includin dem marked up in tha receive asyncmap.  Without this
option, pppd will discard dem charactas as specified up in RFC1662.
This option should only be needed if tha peer is buggy.
.TP
.B record \fIfilename
Specifies dat pppd should record all charactas busted n' received to
a file named \fIfilename\fR.  This file is opened up in append mode,
usin tha userz user-ID n' permissions.  This option is implemented
usin a pseudo-tty n' a process ta transfer charactas between the
pseudo-tty n' tha real serial device, so it will increase tha latency
and CPU overhead of transferrin data over tha ppp intercourse.  The
charactas is stored up in a tagged format wit timestamps, which can be
displayed up in readable form rockin tha pppdump(8) program.
.TP
.B remotename \fIname
Set tha assumed name of tha remote system fo' authentication purposes
to \fIname\fR.
.TP
.B remotenumber \fInumber
Set tha assumed telephone number of tha remote system fo' authentication
purposes ta \fInumber\fR.
.TP
.B refuse\-chap
With dis option, pppd aint gonna smoke ta authenticate itself ta the
peer rockin CHAP.
.TP
.B refuse\-mschap
With dis option, pppd aint gonna smoke ta authenticate itself ta the
peer rockin MS\-CHAP.
.TP
.B refuse\-mschap\-v2
With dis option, pppd aint gonna smoke ta authenticate itself ta the
peer rockin MS\-CHAPv2.
.TP
.B refuse\-eap
With dis option, pppd aint gonna smoke ta authenticate itself ta the
peer rockin EAP.
.TP
.B refuse\-pap
With dis option, pppd aint gonna smoke ta authenticate itself ta the
peer rockin PAP.
.TP
.B require\-chap
Require tha peer ta authenticate itself rockin CHAP [Challenge
Handshake Authentication Protocol] authentication.
.TP
.B require\-mppe
Require tha use of MPPE (Microsizzlez Point ta Point Encryption).  This
option disablez all other compression types.  This option enables
both 40-bit n' 128-bit encryption. I aint talkin' bout chicken n' gravy biatch.  In order fo' MPPE ta successfully
come up, you must have authenticated wit either MS\-CHAP or MS\-CHAPv2.
This option is presently only supported under Linux, n' only if your
kernel has been configured ta include MPPE support.
.TP
.B require\-mppe\-40
Require tha use of MPPE, wit 40-bit encryption.
.TP
.B require\-mppe\-128
Require tha use of MPPE, wit 128-bit encryption.
.TP
.B require\-mschap
Require tha peer ta authenticate itself rockin MS\-CHAP [Microsizzlez Challenge
Handshake Authentication Protocol] authentication.
.TP
.B require\-mschap\-v2
Require tha peer ta authenticate itself rockin MS\-CHAPv2 [Microsizzlez Challenge
Handshake Authentication Protocol, Version 2] authentication.
.TP
.B require\-eap
Require tha peer ta authenticate itself rockin EAP [Extensible
Authentication Protocol] authentication.
.TP
.B require\-pap
Require tha peer ta authenticate itself rockin PAP [Password
Authentication Protocol] authentication.
.TP
.B show\-password
When loggin tha contentz of PAP packets, dis option causes pppd to
show tha password strang up in tha log message.
.TP
.B silent
With dis option, pppd aint gonna transmit LCP packets ta initiate a
connection until a valid LCP packet is received from tha peer (as for
the `passive' option wit ancient versionz of pppd).
.TP
.B srp\-interval \fIn
If dis parameta is given n' pppd uses EAP SRP\-SHA1 ta authenticate
the peer (i.e., is tha server), then pppd will use tha optional
lightweight SRP rechallenge mechanizzle at intervalz of \fIn\fR
seconds.  This option is fasta than \fBeap\-interval\fR
reauthentication cuz it uses a hash\-based mechanizzle n' do not
derive a freshly smoked up session key.
.TP
.B srp\-pn\-secret \fIstring
Set tha long-term pseudonym-generatin secret fo' tha server n' shit.  This
value is optionizzle n' if set, need ta be known all up in tha server
(authenticator) side only, n' should be different fo' each server (or
poll of identical servers).  It be used along wit tha current date to
generate a key ta encrypt n' decrypt tha clientz identitizzle contained
in tha pseudonym.
.TP
.B srp\-use\-pseudonym
When operatin as a EAP SRP\-SHA1 client, attempt ta use tha pseudonym
stored up in ~/.ppp_pseudonym first as tha identity, n' save up in this
file any pseudonym offered by tha peer durin authentication.
.TP
.B sync
Use synchronous HDLC serial encodin instead of asynchronous.
Da thang used by pppd wit dis option must have sync support.
Currently supports Microgate SyncLink adapters
under Linux n' FreeBSD 2.2.8 n' later.
.TP
.B unit \fInum
Sets tha ppp unit number (for a ppp0 or ppp1 etc intercourse name) fo' outbound
connections.
.TP
.B updetach
With dis option, pppd will detach from its controllin terminal once
it has successfully established tha ppp connection (to tha point where
the first network control protocol, probably tha IP control protocol,
has come up).
.TP
.B usehostname
Enforce tha use of tha hostname (with domain name appended, if given)
as tha name of tha local system fo' authentication purposes (overrides
the \fIname\fR option).  This option aint normally needed since the
\fIname\fR option is privileged.
.TP
.B usepeerdns
Ask tha peer fo' up ta 2 DNS server addresses.  Da addresses supplied
by tha peer (if any) is passed ta tha /etc/ppp/ip\-up script up in the
environment variablez DNS1 n' DNS2, n' tha environment variable
USEPEERDNS is ghon be set ta 1.  In addition, pppd will create an
/var/run/ppp/resolv.conf file containin one or two nameserver lines with
the address(es) supplied by tha peer.
.TP
.B user \fIname
Sets tha name used fo' authenticatin tha local system ta tha peer to
\fIname\fR.
.TP
.B vj\-max\-slots \fIn
Sets tha number of connection slots ta be used by tha Van Jacobson
TCP/IP header compression n' decompression code ta \fIn\fR, which
must be between 2 n' 16 (inclusive).
.TP
.B welcome \fIscript
Run tha executable or shell command specified by \fIscript\fR before
initiatin PPP negotiation, afta tha connect script (if any) has
completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  A value fo' dis option from a privileged source cannot be
overridden by a non-privileged user.
.TP
.B xonxoff
Use software flow control (i.e. XON/XOFF) ta control tha flow of data on
the serial port.
.SH OPTIONS FILES
Options can be taken from filez as well as tha command line.  Pppd
readz options from tha filez /etc/ppp/options, ~/.ppprc and
/etc/ppp/options.\fIttyname\fR (in dat order) before processin the
options on tha command line.  (In fact, tha command-line options are
scanned ta find tha terminal name before tha options.\fIttyname\fR
file is read.)  In formin tha name of tha options.\fIttyname\fR file,
the initial /dev/ is removed from tha terminal name, n' any remaining
/ charactas is replaced wit dots.
.PP
An options file is parsed tha fuck into a seriez of lyrics, delimited by
whitespace.  Whitespace can be included up in a word by enclosin the
word up in double-quotes (").  A backslash (\\) quotes tha followin character.
A hash (#) starts a cold-ass lil comment, which continues until tha end of the
line.  There is no restriction on rockin tha \fIfile\fR or \fIcall\fR
options within a options file.
.SH SECURITY
.I pppd
provides system administrators wit sufficient access control dat PPP
access ta a server machine can be provided ta legitimate playas without
fear of compromisin tha securitizzle of tha server or tha network it's
on. I aint talkin' bout chicken n' gravy biatch.  This control is provided all up in restrictions on which IP
addresses tha peer may use, based on its authenticated identitizzle (if
any), n' all up in restrictions on which options a non-privileged user
may use.  Several of pppdz options is privileged, up in particular
those which permit potentially insecure configurations; these options
are only accepted up in filez which is under tha control of tha system
administrator, or if pppd is bein run by root.
.PP
Da default behaviour of pppd is ta allow a unauthenticated peer to
use a given IP address only if tha system do not already have a
route ta dat IP address.  For example, a system wit a
permanent connection ta tha wider internizzle will normally have a
default route, n' thus all peers will gotta authenticate theyselves
in order ta set up a cold-ass lil connection. I aint talkin' bout chicken n' gravy biatch.  On such a system, tha \fIauth\fR
option is tha default.  On tha other hand, a system where the
PPP link is tha only connection ta tha internizzle aint gonna normally have
a default route, so tha peer is ghon be able ta use almost any IP address
without authenticatin itself.
.PP
As indicated above, some security-sensitizzle options is privileged,
which means dat they may not be used by a ordinary non-privileged
user hustlin a setuid-root pppd, either on tha command line, up in the
userz ~/.ppprc file, or up in a options file read rockin tha \fIfile\fR
option. I aint talkin' bout chicken n' gravy biatch.  Privileged options may be used up in /etc/ppp/options file or in
an options file read rockin tha \fIcall\fR option. I aint talkin' bout chicken n' gravy biatch.  If pppd is being
run by tha root user, privileged options can be used without
restriction.
.PP
When openin tha device, pppd uses either tha invokin userz user ID
or tha root UID (that is, 0), dependin on whether tha thang name was
specified by tha user or tha system administrator. Shiiit, dis aint no joke.  If tha thang name
be reppin a privileged source, dat is, /etc/ppp/options or an
options file read rockin tha \fIcall\fR option, pppd uses full root
privileges when openin tha device.  Thus, by bustin a appropriate
file under /etc/ppp/peers, tha system administrator can allow playas to
establish a ppp connection via a thang which they would not normally
have permission ta access.  Otherwise pppd uses tha invokin user's
real UID when openin tha device.
.SH AUTHENTICATION
Authentication is tha process whereby one peer convinces tha other of
its identity.  This involves tha straight-up original gangsta peer bustin  its name ta the
other, together wit some kind of secret shiznit which could only
come from tha genuine authorized user of dat name.  In such an
exchange, we will call tha straight-up original gangsta peer tha "client" n' tha other the
"server".  Da client has a name by which it identifies itself ta the
server, n' tha server also has a name by which it identifies itself
to tha client.  Generally tha genuine client shares some secret (or
password) wit tha server, n' authenticates itself by provin dat it
knows dat secret.  Straight-up often, tha names used fo' authentication
correspond ta tha internizzle hostnamez of tha peers yo, but dis is not
essential.
.LP
At present, pppd supports three authentication protocols: tha Password
Authentication Protocol (PAP), Challenge Handshake Authentication
Protocol (CHAP), n' Extensible Authentication Protocol (EAP).  PAP
involves tha client bustin  its name n' a cold-ass lil cleartext password ta the
server ta authenticate itself.  In contrast, tha server initiates the
CHAP authentication exchange by bustin  a cold-ass lil challenge ta tha client (the
challenge packet includes tha serverz name).  Da client must respond
with a response which includes its name plus a hash value derived from
the shared secret n' tha challenge, up in order ta prove dat it knows
the secret.  EAP supports CHAP-style authentication, n' also includes
the SRP\-SHA1 mechanism, which is resistant ta dictionary-based attacks
and do not require a cold-ass lil cleartext password on tha server side.
.LP
Da PPP protocol, bein symmetrical, allows both peers ta require the
other ta authenticate itself.  In dat case, two separate and
independent authentication exchanges will occur. Shiiit, dis aint no joke.  Da two exchanges
could use different authentication protocols, n' up in principle,
different names could be used up in tha two exchanges.
.LP
Da default behaviour of pppd is ta smoke ta authenticate if
requested, n' ta not require authentication from tha peer n' shit.  However,
pppd aint gonna smoke ta authenticate itself wit a particular protocol
if it has no secrets which could be used ta do so.
.LP
Pppd stores secrets fo' use up in authentication up in secrets
filez (/etc/ppp/pap\-secrets fo' PAP, /etc/ppp/chap\-secrets fo' CHAP,
MS\-CHAP, MS\-CHAPv2, n' EAP MD5-Challenge, n' /etc/ppp/srp\-secrets
for EAP SRP\-SHA1).
All secrets filez have tha same format.  Da secrets filez can
contain secrets fo' pppd ta use up in authenticatin itself ta other
systems, as well as secrets fo' pppd ta use when authenticatin other
systems ta itself.
.LP
Each line up in a secrets file gotz nuff one secret.  A given secret is
specific ta a particular combination of client n' server - it can
only be used by dat client ta authenticate itself ta dat server.
Thus each line up in a secrets file has at least 3 fields: tha name of
the client, tha name of tha server, n' tha secret.  These fieldz may
be followed by a list of tha IP addresses dat tha specified client
may use when connectin ta tha specified server.
.LP
A secrets file is parsed tha fuck into lyrics as fo' a options file, so the
client name, server name n' secrets fieldz must each be one word,
with any embedded spaces or other special charactas quoted or
escaped. Y'all KNOW dat shit, muthafucka!  Note dat case is dope up in tha client n' server names
and up in tha secret.
.LP
If tha secret starts wit a `@', what tha fuck bigs up be assumed ta be the
name of a gangbangin' file from which ta read tha secret.  A "*" as tha client or
server name matches any name.  When selectin a secret, pppd takes the
best match, i.e.  tha match wit tha fewest wildcards.
.LP
Any followin lyrics on tha same line is taken ta be a list of
acceptable IP addresses fo' dat client.  If there be only 3 lyrics on
the line, or if tha straight-up original gangsta word is "\-", then all IP addresses are
disallowed. Y'all KNOW dat shit, muthafucka!  To allow any address, use "*".  A word startin wit "!"
indicates dat tha specified address is \fInot\fR acceptable.  An
address may be followed by "/" n' a number \fIn\fR, ta indicate a
whole subnet, i.e. all addresses which have tha same value up in da most thugged-out
significant \fIn\fR bits, n' you can put dat on yo' toast.  In dis form, tha address may be followed
by a plus sign ("+") ta indicate dat one address from tha subnet is
authorized, based on tha ppp network intercourse unit number up in use.
In dis case, tha host part of tha address is ghon be set ta tha unit
number plus one.
.LP
Thus a secrets file gotz nuff both secrets fo' use up in authenticating
other hosts, plus secrets which we use fo' authenticatin ourselves to
others.  When pppd be authenticatin tha peer (checkin tha peer's
identity), it chizzlez a secret wit tha peerz name up in tha first
field n' tha name of tha local system up in tha second field. Y'all KNOW dat shit, muthafucka!  The
name of tha local system defaults ta tha hostname, wit tha domain
name appended if tha \fIdomain\fR option is used. Y'all KNOW dat shit, muthafucka!  This default can be
overridden wit tha \fIname\fR option, except when the
\fIusehostname\fR option is used. Y'all KNOW dat shit, muthafucka!  (For EAP SRP\-SHA1, peep the
srp\-entry(8) utilitizzle fo' generatin proper validator entries ta be
used up in tha "secret" field.)
.LP
When pppd is choosin a secret ta use up in authenticatin itself ta the
peer, it first determines what tha fuck name it is goin ta use ta identify
itself ta tha peer n' shit.  This name can be specified by tha user wit the
\fIuser\fR option. I aint talkin' bout chicken n' gravy biatch.  If dis option aint used, tha name defaults to
the name of tha local system, determined as busted lyrics bout up in tha previous
paragraph.  Then pppd looks fo' a secret wit dis name up in tha first
field n' tha peerz name up in tha second field. Y'all KNOW dat shit, muthafucka!  Pppd will know the
name of tha peer if CHAP or EAP authentication is bein used, cuz
the peer gonna git busted it up in tha challenge packet.  But fuck dat shiznit yo, tha word on tha street is dat if PAP
is bein used, pppd will gotta determine tha peerz name from the
options specified by tha user n' shit.  Da user can specify tha peerz name
directly wit tha \fIremotename\fR option. I aint talkin' bout chicken n' gravy biatch.  Otherwise, if tha remote
IP address was specified by a name (rather than up in numeric form), that
name is ghon be used as tha peerz name.  Failin that, pppd will use the
null strang as tha peerz name.
.LP
When authenticatin tha peer wit PAP, tha supplied password is first
compared wit tha secret from tha secrets file.  If tha password
doesn't match tha secret, tha password is encrypted rockin crypt() and
checked against tha secret again. I aint talkin' bout chicken n' gravy biatch.  Thus secrets fo' authenticatin the
peer can be stored up in encrypted form if desired. Y'all KNOW dat shit, muthafucka!  If the
\fIpapcrypt\fR option is given, tha straight-up original gangsta (unencrypted) comparison is
omitted, fo' betta security.
.LP
Furthermore, if tha \fIlogin\fR option was specified, tha username and
password is also checked against tha system password database.  Thus,
the system administrator can set up tha pap\-secrets file ta allow PPP
access only ta certain users, n' ta restrict tha set of IP addresses
that each user can use.  Typically, when rockin tha \fIlogin\fR option,
the secret up in /etc/ppp/pap\-secrets would be "", which will match any
password supplied by tha peer n' shit.  This avoidz tha need ta have tha same
secret up in two places.
.LP
Authentication must be satisfactorily completed before IPCP (or any
other Network Control Protocol) can be started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha peer is
required ta authenticate itself, n' fails ta do so, pppd will
terminated tha link (by closin LCP).  If IPCP negotiates an
unacceptable IP address fo' tha remote host, IPCP is ghon be closed. Y'all KNOW dat shit, muthafucka!  IP
packets can only be busted or received when IPCP is open.
.LP
In some cases it is desirable ta allow some hosts which can't
authenticate theyselves ta connect n' use one of a restricted set of
IP addresses, even when tha local host generally requires
authentication. I aint talkin' bout chicken n' gravy biatch.  If tha peer refuses ta authenticate itself when
requested, pppd takes dat as equivalent ta authenticatin wit PAP
usin tha empty strang fo' tha username n' password. Y'all KNOW dat shit, muthafucka!  Thus, by adding
a line ta tha pap\-secrets file which specifies tha empty strang for
the client n' password, it is possible ta allow restricted access to
hosts which refuse ta authenticate theyselves.
.SH ROUTING
.LP
When IPCP negotiation is completed successfully, pppd will inform the
kernel of tha local n' remote IP addresses fo' tha ppp intercourse.
This is sufficient ta create a host route ta tha remote end of the
link, which will enable tha peers ta exchange IP packets.
Communication wit other machines generally requires further
modification ta routin tablez and/or ARP (Address Resolution
Protocol) tables.  In most cases tha \fIdefaultroute\fR and/or
\fIproxyarp\fR options is sufficient fo' dis yo, but up in some cases
further intervention is required. Y'all KNOW dat shit, muthafucka!  Da /etc/ppp/ip\-up script can be
used fo' all dis bullshit.
.LP
Sometimes it is desirable ta add a thugged-out default route all up in tha remote
host, as up in tha case of a machine whose only connection ta the
Internizzle be all up in tha ppp intercourse.  Da \fIdefaultroute\fR option
causes pppd ta create such a thugged-out default route when IPCP comes up, and
delete it when tha link is terminated.
.LP
In some cases it is desirable ta use proxy ARP, fo' example on a
server machine connected ta a LAN, up in order ta allow other hosts to
communicate wit tha remote host.  Da \fIproxyarp\fR option causes
pppd ta look fo' a network intercourse on tha same subnet as tha remote
host (an intercourse supportin broadcast n' ARP, which is up n' not a
point-to-point or loopback intercourse).  If found, pppd creates a
permanent, published ARP entry wit tha IP address of tha remote host
and tha hardware address of tha network intercourse found.
.LP
When tha \fIdemand\fR option is used, tha intercourse IP addresses have
already been set all up in tha point when IPCP comes up.  If pppd has not
been able ta negotiate tha same addresses dat it used ta configure
the intercourse (for example when tha peer be a ISP dat uses dynamic
IP address assignment), pppd has ta chizzle tha intercourse IP addresses
to tha negotiated addresses.  This may disrupt existin connections,
and tha use of demand diallin wit peers dat do dynamic IP address
assignment aint recommended.
.SH MULTILINK
Multilink PPP serves up tha capabilitizzle ta combine two or mo' PPP links
between a pair of machines tha fuck into a single `bundle', which appears as a
single virtual PPP link which has tha combined bandwidth of the
individual links.  Currently, multilink PPP is only supported under
Linux.
.LP
Pppd detects dat tha link it is controllin is connected ta tha same
peer as another link rockin tha peerz endpoint discriminator n' the
authenticated identitizzle of tha peer (if it authenticates itself).  The
endpoint discriminator be a funky-ass block of data which is hopefully unique
for each peer n' shit.  Several typez of data can be used, including
locally-assigned stringz of bytes, IP addresses, MAC addresses,
randomly stringz of bytes, or E\-164 beeper numbers.  Da endpoint
discriminator busted ta tha peer by pppd can be set rockin tha endpoint
option.
.LP
In some circumstances tha peer may bust no endpoint discriminator or a
non-unique value.  Da bundle option addz a extra strang which is
added ta tha peerz endpoint discriminator n' authenticated identity
when matchin up links ta be joined together up in a funky-ass bundle.  Da bundle
option can also be used ta allow tha establishment of multiple bundles
between tha local system n' tha peer n' shit.  Pppd uses a TDB database in
/var/run/pppd2.tdb ta match up links.
.LP
Assumin dat multilink is enabled n' tha peer is willin to
negotiate multilink, then when pppd is invoked ta brang up tha first
link ta tha peer, it will detect dat no other link is connected to
the peer n' create a freshly smoked up bundle, dat is, another ppp network
interface unit.  When another pppd is invoked ta brang up another link
to tha peer, it will detect tha existin bundle n' join its link to
it.
.LP
If tha straight-up original gangsta link terminates (for example, cuz of a hangup or a
received LCP terminate-request) tha bundle aint destroyed unless
there is no other links remainin up in tha bundle.  Rather than
exiting, tha straight-up original gangsta pppd keeps hustlin afta its link terminates, until
all tha links up in tha bundle have terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha straight-up original gangsta pppd
receives a SIGTERM or SIGINT signal, it will destroy tha bundle and
send a SIGHUP ta tha pppd processes fo' each of tha links up in the
bundle.  If tha straight-up original gangsta pppd receives a SIGHUP signal, it will terminate
its link but not tha bundle.
.LP
Note: demand mode aint currently supported wit multilink.
.SH EXAMPLES
.LP
Da followin examplez assume dat tha /etc/ppp/options file gotz nuff
the \fIauth\fR option (as up in tha default /etc/ppp/options file up in the
ppp distribution).
.LP
Probably da most thugged-out common use of pppd is ta dial up ta a ISP.  This
can be done wit a cold-ass lil command such as
.IP
pppd call isp
.LP
where tha /etc/ppp/peers/isp file is set up by tha system
administrator ta contain suttin' like this:
.IP
ttyS0 19200 crtscts
.br
connect '/usr/sbin/chat \-v \-f /etc/ppp/chat\-isp'
.br
noauth
.LP
In dis example, we is rockin chat ta dial tha ISPz modem n' go
all up in any logon sequence required. Y'all KNOW dat shit, muthafucka!  Da /etc/ppp/chat\-isp file
gotz nuff tha script used by chat; it could fo' example contain
suttin' like this:
.IP
ABORT "NO CARRIER"
.br
ABORT "NO DIALTONE"
.br
ABORT "ERROR"
.br
ABORT "NO ANSWER"
.br
ABORT "BUSY"
.br
ABORT "Username/Password Incorrect"
.br
"" "at"
.br
OK "at&d0&c1"
.br
OK "atdt2468135"
.br
"name:" "^Umyuserid"
.br
"word:" "\\qmypassword"
.br
"ispts" "\\q^Uppp"
.br
"~\-^Uppp\-~"
.LP
See tha chat(8) playa page fo' detailz of chat scripts.
.LP
Pppd can also be used ta provide a gangbangin' finger-lickin' dial-in ppp steez fo' users.  If
the playas already have login accounts, tha simplest way ta set up the
ppp steez is ta let tha playas log up in ta they accounts n' run pppd
(installed setuid-root) wit a cold-ass lil command such as
.IP
pppd proxyarp
.LP
To allow a user ta use tha PPP facilities, you need ta allocate a IP
address fo' dat userz machine n' create a entry in
/etc/ppp/pap\-secrets, /etc/ppp/chap\-secrets, or /etc/ppp/srp\-secrets
(dependin on which authentication method tha PPP implementation on
the userz machine supports), so dat tha userz machine can
authenticate itself.  For example, if Joe has a machine called
"joespc" dat is ta be allowed ta dial up in ta tha machine called
"server" n' use tha IP address joespc.my.net, you would add a entry
like dis ta /etc/ppp/pap\-secrets or /etc/ppp/chap\-secrets:
.IP
joespc	server	"joez secret"	joespc.my.net
.LP
(See srp\-entry(8) fo' a means ta generate tha serverz entry when
SRP\-SHA1 is up in use.)
Alternatively, you can create a username called (for example) "ppp",
whose login shell is pppd n' whose home directory is /etc/ppp.
Options ta be used when pppd is run dis way can be put in
/etc/ppp/.ppprc.
.LP
If yo' serial connection be any mo' fucked up than a piece of
wire, you may need ta arrange fo' some control charactas ta be
escaped. Y'all KNOW dat shit, muthafucka!  In particular, it is often useful ta escape XON (^Q) and
XOFF (^S), rockin \fIasyncmap a0000\fR.  If tha path includes a telnet,
you probably should escape ^] as well (\fIasyncmap 200a0000\fR).  If
the path includes a rlogin, yo big-ass booty is ghon need ta use tha \fIescape ff\fR
option on tha end which is hustlin tha rlogin client, since many
rlogin implementations is not transparent; they will remove the
sequence [0xff, 0xff, 0x73, 0x73, followed by any 8 bytes] from the
stream.
.SH DIAGNOSTICS
.LP
Lyrics is busted ta tha syslog daemon rockin facilitizzle LOG_DAEMON.
(This can be overridden by recompilin pppd wit tha macro
LOG_PPP defined as tha desired facility.)  See tha syslog(8)
documentation fo' detailz of where tha syslog daemon will write the
lyrics.  On most systems, tha syslog daemon uses the
/etc/syslog.conf file ta specify tha destination(s) fo' syslog
lyrics.  Yo ass may need ta edit dat file ta suit.
.LP
Da \fIdebug\fR option causes tha contentz of all control packets sent
or received ta be logged, dat is, all LCP, PAP, CHAP, EAP, or IPCP packets.
This can be useful if tha PPP negotiation do not succeed or if
authentication fails.
If debuggin is enabled at compile time, tha \fIdebug\fR option also
causes other debuggin lyrics ta be logged.
.LP
Debuggin can also be enabled or disabled by bustin  a SIGUSR1 signal
to tha pppd process.  This signal acts as a toggle.
.SH EXIT STATUS
Da exit statuz of pppd is set ta indicate whether any error was
detected, or tha reason fo' tha link bein terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da joints
used are:
.TP
.B 0
Pppd has detached, or otherwise tha connection was successfully
established n' terminated all up in tha peerz request.
.TP
.B 1
An immediately fatal error of some kind occurred, like fuckin a essential
system call failing, or hustlin outta virtual memory.
.TP
.B 2
An error was detected up in processin tha options given, like fuckin two
mutually exclusive options bein used.
.TP
.B 3
Pppd aint setuid-root n' tha invokin user aint root.
.TP
.B 4
Da kernel do not support PPP, fo' example, tha PPP kernel driver is
not included or cannot be loaded.
.TP
.B 5
Pppd terminated cuz dat shiznit was busted a SIGINT, SIGTERM or SIGHUP
signal.
.TP
.B 6
Da serial port could not be locked.
.TP
.B 7
Da serial port could not be opened.
.TP
.B 8
Da connect script failed (returned a non-zero exit status).
.TP
.B 9
Da command specified as tha argument ta tha \fIpty\fR option could
not be run.
.TP
.B 10
Da PPP negotiation failed, dat is, it didn't reach tha point where
at least one network protocol (e.g. IP) was hustlin.
.TP
.B 11
Da peer system failed (or refused) ta authenticate itself.
.TP
.B 12
Da link was established successfully n' terminated cuz it was
idle.
.TP
.B 13
Da link was established successfully n' terminated cuz the
connect time limit was reached.
.TP
.B 14
Callback was negotiated n' a incomin call should arrive shortly.
.TP
.B 15
Da link was terminated cuz tha peer aint respondin ta echo
requests.
.TP
.B 16
Da link was terminated by tha modem hangin up.
.TP
.B 17
Da PPP negotiation failed cuz serial loopback was detected.
.TP
.B 18
Da init script failed (returned a non-zero exit status).
.TP
.B 19
We failed ta authenticate ourselves ta tha peer.
.SH SCRIPTS
Pppd invokes scripts at various stages up in its processin which can be
used ta big-ass up crib-specific ancillary processing.  These scripts are
usually shell scripts yo, but could be executable code filez instead.
Pppd do not wait fo' tha scripts ta finish (except fo' tha ip-pre-up
script).  Da scripts are
executed as root (with tha real n' effectizzle user-id set ta 0), so
that they can do thangs like fuckin update routin tablez or run
privileged daemons.  Be careful dat tha contentz of these scripts do
not compromise yo' systemz security.  Pppd runs tha scripts with
standard input, output n' error repimped up ta /dev/null, n' wit an
environment dat is empty except fo' some environment variablez that
give shiznit bout tha link.  Da environment variablez dat pppd
sets are:
.TP
.B DEVICE
Da name of tha serial tty thang bein used.
.TP
.B IFNAME
Da name of tha network intercourse bein used.
.TP
.B IPLOCAL
Da IP address fo' tha local end of tha link.  This is only set when
IPCP has come up.
.TP
.B IPREMOTE
Da IP address fo' tha remote end of tha link.  This is only set when
IPCP has come up.
.TP
.B PEERNAME
Da authenticated name of tha peer n' shit.  This is only set if tha peer
authenticates itself.
.TP
.B SPEED
Da baud rate of tha tty device.
.TP
.B ORIG_UID
Da real user-id of tha user whoz ass invoked pppd.
.TP
.B PPPLOGNAME
Da username of tha real user-id dat invoked pppd. Y'all KNOW dat shit, muthafucka! This be always set.
.P
For tha ip-down n' auth-down scripts, pppd also sets tha following
variablez givin statistics fo' tha connection:
.TP
.B CONNECT_TIME
Da number of secondz from when tha PPP negotiation started until the
connection was terminated.
.TP
.B BYTES_SENT
Da number of bytes busted (at tha level of tha serial port) durin the
connection.
.TP
.B BYTES_RCVD
Da number of bytes received (at tha level of tha serial port) during
the connection.
.TP
.B LINKNAME
Da logical name of tha link, set wit tha \fIlinkname\fR option.
.TP
.B DNS1
If tha peer supplies DNS server addresses, dis variable is set ta the
first DNS server address supplied.
.TP
.B DNS2
If tha peer supplies DNS server addresses, dis variable is set ta the
second DNS server address supplied.
.P
Pppd invokes tha followin scripts, if they exist.  It aint a error
if they don't exist.
.TP
.B /etc/ppp/auth\-up
A program or script which is executed afta tha remote system
successfully authenticates itself.  It be executed wit tha parameters
.IP
\fIinterface\-name peer\-name user\-name tty\-device speed\fR
.IP
Note dat dis script aint executed if tha peer don't authenticate
itself, fo' example when tha \fInoauth\fR option is used.
.TP
.B /etc/ppp/auth\-down
A program or script which is executed when tha link goes down, if
/etc/ppp/auth\-up was previously executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It be executed up in tha same
manner wit tha same parametas as /etc/ppp/auth\-up.
.TP
.B /etc/ppp/ip\-pre\-up
A program or script which is executed just before tha ppp network
interface is brought up.  It be executed wit tha same parametas as
the ip\-up script (below).  At dis point tha intercourse exists n' has
IP addresses assigned but is still down. I aint talkin' bout chicken n' gravy biatch.  This can be used to
add firewall rulez before any IP traffic can pass all up in the
interface.  Pppd will wait fo' dis script ta finish before branging
the intercourse up, so dis script should run doggystyle.
.TP
.B /etc/ppp/ip\-up
A program or script which is executed when tha link be available for
sendin n' receivin IP packets (that is, IPCP has come up).  It is
executed wit tha parameters
.IP
\fIinterface\-name tty\-device speed local\-IP\-address
remote\-IP\-address ipparam\fR
.TP
.B /etc/ppp/ip\-down
A program or script which is executed when tha link is no longer
available fo' bustin  n' receivin IP packets, n' you can put dat on yo' toast.  This script can be
used fo' unfuckin wit tha effectz of tha /etc/ppp/ip\-up and
/etc/ppp/ip\-pre\-up scripts, n' you can put dat on yo' toast.  It is
invoked up in tha same manner n' wit tha same parametas as tha ip\-up
script.
.TP
.B /etc/ppp/ipv6\-up
Like /etc/ppp/ip\-up, except dat it is executed when tha link be available 
for bustin  n' receivin IPv6 packets, n' you can put dat on yo' toast. Well shiiiit, it is executed wit tha parameters
.IP
\fIinterface\-name tty\-device speed local\-link\-local\-address
remote\-link\-local\-address ipparam\fR
.TP
.B /etc/ppp/ipv6\-down
Similar ta /etc/ppp/ip\-down yo, but it is executed when IPv6 packets can no
longer be transmitted on tha link. Well shiiiit, it is executed wit tha same parametas 
as tha ipv6\-up script.
.TP
.B /etc/ppp/ipx\-up
A program or script which is executed when tha link be available for
sendin n' receivin IPX packets (that is, IPXCP has come up).  It is
executed wit tha parameters
.IP
\fIinterface\-name tty\-device speed network\-number local\-IPX\-node\-address
remote\-IPX\-node\-address local\-IPX\-routing\-protocol remote\-IPX\-routing\-protocol
local\-IPX\-router\-name remote\-IPX\-router\-name ipparam pppd\-pid\fR 
.IP
Da local\-IPX\-routing\-protocol n' remote\-IPX\-routing\-protocol field
may be one of tha following:
.IP
NONE      ta indicate dat there is no routin protocol
.br
RIP       ta indicate dat RIP/SAP should be used
.br
NLSP      ta indicate dat Novell NLSP should be used
.br
RIP NLSP  ta indicate dat both RIP/SAP n' NLSP should be used
.TP
.B /etc/ppp/ipx\-down
A program or script which is executed when tha link is no longer
available fo' bustin  n' receivin IPX packets, n' you can put dat on yo' toast.  This script can be
used fo' unfuckin wit tha effectz of tha /etc/ppp/ipx\-up script.  It is
invoked up in tha same manner n' wit tha same parametas as tha ipx\-up
script.
.SH FILES
.TP
.B /var/run/ppp\fIn\fB.pid \fR(BSD or Linux), \fB/etc/ppp/ppp\fIn\fB.pid \fR(others)
Process-ID fo' pppd process on ppp intercourse unit \fIn\fR.
.TP
.B /var/run/ppp\-\fIname\fB.pid \fR(BSD or Linux),
\fB/etc/ppp/ppp\-\fIname\fB.pid \fR(others)
Process-ID fo' pppd process fo' logical link \fIname\fR (see the
\fIlinkname\fR option).
.TP
.B /var/run/pppd2.tdb
Database containin shiznit bout pppd processes, intercourses and
links, used fo' matchin links ta bundlez up in multilink operation. I aint talkin' bout chicken n' gravy biatch.  May
be examined by external programs ta obtain shiznit bout hustlin
pppd instances, tha intercourses n' devices they is using, IP address
assignments, etc.
.B /etc/ppp/pap\-secrets
Usernames, passwordz n' IP addresses fo' PAP authentication. I aint talkin' bout chicken n' gravy biatch.  This
file should be owned by root n' not readable or writable by any other
user n' shit.  Pppd will log a warnin if dis aint tha case.
.TP
.B /etc/ppp/chap\-secrets
Names, secrets n' IP addresses fo' CHAP/MS\-CHAP/MS\-CHAPv2 authentication.
As fo' /etc/ppp/pap\-secrets, dis file should be owned by root n' not
readable or writable by any other user n' shit.  Pppd will log a warnin if
this aint tha case.
.TP
.B /etc/ppp/srp\-secrets
Names, secrets, n' IP addresses fo' EAP authentication. I aint talkin' bout chicken n' gravy biatch.  As for
/etc/ppp/pap\-secrets, dis file should be owned by root n' not
readable or writable by any other user n' shit.  Pppd will log a warnin if
this aint tha case.
.TP
.B ~/.ppp_pseudonym
Saved client-side SRP\-SHA1 pseudonym.  See tha \fIsrp\-use\-pseudonym\fR
option fo' details.
.TP
.B /etc/ppp/options
System default options fo' pppd, read before user default options or
command-line options.
.TP
.B ~/.ppprc
User default options, read before /etc/ppp/options.\fIttyname\fR.
.TP
.B /etc/ppp/options.\fIttyname
System default options fo' tha serial port bein used, read after
~/.ppprc.  In formin tha \fIttyname\fR part of this
filename, a initial /dev/ is stripped from tha port name (if
present), n' any slashes up in tha remainin part is converted to
dots.
.TP
.B /etc/ppp/peers
A directory containin options filez which may contain privileged
options, even if pppd was invoked by a user other than root.  The
system administrator can create options filez up in dis directory to
permit non-privileged playas ta dial up without requirin tha peer to
authenticate yo, but only ta certain trusted peers.
.SH SEE ALSO
.BR chat (8),
.BR pppstats (8)
.TP
.B RFC1144
Jacobson, V.
\fICompressin TCP/IP headaz fo' low-speed serial links.\fR
February 1990.
.TP
.B RFC1321
Rivest, R.
.I Da MD5 Message-Digest Algorithm.
April 1992.
.TP
.B RFC1332
McGregor, G.
.I PPP Internizzle Protocol Control Protocol (IPCP).
May 1992.
.TP
.B RFC1334
Lloyd, B.; Simpson, W.A.
.I PPP authentication protocols.
October 1992.
.TP
.B RFC1661
Simpson, W.A.
.I Da Point-to-Point Protocol (PPP).
July 1994.
.TP
.B RFC1662
Simpson, W.A.
.I PPP up in HDLC-like Framing.
July 1994.
.TP
.B RFC2284
Blunk, L.; Vollbrecht, J.,
.I PPP Extensible Authentication Protocol (EAP).
March 1998.
.TP
.B RFC2472
Haskin, D.
.I IP Version 6 over PPP
December 1998.
.TP
.B RFC2945
Wu, T.,
.I Da SRP Authentication n' Key Exchange System
September 2000.
.TP
.B draft\-ietf\-pppext\-eap\-srp\-03.txt
Carlson, J.; et al.,
.I EAP SRP\-SHA1 Authentication Protocol.
July 2001.
.SH NOTES
Some limited degree of control can be exercised over a hustlin pppd
process by bustin  it a signal from tha list below.
.TP
.B SIGINT, SIGTERM
These signals cause pppd ta terminizzle tha link (by closin LCP),
restore tha serial thang settings, n' exit.  If a cold-ass lil connector or
disconnector process is currently hustlin, pppd will bust tha same
signal ta its process group, so as ta terminizzle tha connector or
disconnector process.
.TP
.B SIGHUP
This signal causes pppd ta terminizzle tha link, restore tha serial
device settings, n' close tha serial device.  If tha \fIpersist\fR or
\fIdemand\fR option has been specified, pppd will try ta reopen the
serial thang n' start another connection (afta tha holdoff period).
Otherwise pppd will exit.  If dis signal is received durin the
holdoff period, it causes pppd ta end tha holdoff period immediately.
If a cold-ass lil connector or disconnector process is hustlin, pppd will bust the
same signal ta its process group.
.TP
.B SIGUSR1
This signal togglez tha state of tha \fIdebug\fR option.
.TP
.B SIGUSR2
This signal causes pppd ta renegotiate compression. I aint talkin' bout chicken n' gravy biatch.  This can be
useful ta re-enable compression afta it has been disabled as a result
of a gangbangin' fatal decompression error. Shiiit, dis aint no joke.  (Fatal decompression errors generally
indicate a funky-ass bug up in one or other implementation.)

.SH AUTHORS
Pizzle Mackerras (paulus@samba.org), based on earlier work by
Drew Perkins,
Brad Clements,
Karl Fox,
Greg Christy,
and
Brad Parker.

.SH COPYRIGHT
Pppd is copyrighted n' made available under conditions which provide
that it may be copied n' used up in source or binary forms provided that
the conditions listed below is met.  Portionz of pppd is covered by
the followin copyright notices:
.LP
Copyright (c) 1984-2000 Carnegie Mellon Universitizzle fo' realz. All rights
reserved.
.br
Copyright (c) 1993-2004 Pizzle Mackerras fo' realz. All muthafuckin rights reserved.
.br
Copyright (c) 1995 Pedro Roque Marques.  All muthafuckin rights reserved.
.br
Copyright (c) 1995 Eric Rosenquist.  All muthafuckin rights reserved.
.br
Copyright (c) 1999 Tommi Komulainen. I aint talkin' bout chicken n' gravy biatch.  All muthafuckin rights reserved.
.br
Copyright (C) Andrew Tridgell 1999
.br
Copyright (c) 2000 by Sun Microsystems, Inc.  All muthafuckin rights reserved.
.br
Copyright (c) 2001 by Sun Microsystems, Inc.  All muthafuckin rights reserved.
.br
Copyright (c) 2002 Google, Inc.  All muthafuckin rights reserved.
.LP
Da copyright notices contain tha followin statements.
.LP
Redistribution n' use up in source n' binary forms, wit or without
modification, is permitted provided dat tha followin conditions
are met:
.LP
1. Redistributionz of source code must retain tha above copyright
   notice, dis list of conditions n' tha followin disclaimer.
.LP
2. Redistributions up in binary form must reproduce tha above copyright
   notice, dis list of conditions n' tha followin disclaimer in
   tha documentation and/or other shiznit provided wit the
   distribution.
.LP
3. Da name "Carnegie Mellon University" must not be used to
   endorse or promote shizzle derived from dis software without
   prior freestyled permission. I aint talkin' bout chicken n' gravy biatch. For permission or any legal
   details, please contact
.br
     Office of Technologizzle Transfer
.br
     Carnegie Mellon University
.br
     5000 Forbes Avenue
.br
     Pizzlesburgh, PA  15213-3890
.br
     (412) 268-4387, fax: (412) 268-7395
.br
     tech-transfer@andrew.cmu.edu
.LP
3b. Da name(s) of tha authorz of dis software must not be used to
   endorse or promote shizzle derived from dis software without
   prior freestyled permission.
.LP
4. Redistributionz of any form whatsoever must retain tha following
   acknowledgements:
.br
   "This thang includes software pimped by Computin Skillz
    at Carnegie Mellon Universitizzle (http://www.cmu.edu/computing/)."
.br
   "This thang includes software pimped by Pizzle Mackerras
    <paulus@samba.org>".
.br
   "This thang includes software pimped by Pedro Roque Marques
    <pedro_m@yahoo.com>".
.br
   "This thang includes software pimped by Tommi Komulainen
    <Tommi.Komulainen@iki.fi>".
.LP
CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.LP
THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
