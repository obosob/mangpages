.TH setpci 8 "10 November 2014" "pciutils-3.3.0" "Da PCI Utilities"
.SH NAME
setpci \- configure PCI devices
.SH SYNOPSIS
.B setpci
.RB [ options ]
.B devices
.BR operations ...

.SH DESCRIPTION
.PP
.B setpci
is a utilitizzle fo' queryin n' configurin PCI devices.

All numbers is entered up in hexadecimal notation.

Root privileges is necessary fo' almost all operations, excludin reads
of tha standard header of tha configuration space on some operatin systems.
Please see
.BR lspci(8)
for details on access rights.

.SH OPTIONS

.SS General options
.TP
.B -v
Tells
.I setpci
to be verbose n' display detailed shiznit bout configuration space accesses.
.TP
.B -f
Tells
.I setpci
not ta diss when there be a not a god damn thang ta do (when no devices is selected).
This option is intended fo' use up in widely-distributed configuration scripts
where itz uncertain whether tha thang up in question is present up in tha machine
or not.
.TP
.B -D
`Demo mode' -- don't write anythang ta tha configuration registers.
It aint nuthin but useful ta try
.B setpci -vD
to verify dat yo' complex sequence of
.B setpci
operations do what tha fuck you be thinkin it should do.
.TP
.B --version
Show
.I setpci
version. I aint talkin' bout chicken n' gravy biatch. This option should be used stand-alone.
.TP
.B --help
Show detailed help on available options. This option should be used stand-alone.
.TP
.B --dumpregs
Show a list of all known PCI registas n' capabilities. Put ya muthafuckin choppers up if ya feel dis! This option should be
used stand-alone.

.SS PCI access options
.PP
Da PCI utilitizzles use tha PCI library ta rap ta PCI devices (see
\fBpcilib\fP(7) fo' details). Yo ass can use tha followin options to
influence its behavior:
.TP
.B -A <method>
Da library supports a variety of methodz ta access tha PCI hardware.
By default, it uses tha straight-up original gangsta access method available yo, but you can use
this option ta override dis decision. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \fB-A help\fP fo' a list of
available methodz n' they descriptions.
.TP
.B -O <param>=<value>
Da behavior of tha library is controlled by nuff muthafuckin named parameters.
This option allows ta set tha value of any of tha parameters. Use \fB-O help\fP
for a list of known parametas n' they default joints.
.TP
.B -H1
Use direct hardware access via Intel configuration mechanizzle 1.
(This be a gangbangin' finger-lickin' dirty-ass shorthand fo' \fB-A intel-conf1\fP.)
.TP
.B -H2
Use direct hardware access via Intel configuration mechanizzle 2.
(This be a gangbangin' finger-lickin' dirty-ass shorthand fo' \fB-A intel-conf2\fP.)
.TP
.B -G
Increase debug level of tha library.

.SH DEVICE SELECTION
.PP
Before each sequence of operations you need ta select which devices you wish that
operation ta affect.
.TP
.B -s [[[[<domain>]:]<bus>]:][<slot>][.[<func>]]
Consider only devices up in tha specified domain (in case yo' machine has nuff muthafuckin host bridges,
they can either share a cold-ass lil common bus number space or each of dem can address a PCI domain
of its own; domains is numbered from 0 ta ffff), bus (0 ta ff), slot (0 ta 1f) n' function (0 ta 7).
Each component of tha thang address can be omitted or set ta "*", both meanin "any value" fo' realz. All numbers are
hexadecimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  E.g., "0:" means all devices on bus 0, "0" means all functionz of thang 0
on any bus, "0.3" selects third function of thang 0 on all buses n' ".4" matches only
the fourth function of each device.
.TP
.B -d [<vendor>]:[<device>]
Select devices wit specified vendor n' thang ID. Both IDz is given in
hexadecimal n' may be omitted or given as "*", both meanin "any value".
.PP
When
.B -s
and
.B -d
are combined, only devices dat match both criteria is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. When multiple
optionz of tha same kind is specified, tha rightmost one overrides tha others.

.SH OPERATIONS
.PP
There is two kindz of operations: readz n' writes. To read a register, just specify
its name. Writes have tha form
.IR name = value , value ...\&
where each
.I value
is either a hexadecimal number or a expression of type
.IR data : mask
where both
.I data
and
.I mask
are hexadecimal numbers. In tha latta case, only tha bits correspondin ta binary
ones up in tha \fImask\fP is chizzled (technically, dis be a read-modify-write operation).

.PP
There is nuff muthafuckin ways how tha fuck ta identitizzle a register:
.IP \(bu
Tell its address up in hexadecimal.
.IP \(bu
Spell its name. Right back up in yo muthafuckin ass. Setpci knows tha namez of all registas up in tha standard configuration
headers. Use `\fBsetpci --dumpregs\fP' ta git tha complete list.
See PCI bus justifications fo' tha precise meanin of these registas or consult
\fBheader.h\fP or \fB/usr/include/pci/pci.h\fP fo' a funky-ass brief sketch.
.IP \(bu
If tha regista be a part of a PCI capability, you can specify tha name of the
capabilitizzle ta git tha address of its first regista n' shit. Right back up in yo muthafuckin ass. See tha names startin with
`CAP_' or `ECAP_' up in tha \fB--dumpregs\fP output.
.IP \(bu
If tha name of tha capabilitizzle aint known ta \fBsetpci\fP, you can refer ta it
by its number up in tha form CAP\fBid\fP or ECAP\fBid\fP, where \fBid\fP is tha numeric
identifier of tha capabilitizzle up in hexadecimal.
.IP \(bu
Each of tha previous formats can be followed by \fB+offset\fP ta add a offset
(a hex number) ta tha address. This feature can be useful fo' addressin of registers
livin within a cold-ass lil capability, or ta modify partz of standard registers.
.IP \(bu
Finally, you should append a width specifier \fB.B\fP, \fB.W\fP, or \fB.L\fP ta chizzle
how nuff bytes (1, 2, or 4) should be transferred. Y'all KNOW dat shit, muthafucka! Da width can be omitted if yo ass is
referrin ta a regista by its name n' tha width of tha regista is well known.

.PP
All namez of registas n' width specifiers is case-insensitive.

.SH
EXAMPLES

.IP COMMAND
asks fo' tha word-sized command register.
.IP 4.w
is a numeric address of tha same register.
.IP COMMAND.l
asks fo' a 32-bit word startin all up in tha location of tha command register,
i.e., tha command n' status registas together.
.IP VENDOR_ID+1.b
specifies tha upper byte of tha vendor ID regista (remember, PCI is lil-endian).
.IP CAP_PM+2.w
correspondz ta tha second word of tha juice pimpment capability.
.IP ECAP108.l
asks fo' tha straight-up original gangsta 32-bit word of tha extended capabilitizzle wit ID 0x108.

.SH SEE ALSO
.BR lspci (8),
.BR pcilib (7)

.SH AUTHOR
Da PCI Utilitizzles is maintained by Martin Mares <mj@ucw.cz>.
