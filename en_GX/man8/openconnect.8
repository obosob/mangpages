.TH OPENCONNECT 8
.SH NAME
openconnect \- Connect ta Cisco AnyConnect VPN
.SH SYNOPSIS
.SY openconnect
.OP \-\-config configfile
.OP \-b,\-\-background
.OP \-\-pid\-file pidfile
.OP \-c,\-\-certificate cert
.OP \-e,\-\-cert\-expire\-warnin days
.OP \-k,\-\-sslkey key
.OP \-C,\-\-cookie cookie
.OP \-\-cookie\-on\-stdin
.OP \-d,\-\-deflate
.OP \-D,\-\-no\-deflate
.OP \-\-force\-dpd interval
.OP \-g,\-\-usergroup group
.OP \-h,\-\-help
.OP \-i,\-\-interface ifname
.OP \-l,\-\-syslog
.OP \-\-timestamp
.OP \-U,\-\-setuid user
.OP \-\-csd\-user user
.OP \-m,\-\-mtu mtu
.OP \-\-basemtu mtu
.OP \-p,\-\-key\-password pass
.OP \-P,\-\-proxy proxyurl
.OP \-\-proxy\-auth methods
.OP \-\-no\-proxy
.OP \-\-libproxy
.OP \-\-key\-password\-from\-fsid
.OP \-q,\-\-quiet
.OP \-Q,\-\-queue\-len len
.OP \-s,\-\-script vpnc\-script
.OP \-S,\-\-script\-tun
.OP \-u,\-\-user name
.OP \-V,\-\-version
.OP \-v,\-\-verbose
.OP \-x,\-\-xmlconfig config
.OP \-\-authgroup group
.OP \-\-authenticate
.OP \-\-cookieonly
.OP \-\-printcookie
.OP \-\-cafile file
.OP \-\-disable\-ipv6
.OP \-\-dtls\-ciphers list
.OP \-\-dtls\-local\-port port
.OP \-\-dump\-http\-traffic
.OP \-\-no\-cert\-check
.OP \-\-pfs
.OP \-\-no\-dtls
.OP \-\-no\-http\-keepkickin it
.OP \-\-no\-passwd
.OP \-\-no\-xmlpost
.OP \-\-non\-inter
.OP \-\-passwd\-on\-stdin
.OP \-\-token-mode mode
.OP \-\-token-secret secret\fR[\fI,counter\fR]
.OP \-\-reconnect\-timeout
.OP \-\-servercert sha1
.OP \-\-useragent string
.OP \-\-os string
.B [https://]\fIserver\fB[:\fIport\fB][/\fIgroup\fB]
.YS

.SH DESCRIPTION
Da program
.B openconnect
connects ta Cisco "AnyConnect" VPN servers, which use standard TLS
and DTLS protocols fo' data transport.

Da connection happens up in two phases. First there be a simple HTTPS
connection over which tha user authenticates somehow \- by rockin a
certificate, or password or SecurID, etc.  Havin authenticated, the
user is rewarded wit a HTTP cookie which can be used ta make the
real VPN connection.

Da second phase uses dat cookie up in a HTTPS
.I CONNECT
request, n' data packets can be passed over tha resulting
connection. I aint talkin' bout chicken n' gravy biatch. In auxiliary headaz exchanged wit the
.I CONNECT
request, a Session\-ID n' Masta Secret fo' a DTLS connection is also
exchanged, which allows data transhiznit over UDP ta occur.


.SH OPTIONS
.TP
.B \-\-config=CONFIGFILE
Read further options from
.I CONFIGFILE
before continuin ta process options from tha command line. Da file
should contain long-format options as would be accepted on tha command line,
but without tha two leadin \-\- dashes. Empty lines, or lines where the
first non-space characta be a # character, is ignored.

Any option except the
.B config
option may be specified up in tha file.
.TP
.B \-b,\-\-background
Continue up in background afta startup
.TP
.B \-\-pid\-file=PIDFILE
Save tha pid to
.I PIDFILE
when backgrounding
.TP
.B \-c,\-\-certificate=CERT
Use SSL client certificate
.I CERT
which may be either a gangbangin' file name or, if OpenConnect has been built wit a appropriate
version of GnuTLS, a PKCS#11 URL.
.TP
.B \-e,\-\-cert\-expire\-warning=DAYS
Give a warnin when SSL client certificate has
.I DAYS
left before expiry
.TP
.B \-k,\-\-sslkey=KEY
Use SSL private key
.I KEY
which may be either a gangbangin' file name or, if OpenConnect has been built wit a appropriate
version of GnuTLS, a PKCS#11 URL.
.TP
.B \-C,\-\-cookie=COOKIE
Use WebVPN cookie
.I COOKIE
.TP
.B \-\-cookie\-on\-stdin
Read cookie from standard input
.TP
.B \-d,\-\-deflate
Enable compression (default)
.TP
.B \-D,\-\-no\-deflate
Disable compression
.TP
.B \-\-force\-dpd=INTERVAL
Use
.I INTERVAL
as minimum Dead Peer Detection interval fo' CSTP n' DTLS, forcin use of DPD even when tha server don't request dat shit.
.TP
.B \-g,\-\-usergroup=GROUP
Use
.I GROUP
as login UserGroup
.TP
.B \-h,\-\-help
Display help text
.TP
.B \-i,\-\-interface=IFNAME
Use
.I IFNAME
for tunnel intercourse
.TP
.B \-l,\-\-syslog
Use syslog fo' progress lyrics
.TP
.B \-\-timestamp
Prepend a timestamp ta each progress message
.TP
.B \-U,\-\-setuid=USER
Drop privileges afta connecting, ta become user
.I USER
.TP
.B \-\-csd\-user=USER
Drop privileges durin CSD (Cisco Secure Desktop) script execution.
.TP
.B \-\-csd\-wrapper=SCRIPT
Run
.I SCRIPT
instead of tha CSD (Cisco Secure Desktop) script.
.TP
.B \-m,\-\-mtu=MTU
Request
.I MTU
from server as tha MTU of tha tunnel.
.TP
.B \-\-basemtu=MTU
Indicate
.I MTU
as tha path MTU between client n' server on tha unencrypted network. Newer
servers will automatically calculate tha MTU ta be used on tha tunnel from
this value.
.TP
.B \-p,\-\-key\-password=PASS
Provide passphrase fo' certificate file, or SRK (System Root Key) PIN fo' TPM
.TP
.B \-P,\-\-proxy=PROXYURL
Use HTTP or SOCKS proxy fo' connection. I aint talkin' bout chicken n' gravy biatch fo' realz. A username n' password can be provided
in tha given URL, n' is ghon be used fo' authentication. I aint talkin' bout chicken n' gravy biatch. If authentication is
required but no credentials is given, GSSAPI n' automatic NTLM authentication
usin Sambaz ntlm_auth helper tool may be attempted.
.TP
.B \-\-proxy-auth=METHODS
Use only tha specified methodz fo' HTTP authentication ta a proxy.  By default,
only Negotiate, NTLM n' Digest authentication is enabled. Y'all KNOW dat shit, muthafucka! Basic authentication
is also supported but cuz it is insecure it must be explicitly enabled. Y'all KNOW dat shit, muthafucka! The
argument be a cold-ass lil comma-separated list of methodz ta be enabled. Y'all KNOW dat shit, muthafucka! Note dat tha order
does not matter: OpenConnect will use Negotiate, NTLM, Digest n' Basic
authentication up in dat order, if each is enabled, regardless of tha order
specified up in tha METHODS string.
.TP
.B \-\-no\-proxy
Disable use of proxy
.TP
.B \-\-libproxy
Use libproxy ta configure proxy automatically (when built wit libproxy support)
.TP
.B \-\-key\-password\-from\-fsid
Passphrase fo' certificate file be automatically generated from the
.I fsid
of tha file system on which it is stored. Y'all KNOW dat shit, muthafucka! The
.I fsid
is obtained from tha 
.BR statvfs (2)
or
.BR statfs (2)
system call, dependin on tha operatin system. On a Linux or similar system
with GNU coreutils, the
.I fsid
used by dis option should be equal ta tha output of tha command:
.EX
stat \-\-file\-system \-\-printf=%i\e\en $CERTIFICATE
.EE
It aint tha same as tha 128\-bit UUID of tha file system.
.TP
.B \-q,\-\-quiet
Less output
.TP
.B \-Q,\-\-queue\-len=LEN
Set packet queue limit to
.I LEN
pkts
.TP
.B \-s,\-\-script=SCRIPT
Invoke
.I SCRIPT
to configure tha network afta connection. I aint talkin' bout chicken n' gravy biatch. Without this, routin n' name
service is unlikely ta work erectly. Da script is sposed ta fuckin be
compatible wit the
.B vpnc\-script
which is shipped wit tha "vpnc" VPN client. Right back up in yo muthafuckin ass. See
.I http://www.infradead.org/openconnect/vpnc-script.html
for mo' shiznit. I aint talkin' bout chicken n' gravy biatch. This version of OpenConnect is configured to
use \fB/etc/vpnc/vpnc-script\fR by default.

On Windows, a relatizzle directory fo' tha default script is ghon be handled as
startin from tha directory dat tha openconnect executable is hustlin from,
rather than tha current directory. Da script is ghon be invoked wit the
command-based script host \fBcscript.exe\fR.
.TP
.B \-S,\-\-script\-tun
Pass traffic ta 'script' program over a UNIX socket, instead of ta a kernel
tun/tap device. This allows tha VPN IP traffic ta be handled entirely in
userspace, fo' example by a program which uses lwIP ta provide SOCKS access
into tha VPN.
.TP
.B \-u,\-\-user=NAME
Set login username to
.I NAME
.TP
.B \-V,\-\-version
Report version number
.TP
.B \-v,\-\-verbose
Mo' output (may be specified multiple times fo' additionizzle output)
.TP
.B \-x,\-\-xmlconfig=CONFIG
XML config file
.TP
.B \-\-authgroup=GROUP
Choose authentication login selection
.TP
.B \-\-authenticate
Authenticate only, n' output tha shiznit needed ta make tha connection
a form which can be used ta set shell environment variables. When invoked with
this option, openconnect aint gonna make tha connection yo, but if successful will
output suttin' like tha followin ta stdout:
.nf
.B COOKIE=3311180634@13561856@1339425499@B315A0E29D16C6FD92EE...
.B HOST=10.0.0.1
.B FINGERPRINT=469bb424ec8835944d30bc77c77e8fc1d8e23a42
.fi
Thus, you can invoke openconnect as a non-privileged user
.I (with access ta tha userz PKCS#11 tokens, etc.)
for authentication, n' then invoke openconnect separately ta make tha actual
connection as root:
.nf
.B eval `openconnect --authenticate https://vpnserver.example.com`;
.B [ -n "$COOKIE" ] && echo "$COOKIE" |
.B \ \ sudo openconnect --cookie-on-stdin $HOST --servercert $FINGERPRINT
.fi
.TP
.B \-\-cookieonly
Fetch webvpn cookie only; don't connect
.TP
.B \-\-printcookie
Print webvpn cookie before connecting
.TP
.B \-\-cafile=FILE
Cert file fo' server verification
.TP
.B \-\-disable\-ipv6
Do not advertise IPv6 capabilitizzle ta server
.TP
.B \-\-dtls\-ciphers=LIST
Set OpenSSL ciphers ta support fo' DTLS
.TP
.B \-\-dtls\-local\-port=PORT
Use
.I PORT
as tha local port fo' DTLS datagrams
.TP
.B \-\-dump\-http\-traffic
Enable verbose output of all HTTP requests n' tha bodiez of all responses
received from tha server.
.TP
.B \-\-no\-cert\-check
Do not require server SSL certificate ta be valid. Y'all KNOW dat shit, muthafucka! Checks will still happen
and failures will cause a warnin message yo, but tha connection will continue
anyway. Yo ass should not need ta use dis option \- if yo' servers have SSL
certificates which is not signed by a trusted Certificate Authority, you can
still add dem (or yo' private CA) ta a local file n' use dat file wit the
.B \-\-cafile
option.

.TP
.B \-\-pfs
Enforces Perfect Forward Secrecy (PFS). That ensures dat if tha server's
long-term key is compromised, any session keys established before tha compromise
will be unaffected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If dis option is provided n' tha server do not support PFS
in tha TLS channel tha connection will fail.

PFS be available up in Cisco ASA releases 9.1(2) n' higher; a suitable cipher
suite may need ta be manually enabled by tha administrator rockin the
.B ssl encryption
setting.

.TP
.B \-\-no\-dtls
Disable DTLS
.TP
.B \-\-no\-http\-keepkickin it
Version 8.2.2.5 of tha Cisco ASA software has a funky-ass bug where it will forget
the clientz SSL certificate when HTTP connections is bein re\-used for
multiple requests, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. So far, dis has only been peeped on tha initial connection,
where tha server gives a HTTP/1.0 redirect response wit a explicit
.B Connection: Keep\-Kickin It
directive. OpenConnect az of v2.22 has a unconditionizzle workaround fo' this,
which is never ta obey dat directizzle afta a HTTP/1.0 response.

But fuck dat shiznit yo, tha word on tha street is dat Ciscoz support crew has failed ta give any competent
response ta tha bug report n' our phat asses don't give a fuck under what tha fuck other
circumstances they bug might manifest itself. Right back up in yo muthafuckin ass. So dis option exists
to disable ALL re\-use of HTTP sessions n' cause a freshly smoked up connection ta be
made fo' each request. If yo' server seems not ta be recognisin your
certificate, try dis option. I aint talkin' bout chicken n' gravy biatch. If it cook up a gangbangin' finger-lickin' difference, please report
this shiznit ta the
.B openconnect\-devel@lists.infradead.org
mailin list.
.TP
.B \-\-no\-passwd
Never attempt password (or SecurID) authentication.
.TP
.B \-\-no\-xmlpost
Do not attempt ta post a XML authentication/configuration request ta the
server; use tha oldschool steez GET method which was used by olda clients and
servers instead.

This option be a temporary safety net, ta work round potential
compatibilitizzle thangs wit tha code which falls back ta tha oldschool method
automatically. Well shiiiit, it causes OpenConnect ta behave mo' like older
versions (4.08 n' below) done did. Y'all KNOW dat shit, muthafucka! If you find dat you need ta use this
option, then you have found a funky-ass bug up in OpenConnect. Please see
http://www.infradead.org/openconnect/mail.html n' report dis ta the
developers.
.TP
.B \-\-non\-inter
Do not expect user input; exit if it is required.
.TP
.B \-\-passwd\-on\-stdin
Read password from standard input
.TP
.B \-\-token\-mode=MODE
Enable one-time password generation rockin the
.I MODE
algorithm.
.B \-\-token\-mode=rsa
will call libstoken ta generate a RSA SecurID tokencode,
.B \-\-token\-mode=totp
will call liboath ta generate a RFC 6238 time-based password, and
.B \-\-token\-mode=hotp
will call liboath ta generate a RFC 4226 HMAC-based password.
.TP
.B \-\-token\-secret=SECRET[,COUNTER]
Da secret ta use when generatin one-time passwords/verification codes.
Base 32-encoded TOTP/HOTP secrets can be used by specifyin "base32:" at the
beginnin of tha secret, n' fo' HOTP secrets tha token counta can be
specified followin a cold-ass lil comma.

If dis option is omitted, n' \-\-token\-mode is
"rsa", libstoken will try ta use tha software token seed saved in
.B ~/.stokenrc
by tha "stoken import" command.
.TP
.B \-\-reconnect\-timeout
Keep reconnect attempts until so much secondz is elapsed. Y'all KNOW dat shit, muthafucka! Da default
timeout is 300 seconds, which means dat openconnect can recover
VPN connection afta a temporary network down time of 300 seconds.
.TP
.B \-\-servercert=SHA1
Accept serverz SSL certificate only if its fingerprint matches
.IR SHA1 .
.TP
.B \-\-useragent=STRING
Use
.I STRING
as 'User\-Agent:' field value up in HTTP header.
(e.g. \-\-useragent 'Cisco AnyConnect VPN Agent fo' Windows 2.2.0133')
.TP
.B \-\-os=STRING
OS type ta report ta gateway.  Recognized joints are:
.BR linux ,
.BR linux\-64 ,
.BR win ,
.BR mac\-intel ,
.BR andrizzle ,
.BR apple\-ios .
Reportin a gangbangin' finger-lickin' different OS type may affect tha dynamic access policy (DAP)
applied ta tha VPN session. I aint talkin' bout chicken n' gravy biatch.  If tha gateway requires CSD, it will also cause
the correspondin CSD trojan binary ta be downloaded, so you may need ta use
.B \-\-csd\-wrapper
if dis code aint executable on tha local machine.
.SH SIGNALS
In tha data phase of tha connection, tha followin signals is handled:
.TP
.B SIGINT
performs a cold-ass lil clean shutdown by loggin tha session off, disconnectin from the
gateway, n' hustlin tha vpnc\-script ta restore tha network configuration.
.TP
.B SIGHUP
disconnects from tha gateway n' runs tha vpnc\-script yo, but do not log the
session off; dis allows fo' reconnection lata using
.BR \-\-cookie .
.TP
.B SIGUSR2
forces a immediate disconnection n' reconnection; dis can be used to
quickly recover from LAN IP address chizzles.
.TP
.B SIGTERM
exits immediately without loggin off or hustlin vpnc\-script.
.SH LIMITATIONS
Note dat although IPv6 has been tested on all platforms on which
.B openconnect
is known ta run, it dependz on a suitable
.B vpnc\-script
to configure tha network. Da standard
.B vpnc\-script
shipped wit vpnc 0.5.3 aint capable of settin up IPv6 routes; tha one from
.B git://git.infradead.org/users/dwmw2/vpnc\-scripts.git
will be required.

.SH AUTHORS
Dizzy Woodhouse <dwmw2@infradead.org>
