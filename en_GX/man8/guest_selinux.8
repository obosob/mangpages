.TH  "guest_selinux"  "8"  "guest" "mgrepl@redhat.com" "guest SELinux Policy documentation"
.SH "NAME"
guest_u \- \fBLeast privledge terminal user role.\fP - Securitizzle Enhanced Linux Policy

.SH DESCRIPTION

\fBguest_u\fP be a SELinux User defined up in tha SELinux
policy. Right back up in yo muthafuckin ass. SELinux playas have default roles, \fBguest_r\fP.  The
default role has a thugged-out default type, \fBguest_t\fP, associated wit dat shit.

Da SELinux user will probably login ta a system wit a cold-ass lil context dat looks like:

.B guest_u:guest_r:guest_t:s0

Linux playas is automatically assigned a SELinux playas at login.
Login programs use tha SELinux User ta assign initial context ta tha userz shell.

SELinux policy uses tha context ta control tha userz access.

By default all playas is assigned ta tha SELinux user via tha \fB__default__\fP flag

On Targeted policy systems tha \fB__default__\fP user be assigned ta tha \fBunconfined_u\fP SELinux user.

Yo ass can list all Linux User ta SELinux user mappin using:

.B semanage login -l

If you wanted ta chizzle tha default user mappin ta use tha guest_u user, you would execute:

.B semanage login -m -s guest_u __default__


If you wanna map tha one Linux user (joe) ta tha SELinux user guest, you would execute:

.B $ semanage login -a -s guest_u joe


.SH USER DESCRIPTION

Da SELinux user guest_u is defined up in policy as a unprivileged user n' shit. Right back up in yo muthafuckin ass. SELinux prevents unprivileged playas from bustin administration tasks without transitionin ta a gangbangin' finger-lickin' different role.

.SH SUDO

.SH X WINDOWS LOGIN

Da SELinux user guest_u aint able ta X Windows login.

.SH NETWORK

.TP
Da SELinux user guest_u be able ta listen on tha followin tcp ports.

.B 32768-61000

.B all ports wit up defined types

.TP
Da SELinux user guest_u be able ta connect ta tha followin tcp ports.

.B 8955

.B 53

.B 32768-61000

.B 88,750,4444

.B 111

.B 9080

.B all ports < 1024

.B all ports wit up defined types

.B 389,636,3268,7389

.TP
Da SELinux user guest_u be able ta listen on tha followin udp ports.

.B 32768-61000

.B all ports wit up defined types

.TP
Da SELinux user guest_u be able ta connect ta tha followin tcp ports.

.B 8955

.B 53

.B 32768-61000

.B 88,750,4444

.B 111

.B 9080

.B all ports < 1024

.B all ports wit up defined types

.B 389,636,3268,7389

.SH BOOLEANS
SELinux policy is customizable based on least access required. Y'all KNOW dat shit, muthafucka!  hommie policy is mad flexible n' has nuff muthafuckin booleans dat allow you ta manipulate tha policy n' run hommie wit tha tightest access possible.


.PP
If you wanna allow playas ta resolve user passwd entries directly from ldap rather then rockin a sssd server, you must turn on tha authlogin_nsswitch_use_ldap boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P authlogin_nsswitch_use_ldap 1

.EE

.PP
If you wanna deny user domains applications ta map a memory region as both executable n' writable, dis is fucked up n' tha executable should be reported up in bugzilla, you must turn on tha deny_execmem boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P deny_execmem 1

.EE

.PP
If you wanna deny any process from ptracin or debuggin any other processes, you must turn on tha deny_ptrace boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P deny_ptrace 1

.EE

.PP
If you wanna allow all domains ta use other domains file descriptors, you must turn on tha domain_fd_use boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P domain_fd_use 1

.EE

.PP
If you wanna allow all domains ta have tha kernel load modules, you must turn on tha domain_kernel_load_modulez boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P domain_kernel_load_modulez 1

.EE

.PP
If you wanna allow all domains ta execute up in fips_mode, you must turn on tha fips_mode boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P fips_mode 1

.EE

.PP
If you wanna enable readin of urandom fo' all domains, you must turn on tha global_ssp boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P global_ssp 1

.EE

.PP
If you wanna allow httpd cgi support, you must turn on tha httpd_enable_cgi boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P httpd_enable_cgi 1

.EE

.PP
If you wanna unify HTTPD handlin of all content files, you must turn on tha httpd_unified boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P httpd_unified 1

.EE

.PP
If you wanna allow confined applications ta run wit kerberos, you must turn on tha kerberos_enabled boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P kerberos_enabled 1

.EE

.PP
If you wanna allow loggin up in n' rockin tha system from /dev/console, you must turn on tha login_console_enabled boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P login_console_enabled 1

.EE

.PP
If you wanna allow system ta run wit NIS, you must turn on tha nis_enabled boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P nis_enabled 1

.EE

.PP
If you wanna allow confined applications ta use nscd shared memory, you must turn on tha nscd_use_shm boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P nscd_use_shm 1

.EE

.PP
If you wanna disallow programs, like fuckin newrole, from transitionin ta administratizzle user domains, you must turn on tha secure_mode boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P secure_mode 1

.EE

.PP
If you wanna allow unconfined executablez ta make they stack executable.  This should never, eva be necessary. Probably indicates a funky-ass badly coded executable yo, but could indicate a attack. This executable should be reported up in bugzilla, you must turn on tha selinuxuser_execstack boolean. I aint talkin' bout chicken n' gravy biatch. Enabled by default.

.EX
.B setsebool -P selinuxuser_execstack 1

.EE

.PP
If you wanna allow user  ta use ssh chroot environment, you must turn on tha selinuxuser_use_ssh_chroot boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P selinuxuser_use_ssh_chroot 1

.EE

.PP
If you wanna allow ssh logins as sysadm_r:sysadm_t, you must turn on tha ssh_sysadm_login boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P ssh_sysadm_login 1

.EE

.PP
If you wanna support NFS home directories, you must turn on tha use_nfs_home_dirs boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P use_nfs_home_dirs 1

.EE

.PP
If you wanna support SAMBA home directories, you must turn on tha use_samba_home_dirs boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P use_samba_home_dirs 1

.EE

.PP
If you wanna allow tha graphical login program ta login directly as sysadm_r:sysadm_t, you must turn on tha xdm_sysadm_login boolean. I aint talkin' bout chicken n' gravy biatch. Disabled by default.

.EX
.B setsebool -P xdm_sysadm_login 1

.EE

.SH HOME_EXEC

Da SELinux user guest_u be able execute home content files.

.SH TRANSITIONS

Three thangs can happen when guest_t attempts ta execute a program.

\fB1.\fP SELinux Policy can deny guest_t from executin tha program.

.TP

\fB2.\fP SELinux Policy can allow guest_t ta execute tha program up in tha current user type.

Execute tha followin ta peep tha types dat tha SELinux user guest_t can execute without transitioning:

.B search -A -s guest_t -c file -p execute_no_trans

.TP

\fB3.\fP SELinux can allow guest_t ta execute tha program n' transizzle ta a freshly smoked up type.

Execute tha followin ta peep tha types dat tha SELinux user guest_t can execute n' transition:

.B $ search -A -s guest_t -c process -p transition


.SH "MANAGED FILES"

Da SELinux process type guest_t can manage filez labeled wit tha followin file types.  Da paths listed is tha default paths fo' these file types.  Note tha processes UID still need ta have DAC permissions.

.br
.B anon_inodefs_t


.br
.B auth_cache_t

	/var/cache/coolkey(/.*)?
.br

.br
.B cifs_t


.br
.B httpd_user_content_t

	/home/[^/]*/((www)|(web)|(public_html))(/.+)?
.br

.br
.B httpd_user_htaccess_t

	/home/[^/]*/((www)|(web)|(public_html))(/.*)?/\.htaccess
.br

.br
.B httpd_user_ra_content_t

	/home/[^/]*/((www)|(web)|(public_html))(/.*)?/logs(/.*)?
.br

.br
.B httpd_user_rw_content_t


.br
.B httpd_user_script_exec_t

	/home/[^/]*/((www)|(web)|(public_html))/cgi-bin(/.+)?
.br

.br
.B nfs_t


.br
.B user_home_type

	all user home files
.br

.br
.B user_tmp_type

	all user tmp files
.br

.br
.B user_tmpfs_type

	all user content up in tmpfs file systems
.br

.SH "COMMANDS"
.B semanage fcontext
can also be used ta manipulate default file context mappings.
.PP
.B semanage permissive
can also be used ta manipulate whether or not a process type is permissive.
.PP
.B semanage module
can also be used ta enable/disable/install/remove policy modules.

.B semanage boolean
can also be used ta manipulate tha booleans

.PP
.B system-config-selinux
is a GUI tool available ta customize SELinux policy settings.

.SH AUTHOR
This manual page was auto-generated using
.B "sepolicy manpage".

.SH "SEE ALSO"
selinux(8), guest(8), semanage(8), restorecon(8), chcon(1), sepolicy(8)
, setsebool(8)</textarea>

<div id="button">
<br/>
<input type="submit" name="translate" value="Tranzizzle Dis Shiznit" />
</div>

</form> 

</div>

<div id="space3"></div>
<div id="disclaimer"><h2>Use this to translate your words into gangsta</h2>
<h2>Click <a href="more.html">here</a> to learn more about Gizoogle</h2></div>

</body>
</html>
