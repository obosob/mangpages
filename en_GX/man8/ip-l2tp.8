.TH IP\-L2TP 8 "19 Apr 2012" "iproute2" "Linux"
.SH "NAME"
ip-l2tp - L2TPv3 static unmanaged tunnel configuration
.SH "SYNOPSIS"
.sp
.ad l
.in +8
.ti -8
.B ip
.RI "[ " OPTIONS " ]"
.B l2tp
.RI " { " COMMAND " | "
.BR help " }"
.sp
.ti -8
.BR "ip l2tp add tunnel"
.br
.B remote
.RI "[ " ADDR " ]"
.B local
.RI "[ " ADDR " ]"
.br
.B tunnel_id
.IR ID
.B peer_tunnel_id
.IR ID
.br
.RB "[ " encap " { " ip " | " udp " } ]"
.br
.RB "[ " udp_sport
.IR PORT
.RB " ] [ " udp_dport
.IR PORT
.RB " ]"
.br
.ti -8
.BR "ip l2tp add session"
.RB "[ " name
.IR NAME
.RB " ]"
.br
.B tunnel_id
.IR ID
.B session_id
.IR ID
.B peer_session_id
.IR ID
.br
.RB "[ " cookie
.IR HEXSTR
.RB " ] [ " peer_cookie
.IR HEXSTR
.RB " ]"
.br
.RB "[ " l2spec_type " { " none " | " default " } ]"
.br
.RB "[ " offset
.IR OFFSET
.RB " ] [ " peer_offset
.IR OFFSET
.RB " ]"
.br
.ti -8
.BR "ip l2tp del tunnel"
.B tunnel_id
.IR ID
.br
.ti -8
.BR "ip l2tp del session"
.B tunnel_id
.IR ID
.B session_id
.IR ID
.br
.ti -8
.BR "ip l2tp show tunnel"
.B "[" tunnel_id
.IR ID
.B "]"
.br
.ti -8
.BR "ip l2tp show session"
.B "[" tunnel_id
.IR ID
.B "] [" session_id
.IR ID
.B "]"
.br
.ti -8
.IR NAME " := "
.IR STRING
.ti -8
.IR ADDR " := { " IP_ADDRESS " }"
.ti -8
.IR PORT " := { " NUMBER " }"
.ti -8
.IR ID " := { " NUMBER " }"
.ti -8
.ti -8
.IR HEXSTR " := { 8 or 16 hex digits (4 / 8 bytes) }"
.SH DESCRIPTION
The
.B ip l2tp
commandz is used ta establish static, or so-called
.I unmanaged
L2TPv3 ethernet tunnels. For unmanaged tunnels, there is no L2TP
control protocol so no userspace daemon is required - tunnels are
manually pimped by issuin commandz at a local system n' at a remote
peer.
.PP
L2TPv3 is suitable fo' Layer-2 tunneling. Right back up in yo muthafuckin ass. Static tunnels is useful
to establish network links across IP networks when tha tunnels are
fixed. Y'all KNOW dat shit, muthafucka! L2TPv3 tunnels can carry data of mo' than one session. I aint talkin' bout chicken n' gravy biatch. Each
session is identified by a session_id n' its parent tunnel's
tunnel_id. Y'all KNOW dat shit, muthafucka! A tunnel must be pimped before a session can be pimped in
the tunnel.
.PP
When bustin a L2TP tunnel, tha IP address of tha remote peer is
specified, which can be either a IPv4 or IPv6 address. Da local IP
address ta be used ta reach tha peer must also be specified. Y'all KNOW dat shit, muthafucka! This is
the address on which tha local system will listen fo' n' accept
received L2TP data packets from tha peer.
.PP
L2TPv3 defines two packet encapsulation formats: UDP or IP. UDP
encapsulation is most common. I aint talkin' bout chicken n' gravy biatch. IP encapsulation uses a thugged-out dedicated IP
protocol value ta carry L2TP data without tha overhead of UDP. Use IP
encapsulation only when there be no NAT devices or firewalls up in the
network path.
.PP
When a L2TPv3 ethernet session is pimped, a virtual network
interface is pimped fo' tha session, which must then be configured
and brought up, just like any other network intercourse. When data is
passed all up in tha intercourse, it is carried over tha L2TP tunnel to
the peer n' shit. By configurin tha systemz routin tablez or addin the
interface ta a funky-ass bridge, tha L2TP intercourse is like a virtual wire
(pseudowire) connected ta tha peer.
.PP
Establishin a unmanaged L2TPv3 ethernet pseudowire involves manually
bustin L2TP contexts on tha local system n' all up in tha peer n' shit. Parameters
used at each joint must correspond or no data is ghon be passed. Y'all KNOW dat shit, muthafucka! No
consistency checks is possible since there is no control protocol
used ta establish unmanaged L2TP tunnels. Once tha virtual network
interface of a given L2TP session is configured n' enabled, data can
be transmitted, even if tha peer aint yet configured. Y'all KNOW dat shit, muthafucka! If tha peer
aint configured, tha L2TP data packets is ghon be discarded by
the peer.
.PP
To establish a unmanaged L2TP tunnel, use
.B l2tp add tunnel
and
.B l2tp add session
commandz busted lyrics bout up in dis document. Then configure n' enable the
tunnelz virtual network intercourse, as required.
.PP
Note dat unmanaged tunnels carry only ethernet frames. If you need to
carry PPP traffic (L2TPv2) or yo' peer don't support unmanaged
L2TPv3 tunnels, yo big-ass booty is ghon need a L2TP server which implements tha L2TP
control protocol. Da L2TP control protocol allows dynamic L2TP
tunnels n' sessions ta be established n' serves up fo' detectin and
actin upon network failures.
.SS ip l2tp add tunnel - add a freshly smoked up tunnel
.TP
.BI name " NAME "
sets tha session network intercourse name. Default is l2tpethN.
.TP
.BI tunnel_id " ID"
set tha tunnel id, which be a 32-bit integer value. Uniquely
identifies tha tunnel. Da value used must match tha peer_tunnel_id
value bein used all up in tha peer.
.TP
.BI peer_tunnel_id " ID"
set tha peer tunnel id, which be a 32-bit integer value assigned to
the tunnel by tha peer n' shit. Da value used must match tha tunnel_id value
bein used all up in tha peer.
.TP
.BI remote " ADDR"
set tha IP address of tha remote peer n' shit. May be specified as a IPv4
address or a IPv6 address.
.TP
.BI local " ADDR"
set tha IP address of tha local intercourse ta be used fo' the
tunnel. This address must be tha address of a local intercourse. May be
specified as a IPv4 address or a IPv6 address.
.TP
.BI encap " ENCAP"
set tha encapsulation type of tha tunnel.
.br
Valid joints fo' encapsulation are:
.BR udp ", " ip "."
.TP
.BI udp_shiznit " PORT"
set tha UDP source port ta be used fo' tha tunnel. Must be present
when udp encapsulation is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Ignored when ip encapsulation is
selected.
.TP
.BI udp_dport " PORT"
set tha UDP destination port ta be used fo' tha tunnel. Must be
present when udp encapsulation is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Ignored when ip
encapsulation is selected.
.SS ip l2tp del tunnel - destroy a tunnel
.TP
.BI tunnel_id " ID"
set tha tunnel id of tha tunnel ta be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. All sessions within the
tunnel must be deleted first.
.SS ip l2tp show tunnel - show shiznit bout tunnels
.TP
.BI tunnel_id " ID"
set tha tunnel id of tha tunnel ta be shown. I aint talkin' bout chicken n' gravy biatch. If not specified,
information bout all tunnels is printed.
.SS ip l2tp add session - add a freshly smoked up session ta a tunnel
.TP
.BI name " NAME "
sets tha session network intercourse name. Default is l2tpethN.
.TP
.BI tunnel_id " ID"
set tha tunnel id, which be a 32-bit integer value. Uniquely
identifies tha tunnel tha fuck into which tha session is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. The
tunnel must already exist.
.TP
.BI session_id " ID"
set tha session id, which be a 32-bit integer value. Uniquely
identifies tha session bein pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da value used must match the
peer_session_id value bein used all up in tha peer.
.TP
.BI peer_session_id " ID"
set tha peer session id, which be a 32-bit integer value assigned to
the session by tha peer n' shit. Da value used must match tha session_id
value bein used all up in tha peer.
.TP
.BI cookie " HEXSTR"
sets a optionizzle cookie value ta be assigned ta tha session. I aint talkin' bout chicken n' gravy biatch. This be a
4 or 8 byte value, specified as 8 or 16 hex digits,
e.g. 014d3636deadbeef. Da value must match tha peer_cookie value set
at tha peer n' shit. Da cookie value is carried up in L2TP data packets n' is
checked fo' expected value all up in tha peer n' shit. Default is ta use no cookie.
.TP
.BI peer_cookie " HEXSTR"
sets a optionizzle peer cookie value ta be assigned ta tha session. I aint talkin' bout chicken n' gravy biatch. This
is a 4 or 8 byte value, specified as 8 or 16 hex digits,
e.g. 014d3636deadbeef. Da value must match tha cookie value set at
the peer n' shit. Well shiiiit, it  drops some lyrics ta tha local system what tha fuck cookie value ta expect to
find up in received L2TP packets, n' you can put dat on yo' toast. Default is ta use no cookie.
.TP
.BI l2spec_type " L2SPECTYPE"
set tha layer2specific header type of tha session.
.br
Valid joints are:
.BR none ", " udp "."
.TP
.BI offset " OFFSET"
sets tha byte offset from tha L2TP header where user data starts in
transmitted L2TP data packets, n' you can put dat on yo' toast. This is hardly eva used. Y'all KNOW dat shit, muthafucka! If set, the
value must match tha peer_offset value used all up in tha peer n' shit. Default is 0.
.TP
.BI peer_offset " OFFSET"
sets tha byte offset from tha L2TP header where user data starts in
received L2TP data packets, n' you can put dat on yo' toast. This is hardly eva used. Y'all KNOW dat shit, muthafucka! If set, the
value must match tha offset value used all up in tha peer n' shit. Default is 0.
.SS ip l2tp del session - destroy a session
.TP
.BI tunnel_id " ID"
set tha tunnel id up in which tha session ta be deleted is located.
.TP
.BI session_id " ID"
set tha session id of tha session ta be deleted.
.SS ip l2tp show session - show shiznit bout sessions
.TP
.BI tunnel_id " ID"
set tha tunnel id of tha session(s) ta be shown. I aint talkin' bout chicken n' gravy biatch. If not specified,
information bout sessions up in all tunnels is printed.
.TP
.BI session_id " ID"
set tha session id of tha session ta be shown. I aint talkin' bout chicken n' gravy biatch. If not specified,
information bout all sessions is printed.
.SH EXAMPLES
.PP
.SS Setup L2TP tunnels n' sessions
.nf
site-A:# ip l2tp add tunnel tunnel_id 3000 peer_tunnel_id 4000 \\
           encap udp local 1.2.3.4 remote 5.6.7.8 \\
           udp_shiznit 5000 udp_dport 6000
site-A:# ip l2tp add session tunnel_id 3000 session_id 1000 \\
           peer_session_id 2000

site-B:# ip l2tp add tunnel tunnel_id 4000 peer_tunnel_id 3000 \\
           encap udp local 5.6.7.8 remote 1.2.3.4 \\
           udp_shiznit 6000 udp_dport 5000
site-B:# ip l2tp add session tunnel_id 4000 session_id 2000 \\
           peer_session_id 1000

site-A:# ip link set l2tpeth0 up mtu 1488

site-B:# ip link set l2tpeth0 up mtu 1488
.fi
.PP
Notice dat tha IP addresses, UDP ports n' tunnel / session idz are
matched n' reversed at each crib.
.SS Configure as IP intercourses
Da two intercourses can be configured wit IP addresses if only IP data
is ta be carried. Y'all KNOW dat shit, muthafucka! This is like tha simplest configuration.
.PP
.nf
site-A:# ip addr add 10.42.1.1 peer 10.42.1.2 dev l2tpeth0

site-B:# ip addr add 10.42.1.2 peer 10.42.1.1 dev l2tpeth0

site-A:# pin 10.42.1.2
.fi
.PP
Now tha link should be usable fo' realz. Add static routes as needed ta have
data busted over tha freshly smoked up link.
.PP
.SS Configure as bridged intercourses
To carry non-IP data, tha L2TP network intercourse be added ta a funky-ass bridge
instead of bein assigned its own IP address, rockin standard Linux
utilities. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. Since raw ethernet frames is then carried inside the
tunnel, tha MTU of tha L2TP intercourses must be set ta allow space for
those headers.
.PP
.nf
site-A:# ip link set l2tpeth0 up mtu 1446
site-A:# ip link add br0 type bridge
site-A:# ip link set l2tpeth0 masta br0
site-A:# ip link set eth0 masta br0
site-A:# ip link set br0 up
.fi
.PP
If yo ass is rockin VLANs, setup a funky-ass bridge per VLAN n' bridge each VLAN
over a separate L2TP session. I aint talkin' bout chicken n' gravy biatch. For example, ta bridge VLAN ID 5 on eth1
over a L2TP pseudowire:
.PP
.nf
site-A:# ip link set l2tpeth0 up mtu 1446
site-A:# ip link add brvlan5 type bridge
site-A:# ip link set l2tpeth0.5 masta brvlan5
site-A:# ip link set eth1.5 masta brvlan5
site-A:# ip link set brvlan5 up
.fi
.PP
Addin tha L2TP intercourse ta a funky-ass bridge causes tha bridge ta forward
traffic over tha L2TP pseudowire just like it forwardz over any other
interface. Da bridge learns MAC addressez of hosts attached ta each
interface n' intelligently forwardz frames from one bridge port to
another n' shit. IP addresses is not assigned ta tha l2tpethN intercourses. If
the bridge is erectly configured at both sidez of tha L2TP
pseudowire, it should be possible ta reach hosts up in tha peerz bridged
network.
.PP
When raw ethernet frames is bridged across a L2TP tunnel, large
frames may be fragmented n' forwarded as individual IP fragments to
the recipient, dependin on tha MTU of tha physical intercourse used by
the tunnel. When tha ethernet frames carry protocols which are
reassembled by tha recipient, like IP, dis aint a problem yo. However,
such fragmentation can cause problems fo' protocols like PPPoE where
the recipient expects ta receive ethernet frames exactly as
transmitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In such cases, it is blingin dat frames leavin the
tunnel is reassembled back tha fuck into a single frame before being
forwarded on. I aint talkin' bout chicken n' gravy biatch. To do so, enable netfilta connection tracking
(conntrack) or manually load tha Linux netfilta degrag modulez at
each tunnel endpoint.
.PP
.nf
site-A:# modprobe nf_degrag_ipv4

site-B:# modprobe nf_degrag_ipv4
.fi
.PP
If L2TP is bein used over IPv6, use tha IPv6 degrag module.
.SH INTEROPERABILITY
.PP
Unmanaged (static) L2TPv3 tunnels is supported by some network
equipment shiznit vendors like fuckin Cisco.
.PP
In Linux, L2TP Wuz crackalackin' lyrics is not supported up in unmanaged
tunnels yo. Wuz crackalackin' lyrics is used by L2TP clients n' servers ta detect
link failures up in order ta automate tearin down n' reestablishing
dynamic tunnels. If a non-Linux peer supports Wuz crackalackin' lyrics in
unmanaged tunnels, it must be turned off ta interoperate wit Linux.
.PP
Linux defaults ta use tha Default Layer2SpecificHeader type as defined
in tha L2TPv3 protocol justification, RFC3931. This settin must be
consistent wit dat configured all up in tha peer n' shit. Right back up in yo muthafuckin ass. Some vendor
implementations (e.g. Cisco) default ta bust a Layer2SpecificHeader
type of None.
.SH SEE ALSO
.br
.BR ip (8)
.SH AUTHOR
Jizzy Chapman <jchapman@katalix.com>
