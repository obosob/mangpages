.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "WPA_SUPPLICANT" "8" "23 October 2014" "" ""
.SH NAME
wpa_supplicant \- Wi-Fi Protected Access client n' IEEE 802.1X supplicant
.SH SYNOPSIS
.sp
\fBwpa_supplicant\fR [ \fB-BddfhKLqqsTtuvW\fR ]  [ \fB-i\fIifname\fB\fR ]  [ \fB-c\fIconfig file\fB\fR ]  [ \fB-D\fIdriver\fB\fR ]  [ \fB-P\fIPID_file\fB\fR ]  [ \fB-f\fIoutput file\fB\fR ] 
.SH "OVERVIEW"
.PP
Wireless networks do not require physical access ta tha network shit
in tha same way as wired networks. This make it easier fo' unauthorized
users ta passively monitor a network n' capture all transmitted frames.
In addition, unauthorized use of tha network is much easier n' shit. In nuff cases,
this can happen even without userz explicit knowledge since tha wireless
LAN adapta may done been configured ta automatically join any available
network.
.PP
Link-layer encryption can be used ta provide a layer of securitizzle for
wireless networks. Da original gangsta wireless LAN standard, IEEE 802.11,
included a simple encryption mechanism, WEP. But fuck dat shiznit yo, tha word on tha street is dat that proved to
be flawed up in nuff areas n' network protected wit WEP cannot be consider
secure. IEEE 802.1X authentication n' frequently chizzled dynamic WEP keys
can be used ta improve tha network securitizzle yo, but even dat has inherited
securitizzle thangs cuz of tha use of WEP fo' encryption. I aint talkin' bout chicken n' gravy biatch. Wi-Fi Protected
Access n' IEEE 802.11i amendment ta tha wireless LAN standard introduce
a much improvement mechanizzle fo' securin wireless networks. IEEE 802.11i
enabled networks dat is rockin CCMP (encryption mechanizzle based on strong
cryptographic algorithm AES) can finally be called secure used for
applications which require efficient protection against unauthorized
access.
.PP
\fBwpa_supplicant\fR be a implementation of
the WPA Supplicant component, i.e., tha part dat runs up in the
client stations. Well shiiiit, it implements WPA key negotiation wit a WPA
Authenticator n' EAP authentication wit Authentication
Server n' shit. In addition, it controls tha roamin n' IEEE 802.11
authentication/association of tha wireless LAN driver.
.PP
\fBwpa_supplicant\fR is designed ta be a
"daemon" program dat runs up in tha background n' acts as the
backend component controllin tha wireless
connection. I aint talkin' bout chicken n' gravy biatch. \fBwpa_supplicant\fR supports separate
frontend programs n' a example text-based frontend,
\fBwpa_cli\fR, is included with
wpa_supplicant.
.PP
Before wpa_supplicant can do its work, tha network intercourse
must be available. That means dat tha physical thang must be
present n' enabled, n' tha driver fo' tha thang must be
loaded. Y'all KNOW dat shit, muthafucka! Da daemon will exit immediately if tha thang aint already
available.
.PP
Afta \fBwpa_supplicant\fR has configured the
network device, higher level configuration like fuckin DHCP may
proceed. Y'all KNOW dat shit, muthafucka! There is a variety of ways ta integrate wpa_supplicant
into a machinez networkin scripts, all dem of which is busted lyrics about
in sections below.
.PP
Da followin steps is used when associatin wit a AP
usin WPA:
.TP 0.2i
\(bu
\fBwpa_supplicant\fR requests tha kernel
driver ta scan neighborin BSSes
.TP 0.2i
\(bu
\fBwpa_supplicant\fR selects a BSS based on
its configuration
.TP 0.2i
\(bu
\fBwpa_supplicant\fR requests tha kernel
driver ta associate wit tha chosen BSS
.TP 0.2i
\(bu
If WPA-EAP: integrated IEEE 802.1X Supplicant
completes EAP authentication wit the
authentication server (proxied by tha Authenticator up in the
AP)
.TP 0.2i
\(bu
If WPA-EAP: masta key is received from tha IEEE 802.1X
Supplicant
.TP 0.2i
\(bu
If WPA-PSK: \fBwpa_supplicant\fR uses PSK
as tha masta session key
.TP 0.2i
\(bu
\fBwpa_supplicant\fR completes WPA 4-Way
Handshake n' Group Key Handshake wit tha Authenticator
(AP)
.TP 0.2i
\(bu
\fBwpa_supplicant\fR configures encryption
keys fo' unicast n' broadcast
.TP 0.2i
\(bu
normal data packets can be transmitted n' received
.SH "SUPPORTED FEATURES"
.PP
Supported WPA/IEEE 802.11i features:
.TP 0.2i
\(bu
WPA-PSK ("WPA-Personal")
.TP 0.2i
\(bu
WPA wit EAP (e.g., wit RADIUS authentication server)
("WPA-Enterprise") Peepin authentication methodz are
supported wit a integrate IEEE 802.1X Supplicant:
.RS
.TP 0.2i
\(bu
EAP-TLS
.RE
.PP
.RS
.TP 0.2i
\(bu
EAP-PEAP/MSCHAPv2 (both PEAPv0 n' PEAPv1)
.TP 0.2i
\(bu
EAP-PEAP/TLS (both PEAPv0 n' PEAPv1)
.TP 0.2i
\(bu
EAP-PEAP/GTC (both PEAPv0 n' PEAPv1)
.TP 0.2i
\(bu
EAP-PEAP/OTP (both PEAPv0 n' PEAPv1)
.TP 0.2i
\(bu
EAP-PEAP/MD5-Challenge (both PEAPv0 n' PEAPv1)
.TP 0.2i
\(bu
EAP-TTLS/EAP-MD5-Challenge
.TP 0.2i
\(bu
EAP-TTLS/EAP-GTC
.TP 0.2i
\(bu
EAP-TTLS/EAP-OTP
.TP 0.2i
\(bu
EAP-TTLS/EAP-MSCHAPv2
.TP 0.2i
\(bu
EAP-TTLS/EAP-TLS
.TP 0.2i
\(bu
EAP-TTLS/MSCHAPv2
.TP 0.2i
\(bu
EAP-TTLS/MSCHAP
.TP 0.2i
\(bu
EAP-TTLS/PAP
.TP 0.2i
\(bu
EAP-TTLS/CHAP
.TP 0.2i
\(bu
EAP-SIM
.TP 0.2i
\(bu
EAP-AKA
.TP 0.2i
\(bu
EAP-PSK
.TP 0.2i
\(bu
EAP-PAX
.TP 0.2i
\(bu
LEAP (note: requires special support from
the driver fo' IEEE 802.11 authentication)
.TP 0.2i
\(bu
(followin methodz is supported yo, but since
they do not generate keyin material, they cannot be used
with WPA or IEEE 802.1X WEP keying)
.TP 0.2i
\(bu
EAP-MD5-Challenge 
.TP 0.2i
\(bu
EAP-MSCHAPv2
.TP 0.2i
\(bu
EAP-GTC
.TP 0.2i
\(bu
EAP-OTP
.RE
.PP
.TP 0.2i
\(bu
key pimpment fo' CCMP, TKIP, WEP104, WEP40
.TP 0.2i
\(bu
RSN/WPA2 (IEEE 802.11i)
.RS
.TP 0.2i
\(bu
pre-authentication
.TP 0.2i
\(bu
PMKSA caching
.RE
.SH "AVAILABLE DRIVERS"
.PP
A summary of available driver backendz is below. Right back up in yo muthafuckin ass. Support fo' each
of tha driver backendz is chosen at wpa_supplicant compile time. For a
list of supported driver backendz dat may be used wit tha -D option on
your system, refer ta tha help output of wpa_supplicant
(\fBwpa_supplicant -h\fR).
.TP
\fBwext\fR
Linux wireless extensions (generic).
.TP
\fBwired\fR
wpa_supplicant wired Ethernet driver
.TP
\fBroboswitch\fR
wpa_supplicant Broadcom switch driver
.TP
\fBbsd\fR
BSD 802.11 support (Atheros, etc.).
.TP
\fBndis\fR
Windows NDIS driver.
.SH "COMMAND LINE OPTIONS"
.PP
Most command line options have global scope. Right back up in yo muthafuckin ass. Some is given per
interface, n' is only valid if at least one \fB-i\fR option
is specified, otherwise they ignored. Y'all KNOW dat shit, muthafucka! Option crews fo' different
interfaces must be separated by \fB-N\fR option.
.TP
\fB-b br_ifname\fR
Optionizzle bridge intercourse name. (Per intercourse)
.TP
\fB-B\fR
Run daemon up in tha background.
.TP
\fB-c filename\fR
Path ta configuration file. (Per intercourse)
.TP
\fB-C ctrl_interface\fR
Path ta ctrl_interface socket (Per intercourse. Only used if
\fB-c\fR is not).
.TP
\fB-i ifname\fR
Interface ta listen on. I aint talkin' bout chicken n' gravy biatch. Multiple instancez of dis option can
be present, one per intercourse, separated by \fB-N\fR
option (see below).
.TP
\fB-d\fR
Increase debuggin verbositizzle (\fB-dd\fR even
more).
.TP
\fB-D driver\fR
Driver ta use (can be multiple drivers: nl80211,wext).
(Per intercourse, peep tha available options below.)
.TP
\fB-e entropy file\fR
File fo' \fBwpa_supplicant\fR ta use to
maintain its internal entropy store up in over restarts.
.TP
\fB-f output file\fR
Log output ta specified file instead of stdout. (This
is only available if \fBwpa_supplicant\fR was
built wit tha CONFIG_DEBUG_FILE
option.)
.TP
\fB-g global ctrl_interface\fR
Path ta global ctrl_interface socket. If specified, intercourse
definitions may be omitted.
.TP
\fB-K\fR
Include keys (passwords, etc.) up in debug output.
.TP
\fB-t\fR
Include timestamp up in debug lyrics.
.TP
\fB-h\fR
Help. Right back up in yo muthafuckin ass. Show a usage message.
.TP
\fB-L\fR
Show license (BSD).
.TP
\fB-o override driver\fR
Override tha driver parameta fo' new
interfaces.
.TP
\fB-O override ctrl_interface\fR
Override tha ctrl_interface parameta fo' new
interfaces.
.TP
\fB-p\fR
Driver parameters. (Per intercourse)
.TP
\fB-P PID_file\fR
Path ta PID file.
.TP
\fB-q\fR
Decrease debuggin verbositizzle (\fB-qq\fR even
less).
.TP
\fB-s\fR
Log output ta syslog instead of stdout. (This is only
available if \fBwpa_supplicant\fR was built
with tha CONFIG_DEBUG_SYSLOG
option.)
.TP
\fB-T\fR
Log output ta Linux tracin up in addizzle ta any other
destinations. (This is only available
if \fBwpa_supplicant\fR was built with
the CONFIG_DEBUG_LINUX_TRACING
option.)
.TP
\fB-t\fR
Include timestamp up in debug lyrics.
.TP
\fB-u\fR
Enable DBus control intercourse. If enabled, intercourse
definitions may be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (This is only available
if \fBwpa_supplicant\fR was built with
the CONFIG_DBUS option.)
.TP
\fB-v\fR
Show version.
.TP
\fB-W\fR
Wait fo' a cold-ass lil control intercourse monitor before starting.
.TP
\fB-N\fR
Start describin freshly smoked up intercourse.
.SH "EXAMPLES"
.PP
In most common cases, \fBwpa_supplicant\fR is
started with:
.sp
.RS
.sp
.nf
wpa_supplicant -B -c/etc/wpa_supplicant.conf -iwlan0
.sp
.fi
.RE
.sp
.PP
This make tha process fork tha fuck into background.
.PP
Da easiest way ta debug problems, n' ta git debug log for
bug reports, is ta start \fBwpa_supplicant\fR on
foreground wit debuggin enabled:
.sp
.RS
.sp
.nf
wpa_supplicant -c/etc/wpa_supplicant.conf -iwlan0 -d
.sp
.fi
.RE
.sp
.PP
If tha specific driver wrapper aint known beforehand, it is
possible ta specify multiple comma separated driver wrappers on tha command
line. \fBwpa_supplicant\fR will use tha straight-up original gangsta driver
wrapper dat be able ta initialize tha intercourse.
.sp
.RS
.sp
.nf
wpa_supplicant -Dnl80211,wext -c/etc/wpa_supplicant.conf -iwlan0
.sp
.fi
.RE
.sp
.PP
\fBwpa_supplicant\fR can control multiple
interfaces (radios) either by hustlin one process fo' each
interface separately or by hustlin just one process n' list of
options at command line. Each intercourse is separated wit -N
argument fo' realz. As a example, followin command would start
wpa_supplicant fo' two intercourses:
.sp
.RS
.sp
.nf
wpa_supplicant \\
	-c wpa1.conf -i wlan0 -D nl80211 -N \\
	-c wpa2.conf -i ath0 -D wext
.sp
.fi
.RE
.sp
.SH "OS REQUIREMENTS"
.PP
Current hardware/software requirements:
.TP 0.2i
\(bu
Linux kernel 2.4.x or 2.6.x wit Linux Wireless
Extensions v15 or newer
.TP 0.2i
\(bu
FreeBSD 6-CURRENT
.TP 0.2i
\(bu
Microsizzlez Windows wit WinPcap (at least WinXP, may work
with other versions)
.SH "SUPPORTED DRIVERS"
.TP
\fBLinux wireless extensions\fR
In theory, any driver dat supports Linux wireless
extensions can be used wit IEEE 802.1X (i.e., not WPA) when
usin ap_scan=0 option up in configuration file.
.TP
\fBWired Ethernet drivers\fR
Use ap_scan=0.
.TP
\fBBSD net80211 layer (e.g., Atheros driver)\fR
At tha moment, dis is fo' FreeBSD 6-CURRENT branch.
.TP
\fBWindows NDIS\fR
Da current Windows port requires WinPcap
(http://winpcap.polito.it/). Right back up in yo muthafuckin ass. See README-Windows.txt fo' more
information.
.PP
wpa_supplicant was designed ta be portable fo' different
drivers n' operatin systems yo. Hopefully, support fo' mo' wlan
cardz n' OSes is ghon be added up in tha future. Right back up in yo muthafuckin ass. See pimper.txt for
more shiznit bout tha design of wpa_supplicant n' portin to
other drivers. One main goal is ta add full WPA/WPA2 support to
Linux wireless extensions ta allow freshly smoked up drivers ta be supported
without havin ta implement freshly smoked up driver-specific intercourse code in
wpa_supplicant.
.PP
.SH "ARCHITECTURE"
.PP
The
\fBwpa_supplicant\fR system consistz of tha following
components:
.TP
\fB\fIwpa_supplicant.conf\fB\fR
the configuration file describin all networks dat the
user wants tha computa ta connect to. 
.TP
\fBwpa_supplicant\fR
the program dat directly interacts wit the
network intercourse. 
.TP
\fBwpa_cli\fR
the
client program dat serves up a high-level intercourse ta the
functionalitizzle of tha daemon. I aint talkin' bout chicken n' gravy biatch. 
.TP
\fBwpa_passphrase\fR
a utilitizzle needed ta construct
\fIwpa_supplicant.conf\fR filez dat include
encrypted passwords.
.SH "QUICK START"
.PP
First, cook up a cold-ass lil configuration file, e.g.
\fI/etc/wpa_supplicant.conf\fR, dat raps bout tha networks
yo ass is interested in. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See \fBwpa_supplicant.conf\fR(5)
for details.
.PP
Once tha configuration is ready, you can test whether the
configuration works by hustlin \fBwpa_supplicant\fR
with followin command ta start it on foreground wit debugging
enabled:
.sp
.RS
.sp
.nf
wpa_supplicant -iwlan0 -c/etc/wpa_supplicant.conf -d
    
.sp
.fi
.RE
.sp
.PP
Assumin every last muthafuckin thang goes fine, you can start rockin following
command ta start \fBwpa_supplicant\fR on background
without debugging:
.sp
.RS
.sp
.nf
wpa_supplicant -iwlan0 -c/etc/wpa_supplicant.conf -B
    
.sp
.fi
.RE
.sp
.PP
Please note dat if you included mo' than one driver
interface up in tha build time configuration (.config), you may need
to specify which intercourse ta use by includin -D<driver
name> option on tha command line.
.SH "INTERFACE TO PCMCIA-CS/CARDMRG"
.PP
For example, followin lil' small-ass chizzlez ta pcmcia-cs scripts
can be used ta enable WPA support:
.PP
Add MODE="Managed" n' WPA="y" ta tha network scheme in
\fI/etc/pcmcia/wireless.opts\fR\&.
.PP
Add tha followin block ta tha end of \fBstart\fR
action handlez up in \fI/etc/pcmcia/wireless\fR:
.sp
.RS
.sp
.nf
if [ "$WPA" = "y" -a -x /usr/local/bin/wpa_supplicant ]; then
    /usr/local/bin/wpa_supplicant -B -c/etc/wpa_supplicant.conf -i$DEVICE
fi
    
.sp
.fi
.RE
.sp
.PP
Add tha followin block ta tha end of \fBstop\fR
action handlez (may need ta be separated from other actions) in
\fI/etc/pcmcia/wireless\fR:
.sp
.RS
.sp
.nf
if [ "$WPA" = "y" -a -x /usr/local/bin/wpa_supplicant ]; then
    killall wpa_supplicant
fi
    
.sp
.fi
.RE
.sp
.PP
This will make \fBcardmgr\fR start
\fBwpa_supplicant\fR when tha card is plugged
in.
.SH "SEE ALSO"
.PP
\fBwpa_background\fR(8)
\fBwpa_supplicant.conf\fR(5)
\fBwpa_cli\fR(8)
\fBwpa_passphrase\fR(8)
.SH "LEGAL"
.PP
wpa_supplicant is copyright (c) 2003-2012,
Jouni Malinen <j@w1.fi> and
contributors.
All Rights Reserved.
.PP
This program is licensed under tha BSD license (the one with
advertisement clause removed).
