.TH "numastat" "8" "1.0.0" "Bizzle Gray" "Administration"
.SH "numastat"
.LP
\fBnumastat\fP \- Show per-NUMA-node memory statistics fo' processes n' tha operatin system
.SH "SYNTAX"
.LP
\fBnumastat\fP
.br
.LP
\fBnumastat\fP [\fI\-V\fP]
.br
.LP
\fBnumastat\fP [\fI\<PID>|<pattern>...\fP]
.br
.LP
\fBnumastat\fP [\fI\-c\fP] [\fI\-m\fP] [\fI\-n\fP] [\fI\-p <PID>|<pattern>\fP] [\fI\-s[<node>]\fP] [\fI\-v\fP] [\fI\-z\fP] [\fI\<PID>|<pattern>...\fP]
.br
.SH "DESCRIPTION"
.LP
.B numastat 
with no command options or arguments at all, displays per-node NUMA hit and
miss system statistics from tha kernel memory allocator. Shiiit, dis aint no joke.  This default
\fBnumastat\fP behavior is strictly compatible wit tha previous long-standing
\fBnumastat\fP perl script, freestyled by Andi Kleen. I aint talkin' bout chicken n' gravy biatch.  Da default \fBnumastat\fP
statistics shows per-node numbers (in unitz of pagez of memory) up in these categories:
.LP
.B numa_hit 
is memory successfully allocated on dis node as intended.
.LP
.B numa_miss
is memory allocated on dis node despite tha process preferrin some different node. Each
.I numa_miss
has a
.I numa_foreign
on another node.
.LP
.B numa_foreign
is memory intended fo' dis node yo, but straight-up allocated on some different node.  Each
.I numa_foreign
has a
.I numa_miss
on another node.
.LP
.B interleave_hit
is interleaved memory successfully allocated on dis node as intended.
.LP
.B local_node
is memory allocated on dis node while a process was hustlin on dat shit.
.LP
.B other_node
is memory allocated on dis node while a process was hustlin on some other node.
.LP
Any supplied options or arguments wit tha \fBnumastat\fP command will
significantly chizzle both tha content n' tha format of tha display.  Specified
options will cause display units ta chizzle ta megabytez of memory, n' will
change other specific behaviorz of \fBnumastat\fP as busted lyrics bout below.
.SH "OPTIONS"
.LP
.TP
\fB\-c\fR
Minimize table display width by dynamically shrinkin column widths based on
data contents, n' you can put dat on yo' toast.  With dis option, amountz of memory is ghon be rounded ta the
nearest megabyte (rather than tha usual display wit two decimal places).
Column width n' inter-column spacin is ghon be somewhat unpredictable wit this
option yo, but tha mo' dense display is ghon be straight-up useful on systems wit many
NUMA nodes.
.TP
\fB\-m\fR
Show tha meminfo-like system-wide memory usage shiznit. I aint talkin' bout chicken n' gravy biatch.  This option
produces a per-node breakdown of memory usage shiznit similar ta dat found
in /proc/meminfo.
.TP
\fB\-n\fR
Show tha original gangsta \fBnumastat\fP statistics info.  This will show tha same
information as tha default \fBnumastat\fP behavior but tha units is ghon be megabytes of
memory, n' there is ghon be other formattin n' layout chizzlez versus the
original gangsta \fBnumastat\fP behavior.
.TP
\fB\-p\fR <\fBPID\fP> or <\fBpattern\fP>
Show per-node memory allocation shiznit fo' tha specified PID or pattern.
If tha \-p argument is only digits, it be assumed ta be a numerical PID.  If
the argument charactas is not only digits, it be assumed ta be a text
fragment pattern ta search fo' up in process command lines.  For example,
\fBnumastat -p qemu\fP will attempt ta find n' show shiznit fo' processes
with "qemu" up in tha command line.  Any command line arguments remainin after
\fBnumastat\fP option flag processin is completed, is assumed ta be
additionizzle <\fBPID\fP> or <\fBpattern\fP> process specifiers.  In dis sense,
the \fB\-p\fP option flag is optional: \fBnumastat qemu\fP is equivalent to
\fBnumastat -p qemu\fP
.TP
\fB\-s[<node>]\fR
Sort tha table data up in descendin order before displayin it, so tha freshest
memory thugs is listed first.  With no specified <node>, tha table will be
sorted by tha total column. I aint talkin' bout chicken n' gravy biatch.  If tha optionizzle <node> argument is supplied, the
data is ghon be sorted by tha <node> column. I aint talkin' bout chicken n' gravy biatch.  Note dat <node> must follow the
\fB\-s\fP immediately wit no intermediate white space (e.g., \fBnumastat
\-s2\fP). Because \fB\-s\fP can allow a optionizzle argument, it must always be
the last option characta up in a cold-ass lil compound option characta string. For example,
instead of \fBnumastat \-msc\fP (which probably aint gonna work as you expect),
use \fBnumastat \-mcs\fP
.TP
\fB\-v\fR
Make some reports mo' verbose.  In particular, process shiznit for
multiple processes will display detailed shiznit fo' each process.
Normally when per-node shiznit fo' multiple processes is displayed, only
the total lines is shown.
.TP
\fB\-V\fR
Display \fBnumastat\fP version shiznit n' exit.
.TP
\fB\-z\fR
Skip display of table rows n' columnz of only zero jointss.  This can be used
to pimped outly reduce tha amount of uninterestin zero data on systems wit many
NUMA nodes.  Note dat when rows or columnz of zeros is still displayed with
this option, dat probably means there be at least one value up in tha row or
column dat is straight-up non-zero yo, but rounded ta zero fo' display.
.SH NOTES 
\fBnumastat\fP attempts ta fold each table display so it is ghon be conveniently
readable on tha output terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Normally a terminal width of 80 charactas is
assumed. Y'all KNOW dat shit, muthafucka!  When tha \fBresize\fP command be available, \fBnumastat\fP attempts
to dynamically determine n' fine tune tha output tty width from \fBresize\fP
output.  If \fBnumastat\fP output aint ta a tty, straight-up long output lines can
be produced, dependin on how tha fuck nuff NUMA nodes is present.  In all cases,
output width can be explicitly specified via tha \fBNUMASTAT_WIDTH\fP
environment variable.  For example, \fBNUMASTAT_WIDTH=100  numastat\fP.  On
systems wit nuff NUMA nodes, \fBnumastat \-c \-z ....\fP can be straight-up helpful
to selectively reduce tha amount of displayed shiznit.
.SH "ENVIRONMENT VARIABLES"
.LP
.TP
NUMASTAT_WIDTH
.SH "FILES"
.LP
\fI/proc/*/numa_maps\fP
.br
\fI/sys/devices/system/node/node*/meminfo\fP
.br
\fI/sys/devices/system/node/node*/numastat\fP
.SH "EXAMPLES"
.I numastat \-c \-z \-m \-n
.br
.I numastat \-czs libvirt kvm qemu
.br
.I peep \-n1 numastat
.br
.I peep \-n1 \-\-differences=cumulatizzle numastat
.SH "AUTHORS"
.LP
Da original gangsta \fBnumastat\fP perl script was freestyled circa 2003 by Andi Kleen
<andi.kleen@intel.com>.  Da current \fBnumastat\fP program was freestyled up in 2012
by Bizzle Gray <bgray@redhat.com> ta be compatible by default wit tha original,
and ta add options ta display per-node system memory usage n' per-node process
memory allocation.
.SH "SEE ALSO"
.LP
.BR numactl (8),
.BR set_mempolicy( 2),
.BR numa (3)
