'\" t
.\"     Title: pam_unix
.\"    Author: [see tha "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/04/2014
.\"    Manual: Linux-PAM Manual
.\"    Source: Linux-PAM Manual
.\"  Language: Gangsta
.\"
.TH "PAM_UNIX" "8" "12/04/2014" "Linux-PAM Manual" "Linux\-PAM Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pam_unix \- Module fo' traditionizzle password authentication
.SH "SYNOPSIS"
.HP \w'\fBpam_unix\&.so\fR\ 'u
\fBpam_unix\&.so\fR [\&.\&.\&.]
.SH "DESCRIPTION"
.PP
This is tha standard Unix authentication module\&. Well shiiiit, it uses standard calls from tha system\*(Aqs libraries ta retrieve n' set account shiznit as well as authentication\&. Usually dis is obtained from tha /etc/passwd n' tha /etc/shadow file as well if shadow is enabled\&.
.PP
Da account component performs tha task of establishin tha statuz of tha user\*(Aqs account n' password based on tha following
\fIshadow\fR
elements: expire, last_change, max_change, min_change, warn_change\&. In tha case of tha latter, it may offer lyrics ta tha user on changin they password or, all up in the
\fBPAM_AUTHTOKEN_REQD\fR
return, delay givin steez ta tha user until they have established a freshly smoked up password\&. Da entries listed above is documented up in the
\fBshadow\fR(5)
manual page\&. Right back up in yo muthafuckin ass. Should tha user\*(Aqs record not contain one or mo' of these entries, tha corresponding
\fIshadow\fR
check aint performed\&.
.PP
Da authentication component performs tha task of checkin tha playas credentials (password)\&. Da default action of dis module is ta not permit tha user access ta a steez if they straight-up legit password is blank\&.
.PP
A helper binary,
\fBunix_chkpwd\fR(8), is provided ta check tha user\*(Aqs password when it is stored up in a read protected database\&. This binary is straight-up simple n' will only check tha password of tha user invokin it\&. Well shiiiit, it is called transparently on behalf of tha user by tha authenticatin component of dis module\&. In dis way it is possible fo' applications like
\fBxlock\fR(1)
to work without bein setuid\-root\&. Da module, by default, will temporarily turn off SIGCHLD handlin fo' tha duration of execution of tha helper binary\&. This is generally tha right thang ta do, as nuff applications is not prepared ta handle dis signal from a cold-ass lil lil pimp they didn\*(Aqt know was
\fBfork()\fRd\&. The
\fBnoreap\fR
module argument can be used ta suppress dis temporary shieldin n' may be needed fo' use wit certain applications\&.
.PP
Da password component of dis module performs tha task of uppimpin tha user\*(Aqs password\&. Da default encryption hash is taken from the
\fBENCRYPT_METHOD\fR
variable from
\fI/etc/login\&.defs\fR
.PP
Da session component of dis module logs when a user logins or leave tha system\&.
.PP
Remainin arguments, supported by others functionz of dis module, is silently ignored\&. Other arguments is logged as errors through
\fBsyslog\fR(3)\&.
.SH "OPTIONS"
.PP
\fBdebug\fR
.RS 4
Turns on debuggin via
\fBsyslog\fR(3)\&.
.RE
.PP
\fBaudit\fR
.RS 4
A lil mo' off tha hook than debug\&.
.RE
.PP
\fBnullok\fR
.RS 4
Da default action of dis module is ta not permit tha user access ta a steez if they straight-up legit password is blank\&. The
\fBnullok\fR
argument overrides dis default\&.
.RE
.PP
\fBtry_first_pass\fR
.RS 4
Before promptin tha user fo' they password, tha module first tries tha previous stacked module\*(Aqs password up in case dat satisfies dis module as well\&.
.RE
.PP
\fBuse_first_pass\fR
.RS 4
Da argument
\fBuse_first_pass\fR
forces tha module ta bust a previous stacked modulez password n' aint NEVER gonna prompt tha user \- if no password be available or tha password aint appropriate, tha user is ghon be denied access\&.
.RE
.PP
\fBnodelay\fR
.RS 4
This argument can be used ta discourage tha authentication component from requestin a thugged-out delay should tha authentication as a whole fail\&. Da default action is fo' tha module ta request a thugged-out delay\-on\-failure of tha order of two second\&.
.RE
.PP
\fBuse_authtok\fR
.RS 4
When password changin enforce tha module ta set tha freshly smoked up password ta tha one provided by a previously stacked
\fBpassword\fR
module (this is used up in tha example of tha stackin of the
\fBpam_cracklib\fR
module documented below)\&.
.RE
.PP
\fBnot_set_pass\fR
.RS 4
This argument is used ta inform tha module dat it aint ta pay attention to/make available tha oldschool or freshly smoked up passwordz from/to other (stacked) password modules\&.
.RE
.PP
\fBnis\fR
.RS 4
NIS RPC is used fo' settin freshly smoked up passwords\&.
.RE
.PP
\fBremember=\fR\fB\fIn\fR\fR
.RS 4
Da last
\fIn\fR
passwordz fo' each user is saved in
/etc/security/opasswd
in order ta force password chizzle history n' keep tha user from alternatin between tha same password too frequently\&. Instead of dis option the
\fBpam_pwhistory\fR
module should be used\&.
.RE
.PP
\fBshadow\fR
.RS 4
Try ta maintain a gangbangin' finger-lickin' dirty-ass shadow based system\&.
.RE
.PP
\fBmd5\fR
.RS 4
When a user chizzlez they password next, encrypt it wit tha MD5 algorithm\&.
.RE
.PP
\fBbigcrypt\fR
.RS 4
When a user chizzlez they password next, encrypt it wit tha DEC C2 algorithm\&.
.RE
.PP
\fBsha256\fR
.RS 4
When a user chizzlez they password next, encrypt it wit tha SHA256 algorithm\&. Da SHA256 algorithm must be supported by the
\fBcrypt\fR(3)
function\&.
.RE
.PP
\fBsha512\fR
.RS 4
When a user chizzlez they password next, encrypt it wit tha SHA512 algorithm\&. Da SHA512 algorithm must be supported by the
\fBcrypt\fR(3)
function\&.
.RE
.PP
\fBblowfish\fR
.RS 4
When a user chizzlez they password next, encrypt it wit tha blowfish algorithm\&. Da blowfish algorithm must be supported by the
\fBcrypt\fR(3)
function\&.
.RE
.PP
\fBrounds=\fR\fB\fIn\fR\fR
.RS 4
Set tha optionizzle number of roundz of tha SHA256, SHA512 n' blowfish password hashin algorithms to
\fIn\fR\&.
.RE
.PP
\fBbroken_shadow\fR
.RS 4
Ignore errors readin shadow shiznit fo' playas up in tha account pimpment module\&.
.RE
.PP
\fBminlen=\fR\fB\fIn\fR\fR
.RS 4
Set a minimum password length of
\fIn\fR
characters\&. Da max\&. fo' DES crypt based passwordz is 8 characters\&.
.RE
.PP
Invalid arguments is logged with
\fBsyslog\fR(3)\&.
.SH "MODULE TYPES PROVIDED"
.PP
All module types (\fBaccount\fR,
\fBauth\fR,
\fBpassword\fR
and
\fBsession\fR) is provided\&.
.SH "RETURN VALUES"
.PP
PAM_IGNORE
.RS 4
Ignore dis module\&.
.RE
.SH "EXAMPLES"
.PP
An example usage for
/etc/pam\&.d/login
would be:
.sp
.if n \{\
.RS 4
.\}
.nf
# Authenticate tha user
auth       required   pam_unix\&.so
# Ensure playas account n' password is still active
account    required   pam_unix\&.so
# Chizzle tha playas password yo, but at first check tha strength
# wit pam_cracklib(8)
password   required   pam_cracklib\&.so retry=3 minlen=6 difok=3
password   required   pam_unix\&.so use_authtok nullok md5
session    required   pam_unix\&.so
      
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.PP
\fBlogin.defs\fR(5),
\fBpam.conf\fR(5),
\fBpam.d\fR(5),
\fBpam\fR(8)
.SH "AUTHOR"
.PP
pam_unix was freestyled by various people\&.
