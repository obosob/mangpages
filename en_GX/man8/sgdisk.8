.\" Copyright 2011-2013 Roderick W. Right back up in yo muthafuckin ass. Smizzle (rodsmith@rodsbooks.com)
.\" May be distributed under tha GNU General Public License
.TH "SGDISK" "8" "0.8.10" "Roderick W. Right back up in yo muthafuckin ass. Smizzle" "GPT fdisk Manual"
.SH "NAME"
sgdisk \- Command\-line GUID partizzle table (GPT) manipulator fo' Linux n' Unix
.SH "SYNOPSIS"
.BI "sgdisk "
[ options ]
.I device

.SH "DESCRIPTION"
GPT fdisk be a text\-mode menu\-driven package fo' creation n' manipulation of
partizzle tables. Well shiiiit, it consistz of two programs: tha text\-mode interactive
\fBgdisk\fR n' tha command\-line \fBsgdisk\fR. Either program will
automatically convert a old\-style Masta Boot Record (MBR) partizzle table
or BSD disklabel stored without a MBR carrier partizzle ta tha newer Globally
Unique Identifier (GUID) Partizzle Table (GPT) format, or will load a GUID
partizzle table. This playa page documents tha command\-line \fBsgdisk\fR
program.

Some advanced data manipulation and
recovery options require you ta KNOW tha distinctions between the
main n' backup data, as well as between tha GPT headaz n' tha partition
tables. For shiznit on MBR vs. GPT, as well as GPT terminologizzle and
structure, peep tha extended \fBgdisk\fR documentation at
\fIhttp://www.rodsbooks.com/gdisk/\fR or consult Wikipizzle.

Da \fBsgdisk\fR program employs a user intercourse thatz based entirely on
the command line, makin it suitable fo' use up in scripts or by smart-ass muthafuckas who
wanna make one or two quick chizzlez ta a gangbangin' finger-lickin' disk. (Da program may query the
user when certain errors is encountered, though.) Da programz name is
based on \fBsfdisk\fR yo, but tha user optionz of tha two programs are
entirely different from one another.

Ordinarily, \fBsgdisk\fR operates on disk thang files, such as
\fI/dev/sda\fR or \fI/dev/hda\fR under Linux, \fI/dev/disk0\fR under
Mac OS X, or \fI/dev/ad0\fR or \fI/dev/da0\fR under FreeBSD. Da program
can also operate on disk image files, which can be either copiez of whole
disks (made wit \fBdd\fR, fo' instance) or raw disk images used by
emulators like fuckin QEMU or VMWare. Note dat only \fIraw\fR disk images
are supported; \fBsgdisk\fR cannot work on compressed or other advanced
disk image formats.

Da MBR partitionin system uses a cold-ass lil combination of cylinder/head/sector
(CHS) addressin n' logical block addressin (LBA). Da forma is klunky
and limiting. GPT drops CHS addressin n' uses 64\-bit LBA mode
exclusively. Thus, GPT data structures, n' therefore
\fBsgdisk\fR, do not need ta deal wit CHS geometries n' all tha problems
they create.

For dopest thangs up in dis biatch, you should use a OS\-specific partizzle table
program whenever possible. For example, you should make Mac OS X
partitions wit tha Mac OS X Disk Utilitizzle program n' Linux partitions
with tha Linux \fBgdisk\fR, \fBsgdisk\fR, or GNU Parted programs.

Upon start, \fBsgdisk\fR attempts ta identify tha partizzle type up in use on
the disk. If it findz valid GPT data, \fBsgdisk\fR will use dat shit. If
\fBsgdisk\fR findz a valid MBR or BSD disklabel but no GPT data, it will
attempt ta convert tha MBR or disklabel tha fuck into GPT form. (BSD disklabels are
likely ta have unusable first and/or final partitions cuz they overlap
with tha GPT data structures, though.) GPT fdisk can identify yo, but not use
data in, Applez Partizzle Map (APM) disks, which is used on 680x0\- and
PowerPC\-based Macintoshes. If you specify any option dat thangs up in dis biatch in
changes ta a MBR or BSD disklabel, \fBsgdisk\fR ignores dem chizzles
unless tha \fI\-g\fR (\fI\-\-mbrtogpt\fR), \fI\-z\fR (\fI\-\-zap\fR), or
\fI\-Z\fR (\fI\-\-zap\-all\fR) option is used. Y'all KNOW dat shit, muthafucka! If you use tha \fI\-g\fR
option, \fBsgdisk\fR replaces tha MBR or disklabel wit a GPT. \fIThis
action is potentially dangerous!\fR Yo crazy-ass system may become unbootable, and
partizzle type codes may become corrupted if tha disk uses unrecognized
type codes. Boot problems is particularly likely if you multi\-booting
with any GPT\-unaware OS.

Da MBR\-to\-GPT conversion will leave at least one gap up in tha partition
numberin if tha original gangsta MBR used logical partitions. These gaps are
harmless yo, but you can eliminizzle dem by rockin tha \fI\-s\fR (\fI\-\-sort\fR)
option, if you like. (Bustin dis may require you ta update your
\fI/etc/fstab\fR file.)

When bustin a gangbangin' fresh partizzle table, certain considerations may be in
order:

.TP 
.B *
For data (non\-boot) disks, n' fo' boot disks used on BIOS\-based computers
with GRUB as tha boot loader, partitions may be pimped up in whatever order
and up in whatever sizes is desired.

.TP 
.B *
Boot disks fo' EFI\-based systems require a \fIEFI System
Partition\fR (\fBsgdisk\fR internal code 0xEF00) formatted as FAT\-32.
Da recommended size of dis partizzle is between 100 n' 300 MiB.
Boot\-related filez is stored here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. (Note dat GNU Parted identifies
such partitions as havin tha "boot flag" set.)

.TP 
.B *
Some boot loadaz fo' BIOS\-based systems make use of a \fIBIOS Boot
Partition\fR (\fBsgdisk\fR internal code 0xEF02), up in which tha secondary
boot loader is stored, possibly without tha benefit of a gangbangin' filesystem. This
partizzle can typically be like lil' small-ass (roughly 32 ta 200 KiB) yo, but you
should consult yo' boot loader documentation fo' details.

.TP 
.B *
If Windows is ta boot from a GPT disk, a partizzle of type \fIMicrosoft
Reserved\fR (\fBsgdisk\fR
internal code 0x0C01) is recommended. Y'all KNOW dat shit, muthafucka! This partizzle should be bout 128 MiB
in size. Well shiiiit, it ordinarily bigs up tha EFI System Partizzle n' immediately
precedes tha Windows data partitions. (Note dat GNU Parted creates all
FAT partitions as dis type, which straight-up make tha partizzle unusable
for aiiight file storage up in both Windows n' Mac OS X.)

.TP 
.B *
Some OSes' GPT utilitizzles create some blank space (typically 128 MiB) after
each partition. I aint talkin' bout chicken n' gravy biatch. Da intent is ta enable future disk utilitizzles ta use this
space. Right back up in yo muthafuckin ass. Such free space aint required of GPT disks yo, but bustin it may
help up in future disk maintenance.

.SH "OPTIONS"
Some options take no arguments, others take one argument (typically a partition
number), n' others take compound arguments wit colon delimitation. I aint talkin' bout chicken n' gravy biatch. For
instance, \fI\-n\fR (\fI\-\-new\fR) takes a partizzle number, a starting
sector number, n' a endin sector number, as up in \fBsgdisk \-n 2:2000:50000
/dev/sdc\fR, which creates a freshly smoked up partition, numbered 2, startin at sector
2000 a endin at sector 50,000, on \fI/dev/sdc\fR.

Unrelated options may be combined; however, some such combinations will be
nonsense (like fuckin deletin a partizzle n' then changin its GUID type code).
\fBsgdisk\fR interprets options up in tha order up in which they entered, so
effects can vary dependin on order n' shit. For instance, \fBsgdisk \-s \-d 2\fR
sorts tha partizzle table entries n' then deletes partizzle 2 from the
newly\-sorted list; but \fBsgdisk \-d 2 \-s\fR deletes tha original gangsta partition
2 n' then sorts tha modified partizzle table.

Error checkin n' opportunitizzles ta erect mistakes up in \fBsgdisk\fR are
minimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. Although tha program endeavors ta keep tha GPT data structures legal,
it do not prompt fo' verification before struttin its actions. Unless you
require a cold-ass lil command\-line\-driven program, you should use tha interactive
\fBgdisk\fR instead of \fBsgdisk\fR, since \fBgdisk\fR allows you to
quit without savin yo' chizzles, should you cook up a mistake.

Although \fBsgdisk\fR is based on tha same partition\-manipulation code as
\fBgdisk\fR, \fBsgdisk\fR implements fewer features than its interactive
sibling. Options available up in \fBsgdisk\fR are:

.TP 
.B \-a, \-\-set\-alignment=value
Set tha sector alignment multiple. GPT fdisk aligns tha start of partitions
to sectors dat is multiplez of dis value, which defaults ta 2048 on
freshly formatted disks. This alignment value is necessary ta obtain optimum
performizzle wit Westside Digital Advanced Format n' similar drives wit larger
physical than logical sector sizes, wit some typez of RAID arrays, and
with SSD devices.

.TP
.B \-A, \-\-attributes=list|[partnum:show|or|nand|xor|=|set|clear|toggle|get[:bitnum|hexbitmask]]
View or set partizzle attributes. Use \fIlist\fR ta peep defined (known)
attribute joints, n' you can put dat on yo' toast. Omit tha partizzle number (and even tha thang filename)
when rockin dis option. I aint talkin' bout chicken n' gravy biatch. Da others require a partizzle number n' shit. The
\fIshow\fR n' \fIget\fR options show tha current attribute settings
(all attributes or fo' a particular bit, respectively). Da \fIor\fR,
\fInand\fR, \fIxor\fR, \fI=\fR, \fIset\fR, \fIclear\fR, and
\fItoggle\fR options enable you ta chizzle tha attribute bit value. The
\fIset\fR, \fIclear\fR, \fItoggle\fR, n' \fIget\fR options work on a
bit number; tha others work on a hexadecimal bit mask. For example, type 
\fBsgdisk -A 4:set:2 /dev/sdc\fR ta set tha bit 2 attribute (legacy BIOS
bootable) on partizzle 4 on \fI/dev/sdc\fR.

.TP 
.B \-b, \-\-backup=file
Save partizzle data ta a funky-ass backup file. Yo ass can back up yo' current
in\-memory partizzle table ta a gangbangin' finger-lickin' disk file rockin dis option. I aint talkin' bout chicken n' gravy biatch. Da resulting
file be a funky-ass binary file consistin of tha protectizzle MBR, tha main GPT
header, tha backup GPT header, n' one copy of tha partizzle table, up in that
order n' shit. Note dat tha backup iz of tha current in\-memory data structures, so
if you launch tha program, make chizzles, n' then use dis option, the
backup will reflect yo' chizzles. If tha GPT data structures is damaged,
the backup may not accurately reflect tha damaged state; instead, they
will reflect GPT fdiskz first\-pass interpretation of tha GPT.

.TP 
.B \-c, \-\-change\-name=partnum:name
Change tha GPT name of a partition. I aint talkin' bout chicken n' gravy biatch. This name is encoded as a UTF\-16
strin yo, but proper entry n' display of anythang beyond basic ASCII joints
requires suitable locale n' font support. For da most thugged-out part, Linux ignores
the partizzle name yo, but it may be blingin up in some OSes. If you want to
set a name dat includes a space, enclose it up in quotation marks, as in
\fIsgdisk \-c 1:"Sample Name" /dev/sdb\fR. Note dat tha GPT name of a
partizzle is distinct from tha filesystem name, which is encoded up in the
filesystemz data structures.

.TP
.B \-C, \-\-recompute-chs
Recompute CHS joints up in protectizzle or hybrid MBR. This option can sometimes
help if a gangbangin' finger-lickin' disk utility, OS, or BIOS don't like tha CHS joints used by the
partitions up in tha protectizzle or hybrid MBR. In particular, tha GPT
specification requires a CHS value of 0xFFFFFF fo' over-8GiB partitions,
but dis value is technologically illegal by tha usual standards. Right back up in yo muthafuckin ass. Some BIOSes
hang if they encounta dis value. This option will recompute a mo' normal
CHS value -- 0xFEFFFF fo' over-8GiB partitions, enablin these BIOSes to
boot.

.TP 
.B \-d, \-\-delete=partnum
Delete a partition. I aint talkin' bout chicken n' gravy biatch. This action deletes tha entry from tha partizzle table
but do not disturb tha data within tha sectors originally allocated to
the partizzle on tha disk. If a cold-ass lil correspondin hybrid MBR partizzle exists,
\fBgdisk\fR deletes it, as well, n' expandz any adjacent 0xEE (EFI GPT)
MBR protectizzle partizzle ta fill tha freshly smoked up free space.

.TP 
.B \-D, \-\-display\-alignment
Display current sector alignment value. Partitions is ghon be pimped on multiples
of tha sector value reported by dis option. I aint talkin' bout chicken n' gravy biatch. Yo ass can chizzle tha alignment value
with tha \-a option.

.TP 
.B e, \-\-move\-second\-header
Move backup GPT data structures ta tha end of tha disk. Use dis option if
you've added disks ta a RAID array, thus bustin a virtual disk wit space
that bigs up tha backup GPT data structures. This command moves tha backup
GPT data structures ta tha end of tha disk, where they belong.

.TP 
.B \-E, \-\-end\-of\-largest
Displays tha sector number of tha end of tha phattest available block of
sectors on tha disk fo' realz. A script may store dis value n' pass it back as
part of \fI\-n\fRz option ta create a partition. I aint talkin' bout chicken n' gravy biatch. If no unallocated
sectors is available, dis function returns tha value 0.

.TP 
.B \-f, \-\-first\-in\-largest
Displays tha sector number of tha start of tha phattest available block of
sectors on tha disk fo' realz. A script may store dis value n' pass it back as
part of \fI\-n\fRz option ta create a partition. I aint talkin' bout chicken n' gravy biatch. If no unallocated
sectors is available, dis function returns tha value 0. Note dat this
parameta is blind ta partizzle alignment; when you straight-up create a
partition, its start point might be chizzled from dis value.

.TP
.B \-F, \-\-first\-aligned\-in\-largest
Similar ta \fI\-f\fR (\fI\-\-first\-in\-largest\fR), except returns the
sector number wit tha current alignment erection applied. Y'all KNOW dat shit, muthafucka! Use this
function if you need ta compute tha actual partizzle start point rather
than a theoretical start point or tha actual start point if you set the
alignment value ta 1.

.TP 
.B \-g, \-\-mbrtogpt
Convert a MBR or BSD disklabel disk ta a GPT disk fo' realz. As a safety measure, use of
this option is required on MBR or BSD disklabel disks if you intend ta save your
changes, up in order ta prevent accidentally damagin such disks.

.TP
.B \-G, \-\-randomize\-guids
Randomize tha diskz GUID n' all partitions' unique GUIDs (but not their
partizzle type code GUIDs). This function may be used afta clonin a gangbangin' finger-lickin' disk
in order ta render all GUIDs once again n' again n' again unique.

.TP 
.B \-h, \-\-hybrid
Smoke a hybrid MBR. This option takes from one ta three partizzle numbers,
separated by colons, as arguments, n' you can put dat on yo' toast. Da pimped hybrid MBR places a EFI GPT
(type 0xEE) partizzle first up in tha table, followed by tha partition(s) you
specify. Their type codes is based on tha GPT fdisk type codes divided by
0x0100, which is probably erect fo' Windows partitions. If the
active/bootable flag should be set, you must do so up in another program, such
as \fBfdisk\fR. Da \fBgdisk\fR program offers additionizzle hybrid MBR
creation options.

.TP 
.B \-i, \-\-info=partnum
Show detailed partizzle shiznit. I aint talkin' bout chicken n' gravy biatch. Da summary shiznit produced by
the \fI\-p\fR command necessarily omits nuff details, like fuckin tha partition's
unique GUID n' tha translation of \fBsgdisk\fR's
internal partizzle type code ta a plain type name. Da \fI\-i\fR option
displays dis shiznit fo' a single partition.

.TP 
.B \-l, \-\-load\-backup=file
Load partizzle data from a funky-ass backup file. This option is tha reverse of the
\fI\-b\fR option. I aint talkin' bout chicken n' gravy biatch. Note dat restorin partizzle data from anything
but tha original gangsta disk aint recommended. Y'all KNOW dat shit, muthafucka! This option will work even if the
diskz original gangsta partizzle table is bad; however, most other options on the
same command line is ghon be ignored.

.TP 
.B \-L, \-\-list\-types
Display a summary of partizzle types. GPT uses a GUID ta identify partition
types fo' particular OSes n' purposes. For ease of data entry,
\fBsgdisk\fR compresses these tha fuck into two\-byte (four\-digit hexadecimal)
values dat is related ta they equivalent MBR codes. Right back up in yo muthafuckin ass. Specifically, the
MBR code is multiplied by hexadecimal 0x0100. For instance, tha code for
Linux swap space up in MBR is 0x82, n' itz 0x8200 up in \fBgdisk\fR fo' realz. A
one\-to\-one correspondence is impossible, though cause I gots dem finger-lickin' chickens wit tha siz-auce. Most notably, tha codes
for all varietizzlez of FAT n' NTFS partizzle correspond ta a single GPT code
(entered as 0x0700 up in \fBsgdisk\fR). Right back up in yo muthafuckin ass. Some OSes bust a single MBR code but
employ nuff mo' codes up in GPT. For these, \fBsgdisk\fR addz code numbers
sequentially, like fuckin 0xa500 fo' a FreeBSD disklabel, 0xa501 fo' FreeBSD
boot, 0xa502 fo' FreeBSD swap, n' so on. I aint talkin' bout chicken n' gravy biatch. Note dat these two\-byte codes
are unique ta \fBgdisk\fR n' \fBsgdisk\fR. This option do not require
you ta specify a valid disk thang filename.

.TP 
.B \-m, \-\-gpttombr
Convert disk from GPT ta MBR form. This option takes from one ta four
partizzle numbers, separated by colons, as arguments, n' you can put dat on yo' toast. Their type codes are
based on tha GPT fdisk type codes divided by 0x0100. If tha active/bootable
flag should be set, you must do so up in another program, like fuckin \fBfdisk\fR.
Da \fBgdisk\fR program offers additionizzle MBR conversion options. Well shiiiit, it is not
possible ta convert mo' than four partitions from GPT ta MBR form or to
convert partitions dat start above tha 2TiB mark or dat is larger than
2TiB.

.TP 
.B \-n, \-\-new=partnum:start:end
Smoke a freshly smoked up partition. I aint talkin' bout chicken n' gravy biatch. Yo ass enta a partizzle number, startin sector, and
an endin sector. Shiiit, dis aint no joke. Both start n' end sectors can be specified up in absolute
terms as sector numbers or as positions measured up in kibibytes (K),
mebibytes (M), gibibytes (G), tebibytes (T), or pebibytes (P); for
instance, \fI\fB40M\fR\fR specifies a posizzle 40MiB from tha start of the
disk. Yo ass can specify locations relatizzle ta tha start or end of the
specified default range by precedin tha number by a '+' or '\-' symbol, as
in \fI\fB+2G\fR\fR ta specify a point 2GiB afta tha default start sector,
or \fI\fB\-200M\fR\fR ta specify a point 200MiB before tha last available
sector fo' realz. A start or end value of 0 specifies tha default value, which is the
start of tha phattest available block fo' tha start sector n' tha end of
the same block fo' tha end sector fo' realz. A partnum value of 0 causes tha program
to use tha straight-up original gangsta available partizzle number n' shit. Right back up in yo muthafuckin ass. Subsequent usez of the
\fI\-A\fR, \fI\-c\fR, \fI\-t\fR, n' \fI\-u\fR options may also use
\fI0\fR ta refer ta tha same partition.

.TP
.B \-N, \-\-largest\-new=num
Smoke a freshly smoked up partizzle dat fills tha phattest available block of space on
the disk. Note dat if used on a cold-ass lil straight-up blank disk, dis is likely to
result up in a sector-moved warning, since tha straight-up original gangsta available sector
(normally 34) don't fall on a 2048-sector boundary (the default for
alignment). Yo ass can use tha \fI\-a\fR (\fI\-\-set\-alignment\fR) option to
adjust tha alignment, if desired. Y'all KNOW dat shit, muthafucka! A num value of 0 causes tha program to
use tha straight-up original gangsta available partizzle number.

.TP 
.B \-o, \-\-clear
Clear up all partizzle data. This includes GPT header data, all partition
definitions, n' tha protectizzle MBR. Note dat dis operation will, like
most other operations, fail on a thugged-out damaged disk. If you wanna prepare a
disk you know ta be damaged fo' GPT use, you should first wipe it wit -Z
and then partizzle it normally. This option will work even if the
diskz original gangsta partizzle table is bad; however, most other options on the
same command line is ghon be ignored.

.TP 
.B \-p, \-\-print
Display basic partizzle summary data. This includes partition
numbers, startin n' endin sector numbers, partizzle sizes,
\fBsgdisk\fRz partizzle types codes, n' partizzle names. For
additionizzle shiznit, use tha \fI\-i\fR (\fI\-\-info\fR) option.

.TP 
.B \-P, \-\-pretend
Pretend ta make specified chizzles. In\-memory GPT data structures are
altered accordin ta other parametas yo, but chizzlez is not written
to disk.

.TP 
.B \-r, \-\-transpose
Swap two partitions' entries up in tha partizzle table. One or both partitions
may be empty, although swappin two empty partitions is pointless. For
instance, if partitions 1\-4 is defined, transposin 1 n' 5 thangs up in dis biatch up in a
table wit partitions numbered from 2\-5. Transposin partitions up in this
way has no effect on they disk space allocation; it only altas their
order up in tha partizzle table.

.TP
.B \-R, \-\-replicate=second_device_filename
Replicate tha main devicez partizzle table on tha specified second device.
Note dat tha replicated partizzle table be a exact copy, includin all
GUIDs; if tha thang should have its own unique GUIDs, you should use the
\-G option on tha freshly smoked up disk.

.TP 
.B \-s, \-\-sort
Sort partizzle entries. Put ya muthafuckin choppers up if ya feel dis! GPT partizzle numbers need not match tha order of
partitions on tha disk. If you want dem ta match, you can use dis option.
Note dat some partitionin utilitizzles sort partitions whenever they make
changes. Right back up in yo muthafuckin ass. Such chizzlez is ghon be reflected up in yo' thang filenames, so you
may need ta edit \fI/etc/fstab\fR if you use dis option.

.TP 
.B \-t, \-\-typecode=partnum:{hexcode|GUID}
Change a single partitionz type code. Yo ass enta tha type code rockin either
a two\-byte hexadecimal number, as busted lyrics bout earlier, or a gangbangin' fully-specified
GUID value, like fuckin EBD0A0A2-B9E5-4433-87C0-68B6B72699C7.

.TP 
.B \-T, \-\-transform\-bsd=partnum
Transform BSD partitions tha fuck into GPT partitions. This option works on BSD
disklabels held within GPT (or converted MBR) partitions. Converted
partitions' type codes is likely ta need manual adjustment. \fBsgdisk\fR
will attempt ta convert BSD disklabels stored on tha main disk when
launched yo, but dis conversion is likely ta produce first and/or last
partitions dat is unusable. Da nuff BSD variants means dat the
probabilitizzle of \fBsgdisk\fR bein unable ta convert a BSD disklabel is
high compared ta tha likelihood of problems wit a MBR conversion.

.TP
.B \-u, \-\-partition-guid=partnum:guid
Set tha partizzle unique GUID fo' a individual partition. I aint talkin' bout chicken n' gravy biatch. Da GUID may be
a complete GUID or 'R' ta set a random GUID.

.TP
.B \-U, \-\-disk-guid=guid
Set tha GUID fo' tha disk. Da GUID may be a cold-ass lil complete GUID or 'R' ta set a
random GUID.

.TP 
.B \-\-usage
Print a funky-ass brief summary of available options.

.TP 
.B \-v, \-\-verify
Verify disk. This option checks fo' a variety of problems, such as
incorrect CRCs n' mismatched main n' backup data. This option do not
automatically erect most problems, though; fo' that, you must use options
on tha recovery & transformation menu fo'sho. If no problems is found, this
command displays a summary of unallocated disk space. This option will work
even if tha diskz original gangsta partizzle table is bad; however, most other
options on tha same command line is ghon be ignored.

.TP 
.B \-V, \-\-version
Display program version shiznit. I aint talkin' bout chicken n' gravy biatch. This option may be used without
specifyin a thang filename.

.TP 
.B \-z, \-\-zap
Zap (destroy) tha GPT data structures n' then exit. Use dis option if you
wanna repartizzle a GPT disk rockin \fBfdisk\fR or some other GPT\-unaware
program. This option destroys only tha GPT data structures; it leaves the
MBR intact. This make it useful fo' wipin up GPT data structures afta a
disk has been repartitioned fo' MBR rockin a GPT\-unaware utility; however,
therez a risk dat it will damage boot loadaz or even tha start of the
first or end of tha last MBR partition. I aint talkin' bout chicken n' gravy biatch. If you use it on a valid GPT disk,
the MBR is ghon be left wit a inappropriate EFI GPT (0xEE) partition
definition, which you can delete rockin another utility.

.TP 
.B \-Z, \-\-zap\-all
Zap (destroy) tha GPT n' MBR data structures n' then exit. This option
works much like \fI\-z\fR yo, but as it wipes tha MBR as well as tha GPT, it's
more suitable if you wanna repartizzle a gangbangin' finger-lickin' disk afta rockin dis option,
and straight-up unsuitable if you've already repartitioned tha disk.

.TP 
.B \-?, \-\-help
Print a summary of options.

.SH "RETURN VALUES"
\fBsgdisk\fR returns various joints dependin on its success or failure:

.TP 
.B 0
Normal program execution

.TP 
.B 1
Too few arguments

.TP 
.B 2
An error occurred while readin tha partizzle table

.TP 
.B 3
Non\-GPT disk detected n' no \fI\-g\fR option

.TP 
.B 4
An error prevented savin chizzles

.TP
.B 5
An error occurred while readin standard input (should never occur with
sgdisk yo, but may wit gdisk)

.TP
.B 8
Disk replication operation (-R) failed

.SH "BUGS"
Az of March 2014 (version 0.8.10), \fBsgdisk\fR
should be considered beta software. Known bugs n' limitations include:

.TP 
.B *
Da program compilez erectly only on Linux, FreeBSD, n' Mac OS X. Linux
versions fo' x86\-64 (64\-bit), x86 (32\-bit), n' PowerPC (32\-bit) have been
tested, wit tha x86\-64 version havin peeped da most thugged-out testing.

.TP 
.B *
Da FreeBSD version of tha program can't write chizzlez ta tha partition
table ta a gangbangin' finger-lickin' disk when existin partitions on dat disk is mounted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (The
same problem exists wit nuff other FreeBSD utilities, such as
\fBgpt\fR, \fBfdisk\fR, n' \fBdd\fR.) This limitation can be overcome
by typin \fBsysctl kern.geom.debugflags=16\fR at a gangbangin' finger-lickin' dirty-ass shell prompt.

.TP 
.B *
Da fieldz used ta display tha start n' end sector numbers fo' partitions
in tha \fI\-p\fR option is 14 charactas wide. This translates ta a limitation
of bout 45 PiB. On larger disks, tha displayed columns will go up of
alignment.

.TP 
.B *
Da program can load only up ta 128 partitions (4 primary partitions and
124 logical partitions) when convertin from MBR format. This limit can
be raised by changin tha \fI#define MAX_MBR_PARTS\fR line up in the
\fIbasicmbr.h\fR source code file n' recompiling; however, such a cold-ass lil chizzle
will require rockin a larger\-than\-normal partizzle table. (Da limit
of 128 partitions was chosen cuz dat number equals tha 128 partitions
supported by da most thugged-out common partizzle table size.)

.TP 
.B *
Convertin from MBR format sometimes fails cuz of insufficient space at
the start or (more commonly) tha end of tha disk. Resizin tha partition
table (usin tha 's' option up in tha smart-ass muthafuckas' menu) can sometimes overcome
this problem; however, up in off tha hook cases it may be necessary ta resize a
partizzle rockin GNU Parted or a similar tool prior ta conversion with
\fBgdisk\fR.

.TP 
.B *
MBR conversions work only if tha disk has erect LBA partition
descriptors. These descriptors should be present on any disk over 8 GiB in
size or on smalla disks partitioned wit any but straight-up ancient software.

.TP 
.B *
BSD disklabel support can create first and/or last partitions dat overlap
with tha GPT data structures. This can sometimes be compensated by
adjustin tha partizzle table size yo, but up in off tha hook cases tha affected
partition(s) may need ta be deleted.

.TP 
.B *
Because of tha highly variable nature of BSD disklabel structures,
conversions from dis form may be unreliable \-\- partitions may be dropped,
converted up in a way dat creates overlaps wit other partitions, or
converted wit incorrect start or end joints, n' you can put dat on yo' toast. Use dis feature with
caution!

.TP 
.B *
Bootin afta convertin a MBR or BSD disklabel disk is likely ta be
disrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. Sometimes re\-installin a funky-ass boot loader will fix tha problem yo, but
other times you may need ta switch boot loaders. Except on EFI\-based
platforms, Windows all up in at least Windows 7 RC don't support booting
from GPT disks. Creatin a hybrid MBR (usin tha 'h' option on tha recovery &
transformation menu) or abandonin GPT up in favor of MBR may be yo' only
options up in dis case.

.PP

.SH "AUTHORS"
Primary author: Roderick W. Right back up in yo muthafuckin ass. Smizzle (rodsmith@rodsbooks.com)

Contributors:

* Yves Blusseau (1otnwmz02@sneakemail.com)

* Dizzy Hubbard (david.c.hubbard@gmail.com)

* Quentin Maggard (justin.maggard@netgear.com)

* Dwight Schauer (dschauer@ti.com)

* Florian Zumbiehl (florz@florz.de)


.SH "SEE ALSO"
\fBcfdisk (8)\fR,
\fBcgdisk (8)\fR,
\fBfdisk (8)\fR,
\fBgdisk (8)\fR,
\fBmkfs (8)\fR,
\fBparted (8)\fR,
\fBsfdisk (8)\fR
\fBfixparts (8)\fR

\fIhttp://en.wikipedia.org/wiki/GUID_Partition_Table\fR

\fIhttp://developer.apple.com/technotes/tn2006/tn2166.html\fR

\fIhttp://www.rodsbooks.com/gdisk/\fR

.SH "AVAILABILITY"
Da \fBsgdisk\fR command is part of tha \fIGPT fdisk\fR package n' is
available from Rod Smizzle.
