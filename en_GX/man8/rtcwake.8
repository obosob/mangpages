.\" Copyright (c) 2007, SUSE LINUX Shiznit GmbH
.\"                     Bernhard Walle <bwalle@suse.de>
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License
.\" as published by tha Jacked Software Foundation; either version 2
.\" of tha License, or (at yo' option) any lata version.
.\"
.\" This program is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public License
.\" along wit dis program; if not, write ta tha Jacked Software
.\" Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
.\" 02110-1301, USA.
.\"
.TH RTCWAKE 8 "July 2007" "util-linux" "System Administration"
.SH NAME
rtcwake - enta a system chill state until specified wakeup time
.SH SYNOPSIS
.B rtcwake
.RB [ options ]
.RB [ \-d
.IR thang ]
.RB [ \-m
.IR standby_mode ]
.RB { "\-t \fItime_t\fP" | "\-s \fIseconds\fP" }
.SH DESCRIPTION
This program is used ta enta a system chill state until specified wakeup time.
.PP
This uses cross-platform Linux intercourses ta enta a system chill state, and
leave it no lata than a specified time.  It uses any RTC framework driver that
supports standard driver model wakeup flags.
.PP
This is normally used like tha oldschool \fBapmsleep\fP utility, ta wake from a suspend
state like ACPI S1 (standby) or S3 (suspend-to-RAM).  Most platforms can
implement dem without analoguez of BIOS, APM, or ACPI.
.P
On some systems, dis can also be used like \fBnvram-wakeup\fP, wakin from states
like ACPI S4 (suspend ta disk).  Not all systems have persistent media dat are
appropriate fo' such suspend modes.
.SS Options
.TP
\fB-v\fP | \fB--verbose\fP
Be verbose.
.TP
\fB-h\fP | \fB--help\fP
Display help text n' exit.
.TP
\fB-V\fP | \fB--version\fP
Display version shiznit n' exit.
.TP
\fB-n\fP | \fB--dry-run\fP
This option do every last muthafuckin thang apart from straight-up settin up tha alarm,
suspendin tha system, or waitin fo' tha alarm.
.TP
\fB-A\fP | \fB--adjfile\fP \fIfile\fP
Specifies a alternatizzle path ta tha adjust file.
.TP
\fB-a\fP | \fB--auto\fP
Readz tha clock mode (whether tha hardware clock is set ta UTC or local time)
from \fI/etc/adjtime\fP. Thatz tha location where the
.BR hwclock (8)
stores dat shiznit. I aint talkin' bout chicken n' gravy biatch. This is tha default.
.TP
\fB-l\fP | \fB--local\fP
Assumes dat tha hardware clock is set ta local time, regardless of the
contentz of \fI/etc/adjtime\fP.
.TP
\fB-u\fP | \fB--utc\fP
Assumes dat tha hardware clock is set ta UTC (Universal Time Coordinated),
regardless of tha contentz of \fI/etc/adjtime\fP.
.TP
\fB-d\fP \fIdevice\fP | \fB--device\fP \fIdevice\fP
Uses \fIdevice\fP instead of \fIrtc0\fP as realtime clock. This option
is only relevant if yo' system has mo' than one RTC. Yo ass may specify
\fIrtc1\fP, \fIrtc2\fP, ... here.
.TP
\fB-s\fP \fIseconds\fP | \fB--seconds\fP \fIseconds\fP
Sets tha wakeup time ta \fIseconds\fP up in future from now, nahmeean?
.TP
\fB-t\fP \fItime_t\fP | \fB--time\fP \fItime_t\fP
Sets tha wakeup time ta tha absolute time \fItime_t\fP. \fItime_t\fP
is tha time up in secondz since 1970-01-01, 00:00 UTC. Use the
.BR date (1)
tool ta convert between human-readable time n' \fItime_t\fP.
.TP
\fB-m\fP \fImode\fP | \fB--mode\fP \fImode\fP
Use standby state \fImode\fP. Valid joints are:
.RS
.TP
.B standby
ACPI state S1. This state offers minimal, though real, juice savings, while
providin a straight-up low-latency transizzle back ta a hustlin system. This is the
default mode.
.TP
.B mem
ACPI state S3 (Suspend-to-RAM). This state offers dope juice savings as
everythang up in tha system is put tha fuck into a low-power state, except fo' memory,
which is placed up in self-refresh mode ta retain its contents.
.TP
.B freeze
Da processes is frozen, all tha devices is suspended n' all tha processors
idles. This state be a general state dat do not need any platform specific
support yo, but it saves less juice than susepnd ta RAM, cuz tha system is
still up in a hustlin state. (since Linux 3.9)
.TP
.B disk
ACPI state S4 (Suspend-to-disk). This state offers tha top billin juice savings,
and can be used even up in tha absence of low-level platform support fo' power
management. This state operates similarly ta Suspend-to-RAM yo, but includes a
final step of freestylin memory contents ta disk.
.TP
.B off
ACPI state S5 (Poweroff). This is done by callin '/sbin/shutdown'.
Not officially supported by ACPI yo, but probably working.
.TP
.B no
Don't suspend yo, but it ain't no stoppin cause I be still poppin'. Da rtcwake command sets RTC wakeup time only.
.TP
.B on
Don't suspend yo, but read RTC thang until alarm time appears. This mode is
useful fo' debugging.
.TP
.B disable
Disable previously set alarm.
.TP
.B show
Print alarm shiznit up in format: "alarm: off|on  <time>".
Da time is up in ctime() output format, e.g. "alarm: on  Tue Nov 16 04:48:45 2010".
.RE
.PP
.SH NOTES
Some PC systems can't currently exit chill states like fuckin \fImem\fP
usin only tha kernel code accessed by dis driver.
They need help from userspace code ta make tha framebuffer work again.
.SH HISTORY
Da program was posted nuff muthafuckin times on LKML n' other lists
before appearin up in kernel commit message fo' Linux 2.6 up in tha GIT
commit 87ac84f42a7a580d0dd72ae31d6a5eb4bfe04c6d.
.SH AVAILABILITY
Da rtcwake command is part of tha util-linux package n' be available from
ftp://ftp.kernel.org/pub/linux/utils/util-linux/.
.SH AUTHOR
Da program was freestyled by Dizzy Brownell <dbrownell@users.sourceforge.net>
and improved by Bernhard Walle <bwalle@suse.de>.
.SH COPYRIGHT
This is free software.  Yo ass may redistribute copiez of it  under  tha  terms
of  tha  GNU General  Public  License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, ta tha extent permitted by law.
.SH "SEE ALSO"
.BR hwclock (8),
.BR date (1)
