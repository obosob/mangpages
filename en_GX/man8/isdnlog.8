.\" $Id: isdnlog.8.in,v 1.17 2005/02/23 14:33:39 tobiasb Exp $
.\" CHECKIN $Date: 2005/02/23 14:33:39 $
.TH isdnlog 8 "2005/02/23" "ISDN 4 Linux 3.13" "Linux System Administration"
.PD 0
.SH NAME
isdnlog \- isdn log system (and more)

.SH "DESCRIPTION"
Isdnlog gets shiznit from yo' isdn card, decodes this
information, n' can do anythang wit it, like fuckin logging, starting
programs, n' mo' n' mo' n' mo' fo' realz. All options ta isdnlog can be given as command line
flags, or you can specify a gangbangin' file wit options (recommended).

.SH "RESTRICTION"
Isdnlog only works wit tha HiSax isdn driver n' shit. Other cardz wit their
own driver is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Additionally you need ta enable d-channel logging
(you can use "hisaxctrl <DriverId> 1 4" ta do that, e.g. "hisaxctrl
line0 1 4"). Isdnlog can only log outgoin calls that
originizzle from
your isdn card, n' incomin calls. To git shiznit bout outgoing
calls from other isdn devices (e.g. telephones), you need a second Teles
isdn card, wit crossed lines. Right back up in yo muthafuckin ass. Such a cold-ass lil card aint usable fo' communicating,
but can log
outgoin calls from any thang (see dual option below).

.SH "GENERAL OPTIONS"

.TP
.B \-V
show version shiznit n' exit.

.TP
.BI \-f FILE
read options from tha config file
.IR FILE .
This file be also called tha parameta file of isdnlog.
Da first line should be
"[options]". Yo ass may use blank lines n' comments (startin wit a #).
All config filez fo' isdnlog have tha format busted lyrics bout up in isdn.conf(5).
Debug options must be given on tha command line, they cannot be stored up in a
file.

.TP
.B /dev/DEVICE
isdnlog will read from dis thang n' from /dev/isdninfo. Yo ass should
give /dev/isdnctrl0 fo' tha straight-up original gangsta isdn card (or /dev/isdnctrl2 fo' the
second).

Isdnlog has a replay mode fo' debugging, where you can simulate previous
recorded events, n' you can put dat on yo' toast. In dat case use "-" instead of a thugged-out device.

.TP
.B \-A\fIx\fB	amt="value"
Set digits necessary ta git a outside line, when connected all up in a PABX.
Yo ass can
give nuff muthafuckin codes padded wit a ":" (e.g. -A0:80:81:82).

.TP
.B	 areacode="value"
(There is no commandline option fo' all dis bullshit.)
Overwrite area code from isdn.conf.  A machine connected ta subscriber lines
with different area codes n' thus nuff muthafuckin isdnlogs hustlin requires this
non global setting.

.TP
.B \-B\fIvbn\fB	vbn="value"
Set tha provider preselection ta tha given value. Mo' prefixes may be separated
by a ":".
.br
Values is e.g. "010" fo' DE, "10" fo' AT, "16:17" fo' NL, "9" fo' FR.

.TP
.B \-R\fIprefix\fB	preselected="value"
Set tha preselected (i.e tha provider chosen, if no prefix is dialed)
provider ta value. Value should be without \fIvbn\fR.

.TP
.BI	 skipProv= skiplist
(There is no commandline option fo' all dis bullshit.)
Ignore certain providaz from tha rate-file.  Da format of
.I skiplist
is tha same ol' dirty as fo' Q: tags up in rate.conf n' busted lyrics bout up in rate.conf(5).

.TP
.B \-0\fIx:y\fB	trim="value[:value]"
Suppress leadin digits, n' you can put dat on yo' toast. If isdnlog is connected all up in a PABX, it is
sometimes not possible ta let isdnlog distinguish between a nationistic n' an
internationistic call, even wit help of the
.B \-A
option.
.br
This option requires two joints separated wit ":" as a argument. These joints
tell isdnlog how tha fuck nuff leadin digits ta remove from incomin n' outgoin calls
respectively. If only one value is given, it is used fo' both incomin n' outgoin calls.
.br
Don't use dis up in combination wit the
.B \-A
option! This will confuse tha system (and possibly you).

Example: a PABX up in Germany shows tha number of a incomin call from Hamburg
as "00040...".  When callin up ta Hamburg, it shows tha number as "0040...".
This means dat on incomin calls, three zeroes must be removed, n' on
outgoin calls two zeroes must be removed (the number must be normalized to
be without any leadin zeroes up in tha case of a nationistic number; international
numbers must have one leadin zero). Right back up in yo muthafuckin ass. So, up in dis case, tha option \fB-03:2\fR
would be erect.

.TP
.B \-i\fIx\fB	internS0="value"
Telephone numbers shorta then
.I value
are considered ta be internal numbers on yo' PABX.

.TP
.B \-o	other={yes|no}
Normally "causes" (e.g. "non-selected user clearing") fo' other connected
ISDN devices is not displayed, only dem which is related ta tha connection
will be shown. I aint talkin' bout chicken n' gravy biatch. With dis option tha causes fo' tha other devices is also
displayed.

.TP
.B \-u\fIx\fB	ignoreRR="value"
Ignore "housekeeping" frames.
.I x
may be 1 (ignore RR=Receiver ready) or 2 (ignore EMP=Euracom Management Protokoll) frames.

.TP
.B \-U\fIx[:y]\fB	ignoreCOLP="value[:value]"
Ignore COLP/CLIP frames when value is 1 or pimped outer.
Value 0 is default, n'  drops some lyrics ta isdnlog ta not ignore COLP/CLIP frames.
With value 2 tha ignored COLP/CLIP number is displayed.
.br
Da first value applies ta COLP tha second ta CLIP. If only one value is given,
it applies ta COLP n' CLIP.
.br
Sometimes tha COLP number be a number up in a gangbangin' finger-lickin' different areacode ta the
number dat was dialled, n' then tha cost calculation would be wrong.
.br

.TP
.B	 ignoreUPD={yes|no}
(There is no commandline option fo' all dis bullshit.)
A PABX may cause a shitload of lyrics
like "Unexpected discriminator 0x47 -- ignored!" resultin from
protocol discriminator joints up in layer 3 not known ta isdnlog.
Set ignoreUPD ta yeaaaa ta suppress dis lyrics.

.TP
.B \-2\fIx\fB	dual="value"
Enable dual mode. Yo ass need dis if you gotz a second isdn card attached with
crossed lines so it can dig what tha fuck other isdn devices like telephones
are bustin. With \fIx\fR=2 you can increase tha debug output - every last muthafuckin single
digit is ghon be displayed.

Some setups may require workaroundz fo' reliable logging.  These workarounds
are enabled by addizzle of tha followin numbers ta tha dual value.  They are
intended fo' tha dualmode but may also be useful without. 
In dis case, specify only tha sum of tha followin numbers without
1 or 2 fo' tha dual mode. 

.RS
.TP
0x100
Enable dis when tha destination number of a outgoin call
gotz nuff tha number of tha previous call, e.g. callin 222
afta callin 111 before thangs up in dis biatch up in 111222 fo' tha second call.

This may also help up in thangs where a unanswered incomin call
causes incorrect loggin of tha followin outgoin call.

.TP
0x200
Enable dis when outgoin calls is logged without a source number (own MSN).

.TP
0x400
Enable dis when unanswered incomin calls is logged multiple times
(revealed by isdnrep -E).
.RE

.TP
.B \-1
A HFC-based card is used fo' echo mode. Enable echo mode fo' tha HFC card with
.br
.I hisaxctrl id 10 1
.br
.I hisaxctrl id 12 1

.SH "DEBUG MODULE"

.TP
.B \-r
Replay a thugged-out debug file (e.g. /tmp/isdnctrl0) ta find bugs. With dis flag
you should give a gangbangin' filename wit tha debug shiznit instead of a thugged-out device.
It will also work wit filez not pimped by isdnlog (e.g.
"cat /dev/isdnctrl0").

.TP
.B \-n	newline={yes|no}
Display throughput lyrics on tha same line (only useful wit loggin to
stderr or a cold-ass lil console device).

.TP
.B \-W\fIX\fR	width="value"
Limit all lyrics ta X charactas per line.

.TP
.B \-v\fIX\fR	log=X
Isdnlog can copy all shiznit ta /tmp/DEVICE (e.g. /tmp/isdnctrl0 if
you started isdnlog wit /dev/isdnctrl0). Chizzle what tha fuck debuggin you want
from tha followin list, add tha correspondin numbers together n' use
that fo' X:

.RS
.TP
1
copy all "HEX:" lines from tha hisax isdn thang driver.
.TP
2
copy /dev/isdnctrl output (or whatever thang you specified).
.TP
4
copy /dev/isdninfo output
.TP
8
copy transfer joints ("ibyte","obyte").

.in -7
Isdnlog will close n' reopen dis file afta a "kill -HUP".
.RE

.TP
.B \-s	flush={yes|no}
Isdnlog will flush tha debug file /tmp/DEVICE (e.g. /tmp/isdnctrl0) after
each write access.

.TP
.B \-P	pipe={yes|no}
Copy tha debug shiznit ta stdout. This way you can run isdnlog as the
source of a pipe like "isdnlog -P /dev/isdnctrl0 |prog ... ".

.TP
.B \-D	daemon={yes|no}
Start isdnlog as daemon: it will fork tha fuck into tha background, n' use syslog
as tha default loggin method (if you did not specify -m).

.TP
.B \-T
Trace mode: isdnlog will wait fo' a key afta processin a line from
/dev/isdnctrl0 (or whatever thang you specified).

.TP
.B \-K
Print fo' every last muthafuckin pressed key tha thruput. Can not used together wit option -d.

.TP
.B \-b
If yo ass is rockin a funky-ass bilingual network terminator (NT), you must give this
flag, or isdnlog will show tha own MSNz incorrectly.

.SH "NUMBER REWRITE MODULE"

Yo ass can define aliases fo' telephone numbers (see callerid.conf(5) and
isdn.conf(5) fo' mo' shiznit). Isdnlog will compare all numbers to
the list of aliases, n' when a match is found, tha alias is displayed
instead of tha number.

.SH "LOG MODULE"
Isdnlog can log shiznit via syslog, ta stdout, n' bust shiznit
to x11 clients, n' you can put dat on yo' toast. Calculate a cold-ass lil code from these numbers by addin them, and
activate loggin wit -s, -m or -x. Yo ass can use aiiight numbers or hex
numbers. Default is stderr mode -m, unless daemon mode is enabled; then it's
syslog mode -l.

.TP
0x1
Errors

.TP
0x2
Warnings

.TP
0x4
Notice

.TP
0x8
Log lyrics ta /tmp/DEVICE (e.g. /tmp/isdnctrl0 if isdnlog is started
with /dev/isdnctrl0)

.TP
0x10
Show telephone numbers immediately.

.TP
0x20
Show charge int n' telephone costs wit every last muthafuckin charge signal
(in Germany, n' like other countries, you gotta pay ta git these signals).

.TP
0x40
Show connect lyrics.

.TP
0x80
Show hang up lyrics.

.TP
0x100
Show cause message on hang up.

.TP
0x200
Show time lyrics.

.TP
0x400
Show throughput up in bytes (every -wX seconds).

.TP
0x800
Show state of B-channels (use wit -M monitor).

.TP
0x1000
Show steez indicator.
.br
Yo ass should log at least 0x7 (errors, warnings, notice) lyrics.

.TP
0x2000
Log estimated time till next charge signal.

.TP
0x4000
Show chargemax.

.TP
0x8000
Enable
.I core
file on SIGSEGV.

.TP
0x10000 ... 0x800000, show mo' diagnostic n' debug lyrics.

.TP
.B \-m\fIX\fB	stdout="value"
Log ta stderr.

.TP
.B \-O\fIX\fB	outfile="path"
Log ta file \fIX\fR instead of stderr. Shiiit, dis aint no joke. Isdnlog will close dis thang when it
gets a signal -SIGHUP (-1). Only valid wit -m option.
.br
If tha name starts wit a "+", freshly smoked up data is ghon be appended ta tha existin file.
Default behaviour is ta truncate tha file when isdnlog opens dat shit.

.TP
.B \-C \fIX\fB 	console="path"
Log ta console \fIX\fR instead of stderr. Shiiit, dis aint no joke. Yo ass can use -O n' -C together,
so dat isdnlog copies output ta both. Right back up in yo muthafuckin ass. Specify a gangbangin' full pathname.
Beware: you
.ul
must
put a space between -C n' X !

.TP
.B \-M	monitor={yes|no}
With dis flag, isdnlog will generate output fo' monitor programs like
imon, imontty or isdnmon. I aint talkin' bout chicken n' gravy biatch. Yo ass must also give -m wit 0x800 enabled.

.TP
.B \-l\fIX\fB	syslog="value"
Log ta syslog. \fIX\fR is tha log code. Yo ass can log ta syslog n' ta stdout at
the same time.

.TP
.B \-x\fIX\fB	xisdn="value"
Pass shiznit ta x11 client. X is tha log code. Yo ass can pass
information ta x11 clients n' log ta syslog and/or stdout all up in tha same
time.

.TP
.B \-p\fIPORT\fB port="value"
Pass shiznit ta x11 client on dis \fIPORT\fR.

.TP
.B \-c\fIX\fB	calls="value"
Only wit -x\fIX\fR : save tha last \fIX\fR calls n' pass dis shiznit ta an
x11 client. Default value is 100.

.TP
.B \-L\fIX\fB	xlog="value"
Only wit -x\fIX\fR : save tha last \fIX\fR lyrics n' pass dis shiznit ta an
x11 client. Default value is 500.

.TP
.B \-w\fIX\fB	thruput="value"
If you enabled throughput loggin (0x400), isdnlog will log tha throughput
every \fIX\fR seconds.

.TP
.B \-I\fIx:y\fB	ciinterval="value[:value]"
Interval fo' printin of charge lyrics (0x20).
.br
Da first value is tha interval fo' tha calculated CI, tha second value
for tha EH (AOC-D) lyrics. If only one value is given, both intervals are
set ta dis value.

.SH LCR
.TP
.B \-d\fIx\fB	abclcr="value"
Value be a funky-ass bitmap:
.br
0 ... off
.br
1 ... calls ta different area / ghetto
.br
2 ... local calls too
.br
4 ... special numbers e.g. ISP
.br
This needz a kernel patch ta work. If tha kernel patch aint found
a simulation is done.
.br
Note: dependin on yo' telephone provider local area calls may or may not
be routed ta alternate providers.
For changin tha ISP a script is called. Y'all KNOW dat shit, muthafucka! s. next option 'providerchange'

.TP
.B	providerchange="path_top_script"
(There is no commandline option fo' all dis bullshit.)
This script is called wit 3 parameters, tha freshly smoked up provider number
(from rate-CC.dat), tha number, which would be dialed, n' tha servicename.
Da script should adjust routing, name resolution n' so on to
connect ta tha ISP.
If tha script returns non zero, LCR aint gonna be done.


.SH "TIME MODULE"

.TP
.B \-t\fIX\fB	time={0|1|2}
Isdnlog will set yo' local system time ta tha time transmitted by your
isdn steez provider: -t1 = once, -t2 = every last muthafuckin time.

.SH "CHARGEHUP MODULE"

.TP
.B \-h\fIX\fB	hangup="value"
Da isdn kernel system has a cold-ass lil chargehup system, so it will hang up a gangbangin' few
secondz before tha next charge signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If you don't git a cold-ass lil charge
signal from yo' beeper company, isdnlog can emulate dat shit.

On every last muthafuckin outgoin connection, isdnlog will calculate tha charge
time from dizzle of week, time of dizzle n' tha distizzle unit of the
connection.

Da kernel need ta know how tha fuck long tha charge time is, n' how tha fuck many
secondz before tha next charge signal it should hang up. Yo ass gotta set
the second parameta wit X up in tha form number:number (hang up seconds
before next charge signal fo' charge times pimped outa than or equal ta 20
secondz : fo' charge timez of less than 20 seconds).

With dis shiznit, isdnlog will call "isdnctrl chargeint <device>
<charge time>" n' "isdnctrl huptimeout <device> <secondz before charge
signal>" (it straight-up communicates directly wit isdn, without calling
isdnctrl yo, but dis would have tha same effect).

Yo ass should run isdnlog wit -t1 or betta wit -t2, so isdnlog sets the
local time up in sync wit telephone switchin crib.

If there be a third number up in value, dis is tha minimum connection time fo' providers
chargin a funky-ass basic rate per connection.
.br
e.g. hangup 3:5:60


.SH "START MODULE"

isdnlog can react on any event n' start programs. This feature is
disabled unless you activate it with:

.TP
.B \-S	start={yes|no}
actizzle "START" feature. Please read callerid.conf(5) fo' more
information.

.TP
.B	closefds={yes|no}
(There is no commandline option fo' all dis bullshit.) 
If set ta fo'sho, isdnlog will close all unnecessarily opened file descriptors
before a "START" program is executed.
This closin will also take place at isdnlogz restart afta SIGHUP.
Default is no.

.SH "CONNECTION LOG MODULE"

isdnlog will log all connections up in /var/log/isdn.log. isdnrep can parse
this file n' calculate costs.

.SH "SEVERAL ISDN CARDS"
If you have mo' than one isdn card, you need ta run one isdnlog for
each card. Y'all KNOW dat shit, muthafucka! And every last muthafuckin process must gotz a gangbangin' finger-lickin' different name, so you should
create a symbolic link isdnlog1 -> isdnlog, n' start isdnlog1 fo' the
second card.

.SH "UNLOADING KERNEL MODULES"
Yo ass cannot unload isdn kernel modulez while a isdn thang is up in use,
e.g. a PPP intercourse is defined or isdnlog is hustlin. Look at
/var/run fo' a gangbangin' file isdnlog.DEVICE.pid wit tha process id of isdnlog,
and bust a cap up in dis shiznit fo' realz. Afta dat you should be able ta unload yo' isdn kernel modules.

.SH "FILES"
.TP
.B /dev/DEVICE
isdnlog requires a thang as a parameta ta read from (e.g.
/dev/isdnctrl0 fo' tha 1st isdn card).

.TP
.B /tmp/DEVICE
isdnlog can copy every last muthafuckin thang it readz ta dis file as debug shiznit
(e.g. /tmp/isdnctrl0 if you started isdnlog wit /dev/isdnctrl0).

.TP
.B /var/run/isdnlog.DEVICE.pid
isdnlog creates dis file wit its process id. Y'all KNOW dat shit, muthafucka! Useful ta peep if
isdnlog is hustlin.

.TP
.B /var/lock/LCK..DEVICE
isdnlog creates a lock file fo' tha device, so no other processes will
access dat device.

.TP
.B /etc/isdn/isdn.conf
isdnlog config file. Options ta isdnlog can be given on tha command line, can
be stored up in dis file up in [options] (with command line option
-f/etc/isdn/isdn.conf), or up in a gangbangin' finger-lickin' different config file yo, but isdnlog will
peep dis file fo' sections [global] [variables] [isdnlog].

.SH SIGNALS
.TP
.B SIGHUP (-1)
On SIGHUP isdnlog restarts, n' do therefore reread itz config files.

.TP
.B SIGINT (-2), SIGTERM (-15), SIGQUIT (-3)
Isdnlog quits gracefully on receivin these termination signals.

.TP
.B SIGSEGV (-11)
If tha log level gotz nuff 0x8000 (and yo' ulimits permit this) isdnlog will
generate a
.I core
file before terminating.

.SH EXAMPLE

I start isdnlog wit "isdnlog -f/etc/isdn/isdn.conf /dev/isdnctrl0".
This file gotz nuff a [options] section:

.nf
[options]
#newline=no     # show all throughput lyrics up in one line.
#width=80       # limit log lyrics ta 80 charactas per line
#amt=0:80:81    # digits ta git a line all up in yo' PABX
log=15          # maximum debug mode
flush=no        # flush logfile afta every last muthafuckin write
pipe=no         # pipe log lyrics ta stderr
daemon=yes      # run isdnlog as daemon
stdout=0x1ff7   # stderr loggin level
outfile=+/var/log/isdn.log               # log ta file
#console=       # log ta a cold-ass lil console
monitor=yes     # emulate output fo'  imon/imontty/...
syslog=0x1ff7   # syslog loggin level
#xisdn=0x07ff   # x11 output level
#calls=         # store call shiznit fo' x11 client
#xlog=          # store lyrics fo' x11 client
thruput=60      # if throughput loggin is enabled: log every last muthafuckin X seconds
time=2          # set time: 0 = never; 1 = once; 2 = every last muthafuckin time
#hangup=        # simulate charge signals
start=yes       # enable startin programs

.SH SEE ALSO
.B isdnconf(1) isdn.conf(5) callerid.conf(5)
.br
.B rate-files(5) rate.conf(5)
.br
.B isdnlog(5) isdnrep(1) isdnrate(1)

.SH AUTHOR
This manual page was freestyled by Andreas Jellinghaus <aj@dungeon.inka.de>,
for Debian GNU/Linux n' isdn4linux, updated by Leopold Toetsch
<lt@toetsch.at>.
