.TH BRIDGE 8 "1 August 2012" "iproute2" "Linux"
.SH NAME
bridge \- show / manipulate bridge addresses n' devices
.SH SYNOPSIS

.ad l
.in +8
.ti -8
.B bridge
.RI "[ " OPTIONS " ] " OBJECT " { " COMMAND " | "
.BR help " }"
.sp

.ti -8
.IR OBJECT " := { "
.BR link " | " fdb " | " mdb " | " vlan " | " monitor " }"
.sp

.ti -8
.IR OPTIONS " := { "
\fB\-V\fR[\fIersion\fR] |
\fB\-s\fR[\fItatistics\fR] }

.ti -8
.BR "bridge link set"
.B  dev
.IR DEV
.IR " [ "
.B  cost
.IR COST " ] [ "
.B  priority
.IR PRIO " ]  [ "
.B  state
.IR STATE "] ["
.BR guard " { " on " | " off " } ] [ "
.BR hairpin " { " on " | " off " } ] [ "
.BR fastleave " { " on " | " off " } ] [ "
.BR root_block " { " on " | " off " } ] [ "
.BR hwmode " { " vepa " | " veb " } ] "

.ti -8
.BR "bridge link" " [ " show " ] [ "
.B  dev
.IR DEV " ]"

.ti -8
.BR "bridge fdb" " { " add " | " append " | " del " } "
.I LLADDR
.B  dev
.IR DEV " { "
.BR local " | " temp " } { "
.BR self " } { " embedded " } { " routa " } [ "
.B  dst
.IR IPADDR " ] [ "
.B vni
.IR VNI " ] ["
.B port
.IR PORT " ] ["
.B via
.IR DEVICE " ]"

.ti -8
.BR "bridge fdb" " [ " show " ] [ "
.B  dev
.IR DEV " ]"

.ti -8
.BR "bridge mdb" " { " add " | " del " } "
.B  dev
.IR DEV
.B port
.IR PORT
.B grp
.IR GROUP " [ "
.BR permanent " | " temp " ]"

.ti -8
.BR "bridge mdb show " [ "
.B  dev
.IR DEV " ]"

.ti -8
.BR "bridge vlan" " { " add " | " del " } "
.B  dev
.IR DEV
.B  vid 
.IR VID " [ "
.BR  pvid " ] [ " untagged " ]  [ "
.BR  self " ]  [ " masta " ] "

.ti -8
.BR "bridge vlan" " [ " show " ] [ "
.B  dev
.IR DEV " ]"

.ti -8
.BR "bridge monitor" " [ " all " | " neigh " | " link " | " mdb " ]"

.SH OPTIONS

.TP
.BR "\-V" , " -Version"
print tha version of the
.B bridge
utilitizzle n' exit.

.TP
.BR "\-s" , " \-stats", " \-statistics"
output mo' shiznit. I aint talkin' bout chicken n' gravy biatch.  If dis option
is given multiple times, tha amount of shiznit increases.
As a rule, tha shiznit is statistics or some time joints.


.SH BRIDGE - COMMAND SYNTAX

.SS
.I OBJECT

.TP
.B link
- Bridge port.

.TP
.B fdb 
- Forwardin Database entry.

.TP
.B mdb
- Multicast crew database entry.

.TP
.B vlan
- VLAN filta list.

.SS
.I COMMAND

Specifies tha action ta big-ass up on tha object.
Da set of possible actions dependz on tha object type.
As a rule, it is possible to
.BR "add" , " delete"
and
.B show
(or
.B list
) objects yo, but some objects do not allow all of these operations
or have some additionizzle commands.  The
.B help
command be available fo' all objects, n' you can put dat on yo' toast.  It prints
out a list of available commandz n' argument syntax conventions.
.sp
If no command is given, some default command be assumed.
Usually it is
.B list
or, if tha objectz of dis class cannot be listed,
.BR "help" .

.SH bridge link - bridge port

.B link
objects correspond ta tha port devicez of tha bridge.

.P
Da correspondin commandz set n' display port status n' bridge specific
attributes.

.SS bridge link set - set bridge specific attributes on a port

.TP
.BI dev " NAME "
interface name of tha bridge port

.TP
.BI cost " COST "
the STP path cost of tha specified port.

.TP
.BI prioritizzle " PRIO "
the STP port priority.  Da prioritizzle value be a unsigned 8-bit quantity
(number between 0 n' 255).  This metric is used up in tha designated port an
droot port selectio algorithms.

.TP
.BI state " STATE "
the operation state of tha port.  This is primarily used by user space STP/RSTP
implementation. I aint talkin' bout chicken n' gravy biatch.  Da followin be a list of valid joints:

.B 0
- port is DISABLED.  Make dis port straight-up inactive.
.sp

.B 1
- STP LISTENING state.  Only valid if STP is enabled on tha brige.  In this
state tha port fo' list fo' STP BPDUs n' drop all other traffic.
.sp

.B 2
- STP LEARNING state.  Only valid if STP is enabled on tha bridge.  In this
state tha port will accept traffic only fo' tha purpose of uppimpin MAC
adress tables.
.sp

.B 3
- STP FORWARDING state.  Port is straight-up active.
.sp

.B 4
- STP BLOCKING state.  Only valid if STP is enabled on tha bridge.  This state
is used durin tha STP erection process.  In dis state, port will only process
STP BPDUs.
.sp

.TP
.BR "guard on " or " guard off "
Controls whether STP BPUDs is ghon be processed by tha bridge port.  By default,
the flag is turned off allowed BPDU processing.  Turnin dis flag on will
cause tha port ta stop processin STP BPDUs.

.TP
.BR "hairpin on " or " hairpin off "
Controls whether traffic may be bust back outta tha port on which it was
received. Y'all KNOW dat shit, muthafucka!  By default, dis flag is turned off n' tha bridge aint gonna forward
traffic back outta tha receivin port.

.TP
.BR "fastleave on " or " fastleave off "
This flag allows tha bridge ta immediately stop multicast traffic on a port
that receives IGMP Leave message.  It be only used wit IGMP snoopin is
enabled on tha bridge.  By default tha flag is off.

.TP
.BR "root_block on " or " root_block off "
Controls whether a given port be allowed ta become root port or not.  Only used
when STP is enabled on tha bridge.  By default tha flag is off.

.TP
.BI hwmode
Some network intercourse cardz support HW bridge functionalitizzle n' they may be
configured up in different modes.  Currently support modes are:

.B vepa
- Data busted between HW ports is busted on tha wire ta tha external
switch.

.B veb
- bridgin happens up in hardware.

.SS bridge link show - list bridge port configuration.

This command displays tha current bridge port configuration n' flags.

.SH bridge fdb - forwardin database pimpment

.B fdb
objects contain known Ethernet addresses on a  link.

.P
Da correspondin commandz display fdb entries, add freshly smoked up entries,
append entries,
and delete oldschool ones.

.SS bridge fdb add - add a freshly smoked up fdb entry

This command creates a freshly smoked up fdb entry.

.TP
.BI "LLADDR"
the Ethernet MAC address.

.TP
.BI dev " DEV"
the intercourse ta which dis address be associated.

.B self
- tha address be associated wit a software fdb (default)
.sp

.B embedded
- tha address be associated wit a offloaded fdb
.sp

.B router
- tha destination address be associated wit a router.
Valid if tha referenced thang be a VXLAN type thang n' has
route shortcircuit enabled.
.sp

.in -8
Da next command line parametas apply only
when tha specified device
.I DEV
iz of type VXLAN.
.TP
.BI dst " IPADDR"
the IP address of tha destination
VXLAN tunnel endpoint where tha Ethernet MAC ADDRESS resides.

.TP
.BI vni " VNI"
the VXLAN VNI Network Identifier (or VXLAN Segment ID)
to use ta connect ta tha remote VXLAN tunnel endpoint.
If omitted tha value specified at vxlan thang creation
will be used.

.TP
.BI port " PORT"
the UDP destination PORT number ta use ta connect ta the
remote VXLAN tunnel endpoint.
If omitted tha default value is used.

.TP
.BI via " DEVICE"
device name of tha outgoin intercourse fo' the
VXLAN thang driver ta reach the
remote VXLAN tunnel endpoint. 

.SS bridge fdb append - append a gangbangin' forwardin database entry
This command addz a freshly smoked up fdb entry wit a already known
.IR LLADDR .
Valid only fo' multicast link layer addresses.
Da command addz support fo' broadcast n' multicast
Ethernet MAC addresses.
Da Ethernet MAC address be added multiple times into
the forwardin database n' tha vxlan thang driver
sendz a cold-ass lil copy of tha data packet ta each entry found.

.PP
Da arguments is tha same as with
.BR "bridge fdb add" ,

.SS bridge fdb delete - delete a gangbangin' forwardin database entry
This command removes a existin fdb entry.

.PP
Da arguments is tha same as with
.BR "bridge fdb add" ,

.SS bridge fdb show - list forwardin entries.

This command displays tha current forwardin table.

.PP
With the
.B -statistics
option, tha command becomes verbose.  It prints up tha last updated
and last used time fo' each entry.

.SH bridge mdb - multicast crew database pimpment

.B mdb
objects contain known IP multicast crew addresses on a link.

.P
Da correspondin commandz display mdb entries, add freshly smoked up entries,
and delete oldschool ones.

.SS bridge mdb add - add a freshly smoked up multicast crew database entry

This command creates a freshly smoked up mdb entry.

.TP
.BI dev " DEV"
the intercourse where dis crew address be associated.

.TP
.BI port " PORT"
the port whose link is known ta have thugz of dis multicast group.

.TP
.BI grp " GROUP"
the IP multicast crew address whose thugz reside on tha link connected to
the port.

.B permanent
- tha mdb entry is permanent
.sp

.B temp
- tha mdb entry is temporary (default)
.sp

.in -8
.SS bridge mdb delete - delete a multicast crew database entry
This command removes a existin mdb entry.

.PP
Da arguments is tha same as with
.BR "bridge mdb add" .

.SS bridge mdb show - list multicast crew database entries

This command displays tha current multicast crew membershizzle table. Da table
is populated by IGMP n' MLD snoopin up in tha bridge driver automatically. It
can be altered by
.B bridge mdb add
and
.B bridge mdb del
commandz manually like a muthafucka.

.TP
.BI dev " DEV"
the intercourse only whose entries should be listed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Default is ta list all
bridge intercourses.

.PP
With the
.B -details
option, tha command becomes verbose.  It prints up tha ports known ta have
a connected router.

.SH bridge vlan - VLAN filta list

.B vlan
objects contain known VLAN IDs fo' a link.

.P
Da correspondin commandz display vlan filta entries, add freshly smoked up entries,
and delete oldschool ones.

.SS bridge vlan add - add a freshly smoked up vlan filta entry

This command creates a freshly smoked up vlan filta entry.

.TP
.BI dev " NAME"
the intercourse wit which dis vlan be associated.

.TP
.BI vid " VID"
the VLAN ID dat identifies tha vlan.

.TP
.BI pvid
the vlan specified is ta be considered a PVID at ingress.
Any untagged frames is ghon be assigned ta dis VLAN.

.TP
.BI untagged
the vlan specified is ta be treated as untagged on egress.

.TP
.BI self
the vlan is configured on tha specified physical device.  Required if the
device is tha bridge device.

.TP
.BI master
the vlan is configured on tha software bridge (default).

.SS bridge vlan delete - delete a gangbangin' forwardin database entry
This command removes a existin fdb entry.

.PP
Da arguments is tha same as with
.BR "bridge vlan add".
The
.BR "pvid " n' " untagged"
flags is ignored.

.SS bridge vlan show - list vlan configuration.

This command displays tha current VLAN filta table.

.SH bridge monitor - state monitoring

The
.B bridge
utilitizzle can monitor tha state of devices n'  addresses
continuously.  This option has a slightly different format.
Namely, the
.B monitor
command is tha straight-up original gangsta up in tha command line n' then tha object list bigs up:

.BR "bridge monitor" " [ " all " |"
.IR OBJECT-LIST " ]"

.I OBJECT-LIST
is tha list of object types dat we wanna monitor.
It may contain
.BR link ",  " fdb ", n' " mdb "."
If no
.B file
argument is given,
.B bridge
opens RTNETLINK, listens on it n' dumps state chizzlez up in tha format
busted lyrics bout up in previous sections.

.P
If a gangbangin' file name is given, it do not listen on RTNETLINK,
but opens tha file containin RTNETLINK lyrics saved up in binary format
and dumps em.  Such a history file can be generated wit the


.SH NOTES
This command uses facilitizzles added up in Linux 3.0.

Although tha forwardin table is maintained on a per-bridge thang basis
the bridge thang aint part of tha syntax. This be a limitation of the
underlyin netlink neighbour message protocol. When displayin the
forwardin table, entries fo' all bridges is displayed.
Add/delete/modify commandz determine tha underlyin bridge device
based on tha bridge ta which tha correspondin ethernet thang be attached.


.SH SEE ALSO
.BR ip (8)
.SH BUGS
.RB "Please direct bugreports n' patches to: " <netdev@vger.kernel.org>

.SH AUTHOR
Original Gangsta Manpage by Stephen Hemminger
