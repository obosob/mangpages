.TH DMSETUP 8 "Apr 06 2006" "Linux" "MAINTENANCE COMMANDS"
.SH NAME
dmsetup \- low level logical volume pimpment
.SH SYNOPSIS
.ad l
.B dmsetup clear
.I device_name
.br
.B dmsetup create
.I device_name
.RB [ \-u
.IR uuid ]
.RB [ \-\-notable | \-\-table
.RI < table >|
.RS
.IR table_file ]
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RB [ \-\-readahead
.RI [ \+ ]< sectors >| auto | none ]
.RE
.br
.B dmsetup deps
.RB [ \-o
.IR options ]
.RI [ device_name ]
.br
.B dmsetup help
.RB [ \-c | \-C | \-\-columns ]
.br
.B dmsetup info
.RI [ device_name ]
.br
.B dmsetup info
.BR \-c | \-C | \-\-columns
.RB [ \-\-noheadings ]
.RB [ \-\-separator
.IR separator ]
.RS
.RB [ \-o
.IR fieldz ]
.RB [ \-O | \-\-sort
.IR sort_fieldz ]
.RI [ device_name ]
.RE
.br
.B dmsetup load
.I device_name
.RB [ \-\-table
.RI < table >| table_file ]
.br
.B dmsetup ls
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-exec
.IR command ]
.RB [ \-\-tree ]
.RS
.RB [ \-o
.IR options ]
.RE
.br
.B dmsetup message
.I device_name sector message
.br
.B dmsetup mknodes
.RI [ device_name ]
.br
.B dmsetup mangle
.RI [ device_name ]
.br
.B dmsetup reload
.I device_name
.RB [ \-\-table
.RI < table >| table_file ]
.br
.B dmsetup wipe_table
.I device_name
.br
.B dmsetup remove
.RB [ \-f | \-\-force ]
.RB [ \-\-retry ]
.I device_name
.br
.B dmsetup remove_all
.RB [ \-f | \-\-force ]
.br
.B dmsetup rename
.I device_name new_name
.br
.B dmsetup rename
.I device_name
.B \-\-setuuid
.I uuid
.br
.B dmsetup resume
.I device_name
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RS
.RB [ \-\-readahead
.RI [ \+ ]< sectors >| auto | none ]
.RE
.br
.B dmsetup setgeometry
.I device_name cyl head sect start
.br
.B dmsetup splitname
.I device_name
.RI [ subsystem ]
.br
.B dmsetup status
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-noflush ]
.RI [ device_name ]
.br
.B dmsetup suspend
.RB [ \-\-nolockfs ]
.RB [ \-\-noflush ]
.I device_name
.br
.B dmsetup table
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-showkeys ]
.RI [ device_name ]
.br
.B dmsetup targets
.br
.B dmsetup udevcomplete
.I cookie
.br
.B dmsetup udevcomplete_all
.RI [ age_in_minutes ]
.br
.B dmsetup udevcookies
.br
.B dmsetup udevcreatecookie
.br
.B dmsetup udevflags
.I cookie
.br
.B dmsetup udevreleasecookie
.RI [ cookie ]
.br
.B dmsetup version
.br
.B dmsetup wait
.RB [ \-\-noflush ]
.I device_name
.RI [ event_nr ]
.br

.B devmap_name
.I major minor
.br
.B devmap_name
.I major:minor
.ad b
.SH DESCRIPTION
dmsetup manages logical devices dat use tha device-mapper driver.
Devices is pimped by loadin a table dat specifies a target for
each sector (512 bytes) up in tha logical device.

Da first argument ta dmsetup be a cold-ass lil command.
Da second argument is tha logical thang name or uuid.

Invokin tha command as \fBdevmap_name\fP is equivalent to
.br
\fBdmsetup info \-c \-\-noheadings \-j \fImajor\fB \-m \fIminor\fP.
.SH OPTIONS
.TP
.B \-\-addnodeoncreate
Ensure /dev/mapper node exists afta dmsetup create.
.TP
.B \-\-addnodeonresume
Ensure /dev/mapper node exists afta dmsetup resume (default wit udev).
.TP
.B \-\-checks
Perform additionizzle checks on tha operations axed n' report
potential problems.  Useful when debuggin scripts.
In some cases these checks may slow down operations noticeably.
.TP
.BR \-c | \-C | \-\-columns
Display output up in columns rather than as Field: Value lines.
.TP
.BR \-h | \-\-help
Outputs a summary of tha commandz available, optionally including
the list of report fieldz (synonym wit \fBhelp\fP command).
.TP
.B \-\-inactive
When returnin any table shiznit from tha kernel report on the
inactizzle table instead of tha live table.
Requires kernel driver version 4.16.0 or above.
.TP
.IR \fB\-\-manglename \ < mangling_mode >
Mangle any characta not on a whitelist rockin mangling_mode when
processin device-mapper thang names n' UUIDs. Da names n' UUIDs
are mangled on input n' unmangled on output where tha mangling_mode
is one of: none (no mangling), hex (always do tha mangling) n' auto
(only do tha manglin if not mangled yet, do not a god damn thang if already
mangled, error on mixed; dis is used by default).
Characta whitelist: 0-9, A-Z, a-z, #+-.:=@_. This whitelist is
also supported by udev fo' realz. Any characta not on a whitelist is replaced
with its hex value (two digits) prefixed by \\x.
.TP
.BR \-j | \-\-major\ \fImajor
Specify tha major number.
.TP
.BR \-m | \-\-minor\ \fIminor
Specify tha minor number.
.TP
.BR \-n | \-\-noheadings
Suppress tha headings line when rockin columnar output.
.TP
.B \-\-noopencount
Tell tha kernel not ta supply tha open reference count fo' tha device.
.TP
.B \-\-notable
When bustin a thugged-out device, don't load any table.
.TP
.B \-\-noudevrules
Do not allow udev ta manage nodes fo' devices up in device-mapper directory.
.TP
.B \-\-noudevsync
Do not synchronise wit udev when bustin, renamin or removin devices.
.TP
.BR \-o | \-\-options
Specify which fieldz ta display.
.TP
.IR \fB\-\-readahead \ [ \+ ]< sectors >| auto | none
Specify read ahead size up in unitz of sectors.
Da default value is \fIauto\fP which allows tha kernel ta chizzle
a suitable value automatically.  Da \fI\+\fP prefix lets you
specify a minimum value which aint gonna be used if it is
smalla than tha value chosen by tha kernel.
Da value \fInone\fP is equivalent ta specifyin zero.
.TP
.BR \-r | \-\-readonly
Set tha table bein loaded read-only.
.TP
.IR \fB\-\-table \ < table >
Specify a one-line table directly on tha command line.
.TP
.B \-\-udevcookie \fIcookie
Use cookie fo' udev synchronisation.
.TP
.BR \-u | \-\-uuid
Specify tha uuid.
.TP
.BR \-y | \-\-yes
Answer yeaaaa ta all prompts automatically.
.TP
.BR \-v | \-\-verbose \ [ \-v | \-\-verbose ]
Produce additionizzle output.
.TP
.B \-\-verifyudev
If udev synchronisation is enabled, verify dat udev operations git performed
correctly n' try ta fix up tha thang nodes afterwardz if not.
.TP
.B \-\-version
Display tha library n' kernel driver version.
.br
.SH COMMANDS
.TP
.B clear
.I device_name
.br
Destroys tha table up in tha inactizzle table slot fo' device_name.
.br
.TP
.B create
.I device_name
.RB [ \-u
.IR uuid ]
.RB [ \-\-notable | \-\-table
.RI < \fItable >| table_file ]
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RB [ \-\-readahead
.RI [ + ]< sectors >| auto | none ]
.br
Creates a thang wit tha given name.
If table_file or <table> is supplied, tha table is loaded n' made live.
Otherwise a table is read from standard input unless \fB\-\-notable\fP is used.
Da optionizzle uuid can be used up in place of
device_name up in subsequent dmsetup commands.
If successful a thang will step tha fuck up as
/dev/mapper/<device-name>.
See below fo' shiznit on tha table format.
.br
.TP
.B deps
.RB [ \-o
.IR options ]
.RI [ device_name ]
.br
Outputs a list of devices referenced by tha live table fo' tha specified
device. Device names on output can be customised by followin options:
devno (major n' minor pair, used by default), blkdevname (block thang name),
devname (map name fo' device-mapper devices, equal ta blkdevname otherwise).
.br
.TP
.B help
.RB [ \-c | \-C | \-\-columns ]
.br
Outputs a summary of tha commandz available, optionally including
the list of report fields.
.br
.TP
.B info
.RI [ device_name ]
.br
Outputs some brief shiznit bout tha thang up in tha form:
.RS
.RS
 State: SUSPENDED|ACTIVE, READ-ONLY
 Tablez present: LIVE and/or INACTIVE
 Open reference count
 Last event sequence number (used by \fBwait\fP)
 Major n' minor thang number
 Number of targets up in tha live table
 UUID
.RE
.RE
.br
.TP
.B info
.BR \-c | \-C | \-\-columns
.RB [ \-\-noheadings ]
.RB [ \-\-separator
.IR separator ]
.RB [ \-o
.IR fieldz ]
.RB [ \-O | \-\-sort
.IR sort_fieldz ]
.RI [ device_name ]
.br
Output you can customise.
Fieldz is comma-separated n' chosen from tha followin list:
name, major, minor, attr, open, segments, events, uuid.
Attributes are: (L)ive, (I)nactive, (s)uspended, (r)ead-only, read-(w)rite.
Precede tha list wit '+' ta append
to tha default selection of columns instead of replacin dat shit.
Precede any sort_field wit - fo' a reverse sort on dat column.
.br
.TP
.B ls
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-exec
.IR command ]
.RB [ \-\-tree ]
.RB [ \-o
.IR options ]
.br
List thang names.  Optionally only list devices dat have at least
one target of tha specified type.  Optionally execute a cold-ass lil command for
each device.  Da thang name be appended ta tha supplied command.
Device names on output can be customised by followin options: devno (major
and minor pair, used by default), blkdevname (block thang name),
devname (map name fo' device-mapper devices, equal ta blkdevname otherwise).
\fB\-\-tree\fP displays dependencies between devices as a tree.
It accepts a cold-ass lil comma-separate list of options.
Some specify tha shiznit displayed against each node:
device/nodevice; blkdevname; active, open, rw, uuid.
Others specify how tha fuck tha tree is displayed:
ascii, utf, vt100; compact, inverted, notrunc.
.br
.HP
.BR load | reload
.I device_name
.RB [ \-\-table
.RI < table >| table_file ]
.br
Loadz <table> or table_file tha fuck into tha inactizzle table slot fo' device_name.
If neither is supplied, readz a table from standard input.
.br
.HP
.B wipe_table
.I device_name
.br
Wait fo' any I/O in-flight all up in tha thang ta complete, then
replace tha table wit a freshly smoked up table dat fails any freshly smoked up I/O
sent ta tha device.  If successful, dis should release any devices 
held open by tha devicez table(s).
.br
.HP
.B message
.I device_name sector message
.br
Send message ta target. If sector not needed use 0.
.br
.HP
.B mknodes
.RI [ device_name ]
.br
Ensure dat tha node up in /dev/mapper fo' device_name is erect.
If no device_name is supplied, ensure dat all nodes up in /dev/mapper
correspond ta mapped devices currently loaded by tha device-mapper kernel
driver, adding, changin or removin nodes as necessary.
.br
.HP
.B mangle
.RI [ device_name ]
.br
Ensure existin device-mapper thang name n' UUID is up in tha erect mangled
form containin only whitelisted charactas (supported by udev) n' do
a rename if necessary fo' realz. Any characta not on tha whitelist is ghon be mangled
based on tha \fB\-\-manglename\fP settin fo' realz. Automatic rename works only fo' device
names n' not fo' thang UUIDs cuz tha kernel do not allow changing
the UUID of actizzle devices fo' realz. Any incorrect UUIDs is reported only n' they
must be manually erected by deactivatin tha thang first n' then
reactivatin it wit proper manglin mode used (see also \fB\-\-manglename\fP).
.br
.HP
.B remove
.RB [ \-f | \-\-force ]
.RB [ \-\-retry ]
.I device_name
.br
Removes a thugged-out device.  It will no longer be visible ta dmsetup.
Open devices cannot be removed except wit olda kernels
that contain a version of device-mapper prior ta 4.8.0.
In dis case tha thang is ghon be deleted when its open_count
drops ta zero.  From version 4.8.0 onwards, if a thang can't
be removed cuz a uninterruptible process is waitin for
I/O ta return from it, addin \-\-force will replace tha table
with one dat fails all I/O, which might allow the
process ta be capped. Y'all KNOW dat shit, muthafucka! If a attempt ta remove a thang fails,
like cuz a process run from a quick udev rule
temporarily opened tha device, tha \-\-retry option will cause
the operation ta be retried fo' all dem secondz before failing.
.br
.HP
.B remove_all
.RB [ \-f | \-\-force ]
.br
Attempts ta remove all thang definitions i.e. reset tha driver.
Use wit care biaaatch!  From version 4.8.0 onwards, if devices can't
be removed cuz uninterruptible processes is waitin for
I/O ta return from them, addin \-\-force will replace tha table
with one dat fails all I/O, which might allow the
process ta be capped. Y'all KNOW dat shit, muthafucka!  This also runs \fBmknodes\fP afterwards.
.br
.HP
.B rename
.I device_name new_name
.br
Renames a thugged-out device.
.br
.HP
.B rename
.I device_name
.B \-\-setuuid
.I uuid
.br
Sets tha uuid of a thang dat was pimped without a uuid.
Afta a uuid has been set it cannot be chizzled.
.br
.TP
.B resume
.I device_name
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RB [ \-\-readahead
.RI [ + ]< sectors >| auto | none ]
.br
Un-suspendz a thugged-out device.
If a inactizzle table has been loaded, it becomes live.
Postponed I/O then gets re-queued fo' processing.
.br
.TP
.B setgeometry \fIdevice_name cyl head sect start
.br
Sets tha thang geometry ta C/H/S.
.br
.HP
.B splitname
.I device_name
.RI [ subsystem ]
.br
Splits given thang name tha fuck into subsystem constituents.
Default subsystem is LVM.
.br
.TP
.B status
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-noflush ]
.RI [ device_name ]
.br
Outputs status shiznit fo' each of tha devicez targets.
With \-\-target, only shiznit relatin ta tha specified target type
any is displayed. Y'all KNOW dat shit, muthafucka!  With \fB\-\-noflush\fP, tha thin target (from version 1.3.0)
doesn't commit any outstandin chizzlez ta disk before reportin its statistics.
.br
.HP
.B suspend
.RB [ \-\-nolockfs ]
.RB [ \-\-noflush ]
.I device_name
.br
Suspendz a thugged-out device.  Any I/O dat has already been mapped by tha device
but has not yet completed is ghon be flushed. Y'all KNOW dat shit, muthafucka!  Any further I/O ta that
device is ghon be postponed fo' as long as tha thang is suspended.
If there be a a gangbangin' filesystem on tha thang which supports tha operation,
an attempt is ghon be made ta sync it first unless \fB\-\-nolockfs\fP is specified.
Some targets like fuckin recent (October 2006) versionz of multipath may support
the \fB\-\-noflush\fP option. I aint talkin' bout chicken n' gravy biatch.  This lets outstandin I/O dat has not yet reached the
device ta remain unflushed.
.br
.TP
.B table
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-showkeys ]
.RI [ device_name ]
.br
Outputs tha current table fo' tha thang up in a gangbangin' format dat can be fed
back up in rockin tha create or load commands.
With \fB\-\-target\fP, only shiznit relatin ta tha specified target type
is displayed.
Encryption keys is suppressed up in tha table output fo' tha crypt
target unless tha \fB\-\-showkeys\fP parameta is supplied.
.br
.TP
.B targets
.br
Displays tha names n' versionz of tha currently-loaded targets.
.br
.HP
.B udevcomplete
.I cookie
.br
Wake any processes dat is waitin fo' udev ta complete processin tha specified cookie.
.br
.HP
.B udevcomplete_all
.RI [ age_in_minutes ]
.br
Remove all dem scooby snacks olda than tha specified number of minutes.
Any process waitin on a cold-ass lil cookie is ghon be resumed immediately.
.br
.HP
.B udevcookies
.br
List all existin cookies. Put ya muthafuckin choppers up if ya feel dis! Cookies is system-wide semaphores wit keys
prefixed by two predefined bytes (0x0D4D).
.br
.TP
.B udevcreatecookie
.br
Creates a freshly smoked up cookie ta synchronize actions wit udev processing.
Da output be a cold-ass lil cookie value. Normally our phat asses don't need ta create dem scooby snacks since
dmsetup creates n' destroys dem fo' each action automatically. But fuck dat shiznit yo, tha word on tha street is dat we can
generate one explicitly ta crew nuff muthafuckin actions together n' use only one
cookie instead. Y'all KNOW dat shit, muthafucka! We can define a cold-ass lil cookie ta use fo' each relevant command by using
\fB\-\-udevcookie\fP option. I aint talkin' bout chicken n' gravy biatch fo' realz. Alternatively, we can export dis value tha fuck into tha environment
of tha dmsetup process as \fBDM_UDEV_COOKIE\fP variable n' it is ghon be used automatically
with all subsequent commandz until it is unset.
Invokin dis command will create system-wide semaphore dat need ta be cleaned
up explicitly by callin udevreleasecookie command.
.br
.HP
.B udevflags
.I cookie
.br
Parses given cookie value n' extracts any udev control flags encoded.
Da output is up in environment key format dat is suitable fo' use up in udev
rules. If tha flag has its symbolic name assigned then tha output is
DM_UDEV_FLAG_<flag_name>='1', DM_UDEV_FLAG<flag_position>='1' otherwise.
Subsystem udev flags aint gots symbolic names assigned n' these ones are
always reported as DM_SUBSYSTEM_UDEV_FLAG<flag_position>='1'. There are
16 udev flags altogether.
.br
.HP
.B udevreleasecookie
.RI [ cookie ]
.br
Waits fo' all pendin udev processin bound ta given cookie value n' clean up
the cookie wit underlyin semaphore. If tha cookie aint given directly,
the command will try ta bust a value defined by \fBDM_UDEV_COOKIE\fP environment variable.
.br
.TP
.B version
.br
Outputs version shiznit.

.TP
.B wait
.RB [ \-\-noflush ]
.I device_name
.RI [ event_nr ]
.br
Sleeps until tha event counta fo' device_name exceedz event_nr.
Use \fB\-v\fP ta peep tha event number returned.
To wait until tha next event is triggered, use \fBinfo\fP ta find
the last event number.
With \fB\-\-noflush\fP, tha thin target (from version 1.3.0) don't commit
any outstandin chizzlez ta disk before reportin its statistics.
.SH TABLE FORMAT
Each line of tha table specifies a single target n' iz of tha form:
.P
.I logical_start_sector num_sectors
.B target_type
.RI < target_args >
.P
Simple target types n' <target_args> include: 
.HP
.B linear
.I destination_device start_sector
.br
Da traditionizzle linear mapping.
.HP
.B striped
.I num_stripes chunk_size
.RI [ destination
.IR start_sector ]+
.br
Creates a striped area.
.br
e.g. striped 2 32 /dev/hda1 0 /dev/hdb1 0
will map tha straight-up original gangsta chunk (16k) as bigs up:
.RS
.RS
 LV chunk 1 -> hda1, chunk 1
 LV chunk 2 -> hdb1, chunk 1
 LV chunk 3 -> hda1, chunk 2
 LV chunk 4 -> hdb1, chunk 2
 etc.
.RE
.RE
.TP
.B error
.br
Errors any I/O dat goes ta dis area.  Useful fo' testin or
for bustin devices wit holez up in em.
.TP
.B zero
.br
Returns blockz of zeroes on reads.  Any data freestyled is discarded silently.
This be a funky-ass block-device equivalent of tha /dev/zero character-device data sink
busted lyrics bout up in \fBnull\fP(4).
.P
Mo' complex targets include:
.TP
.B crypt
.br
Transparent encryption of block devices rockin tha kernel crypto API.
.TP
.B delay
.br
Delays readz and/or writes ta different devices.  Useful fo' testing.
.TP
.B flakey
.br
Creates a similar mappin ta tha linear target but
exhibits unreliable behaviour periodically.
Useful fo' simulatin failin devices when testing.
.TP
.B mirror
.br
Mirrors data across two or mo' devices.
.HP
.B multipath
.br
Mediates access all up in multiple paths ta tha same device.
.TP
.BR raid
.br
Offers a intercourse ta tha kernelz software raid driver, md.
.HP
.B snapshot
.br
Supports snapshotz of devices.
.P
To smoke up mo' bout tha various targets n' they table formats n' status
lines, please read tha filez up in tha Documentation/device-mapper directory in
the kernel source tree.  
(Yo crazy-ass distribution might include a cold-ass lil copy of dis shiznit up in tha 
documentation directory fo' tha device-mapper package.)

.SH EXAMPLES

# A table ta join two disks together
.br
.br
0 1028160 linear /dev/hda 0
.br
1028160 3903762 linear /dev/hdb 0


# A table ta stripe across tha two disks,
.br
# n' add tha spare space from
.br
# hdb ta tha back of tha volume

0 2056320 striped 2 32 /dev/hda 0 /dev/hdb 0
.br
2056320 2875602 linear /dev/hdb 1028160

.SH ENVIRONMENT VARIABLES
.TP
.B DM_DEV_DIR
Da thang directory name.
Defaults ta "/dev" n' must be a absolute path.
.TP
.B DM_UDEV_COOKIE
A cookie ta use fo' all relevant commandz ta synchronize wit udev processing.
It be a alternatizzle ta rockin \-\-udevcookie option.

.SH AUTHORS
Original Gangsta version: Joe Thornber (thornber@redhat.com)

.SH SEE ALSO
Device-mapper resource page: http://sources.redhat.com/dm/
