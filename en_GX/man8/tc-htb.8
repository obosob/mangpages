.TH HTB 8 "10 January 2002" "iproute2" "Linux"
.SH NAME
HTB \- Hierarchy Token Bucket
.SH SYNOPSIS
.B tc qdisc ... dev
dev
.B  ( parent
classid 
.B | root) [ handle 
major: 
.B ] htb [ default 
minor-id
.B ] 

.B tc class ... dev
dev
.B parent 
major:[minor]
.B [ classid 
major:minor
.B ] htb rate
rate
.B [ ceil
rate 
.B ] burst 
bytes
.B [ cburst
bytes
.B ] [ prio
priority
.B ] 

.SH DESCRIPTION
HTB is meant as a mo' understandable n' intuitizzle replacement for
the CBQ qdisc up in Linux. Both CBQ n' HTB help you ta control tha use
of tha outbound bandwidth on a given link. Both allow you ta use one
physical link ta simulate nuff muthafuckin slower links n' ta bust different
kindz of traffic on different simulated links. In both cases, you have
to specify how tha fuck ta divide tha physical link tha fuck into simulated links and
how ta decizzle which simulated link ta use fo' a given packet ta be sent. 

Unlike CBQ, HTB shapes traffic based on tha Token Bucket Filta algorithm 
which do not depend on intercourse characteristics n' so do not need to
know tha underlyin bandwidth of tha outgoin intercourse.

.SH SHAPING ALGORITHM
Shapin works as documented in
.B tc-tbf (8).

.SH CLASSIFICATION
Within tha one HRB instizzle nuff classes may exist. Each of these classes
gotz nuff another qdisc, by default 
.BR tc-pfifo (8).

When enqueuein a packet, HTB starts all up in tha root n' uses various methodz ta 
determine which class should receive tha data. 

In tha absence of uncommon configuration options, tha process is rather easy as fuck . 
At each node our slick asses look fo' a instruction, n' then git all up in tha class tha 
instruction refers our asses to. If tha class found be a funky-ass barren leaf-node (without 
children), we enqueue tha packet there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. If it aint yet a leaf node, our phat asses do 
the whole thang over again n' again n' again startin from dat node. 

Da followin actions is performed, up in order at each node we visit, until one 
sendz our asses ta another node, or terminates tha process.
.TP
(i)
Consult filtas attached ta tha class. If busted ta a leafnode, we is done. 
Otherwise, restart.
.TP
(ii)
If none of tha above returned wit a instruction, enqueue at dis node.
.P
This algorithm make shizzle dat a packet always endz up somewhere, even while
yo ass is busy buildin yo' configuration. I aint talkin' bout chicken n' gravy biatch. 

.SH LINK SHARING ALGORITHM
FIXME

.SH QDISC
Da root of a HTB qdisc class tree has tha followin parameters:

.TP 
parent major:minor | root
This mandatory parameta determines tha place of tha HTB instance, either at the
.B root
of a intercourse or within a existin class.
.TP
handle major:
Like all other qdiscs, tha HTB can be assigned a handle. Right back up in yo muthafuckin ass. Should consist only
of a major number, followed by a cold-ass lil colon. I aint talkin' bout chicken n' gravy biatch. Optionizzle yo, but straight-up useful if classes
will be generated within dis qdisc.
.TP 
default minor-id
Unclassified traffic gets busted ta tha class wit dis minor-id.

.SH CLASSES
Classes gotz a host of parametas ta configure they operation.

.TP 
parent major:minor
Place of dis class within tha hierarchy. If attached directly ta a qdisc 
and not ta another class, minor can be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Mandatory.
.TP 
classid major:minor
Like qdiscs, classes can be named. Y'all KNOW dat shit, muthafucka! Da major number must be equal ta the
major number of tha qdisc ta which it belongs. Optionizzle yo, but needed if dis 
class is goin ta have lil' thugs.
.TP 
prio priority
In tha round-robin process, classes wit tha lowest prioritizzle field is tried 
for packets first. Mandatory.

.TP 
rate rate
Maximum rate dis class n' all its lil pimps is guaranteed. Y'all KNOW dat shit, muthafucka! Mandatory.

.TP
ceil rate
Maximum rate at which a cold-ass lil class can send, if its parent has bandwidth ta spare. 
Defaults ta tha configured rate, which implies no borrowing

.TP 
burst bytes
Amount of bytes dat can be burst at 
.B ceil
speed, up in excess of tha configured
.B rate. 
Should be at least as high as tha highest burst of all lil' thugs.

.TP 
cburst bytes
Amount of bytes dat can be burst at 'infinite' speed, up in other lyrics, as fast
as tha intercourse can transmit em. For slick evenin out, should be equal ta at most one average
packet. Right back up in yo muthafuckin ass. Should be at least as high as tha highest cburst of all lil' thugs.

.SH NOTES
Cuz of Unix timin constraints, tha maximum ceil rate aint infinite n' may up in fact be like low. On Intel, 
there is 100 timer events per second, tha maximum rate is dat rate at which 'burst' bytes is busted each timer tick.
From this, tha minimum burst size fo' a specified rate can be calculated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For i386, a 10mbit rate requires a 12 kilobyte 
burst as 100*12kb*8 equals 10mbit.

.SH SEE ALSO
.BR tc (8)
.P
HTB joint: http://luxik.cdi.cz/~devik/qos/htb/
.SH AUTHOR
Martin Devera <devik@cdi.cz>. This manpage maintained by bert hubert <ahu@ds9a.nl>


