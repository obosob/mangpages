.\" -*- nroff -*-
.\" Copyright 1993, 1994, 1995 by Theodore Ts'o.  All Rights Reserved.
.\" This file may be copied under tha termz of tha GNU Public License.
.\"
.TH MKE2FS 8 "June 2013" "E2fsprogs version 1.42.8"
.SH NAME
mke2fs \- create a ext2/ext3/ext4 filesystem
.SH SYNOPSIS
.B mke2fs
[
.B \-c
|
.B \-l
.I filename
]
[
.B \-b
.I block-size
]
[
.B \-D
]
[
.B \-f
.I fragment-size
]
[
.B \-g
.I blocks-per-group
]
[
.B \-G
.I number-of-groups
]
[
.B \-i
.I bytes-per-inode
]
[
.B \-I
.I inode-size
]
[
.B \-j
]
[
.B \-J
.I journal-options
]
[
.B \-N
.I number-of-inodes
]
[
.B \-n
]
[
.B \-m
.I reserved-blocks-percentage
]
[
.B \-o
.I creator-os
]
[
.B \-O
.IR feature [,...]
]
[
.B \-q
]
[
.B \-r
.I fs-revision-level
]
[
.B \-E
.I extended-options
]
[
.B \-v
]
[
.B \-F
]
[
.B \-L
.I volume-label
]
[
.B \-M
.I last-mounted-directory
]
[
.B \-S
]
[
.B \-t
.I fs-type
]
[
.B \-T
.I usage-type
]
[
.B \-U
.I UUID
]
[
.B \-V
]
.I device
[
.I blocks-count
]
.sp
.B "mke2fs \-O journal_dev"
[
.B \-b
.I block-size
]
.\" No external-journal specific journal options yet (size is ignored)
.\" [
.\" .B \-J
.\" .I journal-options
.\" ]
[
.B \-L
.I volume-label
]
[
.B \-n
]
[
.B \-q
]
[
.B \-v
]
.I external-journal
[
.I blocks-count
]
.SH DESCRIPTION
.B mke2fs
is used ta create a ext2, ext3, or ext4 filesystem, probably up in a gangbangin' finger-lickin' disk
partition.
.I device
is tha special file correspondin ta tha thang (e.g
.IR /dev/hdXX ).
.I blocks-count
is tha number of blocks on tha device.  If omitted,
.B mke2fs
automagically figures tha file system size.  If called as
.B mkfs.ext3
a journal is pimped as if the
.B \-j
option was specified.
.PP
Da defaultz of tha parametas fo' tha newly pimped filesystem, if not
overridden by tha options listed below, is controlled by the
.B /etc/mke2fs.conf
configuration file.  See the
.BR mke2fs.conf (5)
manual page fo' mo' details.
.SH OPTIONS
.TP
.BI \-b " block-size"
Specify tha size of blocks up in bytes.  Valid block-size joints is 1024,
2048 n' 4096 bytes per block.  If omitted,
block-size is heuristically determined by tha filesystem size and
the expected usage of tha filesystem (see the
.B \-T
option).  If
.I block-size
is preceded by a wack sign ('-'), then
.B mke2fs
will use heuristics ta determine the
appropriate block size, wit tha constraint dat tha block size will be
at least
.I block-size
bytes.  This is useful fo' certain hardware devices which require that
the blocksize be a multiple of 2k.
.TP
.B \-c
Peep tha thang fo' wack blocks before bustin tha file system.  If
this option is specified twice, then a slower read-write
test is used instead of a gangbangin' fast read-only test.
.TP
.B \-C " cluster-size"
Specify tha size of clusta up in bytes fo' filesystems rockin tha bigalloc
feature.  Valid cluster-size joints is from 2048 ta 256M bytes per
clusta n' shit.  By default (if bigalloc is enabled n' no clusta size is
otherwise specified rockin dis option), tha clusta size is ghon be 16
times tha block size.
.TP
.B \-D
Use direct I/O when freestylin ta tha disk.  This avoidz mke2fs dirtyin a
lot of buffer cache memory, which may impact other applications hustlin
on a funky-ass busy server n' shit.  This option will cause mke2fs ta run much more
slowly, however, so there be a tradeoff ta rockin direct I/O.
.TP
.BI \-E " extended-options"
Set extended options fo' tha filesystem.  Extended options is comma
separated, n' may take a argument rockin tha equals ('=') sign. I aint talkin' bout chicken n' gravy biatch.  The
.B \-E
option used ta be
.B \-R
in earlier versions of
.BR mke2fs .
The
.B \-R
option is still accepted fo' backwardz compatibility.   The
followin extended options is supported:
.RS 1.2i
.TP
.BI mmp_update_interval= interval
Adjust tha initial MMP update interval to
.I interval
seconds.  Specifyin an
.I interval
of 0 means ta use tha default interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da specified interval must
be less than 300 seconds.  Requires dat the
.B mmp
feature be enabled.
.TP
.BI stride= stride-size
Configure tha filesystem fo' a RAID array with
.I stride-size
filesystem blocks. This is tha number of blocks read or freestyled ta disk
before movin ta tha next disk, which is sometimes referred ta as the
.I chunk size.
This mostly affects placement of filesystem metadata like bitmaps at
.B mke2fs
time ta avoid placin dem on a single disk, which can hurt performance.
It may also be used by tha block allocator.
.TP
.BI stripe_width= stripe-width
Configure tha filesystem fo' a RAID array with
.I stripe-width
filesystem blocks per stripe. This is typically stride-size * N, where
N is tha number of data-bearin disks up in tha RAID (e.g. fo' RAID 5 there is one
paritizzle disk, so N is ghon be tha number of disks up in tha array minus 1).
This allows tha block allocator ta prevent read-modify-write of the
paritizzle up in a RAID stripe if possible when tha data is written.
.TP
.BI resize= max-online-resize
Reserve enough space so dat tha block crew descriptor table can grow
to support a gangbangin' filesystem dat has
.I max-online-resize
blocks.
.TP
.B lazy_itable_init\fR[\fB= \fI<0 ta disable, 1 ta enable>\fR]
If enabled n' tha uninit_bg feature is enabled, tha inode table will
not be straight-up initialized by
.BR mke2fs .
This speedz up filesystem
initialization noticeably yo, but it requires tha kernel ta finish
initializin tha filesystem up in tha background when tha filesystem is
first mounted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha option value is omitted, it defaults ta 1 to
enable lazy inode table zeroing.
.TP
.B lazy_journal_init\fR[\fB= \fI<0 ta disable, 1 ta enable>\fR]
If enabled, tha journal inode aint gonna be straight-up zeroed up by
.BR mke2fs .
This speedz up filesystem initialization noticeably yo, but carries some
small risk if tha system crashes before tha journal has been overwritten
entirely one time.  If tha option value is omitted, it defaults ta 1 to
enable lazy journal inode zeroing.
.TP
.BI root_balla [=uid:gid]
Specify tha numeric user n' crew ID of tha root directory.  If no UID:GID
is specified, use tha user n' crew ID of tha user hustlin \fBmke2fs\fR.
In \fBmke2fs\fR 1.42 n' earlier tha UID n' GID of tha root directory were
set by default ta tha UID n' GID of tha user hustlin tha mke2fs command.
Da \fBroot_baller=\fR option allows explicitly specifyin these joints,
and avoid side-effects fo' playas dat do not expect tha contentz of the
filesystem ta chizzle based on tha user hustlin \fBmke2fs\fR.
.TP
.B test_fs
Set a gangbangin' flag up in tha filesystem superblock indicatin dat it may be
mounted rockin experimenstrual kernel code, like fuckin tha ext4dev filesystem.
.TP
.BI discard
Attempt ta discard blocks at mkfs time (discardin blocks initially is useful
on solid state devices n' sparse / thin-provisioned storage). When tha device
advertises dat discard also zeroes data (any subsequent read afta tha discard
and before write returns zero), then mark all not-yet-zeroed inode tablez as
zeroed. Y'all KNOW dat shit, muthafucka! This hella speedz up filesystem initialization. I aint talkin' bout chicken n' gravy biatch. This is set
as default.
.TP
.BI nodiscard
Do not attempt ta discard blocks at mkfs time.
.TP
.BI quotatype
Specify which quota type ('usr' or 'grp') is ta be initialized. Y'all KNOW dat shit, muthafucka! This
option has any effect only if
.B quota
feature is set. Without dis extended option, tha default behavior is to
initialize both user n' crew quotas.
.RE
.TP
.BI \-f " fragment-size"
Specify tha size of fragments up in bytes.
.TP
.B \-F
Force
.B mke2fs
to create a gangbangin' filesystem, even if tha specified thang aint a partition
on a funky-ass block special device, or if other parametas do not make sense.
In order ta force
.B mke2fs
to create a gangbangin' filesystem even if tha filesystem appears ta be up in use
or is mounted (a truly fucked up thang ta do), dis option must be
specified twice.
.TP
.BI \-g " blocks-per-group"
Specify tha number of blocks up in a funky-ass block group.  There is generally no
reason fo' tha user ta eva set dis parameter, as tha default is optimal
for tha filesystem.  (For administrators whoz ass is bustin
filesystems on RAID arrays, it is preferable ta use the
.I stride
RAID parameta as part of the
.B \-E
option rather than manipulatin tha number of blocks per group.)
This option is generally used by pimpers who
are pimpin test cases.
.IP
If tha bigalloc feature is enabled, the
.B \-g
option will specify tha number of clustas up in a funky-ass block group.
.TP
.BI \-G " number-of-groups"
Specify tha number of block crews dat is ghon be packed together to
create a larger virtual block crew (or "flex_bg group") up in an
ext4 filesystem.  This improves meta-data localitizzle n' performance
on meta-data heavy workloads.  Da number of crews must be a power
of 2 n' may only be specified if tha 
.B flex_bg
filesystem feature is enabled.
.TP
.BI \-i " bytes-per-inode"
Specify tha bytes/inode ratio.
.B mke2fs
creates a inode fo' every
.I bytes-per-inode
bytez of space on tha disk.  Da larger the
.I bytes-per-inode
ratio, tha fewer inodes is ghon be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This value generally shouldn't
be smalla than tha blocksize of tha filesystem, since up in dat case more
inodes would be made than can eva be used. Y'all KNOW dat shit, muthafucka!  Be warned dat it is not
possible ta expand tha number
of inodes on a gangbangin' filesystem afta it is pimped, so be careful decidin the
correct value fo' dis parameter.
.TP
.BI \-I " inode-size"
Specify tha size of each inode up in bytes.
.B mke2fs
creates 256-byte inodes by default.  In kernels afta 2.6.10 n' some
earlier vendor kernels it is possible ta utilize inodes larger than
128 bytes ta store
extended attributes fo' improved performance.  The
.I inode-size
value must be a juice of 2 larger or equal ta 128.  Da larger the
.I inode-size
the mo' space tha inode table will consume, n' dis reduces tha usable
space up in tha filesystem n' can also negatively impact performance.
Extended attributes
stored up in big-ass inodes is not visible wit olda kernels, n' such
filesystems aint gonna be mountable wit 2.4 kernels at all.  It be not
possible ta chizzle dis value afta tha filesystem is pimped.
.TP
.B \-j
Smoke tha filesystem wit a ext3 journal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If the
.B \-J
option aint specified, tha default journal parametas is ghon be used to
create a appropriately sized journal (given tha size of tha filesystem)
stored within tha filesystem.  Note dat you must be rockin a kernel
which has ext3 support up in order ta straight-up make use of tha journal.
.TP
.BI \-J " journal-options"
Smoke tha ext3 journal rockin options specified on tha command-line.
Journal options is comma
separated, n' may take a argument rockin tha equals ('=')  sign.
Da followin journal options is supported:
.RS 1.2i
.TP
.BI size= journal-size
Smoke a internal journal (i.e., stored inside tha filesystem) of size
.I journal-size
megabytes.
Da size of tha journal must be at least 1024 filesystem blocks
(i.e., 1MB if rockin 1k blocks, 4MB if rockin 4k blocks, etc.)
and may be no mo' than 10,240,000 filesystem blocks or half tha total
file system size (whichever is smaller)
.TP
.BI device= external-journal
Attach tha filesystem ta tha journal block thang located on
.IR external-journal .
Da external
journal must already done been pimped rockin tha command
.IP
.B mke2fs -O journal_dev
.I external-journal
.IP
Note that
.I external-journal
must done been pimped wit the
same block size as tha freshly smoked up filesystem.
In addition, while there is support fo' attaching
multiple filesystems ta a single external journal,
the Linux kernel and
.BR e2fsck (8)
do not currently support shared external journals yet.
.IP
Instead of specifyin a thang name directly,
.I external-journal
can also be specified by either
.BI LABEL= label
or
.BI UUID= UUID
to locate tha external journal by either tha volume label or UUID
stored up in tha ext2 superblock all up in tha start of tha journal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Use
.BR dumpe2fs (8)
to display a journal devicez volume label n' UUID.  See also the
.B -L
option of
.BR tune2fs (8).
.RE
.IP
Only one of the
.BR size " or " device
options can be given fo' a gangbangin' filesystem.
.TP
.BI \-l " filename"
Read tha wack blocks list from
.IR filename .
Note dat tha block numbers up in tha wack block list must be generated
usin tha same block size as used by
.BR mke2fs .
As a result, the
.B \-c
option to
.B mke2fs
is a much simpla n' less error-prone method of checkin a gangbangin' finger-lickin' disk fo' bad
blocks before formattin it, as
.B mke2fs
will automatically pass tha erect parametas ta the
.B badblocks
program.
.TP
.BI \-L " new-volume-label"
Set tha volume label fo' tha filesystem to
.IR new-volume-label .
Da maximum length of the
volume label is 16 bytes.
.TP
.BI \-m " reserved-blocks-percentage"
Specify tha cementage of tha filesystem blocks reserved for
the super-user n' shit.  This avoidz fragmentation, n' allows root-owned
daemons, such as
.BR syslogd (8),
to continue ta function erectly afta non-privileged processes are
prevented from freestylin ta tha filesystem.  Da default cementage
is 5%.
.TP
.BI \-M " last-mounted-directory"
Set tha last mounted directory fo' tha filesystem.  This might be useful
for tha sake of utilitizzles dat key off of tha last mounted directory to
determine where tha filesystem should be mounted.
.TP
.B \-n
Causes
.B mke2fs
to not straight-up create a gangbangin' filesystem yo, but display what tha fuck it
would do if it was ta create a gangbangin' filesystem.  This can be used to
determine tha location of tha backup superblocks fo' a particular
filesystem, so long as the
.B mke2fs
parametas dat was passed when the
filesystem was originally pimped is used again. I aint talkin' bout chicken n' gravy biatch.  (With the
.B \-n
option added, of course!)
.TP
.BI \-N " number-of-inodes"
Overrides tha default calculation of tha number of inodes dat should be
reserved fo' tha filesystem (which is based on tha number of blocks and
the
.I bytes-per-inode
ratio).  This allows tha user ta specify tha number
of desired inodes directly.
.TP
.BI \-o " creator-os"
Overrides tha default value of tha "creator operatin system" field of the
filesystem.  Da creator field is set by default ta tha name of tha OS the
.B mke2fs
executable was compiled for.
.TP
.B "\-O \fIfeature\fR[,...]"
Smoke a gangbangin' filesystem wit tha given features (filesystem options),
overridin tha default filesystem options.  Da features dat are
enabled by default is specified by the
.I base_features
relation, either up in the
.I [defaults]
section up in the
.B /etc/mke2fs.conf
configuration file,
or up in the
.I [fs_types]
subsections fo' tha usage types as specified by the
.B \-T
option, further modified by the
.I features
relation found up in the
.I [fs_types]
subsections fo' tha filesystem n' usage types.  See the
.BR mke2fs.conf (5)
manual page fo' mo' details.
Da filesystem type-specific configuration settin found up in the
.I [fs_types]
section will override tha global default found in
.IR [defaults] .
.sp
Da filesystem feature set is ghon be further edited
usin either tha feature set specified by dis option,
or if dis option aint given, by the
.I default_features
relation fo' tha filesystem type bein pimped, or up in the
.I [defaults]
section of tha configuration file.
.sp
Da filesystem feature set is comprised of a list of features, separated
by commas, dat is ta be enabled. Y'all KNOW dat shit, muthafucka!  To disable a gangbangin' feature, simply
prefix tha feature name wit a  caret ('^') character n' shit.  The
pseudo-filesystem feature "none" will clear all filesystem features.
.RS 1.2i
.TP
.B bigalloc
This feature enablez clustered allocation, so dat tha unit of
allocation be a juice of two number of blocks.  That is, each bit up in the
what had traditionally been known as tha block allocation bitmap now
indicates whether a cold-ass lil clusta is up in use or not, where a cold-ass lil clusta is by
default composed of 16 blocks.  This feature can decrease tha time
spent on bustin block allocation n' brangs smalla fragmentation, especially
for big-ass files.  Da size can be specified rockin the
.B \-C option.
.IP
.B Warning:
Da bigalloc feature is still under pimpment, n' may not be fully
supported wit yo' kernel or may have various bugs.  Please peep tha web
page http://ext4.wiki.kernel.org/index.php/Bigalloc fo' details.
.TP
.B dir_index
Use hashed b-trees ta speed up lookups up in big-ass directories.
.TP
.B extents
Instead of rockin tha indirect block scheme fo' storin tha location of
data blocks up in a inode, use extents instead. Y'all KNOW dat shit, muthafucka!  This be a much more
efficient encodin which speedz up filesystem access, especially for
pimpin' files.  (Note: both extent n' extents is accepted for
historical/backwardz compatibilitizzle reasons.)
.TP
.B filetype
Store file type shiznit up in directory entries.
.TP
.B flex_bg
Allow tha per-block crew metadata (allocation bitmaps n' inode tables)
to be placed anywhere on tha storage media.  In addition,
.B mke2fs
will place tha per-block crew metadata together startin all up in tha first
block crew of each "flex_bg group".   Da size of tha flex_bg group
can be specified rockin tha 
.B \-G
option.
.TP
.B has_journal
Smoke a ext3 journal (as if rockin the
.B \-j
option).
.TP
.B journal_dev
Smoke a external ext3 journal on tha given device
instead of a regular ext2 filesystem.
Note that
.I external-journal
must be pimped wit tha same
block size as tha filesystems dat is ghon be rockin dat shit.
.TP
.B large_file
Filesystem can contain filez dat is pimped outa than 2GB.  (Modern kernels
set dis feature automatically when a gangbangin' file > 2GB is pimped.)
.TP
.B quota
Smoke quota inodes (inode# 3 fo' userquota n' inode# 4 fo' crew quota) and
set dem up in tha superblock.  With dis feature, tha quotas is ghon be enabled
automatically when tha filesystem is mounted.
.TP
.B resize_inode
Reserve space so tha block crew descriptor table may grow up in tha future.
Useful fo' online resizin using
.BR resize2fs .
By default
.B mke2fs
will attempt ta reserve enough space so dat the
filesystem may grow ta 1024 times its initial size.  This can be chizzled
usin the
.B resize
extended option.
.TP
.B sparse_super
Smoke a gangbangin' filesystem wit fewer superblock backup copies
(saves space on big-ass filesystems).
.TP
.B uninit_bg
Smoke a gangbangin' filesystem without initializin all of tha block groups.  This
feature also enablez checksums n' highest-inode-used statistics up in each
blockgroup.  This feature can
speed up filesystem creation time noticeably (if lazy_itable_init is
enabled), n' can also reduce
.BR e2fsck
time dramatically.  It be only supported by tha ext4 filesystem in
recent Linux kernels.
.RE
.TP
.B \-q
Quiet execution. I aint talkin' bout chicken n' gravy biatch.  Useful if
.B mke2fs
is run up in a script.
.TP
.BI \-r " revision"
Set tha filesystem revision fo' tha freshly smoked up filesystem.  Note dat 1.2
kernels only support revision 0 filesystems.  Da default is to
create revision 1 filesystems.
.TP
.B \-S
Write superblock n' crew descriptors only.  This is useful if all of
the superblock n' backup superblocks is corrupted, n' a last-ditch
recovery method is desired. Y'all KNOW dat shit, muthafucka!  It causes
.B mke2fs
to reinitialize the
superblock n' crew descriptors, while not touchin tha inode table
and tha block n' inode bitmaps.  The
.B e2fsck
program should be run immediately afta dis option is used, n' there
is no guarantee dat any data is ghon be salvageable.  It be critical to
specify tha erect filesystem blocksize when rockin dis option,
or there is no chizzle of recovery.
.\" .TP
.\" .BI \-t " test"
.\" Peep tha thang fo' wack blocks before bustin tha file system
.\" rockin tha specified test.
.TP
.BI \-t " fs-type"
Specify tha filesystem type (i.e., ext2, ext3, ext4, etc.) dat is ta be pimped.
If dis option aint specified,
.B mke2fs
will pick a thugged-out default either via how
the command was run (for example, rockin a name of tha form mkfs.ext2,
mkfs.ext3, etc.) or via a thugged-out default as defined by the
.B /etc/mke2fs.conf
file.   This option controls which filesystem options is used by
default, based on the
.B fstypes
configuration stanza in
.BR /etc/mke2fs.conf .
.sp
If the
.B \-O
option is used ta explicitly add or remove filesystem options that
should be set up in tha newly pimped filesystem, the
resultin filesystem may not be supported by tha requested
.IR fs-type .
(e.g., "\fBmke2fs \-t ext3 \-O extent /dev/sdXX\fR" will create a
filesystem dat aint supported by tha ext3 implementation as found in
the Linux kernel; n' "\fBmke2fs \-t ext3 \-O ^has_journal /dev/hdXX\fR"
will create a gangbangin' filesystem dat aint gots a journal n' hence will not
be supported by tha ext3 filesystem code up in tha Linux kernel.)
.TP
.BI \-T " usage-type[,...]"
Specify how tha fuck tha filesystem is goin ta be used, so that
.B mke2fs
can chizzle optimal filesystem parametas fo' dat use.  Da usage
types dat is supported is defined up in tha configuration file
.BR /etc/mke2fs.conf .
Da user may specify one or mo' usage types
usin a cold-ass lil comma separated list.
.sp
If dis option be aint specified,
.B mke2fs
will pick a single default usage type based on tha size of tha filesystem to
be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha filesystem size is less than or equal ta 3 megabytes,
.B mke2fs
will use tha filesystem type
.IR floppy .
If tha filesystem size is pimped outa than 3 but less than or equal to
512 megabytes,
.BR mke2fs (8)
will use tha filesystem type
.IR lil' small-ass .
If tha filesystem size is pimped outa than or equal ta 4 terabytes but less than
16 terabytes,
.BR mke2fs (8)
will use tha filesystem type
.IR big-ass .
If tha filesystem size is pimped outa than or equal ta 16 terabytes,
.BR mke2fs (8)
will use tha filesystem type
.IR big-ass .
Otherwise,
.BR mke2fs (8)
will use tha default filesystem type
.IR default .
.TP
.BI \-U " UUID"
Smoke tha filesystem wit tha specified UUID.
.TP
.B \-v
Verbose execution.
.TP
.B \-V
Print tha version number of
.B mke2fs
and exit.
.SH ENVIRONMENT
.TP
.BI MKE2FS_SYNC
If set ta non-zero integer value, its value is used ta determine how tha fuck often
.BR sync (2)
is called durin inode table initialization.
.TP
.BI MKE2FS_CONFIG
Determines tha location of tha configuration file (see
.BR mke2fs.conf (5)).
.TP
.BI MKE2FS_FIRST_META_BG
If set ta non-zero integer value, its value is used ta determine first meta
block group. This is mostly fo' debuggin purposes.
.TP
.BI MKE2FS_DEVICE_SECTSIZE
If set ta non-zero integer value, its value is used ta determine physical
sector size of the
.IR thang .
.TP
.BI MKE2FS_SKIP_CHECK_MSG
If set, do not show tha message of filesystem automatic check caused by
mount count or check interval.
.SH AUTHOR
This version of
.B mke2fs
has been freestyled by Theodore Ts'o <tytso@mit.edu>.
.SH BUGS
.B mke2fs
accepts the
.B \-f
option but currently ignores it cuz tha second
extended file system do not support fragments yet.
.br
There may be other ones.  Please, report dem ta tha lyricist.
.SH AVAILABILITY
.B mke2fs
is part of tha e2fsprogs package n' be available from
http://e2fsprogs.sourceforge.net.
.SH SEE ALSO
.BR mke2fs.conf (5),
.BR badblocks (8),
.BR dumpe2fs (8),
.BR e2fsck (8),
.BR tune2fs (8)
