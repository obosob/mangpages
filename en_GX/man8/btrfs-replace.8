'\" t
.\"     Title: btrfs-replace
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/20/2014
.\"    Manual: Btrfs Manual
.\"    Source: Btrfs v3.17
.\"  Language: Gangsta
.\"
.TH "BTRFS\-REPLACE" "8" "10/20/2014" "Btrfs v3\&.17" "Btrfs Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
btrfs-replace \- replace devices managed by btrfs wit other device\&.
.SH "SYNOPSIS"
.sp
\fBbtrfs replace\fR \fI<subcommand>\fR \fI<args>\fR
.SH "DESCRIPTION"
.sp
\fBbtrfs replace\fR is used ta replace btrfs managed devices wit other device\&.
.sp
Note: dis aint currently supported fo' RAID5/6 profilez n' must use tha thang add/delete workaround\&.
.sp
It be recommended ta peep \fBbtrfs\-device\fR(8) fo' mo' details bout btrfs thang pimpment\&.
.SH "SUBCOMMAND"
.PP
\fBstart\fR [\-Bfr] \fI<srcdev>\fR|\fI<devid>\fR \fI<targetdev>\fR \fI<path>\fR
.RS 4
Replace thang of a funky-ass btrfs filesystem\&.
.sp
On a live filesystem, duplicate tha data ta tha target thang which is currently stored on tha source device\&. If tha source thang aint available no mo', or if tha \-r option is set, tha data is built only rockin tha RAID redundancy mechanisms\& fo' realz. Afta completion of tha operation, tha source thang is removed from tha filesystem\&. If the
\fI<srcdev>\fR
is a numerical value, it be assumed ta be tha thang id of tha filesystem which is mounted at
\fI<path>\fR, otherwise is is tha path ta tha source device\&. If tha source thang is disconnected, from tha system, you gotta use tha devid parameta format\&. The
\fI<targetdev>\fR
needz ta be same size or larger than the
\fI<srcdev>\fR\&.
.sp
\fBOptions\fR
.PP
\-r
.RS 4
only read from
\fI<srcdev>\fR
if no other zero\-defect mirror exists\&. (enable dis if yo' drive has fuckin shitloadz of read errors, tha access would be straight-up slow)
.RE
.PP
\-f
.RS 4
force rockin n' overwriting
\fI<targetdev>\fR
even if it be lookin like containin a valid btrfs filesystem\&.
.sp
A valid filesystem be assumed if a funky-ass btrfs superblock is found which gotz nuff a cold-ass lil erect checksum\&. Devices which is currently mounted is never allowed ta be used as the
\fI<targetdev>\fR\&. \-B:::: no background replace\&.
.RE
.RE
.PP
\fBstatus\fR [\-1] \fI<mount_point>\fR
.RS 4
Print status n' progress shiznit of a hustlin thang replace operation\&.
.sp
\fBOptions\fR
.PP
\-1
.RS 4
print once instead of print continuously until tha replace operation finishes (or is canceled)
.RE
.RE
.PP
\fBcancel\fR \fI<mount_point>\fR
.RS 4
Cancel a hustlin thang replace operation\&.
.RE
.SH "EXIT STATUS"
.sp
\fBbtrfs replace\fR returns a zero exit status if it succeeds\&. Non zero is returned up in case of failure\&.
.SH "AVAILABILITY"
.sp
\fBbtrfs\fR is part of btrfs\-progs\&. Please refer ta tha btrfs wiki \m[blue]\fBhttp://btrfs\&.wiki\&.kernel\&.org\fR\m[] fo' further details\&.
.SH "SEE ALSO"
.sp
\fBmkfs\&.btrfs\fR(8), \fBbtrfs\-device\fR(8),
