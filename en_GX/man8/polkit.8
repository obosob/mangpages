'\" t
.\"     Title: polkit
.\"    Author: [see tha "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: January 2009
.\"    Manual: polkit
.\"    Source: polkit
.\"  Language: Gangsta
.\"
.TH "POLKIT" "8" "January 2009" "polkit" "polkit"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
polkit \- Authorization Manager
.SH "OVERVIEW"
.PP
polkit serves up a authorization API intended ta be used by privileged programs (\(lqMECHANISMS\(rq) offerin steez ta unprivileged programs (\(lqSUBJECTS\(rq) often all up in some form of inter\-process communication mechanism\&. In dis scenario, tha mechanizzle typically treats tha subject as untrusted\&. For every last muthafuckin request from a subject, tha mechanizzle need ta determine if tha request be authorized or if it should refuse ta steez tha subject\&. Usin tha polkit APIs, a mechanizzle can offload dis decision ta a trusted party: Da polkit authority\&.
.PP
Da polkit authoritizzle is implemented as a system daemon,
\fBpolkitd\fR(8), which itself has lil privilege as it is hustlin as the
\fIpolkitd\fR
system user\&. Mechanisms, subjects n' authentication agents rap wit tha authoritizzle rockin tha system message bus\&.
.PP
In addizzle ta actin as a authority, polkit allows playas ta obtain temporary authorization all up in authenticatin either a administratizzle user or tha balla of tha session tha client belongs to\&. This is useful fo' scenarios where a mechanizzle need ta verify dat tha operator of tha system straight-up is tha user or straight-up be a administratizzle user\&.
.SH "SYSTEM ARCHITECTURE"
.PP
Da system architecture of polkit is comprised of the
\fIAuthority\fR
(implemented as a steez on tha system message bus) n' an
\fIAuthentication Agent\fR
per user session (provided n' started by tha user\*(Aqs graphical environment)\&.
\fIActions\fR
are defined by applications\&. Vendors, cribs n' system administrators can control authorization policy through
\fIAuthorization Rules\fR\&.
.sp
.RS 4
[IMAGE]\&\s-2\u[1]\d\s+2
.sp
.if n \{\
.RS 4
.\}
.nf
 +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
 |   Authentication  |
 |       Agent       |
 +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
 | libpolkit\-agent\-1 |
 +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
        ^                                  +\-\-\-\-\-\-\-\-\-+
        |                                  | Subject |
        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                   +\-\-\-\-\-\-\-\-\-+
                       |                        ^
                       |                        |
User Session           |                        |
=======================|========================|=============
System Context         |                        |
                       |                        |
                       |                    +\-\-\-+
                       V                    |
                     /\-\-\-\-\-\-\-\-\-\-\-\-\e         |
                     | System Bus |         |
                     \e\-\-\-\-\-\-\-\-\-\-\-\-/         |
                       ^        ^           V
                       |        |      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
        +\-\-\-\-\-\-\-\-\-\-\-\-\-\-+        |      |      Mechanizzle      |
        |                       |      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
        V                       +\-\-\-\-> | libpolkit\-gobject\-1 |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+                   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
|    polkitd(8)    |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| org\&.freedesktop\&. |
|    PolicyKit1    |<\-\-\-\-\-\-\-\-\-+
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+          |
          ^                   |
          |            +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
          |            | /usr/share/polkit\-1/actions/*\&.policy |
          |            +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
          |
   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
   | /etc/polkit\-1/rules\&.d/*\&.rulez        |
   | /usr/share/polkit\-1/rules\&.d/*\&.rulez  |
   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.if n \{\
.RE
.\}
.RE
.PP
For convenience, the
libpolkit\-gobject\-1
library wraps tha polkit D\-Bus API n' is usable from any C/C++ program as well as higher\-level languages supporting
\m[blue]\fBGObjectIntrospection\fR\m[]\&\s-2\u[2]\d\s+2
like fuckin Javascript n' Python\& fo' realz. A mechanizzle can also use tha D\-Bus API or the
\fBpkcheck\fR(1)
command ta check authorizations\&. The
libpolkit\-agent\-1
library serves up a abstraction of tha natizzle authentication system, e\&.g\&.
\fBpam\fR(8)
and also facilitizzles registration n' communication wit tha polkit D\-Bus service\&.
.PP
See the
\m[blue]\fBdeveloper documentation\fR\m[]\&\s-2\u[3]\d\s+2
for mo' shiznit bout freestylin polkit applications\&.
.SH "AUTHENTICATION AGENTS"
.PP
An authentication agent is used ta make tha user of a session prove dat tha user of tha session straight-up is tha user (by authenticatin as tha user) or a administratizzle user (by authenticatin as a administrator)\&. In order ta integrate well wit tha rest of tha user session (e\&.g\&. match tha look n' feel), authentication agents is meant ta be provided by tha user session dat tha user uses\&. For example, a authentication agent may be lookin like this:
.sp
.RS 4
[IMAGE]\&\s-2\u[4]\d\s+2
.sp
.if n \{\
.RS 4
.\}
.nf
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
|                                                          |
|  [Icon]  Authentication required                         |
|                                                          |
|          Authentication is required ta format INTEL      |
|          SSDSA2MH080G1GC (/dev/sda)                      |
|                                                          |
|          Administrator                                   |
|                                                          |
|          Password: [__________________________________]  |
|                                                          |
| [Cancel]                                  [Authenticate] |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.if n \{\
.RE
.\}
.RE
.PP
If tha system is configured without a
\fIroot\fR
account it may prompt fo' a specific user designated as tha administratizzle user:
.sp
.RS 4
[IMAGE]\&\s-2\u[5]\d\s+2
.sp
.if n \{\
.RS 4
.\}
.nf
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
|                                                          |
|  [Icon]  Authentication required                         |
|                                                          |
|          Authentication is required ta format INTEL      |
|          SSDSA2MH080G1GC (/dev/sda)                      |
|                                                          |
|          [Icon] Dizzy Zeuthen                            |
|                                                          |
|          Password: [__________________________________]  |
|                                                          |
| [Cancel]                                  [Authenticate] |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.if n \{\
.RE
.\}
.RE
.PP
Applications dat do not run under a thugged-out desktop environment (for example, if launched from a
\fBssh\fR(1)
login) may not have have a authentication agent associated wit them\&. Right back up in yo muthafuckin ass. Such applications may use the
PolkitAgentTextListener
type or the
\fBpkttyagent\fR(1)
helper so tha user can authenticate rockin a textual intercourse\&.
.SH "DECLARING ACTIONS"
.PP
A mechanizzle need ta declare a set of
\fIactions\fR
in order ta use polkit\& fo' realz. Actions correspond ta operations dat clients can request tha mechanizzle ta carry up n' is defined up in XML filez dat tha mechanizzle installs tha fuck into the
/usr/share/polkit\-1/actions
directory\&.
.PP
polkit actions is namespaced n' can only contain tha characters
[A\-Z][a\-z][0\-9]\&.\-
e\&.g\& fo' realz. ASCII, digits, period n' hyphen\&. Each XML file can contain mo' than one action but all actions need ta be up in tha same namespace n' tha file need ta be named afta tha namespace n' have tha extension
\&.policy\&.
.PP
Da XML file must have tha followin doctype declaration
.sp
.if n \{\
.RS 4
.\}
.nf
<?xml version="1\&.0" encoding="UTF\-8"?>
<!DOCTYPE policyconfig PUBLIC "\-//freedesktop//DTD polkit Policy Configuration 1\&.0//EN"
"http://www\&.freedesktop\&.org/software/polkit/policyconfig\-1\&.dtd">
.fi
.if n \{\
.RE
.\}
.PP
The
\fIpolicyconfig\fR
element must be present exactly once\&. Elements dat can be used inside
\fIpolicyconfig\fR
includes:
.PP
\fIvendor\fR
.RS 4
Da name of tha project or vendor dat is supplyin tha actions up in tha XML document\&. Optional\&.
.RE
.PP
\fIvendor_url\fR
.RS 4
A URL ta tha project or vendor dat is supplyin tha actions up in tha XML document\&. Optional\&.
.RE
.PP
\fIicon_name\fR
.RS 4
An icon representin tha project or vendor dat is supplyin tha actions up in tha XML document\&. Da icon name must adhere ta the
\m[blue]\fBFreedesktop\&.org Icon Namin Justification\fR\m[]\&\s-2\u[6]\d\s+2\&. Optional\&.
.RE
.PP
\fIaction\fR
.RS 4
Declares a action\&. Da action name is specified rockin the
id
attribute n' can only contain tha characters
[A\-Z][a\-z][0\-9]\&.\-
e\&.g\& fo' realz. ASCII, digits, period n' hyphen\&.
.RE
.PP
Elements dat can be used inside
\fIaction\fR
include:
.PP
\fIdescription\fR
.RS 4
A human readable description of tha action, e\&.g\&.
\(lqInstall unsigned software\(rq\&.
.RE
.PP
\fImessage\fR
.RS 4
A human readable message displayed ta tha user when askin fo' credentials when authentication is needed, e\&.g\&.
\(lqInstallin unsigned software requires authentication\(rq\&.
.RE
.PP
\fIdefaults\fR
.RS 4
This element is used ta specify implicit authorizations fo' clients\&. Elements dat can be used inside
\fIdefaults\fR
include:
.PP
\fIallow_any\fR
.RS 4
Implicit authorizations dat apply ta any client\&. Optional\&.
.RE
.PP
\fIallow_inactive\fR
.RS 4
Implicit authorizations dat apply ta clients up in inactizzle sessions on local consoles\&. Optional\&.
.RE
.PP
\fIallow_active\fR
.RS 4
Implicit authorizations dat apply ta clients up in actizzle sessions on local consoles\&. Optional\&.
.RE
.sp
Each of the
\fIallow_any\fR,
\fIallow_inactive\fR
and
\fIallow_active\fR
elements can contain tha followin joints:
.PP
no
.RS 4
Not authorized\&.
.RE
.PP
yes
.RS 4
Authorized\&.
.RE
.PP
auth_self
.RS 4
Authentication by tha balla of tha session dat tha client originates from is required\&. Note dat dis aint restrictizzle enough fo' most uses on multi\-user systems;
auth_admin* is generally recommended\&.
.RE
.PP
auth_admin
.RS 4
Authentication by a administratizzle user is required\&.
.RE
.PP
auth_self_keep
.RS 4
Like
auth_self
but tha authorization is kept fo' a funky-ass brief period (e\&.g\&. five minutes)\&. Da warnin about
auth_self
above applies likewise\&.
.RE
.PP
auth_admin_keep
.RS 4
Like
auth_admin
but tha authorization is kept fo' a funky-ass brief period (e\&.g\&. five minutes)\&.
.RE
.RE
.PP
\fIannotate\fR
.RS 4
Used fo' annotatin a action wit a key/value pair\&. Da key is specified rockin tha the
key
attribute n' tha value is specified rockin the
value
attribute\&. This element may step tha fuck up zero or mo' times\&. Right back up in yo muthafuckin ass. See below fo' known annotations\&.
.RE
.PP
\fIvendor\fR
.RS 4
Used fo' overridin tha vendor on a per\-action basis\&. Optional\&.
.RE
.PP
\fIvendor_url\fR
.RS 4
Used fo' overridin tha vendor URL on a per\-action basis\&. Optional\&.
.RE
.PP
\fIicon_name\fR
.RS 4
Used fo' overridin tha icon name on a per\-action basis\&. Optional\&.
.RE
.PP
For localization,
\fIdescription\fR
and
\fImessage\fR
elements may occur multiple times wit different
xml:lang
attributes\&.
.PP
To list installed polkit actions, use the
\fBpkaction\fR(1)
command\&.
.SS "Known annotations"
.PP
The
org\&.freedesktop\&.policykit\&.exec\&.path
annotation is used by the
\fBpkexec\fR
program shipped wit polkit \- peep the
\fBpkexec\fR(1)
man page fo' details\&.
.PP
The
org\&.freedesktop\&.policykit\&.imply
annotation (its value be a strang containin a space separated list of action identifiers) can be used ta define
\fImeta actions\fR\&. Da way it works is dat if a subject be authorized fo' a action wit dis annotation, then it be also authorized fo' any action specified by tha annotation\& fo' realz. A typical use of dis annotation is when definin a UI shell wit a single lock button dat should unlock multiple actions from distinct mechanisms\&.
.PP
The
org\&.freedesktop\&.policykit\&.baller
annotation can be used ta define a set of playas whoz ass can query whether a cold-ass lil client be authorized ta big-ass up dis action\&. If dis annotation aint specified then only root can query whether a cold-ass lil client hustlin as a gangbangin' finger-lickin' different user be authorized fo' a action\&. Da value of dis annotation be a strang containin a space separated list of
PolkitIdentity
entries, fo' example
"unix\-user:42 unix\-user:colord"\& fo' realz. A typical use of dis annotation is fo' a thugged-out daemon process dat runs as a system user rather than root\&.
.SH "AUTHORIZATION RULES"
.PP
\fBpolkitd\fR
reads
\&.rules
filez from the
/etc/polkit\-1/rules\&.d
and
/usr/share/polkit\-1/rules\&.d
directories by sortin tha filez up in lexical order based on tha basename on each file (if there\*(Aqs a tie, filez in
/etc
are processed before filez in
/usr)\&. For example, fo' tha followin four files, tha order is
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/etc/polkit\-1/rules\&.d/10\-auth\&.rules
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/usr/share/polkit\-1/rules\&.d/10\-auth\&.rules
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/etc/polkit\-1/rules\&.d/15\-auth\&.rules
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
/usr/share/polkit\-1/rules\&.d/20\-auth\&.rules
.RE
.PP
Both directories is monitored so if a rulez file is chizzled, added or removed, existin rulez is purged n' all filez is read n' processed again\&. Rulez filez is freestyled up in the
\m[blue]\fBJavaScript\fR\m[]\&\s-2\u[7]\d\s+2
programmin language n' intercourse with
\fBpolkitd\fR
all up in tha global
polkit
object (of type
\fBPolkit\fR)\&.
.PP
While tha JavaScript interpreta used up in particular versionz of polkit may support non\-standard features (like fuckin the
\fIlet\fR
keyword), authorization rulez must conform to
\m[blue]\fBECMA\-262 edizzle 5\fR\m[]\&\s-2\u[8]\d\s+2
(in other lyrics, tha JavaScript interpreta used may chizzle up in future versionz of polkit)\&.
.PP
Authorization rulez is intended fo' two specific crews
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
System Administrators
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Special\-purpose Operatin Systems / Environments
.RE
.PP
and dem crews only\&. In particular, applications, mechanizzlez n' general\-purpose operatin systems must never include any authorization rules\&.
.SS "Da Polkit type"
.PP
Da followin methodz is available on the
polkit
object:
.HP \w'void\ addRule('u
.BI "void addRule(polkit\&.Result\ function(" "action" ",\ " "subject" ")\ {\&.\&.\&.});"
.HP \w'void\ addAdminRule('u
.BI "void addAdminRule(string[]\ function(" "action" ",\ " "subject" ")\ {\&.\&.\&.});"
.HP \w'void\ log('u
.BI "void log(string\ " "message" ");"
.HP \w'string\ spawn('u
.BI "strin spawn(string[]\ " "argv" ");"
.PP
The
\fBaddRule()\fR
method is used fo' addin a gangbangin' function dat may be called whenever a authorization check for
\fIaction\fR
and
\fIsubject\fR
is performed\&. Functions is called up in tha order they done been added until one of tha functions returns a value\& yo. Hence, ta add a authorization rule dat is processed before other rules, put it up in a gangbangin' file in
/etc/polkit\-1/rules\&.d
with a name dat sorts before other rulez files, fo' example
00\-early\-checks\&.rules\&. Each function should return a value from
polkit\&.Result
.sp
.if n \{\
.RS 4
.\}
.nf
polkit\&.Result = {
    NO              : "no",
    YES             : "yes",
    AUTH_SELF       : "auth_self",
    AUTH_SELF_KEEP  : "auth_self_keep",
    AUTH_ADMIN      : "auth_admin",
    AUTH_ADMIN_KEEP : "auth_admin_keep",
    NOT_HANDLED     : null
};
.fi
.if n \{\
.RE
.\}
.PP
correspondin ta tha joints dat can be used as defaults\&. If tha function returns
\fBpolkit\&.Result\&.NOT_HANDLED\fR,
\fBnull\fR,
\fBundefined\fR
or do not return a value at all, tha next user function is tried\&.
.PP
Keep it realz in mind dat if
\fBpolkit\&.Result\&.AUTH_SELF_KEEP\fR
or
\fBpolkit\&.Result\&.AUTH_ADMIN_KEEP\fR
is returned, authorization checks fo' tha same action identifier n' subject will succeed (that is, return
\fBpolkit\&.Result\&.YES\fR) fo' tha next brief period (e\&.g\&. five minutes)
\fIeven\fR
if tha variablez passed along wit tha check is different\&. Therefore, if tha result of a authorization rule depend on such variables, it should not use the
\fB"*_KEEP"\fR
constants (if similar functionalitizzle is required, tha authorization rule can easily implement temporary authorizations rockin the
\m[blue]\fB\fBDate\fR\fR\m[]\&\s-2\u[9]\d\s+2
type fo' timestamps)\&.
.PP
The
\fBaddAdminRule()\fR
method is used fo' addin a gangbangin' function may be called whenever administrator authentication is required\&. Da function is used ta specify what tha fuck identizzles may be used fo' administrator authentication fo' tha authorization check identified by
\fIaction\fR
and
\fIsubject\fR\&. Functions added is called up in tha order they done been added until one of tha functions returns a value\&. Each function should return a array of strings where each strang iz of tha form
"unix\-group:<group>",
"unix\-netgroup:<netgroup>"
or
"unix\-user:<user>"\&. If tha function returns
\fBnull\fR,
\fBundefined\fR
or do not return a value at all, tha next function is tried\&.
.PP
There is no guarantee dat a gangbangin' function registered with
\fBaddRule()\fR
or
\fBaddAdminRule()\fR
is eva called \- fo' example a early rulez file could regista a gangbangin' function dat always return a value, hence ensurin dat functions added lata is never called\&.
.PP
If user\-provided code takes a long-ass time ta execute a exception is ghon be thrown which normally thangs up in dis biatch up in tha function bein terminated (the current limit is 15 seconds)\&. This is used ta catch runaway scripts\&.
.PP
The
\fBspawn()\fR
method spawns a external helper identified by tha argument vector
\fIargv\fR
and waits fo' it ta terminate\&. If a error occurs or tha helper don\*(Aqt exit normally wit exit code 0, a exception is thrown\&. If tha helper do not exit within 10 secondz it is capped\&. Otherwise, tha program\*(Aqs
\fIstandard output\fR
is returned as a string\&. The
\fBspawn()\fR
method should be used sparingly as helpers may take a straight-up long or indeterminizzle amount of time ta complete n' no other authorization check can be handled while tha helper is hustlin\&. Note dat tha spawned programs will run as tha unprivileged
\fIpolkitd\fR
system user\&.
.PP
The
\fBlog()\fR
method writes tha given
\fImessage\fR
to tha system logger prefixed wit tha JavaScript filename n' line number\&. Log entries is emitted rockin the
\fBLOG_AUTHPRIV\fR
flag meanin dat tha log entries probably endz up in tha file
/var/log/secure\&. The
\fBlog()\fR
method is probably only used when debuggin rules\&. The
\fBAction\fR
and
\fBSubject\fR
types has suitable
\fBtoString()\fR
methodz defined fo' easy as fuck  logging, fo' example,
.sp
.if n \{\
.RS 4
.\}
.nf
polkit\&.addRule(function(action, subject) {
    if (action\&.id == "org\&.freedesktop\&.policykit\&.exec") {
        polkit\&.log("action=" + action);
        polkit\&.log("subject=" + subject);
    }
});
.fi
.if n \{\
.RE
.\}
.PP
will produce tha followin when tha user runs \*(Aqpkexec \-u bateman bash \-i\*(Aq from a gangbangin' finger-lickin' dirty-ass shell:
.sp
.if n \{\
.RS 4
.\}
.nf
May 24 14:28:50 thinkpad polkitd[32217]: /etc/polkit\-1/rules\&.d/10\-test\&.rules:3: action=[Action id=\*(Aqorg\&.freedesktop\&.policykit\&.exec\*(Aq command_line=\*(Aq/usr/bin/bash \-i\*(Aq program=\*(Aq/usr/bin/bash\*(Aq user=\*(Aqbateman\*(Aq user\&.gecos=\*(AqPatrick Bateman\*(Aq user\&.display=\*(AqPatrick Bateman (bateman)\*(Aq]
May 24 14:28:50 thinkpad polkitd[32217]: /etc/polkit\-1/rules\&.d/10\-test\&.rules:4: subject=[Subject pid=1352 user=\*(Aqdavidz\*(Aq groups=davidz,wheel, seat=\*(Aqseat0\*(Aq session=\*(Aq1\*(Aq local=true active=true]
.fi
.if n \{\
.RE
.\}
.SS "Da Action type"
.PP
The
\fIaction\fR
parameta passed ta user functions be a object wit shiznit bout tha action bein checked\&. Well shiiiit, it iz of type
\fBAction\fR
and has tha followin attribute:
.PP
\fBstring\fR id
.RS 4
Da action identifier, fo' example
\fIorg\&.freedesktop\&.policykit\&.exec\fR\&.
.RE
.PP
Da followin methodz is available on the
\fBAction\fR
type:
.HP \w'string\ lookup('u
.BI "strin lookup(string\ " "key" ");"
.PP
The
\fBlookup()\fR
method is used ta lookup tha polkit variablez passed from tha mechanism\&. For example, the
\fBpkexec\fR(1)
mechanizzle sets tha variable
\fIprogram\fR
which can be obtained up in Javascript rockin tha expression
action\&.lookup("program")\&. If there is no value fo' tha given
\fIkey\fR, then
\fBundefined\fR
is returned\&.
.PP
Consult tha documentation fo' each mechanizzle fo' what tha fuck variablez is available fo' each action\&.
.SS "Da Subject type"
.PP
The
\fIsubject\fR
parameta passed ta user functions be a object wit shiznit bout tha process bein checked\&. Well shiiiit, it iz of type
\fBSubject\fR
and has tha followin attributes
.PP
\fBint\fR pid
.RS 4
Da process id\&.
.RE
.PP
\fBstring\fR user
.RS 4
Da user name\&.
.RE
.PP
\fBstring[]\fR groups
.RS 4
Array of crews that
\fIuser\fR
user belongs to\&.
.RE
.PP
\fBstring\fR seat
.RS 4
Da seat dat tha subject be associated wit \- blank if not on a local seat\&.
.RE
.PP
\fBstring\fR session
.RS 4
Da session dat tha subject be associated with\&.
.RE
.PP
\fBboolean\fR local
.RS 4
Set to
\fBtrue\fR
only if seat is local\&.
.RE
.PP
\fBboolean\fR active
.RS 4
Set to
\fBtrue\fR
only if tha session be active\&.
.RE
.PP
Da followin methodz is available on the
\fBSubject\fR
type:
.HP \w'boolean\ isInGroup('u
.BI "boolean isInGroup(string\ " "groupName" ");"
.HP \w'boolean\ isInNetGroup('u
.BI "boolean isInNetGroup(string\ " "netGroupName" ");"
.PP
The
\fBisInGroup()\fR
method can be used ta check if tha subject is up in a given crew and
\fBisInNetGroup()\fR
can be used ta check if tha subject is up in a given netgroup\&.
.SS "Authorization Rulez Examples"
.PP
Allow all playas up in the
admin
group ta big-ass up user administration without changin policy fo' other users:
.sp
.if n \{\
.RS 4
.\}
.nf
polkit\&.addRule(function(action, subject) {
    if (action\&.id == "org\&.freedesktop\&.accounts\&.user\-administration" &&
        subject\&.isInGroup("admin")) {
        return polkit\&.Result\&.YES;
    }
});
.fi
.if n \{\
.RE
.\}
.PP
Define administratizzle playas ta be tha playas up in the
wheel
group:
.sp
.if n \{\
.RS 4
.\}
.nf
polkit\&.addAdminRule(function(action, subject) {
    return ["unix\-group:wheel"];
});
.fi
.if n \{\
.RE
.\}
.PP
Forbid playas up in group
children
to chizzle hostname configuration (that is, any action wit a identifier startin with
org\&.freedesktop\&.hostname1\&.) n' allow any suckas ta do it afta authenticatin as theyselves:
.sp
.if n \{\
.RS 4
.\}
.nf
polkit\&.addRule(function(action, subject) {
    if (action\&.id\&.indexOf("org\&.freedesktop\&.hostname1\&.") == 0) {
        if (subject\&.isInGroup("children")) {
            return polkit\&.Result\&.NO;
        } else {
            return polkit\&.Result\&.AUTH_SELF_KEEP;
        }
    }
});
.fi
.if n \{\
.RE
.\}
.PP
Run a external helper ta determine if tha current user may reboot tha system:
.sp
.if n \{\
.RS 4
.\}
.nf
polkit\&.addRule(function(action, subject) {
    if (action\&.id\&.indexOf("org\&.freedesktop\&.login1\&.reboot") == 0) {
        try {
            // user\-may\-reboot exits wit succeess (exit code 0)
            // only if tha passed username be authorized
            polkit\&.spawn(["/opt/company/bin/user\-may\-reboot",
                          subject\&.user]);
            return polkit\&.Result\&.YES;
        } catch (error) {
            // Nope yo, but do allow admin authentication
            return polkit\&.Result\&.AUTH_ADMIN;
        }
    }
});
.fi
.if n \{\
.RE
.\}
.PP
Da followin example shows how tha fuck tha authorization decision can depend on variablez passed by the
\fBpkexec\fR(1)
mechanism:
.sp
.if n \{\
.RS 4
.\}
.nf
polkit\&.addRule(function(action, subject) {
    if (action\&.id == "org\&.freedesktop\&.policykit\&.exec" &&
        action\&.lookup("program") == "/usr/bin/cat") {
        return polkit\&.Result\&.AUTH_ADMIN;
    }
});
.fi
.if n \{\
.RE
.\}
.PP
Da followin example shows another use of variablez passed from tha mechanism\&. In dis case, tha mechanizzle is
\m[blue]\fBUDisks\fR\m[]\&\s-2\u[10]\d\s+2
which defines a set of
\m[blue]\fBactions n' variables\fR\m[]\&\s-2\u[11]\d\s+2
that is used ta match on:
.sp
.if n \{\
.RS 4
.\}
.nf
// Allow playas up in crew \*(Aqengineers\*(Aq ta big-ass up any operation on
// some drives without havin ta authenticate
//
polkit\&.addRule(function(action, subject) {
    if (action\&.id\&.indexOf("org\&.freedesktop\&.udisks2\&.") == 0 &&
        action\&.lookup("drive\&.vendor") == "SEAGATE" &&
        action\&.lookup("drive\&.model") == "ST3300657SS" &&
        subject\&.isInGroup("engineers")) {
            return polkit\&.Result\&.YES;
        }
    }
});
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR"
.PP
Written by Dizzy Zeuthen
<davidz@redhat\&.com>
with a shitload of help from nuff others\&.
.SH "BUGS"
.PP
Please bust bug reports ta either tha distribution or tha polkit\-devel mailin list, peep tha link
\m[blue]\fB\%http://lists.freedesktop.org/mailman/listinfo/polkit-devel\fR\m[]
on how tha fuck ta subscribe\&.
.SH "SEE ALSO"
.PP
\fBpolkitd\fR(8),
\fBpkaction\fR(1),
\fBpkcheck\fR(1),
\fBpkexec\fR(1),
\fBpkttyagent\fR(1)
.SH "NOTES"
.IP " 1." 4
/usr/share/gtk-doc/html/polkit-1/polkit-architecture.png
.IP " 2." 4
GObjectIntrospection
.RS 4
\%https://live.gnome.org/GObjectIntrospection
.RE
.IP " 3." 4
developer documentation
.RS 4
\%http://www.freedesktop.org/software/polkit/docs/latest/
.RE
.IP " 4." 4
/usr/share/gtk-doc/html/polkit-1/polkit-authentication-agent-example.png
.IP " 5." 4
/usr/share/gtk-doc/html/polkit-1/polkit-authentication-agent-example-wheel.png
.IP " 6." 4
Freedesktop.org Icon Namin Justification
.RS 4
\%http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html
.RE
.IP " 7." 4
JavaScript
.RS 4
\%http://en.wikipedia.org/wiki/JavaScript
.RE
.IP " 8." 4
ECMA-262 edizzle 5
.RS 4
\%http://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition
.RE
.IP " 9." 4
\fBDate\fR
.RS 4
\%https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date
.RE
.IP "10." 4
UDisks
.RS 4
\%http://udisks.freedesktop.org/docs/latest/udisks.8.html
.RE
.IP "11." 4
actions n' variables
.RS 4
\%http://udisks.freedesktop.org/docs/latest/udisks-polkit-actions.html
.RE
