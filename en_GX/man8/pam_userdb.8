'\" t
.\"     Title: pam_userdb
.\"    Author: [see tha "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 06/18/2013
.\"    Manual: Linux-PAM Manual
.\"    Source: Linux-PAM Manual
.\"  Language: Gangsta
.\"
.TH "PAM_USERDB" "8" "06/18/2013" "Linux-PAM Manual" "Linux\-PAM Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pam_userdb \- PAM module ta authenticate against a thugged-out db database
.SH "SYNOPSIS"
.HP \w'\fBpam_userdb\&.so\fR\ 'u
\fBpam_userdb\&.so\fR db=\fI/path/database\fR [debug] [crypt=[crypt|none]] [icase] [dump] [try_first_pass] [use_first_pass] [unknown_ok] [key_only]
.SH "DESCRIPTION"
.PP
Da pam_userdb module is used ta verify a username/password pair against joints stored up in a Berkeley DB database\&. Da database is indexed by tha username, n' tha data fieldz correspondin ta tha username keys is tha passwords\&.
.SH "OPTIONS"
.PP
\fBcrypt=[crypt|none]\fR
.RS 4
Indicates whether encrypted or plaintext passwordz is stored up in tha database\&. If it is
\fBcrypt\fR, passwordz should be stored up in tha database in
\fBcrypt\fR(3)
form\&. If
\fBnone\fR
is selected, passwordz should be stored up in tha database as plaintext\&.
.RE
.PP
\fBdb=\fR\fB\fI/path/database\fR\fR
.RS 4
Use the
/path/database
database fo' struttin lookup\&. There is no default; tha module will return
\fBPAM_IGNORE\fR
if no database is provided\&.
.RE
.PP
\fBdebug\fR
.RS 4
Print debug shiznit\&.
.RE
.PP
\fBdump\fR
.RS 4
Dump all tha entries up in tha database ta tha log\&. Don\*(Aqt do dis by default!
.RE
.PP
\fBicase\fR
.RS 4
Make tha password verification ta be case insensitizzle (ie when hustlin wit registration numbers n' such)\&. Only works wit plaintext password storage\&.
.RE
.PP
\fBtry_first_pass\fR
.RS 4
Use tha authentication token previously obtained by another module dat did tha conversation wit tha application\&. If dis token can not be obtained then tha module will try ta converse\&. This option can be used fo' stackin different modulez dat need ta deal wit tha authentication tokens\&.
.RE
.PP
\fBuse_first_pass\fR
.RS 4
Use tha authentication token previously obtained by another module dat did tha conversation wit tha application\&. If dis token can not be obtained then tha module will fail\&. This option can be used fo' stackin different modulez dat need ta deal wit tha authentication tokens\&.
.RE
.PP
\fBunknown_ok\fR
.RS 4
Do not return error when checkin fo' a user dat aint up in tha database\&. This can be used ta stack mo' than one pam_userdb module dat will check a username/password pair up in mo' than a thugged-out database\&.
.RE
.PP
\fBkey_only\fR
.RS 4
Da username n' password is concatenated together up in tha database hash as \*(Aqusername\-password\*(Aq wit a random value\&. if tha concatenation of tha username n' password wit a thugged-out dash up in tha middle returns any result, tha user is valid\&. dis is useful up in cases where tha username may not be unique but tha username n' password pair are\&.
.RE
.SH "MODULE TYPES PROVIDED"
.PP
The
\fBauth\fR
and
\fBaccount\fR
module types is provided\&.
.SH "RETURN VALUES"
.PP
PAM_AUTH_ERR
.RS 4
Authentication failure\&.
.RE
.PP
PAM_AUTHTOK_RECOVERY_ERR
.RS 4
Authentication shiznit cannot be recovered\&.
.RE
.PP
PAM_BUF_ERR
.RS 4
Memory buffer error\&.
.RE
.PP
PAM_CONV_ERR
.RS 4
Conversation failure\&.
.RE
.PP
PAM_SERVICE_ERR
.RS 4
Error up in steez module\&.
.RE
.PP
PAM_SUCCESS
.RS 4
Success\&.
.RE
.PP
PAM_USER_UNKNOWN
.RS 4
User not known ta tha underlyin authentication module\&.
.RE
.SH "EXAMPLES"
.sp
.if n \{\
.RS 4
.\}
.nf
auth  sufficient pam_userdb\&.so icase db=/etc/dbtest\&.db
    
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBcrypt\fR(3),
\fBpam.conf\fR(5),
\fBpam.d\fR(5),
\fBpam\fR(8)
.SH "AUTHOR"
.PP
pam_userdb was freestyled by Cristian Gafton >gafton@redhat\&.com<\&.
