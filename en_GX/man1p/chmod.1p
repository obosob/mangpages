.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CHMOD" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" chmod 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
chmod \- chizzle tha file modes
.SH SYNOPSIS
.LP
\fBchmod\fP \fB[\fP\fB-R\fP\fB]\fP \fImode file\fP \fB...\fP
.SH DESCRIPTION
.LP
Da \fIchmod\fP utilitizzle shall chizzle any or all of tha file mode bits
of tha file named by each \fIfile\fP operand up in tha way
specified by tha \fImode\fP operand.
.LP
It be implementation-defined whether n' how tha fuck tha \fIchmod\fP utility
affects any alternate or additionizzle file access control
mechanizzle (see tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Section 4.4, File Access Permissions) bein used fo' tha specified
file.
.LP
Only a process whose effectizzle user ID matches tha user ID of the
file, or a process wit tha appropriate privileges, shall be
permitted ta chizzle tha file mode bitz of a gangbangin' file.
.SH OPTIONS
.LP
Da \fIchmod\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin option shall be supported:
.TP 7
\fB-R\fP
Recursively chizzle file mode bits, n' you can put dat on yo' toast. For each \fIfile\fP operand that
names a gangbangin' finger-lickin' directory, \fIchmod\fP shall chizzle tha file mode
bitz of tha directory n' all filez up in tha file hierarchy below dat shit.
.sp
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fImode\fP
Represents tha chizzle ta be made ta tha file mode bitz of each file
named by one of tha \fIfile\fP operands; peep tha EXTENDED
DESCRIPTION section.
.TP 7
\fIfile\fP
A pathname of a gangbangin' file whose file mode bits shall be modified.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIchmod\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
Da \fImode\fP operand shall be either a \fIsymbolic_mode\fP expression
or a non-negatizzle octal integer n' shit. The
\fIsymbolic_mode\fP form is busted lyrics bout by tha grammar lata up in this
section.
.LP
Each \fBclause\fP shall specify a operation ta be performed on the
current file mode bitz of each \fIfile\fP. Da operations
shall be performed on each \fIfile\fP up in tha order up in which tha \fBclause\fPs
are specified.
.LP
Da \fBwho\fP symbols \fBu\fP, \fBg\fP, n' \fBo\fP shall specify
the \fIuser\fP, \fIgroup\fP, n' \fIother\fP parts of
the file mode bits, respectively fo' realz. A \fBwho\fP consistin of tha symbol
\fBa\fP shall be equivalent ta \fBugo\fP.
.LP
Da \fBperm\fP symbols \fBr\fP, \fBw\fP, n' \fBx\fP represent the
\fIread\fP, \fIwrite\fP, n' \fIexecute\fP/
\fIsearch\fP portionz of file mode bits, respectively. Da \fBperm\fP
symbol \fBs\fP shall represent the
\fIset-user-ID-on-execution\fP (when \fBwho\fP gotz nuff or implies
\fBu\fP) n' \fIset-group-ID-on-execution\fP (when
\fBwho\fP gotz nuff or implies \fBg\fP) bits.
.LP
Da \fBperm\fP symbol \fBX\fP shall represent tha execute/search portion
of tha file mode bits if tha file be a gangbangin' finger-lickin' directory or
if tha current (unmodified) file mode bits have at least one of the
execute bits (S_IXUSR, S_IXGRP, or S_IXOTH) set. Well shiiiit, it shall be
ignored if tha file aint a gangbangin' finger-lickin' directory n' none of tha execute bits
are set up in tha current file mode bits.
.LP
Da \fBpermcopy\fP symbols \fBu\fP, \fBg\fP, n' \fBo\fP shall represent
the current permissions associated wit tha user,
group, n' other partz of tha file mode bits, respectively. For the
remainder of dis section, \fBperm\fP refers ta the
non-terminals \fBperm\fP n' \fBpermcopy\fP up in tha grammar.
.LP
If multiple \fBactionlist\fPs is grouped wit a single \fBwholist\fP
in tha grammar, each \fBactionlist\fP shall be applied
in tha order specified wit dat \fBwholist\fP. Da \fIop\fP symbols
shall represent tha operation performed, as bigs up:
.TP 7
\fB+\fP
If \fBperm\fP aint specified, tha \fB'+'\fP operation shall not
change tha file mode bits, n' you can put dat on yo' toast. 
.LP
If \fBwho\fP aint specified, tha file mode bits represented by \fBperm\fP
for tha baller, group, n' other permissions,
except fo' dem wit correspondin bits up in tha file mode creation
mask of tha invokin process, shall be set.
.LP
Otherwise, tha file mode bits represented by tha specified \fBwho\fP
and \fBperm\fP joints shall be set.
.TP 7
\fB-\fP
If \fBperm\fP aint specified, tha \fB'-'\fP operation shall not
change tha file mode bits, n' you can put dat on yo' toast. 
.LP
If \fBwho\fP aint specified, tha file mode bits represented by \fBperm\fP
for tha baller, group, n' other permissions,
except fo' dem wit correspondin bits up in tha file mode creation
mask of tha invokin process, shall be cleared.
.LP
Otherwise, tha file mode bits represented by tha specified \fBwho\fP
and \fBperm\fP joints shall be cleared.
.TP 7
\fB=\fP
Clear tha file mode bits specified by tha \fBwho\fP value, or, if
no \fBwho\fP value is specified, all of tha file mode bits
specified up in dis volume of IEEE\ Std\ 1003.1-2001. 
.LP
If \fBperm\fP aint specified, tha \fB'='\fP operation shall make
no further modifications ta tha file mode bits.
.LP
If \fBwho\fP aint specified, tha file mode bits represented by \fBperm\fP
for tha baller, group, n' other permissions,
except fo' dem wit correspondin bits up in tha file mode creation
mask of tha invokin process, shall be set.
.LP
Otherwise, tha file mode bits represented by tha specified \fBwho\fP
and \fBperm\fP joints shall be set.
.sp
.LP
When rockin tha symbolic mode form on a regular file, it is implementation-defined
whether or not:
.IP " *" 3
Requests ta set tha set-user-ID-on-execution or set-group-ID-on-execution
bit when all execute bits is currently clear n' none
are bein set is ignored.
.LP
.IP " *" 3
Requests ta clear all execute bits also clear tha set-user-ID-on-execution
and set-group-ID-on-execution bits.
.LP
.IP " *" 3
Requests ta clear tha set-user-ID-on-execution or set-group-ID-on-execution
bits when all execute bits is currently clear are
ignored. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat if tha command \fIls\fP \fB-l\fP \fIfile\fP writes
an \fIs\fP up in the
posizzle indicatin dat tha set-user-ID-on-execution or set-group-ID-on-execution
is set, tha commandz \fIchmod\fP \fBu-s\fP
\fIfile\fP or \fIchmod\fP \fBg-s\fP \fIfile\fP, respectively, shall
not be ignored.
.LP
.LP
When rockin tha symbolic mode form on other file types, it is implementation-defined
whether or not requests ta set or clear the
set-user-ID-on-execution or set-group-ID-on-execution bits is honored.
.LP
If tha \fBwho\fP symbol \fBo\fP is used up in conjunction wit tha \fBperm\fP
symbol \fBs\fP wit no other \fBwho\fP symbols
bein specified, tha set-user-ID-on-execution n' set-group-ID-on-execution
bits shall not be modified. Y'all KNOW dat shit, muthafucka! Well shiiiit, it shall not be a error to
specify tha \fBwho\fP symbol \fBo\fP up in conjunction wit tha \fBperm\fP
symbol \fBs\fP.
.LP
Da \fBperm\fP symbol \fBt\fP shall specify tha S_ISVTX bit. When
used wit a gangbangin' file of type directory, it can be used wit the
\fBwho\fP symbol \fBa\fP, or wit no \fBwho\fP symbol. Well shiiiit, it shall not
be a error ta specify a \fBwho\fP symbol of \fBu\fP,
\fBg\fP, or \fBo\fP up in conjunction wit tha \fBperm\fP symbol \fBt\fP,
but tha meanin of these combinations is unspecified.
Da effect when rockin tha \fBperm\fP symbol \fBt\fP wit any file
type other than directory is unspecified. Y'all KNOW dat shit, muthafucka! 
.LP
For a octal integer \fImode\fP operand, tha file mode bits shall
be set straight-up.
.LP
For each bit set up in tha octal number, tha correspondin file permission
bit shown up in tha followin table shall be set; all other
file permission bits shall be cleared. Y'all KNOW dat shit, muthafucka! For regular files, fo' each
bit set up in tha octal number correspondin ta the
set-user-ID-on-execution or tha set-group-ID-on-execution, bits shown
in tha followin table shall be set; if these bits is not
set up in tha octal number, they is cleared. Y'all KNOW dat shit, muthafucka! For other file types, it
is implementation-defined whether or not requests ta set or
clear tha set-user-ID-on-execution or set-group-ID-on-execution bits
are honored.
.TS C
center; l1 l1 l1 l1 l1 l1 l1 l.
\fBOctal\fP	\fBMode Bit\fP	\fBOctal\fP	\fBMode Bit\fP	\fBOctal\fP	\fBMode Bit\fP	\fBOctal\fP	\fBMode Bit\fP
\fB4000\fP	S_ISUID	\fB0400\fP	S_IRUSR	\fB0040\fP	S_IRGRP	\fB0004\fP	S_IROTH
\fB2000\fP	S_ISGID	\fB0200\fP	S_IWUSR	\fB0020\fP	S_IWGRP	\fB0002\fP	S_IWOTH
\fB1000\fP	S_ISVTX	\fB0100\fP	S_IXUSR	\fB0010\fP	S_IXGRP	\fB0001\fP	S_IXOTH
.TE
.LP
When bits is set up in tha octal number other than dem listed up in the
table above, tha behavior is unspecified.
.SS Grammar fo' chmod
.LP
Da grammar n' lexical conventions up in dis section describe tha syntax
for tha \fIsymbolic_mode\fP operand. Y'all KNOW dat shit, muthafucka! Da general
conventions fo' dis steez of grammar is busted lyrics bout up in \fIGrammar
Conventions\fP  fo' realz. A valid
\fIsymbolic_mode\fP can be represented as tha non-terminal symbol
\fIsymbolic_mode\fP up in tha grammar. Shiiit, dis aint no joke. This formal syntax shall
take precedence over tha precedin text syntax description.
.LP
Da lexical processin is based entirely on single characters. Implementations
need not allow <blank>s within tha single
argument bein processed.
.sp
.RS
.nf

\fB%start    symbolic_mode
%%
.sp

symbolic_mode    : clause
                 | symbolic_mode ',' clause
                 ;
.sp

clause           : actionlist
                 | wholist actionlist
                 ;
.sp

wholist          : who
                 | wholist who
                 ;
.sp

who              : 'u' | 'g' | 'o' | 'a'
                 ;
.sp

actionlist       : action
                 | actionlist action
                 ;
.sp

action           : op
                 | op permlist
                 | op permcopy
                 ;
.sp

permcopy         : 'u' | 'g' | 'o'
                 ;
.sp

op               : '+' | '-' | '='
                 ;
.sp

permlist         : perm
                 | perm permlist
                 ;
.sp


perm             : 'r' | 'w' | 'x' | 'X' | 's' | 't'  
                 ;
\fP
.fi
.RE
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Da utilitizzle executed successfully n' all axed chizzlez was made.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Some implementationz of tha \fIchmod\fP utilitizzle chizzle tha mode of
a directory before tha filez up in tha directory when
performin a recursive ( \fB-R\fP option) chizzle; others chizzle the
directory mode afta tha filez up in tha directory. If an
application tries ta remove read or search permission fo' a gangbangin' file hierarchy,
the removal attempt fails if tha directory is chizzled
first; on tha other hand, tryin ta re-enable permissions ta a restricted
hierarchy fails if directories is chizzled last. Users
should not try ta cook up a hierarchy inaccessible ta theyselves.
.LP
Some implementationz of \fIchmod\fP never used tha process' \fIumask\fP
when changing
modes; systems conformant wit dis volume of IEEE\ Std\ 1003.1-2001
do so when \fBwho\fP aint specified. Y'all KNOW dat shit, muthafucka! Note the
difference between:
.sp
.RS
.nf

\fBchmod a-w file
\fP
.fi
.RE
.LP
which removes all write permissions, and:
.sp
.RS
.nf

\fBchmod -- -w file
\fP
.fi
.RE
.LP
which removes write permissions dat would be allowed if \fBfile\fP
was pimped wit tha same \fIumask\fP.
.LP
Conformin applications should never assume dat they know how tha fuck the
set-user-ID n' set-group-ID bits on directories are
interpreted.
.SH EXAMPLES
.TS C
center; l lw(40).
\fBMode\fP	T{
.na
\fBResults\fP
.ad
T}
\fIa\fP+=	T{
.na
Equivalent ta \fIa\fP+, \fIa\fP=; clears all file mode bits.
.ad
T}
\fIgo\fP+-w	T{
.na
Equivalent ta \fIgo\fP+, \fIgo\fP- \fIw\fP; clears crew n' other write bits.
.ad
T}
\fIg\fP=\fIo\fP-\fIw\fP	T{
.na
Equivalent ta \fIg\fP= \fIo\fP, \fIg\fP- \fIw\fP; sets crew bit ta match other bits n' then clears crew write bit.
.ad
T}
\fIg\fP-\fIr\fP+\fIw\fP	T{
.na
Equivalent ta \fIg\fP- \fIr\fP, \fIg\fP+ \fIw\fP; clears crew read bit n' sets crew write bit.
.ad
T}
\fIuo\fP=\fIg\fP	T{
.na
Sets balla bits ta match crew bits n' sets other bits ta match crew bits.
.ad
T}
.TE
.SH RATIONALE
.LP
Da functionalitizzle of \fIchmod\fP is busted lyrics bout substantially through
references ta concepts defined up in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001. In dis way, there is less duplication
of effort required fo' describin tha interactions
of permissions. But fuck dat shiznit yo, tha word on tha street is dat tha behavior of dis utilitizzle aint busted lyrics about
in termz of tha \fIchmod\fP() function from tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001 cuz
that justification requires certain side effects upon alternate file
access control mechanizzlez dat might not be appropriate,
dependin on tha implementation.
.LP
Implementations dat support mandatory file n' record lockin as
specified by tha 1984 /usr/group standard historically used
the combination of set-group-ID bit set n' crew execute bit clear
to indicate mandatory locking. This condizzle is probably set or
cleared wit tha symbolic mode \fBperm\fP symbol \fBl\fP instead of
the \fBperm\fP symbols \fBs\fP n' \fBx\fP so dat the
mandatory lockin mode aint chizzled without explicit indication
that dat was what tha fuck tha user intended. Y'all KNOW dat shit, muthafucka! Therefore, tha details on
how tha implementation treats these conditions must be defined in
the documentation. I aint talkin' bout chicken n' gravy biatch. This volume of IEEE\ Std\ 1003.1-2001
does not require mandatory lockin (nor do tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001) yo, but do allow it as
an extension. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat dis volume of IEEE\ Std\ 1003.1-2001 do
require dat tha \fIls\fP n' \fIchmod\fP utilitizzles work consistently
in dis area. If \fIls\fP \fB-l\fP \fIfile\fP indicates dat tha set-group-ID
bit is set, \fIchmod\fP \fBg-s\fP
\fIfile\fP must clear it (assumin appropriate privileges exist to
change modes).
.LP
Da System V n' BSD versions use different exit status codes. Right back up in yo muthafuckin ass. Some
implementations used tha exit status as a cold-ass lil count of the
number of errors dat occurred; dis practice is unworkable since
it can overflow tha range of valid exit status joints, n' you can put dat on yo' toast. This
problem be avoided here by specifyin only 0 n' >0 as exit joints.
.LP
Da System Interfaces volume of IEEE\ Std\ 1003.1-2001 indicates that
implementation-defined restrictions may cause the
S_ISUID n' S_ISGID bits ta be ignored. Y'all KNOW dat shit, muthafucka! This volume of IEEE\ Std\ 1003.1-2001
allows tha \fIchmod\fP utilitizzle ta chizzle to
modify these bits before callin \fIchmod\fP() (or some function providing
equivalent
capabilities) fo' non-regular filez fo' realz. Among other thangs, dis allows
implementations dat use tha set-user-ID n' set-group-ID bits
on directories ta enable extended features ta handle these extensions
in a intelligent manner.
.LP
Da \fBX\fP \fBperm\fP symbol was adopted from BSD-based systems cuz
it serves up commonly desired functionalitizzle when bustin
recursive ( \fB-R\fP option) modifications. Right back up in yo muthafuckin ass. Similar functionality
is not provided by tha \fIfind\fP utility. Oldschool BSD versions
of \fIchmod\fP, however, only supported \fBX\fP with
\fIop\fP+; it has been extended up in dis volume of IEEE\ Std\ 1003.1-2001
because it be also useful wit \fIop\fP=. (It
has also been added fo' \fIop\fP- even though it duplicates \fBx\fP,
in dis case, cuz it is intuitizzle n' easier to
explain.)
.LP
Da grammar was extended wit tha \fIpermcopy\fP non-terminal ta allow
historical-practice formz of symbolic modes like
\fBo\fP= \fBu\fP \fB-g\fP (that is, set tha "other" permissions to
the permissionz of "baller" minus tha permissions of
"group").
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIls\fP, \fIumask\fP, tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001, \fIchmod\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
