.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "TEST" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" test 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
test \- evaluate expression
.SH SYNOPSIS
.LP
\fBtest\fP \fB[\fP\fIexpression\fP\fB]\fP\fB
.br
.sp
[\fP \fB[\fP\fIexpression\fP\fB]\fP \fB]
.br
\fP
.SH DESCRIPTION
.LP
Da \fItest\fP utilitizzle shall evaluate tha \fIexpression\fP n' indicate
the result of tha evaluation by its exit status fo' realz. An
exit statuz of zero indicates dat tha expression evaluated as true
and a exit statuz of 1 indicates dat tha expression evaluated
as false.
.LP
In tha second form of tha utility, which uses \fB"[]"\fP rather than
\fItest\fP, tha application shall ensure dat the
square brackets is separate arguments.
.SH OPTIONS
.LP
Da \fItest\fP utilitizzle shall not recognize tha \fB"--"\fP argument
in tha manner specified by guideline 10 up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 12.2, Utility
Syntax
Guidelines.
.LP
No options shall be supported.
.SH OPERANDS
.LP
Da application shall ensure dat all operators n' elementz of primaries
are presented as separate arguments ta tha \fItest\fP
utility.
.LP
Da followin primaries can be used ta construct \fIexpression\fP:
.TP 7
\fB-b\ \fP \fIfile\fP
True if \fIfile\fP exists n' be a funky-ass block special file.
.TP 7
\fB-c\ \fP \fIfile\fP
True if \fIfile\fP exists n' be a cold-ass lil characta special file.
.TP 7
\fB-d\ \fP \fIfile\fP
True if \fIfile\fP exists n' be a gangbangin' finger-lickin' directory.
.TP 7
\fB-e\ \fP \fIfile\fP
True if \fIfile\fP exists.
.TP 7
\fB-f\ \fP \fIfile\fP
True if \fIfile\fP exists n' be a regular file.
.TP 7
\fB-g\ \fP \fIfile\fP
True if \fIfile\fP exists n' its set-group-ID flag is set.
.TP 7
\fB-h\ \fP \fIfile\fP
True if \fIfile\fP exists n' be a symbolic link.
.TP 7
\fB-L\ \fP \fIfile\fP
True if \fIfile\fP exists n' be a symbolic link.
.TP 7
\fB-n\ \fP \fIstring\fP
True if tha length of \fIstring\fP is non-zero.
.TP 7
\fB-p\ \fP \fIfile\fP
True if \fIfile\fP be a FIFO.
.TP 7
\fB-r\ \fP \fIfile\fP
True if \fIfile\fP exists n' is readable. True shall indicate that
permission ta read from \fIfile\fP is ghon be granted, as
defined up in \fIFile Read, Write, n' Creation\fP .
.TP 7
\fB-S\ \fP \fIfile\fP
True if \fIfile\fP exists n' be a socket.
.TP 7
\fB-s\ \fP \fIfile\fP
True if \fIfile\fP exists n' has a size pimped outa than zero.
.TP 7
\fB-t\ \fP \fIfile_descriptor\fP
.sp
True if tha file whose file descriptor number is \fIfile_descriptor\fP
is open n' be associated wit a terminal.
.TP 7
\fB-u\ \fP \fIfile\fP
True if \fIfile\fP exists n' its set-user-ID flag is set.
.TP 7
\fB-w\ \fP \fIfile\fP
True if \fIfile\fP exists n' is writable. True shall indicate that
permission ta write from \fIfile\fP is ghon be granted, as
defined up in \fIFile Read, Write, n' Creation\fP .
.TP 7
\fB-x\ \fP \fIfile\fP
True if \fIfile\fP exists n' is executable. True shall indicate that
permission ta execute \fIfile\fP is ghon be granted, as
defined up in \fIFile Read, Write, n' Creation\fP . If \fIfile\fP is
a directory,
true shall indicate dat permission ta search \fIfile\fP is ghon be granted.
.TP 7
\fB-z\ \fP \fIstring\fP
True if tha length of strang \fIstring\fP is zero.
.TP 7
\fIstring\fP
True if tha strang \fIstring\fP aint tha null string.
.TP 7
\fIs1\fP\fB\ =\ \fP \fIs2\fP
True if tha strings \fIs1\fP n' \fIs2\fP is identical.
.TP 7
\fIs1\fP\fB\ !=\ \fP \fIs2\fP
True if tha strings \fIs1\fP n' \fIs2\fP is not identical.
.TP 7
\fIn1\fP\fB\ -eq\ \fP \fIn2\fP
True if tha integers \fIn1\fP n' \fIn2\fP is algebraically equal.
.TP 7
\fIn1\fP\fB\ -ne\ \fP \fIn2\fP
True if tha integers \fIn1\fP n' \fIn2\fP is not algebraically equal.
.TP 7
\fIn1\fP\fB\ -gt\ \fP \fIn2\fP
True if tha integer \fIn1\fP be algebraically pimped outa than tha integer
\fIn2\fP.
.TP 7
\fIn1\fP\fB\ -ge\ \fP \fIn2\fP
True if tha integer \fIn1\fP be algebraically pimped outa than or equal
to tha integer \fIn2\fP.
.TP 7
\fIn1\fP\fB\ -lt\ \fP \fIn2\fP
True if tha integer \fIn1\fP be algebraically less than tha integer
\fIn2\fP.
.TP 7
\fIn1\fP\fB\ -le\ \fP \fIn2\fP
True if tha integer \fIn1\fP be algebraically less than or equal to
the integer \fIn2\fP.
.TP 7
\fIexpression1\fP\fB\ -a\ \fP \fIexpression2\fP
.sp
True if both \fIexpression1\fP n' \fIexpression2\fP is true. The
\fB-a\fP binary primary is left associative. Well shiiiit, it has a higher
precedence than \fB-o\fP. 
.TP 7
\fIexpression1\fP\fB\ -o\ \fP \fIexpression2\fP
.sp
True if either \fIexpression1\fP or \fIexpression2\fP is true. The
\fB-o\fP binary primary is left associative. 
.sp
.LP
With tha exception of tha \fB-h\fP \fIfile\fP n' \fB-L\fP \fIfile\fP
primaries, if a \fIfile\fP argument be a symbolic
link, \fItest\fP shall evaluate tha expression by resolvin tha symbolic
link n' rockin tha file referenced by tha link.
.LP
These primaries can be combined wit tha followin operators:
.TP 7
\fB!\ \fP \fIexpression\fP
True if \fIexpression\fP is false.
.TP 7
\fB(\ \fP \fIexpression\ \fP \fB)\fP
True if \fIexpression\fP is true. Da parentheses can be used ta alter
the aiiight precedence n' associativity. 
.sp
.LP
Da primaries wit two elementz of tha form:
.sp
.RS
.nf

\fB-\fP\fIprimary_operator primary_operand\fP
.fi
.RE
.LP
are known as \fIunary primaries\fP. Da primaries wit three elements
in either of tha two forms:
.sp
.RS
.nf

\fIprimary_operand\fP \fB-\fP\fIprimary_operator primary_operand
.sp

primary_operand primary_operator primary_operand\fP
.fi
.RE
.LP
are known as \fIbinary primaries\fP fo' realz. Additionizzle implementation-defined
operators n' \fIprimary_operator\fPs may be provided
by implementations. They shall be of tha form - \fIoperator\fP where
the first characta of \fIoperator\fP aint a gangbangin' finger-lickin' digit.
.LP
Da algorithm fo' determinin tha precedence of tha operators and
the return value dat shall be generated is based on the
number of arguments presented ta \fItest\fP. (But fuck dat shiznit yo, tha word on tha street is dat when using
the \fB"[...]"\fP form, tha right-bracket final argument
shall not be counted up in dis algorithm.)
.LP
In tha followin list, $1, $2, $3, n' $4 represent tha arguments
presented ta \fItest\fP:
.TP 7
0\ arguments:
Exit false (1).
.TP 7
1\ argument:
Exit legit (0) if $1 aint null; otherwise, exit false.
.TP 7
2\ arguments:
.RS
.IP " *" 3
If $1 is \fB'!'\fP, exit legit if $2 is null, false if $2 aint null.
.LP
.IP " *" 3
If $1 be a unary primary, exit legit if tha unary test is true, false
if tha unary test is false.
.LP
.IP " *" 3
Otherwise, produce unspecified thangs up in dis biatch.
.LP
.RE
.TP 7
3\ arguments:
.RS
.IP " *" 3
If $2 be a funky-ass binary primary, big-ass up tha binary test of $1 n' $3.
.LP
.IP " *" 3
If $1 is \fB'!'\fP, negate tha two-argument test of $2 n' $3.
.LP
.IP " *" 3
If $1 is \fB'('\fP n' $3 is \fB')'\fP, big-ass up tha unary test of
$2. 
.LP
.IP " *" 3
Otherwise, produce unspecified thangs up in dis biatch.
.LP
.RE
.TP 7
4\ arguments:
.RS
.IP " *" 3
If $1 is \fB'!'\fP, negate tha three-argument test of $2, $3, and
$4.
.LP
.IP " *" 3
If $1 is \fB'('\fP n' $4 is \fB')'\fP, big-ass up tha two-argument
test of $2 n' $3. 
.LP
.IP " *" 3
Otherwise, tha thangs up in dis biatch is unspecified.
.LP
.RE
.TP 7
>4\ arguments:
Da thangs up in dis biatch is unspecified. Y'all KNOW dat shit, muthafucka! 
.LP
On XSI-conformant systems, combinationz of primaries n' operators
shall be evaluated rockin tha precedence n' associativitizzle rules
busted lyrics bout previously. In addition, tha strang comparison binary primaries
\fB'='\fP n' \fB"!="\fP shall gotz a higher
precedence than any unary primary. 
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fItest\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
\fIexpression\fP evaluated ta true.
.TP 7
\ 1
\fIexpression\fP evaluated ta false or \fIexpression\fP was missing.
.TP 7
>1
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Scripts should be careful when dealin wit user-supplied input that
could be trippin wit primaries n' operators. Unless the
application writa knows all tha cases dat produce input ta tha script,
invocations like:
.sp
.RS
.nf

\fBtest "$1" -a "$2"
\fP
.fi
.RE
.LP
should be freestyled as:
.sp
.RS
.nf

\fBtest "$1" && test "$2"
\fP
.fi
.RE
.LP
to avoid problems if a user supplied joints like fuckin $1 set ta \fB'!'\fP
and $2 set ta tha null string. That is, up in cases
where maximal portabilitizzle iz of concern, replace:
.sp
.RS
.nf

\fBtest expr1 -a expr2
\fP
.fi
.RE
.LP
with:
.sp
.RS
.nf

\fBtest expr1 && test expr2
\fP
.fi
.RE
.LP
and replace:
.sp
.RS
.nf

\fBtest expr1 -o expr2
\fP
.fi
.RE
.LP
with:
.sp
.RS
.nf

\fBtest expr1 || test expr2
\fP
.fi
.RE
.LP
but note that, up in \fItest\fP, \fB-a\fP has higher precedence than
\fB-o\fP while \fB"&&"\fP n' \fB"||"\fP have
equal precedence up in tha shell.
.LP
Parentheses or braces can be used up in tha shell command language to
effect grouping.
.LP
Parentheses must be escaped when rockin \fIsh\fP; fo' example:
.sp
.RS
.nf

\fBtest \\( expr1 -a expr2 \\) -o expr3
\fP
.fi
.RE
.LP
This command aint always portable outside XSI-conformant systems.
Da followin form can be used instead:
.sp
.RS
.nf

\fB( test expr1 && test expr2 ) || test expr3
\fP
.fi
.RE
.LP
Da two commands:
.sp
.RS
.nf

\fBtest "$1"
test ! "$1"
\fP
.fi
.RE
.LP
could not be used reliably on some oldschool systems. Unexpected
results would occur if such a \fIstring\fP expression were
used n' $1 expanded ta \fB'!'\fP, \fB'('\fP, or a known unary primary.
Betta constructs are:
.sp
.RS
.nf

\fBtest -n "$1"
test -z "$1"
\fP
.fi
.RE
respectively. 
.LP
Oldschool systems have also been unreliable given tha common construct:
.sp
.RS
.nf

\fBtest "$response" = "expected string"
\fP
.fi
.RE
.LP
One of tha followin be a mo' reliable form:
.sp
.RS
.nf

\fBtest "X$response" = "Xexpected string"
test "expected string" = "$response"
\fP
.fi
.RE
.LP
Note dat tha second form assumes dat \fIexpected string\fP could
not be trippin wit any unary primary. If \fIexpected
string\fP starts wit \fB'-'\fP, \fB'('\fP, \fB'!'\fP, or even
\fB'='\fP, tha straight-up original gangsta form should be used instead.
Usin tha precedin rulez without tha XSI marked extensions, any of
the three comparison forms is reliable, given any input.
(But fuck dat shiznit yo, tha word on tha street is dat note dat tha strings is quoted up in all cases.)
.LP
Because tha strang comparison binary primaries, \fB'='\fP n' \fB"!="\fP,
have a higher precedence than any unary primary
in tha pimped outa than 4 argument case, unexpected thangs up in dis biatch can occur
if arguments is not properly prepared. Y'all KNOW dat shit, muthafucka! For example, in:
.sp
.RS
.nf

\fBtest -d $1 -o -d $2
\fP
.fi
.RE
.LP
If $1 evaluates ta a possible directory name of \fB'='\fP, tha first
three arguments is considered a strang comparison,
which shall cause a syntax error when tha second \fB-d\fP is encountered.
One of tha followin forms prevents this; tha second is
preferred:
.sp
.RS
.nf

\fBtest \\( -d "$1" \\) -o \\( -d "$2" \\)
test -d "$1" || test -d "$2"
\fP
.fi
.RE
.LP
Also up in tha pimped outa than 4 argument case:
.sp
.RS
.nf

\fBtest "$1" = "bat" -a "$2" = "ball"
\fP
.fi
.RE
.LP
syntax errors occur if $1 evaluates ta \fB'('\fP or \fB'!'\fP . One
of tha followin forms prevents this; tha third is
preferred:
.sp
.RS
.nf

\fBtest "X$1" = "Xbat" -a "X$2" = "Xball"
test "$1" = "bat" && test "$2" = "ball"
test "X$1" = "Xbat" && test "X$2" = "Xball"
\fP
.fi
.RE
.SH EXAMPLES
.IP " 1." 4
Exit if there be not two or three arguments (two variations):
.sp
.RS
.nf

\fBif [ $# -ne 2 -a $# -ne 3 ]; then exit 1; fi
if [ $# -lt 2 -o $# -gt 3 ]; then exit 1; fi
\fP
.fi
.RE
.LP
.IP " 2." 4
Perform a \fImkdir\fP if a gangbangin' finger-lickin' directory do not exist:
.sp
.RS
.nf

\fBtest ! -d tempdir && mkdir tempdir
\fP
.fi
.RE
.LP
.IP " 3." 4
Wait fo' a gangbangin' file ta become non-readable:
.sp
.RS
.nf

\fBwhile test -r thefile
do
    chill 30
done
echo '"thefile" is no longer readable'
\fP
.fi
.RE
.LP
.IP " 4." 4
Perform a cold-ass lil command if tha argument is one of three strings (two variations):
.sp
.RS
.nf

\fBif [ "$1" = "pear" ] || [ "$1" = "grape" ] || [ "$1" = "apple" ]
then
   \fP \fIcommand\fP\fB
fi
.sp

case "$1" in
    pear|grape|apple)\fP \fIcommand\fP \fB;;
esac
\fP
.fi
.RE
.LP
.SH RATIONALE
.LP
Da KornShell-derived conditionizzle command (double bracket \fB[[]]\fP)
was removed from tha shell command language description
in a early proposal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Objections was raised dat tha real problem
is misuse of tha \fItest\fP command ( \fB[\fP), n' puttin it
into tha shell is tha wack way ta fix tha problem. Instead, proper
documentation n' a freshly smoked up shell reserved word ( \fB!\fP) are
sufficient.
.LP
Tests dat require multiple \fItest\fP operations can be done at the
shell level rockin individual invocationz of the
\fItest\fP command n' shell logicals, rather than rockin tha error-prone
\fB-o\fP flag of \fItest\fP.
.LP
XSI-conformant systems support mo' than four arguments.
.LP
XSI-conformant systems support tha combinin of primaries wit the
followin constructs:
.TP 7
\fIexpression1\fP \fB-a\fP \fIexpression2\fP
.sp
True if both \fIexpression1\fP n' \fIexpression2\fP is true.
.TP 7
\fIexpression1\fP \fB-o\fP \fIexpression2\fP
.sp
True if at least one of \fIexpression1\fP n' \fIexpression2\fP are
true.
.TP 7
\fB(\fP \fIexpression\fP \fB)\fP
.sp
True if \fIexpression\fP is true.
.sp
.LP
In evaluatin these mo' complex combined expressions, tha following
precedence rulez is used:
.IP " *" 3
Da unary primaries have higher precedence than tha algebraic binary
primaries.
.LP
.IP " *" 3
Da unary primaries have lower precedence than tha strang binary primaries.
.LP
.IP " *" 3
Da unary n' binary primaries have higher precedence than tha unary
\fIstring\fP primary.
.LP
.IP " *" 3
Da \fB!\fP operator has higher precedence than tha \fB-a\fP operator,
and tha \fB-a\fP operator has higher precedence than
the \fB-o\fP operator.
.LP
.IP " *" 3
Da \fB-a\fP n' \fB-o\fP operators is left associative.
.LP
.IP " *" 3
Da parentheses can be used ta alta tha aiiight precedence n' associativity.
.LP
.LP
Da BSD n' System V versionz of \fB-f\fP is not tha same. Da BSD
definizzle was:
.TP 7
\fB-f\ \fP \fIfile\fP
True if \fIfile\fP exists n' aint a gangbangin' finger-lickin' directory.
.sp
.LP
Da SVID version (true if tha file exists n' be a regular file) was
chosen fo' dis volume of IEEE\ Std\ 1003.1-2001
because its use is consistent wit tha \fB-b\fP, \fB-c\fP, \fB-d\fP,
and \fB-p\fP operandz ( \fIfile\fP exists n' be a
specific file type).
.LP
Da \fB-e\fP primary, possessin similar functionalitizzle ta dat provided
by tha C shell, was added cuz it serves up tha only
way fo' a gangbangin' finger-lickin' dirty-ass shell script ta smoke up if a gangbangin' file exists without trying
to open tha file. Right back up in yo muthafuckin ass. Since implementations is allowed ta add
additionizzle file types, a portable script cannot use:
.sp
.RS
.nf

\fBtest -b foo -o -c foo -o -d foo -o -f foo -o -p foo
\fP
.fi
.RE
.LP
to smoke up if \fBfoo\fP be a existin file. On oldschool BSD systems,
the existence of a gangbangin' file could be determined by:
.sp
.RS
.nf

\fBtest -f foo -o -d foo
\fP
.fi
.RE
.LP
but there was no easy as fuck  way ta determine dat a existin file was a
regular file fo' realz. An early proposal used tha KornShell \fB-a\fP
primary (with tha same meaning) yo, but dis was chizzled ta \fB-e\fP
because there was concerns bout tha high probabilitizzle of humans
confusin tha \fB-a\fP primary wit tha \fB-a\fP binary operator.
.LP
Da followin options was not included up in dis volume of IEEE\ Std\ 1003.1-2001,
although they is provided by some
implementations. These operandz should not be used by freshly smoked up implementations
for other purposes:
.TP 7
\fB-k\ \fP \fIfile\fP
True if \fIfile\fP exists n' its sticky bit is set.
.TP 7
\fB-C\ \fP \fIfile\fP
True if \fIfile\fP be a cold-ass lil contiguous file.
.TP 7
\fB-V\ \fP \fIfile\fP
True if \fIfile\fP be a version file.
.sp
.LP
Da followin option was not included cuz dat shiznit was undocumented
in most implementations, has been removed from some
implementations (includin System V), n' tha functionalitizzle is provided
by tha shell (see \fIParameta Expansion\fP .
.TP 7
\fB-l\ \fP \fIstring\fP
Da length of tha strang \fIstring\fP.
.sp
.LP
Da \fB-b\fP, \fB-c\fP, \fB-g\fP, \fB-p\fP, \fB-u\fP, n' \fB-x\fP
operandz is derived from tha SVID; oldschool BSD do
not provide em. Da \fB-k\fP operand is derived from System V; historical
BSD do not provide dat shit.
.LP
On oldschool BSD systems, \fItest\fP \fB-w\fP \fIdirectory\fP always
returned false cuz \fItest\fP tried ta open the
directory fo' writing, which always fails.
.LP
Some additionizzle primaries newly invented or from tha KornShell rocked up
in a early proposal as part of tha conditionizzle command
( \fB[[]]\fP): \fIs1\fP \fB>\fP \fIs2\fP, \fIs1\fP \fB<\fP \fIs2\fP,
\fIstr\fP \fB=\fP \fIpattern\fP, \fIstr\fP
\fB!=\fP \fIpattern\fP, \fIf1\fP \fB-nt\fP \fIf2\fP, \fIf1\fP \fB-ot\fP
\fIf2\fP, n' \fIf1\fP \fB-ef\fP \fIf2\fP. They
were not carried forward tha fuck into tha \fItest\fP utilitizzle when tha conditional
command was removed from tha shell cuz they have not
been included up in tha \fItest\fP utilitizzle built tha fuck into oldschool implementations
of tha \fIsh\fP
utility.
.LP
Da \fB-t\fP \fIfile_descriptor\fP primary is shown wit a mandatory
argument cuz tha grammar be ambiguous if it can be
omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Oldschool implementations have allowed it ta be omitted,
providin a thugged-out default of 1.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIFile Read, Write, n' Creation\fP, \fIfind\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
