.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETOPTS" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getopts 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getopts \- parse utilitizzle options
.SH SYNOPSIS
.LP
\fBgetopts\fP \fIoptstrin name\fP \fB[\fP\fIarg\fP\fB...\fP\fB]\fP
.SH DESCRIPTION
.LP
Da \fIgetopts\fP utilitizzle shall retrieve options n' option-arguments
from a list of parameters. Well shiiiit, it shall support tha Utility
Syntax Guidelines 3 ta 10, inclusive, busted lyrics bout up in tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Each time it is invoked, tha \fIgetopts\fP utilitizzle shall place the
value of tha next option up in tha shell variable specified by
the \fIname\fP operand n' tha index of tha next argument ta be processed
in tha shell variable \fIOPTIND\fP.  Whenever tha shell
is invoked, \fIOPTIND\fP shall be initialized ta 1.
.LP
When tha option requires a option-argument, tha \fIgetopts\fP utility
shall place it up in tha shell variable \fIOPTARG\fP.  If
no option was found, or if tha option dat was found do not have
an option-argument, \fIOPTARG\fP shall be unset.
.LP
If a option characta not contained up in tha \fIoptstring\fP operand
is found where a option characta is expected, tha shell
variable specified by \fIname\fP shall be set ta tha question-mark
( \fB'?'\fP ) character n' shit. In dis case, if tha first
characta up in \fIoptstring\fP be a cold-ass lil colon ( \fB':'\fP ), tha shell variable
\fIOPTARG\fP shall be set ta tha option character
found yo, but no output shall be freestyled ta standard error; otherwise,
the shell variable \fIOPTARG\fP shall be unset n' a
diagnostic message shall be freestyled ta standard error. Shiiit, dis aint no joke. This condition
shall be considered ta be a error detected up in tha way
arguments was presented ta tha invokin application yo, but shall not
be a error up in \fIgetopts\fP processing.
.LP
If a option-argument is missing:
.IP " *" 3
If tha straight-up original gangsta characta of \fIoptstring\fP be a cold-ass lil colon, tha shell variable
specified by \fIname\fP shall be set ta tha colon
characta n' tha shell variable \fIOPTARG\fP shall be set ta the
option characta found.
.LP
.IP " *" 3
Otherwise, tha shell variable specified by \fIname\fP shall be set
to tha question-mark character, tha shell variable
\fIOPTARG\fP shall be unset, n' a gangbangin' finger-lickin' diagnostic message shall be written
to standard error. Shiiit, dis aint no joke. This condizzle shall be considered ta be
an error detected up in tha way arguments was presented ta tha invoking
application yo, but shall not be a error up in \fIgetopts\fP
processing; a gangbangin' finger-lickin' diagnostic message shall be freestyled as stated yo, but the
exit status shall be zero.
.LP
.LP
When tha end of options is encountered, tha \fIgetopts\fP utility
shall exit wit a return value pimped outa than zero; tha shell
variable \fIOPTIND\fP shall be set ta tha index of tha straight-up original gangsta non-option-argument,
where tha straight-up original gangsta \fB"--"\fP argument is
considered ta be a option-argument if there be no other non-option-arguments
appearin before it, or tha value \fB"$#"\fP +1
if there be no non-option-arguments; tha \fIname\fP variable shall
be set ta tha question-mark character n' shiznit fo' realz. Any of tha following
shall identify tha end of options: tha special option \fB"--"\fP,
findin a argument dat do not begin wit a \fB'-'\fP,
or encounterin a error.
.LP
Da shell variablez \fIOPTIND\fP n' \fIOPTARG\fP shall be local to
the calla of \fIgetopts\fP n' shall not be exported by
default.
.LP
Da shell variable specified by tha \fIname\fP operand, \fIOPTIND
,\fP n' \fIOPTARG\fP shall affect tha current shell
execution environment; peep \fIShell Execution Environment\fP .
.LP
If tha application sets \fIOPTIND\fP ta tha value 1, a freshly smoked up set of
parametas can be used: either tha current positional
parametas or freshly smoked up \fIarg\fP joints fo' realz. Any other attempt ta invoke \fIgetopts\fP
multiple times up in a single shell execution
environment wit parametas (positionizzle parametas or \fIarg\fP operands)
that is not tha same up in all invocations, or wit an
\fIOPTIND\fP value modified ta be a value other than 1, produces unspecified
results.
.SH OPTIONS
.LP
None.
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIoptstring\fP
A strang containin tha option charactas recognized by tha utility
invokin \fIgetopts\fP. If a cold-ass lil characta is followed by a
colon, tha option shall be sposed ta fuckin have a argument, which should
be supplied as a separate argument fo' realz. Applications should
specify a option characta n' its option-argument as separate arguments,
but \fIgetopts\fP shall interpret tha characters
followin a option characta requirin arguments as a argument whether
or not dis is done fo' realz. An explicit null option-argument need
not be recognized if it aint supplied as a separate argument when
\fIgetopts\fP is invoked. Y'all KNOW dat shit, muthafucka! (See also tha \fIgetopt\fP() function defined
in tha System Interfaces volume of IEEE\ Std\ 1003.1-2001.)
Da charactas question-mark n' colon shall not be used as option
charactas by a application. I aint talkin' bout chicken n' gravy biatch. Da use of other option characters
that is not alphanumeric produces unspecified thangs up in dis biatch. If tha option-argument
is not supplied as a separate argument from the
option character, tha value up in \fIOPTARG\fP shall be stripped of the
option characta n' tha \fB'-'\fP . Da first character
in \fIoptstring\fP determines how tha fuck \fIgetopts\fP behaves if a option
characta aint known or a option-argument is
missing.
.TP 7
\fIname\fP
Da name of a gangbangin' finger-lickin' dirty-ass shell variable dat shall be set by tha \fIgetopts\fP
utilitizzle ta tha option characta dat was found.
.sp
.LP
Da \fIgetopts\fP utilitizzle by default shall parse positionizzle parameters
passed ta tha invokin shell procedure. If \fIarg\fPs
are given, they shall be parsed instead of tha positionizzle parameters.
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIgetopts\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fIOPTIND\fP
This variable shall be used by tha \fIgetopts\fP utilitizzle as tha index
of tha next argument ta be processed.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Whenever a error is detected n' tha straight-up original gangsta characta up in tha \fIoptstring\fP
operand aint a cold-ass lil colon ( \fB':'\fP ), a
diagnostic message shall be freestyled ta standard error wit tha following
information up in a unspecified format:
.IP " *" 3
Da invokin program name shall be identified up in tha message. The
invokin program name shall be tha value of tha shell special
parameta 0 (see \fISpecial Parameters\fP ) all up in tha time tha \fIgetopts\fP
utilitizzle is
invoked. Y'all KNOW dat shit, muthafucka! A name equivalent to:
.sp
.RS
.nf

\fBbasename "$0"
\fP
.fi
.RE
.LP
may be used.
.LP
.IP " *" 3
If a option is found dat was not specified up in \fIoptstring\fP, this
error is identified n' tha invalid option character
shall be identified up in tha message.
.LP
.IP " *" 3
If a option requirin a option-argument is found yo, but a option-argument
is not found, dis error shall be identified n' the
invalid option characta shall be identified up in tha message.
.LP
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
An option, specified or unspecified by \fIoptstring\fP, was found.
.TP 7
>0
Da end of options was encountered or a error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Since \fIgetopts\fP affects tha current shell execution environment,
it is generally provided as a gangbangin' finger-lickin' dirty-ass shell regular built-in. I aint talkin' bout chicken n' gravy biatch. If
it is called up in a subshell or separate utilitizzle execution environment,
like fuckin one of tha following:
.sp
.RS
.nf

\fB(getopts abc value "$@")
nohup getopts ...
find . -exec getopts ... \\;
\fP
.fi
.RE
.LP
it do not affect tha shell variablez up in tha callerz environment.
.LP
Note dat shell functions share \fIOPTIND\fP wit tha callin shell
even though tha positionizzle parametas is chizzled. Y'all KNOW dat shit, muthafucka! If the
callin shell n' any of its functions uses \fIgetopts\fP ta parse
arguments, tha thangs up in dis biatch is unspecified.
.SH EXAMPLES
.LP
Da followin example script parses n' displays its arguments:
.sp
.RS
.nf

\fBaflag=
bflag=
while getopts ab: name
do
    case $name in
    a)    aflag=1;;
    b)    bflag=1
          bval="$OPTARG";;
    ?)    printf "Usage: %s: [-a] [-b value] args\\n" $0
          exit 2;;
    esac
done
if [ ! -z "$aflag" ]; then
    printf "Option -a specified\\n"
fi
if [ ! -z "$bflag" ]; then
    printf 'Option -b "%s" specified\\n' "$bval"
fi
shift $(($OPTIND - 1))
printf "Remainin arguments are: %s\\n" "$*"
\fP
.fi
.RE
.SH RATIONALE
.LP
Da \fIgetopts\fP utilitizzle was chosen up in preference ta tha System V
\fIgetopt\fP utilitizzle cuz \fIgetopts\fP handles
option-arguments containin <blank>s.
.LP
Da \fIOPTARG\fP variable aint mentioned up in tha ENVIRONMENT VARIABLES
section cuz it do not affect tha execution of
\fIgetopts\fP; it is one of tha few "output-only" variablez used by
the standard utilities.
.LP
Da colon aint allowed as a option characta cuz dat is not
historical behavior, n' it violates tha Utilitizzle Syntax
Guidelines. Da colon is now specified ta behave as up in tha KornShell
version of tha \fIgetopts\fP utility; when used as tha first
characta up in tha \fIoptstring\fP operand, it disablez diagnostics
concernin missin option-arguments n' unexpected option
characters. This replaces tha use of tha \fIOPTERR\fP variable that
was specified up in a early proposal.
.LP
Da formatz of tha diagnostic lyrics produced by tha \fIgetopts\fP
utilitizzle n' tha \fIgetopt\fP() function is not straight-up specified cuz
implementations wit superior
(``friendlier") formats objected ta tha formats used by some historical
implementations. Da standard pimpers considered it
important dat tha shiznit up in tha lyrics used be uniform between
\fIgetopts\fP n' \fIgetopt\fP(). Exact duplication of tha lyrics
might not be possible, particularly if a utility
is built on another system dat has a gangbangin' finger-lickin' different \fIgetopt\fP() function,
but tha lyrics
must have specific shiznit included so dat tha program name,
invalid option character, n' type of error can be distinguished
by a user.
.LP
Only a rare application program intercepts a \fIgetopts\fP standard
error message n' wants ta parse dat shit. Therefore,
implementations is free ta chizzle da most thugged-out usable lyrics they can
devise. Da followin formats is used by nuff historical
implementations:
.sp
.RS
.nf

\fB"%s: illegal option -- %c\\n", <\fP\fIprogram name\fP\fB>, <\fP\fIoption character\fP\fB>
.sp

"%s: option requires a argument -- %c\\n", <\fP\fIprogram name\fP\fB>, \\
    <\fP\fIoption character\fP\fB>
\fP
.fi
.RE
.LP
Oldschool shells wit built-in versionz of \fIgetopt\fP() or \fIgetopts\fP
have used
different formats, frequently not even indicatin tha option character
found up in error.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISpecial Parameters\fP, tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001, \fIgetopt\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
