.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "DD" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" dd 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
dd \- convert n' copy a gangbangin' file
.SH SYNOPSIS
.LP
\fBdd\fP \fB[\fP\fIoperand\fP \fB...\fP\fB]\fP
.SH DESCRIPTION
.LP
Da \fIdd\fP utilitizzle shall copy tha specified input file ta tha specified
output file wit possible conversions rockin specific
input n' output block sizes. Well shiiiit, it shall read tha input one block at
a time, rockin tha specified input block size; it shall then
process tha block of data straight-up returned, which could be smaller
than tha axed block size. Well shiiiit, it shall apply any conversions
that done been specified n' write tha resultin data ta tha output
in blockz of tha specified output block size. If tha \fBbs\fP=
\fIexpr\fP operand is specified n' no conversions other than \fBsync\fP,
\fBnoerror\fP, or \fBnotrunc\fP is requested, the
data returned from each input block shall be freestyled as a separate
output block; if tha read returns less than a gangbangin' full block n' the
\fBsync\fP conversion aint specified, tha resultin output block
shall be tha same size as tha input block. If tha \fBbs\fP=
\fIexpr\fP operand aint specified, or a cold-ass lil conversion other than \fBsync\fP,
\fBnoerror\fP, or \fBnotrunc\fP is requested, the
input shall be processed n' collected tha fuck into full-sized output blocks
until tha end of tha input is reached.
.LP
Da processin order shall be as bigs up:
.IP " 1." 4
An input block is read.
.LP
.IP " 2." 4
If tha input block is shorta than tha specified input block size
and tha \fBsync\fP conversion is specified, null bytes shall
be appended ta tha input data up ta tha specified size. (If either
\fBblock\fP or \fBunblock\fP be also specified, <space>s
shall be appended instead of null bytes.) Da remainin conversions
and output shall include tha pad charactas as if they had been
read from tha input.
.LP
.IP " 3." 4
If tha \fBbs\fP= \fIexpr\fP operand is specified n' no conversion
other than \fBsync\fP or \fBnoerror\fP is requested, the
resultin data shall be freestyled ta tha output as a single block, and
the remainin steps is omitted.
.LP
.IP " 4." 4
If tha \fBswab\fP conversion is specified, each pair of input data
bytes shall be swapped. Y'all KNOW dat shit, muthafucka! If there be a odd number of bytes
in tha input block, tha last byte up in tha input record shall not be
swapped.
.LP
.IP " 5." 4
Any remainin conversions ( \fBblock\fP, \fBunblock\fP, \fBlcase\fP,
and \fBucase\fP) shall be performed. Y'all KNOW dat shit, muthafucka! These conversions
shall operate on tha input data independently of tha input blocking;
an input or output fixed-length record may span block
boundaries.
.LP
.IP " 6." 4
Da data resultin from input or conversion or both shall be aggregated
into output blockz of tha specified size fo' realz. Afta tha end
of input is reached, any remainin output shall be freestyled as a funky-ass block
without paddin if \fBconv\fP= \fBsync\fP aint specified;
thus, tha final output block may be shorta than tha output block
size.
.LP
.SH OPTIONS
.LP
None.
.SH OPERANDS
.LP
All of tha operandz shall be processed before any input is read. Y'all KNOW dat shit, muthafucka! The
followin operandz shall be supported:
.TP 7
\fBif\fP=\fIfile\fP
Specify tha input pathname; tha default is standard input.
.TP 7
\fBof\fP=\fIfile\fP
Specify tha output pathname; tha default is standard output. If the
\fBseek\fP= \fIexpr\fP conversion aint also specified,
the output file shall be truncated before tha copy begins if a explicit
\fBof\fP= \fIfile\fP operand is specified, unless
\fBconv\fP= \fBnotrunc\fP is specified. Y'all KNOW dat shit, muthafucka! If \fBseek\fP= \fIexpr\fP
is specified yo, but \fBconv\fP= \fBnotrunc\fP is not, the
effect of tha copy shall be ta preserve tha blocks up in tha output file
over which \fIdd\fP seeks yo, but no other portion of the
output file shall be preserved. Y'all KNOW dat shit, muthafucka! (If tha size of tha seek plus the
size of tha input file is less than tha previous size of the
output file, tha output file shall be shortened by tha copy.)
.TP 7
\fBibs\fP=\fIexpr\fP
Specify tha input block size, up in bytes, by \fIexpr\fP (default is
512).
.TP 7
\fBobs\fP=\fIexpr\fP
Specify tha output block size, up in bytes, by \fIexpr\fP (default is
512).
.TP 7
\fBbs\fP=\fIexpr\fP
Set both input n' output block sizes ta \fIexpr\fP bytes, superseding
\fBibs\fP= n' \fBobs\fP=. If no conversion other
than \fBsync\fP, \fBnoerror\fP, n' \fBnotrunc\fP is specified, each
input block shall be copied ta tha output as a single block
without aggregatin short blocks.
.TP 7
\fBcbs\fP=\fIexpr\fP
Specify tha conversion block size fo' \fBblock\fP n' \fBunblock\fP
in bytes by \fIexpr\fP (default is zero). If \fBcbs\fP=
is omitted or given a value of zero, rockin \fBblock\fP or \fBunblock\fP
produces unspecified thangs up in dis biatch. 
.LP
Da application shall ensure dat dis operand be also specified if
the \fBconv\fP= operand is specified wit a value of
\fBascii\fP, \fBebcdic\fP, or \fBibm\fP. For a \fBconv\fP= operand
with a \fBascii\fP value, tha input is handled as
busted lyrics bout fo' tha \fBunblock\fP value, except dat charactas are
converted ta ASCII before any trailin <space>s are
deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For \fBconv\fP= operandz wit \fBebcdic\fP or \fBibm\fP joints,
the input is handled as busted lyrics bout fo' tha \fBblock\fP
value except dat tha charactas is converted ta EBCDIC or IBM EBCDIC,
respectively, afta any trailin <space>s is added.
.TP 7
\fBskip\fP=\fIn\fP
Skip \fIn\fP input blocks (usin tha specified input block size) before
startin ta copy. On seekable files, the
implementation shall read tha blocks or seek past them; on non-seekable
files, tha blocks shall be read n' tha data shall be
discarded.
.TP 7
\fBseek\fP=\fIn\fP
Skip \fIn\fP blocks (usin tha specified output block size) from the
beginnin of tha output file before copying. On
non-seekable files, existin blocks shall be read n' space from the
current end-of-file ta tha specified offset, if any, filled
with null bytes; on seekable files, tha implementation shall seek
to tha specified offset or read tha blocks as busted lyrics bout for
non-seekable files.
.TP 7
\fBcount\fP=\fIn\fP
Copy only \fIn\fP input blocks.
.TP 7
\fBconv\fP=\fIvalue\fP\fB[\fP,\fIvalue\fP\ ...\fB]\fP
.sp
Where \fIvalue\fPs is comma-separated symbols from tha following
list: 
.TP 7
\fBascii\fP
.RS
Convert EBCDIC ta ASCII; peep ASCII ta EBCDIC Conversion . 
.RE
.TP 7
\fBebcdic\fP
.RS
Convert ASCII ta EBCDIC; peep ASCII ta EBCDIC Conversion . 
.RE
.TP 7
\fBibm\fP
.RS
Convert ASCII ta a gangbangin' finger-lickin' different EBCDIC set; peep ASCII ta IBM EBCDIC Conversion
\&.
.RE
.sp
.LP
Da \fBascii\fP, \fBebcdic\fP, n' \fBibm\fP joints is mutually-exclusive.
.TP 7
\fBblock\fP
.RS
Treat tha input as a sequence of <newline>-terminated or end-of-file-terminated
variable-length recordz independent of
the input block boundaries. Put ya muthafuckin choppers up if ya feel dis! Each record shall be converted ta a record
with a gangbangin' fixed length specified by tha conversion block size.
Any <newline> shall be removed from tha input line; <space>s shall
be appended ta lines dat is shorta than their
conversion block size ta fill tha block. Lines dat is longer than
the conversion block size shall be truncated ta tha phattest
number of charactas dat fit tha fuck into dat size; tha number of truncated
lines shall be reported (see tha STDERR section). 
.LP
Da \fBblock\fP n' \fBunblock\fP joints is mutually-exclusive.
.RE
.TP 7
\fBunblock\fP
.RS
Convert fixed-length recordz ta variable length. Read a number of
bytes equal ta tha conversion block size (or tha number of
bytes remainin up in tha input, if less than tha conversion block size),
delete all trailin <space>s, n' append a
<newline>.
.RE
.TP 7
\fBlcase\fP
.RS
Map uppercase charactas specified by tha \fILC_CTYPE\fP keyword \fBtolower\fP
to tha correspondin lowercase character.
Charactas fo' which no mappin is specified shall not be modified
by dis conversion. I aint talkin' bout chicken n' gravy biatch. 
.LP
Da \fBlcase\fP n' \fBucase\fP symbols is mutually-exclusive.
.RE
.TP 7
\fBucase\fP
.RS
Map lowercase charactas specified by tha \fILC_CTYPE\fP keyword \fBtoupper\fP
to tha correspondin uppercase character.
Charactas fo' which no mappin is specified shall not be modified
by dis conversion.
.RE
.TP 7
\fBswab\fP
.RS
Swap every last muthafuckin pair of input bytes.
.RE
.TP 7
\fBnoerror\fP
.RS
Do not stop processin on a input error. Shiiit, dis aint no joke. When a input error occurs,
a diagnostic message shall be freestyled on standard error,
followed by tha current input n' output block counts up in tha same
format as used at completion (see tha STDERR section). If the
\fBsync\fP conversion is specified, tha missin input shall be replaced
with null bytes n' processed normally; otherwise, the
input block shall be omitted from tha output.
.RE
.TP 7
\fBnotrunc\fP
.RS
Do not truncate tha output file. Preserve blocks up in tha output file
not explicitly freestyled by dis invocation of tha \fIdd\fP
utility. (See also tha precedin \fBof\fP= \fIfile\fP operand.)
.RE
.TP 7
\fBsync\fP
.RS
Pad every last muthafuckin input block ta tha size of tha \fBibs\fP= buffer, appending
null bytes. (If either \fBblock\fP or \fBunblock\fP is
also specified, append <space>s, rather than null bytes.)
.RE
.sp
.sp
.LP
Da behavior is unspecified if operandz other than \fBconv\fP= are
specified mo' than once.
.LP
For tha \fBbs\fP=, \fBcbs\fP=, \fBibs\fP=, n' \fBobs\fP= operands,
the application shall supply a expression specifyin a
size up in bytes. Da expression, \fIexpr\fP, can be:
.IP " 1." 4
A positizzle decimal number
.LP
.IP " 2." 4
A positizzle decimal number followed by \fIk\fP, specifyin multiplication
by 1024
.LP
.IP " 3." 4
A positizzle decimal number followed by \fIb\fP, specifyin multiplication
by 512
.LP
.IP " 4." 4
Two or mo' positizzle decimal numbers (with or without \fIk\fP or \fIb\fP)
separated by \fIx\fP, specifyin tha thang of the
indicated joints
.LP
.LP
All of tha operandz is processed before any input is read.
.LP
Da followin two tablez display tha octal number characta joints
used fo' tha \fBascii\fP n' \fBebcdic\fP conversions (first
table) n' fo' tha \fBibm\fP conversion (second table). In both tables,
the ASCII joints is tha row n' column headaz n' the
EBCDIC joints is found at they intersections. For example, ASCII
0012 (LF) is tha second row, third column, yieldin 0045 in
EBCDIC. Da inverted tablez (for EBCDIC ta ASCII conversion) is not
shown yo, but is up in one-to-one correspondence wit these tables.
Da differences between tha two tablez is highlighted by lil' small-ass boxes
drawn round five entries. Put ya muthafuckin choppers up if ya feel dis! 
.br
.sp
.ce 1
\fBTable: ASCII ta EBCDIC Conversion\fP
.sp
.sp
.ce 1
\fBTable: ASCII ta IBM EBCDIC Conversion\fP
.SH STDIN
.LP
If no \fBif\fP= operand is specified, tha standard input shall be
used. Y'all KNOW dat shit, muthafucka! See tha INPUT FILES section.
.SH INPUT FILES
.LP
Da input file can be any file type.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIdd\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files), the
classification of charactas as uppercase or lowercase, n' the
mappin of charactas from one case ta tha other.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard error and
informatizzle lyrics freestyled ta standard output.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
For SIGINT, tha \fIdd\fP utilitizzle shall interrupt its current processing,
write status shiznit ta standard error, n' exit
as though terminated by SIGINT. Well shiiiit, it shall take tha standard action
for all other signals; peep tha ASYNCHRONOUS EVENTS section up in \fIUtility
Description Defaults\fP .
.SH STDOUT
.LP
If no \fBof\fP= operand is specified, tha standard output shall be
used. Y'all KNOW dat shit, muthafucka! Da nature of tha output dependz on tha operands
selected.
.SH STDERR
.LP
On completion, \fIdd\fP shall write tha number of input n' output
blocks ta standard error. Shiiit, dis aint no joke. In tha POSIX locale tha following
formats shall be used:
.sp
.RS
.nf

\fB"%u+%u recordz in\\n", <\fP\fInumber of whole input blocks\fP\fB>,
    <\fP\fInumber of partial input blocks\fP\fB>
.sp

"%u+%u recordz out\\n", <\fP\fInumber of whole output blocks\fP\fB>,
    <\fP\fInumber of partial output blocks\fP\fB>
\fP
.fi
.RE
.LP
A partial input block is one fo' which \fIread\fP() returned less
than tha input block
size fo' realz. A partial output block is one dat was freestyled wit fewer bytes
than specified by tha output block size.
.LP
In addition, when there be at least one truncated block, tha number
of truncated blocks shall be freestyled ta standard error. Shiiit, dis aint no joke. In
the POSIX locale, tha format shall be:
.sp
.RS
.nf

\fB"%u truncated %s\\n", <\fP\fInumber of truncated blocks\fP\fB>, "record" (if
    <\fP\fInumber of truncated blocks\fP\fB> is one) "records" (otherwise)
\fP
.fi
.RE
.LP
Diagnostic lyrics may also be freestyled ta standard error.
.SH OUTPUT FILES
.LP
If tha \fBof\fP= operand is used, tha output shall be tha same as
busted lyrics bout up in tha STDOUT section.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Da input file was copied successfully.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
If a input error is detected n' tha \fBnoerror\fP conversion has
not been specified, any partial output block shall be
written ta tha output file, a gangbangin' finger-lickin' diagnostic message shall be written,
and tha copy operation shall be discontinued. Y'all KNOW dat shit, muthafucka! If some other
error is detected, a gangbangin' finger-lickin' diagnostic message shall be freestyled n' tha copy
operation shall be discontinued.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da input n' output block size can be specified ta take advantage
of raw physical I/O.
.LP
There is nuff different versionz of tha EBCDIC codesets, n' you can put dat on yo' toast. Da ASCII
and EBCDIC conversions specified fo' tha \fIdd\fP utility
perform conversions fo' tha version specified by tha tables.
.SH EXAMPLES
.LP
Da followin command:
.sp
.RS
.nf

\fBdd if=/dev/rmt0h  of=/dev/rmt1h
\fP
.fi
.RE
.LP
copies from tape drive 0 ta tape drive 1, rockin a cold-ass lil common historical
device namin convention.
.LP
Da followin command:
.sp
.RS
.nf

\fBdd ibs=10  skip=1
\fP
.fi
.RE
.LP
strips tha straight-up original gangsta 10 bytes from standard input.
.LP
This example readz a EBCDIC tape blocked ten 80-byte EBCDIC card
images per block tha fuck into tha ASCII file \fBx\fP:
.sp
.RS
.nf

\fBdd if=/dev/tape of=x ibs=800 cbs=80 conv=ascii,lcase
\fP
.fi
.RE
.SH RATIONALE
.LP
Da OPTIONS section is listed as "None" cuz there be no options
recognized by oldschool \fIdd\fP utilities. Put ya muthafuckin choppers up if ya feel dis! Certainly,
many of tha operandz could done been designed ta use tha Utilitizzle Syntax
Guidelines, which would have resulted up in tha classic
hyphenated option letters. In dis version of dis volume of IEEE\ Std\ 1003.1-2001,
\fIdd\fP retains its curious JCL-like
syntax cuz of tha big-ass number of applications dat depend on the
historical implementation.
.LP
A suggested implementation technique fo' \fBconv\fP= \fBnoerror\fP,
\fBsync\fP is ta zero (or <space>-fill, if
\fBblock\fPin or \fBunblock\fPing) tha input buffer before each read
and ta write tha contentz of tha input buffer ta tha output
even afta a error. Shiiit, dis aint no joke. In dis manner, any data transferred ta tha input
buffer before tha error was detected is preserved. Y'all KNOW dat shit, muthafucka! Another
point is dat a gangbangin' failed read on a regular file or a gangbangin' finger-lickin' disk generally
does not increment tha file offset, n' \fIdd\fP must then seek
past tha block on which tha error occurred; otherwise, tha input error
occurs repetitively. When tha input be a magnetic tape,
however, tha tape normally has passed tha block containin tha error
when tha error is reported, n' thus no seek is necessary.
.LP
Da default \fBibs\fP= n' \fBobs\fP= sizes is specified as 512 bytes
because there be oldschool (largely portable) scripts
that assume these joints, n' you can put dat on yo' toast. If they was left unspecified, unusual thangs up in dis biatch
could occur if a implementation chose a odd block
size.
.LP
Oldschool implementationz of \fIdd\fP used \fIcreat\fP() when processing
\fBof\fP=
\fIfile\fP. This make tha \fBseek\fP= operand unusable except on
special files. Da \fBconv\fP= \fBnotrunc\fP feature was
added cuz mo' recent BSD-based implementations use \fIopen\fP()
(without O_TRUNC)
instead of \fIcreat\fP() yo, but they fail ta delete output file contents
afta tha data
copied.
.LP
Da \fIw\fP multiplier (historically meanin \fIword\fP), is used
in System V ta mean 2 n' up in 4.2 BSD ta mean 4. Right back up in yo muthafuckin ass. Since
\fIword\fP is inherently non-portable, its use aint supported by
this volume of IEEE\ Std\ 1003.1-2001.
.LP
Standard EBCDIC aint gots tha charactas \fB'['\fP n' \fB']'\fP
\&. Da joints used up in tha table is taken from a
common print train dat do contain em. Other than dem characters,
the print train joints is not filled up in yo, but step tha fuck up to
provide a shitload of tha motivation fo' tha oldschool chizzle of translations
reflected here.
.LP
Da Standard EBCDIC table serves up a 1:1 translation fo' all 256 bytes.
.LP
Da IBM EBCDIC table do not provide such a translation. I aint talkin' bout chicken n' gravy biatch. Da marked
cells up in tha tablez differ up in such a way that:
.IP " 1." 4
EBCDIC 0112 ( \fB'cent'\fP ) n' 0152 (broken pipe) do not appear
in tha table.
.LP
.IP " 2." 4
EBCDIC 0137 ( \fB'not'\fP ) translates to/from ASCII 0236 ( \fB'^'\fP
). In tha standard table, EBCDIC 0232 (no graphic)
is used.
.LP
.IP " 3." 4
EBCDIC 0241 ( \fB'~'\fP ) translates to/from ASCII 0176 ( \fB'~'\fP
). In tha standard table, EBCDIC 0137 (
\fB'not'\fP ) is used.
.LP
.IP " 4." 4
0255 ( \fB'['\fP ) n' 0275 ( \fB']'\fP ) step tha fuck up twice, once up in the
same place as fo' tha standard table n' once up in place
of 0112 ( \fB'cent'\fP ) n' 0241 ( \fB'~'\fP ).
.LP
.LP
In net result:
EBCDIC 0275 ( \fB']'\fP ) displaced EBCDIC 0241 ( \fB'~'\fP ) up in cell
0345. 
.LP
\ \ \ \ That displaced EBCDIC 0137 ( \fB'not'\fP ) up in cell 0176.
.LP
\ \ \ \ That displaced EBCDIC 0232 (no graphic) up in cell 0136.
.LP
\ \ \ \ That replaced EBCDIC 0152 (broken pipe) up in cell 0313.
.LP
EBCDIC 0255 ( \fB'['\fP ) replaced EBCDIC 0112 ( \fB'cent'\fP ).
.LP
This translation, however, reflects oldschool practice dat (ASCII)
\fB'~'\fP n' \fB'not'\fP was often mapped to
each other, as was \fB'['\fP n' \fB'cent'\fP ; n' \fB']'\fP and
(EBCDIC) \fB'~'\fP .
.LP
Da \fBcbs\fP operand is required if any of tha \fBascii\fP, \fBebcdic\fP,
or \fBibm\fP operandz is specified. Y'all KNOW dat shit, muthafucka! For the
\fBascii\fP operand, tha input is handled as busted lyrics bout fo' tha \fBunblock\fP
operand except dat charactas is converted to
ASCII before tha trailin <space>s is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For tha \fBebcdic\fP
and \fBibm\fP operands, tha input is handled as
busted lyrics bout fo' tha \fBblock\fP operand except dat tha charactas are
converted ta EBCDIC or IBM EBCDIC afta tha trailing
<space>s is added.
.LP
Da \fBblock\fP n' \fBunblock\fP keywordz is from oldschool BSD
practice.
.LP
Da consistent use of tha word \fBrecord\fP up in standard error lyrics
matches most oldschool practice fo' realz. An earlier version of
System V used \fBblock\fP yo, but dis has been updated up in mo' recent
releases.
.LP
Early proposals only allowed two numbers separated by \fBx\fP ta be
used up in a thang when specifyin \fBbs\fP=, \fBcbs\fP=,
\fBibs\fP=, n' \fBobs\fP= sizes. This was chizzled ta reflect the
historical practice of allowin multiple numbers up in tha product
as provided by Version 7 n' all releasez of System V n' BSD.
.LP
A chizzle ta tha \fBswab\fP conversion is required ta match historical
practice n' is tha result of IEEE PASC Interpretations
1003.2 #03 n' #04, submitted fo' tha ISO\ POSIX-2:1993 standard.
.LP
A chizzle ta tha handlin of SIGINT is required ta match historical
practice n' is tha result of IEEE PASC Interpretation 1003.2
#06 submitted fo' tha ISO\ POSIX-2:1993 standard.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIUtilitizzle Description Defaults\fP, \fIsed\fP, \fItr\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
