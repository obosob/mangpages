.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SET" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" set 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
set \- set or unset options n' positionizzle parameters
.SH SYNOPSIS
.LP
\fBset\fP \fB[\fP\fB-abCefmnuvx\fP\fB][\fP\fB-h\fP\fB][\fP\fB-o\fP
\fIoption\fP\fB][\fP\fIargument\fP\fB...\fP\fB]\fP\fB
.br
.sp
set\fP \fB[\fP\fB+abCefmnuvx\fP\fB][\fP\fB+h\fP\fB][\fP\fB+o\fP
\fIoption\fP\fB][\fP\fIargument\fP\fB...]\fP\fB
.br
.sp
set --\fP \fB[\fP\fIargument\fP\fB...\fP\fB]\fP\fB
.br
.sp
set -o
.br
.sp
set +o
.br
\fP
.SH DESCRIPTION
.LP
If no \fIoption\fPs or \fIargument\fPs is specified, \fIset\fP shall
write tha names n' jointz of all shell variablez in
the collation sequence of tha current locale. Each \fIname\fP shall
start on a separate line, rockin tha format:
.sp
.RS
.nf

\fB"%s=%s\\n", <\fP\fIname\fP\fB>, <\fP\fIvalue\fP\fB>
\fP
.fi
.RE
.LP
Da \fIvalue\fP strang shall be freestyled wit appropriate quoting;
see tha description of shell quotin up in \fIQuoting\fP . Da output
shall be suitable fo' reinput ta tha shell, settin or resetting,
as
far as possible, tha variablez dat is currently set; read-only variables
cannot be reset.
.LP
When options is specified, they shall set or unset attributes of
the shell, as busted lyrics bout below. When \fIargument\fPs are
specified, they cause positionizzle parametas ta be set or unset, as
busted lyrics bout below. Right back up in yo muthafuckin ass. Settin or unsettin attributes n' positional
parametas is not necessarily related actions yo, but they can be combined
in a single invocation of \fIset\fP.
.LP
Da \fIset\fP special built-in shall support tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines
except dat options can be specified with
either a leadin hyphen (meanin enable tha option) or plus sign (meaning
disable it) unless otherwise specified.
.LP
Implementations shall support tha options up in tha followin list in
both they hyphen n' plus-sign forms. These options can also
be specified as options ta \fIsh\fP.
.TP 7
\fB-a\fP
When dis option is on, tha \fIexport\fP attribute shall be set for
each variable ta which a assignment is performed; peep the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.21, Variable
Assignment. If tha assignment precedes a utilitizzle name up in a cold-ass lil command,
the \fIexport\fP attribute shall not persist up in the
current execution environment afta tha utilitizzle completes, wit the
exception dat precedin one of tha special built-in utilities
causes tha \fIexport\fP attribute ta persist afta tha built-in has
completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha assignment do not precede a utilitizzle name
in tha command, or if tha assignment be a result of tha operation
of tha \fIgetopts\fP or
\fIread\fP utilities, tha \fIexport\fP attribute shall persist until
the variable is
unset.
.TP 7
\fB-b\fP
This option shall be supported if tha implementation supports the
User Portabilitizzle Utilitizzles option. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it shall cause tha shell
to notify tha user asynchronously of background thang completions. The
followin message is freestyled ta standard error: 
.sp
.RS
.nf

\fB"[%d]%c %s%s\\n", <\fP\fIjob-number\fP\fB>, <\fP\fIcurrent\fP\fB>, <status>, <job-name>
\fP
.fi
.RE
.LP
where tha fieldz shall be as bigs up:
.TP 7
<\fIcurrent\fP>
.RS
Da characta \fB'+'\fP identifies tha thang dat would be used as a
default fo' tha \fIfg\fP or \fIbg\fP utilities; dis thang can also
be specified
usin tha \fIjob_id\fP \fB"%+"\fP or \fB"%%"\fP . Da characta \fB'-'\fP
identifies tha thang dat would become the
default if tha current default thang was ta exit; dis thang can also
be specified rockin tha \fIjob_id\fP \fB"%-"\fP . For other
jobs, dis field be a <space> fo' realz. At most one thang can be identified with
\fB'+'\fP n' at most one thang can be identified with
\fB'-'\fP . If there be any suspended thang, then tha current thang shall
be a suspended thang. If there be at least two suspended
jobs, then tha previous thang also shall be a suspended thang.
.RE
.TP 7
<\fIjob-number\fP>
.RS
A number dat can be used ta identify tha process crew ta tha \fIwait\fP,
\fIfg\fP, \fIbg\fP, n' \fIkill\fP utilities. Put ya muthafuckin choppers up if ya feel dis! Usin these utilities,
the thang can be identified by prefixin tha thang number
with \fB'%'\fP .
.RE
.TP 7
<\fIstatus\fP>
.RS
Unspecified.
.RE
.TP 7
<\fIjob-name\fP>
.RS
Unspecified.
.RE
.sp
.LP
When tha shell notifies tha user a thang has been completed, it may
remove tha thangz process ID from tha list of dem known in
the current shell execution environment; peep \fIAsynchronous Lists\fP
\& fo' realz. Asynchronous
notification shall not be enabled by default.
.TP 7
\fB-C\fP
(Uppercase C.) Prevent existin filez from bein overwritten by the
shellz \fB'>'\fP redirection operator (see \fIRedirectin Output\fP
); tha \fB">|"\fP redirection operator shall override this
\fInoclobber\fP option fo' a individual file.
.TP 7
\fB-e\fP
When dis option is on, if a simple command fails fo' any of tha reasons
listed up in \fIConsequencez of Shell Errors\fP or returns a exit status
value >0, n' aint part of
the compound list followin a \fBwhile\fP, \fBuntil\fP, or \fBif\fP
keyword, n' aint a part of a AND or OR list, n' is not
a pipeline preceded by tha \fB!\fP reserved word, then tha shell shall
immediately exit.
.TP 7
\fB-f\fP
Da shell shall disable pathname expansion.
.TP 7
\fB-h\fP
Locate n' remember utilitizzles invoked by functions as dem functions
are defined (the utilitizzles is normally located when the
function is executed). 
.TP 7
\fB-m\fP
This option shall be supported if tha implementation supports the
User Portabilitizzle Utilitizzles option. I aint talkin' bout chicken n' gravy biatch fo' realz. All thangs shall be run in
their own process groups. Immediately before tha shell thangs a prompt
afta completion of tha background thang, a message reporting
the exit statuz of tha background thang shall be freestyled ta standard
error. Shiiit, dis aint no joke. If a gangbangin' foreground thang stops, tha shell shall write a
message ta standard error ta dat effect, formatted as busted lyrics bout by
the \fIjobs\fP utility.
In addition, if a thang chizzlez status other than exitin (for example,
if it stops fo' input or output or is stopped by a SIGSTOP
signal), tha shell shall write a similar message immediately prior
to freestylin tha next prompt. This option is enabled by default
for interactizzle shells.
.TP 7
\fB-n\fP
Da shell shall read commandz but do not execute them; dis can
be used ta check fo' shell script syntax errors fo' realz. An
interactizzle shell may ignore dis option.
.TP 7
\fB-o\fP
Write tha current settingz of tha options ta standard output up in an
unspecified format.
.TP 7
\fB+o\fP
Write tha current option settings ta standard output up in a gangbangin' format that
is suitable fo' reinput ta tha shell as commandz that
achieve tha same options settings.
.TP 7
\fB-o\ \fP \fIoption\fP
.sp
This option is supported if tha system supports tha User Portability
Utilitizzles option. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it shall set various options, nuff of which
shall be equivalent ta tha single option letters. Da followin joints
of \fIoption\fP shall be supported: 
.TP 7
\fIallexport\fP
.RS
Equivalent ta \fB-a\fP.
.RE
.TP 7
\fIerrexit\fP
.RS
Equivalent ta \fB-e\fP.
.RE
.TP 7
\fIignoreeof\fP
.RS
Prevent a interactizzle shell from exitin on end-of-file. This setting
prevents accidental logouts when <control>-D is
entered. Y'all KNOW dat shit, muthafucka! A user shall explicitly \fIexit\fP ta leave tha interactive
shell.
.RE
.TP 7
\fImonitor\fP
.RS
Equivalent ta \fB-m\fP. This option is supported if tha system supports
the User Portabilitizzle Utilitizzles option.
.RE
.TP 7
\fInoclobber\fP
.RS
Equivalent ta \fB-C\fP (uppercase C).
.RE
.TP 7
\fInoglob\fP
.RS
Equivalent ta \fB-f\fP.
.RE
.TP 7
\fInoexec\fP
.RS
Equivalent ta \fB-n\fP.
.RE
.TP 7
\fInolog\fP
.RS
Prevent tha entry of function definitions tha fuck into tha command history;
see \fICommand History List\fP
\&.
.RE
.TP 7
\fInotify\fP
.RS
Equivalent ta \fB-b\fP.
.RE
.TP 7
\fInounset\fP
.RS
Equivalent ta \fB-u\fP.
.RE
.TP 7
\fIverbose\fP
.RS
Equivalent ta \fB-v\fP.
.RE
.TP 7
\fIvi\fP
.RS
Allow shell command line editin rockin tha built-in \fIvi\fP editor.
Enablin \fIvi\fP mode shall disable any other command line editing
mode provided as a implementation
extension. I aint talkin' bout chicken n' gravy biatch. 
.LP
It need not be possible ta set \fIvi\fP mode on fo' certain block-mode
terminals.
.RE
.TP 7
\fIxtrace\fP
.RS
Equivalent ta \fB-x\fP.
.RE
.sp
.TP 7
\fB-u\fP
Da shell shall write a message ta standard error when it tries to
expand a variable dat aint set n' immediately exit fo' realz. An
interactizzle shell shall not exit.
.TP 7
\fB-v\fP
Da shell shall write its input ta standard error as it is read.
.TP 7
\fB-x\fP
Da shell shall write ta standard error a trace fo' each command after
it expandz tha command n' before it executes dat shit. Well shiiiit, it is
unspecified whether tha command dat turns tracin off is traced.
.sp
.LP
Da default fo' all these options shall be off (unset) unless stated
otherwise up in tha description of tha option or unless the
shell was invoked wit dem on; peep \fIsh\fP.
.LP
Da remainin arguments shall be assigned up in order ta tha positional
parameters. Da special parameta \fB'#'\fP shall be set
to reflect tha number of positionizzle parametas fo' realz. All positionizzle parameters
shall be unset before any freshly smoked up joints is assigned.
.LP
Da special argument \fB"--"\fP immediately followin tha \fIset\fP
command name can be used ta delimit tha arguments if the
first argument begins wit \fB'+'\fP or \fB'-'\fP, or ta prevent
inadvertent listin of all shell variablez when there are
no arguments, n' you can put dat on yo' toast. Da command \fIset\fP \fB--\fP without \fIargument\fP
shall unset all positionizzle parametas n' set tha special
parameta \fB'#'\fP ta zero.
.SH OPTIONS
.LP
See tha DESCRIPTION.
.SH OPERANDS
.LP
See tha DESCRIPTION.
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
None.
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
See tha DESCRIPTION.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Zero.
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH EXAMPLES
.LP
Write up all variablez n' they joints:
.sp
.RS
.nf

\fBset
\fP
.fi
.RE
.LP
Set $1, $2, n' $3 n' set \fB"$#"\fP ta 3:
.sp
.RS
.nf

\fBset c a funky-ass b
\fP
.fi
.RE
.LP
Turn on tha \fB-x\fP n' \fB-v\fP options:
.sp
.RS
.nf

\fBset -xv
\fP
.fi
.RE
.LP
Unset all positionizzle parameters:
.sp
.RS
.nf

\fBset --
\fP
.fi
.RE
.LP
Set $1 ta tha value of \fIx\fP, even if it begins wit \fB'-'\fP or
\fB'+'\fP :
.sp
.RS
.nf

\fBset -- "$x"
\fP
.fi
.RE
.LP
Set tha positionizzle parametas ta tha expansion of \fIx\fP, even if
\fIx\fP expandz wit a leadin \fB'-'\fP or \fB'+'\fP
:
.sp
.RS
.nf

\fBset -- $x
\fP
.fi
.RE
.SH RATIONALE
.LP
Da \fIset\fP -- form is listed specifically up in tha SYNOPSIS even
though dis usage is implied by tha Utilitizzle Syntax
Guidelines. Da explanation of dis feature removes any ambiguity
about whether tha \fIset\fP -- form might be misinterpreted as
bein equivalent ta \fIset\fP without any options or arguments, n' you can put dat on yo' toast. The
functionalitizzle of dis form has been adopted from the
KornShell. In System V, \fIset\fP -- only unsets parametas if there
is at least one argument; tha only way ta unset all
parametas is ta use \fIshift\fP. Usin tha KornShell version should
not affect System V
scripts cuz there should be no reason ta issue it without arguments
deliberately; if it was issued as, fo' example:
.sp
.RS
.nf

\fBset -- "$@"
\fP
.fi
.RE
.LP
and there was up in fact no arguments resultin from \fB"$@"\fP, unsetting
the parametas would have no result.
.LP
Da \fIset\fP + form up in early proposals was omitted as bein a unnecessary
duplication of \fIset\fP ridin' solo n' not widespread
historical practice.
.LP
Da \fInoclobber\fP option was chizzled ta allow \fIset\fP \fB-C\fP
as well as tha \fIset\fP \fB-o\fP \fInoclobber\fP
option. I aint talkin' bout chicken n' gravy biatch. Da single-letta version was added so dat tha historical
\fB"$-"\fP paradigm would not be broken; peep \fISpecial Parameters\fP
\&.
.LP
Da \fB-h\fP flag is related ta command name hashin n' is only required
on XSI-conformant systems.
.LP
Da followin \fIset\fP flags was omitted intentionally wit the
followin rationale:
.TP 7
\fB-k\fP
Da \fB-k\fP flag was originally added by tha lyricist of tha Bourne
shell ta make it easier fo' playaz of pre-release versions
of tha shell. In early versionz of tha Bourne shell tha construct
\fIset\fP \fIname\fP= \fIvalue\fP had ta be used ta assign
values ta shell variables. Da problem wit \fB-k\fP is dat tha behavior
affects parsing, virtually precludin freestylin any
compilers. To explain tha behavior of \fB-k\fP, it is necessary to
describe tha parsin algorithm, which is
implementation-defined. Y'all KNOW dat shit, muthafucka! For example: 
.sp
.RS
.nf

\fBset -k; echo\fP \fIname\fP\fB=\fP\fIvalue\fP
.fi
.RE
.LP
and:
.sp
.RS
.nf

\fBset -k
echo\fP \fIname\fP\fB=\fP\fIvalue\fP
.fi
.RE
.LP
behave differently. Da interaction wit functions is even mo' complex.
What tha fuck iz more, tha \fB-k\fP flag is never needed, since
the command line could done been reordered.
.TP 7
\fB-t\fP
Da \fB-t\fP flag is hard ta specify n' almost never used. Y'all KNOW dat shit, muthafucka! Da only
known use could be done wit here-documents, n' you can put dat on yo' toast. Mo'over,
the behavior wit \fIksh\fP n' \fIsh\fP differs. The
reference page say dat it exits afta readin n' executin one
command. Y'all KNOW dat shit, muthafucka! What tha fuck iz one command? If tha input is \fIdate\fP;
\fIdate\fP, \fIsh\fP executes both \fIdate\fP commands
while \fIksh\fP do only tha first.
.sp
.LP
Consideration was given ta rewritin \fIset\fP ta simplify its confusing
syntax fo' realz. A specific suggestion was dat tha \fIunset\fP utilitizzle should
be used ta unset options instead of rockin tha non- \fIgetopt\fP()
-able + \fIoption\fP syntax. But fuck dat shiznit yo, tha word on tha street is dat tha conclusion was reached that
the
historical practice of rockin + \fIoption\fP was satisfactory n' that
there was no compellin reason ta modify such widespread
historical practice.
.LP
Da \fB-o\fP option was adopted from tha KornShell ta address user
needs. In addizzle ta its generally thugged-out intercourse,
\fB-o\fP is needed ta provide tha \fIvi\fP command line editin mode,
for which historical
practice yieldz no single-letta option name. (Although it might have
been possible ta invent such a letter, dat shiznit was recognized that
other editin modes would be pimped n' \fB-o\fP serves up ample
name space fo' describin such extensions.)
.LP
Oldschool implementations is inconsistent up in tha format used for
\fB-o\fP option status reporting. Da \fB+o\fP format
without a option-argument was added ta allow portable access ta the
options dat can be saved n' then lata restored using, for
instance, a thugged-out dot script.
.LP
Historically, \fIsh\fP did trace tha command \fIset\fP \fB+x\fP yo, but
\fIksh\fP did not.
.LP
Da \fIignoreeof\fP settin prevents accidental logouts when tha end-of-file
characta (typically <control>-D) is
entered. Y'all KNOW dat shit, muthafucka! A user shall explicitly \fIexit\fP ta leave tha interactive
shell.
.LP
Da \fIset\fP \fB-m\fP option was added ta apply only ta tha UPE cuz
it applies primarily ta interactizzle use, not shell
script applications.
.LP
Da mobilitizzle ta do asynchronous notification became available up in the
1988 version of tha KornShell. To have it occur, tha user
had ta issue tha command:
.sp
.RS
.nf

\fBtrap "jobs -n" CLD
\fP
.fi
.RE
.LP
Da C shell serves up two different levelz of a asynchronous notification
capability. Da environment variable \fInotify\fP is
analogous ta what tha fuck is done up in \fIset\fP \fB-b\fP or \fIset\fP \fB-o\fP
\fInotify\fP. When set, it notifies tha user immediately
of background thang completions. When unset, dis capabilitizzle is turned
off.
.LP
Da other notification mobilitizzle comes all up in tha built-in utility
\fInotify\fP. The
syntax is:
.sp
.RS
.nf

\fBnotify\fP \fB[\fP\fB%job ...\fP \fB]\fP
.fi
.RE
.LP
By issuin \fInotify\fP wit no operands, it causes tha C shell to
notify tha user
asynchronously when tha state of tha current thang chizzles. If given
operands, \fInotify\fP
asynchronously informs tha user of chizzlez up in tha statez of tha specified
jobs.
.LP
To add asynchronous notification ta tha POSIX shell, neither tha KornShell
extensions ta \fItrap\fP, nor tha C shell \fInotify\fP environment
variable
seemed appropriate ( \fInotify\fP aint a proper POSIX environment
variable name).
.LP
Da \fIset\fP \fB-b\fP option was selected as a cold-ass lil compromise.
.LP
Da \fInotify\fP built-in was considered ta have mo' functionality
than was required
for simple asynchronous notification.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISpecial Built-In Utilities\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
