.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FILE" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" file 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
file \- determine file type
.SH SYNOPSIS
.LP
\fBfile\fP \fB[\fP\fB-dh\fP\fB][\fP\fB-M\fP \fIfile\fP\fB][\fP\fB-m\fP
\fIfile\fP\fB]\fP
\fIfile\fP \fB...
.br
.sp
file -i\fP \fB[\fP\fB-h\fP\fB]\fP \fIfile\fP \fB... \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIfile\fP utilitizzle shall big-ass up a seriez of tests up in sequence
on each specified \fIfile\fP up in a attempt ta classify
it:
.IP " 1." 4
If \fIfile\fP do not exist, cannot be read, or its file status could
not be determined, tha output shall indicate dat the
file was processed yo, but dat its type could not be determined.
.LP
.IP " 2." 4
If tha file aint a regular file, its file type shall be identified.
Da file types directory, FIFO, socket, block special, and
characta special shall be identified as such. Other implementation-defined
file types may also be identified. Y'all KNOW dat shit, muthafucka! If \fIfile\fP be a
symbolic link, by default tha link shall be resolved n' \fIfile\fP
shall test tha type of file referenced by tha symbolic link.
(See tha \fB-h\fP n' \fB-i\fP options below.)
.LP
.IP " 3." 4
If tha length of \fIfile\fP is zero, it shall be identified as an
empty file.
.LP
.IP " 4." 4
Da \fIfile\fP utilitizzle shall examine a initial segment of \fIfile\fP
and shall cook up a guess at identifyin its contents based
on position-sensitizzle tests, n' you can put dat on yo' toast. (Da answer aint guaranteed ta be erect;
see tha \fB-d\fP, \fB-M\fP, n' \fB-m\fP options
below.)
.LP
.IP " 5." 4
Da \fIfile\fP utilitizzle shall examine \fIfile\fP n' cook up a guess at
identifyin its contents based on context-sensitive
default system tests, n' you can put dat on yo' toast. (Da answer aint guaranteed ta be erect.)
.LP
.IP " 6." 4
Da file shall be identified as a thugged-out data file.
.LP
.LP
If \fIfile\fP do not exist, cannot be read, or its file status could
not be determined, tha output shall indicate dat the
file was processed yo, but dat its type could not be determined.
.LP
If \fIfile\fP be a symbolic link, by default tha link shall be resolved
and \fIfile\fP shall test tha type of file referenced
by tha symbolic link.
.SH OPTIONS
.LP
Da \fIfile\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines,
except dat tha order of tha \fB-m\fP,
\fB-d\fP, n' \fB-M\fP options shall be significant.
.LP
Da followin options shall be supported by tha implementation:
.TP 7
\fB-d\fP
Apply any position-sensitizzle default system tests n' context-sensitive
default system tests ta tha file. This is tha default
if no \fB-M\fP or \fB-m\fP option is specified.
.TP 7
\fB-h\fP
When a symbolic link is encountered, identify tha file as a symbolic
link. If \fB-h\fP aint specified n' \fIfile\fP be a
symbolic link dat refers ta a nonexistent file, \fIfile\fP shall
identify tha file as a symbolic link, as if \fB-h\fP had been
specified.
.TP 7
\fB-i\fP
If a gangbangin' file be a regular file, do not attempt ta classify tha type of
the file further yo, but identify tha file as specified up in the
STDOUT section.
.TP 7
\fB-M\ \fP \fIfile\fP
Specify tha name of a gangbangin' file containin position-sensitizzle tests that
shall be applied ta a gangbangin' file up in order ta classify it (see the
EXTENDED DESCRIPTION). No position-sensitizzle default system tests
nor context-sensitizzle default system tests shall be applied
unless tha \fB-d\fP option be also specified.
.TP 7
\fB-m\ \fP \fIfile\fP
Specify tha name of a gangbangin' file containin position-sensitizzle tests that
shall be applied ta a gangbangin' file up in order ta classify it (see the
EXTENDED DESCRIPTION).
.sp
.LP
If tha \fB-m\fP option is specified without specifyin tha \fB-d\fP
option or tha \fB-M\fP option, position-sensitizzle default
system tests shall be applied afta tha position-sensitizzle tests specified
by tha \fB-m\fP option. I aint talkin' bout chicken n' gravy biatch. If tha \fB-M\fP option is
specified wit tha \fB-d\fP option, tha \fB-m\fP option, or both,
or tha \fB-m\fP option is specified wit tha \fB-d\fP option,
the concatenation of tha position-sensitizzle tests specified by these
options shall be applied up in tha order specified by the
appearizzle of these options. If a \fB-M\fP or \fB-m\fP \fIfile\fP
option-argument is \fB-\fP, tha thangs up in dis biatch is unspecified.
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIfile\fP
A pathname of a gangbangin' file ta be tested.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
Da \fIfile\fP can be any file type.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIfile\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard error and
informatizzle lyrics freestyled ta standard output.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
In tha POSIX locale, tha followin format shall be used ta identify
each operand, \fIfile\fP specified:
.sp
.RS
.nf

\fB"%s: %s\\n", <\fP\fIfile\fP\fB>, <\fP\fItype\fP\fB>
\fP
.fi
.RE
.LP
Da joints fo' <\fItype\fP> is unspecified, except dat up in tha POSIX
locale, if \fIfile\fP is identified as one of the
types listed up in tha followin table, <\fItype\fP> shall contain (but
is not limited to) tha correspondin string, unless the
file is identified by a position-sensitizzle test specified by a \fB-M\fP
or \fB-m\fP option. I aint talkin' bout chicken n' gravy biatch. Each space shown up in tha strings shall
be exactly one <space>.
.br
.sp
.ce 1
\fBTable: File Utilitizzle Output Strings\fP
.TS C
center; lw(40)1 lw(25)1 l.
T{
.na
\fBIf \fIfile\fP is:\fP
.ad
T}	T{
.na
\fB<\fItype\fP> shall contain tha string:\fP
.ad
T}	\fBNotes\fP
T{
.na
Nonexistent
.ad
T}	T{
.na
cannot open
.ad
T}	\ 
T{
.na
Block special
.ad
T}	T{
.na
block special
.ad
T}	1
T{
.na
Characta special
.ad
T}	T{
.na
characta special
.ad
T}	1
T{
.na
Directory
.ad
T}	T{
.na
directory
.ad
T}	1
T{
.na
FIFO
.ad
T}	T{
.na
fifo
.ad
T}	1
T{
.na
Socket
.ad
T}	T{
.na
socket
.ad
T}	1
T{
.na
Symbolic link
.ad
T}	T{
.na
symbolic link to
.ad
T}	1
T{
.na
Regular file
.ad
T}	T{
.na
regular file
.ad
T}	1,2
T{
.na
Empty regular file
.ad
T}	T{
.na
empty
.ad
T}	3
T{
.na
Regular file dat cannot be read
.ad
T}	T{
.na
cannot open
.ad
T}	3
T{
.na
Executable binary
.ad
T}	T{
.na
executable
.ad
T}	4,6
T{
.na
\fIar\fP archive library (see \fIar\fP)
.ad
T}	T{
.na
archive
.ad
T}	4,6
T{
.na
Extended \fIcpio\fP format (see \fIpax\fP)
.ad
T}	T{
.na
cpio archive
.ad
T}	4,6
T{
.na
Extended \fItar\fP format (see \fBustar\fP up in \fIpax\fP)
.ad
T}	T{
.na
tar archive
.ad
T}	4,6
T{
.na
Shell script
.ad
T}	T{
.na
commandz text
.ad
T}	5,6
T{
.na
C-language source
.ad
T}	T{
.na
c program text
.ad
T}	5,6
T{
.na
FORTRAN source
.ad
T}	T{
.na
fortran program text
.ad
T}	5,6
T{
.na
Regular file whose type cannot be determined
.ad
T}	T{
.na
data
.ad
T}	\ 
.TE
.TP 7
\fBNotes:\fP
.RS
.IP " 1." 4
This be a gangbangin' file type test.
.LP
.IP " 2." 4
This test be applied only if tha \fB-i\fP option is specified.
.LP
.IP " 3." 4
This test be applied only if tha \fB-i\fP option aint specified.
.LP
.IP " 4." 4
This be a position-sensitizzle default system test.
.LP
.IP " 5." 4
This be a cold-ass lil context-sensitizzle default system test.
.LP
.IP " 6." 4
Position-sensitizzle default system tests n' context-sensitizzle default
system tests is not applied if tha \fB-M\fP option is
specified unless tha \fB-d\fP option be also specified.
.LP
.RE
.sp
.LP
In tha POSIX locale, if \fIfile\fP is identified as a symbolic link
(see tha \fB-h\fP option), tha followin alternative
output format shall be used:
.sp
.RS
.nf

\fB"%s: %s %s\\n", <\fP\fIfile\fP\fB>, <\fP\fItype\fP\fB>, <\fP\fIcontentz of link\fP\fB>"
\fP
.fi
.RE
.LP
If tha file named by tha \fIfile\fP operand do not exist, cannot
be read, or tha type of tha file named by tha \fIfile\fP
operand cannot be determined, dis shall not be considered a error
that affects tha exit status.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
A file specified as a option-argument ta tha \fB-m\fP or \fB-M\fP
options shall contain one position-sensitizzle test per line,
which shall be applied ta tha file. If tha test succeeds, tha message
field of tha line shall be printed n' no further tests shall
be applied, wit tha exception dat tests on immediately following
lines beginnin wit a single \fB'>'\fP characta shall be
applied.
.LP
Each line shall be composed of tha followin four <blank>-separated
fields:
.TP 7
\fIoffset\fP
An unsigned number (optionally preceded by a single \fB'>'\fP character)
specifyin tha \fIoffset\fP, up in bytes, of the
value up in tha file dat is ta be compared against tha \fIvalue\fP field
of tha line. If tha file is shorta than tha specified
offset, tha test shall fail. 
.LP
If tha \fIoffset\fP begins wit tha characta \fB'>'\fP, tha test
contained up in tha line shall not be applied ta tha file
unless tha test on tha last line fo' which tha \fIoffset\fP did not
begin wit a \fB'>'\fP was successful naaahhmean, biatch? By default, the
\fIoffset\fP shall be interpreted as a unsigned decimal number n' shit. With
a leadin 0x or 0X, tha \fIoffset\fP shall be interpreted
as a hexadecimal number; otherwise, wit a leadin 0, tha \fIoffset\fP
shall be interpreted as a octal number.
.TP 7
\fItype\fP
Da type of tha value up in tha file ta be tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da type shall consist
of tha type justification charactas \fBc\fP,
\fBd\fP, \fBf\fP, \fBs\fP, n' \fBu\fP, specifyin character,
signed decimal, floatin point, string, n' unsigned
decimal, respectively. 
.LP
Da \fItype\fP strang shall be interpreted as tha bytes from tha file
startin all up in tha specified \fIoffset\fP n' includin the
same number of bytes specified by tha \fIvalue\fP field. Y'all KNOW dat shit, muthafucka! If insufficient
bytes remain up in tha file past tha \fIoffset\fP ta match
the \fIvalue\fP field, tha test shall fail.
.LP
Da type justification charactas \fBd\fP, \fBf\fP, n' \fBu\fP
can be followed by a optionizzle unsigned decimal
integer dat specifies tha number of bytes represented by tha type.
Da type justification characta \fBf\fP can be followed by
an optionizzle \fBF\fP, \fBD\fP, or \fBL\fP, indicatin dat tha value
iz of type \fBfloat\fP, \fBdouble\fP, or \fBlong
double\fP, respectively. Da type justification charactas \fBd\fP
and \fBu\fP can be followed by a optionizzle \fBC\fP,
\fBS\fP, \fBI\fP, or \fBL\fP, indicatin dat tha value iz of type
\fBchar\fP, \fBshort\fP, \fBint\fP, or
\fBlong\fP, respectively.
.LP
Da default number of bytes represented by tha type specifiers \fBd\fP,
\fBf\fP, n' \fBu\fP shall correspond to
their respectizzle C-language types as bigs up. If tha system fronts
conformizzle ta tha C-Language Development Utilitizzles option,
those specifiers shall correspond ta tha default sizes used up in the
\fIc99\fP utility.
Otherwise, tha default sizes shall be implementation-defined.
.LP
For tha type specifier charactas \fBd\fP n' \fBu\fP, tha default
number of bytes shall correspond ta tha size of a
basic integer type of tha implementation. I aint talkin' bout chicken n' gravy biatch. For these specifier characters,
the implementation shall support jointz of tha optional
number of bytes ta be converted correspondin ta tha number of bytes
in tha C-language types \fBchar\fP, \fBshort\fP, \fBint\fP,
or \fBlong\fP. These numbers can also be specified by a application
as tha charactas \fBC\fP, \fBS\fP, \fBI\fP, and
\fBL\fP, respectively. Da byte order used when interpretin numeric
values is implementation-defined yo, but shall correspond to
the order up in which a cold-ass lil constant of tha correspondin type is stored
in memory on tha system.
.LP
For tha type specifier \fBf\fP, tha default number of bytes shall
correspond ta tha number of bytes up in tha basic double
precision floating-point data type of tha underlyin implementation.
Da implementation shall support jointz of tha optionizzle number
of bytes ta be converted correspondin ta tha number of bytes up in the
C-language types \fBfloat\fP, \fBdouble\fP, n' \fBlong
double\fP. These numbers can also be specified by a application as
the charactas \fBF\fP, \fBD\fP, n' \fBL\fP,
respectively.
.LP
All type specifiers, except fo' \fBs\fP, can be followed by a mask
specifier of tha form &\fInumber\fP. Da mask value
shall be AND'ed wit tha value of tha input file before tha comparison
with tha \fIvalue\fP field of tha line is made. By default,
the mask shall be interpreted as a unsigned decimal number n' shit. With
a leadin 0x or 0X, tha mask shall be interpreted as a unsigned
hexadecimal number; otherwise, wit a leadin 0, tha mask shall be
interpreted as a unsigned octal number.
.LP
Da strings \fBbyte\fP, \fBshort\fP, \fBlong\fP, n' \fBstring\fP
shall also be supported as type fields, bein interpreted
as \fBdC\fP, \fBdS\fP, \fBdL\fP, n' \fBs\fP, respectively.
.TP 7
\fIvalue\fP
Da \fIvalue\fP ta be compared wit tha value from tha file. 
.LP
If tha specifier from tha type field is \fBs\fP or \fBstring\fP, then
interpret tha value as a string. Otherwise, interpret
it as a number n' shit. If tha value be a string, then tha test shall succeed
only when a strang value exactly matches tha bytes from the
file.
.LP
If tha \fIvalue\fP be a string, it can contain tha followin sequences:
.TP 7
\\\fIcharacter\fP
.RS
Da backslash-escape sequences as specified up in tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Table 5-1, Escape
Sequences n' Associated Actions ( \fB'\\\\'\fP, \fB'\\a'\fP, \fB'\\b'\fP,
\fB'\\f'\fP, \fB'\\n'\fP, \fB'\\r'\fP,
\fB'\\t'\fP, \fB'\\v'\fP ). Da thangs up in dis biatch of rockin any other character,
other than a octal digit, followin tha backslash are
unspecified.
.RE
.TP 7
\\\fIoctal\fP
.RS
Octal sequences dat can be used ta represent charactas wit specific
coded joints fo' realz. An octal sequence shall consist of a
backslash followed by tha longest sequence of one, two, or three octal-digit
charactas (01234567). If tha size of a funky-ass byte on the
system is pimped outa than 9 bits, tha valid escape sequence used ta represent
a byte is implementation-defined.
.RE
.sp
.LP
By default, any value dat aint a strang shall be interpreted as
a signed decimal number n' shiznit fo' realz. Any such value, wit a leadin 0x or
0X, shall be interpreted as a unsigned hexadecimal number; otherwise,
with a leadin zero, tha value shall be interpreted as an
unsigned octal number.
.LP
If tha value aint a string, it can be preceded by a cold-ass lil characta indicating
the comparison ta be performed. Y'all KNOW dat shit, muthafucka! Permissible
charactas n' tha comparisons they specify is as bigs up:
.TP 7
\fB=\fP
.RS
Da test shall succeed if tha value from tha file equals tha \fIvalue\fP
field.
.RE
.TP 7
\fB<\fP
.RS
Da test shall succeed if tha value from tha file is less than the
\fIvalue\fP field.
.RE
.TP 7
\fB>\fP
.RS
Da test shall succeed if tha value from tha file is pimped outa than
the \fIvalue\fP field.
.RE
.TP 7
\fB&\fP
.RS
Da test shall succeed if all of tha set bits up in tha \fIvalue\fP field
are set up in tha value from tha file.
.RE
.TP 7
\fB^\fP
.RS
Da test shall succeed if at least one of tha set bits up in tha \fIvalue\fP
field aint set up in tha value from tha file.
.RE
.TP 7
\fBx\fP
.RS
Da test shall succeed if tha file is big-ass enough ta contain a value
of tha type specified startin all up in tha offset
specified.
.RE
.sp
.TP 7
\fImessage\fP
Da \fImessage\fP ta be printed if tha test succeeds. Da \fImessage\fP
shall be interpreted rockin tha notation fo' tha \fIprintf\fP formatting
specification; peep \fIprintf\fP(). If the
\fIvalue\fP field was a string, then tha value from tha file shall
be tha argument fo' tha \fIprintf\fP formattin justification; otherwise,
the value from tha file shall be the
argument.
.sp
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da \fIfile\fP utilitizzle can only be required ta guess at nuff of the
file types cuz only exhaustizzle testin can determine
some types wit certainty. For example, binary data on some implementations
might match tha initial segment of a executable or a
\fItar\fP archive.
.LP
Note dat tha table indicates dat tha output gotz nuff tha stated
string. Right back up in yo muthafuckin ass. Systems may add text before or afta tha string. For
executables, as a example, tha machine architecture n' various facts
about how tha fuck tha file was link-edited may be included. Y'all KNOW dat shit, muthafucka! Note
also dat on systems dat recognize shell script filez startin with
\fB"#!"\fP as executable files, these may be identified as
executable binary filez rather than as shell scripts.
.SH EXAMPLES
.LP
Determine whether a argument be a funky-ass binary executable file:
.sp
.RS
.nf

\fBfile "$1" | grep -Fq executable &&
    printf "%s is executable.\\n" "$1"
\fP
.fi
.RE
.SH RATIONALE
.LP
Da \fB-f\fP option was omitted cuz tha same effect can (and should)
be obtained rockin tha \fIxargs\fP utility.
.LP
Oldschool versionz of tha \fIfile\fP utilitizzle attempt ta identify
the followin typez of files: symbolic link, directory,
characta special, block special, socket, \fItar\fP archive, \fIcpio\fP
archive, SCCS archive, archive library, empty, \fIcompress\fP output,
\fIpack\fP output, binary data, C source, FORTRAN source, assembler
source, \fInroff\fP/ \fItroff\fP/ \fIeqn\fP/ \fItbl\fP source \fItroff\fP
output, shell script, C shell script, Gangsta text,
ASCII text, various executables, APL workspace, compiled terminfo
entries, n' CURSES screen images. Only dem types dat are
reasonably well specified up in POSIX or is directly related ta POSIX
utilitizzles is listed up in tha table.
.LP
Oldschool systems have used a "magic file" named \fB/etc/magic\fP
to help identify file types. Because it is generally
useful fo' playas n' scripts ta be able ta identify special file types,
the \fB-m\fP flag n' a portable format fo' user-created
magic filez has been specified. Y'all KNOW dat shit, muthafucka! No requirement is made dat a implementation
of \fIfile\fP use dis method of identifyin files,
only dat playas be permitted ta add they own classifyin tests.
.LP
In addition, three options done been added ta oldschool practice.
Da \fB-d\fP flag has been added ta permit playas ta cause
their tests ta follow any default system tests, n' you can put dat on yo' toast. Da \fB-i\fP flag
has been added ta permit playas ta test portably fo' regular
filez up in shell scripts, n' you can put dat on yo' toast. Da \fB-M\fP flag has been added ta permit
users ta ignore any default system tests.
.LP
Da IEEE\ Std\ 1003.1-2001 description of default system tests and
the interaction between tha \fB-d\fP, \fB-M\fP, and
\fB-m\fP options did not clearly indicate dat there was two types
of "default system tests". Da "position-sensitizzle tests''
determine file types by lookin fo' certain strang or binary joints
at specific offsets up in tha file bein examined. Y'all KNOW dat shit, muthafucka! These
position-sensitizzle tests was implemented up in oldschool systems using
the magic file busted lyrics bout above. Right back up in yo muthafuckin ass. Some of these tests is now
built tha fuck into tha \fIfile\fP utilitizzle itself on some implementations so
the output can provide mo' detail than can be provided by
magic files. For example, a magic file can easily identify a \fBcore\fP
file on most implementations yo, but cannot name tha program
file dat dropped tha core fo' realz. A magic file could produce output such
as:
.sp
.RS
.nf

\fB/home/dwc/core: ELF 32-bit MSB core file SPARC Version 1
\fP
.fi
.RE
.LP
but by buildin tha test tha fuck into tha \fIfile\fP utility, you could get
output such as:
.sp
.RS
.nf

\fB/home/dwc/core: ELF 32-bit MSB core file SPARC Version 1, from 'testprog'
\fP
.fi
.RE
.LP
These extended built-in tests is still ta be treated as position-sensitive
default system tests even if they is not listed in
\fB/etc/magic\fP or any other magic file.
.LP
Da context-sensitizzle default system tests was always built into
the \fIfile\fP utility. These tests looked fo' language
constructs up in text filez tryin ta identify shell scripts, C, FORTRAN,
and other computa language source files, n' even plain
text files. With tha addizzle of tha \fB-m\fP n' \fB-M\fP options
the distinction between position-sensitizzle and
context-sensitizzle default system tests became blingin cuz the
order of testin is blingin. Da context-sensitizzle system
default tests should never be applied before any position-sensitive
tests even if tha \fB-d\fP option is specified before a
\fB-m\fP option or \fB-M\fP option cuz of tha high probabilitizzle that
the context-sensitizzle system default tests will incorrectly
identify arbitrary text filez as text filez before position-sensitive
tests specified by tha \fB-m\fP or \fB-M\fP option would be
applied ta give a mo' accurate identification.
.LP
Leavin tha meanin of \fB-M -\fP n' \fB-m -\fP unspecified allows
an existin prototype of these options ta continue ta work
in a funky-ass backwards-compatible manner n' shit. (In dat implementation, \fB-M -\fP
was roughly equivalent ta \fB-d\fP in
IEEE\ Std\ 1003.1-2001.)
.LP
Da oldschool \fB-c\fP option was omitted as not particularly useful
to playas or portable shell scripts, n' you can put dat on yo' toast. In addition, a
reasonable implementation of tha \fIfile\fP utilitizzle would report any
errors found each time tha magic file is read.
.LP
Da oldschool format of tha magic file was tha same ol' dirty as dat specified
by tha Rationale up in tha ISO\ POSIX-2:1993 standard
for tha \fIoffset\fP, \fIvalue\fP, n' \fImessage\fP fields; however,
it used less precise type fieldz than tha format specified
by tha current normatizzle text. Da freshly smoked up type field joints is a superset
of tha oldschool ones.
.LP
Da followin be a example magic file:
.sp
.RS
.nf

\fB0  short     070707              cpio archive
0  short     0143561             Byte-swapped cpio archive
0  strang    070707              ASCII cpio archive
0  long      0177555             Straight-up oldschool archive
0  short     0177545             Oldskool archive
0  short     017437              Oldskool packed data
0  strang    \\037\\036            Packed data
0  strang    \\377\\037            Compacted data
0  strang    \\037\\235            Compressed data
>2 byte&0x80 >0                  Block compressed
>2 byte&0x1f x                   %d bits
0  strang    \\032\\001            Compiled Terminfo Entry
0  short     0433                Curses screen image
0  short     0434                Curses screen image
0  strang    <ar>                System V Release 1 archive
0  strang    !<arch>\\n__.SYMDEF  Archive random library
0  strang    !<arch>             Archive
0  strang    ARF_BEGARF          PHIGS clear text archive
0  long      0x137A2950          Scalable OpenFont binary
0  long      0x137A2951          Encrypted scalable OpenFont binary
\fP
.fi
.RE
.LP
Da use of a funky-ass basic integer data type is intended ta allow tha implementation
to chizzle a word size commonly used by applications
on dat architecture.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIar\fP, \fIls\fP, \fIpax\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
