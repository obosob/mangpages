.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MORE" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mo' 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
more \- display filez on a page-by-page basis
.SH SYNOPSIS
.LP
\fBmore\fP \fB[\fP\fB-ceisu\fP\fB][\fP\fB-n\fP \fInumber\fP\fB][\fP\fB-p\fP
\fIcommand\fP\fB][\fP\fB-t\fP \fItagstring\fP\fB][\fP\fIfile\fP \fB...\fP\fB]\fP\fB\fP
.SH DESCRIPTION
.LP
Da \fImore\fP utilitizzle shall read filez n' either write dem ta the
terminal on a page-by-page basis or filta dem to
standard output. If standard output aint a terminal device, all
input filez shall be copied ta standard output up in they entirety,
without modification, except as specified fo' tha \fB-s\fP option.
If standard output be a terminal device, tha filez shall be
written a fuckin shitload of lines (one screenful) at a time under tha control
of user commands. Right back up in yo muthafuckin ass. See tha EXTENDED DESCRIPTION section.
.LP
Certain block-mode terminals aint gots all tha capabilitizzles necessary
to support tha complete \fImore\fP definition; they are
incapable of acceptin commandz dat is not terminated wit a <newline>.
Implementations dat support such terminals shall
provide a operatin mode ta \fImore\fP up in which all commandz can
be terminated wit a <newline> on dem terminals. This
mode:
.IP " *" 3
Shall be documented up in tha system documentation
.LP
.IP " *" 3
Shall, at invocation, inform tha user of tha terminal deficiency that
requires tha <newline> usage n' provide
instructions on how tha fuck dis warnin can be suppressed up in future invocations
.LP
.IP " *" 3
Shall not be required fo' implementations supportin only straight-up capable
terminals
.LP
.IP " *" 3
Shall not affect commandz already requirin <newline>s
.LP
.IP " *" 3
Shall not affect playas on tha capable terminals from rockin \fImore\fP
as busted lyrics bout up in dis volume of
IEEE\ Std\ 1003.1-2001
.LP
.SH OPTIONS
.LP
Da \fImore\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-c\fP
If a screen is ta be freestyled dat has no lines up in common wit the
current screen, or \fImore\fP is freestylin its first screen,
\fImore\fP shall not scroll tha screen yo, but instead shall redraw each
line of tha screen up in turn, from tha top of tha screen to
the bottom. In addition, if \fImore\fP is freestylin its first screen,
the screen shall be cleared. Y'all KNOW dat shit, muthafucka! This option may be silently
ignored on devices wit insufficient terminal capabilities.
.TP 7
\fB-e\fP
By default, \fImore\fP shall exit immediately afta freestylin tha last
line of tha last file up in tha argument list. If the
\fB-e\fP option is specified: 
.RS
.IP " 1." 4
If there is only a single file up in tha argument list n' dat file
was straight-up displayed on a single screen, \fImore\fP shall
exit immediately afta freestylin tha last line of dat file.
.LP
.IP " 2." 4
Otherwise, \fImore\fP shall exit only afta reachin end-of-file on
the last file up in tha argument list twice without an
intervenin operation. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See tha EXTENDED DESCRIPTION section.
.LP
.RE
.TP 7
\fB-i\fP
Perform pattern matchin up in searches without regard ta case; peep the
Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Section 9.2, Regular Expression General Requirements.
.TP 7
\fB-n\ \fP \fInumber\fP
Specify tha number of lines per screenful naaahhmean, biatch? Da \fInumber\fP argument
is a positizzle decimal integer n' shit. Da \fB-n\fP option shall
override any joints obtained from any other source.
.TP 7
\fB-p\ \fP \fIcommand\fP
Each time a screen from a freshly smoked up file is displayed or redisplayed (including
as a result of \fImore\fP commands; fo' example,
\fB:p\fP), execute tha \fImore\fP command(s) up in tha command arguments
in tha order specified, as if entered by tha user afta the
first screen has been displayed. Y'all KNOW dat shit, muthafucka! No intermediate thangs up in dis biatch shall be
displayed (that is, if tha command be a movement ta a screen
different from tha aiiight first screen, only tha screen resulting
from tha command shall be displayed.) If any of tha commandz fail
for any reason, a shiznital message ta dis effect shall be written,
and no further commandz specified rockin tha \fB-p\fP
option shall be executed fo' dis file.
.TP 7
\fB-s\fP
Behave as if consecutizzle empty lines was a single empty line.
.TP 7
\fB-t\ \fP \fItagstring\fP
Write tha screenful of tha file containin tha tag named by tha \fItagstring\fP
argument. Right back up in yo muthafuckin ass. See tha \fIctags\fP utility. Da tags feature represented
by \fB-t\fP \fItagstring\fP n' tha \fB:t\fP command is
optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Well shiiiit, it shall be provided on any system dat also serves up a
conformin implementation of \fIctags\fP; otherwise, tha use of \fB-t\fP
produces undefined thangs up in dis biatch. 
.LP
Da filename resultin from tha \fB-t\fP option shall be logically
added as a prefix ta tha list of command line files, as if
specified by tha user n' shit. If tha tag named by tha \fItagstring\fP argument
is not found, it shall be a error, n' \fImore\fP shall
take no further action.
.LP
If tha tag specifies a line number, tha straight-up original gangsta line of tha display
shall contain tha beginnin of dat line. If tha tag specifies
a pattern, tha straight-up original gangsta line of tha display shall contain tha beginning
of tha matchin text from tha straight-up original gangsta line of tha file that
gotz nuff dat pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. If tha line do not exist up in tha file or matching
text aint found, a shiznital message ta this
effect shall be displayed, n' \fImore\fP shall display tha default
screen as if \fB-t\fP had not been specified.
.LP
If both tha \fB-t\fP \fItagstring\fP n' \fB-p\fP \fIcommand\fP options
are given, tha \fB-t\fP \fItagstring\fP shall be
processed first; dat is, tha file n' startin line fo' tha display
shall be as specified by \fB-t\fP, n' then tha \fB-p\fP
\fImore\fP command shall be executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha line (matchin text)
specified by tha \fB-t\fP command do not exist (is not
found), no \fB-p\fP \fImore\fP command shall be executed fo' this
file at any time.
.TP 7
\fB-u\fP
Treat a <backspace> as a printable control character, displayed as
an implementation-defined characta sequence (see the
EXTENDED DESCRIPTION section), suppressin backspacin n' tha special
handlin dat produces underlined or standout mode text on
some terminal types fo' realz. Also, do not ignore a <carriage-return> at the
end of a line.
.sp
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIfile\fP
A pathname of a input file. If no \fIfile\fP operandz is specified,
the standard input shall be used. Y'all KNOW dat shit, muthafucka! If a \fIfile\fP is
\fB'-'\fP, tha standard input shall be read at dat point up in the
sequence.
.sp
.SH STDIN
.LP
Da standard input shall be used only if no \fIfile\fP operandz are
specified, or if a \fIfile\fP operand is \fB'-'\fP
\&.
.SH INPUT FILES
.LP
Da input filez bein examined shall be text files. If standard output
is a terminal, standard error shall be used ta read
commandz from tha user n' shit. If standard output be a terminal, standard
error aint readable, n' command input is needed, \fImore\fP
may attempt ta obtain user commandz from tha controllin terminal
(for example, \fB/dev/tty\fP); otherwise, \fImore\fP shall
terminizzle wit a error indicatin dat dat shiznit was unable ta read user
commands. If standard output aint a terminal, no error shall
result if standard error cannot be opened fo' reading.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fImore\fP:
.TP 7
\fICOLUMNS\fP
Override tha system-selected horizontal display line size. Right back up in yo muthafuckin ass. See the
Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Chapta 8, Environment Variablez fo' valid joints n' thangs up in dis biatch when
it is unset or
null.
.TP 7
\fIEDITOR\fP
Used by tha \fBv\fP command ta select a editor. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. See tha EXTENDED
DESCRIPTION section.
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements within regular
expressions.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files) and
the behavior of characta classes within regular
expressions.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard error and
informatizzle lyrics freestyled ta standard output.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fILINES\fP
Override tha system-selected vertical screen size, used as tha number
of lines up in a screenful naaahhmean, biatch? See tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Chapta 8, Environment Variablez fo' valid
values and
results when it is unset or null. Da \fB-n\fP option shall take precedence
over tha \fILINES\fP variable fo' determinin the
number of lines up in a screenful.
.TP 7
\fIMORE\fP
Determine a strang containin options busted lyrics bout up in tha OPTIONS section
preceded wit hyphens n' <blank>-separated as on
the command line fo' realz. Any command line options shall be processed after
those up in tha \fIMORE\fP variable, as if tha command line were:
.sp
.RS
.nf

\fBmore $MORE\fP \fIoptions operands\fP
.fi
.RE
.LP
Da \fIMORE\fP variable shall take precedence over tha \fITERM\fP
and \fILINES\fP variablez fo' determinin tha number of
lines up in a screenful.
.TP 7
\fITERM\fP
Determine tha name of tha terminal type. If dis variable is unset
or null, a unspecified default terminal type is used.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Da standard output shall be used ta write tha contentz of tha input
files.
.SH STDERR
.LP
Da standard error shall be used fo' diagnostic lyrics n' user
commandz (see tha INPUT FILES section), and, if standard
output be a terminal device, ta write a promptin string. Da prompting
strin shall step tha fuck up on tha screen line below tha last line
of tha file displayed up in tha current screenful naaahhmean, biatch? Da prompt shall contain
the name of tha file currently bein examined n' shall
contain a end-of-file indication n' tha name of tha next file, if
any, when promptin all up in tha end-of-file. If a error or
informationizzle message is displayed, it is unspecified whether it is
contained up in tha prompt. If it aint contained up in tha prompt,
it shall be displayed n' then tha user shall be prompted fo' a cold-ass lil continuation
character, at which point another message or tha user
prompt may be displayed. Y'all KNOW dat shit, muthafucka! Da prompt is otherwise unspecified. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is
unspecified whether shiznital lyrics is freestyled for
other user commands.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
Da followin section raps bout tha behavior of \fImore\fP when the
standard output be a terminal device. If tha standard
output aint a terminal device, no options other than \fB-s\fP shall
have any effect, n' all input filez shall be copied to
standard output otherwise unmodified, at which time \fImore\fP shall
exit without further action.
.LP
Da number of lines available per screen shall be determined by the
\fB-n\fP option, if present, or by examinin joints up in the
environment (see tha ENVIRONMENT VARIABLES section). If neither method
yieldz a number, a unspecified number of lines shall be
used.
.LP
Da maximum number of lines freestyled shall be one less than dis number,
because tha screen line afta tha last line written
shall be used ta write a user prompt n' user input. If tha number
of lines up in tha screen is less than two, tha thangs up in dis biatch are
undefined. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is unspecified whether user input is permitted ta be
longer than tha remainder of tha single line where tha prompt
has been written.
.LP
Da number of columns available per line shall be determined by examining
values up in tha environment (see tha ENVIRONMENT
VARIABLES section), wit a thugged-out default value as busted lyrics bout up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 8, Environment
Variables.
.LP
Lines dat is longer than tha display shall be folded; tha length
at which foldin occurs is unspecified yo, but should be
appropriate fo' tha output device. Foldin may occur between glyphs
of single charactas dat take up multiple display columns.
.LP
When standard output be a terminal n' \fB-u\fP aint specified,
\fImore\fP shall treat <backspace>s and
<carriage-return>s specially:
.IP " *" 3
A character, followed first by a sequence of \fIn\fP <backspace>s
(where \fIn\fP is tha same ol' dirty as tha number of column
positions dat tha characta occupies), then by \fIn\fP underscore
charactas ( \fB'_'\fP ), shall cause dat characta ta be
written as underlined text, if tha terminal type supports dis shit. The
\fIn\fP underscore characters, followed first by \fIn\fP
<backspace>s, then any characta wit \fIn\fP column positions, shall
also cause dat characta ta be freestyled as underlined
text, if tha terminal type supports dis shit.
.LP
.IP " *" 3
A sequence of \fIn\fP <backspace>s (where \fIn\fP is tha same ol' dirty as the
number of column positions dat tha previous
characta occupies) dat appears between two identical printable characters
shall cause tha straight-up original gangsta of dem two charactas ta be
written as emboldened text (that is, visually brighter, standout mode,
or inverse-video mode), if tha terminal type supports that,
and tha second ta be discarded. Y'all KNOW dat shit, muthafucka! Immediately subsequent occurrences
of <backspace>/ characta pairs fo' dat same character
shall also be discarded. Y'all KNOW dat shit, muthafucka! (For example, tha sequence \fB"a\\ba\\ba\\ba"\fP
is interpreted as a single emboldened \fB'a'\fP .)
.LP
.IP " *" 3
Da \fImore\fP utilitizzle shall logically discard all other <backspace>s
from tha line as well as tha characta which
precedes them, if any.
.LP
.IP " *" 3
A <carriage-return> all up in tha end of a line shall be ignored, rather
than bein freestyled as a non-printable character, as
busted lyrics bout up in tha next paragraph.
.LP
.LP
It be implementation-defined how tha fuck other non-printable charactas are
written. I aint talkin' bout chicken n' gravy biatch. Implementations should use tha same format that
they use fo' tha \fIex\fP \fBprint\fP command; peep tha OPTIONS section
within tha \fIed\fP utility. Well shiiiit, it is unspecified whether a multi-column
characta shall be separated if it crosses a
display line boundary; it shall not be discarded. Y'all KNOW dat shit, muthafucka! Da behavior is
unspecified if tha number of columns on tha display is less than
the number of columns any single characta up in tha line bein displayed
would occupy.
.LP
When each freshly smoked up file is displayed (or redisplayed), \fImore\fP shall
write tha straight-up original gangsta screen of tha file. Once tha initial screen
has been written, \fImore\fP shall prompt fo' a user command. Y'all KNOW dat shit, muthafucka! If the
execution of tha user command thangs up in dis biatch up in a screen dat has
lines up in common wit tha current screen, n' tha thang has sufficient
terminal capabilities, \fImore\fP shall scroll tha screen;
otherwise, it is unspecified whether tha screen is scrolled or redrawn.
.LP
For all filez but tha last (includin standard input if no file was
specified, n' fo' tha last file as well, if tha \fB-e\fP
option was not specified), when \fImore\fP has freestyled tha last line
in tha file, \fImore\fP shall prompt fo' a user command.
This prompt shall contain tha name of tha next file as well as an
indication dat \fImore\fP has reached end-of-file. If tha user
command is \fBf\fP, <control>-F, <space>, \fBj\fP, <newline>, \fBd\fP,
<control>-D, or \fBs\fP,
\fImore\fP shall display tha next file. Otherwise, if displayin the
last file, \fImore\fP shall exit. Otherwise, \fImore\fP
shall execute tha user command specified.
.LP
Several of tha commandz busted lyrics bout up in dis section display a previous
screen from tha input stream. In tha case dat text is
bein taken from a non-rewindable stream, like fuckin a pipe, it is implementation-defined
how much backwardz motion is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If a
command cannot be executed cuz of a limitation on backwardz motion,
an error message ta dis effect shall be displayed, the
current screen shall not chizzle, n' tha user shall be prompted for
another command.
.LP
If a cold-ass lil command cannot be performed cuz there be insufficient lines
to display, \fImore\fP shall alert tha terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If a
command cannot be performed cuz there be insufficient lines to
display or a \fB/\fP command fails: if tha input is the
standard input, tha last screen up in tha file may be displayed; otherwise,
the current file n' screen shall not chizzle, n' tha user
shall be prompted fo' another command.
.LP
Da interactizzle commandz up in tha followin sections shall be supported.
Some commandz can be preceded by a thugged-out decimal integer,
called \fIcount\fP up in tha followin descriptions. If not specified
with tha command, \fIcount\fP shall default ta 1. In the
followin descriptions, \fIpattern\fP be a funky-ass basic regular expression,
as busted lyrics bout up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 9.3, Basic Regular Expressions. The
term "examine" is oldschool usage meanin "open tha file fo' viewing'';
for example, \fImore\fP \fBfoo\fP would be expressed
as examinin file \fBfoo\fP.
.LP
In tha followin descriptions, unless otherwise specified, \fIline\fP
is a line up in tha \fImore\fP display, not a line from the
file bein examined.
.LP
In tha followin descriptions, tha \fIcurrent position\fP refers to
two thangs:
.IP " 1." 4
Da posizzle of tha current line on tha screen
.LP
.IP " 2." 4
Da line number (in tha file) of tha current line on tha screen
.LP
.LP
Usually, tha line on tha screen correspondin ta tha current position
is tha third line on tha screen. I aint talkin' bout chicken n' gravy biatch. If dis aint possible
(there is fewer than three lines ta display or dis is tha first
page of tha file, or it is tha last page of tha file), then the
current posizzle is either tha straight-up original gangsta or last line on tha screen as
busted lyrics bout later.
.SS Help
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBh
\fP
.fi
.RE
.sp
.LP
Write a summary of these commandz n' other implementation-defined
commands. Da behavior shall be as if tha \fImore\fP utility
were executed wit tha \fB-e\fP option on a gangbangin' file dat contained the
summary shiznit. I aint talkin' bout chicken n' gravy biatch. Da user shall be prompted as busted lyrics about
earlier up in dis section when end-of-file is reached. Y'all KNOW dat shit, muthafucka! If tha user command
is one of dem specified ta continue ta tha next file,
\fImore\fP shall return ta tha file n' screen state from which the
\fBh\fP command was executed.
.SS Scroll Forward One Screenful
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBf
\fP\fB[\fP\fIcount\fP\fB]\fP\fB<control>-F
\fP
.fi
.RE
.sp
.LP
Scroll forward \fIcount\fP lines, wit a thugged-out default of one screenful.
If \fIcount\fP is mo' than tha screen size, only tha final
screenful shall be written.
.SS Scroll Backward One Screenful
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBb
\fP\fB[\fP\fIcount\fP\fB]\fP\fB<control>-B
\fP
.fi
.RE
.sp
.LP
Scroll backward \fIcount\fP lines, wit a thugged-out default of one screenful
(see tha \fB-n\fP option). If \fIcount\fP is mo' than the
screen size, only tha final screenful shall be written.
.SS Scroll Forward One Line
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fB<space>
\fP\fB[\fP\fIcount\fP\fB]\fP\fBj
\fP\fB[\fP\fIcount\fP\fB]\fP\fB<newline>
\fP
.fi
.RE
.sp
.LP
Scroll forward \fIcount\fP lines. Da default \fIcount\fP fo' the
<space> shall be one screenful; fo' \fBj\fP and
<newline>, one line. Da entire \fIcount\fP lines shall be written,
even if \fIcount\fP is mo' than tha screen size.
.SS Scroll Backward One Line
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBk
\fP
.fi
.RE
.sp
.LP
Scroll backward \fIcount\fP lines. Da entire \fIcount\fP lines shall
be written, even if \fIcount\fP is mo' than tha screen
size.
.SS Scroll Forward One Half Screenful
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBd
\fP\fB[\fP\fIcount\fP\fB]\fP\fB<control>-D
\fP
.fi
.RE
.sp
.LP
Scroll forward \fIcount\fP lines, wit a thugged-out default of one half of the
screen size. If \fIcount\fP is specified, it shall become
the freshly smoked up default fo' subsequent \fBd\fP, <control>-D, n' \fBu\fP commands.
.SS Skip Forward One Line
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBs
\fP
.fi
.RE
.sp
.LP
Display tha screenful beginnin wit tha line \fIcount\fP lines after
the last line on tha current screen. I aint talkin' bout chicken n' gravy biatch. If \fIcount\fP
would cause tha current posizzle ta be such dat less than one screenful
would be written, tha last screenful up in tha file shall be
written.
.SS Scroll Backward One Half Screenful
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBu
\fP\fB[\fP\fIcount\fP\fB]\fP\fB<control>-U
\fP
.fi
.RE
.sp
.LP
Scroll backward \fIcount\fP lines, wit a thugged-out default of one half of the
screen size. If \fIcount\fP is specified, it shall become
the freshly smoked up default fo' subsequent \fBd\fP, <control>-D, \fBu\fP, and
<control>-U commands. Da entire \fIcount\fP lines
shall be written, even if \fIcount\fP is mo' than tha screen size.
.SS Go ta Beginnin of File
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBg
\fP
.fi
.RE
.sp
.LP
Display tha screenful beginnin wit line \fIcount\fP.
.SS Go ta End-of-File
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBG
\fP
.fi
.RE
.sp
.LP
If \fIcount\fP is specified, display tha screenful beginnin with
the line \fIcount\fP. Otherwise, display tha last screenful
of tha file.
.SS Refresh tha Screen
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBr
<control>-L
\fP
.fi
.RE
.sp
.LP
Refresh tha screen.
.SS Discard n' Refresh
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBR
\fP
.fi
.RE
.sp
.LP
Refresh tha screen, discardin any buffered input. If tha current
file is non-seekable, buffered input shall not be discarded
and tha \fBR\fP command shall be equivalent ta tha \fBr\fP command.
.SS Mark Position
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBm\fP\fIletter\fP
.fi
.RE
.sp
.LP
Mark tha current posizzle wit tha letta named by \fIletter\fP, where
\fIletter\fP represents tha name of one of the
lowercase lettaz of tha portable characta set. When a freshly smoked up file is
examined, all marks may be lost.
.SS Return ta Mark
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB'\fP\fIletter\fP
.fi
.RE
.sp
.LP
Return ta tha posizzle dat was previously marked wit tha letter
named by \fIletter\fP, makin dat line tha current
position.
.SS Return ta Previous Position
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB''
\fP
.fi
.RE
.sp
.LP
Return ta tha posizzle from which tha last big-ass movement command
was executed (where a "pimpin' movement" is defined as any
movement of mo' than a screenful of lines). If no such movements
have been made, return ta tha beginnin of tha file.
.SS Search Forward fo' Pattern
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fB/\fP\fB[\fP\fB!\fP\fB]\fP\fIpattern\fP\fB<newline>
\fP
.fi
.RE
.sp
.LP
Display tha screenful beginnin wit tha \fIcount\fPth line containing
the pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da search shall start afta tha straight-up original gangsta line
currently displayed. Y'all KNOW dat shit, muthafucka! Da null regular expression ( \fB'/'\fP followed
by a <newline>) shall repeat tha search rockin the
previous regular expression, wit a thugged-out default \fIcount\fP. If tha character
\fB'!'\fP is included, tha matchin lines shall be
those dat do not contain tha \fIpattern\fP. If no match is found
for tha \fIpattern\fP, a message ta dat effect shall be
displayed.
.SS Search Backward fo' Pattern
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fB?\fP\fB[\fP\fB!\fP\fB]\fP\fIpattern\fP\fB<newline>
\fP
.fi
.RE
.sp
.LP
Display tha screenful beginnin wit tha \fIcount\fPth previous line
containin tha pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da search shall start on tha last
line before tha straight-up original gangsta line currently displayed. Y'all KNOW dat shit, muthafucka! Da null regular expression
( \fB'?'\fP followed by a <newline>) shall
repeat tha search rockin tha previous regular expression, wit a thugged-out default
\fIcount\fP. If tha characta \fB'!'\fP is included,
matchin lines shall be dem dat do not contain tha \fIpattern\fP.
If no match is found fo' tha \fIpattern\fP, a message to
that effect shall be displayed.
.SS Repeat Search
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBn
\fP
.fi
.RE
.sp
.LP
Repeat tha previous search fo' \fIcount\fPth line containin tha last
\fIpattern\fP (or not containin tha last
\fIpattern\fP, if tha previous search was \fB"/!"\fP or \fB"?!"\fP
).
.SS Repeat Search up in Reverse
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fBN
\fP
.fi
.RE
.sp
.LP
Repeat tha search up in tha opposite direction of tha previous search
for tha \fIcount\fPth line containin tha last
\fIpattern\fP (or not containin tha last \fIpattern\fP, if tha previous
search was \fB"/!"\fP or \fB"?!"\fP ).
.SS Examine New File
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB:e\fP \fB[\fP\fIfilename\fP\fB]\fP\fB<newline>
\fP
.fi
.RE
.sp
.LP
Examine a freshly smoked up file. If tha \fIfilename\fP argument aint specified,
the current file (see tha \fB:n\fP n' \fB:p\fP commands
below) shall be re-examined. Y'all KNOW dat shit, muthafucka! Da \fIfilename\fP shall be subjected
to tha process of shell word expansions (see \fIWord Expansions\fP
); if mo' than a single pathname thangs up in dis biatch, tha effects is unspecified.
If
\fIfilename\fP be a number sign ( \fB'#'\fP ), tha previously examined
file shall be re-examined. Y'all KNOW dat shit, muthafucka! If \fIfilename\fP is not
accessible fo' any reason (includin dat it aint nuthin but a non-seekable file),
an error message ta dis effect shall be displayed n' the
current file n' screen shall not chizzle.
.SS Examine Next File
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fB:n
\fP
.fi
.RE
.sp
.LP
Examine tha next file. If a number \fIcount\fP is specified, tha \fIcount\fPth
next file shall be examined. Y'all KNOW dat shit, muthafucka! If \fIfilename\fP
refers ta a non-seekable file, tha thangs up in dis biatch is unspecified.
.SS Examine Previous File
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fIcount\fP\fB]\fP\fB:p
\fP
.fi
.RE
.sp
.LP
Examine tha previous file. If a number \fIcount\fP is specified, the
\fIcount\fPth previous file shall be examined. Y'all KNOW dat shit, muthafucka! If
\fIfilename\fP refers ta a non-seekable file, tha thangs up in dis biatch is unspecified.
.SS Go ta Tag
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB:t\fP \fItagstring\fP\fB<newline>
\fP
.fi
.RE
.sp
.LP
If tha file containin tha tag named by tha \fItagstring\fP argument
is not tha current file, examine tha file, as if the
\fB:e\fP command was executed wit dat file as tha argument. Otherwise,
or up in addition, display tha screenful beginnin wit the
tag, as busted lyrics bout fo' tha \fB-t\fP option (see tha OPTIONS section).
If tha \fIctags\fP
utilitizzle aint supported by tha system, tha use of \fB:t\fP produces
undefined thangs up in dis biatch.
.SS Invoke Editor
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBv
\fP
.fi
.RE
.sp
.LP
Invoke a editor ta edit tha current file bein examined. Y'all KNOW dat shit, muthafucka! If standard
input is bein examined, tha thangs up in dis biatch is unspecified. Y'all KNOW dat shit, muthafucka! The
name of tha editor shall be taken from tha environment variable \fIEDITOR
,\fP or shall default ta \fIvi\fP. If tha last pathname component
in \fIEDITOR\fP is either \fIvi\fP or \fIex\fP, tha editor shall be
invoked wit a \fB-c\fP
\fIlinenumber\fP command line argument, where \fIlinenumber\fP is
the line number of tha file line containin tha display line
currently displayed as tha straight-up original gangsta line of tha screen. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is implementation-defined
whether line-settin options is passed to
editors other than \fIvi\fP n' \fIex\fP.
.LP
When tha editor exits, \fImore\fP shall resume wit tha same file
and screen as when tha editor was invoked.
.SS Display Position
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB=
<control>-G
\fP
.fi
.RE
.sp
.LP
Write a message fo' which tha shiznit references tha straight-up original gangsta byte
of tha line afta tha last line of tha file on tha screen.
This message shall include tha name of tha file currently bein examined,
its number relatizzle ta tha total number of filez there
are ta examine, tha line number up in tha file, tha byte number n' the
total bytes up in tha file, n' what tha fuck cementage of tha file
precedes tha current position. I aint talkin' bout chicken n' gravy biatch. If \fImore\fP is readin from standard
input, or tha file is shorta than a single screen, tha line
number, tha byte number, tha total bytes, n' tha cementage need
not be written.
.SS Quit
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBq
:q
ZZ
\fP
.fi
.RE
.sp
.LP
Exit \fImore\fP.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
If a error is encountered accessin a gangbangin' file when rockin tha \fB:n\fP
command, \fImore\fP shall attempt ta examine tha next file
in tha argument list yo, but tha final exit status shall be affected.
If a error is encountered accessin a gangbangin' file via tha \fB:p\fP
command, \fImore\fP shall attempt ta examine tha previous file in
the argument list yo, but tha final exit status shall be affected.
If a error is encountered accessin a gangbangin' file via tha \fB:e\fP command,
\fImore\fP shall remain up in tha current file n' tha final
exit status shall not be affected.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
When tha standard output aint a terminal, only tha \fB-s\fP filter-modification
option is effective. This is based on
historical practice. For example, a typical implementation of \fIman\fP
pipes its output
all up in \fImore\fP \fB-s\fP ta squeeze excess white space fo' terminal
users. When \fIman\fP
is piped ta \fIlp\fP, however, it is undesirable fo' dis squeezing
to happen.
.SH EXAMPLES
.LP
Da \fB-p\fP allows arbitrary commandz ta be executed all up in tha start
of each file. Examplez are:
.TP 7
\fImore\ \fP \fB-p\ G\ \fP \fIfile1\ file2\fP
.sp
Examine each file startin wit its last screenful.
.TP 7
\fImore\ \fP \fB-p\ \fP 100\ \fIfile1\ file2\fP
.sp
Examine each file startin wit line 100 up in tha current posizzle (usually
the third line, so line 98 would be tha straight-up original gangsta line
written).
.TP 7
\fImore\ \fP \fB-p\ \fP /100\ \fIfile1\ file2\fP
.sp
Examine each file startin wit tha straight-up original gangsta line containin tha string
\fB"100"\fP up in tha current position
.sp
.SH RATIONALE
.LP
Da \fImore\fP utility, available up in BSD n' BSD-derived systems,
was chosen as tha prototype fo' tha POSIX file display
program since it is mo' widely available than either tha public-domain
program \fIless\fP or than \fIpg\fP, a pager provided in
System V. Da 4.4 BSD \fImore\fP is tha model fo' tha features selected;
it be almost straight-up upwards-compatible from tha 4.3 BSD
version up in wide use n' has become mo' amenable fo' \fIvi\fP users.
Several features
originally derived from various file editors, found up in both \fIless\fP
and \fIpg\fP, done been added ta dis volume of
IEEE\ Std\ 1003.1-2001 as they have proved mad ghettofab with
users.
.LP
There is inconsistencies between \fImore\fP n' \fIvi\fP dat result
from historical
practice. For example, tha single-characta commandz \fBh\fP, \fBf\fP,
\fBb\fP, n' <space> is screen movers in
\fImore\fP yo, but cursor movers up in \fIvi\fP. These inconsistencies were
maintained cuz the
cursor movements is not applicable ta \fImore\fP n' tha powerful
functionalitizzle  bigged up  without tha use of tha control key
justifies tha differences.
.LP
Da tags intercourse has been included up in a program dat aint a text
editor cuz it promotes another degree of consistent
operation wit \fIvi\fP. Well shiiiit, it is conceivable dat tha pagin environment
of \fImore\fP would be
superior fo' browsin source code filez up in some circumstances.
.LP
Da operatin mode referred ta fo' block-mode terminals effectively
addz a <newline> ta each Synopsis line dat currently
has none. Right back up in yo muthafuckin ass. So, fo' example, \fBd\fP <newline> would page one screenful.
Da mode could be triggered by a cold-ass lil command line option,
environment variable, or some other method. Y'all KNOW dat shit, muthafucka! Da details is not imposed
by dis volume of IEEE\ Std\ 1003.1-2001 cuz
there is so few systems known ta support such terminals. Nevertheless,
it was considered dat all systems should be able to
support \fImore\fP given tha exception cited fo' dis lil' small-ass hood
of terminals cuz, up in comparison ta \fIvi\fP, tha cursor movements
are few n' tha command set relatively amenable ta tha optional
<newline>s.
.LP
Some versionz of \fImore\fP provide a gangbangin' finger-lickin' dirty-ass shell escapin mechanizzle similar
to tha \fIex\fP
\fB!\fP command. Y'all KNOW dat shit, muthafucka! Da standard pimpers did not consider dat this
was necessary up in a paginator, particularly given tha wide
acceptizzle of multiple window terminals n' thang control features.
(They chose ta retain such features up in tha editors n' \fImailx\fP
because tha shell interaction also gives a opportunitizzle ta modify
the editin buffer,
which aint applicable ta \fImore\fP.)
.LP
Da \fB-p\fP (position) option replaces tha \fB+\fP command cuz
of tha Utilitizzle Syntax Guidelines. In early proposals, it
took a \fIpattern\fP argument yo, but oldschool \fIless\fP provided
the \fImore\fP general facilitizzle of a cold-ass lil command. Y'all KNOW dat shit, muthafucka! Well shiiiit, it would have
been desirable ta use tha same \fB-c\fP as \fIex\fP n' \fIvi\fP,
but tha letta was already up in use.
.LP
Da text statin "from a non-rewindable stream ... implementations
may limit tha amount of backwardz motion supported" would
allow a implementation dat permitted no backwardz motion beyond
text already on tha screen. I aint talkin' bout chicken n' gravy biatch. Dat shiznit was not possible ta require a
minimum amount of backwardz motion dat would be effectizzle fo' all
conceivable thang types. Da implementation should allow the
user ta back up as far as possible, within thang n' reasonable memory
allocation constraints.
.LP
Historically, non-printable charactas was displayed rockin tha ARPA
standard mappings, which is as bigs up:
.IP " 1." 4
Printable charactas is left ridin' solo.
.LP
.IP " 2." 4
Control charactas less than \\177 is represented as followed by
the characta offset from tha \fB'@'\fP characta up in the
ASCII map; fo' example, \\007 is represented as \fB'G'\fP .
.LP
.IP " 3." 4
\\177 is represented as followed by \fB'?'\fP .
.LP
.LP
Da display of charactas havin they eighth bit set was less standard.
Existin implementations use hex (0x00), octal (\\000),
and a meta-bit display. (Da latta displayed charactas wit their
eighth bit set as tha two charactas \fB"M-"\fP, followed
by tha seven-bit display as busted lyrics bout previously.) Da latta probably
has tha dopest claim ta oldschool practice cuz it was
used wit tha \fB-v\fP option of 4 BSD n' 4 BSD-derived versions
of tha \fIcat\fP utility
since 1980.
.LP
No specific display format is required by IEEE\ Std\ 1003.1-2001.
Implementations is encouraged ta conform ta historic
practice up in tha absence of any phat reason ta diverge.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIShell Command Language\fP, \fIctags\fP, \fIed\fP, \fIex\fP,
\fIvi\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
