.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "WAIT" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" wait 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
wait \- await process completion
.SH SYNOPSIS
.LP
\fBwait\fP \fB[\fP\fIpid\fP\fB...\fP\fB]\fP
.SH DESCRIPTION
.LP
When a asynchronous list (see \fIAsynchronous Lists\fP ) is started
by the
shell, tha process ID of tha last command up in each element of tha asynchronous
list shall become known up in tha current shell
execution environment; peep \fIShell Execution Environment\fP .
.LP
If tha \fIwait\fP utilitizzle is invoked wit no operands, it shall wait
until all process IDs known ta tha invokin shell have
terminated n' exit wit a zero exit status.
.LP
If one or mo' \fIpid\fP operandz is specified dat represent known
process IDs, tha \fIwait\fP utilitizzle shall wait until all
of dem have terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If one or mo' \fIpid\fP operandz is specified
that represent unknown process IDs, \fIwait\fP shall
treat dem as if they was known process IDs dat exited wit exit
status 127. Da exit status returned by tha \fIwait\fP utility
shall be tha exit statuz of tha process axed by tha last \fIpid\fP
operand.
.LP
Da known process IDs is applicable only fo' invocationz of \fIwait\fP
in tha current shell execution environment.
.SH OPTIONS
.LP
None.
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIpid\fP
One of tha following: 
.RS
.IP " 1." 4
Da unsigned decimal integer process ID of a cold-ass lil command, fo' which the
utilitizzle is ta wait fo' tha termination.
.LP
.IP " 2." 4
A thang control thang ID (see tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Section 3.203, Thang Control Thang ID) dat identifies a funky-ass background process
group ta be
waited for. Shiiit, dis aint no joke. Da thang control thang ID notation be applicable only for
invocationz of \fIwait\fP up in tha current shell execution
environment; peep \fIShell Execution Environment\fP . Da exit status
of \fIwait\fP shall
be determined by tha last command up in tha pipeline. 
.TP 7
\fBNote:\fP
.RS
Da thang control thang ID type of \fIpid\fP is only available on systems
supportin tha User Portabilitizzle Utilitizzles option.
.RE
.sp
.LP
.RE
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIwait\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
If one or mo' operandz was specified, all of dem have terminated
or was not known by tha invokin shell, n' tha status of
the last operand specified is known, then tha exit statuz of \fIwait\fP
shall be tha exit status shiznit of tha command
indicated by tha last operand specified. Y'all KNOW dat shit, muthafucka! If tha process terminated
abnormally cuz of tha receipt of a signal, tha exit status shall
be pimped outa than 128 n' shall be distinct from tha exit status generated
by other signals yo, but tha exact value is unspecified. Y'all KNOW dat shit, muthafucka! (See
the \fIkill\fP \fB-l\fP option.) Otherwise, tha \fIwait\fP utility
shall exit wit one of
the followin joints:
.TP 7
\ \ \ \ 0
Da \fIwait\fP utilitizzle was invoked wit no operandz n' all process
IDs known by tha invokin shell have terminated.
.TP 7
1-126
Da \fIwait\fP utilitizzle detected a error.
.TP 7
\ \ 127
Da command identified by tha last \fIpid\fP operand specified is
unknown.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
On most implementations, \fIwait\fP be a gangbangin' finger-lickin' dirty-ass shell built-in. I aint talkin' bout chicken n' gravy biatch. If it is
called up in a subshell or separate utilitizzle execution
environment, like fuckin one of tha following:
.sp
.RS
.nf

\fB(wait)
nohup wait ...
find . -exec wait ... \\;
\fP
.fi
.RE
.LP
it returns immediately cuz there be no known process IDs ta wait
for up in dem environments.
.LP
Oldschool implementationz of interactizzle shells have discarded the
exit statuz of terminated background processes before each
shell prompt. Therefore, tha statuz of background processes was usually
lost unless it terminated while \fIwait\fP was waitin for
it. This could be a straight-up problem when a thang dat was sposed ta fuckin
run fo' a long-ass time straight-up terminated quickly wit a syntax
or initialization error cuz tha exit status returned was usually
zero if tha axed process ID was not found. Y'all KNOW dat shit, muthafucka! This volume of
IEEE\ Std\ 1003.1-2001 requires tha implementation ta keep tha status
of terminated thangs available until tha status is
requested, so dat scripts like:
.sp
.RS
.nf

\fBj1&
p1=$!
j2&
wait $p1
echo Thang 1 exited wit status $?
wait $!
echo Thang 2 exited wit status $?
\fP
.fi
.RE
.LP
work without losin status on any of tha thangs. Da shell be allowed
to discard tha statuz of any process if it determines that
the application cannot git tha process ID fo' dat process from the
shell. Well shiiiit, it be also required ta remember only {CHILD_MAX} number
of processes up in dis way. Right back up in yo muthafuckin ass. Since tha only way ta git tha process ID
from tha shell is by rockin tha \fB'!'\fP shell parameter, the
shell be allowed ta discard tha statuz of a asynchronous list if
\fB"$!"\fP was not referenced before another asynchronous list
was started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (This means dat tha shell only has ta keep tha status
of tha last asynchronous list started if tha application did
not reference \fB"$!"\fP . If tha implementation of tha shell is smart
enough ta determine dat a reference ta \fB"$!"\fP was
not saved anywhere dat tha application can retrieve it later, it
can use dis shiznit ta trim tha list of saved shiznit.
Note also dat a successful call ta \fIwait\fP wit no operandz discards
the exit statuz of all asynchronous lists.)
.LP
If tha exit statuz of \fIwait\fP is pimped outa than 128, there is no
way fo' tha application ta know if tha waited-for process
exited wit dat value or was capped by a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Right back up in yo muthafuckin ass. Since most utilities
exit wit lil' small-ass joints, there is seldom any ambiguity. Even
in tha ambiguous cases, most applications just need ta know dat the
asynchronous thang failed; it do not matta whether it
detected a error n' failed or was capped n' did not complete its
job normally.
.SH EXAMPLES
.LP
Although tha exact value used when a process is terminated by a signal
is unspecified, if it is known dat a signal terminated a
process, a script can still reliably determine which signal by using
\fIkill\fP as shown by
the followin script:
.sp
.RS
.nf

\fBsleep 1000&
pid=$!
kill -kill $pid
wait $pid
echo $pid was terminated by a SIG$(kill -l $?) signal.
\fP
.fi
.RE
.LP
If tha followin sequence of commandz is run up in less than 31 seconds:
.sp
.RS
.nf

\fBsleep 257 | chill 31 &
jobs -l %%
\fP
.fi
.RE
.LP
either of tha followin commandz returns tha exit statuz of tha second
\fIsleep\fP up in the
pipeline:
.sp
.RS
.nf

\fBwait\fP \fI<pid of chill 31>\fP\fBwait %%
\fP
.fi
.RE
.SH RATIONALE
.LP
Da description of \fIwait\fP do not refer ta tha \fIwaitpid\fP()
function from the
System Interfaces volume of IEEE\ Std\ 1003.1-2001 cuz dat would
needlessly overspecify dis intercourse. But fuck dat shiznit yo, tha word on tha street is dat the
wordin means dat \fIwait\fP is required ta wait fo' a explicit
process when it is given a argument so dat tha status
information of other processes aint consumed. Y'all KNOW dat shit, muthafucka! Oldschool implementations
use tha \fIwait\fP() function defined up in tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001 until
\fIwait\fP() returns tha axed process ID or findz dat tha requested
process do not
exist. Because dis means dat a gangbangin' finger-lickin' dirty-ass shell script could not reliably get
the statuz of all background lil pimps if a second background
job was eva started before tha straight-up original gangsta thang finished, it is recommended
that tha \fIwait\fP utilitizzle bust a method like fuckin the
functionalitizzle provided by tha \fIwaitpid\fP() function.
.LP
Da mobilitizzle ta wait fo' multiple \fIpid\fP operandz was adopted from
the KornShell.
.LP
This freshly smoked up functionalitizzle was added cuz it is needed ta determine
the exit statuz of any asynchronous list accurately. Da only
compatibilitizzle problem dat dis chizzle creates is fo' a script like
.sp
.RS
.nf

\fBwhile chill 60 do
    thang& echo Thang started $(date) as $!  done
\fP
.fi
.RE
.LP
which causes tha shell ta monitor all of tha thangs started until the
script terminates or runs outta memory. This would not be a
problem if tha loop did not reference \fB"$!"\fP or if tha script
would occasionally \fIwait\fP fo' thangs it started.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIShell Command Language\fP, \fIkill\fP(), \fIsh\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIwait\fP(), \fIwaitpid\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
