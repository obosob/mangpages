.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PRINTF" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" printf 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
printf \- write formatted output
.SH SYNOPSIS
.LP
\fBprintf\fP \fIformat\fP\fB[\fP\fIargument\fP\fB...\fP\fB]\fP
.SH DESCRIPTION
.LP
Da \fIprintf\fP utilitizzle shall write formatted operandz ta tha standard
output. Da \fIargument\fP operandz shall be formatted
under control of tha \fIformat\fP operand.
.SH OPTIONS
.LP
None.
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIformat\fP
A strang describin tha format ta use ta write tha remainin operands.
See tha EXTENDED DESCRIPTION section.
.TP 7
\fIargument\fP
Da strings ta be freestyled ta standard output, under tha control of
\fIformat\fP. Right back up in yo muthafuckin ass. See tha EXTENDED DESCRIPTION section.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIprintf\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fILC_NUMERIC\fP
.sp
Determine tha locale fo' numeric formatting. Well shiiiit, it shall affect tha format
of numbers freestyled rockin tha \fBe\fP, \fBE\fP,
\fBf\fP, \fBg\fP, n' \fBG\fP conversion specifier charactas (if
supported).
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
See tha EXTENDED DESCRIPTION section.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
Da \fIformat\fP operand shall be used as tha \fIformat\fP string
busted lyrics bout up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 5, File Format Notation wit tha following
exceptions:
.IP " 1." 4
A <space> up in tha format string, up in any context other than a gangbangin' flag of
a conversion justification, shall be treated as an
ordinary characta dat is copied ta tha output.
.LP
.IP " 2." 4
A \fB' '\fP characta up in tha format strang shall be treated as a \fB' '\fP
character, not as a <space>.
.LP
.IP " 3." 4
In addizzle ta tha escape sequences shown up in tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Chapta 5, File Format Notation
( \fB'\\\\'\fP, \fB'\\a'\fP, \fB'\\b'\fP, \fB'\\f'\fP,
\fB'\\n'\fP, \fB'\\r'\fP, \fB'\\t'\fP, \fB'\\v'\fP ), \fB"\\ddd"\fP,
where \fIddd\fP be a one, two, or three-digit
octal number, shall be freestyled as a funky-ass byte wit tha numeric value specified
by tha octal number.
.LP
.IP " 4." 4
Da implementation shall not precede or follow output from tha \fBd\fP
or \fBu\fP conversion specifiers with
<blank>s not specified by tha \fIformat\fP operand.
.LP
.IP " 5." 4
Da implementation shall not precede output from tha \fBo\fP conversion
specifier wit zeros not specified by the
\fIformat\fP operand.
.LP
.IP " 6." 4
Da \fBe\fP, \fBE\fP, \fBf\fP, \fBg\fP, n' \fBG\fP conversion
specifiers need not be supported.
.LP
.IP " 7." 4
An additionizzle conversion specifier character, \fBb\fP, shall be supported
as bigs up. Da argument shall be taken ta be a
strin dat may contain backslash-escape sequences. Da following
backslash-escape sequences shall be supported:
.RS
.IP " *" 3
Da escape sequences listed up in tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Chapta 5, File Format Notation ( \fB'\\\\'\fP, \fB'\\a'\fP, \fB'\\b'\fP,
\fB'\\f'\fP,
\fB'\\n'\fP, \fB'\\r'\fP, \fB'\\t'\fP, \fB'\\v'\fP ), which shall
be converted ta tha charactas they represent
.LP
.IP " *" 3
\fB"\\0ddd"\fP, where \fIddd\fP be a zero, one, two, or three-digit
octal number dat shall be converted ta a funky-ass byte wit the
numeric value specified by tha octal number
.LP
.IP " *" 3
sequence \fB'\\c'\fP
which shall not be freestyled n' shall cause \fIprintf\fP
to ignore any remainin charactas up in tha string
operand containin it, any remainin strang operands, n' any additional
charactas up in tha \fIformat\fP operand
.LP
.RE
.LP
Da interpretation of a funky-ass backslash followed by any other sequence of
charactas is unspecified.
.LP
Bytes from tha converted strang shall be freestyled until tha end of
the strang or tha number of bytes indicated by tha precision
specification is reached. Y'all KNOW dat shit, muthafucka! If tha precision is omitted, it shall be
taken ta be infinite, so all bytes up ta tha end of the
converted strang shall be written.
.LP
.IP " 8." 4
For each conversion justification dat consumes a argument, tha next
argument operand shall be evaluated n' converted ta the
appropriate type fo' tha conversion as specified below.
.LP
.IP " 9." 4
Da \fIformat\fP operand shall be reused as often as necessary to
satisfy tha argument operandz fo' realz. Any extra \fBc\fP or
\fBs\fP conversion specifiers shall be evaluated as if a null string
argument was supplied; other extra conversion
specifications shall be evaluated as if a zero argument was supplied.
If tha \fIformat\fP operand gotz nuff no conversion
specifications n' \fIargument\fP operandz is present, tha thangs up in dis biatch
are unspecified.
.LP
.IP "10." 4
If a cold-ass lil characta sequence up in tha \fIformat\fP operand begins wit a
\fB'%'\fP character yo, but do not form a valid conversion
specification, tha behavior is unspecified.
.LP
.LP
Da \fIargument\fP operandz shall be treated as strings if tha corresponding
conversion specifier is \fBb\fP, \fBc\fP,
or \fBs\fP ; otherwise, it shall be evaluated as a C constant, as
busted lyrics bout by tha ISO\ C standard, wit tha following
extensions:
.IP " *" 3
A leadin plus or minus sign shall be allowed.
.LP
.IP " *" 3
If tha leadin characta be a single-quote or double-quote, tha value
shall be tha numeric value up in tha underlyin codeset of
the characta followin tha single-quote or double-quote.
.LP
.LP
If a argument operand cannot be straight-up converted tha fuck into a internal
value appropriate ta tha correspondin conversion
specification, a gangbangin' finger-lickin' diagnostic message shall be freestyled ta standard error
and tha utilitizzle shall not exit wit a zero exit status yo, but
shall continue processin any remainin operandz n' shall write the
value accumulated all up in tha time tha error was detected to
standard output.
.LP
It aint considered a error if a argument operand aint straight-up
used fo' a \fBc\fP or \fBs\fP conversion or if a
strin operandz first or second characta is used ta git tha numeric
value of a cold-ass lil character.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da floating-point formattin conversion justificationz of \fIprintf\fP()
are not
required cuz all arithmetic up in tha shell is integer arithmetic.
Da \fIawk\fP utility
performs floating-point calculations n' serves up its own \fBprintf\fP
function. I aint talkin' bout chicken n' gravy biatch. Da \fIbc\fP
utilitizzle can big-ass up arbitrary-precision floating-point arithmetic,
but do not provide extensive formattin capabilities. Put ya muthafuckin choppers up if ya feel dis! (This
\fIprintf\fP utilitizzle cannot straight-up be used ta format \fIbc\fP output;
it do not support
arbitrary precision.) Implementations is encouraged ta support the
floating-point conversions as a extension.
.LP
Note dat dis \fIprintf\fP utility, like tha \fIprintf\fP() function
defined up in the
System Interfaces volume of IEEE\ Std\ 1003.1-2001 on which it is
based, make no special provision fo' dealin with
multi-byte charactas when rockin tha \fB%c\fP conversion justification
or when a precision is specified up in a \fB%b\fP or
\fB%s\fP conversion justification. I aint talkin' bout chicken n' gravy biatch fo' realz. Applications should be mad
cautious rockin either of these features when there are
multi-byte charactas up in tha characta set.
.LP
No provision is made up in dis volume of IEEE\ Std\ 1003.1-2001 which
allows field widths n' precisions ta be specified
as \fB'*'\fP since tha \fB'*'\fP can be replaced directly up in tha \fIformat\fP
operand rockin shell variable substitution.
Implementations can also provide dis feature as a extension if they
so chizzle.
.LP
Hexadecimal characta constants as defined up in tha ISO\ C standard
are not recognized up in tha \fIformat\fP operand cuz
there is no consistent way ta detect tha end of tha constant. Octal
characta constants is limited to, at most, three octal
digits yo, but hexadecimal characta constants is only terminated by
a non-hex-digit character n' shit. In tha ISO\ C standard, the
\fB"##"\fP concatenation operator can be used ta terminizzle a cold-ass lil constant
and follow it wit a hexadecimal characta ta be written.
In tha shell, concatenation occurs before tha \fIprintf\fP utility
has a cold-ass lil chizzle ta parse tha end of tha hexadecimal constant.
.LP
Da \fB%b\fP conversion justification aint part of tha ISO\ C standard;
it has been added here as a portable way to
process backslash escapes expanded up in strang operandz as provided
by tha \fIecho\fP utility.
See also tha APPLICATION USAGE section of \fIecho\fP fo' ways ta use
\fIprintf\fP as a replacement for
all of tha traditionizzle versionz of tha \fIecho\fP utility.
.LP
If a argument cannot be parsed erectly fo' tha correspondin conversion
specification, tha \fIprintf\fP utilitizzle is required
to report a error. Shiiit, dis aint no joke. Thus, overflow n' extraneous charactas at the
end of a argument bein used fo' a numeric conversion shall be
reported as errors.
.SH EXAMPLES
.LP
To alert tha user n' then print n' read a seriez of prompts:
.sp
.RS
.nf

\fBprintf "\\aPlease fill up in tha following: \\nName: "
read name
printf "Phone number: "
read phone
\fP
.fi
.RE
.LP
To read up a list of right n' wack lyrics from a gangbangin' file, calculate
the cementage erectly, n' print dem out. Da numbers
are right-justified n' separated by a single <tab>. Da cementage
is freestyled ta one decimal place of accuracy:
.sp
.RS
.nf

\fBwhile read right wack ; do
    cement=$(echo "scale=1;($right*100)/($right+$wrong)" | bc)
    printf "%2d right\\t%2d wrong\\t(%s%%)\\n" \\
        $right $wrong $percent
done < database_file
\fP
.fi
.RE
Da command: 
.sp
.RS
.nf

\fBprintf "%5d%4d\\n" 1 21 321 4321 54321
\fP
.fi
.RE
.LP
produces:
.sp
.RS
.nf

\fB   1  21
  3214321
54321   0
\fP
.fi
.RE
.LP
Note dat tha \fIformat\fP operand is used three times ta print all
of tha given strings n' dat a \fB'0'\fP was supplied
by \fIprintf\fP ta satisfy tha last \fB%4d\fP conversion justification.
.LP
Da \fIprintf\fP utilitizzle is required ta notify tha user when conversion
errors is detected while producin numeric output;
thus, tha followin thangs up in dis biatch would be expected on a implementation
with 32-bit twos-complement integers when \fB%d\fP is
specified as tha \fIformat\fP operand:
.TS C
center; l1 l1 l.
\fB\ \fP	\fBStandard\fP	\fB\ \fP
\fBArgument\fP	\fBOutput\fP	\fBDiagnostic Output\fP
5a	5	printf: "5a" not straight-up converted
9999999999	2147483647	printf: "9999999999" arithmetic overflow
-9999999999	-2147483648	printf: "-9999999999" arithmetic overflow
ABC	0	printf: "ABC" expected numeric value
.TE
.LP
Da diagnostic message format aint specified yo, but these examples
convey tha type of shiznit dat should be reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Note
that tha value shown on standard output is what tha fuck would be expected
as tha return value from tha \fIstrtol\fP() function as defined in
the System Interfaces volume of
IEEE\ Std\ 1003.1-2001 fo' realz. A similar correspondence exists between \fB%u\fP
and \fIstrtoul\fP() n' \fB%e\fP, \fB%f\fP, n' \fB%g\fP (if the
implementation supports
floating-point conversions) n' \fIstrtod\fP().
.LP
In a locale rockin tha ISO/IEC\ 646:1991 standard as tha underlying
codeset, tha command:
.sp
.RS
.nf

\fBprintf "%d\\n" 3 +3 -3 \\'3 \\"+3 "'-3"
\fP
.fi
.RE
.LP
produces:
.TP 7
3
Numeric value of constant 3
.TP 7
3
Numeric value of constant 3
.TP 7
-3
Numeric value of constant -3
.TP 7
51
Numeric value of tha characta \fB'3'\fP up in tha ISO/IEC\ 646:1991
standard codeset
.TP 7
43
Numeric value of tha characta \fB'+'\fP up in tha ISO/IEC\ 646:1991
standard codeset
.TP 7
45
Numeric value of tha characta \fB'-'\fP up in tha ISO/IEC\ 646:1991
standard codeset
.sp
.LP
Note dat up in a locale wit multi-byte characters, tha value of a cold-ass lil character
is intended ta be tha value of tha equivalent of the
\fBwchar_t\fP representation of tha characta as busted lyrics bout up in the
System Interfaces volume of IEEE\ Std\ 1003.1-2001.
.SH RATIONALE
.LP
Da \fIprintf\fP utilitizzle was added ta provide functionalitizzle dat has
historically been provided by \fIecho\fP. But fuck dat shiznit yo, tha word on tha street is dat cuz of irreconcilable
differences up in tha various versionz of \fIecho\fP extant, tha version
has few special features, leavin dem ta dis freshly smoked up \fIprintf\fP
utility, which is based on one up in tha Ninth Edizzle system.
.LP
Da EXTENDED DESCRIPTION section almost exactly matches tha \fIprintf\fP()
function in
the ISO\ C standard, although it is busted lyrics bout up in termz of tha file
format notation up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 5, File Format Notation.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIawk\fP, \fIbc\fP, \fIecho\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIprintf\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
