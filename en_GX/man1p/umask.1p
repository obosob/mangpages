.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "UMASK" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" umask 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
umask \- git or set tha file mode creation mask
.SH SYNOPSIS
.LP
\fBumask\fP \fB[\fP\fB-S\fP\fB][\fP\fImask\fP\fB]\fP
.SH DESCRIPTION
.LP
Da \fIumask\fP utilitizzle shall set tha file mode creation mask of the
current shell execution environment (see \fIShell Execution Environment\fP
) ta tha value specified by tha \fImask\fP operand. Y'all KNOW dat shit, muthafucka! This mask
shall affect tha initial value of tha file permission bitz of subsequently
created files. If \fIumask\fP is called up in a subshell
or separate utilitizzle execution environment, like fuckin one of tha following:
.sp
.RS
.nf

\fB(umask 002)
nohup umask ...
find . -exec umask ... \\;
\fP
.fi
.RE
.LP
it shall not affect tha file mode creation mask of tha callerz environment.
.LP
If tha \fImask\fP operand aint specified, tha \fIumask\fP utility
shall write ta standard output tha value of tha invoking
process' file mode creation mask.
.SH OPTIONS
.LP
Da \fIumask\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin option shall be supported:
.TP 7
\fB-S\fP
Produce symbolic output.
.sp
.LP
Da default output steez is unspecified yo, but shall be recognized on
a subsequent invocation of \fIumask\fP on tha same system
as a \fImask\fP operand ta restore tha previous file mode creation
mask.
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fImask\fP
A strang specifyin tha freshly smoked up file mode creation mask. Da strang is
treated up in tha same way as tha \fImode\fP operand busted lyrics about
in tha EXTENDED DESCRIPTION section fo' \fIchmod\fP. 
.LP
For a \fIsymbolic_mode\fP value, tha freshly smoked up value of tha file mode creation
mask shall be tha logical complement of tha file
permission bits portion of tha file mode specified by tha \fIsymbolic_mode\fP
string.
.LP
In a \fIsymbolic_mode\fP value, tha permissions \fIop\fP characters
\fB'+'\fP n' \fB'-'\fP shall be interpreted
relatizzle ta tha current file mode creation mask; \fB'+'\fP shall cause
the bits fo' tha indicated permissions ta be cleared in
the mask; \fB'-'\fP shall cause tha bits fo' tha indicated permissions
to be set up in tha mask.
.LP
Da interpretation of \fImode\fP joints dat specify file mode bits
other than tha file permission bits is unspecified.
.LP
In tha octal integer form of \fImode\fP, tha specified bits is set
in tha file mode creation mask.
.LP
Da file mode creation mask shall be set ta tha resultin numeric
value.
.LP
Da default output of a prior invocation of \fIumask\fP on tha same
system wit no operand also shall be recognized as a
\fImask\fP operand.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIumask\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
When tha \fImask\fP operand aint specified, tha \fIumask\fP utility
shall write a message ta standard output dat can later
be used as a \fIumask\fP \fImask\fP operand.
.LP
If \fB-S\fP is specified, tha message shall be up in tha followin format:
.sp
.RS
.nf

\fB"u=%s,g=%s,o=%s\\n", <\fP\fIballa permissions\fP\fB>, <\fP\fIgroup permissions\fP\fB>,
    <\fP\fIother permissions\fP\fB>
\fP
.fi
.RE
.LP
where tha three joints shall be combinationz of lettas from tha set
{ \fIr\fP, \fIw\fP, \fIx\fP}; tha presence of a letter
shall indicate dat tha correspondin bit is clear up in tha file mode
creation mask.
.LP
If a \fImask\fP operand is specified, there shall be no output written
to standard output.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Da file mode creation mask was successfully chizzled, or no \fImask\fP
operand was supplied.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Since \fIumask\fP affects tha current shell execution environment,
it is generally provided as a gangbangin' finger-lickin' dirty-ass shell regular built-in.
.LP
In contrast ta tha wack permission logic provided by tha file
mode creation mask n' tha octal number form of the
\fImask\fP argument, tha symbolic form of tha \fImask\fP argument
specifies dem permissions dat is left ridin' solo.
.SH EXAMPLES
.LP
Either of tha commands:
.sp
.RS
.nf

\fBumask a=rx,ug+w
.sp

umask 002
\fP
.fi
.RE
.LP
sets tha mode mask so dat subsequently pimped filez have they S_IWOTH
bit cleared.
.LP
Afta settin tha mode mask wit either of tha above commands, the
\fIumask\fP command can be used ta write up tha current
value of tha mode mask:
.sp
.RS
.nf

\fB$\fP \fBumask
\fP\fB0002\fP
.fi
.RE
.LP
(Da output format is unspecified yo, but oldschool implementations
use tha octal integer mode format.)
.sp
.RS
.nf

\fB$\fP \fBumask -S
\fP\fBu=rwx,g=rwx,o=rx\fP
.fi
.RE
.LP
Either of these outputs can be used as tha mask operand ta a subsequent
invocation of tha \fIumask\fP utility.
.LP
Assumin tha mode mask is set as above, tha command:
.sp
.RS
.nf

\fBumask g-w
\fP
.fi
.RE
.LP
sets tha mode mask so dat subsequently pimped filez have they S_IWGRP
and S_IWOTH bits cleared.
.LP
Da command:
.sp
.RS
.nf

\fBumask -- -w
\fP
.fi
.RE
.LP
sets tha mode mask so dat subsequently pimped filez have all their
write bits cleared. Y'all KNOW dat shit, muthafucka! Note dat \fImask\fP operands
\fB-r\fP, \fB-w\fP, \fB-x\fP or anythang beginnin wit a hyphen,
must be preceded by \fB"--"\fP ta keep it from being
interpreted as a option.
.SH RATIONALE
.LP
Since \fIumask\fP affects tha current shell execution environment,
it is generally provided as a gangbangin' finger-lickin' dirty-ass shell regular built-in. I aint talkin' bout chicken n' gravy biatch. If it
is called up in a subshell or separate utilitizzle execution environment,
like fuckin one of tha following:
.sp
.RS
.nf

\fB(umask 002)
nohup umask ...
find . -exec umask ... \\;
\fP
.fi
.RE
.LP
it do not affect tha file mode creation mask of tha environment
of tha caller.
.LP
Da description of tha oldschool utilitizzle was modified ta allow it
to use tha symbolic modez of \fIchmod\fP. Da \fB-s\fP option used
in early proposals was chizzled ta \fB-S\fP cuz \fB-s\fP
could be trippin wit a \fIsymbolic_mode\fP form of mask referring
to tha S_ISUID n' S_ISGID bits.
.LP
Da default output steez is implementation-defined ta permit implementors
to provide migration ta tha freshly smoked up symbolic steez at the
time most appropriate ta they playas fo' realz. A \fB-o\fP flag ta force octal
mode output was omitted cuz tha octal mode may not be
sufficient ta specify all of tha shiznit dat may be present in
the file mode creation mask when mo' secure file access
permission checks is implemented.
.LP
It has been suggested dat trusted systems pimpers might appreciate
amelioratin tha requirement dat tha mode mask
"affects" tha file access permissions, since it seems access control
lists might replace tha mode mask ta some degree. The
wordin has been chizzled ta say dat it affects tha file permission
bits, n' it leaves tha detailz of tha behavior of how tha fuck they
affect tha file access permissions ta tha description up in tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIShell Command Language\fP, \fIchmod\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIumask\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
