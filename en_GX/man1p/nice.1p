.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "NICE" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sick 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
nice \- invoke a utilitizzle wit a altered sick value
.SH SYNOPSIS
.LP
\fBnice\fP \fB[\fP\fB-n\fP \fIincrement\fP\fB]\fP \fIutility\fP
\fB[\fP\fIargument\fP\fB...\fP\fB]\fP\fB\fP
.SH DESCRIPTION
.LP
Da \fInice\fP utilitizzle shall invoke a utility, requestin dat it
be run wit a gangbangin' finger-lickin' different sick value (see tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Section 3.239, Sick Value). With
no
options n' only if tha user has appropriate privileges, tha executed
utilitizzle shall be run wit a sick value dat is some
implementation-defined quantitizzle less than or equal ta tha sick value
of tha current process. If tha user lacks appropriate
privileges ta affect tha sick value up in tha axed manner, tha \fInice\fP
utilitizzle shall not affect tha sick value; up in dis case,
a warnin message may be freestyled ta standard error yo, but dis shall
not prevent tha invocation of \fIutility\fP or affect tha exit
status.
.SH OPTIONS
.LP
Da \fInice\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin option is supported:
.TP 7
\fB-n\ \fP \fIincrement\fP
A positizzle or wack decimal integer which shall have tha same effect
on tha execution of tha utilitizzle as if tha utilitizzle had
called tha \fInice\fP() function wit tha numeric value of tha \fIincrement\fP
option-argument.
.sp
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIutility\fP
Da name of a utilitizzle dat is ta be invoked. Y'all KNOW dat shit, muthafucka! If tha \fIutility\fP
operand names any of tha special built-in utilitizzles up in \fISpecial
Built-In Utilities\fP, tha thangs up in dis biatch is undefined.
.TP 7
\fIargument\fP
Any strang ta be supplied as a argument when invokin tha utility
named by tha \fIutility\fP operand.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fInice\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fIPATH\fP
Determine tha search path used ta locate tha utilitizzle ta be invoked.
See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 8, Environment Variables.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
If \fIutility\fP is invoked, tha exit statuz of \fInice\fP shall be
the exit statuz of \fIutility\fP; otherwise, the
\fInice\fP utilitizzle shall exit wit one of tha followin joints:
.TP 7
1-125
An error occurred up in tha \fInice\fP utility.
.TP 7
\ \ 126
Da utilitizzle specified by \fIutility\fP was found but could not be
invoked.
.TP 7
\ \ 127
Da utilitizzle specified by \fIutility\fP could not be found.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da only guaranteed portable usez of dis utilitizzle are:
.TP 7
\fInice\ utility\fP
.sp
Run \fIutility\fP wit tha default lower sick value.
.TP 7
\fInice\ \fP \fB-n\ \fP <\fIpositive\ integer\fP>\fI\ utility\fP
.sp
Run \fIutility\fP wit a lower sick value.
.sp
.LP
On some implementations they have no discernible effect on tha invoked
utilitizzle n' on some others they is exactly
equivalent.
.LP
Oldschool systems have frequently supported tha <\fIpositizzle integer\fP>
up ta 20. Right back up in yo muthafuckin ass. Since there is no error penalty
associated wit guessin a number dat is too high, playas without
access ta tha system conformizzle document (to peep what tha fuck limits are
actually up in place) could use tha oldschool 1 ta 20 range or attempt
to use straight-up big-ass numbers if tha thang should be truly low
priority.
.LP
Da sick value of a process can be displayed rockin tha command:
.sp
.RS
.nf

\fBps -o sick
\fP
.fi
.RE
.LP
Da \fIcommand\fP, \fIenv\fP, \fInice\fP, \fInohup\fP, \fItime\fP,
and \fIxargs\fP utilitizzles done been specified ta use exit code 127
if a error occurs so that
applications can distinguish "failure ta find a utility" from "invoked
utilitizzle exited wit a error indication". Da value 127
was chosen cuz it aint commonly used fo' other meanings; most
utilitizzles use lil' small-ass joints fo' "normal error conditions" and
the joints above 128 can be trippin wit termination cuz of receipt
of a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da value 126 was chosen up in a similar manner to
indicate dat tha utilitizzle could be found yo, but not invoked. Y'all KNOW dat shit, muthafucka! Some scripts
produce meaningful error lyrics differentiatin tha 126
and 127 cases. Da distinction between exit codes 126 n' 127 is based
on KornShell practice dat uses 127 when all attempts to
\fIexec\fP tha utilitizzle fail wit [ENOENT], n' uses 126 when any attempt
to \fIexec\fP tha utilitizzle fails fo' any other
reason.
.SH EXAMPLES
.LP
None.
.SH RATIONALE
.LP
Cuz of tha text bout tha limitz of tha sick value bein implementation-defined,
\fInice\fP aint straight-up required ta chizzle
the sick value of tha executed command; tha limits could be zero differences
from tha system default, although tha implementor is
required ta document dis fact up in tha conformizzle document.
.LP
Da 4.3 BSD version of \fInice\fP do not check whether \fIincrement\fP
is a valid decimal integer n' shit. Da command \fInice\fP
\fB-x\fP \fIutility\fP, fo' example, would be treated tha same as
the command \fInice\fP \fB--1\fP \fIutility\fP. If tha user
does not have appropriate privileges, dis thangs up in dis biatch up in a "permission
denied" error. Shiiit, dis aint no joke. This is considered a funky-ass bug.
.LP
When a user without appropriate privileges gives a wack \fIincrement\fP,
System V treats it like tha command \fInice\fP
\fB-0\fP \fIutility\fP, while 4.3 BSD writes a "permission denied"
message n' do not run tha utility. Neither was considered
clearly superior, so tha behavior was left unspecified.
.LP
Da C shell has a funky-ass built-in version of \fInice\fP dat has a gangbangin' finger-lickin' different
interface from tha one busted lyrics bout up in dis volume of
IEEE\ Std\ 1003.1-2001.
.LP
Da term "utility" is used, rather than "command", ta highlight the
fact dat shell compound commands, pipelines, n' so on,
cannot be used. Y'all KNOW dat shit, muthafucka! Special built-ins also cannot be used. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat "utility"
includes user application programs n' shell scripts,
not just utilitizzles defined up in dis volume of IEEE\ Std\ 1003.1-2001.
.LP
Oldschool implementationz of \fInice\fP provide a sick value range
of 40 or 41 discrete steps, wit tha default sick value
bein tha midpoint of dat range. By default, they lower tha sick
value of tha executed utilitizzle by 10.
.LP
Some oldschool documentation states dat tha \fIincrement\fP value
must be within a gangbangin' fixed range. This is misleading; tha valid
\fIincrement\fP joints on any invocation is determined by tha current
process sick value, which aint always tha default.
.LP
Da definizzle of sick value aint intended ta suggest dat all processes
in a system have prioritizzles dat is comparable.
Schedulin policy extensions like fuckin tha realtime prioritizzles up in the
System Interfaces volume of IEEE\ Std\ 1003.1-2001 make
the notion of a single underlyin prioritizzle fo' all schedulin policies
problematic. Right back up in yo muthafuckin ass. Some implementations may implement the
\fInice\fP-related features ta affect all processes on tha system,
others ta affect just tha general time-sharin activities
implied by dis volume of IEEE\ Std\ 1003.1-2001, n' others may have
no effect at all. Because of tha use of
"implementation-defined" up in \fInice\fP n' \fIrenice\fP, a wide range
of implementation
strategies is possible.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIShell Command Language\fP, \fIrenice\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fInice\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
