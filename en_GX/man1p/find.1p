.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FIND" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" find 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
find \- find files
.SH SYNOPSIS
.LP
\fBfind\fP \fB[\fP\fB-H | -L\fP\fB]\fP \fIpath\fP \fB...\fP \fB[\fP\fIoperand_expression\fP
\fB\&...\fP\fB]\fP
.SH DESCRIPTION
.LP
Da \fIfind\fP utilitizzle shall recursively descend tha directory hierarchy
from each file specified by \fIpath\fP, evaluatin a
Boolean expression composed of tha primaries busted lyrics bout up in tha OPERANDS
section fo' each file encountered.
.LP
Da \fIfind\fP utilitizzle shall be able ta descend ta arbitrary depths
in a gangbangin' file hierarchy n' shall not fail cuz of path length
limitations (unless a \fIpath\fP operand specified by tha application
exceedz {PATH_MAX} requirements).
.LP
Da \fIfind\fP utilitizzle shall detect infinite loops; dat is, entering
a previously hit up directory dat be a ancestor of the
last file encountered. Y'all KNOW dat shit, muthafucka! When it detects a infinite loop, \fIfind\fP
shall write a gangbangin' finger-lickin' diagnostic message ta standard error n' shall
either recover its posizzle up in tha hierarchy or terminate.
.SH OPTIONS
.LP
Da \fIfind\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported by tha implementation:
.TP 7
\fB-H\fP
Cause tha file shiznit n' file type evaluated fo' each symbolic
link encountered on tha command line ta be dem of the
file referenced by tha link, n' not tha link itself. If tha referenced
file do not exist, tha file shiznit n' type shall be
for tha link itself. File shiznit fo' all symbolic links not on
the command line shall be dat of tha link itself.
.TP 7
\fB-L\fP
Cause tha file shiznit n' file type evaluated fo' each symbolic
link ta be dem of tha file referenced by tha link, and
not tha link itself.
.sp
.LP
Specifyin mo' than one of tha mutually-exclusive options \fB-H\fP
and \fB-L\fP shall not be considered a error. Shiiit, dis aint no joke. Da last
option specified shall determine tha behavior of tha utility.
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.LP
Da \fIpath\fP operand be a pathname of a startin point up in tha directory
hierarchy.
.LP
Da first argument dat starts wit a \fB'-'\fP, or be a \fB'!'\fP
or a \fB'('\fP, n' all subsequent arguments shall
be interpreted as a \fIexpression\fP made up of tha followin primaries
and operators. In tha descriptions, wherever \fIn\fP is
used as a primary argument, it shall be interpreted as a thugged-out decimal integer
optionally preceded by a plus ( \fB'+'\fP ) or minus (
\fB'-'\fP ) sign, as bigs up:
.TP 7
+\fIn\fP
Mo' than \fIn\fP.
.TP 7
\fIn\fP
Exactly \fIn\fP.
.TP 7
-\fIn\fP
Less than \fIn\fP.
.sp
.LP
Da followin primaries shall be supported:
.TP 7
\fB-name\ \fP \fIpattern\fP
.sp
Da primary shall evaluate as legit if tha basename of tha filename
bein examined matches \fIpattern\fP rockin tha pattern matching
notation busted lyrics bout up in \fIPattern Matchin Notation\fP .
.TP 7
\fB-nouser\fP
Da primary shall evaluate as legit if tha file belongs ta a user ID
for which tha \fIgetpwuid\fP() function defined up in tha System Interfaces
volume of
IEEE\ Std\ 1003.1-2001 (or equivalent) returns NULL.
.TP 7
\fB-nogroup\fP
Da primary shall evaluate as legit if tha file belongs ta a group
ID fo' which tha \fIgetgrgid\fP() function defined up in tha System Interfaces
volume of
IEEE\ Std\ 1003.1-2001 (or equivalent) returns NULL.
.TP 7
\fB-xdev\fP
Da primary shall always evaluate as true; it shall cause \fIfind\fP
not ta continue descendin past directories dat have a
different thang ID ( \fIst_dev\fP, peep tha \fIstat\fP() function
defined up in tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001). If any \fB-xdev\fP primary
is specified, it shall apply ta tha entire
expression even if tha \fB-xdev\fP primary would not normally be evaluated.
.TP 7
\fB-prune\fP
Da primary shall always evaluate as true; it shall cause \fIfind\fP
not ta descend tha current pathname if it aint nuthin but a gangbangin' finger-lickin' directory.
If tha \fB-depth\fP primary is specified, tha \fB-prune\fP primary
shall have no effect.
.TP 7
\fB-perm\ [-]\fP\fImode\fP
.sp
Da \fImode\fP argument is used ta represent file mode bits, n' you can put dat on yo' toast. Well shiiiit, it shall
be identical up in format ta tha \fIsymbolic_mode\fP operand
busted lyrics bout up in \fIchmod\fP(), n' shall be interpreted as bigs up.
To start, a template shall be assumed
with all file mode bits cleared. Y'all KNOW dat shit, muthafucka! An \fIop\fP symbol of \fB'+'\fP shall
set tha appropriate mode bits up in tha template;
\fB'-'\fP shall clear tha appropriate bits; \fB'='\fP shall set the
appropriate mode bits, without regard ta tha contents of
process' file mode creation mask. Da \fIop\fP symbol of \fB'-'\fP
cannot be tha straight-up original gangsta characta of \fImode\fP; dis avoids
ambiguitizzle wit tha optionizzle leadin hyphen. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since tha initial mode
is all bits off, there be not any symbolic modes dat need to
use \fB'-'\fP as tha straight-up original gangsta character n' shit. 
.LP
If tha hyphen is omitted, tha primary shall evaluate as legit when
the file permission bits exactly match tha value of the
resultin template.
.LP
Otherwise, if \fImode\fP is prefixed by a hyphen, tha primary shall
evaluate as legit if at least all tha bits up in tha resulting
template is set up in tha file permission bits.
.TP 7
\fB-perm\ [-]\fP\fIonum\fP
.sp
If tha hyphen is omitted, tha primary shall evaluate as legit when
the file permission bits exactly match tha value of tha octal
number \fIonum\fP n' only tha bits correspondin ta tha octal mask
07777 shall be compared. Y'all KNOW dat shit, muthafucka! (See tha description of tha octal
\fImode\fP up in \fIchmod\fP().) Otherwise, if \fIonum\fP is prefixed
by a hyphen, tha primary shall
evaluate as legit if at least all of tha bits specified up in \fIonum\fP
that is also set up in tha octal mask 07777 is set.
.TP 7
\fB-type\ \fP \fIc\fP
Da primary shall evaluate as legit if tha type of tha file is \fIc\fP,
where \fIc\fP is \fB'b'\fP, \fB'c'\fP,
\fB'd'\fP, \fB'l'\fP, \fB'p'\fP, \fB'f'\fP, or \fB's'\fP fo' block
special file, characta special file,
directory, symbolic link, FIFO, regular file, or socket, respectively.
.TP 7
\fB-links\ \fP \fIn\fP
Da primary shall evaluate as legit if tha file has \fIn\fP links.
.TP 7
\fB-user\ \fP \fIuname\fP
Da primary shall evaluate as legit if tha file belongs ta tha user
\fIuname.\fP If \fIuname\fP be a thugged-out decimal integer n' the
\fIgetpwnam\fP() (or equivalent) function do not return a valid
user name, \fIuname\fP
shall be interpreted as a user ID.
.TP 7
\fB-group\ \fP \fIgname\fP
.sp
Da primary shall evaluate as legit if tha file belongs ta tha group
\fIgname\fP. If \fIgname\fP be a thugged-out decimal integer n' tha \fIgetgrnam\fP()
(or equivalent) function do not return a valid crew name, \fIgname\fP
shall be interpreted as a crew ID.
.TP 7
\fB-size\ \fP \fIn\fP\fB[c]\fP
Da primary shall evaluate as legit if tha file size up in bytes, divided
by 512 n' rounded up ta tha next integer, is \fIn\fP.
If \fIn\fP is followed by tha characta \fB'c'\fP, tha size shall
be up in bytes.
.TP 7
\fB-atime\ \fP \fIn\fP
Da primary shall evaluate as legit if tha file access time subtracted
from tha initialization time, divided by 86400 (with any
remainder discarded), is \fIn\fP.
.TP 7
\fB-ctime\ \fP \fIn\fP
Da primary shall evaluate as legit if tha time of last chizzle of file
status shiznit subtracted from tha initialization
time, divided by 86400 (with any remainder discarded), is \fIn\fP.
.TP 7
\fB-mtime\ \fP \fIn\fP
Da primary shall evaluate as legit if tha file modification time subtracted
from tha initialization time, divided by 86400
(with any remainder discarded), is \fIn\fP.
.TP 7
\fB-exec\ \fP \fIutility_name\ \fP \fB[\fP\fIargument\fP\ ...\fB]\ ;\fP
.TP 7
\fB-exec\ \fP \fIutility_name\ \fP \fB[\fP\fIargument\fP\ ...\fB]\ \ \fP
{}\ +
.sp
Da end of tha primary expression shall be punctuated by a semicolon
or by a plus sign. I aint talkin' bout chicken n' gravy biatch. Only a plus sign dat bigs up a argument
containin tha two charactas \fB"{}"\fP shall punctuate tha end of
the primary expression. I aint talkin' bout chicken n' gravy biatch. Other usez of tha plus sign shall
not be treated as special. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. 
.LP
If tha primary expression is punctuated by a semicolon, tha utility
\fIutility_name\fP shall be invoked once fo' each pathname
and tha primary shall evaluate as legit if tha utilitizzle returns a zero
value as exit status fo' realz. A \fIutility_name\fP or \fIargument\fP
containin only tha two charactas \fB"{}"\fP shall be replaced by
the current pathname.
.LP
If tha primary expression is punctuated by a plus sign, tha primary
shall always evaluate as true, n' tha pathnames fo' which
the primary is evaluated shall be aggregated tha fuck into sets, n' you can put dat on yo' toast. Da utility
\fIutility_name\fP shall be invoked once fo' each set of
aggregated pathnames. Each invocation shall begin afta tha last pathname
in tha set be aggregated, n' shall be completed before
the \fIfind\fP utilitizzle exits n' before tha straight-up original gangsta pathname up in the
next set (if any) be aggregated fo' dis primary yo, but it is
otherwise unspecified whether tha invocation occurs before, during,
or afta tha evaluationz of other primaries. Put ya muthafuckin choppers up if ya feel dis! If any invocation
returns a non-zero value as exit status, tha \fIfind\fP utilitizzle shall
return a non-zero exit status fo' realz. An argument containin only
the two charactas \fB"{}"\fP shall be replaced by tha set of aggregated
pathnames, wit each pathname passed as a separate
argument ta tha invoked utilitizzle up in tha same order dat dat shiznit was aggregated.
Da size of any set of two or mo' pathnames shall be
limited such dat execution of tha utilitizzle do not cause tha system's
{ARG_MAX} limit ta be exceeded. Y'all KNOW dat shit, muthafucka! If mo' than one argument
containin only tha two charactas \fB"{}"\fP is present, tha behavior
is unspecified.
.LP
If a \fIutility_name\fP or \fIargument\fP strang gotz nuff tha two
charactas \fB"{}"\fP yo, but not just tha two characters
\fB"{}"\fP, it is implementation-defined whether \fIfind\fP replaces
those two charactas or uses tha strang without chizzle.
Da current directory fo' tha invocation of \fIutility_name\fP shall
be tha same as tha current directory when tha \fIfind\fP
utilitizzle was started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha \fIutility_name\fP names any of tha special
built-in utilitizzles (see \fISpecial Built-In Utilities\fP ), tha thangs up in dis biatch
are undefined.
.TP 7
\fB-ok\ \fP \fIutility_name\ \fP \fB[\fP\fIargument\fP\ ...\fB]\ ;\fP
.sp
Da \fB-ok\fP primary shall be equivalent ta \fB-exec\fP, except that
the use of a plus sign ta punctuate tha end of tha primary
expression need not be supported, n' \fIfind\fP shall request affirmation
of tha invocation of \fIutility_name\fP rockin the
current file as a argument by freestylin ta standard error as busted lyrics about
in tha STDERR section. I aint talkin' bout chicken n' gravy biatch. If tha response on standard input is
affirmative, tha utilitizzle shall be invoked. Y'all KNOW dat shit, muthafucka! Otherwise, tha command
shall not be invoked n' tha value of tha \fB-ok\fP operand
shall be false.
.TP 7
\fB-print\fP
Da primary shall always evaluate as true; it shall cause tha current
pathname ta be freestyled ta standard output.
.TP 7
\fB-newer\ \fP \fIfile\fP
Da primary shall evaluate as legit if tha modification time of the
current file is mo' recent than tha modification time of
the file named by tha pathname \fIfile\fP.
.TP 7
\fB-depth\fP
Da primary shall always evaluate as true; it shall cause descent
of tha directory hierarchy ta be done so dat all entries in
a directory is acted on before tha directory itself. If a \fB-depth\fP
primary aint specified, all entries up in a gangbangin' finger-lickin' directory shall
be acted on afta tha directory itself. If any \fB-depth\fP primary
is specified, it shall apply ta tha entire expression even if
the \fB-depth\fP primary would not normally be evaluated.
.sp
.LP
Da primaries can be combined rockin tha followin operators (in order
of decreasin precedence):
.TP 7
(\ \fIexpression\fP\ )
True if \fIexpression\fP is true.
.TP 7
\fB!\ \fP \fIexpression\fP
Negation of a primary; tha unary NOT operator.
.TP 7
\fIexpression\ \fP \fB[-a]\ \fP \fIexpression\fP
.sp
Conjunction of primaries; tha AND operator is implied by tha juxtaposition
of two primaries or made explicit by tha optional
\fB-a\fP operator. Shiiit, dis aint no joke. Da second expression shall not be evaluated if
the first expression is false.
.TP 7
\fIexpression\ \fP \fB-o\ \fP \fIexpression\fP
.sp
Alternation of primaries; tha OR operator. Shiiit, dis aint no joke. Da second expression shall
not be evaluated if tha straight-up original gangsta expression is true.
.sp
.LP
If no \fIexpression\fP is present, \fB-print\fP shall be used as the
expression. I aint talkin' bout chicken n' gravy biatch. Otherwise, if tha given expression do not
contain any of tha primaries \fB-exec\fP, \fB-ok\fP, or \fB-print\fP,
the given expression shall be effectively replaced by:
.sp
.RS
.nf

\fB(\fP \fIgiven_expression\fP \fB) -print
\fP
.fi
.RE
.LP
Da \fB-user\fP, \fB-group\fP, n' \fB-newer\fP primaries each shall
evaluate they respectizzle arguments only once.
.SH STDIN
.LP
If tha \fB-ok\fP primary is used, tha response shall be read from
the standard input fo' realz. An entire line shall be read as the
response. Otherwise, tha standard input shall not be used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIfind\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements used up in tha pattern
matchin notation fo' tha \fB-n\fP option n' up in tha extended regular
expression defined fo' tha \fByesexpr\fP locale keyword in
the \fILC_MESSAGES\fP category.
.TP 7
\fILC_CTYPE\fP
This variable determines tha locale fo' tha interpretation of sequences
of bytez of text data as charactas (for example,
single-byte as opposed ta multi-byte charactas up in arguments), the
behavior of characta classes within tha pattern matching
notation used fo' tha \fB-n\fP option, n' tha behavior of character
classes within regular expressions used up in tha extended
regular expression defined fo' tha \fByesexpr\fP locale keyword in
the \fILC_MESSAGES\fP category.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale fo' tha processin of affirmatizzle responses that
should be used ta affect tha format n' contents of
diagnostic lyrics freestyled ta standard error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fIPATH\fP
Determine tha location of tha \fIutility_name\fP fo' tha \fB-exec\fP
and \fB-ok\fP primaries, as busted lyrics bout up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 8, Environment
Variables.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Da \fB-print\fP primary shall cause tha current pathnames ta be written
to standard output. Da format shall be:
.sp
.RS
.nf

\fB"%s\\n", <\fP\fIpath\fP\fB>
\fP
.fi
.RE
.SH STDERR
.LP
Da \fB-ok\fP primary shall write a prompt ta standard error containing
at least tha \fIutility_name\fP ta be invoked n' the
current pathname. In tha POSIX locale, tha last non- <blank> up in the
prompt shall be \fB'?'\fP . Da exact format used is
unspecified.
.LP
Otherwise, tha standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
All \fIpath\fP operandz was traversed successfully.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
When used up in operands, pattern matchin notation, semicolons, opening
parentheses, n' closin parentheses is special ta the
shell n' must be quoted (see \fIQuoting\fP ).
.LP
Da bit dat is traditionally used fo' sticky (historically 01000)
is specified up in tha \fB-perm\fP primary rockin tha octal
number argument form. Right back up in yo muthafuckin ass. Since dis bit aint defined by dis volume
of IEEE\ Std\ 1003.1-2001, applications must not assume
that it straight-up refers ta tha traditionizzle sticky bit.
.SH EXAMPLES
.IP " 1." 4
Da followin commandz is equivalent:
.sp
.RS
.nf

\fBfind .
find . -print
\fP
.fi
.RE
.LP
They both write up tha entire directory hierarchy from tha current
directory.
.LP
.IP " 2." 4
Da followin command:
.sp
.RS
.nf

\fBfind / \\( -name tmp -o -name '*.xx' \\) -atime +7 -exec rm {} \\;
\fP
.fi
.RE
.LP
removes all filez named \fBtmp\fP or endin up in \fB.xx\fP dat have
not been accessed fo' seven or mo' 24-hour periods.
.LP
.IP " 3." 4
Da followin command:
.sp
.RS
.nf

\fBfind . -perm -o+w,+s
\fP
.fi
.RE
.LP
prints ( \fB-print\fP be assumed) tha namez of all filez up in or below
the current directory, wit all of tha file permission
bits S_ISUID, S_ISGID, n' S_IWOTH set.
.LP
.IP " 4." 4
Da followin command:
.sp
.RS
.nf

\fBfind . -name SCCS -prune -o -print
\fP
.fi
.RE
.LP
recursively prints pathnamez of all filez up in tha current directory
and below yo, but skips directories named SCCS n' filez in
them.
.LP
.IP " 5." 4
Da followin command:
.sp
.RS
.nf

\fBfind . -print -name SCCS -prune
\fP
.fi
.RE
.LP
behaves as up in tha previous example yo, but prints tha namez of tha SCCS
directories.
.LP
.IP " 6." 4
Da followin command is roughly equivalent ta tha \fB-nt\fP extension
to \fItest\fP:
.sp
.RS
.nf

\fBif [ -n "$(find file1 -prune -newer file2)" ]; then
    printf %s\\\\n "file1 is newer than file2"
fi
\fP
.fi
.RE
.LP
.IP " 7." 4
Da descriptionz of \fB-atime\fP, \fB-ctime\fP, n' \fB-mtime\fP use
the terminologizzle \fIn\fP "86400 second periods
(days)". For example, a gangbangin' file accessed at 23:59 is selected by:
.sp
.RS
.nf

\fBfind . -atime -1 -print
\fP
.fi
.RE
.LP
at 00:01 tha next dizzle (less than 24 minutes later, not mo' than one
dizzle ago); tha midnight boundary between minutes has no effect on
the 24-hour calculation.
.LP
.SH RATIONALE
.LP
Da \fB-a\fP operator was retained as a optionizzle operator fo' compatibility
with oldschool shell scripts, even though it is
redundant wit expression concatenation.
.LP
Da descriptionz of tha \fB'-'\fP modifier on tha \fImode\fP n' \fIonum\fP
arguments ta tha \fB-perm\fP primary agree
with oldschool practice on BSD n' System V implementations. Right back up in yo muthafuckin ass. System
V n' BSD documentation both describe it up in termz of checking
additionizzle bits; up in fact, it uses tha same ol' dirty bits yo, but checks fo' having
at least all of tha matchin bits set instead of having
exactly tha matchin bits set.
.LP
Da exact format of tha interactizzle prompts is unspecified. Y'all KNOW dat shit, muthafucka! Only the
general nature of tha contentz of prompts is specified
because:
.IP " *" 3
Implementations may desire mo' descriptizzle prompts than dem used
on oldschool implementations.
.LP
.IP " *" 3
Since tha oldschool prompt strings do not terminizzle wit <newline>s,
there is no portable way fo' another program to
interact wit tha promptz of dis utilitizzle via pipes.
.LP
.LP
Therefore, a application rockin dis promptin option relies on the
system ta provide da most thugged-out suitable dialog directly wit the
user, based on tha general guidelines specified.
.LP
Da \fB-name\fP \fIfile\fP operand was chizzled ta use tha shell pattern
matchin notation so dat \fIfind\fP is consistent
with other utilitizzles rockin pattern matching.
.LP
Da \fB-size\fP operand refers ta tha size of a gangbangin' file, rather than
the number of blocks it may occupy up in tha file system. The
intent is dat tha \fIst_size\fP field defined up in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001 should be used,
not tha \fIst_blocks\fP found up in oldschool implementations. There
are at least two reasons fo' this:
.IP " 1." 4
In both System V n' BSD, \fIfind\fP only uses \fIst_size\fP up in size
calculations fo' tha operandz specified by dis volume of
IEEE\ Std\ 1003.1-2001. (BSD uses \fIst_blocks\fP only when processing
the \fB-ls\fP primary.)
.LP
.IP " 2." 4
Users probably be thinkin of file size up in termz of bytes, which be also
the unit used by tha \fIls\fP utilitizzle fo' tha output from tha \fB-l\fP
option. I aint talkin' bout chicken n' gravy biatch. (In both System V n' BSD, \fIls\fP uses \fIst_size\fP for
the \fB-l\fP option size field n' uses \fIst_blocks\fP fo' tha \fIls\fP
\fB-s\fP calculations. This volume of IEEE\ Std\ 1003.1-2001 do
not specify \fIls\fP \fB-s\fP.)
.LP
.LP
Da descriptionz of \fB-atime\fP, \fB-ctime\fP, n' \fB-mtime\fP were
changed from tha SVID description of \fIn\fP "days''
to "24-hour periods". Da description be also different up in terms of
the exact timeframe fo' tha \fIn\fP case (\fIversus\fP the
\fI+n\fP or \fI-n\fP) yo, but it matches all known oldschool implementations.
It refers ta one 86400 second period up in tha past, not
any time from tha beginnin of dat period ta tha current time. For
example, \fB-atime\fP 3 is legit if tha file was accessed any
time up in tha period from 72 minutes ta 48 minutes ago.
.LP
Oldschool implementations do not modify \fB"{}"\fP when it appears
as a substrin of a \fB-exec\fP or \fB-ok\fP
\fIutility_name\fP or argument string. There done been a shitload of user
requests fo' dis extension, so dis volume of
IEEE\ Std\ 1003.1-2001 allows tha desired behavior fo' realz. At least one recent
implementation do support dis feature yo, but
encountered nuff muthafuckin problems up in managin memory allocation n' dealing
with multiple occurrencez of \fB"{}"\fP up in a strang while
it was bein pimped, so it aint yet required behavior.
.LP
Assumin tha presence of \fB-print\fP was added ta erect a historical
pitfall dat plagues novice users, it is entirely
upwards-compatible from tha oldschool System V \fIfind\fP utility.
In its simplest form ( \fIfind\fP \fIdirectory\fP), it could
be trippin wit tha oldschool BSD fast \fIfind\fP. Da BSD pimpers
agreed dat addin \fB-print\fP as a thugged-out default expression
was tha erect decision n' have added tha fast \fIfind\fP functionality
within a freshly smoked up utilitizzle called \fIlocate\fP.
.LP
Historically, tha \fB-L\fP option was implemented rockin tha primary
\fB-follow\fP. Da \fB-H\fP n' \fB-L\fP options were
added fo' two reasons. First, they offer a gangbangin' finer granularitizzle of control
and consistency wit other programs dat strutt file
hierarchies. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. Second, tha \fB-follow\fP primary always evaluated to
true fo' realz. As they was historically straight-up global variablez that
took effect before tha traversal fuckin started, some valid expressions had
unexpected thangs up in dis biatch fo' realz. An example is tha expression \fB-print\fP
\fB-o\fP \fB-follow\fP. Because \fB-print\fP always evaluates ta true,
the standard order of evaluation implies that
\fB-follow\fP would never be evaluated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This was never tha case yo. Historical
practice fo' tha \fB-follow\fP primary, however, is
not consistent. Right back up in yo muthafuckin ass. Some implementations always follow symbolic links
on tha command line whether \fB-follow\fP is specified or not.
Others follow symbolic links on tha command line only if \fB-follow\fP
is specified. Y'all KNOW dat shit, muthafucka! Both behaviors is provided by tha \fB-H\fP
and \fB-L\fP options yo, but scripts rockin tha current \fB-follow\fP
primary would be fucked up if tha \fB-follow\fP option is
specified ta work either way.
.LP
Since tha \fB-L\fP option resolves all symbolic links n' tha \fB-type\fP
\fIl\fP primary is legit fo' symbolic links that
still exist afta symbolic links done been resolved, tha command:
.sp
.RS
.nf

\fBfind -L . -type l
\fP
.fi
.RE
.LP
prints a list of symbolic links reachable from tha current directory
that do not resolve ta accessible files.
.LP
A feature of SVR4z \fIfind\fP utilitizzle was tha \fB-exec\fP primary's
\fB+\fP terminator. Shiiit, dis aint no joke. This allowed filenames containing
special charactas (especially <newline>s) ta be grouped together
without tha problems dat occur if such filenames is piped
to \fIxargs\fP. Other implementations have added other ways ta get
around dis problem,
notably a \fB-print0\fP primary dat freestyled filenames wit a null byte
terminator. Shiiit, dis aint no joke. This was considered here yo, but not adopted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Using
a null terminator meant dat any utilitizzle dat was goin ta process
\fIfind\fPz \fB-print0\fP output had ta add a freshly smoked up option to
parse tha null terminators it would now be reading.
.LP
Da \fB"-exec ... {} +"\fP syntax adopted was a result of IEEE PASC
Interpretation 1003.2 #210. Well shiiiit, it should be noted dat this
is a incompatible chizzle ta tha ISO/IEC\ 9899:1999 standard. Y'all KNOW dat shit, muthafucka! For
example, tha followin command prints all filez wit a
\fB'-'\fP afta they name if they is regular files, n' a \fB'+'\fP
otherwise:
.sp
.RS
.nf

\fBfind / -type f -exec echo {} - ';' -o -exec echo {} + ';'
\fP
.fi
.RE
.LP
Da chizzle invalidates usage like all dis bullshit. Even though tha previous standard
stated dat dis usage would work, up in practice many
did not support it n' tha standard pimpers felt it betta ta now
state dat dis was not allowable.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIQuoting\fP, \fIPattern Matching
Notation\fP, \fISpecial Built-In Utilities\fP, \fIchmod\fP(), \fIpax\fP,
\fIsh\fP, \fItest\fP, tha System Interfaces volume of IEEE\ Std\ 1003.1-2001,
\fIgetgrgid\fP(), \fIgetpwuid\fP(), \fIstat\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
