.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "EX" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" ex 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
ex \- text editor
.SH SYNOPSIS
.LP
\fBex\fP \fB[\fP\fB-rR\fP\fB][\fP\fB-s | -v\fP\fB][\fP\fB-c\fP
\fIcommand\fP\fB][\fP\fB-t\fP \fItagstring\fP\fB][\fP\fB-w\fP \fIsize\fP\fB][\fP\fIfile\fP
\fB\&...\fP\fB]\fP\fB\fP
.SH DESCRIPTION
.LP
Da \fIex\fP utilitizzle be a line-oriented text editor. Shiiit, dis aint no joke. There is two
other modez of tha editor-open n' visual-in which
screen-oriented editin be available. This is busted lyrics bout mo' fully
by tha \fIex\fP \fBopen\fP n' \fBvisual\fP commandz n' in
\fIvi\fP .
.LP
This section uses tha term \fIedit buffer\fP ta describe tha current
workin text. No specific implementation is implied by
this term fo' realz. All editin chizzlez is performed on tha edit buffer, and
no chizzlez ta it shall affect any file until a editor command
writes tha file.
.LP
Certain terminals aint gots all tha capabilitizzles necessary ta support
the complete \fIex\fP definition, like fuckin the
full-screen editin commandz ( \fIvisual mode\fP or \fIopen mode\fP).
When these commandz cannot be supported on such terminals,
this condizzle shall not produce a error message like fuckin "not an
editor command" or report a syntax error. Shiiit, dis aint no joke. Da implementation
may either accept tha commandz n' produce thangs up in dis biatch on tha screen that
are tha result of a unsuccessful attempt ta hook up the
requirementz of dis volume of IEEE\ Std\ 1003.1-2001 or report an
error describin tha terminal-related deficiency.
.SH OPTIONS
.LP
Da \fIex\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-c\ \fP \fIcommand\fP
Specify a initial command ta be executed up in tha straight-up original gangsta edit buffer
loaded from a existin file (see tha EXTENDED DESCRIPTION
section). Implementations may support mo' than a single \fB-c\fP
option. I aint talkin' bout chicken n' gravy biatch. In such implementations, tha specified commandz shall be
executed up in tha order specified on tha command line.
.TP 7
\fB-r\fP
Recover tha named filez (see tha EXTENDED DESCRIPTION section). Recovery
information fo' a gangbangin' file shall be saved durin a editor
or system crash (for example, when tha editor is terminated by a signal
which tha editor can catch), or afta tha use of an
\fIex\fP \fBpreserve\fP command. Y'all KNOW dat shit, muthafucka! 
.LP
A \fIcrash\fP up in dis context be a unexpected failure of tha system
or utilitizzle dat requires restartin tha failed system or
utilitizzle fo' realz. A system crash implies dat any utilitizzles hustlin at the
time also crash. In tha case of a editor or system crash, the
number of chizzlez ta tha edit buffer (since da most thugged-out recent \fBpreserve\fP
command) dat is ghon be recovered is unspecified.
.LP
If no \fIfile\fP operandz is given n' tha \fB-t\fP option is not
specified, all other options, tha \fIEXINIT\fP variable,
and any \fB.exrc\fP filez shall be ignored; a list of all recoverable
filez available ta tha invokin user shall be written, and
the editor shall exit normally without further action.
.TP 7
\fB-R\fP
Set \fBreadonly\fP edit option.
.TP 7
\fB-s\fP
Prepare \fIex\fP fo' batch use by takin tha followin actions: 
.RS
.IP " *" 3
Suppress freestylin prompts n' shiznital (but not diagnostic) lyrics.
.LP
.IP " *" 3
Ignore tha value of \fITERM\fP n' any implementation default terminal
type n' assume tha terminal be a type incapable of
supportin open or visual modes; peep tha \fBvisual\fP command and
the description of \fIvi\fP .
.LP
.IP " *" 3
Suppress tha use of tha \fIEXINIT\fP environment variable n' the
readin of any \fB.exrc\fP file; peep tha EXTENDED
DESCRIPTION section.
.LP
.IP " *" 3
Suppress autoindentation, ignorin tha value of tha \fBautoindent\fP
edit option.
.LP
.RE
.TP 7
\fB-t\ \fP \fItagstring\fP
Edit tha file containin tha specified \fItagstring\fP; peep \fIctags\fP
\&. Da tags feature
represented by \fB-t\fP \fItagstring\fP n' tha \fBtag\fP command
is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Well shiiiit, it shall be provided on any system dat also
provides a cold-ass lil conformin implementation of \fIctags\fP; otherwise, the
use of \fB-t\fP
produces undefined thangs up in dis biatch. On any system, it shall be a error to
specify mo' than a single \fB-t\fP option.
.TP 7
\fB-v\fP
Begin up in visual mode (see \fIvi\fP ).
.TP 7
\fB-w\ \fP \fIsize\fP
Set tha value of tha \fIwindow\fP editor option ta \fIsize\fP.
.sp
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIfile\fP
A pathname of a gangbangin' file ta be edited.
.sp
.SH STDIN
.LP
Da standard input consistz of a seriez of commandz n' input text,
as busted lyrics bout up in tha EXTENDED DESCRIPTION section. I aint talkin' bout chicken n' gravy biatch. The
implementation may limit each line of standard input ta a length of
{LINE_MAX}.
.LP
If tha standard input aint a terminal device, it shall be as if
the \fB-s\fP option had been specified.
.LP
If a read from tha standard input returns a error, or if tha editor
detects a end-of-file condizzle from tha standard input,
it shall be equivalent ta a SIGHUP asynchronous event.
.SH INPUT FILES
.LP
Input filez shall be text filez or filez dat would be text files
except fo' a incomplete last line dat aint longer than
{LINE_MAX}-1 bytes up in length n' gotz nuff no NUL characters. By default,
any incomplete last line shall be treated as if it had a
trailin <newline>. Da editin of other formz of filez may optionally
be allowed by \fIex\fP implementations.
.LP
Da \fB.exrc\fP filez n' source filez shall be text filez consisting
of \fIex\fP commands; peep tha EXTENDED DESCRIPTION
section.
.LP
By default, tha editor shall read lines from tha filez ta be edited
without interpretin any of dem lines as any form of
editor command.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIex\fP:
.TP 7
\fICOLUMNS\fP
Override tha system-selected horizontal screen size. Right back up in yo muthafuckin ass. See tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 8, Environment
Variablez fo' valid joints n' thangs up in dis biatch when it is unset or null.
.TP 7
\fIEXINIT\fP
Determine a list of \fIex\fP commandz dat is executed on editor
start-up. Right back up in yo muthafuckin ass. See tha EXTENDED DESCRIPTION section fo' more
detailz of tha initialization phase.
.TP 7
\fIHOME\fP
Determine a pathname of a gangbangin' finger-lickin' directory dat shall be searched fo' an
editor start-up file named \fB.exrc\fP; peep tha EXTENDED
DESCRIPTION section.
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements within regular
expressions.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files), the
behavior of characta classes within regular expressions, the
classification of charactas as uppercase or lowercase letters, the
case conversion of letters, n' tha detection of word
boundaries.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fILINES\fP
Override tha system-selected vertical screen size, used as tha number
of lines up in a screenful n' tha vertical screen size in
visual mode. Right back up in yo muthafuckin ass. See tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Chapta 8,
Environment Variablez fo' valid joints n' thangs up in dis biatch when it is unset
or null.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fIPATH\fP
Determine tha search path fo' tha shell command specified up in tha \fIex\fP
editor commandz \fB!\fP, \fBshell\fP, \fBread\fP,
and \fBwrite\fP, n' tha open n' visual mode command \fB!\fP; see
the description of command search n' execution up in \fICommand Search
and Execution\fP .
.TP 7
\fISHELL\fP
Determine tha preferred command line interpreta fo' use as tha default
value of tha \fBshell\fP edit option.
.TP 7
\fITERM\fP
Determine tha name of tha terminal type. If dis variable is unset
or null, a unspecified default terminal type shall be
used.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Da followin term is used up in dis n' followin sections ta specify
command n' asynchronous event actions:
.TP 7
\fIcomplete\ write\fP
.sp
A complete write be a write of tha entire contentz of tha edit buffer
to a gangbangin' file of a type other than a terminal device, or the
savin of tha edit buffer caused by tha user executin tha \fIex\fP
\fBpreserve\fP command. Y'all KNOW dat shit, muthafucka! Freestylin tha contentz of tha edit
buffer ta a temporary file dat is ghon be removed when tha editor exits
shall not be considered a cold-ass lil complete write.
.sp
.LP
Da followin actions shall be taken upon receipt of signals:
.TP 7
SIGINT
If tha standard input aint a terminal device, \fIex\fP shall not
write tha file or return ta command or text input mode, and
shall exit wit a non-zero exit status. 
.LP
Otherwise, if executin a open or visual text input mode command,
\fIex\fP up in receipt of SIGINT shall behave identically to
its receipt of tha <ESC> character.
.LP
Otherwise:
.RS
.IP " 1." 4
If executin a \fIex\fP text input mode command, all input lines
that done been straight-up entered shall be resolved tha fuck into the
edit buffer, n' any partially entered line shall be discarded.
.LP
.IP " 2." 4
If there be a cold-ass lil currently executin command, it shall be aborted and
a message displayed. Y'all KNOW dat shit, muthafucka! Unless otherwise specified by the
\fIex\fP or \fIvi\fP command descriptions, it is unspecified whether
any lines modified by the
executin command step tha fuck up modified, or as they was before bein modified
by tha executin command, up in tha buffer.
.LP
If tha currently executin command was a motion command, its associated
command shall be discarded.
.LP
.IP " 3." 4
If up in open or visual command mode, tha terminal shall be alerted.
.LP
.IP " 4." 4
Da editor shall then return ta command mode.
.LP
.RE
.TP 7
SIGCONT
Da screen shall be refreshed if up in open or visual mode.
.TP 7
SIGHUP
If tha edit buffer has been modified since tha last complete write,
\fIex\fP shall attempt ta save tha edit buffer so dat it
can be recovered lata rockin tha \fB-r\fP option or tha \fIex\fP \fBrecover\fP
command. Y'all KNOW dat shit, muthafucka! Da editor shall not write tha file or
return ta command or text input mode, n' shall terminizzle wit a non-zero
exit status.
.TP 7
SIGTERM
Refer ta SIGHUP.
.sp
.LP
Da action taken fo' all other signals is unspecified.
.SH STDOUT
.LP
Da standard output shall be used only fo' freestylin prompts ta the
user, fo' shiznital lyrics, n' fo' freestylin lines from
the file.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
Da output from \fIex\fP shall be text files.
.SH EXTENDED DESCRIPTION
.LP
Only tha \fIex\fP mode of tha editor is busted lyrics bout up in dis section.
See \fIvi\fP fo' additionizzle editing
capabilitizzles available up in \fIex\fP.
.LP
When a error occurs, \fIex\fP shall write a message. If tha terminal
supports a standout mode (like fuckin inverse vizzle), the
message shall be freestyled up in standout mode. If tha terminal do not
support a standout mode, n' tha edit option \fBerrorbells\fP
is set, a alert action shall precede tha error message.
.LP
By default, \fIex\fP shall start up in command mode, which shall be indicated
by a \fB:\fP prompt; peep tha \fBprompt\fP command.
Text input mode can be entered by tha \fBappend\fP, \fBinsert\fP,
or \fBchange\fP commands; it can be exited (and command mode
re-entered) by typin a period ( \fB'.'\fP ) ridin' solo all up in tha beginning
of a line.
.SS Initialization up in ex n' vi
.LP
Da followin symbols is used up in dis n' followin sections ta specify
locations up in tha edit buffer:
.TP 7
\fIalternate\ and\ current\ pathnames\fP
.sp
Two pathnames, named \fIcurrent\fP n' \fIalternate\fP, is maintained
by tha editor fo' realz. Any \fIex\fP commandz dat take filenames
as arguments shall set dem as bigs up: 
.RS
.IP " 1." 4
If a \fIfile\fP argument is specified ta tha \fIex\fP \fBedit\fP,
\fBex\fP, or \fBrecover\fP commands, or if a \fIex\fP
\fBtag\fP command replaces tha contentz of tha edit buffer.
.RS
.IP " a." 4
If tha command replaces tha contentz of tha edit buffer, tha current
pathname shall be set ta tha \fIfile\fP argument or the
file indicated by tha tag, n' tha alternate pathname shall be set
to tha previous value of tha current pathname.
.LP
.IP " b." 4
Otherwise, tha alternate pathname shall be set ta tha \fIfile\fP argument.
.LP
.RE
.LP
.IP " 2." 4
If a \fIfile\fP argument is specified ta tha \fIex\fP \fBnext\fP command:
.RS
.IP " a." 4
If tha command replaces tha contentz of tha edit buffer, tha current
pathname shall be set ta tha straight-up original gangsta \fIfile\fP argument,
and tha alternate pathname shall be set ta tha previous value of the
current pathname.
.LP
.RE
.LP
.IP " 3." 4
If a \fIfile\fP argument is specified ta tha \fIex\fP \fBfile\fP command,
the current pathname shall be set ta the
\fIfile\fP argument, n' tha alternate pathname shall be set ta the
previous value of tha current pathname.
.LP
.IP " 4." 4
If a \fIfile\fP argument is specified ta tha \fIex\fP \fBread\fP and
\fBwrite\fP commandz (that is, when readin or writing
a file, n' not ta tha program named by tha \fBshell\fP edit option),
or a \fIfile\fP argument is specified ta tha \fIex\fP
\fBxit\fP command:
.RS
.IP " a." 4
If tha current pathname has no value, tha current pathname shall be
set ta tha \fIfile\fP argument.
.LP
.IP " b." 4
Otherwise, tha alternate pathname shall be set ta tha \fIfile\fP argument.
.LP
.RE
.LP
.RE
.LP
If tha alternate pathname is set ta tha previous value of tha current
pathname when tha current pathname had no previous value,
then tha alternate pathname shall have no value as a result.
.TP 7
\fIcurrent\ line\fP
.sp
Da line of tha edit buffer referenced by tha cursor. Shiiit, dis aint no joke. Each command
description specifies tha current line afta tha command has
been executed, as tha \fIcurrent line value\fP. When tha edit buffer
gotz nuff no lines, tha current line shall be zero; peep Addressing
in ex .
.TP 7
\fIcurrent\ column\fP
.sp
Da current display line column occupied by tha cursor. Shiiit, dis aint no joke. (Da columns
shall be numbered beginnin at 1.) Each command description
specifies tha current column afta tha command has been executed,
as tha \fIcurrent column\fP value. This column be an
\fIideal\fP column dat is remembered over tha gametime of tha editor.
Da actual display line column upon which tha cursor rests
may be different from tha current column; peep tha cursor positioning
rap up in \fICommand
Descriptions up in vi\fP .
.TP 7
\fIset\ to\ non-<blank>\fP
.sp
A description fo' a cold-ass lil current column value, meanin dat tha current
column shall be set ta tha last display line column on which is
displayed any part of tha straight-up original gangsta non- <blank> of tha line. If tha line
has no non- <blank> non- <newline>s, the
current column shall be set ta tha last display line column on which
is displayed any part of tha last non- <newline> up in the
line. If tha line is empty, tha current column shall be set ta column
posizzle 1.
.sp
.LP
Da length of lines up in tha edit buffer may be limited ta {LINE_MAX}
bytes. In open n' visual mode, tha length of lines up in the
edit buffer may be limited ta tha number of charactas dat will fit
in tha display. If either limit is exceeded durin editing, an
error message shall be written. I aint talkin' bout chicken n' gravy biatch. If either limit is exceeded by a line
read up in from a gangbangin' file, a error message shall be freestyled and
the edit session may be terminated.
.LP
If tha editor stops hustlin cuz of any reason other than a user command,
and tha edit buffer has been modified since tha last
complete write, it shall be equivalent ta a SIGHUP asynchronous event.
If tha system crashes, it shall be equivalent ta a SIGHUP
asynchronous event.
.LP
Durin initialization (before tha straight-up original gangsta file is copied tha fuck into tha edit
buffer or any user commandz from tha terminal are
processed) tha followin shall occur:
.IP " 1." 4
If tha environment variable \fIEXINIT\fP is set, tha editor shall
execute tha \fIex\fP commandz contained up in that
variable.
.LP
.IP " 2." 4
If tha \fIEXINIT\fP variable aint set, n' all of tha following
are true:
.RS
.IP " a." 4
Da \fIHOME\fP environment variable aint null n' not empty.
.LP
.IP " b." 4
Da file \fB.exrc\fP up in tha directory referred ta by tha \fIHOME\fP
environment variable:
.RS
.IP " 1." 4
Exists
.LP
.IP " 2." 4
Is owned by tha same user ID as tha real user ID of tha process or
the process has appropriate privileges
.LP
.IP " 3." 4
Is not writable by mah playas other than tha baller
.LP
.RE
.LP
.RE
.LP
the editor shall execute tha \fIex\fP commandz contained up in dat file.
.LP
.IP " 3." 4
If n' only if all of tha followin is true:
.RS
.IP " a." 4
Da current directory aint referred ta by tha \fIHOME\fP environment
variable.
.LP
.IP " b." 4
A command up in tha \fIEXINIT\fP environment variable or a cold-ass lil command in
the \fB.exrc\fP file up in tha directory referred ta by the
\fIHOME\fP environment variable sets tha editor option \fBexrc\fP.
.LP
.IP " c." 4
Da \fB.exrc\fP file up in tha current directory:
.RS
.IP " 1." 4
Exists
.LP
.IP " 2." 4
Is owned by tha same user ID as tha real user ID of tha process, or
by one of a set of implementation-defined user IDs
.LP
.IP " 3." 4
Is not writable by mah playas other than tha baller
.LP
.RE
.LP
.RE
.LP
the editor shall attempt ta execute tha \fIex\fP commandz contained
in dat file.
.LP
.LP
Lines up in any \fB.exrc\fP file dat is blank lines shall be ignored.
If any \fB.exrc\fP file exists yo, but aint read for
ballershizzle or permission reasons, it shall be a error.
.LP
Afta tha \fIEXINIT\fP variable n' any \fB.exrc\fP filez is processed,
the first file specified by tha user shall be edited,
as bigs up:
.IP " 1." 4
If tha user specified tha \fB-t\fP option, tha effect shall be as
if tha \fIex\fP \fBtag\fP command was entered wit the
specified argument, wit tha exception dat if tag processin do
not result up in a gangbangin' file ta edit, tha effect shall be as busted lyrics about
in step 3. below.
.LP
.IP " 2." 4
Otherwise, if tha user specified any command line \fIfile\fP arguments,
the effect shall be as if tha \fIex\fP \fBedit\fP
command was entered wit tha straight-up original gangsta of dem arguments as its \fIfile\fP
argument.
.LP
.IP " 3." 4
Otherwise, tha effect shall be as if tha \fIex\fP \fBedit\fP command
was entered wit a nonexistent filename as its
\fIfile\fP argument. Well shiiiit, it is unspecified whether dis action shall set
the current pathname. In a implementation where dis action
does not set tha current pathname, any editor command rockin tha current
pathname shall fail until a editor command sets the
current pathname.
.LP
.LP
If tha \fB-r\fP option was specified, tha last time a gangbangin' file up in the
initial argument list or a gangbangin' file specified by tha \fB-t\fP
option is edited, if recovery shiznit has previously been saved
about it, dat shiznit shall be recovered n' tha editor
shall behave as if tha contentz of tha edit buffer have already been
modified. Y'all KNOW dat shit, muthafucka! If there be multiple instancez of tha file ta be
recovered, tha one most recently saved shall be recovered, n' an
informationizzle message dat there be previous versionz of the
file dat can be recovered shall be written. I aint talkin' bout chicken n' gravy biatch. If no recovery shiznit
on some gangbangin' file be available, a shiznital message ta this
effect shall be written, n' tha edit shall proceed as usual.
.LP
If tha \fB-c\fP option was specified, tha last time a gangbangin' file dat already
exists (includin a gangbangin' file dat might not exist but for
which recovery shiznit be available, when tha \fB-r\fP option
is specified) replaces or initializes tha contentz of tha edit
buffer, tha current line shall be set ta tha last line of tha edit
buffer, tha current column shall be set ta non- <blank>,
and tha \fIex\fP commandz specified wit tha \fB-c\fP option shall
be executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In dis case, tha current line n' current column
shall not be set as busted lyrics bout fo' tha command associated wit the
replacement or initialization of tha edit buffer contents.
But fuck dat shiznit yo, tha word on tha street is dat if tha \fB-t\fP option or a \fBtag\fP command be associated
with dis action, tha \fB-c\fP option commandz shall be
executed n' then tha movement ta tha tag shall be performed.
.LP
Da current argument list shall initially be set ta tha filenames
specified by tha user on tha command line. If no filenames are
specified by tha user, tha current argument list shall be empty. If
the \fB-t\fP option was specified, it is unspecified whether
any filename resultin from tag processin shall be prepended ta the
current argument list. In tha case where tha filename be added
as a prefix ta tha current argument list, tha current argument list
reference shall be set ta dat filename. In tha case where the
filename aint added as a prefix ta tha current argument list, the
current argument list reference shall logically be located
before tha straight-up original gangsta of tha filenames specified on tha command line (for
example, a subsequent \fIex\fP \fBnext\fP command shall edit
the first filename from tha command line). If tha \fB-t\fP option
was not specified, tha current argument list reference shall be
to tha straight-up original gangsta of tha filenames on tha command line.
.SS Addressin up in ex
.LP
Addressin up in \fIex\fP relates ta tha current line n' tha current
column; tha address of a line is its 1-based line number,
the address of a cold-ass lil column is its 1-based count from tha beginnin of
the line. Generally, tha current line is tha last line affected
by a cold-ass lil command. Y'all KNOW dat shit, muthafucka! Da current line number is tha address of tha current
line. In each command description, tha effect of tha command on
the current line number n' tha current column is busted lyrics about.
.LP
Addresses is constructed as bigs up:
.IP " 1." 4
Da characta \fB'.'\fP (period) shall address tha current line.
.LP
.IP " 2." 4
Da characta \fB'$'\fP shall address tha last line of tha edit buffer.
.LP
.IP " 3." 4
Da positizzle decimal number \fIn\fP shall address tha \fIn\fPth line
of tha edit buffer.
.LP
.IP " 4." 4
Da address \fB"'x"\fP refers ta tha line marked wit tha mark name
characta \fB'x'\fP, which shall be a lowercase
letta from tha portable characta set or one of tha charactas \fB'`'\fP
or \fB'"\fP . Well shiiiit, it shall be a error if tha line
that was marked aint currently present up in tha edit buffer or the
mark has not been set. Lines can be marked wit tha \fIex\fP
\fBmark\fP or \fBk\fP commands, or tha \fIvi\fP \fBm\fP command.
.LP
.IP " 5." 4
A regular expression enclosed by slashes ( \fB'/'\fP ) shall address
the first line found by searchin forwardz from tha line
followin tha current line toward tha end of tha edit buffer n' stopping
at tha straight-up original gangsta line fo' which tha line excludin the
terminatin <newline> matches tha regular expression. I aint talkin' bout chicken n' gravy biatch fo' realz. As stated in
Regular Expressions up in ex,
an address consistin of a null regular expression delimited by slashes
\fB"//"\fP shall address tha next line fo' which the
line excludin tha terminatin <newline> matches tha last regular
expression encountered. Y'all KNOW dat shit, muthafucka! In addition, tha second slash can
be omitted all up in tha end of a cold-ass lil command line. If tha \fBwrapscan\fP edit
option is set, tha search shall wrap round ta tha beginning
of tha edit buffer n' continue up ta n' includin tha current line,
so dat tha entire edit buffer is searched. Y'all KNOW dat shit, muthafucka! Within the
regular expression, tha sequence \fB"\\/"\fP shall represent a literal
slash instead of tha regular expression delimiter.
.LP
.IP " 6." 4
A regular expression enclosed up in question marks ( \fB'?'\fP ) shall
address tha straight-up original gangsta line found by searchin backwardz from
the line precedin tha current line toward tha beginnin of tha edit
buffer n' stoppin all up in tha straight-up original gangsta line fo' which tha line
excludin tha terminatin <newline> matches tha regular expression.
An address consistin of a null regular expression
delimited by question marks \fB"??"\fP shall address tha previous
line fo' which tha line excludin tha terminating
<newline> matches tha last regular expression encountered. Y'all KNOW dat shit, muthafucka! In addition,
the second question mark can be omitted all up in tha end of
a command line. If tha \fBwrapscan\fP edit option is set, tha search
shall wrap round from tha beginnin of tha edit buffer to
the end of tha edit buffer n' continue up ta n' includin tha current
line, so dat tha entire edit buffer is searched. Y'all KNOW dat shit, muthafucka! Within
the regular expression, tha sequence \fB"\\?"\fP shall represent a
literal question mark instead of tha RE delimiter.
.LP
.IP " 7." 4
A plus sign ( \fB'+'\fP ) or a minus sign ( \fB'-'\fP ) followed by
a decimal number shall address tha current line plus
or minus tha number n' shiznit fo' realz. A \fB'+'\fP or \fB'-'\fP not followed by a thugged-out decimal
number shall address tha current line plus or minus
1.
.LP
.LP
Addresses can be followed by zero or mo' address offsets, optionally
<blank>-separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Address offsets is constructed
as bigs up:
.IP " 1." 4
A \fB'+'\fP or \fB'-'\fP immediately followed by a thugged-out decimal number
shall add (subtract) tha indicated number of lines to
(from) tha address fo' realz. A \fB'+'\fP or \fB'-'\fP not followed by a thugged-out decimal
number shall add (subtract) 1 ta (from) the
address.
.LP
.IP " 2." 4
A decimal number shall add tha indicated number of lines ta tha address.
.LP
.LP
It shall not be a error fo' a intermediate address value ta be less
than zero or pimped outa than tha last line up in tha edit
buffer n' shit. Well shiiiit, it shall be a error fo' tha final address value ta be less
than zero or pimped outa than tha last line up in tha edit buffer.
.LP
Commandz take zero, one, or two addresses; peep tha descriptions of
\fI1addr\fP n' \fI2addr\fP up in Command Descriptions up in ex . If more
than tha required number of addresses is provided ta a cold-ass lil command that
requires zero addresses, it shall be a error. Shiiit, dis aint no joke. Otherwise, if more
than tha required number of addresses is provided ta a cold-ass lil command,
the addresses specified first shall be evaluated n' then discarded
until tha maximum number of valid addresses remain.
.LP
Addresses shall be separated from each other by a cold-ass lil comma ( \fB','\fP
) or a semicolon ( \fB';'\fP ). If no address is
specified before or afta a cold-ass lil comma or semicolon separator, it shall
be as if tha address of tha current line was specified before or
afta tha separator. Shiiit, dis aint no joke. In tha case of a semicolon separator, tha current
line ( \fB'.'\fP ) shall be set ta tha straight-up original gangsta address, and
only then will tha next address be calculated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This feature can be
used ta determine tha startin line fo' forwardz n' backwards
searches (see rulez 5. n' 6.).
.LP
A cement sign ( \fB'%'\fP ) shall be equivalent ta enterin tha two
addresses \fB"1,$"\fP .
.LP
Any delimitin <blank>s between addresses, address separators, or
address offsets shall be discarded.
.SS Command Line Parsin up in ex
.LP
Da followin symbol is used up in dis n' followin sections ta describe
parsin behavior:
.TP 7
\fIescape\fP
If a cold-ass lil characta is referred ta as "backslash-escaped" or " <control>-V-escaped,"
it shall mean dat tha character
acquired or lost a special meanin by virtue of bein preceded, respectively,
by a funky-ass backslash or <control>-V character n' shit. Unless
otherwise specified, tha escapin characta shall be discarded at
that time n' shall not be further considered fo' any
purpose.
.sp
.LP
Command-line parsin shall be done up in tha followin steps. For each
step, charactas already evaluated shall be ignored; that
is, tha phrase "leadin character" refers ta tha next characta that
has not yet been evaluated.
.IP " 1." 4
Leadin colon charactas shall be skipped.
.LP
.IP " 2." 4
Leadin <blank>s shall be skipped.
.LP
.IP " 3." 4
If tha leadin characta be a thugged-out double-quote character, tha characters
up ta n' includin tha next non-backslash-escaped
<newline> shall be discarded, n' any subsequent charactas shall
be parsed as a separate command.
.LP
.IP " 4." 4
Leadin charactas dat can be interpreted as addresses shall be evaluated;
see Addressin up in ex
\&.
.LP
.IP " 5." 4
Leadin <blank>s shall be skipped.
.LP
.IP " 6." 4
If tha next characta be a vertical-line characta or a <newline>:
.RS
.IP " a." 4
If tha next characta be a <newline>:
.RS
.IP " 1." 4
If \fIex\fP is up in open or visual mode, tha current line shall be set
to tha last address specified, if any.
.LP
.IP " 2." 4
Otherwise, if tha last command was terminated by a vertical-line character,
no action shall be taken; fo' example, tha command
\fB"||<newline>"\fP shall execute two implied commands, not three.
.LP
.IP " 3." 4
Otherwise, step 6.b. shall apply.
.LP
.RE
.LP
.IP " b." 4
Otherwise, tha implied command shall be tha \fBprint\fP command. Y'all KNOW dat shit, muthafucka! The
last \fB#\fP, \fBp\fP, n' \fBl\fP flags specified to
any \fIex\fP command shall be remembered n' shall apply ta dis implied
command. Y'all KNOW dat shit, muthafucka! Executin tha \fIex\fP \fBnumber\fP,
\fBprint\fP, or \fBlist\fP command shall set tha remembered flags
to \fB#\fP, nothing, n' \fBl\fP, respectively, plus any
other flags specified fo' dat execution of tha \fBnumber\fP, \fBprint\fP,
or \fBlist\fP command.
.LP
If \fIex\fP aint currently struttin a \fBglobal\fP or \fBv\fP
command, n' no address or count is specified, tha current
line shall be incremented by 1 before tha command is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If
incrementin tha current line would result up in a address past the
last line up in tha edit buffer, tha command shall fail, n' tha increment
shall not happen.
.LP
.IP " c." 4
Da <newline> or vertical-line characta shall be discarded n' any
subsequent charactas shall be parsed as a separate
command.
.LP
.RE
.LP
.IP " 7." 4
Da command name shall be comprised of tha next characta (if the
characta aint alphabetic), or tha next characta n' any
subsequent alphabetic charactas (if tha characta be alphabetic),
with tha followin exceptions:
.RS
.IP " a." 4
Commandz dat consist of any prefix of tha charactas up in tha command
name \fBdelete\fP, followed immediately by any of the
charactas \fB'l'\fP, \fB'p'\fP, \fB'+'\fP, \fB'-'\fP, or \fB'#'\fP
shall be interpreted as a \fBdelete\fP
command, followed by a <blank>, followed by tha charactas dat were
not part of tha prefix of tha \fBdelete\fP command. Y'all KNOW dat shit, muthafucka! The
maximum number of charactas shall be matched ta tha command name
\fBdelete\fP; fo' example, \fB"del"\fP shall not be treated
as \fB"de"\fP followed by tha flag \fBl\fP.
.LP
.IP " b." 4
Commandz dat consist of tha characta \fB'k'\fP, followed by a cold-ass lil character
that can be used as tha name of a mark, shall be
equivalent ta tha mark command followed by a <blank>, followed by
the characta dat followed tha \fB'k'\fP .
.LP
.IP " c." 4
Commandz dat consist of tha characta \fB's'\fP, followed by characters
that could be interpreted as valid options ta the
\fBs\fP command, shall be tha equivalent of tha \fBs\fP command, without
any pattern or replacement joints, followed by a
<blank>, followed by tha charactas afta tha \fB's'\fP .
.LP
.RE
.LP
.IP " 8." 4
Da command name shall be matched against tha possible command names,
and a cold-ass lil command name dat gotz nuff a prefix matchin the
charactas specified by tha user shall be tha executed command. Y'all KNOW dat shit, muthafucka! In
the case of commandz where tha charactas specified by tha user
could be ambiguous, tha executed command shall be as bigs up:
.TS C
center; l l l l l l l l.
\fBa\fP	\fBappend\fP	n	\fBnext\fP	\fBt\fP	t	\fB\ \fP	\fB\ \fP
\fBc\fP	\fBchange\fP	p	\fBprint\fP	\fBu\fP	undo	\fB\ \fP	\fB\ \fP
\fBch\fP	\fBchange\fP	pr	\fBprint\fP	\fBun\fP	undo	\fB\ \fP	\fB\ \fP
\fBe\fP	\fBedit\fP	r	\fBread\fP	\fBv\fP	v	\fB\ \fP	\fB\ \fP
\fBm\fP	\fBmove\fP	re	\fBread\fP	\fBw\fP	write	\fB\ \fP	\fB\ \fP
\fBma\fP	\fBmark\fP	s	\fBs\fP	\fB\ \fP	\ 	\fB\ \fP	\fB\ \fP
.TE
.LP
Implementation extensions wit names causin similar ambiguitizzles shall
not be checked fo' a match until all possible matches for
commandz specified by IEEE\ Std\ 1003.1-2001 done been checked.
.LP
.IP " 9." 4
If tha command be a \fB!\fP command, or if tha command be a \fBread\fP
command followed by zero or mo' <blank>s n' a
\fB!\fP, or if tha command be a \fBwrite\fP command followed by one
or mo' <blank>s n' a \fB!\fP, tha rest of the
command shall include all charactas up ta a non-backslash-escaped
<newline>. Da <newline> shall be discarded n' any
subsequent charactas shall be parsed as a separate \fIex\fP command.
.LP
.IP "10." 4
Otherwise, if tha command be a \fBedit\fP, \fBex\fP, or \fBnext\fP
command, or a \fBvisual\fP command while up in open or
visual mode, tha next part of tha command shall be parsed as bigs up:
.RS
.IP " a." 4
Any \fB'!'\fP characta immediately followin tha command shall be
skipped n' be part of tha command.
.LP
.IP " b." 4
Any leadin <blank>s shall be skipped n' be part of tha command.
.LP
.IP " c." 4
If tha next characta be a \fB'+'\fP, charactas up ta tha first
non-backslash-escaped <newline> or
non-backslash-escaped <blank> shall be skipped n' be part of the
command.
.LP
.IP " d." 4
Da rest of tha command shall be determined by tha steps specified
in paragraph 12.
.LP
.RE
.LP
.IP "11." 4
Otherwise, if tha command be a \fBglobal\fP, \fBopen\fP, \fBs\fP,
or \fBv\fP command, tha next part of tha command shall be
parsed as bigs up:
.RS
.IP " a." 4
Any leadin <blank>s shall be skipped n' be part of tha command.
.LP
.IP " b." 4
If tha next characta aint a alphanumeric, double-quote, <newline>,
backslash, or vertical-line character:
.RS
.IP " 1." 4
Da next characta shall be used as a cold-ass lil command delimiter.
.LP
.IP " 2." 4
If tha command be a \fBglobal\fP, \fBopen\fP, or \fBv\fP command,
charactas up ta tha straight-up original gangsta non-backslash-escaped
<newline>, or first non-backslash-escaped delimita character, shall
be skipped n' be part of tha command.
.LP
.IP " 3." 4
If tha command be a \fBs\fP command, charactas up ta tha straight-up original gangsta non-backslash-escaped
<newline>, or second
non-backslash-escaped delimita character, shall be skipped n' be
part of tha command.
.LP
.RE
.LP
.IP " c." 4
If tha command be a \fBglobal\fP or \fBv\fP command, charactas up
to tha straight-up original gangsta non-backslash-escaped <newline> shall be
skipped n' be part of tha command.
.LP
.IP " d." 4
Otherwise, tha rest of tha command shall be determined by tha steps
specified up in paragraph 12.
.LP
.RE
.LP
.IP "12." 4
Otherwise:
.RS
.IP " a." 4
If tha command was a \fBmap\fP, \fBunmap\fP, \fBabbreviate\fP, or
\fBunabbreviate\fP command, charactas up ta tha first
non- <control>-V-escaped <newline>, vertical-line, or double-quote
characta shall be skipped n' be part of the
command.
.LP
.IP " b." 4
Otherwise, charactas up ta tha straight-up original gangsta non-backslash-escaped <newline>,
vertical-line, or double-quote characta shall be
skipped n' be part of tha command.
.LP
.IP " c." 4
If tha command was a \fBappend\fP, \fBchange\fP, or \fBinsert\fP
command, n' tha step 12.b. ended at a vertical-line
character, any subsequent characters, up ta tha next non-backslash-escaped
<newline> shall be used as input text ta the
command.
.LP
.IP " d." 4
If tha command was ended by a thugged-out double-quote character, all subsequent
characters, up ta tha next non-backslash-escaped
<newline>, shall be discarded.
.LP
.IP " e." 4
Da terminatin <newline> or vertical-line characta shall be discarded
and any subsequent charactas shall be parsed as a
separate \fIex\fP command.
.LP
.RE
.LP
.LP
Command arguments shall be parsed as busted lyrics bout by tha Synopsis and
Description of each individual \fIex\fP command. Y'all KNOW dat shit, muthafucka! This
parsin shall not be <blank>-sensitive, except fo' tha \fB!\fP argument,
which must follow tha command name without
intervenin <blank>s, n' where it would otherwise be ambiguous. For
example, \fIcount\fP n' \fIflag\fP arguments need not
be <blank>-separated cuz \fB"d22p"\fP aint ambiguous yo, but \fIfile\fP
arguments ta tha \fIex\fP \fBnext\fP command
must be separated by one or mo' <blank>s fo' realz. Any <blank> up in command
arguments fo' tha \fBabbreviate\fP,
\fBunabbreviate\fP, \fBmap\fP, n' \fBunmap\fP commandz can be <control>-V-escaped,
in which case tha <blank> shall
not be used as a argument delimiter n' shiznit fo' realz. Any <blank> up in tha command argument
for any other command can be backslash-escaped, in
which case dat <blank> shall not be used as a argument delimiter.
.LP
Within command arguments fo' tha \fBabbreviate\fP, \fBunabbreviate\fP,
\fBmap\fP, n' \fBunmap\fP commands, any character
can be <control>-V-escaped. Y'all KNOW dat shit, muthafucka! All such escaped charactas shall be treated
literally n' shall have no special meaning. Within
command arguments fo' all other \fIex\fP commandz dat is not regular
expressions or replacement strings, any characta that
would otherwise gotz a special meanin can be backslash-escaped. Y'all KNOW dat shit, muthafucka! Escaped
charactas shall be treated literally, without special
meanin as shell expansion charactas or \fB'!'\fP, \fB'%'\fP, and
\fB'#'\fP expansion characters. Right back up in yo muthafuckin ass. See Regular Expressions up in ex and
Replacement Strings up in ex fo' descriptions of
command arguments dat is regular expressions or replacement strings.
.LP
Non-backslash-escaped \fB'%'\fP charactas appearin up in \fIfile\fP
arguments ta any \fIex\fP command shall be replaced by
the current pathname; unescaped \fB'#'\fP charactas shall be replaced
by tha alternate pathname. Well shiiiit, it shall be a error if
\fB'%'\fP or \fB'#'\fP charactas step tha fuck up unescaped up in a argument
and they correspondin joints is not set.
.LP
Non-backslash-escaped \fB'!'\fP charactas up in tha arguments ta either
the \fIex\fP \fB!\fP command or tha open n' visual
mode \fB!\fP command, or up in tha arguments ta tha \fIex\fP \fBread\fP
command, where tha straight-up original gangsta non- <blank> afta the
command name be a \fB'!'\fP character, or up in tha arguments ta the
\fIex\fP \fBwrite\fP command where tha command name is
followed by one or mo' <blank>s n' tha straight-up original gangsta non- <blank> after
the command name be a \fB'!'\fP character, shall
be replaced wit tha arguments ta tha last of dem three commands
as they rocked up afta all unescaped \fB'%'\fP, \fB'#'\fP,
and \fB'!'\fP charactas was replaced. Y'all KNOW dat shit, muthafucka! Well shiiiit, it shall be a error if
\fB'!'\fP charactas step tha fuck up unescaped up in one of these
commandz n' there has been no previous execution of one of these
commands.
.LP
If a error occurs durin tha parsin or execution of a \fIex\fP
command:
.IP " *" 3
An shiznital message ta dis effect shall be written. I aint talkin' bout chicken n' gravy biatch. Execution
of tha \fIex\fP command shall stop, n' tha cursor (for
example, tha current line n' column) shall not be further modified.
.LP
.IP " *" 3
If tha \fIex\fP command resulted from a map expansion, all characters
from dat map expansion shall be discarded, except as
otherwise specified by tha \fBmap\fP command.
.LP
.IP " *" 3
Otherwise, if tha \fIex\fP command resulted from tha processin of
an \fIEXINIT\fP environment variable, a \fB.exrc\fP file,
a \fB:source\fP command, a \fB-c\fP option, or a \fB+\fP \fIcommand\fP
specified ta a \fIex\fP \fBedit\fP, \fBex\fP,
\fBnext\fP, or \fBvisual\fP command, no further commandz from the
source of tha commandz shall be executed.
.LP
.IP " *" 3
Otherwise, if tha \fIex\fP command resulted from tha execution of
a buffer or a \fBglobal\fP or \fBv\fP command, no further
commandz caused by tha execution of tha buffer or tha \fBglobal\fP
or \fBv\fP command shall be executed.
.LP
.IP " *" 3
Otherwise, if tha \fIex\fP command was not terminated by a <newline>,
all charactas up ta n' includin tha next
non-backslash-escaped <newline> shall be discarded.
.LP
.SS Input Editin up in ex
.LP
Da followin symbol is used up in dis n' tha followin sections to
specify command actions:
.TP 7
\fIword\fP
In tha POSIX locale, a word consistz of a maximal sequence of letters,
digits, n' underscores, delimited at both endz by
charactas other than letters, digits, or underscores, or by tha beginning
or end of a line or tha edit buffer.
.sp
.LP
When acceptin input charactas from tha user, up in either \fIex\fP
command mode or \fIex\fP text input mode, \fIex\fP shall
enable canonical mode input processing, as defined up in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001.
.LP
If up in \fIex\fP text input mode:
.IP " 1." 4
If tha \fBnumber\fP edit option is set, \fIex\fP shall prompt for
input rockin tha line number dat would be assigned ta the
line if it is entered, up in tha format specified fo' tha \fIex\fP \fBnumber\fP
command.
.LP
.IP " 2." 4
If tha \fBautoindent\fP edit option is set, \fIex\fP shall prompt
for input rockin \fBautoindent\fP characters, as busted lyrics about
by tha \fBautoindent\fP edit option. I aint talkin' bout chicken n' gravy biatch. \fBautoindent\fP charactas shall
follow tha line number, if any.
.LP
.LP
If up in \fIex\fP command mode:
.IP " 1." 4
If tha \fBprompt\fP edit option is set, input shall be prompted for
usin a single \fB':'\fP character; otherwise, there
shall be no prompt.
.LP
.LP
Da input charactas up in tha followin sections shall have tha following
effects on tha input line.
.SS Scroll
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBeof
\fP
.fi
.RE
.sp
.LP
See tha description of tha \fIstty\fP \fIeof\fP characta up in \fIstty\fP
\&.
.LP
If up in \fIex\fP command mode:
If tha \fIeof\fP characta is tha straight-up original gangsta characta entered on tha line,
the line shall be evaluated as if it contained
two characters: a <control>-D n' a <newline>. 
.LP
Otherwise, tha \fIeof\fP characta shall have no special meaning.
.sp
.LP
If up in \fIex\fP text input mode:
If tha cursor bigs up a \fBautoindent\fP character, tha \fBautoindent\fP
charactas up in tha line shall be modified so
that a part of tha next text input characta is ghon be displayed on
the first column up in tha line afta tha previous \fBshiftwidth\fP
edit option column boundary, n' tha user shall be prompted again
for input fo' tha same line. 
.LP
Otherwise, if tha cursor bigs up a \fB'0'\fP, which bigs up a \fBautoindent\fP
character, n' tha \fB'0'\fP was the
previous text input character, tha \fB'0'\fP n' all \fBautoindent\fP
charactas up in tha line shall be discarded, n' tha user
shall be prompted again n' again n' again fo' input fo' tha same line.
.LP
Otherwise, if tha cursor bigs up a \fB'^'\fP, which bigs up a \fBautoindent\fP
character, n' tha \fB'^'\fP was the
previous text input character, tha \fB'^'\fP n' all \fBautoindent\fP
charactas up in tha line shall be discarded, n' tha user
shall be prompted again n' again n' again fo' input fo' tha same line. In addition,
the \fBautoindent\fP level fo' tha next input line shall be
derived from tha same line from which tha \fBautoindent\fP level for
the current input line was derived.
.LP
Otherwise, if there be no \fBautoindent\fP or text input characters
in tha line, tha \fIeof\fP characta shall be
discarded.
.LP
Otherwise, tha \fIeof\fP characta shall have no special meaning.
.SS <newline>
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB<newline>
.sp

<control>-J
\fP
.fi
.RE
.sp
.LP
If up in \fIex\fP command mode:
Cause tha command line ta be parsed; <control>-J shall be mapped to
the <newline> fo' this
purpose.
.LP
If up in \fIex\fP text input mode:
Terminizzle tha current line. If there be no charactas other than
\fBautoindent\fP charactas on tha line, all
charactas on tha line shall be discarded. Y'all KNOW dat shit, muthafucka! 
.LP
Prompt fo' text input on a freshly smoked up line afta tha current line. If the
\fBautoindent\fP edit option is set, a appropriate number
of \fBautoindent\fP charactas shall be added as a prefix ta tha line
as busted lyrics bout by tha \fIex\fP \fBautoindent\fP edit
option.
.SS <backslash>
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB<backslash>
\fP
.fi
.RE
.sp
.LP
Allow tha entry of a subsequent <newline> or <control>-J as a literal
character, removin any special meanin that
it may gotta tha editor durin text input mode. Da backslash character
shall be retained n' evaluated when tha command line is
parsed, or retained n' included when tha input text becomes part
of tha edit buffer.
.SS <control>-V
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB<control>-V
\fP
.fi
.RE
.sp
.LP
Allow tha entry of any subsequent characta as a literal character,
removin any special meanin dat it may gotta tha editor
durin text input mode. Da <control>-V characta shall be discarded
before tha command line is parsed or tha input text
becomes part of tha edit buffer.
.LP
If tha "literal next" functionalitizzle is performed by tha underlying
system, it is implementation-defined whether a cold-ass lil character
other than <control>-V performs dis function.
.SS <control>-W
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB<control>-W
\fP
.fi
.RE
.sp
.LP
Discard tha <control>-W, n' tha word previous ta it up in tha input
line, includin any <blank>s followin tha word
and precedin tha <control>-W. If tha "word erase" functionalitizzle is
performed by tha underlyin system, it is
implementation-defined whether a cold-ass lil characta other than <control>-W
performs dis function.
.SS Command Descriptions up in ex
.LP
Da followin symbols is used up in dis section ta represent command
modifiers. Right back up in yo muthafuckin ass. Some of these modifiers can be omitted, up in which
case tha specified defaults shall be used.
.TP 7
\fI1addr\fP
A single line address, given up in any of tha forms busted lyrics bout up in Addressing
in ex ; tha default
shall be tha current line ( \fB'.'\fP ), unless otherwise specified.
.LP
If tha line address is zero, it shall be a error, unless otherwise
specified up in tha followin command descriptions.
.LP
If tha edit buffer is empty, n' tha address is specified wit a cold-ass lil command
other than \fB=\fP, \fBappend\fP, \fBinsert\fP,
\fBopen\fP, \fBput\fP, \fBread\fP, or \fBvisual\fP, or tha address
is not zero, it shall be a error.
.TP 7
\fI2addr\fP
Two addresses specifyin a inclusive range of lines. If no addresses
are specified, tha default fo' \fI2addr\fP shall be the
current line only ( \fB".,."\fP ), unless otherwise specified up in the
followin command descriptions. If one address is
specified, \fI2addr\fP shall specify dat line only, unless otherwise
specified up in tha followin command descriptions. 
.LP
It shall be a error if tha straight-up original gangsta address is pimped outa than tha second
address.
.LP
If tha edit buffer is empty, n' tha two addresses is specified with
a command other than tha \fB!\fP, \fBwrite\fP,
\fBwq\fP, or \fBxit\fP commands, or either address aint zero, it
shall be a error.
.TP 7
\fIcount\fP
A positizzle decimal number n' shit. If \fIcount\fP is specified, it shall be
equivalent ta specifyin a additionizzle address ta the
command, unless otherwise specified by tha followin command descriptions.
Da additionizzle address shall be equal ta tha last
address specified ta tha command (either explicitly or by default)
plus \fIcount\fP-1. 
.LP
If dis would result up in a address pimped outa than tha last line of the
edit buffer, it shall be erected ta equal tha last line
of tha edit buffer.
.TP 7
\fIflags\fP
One or mo' of tha charactas \fB'+'\fP, \fB'-'\fP, \fB'#'\fP,
\fB'p'\fP, or \fB'l'\fP (ell). Da flag
charactas can be <blank>-separated, n' up in any order or combination.
Da charactas \fB'#'\fP, \fB'p'\fP, and
\fB'l'\fP shall cause lines ta be freestyled up in tha format specified
by tha \fBprint\fP command wit tha specified \fIflags\fP. 
.LP
Da lines ta be freestyled is as bigs up:
.RS
.IP " 1." 4
All edit buffer lines freestyled durin tha execution of tha \fIex\fP
\fB&\fP, \fB~\fP, \fBlist\fP, \fBnumber\fP,
\fBopen\fP, \fBprint\fP, \fBs\fP, \fBvisual\fP, n' \fBz\fP commands
shall be freestyled as specified by \fIflags\fP.
.LP
.IP " 2." 4
Afta tha completion of a \fIex\fP command wit a gangbangin' flag as a argument,
the current line shall be freestyled as specified by
\fIflags\fP, unless tha current line was tha last line freestyled by
the command.
.LP
.RE
.LP
Da charactas \fB'+'\fP n' \fB'-'\fP cause tha value of tha current
line afta tha execution of tha \fIex\fP command to
be adjusted by tha offset address as busted lyrics bout up in Addressin up in ex
\&. This adjustment shall occur
before tha current line is freestyled as busted lyrics bout up in 2. above.
.LP
Da default fo' \fIflags\fP shall be none.
.TP 7
\fIbuffer\fP
One of a fuckin shitload of named areas fo' holdin text. Da named buffers
are specified by tha alphanumeric charactaz of tha POSIX
locale. There shall also be one "unnamed" buffer n' shit. When no buffer is
specified fo' editor commandz dat bust a funky-ass buffer, tha unnamed
buffer shall be used. Y'all KNOW dat shit, muthafucka! Commandz dat store text tha fuck into buffers shall
store tha text as dat shiznit was before tha command took effect, and
shall store text occurrin earlier up in tha file before text occurring
lata up in tha file, regardless of how tha fuck tha text region was
specified. Y'all KNOW dat shit, muthafucka! Commandz dat store text tha fuck into buffers shall store tha text
into tha unnamed buffer as well as any specified buffer n' shit. 
.LP
In \fIex\fP commands, buffer names is specified as tha name by itself.
In open or visual mode commandz tha name is preceded by
a double quote ( \fB' )'\fP character.
.LP
If tha specified buffer name be a uppercase character, n' tha buffer
contents is ta be modified, tha buffer shall be appended
to rather than bein overwritten. I aint talkin' bout chicken n' gravy biatch. If tha buffer aint bein modified,
specifyin tha buffer name up in lowercase n' uppercase shall
have identical thangs up in dis biatch.
.LP
There shall also be buffers named by tha numbers 1 all up in 9. In open
and visual mode, if a region of text includin characters
from mo' than a single line is bein modified by tha \fIvi\fP \fBc\fP
or \fBd\fP commands,
the motion characta associated wit tha \fBc\fP or \fBd\fP commands
specifies dat tha buffer text shall be up in line mode, or the
commandz \fB%\fP, \fB`\fP, \fB/\fP, \fB?\fP, \fB(\fP, \fB)\fP, \fBN\fP,
\fBn\fP, \fB{\fP, or \fB}\fP is used ta define a
region of text fo' tha \fBc\fP or \fBd\fP commands, tha contents of
buffers 1 all up in 8 shall be moved tha fuck into tha buffer named by
the next numerically pimped outa value, tha contentz of buffer 9 shall
be discarded, n' tha region of text shall be copied tha fuck into buffer
1. This shall be up in addizzle ta copyin tha text tha fuck into a user-specified
buffer or unnamed buffer, or both. Numeric buffers can be
specified as a source buffer fo' open n' visual mode commands; however,
specifyin a numeric buffer as tha write target of a open
or visual mode command shall have unspecified thangs up in dis biatch.
.LP
Da text of each buffer shall have tha characteristic of bein in
either line or characta mode fo' realz. Appendin text ta a non-empty
buffer shall set tha mode ta match tha characteristic of tha text
bein appended. Y'all KNOW dat shit, muthafucka! Appendin text ta a funky-ass buffer shall cause the
creation of at least one additionizzle line up in tha buffer n' shiznit fo' realz. All text stored
into buffers by \fIex\fP commandz shall be up in line mode.
Da \fIex\fP commandz dat use buffers as tha source of text specify
individually how tha fuck bufferz of different modes is handled. Y'all KNOW dat shit, muthafucka! Each
open or visual mode command dat uses buffers fo' any purpose specifies
individually tha mode of tha text stored tha fuck into tha buffer
and how tha fuck bufferz of different modes is handled.
.TP 7
\fIfile\fP
Command text used ta derive a pathname. Da default shall be tha current
pathname, as defined previously, up in which case, if no
current pathname has yet been established it shall be a error, except
where specifically noted up in tha individual command
descriptions dat follow. If tha command text gotz nuff any of the
charactas \fB'~'\fP, \fB'{'\fP, \fB'['\fP,
\fB'*'\fP, \fB'?'\fP, \fB'$'\fP, \fB'`'\fP, \fB'"\fP, \fB' ,'\fP
and \fB'\\'\fP, it shall be subjected
to tha process of "shell expansions", as busted lyrics bout below; if more
than a single pathname thangs up in dis biatch n' tha command expects only
one, it shall be a error. Shiiit, dis aint no joke. 
.LP
Da process of shell expansions up in tha editor shall be done as bigs up.
Da \fIex\fP utilitizzle shall pass two arguments ta the
program named by tha shell edit option; tha straight-up original gangsta shall be \fB-c\fP,
and tha second shall be tha strang \fB"echo"\fP n' the
command text as a single argument. Da standard output n' standard
error of dat command shall replace tha command text.
.TP 7
\fB!\fP
A characta dat can be appended ta tha command name ta modify its
operation, as detailed up in tha individual command
descriptions. With tha exception of tha \fIex\fP \fBread\fP, \fBwrite\fP,
and \fB!\fP commands, tha \fB'!'\fP character
shall only act as a modifier if there be no <blank>s between it and
the command name.
.TP 7
\fIremembered\ search\ direction\fP
.sp
Da \fIvi\fP commandz \fBN\fP n' \fBn\fP begin searchin up in a gangbangin' forwards
or backwards
direction up in tha edit buffer based on a remembered search direction,
which is initially unset, n' is set by tha \fIex\fP
\fBglobal\fP, \fBv\fP, \fBs\fP, n' \fBtag\fP commands, n' tha \fIvi\fP
\fB/\fP and
\fB?\fP commands.
.sp
.SS Abbreviate
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBab\fP\fB[\fP\fIbreviate\fP\fB][\fP\fIlhs rhs\fP\fB]\fP
.fi
.RE
.sp
.LP
If \fIlhs\fP n' \fIrhs\fP is not specified, write tha current list
of abbreviations n' do not a god damn thang more.
.LP
Implementations may restrict tha set of charactas accepted up in \fIlhs\fP
or \fIrh\fP, except dat printable charactas and
<blank>s shall not be restricted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Additionizzle restrictions shall be
implementation-defined.
.LP
In both \fIlhs\fP n' \fIrhs\fP, any characta may be escaped with
a <control>-V, up in which case tha characta shall not
be used ta delimit \fIlhs\fP from \fIrhs\fP, n' tha escapin <control>-V
shall be discarded.
.LP
In open n' visual text input mode, if a non-word or <ESC> character
that aint escaped by a <control>-V character
is entered afta a word character, a cold-ass lil check shall be made fo' a set
of charactas matchin \fIlhs\fP, up in tha text input entered
durin dis command. Y'all KNOW dat shit, muthafucka! If it is found, tha effect shall be as if \fIrhs\fP
was entered instead of \fIlhs\fP.
.LP
Da set of charactas dat is checked is defined as bigs up:
.IP " 1." 4
If there be no charactas banged before tha word n' non-word or
<ESC> charactas dat triggered tha check, tha set of
charactas shall consist of tha word character.
.LP
.IP " 2." 4
If tha characta banged before tha word n' non-word or <ESC> characters
that triggered tha check be a word character,
the set of charactas shall consist of tha charactas banged immediately
before tha triggerin charactas dat is word
characters, plus tha triggerin word character.
.LP
.IP " 3." 4
If tha characta banged before tha word n' non-word or <ESC> characters
that triggered tha check aint a word
character, tha set of charactas shall consist of tha charactas that
were banged before tha triggerin charactas dat are
neither <blank>s nor word characters, plus tha triggerin word character.
.LP
.LP
It be unspecified whether tha \fIlhs\fP argument entered fo' tha \fIex\fP
\fBabbreviate\fP n' \fBunabbreviate\fP commands
is replaced up in dis fashion. I aint talkin' bout chicken n' gravy biatch. Regardless of whether or not tha replacement
occurs, tha effect of tha command shall be as if the
replacement had not occurred.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Append
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBa\fP\fB[\fP\fBppend\fP\fB][\fP\fB!\fP\fB]\fP
.fi
.RE
.sp
.LP
Enta \fIex\fP text input mode; tha input text shall be placed after
the specified line. If line zero is specified, tha text
shall be placed all up in tha beginnin of tha edit buffer.
.LP
This command shall be affected by tha \fBnumber\fP n' \fBautoindent\fP
edit options; followin tha command name with
\fB'!'\fP shall cause tha \fBautoindent\fP edit option settin to
be toggled fo' tha duration of dis command only.
.LP
\fICurrent line\fP: Set ta tha last input line; if no lines was input,
set ta tha specified line, or ta tha straight-up original gangsta line of the
edit buffer if a line of zero was specified, or zero if tha edit buffer
is empty.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Arguments
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBar\fP\fB[\fP\fIgs\fP\fB]\fP
.fi
.RE
.sp
.LP
Write tha current argument list, wit tha current argument-list entry,
if any, between \fB'['\fP n' \fB']'\fP
characters.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Chizzle
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBc\fP\fB[\fP\fBhange\fP\fB][\fP\fB!\fP\fB][\fP\fIcount\fP\fB]\fP
.fi
.RE
.sp
.LP
Enta \fIex\fP text input mode; tha input text shall replace tha specified
lines. Da specified lines shall be copied tha fuck into the
unnamed buffer, which shall become a line mode buffer.
.LP
This command shall be affected by tha \fBnumber\fP n' \fBautoindent\fP
edit options; followin tha command name with
\fB'!'\fP shall cause tha \fBautoindent\fP edit option settin to
be toggled fo' tha duration of dis command only.
.LP
\fICurrent line\fP: Set ta tha last input line; if no lines was input,
set ta tha line before tha straight-up original gangsta address, or ta the
first line of tha edit buffer if there be no lines precedin the
first address, or ta zero if tha edit buffer is empty.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Chizzle Directory
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBchd\fP\fB[\fP\fBir\fP\fB][\fP\fB!\fP\fB][\fP\fIdirectory\fP\fB]\fP\fBcd\fP\fB[\fP\fB!\fP\fB][\fP\fIdirectory\fP\fB]\fP
.fi
.RE
.sp
.LP
Change tha current hustlin directory ta \fIdirectory\fP.
.LP
If no \fIdirectory\fP argument is specified, n' tha \fIHOME\fP environment
variable is set ta a non-null n' non-empty value,
\fIdirectory\fP shall default ta tha value named up in tha \fIHOME\fP
environment variable. If tha \fIHOME\fP environment variable
is empty or is undefined, tha default value of \fIdirectory\fP is
implementation-defined.
.LP
If no \fB'!'\fP be appended ta tha command name, n' tha edit buffer
has been modified since tha last complete write, n' the
current pathname do not begin wit a \fB'/'\fP, it shall be an
error.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Copy
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBco\fP\fB[\fP\fBpy\fP\fB]\fP \fI1addr\fP \fB[\fP\fIflags\fP\fB]
[\fP\fI2addr\fP\fB]\fP \fBt\fP \fI1addr\fP \fB[\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
Copy tha specified lines afta tha specified destination line; line
zero specifies dat tha lines shall be placed at the
beginnin of tha edit buffer.
.LP
\fICurrent line\fP: Set ta tha last line copied.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Delete
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBd\fP\fB[\fP\fBelete\fP\fB][\fP\fIbuffer\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
Delete tha specified lines tha fuck into a funky-ass buffer (defaultin ta tha unnamed
buffer), which shall become a line-mode buffer.
.LP
Flags can immediately follow tha command name; peep Command Line Parsing
in ex .
.LP
\fICurrent line\fP: Set ta tha line followin tha deleted lines, or
to tha last line up in tha edit buffer if dat line is past
the end of tha edit buffer, or ta zero if tha edit buffer is empty.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Edit
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBe\fP\fB[\fP\fBdit\fP\fB][\fP\fB!\fP\fB][\fP\fB+\fP\fIcommand\fP\fB][\fP\fIfile\fP\fB]\fP\fBex\fP\fB[\fP\fB!\fP\fB][\fP\fB+\fP\fIcommand\fP\fB][\fP\fIfile\fP\fB]\fP
.fi
.RE
.sp
.LP
If no \fB'!'\fP be appended ta tha command name, n' tha edit buffer
has been modified since tha last complete write, it
shall be a error.
.LP
If \fIfile\fP is specified, replace tha current contentz of tha edit
buffer wit tha current contentz of \fIfile\fP, n' set
the current pathname ta \fIfile\fP. If \fIfile\fP aint specified,
replace tha current contentz of tha edit buffer wit the
current contentz of tha file named by tha current pathname. If for
any reason tha current contentz of tha file cannot be accessed,
the edit buffer shall be empty.
.LP
Da \fB+\fP \fIcommand\fP option shall be <blank>-delimited; <blank>s
within \fB+\fP \fIcommand\fP can be
escaped by precedin dem wit a funky-ass backslash character n' shit. Da \fB+\fP
\fIcommand\fP shall be interpreted as a \fIex\fP command
immediately afta tha contentz of tha edit buffer done been replaced
and tha current line n' column done been set.
.LP
If tha edit buffer is empty:
.LP
\fICurrent line\fP: Set ta 0.
.LP
\fICurrent column\fP: Set ta 1.
.LP
Otherwise, if executed while up in \fIex\fP command mode or if tha \fB+\fP
\fIcommand\fP argument is specified:
.LP
\fICurrent line\fP: Set ta tha last line of tha edit buffer.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.LP
Otherwise, if \fIfile\fP is omitted or thangs up in dis biatch up in tha current pathname:
.LP
\fICurrent line\fP: Set ta tha straight-up original gangsta line of tha edit buffer.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.LP
Otherwise, if \fIfile\fP is tha same ol' dirty as tha last file edited, the
line n' column shall be set as bigs up; if tha file was
previously edited, tha line n' column may be set as bigs up:
.LP
\fICurrent line\fP: Set ta tha last value held when dat file was
last edited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If dis value aint a valid line up in tha new
edit buffer, set ta tha straight-up original gangsta line of tha edit buffer.
.LP
\fICurrent column\fP: If tha current line was set ta tha last value
held when tha file was last edited, set ta tha last value
held when tha file was last edited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Otherwise, or if tha last value
is not a valid column up in tha freshly smoked up edit buffer, set ta non-
<blank>.
.LP
Otherwise:
.LP
\fICurrent line\fP: Set ta tha straight-up original gangsta line of tha edit buffer.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS File
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBf\fP\fB[\fP\fBile\fP\fB][\fP\fIfile\fP\fB]\fP
.fi
.RE
.sp
.LP
If a \fIfile\fP argument is specified, tha alternate pathname shall
be set ta tha current pathname, n' tha current pathname
shall be set ta \fIfile\fP.
.LP
Write a shiznital message. If tha file has a cold-ass lil current pathname,
it shall be included up in dis message; otherwise, tha message
shall indicate dat there is no current pathname. If tha edit buffer
gotz nuff lines, tha current line number n' tha number of
lines up in tha edit buffer shall be included up in dis message; otherwise,
the message shall indicate dat tha edit buffer is empty. If
the edit buffer has been modified since tha last complete write, this
fact shall be included up in dis message. If the
\fBreadonly\fP edit option is set, dis fact shall be included in
this message. Da message may contain other unspecified
information.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Global
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBg\fP\fB[\fP\fBlobal\fP\fB]\fP \fB/\fP\fIpattern\fP\fB/\fP \fB[\fP\fIcommands\fP\fB]
[\fP\fI2addr\fP\fB]\fP \fBv /\fP\fIpattern\fP\fB/\fP \fB[\fP\fIcommands\fP\fB]\fP
.fi
.RE
.sp
.LP
Da optionizzle \fB'!'\fP characta afta tha \fBglobal\fP command shall
be tha same as executin tha \fBv\fP command.
.LP
If \fIpattern\fP is empty (for example, \fB"//"\fP ) or not specified,
the last regular expression used up in tha editor
command shall be used as tha \fIpattern\fP. Da \fIpattern\fP can
be delimited by slashes (shown up in tha Synopsis), as well as any
non-alphanumeric or non- <blank> other than backslash, vertical line,
double quote, or <newline>.
.LP
If no lines is specified, tha lines shall default ta tha entire file.
.LP
Da \fBglobal\fP n' \fBv\fP commandz is logically two-pass operations.
First, mark tha lines within tha specified lines for
which tha line excludin tha terminatin <newline> matches ( \fBglobal\fP)
or do not match ( \fBv\fP or \fBglobal!\fP)
the specified pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Second, execute tha \fIex\fP commandz given
by \fIcommands\fP, wit tha current line ( \fB'.'\fP ) set
to each marked line. If a error occurs durin dis process, or the
contentz of tha edit buffer is replaced (for example, by the
\fIex\fP \fB:edit\fP command) a error message shall be freestyled and
no mo' commandz resultin from tha execution of dis command
shall be processed.
.LP
Multiple \fIex\fP commandz can be specified by enterin multiple commands
on a single line rockin a vertical line ta delimit
them, or one per line, by escapin each <newline> wit a funky-ass backslash.
.LP
If no commandz is specified:
.IP " 1." 4
If up in \fIex\fP command mode, it shall be as if tha \fBprint\fP command
were specified.
.LP
.IP " 2." 4
Otherwise, no command shall be executed.
.LP
.LP
For tha \fBappend\fP, \fBchange\fP, n' \fBinsert\fP commands, the
input text shall be included as part of tha command, and
the terminatin period can be omitted if tha command endz tha list
of commands. Da \fBopen\fP n' \fBvisual\fP commandz can be
specified as one of tha commands, up in which case each marked line shall
cause tha editor ta enta open or visual mode. If open or
visual mode is exited rockin tha \fIvi\fP \fBQ\fP command, tha current
line shall be set ta the
next marked line, n' open or visual mode reentered, until tha list
of marked lines is exhausted.
.LP
Da \fBglobal\fP, \fBv\fP, n' \fBundo\fP commandz cannot be used
in \fIcommands\fP. Marked lines may be deleted by commands
executed fo' lines occurrin earlier up in tha file than tha marked lines.
In dis case, no commandz shall be executed fo' tha deleted
lines.
.LP
If tha remembered search direction aint set, tha \fBglobal\fP and
\fBv\fP commandz shall set it ta forward.
.LP
Da \fBautoprint\fP n' \fBautoindent\fP edit options shall be inhibited
for tha duration of tha \fBg\fP or \fBv\fP
command.
.LP
\fICurrent line\fP: If no commandz executed, set ta tha last marked
line. Otherwise, as specified fo' tha executed \fIex\fP
commands.
.LP
\fICurrent column\fP: If no commandz is executed, set ta non- <blank>;
otherwise, as specified fo' tha individual
\fIex\fP commands.
.SS Insert
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBi\fP\fB[\fP\fBnsert\fP\fB][\fP\fB!\fP\fB]\fP
.fi
.RE
.sp
.LP
Enta \fIex\fP text input mode; tha input text shall be placed before
the specified line. If tha line is zero or 1, tha text
shall be placed all up in tha beginnin of tha edit buffer.
.LP
This command shall be affected by tha \fBnumber\fP n' \fBautoindent\fP
edit options; followin tha command name with
\fB'!'\fP shall cause tha \fBautoindent\fP edit option settin to
be toggled fo' tha duration of dis command only.
.LP
\fICurrent line\fP: Set ta tha last input line; if no lines was input,
set ta tha line before tha specified line, or ta the
first line of tha edit buffer if there be no lines precedin the
specified line, or zero if tha edit buffer is empty.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Join
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBj\fP\fB[\fP\fBoin\fP\fB][\fP\fB!\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
If \fIcount\fP is specified:
If no address was specified, tha \fBjoin\fP command shall behave as
if \fI2addr\fP was tha current line n' the
current line plus \fIcount\fP (.,. + \fIcount\fP). 
.LP
If one address was specified, tha \fBjoin\fP command shall behave
as if \fI2addr\fP was tha specified address n' the
specified address plus \fIcount\fP ( \fIaddr\fP, \fIaddr\fP + \fIcount\fP).
.LP
If two addresses was specified, tha \fBjoin\fP command shall behave
as if a additionizzle address, equal ta tha last address
plus \fIcount\fP -1 ( \fIaddr1\fP, \fIaddr2\fP, \fIaddr2\fP + \fIcount\fP
-1), was specified.
.LP
If dis would result up in a second address pimped outa than tha last line
of tha edit buffer, it shall be erected ta be equal ta the
last line of tha edit buffer.
.LP
If no \fIcount\fP is specified:
If no address was specified, tha \fBjoin\fP command shall behave as
if \fI2addr\fP was tha current line n' tha next
line (.,. +1). 
.LP
If one address was specified, tha \fBjoin\fP command shall behave
as if \fI2addr\fP was tha specified address n' tha next
line ( \fIaddr\fP, \fIaddr\fP +1).
.LP
Join tha text from tha specified lines together tha fuck into a single line,
which shall replace tha specified lines.
.LP
If a \fB'!'\fP characta be appended ta tha command name, tha \fBjoin\fP
shall be without modification of any line,
independent of tha current locale.
.LP
Otherwise, up in tha POSIX locale, set tha current line ta tha first
of tha specified lines, n' then, fo' each subsequent line,
proceed as bigs up:
.IP " 1." 4
Discard leadin <space>s from tha line ta be joined.
.LP
.IP " 2." 4
If tha line ta be joined is now empty, delete it, n' skip steps 3
all up in 5.
.LP
.IP " 3." 4
If tha current line endz up in a <blank>, or tha straight-up original gangsta characta of the
line ta be joined be a \fB')'\fP character, join
the lines without further modification.
.LP
.IP " 4." 4
If tha last characta of tha current line be a \fB'.'\fP, join the
lines wit two <space>s between em.
.LP
.IP " 5." 4
Otherwise, join tha lines wit a single <space> between em.
.LP
.LP
\fICurrent line\fP: Set ta tha straight-up original gangsta line specified.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS List
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBl\fP\fB[\fP\fBist\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
This command shall be equivalent ta tha \fIex\fP command:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBp\fP\fB[\fP\fBrint\fP\fB][\fP\fIcount\fP\fB]\fP \fBl\fP\fB[\fP\fIflags\fP\fB]\fP
.fi
.RE
.LP
See Print .
.SS Map
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBmap\fP\fB[\fP\fB!\fP\fB][\fP\fIlhs rhs\fP\fB]\fP
.fi
.RE
.sp
.LP
If \fIlhs\fP n' \fIrhs\fP is not specified:
.IP " 1." 4
If \fB'!'\fP is specified, write tha current list of text input mode
maps.
.LP
.IP " 2." 4
Otherwise, write tha current list of command mode maps.
.LP
.IP " 3." 4
Do not a god damn thang more.
.LP
.LP
Implementations may restrict tha set of charactas accepted up in \fIlhs\fP
or \fIrhs\fP, except dat printable charactas and
<blank>s shall not be restricted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Additionizzle restrictions shall be
implementation-defined. Y'all KNOW dat shit, muthafucka! In both \fIlhs\fP n' \fIrhs\fP,
any characta can be escaped wit a <control>-V, up in which case the
characta shall not be used ta delimit \fIlhs\fP from
\fIrhs\fP, n' tha escapin <control>-V shall be discarded.
.LP
If tha characta \fB'!'\fP be appended ta tha \fBmap\fP command name,
the mappin shall be effectizzle durin open or visual
text input mode rather than \fBopen\fP or \fBvisual\fP command mode.
This allows \fIlhs\fP ta have two different \fBmap\fP
definitions all up in tha same time: one fo' command mode n' one fo' text
input mode.
.LP
For command mode mappings:
When tha \fIlhs\fP is entered as any part of a \fIvi\fP command in
open or visual
mode (but not as part of tha arguments ta tha command), tha action
shall be as if tha correspondin \fIrhs\fP had been entered. Y'all KNOW dat shit, muthafucka! 
.LP
If any characta up in tha command, other than tha first, is escaped
usin a <control>-V character, dat characta shall not
be part of a match ta a \fIlhs\fP.
.LP
It be unspecified whether implementations shall support \fBmap\fP
commandz where tha \fIlhs\fP is mo' than a single character
in length, where tha straight-up original gangsta characta of tha \fIlhs\fP is printable.
.LP
If \fIlhs\fP gotz nuff mo' than one characta n' tha straight-up original gangsta character
is \fB'#'\fP, followed by a sequence of digits
correspondin ta a numbered function key, then when dis function
key is typed it shall be mapped ta \fIrhs\fP. Charactas other
than digits followin a \fB'#'\fP characta also represent tha function
key named by tha charactas up in tha \fIlhs\fP following
the \fB'#'\fP n' may be mapped ta \fIrhs\fP. Well shiiiit, it is unspecified how
function keys is named or what tha fuck function keys are
supported.
.LP
For text input mode mappings:
When tha \fIlhs\fP is entered as any part of text entered up in open
or visual text input modes, tha action shall be as
if tha correspondin \fIrhs\fP had been entered. Y'all KNOW dat shit, muthafucka! 
.LP
If any characta up in tha input text is escaped rockin a <control>-V
character, dat characta shall not be part of a match
to a \fIlhs\fP.
.LP
It be unspecified whether tha \fIlhs\fP text entered fo' subsequent
\fBmap\fP or \fBunmap\fP commandz is replaced wit the
\fIrhs\fP text fo' tha purposez of tha screen display; regardless
of whether or not tha display appears as if tha corresponding
\fIrhs\fP text was entered, tha effect of tha command shall be as
if tha \fIlhs\fP text was entered.
.LP
If only part of tha \fIlhs\fP is entered, it is unspecified how tha fuck long
the editor will wait fo' additional, possibly matching
charactas before treatin tha already entered charactas as not matching
the \fIlhs\fP.
.LP
Da \fIrhs\fP charactas shall theyselves be subject ta remapping,
unless otherwise specified by tha \fBremap\fP edit option,
except dat if tha charactas up in \fIlhs\fP occur as prefix characters
in \fIrhs\fP, dem charactas shall not be remapped.
.LP
On block-mode terminals, tha mappin need not occur immediately (for
example, it may occur afta tha terminal transmits a group
of charactas ta tha system) yo, but it shall big up tha same thangs up in dis biatch
as if it occurred immediately.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Mark
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBma\fP\fB[\fP\fBrk\fP\fB]\fP \fIcharacter
\fP\fB[\fP\fI1addr\fP\fB]\fP \fBk\fP \fIcharacter\fP
.fi
.RE
.sp
.LP
Implementations shall support \fIcharacter\fP jointz of a single lowercase
letta of tha POSIX locale n' tha characters
\fB'`'\fP n' \fB'"\fP ; support of other charactas is implementation-defined.
.LP
If executin tha \fIvi\fP \fBm\fP command, set tha specified mark
to tha current line and
1-based numbered characta referenced by tha current column, if any;
otherwise, column posizzle 1.
.LP
Otherwise, set tha specified mark ta tha specified line n' 1-based
numbered first non- <blank> non- <newline> in
the line, if any; otherwise, tha last non- <newline> up in tha line,
if any; otherwise, column posizzle 1.
.LP
Da mark shall remain associated wit tha line until tha mark is reset
or tha line is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If a thugged-out deleted line is restored by
a subsequent \fBundo\fP command, any marks previously associated with
the line, which aint been reset, shall be restored as
well fo' realz. Any use of a mark not associated wit a cold-ass lil current line up in the
edit buffer shall be a error.
.LP
Da marks \fB`\fP n' \fB'\fP shall be set as busted lyrics bout previously,
immediately before tha followin events occur up in the
editor:
.IP " 1." 4
Da use of \fB'$'\fP as a \fIex\fP address
.LP
.IP " 2." 4
Da use of a positizzle decimal number as a \fIex\fP address
.LP
.IP " 3." 4
Da use of a search command as a \fIex\fP address
.LP
.IP " 4." 4
Da use of a mark reference as a \fIex\fP address
.LP
.IP " 5." 4
Da use of tha followin open n' visual mode commands: <control>-],
\fB%\fP, \fB(\fP, \fB)\fP, \fB[\fP, \fB]\fP,
\fB{\fP, \fB}\fP
.LP
.IP " 6." 4
Da use of tha followin open n' visual mode commands: \fB'\fP, \fBG\fP,
\fBH\fP, \fBL\fP, \fBM\fP, \fBz\fP if the
current line will chizzle as a result of tha command
.LP
.IP " 7." 4
Da use of tha open n' visual mode commands: \fB/\fP, \fB?\fP, \fBN\fP,
\fB`\fP, \fBn\fP if tha current line or column
will chizzle as a result of tha command
.LP
.IP " 8." 4
Da use of tha \fIex\fP mode commands: \fBz\fP, \fBundo\fP, \fBglobal\fP,
\fBv\fP
.LP
.LP
For rulez 1., 2., 3., n' 4., tha \fB`\fP n' \fB'\fP marks shall
not be set if tha \fIex\fP command is parsed as specified
by rule 6.a. up in Command Line Parsin up in ex .
.LP
For rulez 5., 6., n' 7., tha \fB`\fP n' \fB'\fP marks shall not
be set if tha commandz is used as motion commandz up in open
and visual mode.
.LP
For rulez 1., 2., 3., 4., 5., 6., 7., n' 8., tha \fB`\fP n' \fB'\fP
marks shall not be set if tha command fails.
.LP
Da \fB`\fP n' \fB'\fP marks shall be set as busted lyrics bout previously,
each time tha contentz of tha edit buffer is replaced
(includin tha editin of tha initial buffer), if up in open or visual
mode, or if up in \fBex\fP mode n' tha edit buffer aint empty,
before any commandz or movements (includin commandz or movements
specified by tha \fB-c\fP or \fB-t\fP options or tha \fB+\fP
\fIcommand\fP argument) is executed on tha edit buffer n' shit. If up in open
or visual mode, tha marks shall be set as if executin tha \fIvi\fP
\fBm\fP command; otherwise, as if executin tha \fIex\fP \fBmark\fP
command.
.LP
When changin from \fBex\fP mode ta open or visual mode, if tha \fB`\fP
and \fB'\fP marks is not already set, tha \fB`\fP
and \fB'\fP marks shall be set as busted lyrics bout previously.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Move
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBm\fP\fB[\fP\fBove\fP\fB]\fP \fI1addr\fP \fB\fP\fB[\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
Move tha specified lines afta tha specified destination line fo' realz. A destination
of line zero specifies dat tha lines shall be
placed all up in tha beginnin of tha edit buffer n' shit. Well shiiiit, it shall be a error if
the destination line is within tha range of lines ta be
moved.
.LP
\fICurrent line\fP: Set ta tha last of tha moved lines.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Next
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBn\fP\fB[\fP\fBext\fP\fB][\fP\fB!\fP\fB][\fP\fB+\fP\fIcommand\fP\fB][\fP\fIfile\fP \fB...\fP\fB]\fP
.fi
.RE
.sp
.LP
If no \fB'!'\fP be appended ta tha command name, n' tha edit buffer
has been modified since tha last complete write, it
shall be a error, unless tha file is successfully freestyled as specified
by tha \fBautowrite\fP option.
.LP
If one or mo' filez is specified:
.IP " 1." 4
Set tha argument list ta tha specified filenames.
.LP
.IP " 2." 4
Set tha current argument list reference ta be tha straight-up original gangsta entry up in the
argument list.
.LP
.IP " 3." 4
Set tha current pathname ta tha straight-up original gangsta filename specified.
.LP
.LP
Otherwise:
.IP " 1." 4
It shall be a error if there be no mo' filenames up in tha argument
list afta tha filename currently referenced.
.LP
.IP " 2." 4
Set tha current pathname n' tha current argument list reference to
the filename afta tha filename currently referenced up in the
argument list.
.LP
.LP
Replace tha contentz of tha edit buffer wit tha contentz of tha file
named by tha current pathname. If fo' any reason the
contentz of tha file cannot be accessed, tha edit buffer shall be
empty.
.LP
This command shall be affected by tha \fBautowrite\fP n' \fBwriteany\fP
edit options.
.LP
Da \fB+\fP \fIcommand\fP option shall be <blank>-delimited; <blank>s
can be escaped by precedin dem wit a
backslash character n' shit. Da \fB+\fP \fIcommand\fP shall be interpreted
as a \fIex\fP command immediately afta tha contentz of the
edit buffer done been replaced n' tha current line n' column have
been set.
.LP
\fICurrent line\fP: Set as busted lyrics bout fo' tha \fBedit\fP command.
.LP
\fICurrent column\fP: Set as busted lyrics bout fo' tha \fBedit\fP command.
.SS Number
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBnu\fP\fB[\fP\fBmber\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]
[\fP\fI2addr\fP\fB]\fP \fB#\fP\fB[\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
These commandz shall be equivalent ta tha \fIex\fP command:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBp\fP\fB[\fP\fBrint\fP\fB][\fP\fIcount\fP\fB]\fP \fB#\fP\fB[\fP\fIflags\fP\fB]\fP
.fi
.RE
.LP
See Print .
.SS Open
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBo\fP\fB[\fP\fBpen\fP\fB]\fP \fB/\fP\fIpattern\fP\fB/\fP \fB[\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
This command need not be supported on block-mode terminals or terminals
with insufficient capabilities. Put ya muthafuckin choppers up if ya feel dis! If standard input,
standard output, or standard error is not terminal devices, tha thangs up in dis biatch
are unspecified.
.LP
Enta open mode.
.LP
Da trailin delimita can be omitted from \fIpattern\fP all up in tha end
of tha command line. If \fIpattern\fP is empty (for
example, \fB"//"\fP ) or not specified, tha last regular expression
used up in tha editor shall be used as tha pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da pattern
can be delimited by slashes (shown up in tha Synopsis), as well as any
alphanumeric, or non- <blank> other than backslash,
vertical line, double quote, or <newline>.
.LP
\fICurrent line\fP: Set ta tha specified line.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Preserve
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBpre\fP\fB[\fP\fBserve\fP\fB]\fP
.fi
.RE
.sp
.LP
Save tha edit buffer up in a gangbangin' form dat can lata be recovered by using
the \fB-r\fP option or by rockin tha \fIex\fP
\fBrecover\fP command. Y'all KNOW dat shit, muthafucka! Afta tha file has been preserved, a mail message
shall be busted ta tha user n' shit. This message shall be readable
by invokin tha \fImailx\fP utility. Da message shall contain the
name of tha file, the
time of preservation, n' a \fIex\fP command dat could be used to
recover tha file fo' realz. Additionizzle shiznit may be included in
the mail message.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Print
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBp\fP\fB[\fP\fBrint\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
Write tha addressed lines. Da behavior is unspecified if tha number
of columns on tha display is less than tha number of
columns required ta write any single characta up in tha lines being
written.
.LP
Non-printable characters, except fo' tha <tab>, shall be freestyled as
implementation-defined multi-characta sequences.
.LP
If tha \fB#\fP flag is specified or tha \fBnumber\fP edit option is
set, each line shall be preceded by its line number up in the
followin format:
.sp
.RS
.nf

\fB"%6d  ", <\fP\fIline number\fP\fB>
\fP
.fi
.RE
.LP
If tha \fBl\fP flag is specified or tha \fBlist\fP edit option is
set:
.IP " 1." 4
Da charactas listed up in tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Table 5-1, Escape Sequences and
Associated Actions shall be freestyled as tha correspondin escape sequence.
.LP
.IP " 2." 4
Non-printable charactas not up in tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Table 5-1, Escape Sequences and
Associated Actions shall be freestyled as one three-digit octal number
(with a precedin backslash) fo' each byte up in tha character
(most dope byte first). If tha size of a funky-ass byte on tha system
is pimped outa than 9 bits, tha format used fo' non-printable
charactas is implementation-defined.
.LP
.IP " 3." 4
Da end of each line shall be marked wit a \fB'$'\fP, n' literal
\fB'$'\fP charactas within tha line shall be written
with a precedin backslash.
.LP
.LP
Long lines shall be folded; tha length at which foldin occurs is
unspecified yo, but should be appropriate fo' tha output
terminal, thankin bout tha number of columnz of tha terminal.
.LP
If a line is folded, n' tha \fBl\fP flag aint specified n' the
\fBlist\fP edit option aint set, it is unspecified
whether a multi-column characta all up in tha foldin posizzle is separated;
it shall not be discarded.
.LP
\fICurrent line\fP: Set ta tha last freestyled line.
.LP
\fICurrent column\fP: Unchanged if tha current line is unchanged;
otherwise, set ta non- <blank>.
.SS Put
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBpu\fP\fB[\fP\fBt\fP\fB][\fP\fIbuffer\fP\fB]\fP
.fi
.RE
.sp
.LP
Append text from tha specified buffer (by default, tha unnamed buffer)
to tha specified line; line zero specifies dat tha text
shall be placed all up in tha beginnin of tha edit buffer n' shit. Each portion
of a line up in tha buffer shall become a freshly smoked up line up in tha edit
buffer, regardless of tha mode of tha buffer.
.LP
\fICurrent line\fP: Set ta tha last line entered tha fuck into tha edit buffer.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Quit
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBq\fP\fB[\fP\fBuit\fP\fB][\fP\fB!\fP\fB]\fP
.fi
.RE
.sp
.LP
If no \fB'!'\fP be appended ta tha command name:
.IP " 1." 4
If tha edit buffer has been modified since tha last complete write,
it shall be a error.
.LP
.IP " 2." 4
If there be filenames up in tha argument list afta tha filename currently
referenced, n' tha last command was not a \fBquit\fP,
\fBwq\fP, \fBxit\fP, or \fBZZ\fP (see \fIExit\fP ) command, it shall
be a error.
.LP
.LP
Otherwise, terminizzle tha editin session.
.SS Read
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBr\fP\fB[\fP\fBead\fP\fB][\fP\fB!\fP\fB][\fP\fIfile\fP\fB]\fP
.fi
.RE
.sp
.LP
If \fB'!'\fP aint tha straight-up original gangsta non- <blank> ta follow tha command name,
a copy of tha specified file shall be appended
into tha edit buffer afta tha specified line; line zero specifies
that tha copy shall be placed all up in tha beginnin of tha edit
buffer n' shit. Da number of lines n' bytes read shall be written. I aint talkin' bout chicken n' gravy biatch. If no
\fIfile\fP is named, tha current pathname shall be tha default.
If there is no current pathname, then \fIfile\fP shall become the
current pathname. If there is no current pathname or \fIfile\fP
operand, it shall be a error. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Specifyin a \fIfile\fP dat is not
of type regular shall have unspecified thangs up in dis biatch.
.LP
Otherwise, if \fIfile\fP is preceded by \fB'!'\fP, tha rest of the
line afta tha \fB'!'\fP shall have \fB'%'\fP,
\fB'#'\fP, n' \fB'!'\fP charactas expanded as busted lyrics bout up in Command
Line Parsin up in ex .
.LP
Da \fIex\fP utilitizzle shall then pass two arguments ta tha program
named by tha shell edit option; tha straight-up original gangsta shall be \fB-c\fP
and tha second shall be tha expanded arguments ta tha \fBread\fP command
as a single argument. Da standard input of tha program
shall be set ta tha standard input of tha \fIex\fP program when it
was invoked. Y'all KNOW dat shit, muthafucka! Da standard error n' standard output of the
program shall be appended tha fuck into tha edit buffer afta tha specified
line.
.LP
Each line up in tha copied file or program output (as delimited by <newline>s
or tha end of tha file or output if it is not
immediately preceded by a <newline>), shall be a separate line in
the edit buffer n' shiznit fo' realz. Any occurrencez of <carriage-return>
and <newline> pairs up in tha output shall be treated as single <newline>s.
.LP
Da special meanin of tha \fB'!'\fP followin tha \fBread\fP command
can be overridden by escapin it wit a funky-ass backslash
character.
.LP
\fICurrent line\fP: If no lines is added ta tha edit buffer, unchanged.
Otherwise, if up in open or visual mode, set ta tha first
line entered tha fuck into tha edit buffer n' shit. Otherwise, set ta tha last line
entered tha fuck into tha edit buffer.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Recover
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBrec\fP\fB[\fP\fBover\fP\fB][\fP\fB!\fP\fB]\fP \fIfile\fP
.fi
.RE
.sp
.LP
If no \fB'!'\fP be appended ta tha command name, n' tha edit buffer
has been modified since tha last complete write, it
shall be a error.
.LP
If no \fIfile\fP operand is specified, then tha current pathname shall
be used. Y'all KNOW dat shit, muthafucka! If there is no current pathname or \fIfile\fP
operand, it shall be a error.
.LP
If no recovery shiznit has previously been saved bout \fIfile\fP,
the \fBrecover\fP command shall behave identically to
the \fBedit\fP command, n' a shiznital message ta dis effect
shall be written.
.LP
Otherwise, set tha current pathname ta \fIfile\fP, n' replace the
current contentz of tha edit buffer wit tha recovered
contentz of \fIfile\fP. If there be multiple instancez of tha file
to be recovered, tha one most recently saved shall be
recovered, n' a shiznital message dat there be previous versions
of tha file dat can be recovered shall be written. I aint talkin' bout chicken n' gravy biatch. The
editor shall behave as if tha contentz of tha edit buffer have already
been modified.
.LP
\fICurrent file\fP: Set as busted lyrics bout fo' tha \fBedit\fP command.
.LP
\fICurrent column\fP: Set as busted lyrics bout fo' tha \fBedit\fP command.
.SS Rewind
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBrew\fP\fB[\fP\fBind\fP\fB][\fP\fB!\fP\fB]\fP
.fi
.RE
.sp
.LP
If no \fB'!'\fP be appended ta tha command name, n' tha edit buffer
has been modified since tha last complete write, it
shall be a error, unless tha file is successfully freestyled as specified
by tha \fBautowrite\fP option.
.LP
If tha argument list is empty, it shall be a error.
.LP
Da current argument list reference n' tha current pathname shall
be set ta tha straight-up original gangsta filename up in tha argument list.
.LP
Replace tha contentz of tha edit buffer wit tha contentz of tha file
named by tha current pathname. If fo' any reason the
contentz of tha file cannot be accessed, tha edit buffer shall be
empty.
.LP
This command shall be affected by tha \fBautowrite\fP n' \fBwriteany\fP
edit options.
.LP
\fICurrent line\fP: Set as busted lyrics bout fo' tha \fBedit\fP command.
.LP
\fICurrent column\fP: Set as busted lyrics bout fo' tha \fBedit\fP command.
.SS Set
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBse\fP\fB[\fP\fBt\fP\fB][\fP\fIoption\fP\fB[\fP\fB=\fP\fB[\fP\fIvalue\fP\fB]]\fP \fB...\fP\fB][\fP\fBno\fP\fIoption\fP \fB...\fP\fB][\fP\fIoption\fP\fB? ...\fP\fB][\fP\fBall\fP\fB]\fP
.fi
.RE
.sp
.LP
When no arguments is specified, write tha value of tha \fBterm\fP
edit option n' dem options whose joints done been chizzled
from tha default settings; when tha argument \fIall\fP is specified,
write all of tha option joints.
.LP
Givin a option name followed by tha characta \fB'?'\fP shall cause
the current value of dat option ta be written. I aint talkin' bout chicken n' gravy biatch. The
\fB'?'\fP can be separated from tha option name by zero or mo' <blank>s.
Da \fB'?'\fP shall be necessary only for
Boolean valued options. Boolean options can be given joints by the
form \fBset\fP \fIoption\fP ta turn dem on or \fBset\fP
\fBno\fP \fIoption\fP ta turn dem off; strang n' numeric options
can be assigned by tha form \fBset\fP \fIoption\fP=
\fIvalue\fP fo' realz. Any <blank>s up in strings can be included as is by preceding
each <blank> wit a escapin backslash. Mo'
than one option can be set or listed by a single set command by specifying
multiple arguments, each separated from tha next by one
or mo' <blank>s.
.LP
See Edit Options up in ex fo' details bout specific options.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Shell
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBsh\fP\fB[\fP\fBell\fP\fB]\fP
.fi
.RE
.sp
.LP
Invoke tha program named up in tha \fBshell\fP edit option wit tha single
argument \fB-i\fP (interactizzle mode). Editin shall be
resumed when tha program exits.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Source
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBso\fP\fB[\fP\fBurce\fP\fB]\fP \fIfile\fP
.fi
.RE
.sp
.LP
Read n' execute \fIex\fP commandz from \fIfile\fP. Lines up in tha file
that is blank lines shall be ignored.
.LP
\fICurrent line\fP: As specified fo' tha individual \fIex\fP commands.
.LP
\fICurrent column\fP: As specified fo' tha individual \fIex\fP commands.
.SS Substitute
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBs\fP\fB[\fP\fBubstitute\fP\fB][\fP\fB/\fP\fIpattern\fP\fB/\fP\fIrepl\fP\fB/\fP\fB[\fP\fIoptions\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]]\fP\fB
.br

\fP\fB[\fP\fI2addr\fP\fB]\fP \fB&\fP\fB[\fP\fIoptions\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]]\fP\fB
.br

\fP\fB[\fP\fI2addr\fP\fB]\fP \fB~\fP\fB[\fP\fIoptions\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]]\fP
.fi
.RE
.sp
.LP
Replace tha straight-up original gangsta instizzle of tha pattern \fIpattern\fP by tha string
\fIrepl\fP on each specified line. (See Regular Expressions up in ex
and Replacement Strings up in ex .) Any
non-alphabetic, non- <blank> delimita other than \fB'\\'\fP, \fB'|'\fP,
double quote, or <newline> can be used
instead of \fB'/'\fP . Backslash charactas can be used ta escape
delimiters, backslash characters, n' other special
characters.
.LP
Da trailin delimita can be omitted from \fIpattern\fP or from \fIrepl\fP
at tha end of tha command line. If both
\fIpattern\fP n' \fIrepl\fP is not specified or is empty (for example,
\fB"//"\fP ), tha last \fBs\fP command shall be
repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If only \fIpattern\fP aint specified or is empty, the
last regular expression used up in tha editor shall be used as the
pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. If only \fIrepl\fP aint specified or is empty, tha pattern
shall be replaced by nothing. If tha entire replacement
pattern is \fB'%'\fP, tha last replacement pattern ta a \fBs\fP
command shall be used.
.LP
Enterin a <carriage-return> up in \fIrepl\fP (which requires a escaping
backslash up in \fIex\fP mode n' a escaping
<control>-V up in open or \fIvi\fP mode) shall split tha line at that
point, bustin a new
line up in tha edit buffer n' shit. Da <carriage-return> shall be discarded.
.LP
If \fIoptions\fP includes tha letta \fB'g'\fP ( \fBglobal\fP), all
non-overlappin instancez of tha pattern up in tha line
shall be replaced.
.LP
If \fIoptions\fP includes tha letta \fB'c'\fP ( \fBconfirm\fP), then
before each substitution tha line shall be written;
the freestyled line shall reflect all previous substitutions. On the
followin line, <space>s shall be freestyled beneath the
charactas from tha line dat is before tha \fIpattern\fP ta be replaced,
and \fB'^'\fP charactas freestyled beneath the
charactas included up in tha \fIpattern\fP ta be replaced. Y'all KNOW dat shit, muthafucka! Da \fIex\fP
utilitizzle shall then wait fo' a response from tha user n' shiznit fo' realz. An
affirmatizzle response shall cause tha substitution ta be done, while
any other input shall not make tha substitution. I aint talkin' bout chicken n' gravy biatch fo' realz. An affirmative
response shall consist of a line wit tha affirmatizzle response (as
defined by tha current locale) all up in tha beginnin of tha line.
This line shall be subject ta editin up in tha same way as tha \fIex\fP
command line.
.LP
If interrupted (see tha ASYNCHRONOUS EVENTS section), any modifications
confirmed by tha user shall be preserved up in tha edit
buffer afta tha interrupt.
.LP
If tha remembered search direction aint set, tha \fBs\fP command
shall set it ta forward.
.LP
In tha second Synopsis, tha \fB&\fP command shall repeat tha previous
substitution, as if tha \fB&\fP command were
replaced by:
.sp
.RS
.nf

\fBs/\fP\fIpattern\fP\fB/\fP\fIrepl\fP\fB/
\fP
.fi
.RE
.LP
where \fIpattern\fP n' \fIrepl\fP is as specified up in tha previous
\fBs\fP, \fB&\fP, or \fB~\fP command.
.LP
In tha third Synopsis, tha \fB~\fP command shall repeat tha previous
substitution, as if tha \fB'~'\fP were
replaced by:
.sp
.RS
.nf

\fBs/\fP\fIpattern\fP\fB/\fP\fIrepl\fP\fB/
\fP
.fi
.RE
.LP
where \fIpattern\fP shall be tha last regular expression specified
to tha editor, n' \fIrepl\fP shall be from tha previous
substitution (includin \fB&\fP n' \fB~\fP) command.
.LP
These commandz shall be affected by tha \fILC_MESSAGES\fP environment
variable.
.LP
\fICurrent line\fP: Set ta tha last line up in which a substitution occurred,
or, unchanged if no substitution occurred.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Suspend
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBsu\fP\fB[\fP\fBspend\fP\fB][\fP\fB!\fP\fB]\fP\fBst\fP\fB[\fP\fBop\fP\fB][\fP\fB!\fP\fB]\fP
.fi
.RE
.sp
.LP
Allow control ta return ta tha invokin process; \fIex\fP shall suspend
itself as if it had received tha SIGTSTP signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. The
suspension shall occur only if thang control is enabled up in tha invoking
shell (see tha description of \fIset\fP \fB-m\fP).
.LP
These commandz shall be affected by tha \fBautowrite\fP n' \fBwriteany\fP
edit options.
.LP
Da current \fBsusp\fP characta (see \fIstty\fP ) shall be equivalent
to tha \fBsuspend\fP
command.
.SS Tag
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBta\fP\fB[\fP\fBg\fP\fB][\fP\fB!\fP\fB]\fP \fItagstring\fP
.fi
.RE
.sp
.LP
Da thangs up in dis biatch is unspecified if tha format of a tags file aint as
specified by tha \fIctags\fP utilitizzle (see \fIctags\fP ) description.
.LP
Da \fBtag\fP command shall search fo' \fItagstring\fP up in tha tag
filez referred ta by tha \fBtag\fP edit option, up in the
order they is specified, until a reference ta \fItagstring\fP is
found. Y'all KNOW dat shit, muthafucka! Filez shall be searched from beginnin ta end yo, but it ain't no stoppin cause I be still poppin'. If no
reference is found, it shall be a error n' a error message ta this
effect shall be written. I aint talkin' bout chicken n' gravy biatch. If tha reference aint found, or if
an error occurs while processin a gangbangin' file referred ta up in tha \fBtag\fP
edit option, it shall be a error, n' a error message shall
be freestyled all up in tha straight-up original gangsta occurrence of such a error.
.LP
Otherwise, if tha tags file contained a pattern, tha pattern shall
be treated as a regular expression used up in tha editor; for
example, fo' tha purposez of tha \fBs\fP command.
.LP
If tha \fItagstring\fP is up in a gangbangin' file wit a gangbangin' finger-lickin' different name than the
current pathname, set tha current pathname ta tha name of
that file, n' replace tha contentz of tha edit buffer wit tha contents
of dat file. In dis case, if no \fB'!'\fP be appended
to tha command name, n' tha edit buffer has been modified since the
last complete write, it shall be a error, unless tha file is
successfully freestyled as specified by tha \fBautowrite\fP option.
.LP
This command shall be affected by tha \fBautowrite\fP, \fBtag\fP,
\fBtaglength\fP, n' \fBwriteany\fP edit options.
.LP
\fICurrent line\fP: If tha tags file contained a line number, set
to dat line number n' shit. If tha line number is larger than the
last line up in tha edit buffer, a error message shall be freestyled and
the current line shall be set as specified fo' tha \fBedit\fP
command.
.LP
If tha tags file contained a pattern, set ta tha straight-up original gangsta occurrence
of tha pattern up in tha file. If no matchin pattern is found,
an error message shall be freestyled n' tha current line shall be set
as specified fo' tha \fBedit\fP command.
.LP
\fICurrent column\fP: If tha tags file contained a line-number reference
and dat line-number was not larger than tha last line
in tha edit buffer, or if tha tags file contained a pattern n' that
pattern was found, set ta non- <blank>. Otherwise, set
as specified fo' tha \fBedit\fP command.
.SS Unabbreviate
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBuna\fP\fB[\fP\fBbbrev\fP\fB]\fP \fIlhs\fP
.fi
.RE
.sp
.LP
If \fIlhs\fP aint a entry up in tha current list of abbreviations
(see Abbreviate ), it shall be
an error. Shiiit, dis aint no joke. Otherwise, delete \fIlhs\fP from tha list of abbreviations.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Undo
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBu\fP\fB[\fP\fBndo\fP\fB]\fP
.fi
.RE
.sp
.LP
Reverse tha chizzlez made by tha last command dat modified tha contents
of tha edit buffer, includin \fBundo\fP. For this
purpose, tha \fBglobal\fP, \fBv\fP, \fBopen\fP, n' \fBvisual\fP commands,
and commandz resultin from buffer executions and
mapped characta expansions, is considered single commands.
.LP
If no action dat can be undone preceded tha \fBundo\fP command, it
shall be a error.
.LP
If tha \fBundo\fP command restores lines dat was marked, tha mark
shall also be restored unless dat shiznit was reset subsequent to
the deletion of tha lines.
.LP
\fICurrent line\fP:
.IP " 1." 4
If lines is added or chizzled up in tha file, set ta tha straight-up original gangsta line added
or chizzled.
.LP
.IP " 2." 4
Set ta tha line before tha straight-up original gangsta line deleted, if it exists.
.LP
.IP " 3." 4
Set ta 1 if tha edit buffer aint empty.
.LP
.IP " 4." 4
Set ta zero.
.LP
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Unmap
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBunm\fP\fB[\fP\fBap\fP\fB][\fP\fB!\fP\fB]\fP \fIlhs\fP
.fi
.RE
.sp
.LP
If \fB'!'\fP be appended ta tha command name, n' if \fIlhs\fP is
not a entry up in tha list of text input mode map
definitions, it shall be a error. Shiiit, dis aint no joke. Otherwise, delete \fIlhs\fP from
the list of text input mode map definitions.
.LP
If no \fB'!'\fP be appended ta tha command name, n' if \fIlhs\fP
is not a entry up in tha list of command mode map
definitions, it shall be a error. Shiiit, dis aint no joke. Otherwise, delete \fIlhs\fP from
the list of command mode map definitions.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Version
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fBve\fP\fB[\fP\fBrsion\fP\fB]\fP
.fi
.RE
.sp
.LP
Write a message containin version shiznit fo' tha editor. Shiiit, dis aint no joke. The
format of tha message is unspecified.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Visual
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBvi\fP\fB[\fP\fBsual\fP\fB][\fP\fItype\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
If \fIex\fP is currently up in open or visual mode, tha Synopsis and
behavior of tha visual command shall be tha same as the
\fBedit\fP command, as specified by Edit .
.LP
Otherwise, dis command need not be supported on block-mode terminals
or terminals wit insufficient capabilities. Put ya muthafuckin choppers up if ya feel dis! If standard
input, standard output, or standard error is not terminal devices,
the thangs up in dis biatch is unspecified.
.LP
If \fIcount\fP is specified, tha value of tha \fBwindow\fP edit option
shall be set ta \fIcount\fP (as busted lyrics bout up in window ). If tha \fB'^'\fP
type characta was also specified, tha \fBwindow\fP edit option shall
be set
before bein used by tha type character.
.LP
Enta visual mode. If \fItype\fP aint specified, it shall be as
if a \fItype\fP of \fB'+'\fP was specified. Y'all KNOW dat shit, muthafucka! The
\fItype\fP shall cause tha followin effects:
.TP 7
\fB+\fP
Place tha beginnin of tha specified line all up in tha top of tha display.
.TP 7
\fB-\fP
Place tha end of tha specified line all up in tha bottom of tha display.
.TP 7
\fB\&.\fP
Place tha beginnin of tha specified line up in tha middle of tha display.
.TP 7
\fB^\fP
If tha specified line is less than or equal ta tha value of tha \fBwindow\fP
edit option, set tha line ta 1; otherwise,
decrement tha line by tha value of tha \fBwindow\fP edit option minus
1. Place tha beginnin of dis line as close ta tha bottom
of tha displayed lines as possible, while still displayin tha value
of tha \fBwindow\fP edit option number of lines.
.sp
.LP
\fICurrent line\fP: Set ta tha specified line.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Write
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBw\fP\fB[\fP\fBrite\fP\fB][\fP\fB!\fP\fB][\fP\fB>>\fP\fB][\fP\fIfile\fP\fB]
[\fP\fI2addr\fP\fB]\fP \fBw\fP\fB[\fP\fBrite\fP\fB][\fP\fB!\fP\fB][\fP\fIfile\fP\fB]
[\fP\fI2addr\fP\fB]\fP \fBwq\fP\fB[\fP\fB!\fP\fB][\fP\fB>>\fP\fB][\fP\fIfile\fP\fB]\fP
.fi
.RE
.sp
.LP
If no lines is specified, tha lines shall default ta tha entire file.
.LP
Da command \fBwq\fP shall be equivalent ta a \fBwrite\fP command
followed by a \fBquit\fP command; \fBwq!\fP shall be
equivalent ta \fBwrite!\fP followed by \fBquit\fP. In both cases,
if tha \fBwrite\fP command fails, tha \fBquit\fP shall not be
attempted.
.LP
If tha command name aint followed by one or mo' <blank>s, or \fIfile\fP
is not preceded by a \fB'!'\fP character,
the \fBwrite\fP shall be ta a gangbangin' file.
.IP " 1." 4
If tha \fB>>\fP argument is specified, n' tha file already exists,
the lines shall be appended ta tha file instead of
replacin its contents, n' you can put dat on yo' toast. If tha \fB>>\fP argument is specified, and
the file do not already exist, it is unspecified
whether tha write shall proceed as if tha \fB>>\fP argument had not
been specified or if tha write shall fail.
.LP
.IP " 2." 4
If tha \fBreadonly\fP edit option is set (see readonly ), tha \fBwrite\fP
shall fail.
.LP
.IP " 3." 4
If \fIfile\fP is specified, n' aint tha current pathname, n' the
file exists, tha \fBwrite\fP shall fail.
.LP
.IP " 4." 4
If \fIfile\fP aint specified, tha current pathname shall be used.
If there is no current pathname, tha \fBwrite\fP command
shall fail.
.LP
.IP " 5." 4
If tha current pathname is used, n' tha current pathname has been
changed by tha \fBfile\fP or \fBread\fP commands, n' the
file exists, tha \fBwrite\fP shall fail. If tha \fBwrite\fP is successful,
subsequent \fBwrite\fPs shall not fail fo' this
reason (unless tha current pathname is chizzled again).
.LP
.IP " 6." 4
If tha whole edit buffer aint bein written, n' tha file ta be
written exists, tha \fBwrite\fP shall fail.
.LP
.LP
For rulez 1., 2., 4., n' 5., tha \fBwrite\fP can be forced by appending
the characta \fB'!'\fP ta tha command name.
.LP
For rulez 2., 4., n' 5., tha \fBwrite\fP can be forced by setting
the \fBwriteany\fP edit option.
.LP
Additional, implementation-defined tests may cause tha \fBwrite\fP
to fail.
.LP
If tha edit buffer is empty, a gangbangin' file without any contents shall be
written.
.LP
An shiznital message shall be freestyled notin tha number of lines
and bytes written.
.LP
Otherwise, if tha command is followed by one or mo' <blank>s, and
the file is preceded by \fB'!'\fP, tha rest of the
line afta tha \fB'!'\fP shall have \fB'%'\fP, \fB'#'\fP, n' \fB'!'\fP
charactas expanded as busted lyrics bout up in Command Line Parsin up in ex .
.LP
Da \fIex\fP utilitizzle shall then pass two arguments ta tha program
named by tha \fBshell\fP edit option; tha straight-up original gangsta shall be
\fB-c\fP n' tha second shall be tha expanded arguments ta tha \fBwrite\fP
command as a single argument. Da specified lines
shall be freestyled ta tha standard input of tha command. Y'all KNOW dat shit, muthafucka! Da standard
error n' standard output of tha program, if any, shall be
written as busted lyrics bout fo' tha \fBprint\fP command. Y'all KNOW dat shit, muthafucka! If tha last character
in dat output aint a <newline>, a <newline>
shall be freestyled all up in tha end of tha output.
.LP
Da special meanin of tha \fB'!'\fP followin tha \fBwrite\fP command
can be overridden by escapin it wit a funky-ass backslash
character.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Write n' Exit
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBx\fP\fB[\fP\fBit\fP\fB][\fP\fB!\fP\fB][\fP\fIfile\fP\fB]\fP
.fi
.RE
.sp
.LP
If tha edit buffer has not been modified since tha last complete \fBwrite\fP,
\fBxit\fP shall be equivalent ta tha \fBquit\fP
command, or if a \fB'!'\fP be appended ta tha command name, ta \fBquit!\fP.
.LP
Otherwise, \fBxit\fP shall be equivalent ta tha \fBwq\fP command,
or if a \fB'!'\fP be appended ta tha command name, to
\fBwq!\fP.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Yank
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fBya\fP\fB[\fP\fBnk\fP\fB][\fP\fIbuffer\fP\fB][\fP\fIcount\fP\fB]\fP
.fi
.RE
.sp
.LP
Copy tha specified lines ta tha specified buffer (by default, the
unnamed buffer), which shall become a line-mode buffer.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Adjust Window
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fBz\fP\fB[\fP\fB!\fP\fB][\fP\fItype\fP \fB...\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
If no line is specified, tha current line shall be tha default; if
\fItype\fP is omitted as well, tha current line value shall
first be incremented by 1. If incrementin tha current line would
cause it ta be pimped outa than tha last line up in tha edit buffer, it
shall be a error.
.LP
If there be <blank>s between tha \fItype\fP argument n' tha preceding
\fBz\fP command name or optionizzle \fB'!'\fP
character, it shall be a error.
.LP
If \fIcount\fP is specified, tha value of tha \fBwindow\fP edit option
shall be set ta \fIcount\fP (as busted lyrics bout up in window ). If \fIcount\fP
is omitted, it shall default ta 2 times tha value of tha \fBscroll\fP
edit
option, or if \fB!\fP was specified, tha number of lines up in tha display
minus 1.
.LP
If \fItype\fP is omitted, then \fIcount\fP lines startin wit the
specified line shall be written. I aint talkin' bout chicken n' gravy biatch. Otherwise, \fIcount\fP
lines startin wit tha line specified by tha \fItype\fP argument
shall be written.
.LP
Da \fItype\fP argument shall chizzle tha lines ta be written. I aint talkin' bout chicken n' gravy biatch. The
possible jointz of \fItype\fP is as bigs up:
.TP 7
\fB-\fP
Da specified line shall be decremented by tha followin value: 
.sp
.RS
.nf

\fB(((number of "-" characters) x\fP \fIcount\fP\fB) -1)
\fP
.fi
.RE
.LP
If tha calculation would result up in a number less than 1, it shall
be a error. Shiiit, dis aint no joke. Write lines from tha edit buffer, startin at the
new value of line, until \fIcount\fP lines or tha last line up in the
edit buffer has been written.
.TP 7
\fB+\fP
Da specified line shall be incremented by tha followin value: 
.sp
.RS
.nf

\fB(((number of "+" characters) -1) x\fP \fIcount\fP\fB) +1
\fP
.fi
.RE
.LP
If tha calculation would result up in a number pimped outa than tha last
line up in tha edit buffer, it shall be a error. Shiiit, dis aint no joke. Write lines
from tha edit buffer, startin all up in tha freshly smoked up value of line, until \fIcount\fP
lines or tha last line up in tha edit buffer has been
written.
.TP 7
\fB=\fP,\fB.\fP
If mo' than a single \fB'.'\fP or \fB'='\fP is specified, it shall
be a error. Shiiit, dis aint no joke. Da followin steps shall be taken: 
.RS
.IP " 1." 4
If \fIcount\fP is zero, not a god damn thang shall be written.
.LP
.IP " 2." 4
Write as nuff of tha \fIN\fP lines before tha current line up in the
edit buffer as exist. If \fIcount\fP or \fB'!'\fP was
specified, \fIN\fP shall be:
.sp
.RS
.nf

\fB(\fP\fIcount\fP \fB-1) /2
\fP
.fi
.RE
.LP
Otherwise, \fIN\fP shall be:
.sp
.RS
.nf

\fB(\fP\fIcount\fP \fB-3) /2
\fP
.fi
.RE
.LP
If \fIN\fP be a number less than 3, no lines shall be written.
.LP
.IP " 3." 4
If \fB'='\fP was specified as tha type character, write a line consisting
of tha smalla of tha number of columns up in the
display divided by two, or 40 \fB'-'\fP characters.
.LP
.IP " 4." 4
Write tha current line.
.LP
.IP " 5." 4
Repeat step 3.
.LP
.IP " 6." 4
Write as nuff of tha \fIN\fP lines afta tha current line up in tha edit
buffer as exist. \fIN\fP shall be defined as up in step 2.
If \fIN\fP be a number less than 3, no lines shall be written. I aint talkin' bout chicken n' gravy biatch. If
\fIcount\fP is less than 3, no lines shall be written.
.LP
.RE
.TP 7
\fB^\fP
Da specified line shall be decremented by tha followin value: 
.sp
.RS
.nf

\fB(((number of "^" characters) +1) x\fP \fIcount\fP\fB) -1
\fP
.fi
.RE
.LP
If tha calculation would result up in a number less than 1, it shall
be a error. Shiiit, dis aint no joke. Write lines from tha edit buffer, startin at the
new value of line, until \fIcount\fP lines or tha last line up in the
edit buffer has been written.
.sp
.LP
\fICurrent line\fP: Set ta tha last line written, unless tha type
is \fB=\fP, up in which case, set ta tha specified line.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Escape
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB!\fP \fIcommand
\fP\fB[\fP\fIaddr\fP\fB]\fP\fB!\fP \fIcommand\fP
.fi
.RE
.sp
.LP
Da contentz of tha line afta tha \fB'!'\fP shall have \fB'%'\fP,
\fB'#'\fP, n' \fB'!'\fP charactas expanded as
busted lyrics bout up in Command Line Parsin up in ex . If tha expansion causes
the text of tha line ta chizzle, it
shall be redisplayed, preceded by a single \fB'!'\fP character.
.LP
Da \fIex\fP utilitizzle shall execute tha program named by tha \fBshell\fP
edit option. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it shall pass two arguments ta the
program; tha straight-up original gangsta shall be \fB-c\fP, n' tha second shall be the
expanded arguments ta tha \fB!\fP command as a single
argument.
.LP
If no lines is specified, tha standard input, standard output, and
standard error of tha program shall be set ta tha standard
input, standard output, n' standard error of tha \fIex\fP program
when dat shiznit was invoked. Y'all KNOW dat shit, muthafucka! In addition, a warnin message shall be
written if tha edit buffer has been modified since tha last complete
write, n' tha \fBwarn\fP edit option is set.
.LP
If lines is specified, they shall be passed ta tha program as standard
input, n' tha standard output n' standard error of the
program shall replace dem lines up in tha edit buffer n' shit. Each line in
the program output (as delimited by <newline>s or tha end
of tha output if it aint immediately preceded by a <newline>), shall
be a separate line up in tha edit buffer n' shiznit fo' realz. Any occurrences
of <carriage-return> n' <newline> pairs up in tha output shall be treated
as single <newline>s. Da specified lines
shall be copied tha fuck into tha unnamed buffer before they is replaced,
and tha unnamed buffer shall become a line-mode buffer.
.LP
If up in \fIex\fP mode, a single \fB'!'\fP characta shall be written
when tha program completes.
.LP
This command shall be affected by tha \fBshell\fP n' \fBwarn\fP edit
options. If no lines is specified, dis command shall
be affected by tha \fBautowrite\fP n' \fBwriteany\fP edit options.
If lines is specified, dis command shall be affected by the
\fBautoprint\fP edit option.
.LP
\fICurrent line\fP:
.IP " 1." 4
If no lines is specified, unchanged.
.LP
.IP " 2." 4
Otherwise, set ta tha last line read in, if any lines is read in.
.LP
.IP " 3." 4
Otherwise, set ta tha line before tha straight-up original gangsta line of tha lines specified,
if dat line exists.
.LP
.IP " 4." 4
Otherwise, set ta tha straight-up original gangsta line of tha edit buffer if tha edit buffer
is not empty.
.LP
.IP " 5." 4
Otherwise, set ta zero.
.LP
.LP
\fICurrent column\fP: If no lines is specified, unchanged. Y'all KNOW dat shit, muthafucka! Otherwise,
set ta non- <blank>.
.SS Shift Left
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fB<\fP\fB[\fP\fB< ...\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
Shift tha specified lines ta tha start of tha line; tha number of
column positions ta be shifted shall be tha number of command
charactas times tha value of tha \fBshiftwidth\fP edit option. I aint talkin' bout chicken n' gravy biatch. Only
leadin <blank>s shall be deleted or chizzled tha fuck into other
<blank>s up in shifting; other charactas shall not be affected.
.LP
Lines ta be shifted shall be copied tha fuck into tha unnamed buffer, which
shall become a line-mode buffer.
.LP
This command shall be affected by tha \fBautoprint\fP edit option.
.LP
\fICurrent line\fP: Set ta tha last line up in tha lines specified.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Shift Right
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fB>\fP\fB[\fP\fB> ...\fP\fB][\fP\fIcount\fP\fB][\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
Shift tha specified lines away from tha start of tha line; tha number
of column positions ta be shifted shall be tha number of
command charactas times tha value of tha \fBshiftwidth\fP edit option.
Da shift shall be accomplished by addin <blank>s
as a prefix ta tha line or changin leadin <blank>s tha fuck into other <blank>s.
Empty lines shall not be chizzled.
.LP
Lines ta be shifted shall be copied tha fuck into tha unnamed buffer, which
shall become a line-mode buffer.
.LP
This command shall be affected by tha \fBautoprint\fP edit option.
.LP
\fICurrent line\fP: Set ta tha last line up in tha lines specified.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS <control>-D
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB<control>-D
\fP
.fi
.RE
.sp
.LP
Write tha next \fIn\fP lines, where \fIn\fP is tha minimum of the
valuez of tha \fBscroll\fP edit option n' tha number of
lines afta tha current line up in tha edit buffer n' shit. If tha current line
is tha last line of tha edit buffer it shall be a error.
.LP
\fICurrent line\fP: Set ta tha last line written.
.LP
\fICurrent column\fP: Set ta non- <blank>.
.SS Write Line Number
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI1addr\fP\fB]\fP \fB=\fP \fB[\fP\fIflags\fP\fB]\fP
.fi
.RE
.sp
.LP
If \fIline\fP aint specified, it shall default ta tha last line
in tha edit buffer n' shit. Write tha line number of tha specified
line.
.LP
\fICurrent line\fP: Unchanged.
.LP
\fICurrent column\fP: Unchanged.
.SS Execute
.TP 7
\fISynopsis\fP:
.sp
.RS
.nf

\fB[\fP\fI2addr\fP\fB]\fP \fB@\fP \fIbuffer\fP\fB[\fP\fI2addr\fP\fB]\fP \fB*\fP \fIbuffer\fP
.fi
.RE
.sp
.LP
If no buffer is specified or is specified as \fB'@'\fP or \fB'*'\fP,
the last buffer executed shall be used. Y'all KNOW dat shit, muthafucka! If no
previous buffer has been executed, it shall be a error.
.LP
For each line specified by tha addresses, set tha current line ( \fB'.'\fP
) ta tha specified line, n' execute tha contents
of tha named \fIbuffer\fP (as they was all up in tha time tha \fB@\fP command
was executed) as \fIex\fP commands. For each line of a
line-mode buffer, n' all but tha last line of a cold-ass lil character-mode buffer,
the \fIex\fP command parser shall behave as if tha line
was terminated by a <newline>.
.LP
If a error occurs durin dis process, or a line specified by the
addresses do not exist when tha current line would be set
to it, or mo' than a single line was specified by tha addresses,
and tha contentz of tha edit buffer is replaced (for example, by
the \fIex\fP \fB:edit\fP command) a error message shall be written,
and no mo' commandz resultin from tha execution of this
command shall be processed.
.LP
\fICurrent line\fP: As specified fo' tha individual \fIex\fP commands.
.LP
\fICurrent column\fP: As specified fo' tha individual \fIex\fP commands.
.SS Regular Expressions up in ex
.LP
Da \fIex\fP utilitizzle shall support regular expressions dat is a
superset of tha basic regular expressions busted lyrics bout up in the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, Section 9.3, Basic
Regular Expressions fo' realz. A null regular expression ( \fB"//"\fP ) shall
be equivalent ta tha last regular expression
encountered.
.LP
Regular expressions can be used up in addresses ta specify lines and,
in some commandz (for example, tha \fBsubstitute\fP
command), ta specify portionz of a line ta be substituted.
.LP
Da followin constructs can be used ta enhizzle tha basic regular
expressions:
.TP 7
\fB\\<\fP
Match tha beginnin of a \fIword\fP. (See tha definizzle of \fIword\fP
at tha beginnin of Command
Descriptions up in ex .)
.TP 7
\fB\\>\fP
Match tha end of a \fIword\fP.
.TP 7
\fB~\fP
Match tha replacement part of tha last \fBsubstitute\fP command. Y'all KNOW dat shit, muthafucka! The
tilde ( \fB'~'\fP ) characta can be escaped up in a
regular expression ta become a aiiight characta wit no special meaning.
Da backslash shall be discarded.
.sp
.LP
When tha editor option \fBmagic\fP aint set, tha only characters
with special meanings shall be \fB'^'\fP all up in tha beginning
of a pattern, \fB'$'\fP all up in tha end of a pattern, n' \fB'\\'\fP .
Da charactas \fB'.'\fP, \fB'*'\fP, \fB'['\fP,
and \fB'~'\fP shall be treated as ordinary charactas unless preceded
by a \fB'\\'\fP ; when preceded by a \fB'\\'\fP
they shall regain they special meaning, or up in tha case of backslash,
be handled as a single backslash. Backslashes used ta escape
other charactas shall be discarded.
.SS Replacement Strings up in ex
.LP
Da characta \fB'&'\fP ( \fB'\\&'\fP if tha editor option \fBmagic\fP
is not set) up in tha replacement strang shall
stand fo' tha text matched by tha pattern ta be replaced. Y'all KNOW dat shit, muthafucka! Da character
\fB'~'\fP ( \fB'\\~'\fP if \fBmagic\fP is
not set) shall be replaced by tha replacement part of tha previous
\fBsubstitute\fP command. Y'all KNOW dat shit, muthafucka! Da sequence \fB'\\n'\fP, where
\fIn\fP be a integer, shall be replaced by tha text matched by the
pattern enclosed up in tha \fIn\fPth set of parentheses
\fB'\\('\fP n' \fB'\\)'\fP .
.LP
Da strings \fB'\\l'\fP, \fB'\\u'\fP, \fB'\\L'\fP, n' \fB'\\U'\fP
can be used ta modify tha case of elements up in the
replacement strang (usin tha \fB'\\&'\fP or \fB"\\"\fP digit) notation.
Da strang \fB'\\l'\fP ( \fB'\\u'\fP ) shall
cause tha characta dat bigs up ta be converted ta lowercase (uppercase).
Da strang \fB'\\L'\fP ( \fB'\\U'\fP ) shall cause
all charactas subsequent ta it ta be converted ta lowercase (uppercase)
as they is banged by tha substitution until tha string
\fB'\\e'\fP or \fB'\\E'\fP, or tha end of tha replacement string,
is encountered.
.LP
Otherwise, any characta followin a funky-ass backslash shall be treated as
that literal character, n' tha escapin backslash shall be
discarded.
.LP
An example of case conversion wit tha \fBs\fP command be as bigs up:
.sp
.RS
.nf

\fB:\fP\fBp
\fP\fBDa pussaaaaay sat on tha mat.
:\fP\fBs/\\<.at\\>/\\u&/gp
\fP\fBDa Cat Sat on tha Mat.
:\fP\fBs/S\\(.*\\)M/S\\U\\1\\eM/p
\fP\fBDa Cat SAT ON THE Mat.\fP
.fi
.RE
.SS Edit Options up in ex
.LP
Da \fIex\fP utilitizzle has a fuckin shitload of options dat modify its behavior.
These options have default settings, which can be
changed rockin tha \fBset\fP command.
.LP
Options is Boolean unless otherwise specified.
.SS autoindent, ai
.LP
[Default \fIunset\fP]
.LP
If \fBautoindent\fP is set, each line up in input mode shall be indented
(usin first as nuff <tab>s as possible, as
determined by tha editor option \fBtabstop\fP, n' then rockin <space>s)
to align wit another line, as bigs up:
.IP " 1." 4
If up in open or visual mode n' tha text input is part of a line-oriented
command (see tha EXTENDED DESCRIPTION up in \fIvi\fP ), align ta the
first column.
.LP
.IP " 2." 4
Otherwise, if up in open or visual mode, indentation fo' each line shall
be set as bigs up:
.RS
.IP " a." 4
If a line was previously banged as part of dis command, it shall
be set ta tha indentation of tha last banged line by
default, or as otherwise specified fo' tha <control>-D characta in
\fIInput Mode Commands
in vi\fP .
.LP
.IP " b." 4
Otherwise, it shall be set ta tha indentation of tha previous current
line, if any; otherwise, ta tha straight-up original gangsta column.
.LP
.RE
.LP
.IP " 3." 4
For tha \fIex\fP \fBa\fP, \fBi\fP, n' \fBc\fP commands, indentation
for each line shall be set as bigs up:
.RS
.IP " a." 4
If a line was previously banged as part of dis command, it shall
be set ta tha indentation of tha last banged line by
default, or as otherwise specified fo' tha \fIeof\fP characta in
Scroll .
.LP
.IP " b." 4
Otherwise, if tha command is tha \fIex\fP \fBa\fP command, it shall
be set ta tha line appended after, if any; otherwise to
the first column.
.LP
.IP " c." 4
Otherwise, if tha command is tha \fIex\fP \fBi\fP command, it shall
be set ta tha line banged before, if any; otherwise to
the first column.
.LP
.IP " d." 4
Otherwise, if tha command is tha \fIex\fP \fBc\fP command, it shall
be set ta tha indentation of tha line replaced.
.LP
.RE
.LP
.SS autoprint, ap
.LP
[Default \fIset\fP]
.LP
If \fBautoprint\fP is set, tha current line shall be freestyled after
each \fIex\fP command dat modifies tha contentz of the
current edit buffer, n' afta each \fBtag\fP command fo' which the
tag search pattern was found or tag line number was valid,
unless:
.IP " 1." 4
Da command was executed while up in open or visual mode.
.LP
.IP " 2." 4
Da command was executed as part of a \fBglobal\fP or \fBv\fP command
or \fB@\fP buffer execution.
.LP
.IP " 3." 4
Da command was tha form of tha \fBread\fP command dat readz a gangbangin' file
into tha edit buffer.
.LP
.IP " 4." 4
Da command was tha \fBappend\fP, \fBchange\fP, or \fBinsert\fP command.
.LP
.IP " 5." 4
Da command was not terminated by a <newline>.
.LP
.IP " 6." 4
Da current line shall be freestyled by a gangbangin' flag specified ta tha command;
for example, \fBdelete #\fP shall write tha current line
as specified fo' tha flag modifier ta tha \fBdelete\fP command, and
not as specified by tha \fBautoprint\fP edit option.
.LP
.SS autowrite, aw
.LP
[Default \fIunset\fP]
.LP
If \fBautowrite\fP is set, n' tha edit buffer has been modified since
it was last straight-up freestyled ta any file, tha contents
of tha edit buffer shall be freestyled as if tha \fIex\fP \fBwrite\fP
command had been specified without arguments, before each
command affected by tha \fBautowrite\fP edit option is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Appending
the characta \fB'!'\fP ta tha command name of any
of tha \fIex\fP commandz except \fB'!'\fP shall prevent tha write.
If tha write fails, it shall be a error n' tha command
shall not be executed.
.SS beautify, bf
.LP
[Default \fIunset\fP]
.LP
If \fBbeautify\fP is set, all non-printable characters, other than
<tab>s, <newline>s, n' <form-feed>s,
shall be discarded from text read up in from files. 
.SS directory, dir
.LP
[Default \fIimplementation-defined\fP]
.LP
Da value of dis option specifies tha directory up in which tha editor
buffer is ta be placed. Y'all KNOW dat shit, muthafucka! If dis directory aint writable
by tha user, tha editor shall quit.
.SS edcompatible, ed
.LP
[Default \fIunset\fP]
.LP
Causes tha presence of \fBg\fP n' \fBc\fP suffixes on substitute
commandz ta be remembered, n' toggled by repeatin the
suffixes.
.SS errorbells, eb
.LP
[Default \fIunset\fP]
.LP
If tha editor is up in \fIex\fP mode, n' tha terminal do not support
a standout mode (like fuckin inverse vizzle), and
\fBerrorbells\fP is set, error lyrics shall be preceded by alerting
the terminal.
.SS exrc
.LP
[Default \fIunset\fP]
.LP
If \fBexrc\fP is set, \fIex\fP shall access any \fB.exrc\fP file in
the current directory, as busted lyrics bout up in Initialization up in ex n' vi
\&. If \fBexrc\fP aint set, \fIex\fP shall ignore any \fB.exrc\fP
file up in the
current directory durin initialization, unless tha current directory
is dat named by tha \fIHOME\fP environment variable.
.SS ignorecase, ic
.LP
[Default \fIunset\fP]
.LP
If \fBignorecase\fP is set, charactas dat have uppercase n' lowercase
representations shall have dem representations
considered as equivalent fo' purposez of regular expression comparison.
.LP
Da \fBignorecase\fP edit option shall affect all remembered regular
expressions; fo' example, unsettin tha \fBignorecase\fP
edit option shall cause a subsequent \fIvi\fP \fBn\fP command ta search
for tha last basic
regular expression up in a cold-ass lil case-sensitizzle fashion.
.SS list
.LP
[Default \fIunset\fP]
.LP
If \fBlist\fP is set, edit buffer lines freestyled while up in \fIex\fP
command mode shall be freestyled as specified fo' the
\fBprint\fP command wit tha \fBl\fP flag specified. Y'all KNOW dat shit, muthafucka! In open or visual
mode, each edit buffer line shall be displayed as
specified fo' tha \fIex\fP \fBprint\fP command wit tha \fBl\fP flag
specified. Y'all KNOW dat shit, muthafucka! In open or visual text input mode, when the
cursor do not rest on any characta up in tha line, it shall rest on
the \fB'$'\fP markin tha end of tha line.
.SS magic
.LP
[Default \fIset\fP]
.LP
If \fBmagic\fP is set, modify tha interpretation of charactas in
regular expressions n' substitution replacement strings (see
Regular Expressions up in ex n' Replacement Strings up in ex ).
.SS mesg
.LP
[Default \fIset\fP]
.LP
If \fBmesg\fP is set, tha permission fo' others ta use tha \fBwrite\fP
or \fBtalk\fP commandz ta write ta tha terminal shall
be turned on while up in open or visual mode. Da shell-level command
\fImesg\fP \fBn\fP shall
take precedence over any settin of tha \fIex\fP \fBmesg\fP option;
that is, if \fBmesg y\fP was issued before tha editor
started (or up in a gangbangin' finger-lickin' dirty-ass shell escape), such as:
.sp
.RS
.nf

\fB:!mesg y
\fP
.fi
.RE
.LP
the \fBmesg\fP option up in \fIex\fP shall suppress incomin lyrics,
but tha \fBmesg\fP option shall not enable incoming
lyrics if \fBmesg n\fP was issued.
.SS number, nu
.LP
[Default \fIunset\fP]
.LP
If \fBnumber\fP is set, edit buffer lines freestyled while up in \fIex\fP
command mode shall be freestyled wit line numbers, up in the
format specified by tha \fBprint\fP command wit tha \fB#\fP flag
specified. Y'all KNOW dat shit, muthafucka! In \fIex\fP text input mode, each line shall be
preceded by tha line number it gonna git up in tha file.
.LP
In open or visual mode, each edit buffer line shall be displayed with
a precedin line number, up in tha format specified by the
\fIex\fP \fBprint\fP command wit tha \fB#\fP flag specified. Y'all KNOW dat shit, muthafucka! This
line number shall not be considered part of tha line fo' the
purposez of evaluatin tha current column; dat is, column position
1 shall be tha straight-up original gangsta column posizzle afta tha format specified
by tha \fBprint\fP command.
.SS paragraphs, para
.LP
[Default up in tha POSIX locale \fBIPLPPPQPP LIpplpipbp\fP]
.LP
Da \fBparagraphs\fP edit option shall define additionizzle paragraph
boundaries fo' tha open n' visual mode commands. The
\fBparagraphs\fP edit option can be set ta a cold-ass lil characta strang consisting
of zero or mo' characta pairs. Well shiiiit, it shall be a error to
set it ta a odd number of characters.
.SS prompt
.LP
[Default \fIset\fP]
.LP
If \fBprompt\fP is set, \fIex\fP command mode input shall be prompted
for wit a cold-ass lil colon ( \fB':'\fP ); when unset, no prompt
shall be written.
.SS readonly
.LP
[Default \fIsee text\fP]
.LP
If tha \fBreadonly\fP edit option is set, read-only mode shall be
enabled (see Write ). The
\fBreadonly\fP edit option shall be initialized ta set if either of
the followin conditions is true:
.IP " *" 3
Da command-line option -R was specified.
.LP
.IP " *" 3
Performin actions equivalent ta tha \fIaccess\fP() function called
with tha following
arguments indicates dat tha file lacks write permission:
.RS
.IP " 1." 4
Da current pathname is used as tha \fIpath\fP argument.
.LP
.IP " 2." 4
Da constant \fBW_OK\fP is used as tha \fIamode\fP argument.
.LP
.RE
.LP
.LP
Da \fBreadonly\fP edit option may be initialized ta set fo' other,
implementation-defined reasons. Da \fBreadonly\fP edit
option shall not be initialized ta unset based on any special privileges
of tha user or process. Da \fBreadonly\fP edit option
shall be reinitialized each time dat tha contentz of tha edit buffer
are replaced (for example, by a \fBedit\fP or \fBnext\fP
command) unless tha user has explicitly set it, up in which case it shall
remain set until tha user explicitly unsets dat shit. Once unset,
it shall again n' again n' again be reinitialized each time dat tha contentz of the
edit buffer is replaced.
.SS redraw
.LP
[Default \fIunset\fP]
.LP
Da editor simulates a intelligent terminal on a thugged-out dumb terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. (Since
this is likely ta require a big-ass amount of output to
the terminal, it is useful only at high transmission speeds.)
.SS remap
.LP
[Default \fIset\fP]
.LP
If \fBremap\fP is set, map translation shall allow fo' maps defined
in termz of other maps; translation shall continue until a
final thang is obtained. Y'all KNOW dat shit, muthafucka! If unset, only a one-step translation shall
be done.
.SS report
.LP
[Default 5]
.LP
Da value of dis \fBreport\fP edit option specifies what tha fuck number of
lines bein added, copied, deleted, or modified up in tha edit
buffer will cause a shiznital message ta be freestyled ta tha user.
Da followin conditions shall cause a shiznital
message. Da message shall contain tha number of lines added, copied,
deleted, or modified yo, but is otherwise unspecified.
.IP " *" 3
An \fIex\fP or \fIvi\fP editor command, other than \fBopen\fP, \fBundo\fP,
or
\fBvisual\fP, dat modifies at least tha value of tha \fBreport\fP
edit option number of lines, n' which aint part of an
\fIex\fP \fBglobal\fP or \fBv\fP command, or \fIex\fP or \fIvi\fP
buffer execution, shall
cause a shiznital message ta be written.
.LP
.IP " *" 3
An \fIex\fP \fByank\fP or \fIvi\fP \fBy\fP or \fBY\fP command, that
copies at least the
value of tha \fBreport\fP edit option plus 1 number of lines, and
which aint part of a \fIex\fP \fBglobal\fP or \fBv\fP
command, or \fIex\fP or \fIvi\fP buffer execution, shall cause an
informationizzle message ta be
written.
.LP
.IP " *" 3
An \fIex\fP \fBglobal\fP, \fBv\fP, \fBopen\fP, \fBundo\fP, or \fBvisual\fP
command or \fIex\fP or \fIvi\fP buffer execution, dat addz or deletes
a total of at least tha value of tha \fBreport\fP edit
option number of lines, n' which aint part of a \fIex\fP \fBglobal\fP
or \fBv\fP command, or \fIex\fP or \fIvi\fP buffer execution, shall
cause a shiznital message ta be written. I aint talkin' bout chicken n' gravy biatch. (For example, if 3 lines
were added n' 8 lines deleted durin a \fIex\fP \fBvisual\fP command,
5 would be tha number compared against tha \fBreport\fP
edit option afta tha command completed.)
.LP
.SS scroll, scr
.LP
[Default (number of lines up in tha display -1)/2]
.LP
Da value of tha \fBscroll\fP edit option shall determine tha number
of lines scrolled by tha \fIex\fP <control>-D and
\fBz\fP commands. For tha \fIvi\fP <control>-D n' <control>-U commands,
it shall
be tha initial number of lines ta scroll when no previous <control>-D
or <control>-U command has been executed.
.SS sections
.LP
[Default up in tha POSIX locale \fBNHSHH HUnhsh\fP]
.LP
Da \fBsections\fP edit option shall define additionizzle section boundaries
for tha open n' visual mode commands. The
\fBsections\fP edit option can be set ta a cold-ass lil characta strang consisting
of zero or mo' characta pairs; it shall be a error to
set it ta a odd number of characters.
.SS shell, sh
.LP
[Default from tha environment variable \fISHELL ]\fP
.LP
Da value of dis option shall be a string. Da default shall be taken
from tha \fISHELL\fP environment variable. If the
\fISHELL\fP environment variable is null or empty, tha \fIsh\fP (see
\fIsh\fP ) utilitizzle shall be tha default.
.SS shiftwidth, sw
.LP
[Default 8]
.LP
Da value of dis option shall give tha width up in columnz of a indentation
level used durin autoindentation n' by tha shift
commandz ( \fB<\fP n' \fB>\fP).
.SS showmatch, sm
.LP
[Default \fIunset\fP]
.LP
Da functionalitizzle busted lyrics bout fo' tha \fBshowmatch\fP edit option need
not be supported on block-mode terminals or terminals with
insufficient capabilities.
.LP
If \fBshowmatch\fP is set, up in open or visual mode, when a \fB')'\fP
or \fB'}'\fP is typed, if tha matchin \fB'('\fP
or \fB'{'\fP is currently visible on tha display, tha matchin \fB'('\fP
or \fB'{'\fP shall be flagged movin tha cursor
to its location fo' a unspecified amount of time.
.SS showmode
.LP
[Default \fIunset\fP]
.LP
If \fBshowmode\fP is set, up in open or visual mode, tha current mode
that tha editor is up in shall be displayed on tha last line of
the display. Command mode n' text input mode shall be differentiated;
other unspecified modes n' implementation-defined
information may be displayed.
.SS slowopen
.LP
[Default \fIunset\fP]
.LP
If \fBslowopen\fP is set durin open n' visual text input modes,
the editor shall not update portionz of tha display other
than dem display line columns dat display tha charactas entered
by tha user (see \fIInput
Mode Commandz up in vi\fP ).
.SS tabstop, ts
.LP
[Default 8]
.LP
Da value of dis edit option shall specify tha column boundary used
by a <tab> up in tha display (see autoprint, ap n' \fIInput Mode Commands
in vi\fP ).
.SS taglength, tl
.LP
[Default zero]
.LP
Da value of dis edit option shall specify tha maximum number of
charactas dat is considered dope up in the
user-specified tag name n' up in tha tag name from tha tags file. If
the value is zero, all charactas up in both tag names shall be
significant.
.SS tags
.LP
[Default \fIsee text\fP]
.LP
Da value of dis edit option shall be a strang of <blank>-delimited
pathnamez of filez used by tha \fBtag\fP command.
Da default value is unspecified.
.SS term
.LP
[Default from tha environment variable \fITERM ]\fP
.LP
Da value of dis edit option shall be a string. Da default shall
be taken from tha \fITERM\fP variable up in tha environment. If
the \fITERM\fP environment variable is empty or null, tha default
is unspecified. Y'all KNOW dat shit, muthafucka! Da editor shall use tha value of dis edit
option ta determine tha type of tha display device.
.LP
Da thangs up in dis biatch is unspecified if tha user chizzlez tha value of tha term
edit option afta editor initialization.
.SS terse
.LP
[Default \fIunset\fP]
.LP
If \fBterse\fP is set, error lyrics may be less verbose yo. However,
except fo' dis caveat, error lyrics is unspecified.
Furthermore, not all error lyrics need chizzle fo' different settings
of dis option.
.SS warn
.LP
[Default \fIset\fP]
.LP
If \fBwarn\fP is set, n' tha contentz of tha edit buffer have been
modified since they was last straight-up written, the
editor shall write a warnin message before certain \fB!\fP commands
(see Escape ).
.SS window
.LP
[Default \fIsee text\fP]
.LP
A value used up in open n' visual mode, by tha <control>-B n' <control>-F
commands, and, up in visual mode, ta specify
the number of lines displayed when tha screen is repainted.
.LP
If tha \fB-w\fP command-line option aint specified, tha default
value shall be set ta tha value of tha \fILINES\fP
environment variable. If tha \fILINES\fP environment variable is empty
or null, tha default shall be tha number of lines up in the
display minus 1.
.LP
Settin tha \fBwindow\fP edit option ta zero or ta a value pimped outer
than tha number of lines up in tha display minus 1 (either
explicitly or based on tha \fB-w\fP option or tha \fILINES\fP environment
variable) shall cause tha \fBwindow\fP edit option to
be set ta tha number of lines up in tha display minus 1.
.LP
Da baud rate of tha terminal line may chizzle tha default up in a implementation-defined
manner.
.SS wrapmargin, wm
.LP
[Default 0]
.LP
If tha value of dis edit option is zero, it shall have no effect.
.LP
If not up in tha POSIX locale, tha effect of dis edit option is implementation-defined.
.LP
Otherwise, it shall specify a fuckin shitload of columns from tha endin margin
of tha terminal.
.LP
Durin open n' visual text input modes, fo' each characta fo' which
any part of tha characta is displayed up in a cold-ass lil column dat is
less than \fBwrapmargin\fP columns from tha endin margin of tha display
line, tha editor shall behave as bigs up:
.IP " 1." 4
If tha characta triggerin dis event be a <blank>, it, n' all immediately
precedin <blank>s on tha current line
entered durin tha execution of tha current text input command, shall
be discarded, n' tha editor shall behave as if tha user had
entered a single <newline> instead. Y'all KNOW dat shit, muthafucka! In addition, if tha next user-entered
characta be a <space>, it shall be discarded
as well.
.LP
.IP " 2." 4
Otherwise, if there be one or mo' <blank>s on tha current line immediately
precedin tha last crew of banged non-
<blank>s which was entered durin tha execution of tha current text
input command, tha <blank>s shall be replaced as if
the user had entered a single <newline> instead.
.LP
.LP
If tha \fBautoindent\fP edit option is set, n' tha events busted lyrics about
in 1. or 2. is performed, any <blank>s at or after
the cursor up in tha current line shall be discarded.
.LP
Da endin margin shall be determined by tha system or overridden
by tha user, as busted lyrics bout fo' \fICOLUMNS\fP up in the
ENVIRONMENT VARIABLES section n' tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Chapta 8, Environment Variables.
.SS wrapscan, ws
.LP
[Default \fIset\fP]
.LP
If \fBwrapscan\fP is set, searches (the \fIex\fP \fB/\fP or \fB?\fP
addresses, or open n' visual mode \fB/\fP, \fB?\fP,
\fBN\fP, n' \fBn\fP commands) shall wrap round tha beginnin or
end of tha edit buffer; when unset, searches shall stop at the
beginnin or end of tha edit buffer.
.SS writeany, wa
.LP
[Default \fIunset\fP]
.LP
If \fBwriteany\fP is set, a shitload of tha checks performed when executing
the \fIex\fP \fBwrite\fP commandz shall be inhibited,
as busted lyrics bout up in editor option \fBautowrite\fP.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
When any error is encountered n' tha standard input aint a terminal
device file, \fIex\fP shall not write tha file or return
to command or text input mode, n' shall terminizzle wit a non-zero
exit status.
.LP
Otherwise, when a unrecoverable error is encountered, it shall be
equivalent ta a SIGHUP asynchronous event.
.LP
Otherwise, when a error is encountered, tha editor shall behave as
specified up in Command Line Parsing
in ex .
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
If a SIGSEGV signal is received while \fIex\fP is savin a gangbangin' file, the
file might not be successfully saved.
.LP
Da \fBnext\fP command can accept mo' than one file, so usage such
as:
.sp
.RS
.nf

\fBnext `ls [abc]*`
\fP
.fi
.RE
.LP
is valid; it would not be valid fo' tha \fBedit\fP or \fBread\fP commands,
for example, cuz they expect only one file and
unspecified thangs up in dis biatch occur.
.SH EXAMPLES
.LP
None.
.SH RATIONALE
.LP
Da \fIex\fP/ \fIvi\fP justification is based on tha oldschool practice
found up in tha 4 BSD
and System V implementationz of \fIex\fP n' \fIvi\fP fo' realz. A freely redistributable
implementation
of \fIex\fP/ \fIvi\fP, which is trackin IEEE\ Std\ 1003.1-2001 fairly
closely, and
demonstrates tha intended chizzlez between oldschool implementations
and IEEE\ Std\ 1003.1-2001, may be obtained by
anonymous FTP from:
.sp
.RS
.nf

\fBftp://ftp.rdg.opengroup.org/pub/mirrors/nvi
\fP
.fi
.RE
.LP
A \fIrestricted editor\fP (both tha oldschool \fIred\fP utilitizzle and
modifications ta \fIex\fP) was considered n' rejected
for inclusion. I aint talkin' bout chicken n' gravy biatch. Neither option provided tha level of securitizzle that
users might expect.
.LP
It be recognized dat \fIex\fP visual mode n' related features would
be difficult, if not impossible, ta implement
satisfactorily on a funky-ass block-mode terminal, or a terminal without any
form of cursor addressing; thus, it aint a mandatory
requirement dat such features should work on all terminals. Well shiiiit, it is
the intention, however, dat a \fIex\fP implementation should
provide tha full set of capabilitizzles on all terminals capable of supporting
them.
.SS Options
.LP
Da \fB-c\fP replacement fo' \fB+\fP \fIcommand\fP was inspired by
the \fB-e\fP option of \fIsed\fP yo. Historically, all such commands
(see \fBedit\fP n' \fBnext\fP as well) was executed
from tha last line of tha edit buffer n' shit. This meant, fo' example, that
\fB"+/pattern"\fP would fail unless tha \fBwrapscan\fP
option was set. IEEE\ Std\ 1003.1-2001 requires conformizzle ta historical
practice yo. Historically, some implementations
restricted tha \fIex\fP commandz dat could be listed as part of the
command line arguments, n' you can put dat on yo' toast. For consistency,
IEEE\ Std\ 1003.1-2001 do not permit these restrictions.
.LP
In oldschool implementationz of tha editor, tha \fB-R\fP option (and
the \fBreadonly\fP edit option) only prevented
overwritin of files; appendin ta filez was still permitted, mapping
loosely tha fuck into tha \fIcsh\fP \fBnoclobber\fP variable. Right back up in yo muthafuckin ass. Some
implementations, however, aint followed dis semantic, n' \fBreadonly\fP
does not permit appendin either.
IEEE\ Std\ 1003.1-2001 bigs up tha latta practice, believin that
it be a mo' obvious n' intuitizzle meanin of
\fBreadonly\fP.
.LP
Da \fB-s\fP option suppresses all interactizzle user feedback n' is
useful fo' editin scripts up in batch thangs. Da list of
specific effects is oldschool practice. Da terminal type "incapable
of supportin open n' visual modes" has historically been
named "dumb".
.LP
Da \fB-t\fP option was required cuz tha \fIctags\fP utilitizzle appears
in
IEEE\ Std\ 1003.1-2001 n' tha option be available up in all historical
implementationz of \fIex\fP.
.LP
Historically, tha \fIex\fP n' \fIvi\fP utilitizzles accepted a \fB-x\fP
option, which did
encryption based on tha algorithm found up in tha oldschool \fIcrypt\fP
utility. Da \fB-x\fP option fo' encryption, n' the
associated \fIcrypt\fP utility, was omitted cuz tha algorithm
used was not specifiable n' tha export control lawz of some
nations make it hard as fuck ta export cryptographic technology. In addition,
it did not historically provide tha level of security
that playas might expect.
.SS Standard Input
.LP
An end-of-file condizzle aint equivalent ta a end-of-file character.
A common end-of-file character, <control>-D, is
historically a \fIex\fP command.
.LP
There was no maximum line length up in oldschool implementations of
\fIex\fP. Right back up in yo muthafuckin ass. Specifically, as dat shiznit was parsed up in chunks, the
addresses had a gangbangin' finger-lickin' different maximum length than tha filenames. Further,
the maximum line buffer size was declared as BUFSIZ, which
was different lengths on different systems. This version selected
the value of {LINE_MAX} ta impose a reasonable restriction on
portable usage of \fIex\fP n' ta aid test suite writas up in their
development of realistic tests dat exercise dis limit.
.SS Input Files
.LP
Dat shiznit was a explicit decision by tha standard pimpers dat a <newline>
be added ta any file lackin one. Dat shiznit was believed
that dis feature of \fIex\fP n' \fIvi\fP was relied on by users
in order ta make text files
lackin a trailin <newline> mo' portable. Well shiiiit, it is recognized that
this will require a user-specified option or extension for
implementations dat permit \fIex\fP n' \fIvi\fP ta edit filez of
type other than text if
such filez is not otherwise identified by tha system. Dat shiznit was agreed
that tha mobilitizzle ta edit filez of arbitrary type can be
useful yo, but dat shiznit was not considered necessary ta mandate dat a \fIex\fP
or \fIvi\fP
implementation be required ta handle filez other than text files.
.LP
Da paragraph up in tha INPUT FILES section, "By default, ...", is intended
to close a long-standin securitizzle problem in
\fIex\fP n' \fIvi\fP; dat of tha "modeline" or "modelines" edit
option. I aint talkin' bout chicken n' gravy biatch. This feature
allows any line up in tha straight-up original gangsta or last five linez of tha file containing
the strings \fB"ex:"\fP or \fB"vi:"\fP (and,
apparently, \fB"ei:"\fP or \fB"vx:"\fP ) ta be a line containin editor
commands, n' \fIex\fP interprets all tha text up to
the next \fB':'\fP or <newline> as a cold-ass lil command. Y'all KNOW dat shit, muthafucka! Consider tha consequences,
for example, of a unsuspectin user using
\fIex\fP or \fIvi\fP as tha editor when replyin ta a mail message
in which a line such
as:
.sp
.RS
.nf

\fBex:! rm -rf :
\fP
.fi
.RE
.LP
appeared up in tha signature lines. Da standard pimpers believed
strongly dat a editor should not by default interpret any
linez of a gangbangin' file. Vendors is straight fuckin urged ta delete dis feature
from they implementationz of \fIex\fP n' \fIvi\fP.
.SS Asynchronous Events
.LP
Da intention of tha phrase "complete write" is dat tha entire edit
buffer be freestyled ta stable storage. Da note regarding
temporary filez is intended fo' implementations dat use temporary
filez ta back edit buffers unnamed by tha user.
.LP
Historically, SIGQUIT was ignored by \fIex\fP yo, but was tha equivalent
of tha \fBQ\fP command up in visual mode; dat is, it
exited visual mode n' entered \fIex\fP mode. IEEE\ Std\ 1003.1-2001
permits yo, but do not require, dis behavior.
Historically, SIGINT was often used by \fIvi\fP playas ta terminate
text input mode (
<control>-C is often easier ta enta than <ESC>). Right back up in yo muthafuckin ass. Some implementations
of \fIvi\fP
alerted tha terminal on dis event, n' some did not. IEEE\ Std\ 1003.1-2001
requires dat SIGINT behave identically to
<ESC>, n' dat tha terminal not be alerted.
.LP
Historically, suspendin tha \fIex\fP editor durin text input mode
was similar ta SIGINT, as completed lines was retained,
but any partial line discarded, n' tha editor moonwalked back ta command
mode. IEEE\ Std\ 1003.1-2001 is silent on dis issue;
implementations is encouraged ta follow oldschool practice, where
possible.
.LP
Historically, tha \fIvi\fP editor did not treat SIGTSTP as a asynchronous
event, n' it was
therefore impossible ta suspend tha editor up in visual text input mode.
There is two major reasons fo' all dis bullshit. Da first is that
SIGTSTP be a funky-ass broadcast signal on UNIX systems, n' tha chain of events
where tha shell \fIexec\fPs a application dat then \fIexec\fPs \fIvi\fP
usually caused mad drama fo' the
terminal state if SIGTSTP was served up ta tha process crew up in the
default manner n' shit. Da second was dat most implementationz of the
UNIX \fIcurses\fP package is not reentrant, n' tha receipt of SIGTSTP
at tha wack time will cause dem ta crash.
IEEE\ Std\ 1003.1-2001 is silent on dis issue; implementations are
encouraged ta treat suspendaz as a asynchronous event
if possible.
.LP
Historically, modifications ta tha edit buffer made before SIGINT
interrupted a operation was retained; dat is, anywhere from
zero ta all of tha lines ta be modified might done been modified by
the time tha SIGINT arrived. Y'all KNOW dat shit, muthafucka! These chizzlez was not discarded
by tha arrival of SIGINT. IEEE\ Std\ 1003.1-2001 permits dis behavior,
notin dat tha \fBundo\fP command is required to
be able ta undo these partially completed commands.
.LP
Da action taken fo' signals other than SIGINT, SIGCONT, SIGHUP, and
SIGTERM is unspecified cuz some implementations attempt
to save tha edit buffer up in a useful state when other signals is received.
.SS Standard Error
.LP
For \fIex\fP/ \fIvi\fP, diagnostic lyrics is dem lyrics reported
as a result of a
failed attempt ta invoke \fIex\fP or \fIvi\fP, like fuckin invalid options
or insufficient
resources, or a abnormal termination condition. I aint talkin' bout chicken n' gravy biatch. Diagnostic lyrics
should not be trippin wit tha error lyrics generated by
inappropriate or illegal user commands.
.SS Initialization up in ex n' vi
.LP
If a \fIex\fP command (other than \fBcd\fP, \fBchdir\fP, or \fBsource\fP)
has a gangbangin' filename argument, one or both of the
alternate n' current pathnames is ghon be set. Informally, they are
set as bigs up:
.IP " 1." 4
If tha \fIex\fP command is one dat replaces tha contentz of tha edit
buffer, n' it succeeds, tha current pathname is ghon be set
to tha filename argument (the first filename argument up in tha case
of tha \fBnext\fP command) n' tha alternate pathname will be
set ta tha previous current pathname, if there was one.
.LP
.IP " 2." 4
In tha case of tha file read/write formz of tha \fBread\fP n' \fBwrite\fP
commands, if there is no current pathname, the
current pathname is ghon be set ta tha filename argument.
.LP
.IP " 3." 4
Otherwise, tha alternate pathname is ghon be set ta tha filename argument.
.LP
.LP
For example, \fB:edit foo\fP n' \fB:recover foo\fP, when successful,
set tha current pathname, and, if there was a previous
current pathname, tha alternate pathname. Da commandz \fB:write\fP,
\fB!command\fP, n' \fB:edit\fP set neither tha current or
alternate pathnames. If tha \fB:edit foo\fP command was ta fail for
some reason, tha alternate pathname would be set. The
\fBread\fP n' \fBwrite\fP commandz set tha alternate pathname to
their \fIfile\fP argument, unless tha current pathname is not
set, up in which case they set tha current pathname ta they \fIfile\fP
arguments, n' you can put dat on yo' toast. Da alternate pathname was not historically set by
the \fB:source\fP command. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice. Implementations adding
commandz dat take filenames as arguments is encouraged ta set the
alternate pathname as busted lyrics bout here.
.LP
Historically, \fIex\fP n' \fIvi\fP read tha \fB.exrc\fP file up in the
\fI$HOME\fP
directory twice, if tha editor was executed up in tha \fI$HOME\fP directory.
IEEE\ Std\ 1003.1-2001 prohibits this
behavior.
.LP
Historically, tha 4 BSD \fIex\fP n' \fIvi\fP read tha \fI$HOME\fP
and local \fB.exrc\fP
filez if they was owned by tha real ID of tha user, or tha \fBsourceany\fP
option was set, regardless of other considerations.
This was a securitizzle problem cuz it is possible ta put aiiight UNIX
system commandz inside a \fB.exrc\fP file.
IEEE\ Std\ 1003.1-2001 do not specify tha \fBsourceany\fP option,
and oldschool implementations is encouraged to
delete dat shit.
.LP
Da \fB.exrc\fP filez must be owned by tha real ID of tha user, and
not writable by mah playas other than tha balla n' shit. The
appropriate privileges exception is intended ta permit playas ta acquire
special privileges yo, but continue ta use tha \fB.exrc\fP
filez up in they home directories.
.LP
System V Release 3.2 n' lata \fIvi\fP implementations added the
option \fB[no]exrc\fP.
Da behavior is dat local \fB.exrc\fP filez is read-only if the
\fBexrc\fP option is set. Da default fo' tha \fBexrc\fP
option was off, so by default, local \fB.exrc\fP filez was not read.
Da problem dis was intended ta solve was dat System V
permitted playas ta give away files, so there is no possible ballership
or writeabilitizzle test ta ensure dat tha file is safe. This is
still a securitizzle problem on systems where playas can give away files,
but there is not a god damn thang additionizzle that
IEEE\ Std\ 1003.1-2001 can do. Da implementation-defined exception
is intended ta permit crews ta have local \fB.exrc\fP
filez dat is shared by users, by bustin pseudo-users ta own the
shared files.
.LP
IEEE\ Std\ 1003.1-2001 do not mention system-wide \fIex\fP n' \fIvi\fP
start-up
files. While they exist up in nuff muthafuckin implementationz of \fIex\fP and
\fIvi\fP, they is not
present up in any implementations considered oldschool practice by IEEE\ Std\ 1003.1-2001.
Implementations dat have such
filez should use dem only if they is owned by tha real user ID or
an appropriate user (for example, root on UNIX systems) n' if
they is not writable by any user other than they balla n' shit. Right back up in yo muthafuckin ass. System-wide
start-up filez should be read before tha \fIEXINIT\fP
variable, \fB$HOME/.exrc\fP, or local \fB.exrc\fP filez is evaluated.
.LP
Historically, any \fIex\fP command could be entered up in tha \fIEXINIT\fP
variable or tha \fB.exrc\fP file, although ones
requirin dat tha edit buffer already contain linez of text generally
caused oldschool implementationz of tha editor ta drop
\fBcore\fP. IEEE\ Std\ 1003.1-2001 requires dat any \fIex\fP command
be permitted up in tha \fIEXINIT\fP variable and
\fB\&.exrc\fP files, fo' simplicitizzle of justification n' consistency,
although nuff of dem will obviously fail under many
circumstances.
.LP
Da initialization of tha contentz of tha edit buffer uses tha phrase
"the effect shall be" wit regard ta various \fIex\fP
commands. Da intent of dis phrase is dat edit buffer contents loaded
durin tha initialization phase not be lost; dat is,
loadin tha edit buffer should fail if tha \fB.exrc\fP file read in
the contentz of a gangbangin' file n' did not subsequently write tha edit
buffer n' shiznit fo' realz. An additionizzle intent of dis phrase is ta specify dat the
initial current line n' column is set as specified fo' the
individual \fIex\fP commands.
.LP
Historically, tha \fB-t\fP option behaved as if tha tag search were
a \fB+\fP \fIcommand\fP; dat is, dat shiznit was executed from
the last line of tha file specified by tha tag. This resulted up in the
search failin if tha pattern was a gangbangin' forward search pattern and
the \fBwrapscan\fP edit option was not set. IEEE\ Std\ 1003.1-2001
does not permit dis behavior, requirin dat the
search fo' tha tag pattern be performed on tha entire file, and, if
not found, dat tha current line be set ta a mo' reasonable
location up in tha file.
.LP
Historically, tha empty edit buffer presented fo' editin when a gangbangin' file
was not specified by tha user was unnamed. Y'all KNOW dat shit, muthafucka! This is
permitted by IEEE\ Std\ 1003.1-2001; however, implementations are
encouraged ta provide playas a temporary filename fo' this
buffer cuz it permits dem tha use of \fIex\fP commandz dat use
the current pathname durin temporary edit sessions.
.LP
Historically, tha file specified rockin tha \fB-t\fP option was not
part of tha current argument list. This practice is
permitted by IEEE\ Std\ 1003.1-2001; however, implementations are
encouraged ta include its name up in tha current argument
list fo' consistency.
.LP
Historically, tha \fB-c\fP command was generally not executed until
a file dat already exists was edited.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta dis oldschool practice.
Commandz dat could cause tha \fB-c\fP command to
be executed include tha \fIex\fP commandz \fBedit\fP, \fBnext\fP,
\fBrecover\fP, \fBrewind\fP, n' \fBtag\fP, n' tha \fIvi\fP commands
<control>-^ n' <control>-] yo. Historically, readin a gangbangin' file tha fuck into an
edit buffer did not cause tha \fB-c\fP command ta be executed (even
though it might set tha current pathname) wit tha exception
that it did cause tha \fB-c\fP command ta be executed if: tha editor
was up in \fIex\fP mode, tha edit buffer had no current
pathname, tha edit buffer was empty, n' no read commandz had yet
been attempted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For consistency n' simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 do not permit dis behavior.
.LP
Historically, tha \fB-r\fP option was tha same ol' dirty as a aiiight edit session
if there was no recovery shiznit available fo' the
file. This allowed playas ta enter:
.sp
.RS
.nf

\fBvi -r *.c
\fP
.fi
.RE
.LP
and recover whatever filez was recoverable. In some implementations,
recovery was attempted only on tha straight-up original gangsta file named, and
the file was not entered tha fuck into tha argument list; up in others, recovery
was attempted fo' each file named. Y'all KNOW dat shit, muthafucka! In addition, some
historical implementations ignored \fB-r\fP if \fB-t\fP was specified
or did not support command line \fIfile\fP arguments with
the \fB-t\fP option. I aint talkin' bout chicken n' gravy biatch. For consistency n' simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 disallows these special
cases, n' requires dat recovery be attempted tha last time each
file is edited.
.LP
Historically, \fIvi\fP initialized tha \fB`\fP n' \fB'\fP marks,
but \fIex\fP did not.
This meant dat if tha straight-up original gangsta command up in \fIex\fP mode was \fBvisual\fP
or if a \fIex\fP command was executed first (for
example, \fIvi\fP +10 \fIfile\fP), \fIvi\fP was entered
without tha marks bein initialized. Y'all KNOW dat shit, muthafucka! Because tha standard pimpers
believed tha marks ta be generally useful, n' fo' consistency
and simplicitizzle of justification, IEEE\ Std\ 1003.1-2001 requires that
they always be initialized if up in open or visual mode,
or if up in \fIex\fP mode n' tha edit buffer aint empty. Not initializing
it up in \fIex\fP mode if tha edit buffer is empty is
historical practice; however, it has always been possible ta set (and
use) marks up in empty edit buffers up in open n' visual mode edit
sessions.
.SS Addressing
.LP
Historically, \fIex\fP n' \fIvi\fP accepted tha additionizzle addressing
forms \fB'\\/'\fP
and \fB'\\?'\fP . They was equivalent ta \fB"//"\fP n' \fB"??"\fP,
respectively. They is not required by
IEEE\ Std\ 1003.1-2001, mostly cuz no muthafucka can remember whether
they eva did anythang different historically.
.LP
Historically, \fIex\fP n' \fIvi\fP permitted a address of zero for
several commands, and
permitted tha \fB%\fP address up in empty filez fo' others. For consistency,
IEEE\ Std\ 1003.1-2001 requires support fo' the
forma up in tha few commandz where it make sense, n' disallows it
otherwise. In addition, cuz IEEE\ Std\ 1003.1-2001
requires dat \fB%\fP be logically equivalent ta \fB"1,$"\fP, it
is also supported where it make sense n' disallowed
otherwise.
.LP
Historically, tha \fB%\fP address could not be followed by further
addresses. For consistency n' simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 requires dat additionizzle addresses be supported.
.LP
All of tha followin is valid \fIaddresses\fP:
.TP 7
\fB+++\fP
Three lines afta tha current line.
.TP 7
\fB/\fP\fIre\fP\fB/-\fP
One line before tha next occurrence of \fIre\fP.
.TP 7
\fB-2\fP
Two lines before tha current line.
.TP 7
\fB3\ ----\ 2\fP
Line one (note intermediate wack address).
.TP 7
\fB1\ 2\ 3\fP
Line six.
.sp
.LP
Any number of addresses can be provided ta commandz takin addresses;
for example, \fB"1,2,3,4,5p"\fP prints lines 4 n' 5,
because two is tha top billin valid number of addresses accepted by
the \fBprint\fP command. Y'all KNOW dat shit, muthafucka! This, up in combination wit tha semicolon
delimiter, permits playas ta create commandz based on ordered patterns
in tha file. For example, tha command \fB3;/foo/;+2print\fP
will display tha straight-up original gangsta line afta line 3 dat gotz nuff tha pattern
\fIfoo\fP, plus tha next two lines. Note dat tha address
\fB3;\fP must be evaluated before bein discarded cuz tha search
origin fo' tha \fB/foo/\fP command dependz on all dis bullshit.
.LP
Historically, joints could be added ta addresses by includin them
afta one or mo' <blank>s; fo' example,
\fB3\ -\ 5p\fP freestyled tha seventh line of tha file, n' \fB/foo/\ 5\fP
was tha same ol' dirty as \fB/foo/+5\fP. But fuck dat shiznit yo, tha word on tha street is dat only
absolute joints could be added; fo' example, \fB5\ /foo/\fP was an
error. Shiiit, dis aint no joke. IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice fo' realz. Address offsets is separately specified from
addresses cuz they could historically be provided to
visual mode search commands.
.LP
Historically, any missin addresses defaulted ta tha current line.
This was legit fo' leadin n' trailin comma-delimited
addresses, n' fo' trailin semicolon-delimited addresses. For consistency,
IEEE\ Std\ 1003.1-2001 requires it fo' leading
semicolon addresses as well.
.LP
Historically, \fIex\fP n' \fIvi\fP accepted tha \fB'^'\fP character
as both a address
and as a gangbangin' flag offset fo' commands. In both cases dat shiznit was identical
to tha \fB'-'\fP character n' shit. IEEE\ Std\ 1003.1-2001
does not require or prohibit dis behavior.
.LP
Historically, tha enhancements ta basic regular expressions could
be used up in addressing; fo' example, \fB'~'\fP,
\fB'\\<'\fP, n' \fB'\\>'\fP . IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice; dat is, that
regular expression usage be consistent, n' dat regular expression
enhancements be supported wherever regular expressions are
used.
.SS Command Line Parsin up in ex
.LP
Oldschool \fIex\fP command parsin was even mo' complex than that
busted lyrics bout here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. IEEE\ Std\ 1003.1-2001 requires the
subset of tha command parsin dat tha standard pimpers believed
was documented n' dat playas could reasonably be sposed ta fuckin
use up in a portable fashion, n' dat was historically consistent between
implementations. (Da discarded functionalitizzle is obscure,
at best.) Oldschool implementations will require chizzlez up in order
to comply wit IEEE\ Std\ 1003.1-2001; however, users
are not sposed ta fuckin notice any of these chizzles. Most of tha complexity
in \fIex\fP parsin is ta handle three special termination
cases:
.IP " 1." 4
Da \fB!\fP, \fBglobal\fP, \fBv\fP, n' tha filta versionz of the
\fBread\fP n' \fBwrite\fP commandz is delimited by
<newline>s (they can contain vertical-line charactas dat is usually
shell pipes).
.LP
.IP " 2." 4
Da \fBex\fP, \fBedit\fP, \fBnext\fP, n' \fBvisual\fP up in open and
visual mode commandz all take \fIex\fP commands,
optionally containin vertical-line characters, as they first arguments.
.LP
.IP " 3." 4
Da \fBs\fP command takes a regular expression as its first argument,
and uses tha delimitin charactas ta delimit the
command.
.LP
.LP
Historically, vertical-line charactas up in tha \fB+\fP \fIcommand\fP
argument of tha \fBex\fP, \fBedit\fP, \fBnext\fP,
\fBvi\fP, n' \fBvisual\fP commands, n' up in tha \fIpattern\fP and
\fIreplacement\fP partz of tha \fBs\fP command, did not
delimit tha command, n' up in tha filta cases fo' \fBread\fP n' \fBwrite\fP,
and tha \fB!\fP, \fBglobal\fP, n' \fBv\fP
commands, they did not delimit tha command at all. For example, the
followin commandz is all valid:
.sp
.RS
.nf

\fB:\fP\fBedit +25 | s/abc/ABC/ file.c
\fP\fB:\fP\fBs/ | /PIPE/
\fP\fB:\fP\fBread !spell % | columnate
\fP\fB:\fP\fBglobal/pattern/p | l
\fP\fB:\fP\fBs/a/b/ | s/c/d | set
\fP
.fi
.RE
.LP
Historically, empty or <blank> filled lines up in \fB.exrc\fP filez and
\fBsource\fPd filez (as well as \fIEXINIT\fP
variablez n' \fIex\fP command scripts) was treated as default commands;
that is, \fBprint\fP commands.
IEEE\ Std\ 1003.1-2001 specifically requires dat they be ignored
when encountered up in \fB.exrc\fP n' \fBsource\fPd files
to eliminizzle a cold-ass lil common source of freshly smoked up user error.
.LP
Historically, \fIex\fP commandz wit multiple adjacent (or <blank>-separated)
vertical lines was handled oddly when
executed from \fIex\fP mode. For example, tha command \fB|||\fP <carriage-return>,
when tha cursor was on line 1, displayed
lines 2, 3, n' 5 of tha file. In addition, tha command \fB|\fP would
only display tha line afta tha next line, instead of the
next two lines. Da forma hit dat shiznit mo' logically when executed from
\fIvi\fP mode, and
displayed lines 2, 3, n' 4. IEEE\ Std\ 1003.1-2001 requires tha \fIvi\fP
behavior;
that is, a single default command n' line number increment fo' each
command separator, n' trailin <newline>s after
vertical-line separators is discarded.
.LP
Historically, \fIex\fP permitted a single extra colon as a leading
command character; fo' example, \fB:g/pattern/:p\fP was a
valid command. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 generalizes dis ta require
that any number of leadin colon charactas be
stripped.
.LP
Historically, any prefix of tha \fBdelete\fP command could be followed
without intervenin <blank>s by a gangbangin' flag character
because up in tha command \fBd\ p\fP, \fIp\fP is interpreted as tha buffer
\fIp\fP. IEEE\ Std\ 1003.1-2001 requires
conformizzle ta oldschool practice.
.LP
Historically, tha \fBk\fP command could be followed by tha mark name
without intervenin <blank>s.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta oldschool practice.
.LP
Historically, tha \fBs\fP command could be immediately followed by
flag n' option characters; fo' example,
\fBs/e/E/|s|sgc3p\fP was a valid command. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat flag characters
could not stand alone; fo' example, tha commandz \fBsp\fP and
\fBs\ l\fP would fail, while tha command \fBsgp\fP n' \fBs\ gl\fP
would succeed. Y'all KNOW dat shit, muthafucka! (Obviously, tha \fB'#'\fP flag
characta was used as a thugged-out delimita characta if it followed tha command.)
Another issue was dat option charactas had ta precede
flag charactas even when tha command was straight-up specified; fo' example,
the command \fBs/e/E/pg\fP would fail, while tha command
\fBs/e/E/gp\fP would succeed. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice.
.LP
Historically, tha straight-up original gangsta command name dat had a prefix matchin the
input from tha user was tha executed command; fo' example,
\fBve\fP, \fBver\fP, n' \fBvers\fP all executed tha \fBversion\fP
command. Y'all KNOW dat shit, muthafucka! Commandz was up in a specific order, however, so that
\fBa\fP matched \fBappend\fP, not \fBabbreviate\fP. IEEE\ Std\ 1003.1-2001
requires conformizzle ta oldschool practice.
Da restriction on command search order fo' implementations wit extensions
is ta avoid tha addizzle of commandz such dat the
historical prefixes would fail ta work portably.
.LP
Oldschool implementationz of \fIex\fP n' \fIvi\fP did not erectly
handle multiple
\fIex\fP commands, separated by vertical-line characters, dat entered
or exited visual mode or tha editor. Shiiit, dis aint no joke. Because
implementationz of \fIvi\fP exist dat do not exhibit dis failure
mode,
IEEE\ Std\ 1003.1-2001 do not permit dat shit.
.LP
Da requirement dat alphabetic command names consist of all following
alphabetic charactas up ta tha next non-alphabetic
characta means dat alphabetic command names must be separated from
their arguments by one or mo' non-alphabetic characters,
normally a <blank> or \fB'!'\fP character, except as specified for
the exceptions, tha \fBdelete\fP, \fBk\fP, and
\fBs\fP commands.
.LP
Historically, tha repeated execution of tha \fIex\fP default \fBprint\fP
commandz ( <control>-D, \fIeof\fP,
<newline>, <carriage-return>) erased any promptin characta n' displayed
the next lines without scrollin the
terminal; dat is, immediately below any previously displayed lines.
This provided a cold-ass lil cleaner presentation of tha lines up in tha file
for tha user n' shit. IEEE\ Std\ 1003.1-2001 do not require dis behavior
because it may be impossible up in some thangs;
however, implementations is straight fuckin encouraged ta provide dis semantic
if possible.
.LP
Historically, dat shiznit was possible ta chizzle filez up in tha middle of a cold-ass lil command,
and have tha rest of tha command executed up in tha new
file; fo' example:
.sp
.RS
.nf

\fB:edit +25 file.c | s/abc/ABC/ | 1
\fP
.fi
.RE
.LP
was a valid command, n' tha substitution was attempted up in tha newly
edited file. IEEE\ Std\ 1003.1-2001 requires
conformizzle ta oldschool practice. Da followin commandz is examples
that exercise tha \fIex\fP parser:
.sp
.RS
.nf

\fBecho 'foo | bar' > file1; echo 'foo/bar' > file2;
vi
:edit +1 | s/|/PIPE/ | w file1 | e file2 | 1 | s/\\//SLASH/ | wq
\fP
.fi
.RE
.LP
Historically, there was no protection up in editor implementations to
avoid \fIex\fP \fBglobal\fP, \fBv\fP, \fB@\fP, or
\fB*\fP commandz changin edit buffers durin execution of they associated
commands. Because dis would almost invariably result
in catastrophic failure of tha editor, n' implementations exist that
do exhibit these problems, IEEE\ Std\ 1003.1-2001
requires dat changin tha edit buffer durin a \fBglobal\fP or \fBv\fP
command, or durin a \fB@\fP or \fB*\fP command for
which there is ghon be mo' than a single execution, be a error. Shiiit, dis aint no joke. Implementations
supportin multiple edit buffers simultaneously are
strongly encouraged ta apply tha same semantics ta switchin between
buffers as well.
.LP
Da \fIex\fP command quotin required by IEEE\ Std\ 1003.1-2001 is
a superset of tha quotin up in historical
implementationz of tha editor. Shiiit, dis aint no joke. For example, dat shiznit was not historically
possible ta escape a <blank> up in a gangbangin' filename; fo' example,
\fB:edit\ foo\\\\\\\ bar\fP would report dat too nuff filenames had
been entered fo' tha edit command, n' there was no
method of escapin a <blank> up in tha straight-up original gangsta argument of a \fBedit\fP,
\fBex\fP, \fBnext\fP, or \fBvisual\fP command at
all. IEEE\ Std\ 1003.1-2001 extendz oldschool practice, requiring
that quotin behavior be made consistent across all
\fIex\fP commands, except fo' tha \fBmap\fP, \fBunmap\fP, \fBabbreviate\fP,
and \fBunabbreviate\fP commands, which
historically used <control>-V instead of backslashes fo' quoting.
For dem four commands, IEEE\ Std\ 1003.1-2001
requires conformizzle ta oldschool practice.
.LP
Backslash quotin up in \fIex\fP is non-intuitive. Backslash escapes
are ignored unless they escape a special character; for
example, when struttin \fIfile\fP argument expansion, tha string
\fB"\\\\%"\fP is equivalent ta \fB'\\%'\fP, not
\fB"\\<\fP\fIcurrent\ pathname\fP\fB>"\fP. This can be confusin for
users cuz backslash is probably one of the
charactas dat causes shell expansion ta be performed, n' therefore
shell quotin rulez must be taken tha fuck into consideration.
Generally, quotin charactas is only considered if they escape a
special character, n' a quotin characta must be provided for
each layer of parsin fo' which tha characta is special. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. As another
example, only a single backslash is necessary fo' the
\fB'\\l'\fP sequence up in substitute replacement patterns, cuz the
characta \fB'l'\fP aint special ta any parsin layer
above dat shit.
.LP
<control>-V quotin up in \fIex\fP is slightly different from backslash
quoting. In tha four commandz where
<control>-V quotin applies ( \fBabbreviate\fP, \fBunabbreviate\fP,
\fBmap\fP, n' \fBunmap\fP), any characta may be
escaped by a <control>-V whether it would gotz a special meanin or
not. IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice.
.LP
Oldschool implementationz of tha editor did not require delimiters
within characta classes ta be escaped; fo' example, the
command \fB:s/[/]//\fP on tha strang \fB"xxx/yyy"\fP would delete
the \fB'/'\fP from tha string.
IEEE\ Std\ 1003.1-2001 disallows dis oldschool practice fo' consistency
and cuz it places a big-ass burden on
implementations by requirin dat knowledge of regular expressions
be built tha fuck into tha editor parser.
.LP
Historically, quotin <newline>s up in \fIex\fP commandz was handled
inconsistently. In most cases, tha <newline>
always terminated tha command, regardless of any precedin escape
character, cuz backslash charactas did not escape
<newline>s fo' most \fIex\fP commands. But fuck dat shiznit yo, tha word on tha street is dat some \fIex\fP commands
(for example, \fBs\fP, \fBmap\fP, and
\fBabbreviation\fP) permitted <newline>s ta be escaped (although in
the case of \fBmap\fP n' \fBabbreviation\fP,
<control>-V charactas escaped dem instead of backslashes). This
was legit up in not only tha command line yo, but also
\fB\&.exrc\fP n' \fBsource\fPd files. For example, tha command:
.sp
.RS
.nf

\fBmap = foo<control-V><newline>bar
\fP
.fi
.RE
.LP
would succeed, although dat shiznit was sometimes hard as fuck ta git tha <control>-V
and tha banged <newline> passed ta the
\fIex\fP parser n' shit. For consistency n' simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 requires dat it be possible to
escape <newline>s up in \fIex\fP commandz at all times, rockin backslashes
for most \fIex\fP commands, n' using
<control>-V charactas fo' tha \fBmap\fP n' \fBabbreviation\fP commands.
For example, tha command \fBprint\fP
<newline> \fBlist\fP is required ta be parsed as tha single command
\fBprint\fP <newline> \fBlist\fP. While this
differs from oldschool practice, IEEE\ Std\ 1003.1-2001 pimpers
believed it unlikely dat any script or user depended
on tha oldschool behavior.
.LP
Historically, a error up in a cold-ass lil command specified rockin tha \fB-c\fP option
did not cause tha rest of tha \fB-c\fP commandz ta be
discarded. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 disallows dis fo' consistency with
mapped keys, tha \fB@\fP, \fBglobal\fP,
\fBsource\fP, n' \fBv\fP commands, tha \fIEXINIT\fP environment variable,
and tha \fB.exrc\fP files.
.SS Input Editin up in ex
.LP
One of tha common usez of tha oldschool \fIex\fP editor is over slow
network connections. Editors dat run up in canonical mode
can require far less traffic ta n' from, n' far less processing
on, tha host machine, as well as mo' easily supporting
block-mode terminals. For these reasons, IEEE\ Std\ 1003.1-2001 requires
that \fIex\fP be implemented rockin canonical mode
input processing, as was done historically.
.LP
IEEE\ Std\ 1003.1-2001 do not require tha oldschool 4 BSD input
editin charactas "word erase" or "literal
next". For dis reason, it is unspecified how tha fuck they is handled by
\fIex\fP, although they must have tha required effect.
Implementations dat resolve dem afta tha line has been ended using
a <newline> or <control>-M character, and
implementations dat rely on tha underlyin system terminal support
for dis processing, is both conforming. Implementations are
strongly urged ta use tha underlyin system functionality, if at all
possible, fo' compatibilitizzle wit other system text input
interfaces.
.LP
Historically, when tha \fIeof\fP characta was used ta decrement the
\fBautoindent\fP level, tha cursor moved ta display the
new end of tha \fBautoindent\fP charactas yo, but did not move tha cursor
to a freshly smoked up line, nor done did it erase tha <control>-D
characta from tha line. IEEE\ Std\ 1003.1-2001 do not specify that
the cursor remain on tha same line or dat tha rest
of tha line is erased; however, implementations is straight fuckin encouraged
to provide tha dopest possible user intercourse; dat is, the
cursor should remain on tha same line, n' any <control>-D character
on tha line should be erased.
.LP
IEEE\ Std\ 1003.1-2001 do not require tha oldschool 4 BSD input
editin characta "reprint", traditionally
<control>-R, which redisplayed tha current input from tha user n' shit. For
this reason, n' cuz tha functionalitizzle cannot be
implemented afta tha line has been terminated by tha user, IEEE\ Std\ 1003.1-2001
makes no requirements bout this
functionality. Implementations is straight fuckin urged ta make dis historical
functionalitizzle available, if possible.
.LP
Historically, <control>-Q did not big-ass up a literal next function
in \fIex\fP, as it did up in \fIvi\fP. IEEE\ Std\ 1003.1-2001 requires
conformizzle ta oldschool practice ta avoid breaking
historical \fIex\fP scripts n' \fB.exrc\fP files.
.SS eof
.LP
Whether tha \fIeof\fP characta immediately modifies tha \fBautoindent\fP
charactas up in tha prompt is left unspecified so that
implementations can conform up in tha presence of systems dat do not
support dis functionality. Implementations is encouraged to
modify tha line n' redisplay it immediately, if possible.
.LP
Da justification of tha handlin of tha \fIeof\fP characta differs
from oldschool practice only up in dat \fIeof\fP
charactas is not discarded if they follow aiiight charactas up in the
text input yo. Historically, they was always discarded.
.SS Command Descriptions up in ex
.LP
Historically, nuff muthafuckin commandz (for example, \fBglobal\fP, \fBv\fP,
\fBvisual\fP, \fBs\fP, \fBwrite\fP, \fBwq\fP,
\fByank\fP, \fB!\fP, \fB<\fP, \fB>\fP, \fB&\fP, n' \fB~\fP) were
executable up in empty filez (that is, the
default address(es) was 0), or permitted explicit addressez of 0
(for example, 0 was a valid address, or 0,0 was a valid range).
Addressez of 0, or command execution up in a empty file, make sense
only fo' commandz dat add freshly smoked up text ta tha edit buffer or write
commandz (because playas may wish ta write empty files). IEEE\ Std\ 1003.1-2001
requires dis behavior fo' such commandz and
disallows it otherwise, fo' consistency n' simplicitizzle of justification.
.LP
A count ta a \fIex\fP command has been historically erected to
be no pimped outa than tha last line up in a gangbangin' file; fo' example, up in a
five-line file, tha command \fB1,6print\fP would fail yo, but tha command
\fB1print300\fP would succeed.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta oldschool practice.
.LP
Historically, tha use of flags up in \fIex\fP commandz could be obscure.
General oldschool practice was as busted lyrics bout by
IEEE\ Std\ 1003.1-2001 yo, but there was some special cases. For instance,
the \fBlist\fP, \fBnumber\fP, n' \fBprint\fP
commandz ignored trailin address offsets; fo' example, \fB3p\ +++#\fP
would display line 3, n' 3 would be tha current line
afta tha execution of tha command. Y'all KNOW dat shit, muthafucka! Da \fBopen\fP n' \fBvisual\fP
commandz ignored both tha trailin offsets n' tha trailing
flags fo' realz. Also, flags specified ta tha \fBopen\fP n' \fBvisual\fP commands
interacted badly wit tha \fBlist\fP edit option, and
settin n' then unsettin it durin tha open/visual session would
cause \fIvi\fP ta stop
displayin lines up in tha specified format. For consistency n' simplicity
of justification, IEEE\ Std\ 1003.1-2001 do not
permit any of these exceptions ta tha general rule.
.LP
IEEE\ Std\ 1003.1-2001 uses tha word \fIcopy\fP up in nuff muthafuckin places
when discussin buffers. This aint intended to
imply implementation.
.LP
Historically, \fIex\fP playas could not specify numeric buffers cuz
of tha ambiguitizzle dis would cause; fo' example, up in the
command \fB3\ delete\ 2\fP, it is unclear whether 2 be a funky-ass buffer name
or a \fIcount\fP. IEEE\ Std\ 1003.1-2001
requires conformizzle ta oldschool practice by default yo, but do not
preclude extensions.
.LP
Historically, tha contentz of tha unnamed buffer was frequently discarded
afta commandz dat did not explicitly affect it; for
example, when rockin tha \fBedit\fP command ta switch files. For consistency
and simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 do not permit dis behavior.
.LP
Da \fIex\fP utilitizzle did not historically have access ta tha numeric
buffers, and, furthermore, deletin lines up in \fIex\fP did
not modify they contents, n' you can put dat on yo' toast. For example, if, afta bustin a thugged-out delete in
\fIvi\fP, tha user switched
to \fIex\fP, did another delete, n' then switched back ta \fIvi\fP,
the contentz of the
numeric buffers would not have chizzled. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 requires
conformizzle ta oldschool practice. Numeric buffers
are busted lyrics bout up in tha \fIex\fP utilitizzle up in order ta confine tha description
of buffers ta a single location in
IEEE\ Std\ 1003.1-2001.
.LP
Da metacharactas dat trigger shell expansion up in \fIfile\fP arguments
match oldschool practice, as do tha method fo' bustin
shell expansion. I aint talkin' bout chicken n' gravy biatch. Implementations wishin ta provide playas wit the
flexibilitizzle ta alta tha set of metacharactas is encouraged to
provide a \fBshellmeta\fP strang edit option.
.LP
Historically, \fIex\fP commandz executed from \fIvi\fP refreshed the
screen when it did not
strictly need ta do so; fo' example, \fB:!date\ >\ /dev/null\fP do
not require a screen refresh cuz tha output of
the UNIX \fIdate\fP command requires only a single line of tha screen.
IEEE\ Std\ 1003.1-2001 requires dat tha screen be refreshed if it
has been overwritten yo, but make no requirements as to
how a implementation should make dat determination. I aint talkin' bout chicken n' gravy biatch. Implementations
may prompt n' refresh tha screen regardless.
.SS Abbreviate
.LP
Oldschool practice was dat charactas dat was entered as part
of a abbreviation replacement was subject ta \fBmap\fP
expansions, tha \fBshowmatch\fP edit option, further abbreviation
expansions, n' so on; dat is, they was logically pushed onto
the terminal input queue, n' was not a simple replacement. IEEE\ Std\ 1003.1-2001
requires conformizzle ta historical
practice. Oldschool practice was dat whenever a non-word character
(that had not been escaped by a <control>-V) was entered
afta a word character, \fIvi\fP would check fo' abbreviations. The
check was based on tha type
of tha characta entered before tha word characta of tha word/non-word
pair dat triggered tha check. Da word characta of the
word/non-word pair dat triggered tha check n' all charactas entered
before tha trigger pair dat waz of dat type was included
in tha check, wit tha exception of <blank>s, which always delimited
the abbreviation.
.LP
This means that, fo' tha abbreviation ta work, tha \fIlhs\fP must
end wit a word character, there can be no transitions from
word ta non-word charactas (or \fIvice versa\fP) other than between
the last n' next-to-last charactas up in tha \fIlhs\fP, and
there can be no <blank>s up in tha \fIlhs\fP. In addition, cuz of
the oldschool quotin rules, dat shiznit was impossible ta enter
a literal <control>-V up in tha \fIlhs\fP. IEEE\ Std\ 1003.1-2001 requires
conformizzle ta oldschool practice.
Oldschool implementations did not inform playas when abbreviations
that could never be used was entered; implementations are
strongly encouraged ta do so.
.LP
For example, tha followin abbreviations will work:
.sp
.RS
.nf

\fB:ab (p  REPLACE
:ab p   REPLACE
:ab ((p REPLACE
\fP
.fi
.RE
.LP
Da followin abbreviations aint gonna work:
.sp
.RS
.nf

\fB:ab (   REPLACE
:ab (pp REPLACE
\fP
.fi
.RE
.LP
Oldschool practice is dat lyrics on tha \fIvi\fP colon command line
were subject to
abbreviation expansion, includin tha arguments ta tha \fBabbrev\fP
(and mo' interestingly) tha \fBunabbrev\fP command. Y'all KNOW dat shit, muthafucka! Because
there is implementations dat do not do abbreviation expansion for
the first argument ta dem commands, dis is permitted yo, but
not required, by IEEE\ Std\ 1003.1-2001. But fuck dat shiznit yo, tha word on tha street is dat tha followin sequence:
.sp
.RS
.nf

\fB:ab foo bar
:ab foo baz
\fP
.fi
.RE
.LP
resulted up in tha addizzle of a abbreviation of \fB"baz"\fP fo' the
strin \fB"bar"\fP up in oldschool \fIex\fP/ \fIvi\fP, n' tha sequence:
.sp
.RS
.nf

\fB:ab foo1 bar
:ab foo2 bar
:unabbreviate foo2
\fP
.fi
.RE
.LP
deleted tha abbreviation \fB"foo1"\fP, not \fB"foo2"\fP . These behaviors
are not permitted by
IEEE\ Std\ 1003.1-2001 cuz they clearly violate tha expectations
of tha user.
.LP
Dat shiznit was oldschool practice dat <control>-V, not backslash, characters
be interpreted as escapin subsequent charactas in
the \fBabbreviate\fP command. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice; however, it should be
noted dat a abbreviation containin a <blank> aint NEVER gonna work.
.SS Append
.LP
Historically, any text followin a vertical-line command separator
afta a \fBappend\fP, \fBchange\fP, or \fBinsert\fP
command became part of tha bang text. For example, up in tha command:
.sp
.RS
.nf

\fB:g/pattern/append|stuff1
\fP
.fi
.RE
.LP
a line containin tha text \fB"stuff1"\fP would be appended ta each
line matchin pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Dat shiznit was also historically valid to
enter:
.sp
.RS
.nf

\fB:append|stuff1
stuff2
\&.
\fP
.fi
.RE
.LP
and tha text on tha \fIex\fP command line would be appended along
with tha text banged afta dat shit. There was a oldschool bug,
however, dat tha user had ta enta two terminatin lines (the \fB'.'\fP
lines) ta terminizzle text input mode up in dis case.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta oldschool practice,
but disallows tha oldschool need fo' multiple
terminatin lines.
.SS Chizzle
.LP
See tha RATIONALE fo' tha \fBappend\fP command. Y'all KNOW dat shit, muthafucka! Oldschool practice
for cursor positionin afta tha chizzle command when no
text is input, be as busted lyrics bout up in IEEE\ Std\ 1003.1-2001 yo. However,
one System V implementation is known ta have been
modified such dat tha cursor is positioned on tha straight-up original gangsta address specified,
and not on tha line before tha straight-up original gangsta address.
IEEE\ Std\ 1003.1-2001 disallows dis modification fo' consistency.
.LP
Historically, tha \fBchange\fP command did not support buffer arguments,
although some implementations allow tha justification
of a optionizzle buffer n' shit. This behavior is neither required nor disallowed
by IEEE\ Std\ 1003.1-2001.
.SS Chizzle Directory
.LP
A common extension up in \fIex\fP implementations is ta use tha elements
of a \fBcdpath\fP edit option as prefix directories for
\fIpath\fP arguments ta \fBchdir\fP dat is relatizzle pathnames and
that aint gots \fB'.'\fP or \fB".."\fP as they first
component. Elements up in tha \fBcdpath\fP edit option is colon-separated.
Da initial value of tha \fBcdpath\fP edit option is the
value of tha shell \fICDPATH\fP environment variable. This feature
was not included up in IEEE\ Std\ 1003.1-2001 cuz it
does not exist up in any of tha implementations considered historical
practice.
.SS Copy
.LP
Oldschool implementationz of \fIex\fP permitted copies ta lines inside
of tha specified range; fo' example, \fB:2,5copy3\fP
was a valid command. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 requires conformizzle to
historical practice.
.SS Delete
.LP
IEEE\ Std\ 1003.1-2001 requires support fo' tha oldschool parsing
of a \fBdelete\fP command followed by flags, without
any intervenin <blank>s. For example:
.TP 7
\fB1dp\fP
Deletes tha straight-up original gangsta line n' prints tha line dat was second.
.TP 7
\fB1delep\fP
As fo' \fB1dp\fP.
.TP 7
\fB1d\fP
Deletes tha straight-up original gangsta line, savin it up in buffer \fIp\fP.
.TP 7
\fB1d\ p1l\fP
(Pee-one-ell.) Deletes tha straight-up original gangsta line, savin it up in buffer \fIp\fP,
and listin tha line dat was second.
.sp
.SS Edit
.LP
Historically, any \fIex\fP command could be entered as a \fB+\fP \fIcommand\fP
argument ta tha \fBedit\fP command, although
some (for example, \fBinsert\fP n' \fBappend\fP) was known ta confuse
historical implementations. For consistency and
simplicitizzle of justification, IEEE\ Std\ 1003.1-2001 requires that
any command be supported as a argument ta the
\fBedit\fP command.
.LP
Historically, tha command argument was executed wit tha current line
set ta tha last line of tha file, regardless of whether
the \fBedit\fP command was executed from visual mode or not. IEEE\ Std\ 1003.1-2001
requires conformizzle ta historical
practice.
.LP
Historically, tha \fB+\fP \fIcommand\fP specified ta tha \fBedit\fP
and \fBnext\fP commandz was delimited by tha first
<blank>, n' there was no way ta quote em. For consistency, IEEE\ Std\ 1003.1-2001
requires dat tha usual
\fIex\fP backslash quotin be provided.
.LP
Historically, specifyin tha \fB+\fP \fIcommand\fP argument ta the
edit command required a gangbangin' filename ta be specified as well;
for example, \fB:edit\ +100\fP would always fail. For consistency
and simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 do not permit dis usage ta fail fo' that
reason.
.LP
Historically, only tha cursor posizzle of tha last file edited was
remembered by tha editor. Shiiit, dis aint no joke. IEEE\ Std\ 1003.1-2001
requires dat dis be supported; however, implementations is permitted
to remember n' restore tha cursor posizzle fo' any file
previously edited.
.SS File
.LP
Oldschool versionz of tha \fIex\fP editor \fBfile\fP command displayed
a current line n' number of lines up in tha edit buffer
of 0 when tha file was empty, while tha \fIvi\fP <control>-G command
displayed a cold-ass lil current
line n' number of lines up in tha edit buffer of 1 up in tha same thang.
IEEE\ Std\ 1003.1-2001 do not permit this
discrepancy, instead requirin dat a message be displayed indicating
that tha file is empty.
.SS Global
.LP
Da two-pass operation of tha \fBglobal\fP n' \fBv\fP commandz is
not intended ta imply implementation, only tha required
result of tha operation.
.LP
Da current line n' column is set as specified fo' tha individual
\fIex\fP commands. This requirement is cumulative; dat is,
the current line n' column must track across all tha commandz executed
by tha \fBglobal\fP or \fBv\fP commands.
.SS Insert
.LP
See tha RATIONALE fo' tha \fBappend\fP command.
.LP
Historically, \fBinsert\fP could not be used wit a address of zero;
that is, not when tha edit buffer was empty.
IEEE\ Std\ 1003.1-2001 requires dat dis command behave consistently
with tha \fBappend\fP command.
.SS Join
.LP
Da action of tha \fBjoin\fP command up in relation ta tha special characters
is only defined fo' tha POSIX locale cuz the
correct amount of white space afta a period varies; up in Japanese none
is required, up in French only a single space, n' so on.
.SS List
.LP
Da oldschool output of tha \fBlist\fP command was potentially ambiguous.
Da standard pimpers believed erectin dis to
be mo' blingin than adherin ta oldschool practice, n' IEEE\ Std\ 1003.1-2001
requires unambiguous output.
.SS Map
.LP
Historically, command mode maps only applied ta command names; for
example, if tha characta \fB'x'\fP was mapped to
\fB'y'\fP, tha command \fBfx\fP searched fo' tha \fB'x'\fP character,
not tha \fB'y'\fP character.
IEEE\ Std\ 1003.1-2001 requires dis behavior yo. Historically, entering
<control>-V as tha straight-up original gangsta characta of a \fIvi\fP command was a error.
Several implementations have extended tha semantics of \fIvi\fP such
that <control>-V means dat tha subsequent command characta is not
mapped. Y'all KNOW dat shit, muthafucka! This is
permitted yo, but not required, by IEEE\ Std\ 1003.1-2001. Regardless,
usin <control>-V ta escape tha second or later
characta up in a sequence of charactas dat might match a \fBmap\fP
command, or any characta up in text input mode, is historical
practice, n' stops tha entered keys from matchin a map. IEEE\ Std\ 1003.1-2001
requires conformizzle ta historical
practice.
.LP
Oldschool implementations permitted digits ta be used as a \fBmap\fP
command \fIlhs\fP yo, but then ignored tha map.
IEEE\ Std\ 1003.1-2001 requires dat tha mapped digits not be ignored.
.LP
Da oldschool implementation of tha \fBmap\fP command did not permit
\fBmap\fP commandz dat was mo' than a single
characta up in length if tha straight-up original gangsta characta was printable. This behavior
is permitted yo, but not required, by
IEEE\ Std\ 1003.1-2001.
.LP
Historically, mapped charactas was remapped unless tha \fBremap\fP
edit option was not set, or tha prefix of tha mapped
charactas matched tha mappin characters; fo' example, up in tha \fBmap\fP:
.sp
.RS
.nf

\fB:map ab abcd
\fP
.fi
.RE
.LP
the charactas \fB"ab"\fP was used as be n' was not remapped yo, but
the charactas \fB"cd"\fP was mapped if appropriate.
This can cause infinite loops up in tha \fIvi\fP mappin mechanisms.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta oldschool practice,
and dat such loops be interruptible.
.LP
Text input maps had tha same problems wit expandin tha \fIlhs\fP
for tha \fIex\fP \fBmap!\fP n' \fBunmap!\fP command as
did tha \fIex\fP \fBabbreviate\fP n' \fBunabbreviate\fP commands.
See tha RATIONALE fo' tha \fIex\fP \fBabbreviate\fP
command. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 requires similar modification of some
historical practice fo' tha \fBmap\fP and
\fBunmap\fP commands, as busted lyrics bout fo' tha \fBabbreviate\fP n' \fBunabbreviate\fP
commands.
.LP
Historically, \fBmap\fPs dat was subsetz of other \fBmap\fPs behaved
differently dependin on tha order up in which they were
defined. Y'all KNOW dat shit, muthafucka! For example:
.sp
.RS
.nf

\fB:map! ab     short
:map! abc    long
\fP
.fi
.RE
.LP
would always translate tha charactas \fB"ab"\fP ta \fB"short"\fP,
regardless of how tha fuck fast tha charactas \fB"abc"\fP
were entered. Y'all KNOW dat shit, muthafucka! If tha entry order was reversed:
.sp
.RS
.nf

\fB:map! abc    long
:map! ab     short
\fP
.fi
.RE
.LP
the charactas \fB"ab"\fP would cause tha editor ta pause, waiting
for tha completin \fB'c'\fP character, n' the
charactas might never be mapped ta \fB"short"\fP . For consistency
and simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 requires dat tha shortest match be used at
all times.
.LP
Da length of time tha editor spendz waitin fo' tha charactas to
complete tha \fIlhs\fP is unspecified cuz tha timing
capabilitizzlez of systems is often inexact n' variable, n' it may
depend on other factors like fuckin tha speed of tha connection. I aint talkin' bout chicken n' gravy biatch. The
time should be long enough fo' tha user ta be able ta complete the
sequence yo, but not long enough fo' tha user ta gotta wait. Right back up in yo muthafuckin ass. Some
implementationz of \fIvi\fP have added a \fBkeytime\fP option, which
permits playas ta set the
number of 0,1 secondz tha editor waits fo' tha completin characters.
Because mapped terminal function n' cursor keys tend to
start wit a <ESC> character, n' <ESC> is tha key endin \fIvi\fP
text input
mode, \fBmap\fPs startin wit <ESC> charactas is generally exempted
from dis timeout period, or, at least timed out
differently.
.SS Mark
.LP
Historically, playas was able ta set tha "previous context" marks
explicitly. In addition, tha \fIex\fP commandz \fB"\fP
and \fB'`\fP n' tha \fIvi\fP commandz \fB"\fP, \fB``\fP, \fB`'\fP,
and \fB'`\fP all
referred ta tha same mark. In addition, tha previous context marks
were not set if tha command, wit which tha address settin the
mark was associated, failed. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice yo. Historically, if marked
lines was deleted, tha mark was also deleted yo, but would reappear
if tha chizzle was undone. IEEE\ Std\ 1003.1-2001 requires
conformizzle ta oldschool practice.
.LP
Da description of tha special events dat set tha \fB`\fP n' \fB'\fP
marks matches oldschool practice. For example,
historically tha command \fB/a/,/b/\fP did not set tha \fB`\fP and
\fB'\fP marks yo, but tha command \fB/a/,/b/delete\fP done did.
.SS Next
.LP
Historically, any \fIex\fP command could be entered as a \fB+\fP \fIcommand\fP
argument ta tha \fBnext\fP command, although
some (for example, \fBinsert\fP n' \fBappend\fP) was known ta confuse
historical implementations.
IEEE\ Std\ 1003.1-2001 requires dat any command be permitted and
that it behave as specified. Y'all KNOW dat shit, muthafucka! Da \fBnext\fP command can
accept mo' than one file, so usage such as:
.sp
.RS
.nf

\fBnext `ls [abc] `
\fP
.fi
.RE
.LP
is valid; it need not be valid fo' tha \fBedit\fP or \fBread\fP commands,
for example, cuz they expect only one
filename.
.LP
Historically, tha \fBnext\fP command behaved differently from the
\fB:rewind\fP command up in dat it ignored tha force flag if
the \fBautowrite\fP flag was set. For consistency, IEEE\ Std\ 1003.1-2001
does not permit dis behavior.
.LP
Historically, tha \fBnext\fP command positioned tha cursor as if the
file had never been edited before, regardless.
IEEE\ Std\ 1003.1-2001 do not permit dis behavior, fo' consistency
with tha \fBedit\fP command.
.LP
Implementations wantin ta provide a cold-ass lil counterpart ta tha \fBnext\fP
command dat edited tha previous file have used tha command
\fBprev[ious],\fP which takes no \fIfile\fP argument. IEEE\ Std\ 1003.1-2001
does not require dis command.
.SS Open
.LP
Historically, tha \fBopen\fP command would fail if tha \fBopen\fP
edit option was not set. IEEE\ Std\ 1003.1-2001 do
not mention tha \fBopen\fP edit option n' do not require dis behavior.
Some oldschool implementations do not permit entering
open mode from open or visual mode, only from \fIex\fP mode. For consistency,
IEEE\ Std\ 1003.1-2001 do not permit this
behavior.
.LP
Historically, enterin open mode from tha command line (that is, \fIvi\fP
\fB+open\fP)
resulted up in anomalous behaviors; fo' example, tha \fIex\fP file and
\fIset\fP
commands, n' tha \fIvi\fP command <control>-G did not work. For consistency,
IEEE\ Std\ 1003.1-2001 do not permit dis behavior.
.LP
Historically, tha \fBopen\fP command only permitted \fB'/'\fP characters
to be used as tha search pattern delimiter n' shit. For
consistency, IEEE\ Std\ 1003.1-2001 requires dat tha search delimiters
used by tha \fBs\fP, \fBglobal\fP, n' \fBv\fP
commandz be accepted as well.
.SS Preserve
.LP
Da \fBpreserve\fP command do not historically cause tha file to
be considered unmodified fo' tha purposez of future commands
that may exit tha editor. Shiiit, dis aint no joke. IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice.
.LP
Oldschool documentation stated dat mail was not busted ta tha user
when preserve was executed; however, historical
implementations did bust mail up in dis case. IEEE\ Std\ 1003.1-2001
requires conformizzle ta tha historical
implementations.
.SS Print
.LP
Da freestylin of NUL by tha \fBprint\fP command aint specified as
a special case cuz tha standard pimpers did not want
to require \fIex\fP ta support NUL charactas yo. Historically, characters
were displayed rockin tha ARPA standard mappings, which are
as bigs up:
.IP " 1." 4
Printable charactas is left ridin' solo.
.LP
.IP " 2." 4
Control charactas less than \\177 is represented as \fB'^'\fP followed
by tha characta offset from tha \fB'@'\fP
characta up in tha ASCII map; fo' example, \\007 is represented as \fB'^G'\fP
\&.
.LP
.IP " 3." 4
\\177 is represented as \fB'^'\fP followed by \fB'?'\fP .
.LP
.LP
Da display of charactas havin they eighth bit set was less standard.
Existin implementations use hex (0x00), octal (\\000),
and a meta-bit display. (Da latta displayed bytes dat had their
eighth bit set as tha two charactas \fB"M-"\fP followed by
the seven-bit display as busted lyrics bout above.) Da latta probably has
the dopest claim ta oldschool practice cuz dat shiznit was used for
the \fB-v\fP option of 4 BSD n' 4 BSD-derived versionz of tha \fIcat\fP
utilitizzle since
1980.
.LP
No specific display format is required by IEEE\ Std\ 1003.1-2001.
.LP
Explicit dependence on tha ASCII characta set has been avoided where
possible, hence tha use of tha phrase an
"implementation-defined multi-characta sequence" fo' tha display
of non-printable charactas up in preference ta tha historical
usage of, fo' instance, \fB"^I"\fP fo' tha <tab>. Implementations
are encouraged ta conform ta oldschool practice up in the
absence of any phat reason ta diverge.
.LP
Historically, all \fIex\fP commandz beginnin wit tha letta \fB'p'\fP
could be entered rockin capitalized versionz of the
commands; fo' example, \fBP[rint]\fP, \fBPre[serve]\fP, n' \fBPu[t]\fP
were all valid command names.
IEEE\ Std\ 1003.1-2001 permits yo, but do not require, dis historical
practice cuz capital formz of tha commandz are
used by some implementations fo' other purposes.
.SS Put
.LP
Historically, a \fIex\fP \fBput\fP command, executed from open or
visual mode, was tha same ol' dirty as tha open or visual mode
\fBP\fP command, if tha buffer was named n' was cut up in character
mode, n' tha same as tha \fBp\fP command if tha buffer was
named n' cut up in line mode. If tha unnamed buffer was tha source of
the text, tha entire line from which tha text was taken was
usually \fBput\fP, n' tha buffer was handled as if up in line mode,
but dat shiznit was possible ta git mad anomalous behavior. Shiiit, dis aint no joke. In
addition, rockin tha \fBQ\fP command ta switch tha fuck into \fIex\fP mode,
and then bustin a \fBput\fP often resulted up in errors as well,
like fuckin appendin text dat was unrelated ta tha (supposed) contents
of tha buffer n' shit. For consistency n' simplicitizzle of
specification, IEEE\ Std\ 1003.1-2001 do not permit these behaviors.
All \fIex\fP \fBput\fP commandz is required to
operate up in line mode, n' tha contentz of tha buffers is not altered
by changin tha mode of tha editor.
.SS Read
.LP
Historically, a \fIex\fP \fBread\fP command executed from open or
visual mode, executed up in a empty file, left a empty line
as tha straight-up original gangsta line of tha file. For consistency n' simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 do not permit this
behavior yo. Historically, a \fBread\fP up in open or visual mode from a
program left tha cursor all up in tha last line read in, not the
first. For consistency, IEEE\ Std\ 1003.1-2001 do not permit this
behavior.
.LP
Oldschool implementationz of \fIex\fP was unable ta undo \fBread\fP
commandz dat read from tha output of a program. For
consistency, IEEE\ Std\ 1003.1-2001 do not permit dis behavior.
.LP
Historically, tha \fIex\fP n' \fIvi\fP message afta a successful
\fBread\fP or
\fBwrite\fP command specified "characters", not "bytes". IEEE\ Std\ 1003.1-2001
requires dat tha number of bytes be
displayed, not tha number of characters, cuz it may be difficult
in multi-byte implementations ta determine tha number of
charactas read. Y'all KNOW dat shit, muthafucka! Implementations is encouraged ta clarify tha message
displayed ta tha user.
.LP
Historically, readz was not permitted on filez other than type regular,
except dat FIFO filez could be read (probably only
because they did not exist when \fIex\fP n' \fIvi\fP was originally
written). Because the
historical \fIex\fP evaluated \fBread!\fP n' \fBread\ !\fP equivalently,
there can be no optionizzle way ta force tha read.
IEEE\ Std\ 1003.1-2001 permits yo, but do not require, dis behavior.
.SS Recover
.LP
Some oldschool implementationz of tha editor permitted playas ta recover
the edit buffer contents from a previous edit session,
and then exit without savin dem contents (or explicitly discarding
them). Da intent of IEEE\ Std\ 1003.1-2001 in
requirin dat tha edit buffer be treated as already modified is to
prevent dis user error.
.SS Rewind
.LP
Oldschool implementations supported tha \fBrewind\fP command when
the user was editin tha straight-up original gangsta file up in tha list; dat is,
the file dat tha \fBrewind\fP command would edit. IEEE\ Std\ 1003.1-2001
requires conformizzle ta oldschool practice.
.SS Substitute
.LP
Historically, \fIex\fP accepted a \fBr\fP option ta tha \fBs\fP command.
Da effect of tha \fBr\fP option was ta use the
last regular expression used up in any command as tha pattern, tha same
as tha \fB~\fP command. Y'all KNOW dat shit, muthafucka! Da \fBr\fP option is not
required by IEEE\ Std\ 1003.1-2001 yo. Historically, tha \fBc\fP and
\fBg\fP options was toggled; fo' example, tha command
\fB:s/abc/def/\fP was tha same ol' dirty as \fBs/abc/def/ccccgggg\fP. For simplicity
of justification, IEEE\ Std\ 1003.1-2001 do
not permit dis behavior.
.LP
Da tilde command is often used ta replace tha last search RE. For
example, up in tha sequence:
.sp
.RS
.nf

\fBs/red/blue/
/green
~
\fP
.fi
.RE
.LP
the \fB~\fP command is equivalent to:
.sp
.RS
.nf

\fBs/green/blue/
\fP
.fi
.RE
.LP
Historically, \fIex\fP accepted all of tha followin forms:
.sp
.RS
.nf

\fBs/abc/def/
s/abc/def
s/abc/
s/abc
\fP
.fi
.RE
.LP
IEEE\ Std\ 1003.1-2001 requires conformizzle ta dis oldschool practice.
.LP
Da \fBs\fP command presumes dat tha \fB'^'\fP characta only occupies
a single column up in tha display. Much of the
\fIex\fP n' \fIvi\fP justification presumes dat tha <space> only
occupies a single
column up in tha display. There is no known characta sets fo' which
this aint true.
.LP
Historically, tha final column posizzle fo' tha substitute commands
was based on previous column movements; a search fo' a
pattern followed by a substitution would leave tha column position
unchanged, while a 0 command followed by a substitution would
change tha column posizzle ta tha straight-up original gangsta non- <blank>. For consistency
and simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 requires dat tha final column posizzle always
be set ta tha straight-up original gangsta non- <blank>.
.SS Set
.LP
Oldschool implementations redisplayed all of tha options fo' each
occurrence of tha \fBall\fP keyword.
IEEE\ Std\ 1003.1-2001 permits yo, but do not require, dis behavior.
.SS Tag
.LP
No requirement is made as ta where \fIex\fP n' \fIvi\fP shall look
for tha file referenced
by tha tag entry. Oldschool practice has been ta look fo' tha path
found up in tha \fBtags\fP file, based on tha current directory.
A useful extension found up in some implementations is ta look based
on tha directory containin tha tags file dat held tha entry, as
well. No requirement is made as ta which reference fo' tha tag in
the tags file is used. Y'all KNOW dat shit, muthafucka! This is deliberate, up in order ta permit
extensions like fuckin multiple entries up in a tags file fo' a tag.
.LP
Because playas often specify nuff different tags files, a shitload of which
need not be relevant or exist at any particular time,
IEEE\ Std\ 1003.1-2001 requires dat error lyrics bout problem
tags filez be displayed only if tha axed tag is not
found, n' then, only once fo' each time dat tha \fBtag\fP edit option
is chizzled.
.LP
Da requirement dat tha current edit buffer be unmodified is only
necessary if tha file indicated by tha tag entry aint the
same as tha current file (as defined by tha current pathname) yo. Historically,
the file would be reloaded if tha filename had
changed, as well as if tha filename was different from tha current
pathname. For consistency n' simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 do not permit dis behavior, requirin that
the name be tha only factor up in tha decision.
.LP
Historically, \fIvi\fP only searched fo' tags up in tha current file
from tha current cursor to
the end of tha file, n' therefore, if tha \fBwrapscan\fP option was
not set, tags occurrin before tha current cursor was not
found. Y'all KNOW dat shit, muthafucka! IEEE\ Std\ 1003.1-2001 considaz dis a funky-ass bug, n' implementations
are required ta search fo' tha straight-up original gangsta occurrence in
the file, regardless.
.SS Undo
.LP
Da \fBundo\fP description deliberately uses tha word "modified".
Da \fBundo\fP command aint intended ta undo commands
that replace tha contentz of tha edit buffer, like fuckin \fBedit\fP,
\fBnext\fP, \fBtag\fP, or \fBrecover\fP.
.LP
Cursor positionin afta tha \fBundo\fP command was inconsistent in
the oldschool \fIvi\fP, sometimes attemptin ta restore tha original
cursor posizzle ( \fBglobal\fP, \fBundo\fP,
and \fBv\fP commands), n' sometimes, up in tha presence of maps, placing
the cursor on tha last line added or chizzled instead of the
first. IEEE\ Std\ 1003.1-2001 requires a simplified behavior fo' consistency
and simplicitizzle of justification.
.SS Version
.LP
Da \fBversion\fP command cannot be exactly specified since there
is no widely-accepted definizzle of what tha fuck tha version
information should contain. I aint talkin' bout chicken n' gravy biatch. Implementations is encouraged ta do something
reasonably intelligent.
.SS Write
.LP
Historically, tha \fIex\fP n' \fIvi\fP message afta a successful
\fBread\fP or
\fBwrite\fP command specified "characters", not "bytes". IEEE\ Std\ 1003.1-2001
requires dat tha number of bytes be
displayed, not tha number of charactas cuz it may be difficult
in multi-byte implementations ta determine tha number of
charactas written. I aint talkin' bout chicken n' gravy biatch. Implementations is encouraged ta clarify the
message displayed ta tha user.
.LP
Implementation-defined tests is permitted so dat implementations
can make additionizzle checks; fo' example, fo' locks or file
modification times.
.LP
Historically, attemptin ta append ta a nonexistent file caused an
error. Shiiit, dis aint no joke. Well shiiiit, it has been left unspecified in
IEEE\ Std\ 1003.1-2001 ta permit implementations ta let tha \fBwrite\fP
succeed, so dat tha append semantics is similar
to dem of tha oldschool \fIcsh\fP.
.LP
Oldschool \fIvi\fP permitted empty edit buffers ta be written. I aint talkin' bout chicken n' gravy biatch yo. However,
since tha way \fIvi\fP gots round dealin wit "empty" filez was to
always gotz a line up in tha edit buffer, no
matta what, it freestyled dem as filez of a single, empty line. IEEE\ Std\ 1003.1-2001
does not permit dis behavior.
.LP
Historically, \fIex\fP restored standard output n' standard error
to they joints az of when \fIex\fP was invoked, before
writes ta programs was performed. Y'all KNOW dat shit, muthafucka! This could disturb tha terminal
configuration as well as be a securitizzle issue fo' some terminals.
IEEE\ Std\ 1003.1-2001 do not permit this, requirin dat tha program
output be captured n' displayed as if by the
\fIex\fP \fBprint\fP command.
.SS Adjust Window
.LP
Historically, tha line count was set ta tha value of tha \fBscroll\fP
option if tha type characta was end-of-file. This
feature was fucked up on most oldschool implementations long ago, however,
and aint documented anywhere, so peek-a-boo, clear tha way, I be comin' thru fo'sho. For dis reason,
IEEE\ Std\ 1003.1-2001 is resolutely silent.
.LP
Historically, tha \fBz\fP command was <blank>-sensitizzle n' \fBz\ +\fP
and \fBz\ -\fP did different thangs than
\fBz+\fP n' \fBz-\fP cuz tha type could not be distinguished
from a gangbangin' flag. (Da commandz \fBz\\fP.  n' \fBz\ =\fP
were historically invalid.) IEEE\ Std\ 1003.1-2001 requires conformance
to dis oldschool practice.
.LP
Historically, tha \fBz\fP command was further <blank>-sensitizzle in
that tha \fIcount\fP could not be
<blank>-delimited; fo' example, tha commandz \fBz=\ 5\fP n' \fBz-\ 5\fP
were also invalid. Y'all KNOW dat shit, muthafucka! Because the
\fIcount\fP aint ambiguous wit respect ta either tha type character
or tha flags, dis aint permitted by
IEEE\ Std\ 1003.1-2001.
.SS Escape
.LP
Historically, \fIex\fP filta commandz only read tha standard output
of tha commands, lettin standard error step tha fuck up on the
terminal as usual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da \fIvi\fP utility, however, read both standard
output n' standard error.
IEEE\ Std\ 1003.1-2001 requires tha latta behavior fo' both \fIex\fP
and \fIvi\fP,
for consistency.
.SS Shift Left n' Shift Right
.LP
Historically, dat shiznit was possible ta add shift charactas ta increase
the effect of tha command; fo' example, \fB<<<\fP
outdented (or \fB>>>\fP indented) tha lines 3 levelz of indentation
instead of tha default 1.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta oldschool practice.
.SS <control>-D
.LP
Historically, tha <control>-D command erased tha prompt, providing
the user wit a unbroken presentation of lines from
the edit buffer n' shit. This aint required by IEEE\ Std\ 1003.1-2001; implementations
are encouraged ta provide it if possible.
Historically, tha <control>-D command took, n' then ignored, a \fIcount\fP.
IEEE\ Std\ 1003.1-2001 do not permit
this behavior.
.SS Write Line Number
.LP
Historically, tha \fIex\fP \fB=\fP command, when executed up in \fIex\fP
mode up in a empty edit buffer, reported 0, n' from open
or visual mode, reported 1. For consistency n' simplicitizzle of justification,
IEEE\ Std\ 1003.1-2001 do not permit this
behavior.
.SS Execute
.LP
Historically, \fIex\fP did not erectly handle tha inclusion of text
input commandz (that is, \fBappend\fP, \fBinsert\fP,
and \fBchange\fP) up in executed buffers. IEEE\ Std\ 1003.1-2001 do
not permit dis exclusion fo' consistency.
.LP
Historically, tha logical contentz of tha buffer bein executed did
not chizzle if tha buffer itself was modified by the
commandz bein executed; dat is, buffer execution did not support
self-modifyin code. IEEE\ Std\ 1003.1-2001 requires
conformizzle ta oldschool practice.
.LP
Historically, tha \fB@\fP command took a range of lines, n' tha \fB@\fP
buffer was executed once per line, wit tha current
line ( \fB'.'\fP ) set ta each specified line. IEEE\ Std\ 1003.1-2001
requires conformizzle ta oldschool practice.
.LP
Some oldschool implementations did not notice if errors occurred
durin buffer execution. I aint talkin' bout chicken n' gravy biatch. This, coupled wit tha mobilitizzle to
specify a range of lines fo' tha \fIex\fP \fB@\fP command, make it
trivial ta cause dem ta drop \fBcore\fP.
IEEE\ Std\ 1003.1-2001 requires dat implementations stop buffer execution
if any error occurs, if tha specified line
doesn't exist, or if tha contentz of tha edit buffer itself is replaced
(for example, tha buffer executes tha \fIex\fP
\fB:edit\fP command).
.SS Regular Expressions up in ex
.LP
Oldschool practice is dat tha charactas up in tha replacement part
of tha last \fBs\fP command-that is, dem matched by
enterin a \fB'~'\fP up in tha regular expression-were not further expanded
by tha regular expression engine. Right back up in yo muthafuckin ass. So, if the
charactas contained tha strang \fB"a.,"\fP they would match \fB'a'\fP
followed by \fB".,"\fP n' not \fB'a'\fP
followed by any character n' shit. IEEE\ Std\ 1003.1-2001 requires conformance
to oldschool practice.
.SS Edit Options up in ex
.LP
Da followin paragraphs describe tha oldschool behavior of some
edit options dat was not, fo' whatever reason, included in
IEEE\ Std\ 1003.1-2001. Implementations is straight fuckin encouraged to
only use these names if tha functionalitizzle busted lyrics bout here
is straight-up supported.
.TP 7
\fBextended\fP
Da \fBextended\fP edit option has been used up in some implementations
of \fIvi\fP to
provide extended regular expressions instead of basic regular expressions
This option was omitted from
IEEE\ Std\ 1003.1-2001 cuz it aint widespread oldschool practice.
.TP 7
\fBflash\fP
Da \fBflash\fP edit option historically caused tha screen ta flash
instead of beepin on error. Shiiit, dis aint no joke. This option was omitted from
IEEE\ Std\ 1003.1-2001 cuz it aint found up in some historical
implementations.
.TP 7
\fBhardtabs\fP
Da \fBhardtabs\fP edit option historically defined tha number of
columns between hardware tab settings. This option was
omitted from IEEE\ Std\ 1003.1-2001 cuz dat shiznit was believed ta no
longer be generally useful.
.TP 7
\fBmodeline\fP
Da \fBmodeline\fP (sometimes named \fBmodelines\fP) edit option historically
caused \fIex\fP or \fIvi\fP ta read tha five first n' last lines
of tha file fo' editor commands. This option be a
securitizzle problem, n' vendors is straight fuckin encouraged ta delete it
from oldschool implementations.
.TP 7
\fBopen\fP
Da \fBopen\fP edit option historically disallowed tha \fIex\fP \fBopen\fP
and \fBvisual\fP commands. This edit option was
omitted cuz these commandz is required by IEEE\ Std\ 1003.1-2001.
.TP 7
\fBoptimize\fP
Da \fBoptimize\fP edit option historically expedited text throughput
by settin tha terminal ta not do automatic
<carriage-return>s when printin mo' than one logical line of output.
This option was omitted from
IEEE\ Std\ 1003.1-2001 cuz dat shiznit was intended fo' terminals without
addressable cursors, which is rarely, if ever, still
used.
.TP 7
\fBruler\fP
Da \fBruler\fP edit option has been used up in some implementations
of \fIvi\fP ta present a
current row/column rula fo' tha user n' shit. This option was omitted from
IEEE\ Std\ 1003.1-2001 cuz it aint widespread
historical practice.
.TP 7
\fBsourceany\fP
Da \fBsourceany\fP edit option historically caused \fIex\fP or \fIvi\fP
to source
start-up filez dat was owned by playas other than tha user hustlin
the editor. Shiiit, dis aint no joke. This option be a securitizzle problem, n' vendors are
strongly encouraged ta remove it from they implementations.
.TP 7
\fBtimeout\fP
Da \fBtimeout\fP edit option historically enabled tha (now standard)
feature of only waitin fo' a gangbangin' finger-lickin' dirty-ass short period before
returnin keys dat could be part of a macro. This feature was omitted
from IEEE\ Std\ 1003.1-2001 cuz its behavior is
now standard, it aint widely useful, n' dat shiznit was rarely documented.
.TP 7
\fBverbose\fP
Da \fBverbose\fP edit option has been used up in some implementations
of \fIvi\fP ta cause
\fIvi\fP ta output error lyrics fo' common errors; fo' example,
attemptin ta move tha cursor
past tha beginnin or end of tha line instead of only alertin the
screen. I aint talkin' bout chicken n' gravy biatch. (Da oldschool \fIvi\fP only alerted tha terminal n' presented
no message fo' such errors. Da oldschool editor
option \fBterse\fP did not select when ta present error lyrics,
it only made existin error lyrics mo' or less verbose.) This
option was omitted from IEEE\ Std\ 1003.1-2001 cuz it aint widespread
historical practice; however, implementors are
encouraged ta use it if they wish ta provide error lyrics fo' naive
users.
.TP 7
\fBwraplen\fP
Da \fBwraplen\fP edit option has been used up in some implementations
of \fIvi\fP ta specify
an automatic margin measured from tha left margin instead of from
the right margin. I aint talkin' bout chicken n' gravy biatch. This is useful when multiple screen sizes are
bein used ta edit a single file. This option was omitted from IEEE\ Std\ 1003.1-2001
because it aint widespread
historical practice; however, implementors is encouraged ta use it
if they add dis functionality.
.sp
.SS autoindent, ai
.LP
Historically, tha command \fB0a\fP did not do any autoindentation,
regardless of tha current indentation of line 1.
IEEE\ Std\ 1003.1-2001 requires dat any indentation present up in line
1 be used.
.SS autoprint, ap
.LP
Historically, tha \fBautoprint\fP edit option was not straight-up consistent
or based solely on modifications ta tha edit
buffer n' shit. Exceptions was tha \fBread\fP command (when readin from
a file yo, but not from a gangbangin' filter), tha \fBappend\fP,
\fBchange\fP, \fBinsert\fP, \fBglobal\fP, n' \fBv\fP commands, all
of which was not affected by \fBautoprint\fP, n' the
\fBtag\fP command, which was affected by \fBautoprint\fP. IEEE\ Std\ 1003.1-2001
requires conformizzle ta historical
practice.
.LP
Historically, tha \fBautoprint\fP option only applied ta tha last
of multiple commandz entered rockin vertical-bar delimiters;
for example, \fBdelete\fP <newline> was affected by \fBautoprint\fP,
but \fBdelete|version\fP <newline> was not.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta oldschool practice.
.SS autowrite, aw
.LP
Appendin tha \fB'!'\fP characta ta tha \fIex\fP \fBnext\fP command
to avoid struttin a automatic write was not
supported up in oldschool implementations. IEEE\ Std\ 1003.1-2001 requires
that tha behavior match tha other \fIex\fP
commandz fo' consistency.
.SS ignorecase, ic
.LP
Oldschool implementationz of case-insensitizzle matchin (the \fBignorecase\fP
edit option) lead ta counterintuitizzle thangs
when uppercase charactas was used up in range expressions yo. Historically,
the process was as bigs up:
.IP " 1." 4
Take a line of text from tha edit buffer.
.LP
.IP " 2." 4
Convert uppercase ta lowercase up in text line.
.LP
.IP " 3." 4
Convert uppercase ta lowercase up in regular expressions, except up in character
class justifications.
.LP
.IP " 4." 4
Match regular expressions against text.
.LP
.LP
This would mean that, wit \fBignorecase\fP up in effect, tha text:
.sp
.RS
.nf

\fBDa pussaaaaay sat on tha mat
\fP
.fi
.RE
.LP
would be matched by
.sp
.RS
.nf

\fB/^the/
\fP
.fi
.RE
.LP
but not by:
.sp
.RS
.nf

\fB/^[A-Z]he/
\fP
.fi
.RE
.LP
For consistency wit other commandz implementin regular expressions,
IEEE\ Std\ 1003.1-2001 do not permit this
behavior.
.SS paragraphs, para
.LP
Da ISO\ POSIX-2:1993 standard made tha default \fBparagraphs\fP and
\fBsections\fP edit options implementation-defined,
arguin they was historically oriented ta tha UNIX system \fItroff\fP
text formatter, n' a "portable user" could use the
\fB{\fP, \fB}\fP, \fB[[\fP, \fB]]\fP, \fB(\fP, n' \fB)\fP commands
in open or visual mode n' have tha cursor stop in
unexpected places. IEEE\ Std\ 1003.1-2001 specifies they joints in
the POSIX locale cuz tha unusual groupin (they
only work when grouped tha fuck into two charactas at a time) means dat they
cannot be used fo' general-purpose movement, regardless.
.SS readonly
.LP
Implementations is encouraged ta provide tha dopest possible shiznit
to tha user as ta tha read-only statuz of tha file, with
the exception dat they should not consider tha current special privileges
of tha process. This serves up playas wit a safety net
because they must force tha overwrite of read-only files, even when
runnin wit additionizzle privileges.
.LP
Da \fBreadonly\fP edit option justification largely conforms ta historical
practice. Da only difference is dat historical
implementations did not notice dat tha user had set tha \fBreadonly\fP
edit option up in cases where tha file was already marked
read-only fo' some reason, n' would therefore reinitialize tha \fBreadonly\fP
edit option tha next time tha contentz of tha edit
buffer was replaced. Y'all KNOW dat shit, muthafucka! This behavior is disallowed by IEEE\ Std\ 1003.1-2001.
.SS report
.LP
Da requirement dat lines copied ta a funky-ass buffer interact differently
than deleted lines is oldschool practice. For example, if
the \fBreport\fP edit option is set ta 3, deletin 3 lines will cause
a report ta be written yo, but 4 lines must be copied before a
report is written.
.LP
Da requirement dat tha \fIex\fP \fBglobal\fP, \fBv\fP, \fBopen\fP,
\fBundo\fP, n' \fBvisual\fP commandz present reports
based on tha total number of lines added or deleted durin tha command
execution, n' dat commandz executed by tha \fBglobal\fP
and \fBv\fP commandz not present reports, is oldschool practice.
IEEE\ Std\ 1003.1-2001 extendz oldschool practice by
requirin dat buffer execution be treated similarly. Da reasons
for dis is two-fold. Y'all KNOW dat shit, muthafucka! Historically, only tha report by tha last
command executed from tha buffer would be peeped by tha user, as each
new report would overwrite tha last. In addition, tha standard
developers believed dat buffer execution had mo' up in common with
\fBglobal\fP n' \fBv\fP commandz than it did wit other
\fIex\fP commands, n' should behave similarly, fo' consistency and
simplicitizzle of justification.
.SS showmatch, sm
.LP
Da length of time tha cursor spendz on tha matchin characta is
unspecified cuz tha timin capabilitizzlez of systems are
often inexact n' variable. Da time should be long enough fo' the
user ta notice yo, but not long enough fo' tha user ta become
annoyed. Y'all KNOW dat shit, muthafucka! Some implementationz of \fIvi\fP have added a \fBmatchtime\fP
option dat permits
users ta set tha number of 0,1 second intervals tha cursor pauses
on tha matchin character.
.SS showmode
.LP
Da \fBshowmode\fP option has been used up in some oldschool implementations
of \fIex\fP n' \fIvi\fP ta display tha current editin mode when
in open or visual mode. Da editin modes have
generally included "command" n' "input", n' sometimes other modes
like fuckin "replace" n' "change". Da strang was usually
displayed on tha bottom line of tha screen all up in tha far right-hand corner.
In addition, a precedin \fB'*'\fP characta often
denoted whether tha contentz of tha edit buffer had been modified.
Da latta display has sometimes been part of the
\fBshowmode\fP option, n' sometimes based on another option. I aint talkin' bout chicken n' gravy biatch. This
option was not available up in tha 4 BSD oldschool implementation
of \fIvi\fP yo, but was viewed as generally useful, particularly ta novice
users, n' is required
by IEEE\ Std\ 1003.1-2001.
.LP
Da \fBsmd\fP shorthand fo' tha \fBshowmode\fP option was not present
in all oldschool implementationz of tha editor.
IEEE\ Std\ 1003.1-2001 requires it, fo' consistency.
.LP
Not all oldschool implementationz of tha editor displayed a mode
strin fo' command mode, differentiatin command mode from
text input mode by tha absence of a mode string. IEEE\ Std\ 1003.1-2001
permits dis behavior fo' consistency with
historical practice yo, but implementations is encouraged ta provide
a display strang fo' both modes.
.SS slowopen
.LP
Historically tha \fBslowopen\fP option was automatically set if the
terminal baud rate was less than 1200 baud, or if tha baud
rate was 1200 baud n' tha \fBredraw\fP option was not set. Da \fBslowopen\fP
option had two effects, n' you can put dat on yo' toast. First, when inserting
charactas up in tha middle of a line, charactas afta tha cursor would
not be pushed ahead yo, but would step tha fuck up ta be overwritten.
Second, when bustin a freshly smoked up line of text, lines afta tha current
line would not be scrolled down yo, but would step tha fuck up ta be
overwritten. I aint talkin' bout chicken n' gravy biatch. In both cases, endin text input mode would cause the
screen ta be refreshed ta match tha actual contentz of tha edit
buffer n' shit. Finally, terminals dat was sufficiently intelligent caused
the editor ta ignore tha \fBslowopen\fP option.
IEEE\ Std\ 1003.1-2001 permits most oldschool behavior, extending
historical practice ta require \fBslowopen\fP behaviors
if tha edit option is set by tha user.
.SS tags
.LP
Da default path fo' tags filez is left unspecified as implementations
may have they own \fBtags\fP implementations dat do
not correspond ta tha oldschool ones. Da default \fBtags\fP option
value should probably at least include tha file
\fB\&./tags\fP.
.SS term
.LP
Oldschool implementationz of \fIex\fP n' \fIvi\fP ignored chizzles
to tha \fBterm\fP edit
option afta tha initial terminal shiznit was loaded. Y'all KNOW dat shit, muthafucka! This is
permitted by IEEE\ Std\ 1003.1-2001; however,
implementations is encouraged ta permit tha user ta modify their
terminal type at any time.
.SS terse
.LP
Historically, tha \fBterse\fP edit option optionally provided a gangbangin' finger-lickin' dirty-ass shorter,
less descriptizzle error message, fo' some error
lyrics. This is permitted yo, but not required, by IEEE\ Std\ 1003.1-2001.
Historically, most common visual mode errors (for
example, tryin ta move tha cursor past tha end of a line) did not
result up in a error message yo, but simply alerted tha terminal.
Implementations wishin ta provide lyrics fo' novice playas is urged
to do so based on tha \fBedit\fP option \fBverbose\fP, and
not \fBterse\fP.
.SS window
.LP
In oldschool implementations, tha default fo' tha \fBwindow\fP edit
option was based on tha baud rate as bigs up:
.IP " 1." 4
If tha baud rate was less than 1200, tha \fBedit\fP option \fBw300\fP
set tha window value; fo' example, tha line:
.sp
.RS
.nf

\fBset w300=12
\fP
.fi
.RE
.LP
would set tha window option ta 12 if tha baud rate was less than 1200.
.LP
.IP " 2." 4
If tha baud rate was equal ta 1200, tha \fBedit\fP option \fBw1200\fP
set tha window value.
.LP
.IP " 3." 4
If tha baud rate was pimped outa than 1200, tha \fBedit\fP option \fBw9600\fP
set tha window value.
.LP
.LP
Da \fBw300\fP, \fBw1200\fP, n' \fBw9600\fP options do not appear
in IEEE\ Std\ 1003.1-2001 cuz of their
dependence on specific baud rates.
.LP
In oldschool implementations, tha size of tha window displayed by
various commandz was related ta yo, but not necessarily tha same
as, tha \fBwindow\fP edit option. I aint talkin' bout chicken n' gravy biatch. For example, tha size of tha window
was set by tha \fIex\fP command \fBvisual 10\fP yo, but it
did not chizzle tha value of tha \fBwindow\fP edit option. I aint talkin' bout chicken n' gravy biatch yo. However,
changin tha value of tha \fBwindow\fP edit option did chizzle
the number of lines dat was displayed when tha screen was repainted.
IEEE\ Std\ 1003.1-2001 do not permit dis behavior
in tha interestz of consistency n' simplicitizzle of justification, and
requires dat all commandz dat chizzle tha number of lines
that is displayed do it by settin tha value of tha \fBwindow\fP
edit option.
.SS wrapmargin, wm
.LP
Historically, tha \fBwrapmargin\fP option did not affect maps inserting
charactas dat also had associated \fIcount\fPs; for
example \fB:map\ K\ 5aABC\ DEF\fP. Unfortunately, there be widely
used maps dat depend on dis behavior. Shiiit, dis aint no joke. For
consistency n' simplicitizzle of justification, IEEE\ Std\ 1003.1-2001
does not permit dis behavior.
.LP
Historically, \fBwrapmargin\fP was calculated rockin tha column display
width of all charactas on tha screen. I aint talkin' bout chicken n' gravy biatch. For example, an
implementation rockin \fB"^I"\fP ta represent <tab>s when tha \fBlist\fP
edit option was set, where \fB'^'\fP and
\fB'I'\fP each took up a single column on tha screen, would calculate
the \fBwrapmargin\fP based on a value of 2 fo' each
<tab>. Da \fBnumber\fP edit option similarly chizzled tha effective
length of tha line as well.
IEEE\ Std\ 1003.1-2001 requires conformizzle ta oldschool practice.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fICommand Search n' Execution\fP, \fIctags\fP, \fIed\fP, \fIsed\fP,
\fIsh\fP, \fIstty\fP, \fIvi\fP, tha System Interfaces volume
of IEEE\ Std\ 1003.1-2001, \fIaccess\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
