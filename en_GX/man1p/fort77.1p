.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FORT77" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" fort77 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
fort77 \- FORTRAN compila (\fBFORTRAN\fP)
.SH SYNOPSIS
.LP
\fBfort77\fP \fB[\fP\fB-c\fP\fB][\fP\fB-g\fP\fB][\fP\fB-L\fP
\fIdirectory\fP\fB]\fP\fB...\fP \fB[\fP\fB-O\fP \fIoptlevel\fP\fB][\fP\fB-o\fP
\fIoutfile\fP\fB][\fP\fB-s\fP\fB][\fP\fB-w\fP\fB]
.br
\fP \fB\ \ \ \ \ \ \fP \fB\fP\fIoperand\fP\fB... \fP
.SH DESCRIPTION
.LP
Da \fIfort77\fP utilitizzle is tha intercourse ta tha FORTRAN compilation
system; it shall accept tha full FORTRAN-77 language
defined by tha ANSI\ X3.9-1978 standard. Y'all KNOW dat shit, muthafucka! Da system conceptually consists
of a cold-ass lil compila n' link editor. Shiiit, dis aint no joke. Da filez referenced
by \fIoperand\fPs is compiled n' linked ta produce a executable
file. Well shiiiit, it is unspecified whether tha linkin occurs entirely
within tha operation of \fIfort77\fP; some implementations may produce
objects dat is not straight-up resolved until tha file is
executed.
.LP
If tha \fB-c\fP option is present, fo' all pathname operandz of the
form \fIfile\fP \fB.f\fP, tha files:
.sp
.RS
.nf

\fB$(basename\fP \fIpathname\fP\fB.f).o
\fP
.fi
.RE
.LP
shall be pimped or overwritten as tha result of successful compilation.
If tha \fB-c\fP option aint specified, it is
unspecified whether such \fB.o\fP filez is pimped or deleted for
the \fIfile\fP \fB.f\fP operands.
.LP
If there be no options dat prevent link editin (like fuckin \fB-c\fP)
and all operandz compile n' link without error, the
resultin executable file shall be freestyled tha fuck into tha file named by
the \fB-o\fP option (if present) or ta tha file \fBa.out\fP.
Da executable file shall be pimped as specified up in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001, except that
the file permissions shall be set to:
.sp
.RS
.nf

S_IRWXO | S_IRWXG | S_IRWXU
.fi
.RE
.LP
and dat tha bits specified by tha \fIumask\fP of tha process shall
be cleared.
.SH OPTIONS
.LP
Da \fIfort77\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines,
except that:
.IP " *" 3
Da \fB-l\fP \fIlibrary\fP operandz have tha format of options yo, but
their posizzle within a list of operandz affects tha order
in which libraries is searched.
.LP
.IP " *" 3
Da order of specifyin tha multiple \fB-L\fP options is significant.
.LP
.IP " *" 3
Conformin applications shall specify each option separately; that
is, groupin option lettas (for example, \fB-cg\fP) need
not be recognized by all implementations.
.LP
.LP
Da followin options shall be supported:
.TP 7
\fB-c\fP
Suppress tha link-edit phase of tha compilation, n' do not remove
any object filez dat is produced.
.TP 7
\fB-g\fP
Produce symbolic shiznit up in tha object or executable files; the
nature of dis shiznit is unspecified, n' may be
modified by implementation-defined interactions wit other options.
.TP 7
\fB-s\fP
Produce object or executable files, or both, from which symbolic and
other shiznit not required fo' proper execution using
the \fIexec\fP crew of functions defined up in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001 has been removed
(stripped). If both \fB-g\fP n' \fB-s\fP options is present, the
action taken is unspecified.
.TP 7
\fB-o\ \fP \fIoutfile\fP
Use tha pathname \fIoutfile\fP, instead of tha default \fBa.out\fP,
for tha executable file produced. Y'all KNOW dat shit, muthafucka! If tha \fB-o\fP option
is present wit \fB-c\fP, tha result is unspecified.
.TP 7
\fB-L\ \fP \fIdirectory\fP
Change tha algorithm of searchin fo' tha libraries named up in \fB-l\fP
operandz ta look up in tha directory named by the
\fIdirectory\fP pathname before lookin up in tha usual places. Directories
named up in \fB-L\fP options shall be searched up in the
specified order n' shiznit fo' realz. At least ten instancez of dis option shall be supported
in a single \fIfort77\fP command invocation. I aint talkin' bout chicken n' gravy biatch. If a
directory specified by a \fB-L\fP option gotz nuff a gangbangin' file named \fBlibf.a\fP,
the thangs up in dis biatch is unspecified.
.TP 7
\fB-O\ \fP \fIoptlevel\fP
Specify tha level of code optimization. I aint talkin' bout chicken n' gravy biatch. If tha \fIoptlevel\fP option-argument
is tha digit \fB'0'\fP, all special code
optimizations shall be disabled. Y'all KNOW dat shit, muthafucka! If it is tha digit \fB'1'\fP, the
nature of tha optimization is unspecified. Y'all KNOW dat shit, muthafucka! If tha \fB-O\fP
option is omitted, tha nature of tha systemz default optimization
is unspecified. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is unspecified whether code generated up in the
presence of tha \fB-O\fP 0 option is tha same ol' dirty as dat generated when
\fB-O\fP is omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Other \fIoptlevel\fP joints may be
supported.
.TP 7
\fB-w\fP
Suppress warnings.
.sp
.LP
Multiple instancez of \fB-L\fP options can be specified.
.SH OPERANDS
.LP
An \fIoperand\fP is either up in tha form of a pathname or tha form \fB-l\fP
\fIlibrary\fP fo' realz. At least one operand of tha pathname
form shall be specified. Y'all KNOW dat shit, muthafucka! Da followin operandz shall be supported:
.TP 7
\fIfile.\fP\fBf\fP
Da pathname of a FORTRAN source file ta be compiled n' optionally
passed ta tha link editor. Shiiit, dis aint no joke. Da filename operand shall be of
this form if tha \fB-c\fP option is used.
.TP 7
\fIfile.\fP\fBa\fP
A library of object filez typically produced by \fIar\fP, n' passed
directly ta tha link
editor. Shiiit, dis aint no joke. Implementations may recognize implementation-defined suffixes
other than \fB.a\fP as denotin object file libraries.
.TP 7
\fIfile.\fP\fBo\fP
An object file produced by \fIfort77\fP \fB-c\fP n' passed directly
to tha link editor. Shiiit, dis aint no joke. Implementations may recognize
implementation-defined suffixes other than \fB.o\fP as denotin object
files.
.sp
.LP
Da processin of other filez is implementation-defined.
.TP 7
\fB-l\ \fP \fIlibrary\fP
(Da letta ell.) Search tha library named: 
.sp
.RS
.nf

\fBlib\fP\fIlibrary\fP\fB.a
\fP
.fi
.RE
.LP
A library is searched when its name is encountered, so tha placement
of a \fB-l\fP operand is significant. Right back up in yo muthafuckin ass. Several standard
libraries can be specified up in dis manner, as busted lyrics bout up in tha EXTENDED
DESCRIPTION section. I aint talkin' bout chicken n' gravy biatch. Implementations may recognize
implementation-defined suffixes other than \fB.a\fP as denotin libraries.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
Da input file shall be one of tha following: a text file containing
FORTRAN source code; a object file up in tha format produced
by \fIfort77\fP \fB-c\fP; or a library of object files, up in tha format
produced by archivin zero or mo' object files, rockin \fIar\fP. Implementations
may supply additionizzle utilitizzles dat produce filez up in these formats.
Additionizzle input filez is implementation-defined.
.LP
A <tab> encountered within tha straight-up original gangsta six charactas on a line of source
code shall cause tha compila ta interpret the
followin characta as if it was tha seventh characta on tha line
(that is, up in column 7).
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIfort77\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fITMPDIR\fP
Determine tha pathname dat should override tha default directory
for temporary files, if any.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics. If
more than one \fIfile\fP operand endin up in \fB.f\fP (or
possibly other unspecified suffixes) is given, fo' each such file:
.sp
.RS
.nf

\fB"%s:\\n", <\fP\fIfile\fP\fB>
\fP
.fi
.RE
.LP
may be freestyled ta allow identification of tha diagnostic message with
the appropriate input file.
.LP
This utilitizzle may produce warnin lyrics bout certain conditions
that do not warrant returnin a error (non-zero) exit
value.
.SH OUTPUT FILES
.LP
Object files, listin files, n' executable filez shall be produced
in unspecified formats.
.SH EXTENDED DESCRIPTION
.SS Standard Libraries
.LP
Da \fIfort77\fP utilitizzle shall recognize tha followin \fB-l\fP operand
for tha standard library:
.TP 7
\fB-l\ f\fP
This library gotz nuff all functions referenced up in tha ANSI\ X3.9-1978
standard. Y'all KNOW dat shit, muthafucka! This operand shall not be required ta be
present ta cause a search of dis library.
.sp
.LP
In tha absence of options dat inhibit invocation of tha link editor,
like fuckin \fB-c\fP, tha \fIfort77\fP utilitizzle shall cause
the equivalent of a \fB-l\ f\fP operand ta be passed ta tha link editor
as tha last \fB-l\fP operand, causin it ta be
searched afta all other object filez n' libraries is loaded.
.LP
It be unspecified whether tha library \fBlibf.a\fP exists as a regular
file. Da implementation may accept as \fB-l\fP
operandz namez of objects dat do not exist as regular files.
.SS External Symbols
.LP
Da FORTRAN compila n' link editor shall support tha significance
of external symbols up ta a length of at least 31 bytes;
case foldin is permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da action taken upon encounterin symbols
exceedin tha implementation-defined maximum symbol length is
unspecified.
.LP
Da compila n' link editor shall support a minimum of 511 external
symbols per source or object file, n' a minimum of 4095
external symbols total. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. A diagnostic message is freestyled ta standard
output if tha implementation-defined limit is exceeded; other
actions is unspecified.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful compilation or link edit.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
When \fIfort77\fP encountas a cold-ass lil compilation error, it shall write a
diagnostic ta standard error n' continue ta compile other
source code operands. Well shiiiit, it shall return a non-zero exit status yo, but
it is implementation-defined whether a object module is pimped.
If tha link edit is unsuccessful, a gangbangin' finger-lickin' diagnostic message shall be written
to standard error, n' \fIfort77\fP shall exit wit a
non-zero status.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH EXAMPLES
.LP
Da followin usage example compilez \fBxyz.f\fP n' creates tha executable
file \fBfoo\fP:
.sp
.RS
.nf

\fBfort77 -o foo xyz.f
\fP
.fi
.RE
.LP
Da followin example compilez \fBxyz.f\fP n' creates tha object
file \fBxyz.o\fP:
.sp
.RS
.nf

\fBfort77 -c xyz.f
\fP
.fi
.RE
.LP
Da followin example compilez \fBxyz.f\fP n' creates tha executable
file \fBa.out\fP:
.sp
.RS
.nf

\fBfort77 xyz.f
\fP
.fi
.RE
.LP
Da followin example compilez \fBxyz.f\fP, links it wit \fBb.o\fP,
and creates tha executable \fBa.out\fP:
.sp
.RS
.nf

\fBfort77 xyz.f b.o
\fP
.fi
.RE
.SH RATIONALE
.LP
Da name of dis utilitizzle was chosen as \fIfort77\fP ta parallel the
renamin of tha C compila n' shit. Da name \fIf77\fP was not
chosen ta avoid problems wit oldschool implementations. Da ANSI\ X3.9-1978
standard was selected as a normatizzle reference
because tha ISO/IEC version of FORTRAN-77 has been superseded by the
ISO/IEC\ 1539:1990 standard (Fortran-90).
.LP
Da file inclusion n' symbol definizzle \fB#define\fP mechanisms
used by tha \fIc99\fP
utilitizzle was not included up in dis volume of IEEE\ Std\ 1003.1-2001-even
though they is commonly implemented-since there is
no requirement dat tha FORTRAN compila use tha C preprocessor.
.LP
Da \fB-onetrip\fP option was not included up in dis volume of IEEE\ Std\ 1003.1-2001,
even though nuff historical
compilaz support it, cuz it is derived from FORTRAN-66; it is
an anachronizzle dat should not be perpetuated.
.LP
Some implementations produce compilation listings. This aspect of
FORTRAN has been left unspecified cuz there was
controversy concernin tha various methodz proposed fo' implementing
it: a \fB-V\fP option overlapped wit oldschool vendor
practice n' a namin convention of bustin filez wit \fB.l\fP suffixes
collided wit oldschool \fIlex\fP file namin practice.
.LP
There is no \fB-I\fP option up in dis version of dis volume of IEEE\ Std\ 1003.1-2001
to specify a gangbangin' finger-lickin' directory fo' file
inclusion. I aint talkin' bout chicken n' gravy biatch fo' realz. An INCLUDE directizzle has been a part of tha Fortran-90
raps yo, but a intercourse supportin dat standard aint in
the current scope.
.LP
It be noted dat nuff FORTRAN compilaz produce a object module even
when compilation errors occur; durin a subsequent
compilation, tha compila may patch tha object module rather than
recompilin all tha code. Consequently, it is left ta the
implementor whether or not a object file is pimped.
.LP
A reference ta MIL-STD-1753 was removed from a early proposal in
response ta a request from tha POSIX FORTRAN-bindin standard
developers. Dat shiznit was not tha intention of tha standard pimpers to
require certification of tha FORTRAN compiler, and
IEEE\ Std\ 1003.9-1992 do not specify tha military standard or any
special preprocessin requirements, n' you can put dat on yo' toast. Furthermore, use
of dat document would done been inappropriate fo' a international
standard.
.LP
Da justification of optimization has been subject ta chizzlez through
early proposals fo' realz. At one time, \fB-O\fP n' \fB-N\fP were
Booleans: optimize n' do not optimize (with a unspecified default).
Some oldschool practice hustled dis ta be chizzled to:
.TP 7
\fB-O\fP\ 0
No optimization.
.TP 7
\fB-O\fP\ 1
Some level of optimization.
.TP 7
\fB-O\ \fP \fIn\fP
Other, unspecified levelz of optimization.
.sp
.LP
It aint always clear whether "phat code generation" is tha same
thang as optimization. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Simple optimizationz of local actions
do not probably affect tha semantics of a program. Da \fB-O\fP 0 option
has been included ta accommodate tha straight-up particular
nature of scientistical calculations up in a highly optimized environment;
compilaz make errors. Right back up in yo muthafuckin ass. Some degree of optimization is
expected, even if it aint documented here, n' tha mobilitizzle ta shut
it off straight-up could be blingin when portin an
application. I aint talkin' bout chicken n' gravy biatch fo' realz. An implementation may treat \fB-O\fP 0 as "do less than
normal" if it wishes yo, but dis is only meaningful if any of
the operations it performs can affect tha semantics of a program.
It be highly dependent on tha implementation whether bustin less
than aiiight is logical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Well shiiiit, it aint tha intent of tha \fB-O\fP 0 option
to ask fo' inefficient code generation yo, but rather ta assure
that any semantically visible optimization is suppressed.
.LP
Da justification of standard library access is consistent wit the
C compila justification. I aint talkin' bout chicken n' gravy biatch. Implementations is not required
to have \fB/usr/lib/libf.a\fP, as nuff oldschool implementations
do yo, but if not they is required ta recognize \fBf\fP as a
token.
.LP
External symbol size limits is up in normatizzle text; conformin applications
need ta know these limits, n' you can put dat on yo' toast. But fuck dat shiznit yo, tha word on tha street is dat tha minimum
maximum symbol length should be taken as a cold-ass lil constraint on a cold-ass lil conforming
application, not on a implementation, n' consequently the
action taken fo' a symbol exceedin tha limit is unspecified. Y'all KNOW dat shit, muthafucka! The
minimum size fo' tha external symbol table was added fo' similar
reasons.
.LP
Da CONSEQUENCES OF ERRORS section clearly specifies tha behavior
of tha compila when compilation or link-edit errors occur.
Da behavior of nuff muthafuckin oldschool implementations was examined, and
the chizzle was made ta be silent on tha statuz of the
executable, or \fBa.out\fP, file up in tha grill of compila or linker
errors. If a linker writes tha executable file, then links it
on disk wit \fIlseek\fP()s n' \fIwrite\fP()s, the
partially linked executable file can be left on disk n' its execute
bits turned off if tha link edit fails. But fuck dat shiznit yo, tha word on tha street is dat if tha linker
links tha image up in memory before freestylin tha file ta disk, it need
not bust a nut on tha executable file (if it already exists) cuz the
link edit fails. Right back up in yo muthafuckin ass. Since both approaches is oldschool practice, a
conformin application shall rely on tha exit status of
\fIfort77\fP, rather than on tha existence or mode of tha executable
file.
.LP
Da \fB-g\fP n' \fB-s\fP options is not specified as mutually-exclusive.
Historically these two options have been
mutually-exclusive yo, but cuz both is so loosely specified, it
seemed appropriate ta leave they interaction unspecified.
.LP
Da requirement dat conformin applications specify compila options
separately is ta reserve tha multi-characta option name
space fo' vendor-specific compila options, which is known ta exist
in nuff oldschool implementations. Implementations is not
required ta recognize, fo' example, \fB-gc\fP as if it was \fB-g\fP
\fB-c\fP; nor is they forbidden from bustin so. The
SYNOPSIS shows all of tha options separately ta highlight dis requirement
on applications.
.LP
Echoin filenames ta standard error is considered a gangbangin' finger-lickin' diagnostic message
because it would otherwise be hard as fuck ta associate an
error message wit tha errin file. They is busted lyrics bout wit "may"
to allow implementations ta use other methodz of identifying
filez n' ta parallel tha description up in \fIc99\fP.
.SH FUTURE DIRECTIONS
.LP
A compilation system based on tha ISO/IEC\ 1539:1990 standard (Fortran-90)
may be considered fo' a gangbangin' future version; it may
have a gangbangin' finger-lickin' different utilitizzle name from \fIfort77\fP.
.SH SEE ALSO
.LP
\fIar\fP, \fIasa\fP, \fIc99\fP, \fIumask\fP(), tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001, \fIexec\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
