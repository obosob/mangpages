.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LEX" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" lex 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
lex \- generate programs fo' lexical tasks (\fBDEVELOPMENT\fP)
.SH SYNOPSIS
.LP
\fBlex\fP \fB[\fP\fB-t\fP\fB][\fP\fB-n|-v\fP\fB][\fP\fIfile\fP \fB...\fP\fB]\fP\fB\fP
.SH DESCRIPTION
.LP
Da \fIlex\fP utilitizzle shall generate C programs ta be used up in lexical
processin of characta input, n' dat can be used as an
interface ta \fIyacc\fP. Da C programs shall be generated from \fIlex\fP
source code and
conform ta tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! Usually, tha \fIlex\fP utilitizzle shall
write tha program it generates ta tha file
\fBlex.yy.c\fP; tha state of dis file is unspecified if \fIlex\fP
exits wit a non-zero exit status. Right back up in yo muthafuckin ass. See tha EXTENDED
DESCRIPTION section fo' a cold-ass lil complete description of tha \fIlex\fP input
language.
.SH OPTIONS
.LP
Da \fIlex\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-n\fP
Suppress tha summary of statistics probably freestyled wit tha \fB-v\fP
option. I aint talkin' bout chicken n' gravy biatch. If no table sizes is specified up in tha \fIlex\fP
source code n' tha \fB-v\fP option aint specified, then \fB-n\fP
is implied.
.TP 7
\fB-t\fP
Write tha resultin program ta standard output instead of \fBlex.yy.c\fP.
.TP 7
\fB-v\fP
Write a summary of \fIlex\fP statistics ta tha standard output. (See
the rap of \fIlex\fP table sizes up in Definitions up in lex .) If
the \fB-t\fP option is specified n' \fB-n\fP aint specified, this
report shall
be freestyled ta standard error. Shiiit, dis aint no joke. If table sizes is specified up in the
\fIlex\fP source code, n' if tha \fB-n\fP option is not
specified, tha \fB-v\fP option may be enabled.
.sp
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIfile\fP
A pathname of a input file. If mo' than one such \fIfile\fP is specified,
all filez shall be concatenated ta produce a
single \fIlex\fP program. If no \fIfile\fP operandz is specified,
or if a \fIfile\fP operand is \fB'-'\fP, tha standard
input shall be used.
.sp
.SH STDIN
.LP
Da standard input shall be used if no \fIfile\fP operandz is specified,
or if a \fIfile\fP operand is \fB'-'\fP . Right back up in yo muthafuckin ass. See
INPUT FILES.
.SH INPUT FILES
.LP
Da input filez shall be text filez containin \fIlex\fP source code,
as busted lyrics bout up in tha EXTENDED DESCRIPTION section.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIlex\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements within regular
expressions. If dis variable aint set ta tha POSIX locale, the
results is unspecified.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files), and
the behavior of characta classes within regular expressions.
If dis variable aint set ta tha POSIX locale, tha thangs up in dis biatch is unspecified.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
If tha \fB-t\fP option is specified, tha text file of C source code
output of \fIlex\fP shall be freestyled ta standard
output.
.LP
If tha \fB-t\fP option aint specified:
.IP " *" 3
Implementation-defined shiznital, error, n' warnin lyrics
concernin tha contentz of \fIlex\fP source code input shall
be freestyled ta either tha standard output or standard error.
.LP
.IP " *" 3
If tha \fB-v\fP option is specified n' tha \fB-n\fP option is not
specified, \fIlex\fP statistics shall also be freestyled to
either tha standard output or standard error, up in a implementation-defined
format. These statistics may also be generated if table
sizes is specified wit a \fB'%'\fP operator up in tha \fIDefinitions\fP
section, as long as tha \fB-n\fP option is not
specified.
.LP
.SH STDERR
.LP
If tha \fB-t\fP option is specified, implementation-defined shiznital,
error, n' warnin lyrics concernin tha contents
of \fIlex\fP source code input shall be freestyled ta tha standard error.
.LP
If tha \fB-t\fP option aint specified:
.IP " 1." 4
Implementation-defined shiznital, error, n' warnin lyrics
concernin tha contentz of \fIlex\fP source code input shall
be freestyled ta either tha standard output or standard error.
.LP
.IP " 2." 4
If tha \fB-v\fP option is specified n' tha \fB-n\fP option is not
specified, \fIlex\fP statistics shall also be freestyled to
either tha standard output or standard error, up in a implementation-defined
format. These statistics may also be generated if table
sizes is specified wit a \fB'%'\fP operator up in tha \fIDefinitions\fP
section, as long as tha \fB-n\fP option is not
specified.
.LP
.SH OUTPUT FILES
.LP
A text file containin C source code shall be freestyled ta \fBlex.yy.c\fP,
or ta tha standard output if tha \fB-t\fP option is
present.
.SH EXTENDED DESCRIPTION
.LP
Each input file shall contain \fIlex\fP source code, which be a table
of regular expressions wit correspondin actions up in the
form of C program fragments.
.LP
When \fBlex.yy.c\fP is compiled n' linked wit tha \fIlex\fP library
(usin tha \fB-l\ l\fP operand wit \fIc99\fP), tha resultin program
shall read characta input from tha standard input n' shall
partizzle it tha fuck into strings dat match tha given expressions.
.LP
When a expression is matched, these actions shall occur:
.IP " *" 3
Da input strang dat was matched shall be left up in \fIyytext\fP as
a null-terminated string; \fIyytext\fP shall either be an
external characta array or a pointa ta a cold-ass lil characta strin fo' realz. As explained
in Definitions up in lex,
the type can be explicitly selected rockin tha \fB%array\fP or \fB%pointer\fP
declarations yo, but tha default is
implementation-defined.
.LP
.IP " *" 3
Da external \fBint\fP \fIyyleng\fP shall be set ta tha length of
the matchin string.
.LP
.IP " *" 3
Da expressionz correspondin program fragment, or action, shall
be executed.
.LP
.LP
Durin pattern matching, \fIlex\fP shall search tha set of patterns
for tha single longest possible match fo' realz. Among rulez that
match tha same number of characters, tha rule given first shall be
chosen.
.LP
Da general format of \fIlex\fP source shall be:
.sp
.RS
.nf

\fIDefinitions\fP
\fB%%\fP
\fIRules\fP
\fB%%\fP
\fIUser\fPSubroutines
.fi
.RE
.LP
Da first \fB"%%"\fP is required ta mark tha beginnin of tha rules
(regular expressions n' actions); tha second
\fB"%%"\fP is required only if user subroutines follow.
.LP
Any line up in tha \fIDefinitions\fP section beginnin wit a <blank>
shall be assumed ta be a C program fragment n' shall
be copied ta tha external definizzle area of tha \fBlex.yy.c\fP file.
Similarly, anythang up in tha \fIDefinitions\fP section
included between delimita lines containin only \fB"%{"\fP n' \fB"%}"\fP
shall also be copied unchanged ta tha external
definizzle area of tha \fBlex.yy.c\fP file.
.LP
Any such input (beginnin wit a <blank> or within \fB"%{"\fP and
\fB"%}"\fP delimita lines) appearin at the
beginnin of tha \fIRules\fP section before any rulez is specified
shall be freestyled ta \fBlex.yy.c\fP afta tha declarations of
variablez fo' tha \fIyylex\fP() function n' before tha straight-up original gangsta line
of code up in \fIyylex\fP(). Thus, user variablez local to
\fIyylex\fP() can be declared here, as well as application code to
execute upon entry ta \fIyylex\fP().
.LP
Da action taken by \fIlex\fP when encounterin any input beginning
with a <blank> or within \fB"%{"\fP and
\fB"%}"\fP delimita lines appearin up in tha \fIRules\fP section but
comin afta one or mo' rulez is undefined. Y'all KNOW dat shit, muthafucka! Da presence
of such input may result up in a erroneous definizzle of tha \fIyylex\fP()
function.
.SS Definitions up in lex
.LP
\fIDefinitions\fP step tha fuck up before tha straight-up original gangsta \fB"%%"\fP delimiter n' shiznit fo' realz. Any
line up in dis section not contained between \fB"%{"\fP
and \fB"%}"\fP lines n' not beginnin wit a <blank> shall be assumed
to define a \fIlex\fP substitution string. The
format of these lines shall be:
.sp
.RS
.nf

\fIname substitute\fP
.fi
.RE
.LP
If a \fIname\fP do not hook up tha requirements fo' identifiers in
the ISO\ C standard, tha result is undefined. Y'all KNOW dat shit, muthafucka! Da string
\fIsubstitute\fP shall replace tha strang { \fIname\fP} when it is
used up in a rule. Da \fIname\fP strang shall be recognized in
this context only when tha braces is provided n' when it do not
appear within a funky-ass bracket expression or within double-quotes.
.LP
In tha \fIDefinitions\fP section, any line beginnin wit a \fB'%'\fP
(percent sign) characta n' followed by an
alphanumeric word beginnin wit either \fB's'\fP or \fB'S'\fP shall
define a set of start conditions fo' realz. Any line beginning
with a \fB'%'\fP followed by a word beginnin wit either \fB'x'\fP
or \fB'X'\fP shall define a set of exclusive start
conditions. When tha generated scanner is up in a \fB%s\fP state, patterns
with no state specified shall be also active; up in a
\fB%x\fP state, such patterns shall not be active. Da rest of the
line, afta tha straight-up original gangsta word, shall be considered ta be one or
more <blank>-separated namez of start conditions. Right back up in yo muthafuckin ass. Start condition
names shall be constructed up in tha same way as definition
names. Right back up in yo muthafuckin ass. Start conditions can be used ta restrict tha matchin of regular
expressions ta one or mo' states as busted lyrics bout up in Regular Expressions
in lex .
.LP
Implementations shall accept either of tha followin two mutually-exclusive
declarations up in tha \fIDefinitions\fP section:
.TP 7
\fB%array\fP
Declare tha type of \fIyytext\fP ta be a null-terminated character
array.
.TP 7
\fB%pointer\fP
Declare tha type of \fIyytext\fP ta be a pointa ta a null-terminated
characta string.
.sp
.LP
Da default type of \fIyytext\fP is implementation-defined. Y'all KNOW dat shit, muthafucka! If an
application refers ta \fIyytext\fP outside of tha scanner
source file (that is, via a \fBextern\fP), tha application shall
include tha appropriate \fB%array\fP or \fB%pointer\fP
declaration up in tha scanner source file.
.LP
Implementations shall accept declarations up in tha \fIDefinitions\fP
section fo' settin certain internal table sizes. The
declarations is shown up in tha followin table.
.sp
.ce 1
\fBTable: Table Size Declarations up in \fIlex\fP\fP
.TS C
center; l2 l2 l.
\fBDeclaration\fP	\fBDescription\fP	\fBMinimum Value\fP
%\fBp\fP \fIn\fP	Number of positions	2500
%\fBn\fP \fIn\fP	Number of states	500
%\fBa\fP \fIn\fP	Number of transitions	2000
%\fBe\fP \fIn\fP	Number of parse tree nodes	1000
%\fBk\fP \fIn\fP	Number of packed characta classes	1000
%\fBo\fP \fIn\fP	Size of tha output array	3000
.TE
.LP
In tha table, \fIn\fP represents a positizzle decimal integer, preceded
by one or mo' <blank>s. Da exact meanin of these
table size numbers is implementation-defined. Y'all KNOW dat shit, muthafucka! Da implementation shall
document how tha fuck these numbers affect tha \fIlex\fP utilitizzle and
how they is related ta any output dat may be generated by tha implementation
should limitations be encountered durin the
execution of \fIlex\fP. Well shiiiit, it shall be possible ta determine from this
output which of tha table size joints need ta be modified to
permit \fIlex\fP ta successfully generate tablez fo' tha input language.
Da joints up in tha column Minimum Value represent the
lowest joints conformin implementations shall provide.
.SS Rulez up in lex
.LP
Da rulez up in \fIlex\fP source filez is a table up in which tha left
column gotz nuff regular expressions n' tha right column
gotz nuff actions (C program fragments) ta be executed when tha expressions
are recognized.
.sp
.RS
.nf

\fIERE action
ERE action\fP\fB...
\fP
.fi
.RE
.LP
Da extended regular expression (ERE) portion of a row shall be separated
from \fIaction\fP by one or mo' <blank>s fo' realz. A
regular expression containin <blank>s shall be recognized under one
of tha followin conditions:
.IP " *" 3
Da entire expression appears within double-quotes.
.LP
.IP " *" 3
Da <blank>s step tha fuck up within double-quotes or square brackets.
.LP
.IP " *" 3
Each <blank> is preceded by a funky-ass backslash character.
.LP
.SS User Subroutines up in lex
.LP
Anythang up in tha user subroutines section shall be copied ta \fBlex.yy.c\fP
followin \fIyylex\fP().
.SS Regular Expressions up in lex
.LP
Da \fIlex\fP utilitizzle shall support tha set of extended regular expressions
(see tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 9.4, Extended Regular Expressions),
with tha followin additions n' exceptions ta tha syntax:
.TP 7
\fB"..."\fP
Any strang enclosed up in double-quotes shall represent tha characters
within tha double-quotes as theyselves, except that
backslash escapes (which step tha fuck up in tha followin table) shall be recognized.
Any backslash-escape sequence shall be terminated by
the closin quote. For example, \fB"\\01"\fP \fB"1"\fP represents
a single string: tha octal value 1 followed by tha character
\fB'1'\fP .
.TP 7
<\fIstate\fP>\fIr\fP,\ <\fIstate1,state2,\fP...>\fIr\fP
.sp
Da regular expression \fIr\fP shall be matched only when tha program
is up in one of tha start conditions indicated by \fIstate\fP,
\fIstate1\fP, n' so on; peep Actions up in lex . (As a exception to
the typographical conventions of
the rest of dis volume of IEEE\ Std\ 1003.1-2001, up in dis case <\fIstate\fP>
does not represent a metavariable yo, but
the literal angle-bracket charactas surroundin a symbol.) Da start
condizzle shall be recognized as such only all up in tha beginning
of a regular expression.
.TP 7
\fIr\fP/\fIx\fP
Da regular expression \fIr\fP shall be matched only if it is followed
by a occurrence of regular expression \fIx\fP (
\fIx\fP is tha instizzle of trailin context, further defined below).
Da token returned up in \fIyytext\fP shall only match
\fIr\fP. If tha trailin portion of \fIr\fP matches tha beginning
of \fIx\fP, tha result is unspecified. Y'all KNOW dat shit, muthafucka! Da \fIr\fP expression
cannot include further trailin context or tha \fB'$'\fP (match-end-of-line)
operator; \fIx\fP cannot include tha \fB'^'\fP
(match-beginning-of-line) operator, nor trailin context, nor the
\fB'$'\fP operator. Shiiit, dis aint no joke. That is, only one occurrence of trailing
context be allowed up in a \fIlex\fP regular expression, n' tha \fB'^'\fP
operator only can be used all up in tha beginnin of such an
expression.
.TP 7
{\fIname\fP}
When \fIname\fP is one of tha substitution symbols from tha \fIDefinitions\fP
section, tha string, includin tha enclosing
braces, shall be replaced by tha \fIsubstitute\fP value. Da \fIsubstitute\fP
value shall be treated up in tha extended regular
expression as if it was enclosed up in parentheses. No substitution
shall occur if { \fIname\fP} occurs within a funky-ass bracket expression
or within double-quotes.
.sp
.LP
Within a ERE, a funky-ass backslash characta shall be considered ta begin
an escape sequence as specified up in tha table up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 5, File Format
Notation (
\fB'\\\\'\fP, \fB'\\a'\fP, \fB'\\b'\fP, \fB'\\f'\fP, \fB'\\n'\fP,
\fB'\\r'\fP, \fB'\\t'\fP, \fB'\\v'\fP ). In
addition, tha escape sequences up in tha followin table shall be recognized.
.LP
A literal <newline> cannot occur within a ERE; tha escape sequence
\fB'\\n'\fP can be used ta represent a
<newline> fo' realz. A <newline> shall not be matched by a period operator.
.br
.sp
.ce 1
\fBTable: Escape Sequences up in \fIlex\fP\fP
.TS C
center; l1 lw(30)1 lw(30).
\fBEscape\fP	T{
.na
\fB\ \fP
.ad
T}	T{
.na
\fB\ \fP
.ad
T}
\fBSequence\fP	T{
.na
\fBDescription\fP
.ad
T}	T{
.na
\fBMeaning\fP
.ad
T}
\\\fIdigits\fP	T{
.na
A backslash characta followed by tha longest sequence of one, two, or three octal-digit charactas (01234567). If all of tha digits is 0 (that is, representation of tha NUL character), tha behavior is undefined.
.ad
T}	T{
.na
Da characta whose encodin is represented by tha one, two, or three-digit octal integer n' shit. If tha size of a funky-ass byte on tha system is pimped outa than nine bits, tha valid escape sequence used ta represent a funky-ass byte is implementation-defined. Y'all KNOW dat shit, muthafucka! Multi-byte charactas require multiple, concatenated escape sequencez of dis type, includin tha leadin \fB'\\'\fP fo' each byte.
.ad
T}
\\x\fIdigits\fP	T{
.na
A backslash characta followed by tha longest sequence of hexadecimal-digit charactas (01234567abcdefABCDEF). If all of tha digits is 0 (that is, representation of tha NUL character), tha behavior is undefined.
.ad
T}	T{
.na
Da characta whose encodin is represented by tha hexadecimal integer.
.ad
T}
\\c	T{
.na
A backslash characta followed by any characta not busted lyrics bout up in dis table or up in tha table up in tha Base Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 5, File Format Notation ( \fB'\\\\'\fP, \fB'\\a'\fP, \fB'\\b'\fP, \fB'\\f'\fP, \fB'\\n'\fP, \fB'\\r'\fP, \fB'\\t'\fP, \fB'\\v'\fP ).
.ad
T}	T{
.na
Da characta \fB'c'\fP, unchanged.
.ad
T}
.TE
.TP 7
\fBNote:\fP
If a \fB'\\x'\fP sequence need ta be immediately followed by a hexadecimal
digit character, a sequence such as
\fB"\\x1"\fP \fB"1"\fP can be used, which represents a cold-ass lil characta containing
the value 1, followed by tha character
\fB'1'\fP .
.sp
.LP
Da order of precedence given ta extended regular expressions for
\fIlex\fP differs from dat specified up in tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Section 9.4, Extended Regular
Expressions. Da order of precedence fo' \fIlex\fP shall be as shown
in tha followin table, from high ta low. 
.TP 7
\fBNote:\fP
Da escaped charactas entry aint meant ta imply dat these are
operators yo, but they is included up in tha table ta show their
relationships ta tha legit operators. Da start condition, trailing
context, n' anchorin notations done been omitted from the
table cuz of tha placement restrictions busted lyrics bout up in dis section;
they can only step tha fuck up all up in tha beginnin or endin of an
ERE.
.sp
.sp
.sp
.ce 1
\fBTable: ERE Precedence up in \fIlex\fP\fP
.TS C
center; l2 l.
\fBExtended Regular Expression\fP	\fBPrecedence\fP
collation-related bracket symbols	[= =] [: :] [. .]
escaped characters	\\<\fIspecial character\fP>
bracket expression	[ ]
quoting	"..."
grouping	( )
definition	{\fIname\fP}
single-characta RE duplication	* + ?
concatenation	\ 
interval expression	{m,n}
alternation	|
.TE
.LP
Da ERE anchorin operators \fB'^'\fP n' \fB'$'\fP do not appear
in tha table. With \fIlex\fP regular expressions, these
operators is restricted up in they use: tha \fB'^'\fP operator can
only be used all up in tha beginnin of a entire regular expression,
and tha \fB'$'\fP operator only all up in tha end yo, but it ain't no stoppin cause I be still poppin'. Da operators apply to
the entire regular expression. I aint talkin' bout chicken n' gravy biatch. Thus, fo' example, tha pattern
\fB"(^abc)|(def$)"\fP is undefined; it can instead be freestyled as two
separate rules, one wit tha regular expression
\fB"^abc"\fP n' one wit \fB"def$"\fP, which share a cold-ass lil common action
via tha special \fB'|'\fP action (see below). If the
pattern was freestyled \fB"^abc|def$"\fP, it would match either \fB"abc"\fP
or \fB"def"\fP on a line by itself.
.LP
Unlike tha general ERE rules, embedded anchorin aint allowed by
most oldschool \fIlex\fP implementations fo' realz. An example of
embedded anchorin would be fo' patterns like fuckin \fB"(^|\ )foo(\ |$)"\fP
to match \fB"foo"\fP when it exists as a
complete word. Y'all KNOW dat shit, muthafucka! This functionalitizzle can be obtained rockin existin \fIlex\fP
features:
.sp
.RS
.nf

\fB^foo/[ \\n]      |
" foo"/[ \\n]    /* Found foo as a separate word. Y'all KNOW dat shit, muthafucka! */
\fP
.fi
.RE
.LP
Note also dat \fB'$'\fP be a gangbangin' form of trailin context (it is equivalent
to \fB"/\\n"\fP ) n' as such cannot be used with
regular expressions containin another instizzle of tha operator (see
the precedin rap of trailin context).
.LP
Da additionizzle regular expressions trailing-context operator \fB'/'\fP
can be used as a ordinary characta if presented
within double-quotes, \fB"/"\fP ; preceded by a funky-ass backslash, \fB"\\/"\fP
; or within a funky-ass bracket expression, \fB"[/]"\fP . The
start-condizzle \fB'<'\fP n' \fB'>'\fP operators shall be special
only up in a start condizzle all up in tha beginnin of a
regular expression; elsewhere up in tha regular expression they shall
be treated as ordinary characters.
.SS Actions up in lex
.LP
Da action ta be taken when a ERE is matched can be a C program fragment
or tha special actions busted lyrics bout below; tha program
fragment can contain one or mo' C statements, n' can also include
special actions. Da empty C statement \fB';'\fP shall be a
valid action; any strang up in tha \fBlex.yy.c\fP input dat matches
the pattern portion of such a rule is effectively ignored or
skipped. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat tha absence of a action shall not be valid, and
the action \fIlex\fP takes up in such a cold-ass lil condizzle is
undefined.
.LP
Da justification fo' a action, includin C statements n' special
actions, can extend across nuff muthafuckin lines if enclosed in
braces:
.sp
.RS
.nf

\fIERE\fP \fB<\fP\fIone or mo' blanks\fP\fB> {\fP \fIprogram statement
                           program statement\fP \fB}
\fP
.fi
.RE
.LP
Da default action when a strang up in tha input ta a \fBlex.yy.c\fP
program aint matched by any expression shall be ta copy the
strin ta tha output. Because tha default behavior of a program generated
by \fIlex\fP is ta read tha input n' copy it ta the
output, a minimal \fIlex\fP source program dat has just \fB"%%"\fP
shall generate a C program dat simply copies tha input to
the output unchanged.
.LP
Four special actions shall be available:
.sp
.RS
.nf

\fB|   ECHO;   REJECT;   BEGIN
\fP
.fi
.RE
.TP 7
\fB|\fP
Da action \fB'|'\fP means dat tha action fo' tha next rule is the
action fo' dis rule. Unlike tha other three actions,
\fB'|'\fP cannot be enclosed up in braces or be semicolon-terminated;
the application shall ensure dat it is specified alone, with
no other actions.
.TP 7
\fBECHO;\fP
Write tha contentz of tha strang \fIyytext\fP on tha output.
.TP 7
\fBREJECT;\fP
Usually only a single expression is matched by a given strang up in the
input. \fBREJECT\fP means "continue ta tha next
expression dat matches tha current input", n' shall cause whatever
rule was tha second chizzle afta tha current rule ta be
executed fo' tha same input. Thus, multiple rulez can be matched and
executed fo' one input strang or overlappin input strings.
For example, given tha regular expressions \fB"xyz"\fP n' \fB"xy"\fP
and tha input \fB"xyz"\fP, probably only tha regular
expression \fB"xyz"\fP would match. Da next attempted match would
start afta \fBz.\fP If tha last action up in the
\fB"xyz"\fP rule is \fBREJECT\fP, both dis rule n' tha \fB"xy"\fP
rule would be executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fBREJECT\fP action may be
implemented up in such a gangbangin' fashizzle dat flow of control do not continue
afta it, as if it was equivalent ta a \fBgoto\fP ta another
part of \fIyylex\fP(). Da use of \fBREJECT\fP may result up in somewhat
larger n' slower scanners.
.TP 7
\fBBEGIN\fP
Da action: 
.sp
.RS
.nf

\fBBEGIN\fP \fInewstate\fP\fB;
\fP
.fi
.RE
.LP
switches tha state (start condition) ta \fInewstate\fP. If tha string
\fInewstate\fP has not been declared previously as a
start condizzle up in tha \fIDefinitions\fP section, tha thangs up in dis biatch are
unspecified. Y'all KNOW dat shit, muthafucka! Da initial state is indicated by tha digit
\fB'0'\fP or tha token \fBINITIAL\fP.
.sp
.LP
Da functions or macros busted lyrics bout below is accessible ta user code
included up in tha \fIlex\fP input. Well shiiiit, it is unspecified whether
they step tha fuck up in tha C code output of \fIlex\fP, or is accessible only
all up in tha \fB-l\ l\fP operand ta \fIc99\fP (the \fIlex\fP library).
.TP 7
\fBint\ \fP \fIyylex\fP(\fBvoid\fP)
.sp
Performs lexical analysis on tha input; dis is tha primary function
generated by tha \fIlex\fP utility. Da function shall return
zero when tha end of input is reached; otherwise, it shall return
non-zero joints (tokens) determined by tha actions dat are
selected.
.TP 7
\fBint\ \fP \fIyymore\fP(\fBvoid\fP)
.sp
When called, indicates dat when tha next input strang is recognized,
it is ta be appended ta tha current value of \fIyytext\fP
rather than replacin it; tha value up in \fIyyleng\fP shall be adjusted
accordingly.
.TP 7
\fBint\ \fP \fIyyless\fP(\fBint\ \fP \fIn\fP)
.sp
Retains \fIn\fP initial charactas up in \fIyytext\fP, NUL-terminated,
and treats tha remainin charactas as if they had not been
read; tha value up in \fIyyleng\fP shall be adjusted accordingly.
.TP 7
\fBint\ \fP \fIinput\fP(\fBvoid\fP)
.sp
Returns tha next characta from tha input, or zero on end-of-file.
It shall obtain input from tha stream pointa \fIyyin\fP,
although possibly via a intermediate buffer n' shit. Thus, once scanning
has begun, tha effect of alterin tha value of \fIyyin\fP is
undefined. Y'all KNOW dat shit, muthafucka! Da characta read shall be removed from tha input stream
of tha scanner without any processin by tha scanner.
.TP 7
\fBint\ \fP \fIunput\fP(\fBint\ \fP \fIc\fP)
.sp
Returns tha characta \fB'c'\fP ta tha input; \fIyytext\fP n' \fIyyleng\fP
are undefined until tha next expression is
matched. Y'all KNOW dat shit, muthafucka! Da result of rockin \fIunput\fP() fo' mo' charactas than
have been input is unspecified.
.sp
.LP
Da followin functions shall step tha fuck up only up in tha \fIlex\fP library
accessible all up in tha \fB-l\ l\fP operand; they can
therefore be redefined by a cold-ass lil conformin application:
.TP 7
\fBint\ \fP \fIyywrap\fP(\fBvoid\fP)
.sp
Called by \fIyylex\fP() at end-of-file; tha default \fIyywrap\fP()
shall always return 1. If tha application requires
\fIyylex\fP() ta continue processin wit another source of input,
then tha application can include a gangbangin' function \fIyywrap\fP(),
which associates another file wit tha external variable \fBFILE *\fP
\fIyyin\fP n' shall return a value of zero.
.TP 7
\fBint\ \fP \fImain\fP(\fBint\ \fP \fIargc\fP, \fBchar *\fP\fIargv\fP[])
.sp
Calls \fIyylex\fP() ta big-ass up lexical analysis, then exits, n' you can put dat on yo' toast. Da user
code can contain \fImain\fP() ta perform
application-specific operations, callin \fIyylex\fP() as applicable.
.sp
.LP
Except fo' \fIinput\fP(), \fIunput\fP(), n' \fImain\fP(), all external
and static names generated by \fIlex\fP shall begin
with tha prefix \fByy\fP or \fBYY\fP.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Conformin applications is warned dat up in tha \fIRules\fP section,
an ERE without a action aint acceptable yo, but need not be
detected as erroneous by \fIlex\fP. This may result up in compilation
or runtime errors.
.LP
Da purpose of \fIinput\fP() is ta take charactas off tha input stream
and discard dem as far as tha lexical analysis is
concerned. Y'all KNOW dat shit, muthafucka! A common use is ta discard tha body of a cold-ass lil comment once the
beginnin of a cold-ass lil comment is recognized.
.LP
Da \fIlex\fP utilitizzle aint straight-up internationalized up in its treatment
of regular expressions up in tha \fIlex\fP source code or
generated lexical analyzer n' shit. Well shiiiit, it would seem desirable ta have tha lexical
analyzer interpret tha regular expressions given up in the
\fIlex\fP source accordin ta tha environment specified when tha lexical
analyzer is executed yo, but dis aint possible wit the
current \fIlex\fP technology. Furthermore, tha straight-up nature of the
lexical analyzers produced by \fIlex\fP must be closely tied to
the lexical requirementz of tha input language bein busted lyrics about, which
is frequently locale-specific anyway. (For example, writing
an analyzer dat is used fo' French text aint automatically useful
for processin other languages.)
.SH EXAMPLES
.LP
Da followin be a example of a \fIlex\fP program dat implements
a rudimentary scanner fo' a Pascal-like syntax:
.sp
.RS
.nf

\fB%{
/* Need dis fo' tha call ta atof() below. */
#include <math.h>
/* Need dis fo' printf(), fopen(), n' stdin below. */
#include <stdio.h>
%}
.sp

DIGIT    [0-9]
ID       [a-z][a-z0-9]*
.sp

%%
.sp

{DIGIT}+ {
    printf("An integer: %s (%d)\\n", yytext,
        atoi(yytext));
    }
.sp

{DIGIT}+"."{DIGIT}*        {
    printf("A float: %s (%g)\\n", yytext,
        atof(yytext));
    }
.sp

if|then|begin|end|procedure|function        {
    printf("A keyword: %s\\n", yytext);
    }
.sp

{ID}    printf("An identifier: %s\\n", yytext);
.sp

"+"|"-"|"*"|"/"        printf("An operator: %s\\n", yytext);
.sp

"{"[^}\\n]*"}"    /* Eat up one-line comments, n' you can put dat on yo' toast. */
.sp

[ \\t\\n]+        /* Eat up white space. */
.sp

\&.  printf("Unrecognized character: %s\\n", yytext);
.sp

%%
.sp

int main(int argc, char *argv[])
{
    ++argv, --argc;  /* Skip over program name. */
    if (argc > 0)
        yyin = fopen(argv[0], "r");
    else
        yyin = stdin;
.sp

    yylex();
}
\fP
.fi
.RE
.SH RATIONALE
.LP
Even though tha \fB-c\fP option n' references ta tha C language are
retained up in dis description, \fIlex\fP may be
generalized ta other languages, as was done at one time fo' EFL, the
Extended FORTRAN Language. Right back up in yo muthafuckin ass. Since tha \fIlex\fP input
specification is essentially language-independent, versionz of this
utilitizzle could be freestyled ta produce Ada, Modula-2, or Pascal
code, n' there be known oldschool implementations dat do so.
.LP
Da current description of \fIlex\fP bypasses tha issue of dealing
with internationalized EREs up in tha \fIlex\fP source code or
generated lexical analyzer n' shit. If it bigs up tha model used by \fIawk\fP
(the source code is
assumed ta be presented up in tha POSIX locale yo, but input n' output
are up in tha locale specified by tha environment variables), then
the tablez up in tha lexical analyzer produced by \fIlex\fP would interpret
EREs specified up in tha \fIlex\fP source up in termz of the
environment variablez specified when \fIlex\fP was executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da desired
effect would be ta have tha lexical analyzer interpret
the EREs given up in tha \fIlex\fP source accordin ta tha environment
specified when tha lexical analyzer is executed yo, but dis is
not possible wit tha current \fIlex\fP technology.
.LP
Da description of octal n' hexadecimal-digit escape sequences agrees
with tha ISO\ C standard use of escape sequences. Right back up in yo muthafuckin ass. See
the RATIONALE fo' \fIed\fP fo' a gangbangin' finger-lickin' rap of bytes larger than 9
bits bein represented by octal joints.
Hexadecimal joints can represent larger bytes n' multi-byte characters
directly, rockin as nuff digits as required.
.LP
There is no detailed output format justification. I aint talkin' bout chicken n' gravy biatch. Da observed behavior
of \fIlex\fP under four different historical
implementations was dat none of these implementations consistently
reported tha line numbers fo' error n' warnin lyrics.
Furthermore, there was a thugged-out desire dat \fIlex\fP be allowed ta output
additionizzle diagnostic lyrics. Leavin message formats
unspecified avoidz these formattin thangs n' problems wit internationalization.
.LP
Although tha \fB%x\fP specifier fo' \fIexclusive\fP start conditions
is not oldschool practice, it is believed ta be a
minor chizzle ta oldschool implementations n' pimped outly enhances the
usabilitizzle of \fIlex\fP programs since it permits an
application ta obtain tha expected functionalitizzle wit fewer statements.
.LP
Da \fB%array\fP n' \fB%pointer\fP declarations was added as a cold-ass lil compromise
between oldschool systems. Da System V-based
\fIlex\fP copies tha matched text ta a \fIyytext\fP array. Da \fIflex\fP
program, supported up in BSD n' GNU systems, uses a
pointer n' shit. In tha latta case, dope performizzle improvements
are available fo' some scanners. Most oldschool programs should
require no chizzle up in portin from one system ta another cuz the
strin bein referenced is null-terminated up in both cases. (The
method used by \fIflex\fP up in its case is ta null-terminizzle tha token
in place by rememberin tha characta dat used ta come right
afta tha token n' replacin it before continuin on ta tha next
scan.) Multi-file programs wit external references to
\fIyytext\fP outside tha scanner source file should continue ta operate
on they oldschool systems yo, but would require one of the
new declarations ta be considered strictly portable.
.LP
Da description of EREs avoidz unnecessary duplication of ERE details
because they meanings within a \fIlex\fP ERE is the
same as dat fo' tha ERE up in dis volume of IEEE\ Std\ 1003.1-2001.
.LP
Da reason fo' tha undefined condizzle associated wit text beginning
with a <blank> or within \fB"%{"\fP and
\fB"%}"\fP delimita lines appearin up in tha \fIRules\fP section is
historical practice. Both tha BSD n' System V \fIlex\fP
copy tha indented (or enclosed) input up in tha \fIRules\fP section (except
at tha beginning) ta unreachable areaz of the
\fIyylex\fP() function (the code is freestyled directly afta a \fIbreak\fP
statement). In some cases, tha System V \fIlex\fP generates a error
message or a syntax error, dependin on tha form of indented
input.
.LP
Da intention up in breakin tha list of functions tha fuck into dem dat may
appear up in \fBlex.yy.c\fP \fIversus\fP dem dat only
appear up in \fBlibl.a\fP is dat only dem functions up in \fBlibl.a\fP
can be reliably redefined by a cold-ass lil conformin application.
.LP
Da descriptionz of standard output n' standard error is somewhat
fucked up cuz oldschool \fIlex\fP implementations
chose ta issue diagnostic lyrics ta standard output (unless \fB-t\fP
was given). IEEE\ Std\ 1003.1-2001 allows this
behavior yo, but leaves a openin fo' tha mo' expected behavior of
usin standard error fo' diagnostics fo' realz. Also, tha System V behavior
of freestylin tha statistics when any table sizes is given be allowed,
while BSD-derived systems can avoid dat shit. Da programmer can
always precisely obtain tha desired thangs up in dis biatch by rockin either tha \fB-t\fP
or \fB-n\fP options.
.LP
Da OPERANDS section do not mention tha use of \fB-\fP as a synonym
for standard input; not all oldschool implementations
support such usage fo' any of tha \fIfile\fP operands.
.LP
A description of tha \fItranslation table\fP was deleted from early
proposals cuz of its relatively low usage up in historical
applications.
.LP
Da chizzle ta tha definizzle of tha \fIinput\fP() function dat allows
bufferin of input presents tha opportunitizzle fo' major
performizzle gains up in some applications.
.LP
Da followin examplez clarify tha differences between \fIlex\fP regular
expressions n' regular expressions appearing
elsewhere up in dis volume of IEEE\ Std\ 1003.1-2001. For regular expressions
of tha form \fB"r/x"\fP, tha string
matchin \fIr\fP be always returned; mad drama may arise when the
beginnin of \fIx\fP matches tha trailin portion of \fIr\fP.
For example, given tha regular expression \fB"a*b/cc"\fP n' tha input
\fB"aaabcc"\fP, \fIyytext\fP would contain the
strin \fB"aaab"\fP on dis match. But given tha regular expression
\fB"x*/xy"\fP n' tha input \fB"xxxy"\fP, tha token
\fBxxx\fP, not \fBxx\fP, is returned by some implementations cuz
\fBxxx\fP matches \fB"x*"\fP .
.LP
In tha rule \fB"ab*/bc"\fP, tha \fB"b*"\fP all up in tha end of \fIr\fP
extendz \fIr\fPz match tha fuck into tha beginnin of the
trailin context, so tha result is unspecified. Y'all KNOW dat shit, muthafucka! If dis rule were
\fB"ab/bc"\fP, however, tha rule matches tha text
\fB"ab"\fP when it is followed by tha text \fB"bc"\fP . In dis latter
case, tha matchin of \fIr\fP cannot extend tha fuck into the
beginnin of \fIx\fP, so tha result is specified.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIc99\fP, \fIed\fP, \fIyacc\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
