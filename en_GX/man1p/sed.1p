.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SED" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sed 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sed \- stream editor
.SH SYNOPSIS
.LP
\fBsed\fP \fB[\fP\fB-n\fP\fB]\fP \fIscript\fP\fB[\fP\fIfile\fP\fB...\fP\fB]\fP\fB
.br
.sp
sed\fP \fB[\fP\fB-n\fP\fB][\fP\fB-e\fP \fIscript\fP\fB]\fP\fB...\fP\fB[\fP\fB-f\fP
\fIscript_file\fP\fB]\fP\fB...\fP\fB[\fP\fIfile\fP\fB...\fP\fB]\fP\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsed\fP utilitizzle be a stream editor dat shall read one or more
text files, make editin chizzlez accordin ta a script of
editin commands, n' write tha thangs up in dis biatch ta standard output. Da script
shall be obtained from either tha \fIscript\fP operand
strin or a cold-ass lil combination of tha option-arguments from tha \fB-e\fP
\fIscript\fP n' \fB-f\fP \fIscript_file\fP options.
.SH OPTIONS
.LP
Da \fIsed\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines,
except dat tha order of presentation of the
\fB-e\fP n' \fB-f\fP options is significant.
.LP
Da followin options shall be supported:
.TP 7
\fB-e\ \fP \fIscript\fP
Add tha editin commandz specified by tha \fIscript\fP option-argument
to tha end of tha script of editin commands. The
\fIscript\fP option-argument shall have tha same propertizzles as the
\fIscript\fP operand, busted lyrics bout up in tha OPERANDS section.
.TP 7
\fB-f\ \fP \fIscript_file\fP
Add tha editin commandz up in tha file \fIscript_file\fP ta tha end
of tha script.
.TP 7
\fB-n\fP
Suppress tha default output (in which each line, afta it is examined
for editing, is freestyled ta standard output). Only lines
explicitly selected fo' output is written.
.sp
.LP
Multiple \fB-e\fP n' \fB-f\fP options may be specified. Y'all KNOW dat shit, muthafucka! All commands
shall be added ta tha script up in tha order specified,
regardless of they origin.
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIfile\fP
A pathname of a gangbangin' file whose contents is read n' edited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If multiple
\fIfile\fP operandz is specified, tha named filez shall
be read up in tha order specified n' tha concatenation shall be edited.
If no \fIfile\fP operandz is specified, tha standard input
shall be used.
.TP 7
\fIscript\fP
A strang ta be used as tha script of editin commands. Da application
shall not present a \fIscript\fP dat violates the
restrictionz of a text file except dat tha final characta need not
be a <newline>.
.sp
.SH STDIN
.LP
Da standard input shall be used only if no \fIfile\fP operandz are
specified. Y'all KNOW dat shit, muthafucka! See tha INPUT FILES section.
.SH INPUT FILES
.LP
Da input filez shall be text files. Da \fIscript_file\fPs named
by tha \fB-f\fP option shall consist of editing
commands.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIsed\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements within regular
expressions.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files), and
the behavior of characta classes within regular
expressions.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Da input filez shall be freestyled ta standard output, wit tha editing
commandz specified up in tha script applied. Y'all KNOW dat shit, muthafucka! If tha \fB-n\fP
option is specified, only dem input lines selected by tha script
shall be freestyled ta standard output.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
Da output filez shall be text filez whose formats is dependent on
the editin commandz given.
.SH EXTENDED DESCRIPTION
.LP
Da \fIscript\fP shall consist of editin commandz of tha following
form:
.sp
.RS
.nf

\fB[\fP\fIaddress\fP\fB[\fP\fB,\fP\fIaddress\fP\fB]]\fP\fIfunction\fP
.fi
.RE
.LP
where \fIfunction\fP represents a single-characta command verb from
the list up in Editin Commands
in sed, followed by any applicable arguments.
.LP
Da command can be preceded by <blank>s and/or semicolons. Da function
can be preceded by <blank>s. These optional
charactas shall have no effect.
.LP
In default operation, \fIsed\fP cyclically shall append a line of
input, less its terminatin <newline>, tha fuck into tha pattern
space. Normally tha pattern space is ghon be empty, unless a \fBD\fP
command terminated tha last cycle. Da \fIsed\fP utilitizzle shall
then apply up in sequence all commandz whose addresses select dat pattern
space, n' all up in tha end of tha script copy tha pattern space
to standard output (except when \fB-n\fP is specified) n' delete
the pattern space. Whenever tha pattern space is freestyled to
standard output or a named file, \fIsed\fP shall immediately follow
it wit a <newline>.
.LP
Some of tha editin commandz bust a hold space ta save all or part
of tha pattern space fo' subsequent retrieval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da pattern and
hold spaces shall each be able ta hold at least 8192 bytes.
.SS Addresses up in sed
.LP
An address is either a thugged-out decimal number dat counts input lines cumulatively
across files, a \fB'$'\fP characta dat addresses
the last line of input, or a cold-ass lil context address (which consistz of a
BRE, as busted lyrics bout up in Regular
Expressions up in sed, preceded n' followed by a thugged-out delimiter, usually
a slash).
.LP
An editin command wit no addresses shall select every last muthafuckin pattern space.
.LP
An editin command wit one address shall select each pattern space
that matches tha address.
.LP
An editin command wit two addresses shall select tha inclusive range
from tha straight-up original gangsta pattern space dat matches tha first
address all up in tha next pattern space dat matches tha second. Y'all KNOW dat shit, muthafucka! (If
the second address be a number less than or equal ta tha line
number first selected, only one line shall be selected.) Starting
at tha straight-up original gangsta line followin tha selected range, \fIsed\fP shall
look again n' again n' again fo' tha straight-up original gangsta address. Thereafter, tha process shall be
repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Omittin either or both of tha address components in
the followin form produces undefined thangs up in dis biatch:
.sp
.RS
.nf

\fB[\fP\fIaddress\fP\fB[\fP\fB,\fP\fIaddress\fP\fB]]\fP
.fi
.RE
.SS Regular Expressions up in sed
.LP
Da \fIsed\fP utilitizzle shall support tha BREs busted lyrics bout up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 9.3, Basic Regular
Expressions, wit tha followin additions:
.IP " *" 3
In a cold-ass lil context address, tha construction \fB"\\cBREc"\fP, where \fIc\fP
is any characta other than backslash or
<newline>, shall be identical ta \fB"/BRE/"\fP . If tha character
designated by \fIc\fP appears followin a funky-ass backslash,
then it shall be considered ta be dat literal character, which shall
not terminizzle tha BRE. For example, up in tha context address
\fB"\\xabc\\xdefx"\fP, tha second \fIx\fP standz fo' itself, so that
the BRE is \fB"abcxdef"\fP .
.LP
.IP " *" 3
Da escape sequence \fB'\\n'\fP shall match a <newline> embedded in
the pattern space fo' realz. A literal <newline> shall
not be used up in tha BRE of a cold-ass lil context address or up in tha substitute function.
.LP
.IP " *" 3
If a RE is empty (that is, no pattern is specified) \fIsed\fP shall
behave as if tha last RE used up in tha last command applied
(either as a address or as part of a substitute command) was specified.
.LP
.SS Editin Commandz up in sed
.LP
In tha followin list of editin commands, tha maximum number of permissible
addresses fo' each function is indicated by [
\fI0addr\fP], [ \fI1addr\fP], or [ \fI2addr\fP], representin zero,
one, or two addresses.
.LP
Da argument \fItext\fP shall consist of one or mo' lines. Each embedded
<newline> up in tha text shall be preceded by a
backslash. Other backslashes up in text shall be removed, n' tha following
characta shall be treated literally.
.LP
Da \fBr\fP n' \fBw\fP command verbs, n' tha \fIw\fP flag ta the
\fBs\fP command, take a optionizzle \fIrfile\fP (or
\fIwfile\fP) parameter, separated from tha command verb letta or
flag by one or mo' <blank>s; implementations may allow
zero separation as a extension.
.LP
Da argument \fIrfile\fP or tha argument \fIwfile\fP shall terminate
the editin command. Y'all KNOW dat shit, muthafucka! Each \fIwfile\fP shall be pimped
before processin begins. Implementations shall support at least ten
\fIwfile\fP arguments up in tha script; tha actual number
(greata than or equal ta 10) dat is supported by tha implementation
is unspecified. Y'all KNOW dat shit, muthafucka! Da use of tha \fIwfile\fP parameta shall
cause dat file ta be initially pimped, if it do not exist, or
shall replace tha contentz of a existin file.
.LP
Da \fBb\fP, \fBr\fP, \fBs\fP, \fBt\fP, \fBw\fP, \fBy\fP, n' \fB:\fP
command verbs shall accept additionizzle arguments.
Da followin synopses indicate which arguments shall be separated
from tha command verbs by a single <space>.
.LP
Da \fBa\fP n' \fBr\fP commandz schedule text fo' lata output. The
text specified fo' tha \fBa\fP command, n' tha contents
of tha file specified fo' tha \fBr\fP command, shall be freestyled to
standard output just before tha next attempt ta fetch a line of
input when executin tha \fBN\fP or \fBn\fP commands, or when reaching
the end of tha script. If freestyled when reachin tha end of
the script, n' tha \fB-n\fP option was not specified, tha text shall
be freestyled afta copyin tha pattern space ta standard
output. Da contentz of tha file specified fo' tha \fBr\fP command
shall be az of tha time tha output is written, not tha time the
\fBr\fP command be applied. Y'all KNOW dat shit, muthafucka! Da text shall be output up in tha order
in which tha \fBa\fP n' \fBr\fP commandz was applied ta the
input.
.LP
Command verbs other than \fB{\fP, \fBa\fP, \fBb\fP, \fBc\fP, \fBi\fP,
\fBr\fP, \fBt\fP, \fBw\fP, \fB:\fP, n' \fB#\fP
can be followed by a semicolon, optionizzle <blank>s, n' another command
verb. But fuck dat shiznit yo, tha word on tha street is dat when tha \fBs\fP command verb is used
with tha \fIw\fP flag, followin it wit another command up in dis manner
produces undefined thangs up in dis biatch.
.LP
A function can be preceded by one or mo' \fB'!'\fP characters, in
which case tha function shall be applied if tha addresses
do not select tha pattern space. Zero or mo' <blank>s shall be accepted
before tha straight-up original gangsta \fB'!'\fP character n' shit. Well shiiiit, it is
unspecified whether <blank>s can follow a \fB'!'\fP character, and
conformin applications shall not follow a \fB'!'\fP
characta wit <blank>s.
.TP 7
\fB[\fP\fI2addr\fP\fB]\ {\fP\fIfunction\fP
.TP 7
\fIfunction\fP
.TP 7
\&...
.TP 7
\fB}\fP
Execute a list of \fIsed\fP functions only when tha pattern space
is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da list of \fIsed\fP functions shall be
surrounded by braces n' separated by <newline>s, n' conform ta the
followin rules. Da braces can be preceded or followed
by <blank>s. Da functions can be preceded by <blank>s yo, but shall
not be followed by <blank>s. The
<right-brace> shall be preceded by a <newline> n' can be preceded
or followed by <blank>s.
.TP 7
\fB[\fP\fI1addr\fP\fB]a\\\fP
.TP 7
\fItext\fP
Write text ta standard output as busted lyrics bout previously.
.TP 7
\fB[\fP\fI2addr\fP\fB]b\ [\fP\fIlabel\fP\fB]\fP
.sp
Branch ta tha \fB:\fP function bearin tha \fIlabel\fP. If \fIlabel\fP
is not specified, branch ta tha end of tha script. The
implementation shall support \fIlabel\fPs recognized as unique up
to at least 8 characters; tha actual length (greata than or
equal ta 8) dat shall be supported by tha implementation is unspecified.
It be unspecified whether exceedin a label length causes
an error or a silent truncation.
.TP 7
\fB[\fP\fI2addr\fP\fB]c\\\fP
.TP 7
\fItext\fP
Delete tha pattern space. With a 0 or 1 address or all up in tha end of a
2-address range, place \fItext\fP on tha output n' start
the next cycle.
.TP 7
\fB[\fP\fI2addr\fP\fB]d\fP
Delete tha pattern space n' start tha next cycle.
.TP 7
\fB[\fP\fI2addr\fP\fB]D\fP
Delete tha initial segment of tha pattern space all up in tha first
<newline> n' start tha next cycle.
.TP 7
\fB[\fP\fI2addr\fP\fB]g\fP
Replace tha contentz of tha pattern space by tha contentz of tha hold
space.
.TP 7
\fB[\fP\fI2addr\fP\fB]G\fP
Append ta tha pattern space a <newline> followed by tha contents of
the hold space.
.TP 7
\fB[\fP\fI2addr\fP\fB]h\fP
Replace tha contentz of tha hold space wit tha contentz of tha pattern
space.
.TP 7
\fB[\fP\fI2addr\fP\fB]H\fP
Append ta tha hold space a <newline> followed by tha contentz of the
pattern space.
.TP 7
\fB[\fP\fI1addr\fP\fB]i\\\fP
.TP 7
\fItext\fP
Write \fItext\fP ta standard output.
.TP 7
\fB[\fP\fI2addr\fP\fB]l\fP
(Da letta ell.) Write tha pattern space ta standard output up in a
visually unambiguous form. Da charactas listed up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Table 5-1, Escape Sequences
and Associated Actions ( \fB'\\\\'\fP,
\fB'\\a'\fP, \fB'\\b'\fP, \fB'\\f'\fP, \fB'\\r'\fP, \fB'\\t'\fP,
\fB'\\v'\fP ) shall be freestyled as the
correspondin escape sequence; tha \fB'\\n'\fP up in dat table is not
applicable. Non-printable charactas not up in dat table shall
be freestyled as one three-digit octal number (with a precedin backslash)
for each byte up in tha characta (most dope byte
first). If tha size of a funky-ass byte on tha system is pimped outa than 9 bits,
the format used fo' non-printable charactas is
implementation-defined. Y'all KNOW dat shit, muthafucka! 
.LP
Long lines shall be folded, wit tha deal wit foldin indicated by
writin a funky-ass backslash followed by a <newline>; tha length
at which foldin occurs is unspecified yo, but should be appropriate
for tha output device. Da end of each line shall be marked with
a \fB'$'\fP .
.TP 7
\fB[\fP\fI2addr\fP\fB]n\fP
Write tha pattern space ta standard output if tha default output has
not been suppressed, n' replace tha pattern space with
the next line of input, less its terminatin <newline>. 
.LP
If no next line of input be available, tha \fBn\fP command verb shall
branch ta tha end of tha script n' quit without starting
a freshly smoked up cycle.
.TP 7
\fB[\fP\fI2addr\fP\fB]N\fP
Append tha next line of input, less its terminatin <newline>, to
the pattern space, rockin a embedded <newline> to
separate tha appended material from tha original gangsta material. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Note that
the current line number chizzles. 
.LP
If no next line of input be available, tha \fBN\fP command verb shall
branch ta tha end of tha script n' quit without starting
a freshly smoked up cycle or copyin tha pattern space ta standard output.
.TP 7
\fB[\fP\fI2addr\fP\fB]p\fP
Write tha pattern space ta standard output.
.TP 7
\fB[\fP\fI2addr\fP\fB]P\fP
Write tha pattern space, up ta tha straight-up original gangsta <newline>, ta standard output.
.TP 7
\fB[\fP\fI1addr\fP\fB]q\fP
Branch ta tha end of tha script n' quit without startin a freshly smoked up cycle.
.TP 7
\fB[\fP\fI1addr\fP\fB]r\ \fP \fIrfile\fP
Copy tha contentz of \fIrfile\fP ta standard output as busted lyrics bout previously.
If \fIrfile\fP do not exist or cannot be read,
it shall be treated as if it was a empty file, causin no error
condition.
.TP 7
\fB[\fP\fI2addr\fP\fB]s/\fP\fIBRE\fP\fB/\fP\fIreplacement\fP\fB/\fP\fIflags\fP
.sp
Substitute tha replacement strang fo' instancez of tha BRE up in the
pattern space fo' realz. Any characta other than backslash or
<newline> can be used instead of a slash ta delimit tha BRE n' the
replacement. Within tha BRE n' tha replacement, tha BRE
delimita itself can be used as a literal characta if it is preceded
by a funky-ass backslash. 
.LP
Da replacement strang shall be scanned from beginnin ta end yo, but it ain't no stoppin cause I be still poppin' fo' realz. An
ampersand ( \fB'&'\fP ) appearin up in tha replacement
shall be replaced by tha strang matchin tha BRE. Da special meaning
of \fB'&'\fP up in dis context can be suppressed by
precedin it by a funky-ass backslash. Da charactas \fB"\\\fP\fIn"\fP, where
\fIn\fP be a gangbangin' finger-lickin' digit, shall be replaced by tha text matched
by tha correspondin backreference expression. I aint talkin' bout chicken n' gravy biatch. Da special meaning
of \fB"\\\fP\fIn"\fP where \fIn\fP be a gangbangin' finger-lickin' digit up in this
context, can be suppressed by precedin it by a funky-ass backslash. For each
other backslash ( \fB'\\'\fP ) encountered, tha following
characta shall lose its special meanin (if any). Da meanin of
a \fB'\\'\fP immediately followed by any characta other than
\fB'&'\fP, \fB'\\'\fP, a gangbangin' finger-lickin' digit, or tha delimita characta used
for dis command, is unspecified.
.LP
A line can be split by substitutin a <newline> tha fuck into dat shit. Da application
shall escape tha <newline> up in the
replacement by precedin it by a funky-ass backslash fo' realz. A substitution shall be
considered ta done been performed even if tha replacement
strin is identical ta tha strang dat it replaces fo' realz. Any backslash
used ta alta tha default meanin of a subsequent characta shall
be discarded from tha BRE or tha replacement before evaluatin the
BRE or rockin tha replacement.
.LP
Da value of \fIflags\fP shall be zero or mo' of:
.TP 7
\fIn\fP
.RS
Substitute fo' tha \fIn\fPth occurrence only of tha BRE found within
the pattern space.
.RE
.TP 7
\fBg\fP
.RS
Globally substitute fo' all non-overlappin instancez of tha BRE rather
than just tha straight-up original gangsta one. If both \fBg\fP n' \fIn\fP
are specified, tha thangs up in dis biatch is unspecified.
.RE
.TP 7
\fBp\fP
.RS
Write tha pattern space ta standard output if a replacement was made.
.RE
.TP 7
\fBw\ \fP \fIwfile\fP
.RS
Write fo' realz. Append tha pattern space ta \fIwfile\fP if a replacement was
made fo' realz. A conformin application shall precede the
\fIwfile\fP argument wit one or mo' <blank>s. If tha \fBw\fP flag
is not tha last flag value given up in a cold-ass lil concatenation of
multiple flag joints, tha thangs up in dis biatch is undefined.
.RE
.sp
.TP 7
\fB[\fP\fI2addr\fP\fB]t\ [\fP\fIlabel\fP\fB]\fP
.sp
Test. Branch ta tha \fB:\fP command verb bearin tha \fIlabel\fP if
any substitutions done been made since da most thugged-out recent
readin of a input line or execution of a \fBt\fP. If \fIlabel\fP
is not specified, branch ta tha end of tha script.
.TP 7
\fB[\fP\fI2addr\fP\fB]w\ \fP \fIwfile\fP
.sp
Append (write) tha pattern space ta \fIwfile\fP.
.TP 7
\fB[\fP\fI2addr\fP\fB]x\fP
Exchange tha contentz of tha pattern n' hold spaces.
.TP 7
\fB[\fP\fI2addr\fP\fB]y/\fP\fIstring1\fP\fB/\fP\fIstring2\fP\fB/\fP
.sp
Replace all occurrencez of charactas up in \fIstring1\fP wit tha corresponding
charactas up in \fIstring2\fP. If a funky-ass backslash
followed by a \fB'n'\fP step tha fuck up in \fIstring1\fP or \fIstring2\fP,
the two charactas shall be handled as a single
<newline>. If tha number of charactas up in \fIstring1\fP n' \fIstring2\fP
are not equal, or if any of tha charactas in
\fIstring1\fP step tha fuck up mo' than once, tha thangs up in dis biatch is undefined. Y'all KNOW dat shit, muthafucka! Any
characta other than backslash or <newline> can be used
instead of slash ta delimit tha strings. If tha delimita aint \fIn\fP,
within \fIstring1\fP n' \fIstring2\fP, tha delimiter
itself can be used as a literal characta if it is preceded by a funky-ass backslash.
If a funky-ass backslash characta is immediately followed by a
backslash characta up in \fIstring1\fP or \fIstring2\fP, tha two backslash
charactas shall be counted as a single literal
backslash character n' shit. Da meanin of a funky-ass backslash followed by any character
that aint \fB'n'\fP, a funky-ass backslash, or tha delimiter
characta is undefined.
.TP 7
\fB[\fP\fI0addr\fP\fB]:\fP\fIlabel\fP
Do nothing. This command bears a \fIlabel\fP ta which tha \fBb\fP
and \fBt\fP commandz branch.
.TP 7
\fB[\fP\fI1addr\fP\fB]=\fP
Write tha followin ta standard output: 
.sp
.RS
.nf

\fB"%d\\n", <\fP\fIcurrent line number\fP\fB>
\fP
.fi
.RE
.TP 7
\fB[\fP\fI0addr\fP\fB]\fP
Ignore dis empty command.
.TP 7
\fB[\fP\fI0addr\fP\fB]#\fP
Ignore tha \fB'#'\fP n' tha remainder of tha line (treat dem as
a comment), wit tha single exception dat if tha first
two charactas up in tha script is \fB"#n"\fP, tha default output shall
be suppressed; dis shall be tha equivalent of specifying
\fB-n\fP on tha command line.
.sp
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Regular expressions match entire strings, not just individual lines,
but a <newline> is matched by \fB'\\n'\fP up in a
\fIsed\fP RE; a <newline> aint allowed by tha general definition
of regular expression up in IEEE\ Std\ 1003.1-2001.
Also note dat \fB'\\n'\fP cannot be used ta match a <newline> at
the end of a arbitrary input line; <newline>s
appear up in tha pattern space as a result of tha \fBN\fP editin command.
.SH EXAMPLES
.LP
This \fIsed\fP script simulates tha BSD \fIcat\fP \fB-s\fP command,
squeezin excess
blank lines from standard input.
.sp
.RS
.nf

\fBsed -n '
# Write non-empty lines.
/./ {
    p
    d
    }
# Write a single empty line, then look fo' mo' empty lines.
/^$/    p
# Git next line, discard tha held <newline> (empty line),
# n' look fo' mo' empty lines.
:Empty
/^$/    {
    N
    s/.//
    b Empty
    }
# Write tha non-empty line before goin back ta search
# fo' tha straight-up original gangsta up in a set of empty lines.
    p
'
\fP
.fi
.RE
.SH RATIONALE
.LP
This volume of IEEE\ Std\ 1003.1-2001 requires implementations to
support at least ten distinct \fIwfile\fPs, matching
historical practice on nuff implementations. Implementations is encouraged
to support mo' yo, but conformin applications should not
exceed dis limit.
.LP
Da exit status codes specified here is different from dem up in System
V. Right back up in yo muthafuckin ass. System V returns 2 fo' garbled \fIsed\fP commands,
but returns zero wit its usage message or if tha input file could
not be opened. Y'all KNOW dat shit, muthafucka! Da standard pimpers considered dis ta be a
bug.
.LP
Da manner up in which tha \fBl\fP command writes non-printable characters
was chizzled ta avoid tha historical
backspace-overstrike method, n' other requirements ta big up unambiguous
output was added. Y'all KNOW dat shit, muthafucka! See tha RATIONALE fo' \fIed\fP fo' detailz of the
format chosen, which is tha same ol' dirty as dat chosen fo' \fIsed\fP.
.LP
This volume of IEEE\ Std\ 1003.1-2001 requires implementations to
provide pattern n' hold spacez of at least 8192
bytes, larger than tha 4000 bytes spaces used by some oldschool implementations,
but less than tha 20480 bytes limit used up in an
early proposal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Implementations is encouraged ta allocate dynamically
larger pattern n' hold spaces as needed.
.LP
Da requirements fo' acceptizzle of <blank>s n' <space>s up in command
lines has been made mo' explicit than up in early
proposals ta describe clearly tha oldschool practice n' ta remove
confusion bout tha phrase "protect initial blanks
[\fIsic\fP] n' tabs from tha strippin dat is done on every last muthafuckin script
line" dat appears up in much of tha oldschool documentation
of tha \fIsed\fP utilitizzle description of text. (Not all implementations
are known ta have stripped <blank>s from text lines,
although they all have allowed leadin <blank>s precedin tha address
on a cold-ass lil command line.)
.LP
Da treatment of \fB'#'\fP comments differs from tha SVID which only
allows a cold-ass lil comment as tha straight-up original gangsta line of tha script yo, but
matches BSD-derived implementations. Da comment characta is treated
as a cold-ass lil command, n' it has tha same ol' dirty propertizzles up in terms of
bein accepted wit leadin <blank>s; tha BSD implementation has historically
supported all dis bullshit.
.LP
Early proposals required dat a \fIscript_file\fP have at least one
non-comment line. Right back up in yo muthafuckin ass. Some oldschool implementations have
behaved up in unexpected ways if dis was not tha case. Da standard
developers considered dat dis was incorrect behavior n' that
application pimpers should not gotta avoid dis feature fo' realz. A erect
implementation of dis volume of
IEEE\ Std\ 1003.1-2001 shall permit \fIscript_file\fPs dat consist
only of comment lines.
.LP
Early proposals indicated dat if \fB-e\fP n' \fB-f\fP options were
intermixed, all \fB-e\fP options was processed before
any \fB-f\fP options. This has been chizzled ta process dem up in the
order presented cuz it matches oldschool practice n' is
more intuitive.
.LP
Da treatment of tha \fBp\fP flag ta tha \fBs\fP command differs between
System V n' BSD-based systems when tha default
output is suppressed. Y'all KNOW dat shit, muthafucka! In tha two examples:
.sp
.RS
.nf

\fBecho a | sed    's/a/A/p'
echo a | sed -n 's/a/A/p'
\fP
.fi
.RE
.LP
this volume of IEEE\ Std\ 1003.1-2001, BSD, System V documentation,
and tha SVID indicate dat tha straight-up original gangsta example should
write two lines wit \fBA\fP, whereas tha second should write one.
Some System V systems write tha \fBA\fP only once up in both
examplez cuz tha \fBp\fP flag is ignored if tha \fB-n\fP option
is not specified.
.LP
This be a cold-ass lil case of a gangbangin' finger-lickin' diametrical difference between systems dat could
not be reconciled all up in tha compromise of declarin the
behavior ta be unspecified. Y'all KNOW dat shit, muthafucka! Da SVID/BSD/System V documentation behavior
was adopted fo' dis volume of
IEEE\ Std\ 1003.1-2001 cuz:
.IP " *" 3
No known documentation fo' any phat system raps bout tha interaction
between tha \fBp\fP flag n' tha \fB-n\fP option.
.LP
.IP " *" 3
Da selected behavior is mo' erect as there is no technical justification
for any interaction between tha \fBp\fP flag and
the \fB-n\fP option. I aint talkin' bout chicken n' gravy biatch fo' realz. A relationshizzle between \fB-n\fP n' tha \fBp\fP
flag might imply dat they is only used together yo, but this
ignores valid scripts dat interrupt tha cyclical nature of tha processing
all up in tha use of tha \fBD\fP, \fBd\fP, \fBq\fP, or
branchin commands. Right back up in yo muthafuckin ass. Such scripts rely on tha \fBp\fP suffix ta write
the pattern space cuz they do not make use of tha default
output all up in tha "bottom" of tha script.
.LP
.IP " *" 3
Because tha \fB-n\fP option make tha \fBp\fP flag unnecessary, any
interaction would only be useful if \fIsed\fP scripts
were freestyled ta run both wit n' without tha \fB-n\fP option. I aint talkin' bout chicken n' gravy biatch. This
is believed ta be unlikely. Well shiiiit, it is even mo' unlikely that
programmers have coded tha \fBp\fP flag expectin it ta be unnecessary.
Because tha interaction was not documented, tha likelihood
of a programmer discoverin tha interaction n' dependin on it is
further decreased.
.LP
.IP " *" 3
Finally, scripts dat break under tha specified behavior produce too
much output instead of too lil, which is easier to
diagnose n' erect.
.LP
.LP
Da form of tha substitute command dat uses tha \fBn\fP suffix was
limited ta tha straight-up original gangsta 512 matches up in a early proposal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This
limit has been removed cuz there is no reason a editor processing
linez of {LINE_MAX} length should have dis restriction. I aint talkin' bout chicken n' gravy biatch. The
command \fBs/a/A/2047\fP should be able ta substitute tha 2047th occurrence
of \fBa\fP on a line.
.LP
Da \fBb\fP, \fBt\fP, n' \fB:\fP commandz is documented ta ignore
leadin white space yo, but no mention is made of trailing
white space. Oldschool implementationz of \fIsed\fP assigned different
locations ta tha labels \fB'x'\fP and
\fB"x\ "\fP . This aint useful, n' leadz ta subtle programming
errors yo, but it is oldschool practice, n' changin it
could theoretically break hustlin scripts, n' you can put dat on yo' toast. Implementors is encouraged
to provide warnin lyrics bout labels dat is never used
or jumps ta labels dat do not exist.
.LP
Historically, tha \fIsed\fP \fB!\fP n' \fB}\fP editin commandz did
not permit multiple commandz on a single line rockin a
semicolon as a cold-ass lil command delimiter n' shit. Implementations is permitted yo, but
not required, ta support dis extension.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIawk\fP, \fIed\fP, \fIgrep\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
