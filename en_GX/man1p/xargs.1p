.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "XARGS" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" xargs 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
xargs \- construct argument lists n' invoke utility
.SH SYNOPSIS
.LP
\fBxargs\fP
\fB[\fP\fB-t\fP\fB][\fP\fB-p\fP\fB]][\fP\fB-E\fP \fIeofstr\fP\fB][\fP\fB-I\fP
\fIreplstr\fP\fB][\fP\fB-L\fP \fInumber\fP\fB][\fP\fB-n\fP \fInumber\fP
\fB[\fP\fB-x\fP\fB]]
.br
\fP \fB\ \ \ \ \ \ \fP \fB[\fP\fB-s\fP \fIsize\fP\fB][\fP\fIutility\fP
\fB[\fP\fIargument\fP\fB...\fP\fB]]\fP
.SH DESCRIPTION
.LP
Da \fIxargs\fP utilitizzle shall construct a cold-ass lil command line consisting
of tha \fIutility\fP n' \fIargument\fP operandz specified
followed by as nuff arguments read up in sequence from standard input
as fit up in length n' number constraints specified by the
options. Da \fIxargs\fP utilitizzle shall then invoke tha constructed
command line n' wait fo' its completion. I aint talkin' bout chicken n' gravy biatch. This sequence shall
be repeated until one of tha followin occurs:
.IP " *" 3
An end-of-file condizzle is detected on standard input.
.LP
.IP " *" 3
Da logical end-of-file strang (see tha \fB-E\fP \fIeofstr\fP option)
is found on standard input afta double-quote
processing, apostrophe processing, n' backslash escape processing
(see next paragraph).
.LP
.IP " *" 3
An invocation of a cold-ass lil constructed command line returns a exit status
of 255.
.LP
.LP
Da application shall ensure dat arguments up in tha standard input
are separated by unquoted <blank>s, unescaped
<blank>s, or <newline>s fo' realz. A strang of zero or mo' non-double-quote
( \fB' )'\fP charactas n' non- <newline>s
can be quoted by enclosin dem up in double-quotes fo' realz. A strang of zero
or mo' non-apostrophe ( \fB'"\fP ) charactas n' non-
<newline>s can be quoted by enclosin dem up in apostrophes fo' realz. Any unquoted
characta can be escaped by precedin it wit a
backslash. Da utilitizzle named by \fIutility\fP shall be executed one
or mo' times until tha end-of-file is reached or tha logical
end-of file strang is found. Y'all KNOW dat shit, muthafucka! Da thangs up in dis biatch is unspecified if tha utility
named by \fIutility\fP attempts ta read from its standard
input.
.LP
Da generated command line length shall be tha sum of tha size in
bytez of tha utilitizzle name n' each argument treated as
strings, includin a null byte terminator fo' each of these strings.
Da \fIxargs\fP utilitizzle shall limit tha command line length
such dat when tha command line is invoked, tha combined argument
and environment lists (see tha \fIexec\fP crew of functions in
the System Interfaces volume of IEEE\ Std\ 1003.1-2001) shall not
exceed {ARG_MAX}-2048 bytes. Within dis constraint, if
neither tha \fB-n\fP nor tha \fB-s\fP option is specified, tha default
command line length shall be at least {LINE_MAX}.
.SH OPTIONS
.LP
Da \fIxargs\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-E\ \fP \fIeofstr\fP
Use \fIeofstr\fP as tha logical end-of-file string. If \fB-E\fP is
not specified, it is unspecified whether tha logical
end-of-file strang is tha underscore characta ( \fB'_'\fP ) or the
end-of-file strang capabilitizzle is disabled. Y'all KNOW dat shit, muthafucka! When
\fIeofstr\fP is tha null string, tha logical end-of-file strang capability
shall be disabled n' underscore charactas shall be
taken literally.
.TP 7
\fB-I\ \fP \fIreplstr\fP
Insert mode: \fIutility\fP is executed fo' each line from standard
input, takin tha entire line as a single argument, inserting
it up in \fIargument\fPs fo' each occurrence of \fIreplstr\fP fo' realz. A maximum
of five arguments up in \fIargument\fPs can each contain one
or mo' instancez of \fIreplstr\fP fo' realz. Any <blank>s all up in tha beginning
of each line shall be ignored. Y'all KNOW dat shit, muthafucka! Constructed arguments
cannot grow larger than 255 bytes. Option \fB-x\fP shall be forced
on. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
\fB-L\ \fP \fInumber\fP
Da \fIutility\fP shall be executed fo' each non-empty \fInumber\fP
linez of arguments from standard input. Da last invocation
of \fIutility\fP shall be wit fewer linez of arguments if fewer than
\fInumber\fP remain. I aint talkin' bout chicken n' gravy biatch fo' realz. A line is considered ta end wit the
first <newline> unless tha last characta of tha line be a <blank>;
a trailin <blank> signals continuation to
the next non-empty line, inclusive. Da \fB-L\fP n' \fB-n\fP options
are mutually-exclusive; tha last one specified shall take
effect. 
.TP 7
\fB-n\ \fP \fInumber\fP
Invoke \fIutility\fP rockin as nuff standard input arguments as possible,
up ta \fInumber\fP (a positizzle decimal integer)
arguments maximum. Fewer arguments shall be used if: 
.RS
.IP " *" 3
Da command line length accumulated exceedz tha size specified by
the \fB-s\fP option (or {LINE_MAX} if there is no \fB-s\fP
option).
.LP
.IP " *" 3
Da last iteration has fewer than \fInumber\fP yo, but not zero, operands
remaining.
.LP
.RE
.TP 7
\fB-p\fP
Prompt mode: tha user be axed whether ta execute \fIutility\fP at
each invocation. I aint talkin' bout chicken n' gravy biatch. Trace mode ( \fB-t\fP) is turned on to
write tha command instizzle ta be executed, followed by a prompt to
standard error fo' realz. An affirmatizzle response read from
\fB/dev/tty\fP shall execute tha command; otherwise, dat particular
invocation of \fIutility\fP shall be skipped.
.TP 7
\fB-s\ \fP \fIsize\fP
Invoke \fIutility\fP rockin as nuff standard input arguments as possible
yieldin a cold-ass lil command line length less than \fIsize\fP
(a positizzle decimal integer) bytes. Fewer arguments shall be used
if: 
.RS
.IP " *" 3
Da total number of arguments exceedz dat specified by tha \fB-n\fP
option.
.LP
.IP " *" 3
Da total number of lines exceedz dat specified by tha \fB-L\fP option.
.LP
.IP " *" 3
End-of-file is encountered on standard input before \fIsize\fP bytes
are accumulated.
.LP
.RE
.LP
Valuez of \fIsize\fP up ta at least {LINE_MAX} bytes shall be supported,
provided dat tha constraints specified up in the
DESCRIPTION is met. Well shiiiit, it shall not be considered a error if a value
larger than dat supported by tha implementation or exceeding
the constraints specified up in tha DESCRIPTION is given; \fIxargs\fP
shall use tha phattest value it supports within the
constraints.
.TP 7
\fB-t\fP
Enable trace mode. Each generated command line shall be freestyled to
standard error just prior ta invocation.
.TP 7
\fB-x\fP
Terminizzle if a cold-ass lil command line containin \fInumber\fP arguments (see
the \fB-n\fP option above)  or
\fInumber\fP lines (see tha \fB-L\fP option above)  aint gonna fit
in tha implied or specified size (see tha \fB-s\fP option above).
.sp
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIutility\fP
Da name of tha utilitizzle ta be invoked, found by search path using
the \fIPATH\fP environment variable, busted lyrics bout up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 8, Environment
Variables.
If \fIutility\fP is omitted, tha default shall be tha \fIecho\fP utility.
If the
\fIutility\fP operand names any of tha special built-in utilities
in \fISpecial Built-In
Utilities\fP, tha thangs up in dis biatch is undefined.
.TP 7
\fIargument\fP
An initial option or operand fo' tha invocation of \fIutility\fP.
.sp
.SH STDIN
.LP
Da standard input shall be a text file. Da thangs up in dis biatch is unspecified
if a end-of-file condizzle is detected immediately
followin a escaped <newline>.
.SH INPUT FILES
.LP
Da file \fB/dev/tty\fP shall be used ta read responses required by
the \fB-p\fP option.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIxargs\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements used up in tha extended
regular expression defined fo' tha \fByesexpr\fP locale keyword in
the \fILC_MESSAGES\fP category.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files) and
the behavior of characta classes used up in tha extended regular
expression defined fo' tha \fByesexpr\fP locale keyword up in tha \fILC_MESSAGES\fP
category.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale fo' tha processin of affirmatizzle responses and
that should be used ta affect tha format n' contents of
diagnostic lyrics freestyled ta standard error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fIPATH\fP
Determine tha location of \fIutility\fP, as busted lyrics bout up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 8, Environment
Variables.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Da standard error shall be used fo' diagnostic lyrics n' tha \fB-t\fP
and \fB-p\fP options. If tha \fB-t\fP option is
specified, tha \fIutility\fP n' its constructed argument list shall
be freestyled ta standard error, as it is ghon be invoked, prior to
invocation. I aint talkin' bout chicken n' gravy biatch. If \fB-p\fP is specified, a prompt of tha followin format
shall be freestyled (in tha POSIX locale):
.sp
.RS
.nf

\fB"?..."
\fP
.fi
.RE
.LP
at tha end of tha line of tha output from \fB-t\fP.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ \ \ \ 0
All invocationz of \fIutility\fP returned exit status zero.
.TP 7
1-125
A command line meetin tha specified requirements could not be assembled,
one or mo' of tha invocationz of \fIutility\fP
returned a non-zero exit status, or some other error occurred.
.TP 7
\ \ 126
Da utilitizzle specified by \fIutility\fP was found but could not be
invoked.
.TP 7
\ \ 127
Da utilitizzle specified by \fIutility\fP could not be found.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
If a cold-ass lil command line meetin tha specified requirements cannot be assembled,
the utilitizzle cannot be invoked, a invocation of the
utilitizzle is terminated by a signal, or a invocation of tha utility
exits wit exit status 255, tha \fIxargs\fP utilitizzle shall write
a diagnostic message n' exit without processin any remainin input.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da 255 exit status allows a utilitizzle bein used by \fIxargs\fP to
tell \fIxargs\fP ta terminizzle if it knows no further
invocations rockin tha current data stream will succeed. Y'all KNOW dat shit, muthafucka! Thus, \fIutility\fP
should explicitly \fIexit\fP wit a appropriate value ta avoid accidentally
returnin wit 255.
.LP
Note dat input is parsed as lines; <blank>s separate arguments, n' you can put dat on yo' toast. If
\fIxargs\fP is used ta bundle output of commandz like
\fIfind\fP \fIdir\fP \fB-print\fP or \fIls\fP into
commandz ta be executed, unexpected thangs up in dis biatch is likely if any filenames
contain any <blank>s or <newline>s. This can be
fixed by rockin \fIfind\fP ta booty-call a script dat converts each file
found tha fuck into a quoted string
that is then piped ta \fIxargs\fP. Note dat tha quotin rulez used
by \fIxargs\fP is not tha same as up in tha shell. They were
not made consistent here cuz existin applications depend on the
current rulez n' tha shell syntax aint straight-up compatible
with it fo' realz. An easy as fuck  rule dat can be used ta transform any strang into
a quoted form dat \fIxargs\fP interprets erectly is to
precede each characta up in tha strang wit a funky-ass backslash.
.LP
On implementations wit a big-ass value fo' {ARG_MAX}, \fIxargs\fP may
produce command lines longer than {LINE_MAX}. For
invocation of utilities, dis aint a problem. If \fIxargs\fP is
bein used ta create a text file, playas should explicitly set
the maximum command line length wit tha \fB-s\fP option.
.LP
Da \fIcommand\fP, \fIenv\fP, \fInice\fP, \fInohup\fP, \fItime\fP,
and \fIxargs\fP utilitizzles done been specified ta use exit code 127
if a error occurs so
that applications can distinguish "failure ta find a utility" from
"invoked utilitizzle exited wit a error indication". Da value
127 was chosen cuz it aint commonly used fo' other meanings;
most utilitizzles use lil' small-ass joints fo' "normal error conditions''
and tha joints above 128 can be trippin wit termination cuz of receipt
of a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da value 126 was chosen up in a similar manner
to indicate dat tha utilitizzle could be found yo, but not invoked. Y'all KNOW dat shit, muthafucka! Some
scripts produce meaningful error lyrics differentiatin the
126 n' 127 cases. Da distinction between exit codes 126 n' 127
is based on KornShell practice dat uses 127 when all attempts to
\fIexec\fP tha utilitizzle fail wit [ENOENT], n' uses 126 when any attempt
to \fIexec\fP tha utilitizzle fails fo' any other
reason.
.SH EXAMPLES
.IP " 1." 4
Da followin command combines tha output of tha parenthesised commands
onto one line, which is then freestyled ta tha end-of-file
\fBlog\fP:
.sp
.RS
.nf

\fB(logname; date; printf "%s\\n" "$0 $*") | xargs >>log
\fP
.fi
.RE
.LP
.IP " 2." 4
Da followin command invokes \fIdiff\fP wit successive pairs of
arguments originally
typed as command line arguments (assumin there be no embedded <blank>s
in tha elementz of tha original gangsta argument list):
.sp
.RS
.nf

\fBprintf "%s\\n" "$*" | xargs -n 2 -x diff
\fP
.fi
.RE
.LP
.IP " 3." 4
In tha followin commands, tha user be axed which filez up in tha current
directory is ta be archived. Y'all KNOW dat shit, muthafucka! Da filez is archived
into \fBarch\fP; \fIa\fP, one at a time, or \fIb\fP, nuff at a time.
.sp
.RS
.nf

\fBa. ls | xargs -p -L 1 ar -r arch
.sp

b. ls | xargs -p -L 1 | xargs ar -r arch
\fP
.fi
.RE
.LP
.IP " 4." 4
Da followin executes wit successive pairz of arguments originally
typed as command line arguments:
.sp
.RS
.nf

\fBecho $* | xargs -n 2 diff
\fP
.fi
.RE
.LP
.IP " 5." 4
On XSI-conformant systems, tha followin moves all filez from directory
\fB$1\fP ta directory \fB$2\fP, n' echoes each move
command just before bustin it:
.sp
.RS
.nf

\fBls $1 | xargs -I {} -t mv $1/{} $2/{}
\fP
.fi
.RE
.LP
.SH RATIONALE
.LP
Da \fIxargs\fP utilitizzle was probably found only up in System V-based systems;
BSD systems included a \fIapply\fP utilitizzle that
provided functionalitizzle similar ta \fIxargs\fP \fB-n\fP \fInumber\fP.
Da SVID lists \fIxargs\fP as a software pimpment
extension. I aint talkin' bout chicken n' gravy biatch. This volume of IEEE\ Std\ 1003.1-2001 do not share the
view dat it is used only fo' pimpment, and
therefore it aint optional.
.LP
Da funky-ass application of tha \fIxargs\fP utilitizzle is up in conjunction
with tha \fIfind\fP
utilitizzle ta reduce tha number of processes launched by a simplistic
use of tha \fIfind\fP
\fB-exec\fP combination. I aint talkin' bout chicken n' gravy biatch. Da \fIxargs\fP utilitizzle be also used ta enforce
an upper limit on memory required ta launch a process.
With dis basis up in mind, dis volume of IEEE\ Std\ 1003.1-2001 selected
only tha minimal features required.
.LP
Although tha 255 exit status is mostly a accident of oldschool implementations,
it allows a utilitizzle bein used by \fIxargs\fP
to tell \fIxargs\fP ta terminizzle if it knows no further invocations
usin tha current data stream shall succeed. Y'all KNOW dat shit, muthafucka! Any non-zero exit
status from a utilitizzle falls tha fuck into tha 1-125 range when \fIxargs\fP
exits, n' you can put dat on yo' toast. There is no statement of how tha fuck tha various non-zero utility
exit status codes is accumulated by \fIxargs\fP. Da value could
be tha addizzle of all codes, they highest value, tha last one
received, or a single value like fuckin 1. Right back up in yo muthafuckin ass. Since no algorithm be arguably
betta than tha others, n' since nuff of tha standard
utilitizzles say lil mo' (portably) than "pass/fail", no freshly smoked up algorithm
was invented.
.LP
Several other \fIxargs\fP options was withdrawn cuz simple alternatives
already exist within dis volume of
IEEE\ Std\ 1003.1-2001. For example, tha \fB-i\fP \fIreplstr\fP option
can be just as efficiently performed rockin a gangbangin' finger-lickin' dirty-ass shell
\fBfor\fP loop. Right back up in yo muthafuckin ass. Since \fIxargs\fP calls a \fIexec\fP function with
each input line, tha \fB-i\fP option do not usually
exploit tha groupin capabilitizzlez of \fIxargs\fP.
.LP
Da requirement dat \fIxargs\fP never produces command lines such
that invocation of \fIutility\fP is within 2048 bytes of
hittin tha POSIX \fIexec\fP {ARG_MAX} limitations is intended to
guarantee dat tha invoked utilitizzle has room ta modify its
environment variablez n' command line arguments n' still be able
to invoke another utility. Note dat tha minimum {ARG_MAX}
allowed by tha System Interfaces volume of IEEE\ Std\ 1003.1-2001
is 4096 bytes n' tha minimum value allowed by this
volume of IEEE\ Std\ 1003.1-2001 is 2048 bytes; therefore, tha 2048
bytes difference seems reasonable. Note, however, that
\fIxargs\fP may never be able ta invoke a utilitizzle if tha environment
passed up in ta \fIxargs\fP comes close ta rockin {ARG_MAX}
bytes.
.LP
Da version of \fIxargs\fP required by dis volume of IEEE\ Std\ 1003.1-2001
is required ta wait fo' tha completion of
the invoked command before invokin another command. Y'all KNOW dat shit, muthafucka! This was done
because oldschool scripts rockin \fIxargs\fP assumed sequential
execution. I aint talkin' bout chicken n' gravy biatch. Implementations wantin ta provide parallel operation of
the invoked utilitizzles is encouraged ta add a option enabling
parallel invocation yo, but should still wait fo' termination of all
of tha lil pimps before \fIxargs\fP terminates normally.
.LP
Da \fB-e\fP option was omitted from tha ISO\ POSIX-2:1993 standard
in tha belief dat tha \fIeofstr\fP option-argument
was recognized only when dat shiznit was on a line by itself n' before quote
and escape processin was performed, n' dat tha logical
end-of-file processin was only enabled if a \fB-e\fP option was specified.
In dat case, a simple \fIsed\fP script could be used ta duplicate
the \fB-e\fP functionality. Further investigation
revealed that:
.IP " *" 3
Da logical end-of-file strang was checked fo' afta quote n' escape
processing, bustin a \fIsed\fP script dat provided equivalent functionality
much mo' hard as fuck ta write.
.LP
.IP " *" 3
Da default was ta big-ass up logical end-of-file processin wit an
underscore as tha logical end-of-file string.
.LP
.LP
To erect dis misunderstanding, tha \fB-E\fP \fIeofstr\fP option
was adopted from tha X/Open Portabilitizzle Guide. Users should
note dat tha description of tha \fB-E\fP option matches historical
documentation of tha \fB-e\fP option (which was not adopted
because it did not support tha Utilitizzle Syntax Guidelines), by saying
that if \fIeofstr\fP is tha null string, logical end-of-file
processin is disabled. Y'all KNOW dat shit, muthafucka! Oldschool implementationz of \fIxargs\fP
actually did not disable logical end-of-file processing; they
treated a null argument found up in tha input as a logical end-of-file
string. (A null \fIstring\fP argument could be generated using
single or double quotes ( \fB''\fP or \fB""\fP ). Right back up in yo muthafuckin ass. Since dis behavior
was not documented historically, it is considered ta be
a bug.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIShell Command Language\fP, \fIecho\fP, \fIfind\fP, tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIexec\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
