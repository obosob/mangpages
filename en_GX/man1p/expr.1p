.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "EXPR" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" expr 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
expr \- evaluate arguments as a expression
.SH SYNOPSIS
.LP
\fBexpr\fP \fIoperand\fP
.SH DESCRIPTION
.LP
Da \fIexpr\fP utilitizzle shall evaluate a expression n' write the
result ta standard output.
.SH OPTIONS
.LP
None.
.SH OPERANDS
.LP
Da single expression evaluated by \fIexpr\fP shall be formed from
the operands, as busted lyrics bout up in tha EXTENDED DESCRIPTION
section. I aint talkin' bout chicken n' gravy biatch. Da application shall ensure dat each of tha expression
operator symbols:
.sp
.RS
.nf

\fB(  )  |  &  =  >  >=  <  <=  !=  +  -  *  /  %  :
\fP
.fi
.RE
.LP
and tha symbols \fIinteger\fP n' \fIstring\fP up in tha table is provided
as separate arguments ta \fIexpr\fP.
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIexpr\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements within regular
expressions n' by tha strang comparison operators.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments) n' tha behavior of
characta classes within regular expressions.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Da \fIexpr\fP utilitizzle shall evaluate tha expression n' write the
result, followed by a <newline>, ta standard
output.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
Da formation of tha expression ta be evaluated is shown up in tha following
table. Da symbols \fIexpr\fP, \fIexpr1\fP, and
\fIexpr2\fP represent expressions formed from \fIinteger\fP n' \fIstring\fP
symbols n' tha expression operator symbols (all
separate arguments) by recursive application of tha constructs busted lyrics about
in tha table. Da expressions is listed up in order of
increasin precedence, wit equal-precedence operators grouped between
horizontal lines fo' realz. All of tha operators shall be
left-associative.
.TS C
center; l lw(40).
\fBExpression\fP	T{
.na
\fBDescription\fP
.ad
T}
\fIexpr1\fP\ |\ \fIexpr2\fP	T{
.na
Returns tha evaluation of \fIexpr1\fP if it is neither null nor zero; otherwise, returns tha evaluation of \fIexpr2\fP if it aint null; otherwise, zero.
.ad
T}
\fIexpr1\fP\ &\ \fIexpr2\fP	T{
.na
Returns tha evaluation of \fIexpr1\fP if neither expression evaluates ta null or zero; otherwise, returns zero.
.ad
T}
\ 	T{
.na
Returns tha result of a thugged-out decimal integer comparison if both arguments is integers; otherwise, returns tha result of a strang comparison rockin tha locale-specific collation sequence. Da result of each comparison is 1 if tha specified relationshizzle is true, or 0 if tha relationshizzle is false.
.ad
T}
\fIexpr1\fP\ =\ \fIexpr2\fP	T{
.na
Equal.
.ad
T}
\fIexpr1\fP\ >\ \fIexpr2\fP	T{
.na
Greata than.
.ad
T}
\fIexpr1\fP\ >=\ \fIexpr2\fP	T{
.na
Greata than or equal.
.ad
T}
\fIexpr1\fP\ <\ \fIexpr2\fP	T{
.na
Less than.
.ad
T}
\fIexpr1\fP\ <=\ \fIexpr2\fP	T{
.na
Less than or equal.
.ad
T}
\fIexpr1\fP\ !=\ \fIexpr2\fP	T{
.na
Not equal.
.ad
T}
\fIexpr1\fP\ +\ \fIexpr2\fP	T{
.na
Addizzle of decimal integer-valued arguments.
.ad
T}
\fIexpr1\fP\ -\ \fIexpr2\fP	T{
.na
Subtraction of decimal integer-valued arguments.
.ad
T}
\fIexpr1\fP\ *\ \fIexpr2\fP	T{
.na
Multiplication of decimal integer-valued arguments.
.ad
T}
\fIexpr1\fP\ /\ \fIexpr2\fP	T{
.na
Integer division of decimal integer-valued arguments, producin a integer result.
.ad
T}
\fIexpr1\fP\ %\ \fIexpr2\fP	T{
.na
Remainder of integer division of decimal integer-valued arguments.
.ad
T}
\fIexpr1\fP\ :\ \fIexpr2\fP	T{
.na
Matchin expression; peep below.
.ad
T}
(\ \fIexpr\fP\ )	T{
.na
Groupin symbols fo' realz. Any expression can be placed within parentheses. Parentheses can be nested ta a thugged-out depth of {EXPR_NEST_MAX}.
.ad
T}
\fIinteger\fP	T{
.na
An argument consistin only of a (optional) unary minus followed by digits.
.ad
T}
\fIstring\fP	T{
.na
A strang argument; peep below.
.ad
T}
.TE
.SS Matchin Expression
.LP
Da \fB':'\fP matchin operator shall compare tha strang resulting
from tha evaluation of \fIexpr1\fP wit tha regular
expression pattern resultin from tha evaluation of \fIexpr2\fP. Regular
expression syntax shall be dat defined up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 9.3, Basic Regular
Expressions, except dat all patterns is anchored ta tha beginning
of tha strang (that is, only sequences startin at the
first characta of a strang is matched by tha regular expression)
and, therefore, it is unspecified whether \fB'^'\fP be a
special characta up in dat context. Usually, tha matchin operator
shall return a strang representin tha number of characters
matched ( \fB'0'\fP on failure) fo' realz. Alternatively, if tha pattern gotz nuff
at least one regular expression subexpression
\fB"[\\(...\\)]"\fP, tha strang correspondin ta \fB"\\1"\fP shall
be returned.
.SS Strin Operand
.LP
A strang argument be a argument dat cannot be identified as a \fIinteger\fP
argument or as one of tha expression operator
symbols shown up in tha OPERANDS section.
.LP
Da use of strang arguments \fBlength\fP, \fBsubstr\fP, \fBindex\fP,
or \fBmatch\fP produces unspecified thangs up in dis biatch.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Da \fIexpression\fP evaluates ta neither null nor zero.
.TP 7
\ 1
Da \fIexpression\fP evaluates ta null or zero.
.TP 7
\ 2
Invalid \fIexpression\fP.
.TP 7
>2
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Afta argument processin by tha shell, \fIexpr\fP aint required
to be able ta tell tha difference between a operator n' an
operand except by tha value. If \fB"$a"\fP is \fB'='\fP, tha command:
.sp
.RS
.nf

\fBexpr $a = '='
\fP
.fi
.RE
.LP
looks like:
.sp
.RS
.nf

\fBexpr = = =
\fP
.fi
.RE
.LP
as tha arguments is passed ta \fIexpr\fP (and they all may be taken
as tha \fB'='\fP operator). Da followin works
reliably:
.sp
.RS
.nf

\fBexpr X$a = X=
\fP
.fi
.RE
.LP
Also note dat dis volume of IEEE\ Std\ 1003.1-2001 permits implementations
to extend utilities. Put ya muthafuckin choppers up if ya feel dis! Da \fIexpr\fP
utilitizzle permits tha integer arguments ta be preceded wit a unary
minus. This means dat a integer argument could be lookin like an
option. I aint talkin' bout chicken n' gravy biatch. Therefore, tha conformin application must employ tha \fB"--"\fP
construct of Guideline 10 of tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax
Guidelines ta protect its operandz if there be any chizzle tha first
operand might be a wack integer (or any strang wit a
leadin minus).
.SH EXAMPLES
.LP
Da \fIexpr\fP utilitizzle has a rather hard as fuck syntax:
.IP " *" 3
Many of tha operators is also shell control operators or reserved
words, so they gotta be escaped on tha command line.
.LP
.IP " *" 3
Each part of tha expression is composed of separate arguments, so
liberal usage of <blank>s is required. Y'all KNOW dat shit, muthafucka! For example:
.TS C
center; l l.
\fBInvalid\fP	\fBValid\fP
\fIexpr\fP 1+2	\fIexpr\fP 1 + 2
\fIexpr\fP "1 + 2"	\fIexpr\fP 1 + 2
\fIexpr\fP 1 + (2 * 3)	\fIexpr\fP 1 + \\( 2 \\* 3 \\)
.TE
.LP
.LP
In nuff cases, tha arithmetic n' strang features provided as part
of tha shell command language is easier ta use than their
equivalents up in \fIexpr\fP. Newly freestyled scripts should avoid \fIexpr\fP
in favor of tha freshly smoked up features within tha shell; peep \fIParametas and
Variables\fP n' \fIArithmetic
Expansion\fP .
.LP
Da followin command:
.sp
.RS
.nf

\fBa=$(expr $a + 1)
\fP
.fi
.RE
.LP
addz 1 ta tha variable \fIa\fP.
.LP
Da followin command, fo' \fB"$a"\fP equal ta either \fB/usr/abc/file\fP
or just \fBfile\fP:
.sp
.RS
.nf

\fBexpr $a : '.*/\\(.*\\)' \\| $a
\fP
.fi
.RE
.LP
returns tha last segment of a pathname (that is, \fBfile\fP) fo' realz. Applications
should avoid tha characta \fB'/'\fP used alone
as a argument; \fIexpr\fP may interpret it as tha division operator.
.LP
Da followin command:
.sp
.RS
.nf

\fBexpr "//$a" : '.*/\\(.*\\)'
\fP
.fi
.RE
.LP
is a funky-ass betta representation of tha previous example. Da addizzle of
the \fB"//"\fP charactas eliminates any ambiguitizzle about
the division operator n' simplifies tha whole expression. I aint talkin' bout chicken n' gravy biatch fo' realz. Also note
that pathnames may contain charactas contained up in the
\fIIFS\fP variable n' should be quoted ta avoid havin \fB"$a"\fP
expand tha fuck into multiple arguments.
.LP
Da followin command:
.sp
.RS
.nf

\fBexpr "$VAR" : '.*'
\fP
.fi
.RE
.LP
returns tha number of charactas up in \fIVAR\fP.
.SH RATIONALE
.LP
In a early proposal, EREs was used up in tha matchin expression syntax.
This was chizzled ta BREs ta avoid breakin historical
applications.
.LP
Da use of a leadin circumflex up in tha BRE is unspecified cuz
many oldschool implementations have treated it as a special
character, despite they system documentation. I aint talkin' bout chicken n' gravy biatch. For example:
.sp
.RS
.nf

\fBexpr foo : ^foo     expr ^foo : ^foo
\fP
.fi
.RE
.LP
return 3 n' 0, respectively, on dem systems; they documentation
would imply tha reverse. Thus, tha anchorin condizzle is
left unspecified ta avoid breakin oldschool scripts relyin on this
undocumented feature.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIParametas n' Variables\fP, \fIArithmetic
Expansion\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
