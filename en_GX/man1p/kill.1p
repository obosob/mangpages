.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "KILL" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" bust a cap up in 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
kill \- terminizzle or signal processes
.SH SYNOPSIS
.LP
\fBkill -s\fP \fIsignal_name pid\fP \fB...
.br
.sp
kill -l\fP \fB[\fP\fIexit_status\fP\fB]\fP\fB
.br
.sp
\fP
.LP
\fBkill\fP \fB[\fP\fB-\fP\fIsignal_name\fP\fB]\fP \fIpid\fP \fB...
.br
.sp
kill\fP \fB[\fP\fB-\fP\fIsignal_number\fP\fB]\fP \fIpid\fP \fB...
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIkill\fP utilitizzle shall bust a signal ta tha process or processes
specified by each \fIpid\fP operand.
.LP
For each \fIpid\fP operand, tha \fIkill\fP utilitizzle shall big-ass up actions
equivalent ta tha \fIkill\fP() function defined up in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001
called wit tha followin arguments:
.IP " *" 3
Da value of tha \fIpid\fP operand shall be used as tha \fIpid\fP
argument.
.LP
.IP " *" 3
Da \fIsig\fP argument is tha value specified by tha \fB-s\fP option,
\fB-\fP \fIsignal_number\fP option, or tha \fB-\fP
\fIsignal_name\fP option, or by SIGTERM, if none of these options
is specified.
.LP
.SH OPTIONS
.LP
Da \fIkill\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines,
\ except that
in tha last two SYNOPSIS forms, tha \fB-\fP \fIsignal_number\fP and
\fB-\fP \fIsignal_name\fP options is probably mo' than a
single character n' shit. 
.LP
Da followin options shall be supported:
.TP 7
\fB-l\fP
(Da letta ell.) Write all jointz of \fIsignal_name\fP supported
by tha implementation, if no operand is given. I aint talkin' bout chicken n' gravy biatch. If an
\fIexit_status\fP operand is given n' it aint nuthin but a value of tha \fB'?'\fP
shell special parameta (see \fISpecial Parameters\fP n' \fIwait\fP()
) correspondin ta a process
that was terminated by a signal, tha \fIsignal_name\fP corresponding
to tha signal dat terminated tha process shall be written.
If a \fIexit_status\fP operand is given n' it is tha unsigned decimal
integer value of a signal number, tha \fIsignal_name\fP
(the symbolic constant name without tha \fBSIG\fP prefix defined in
the Base Definitions volume of IEEE\ Std\ 1003.1-2001)
correspondin ta dat signal shall be written. I aint talkin' bout chicken n' gravy biatch. Otherwise, tha thangs up in dis biatch
are unspecified.
.TP 7
\fB-s\ \fP \fIsignal_name\fP
.sp
Specify tha signal ta send, rockin one of tha symbolic names defined
in tha \fI<signal.h>\fP header n' shit. Valuez of \fIsignal_name\fP shall
be recognized up in a
case-independent fashion, without tha \fBSIG\fP prefix. In addition,
the symbolic name 0 shall be recognized, representin the
signal value zero. Da correspondin signal shall be busted instead
of SIGTERM.
.TP 7
\fB-\fP\fIsignal_name\fP
.sp
Equivalent ta \fB-s\fP \fIsignal_name\fP. 
.TP 7
\fB-\fP\fIsignal_number\fP
.sp
Specify a non-negatizzle decimal integer, \fIsignal_number\fP, representing
the signal ta be used instead of SIGTERM, as the
\fIsig\fP argument up in tha effectizzle call ta \fIkill\fP(). Da correspondence
between integer
values n' tha \fIsig\fP value used is shown up in tha followin table.
.LP
Da effectz of specifyin any \fIsignal_number\fP other than them
listed up in tha table is undefined. Y'all KNOW dat shit, muthafucka! 
.sp
.sp
.TS C
center; l l.
\fIsignal_number\fP	\fB\fIsig\fP Value\fP
0	0
1	SIGHUP
2	SIGINT
3	SIGQUIT
6	SIGABRT
9	SIGKILL
14	SIGALRM
15	SIGTERM
.TE
.LP
If tha straight-up original gangsta argument be a wack integer, it shall be interpreted
as a \fB-\fP \fIsignal_number\fP option, not as a
negatizzle \fIpid\fP operand specifyin a process group. 
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIpid\fP
One of tha following: 
.RS
.IP " 1." 4
A decimal integer specifyin a process or process crew ta be signaled.
Da process or processes selected by positive, negative,
and zero jointz of tha \fIpid\fP operand shall be as busted lyrics bout for
the \fIkill\fP()
function. I aint talkin' bout chicken n' gravy biatch. If process number 0 is specified, all processes up in tha current
process crew shall be signaled. Y'all KNOW dat shit, muthafucka! For tha effects of
negatizzle \fIpid\fP numbers, peep tha \fIkill\fP() function defined
in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001. If tha straight-up original gangsta \fIpid\fP operand is
negative, it should be preceded by \fB"--"\fP to
keep it from bein interpreted as a option.
.LP
.IP " 2." 4
A thang control thang ID (see tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Section 3.203, Thang Control Thang ID) dat identifies a funky-ass background process
group ta be
signaled. Y'all KNOW dat shit, muthafucka! Da thang control thang ID notation be applicable only fo' invocations
of \fIkill\fP up in tha current shell execution
environment; peep \fIShell Execution Environment\fP .
.LP
.RE
.TP 7
\fIexit_status\fP
A decimal integer specifyin a signal number or tha exit status of
a process terminated by a signal.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIkill\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
When tha \fB-l\fP option aint specified, tha standard output shall
not be used.
.LP
When tha \fB-l\fP option is specified, tha symbolic name of each signal
shall be freestyled up in tha followin format:
.sp
.RS
.nf

\fB"%s%c", <\fP\fIsignal_name\fP\fB>, <\fP\fIseparator\fP\fB>
\fP
.fi
.RE
.LP
where tha <\fIsignal_name\fP> is up in uppercase, without tha \fBSIG\fP
prefix, n' tha <\fIseparator\fP> shall be
either a <newline> or a <space>. For tha last signal written, <\fIseparator\fP>
shall be a <newline>.
.LP
When both tha \fB-l\fP option n' \fIexit_status\fP operand is specified,
the symbolic name of tha correspondin signal shall
be freestyled up in tha followin format:
.sp
.RS
.nf

\fB"%s\\n", <\fP\fIsignal_name\fP\fB>
\fP
.fi
.RE
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
At least one matchin process was found fo' each \fIpid\fP operand,
and tha specified signal was successfully processed fo' at
least one matchin process.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Process numbers can be found by rockin \fIps\fP.
.LP
Da thang control thang ID notation aint required ta work as expected
when \fIkill\fP is operatin up in its own utilitizzle execution
environment. In either of tha followin examples:
.sp
.RS
.nf

\fBnohup bust a cap up in %1 &
system("kill %1");
\fP
.fi
.RE
.LP
the \fIkill\fP operates up in a gangbangin' finger-lickin' different environment n' do not share
the shellz understandin of thang numbers.
.SH EXAMPLES
.LP
Any of tha commands:
.sp
.RS
.nf

\fBkill -9 100 -165
kill -s bust a cap up in 100 -165
kill -s KILL 100 -165
\fP
.fi
.RE
.LP
sendz tha SIGKILL signal ta tha process whose process ID is 100 and
to all processes whose process crew ID is 165, assumin the
sendin process has permission ta bust dat signal ta tha specified
processes, n' dat they exist.
.LP
Da System Interfaces volume of IEEE\ Std\ 1003.1-2001 n' dis volume
of IEEE\ Std\ 1003.1-2001 do not require
specific signal numbers fo' any \fIsignal_names\fP. Even tha \fB-\fP
\fIsignal_number\fP option serves up symbolic (although
numeric) names fo' signals. If a process is terminated by a signal,
its exit status indicates tha signal dat capped it yo, but the
exact joints is not specified. Y'all KNOW dat shit, muthafucka! Da \fIkill\fP \fB-l\fP option, however,
can be used ta map decimal signal numbers n' exit
status joints tha fuck into tha name of a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da followin example reports
the statuz of a terminated thang:
.sp
.RS
.nf

\fBjob
stat=$?
if [ $stat -eq 0 ]
then
    echo thang completed successfully.
elif [ $stat -gt 128 ]
then
    echo thang terminated by signal SIG$(kill -l $stat).
else
    echo thang terminated wit error code $stat.
fi
\fP
.fi
.RE
.LP
To bust tha default signal ta a process crew (say 123), a application
should bust a cold-ass lil command similar ta one of the
following:
.sp
.RS
.nf

\fBkill -TERM -123
kill -- -123
\fP
.fi
.RE
.SH RATIONALE
.LP
Da \fB-l\fP option originated from tha C shell, n' be also implemented
in tha KornShell. Da C shell output can consist of
multiple output lines cuz tha signal names do not always fit on
a single line on some terminal screens. Da KornShell output
also included tha implementation-defined signal numbers n' was considered
by tha standard pimpers ta be too hard as fuck for
scripts ta parse conveniently. Da specified output format is intended
not only ta accommodate tha oldschool C shell output yo, but
also ta permit a entirely vertical or entirely horizontal listing
on systems fo' which dis be appropriate.
.LP
An early proposal invented tha name SIGNULL as a \fIsignal_name\fP
for signal 0 (used by tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001 ta test fo' tha existence of a process without
sendin it a signal). Right back up in yo muthafuckin ass. Since tha \fIsignal_name\fP 0
can be used up in dis case unambiguously, SIGNULL has been removed.
.LP
An early proposal also required symbolic \fIsignal_name\fPs ta be
recognized wit or without tha \fBSIG\fP prefix yo. Historical
versionz of \fIkill\fP aint freestyled tha \fBSIG\fP prefix fo' the
\fB-l\fP option n' aint recognized tha \fBSIG\fP
prefix on \fIsignal_name\fPs. Right back up in yo muthafuckin ass. Since neither applications portability
nor ease-of-use would be improved by requirin this
extension, it is no longer required.
.LP
To avoid a ambiguitizzle of a initial wack number argument specifying
either a signal number or a process group,
IEEE\ Std\ 1003.1-2001 mandates dat it be always considered tha former
by implementations dat support tha XSI option. I aint talkin' bout chicken n' gravy biatch. It
also requires dat conformin applications always use tha \fB"--"\fP
options terminator argument when specifyin a process
group, unless a option be also specified.
.LP
Da \fB-s\fP option was added up in response ta internationistic interest
in providin some form of \fIkill\fP dat meets the
Utilitizzle Syntax Guidelines.
.LP
Da thang control thang ID notation aint required ta work as expected
when \fIkill\fP is operatin up in its own utilitizzle execution
environment. In either of tha followin examples:
.sp
.RS
.nf

\fBnohup bust a cap up in %1 &
system("kill %1");
\fP
.fi
.RE
.LP
the \fIkill\fP operates up in a gangbangin' finger-lickin' different environment n' do not understand
how tha shell has managed its thang numbers.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIShell Command Language\fP, \fIps\fP, \fIwait\fP(), tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001, \fIkill\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
