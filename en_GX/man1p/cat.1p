.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CAT" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pussaaaaay 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
cat \- concatenate n' print files
.SH SYNOPSIS
.LP
\fBcat\fP \fB[\fP\fB-u\fP\fB][\fP\fIfile\fP \fB...\fP\fB]\fP
.SH DESCRIPTION
.LP
Da \fIcat\fP utilitizzle shall read filez up in sequence n' shall write
their contents ta tha standard output up in tha same
sequence.
.SH OPTIONS
.LP
Da \fIcat\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin option shall be supported:
.TP 7
\fB-u\fP
Write bytes from tha input file ta tha standard output without delay
as each is read.
.sp
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIfile\fP
A pathname of a input file. If no \fIfile\fP operandz is specified,
the standard input shall be used. Y'all KNOW dat shit, muthafucka! If a \fIfile\fP is
\fB'-'\fP, tha \fIcat\fP utilitizzle shall read from tha standard input
at dat point up in tha sequence. Da \fIcat\fP utility
shall not close n' reopen standard input when it is referenced in
this way yo, but shall accept multiple occurrencez of \fB'-'\fP
as a \fIfile\fP operand.
.sp
.SH STDIN
.LP
Da standard input shall be used only if no \fIfile\fP operandz are
specified, or if a \fIfile\fP operand is \fB'-'\fP .
See tha INPUT FILES section.
.SH INPUT FILES
.LP
Da input filez can be any file type.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIcat\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Da standard output shall contain tha sequence of bytes read from
the input files. Nothang else shall be freestyled ta tha standard
output.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
All input filez was output successfully.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da \fB-u\fP option has value up in prototypin non-blockin readz from
FIFOs. Da intent is ta support tha following
sequence:
.sp
.RS
.nf

\fBmkfifo foo
cat -u foo > /dev/tty13 &
cat -u > foo
\fP
.fi
.RE
.LP
It be unspecified whether standard output is or aint buffered in
the default case. This is sometimez of interest when standard
output be associated wit a terminal, since bufferin may delay the
output. Da presence of tha \fB-u\fP option guarantees that
unbuffered I/O be available. Well shiiiit, it is implementation-defined whether
the \fIcat\fP utilitizzle buffers output if tha \fB-u\fP option is
not specified. Y'all KNOW dat shit, muthafucka! Traditionally, tha \fB-u\fP option is implemented using
the equivalent of tha \fIsetvbuf\fP() function defined up in tha System
Interfaces volume of
IEEE\ Std\ 1003.1-2001.
.SH EXAMPLES
.LP
Da followin command:
.sp
.RS
.nf

\fBcat myfile
\fP
.fi
.RE
.LP
writes tha contentz of tha file \fBmyfile\fP ta standard output.
.LP
Da followin command:
.sp
.RS
.nf

\fBcat doc1 doc2 > doc.all
\fP
.fi
.RE
.LP
concatenates tha filez \fBdoc1\fP n' \fBdoc2\fP n' writes tha result
to \fBdoc.all\fP.
.LP
Because of tha shell language mechanizzle used ta big-ass up output redirection,
a command like fuckin this:
.sp
.RS
.nf

\fBcat doc doc.end > doc
\fP
.fi
.RE
.LP
causes tha original gangsta data up in \fBdoc\fP ta be lost.
.LP
Da command:
.sp
.RS
.nf

\fBcat start - middle - end > file
\fP
.fi
.RE
.LP
when standard input be a terminal, gets two arbitrary piecez of input
from tha terminal wit a single invocation of \fIcat\fP.
Note, however, dat if standard input be a regular file, dis would
be equivalent ta tha command:
.sp
.RS
.nf

\fBcat start - middle /dev/null end > file
\fP
.fi
.RE
.LP
because tha entire contentz of tha file would be consumed by \fIcat\fP
the last time \fB'-'\fP was used as a \fIfile\fP
operand n' a end-of-file condizzle would be detected immediately
when \fB'-'\fP was referenced tha second time.
.SH RATIONALE
.LP
Oldschool versionz of tha \fIcat\fP utilitizzle include tha options \fB-e\fP,
\fB-t\fP, n' \fB-v\fP, which permit tha endz of
lines, <tab>s, n' invisible characters, respectively, ta be rendered
visible up in tha output. Da standard pimpers omitted
these options cuz they provide too fine a thugged-out degree of control over
what is made visible, n' similar output can be obtained using
a command such as:
.sp
.RS
.nf

\fBsed -n -e 's/$/$/' -e l pathname
\fP
.fi
.RE
.LP
Da \fB-s\fP option was omitted cuz it correspondz ta different
functions up in BSD n' System V-based systems. Da BSD
\fB-s\fP option ta squeeze blank lines can be accomplished by the
shell script shown up in tha followin example:
.sp
.RS
.nf

\fBsed -n '
# Write non-empty lines.
/./   {
      p
      d
      }
# Write a single empty line, then look fo' mo' empty lines.
/^$/  p
# Git next line, discard tha held <newline> (empty line),
# n' look fo' mo' empty lines.
:Empty
/^$/  {
      N
      s/.//
      b Empty
      }
# Write tha non-empty line before goin back ta search
# fo' tha straight-up original gangsta up in a set of empty lines.
      p
'
\fP
.fi
.RE
.LP
Da System V \fB-s\fP option ta silence error lyrics can be accomplished
by redirectin tha standard error. Shiiit, dis aint no joke. Note dat tha BSD
documentation fo' \fIcat\fP uses tha term "blank line" ta mean the
same as tha POSIX "empty line'': a line consistin only of a
<newline>.
.LP
Da BSD \fB-n\fP option was omitted cuz similar functionality
can be obtained from tha \fB-n\fP option of tha \fIpr\fP utility.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImore\fP, tha System Interfaces volume of IEEE\ Std\ 1003.1-2001,
\fIsetvbuf\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
