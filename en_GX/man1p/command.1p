.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "COMMAND" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" command 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
command \- execute a simple command
.SH SYNOPSIS
.LP
\fBcommand\fP \fB[\fP\fB-p\fP\fB]\fP \fIcommand_name\fP \fB[\fP\fIargument\fP
\fB\&...\fP\fB]\fP\fB
.br
.sp
\fP
.LP
\fBcommand\fP \fB[\fP \fB-v | -V\fP \fB]\fP \fIcommand_name\fP\fB\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIcommand\fP utilitizzle shall cause tha shell ta treat tha arguments
as a simple command, suppressin tha shell function
lookup dat is busted lyrics bout up in \fICommand Search n' Execution\fP, item
1b.
.LP
If tha \fIcommand_name\fP is tha same ol' dirty as tha name of one of tha special
built-in utilities, tha special propertizzles up in the
enumerated list all up in tha beginnin of \fISpecial Built-In Utilities\fP
shall not occur. Shiiit, dis aint no joke. In
every other respect, if \fIcommand_name\fP aint tha name of a gangbangin' function,
the effect of \fIcommand\fP (with no options) shall be
the same as omittin \fIcommand\fP.
.LP
On systems supportin tha User Portabilitizzle Utilitizzles option, tha \fIcommand\fP
utilitizzle also shall provide shiznit
concernin how tha fuck a cold-ass lil command name is interpreted by tha shell; peep \fB-v\fP
and \fB-V\fP.
.SH OPTIONS
.LP
Da \fIcommand\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-p\fP
Perform tha command search rockin a thugged-out default value fo' \fIPATH\fP that
is guaranteed ta find all of tha standard utilities.
.TP 7
\fB-v\fP
(On systems supportin tha User Portabilitizzle Utilitizzles option.) Write
a strang ta standard output dat indicates tha pathname or
command dat is ghon be used by tha shell, up in tha current shell execution
environment (see \fIShell Execution Environment\fP ), ta invoke \fIcommand_name\fP,
but do not invoke
\fIcommand_name\fP. 
.RS
.IP " *" 3
Utilities, regular built-in utilities, \fIcommand_name\fPs including
a slash character, n' any implementation-defined
functions dat is found rockin tha \fIPATH\fP variable (as busted lyrics about
in \fICommand
Search n' Execution\fP ), shall be freestyled as absolute pathnames.
.LP
.IP " *" 3
Shell functions, special built-in utilities, regular built-in utilities
not associated wit a \fIPATH\fP search, n' shell
reserved lyrics shall be freestyled as just they names.
.LP
.IP " *" 3
An alias shall be freestyled as a cold-ass lil command line dat represents its alias
definition.
.LP
.IP " *" 3
Otherwise, no output shall be freestyled n' tha exit status shall reflect
that tha name was not found.
.LP
.RE
.TP 7
\fB-V\fP
(On systems supportin tha User Portabilitizzle Utilitizzles option.) Write
a strang ta standard output dat indicates how tha fuck tha name
given up in tha \fIcommand_name\fP operand is ghon be interpreted by the
shell, up in tha current shell execution environment (see \fIShell Execution
Environment\fP ) yo, but do not invoke \fIcommand_name\fP fo' realz. Although the
format of
this strang is unspecified, it shall indicate up in which of tha following
categories \fIcommand_name\fP falls n' shall include the
information stated: 
.RS
.IP " *" 3
Utilities, regular built-in utilities, n' any implementation-defined
functions dat is found rockin tha \fIPATH\fP variable
(as busted lyrics bout up in \fICommand Search n' Execution\fP ), shall be identified
as such
and include tha absolute pathname up in tha string.
.LP
.IP " *" 3
Other shell functions shall be identified as functions.
.LP
.IP " *" 3
Aliases shall be identified as aliases n' they definitions included
in tha string.
.LP
.IP " *" 3
Special built-in utilitizzles shall be identified as special built-in
utilities.
.LP
.IP " *" 3
Regular built-in utilitizzles not associated wit a \fIPATH\fP search
shall be identified as regular built-in utilities. Put ya muthafuckin choppers up if ya feel dis! (Da term
"regular" need not be used.)
.LP
.IP " *" 3
Shell reserved lyrics shall be identified as reserved lyrics.
.LP
.RE
.sp
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIargument\fP
One of tha strings treated as a argument ta \fIcommand_name\fP.
.TP 7
\fIcommand_name\fP
.sp
Da name of a utilitizzle or a special built-in utility.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIcommand\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard error and
informatizzle lyrics freestyled ta standard output.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fIPATH\fP
Determine tha search path used durin tha command search busted lyrics about
in \fICommand
Search n' Execution\fP, except as busted lyrics bout under tha \fB-p\fP option.
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
When tha \fB-v\fP option is specified, standard output shall be formatted
as:
.sp
.RS
.nf

\fB"%s\\n", <\fP\fIpathname or command\fP\fB>
\fP
.fi
.RE
.LP
When tha \fB-V\fP option is specified, standard output shall be formatted
as:
.sp
.RS
.nf

\fB"%s\\n", <\fP\fIunspecified\fP\fB>
\fP
.fi
.RE
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
When tha \fB-v\fP or \fB-V\fP options is specified, tha following
exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
Da \fIcommand_name\fP could not be found or a error occurred.
.sp
.LP
Otherwise, tha followin exit joints shall be returned:
.TP 7
126
Da utilitizzle specified by \fIcommand_name\fP was found but could not
be invoked.
.TP 7
127
An error occurred up in tha \fIcommand\fP utilitizzle or tha utilitizzle specified
by \fIcommand_name\fP could not be found.
.sp
.LP
Otherwise, tha exit statuz of \fIcommand\fP shall be dat of tha simple
command specified by tha arguments to
\fIcommand\fP.
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da order fo' command search allows functions ta override regular
built-ins n' path searches. This utilitizzle is necessary to
allow functions dat have tha same name as a utilitizzle ta booty-call tha utility
(instead of a recursive call ta tha function).
.LP
Da system default path be available rockin \fIgetconf\fP; however,
since \fIgetconf\fP may need ta have tha \fIPATH\fP set up before
it can be called itself, the
followin can be used:
.sp
.RS
.nf

\fBcommand -p getconf _CS_PATH
\fP
.fi
.RE
.LP
There is some advantages ta suppressin tha special characteristics
of special built-ins on occasion. I aint talkin' bout chicken n' gravy biatch. For example:
.sp
.RS
.nf

\fBcommand exec >\fP \fIunwritable-file\fP
.fi
.RE
.LP
does not cause a non-interactizzle script ta abort, so dat tha output
status can be checked by tha script.
.LP
Da \fIcommand\fP, \fIenv\fP, \fInohup\fP, \fItime\fP, n' \fIxargs\fP
utilitizzles done been specified to
use exit code 127 if a error occurs so dat applications can distinguish
"failure ta find a utility" from "invoked utility
exited wit a error indication". Da value 127 was chosen cuz
it aint commonly used fo' other meanings; most utilitizzles use
small joints fo' "normal error conditions" n' tha joints above 128
can be trippin wit termination cuz of receipt of a signal.
Da value 126 was chosen up in a similar manner ta indicate dat the
utilitizzle could be found yo, but not invoked. Y'all KNOW dat shit, muthafucka! Some scripts produce
meaningful error lyrics differentiatin tha 126 n' 127 cases. The
distinction between exit codes 126 n' 127 is based on
KornShell practice dat uses 127 when all attempts ta \fIexec\fP the
utilitizzle fail wit [ENOENT], n' uses 126 when any attempt to
\fIexec\fP tha utilitizzle fails fo' any other reason.
.LP
Since tha \fB-v\fP n' \fB-V\fP optionz of \fIcommand\fP produce output
in relation ta tha current shell execution
environment, \fIcommand\fP is generally provided as a gangbangin' finger-lickin' dirty-ass shell regular
built-in. I aint talkin' bout chicken n' gravy biatch. If it is called up in a subshell or separate utility
execution environment, like fuckin one of tha following:
.sp
.RS
.nf

\fB(PATH=foo command -v)
 nohup command -v
\fP
.fi
.RE
.LP
it do not necessarily produce erect thangs up in dis biatch. For example, when
called wit \fInohup\fP or a \fIexec\fP function, up in a separate utility
execution environment, most
implementations is not able ta identify aliases, functions, or special
built-ins.
.LP
Two typez of regular built-ins could be encountered on a system and
these is busted lyrics bout separately by \fIcommand\fP. The
description of command search up in \fICommand Search n' Execution\fP
allows fo' a
standard utilitizzle ta be implemented as a regular built-in as long as
it is found up in tha appropriate place up in a \fIPATH\fP search.
So, fo' example, \fIcommand\fP \fB-v\fP \fItrue\fP might yield \fB/bin/true\fP
or some similar pathname. Other
implementation-defined utilitizzles dat is not defined by dis volume
of IEEE\ Std\ 1003.1-2001 might exist only as
built-ins n' have no pathname associated wit em. These produce
output identified as (regular) built-ins fo' realz. Applications
encounterin these is not able ta count on \fIexec\fPin them, using
them wit \fInohup\fP, overridin dem wit a gangbangin' finger-lickin' different \fIPATH\fP, 
and so on.
.SH EXAMPLES
.IP " 1." 4
Make a version of \fIcd\fP dat always prints up tha freshly smoked up working
directory exactly
once:
.sp
.RS
.nf

\fBcd() {
    command cd "$@" >/dev/null
    pwd
}
\fP
.fi
.RE
.LP
.IP " 2." 4
Start off a "secure shell script" up in which tha script avoidz being
spoofed by its parent:
.sp
.RS
.nf

\fBIFS='
'
#    Da precedin value should be <space><tab><newline>.
#    Set IFS ta its default value.
.sp

\\unalias -a
#    Unset all possible aliases.
#    Note dat unalias is escaped ta prevent a alias
#    bein used fo' unalias.
.sp

unset -f command
#    Ensure command aint a user function.
.sp

PATH="$(command -p getconf _CS_PATH):$PATH"
#    Put on a reliable PATH prefix.
.sp

#    ...
\fP
.fi
.RE
.LP
At dis point, given erect permissions on tha directories called
by \fIPATH\fP,  tha script has tha mobilitizzle ta ensure that
any utilitizzle it calls is tha intended one. Well shiiiit, it is bein straight-up cautious
because it assumes dat implementation extensions may be
present dat would allow user functions ta exist when it is invoked;
this capabilitizzle aint specified by dis volume of
IEEE\ Std\ 1003.1-2001 yo, but it aint prohibited as a extension.
For example, tha \fIENV\fP variable precedes the
invocation of tha script wit a user start-up script. Right back up in yo muthafuckin ass. Such a script
could define functions ta spoof tha application.
.LP
.SH RATIONALE
.LP
Since \fIcommand\fP be a regular built-in utilitizzle it be always found
prior ta tha \fIPATH\fP search.
.LP
There is not a god damn thang up in tha description of \fIcommand\fP dat implies
the command line is parsed any differently from dat of any
other simple command. Y'all KNOW dat shit, muthafucka! For example:
.sp
.RS
.nf

\fBcommand a | b ; c
\fP
.fi
.RE
.LP
is not parsed up in any special way dat causes \fB'|'\fP or \fB';'\fP
to be treated other than a pipe operator or semicolon
or dat prevents function lookup on \fBb\fP or \fBc\fP.
.LP
Da \fIcommand\fP utilitizzle is somewhat similar ta tha Eighth Edition
shell \fIbuiltin\fP command yo, but since \fIcommand\fP also
goes ta tha file system ta search fo' utilities, tha name \fIbuiltin\fP
would not be intuitive.
.LP
Da \fIcommand\fP utilitizzle is most likely ta be provided as a regular
built-in. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it aint listed as a special built-in fo' the
followin reasons:
.IP " *" 3
Da removal of exportable functions made tha special precedence of
a special built-in unnecessary.
.LP
.IP " *" 3
A special built-in has special propertizzles (see \fISpecial Built-In
Utilities\fP ) that
were inappropriate fo' invokin other utilities. Put ya muthafuckin choppers up if ya feel dis! For example, two
commandz such as:
.sp
.RS
.nf

\fBdate >\fP \fIunwritable-file\fP\fB
.br

command date >\fP \fIunwritable-file\fP
.fi
.RE
.LP
would have entirely different thangs up in dis biatch; up in a non-interactizzle script,
the forma would continue ta execute tha next command, the
latta would abort. Introducin dis semantic difference along with
suppressin functions was peeped ta be non-intuitive.
.LP
.LP
Da \fB-p\fP option is present cuz it is useful ta be able to
ensure a safe path search dat findz all tha standard
utilities. Put ya muthafuckin choppers up if ya feel dis! This search might not be identical ta tha one dat occurs
all up in one of tha \fIexec\fP functions (as defined up in the
System Interfaces volume of IEEE\ Std\ 1003.1-2001) when \fIPATH\fP
is unset fo' realz. At tha straight-up least, dis feature is required
to allow tha script ta access tha erect version of \fIgetconf\fP
so dat tha value of
the default path can be accurately retrieved.
.LP
Da \fIcommand\fP \fB-v\fP n' \fB-V\fP options was added ta satisfy
requirements from playas dat is currently accomplished
by three different oldschool utilities: \fItype\fP up in tha System
V shell, \fIwhence\fP in
the KornShell, n' \fIwhich\fP up in tha C shell. Right back up in yo muthafuckin ass. Since there is no historical
agreement on how tha fuck n' what tha fuck ta accomplish here, the
POSIX \fIcommand\fP utilitizzle was enhanced n' tha oldschool utilities
were left unmodified. Y'all KNOW dat shit, muthafucka! Da C shell \fIwhich\fP merely
conducts a path search. Da KornShell \fIwhence\fP is mo' elaborate-in
addizzle ta tha categories required by POSIX, it also
reports on tracked aliases, exported aliases, n' undefined functions.
.LP
Da output format of \fB-V\fP was left mostly unspecified cuz
human playas is its only crew fo' realz. Applications should not be
written ta care bout dis shiznit; they can use tha output of
\fB-v\fP ta differentiate between various typez of commands,
but tha additionizzle shiznit dat may be emitted by tha mo' verbose
\fB-V\fP aint needed n' should not be arbitrarily
constrained up in its verbositizzle or localization fo' application parsing
reasons.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fICommand Search n' Execution\fP, \fIShell
Execution Environment\fP, \fISpecial Built-In Utilities\fP, \fIsh\fP,
\fItype\fP, tha System Interfaces volume of IEEE\ Std\ 1003.1-2001,
\fIexec\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
