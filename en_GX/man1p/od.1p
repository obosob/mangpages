.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "OD" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" od 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
od \- dump filez up in various formats
.SH SYNOPSIS
.LP
\fBod\fP \fB[\fP\fB-v\fP\fB][\fP\fB-A\fP \fIaddress_base\fP\fB][\fP\fB-j\fP
\fIskip\fP\fB][\fP\fB-N\fP
\fIcount\fP\fB][\fP\fB-t\fP \fItype_string\fP\fB]\fP\fB...
.br
\ \ \ \ \ \ \fP \fB[\fP\fIfile\fP\fB...\fP\fB]\fP\fB
.br
.sp
\fP
.LP
\fBod\fP \fB[\fP\fB-bcdosx\fP\fB][\fP\fIfile\fP\fB]
[[\fP\fB+\fP\fB]\fP\fIoffset\fP\fB[\fP\fB.\fP\fB][\fP\fBb\fP\fB]]\fP\fB\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIod\fP utilitizzle shall write tha contentz of its input filez to
standard output up in a user-specified format.
.SH OPTIONS
.LP
Da \fIod\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines,
except dat tha order of presentation of the
\fB-t\fP options  n' tha \fB-bcdosx\fP options 
is significant.
.LP
Da followin options shall be supported:
.TP 7
\fB-A\ \fP \fIaddress_base\fP
.sp
Specify tha input offset base. Right back up in yo muthafuckin ass. See tha EXTENDED DESCRIPTION section.
Da application shall ensure dat tha \fIaddress_base\fP
option-argument be a cold-ass lil character n' shit. Da charactas \fB'd'\fP, \fB'o'\fP,
and \fB'x'\fP specify dat tha offset base shall be
written up in decimal, octal, or hexadecimal, respectively. Da character
\fB'n'\fP specifies dat tha offset shall not be
written.
.TP 7
\fB-b\fP
Interpret bytes up in octal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This shall be equivalent ta \fB-t\ o1\fP.
.TP 7
\fB-c\fP
Interpret bytes as charactas specified by tha current settin of
the \fILC_CTYPE\fP category. Certain non-graphic characters
appear as C escapes: \fB"NUL=\\0"\fP, \fB"BS=\\b"\fP, \fB"FF=\\f"\fP,
\fB"NL=\\n"\fP, \fB"CR=\\r"\fP,
\fB"HT=\\t"\fP ; others step tha fuck up as 3-digit octal numbers. 
.TP 7
\fB-d\fP
Interpret \fIword\fPs (two-byte units) up in unsigned decimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This shall
be equivalent ta \fB-t\ u2\fP. 
.TP 7
\fB-j\ \fP \fIskip\fP
Jump over \fIskip\fP bytes from tha beginnin of tha input. Da \fIod\fP
utilitizzle shall read or seek past tha first
\fIskip\fP bytes up in tha concatenated input files. If tha combined
input aint at least \fIskip\fP bytes long, tha \fIod\fP
utilitizzle shall write a gangbangin' finger-lickin' diagnostic message ta standard error n' exit
with a non-zero exit status. 
.LP
By default, tha \fIskip\fP option-argument shall be interpreted as
a decimal number n' shit. With a leadin 0x or 0X, tha offset shall
be interpreted as a hexadecimal number; otherwise, wit a leading
\fB'0'\fP, tha offset shall be interpreted as a octal
number n' shiznit fo' realz. Appendin tha characta \fB'b'\fP, \fB'k'\fP, or \fB'm'\fP
to offset shall cause it ta be interpreted as a
multiple of 512, 1024, or 1048576 bytes, respectively. If tha \fIskip\fP
number is hexadecimal, any appended \fB'b'\fP shall be
considered ta be tha final hexadecimal digit.
.TP 7
\fB-N\ \fP \fIcount\fP
Format no mo' than \fIcount\fP bytez of input. By default, \fIcount\fP
shall be interpreted as a thugged-out decimal number n' shit. With a
leadin 0x or 0X, \fIcount\fP shall be interpreted as a hexadecimal
number; otherwise, wit a leadin \fB'0'\fP, it shall be
interpreted as a octal number n' shit. If \fIcount\fP bytez of input (after
successfully skipping, if \fB-j\fP \fIskip\fP is specified)
are not available, it shall not be considered a error; tha \fIod\fP
utilitizzle shall format tha input dat be available.
.TP 7
\fB-o\fP
Interpret \fIword\fPs (two-byte units) up in octal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This shall be equivalent
to \fB-t\ o2\fP. 
.TP 7
\fB-s\fP
Interpret \fIword\fPs (two-byte units) up in signed decimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This shall
be equivalent ta \fB-t\ d2\fP. 
.TP 7
\fB-t\ \fP \fItype_string\fP
.sp
Specify one or mo' output types. Right back up in yo muthafuckin ass. See tha EXTENDED DESCRIPTION section.
Da application shall ensure dat tha \fItype_string\fP
option-argument be a strang specifyin tha types ta be used when writing
the input data. Da strang shall consist of tha type
specification charactas \fBa\fP, \fBc\fP, \fBd\fP, \fBf\fP, \fBo\fP,
\fBu\fP, n' \fBx\fP, specifying
named character, character, signed decimal, floatin point, octal,
unsigned decimal, n' hexadecimal, respectively. Da type
specification charactas \fBd\fP, \fBf\fP, \fBo\fP, \fBu\fP, and
\fBx\fP can be followed by a optionizzle unsigned
decimal integer dat specifies tha number of bytes ta be transformed
by each instizzle of tha output type. Da type justification
characta \fBf\fP can be followed by a optionizzle \fBF\fP, \fBD\fP,
or \fBL\fP indicatin dat tha conversion should
be applied ta a item of type \fBfloat\fP, \fBdouble\fP, or \fBlong
double\fP, respectively. Da type justification characters
\fBd\fP, \fBo\fP, \fBu\fP, n' \fBx\fP can be followed by a optional
\fBC\fP, \fBS\fP, \fBI\fP, or
\fBL\fP indicatin dat tha conversion should be applied ta a item
of type \fBchar\fP, \fBshort\fP, \fBint\fP, or
\fBlong\fP, respectively. Multiple types can be concatenated within
the same \fItype_string\fP n' multiple \fB-t\fP options can
be specified. Y'all KNOW dat shit, muthafucka! Output lines shall be freestyled fo' each type specified
in tha order up in which tha type justification charactas are
specified.
.TP 7
\fB-v\fP
Write all input data. Without tha \fB-v\fP option, any number of groups
of output lines, which would be identical ta the
immediately precedin crew of output lines (except fo' tha byte offsets),
shall be replaced wit a line containin only an
asterisk ( \fB'*'\fP ).
.TP 7
\fB-x\fP
Interpret \fIword\fPs (two-byte units) up in hexadecimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This shall
be equivalent ta \fB-t\ x2\fP. 
.sp
.LP
Multiple types can be specified by rockin multiple \fB-bcdostx\fP options.
Output lines is freestyled fo' each type specified up in the
order up in which tha types is specified. Y'all KNOW dat shit, muthafucka! 
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIfile\fP
A pathname of a gangbangin' file ta be read. Y'all KNOW dat shit, muthafucka! If no \fIfile\fP operandz is specified,
the standard input shall be used. Y'all KNOW dat shit, muthafucka! 
.LP
If there be no mo' than two operands, none of tha \fB-A\fP, \fB-j\fP,
\fB-N\fP, or \fB-t\fP options is specified, and
either of tha followin is true: tha straight-up original gangsta characta of tha last operand
is a plus sign ( \fB'+'\fP ), or there be two operands
and tha straight-up original gangsta characta of tha last operand is numeric;  tha last
operand shall be interpreted as a offset operand on
XSI-conformant systems.  Under these conditions, tha thangs up in dis biatch are
unspecified on systems dat is not XSI-conformant systems.
.TP 7
\fB[+]\fP\fIoffset\fP\fB[.][b]\fP
Da \fIoffset\fP operand specifies tha offset up in tha file where dumping
is ta commence. This operand is normally interpreted as
octal bytes. If \fB'.'\fP be appended, tha offset shall be interpreted
in decimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If \fB'b'\fP be appended, tha offset shall
be interpreted up in unitz of 512 bytes. 
.sp
.SH STDIN
.LP
Da standard input shall be used only if no \fIfile\fP operandz are
specified. Y'all KNOW dat shit, muthafucka! See tha INPUT FILES section.
.SH INPUT FILES
.LP
Da input filez can be any file type.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIod\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fILC_NUMERIC\fP
.sp
Determine tha locale fo' selectin tha radix characta used when writing
floating-point formatted output.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
See tha EXTENDED DESCRIPTION section.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
Da \fIod\fP utilitizzle shall copy sequentially each input file ta standard
output, transformin tha input data accordin ta the
output types specified by tha \fB-t\fP option  or tha \fB-bcdosx\fP
options.  If no output type is specified, tha default output shall
be as if \fB-t\ oS\fP had been
specified.
.LP
Da number of bytes transformed by tha output type specifier \fBc\fP
may be variable dependin on tha \fILC_CTYPE\fP
category.
.LP
Da default number of bytes transformed by output type specifiers
\fBd\fP, \fBf\fP, \fBo\fP, \fBu\fP, and
\fBx\fP correspondz ta tha various C-language types as bigs up. If
the \fIc99\fP compiler
is present on tha system, these specifiers shall correspond ta the
sizes used by default up in dat compila n' shit. Otherwise, these sizes
may vary among systems dat conform ta IEEE\ Std\ 1003.1-2001.
.IP " *" 3
For tha type specifier charactas \fBd\fP, \fBo\fP, \fBu\fP, and
\fBx\fP, tha default number of bytes shall
correspond ta tha size of tha underlyin implementationz basic integer
type. For these specifier characters, tha implementation
shall support jointz of tha optionizzle number of bytes ta be converted
correspondin ta tha number of bytes up in tha C-language types
\fBchar\fP, \fBshort\fP, \fBint\fP, n' \fBlong\fP. These numbers
can also be specified by a application as tha characters
\fB'C'\fP, \fB'S'\fP, \fB'I'\fP, n' \fB'L'\fP, respectively.
Da implementation shall also support tha joints 1,
2, 4, n' 8, even if it serves up no C-Language typez of dem sizes.
Da implementation shall support tha decimal value
correspondin ta tha C-language type \fBlong long\fP. Da byte order
used when interpretin numeric joints is
implementation-defined yo, but shall correspond ta tha order up in which
a constant of tha correspondin type is stored up in memory on the
system.
.LP
.IP " *" 3
For tha type specifier characta \fBf\fP, tha default number of bytes
shall correspond ta tha number of bytes up in the
underlyin implementationz basic double precision floating-point
data type. Da implementation shall support jointz of the
optionizzle number of bytes ta be converted correspondin ta tha number
of bytes up in tha C-language types \fBfloat,\fP \fBdouble\fP,
and \fBlong double\fP. These numbers can also be specified by a application
as tha charactas \fB'F'\fP, \fB'D'\fP, and
\fB'L'\fP, respectively.
.LP
.LP
Da type specifier characta \fBa\fP specifies dat bytes shall be
interpreted as named charactas from tha International
Reference Version (IRV) of tha ISO/IEC\ 646:1991 standard. Y'all KNOW dat shit, muthafucka! Only the
least dope seven bitz of each byte shall be used for
this type justification. I aint talkin' bout chicken n' gravy biatch. Bytes wit tha joints listed up in tha following
table shall be freestyled rockin tha correspondin names for
those characters.
.br
.sp
.ce 1
\fBTable: Named Charactas up in \fIod\fP\fP
.TS C
center; l2 l2 l2 l2 l2 l2 l2 l.
\fBValue\fP	\fBName\fP	\fBValue\fP	\fBName\fP	\fBValue\fP	\fBName\fP	\fBValue\fP	\fBName\fP
\\000	\fBnul\fP	\\001	\fBsoh\fP	\\002	\fBstx\fP	\\003	\fBetx\fP
\\004	\fBeot\fP	\\005	\fBenq\fP	\\006	\fBack\fP	\\007	\fBbel\fP
\\010	\fBbs\fP	\\011	\fBht\fP	\\012	\fBlf or nl\fP	\\013	\fBvt\fP
\\014	\fBff\fP	\\015	\fBcr\fP	\\016	\fBso\fP	\\017	\fBsi\fP
\\020	\fBdle\fP	\\021	\fBdc1\fP	\\022	\fBdc2\fP	\\023	\fBdc3\fP
\\024	\fBdc4\fP	\\025	\fBnak\fP	\\026	\fBsyn\fP	\\027	\fBetb\fP
\\030	\fBcan\fP	\\031	\fBem\fP	\\032	\fBsub\fP	\\033	\fBesc\fP
\\034	\fBfs\fP	\\035	\fBgs\fP	\\036	\fBrs\fP	\\037	\fBus\fP
\\040	\fBsp\fP	\\177	\fBdel\fP	\ 	\fB\ \fP	\ 	\fB\ \fP
.TE
.TP 7
\fBNote:\fP
Da \fB"\\012"\fP value may be freestyled either as \fBlf\fP or \fBnl\fP.
.sp
.LP
Da type specifier characta \fBc\fP specifies dat bytes shall be
interpreted as charactas specified by tha current setting
of tha \fILC_CTYPE\fP locale category. Charactas listed up in tha table
in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 5, File Format Notation ( \fB'\\\\'\fP
,
\fB'\\a'\fP, \fB'\\b'\fP, \fB'\\f'\fP, \fB'\\n'\fP, \fB'\\r'\fP,
\fB'\\t'\fP, \fB'\\v'\fP ) shall be freestyled as
the correspondin escape sequences, except dat backslash shall be
written as a single backslash n' a NUL shall be freestyled as
\fB'\\0'\fP . Other non-printable charactas shall be freestyled as one
three-digit octal number fo' each byte up in tha character n' shit. If
the size of a funky-ass byte on tha system is pimped outa than nine bits, tha format
used fo' non-printable charactas is implementation-defined.
Printable multi-byte charactas shall be freestyled up in tha area corresponding
to tha straight-up original gangsta byte of tha character; tha two-character
sequence \fB"**"\fP shall be freestyled up in tha area correspondin to
each remainin byte up in tha character, as a indication that
the characta is continued. Y'all KNOW dat shit, muthafucka! When either tha \fB-j\fP \fIskip\fP or
\fB-N\fP \fIcount\fP option is specified along wit the
\fBc\fP type specifier, n' dis thangs up in dis biatch up in a attempt ta start or
finish up in tha middle of a multi-byte character, tha result is
implementation-defined.
.LP
Da input data shall be manipulated up in blocks, where a funky-ass block is defined
as a multiple of tha least common multiple of tha number
of bytes transformed by tha specified output types. If tha least common
multiple is pimped outa than 16, tha thangs up in dis biatch is unspecified.
Each input block shall be freestyled as transformed by each output type,
one per freestyled line, up in tha order dat tha output types were
specified. Y'all KNOW dat shit, muthafucka! If tha input block size is larger than tha number of bytes
transformed by tha output type, tha output type shall
sequentially transform tha partz of tha input block, n' tha output
from each of tha transformations shall be separated by one or
more <blank>s.
.LP
If, as a result of tha justification of tha \fB-N\fP option or end-of-file
bein reached on tha last input file, input data
only partially satisfies a output type, tha input shall be extended
sufficiently wit null bytes ta write tha last byte of the
input.
.LP
Unless \fB-A\ n\fP is specified, tha straight-up original gangsta output line produced for
each input block shall be preceded by tha input offset,
cumulatizzle across input files, of tha next byte ta be written. I aint talkin' bout chicken n' gravy biatch. The
format of tha input offset is unspecified; however, it shall not
contain any <blank>s, shall start all up in tha straight-up original gangsta characta of tha output
line, n' shall be followed by one or more
<blank>s. In addition, tha offset of tha byte followin tha last byte
written shall be freestyled afta all tha input data has
been processed yo, but shall not be followed by any <blank>s.
.LP
If no \fB-A\fP option is specified, tha input offset base is unspecified.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
All input filez was processed successfully.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
XSI-conformant applications is warned not ta use filenames starting
with \fB'+'\fP or a gangbangin' first operand startin wit a
numeric characta so dat tha oldschool functionalitizzle can be maintained
by implementations, unless they specify one of tha \fB-A\fP,
\fB-j\fP, or \fB-N\fP options. To guarantee dat one of these filenames
is always interpreted as a gangbangin' filename, a application could
always specify tha address base format wit tha \fB-A\fP option.
.SH EXAMPLES
.LP
If a gangbangin' file containin 128 bytes wit decimal joints zero ta 127, in
increasin order, is supplied as standard input ta the
command:
.sp
.RS
.nf

\fBod -A d -t a
\fP
.fi
.RE
.LP
on a implementation rockin a input block size of 16 bytes, tha standard
output, independent of tha current locale setting,
would be similar to:
.sp
.RS
.nf

\fB0000000 nul soh stx etx eot enq ack bel  bs  ht  nl  vt  ff  cr  so  si
0000016 dle dc1 dc2 dc3 dc4 nak syn etb can  em sub esc  fs  gs  rs  us
0000032  sp   !   "   #   $   %   &   '   (   )   *   +   ,   -   .  /
0000048   0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ?
0000064   @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O
0000080   P   Q   R   S   T   U   V   W   X   Y   Z   [   \\   ]   ^   _
0000096   `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o
0000112   p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~ del
0000128
\fP
.fi
.RE
.LP
Note dat dis volume of IEEE\ Std\ 1003.1-2001 allows \fBnl\fP or
\fBlf\fP ta be used as tha name fo' the
ISO/IEC\ 646:1991 standard IRV characta wit decimal value 10. The
IRV names dis characta \fBlf\fP (line feed) yo, but
traditionizzle implementations have referred ta dis characta as newline
( \fBnl\fP) n' tha POSIX locale characta set symbolic
name fo' tha correspondin characta be a <newline>.
.LP
Da command:
.sp
.RS
.nf

\fBod -A o -t o2x2x -N 18
\fP
.fi
.RE
.LP
on a system wit 32-bit lyrics n' a implementation rockin a input
block size of 16 bytes could write 18 bytes up in approximately
the followin format:
.sp
.RS
.nf

\fB0000000 032056 031440 041123 042040 052516 044530 020043 031464
          342e   3320   4253   4420   554e   4958   2023   3334
             342e3320      42534420      554e4958      20233334
0000020 032472
          353a
             353a0000
0000022
\fP
.fi
.RE
.LP
Da command:
.sp
.RS
.nf

\fBod -A d -t f -t o4 -t x4 -N 24 -j 0x15
\fP
.fi
.RE
.LP
on a system wit 64-bit doublez (for example, IEEE\ Std\ 754-1985
double precision floating-point format) would skip 21
bytez of input data n' then write 24 bytes up in approximately tha following
format:
.sp
.RS
.nf

\fB0000000    1.00000000000000e+00    1.57350000000000e+01
        07774000000 00000000000 10013674121 35341217270
           3ff00000    00000000    402f3851    eb851eb8
0000016    1.40668230000000e+02
        10030312542 04370303230
           40619562    23e18698
0000024
\fP
.fi
.RE
.SH RATIONALE
.LP
Da \fIod\fP utilitizzle went all up in nuff muthafuckin names up in early proposals,
includin \fIhd\fP, \fIxd\fP, n' most recently
\fIhexdump\fP. There was nuff muthafuckin objections ta all of these based
on tha followin reasons:
.IP " *" 3
Da \fIhd\fP n' \fIxd\fP names conflicted wit oldschool utilities
that behaved differently.
.LP
.IP " *" 3
Da \fIhexdump\fP description was much mo' complex than needed for
a simple dump utility.
.LP
.IP " *" 3
Da \fIod\fP utilitizzle has been available on all oldschool implementations
and there was no need ta create a freshly smoked up name fo' a
utilitizzle so similar ta tha oldschool \fIod\fP utility.
.LP
.LP
Da original gangsta reasons fo' not standardizin oldschool \fIod\fP were
also fairly widespread. Y'all KNOW dat shit, muthafucka! Those reasons is given below along
with rationale explainin why tha standard pimpers believe that
this version do not suffer from tha indicated problem:
.IP " *" 3
Da BSD n' System V versionz of \fIod\fP have diverged, n' tha intersection
of features provided by both do not hook up the
needz of tha user hood. In fact, tha System V version only provides
a mechanizzle fo' dumpin octal bytes n' \fBshort\fPs,
signed n' unsigned decimal \fBshort\fPs, hexadecimal \fBshort\fPs,
and ASCII characters. BSD added tha mobilitizzle ta dump
\fBfloat\fPs, \fBdouble\fPs, named ASCII characters, n' octal, signed
decimal, unsigned decimal, n' hexadecimal \fBlong\fPs.
Da version presented here serves up mo' normalized forms fo' dumping
bytes, \fBshort\fPs, \fBint\fPs, n' \fBlong\fPs up in octal,
signed decimal, unsigned decimal, n' hexadecimal; \fBfloat\fP, \fBdouble\fP,
and \fBlong double\fP; n' named ASCII as well as
current locale characters.
.LP
.IP " *" 3
It would not be possible ta come up wit a cold-ass lil compatible superset of
the BSD n' System V flags dat kicked it wit tha requirementz of the
standard pimpers. Da oldschool default \fIod\fP output is the
specified default output of dis utility. None of tha option
lettas chosen fo' dis version of \fIod\fP conflict wit any of the
options ta oldschool versionz of \fIod\fP.
.LP
.IP " *" 3
On systems wit different sizes fo' \fBshort\fP, \fBint\fP, n' \fBlong\fP,
there was no way ta ask fo' dumpz of \fBint\fPs,
even up in tha BSD version. I aint talkin' bout chicken n' gravy biatch. Because of tha way options is named, the
name space could not be extended ta solve these problems. This
is why tha \fB-t\fP option was added (with type specifiers mo' closely
matched ta tha \fIprintf\fP() formats used up in tha rest of dis volume
of IEEE\ Std\ 1003.1-2001) n' the
optionizzle field sizes was added ta tha \fBd\fP, \fBf\fP, \fBo\fP,
\fBu\fP, n' \fBx\fP type specifiers. Well shiiiit, it is
also one of tha reasons why tha oldschool practice was not mandated
as a required obsolescent form of \fIod\fP. (Although tha old
versionz of \fIod\fP is not listed as a obsolescent form, implementations
are urged ta continue ta recognize tha olda forms for
several mo' years.) Da \fBa\fP, \fBc\fP, \fBf\fP, \fBo\fP, and
\fBx\fP types match tha meanin of the
correspondin format charactas up in tha oldschool implementations
of \fIod\fP except fo' tha default sizez of tha fields
converted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fBd\fP format is signed up in dis volume of IEEE\ Std\ 1003.1-2001
to match tha \fIprintf\fP() notation. I aint talkin' bout chicken n' gravy biatch. (Oldschool versionz of \fIod\fP
used \fBd\fP as a synonym for
\fBu\fP up in dis version. I aint talkin' bout chicken n' gravy biatch. Da System V implementation uses \fBs\fP
for signed decimal; BSD uses \fBi\fP fo' signed decimal
and \fBs\fP fo' null-terminated strings.) Other than \fBd\fP n' \fBu\fP,
all of tha type specifiers match format
charactas up in tha oldschool BSD version of \fBod\fP.
.LP
Da sizez of tha C-language types \fBchar\fP, \fBshort\fP, \fBint\fP,
\fBlong\fP, \fBfloat\fP, \fBdouble\fP, n' \fBlong
double\fP is used even though it is recognized dat there may be
zero or mo' than one compila fo' tha C language on an
implementation n' dat they may use different sizes fo' a shitload of these
types. (For example, one compila might use 2 bytes
\fBshort\fPs, 2 bytes \fBint\fPs, n' 4 bytes \fBlong\fPs, while another
compila (or a option ta tha same compiler) uses 2
bytes \fBshort\fPs, 4 bytes \fBint\fPs, n' 4 bytes \fBlong\fPs.)
Nonetheless, there has ta be a funky-ass basic size known by the
implementation fo' these types, correspondin ta tha joints reported
by invocationz of tha \fIgetconf\fP utilitizzle when called wit \fIsystem_var\fP
operandz {UCHAR_MAX}, {USHORT_MAX},
{UINT_MAX}, n' {ULONG_MAX} fo' tha types \fBchar\fP, \fBshort\fP,
\fBint\fP, n' \fBlong\fP, respectively. There is similar
constants required by tha ISO\ C standard yo, but not required by the
System Interfaces volume of IEEE\ Std\ 1003.1-2001
or dis volume of IEEE\ Std\ 1003.1-2001. They is {FLT_MANT_DIG},
{DBL_MANT_DIG}, n' {LDBL_MANT_DIG} fo' tha types
\fBfloat\fP, \fBdouble\fP, n' \fBlong double\fP, respectively. If
the optionizzle \fIc99\fP
utilitizzle is provided by tha implementation n' used as specified by
this volume of IEEE\ Std\ 1003.1-2001, these is the
sizes dat would be provided. Y'all KNOW dat shit, muthafucka! If a option is used dat specifies
different sizes fo' these types, there is no guarantee dat the
\fIod\fP utilitizzle be able ta interpret binary data output by such a
program erectly.
.LP
This volume of IEEE\ Std\ 1003.1-2001 requires dat tha numeric joints
of these lengths be recognized by tha \fIod\fP
utilitizzle n' dat symbolic forms also be recognized. Y'all KNOW dat shit, muthafucka! Thus, a cold-ass lil conforming
application can always peep a array of \fBunsigned
long\fP data elements rockin \fIod\fP \fB-t\fP \fIuL\fP.
.LP
.IP " *" 3
Da method of specifyin tha format fo' tha address field based on
specifyin a startin offset up in a gangbangin' file unnecessarily tied the
two together n' shit. Da \fB-A\fP option now specifies tha address base and
the \fB-S\fP option specifies a startin offset.
.LP
.IP " *" 3
It would be hard as fuck ta break tha dependence on U.S fo' realz. ASCII ta achieve
an internationalized utility. Well shiiiit, it do not seem ta be any
harder fo' \fIod\fP ta dump charactas up in tha current locale than
it is fo' tha \fIed\fP or \fIsed\fP \fBl\fP commands. Da \fBc\fP
type specifier do dis without hang-up n' is
completely compatible wit tha oldschool implementationz of tha \fBc\fP
format characta when tha current locale uses a superset
of tha ISO/IEC\ 646:1991 standard as a cold-ass lil codeset. Da \fBa\fP type specifier
(from tha BSD \fBa\fP format character) was left
as a portable means ta dump ASCII (or mo' erectly ISO/IEC\ 646:1991
standard (IRV)) so dat headaz produced by \fIpax\fP could be deciphered
even on systems dat do not use tha ISO/IEC\ 646:1991 standard as
a
subset of they base codeset.
.LP
.LP
Da use of \fB"**"\fP as a indication of continuation of a multi-byte
characta up in \fBc\fP specifier output was chosen
based on seein a implementation dat uses dis method. Y'all KNOW dat shit, muthafucka! Da continuation
bytes gotta be marked up in a way dat aint ambiguous
with another single-byte or multi-byte character.
.LP
An early proposal used \fB-S\fP n' \fB-n\fP, respectively, fo' the
\fB-j\fP n' \fB-N\fP options eventually selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. These
were chizzled ta avoid conflicts wit oldschool implementations.
.LP
Da original gangsta standard specified \fB-t o2\fP as tha default when no
output type was given. I aint talkin' bout chicken n' gravy biatch. This was chizzled ta \fB-t oS\fP (the
length of a \fBshort\fP) ta accommodate a supercomputa implementation
that historically used 64 bits as its default (and that
defined shorts as 64 bits). This chizzle should not affect conforming
applications. Da requirement ta support lengthz of 1, 2, and
4 was added all up in tha same time ta address a oldschool implementation
that had no two-byte data types up in its C compiler.
.LP
Da use of a funky-ass basic integer data type is intended ta allow tha implementation
to chizzle a word size commonly used by applications
on dat architecture.
.SH FUTURE DIRECTIONS
.LP
All option n' operand intercourses marked as extensions may be withdrawn
in a gangbangin' future version.
.SH SEE ALSO
.LP
\fIc99\fP, \fIsed\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
