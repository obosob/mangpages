.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "TR" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" tr 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
tr \- translate characters
.SH SYNOPSIS
.LP
\fBtr\fP \fB[\fP\fB-c | -C\fP\fB][\fP\fB-s]\fP \fIstring1 string2\fP\fB
.br
.sp
tr -s\fP \fB[\fP\fB-c | -C\fP\fB]\fP \fIstring1\fP\fB
.br
.sp
tr -d\fP \fB[\fP\fB-c | -C\fP\fB]\fP \fIstring1\fP\fB
.br
.sp
tr -ds\fP \fB[\fP\fB-c | -C\fP\fB]\fP \fIstring1 string2\fP\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fItr\fP utilitizzle shall copy tha standard input ta tha standard
output wit substitution or deletion of selected characters.
Da options specified n' tha \fIstring1\fP n' \fIstring2\fP operands
shall control translations dat occur while copying
charactas n' single-characta collatin elements.
.SH OPTIONS
.LP
Da \fItr\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-c\fP
Complement tha set of joints specified by \fIstring1\fP. Right back up in yo muthafuckin ass. See tha EXTENDED
DESCRIPTION section.
.TP 7
\fB-C\fP
Complement tha set of charactas specified by \fIstring1\fP. Right back up in yo muthafuckin ass. See the
EXTENDED DESCRIPTION section.
.TP 7
\fB-d\fP
Delete all occurrencez of input charactas dat is specified by \fIstring1\fP.
.TP 7
\fB-s\fP
Replace instancez of repeated charactas wit a single character,
as busted lyrics bout up in tha EXTENDED DESCRIPTION section.
.sp
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIstring1\fP,\ \fIstring2\fP
.sp
Translation control strings. Each strang shall represent a set of
charactas ta be converted tha fuck into a array of charactas used for
the translation. I aint talkin' bout chicken n' gravy biatch. For a thugged-out detailed description of how tha fuck tha strings are
interpreted, peep tha EXTENDED DESCRIPTION section.
.sp
.SH STDIN
.LP
Da standard input can be any type of file.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fItr\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of range expressions n' equivalence
classes.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments) n' tha behavior of
characta classes.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Da \fItr\fP output shall be identical ta tha input, wit tha exception
of tha specified transformations.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
Da operandz \fIstring1\fP n' \fIstring2\fP (if specified) define
two arrayz of characters. Da constructs up in tha following
list can be used ta specify charactas or single-characta collating
elements, n' you can put dat on yo' toast. If any of tha constructs result up in multi-character
collatin elements, \fItr\fP shall exclude, without a gangbangin' finger-lickin' diagnostic,
those multi-characta elements from tha resultin array.
.TP 7
\fIcharacter\fP
Any characta not busted lyrics bout by one of tha conventions below shall
represent itself.
.TP 7
\\\fIoctal\fP
Octal sequences can be used ta represent charactas wit specific
coded joints fo' realz. An octal sequence shall consist of a funky-ass backslash
followed by tha longest sequence of one, two, or three-octal-digit
charactas (01234567). Da sequence shall cause tha value whose
encodin is represented by tha one, two, or three-digit octal integer
to be placed tha fuck into tha array. If tha size of a funky-ass byte on the
system is pimped outa than nine bits, tha valid escape sequence used to
represent a funky-ass byte is implementation-defined. Y'all KNOW dat shit, muthafucka! Multi-byte
charactas require multiple, concatenated escape sequencez of this
type, includin tha leadin \fB'\\'\fP fo' each byte.
.TP 7
\\\fIcharacter\fP
Da backslash-escape sequences up in tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Table 5-1, Escape Sequences
and Associated Actions ( \fB'\\\\'\fP, \fB'\\a'\fP, \fB'\\b'\fP,
\fB'\\f'\fP, \fB'\\n'\fP, \fB'\\r'\fP,
\fB'\\t'\fP, \fB'\\v'\fP ) shall be supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da thangs up in dis biatch of using
any other character, other than a octal digit, following
the backslash is unspecified.
.TP 7
\fIc\fP-\fIc\fP
In tha POSIX locale, dis construct shall represent tha range of collating
elements between tha range endpoints (as long as
neither endpoint be a octal sequence of tha form \\\fIoctal\fP),
inclusive, as defined by tha collation sequence. Da characters
or collatin elements up in tha range shall be placed up in tha array in
ascendin collation sequence. If tha second endpoint precedes
the startin endpoint up in tha collation sequence, it is unspecified
whether tha range of collatin elements is empty, or this
construct is treated as invalid. Y'all KNOW dat shit, muthafucka! In localez other than tha POSIX locale,
this construct has unspecified behavior. Shiiit, dis aint no joke. 
.LP
If either or both of tha range endpoints is octal sequencez of the
form \\\fIoctal\fP, dis shall represent tha range of
specific coded joints between tha two range endpoints, inclusive.
.TP 7
.B :\fIclass\fP:
Represents all charactas belongin ta tha defined characta class,
as defined by tha current settin of tha \fILC_CTYPE\fP
locale category. Da followin characta class names shall be accepted
when specified up in \fIstring1\fP: 
.TS C
center; l l l l l l.
\fBalnum\fP	\fBblank\fP	\fBdigit\fP	\fBlower\fP	\fBpunct\fP	\fBupper\fP
\fBalpha\fP	\fBcntrl\fP	\fBgraph\fP	\fBprint\fP	\fBspace\fP	\fBxdigit\fP
.TE
.LP
In addition, characta class expressionz of tha form [: \fIname\fP:]
shall be recognized up in dem localez where tha \fIname\fP
keyword has been given a \fBcharclass\fP definizzle up in tha \fILC_CTYPE\fP
category. 
.LP
When both tha \fB-d\fP n' \fB-s\fP options is specified, any of
the characta class names shall be accepted in
\fIstring2\fP. Otherwise, only characta class names \fBlower\fP or
\fBupper\fP is valid up in \fIstring2\fP n' then only if the
correspondin characta class ( \fBupper\fP n' \fBlower\fP, respectively)
is specified up in tha same relatizzle posizzle in
\fIstring1\fP. Right back up in yo muthafuckin ass. Such a justification shall be interpreted as a request
for case conversion. I aint talkin' bout chicken n' gravy biatch. When [: \fIlower\fP:] appears in
\fIstring1\fP n' [: \fIupper\fP:] appears up in \fIstring2\fP, tha arrays
shall contain tha charactas from tha \fBtoupper\fP
mappin up in tha \fILC_CTYPE\fP category of tha current locale. When
[: \fIupper\fP:] appears up in \fIstring1\fP n' [:
\fIlower\fP:] appears up in \fIstring2\fP, tha arrays shall contain the
charactas from tha \fBtolower\fP mappin up in the
\fILC_CTYPE\fP category of tha current locale. Da first character
from each mappin pair shall be up in tha array fo' \fIstring1\fP
and tha second characta from each mappin pair shall be up in tha array
for \fIstring2\fP up in tha same relatizzle position.
.LP
Except fo' case conversion, tha charactas specified by a cold-ass lil character
class expression shall be placed up in tha array up in an
unspecified order.
.LP
If tha name specified fo' \fIclass\fP do not define a valid character
class up in tha current locale, tha behavior is
undefined.
.TP 7
.B =\fIequiv\fP=
Represents all charactas or collatin elements belongin ta tha same
equivalence class as \fIequiv\fP, as defined by the
current settin of tha \fILC_COLLATE\fP locale category fo' realz. An equivalence
class expression shall be allowed only up in \fIstring1\fP,
or up in \fIstring2\fP when it is bein used by tha combined \fB-d\fP
and \fB-s\fP options. Da charactas belongin ta the
equivalence class shall be placed up in tha array up in a unspecified order.
.TP 7
.B \fIx\fP*\fIn\fP
Represents \fIn\fP repeated occurrencez of tha characta \fIx\fP.
Because dis expression is used ta map multiple characters
to one, it is only valid when it occurs up in \fIstring2\fP. If \fIn\fP
is omitted or is zero, it shall be interpreted as large
enough ta extend tha \fIstring2\fP-based sequence ta tha length of
the \fIstring1\fP-based sequence. If \fIn\fP has a leading
zero, it shall be interpreted as a octal value. Otherwise, it shall
be interpreted as a thugged-out decimal value.
.sp
.LP
When tha \fB-d\fP option aint specified:
.IP " *" 3
Each input characta found up in tha array specified by \fIstring1\fP
shall be replaced by tha characta up in tha same relative
posizzle up in tha array specified by \fIstring2\fP. When tha array specified
by \fIstring2\fP is shorta dat tha one specified by
\fIstring1\fP, tha thangs up in dis biatch is unspecified.
.LP
.IP " *" 3
If tha \fB-C\fP option is specified, tha complementz of tha characters
specified by \fIstring1\fP (the set of all characters
in tha current characta set, as defined by tha current settin of
\fILC_CTYPE\fP,  except fo' dem straight-up specified up in the
\fIstring1\fP operand) shall be placed up in tha array up in ascendin collation
sequence, as defined by tha current settin of
\fILC_COLLATE\fP. 
.LP
.IP " *" 3
If tha \fB-c\fP option is specified, tha complement of tha joints
specified by \fIstring1\fP shall be placed up in tha array in
ascendin order by binary value.
.LP
.IP " *" 3
Because tha order up in which charactas specified by characta class
expressions or equivalence class expressions is undefined,
such expressions should only be used if tha intent is ta map several
charactas tha fuck into one fo' realz. An exception is case conversion, as
busted lyrics bout previously.
.LP
.LP
When tha \fB-d\fP option is specified:
.IP " *" 3
Input charactas found up in tha array specified by \fIstring1\fP shall
be deleted.
.LP
.IP " *" 3
When tha \fB-C\fP option is specified wit \fB-d\fP, all characters
except dem specified by \fIstring1\fP shall be deleted.
Da contentz of \fIstring2\fP is ignored, unless tha \fB-s\fP option
is also specified.
.LP
.IP " *" 3
When tha \fB-c\fP option is specified wit \fB-d\fP, all joints except
those specified by \fIstring1\fP shall be deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. The
contentz of \fIstring2\fP shall be ignored, unless tha \fB-s\fP option
is also specified.
.LP
.IP " *" 3
Da same strang cannot be used fo' both tha \fB-d\fP n' tha \fB-s\fP
option; when both options is specified, both
\fIstring1\fP (used fo' deletion) n' \fIstring2\fP (used fo' squeezing)
shall be required.
.LP
.LP
When tha \fB-s\fP option is specified, afta any deletions or translations
have taken place, repeated sequencez of tha same
characta shall be replaced by one occurrence of tha same character,
if tha characta is found up in tha array specified by tha last
operand. Y'all KNOW dat shit, muthafucka! If tha last operand gotz nuff a cold-ass lil characta class, like fuckin the
followin example:
.sp
.RS
.nf

\fBtr -s '[:space:]'
\fP
.fi
.RE
.LP
the last operandz array shall contain all of tha charactas up in that
characta class. But fuck dat shiznit yo, tha word on tha street is dat up in a cold-ass lil case conversion, as
busted lyrics bout previously, such as:
.sp
.RS
.nf

\fBtr -s '[:upper:]' '[:lower:]'
\fP
.fi
.RE
.LP
the last operandz array shall contain only dem charactas defined
as tha second charactas up in each of tha \fBtoupper\fP or
\fBtolower\fP characta pairs, as appropriate.
.LP
An empty strang used fo' \fIstring1\fP or \fIstring2\fP produces undefined
results.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
All input was processed successfully.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
If necessary, \fIstring1\fP n' \fIstring2\fP can be quoted ta avoid
pattern matchin by tha shell.
.LP
If a ordinary digit (representin itself) is ta follow a octal sequence,
the octal sequence must use tha full three digits to
avoid ambiguity.
.LP
When \fIstring2\fP is shorta than \fIstring1\fP, a gangbangin' finger-lickin' difference thangs up in dis biatch
between oldschool System\ V n' BSD systems fo' realz. A BSD
system padz \fIstring2\fP wit tha last characta found up in \fIstring2\fP.
Thus, it is possible ta do tha following:
.sp
.RS
.nf

\fBtr 0123456789 d
\fP
.fi
.RE
.LP
which would translate all digits ta tha letta \fB'd'\fP . Right back up in yo muthafuckin ass. Since this
area is specifically unspecified up in dis volume of
IEEE\ Std\ 1003.1-2001, both tha BSD n' System\ V behaviors is allowed,
but a cold-ass lil conformin application cannot rely on
the BSD behavior. Shiiit, dis aint no joke. Well shiiiit, it would gotta code tha example up in tha following
way:
.sp
.RS
.nf

\fBtr 0123456789 '[d*]'
\fP
.fi
.RE
.LP
It should be noted that, despite similaritizzles up in appearance, tha string
operandz used by \fItr\fP is not regular
expressions.
.LP
Unlike some oldschool implementations, dis definizzle of tha \fItr\fP
utilitizzle erectly processes NUL charactas up in its input
stream. NUL charactas can be stripped by using:
.sp
.RS
.nf

\fBtr -d '\\000'
\fP
.fi
.RE
.SH EXAMPLES
.IP " 1." 4
Da followin example creates a list of all lyrics up in \fBfile1\fP one
per line up in \fBfile2\fP, where a word is taken ta be a
maximal strang of letters.
.sp
.RS
.nf

\fBtr -cs "[:alpha:]" "[\\n*]" <file1 >file2
\fP
.fi
.RE
.LP
.IP " 2." 4
Da next example translates all lowercase charactas up in \fBfile1\fP
to uppercase n' writes tha thangs up in dis biatch ta standard output.
.sp
.RS
.nf

\fBtr "[:lower:]" "[:upper:]" <file1
\fP
.fi
.RE
.LP
.IP " 3." 4
This example uses a equivalence class ta identify accented variants
of tha base characta \fB'e'\fP up in \fBfile1\fP, which
are stripped of diacritical marks n' freestyled ta \fBfile2\fP.
.sp
.RS
.nf

\fBtr "[=e=]" e <file1 >file2
\fP
.fi
.RE
.LP
.SH RATIONALE
.LP
In some early proposals, a explicit option \fB-n\fP was added to
disable tha oldschool behavior of strippin NUL characters
from tha input. Dat shiznit was considered dat automatically strippin NUL
charactas from tha input was not erect functionality.
But fuck dat shiznit yo, tha word on tha street is dat tha removal of \fB-n\fP up in a lata proposal do not remove
the requirement dat \fItr\fP erectly process NUL
charactas up in its input stream. NUL charactas can be stripped by
usin \fItr\fP \fB-d\fP '\\000'.
.LP
Oldschool implementationz of \fItr\fP differ widely up in syntax and
behavior. Shiiit, dis aint no joke. For example, tha BSD version has not needed the
bracket charactas fo' tha repetizzle sequence. Da \fItr\fP utility
syntax is based mo' closely on tha System V n' XPG3 model
while attemptin ta accommodate oldschool BSD implementations. In
the case of tha short \fIstring2\fP padding, tha decision was
to unspecify tha behavior n' preserve System V n' XPG3 scripts,
which might find hang-up wit tha BSD method. Y'all KNOW dat shit, muthafucka! Da assumption
was made dat BSD playaz of \fItr\fP gotta make accommodations to
meet tha syntax defined here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Right back up in yo muthafuckin ass. Since it is possible ta use the
repetizzle sequence ta duplicate tha desired behavior, whereas there
is no simple way ta big up tha System V method, dis was the
correct, if not desirable, approach.
.LP
Da use of octal joints ta specify control characters, while having
historical precedents, aint portable. Da introduction of
escape sequences fo' control charactas should provide tha necessary
portability. Well shiiiit, it is recognized dat dis may cause some
historical scripts ta break.
.LP
An early proposal included support fo' multi-characta collatin elements.
Dat shiznit was pointed up that, while \fItr\fP do employ
some syntactical elements from REs, tha aim of \fItr\fP is like different;
ranges, fo' example, aint gots a similar meaning
(``any of tha chars up in tha range matches", \fIversus\fP "translate
each characta up in tha range ta tha output counterpart") fo' realz. As
a result, tha previously included support fo' multi-characta collating
elements has been removed. Y'all KNOW dat shit, muthafucka! What remains is ranges in
current collation order (to support, fo' example, accented characters),
characta classes, n' equivalence classes.
.LP
In XPG3 tha [: \fIclass\fP:] n' [= \fIequiv\fP=] conventions are
shown wit double brackets, as up in RE syntax yo. However,
\fItr\fP do not implement RE principles; it just borrows part of
the syntax. Consequently, [: \fIclass\fP:] n' [=
\fIequiv\fP=] should be regarded as syntactical elements on a par
with [ \fIx\fP* \fIn\fP], which aint a RE bracket
expression.
.LP
Da standard pimpers will consider chizzlez ta \fItr\fP dat allow
it ta translate charactas between different character
encodings, or they will consider providin a freshly smoked up utilitizzle ta accomplish
this.
.LP
On oldschool System V systems, a range expression requires enclosing
square-brackets, such as:
.sp
.RS
.nf

\fBtr '[a-z]' '[A-Z]'
\fP
.fi
.RE
.LP
But fuck dat shiznit yo, tha word on tha street is dat BSD-based systems did not require tha brackets, n' this
convention is used here ta avoid breakin big-ass numberz of BSD
scripts:
.sp
.RS
.nf

\fBtr a-z A-Z
\fP
.fi
.RE
.LP
Da precedin System V script will continue ta work cuz tha brackets,
treated as regular characters, is translated to
themselves. But fuck dat shiznit yo, tha word on tha street is dat any System V script dat relied on \fB"a-z"\fP
representin tha three charactas \fB'a'\fP,
\fB'-'\fP, n' \fB'z'\fP gotta be rewritten as \fB"az-"\fP .
.LP
Da ISO\ POSIX-2:1993 standard had a \fB-c\fP option dat behaved
similarly ta tha \fB-C\fP option yo, but did not supply
functionalitizzle equivalent ta tha \fB-c\fP option specified up in IEEE\ Std\ 1003.1-2001.
This meant dat oldschool practice
of bein able ta specify \fItr\fP \fB-d\fP\\200-\\377 (which would
delete all bytes wit tha top bit set) would have no effect
because, up in tha C locale, bytes wit tha joints octal 200 ta octal
377 is not characters.
.LP
Da earlier version also holla'd dat octal sequences referred ta collating
elements n' could be placed adjacent ta each other to
specify multi-byte characters. But fuck dat shiznit yo, tha word on tha street is dat dat shiznit was noted dat dis caused
ambiguitizzles cuz \fItr\fP would not be able ta tell
whether adjacent octal sequences was intendin ta specify multi-byte
charactas or multiple single byte characters.
IEEE\ Std\ 1003.1-2001 specifies dat octal sequences always refer
to single byte binary joints.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsed\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
