.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "DU" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" du 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
du \- estimate file space usage
.SH SYNOPSIS
.LP
\fBdu\fP \fB[\fP\fB-a | -s\fP\fB][\fP\fB-kx\fP\fB][\fP\fB-H | -L\fP\fB][\fP\fIfile\fP
\fB\&...\fP\fB]\fP\fB\fP
.SH DESCRIPTION
.LP
By default, tha \fIdu\fP utilitizzle shall write ta standard output the
size of tha file space allocated to, n' tha size of the
file space allocated ta each subdirectory of, tha file hierarchy rooted
in each of tha specified files. By default, when a symbolic
link is encountered on tha command line or up in tha file hierarchy,
\fIdu\fP shall count tha size of tha symbolic link (rather than
the file referenced by tha link), n' shall not follow tha link to
another portion of tha file hierarchy. Da size of tha file
space allocated ta a gangbangin' file of type directory shall be defined as the
sum total of space allocated ta all filez up in tha file hierarchy
rooted up in tha directory plus tha space allocated ta tha directory
itself.
.LP
When \fIdu\fP cannot \fIstat\fP() filez or \fIstat\fP() or read directories,
it shall report a error condizzle n' tha final exit status is
affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Filez wit multiple links shall be counted n' freestyled for
only one entry. Da directory entry dat is selected up in the
report is unspecified. Y'all KNOW dat shit, muthafucka! By default, file sizes shall be freestyled in
512-byte units, rounded up ta tha next 512-byte unit.
.SH OPTIONS
.LP
Da \fIdu\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-a\fP
In addizzle ta tha default output, report tha size of each file not
of type directory up in tha file hierarchy rooted up in the
specified file. Regardless of tha presence of tha \fB-a\fP option,
non-directories given as \fIfile\fP operandz shall always be
listed.
.TP 7
\fB-H\fP
If a symbolic link is specified on tha command line, \fIdu\fP shall
count tha size of tha file or file hierarchy referenced by
the link.
.TP 7
\fB-k\fP
Write tha filez sizes up in unitz of 1024 bytes, rather than tha default
512-byte units.
.TP 7
\fB-L\fP
If a symbolic link is specified on tha command line or encountered
durin tha traversal of a gangbangin' file hierarchy, \fIdu\fP shall
count tha size of tha file or file hierarchy referenced by tha link.
.TP 7
\fB-s\fP
Instead of tha default output, report only tha total sum fo' each
of tha specified files.
.TP 7
\fB-x\fP
When evaluatin file sizes, evaluate only dem filez dat have the
same thang as tha file specified by tha \fIfile\fP
operand.
.sp
.LP
Specifyin mo' than one of tha mutually-exclusive options \fB-H\fP
and \fB-L\fP shall not be considered a error. Shiiit, dis aint no joke. Da last
option specified shall determine tha behavior of tha utility.
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIfile\fP
Da pathname of a gangbangin' file whose size is ta be written. I aint talkin' bout chicken n' gravy biatch. If no \fIfile\fP
is specified, tha current directory shall be used.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIdu\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Da output from \fIdu\fP shall consist of tha amount of space allocated
to a gangbangin' file n' tha name of tha file, up in tha following
format:
.sp
.RS
.nf

\fB"%d %s\\n", <\fP\fIsize\fP\fB>, <\fP\fIpathname\fP\fB>
\fP
.fi
.RE
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH EXAMPLES
.LP
None.
.SH RATIONALE
.LP
Da use of 512-byte units is oldschool practice n' maintains compatibility
with \fIls\fP
and other utilitizzles up in dis volume of IEEE\ Std\ 1003.1-2001. This
does not mandate dat tha file system itself be based on
512-byte blocks. Da \fB-k\fP option was added as a cold-ass lil compromise measure.
Dat shiznit was agreed by tha standard pimpers dat 512 bytes
was tha dopest default unit cuz of its complete oldschool consistency
on System V (\fIversus\fP tha mixed 512/1024-byte usage
on BSD systems), n' dat a \fB-k\fP option ta switch ta 1024-byte
units was a phat compromise. Users whoz ass prefer tha 1024-byte
quantitizzle can easily alias \fIdu\fP ta \fIdu\fP \fB-k\fP without breaking
the nuff oldschool scripts relyin on tha 512-byte
units.
.LP
Da \fB-b\fP option was added ta a early proposal ta provide a resolution
to tha thang where System V n' BSD systems give
figures fo' file sizes up in \fIblocks\fP, which be a implementation-defined
concept. (In common usage, tha block size is 512 bytes
for System V n' 1024 bytes fo' BSD systems.) But fuck dat shiznit yo, tha word on tha street is dat \fB-b\fP was
lata deleted, since tha default was eventually decided as
512-byte units.
.LP
Oldschool file systems provided no way ta obtain exact figures for
the space allocation given ta files. There is two known
areaz of inaccuracies up in oldschool file systems: casez of \fIindirect
blocks\fP bein used by tha file system or \fIsparse\fP
filez yieldin incorrectly high joints fo' realz. An indirect block is space
used by tha file system up in tha storage of tha file yo, but that
need not be counted up in tha space allocated ta tha file fo' realz. A \fIsparse\fP
file is one up in which a \fIlseek\fP() call has been made ta a position
beyond tha end of tha file n' data has subsequently
been freestyled at dat point fo' realz. A file system need not allocate all the
intervenin zero-filled blocks ta such a gangbangin' file. Well shiiiit, it is up ta the
implementation ta define exactly how tha fuck accurate its methodz are.
.LP
Da \fB-a\fP n' \fB-s\fP options was mutually-exclusive up in tha original
version of \fIdu\fP. Da POSIX Shell n' Utilities
description is implied by tha language up in tha SVID where \fB-s\fP
is busted lyrics bout as causin "only tha grand total" ta be reported.
Some systems may produce output fo' \fB-sa\fP yo, but a Strictly Conforming
POSIX Shell n' Utilitizzles Application cannot use that
combination.
.LP
Da \fB-a\fP n' \fB-s\fP options was adopted from tha SVID except
that tha System V behavior of not listin non-directories
explicitly given as operands, unless tha \fB-a\fP option is specified,
was considered a funky-ass bug; tha BSD-based behavior (report for
all operands) is mandated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da default behavior of \fIdu\fP up in the
SVID wit regard ta reportin tha failure ta read filez (it
produces no lyrics) was considered counter-intuitive, n' thus it
was specified dat tha POSIX Shell n' Utilitizzles default
behavior shall be ta produce such lyrics. These lyrics can be
turned off wit shell redirection ta big up tha System V
behavior.
.LP
Da \fB-x\fP option is oldschool practice on recent BSD systems.
It has been adopted by dis volume of
IEEE\ Std\ 1003.1-2001 cuz there was no other oldschool method
of limitin tha \fIdu\fP search ta a single file
hierarchy. This limitation of tha search is necessary ta make it possible
to obtain file space usage shiznit on some gangbangin' file
system on which other file systems is mounted, without havin to
resort ta a lengthy \fIfind\fP n' \fIawk\fP script.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIls\fP, tha System Interfaces volume of IEEE\ Std\ 1003.1-2001,
\fIstat\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
