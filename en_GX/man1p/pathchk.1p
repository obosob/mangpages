.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PATHCHK" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pathchk 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pathchk \- check pathnames
.SH SYNOPSIS
.LP
\fBpathchk\fP \fB[\fP\fB-p\fP\fB]\fP \fIpathname\fP\fB...\fP
.SH DESCRIPTION
.LP
Da \fIpathchk\fP utilitizzle shall check dat one or mo' pathnames are
valid (that is, they could be used ta access or create a
file without causin syntax errors) n' portable (that is, no filename
truncation thangs up in dis biatch). Mo' extensive portabilitizzle checks are
provided by tha \fB-p\fP option.
.LP
By default, tha \fIpathchk\fP utilitizzle shall check each component of
each \fIpathname\fP operand based on tha underlyin file
system fo' realz. A diagnostic shall be freestyled fo' each \fIpathname\fP operand
that:
.IP " *" 3
Is longer than {PATH_MAX} bytes (see \fBPathname Variable Values\fP
in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 13, Headers, \fI<limits.h>\fP)
.LP
.IP " *" 3
Gotz Nuff any component longer than {NAME_MAX} bytes up in its containing
directory
.LP
.IP " *" 3
Gotz Nuff any component up in a gangbangin' finger-lickin' directory dat aint searchable
.LP
.IP " *" 3
Gotz Nuff any characta up in any component dat aint valid up in its containing
directory
.LP
.LP
Da format of tha diagnostic message aint specified yo, but shall indicate
the error detected n' tha corresponding
\fIpathname\fP operand.
.LP
It shall not be considered a error if one or mo' componentz of a
\fIpathname\fP operand do not exist as long as a gangbangin' file
matchin tha pathname specified by tha missin components could be
created dat do not violate any of tha checks specified
above.
.SH OPTIONS
.LP
Da \fIpathchk\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin option shall be supported:
.TP 7
\fB-p\fP
Instead of struttin checks based on tha underlyin file system,
write a gangbangin' finger-lickin' diagnostic fo' each \fIpathname\fP operand that: 
.RS
.IP " *" 3
Is longer than {_POSIX_PATH_MAX} bytes (see \fBMinimum Values\fP in
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 13, Headers, \fI<limits.h>\fP)
.LP
.IP " *" 3
Gotz Nuff any component longer than {_POSIX_NAME_MAX} bytes
.LP
.IP " *" 3
Gotz Nuff any characta up in any component dat aint up in tha portable
filename characta set
.LP
.RE
.sp
.SH OPERANDS
.LP
Da followin operand shall be supported:
.TP 7
\fIpathname\fP
A pathname ta be checked.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
None.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIpathchk\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
All \fIpathname\fP operandz passed all of tha checks.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da \fItest\fP utilitizzle can be used ta determine whether a given pathname
names a existing
file; it do not, however, give any indication of whether or not
any component of tha pathname was truncated up in a gangbangin' finger-lickin' directory where
the _POSIX_NO_TRUNC feature aint up in effect. Da \fIpathchk\fP utility
does not check fo' file existence; it performs checks to
determine whether a pathname do exist or could be pimped wit no
pathname component truncation.
.LP
Da \fInoclobber\fP option up in tha shell (see tha \fIset\fP special
built-in) can be used to
atomically create a gangbangin' file fo' realz. As wit all file creation semantics up in the
System Interfaces volume of IEEE\ Std\ 1003.1-2001, it
guarantees atomic creation yo, but still dependz on applications ta agree
on conventions n' cooperate on tha use of filez afta they
have been pimped.
.SH EXAMPLES
.LP
To verify dat all pathnames up in a imported data interchange archive
are legitimate n' unambiguous on tha current system:
.sp
.RS
.nf

\fBpax -f archive | sed -e '/ == .*/s///' | xargs pathchk
if [ $, biatch? -eq 0 ]
then
    pax -r -f archive
else
    echo Investigate problems before importin files.
    exit 1
fi
\fP
.fi
.RE
.LP
To verify dat all filez up in tha current directory hierarchy could
be moved ta any system conformin ta tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001 dat also supports tha \fIpax\fP
utility:
.sp
.RS
.nf

\fBfind . -print | xargs pathchk -p
if [ $, biatch? -eq 0 ]
then
    pax -w -f archive .
else
    echo Portable archive cannot be pimped.
    exit 1
fi
\fP
.fi
.RE
.LP
To verify dat a user-supplied pathname names a readable file and
that tha application can create a gangbangin' file extendin tha given
path without truncation n' without overwritin any existin file:
.sp
.RS
.nf

\fBcase $- in
    *C*)    reset="";;
    *)      reset="set +C"
            set -C;;
esac
test -r "$path" && pathchk "$path.out" &&
    rm "$path.out" > "$path.out"
if [ $, biatch? -ne 0 ]; then
    printf "%s: %s not found or %s.out fails \\
creation checks.\\n" $0 "$path" "$path"
    $reset    # Reset tha noclobber option up in case a trap
              # on EXIT dependz on dat shit.
    exit 1
fi
$reset
PROCESSING < "$path" > "$path.out"
\fP
.fi
.RE
.LP
Da followin assumptions is made up in dis example:
.IP " 1." 4
\fBPROCESSING\fP represents tha code dat is used by tha application
to use \fB$path\fP once it is verified that
\fB$path.out\fP works as intended.
.LP
.IP " 2." 4
Da state of tha \fInoclobber\fP option is unknown when dis code
is invoked n' should be set on exit ta tha state dat shiznit was in
when dis code was invoked. Y'all KNOW dat shit, muthafucka! (Da \fBreset\fP variable is used up in this
example ta restore tha initial state.)
.LP
.IP " 3." 4
Note tha usage of:
.sp
.RS
.nf

\fBrm "$path.out" > "$path.out"
\fP
.fi
.RE
.RS
.IP " a." 4
Da \fIpathchk\fP command has already verified, at dis point, that
\fB$path.out\fP aint truncated.
.LP
.IP " b." 4
With tha \fInoclobber\fP option set, tha shell verifies dat \fB$path.out\fP
does not already exist before invokin \fIrm\fP.
.LP
.IP " c." 4
If tha shell succeeded up in bustin \fB$path.out\fP, \fIrm\fP removes
it so dat the
application can create tha file again n' again n' again up in tha \fBPROCESSING\fP step.
.LP
.IP " d." 4
If tha \fBPROCESSING\fP step wants tha file ta exist already when
it is invoked, the:
.sp
.RS
.nf

\fBrm "$path.out" > "$path.out"
\fP
.fi
.RE
.LP
should be replaced with:
.sp
.RS
.nf

\fB> "$path.out"
\fP
.fi
.RE
.LP
which verifies dat tha file did not already exist yo, but leaves \fB$path.out\fP
in place fo' use by \fBPROCESSING\fP.
.LP
.RE
.LP
.SH RATIONALE
.LP
Da \fIpathchk\fP utilitizzle was freshly smoked up fo' tha ISO\ POSIX-2:1993 standard.
It, along wit tha \fIset\fP \fB-C\fP( \fInoclobber\fP) option added
to tha shell, replaces the
\fImktemp\fP, \fIvalidfnam\fP, n' \fIcreate\fP utilitizzles dat rocked up
in early proposals fo' realz. All of these utilitizzles was attempts
to solve nuff muthafuckin common problems:
.IP " *" 3
Verify tha validitizzle (for nuff muthafuckin different definitionz of "valid")
of a pathname supplied by a user, generated by an
application, or imported from a external source.
.LP
.IP " *" 3
Atomically create a gangbangin' file.
.LP
.IP " *" 3
Perform various strang handlin functions ta generate a temporary
filename.
.LP
.LP
Da \fIcreate\fP utility, included up in a early proposal, provided
checkin n' atomic creation up in a single invocation of the
utility; these is orthogonal thangs n' need not be grouped into
a single utility. Note dat tha \fInoclobber\fP option also
provides a way of bustin a lock fo' process synchronization; since
it serves up a atomic \fIcreate\fP, there is no race between
a test fo' existence n' tha followin creation if it did not exist.
.LP
Havin a gangbangin' function like \fItmpnam\fP() up in tha ISO\ C standard is blingin
in many
high-level languages. Da shell programmin language, however, has
built-in strang manipulation facilities, makin it straight-up easy as fuck  to
construct temporary filenames. Da names needed obviously depend on
the application yo, but is frequently of a gangbangin' form similar to:
.sp
.RS
.nf

\fB$TMPDIR/\fP\fIapplication_abbreviation\fP\fB$$.\fP\fIsuffix\fP
.fi
.RE
.LP
In cases where there is likely ta be contention fo' a given suffix,
a simple shell \fBfor\fP or \fBwhile\fP loop can be used
with tha shell \fInoclobber\fP option ta create a gangbangin' file without risk
of collisions, as long as applications tryin ta use tha same
filename name space is cooperatin on tha use of filez afta they
have been pimped.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIRedirection\fP, \fIset\fP, \fItest\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
