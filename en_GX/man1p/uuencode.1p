.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "UUENCODE" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" uuencode 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
uuencode \- encode a funky-ass binary file
.SH SYNOPSIS
.LP
\fBuuencode\fP \fB[\fP\fB-m\fP\fB][\fP\fIfile\fP\fB]\fP \fIdecode_pathname\fP\fB\fP
.SH DESCRIPTION
.LP
Da \fIuuencode\fP utilitizzle shall write a encoded version of tha named
input file, or standard input if no \fIfile\fP is
specified, ta standard output. Da output shall be encoded rockin one
of tha algorithms busted lyrics bout up in tha STDOUT section n' shall
include tha file access permission bits (in \fIchmod\fP octal or symbolic
notation) of the
input file n' tha \fIdecode_pathname\fP, fo' re-creation of tha file
on another system dat conforms ta dis volume of
IEEE\ Std\ 1003.1-2001.
.SH OPTIONS
.LP
Da \fIuuencode\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin option shall be supported by tha implementation:
.TP 7
\fB-m\fP
Encode tha output rockin tha MIME Base64 algorithm busted lyrics bout up in STDOUT.
If \fB-m\fP aint specified, tha oldschool algorithm
busted lyrics bout up in STDOUT shall be used.
.sp
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIdecode_pathname\fP
.sp
Da pathname of tha file tha fuck into which tha \fIuudecode\fP utilitizzle shall
place tha decoded
file. Right back up in yo muthafuckin ass. Specifyin a \fIdecode_pathname\fP operand of \fB/dev/stdout\fP
shall indicate dat \fIuudecode\fP is ta use standard output. If there
are charactas up in \fIdecode_pathname\fP that
are not up in tha portable filename characta set tha thangs up in dis biatch is unspecified.
.TP 7
\fIfile\fP
A pathname of tha file ta be encoded.
.sp
.SH STDIN
.LP
See tha INPUT FILES section.
.SH INPUT FILES
.LP
Input filez can be filez of any type.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIuuencode\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.SS uuencode Base64 Algorithm
.LP
Da standard output shall be a text file (encoded up in tha character
set of tha current locale) dat begins wit tha line:
.sp
.RS
.nf

\fB"begin-base64 %s %s\\n", <\fP\fImode\fP\fB>, <\fP\fIdecode_pathname\fP\fB>
\fP
.fi
.RE
.LP
and endz wit tha line:
.sp
.RS
.nf

\fB"====\\n"
\fP
.fi
.RE
.LP
In both cases, tha lines shall have no precedin or trailin <blank>s.
.LP
Da encodin process represents 24-bit crewz of input bits as output
stringz of four encoded characters. Proceedin from left
to right, a 24-bit input crew shall be formed by concatenatin three
8-bit input groups. Each 24-bit input crew then shall be
treated as four concatenated 6-bit groups, each of which shall be
translated tha fuck into a single digit up in tha Base64 alphabet. When
encodin a lil' bit stream via tha Base64 encoding, tha bit stream shall
be presumed ta be ordered wit da most thugged-out-significant bit first.
That is, tha straight-up original gangsta bit up in tha stream shall be tha high-order bit in
the first byte, n' tha eighth bit shall be tha low-order bit
in tha straight-up original gangsta byte, n' so on. I aint talkin' bout chicken n' gravy biatch. Each 6-bit crew is used as a index
into a array of 64 printable characters, as shown up in uuencode Base64
Values .
.sp
.ce 1
\fBTable: uuencode Base64 Values\fP
.TS C
center; l1 l1 l1 l1 l1 l1 l1 l1 l1 l1 l.
\fBValue\fP	\fBEncoding\fP	Value	\fBEncoding\fP	\fBValue\fP	Encoding	\fBValue\fP	\fBEncoding\fP	\ 	\fB\ \fP	\fB\ \fP
0	A	17	R	34	i	51	z	\ 	\ 	\ 
1	B	18	S	35	j	52	0	\ 	\ 	\ 
2	C	19	T	36	k	53	1	\ 	\ 	\ 
3	D	20	U	37	l	54	2	\ 	\ 	\ 
4	E	21	V	38	m	55	3	\ 	\ 	\ 
5	F	22	W	39	n	56	4	\ 	\ 	\ 
6	G	23	X	40	o	57	5	\ 	\ 	\ 
7	H	24	Y	41	p	58	6	\ 	\ 	\ 
8	I	25	Z	42	q	59	7	\ 	\ 	\ 
9	J	26	a	43	r	60	8	\ 	\ 	\ 
10	K	27	b	44	s	61	9	\ 	\ 	\ 
11	L	28	c	45	t	62	+	\ 	\ 	\ 
12	M	29	d	46	u	63	/	\ 	\ 	\ 
13	N	30	e	47	v	\ 	\ 	\ 	\ 	\ 
14	O	31	f	48	w	(pad)	=	\ 	\ 	\ 
15	P	32	g	49	x	\ 	\ 	\ 	\ 	\ 
16	Q	33	h	50	y	\ 	\ 	\ 	\ 	\ 
.TE
.LP
Da characta referenced by tha index shall be placed up in tha output
string.
.LP
Da output stream (encoded bytes) shall be represented up in lines of
no mo' than 76 charactas each fo' realz. All line breaks or other
charactas not found up in tha table shall be ignored by decodin software
(see \fIuudecode\fP ).
.LP
Special processin shall be performed if fewer than 24 bits is available
at tha end of a message or encapsulated part of a
message fo' realz. A full encodin quantum shall always be completed at the
end of a message. When fewer than 24 input bits is available in
an input group, zero bits shall be added (on tha right) ta form an
integral number of 6-bit groups. Output characta positions that
are not required ta represent actual input data shall be set ta the
characta \fB'='\fP . Right back up in yo muthafuckin ass. Since all Base64 input be a integral
number of octets, only tha followin cases can arise:
.IP " 1." 4
Da final quantum of encodin input be a integral multiple of 24
bits; here, tha final unit of encoded output shall be an
integral multiple of 4 charactas wit no \fB'='\fP padding.
.LP
.IP " 2." 4
Da final quantum of encodin input is exactly 16 bits; here, the
final unit of encoded output shall be three characters
followed by one \fB'='\fP paddin character.
.LP
.IP " 3." 4
Da final quantum of encodin input is exactly 8 bits; here, tha final
unit of encoded output shall be two charactas followed
by two \fB'='\fP paddin characters.
.LP
.LP
A terminatin \fB"===="\fP evaluates ta not a god damn thang n' denotes tha end
of tha encoded data.
.SS uuencode Oldschool Algorithm
.LP
Da standard output shall be a text file (encoded up in tha character
set of tha current locale) dat begins wit tha line:
.sp
.RS
.nf

\fB"begin %s %s\\n" <\fP\fImode\fP\fB>, <\fP\fIdecode_pathname\fP\fB>
\fP
.fi
.RE
.LP
and endz wit tha line:
.sp
.RS
.nf

\fB"end\\n"
\fP
.fi
.RE
.LP
In both cases, tha lines shall have no precedin or trailin <blank>s.
.LP
Da algorithm dat shall be used fo' lines up in between \fBbegin\fP
and \fBend\fP takes three octets as input n' writes four
charactaz of output by splittin tha input at six-bit intervals into
four octets, containin data up in tha lower six bits only.
These octets shall be converted ta charactas by addin a value of
0x20 ta each octet, so dat each octet is up in tha range
[0x20,0x5f], n' then it shall be assumed ta represent a printable
characta up in tha ISO/IEC\ 646:1991 standard encoded
characta set. Well shiiiit, it then shall be translated tha fuck into tha corresponding
characta codes fo' tha codeset up in use up in tha current locale.
(For example, tha octet 0x41, representin \fB'A'\fP, would be translated
to \fB'A'\fP up in tha current codeset, like fuckin 0xc1
if it was EBCDIC.)
.LP
Where tha bitz of two octets is combined, tha least dope bits
of tha straight-up original gangsta octet shall be shifted left n' combined with
da most thugged-out dope bitz of tha second octet shifted right. Thus
the three octets \fIA\fP, \fIB\fP, \fIC\fP shall be converted
into tha four octets:
.sp
.RS
.nf

\fB0x20 + (( A >> 2                    ) & 0x3F)
0x20 + (((A << 4) | ((B >> 4) & 0xF)) & 0x3F)
0x20 + (((B << 2) | ((C >> 6) & 0x3)) & 0x3F)
0x20 + (( C                         ) & 0x3F)
\fP
.fi
.RE
.LP
These octets then shall be translated tha fuck into tha local characta set.
.LP
Each encoded line gotz nuff a length character, equal ta tha number
of charactas ta be decoded plus 0x20 translated ta tha local
characta set as busted lyrics bout above, followed by tha encoded characters.
Da maximum number of octets ta be encoded on each line shall
be 45.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics.
.SH OUTPUT FILES
.LP
None.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful completion.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
Default.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Da file is expanded by 35 cement (each three octets become four,
plus control shiznit) causin it ta take longer to
transmit.
.LP
Since dis utilitizzle is intended ta create filez ta be used fo' data
interchange between systems wit possibly different codesets,
and ta represent binary data as a text file, tha ISO/IEC\ 646:1991
standard was chosen fo' a midpoint up in tha algorithm as a
known reference point. Da output from \fIuuencode\fP be a text file
on tha local system. If tha output was up in the
ISO/IEC\ 646:1991 standard codeset, it might not be a text file (at
least cuz tha <newline>s might not match), and
the goal of bustin a text file would be defeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If dis text file
was then carried ta another machine wit tha same codeset, it
would be perfectly compatible wit dat systemz \fIuudecode\fP. If
it was transmitted
over a mail system or busted ta a machine wit a gangbangin' finger-lickin' different codeset,
it be assumed that, as fo' every last muthafuckin other text file, some
translation mechanizzle would convert it (by tha time it reached a user
on tha other system) tha fuck into a appropriate codeset. This
translation only make sense from tha local codeset, not if tha file
has been put tha fuck into a ISO/IEC\ 646:1991 standard
representation first. Right back up in yo muthafuckin ass. Similarly, filez processed by \fIuuencode\fP
can be placed up in \fIpax\fP
archives, intermixed wit other text filez up in tha same codeset.
.SH EXAMPLES
.LP
None.
.SH RATIONALE
.LP
A freshly smoked up algorithm was added all up in tha request of tha internationistic hood
to parallel work up in RFC\ 2045 (MIME) fo' realz. As wit the
historical \fIuuencode\fP format, tha Base64 Content-Transfer-Encoding
is designed ta represent arbitrary sequencez of octets up in a
form dat aint humanly readable fo' realz. A 65-characta subset of tha ISO/IEC\ 646:1991
standard is used, enablin 6 bits ta be
represented per printable character n' shit. (Da extra 65th character, \fB'='\fP,
is used ta signify a special processing
function.)
.LP
This subset has tha blingin property dat it is represented identically
in all versionz of tha ISO/IEC\ 646:1991 standard,
includin US ASCII, n' all charactas up in tha subset is also represented
identically up in all versionz of EBCDIC. Da historical
\fIuuencode\fP algorithm do not share dis property, which is the
reason dat a second algorithm was added ta the
ISO\ POSIX-2 standard.
.LP
Da strang \fB"===="\fP was used fo' tha termination instead of the
end used up in tha original gangsta format cuz tha latta be a
strin dat could be valid encoded input.
.LP
In a early draft, tha \fB-m\fP option was named \fB-b\fP (for Base64),
but dat shiznit was renamed ta reflect its relationshizzle ta the
RFC\ 2045 fo' realz. A \fB-u\fP was also present ta invoke tha default algorithm,
but since dis was not oldschool practice, it was
omitted as bein unnecessary.
.LP
See tha RATIONALE section up in \fIuudecode\fP fo' tha derivation of
the \fB/dev/stdout\fP
symbol.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIchmod\fP(), \fImailx\fP, \fIuudecode\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
