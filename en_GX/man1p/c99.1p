.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "C99" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" c99 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
c99 \- compile standard C programs
.SH SYNOPSIS
.LP
\fBc99\fP \fB[\fP\fB-c\fP\fB][\fP\fB-D\fP
\fIname\fP\fB[\fP\fB=\fP\fIvalue\fP\fB]]\fP\fB...\fP\fB[\fP\fB-E\fP\fB][\fP\fB-g\fP\fB][\fP\fB-I\fP
\fIdirectory\fP\fB]\fP \fB...\fP \fB[\fP\fB-L\fP \fIdirectory\fP\fB]\fP\fB
.br
\ \ \ \ \ \  ...\fP \fB[\fP\fB-o\fP
\fIoutfile\fP\fB][\fP\fB-O\fP\fIoptlevel\fP\fB][\fP\fB-s\fP\fB][\fP\fB-U\fP
\fIname\fP\fB]\fP\fB...\fP
\fIoperand\fP \fB... \fP
.SH DESCRIPTION
.LP
Da \fIc99\fP utilitizzle be a intercourse ta tha standard C compilation
system; it shall accept source code conformin ta the
ISO\ C standard. Y'all KNOW dat shit, muthafucka! Da system conceptually consistz of a cold-ass lil compila and
link editor. Shiiit, dis aint no joke. Da filez referenced by \fIoperand\fPs shall
be compiled n' linked ta produce a executable file. (It be unspecified
whether tha linkin occurs entirely within tha operation
of \fIc99\fP; some implementations may produce objects dat is not
fully resolved until tha file is executed.)
.LP
If tha \fB-c\fP option is specified, fo' all pathname operandz of
the form \fIfile\fP \fB.c\fP, tha files:
.sp
.RS
.nf

\fB$(basename\fP \fIpathname\fP \fB.c).o
\fP
.fi
.RE
.LP
shall be pimped as tha result of successful compilation. I aint talkin' bout chicken n' gravy biatch. If tha \fB-c\fP
option aint specified, it is unspecified whether
such \fB.o\fP filez is pimped or deleted fo' tha \fIfile\fP \fB.c\fP
operands.
.LP
If there be no options dat prevent link editin (like fuckin \fB-c\fP
or \fB-E\fP), n' all operandz compile n' link without
error, tha resultin executable file shall be freestyled accordin to
the \fB-o\fP \fIoutfile\fP option (if present) or ta tha file
\fBa.out\fP.
.LP
Da executable file shall be pimped as specified up in \fIFile Read,
Write, and
Creation\fP, except dat tha file permission bits shall be set to:
.sp
.RS
.nf

S_IRWXO | S_IRWXG | S_IRWXU
.fi
.RE
.LP
and tha bits specified by tha \fIumask\fP of tha process shall be
cleared.
.SH OPTIONS
.LP
Da \fIc99\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines,
except that:
.IP " *" 3
Da \fB-l\fP \fIlibrary\fP operandz have tha format of options yo, but
their posizzle within a list of operandz affects tha order
in which libraries is searched.
.LP
.IP " *" 3
Da order of specifyin tha \fB-I\fP n' \fB-L\fP options is significant.
.LP
.IP " *" 3
Conformin applications shall specify each option separately; that
is, groupin option lettas (for example, \fB-cO\fP) need
not be recognized by all implementations.
.LP
.LP
Da followin options shall be supported:
.TP 7
\fB-c\fP
Suppress tha link-edit phase of tha compilation, n' do not remove
any object filez dat is produced.
.TP 7
\fB-g\fP
Produce symbolic shiznit up in tha object or executable files; the
nature of dis shiznit is unspecified, n' may be
modified by implementation-defined interactions wit other options.
.TP 7
\fB-s\fP
Produce object or executable files, or both, from which symbolic and
other shiznit not required fo' proper execution using
the \fIexec\fP crew defined up in tha System Interfaces volume of IEEE\ Std\ 1003.1-2001
has been removed (stripped). If
both \fB-g\fP n' \fB-s\fP options is present, tha action taken is
unspecified.
.TP 7
\fB-o\ \fP \fIoutfile\fP
Use tha pathname \fIoutfile\fP, instead of tha default \fBa.out\fP,
for tha executable file produced. Y'all KNOW dat shit, muthafucka! If tha \fB-o\fP option
is present wit \fB-c\fP or \fB-E\fP, tha result is unspecified.
.TP 7
\fB-D\ \fP \fIname\fP\fB[=\fP\fIvalue\fP\fB]\fP
.sp
Define \fIname\fP as if by a C-language \fB#define\fP directive. If
no = \fIvalue\fP is given, a value of 1 shall be used. Y'all KNOW dat shit, muthafucka! The
\fB-D\fP option has lower precedence than tha \fB-U\fP option. I aint talkin' bout chicken n' gravy biatch. That
is, if \fIname\fP is used up in both a \fB-U\fP n' a
\fB-D\fP option, \fIname\fP shall be undefined regardless of tha order
of tha options fo' realz. Additionizzle implementation-defined
\fIname\fPs may be provided by tha compila n' shit. Implementations shall
support at least 2048 bytez of \fB-D\fP definitions n' 256
\fInames\fP.
.TP 7
\fB-E\fP
Copy C-language source filez ta standard output, expandin all preprocessor
directives; no compilation shall be performed. Y'all KNOW dat shit, muthafucka! If
any operand aint a text file, tha effects is unspecified.
.TP 7
\fB-I\ \fP \fIdirectory\fP
Change tha algorithm fo' searchin fo' headaz whose names is not
absolute pathnames ta look up in tha directory named by the
\fIdirectory\fP pathname before lookin up in tha usual places. Thus,
headaz whose names is enclosed up in double-quotes ( \fB""\fP
) shall be searched fo' first up in tha directory of tha file wit the
\fB#include\fP line, then up in directories named up in \fB-I\fP
options, n' last up in tha usual places. For headaz whose names are
enclosed up in angle brackets ( \fB"<>"\fP ), tha header
shall be searched fo' only up in directories named up in \fB-I\fP options
and then up in tha usual places. Directories named up in \fB-I\fP
options shall be searched up in tha order specified. Y'all KNOW dat shit, muthafucka! Implementations
shall support at least ten instancez of dis option up in a single
\fIc99\fP command invocation.
.TP 7
\fB-L\ \fP \fIdirectory\fP
Change tha algorithm of searchin fo' tha libraries named up in tha \fB-l\fP
objects ta look up in tha directory named by the
\fIdirectory\fP pathname before lookin up in tha usual places. Directories
named up in \fB-L\fP options shall be searched up in tha order
specified. Y'all KNOW dat shit, muthafucka! Implementations shall support at least ten instances of
this option up in a single \fIc99\fP command invocation. I aint talkin' bout chicken n' gravy biatch. If a
directory specified by a \fB-L\fP option gotz nuff filez named \fBlibc.a\fP,
\fBlibm.a\fP, \fBlibl.a\fP, or \fBliby.a\fP, the
results is unspecified.
.TP 7
\fB-O\ \fP \fIoptlevel\fP
Specify tha level of code optimization. I aint talkin' bout chicken n' gravy biatch. If tha \fIoptlevel\fP option-argument
is tha digit \fB'0'\fP, all special code
optimizations shall be disabled. Y'all KNOW dat shit, muthafucka! If it is tha digit \fB'1'\fP, the
nature of tha optimization is unspecified. Y'all KNOW dat shit, muthafucka! If tha \fB-O\fP
option is omitted, tha nature of tha systemz default optimization
is unspecified. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is unspecified whether code generated up in the
presence of tha \fB-O\fP 0 option is tha same ol' dirty as dat generated when
\fB-O\fP is omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Other \fIoptlevel\fP joints may be
supported.
.TP 7
\fB-U\ \fP \fIname\fP
Remove any initial definizzle of \fIname\fP.
.sp
.LP
Multiple instancez of tha \fB-D\fP, \fB-I\fP, \fB-U\fP, n' \fB-L\fP
options can be specified.
.SH OPERANDS
.LP
An \fIoperand\fP is either up in tha form of a pathname or tha form \fB-l\fP
\fIlibrary\fP. Da application shall ensure dat at
least one operand of tha pathname form is specified. Y'all KNOW dat shit, muthafucka! Da following
operandz shall be supported:
.TP 7
\fIfile.\fP\fBc\fP
A C-language source file ta be compiled n' optionally linked. Y'all KNOW dat shit, muthafucka! The
application shall ensure dat tha operand iz of dis form if
the \fB-c\fP option is used.
.TP 7
\fIfile.\fP\fBa\fP
A library of object filez typically produced by tha \fIar\fP utility,
and passed directly
to tha link editor. Shiiit, dis aint no joke. Implementations may recognize implementation-defined
suffixes other than \fB.a\fP as denotin object file
libraries.
.TP 7
\fIfile.\fP\fBo\fP
An object file produced by \fIc99\fP \fB-c\fP n' passed directly
to tha link editor. Shiiit, dis aint no joke. Implementations may recognize
implementation-defined suffixes other than \fB.o\fP as denotin object
files.
.sp
.LP
Da processin of other filez is implementation-defined.
.TP 7
\fI-l\ library\fP
(Da letta ell.) Search tha library named: 
.sp
.RS
.nf

\fBlib\fP\fIlibrary\fP\fB.a
\fP
.fi
.RE
.LP
A library shall be searched when its name is encountered, so tha placement
of a \fB-l\fP operand is significant. Right back up in yo muthafuckin ass. Several
standard libraries can be specified up in dis manner, as busted lyrics bout in
the EXTENDED DESCRIPTION section. I aint talkin' bout chicken n' gravy biatch. Implementations may recognize
implementation-defined suffixes other than \fB.a\fP as denotin libraries.
.sp
.SH STDIN
.LP
Not used.
.SH INPUT FILES
.LP
Da input file shall be one of tha following: a text file containing
a C-language source program, a object file up in tha format
produced by \fIc99\fP \fB-c\fP, or a library of object files, up in the
format produced by archivin zero or mo' object files,
usin \fIar\fP. Implementations may supply additionizzle utilitizzles that
produce filez up in these
formats fo' realz. Additionizzle input file formats is implementation-defined.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fIc99\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files).
.TP 7
\fILC_MESSAGES\fP
Determine tha locale dat should be used ta affect tha format and
contentz of diagnostic lyrics freestyled ta standard
error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.TP 7
\fITMPDIR\fP
Provide a pathname dat should override tha default directory for
temporary files, if any.  On
XSI-conformin systems, provide a pathname dat shall override the
default directory fo' temporary files, if any. 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
If mo' than one \fIfile\fP operand endin up in \fB.c\fP (or possibly
other unspecified suffixes) is given, fo' each such
file:
.sp
.RS
.nf

\fB"%s:\\n", <\fP\fIfile\fP\fB>
\fP
.fi
.RE
.LP
may be written. I aint talkin' bout chicken n' gravy biatch. These lyrics, if written, shall precede tha processing
of each input file; they shall not be freestyled ta the
standard output if they is freestyled ta tha standard error, as busted lyrics about
in tha STDERR section.
.LP
If tha \fB-E\fP option is specified, tha standard output shall be
a text file dat represents tha thangs up in dis biatch of tha preprocessing
stage of tha language; it may contain extra shiznit appropriate
for subsequent compilation passes.
.SH STDERR
.LP
Da standard error shall be used only fo' diagnostic lyrics. If
more than one \fIfile\fP operand endin up in \fB.c\fP (or
possibly other unspecified suffixes) is given, fo' each such file:
.sp
.RS
.nf

\fB"%s:\\n", <\fP\fIfile\fP\fB>
\fP
.fi
.RE
.LP
may be freestyled ta allow identification of tha diagnostic n' warning
lyrics wit tha appropriate input file. These lyrics,
if written, shall precede tha processin of each input file; they
shall not be freestyled ta tha standard error if they is freestyled to
the standard output, as busted lyrics bout up in tha STDOUT section.
.LP
This utilitizzle may produce warnin lyrics bout certain conditions
that do not warrant returnin a error (non-zero) exit
value.
.SH OUTPUT FILES
.LP
Object filez or executable filez or both is produced up in unspecified
formats.
.SH EXTENDED DESCRIPTION
.SS Standard Libraries
.LP
Da \fIc99\fP utilitizzle shall recognize tha followin \fB-l\fP operands
for standard libraries:
.TP 7
\fB-l\ c\fP
This operand shall make visible all functions referenced up in tha System
Interfaces volume of IEEE\ Std\ 1003.1-2001,
with tha possible exception of dem functions listed as residing
in \fI<aio.h>\fP, \fI<arpa/inet.h>\fP, \fI<complex.h>\fP, \fI<fenv.h>\fP,
\fI<math.h>\fP, \fI<mqueue.h>\fP, \fI<netdb.h>\fP, \fI<netinet/in.h>\fP,
\fI<pthread.h>\fP, \fI<sched.h>\fP, \fI<semaphore.h>\fP, \fI<spawn.h>\fP,
\fI<sys/socket.h>\fP, \fIpthread_kill\fP(), n' \fIpthread_sigmask\fP()
in \fI<signal.h>\fP, \fI<trace.h>\fP, functions
marked as extensions other than as part of tha MF or MPR extensions
in \fI<sys/mman.h>\fP, functions marked as ADV up in \fI<fcntl.h>\fP,
and functions marked as CS, CPT, n' TMR up in \fI<time.h>\fP. This operand
shall not be required ta be present ta cause a search of this
library.
.TP 7
\fB-l\ l\fP
This operand shall make visible all functions required by tha C-language
output of \fIlex\fP dat is not made available all up in tha \fB-l\ c\fP
operand.
.TP 7
\fB-l\ pthread\fP
This operand shall make visible all functions referenced up in \fI<pthread.h>\fP
and \fIpthread_kill\fP() n' \fIpthread_sigmask\fP() referenced in
\fI<signal.h>\fP fo' realz. An implementation may search dis library up in the
absence of this
operand.
.TP 7
\fB-l\ m\fP
This operand shall make visible all functions referenced up in \fI<math.h>\fP,
\fI<complex.h>\fP, n' \fI<fenv.h>\fP fo' realz. An
implementation may search dis library up in tha absence of dis operand.
.TP 7
\fB-l\ rt\fP
This operand shall make visible all functions referenced up in \fI<aio.h>\fP,
\fI<mqueue.h>\fP, \fI<sched.h>\fP, \fI<semaphore.h>\fP, n' \fI<spawn.h>\fP,
functions marked as extensions other than as part of tha MF or MPR
extensions up in \fI<sys/mman.h>\fP, functions marked as ADV up in \fI<fcntl.h>\fP,
and functions marked as CS, CPT, n' TMR up in \fI<time.h>\fP fo' realz. An implementation
may search dis library up in tha absence of dis operand.
.TP 7
\fB-l\ trace\fP
This operand shall make visible all functions referenced up in \fI<trace.h>\fP.
An
implementation may search dis library up in tha absence of dis operand.
.TP 7
\fB-l\ xnet\fP
This operand make visible all functions referenced up in \fI<arpa/inet.h>\fP,
\fI<netdb.h>\fP, \fI<netinet/in.h>\fP, n' \fI<sys/socket.h>\fP fo' realz. An
implementation may search dis library up in tha absence of this
operand.
.TP 7
\fB-l\ y\fP
This operand shall make visible all functions required by tha C-language
output of \fIyacc\fP dat is not made available all up in tha \fB-l\ c\fP
operand.
.sp
.LP
In tha absence of options dat inhibit invocation of tha link editor,
like fuckin \fB-c\fP or \fB-E\fP, tha \fIc99\fP utility
shall cause tha equivalent of a \fB-l\ c\fP operand ta be passed to
the link editor as tha last \fB-l\fP operand, causin it
to be searched afta all other object filez n' libraries is loaded.
.LP
It be unspecified whether tha libraries \fBlibc.a\fP, \fBlibm.a\fP,
\fBlibrt.a\fP, \fBlibpthread.a\fP, \fBlibl.a\fP,
\fBliby.a\fP, or \fBlibxnet.a\fP exist as regular files. Da implementation
may accept as \fB-l\fP operandz namez of objects
that do not exist as regular files.
.SS External Symbols
.LP
Da C compila n' link editor shall support tha significizzle of external
symbols up ta a length of at least 31 bytes; the
action taken upon encounterin symbols exceedin tha implementation-defined
maximum symbol length is unspecified.
.LP
Da compila n' link editor shall support a minimum of 511 external
symbols per source or object file, n' a minimum of 4095
external symbols up in total. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. A diagnostic message shall be freestyled to
the standard output if tha implementation-defined limit is
exceeded; other actions is unspecified.
.SS Programmin Environments
.LP
All implementations shall support one of tha followin programming
environments as a thugged-out default. Implementations may support more
than one of tha followin programmin environments fo' realz. Applications can
use \fIsysconf\fP()
or \fIgetconf\fP ta determine which programmin environments is supported.
.br
.sp
.ce 1
\fBTable: Programmin Environments: Type Sizes\fP
.TS C
center; l2 l2 l2 l2 l.
\fBProgrammin Environment\fP	\fBBits in\fP	\fBBits in\fP	\fBBits in\fP	\fBBits in\fP
\fB\fIgetconf\fP Name\fP	\fBint\fP	\fBlong\fP	\fBpointer\fP	\fBoff_t\fP
_POSIX_V6_ILP32_OFF32	32	32	32	32
_POSIX_V6_ILP32_OFSTDG	32	32	32	>=64
_POSIX_V6_LP64_OFF64	32	64	64	64
_POSIX_V6_LPBIG_OFSTDG	>=32	>=64	>=64	>=64
.TE
.LP
All implementations shall support one or mo' environments where the
widthz of tha followin types is no pimped outa than tha width
of type \fBlong\fP:
\fBblksize_t\fP, \fBcc_t\fP, \fBmode_t\fP, \fBnfds_t\fP, \fBpid_t\fP,
\fBptrdiff_t\fP, \fBsize_t\fP,
\fBspeed_t\fP, \fBssize_t\fP, \fBsuseconds_t\fP, \fBtcflag_t\fP, \fBuseconds_t\fP,
\fBwchar_t\fP, \fBwint_t\fP
.LP
Da executable filez pimped when these environments is selected
shall be up in a proper format fo' execution by tha \fIexec\fP
family of functions. Each environment may be one of tha ones up in Programming
Environments: Type Sizes, or
it may be another environment. Da names fo' tha environments that
meet dis requirement shall be output by a \fIgetconf\fP command using
the _POSIX_V6_WIDTH_RESTRICTED_ENVS argument. If mo' than one
environment meets tha requirement, tha namez of all such environments
shall be output on separate lines fo' realz. Any of these names can
then be used up in a subsequent \fIgetconf\fP command ta obtain tha flags
specific ta that
environment wit tha followin suffixes added as appropriate:
.TP 7
_CFLAGS
To git tha C compila flags.
.TP 7
_LDFLAGS
To git tha linker/loader flags.
.TP 7
_LIBS
To git tha libraries.
.sp
.LP
This requirement may be removed up in a gangbangin' future version of IEEE\ Std\ 1003.1.
.LP
When dis utilitizzle processes a gangbangin' file containin a gangbangin' function called \fImain\fP(),
it shall be defined wit a return type equivalent
to \fBint\fP. Usin return from tha initial call ta \fImain\fP() shall
be equivalent (other than wit respect ta language scope
issues) ta callin \fIexit\fP() wit tha returned value. Reaching
the end of tha initial call
to \fImain\fP() shall be equivalent ta callin \fIexit\fP(0). The
implementation shall not declare a prototype fo' this
function.
.LP
Implementations provide configuration strings fo' C compila flags,
linker/loader flags, n' libraries fo' each supported
environment. When a application need ta bust a specific programming
environment rather than tha implementation default programming
environment while compiling, tha application shall first verify that
the implementation supports tha desired environment. If the
desired programmin environment is supported, tha application shall
then invoke \fIc99\fP wit tha appropriate C compila flags as
the first options fo' tha compile, tha appropriate linker/loader flags
afta any other options but before any operands, n' the
appropriate libraries all up in tha end of tha operands.
.LP
Conformin applications shall not attempt ta link together object
filez compiled fo' different programmin models fo' realz. Applications
shall also be aware dat binary data placed up in shared memory or in
filez might not be recognized by applications built fo' other
programmin models.
.br
.sp
.ce 1
\fBTable: Programmin Environments: \fIc99\fP n' \fIcc\fP Arguments\fP
.TS C
center; l1 l1 l.
\fBProgrammin Environment\fP	\fB\ \fP	\fB\fIc99\fP n' \fIcc\fP Arguments\fP
\fB\fIgetconf\fP Name\fP	\fBUse\fP	\fB\fIgetconf\fP Name\fP
_POSIX_V6_ILP32_OFF32	C Compila Flags	POSIX_V6_ILP32_OFF32_CFLAGS
\ 	Linker/Loader Flags	POSIX_V6_ILP32_OFF32_LDFLAGS
\ 	Libraries	POSIX_V6_ILP32_OFF32_LIBS
_POSIX_V6_ILP32_OFSTDG	C Compila Flags	POSIX_V6_ILP32_OFSTDG_CFLAGS
\ 	Linker/Loader Flags	POSIX_V6_ILP32_OFSTDG_LDFLAGS
\ 	Libraries	POSIX_V6_ILP32_OFSTDG_LIBS
_POSIX_V6_LP64_OFF64	C Compila Flags	POSIX_V6_LP64_OFF64_CFLAGS
\ 	Linker/Loader Flags	POSIX_V6_LP64_OFF64_LDFLAGS
\ 	Libraries	POSIX_V6_LP64_OFF64_LIBS
_POSIX_V6_LPBIG_OFSTDG	C Compila Flags	POSIX_V6_LPBIG_OFSTDG_CFLAGS
\ 	Linker/Loader Flags	POSIX_V6_LPBIG_OFSTDG_LDFLAGS
\ 	Libraries	POSIX_V6_LPBIG_OFSTDG_LIBS
.TE
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
Successful compilation or link edit.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
When \fIc99\fP encountas a cold-ass lil compilation error dat causes a object
file not ta be pimped, it shall write a gangbangin' finger-lickin' diagnostic to
standard error n' continue ta compile other source code operands,
but it shall not big-ass up tha link phase n' return a non-zero
exit status. If tha link edit is unsuccessful, a gangbangin' finger-lickin' diagnostic message
shall be freestyled ta standard error n' \fIc99\fP exits wit a
non-zero status fo' realz. A conformin application shall rely on tha exit status
of \fIc99\fP, rather than on tha existence or mode of the
executable file.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Since tha \fIc99\fP utilitizzle probably creates filez up in tha current directory
durin tha compilation process, it is typically
necessary ta run tha \fIc99\fP utilitizzle up in a gangbangin' finger-lickin' directory up in which a gangbangin' file
can be pimped.
.LP
On systems providin POSIX Conformizzle (see tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Chapta 2, Conformance), \fIc99\fP is required
only wit tha C-Language Development
option; XSI-conformant systems always provide \fIc99\fP.
.LP
Some oldschool implementations have pimped \fB.o\fP filez when \fB-c\fP
is not specified n' mo' than one source file is
given. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since dis area is left unspecified, tha application cannot
rely on \fB.o\fP filez bein pimped yo, but it also must be
prepared fo' any related \fB.o\fP filez dat already exist bein deleted
at tha completion of tha link edit.
.LP
Some oldschool implementations have permitted \fB-L\fP options to
be interspersed wit \fB-l\fP operandz on tha command line.
For a application ta compile consistently on systems dat do not
behave like this, it is necessary fo' a cold-ass lil conformin application to
supply all \fB-L\fP options before any of tha \fB-l\fP options.
.LP
There is tha possible implication dat if a user supplies versions
of tha standard functions (before they would be encountered
by a implicit \fB-l\ c\fP or explicit \fB-l\ m\fP), dat dem versions
would be used up in place of tha standard versions.
There is various reasons dis might not be legit (functions defined
as macros, manipulations fo' clean name space, n' so on), so
the existence of filez named up in tha same manner as tha standard libraries
within tha \fB-L\fP directories is explicitly stated to
produce unspecified behavior.
.LP
All of tha functions specified up in tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001 may be made visible by
implementations when tha Standard C Library is searched. Y'all KNOW dat shit, muthafucka! Conforming
applications must explicitly request searchin tha other
standard libraries when functions made visible by dem libraries
are used.
.SH EXAMPLES
.IP " 1." 4
Da followin usage example compilez \fBfoo.c\fP n' creates tha executable
file \fBfoo\fP:
.sp
.RS
.nf

\fBc99 -o foo foo.c
\fP
.fi
.RE
.LP
Da followin usage example compilez \fBfoo.c\fP n' creates tha object
file \fBfoo.o\fP:
.sp
.RS
.nf

\fBc99 -c foo.c
\fP
.fi
.RE
.LP
Da followin usage example compilez \fBfoo.c\fP n' creates tha executable
file \fBa.out\fP:
.sp
.RS
.nf

\fBc99 foo.c
\fP
.fi
.RE
.LP
Da followin usage example compilez \fBfoo.c\fP, links it wit \fBbar.o\fP,
and creates tha executable file \fBa.out\fP. It
may also create n' leave \fBfoo.o\fP:
.sp
.RS
.nf

\fBc99 foo.c bar.o
\fP
.fi
.RE
.LP
.IP " 2." 4
Da followin example shows how tha fuck a application rockin threadz intercourses
can test fo' support of n' bust a programming
environment supportin 32-bit \fBint\fP, \fBlong\fP, n' \fBpointer\fP
types n' a \fBoff_t\fP type rockin at least 64
bits:
.sp
.RS
.nf

\fBif [ $(getconf _POSIX_V6_ILP32_OFSTDG) != "-1" ]
then
    c99 $(getconf POSIX_V6_ILP32_OFSTDG_CFLAGS) -D_XOPEN_SOURCE=600 \\
        $(getconf POSIX_V6_ILP32_OFSTDG_LDFLAGS) foo.c -o foo \\
        $(getconf POSIX_V6_ILP32_OFSTDG_LIBS) -l pthread
else
    echo ILP32_OFSTDG programmin environment not supported
    exit 1
fi
\fP
.fi
.RE
.LP
.IP " 3." 4
Da followin examplez clarify tha use n' interactionz of \fB-L\fP
options n' \fB-l\fP operands.
.LP
Consider tha case up in which module \fBa.c\fP calls function \fIf\fP()
in library \fBlibQ.a\fP, n' module \fBb.c\fP calls
function \fIg\fP() up in library \fBlibp.a\fP fo' realz. Assume dat both libraries
reside up in \fB/a/b/c\fP. Da command line ta compile and
link up in tha desired way is:
.sp
.RS
.nf

\fBc99 -L /a/b/c main.o a.c -l Q b.c -l p
\fP
.fi
.RE
.LP
In dis case tha \fB-l\ Q\fP operand need only precede tha straight-up original gangsta \fB-l\ p\fP
operand, since both \fBlibQ.a\fP and
\fBlibp.a\fP reside up in tha same directory.
.LP
Multiple \fB-L\fP operandz can be used when library name collisions
occur. Shiiit, dis aint no joke. Buildin on tha previous example, suppose dat the
user wants ta bust a freshly smoked up \fBlibp.a\fP, up in \fB/a/a/a\fP yo, but still wants
\fIf\fP() from \fB/a/b/c/libQ.a\fP:
.sp
.RS
.nf

\fBc99 -L /a/a/a -L /a/b/c main.o a.c -l Q b.c -l p
\fP
.fi
.RE
.LP
In dis example, tha linker searches tha \fB-L\fP options up in tha order
specified, n' findz \fB/a/a/a/libp.a\fP before
\fB/a/b/c/libp.a\fP when resolvin references fo' \fBb.c\fP. Da order
of tha \fB-l\fP operandz is still blingin, however.
.LP
.IP " 4." 4
Da followin example shows how tha fuck a application can bust a programming
environment where tha widthz of tha followin types:
\fBblksize_t\fP, \fBcc_t\fP, \fBmode_t\fP, \fBnfds_t\fP, \fBpid_t\fP,
\fBptrdiff_t\fP, \fBsize_t\fP,
\fBspeed_t\fP, \fBssize_t\fP, \fBsuseconds_t\fP, \fBtcflag_t\fP, \fBuseconds_t\fP,
\fBwchar_t\fP, \fBwint_t\fP
.LP
are no pimped outa than tha width of type \fBlong\fP:
.sp
.RS
.nf

\fB# First chizzle one of tha listed environments ...
.sp

# ... if there be no additionizzle constraints, tha straight-up original gangsta one will do:
CENV=$(getconf _POSIX_V6_WIDTH_RESTRICTED_ENVS | head -n l)
.sp

# ... or, if a environment dat supports big-ass filez is preferred,
# look fo' names dat contain "OFF64" or "OFSTDG". (This chizzles
# tha last one up in tha list if none match.)
for CENV up in $(getconf _POSIX_V6_WIDTH_RESTRICTED_ENVS)
do
    case $CENV in
    *OFF64*|*OFSTDG*) break ;;
    esac
done
.sp

# Da chosen environment name can now be used like this:
.sp

c99 $(getconf ${CENV}_CFLAGS) -D _POSIX_C_SOURCE=200112L \\
$(getconf ${CENV}_LDFLAGS) foo.c -o foo \\
$(getconf ${CENV}_LIBS)
\fP
.fi
.RE
.LP
.SH RATIONALE
.LP
Da \fIc99\fP utilitizzle is based on tha \fIc89\fP utilitizzle originally
introduced up in tha ISO\ POSIX-2:1993 standard.
.LP
Some of tha chizzlez from \fIc89\fP include tha modification ta the
contentz of tha Standard Libraries section ta account for
new headaz n' options; fo' example, \fI<spawn.h>\fP added ta the
\fB-l\ rt\fP
operand, n' tha \fB-l\fP trace operand added fo' tha Tracin functions.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIFile Read, Write, n' Creation\fP, \fIar\fP, \fIgetconf\fP,
\fImake\fP, \fInm\fP, \fIstrip\fP, \fIumask\fP(), tha System Interfaces
volume of
IEEE\ Std\ 1003.1-2001, \fIexec\fP, \fIsysconf\fP(), tha Base Definitions
volume
of IEEE\ Std\ 1003.1-2001, Chapta 13, Headers
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
