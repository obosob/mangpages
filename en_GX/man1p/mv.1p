.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MV" 1P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mv 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mv \- move files
.SH SYNOPSIS
.LP
\fBmv\fP \fB[\fP\fB-fi\fP\fB]\fP \fIsource_file target_file\fP\fB
.br
.sp
mv\fP \fB[\fP\fB-fi\fP\fB]\fP \fIsource_file\fP\fB...\fP \fItarget_file\fP\fB
.br
\fP
.SH DESCRIPTION
.LP
In tha straight-up original gangsta synopsis form, tha \fImv\fP utilitizzle shall move tha file
named by tha \fIsource_file\fP operand ta tha destination
specified by tha \fItarget_file\fP. This first synopsis form be assumed
when tha final operand do not name a existin directory
and aint a symbolic link referrin ta a existin directory.
.LP
In tha second synopsis form, \fImv\fP shall move each file named by
a \fIsource_file\fP operand ta a thugged-out destination file up in the
existin directory named by tha \fItarget_dir\fP operand, or referenced
if \fItarget_dir\fP be a symbolic link referrin ta an
existin directory. Da destination path fo' each \fIsource_file\fP
shall be tha concatenation of tha target directory, a single
slash character, n' tha last pathname component of tha \fIsource_file\fP.
This second form be assumed when tha final operand
names a existin directory.
.LP
If any operand specifies a existin file of a type not specified
by tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001, tha behavior is implementation-defined.
.LP
For each \fIsource_file\fP tha followin steps shall be taken:
.IP " 1." 4
If tha destination path exists, tha \fB-f\fP option aint specified,
and either of tha followin conditions is true:
.RS
.IP " a." 4
Da permissionz of tha destination path do not permit freestylin and
the standard input be a terminal.
.LP
.IP " b." 4
Da \fB-i\fP option is specified.
.LP
.RE
.LP
the \fImv\fP utilitizzle shall write a prompt ta standard error n' read
a line from standard input. If tha response is not
affirmative, \fImv\fP shall do not a god damn thang mo' wit tha current \fIsource_file\fP
and go on ta any remaining
\fIsource_file\fPs.
.LP
.IP " 2." 4
Da \fImv\fP utilitizzle shall big-ass up actions equivalent ta tha \fIrename\fP()
function
defined up in tha System Interfaces volume of IEEE\ Std\ 1003.1-2001,
called wit tha followin arguments:
.RS
.IP " a." 4
Da \fIsource_file\fP operand is used as tha \fIold\fP argument.
.LP
.IP " b." 4
Da destination path is used as tha \fInew\fP argument.
.LP
.RE
.LP
If dis succeeds, \fImv\fP shall do not a god damn thang mo' wit tha current
\fIsource_file\fP n' go on ta any remaining
\fIsource_file\fPs. If dis fails fo' any reasons other than them
busted lyrics bout fo' tha \fIerrno\fP [EXDEV] up in tha System Interfaces
volume of IEEE\ Std\ 1003.1-2001, \fImv\fP shall write a gangbangin' finger-lickin' diagnostic
message ta standard error, do not a god damn thang mo' wit the
current \fIsource_file\fP, n' go on ta any remainin \fIsource_file\fPs.
.LP
.IP " 3." 4
If tha destination path exists, n' it aint nuthin but a gangbangin' file of type directory
and \fIsource_file\fP aint a gangbangin' file of type directory, or it
is a gangbangin' file not of type directory n' \fIsource_file\fP be a gangbangin' file of
type directory, \fImv\fP shall write a gangbangin' finger-lickin' diagnostic message to
standard error, do not a god damn thang mo' wit tha current \fIsource_file\fP,
and go on ta any remainin \fIsource_file\fPs.
.LP
.IP " 4." 4
If tha destination path exists, \fImv\fP shall attempt ta remove dat shit.
If dis fails fo' any reason, \fImv\fP shall write a
diagnostic message ta standard error, do not a god damn thang mo' wit tha current
\fIsource_file\fP, n' go on ta any remaining
\fIsource_file\fPs.
.LP
.IP " 5." 4
Da file hierarchy rooted up in \fIsource_file\fP shall be duplicated
as a gangbangin' file hierarchy rooted up in tha destination path. If
\fIsource_file\fP or any of tha filez below it up in tha hierarchy are
symbolic links, tha links theyselves shall be duplicated,
includin they contents, rather than any filez ta which they refer.
Da followin characteristics of each file up in tha file
hierarchy shall be duplicated:
.RS
.IP " *" 3
Da time of last data modification n' time of last access
.LP
.IP " *" 3
Da user ID n' crew ID
.LP
.IP " *" 3
Da file mode
.LP
.RE
.LP
If tha user ID, crew ID, or file mode of a regular file cannot be
duplicated, tha file mode bits S_ISUID n' S_ISGID shall not
be duplicated.
.LP
When filez is duplicated ta another file system, tha implementation
may require dat tha process invokin \fImv\fP has read
access ta each file bein duplicated.
.LP
If tha duplication of tha file hierarchy fails fo' any reason, \fImv\fP
shall write a gangbangin' finger-lickin' diagnostic message ta standard error, do
nothang mo' wit tha current \fIsource_file\fP, n' go on ta any
remainin \fIsource_file\fPs.
.LP
If tha duplication of tha file characteristics fails fo' any reason,
\fImv\fP shall write a gangbangin' finger-lickin' diagnostic message ta standard
error yo, but dis failure shall not cause \fImv\fP ta modify its exit
status.
.LP
.IP " 6." 4
Da file hierarchy rooted up in \fIsource_file\fP shall be removed. Y'all KNOW dat shit, muthafucka! If
this fails fo' any reason, \fImv\fP shall write a
diagnostic message ta tha standard error, do not a god damn thang mo' wit the
current \fIsource_file\fP, n' go on ta any remaining
\fIsource_file\fPs.
.LP
.SH OPTIONS
.LP
Da \fImv\fP utilitizzle shall conform ta tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, Section 12.2, Utilitizzle Syntax Guidelines.
.LP
Da followin options shall be supported:
.TP 7
\fB-f\fP
Do not prompt fo' confirmation if tha destination path exists fo' realz. Any
previous occurrence of tha \fB-i\fP option is ignored.
.TP 7
\fB-i\fP
Prompt fo' confirmation if tha destination path exists fo' realz. Any previous
occurrence of tha \fB-f\fP option is ignored.
.sp
.LP
Specifyin mo' than one of tha \fB-f\fP or \fB-i\fP options shall
not be considered a error. Shiiit, dis aint no joke. Da last option specified shall
determine tha behavior of \fImv\fP.
.SH OPERANDS
.LP
Da followin operandz shall be supported:
.TP 7
\fIsource_file\fP
A pathname of a gangbangin' file or directory ta be moved.
.TP 7
\fItarget_file\fP
A freshly smoked up pathname fo' tha file or directory bein moved.
.TP 7
\fItarget_dir\fP
A pathname of a existin directory tha fuck into which ta move tha input files.
.sp
.SH STDIN
.LP
Da standard input shall be used ta read a input line up in response
to each prompt specified up in tha STDERR section. I aint talkin' bout chicken n' gravy biatch. Otherwise,
the standard input shall not be used.
.SH INPUT FILES
.LP
Da input filez specified by each \fIsource_file\fP operand can be
of any file type.
.SH ENVIRONMENT VARIABLES
.LP
Da followin environment variablez shall affect tha execution of
\fImv\fP:
.TP 7
\fILANG\fP
Provide a thugged-out default value fo' tha internationalization variablez that
are unset or null. (See tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 8.2, Internationalization Variables
for
the precedence of internationalization variablez used ta determine
the jointz of locale categories.)
.TP 7
\fILC_ALL\fP
If set ta a non-empty strang value, override tha jointz of all the
other internationalization variables.
.TP 7
\fILC_COLLATE\fP
.sp
Determine tha locale fo' tha behavior of ranges, equivalence classes,
and multi-characta collatin elements used up in tha extended
regular expression defined fo' tha \fByesexpr\fP locale keyword in
the \fILC_MESSAGES\fP category.
.TP 7
\fILC_CTYPE\fP
Determine tha locale fo' tha interpretation of sequencez of bytes
of text data as charactas (for example, single-byte as
opposed ta multi-byte charactas up in arguments n' input files), the
behavior of characta classes used up in tha extended regular
expression defined fo' tha \fByesexpr\fP locale keyword up in tha \fILC_MESSAGES\fP
category.
.TP 7
\fILC_MESSAGES\fP
Determine tha locale fo' tha processin of affirmatizzle responses that
should be used ta affect tha format n' contents of
diagnostic lyrics freestyled ta standard error.
.TP 7
\fINLSPATH\fP
Determine tha location of message catalogs fo' tha processin of \fILC_MESSAGES
\&.\fP 
.sp
.SH ASYNCHRONOUS EVENTS
.LP
Default.
.SH STDOUT
.LP
Not used.
.SH STDERR
.LP
Prompts shall be freestyled ta tha standard error under tha conditions
specified up in tha DESCRIPTION section. I aint talkin' bout chicken n' gravy biatch. Da prompts shall
contain tha destination pathname yo, but they format is otherwise unspecified.
Otherwise, tha standard error shall be used only for
diagnostic lyrics.
.SH OUTPUT FILES
.LP
Da output filez may be of any file type.
.SH EXTENDED DESCRIPTION
.LP
None.
.SH EXIT STATUS
.LP
Da followin exit joints shall be returned:
.TP 7
\ 0
All input filez was moved successfully.
.TP 7
>0
An error occurred.
.sp
.SH CONSEQUENCES OF ERRORS
.LP
If tha copyin or removal of \fIsource_file\fP is prematurely terminated
by a signal or error, \fImv\fP may leave a partial
copy of \fIsource_file\fP all up in tha source or destination. I aint talkin' bout chicken n' gravy biatch. Da \fImv\fP
utilitizzle shall not modify both \fIsource_file\fP n' the
destination path simultaneously; termination at any point shall leave
either \fIsource_file\fP or tha destination path
complete.
.LP
\fIDa followin sections is informative.\fP
.SH APPLICATION USAGE
.LP
Some implementations mark fo' update tha \fIst_ctime\fP field of renamed
filez n' some do not fo' realz. Applications which make use of
the \fIst_ctime\fP field may behave differently wit respect ta renamed
filez unless they is designed ta allow fo' either
behavior.
.SH EXAMPLES
.LP
If tha current directory gotz nuff only filez \fBa\fP (of any type
defined by tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001), \fBb\fP (also of any type), n' a gangbangin' finger-lickin' directory
\fBc\fP:
.sp
.RS
.nf

\fBmv a funky-ass b c
mv c d
\fP
.fi
.RE
.LP
results wit tha original gangsta filez \fBa\fP n' \fBb\fP residin up in the
directory \fBd\fP up in tha current directory.
.SH RATIONALE
.LP
Early proposals diverged from tha SVID n' BSD oldschool practice
in dat they required dat when tha destination path exists,
the \fB-f\fP option aint specified, n' input aint a terminal,
\fImv\fP fails. This was done fo' compatibilitizzle wit \fIcp\fP. The
current text returns ta oldschool practice. Well shiiiit, it should be noted that
this is consistent
with tha \fIrename\fP() function defined up in tha System Interfaces
volume of
IEEE\ Std\ 1003.1-2001, which do not require write permission on
the target.
.LP
For absolute clarity, paragraph (1), describin tha behavior of \fImv\fP
when promptin fo' confirmation, should be interpreted
in tha followin manner:
.sp
.RS
.nf

\fBif (exists AND (NOT f_option) AND
    ((not_writable AND input_is_terminal) OR i_option))
\fP
.fi
.RE
.LP
Da \fB-i\fP option exists on BSD systems, givin applications and
users a way ta avoid accidentally unlinkin filez when
movin others. When tha standard input aint a terminal, tha 4.3
BSD \fImv\fP deletes all existin destination paths without
prompting, even when \fB-i\fP is specified; dis is inconsistent with
the behavior of tha 4.3 BSD \fIcp\fP utility, which always generates
an error when tha file is unwritable n' tha standard input is
not a terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da standard pimpers decided dat use of \fB-i\fP
is a request fo' interaction, so when tha destination path
exists, tha utilitizzle takes instructions from whatever respondz ta standard
input.
.LP
Da \fIrename\fP() function be able ta move directories within the
same file system.
Some oldschool versionz of \fImv\fP done been able ta move directories,
but not ta a gangbangin' finger-lickin' different file system. Da standard
developers considered dat dis was a buggin inconsistency, so
this volume of IEEE\ Std\ 1003.1-2001 requires
directories ta be able ta be moved even across file systems. There
is no \fB-R\fP option ta confirm dat movin a gangbangin' finger-lickin' directory is
actually intended, since such a option was not required fo' moving
directories up in oldschool practice. Requirin tha application
to specify it sometimes, dependin on tha destination, seemed just
as inconsistent. Da semantics of tha \fIrename\fP() function were
preserved as much as possible. For example, \fImv\fP aint permitted
to "rename" filez ta or from directories, even though they might be
empty n' removable.
.LP
Historic implementationz of \fImv\fP did not exit wit a non-zero
exit status if they was unable ta duplicate any file
characteristics when movin a gangbangin' file across file systems, nor did they
write a gangbangin' finger-lickin' diagnostic message fo' tha user n' shit. Da forma behavior
has been preserved ta prevent scripts from breaking; a gangbangin' finger-lickin' diagnostic
message is now required, however, so dat playas is alerted that
the file characteristics have chizzled.
.LP
Da exact format of tha interactizzle prompts is unspecified. Y'all KNOW dat shit, muthafucka! Only the
general nature of tha contentz of prompts is specified
because implementations may desire mo' descriptizzle prompts than them
used on oldschool implementations. Therefore, an
application not rockin tha \fB-f\fP option or rockin tha \fB-i\fP option
relies on tha system ta provide da most thugged-out suitable dialog
directly wit tha user, based on tha behavior specified.
.LP
When \fImv\fP is dealin wit a single file system n' \fIsource_file\fP
is a symbolic link, tha link itself is moved as a
consequence of tha dependence on tha \fIrename\fP() functionality,
per tha DESCRIPTION.
Across file systems, dis has ta be made explicit.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIcp\fP, \fIln\fP, tha System Interfaces volume of
IEEE\ Std\ 1003.1-2001, \fIrename\fP()
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
