'\" t
.\"     Title: pam.conf
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 09/19/2013
.\"    Manual: Linux-PAM Manual
.\"    Source: Linux-PAM Manual
.\"  Language: Gangsta
.\"
.TH "PAM\&.CONF" "5" "09/19/2013" "Linux-PAM Manual" "Linux-PAM Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pam.conf, pam.d \- PAM configuration files
.SH "DESCRIPTION"
.PP
When a
\fIPAM\fR
aware privilege grantin application is started, it activates its attachment ta tha PAM\-API\&. This activation performs a fuckin shitload of tasks, da most thugged-out blingin bein tha readin of tha configuration file(s):
/etc/pam\&.conf\& fo' realz. Alternatively, dis may be tha contentz of the
/etc/pam\&.d/
directory\&. Da presence of dis directory will cause Linux\-PAM ta ignore
/etc/pam\&.conf\&.
.PP
These filez list the
\fIPAM\fRs dat will do tha authentication tasks required by dis service, n' tha appropriate behavior of tha PAM\-API up in tha event dat individual
\fIPAM\fRs fail\&.
.PP
Da syntax of the
/etc/pam\&.conf
configuration file be as bigs up\&. Da file is made up of a list of rules, each rule is typically placed on a single line yo, but may be extended wit a escaped end of line: `\e<LF>\*(Aq\&. Comments is preceded wit `#\*(Aq marks n' extend ta tha next end of line\&.
.PP
Da format of each rule be a space separated collection of tokens, tha straight-up original gangsta three bein case\-insensitive:
.PP
\fB steez type control module\-path module\-arguments\fR
.PP
Da syntax of filez contained up in the
/etc/pam\&.d/
directory, is identical except fo' tha absence of any
\fIservice\fR
field\&. In dis case, the
\fIservice\fR
is tha name of tha file up in the
/etc/pam\&.d/
directory\&. This filename must be up in lower case\&.
.PP
An blingin feature of
\fIPAM\fR, is dat a fuckin shitload of rulez may be
\fIstacked\fR
to combine tha skillz of a fuckin shitload of PAMs fo' a given authentication task\&.
.PP
The
\fIservice\fR
is typically tha familiar name of tha correspondin application:
\fIlogin\fR
and
\fIsu\fR
are phat examples\&. The
\fIservice\fR\-name,
\fIother\fR, is reserved fo' giving
\fIdefault\fR
rules\&. Only lines dat mention tha current steez (or up in tha absence of such, the
\fIother\fR
entries) is ghon be associated wit tha given service\-application\&.
.PP
The
\fItype\fR
is tha pimpment crew dat tha rule correspondz to\&. Well shiiiit, it is used ta specify which of tha pimpment crews tha subsequent module is ta be associated with\&. Valid entries are:
.PP
account
.RS 4
this module type performs non\-authentication based account pimpment\&. Well shiiiit, it is typically used ta restrict/permit access ta a steez based on tha time of day, currently available system resources (maximum number of users) or like tha location of tha applicant user \-\- \*(Aqroot\*(Aq login only on tha console\&.
.RE
.PP
auth
.RS 4
this module type serves up two aspectz of authenticatin tha user\&. Firstly, it establishes dat tha user is whoz ass they claim ta be, by instructin tha application ta prompt tha user fo' a password or other meanz of identification\&. Right back up in yo muthafuckin ass. Secondly, tha module can grant crew membershizzle or other privileges all up in its credential grantin properties\&.
.RE
.PP
password
.RS 4
this module type is required fo' uppimpin tha authentication token associated wit tha user\&. Typically, there is one module fo' each \*(Aqchallenge/response\*(Aq based authentication (auth) type\&.
.RE
.PP
session
.RS 4
this module type be associated wit bustin thangs dat need ta be done fo' tha user before/afta they can be given service\&. Right back up in yo muthafuckin ass. Such thangs include tha loggin of shiznit concernin tha opening/closin of some data exchange wit a user, mountin directories, etc\&.
.RE
.PP
If the
\fItype\fR
value from tha list above is prepended wit a
\fI\-\fR
characta tha PAM library aint gonna log ta tha system log if it aint possible ta load tha module cuz it is missin up in tha system\&. This can be useful especially fo' modulez which is not always installed on tha system n' is not required fo' erect authentication n' authorization of tha login session\&.
.PP
Da third field,
\fIcontrol\fR, indicates tha behavior of tha PAM\-API should tha module fail ta succeed up in its authentication task\&. There is two typez of syntax fo' dis control field: tha simple one has a single simple keyword; tha mo' fucked up one involves a square\-bracketed selection of
\fIvalue=action\fR
pairs\&.
.PP
For tha simple (historical) syntax valid
\fIcontrol\fR
values are:
.PP
required
.RS 4
failure of such a PAM will ultimately lead ta tha PAM\-API returnin failure but only afta tha remaining
\fIstacked\fR
modulez (for this
\fIservice\fR
and
\fItype\fR) done been invoked\&.
.RE
.PP
requisite
.RS 4
like
\fIrequired\fR, however, up in tha case dat such a module returns a gangbangin' failure, control is directly moonwalked back ta tha application or ta tha superior PAM stack\&. Da return value is dat associated wit tha straight-up original gangsta required or requisite module ta fail\&. Note, dis flag can be used ta protect against tha possibilitizzle of a user gettin tha opportunitizzle ta enta a password over a unsafe medium\&. Well shiiiit, it is conceivable dat such behavior might inform a attacker of valid accounts on a system\&. This possibilitizzle should be weighed against tha not insignificant concernz of exposin a sensitizzle password up in a straight-up shitty environment\&.
.RE
.PP
sufficient
.RS 4
if such a module succeedz n' no prior
\fIrequired\fR
module has failed tha PAM framework returns success ta tha application or ta tha superior PAM stack immediately without callin any further modulez up in tha stack\& fo' realz. A failure of a
\fIsufficient\fR
module is ignored n' processin of tha PAM module stack continues unaffected\&.
.RE
.PP
optional
.RS 4
the success or failure of dis module is only blingin if it is tha only module up in tha stack associated wit this
\fIservice\fR+\fItype\fR\&.
.RE
.PP
include
.RS 4
include all linez of given type from tha configuration file specified as a argument ta dis control\&.
.RE
.PP
substack
.RS 4
include all linez of given type from tha configuration file specified as a argument ta dis control\&. This differs from
\fIinclude\fR
in dat evaluation of the
\fIdone\fR
and
\fIdie\fR
actions up in a substack do not cause skippin tha rest of tha complete module stack yo, but only of tha substack\&. Jumps up in a substack also can not make evaluation jump outta it, n' tha whole substack is counted as one module when tha jump is done up in a parent stack\&. The
\fIreset\fR
action will reset tha state of a module stack ta tha state dat shiznit was up in az of beginnin of tha substack evaluation\&.
.RE
.PP
For tha mo' fucked up syntax valid
\fIcontrol\fR
values have tha followin form:
.sp
.if n \{\
.RS 4
.\}
.nf
      [value1=action1 value2=action2 \&.\&.\&.]
    
.fi
.if n \{\
.RE
.\}
.PP
Where
\fIvalueN\fR
correspondz ta tha return code from tha function invoked up in tha module fo' which tha line is defined\&. Well shiiiit, it is selected from one of these:
\fIsuccess\fR,
\fIopen_err\fR,
\fIsymbol_err\fR,
\fIservice_err\fR,
\fIsystem_err\fR,
\fIbuf_err\fR,
\fIperm_denied\fR,
\fIauth_err\fR,
\fIcred_insufficient\fR,
\fIauthinfo_unavail\fR,
\fIuser_unknown\fR,
\fImaxtries\fR,
\fInew_authtok_reqd\fR,
\fIacct_expired\fR,
\fIsession_err\fR,
\fIcred_unavail\fR,
\fIcred_expired\fR,
\fIcred_err\fR,
\fIno_module_data\fR,
\fIconv_err\fR,
\fIauthtok_err\fR,
\fIauthtok_recover_err\fR,
\fIauthtok_lock_busy\fR,
\fIauthtok_disable_aging\fR,
\fItry_again\fR,
\fIignore\fR,
\fIabort\fR,
\fIauthtok_expired\fR,
\fImodule_unknown\fR,
\fIbad_item\fR,
\fIconv_again\fR,
\fIincomplete\fR, and
\fIdefault\fR\&.
.PP
Da last of these,
\fIdefault\fR, implies \*(Aqall
\fIvalueN\fR\*(Aqs not mentioned explicitly\&. Note, tha full list of PAM errors be available in
/usr/include/security/_pam_types\&.h\&. The
\fIactionN\fR
can take one of tha followin forms:
.PP
ignore
.RS 4
when used wit a stack of modules, tha module\*(Aqs return status aint gonna contribute ta tha return code tha application obtains\&.
.RE
.PP
bad
.RS 4
this action indicates dat tha return code should be thought of as indicatizzle of tha module failing\&. If dis module is tha straight-up original gangsta up in tha stack ta fail, its status value is ghon be used fo' dat of tha whole stack\&.
.RE
.PP
die
.RS 4
equivalent ta wack wit tha side effect of terminatin tha module stack n' PAM immediately returnin ta tha application\&.
.RE
.PP
ok
.RS 4
this  drops some lyrics ta PAM dat tha administrator be thinkin dis return code should contribute directly ta tha return code of tha full stack of modules\&. In other lyrics, if tha forma state of tha stack would lead ta a return of
\fIPAM_SUCCESS\fR, tha module\*(Aqs return code will override dis value\&. Note, if tha forma state of tha stack holdz some value dat is indicatizzle of a modulez failure, dis \*(Aqok\*(Aq value aint gonna be used ta override dat value\&.
.RE
.PP
done
.RS 4
equivalent ta aiiight wit tha side effect of terminatin tha module stack n' PAM immediately returnin ta tha application\&.
.RE
.PP
N (an unsigned integer)
.RS 4
equivalent ta aiiight wit tha side effect of jumpin over tha next N modulez up in tha stack\&. Note dat N equal ta 0 aint allowed (and it would be identical ta aiiight up in such case)\&.
.RE
.PP
reset
.RS 4
clear all memory of tha state of tha module stack n' start again n' again n' again wit tha next stacked module\&.
.RE
.PP
Each of tha four keywords: required; requisite; sufficient; n' optional, have a equivalent expression up in termz of tha [\&.\&.\&.] syntax\&. They is as bigs up:
.PP
required
.RS 4
[success=ok new_authtok_reqd=ok ignore=ignore default=bad]
.RE
.PP
requisite
.RS 4
[success=ok new_authtok_reqd=ok ignore=ignore default=die]
.RE
.PP
sufficient
.RS 4
[success=done new_authtok_reqd=done default=ignore]
.RE
.PP
optional
.RS 4
[success=ok new_authtok_reqd=ok default=ignore]
.RE
.PP
\fImodule\-path\fR
is either tha full filename of tha PAM ta be used by tha application (it begins wit a \*(Aq/\*(Aq), or a relatizzle pathname from tha default module location:
/lib/security/
or
/lib64/security/, dependin on tha architecture\&.
.PP
\fImodule\-arguments\fR
are a space separated list of tokens dat can be used ta modify tha specific behavior of tha given PAM\&. Right back up in yo muthafuckin ass. Such arguments is ghon be documented fo' each individual module\&. Note, if you wish ta include spaces up in a argument, you should surround dat argument wit square brackets\&.
.sp
.if n \{\
.RS 4
.\}
.nf
    squid auth required pam_mysql\&.so user=passwd_query passwd=mada \e
          db=eminence [query=select user_name from internet_service \e
          where user_name=\*(Aq%u\*(Aq n' password=PASSWORD(\*(Aq%p\*(Aq) n' \e
        service=\*(Aqweb_proxy\*(Aq]
    
.fi
.if n \{\
.RE
.\}
.PP
When rockin dis convention, you can include `[\*(Aq charactas inside tha string, n' if you wish ta include a `]\*(Aq characta inside tha strang dat will survive tha argument parsing, you should use `\e]\*(Aq\&. In other lyrics:
.sp
.if n \{\
.RS 4
.\}
.nf
    [\&.\&.[\&.\&.\e]\&.\&.]    \-\->   \&.\&.[\&.\&.]\&.\&.
    
.fi
.if n \{\
.RE
.\}
.PP
Any line up in (one of) tha configuration file(s), dat aint formatted erectly, will generally tend (errin on tha side of caution) ta make tha authentication process fail\& fo' realz. A correspondin error is freestyled ta tha system log filez wit a cold-ass lil call to
\fBsyslog\fR(3)\&.
.PP
Mo' flexible than tha single configuration file is it ta configure libpam via tha contentz of the
/etc/pam\&.d/
directory\&. In dis case tha directory is filled wit filez each of which has a gangbangin' filename equal ta a service\-name (in lower\-case): it is tha underground configuration file fo' tha named service\&.
.PP
Da syntax of each file up in /etc/pam\&.d/ is similar ta dat of the
/etc/pam\&.conf
file n' is made up of linez of tha followin form:
.sp
.if n \{\
.RS 4
.\}
.nf
type  control  module\-path  module\-arguments
    
.fi
.if n \{\
.RE
.\}
.PP
Da only difference bein dat tha service\-name aint present\&. Da service\-name iz of course tha name of tha given configuration file\&. For example,
/etc/pam\&.d/login
gotz nuff tha configuration fo' the
\fBlogin\fR
service\&.
.SH "SEE ALSO"
.PP
\fBpam\fR(3),
\fBPAM\fR(8),
\fBpam_start\fR(3)
