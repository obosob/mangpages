.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "FONTS-CONF" "5" "11 10æœˆ 2013" "" ""
.SH NAME
fonts.conf \- Font configuration files
.SH SYNOPSIS
.sp
.nf
   /etc/fonts/fonts.conf
   /etc/fonts/fonts.dtd
   /etc/fonts/conf.d
   $XDG_CONFIG_HOME/fontconfig/conf.d
   $XDG_CONFIG_HOME/fontconfig/fonts.conf
   ~/.fonts.conf.d
   ~/.fonts.conf
.sp
.fi
.SH "DESCRIPTION"
.PP
Fontconfig be a library designed ta provide system-wide font configuration,
customization n' application access.
.SH "FUNCTIONAL OVERVIEW"
.PP
Fontconfig gotz nuff two essential modules, tha configuration module which
buildz a internal configuration from XML filez n' tha matchin module
which accepts font patterns n' returns tha nearest matchin font.
.SS "FONT CONFIGURATION"
.PP
Da configuration module consistz of tha FcConfig datatype, libexpat and
FcConfigParse which strutts over a XML tree n' amendz a cold-ass lil configuration with
data found within. I aint talkin' bout chicken n' gravy biatch. From a external perspective, configuration of the
library consistz of generatin a valid XML tree n' feedin dat to
FcConfigParse. Da only other mechanizzle provided ta applications for
changin tha hustlin configuration is ta add fonts n' directories ta the
list of application-provided font files. 
.PP
Da intent is ta make font configurations relatively static, n' shared by
as nuff applications as possible. Well shiiiit, it is hoped dat dis will lead ta more
stable font selection when passin names from one application ta another.
XML was chosen as a cold-ass lil configuration file format cuz it serves up a gangbangin' format
which is easy as fuck  fo' external agents ta edit while retainin tha erect
structure n' syntax.
.PP
Font configuration is separate from font matching; applications needin to
do they own matchin can access tha available fonts from tha library and
perform private matching. Da intent is ta permit applications ta pick and
choose appropriate functionalitizzle from tha library instead of forcin dem to
choose between dis library n' a private configuration mechanism. Da hope
is dat dis will ensure dat configuration of fonts fo' all applications
can be centralized up in one place. Centralizin font configuration will
simplify n' regularize font installation n' customization.
.SS "FONT PROPERTIES"
.PP
While font patterns may contain essentially any properties, there be some
well known propertizzles wit associated types. Fontconfig uses a shitload of these
propertizzles fo' font matchin n' font completion. I aint talkin' bout chicken n' gravy biatch. Others is provided as a
convenience fo' tha applications' renderin mechanism.
.sp
.nf
  Property        Type    Description
  --------------------------------------------------------------
  crew          Strin  Font crew names
  crewlang      Strin  Languages correspondin ta each crew
  steez           Strin  Font style. Overrides weight n' slant
  stylelang       Strin  Languages correspondin ta each style
  fullname        Strin  Font full names (often includes style)
  fullnamelang    Strin  Languages correspondin ta each fullname
  slant           Int     Italic, oblique or roman
  weight          Int     Light, medium, demibold, bold or black
  size            Double  Point size
  width           Int     Condensed, aiiight or expanded
  aspect          Double  Stretches glyphs horizontally before hinting
  pixelsize       Double  Pixel size
  spacin         Int     Proportional, dual-width, monospace or charcell
  foundry         Strin  Font foundry name
  antialias       Bool    Whether glyphs can be antialiased
  hintin         Bool    Whether tha rasterizer should use hinting
  hintstyle       Int     Automatic hintin style
  verticallayout  Bool    Use vertical layout
  autohint        Bool    Use autohinta instead of aiiight hinter
  globaladvizzle   Bool    Use font global advizzle data (deprecated)
  file            Strin  Da filename holdin tha font
  index           Int     Da index of tha font within tha file
  ftface          FT_Face Use tha specified FreeType grill object
  rasterizer      Strin  Which rasterizer is up in use (deprecated)
  outline         Bool    Whether tha glyphs is outlines
  scalable        Bool    Whether glyphs can be scaled
  scale           Double  Scale factor fo' point->pixel conversions
  dpi             Double  Target dots per inch
  rgba            Int     unknown, rgb, bgr, vrgb, vbgr,
                          none - subpixel geometry
  lcdfilta       Int     Type of LCD filter
  minspace        Bool    Eliminizzle leadin from line spacing
  charset         CharSet Unicode chars encoded by tha font
  lang            Strin  List of RFC-3066-style languages this
                          font supports
  fontversion     Int     Version number of tha font
  capabilitizzle      Strin  List of layout capabilitizzles up in tha font
  embolden        Bool    Rasterizer should synthetically embolden tha font
  fontfeatures    Strin  List of tha feature tags up in OpenType ta be enabled
  prgname         Strin  Strin  Name of tha hustlin program
    
.sp
.fi
.SS "FONT MATCHING"
.PP
Fontconfig performs matchin by measurin tha distizzle from a provided
pattern ta all of tha available fonts up in tha system. Da closest matching
font is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This ensures dat a gangbangin' font will always be returned yo, but
doesn't ensure dat it be anythang like tha axed pattern.
.PP
Font matchin starts wit a application constructed pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da desired
attributez of tha resultin font is collected together up in a pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Each
property of tha pattern can contain one or mo' joints; these is listed in
prioritizzle order; matches earlier up in tha list is considered "closer" than
matches lata up in tha list.
.PP
Da initial pattern is modified by applyin tha list of editin instructions
specific ta patterns found up in tha configuration; each consistz of a match
predicate n' a set of editin operations. They is executed up in tha order
they rocked up in tha configuration. I aint talkin' bout chicken n' gravy biatch. Each match causes tha associated
sequence of editin operations ta be applied.
.PP
Afta tha pattern has been edited, a sequence of default substitutions are
performed ta canonicalize tha set of available properties; dis avoidz the
need fo' tha lower layers ta constantly provide default joints fo' various
font propertizzles durin rendering.
.PP
Da canonical font pattern is finally matched against all available fonts.
Da distizzle from tha pattern ta tha font is measured fo' each of several
properties: foundry, charset, crew, lang, spacing, pixelsize, style,
slant, weight, antialias, rasterizer n' outline. This list is up in priority
order -- thangs up in dis biatch of comparin earlier elementz of dis list weigh more
heavily than lata elements.
.PP
There is one special case ta dis rule; crew names is split tha fuck into two
bindings; phat n' weak. Right back up in yo muthafuckin ass. Strong crew names is given pimped outa precedence
in tha match than lang elements while weak crew names is given lower
precedence than lang elements, n' you can put dat on yo' toast. This permits tha document language ta drive
font selection when any document specified font is unavailable.
.PP
Da pattern representin dat font be augmented ta include any properties
found up in tha pattern but not found up in tha font itself; dis permits the
application ta pass renderin instructions or any other data all up in the
matchin system. Finally, tha list of editin instructions specific to
fonts found up in tha configuration is applied ta tha pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. This modified
pattern is moonwalked back ta tha application.
.PP
Da return value gotz nuff sufficient shiznit ta locate n' rasterize the
font, includin tha file name, pixel size n' other renderin data fo' realz. As
none of tha shiznit involved pertains ta tha FreeType library,
applications is free ta use any rasterization engine or even ta take
the identified font file n' access it directly.
.PP
Da match/edit sequences up in tha configuration is performed up in two passes
because there be essentially two different operations necessary -- the
first is ta modify how tha fuck fonts is selected; aliasin crews n' adding
suitable defaults, n' you can put dat on yo' toast. Da second is ta modify how tha fuck tha selected fonts are
rasterized. Y'all KNOW dat shit, muthafucka! Those must apply ta tha selected font, not tha original gangsta pattern
as false matches will often occur.
.SS "FONT NAMES"
.PP
Fontconfig serves up a textual representation fo' patterns dat tha library
can both accept n' generate. Da representation is up in three parts, first a
list of crew names, second a list of point sizes n' finally a list of
additionizzle properties:
.sp
.nf
	<families>-<point sizes>:<name1>=<values1>:<name2>=<values2>\&...
    
.sp
.fi
.PP
Values up in a list is separated wit commas. Da name needn't include either
families or point sizes; they can be elided. Y'all KNOW dat shit, muthafucka! In addition, there are
symbolic constants dat simultaneously indicate both a name n' a value.
Here is some examples:
.sp
.nf
  Name                            Meaning
  ----------------------------------------------------------
  Times-12                        12 point Times Roman
  Times-12:bold                   12 point Times Bold
  Courier:italic                  Courier Italic up in tha default size
  Monospace:matrix=1 .1 0 1       Da playas preferred monospace font
                                  wit artificial obliquing
    
.sp
.fi
.PP
Da '\\', '-', ':' n' ',' charactas up in crew names must be preceded by a
\&'\\' characta ta avoid havin dem misinterpreted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. Similarly, joints
containin '\\', '=', '_', ':' n' ',' must also have dem preceded by a
\&'\\' character n' shit. Da '\\' charactas is stripped outta tha crew name and
values as tha font name is read.
.SH "DEBUGGING APPLICATIONS"
.PP
To help diagnose font n' applications problems, fontconfig is built wit a
pimpin' amount of internal debuggin left enabled. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is controlled by means
of tha FC_DEBUG environment variable. Da value of dis variable is
interpreted as a number, n' each bit within dat value controls different
debuggin lyrics.
.sp
.nf
  Name         Value    Meaning
  ---------------------------------------------------------
  MATCH            1    Brief shiznit bout font matching
  MATCHV           2    Extensive font matchin shiznit
  EDIT             4    Monitor match/test/edit execution
  FONTSET          8    Track loadin of font shiznit at startup
  CACHE           16    Watch cache filez bein written
  CACHEV          32    Extensive cache file freestylin shiznit
  PARSE           64    (no longer up in use)
  SCAN           128    Watch font filez bein scanned ta build caches
  SCANV          256    Verbose font file scannin shiznit
  MEMORY         512    Monitor fontconfig memory usage
  CONFIG        1024    Monitor which config filez is loaded
  LANGSET       2048    Dump char sets used ta construct lang joints
  OBJTYPES      4096    Display message when value typechecks fail
  
.sp
.fi
.PP
Add tha value of tha desired debug levels together n' assign dat (in
base 10) ta tha FC_DEBUG environment variable before hustlin the
application. I aint talkin' bout chicken n' gravy biatch. Output from these statements is busted ta stdout.
.SH "LANG TAGS"
.PP
Each font up in tha database gotz nuff a list of languages it supports, n' you can put dat on yo' toast. This is
computed by comparin tha Unicode coverage of tha font wit tha orthography
of each language. Languages is tagged rockin a RFC-3066 compatible naming
and occur up in two parts -- tha ISO 639 language tag followed a hyphen n' then
by tha ISO 3166 ghetto code. Da hyphen n' ghetto code may be elided.
.PP
Fontconfig has orthographies fo' nuff muthafuckin languages built tha fuck into tha library.
No provision has been made fo' addin freshly smoked up ones aside from rebuildin the
library. Well shiiiit, it currently supports 122 of tha 139 languages named up in ISO 639-1,
141 of tha languages wit two-letta codes from ISO 639-2 n' another 30
languages wit only three-letta codes. Languages wit both two n' three
letta codes is provided wit only tha two letta code.
.PP
For languages used up in multiple territories wit radically different
characta sets, fontconfig includes per-territory orthographies. Put ya muthafuckin choppers up if ya feel dis! This
includes Azerbaijani, Kurdish, Pashto, Tigrinya n' Chinese.
.SH "CONFIGURATION FILE FORMAT"
.PP
Configuration filez fo' fontconfig is stored up in XML format; this
format make external configuration tools easier ta write n' ensures that
they will generate syntactically erect configuration filez fo' realz. As XML
filez is plain text, they can also be manipulated by tha expert user using
a text editor.
.PP
Da fontconfig document type definizzle resides up in tha external entity
"fonts.dtd"; dis is normally stored up in tha default font configuration
directory (/etc/fonts). Each configuration file should contain the
followin structure:
.sp
.nf
	<?xml version="1.0"?>
	<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
	<fontconfig>
\&...
	</fontconfig>
    
.sp
.fi
.SS "<FONTCONFIG>"
.PP
This is tha top level element fo' a gangbangin' font configuration n' can contain
<dir>, <cachedir>, <include>, <match> n' <alias> elements up in any order.
.SS "<DIR PREFIX=""DEFAULT"">"
.PP
This element gotz nuff a gangbangin' finger-lickin' directory name which is ghon be scanned fo' font files
to include up in tha set of available fonts, n' you can put dat on yo' toast. If 'prefix' is set ta "xdg", tha value up in tha XDG_DATA_HOME environment variable is ghon be added as tha path prefix. please peep XDG Base Directory Justification fo' mo' details.
.SS "<CACHEDIR PREFIX=""DEFAULT"">"
.PP
This element gotz nuff a gangbangin' finger-lickin' directory name dat is supposed ta be stored or read
the cache of font shiznit. I aint talkin' bout chicken n' gravy biatch. If multiple elements is specified in
the configuration file, tha directory dat can be accessed first up in tha list
will be used ta store tha cache files. If it starts wit '~', it refers to
a directory up in tha playas home directory. If 'prefix' is set ta "xdg", tha value up in tha XDG_CACHE_HOME environment variable is ghon be added as tha path prefix. please peep XDG Base Directory Justification fo' mo' details.
Da default directory is ``$XDG_CACHE_HOME/fontconfig'' n' it gotz nuff tha cache files
named ``<hash value>-<architecture>\&.cache-<version\&'',
where <version> is tha font configureation file
version number (currently 3).
.SS "<INCLUDE IGNORE_MISSING=""NO"" PREFIX=""DEFAULT"">"
.PP
This element gotz nuff tha name of a additionizzle configuration file or
directory. If a gangbangin' finger-lickin' directory, every last muthafuckin file within dat directory startin wit an
ASCII digit (U+0030 - U+0039) n' endin wit tha strang ``.conf'' is ghon be processed up in sorted order n' shit. When
the XML datatype is traversed by FcConfigParse, tha contentz of tha file(s)
will also be incorporated tha fuck into tha configuration by passin tha filename(s) to
FcConfigLoadAndParse. If 'ignore_missing' is set ta "yes" instead of the
default "no", a missin file or directory will elicit no warnin message from
the library. If 'prefix' is set ta "xdg", tha value up in tha XDG_CONFIG_HOME environment variable is ghon be added as tha path prefix. please peep XDG Base Directory Justification fo' mo' details.
.SS "<CONFIG>"
.PP
This element serves up a place ta consolidate additionizzle configuration
information. I aint talkin' bout chicken n' gravy biatch. <config> can contain <blank> n' <rescan> elements up in any
order.
.SS "<BLANK>"
.PP
Fonts often include "broken" glyphs which step tha fuck up in tha encodin but are
drawn as blanks on tha screen. I aint talkin' bout chicken n' gravy biatch. Within tha <blank> element, place each
Unicode charactas which is supposed ta be blank up in a <int> element.
Charactas outside of dis set which is drawn as blank is ghon be elided from
the set of charactas supported by tha font.
.SS "<RESCAN>"
.PP
Da <rescan> element holdz a <int> element which indicates tha default
interval between automatic checks fo' font configuration chizzles.
Fontconfig will validate all of tha configuration filez n' directories and
automatically rebuild tha internal datastructures when dis interval passes.
.SS "<SELECTFONT>"
.PP
This element is used ta black/white list fonts from bein listed or matched
against. Well shiiiit, it holdz acceptfont n' rejectfont elements.
.SS "<ACCEPTFONT>"
.PP
Fonts matched by a acceptfont element is "whitelisted"; such fonts are
explicitly included up in tha set of fonts used ta resolve list n' match
requests; includin dem up in dis list protects dem from bein "blacklisted"
by a rejectfont element fo' realz. Acceptfont elements include glob n' pattern
elements which is used ta match fonts.
.SS "<REJECTFONT>"
.PP
Fonts matched by a rejectfont element is "blacklisted"; such fonts are
excluded from tha set of fonts used ta resolve list n' match requests as if
they didn't exist up in tha system. Rejectfont elements include glob and
pattern elements which is used ta match fonts.
.SS "<GLOB>"
.PP
Glob elements hold shell-style filename matchin patterns (includin ? and
*) which match fonts based on they complete pathnames. This can be used to
exclude a set of directories (/usr/share/fonts/uglyfont*), or particular
font file types (*.pcf.gz) yo, but tha latta mechanizzle relies rather heavily
on filenamin conventions which can't be relied upon. I aint talkin' bout chicken n' gravy biatch. Note dat globs
only apply ta directories, not ta individual fonts.
.SS "<PATTERN>"
.PP
Pattern elements big-ass up list-style matchin on incomin fonts; dat is,
they hold a list of elements n' associated joints, n' you can put dat on yo' toast. If all of them
elements gotz a matchin value, then tha pattern matches tha font. This can
be used ta select fonts based on attributez of tha font (scalable, bold,
etc), which be a mo' reliable mechanizzle than rockin file extensions.
Pattern elements include patelt elements.
.SS "<PATELT NAME=""PROPERTY"">"
.PP
Patelt elements hold a single pattern element n' list of joints, n' you can put dat on yo' toast. They must
have a 'name' attribute which indicates tha pattern element name. Patelt
elements include int, double, string, matrix, bool, charset n' const
elements.
.SS "<MATCH TARGET=""PATTERN"">"
.PP
This element holdz first a (possibly empty) list of <test> elements n' then
a (possibly empty) list of <edit> elements, n' you can put dat on yo' toast. Patterns which match all of the
tests is subjected ta all tha edits, n' you can put dat on yo' toast. If 'target' is set ta "font" instead
of tha default "pattern", then dis element applies ta tha font name
resultin from a match rather than a gangbangin' font pattern ta be matched. Y'all KNOW dat shit, muthafucka! If 'target'
is set ta "scan", then dis element applies when tha font is scanned to
build tha fontconfig database.
.SS "<TEST QUAL=""ANY"" NAME=""PROPERTY"" TARGET=""DEFAULT"" COMPARE=""EQ"">"
.PP
This element gotz nuff a single value which is compared wit tha target
('pattern', 'font', 'scan' or 'default') property "property" (substitute any of tha property names peeped 
above). 'compare' can be one of "eq", "not_eq", "less", "less_eq", "more", "more_eq", "gotz nuff" or
"not_gotz nuff". 'qual' may either be tha default, "any", up in which case tha match
succeedz if any value associated wit tha property matches tha test value, or
"all", up in which case all of tha joints associated wit tha property must
match tha test value. 'ignore-blanks' takes a funky-ass boolean value. if 'ignore-blanks' is set "true", any blanks up in tha strang is ghon be ignored on its comparison. I aint talkin' bout chicken n' gravy biatch. dis takes effects only when compare="eq" or compare="not_eq".
When used up in a <match target="font"> element,
the target= attribute up in tha <test> element selects between matching
the original gangsta pattern or tha font. "default" selects whichever target the
outa <match> element has selected.
.SS "<EDIT NAME=""PROPERTY"" MODE=""ASSIGN"" BINDING=""WEAK"">"
.PP
This element gotz nuff a list of expression elements (any of tha value or
operator elements). Da expression elements is evaluated at run-time and
modify tha property "property". Da modification dependz on whether
"property" was matched by one of tha associated <test> elements, if so, the
modification may affect tha straight-up original gangsta matched value fo' realz. Any joints banged into
the property is given tha indicated bindin ("strong", "weak" or "same")
with "same" bindin rockin tha value from tha matched pattern element.
\&'mode' is one of:
.sp
.nf
  Mode                    With Match              Without Match
  ---------------------------------------------------------------------
  "assign"                Replace matchin value  Replace all joints
  "assign_replace"        Replace all joints      Replace all joints
  "prepend"               Insert before matchin  Insert at head of list
  "prepend_first"         Insert at head of list  Insert at head of list
  "append"                Append afta matchin   Append at end of list
  "append_last"           Append at end of list   Append at end of list
  "delete"                Delete matchin value   Delete all joints
  "delete_all"            Delete all joints       Delete all joints
    
.sp
.fi
.SS "<INT>, <DOUBLE>, <STRING>, <BOOL>"
.PP
These elements hold a single value of tha indicated type. <bool>
elements hold either legit or false fo' realz. An blingin limitation exists in
the parsin of floatin point numbers -- fontconfig requires that
the mantissa start wit a gangbangin' finger-lickin' digit, not a thugged-out decimal point, so bang a leading
zero fo' purely fractionizzle joints (e.g. use 0.5 instead of .5 n' -0.5
instead of -.5).
.SS "<MATRIX>"
.PP
This element holdz four numerical expressionz of a affine transformation.
At they simplest these is ghon be four <double> elements
but they can also be mo' involved expressions.
.SS "<RANGE>"
.PP
This element holdz tha two <int> elementz of a range
representation.
.SS "<CHARSET>"
.PP
This element holdz at least one <int> element of
an Unicode code point or more.
.SS "<LANGSET>"
.PP
This element holdz at least one <string> element of
a RFC-3066-style languages or more.
.SS "<NAME>"
.PP
Holdz a property name. Evaluates ta tha straight-up original gangsta value from tha property of
the pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. If tha 'target' attribute aint present, it will default to
\&'default', up in which case tha property is returned from tha font pattern
durin a target="font" match, n' ta tha pattern durin a target="pattern"
match. Da attribute can also take tha joints 'font' or 'pattern' to
explicitly chizzle which pattern ta use. Well shiiiit, it be a error ta bust a target
of 'font' up in a match dat has target="pattern".
.SS "<CONST>"
.PP
Holdz tha name of a cold-ass lil constant; these is always integers n' serve as
symbolic names fo' common font joints:
.sp
.nf
  Constant        Property        Value
  -------------------------------------
  thin            weight          0
  extralight      weight          40
  ultralight      weight          40
  light           weight          50
  book            weight          75
  regular         weight          80
  aiiight          weight          80
  medium          weight          100
  demibold        weight          180
  semibold        weight          180
  bold            weight          200
  extrabold       weight          205
  black           weight          210
  heavy           weight          210
  roman           slant           0
  italic          slant           100
  oblique         slant           110
  ultracondensed  width           50
  extracondensed  width           63
  condensed       width           75
  semicondensed   width           87
  aiiight          width           100
  semiexpanded    width           113
  expanded        width           125
  extraexpanded   width           150
  ultraexpanded   width           200
  proportionizzle    spacin         0
  dual            spacin         90
  mono            spacin         100
  charcell        spacin         110
  unknown         rgba            0
  rgb             rgba            1
  bgr             rgba            2
  vrgb            rgba            3
  vbgr            rgba            4
  none            rgba            5
  lcdnone         lcdfilta       0
  lcddefault      lcdfilta       1
  lcdlight        lcdfilta       2
  lcdlegacy       lcdfilta       3
  hintnone        hintstyle       0
  hintslight      hintstyle       1
  hintmedium      hintstyle       2
  hintfull        hintstyle       3
    
.sp
.fi
.SS "<OR>, <AND>, <PLUS>, <MINUS>, <TIMES>, <DIVIDE>"
.PP
These elements big-ass up tha specified operation on a list of expression
elements, n' you can put dat on yo' toast. <or> n' <and> is boolean, not bitwise.
.SS "<EQ>, <NOT_EQ>, <LESS>, <LESS_EQ>, <MORE>, <MORE_EQ>, <CONTAINS>, <NOT_CONTAINS"
.PP
These elements compare two joints, producin a funky-ass boolean result.
.SS "<NOT>"
.PP
Inverts tha boolean sense of its one expression element
.SS "<IF>"
.PP
This element takes three expression elements; if tha value of tha straight-up original gangsta is
true, it produces tha value of tha second, otherwise it produces tha value
of tha third.
.SS "<ALIAS>"
.PP
Alias elements provide a gangbangin' finger-lickin' dirty-ass shorthand notation fo' tha set of common match
operations needed ta substitute one font crew fo' another n' shit. They contain a
<family> element followed by optionizzle <prefer>, <accept> n' <default>
elements, n' you can put dat on yo' toast. Fonts matchin tha <family> element is edited ta prepend the
list of <prefer>ed crews before tha matchin <family>, append the
<accept>able crews afta tha matchin <family> n' append tha <default>
families ta tha end of tha crew list.
.SS "<FAMILY>"
.PP
Holdz a single font crew name
.SS "<PREFER>, <ACCEPT>, <DEFAULT>"
.PP
These hold a list of <family> elements ta be used by tha <alias> element.
.SH "EXAMPLE CONFIGURATION FILE"
.SS "SYSTEM CONFIGURATION FILE"
.PP
This be a example of a system-wide configuration file
.sp
.nf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<!-- /etc/fonts/fonts.conf file ta configure system font access -->
<fontconfig>
<!-- 
	Find fonts up in these directories
-->
<dir>/usr/share/fonts</dir>
<dir>/usr/X11R6/lib/X11/fonts</dir>

<!--
	Accept deprecated 'mono' alias, replacin it wit 'monospace'
-->
<match target="pattern">
	<test qual="any" name="family"><string>mono</string></test>
	<edit name="family" mode="assign"><string>monospace</string></edit>
</match>

<!--
	Names not includin any well known alias is given 'sans-serif'
-->
<match target="pattern">
	<test qual="all" name="family" mode="not_eq"><string>sans-serif</string></test>
	<test qual="all" name="family" mode="not_eq"><string>serif</string></test>
	<test qual="all" name="family" mode="not_eq"><string>monospace</string></test>
	<edit name="family" mode="append_last"><string>sans-serif</string></edit>
</match>

<!--
	Load per-user customization file yo, but don't complain
	if it don't exist
-->
<include ignore_missing="yes" prefix="xdg">fontconfig/fonts.conf</include>

<!--
	Load local customization filez yo, but don't complain
	if there aint any
-->
<include ignore_missing="yes">conf.d</include>
<include ignore_missing="yes">local.conf</include>

<!--
	Alias well known font names ta available TrueType fonts.
	These substitute TrueType faces fo' similar Type1
	faces ta improve screen appearance.
-->
<alias>
	<family>Times</family>
	<prefer><family>Times New Roman</family></prefer>
	<default><family>serif</family></default>
</alias>
<alias>
	<family>Helvetica</family>
	<prefer><family>Arial</family></prefer>
	<default><family>sans</family></default>
</alias>
<alias>
	<family>Courier</family>
	<prefer><family>Courier New</family></prefer>
	<default><family>monospace</family></default>
</alias>

<!--
	Provide required aliases fo' standard names
	Do these afta tha playas configuration file so that
	any aliases there be used preferentially
-->
<alias>
	<family>serif</family>
	<prefer><family>Times New Roman</family></prefer>
</alias>
<alias>
	<family>sans</family>
	<prefer><family>Arial</family></prefer>
</alias>
<alias>
	<family>monospace</family>
	<prefer><family>Andale Mono</family></prefer>
</alias>

<--
	Da example of tha requirementz of OR operator;
	If tha 'family' gotz nuff 'Courier New' OR 'Courier'
	add 'monospace' as tha alternative
-->
<match target="pattern">
	<test name="family" mode="eq">
		<string>Courier New</string>
	</test>
	<edit name="family" mode="prepend">
		<string>monospace</string>
	</edit>
</match>
<match target="pattern">
	<test name="family" mode="eq">
		<string>Courier</string>
	</test>
	<edit name="family" mode="prepend">
		<string>monospace</string>
	</edit>
</match>

</fontconfig>
    
.sp
.fi
.SS "USER CONFIGURATION FILE"
.PP
This be a example of a per-user configuration file dat be reppin
$XDG_CONFIG_HOME/fontconfig/fonts.conf
.sp
.nf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<!-- $XDG_CONFIG_HOME/fontconfig/fonts.conf fo' per-user font configuration -->
<fontconfig>

<!--
	Private font directory
-->
<dir prefix="xdg">fonts</dir>

<!--
	use rgb sub-pixel orderin ta improve glyph appearizzle on
	LCD screens.  Chizzlez affectin renderin yo, but not matching
	should always use target="font".
-->
<match target="font">
	<edit name="rgba" mode="assign"><const>rgb</const></edit>
</match>
<!--
	use WenQuanYi Zen Hei font when serif be axed fo' Chinese
-->
<match>
	<!--
		If you don't wanna use WenQuanYi Zen Hei font fo' zh-tw etc,
		you can use zh-cn instead of zh.
		Please note, even if you set zh-cn, it still matches zh.
		if you don't like it, you can use compare="eq"
		instead of compare="gotz nuff".
	-->
	<test name="lang" compare="gotz nuff">
		<string>zh</string>
	</test>
	<test name="family">
		<string>serif</string>
	</test>
	<edit name="family" mode="prepend">
		<string>WenQuanYi Zen Hei</string>
	</edit>
</match>
<!--
	use VL Gothic font when sans-serif be axed fo' Japanese
-->
<match>
	<test name="lang" compare="gotz nuff">
		<string>ja</string>
	</test>
	<test name="family">
		<string>sans-serif</string>
	</test>
	<edit name="family" mode="prepend">
		<string>VL Gothic</string>
	</edit>
</match>
</fontconfig>
    
.sp
.fi
.SH "FILES"
.PP
\fBfonts.conf\fR
gotz nuff configuration shiznit fo' tha fontconfig library
consistin of directories ta peep fo' font shiznit as well as
instructions on editin program specified font patterns before attemptin to
match tha available fonts, n' you can put dat on yo' toast. Well shiiiit, it is up in XML format.
.PP
\fBconf.d\fR
is tha conventionizzle name fo' a gangbangin' finger-lickin' directory of additionizzle configuration files
managed by external applications or tha local administrator. Shiiit, dis aint no joke. The
filenames startin wit decimal digits is sorted up in lexicographic order
and used as additionizzle configuration filez fo' realz. All of these filez is up in XML
format. Da masta fonts.conf file references dis directory up in a 
<include> directive.
.PP
\fBfonts.dtd\fR
is a DTD dat raps bout tha format of tha configuration files.
.PP
\fB$XDG_CONFIG_HOME/fontconfig/conf.d\fR n' \fB~/.fonts.conf.d\fR
is tha conventionizzle name fo' a per-user directory of (typically
auto-generated) configuration files, although the
actual location is specified up in tha global fonts.conf file. please note dat ~/.fonts.conf.d is deprecated now, nahmeean? it aint gonna be read by default up in tha future version.
.PP
\fB$XDG_CONFIG_HOME/fontconfig/fonts.conf\fR n' \fB~/.fonts.conf\fR
is tha conventionizzle location fo' per-user font configuration, although the
actual location is specified up in tha global fonts.conf file. please note dat ~/.fonts.conf is deprecated now, nahmeean? it aint gonna be read by default up in tha future version.
.PP
\fB$XDG_CACHE_HOME/fontconfig/*.cache-*\fR n' \fB ~/.fontconfig/*.cache-*\fR
is tha conventionizzle repository of font shiznit dat aint found up in the
per-directory caches. This file be automatically maintained by fontconfig. please note dat ~/.fontconfig/*.cache-* is deprecated now, nahmeean? it aint gonna be read by default up in tha future version.
.SH "ENVIRONMENT VARIABLES"
.PP
\fBFONTCONFIG_FILE\fR
is used ta override tha default configuration file.
.PP
\fBFONTCONFIG_PATH\fR
is used ta override tha default configuration directory.
.PP
\fBFC_DEBUG\fR
is used ta output tha detailed debuggin lyrics. peep Debuggin Applications section fo' mo' details.
.PP
\fBFONTCONFIG_USE_MMAP\fR
is used ta control tha use of mmap(2) fo' tha cache filez if available. dis take a funky-ass boolean value. fontconfig will checks if tha cache filez is stored on tha filesystem dat is safe ta use mmap(2). explicitly settin dis environment variable will causes skippin dis check n' enforce ta use or not use mmap(2) anyway.
.SH "SEE ALSO"
.PP
fc-cat(1), fc-cache(1), fc-list(1), fc-match(1), fc-query(1)
.SH "VERSION"
.PP
Fontconfig version 2.11.0
