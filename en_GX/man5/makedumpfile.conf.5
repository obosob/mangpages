.TH MAKEDUMPFILE.CONF 5 "3 Jul 2013" "makedumpfile v1.5.4" "Linux System Administratorz Manual"
.SH NAME
makedumpfile.conf \- Da filta configuration file fo' makedumpfile(8).
.SH DESCRIPTION
.PP
Da makedumpfile.conf be a cold-ass lil configuration file fo' makedumpfile tool.
makedumpfile.conf file gotz nuff tha erase commandz ta filta up desired kernel
data from tha vmcore while bustin \fIDUMPFILE\fR rockin makedumpfile tool.
makedumpfile readz tha filta config n' buildz tha list of memory addresses
and its sizes afta processin filta commands. Da memory locations that
require ta be filtered up is then poisoned wit characta \fIX\fR (58 up in Hex).
.SH FILE FORMAT
.PP
Da file consistz of module sections dat gotz nuff filta commandz fo' realz. A section
begins wit tha name of tha section up in square brackets n' continues until the
next section begins.

.br
"["<\fIModuleName\fR>"]"
.br
<\fIFilterCommands\fR>
.br

where
.br
"[" is tha characta \fB[\fR
.br
"]" is tha characta \fB]\fR
.TP
<\fIModuleName\fR>
is either 'vmlinux' or name of a Linux kernel module.
.TP
<\fIFilterCommands\fR>
is a list of one or mo' filta commandz as busted lyrics bout up in tha section
\fBFILTER COMMANDS\fR of dis manual page.
.PP
Da section name indicates a kernel module name (includin \fBvmlinux\fR) where
the symbols specified up in subsequent erase commandz belong to. Da unnamed
section defaults ta \fB[vmlinux]\fR section. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat a user can also explicitly
define \fB[vmlinux]\fR section. I aint talkin' bout chicken n' gravy biatch. Da sections help makedumpfile tool ta select
appropriate kernel or module debuginfo file before processin tha subsequent
erase commands. Before selectin appropriate debuginfo file, tha module name
is validated against tha loaded modulez from tha vmcore. If no match is found,
then tha section is ignored n' makedumpfile skips ta tha next module section.
If match is found, then makedumpfile will try ta load tha corresponding
module debuginfo file. If module debuginfo aint available then, makedumpfile
will skip tha section wit a warnin message.
.SH FILTER COMMANDS
.SS filta command
.PP
A filta command is either a erase command or a loop construct. Each erase
command n' loop construct must start wit a freshly smoked up line. Each filta command
raps bout data up in tha dump ta be erased. Y'all KNOW dat shit, muthafucka! Syntax:

.br
<\fIEraseCommands\fR>|<\fILoopConstruct\fR>
.br

where
.TP
<\fIEraseCommands\fR>
Described up in tha subsection \fBerase command\fR of dis manual page.
.TP
<\fILoopConstruct\fR>
Described up in tha subsection \fBLoop construct\fR of dis manual page.
.SS erase command
.PP
Erase specified size of a kernel data referred by specified kernel/module
symbol or its member component. Da erase command syntax is:

.br
\fBerase\fR <\fISymbol\fR>[.\fImember\fR[...]] [\fBsize\fR
<\fISizeValue\fR>[K|M]]
.br
\fBerase\fR <\fISymbol\fR>[.\fImember\fR[...]] [\fBsize\fR <\fISizeSymbol\fR>]
.br
\fBerase\fR <\fISymbol\fR>[.\fImember\fR[...]] [\fBnullify\fR]
.br

where
.br
.TP
<\fISymbol\fR>
A kernel or module symbol (variable) name dat is part of global symbols
\fB/proc/kallsyms\fR.
.TP
<\fISizeValue\fR>
A positizzle integer value as a size of tha data up in bytes ta be erased. Y'all KNOW dat shit, muthafucka! The
suffixes 'K' n' 'M' can be used ta specify kilobytes n' Megabytes
respectively where, K means 1024 bytes n' M means 1024 ^ 2 = 1048576 bytes.
Da suffixes is not case sensitive.
.TP
<\fISizeSymbol\fR>
A simple expression of tha form <\fISymbol\fR>[.\fImember\fR[...]] dat denotes
a symbol which gotz nuff a positizzle integer value as a size of tha data up in bytes
to be erased.
.TP
<\fISymbol\fR>[.\fImember\fR[...]]
A simple expression dat thangs up in dis biatch tha fuck into either a global kernel symbol name or
its member components, n' you can put dat on yo' toast. Da expression always uses '.' operator ta specify
the \fImember\fR component of kernel symbol or its member irrespectizzle of
whether it iz of pointa type or not.
.TP
\fImember\fR[...]
Member or component of member up in <\fISymbol\fR>.
.PP
Da \fBerase\fR command takes two arguments 1. kernel symbol name or its
member components n' 2. size of tha data referred by argument (1) OR
\fBnullify\fR keyword. Y'all KNOW dat shit, muthafucka! Da second argument \fBsize\fR OR \fBnullify\fR is
optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da unit fo' size value is up in \fBbytes\fR. If \fBsize\fR option is
not specified then tha size of tha straight-up original gangsta argument is determined accordin to
its data type rockin dwarf info from debuginfo file. In case of '\fBchar *\fR'
data type, tha length of strang pointed by '\fBchar *\fR' pointa is determined
with a upper limit of 1024. Da \fBsize\fR can be specified up in two forms 1.
a integer value as explained above (<\fISizeValue\fR>) n' 2. a simple
expression up in tha form of <\fISymbol\fR>[.\fImember\fR[...]]] dat thangs up in dis biatch into
base type (integer) variable.
.PP
If tha specified <\fISymbol\fR> iz of type '\fBvoid *\fR', then user needz to
provide either \fBsize\fR or \fBnullify\fR option, otherwise tha erase command
will not have any effect.
.PP
Da \fBnullify\fR option only works if specified <\fISymbol\fR> be a pointer.
Instead of erasin data pointed by tha specified pointa \fBnullify\fR erases
the pointa value n' set it ta '0' (NULL). Please note dat by nullifying
the pointa joints may affect tha debug mobilitizzle of pimped \fIDUMPFILE\fR.
Use tha \fBnullify\fR option only when tha size of data ta be erased is not
known. I aint talkin' bout chicken n' gravy biatch.  \fBe.g.\fR data pointed by '\fBvoid *\fR'.
.PP
Let our asses peep tha makedumpfile.conf file from tha example below which was
configured ta erase desired kernel data from tha kernel module wit name
\fBmymodule\fR fo' realz. At line 1 n' 3, tha user has not specified size option while
erasin 'array_var' n' 'mystruct1.name' symbols. Instead tha user dependz on
makedumpfile ta automatically determine tha sizes ta be erased \fBi.e\fR
100 bytes fo' 'array_var' n' 11 bytes fo' 'mystruct1.name'.  At line 2,
while erasin tha 'mystruct1.buffer' member tha user has specified tha size
value 25 against tha actual size of 50. In dis case tha user specified
\fBsize\fR takes tha precedence n' makedumpfile erases only 25 bytes from
\'mystruct1.buffer' fo' realz. At line 4, tha size of tha data pointed by \fBvoid *\fR
pointa 'mystruct1.addr' is unknown. I aint talkin' bout chicken n' gravy biatch yo. Hence tha \fBnullify\fR option has been
specified ta reset tha pointa value ta NULL fo' realz. At line 5, the
\'mystruct2.addr_size' is specified as \fBsize\fR argument ta determine the
size of tha data pointed by \fBvoid *\fR pointa 'mystruct2.addr'.
.br

.B Example:
.PP
Assumin tha followin piece of code is from kernel module 'mymodule':
.br

struct s1 {
.br
	char *name;
.br
	void *addr1;
.br
	void *addr2;
.br
	char buffer[50];
.br
};
.br
struct s2 {
.br
	void *addr;
.br
	long addr_size;
.br
};
.br

/* Global symbols */
.br
char array_var[100];
.br
struct s1 mystruct1;
.br
struct s2 *mystruct2;
.br

int foo()
.br
{
.br
	...
.br
	s1.name = "Wuz crackalackin' World";
.br
	...
.br
}
.br

\fBmakedumpfile.conf:\fR
.br
[mymodule]
.br
erase array_var
.br
erase mystruct1.buffer size 25
.br
erase mystruct1.name
.br
erase mystruct1.addr1 nullify
.br
# Assumin addr2 points ta 1024 bytes
.br
erase mystruct1.addr2 size 1K
.br
erase mystruct2.addr size mystruct2.addr_size
.br
.B EOF

.SS Loop construct
.PP
A Loop construct allows tha user ta traverse tha linked list or array elements
and erase tha data contents referred by each element.

.br
\fBfor\fR <\fIid\fR> \fBin\fR {<\fIArrayVar\fR> |
.br
		   <\fIStructVar\fR> \fBvia\fR <\fINextMember\fR> |
.br
		   <\fIListHeadVar\fR> \fBwithin\fR
<\fIStructName\fR>\fB:\fR<\fIListHeadMember\fR>}
.br
	\fBerase\fR <\fIid\fR>[.\fIMemberExpression\fR]
[\fBsize\fR <\fISizeExpression\fR>|\fBnullify\fR]
.br
	[\fBerase\fR <\fIid\fR>...]
.br
	[...]
.br
\fBendfor\fR
.PP
where
.PP
.TP
<\fIid\fR>
Arbitrary name used ta temporarily point ta elementz of tha list. This is
also called iteration variable.
.TP
<\fIArrayVar\fR>
A simple expression up in tha form of <\fISymbol\fR>[.\fImember\fR[...]] that
results tha fuck into a array variable.
.TP
<\fIStructVar\fR>
A simple expression up in tha form of <\fISymbol\fR>[.\fImember\fR[...]] that
results tha fuck into a variable dat points ta a structure.
.TP
<\fINextMember\fR>
Member within <\fIStructVar\fR> dat points ta a object of same type dat of
<\fIStructVar\fR>.
.TP
<\fIListHeadVar\fR>
A simple expression up in tha form of <\fISymbol\fR>[.\fImember\fR[...]] that
results tha fuck into a variable of type struct list_head.
.TP
<\fIStructName\fR>
Name of tha structure type dat can be traversed rockin HEAD variable
<\fIListHeadVar\fR> n' gotz nuff a member named <\fIListHeadMember\fR>.
.TP
<\fIListHeadMember\fR>
Name of a member up in <\fIStructName\fR>, of type struct list_head.
.TP
<\fIMemberExpression\fR>
A simple expression up in tha form of [.\fImember\fR[...]] ta specify a member
or component of a element up in <\fIArrayVar\fR>, <\fIStructVar\fR>
or <\fIStructName\fR>.
.TP
<\fISizeExpression\fR>
Size value up in tha form of <\fISizeValue\fR>, <\fIid\fR>[.\fIMemberExpression\fR]
or <\fISymbol\fR>[.\fImember\fR[...]].
.PP
Da \fBfor\fR loop construct allows ta iterate on list of elements up in a array
or linked lists, n' you can put dat on yo' toast. Each element up in tha list be assigned ta iteration variable
<\fIid\fR>. Da type of tha iteration variable is determined by dat of the
list elements, n' you can put dat on yo' toast. Da entry specified afta '\fBin\fR' terminal is called LIST
entry. Da LIST entry can be a array variable, structure variable/pointa or a
struct list_head type variable. Da set of \fBerase\fR commandz specified
between \fBfor\fR n' \fBendfor\fR, is ghon be executed fo' each element up in the
LIST entry.
.PP
If tha LIST entry specified be a array variable, then tha loop will be
executed fo' each array element. Da size of tha array is ghon be determined by
usin dwarf shiznit.
.PP
If tha LIST entry specified be a structure variable/pointer, then a traversal
member (<\fINextMember\fR>) must be specified rockin '\fBvia\fR' terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. The
\fBfor\fR loop will continue until tha value of traversal member is NULL or
matches wit address of tha straight-up original gangsta node <\fIStructVar\fR> if it aint nuthin but a cold-ass lil circular
linked list.
.PP
If tha LIST entry is specified rockin a struct list_head type variable, then
\fBwithin\fR terminal must be used ta specify tha structure name
<\fIStructName\fR> dat is surroundin ta it along wit tha struct list_head
type member afta '\fB:\fR' which is part of tha linked list. In tha erase
statement <\fIid\fR> then denotes tha structure dat tha list_head is
contained up in (ELEMENT_OF).
.PP
Da below example illustrates how tha fuck ta use loop construct fo' traversing
Array, linked list via next member n' list_head.

.B Example:
.PP
Assumin followin piece of code is from kernel module 'mymodule':
.br

struct s1 {
.br
	struct *next;
.br
	struct list_head list;
.br
	char private[100];
.br
	void *key;
.br
	long key_size;
.br
};
.br

/* Global symbols */
.br
struct s1 mystruct1;
.br
static LIST_HEAD(s1_list_head);
.br
struct s1 myarray[100];
.br

void foo()
.br
{
.br
	struct s1 *s1_ptr;
.br
	...
.br
	...
.br
	s1_ptr = malloc(...);
.br
	...
.br
	...
.br
	list_add(&s1_ptr->list, &s1_list_head);
.br
	...
.br
}
.br

\fBmakedumpfile.conf:\fR
.br
[mymodule]
.br
# erase private fieldz from list startin wit mystruct1 connected via
.br
# 'next' member:
.br
for mys1 up in mystruct1 via next
.br
	erase mys1.private
.br
	erase mys1.key size mys1.key_size
.br
endfor
.br

# erase private fieldz from list startin wit list_head variable
.br
# s1_list_head.
.br
for mys1 up in s1_list_head.next within s1:list
.br
	erase mys1.private
.br
	erase mys1.key size mys1.key_size
.br
endfor
.br

# erase private fieldz from all elementz of tha array myarray:
.br
for mys1 up in myarray
.br
	erase mys1.private
.br
	erase mys1.key size mys1.key_size
.br
endfor
.br
.B EOF
.PP
In tha above example, tha straight-up original gangsta \fBfor\fR construct traverses tha linked list
all up in a specified structure variable \fBmystruct1\fR of type \fBstruct s1\fR.
Da linked list can be traversed rockin '\fBnext\fR' gangmember of \fBmystruct1\fR.
Hence a \fBvia\fR terminal has been used ta specify tha traversal member
name '\fBnext\fR'.
.PP
Da second \fBfor\fR construct traverses tha linked list all up in a specified
struct list_head variable \fBs1_list_head.next\fR. Da global symbol
\fBs1_list_head\fR be a start address of tha linked list n' its \fBnext\fR
member points ta tha address of struct list_head type member '\fBlist\fR' from
\fBstruct s1\fR yo. Hence a \fBwithin\fR terminal is used ta specify tha structure
name '\fBs1\fR' dat can be traversed rockin \fBs1_list_head.next\fR variable
along wit tha name of struct list_head type member '\fBlist\fR' which is part
of tha linked list dat starts from \fBs1_list_head\fR global symbol.
.PP
Da third \fBfor\fR construct traverses tha array elements specified through
a array variable \fBmyarray\fR.
.br
.SH SEE ALSO
.PP
makedumpfile(8)

