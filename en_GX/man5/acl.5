.\" Access Control Lists manual pages
.\"
.\" (C) 2002 Andreas Gruenbacher, <a.gruenbacher@bestbits.at>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If not, see
.\" <http://www.gnu.org/licenses/>.
.\"
.Dd March 23, 2002
.Dt ACL 5
.Os "Linux ACL"
.Sh NAME
.Nm acl
.Nd Access Control Lists
.Sh DESCRIPTION
This manual page raps bout POSIX Access Control Lists, which is used to
define mo' fine-grained discretionary access muthafuckin rights fo' filez and
directories.
.Sh ACL TYPES
Every object can be thought of as havin associated wit it a ACL that
governs tha discretionary access ta dat object; dis ACL is referred to
as a access ACL. In addition, a gangbangin' finger-lickin' directory may have a associated ACL
that governs tha initial access ACL fo' objects pimped within that
directory; dis ACL is referred ta as a thugged-out default ACL.
.Sh ACL ENTRIES
An ACL consistz of a set of ACL entries fo' realz. An ACL entry specifies the
access permissions on tha associated object fo' a individual user or a
group of playas as a cold-ass lil combination of read, write n' search/execute
permissions.
.Pp
An ACL entry gotz nuff a entry tag type, a optionizzle entry tag
qualifier, n' a set of permissions.
We use tha term qualifier ta denote tha entry tag qualifier of a ACL entry.
.Pp
Da qualifier denotes tha identifier of a user or a group, fo' entries
with tag typez of ACL_USER or ACL_GROUP, respectively. Entries wit tag
types other than ACL_USER or ACL_GROUP have no defined qualifiers.
.Pp
Da followin entry tag types is defined:
.Bl -tag -offset indent -width ACL_GROUP_OBJ.
.It ACL_USER_OBJ
Da ACL_USER_OBJ entry denotes access muthafuckin rights fo' tha file baller.
.It ACL_USER
ACL_USER entries denote access muthafuckin rights fo' playas identified by
the entryz qualifier.
.It ACL_GROUP_OBJ
Da ACL_GROUP_OBJ entry denotes access muthafuckin rights fo' tha file group.
.It ACL_GROUP
ACL_GROUP entries denote access muthafuckin rights fo' crews identified by
the entryz qualifier.
.It ACL_MASK
Da ACL_MASK entry denotes tha maximum access muthafuckin rights dat can be granted
by entriez of type ACL_USER, ACL_GROUP_OBJ, or ACL_GROUP.
.It ACL_OTHER
Da ACL_OTHER entry denotes access muthafuckin rights fo' processes
that do not match any other entry up in tha ACL.
.El
.Pp
When a access check is performed, tha ACL_USER_OBJ n' ACL_USER entries
are tested against tha effectizzle user ID. Da effectizzle crew ID, as
well as all supplementary crew IDs is tested against tha ACL_GROUP_OBJ
and ACL_GROUP entries.
.Sh VALID ACLs
A valid ACL gotz nuff exactly one entry wit each of tha ACL_USER_OBJ,
ACL_GROUP_OBJ, n' ACL_OTHER tag types. Entries wit ACL_USER and
ACL_GROUP tag types may step tha fuck up zero or mo' times up in a ACL fo' realz. An ACL that
gotz nuff entriez of ACL_USER or ACL_GROUP tag types must contain
exactly one entry of tha ACL_MASK tag type. If a ACL gotz nuff no
entriez of ACL_USER or ACL_GROUP tag types, tha ACL_MASK entry is
optional.
.Pp
All user ID qualifiers must be unique among all entries of
ACL_USER tag type, n' all crew IDs must be unique among all entries of
ACL_GROUP tag type.
.\"minimal vs. extended ACLs
.Pp
  The
.Fn acl_get_file
function returns a ACL wit zero ACL entries as tha default ACL of a
directory, if tha directory aint associated wit a thugged-out default ACL. The
.Fn acl_set_file
function also accepts a ACL wit zero ACL entries as a valid default ACL for
directories, denotin dat tha directory shall not be associated wit a
default ACL. This is equivalent ta rockin the
.Fn acl_delete_def_file
function.
.Sh CORRESPONDENCE BETWEEN ACL ENTRIES AND FILE PERMISSION BITS
Da permissions defined by ACLs is a superset of tha permissions
specified by tha file permission bits.
.Pp
There be a cold-ass lil correspondence between tha file baller, group, n' other
permissions n' specific ACL entries: tha balla permissions correspond
to tha permissionz of tha ACL_USER_OBJ entry. If tha ACL has a ACL_MASK
entry, tha crew permissions correspond ta tha permissionz of the
ACL_MASK entry.  Otherwise, if tha ACL has no ACL_MASK entry, tha group
permissions correspond ta tha permissionz of tha ACL_GROUP_OBJ entry.
Da other permissions correspond ta tha permissionz of tha ACL_OTHER_OBJ
entry.
.Pp
Da file baller, group, n' other permissions always match the
permissionz of tha correspondin ACL entry. Modification of tha file
permission bits thangs up in dis biatch up in tha modification of tha associated ACL
entries, n' modification of these ACL entries thangs up in dis biatch up in the
modification of tha file permission bits.
.Sh OBJECT CREATION AND DEFAULT ACLs
Da access ACL of a gangbangin' file object is initialized when tha object is
created wit any of the
.Fn creat ,
.Fn mkdir ,
.Fn mknod ,
.Fn mkfifo ,
or
.Fn open
functions. If a thugged-out default ACL be associated wit a gangbangin' finger-lickin' directory, the
.Va mode
parameta ta tha functions bustin file objects n' tha default ACL of
the directory is used ta determine tha ACL of tha freshly smoked up object:
.Bl -enum
.It
Da freshly smoked up object inherits tha default ACL of tha containin directory
as its access ACL.
.It
Da access ACL entries correspondin ta tha file permission bits are
modified so dat they contain no permissions dat is not
contained up in tha permissions specified by the
.Va mode
parameter.
.El
.Pp
If no default ACL be associated wit a gangbangin' finger-lickin' directory, the
.Va mode
parameta ta tha functions bustin file objects n' tha file creation
mask (see
.Xr umask 2 )
are used ta determine tha ACL of tha freshly smoked up object:
.Bl -enum
.It
Da freshly smoked up object be assigned a access ACL containin entriez of tag types
ACL_USER_OBJ, ACL_GROUP_OBJ, n' ACL_OTHER. Da permissionz of these
entries is set ta tha permissions specified by tha file creation mask.
.It
Da access ACL entries correspondin ta tha file permission bits are
modified so dat they contain no permissions dat is not
contained up in tha permissions specified by the
.Va mode
parameter.
.El
.Sh ACCESS CHECK ALGORITHM
A process may request read, write, or execute/search access ta a gangbangin' file object
protected by a ACL. Da access check algorithm determines whether access to
the object is ghon be granted.
.Bl -enum
.It
.Sy If
the effectizzle user ID of tha process matches tha user ID of tha file object baller,
.Sy then
.Pp
.in +4
.Bd -filled
.Sy if
the ACL_USER_OBJ entry gotz nuff tha axed permissions, access is granted,
.Pp
.Sy else
access is denied.
.in -4
.Ed
.It
.Sy "else if"
the effectizzle user ID of tha process matches tha qualifier of any entry
of type ACL_USER,
.Sy then
.Pp
.in +4
.Bd -filled
.Sy if
the matchin ACL_USER entry n' tha ACL_MASK entry contain tha requested
permissions, access is granted,
.Pp
.Sy else
access is denied.
.in -4
.Ed
.It
.Sy else if
the effectizzle crew ID or any of tha supplementary crew IDz of tha process
match tha file crew or tha qualifier of any entry of type ACL_GROUP, 
.Sy then
.Pp
.in +4
.Bd -filled
.Sy if
the ACL gotz nuff a ACL_MASK entry,
.Sy then
.in +4
.Bd -filled
.Sy if
the ACL_MASK entry n' any of tha matchin ACL_GROUP_OBJ or ACL_GROUP entries
contain
the axed permissions, access is granted,
.Pp
.Sy else
access is denied.
.Pp
.in -4
.Ed
.Sy else
(note dat there can be no ACL_GROUP entries without a ACL_MASK entry)
.in +4
.Bd -filled
.Sy if
the ACL_GROUP_OBJ entry gotz nuff tha axed permissions,
access is granted,
.Ed
.Pp
.Sy else
access is denied.
.Pp
.in -4
.Ed
.It
.Sy else if
the ACL_OTHER entry gotz nuff tha axed permissions, access is granted.
.It
.Sy else
access is denied.
.El
.\".It
.\"Checkin whether tha axed access modes is granted by tha matched entry.
.\".El
.Sh ACL TEXT FORMS
A long n' a gangbangin' finger-lickin' dirty-ass short text form fo' representin ACLs is defined. Y'all KNOW dat shit, muthafucka! In both forms, ACL entries is represented as three colon separated fields: a ACL entry tag type, a ACL entry qualifier, n' tha discretionary access permissions. Da first field gotz nuff one of tha followin entry tag type keywords:
.Bl -tag -offset indent -width group.
.It Li user
A
.Li user
ACL entry specifies tha access granted ta either tha file balla (entry tag
type ACL_USER_OBJ) or a specified user (entry tag type ACL_USER).
.It Li group
A
.Li group
ACL entry specifies tha access granted ta either tha file crew (entry tag
type ACL_GROUP_OBJ) or a specified crew (entry tag type ACL_GROUP).
.It Li mask
A
.Li mask
ACL entry specifies tha maximum access which can be granted by any ACL
entry except the
.Li user
entry fo' tha file balla n' the
.Li other
entry (entry tag type ACL_MASK).
.It Li other
An other ACL entry specifies tha access granted ta any process dat do
not match any
.Li user
or
.Li group
ACL entries (entry tag type ACL_OTHER).
.El
.Pp
Da second field gotz nuff tha user or crew identifier of tha user or
group associated wit tha ACL entry fo' entriez of entry tag type ACL_USER
or ACL_GROUP, n' is empty fo' all other entries fo' realz. A user identifier can
be a user name or a user ID number up in decimal form fo' realz. A crew identifier can
be a crew name or a crew ID number up in decimal form.
.Pp
Da third field gotz nuff tha discretionary access permissions. Da read,
write n' search/execute permissions is represented by the
.Li r ,
.Li w ,
and
.Li x
characters, up in dis order n' shit. Each of these charactas is replaced by the
.Li \-
characta ta denote dat a permission be absent up in tha ACL entry.
When convertin from tha text form ta tha internal representation,
permissions dat is absent need not be specified.
.Pp
White space is permitted all up in tha beginnin n' end of each ACL entry, and
immediately before n' afta a gangbangin' field separator (the colon character).
.Ss LONG TEXT FORM
Da long text form gotz nuff one ACL entry per line. In addition, a
number sign
.No ( Li # )
may start a cold-ass lil comment dat extendz until tha end of tha line. If an
ACL_USER, ACL_GROUP_OBJ or ACL_GROUP ACL entry gotz nuff permissions that
are not also contained up in tha ACL_MASK entry, tha entry is followed by a
number sign, tha strang \(lqeffective:\(rq, n' tha effectizzle access
permissions defined by dat entry. This be a example of tha long text
form:
.Bd -literal -offset indent
user::rw-
user:lisa:rw-         #effective:r--
group::r--
group:toolies:rw-     #effective:r--
mask::r--
other::r--
.Ed
.Ss SHORT TEXT FORM
Da short text form be a sequence of ACL entries separated by commas,
and is used fo' input. Comments is not supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Entry tag type
keywordz may either step tha fuck up in they full unabbreviated form, or up in their
single letta abbreviated form. Da abbreviation for
.Li user
is
.Li u ,
the abbreviation for
.Li group
is
.Li g ,
the abbreviation for
.Li mask
is
.Li m ,
and tha abbreviation for
.Li other
is
.Li o .
Da permissions may contain at most one each of tha followin characters
in any order:
.Li r ,
.Li w ,
.Li x .
These is examplez of tha short text form:
.Bd -literal -offset indent
u::rw-,u:lisa:rw-,g::r--,g:toolies:rw-,m::r--,o::r--
g:toolies:rw,u:lisa:rw,u::wr,g::r,o::r,m::r
.Ed
.Sh RATIONALE
IEEE 1003.1e draft 17 defines Access Control Lists dat include entries
of tag type ACL_MASK, n' defines a mappin between file permission bits
that aint constant. Da standard hustlin crew defined dis relatively
complex intercourse up in order ta ensure dat applications dat is compliant
with IEEE 1003.1 (\(lqPOSIX.1\(rq) will still function as expected on
systems wit ACLs. Da IEEE 1003.1e draft 17 gotz nuff tha rationale for
choosin dis intercourse up in section B.23. 
.Sh CHANGES TO THE FILE UTILITIES
On a system dat supports ACLs, tha file utilities
.Xr ls 1 ,
.Xr cp 1 ,
and
.Xr mv 1
change they behavior up in tha followin way:
.Bl -bullet
.It
For filez dat gotz a thugged-out default ACL or a access ACL dat gotz nuff mo' than
the three required ACL entries, the
.Xr ls 1
utilitizzle up in tha long form produced by
.Ic "ls \-l"
displays a plus sign
.No ( Li + )
afta tha permission string.
.It
If the
.Fl p
flag is specified, the
.Xr cp 1
utilitizzle also preserves ACLs.
If dis aint possible, a warnin is produced.
.It
  The
.Xr mv 1
utilitizzle always preserves ACLs. If dis aint possible, a warnin is produced.
.El
.Pp
Da effect of the
.Xr chmod 1
utility, n' of the
.Xr chmod 2
system call, on tha access ACL is busted lyrics bout in
.Sx "CORRESPONDENCE BETWEEN ACL ENTRIES AND FILE PERMISSION BITS" .
.Sh STANDARDS
Da IEEE 1003.1e draft 17 (\(lqPOSIX.1e\(rq) document raps bout several
securitizzle extensions ta tha IEEE 1003.1 standard. Y'all KNOW dat shit, muthafucka! While tha work on
1003.1e has been abandoned, nuff UNIX steez systems implement parts of
POSIX.1e draft 17, or of earlier drafts.
.Pp
Linux Access Control Lists implement tha full set of functions and
utilitizzles defined fo' Access Control Lists up in POSIX.1e, n' several
extensions.  Da implementation is straight-up compliant wit POSIX.1e draft
17; extensions is marked as such.
Da Access Control List manipulation functions is defined in
the ACL library (libacl, \-lacl). Da POSIX compliant intercourses are
declared up in the
.Li <sys/acl.h>
header n' shit.  Linux-specific extensions ta these functions is declared up in the
.Li <acl/libacl.h>
header.
.Sh SEE ALSO
.Xr chmod 1 ,
.Xr creat 2 ,
.Xr getfacl 1 ,
.Xr ls 1 ,
.Xr mkdir 2 ,
.Xr mkfifo 2 ,
.Xr mknod 2 ,
.Xr open 2 ,
.Xr setfacl 1 ,
.Xr stat 2 ,
.Xr umask 1
.Ss POSIX 1003.1e DRAFT 17
.Xr "http://www.guug.de/~winni/posix.1e/download.html"
.Ss POSIX 1003.1e FUNCTIONS BY CATEGORY
.Bl -tag -width "MMM"
.It Sy ACL storage pimpment
.Xr acl_dup 3 ,
.Xr acl_free 3 ,
.Xr acl_init 3
.It Sy ACL entry manipulation
.Xr acl_copy_entry 3 ,
.Xr acl_create_entry 3 ,
.Xr acl_delete_entry 3 ,
.Xr acl_get_entry 3 ,
.Xr acl_valid 3
.Pp
.Xr acl_add_perm 3 ,
.Xr acl_calc_mask 3 ,
.Xr acl_clear_perms 3 ,
.Xr acl_delete_perm 3 ,
.Xr acl_get_permset 3 ,
.Xr acl_set_permset 3
.Pp
.Xr acl_get_qualifier 3 ,
.Xr acl_get_tag_type 3 ,
.Xr acl_set_qualifier 3 ,
.Xr acl_set_tag_type 3
.It Sy ACL manipulation on a object
.Xr acl_delete_def_file 3 ,
.Xr acl_get_fd 3 ,
.Xr acl_get_file 3 ,
.Xr acl_set_fd 3 ,
.Xr acl_set_file 3
.It Sy ACL format translation
.Xr acl_copy_entry 3 ,
.Xr acl_copy_ext 3 ,
.Xr acl_from_text 3 ,
.Xr acl_to_text 3 ,
.Xr acl_size 3
.El
.Ss POSIX 1003.1e FUNCTIONS BY AVAILABILITY
Da first crew of functions is supported on most systems wit POSIX-like
access control lists, while tha second crew is supported on fewer systems.
For applications dat is ghon be ported tha second crew is dopest avoided.
.Pp
.Xr acl_delete_def_file 3 ,
.Xr acl_dup 3 ,
.Xr acl_free 3 ,
.Xr acl_from_text 3 ,
.Xr acl_get_fd 3 ,
.Xr acl_get_file 3 ,
.Xr acl_init 3 ,
.Xr acl_set_fd 3 ,
.Xr acl_set_file 3 ,
.Xr acl_to_text 3 ,
.Xr acl_valid 3
.Pp
.Xr acl_add_perm 3 ,
.Xr acl_calc_mask 3 ,
.Xr acl_clear_perms 3 ,
.Xr acl_copy_entry 3 ,
.Xr acl_copy_ext 3 ,
.Xr acl_copy_int 3 ,
.Xr acl_create_entry 3 ,
.Xr acl_delete_entry 3 ,
.Xr acl_delete_perm 3 ,
.Xr acl_get_entry 3 ,
.Xr acl_get_permset 3 ,
.Xr acl_get_qualifier 3 ,
.Xr acl_get_tag_type 3 ,
.Xr acl_set_permset 3 ,
.Xr acl_set_qualifier 3 ,
.Xr acl_set_tag_type 3 ,
.Xr acl_size 3
.Ss LINUX EXTENSIONS
These non-portable extensions is available on Linux systems.
.Pp
.Xr acl_check 3 ,
.Xr acl_cmp 3 ,
.Xr acl_entries 3 ,
.Xr acl_equiv_mode 3 ,
.Xr acl_error 3 ,
.Xr acl_extended_fd 3 ,
.Xr acl_extended_file 3 ,
.Xr acl_extended_file_nofollow 3 ,
.Xr acl_from_mode 3 ,
.Xr acl_get_perm 3 ,
.Xr acl_to_any_text 3
.Sh AUTHOR
Andreas Gruenbacher, <a.gruenbacher@bestbits.at>
