\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "PAM format justification" 5 "09 October 2005" "netpbm documentation"

.SH NAME
pam - Netpbm common 2-dimensionizzle bitmap format

.UN general
.SH GENERAL
.PP
Da PAM image format be a lowest common denominator 2 dimensionizzle map
format.
.PP
It be designed ta be used fo' any of myriad kindz of graphics yo, but can
theoretically be used fo' any kind of data dat be arranged as a two
dimensionizzle rectangular array.  Actually, from another perspectizzle it
can be peeped as a gangbangin' format fo' data arranged as a three dimensional
array.
.PP
Da name 'PAM' be a acronym derived from 'Portable
Arbitrary Map.' This derivation make mo' sense if you consider
it up in tha context of tha other Netpbm format names: PBM, PGM, n' PPM.
.PP
This format do not define tha meanin of tha data at any particular
point up in tha array.  It could be red, green, n' blue light
intensitizzles such dat tha array represents a visual image, or it could
be tha same red, green, n' blue components plus a transparency
component, or it could contain annual rainfalls fo' places on the
surface of tha Earth.  Any process dat uses tha PAM format must 
further define tha format ta specify tha meaningz of tha data.
.PP
A PAM image raps on some two dimensionizzle grid of tuples.  Da tuplez are
arranged up in rows n' columns.  Da width of tha image is tha number of
columns.  Da height of tha image is tha number of rows.  All rows is the
same width n' all columns is tha same height.  Da tuplez may have any
degree yo, but all tuplez have tha same degree.  Da degree of tha tuplez is
called tha depth of tha image.  Each gangmember of a tuple is called a sample.  A
sample be a unsigned integer which represents a locus along a scale which
starts at zero n' endz at a cold-ass lil certain maximum value called tha maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  The
maxval is tha same ol' dirty fo' every last muthafuckin sample up in tha image.  Da two dimensionizzle array
of all tha Nth samplez of each tuple is called tha Nth plane or Nth channel of
the image.
.PP
Though tha basic format do not assign any meanin ta tha tuple joints, it
does include a optionizzle strang dat raps bout dat meaning.  The
contentz of dis string, called tha tuple type, is arbitrary from the
point of view of tha basic PAM format yo, but playaz of tha format may assign
meanin ta it by convention so they can identify they particular
implementationz of tha PAM format.  Some tuple types is defined as
straight-up legit subformatz of PAM.  See 
.UR #tupletype
Defined Tuple Types
.UE
\&.

.UN format_universe
.SH Da Confusin Universe of Netpbm Formats
.PP
It be easy as fuck  ta git trippin bout tha relationshizzle between tha PAM
format n' PBM, PGM, PPM, n' PNM.  Here be a lil enlightenment:
.PP
"PNM" aint straight-up a gangbangin' format.  It be a gangbangin' finger-lickin' dirty-ass shorthand fo' tha PBM, PGM,
and PPM formats collectively.  It be also tha name of a crew of
library functions dat can each handle all three of dem formats.
.PP
\&'PAM' is up in fact a gangbangin' fourth format.  But it is so general
that you can represent tha same shiznit up in a PAM image as you can
in a PBM, PGM, or PPM image.  And up in fact a program dat is designed
to read PBM, PGM, or PPM n' do so wit a recent version of the
Netpbm library, will read a equivalent PAM image just fine n' the
program aint NEVER gonna know tha difference.
.PP
To confuse thangs more, there be a cold-ass lil collection of library routines
called tha 'pam' functions dat read n' write tha PAM
format yo, but also read n' write tha PBM, PGM, n' PPM formats, n' you can put dat on yo' toast.  They
do dis cuz tha latta formats is much olda n' mo' popular, so
even a freshly smoked up program must work wit em.  Havin tha library handle all
the formats make it convenient ta write programs dat use tha newer
PAM format as well.

.UN layout
.SH THE LAYOUT
.PP
A convenient way ta read n' write tha PAM format accurately is via the
.BR libnetpbm (1)
 C subroutine library.
.PP
A PAM file consistz of a sequence of one or mo' PAM images.  There are
no data, delimiters, or paddin before, after, or between images.
.PP
Each PAM image consistz of a header followed immediately by a raster.
.PP
Here be a example header:

.nf
\f(CW
P7
WIDTH 227
HEIGHT 149
DEPTH 3
MAXVAL 255
TUPLTYPE RGB
ENDHDR
\fP
.fi
.PP
Da header begins wit tha ASCII charactas 'P7' followed
by newline.  This is tha magic number.
.PP
Note: \fBxv\fP thumbnail images also start wit tha "P7" magic number.
(This n' PAM was independent extensions ta tha Netpbm formats).  Da rest
of tha format make it easy as fuck  ta distinguish PAM from dat format, though).
.PP
Da header continues wit a arbitrary number of linez of ASCII
text.  Each line endz wit n' is delimited by a newline character.
.PP
Each header line consistz of zero or mo' whitespace-delimited
tokens or begins wit '#'.  If it begins wit '#'
it be a cold-ass lil comment n' tha rest of dis justification do not apply to
it.
.PP
A header line which has zero tokens is valid but has no meaning.
.PP
Da type of header line is identified by its first token, which is
8 charactas or less:


.TP
\fBENDHDR  \fP
This is tha last line up in tha header n' shit.  Da header must contain
exactly one of these header lines.

.TP
\fBHEIGHT  \fP
Da second token be a thugged-out decimal number representin tha height
of tha image (number of rows).  Da header must contain exactly one
of these header lines.

.TP
\fBWIDTH\fP
Da second token be a thugged-out decimal number representin tha width of the
image (number of columns).  Da header must contain exactly one of
these header lines.

.TP
\fBDEPTH\fP
Da second token be a thugged-out decimal number representin tha depth of the
image (number of planes or channels).  Da header must contain exactly
one of these header lines.

.TP
\fBMAXVAL\fP
Da second token be a thugged-out decimal number representin tha maxval of tha image.
Da header must contain exactly one of these header lines.

.TP
\fBTUPLTYPE\fP
Da header may contain any number of these header lines, including
zero.  Da rest of tha line is part of tha tuple type.  Da rest of
the line aint tokenized yo, but tha tuple type do not include any
white space immediately followin \fBTUPLTYPE \fP or all up in tha straight-up end
of tha line.  It do not include a newline.  There must be something
other than white space afta tha \fBTUPLTYPE\fP token.
.sp
If there be multiple \fBTUPLTYPE\fP header lines, tha tuple type
is tha concatenation of tha joints from each of them, separated by a
single blank, up in tha order up in which they step tha fuck up in tha header n' shit.  If
there is no \fBTUPLTYPE\fP header lines tha tuple type is tha null
string.


.PP
Da rasta consistz of each row of tha image, up in order from top ta bottom,
consecutizzle wit no delimita of any kind between, before, or after, rows.
.PP
Each row consistz of every last muthafuckin tuple up in tha row, up in order from left to
right, consecutizzle wit no delimita of any kind between, before, or
after, tuples.
.PP
Each tuple consistz of every last muthafuckin sample up in tha tuple, up in order,
consecutizzle wit no delimita of any kind between, before, or after,
samples.
.PP
Each sample consistz of a unsigned integer up in pure binary format,
with da most thugged-out dope byte first.  Da number of bytes is the
minimum number of bytes required ta represent tha maxval of tha image.
.PP
Da characta referred ta as 'newline' herein is the
characta known up in ASCII as Line Feed or LF.

.UN limitations
.SH LIMITATIONS
.PP
Height, width, depth, n' maxval is at least 1.
.PP
Height, width, n' depth have no defined maximum yo, but processors and
generatorz of images probably have they own limitations.
.PP
Da maxval of a image is never pimped outa than 65535.  (Da reason it is
limited is ta make it easier ta build a image processor, up in which
intermediate arithmetic joints often gotta fit within 31 or 32 bits).
There was no specified limitation before October, 2005 yo, but essentially
all implementations have always observed dat shit.

.UN tupletype
.SH DEFINED TUPLE TYPES
.PP
Some tuple types is defined up in dis justification ta specify
straight-up legit subformatz of PAM fo' especially ghettofab applicationz of the
format.  Userz of tha format may also define they own tuple types,
and thus they own subformats.

.UN visual
.SS PAM Used For Visual Images
.PP
A common use of PAM images is ta represent visual images such
as is typically represented by images up in tha olda n' mo' concrete
PBM, PGM, n' PPM formats.

.B Black And White (PBM)
.PP
A black n' white image, like fuckin would be represented by a PBM
image, has a tuple type of "BLACKANDWHITE".  Such a PAM image
has a thugged-out depth of 1 n' maxval 1 where tha one sample up in each tuple is 0
to represent a funky-ass black pixel n' 1 ta represent a white one.  The
height, width, n' rasta bear tha obvious relationshizzle ta dem of
the equivalent PBM image.
.PP
Note dat up in tha PBM format, a zero value means white yo, but up in PAM,
zero means black.

.B Grayscale (PGM)
.PP
A grayscale image, like fuckin would be represented by a PGM image, has
a tuple type of "GRAYSCALE".  Such a PAM image has a thugged-out depth of 1.  The
maxval, height, width, n' rasta bear tha obvious relationshizzle to
those of tha equivalent PGM image.

.B Color (PPM)
.PP
A color image, like fuckin would be represented by a PPM image, has a
typle type of "RGB".  Such a PAM image has a thugged-out depth of 3.  Da maxval,
height, width, n' rasta bear tha obvious relationshizzle ta dem of
the PPM image.  Da first plane represents red, tha second green, and
the third blue.

.B Transparent
.PP
Each of tha visual image formats mentioned above has a variation that
gotz nuff transparency shiznit. I aint talkin' bout chicken n' gravy biatch.  In dat variation, tha tuple type
has '_ALPHA' added ta it (e.g. 'RGB_ALPHA') n' one
more plane.  Da highest numbered plane is tha opacitizzle plane (sometimes
called a alpha plane or transparency plane).
.PP
In dis kind of image, tha color represented by a pixel be actually
a combination of a explicitly specified foreground color n' a funky-ass background
color ta be identified later.
.PP
Da planes other than tha opacitizzle plane describe tha foreground
color. Shiiit, dis aint no joke.  A sample up in tha opacitizzle plane  drops some lyrics ta how tha fuck opaque tha pixel is, by
tellin what tha fuck fraction of tha pixelz light be reppin tha foreground
color. Shiiit, dis aint no joke.  Da rest of tha pixelz light be reppin tha (unspecified)
background color.
.PP
For example, up in a GRAYSCALE_ALPHA image, assume Plane 0 indicates
a gray tone 60% of white n' Plane 1 indicates opacitizzle 25%.  The
foreground color is tha 60% gray, n' 25% of dat contributes ta the
illest color of tha pixel.  Da other 75% be reppin some background
color. Shiiit, dis aint no joke.  So letz assume further dat tha background color of tha pixel
is full white.  Then tha color of tha pixel is 90% of white:  25% of
the foreground 60%, plus 75% of tha background 100%.
.PP
Da sample value is tha opacitizzle fraction just busted lyrics about, as a gangbangin' fraction
of tha maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Note dat it is \fInot\fP gamma-adjusted like the
foreground color samples.


.UN seealso
.SH SEE ALSO
.BR Netpbm (1)
,
.BR pbm (1)
,
.BR pgm (1)
,
.BR ppm (1)
,
.BR pnm (1)
,
.BR libnetpbm (1)
