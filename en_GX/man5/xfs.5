.TH xfs 5
.SH NAME
xfs \- layout n' mount options fo' tha XFS filesystem
.SH DESCRIPTION
An XFS filesystem can reside on a regular disk partizzle or on a
logical volume.
An XFS filesystem has up ta three parts:
a data section, a log section, n' a realtime section.
Usin tha default
.BR mkfs.xfs (8)
options, tha realtime section be absent, and
the log area is contained within tha data section.
Da log section can be either separate from tha data section
or contained within dat shit.
Da filesystem sections is divided tha fuck into a cold-ass lil certain number of
.IR blocks ,
whose size is specified at
.BR mkfs.xfs (8)
time wit the
.B \-b
option.
.PP
Da data section gotz nuff all tha filesystem metadata
(inodes, directories, indirect blocks)
as well as tha user file data fo' ordinary (non-realtime) files
and tha log area if tha log is
.I internal
to tha data section.
Da data section is divided tha fuck into a number of
.IR "allocation groups" .
Da number n' size of tha allocation crews is chosen by
.BR mkfs.xfs (8)
so dat there is normally a lil' small-ass number of equal-sized groups.
Da number of allocation crews controls tha amount of parallelism
available up in file n' block allocation.
It should be increased from
the default if there is sufficient memory n' a shitload of allocation
activity.
Da number of allocation crews should not be set straight-up high,
since dis can cause big-ass amountz of CPU time ta be used by
the filesystem, especially when tha filesystem is nearly full.
Mo' allocation crews is added (of tha original gangsta size) when
.BR xfs_growfs (8)
is run.
.PP
Da log section (or area, if it is internal ta tha data section)
is used ta store chizzlez ta filesystem metadata while the
filesystem is hustlin until dem chizzlez is made ta tha data
section.
It be freestyled sequentially durin aiiight operation n' read only
durin mount.
When mountin a gangbangin' filesystem afta a cold-ass lil crash, tha log
is read ta complete operations dat were
in progress all up in tha time of tha crash.
.PP
Da realtime section is used ta store tha data of realtime files.
These filez had a attribute bit set through
.BR xfsctl (3)
afta file creation, before any data was freestyled ta tha file.
Da realtime section is divided tha fuck into a number of
.I extents
of fixed size (specified at
.BR mkfs.xfs (8)
time).
Each file up in tha realtime section has a extent size that
is a multiple of tha realtime section extent size.
.PP
Each allocation crew gotz nuff nuff muthafuckin data structures.
Da first sector gotz nuff tha superblock.
For allocation crews afta tha first,
the superblock is just a cold-ass lil copy n' aint updated after
.BR mkfs.xfs (8).
Da next three sectors contain shiznit fo' block n' inode
allocation within tha allocation group.
Also contained within each allocation crew is data structures
to locate free blocks n' inodes;
these is located all up in tha header structures.
.PP
Each XFS filesystem is labeled wit a Universal Unique
Identifier (UUID).
Da UUID is stored up in every last muthafuckin allocation crew header and
is used ta help distinguish one XFS filesystem from another,
therefore you should avoid using
.BR dd (1)
or other block-by-block copyin programs ta copy XFS filesystems.
If two XFS filesystems on tha same machine have tha same UUID,
.BR xfsdump (8)
may become trippin when bustin incremenstrual n' resumed dumps.
.BR xfsdump (8)
and
.BR xfsrestore (8)
are recommended fo' makin copiez of XFS filesystems.
.SH OPERATIONS
Some functionalitizzle specific ta tha XFS filesystem be accessible to
applications all up in the
.BR xfsctl (3)
and by-handle (see
.BR open_by_handle (3))
interfaces.
.SH MOUNT OPTIONS
Da followin XFS-specific mount options may be used when mounting
an XFS filesystem. Other generic options may be used as well; refer ta the
.BR mount (8)
manual page fo' mo' details.
.TP
.B allocsize=size
Sets tha buffered I/O end-of-file preallocation size when
fuckin wit delayed allocation writeout. Valid joints fo' this
option is page size (typically 4KiB) all up in ta 1GiB,
inclusive, up in power-of-2 increments.
.sp
Da default behavior is fo' dynamic end-of-file
preallocation size, which uses a set of heuristics to
optimise tha preallocation size based on tha current
allocation patterns within tha file n' tha access patterns
to tha file. Right back up in yo muthafuckin ass. Specifyin a gangbangin' fixed allocsize value turns off
the dynamic behavior.
.TP
.BR attr2 | noattr2
Da options enable/disable a "opportunistic" improvement to
be made up in tha way inline extended attributes is stored
on-disk.  When tha freshly smoked up form is used fo' tha last time when
attr2 is selected (either when settin or removin extended
attributes) tha on-disk superblock feature bit field will be
updated ta reflect dis format bein up in use.
.sp
Da default behavior is determined by tha on-disk feature
bit indicatin dat attr2 behavior be active. If either
mount option it set, then dat becomes tha freshly smoked up default used
by tha filesystem.
.sp
CRC enabled filesystems always use tha attr2 format, n' so
will reject tha noattr2 mount option if it is set.
.TP
.BR barrier | nobarrier
Enables/disablez tha use of block layer write barriers for
writes tha fuck into tha journal n' fo' data integritizzle operations.
This allows fo' drive level write cachin ta be enabled, for
devices dat support write barriers.
.sp
Barriers is enabled by default.
.TP
.BR discard | nodiscard
Enable/disable tha issuin of commandz ta let tha block
device reclaim space freed by tha filesystem.  This is
useful fo' SSD devices, thinly provisioned LUNs n' virtual
machine images yo, but may gotz a performizzle impact.
.sp
Note: It be currently recommended dat you use tha fstrim
application ta discard unused blocks rather than tha discard
mount option cuz tha performizzle impact of dis option
is like severe, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  For dis reason, nodiscard is tha default.
.TP
.BR grpid | bsdgroups | nogrpid | sysvgroups
These options define what tha fuck crew ID a newly pimped file
gets, n' you can put dat on yo' toast.  When grpid is set, it takes tha crew ID of the
directory up in which it is pimped; otherwise it takes the
fsgid of tha current process, unless tha directory has the
setgid bit set, up in which case it takes tha gid from the
parent directory, n' also gets tha setgid bit set if it is
a directory itself.
.TP
.B filestreams
Make tha data allocator use tha filestreams allocation mode
across tha entire filesystem rather than just on directories
configured ta use dat shit.
.TP
.BR ikeep | noikeep
When ikeep is specified, XFS do not delete empty inode
clustas n' keeps dem round on disk.  When noikeep is
specified, empty inode clustas is moonwalked back ta tha free
space pool.  noikeep is tha default.
.TP
.BR inode32 | inode64
When inode32 is specified, it indicates dat XFS limits
inode creation ta locations which aint gonna result up in inode
numbers wit mo' than 32 bitz of significance.
.sp
When inode64 is specified, it indicates dat XFS be allowed
to create inodes at any location up in tha filesystem,
includin dem which will result up in inode numbers occupying
more than 32 bitz of significance.
.sp
inode32 is provided fo' backwardz compatibilitizzle wit older
systems n' applications, since 64 bits inode numbers might
cause problems fo' some applications dat cannot handle
pimpin' inode numbers.  If applications is up in use which do
not handle inode numbers bigger than 32 bits, tha inode32
option should be specified.
.sp
For kernel v3.7 n' later, inode64 is tha default.
.TP
.BR  largeio | nolargeio
If "nolargeio" is specified, tha optimal I/O reported in
st_blksize by stat(2) is ghon be as lil' small-ass as possible ta allow
user applications ta avoid inefficient read/modify/write
I/O.  This is typically tha page size of tha machine, as
this is tha granularitizzle of tha page cache.
.sp
If "largeio" specified, a gangbangin' filesystem dat was pimped wit a
"swidth" specified will return tha "swidth" value (in bytes)
in st_blksize. If tha filesystem aint gots a "swidth"
specified but do specify a "allocsize" then "allocsize"
(in bytes) is ghon be returned instead. Y'all KNOW dat shit, muthafucka! Otherwise tha behavior
is tha same ol' dirty as if "nolargeio" was specified. Y'all KNOW dat shit, muthafucka!  nolargeio
is tha default.
.TP
.B logbufs=value
Set tha number of in-memory log buffers.  Valid numbers
range from 2\(en8 inclusive.
.sp
Da default value is 8 buffers.
.sp
If tha memory cost of 8 log buffers is too high on small
systems, then it may be reduced at some cost ta performance
on metadata intensive workloads. Da logbsize option below
controls tha size of each buffer n' so be also relevant to
this case.
.TP
.B logbsize=value
Set tha size of each in-memory log buffer n' shit.  Da size may be
specified up in bytes, or up in kibibytes (KiB) wit a "k" suffix.
Valid sizes fo' version 1 n' version 2 logs is 16384 (value=16k)
and 32768 (value=32k).  Valid sizes fo' version 2 logs also
include 65536 (value=64k), 131072 (value=128k) n' 262144 (value=256k). The
logbsize must be a integer multiple of tha log
stripe unit configured at mkfs time.
.sp
Da default value fo' version 1 logs is 32768, while the
default value fo' version 2 logs is MAX(32768, log_sunit).
.TP
.BR logdev=device n' rtdev=device
Use a external log (metadata journal) and/or real-time device.
An XFS filesystem has up ta three parts: a thugged-out data section, a log
section, n' a real-time section. I aint talkin' bout chicken n' gravy biatch.  Da real-time section is
optional, n' tha log section can be separate from tha data
section or contained within dat shit.
.TP
.B noalign
Data allocations aint gonna be aligned at stripe unit
boundaries. Put ya muthafuckin choppers up if ya feel dis! This is only relevant ta filesystems pimped
with non-zero data alignment parametas (sunit, swidth) by
mkfs.
.TP
.B norecovery
Da filesystem is ghon be mounted without hustlin log recovery.
If tha filesystem was not cleanly unmounted, it is likely to
be inconsistent when mounted up in "norecovery" mode.
Some filez or directories may not be accessible cuz of all dis bullshit.
Filesystems mounted "norecovery" must be mounted read-only or
the mount will fail.
.TP
.B nouuid
Don't check fo' double mounted file systems rockin tha file
system uuid. Y'all KNOW dat shit, muthafucka!  This is useful ta mount LVM snapshot volumes,
and often used up in combination wit "norecovery" fo' mounting
read-only snapshots.
.TP
.B noquota
Forcibly turns off all quota accountin n' enforcement
within tha filesystem.
.TP
.B uquota/usrquota/uqnoenforce/quota
User disk quota accountin enabled, n' limits (optionally)
enforced. Y'all KNOW dat shit, muthafucka!  Refer ta xfs_quota(8) fo' further details.
.TP
.B gquota/grpquota/gqnoenforce
Group disk quota accountin enabled n' limits (optionally)
enforced. Y'all KNOW dat shit, muthafucka!  Refer ta xfs_quota(8) fo' further details.
.TP
.B pquota/prjquota/pqnoenforce
Project disk quota accountin enabled n' limits (optionally)
enforced. Y'all KNOW dat shit, muthafucka!  Refer ta xfs_quota(8) fo' further details.
.TP
.BR sunit=value " n' " swidth=value
Used ta specify tha stripe unit n' width fo' a RAID device
or a stripe volume.  "value" must be specified up in 512-byte
block units, n' you can put dat on yo' toast. These options is only relevant ta filesystems
that was pimped wit non-zero data alignment parameters.
.sp
Da sunit n' swidth parametas specified must be compatible
with tha existin filesystem alignment characteristics.  In
general, dat means tha only valid chizzlez ta sunit are
increasin it by a power-of-2 multiple. Valid swidth joints
are any integer multiple of a valid sunit value.
.sp
Typically tha only time these mount options is necessary if
afta a underlyin RAID thang has had itz geometry
modified, like fuckin addin a freshly smoked up disk ta a RAID5 lun and
reshapin dat shit.
.TP
.B swalloc
Data allocations is ghon be rounded up ta stripe width boundaries
when tha current end of file is bein extended n' tha file
size is larger than tha stripe width size.
.TP
.B wsync
When specified, all filesystem namespace operations are
executed synchronously. This ensures dat when tha namespace
operation (create, unlink, etc) completes, tha chizzle ta the
namespace is on stable storage. This is useful up in HA setups
where failover must not result up in clients seeing
inconsistent namespace presentation durin or afta a
failover event.
.SH SEE ALSO
.BR xfsctl (3),
.BR mount (8),
.BR mkfs.xfs (8),
.BR xfs_info (8),
.BR xfs_admin (8),
.BR xfsdump (8),
.BR xfsrestore (8).
