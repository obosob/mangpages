.TH HOSTS_OPTIONS 5
.SH NAME
hosts_options \- host access control language extensions
.SH DESCRIPTION
This document raps bout optionizzle extensions ta tha language busted lyrics about
in tha hosts_access(5) document. Da extensions is enabled at program
build time. For example, by editin tha Makefile n' turnin on tha 
PROCESS_OPTIONS compile-time option.
.PP
Da extensible language uses tha followin format:
.sp
.ti +3
daemon_list : client_list : option : option ...
.PP
Da first two fieldz is busted lyrics bout up in tha hosts_access(5) manual page.
Da remainder of tha rulez be a list of zero or mo' options.  Any ":"
charactas within options should be protected wit a funky-ass backslash.
.PP
An option iz of tha form "keyword" or "keyword value". Options are
processed up in tha specified order n' shit. Right back up in yo muthafuckin ass. Some options is subjected to
%<letter> substitutions. For tha sake of backwardz compatibilitizzle with
earlier versions, a "=" is permitted between keyword n' value.
.SH LOGGING
.IP "severitizzle mail.info"
.IP "severitizzle notice"
Change tha severitizzle level at which tha event is ghon be logged. Y'all KNOW dat shit, muthafucka! Facility
names (like fuckin mail) is optional, n' is not supported on systems
with olda syslog implementations. Da severitizzle option can be used
to emphasize or ta ignore specific events.
.SH ACCESS CONTROL
.IP "allow"
.IP "deny"
Grant (deny) service. These options must step tha fuck up all up in tha end of a rule.
.PP
Da \fIallow\fR n' \fIdeny\fR keywordz make it possible ta keep all
access control rulez within a single file, fo' example up in the
\fIhosts.allow\fR file.
.sp
To permit access from specific hosts only:
.sp
.ne 2
.ti +3
ALL: .friendly.domain: ALLOW
.ti +3
ALL: ALL: DENY
.sp
To permit access from all hosts except all dem shiznit makers:
.sp
.ne 2
.ti +3
ALL: .bad.domain: DENY
.ti +3
ALL: ALL: ALLOW
.sp
Notice tha leadin dot on tha domain name patterns.
.SH RUNNING OTHER COMMANDS
.IP "spawn shell_command"
Execute, up in a cold-ass lil lil pimp process, tha specified shell command, after
performin tha %<letter> expansions busted lyrics bout up in tha hosts_access(5)
manual page.  Da command is executed wit stdin, stdout n' stderr
connected ta tha null device, so dat it won\'t mess up the
conversation wit tha client host. Example:
.sp
.nf
.ti +3
spawn (/some/where/safe_finger -l @%h | /usr/ucb/mail root) &
.fi
.sp
executes, up in a funky-ass background lil pimp process, tha shell command "safe_finger
-l @%h | mail root" afta replacin %h by tha name or address of the
remote host.
.sp
Da example uses tha "safe_finger" command instead of tha regular
"finger" command, ta limit possible damage from data busted by tha finger
server n' shit. Da "safe_finger" command is part of tha daemon wrapper
package; it aint nuthin but a wrapper round tha regular finger command dat filters
the data busted by tha remote host.
.IP "twist shell_command"
Replace tha current process by a instizzle of tha specified shell
command, afta struttin tha %<letter> expansions busted lyrics bout up in the
hosts_access(5) manual page.  Stdin, stdout n' stderr is connected to
the client process. This option must step tha fuck up all up in tha end of a rule.
.sp
To bust a cold-ass lil customized bounce message ta tha client instead of
runnin tha real ftp daemon:
.sp
.nf
.ti +3
in.ftpd : ... : twist /bin/echo 421 Some bounce message
.fi
.sp
For a alternatizzle way ta rap ta client processes, peep the
\fIbanners\fR option below.
.sp
To run /some/other/in.telnetd without shittin' on its command-line
array or its process environment:
.sp
.nf
.ti +3
in.telnetd : ... : twist PATH=/some/other; exec in.telnetd
.fi
.sp
Warning:  up in case of UDP skillz, do not twist ta commandz dat use
the standard I/O or tha read(2)/write(2) routines ta rap with
the client process; UDP requires other I/O primitives.
.SH NETWORK OPTIONS
.IP "keepkickin it"
Causes tha server ta periodically bust a message ta tha client.  The
connection is considered fucked up when tha client do not respond. Y'all KNOW dat shit, muthafucka! The
keepkickin it option can be useful when playas turn off they machine while
it is still connected ta a server n' shit.  Da keepkickin it option aint useful
for datagram (UDP) skillz.
.IP "linger number_of_seconds"
Specifies how tha fuck long tha kernel will try ta serve up not-yet delivered
data afta tha server process closes a cold-ass lil connection. I aint talkin' bout chicken n' gravy biatch. 
.SH USERNAME LOOKUP
.IP "rfc931 [ timeout_in_secondz ]"
Look up tha client user name wit tha RFC 931 (TAP, IDENT, RFC 1413)
protocol.  This option is silently ignored up in case of skillz based on
transports other than TCP.  It requires dat tha client system runs an
RFC 931 (IDENT, etc.) -compliant daemon, n' may cause noticeable
delays wit connections from non-UNIX clients, n' you can put dat on yo' toast.  Da timeout period is
optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If no timeout is specified a cold-ass lil compile-time defined default
value is taken.
.SH MISCELLANEOUS
.IP "banners /some/directory"
Look fo' a gangbangin' file up in `/some/directory' wit tha same name as tha daemon
process (for example in.telnetd fo' tha telnet service), n' copy its
contents ta tha client. Newline charactas is replaced by
carriage-return newline, n' %<letter> sequences is expanded (see
the hosts_access(5) manual page).
.sp
Da tcp wrappers source code distribution serves up a sample makefile
(Banners.Makefile) fo' convenient banner maintenance.
.sp
Warning: banners is supported fo' connection-oriented (TCP) network
skillz only.
.IP "nice [ number ]"
Change tha sick value of tha process (default 10).  Specify a positive
value ta spend mo' CPU resources on other processes. 
.IP "setenv name value"
Place a (name, value) pair tha fuck into tha process environment. Da value is
subjected ta %<letter> expansions n' may contain whitespace (but
leadin n' trailin blanks is stripped off).
.sp
Warning: nuff network daemons reset they environment before spawnin a
login or shell process.
.IP "umask 022"
Like tha umask command dat is built tha fuck into tha shell fo' realz. An umask of 022
prevents tha creation of filez wit crew n' ghetto write permission.
Da umask argument should be a octal number.
.IP "user no muthafucka"
.IP "user no muthafucka.kmem"
Assume tha privilegez of tha "nobody" userid (or user "nobody", group
"kmem"). Da first form is useful wit inetd implementations dat run
all skillz wit root privilege. Da second form is useful for
skillz dat need special crew privileges only.
.SH DIAGNOSTICS
When a syntax error is found up in a access control rule, tha error
is reported ta tha syslog daemon; further options is ghon be ignored,
and steez is denied.
.SH SEE ALSO
hosts_access(5), tha default access control language
.SH AUTHOR
.na
.nf
Wietse Venema (wietse@wzv.win.tue.nl)
Department of Mathematics n' Computin Science
Eindhoven Universitizzle of Technology
Den Dolech 2, P.O. Box 513, 
5600 MB Eindhoven, Da Netherlands
\" @(#) hosts_options.5 1.10 94/12/28 17:42:28
