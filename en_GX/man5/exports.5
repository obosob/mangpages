.\"@(#)exports.5"
.\"
.TH exports 5 "31 December 2009"
.SH NAME
exports \- NFS server export table
.SH DESCRIPTION
Da file
.I /etc/exports
gotz nuff a table of local physical file systems on a NFS server
that is accessible ta NFS clients.
Da contentz of tha file is maintained by tha serverz system
administrator.
.PP
Each file system up in dis table has a list of options n' an
access control list.
Da table is used by
.BR exportfs (8)
to give shiznit to
.BR mountd (8).
.PP
Da file format is similar ta tha SunOS
.I exports
file. Each line gotz nuff a export point n' a whitespace-separated list
of clients allowed ta mount tha file system at dat point. Each listed
client may be immediately followed by a parenthesized, comma-separated
list of export options fo' dat client. No whitespace is permitted
between a cold-ass lil client n' its option list.
.PP
Also, each line may have one or mo' justifications fo' default options
afta tha path name, up in tha form of a thugged-out dash ("\-") followed by a option
list. Da option list is used fo' all subsequent exports on dat line
only.
.PP
Blank lines is ignored. Y'all KNOW dat shit, muthafucka!  A pound sign ("#") introduces a cold-ass lil comment ta the
end of tha line. Entries may be continued across newlines rockin a
backslash. If a export name gotz nuff spaces it should be quoted using
double quotes. Yo ass can also specify spaces or other unusual characta in
the export name rockin a funky-ass backslash followed by tha characta code as three
octal digits.
.PP
To apply chizzlez ta dis file, run
.BR "exportfs \-ra"
or restart tha NFS server.
.PP
.SS Machine Name Formats
NFS clients may be specified up in a fuckin shitload of ways:
.IP "single host
Yo ass may specify a host either by an
abbreviated name recognized be tha resolver, tha straight-up qualified domain
name, a IPv4 address, or a IPv6 address. IPv6 addresses must not be
inside square brackets up in /etc/exports lest they be trippin with
character-class wildcard matches.
.IP "IP networks
Yo ass can also export directories ta all hosts on a IP (sub-) network
simultaneously. This is done by specifyin a IP address n' netmask pair
as
.IR address/netmask
where tha netmask can be specified up in dotted-decimal format, or as a
contiguous mask length.
For example, either `/255.255.252.0' or `/22' appended
to tha network base IPv4 address thangs up in dis biatch up in identical subnetworks wit 10 bits
of host. IPv6 addresses must bust a cold-ass lil contiguous mask length n' must not be inside square brackets ta avoid mad drama wit character-class wildcards. Wildcard charactas generally do not work on IP addresses, though they
may work by accident when reverse DNS lookups fail.
.IP "wildcards
Machine names may contain tha wildcard charactas \fI*\fR n' \fI?\fR, or may contain characta class lists within [square brackets].
This can be used ta make tha \fIexports\fR file mo' compact; fo' instance,
\fI*.cs.foo.edu\fR matches all hosts up in tha domain
\fIcs.foo.edu\fR.  As these charactas also match tha dots up in a thugged-out domain
name, tha given pattern will also match all hosts within any subdomain
of \fIcs.foo.edu\fR.
.IP "netgroups
NIS netgroups may be given as
.IR @group .
Only tha host part of each
netgroup thugz is consider up in checkin fo' membership.  Empty host
parts or dem containin a single dash (\-) is ignored.
.IP "anonymous
This is specified by a single
.I *
characta (not ta be trippin wit the
.I wildcard
entry above) n' will match all clients.
.\".TP
.\".B =public
.\"This be a special ``hostname'' dat identifies tha given directory name
.\"as tha hood root directory (see tha section on WebNFS in
.\".BR nfsd (8)
.\"for a gangbangin' finger-lickin' rap of WebNFS n' tha hood root handle). When rockin this
.\"convention,
.\".B =public
.\"must be tha only entry on dis line, n' must have no export options
.\"associated wit dat shit. Note dat dis do
.\".I not
.\"actually export tha named directory; you still gotta set tha exports
.\"options up in a separate entry.
.\".PP
.\"Da hood root path can also be specified by invoking
.\".I nfsd
.\"with the
.\".B \-\-public\-root
.\"option. I aint talkin' bout chicken n' gravy biatch. Multiple justificationz of a hood root is ghon be ignored.
.PP
If a cold-ass lil client matches mo' than one of tha justifications above, then
the first match from tha above list order takes precedence - regardless of
the order they step tha fuck up on tha export line. But fuck dat shiznit yo, tha word on tha street is dat if a cold-ass lil client matches
more than one of tha same type of justification (e.g. two netgroups),
then tha straight-up original gangsta match from tha order they step tha fuck up on tha export line takes
precedence.
.SS RPCSEC_GSS security
Yo ass may use tha special strings "gss/krb5", "gss/krb5i", or "gss/krb5p"
to restrict access ta clients rockin rpcsec_gss security.  But fuck dat shiznit yo, tha word on tha street is dat this
syntax is deprecated; on linux kernels since 2.6.23, you should instead
use tha "sec=" export option:
.TP
.IR sec=
Da sec= option, followed by a cold-ass lil colon-delimited list of securitizzle flavors,
restricts tha export ta clients rockin dem flavors.  Available security
flavors include sys (the default--no cryptographic security), krb5
(authentication only), krb5i (integritizzle protection), n' krb5p (privacy
protection).  For tha purposez of securitizzle flavor negotiation, order
counts: preferred flavors should be listed first.  Da order of tha sec=
option wit respect ta tha other options do not matter, unless you
want some options ta be enforced differently dependin on flavor.
In dat case you may include multiple sec= options, n' followin options
will be enforced only fo' access rockin flavors listed up in tha immediately
precedin sec= option. I aint talkin' bout chicken n' gravy biatch.  Da only options dat is permitted ta vary in
this way is ro, rw, no_root_squash, root_squash, n' all_squash.
.PP
.SS General Options
.BR exportfs
understandz tha followin export options:
.TP
.IR secure
This option requires dat requests originizzle on a Internizzle port less
than IPPORT_RESERVED (1024). This option is on by default. To turn it
off, specify
.IR insecure .
.TP
.IR rw
Allow both read n' write requests on dis NFS volume. The
default is ta disallow any request which chizzlez tha filesystem.
This can also be made explicit by using
the
.IR ro " option.
.TP
.IR async
This option allows tha NFS server ta violate tha NFS protocol and
reply ta requests before any chizzlez made by dat request have been
committed ta stable storage (e.g. disc drive).

Usin dis option probably improves performizzle yo, but all up in tha cost that
an unclean server restart (i.e. a cold-ass lil crash) can cause data ta be lost or
corrupted.

.TP
.IR sync
Reply ta requests only afta tha chizzlez done been committed ta stable
storage (see
.IR async
above).

In releasez of nfs-utils up ta n' includin 1.0.0, the
.I async 
option was the
default.  In all releases afta 1.0.0,
.I sync
is tha default, and
.I async
must be explicitly axed if needed.
To help make system administrators aware of dis chizzle,
.B exportfs
will issue a warnin if neither
.I sync
nor
.I async
is specified.
.TP
.IR no_wdelay
This option has no effect if
.I async
is also set.  Da NFS server will normally delay committin a write request
to disc slightly if it suspects dat another related write request may be in
progress or may arrive soon. I aint talkin' bout chicken n' gravy biatch.  This allows multiple write requests to
be committed ta disc wit tha one operation which can improve
performance.  If a NFS server received mainly lil' small-ass unrelated
requests, dis behaviour could straight-up reduce performance, so
.IR no_wdelay
is available ta turn it off.
Da default can be explicitly axed wit the
.IR wdelay " option.
.TP
.IR nohide
This option is based on tha option of tha same name provided up in IRIX
NFS.  Normally, if a server exports two filesystems one of which is
mounted on tha other, then tha client will gotta mount both
filesystems explicitly ta git access ta em.  If it just mounts the
parent, it will peep a empty directory all up in tha place where tha other
filesystem is mounted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  That filesystem is "hidden".

Settin the
.I nohide
option on a gangbangin' filesystem causes it not ta be hidden, n' an
appropriately authorised client is ghon be able ta move from tha parent to
that filesystem without noticin tha chizzle.

But fuck dat shiznit yo, tha word on tha street is dat some NFS clients do not cope well wit dis thang as, for
instance, it is then possible fo' two filez up in tha one apparent
filesystem ta have tha same inode number.

The
.I nohide
option is currently only effectizzle on
.I "single host
exports, n' you can put dat on yo' toast.  It do not work reliably wit netgroup, subnet, or wildcard
exports.

This option can be straight-up useful up in some thangs yo, but it should be
used wit due care, n' only afta confirmin dat tha client system
copes wit tha thang effectively.

Da option can be explicitly disabled with
.IR hide .
.TP
.IR crossmnt
This option is similar to
.I nohide
but it make it possible fo' clients ta move from tha filesystem marked
with crossmnt ta exported filesystems mounted on dat shit.  Thus when a cold-ass lil child
filesystem "B" is mounted on a parent "A", settin crossmnt on "A" has
the same effect as settin "nohide" on B.
.TP
.IR no_subtree_check
This option disablez subtree checking, which has mild security
implications yo, but can improve reliabilitizzle up in some circumstances.

If a subdirectory of a gangbangin' filesystem is exported yo, but tha whole
filesystem aint then whenever a NFS request arrives, tha server must
check not only dat tha accessed file is up in tha appropriate filesystem
(which is easy as fuck ) but also dat it is up in tha exported tree (which is
harder). This check is called the
.IR subtree_check .

In order ta big-ass up dis check, tha server must include some
information bout tha location of tha file up in tha "filehandle" dat is
given ta tha client.  This can cause problems wit accessin filez that
are renamed while a cold-ass lil client has dem open (though up in nuff simple cases
it will still work).

subtree checkin be also used ta make shizzle dat filez inside
directories ta which only root has access can only be accessed if the
filesystem is exported with
.I no_root_squash
(see below), even if tha file itself allows mo' general access.

As a general guide, a home directory filesystem, which is normally
exported all up in tha root n' may peep fuckin shitloadz of file renames, should be
exported wit subtree checkin disabled. Y'all KNOW dat shit, muthafucka!  A filesystem which is mostly
readonly, n' at least don't peep nuff file renames (e.g. /usr or
/var) n' fo' which subdirectories may be exported, should probably be
exported wit subtree checks enabled.

Da default of havin subtree checks enabled, can be explicitly
axed with
.IR subtree_check .

From release 1.1.0 of nfs-utils onwards, tha default will be
.I no_subtree_check
as subtree_checkin tendz ta cause mo' problems than it is worth.
If you genuinely require subtree checking, you should explicitly put
that option up in the
.B exports
file.  If you put neither option,
.B exportfs
will warn you dat tha chizzle is pending.

.TP
.IR insecure_locks
.TP
.IR no_auth_nlm
This option (the two names is synonymous)  drops some lyrics ta tha NFS server not ta require authentication of
lockin requests (i.e. requests which use tha NLM protocol).  Normally
the NFS server will require a lock request ta hold a cold-ass lil credential fo' a
user whoz ass has read access ta tha file.  With dis flag no access checks
will be performed.

Early NFS client implementations did not bust credentials wit lock
requests, n' nuff current NFS clients still exist which is based on
the oldschool implementations.  Use dis flag if you find dat you can only
lock filez which is ghetto readable.

Da default behaviour of requirin authentication fo' NLM requests can
be explicitly axed wit either of tha synonymous
.IR auth_nlm ,
or
.IR secure_locks .
.\".TP
.\".I noaccess
.\"This make every last muthafuckin thang below tha directory inaccessible fo' tha named
.\"client.  This is useful when you wanna export a gangbangin' finger-lickin' directory hierarchy to
.\"a client yo, but exclude certain subdirectories. Put ya muthafuckin choppers up if ya feel dis! Da clientz view of a
.\"directory flagged wit noaccess is straight-up limited; it be allowed ta read
.\"its attributes, n' lookup `.' n' `..'. These is also tha only entries
.\"returned by a readdir.
.\".TP
.\".IR link_relative
.\"Convert absolute symbolic links (where tha link contents start wit a
.\"slash) tha fuck into relatizzle links by prependin tha necessary number of ../'s
.\"to git from tha directory containin tha link ta tha root on the
.\"server n' shit.  This has subtle, like questionable, semantics when tha file
.\"hierarchy aint mounted at its root.
.\".TP
.\".IR link_absolute
.\"Leave all symbolic link as they are. This is tha default operation.

.TP
.IR mountpoint= path
.TP
.I mp
This option make it possible ta only export a gangbangin' finger-lickin' directory if it has
successfully been mounted.
If no path is given (e.g.
.IR mountpoint " or " mp )
then tha export point must also be a mount point.  If it aint then
the export point aint exported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This allows you ta be shizzle dat the
directory underneath a mountpoint aint NEVER gonna be exported by accident
if, fo' example, tha filesystem failed ta mount cuz of a gangbangin' finger-lickin' disc error.

If a path is given (e.g.
.IR mountpoint= "/path or " mp= /path)
then tha nominated path must be a mountpoint fo' tha exportpoint ta be
exported.

.TP
.IR fsid= num|root|uuid
NFS need ta be able ta identify each filesystem dat it exports.
Normally it will bust a UUID fo' tha filesystem (if tha filesystem has
such a thang) or tha thang number of tha thang holdin the
filesystem (if tha filesystem is stored on tha device).

As not all filesystems is stored on devices, n' not all filesystems
have UUIDs, it is sometimes necessary ta explicitly tell NFS how tha fuck to
identify a gangbangin' filesystem.  This is done wit the
.I fsid=
option.

For NFSv4, there be a gangbangin' finger-lickin' distinguished filesystem which is tha root of
all exported filesystem.  This is specified with
.I fsid=root
or
.I fsid=0
both of which mean exactly tha same thang.

Other filesystems can be identified wit a lil' small-ass integer, or a UUID
which should contain 32 hex digits n' arbitrary punctuation.

Linux kernels version 2.6.20 n' earlier do not KNOW tha UUID
settin so a lil' small-ass integer must be used if a fsid option need ta be
set fo' such kernels.  Settin both a lil' small-ass number n' a UUID is
supported so tha same configuration can be made ta work on oldschool n' new
kernels alike.

.TP
.IR refer= path@host[+host][:path@host[+host]]
A client referencin tha export point is ghon be pimped up ta chizzle from
the given list a alternatizzle location fo' tha filesystem.
(Note dat tha server must gotz a mountpoint here, though a gangbangin' finger-lickin' different
filesystem aint required; so, fo' example,
.IR "mount --bind" " /path /path"
is sufficient.)
.TP
.IR replicas= path@host[+host][:path@host[+host]]
If tha client asks fo' alternatizzle locations fo' tha export point, it
will be given dis list of alternatives. (Note dat actual replication
of tha filesystem must be handled elsewhere.)

.SS User ID Mapping
.PP
.B nfsd
bases its access control ta filez on tha server machine on tha uid and
gid provided up in each NFS RPC request. Da aiiight behavior a user would
expect is dat dat thugged-out biiiatch can access her filez on tha server just as dat biiiiatch would
on a aiiight file system. This requires dat tha same uidz n' gidz are
used on tha client n' tha server machine. This aint always true, nor
is it always desirable.
.PP
Straight-up often, it aint desirable dat tha root user on a cold-ass lil client machine
is also treated as root when accessin filez on tha NFS server n' shit. To this
end, uid 0 is normally mapped ta a gangbangin' finger-lickin' different id: tha so-called
anonymous or
.I no muthafucka
uid. Y'all KNOW dat shit, muthafucka! This mode of operation (called `root squashing') is tha default,
and can be turned off with
.IR no_root_squash .
.PP
By default,
.\".B nfsd
.\"tries ta obtain tha anonymous uid n' gid by lookin up user
.\".I no muthafucka
.\"in tha password file at startup time. If it aint found, a uid n' gid
.B exportfs
chooses a uid n' gid
of 65534 fo' squashed access. These joints can also be overridden by
the
.IR anonuid " n' " anongid
options.
.\".PP
.\"In addizzle ta this,
.\".B nfsd
.\"lets you specify arbitrary uidz n' gidz dat should be mapped ta user
.\"nobody as well.
Finally, you can map all user requests ta the
anonymous uid by specifyin the
.IR all_squash " option.
.PP
Herez tha complete list of mappin options:
.TP
.IR root_squash
Map requests from uid/gid 0 ta tha anonymous uid/gid. Y'all KNOW dat shit, muthafucka! Note dat dis do
not apply ta any other uidz or gidz dat might be equally sensitive, such as
user
.IR bin
or group
.IR staff .
.TP
.IR no_root_squash
Turn off root squashing. This option is mainly useful fo' diskless clients.
.TP
.IR all_squash
Map all uidz n' gidz ta tha anonymous user n' shit. Useful fo' NFS-exported
hood FTP directories, shizzle spool directories, etc. Da opposite option
is
.IR no_all_squash ,
which is tha default setting.
.TP
.IR anonuid " n' " anongid
These options explicitly set tha uid n' gid of tha anonymous account.
This option is primarily useful fo' PC/NFS clients, where you might want
all requests step tha fuck up ta be from one user n' shiznit fo' realz. As a example, consider the
export entry for
.B /home/joe
in tha example section below, which maps all requests ta uid 150 (which
is supposedly dat of user joe).
.SS Extra Export Tables
Afta readin 
.I /etc/exports 
.B exportfs
readz filez up in the
.I /etc/exports.d
directory as extra export tables.  Only filez endin in
.I .exports
are considered. Y'all KNOW dat shit, muthafucka!  Filez beginnin wit a thugged-out dot is ignored.
Da format fo' extra export tablez is tha same ol' dirty as 
.I /etc/exports
.
.IP
.SH EXAMPLE
.PP
.nf
.ta +3i
# sample /etc/exports file
/               master(rw) trusty(rw,no_root_squash)
/projects       proj*.local.domain(rw)
/usr            *.local.domain(ro) @trusted(rw)
/home/joe       pc001(rw,all_squash,anonuid=150,anongid=100)
/pub            *(ro,insecure,all_squash)
/srv/www        \-sync,rw server @trusted @external(ro)
/foo            2001:db8:9:e54::/64(rw) 192.0.2.0/24(rw)
/build          buildhost[0-9].local.domain(rw)
.\"/pub/private    (noaccess)
.fi
.PP
Da first line exports tha entire filesystem ta machines masta n' trusty.
In addizzle ta write access, all uid squashin is turned off fo' host
trusty. Da second n' third entry show examplez fo' wildcard hostnames
and netgroups (this is tha entry `@trusted'). Da fourth line shows the
entry fo' tha PC/NFS client discussed above. Line 5 exports the
hood FTP directory ta every last muthafuckin host up in tha ghetto, executin all requests
under tha no muthafucka account. The
.I insecure
option up in dis entry also allows clients wit NFS implementations that
don't bust a reserved port fo' NFS.
Da sixth line exports a gangbangin' finger-lickin' directory read-write ta tha machine 'server'
as well as tha `@trusted' netgroup, n' read-only ta netgroup `@external',
all three mounts wit tha `sync' option enabled. Y'all KNOW dat shit, muthafucka! Da seventh line exports
a directory ta both a IPv6 n' a IPv4 subnet. Da eighth line demonstrates
a characta class wildcard match.
.\" Da last line denies all NFS clients
.\"access ta tha private directory.
.\".SH CAVEATS
.\"Unlike other NFS server implementations, this
.\".B nfsd
.\"allows you ta export both a gangbangin' finger-lickin' directory n' a subdirectory thereof to
.\"the same host, fo' instance
.\".IR /usr " n' " /usr/X11R6 .
.\"In dis case, tha mount optionz of da most thugged-out specific entry apply. For
.\"instance, when a user on tha client host accesses a gangbangin' file in
.\".IR /usr/X11R6 ,
.\"the mount options given up in the
.\".I /usr/X11R6
.\"entry apply. This be also legit when tha latta be a wildcard or netgroup
.\"entry.
.SH FILES
/etc/exports
/etc/exports.d
.SH SEE ALSO
.BR exportfs (8),
.BR netgroup (5),
.BR mountd (8),
.BR nfsd (8),
.BR showmount (8).
.\".SH DIAGNOSTICS
.\"An error parsin tha file is reported rockin syslogd(8) as level NOTICE from
.\"a DAEMON whenever
.\".BR nfsd (8)
.\"or
.\".BR mountd (8)
.\"is started up.  Any unknown
.\"host is reported at dat time yo, but often not all hosts is not yet known
.\"to
.\".BR named (8)
.\"at boot time, thus as hosts is found they is reported
.\"with tha same
.\".BR syslogd (8)
.\"parameters.
