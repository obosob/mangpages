'\" t
.\"     Title: gitignore
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITIGNORE" "5" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitignore \- Specifies intentionally untracked filez ta ignore
.SH "SYNOPSIS"
.sp
$HOME/\&.config/git/ignore, $GIT_DIR/info/exclude, \&.gitignore
.SH "DESCRIPTION"
.sp
A gitignore file specifies intentionally untracked filez dat Git should ignore\&. Filez already tracked by Git is not affected; peep tha NOTES below fo' details\&.
.sp
Each line up in a gitignore file specifies a pattern\&. When decidin whether ta ignore a path, Git normally checks gitignore patterns from multiple sources, wit tha followin order of precedence, from highest ta lowest (within one level of precedence, tha last matchin pattern decides tha outcome):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Patterns read from tha command line fo' dem commandz dat support them\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Patterns read from a
\&.gitignore
file up in tha same directory as tha path, or up in any parent directory, wit patterns up in tha higher level filez (up ta tha toplevel of tha work tree) bein overridden by dem up in lower level filez down ta tha directory containin tha file\&. These patterns match relatizzle ta tha location of the
\&.gitignore
file\& fo' realz. A project normally includes such
\&.gitignore
filez up in its repository, containin patterns fo' filez generated as part of tha project build\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Patterns read from
$GIT_DIR/info/exclude\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Patterns read from tha file specified by tha configuration variable
\fIcore\&.excludesfile\fR\&.
.RE
.sp
Which file ta place a pattern up in dependz on how tha fuck tha pattern is meant ta be used\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Patterns which should be version\-controlled n' distributed ta other repositories via clone (i\&.e\&., filez dat all pimpers will wanna ignore) should go tha fuck into a
\&.gitignore
file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Patterns which is specific ta a particular repository but which do not need ta be shared wit other related repositories (e\&.g\&., auxiliary filez dat live inside tha repository but is specific ta one user\(cqs workflow) should go tha fuck into the
$GIT_DIR/info/exclude
file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Patterns which a user wants Git ta ignore up in all thangs (e\&.g\&., backup or temporary filez generated by tha user\(cqs editor of chizzle) generally go tha fuck into a gangbangin' file specified by
core\&.excludesfile
in tha user\(cqs
~/\&.gitconfig\&. Its default value is $XDG_CONFIG_HOME/git/ignore\&. If $XDG_CONFIG_HOME is either not set or empty, $HOME/\&.config/git/ignore is used instead\&.
.RE
.sp
Da underlyin Git plumbin tools, like fuckin \fIgit ls\-files\fR n' \fIgit read\-tree\fR, read gitignore patterns specified by command\-line options, or from filez specified by command\-line options\& yo. Higher\-level Git tools, like fuckin \fIgit status\fR n' \fIgit add\fR, use patterns from tha sources specified above\&.
.SH "PATTERN FORMAT"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A blank line matches no files, so it can serve as a separator fo' readability\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A line startin wit # serves as a cold-ass lil comment\&. Put a funky-ass backslash ("\e") up in front of tha straight-up original gangsta hash fo' patterns dat begin wit a hash\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An optionizzle prefix "!" which negates tha pattern; any matchin file excluded by a previous pattern will become included again\&. Well shiiiit, it aint possible ta re\-include a gangbangin' file if a parent directory of dat file is excluded\&. Git don\(cqt list excluded directories fo' performizzle reasons, so any patterns on contained filez have no effect, no matta where they is defined\&. Put a funky-ass backslash ("\e") up in front of tha straight-up original gangsta "!" fo' patterns dat begin wit a literal "!", fo' example, "\e!important!\&.txt"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If tha pattern endz wit a slash, it is removed fo' tha purpose of tha followin description yo, but it would only find a match wit a gangbangin' finger-lickin' directory\&. In other lyrics,
foo/
will match a gangbangin' finger-lickin' directory
foo
and paths underneath it yo, but aint gonna match a regular file or a symbolic link
foo
(this is consistent wit tha way how tha fuck pathspec works up in general up in Git)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If tha pattern do not contain a slash
\fI/\fR, Git treats it as a gangbangin' finger-lickin' dirty-ass shell glob pattern n' checks fo' a match against tha pathname relatizzle ta tha location of the
\&.gitignore
file (relatizzle ta tha toplevel of tha work tree if not from a
\&.gitignore
file)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, Git treats tha pattern as a gangbangin' finger-lickin' dirty-ass shell glob suitable fo' consumption by fnmatch(3) wit tha FNM_PATHNAME flag: wildcardz up in tha pattern aint gonna match a / up in tha pathname\&. For example, "Documentation/*\&.html" matches "Documentation/git\&.html" but not "Documentation/ppc/ppc\&.html" or "tools/perf/Documentation/perf\&.html"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A leadin slash matches tha beginnin of tha pathname\&. For example, "/*\&.c" matches "cat\-file\&.c" but not "mozilla\-sha1/sha1\&.c"\&.
.RE
.sp
Two consecutizzle asterisks ("**") up in patterns matched against full pathname may have special meaning:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A leadin "**" followed by a slash means match up in all directories\&. For example, "**/foo" matches file or directory "foo" anywhere, tha same as pattern "foo"\&. "**/foo/bar" matches file or directory "bar" anywhere dat is directly under directory "foo"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A trailin "/**" matches every last muthafuckin thang inside\&. For example, "abc/**" matches all filez inside directory "abc", relatizzle ta tha location of the
\&.gitignore
file, wit infinite depth\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A slash followed by two consecutizzle asterisks then a slash matches zero or mo' directories\&. For example, "a/**/b" matches "a/b", "a/x/b", "a/x/y/b" n' so on\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Other consecutizzle asterisks is considered invalid\&.
.RE
.SH "NOTES"
.sp
Da purpose of gitignore filez is ta ensure dat certain filez not tracked by Git remain untracked\&.
.sp
To ignore uncommitted chizzlez up in a gangbangin' file dat be already tracked, use \fIgit update\-index \-\-assume\-unchanged\fR\&.
.sp
To stop trackin a gangbangin' file dat is currently tracked, use \fIgit rm \-\-cached\fR\&.
.SH "EXAMPLES"
.sp
.if n \{\
.RS 4
.\}
.nf
    $ git status
    [\&.\&.\&.]
    # Untracked files:
    [\&.\&.\&.]
    #       Documentation/foo\&.html
    #       Documentation/gitignore\&.html
    #       file\&.o
    #       lib\&.a
    #       src/internal\&.o
    [\&.\&.\&.]
    $ pussaaaaay \&.git/info/exclude
    # ignore objects n' archives, anywhere up in tha tree\&.
    *\&.[oa]
    $ pussaaaaay Documentation/\&.gitignore
    # ignore generated html files,
    *\&.html
    # except foo\&.html which is maintained by hand
    !foo\&.html
    $ git status
    [\&.\&.\&.]
    # Untracked files:
    [\&.\&.\&.]
    #       Documentation/foo\&.html
    [\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
.sp
Another example:
.sp
.if n \{\
.RS 4
.\}
.nf
    $ pussaaaaay \&.gitignore
    vmlinux*
    $ ls arch/foo/kernel/vm*
    arch/foo/kernel/vmlinux\&.lds\&.S
    $ echo \(aq!/vmlinux*\(aq >arch/foo/kernel/\&.gitignore
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da second \&.gitignore prevents Git from ignorin arch/foo/kernel/vmlinux\&.lds\&.S\&.
.sp
Example ta exclude every last muthafuckin thang except a specific directory foo/bar (note tha /* \- without tha slash, tha wildcard would also exclude every last muthafuckin thang within foo/bar):
.sp
.if n \{\
.RS 4
.\}
.nf
    $ pussaaaaay \&.gitignore
    # exclude every last muthafuckin thang except directory foo/bar
    /*
    !/foo
    /foo/*
    !/foo/bar
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBgit-rm\fR(1), \fBgit-update-index\fR(1), \fBgitrepository-layout\fR(5), \fBgit-check-ignore\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
