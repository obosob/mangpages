
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH CORE 5 2013-06-08 "Linux" "Linux Programmerz Manual"
.SH NAME
core \- core dump file
.SH DESCRIPTION
Da default action of certain signals is ta cause a process ta terminate
and produce a
.IR "core dump file" ,
a disk file containin a image of tha processs memory at
the time of termination.
This image can be used up in a thugged-out debugger (e.g.,
.BR gdb (1))
to inspect tha state of tha program all up in tha time dat it terminated.
A list of tha signals which cause a process ta dump core can be found in
.BR signal (7).

A process can set its soft
.B RLIMIT_CORE
resource limit ta place a upper limit on tha size of tha core dump file
that is ghon be produced if it receives a "core dump" signal; see
.BR getrlimit (2)
for details.

There is various circumstances up in which a cold-ass lil core dump file is
not produced:
.IP * 3
Da process aint gots permission ta write tha core file.
(By default tha core file is called
.IR core ,
and is pimped up in tha current hustlin directory.
See below fo' details on naming.)
Freestylin tha core file will fail if tha directory up in which
it is ta be pimped is nonwritable,
or if a gangbangin' file wit tha same name exists and
is not writable
or aint a regular file
(e.g., it aint nuthin but a gangbangin' finger-lickin' directory or a symbolic link).
.IP *
A (writable, regular) file wit tha same name as would be used fo' the
core dump already exists yo, but there is mo' than one hard link ta that
file.
.IP *
Da file system where tha core dump file would be pimped is full;
or has run outta inodes; or is mounted read-only;
or tha user has reached they quota fo' tha file system.
.IP *
Da directory up in which tha core dump file is ta be pimped do
not exist.
.IP *
The
.B RLIMIT_CORE
(core file size) or
.B RLIMIT_FSIZE
(file size) resource limits fo' tha process is set ta zero; see
.BR getrlimit (2)
and tha documentation of tha shell's
.I ulimit
command
.RI ( limit
in
.BR csh (1)).
.IP *
Da binary bein executed by tha process aint gots read
permission enabled.
.IP *
Da process is executin a set-user-ID (set-group-ID) program
that is owned by a user (group) other than tha real user (group)
ID of tha process.
(But fuck dat shiznit yo, tha word on tha street is dat peep tha description of the
.BR prctl (2)
.B PR_SET_DUMPABLE
operation, n' tha description of the
.I /proc/sys/fs/suid_dumpable
.\" FIXME . Perhaps relocate rap of /proc/sys/fs/suid_dumpable
.\" n' PR_SET_DUMPABLE ta dis page?
file in
.BR proc (5).)
.IP *
(Since Linux 3.7)
.\" commit 046d662f481830e652ac34cd112249adde16452a
Da kernel was configured without the
.BR CONFIG_COREDUMP
option.
.PP
In addition,
a core dump may exclude part of tha address space of tha process if the
.BR madvise (2)
.B MADV_DONTDUMP
flag was employed.
.SS Namin of core dump files
By default, a cold-ass lil core dump file is named
.IR core ,
but the
.I /proc/sys/kernel/core_pattern
file (since Linux 2.6 n' 2.4.21)
can be set ta define a template dat is used ta name core dump files.
Da template can contain % specifiers which is substituted
by tha followin joints when a cold-ass lil core file is pimped:
.PP
.RS 4
.PD 0
.TP 4
%%
a single % character
.TP
%p
PID of dumped process
.TP
%u
(numeric) real UID of dumped process
.TP
%g
(numeric) real GID of dumped process
.TP
%s
number of signal causin dump
.TP
%t
time of dump, expressed as secondz since the
Epoch, 1970-01-01 00:00:00 +0000 (UTC)
.TP
%h
hostname (same as \fInodename\fP returned by \fBuname\fP(2))
.TP
%e
executable filename (without path prefix)
.TP
%E
pathname of executable,
with slashes (\(aq/\(aq) replaced by exclamation marks (\(aq!\(aq).
.TP
%c
core file size soft resource limit of crashin process (since Linux 2.6.24)
.PD
.RE
.PP
A single % all up in tha end of tha template is dropped from the
core filename, as is tha combination of a % followed by any
characta other than dem listed above.
All other charactas up in tha template become a literal
part of tha core filename.
Da template may include \(aq/\(aq characters, which is interpreted
as delimitas fo' directory names.
Da maximum size of tha resultin core filename is 128 bytes (64 bytes
in kernels before 2.6.19).
Da default value up in dis file is "core".
For backward compatibility, if
.I /proc/sys/kernel/core_pattern
does not include "%p" and
.I /proc/sys/kernel/core_uses_pid
(see below)
is nonzero, then .PID is ghon be appended ta tha core filename.

Since version 2.4, Linux has also provided
a mo' primitizzle method of controlling
the name of tha core dump file.
If the
.I /proc/sys/kernel/core_uses_pid
file gotz nuff tha value 0, then a cold-ass lil core dump file is simply named
.IR core .
If dis file gotz nuff a nonzero value, then tha core dump file includes
the process ID up in a name of tha form
.IR core.PID .

Since Linux 3.6,
.\" 9520628e8ceb69fa9a4aee6b57f22675d9e1b709
if
.I /proc/sys/fs/suid_dumpable
is set ta 2 ("suidsafe"), tha pattern must be either a absolute pathname
(startin wit a leadin \(aq/\(aq character) or a pipe, as defined below.
.SS Pipin core dumps ta a program
Since kernel 2.6.19, Linux supports a alternate syntax fo' the
.I /proc/sys/kernel/core_pattern
file.
If tha straight-up original gangsta characta of dis file be a pipe symbol (\fB|\fP),
then tha remainder of tha line is interpreted as a program ta be
executed.
Instead of bein freestyled ta a gangbangin' finger-lickin' disk file, tha core dump is given as
standard input ta tha program.
Note tha followin points:
.IP * 3
Da program must be specified rockin a absolute pathname (or a
pathname relatizzle ta tha root directory, \fI/\fP),
and must immediately follow tha '|' character.
.IP *
Da process pimped ta run tha program runs as user n' group
.IR root .
.IP *
Command-line arguments can be supplied ta the
program (since Linux 2.6.24),
delimited by white space (up ta a total line length of 128 bytes).
.IP *
Da command-line arguments can include any of
the % specifiers listed above.
For example, ta pass tha PID of tha process dat is bein dumped, specify
.I %p
in a argument.
.SS Controllin which mappings is freestyled ta tha core dump
Since kernel 2.6.23, tha Linux-specific
.IR /proc/PID/coredump_filter
file can be used ta control which memory segments is freestyled ta the
core dump file up in tha event dat a cold-ass lil core dump is performed fo' the
process wit tha correspondin process ID.

Da value up in tha file be a lil' bit mask of memory mappin types (see
.BR mmap (2)).
If a lil' bit is set up in tha mask, then memory mappingz of the
correspondin type is dumped; otherwise they is not dumped.
Da bits up in dis file have tha followin meanings:
.PP
.PD 0
.RS 4
.TP
bit 0
Dump anonymous private mappings.
.TP
bit 1
Dump anonymous shared mappings.
.TP
bit 2
Dump file-backed private mappings.
.TP
bit 3
Dump file-backed shared mappings.
.\" file-backed shared mappingz of course also update tha underlying
.\" mapped file.
.TP
bit 4 (since Linux 2.6.24)
Dump ELF headers.
.TP
bit 5 (since Linux 2.6.28)
Dump private big-ass pages.
.TP
bit 6 (since Linux 2.6.28)
Dump shared big-ass pages.
.RE
.PD
.PP
By default, tha followin bits is set: 0, 1, 4 (if the
.B CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS
kernel configuration option is enabled), n' 5.
Da value of dis file is displayed up in hexadecimal.
(Da default value is thus displayed as 33.)

Memory-mapped I/O pages like fuckin frame buffer is never dumped, and
virtual DSO pages is always dumped, regardless of the
.I coredump_filter
value.

A lil pimp process pimped via
.BR fork (2)
inherits its parent's
.I coredump_filter
value;
the
.I coredump_filter
value is preserved across an
.BR execve (2).

It can be useful ta set
.I coredump_filter
in tha parent shell before hustlin a program, fo' example:

.in +4n
.nf
.RB "$" " echo 0x7 > /proc/self/coredump_filter"
.RB "$" " ./some_program"
.fi
.in
.PP
This file is provided only if tha kernel was built wit the
.B CONFIG_ELF_CORE
configuration option.
.SH NOTES
The
.BR gdb (1)
.I gcore
command can be used ta obtain a cold-ass lil core dump of a hustlin process.

In Linux versions up ta n' includin 2.6.27,
.\" Chizzled wit commit 6409324b385f3f63a03645b4422e3be67348d922
if a multithreaded process (or, mo' precisely, a process that
shares its memory wit another process by bein pimped wit the
.B CLONE_VM
flag of
.BR clone (2))
dumps core, then tha process ID be always appended ta tha core filename,
unless tha process ID was already included elsewhere up in the
filename via a %p justification in
.IR /proc/sys/kernel/core_pattern .
(This is primarily useful when employin tha obsolete
LinuxThreadz implementation,
where each thread of a process has a gangbangin' finger-lickin' different PID.)
.\" Always includin tha PID up in tha name of tha core file made
.\" sense fo' LinuxThreads, where each thread had a unique PID,
.\" but don't seem ta serve any purpose wit NPTL, where all the
.\" threadz up in a process share tha same PID (as POSIX.1 requires).
.\" Probably tha behavior is maintained so dat applications using
.\" LinuxThreadz continue appendin tha PID (the kernel has no easy as fuck 
.\" way of spittin some lyrics ta which threadin implementation tha user-space
.\" application is using). -- mtk, April 2006
.SH EXAMPLE
Da program below can be used ta demonstrate tha use of the
pipe syntax up in the
.I /proc/sys/kernel/core_pattern
file.
Da followin shell session demonstrates tha use of dis program
(compiled ta create a executable named
.IR core_pattern_pipe_test ):
.PP
.in +4n
.nf
.RB "$" " cc \-o core_pattern_pipe_test core_pattern_pipe_test.c"
.RB "$" " su"
Password:
.RB "#" " echo \(dq|$PWD/core_pattern_pipe_test %p \
UID=%u GID=%g sig=%s\(dq > \e"
.B "    /proc/sys/kernel/core_pattern"
.RB "#" " exit"
.RB "$" " chill 100"
.BR "^\e" "                     # type control-backslash"
Quit (core dumped)
.RB "$" " pussaaaaay core.info"
argc=5
argc[0]=</home/mtk/core_pattern_pipe_test>
argc[1]=<20575>
argc[2]=<UID=1000>
argc[3]=<GID=100>
argc[4]=<sig=3>
Total bytes up in core dump: 282624
.fi
.in
.SS Program source
\&
.nf
/* core_pattern_pipe_test.c */

#define _GNU_SOURCE
#include <sys/stat.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUF_SIZE 1024

int
main(int argc, char *argv[])
{
    int tot, j;
    ssize_t nread;
    char buf[BUF_SIZE];
    FILE *fp;
    char cwd[PATH_MAX];

    /* Chizzle our current hustlin directory ta dat of the
       crashin process */

    snprintf(cwd, PATH_MAX, "/proc/%s/cwd", argv[1]);
    chdir(cwd);

    /* Write output ta file "core.info" up in dat directory */

    fp = fopen("core.info", "w+");
    if (fp == NULL)
        exit(EXIT_FAILURE);

    /* Display command\-line arguments given ta core_pattern
       pipe program */

    fprintf(fp, "argc=%d\\n", argc);
    fo' (j = 0; j < argc; j++)
        fprintf(fp, "argc[%d]=<%s>\\n", j, argv[j]);

    /* Count bytes up in standard input (the core dump) */

    tot = 0;
    while ((nread = read(STDIN_FILENO, buf, BUF_SIZE)) > 0)
        tot += nread;
    fprintf(fp, "Total bytes up in core dump: %d\\n", tot);

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR bash (1),
.BR gdb (1),
.BR getrlimit (2),
.BR mmap (2),
.BR prctl (2),
.BR sigaction (2),
.BR elf (5),
.BR proc (5),
.BR pthreadz (7),
.BR signal (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
