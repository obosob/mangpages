'\" t
.TH "SYSTEMD\&.RESOURCE\-CONTROL" "5" "" "systemd 208" "systemd.resource-control"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.resource-control \- Resource control unit settings
.SH "SYNOPSIS"
.PP
\fIslice\fR\&.slice,
\fIscope\fR\&.scope,
\fIservice\fR\&.service,
\fIsocket\fR\&.socket,
\fImount\fR\&.mount,
\fIswap\fR\&.swap
.SH "DESCRIPTION"
.PP
Unit configuration filez fo' skillz, slices, scopes, sockets, mount points, n' swap devices share a subset of configuration options fo' resource control of spawned processes\&. Internally, dis relies on tha the Control Groups kernel concept fo' organizin processes up in a hierarchial tree of named crews fo' tha purpose of resource pimpment\&.
.PP
This playa page lists tha configuration options shared by dem six unit types\&. Right back up in yo muthafuckin ass. See
\fBsystemd.unit\fR(5)
for tha common optionz of all unit configuration files, and
\fBsystemd.slice\fR(5),
\fBsystemd.scope\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.mount\fR(5), and
\fBsystemd.swap\fR(5)
for mo' shiznit on tha specific unit configuration files\&. Da resource control configuration options is configured up in tha [Slice], [Scope], [Service], [Socket], [Mount], or [Swap] sections, dependin on tha unit type\&.
.PP
See the
\m[blue]\fBNew Control Group Interfaces\fR\m[]\&\s-2\u[1]\d\s+2
for a introduction how tha fuck ta make use of resource control APIs from programs\&.
.SH "OPTIONS"
.PP
Unitz of tha types listed above can have settings fo' resource control configuration:
.PP
\fICPUAccounting=\fR
.RS 4
Turn on CPU usage accountin fo' dis unit\&. Takes a funky-ass boolean argument\&. Note dat turnin on CPU accountin fo' one unit might also implicitly turn it on fo' all units contained up in tha same slice n' fo' all its parent slices n' tha units contained therein\&.
.RE
.PP
\fICPUShares=\fR\fI\fIweight\fR\fR
.RS 4
Assign tha specified overall CPU time share weight ta tha processes executed\&. Takes a integer value\&. This controls the
"cpu\&.shares"
control crew attribute, which defaults ta 1024\&. For details bout dis control crew attribute, see
\m[blue]\fBsched\-design\-CFS\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.sp
Implies
"CPUAccounting=true"\&.
.RE
.PP
\fIMemoryAccounting=\fR
.RS 4
Turn on process n' kernel memory accountin fo' dis unit\&. Takes a funky-ass boolean argument\&. Note dat turnin on memory accountin fo' one unit might also implicitly turn it on fo' all units contained up in tha same slice n' fo' all its parent slices n' tha units contained therein\&.
.RE
.PP
\fIMemoryLimit=\fR\fI\fIbytes\fR\fR
.RS 4
Specify tha limit on maximum memory usage of tha executed processes\&. Da limit specifies how tha fuck much process n' kernel memory can be used by tasks up in dis unit\&. Takes a memory size up in bytes\&. If tha value is suffixed wit K, M, G or T, tha specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with tha base 1024), respectively\&. This controls the
"memory\&.limit_in_bytes"
control crew attribute\&. For details bout dis control crew attribute, see
\m[blue]\fBmemory\&.txt\fR\m[]\&\s-2\u[3]\d\s+2\&.
.sp
Implies
"MemoryAccounting=true"\&.
.RE
.PP
\fIBlockIOAccounting=\fR
.RS 4
Turn on Block IO accountin fo' dis unit\&. Takes a funky-ass boolean argument\&. Note dat turnin on block IO accountin fo' one unit might also implicitly turn it on fo' all units contained up in tha same slice n' all fo' its parent slices n' tha units contained therein\&.
.RE
.PP
\fIBlockIOWeight=\fR\fI\fIweight\fR\fR
.RS 4
Set tha default overall block IO weight fo' tha executed processes\&. Takes a single weight value (between 10 n' 1000) ta set tha default block IO weight\&. This controls the
"blkio\&.weight"
control crew attribute, which defaults ta 1000\&. For details bout dis control crew attribute, see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[4]\d\s+2\&.
.sp
Implies
"BlockIOAccounting=true"\&.
.RE
.PP
\fIBlockIODeviceWeight=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIweight\fR\fR
.RS 4
Set tha per\-device overall block IO weight fo' tha executed processes\&. Takes a space\-separated pair of a gangbangin' file path n' a weight value ta specify tha thang specific weight value, between 10 n' 1000\&. (Example: "/dev/sda 500")\&. Da file path may be specified as path ta a funky-ass block thang node or as any other file up in which case tha backin block thang of tha file system of tha file is determined\&. This controls the
"blkio\&.weight_device"
control crew attribute, which defaults ta 1000\&. Use dis option multiple times ta set weights fo' multiple devices\&. For details bout dis control crew attribute, see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[4]\d\s+2\&.
.sp
Implies
"BlockIOAccounting=true"\&.
.RE
.PP
\fIBlockIOReadBandwidth=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIbytes\fR\fR, \fIBlockIOWriteBandwidth=\fR\fI\fIdevice\fR\fR\fI \fR\fI\fIbytes\fR\fR
.RS 4
Set tha per\-device overall block IO bandwidth limit fo' tha executed processes\&. Takes a space\-separated pair of a gangbangin' file path n' a funky-ass bandwidth value (in bytes per second) ta specify tha thang specific bandwidth\&. Da file path may be a path ta a funky-ass block thang node, or as any other file up in which case tha backin block thang of tha file system of tha file is used\&. If tha bandwidth is suffixed wit K, M, G, or T, tha specified bandwidth is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes, respectively (Example: "/dev/disk/by\-path/pci\-0000:00:1f\&.2\-scsi\-0:0:0:0 5M")\&. This controls the
"blkio\&.read_bps_device"
and
"blkio\&.write_bps_device"
control crew attributes\&. Use dis option multiple times ta set bandwidth limits fo' multiple devices\&. For details bout these control crew attributes, see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[4]\d\s+2\&.
.sp
Implies
"BlockIOAccounting=true"\&.
.RE
.PP
\fIDeviceAllow=\fR
.RS 4
Control access ta specific thang nodes by tha executed processes\&. Takes two space\-separated strings: a thang node path (such as
/dev/null) followed by a cold-ass lil combination of
\fBr\fR,
\fBw\fR,
\fBm\fR
to control
\fIr\fReading,
\fIw\fRriting, or creation of tha specific thang node by tha unit (\fIm\fRknod), respectively\&. This controls the
"devices\&.allow"
and
"devices\&.deny"
control crew attributes\&. For details bout these control crew attributes, see
\m[blue]\fBdevices\&.txt\fR\m[]\&\s-2\u[5]\d\s+2\&.
.RE
.PP
\fIDevicePolicy=auto|closed|strict\fR
.RS 4
Control tha policy fo' allowin thang access:
.PP
\fBstrict\fR
.RS 4
means ta only allow typez of access dat is explicitly specified\&.
.RE
.PP
\fBclosed\fR
.RS 4
in addition, allows access ta standard pseudo devices including
/dev/null,
/dev/zero,
/dev/full,
/dev/random, and
/dev/urandom\&.
.RE
.PP
\fBauto\fR
.RS 4
in addition, allows access ta all devices if no explicit
\fIDeviceAllow=\fR
is present\&. This is tha default\&.
.RE
.RE
.PP
\fISlice=\fR
.RS 4
Da name of tha slice unit ta place tha unit in\&. Defaults to
system\&.slice
for all non\-instantiated unitz of all unit types (except fo' slice units theyselves peep below)\&. Instizzle units is by default placed up in a subslice of
system\&.slice
that is named afta tha template name\&.
.sp
This option may be used ta arrange systemd units up in a hierarchy of slices each of which might have resource settings applied\&.
.sp
For unitz of type slice, tha only accepted value fo' dis settin is tha parent slice\&. Right back up in yo muthafuckin ass. Since tha name of a slice unit implies tha parent slice, it is hence redundant ta eva set dis parameta directly fo' slice units\&.
.RE
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemd.unit\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.slice\fR(5),
\fBsystemd.scope\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.mount\fR(5),
\fBsystemd.swap\fR(5),
\fBsystemd.directives\fR(7),
\fBsystemd.special\fR(7), Da documentation fo' control crews n' specific controllaz up in tha Linux kernel:
\m[blue]\fBcgroups\&.txt\fR\m[]\&\s-2\u[6]\d\s+2,
\m[blue]\fBcpuacct\&.txt\fR\m[]\&\s-2\u[7]\d\s+2,
\m[blue]\fBmemory\&.txt\fR\m[]\&\s-2\u[3]\d\s+2,
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[4]\d\s+2\&.
.SH "NOTES"
.IP " 1." 4
New Control Group Interfaces
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/ControlGroupInterface/
.RE
.IP " 2." 4
sched-design-CFS.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt
.RE
.IP " 3." 4
memory.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroups/memory.txt
.RE
.IP " 4." 4
blkio-controller.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroups/blkio-controller.txt
.RE
.IP " 5." 4
devices.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroups/devices.txt
.RE
.IP " 6." 4
cgroups.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt
.RE
.IP " 7." 4
cpuacct.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/cgroups/cpuacct.txt
.RE
