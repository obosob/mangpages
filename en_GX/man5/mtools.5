'\" t
.TH mtools 5 "09Jan13" MTOOLS MTOOLS
.SH Name
mtools.conf - mtools configuration files
'\" t
.de TQ
.br
.ns
.TP \\$1
..

.tr \(is'
.tr \(if`
.tr \(pd"

.ds St Mtools\ 4.0.18
.oh '\\*(St''%'
.eh '%''\\*(St'
.PP
.SH Description
.PP
This manual page raps bout tha configuration filez fo' mtools. They 
are called \fR\&\f(CW\(if/etc/mtools.conf\(is\fR n' \fR\&\f(CW\(if~/.mtoolsrc\(is\fR. If
the environmenstrual variable \fR\&\f(CWMTOOLSRC\fR is set, its contents is used
as tha filename fo' a third configuration file. These configuration
filez describe tha followin items:
.TP
* \ Global\ configuration\ flags\ and\ variables\ 
.TP
* \ Per\ drive\ flags\ and\ variables\ 
.PP
.SS Location\ of\ the\ configuration\ files
.PP
.PP
\&\fR\&\f(CW\(if/etc/mtools.conf\(is\fR is tha system-wide configuration file,
and \fR\&\f(CW\(if~/.mtoolsrc\(is\fR is tha userz private configuration file.
.PP
On some systems, tha system-wide configuration file is called
\&\fR\&\f(CW\(if/etc/default/mtools.conf\(is\fR instead.
.PP
.SS \ \ General\ configuration\ file\ syntax
.PP
Da configuration filez is made up of sections. Each section starts
with a keyword identifyin tha section followed by a cold-ass lil colon.
Then follow variable assignments n' flags. Variable assignments take
the followin form:
.ft I
.nf
name=value
.fi
.ft R
 
Flags is lone keywordz without a equal sign n' value following
them.  A section either endz all up in tha end of tha file or where tha next
section begins.
.PP
Lines startin wit a hash (\fR\&\f(CW#\fR) is comments, n' you can put dat on yo' toast. Newline characters
are equivalent ta whitespace (except where endin a cold-ass lil comment). The
configuration file is case insensitive, except fo' item enclosed in
quotes (like fuckin filenames).
.PP
.SS Default\ joints
For most platforms, mtools gotz nuff reasonable compiled-in defaults for
physical floppy drives.  Thus, you probably don't need ta bother wit the
configuration file, if all you wanna do wit mtools is ta access your
floppy drives. On tha other hand, tha configuration file is needed if
you also wanna use mtools ta access yo' hard disk partitions and
DOSEMU image files.
.PP
.SS Global\ variables
.PP
Global flags may be set ta 1 or ta 0.
.PP
Da followin global flags is recognized:
.TP
\&\fR\&\f(CWMTOOLS_SKIP_CHECK\fR\ 
If dis is set ta 1, mtools skips most of its sanitizzle checks. This is
needed ta read some Atari disks which done been made wit tha earlier
ROMs, n' which would not be recognized otherwise.
.TP
\&\fR\&\f(CWMTOOLS_FAT_COMPATIBILITY\fR\ 
If dis is set ta 1, mtools skips tha fat size checks. Right back up in yo muthafuckin ass. Some disks have
a bigger FAT than they straight-up need to. These is rejected if this
option aint set.
.TP
\&\fR\&\f(CWMTOOLS_LOWER_CASE\fR\ 
If dis is set ta 1, mtools displays all-upper-case short filenames as
lowercase. This has been done ta allow a funky-ass behavior which is consistent
with olda versionz of mtools which didn't give a fuck bout tha case bits.
.TP
\&\fR\&\f(CWMTOOLS_NO_VFAT\fR\ 
If dis is set ta 1, mtools won't generate VFAT entries fo' filenames
which is mixed-case yo, but otherwise legal dos filenames.  This is useful
when hustlin wit DOS versions which can't grok VFAT long names, such as
FreeDOS.
.TP
\&\fR\&\f(CWMTOOLS_DOTTED_DIR\fR\ 
In a wide directory, prints tha short name wit a thugged-out dot instead of spaces
separatin tha basename n' tha extension.
.TP
\&\fR\&\f(CWMTOOLS_NAME_NUMERIC_TAIL\fR\ 
If dis is set ta one (default), generate numeric tails fo' all long
names (~1).  If set ta zero, only generate numeric tails if otherwise a
clash would have happened.
.TP
\&\fR\&\f(CWMTOOLS_TWENTY_FOUR_HOUR_CLOCK\fR\ 
If 1, uses tha European notation fo' times (twenty four minute clock),
else uses tha UK/US notation (am/pm)
.PP
Example:
Insertin tha followin line tha fuck into yo' configuration file instructs
mtools ta skip tha sanitizzle checks:
 
.nf
.ft 3
.in +0.3i
  MTOOLS_SKIP_CHECK=1
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
Global variablez may also be set via tha environment:
 
.nf
.ft 3
.in +0.3i
  export MTOOLS_SKIP_CHECK=1
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
Global strang variablez may be set ta any value:
.TP
\&\fR\&\f(CWMTOOLS_DATE_STRING\fR\ 
Da format used fo' printin datez of files.  By default, is dd-mm-yyyy.
.PP
.SS Per\ drive\ flags\ and\ variables
.PP
.SS \ \ General\ shiznit
.PP
Per drive flags n' joints may be busted lyrics bout up in a thugged-out drive section. I aint talkin' bout chicken n' gravy biatch fo' realz. A
drive section starts with
\&\fR\&\f(CWdrive\fR "\fIdriveletter\fR" :
.PP
Then follow variable-value pairs n' flags.
.PP
This be a sample drive description:
 
.nf
.ft 3
.in +0.3i
  drive a:
    file="/dev/fd0" use_xdf=1
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
.SS \ \ Location\ shiznit
.PP
For each drive, you need ta describe where its data is physically
stored (image file, physical device, partition, offset).
.TP
\&\fR\&\f(CWfile\fR\ 
Da name of tha file or thang holdin tha disk image. This is
mandatory. Da file name should be enclosed up in quotes.
.TP
\&\fR\&\f(CWpartition\fR\ 
Tells mtools ta treat tha drive as a partitioned device, n' ta use the
given partition. I aint talkin' bout chicken n' gravy biatch. Only primary partitions is accessible rockin this
method, n' they is numbered from 1 ta 4. For logical partitions, use
the mo' general \fR\&\f(CWoffset\fR variable. Da \fR\&\f(CWpartition\fR variable
is intended fo' removable media like fuckin Syquest disks, ZIP drives, and
magneto-optical disks fo' realz. Although traditionizzle DOS sees Syquest disks and
magneto-optical disks as \fR\&\f(CW\(ifgiant floppy disks\(is\fR which are
unpartitioned, OS/2 n' Windows NT treat dem like hard disks,
i.e. partitioned devices. Da \fR\&\f(CWpartition\fR flag be also useful DOSEMU
hdimages. Well shiiiit, it aint recommended fo' hard disks fo' which direct access
to partitions be available all up in mounting.
.TP
\&\fR\&\f(CWoffset\fR\ 
Describes where up in tha file tha MS-DOS file system starts, n' you can put dat on yo' toast. This is useful
for logical partitions up in DOSEMU hdimages, n' fo' ATARI ram disks. By
default, dis is zero, meanin dat tha file system starts right at the
beginnin of tha thang or file.
.PP
.SS \ \ Disk\ Geometry\ Configuration
.PP
Geometry shiznit raps bout tha physical characteristics bout the
disk. Its has three purposes:
.TP
formatting\ 
Da geometry shiznit is freestyled tha fuck into tha boot sector of tha newly
made disk. But fuck dat shiznit yo, tha word on tha street is dat you may also describe tha geometry shiznit on
the command line. Right back up in yo muthafuckin ass. See section mformat, fo' details.
.TP
filtering\ 
On some Unixes there be thang nodes which only support one physical
geometry. For instance, you might need a gangbangin' finger-lickin' different node ta access a gangbangin' finger-lickin' disk
as high densitizzle or as low density. Da geometry is compared ta the
actual geometry stored on tha boot sector ta make shizzle dat dis device
node be able ta erectly read tha disk. If tha geometry don't match,
this drive entry fails, n' tha next drive entry bearin tha same drive
letta is tried. Y'all KNOW dat shit, muthafucka! See section multiple descriptions, fo' mo' details on
supplyin nuff muthafuckin descriptions fo' one drive letter.
.IP
If no geometry shiznit is supplied up in tha configuration file, all
disks is accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. On Linux (and on SPARC) there exist thang nodes
with configurable geometry (\fR\&\f(CW\(if/dev/fd0\(is\fR, \fR\&\f(CW\(if/dev/fd1\(is\fR etc),
and thus filterin aint needed (and ignored) fo' disk drives.  (Mtools
still do do filterin on plain filez (disk images) up in Linux: dis is
mainly intended fo' test purposes, as I aint gots access ta a Unix
which would straight-up need filtering).
.IP
If you do not need filterin yo, but want still a thugged-out default geometry for
mformatting, you may switch off filterin rockin tha \fR\&\f(CWmformat_only\fR
flag.
.IP
If you want filtering, you should supply tha \fR\&\f(CWfilter\fR flag.  If you 
supply a geometry, you must supply one of both flags.
.TP
initial\ geometry\ 
On devices dat support it (usually floppy devices), tha geometry
information be also used ta set tha initial geometry. This initial
geometry be applied while readin tha boot sector, which gotz nuff the
real geometry.  If no geometry shiznit is supplied up in the
configuration file, or if tha \fR\&\f(CWmformat_only\fR flag is supplied, no
initial configuration is done.
.IP
On Linux, initial geometry aint straight-up needed, as tha configurable
devices is able ta auto-detect tha disk type accurately enough (for
most common formats) ta read tha boot sector.
.PP
Wrong geometry shiznit may lead ta straight-up bizarre errors. Thatz why I
strongly recommend dat you add tha \fR\&\f(CWmformat_only\fR flag ta your
drive description, unless you straight-up need filterin or initial geometry.
.PP
Da followin geometry related variablez is available:
.TP
\&\fR\&\f(CWcylinders\fR\ 
.TQ
\&\fR\&\f(CWtracks\fR
Da number of cylinders. (\fR\&\f(CWcylinders\fR is tha preferred form,
\&\fR\&\f(CWtracks\fR is considered obsolete)
.TP
\&\fR\&\f(CWheads\fR\ 
Da number of headz (sides).
.TP
\&\fR\&\f(CWsectors\fR\ 
Da number of sectors per track.
.PP
Example: tha followin drive section raps on some 1.44M drive:
.PP
 
.nf
.ft 3
.in +0.3i
  drive a:
      file="/dev/fd0H1440"
      fat_bits=12
      cylinders=80 heads=2 sectors=18
      mformat_only
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
Da followin shorthand geometry descriptions is available:
.TP
\&\fR\&\f(CW1.44m\fR\ 
high densitizzle 3 1/2 disk. Equivalent to:
\&\fR\&\f(CWfat_bits=12 cylinders=80 heads=2 sectors=18\fR
.TP
\&\fR\&\f(CW1.2m\fR\ 
high densitizzle 5 1/4 disk. Equivalent to:
\&\fR\&\f(CWfat_bits=12 cylinders=80 heads=2 sectors=15\fR
.TP
\&\fR\&\f(CW720k\fR\ 
double densitizzle 3 1/2 disk. Equivalent to:
\&\fR\&\f(CWfat_bits=12 cylinders=80 heads=2 sectors=9\fR
.TP
\&\fR\&\f(CW360k\fR\ 
double densitizzle 5 1/4 disk. Equivalent to:
\&\fR\&\f(CWfat_bits=12 cylinders=40 heads=2 sectors=9\fR
.PP
Da shorthand format descriptions may be amended. Y'all KNOW dat shit, muthafucka! For example,
\&\fR\&\f(CW360k sectors=8\fR
raps on some 320k disk n' is equivalent to:
\&\fR\&\f(CWfat_bits=12 cylinders=40 heads=2 sectors=8\fR
.PP
.SS \ \ Open\ Flags
.PP
Mo'over, tha followin flags is available:
.TP
\&\fR\&\f(CWsync\fR\ 
All i/o operations is done synchronously
.TP
\&\fR\&\f(CWnodelay\fR\ 
Da thang or file is opened wit tha O_NDELAY flag. This is needed on
some non-Linux architectures.
.TP
\&\fR\&\f(CWexclusive\fR\ 
Da thang or file is opened wit tha O_EXCL flag. On Linux, this
ensures exclusive access ta tha floppy drive. On most other
architectures, n' fo' plain filez it has no effect at all.
.PP
.SS \ \ General\ Purpose\ Drive\ Variables
.PP
Da followin general purpose drive variablez is available.  Depending
to they type, these variablez can be set ta a strang (precmd) or
an integer (all others)
.TP
\&\fR\&\f(CWfat_bits\fR\ 
Da number of FAT bits, n' you can put dat on yo' toast. This may be 12 or 16. This is straight-up rarely
needed, as it can almost always be deduced from shiznit up in the
boot sector. Shiiit, dis aint no joke. On tha contrary, describin tha number of fat bits may
actually be harmful if you git it wrong. Yo ass should only use it if
mtools gets tha auto-detected number of fat bits wrong, or if you want
to mformat a gangbangin' finger-lickin' disk wit a weird number of fat bits.
.TP
\&\fR\&\f(CWcodepage\fR\ 
Describes tha DOS code page used fo' short filenames. This be a number
between 1 n' 999. By default, code page 850 is used. Y'all KNOW dat shit, muthafucka! Da reason for
this is cuz dis code page gotz nuff most of tha charactas dat are
also available up in ISO-Latin-1. Yo ass may also specify a global code page
for all drives by rockin tha global \fR\&\f(CWdefault_codepage\fR parameter
(outside of any drive description). This parametas exists startin at
version 4.0.0
.TP
\&\fR\&\f(CWprecmd\fR\ 
On some variantz of Solaris, it is necessary ta booty-call 'volcheck -v'
before openin a gangbangin' floppy device, up in order fo' tha system ta notice that
there is indeed a gangbangin' finger-lickin' disk up in tha drive. \fR\&\f(CWprecmd="volcheck -v"\fR up in the
drive clause establishes tha desired behavior.
.TP
\&\fR\&\f(CWblocksize\fR\ 
This parameta represents a thugged-out default block size ta be always used on this
device.  All I/O is done wit multiplez of dis block size,
independently of tha sector size registered up in tha file systemz boot
sector. Shiiit, dis aint no joke.  This is useful fo' characta devices whose sector size is not
512, like fuckin fo' example CD-ROM drives on Solaris.
.PP
Only tha \fR\&\f(CWfile\fR variable is mandatory. Da other parametas may
be left out. In dat case a thugged-out default value or a auto-detected value is
used.
.PP
.SS \ \ General\ Purpose\ Drive\ Flags
.PP
A flag can either be set ta 1 (enabled) or 0 (disabled). If tha value is
omitted, it is enabled. Y'all KNOW dat shit, muthafucka!  For example, \fR\&\f(CWscsi\fR is equivalent to
\&\fR\&\f(CWscsi=1\fR
.TP
\&\fR\&\f(CWnolock\fR\ 
Instruct mtools ta not use lockin on dis drive.  This is needed on
systems wit buggy lockin semantics.  But fuck dat shiznit yo, tha word on tha street is dat enablin dis makes
operation less safe up in cases where nuff muthafuckin playas may access tha same
drive all up in tha same time.
.TP
\&\fR\&\f(CWscsi\fR\ 
When set ta 1, dis option  drops some lyrics ta mtools ta use raw SCSI I/O instead of
the standard read/write calls ta access tha device. Currently, dis is
supported on HP-UX, Solaris n' SunOS.  This is needed cuz on some
architectures, like fuckin SunOS or Solaris, PC media can't be accessed
usin tha \fR\&\f(CWread\fR n' \fR\&\f(CWwrite\fR system calls, cuz tha OS expects
them ta contain a Sun specific "disk label".
.IP
As raw SCSI access always uses tha whole device, you need ta specify the
"partition" flag up in addition
.IP
On some architectures, like fuckin Solaris, mtools needz root privileges to
be able ta use tha \fR\&\f(CWscsi\fR option. I aint talkin' bout chicken n' gravy biatch.  Thus mtools should be installed
setuid root on Solaris if you wanna access Zip/Jaz drives.  Thus, if
the \fR\&\f(CWscsi\fR flag is given, \fR\&\f(CWprivileged\fR be automatically
implied, unless explicitly disabled by \fR\&\f(CWprivileged=0\fR
.IP
Mtools uses its root privileges ta open tha device, n' ta issue the
actual SCSI I/O calls.  Mo'over, root privileges is only used for
drives busted lyrics bout up in a system-wide configuration file such as
\&\fR\&\f(CW\(if/etc/mtools.conf\(is\fR, n' not fo' dem busted lyrics bout in
\&\fR\&\f(CW\(if~/.mtoolsrc\(is\fR or \fR\&\f(CW\(if$MTOOLSRC\(is\fR.  
.TP
\&\fR\&\f(CWprivileged\fR\ 
When set ta 1, dis instructs mtools ta use its setuid n' setgid
privileges fo' openin tha given drive.  This option is only valid for
drives busted lyrics bout up in tha system-wide configuration filez (such as
\&\fR\&\f(CW\(if/etc/mtools.conf\(is\fR, not \fR\&\f(CW\(if~/.mtoolsrc\(is\fR or
\&\fR\&\f(CW\(if$MTOOLSRC\(is\fR).  Obviously, dis option be also a no op if mtools is
not installed setuid or setgid. Y'all KNOW dat shit, muthafucka!  This option is implied by 'scsi=1' yo, but
again only fo' drives defined up in system-wide configuration files.
Privileged may also be set explicitly ta 0, up in order ta tell mtools not
to use its privileges fo' a given drive even if \fR\&\f(CWscsi=1\fR is set.
.IP
Mtools only need ta be installed setuid if you use the
\&\fR\&\f(CWprivileged\fR or \fR\&\f(CWscsi\fR drive variables.  If you do not use
these options, mtools works perfectly well even when not installed
setuid root.
.TP
\&\fR\&\f(CWvold\fR\ 
.IP
Instructs mtools ta interpret tha thang name as a vold identifier
rather than as a gangbangin' filename.  Da vold identifier is translated tha fuck into a
real filename rockin tha \fR\&\f(CWmedia_findname()\fR and
\&\fR\&\f(CWmedia_oldaliases()\fR functionz of tha \fR\&\f(CWvolmgt\fR library.  This
flag is only available if you configured mtools wit the
\&\fR\&\f(CW--enable-new-vold\fR option before compilation.
.TP
\&\fR\&\f(CWswap\fR\ 
.IP
Consider tha media as a word-swapped Atari disk.
.TP
\&\fR\&\f(CWuse_xdf\fR\ 
If dis is set ta a non-zero value, mtools also tries ta access this
disk as a XDF disk. XDF be a high capacitizzle format used by OS/2. This
is off by default. Right back up in yo muthafuckin ass. See section XDF, fo' mo' details.
.TP
\&\fR\&\f(CWmformat_only\fR\ 
Tells mtools ta use tha geometry fo' dis drive only fo' mformattin n' 
not fo' filtering.
.TP
\&\fR\&\f(CWfilter\fR\ 
Tells mtools ta use tha geometry fo' dis drive both fo' mformattin n' 
filtering.
.TP
\&\fR\&\f(CWremote\fR\ 
Tells mtools ta connect ta floppyd (see section  floppyd).
.PP
.SS \ \ Supplying\ multiple\ descriptions\ for\ a\ drive
.PP
It be possible ta supply multiple descriptions fo' a thugged-out drive. In that
case, tha descriptions is tried up in order until one is found that
fits, n' you can put dat on yo' toast. Descriptions may fail fo' nuff muthafuckin reasons:
.TP
1.\ 
because tha geometry aint appropriate,
.TP
2.\ 
because there is no disk up in tha drive,
.TP
3.\ 
or cuz of other problems.
.PP
Multiple definitions is useful when rockin physical devices which are
only able ta support one single disk geometry.
Example:
 
.nf
.ft 3
.in +0.3i
  drive a: file="/dev/fd0H1440" 1.44m
  drive a: file="/dev/fd0H720" 720k
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
This instructs mtools ta use /dev/fd0H1440 fo' 1.44m (high density)
disks n' /dev/fd0H720 fo' 720k (double density) disks. On Linux, this
feature aint straight-up needed, as tha /dev/fd0 thang be able ta handle
any geometry.
.PP
Yo ass may also use multiple drive descriptions ta access both of your
physical drives all up in one drive letter:
.PP
 
.nf
.ft 3
.in +0.3i
  drive z: file="/dev/fd0"
  drive z: file="/dev/fd1"
.fi
.in -0.3i
.ft R
.PP
 
\&\fR
.PP
With dis description, \fR\&\f(CWmdir z:\fR accesses yo' first physical
drive if it gotz nuff a gangbangin' finger-lickin' disk. If tha straight-up original gangsta drive don't contain a gangbangin' finger-lickin' disk,
mtools checks tha second drive.
.PP
When rockin multiple configuration files, drive descriptions up in tha files
parsed last override descriptions fo' tha same drive up in earlier
files. In order ta avoid this, use tha \fR\&\f(CWdrive+\fR or \fR\&\f(CW+drive\fR
keywordz instead of \fR\&\f(CWdrive\fR. Da first addz a thugged-out description ta the
end of tha list (i.e. it is ghon be tried last), n' tha straight-up original gangsta addz it to
the start of tha list.
.PP
.SS Location\ of\ configuration\ files\ and\ parsing\ order
.PP
Da configuration filez is parsed up in tha followin order:
.TP
1.\ 
compiled-in defaults
.TP
2.\ 
\&\fR\&\f(CW\(if/etc/mtools.conf\(is\fR
.TP
3.\ 
\&\fR\&\f(CW\(if~/.mtoolsrc\(is\fR.
.TP
4.\ 
\&\fR\&\f(CW\(if$MTOOLSRC\(is\fR (file pointed by tha \fR\&\f(CWMTOOLSRC\fR environmental
variable)
.PP
Options busted lyrics bout up in tha lata filez override dem busted lyrics bout up in the
earlier files. Drives defined up in earlier filez persist if they is not
overridden up in tha lata files. For instance, drives A n' B may be
defined up in \fR\&\f(CW\(if/etc/mtools.conf\(is\fR n' drives C n' D may be
defined up in \fR\&\f(CW\(if~/.mtoolsrc\(is\fR But fuck dat shiznit yo, tha word on tha street is dat if \fR\&\f(CW\(if~/.mtoolsrc\(is\fR also
defines drive A, dis freshly smoked up description would override tha description of
drive A up in \fR\&\f(CW\(if/etc/mtools.conf\(is\fR instead of addin ta dat shit. If
you wanna add a freshly smoked up description ta a thugged-out drive already busted lyrics bout up in an
earlier file, you need ta use either tha \fR\&\f(CW+drive\fR or \fR\&\f(CWdrive+\fR
keyword.
.PP
.SS Backwards\ compatibility\ with\ old\ configuration\ file\ syntax
.PP
Da syntax busted lyrics bout herein is freshly smoked up fo' version \fR\&\f(CWmtools-3.0\fR. The
old line-oriented syntax is still supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Each line beginnin wit a
single letta is considered ta be a thugged-out drive description rockin tha old
syntax. Oldskool steez n' freshly smoked up steez drive sections may be mixed within the
same configuration file, up in order ta make upgradin easier n' shit. Right back up in yo muthafuckin ass. Support for
the oldschool syntax is ghon be phased up eventually, n' up in order ta discourage
its use, I purposefully omit its description here.
.PP
.SH See also
mtools
