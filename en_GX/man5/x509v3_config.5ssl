.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509V3_CONFIG 5"
.TH X509V3_CONFIG 5 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
x509v3_config \- X509 V3 certificate extension configuration format
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Several of tha OpenSSL utilitizzles can add extensions ta a cold-ass lil certificate or
certificate request based on tha contentz of a cold-ass lil configuration file.
.PP
Typically tha application will contain a option ta point ta a extension
section. I aint talkin' bout chicken n' gravy biatch. Each line of tha extension section takes tha form:
.PP
.Vb 1
\& extension_name=[critical,] extension_options
.Ve
.PP
If \fBcritical\fR is present then tha extension is ghon be critical.
.PP
Da format of \fBextension_options\fR dependz on tha value of \fBextension_name\fR.
.PP
There is four main typez of extension: \fIstring\fR extensions, \fImulti-valued\fR
extensions, \fIraw\fR n' \fIarbitrary\fR extensions.
.PP
Strin extensions simply gotz a strang which gotz nuff either tha value itself
or how tha fuck it is obtained.
.PP
For example:
.PP
.Vb 1
\& nsComment="This be a Comment"
.Ve
.PP
Multi-valued extensions gotz a gangbangin' finger-lickin' dirty-ass short form n' a long-ass form. Da short form
is a list of names n' joints:
.PP
.Vb 1
\& basicConstraints=critical,CA:true,pathlen:1
.Ve
.PP
Da long form allows tha joints ta be placed up in a separate section:
.PP
.Vb 1
\& basicConstraints=critical,@bs_section
\&
\& [bs_section]
\&
\& CA=true
\& pathlen=1
.Ve
.PP
Both forms is equivalent.
.PP
Da syntax of raw extensions is governed by tha extension code: it can
for example contain data up in multiple sections. Da erect syntax to
use is defined by tha extension code itself: check up tha certificate
policies extension fo' a example.
.PP
If a extension type is unsupported then tha \fIarbitrary\fR extension syntax
must be used, peep tha \s-1ARBITRARY EXTENSIONS\s0 section fo' mo' details.
.SH "STANDARD EXTENSIONS"
.IX Header "STANDARD EXTENSIONS"
Da followin sections describe each supported extension up in detail.
.SS "Basic Constraints."
.IX Subsection "Basic Constraints."
This be a multi valued extension which indicates whether a cold-ass lil certificate is
a \s-1CA\s0 certificate. Da first (mandatory) name is \fB\s-1CA\s0\fR followed by \fB\s-1TRUE\s0\fR or
\&\fB\s-1FALSE\s0\fR. If \fB\s-1CA\s0\fR is \fB\s-1TRUE\s0\fR then a optionizzle \fBpathlen\fR name followed by an
non-negatizzle value can be included.
.PP
For example:
.PP
.Vb 1
\& basicConstraints=CA:TRUE
\&
\& basicConstraints=CA:FALSE
\&
\& basicConstraints=critical,CA:TRUE, pathlen:0
.Ve
.PP
A \s-1CA\s0 certificate \fBmust\fR include tha basicConstraints value wit tha \s-1CA\s0 field
set ta \s-1TRUE.\s0 An end user certificate must either set \s-1CA\s0 ta \s-1FALSE\s0 or exclude the
extension entirely. Right back up in yo muthafuckin ass. Some software may require tha inclusion of basicConstraints
with \s-1CA\s0 set ta \s-1FALSE\s0 fo' end entitizzle certificates.
.PP
Da pathlen parameta indicates tha maximum number of CAs dat can appear
below dis one up in a cold-ass lil chain. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. So if you gotz a \s-1CA\s0 wit a pathlen of zero it can
only be used ta sign end user certificates n' not further CAs.
.SS "Key Usage."
.IX Subsection "Key Usage."
Key usage be a multi valued extension consistin of a list of namez of the
permitted key usages.
.PP
Da supporte names are: digitalSignature, nonRepudiation, keyEncipherment,
dataEncipherment, keyAgreement, keyCertSign, cRLSign, encipherOnly
and decipherOnly.
.PP
Examples:
.PP
.Vb 1
\& keyUsage=digitalSignature, nonRepudiation
\&
\& keyUsage=critical, keyCertSign
.Ve
.SS "Extended Key Usage."
.IX Subsection "Extended Key Usage."
This extensions consistz of a list of usages indicatin purposes fo' which
the certificate hood key can be used for,
.PP
These can either be object short namez of tha dotted numerical form of OIDs.
While any \s-1OID\s0 can be used only certain joints make sense. In particular the
followin \s-1PKIX, NS\s0 n' \s-1MS\s0 joints is meaningful:
.PP
.Vb 10
\& Value                  Meaning
\& \-\-\-\-\-                  \-\-\-\-\-\-\-
\& serverAuth             SSL/TLS Web Server Authentication.
\& clientAuth             SSL/TLS Web Client Authentication.
\& codeSignin            Code signing.
\& emailProtection        E\-mail Protection (S/MIME).
\& timeStampin           Trusted Timestamping
\& msCodeInd              Microsizzlez Individual Code Signin (authenticode)
\& msCodeCom              Microsizzlez Commercial Code Signin (authenticode)
\& msCTLSign              Microsizzlez Trust List Signing
\& msSGC                  Microsizzlez Server Gated Crypto
\& msEFS                  Microsizzlez Encrypted File System
\& nsSGC                  Netscape Server Gated Crypto
.Ve
.PP
Examples:
.PP
.Vb 2
\& extendedKeyUsage=critical,codeSigning,1.2.3.4
\& extendedKeyUsage=nsSGC,msSGC
.Ve
.SS "Subject Key Identifier."
.IX Subsection "Subject Key Identifier."
This is straight-up a strang extension n' can take two possible joints, n' you can put dat on yo' toast. Either
the word \fBhash\fR which will automatically follow tha guidelines up in \s-1RFC3280\s0
or a hex strang givin tha extension value ta include. Da use of tha hex
strin is straight fuckin discouraged.
.PP
Example:
.PP
.Vb 1
\& subjectKeyIdentifier=hash
.Ve
.SS "Authoritizzle Key Identifier."
.IX Subsection "Authoritizzle Key Identifier."
Da authoritizzle key identifier extension permits two options. keyid n' issuer:
both can take tha optionizzle value \*(L"always\*(R".
.PP
If tha keyid option is present a attempt is made ta copy tha subject key
identifier from tha parent certificate. If tha value \*(L"always\*(R" is present
then a error is returned if tha option fails.
.PP
Da issuer option copies tha issuer n' serial number from tha issuer
certificate. This will only be done if tha keyid option fails or
is not included unless tha \*(L"always\*(R" flag will always include tha value.
.PP
Example:
.PP
.Vb 1
\& authorityKeyIdentifier=keyid,issuer
.Ve
.SS "Subject Alternatizzle Name."
.IX Subsection "Subject Alternatizzle Name."
Da subject alternatizzle name extension allows various literal joints ta be
included up in tha configuration file. These include \fBemail\fR (an email address)
\&\fB\s-1URI\s0\fR a uniform resource indicator, \fB\s-1DNS\s0\fR (a \s-1DNS\s0 domain name), \fB\s-1RID\s0\fR (a
registered \s-1ID: OBJECT IDENTIFIER\s0), \fB\s-1IP\s0\fR (an \s-1IP\s0 address), \fBdirName\fR
(a distinguished name) n' otherName.
.PP
Da email option include a special 'copy' value. This will automatically
include n' email addresses contained up in tha certificate subject name in
the extension.
.PP
Da \s-1IP\s0 address used up in tha \fB\s-1IP\s0\fR options can be up in either IPv4 or IPv6 format.
.PP
Da value of \fBdirName\fR should point ta a section containin tha distinguished
name ta use as a set of name value pairs. Multi joints AVAs can be formed by
preceedin tha name wit a \fB+\fR character.
.PP
otherName can include arbitrary data associated wit a \s-1OID:\s0 tha value
should be tha \s-1OID\s0 followed by a semicolon n' tha content up in standard
\&\fIASN1_generate_nconf\fR\|(3) format.
.PP
Examples:
.PP
.Vb 5
\& subjectAltName=email:copy,email:my@other.address,URI:http://my.url.here/
\& subjectAltName=IP:192.168.7.1
\& subjectAltName=IP:13::17
\& subjectAltName=email:my@other.address,RID:1.2.3.4
\& subjectAltName=otherName:1.2.3.4;UTF8:some other identifier
\&
\& subjectAltName=dirName:dir_sect
\&
\& [dir_sect]
\& C=UK
\& O=My fuckin Organization
\& OU=My fuckin Unit
\& CN=My fuckin Name
.Ve
.SS "Issuer Alternatizzle Name."
.IX Subsection "Issuer Alternatizzle Name."
Da issuer alternatizzle name option supports all tha literal options of
subject alternatizzle name. Well shiiiit, it do \fBnot\fR support tha email:copy option cuz
that would not make sense. Well shiiiit, it do support a additionizzle issuer:copy option
that will copy all tha subject alternatizzle name joints from tha issuer 
certificate (if possible).
.PP
Example:
.PP
.Vb 1
\& issuserAltName = issuer:copy
.Ve
.SS "Authoritizzle Info Access."
.IX Subsection "Authoritizzle Info Access."
Da authoritizzle shiznit access extension gives details bout how tha fuck ta access
certain shiznit relatin ta tha \s-1CA.\s0 Its syntax be accessOID;location
where \fIlocation\fR has tha same ol' dirty syntax as subject alternatizzle name (except
that email:copy aint supported). accessOID can be any valid \s-1OID\s0 but only
certain joints is meaningful, fo' example \s-1OCSP\s0 n' caIssuers.
.PP
Example:
.PP
.Vb 2
\& authorityInfoAccess = OCSP;URI:http://ocsp.my.host/
\& authorityInfoAccess = caIssuers;URI:http://my.ca/ca.html
.Ve
.SS "\s-1CRL\s0 distribution points."
.IX Subsection "CRL distribution points."
This be a multi-valued extension whose options can be either up in name:value pair
usin tha same form as subject alternatizzle name or a single value representing
a section name containin all tha distribution point fields.
.PP
For a name:value pair a freshly smoked up DistributionPoint wit tha fullName field set to
the given value both tha cRLissuer n' reasons fieldz is omitted up in dis case.
.PP
In tha single option case tha section indicated gotz nuff joints fo' each
field. Y'all KNOW dat shit, muthafucka! In dis section:
.PP
If tha name is \*(L"fullname\*(R" tha value field should contain tha full name
of tha distribution point up in tha same format as subject alternatizzle name.
.PP
If tha name is \*(L"relativename\*(R" then tha value field should contain a section
name whose contents represent a \s-1DN\s0 fragment ta be placed up in dis field.
.PP
Da name \*(L"CRLIssuer\*(R" if present should contain a value fo' dis field in
subject alternatizzle name format.
.PP
If tha name is \*(L"reasons\*(R" tha value field should consist of a cold-ass lil comma
separated field containin tha reasons. Valid reasons are: \*(L"keyCompromise\*(R",
\&\*(L"CACompromise\*(R", \*(L"affiliationChanged\*(R", \*(L"superseded\*(R", \*(L"cessationOfOperation\*(R",
\&\*(L"certificateHold\*(R", \*(L"privilegeWithdrawn\*(R" n' \*(L"AACompromise\*(R".
.PP
Simple examples:
.PP
.Vb 2
\& crlDistributionPoints=URI:http://myhost.com/myca.crl
\& crlDistributionPoints=URI:http://my.com/my.crl,URI:http://oth.com/my.crl
.Ve
.PP
Full distribution point example:
.PP
.Vb 1
\& crlDistributionPoints=crldp1_section
\&
\& [crldp1_section]
\&
\& fullname=URI:http://myhost.com/myca.crl
\& CRLissuer=dirName:issuer_sect
\& reasons=keyCompromise, CACompromise
\&
\& [issuer_sect]
\& C=UK
\& O=Organisation
\& CN=Some Name
.Ve
.SS "Issuin Distribution Point"
.IX Subsection "Issuin Distribution Point"
This extension should only step tha fuck up in CRLs. Well shiiiit, it aint nuthin but a multi valued extension
whose syntax is similar ta tha \*(L"section\*(R" pointed ta by tha \s-1CRL\s0 distribution
points extension wit all dem differences.
.PP
Da names \*(L"reasons\*(R" n' \*(L"CRLissuer\*(R" is not recognized.
.PP
Da name \*(L"onlysomereasons\*(R" be accepted which sets dis field. Y'all KNOW dat shit, muthafucka! Da value is
in tha same format as tha \s-1CRL\s0 distribution point \*(L"reasons\*(R" field.
.PP
Da names \*(L"onlyuser\*(R", \*(L"onlyCA\*(R", \*(L"onlyAA\*(R" n' \*(L"indirectCRL\*(R" is also accepted
the joints should be a funky-ass boolean value (\s-1TRUE\s0 or \s-1FALSE\s0) ta indicate tha value of
the correspondin field.
.PP
Example:
.PP
.Vb 1
\& issuingDistributionPoint=critical, @idp_section
\&
\& [idp_section]
\&
\& fullname=URI:http://myhost.com/myca.crl
\& indirectCRL=TRUE
\& onlysomereasons=keyCompromise, CACompromise
\&
\& [issuer_sect]
\& C=UK
\& O=Organisation
\& CN=Some Name
.Ve
.SS "Certificate Policies."
.IX Subsection "Certificate Policies."
This be a \fIraw\fR extension. I aint talkin' bout chicken n' gravy biatch fo' realz. All tha fieldz of dis extension can be set by
usin tha appropriate syntax.
.PP
If you follow tha \s-1PKIX\s0 recommendations n' just rockin one \s-1OID\s0 then you just
include tha value of dat \s-1OID.\s0 Multiple OIDs can be set separated by commas,
for example:
.PP
.Vb 1
\& certificatePolicies= 1.2.4.5, 1.1.3.4
.Ve
.PP
If you wish ta include qualifiers then tha policy \s-1OID\s0 n' qualifiers need to
be specified up in a separate section: dis is done by rockin tha \f(CW@section\fR syntax
instead of a literal \s-1OID\s0 value.
.PP
Da section referred ta must include tha policy \s-1OID\s0 rockin tha name
policyIdentifier, cPSuri qualifiers can be included rockin tha syntax:
.PP
.Vb 1
\& CPS.nnn=value
.Ve
.PP
userNotice qualifiers can be set rockin tha syntax:
.PP
.Vb 1
\& userNotice.nnn=@notice
.Ve
.PP
Da value of tha userNotice qualifier is specified up in tha relevant section.
This section can include explicitText, organization n' noticeNumbers
options. explicitText n' organization is text strings, noticeNumbers be a
comma separated list of numbers. Da organization n' noticeNumbers options
(if included) must \s-1BOTH\s0 be present. If you use tha userNotice option wit \s-1IE5\s0
then you need tha 'ia5org' option all up in tha top level ta modify tha encoding:
otherwise it aint gonna be interpreted properly.
.PP
Example:
.PP
.Vb 1
\& certificatePolicies=ia5org,1.2.3.4,1.5.6.7.8,@polsect
\&
\& [polsect]
\&
\& policyIdentifier = 1.3.5.8
\& CPS.1="http://my.host.name/"
\& CPS.2="http://my.your.name/"
\& userNotice.1=@notice
\&
\& [notice]
\&
\& explicitText="Explicit Text Here"
\& organization="Organisation Name"
\& noticeNumbers=1,2,3,4
.Ve
.PP
Da \fBia5org\fR option chizzlez tha type of tha \fIorganization\fR field. Y'all KNOW dat shit, muthafucka! In \s-1RFC2459\s0
it can only be of type DisplayText. In \s-1RFC3280\s0 IA5Strrin be also permissible.
Some software (for example some versionz of \s-1MSIE\s0) may require ia5org.
.SS "Policy Constraints"
.IX Subsection "Policy Constraints"
This be a multi-valued extension which consistin of tha names
\&\fBrequireExplicitPolicy\fR or \fBinhibitPolicyMapping\fR n' a non wack intger
value fo' realz. At least one component must be present.
.PP
Example:
.PP
.Vb 1
\& policyConstraints = requireExplicitPolicy:3
.Ve
.SS "Inhibit Any Policy"
.IX Subsection "Inhibit Any Policy"
This be a strang extension whose value must be a non wack integer.
.PP
Example:
.PP
.Vb 1
\& inhibitAnyPolicy = 2
.Ve
.SS "Name Constraints"
.IX Subsection "Name Constraints"
Da name constraints extension be a multi-valued extension. I aint talkin' bout chicken n' gravy biatch. Da name should
begin wit tha word \fBpermitted\fR or \fBexcluded\fR followed by a \fB;\fR. Da rest of
the name n' tha value bigs up tha syntax of subjectAltName except email:copy
is not supported n' tha \fB\s-1IP\s0\fR form should consist of a \s-1IP\s0 addresses n' 
subnet mask separated by a \fB/\fR.
.PP
Examples:
.PP
.Vb 1
\& nameConstraints=permitted;IP:192.168.0.0/255.255.0.0
\&
\& nameConstraints=permitted;email:.somedomain.com
\&
\& nameConstraints=excluded;email:.com
\&issuingDistributionPoint = idp_section
.Ve
.SS "\s-1OCSP\s0 No Check"
.IX Subsection "OCSP No Check"
Da \s-1OCSP\s0 No Peep extension be a strang extension but its value is ignored.
.PP
Example:
.PP
.Vb 1
\& noPeep = ignored
.Ve
.SH "DEPRECATED EXTENSIONS"
.IX Header "DEPRECATED EXTENSIONS"
Da followin extensions is non standard, Netscape specific n' largely
obsolete. Their use up in freshly smoked up applications is discouraged.
.SS "Netscape Strin extensions."
.IX Subsection "Netscape Strin extensions."
Netscape Comment (\fBnsComment\fR) be a strang extension containin a cold-ass lil comment
which is ghon be displayed when tha certificate is viewed up in some browsers.
.PP
Example:
.PP
.Vb 1
\& nsComment = "Some Random Comment"
.Ve
.PP
Other supported extensions up in dis category are: \fBnsBaseUrl\fR,
\&\fBnsRevocationUrl\fR, \fBnsCaRevocationUrl\fR, \fBnsRenewalUrl\fR, \fBnsCaPolicyUrl\fR
and \fBnsSslServerName\fR.
.SS "Netscape Certificate Type"
.IX Subsection "Netscape Certificate Type"
This be a multi-valued extensions which consistz of a list of flags ta be
included. Y'all KNOW dat shit, muthafucka! Dat shiznit was used ta indicate tha purposes fo' which a cold-ass lil certificate could
be used. Y'all KNOW dat shit, muthafucka! Da basicConstraints, keyUsage n' extended key usage extensions are
now used instead.
.PP
Acceptable joints fo' nsCertType are: \fBclient\fR, \fBserver\fR, \fBemail\fR,
\&\fBobjsign\fR, \fBreserved\fR, \fBsslCA\fR, \fBemailCA\fR, \fBobjCA\fR.
.SH "ARBITRARY EXTENSIONS"
.IX Header "ARBITRARY EXTENSIONS"
If a extension aint supported by tha OpenSSL code then it must be encoded
usin tha arbitrary extension format. Well shiiiit, it be also possible ta use tha arbitrary
format fo' supported extensions. Nuff care should be taken ta ensure that
the data is formatted erectly fo' tha given extension type.
.PP
There is two ways ta encode arbitrary extensions.
.PP
Da first way is ta use tha word \s-1ASN1\s0 followed by tha extension content
usin tha same syntax as \fIASN1_generate_nconf\fR\|(3).
For example:
.PP
.Vb 1
\& 1.2.3.4=critical,ASN1:UTF8String:Some random data
\&
\& 1.2.3.4=ASN1:SEQUENCE:seq_sect
\&
\& [seq_sect]
\&
\& field1 = UTF8:field1
\& field2 = UTF8:field2
.Ve
.PP
It be also possible ta use tha word \s-1DER\s0 ta include tha raw encoded data up in any
extension.
.PP
.Vb 2
\& 1.2.3.4=critical,DER:01:02:03:04
\& 1.2.3.4=DER:01020304
.Ve
.PP
Da value followin \s-1DER\s0 be a hex dump of tha \s-1DER\s0 encodin of tha extension
Any extension can be placed up in dis form ta override tha default behaviour.
For example:
.PP
.Vb 1
\& basicConstraints=critical,DER:00:01:02:03
.Ve
.SH "WARNING"
.IX Header "WARNING"
There is no guarantee dat a specific implementation will process a given
extension. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it may therefore be sometimes possible ta use certificates for
purposes prohibited by they extensions cuz a specific application do
not recognize or honour tha jointz of tha relevant extensions.
.PP
Da \s-1DER\s0 n' \s-1ASN1\s0 options should be used wit caution. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is possible ta create
totally invalid extensions if they is not used carefully.
.SH "NOTES"
.IX Header "NOTES"
If a extension is multi-value n' a gangbangin' field value must contain a cold-ass lil comma tha long
form must be used otherwise tha comma would be misinterpreted as a gangbangin' field
separator. Shiiit, dis aint no joke. For example:
.PP
.Vb 1
\& subjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar
.Ve
.PP
will produce a error but tha equivalent form:
.PP
.Vb 1
\& subjectAltName=@subject_alt_section
\&
\& [subject_alt_section]
\& subjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar
.Ve
.PP
is valid.
.PP
Cuz of tha behaviour of tha OpenSSL \fBconf\fR library tha same field name
can only occur once up in a section. I aint talkin' bout chicken n' gravy biatch. This means that:
.PP
.Vb 1
\& subjectAltName=@alt_section
\&
\& [alt_section]
\&
\& email=steve@here
\& email=steve@there
.Ve
.PP
will only recognize tha last value. This can be hit dat shiznit round by rockin tha form:
.PP
.Vb 1
\& [alt_section]
\&
\& email.1=steve@here
\& email.2=steve@there
.Ve
.SH "HISTORY"
.IX Header "HISTORY"
Da X509v3 extension code was first added ta OpenSSL 0.9.2.
.PP
Policy mappings, inhibit any policy n' name constraints support was added in
OpenSSL 0.9.8
.PP
Da \fBdirectoryName\fR n' \fBotherName\fR option as well as tha \fB\s-1ASN1\s0\fR option
for arbitrary extensions was added up in OpenSSL 0.9.8
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIreq\fR\|(1), \fIca\fR\|(1), \fIx509\fR\|(1),
\&\fIASN1_generate_nconf\fR\|(3)
