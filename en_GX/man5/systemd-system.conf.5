'\" t
.TH "SYSTEMD\-SYSTEM\&.CONF" "5" "" "systemd 208" "systemd-system.conf"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-system.conf, systemd-user.conf \- System n' session steez manager configuration file
.SH "SYNOPSIS"
.PP
/etc/systemd/system\&.conf
.PP
/etc/systemd/user\&.conf
.SH "DESCRIPTION"
.PP
When run as system instizzle systemd readz tha configuration file
system\&.conf, otherwise
user\&.conf\&. These configuration filez contain all dem settings controllin basic manager operations\&.
.SH "OPTIONS"
.PP
All options is configured up in the
"[Manager]"
section:
.PP
\fILogLevel=\fR, \fILogTarget=\fR, \fILogColor=\fR, \fILogLocation=\fR, \fIDumpCore=yes\fR, \fICrashShell=no\fR, \fIShowStatus=yes\fR, \fICrashChVT=1\fR, \fIDefaultStandardOutput=journal\fR, \fIDefaultStandardError=inherit\fR
.RS 4
Configures various parametaz of basic manager operation\&. These options may be overridden by tha respectizzle command line arguments\&. Right back up in yo muthafuckin ass. See
\fBsystemd\fR(1)
for details bout these command line arguments\&.
.RE
.PP
\fIDefaultTimeoutStartSec=\fR, \fIDefaultTimeoutStopSec=\fR, \fIDefaultRestartSec=\fR
.RS 4
Configures tha default time\-outs fo' startin n' stoppin of units, as well as tha default time ta chill between automatic restartz of a units, as configured per\-unit in
\fITimeoutStartSec=\fR,
\fITimeoutStopSec=\fR
and
\fIRestartSec=\fR
(for steez units see
\fBsystemd.service\fR(5)
for details on tha per\-unit settings)\&. For non\-service units
\fIDefaultTimeoutStartSec=\fR
sets tha default
\fITimeoutSec=\fR
value\&.
.RE
.PP
\fIDefaultStartLimitInterval=\fR, \fIDefaultStartLimitBurst=\fR
.RS 4
Configure tha default start rate limiting, as configured per\-service by
\fIStartLimitInterval=\fR
and
\fIStartLimitBurst=\fR\&. Right back up in yo muthafuckin ass. See
\fBsystemd.service\fR(5)
for details on tha per\-service settings)\&.
.RE
.PP
\fICPUAffinity=\fR
.RS 4
Configures tha initial CPU affinitizzle fo' tha init process\&. Takes a space\-separated list of CPU indices\&.
.RE
.PP
\fIJoinControllers=cpu,cpuacct net_cls,netprio\fR
.RS 4
Configures controllaz dat shall be mounted up in a single hierarchy\&. By default, systemd will mount all controllaz which is enabled up in tha kernel up in individual hierarchies, wit tha exception of dem listed up in dis setting\&. Takes a space\-separated list of comma\-separated controlla names, up in order ta allow multiple joined hierarchies\&. Defaults ta \*(Aqcpu,cpuacct\*(Aq\&. Pass a empty strang ta ensure dat systemd mounts all controllaz up in separate hierarchies\&.
.sp
Note dat dis option is only applied once, at straight-up early boot\&. If you use a initial RAM disk (initrd) dat uses systemd, it might hence be necessary ta rebuild tha initrd if dis option is chizzled, n' make shizzle tha freshly smoked up configuration file is included up in it\&. Otherwise, tha initrd might mount tha controlla hierarchies up in a gangbangin' finger-lickin' different configuration than intended, n' tha main system cannot remount dem no mo'\&.
.RE
.PP
\fIRuntimeWatchdogSec=\fR, \fIShutdownWatchdogSec=\fR
.RS 4
Configure tha hardware watchdog at runtime n' at reboot\&. Takes a timeout value up in secondz (or up in other time units if suffixed with
"ms",
"min",
"h",
"d",
"w")\&. If
\fIRuntimeWatchdogSec=\fR
is set ta a non\-zero value, tha watchdog hardware (/dev/watchdog) is ghon be programmed ta automatically reboot tha system if it aint contacted within tha specified timeout interval\&. Da system manager will ensure ta contact it at least once up in half tha specified timeout interval\&. This feature requires a hardware watchdog thang ta be present, as it is commonly tha case up in embedded n' server systems\&. Not all hardware watchdawgs allow configuration of tha reboot timeout, up in which case tha closest available timeout is picked\&.
\fIShutdownWatchdogSec=\fR
may be used ta configure tha hardware watchdog when tha system be axed ta reboot\&. Well shiiiit, it works as a safety net ta ensure dat tha reboot takes place even if a cold-ass lil clean reboot attempt times out\&. By default
\fIRuntimeWatchdogSec=\fR
defaults ta 0 (off), and
\fIShutdownWatchdogSec=\fR
to 10min\&. These settings have no effect if a hardware watchdog aint available\&.
.RE
.PP
\fICapabilityBoundingSet=\fR
.RS 4
Controls which capabilitizzles ta include up in tha capabilitizzle boundin set fo' PID 1 n' its children\&. Right back up in yo muthafuckin ass. See
\fBcapabilities\fR(7)
for details\&. Takes a whitespace\-separated list of capabilitizzle names as read by
\fBcap_from_name\fR(3)\&. Capabilitizzles listed is ghon be included up in tha boundin set, all others is removed\&. If tha list of capabilitizzles is prefixed wit ~, all but tha listed capabilitizzles is ghon be included, tha effect of tha assignment inverted\&. Note dat dis option also affects tha respectizzle capabilitizzles up in tha effective, permitted n' inheritable capabilitizzle sets\&. Da capabilitizzle boundin set may also be individually configured fo' units rockin the
\fICapabilityBoundingSet=\fR
directizzle fo' units yo, but note dat capabilitizzles dropped fo' PID 1 cannot be regained up in individual units, they is lost fo' good\&.
.RE
.PP
\fITimerSlackNSec=\fR
.RS 4
Sets tha timer slack up in nanosecondz fo' PID 1 which is then inherited ta all executed processes, unless overridden individually, fo' example wit the
\fITimerSlackNSec=\fR
settin up in steez units (for details see
\fBsystemd.exec\fR(5))\&. Da timer slack controls tha accuracy of wake\-ups triggered by timers\&. Right back up in yo muthafuckin ass. See
\fBprctl\fR(2)
for mo' shiznit\&. Note dat up in contrast ta most other time span definitions dis parameta takes a integer value up in nano\-secondz if no unit is specified\&. Da usual time units is understood too\&.
.RE
.PP
\fIDefaultEnvironment=\fR
.RS 4
Sets manager environment variablez passed ta all executed processes\&. Takes a space\-separated list of variable assignments\&. Right back up in yo muthafuckin ass. See
\fBenviron\fR(7)
for details bout environment variables\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
DefaultEnvironment="VAR1=word1 word2" VAR2=word3 "VAR3=word 5 6"
.fi
.if n \{\
.RE
.\}
.sp
Sets three variables
"VAR1",
"VAR2",
"VAR3"\&.
.RE
.PP
\fIDefaultLimitCPU=\fR, \fIDefaultLimitFSIZE=\fR, \fIDefaultLimitDATA=\fR, \fIDefaultLimitSTACK=\fR, \fIDefaultLimitCORE=\fR, \fIDefaultLimitRSS=\fR, \fIDefaultLimitNOFILE=\fR, \fIDefaultLimitAS=\fR, \fIDefaultLimitNPROC=\fR, \fIDefaultLimitMEMLOCK=\fR, \fIDefaultLimitLOCKS=\fR, \fIDefaultLimitSIGPENDING=\fR, \fIDefaultLimitMSGQUEUE=\fR, \fIDefaultLimitNICE=\fR, \fIDefaultLimitRTPRIO=\fR, \fIDefaultLimitRTTIME=\fR
.RS 4
These settings control various default resource limits fo' units\&. Right back up in yo muthafuckin ass. See
\fBsetrlimit\fR(2)
for details\&. Use tha string
\fIinfinity\fR
to configure no limit on a specific resource\&. These settings may be overridden up in individual units rockin tha correspondin LimitXXX= directives\&. Note dat these resource limits is only defaults fo' units, they is not applied ta PID 1 itself\&.
.RE
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemd.directives\fR(7),
\fBenviron\fR(7)
