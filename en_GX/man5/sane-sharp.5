.TH sane\-sharp 5 "11 Jul 2008" "" "SANE Scanner Access Now Easy"
.IX sane\-sharp
.SH NAME
sane\-sharp \- SANE backend fo' SHARP scanners
.SH DESCRIPTION
The
.B sane\-sharp
library implements a SANE (Scanner Access Now Easy) backend that
provides access ta Sharp SCSI scanners.  This backend should be
considered
.B beta-quality
software biaaatch!  In tha current state it is known ta work wit JX-610 n' JX-250 
scanners. Well shiiiit, it is prepared fo' usage wit tha JX-330 series scanners,
but we is not able ta test it wit these devices.
.PP
For other Sharp scanners, it may or may not work.
.PP
At present,
the followin scanners is known ta work wit dis backend.
.RS
.PP
.ft CR
.nf
Vendor  Product id:
-----   -----------
Sharp   JX-610
Sharp   JX-250
Sharp   JX-320
Sharp   JX-330
Sharp   JX-350
.fi
.ft R
.RE
.PP
Da followin scanners is detected by tha backend yo, but not tested:
.PP
.RS
.ft CR
.nf
Vendor  Product id:
-----   -----------
Sharp   JX-325
.fi
.ft R
.RE
.SH DEVICE NAMES
This backend expects thang namez of tha form:
.PP
.RS
.I special
.RE
.PP
Where
.I special
is either tha path-name fo' tha special thang dat correspondz ta a
SCSI scanner n' shit. Da special thang name must be a generic SCSI thang or a
symlink ta such a thugged-out device.  Under Linux, such a thang name could be
.I /dev/sga
or
.IR /dev/sge ,
for example.  See sane\-scsi(5) fo' details.

.SH SCAN OPTIONS

.B Scan Mode
(parameta 
.B \-\-mode
for scanimage). Possible settings: 
.RS
.B Lineart
(1 bit black & white scans), 
.br
.B Gray
(8 bit gray scale scans),
.br
.B Lineart Color
(bi-level color scans), 
.br
.B Color
(8 bit RGB scans).
.RE
Da default value is
.B Color.

.B Halftone Pattern
(parameter
.B \-\-halftone\-pattern
for scanimage) fo' realz. Available only fo' tha JX-330 series scanners.
Possible settings:
.RS
.B none
.br
.B Dither Bizzleer
.br 
.B Dither Spiral
.br
.B Dither Dispersed
.br 
.B Error Diffusion
.RE
Da default value is
.B none.

.B Paper Source
(parameter
.B \-\-source
for scanimage). This option is only available, if a automatic document
feeder or a transparency adapta is installed. Y'all KNOW dat shit, muthafucka! Possible settings:
.RS
.B Flatbed
.br
.B Automatic Document Feeder
.br
.B Transparency Adapter
.RE
If a ADF or a transparency adapta is installed, rockin it is the
default selection. I aint talkin' bout chicken n' gravy biatch. 

.B Custom Gamma
(parameta 
.B \-\-custom\-gamma
for scanimage). This option determines whether a funky-ass builtin or a cold-ass lil custom 
gamma-table is used. Y'all KNOW dat shit, muthafucka! Possible settings:
.RS
.B yes
enablez custom gamma tables
.br
.B no
enablez a funky-ass built gamma table
.RE

.B Gamma
(parameta 
.B \-\-Gamma
for scanimage). This option is only available, if 
.B Custom Gamma
is set ta 
.B no.
Possible joints:
.RS
.B 1.0
.br
.B 2.2
.RE
Da default value is 2.2. (Da JX-250 n' JX-350 have no built up in gamma 
correction; fo' these scanner, a gamma table is downloaded ta tha scanner 
by tha backend.)

.B Gamma Table
(parameta 
.B \-\-gamma\-table
for scanimage) fo' realz. Allowed joints: 0..255; 256 numbers must be defined. Y'all KNOW dat shit, muthafucka! 
Da default joints is 0, 1, 2, .. 255 (i.e., gamma == 1). This table 
is only used fo' gray scale scans.

.B Red Gamma Table
(parameta 
.B \-\-red\-gamma\-table 
for scanimage) fo' realz. Allowed joints: 0..255; 256 numbers must be defined.
Da default joints is 0, 1, 2, .. 255 (i.e., gamma == 1).

.B Chronic Gamma Table
(parameta 
.B \-\-green\-gamma\-table 
for scanimage) fo' realz. Allowed joints: 0..255; 256 numbers must be defined.
Da default joints is 0, 1, 2, .. 255 (i.e., gamma == 1).

.B Blue Gamma Table
(parameta 
.B \-\-blue\-gamma\-table 
for scanimage) fo' realz. Allowed joints: 0..255; 256 numbers must be defined.
Da default joints is 0, 1, 2, .. 255 (i.e., gamma == 1).

.B Resolution
in pixel per inch (parameter
.B \-\-resolution
for scanimage). Right back up in yo muthafuckin ass. Selects tha resolution of tha scanned image fo' realz. Allowed joints:
.RS
.B 30..600
(JX-330, JX-350 n' JX-610) resp. 
.B 30..400
(JX-250)
.RE
Da default value is 150.

.B Scan Window

Da possible settings depend on tha scanner model and, fo' the
JX-250 n' tha JX-350, also on tha usage of tha automatic document feeder resp. the
transparency adapter n' shit. Please refer ta tha joints allowed by xscanimage, or
xsane. With scanimage, enta one of tha followin commands:

.RS
.I scanimage \-d sharp \-\-source """Automatic Document Feeder""" \-\-help

.I scanimage \-d sharp \-\-source Flatbed \-\-help

.I scanimage \-d sharp \-\-source """Transparency Adapter""" \-\-help
.RE

in order ta peep tha allowed parameta joints fo' tha scan window.

Da scan window parametas are:

.RS
Top-left x posizzle of scan area (parameta 
.B \-l
for scanimage);
.br
Top-left y posizzle of scan area (parameta 
.B \-t
for scanimage);
.br
bottom right x posizzle of scan area (parameta 
.B \-x
for scanimage);
.br
bottom right y posizzle of scan area (parameta 
.B \-y
for scanimage);
.RE

.B Edge emphasis
(parameter
.B \-\-Edge emphasis
for scanimage). This option aint available fo' tha JX-250 n' tha JX-350. 
Possible settings:
.RS
.B None
.br
.B Middle
.br
.B Strong
.br
.B Blur
.RE
Da default value is 
.B None.

.B Threshold
(parameta 
.B \-\-threshold
for scanimage). Right back up in yo muthafuckin ass. Sets tha threshold fo' black n' white pixels up in lineart
mode. Possible joints:
.RS
.B 1..255
.RE
Da default value is 
.B 128.
This option is only available up in scan mode lineart.

.B Threshold Red
(parameta 
.B \-\-threshold-red
for scanimage). Right back up in yo muthafuckin ass. Sets tha threshold fo' tha red component of a pixel in
in lineart color scan mode. Possible joints:
.RS
.B 1..255
.RE
Da default value is 
.B 128.
This option is only available up in scan mode color lineart.

.B Threshold Green
(parameta 
.B \-\-threshold-green
for scanimage). Right back up in yo muthafuckin ass. Sets tha threshold fo' tha chronic component of a pixel in
in lineart color scan mode. Possible joints:
.RS
.B 1..255
.RE
Da default value is 
.B 128.
This option is only available up in scan mode color lineart.

.B Threshold Blue
(parameta 
.B \-\-threshold-blue
for scanimage). Right back up in yo muthafuckin ass. Sets tha threshold fo' tha blue component of a pixel in
in lineart color scan mode. Possible joints:
.RS
.B 1..255
.RE
Da default value is 
.B 128.
This option is only available up in scan mode color lineart.

.B Light Color
(parameta 
.B \-\-LightColor
for scanimage). Right back up in yo muthafuckin ass. Sets tha color of tha light source. Possible joints:
.RS
.B white
.br
.B red
.br
.B green
.br
.B blue
.RE
Da default value is 
.B white.
This option is only available up in scan modes lineart color n' color.

.SH ADF USAGE
If a paper jam occurred, tha maintenizzle cover
.I
must
be opened n' closed, even if tha jammed paper can be removed without opening
the maintenizzle cover n' shit. Otherwise, tha error condizzle cannot be cleared.

.SH CONFIGURATION
Da contentz of tha 
.I sharp.conf
file be a list of options n' thang names dat correspond ta Sharp 
scanners. Empty lines n' lines beginnin wit a hash mark (#) are
ignored. Y'all KNOW dat shit, muthafucka! See sane\-scsi(5) fo' details bout thang names.
.PP
Lines settin a option start wit tha key word
.B option,
followed by tha optionz name n' tha optionz value fo' realz. At present, three
options is defined: 
.B buffers, buffersize, 
and
.B readqueue. 
.PP
Options defined all up in tha start of 
.I sharp.conf
apply ta all devices; options defined afta a
device name apply ta dis device.
.PP
Da options 
.B buffers
and
.B
readqueue
are only dope if tha backend has been compiled
so dat fo' each scan a second process is forked (switch 
.B USE_FORK
in 
.I sharp.c
). This process readz the
scan data from tha scanner n' writes dis data tha fuck into a funky-ass block of shared memory.
Da parent process readz tha data from dis memory block n' delivers it 
to tha frontend yo, but it ain't no stoppin cause I be still poppin'. Da options control tha size n' usage of dis shared 
memory block.
.PP
.B option buffers
defines tha number of buffers used. Y'all KNOW dat shit, muthafucka! Da smallest number allowed is 2. 
.PP
.B option buffersize
defines tha size of one buffer n' shit. Right back up in yo muthafuckin ass. Since each buffer is filled wit a 
single read command busted ta tha scanner, its size is limited automatically
to tha size allowed by tha operatin system or by tha Sane SCSI library
for SCSI read commandz fo' realz. A buffer size of 128 kB or 256 kB is recommended
for scan resolutionz of 300 dpi n' above.
.PP
.B option readqueue 
defines how tha fuck nuff read commandz ta be busted ta tha scanner
are queued. Y'all KNOW dat shit, muthafucka! At present, tha Sane SCSI library supports queued read 
commandz only fo' for Linux. For other operatin systems, 
.B option readqueue
should be set ta 0. For Linux, 
.B option readqueue
should be set ta 2. Larger joints than 2 for
.B option readqueue
are not reasonable up in most cases.
.B option buffers
should be pimped outa than 
.B option readqueue.

.SH Performizzle Considerations
This section focuses on tha problem of stopz of tha scannerz carriage
durin a scan. I aint talkin' bout chicken n' gravy biatch. Carriage stops happen mainly wit tha JX-250. This scanner 
has obviously only a lil' small-ass internal buffer compared ta its speed. Y'all KNOW dat shit, muthafucka! That 
means dat tha backend must read tha data as fast as possible from tha 
scanner up in order ta avoid carriage stops. 
.PP
Even tha JX-250 needz only less than 10 secondz fo' a 400 dpi A4 gray 
scale scan, which thangs up in dis biatch up in a thugged-out data transfer rate of mo' than 1.6 MB 
per second. Y'all KNOW dat shit, muthafucka! This means dat tha data produced by tha scanner must be 
processed fairly fast. Cuz of tha lil' small-ass internal buffer of tha JX-250,
the backend must issue a read request fo' tha next data block as soon
as possible afta readin a funky-ass block of data up in order ta avoid carriage
stops.
.PP
Stopz of tha carriage can be caused by tha followin reasons:
.PP
.RS
\- too much "traffic" on tha SCSI bus
.br
\- slow responses by tha backend ta tha scanner,
.br
\- a program which processes tha data acquired by tha backend too slow.
.PP
.RE
Too much "traffic" on tha SCSI bus: This happens fo' example, if hard disks
are connected ta tha same SCSI bus as tha scanner, n' when data transfer 
from/to these hard disks requires a cold-ass lil considerable part of tha SCSI bandwidth
durin a scan. I aint talkin' bout chicken n' gravy biatch. If dis is tha case, you should consider ta connect tha 
scanner ta a separate SCSI adapter.
.PP
Slow responses by tha backend ta tha scanner: Unfortunately,
Unix-like operatin systems generally have no real time capabilities.
Thus there is no guarantee dat tha backend is under any circumstances
able ta rap wit tha scanner as fast as required. Y'all KNOW dat shit, muthafucka! To minimize this
problem, tha backend should be compiled so dat a separate reader process 
is forked: Make shizzle that
.B USE_FORK
is defined when you compile 
.I sharp.c.
If slow responsez of tha backend remain ta be problem, you could try to
reduce tha load of tha system. Even while tha backend n' tha reader 
process need only a minor amount of processor time, other hustlin 
processes can cause a increase up in tha time delay between two time
slices given ta tha reader process. On slower systems, such a 
increased delay can be enough ta cause a cold-ass lil carriage stop wit tha JX-250.
For Linux, tha usage of tha SG driver version 2.1.36 or above is
recommended, cuz it supports, up in combination with
the SCSI library of Sane version 1.0.2, command queuein within tha kernel.
This queuein implementation, combined wit a funky-ass buffer size of at least
128 kB, should avoid most carriage stops.
.PP
Slow processin of tha scan data: An example fo' dis thang is
the access ta tha scanner via a 10 MBit Ethernet, which is definitely
too slow ta transfer tha scan data as fast as they is produced by the
scanner n' shit. If you have enough memory available, you can increase 
.B option buffers,
so dat a entire image can be stored up in these buffers. 
.PP
In order ta see, if tha backend is too slow or if tha further processing
of tha data is too slow, set tha environment variable
.B SANE_DEBUG_SHARP
to 1. When a scan is finished, tha backend writes tha line "buffer full
conditions: 
.I nn"
to stderr. Shiiit, dis aint no joke. If
.I nn
is zero, carriage stops is caused by too slow responsez of tha backend
or too much "traffic" on tha SCSI bus. If 
.I nn
is pimped outa than zero, tha backend had ta wait
.I nn
times until a funky-ass buffer has been processed by tha frontend yo, but it ain't no stoppin cause I be still poppin'. (Please note that
.B option buffers
must be pimped outa than
.B option readqueue
in order ta git useful output fo' "buffer full conditions".)

.SH FILES
.TP
.I /etc/sane.d/sharp.conf
Da backend configuration file.
.TP
.I /usr/lib64/sane/libsane\-sharp.a
Da static library implementin dis backend.
.TP
.I /usr/lib64/sane/libsane\-sharp.so
Da shared library implementin dis backend (present on systems that
support dynamic loading).
.SH ENVIRONMENT
.TP
.B SANE_DEBUG_SHARP
If tha library was compiled wit debug support enabled, this
environment variable controls tha debug level fo' dis backend yo, but it ain't no stoppin cause I be still poppin'.  E.g.,
a value of 128 requests all debug output ta be printed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Smaller
levels reduce verbosity.
.SH KNOWN PROBLEMS
1 fo' realz. ADF Mode
.RS
Afta nuff muthafuckin ADF scans, tha scanner moves tha carriage back ta tha idle
posizzle n' back ta ADF scan position, before a scan starts, n' you can put dat on yo' toast. Us dudes do not 
know, if dis be a problem of tha scanner, or if dis be a funky-ass bug of tha 
backend yo, but it ain't no stoppin cause I be still poppin' fo' realz. At present, tha scanner must juice off n' on ta stop this
buggin behaviour.
.RE

2. Threshold level do not work (only JX-610)
.PP
3. Da maximum resolution is limited ta 600 dpi(JX-610 supported 
to 1200 dpi) resp. 400 dpi (JX-250)
.PP
4. If tha JX250 is used wit a ADF, tha followin thang can occur: After
several scans, tha scanner moves, afta loadin a freshly smoked up shizzle of paper, the
carriage ta tha idle position, n' then back ta tha posizzle used fo' ADF
scans. This happens fo' 
.I
every
scan, up in contrast ta tha calibration, which is done afta 10 scans. (For the
calibration, tha carriage be also moved ta tha idle position.) Us dudes do not
know, if dis behavior is caused by tha backend, or if it aint nuthin but a funky-ass bug up in the
firmware of tha scanner.
.PP
5. Usage of a transparency adapta (film scan unit) is supported yo, but not
tested.

.SH "SEE ALSO"
sane(7), sane\-scsi(5)
.SH AUTHORS
Kazuya Fukuda, Abel Deuring
.SH CREDITS
Da Sharp backend is based on tha Canon backend freestyled by Helmut Koeberle
.PP
Partz of dis playa page is a plain copy of sane\-mustek(5) by David
Mosberger-Tang, Andreas Czechanowski n' Andreas Bolsch
