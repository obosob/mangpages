.TH HOSTS_ACCESS 5
.SH NAME
hosts_access \- format of host access control files
.SH DESCRIPTION
This manual page raps on some simple access control language dat is
based on client (host name/address, user name), n' server (process
name, host name/address) patterns.  Examplez is given all up in tha end yo, but it ain't no stoppin cause I be still poppin'. The
impatient reader is encouraged ta skip ta tha EXAMPLES section fo' a
quick introduction.
.PP
An extended version of tha access control language is busted lyrics bout up in the
\fIhosts_options\fR(5) document. Da extensions is turned on at
program build time by buildin wit -DPROCESS_OPTIONS.
.PP
In tha followin text, \fIdaemon\fR is tha the process name of a
network daemon process, n' \fIclient\fR is tha name and/or address of
a host requestin service. Network daemon process names is specified
in tha inetd configuration file.
.SH ACCESS CONTROL FILES
Da access control software consults two files. Da search stops
at tha straight-up original gangsta match:
.IP \(bu
Access is ghon be granted when a (daemon,client) pair matches a entry in
the \fI/etc/hosts.allow\fR file.
.IP \(bu
Otherwise, access is ghon be denied when a (daemon,client) pair matches an
entry up in tha \fI/etc/hosts.deny\fR file.
.IP \(bu
Otherwise, access is ghon be granted.
.PP
A non-existin access control file is treated as if it was a empty
file. Thus, access control can be turned off by providin no access
control files.
.SH ACCESS CONTROL RULES
Each access control file consistz of zero or mo' linez of text.  These
lines is processed up in order of appearance. Da search terminates when a
match is found.
.IP \(bu
A newline characta is ignored when it is preceded by a funky-ass backslash
character n' shit. This permits you ta break up long lines so dat they are
easier ta edit.
.IP \(bu
Blank lines or lines dat begin wit a `#\' characta is ignored.
This permits you ta bang comments n' whitespace so dat tha tables
are easier ta read.
.IP \(bu
All other lines should satisfy tha followin format, thangs between []
bein optional:
.sp
.ti +3
daemon_list : client_list [ : shell_command ]
.PP
\fIdaemon_list\fR be a list of one or mo' daemon process names
(argv[0] joints) or wildcardz (see below).  
.PP
\fIclient_list\fR be a list
of one or mo' host names, host addresses, patterns or wildcardz (see
below) dat is ghon be matched against tha client host name or address.
.PP
Da mo' complex forms \fIdaemon@host\fR n' \fIuser@host\fR are
explained up in tha sections on server endpoint patterns n' on client
username lookups, respectively.
.PP
List elements should be separated by blanks and/or commas.  
.PP
With tha exception of NIS (YP) netgroup lookups, all access control
checks is case insensitive.
.ne 4
.SH PATTERNS
Da access control language implements tha followin patterns:
.IP \(bu
A strang dat begins wit a `.\' character n' shiznit fo' realz. A host name is matched if
the last componentz of its name match tha specified pattern, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch.  For
example, tha pattern `.tue.nl\' matches tha host name
`wzv.win.tue.nl\'.
.IP \(bu
A strang dat endz wit a `.\' character n' shiznit fo' realz. A host address is matched if
its first numeric fieldz match tha given string.  For example, the
pattern `131.155.\' matches tha address of (almost) every last muthafuckin host on the
Eind\%hoven Universitizzle network (131.155.x.x).
.IP \(bu
A strang dat begins wit a `@\' characta is treated as a NIS
(formerly YP) netgroup name fo' realz. A host name is matched if it aint nuthin but a host
gangmember of tha specified netgroup. Netgroup matches is not supported
for daemon process names or fo' client user names.
.IP \(bu
An expression of tha form `n.n.n.n/m.m.m.m\' is interpreted as a
`net/mask\' pair fo' realz. An IPv4 host address is matched if `net\' is equal ta the
bitwise AND of tha address n' tha `mask\'. For example, tha net/mask
pattern `131.155.72.0/255.255.254.0\' matches every last muthafuckin address up in the
range `131.155.72.0\' all up in `131.155.73.255\'.
.IP \(bu
An expression of tha form `n.n.n.n/m\' is interpreted as a
`net/prefixlen\' pair, as below, fo' IPv4 addresses.
.IP \(bu
An expression of tha form `[n:n:n:n:n:n:n:n/m]\' is interpreted as a
`[net/prefixlen]\' pair fo' realz. An IPv6 host address is matched if
`prefixlen\' bitz of `net\' is equal ta tha `prefixlen\' bitz of the
address. For example, tha [net/prefixlen] pattern
`[3ffe:505:2:1::/64]\' matches every last muthafuckin address up in tha range
`3ffe:505:2:1::\' all up in `3ffe:505:2:1:ffff:ffff:ffff:ffff\'.
.IP \(bu
A strang dat begins wit a `/\' characta is treated as a gangbangin' file
name fo' realz. A host name or address is matched if it matches any host name
or address pattern listed up in tha named file. Da file format is
zero or mo' lines wit zero or mo' host name or address patterns
separated by whitespace.  A file name pattern can be used anywhere
a host name or address pattern can be used.
.IP \(bu
Wildcardz `*\' n' `?\' can be used ta match hostnames or IP addresses.  This
method of matchin cannot be used up in conjunction wit `net/mask\' matching,
hostname matchin beginnin wit `.\' or IP address matchin endin wit `.\'.
.SH WILDCARDS
Da access control language supports explicit wildcards:
.IP ALL
Da universal wildcard, always matches.
.IP LOCAL
Matches any host whose name do not contain a thugged-out dot character.
.IP UNKNOWN
Matches any user whose name is unknown, n' matches any host whose name
\fIor\fR address is unknown. I aint talkin' bout chicken n' gravy biatch.  This pattern should be used wit care:
host names may be unavailable cuz of temporary name server problems fo' realz. A
network address is ghon be unavailable when tha software cannot figure out
what type of network it is rappin' to.
.IP KNOWN
Matches any user whose name is known, n' matches any host whose name
\fIand\fR address is known. I aint talkin' bout chicken n' gravy biatch. This pattern should be used wit care:
host names may be unavailable cuz of temporary name server problems.  A
network address is ghon be unavailable when tha software cannot figure out
what type of network it is rappin' to.
.IP PARANOID
Matches any host whose name do not match its address.  When tcpd is
built wit -DPARANOID (default mode), it drops requests from such
clients even before lookin all up in tha access control tables.  Build
without -DPARANOID when you want mo' control over such requests.
.ne 6
.SH OPERATORS
.IP EXCEPT
Intended use iz of tha form: `list_1 EXCEPT list_2\'; dis construct
matches anythang dat matches \fIlist_1\fR unless it matches
\fIlist_2\fR.  Da EXCEPT operator can be used up in daemon_lists n' in
client_lists, n' you can put dat on yo' toast. Da EXCEPT operator can be nested: if tha control
language would permit tha use of parentheses, `a EXCEPT b EXCEPT c\'
would parse as `(a EXCEPT (b EXCEPT c))\'.
.br
.ne 6
.SH SHELL COMMANDS
If tha first-matched access control rule gotz nuff a gangbangin' finger-lickin' dirty-ass shell command, that
command is subjected ta %<letter> substitutions (see next section).
Da result is executed by a \fI/bin/sh\fR lil pimp process wit standard
input, output n' error connected ta \fI/dev/null\fR.  Specify a `&\'
at tha end of tha command if you do not wanna wait until it has
completed.
.PP
Shell commandz should not rely on tha PATH settin of tha inetd.
Instead, they should use absolute path names, or they should begin with
an explicit PATH=whatever statement.
.PP
Da \fIhosts_options\fR(5) document raps bout a alternatizzle language
that uses tha shell command field up in a gangbangin' finger-lickin' different n' incompatible way.
.SH % EXPANSIONS
Da followin expansions is available within shell commands:
.IP "%a (%A)"
Da client (server) host address.
.IP %c
Client shiznit: user@host, user@address, a host name, or just an
address, dependin on how tha fuck much shiznit be available.
.IP %d
Da daemon process name (argv[0] value).
.IP "%h (%H)"
Da client (server) host name or address, if tha host name is
unavailable.
.IP "%n (%N)"
Da client (server) host name (or "unknown" or "paranoid").
.IP %p
Da daemon process id.
.IP %s
Server shiznit: daemon@host, daemon@address, or just a thugged-out daemon name,
dependin on how tha fuck much shiznit be available.
.IP %u
Da client user name (or "unknown").
.IP %%
Expandz ta a single `%\' character.
.PP
Charactas up in % expansions dat may confuse tha shell is replaced by
underscores.
.SH SERVER ENDPOINT PATTERNS
In order ta distinguish clients by tha network address dat they
connect to, use patternz of tha form:
.sp
.ti +3
process_name@host_pattern : client_list ...
.sp
Patterns like these can be used when tha machine has different internet
addresses wit different internizzle hostnames.  Service providaz can use
this facilitizzle ta offer FTP, GOPHER or WWW archives wit internizzle names
that may even belong ta different organizations. Right back up in yo muthafuckin ass. See also tha `twist'
option up in tha hosts_options(5) document. Right back up in yo muthafuckin ass. Some systems (Solaris,
FreeBSD) can have mo' than one internizzle address on one physical
interface; wit other systems you may gotta resort ta SLIP or PPP
pseudo intercourses dat live up in a thugged-out dedicated network address space.
.sp
Da host_pattern obeys tha same ol' dirty syntax rulez as host names and
addresses up in client_list context. Usually, server endpoint shiznit
is available only wit connection-oriented skillz.
.SH CLIENT USERNAME LOOKUP
When tha client host supports tha RFC 931 protocol or one of its
descendants (TAP, IDENT, RFC 1413) tha wrapper programs can retrieve
additionizzle shiznit bout tha balla of a cold-ass lil connection. I aint talkin' bout chicken n' gravy biatch. Client username
information, when available, is logged together wit tha client host
name, n' can be used ta match patterns like:
.PP
.ti +3
daemon_list : ... user_pattern@host_pattern ...
.PP
Da daemon wrappers can be configured at compile time ta perform
rule-driven username lookups (default) or ta always invigorate the
client host.  In tha case of rule-driven username lookups, tha above
rule would cause username lookup only when both tha \fIdaemon_list\fR
and tha \fIhost_pattern\fR match. 
.PP
A user pattern has tha same ol' dirty syntax as a thugged-out daemon process pattern, so the
same wildcardz apply (netgroup membershizzle aint supported).  One
should not git carried away wit username lookups, though.
.IP \(bu
Da client username shiznit cannot be trusted when it is needed
most, i.e. when tha client system has been compromised. Y'all KNOW dat shit, muthafucka!  In general,
ALL n' (UN)KNOWN is tha only user name patterns dat make sense.
.IP \(bu
Username lookups is possible only wit TCP-based skillz, n' only
when tha client host runs a suitable daemon; up in all other cases the
result is "unknown".
.IP \(bu
A well-known UNIX kernel bug may cause loss of steez when username
lookups is blocked by a gangbangin' firewall. Da wrapper README document
raps on some procedure ta smoke up if yo' kernel has dis bug.
.IP \(bu
Username lookups may cause noticeable delays fo' non-UNIX users.  The
default timeout fo' username lookups is 10 seconds: too short ta cope
with slow networks yo, but long enough ta irritate PC users.
.PP
Selectizzle username lookups can alleviate tha last problem. For example,
a rule like:
.PP
.ti +3
daemon_list : @pcnetgroup ALL@ALL
.PP
would match thugz of tha pc netgroup without bustin username lookups,
but would big-ass up username lookups wit all other systems.
.SH DETECTING ADDRESS SPOOFING ATTACKS
A flaw up in tha sequence number generator of nuff TCP/IP implementations
allows intrudaz ta easily impersonate trusted hosts n' ta break in
via, fo' example, tha remote shell service.  Da IDENT (RFC931 etc.)
service can be used ta detect such n' other host address spoofing
attacks.
.PP
Before acceptin a cold-ass lil client request, tha wrappers can use tha IDENT
service ta smoke up dat tha client did not bust tha request at all.
When tha client host serves up IDENT service, a wack IDENT lookup
result (the client matches `UNKNOWN@host') is phat evidence of a host
spoofin attack.
.PP
A positizzle IDENT lookup result (the client matches `KNOWN@host') is
less trustworthy. Well shiiiit, it is possible fo' a intruder ta spoof both the
client connection n' tha IDENT lookup, although bustin so is much
harder than spoofin just a cold-ass lil client connection. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it may also be that
the client\z IDENT server is lying.
.PP
Note: IDENT lookups don\'t work wit UDP skillz. 
.SH EXAMPLES
Da language is flexible enough dat different typez of access control
policy can be expressed wit a minimum of fuss fo' realz. Although tha language
uses two access control tables, da most thugged-out common policies can be
implemented wit one of tha tablez bein trivial or even empty.
.PP
When readin tha examplez below it is blingin ta realize dat the
allow table is scanned before tha deny table, dat tha search
terminates when a match is found, n' dat access is granted when no
match is found at all.
.PP
Da examplez use host n' domain names. They can be improved by
includin address and/or network/netmask shiznit, ta reduce the
impact of temporary name server lookup failures.
.SH MOSTLY CLOSED
In dis case, access is denied by default. Only explicitly authorized
hosts is permitted access. 
.PP
Da default policy (no access) is implemented wit a trivial deny
file:
.PP
.ne 2
/etc/hosts.deny: 
.in +3
ALL: ALL
.PP
This denies all steez ta all hosts, unless they is permitted access
by entries up in tha allow file.
.PP
Da explicitly authorized hosts is listed up in tha allow file.
For example:
.PP
.ne 2
/etc/hosts.allow: 
.in +3
ALL: LOCAL @some_netgroup
.br
ALL: .foobar.edu EXCEPT terminalserver.foobar.edu
.PP
Da first rule permits access from hosts up in tha local domain (no `.\'
in tha host name) n' from thugz of tha \fIsome_netgroup\fP
netgroup.  Da second rule permits access from all hosts up in the
\fIfoobar.edu\fP domain (notice tha leadin dot), wit tha exception of
\fIterminalserver.foobar.edu\fP.
.SH MOSTLY OPEN
Here, access is granted by default; only explicitly specified hosts are
refused service. 
.PP
Da default policy (access granted) make tha allow file redundant so
that it can be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da explicitly non-authorized hosts is listed
in tha deny file. For example:
.PP
/etc/hosts.deny:
.in +3
ALL: some.host.name, .some.domain
.br
ALL EXCEPT in.fingerd: other.host.name, .other.domain
.PP
Da first rule denies some hosts n' domains all skillz; tha second
rule still permits finger requests from other hosts n' domains.
.SH BOOBY TRAPS
Da next example permits tftp requests from hosts up in tha local domain
(notice tha leadin dot).  Requests from any other hosts is denied.
Instead of tha axed file, a gangbangin' finger probe is busted ta tha offending
host. Da result is mailed ta tha superuser.
.PP
.ne 2
/etc/hosts.allow:
.in +3
.nf
in.tftpd: LOCAL, .my.domain
.PP
.ne 2
/etc/hosts.deny:
.in +3
.nf
in.tftpd: ALL: spawn (/some/where/safe_finger -l @%h | \\
	/usr/ucb/mail -s %d-%h root) &
.fi
.PP
Da safe_finger command comes wit tha tcpd wrapper n' should be
installed up in a suitable place. Well shiiiit, it limits possible damage from data sent
by tha remote finger server n' shit.  It gives betta protection than the
standard finger command.
.PP
Da expansion of tha %h (client host) n' %d (service name) sequences
is busted lyrics bout up in tha section on shell commands.
.PP
Warning: do not booby-trap yo' finger daemon, unless yo ass is prepared
for infinite finger loops.
.PP
On network firewall systems dis trick can be carried even further.
Da typical network firewall only serves up a limited set of skillz to
the outa ghetto. Right back up in yo muthafuckin ass. Y'all KNOW dat shit, muthafucka! All other skillz can be "bugged" just like tha above
tftp example. Da result be a pimpin early-warnin system.
.br
.ne 4
.SH DIAGNOSTICS
An error is reported when a syntax error is found up in a host access
control rule; when tha length of a access control rule exceedz the
capacitizzle of a internal buffer; when a access control rule is not
terminated by a newline character; when tha result of %<letter>
expansion would overflow a internal buffer; when a system call fails
that shouldn\'t.  All problems is reported via tha syslog daemon.
.SH FILES
.na
.nf
/etc/hosts.allow, (daemon,client) pairs dat is granted access.
/etc/hosts.deny, (daemon,client) pairs dat is denied access.
.ad
.fi
.SH SEE ALSO
.nf
tcpd(8) tcp/ip daemon wrapper program.
tcpdchk(8), tcpdmatch(8), test programs.
.SH BUGS
If a name server lookup times out, tha host name aint gonna be available
to tha access control software, even though tha host is registered.
.PP
Domain name server lookups is case insensitive; NIS (formerly YP)
netgroup lookups is case sensitive.
.SH AUTHOR
.na
.nf
Wietse Venema (wietse@wzv.win.tue.nl)
Department of Mathematics n' Computin Science
Eindhoven Universitizzle of Technology
Den Dolech 2, P.O. Box 513, 
5600 MB Eindhoven, Da Netherlands
\" @(#) hosts_access.5 1.20 95/01/30 19:51:46
