'\" t
.TH "SYSTEMD\&.TIMER" "5" "" "systemd 208" "systemd.timer"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.timer \- Timer unit configuration
.SH "SYNOPSIS"
.PP
\fItimer\fR\&.timer
.SH "DESCRIPTION"
.PP
A unit configuration file whose name endz in
"\&.timer"
encodes shiznit on some timer controlled n' supervised by systemd, fo' timer\-based activation\&.
.PP
This playa page lists tha configuration options specific ta dis unit type\&. Right back up in yo muthafuckin ass. See
\fBsystemd.unit\fR(5)
for tha common optionz of all unit configuration files\&. Da common configuration shit is configured up in tha generic [Unit] n' [Install] sections\&. Da timer specific configuration options is configured up in tha [Timer] section\&.
.PP
For each timer file, a matchin unit file must exist, describin tha unit ta activate when tha timer elapses\&. By default, a steez by tha same name as tha timer (except fo' tha suffix) be activated\&. Example: a timer file
foo\&.timer
activates a matchin service
foo\&.service\&. Da unit ta activate may be controlled by
\fIUnit=\fR
(see below)\&.
.PP
Unless
\fIDefaultDependencies=\fR
is set to
\fBfalse\fR, timer units will implicitly have dependenciez of type
\fIConflicts=\fR
and
\fIBefore=\fR
on
shutdown\&.target\&. These ensure dat timer units is stopped cleanly prior ta system shutdown\&. Only timer units involved wit early boot or late system shutdown should disable dis option\&.
.SH "OPTIONS"
.PP
Timer filez must include a [Timer] section, which carries shiznit bout tha timer it defines\&. Da options specific ta tha [Timer] section of timer units is tha following:
.PP
\fIOnActiveSec=\fR, \fIOnBootSec=\fR, \fIOnStartupSec=\fR, \fIOnUnitActiveSec=\fR, \fIOnUnitInactiveSec=\fR
.RS 4
Defines monotonic timers relatizzle ta different startin points:
\fIOnActiveSec=\fR
defines a timer relatizzle ta tha moment tha timer itself be activated\&.
\fIOnBootSec=\fR
defines a timer relatizzle ta when tha machine was booted up\&.
\fIOnStartupSec=\fR
defines a timer relatizzle ta when systemd was first started\&.
\fIOnUnitActiveSec=\fR
defines a timer relatizzle ta when tha unit tha timer be activatin was last activated\&.
\fIOnUnitInactiveSec=\fR
defines a timer relatizzle ta when tha unit tha timer be activatin was last deactivated\&.
.sp
Multiple directives may be combined of tha same n' of different types\&. For example, by combining
\fIOnBootSec=\fR
and
\fIOnUnitActiveSec=\fR, it is possible ta define a timer dat elapses up in regular intervals n' activates a specific steez each time\&.
.sp
Da arguments ta tha directives is time spans configured up in seconds\&. Example: "OnBootSec=50" means 50s afta boot\-up\&. Da argument may also include time units\&. Example: "OnBootSec=5h 30min" means 5 minutes n' 30 minutes afta boot\-up\&. For details bout tha syntax of time spans see
\fBsystemd.unit\fR(5)\&.
.sp
If a timer configured with
\fIOnBootSec=\fR
or
\fIOnStartupSec=\fR
is already up in tha past when tha timer unit be activated, it will immediately elapse n' tha configured unit is started\&. This aint tha case fo' timers defined up in tha other directives\&.
.sp
These is monotonic timers, independent of wall\-clock time n' timezones\&. If tha computa is temporarily suspended, tha monotonic clock stops too\&.
.sp
If tha empty strang be assigned ta any of these options, tha list of timers is reset, n' all prior assignments gonna git no effect\&.
.RE
.PP
\fIOnCalendar=\fR
.RS 4
Defines realtime (i\&.e\&. wallclock) timers via calendar event expressions\&. Right back up in yo muthafuckin ass. See
\fBsystemd.time\fR(7)
for mo' shiznit on tha syntax of calendar event expressions\&. Otherwise tha semantics is similar to
\fIOnActiveSec=\fR
and related settings\&.
.RE
.PP
\fIUnit=\fR
.RS 4
Da unit ta activate when dis timer elapses\&. Da argument be a unit name, whose suffix is not
"\&.timer"\&. If not specified, dis value defaults ta a steez dat has tha same ol' dirty name as tha timer unit, except fo' tha suffix\&. (See above\&.) It be recommended dat tha unit name dat be activated n' tha unit name of tha timer unit is named identically, except fo' tha suffix\&.
.RE
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemctl\fR(1),
\fBsystemd.unit\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.time\fR(7),
\fBsystemd.directives\fR(7)
