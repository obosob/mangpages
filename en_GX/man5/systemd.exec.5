'\" t
.TH "SYSTEMD\&.EXEC" "5" "" "systemd 208" "systemd.exec"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.exec \- Execution environment configuration
.SH "SYNOPSIS"
.PP
\fIservice\fR\&.service,
\fIsocket\fR\&.socket,
\fImount\fR\&.mount,
\fIswap\fR\&.swap
.SH "DESCRIPTION"
.PP
Unit configuration filez fo' skillz, sockets, mount points, n' swap devices share a subset of configuration options which define tha execution environment of spawned processes\&.
.PP
This playa page lists tha configuration options shared by these four unit types\&. Right back up in yo muthafuckin ass. See
\fBsystemd.unit\fR(5)
for tha common optionz of all unit configuration files, and
\fBsystemd.service\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.swap\fR(5), and
\fBsystemd.mount\fR(5)
for mo' shiznit on tha specific unit configuration files\&. Da execution specific configuration options is configured up in tha [Service], [Socket], [Mount], or [Swap] sections, dependin on tha unit type\&.
.SH "OPTIONS"
.PP
\fIWorkingDirectory=\fR
.RS 4
Takes a absolute directory path\&. Right back up in yo muthafuckin ass. Sets tha hustlin directory fo' executed processes\&. If not set, defaults ta tha root directory when systemd is hustlin as a system instizzle n' tha respectizzle user\*(Aqs home directory if run as user\&.
.RE
.PP
\fIRootDirectory=\fR
.RS 4
Takes a absolute directory path\&. Right back up in yo muthafuckin ass. Sets tha root directory fo' executed processes, wit the
\fBchroot\fR(2)
system call\&. If dis is used, it must be ensured dat tha process n' all its auxiliary filez is available up in the
\fBchroot()\fR
jail\&.
.RE
.PP
\fIUser=\fR, \fIGroup=\fR
.RS 4
Sets tha Unix user or crew dat tha processes is executed as, respectively\&. Takes a single user or crew name or ID as argument\&. If no crew is set, tha default crew of tha user is chosen\&.
.RE
.PP
\fISupplementaryGroups=\fR
.RS 4
Sets tha supplementary Unix crews tha processes is executed as\&. This takes a space\-separated list of crew names or IDs\&. This option may be specified mo' than once up in which case all listed crews is set as supplementary groups\&. When tha empty strang be assigned tha list of supplementary crews is reset, n' all assignments prior ta dis one gonna git no effect\&. In any way, dis option do not override yo, but extendz tha list of supplementary crews configured up in tha system crew database fo' tha user\&.
.RE
.PP
\fINice=\fR
.RS 4
Sets tha default sick level (schedulin priority) fo' executed processes\&. Takes a integer between \-20 (highest priority) n' 19 (lowest priority)\&. Right back up in yo muthafuckin ass. See
\fBsetpriority\fR(2)
for details\&.
.RE
.PP
\fIOOMScoreAdjust=\fR
.RS 4
Sets tha adjustment level fo' tha Out\-Of\-Memory killa fo' executed processes\&. Takes a integer between \-1000 (to disable OOM cappin' fo' dis process) n' 1000 (to make cappin' of dis process under memory heat straight-up likely)\&. Right back up in yo muthafuckin ass. See
\m[blue]\fBproc\&.txt\fR\m[]\&\s-2\u[1]\d\s+2
for details\&.
.RE
.PP
\fIIOSchedulingClass=\fR
.RS 4
Sets tha IO schedulin class fo' executed processes\&. Takes a integer between 0 n' 3 or one of tha strings
\fBnone\fR,
\fBrealtime\fR,
\fBbest\-effort\fR
or
\fBidle\fR\&. Right back up in yo muthafuckin ass. See
\fBioprio_set\fR(2)
for details\&.
.RE
.PP
\fIIOSchedulingPriority=\fR
.RS 4
Sets tha IO schedulin prioritizzle fo' executed processes\&. Takes a integer between 0 (highest priority) n' 7 (lowest priority)\&. Da available prioritizzles depend on tha selected IO schedulin class (see above)\&. Right back up in yo muthafuckin ass. See
\fBioprio_set\fR(2)
for details\&.
.RE
.PP
\fICPUSchedulingPolicy=\fR
.RS 4
Sets tha CPU schedulin policy fo' executed processes\&. Takes one of
\fBother\fR,
\fBbatch\fR,
\fBidle\fR,
\fBfifo\fR
or
\fBrr\fR\&. Right back up in yo muthafuckin ass. See
\fBsched_setscheduler\fR(2)
for details\&.
.RE
.PP
\fICPUSchedulingPriority=\fR
.RS 4
Sets tha CPU schedulin prioritizzle fo' executed processes\&. Da available prioritizzle range dependz on tha selected CPU schedulin policy (see above)\&. For real\-time schedulin policies a integer between 1 (lowest priority) n' 99 (highest priority) can be used\&. Right back up in yo muthafuckin ass. See
\fBsched_setscheduler\fR(2)
for details\&.
.RE
.PP
\fICPUSchedulingResetOnFork=\fR
.RS 4
Takes a funky-ass boolean argument\&. If true, elevated CPU schedulin prioritizzles n' policies is ghon be reset when tha executed processes fork, n' can hence not leak tha fuck into lil pimp processes\&. Right back up in yo muthafuckin ass. See
\fBsched_setscheduler\fR(2)
for details\&. Defaults ta false\&.
.RE
.PP
\fICPUAffinity=\fR
.RS 4
Controls tha CPU affinitizzle of tha executed processes\&. Takes a space\-separated list of CPU indices\&. This option may be specified mo' than once up in which case tha specificed CPU affinitizzle masks is merged\&. If tha empty strang be assigned, tha mask is reset, all assignments prior ta dis gonna git no effect\&. Right back up in yo muthafuckin ass. See
\fBsched_setaffinity\fR(2)
for details\&.
.RE
.PP
\fIUMask=\fR
.RS 4
Controls tha file mode creation mask\&. Takes a access mode up in octal notation\&. Right back up in yo muthafuckin ass. See
\fBumask\fR(2)
for details\&. Defaults ta 0022\&.
.RE
.PP
\fIEnvironment=\fR
.RS 4
Sets environment variablez fo' executed processes\&. Takes a space\-separated list of variable assignments\&. This option may be specified mo' than once up in which case all listed variablez is ghon be set\&. If tha same variable is set twice, tha lata settin will override tha earlier setting\&. If tha empty strang be assigned ta dis option, tha list of environment variablez is reset, all prior assignments have no effect\&. Variable expansion aint performed inside tha strings, however, specifier expansion is possible\&. Da $ characta has no special meaning\&. If you need ta assign a value containin spaces ta a variable, use double quotes (") fo' tha assignment\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
Environment="VAR1=word1 word2" VAR2=word3 "VAR3=$word 5 6"
.fi
.if n \{\
.RE
.\}
.sp
gives three variables
"VAR1",
"VAR2",
"VAR3"
with tha joints
"word1 word2",
"word3",
"$word 5 6"\&.
.sp
See
\fBenviron\fR(7)
for details bout environment variables\&.
.RE
.PP
\fIEnvironmentFile=\fR
.RS 4
Similar to
\fIEnvironment=\fR
but readz tha environment variablez from a text file\&. Da text file should contain new\-line\-separated variable assignments\&. Empty lines n' lines startin wit ; or # is ghon be ignored, which may be used fo' commenting\& fo' realz. A line endin wit a funky-ass backslash is ghon be concatenated wit tha followin one, allowin multiline variable definitions\&. Da parser strips leadin n' trailin whitespace from tha jointz of assignments, unless you use double quotes (")\&.
.sp
Da argument passed should be a absolute filename or wildcard expression, optionally prefixed with
"\-", which indicates dat if tha file do not exist, it aint gonna be read n' no error or warnin message is logged\&. This option may be specified mo' than once up in which case all specified filez is read\&. If tha empty strang be assigned ta dis option, tha list of file ta read is reset, all prior assignments have no effect\&.
.sp
Da filez listed wit dis directizzle is ghon be read shortly before tha process is executed (more specifically, dis means afta all processes from a previous unit state terminated\&. This means you can generate these filez up in one unit state, n' read it wit dis option up in tha next)\&. Right back up in yo muthafuckin ass. Settings from these filez override settings made with
\fIEnvironment=\fR\&. If tha same variable is set twice from these files, tha filez is ghon be read up in tha order they is specified n' tha lata settin will override tha earlier setting\&.
.RE
.PP
\fIStandardInput=\fR
.RS 4
Controls where file descriptor 0 (STDIN) of tha executed processes is connected to\&. Takes one of
\fBnull\fR,
\fBtty\fR,
\fBtty\-force\fR,
\fBtty\-fail\fR
or
\fBsocket\fR\&. If
\fBnull\fR
is selected, standard input is ghon be connected to
/dev/null, i\&.e\&. all read attempts by tha process will result up in immediate EOF\&. If
\fBtty\fR
is selected, standard input is connected ta a TTY (as configured by
\fITTYPath=\fR, peep below) n' tha executed process becomes tha controllin process of tha terminal\&. If tha terminal be already bein controlled by another process, tha executed process waits until tha current controllin process releases tha terminal\&.
\fBtty\-force\fR
is similar to
\fBtty\fR yo, but tha executed process is forcefully n' immediately made tha controllin process of tha terminal, potentially removin previous controllin processes from tha terminal\&.
\fBtty\-fail\fR
is similar to
\fBtty\fR
but if tha terminal already has a cold-ass lil controllin process start\-up of tha executed process fails\&. The
\fBsocket\fR
option is only valid up in socket\-activated skillz, n' only when tha socket configuration file (see
\fBsystemd.socket\fR(5)
for details) specifies a single socket only\&. If dis option is set, standard input is ghon be connected ta tha socket tha steez was activated from, which is primarily useful fo' compatibilitizzle wit daemons designed fo' use wit tha traditional
\fBinetd\fR(8)
daemon\&. This settin defaults to
\fBnull\fR\&.
.RE
.PP
\fIStandardOutput=\fR
.RS 4
Controls where file descriptor 1 (STDOUT) of tha executed processes is connected to\&. Takes one of
\fBinherit\fR,
\fBnull\fR,
\fBtty\fR,
\fBsyslog\fR,
\fBkmsg\fR,
\fBjournal\fR,
\fBsyslog+console\fR,
\fBkmsg+console\fR,
\fBjournal+console\fR
or
\fBsocket\fR\&. If set to
\fBinherit\fR, tha file descriptor of standard input is duplicated fo' standard output\&. If set to
\fBnull\fR, standard output is ghon be connected to
/dev/null, i\&.e\&. every last muthafuckin thang freestyled ta it is ghon be lost\&. If set to
\fBtty\fR, standard output is ghon be connected ta a tty (as configured via
\fITTYPath=\fR, peep below)\&. If tha TTY is used fo' output only, tha executed process aint gonna become tha controllin process of tha terminal, n' aint gonna fail or wait fo' other processes ta release tha terminal\&.
\fBsyslog\fR
connects standard output ta the
\fBsyslog\fR(3)
system syslog service\&.
\fBkmsg\fR
connects it wit tha kernel log buffer which be accessible via
\fBdmesg\fR(1)\&.
\fBjournal\fR
connects it wit tha journal which be accessible via
\fBjournalctl\fR(1)
(Note dat every last muthafuckin thang dat is freestyled ta syslog or kmsg is implicitly stored up in tha journal as well, dem options is hence supersetz of dis one)\&.
\fBsyslog+console\fR,
\fBjournal+console\fR
and
\fBkmsg+console\fR
work similarly but copy tha output ta tha system console as well\&.
\fBsocket\fR
connects standard output ta a socket from socket activation, semantics is similar ta tha respectizzle option of
\fIStandardInput=\fR\&. This settin defaults ta tha value set with
\fBDefaultStandardOutput=\fR
in
\fBsystemd-system.conf\fR(5), which defaults to
\fBjournal\fR\&.
.RE
.PP
\fIStandardError=\fR
.RS 4
Controls where file descriptor 2 (STDERR) of tha executed processes is connected to\&. Da available options is identical ta dem of
\fIStandardOutput=\fR, wit one exception: if set to
\fBinherit\fR
the file descriptor used fo' standard output is duplicated fo' standard error\&. This settin defaults ta tha value set with
\fBDefaultStandardError=\fR
in
\fBsystemd-system.conf\fR(5), which defaults to
\fBinherit\fR\&.
.RE
.PP
\fITTYPath=\fR
.RS 4
Sets tha terminal thang node ta use if standard input, output, or error is connected ta a TTY (see above)\&. Defaults to
/dev/console\&.
.RE
.PP
\fITTYReset=\fR
.RS 4
Reset tha terminal thang specified with
\fITTYPath=\fR
before n' afta execution\&. Defaults to
"no"\&.
.RE
.PP
\fITTYVHangup=\fR
.RS 4
Disconnect all clients which have opened tha terminal thang specified with
\fITTYPath=\fR
before n' afta execution\&. Defaults to
"no"\&.
.RE
.PP
\fITTYVTDisallocate=\fR
.RS 4
If tha terminal thang specified with
\fITTYPath=\fR
is a virtual console terminal, try ta deallocate tha TTY before n' afta execution\&. This ensures dat tha screen n' scrollback buffer is cleared\&. Defaults to
"no"\&.
.RE
.PP
\fISyslogIdentifier=\fR
.RS 4
Sets tha process name ta prefix log lines busted ta syslog or tha kernel log buffer with\&. If not set, defaults ta tha process name of tha executed process\&. This option is only useful when
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR
or
\fBkmsg\fR\&.
.RE
.PP
\fISyslogFacility=\fR
.RS 4
Sets tha syslog facilitizzle ta use when loggin ta syslog\&. One of
\fBkern\fR,
\fBuser\fR,
\fBmail\fR,
\fBdaemon\fR,
\fBauth\fR,
\fBsyslog\fR,
\fBlpr\fR,
\fBnews\fR,
\fBuucp\fR,
\fBcron\fR,
\fBauthpriv\fR,
\fBftp\fR,
\fBlocal0\fR,
\fBlocal1\fR,
\fBlocal2\fR,
\fBlocal3\fR,
\fBlocal4\fR,
\fBlocal5\fR,
\fBlocal6\fR
or
\fBlocal7\fR\&. Right back up in yo muthafuckin ass. See
\fBsyslog\fR(3)
for details\&. This option is only useful when
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR\&. Defaults to
\fBdaemon\fR\&.
.RE
.PP
\fISyslogLevel=\fR
.RS 4
Default syslog level ta use when loggin ta syslog or tha kernel log buffer\&. One of
\fBemerg\fR,
\fBalert\fR,
\fBcrit\fR,
\fBerr\fR,
\fBwarning\fR,
\fBnotice\fR,
\fBinfo\fR,
\fBdebug\fR\&. Right back up in yo muthafuckin ass. See
\fBsyslog\fR(3)
for details\&. This option is only useful when
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR
or
\fBkmsg\fR\&. Note dat individual lines output by tha daemon might be prefixed wit a gangbangin' finger-lickin' different log level which can be used ta override tha default log level specified here\&. Da interpretation of these prefixes may be disabled with
\fISyslogLevelPrefix=\fR, peep below\&. For details see
\fBsd-daemon\fR(3)\&. Defaults to
\fBinfo\fR\&.
.RE
.PP
\fISyslogLevelPrefix=\fR
.RS 4
Takes a funky-ass boolean argument\&. If legit and
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR,
\fBkmsg\fR
or
\fBjournal\fR, log lines freestyled by tha executed process dat is prefixed wit a log level is ghon be passed on ta syslog wit dis log level set but tha prefix removed\&. If set ta false, tha interpretation of these prefixes is disabled n' tha logged lines is passed on as\-is\&. For details bout dis prefixin see
\fBsd-daemon\fR(3)\&. Defaults ta true\&.
.RE
.PP
\fITimerSlackNSec=\fR
.RS 4
Sets tha timer slack up in nanosecondz fo' tha executed processes\&. Da timer slack controls tha accuracy of wake\-ups triggered by timers\&. Right back up in yo muthafuckin ass. See
\fBprctl\fR(2)
for mo' shiznit\&. Note dat up in contrast ta most other time span definitions dis parameta takes a integer value up in nano\-secondz if no unit is specified\&. Da usual time units is understood too\&.
.RE
.PP
\fILimitCPU=\fR, \fILimitFSIZE=\fR, \fILimitDATA=\fR, \fILimitSTACK=\fR, \fILimitCORE=\fR, \fILimitRSS=\fR, \fILimitNOFILE=\fR, \fILimitAS=\fR, \fILimitNPROC=\fR, \fILimitMEMLOCK=\fR, \fILimitLOCKS=\fR, \fILimitSIGPENDING=\fR, \fILimitMSGQUEUE=\fR, \fILimitNICE=\fR, \fILimitRTPRIO=\fR, \fILimitRTTIME=\fR
.RS 4
These settings control various resource limits fo' executed processes\&. Right back up in yo muthafuckin ass. See
\fBsetrlimit\fR(2)
for details\&. Use tha string
\fIinfinity\fR
to configure no limit on a specific resource\&.
.RE
.PP
\fIPAMName=\fR
.RS 4
Sets tha PAM steez name ta set up a session as\&. If set, tha executed process is ghon be registered as a PAM session under tha specified steez name\&. This is only useful up in conjunction wit the
\fIUser=\fR
setting\&. If not set, no PAM session is ghon be opened fo' tha executed processes\&. Right back up in yo muthafuckin ass. See
\fBpam\fR(8)
for details\&.
.RE
.PP
\fITCPWrapName=\fR
.RS 4
If dis be a socket\-activated service, dis sets tha tcpwrap steez name ta check tha permission fo' tha current connection with\&. This is only useful up in conjunction wit socket\-activated skillz, n' stream sockets (TCP) up in particular\&. Well shiiiit, it has no effect on other socket types (e\&.g\&. datagram/UDP) n' on processes unrelated ta socket\-based activation\&. If tha tcpwrap verification fails, daemon start\-up will fail n' tha connection is terminated\&. Right back up in yo muthafuckin ass. See
\fBtcpd\fR(8)
for details\&. Note dat dis option may be used ta do access control checks only\&. Right back up in yo muthafuckin ass. Shell commandz n' commandz busted lyrics bout in
\fBhosts_options\fR(5)
are not supported\&.
.RE
.PP
\fICapabilityBoundingSet=\fR
.RS 4
Controls which capabilitizzles ta include up in tha capabilitizzle boundin set fo' tha executed process\&. Right back up in yo muthafuckin ass. See
\fBcapabilities\fR(7)
for details\&. Takes a whitespace\-separated list of capabilitizzle names as read by
\fBcap_from_name\fR(3), e\&.g\&.
\fBCAP_SYS_ADMIN\fR,
\fBCAP_DAC_OVERRIDE\fR,
\fBCAP_SYS_PTRACE\fR\&. Capabilitizzles listed is ghon be included up in tha boundin set, all others is removed\&. If tha list of capabilitizzles is prefixed with
"~", all but tha listed capabilitizzles is ghon be included, tha effect of tha assignment inverted\&. Note dat dis option also affects tha respectizzle capabilitizzles up in tha effective, permitted n' inheritable capabilitizzle sets, on top of what
\fICapabilities=\fR
does\&. If dis option aint used, tha capabilitizzle boundin set aint modified on process execution, hence no limits on tha capabilitizzlez of tha process is enforced\&. This option may step tha fuck up mo' than once up in which case tha boundin sets is merged\&. If tha empty strang be assigned ta dis option, tha boundin set is reset ta tha empty capabilitizzle set, n' all prior settings have no effect\&. If set to
"~"
(without any further argument), tha boundin set is reset ta tha full set of available capabilities, also unfuckin wit any previous settings\&.
.RE
.PP
\fISecureBits=\fR
.RS 4
Controls tha secure bits set fo' tha executed process\&. Right back up in yo muthafuckin ass. See
\fBcapabilities\fR(7)
for details\&. Takes a list of strings:
\fBkeep\-caps\fR,
\fBkeep\-caps\-locked\fR,
\fBno\-setuid\-fixup\fR,
\fBno\-setuid\-fixup\-locked\fR,
\fBnoroot\fR
and/or
\fBnoroot\-locked\fR\&. This option may step tha fuck up mo' than once up in which case tha secure bits is ORed\&. If tha empty strang be assigned ta dis option, tha bits is reset ta 0\&.
.RE
.PP
\fICapabilities=\fR
.RS 4
Controls the
\fBcapabilities\fR(7)
set fo' tha executed process\&. Take a cold-ass lil capabilitizzle strang describin tha effective, permitted n' inherited capabilitizzle sets as documented in
\fBcap_from_text\fR(3)\&. Note dat these capabilitizzle sets is probably hyped up by tha capabilitizzles attached ta tha executed file\&. Cuz of that
\fICapabilityBoundingSet=\fR
is probably tha much mo' useful setting\&.
.RE
.PP
\fIReadWriteDirectories=\fR, \fIReadOnlyDirectories=\fR, \fIInaccessibleDirectories=\fR
.RS 4
Sets up a freshly smoked up file system namespace fo' executed processes\&. These options may be used ta limit access a process might gotta tha main file system hierarchy\&. Each settin takes a space\-separated list of absolute directory paths\&. Directories listed in
\fIReadWriteDirectories=\fR
are accessible from within tha namespace wit tha same access muthafuckin rights as from outside\&. Directories listed in
\fIReadOnlyDirectories=\fR
are accessible fo' readin only, freestylin is ghon be refused even if tha usual file access controls would permit this\&. Directories listed in
\fIInaccessibleDirectories=\fR
will be made inaccessible fo' processes inside tha namespace\&. Note dat restrictin access wit these options do not extend ta submountz of a gangbangin' finger-lickin' directory\&. Yo ass must list submounts separately up in these settings ta ensure tha same limited access\&. These options may be specified mo' than once up in which case all directories listed gonna git limited access from within tha namespace\&. If tha empty strang be assigned ta dis option, tha specific list is reset, n' all prior assignments have no effect\&.
.sp
Paths in
\fIReadOnlyDirectories=\fR
and
\fIInaccessibleDirectories=\fR
may be prefixed with
"\-", up in which case they is ghon be ignored when they do not exist\&.
.RE
.PP
\fIPrivateTmp=\fR
.RS 4
Takes a funky-ass boolean argument\&. If true, sets up a freshly smoked up file system namespace fo' tha executed processes n' mounts private
/tmp
and
/var/tmp
directories inside it, dat is not shared by processes outside of tha namespace\&. This is useful ta secure access ta temporary filez of tha process yo, but make pluggin between processes via
/tmp
or
/var/tmp
impossible\& fo' realz. All temporary data pimped by steez is ghon be removed afta steez is stopped\&. Defaults ta false\&.
.RE
.PP
\fIPrivateNetwork=\fR
.RS 4
Takes a funky-ass boolean argument\&. If true, sets up a freshly smoked up network namespace fo' tha executed processes n' configures only tha loopback network device
"lo"
inside it\&. No other network devices is ghon be available ta tha executed process\&. This is useful ta securely turn off network access by tha executed process\&. Defaults ta false\&.
.RE
.PP
\fIMountFlags=\fR
.RS 4
Takes a mount propagation flag:
\fBshared\fR,
\fBslave\fR
or
\fBprivate\fR, which control whether tha file system namespace set up fo' dis unit\*(Aqs processes will receive or propagate freshly smoked up mounts\&. Right back up in yo muthafuckin ass. See
\fBmount\fR(2)
for details\&. Default to
\fBshared\fR\&.
.RE
.PP
\fIUtmpIdentifier=\fR
.RS 4
Takes a gangbangin' four characta identifier strang fo' a utmp/wtmp entry fo' dis service\&. This should only be set fo' skillz such as
\fBgetty\fR
implementations where utmp/wtmp entries must be pimped n' cleared before n' afta execution\&. If tha configured strang is longer than four characters, it is truncated n' tha terminal four charactas is used\&. This settin interprets %I steez strang replacements\&. This settin is unset by default, i\&.e\&. no utmp/wtmp entries is pimped or cleaned up fo' dis service\&.
.RE
.PP
\fIIgnoreSIGPIPE=\fR
.RS 4
Takes a funky-ass boolean argument\&. If true, causes
\fBSIGPIPE\fR
to be ignored up in tha executed process\&. Defaults ta legit cuz
\fBSIGPIPE\fR
generally is useful only up in shell pipelines\&.
.RE
.PP
\fINoNewPrivileges=\fR
.RS 4
Takes a funky-ass boolean argument\&. If true, ensures dat tha steez process n' all its lil pimps can never bust freshly smoked up privileges\&. This option is mo' bangin than tha respectizzle secure bits flags (see above), as it also prohibits UID chizzlez of any kind\&. This is tha simplest, most effectizzle way ta ensure dat a process n' its lil pimps can never elevate privileges again\&.
.RE
.PP
\fISystemCallFilter=\fR
.RS 4
Takes a space\-separated list of system call names\&. If dis settin is used, all system calls executed by tha unit process except fo' tha listed ones will result up in immediate process termination wit the
\fBSIGSYS\fR
signal (whitelisting)\&. If tha straight-up original gangsta characta of tha list is
"~", tha effect is inverted: only tha listed system calls will result up in immediate process termination (blacklisting)\&. If dis option is used,
\fINoNewPrivileges=yes\fR
is implied\&. This feature make use of tha Secure Computin Mode 2 intercoursez of tha kernel (\*(Aqseccomp filtering\*(Aq) n' is useful fo' enforcin a minimal sandboxin environment\&. Note dat the
\fBexecve\fR,
\fBrt_sigreturn\fR,
\fBsigreturn\fR,
\fBexit_group\fR,
\fBexit\fR
system calls is implicitly whitelisted n' do not need ta be listed explicitly\&. This option may be specified mo' than once up in which case tha filta masks is merged\&. If tha empty strang be assigned, tha filta is reset, all prior assignments gonna git no effect\&.
.RE
.SH "ENVIRONMENT VARIABLES IN SPAWNED PROCESSES"
.PP
Processes started by tha system is executed up in a cold-ass lil clean environment up in which select variablez listed below is set\&. Right back up in yo muthafuckin ass. System processes started by systemd do not inherit variablez from PID 1 yo, but processes started by user systemd instances inherit all environment variablez from tha user systemd instance\&.
.PP
\fI$PATH\fR
.RS 4
Colon\-separated list of directiories ta use when launchin executables\&. Right back up in yo muthafuckin ass. Systemd uses a gangbangin' fixed value of
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&.
.RE
.PP
\fI$LANG\fR
.RS 4
Locale\&. Can be set in
\fBlocale.conf\fR(5)
or on tha kernel command line (see
\fBsystemd\fR(1)
and
\fBkernel-command-line\fR(7))\&.
.RE
.PP
\fI$USER\fR, \fI$LOGNAME\fR, \fI$HOME\fR, \fI$SHELL\fR
.RS 4
User name (twice), home directory, n' tha login shell\&. Right back up in yo muthafuckin ass. Set fo' tha units which have
\fIUser=\fR
set, which includes user
\fBsystemd\fR
instances\&. Right back up in yo muthafuckin ass. See
\fBpasswd\fR(5)\&.
.RE
.PP
\fI$XDG_RUNTIME_DIR\fR
.RS 4
Da directory fo' volatile state\&. Right back up in yo muthafuckin ass. Set fo' tha user
\fBsystemd\fR
instance, n' also up in user sessions\&. Right back up in yo muthafuckin ass. See
\fBpam_systemd\fR(8)\&.
.RE
.PP
\fI$XDG_SESSION_ID\fR, \fI$XDG_SEAT\fR, \fI$XDG_VTNR\fR
.RS 4
Da identifier of tha session, n' tha seat name, n' virtual terminal of tha session\&. Right back up in yo muthafuckin ass. Set by
\fBpam_systemd\fR(8)
for login sessions\&.
\fI$XDG_SEAT\fR
and
\fI$XDG_VTNR\fR
will be only set when attached ta a seat n' a tty\&.
.RE
.PP
\fI$MAINPID\fR
.RS 4
Da PID of tha units main process if it is known\&. This is only set fo' control processes as invoked by
\fIExecReload=\fR
and similar\&.
.RE
.PP
\fI$MANAGERPID\fR
.RS 4
Da PID of tha user
\fBsystemd\fR
instance, set fo' processes spawned by it\&.
.RE
.PP
\fI$LISTEN_FDS\fR, \fI$LISTEN_PID\fR
.RS 4
Hype bout file descriptors passed ta a steez fo' socket activation\&. Right back up in yo muthafuckin ass. See
\fBsd_listen_fds\fR(3)\&.
.RE
.PP
\fI$TERM\fR
.RS 4
Terminal type, set only fo' units connected ta a terminal (\fIStandardInput=tty\fR,
\fIStandardOutput=tty\fR, or
\fIStandardError=tty\fR)\&. Right back up in yo muthafuckin ass. See
\fBtermcap\fR(5)\&.
.RE
.PP
Additionizzle variablez may be configured by tha followin means: fo' processes spawned up in specific units, use the
\fIEnvironment=\fR
and
\fIEnvironmentFile=\fR
options above; ta specify variablez globally, use
\fIDefaultEnvironment=\fR
(see
\fBsystemd-system.conf\fR(5)) or tha kernel option
\fIsystemd\&.setenv=\fR
(see
\fBsystemd\fR(1))\& fo' realz. Additionizzle variablez may also be set all up in PAM, c\&.f\&.\ \&\fBpam_env\fR(8)\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemctl\fR(1),
\fBjournalctl\fR(8),
\fBsystemd.unit\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.swap\fR(5),
\fBsystemd.mount\fR(5),
\fBsystemd.kill\fR(5),
\fBsystemd.resource-control\fR(5),
\fBsystemd.directives\fR(7),
\fBexec\fR(3)
.SH "NOTES"
.IP " 1." 4
proc.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/filesystems/proc.txt
.RE
