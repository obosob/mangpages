.TH ntp_auth 5
.SH NAME
ntp_auth - Authentication Options
.SH \ 

.SH INTRODUCTION

This page raps bout tha various cryptographic authentication provisions up in NTPv4. Details bout tha configuration commandz n' options is given on tha Configuration Options page. Details bout tha automatic server discovery schemes is busted lyrics bout on tha Automatic Server Discovery Schemes page fo' realz. Additionizzle shiznit be available up in tha papers, reports, memoranda n' briefings cited on tha  NTP Project page fo' realz. Authentication support allows tha NTP client ta verify dat servers is up in fact known n' trusted n' not intrudaz intendin accidentally or intentionally ta masquerade as a legitimate server.

 Da NTPv3 justification RFC-1305 defines a scheme properly busted lyrics bout as symmetric key cryptography. Well shiiiit, it uses tha Data Encryption Standard (DES) algorithm operatin up in cipher-block chainin (CBC) mode. Right back up in yo muthafuckin ass. Subsequently, dis scheme was replaced by tha RSA Message Digest 5 (MD5) algorithm commonly called keyed-MD5. Either algorithm computes a message digest or one-way hash which can be used ta verify tha client has tha same ol' dirty key n' key identifier as tha server n' shit. If tha OpenSSL cryptographic library is installed, support be available fo' all algorithms included up in tha library. Note however, if conformizzle ta FIPS 140-2 is required, only a limited subset of these algorithms be available.

NTPv4 includes tha NTPv3 scheme n' optionally a freshly smoked up scheme based on hood key cryptography n' called Autokey. Public key cryptography is generally considered mo' secure than symmetric key cryptography, since tha securitizzle is based on private n' hood joints which is generated by each participant n' where tha private value is never revealed. Y'all KNOW dat shit, muthafucka! Autokey uses X.509 hood certificates, which can be produced by commercial skillz, utilitizzle programs up in tha OpenSSL software library or tha \fBntp-keygen\fR utilitizzle program up in tha NTP software distribution.

While tha algorithms fo' MD5 symmetric key cryptography is included up in tha NTPv4 software distribution, modern algorithms fo' symmetric key n' hood key cryptograpny requires tha OpenSSL software library ta be installed before buildin tha NTP distribution. I aint talkin' bout chicken n' gravy biatch. This library be available from http://www.openssl.org n' can be installed rockin tha procedures outlined up in tha Buildin n' Installin tha Distribution page. Once installed, tha configure n' build process automatically detects tha library n' links tha library routines required.

Note dat accordin ta US law, NTP binaries includin OpenSSL library components, includin tha OpenSSL library itself, cannot be exported outside tha US without license from tha US Department of Commerce. Buildaz outside tha US is advised ta obtain tha OpenSSL library directly from OpenSSL, which is outside tha US, n' build outside tha US.

Authentication is configured separately fo' each association rockin tha \fBkey\fR or \fBautokey\fR option of tha \fBserver\fR configuration command, as busted lyrics bout up in tha Server Options page, n' tha options busted lyrics bout on dis page. Da ntp-keygen page raps bout tha filez required fo' tha various authentication schemes. Further details is up in tha briefings, papers n' reports all up in tha NTP project page linked from www.ntp.org\[char46]

.SH SYMMETRIC KEY CRYPTOGRAPHY

Da original gangsta RFC-1305 justification allows any one of possibly 65,534 keys (excludin zero), each distinguished by a 32-bit key ID, ta authenticate a association. I aint talkin' bout chicken n' gravy biatch. Da servers n' clients involved must smoke on tha key, key ID n' key type ta authenticate NTP packets, n' you can put dat on yo' toast. If a NTP packet includes a message authentication code (MAC), consistin of a key ID n' message digest, it be accepted only if tha key ID matches a trusted key n' tha message digest is verified wit dis key. Note dat fo' phat reasons tha message digest algorithm aint consistent wit RFC-1828. Da digest is computed directly from tha concatenation of tha key strang followed by tha packet contents wit tha exception of tha MAC itself.

Keys n' related shiznit is specified up in a keys file, probably called \fBntp.keys\fR, which must be distributed n' stored rockin secure means beyond tha scope of tha NTP protocol itself. Besides tha keys used fo' ordinary NTP associations, additionizzle keys can be used as passwordz fo' tha \fBntpq\fR n' \fBntpdc\fR utilitizzle programs. Ordinarily, tha \fBntp.keys\fR file is generated by tha \fBntp-keygen\fR program yo, but it can be constructed n' edited rockin a ordinary text editor. Shiiit, dis aint no joke. Da program generates pseudo-random keys, one key fo' each line. Each line consistz of three fields, tha key identifier as a thugged-out decimal number from 1 ta 65534 inclusive, a key type chosen from tha keywordz of tha \fBdigest\fR option of tha \fBcrypto\fR command, n' a 20-characta printable ASCII strang or a 40-characta hex strang as tha key itself.

When \fBntpd\fR is first started, it readz tha key file specified by tha \fBkeys\fR command n' installs tha keys up in tha key cache. But fuck dat shiznit yo, tha word on tha street is dat individual keys must be activated wit tha \fBtrustedkey\fR configuration command before use. This allows, fo' instance, tha installation of possibly nuff muthafuckin batchez of keys n' then activatin a key remotely rockin \fBntpdc\fR\[char46] Da \fBrequestkey\fR command selects tha key ID used as tha password fo' tha \fBntpdc\fR utility, while tha \fBcontrolkey\fR command selects tha key ID used as tha password fo' tha \fBntpq\fR utility.

By default, tha message digest algorithm is MD5 selected by tha key type \fBM\fR up in tha keys file. But fuck dat shiznit yo, tha word on tha street is dat if tha OpenSSL library is installed, any message digest algorithm supported by dat library can be used. Y'all KNOW dat shit, muthafucka! Da key type is selected as tha algorithm name given up in tha OpenSSL documentation. I aint talkin' bout chicken n' gravy biatch. Da key type be associated wit tha key n' can be different fo' different keys. Da server n' client must share tha same key, key ID n' key type n' both must be trusted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Note dat if conformizzle ta FIPS 140-2 is required, tha message digest algorithm must conform ta tha Secure Hash Standard (SHS), which requires a algorithm from tha Secure Hash Algorithm (SHA) crew, n' tha digital signature encryption algorithm, if used, must conform ta tha Digital Signature Standard (DSS), which requires tha Digital Signature Algorithm (DSA).

In addizzle ta tha above means, \fBntpd\fR now supports Microsizzlez Windows MS-SNTP authentication rockin Actizzle Directory skillz. This support was contributed by tha Samba Crew n' is still up in pimpment. Well shiiiit, it is enabled rockin tha \fBmssntp\fR flag of tha \fBrestrict\fR command busted lyrics bout on tha Access Control Options page. Note: Potential playas should be aware dat these skillz involve a TCP connection ta another process dat could potentially block, denyin skillz ta other users. Therefore, dis flag should be used only fo' a thugged-out dedicated server wit no clients other than MS-SNTP.

.SH PUBLIC KEY CRYPTOGRAPHY

NTPv4 supports tha Autokey securitizzle protocol, which is based on hood key cryptography. Da Autokey Version 2 protocol busted lyrics bout on tha Autokey Protocol page verifies packet integritizzle rockin MD5 message digests n' verifies tha source rockin digital signatures n' any of nuff muthafuckin digest/signature schemes. Optionizzle identitizzle schemes busted lyrics bout on tha Autokey Identitizzle Schemes page is based on cryptographic challenge/response exchanges. These schemes provide phat securitizzle against replay wit or without message modification, spoofing, masquerade n' most formz of cloggin attacks. These schemes is busted lyrics bout along wit a executizzle summary, current status, briefin slides n' readin list on tha Autonomous Authentication page.

Autokey authenticates individual packets rockin dem scooby snacks bound ta tha IP source n' destination addresses. Da dem scooby snacks must have tha same addresses at both tha server n' client. For dis reason operation wit network address translation schemes aint possible. This reflects tha intended robust securitizzle model where posse n' corporate NTP servers is operated outside firewall perimeters.

There is three timeouts associated wit tha Autokey scheme. Da key list timeout, which defaults ta bout 1.1 h, specifies tha interval between generatin freshly smoked up key lists, n' you can put dat on yo' toast. Da revoke timeout, which defaults ta bout 36 h, specifies tha interval between generatin freshly smoked up private joints, n' you can put dat on yo' toast. Da restart timeout, wit default bout 5 d, specifies tha interval between protocol restarts ta refresh hood joints, n' you can put dat on yo' toast. In general, tha behavior when these timeouts expire aint affected by tha thangs discussed on dis page.

.SH NTP SECURE GROUPS

NTP secure crews is used ta define cryptographic compartments n' securitizzle hierarchies fo' realz. All hosts belongin ta a secure crew have tha same crew name but different host names. Da strang specified up in tha \fBhost\fR option of tha \fBcrypto\fR command is tha name of tha host n' tha name used up in tha host key, sign key n' certificate files. Da strang specified up in tha \fBident\fR option of tha \fBcrypto\fR command is tha crew name of all crew hosts n' tha name used up in tha identitizzle files. Da file namin conventions is busted lyrics bout on tha ntp-keygen page.

Each crew includes one or mo' trusted hosts (THs) operatin all up in tha root, or lowest stratum up in tha group. Da crew name is used up in tha subject n' issuer fieldz of tha TH self-signed trusted certificate fo' these hosts, n' you can put dat on yo' toast. Da host name is used up in tha subject n' issuer fieldz of tha self-signed certificates fo' all other hosts.

All crew hosts is configured ta provide a unbroken path, called a cold-ass lil certificate trail, from each host, possibly via intermediate hosts n' endin at a TH. When a host starts up, it recursively retrieves tha certificates along tha trail up in order ta verify crew membershizzle n' avoid masquerade n' middleman attacks.

Secure crews can be configured as hierarchies where a TH of one crew can be a cold-ass lil client of one or mo' other crews operatin at a lower stratum fo' realz. A certificate trail consist of a cold-ass lil chain of hosts startin at a cold-ass lil client, leadin all up in secondary serverz of progressively lower stratum n' endin at a TH. In one scenario, crews RED n' GREEN can be cryptographically distinct yo, but both be clientz of crew BLUE operatin at a lower stratum. In another scenario, crew CYAN can be a cold-ass lil client of multiple crews YELLOW n' MAGENTA, both operatin at a lower stratum. There is nuff other scenarios yo, but all must be configured ta include only acyclic certificate trails.

.SH IDENTITY SCHEMES AND CRYPTOTYPES

All configurations include a public/private host key pair n' matchin certificate fo' realz. Absent a identitizzle scheme, dis be a Trusted Certificate (TC) scheme. There is three identitizzle schemes, IFF, GQ n' MV busted lyrics bout on tha Identitizzle Schemes page. With these schemes all servers up in tha crew have encrypted server identitizzle keys, while clients have nonencrypted client identitizzle parameters. Da client parametas can be obtained from a trusted agent (TA), probably one of tha THz of tha lower stratum group. Further shiznit on identitizzle schemes is on tha Autokey Identitizzle Schemes page.

A specific combination of authentication n' identitizzle schemes is called a cold-ass lil cryptotype, which applies ta clients n' servers separately fo' realz. A crew can be configured rockin mo' than one cryptotype combination, although not all combinations is interoperable. Note however dat some cryptotype combinations may successfully intemperate wit each other yo, but may not represent phat securitizzle practice. Da server n' client cryptotypes is defined by tha the followin codes.

.RS 0 
.TP 8
NONE 
A client or server is type NONE if authentication aint available or not configured. Y'all KNOW dat shit, muthafucka! Packets exchanged between client n' server have no MAC.
.TP 8
AUTH 
A client or server is type AUTH if tha \fBkey\fR option is specified wit tha \fBserver\fR configuration command n' tha client n' server keys is compatible. Packets exchanged between clients n' servers gotz a MAC.
.TP 8
PC 
A client or server is type PC if tha \fBautokey\fR option is specified wit tha \fBserver\fR configuration command n' compatible host key n' private certificate filez is present. Packets exchanged between clients n' servers gotz a MAC.
.TP 8
TC 
A client or server is type TC if tha \fBautokey\fR option is specified wit tha \fBserver\fR configuration command n' compatible host key n' hood certificate filez is present. Packets exchanged between clients n' servers gotz a MAC.
.TP 8
IDENT
A client or server is type IDENT if tha \fBautokey\fR option is specified wit tha \fBserver\fR configuration command n' compatible host key, hood certificate n' identitizzle scheme filez is present. Packets exchanged between clients n' servers gotz a MAC.
.RE

Da compatible cryptotypes fo' clients n' servers is listed up in tha followin table.

.TS
expand allbox tab(%);
c c c c c c.
 Client/Server  % NONE  % AUTH  % PC  % TC  % IDENT 
 NONE  % yeaaaa  % yes*  % yes*  % yes*  % yes* 
 AUTH  % no  % yeaaaa  % no  % no  % no 
 PC  % no  % no  % yeaaaa  % no  % no 
 TC  % no  % no  % no  % yeaaaa  % yeaaaa 
 IDENT  % no  % no  % no  % no  % yeaaaa 
.TE

* These combinations is not valid if tha restriction list includes tha \fBnotrust\fR option.

.SH CONFIGURATION

Autokey has a intimipimpin number of configuration options, most of which is not necessary up in typical scenarios. Da simplest scenario consistz of a TH where tha host name of tha TH be also tha name of tha group. For tha simplest identitizzle scheme TC, tha TH generates host key n' trusted certificate filez rockin tha \fBntp-keygen -T\fR command, while tha remainin crew hosts use tha same command wit no options ta generate tha host key n' hood certificate filez fo' realz. All hosts use tha \fBcrypto\fR configuration command wit no options. Configuration wit passwordz is busted lyrics bout up in tha ntp-keygen page fo' realz. All crew hosts is configured as a acyclic tree wit root tha TH.

When a identitizzle scheme is included, fo' example IFF, tha TH generates host key, trusted certificate n' private server identitizzle key filez rockin tha \fBntp-keygen -T -I -i \fIgroup\fB\fR command, where \fB\fIgroup\fB\fR is tha crew name. Da remainin crew hosts use tha same command as above fo' realz. All hosts use tha \fBcrypto ident group\fI\fB\fR configuration command.

Hosts wit no dependent clients can retrieve client parameta filez from a archive or wizzy page. Da \fBntp-keygen\fR can export these data rockin tha \fB-e\fR option. I aint talkin' bout chicken n' gravy biatch yo. Hosts wit dependent clients other than tha TH must retrieve copiez of tha server key filez rockin secure means. Da \fBntp-keygen\fR can export these data rockin tha \fB-q\fR option. I aint talkin' bout chicken n' gravy biatch. In either case tha data is installed as a gangbangin' file n' then renamed rockin tha name given as tha straight-up original gangsta line up in tha file yo, but without tha filestamp.

.SH EXAMPLES

Consider a scenario involvin three secure crews RED, GREEN n' BLUE. RED n' BLUE is typical of nationistic laboratories providin certified time ta tha Internizzle at pimpin' fo' realz. As shown ion tha figure, RED TH mort n' BLUE TH macabre run NTP symmetric mode wit each other fo' monitorin or backup. For tha purpose of illustration, assume both THs is primary servers. GREEN is typical of a big-ass universitizzle providin certified time ta tha campus hood. GREEN TH howland be a funky-ass broadcast client of both RED n' BLUE. BLUE uses tha IFF scheme, while both RED n' GREEN use tha GQ scheme yo, but wit different keys. YELLOW be a cold-ass lil client of GREEN n' fo' purposez of illustration a TH fo' YELLOW.

Da BLUE TH macabre uses configuration commands

\fBcrypto pw qqsv ident blue\fR \fBpeer mort autokey\fR \fBbroadcast \fIaddress\fB autokey\fR

where \fBqqsv\fR is tha password fo' macabre filez n' \fIaddress\fR is tha broadcast address fo' tha local LAN. Well shiiiit, it generates BLUE filez rockin tha commands

\fBntp-keygen -p qqsv -T -G -i blue\fR \fBntp-keygen -p qqsv -e >ntpkey_gqpar_blue\fR

Da first line generates tha host, trusted certificate n' private GQ server keys file. Da second generates tha hood GQ client parametas file, which can have any nonconflictin mnemonic name.

Da RED TH mort uses configuration commands

\fBcrypto pw xxx ident red\fR \fBpeer macabre autokey\fR \fBbroadcast \fIaddress\fB autokey\fR

where \fBxxx\fR is tha password fo' mort files. Well shiiiit, it generates RED filez rockin tha commands

\fBntp-keygen -p xxx -T -I -i red\fR \fBntp-keygen -p xxx -e >ntpkey_iffpar_red\fR

 Da GREEN TH howland uses configuration commands

\fBcrypto pw yyy ident green\fR \fBbroadcastclient\fR

where \fByyy\fR is tha password fo' howland files. Well shiiiit, it generates GREEN filez rockin tha commands

\fBntp-keygen -p yyy -T -G -i green\fR \fBntp-keygen -p yyy -e >ntpkey_gqpar_green\fR \fBntp-keygen -p yyy -q zzz >zzz_ntpkey_gqkey_green\fR

Da first two lines serve tha same purpose as tha precedin examples. Da third line generates a cold-ass lil copy of tha private GREEN server file fo' use on another server up in tha same group, say YELLOW yo, but encrypted wit tha \fBzzz\fR password.

A client of GREEN, fo' example YELLOW, uses tha configuration commands

\fBcrypto pw abc ident green\fR \fBserver howland autokey\fR

where \fBabc\fR is tha password fo' its files. Well shiiiit, it generates filez rockin tha command

\fBntp-keygen -p abc\fR

Da client retrieves tha client file fo' dat crew from a hood archive or wizzy page rockin nonsecure means. In addition, each server up in a crew retrieves tha private server keys file from tha TH of dat crew yo, but it is encrypted n' so must be busted rockin secure means. Da filez is installed up in tha keys directory wit name taken from tha straight-up original gangsta line up in tha file yo, but without tha filestamp.

Note dat if serverz of different groups, up in dis case RED n' BLUE, share tha same broadcast media, each server must have client filez fo' all crews other than its own, while each client must have client filez fo' all groups. Note also dat dis scenario is fo' illustration only n' probably would not be wise fo' practical use, as if one of tha TH reference clocks fails, tha certificate trail becomes cyclic. In such cases tha symmetric path between RED n' BLUE, each up in a gangbangin' finger-lickin' different group, would not be a phat idea.

.SH AUTHENTICATION COMMANDS

.RS 0
.TP 8
\fBautomax [\fIlogsec\fB]\fR 
Specifies tha interval between regenerationz of tha session key list used wit tha Autokey protocol, as a juice of 2 up in seconds. Note dat tha size of tha key list fo' each association dependz on dis interval n' tha current poll interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da default interval is 12 (about 1.1 h). For poll intervals above tha specified interval, a session key list wit a single entry is ghon be regenerated fo' every last muthafuckin message sent.
.TP 8
\fBcontrolkey \fIkeyid\fB\fR 
Specifies tha key ID ta use wit tha \fBntpq\fR utility, which uses tha standard protocol defined up in RFC-1305. Da \fB\fIkeyid\fB\fR argument is tha key ID fo' a trusted key, where tha value can be up in tha range 1 ta 65534, inclusive.
.TP 8
\fBcrypto [randfile \fIfile\fB] [host \fIname\fB] [ident \fIname\fB] [pw \fIpassword\fB]\fR 
This command requires tha OpenSSL library. Well shiiiit, it activates hood key cryptography n' loadz tha required host key n' hood certificate. If one or mo' filez is left unspecified, tha default names is used as busted lyrics bout below. Unless tha complete path n' name of tha file is specified, tha location of a gangbangin' file is relatizzle ta tha keys directory specified up in tha \fBkeysdir\fR configuration command or default \fB/etc/ntp/crypto\fR\[char46] Peepin is tha options.

.RS 8
.TP 8
\fBdigest\fR \fBMD2\fR | \fBMD4\fR | \fBMD5\fR | \fBMDC2\fR | \fBRIPEMD160\fR | \fBSHA\fR | \fBSHA1\fR 
Specify tha message digest algorithm, wit default MD5. If tha OpenSSL library is installed, \fB\fIname\fB\fR can be be any message digest algorithm supported by tha library not exceedin 160 bits up in length. But fuck dat shiznit yo, tha word on tha street is dat all Autokey participants up in a Autokey subnet must use tha same algorithm. Note dat tha Autokey message digest algorithm is separate n' distinct form tha symmetric key message digest algorithms. Note: If compliizzle wit FIPS 140-2 is required, tha algorithm must be ether \fBSHA\fR or \fBSHA1\fR\[char46]
.TP 8
\fBhost \fIname\fB\fR 
Specifies tha strang used when constructin tha names fo' tha host, sign n' certificate filez generated by tha \fBntp-keygen\fR program wit tha \fB-s \fIname\fB\fR option.
.TP 8
\fBident \fIname\fB\fR 
Specifies tha strang used up in constructin tha identitizzle filez generated by tha \fBntp-keygen\fR program wit tha \fB-i \fIname\fB\fR option.
.TP 8
\fBpw \fIpassword\fB\fR 
Specifies tha password ta decrypt filez previously encrypted by tha \fBntp-keygen\fR program wit tha \fB-p\fR option.
.TP 8
\fBrandfile \fIfile\fB\fR 
Specifies tha location of tha random seed file used by tha OpenSSL library. Da defaults is busted lyrics bout on tha \fBntp-keygen\fR page.
.RE

.TP 8
\fBkeys \fIkeyfile\fB\fR 
Specifies tha complete path ta tha MD5 key file containin tha keys n' key IDs used by \fBntpd\fR, \fBntpq\fR n' \fBntpdc\fR when operatin wit symmetric key cryptography. This is tha same ol' dirty operation as tha \fB-k \fRcommand line option. I aint talkin' bout chicken n' gravy biatch. Note dat tha directory path fo' Autokey media is specified by tha \fBkeysdir\fR command.
.TP 8
\fBkeysdir \fIpath\fB\fRK 
This command specifies tha default directory path fo' Autokey cryptographic keys, parametas n' certificates. Da default is \fB/etc/ntp/crypto\fR\[char46] Note dat tha path fo' tha symmetric keys file is specified by tha \fBkeys\fR command.
.TP 8
\fBrequestkey \fIkeyid\fB\fR 
Specifies tha key ID ta use wit tha \fBntpdc\fR utilitizzle program, which uses a proprietary protocol specific ta dis implementation of \fBntpd\fR\[char46] Da \fB\fIkeyid\fB\fR argument be a key ID fo' a trusted key, up in tha range 1 ta 65534, inclusive.
.TP 8
\fBrevoke [\fIlogsec\fB]\fR 
Specifies tha interval between re-randomization of certain cryptographic joints used by tha Autokey scheme, as a juice of 2 up in seconds. These joints need ta be updated frequently up in order ta deflect brute-force attacks on tha algorithms; however, uppimpin some joints be a relatively high-rollin' operation. I aint talkin' bout chicken n' gravy biatch. Da default interval is 17 (about 36 h). For poll intervals above tha specified interval, tha joints is ghon be updated fo' every last muthafuckin message sent.
.TP 8
\fBtrustedkey [\fIkeyid\fB | (\fIlowid\fB ... \fIhighid\fB)] [...]\fR 
Specifies tha key ID(s) which is trusted fo' tha purposez of authenticatin peers wit symmetric key cryptography. Key IDs used ta authenticate \fBntpq\fR n' \fBntpdc\fR operations must be listed here n' additionally be enabled wit controlkey and/or requestkey\[char46] Da authentication procedure fo' time transfer require dat both tha local n' remote NTP servers employ tha same key ID n' secret fo' dis purpose, although different keys IDs may be used wit different servers. Rangez of trusted key IDs may be specified: "\fBtrustedkey (1 ... 19) 1000 (100 ... 199)\fR" enablez tha lowest 120 key IDs which start wit tha digit 1. Da spaces surroundin tha ellipsis is required when specifyin a range. 
.RE

.SH ERROR CODES

Errors can occur cuz of mismatched configurations, unexpected protocol restarts, expired certificates n' unfriendly people. In most cases tha protocol state machine recovers automatically by retransmission, timeout n' restart, where necessary. Right back up in yo muthafuckin ass. Some errors is cuz of mismatched keys, digest schemes or identitizzle schemes n' must be erected by installin tha erect media and/or erectin tha configuration file. One of da most thugged-out common errors is expired certificates, which must be regenerated n' signed at least once per year rockin tha \fBntp-keygen\fR - generate hood n' private keys program.

Da followin error codes is reported via tha NTP control n' monitorin protocol trap mechanizzle n' ta tha \fBcryptostats\fR monitorin file if configured.

.RS 0
.TP 8
101 wack field format or length 
Da packet has invalid version, length or format.
.TP 8
102 wack timestamp 
Da packet timestamp is tha same ol' dirty or olda than da most thugged-out recent received. Y'all KNOW dat shit, muthafucka! This could be cuz of a replay or a server clock time step.
.TP 8
103 wack filestamp 
Da packet filestamp is tha same ol' dirty or olda than da most thugged-out recent received. Y'all KNOW dat shit, muthafucka! This could be cuz of a replay or a key file generation error.
.TP 8
104 wack or missin hood key 
Da hood key is missing, has incorrect format or be a unsupported type.
.TP 8
105 unsupported digest type 
Da server requires a unsupported digest/signature scheme.
.TP 8
106 unsupported identitizzle type 
Da client or server has axed a identitizzle scheme tha other do not support.
.TP 8
107 wack signature length 
Da signature length do not match tha current hood key.
.TP 8
108 signature not verified 
Da message fails tha signature check. Well shiiiit, it could be bogus or signed by a gangbangin' finger-lickin' different private key.
.TP 8
109 certificate not verified 
Da certificate is invalid or signed wit tha wack key.
.TP 8
110 host certificate expired 
Da oldschool server certificate has expired.
.TP 8
111 wack or missin cookie 
Da cookie is missing, corrupted or bogus.
.TP 8
112 wack or missin leapsecondz table 
Da leapsecondz table is missing, corrupted or bogus.
.TP 8
113 wack or missin certificate 
Da certificate is missing, corrupted or bogus.
.TP 8
114 wack or missin crew key 
Da identitizzle key is missing, corrupt or bogus.
.TP 8
115 protocol error 
Da protocol state machine has wedged cuz of unexpected restart.
.RE

.SH FILES

See tha \fBntp-keygen\fR page. Note dat provisions ta load leap second joints from tha NIST filez done been removed. Y'all KNOW dat shit, muthafucka! These provisions is now available whether or not tha OpenSSL library be available. But fuck dat shiznit yo, tha word on tha street is dat tha functions dat can downlizzle these joints from servers remains available.

.SH SEE ALSO

ntp.conf(5), ntpd(8)

Da straight-up legit HTML documentation.

This file was automatically generated from HTML source.

