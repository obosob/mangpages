.TH LVM.CONF 5 "LVM TOOLS 2.02.106(2) (2014-04-10)" "Sistina Software UK" \" -*- nroff -*-
.SH NAME
lvm.conf \- Configuration file fo' LVM2
.SH SYNOPSIS
.B /etc/lvm/lvm.conf
.SH DESCRIPTION
\fBlvm.conf\fP is loaded durin tha initialisation phase of
\fBlvm\fP(8).  This file can up in turn lead ta other files
bein loaded - settings read up in lata override earlier
settings.  File timestamps is checked between commandz n' if
any have chizzled, all tha filez is reloaded.

Da settings defined up in lvm.conf can be overridden by any
of these extended configuration methods:
.TP
.B tag config
.br
See \fBtags\fP configuration settin description below.

.TP
.B flava config
.br
A flava be a set of selected customizable configuration settings
that is aimed ta big up a cold-ass lil certain characteristics up in various
environments or uses. Normally, tha name of tha flava should
reflect dat environment or use.

LVM itself serves up all dem predefined configuration profiles.
Users is allowed ta add mo' profilez wit different joints if needed.
For dis purpose, there be a tha \fBdefault.profile\fP which gotz nuff all
settings dat is customizable by profiles. Users is encouraged
to copy dis default flava n' edit it as needed. Y'all KNOW dat shit, muthafucka! Alternatively,
the \fBlvm dumpconfig --file <ProfileName.profile> --type profilable <section>\fP
can be used ta generate a cold-ass lil configuration wit profilable settings for
given section n' save it ta freshly smoked up ProfileName.profile (if tha section
is not specified, all profilable settings is reported).

Da profilez is stored up in /etc/lvm/profile directory by default.
This location can be chizzled rockin tha \fBconfig/profile_dir\fP setting.
Each flava configuration is stored up in \fBProfileName.profile\fP file
in tha flava directory. When referencin tha profile, tha \fB.profile\fP
suffix is left out.

Da flava ta use can be defined fo' each LVM command rockin tha \fB\-\-profile ProfileName\fP
command line option. I aint talkin' bout chicken n' gravy biatch. When rockin a flava while bustin Volume
Groups or Logical Volumes, tha ProfileName is stored up in Volume Group
metadata. When rockin such volumes lata on, tha flava be automatically
loaded n' applied. Y'all KNOW dat shit, muthafucka! If Volume Group n' any of its Logical Volumes have different
profilez defined, tha flava defined fo' tha Logical Volume is used. Y'all KNOW dat shit, muthafucka! Profiles
attached ta Volume Groups or Logical Volumes can be chizzled or detached
usin tha \fBvgchange\fP(8) n' \fBlvchange\fP(8) commandz wit \fB\-\-profile ProfileName\fP
or \fB\-\-detachprofile\fP options. For any other LVM command, tha \fB\-\-profile ProfileName\fP
option causes tha flava ta be applied only temporarily durin tha command
execution fo' any existin Volume Group or Logical Volume.

Da \fBvgs\fP n' \fBlvs\fP reportin commandz provide \fB-o vg_profile\fP and
\fB-o lv_profile\fP output options ta show tha flava currently attached ta a
Volume Group or a Logical Volume.

.TP
.B direct config override on command line
Da \fB\-\-config ConfigurationString\fP command line option takes the
ConfigurationStrin as direct strang representation of tha configuration
to override tha existin configuration. I aint talkin' bout chicken n' gravy biatch. Da ConfigurationStrin is of
exactly tha same format as used up in any LVM configuration file.

.LP
When nuff muthafuckin configuration methodz is used all up in tha same time
and when LVM looks fo' tha value of a particular setting, it traverses
this \fBconfig cascade\fP from left ta right:
\fBdirect config override on command line\fP -> \fBprofile config\fP -> \fBtag config\fP -> \fBlvm.conf\fP.
No part of dis cascade is compulsory. If there be a no settin value found at
the end of tha cascade, a thugged-out default value is used fo' dat setting.
Use \fBlvm dumpconfig\fP ta check what tha fuck settings is up in use n' what
the default joints are.
.SH SYNTAX
.LP
This section raps bout tha configuration file syntax.
.LP
Whitespace aint dope unless it is within quotes.
This serves up a wide chizzle of aaight indentation styles.
Comments begin wit # n' continue ta tha end of tha line.
They is treated as whitespace.
.LP
Here be a informal grammar:
.TP
.BR file " = " value *
.br
A configuration file consistz of a set of joints.
.TP
.BR value " = " section " | " assignment
.br
A value can either be a freshly smoked up section, or a assignment.
.TP
.BR section " = " identifier " '" { "' " value "* '" } '
.br
A section is crews associated joints together.
.br
It be denoted by a name n' delimited by curly brackets.
.br
e.g.	backup {
.br
		...
.br
	}
.TP
.BR assignment " = " identifier " '" = "' ( " array " | " type " )"
.br
An assignment associates a type wit a identifier.
.br
e.g.	level = 7
.br
.TP
.BR array " =  '" [ "' ( " type " '" , "')* " type " '" ] "' | '" [ "' '" ] '
.br
Inhomogeneous arrays is supported.
.br
Elements must be separated by commas.
.br
An empty array be acceptable.
.TP
.BR type " = " integer " | " float " | " string
.BR integer " = [0-9]*"
.br
.BR float " = [0-9]*'" . '[0-9]*
.br
.B strang \fR= '\fB"\fR'.*'\fB"\fR'
.IP
Strings must be enclosed up in double quotes.

.SH SECTIONS
.LP
Da sections dat may be present up in tha file are:
.TP
\fBdevices\fP \(em Device settings
.IP
\fBdir\fP \(em Directory up in which ta create volume crew thang nodes.
Defaults ta "/dev".  Commandz also accept dis as a prefix on volume
group names.
.IP
\fBscan\fP \(em List of directories ta scan recursively for
LVM physical volumes.
Devices up in directories outside dis hierarchy is ghon be ignored.
Defaults ta "/dev".
.IP
\fBpreferred_names\fP \(em List of patterns compared up in turn against
all tha pathnames referencin tha same thang up in in tha scanned directories.
Da pathname dat matches tha earliest pattern up in tha list is the
one used up in any output.  As a example, if device-mapper multipathing
is used, tha followin will select multipath thang names:
.br
\fBdevices { preferred_names = [ "^/dev/mapper/mpath" ] }\fP
.IP
\fBfilter\fP \(em List of patterns ta apply ta devices found by a scan.
Patterns is regular expressions delimited by any characta n' preceded
by \fBa\fP (for accept) or \fBr\fP (for reject).  Da list is traversed
in order, n' tha straight-up original gangsta regex dat matches determines if tha device
will be accepted or rejected (ignored).  Devices dat don't match
any patterns is accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If you wanna reject patterns that
don't match, end tha list wit "r/.*/".
If there be nuff muthafuckin names fo' tha same thang (e.g. symbolic links
in /dev), if tha straight-up original gangsta matchin pattern up in tha list fo' any of tha names be an
\fBa\fP pattern, tha thang be accepted; otherwise if tha straight-up original gangsta matching
pattern up in tha list fo' any of tha names be a \fBr\fP pattern it is rejected;
otherwise it be accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  As a example, ta ignore /dev/cdrom you could use:
.br
\fBdevices { filter=["r|cdrom|"] }\fP
.IP
\fBglobal_filter\fP \(em Since "filter" might git overridden from tha command line, it
is not suitable fo' system-wide thang filterin (udev rules, lvmetad). To hide
devices from LVM-specific udev processin and/or from lvmetad, you need ta set
global_filter n' shit. Da syntax is tha same ol' dirty as fo' aiiight "filter" above. Devices that
fail tha global_filta is not even opened by LVM.
.IP
\fBcache_dir\fP \(em Persistent filta cache file directory.
Defaults ta "/etc/lvm/cache".
.IP
\fBwrite_cache_state\fP \(em Set ta 0 ta disable tha freestylin outta the
persistent filta cache file when \fBlvm\fP exits.
Defaults ta 1.
.IP
\fBtypes\fP \(em List of pairz of additionizzle aaight block thang types
found up in /proc/devices together wit maximum (non-zero) number of
partitions (normally 16).  By default, LVM2 supports ide, sd, md, loop,
dasd, dac960, nbd, ida, cciss, ubd, ataraid, drbd, power2, i2o_block
and iseries/vd. Y'all KNOW dat shit, muthafucka!  Block devices wit major
numberz of different types is ignored by LVM2.
Example: \fBtypes = ["fd", 16]\fP.
To create physical volumes on device-mapper volumes
created outside LVM2, like encrypted ones from \fBcryptsetup\fP,
yo dirty ass is gonna need \fBtypes = ["device-mapper", 16]\fP.  But if you do this,
be careful ta avoid recursion within LVM2.  Da figure fo' number
of partitions aint currently used up in LVM2 - n' might never be.
.IP
\fBsysfs_scan\fP \(em If set ta 1 n' yo' kernel supports sysfs and
it is mounted, sysfs is ghon be used as a quick way of filterin out
block devices dat is not present.
.IP
\fBmd_component_detection\fP \(em If set ta 1, LVM2 will ignore devices
used as componentz of software RAID (md) devices by lookin fo' md
superblocks. This don't always work satisfactorily e.g. if a thugged-out device
has been reused without wipin tha md superblocks first.
.IP
\fBmd_chunk_alignment\fP \(em If set ta 1, n' a Physical Volume is placed
directly upon a md device, LVM2 will align its data blocks wit the
md devicez stripe-width.
.IP
\fBdata_alignment_detection\fP \(em If set ta 1, n' yo' kernel provides
topologizzle shiznit up in sysfs fo' tha Physical Volume, tha start of data
area is ghon be aligned on a multiple of tha ’minimum_io_size’ or
’optimal_io_size’ exposed up in sysfs.  minimum_io_size is tha smallest
request tha thang can big-ass up without incurrin a read-modify-write
penalty (e.g. MDz chunk size).  optimal_io_size is tha device's
preferred unit of receivin I/O (e.g. MDz stripe width).  minimum_io_size
is used if optimal_io_size is undefined (0).  If both \fBmd_chunk_alignment\fP
and \fBdata_alignment_detection\fP is enabled tha result of
\fBdata_alignment_detection\fP is used.
.IP
\fBdata_alignment\fP \(em Default alignment (in KB) of start of data area
when bustin a freshly smoked up Physical Volume rockin tha \fBlvm2\fP format.
If a Physical Volume is placed directly upon a md thang and
\fBmd_chunk_alignment\fP or \fBdata_alignment_detection\fP is enabled
this parameta is ignored. Y'all KNOW dat shit, muthafucka!  Set ta 0 ta use tha default alignment of
64KB or tha page size, if larger.
.IP
\fBdata_alignment_offset_detection\fP \(em If set ta 1, n' yo' kernel
provides topologizzle shiznit up in sysfs fo' tha Physical Volume, the
start of tha aligned data area of tha Physical Volume is ghon be shifted
by tha alignment_offset exposed up in sysfs.
.sp
To peep tha location of tha straight-up original gangsta Physical Extent of a existin Physical Volume
use \fBpvs -o +pe_start\fP .  It is ghon be a multiple of tha requested
\fBdata_alignment\fP plus tha alignment_offset from
\fBdata_alignment_offset_detection\fP (if enabled) or tha pvcreate
commandline.
.IP
\fBdisable_after_error_count\fP \(em Durin each LVM operation errors received
from each thang is counted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If tha counta of a particular thang exceeds
the limit set here, no further I/O is busted ta dat thang fo' tha remainder of
the respectizzle operation. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Settin tha parameta ta 0 disablez tha counters
altogether.
.IP
\fBpv_min_size\fP \(em
Minimal size (in KB) of tha block thang which can be used as a PV.
In clustered environment all nodes gotta use tha same value.
Any value smalla than 512KB is ignored. Y'all KNOW dat shit, muthafucka!  Up ta n' include version 2.02.84
the default was 512KB.  From 2.02.85 onwardz dat shiznit was chizzled ta 2MB to
avoid floppy drives by default.
.IP
\fBissue_discards\fP \(em
Issue discardz ta a logical volumess underlyin physical volume(s) when the
logical volume is no longer rockin tha physical volumes' space (e.g. lvremove,
lvreduce, etc).  Discardz inform tha storage dat a region is no longer up in use.
Storage dat supports discardz advertise tha protocol specific way discards
should be issued by tha kernel (TRIM, UNMAP, or WRITE SAME wit UNMAP bit set).
Not all storage will support or benefit from discardz but SSDs n' thinly
provisioned LUNs generally do.  If set ta 1, discardz will only be issued if
both tha storage n' kernel provide support.
.IP
.TP
\fBallocation\fP \(em Space allocation policies
.IP
\fBcling_tag_list\fP \(em List of PV tags matched by tha \fBcling\fP allocation policy.
.IP
When searchin fo' free space ta extend a LV, tha \fBcling\fP
allocation policy will chizzle space on tha same PVs as tha last
segment of tha existin LV.  If there is insufficient space n' a
list of tags is defined here, it will check whether any of dem are
attached ta tha PVs concerned n' then seek ta match dem PV tags
between existin extents n' freshly smoked up extents.
.IP
Da @ prefix fo' tags is required.
Use tha special tag "@*" as a wildcard ta match any PV tag n' so use
all PV tags fo' dis purpose.
.IP
For example, LVs is mirrored between two cribs within a single VG.
PVs is tagged wit either @site1 or @site2 ta indicate where
they is situated n' these two PV tags is selected fo' use wit this
allocation policy:
.IP
cling_tag_list = [ "@site1", "@site2" ]
.TP
\fBlog\fP \(em Default log settings
.IP
\fBfile\fP \(em Location of log file.  If dis entry aint present, no
log file is written.
.IP
\fBoverwrite\fP \(em Set ta 1 ta overwrite tha log file each time a tool
is invoked. Y'all KNOW dat shit, muthafucka!  By default tools append lyrics ta tha log file.
.IP
\fBlevel\fP \(em Log level (0-9) of lyrics ta write ta tha file.
9 is da most thugged-out verbose; 0 should produce no output.
.IP
\fBverbose\fP \(em Default level (0-3) of lyrics busted ta stdout or stderr.
3 is da most thugged-out verbose; 0 should produce tha least output.
.IP
\fBsilent\fP \(em Set ta 1 ta suppress all non-essential tool output.
When set, display n' reportin tools will still write tha requested
device propertizzles ta standard output yo, but lyrics confirmin that
suttin' was or wasn't chizzled is ghon be reduced ta tha 'verbose' level
and not step tha fuck up unless -v is supplied.
.IP
\fBsyslog\fP \(em Set ta 1 (the default) ta bust log lyrics all up in syslog.
Turn off by settin ta 0.  If you set ta a integer pimped outa than one,
this is used - unvalidated - as tha facility.  Da default is LOG_USER.
See /usr/include/sys/syslog.h fo' safe facilitizzle joints ta use.
For example, LOG_LOCAL0 might be 128.
.IP
\fBindent\fP \(em When set ta 1 (the default) lyrics is indented
accordin ta they severity, two spaces per level.
Set ta 0 ta turn off indentation.
.IP
\fBcommand_names\fP \(em When set ta 1, tha command name is used as a
prefix fo' each message.
Default is 0 (off).
.IP
\fBprefix\fP \(em Prefix used fo' all lyrics (afta tha command name).
Default is two spaces.
.IP
\fBactivation\fP \(em Set ta 1 ta log lyrics while
devices is suspended durin activation.
Only set dis temporarily while debuggin a problem cuz
in low memory thangs dis settin can cause yo' machine ta lock up.
.TP
\fBbackup\fP \(em Configuration fo' metadata backups.
.IP
\fBarchive_dir\fP \(em Directory used fo' automatic metadata archives.
Backup copiez of forma metadata fo' each volume crew is archived here.
Defaults ta "/etc/lvm/archive".
.IP
\fBbackup_dir\fP \(em Directory used fo' automatic metadata backups.
A single backup copy of tha current metadata fo' each volume group
is stored here.
Defaults ta "/etc/lvm/backup".
.IP
\fBarchive\fP \(em Whether or not tools automatically archive existing
metadata tha fuck into \fBarchive_dir\fP before makin chizzlez ta dat shit.
Default is 1 (automatic archives enabled).
Set ta 0 ta disable.
Disablin dis might make metadata recovery hard as fuck or impossible
if suttin' goes wrong.
.IP
\fBbackup\fP \(em Whether or not tools cook up a automatic backup
into \fBbackup_dir\fP afta changin metadata.
Default is 1 (automatic backups enabled).  Set ta 0 ta disable.
Disablin dis might make metadata recovery hard as fuck or impossible
if suttin' goes wrong.
.IP
\fBretain_min\fP \(em Minimum number of archives ta keep.
Defaults ta 10.
.IP
\fBretain_days\fP \(em Minimum number of minutes ta keep archive files.
Defaults ta 30.
.TP
\fBshell\fP \(em LVM2 built-in readline shell settings
.IP
\fBhistory_size\fP \(em Maximum number of linez of shell history ta retain (default 100) up in $HOME/.lvm_history
.TP
\fBglobal\fP \(em Global settings
.IP
\fBtest\fP \(em If set ta 1, run tools up in test mode i.e. no chizzlez to
the on-disk metadata will git made.  It aint nuthin but equivalent ta havin the
-t option on every last muthafuckin command.
.IP
\fBactivation\fP \(em Set ta 0 ta turn off all communication with
the device-mapper driver n' shit.  Useful if you wanna manipulate logical
volumes while device-mapper aint present up in yo' kernel.
.IP
\fBproc\fP \(em Mount point of proc filesystem.
Defaults ta /proc.
.IP
\fBumask\fP \(em File creation mask fo' any filez n' directories pimped.
Interpreted as octal if tha straight-up original gangsta digit is zero.
Defaults ta 077.
Use 022 ta allow other playas ta read tha filez by default.
.IP
\fBformat\fP \(em Da default value of \fB--metadatatype\fP used
to determine which format of metadata ta use when bustin new
physical volumes n' volume groups. \fBlvm1\fP or \fBlvm2\fP.
.IP
\fBfallback_to_lvm1\fP \(em Set dis ta 1 if you need to
be able ta switch between 2.4 kernels rockin LVM1 n' kernels
includin device-mapper.
Da LVM2 tools should be installed as aiiight and
the LVM1 tools should be installed wit a .lvm1 suffix e.g.
vgscan.lvm1.
If a LVM2 tool is then run but unable ta communicate
with device-mapper, it will automatically invoke tha equivalent LVM1
version of tha tool.  Note dat fo' LVM1 tools to
manipulate physical volumes n' volume crews pimped by LVM2 you
must use \fB--metadataformat lvm1\fP when bustin em.
.IP
\fBlibrary_dir\fP \(em A directory searched fo' LVM2z shared libraries
ahead of tha places \fBdlopen\fP (3) searches.
.IP
\fBformat_libraries\fP \(em A list of shared libraries ta load dat contain
code ta process different formatz of metadata. For example, liblvm2formatpool.so
is needed ta read GFS pool metadata if LVM2 was configured \fB--with-pool=shared\fP.
.IP
\fBlocking_type\fP \(em What type of lockin ta use.
1 is tha default, which use flocks on filez up in \fBlocking_dir\fP
(see below) to
avoid conflictin LVM2 commandz hustlin concurrently on a single
machine. 0 disablez lockin n' risks corruptin yo' metadata.
If set ta 2, tha tools will load tha external \fBlocking_library\fP
(see below).
If tha tools was configured \fB--with-cluster=internal\fP
(the default) then 3 means ta use built-in cluster-wide locking.
Type 4 enforces read-only metadata n' forbidz any operations that
might wanna modify Volume Group metadata.
All chizzlez ta logical volumes n' they states is communicated
usin locks.
.IP
\fBwait_for_locks\fP \(em When set ta 1, tha default, tha tools
wait if a lock request cannot be satisfied immediately.
When set ta 0, tha operation be aborted instead.
.IP
\fBlocking_dir\fP \(em Da directory LVM2 places its file locks
if \fBlocking_type\fP is set ta 1.  Da default is \fB/var/lock/lvm\fP.
.IP
\fBlocking_library\fP \(em Da name of tha external locking
library ta load if \fBlocking_type\fP is set ta 2.
Da default is \fBliblvm2clusterlock.so\fP.  If you need ta write
such a library, peep tha lib/lockin source code directory.
.IP
\fBuse_lvmetad\fP \(em Whether ta use (trust) a hustlin instizzle of lvmetad. Y'all KNOW dat shit, muthafucka! If
this is set ta 0, all commandz fall back ta tha usual scannin mechanisms. When
set ta 1 \fBand\fP when lvmetad is hustlin (it aint auto-started), tha volume
group metadata n' PV state flags is obtained from tha lvmetad instizzle n' no
scannin is done by tha individual commands. In a setup wit lvmetad, lvmetad
udev rulez \fBmust\fP be set up fo' LVM ta work erectly. Without proper udev
rules, all chizzlez up in block thang configuration is ghon be \fBignored\fP until a
manual 'pvscan --cache' is performed.
.br
If lvmetad has been hustlin while use_lvmetad was 0, it \fBMUST\fP be stopped before
changin use_lvmetad ta 1 n' started again n' again n' again afterwards.
.TP
\fBtags\fP \(em Host tag settings
.IP
\fBhosttags\fP \(em If set ta 1, create a host tag wit tha machine name.
Settin dis ta 0 do nothing, neither bustin nor beatin tha livin shiznit outta any tag.
Da machine name used is tha nodename as returned by \fBuname\fP (2).
.IP
Additionizzle host tags ta be set can be listed here as subsections.
Da @ prefix fo' tags is optional.
Each of these host tag subsections can contain a \fBhost_list\fP
array of host names. If any one of these entries matches tha machine
name exactly then tha host tag gets defined on dis particular host,
otherwise it don't.
.IP
Afta lvm.conf has been processed, LVM2 works all up in each host
tag dat has been defined up in turn, n' if there be a cold-ass lil configuration
file called lvm_\fB<host_tag>\fP.conf it attempts ta load dat shit.
Da activation/volume_list, devices/filta n' devices/types settings is merged
(these all is lists), otherwise any settings read up in override settings found in
earlier filez fo' realz. Any additionizzle host tags defined git appended ta tha search list,
so up in turn they can lead ta further configuration filez bein processed.
Use \fBlvm dumpconfig\fP ta check tha result of config
file processing.
.IP
Da followin example always sets host tags \fBtag1\fP and
sets \fBtag2\fP on machines fs1 n' fs2:
.IP
tags { tag1 { } tag2 { host_list = [ "fs1", "fs2" ] } }
.IP
These options is useful if yo ass is replicatin configuration files
around a cold-ass lil clusta n' shit.  Use of \fBhosttags = 1\fP means every last muthafuckin machine
can have static n' identical local configuration filez yet use
different settings n' activate different logical volumes by
default.  See also \fBvolume_list\fP below n' \fB--addtag\fP
in \fBlvm\fP (8).
.TP
\fBactivation\fP \(em Settings affectin device-mapper activation
.IP
\fBmissing_stripe_filler\fP \(em When activatin a incomplete logical
volume up in partial mode, dis option dictates how tha fuck tha missin data is
replaced. Y'all KNOW dat shit, muthafucka!  A value of "error" will cause activation ta create error
mappings fo' tha missin data, meanin dat read access ta missing
portionz of tha volume will result up in I/O errors. Yo ass can instead also
use a thang path, n' up in dat case dis thang is ghon be used up in place of
missin stripes. But fuck dat shiznit yo, tha word on tha street is dat note dat rockin anythang other than
"error" wit mirrored or snapshotted volumes is likely ta result up in data
corruption. I aint talkin' bout chicken n' gravy biatch.  For instructions on how tha fuck ta create a thang dat always
returns zeros, peep \fBlvcreate\fP (8).
.IP
\fBmirror_region_size\fP \(em Unit size up in KB fo' copy operations
when mirroring.
.IP
\fBreadahead\fP \(em Used when there is no readahead value stored
in tha volume crew metadata.  Set ta \fBnone\fP ta disable
readahead up in these circumstances or \fBauto\fP ta use tha default
value chosen by tha kernel.
.IP
\fBreserved_memory\fP, \fBreserved_stack\fP \(em How tha fuck nuff KB ta reserve
for LVM2 ta use while logical volumes is suspended. Y'all KNOW dat shit, muthafucka!  If insufficient
memory is reserved before suspension, there be a risk of machine deadlock.
.IP
\fBprocess_priority\fP \(em Da sick value ta use while devices are
suspended. Y'all KNOW dat shit, muthafucka!  This is set ta a high prioritizzle so dat logical volumes
are suspended (with I/O generated by other processes ta them
logical volumes gettin queued) fo' tha shortest possible time.
.IP
\fBvolume_list\fP \(em This acts as a gangbangin' filta all up in which
all requests ta activate a logical volume on dis machine
are passed. Y'all KNOW dat shit, muthafucka!  A logical volume is only activated if it matches
an item up in tha list.  Tags must be preceded by @ n' is checked
against all tags defined up in tha logical volume n' volume group
metadata fo' a match.
@* is short-hand ta check every last muthafuckin tag set on tha host machine (see
\fBtags\fP above).
Logical volume n' volume crews can also be included up in tha list
by name e.g. vg00, vg00/lvol1.
If dis settin aint present but at least one host tag is defined
then a thugged-out default single-entry list containin @* be assumed.
.IP
\fBauto_activation_volume_list\fP \(em This acts as a gangbangin' filta through
which all requests ta autoactivate a logical volume on dis machine
are passed. Y'all KNOW dat shit, muthafucka! A logical volume be autoactivated if it matches
an item up in tha list. Volumes must also pass tha \fBvolume_list\fP
filter, if present. Tags must be preceded by @ n' is checked against
all tags defined up in tha logical volume n' volume crew metadata for
a match. @* is short-hand ta check every last muthafuckin tag set on tha host machine
(see \fBtags\fP above).
Logical volume n' volume crews can also be included up in tha list
by name e.g. vg00, vg00/lvol1.
.IP
\fBread_only_volume_list\fP \(em This acts as a gangbangin' filta through
which all requests ta activate a logical volume on dis machine
are passed. Y'all KNOW dat shit, muthafucka!  A logical volume be activated up in read-only mode (instead
of read-write) if it matches a item up in tha list.  Volumes must first
pass tha \fBvolume_list\fP filter, if present.  Tags must be preceded
by @ n' is checked against all tags defined up in tha logical volume
and volume crew metadata fo' a match.
@* is short-hand ta check every last muthafuckin tag set on tha host machine (see
\fBtags\fP above).
Logical volume n' volume crews can also be included up in tha list
by name e.g. vg00, vg00/lvol1.
.TP
\fBmetadata\fP \(em Advanced metadata settings
.IP
\fBpvmetadatacopies\fP \(em When bustin a physical volume rockin the
LVM2 metadata format, dis is tha default number of copiez of metadata
to store on each physical volume.
Currently it can be set ta 0, 1 or 2.  Da default is 1.
If set ta 2, one copy is placed all up in tha beginnin of tha disk
and tha other is placed all up in tha end.
It can be overridden on tha command line wit \fB--pvmetadatacopies\fP
(see \fBpvcreate\fP).
If bustin a volume crew wit just one physical volume, itz a
phat scam ta have 2 copies. Put ya muthafuckin choppers up if ya feel dis!  If bustin a big-ass volume crew with
many physical volumes, you may decizzle dat 3 copiez of tha metadata
is sufficient, i.e. settin it ta 1 on three of tha physical volumes,
and 0 on tha rest.  Every volume crew must contain at least one
physical volume wit at least 1 copy of tha metadata (unless using
the text filez busted lyrics bout below).  Da disadvantage of havin lots
of copies is dat every last muthafuckin time tha tools access tha volume group, every
copy of tha metadata has ta be accessed, n' dis slows down the
tools.
.IP
\fBpvmetadatasize\fP \(em Approximate number of sectors ta set aside
for each copy of tha metadata. Volume crews wit big-ass numbers of
physical or logical volumes, or volumes crews containin complex
logical volume structures will need additionizzle space fo' they metadata.
Da metadata areas is treated as circular buffers, so
unused space becomes filled wit a archive of da most thugged-out recent
previous versionz of tha metadata.
.IP
\fBpvmetadataignore\fP When bustin a physical volume rockin tha LVM2
metadata format, dis states whether metadata areas should be ignored.
Da default is "n".  If metadata areas on a physical volume is ignored,
LVM aint gonna not store metadata up in tha metadata areas present on newly
created Physical Volumes.  Da option can be overridden on tha command
line wit \fB--metadataignore\fP (See \fBpvcreate\fP n' \fBpvchange\fP).
Metadata areas cannot be pimped or extended afta Logical Volumes have
been allocated on tha device.
If you do not wanna store metadata on dis device, it is still wise
always ta allocate a metadata area (use a non-zero value for
\fB--pvmetadatacopies\fP) up in case you need it up in tha future n' ta use
this option ta instruct LVM2 ta ignore dat shit.
.IP
\fBvgmetadatacopies\fP \(em When bustin a volume crew rockin the
LVM2 metadata format, dis is tha default number of copiez of metadata
desired across all tha physical volumes up in tha volume group.  If set to
a non-zero value, LVM will automatically set or clear tha metadataignore
flag on tha physical volumes (see \fBpvcreate\fP n' \fBpvchange\fP
\fB--metadataignore\fP) up in order ta big up tha desired number of metadata
copies. Put ya muthafuckin choppers up if ya feel dis!  An LVM command dat addz or removes physical volumes (for example,
\fBvgextend\fP, \fBvgreduce\fP, \fBvgsplit\fP, or \fBvgmerge\fP), may cause
LVM ta automatically set or clear tha metadataignore flags.  Also, if
physical volumes go missin or reappear, or a freshly smoked up number of copies is
explicitly set (see \fBvgchange --vgmetadatacopies\fP), LVM may adjust
the metadataignore flags.
Set \fBvgmetadatacopies\fP ta 0 instructs LVM not ta set or clear the
metadataignore flags automatically.  Yo ass may set a value larger than the
sum of all metadata areas on all physical volumes.  Da value can
be overridden on tha command line wit \fB--vgmetadatacopies\fP fo' various
commandz (for example, \fBvgcreate\fP n' \fBvgchange\fP), n' can be
queryied wit tha \fBvg_mda_copies\fP field of \fBvgs\fP.  This option
is useful fo' volume crews containin big-ass numberz of physical volumes
with metadata as it may be used ta minimize metadata read n' write overhead.
.IP
\fBdirs\fP \(em List of directories holdin live copiez of LVM2
metadata as text files.  These directories must not be on logical
volumes.  It be possible ta use LVM2 wit a cold-ass lil couple directories
here, preferably on different (non-logical-volume) filesystems
and wit no other on-disk metadata, \fBpvmetadatacopies = 0\fP.
Alternatively these directories can be up in addizzle ta the
on-disk metadata areas.  This feature was pimped durin the
development of tha LVM2 metadata before tha freshly smoked up on-disk metadata
areas was designed n' no longer gets tested.
It aint supported under low-memory conditions, n' it is
important never ta edit these metadata filez unless you fully
understand how tha fuck thangs work: ta make chizzlez you should always use
the tools as normal, or else vgcfgbackup, edit backup, vgcfgrestore.
.SH FILES
.I /etc/lvm/lvm.conf
.br
.I /etc/lvm/archive
.br
.I /etc/lvm/backup
.br
.I /etc/lvm/cache/.cache
.br
.I /run/lock/lvm
.SH SEE ALSO
.BR lvm (8),
.BR umask (2),
.BR uname (2),
.BR dlopen (3),
.BR syslog (3),
.BR syslog.conf (5)
