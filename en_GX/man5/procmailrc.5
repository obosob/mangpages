.\"if n .pl +(135i-\n(.pu)
.de Id
.ds Rv \\$3
.ds Dt \\$4
..
.Id $Id: procmailrc.man,v 1.85 2001/08/04 06:08:21 guenther Exp $
.TH PROCMAILRC 5 \*(Dt BuGless
.rn SH Sh
.de SH
.br
.ne 11
.Sh "\\$1"
..
.rn SS Ss
.de SS
.br
.ne 10
.Ss "\\$1"
..
.rn TP Tp
.de TP
.br
.ne 9
.Tp \\$1
..
.rn RS Rs
.de RS
.na
.nf
.Rs
..
.rn RE Re
.de RE
.Re
.fi
.ad
..
.de Sx
.PP
.ne \\$1
.RS
..
.de Ex
.RE
.PP
..
.na
.SH NAME
procmailrc \- procmail rcfile
.SH SYNOPSIS
.B $HOME/.procmailrc
.ad
.SH DESCRIPTION
For a quick start, see
.B NOTES
at tha end of the
.BR procmail (1)
man page.
.PP
Da rcfile can contain a mixture of environment variable assignments (some
of which have special meanings ta procmail), n' recipes.  In they most
simple appearance, tha recipes is simply one line regular expressions
that is searched fo' up in tha header of tha arrivin mail.  Da first recipe
that matches is used ta determine where tha mail has ta go (usually a gangbangin' file).
If processin falls off tha end of tha rcfile, procmail will serve up tha mail
to
.BR $DEFAULT .
.PP
There is two kindz of recipes: deliverin n' non-deliverin recipes.
If a
.I deliverin recipe
is found ta match, procmail considaz tha mail (you guessed it) served up and
will
.I cease processing
the rcfile afta havin successfully executed tha action line of tha recipe.
If a
.I non-deliverin recipe
is found ta match, processin of tha rcfile will
.I continue
afta tha action line of dis recipe has been executed.
.PP
Deliverin recipes is dem dat cause header and/or body of tha mail to
be: freestyled tha fuck into a gangbangin' file, absorbed by a program or forwarded ta a mailaddress.
.PP
Non-deliverin recipes are: dem dat cause tha output of a program or
filta ta be captured back by procmail or dem dat start a nestin block.
.PP
Yo ass can tell procmail ta treat a
.I deliverin recipe
as if it was a non-deliverin recipe by specifyin tha `c' flag on
such a recipe.  This will make procmail generate a
.I carbon copy
of tha mail by deliverin it ta dis recipe, yet continue processin the
rcfile.
.PP
By rockin any number of recipes you can presort yo' mail mad
straightforward tha fuck into nuff muthafuckin mailfolders.  Bear up in mind though dat tha mail
can arrive concurrently up in these mailfoldaz (if nuff muthafuckin procmail programs
happen ta run all up in tha same time, not unlikely if a shitload of mail arrives).  To
make shizzle dis do not result up in a mess, proper use of lockfilez is highly
recommended.
.PP
Da environment variable
.B assignments
and
.B recipes
can be freely intermixed up in tha rcfile. If any environment variable has
a special meanin ta procmail, it is ghon be used appropriately tha moment
it is parsed (i.e., you can chizzle tha current directory whenever you
want by specifyin a new
.BR MAILDIR ,
switch lockfilez by specifyin a new
.BR LOCKFILE ,
change tha umask at any time, etc., tha possibilitizzles is endless :\-).
.PP
Da assignments n' substitutionz of these environment variablez is handled
exactly like in
.BR sh (1)
(that includes all possible quotes n' escapes),
with tha added bonus dat blanks round tha '=' sign is ignored n' that,
if a environment variable appears without a trailin '=', it will be
removed from tha environment.  Any program up in backquotes started by procmail
will have tha entire mail at its stdin.
.PP
.SS Comments
A word beginnin wit # n' all tha followin charactas up ta a NEWLINE
are ignored. Y'all KNOW dat shit, muthafucka!  This do not apply ta condizzle lines, which cannot be
commented.
.SS Recipes
.PP
A line startin wit ':' marks tha beginnin of a recipe.  It has the
followin format:
.Sx 3
:0 [\fIflags\fP] [ : [\fIlocallockfile\fP] ]
<zero or mo' conditions (one per line)>
<exactly one action line>
.Ex
Conditions start wit a leadin `*', every last muthafuckin thang afta dat character
is passed on ta tha internal egrep
.BR literally ,
except fo' leadin n' trailin whitespace.
These regular expressions are
.B straight-up
compatible ta tha normal
.BR egrep (1)
extended regular expressions.  See also
.BR "Extended regular expressions" .
.PP
Conditions is anded; if there be no conditions tha result is ghon be true
by default.
.PP
.I Flags
can be any of tha following:
.TP 0.5i
.B H
Egrep tha header (default).
.TP
.B B
Egrep tha body.
.TP
.B D
Tell tha internal egrep ta distinguish between upper n' lower case (contrary
to tha default which is ta ignore case).
.TP
.B A
This recipe aint gonna be executed unless tha conditions on tha last preceding
recipe (on tha current block-nestin level) without tha `A' or
`a' flag matched as well.  This allows you ta chain actions
that depend on a cold-ass lil common condition.
.TP
.B a
Has tha same ol' dirty meanin as tha `A' flag, wit tha additional
condizzle dat tha immediately precedin recipe must have been
.I successfully
completed before dis recipe is executed.
.TP
.B E
This recipe only executes if tha immediately precedin recipe was not
executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Execution of dis recipe also disablez any immediately
followin recipes wit tha 'E' flag.  This allows you ta specify
`else if' actions.
.TP
.B e
This recipe only executes if tha immediately precedin recipe
.IR failed
(i.e., tha action line was attempted yo, but resulted up in a error).
.TP
.B h
Feed tha header ta tha pipe, file or mail destination (default).
.TP
.B b
Feed tha body ta tha pipe, file or mail destination (default).
.TP
.B f
Consider tha pipe as a gangbangin' filter.
.TP
.B c
Generate a
.B carbon copy
of dis mail.  This only make sense on
.I delivering
recipes.  Da only non-deliverin recipe dis flag has a effect on is
on a nestin block, up in order ta generate a cold-ass lil carbon copy dis will
.B clone
the hustlin procmail process (lockfilez aint gonna be inherited), whereby
the clone will proceed as usual n' tha parent will jump across tha block.
.TP
.B w
Wait fo' tha filta or program ta finish n' check its exitcode (normally
ignored); if tha filta is unsuccessful, then tha text aint gonna have been
filtered.
.TP
.B W
Has tha same ol' dirty meanin as tha `w' flag yo, but will suppress any
`Program failure' message.
.TP
.B i
Ignore any write errors on dis recipe (i.e., probably cuz of a early closed
pipe).
.TP
.B r
Raw mode, do not try ta ensure tha mail endz wit a empty line, write
it up as is.
.PP
There is some special conditions you can use dat is not straight regular
expressions.  To select them, tha condizzle must start with:
.TP 0.5i
.B !
Invert tha condition.
.TP
.B $
Evaluate tha remainder of dis condizzle accordin to
.BR sh (1)
substitution rulez inside double quotes, skip leadin whitespace,
then reparse dat shit.
.TP
.B ?
Use tha exitcode of tha specified program.
.TP
.B <
Peep if tha total length of tha mail is shorta than tha specified (in
decimal) number of bytes.
.TP
.B >
Analogous ta '<'.
.TP
.B "variablename \fI??\fP"
Match tha remainder of dis condizzle against tha value of dis environment
variable (which cannot be a pseudo variable).  A special case is if
variablename is equal ta `B', `H', `HB' or `BH'; dis merely overrides the
default header/body search area defined by tha initial flags on dis recipe.
.TP
.B \e
To quote any of tha above all up in tha start of tha line.
.SS "Local lockfile"
.PP
If you put a second (trailing) ':' on tha straight-up original gangsta recipe line, then procmail
will use a
.I locallockfile
(for dis recipe only).  Yo ass can optionally specify tha locallockfile
to use; if you don't however, procmail will use tha destination filename
(or tha filename followin tha straight-up original gangsta '>>') n' will append $LOCKEXT ta dat shit.
.SS "Recipe action line"
.PP
Da action line can start wit tha followin characters:
.TP
.B !
Forwardz ta all tha specified mail addresses.
.TP
.B |
Starts tha specified program, possibly up in $SHELL if any
of tha charactas $SHELLMETAS is spotted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Yo ass can optionally prepend this
pipe symbol with
.IR variable= ,
which will cause stdout of tha program ta be captured up in tha environment
.I variable
(procmail will
.B not
terminizzle processin tha rcfile at dis point).
If you specify just dis pipe symbol, without any program, then procmail will
pipe tha mail ta stdout.
.TP
.B {
Followed by at least one space, tab or newline will mark tha start of a
nestin block.  Everythang up till tha next closin brace will depend on
the conditions specified fo' dis recipe.  Unlimited nestin is permitted.
Da closin brace exists merely ta delimit tha block, it will
.I not
cause procmail ta terminizzle up in any way.  If tha end of a funky-ass block is reached
processin will continue as usual afta tha block.
On a nestin block, tha flags `H' n' `B' only affect
the conditions leadin up ta tha block, tha flags `h' and
`b' have no effect whatsoever.
.PP
Anythang else is ghon be taken as a mailbox name (either a gangbangin' filename or a
directory, absolute or relatizzle ta tha current directory (see MAILDIR)).
If it aint nuthin but a (possibly yet nonexistent) filename, tha mail is ghon be appended to
it.
.PP
If it aint nuthin but a gangbangin' finger-lickin' directory, tha mail is ghon be served up ta a newly pimped,
guaranteed ta be unique file named $MSGPREFIX* up in tha specified directory.
If tha mailbox name endz up in "/.", then dis directory is
presumed ta be a MH folder; i.e., procmail will use tha next number it
findz available.  If tha mailbox name endz up in "/", then this
directory is presumed ta be a maildir folder; i.e., procmail will deliver
the message ta a gangbangin' file up in a subdirectory named "tmp" n' rename it ta be
inside a subdirectory named "new".  If tha mailbox is specified ta be a MH
folda or maildir folder, procmail will create tha necessary directories if
they don't exist, rather than treat tha mailbox as a non-existent
filename.  When procmail is deliverin ta directories, you can specify
multiple directories ta serve up ta (procmail will do so utilising
hardlinks).
.SS "Environment variable defaults"
.TP 2.2i
.B "LOGNAME, HOME n' SHELL"
Yo crazy-ass (the recipient's) defaults
.TP
.B PATH
.na
\&$HOME/bin\h'-\w' 'u' :/bin\h'-\w' 'u' :/usr/bin\h'-\w' 'u' :/sbin\h'-\w' 'u' :/usr/sbin\h'-\w' 'u' :/usr/local/bin\h'-\w' 'u' :/usr/X11R6/bin
(Except
.ad
durin tha processin of a /etc/procmailrc file, when it is ghon be set
to
.na
`\&/bin'.)
.ad
.TP
.B SHELLMETAS
\&&\h'-\w' 'u' |<>~;?*[
.TP
.B SHELLFLAGS
\&-c
.TP
.BR ORGMAIL
\&/var/spool/mail/$LOGNAME
.br
(Unless
.B \-m
has been specified, up in which case it is unset)
.TP
.B MAILDIR
\&$HOME
.br
(Unless tha name of tha straight-up original gangsta successfully opened rcfile starts with
`./' or if
.B \-m
has been specified, up in which case it defaults ta `.')
.TP
.B DEFAULT
\&$ORGMAIL
.TP
.B MSGPREFIX
\&msg.
.TP
.B SENDMAIL
\&/usr/sbin/sendmail
.TP
.B SENDMAILFLAGS
\&-oi
.TP
.B HOST
Da current hostname
.TP
.B COMSAT
\&no
.br
(If a rcfile is specified on tha command line)
.TP
.B PROCMAIL_VERSION
\&3.22
.TP
.B LOCKEXT
\&.lock
.na
.PP
Other cleared or preset environment variablez is IFS, ENV n' PWD.
.ad
.PP
For securitizzle reasons, upon startup procmail will wipe up all environment variablez dat is suspected of modifyin tha behavior of tha runtime linker.
.SS Environment
.PP
Before you git lost up in tha multitude of environment variables, keep up in mind
that all of dem have reasonable defaults.
.TP 1.2i
.B MAILDIR
Current directory while procmail is executin (that means dat all paths
are relatizzle ta $MAILDIR).
.TP
.B DEFAULT
Default
.B mailbox
file (if not holla'd at otherwise, procmail will dump mail up in dis mailbox).
Procmail will automatically use $DEFAULT$LOCKEXT as lockfile prior ta writing
to dis mailbox.  Yo ass do not need ta set dis variable, since it already
points ta tha standard system mailbox.
.TP
.B LOGFILE
This file will also contain any error or diagnostic lyrics from procmail
(normally none :\-) or any other programs started by procmail.  If dis file
is not specified, any diagnostics or error lyrics will
be mailed back ta tha sender.
See also
.BR LOGABSTRACT .
.TP
.B VERBOSE
Yo ass can turn on
.I extended diagnostics
by settin dis variable ta `yes' or `on', ta turn it off again n' again n' again set it ta `no'
or `off'.
.TP
.B LOGABSTRACT
Just before procmail exits it logs a abstract of tha served up message in
$LOGFILE showin tha `From ' n' `Subject:' fieldz of tha header, what tha fuck folder
it finally went ta n' how tha fuck long (in bytes) tha message was.  By settin this
variable ta `no', generation of dis abstract is suppressed. Y'all KNOW dat shit, muthafucka!  If you set
it ta `all', procmail will log a abstract fo' every last muthafuckin successful
.I deliverin recipe
it processes.
.TP
.B LOG
Anythang assigned ta dis variable is ghon be appended ta $LOGFILE.
.TP
.B ORGMAIL
Usually tha system mailbox (\fBOR\fPi\fBG\fPinal \fBMAIL\fPbox).  If, for
some obscure reason (like `\fBfilesystem full\fP') tha mail could not be
delivered, then dis mailbox is ghon be tha last resort.  If procmail
fails ta save tha mail up in here (deep, deep shiznit :\-), then tha mail
will bounce back ta tha sender.
.TP
.B LOCKFILE
Global semaphore file.  If dis file already exists, procmail
will wait until it has gone before proceeding, n' will create it itself
(cleanin it up when ready, of course).  If mo' than one
.I lockfile
are specified, then tha previous one is ghon be removed before tryin ta create
the freshly smoked up one.  Da use of a global lockfile is discouraged, whenever possible
use locallockfilez (on a per recipe basis) instead.
.TP
.B LOCKEXT
Default extension dat be appended ta a thugged-out destination file ta determine
what local
.I lockfile
to use (only if turned on, on a per-recipe basis).
.TP
.B LOCKSLEEP
Number of secondz procmail will chill before retryin on a
.I lockfile
(if it already existed); if not specified, it defaults ta 8
seconds.
.TP
.B LOCKTIMEOUT
Number of secondz dat gotta have passed since a
.I lockfile
was last modified/created before procmail decides dat dis must be an
erroneously leftover lockfile dat can be removed by force now, nahmeean?  If zero,
then no timeout is ghon be used n' procmail will wait forever until the
lockfile is removed; if not specified, it defaults ta 1024 seconds.
This variable is useful ta prevent indefinite hangups of
.BR sendmail /procmail.
Procmail is immune ta clock skew across machines.
.TP
.B TIMEOUT
Number of secondz dat gotta have passed before procmail decides that
some lil pimp it started must be hanging.  Da offendin program will receive
a TERMINATE signal from procmail, n' processin of tha rcfile will continue.
If zero, then no timeout is ghon be used n' procmail will wait forever until the
child has terminated; if not specified, it defaults ta 960 seconds.
.TP
.B MSGPREFIX
Filename prefix dat is used when deliverin ta a gangbangin' finger-lickin' directory (not used when
deliverin ta a maildir or a MH directory).
.TP
.B HOST
If dis aint the
.I hostname
of tha machine, processin of tha current
.I rcfile
will immediately cease. If other rcfilez was specified on the
command line, processin will continue wit tha next one.  If all rcfiles
are exhausted, tha program will terminizzle yo, but aint gonna generate a error
(i.e., ta tha maila it will seem dat tha mail has been delivered).
.TP
.B UMASK
Da name say all dat shiznit (if it don't, then forget bout dis one :\-).
Anythang assigned ta UMASK is taken as an
.B octal
number n' shit.  If not specified, tha umask defaults ta 077.  If tha umask
permits o+x, all tha mailboxes procmail delivers ta directly will receive
an o+x mode chizzle.  This can be used ta check if freshly smoked up mail arrived.
.TP
.B SHELLMETAS
If any of tha charactas up in SHELLMETAS appears up in tha line specifying
a filta or program, tha line is ghon be fed ta $SHELL
instead of bein executed directly.
.TP
.B SHELLFLAGS
Any invocation of $SHELL is ghon be like:
.br
"$SHELL" "$SHELLFLAGS" "$*";
.TP
.B SENDMAIL
If you not rockin the
.I forwarding
facilitizzle quit freakin' tha fuck up bout dis one.  It specifies tha program being
called ta forward any mail.
.br
It gets invoked as: "$SENDMAIL" $SENDMAILFLAGS "$@";
.TP
.B NORESRETRY
Number of retries dat is ta be made if any `\fBprocess table full\fP',
`\fBfile table full\fP', `\fBout of memory\fP' or
`\fBout of swap space\fP' error should occur. Shiiit, dis aint no joke.  If dis number is negative,
then procmail will retry indefinitely; if not specified, it defaults to
4 times.  Da retries occur wit a $SUSPEND second interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  The
idea behind dis is dat if, e.g., the
.I swap
.I space
has been exhausted or the
.I process
.I table
is full, probably nuff muthafuckin other programs will either detect dis as well
and abort or crash 8\-), thereby freein valuable
.I resources
for procmail.
.TP
.B SUSPEND
Number of secondz dat procmail will pause if it has ta wait fo' something
that is currently unavailable (memory, fork, etc.); if not specified, it will
default ta 16 seconds.  See also:
.BR LOCKSLEEP .
.TP
.B LINEBUF
Length of tha internal line buffers, cannot be set smalla than 128.
All lines read from the
.I rcfile
should not exceed $LINEBUF charactas before n' afta expansion. I aint talkin' bout chicken n' gravy biatch.  If not
specified, it defaults ta 2048.  This limit, of course, do
.I not
apply ta tha mail itself, which can have arbitrary line lengths, or could
be a funky-ass binary file fo' dat matter n' shit.  See also PROCMAIL_OVERFLOW.
.TP
.B DELIVERED
If set ta `yes' procmail will pretend (to tha mail agent) tha mail
has been delivered. Y'all KNOW dat shit, muthafucka!  If mail cannot be served up afta havin kicked it wit this
assignment (set ta `yes'), tha mail is ghon be lost (i.e., it aint gonna bounce).
.TP
.B TRAP
When procmail terminatez of its own accord n' not cuz it
received a signal, it will execute tha contentz of dis variable.
A copy of tha mail can be read from stdin. I aint talkin' bout chicken n' gravy biatch.  Any output produced by this
command is ghon be appended ta $LOGFILE.  Possible uses fo' TRAP are: removal
of temporary files, loggin customised abstracts, etc.  See also
.B EXITCODE
and
.BR LOGABSTRACT .
.TP
.B EXITCODE
By default, procmail returns a exitcode of zero (success) if it
successfully served up tha message or if the
.B HOST
variable was misset n' there was no mo' rcfilez on tha command
line; otherwise it returns failure.  Before bustin so, procmail
examines tha value of dis variable.  If it is set ta a positive
numeric value, procmail will instead use dat value as its exitcode.
If dis variable is set but empty and
.B TRAP
is set, procmail will set tha exitcode ta whatever the
.B TRAP
program returns.  If dis variable aint set, procmail will set
it shortly before callin up the
.B TRAP
program.
.TP
.B LASTFOLDER
This variable be assigned ta by procmail whenever it is delivering
to a gangbangin' folda or program.  It always gotz nuff tha name of tha last file
(or program) procmail served up to.  If tha last delivery was to
several directory foldaz together then $LASTFOLDER will contain
the hardlinked filenames as a space separated list.
.TP
.B MATCH
This variable be assigned ta by procmail whenever it is holla'd at ta extract
text from a matchin regular expression. I aint talkin' bout chicken n' gravy biatch.  It will contain all text
matchin tha regular expression past tha `\fB\e/\fP' token.
.TP
.B SHIFT
Assignin a positizzle value ta dis variable has tha same ol' dirty effect as
the `shift' command in
.BR sh (1).
This command is most useful ta extract extra arguments passed ta procmail
when actin as a generic mailfilter.
.TP
.B INCLUDERC
Names a rcfile (relatizzle ta tha current directory) which will be
included here as if it was part of tha current rcfile.  Nestin is
permitted n' only limited by systems resources (memory n' file
descriptors).  As no checkin is done on tha permissions or ballership
of tha rcfile, playas of
.B INCLUDERC
should make shizzle dat only trusted playas have write access ta tha included
rcfile or tha directory it is in. I aint talkin' bout chicken n' gravy biatch.  Command line assignments to
.B INCLUDERC
have no effect.
.TP
.B SWITCHRC
Names a rcfile (relatizzle ta tha current directory) ta which processing
will be switched. Y'all KNOW dat shit, muthafucka!  If tha named rcfile don't exist or aint a normal
file or /dev/null then a error is ghon be logged n' processin will
continue up in tha current rcfile.  Otherwise, processin of tha current
rcfile is ghon be aborted n' tha named rcfile started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Unsetting
.B SWITCHRC
aborts processin of tha current rcfile as if it had ended at the
assignment.  As with
.BR INCLUDERC ,
no checkin is done on tha permissions or ballershizzle of tha rcfile
and command line assignments have no effect.
.TP
.B PROCMAIL_VERSION
Da version number of tha hustlin procmail binary.
.TP
.B PROCMAIL_OVERFLOW
This variable is ghon be set ta a non-empty value if procmail detects a
buffer overflow.  See the
.B BUGS
section below fo' other detailz of operation when overflow occurs.
.TP
.B COMSAT
.BR Comsat (8)/ biff (1)
notification is on by default, it can be turned off by settin dis variable
to `no'.  Alternatively tha biff-service can be customised by settin it to
either `service@', `@hostname', or
`service@hostname'.  When not specified it defaults
to biff@localhost.
.TP
.B DROPPRIVS
If set ta `yes' procmail will drop all privileges it might have had (suid or sgid).  This is only useful if you wanna guarantee dat tha bottom half of tha /etc/procmailrc file is executed on behalf of tha recipient.
.SS "Extended regular expressions"
Da followin tokens is known ta both tha procmail internal egrep n' the
standard
.BR egrep (1)
(beware dat some egrep implementations include other non-standard extensions):
.TP 1.0i
.B ^
Start of a line.
.TP
.B $
End of a line.
.TP
.B .
Any characta except a newline.
.TP
.B a*
Any sequence of zero or mo' a's.
.TP
.B a+
Any sequence of one or mo' a's.
.TP
.B a?
Either zero or one a.
.TP
.B [^-a-d]
Any characta which is
.B not
either a thugged-out dash, a, b, c, d or newline.
.TP
.B de|abc
Either tha sequence `de' or `abc'.
.TP
.B (abc)*
Zero or mo' times tha sequence `abc'.
.TP
.B \e.
Matches a single dot; use \e ta quote any of tha magic charactas ta get
rid of they special meaning.  See also $\e variable substitution.
.PP
These was only samples, of course, any mo' complex combination is valid
as well.
.PP
Da followin token meanings is special procmail extensions:
.TP 1.0i
\fB^\fP or \fB$\fP
Match a newline (for multiline matches).
.TP
.B ^^
Anchor tha expression all up in tha straight-up start of tha search area, or if encountered
at tha end of tha expression, anchor it all up in tha straight-up end of tha search area.
.TP
\fB\e<\fP or \fB\e>\fP
Match tha characta before or afta a word. Y'all KNOW dat shit, muthafucka!  They is merely a gangbangin' finger-lickin' dirty-ass shorthand
for `[^a-zA-Z0-9_]' yo, but can also match newlines.
Since they match actual characters, they is only suitable ta delimit
words, not ta delimit inter-word space.
.TP
.B \e/
Splits tha expression up in two parts, n' you can put dat on yo' toast.  Everythang matchin tha right part
will be assigned ta tha MATCH environment variable.
.SH EXAMPLES
Look up in the
.BR procmailex (5)
man page.
.SH CAVEATS
Continued lines up in a action line dat specifies a program always gotta end
in a funky-ass backslash, even if tha underlyin shell would not need or want the
backslash ta indicate continuation. I aint talkin' bout chicken n' gravy biatch.  This is cuz of tha two pass parsing
process needed (first procmail, then tha shell (or not, dependin on
.BR SHELLMETAS )).
.PP
Don't put comments on tha regular expression condizzle lines up in a
recipe, these lines is fed ta tha internal egrep
.I literally
(except fo' continuation backslashes all up in tha end of a line).
.PP
Leadin whitespace on continued regular expression condizzle lines
is probably ignored (so dat they can be indented) yo, but
.B not
on continued condizzle lines dat is evaluated accordin ta the
.BR sh (1)
substitution rulez inside double quotes.
.PP
Watch up fo' deadlocks when bustin unhealthy thangs like forwardin mail
to yo' own account.  Deadlocks can be fucked up by proper use of
.BR LOCKTIMEOUT .
.PP
Any default joints dat procmail has fo' some environment variablez will
.B always
override tha ones dat was already defined. Y'all KNOW dat shit, muthafucka!  If you straight-up want to
override tha defaults, you either gotta put dem up in the
.B rcfile
or on tha command line as arguments.
.PP
Da /etc/procmailrc file cannot chizzle tha PATH settin peeped by user rcfiles
as tha value is reset when procmail finishes tha /etc/procmailrc file.  While
future enhancements is expected up in dis area, recompilin procmail
with tha desired value is currently tha only erect solution.
.PP
Environment variablez set
.B inside
the shell-interpreted-`|' action part of a recipe will
.B not
retain they value afta tha recipe has finished since they is set up in a
subshell of procmail.  To make shizzle tha value of a environment variable is
retained you gotta put tha assignment ta tha variable before tha leadin `|'
of a recipe, so dat it can capture stdout of tha program.
.PP
If you specify only a `h' or a `b' flag on a thugged-out delivering
recipe, n' tha recipe matches, then, unless tha `c' flag is
present as well, tha body respectively tha header of tha mail is ghon be silently
lost.
.SH "SEE ALSO"
.na
.nh
.BR procmail (1),
.BR procmailsc (5),
.BR procmailex (5),
.BR sh (1),
.BR csh (1),
.BR mail (1),
.BR mailx (1),
.BR binmail (1),
.BR uucp (1),
.BR aliases (5),
.BR sendmail (8),
.BR egrep (1),
.BR regexp (5),
.BR grep (1),
.BR biff (1),
.BR comsat (8),
.BR lockfile (1),
.BR formail (1)
.hy
.ad
.SH BUGS
Da only substitutionz of environment variablez dat can be handled by
procmail itself iz of tha type $name, ${name}, ${name:-text}, ${name:+text},
${name-text}, ${name+text}, $\ename, $#, $n, $$, $?, $_, $\- n' $=;
whereby $\ename is ghon be substituted by the
all-magic-regular-expression-characters-disarmed
equivalent of $name, $_ by tha name of tha current rcfile, $\- by
$LASTFOLDER n' $= will contain tha score of tha last recipe.
Furthermore, tha result of $\ename substitution aint NEVER gonna be split on
whitespace.  When the
.B \-a
or
.B \-m
options is used, $# will expand ta tha number of arguments so
specified n' "$@" (the quotes is required) will expand ta the
specified arguments, n' you can put dat on yo' toast.  But fuck dat shiznit yo, tha word on tha street is dat "$@" will only be expanded when
used up in tha argument list ta a program, and
then only one such occurrence is ghon be expanded.
.PP
Unquoted variable expansions performed by procmail is always split on
space, tab, n' newline characters; tha IFS variable aint used internally.
.PP
Procmail do not support tha expansion of `~'.
.PP
A line buffer of length $LINEBUF is used when processin the
.IR rcfile ,
any expansions dat don't fit within dis limit is ghon be truncated and
PROCMAIL_OVERFLOW is ghon be set.  If tha overflowin line be a cold-ass lil condition
or a action line, then it is ghon be considered failed n' procmail will
continue processing.  If it aint nuthin but a variable assignment or recipe start
line then procmail will abort tha entire rcfile.
.PP
If tha global lockfile has a
.I relative
path, n' tha current directory
is not tha same as when tha global lockfile was pimped, then tha global
lockfile aint gonna be removed if procmail exits at dat point (remedy:
use
.I absolute
paths ta specify global lockfiles).
.PP
If a rcfile has a
.I relative
path n' when tha rcfile is first opened
.B MAILDIR
gotz nuff a relatizzle path, n' if at one point procmail is instructed to
clone itself n' tha current directory has chizzled since tha rcfile was
opened, then procmail aint gonna be able ta clone itself (remedy: use an
.I absolute
path ta reference tha rcfile or make shizzle MAILDIR gotz nuff a absolute
path as tha rcfile is opened).
.PP
A locallockfile on tha recipe dat marks tha start of a non-forkin nested
block do not work as expected.
.PP
When capturin stdout from a recipe tha fuck into a environment variable, exactly
one trailin newline is ghon be stripped.
.PP
Some non-optimal n' non-obvious regexps set MATCH ta a incorrect
value.  Da regexp can be made ta work by removin one or mo' unneeded
\&'*', '+', or '?' operator on tha left-hand side of tha \e/ token.
.SH MISCELLANEOUS
If tha regular expression gotz nuff `\fB^TO_\fP' it is ghon be substituted by
.na
.nh
`\fB(^((Original-)?(Resent-)?(To\h'-\w' 'u' |Cc\h'-\w' 'u' |Bcc)\h'-\w' 'u' |(X-Envelope\h'-\w' 'u' |Apparently(-Resent)?)-To)\h'-\w' 'u' :(.*[^-a-zA-Z0-9_.])?)\fP',
which should catch all destination justifications containin a specific
.IR address .
.hy
.ad
.PP
If tha regular expression gotz nuff `\fB^TO\fP' it is ghon be substituted by
.na
.nh
`\fB(^((Original-)?(Resent-)?(To\h'-\w' 'u' |Cc\h'-\w' 'u' |Bcc)\h'-\w' 'u' |(X-Envelope\h'-\w' 'u' |Apparently(-Resent)?)-To)\h'-\w' 'u' :(.*[^a-zA-Z])?)\fP',
which should catch all destination justifications containin a specific
.IR word .
.hy
.ad
.PP
If tha regular expression gotz nuff `\fB^FROM_DAEMON\fP' it will be
substituted by
.na
.nh
`\fB(^(Mailing-List\h'-\w' 'u' :\h'-\w' 'u' |Precedence\h'-\w' 'u' :.*(junk\h'-\w' 'u' |bulk\h'-\w' 'u' |list)\h'-\w' 'u' |To\h'-\w' 'u' : Multiple recipientz of |(((Resent-)?(From\h'-\w' 'u' |Sender)\h'-\w' 'u' |X-Envelope-From)\h'-\w' 'u' :\h'-\w' 'u' |>?From )([^>]*[^(.%@a-z0-9])?(Post(ma?(st(e?r)?\h'-\w' 'u' |n)\h'-\w' 'u' |office)\h'-\w' 'u' |(send)?Mail(er)?\h'-\w' 'u' |daemon\h'-\w' 'u' |m(mdf\h'-\w' 'u' |ajordomo)\h'-\w' 'u' |n?uucp\h'-\w' 'u' |LIST(SERV\h'-\w' 'u' |proc)\h'-\w' 'u' |NETSERV\h'-\w' 'u' |o(wner\h'-\w' 'u' |ps)\h'-\w' 'u' |r(e(quest\h'-\w' 'u' |sponse)\h'-\w' 'u' |oot)\h'-\w' 'u' |b(ounce\h'-\w' 'u' |bs\e.smtp)\h'-\w' 'u' |echo\h'-\w' 'u' |mirror\h'-\w' 'u' |s(erv(ices?\h'-\w' 'u' |er)\h'-\w' 'u' |mtp(error)?\h'-\w' 'u' |ystem)\h'-\w' 'u' |A(dmin(istrator)?\h'-\w' 'u' |MMGR\h'-\w' 'u' |utoanswer))(([^).!\h'-\w' 'u' :a-z0-9][-_a-z0-9]*)?[%@>\\t ][^<)]*(\e(.*\e).*)?)?$([^>]\h'-\w' 'u' |$)))\fP',
which should catch mails comin from most daemons (howz dat fo' a regular
expression :\-).
.hy
.ad
.PP
If tha regular expression gotz nuff `\fB^FROM_MAILER\fP' it will be
substituted by
.na
.nh
`\fB(^(((Resent-)?(From\h'-\w' 'u' |Sender)\h'-\w' 'u' |X-Envelope-From)\h'-\w' 'u' :\h'-\w' 'u' |>?From )([^>]*[^(.%@a-z0-9])?(Post(ma(st(er)?\h'-\w' 'u' |n)\h'-\w' 'u' |office)\h'-\w' 'u' |(send)?Mail(er)?\h'-\w' 'u' |daemon\h'-\w' 'u' |mmdf\h'-\w' 'u' |n?uucp\h'-\w' 'u' |ops\h'-\w' 'u' |r(esponse\h'-\w' 'u' |oot)\h'-\w' 'u' |(bbs\e.)?smtp(error)?\h'-\w' 'u' |s(erv(ices?\h'-\w' 'u' |er)\h'-\w' 'u' |ystem)\h'-\w' 'u' |A(dmin(istrator)?\h'-\w' 'u' |MMGR))(([^).!\h'-\w' 'u' :a-z0-9][-_a-z0-9]*)?[%@>\\t ][^<)]*(\e(.*\e).*)?)?$([^>]\h'-\w' 'u' |$))\fP'
(a stripped down version of `\fB^FROM_DAEMON\fP'),
which should catch mails comin from most mailer-daemons.
.hy
.ad
.PP
When assignin boolean joints ta variablez like VERBOSE, DELIVERED or COMSAT,
procmail accepts as legit every last muthafuckin strang startin with: a non-zero value, `on',
`y', `t' or `e'.  False is every last muthafuckin strang startin with: a zero value, `off',
`n', `f' or `d'.
.PP
If tha action line of a recipe specifies a program, a sole backslash-newline
pair up in it on a otherwise empty line is ghon be converted tha fuck into a newline.
.PP
Da regular expression engine built tha fuck into procmail do not support named
characta classes.
.SH NOTES
Since unquoted leadin whitespace is generally ignored up in tha rcfile you can
indent every last muthafuckin thang ta taste.
.PP
Da leadin `|' on tha action line ta specify a program or filta is stripped
before checkin fo' $SHELLMETAS.
.PP
Filez included wit tha INCLUDERC directizzle containin only environment
variable assignments can be shared wit sh.
.PP
Da current behavior of assignments on tha command line to
.B INCLUDERC
and
.B SWITCHRC
is not guaranteed, has been chizzled once already, n' may be chizzled
again or removed up in future releases.
.PP
For
.I straight-up
fucked up processin you can even consider calling
.B procmail
recursively.
.PP
In tha oldschool days, tha `:0' dat marks tha beginnin of a recipe, had to
be chizzled ta `:n', whereby `n' denotes tha number of conditions that
follow.
.SH AUTHORS
Stephen R. van den Berg
.RS
<srb@cuci.nl>
.RE
Philip A. Guenther
.RS
<guenther@sendmail.com>
.RE
.\".if n .pl -(\n(.tu-1i)
.rm SH
.rn Sh SH
.rm SS
.rn Ss SS
.rm TP
.rn Tp TP
.rm RS
.rn Rs RS
.rm RE
.rn Re RE
