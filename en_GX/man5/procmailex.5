.\"if n .pl +(135i-\n(.pu)
.de Id
.ds Rv \\$3
.ds Dt \\$4
..
.Id $Id: procmailex.man,v 1.54 2001/08/04 06:08:20 guenther Exp $
.TH PROCMAILEX 5 \*(Dt BuGless
.rn SH Sh
.de SH
.br
.ne 11
.Sh "\\$1"
..
.rn SS Ss
.de SS
.br
.ne 10
.Ss "\\$1"
..
.rn TP Tp
.de TP
.br
.ne 9
.Tp \\$1
..
.rn RS Rs
.de RS
.na
.nf
.Rs
..
.rn RE Re
.de RE
.Re
.fi
.ad
..
.de Sx
.PP
.ne \\$1
.RS
..
.de Ex
.RE
.PP
..
.na
.SH NAME
procmailex \- procmail rcfile examples
.SH SYNOPSIS
.B $HOME/.procmailrc examples
.ad
.SH DESCRIPTION
For a thugged-out description of tha rcfile format see
.BR procmailrc (5).
.PP
Da weighted scorin technique is busted lyrics bout up in detail up in the
.BR procmailsc (5)
man page.
.PP
This playa page shows nuff muthafuckin example recipes.  For examplez of complete rcfiles
you can check tha NOTES section in
.BR procmail (1),
or peep tha example rcfilez part of tha procmail source distribution
(procmail*/examples/?procmailrc).
.SH EXAMPLES
Sort up all mail comin from tha scuba-dive mailin list tha fuck into tha mailfolder
scubafile (uses tha locallockfile scubafile.lock).
.Sx 3
:0:
* ^TOscuba
scubafile
.Ex
Forward all mail from peta bout compilaz ta william (and keep a cold-ass lil copy
of it here up in petcompil).
.Sx 10
:0
* ^From.*peter
* ^Subject:.*compilers
{
   :0 c
   ! william@somewhere.edu

   :0
   petcompil
}
.Ex
An equivalent solution dat accomplishes tha same:
.Sx 7
:0 c
* ^From.*peter
* ^Subject:.*compilers
! william@somewhere.edu

   :0 A
   petcompil
.Ex
An equivalent yo, but slightly slower solution dat accomplishes tha same:
.Sx 9
:0 c
* ^From.*peter
* ^Subject:.*compilers
! william@somewhere.edu

:0
* ^From.*peter
* ^Subject:.*compilers
petcompil
.Ex
If yo ass is fairly freshly smoked up ta procmail n' plan ta experiment a lil bit
it often helps ta have a
.I safety net
of some sort.  Insertin tha followin two recipes above all other recipes
will make shizzle dat of all arrivin mail always tha last 32 lyrics will
be preserved. Y'all KNOW dat shit, muthafucka!  In order fo' it ta work as intended, you gotta create
a directory named `backup' up in $MAILDIR prior ta insertin these two recipes.
.Sx 5
:0 c
backup

:0 ic
| cd backup && rm \-f dummy `ls \-t msg.* | sed \-e 1,32d`
.Ex
If yo' system don't generate or generates incorrect leadin `From '
lines on every last muthafuckin mail, you can fix dis by callin up procmail with
the \-f- option. I aint talkin' bout chicken n' gravy biatch.  To fix tha same problem by
different means, you could have banged tha followin two
recipes above all other recipes up in yo' rcfile.  They will filta tha header
of any mail all up in formail which will strip any leadin `From ', and
automatically regenerates it subsequently.
.Sx 2
:0 fhw
| formail \-I "From " \-a "From "
.Ex
Add tha headaz of all lyrics dat didn't come from tha postmaster
to yo' private header collection (for
statistics or mail debugging); n' use tha lockfile `headc.lock'.  In order
to make shizzle tha lockfile aint removed until tha pipe has finished,
you gotta specify option `w'; otherwise tha lockfile would be
removed as soon as tha pipe has accepted tha mail.
.Sx 3
:0 hwc:
* !^FROM_MAILER
| uncompress headc.Z; pussaaaaay >>headc; compress headc
.Ex
Or, if you would use tha mo' efficient gzip instead of compress:
.Sx 3
:0 hwc:
* !^FROM_MAILER
| gzip >>headc.gz
.Ex
Forward all mails shorta than 1000 bytes ta mah home address (no lockfile
needed on dis recipe).
.Sx 3
:0
* < 1000
! myname@home
.Ex
Split up incomin digests from tha surfin mailin list tha fuck into they individual
lyrics, n' store dem tha fuck into surfing, rockin surfing.lock as tha locallockfile.
.Sx 3
:0:
* ^Subject:.*surfing.*Digest
| formail +1 \-dz >>surfing
.Ex
Store every last muthafuckin thang comin from tha postmasta or mailer-daemon (like bounced
mail) tha fuck into tha file postm, rockin postm.lock as tha locallockfile.
.Sx 3
:0:
* ^FROM_MAILER
postm
.Ex
A simple autoreply recipe.  It make shizzle dat neither mail from any daemon
(like bouncin mail or mail from mailing-lists), nor autoreplies comin from
yo ass is ghon be autoreplied to.  If dis precaution would not be taken,
disasta could result (`ringing' mail).  In order fo' dis recipe ta autoreply
to all tha incomin mail, you should of course bang it before all other
recipes up in yo' rcfile.  But fuck dat shiznit yo, tha word on tha street is dat it be advisable ta put it
.I after
any recipes dat process tha mails from subscribed mailinglists; it generally
is not a phat scam ta generate autoreplies ta mailinglists (yes, the
!^FROM_DAEMON regexp should already catch dem yo, but if tha mailinglist
doesn't follow accepted conventions, dis might
.I not
be
.IR enough ).
.Sx 6
:0 h c
* !^FROM_DAEMON
* !^X-Loop: your@own.mail.address
| (formail \-r \-I"Precedence: junk" \e
    \-A"X-Loop: your@own.mail.address" ; \e
   echo "Mail received.") | $SENDMAIL \-t
.Ex
A mo' fucked up autoreply recipe dat implements tha functionizzle equivalent
of tha well known
.BR vacation (1)
program.  This recipe is based on tha same principlez as tha last one (prevent
`ringing' mail).  In addizzle ta dat however, it maintains a vacation database
by extractin tha name of tha sender n' insertin it up in tha vacation.cache
file if tha name was freshly smoked up (the vacation.cache file is maintained by formail
which will make shizzle dat it always gotz nuff da most thugged-out recent names, tha size
of tha file is limited ta a maximum of approximately 8192 bytes).  If tha name
was new, a autoreply is ghon be sent.
.PP
As you can see, tha followin recipe has comments
.B between
the conditions.
This be allowed. Y'all KNOW dat shit, muthafucka!  Do
.B not
put comments on tha same line as a cold-ass lil condizzle though.
.Sx 18
SHELL=/bin/sh    # fo' other shells, dis might need adjustment

:0 Whc: vacation.lock
 # Perform a quick check ta peep if tha mail was addressed ta us
* $^To:.*\e<$\eLOGNAME\e>
 # Don't reply ta daemons n' mailinglists
* !^FROM_DAEMON
 # Mail loops is evil
* !^X-Loop: your@own.mail.address
| formail \-rD 8192 vacation.cache

  :0 ehc         # if tha name was not up in tha cache
  | (formail \-rI"Precedence: junk" \e
       \-A"X-Loop: your@own.mail.address" ; \e
     echo "I received yo' mail,"; \e
     echo "but I won't be back until Monday."; \e
     echo "-- "; pussaaaaay $HOME/.signature \e
    ) | $SENDMAIL \-oi \-t
.Ex
Store all lyrics concernin TeX up in separate, unique filenames, up in a gangbangin' finger-lickin' directory
named texmail (this directory has ta exist); there is no need ta use lockfiles
in dis case, so we won't.
.Sx 3
:0
* (^TO|^Subject:.*)TeX[^t]
texmail
.Ex
Da same as above, except now we store tha mails up in numbered filez (MH mail
folder).
.Sx 3
:0
* (^TO|^Subject:.*)TeX[^t]
texmail/.
.Ex
Or you could file tha mail up in nuff muthafuckin directory foldaz all up in tha same time.
Da followin recipe will serve up tha mail ta two MH-foldaz n' one
directory folda n' shit.  It be straight-up only one file wit two extra hardlinks.
.Sx 3
:0
* (^TO|^Subject:.*)TeX[^t]
texmail/. wordprocessin dtp/.
.Ex
Store all tha lyrics bout meetings up in a gangbangin' folda dat is up in a gangbangin' finger-lickin' directory
that chizzlez every last muthafuckin month.  E.g. if it was January 1994, tha folder
would have tha name `94-01/meeting' n' tha locallockfile would be
`94-01/meeting.lock'.
.Sx 3
:0:
* meeting
`date +%y-%m`/meeting
.Ex
Da same as above yo, but, if tha `94-01' directory wouldn't have existed, it
is pimped automatically:
.Sx 9
MONTHFOLDER=`date +%y-%m`

:0 Wic
* , biatch? test ! \-d $MONTHFOLDER
| mkdir $MONTHFOLDER

:0:
* meeting
${MONTHFOLDER}/meeting
.Ex
Da same as above yo, but now by slightly different means:
.Sx 6
MONTHFOLDER=`date +%y-%m`
DUMMY=`test \-d $MONTHFOLDER || mkdir $MONTHFOLDER`

:0:
* meeting
${MONTHFOLDER}/meeting
.Ex
If yo ass is subscribed ta nuff muthafuckin mailinglists n' playas cross-post to
some of them, you probably receive nuff muthafuckin duplicate mails (one from every
list).  Da followin simple recipe eliminates duplicate mails.  It tells
formail ta keep a 8KB cache file up in which it will store tha Message-IDs of
da most thugged-out recent mails you received. Y'all KNOW dat shit, muthafucka!  Since Message-IDs is guaranteed to
be unique fo' every last muthafuckin freshly smoked up mail, they is ideally suited ta chronic up duplicate
mails.  Simply put tha followin recipe all up in tha top of yo' rcfile, and
no duplicate mail will git past dat shit.
.Sx 2
:0 Wh: msgid.lock
| formail \-D 8192 msgid.cache
.Ex
.B Beware
if you have delivery problems up in recipes below dis one n' procmail tries
to requeue tha mail, then on tha next queue run, dis mail is ghon be considered
a duplicate n' is ghon be thrown away.  For dem not like so Kool & Tha Gang in
their own scriptin capabilities, you can use tha followin recipe instead.
It puts duplicates up in a separate folda instead of throwin dem away.
It be up ta you ta periodically empty tha folda of course.
.Sx 5
:0 Whc: msgid.lock
| formail \-D 8192 msgid.cache

:0 a:
duplicates
.Ex
Procmail can serve up ta MH foldaz directly yo, but, it do not update
the unseen sequences tha real MH manages.  If you want procmail to
update dem as well, bust a recipe like tha followin which will file
everythang dat gotz nuff tha word spam up in tha body of tha mail tha fuck into an
MH folda called spamfold. Y'all KNOW dat shit, muthafucka!  Note tha local lockfile, which is needed
because MH programs do not lock tha sequences file.  Asynchronous
invocationz of MH programs dat chizzle tha sequences file may therefore
corrupt it or silently lose chizzles.  Unfortunately, tha lockfile
doesn't straight-up solve tha problem as rcvstore could be invoked while
`show' or `mark' or some other MH program is hustlin.  This problem is
sposed ta fuckin be fixed up in some future version of MH yo, but until then,
yo dirty ass is gonna gotta balizzle tha risk of lost or corrupt sequences against
the benefitz of tha unseen sequence.
.Sx 3
:0 :spamfold/$LOCKEXT
* B ?, biatch? spam
| rcvstore +spamfold
.Ex
When deliverin ta emacs foldaz (i.e., mailfoldaz managed by any emacs
mail package, e.g., RMAIL or VM) directly, you should use emacs-compatible
lockfiles.  Da emacs mailaz is a lil' bit domedamaged up in dat respect, they get
very upset if one of mah thugs delivers ta mailfoldaz which they already have up in their
internal buffers.  Da followin recipe assumes dat $HOME equals /home/john.
.Sx 5
MAILDIR=Mail

:0:/usr/local/lib/emacs/lock/!home!john!Mail!mailbox
* ^Subject:.*whatever
mailbox
.Ex
Alternatively, you can have procmail serve up tha fuck into its own set of mailboxes,
which you then periodically empty n' copy over ta yo' emacs filez using
.BR movemail .
Movemail uses mailbox.lock local lockfilez per mailbox.  This straight-up is
the preferred mode of operation up in conjunction wit procmail.
.PP
To extract certain headaz from a mail n' put dem tha fuck into environment
variablez you can use any of tha followin constructs:
.Sx 5
SUBJECT=`formail \-xSubject:`    # regular field
FROM=`formail \-rt \-xTo:`        # special case

:0 h                            # alternate method
KEYWORDS=| formail \-xKeywords:
.Ex
If yo ass is rockin temporary filez up in a procmailrc file, n' wanna make
sure dat they is removed just before procmail exits, you could use
suttin' along tha lines of:
.Sx 2
TEMPORARY=$HOME/tmp/pmail.$$
TRAP="/bin/rm \-f $TEMPORARY"
.Ex
Da TRAP keyword can also be used ta chizzle tha exitcode of procmail.
I.e. if you want procmail ta return a exitcode of `1' instead of its
regular exitcodes, you could use:
.Sx 3
EXITCODE=""
TRAP="exit 1;"   # Da trailin semi-colon is blingin
                 # since exit aint a standalone program
.Ex
Or, if tha exitcode do not need ta depend on tha programs run from
the TRAP, you can bust a mere:
.Sx 1
EXITCODE=1
.Ex
Da followin recipe prints every last muthafuckin incomin mail dat be lookin like a postscript
file.
.Sx 3
:0 Bb
* ^^%!
| lpr
.Ex
Da followin recipe do tha same yo, but be a lil' bit mo' selective.  It only
prints tha postscript file if it be reppin tha print-server n' shit.  Da first
condizzle matches only if it is found up in tha header n' shit.  Da second condition
only matches all up in tha start of tha body.
.Sx 4
:0 b
* ^From[ :].*print-server
* B ?, biatch? ^^%!
| lpr
.Ex
Da same as above yo, but now by slightly different means:
.Sx 7
:0
* ^From[ :].*print-server
{
  :0 B b
  * ^^%!
  | lpr
}
.Ex
Likewise:
.Sx 4
:0 HB b
* ^^(.+$)*From[ :].*print-server
* ^^(.+$)*^%!
| lpr
.Ex
Suppose you have two accounts, you use both accounts regularly yo, but they are
in straight-up distinct places (i.e., you can only read mail dat arrived at either one
of tha accounts).  Yo ass wanna forward mail arrivin at account one to
account two, n' tha other way around. Y'all KNOW dat shit, muthafucka!  Da first thang dat comes ta mind is
usin .forward filez at both cribs; dis won't work of course, since you will
be bustin a mail loop.  This mail loop can be avoided by insertin the
followin recipe up in front of all other recipes up in tha $HOME/.procmailrc filez on
both cribs.  If you make shizzle dat you add tha same X-Loop: field at both
sites, mail can now safely be forwarded ta tha other account from either of
them.
.Sx 4
:0 c
* !^X-Loop: yourname@your.main.mail.address
| formail \-A "X-Loop: yourname@your.main.mail.address" | \e
   $SENDMAIL \-oi yourname@the.other.account
.Ex
If one of mah thugs sendz you a mail wit tha word `retrieve' up in tha subject, the
followin will automatically bust back tha contentz of info_file ta the
sender n' shit.  Like up in all recipes where we bust mail, we peep up fo' mail
loops.
.Sx 6
:0
* !^From +YOUR_USERNAME
* !^Subject:.*Re:
* !^FROM_DAEMON
* ^Subject:.*retrieve
| (formail \-r ; pussaaaaay info_file) | $SENDMAIL \-oi \-t
.Ex
Now bigs up a example fo' a straight-up simple fileserver accessible by mail.
For mo' demandin applications, I suggest you take a peep
.B SmartList
(available from tha same place as tha procmail distribution).
As listed, dis fileserver sendz back at most one file per request, it
ignores tha body of incomin mails, tha Subject: line has ta look
like "Subject: bust file the_file_you_want" (the blanks is significant),
it do not return filez dat have names startin wit a thugged-out dot, nor do
it allow filez ta be retrieved dat is outside tha fileserver directory
tree (if you decizzle ta munge dis example, make shizzle you do not inadvertently
loosen dis last restriction).
.Sx 18
:0
* ^Subject: bust file [0-9a-z]
* !^X-Loop: yourname@your.main.mail.address
* !^Subject:.*Re:
* !^FROM_DAEMON
* !^Subject: bust file .*[/.]\e.
{
  MAILDIR=$HOME/fileserver # chdir ta tha fileserver directory

  :0 fhw                   # reverse mailheader n' extract name
  * ^Subject: bust file \e/[^ ]*
  | formail \-rA "X-Loop: yourname@your.main.mail.address"

  FILE="$MATCH"            # tha axed filename

  :0 ah
  | pussaaaaay \- ./$FILE 2>&1 | $SENDMAIL \-oi \-t
}
.Ex
Da followin example preconverts all plain-text mail arrivin up in certain
encoded MIME formats tha fuck into a mo' compact 8-bit format which can be used
and displayed mo' easily by most programs.  The
.BR mimencode (1)
program is part of Nathaniel Borensteinz metamail package.
.Sx 17
:0
* ^Content-Type: *text/plain
{
  :0 fbw
  * ^Content-Transfer-Encoding: *quoted-printable
  | mimencode \-u \-q

     :0 Afhw
     | formail \-I "Content-Transfer-Encoding: 8bit"

  :0 fbw
  * ^Content-Transfer-Encoding: *base64
  | mimencode \-u \-b

     :0 Afhw
     | formail \-I "Content-Transfer-Encoding: 8bit"
}
.Ex
Da followin one is rather exotic yo, but it only serves ta demonstrate a
feature.  Suppose you gotz a gangbangin' file up in yo' HOME directory called ".urgent",
and tha (one) thug named up in dat file is tha sender of a incomin mail,
you'd like dat mail ta be stored up in $MAILDIR/urgent instead of up in any of the
normal mailfoldaz it would done been sorted in. I aint talkin' bout chicken n' gravy biatch.  Then dis is what tha fuck you could
do (beware, tha filelength of $HOME/.urgent should be well below $LINEBUF,
increase LINEBUF if necessary):
.Sx 5
URGMATCH=`cat $HOME/.urgent`

:0:
* $^From.*${URGMATCH}
urgent
.Ex
An entirely different application fo' procmail would be ta conditionally
apply filtas ta a cold-ass lil certain (outgoing) text or mail.  A typical example
would be a gangbangin' filta all up in which you pipe all outgoin mail, up in order
to make shizzle dat it is ghon be MIME encoded only if it need ta be.
I.e. up in dis case you could start procmail up in tha middle of a pipe like:
.Sx 1
cat newtext | procmail ./mimeconvert | mail chris@where.ever
.Ex
The
.B mimeconvert
rcfile could contain suttin' like (the =0x80= n' =0xff= should
be substituted wit tha real 8-bit characters):
.Sx 10
DEFAULT=|     # pipe ta stdout instead of
              # deliverin mail as usual
:0 Bfbw
* [=0x80=-=0xff=]
| mimencode \-q

  :0 Afhw
  | formail \-I 'MIME-Version: 1.0' \e
     \-I 'Content-Type: text/plain; charset=ISO-8859-1' \e
     \-I 'Content-Transfer-Encoding: quoted-printable'
.Ex
.SH "SEE ALSO"
.na
.nh
.BR procmail (1),
.BR procmailrc (5),
.BR procmailsc (5),
.BR sh (1),
.BR csh (1),
.BR mail (1),
.BR mailx (1),
.BR binmail (1),
.BR uucp (1),
.BR aliases (5),
.BR sendmail (8),
.BR egrep (1),
.BR grep (1),
.BR biff (1),
.BR comsat (8),
.BR mimencode (1),
.BR lockfile (1),
.BR formail (1)
.hy
.ad
.SH AUTHORS
Stephen R. van den Berg
.RS
<srb@cuci.nl>
.RE
Philip A. Guenther
.RS
<guenther@sendmail.com>
.RE
.\".if n .pl -(\n(.tu-1i)
.rm SH
.rn Sh SH
.rm SS
.rn Ss SS
.rm TP
.rn Tp TP
.rm RS
.rn Rs RS
.rm RE
.rn Re RE
