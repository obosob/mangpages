.\" Yo Emacs muthafucka! This file is -*- nroff -*- source.
.\"
.\" Author: KaiGai Kohei <kaigai@ak.jp.nec.com> 2009
.TH "selabel_db" "5" "01 DEC 2011" "Securitizzle Enhanced Linux" "SELinux API documentation"
.SH "NAME"
selabel_db \- userspace SELinux labelin intercourse n' configuration file format fo' tha RDBMS objects context backend
.
.SH "SYNOPSIS"
.B #include <selinux/label.h>
.sp
.BI "int selabel_lookup(struct selabel_handle *" hnd ,
.in +\w'int selabel_lookup('u
.BI "security_context_t *" context ,
.br
.BI "const char *" object_name ", int " object_type ");"
.in
.sp
.BI "int selabel_lookup_raw(struct selabel_handle *" hnd ,
.in +\w'int selabel_lookup('u
.BI "security_context_t *" context ,
.br
.BI "const char *" object_name ", int " object_type ");"
.
.SH "DESCRIPTION"
Da DB contexts backend maps from a pair of object name n' class tha fuck into securitizzle contexts, n' you can put dat on yo' toast. Well shiiiit, it is used ta find tha appropriate context fo' database objects when relabelin a cold-ass lil certain database. Da returned \fIcontext\fR must be freed rockin \fBfreecon\fR(3).
.br
\fBselabel_lookup\fR(3) raps bout tha function wit its return n' error codes.
.sp
Da \fIobject_name\fR should be a gangbangin' straight-up qualified name rockin tha hierarchy of database objects, n' you can put dat on yo' toast. For example, tha \fBpg_class\fR table up in tha \fBpostgres\fR database n' \fBpg_catalog\fR schema should be qualified as:
.RS
.B Bpostgres.pg_catalog.pg_class
.RE
.sp
Da \fBNOTES\fR section has further shiznit on database support fo' namespace hierarchies.
.sp
Da \fIobject_type\fR argument should be set ta one of tha followin joints:
.RS
.TP
.B SELABEL_DB_DATABASE
The
.I object_name
argument specifies tha name of a thugged-out database itself, like fuckin "postgres".
.TP
.B SELABEL_DB_SCHEMA
The
.I object_name
argument specifies tha name of a schema object, like fuckin "postgres.public".
.TP
.B SELABEL_DB_TABLE
The
.I object_name
argument specifies tha name of a table object, like fuckin "postgres.public.my_table"
.TP
.B SELABEL_DB_COLUMN
The
.I object_name
argument specifies tha name of a cold-ass lil column object, like fuckin "postgres.public.my_table.user_id"
.TP
.B SELABEL_DB_TUPLE
The
.I object_name
argument specifies tha name of a table object which gotz nuff tha tuplez ta be relabeled, like fuckin "postgresql.public.my_table". Note dat our crazy asses have no way ta identify individual tuple objects, except fo' WHERE clause on DML statements, cuz it has no name.
.TP
.B SELABEL_DB_PROCEDURE
The
.I object_name
argument specifies tha name of a procedure object, like fuckin "postgres.public.my_func". Note dat our phat asses don't support lookup of individual securitizzle contexts fo' procedures which have tha same name but different arguments.
.TP
.B SELABEL_DB_SEQUENCE
The
.I object_name
argument specifies tha name of a sequence object, like fuckin "postgres.public.my_seq".
.TP
.B SELABEL_DB_BLOB
The
.I object_name
argument specifies tha name of a big-ass object, like fuckin "postgres.16308".
Note dat a big-ass object aint gots a name, so it is identified by its identifier value.
.TP
.B SELABEL_DB_VIEW
The
.I object_name
argument specifies tha name of a view object, like fuckin "postgres.public.my_view".
.TP
.B SELABEL_DB_LANGUAGE
The
.I object_name
argument specifies tha name of a language object, like fuckin "postgres.public.tcl".
.RE
.sp
Any lyrics generated by \fBselabel_lookup\fR(3) is busted ta \fIstderr\fR
by default, although dis can be chizzled by \fBselinux_set_callback\fR(3).
.sp
.BR selabel_lookup_raw (3)
behaves identically ta \fBselabel_lookup\fR(3) but do not big-ass up context
translation.
.sp
Da \fBFILES\fR section details tha configuration filez used ta determine tha database object context.
.
.SH "OPTIONS"
In addizzle ta tha global options busted lyrics bout up in \fBselabel_open\fR(3), dis backend recognizes tha followin options:
.RS
.TP
.B SELABEL_OPT_PATH
A non-null value fo' dis option specifies a path ta a gangbangin' file dat is ghon be opened up in lieu of tha standard DB contexts file.
It tries ta open tha specfile designed fo' SE-PostgreSQL as default, so if another RDBMS uses dis intercourse, it need ta give a explicit specfile designed fo' dat RDBMS (see tha \fBFILES\fR section fo' details).
.RE
.
.SH "FILES"
Da database context file used ta retrieve a cold-ass lil context dependz on tha \fBSELABEL_OPT_PATH\fR parameta passed ta \fBselabel_open\fR(3). If \fINULL\fR, then tha \fBSELABEL_OPT_PATH\fR value will default ta tha actizzle policy database contexts location (as returned by \fBselinux_sepgsql_context_path\fR(3)), otherwise tha actual \fBSELABEL_OPT_PATH\fR value specified is used (this option must be used ta support databases other than SE-PostgreSQL).
.sp
Da default database object contexts file is:
.RS
.I /etc/selinux/{SELINUXTYPE}/contexts/sepgsql_context
.RE
.sp
Where \fI{SELINUXTYPE}\fR is tha entry from tha selinux configuration file \fIconfig\fR (see \fBselinux_config\fR(5)).
.sp
Da entries within tha database contexts file is shown up in tha \fBObject Name Strin Values\fR n' \fBFILE FORMAT\fR sections.
.
.SH "Object Name Strin Values"
Da strang name assigned ta each \fIobject_type\fR argument dat can be present up in tha database contexts file are:
.TS
center, allbox, tab(@);
lI lB
lB l .
object_type@Text Name
SELABEL_DB_DATABASE@db_database
SELABEL_DB_SCHEMA@db_schema
SELABEL_DB_VIEW@db_view
SELABEL_DB_LANGUAGE@db_language
SELABEL_DB_TABLE@db_table
SELABEL_DB_COLUMN@db_column
SELABEL_DB_TUPLE@db_tuple
SELABEL_DB_PROCEDURE@db_procedure
SELABEL_DB_SEQUENCE@db_sequence
SELABEL_DB_BLOB@db_blob
.TE
.
.SH "FILE FORMAT"
Each line within tha database contexts file be as bigs up:
.RS
.I object_type object_name context
.RE
.sp
Where:
.RS
.I object_type
.RS
This is tha strang representation of tha object type shown up in tha \fBObject Name Strin Values\fR section.
.RE
.I object_name
.RS
Da key used ta obtain tha context based on tha \fIobject_type\fR.
.sp
Da entry can contain '*' fo' wildcard matchin or '?' fo' substitution.
.sp
Note dat if tha '*' is used, then be aware dat tha order of entries up in tha file is blingin. Da '*' on its own is used ta ensure a thugged-out default fallback context be assigned n' should be tha last entry up in tha \fIobject_type\fR block.
.RE
.I context
.RS
Da securitizzle context dat is ghon be applied ta tha object.
.RE
.RE
.sp
Da followin example is fo' SE-PostgreSQL:
.sp
# ./contexts/sepgsql_contexts file
.br
# object_type  object_name   context
.br
db_database    my_database   system_u:object_r:sepgsql_db_t:s0
.br
db_database    *             system_u:object_r:sepgsql_db_t:s0
.br
db_schema      *.*           system_u:object_r:sepgsql_schema_t:s0
.br
db_tuple       row_low       system_u:object_r:sepgsql_table_t:s0
.br
db_tuple       row_high      system_u:object_r:sepgsql_table_t:s0:c1023
.br
db_tuple       *.*.*         system_u:object_r:sepgsql_table_t:s0
.
.SH "NOTES"
.IP "1." 4
A suitable database contexts file need ta be freestyled fo' tha target RDBMS n' tha \fBSELABEL_OPT_PATH\fR option must be used up in \fBselabel_open\fR(3) ta load dat shit.
.IP "2." 4
Da hierarchy of tha namespace fo' database objects dependz on tha RDBMS, however tha \fIselabel*\fR intercourses aint gots any specific support fo' a namespace hierarchy.
.sp
SE-PostgreSQL has a namespace hierarchy where a thugged-out database is tha top level object wit tha schema bein tha next level. Under tha schema object there can be other typez of objects like fuckin tablez n' procedures. This hierarchy is supported as bigs up:
.RS
.RS
.sp
If a securitizzle context is required fo' "my_table" table up in tha "public"
schema within tha "postgres" database, then tha \fBselabel_lookup\fR(3)
parametas fo' \fIobject_type\fR would be \fBSELABEL_DB_TABLE\fR n' the
\fIobject_name\fR would be "postgres.public.my_table", tha security
context (if available), would be returned up in \fIcontext\fR.
.RE
.RE
.IP "3." 4
If contexts is ta be validated, then tha global option \fBSELABEL_OPT_VALIDATE\fR must be set before callin \fBselabel_open\fR(3). If dis aint set, then it is possible fo' a invalid context ta be returned.
.
.SH "SEE ALSO"
.ad l
.nh
.BR selinux "(8), " selabel_open "(3), " selabel_lookup "(3), " selabel_stats "(3), " selabel_close "(3), " selinux_set_callback "(3), " selinux_sepgsql_context_path "(3), " freecon "(3), " selinux_config "(5) "
