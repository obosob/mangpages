'\" t
.\"     Title: gitweb.conf
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITWEB\&.CONF" "5" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitweb.conf \- Gitweb (Git wizzy intercourse) configuration file
.SH "SYNOPSIS"
.sp
/etc/gitweb\&.conf, /etc/gitweb\-common\&.conf, $GITWEBDIR/gitweb_config\&.perl
.SH "DESCRIPTION"
.sp
Da gitweb CGI script fo' viewin Git repositories over tha wizzy uses a perl script fragment as its configuration file\&. Yo ass can set variablez rockin "our $variable = value"; text from a "#" characta until tha end of a line is ignored\&. Right back up in yo muthafuckin ass. See \fBperlsyn\fR(1) fo' details\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
# gitweb configuration file fo' http://git\&.example\&.org
#
our $projectroot = "/srv/git"; # FHS recommendation
our $site_name = \(aqExample\&.org >> Repos\(aq;
.fi
.if n \{\
.RE
.\}
.sp
Da configuration file is used ta override tha default settings dat was built tha fuck into gitweb all up in tha time tha \fIgitweb\&.cgi\fR script was generated\&.
.sp
While one could just alta tha configuration settings up in tha gitweb CGI itself, dem chizzlez would be lost upon upgrade\&. Configuration settings might also be placed tha fuck into a gangbangin' file up in tha same directory as tha CGI script wit tha default name \fIgitweb_config\&.perl\fR \(em allowin one ta have multiple gitweb instances wit different configurations by tha use of symlinks\&.
.sp
Note dat some configuration can be controlled on per\-repository rather than gitweb\-wide basis: peep "Per\-repository gitweb configuration" subsection on \fBgitweb\fR(1) manpage\&.
.SH "DISCUSSION"
.sp
Gitweb readz configuration data from tha followin sources up in tha followin order:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
built\-in joints (some set durin build stage),
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
common system\-wide configuration file (defaults to
\fI/etc/gitweb\-common\&.conf\fR),
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
either per\-instizzle configuration file (defaults to
\fIgitweb_config\&.perl\fR
in tha same directory as tha installed gitweb), or if it do not exists then fallback system\-wide configuration file (defaults to
\fI/etc/gitweb\&.conf\fR)\&.
.RE
.sp
Values obtained up in lata configuration filez override joints obtained earlier up in tha above sequence\&.
.sp
Locationz of tha common system\-wide configuration file, tha fallback system\-wide configuration file n' tha per\-instizzle configuration file is defined at compile time rockin build\-time Makefile configuration variables, respectively GITWEB_CONFIG_COMMON, GITWEB_CONFIG_SYSTEM n' GITWEB_CONFIG\&.
.sp
Yo ass can also override locationz of gitweb configuration filez durin runtime by settin tha followin environment variables: GITWEB_CONFIG_COMMON, GITWEB_CONFIG_SYSTEM n' GITWEB_CONFIG ta a non\-empty value\&.
.sp
Da syntax of tha configuration filez is dat of Perl, since these filez is handled by sourcin dem as fragmentz of Perl code (the language dat gitweb itself is freestyled in)\&. Variablez is typically set rockin tha our qualifier (as up in "our $variable = <value>;") ta avoid syntax errors if a freshly smoked up version of gitweb no longer uses a variable n' therefore stops declarin it\&.
.sp
Yo ass can include other configuration file rockin read_config_file() subroutine\&. For example, one might wanna put gitweb configuration related ta access control fo' viewin repositories via Gitolite (one of Git repository pimpment tools) up in a separate file, e\&.g\&. up in \fI/etc/gitweb\-gitolite\&.conf\fR\&. To include it, put
.sp
.if n \{\
.RS 4
.\}
.nf
read_config_file("/etc/gitweb\-gitolite\&.conf");
.fi
.if n \{\
.RE
.\}
.sp
.sp
somewhere up in gitweb configuration file used, e\&.g\&. up in per\-installation gitweb configuration file\&. Note dat read_config_file() checks itself dat tha file it readz exists, n' do not a god damn thang if it aint found\&. Well shiiiit, it also handlez errors up in included file\&.
.sp
Da default configuration wit no configuration file at all may work perfectly well fo' some installations\&. Right back up in yo muthafuckin ass. Still, a cold-ass lil configuration file is useful fo' customizin or tweakin tha behavior of gitweb up in nuff ways, n' some optionizzle features aint gonna be present unless explicitly enabled rockin tha configurable %features variable (see also "Configurin gitweb features" section below)\&.
.SH "CONFIGURATION VARIABLES"
.sp
Some configuration variablez have they default joints (embedded up in tha CGI script) set durin buildin gitweb \(em if dat is tha case, dis fact is put up in they description\&. Right back up in yo muthafuckin ass. See gitweb\(cqs \fIINSTALL\fR file fo' instructions on buildin n' installin gitweb\&.
.SS "Location of repositories"
.sp
Da configuration variablez busted lyrics bout below control how tha fuck gitweb findz Git repositories, n' how tha fuck repositories is displayed n' accessed\&.
.sp
See also "Repositories" n' lata subsections up in \fBgitweb\fR(1) manpage\&.
.PP
$projectroot
.RS 4
Absolute filesystem path which is ghon be prepended ta project path; tha path ta repository is
$projectroot/$project\&. Right back up in yo muthafuckin ass. Set to
$GITWEB_PROJECTROOT
durin installation\&. This variable has ta be set erectly fo' gitweb ta find repositories\&.
.sp
For example, if
$projectroot
is set ta "/srv/git" by puttin tha followin up in gitweb config file:
.sp
.if n \{\
.RS 4
.\}
.nf
our $projectroot = "/srv/git";
.fi
.if n \{\
.RE
.\}
.sp
then
.sp
.if n \{\
.RS 4
.\}
.nf
http://git\&.example\&.com/gitweb\&.cgi?p=foo/bar\&.git
.fi
.if n \{\
.RE
.\}
.sp
and its path_info based equivalent
.sp
.if n \{\
.RS 4
.\}
.nf
http://git\&.example\&.com/gitweb\&.cgi/foo/bar\&.git
.fi
.if n \{\
.RE
.\}
.sp
will map ta tha path
\fI/srv/git/foo/bar\&.git\fR
on tha filesystem\&.
.RE
.PP
$projects_list
.RS 4
Name of a plain text file listin projects, or a name of directory ta be scanned fo' projects\&.
.sp
Project list filez should list one project per line, wit each line havin tha followin format
.sp
.if n \{\
.RS 4
.\}
.nf
<URI\-encoded filesystem path ta repository> SP <URI\-encoded repository baller>
.fi
.if n \{\
.RE
.\}
.sp
Da default value of dis variable is determined by the
GITWEB_LIST
makefile variable at installation time\&. If dis variable is empty, gitweb will fall back ta scannin the
$projectroot
directory fo' repositories\&.
.RE
.PP
$project_maxdepth
.RS 4
If
$projects_list
variable is unset, gitweb will recursively scan filesystem fo' Git repositories\&. The
$project_maxdepth
is used ta limit traversin depth, relatizzle to
$projectroot
(startin point); it means dat directories which is further from
$projectroot
than
$project_maxdepth
will be skipped\&.
.sp
It be purely performizzle optimization, originally intended fo' MacOS X, where recursive directory traversal is slow\&. Gitweb bigs up symbolic links yo, but it detects cycles, ignorin any duplicate filez n' directories\&.
.sp
Da default value of dis variable is determined by tha build\-time configuration variable
GITWEB_PROJECT_MAXDEPTH, which defaults ta 2007\&.
.RE
.PP
$export_ok
.RS 4
Show repository only if dis file exists (in repository)\&. Only effectizzle if dis variable evaluates ta true\&. Can be set when buildin gitweb by setting
GITWEB_EXPORT_OK\&. This path is relatizzle to
GIT_DIR\&. git\-daemon[1] uses
\fIgit\-daemon\-export\-ok\fR, unless started with
\-\-export\-all\&. By default dis variable aint set, which means dat dis feature is turned off\&.
.RE
.PP
$export_auth_hook
.RS 4
Function used ta determine which repositories should be shown\&. This subroutine should take one parameter, tha full path ta a project, n' if it returns true, dat project is ghon be included up in tha projects list n' can be accessed all up in gitweb as long as it fulfills tha other requirements busted lyrics bout by $export_ok, $projects_list, n' $projects_maxdepth\&. Example:
.sp
.if n \{\
.RS 4
.\}
.nf
our $export_auth_hook = sub { return \-e "$_[0]/git\-daemon\-export\-ok"; };
.fi
.if n \{\
.RE
.\}
.sp
though tha above might be done by using
$export_ok
instead
.sp
.if n \{\
.RS 4
.\}
.nf
our $export_ok = "git\-daemon\-export\-ok";
.fi
.if n \{\
.RE
.\}
.sp
If not set (default), it means dat dis feature is disabled\&.
.sp
See also mo' involved example up in "Controllin access ta Git repositories" subsection on
\fBgitweb\fR(1)
manpage\&.
.RE
.PP
$strict_export
.RS 4
Only allow viewin of repositories also shown on tha overview page\&. This fo' example makes
$gitweb_export_ok
file decizzle if repository be available n' not only if it is shown\&. If
$gitweb_list
points ta file wit list of project, only dem repositories listed would be available fo' gitweb\&. Can be set durin buildin gitweb via
GITWEB_STRICT_EXPORT\&. By default dis variable aint set, which means dat you can directly access dem repositories dat is hidden from projects list page (e\&.g\&. tha is not listed up in tha $projects_list file)\&.
.RE
.SS "Findin files"
.sp
Da followin configuration variablez tell gitweb where ta find files\&. Da jointz of these variablez is paths on tha filesystem\&.
.PP
$GIT
.RS 4
Core git executable ta use\&. By default set to
$GIT_BINDIR/git, which up in turn is by default set to
$(bindir)/git\&. If you use Git installed from a funky-ass binary package, you should probably set dis ta "/usr/bin/git"\&. This can just be "git" if yo' wizzy server has a sensible PATH; from securitizzle point of view it is betta ta use absolute path ta git binary\&. If you have multiple Git versions installed it can be used ta chizzle which one ta use\&. Must be (correctly) set fo' gitweb ta be able ta work\&.
.RE
.PP
$mimetypes_file
.RS 4
File ta use fo' (filename extension based) guessin of MIME types before trying
\fI/etc/mime\&.types\fR\&.
\fBNOTE\fR
that dis path, if relative, is taken as relatizzle ta tha current Git repository, not ta CGI script\&. If unset, only
\fI/etc/mime\&.types\fR
is used (if present on filesystem)\&. If no mimetypes file is found, mimetype guessin based on extension of file is disabled\&. Unset by default\&.
.RE
.PP
$highlight_bin
.RS 4
Path ta tha highlight executable ta use (it must be tha one from
\m[blue]\fBhttp://www\&.andre\-simon\&.de\fR\m[]
due ta assumptions bout parametas n' output)\&. By default set to
\fIhighlight\fR; set it ta full path ta highlight executable if it aint installed on yo' wizzy server\(cqs PATH\&. Note that
\fIhighlight\fR
feature must be set fo' gitweb ta straight-up use syntax highlighting\&.
.sp
\fBNOTE\fR: if you wanna add support fo' freshly smoked up file type (supported by "highlight" but not used by gitweb), you need ta modify
%highlight_ext
or
%highlight_basename, dependin on whether you detect type of file based on extension (for example "sh") or on its basename (for example "Makefile")\&. Da keyz of these hashes is extension n' basename, respectively, n' value fo' given key is name of syntax ta be passed via
\-\-syntax <syntax>
to highlighter\&.
.sp
For example if repositories yo ass is hostin use "phtml" extension fo' PHP files, n' you wanna have erect syntax\-highlightin fo' dem files, you can add tha followin ta gitweb configuration:
.sp
.if n \{\
.RS 4
.\}
.nf
our %highlight_ext;
$highlight_ext{\(aqphtml\(aq} = \(aqphp\(aq;
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SS "Links n' they targets"
.sp
Da configuration variablez busted lyrics bout below configure a shitload of gitweb links: they target n' they look (text or image), n' where ta find page prerequisites (stylesheet, favicon, images, scripts)\&. Usually they is left at they default joints, wit tha possible exception of @stylesheets variable\&.
.PP
@stylesheets
.RS 4
List of URIz of stylesheets (relatizzle ta tha base URI of a page)\&. Yo ass might specify mo' than one stylesheet, fo' example ta use "gitweb\&.css" as base wit joint specific modifications up in a separate styleshizzle ta make it easier ta upgrade gitweb\&. For example, you can add a
site
styleshizzle by putting
.sp
.if n \{\
.RS 4
.\}
.nf
push @stylesheets, "gitweb\-site\&.css";
.fi
.if n \{\
.RE
.\}
.sp
in tha gitweb config file\&. Those joints dat is relatizzle paths is relatizzle ta base URI of gitweb\&.
.sp
This list should contain tha URI of gitweb\(cqs standard stylesheet\&. Da default URI of gitweb styleshizzle can be set at build time rockin the
GITWEB_CSS
makefile variable\&. Its default value is
\fIstatic/gitweb\&.css\fR
(or
\fIstatic/gitweb\&.min\&.css\fR
if the
CSSMIN
variable is defined, i\&.e\&. if CSS minifier is used durin build)\&.
.sp
\fBNote\fR: there be also a legacy
$stylesheet
configuration variable, which was used by olda gitweb\&. If
$stylesheet
variable is defined, only CSS styleshizzle given by dis variable is used by gitweb\&.
.RE
.PP
$logo
.RS 4
Points ta tha location where you put
\fIgit\-logo\&.png\fR
on yo' wizzy server, or ta be mo' tha generic URI of logo, 72x27 size)\&. This image is displayed up in tha top right corner of each gitweb page n' used as a logo fo' tha Atom feed\&. Relatizzle ta tha base URI of gitweb (as a path)\&. Can be adjusted when buildin gitweb using
GITWEB_LOGO
variable By default set to
\fIstatic/git\-logo\&.png\fR\&.
.RE
.PP
$favicon
.RS 4
Points ta tha location where you put
\fIgit\-favicon\&.png\fR
on yo' wizzy server, or ta be mo' tha generic URI of favicon, which is ghon be served as "image/png" type\&. Web browsers dat support favicons (website icons) may display dem up in tha browser\(cqs URL bar n' next ta tha joint name up in bookmarks\&. Relatizzle ta tha base URI of gitweb\&. Can be adjusted at build time using
GITWEB_FAVICON
variable\&. By default set to
\fIstatic/git\-favicon\&.png\fR\&.
.RE
.PP
$javascript
.RS 4
Points ta tha location where you put
\fIgitweb\&.js\fR
on yo' wizzy server, or ta be mo' generic tha URI of JavaScript code used by gitweb\&. Relatizzle ta tha base URI of gitweb\&. Can be set at build time rockin the
GITWEB_JS
build\-time configuration variable\&.
.sp
Da default value is either
\fIstatic/gitweb\&.js\fR, or
\fIstatic/gitweb\&.min\&.js\fR
if the
JSMIN
build variable was defined, i\&.e\&. if JavaScript minifier was used at build time\&.
\fBNote\fR
that dis single file is generated from multiple individual JavaScript "modules"\&.
.RE
.PP
$home_link
.RS 4
Target of tha home link on tha top of all pages (the first part of view "breadcrumbs")\&. By default it is set ta tha absolute URI of a cold-ass lil current page (to tha value of
$my_uri
variable, or ta "/" if
$my_uri
is undefined or be a empty string)\&.
.RE
.PP
$home_link_str
.RS 4
Label fo' tha "home link" all up in tha top of all pages, leadin to
$home_link
(usually tha main gitweb page, which gotz nuff tha projects list)\&. Well shiiiit, it is used as tha straight-up original gangsta component of gitweb\(cqs "breadcrumb trail":
<home link> / <project> / <action>\&. Can be set at build time rockin the
GITWEB_HOME_LINK_STR
variable\&. By default it is set ta "projects", as dis link leadz ta tha list of projects\& fo' realz. Another ghettofab chizzle is ta set it ta tha name of crib\&. Note dat it is treated as raw HTML so it should not be set from untrusted sources\&.
.RE
.PP
@extra_breadcrumbs
.RS 4
Additionizzle links ta be added ta tha start of tha breadcrumb trail before tha home link, ta pages dat is logically "above" tha gitweb projects list, like fuckin tha organization n' department which host tha gitweb server\&. Each element of tha list be a reference ta a array, up in which element 0 is tha link text (equivalent to
$home_link_str) n' element 1 is tha target URL (equivalent to
$home_link)\&.
.sp
For example, tha followin settin produces a funky-ass breadcrumb trail like "home / dev / projects / \&..." where "projects" is tha home link\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
    our @extra_breadcrumbs = (
      [ \(aqhome\(aq => \(aqhttps://www\&.example\&.org/\(aq ],
      [ \(aqdev\(aq  => \(aqhttps://dev\&.example\&.org/\(aq ],
    );
.fi
.if n \{\
.RE
.\}
.sp

.PP
$logo_url, $logo_label
.RS 4
URI n' label (title) fo' tha Git logo link (or yo' joint logo, if you chose ta use different logo image)\&. By default, these both refer ta Git homepage,
\m[blue]\fBhttp://git\-scm\&.com\fR\m[]; up in tha past, they pointed ta Git documentation at
\m[blue]\fBhttp://www\&.kernel\&.org\fR\m[]\&.
.RE
.SS "Changin gitweb\(cqs look"
.sp
Yo ass can adjust how tha fuck pages generated by gitweb look rockin tha variablez busted lyrics bout below\&. Yo ass can chizzle tha joint name, add common headaz n' footas fo' all pages, n' add a thugged-out description of dis gitweb installation on its main page (which is tha projects list page), etc\&.
.PP
$site_name
.RS 4
Name of yo' joint or organization, ta step tha fuck up in page titles\&. Right back up in yo muthafuckin ass. Set it ta suttin' descriptizzle fo' clearer bookmarks etc\&. If dis variable aint set or is, then gitweb uses tha value of the
SERVER_NAME
CGI environment variable, settin joint name ta "$SERVER_NAME Git", or "Untitled Git" if dis variable aint set (e\&.g\&. if hustlin gitweb as standalone script)\&.
.sp
Can be set rockin the
GITWEB_SITENAME
at build time\&. Unset by default\&.
.RE
.PP
$site_html_head_string
.RS 4
HTML snippet ta be included up in tha <head> section of each page\&. Can be set using
GITWEB_SITE_HTML_HEAD_STRING
at build time\&. No default value\&.
.RE
.PP
$site_header
.RS 4
Name of a gangbangin' file wit HTML ta be included all up in tha top of each page\&. Relatizzle ta tha directory containin the
\fIgitweb\&.cgi\fR
script\&. Can be set using
GITWEB_SITE_HEADER
at build time\&. No default value\&.
.RE
.PP
$site_footer
.RS 4
Name of a gangbangin' file wit HTML ta be included all up in tha bottom of each page\&. Relatizzle ta tha directory containin the
\fIgitweb\&.cgi\fR
script\&. Can be set using
GITWEB_SITE_FOOTER
at build time\&. No default value\&.
.RE
.PP
$home_text
.RS 4
Name of a HTML file which, if it exists, is included on tha gitweb projects overview page ("projects_list" view)\&. Relatizzle ta tha directory containin tha gitweb\&.cgi script\&. Default value can be adjusted durin build time using
GITWEB_HOMETEXT
variable\&. By default set to
\fIindextext\&.html\fR\&.
.RE
.PP
$projects_list_description_width
.RS 4
Da width (in characters) of tha "Description" column of tha projects list\&. Longer descriptions is ghon be truncated (tryin ta cut at word boundary); tha full description be available up in the
\fItitle\fR
attribute (usually shown on mouseover)\&. Da default is 25, which might be too lil' small-ass if you use long project descriptions\&.
.RE
.PP
$default_projects_order
.RS 4
Default value of orderin of projects on projects list page, which means tha orderin used if you don\(cqt explicitly sort projects list (if there is no "o" CGI query parameta up in tha URL)\&. Valid joints is "none" (unsorted), "project" (projects is by project name, i\&.e\&. path ta repository relatizzle to
$projectroot), "descr" (project description), "baller", n' "age" (by date of most current commit)\&.
.sp
Default value is "project"\&. Unknown value means unsorted\&.
.RE
.SS "Changin gitweb\(cqs behavior"
.sp
These configuration variablez control \fIinternal\fR gitweb behavior\&.
.PP
$default_blob_plain_mimetype
.RS 4
Default mimetype fo' tha blob_plain (raw) view, if mimetype checkin don\(cqt result up in some other type; by default "text/plain"\&. Gitweb guesses mimetype of a gangbangin' file ta display based on extension of its filename, using
$mimetypes_file
(if set n' file exists) and
\fI/etc/mime\&.types\fR
filez (see
\fBmime\&.types\fR(5) manpage; only filename extension rulez is supported by gitweb)\&.
.RE
.PP
$default_text_plain_charset
.RS 4
Default charset fo' text files\&. If dis aint set, tha wizzy server configuration is ghon be used\&. Unset by default\&.
.RE
.PP
$fallback_encoding
.RS 4
Gitweb assumes dis charset when a line gotz nuff non\-UTF\-8 characters\&. Da fallback decodin is used without error checking, so it can be even "utf\-8"\&. Da value must be a valid encoding; peep the
\fBEncoding::Supported\fR(3pm) playa page fo' a list\&. Da default is "latin1", aka\&. "iso\-8859\-1"\&.
.RE
.PP
@diff_opts
.RS 4
Rename detection options fo' git\-diff n' git\-diff\-tree\&. Da default is (\(aq\-M\(aq); set it ta (\(aq\-C\(aq) or (\(aq\-C\(aq, \(aq\-C\(aq) ta also detect copies, or set it ta () i\&.e\&. empty list if you don\(cqt wanna have renames detection\&.
.sp
\fBNote\fR
that rename n' especially copy detection can be like CPU\-intensive\&. Note also dat non Git tools can have problems wit patches generated wit options mentioned above, especially when they involve file copies (\(aq\-C\(aq) or criss\-cross renames (\(aq\-B\(aq)\&.
.RE
.SS "Some optionizzle features n' policies"
.sp
Most of features is configured via %feature hash; however a shitload of extra gitweb features can be turned on n' configured rockin variablez busted lyrics bout below\&. This list beside configuration variablez dat control how tha fuck gitweb looks do contain variablez configurin administratizzle side of gitweb (e\&.g\&. cross\-site scriptin prevention; admittedly dis as side effect affects how tha fuck "summary" pages look like, or load limiting)\&.
.PP
@git_base_url_list
.RS 4
List of Git base URLs\&. These URLs is used ta generate URLs describin from where ta fetch a project, which is shown on project summary page\&. Da full fetch URL is "$git_base_url/$project", fo' each element of dis list\&. Yo ass can set up multiple base URLs (for example one for
git://
protocol, n' one for
http://
protocol)\&.
.sp
Note dat per repository configuration can be set in
\fI$GIT_DIR/cloneurl\fR
file, or as jointz of multi\-value
gitweb\&.url
configuration variable up in project config\&. Per\-repository configuration takes precedence over value composed from
@git_base_url_list
elements n' project name\&.
.sp
Yo ass can setup one single value (single entry/item up in dis list) at build time by settin the
GITWEB_BASE_URL
built\-time configuration variable\&. By default it is set ta (), i\&.e\&. a empty list\&. This means dat gitweb would not try ta create project URL (to fetch) from project name\&.
.RE
.PP
$projects_list_group_categories
.RS 4
Whether ta enablez tha groupin of projects by category on tha project list page\&. Da category of a project is determined by the
$GIT_DIR/category
file or the
gitweb\&.category
variable up in each repository\(cqs configuration\&. Disabled by default (set ta 0)\&.
.RE
.PP
$project_list_default_category
.RS 4
Default category fo' projects fo' which none is specified\&. If dis is set ta tha empty string, such projects will remain uncategorized n' listed all up in tha top, above categorized projects\&. Used only if project categories is enabled, which means if
$projects_list_group_categories
is true\&. By default set ta "" (empty string)\&.
.RE
.PP
$prevent_xss
.RS 4
If true, some gitweb features is disabled ta prevent content up in repositories from launchin cross\-site scriptin (XSS) attacks\&. Right back up in yo muthafuckin ass. Set dis ta legit if you don\(cqt trust tha content of yo' repositories\&. False by default (set ta 0)\&.
.RE
.PP
$maxload
.RS 4
Used ta set tha maximum load dat we will still respond ta gitweb queries\&. If tha server load exceedz dis value then gitweb will return "503 Service Unavailable" error\&. Da server load is taken ta be 0 if gitweb cannot determine its value\&. Currently it works only on Linux, where it uses
\fI/proc/loadavg\fR; tha load there is tha number of actizzle tasks on tha system \(em processes dat is straight-up hustlin \(em averaged over tha last minute\&.
.sp
Set
$maxload
to undefined value (undef) ta turn dis feature off\&. Da default value is 300\&.
.RE
.PP
$omit_age_column
.RS 4
If true, omit tha column wit date of da most thugged-out current commit on tha projects list page\&. Well shiiiit, it can save a lil' bit of I/O n' a gangbangin' fork per repository\&.
.RE
.PP
$omit_baller
.RS 4
If legit prevents displayin shiznit bout repository baller\&.
.RE
.PP
$per_request_config
.RS 4
If dis is set ta code reference, it is ghon be run once fo' each request\&. Yo ass can set partz of configuration dat chizzle per session dis way\&. For example, one might use tha followin code up in a gitweb configuration file
.sp
.if n \{\
.RS 4
.\}
.nf
our $per_request_config = sub {
        $ENV{GL_USER} = $cgi\->remote_user || "gitweb";
};
.fi
.if n \{\
.RE
.\}
.sp
If
$per_request_config
is not a cold-ass lil code reference, it is interpreted as boolean value\&. If it is legit gitweb will process config filez once per request, n' if it is false gitweb will process config filez only once, each time it is executed\&. True by default (set ta 1)\&.
.sp
\fBNOTE\fR:
$my_url,
$my_uri, and
$base_url
are overwritten wit they default joints before every last muthafuckin request, so if you wanna chizzle them, be shizzle ta set dis variable ta legit or a cold-ass lil code reference effectin tha desired chizzles\&.
.sp
This variable mattas only when rockin persistent wizzy environments dat serve multiple requests rockin single gitweb instance, like mod_perl, FastCGI or Plackup\&.
.RE
.SS "Other variables"
.sp
Usually you should not need ta chizzle (adjust) any of configuration variablez busted lyrics bout below; they should be automatically set by gitweb ta erect value\&.
.PP
$version
.RS 4
Gitweb version, set automatically when bustin gitweb\&.cgi from gitweb\&.perl\&. Yo ass might wanna modify it if yo ass is hustlin modified gitweb, fo' example
.sp
.if n \{\
.RS 4
.\}
.nf
our $version \&.= " wit caching";
.fi
.if n \{\
.RE
.\}
.sp
if you run modified version of gitweb wit cachin support\&. This variable is purely shiznital, used e\&.g\&. up in tha "generator" meta header up in HTML header\&.
.RE
.PP
$my_url, $my_uri
.RS 4
Full URL n' absolute URL of tha gitweb script; up in earlier versionz of gitweb you might have need ta set dem variablez yo, but now there should be no need ta do it\&. Right back up in yo muthafuckin ass. See
$per_request_config
if you need ta set dem still\&.
.RE
.PP
$base_url
.RS 4
Base URL fo' relatizzle URLs up in pages generated by gitweb, (e\&.g\&.
$logo,
$favicon,
@stylesheets
if they is relatizzle URLs), needed n' used
\fI<base href="$base_url">\fR
only fo' URLs wit nonempty PATH_INFO\&. Usually gitweb sets its value erectly, n' there is no need ta set dis variable, e\&.g\&. ta $my_uri or "/"\&. Right back up in yo muthafuckin ass. See
$per_request_config
if you need ta override it anyway\&.
.RE
.SH "CONFIGURING GITWEB FEATURES"
.sp
Many gitweb features can be enabled (or disabled) n' configured rockin tha %feature hash\&. Namez of gitweb features is keyz of dis hash\&.
.sp
Each %feature hash element be a hash reference n' has tha followin structure:
.sp
.if n \{\
.RS 4
.\}
.nf
"<feature_name>" => {
        "sub" => <feature\-sub (subroutine)>,
        "override" => <allow\-override (boolean)>,
        "default" => [ <options>\&.\&.\&. ]
},
.fi
.if n \{\
.RE
.\}
.sp
.sp
Some features cannot be overridden per project\&. For dem features tha structure of appropriate %feature hash element has a simpla form:
.sp
.if n \{\
.RS 4
.\}
.nf
"<feature_name>" => {
        "override" => 0,
        "default" => [ <options>\&.\&.\&. ]
},
.fi
.if n \{\
.RE
.\}
.sp
.sp
As one can peep it lacks tha \(aqsub\(aq element\&.
.sp
Da meanin of each part of feature configuration is busted lyrics bout below:
.PP
default
.RS 4
List (array reference) of feature parametas (if there be any), used also ta toggle (enable or disable) given feature\&.
.sp
Note dat it is currently
\fBalways\fR
an array reference, even if feature don\(cqt accept any configuration parameters, n' \(aqdefault\(aq is used only ta turn it on or off\&. In such case you turn feature on by settin dis element to
[1], n' torn it off by settin it to
[0]\&. Right back up in yo muthafuckin ass. See also tha passage bout tha "blame" feature up in tha "Examples" section\&.
.sp
To disable features dat accept parametas (are configurable), you need ta set dis element ta empty list i\&.e\&.
[]\&.
.RE
.PP
override
.RS 4
If dis field has a legit value then tha given feature is overridable, which means dat it can be configured (or enabled/disabled) on a per\-repository basis\&.
.sp
Usually given "<feature>" is configurable via the
gitweb\&.<feature>
config variable up in tha per\-repository Git configuration file\&.
.sp
\fBNote\fR
that no feature is overridable by default\&.
.RE
.PP
sub
.RS 4
Internal detail of implementation\&. What tha fuck iz blingin is dat if dis field aint present then per\-repository override fo' given feature aint supported\&.
.sp
Yo ass wouldn\(cqt need ta eva chizzle it up in gitweb config file\&.
.RE
.SS "Features up in %feature"
.sp
Da gitweb features dat is configurable via %feature hash is listed below\&. This should be a cold-ass lil complete list yo, but ultimately tha authoritatizzle n' complete list is up in gitweb\&.cgi source code, wit features busted lyrics bout up in tha comments\&.
.PP
blame
.RS 4
Enable tha "blame" n' "blame_incremental" blob views, showin fo' each line tha last commit dat modified it; see
\fBgit-blame\fR(1)\&. This can be straight-up CPU\-intensive n' is therefore disabled by default\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.blame
configuration variable (boolean)\&.
.RE
.PP
snapshot
.RS 4
Enable n' configure tha "snapshot" action, which allows user ta downlizzle a cold-ass lil compressed archive of any tree or commit, as produced by
\fBgit-archive\fR(1)
and possibly additionally compressed\&. This can potentially generate high traffic if you have big-ass project\&.
.sp
Da value of \(aqdefault\(aq be a list of namez of snapshot formats, defined in
%known_snapshot_formats
hash, dat you wish ta offer\&. Right back up in yo muthafuckin ass. Supported formats include "tgz", "tbz2", "txz" (gzip/bzip2/xz compressed tar archive) n' "zip"; please consult gitweb sources fo' a thugged-out definitizzle list\&. By default only "tgz" is offered\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.blame
configuration variable, which gotz nuff a cold-ass lil comma separated list of formats or "none" ta disable snapshots\&. Unknown joints is ignored\&.
.RE
.PP
grep
.RS 4
Enable grep search, which lists tha filez up in currently selected tree (directory) containin tha given string; see
\fBgit-grep\fR(1)\&. This can be potentially CPU\-intensive, of course\&. Enabled by default\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.grep
configuration variable (boolean)\&.
.RE
.PP
pickaxe
.RS 4
Enable tha so called pickaxe search, which will list tha commits dat introduced or removed a given strang up in a gangbangin' file\&. This can be practical n' like fasta alternatizzle ta "blame" action yo, but it is still potentially CPU\-intensive\&. Enabled by default\&.
.sp
Da pickaxe search is busted lyrics bout in
\fBgit-log\fR(1)
(the description of
\-S<string>
option, which refers ta pickaxe entry in
\fBgitdiffcore\fR(7)
for mo' details)\&.
.sp
This feature can be configured on a per\-repository basis by settin repository\(cqs
gitweb\&.pickaxe
configuration variable (boolean)\&.
.RE
.PP
show\-sizes
.RS 4
Enable showin size of blobs (ordinary files) up in a "tree" view, up in a separate column, similar ta what
ls \-l
does; peep description of
\-l
option in
\fBgit-ls-tree\fR(1)
manpage\&. This costs a lil' bit of I/O\&. Enabled by default\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.showsizes
configuration variable (boolean)\&.
.RE
.PP
patches
.RS 4
Enable n' configure "patches" view, which displays list of commits up in email (plain text) output format; peep also
\fBgit-format-patch\fR(1)\&. Da value is tha maximum number of patches up in a patchset generated up in "patches" view\&. Right back up in yo muthafuckin ass. Set the
\fIdefault\fR
field ta a list containin single item of or ta a empty list ta disable patch view, or ta a list containin a single wack number ta remove any limit\&. Default value is 16\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.patches
configuration variable (integer)\&.
.RE
.PP
avatar
.RS 4
Avatar support\&. When dis feature is enabled, views like fuckin "shortlog" or "commit" will display a avatar associated wit tha email of each committa n' author\&.
.sp
Currently available providaz are
\fB"gravatar"\fR
and
\fB"picon"\fR\&. Only one provider at a time can be selected (\fIdefault\fR
is one element list)\&. If a unknown provider is specified, tha feature is disabled\&.
\fBNote\fR
that some providaz might require extra Perl packages ta be installed; see
\fIgitweb/INSTALL\fR
for mo' details\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.avatar
configuration variable\&.
.sp
See also
%avatar_size
with pixel sizes fo' icons n' avatars ("default" is used fo' one\-line like "log" n' "shortlog", "double" is used fo' two\-line like "commit", "commitdiff" or "tag")\&. If tha default font sizes or lineheights is chizzled (e\&.g\&. via addin extra CSS styleshizzle in
@stylesheets), it may be appropriate ta chizzle these joints\&.
.RE
.PP
highlight
.RS 4
Server\-side syntax highlight support up in "blob" view\&. Well shiiiit, it requires
$highlight_bin
program ta be available (see tha description of dis variable up in tha "Configuration variables" section above), n' therefore is disabled by default\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.highlight
configuration variable (boolean)\&.
.RE
.PP
remote_heads
.RS 4
Enable displayin remote headz (remote\-trackin branches) up in tha "heads" list\&. In most cases tha list of remote\-trackin branches be a unnecessary internal private detail, n' dis feature is therefore disabled by default\&.
\fBgit-instaweb\fR(1), which is probably used ta browse local repositories, enablez n' uses dis feature\&.
.sp
This feature can be configured on a per\-repository basis via repository\(cqs
gitweb\&.remote_heads
configuration variable (boolean)\&.
.RE
.sp
Da remainin features cannot be overridden on a per project basis\&.
.PP
search
.RS 4
Enable text search, which will list tha commits which match lyricist, committa or commit text ta a given string; peep tha description of
\-\-lyricist,
\-\-committer
and
\-\-grep
options in
\fBgit-log\fR(1)
manpage\&. Enabled by default\&.
.sp
Project specific override aint supported\&.
.RE
.PP
forks
.RS 4
If dis feature is enabled, gitweb considaz projects up in subdirectoriez of project root (basename) ta be forkz of existin projects\&. For each project
$projname\&.git, projects up in the
$projname/
directory n' its subdirectories aint gonna be shown up in tha main projects list\&. Instead, a \(aq+\(aq mark is shown next to
$projname, which links ta a "forks" view dat lists all tha forks (all projects in
$projname/
subdirectory)\& fo' realz. Additionally a "forks" view fo' a project is linked from project summary page\&.
.sp
If tha project list is taken from a gangbangin' file ($projects_list
points ta a gangbangin' file), forks is only recognized if they is listed afta tha main project up in dat file\&.
.sp
Project specific override aint supported\&.
.RE
.PP
actions
.RS 4
Insert custom links ta tha action bar of all project pages\&. This allows you ta link ta third\-party scripts integratin tha fuck into gitweb\&.
.sp
Da "default" value consistz of a list of triplets up in tha form \(oq("<label>", "<link>", "<position>")` where "position" is tha label afta which ta bang tha link, "link" be a gangbangin' format strang where
%n
expandz ta tha project name,
%f
to tha project path within tha filesystem (i\&.e\&. "$projectroot/$project"),
%h
to tha current hash (\(aqh\(cq gitweb parameter) n' \(oq%b` ta tha current hash base (\(aqhb\(cq gitweb parameter); \(oq%%` expandz ta \(aq%\(cq\&.
.sp
For example, all up in tha time dis page was written, the
\m[blue]\fBhttp://repo\&.or\&.cz\fR\m[]
Git hostin joint set it ta tha followin ta enable graphical log (usin tha third jam tool
\fBgit\-browser\fR):
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqactions\(aq}{\(aqdefault\(aq} =
        [ (\(aqgraphiclog\(aq, \(aq/git\-browser/by\-commit\&.html?r=%n\(aq, \(aqsummary\(aq)];
.fi
.if n \{\
.RE
.\}
.sp
This addz a link titled "graphiclog" afta tha "summary" link, leadin to
git\-browser
script, passing
r=<project>
as a query parameter\&.
.sp
Project specific override aint supported\&.
.RE
.PP
timed
.RS 4
Enable displayin how tha fuck much time n' how tha fuck nuff Git commandz it took ta generate n' display each page up in tha page foota (at tha bottom of page)\&. For example tha foota might contain: "This page took 6\&.53325 secondz n' 13 Git commandz ta generate\&." Disabled by default\&.
.sp
Project specific override aint supported\&.
.RE
.PP
javascript\-timezone
.RS 4
Enable n' configure tha mobilitizzle ta chizzle a cold-ass lil common time unit fo' dates up in gitweb output via JavaScript\&. Dates up in gitweb output include authordate n' committerdate up in "commit", "commitdiff" n' "log" views, n' taggerdate up in "tag" view\&. Enabled by default\&.
.sp
Da value be a list of three joints: a thugged-out default time unit (for if tha client hasn\(cqt selected some other time unit n' saved it up in a cold-ass lil cookie), a name of cookie where ta store selected time unit, n' a CSS class used ta mark up dates fo' manipulation\&. If you wanna turn dis feature off, set "default" ta empty list:
[]\&.
.sp
Typical gitweb config filez will only chizzle startin (default) time unit, n' leave other elements at they default joints:
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqjavascript\-timezone\(aq}{\(aqdefault\(aq}[0] = "utc";
.fi
.if n \{\
.RE
.\}
.sp
Da example configuration presented here is guaranteed ta be backwardz n' forward compatible\&.
.sp
Time unit joints can be "local" (for local time unit dat browser uses), "utc" (what gitweb uses when JavaScript or dis feature is disabled), or numerical time units up in tha form of "+/\-HHMM", like fuckin "+0200"\&.
.sp
Project specific override aint supported\&.
.RE
.PP
extra\-branch\-refs
.RS 4
List of additionizzle directories under "refs" which is goin ta be used as branch refs\&. For example if you gotz a gerrit setup where all branches under refs/heads/ is official, push\-after\-review ones n' branches under refs/sandbox/, refs/wip n' refs/other is user ones where permissions is much wider, then you might wanna set dis variable as bigs up:
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqextra\-branch\-refs\(aq}{\(aqdefault\(aq} =
        [\(aqsandbox\(aq, \(aqwip\(aq, \(aqother\(aq];
.fi
.if n \{\
.RE
.\}
.sp
This feature can be configured on per\-repository basis afta settin $feature{\fIextra\-branch\-refs\fR}{\fIoverride\fR} ta true, via repository\(cqs
gitweb\&.extraBranchRefs
configuration variable, which gotz nuff a space separated list of refs\& fo' realz. An example:
.sp
.if n \{\
.RS 4
.\}
.nf
[gitweb]
        extraBranchRefs = sandbox wip other
.fi
.if n \{\
.RE
.\}
.sp
Da gitweb\&.extraBranchRefs is straight-up a multi\-valued configuration variable, so followin example be also erect n' tha result is tha same ol' dirty az of tha snippet above:
.sp
.if n \{\
.RS 4
.\}
.nf
[gitweb]
        extraBranchRefs = sandbox
        extraBranchRefs = wip other
.fi
.if n \{\
.RE
.\}
.sp
It be a error ta specify a ref dat do not pass "git check\-ref\-format" scrutiny\&. Duplicated joints is filtered\&.
.RE
.SH "EXAMPLES"
.sp
To enable blame, pickaxe search, n' snapshot support (allowin "tar\&.gz" n' "zip" snapshots), while allowin individual projects ta turn dem off, put tha followin up in yo' GITWEB_CONFIG file:
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqblame\(aq}{\(aqdefault\(aq} = [1];
$feature{\(aqblame\(aq}{\(aqoverride\(aq} = 1;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqpickaxe\(aq}{\(aqdefault\(aq} = [1];
$feature{\(aqpickaxe\(aq}{\(aqoverride\(aq} = 1;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$feature{\(aqsnapshot\(aq}{\(aqdefault\(aq} = [\(aqzip\(aq, \(aqtgz\(aq];
$feature{\(aqsnapshot\(aq}{\(aqoverride\(aq} = 1;
.fi
.if n \{\
.RE
.\}
.sp
If you allow overridin fo' tha snapshot feature, you can specify which snapshot formats is globally disabled\&. Yo ass can also add any command line options you want (like fuckin settin tha compression level)\&. For instance, you can disable Zip compressed snapshots n' set \fBgzip\fR(1) ta run at level 6 by addin tha followin lines ta yo' gitweb configuration file:
.sp
.if n \{\
.RS 4
.\}
.nf
$known_snapshot_formats{\(aqzip\(aq}{\(aqdisabled\(aq} = 1;
$known_snapshot_formats{\(aqtgz\(aq}{\(aqcompressor\(aq} = [\(aqgzip\(aq,\(aq\-6\(aq];
.fi
.if n \{\
.RE
.\}
.SH "BUGS"
.sp
Debuggin would be easier if tha fallback configuration file (/etc/gitweb\&.conf) n' environment variable ta override its location (\fIGITWEB_CONFIG_SYSTEM\fR) had names reflectin they "fallback" role\&. Da current names is kept ta avoid breakin hustlin setups\&.
.SH "ENVIRONMENT"
.sp
Da location of per\-instizzle n' system\-wide configuration filez can be overridden rockin tha followin environment variables:
.PP
GITWEB_CONFIG
.RS 4
Sets location of per\-instizzle configuration file\&.
.RE
.PP
GITWEB_CONFIG_SYSTEM
.RS 4
Sets location of fallback system\-wide configuration file\&. This file is read only if per\-instizzle one do not exist\&.
.RE
.PP
GITWEB_CONFIG_COMMON
.RS 4
Sets location of common system\-wide configuration file\&.
.RE
.SH "FILES"
.PP
gitweb_config\&.perl
.RS 4
This is default name of per\-instizzle configuration file\&. Da format of dis file is busted lyrics bout above\&.
.RE
.PP
/etc/gitweb\&.conf
.RS 4
This is default name of fallback system\-wide configuration file\&. This file is used only if per\-instizzle configuration variable aint found\&.
.RE
.PP
/etc/gitweb\-common\&.conf
.RS 4
This is default name of common system\-wide configuration file\&.
.RE
.SH "SEE ALSO"
.sp
\fBgitweb\fR(1), \fBgit-instaweb\fR(1)
.sp
\fIgitweb/README\fR, \fIgitweb/INSTALL\fR
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
