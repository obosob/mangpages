.\" Yo Emacs muthafucka! This file is -*- nroff -*- source.
.\"
.\" Author: Eamon Walsh (ewalsh@tycho.nsa.gov) 2007
.TH "selabel_x" "5" "29 Nov 2011" "Securitizzle Enhanced Linux" "SELinux API documentation"
.SH "NAME"
selabel_x \- userspace SELinux labelin intercourse n' configuration file format fo' tha X Window System contexts backend yo, but it ain't no stoppin cause I be still poppin'. This backend be also used ta determine tha default context fo' labelin remotely connected X clients
.
.SH "SYNOPSIS"
.B #include <selinux/label.h>
.sp
.BI "int selabel_lookup(struct selabel_handle *" hnd ,
.in +\w'int selabel_lookup('u
.BI "security_context_t *" context ,
.br
.BI "const char *" object_name ", int " object_type ");"
.in
.sp
.BI "int selabel_lookup_raw(struct selabel_handle *" hnd ,
.in +\w'int selabel_lookup('u
.BI "security_context_t *" context ,
.br
.BI "const char *" object_name ", int " object_type ");"
.
.SH "DESCRIPTION"
Da X contexts backend maps from X Window System object names tha fuck into securitizzle contexts, n' you can put dat on yo' toast. Well shiiiit, it is used ta find tha appropriate context fo' X Window System objects whose significizzle and/or usage semantics is determined primarily by name. Da returned \fIcontext\fR must be freed rockin \fBfreecon\fR(3).
.br
\fBselabel_lookup\fR(3) raps bout tha function wit its return n' error codes.
.sp
This backend be also used ta determine tha default context fo' labelin remotely connected X clients.
.sp
Da \fIobject_type\fR argument should be set ta one of tha followin joints:
.RS
.TP
.B SELABEL_X_PROP
The
.I object_name
argument specifies tha name of a window property, like fuckin "WM_NAME".
.TP
.B SELABEL_X_SELN
The
.I object_name
argument specifies tha name of a selection, like fuckin "PRIMARY".
.TP
.B SELABEL_X_EXT
The
.I object_name
argument specifies tha name of a protocol extension, like fuckin "RENDER".
.TP
.B SELABEL_X_EVENT
The
.I object_name
argument specifies tha name of a event type, like fuckin "X11:ButtonPress".
.TP
.B SELABEL_X_CLIENT
The
.I object_name
argument is ignored, however it should be set ta either \fI*\fR (an asterisk or 'wildcard' dat will select tha default entry) or a specific entry like fuckin "remote" up in tha X contexts file as shown up in tha \fBEXAMPLE\fR section. I aint talkin' bout chicken n' gravy biatch. Da default context fo' labelin remote X clients is then returned.
.TP
.B SELABEL_X_POLYPROP
Like
.BR SELABEL_X_PROP ,
but checks if tha property was marked as bein polyinstantiated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. See \fBNOTES\fR below.
.TP
.B SELABEL_X_POLYSELN
Like
.BR SELABEL_X_SELN ,
but checks if tha selection was marked as bein polyinstantiated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. See \fBNOTES\fR below.
.RE
.sp
Any lyrics generated by \fBselabel_lookup\fR(3) is busted ta \fIstderr\fR by default, although dis can be chizzled by \fBselinux_set_callback\fR(3).
.sp
.B selabel_lookup_raw
behaves identically ta \fBselabel_lookup\fR but do not big-ass up context translation.
.sp
Da \fBFILES\fR section details tha configuration filez used ta determine tha X object context.
.
.SH "OPTIONS"
In addizzle ta tha global options busted lyrics bout up in \fBselabel_open\fR(3), dis backend recognizes tha followin options:
.RS
.TP
.B SELABEL_OPT_PATH
A non-null value fo' dis option specifies a path ta a gangbangin' file dat is ghon be opened up in lieu of tha standard X contexts file (see tha \fBFILES\fR section fo' details).
.RE
.
.SH "FILES"
Da X context file used ta retrieve a thugged-out default context dependz on tha \fBSELABEL_OPT_PATH\fR parameta passed ta \fBselabel_open\fR(3). If \fINULL\fR, then tha \fBSELABEL_OPT_PATH\fR value will default ta tha actizzle policy X contexts location (as returned by \fBselinux_x_context_path\fR(3)), otherwise tha actual \fBSELABEL_OPT_PATH\fR value specified is used.
.sp
Da default X object contexts file is:
.RS
.I /etc/selinux/{SELINUXTYPE}/contexts/x_contexts
.RE
.sp
Where \fI{SELINUXTYPE}\fR is tha entry from tha selinux configuration file \fIconfig\fR (see \fBselinux_config\fR(5)).
.sp
Da entries within tha X contexts file is shown up in tha \fBObject Name Strin Values\fR n' \fBFILE FORMAT\fR sections.
.
.SH "Object Name Strin Values"
Da strang name assigned ta each \fIobject_type\fR argument dat can be present up in tha X contexts file are:
.TS
center, allbox, tab(@);
lI lB
lB l .
object_type@Text Name
SELABEL_X_PROP@property
SELABEL_X_SELN@selection
SELABEL_X_EXT@extension
SELABEL_X_EVENT@event
SELABEL_X_CLIENT@client
SELABEL_X_POLYPROP@poly_property
SELABEL_X_POLYSELN@poly_selection
.TE
.
.SH "FILE FORMAT"
Each line within tha X contexts file be as bigs up:
.RS
.I object_type object_name context
.RE
.sp
Where:
.RS
.I object_type
.RS
This is tha strang representation of tha object type shown up in tha \fBObject Name Strin Values\fR section.
There can be multiple lines wit tha same \fIobject_type\fR strang dat will form a funky-ass block of entries (each wit a gangbangin' finger-lickin' different \fIobject_name\fR entry).
.RE
.I object_name
.RS
These is tha object namez of tha specific X-server resource such as
\fBPRIMARY\fR, \fBCUT_BUFFER0\fR etc. They is generally defined up in the
X-server source code (\fIprotocol.txt\fR n' \fIBuiltInAtoms\fR up in the
dix directory of tha xorg\-server source package).
Da entry can contain '*' fo' wildcard matchin or '?' fo' substitution.
Note dat if tha '*' is used, then be aware dat tha order of entries up in tha file is blingin. Da '*' on its own is used ta ensure a thugged-out default fallback context be assigned n' should be tha last entry up in tha \fIobject_type\fR block.
.RE
.I context
.RS
Da securitizzle context dat is ghon be applied ta tha object.
.RE
.RE
.sp
Example 1:
.sp
.nf
# object_type  object_name  context
selection      PRIMARY      system_u:object_r:clipboard_xselection_t:s0
selection      *            system_u:object_r:xselection_t:s0
.fi
.sp
Example 2 - This example shows how tha fuck a cold-ass lil client entry can be configured to
ensure a entry be always found:
.sp
.nf
# object_type  object_name  context
client         *            system_u:object_r:remote_t:s0
.fi
.
.SH "NOTES"
.IP "1." 4
Propertizzles n' selections is marked as either polyinstantiated or not. For these name types, tha "POLY" option searches only tha names marked as bein polyinstantiated, while tha other option searches only tha names marked as not bein polyinstantiated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Userz of tha intercourse should check both mappings, optionally takin action based on tha result (e.g. polyinstantiatin tha object).
.IP "2." 4
If contexts is ta be validated, then tha global option \fBSELABEL_OPT_VALIDATE\fR must be set before callin \fBselabel_open\fR(3). If dis aint set, then it is possible fo' a invalid context ta be returned.
.
.SH "SEE ALSO"
.ad l
.nh
.BR selinux "(8), " selabel_open "(3), " selabel_lookup "(3), " selabel_stats "(3), " selabel_close "(3), " selinux_set_callback "(3), " selinux_x_context_path "(3), " freecon "(3), " selinux_config "(5) "
