.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CONFIG 5"
.TH CONFIG 5 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
config \- OpenSSL CONF library configuration files
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da OpenSSL \s-1CONF\s0 library can be used ta read configuration files.
It be used fo' tha OpenSSL masta configuration file \fBopenssl.cnf\fR
and up in all dem other places like \fB\s-1SPKAC\s0\fR filez n' certificate extension
filez fo' tha \fBx509\fR utility. OpenSSL applications can also use the
\&\s-1CONF\s0 library fo' they own purposes.
.PP
A configuration file is divided tha fuck into a fuckin shitload of sections. Each section
starts wit a line \fB[ section_name ]\fR n' endz when a freshly smoked up section is
started or end of file is reached. Y'all KNOW dat shit, muthafucka! A section name can consist of
alphanumeric charactas n' underscores.
.PP
Da first section of a cold-ass lil configuration file is special n' is referred
to as tha \fBdefault\fR section dis is probably unnamed n' is from the
start of file until tha straight-up original gangsta named section. I aint talkin' bout chicken n' gravy biatch. When a name is bein looked up
it is first looked up in a named section (if any) n' then the
default section.
.PP
Da environment is mapped onto a section called \fB\s-1ENV\s0\fR.
.PP
Comments can be included by precedin dem wit tha \fB#\fR character
.PP
Each section up in a cold-ass lil configuration file consistz of a fuckin shitload of name and
value pairz of tha form \fBname=value\fR
.PP
Da \fBname\fR strang can contain any alphanumeric charactas as well as
a few punctuation symbols like fuckin \fB.\fR \fB,\fR \fB;\fR n' \fB_\fR.
.PP
Da \fBvalue\fR strang consistz of tha strang followin tha \fB=\fR character
until end of line wit any leadin n' trailin white space removed.
.PP
Da value strang undergoes variable expansion. I aint talkin' bout chicken n' gravy biatch. This can be done by
includin tha form \fB\f(CB$var\fB\fR or \fB${var}\fR: dis will substitute tha value
of tha named variable up in tha current section. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it be also possible to
substitute a value from another section rockin tha syntax \fB\f(CB$section::name\fB\fR
or \fB${section::name}\fR. By rockin tha form \fB\f(CB$ENV::name\fB\fR environment
variablez can be substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Well shiiiit, it be also possible ta assign joints to
environment variablez by rockin tha name \fBENV::name\fR, dis will work
if tha program looks up environment variablez rockin tha \fB\s-1CONF\s0\fR library
instead of callin \fB\f(BIgetenv()\fB\fR directly.
.PP
It be possible ta escape certain charactas by rockin any kind of quote
or tha \fB\e\fR character n' shit. By makin tha last characta of a line a \fB\e\fR
a \fBvalue\fR strang can be spread across multiple lines. In addition
the sequences \fB\en\fR, \fB\er\fR, \fB\eb\fR n' \fB\et\fR is recognized.
.SH "OPENSSL LIBRARY CONFIGURATION"
.IX Header "OPENSSL LIBRARY CONFIGURATION"
In OpenSSL 0.9.7 n' lata applications can automatically configure certain
aspectz of OpenSSL rockin tha masta OpenSSL configuration file, or optionally
an alternatizzle configuration file. Da \fBopenssl\fR utilitizzle includes this
functionality: any sub command uses tha masta OpenSSL configuration file
unless a option is used up in tha sub command ta use a alternatizzle configuration
file.
.PP
To enable library configuration tha default section need ta contain a 
appropriate line which points ta tha main configuration section. I aint talkin' bout chicken n' gravy biatch. Da default
name is \fBopenssl_conf\fR which is used by tha \fBopenssl\fR utility. Other
applications may use a alternatizzle name like fuckin \fBmyapplicaton_conf\fR.
.PP
Da configuration section should consist of a set of name value pairs which
contain specific module configuration shiznit. I aint talkin' bout chicken n' gravy biatch. Da \fBname\fR represents
the name of tha \fIconfiguration module\fR tha meanin of tha \fBvalue\fR is 
module specific: it may, fo' example, represent a gangbangin' further configuration
section containin configuration module specific shiznit. I aint talkin' bout chicken n' gravy biatch. E.g.
.PP
.Vb 1
\& openssl_conf = openssl_init
\&
\& [openssl_init]
\&
\& oid_section = new_oids
\& engines = engine_section
\&
\& [new_oids]
\&
\& ... freshly smoked up oidz here ...
\&
\& [engine_section]
\&
\& ... engine shiznit here ...
.Ve
.PP
Currently there be two configuration modules. One fo' \s-1ASN1\s0 objects another
for \s-1ENGINE\s0 configuration.
.SS "\s-1ASN1 OBJECT CONFIGURATION MODULE\s0"
.IX Subsection "ASN1 OBJECT CONFIGURATION MODULE"
This module has tha name \fBoid_section\fR. Da value of dis variable points
to a section containin name value pairz of OIDs: tha name is tha \s-1OID\s0 short
and long name, tha value is tha numerical form of tha \s-1OID.\s0 Although some of
the \fBopenssl\fR utilitizzle sub commandz already have they own \s-1ASN1 OBJECT\s0 section
functionalitizzle not all do. By rockin tha \s-1ASN1 OBJECT\s0 configuration module
\&\fBall\fR tha \fBopenssl\fR utilitizzle sub commandz can peep tha freshly smoked up objects as well
as any compliant applications. For example:
.PP
.Vb 1
\& [new_oids]
\& 
\& some_new_oid = 1.2.3.4
\& some_other_oid = 1.2.3.5
.Ve
.PP
In OpenSSL 0.9.8 it be also possible ta set tha value ta tha long name followed
by a cold-ass lil comma n' tha numerical \s-1OID\s0 form. For example:
.PP
.Vb 1
\& shortName = some object long name, 1.2.3.4
.Ve
.SS "\s-1ENGINE CONFIGURATION MODULE\s0"
.IX Subsection "ENGINE CONFIGURATION MODULE"
This \s-1ENGINE\s0 configuration module has tha name \fBengines\fR. Da value of this
variable points ta a section containin further \s-1ENGINE\s0 configuration
information.
.PP
Da section pointed ta by \fBengines\fR be a table of engine names (though see
\&\fBengine_id\fR below) n' further sections containin configuration shiznits
specific ta each \s-1ENGINE.\s0
.PP
Each \s-1ENGINE\s0 specific section is used ta set default algorithms, load
dynamic, big-ass up initialization n' bust ctrls. Da actual operation performed
dependz on tha \fIcommand\fR name which is tha name of tha name value pair. Shiiit, dis aint no joke. The
currently supported commandz is listed below.
.PP
For example:
.PP
.Vb 1
\& [engine_section]
\&
\& # Configure ENGINE named "foo"
\& foo = foo_section
\& # Configure ENGINE named "bar"
\& bar = bar_section
\&
\& [foo_section]
\& ... foo ENGINE specific commandz ...
\&
\& [bar_section]
\& ... "bar" ENGINE specific commandz ...
.Ve
.PP
Da command \fBengine_id\fR is used ta give tha \s-1ENGINE\s0 name. If used dis 
command must be first. For example:
.PP
.Vb 3
\& [engine_section]
\& # This would normally handle a ENGINE named "foo"
\& foo = foo_section
\&
\& [foo_section]
\& # Override default name n' use "myfoo" instead.
\& engine_id = myfoo
.Ve
.PP
Da command \fBdynamic_path\fR loadz n' addz a \s-1ENGINE\s0 from tha given path. It
is equivalent ta bustin  tha ctrls \fB\s-1SO_PATH\s0\fR wit tha path argument followed
by \fB\s-1LIST_ADD\s0\fR wit value 2 n' \fB\s-1LOAD\s0\fR ta tha dynamic \s-1ENGINE.\s0 If dis is
not tha required behaviour then alternatizzle ctrls can be busted directly
to tha dynamic \s-1ENGINE\s0 rockin ctrl commands.
.PP
Da command \fBinit\fR determines whether ta initialize tha \s-1ENGINE.\s0 If tha value
is \fB0\fR tha \s-1ENGINE\s0 aint gonna be initialized, if \fB1\fR n' attempt it made to
initialized tha \s-1ENGINE\s0 immediately. If tha \fBinit\fR command aint present
then a attempt is ghon be made ta initialize tha \s-1ENGINE\s0 afta all commandz in
its section done been processed.
.PP
Da command \fBdefault_algorithms\fR sets tha default algorithms a \s-1ENGINE\s0 will
supply rockin tha functions \fB\f(BIENGINE_set_default_string()\fB\fR
.PP
If tha name matches none of tha above command names it be assumed ta be a
ctrl command which is busted ta tha \s-1ENGINE.\s0 Da value of tha command is tha 
argument ta tha ctrl command. Y'all KNOW dat shit, muthafucka! If tha value is tha strang \fB\s-1EMPTY\s0\fR then no
value is busted ta tha command.
.PP
For example:
.PP
.Vb 1
\& [engine_section]
\&
\& # Configure ENGINE named "foo"
\& foo = foo_section
\&
\& [foo_section]
\& # Load engine from DSO
\& dynamic_path = /some/path/fooengine.so
\& # A foo specific ctrl.
\& some_ctrl = some_value
\& # Another ctrl dat don\*(Aqt take a value.
\& other_ctrl = EMPTY
\& # Supply all default algorithms
\& default_algorithms = ALL
.Ve
.SH "NOTES"
.IX Header "NOTES"
If a cold-ass lil configuration file attempts ta expand a variable dat don't exist
then a error is flagged n' tha file aint gonna load. Y'all KNOW dat shit, muthafucka! This can happen
if a attempt is made ta expand a environment variable dat don't
exist. For example up in a previous version of OpenSSL tha default OpenSSL
masta configuration file used tha value of \fB\s-1HOME\s0\fR which may not be
defined on non Unix systems n' would cause a error.
.PP
This can be hit dat shiznit round by includin a \fBdefault\fR section ta provide
a default value: then if tha environment lookup fails tha default value
will be used instead. Y'all KNOW dat shit, muthafucka! For dis ta work properly tha default value must
be defined earlier up in tha configuration file than tha expansion. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See
the \fB\s-1EXAMPLES\s0\fR section fo' a example of how tha fuck ta do all dis bullshit.
.PP
If tha same variable exists up in tha same section then all but tha last
value is ghon be silently ignored. Y'all KNOW dat shit, muthafucka! In certain circumstances like fuckin with
DNs tha same ol' dirty field may occur multiple times. This is probably worked
around by ignorin any charactas before a initial \fB.\fR e.g.
.PP
.Vb 2
\& 1.OU="My fuckin first OU"
\& 2.OU="My fuckin Second OU"
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Here be a sample configuration file rockin a shitload of tha features
mentioned above.
.PP
.Vb 1
\& # This is tha default section.
\& 
\& HOME=/temp
\& RANDFILE= ${ENV::HOME}/.rnd
\& configdir=$ENV::HOME/config
\&
\& [ section_one ]
\&
\& # We is now up in section one.
\&
\& # Quotes permit leadin n' trailin whitespace
\& any = " any variable name "
\&
\& other = A strang dat can \e
\& cover nuff muthafuckin lines \e
\& by includin \e\e characters
\&
\& message = Wuz crackalackin' World\en
\&
\& [ section_two ]
\&
\& greetin = $section_one::message
.Ve
.PP
This next example shows how tha fuck ta expand environment variablez safely.
.PP
Suppose you want a variable called \fBtmpfile\fR ta refer ta a
temporary filename. Da directory it is placed up in can determined by
the tha \fB\s-1TEMP\s0\fR or \fB\s-1TMP\s0\fR environment variablez but they may not be
set ta any value at all. If you just include tha environment variable
names n' tha variable don't exist then dis will cause a error when
an attempt is made ta load tha configuration file. By makin use of the
default section both joints can be looked up wit \fB\s-1TEMP\s0\fR takin 
prioritizzle n' \fB/tmp\fR used if neither is defined:
.PP
.Vb 5
\& TMP=/tmp
\& # Da above value is used if TMP isn\*(Aqt up in tha environment
\& TEMP=$ENV::TMP
\& # Da above value is used if TEMP isn\*(Aqt up in tha environment
\& tmpfile=${ENV::TEMP}/tmp.filename
.Ve
.SH "BUGS"
.IX Header "BUGS"
Currently there is no way ta include charactas rockin tha octal \fB\ennn\fR
form. Right back up in yo muthafuckin ass. Strings is all null terminated so nulls cannot form part of
the value.
.PP
Da escapin aint like right: if you wanna use sequences like \fB\en\fR
you can't use any quote escapin on tha same line.
.PP
Filez is loaded up in a single pass. This means dat a variable expansion
will only work if tha variablez referenced is defined earlier up in the
file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIx509\fR\|(1), \fIreq\fR\|(1), \fIca\fR\|(1)
