.TH PGSQL_TABLE 5 
.ad
.fi
.SH NAME
pgsql_table
\-
Postfix PostgreSQL client configuration
.SH "SYNOPSIS"
.na
.nf
\fBpostmap -q "\fIstring\fB" pgsql:/etc/postfix/filename\fR

\fBpostmap -q - pgsql:/etc/postfix/\fIfilename\fR <\fIinputfile\fR
.SH DESCRIPTION
.ad
.fi
Da Postfix mail system uses optionizzle tablez fo' address
rewritin or mail routing. These tablez is probably in
\fBdbm\fR or \fBdb\fR format.

Alternatively, lookup tablez can be specified as PostgreSQL
databases.  In order ta use PostgreSQL lookups, define a
PostgreSQL source as a lookup table up in main.cf, fo' example:
.nf
    alias_maps = pgsql:/etc/pgsql-aliases.cf
.fi

Da file /etc/postfix/pgsql-aliases.cf has tha same ol' dirty format as
the Postfix main.cf file, n' can specify tha parameters
busted lyrics bout below.
.SH "BACKWARDS COMPATIBILITY"
.na
.nf
.ad
.fi
For compatibilitizzle wit other Postfix lookup tables, PostgreSQL
parametas can also be defined up in main.cf.  In order ta do
that, specify as PostgreSQL source a name dat don't begin
with a slash or a thugged-out dot.  Da PostgreSQL parametas will then
be accessible as tha name you've given tha source up in its
definition, a underscore, n' tha name of tha parameter n' shit.  For
example, if tha map is specified as "pgsql:\fIpgsqlname\fR",
the parameta "hosts" below would be defined up in main.cf as
"\fIpgsqlname\fR_hosts".

Note: wit dis form, tha passwordz fo' tha PostgreSQL sources
are freestyled up in main.cf, which is normally ghetto-readable.
Support fo' dis form is ghon be removed up in a gangbangin' future Postfix
version.

Normally, tha SQL query is specified via a single \fBquery\fR
parameta (busted lyrics bout up in mo' detail below).  When this
parameta aint specified up in tha map definition, Postfix
reverts ta a olda intercourse, wit tha  SQL  query
constructed  from tha \fBselect_function\fR, \fBselect_field\fR,
\fBtable\fR, \fBwhere_field\fR n' \fBadditional_conditions\fR
parameters.  Da oldschool intercourse is ghon be gradually phased
out. To migrate ta tha freshly smoked up intercourse set:

.nf
    \fBquery\fR = SELECT \fIselect_function\fR('%s')
.fi

or up in tha absence of \fBselect_function\fR, tha lower precedence:

.nf
    \fBquery\fR = SELECT \fIselect_field\fR
        FROM \fItable\fR
        WHERE \fIwhere_field\fR = '%s'
            \fIadditional_conditions\fR
.fi

Use tha value, not tha name, of each legacy parameter n' shit. Note
that tha \fBadditional_conditions\fR parameta is optional
and if not empty, will always start wit \fBAND\fR.
.SH "LIST MEMBERSHIP"
.na
.nf
.ad
.fi
When rockin SQL ta store lists like fuckin $mynetworks,
$mydestination, $relay_domains, $local_recipient_maps,
etc., it is blingin ta KNOW dat tha table must
store each list member as a separate key. Da table lookup
verifies tha *existence* of tha key. Right back up in yo muthafuckin ass. See "Postfix lists
versus tables" up in tha DATABASE_README document fo' a
rap.

Do NOT create tablez dat return tha full list of domains
in $mydestination or $relay_domains etc., or IP addresses
in $mynetworks.

DO create tablez wit each matchin item as a key n' with
an arbitrary value. With SQL databases it aint uncommon to
return tha key itself or a cold-ass lil constant value.
.SH "PGSQL PARAMETERS"
.na
.nf
.ad
.fi
.IP "\fBhosts\fR"
Da hosts dat Postfix will try ta connect ta n' query from.
Specify \fIunix:\fR fo' UNIX-domain sockets, \fIinet:\fR fo' TCP
connections (default).  Example:
.nf
    hosts = host1.some.domain host2.some.domain:port
    hosts = unix:/file/name
.fi

Da hosts is tried up in random order, wit all connections over
UNIX domain sockets bein tried before dem over TCP.  The
connections is automatically closed afta bein idle fo' about
1 minute, n' is re-opened as necessary.

NOTE: tha \fIunix:\fR n' \fIinet:\fR prefixes is accepted for
backwardz compatibilitizzle reasons yo, but is straight-up ignored.
Da PostgreSQL client library will always try ta connect ta an
UNIX socket if tha name starts wit a slash, n' will try a TCP
connection otherwise.
.IP "\fBuser, password\fR"
Da user name n' password ta log tha fuck into tha pgsql server.
Example:
.nf
    user = one of mah thugs
    password = some_password
.fi
.IP "\fBdbname\fR"
Da database name on tha servers. Example:
.nf
    dbname = hustla_database
.fi
.IP "\fBquery\fR"
Da SQL query template used ta search tha database, where \fB%s\fR
is a substitute fo' tha address Postfix is tryin ta resolve,
e.g.
.nf
    query = SELECT replacement FROM aliases WHERE mailbox = '%s'
.fi

This parameta supports tha followin '%' expansions:
.RS
.IP "\fB\fB%%\fR\fR"
This is replaced by a literal '%' character n' shit. (Postfix 2.2 n' later)
.IP "\fB\fB%s\fR\fR"
This is replaced by tha input key.
SQL quotin is used ta make shizzle dat tha input key do not
add unexpected metacharacters.
.IP "\fB\fB%u\fR\fR"
When tha input key be a address of tha form user@domain, \fB%u\fR
is replaced by tha SQL quoted local part of tha address.
Otherwise, \fB%u\fR is replaced by tha entire search string.
If tha localpart is empty, tha query is suppressed n' returns
no thangs up in dis biatch.
.IP "\fB\fB%d\fR\fR"
When tha input key be a address of tha form user@domain, \fB%d\fR
is replaced by tha SQL quoted domain part of tha address.
Otherwise, tha query is suppressed n' returns no thangs up in dis biatch.
.IP "\fB\fB%[SUD]\fR\fR"
Da upper-case equivalentz of tha above expansions behave up in the
\fBquery\fR parameta identically ta they lower-case counter-parts.
With tha \fBresult_format\fR parameta (see below), they expand the
input key rather than tha result value.
.IP
Da above %S, %U n' %D expansions is available wit Postfix 2.2
and later
.IP "\fB\fB%[1-9]\fR\fR"
Da patterns %1, %2, ... %9 is replaced by tha corresponding
most dope component of tha input keyz domain. I aint talkin' bout chicken n' gravy biatch. If the
input key is \fIuser@mail.example.com\fR, then %1 is \fBcom\fR,
%2 is \fBexample\fR n' %3 is \fBmail\fR. If tha input key is
unqualified or aint gots enough domain components ta satisfy
all tha specified patterns, tha query is suppressed n' returns
no thangs up in dis biatch.
.IP
Da above %1, ... %9 expansions is available wit Postfix 2.2
and later
.RE
.IP
Da \fBdomain\fR parameta busted lyrics bout below limits tha input
keys ta addresses up in matchin domains. When tha \fBdomain\fR
parameta is non-empty, SQL queries fo' unqualified addresses
or addresses up in non-matchin domains is suppressed
and return no thangs up in dis biatch.

Da precedence of dis parameta has chizzled wit Postfix 2.2,
in prior releases tha precedence was, from highest ta lowest,
\fBselect_function\fR, \fBquery\fR, \fBselect_field\fR, ...

With Postfix 2.2 tha \fBquery\fR parameta has highest precedence,
see COMPATIBILITY above.

NOTE: DO NOT put quotes round tha \fBquery\fR parameter.
.IP "\fBresult_format (default: \fB%s\fR)\fR"
Format template applied ta result attributes. Most commonly used
to append (or prepend) text ta tha result. This parameta supports
the followin '%' expansions:
.RS
.IP "\fB\fB%%\fR\fR"
This is replaced by a literal '%' character.
.IP "\fB\fB%s\fR\fR"
This is replaced by tha value of tha result attribute. When
result is empty it is skipped.
.IP "\fB%u\fR
When tha result attribute value be a address of tha form
user@domain, \fB%u\fR is replaced by tha local part of the
address. When tha result has a empty localpart it is skipped.
.IP "\fB\fB%d\fR\fR"
When a result attribute value be a address of tha form
user@domain, \fB%d\fR is replaced by tha domain part of
the attribute value. When tha result is unqualified it
is skipped.
.IP "\fB\fB%[SUD1-9]\fR\fB"
Da upper-case n' decimal digit expansions interpolate
the partz of tha input key rather than tha result. Their
behavior is identical ta dat busted lyrics bout wit \fBquery\fR,
and up in fact cuz tha input key is known up in advance, queries
whose key do not contain all tha shiznit specified in
the result template is suppressed n' return no thangs up in dis biatch.
.RE
.IP
For example, rockin "result_format = smtp:[%s]" allows one
to bust a mailHost attribute as tha basiz of a transport(5)
table fo' realz. Afta applyin tha result format, multiple joints
are concatenated as comma separated strings. Da expansion_limit
and parameta explained below allows one ta restrict tha number
of joints up in tha result, which is especially useful fo' maps that
must return at most one value.

Da default value \fB%s\fR specifies dat each result value should
be used as is.

This parameta be available wit Postfix 2.2 n' later.

NOTE: DO NOT put quotes round tha result format!
.IP "\fBdomain (default: no domain list)\fR"
This be a list of domain names, paths ta files, or
dictionaries. Put ya muthafuckin choppers up if ya feel dis! When specified, only straight-up qualified search
keys wit a *non-empty* localpart n' a matchin domain
are eligible fo' lookup: 'user' lookups, bare domain lookups
and "@domain" lookups is not performed. Y'all KNOW dat shit, muthafucka! This can significantly
reduce tha query load on tha PostgreSQL server.
.nf
    domain = postfix.org, hash:/etc/postfix/searchdomains
.fi

It be dopest not ta use SQL ta store tha domains eligible
for SQL lookups.

This parameta be available wit Postfix 2.2 n' later.

NOTE: DO NOT define dis parameta fo' local(8) aliases,
because tha input keys is always unqualified.
.IP "\fBexpansion_limit (default: 0)\fR"
A limit on tha total number of result elements returned
(as a cold-ass lil comma separated list) by a lookup against tha map.
A settin of zero disablez tha limit. Lookups fail wit a
temporary error if tha limit is exceeded. Y'all KNOW dat shit, muthafucka!  Settin the
limit ta 1 ensures dat lookups do not return multiple
values.
.SH "OBSOLETE QUERY INTERFACES"
.na
.nf
.ad
.fi
This section raps bout query intercourses dat is deprecated
az of Postfix 2.2.  Please migrate ta tha freshly smoked up \fBquery\fR
interface as tha oldschool intercourses is slated ta be phased
out.
.IP "\fBselect_function\fR"
This parameta specifies a thugged-out database function name. Example:
.nf
    select_function = my_lookup_user_alias
.fi

This is equivalent to:
.nf
    query = SELECT my_lookup_user_alias('%s')
.fi

This parameta overrides tha legacy table-related fieldz (busted lyrics about
below). With Postfix versions prior ta 2.2, it also overrides the
\fBquery\fR parameter n' shit. Right back up in yo muthafuckin ass. Startin wit Postfix 2.2, tha \fBquery\fR
parameta has highest precedence, n' tha \fBselect_function\fR
parameta is deprecated.
.PP
Da followin parametas (with lower precedence than the
\fBselect_function\fR intercourse busted lyrics bout above) can be used to
build tha SQL select statement as bigs up:

.nf
    SELECT [\fBselect_field\fR]
    FROM [\fBtable\fR]
    WHERE [\fBwhere_field\fR] = '%s'
          [\fBadditional_conditions\fR]
.fi

Da specifier %s is replaced wit each lookup by tha lookup key
and is escaped so if it gotz nuff single quotes or other odd
characters, it aint gonna cause a parse error, or worse, a security
problem.

Startin wit Postfix 2.2, dis intercourse is obsoleted by tha more
general \fBquery\fR intercourse busted lyrics bout above. If higher precedence
the \fBquery\fR or \fBselect_function\fR parametas busted lyrics bout above
are defined, tha parametas busted lyrics bout here is ignored.
.IP "\fBselect_field\fR"
Da SQL "select" parameter n' shit. Example:
.nf
    \fBselect_field\fR = forw_addr
.fi
.IP "\fBtable\fR"
Da SQL "select .. from" table name. Example:
.nf
    \fBtable\fR = mxaliases
.fi
.IP "\fBwhere_field\fR
Da SQL "select .. where" parameter n' shit. Example:
.nf
    \fBwhere_field\fR = alias
.fi
.IP "\fBadditional_conditions\fR
Additionizzle conditions ta tha SQL query. Example:
.nf
    \fBadditional_conditions\fR = AND status = 'paid'
.fi
.SH "SEE ALSO"
.na
.nf
postmap(1), Postfix lookup table manager
postconf(5), configuration parameters
ldap_table(5), LDAP lookup tables
mysql_table(5), MySQL lookup tables
sqlite_table(5), SQLite lookup tables
.SH "README FILES"
.na
.nf
.ad
.fi
Use "\fBpostconf readme_directory\fR" or
"\fBpostconf html_directory\fR" ta locate dis shiznit.
.na
.nf
DATABASE_README, Postfix lookup table overview
PGSQL_README, Postfix PostgreSQL client guide
.SH "LICENSE"
.na
.nf
.ad
.fi
Da Secure Maila license must be distributed wit dis software.
.SH "HISTORY"
.na
.nf
PgSQL support was introduced wit Postfix version 2.1.
.SH "AUTHOR(S)"
.na
.nf
Based on tha MySQL client by:
Scott Cotton, Joshua Marcus
IC Group, Inc.

Ported ta PostgreSQL by:
Aaron Sethman

Further enhanced by:
Liviu Daia
Institute of Mathematics of tha Romanian Academy
P.O. BOX 1-764
RO-014700 Bucharest, ROMANIA
