.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "WPA_SUPPLICANT.CONF" "5" "23 October 2014" "" ""
.SH NAME
wpa_supplicant.conf \- configuration file fo' wpa_supplicant
.SH "OVERVIEW"
.PP
\fBwpa_supplicant\fR is configured rockin a text
file dat lists all accepted networks n' securitizzle policies,
includin pre-shared keys. Right back up in yo muthafuckin ass. See tha example configuration file,
probably up in \fB/usr/share/doc/wpa_supplicant/\fR, for
detailed shiznit bout tha configuration format n' supported
fields.
.PP
All file paths up in dis configuration file should use full
(absolute, not relatizzle ta hustlin directory) path up in order ta allow
workin directory ta be chizzled. Y'all KNOW dat shit, muthafucka! This can happen if wpa_supplicant is
run up in tha background.
.PP
Changes ta configuration file can be reloaded be sending
SIGHUP signal ta \fBwpa_supplicant\fR ('killall -HUP
wpa_supplicant'). Right back up in yo muthafuckin ass. Similarly, reloadin can be triggered with
the \fBwpa_cli reconfigure\fR command.
.PP
Configuration file can include one or mo' network blocks,
e.g., one fo' each used SSID. wpa_supplicant will automatically
select tha dopest network based on tha order of network blocks in
the configuration file, network securitizzle level (WPA/WPA2 is
preferred), n' signal strength.
.SH "QUICK EXAMPLES"
.IP 1. 
WPA-Personal (PSK) as home network n' WPA-Enterprise with
EAP-TLS as work network.
.sp
.RS
.sp
.nf
# allow frontend (e.g., wpa_cli) ta be used by all playas up in 'wheel' group
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=wheel
#
# home network; allow all valid ciphers
network={
	ssid="home"
	scan_ssid=1
	key_mgmt=WPA-PSK
	psk="very secret passphrase"
}
#
# work network; use EAP-TLS wit WPA; allow only CCMP n' TKIP ciphers
network={
	ssid="work"
	scan_ssid=1
	key_mgmt=WPA-EAP
	pairwise=CCMP TKIP
	group=CCMP TKIP
	eap=TLS
	identity="user@example.com"
	ca_cert="/etc/cert/ca.pem"
	client_cert="/etc/cert/user.pem"
	private_key="/etc/cert/user.prv"
	private_key_passwd="password"
}
.sp
.fi
.RE
.sp
.IP 2. 
WPA-RADIUS/EAP-PEAP/MSCHAPv2 wit RADIUS servers that
use oldschool peaplabel (e.g., Funk Odyssey n' SBR, Meetinghouse
Aegis, Interlink RAD-Series)
.sp
.RS
.sp
.nf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=wheel
network={
	ssid="example"
	scan_ssid=1
	key_mgmt=WPA-EAP
	eap=PEAP
	identity="user@example.com"
	password="foobar"
	ca_cert="/etc/cert/ca.pem"
	phase1="peaplabel=0"
	phase2="auth=MSCHAPV2"
}
.sp
.fi
.RE
.sp
.IP 3. 
EAP-TTLS/EAP-MD5-Challenge configuration wit anonymous
identitizzle fo' tha unencrypted use. Real identitizzle is busted only
within a encrypted TLS tunnel.
.sp
.RS
.sp
.nf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=wheel
network={
	ssid="example"
	scan_ssid=1
	key_mgmt=WPA-EAP
	eap=TTLS
	identity="user@example.com"
	anonymous_identity="anonymous@example.com"
	password="foobar"
	ca_cert="/etc/cert/ca.pem"
	phase2="auth=MD5"
}
.sp
.fi
.RE
.sp
.IP 4. 
IEEE 802.1X (i.e., no WPA) wit dynamic WEP keys
(require both unicast n' broadcast); use EAP-TLS for
authentication
.sp
.RS
.sp
.nf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=wheel
network={
	ssid="1x-test"
	scan_ssid=1
	key_mgmt=IEEE8021X
	eap=TLS
	identity="user@example.com"
	ca_cert="/etc/cert/ca.pem"
	client_cert="/etc/cert/user.pem"
	private_key="/etc/cert/user.prv"
	private_key_passwd="password"
	eapol_flags=3
}
.sp
.fi
.RE
.sp
.IP 5. 
Catch all example dat allows mo' or less all
configuration modes. Da configuration options is used based
on what tha fuck securitizzle policy is used up in tha selected SSID. This is
mostly fo' testin n' aint recommended fo' normal
use.
.sp
.RS
.sp
.nf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=wheel
network={
	ssid="example"
	scan_ssid=1
	key_mgmt=WPA-EAP WPA-PSK IEEE8021X NONE
	pairwise=CCMP TKIP
	group=CCMP TKIP WEP104 WEP40
	psk="very secret passphrase"
	eap=TTLS PEAP TLS
	identity="user@example.com"
	password="foobar"
	ca_cert="/etc/cert/ca.pem"
	client_cert="/etc/cert/user.pem"
	private_key="/etc/cert/user.prv"
	private_key_passwd="password"
	phase1="peaplabel=0"
	ca_cert2="/etc/cert/ca2.pem"
	client_cert2="/etc/cer/user.pem"
	private_key2="/etc/cer/user.prv"
	private_key2_passwd="password"
}
.sp
.fi
.RE
.sp
.IP 6. 
Authentication fo' wired Ethernet. This can be used with
\fBwired\fR or \fBroboswitch\fR intercourse
(-Dwired or -Droboswitch on command line).
.sp
.RS
.sp
.nf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=wheel
ap_scan=0
network={
	key_mgmt=IEEE8021X
	eap=MD5
	identity="user"
	password="password"
	eapol_flags=0
}
.sp
.fi
.RE
.sp
.SH "CERTIFICATES"
.PP
Some EAP authentication methodz require use of
certificates. EAP-TLS uses both server side n' client
certificates whereas EAP-PEAP n' EAP-TTLS only require tha server
side certificate. When client certificate is used, a matching
private key file has ta also be included up in configuration. I aint talkin' bout chicken n' gravy biatch. If the
private key uses a passphrase, dis has ta be configured in
wpa_supplicant.conf ("private_key_passwd").
.PP
wpa_supplicant supports X.509 certificates up in PEM n' DER
formats, n' you can put dat on yo' toast. User certificate n' private key can be included up in the
same file.
.PP
If tha user certificate n' private key is received in
PKCS#12/PFX format, they need ta be converted ta suitable PEM/DER
format fo' wpa_supplicant. This can be done, e.g., wit following
commands:
.sp
.RS
.sp
.nf
# convert client certificate n' private key ta PEM format
openssl pkcs12 -in example.pfx -out user.pem -clcerts
# convert CA certificate (if included up in PFX file) ta PEM format
openssl pkcs12 -in example.pfx -out ca.pem -cacerts -nokeys
.sp
.fi
.RE
.sp
.SH "SEE ALSO"
.PP
\fBwpa_supplicant\fR(8)
\fBopenssl\fR(1)
