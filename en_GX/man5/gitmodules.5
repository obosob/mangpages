'\" t
.\"     Title: gitmodules
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITMODULES" "5" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitmodulez \- definin submodule properties
.SH "SYNOPSIS"
.sp
$GIT_WORK_DIR/\&.gitmodules
.SH "DESCRIPTION"
.sp
Da \&.gitmodulez file, located up in tha top\-level directory of a Git hustlin tree, be a text file wit a syntax matchin tha requirementz of \fBgit-config\fR(1)\&.
.sp
Da file gotz nuff one subsection per submodule, n' tha subsection value is tha name of tha submodule\&. Da name is set ta tha path where tha submodule has been added unless dat shiznit was customized wit tha \fI\-\-name\fR option of \fIgit submodule add\fR\&. Each submodule section also gotz nuff tha followin required keys:
.PP
submodule\&.<name>\&.path
.RS 4
Defines tha path, relatizzle ta tha top\-level directory of tha Git hustlin tree, where tha submodule is sposed ta fuckin be checked out\&. Da path name must not end wit a
/\& fo' realz. All submodule paths must be unique within tha \&.gitmodulez file\&.
.RE
.PP
submodule\&.<name>\&.url
.RS 4
Defines a URL from which tha submodule repository can be cloned\&. This may be either a absolute URL locked n loaded ta be passed to
\fBgit-clone\fR(1)
or (if it begins wit \&./ or \&.\&./) a location relatizzle ta tha superproject\(cqs origin repository\&.
.RE
.sp
In addition, there be a fuckin shitload of optionizzle keys:
.PP
submodule\&.<name>\&.update
.RS 4
Defines what tha fuck ta do when tha submodule is updated by tha superproject\&. If
\fIcheckout\fR
(the default), tha freshly smoked up commit specified up in tha superproject is ghon be checked up in tha submodule on a thugged-out detached HEAD\&. If
\fIrebase\fR, tha current branch of tha submodule is ghon be rebased onto tha commit specified up in tha superproject\&. If
\fImerge\fR, tha commit specified up in tha superproject is ghon be merged tha fuck into tha current branch up in tha submodule\&. If
\fInone\fR, tha submodule wit name
$name
will not be updated by default\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This config option is overridden if \(aqgit submodule update\(aq is given
the \(aq\-\-merge\(aq, \(aq\-\-rebase\(aq or \(aq\-\-checkout\(aq options\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
submodule\&.<name>\&.branch
.RS 4
A remote branch name fo' trackin thugged-out shiznit up in tha upstream submodule\&. If tha option aint specified, it defaults to
\fImaster\fR\&. Right back up in yo muthafuckin ass. See the
\-\-remote
documentation in
\fBgit-submodule\fR(1)
for details\&.
.RE
.PP
submodule\&.<name>\&.fetchRecurseSubmodules
.RS 4
This option can be used ta control recursive fetchin of dis submodule\&. If dis option be also present up in tha submodulez entry up in \&.git/config of tha superproject, tha settin there will override tha one found up in \&.gitmodules\&. Both settings can be overridden on tha command line by rockin tha "\-\-[no\-]recurse\-submodules" option ta "git fetch" n' "git pull"\&.
.RE
.PP
submodule\&.<name>\&.ignore
.RS 4
Defines under what tha fuck circumstances "git status" n' tha diff crew show a submodule as modified\&. When set ta "all", it aint NEVER gonna be considered modified, "dirty" will ignore all chizzlez ta tha submodulez work tree n' takes only differences between tha HEAD of tha submodule n' tha commit recorded up in tha superproject tha fuck into account\&. "untracked" will additionally let submodulez wit modified tracked filez up in they work tree show up\&. Usin "none" (the default when dis option aint set) also shows submodulez dat have untracked filez up in they work tree as chizzled\&. If dis option be also present up in tha submodulez entry up in \&.git/config of tha superproject, tha settin there will override tha one found up in \&.gitmodules\&. Both settings can be overridden on tha command line by rockin tha "\-\-ignore\-submodule" option\&. The
\fIgit submodule\fR
commandz is not affected by dis setting\&.
.RE
.SH "EXAMPLES"
.sp
Consider tha followin \&.gitmodulez file:
.sp
.if n \{\
.RS 4
.\}
.nf
[submodule "libfoo"]
        path = include/foo
        url = git://foo\&.com/git/lib\&.git
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[submodule "libbar"]
        path = include/bar
        url = git://bar\&.com/git/lib\&.git
.fi
.if n \{\
.RE
.\}
.sp
This defines two submodules, libfoo n' libbar\&. These is sposed ta fuckin be checked up in tha paths \fIinclude/foo\fR n' \fIinclude/bar\fR, n' fo' both submodulez a URL is specified which can be used fo' clonin tha submodules\&.
.SH "SEE ALSO"
.sp
\fBgit-submodule\fR(1) \fBgit-config\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
