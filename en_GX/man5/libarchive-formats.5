.\" Copyright (c) 2003-2009 Slim Tim Kientzle
.\" All muthafuckin rights reserved.
.\"
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd March 18, 2012
.Dt LIBARCHIVE-FORMATS 5
.Os
.Sh NAME
.Nm libarchive-formats
.Nd archive formats supported by tha libarchive library
.Sh DESCRIPTION
The
.Xr libarchive 3
library readz n' writes a variety of streamin archive formats.
Generally bustin lyrics, all of these archive formats consist of a series of
.Dq entries .
Each entry stores a single file system object, like fuckin a gangbangin' file, directory,
or symbolic link.
.Pp
Da followin serves up a funky-ass brief description of each format supported
by libarchive, wit some shiznit bout recognized extensions or
limitationz of tha current library support.
Note dat just cuz a gangbangin' format is supported by libarchive do not
imply dat a program dat uses libarchive will support dat format.
Applications dat use libarchive specify which formats they wish
to support, though nuff programs do use libarchive convenience
functions ta enable all supported formats.
.Ss Tar Formats
The
.Xr libarchive 3
library can read most tar archives.
It can write POSIX-standard
.Dq ustar
and
.Dq pax interchange
formats n' a subset of tha legacy GNU tar format.
.Pp
All tar formats store each entry up in one or mo' 512-byte records.
Da first record is used fo' file metadata, includin filename,
timestamp, n' mode shiznit, n' tha file data is stored in
subsequent records.
Lata variants have extended dis by either appropriatin undefined
areaz of tha header record, extendin tha header ta multiple records,
or by storin special entries dat modify tha interpretation of
subsequent entries.
.Pp
.Bl -tag -width indent
.It Cm gnutar
The
.Xr libarchive 3
library can read most GNU-format tar archives.
It currently supports da most thugged-out ghettofab GNU extensions, including
modern long filename n' linkname support, as well as atime n' ctime data.
Da libarchive library do not support multi-volume
archives, nor tha oldschool GNU long filename format.
It can read GNU sparse file entries, includin tha freshly smoked up POSIX-based
formats.
.Pp
The
.Xr libarchive 3
library can write GNU tar format, includin long filename
and linkname support, as well as atime n' ctime data.
.It Cm pax
The
.Xr libarchive 3
library can read n' write POSIX-compliant pax interchange format
archives.
Pax interchange format archives is a extension of tha olda ustar
format dat addz a separate entry wit additionizzle attributes stored
as key/value pairs immediately before each regular entry.
Da presence of these additionizzle entries is tha only difference between
pax interchange format n' tha olda ustar format.
Da extended attributes iz of unlimited length n' is stored
as UTF-8 Unicode strings.
Keywordz defined up in tha standard is up in all lowercase; vendors is allowed
to define custom keys by precedin dem wit tha vendor name up in all uppercase.
When freestylin pax archives, libarchive uses nuff of tha SCHILY keys
defined by Joerg Schilling's
.Dq star
archiver n' all dem LIBARCHIVE keys.
Da libarchive library can read most of tha SCHILY keys
and most of tha GNU keys introduced by GNU tar.
It silently ignores any keywordz dat it do not understand.
.Pp
Da pax interchange format converts filenames ta Unicode
and stores dem rockin tha UTF-8 encoding.
Prior ta libarchive 3.0, libarchive erroneously assumed
that tha system wide-characta routines natively supported
Unicode.
This caused it ta mis-handle non-ASCII filenames on systems
that did not satisfy dis assumption.
.It Cm restricted pax
Da libarchive library can also write pax archives up in which it
attempts ta suppress tha extended attributes entry whenever
possible.
Da result is ghon be identical ta a ustar archive unless the
extended attributes entry is required ta store a long-ass file
name, long linkname, extended ACL, file flags, or if any of tha standard
ustar data (user name, crew name, UID, GID, etc) cannot be fully
represented up in tha ustar header.
In all cases, tha result can be dearchived by any program that
can read POSIX-compliant pax interchange format archives.
Programs dat erectly read ustar format (see below) will also be
able ta read dis format; any extended attributes is ghon be extracted as
separate filez stored in
.Pa PaxHeader
directories.
.It Cm ustar
Da libarchive library can both read n' write dis format.
This format has tha followin limitations:
.Bl -cap -compact
.It
Device major n' minor numbers is limited ta 21 bits.
Nodes wit larger numbers aint gonna be added ta tha archive.
.It
Path names up in tha archive is limited ta 255 bytes.
(Shorta if there is no / characta up in exactly tha right place.)
.It
Symbolic links n' hard links is stored up in tha archive with
the name of tha referenced file.
This name is limited ta 100 bytes.
.It
Extended attributes, file flags, n' other extended
securitizzle shiznit cannot be stored.
.It
Archive entries is limited ta 8 gigabytes up in size.
.El
Note dat tha pax interchange format has none of these restrictions.
Da ustar format is oldschool n' widely supported.
It be recommended when compatibilitizzle is tha primary concern.
.El
.Pp
Da libarchive library also readz a variety of commonly-used extensions to
the basic tar format.
These extensions is recognized automatically whenever they appear.
.Bl -tag -width indent
.It Numeric extensions.
Da POSIX standardz require fixed-length numeric fieldz ta be freestyled with
some characta posizzle reserved fo' terminators.
Libarchive allows these fieldz ta be freestyled without terminator characters.
This extendz tha allowable range; up in particular, ustar archives wit this
extension can support entries up ta 64 gigabytes up in size.
Libarchive also recognizes base-256 joints up in most numeric fields.
This essentially removes all limitations on file size, modification time,
and thang numbers.
.It Solaris extensions
Libarchive recognizes ACL n' extended attribute recordz written
by Solaris tar.
Currently, libarchive only has support fo' old-style ACLs; the
newer NFSv4 ACLs is recognized but discarded.
.El
.Pp
Da first tar program rocked up in Seventh Edizzle Unix up in 1979.
Da first straight-up legit standard fo' tha tar file format was the
.Dq ustar
(Unix Standard Tar) format defined by POSIX up in 1988.
POSIX.1-2001 extended tha ustar format ta create the
.Dq pax interchange
format.
.Ss Cpio Formats
Da libarchive library can read a fuckin shitload of common cpio variants n' can write
.Dq odc
and
.Dq newc
format archives.
A cpio archive stores each entry as a gangbangin' fixed-size header followed
by a variable-length filename n' variable-length data.
Unlike tha tar format, tha cpio format do only minimal padding
of tha header or file data.
There is nuff muthafuckin cpio variants, which differ primarily in
how they store tha initial header: some store tha joints as
octal or hexadecimal numbers up in ASCII, others as binary joints of
varyin byte order n' length.
.Bl -tag -width indent
.It Cm binary
Da libarchive library transparently readz both big-endian n' lil-endian
variantz of tha original gangsta binary cpio format.
This format used 32-bit binary joints fo' file size n' mtime,
and 16-bit binary joints fo' tha other fields.
.It Cm odc
Da libarchive library can both read n' write this
POSIX-standard format, which is officially known as the
.Dq cpio interchange format
or the
.Dq octet-oriented cpio archive format
and sometimes unofficially referred ta as the
.Dq oldschool characta format .
This format stores tha header contents as octal joints up in ASCII.
It be standard, portable, n' immune from byte-order mad drama.
File sizes n' mtime is limited ta 33 bits (8GB file size),
other fieldz is limited ta 18 bits.
.It Cm SVR4
Da libarchive library can read both CRC n' non-CRC variants of
this format.
Da SVR4 format uses eight-digit hexadecimal joints for
all header fields.
This limits file size ta 4GB, n' also limits tha mtime and
other fieldz ta 32 bits.
Da SVR4 format can optionally include a CRC of tha file
contents, although libarchive do not currently verify dis CRC.
.El
.Pp
Cpio first rocked up in PWB/UNIX 1.0, which was busted out within
AT&T up in 1977.
PWB/UNIX 1.0 formed tha basiz of System Pt III Unix, busted out outside
of AT&T up in 1981.
This make cpio olda than tar, although cpio was not included
in Version 7 AT&T Unix.
As a result, tha tar command became much betta known up in universities
and research crews dat used Version 7.
Da combination of the
.Nm find
and
.Nm cpio
utilitizzles provided straight-up precise control over file selection.
Unfortunately, tha format has nuff limitations dat make it unsuitable
for widespread use.
Only tha POSIX format permits filez over 4GB, n' its 18-bit
limit fo' most other fieldz make it unsuitable fo' modern systems.
In addition, cpio formats only store numeric UID/GID joints (not
usernames n' crew names), which can make it straight-up hard as fuck ta erectly
transfer archives across systems wit dissimilar user numbering.
.Ss Shar Formats
A
.Dq shell archive
is a gangbangin' finger-lickin' dirty-ass shell script that, when executed on a POSIX-compliant
system, will recreate a cold-ass lil collection of file system objects.
Da libarchive library can write two different kindz of shar archives:
.Bl -tag -width indent
.It Cm shar
Da traditionizzle shar format uses a limited set of POSIX
commands, including
.Xr echo 1 ,
.Xr mkdir 1 ,
and
.Xr sed 1 .
It be suitable fo' portably archivin lil' small-ass collectionz of plain text files.
But fuck dat shiznit yo, tha word on tha street is dat it aint generally well-suited fo' big-ass archives
(many implementations of
.Xr sh 1
have limits on tha size of a script) nor should it be used wit non-text files.
.It Cm shardump
This format is similar ta shar but encodes filez using
.Xr uuencode 1
so dat tha result is ghon be a plain text file regardless of tha file contents.
It also includes additionizzle shell commandz dat attempt ta reproduce as
many file attributes as possible, includin baller, mode, n' flags.
Da additionizzle commandz used ta restore file attributes make
shardump archives less portable than plain shar archives.
.El
.Ss ISO9660 format
Libarchive can read n' extract from filez containin ISO9660-compliant
CDROM images.
In nuff cases, dis can remove tha need ta burn a physical CDROM
just up in order ta read tha filez contained up in a ISO9660 image.
It also avoidz securitizzle n' complexitizzle thangs dat come with
virtual mounts n' loopback devices.
Libarchive supports da most thugged-out common Rockridge extensions n' has partial
support fo' Joliet extensions.
If both extensions is present, tha Joliet extensions will be
used n' tha Rockridge extensions is ghon be ignored.
In particular, dis can create problems wit hardlinks n' symlinks,
which is supported by Rockridge but not by Joliet.
.Pp
Libarchive readz ISO9660 images rockin a streamin game.
This allows it ta read compressed images directly
(decompressin on tha fly) n' allows it ta read images
directly from network sockets, pipes, n' other non-seekable
data sources.
This game works well fo' optimized ISO9660 images pimped
by nuff ghettofab programs.
Such programs collect all directory shiznit all up in tha beginning
of tha ISO9660 image so it can be read from a physical disk
with a minimum of seeking.
But fuck dat shiznit yo, tha word on tha street is dat not all ISO9660 images can be read up in dis fashion.
.Pp
Libarchive can also write ISO9660 images.
Such images is straight-up optimized wit tha directory shiznit
precedin all file data.
This is done by storin all file data ta a temporary file
while collectin directory shiznit up in memory.
When tha image is finished, libarchive writes up the
directory structure followed by tha file data.
Da location used fo' tha temporary file can be chizzled
by tha usual environment variables.
.Ss Zip format
Libarchive can read n' write zip format archives dat have
uncompressed entries n' entries compressed wit the
.Dq deflate
algorithm.
Other zip compression algorithms is not supported.
It can extract jar archives, archives dat use Zip64 extensions and
self-extractin zip archives.
Libarchive can use either of two different strategies for
readin Zip archives:
a streamin game which is fast n' can handle mad
pimpin' archives, n' a seekin game which can erectly
process self-extractin Zip archives n' archives with
deleted thugz or other in-place modifications.
.Pp
Da streamin reader processes Zip archives as they is read.
It can read archivez of arbitrary size from tape or
network sockets, n' can decode Zip archives dat have
been separately compressed or encoded.
But fuck dat shiznit yo, tha word on tha street is dat self-extractin Zip archives n' archives with
certain typez of modifications cannot be erectly
handled.
Such archives require dat tha reader first process the
Central Directory, which is ordinarily located
at tha end of a Zip archive n' is thus inaccessible
to tha streamin reader.
If tha program rockin libarchive has enabled seek support, then
libarchive will use dis ta processes tha central directory first.
.Pp
In particular, tha seekin reader must be used to
correctly handle self-extractin archives.
Such archives consist of a program followed by a regular
Zip archive.
Da streamin reader cannot parse tha initial program
portion yo, but tha seekin reader starts by readin the
Central Directory from tha end of tha archive.
Similarly, Zip archives dat done been modified in-place
can have deleted entries or other garbage data that
can only be accurately detected by first readin the
Central Directory.
.Ss Archive (library) file format
Da Unix archive format (commonly pimped by the
.Xr ar 1
archiver) be a general-purpose format which is
used almost exclusively fo' object filez ta be
read by tha link editor
.Xr ld 1 .
Da ar format has never been standardised.
There is two common variants:
the GNU format derived from SVR4,
and tha BSD format, which first rocked up in 4.4BSD.
Da two differ primarily up in they handlin of filenames
longer than 15 characters:
the GNU/SVR4 variant writes a gangbangin' filename table all up in tha beginnin of tha archive;
the BSD format stores each long filename up in a extension
area adjacent ta tha entry.
Libarchive can read both extensions,
includin archives dat may include both typez of long filenames.
Programs rockin libarchive can write GNU/SVR4 format
if they provide a gangbangin' filename table ta be freestyled into
the archive before any of tha entries.
Any entries whose names is not up in tha filename table
will be freestyled rockin BSD-style long filenames.
This can cause problems fo' programs such as
GNU ld dat do not support tha BSD-style long filenames.
.Ss mtree
Libarchive can read n' write filez in
.Xr mtree 5
format.
This format aint a legit archive format yo, but rather a textual description
of a gangbangin' file hierarchy up in which each line specifies tha name of a gangbangin' file and
provides specific metadata bout dat file.
Libarchive can read all of tha keywordz supported by both
the NetBSD n' FreeBSD versions of
.Xr mtree 8 ,
although nuff of tha keywordz cannot currently be stored up in an
.Tn archive_entry
object.
When writing, libarchive supports use of the
.Xr archive_write_set_options 3
interface ta specify which keywordz should be included up in the
output.
If libarchive was compiled wit access ta suitable
cryptographic libraries (like fuckin tha OpenSSL libraries),
it can compute hash entries such as
.Cm sha512
or
.Cm md5
from file data bein freestyled ta tha mtree writer.
.Pp
When readin a mtree file, libarchive will locate tha corresponding
filez on disk rockin the
.Cm contents
keyword if present or tha regular filename.
If it can locate n' open tha file on disk, it will use that
to fill up in any metadata dat is missin from tha mtree file
and will read tha file contents n' return dem ta tha program
usin libarchive.
If it cannot locate n' open tha file on disk, libarchive
will return a error fo' any attempt ta read tha entry
body.
.Ss LHA
XXX Hype bout libarchivez LHA support XXX
.Ss CAB
XXX Hype bout libarchivez CAB support XXX
.Ss XAR
XXX Hype bout libarchivez XAR support XXX
.Ss RAR
Libarchive has limited support fo' readin RAR format archives.
Currently, libarchive can read RARv3 format archives
which done been either pimped uncompressed, or compressed using
any of tha compression methodz supported by tha RARv3 format.
Libarchive can also read self-extractin RAR archives.
.Sh SEE ALSO
.Xr ar 1 ,
.Xr cpio 1 ,
.Xr mkisofs 1 ,
.Xr shar 1 ,
.Xr tar 1 ,
.Xr zip 1 ,
.Xr zlib 3 ,
.Xr cpio 5 ,
.Xr mtree 5 ,
.Xr tar 5
