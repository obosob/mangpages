.TH SNMPTRAPD.CONF 5 "19 Feb 2009" V5.7.2 "Net-SNMP"
.SH NAME
snmptrapd.conf - configuration file fo' tha Net-SNMP notification receiver
.SH DESCRIPTION
Da Net-SNMP notification receiver (trap daemon) uses one or more
configuration filez ta control its operation n' how tha fuck incomin traps
(and INFORM requests) should be processed.
This file (\fBsnmptrapd.conf\fR) can be located in
one of nuff muthafuckin locations, as busted lyrics bout up in the
.I snmp_config(5)
manual page.
.SH IMPORTANT
Previously,
.B snmptrapd
would accept all incomin notifications, n' log dem automatically
(even if no explicit configuration was provided).
Startin wit release 5.3, access control checks is ghon be applied to
incomin notifications. If
.B snmptrapd
is run without a suitable configuration file (or equivalent access
control settings), then such traps \fBWILL NOT\fR
be processed.
See tha section \fBACCESS CONTROL\fR fo' mo' details.
.PP
As wit tha agent configuration, the
.I snmptrapd.conf
directives can be divided tha fuck into four distinct groups.
.SH TRAPD BEHAVIOUR
.IP "snmpTrapdAddr [<transport-specifier>:]<transport-address>[,...]"
defines a list of listenin addresses, on which ta receive
incomin SNMP notifications.
See tha section 
.B LISTENING ADDRESSES
in the
.I snmpd(8)
manual page fo' mo' shiznit bout tha format of listening
addresses.
.IP
Da default behaviour is to
listen on UDP port 162 on all IPv4 intercourses.
.IP "doNotRetainNotificationLogs yes"
disablez support fo' tha NOTIFICATION\-LOG\-MIB.
Normally tha snmptrapd program keeps a record of tha traps
received, which can be retrieved by querying
the \fCnlmLogTable\fR n' \fCnlmLogvariableTable\fR tables.  
This directizzle can be used ta suppress dis behaviour.
.IP
See tha 
.I snmptrapd(8) 
manual page n' tha NOTIFICATION\-LOG\-MIB fo' details.
.IP "doNotLogTraps yes"
disablez tha loggin of notifications altogether.
This is useful if tha \fBsnmptrapd\fR application should
only run traphandle hooks n' should not log traps ta any location.
.IP "doNotFork yes"
do not fork from tha callin shell.
.IP "pidFile PATH"
defines a gangbangin' file up in which ta store tha process ID of the
notification receiver n' shit.  By default, dis ID aint saved.
.SH ACCESS CONTROL
Startin wit release 5.3, it is necessary ta explicitly specify
who be authorised ta bust traps n' informs ta tha notification
receiver (and what tha fuck typez of processin these is allowed ta trigger).
This uses a extension of tha VACM model, used up in tha main SNMP agent.
.PP
There is currently three typez of processin dat can be specified:
.RS
.IP "log"
log tha detailz of tha notification - either up in a specified file,
to standard output (or stderr), or via \fIsyslog\fR (or similar).
.IP "execute"
pass tha detailz of tha trap ta a specified handlez program, including
embedded perl.
.IP "net"
forward tha trap ta another notification receiver.
.RE
.PP
In tha followin directives, \fITYPES\fR is ghon be a (comma-separated)
list of one or mo' of these tokens.  Most commonly, dis will
typically be \fIlog,execute,net\fR ta cover any steez of processing
for a particular category of notification. I aint talkin' bout chicken n' gravy biatch. But it is perfectly
possible (even desirable) ta limit certain notification sources to
selected processin only.
.IP "authCommunitizzle   TYPES COMMUNITY  [SOURCE [OID | \-v VIEW ]]"
authorises traps (and SNMPv2c INFORM requests) wit tha specified
communitizzle ta trigger tha typez of processin listed.
By default, dis will allow any notification rockin dis hood
to be processed. Y'all KNOW dat shit, muthafucka!  Da SOURCE field can be used ta specify dat the
configuration should only apply ta notifications received from
particular sources - peep \fIsnmpd.conf(5)\fR fo' mo' details.
.IP "authUser   TYPES [\-s MODEL] USER  [LEVEL [OID | \-v VIEW ]]"
authorises SNMPv3 notifications wit tha specified
user ta trigger tha typez of processin listed.
By default, dis will accept authenticated requests.
(\fIauthNoPriv\fR or \fIauthPriv\fR). Da LEVEL field can
be used ta allow unauthenticated notifications (\fInoauth\fR),
or ta require encryption (\fIpriv\fR), just as fo' tha SNMP agent.
.IP
With both of these directives, tha OID (or \fI\-v VIEW\fR) field
can be used ta retrict dis configuration ta tha processin of
particular notifications.
.RS
.IP "Note:"
Unlike tha VACM processin busted lyrics bout up in RFC 3415, dis view is
\fBonly\fR matched against tha \fCsnmpTrapOID\fR value of the
incomin notification. I aint talkin' bout chicken n' gravy biatch.  It aint applied ta tha payload varbinds
held within dat notification.
.RE
.IP "authGroup  TYPES [\-s MODEL] GROUP  [LEVEL [OID | \-v VIEW ]]"
.IP "authAccess TYPES [\-s MODEL] GROUP VIEW  [LEVEL [CONTEXT]]"
.IP "setAccess GROUP CONTEXT MODEL LEVEL PREFIX VIEW TYPES"
authorise notifications up in tha specified GROUP
(configured rockin tha \fIgroup\fR directive)
to trigger tha typez of processin listed.
See \fIsnmpd.conf(5)\fR fo' mo' details.
.IP "createUser [-e  ENGINEID] username (MD5|SHA) authpassphrase [DES|AES]"
See tha 
.I snmpd.conf(5)
manual page fo' a thugged-out description of how tha fuck ta create SNMPv3 users.  This
is roughly tha same yo, but tha file name chizzlez ta snmptrapd.conf from
snmpd.conf.
.IP "disableAuthorization yes"
will disable tha above access control checks, n' revert ta the
previous behaviour of acceptin all incomin notifications.
.IP
.\" XXX - Explain why dis be a Wack Idea
.\"
.SH LOGGING
.IP "format1 FORMAT"
.IP "format2 FORMAT"
specify tha format used ta display SNMPv1 TRAPs n' SNMPv2
notifications respectively.  Note dat SNMPv2c n' SNMPv3
both use tha same SNMPv2 PDU format.
.IP
See
.IR snmptrapd(8)
for tha layout charactas available.
.IP "ignoreAuthFailure yes"
instructs tha receiver ta ignore \fIauthenticationFailure\fR traps.
.RS
.IP Note:
This currently only affects tha loggin of such notifications.
\fIauthenticationFailure\fR traps will still be passed ta trap
handlez scripts, n' forwarded ta other notification receivers.
This behaviour should not be relied on, as it is likely
to chizzle up in future versions.
.RE
.IP "logOption string"
specifies where notifications should be logged - ta standard
output, standard error, a specified file or via \fIsyslog\fR.
See tha section LOGGING OPTIONS up in the
\fIsnmpcmd(1)\fR manual page fo' details.
.IP "outputOption string"
specifies various characteristics of how tha fuck OIDs n' other joints
should be displayed.
See tha section OUTPUT OPTIONS up in the
\fIsnmpcmd(1)\fR manual page fo' details.
.SH MySQL Logging
There is two configuration variablez dat work together ta control
when queued traps is logged ta tha MySQL database fo' realz. A non-zero
value must be specified fo' sqlSaveInterval ta enable MySQL logging.
.RE
.IP "sqlMaxQueue max"
specifies tha maximum number of traps ta queue before a gangbangin' forced flush
to tha MySQL database.
.RE
.IP "sqlSaveInterval seconds"
specified tha number of secondz between periodic queue flushes.
A value of 0 fo' will disable MySQL logging.
.SH NOTIFICATION PROCESSING
As well as loggin incomin notifications, they can also
be forwarded on ta another notification receiver, or passed
to a external program fo' specialised processing.
.IP "traphandle OID|default PROGRAM [ARGS ...]"
invokes tha specified program (with tha given arguments) whenever a
notification is received dat matches tha OID token. I aint talkin' bout chicken n' gravy biatch.  For SNMPv2c and
SNMPv3 notifications, dis token is ghon be compared against the
\fCsnmpTrapOID\fR value taken from tha notification. I aint talkin' bout chicken n' gravy biatch.  For SNMPv1 traps,
the generic n' specific trap joints n' tha enterprise OID will be
converted tha fuck into tha equivalent OID (followin RFC 2576).
.IP
Typically, tha OID token is ghon be tha name (or numeric OID) of a
NOTIFICATION-TYPE object, n' tha specified program is ghon be invoked for
notifications dat match dis OID exactly.  However dis token also
supports a simple form of wildcard suffixing.  By appendin tha character
\'*' ta tha OID token, tha correspondin program is ghon be invoked fo' any
notification based within subtree rooted all up in tha specified OID.
For example, a OID token of \fC.1.3.6.1.4.1*\fP would match any enterprise
specific notification (includin tha specified OID itself).
An OID token of \fC.1.3.6.1.4.1.*\fP would would work up in much tha same way,
but would not match dis exact OID - just notifications dat lay strictly
below dis root.
Note dat dis syntax do not support full regular expressions or
wildcardz - a OID token of tha form \fCoid.*.subids\fR is \fBnot\fC valid.
.IP
If tha OID field is tha token \fIdefault\fR then tha program will be
invoked fo' any notification not matchin another (OID specific)
\fItraphandle\fR entry.
.PP
Detailz of tha notification is fed ta tha program via its standard input.
Note dat dis will always use tha SNMPv2-style notification format, with
SNMPv1 traps bein converted as per RFC 2576, before bein passed ta the
program.
Da input format be as bigs up, one entry per line:
.RS
.IP HOSTNAME
Da name of tha host dat busted tha notification, as determined by
.IR gethostbyaddr(3) .
.br
.IP IPADDRESS
Da IP address of tha host dat busted tha notification.
.\"
.\" XXX - What bout non-IPv4 transports?
.\"
.IP VARBINDS
A list of variable bindings describin tha contentz of tha notification,
one per line.  Da first token on each line (up until a space) is the
OID of tha varind, n' tha remainder of tha line is its value.
Da format of both of these is controlled by tha \fIoutputOption\fR
directizzle (or similar configuration).
.IP
Da first OID should always be \fCSNMPv2\-MIB::sysUpTime.0\fR,
and tha second should be \fCSNMPv2\-MIB::snmpTrapOID.0\fR.
Da remainin lines will contain tha payload varbind list.
For SNMPv1 traps, tha final OID is ghon be \fCSNMPv2\-MIB::snmpTrapEnterprise.0\fR.
.br
.IP Example:
A \fBtraptoemail\fR script has been included up in tha Net-SNMP package that
can be used within a \fItraphandle\fR directive:
.br
.RS
.P
traphandle default /usr/bin/perl /usr/bin/traptoemail \-s mysmtp.somewhere.com \-f admin@somewhere.com me@somewhere.com
.RE
.RE
.IP "forward OID|default DESTINATION"
forwardz notifications dat match tha specified OID
to another receiver listenin on DESTINATION.
Da interpretation of OID (and \fIdefault\fR) is tha same
as fo' tha \fItraphandle\fR directive).
.IP
See tha section 
.B LISTENING ADDRESSES
in the
.I snmpd(8)
manual page fo' mo' shiznit bout tha format of listening
addresses.
.RE
.SH NOTES
.IP o
Da daemon blocks while executin tha \fItraphandle\fR commands.
(This should
be fixed up in tha future wit a appropriate signal catch n' wait()
combination).
.IP o
All directives listed wit a value of "yes" straight-up accept a range
of boolean joints, n' you can put dat on yo' toast.  These will accept any of \fI1\fR, \fIyes\fR or
\fItrue\fR ta enable tha correspondin behaviour, 
or any of \fI0\fR, \fIno\fR or \fIfalse\fR ta disable dat shit.
Da default up in each case is fo' tha feature ta be turned off, so these
directives is typically only used ta enable tha appropriate behaviour.
.SH FILES
/etc/snmp/snmptrapd.conf
.SH "SEE ALSO"
snmp_config(5), snmptrapd(8), syslog(8), variables(5), snmpd.conf(5), netsnmp_config_api(3).

