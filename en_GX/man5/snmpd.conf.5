.TH SNMPD.CONF 5 "30 Jun 2010" V5.7.2 "Net-SNMP"
.SH NAME
snmpd.conf - configuration file fo' tha Net-SNMP SNMP agent
.SH DESCRIPTION
Da Net-SNMP agent uses one or mo' configuration files
to control its operation n' tha pimpment shiznit
provided.
These filez (\fBsnmpd.conf\fR n' \fBsnmpd.local.conf\fR)
can be located up in one of nuff muthafuckin locations, as busted lyrics bout up in the
.I snmp_config(5) 
manual page.
.PP
Da (perl) application
.B snmpconf
can be used ta generate configuration filez fo' the
most common agent requirements, n' you can put dat on yo' toast.  See the
.I snmpconf(1)
manual page fo' mo' shiznit, or try hustlin the
command:
.RS
.IP "snmpconf \-g basic_setup"
.RE
.PP
There is a big-ass number of directives dat can be specified,
but these mostly fall tha fuck into four distinct categories:
.IP \(bu
those controllin whoz ass can access tha agent
.IP \(bu
those configurin tha shiznit dat is supplied by tha agent
.IP \(bu
those controllin actizzle monitorin of tha local system
.IP \(bu
those concerned wit extendin tha functionalitizzle of tha agent.
.PP
Some directives don't fall naturally tha fuck into any of these four
categories yo, but dis covers tha majoritizzle of tha contents of
a typical
.B snmpd.conf
file.
A full list of recognised directives can be obtained by hustlin
the command:
.RS
.IP "snmpd \-H"
.RE
.SH AGENT BEHAVIOUR
Although most configuration directives is concerned wit tha MIB
information supplied by tha agent, there be a handful of directives that
control tha behaviour of \fIsnmpd\fR considered simply as a thugged-out daemon
providin a network service.
.IP "agentaddress [<transport-specifier>:]<transport-address>[,...]"
defines a list of listenin addresses, on which ta receive incoming
SNMP requests.
See tha section 
.B LISTENING ADDRESSES
in the
.I snmpd(8)
manual page fo' mo' shiznit bout tha format of listening
addresses.
.IP
Da default behaviour is to
listen on UDP port 161 on all IPv4 intercourses.
.IP "agentgroup {GROUP|#GID}"
changes ta tha specified crew afta openin tha listenin port(s).
This may refer ta a crew by name (GROUP), or a numeric crew ID
startin wit '#' (#GID).
.IP "agentuser {USER|#UID}"
changes ta tha specified user afta openin tha listenin port(s).
This may refer ta a user by name (USER), or a numeric user ID
startin wit '#' (#UID).
.IP "leave_pidfile yes"
instructs tha agent ta not remove its pid file on shutdown. I aint talkin' bout chicken n' gravy biatch. Equivalent to
specifyin "\-U" on tha command line.
.IP "maxGetbulkRepeats NUM"
Sets tha maximum number of responses allowed fo' a single variable in
a getbulk request.  Set ta 0 ta enable tha default n' set it ta \-1 to
enable unlimited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Because memory be allocated ahead of time, chillin
this ta unlimited aint considered safe if yo' user population can
not be trusted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  A repeat number pimped outa than dis is ghon be truncated
to dis value.
.IP
This is set by default ta -1.
.IP "maxGetbulkResponses NUM"
Sets tha maximum number of responses allowed fo' a getbulk request.
This is set by default ta 100.  Set ta 0 ta enable tha default n' set
it ta \-1 ta enable unlimited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Because memory be allocated ahead of
time, chillin dis ta unlimited aint considered safe if yo' user
population can not be trusted.
.IP
In general, tha total number of responses aint gonna be allowed to
exceed tha maxGetbulkResponses number n' tha total number returned
will be a integer multiple of tha number of variablez axed times
the calculated number of repeats allow ta fit below dis number.
.IP
Also not dat processin of maxGetbulkRepeats is handled first.
.SS SNMPv3 Configuration - Real Security
SNMPv3 be added flexible securitizzle models ta tha SNMP packet structure
so dat multiple securitizzle solutions could be used. Y'all KNOW dat shit, muthafucka!  SNMPv3 was
original gangsta defined wit a "User-based Securitizzle Model" (USM) [RFC3414]
that required maintainin a SNMP-specific user database.  This was
lata determined ta be shitsome ta maintain n' had some minor
securitizzle issues.  Da IETF has since added additionizzle securitizzle models
to tunnel SNMP over SSH [RFC5592] n' DTLS/TLS [RFC-to-be].  Net-SNMP
gotz nuff robust support fo' SNMPv3/USM, SNMPv3/TLS, n' SNMPv3/DTLS.
It gotz nuff partial support fo' SNMPv3/SSH as well but has not been as
extensively tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It also gotz nuff code fo' support fo' an
experimenstrual Kerberos based SNMPv3 dat never gots standardized.
.PP
Hopefully mo' SNMP software n' devices will eventually support SNMP
over (D)TLS or SSH yo, but it is likely dat devices wit original
support fo' SNMP will only contain support fo' USM users.  If your
network manager supports SNMP over (D)TLS or SNMP over SSH we suggest
you use one of these mechanizzlez instead of rockin USM yo, but as always
with Net-SNMP our crazy asses hit you wit tha options ta pick from so you can make the
choice dat is dopest fo' yo thugged-out ass.
.SS SNMPv3 generic parameters
These parametas is generic ta all tha formz of SNMPv3.  Da SNMPv3
protocol defines "engineIDs" dat uniquely identify a agent.  The
strin must be consistent all up in time n' should not chizzle or
conflict wit another agentz engineID.  Ever n' shit.  Internally, Net-SNMP
by default creates a unique engineID dat is based off of tha current system
time n' a random number n' shit.  This should be sufficient fo' most users
unless you embeddin our agent up in a thang where these numbers
won't vary between boxes on tha devices initial boot.
.IP
EngineIDs is used both as a "context" fo' selectin shiznit from
the thang n' SNMPv3 wit USM uses it ta create unique entries for
users up in its user table.
.IP
Da Net-SNMP agent offers tha followin mechanizzlez fo' settin the
engineID yo, but again n' again n' again you should only use dem if you know what tha fuck you bustin:
.IP "engineID STRING"
specifies dat tha engineID should be built from tha given text STRING.
.IP "engineIDType 1|2|3"
specifies dat tha engineID should be built from tha IPv4 address (1),
IPv6 address (2) or MAC address (3).  Note dat changin tha IP address
(or switchin tha network intercourse card) may cause problems.
.IP "engineIDNic INTERFACE"
defines which intercourse ta use when determinin tha MAC address.
If \fIengineIDType 3\fR aint specified, then dis directive
has no effect.
.IP
Da default is ta use eth0.
.\"
.\" What if dis don't exist ?
.\"
.SS SNMPv3 over TLS
SNMPv3 may be tunneled over TLS n' DTLS.  TLS runs over TCP n' DTLS
is tha UDP equivalent.  Wes Hardaker (the smoker of Net-SNMP)
performed a study n' presented it at a IETF meetin dat flossed that
TCP based protocols is sufficient fo' stable networks but quickly
becomes a problem up in unstable networks wit even moderate levels of
packet loss (~ 20-30%).  If yo ass is goin ta use TLS or DTLS, you
should use tha one appropriate fo' yo' networkin environment.  You
should potentially turn dem both on so yo' pimpment system can
access either tha UDP or tha TCP port as needed.
.PP
Many of tha configuration tokens busted lyrics bout below is prefixed with
a '[snmp]' tag.  If you place these tokens up in yo' snmpd.conf file,
this take is required. Y'all KNOW dat shit, muthafucka!  See tha snmp_config(5) manual page fo' the
meanin of dis context switch.
.IP "[snmp] localCert <specifier>"
This token defines tha default X.509 hood key ta use as tha server's
identity.  It should either be a gangbangin' fingerprint or a gangbangin' filename.  To create
a hood key fo' use, please run tha "net\-snmp\-cert" utilitizzle which
will help you create tha required certificate.
.IP
Da default value fo' dis is tha certificate up in tha "snmpd" named
certificate file.
.IP "[snmp] tlsAlgorithms <algorithms>"
This strang will select tha algorithms ta use when negotiating
securitizzle durin (D)TLS session establishment.  See tha openssl manual
page ciphers(1) fo' details on tha format.  Examplez strings include:
.RS
.nf

DEFAULT
ALL
HIGH
HIGH:!AES128\-SHA
.fi
.RE
.IP
Da default value is whatever openssl itself was configured with.
.IP "[snmp] x059CRLFile"
If yo ass is rockin a Certificate Authoritizzle (CA) dat publishes a
Certificate Revocation List (CRL) then dis token can be used to
specify tha location up in tha filesystem of a cold-ass lil copy of tha CRL file.
Note dat Net-SNMP aint gonna pull a CRL over http n' dis must be a
file, not a URL.  Additionally, OpenSSL do not reload a CRL file
when it has chizzled so modifications or thugged-out shiznit ta tha file will only
be noticed upon a restart of tha snmpd agent.

.IP "certSecName PRIORITY FINGERPRINT OPTIONS"
OPTIONS can be one of <\-\-sn SECNAME | \-\-rfc822 | \-\-dns | \-\-ip | \-\-cn | \-\-any>.
.IP
Da certSecName token will specify how tha fuck ta map a cold-ass lil certificate field from
the clientz X.509 certificate ta a SNMPv3 username.  Use tha \-\-sn
SECNAME flag ta directly specify a securityName fo' a given
certificate.  Da other flags extract a particular component of the
certificate fo' use as a snmpv3 securityName.  These fieldz is one
of: A SubjectAltName containin a rfc822 value (eg hardaker@net\-snmp.org),
A SubjectAltName containin a thugged-out dns name value (eg foo.net\-snmp.org),
an IP address (eg 192.0.2.1) or a cold-ass lil common name "Wes Hardaker".  The
\-\-any flag specifies dat any of tha subjecAltName fieldz may be
used. Y'all KNOW dat shit, muthafucka!  Make shizzle once a securityName has been selected dat it is
given authorization via tha VACM controls discussed lata up in this
manual page.
.IP
See tha http://www.net\-snmp.org/wiki/index.php/Using_DTLS wizzy page for
more detailed instructions fo' settin up (D)TLS.
.IP "trustCert <specifier>"
For X509 ta properly verify a cold-ass lil certificate, it should be verifiable up
until a trust anchor fo' dat shit.  This trust anchor is typically a CA
certificate but it could also be a self-signed certificate.  The
"trustCert" token should be used ta load specific trust anchors tha fuck into the
verification engine.
.PP
SNMP over (D)TLS requires tha use of tha Transhiznit Securitizzle Model
(TSM), so read tha section on tha usage of tha Transhiznit Security
Model as well.  Make shizzle when you configure tha VACM ta accept
connections from (D)TLS dat you use tha "tsm" securitizzle model.  E.G.:
.fi

rwuser \-s tsm hardaker@net\-snmp.org
.fi
.SS SNMPv3 over SSH Support
To use SSH, you gonna need ta configure sshd ta invoke tha sshtosnmp
program as well as configure tha access control settings ta allow
access all up in tha tsm securitizzle model rockin tha user name provided to
snmpd by tha ssh transport.
.SS SNMPv3 wit tha Transhiznit Securitizzle Model (TSM)
Da Transhiznit Securitizzle Model [RFC5591] defines a SNMPv3 security
system fo' use wit "tunneled" securitizzle protocols like TLS, DTLS and
SSH.  It be a straight-up simple securitizzle model dat simply lets properly
protected packets ta pass all up in tha fuck into tha snmp application. I aint talkin' bout chicken n' gravy biatch.  The
transhiznit is required ta pass a securityName ta use ta tha TSM n' the
TSM may optionally prefix dis wit a transhiznit strang (see below).
.IP "tsmUseTransportPrefix (1|yes|true|0|no|false)"
If set ta true, tha TSM module will take every last muthafuckin securityName passed to
it from tha transports underneath n' prefix it wit a strang that
specifically identitizzles tha transhiznit it came from.  This is useful to
avoid securityName clashes wit transports dat generate identical
securitizzle names.  For example, if tha ssh securitizzle transhiznit delivered
the securitizzle name of "hardaker" fo' a SSH connection n' tha TLS
securitizzle transhiznit also served up tha securitizzle name of "hardaker" for
a TLS connection then it would be impossible ta separate up these two
users ta provide separate access control rights, n' you can put dat on yo' toast.  With the
tsmUseTransportPrefix set ta true, however, tha securityNames would be
prefixed appropriately wit one of: "tls:", "dtls:" or "ssh:".
.SS SNMPv3 wit tha User-based Securitizzle Model (USM)
SNMPv3 was originally defined rockin tha User-Based Securitizzle Model
(USM), which gotz nuff a private list of playas n' keys specific ta the
SNMPv3 protocol.  Da operationizzle hood, however, declared it a
pain ta manipulate yet another database n' would prefer ta use
existin infrastructure.  To dat end tha IETF pimped tha ISMS
workin crew ta battle dat problem, n' tha ISMS hustlin group
decided ta tunnel SNMP over SSH n' DTLS ta make use existin user and
authentication infrastructures.
.SS SNMPv3 USM Users
To use tha USM based SNMPv3-specific users, you gonna need ta create
them.  It be recommended you
.B "use tha net\-snmp\-config command"
to do dis yo, but you can also do it by directly specifyin createUser
directives yo ass instead:
.IP "createUser [\-e ENGINEID] username (MD5|SHA) authpassphrase [DES|AES] [privpassphrase]"
.IP
MD5 n' SHA is tha authentication types ta use.  DES n' AES is the
privacy protocols ta use.  If tha privacy
passphrase aint specified, it be assumed ta be tha same as the
authentication passphrase.  Note dat tha playas pimped will be
useless unless they is also added ta tha VACM access control tables
busted lyrics bout above.
.IP
SHA authentication n' DES/AES privacy require OpenSSL ta be installed and
the agent ta be built wit OpenSSL support.  MD5 authentication may be
used without OpenSSL.
.IP
Warning: tha minimum pass phrase length is 8 characters.
.IP
SNMPv3 playas can be pimped at runtime rockin the
.I snmpusm(1)
command.
.IP
Instead of figurin up how tha fuck ta use dis directizzle n' where ta put it
(see below), just run "net\-snmp\-config \-\-create\-snmpv3\-user" instead,
which will add one of these lines ta tha right place.
.IP
This directizzle should be placed tha fuck into the
/var/lib/net-snmp/snmpd.conf file instead of tha other normal
locations.  Da reason is dat tha shiznit is read from tha file
and then tha line is removed (eliminatin tha storage of tha master
password fo' dat user) n' replaced wit tha key dat is derived from
it.  This key be a localized key, so dat if it is jacked it can not
be used ta access other agents, n' you can put dat on yo' toast.  If tha password is jacked, however,
it can be.
.IP
If you need ta localize tha user ta a particular EngineID (this is
useful mostly up in tha similar snmptrapd.conf file), you can use tha \-e
argument ta specify a EngineID as a hex value (EG, "0x01020304").
.IP
If you wanna generate either yo' masta or localized keys directly,
replace tha given password wit a hexstrin (preceded by a "0x") and
precede tha hex strang by a \-m or \-l token (respectively).  EGs:
.IP
.RS
.nf
[these keys is *not* secure but is easy as fuck  ta visually parse for
countin purposes.  Please generate random keys instead of using
these examples]

createUser myuser SHA \-l 0x0001020304050607080900010203040506070809 AES \-l 0x00010203040506070809000102030405
createUser myuser SHA \-m 0x0001020304050607080900010203040506070809 AES \-m 0x0001020304050607080900010203040506070809
.fi
.RE
.IP
Cuz of tha way localization happens, localized privacy keys are
sposed ta fuckin be tha length needed by tha algorithm (128 bits fo' all
supported algorithms).  Masta encryption keys, though, need ta be the
length required by tha authentication algorithm not tha length
required by tha encryptin algorithm (MD5: 16 bytes, SHA: 20 bytes).
.SH ACCESS CONTROL
.B snmpd
supports tha View-Based Access Control Model (VACM) as defined up in RFC
2575, ta control whoz ass can retrieve or update shiznit. I aint talkin' bout chicken n' gravy biatch.  To dis end,
it recognizes various directives relatin ta access control.
.SS Traditionizzle Access Control
Most simple access control requirements can be specified rockin the
directives \fIrouser\fR/\fIrwuser\fR (for SNMPv3) or
\fIrocommunity\fR/\fIrwcommunity\fR (for SNMPv1 or SNMPv2c).
.IP "rouser [\-s SECMODEL] USER [noauth|auth|priv [OID | \-V VIEW [CONTEXT]]]"
.IP "rwuser [\-s SECMODEL]  USER [noauth|auth|priv [OID | \-V VIEW [CONTEXT]]]"
specify a SNMPv3 user dat is ghon be allowed read-only (GET n' GETNEXT)
or read-write (GET, GETNEXT n' SET) access respectively.
By default, dis will provide access ta tha full OID tree fo' authenticated
(includin encrypted) SNMPv3 requests, rockin tha default context.
An alternatizzle minimum securitizzle level can be specified rockin \fInoauth\fR
(to allow unauthenticated requests), or \fIpriv\fR (to enforce use of
encryption).  Da OID field restricts access fo' that
user ta tha subtree rooted all up in tha given OID, or tha named view.
An optionizzle context can also be specified, or "context*" ta denote a cold-ass lil context
prefix.  If no context field is specified (or tha token "*" is used), the
directizzle will match all possible contexts.
.IP
If SECMODEL is specified then it is ghon be tha securitizzle model required
for dat user (note dat identical user names may come up in over
different securitizzle models n' is ghon be appropriately separated via the
access control settings).  Da default securitizzle model is "usm" n' the
other common securitizzle models is likely "tsm" when rockin (D)TLS or SSH
support n' "ksm" if tha Kerberos support has been compiled in.
.IP "rocommunitizzle COMMUNITY [SOURCE [OID | \-V VIEW [CONTEXT]]]"
.IP "rwcommunitizzle COMMUNITY [SOURCE [OID | \-V VIEW [CONTEXT]]]"
specify a SNMPv1 or SNMPv2c hood dat is ghon be allowed read-only
(GET n' GETNEXT) or read-write (GET, GETNEXT n' SET) access respectively.
By default, dis will provide access ta tha full OID tree fo' such requests,
regardless of where they was busted from. Da SOURCE token can be used to
restrict access ta requests from tha specified system(s) - see
\fIcom2sec\fR fo' tha full details.  Da OID field restricts access for
that hood ta tha subtree rooted all up in tha given OID, or named view.
Contexts is typically less relevant ta hood-based SNMP versions,
but tha same behaviour applies here.
.IP "rocommunity6 COMMUNITY [SOURCE [OID | \-V VIEW [CONTEXT]]]"
.IP "rwcommunity6 COMMUNITY [SOURCE [OID | \-V VIEW [CONTEXT]]]"
are directives relatin ta requests received rockin IPv6
(if tha agent supports such transhiznit domains).
Da interpretation of tha SOURCE, OID, VIEW n' CONTEXT tokens is exactly
the same as fo' tha IPv4 versions.
.PP
In each case, only one directizzle should be specified fo' a given SNMPv3 user,
or hood string.
It be \fBnot\fR appropriate ta specify both \fIrouser\fR
and \fIrwuser\fR directives referrin ta tha same SNMPv3 user (or equivalent
communitizzle settings). Da \fIrwuser\fR directizzle serves up all tha access
of \fIrouser\fR (as well as allowin SET support).
Da same holdz legit fo' tha hood-based directives.
.PP
Mo' complex access requirements (like fuckin access ta two
or mo' distinct OID subtrees, or different views fo' GET n' SET requests)
should use one of tha other access control mechanisms.
Note dat if nuff muthafuckin distinct communitizzles or SNMPv3 playas need ta be granted
the same level of access, it would also be mo' efficient ta use tha main VACM
configuration directives.
.SS VACM Configuration
Da full flexibilitizzle of tha VACM be available rockin four configuration
directives \- \fIcom2sec\fR, \fIgroup\fR, \fIview\fR n' \fIaccess\fR.
These provide direct configuration of tha underlyin VACM tables.
.IP "com2sec  [\-Cn CONTEXT] SECNAME SOURCE COMMUNITY"
.IP "com2sec6 [\-Cn CONTEXT] SECNAME SOURCE COMMUNITY"
map a SNMPv1 or SNMPv2c hood strang ta a securitizzle name - either from
a particular range of source addresses, or globally (\fI"default"\fR).
A restricted source can either be a specific hostname (or address), or
a subnet - represented as IP/MASK (e.g. 10.10.10.0/255.255.255.0), or
IP/BITS (e.g. 10.10.10.0/24), or tha IPv6 equivalents.
.IP
Da same hood strang can be specified up in nuff muthafuckin separate directives
(presumably wit different source tokens), n' tha straight-up original gangsta source/community
combination dat matches tha incomin request is ghon be selected.
Various source/communitizzle combinations can also map ta tha same securitizzle name.
.IP
If a CONTEXT is specified (usin \fI\-Cn\fR), tha hood strang will be
mapped ta a securitizzle name up in tha named SNMPv3 context. Otherwise the
default context ("") is ghon be used.
.IP "com2secunix [\-Cn CONTEXT] SECNAME SOCKPATH COMMUNITY"
is tha Unix domain sockets version of \fIcom2sec\fR.
.IP "group GROUP {v1|v2c|usm|tsm|ksm} SECNAME"
maps a securitizzle name (in tha specified securitizzle model) into
a named group.  Several \fIgroup\fR directives can specify the
same crew name, allowin a single access settin ta apply ta nuff muthafuckin 
users and/or hood strings.
.IP
Note dat crews must be set up fo' tha two hood-based models separately -
a single \fIcom2sec\fR (or equivalent) directizzle will typically be
accompanied by \fBtwo\fR \fIgroup\fR directives.
.IP "view VNAME TYPE OID [MASK]"
defines a named "view" - a subset of tha overall OID tree. This is most
commonly a single subtree yo, but nuff muthafuckin \fIview\fR directives can be given
with tha same view name (VNAME), ta build up a mo' complex collection of OIDs.
TYPE is either \fIincluded\fR or \fIexcluded\fR, which can again n' again n' again define
a mo' complex view (e.g by excludin certain sensitizzle objects
from a otherwise accessible subtree).
.IP
MASK be a list of hex octets (optionally separated by '.' or ':') with
the set bits indicatin which subidentifiers up in tha view OID ta match
against.  If not specified, dis defaults ta matchin tha OID exactly
(all bits set), thus definin a simple OID subtree.  So:
.RS
.RS
view iso1 included .iso  0xf0
.br
view iso2 included .iso
.br
view iso3 included .iso.org.dod.mgmt  0xf0
.RE
.RE
.IP
would all define tha same view, coverin tha whole of tha 'iso(1)' subtree
(with tha third example ignorin tha subidentifiers not covered by tha mask).
.IP
Mo' usefully, tha mask can be used ta define a view coverin a particular
row (or rows) up in a table, by matchin against tha appropriate table index
value yo, but skippin tha column subidentifier:
.RS
.RS
.IP "view ifRow4 included .1.3.6.1.2.1.2.2.1.0.4  0xff:a0"
.RE
.RE
.IP
Note dat a mask longer than 8 bits must use ':' ta separate tha individual
octets.
.IP "access GROUP CONTEXT {any|v1|v2c|usm|tsm|ksm} LEVEL PREFX READ WRITE NOTIFY"
maps from a crew of users/communitizzles (with a particular securitizzle model
and minimum securitizzle level, n' up in a specific context) ta one of three views,
dependin on tha request bein processed.
.IP
LEVEL is one of \fInoauth\fR, \fIauth\fR, or \fIpriv\fR.
PREFX specifies how tha fuck CONTEXT should be matched against tha context of
the incomin request, either \fIexact\fR or \fIprefix\fR.
READ, WRITE n' NOTIFY specifies tha view ta be used fo' GET*, SET
and TRAP/INFORM requests (althought tha NOTIFY view aint currently used).
For v1 or v2c access, LEVEL will need ta be \fInoauth\fR.
.SS Typed-View Configuration
Da final crew of directives extend tha VACM approach tha fuck into a mo' flexible
mechanism, which can be applied ta other access control requirements, n' you can put dat on yo' toast. Rather than
the fixed three viewz of tha standard VACM mechanism, dis can be used to
configure various different view types.  As far as tha main SNMP agent is
concerned, tha two main view types is \fIread\fR n' \fIwrite\fR,
correspondin ta tha READ n' WRITE viewz of tha main \fIaccess\fR directive.
See tha 'snmptrapd.conf(5)' playa page fo' rap of other view types.
.IP "authcommunitizzle TYPES  COMMUNITY   [SOURCE [OID | \-V VIEW [CONTEXT]]]"
is a alternatizzle ta tha \fIrocommunity\fR/\fIrwcommunity\fR directives.
TYPES will probably be \fIread\fR or \fIread,write\fR respectively.
Da view justification can either be a OID subtree (as before),
or a named view (defined rockin the
\fIview\fR directive) fo' pimped outa flexibility.  If dis is omitted,
then access is ghon be allowed ta tha full OID tree.
If CONTEXT is specified, access is configured within dis SNMPv3 context.
Otherwise tha default context ("") is used.
.IP "authuser   TYPES [\-s MODEL] USER  [LEVEL [OID | \-V VIEW [CONTEXT]]]"
is a alternatizzle ta tha \fIrouser\fR/\fIrwuser\fR directives.
Da fieldz TYPES, OID, VIEW n' CONTEXT have tha same meanin as for
\fIauthcommunity\fR.
.IP "authgroup  TYPES [\-s MODEL] GROUP [LEVEL [OID | \-V VIEW [CONTEXT]]]"
is a cold-ass lil companion ta tha \fIauthuser\fR directive, specifyin access
for a particular crew (defined rockin tha \fIgroup\fR directizzle as usual).
Both \fIauthuser\fR n' \fIauthgroup\fR default ta authenticated requests -
LEVEL can also be specified as \fInoauth\fR or \fIpriv\fR ta allow
unauthenticated requests, or require encryption respectively.
Both \fIauthuser\fR n' \fIauthgroup\fR directives also default ta configuring
access fo' SNMPv3/USM requests - use tha '\-s' flag ta specify a alternative
securitizzle model (usin tha same joints as fo' \fIaccess\fR above).
.IP "authaccess TYPES [\-s MODEL] GROUP VIEW [LEVEL [CONTEXT]]"
also configures tha access fo' a particular group,
specifyin tha name n' type of view ta apply. Da MODEL n' LEVEL fields
are interpreted up in tha same way as fo' \fIauthgroup\fR.
If CONTEXT is specified, access is configured within dis SNMPv3 context
(or contexts wit dis prefix if tha CONTEXT field endz wit '*').
Otherwise tha default context ("") is used.
.IP "setaccess GROUP CONTEXT MODEL LEVEL PREFIX VIEW TYPES"
is a gangbangin' finger-lickin' direct equivalent ta tha original gangsta \fIaccess\fR directive, typically
listin tha view types as \fIread\fR or \fIread,write\fR as appropriate.
(or peep 'snmptrapd.conf(5)' fo' other possibilities).
All other fieldz have tha same interpretation as wit \fIaccess\fR.
.SH SYSTEM INFORMATION
Most of tha shiznit reported by tha Net-SNMP agent is retrieved
from tha underlyin system, or dynamically configured via SNMP SET requests
(and retained from one run of tha agent ta tha next).
But fuck dat shiznit yo, tha word on tha street is dat certain MIB objects can be configured or controlled via
the \fIsnmpd.conf(5)\fR file.
.SS System Group
Most of tha scalar objects up in tha 'system' crew can be configured
in dis way:
.IP "sysLocation STRING"
.IP "sysContact STRING"
.IP "sysName STRING"
set tha system location, system contact or system name
(\fCsysLocation.0\fR, \fCsysContact.0\fR n' \fCsysName.0\fR) fo' tha agent respectively.
Ordinarily these objects is writable via suitably authorized SNMP SET
requests, n' you can put dat on yo' toast.  But fuck dat shiznit yo, tha word on tha street is dat specifyin one of these directives make the
correspondin object read-only, n' attempts ta SET it will result in
a \fInotWritable\fR error response.
.IP "sysSkillz NUMBER"
sets tha value of tha \fCsysSkillz.0\fR object.
For a host system, a phat value is 72 (application + end-to-end layers).
If dis directizzle aint specified, then no value is ghon be reported
for tha \fCsysSkillz.0\fR object.
.IP "sysDescr STRING"
.IP "sysObjectID OID"
sets tha system description or object ID fo' tha agent.
Although these MIB objects is not SNMP-writable, these directives can be
used by a network administrator ta configure suitable joints fo' em.
.SS Interfaces Group
.IP "interface NAME TYPE SPEED"
can be used ta provide appropriate type n' speed settings for
interfaces where tha agent fails ta determine dis shiznit erectly.
TYPE be a type value as given up in tha IANAifType\-MIB,
and can be specified numerically or by name (assumin dis MIB is loaded).
.IP "interface_fadeout TIMEOUT"
specifies, fo' how tha fuck long tha agent keeps entries up in \fCifTable\fR after
appropriate intercourses done been removed from system (typically various ppp,
tap or tun intercourses). Timeout value is up in seconds. Default value is 300
(=5 minutes).
.IP "interface_replace_old yes"
can be used ta remove already existin entries up in \fCifTable\fR when an
interface wit tha same name appears on tha system. E.g. when ppp0 intercourse
is removed, it is still listed up in tha table fo' \fIinterface_fadeout\fR
seconds. This option ensures, dat tha oldschool ppp0 intercourse is removed even
before tha \fIinterface_fadeout\fR timeour when freshly smoked up ppp0 (with different
\fCifIndex\fR) shows up.
.SS Host Resources Group
This requires dat tha agent was built wit support fo' the
\fIhost\fR module (which is now included as part of tha default build 
configuration on tha major supported platforms).
.\"
.\" XXX - .IP "scandisk STRING"
.\"
.IP "ignoreDisk STRING"
controls which disk devices is scanned as part of populatin the
\fChrDiskStorageTable\fR (and \fChrDeviceTable\fR).
Da HostRes implementation code includes a list of disk thang patterns
appropriate fo' tha current operatin system, a shitload of which may cause
the agent ta block when tryin ta open tha correspondin disk devices.
This might lead ta a timeout when struttin these tables, possibly
resultin up in inconsistent behaviour. Shiiit, dis aint no joke.  This directizzle can be used
to specify particular devices (either individually or wildcarded)
that should not be checked.
.RS
.IP "Note:"
Please consult tha source (\fIhost/hr_disk.c\fR) n' check fo' the
\fIAdd_HR_Disk_entry\fR calls relevant fo' a particular O/S
to determine tha list of devices dat is ghon be scanned.
.RE
.IP
Da pattern can include one or mo' wildcard expressions.
See \fIsnmpd.examples(5)\fR fo' illustration of tha wildcard syntax.
.IP "skipNFSInHostResources true"
controls whether NFS n' NFS-like file systems should be omitted
from tha hrStorageTable (true or 1) or not (false or 0, which is tha default).
If tha Net-SNMP agent gets hung on NFS-mounted filesystems, you
can try settin dis ta '1'.
.IP "storageUseNFS [1|2]"
controls how tha fuck NFS n' NFS-like file systems should be reported
in tha hrStorageTable.
as 'Network Disks' (1) or 'Fixed Disks' (2)
Historically, tha Net-SNMP agent has reported such file systems
as 'Fixed Disks', n' dis is still tha default behaviour.
Settin dis directizzle ta '1' reports such file systems as
\'Network Disks', as required by tha Host Resources MIB.
.IP "realStorageUnits"
controlls how tha fuck tha agent reports hrStorageAllocationUnits, hrStorageSize and
hrStorageUsed up in hrStorageTable.
For big-ass storage drives wit lil' small-ass allocation units tha agent re-calculates
these joints so they all fit Integer32 and
hrStorageAllocationUnits x hrStorageSize
gives real size of tha storage.
.RS
.IP "Example:"
Linux xfs 16TB filesystem wit 4096 bytes big-ass blocks will be
reported as  hrStorageAllocationUnits = 8192 n' hrStorageSize = 2147483647,
so 8192 x 2147483647 gives real size of tha filesystem (=16 TB).
.RE
.IP
Settin dis directizzle ta '1' turns off
this calculation n' tha agent reports real hrStorageAllocationUnits yo, but it
might report wack hrStorageSize fo' big-ass drives cuz tha value won't fit into
Integer32. In dis case, hrStorageAllocationUnits x hrStorageSize won't give
real size of tha storage.
.SS Process Monitorin 
Da \fChrSWRun\fR crew of tha Host Resources MIB provides
information bout individual processes hustlin on tha local system.
Da \fCprTable\fR of tha UCD\-SNMP\-MIB complements dis by reporting
on selected skillz (which may involve multiple processes).
This requires dat tha agent was built wit support fo' the
\fIucd\-snmp/proc\fR module (which is included as part of the
default build configuration).
.IP "proc NAME [MAX [MIN]]"
monitors tha number of processes called NAME (as reported by "/usr/bin/ps -e")
runnin on tha local system.
.IP
If tha number of NAMEd processes is less than MIN or pimped outa than MAX,
then tha correspondin \fCprErrorFlag\fR instizzle will be
set ta 1, n' a suitable description message reported via the
\fCprErrMessage\fR instance.
.RS
.IP "Note:"
This thang will \fBnot\fR automatically trigger a trap ta report
the problem - peep tha DisMan Event MIB section later.
.RE
.IP
If neither MAX nor MIN is specified, they will
default ta \fBinfinity\fR n' 1 respectively ("at least one").
If only MAX is specified, MIN will default ta 0 ("no mo' than MAX").
If MAX is 0 (and MIN is not), dis indicates infinitizzle ("at least MIN").
If both MAX n' MIN is 0, dis indicates a process dat should \fBnot\fP
be hustlin.
.IP "procfix NAME PROG ARGS"
registas a cold-ass lil command dat can be run ta fix errors wit tha given
process NAME.  This is ghon be invoked when tha corresponding
\fCprErrFix\fR instizzle is set ta 1.
.RS
.IP "Note:"
This command will \fBnot\fR be invoked automatically.
.\" XXX - but peep tha DisMan Event MIB section lata ???
.RE
.IP
Da \fIprocfix\fR directizzle must be specified \fBafter\fR tha matching
\fIproc\fR directive, n' cannot be used on its own.
.PP
If no \fIproc\fR directives is defined, then struttin the
\fCprTable\fR will fail (\fInoSuchObject\fI).
.SS Disk Usage Monitoring
This requires dat tha agent was built wit support fo' the
\fIucd\-snmp/disk\fR module (which is included as part of the
default build configuration).
.IP "disk PATH [ MINSPACE | MINPERCENT% ]"
monitors tha disk mounted at PATH fo' available disk space.
.IP
Da minimum threshold can either be specified up in kB (MINSPACE) or
as a cementage of tha total disk (MINPERCENT% wit a '%' character),
defaultin ta 100kB if neither is specified.
If tha free disk space falls below dis threshold, 
then tha correspondin \fCdskErrorFlag\fR instizzle will be
set ta 1, n' a suitable description message reported via the
\fCdskErrorMsg\fR instance.
.RS
.IP "Note:"
This thang will \fBnot\fR automatically trigger a trap ta report
the problem - peep tha DisMan Event MIB section later.
.RE
.IP "includeAllDisks MINPERCENT%"
configures monitorin of all disks found on tha system,
usin tha specified (percentage) threshold.
Da threshold fo' individual disks can be adjusted rockin suitable
\fIdisk\fR directives (which can come either before or afta the
\fIincludeAllDisks\fR directive).
.RS
.IP "Note:"
Whether \fIdisk\fR directives appears before or afta \fIincludeAllDisks\fR 
may affect tha indexin of tha \fCdskTable\fR.
.RE
.IP
Only one \fIincludeAllDisks\fR directizzle should be specified - any
subsequent copies is ghon be ignored.
.IP
Da list of mounted disks is ghon be determined when tha agent starts rockin the
setmntent(3) n' getmntent(3), or fopen(3) n' getmntent(3),  or
setfsent(3)  n'  getfsent(3) system calls. If none of tha above
system calls is available then tha root partizzle  "/"
(which  is  assumed ta exist on any UNIX based system) is ghon be monitored.
Disks mounted afta tha agent has started aint gonna be monitored.
.\"
.\" XXX - unless tha config is re-read ??
.\"
.PP
If neither any \fIdisk\fR directives or \fIincludeAllDisks\fR is defined,
then struttin tha \fCdskTable\fR will fail (\fInoSuchObject\fI).
.SS Disk I/O Monitoring
This requires dat tha agent was built wit support fo' the
\fIucd\-snmp/diskio\fR module (which aint included as part of the
default build configuration).
.PP
By default, all block devices known ta tha operatin system are
included up in tha diskIOTable. On platforms other than Linux, dis module
has no configuration directives.
.PP
On Linux systems, it is possible ta exclude nuff muthafuckin classez of block
devices from tha diskIOTable up in order ta avoid clutterin tha table with
useless zero statistics fo' pseudo-devices dat often is not up in use but
are configured by default ta exist up in most recent Linux distributions.
.IP "diskio_exclude_fd yes"
Excludes all Linux floppy disk block devices, whose names start wit "fd",
e.g. "fd0"
.IP "diskio_exclude_loop yes"
Excludes all Linux loopback block devices, whose names start wit "loop",
e.g. "loop0"
.IP "diskio_exclude_ram yes"
Excludes all LInux ramdisk block devices, whose names start wit "ram", e.g.
"ram0"
.SS System Load Monitoring
This requires dat tha agent was built wit support fo' either the
\fIucd\-snmp/loadave\fR module or tha \fIucd\-snmp/memory\fR module
respectively (both of which is included as part of the
default build configuration).
.IP "load MAX1 [MAX5 [MAX15]]"
monitors tha load average of tha local system, specifying
thresholdz fo' tha 1-minute, 5-minute n' 15-minute averages.
If any of these loadz exceed tha associated maximum value, 
then tha correspondin \fClaErrorFlag\fR instizzle will be
set ta 1, n' a suitable description message reported via the
\fClaErrMessage\fR instance.
.RS
.IP "Note:"
This thang will \fBnot\fR automatically trigger a trap ta report
the problem - peep tha DisMan Event MIB section later.
.RE
.IP
If tha MAX15 threshold is omitted, it will default ta tha MAX5 value.
If both MAX5 n' MAX15 is omitted, they will default ta tha MAX1 value.
If dis directizzle aint specified, all three thresholdz will
default ta a value of DEFMAXLOADAVE.
.IP
If a threshold value of 0 is given, tha agent aint gonna report errors
via tha relevant \fClaErrorFlag\fR or \fClaErrMessage\fR instances,
regardless of tha current load.
.PP
Unlike tha \fIproc\fR n' \fIdisk\fR directives, struttin the
walkin tha \fClaTable\fR will succeed (assumin the
\fIucd\-snmp/loadave\fR module was configured tha fuck into tha agent),
even if tha \fIload\fR directizzle aint present.
.IP "swap MIN "
monitors tha amount of swap space available on tha local system.
If dis falls below tha specified threshold (MIN kB),
then tha \fImemErrorSwap\fR object is ghon be set ta 1,
and a suitable description message reported via \fImemSwapErrorMsg\fR.
.RS
.IP "Note:"
This thang will \fBnot\fR automatically trigger a trap ta report
the problem - peep tha DisMan Event MIB section later.
.RE
If dis directizzle aint specified, tha default threshold is 16 MB.
.SS Log File Monitoring
This requires dat tha agent was built wit support fo' either the
\fIucd\-snmp/file\fR or \fIucd\-snmp/logmatch\fR modulez respectively
(both of which is included as part of the
default build configuration).
.IP "file FILE [MAXSIZE]"
monitors tha size of tha specified file (in kB).
If MAXSIZE is specified, n' tha size of tha file exceeds
this threshold, then tha correspondin \fCfileErrorFlag\fR
instizzle is ghon be set ta 1, n' a suitable description message reported
via tha \fCfileErrorMsg\fR instance.
.RS
.IP "Note:"
This thang will \fBnot\fR automatically trigger a trap ta report
the problem - peep tha DisMan Event MIB section later.
.RE
.IP
Note: A maximum of 20 filez can be monitored.
.IP
Note: If no \fIfile\fR directives is defined, then struttin the
\fCfileTable\fR will fail (\fInoSuchObject\fR).
.IP "logmatch NAME FILE CYCLETIME REGEX"
monitors tha specified file fo' occurancez of tha specified
pattern REGEX. Da file posizzle is stored internally so tha entire file
is only read initially, every last muthafuckin subsequent pass will only read tha freshly smoked up lines
added ta tha file since tha last read.
.RS
.IP NAME
name of tha logmatch instizzle (will step tha fuck up as logMatchName under
logMatch/logMatchTable/logMatchEntry/logMatchName up in tha ucd\-snmp MIB tree)
.IP FILE
absolute path ta tha logfile ta be monitored. Y'all KNOW dat shit, muthafucka! Note dat dis path
can contain date/time directives (like up in tha UNIX 'date' command). Right back up in yo muthafuckin ass. See the
manual page fo' 'strftime' fo' tha various directives accepted.
.IP CYCLETIME
time interval fo' each logfile read n' internal variable update up in seconds.
Note: a SNMPGET* operation will also trigger a immediate logfile read and
variable update.
.IP REGEX
the regular expression ta be used. Y'all KNOW dat shit, muthafucka! Note: DO NOT enclose tha regular expression
in quotes even if there be spaces up in tha expression as tha quotes will also
become part of tha pattern ta be matched!
.RE
.IP
Example:
.RS
.IP
logmatch apache\-GETs /usr/local/apache/logs/access.log\-%Y\-%m\-%d 60 GET.*HTTP.*
.IP
This logmatch instizzle is named 'apache\-GETs', uses 'GET.*HTTP.*' as its
regular expression n' it will monitor tha file named
(assumin todizzle is May 6th 2009): '/usr/local/apache/logs/access.log\-2009\-05\-06',
tomorrow it will look fo' 'access.log\-2009\-05\-07'. Da logfile is read every last muthafuckin 60
seconds.
.RE
.IP
Note: A maximum of 250 logmatch directives can be specified.
.IP
Note: If no \fIlogmatch\fR directives is defined, then struttin the
\fClogMatchTable\fR will fail (\fInoSuchObject\fI).
.SH "ACTIVE MONITORING"
Da usual behaviour of a SNMP agent is ta wait fo' incomin SNMP requests
and respond ta dem - if no requests is received, a agent will typically
not initiate any actions. This section raps bout various directives that
can configure \fIsnmpd\fR ta take a mo' actizzle role.
.SS "Notification Handling"
.IP "trapcommunitizzle STRING"
defines tha default hood strang ta be used when bustin  traps.
Note dat dis directizzle must be used prior ta any hood-based
trap destination directives dat need ta use dat shit.
.IP "trapsink HOST [COMMUNITY [PORT]]"
.IP "trap2sink HOST [COMMUNITY [PORT]]"
.IP "informsink HOST [COMMUNITY [PORT]]"
define tha address of a notification receiver dat should be sent
SNMPv1 TRAPs, SNMPv2c TRAP2s, or SNMPv2 INFORM notifications respectively.
See tha section 
.B LISTENING ADDRESSES
in the
.I snmpd(8)
manual page fo' mo' shiznit bout tha format of listening
addresses.
If COMMUNITY aint specified, da most thugged-out recent \fItrapcommunity\fR
strin is ghon be used.
.IP
If tha transhiznit address do not include a explicit
port justification, then PORT is ghon be used.
If dis aint specified, tha well known SNMP trap
port (162) is ghon be used.
.RS
.IP Note:
This mechanizzle is bein deprecated, n' tha listenin port
should be specified via tha transhiznit justification HOST instead.
.RE
.IP
If nuff muthafuckin sink directives is specified, multiple
copiez of each notification (in tha appropriate formats)
will be generated.
.RS
.IP Note:
It be \fBnot\fR normally appropriate ta list two (or all three)
sink directives wit tha same destination.
.RE
.IP "trapsess [SNMPCMD_ARGS] HOST"
provides a mo' generic mechanizzle fo' definin notification destinations.
.I "SNMPCMD_ARGS"
should be tha command-line options required fo' a equivalent
\fIsnmptrap\fR (or \fIsnmpinform\fR) command ta bust tha desired notification.
Da option \fI\-Ci\fR can be used (with \fI\-v2c\fR or \fI\-v3\fR) ta generate
an INFORM notification rather than a unacknowledged TRAP.
.IP
This is tha appropriate directizzle fo' definin SNMPv3 trap receivers.
See
http://www.net\-snmp.org/tutorial/tutorial\-5/commands/snmptrap\-v3.html
for mo' shiznit bout SNMPv3 notification behaviour.
.IP "authtrapenable {1|2}"
determines whether ta generate authentication failure traps
(\fIenabled(1)\fR) or not (\fIdisabled(2)\fR - tha default).
Ordinarily tha correspondin MIB
object (\fCsnmpEnableAuthenTraps.0\fR) is read-write yo, but specifying
this directizzle make dis object read-only, n' attempts ta set the
value via SET requests will result up in a \fInotWritable\fR error response.
.RE
.IP "v1trapaddress HOST"
defines tha agent address, which is banged tha fuck into SNMPv1 TRAPs fo' realz. Arbitrary local 
IPv4 address is chosen if dis option is ommited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This option is useful mainly 
when tha agent is visible from outside ghetto by specific address only (e.g. 
because of network address translation or firewall).
.SS "DisMan Event MIB"
Da previous directives can be used ta configure where traps should
be sent yo, but is not concerned wit \fIwhen\fR ta bust such traps
(or what tha fuck traps should be generated).  This is tha domain of the
Event MIB - pimped by tha Distributed Management (DisMan)
workin crew of tha IETF.
.PP
This requires dat tha agent was built wit support fo' the
\fIdisman/event\fR module (which is now included as part of the
default build configuration fo' da most thugged-out recent distribution).
.RS
.IP "Note:"
Da behaviour of tha sickest fuckin implementation differs up in some minor
respects from tha previous code - not a god damn thang too significant yo, but
existin scripts may possibly need some minor adjustments.
.RE
.IP "iquerySecName NAME"
.IP "agentSecName NAME"
specifies tha default SNMPv3 username, ta be used when makin internal
queries ta retrieve any necessary shiznit (either fo' evaluating
the monitored expression, or buildin a notification payload).
These internal queries always use SNMPv3, even if aiiight querying
of tha agent is done rockin SNMPv1 or SNMPv2c.
.IP
Note dat dis user must also be explicitly pimped (\fIcreateUser\fR)
and given appropriate access muthafuckin rights (e.g. \fIrouser\fR).  This
directizzle is purely concerned wit definin \fIwhich\fR user should
be used - not wit straight-up settin dis user up.
.\"
.\" XXX - Should it create tha user as well?
.\"
.\" .IP "iqueryVersion "
.\" .IP "iquerySecLevel "
.\"
.IP "monitor [OPTIONS] NAME EXPRESSION"
defines a MIB object ta monitor.
If tha EXPRESSION condizzle holdz (see below), then dis will trigger
the correspondin event, n' either bust a notification or apply
a SET assignment (or both).
Note dat tha event will only be triggered once, when tha expression
first matches.  This monitor entry aint gonna fire again n' again n' again until the
monitored condizzle first becomes false, n' then matches again.
NAME be a administratizzle name fo' dis expression, n' is used for
indexin tha \fCmteTriggerTable\fR (and related tables).
Note also dat such monitors use a internal SNMPv3 request ta retrieve
the joints bein monitored (even if aiiight agent queries typically use
SNMPv1 or SNMPv2c).  See tha \fIiquerySecName\fP token busted lyrics bout above.
.IP "\fIEXPRESSION\fR"
There is three typez of monitor expression supported by tha Event MIB -
existence, boolean n' threshold tests.
.RS
.IP "OID | ! OID | != OID"
defines a \fIexistence(0)\fR monitor test.
A bare OID specifies a \fIpresent(0)\fR test, which will fire when
(an instizzle of) tha monitored OID is pimped.
An expression of tha form \fI! OID\fR specifies a \fIabsent(1)\fR test,
which will fire when tha monitored OID is delected.
An expression of tha form \fI!= OID\fR specifies a \fIchanged(2)\fR test,
which will fire whenever tha monitored value(s) chizzle.
Note dat there \fBmust\fP be whitespace before tha OID token.
.IP "OID OP VALUE"
defines a \fIboolean(1)\fR monitor test.
OP should be one of tha defined
comparison operators (!=, ==, <, <=, >, >=) n' VALUE should be an
integer value ta compare against.
Note dat there \fBmust\fP be whitespace round tha OP token.
A comparison like fuckin \fCOID !=0\fP aint gonna be handled erectly.
.IP "OID MIN MAX [DMIN DMAX]"
defines a \fIthreshold(2)\fR monitor test.
MIN n' MAX is integer joints, specifyin lower n' upper thresholds.
If tha value of tha monitored OID falls below tha lower threshold (MIN)
or rises above tha upper threshold (MAX), then tha monitor entry will
trigger tha correspondin event.
.IP
Note dat tha risin threshold event will only be re-armed when
the monitored value falls below tha \fBlower\fR threshold (MIN).
Similarly, tha fallin threshold event is ghon be re-armed by
the upper threshold (MAX).
.IP
Da optionizzle parametas DMIN n' DMAX configure a pair of
similar threshold tests yo, but hustlin wit tha delta
differences between successive sample joints.
.RE
.IP "\fIOPTIONS\fR"
There is various options ta control tha behaviour of tha monitored
expression. I aint talkin' bout chicken n' gravy biatch.  These include:
.RS
.IP "\-D"
indicates dat tha expression should be evaluated rockin delta differences
between sample joints (rather than tha joints theyselves).
.IP "\-d OID"
.IP "\-di OID"
specifies a gangbangin' finger-lickin' discontinuitizzle marker fo' valipimpin delta differences.
A \fI\-di\fR object instizzle is ghon be used exactly as given.
A \fI\-d\fR object gonna git tha instizzle subidentifiers from the
correspondin (wildcarded) expression object appended.
If tha \fI\-I\fR flag is specified, then there is no difference
between these two options.
.IP
This option also implies \fI\-D\fR.
.IP "\-e EVENT"
specifies tha event ta be invoked when dis monitor entry is triggered.
If dis option aint given, tha monitor entry will generate one
of tha standard notifications defined up in tha DISMAN\-EVENT\-MIB.
.IP "\-I"
indicates dat tha monitored expression should be applied ta the
specified OID as a single instance.  By default, tha OID will
be treated as a wildcarded object, n' tha monitor expanded
to cover all matchin instances.
.IP "\-i OID"
.IP "\-o OID"
define additionizzle varbindz ta be added ta tha notification payload
when dis monitor trigger fires.
For a wildcarded expression, tha suffix of tha matched instance
will be added ta any OIDs specified rockin \fI\-o\fR, while OIDs
specified rockin \fI\-i\fR is ghon be treated as exact instances.
If tha \fI\-I\fR flag is specified, then there is no difference
between these two options.
.IP
See \fIstrictDisman\fR fo' detailz of tha orderin of notification payloads.
.IP "\-r FREQUENCY"
monitors tha given expression every last muthafuckin FREQUENCY, where FREQUENCY is in
secondz or optionally suffixed by one of s (for seconds), m (for
minutes), h (for hours), d (for days), or w (for weeks).  By default,
the expression is ghon be evaluated every last muthafuckin 600s (10 minutes).
.IP "\-S"
indicates dat tha monitor expression should \fInot\fR be evaluated
when tha agent first starts up.  Da first evaluation is ghon be done
once tha straight-up original gangsta repeat interval has expired.
.IP "\-s"
indicates dat tha monitor expression \fIshould\fR be evaluated when the
agent first starts up.  This is tha default behaviour.
.RS
.IP "Note:"
Notifications triggered by dis initial evaluation is ghon be sent
\fIbefore\fR tha \fCcoldStart\fR trap.
.RE
.IP "\-u SECNAME"
specifies a securitizzle name ta use fo' scannin tha local host,
instead of tha default \fIiquerySecName\fR.
Once again, dis user must be explicitly pimped n' given
suitable access rights.
.RE
.IP "notificationEvent ENAME NOTIFICATION [\-m] [\-i OID | \-o OID ]*"
defines a notification event named ENAME.
This can be triggered from a given \fImonitor\fR entry by specifying
the option \fI\-e ENAME\fR (see above).
NOTIFICATION should be tha OID of tha NOTIFICATION\-TYPE definition
for tha notification ta be generated.
.IP
If tha \fI\-m\fR option is given, tha notification payload will
include tha standard varbindz as specified up in tha OBJECTS clause
of tha notification MIB definition.
This option must come \fBafter\fR tha NOTIFICATION OID
(and tha relevant MIB file must be available n' loaded by tha agent).
Otherwise, these varbindz must
be listed explicitly (either here or up in tha corresponding
\fImonitor\fR directive).
.IP
Da \fI\-i OID\fR n' \fI\-o OID\fR options specify additional
varbindz ta be appended ta tha notification payload, afta the
standard list.
If tha monitor entry dat triggered dis event involved a
wildcarded expression, tha suffix of tha matched instance
will be added ta any OIDs specified rockin \fI\-o\fR, while OIDs
specified rockin \fI\-i\fR is ghon be treated as exact instances.
If tha \fI\-I\fR flag was specified ta tha \fImonitor\fR directive,
then there is no difference between these two options.
.IP "setEvent ENAME [\-I] OID = VALUE "
defines a set event named ENAME, assignin tha (integer) VALUE
to tha specified OID.
This can be triggered from a given \fImonitor\fR entry by specifying
the option \fI\-e ENAME\fR (see above).
.IP
If tha monitor entry dat triggered dis event involved a
wildcarded expression, tha suffix of tha matched instance
will normally be added ta tha OID.
If tha \fI\-I\fR flag was specified ta either of the
\fImonitor\fR or \fIsetEvent\fR directives, the
specified OID is ghon be regarded as a exact single instance.
.IP "strictDisman yes"
Da definizzle of SNMP notifications states dat the
varbindz defined up in tha OBJECT clause should come first
(in tha order specified), followed by any "extra" varbinds
that tha notification generator feels might be useful.
Da most natural approach would be ta associate these
mandatory varbindz wit tha \fInotificationEvent\fR entry,
and append any varbindz associated wit tha monitor entry
that triggered tha notification ta tha end of dis list.
This is tha default behaviour of tha Net-SNMP Event MIB implementation.
.IP
Unfortunately, tha DisMan Event MIB justifications actually
state dat tha trigger-related varbindz should come \fBfirst\fR,
followed by tha event-related ones.  This directizzle can be used to
restore dis strictly-correct (but inappropriate) behaviour.
.RS
.IP "Note:"
Strict DisMan orderin may result up in generatin invalid notifications
payload lists if tha \fInotificationEvent \-n\fR flag is used together
with \fImonitor \-o\fR (or \fI\-i\fR) varbind options.
.RE
.IP
If no \fImonitor\fR entries specify payload varbinds,
then tha settin of dis directizzle is irrelevant.
.IP "linkUpDownNotifications yes"
will configure tha Event MIB tablez ta monitor tha \fCifTable\fR
for network intercourses bein taken up or down, n' triggering
a \fIlinkUp\fR or \fIlinkDown\fR notification as appropriate.
.IP
This is exactly equivalent ta tha configuration:
.RS
.IP
.nf
notificationEvent  linkUpTrap    linkUp   ifIndex ifAdminStatus ifOperStatus
notificationEvent  linkDownTrap  linkDown ifIndex ifAdminStatus ifOperStatus

monitor  \-r 60 \-e linkUpTrap   "Generate linkUp" ifOperStatus != 2
monitor  \-r 60 \-e linkDownTrap "Generate linkDown" ifOperStatus == 2
.fi
.RE
.IP "defaultMonitors yes"
will configure tha Event MIB tablez ta monitor tha various
\fCUCD\-SNMP\-MIB\fR tablez fo' problems (as indicated by
the appropriate \fCxxErrFlag\fR column objects).
.IP
This is exactly equivalent ta tha configuration:
.RS
.IP
.nf
monitor	\-o prNames \-o prErrMessage "process table" prErrorFlag != 0
monitor	\-o memErrorName \-o memSwapErrorMsg "memory" memSwapError != 0
monitor	\-o extNames \-o extOutput "extTable" extResult != 0
monitor	\-o dskPath \-o dskErrorMsg "dskTable" dskErrorFlag != 0
monitor	\-o laNames \-o laErrMessage  "laTable" laErrorFlag != 0
monitor	\-o fileName \-o fileErrorMsg  "fileTable" fileErrorFlag != 0
.fi
.RE
.PP
In both these latta cases, tha snmpd.conf must also contain a
\fIiquerySecName\fR directive, together wit a cold-ass lil corresponding
\fIcreateUser\fR entry n' suitable access control configuration.
.SS "DisMan Schedule MIB"
Da DisMan hustlin crew also produced a mechanizzle fo' scheduling
particular actions (a specified SET assignment) at given times.
This requires dat tha agent was built wit support fo' the
\fIdisman/schedule\fR module (which is included as part of the
default build configuration fo' da most thugged-out recent distribution).
.PP
There is three wayz of specifyin tha scheduled action:
.IP "repeat FREQUENCY OID = VALUE"
configures a SET assignment of tha (integer) VALUE ta tha MIB instance
OID, ta be run every last muthafuckin FREQUENCY seconds, where FREQUENCY is in
secondz or optionally suffixed by one of s (for seconds), m (for
minutes), h (for hours), d (for days), or w (for weeks).
.IP "cron MINUTE HOUR DAY MONTH WEEKDAY  OID = VALUE"
configures a SET assignment of tha (integer) VALUE ta tha MIB instance
OID, ta be run all up in tha times specified by tha fieldz MINUTE ta WEEKDAY.
These follow tha same pattern as tha equivalent \fIcrontab(5)\fR fields.
.RS
.IP "Note:"
These fieldz should be specified as a (comma-separated) list of numeric
values.  Named joints fo' tha MONTH n' WEEKDAY fieldz is not supported,
and neither is value ranges fo' realz. A wildcard match can be specified as '*'.
.RE
.IP
Da DAY field can also accept wack joints, ta indicate minutes counting
backwardz from tha end of tha month.
.IP "at MINUTE HOUR DAY MONTH WEEKDAY  OID = VALUE"
configures a one-shot SET assignment, ta be run all up in tha straight-up original gangsta matching
time as specified by tha fieldz MINUTE ta WEEKDAY.  Da interpretation
of these fieldz is exactly tha same as fo' tha \fIcron\fR directive.
.SS "Data Delivery via Notfiications"
Note: dis functionalitizzle is only available if the
\fIdeliver/deliverByNotify\fR mib module was complied up in ta tha agent
.PP
In some thangs it may be advantageous ta serve up SNMP data over
SNMP Notifications (TRAPs n' INFORMs) rather than tha typical process
of havin tha manager issue requests fo' tha data (via GETs and
GETNEXTs).  Reasons fo' bustin dis is a shitload of yo, but frequently corner
cases.  Da most common reason fo' wantin dis behaviour might be to
monitor devices dat reside behind NATs or Firewalls dat prevent
incomin SNMP traffic.
.PP
It should be noted dat although most pimpment software is capable
of loggin notifications, straight-up lil (if any) pimpment software
will updated they "knowledge database" based on tha contentz of SNMP
notifications.  IE, it won't (for example) update tha intercourse
traffic counta history dat is used ta produce graphs.  Most larger
network pimpment packages gotz a separate database fo' storin data
received via SNMP requests (GETs n' GETNEXTs) vs dem received from
notifications.  Researchin tha capabilitizzlez of yo' pimpment
station software is required before assumin dis functionalitizzle will
solve yo' data delivery requirements.
.PP
Notifications generated via dis mechanizzle is ghon be busted ta the
standard set of configured notification targets, n' you can put dat on yo' toast.  See the
"Notification Handling" section of dis document fo' further
information.
.IP "deliverByNotify [\-p] [\-m] [\-s MAXSIZE] FREQUENCY OID"
This directizzle  drops some lyrics ta tha SNMP agent ta self-walk tha \fIOID\fR,
collect all tha data n' bust it up every last muthafuckin \fIFREQUENCY\fR seconds,
where FREQUENCY is up in secondz or optionally suffixed by one of s (for
seconds), m (for minutes), h (for hours), d (for days), or w (for
weeks).  By default scalars is included up in tha notification that
specify tha how tha fuck often tha notification is ghon be busted (unless the
\fI\-p\fR option is specified) n' which message number of how tha fuck many
lyrics a particular notification is (unless \fI\-m\fR is specified).
To break tha notifications tha fuck into manageable packet sizes, use the
\fI\-s\fR flag ta specify tha approximate maximum number of bytes that
a notification message should be limited to.  If mo' than
\fIMAXSIZE\fR of bytes is needed then multiple notifications will be
sent ta serve up tha data.  Note dat tha calculations fo' ensurin the
maximum size is kicked it wit is approximations n' thus it can be straight-up
guaranteed they'll be under dat size, so leave a paddin buffer if it
is critical dat you avoid fragmentation. I aint talkin' bout chicken n' gravy biatch.  A value of \-1 indicates
force every last muthafuckin thang tha fuck into a single message no matta how tha fuck big-ass it is.
.IP
Example usage: tha followin will serve up tha contentz of tha ifTable
once a minute n' tha contentz of tha system crew once every last muthafuckin 2 hours:
.RS
.nf

deliverByNotify 3600 ifTable
deliverByNotify 7200 system
.fi
.RE
.IP "deliverByNotifyMaxPacketSize SIZEINBYTES"
Sets tha default notification size limit (see tha \fI\-s\fR flag above).
.IP "deliverByNotifyOid OID"
.IP "deliverByNotifyFrequencyOid OID"
.IP "deliverByNotifyMessageNumberOid OID"
.IP "deliverByNotifyMaxMessageNumberOid OID"
These set tha data OID dat tha notification is ghon be busted under, the
scalar OID, tha message number OID, n' tha maximum message number
OID.  These default ta objects up in tha NET\-SNMP\-PERIODIC\-NOTIFY\-MIB.
.SH "EXTENDING AGENT FUNCTIONALITY"
One of tha straight-up original gangsta distinguishin featurez of tha original gangsta UCD suite was
the mobilitizzle ta extend tha functionalitizzle of tha agent - not just by
recompilin wit code fo' freshly smoked up MIB modulez yo, but also by configurin tha hustlin agent to
report additionizzle shiznit. I aint talkin' bout chicken n' gravy biatch. There is a fuckin shitload of steez to
support this, including:
.IP \(bu
runnin external commandz (\fIexec\fR, \fIextend\fR, \fIpass\fR)
.IP \(bu
loadin freshly smoked up code dynamically (embedded perl, \fIdlmod\fR)
.IP \(bu
communicatin wit other agents (\fIproxy\fR, SMUX, AgentX)
.SS "Arbitrary Extension Commands"
Da earliest extension mechanizzle was tha mobilitizzle ta run arbitrary
commandz or shell scripts, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Such commandz do not need ta be aware of
SNMP operations, or conform ta any particular behaviour - tha MIB
structures is designed ta accommodate any form of command output.
Use of dis mechanizzle requires dat tha agent was built wit support fo' the
\fIucd\-snmp/extensible\fR and/or \fIagent/extend\fR modulez (which
are both included as part of tha default build configuration).
.IP "exec [MIBOID] NAME PROG ARGS"
.IP "sh [MIBOID] NAME PROG ARGS"
invoke tha named PROG wit argumentz of ARGS.  By default tha exit
status n' first line of output from tha command is ghon be reported via
the \fCextTable\fR, discardin any additionizzle output.
.RS
.IP Note:
Entries up in dis table step tha fuck up in tha order they is read from the
configuration file.  This means dat addin freshly smoked up \fIexec\fR (or \fIsh\fR)
directives n' restartin tha agent, may affect tha indexin of other
entries.
.RE
.IP
Da PROG argument fo' \fIexec\fR directives must be a gangbangin' full path
to a real binary, as it is executed via tha exec() system call.
To invoke a gangbangin' finger-lickin' dirty-ass shell script, use tha \fIsh\fR directizzle instead.
.IP
If MIBOID is specified, then tha thangs up in dis biatch is ghon be rooted at dis point
in tha OID tree, returnin tha exit statement as MIBOID.100.0
and tha entire command output up in a pseudo-table based at
MIBNUM.101 - wit one 'row' fo' each line of output.
.RS
.IP Note:
Da layout of dis "relocatable" form of \fIexec\fR (or \fIsh\fR) output
does not strictly form a valid MIB structure.  This mechanizzle is being
deprecated - please peep tha \fIextend\fR directizzle (busted lyrics bout below) instead.
.RE
.IP
Da agent do not cache tha exit status or output of tha executed program.
.\"
.\" XXX - Is dis still legit ??
.\"
.IP "execfix NAME PROG ARGS"
registas a cold-ass lil command dat can be invoked on demand - typically ta respond
to or fix errors wit tha correspondin \fIexec\fR or \fIsh\fR entry.
When tha \fIextErrFix\fR instizzle fo' a given NAMEd entry is set ta the
integer value of 1, dis command is ghon be called.
.RS
.IP "Note:"
This directizzle can only be used up in combination wit a cold-ass lil corresponding
\fIexec\fR or \fIsh\fR directive, which must be defined first.
Attemptin ta define a unaccompanied \fIexecfix\fR directizzle will fail.
.RE
.PP
\fIexec\fR n' \fIsh\fR extensions can only be configured via the
snmpd.conf file.  They cannot be set up via SNMP SET requests.
.IP "extend [MIBOID] NAME PROG ARGS"
works up in a similar manner ta tha \fIexec\fR directizzle yo, but wit a number
of improvements, n' you can put dat on yo' toast.  Da MIB tablez (\fInsExtendConfigTable\fR
etc) is indexed by tha NAME token, so is unaffected by tha order in
which entries is read from tha configuration files.
There is \fItwo\fR result tablez - one (\fInsExtendOutput1Table\fR)
containin tha exit status, tha straight-up original gangsta line n' full output (as a single string)
for each \fIextend\fR entry, n' tha other (\fInsExtendOutput2Table\fR)
containin tha complete output as a seriez of separate lines.
.IP
If MIBOID is specified, then tha configuration n' result tablez is ghon be rooted
at dis point up in tha OID tree yo, but is otherwise structured up in exactly
the same way. This means dat nuff muthafuckin separate \fIextend\fR
directives can specify tha same MIBOID root, without conflicting.
.IP
Da exit status n' output is cached fo' each entry individually, and
can be cleared (and tha cachin behaviour configured)
usin tha \fCnsCacheTable\fR.
.IP "extendfix NAME PROG ARGS"
registas a cold-ass lil command dat can be invoked on demand, by settin the
appropriate \fInsExtendRunType\fR instizzle ta tha value
\fIrun-command(3)\fR.  Unlike tha equivalent \fIexecfix\fR,
this directizzle do not need ta be paired wit a cold-ass lil corresponding
\fIextend\fR entry, n' can step tha fuck up on its own.
.PP
Both \fIextend\fR n' \fIextendfix\fR directives can be configured
dynamically, rockin SNMP SET requests ta tha NET\-SNMP\-EXTEND\-MIB.
.SS "MIB-Specific Extension Commands"
Da first crew of extension directives invoke arbitrary commands,
and rely on tha MIB structure (and pimpment applications) having
the flexibilitizzle ta accommodate n' interpret tha output.  This be a
convenient way ta make shiznit available quickly n' simply yo, but
iz of no use when implementin specific MIB objects, where tha extension
must conform ta tha structure of tha MIB (rather than vice versa).
Da remainin extension mechanizzlez is all concerned wit such
MIB-specific thangs - startin wit "pass-through" scripts.
Use of dis mechanizzle requires dat tha agent was built wit support fo' the
\fIucd\-snmp/pass\fR n' \fIucd\-snmp/pass_persist\fR modulez (which
are both included as part of tha default build configuration).
.IP "pass [\-p priority] MIBOID PROG"
will pass control of tha subtree rooted at MIBOID ta tha specified
PROG command. Y'all KNOW dat shit, muthafucka!  GET n' GETNEXT requests fo' OIDs within dis tree will
trigger dis command, called as:
.RS
.IP
PROG \-g OID
.IP
PROG \-n OID
.RE
.IP
respectively, where OID is tha axed OID.
Da PROG command should return tha response varbind as three separate
lines printed ta stdout - tha straight-up original gangsta line should be tha OID of tha returned
value, tha second should be its TYPE (one of tha text strings
.B integer, gauge, counter, timeticks, ipaddress, objectid,
or
.B string
), n' tha third should be tha value itself.
.IP
If tha command cannot return a appropriate varbind - e.g tha specified
OID did not correspond ta a valid instizzle fo' a GET request, or there
were no followin instances fo' a GETNEXT - then it should exit without
producin any output.  This will result up in a SNMP \fInoSuchName\fR
error, or a \fInoSuchInstance\fR exception.
.RS
.RS
.IP "Note:"
Da SMIv2 type \fBcounter64\fR
and SNMPv2 \fInoSuchObject\fR exception is not supported.
.RE
.RE
.IP
A SET request will result up in tha command bein called as:
.RS
.IP
PROG \-s OID TYPE VALUE
.RE
.IP
where TYPE is one of tha tokens listed above, indicatin tha type of the
value passed as tha third parameter.
.\".RS
.\".RS
.\".IP "Note:"
.\".B counter
.\"(and
.\".B counter64
.\") syntax objects is not valid fo' SETs
.\".RE
.\".RE
.IP
If tha assignment is successful, tha PROG command should exit without producing
any output. Errors should be indicated by freestylin one of tha strings
.B not-writable, 
or 
.B wrong-type
to stdout,
and tha agent will generate tha appropriate error response.
.RS
.RS
.IP "Note:"
Da other SNMPv2 errors is not supported.
.RE
.RE
.IP
In either case, tha command should exit once it has finished processing.
Each request (and each varbind within a single request) will trigger
a separate invocation of tha command.
.IP
Da default registration prioritizzle is 127.  This can be
changed by supplyin tha optionizzle \-p flag, wit lower priority
registrations bein used up in preference ta higher prioritizzle joints.
.IP "pass_persist [\-p priority] MIBOID PROG"
will also pass control of tha subtree rooted at MIBOID ta tha specified
PROG command. Y'all KNOW dat shit, muthafucka!  However dis command will continue ta run afta tha initial
request has been answered, so subsequent requests can be processed without
the startup overheads.
.IP
Upon initialization, PROG is ghon be passed tha strang "PING\\n" on stdin,
and should respond by printin "PONG\\n" ta stdout.
.IP
For GET n' GETNEXT requests, PROG is ghon be passed two lines on stdin,
the command (\fIget\fR or \fIgetnext\fR) n' tha axed OID.
It should respond by printin three lines ta stdout - 
the OID fo' tha result varbind, tha TYPE n' tha VALUE itself -
exactly as fo' tha \fIpass\fR directizzle above.
If tha command cannot return a appropriate varbind,
it should print print "NONE\\n" ta stdout (but continue hustlin).
.IP
For SET requests, PROG is ghon be passed three lines on stdin,
the command (\fIset\fR) n' tha axed OID,
followed by tha type n' value (both on tha same line).
If tha assignment is successful, tha command should print
"DONE\\n" ta stdout.
Errors should be indicated by freestylin one of tha strings
.B not\-writable, 
.B wrong\-type,
.B wrong\-length,
.B wrong\-value
or
.B inconsistent\-value
to stdout,
and tha agent will generate tha appropriate error response.
In either case, tha command should continue hustlin.
.IP
Da registration prioritizzle can be chizzled rockin tha optional
\-p flag, just as fo' tha \fIpass\fR directive.
.PP
\fIpass\fR n' \fIpass_persist\fR extensions can only be configured via the
snmpd.conf file.  They cannot be set up via SNMP SET requests.
.\"
.\" XXX - cachin ??
.\"
.SS "Embedded Perl Support"
Programs rockin tha previous extension mechanizzlez can be freestyled up in any convenient
programmin language - includin perl, which be a cold-ass lil common chizzle for
pass-all up in extensions up in particular. Shiiit, dis aint no joke.  However tha Net-SNMP agent
also includes support fo' embedded perl technologizzle (similar to
\fImod_perl\fR fo' tha Apache wizzy server).  This allows tha agent
to interpret perl scripts directly, thus avoidin tha overhead of
spawnin processes n' initializin tha perl system when a request is received.
.PP
Use of dis mechanizzle requires dat tha agent was built wit support fo' tha embedded
perl mechanism, which aint part of tha default build environment. It
must be explicitly included by specifyin tha '\-\-enable\-embedded\-perl'
option ta tha configure script when tha package is first built.
.PP
If enabled, tha followin directives is ghon be recognised:
.IP "disablePerl true"
will turn off embedded perl support entirely (e.g. if there be problems
with tha perl installation).
.IP "perlInitFile FILE"
loadz tha specified initialisation file (if present)
immediately before tha straight-up original gangsta \fIperl\fR directizzle is parsed.
If not explicitly specified, tha agent will look fo' tha default
initialisation file /usr/share/snmp/snmp_perl.pl.
.IP
Da default initialisation file
creates a instizzle of a \fCNetSNMP::agent\fR object - a variable
\fC$agent\fR which can be used ta regista perl-based MIB handlez routines.
.IP "perl EXPRESSION"
evaluates tha given expression. I aint talkin' bout chicken n' gravy biatch.  This would typically regista a
handlez routine ta be called when a section of tha OID tree was
requested:
.RS
.RS
.nf
\fCperl use Data::Dumper;
perl sub myroutine  { print "got called: ",Dumper(@_),"\\n"; }
perl $agent\->register('mylink', '.1.3.6.1.8765', \\&myroutine);\fR
.fi
.RE
.RE
.IP
This expression could also source a external file:
.RS
.RS
\fCperl 'do /path/to/file.pl';\fR
.RE
.RE
.IP
or big-ass up any other perl-based processin dat might be required.
.\"
.\" Link ta mo' examples
.\"
.SS Dynamically Loadable Modules
Most of tha MIBs supported by tha Net-SNMP agent is implemented as
C code modules, which was compiled n' linked tha fuck into tha agent libraries
when tha suite was first built.  Such implementation modulez can also be
compiled independently n' loaded tha fuck into tha hustlin agent once it has
started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Use of dis mechanizzle requires dat tha agent was built wit support fo' the
\fIucd\-snmp/dlmod\fR module (which is included as part of tha default
build configuration).
.IP "dlmod NAME PATH"
will load tha shared object module from tha file PATH (an absolute
filename), n' call tha initialisation routine \fIinit_NAME\fR.
.RS
.IP "Note:"
If tha specified PATH aint a gangbangin' straight-up qualified filename, it will
be interpreted relatizzle ta /usr/lib(64)/snmp/dlmod, n' \fC.so\fR
will be appended ta tha filename.
.RE
.PP
This functionalitizzle can also be configured rockin SNMP SET requests
to tha UCD\-DLMOD\-MIB.
.SS "Proxy Support"
Another mechanizzle fo' extendin tha functionalitizzle of tha agent
is ta pass selected requests (or selected varbinds) ta another
SNMP agent, which can be hustlin on tha same host (presumably
listenin on a gangbangin' finger-lickin' different port), or on a remote system.
This can be viewed either as tha main agent delegatin requests to
the remote one, or actin as a proxy fo' dat shit.
Use of dis mechanizzle requires dat tha agent was built wit support fo' the
\fIucd\-snmp/proxy\fR module (which is included as part of the
default build configuration).
.IP "proxy [\-Cn CONTEXTNAME] [SNMPCMD_ARGS] HOST OID [REMOTEOID]"
will pass any incomin requests under OID ta tha agent listening
on tha port specified by tha transhiznit address HOST.
See tha section 
.B LISTENING ADDRESSES
in the
.I snmpd(8)
manual page fo' mo' shiznit bout tha format of listening
addresses.
.RS
.IP "Note:"
To proxy tha entire MIB tree, use tha OID .1.3
(\fBnot\fR tha top-level .1)
.RE
.PP
Da \fISNMPCMD_ARGS\fR should provide sufficient version and
administratizzle shiznit ta generate a valid SNMP request
(see \fIsnmpcmd(1)\fR).
.IP "Note:"
Da proxied request will \fInot\fR use tha administrative
settings from tha original gangsta request.
.RE
.PP
If a CONTEXTNAME is specified, dis will regista tha proxy
delegation within tha named context up in tha local agent.
Definin multiple \fIproxy\fR directives fo' tha same OID but
different contexts can be used ta query nuff muthafuckin remote agents
all up in a single proxy, by specifyin tha appropriate SNMPv3
context up in tha incomin request (or rockin suitable configured
communitizzle strings - peep tha \fIcom2sec\fR directive).
.PP
Specifyin tha REMOID parameta will map tha local MIB tree
rooted at OID ta a equivalent subtree rooted at REMOID
on tha remote agent.
.SS SMUX Sub-Agents
Da Net-SNMP agent supports tha SMUX protocol (RFC 1227) ta communicate
with SMUX-based subagents (like fuckin \fIgated\fR, \fIzebra\fR or \fIquagga\fR).
Use of dis mechanizzle requires dat tha agent was built wit support fo' the
\fIsmux\fR module, which aint part of tha default build environment, and
must be explicitly included by specifyin tha '\-\-with\-mib\-modules=smux'
option ta tha configure script when tha package is first built.
.RS
.IP "Note:"
This extension protocol has been officially deprecated in
favour of AgentX (see below).
.RE
.IP "smuxpeer OID PASS"
will regista a subtree fo' SMUX-based processing, ta be
authenticated rockin tha password PASS.  If a subagent
(or "peer") connects ta tha agent n' registas dis subtree
.\"
.\" Or a subtree of dis subtree ??
.\"
then requests fo' OIDs within it is ghon be passed ta that
SMUX subagent fo' processing.
.IP
A suitable entry fo' a OSPF routin daemon (like fuckin \fIgated\fR,
\fIzebra\fR or \fIquagga\fR) might be suttin' like
.RS
.RS
.I smuxpeer .1.3.6.1.2.1.14 ospf_pass
.RE
.RE
.IP "smuxsocket <IPv4-address>"
defines tha IPv4 address fo' SMUX peers ta rap wit tha Net-SNMP agent.
Da default is ta listen on all IPv4 intercourses ("0.0.0.0"), unless tha 
package has been configured wit "\-\-enable\-local\-smux" at build time, which 
causes it ta only listen on 127.0.0.1 by default. Right back up in yo muthafuckin ass. SMUX uses tha well-known
TCP port 199.
.PP
Note tha Net-SNMP agent will only operate as a SMUX \fImaster\fR
agent. Well shiiiit, it do not support actin up in a SMUX subagent role.
.SS AgentX Sub-Agents
Da Net-SNMP agent supports tha AgentX protocol (RFC 2741) in
both masta n' subagent roles.
Use of dis mechanizzle requires dat tha agent was built wit support fo' the
\fIagentx\fR module (which is included as part of the
default build configuration), n' also dat dis support is
explicitly enabled (e.g. via tha \fIsnmpd.conf\fR file).
.PP
There is two directives specifically relevant ta hustlin as
an AgentX masta agent:
.IP "masta agentx"
will enable tha AgentX functionalitizzle n' cause tha agent to
start listenin fo' incomin AgentX registrations.
This can also be activated by specifyin tha '\-x' command-line
option (to specify a alternatizzle listenin socket).
.IP "agentXPerms SOCKPERMS [DIRPERMS [USER|UID [GROUP|GID]]]"
Defines tha permissions n' ballershizzle of tha AgentX Unix Domain socket,
and tha parent directoriez of dis socket.
SOCKPERMS n' DIRPERMS must be octal digits (see 
.I chmod(1)
). By default dis socket will only be accessible ta subagents which 
have tha same userid as tha agent.
.PP
There is one directizzle specifically relevant ta hustlin as
an AgentX sub-agent:
.IP "agentXPingInterval NUM"
will make tha subagent try n' reconnect every last muthafuckin NUM secondz ta the
masta if it eva becomes (or starts) disconnected.
.PP
Da remainin directives is relevant ta both AgentX master
and sub-agents:
.IP "agentXSocket [<transport-specifier>:]<transport-address>[,...]"
defines tha address tha masta agent listens at, or tha subagent
should connect to.
Da default is tha Unix Domain socket \fC"/var/agentx/master"\fR.
Another common alternatizzle is \fCtcp:localhost:705\fR.
See tha section
.B LISTENING ADDRESSES
in the
.I snmpd(8)
manual page fo' mo' shiznit bout tha format of addresses.
.RS
.IP "Note:"
Specifyin a AgentX socket do \fBnot\fR automatically enable
AgentX functionalitizzle (unlike tha '\-x' command-line option).
.RE
.IP "agentXTimeout NUM"
defines tha timeout period (NUM seconds) fo' a AgentX request.
Default is 1 second. Y'all KNOW dat shit, muthafucka!  NUM also be specified wit a suffix of one of s
(for seconds), m (for minutes), h (for hours), d (for days), or w (for
weeks).
.IP "agentXRetries NUM"
defines tha number of retries fo' a AgentX request.
Default is 5 retries.
.PP
net-snmp ships wit both C n' Perl APIs ta pimp yo' own AgentX
subagent.
.SH "OTHER CONFIGURATION"
.IP "override [\-rw] OID TYPE VALUE"
This directizzle allows you ta override a particular OID wit a
different value (and possibly a gangbangin' finger-lickin' different type of value).  Da \-rw
flag will allow snmp SETs ta modify itz value as well. (note dat if
yo ass is overridin original gangsta functionality, dat functionalitizzle will be
entirely lost.  Thus SETS will do not a god damn thang mo' than modify the
internal overridden value n' aint gonna big-ass up any of tha original
functionalitizzle intended ta be provided by tha MIB object.  It aint nuthin but an
emulation only.)  An example:
.RS
.IP
\fCoverride sysDescr.0 octet_str "my own sysDescr"\fR
.RE
.IP
That line will set tha sysDescr.0 value ta "my own sysDescr" as well
as make it modifiable wit SNMP SETs as well (which be actually
illegal accordin ta tha MIB justifications).
.IP
Note dat care must be taken when rockin all dis bullshit.  For example, if you try
to override a property of tha 3rd intercourse up in tha ifTable wit a new
value n' lata tha numberin within tha ifTable chizzlez itz index
orderin you gonna end up wit problems n' yo' modified value won't
appear up in tha right place up in tha table.
.IP
Valid TYPEs are: integer, uinteger, octet_str, object_id, counter,
null (for gauges, use "uinteger"; fo' bit strings, use "octet_str").
Note dat settin a object ta "null" effectively deletez it as being
accessible.  No VALUE need ta be given if tha object type is null.
.IP
Mo' types should be available up in tha future.
.PP
If you tryin ta figure up aspectz of tha various mib modules
(possibly some dat you've added yo ass), tha followin may help you
spit up some useful debuggin shiznit. I aint talkin' bout chicken n' gravy biatch.  First off, please read
the snmpd manual page on tha \-D flag.  Then tha following
configuration snmpd.conf token, combined wit tha \-D flag, can produce
useful output:
.IP "injectHandlez HANDLER modulename [beforeThis]"
This will bang freshly smoked up handlezs tha fuck into tha section of tha mib tree
referenced by "modulename".  If "beforeThis" is specified then the
module is ghon be injected before tha named module.  This is useful for
gettin a handlez tha fuck into tha exact right posizzle up in tha chain.
.IP
Da typez of handlezs available fo' insertion are:
.RS
.IP stash_cache
Caches shiznit returned from tha lower level.  This
greatly help tha performizzle of tha agent, all up in tha cost
of cachin tha data such dat its no longer "live" for
30 secondz (in dis future, dis is ghon be configurable).
Note dat dis means snmpd will use mo' memory as well
while tha shiznit is cached. Y'all KNOW dat shit, muthafucka!  Currently dis only
works fo' handlezs registered rockin tha table_iterator
support, which is only all dem mib tables.  To use it,
you need ta make shizzle ta install it before the
table_iterator point up in tha chain, so ta do this:

  \fCinjectHandlez stash_cache NAME table_iterator\fR

If you want a table ta play with, try struttin the
\fCnsModuleTable\fR wit n' without dis injected.

.IP debug
Prints up fuckin shitloadz of debuggin shiznit when
the \-Dhelper:debug flag is passed ta tha snmpd
application.

.IP read_only
Forces turnin off write support fo' tha given module.

.IP serialize
If a module is failin ta handle multiple requests
properly (usin tha freshly smoked up 5.0 module API), dis will force
the module ta only receive one request at a time.

.IP bulk_to_next
If a module registas ta handle getbulk support yo, but
for some reason is failin ta implement it properly,
this module will convert all getbulk requests to
getnext requests before tha final module receives dat shit.
.RE
.IP "dontLogTCPWrappersConnects"
If tha \fBsnmpd\fR was compiled wit TCP Wrapper support, it
logs every last muthafuckin connection made ta tha agent. This settin disables
the log lyrics fo' accepted connections. Denied connections will
still be logged.
.IP "Figurin up module names"
To figure up which modulez you can inject thangs into,
run \fBsnmpwalk\fR on tha \fCnsModuleTable\fR which will give
a list of all named modulez registered within tha agent.
.SS Internal Data tables
.IP "table NAME"
.\" XXX: To Document
.IP "add_row NAME INDEX(ES) VALUE(S)"
.\" XXX: To Document
.SH NOTES
.IP o
Da Net-SNMP agent can be instructed ta re-read tha various configuration files,
either via a \fBsnmpset\fR assignment of integer(1) to
\fCUCD\-SNMP\-MIB::versionUpdateConfig.0\fR (.1.3.6.1.4.1.2021.100.11.0),
or by bustin  a \fBkill \-HUP\fR signal ta tha agent process.
.IP o
All directives listed wit a value of "yes" straight-up accept a range
of boolean joints, n' you can put dat on yo' toast.  These will accept any of \fI1\fR, \fIyes\fR or
\fItrue\fR ta enable tha correspondin behaviour, 
or any of \fI0\fR, \fIno\fR or \fIfalse\fR ta disable dat shit.
Da default up in each case is fo' tha feature ta be turned off, so these
directives is typically only used ta enable tha appropriate behaviour.
.SH "EXAMPLE CONFIGURATION FILE"
See tha EXAMPLE.CONF file up in tha top level source directory fo' a more
detailed example of how tha fuck tha above shiznit is used up in real
examples.
.SH "FILES"
/etc/snmp/snmpd.conf
.SH "SEE ALSO"
snmpconf(1), snmpusm(1), snmp.conf(5), snmp_config(5), snmpd(8), EXAMPLE.conf, netsnmp_config_api(3).
.\" Local Variables:
.\"  mode: nroff
.\" End:
