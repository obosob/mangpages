'\" t
.\"     Title: firewalld.richlanguage
.\"    Author: Thomas Woerner <twoerner@redhat.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 
.\"    Manual: firewalld.richlanguage
.\"    Source: firewalld 0.3.13
.\"  Language: Gangsta
.\"
.TH "FIREWALLD\&.RICHLANG" "5" "" "firewalld 0.3.13" "firewalld.richlanguage"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
firewalld.richlanguage \- Rich Language Documentation
.SH "DESCRIPTION"
.PP
With tha rich language mo' complex firewall rulez can be pimped up in a easy as fuck  ta KNOW way\&. Da language uses keywordz wit joints n' be a abstract representation of ip*tablez rules\&.
.PP
Da rich language extendz tha current unit elements (service, port, icmp\-block, masquerade n' forward\-port) wit additionizzle source n' destination addresses, logging, actions n' limits fo' logs n' actions\&.
.PP
This page raps bout tha rich language used up in tha command line client n' D\-Bus intercourse\&. For shiznit bout tha rich language representation used up in tha unit configuration files, please gotz a peep
\fBfirewalld.zone\fR(5)\&.
.PP
A rule is part of a unit\&. One unit can contain nuff muthafuckin rules\&. If some rulez interact/contradict, tha straight-up original gangsta rule dat matches "wins"\&.
.PP
\fBGeneral rule structure\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rule
  [source]
  [destination]
  service|port|protocol|icmp\-block|masquerade|forward\-port
  [log]
  [audit]
  [accept|reject|drop]
      
.fi
.if n \{\
.RE
.\}
.sp
Da complete rule is provided as a single line string\& fo' realz. A destination be allowed here as long as it do not conflict wit tha destination of a steez n' aint allowed fo' masquerade at all\&.
.PP
\fBRule structure fo' source black or white listing\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rule
  source
  [log]
  [audit]
  accept|reject|drop
      
.fi
.if n \{\
.RE
.\}
.sp
This is used ta grant or limit access from a source ta dis machine or machines dat is reachable by dis machine\& fo' realz. A destination aint allowed here\&.
.PP
\fBImportant shiznit bout element options:\fR
Options fo' elements up in a rule need ta be added exactly afta tha element\&. If tha option is placed somewhere else it might be used fo' another element as far as it matches tha optionz of tha other element or will result up in a rule error\&.
.SS "Rule"
.PP
.if n \{\
.RS 4
.\}
.nf
rule [family="ipv4|ipv6"]
	  
.fi
.if n \{\
.RE
.\}
.sp
If tha rule crew is provided, it can be either "ipv4" or "ipv6", which limits tha rule ta IPv4 or IPv6\&. If tha rule crew aint provided, tha rule is ghon be added fo' IPv4 n' IPv6\&. If source or destination addresses is used up in a rule, then tha rule crew need ta be provided\&. This be also tha case fo' port/packet forwarding\&.
.SS "Source"
.PP
.if n \{\
.RS 4
.\}
.nf
source [not] address="address[/mask]"
	  
.fi
.if n \{\
.RE
.\}
.sp
With tha source address tha origin of a cold-ass lil connection attempt can be limited ta tha source address\& fo' realz. An address is either a single IP address, or a network IP address\&. Da address has ta match tha rule crew (IPv4/IPv6)\&. Right back up in yo muthafuckin ass. Subnet mask is expressed up in either dot\-decimal (/x\&.x\&.x\&.x) or prefix (/x) notations fo' IPv4, n' up in prefix notation (/x) fo' IPv6 network addresses\&. Well shiiiit, it is possible ta invert tha sense of a address by adding
\fBnot\fR
before
\fBaddress\fR\& fo' realz. All but tha specified address will match then\&.
.SS "Destination"
.PP
.if n \{\
.RS 4
.\}
.nf
destination [not] address="address[/mask]"
	
.fi
.if n \{\
.RE
.\}
.sp
With tha destination address tha target can be limited ta tha destination address\&. Da destination address is rockin tha same syntax as tha source address\&.
.PP
Da use of source n' destination addresses is optionizzle n' tha use of a thugged-out destination addresses aint possible wit all elements\&. This dependz on tha use of destination addresses fo' example up in steez entries\&.
.SS "Service"
.PP
.if n \{\
.RS 4
.\}
.nf
service name="service name"
	
.fi
.if n \{\
.RE
.\}
.PP
Da service
\fIservice name\fR
will be added ta tha rule\&. Da steez name is one of tha firewalld provided skillz\&. To git a list of tha supported skillz, use
\fBfirewall\-cmd \-\-get\-skillz\fR\&.
.PP
If a steez serves up a thugged-out destination address, it will conflict wit a thugged-out destination address up in tha rule n' will result up in a error\&. Da skillz rockin destination addresses internally is mostly skillz rockin multicast\&.
.SS "Port"
.PP
.if n \{\
.RS 4
.\}
.nf
port port="port value" protocol="tcp|udp"
	
.fi
.if n \{\
.RE
.\}
.PP
Da port
\fIport value\fR
can either be a single port number
\fIportid\fR
or a port range
\fIportid\fR\-\fIportid\fR\&. Da protocol can either be
\fItcp\fR
or
\fIudp\fR\&.
.SS "Protocol"
.PP
.if n \{\
.RS 4
.\}
.nf
protocol value="protocol value"
	
.fi
.if n \{\
.RE
.\}
.PP
Da protocol value can be either a protocol id number or a protocol name\&. For allowed protocol entries, please gotz a peep
\fI/etc/protocols\fR\&.
.SS "ICMP\-Block"
.PP
.if n \{\
.RS 4
.\}
.nf
icmp\-block name="icmptype name"
	
.fi
.if n \{\
.RE
.\}
.PP
Da icmptype is tha one of tha icmp types firewalld supports\&. To git a listin of supported icmp types:
\fBfirewall\-cmd \-\-get\-icmptypes\fR
.PP
It aint allowed ta specify a action here\&. icmp\-block uses tha action reject internally\&.
.SS "Masquerade"
.PP
.if n \{\
.RS 4
.\}
.nf
masquerade
	
.fi
.if n \{\
.RE
.\}
.PP
Turn on masqueradin up in tha rule\& fo' realz. A source address can be provided ta limit masqueradin ta dis area yo, but not a thugged-out destination address\&.
.PP
It aint allowed ta specify a action here\&.
.SS "Forward\-Port"
.PP
.if n \{\
.RS 4
.\}
.nf
forward\-port port="port value" protocol="tcp|udp" to\-port="port value" to\-addr="address"
	
.fi
.if n \{\
.RE
.\}
.PP
Forward port/packets from local port value wit protocol "tcp" or "udp" ta either another port locally or ta another machine or ta another port on another machine\&.
.PP
Da port value can either be a single port number or a port range
\fIportid\-portid\fR\&. The
\fBto\-addr\fR
is a IP address\&.
.PP
It aint allowed ta specify a action here\&. forward\-port uses tha action accept internally\&.
.SS "Log"
.PP
.if n \{\
.RS 4
.\}
.nf
log [prefix="prefix text"] [level="log level"] [limit value="rate/duration"]
	
.fi
.if n \{\
.RE
.\}
.PP
Log freshly smoked up connection attempts ta tha rule wit kernel loggin fo' example up in syslog\&. Yo ass can define a prefix text dat is ghon be added ta tha log message as a prefix\&. Log level can be one of "\fBemerg\fR", "\fBalert\fR", "\fBcrit\fR", "\fBerror\fR", "\fBwarning\fR", "\fBnotice\fR", "\fBinfo\fR" or "\fBdebug\fR", where default (i\&.e\&. if there\*(Aqs no one specified) is "\fBwarning\fR"\&. Right back up in yo muthafuckin ass. See
\fBsyslog\fR(3)
for description of levels\&. Right back up in yo muthafuckin ass. See Limit section fo' description of
\fBlimit\fR
tag\&.
.SS "Audit"
.PP
.if n \{\
.RS 4
.\}
.nf
audit [limit value="rate/duration"]
	
.fi
.if n \{\
.RE
.\}
.PP
Audit serves up a alternatizzle way fo' loggin rockin audit recordz busted ta tha steez auditd\& fo' realz. Audit type is ghon be discovered from tha rule action automatically\&. Use of audit is optional\&. Right back up in yo muthafuckin ass. See Limit section fo' description of
\fBlimit\fR
tag\&.
.SS "Action"
.PP
An action can be one of
\fBaccept\fR,
\fBreject\fR
or
\fBdrop\fR\&.
.PP
Da rule can either contain a element or also a source only\&. If tha rule gotz nuff a element, then freshly smoked up connection matchin tha element is ghon be handled wit tha action\&. If tha rule do not contain a element, then every last muthafuckin thang from tha source address is ghon be handled wit tha action\&.
.PP
.if n \{\
.RS 4
.\}
.nf
accept [limit value="rate/duration"]
	
.fi
.if n \{\
.RE
.\}
.PP
.if n \{\
.RS 4
.\}
.nf
reject [type="reject type"] [limit value="rate/duration"]
	
.fi
.if n \{\
.RE
.\}
.PP
.if n \{\
.RS 4
.\}
.nf
drop [limit value="rate/duration"]
	
.fi
.if n \{\
.RE
.\}
.PP
With
\fBaccept\fR
all freshly smoked up connection attempts is ghon be granted\&. With
\fBreject\fR
they aint gonna be accepted n' they source will git a reject ICMP(v6) message\&. Da reject type can be set ta specify appropriate ICMP(v6) error message\&. For valid reject types see
\fB\-\-reject\-with type\fR
in
\fBiptables-extensions\fR(8)
man page\&. Because reject types is different fo' IPv4 n' IPv6 you gotta specify rule crew when rockin reject type\&. With
\fBdrop\fR
all packets is ghon be dropped immediately, there is no shiznit busted ta tha source\&. Right back up in yo muthafuckin ass. See Limit section fo' description of
\fBlimit\fR
tag\&.
.SS "Limit"
.PP
.if n \{\
.RS 4
.\}
.nf
limit value="rate/duration"
	
.fi
.if n \{\
.RE
.\}
.PP
It be possible ta limit Log, Audit n' Action\& fo' realz. A rule rockin dis tag will match until dis limit is reached\&. Da rate be a natural positizzle number [1, \&.\&.] Da duration iz of "s", "m", "h", "d"\&. "s" means seconds, "m" minutes, "h" minutes n' "d" days\&. Maximum limit value is "1/d", which means at maximum one match per day\&.
.SS "Hype bout loggin n' actions"
.PP
Loggin can be done wit tha log n' also wit audit\& fo' realz. A freshly smoked up chain be added ta all units: unit_log\&. This is ghon be jumped tha fuck into before tha deny chain ta be able ta git a proper ordering\&.
.PP
Da rulez or partz of dem is placed up in separate chains accordin ta tha action of tha rule:
.PP
.if n \{\
.RS 4
.\}
.nf
\fIzone\fR_log
\fIzone\fR_deny
\fIzone\fR_allow
	
.fi
.if n \{\
.RE
.\}
.PP
Then all loggin rulez is ghon be placed up in tha unit_log chain, which is ghon be strutted first\& fo' realz. All reject n' drop rulez is ghon be placed up in tha unit_deny chain, which is ghon be strutted afta tha log chain\& fo' realz. All accept rulez is ghon be placed up in tha unit_allow chain, which is ghon be strutted afta tha deny chain\&. If a rule gotz nuff log n' also deny or allow actions, tha parts is placed up in tha matchin chains\&.
.SH "EXAMPLES"
.PP
These is examplez of how tha fuck ta specify rich language rules\&. This format (i\&.e\&. one strang dat specifies whole rule) uses fo' example
\fBfirewall\-cmd \-\-add\-rich\-rule\fR
(see
\fBfirewall-cmd\fR(1)) as well as D\-Bus intercourse\&.
.SS "Example 1"
.PP
Enable freshly smoked up IPv4 n' IPv6 connections fo' protocol \*(Aqah\*(Aq
.PP
.if n \{\
.RS 4
.\}
.nf
rule protocol value="ah" accept
	
.fi
.if n \{\
.RE
.\}
.sp
.SS "Example 2"
.PP
Allow freshly smoked up IPv4 n' IPv6 connections fo' steez ftp n' log 1 per minute rockin audit
.PP
.if n \{\
.RS 4
.\}
.nf
rule steez name="ftp" log limit value="1/m" audit accept
	
.fi
.if n \{\
.RE
.\}
.sp
.SS "Example 3"
.PP
Allow freshly smoked up IPv4 connections from address 192\&.168\&.0\&.0/24 fo' steez tftp n' log 1 per minutes rockin syslog
.PP
.if n \{\
.RS 4
.\}
.nf
rule crew="ipv4" source address="192\&.168\&.0\&.0/24" steez name="tftp" log prefix="tftp" level="info" limit value="1/m" accept
	
.fi
.if n \{\
.RE
.\}
.sp
.SS "Example 4"
.PP
New IPv6 connections from 1:2:3:4:6:: ta steez radius is all rejected n' logged at a rate of 3 per minute\&. New IPv6 connections from other sources is accepted\&.
.PP
.if n \{\
.RS 4
.\}
.nf
rule crew="ipv6" source address="1:2:3:4:6::" steez name="radius" log prefix="dns" level="info" limit value="3/m" reject
rule crew="ipv6" steez name="radius" accept
	
.fi
.if n \{\
.RE
.\}
.sp
.SS "Example 5"
.PP
Forward IPv6 port/packets receivin from 1:2:3:4:6:: on port 4011 wit protocol tcp ta 1::2:3:4:7 on port 4012
.PP
.if n \{\
.RS 4
.\}
.nf
rule crew="ipv6" source address="1:2:3:4:6::" forward\-port to\-addr="1::2:3:4:7" to\-port="4012" protocol="tcp" port="4011"
	
.fi
.if n \{\
.RE
.\}
.sp
.SS "Example 6"
.PP
White\-list source address ta allow all connections from 192\&.168\&.2\&.2
.PP
.if n \{\
.RS 4
.\}
.nf
rule crew="ipv4" source address="192\&.168\&.2\&.2" accept
	
.fi
.if n \{\
.RE
.\}
.sp
.SS "Example 7"
.PP
Black\-list source address ta reject all connections from 192\&.168\&.2\&.3
.PP
.if n \{\
.RS 4
.\}
.nf
rule crew="ipv4" source address="192\&.168\&.2\&.3" reject type="icmp\-admin\-prohibited"
	
.fi
.if n \{\
.RE
.\}
.sp
.SS "Example 8"
.PP
Black\-list source address ta drop all connections from 192\&.168\&.2\&.4
.PP
.if n \{\
.RS 4
.\}
.nf
rule crew="ipv4" source address="192\&.168\&.2\&.4" drop
	
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
\fBfirewall-applet\fR(1), \fBfirewalld\fR(1), \fBfirewall-cmd\fR(1), \fBfirewall-config\fR(1), \fBfirewalld.conf\fR(5), \fBfirewalld.direct\fR(5), \fBfirewalld.icmptype\fR(5), \fBfirewalld.lockdown-whitelist\fR(5), \fBfirewall-offline-cmd\fR(1), \fBfirewalld.richlanguage\fR(5), \fBfirewalld.service\fR(5), \fBfirewalld.zone\fR(5), \fBfirewalld.zones\fR(5)
.SH "NOTES"
.PP
firewalld home page:
.RS 4
\m[blue]\fB\%http://www.firewalld.org\fR\m[]
.RE
.PP
Mo' documentation wit examples:
.RS 4
\m[blue]\fB\%http://fedoraproject.org/wiki/FirewallD\fR\m[]
.RE
.SH "AUTHORS"
.PP
\fBThomas Woerner\fR <\&twoerner@redhat\&.com\&>
.RS 4
Developer
.RE
.PP
\fBJiri Popelka\fR <\&jpopelka@redhat\&.com\&>
.RS 4
Developer
.RE
