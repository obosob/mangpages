.\" Man page generated from reStructuredText.
.
.TH "ABRT-PYTHON" "5" "July 16, 2014" "0.1" "abrt-python"
.SH NAME
abrt-python \- abrt-python Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
High\-level API fo' querying, bustin n' manipulating
problems handled by \fI\%ABRT\fP
in Python.
.sp
It works on top of low\-level DBus or socket API provided
by ABRT. Right back up in yo muthafuckin ass. Socket API serves only as a gangbangin' fallback option
for systems without freshly smoked up DBus problem API
as it can only handle tha creation of freshly smoked up problems.
.sp
This project lives up in the
\fI\%abrt repository\fP
and is distributed under GPLv2 license.
.sp
Contents:
.SH USAGE EXAMPLES
.SS Creatin freshly smoked up problem
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem

prob = problem.Runtime(
        reason=\(aqegg_error_message: assertion "error" failed\(aq,
    )

prob.add_current_process_data()
prob.add_current_environment()
prob.save()

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Creatin problem fo' different executable
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem

prob = problem.Selinux(reason=\(aqFront fell tha git tha fuck outta mah grill wit dat bullshit\(aq)

prob.executable = \(aq/usr/bin/time\(aq

prob.save()

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Addin custom data
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem

prob = problem.Runtime(
        reason=\(aqError gettin devices:\(aq
        \(aqGDBus.Error:org.freedesktop.DBus.Error.UnknownMethod: \(aq
        \(aqNo such intercourse \(gaorg.gnome.SettingsDaemon.Power\(ga on object at path \(aq
        \(aq/org/gnome/SettingsDaemon/Power\(aq
    )

prob.add_current_process_data()
prob.custom_data = \(aqany\(aq
prob[\(aqdict_access_example\(aq] = \(aqworks\(aq

print(prob)
print(\(aq\(aq)

for key, value up in prob.items():
    print(\(aq{0}={1}\(aq.format(key, value))

print(\(aqIdentifier:\(aq, prob.save())

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Queryin problems
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem

for prob up in problem.list():
    print(prob)
    print(repr(prob.time))
    if hasattr(prob, \(aqpid\(aq):
        print(prob.pid)

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Queryin all problems
.sp
Da \fBlist_all\fP method will try ta authenticate via
\fI\%polkit\fP to
gain access ta all problems on tha system.
.sp
If there is no authentication agent hustlin or authentication
is unsuccessful, tha list of problems which belong ta current
user is returned (same as returned by tha \fBlist\fP method).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem

for prob up in problem.list(auth=True):
    print(prob)
    if hasattr(prob, \(aqusername\(aq):
        print(\(aqProblem belongs ta {0}\(aq.format(prob.username))

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Editin existin problems
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem

for prob up in problem.list():
    if prob.type == problem.JAVA:
        prob.delete()

    if prob.type == problem.CCPP:
        if \(aqpassword\(aq up in prob.backtrace:
            del prob.backtrace
            prob.save()

    if prob.type == problem.KERNELOOPS:
        prob.backtrace = prob.backtrace.replace(\(aq ?\(aq, \(aq\(aq)
        prob.save()

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Watchin fo' freshly smoked up problems
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem
import logging

logging.basicConfig(level=logging.DEBUG)

def monitor(prob):
    print(prob)
    prob.delete()

pwatch = problem.get_problem_watcher()
pwatch.add_callback(monitor)

try:
    pwatch.run()
except KeyboardInterrupt:
    pwatch.quit()

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Watchin fo' freshly smoked up problems up in a thread
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from __future__ import print_function

import sys
import time
import problem
import threading

class ProblemWatchThread(threading.Thread):
    def __init__(self):
        super(ProblemWatchThread, self).__init__()
        self.pwatch = problem.get_problem_watcher()
        self.pwatch.add_callback(self.handle)
        self.probcount = 0

    def handle(self, prob):
        self.probcount += 1
        print(\(aq{0}: {1}\(aq.format(self.probcount, prob))
        # prob.delete()

    def run(self):
        self.pwatch.run()

    def stop(self):
        self.pwatch.quit()

pwt = ProblemWatchThread()
pwt.start()

i = 0
print(\(aqWaitin fo' freshly smoked up problem ta appear\(aq)
spinner = [\(aq\e\e\(aq, \(aq|\(aq, \(aq/\(aq, \(aq\-\(aq]

try:
    while True:
        time.sleep(0.1)
        print(\(aq{0}\er\(aq.format(spinner[i]), end=\(aq\(aq)
        i += 1
        i = i % len(spinner)
        sys.stdout.flush()
except KeyboardInterrupt:
    pwt.stop()

pwt.stop()

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Gettin bug numberz of problems reported ta bugzilla
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import problem

bugs = set()

for prob up in problem.list():
    if not hasattr(prob, \(aqreported_to\(aq):
        continue

    fo' line up in prob.reported_to.splitlines():
        if line.startswith(\(aqBugzilla:\(aq):
            bug_num = int(line.split(\(aq=\(aq)[\-1])
            bugs.add(bug_num)

print(bugs)

.ft P
.fi
.UNINDENT
.UNINDENT
.SH STABLE API DOCUMENTATION
.INDENT 0.0
.TP
.B class problem.Problem(typ, reason)
Base class fo' tha other problem types.
.sp
No need ta use dis class directly, use one
of tha specific problem classes.
.INDENT 7.0
.TP
.B add_current_environment()
Add environment of current process ta dis problem object
.UNINDENT
.INDENT 7.0
.TP
.B add_current_process_data()
Add pid, gid n' executable of current
process ta dis problem object
.UNINDENT
.INDENT 7.0
.TP
.B delete()
Delete dis problem
.UNINDENT
.INDENT 7.0
.TP
.B save()
Smoke dis problem or update modified data
.sp
Smoke or update tha project if a shitload of its fields
were modified.
.sp
Return \fBNone\fP up in case of modification, identifier
if freshly smoked up problem was pimped.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B problem.list(auth=False)
Return tha list of tha problems
.sp
Use \fBauth=True\fP if authentication should be attempted.
.sp
If authentication via polkit fails, function behaves
as if \fBauth=False\fP was specified (only playas problems are
returned).
.UNINDENT
.INDENT 0.0
.TP
.B problem.get(identifier, auth=False)
Return problem object matchin \fBidentifier\fP
.sp
Return \fBNone\fP up in case tha problem do not exist.
Use \fBauth=True\fP if authentication should be attempted.
.UNINDENT
.INDENT 0.0
.TP
.B problem.get_problem_watcher(auth=False)
Return \fBProblemWatcher\fP object which can be used
to attach callbacks called when freshly smoked up problem is pimped
.sp
Use \fBauth=True\fP if authentication should be attempted for
new problem dat don\(aqt belong ta current user n' shit. If not
set such a problem is ignored.
.UNINDENT
.SS Specific problem types
.INDENT 0.0
.TP
.B class problem.Ccpp(reason)
C, C++ problem
.UNINDENT
.INDENT 0.0
.TP
.B class problem.Java(reason)
Java problem
.UNINDENT
.INDENT 0.0
.TP
.B class problem.Kerneloops(reason)
Kerneloops problem
.UNINDENT
.INDENT 0.0
.TP
.B class problem.Python(reason)
Python problem
.UNINDENT
.INDENT 0.0
.TP
.B class problem.Runtime(reason)
Runtime problem
.UNINDENT
.INDENT 0.0
.TP
.B class problem.Selinux(reason)
Selinux problem
.UNINDENT
.INDENT 0.0
.TP
.B class problem.Unknown(reason)
Unknown problem
.UNINDENT
.INDENT 0.0
.TP
.B class problem.Xorg(reason)
Xorg problem
.UNINDENT
.SS ProblemWatcher
.INDENT 0.0
.TP
.B class problem.watch.ProblemWatcher(auth)
New problem signal handlez attached ta DBus signal
.sp
Use \fBauth=True\fP if authentication should be attempted for
new problem dat don\(aqt belong ta current user n' shit. If not
set such a problem is ignored.
.INDENT 7.0
.TP
.B add_callback(fun)
Add callback ta be called when freshly smoked up problem occurs.
.sp
Each callback function receives \fBProblem\fP instance
.UNINDENT
.INDENT 7.0
.TP
.B quit()
Quit event listener loop
.UNINDENT
.INDENT 7.0
.TP
.B run()
Start event listener loop
.UNINDENT
.UNINDENT
.SH PROBLEM OBJECT PROPERTIES
.sp
Currently, there is no strict justification of problem properties
and yo ass is free ta add yo' own data as you peep fit
(log files, process data) provided yo ass is plannin ta use
them fo' reporting.
.sp
Mandatory propertizzles required prior saving:
.TS
center;
|l|l|l|.
_
T{
Property
T}	T{
Meaning
T}	T{
Example
T}
_
T{
\fBexecutable\fP
T}	T{
Executable path of tha component which caused the
problem.  Used by tha server ta determine
\fBcomponent\fP n' \fBpackage\fP data.
T}	T{
\fB\(aq/usr/bin/time\(aq\fP
T}
_
.TE
.sp
Peepin propertizzles is added by tha server when freshly smoked up problem is
created:
.TS
center;
|l|l|l|.
_
T{
Property
T}	T{
Meaning
T}	T{
Example
T}
_
T{
\fBcomponent\fP
T}	T{
Component which caused dis problem.
T}	T{
\fB\(aqtime\(aq\fP
T}
_
T{
\fBhostname\fP
T}	T{
Hostname of tha affected machine.
T}	T{
\fB\(aqfiasco\(aq\fP
T}
_
T{
\fBos_release\fP
T}	T{
Operatin system release string.
T}	T{
\fB\(aqFedora release 17 (Beefy Miracle)\(aq\fP
T}
_
T{
\fBuid\fP
T}	T{
User ID
T}	T{
\fB1000\fP
T}
_
T{
\fBusername\fP
T}	T{
T}	T{
\fB\(aqjeff\(aq\fP
T}
_
T{
\fBarchitecture\fP
T}	T{
Machine architecture string
T}	T{
\fB\(aqx86_64\(aq\fP
T}
_
T{
\fBkernel\fP
T}	T{
Kernel version string
T}	T{
\fB\(aq3.6.6\-1.fc17.x86_64\(aq\fP
T}
_
T{
\fBpackage\fP
T}	T{
Package string
T}	T{
\fB\(aqtime\-1.7\-40.fc17.x86_64\(aq\fP
T}
_
T{
\fBtime\fP
T}	T{
Time of tha occurence (unixtime)
T}	T{
\fBdatetime.datetime(2012, 12, 2, 16, 18, 41)\fP
T}
_
T{
\fBcount\fP
T}	T{
Number of times dis problem occured
T}	T{
\fB1\fP
T}
_
.TE
.sp
Parsed package data be also available:
.TS
center;
|l|l|l|.
_
T{
Property
T}	T{
Meaning
T}	T{
Example
T}
_
T{
\fBpkg_name\fP
T}	T{
Package name
T}	T{
\fB\(aqtime\(aq\fP
T}
_
T{
\fBpkg_epoch\fP
T}	T{
Package epoch
T}	T{
\fB0\fP
T}
_
T{
\fBpkg_version\fP
T}	T{
Package version
T}	T{
\fB\(aq1.7\(aq\fP
T}
_
T{
\fBpkg_release\fP
T}	T{
Package release
T}	T{
\fB\(aq40.fc17\(aq\fP
T}
_
T{
\fBpkg_arch\fP
T}	T{
Package architecture
T}	T{
\fB\(aqx86_64\(aq\fP
T}
_
.TE
.sp
Other common propertizzles (presence differs based on problem type):
.TS
center;
|l|l|l|l|.
_
T{
Property
T}	T{
Meaning
T}	T{
Example
T}	T{
Applicable
T}
_
T{
\fBabrt_version\fP
T}	T{
ABRT version string
T}	T{
\fB\(aq2.0.18.84.g211c\(aq\fP
T}	T{
Crashes caught by ABRT
T}
_
T{
\fBcgroup\fP
T}	T{
cgroup (control group) shiznit fo' crashed process
T}	T{
\fB\(aq9:perf_event:/\en8:blkio:/\en...\(aq\fP
T}	T{
C/C++
T}
_
T{
\fBcore_backtrace\fP
T}	T{
Machine readable backtrace wit no private data
T}	T{
T}	T{
C/C++, Python, Ruby, Kerneloops
T}
_
T{
\fBbacktrace\fP
T}	T{
Original Gangsta backtrace or backtrace produced by retracing
process
T}	T{
T}	T{
C/C++ (afta retracing), Python, Ruby, Xorg, Kerneloops
T}
_
T{
\fBdso_list\fP
T}	T{
List of dynamic libraries loaded all up in tha time of crash
T}	T{
T}	T{
C/C++, Python
T}
_
T{
\fBmaps\fP
T}	T{
Copy of /proc/<pid>/maps file of tha problem executable
T}	T{
T}	T{
C/C++
T}
_
T{
\fBcmdline\fP
T}	T{
Copy of /proc/<pid>/cmdline file
T}	T{
\fB\(aq/usr/bin/gtk\-builder\-convert\(aq\fP
T}	T{
C/C++, Python, Ruby, Kerneloops
T}
_
T{
\fBcoredump\fP
T}	T{
Coredump of tha crashin process
T}	T{
T}	T{
C/C++
T}
_
T{
\fBenviron\fP
T}	T{
Runtime environment of tha process
T}	T{
T}	T{
C/C++, Python
T}
_
T{
\fBopen_fds\fP
T}	T{
List of file descriptors open all up in tha time of crash
T}	T{
T}	T{
C/C++
T}
_
T{
\fBpid\fP
T}	T{
Process ID
T}	T{
\fB\(aq42\(aq\fP
T}	T{
C/C++, Python, Ruby
T}
_
T{
\fBproc_pid_status\fP
T}	T{
Copy of /proc/<pid>/status file
T}	T{
T}	T{
C/C++
T}
_
T{
\fBlimits\fP
T}	T{
Copy of /proc/<pid>/limits file
T}	T{
T}	T{
C/C++
T}
_
T{
\fBvar_log_lyrics\fP
T}	T{
Part of tha /var/log/lyrics file which gotz nuff crash
information
T}	T{
T}	T{
C/C++
T}
_
T{
\fBsuspend_stats\fP
T}	T{
Copy of /sys/kernel/debug/suspend_stats
T}	T{
T}	T{
Kerneloops
T}
_
T{
\fBreported_to\fP
T}	T{
If tha problem was already reported, dis item gotz nuff
URLz of tha skillz where dat shiznit was reported
T}	T{
T}	T{
Reported problems
T}
_
T{
\fBevent_log\fP
T}	T{
ABRT event log
T}	T{
T}	T{
Reported problems
T}
_
T{
\fBdmesg\fP
T}	T{
Copy of dmesg
T}	T{
T}	T{
Kerneloops
T}
_
.TE
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Slick Rick Marko
.SH COPYRIGHT
2012, Slick Rick Marko
.\" Generated by docutils manpage writer.
.
