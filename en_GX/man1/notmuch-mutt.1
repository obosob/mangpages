.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NOTMUCH-MUTT 1"
.TH NOTMUCH-MUTT 1 "2013-08-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
notmuch\-mutt \- notmuch (of a) helper fo' Mutt
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "\fBnotmuch-mutt\fR [\fI\s-1OPTION\s0\fR]... search [\fISEARCH-TERM\fR]..." 4
.IX Item "notmuch-mutt [OPTION]... search [SEARCH-TERM]..."
.PD 0
.IP "\fBnotmuch-mutt\fR [\fI\s-1OPTION\s0\fR]... thread < \fI\s-1MAIL\s0\fR" 4
.IX Item "notmuch-mutt [OPTION]... thread < MAIL"
.IP "\fBnotmuch-mutt\fR [\fI\s-1OPTION\s0\fR]... tag [\fI\s-1TAGS\s0\fR]... < \fI\s-1MAIL\s0\fR" 4
.IX Item "notmuch-mutt [OPTION]... tag [TAGS]... < MAIL"
.PD
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
notmuch-mutt be a gangbangin' frontend ta tha notmuch mail indexer capable of populating
a maildir wit search thangs up in dis biatch.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-o \s-1DIR\s0" 4
.IX Item "-o DIR"
.PD 0
.IP "\-\-output\-dir \s-1DIR\s0" 4
.IX Item "--output-dir DIR"
.PD
Store search thangs up in dis biatch as (symlink) lyrics under maildir \s-1DIR.\s0 Beware: \s-1DIR\s0 will
be overwritten. I aint talkin' bout chicken n' gravy biatch. (Default: \fI~/.cache/notmuch/mutt/results/\fR)
.IP "\-p" 4
.IX Item "-p"
.PD 0
.IP "\-\-prompt" 4
.IX Item "--prompt"
.PD
Instead of rockin command line search terms, prompt tha user fo' dem (only for
\&\*(L"search\*(R").
.IP "\-r" 4
.IX Item "-r"
.PD 0
.IP "\-\-remove\-dups" 4
.IX Item "--remove-dups"
.PD
Remove duplicates from search thangs up in dis biatch.
.IP "\-h" 4
.IX Item "-h"
.PD 0
.IP "\-\-help" 4
.IX Item "--help"
.PD
Show usage shiznit n' exit.
.SH "INTEGRATION WITH MUTT"
.IX Header "INTEGRATION WITH MUTT"
notmuch-mutt can be used ta integrate notmuch wit tha Mutt mail user agent
(unsurprisingly, given tha name). To dat end, you should define macros like
the followin up in yo' Mutt configuration (usually one of: \fI~/.muttrc\fR,
\&\fI/etc/Muttrc\fR, or a cold-ass lil configuration snippet under \fI/etc/Muttrc.d/\fR):
.PP
.Vb 6
\&    macro index <F8> \e
\&    "<enter\-command>set my_old_pipe_decode=\e$pipe_decode my_old_wait_key=\e$wait_key nopipe_decode nowait_key<enter>\e
\&    <shell\-escape>notmuch\-mutt \-r \-\-prompt search<enter>\e
\&    <change\-folder\-readonly>\`echo ${XDG_CACHE_HOME:\-$HOME/.cache}/notmuch/mutt/results\`<enter>\e
\&    <enter\-command>set pipe_decode=\e$my_old_pipe_decode wait_key=\e$my_old_wait_key<enter>" \e
\&          "notmuch: search mail"
\&
\&    macro index <F9> \e
\&    "<enter\-command>set my_old_pipe_decode=\e$pipe_decode my_old_wait_key=\e$wait_key nopipe_decode nowait_key<enter>\e
\&    <pipe\-message>notmuch\-mutt \-r thread<enter>\e
\&    <change\-folder\-readonly>\`echo ${XDG_CACHE_HOME:\-$HOME/.cache}/notmuch/mutt/results\`<enter>\e
\&    <enter\-command>set pipe_decode=\e$my_old_pipe_decode wait_key=\e$my_old_wait_key<enter>" \e
\&          "notmuch: reconstruct thread"
\&
\&    macro index <F6> \e
\&    "<enter\-command>set my_old_pipe_decode=\e$pipe_decode my_old_wait_key=\e$wait_key nopipe_decode nowait_key<enter>\e
\&    <pipe\-message>notmuch\-mutt tag \-\- \-inbox<enter>\e
\&    <enter\-command>set pipe_decode=\e$my_old_pipe_decode wait_key=\e$my_old_wait_key<enter>" \e
\&          "notmuch: remove message from inbox"
.Ve
.PP
Da first macro (activated by <F8>) prompts tha user fo' notmuch search terms
and then jump ta a temporary maildir showin search thangs up in dis biatch. Da second macro
(activated by <F9>) reconstructs tha thread correspondin ta tha current mail
and show it as search thangs up in dis biatch. Da third macro (activated by <F6>) removes the
tag \f(CW\*(C`inbox\*(C'\fR from tha current message; by changin \f(CW\*(C`\-inbox\*(C'\fR dis macro may be
customised ta add or remove tags appropriate ta tha playas notmuch work-flow.
.PP
To keep notmuch index current you should then periodically run \f(CW\*(C`notmuch
new\*(C'\fR. Dependin on yo' local mail setup, you might wanna do dat via cron,
as a hook triggered by mail retrieval, etc.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImutt\fR\|(1), \fInotmuch\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright: (C) 2011\-2012 Stefano Zacchiroli <zack@upsilon.cc>
.PP
License: \s-1GNU\s0 General Public License (\s-1GPL\s0), version 3 or higher
