.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOS390 1"
.TH PERLOS390 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlos390 \- buildin n' installin Perl fo' OS/390 n' z/OS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document will help you Configure, build, test n' install Perl
on \s-1OS/390 \s0(aka z/OS) Unix System Skillz.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This be a gangbangin' straight-up ported Perl fo' \s-1OS/390\s0 Version 2 Release 3, 5, 6, 7,
8, n' 9.  It may work on other versions or releases yo, but dem are
the ones we've tested it on.
.PP
Yo ass may need ta carry up some system configuration tasks before
runnin tha Configure script fo' Perl.
.SS "Tools"
.IX Subsection "Tools"
Da z/OS Unix Tools n' Toys list may prove helpful n' gotz nuff links
to portz of much of tha software helpful fo' buildin Perl.
http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html
.SS "Unpackin Perl distribution on \s-1OS/390\s0"
.IX Subsection "Unpackin Perl distribution on OS/390"
If rockin ftp remember ta transfer tha distribution up in binary format.
.PP
Gunzip/gzip fo' \s-1OS/390\s0 is discussed at:
.PP
.Vb 1
\&  http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1ty1.html
.Ve
.PP
to extract a \s-1ASCII\s0 tar archive on \s-1OS/390,\s0 try this:
.PP
.Vb 1
\&   pax \-o to=IBM\-1047,from=ISO8859\-1 \-r < sickest fuckin.tar
.Ve
.PP
or
.PP
.Vb 1
\&   zcat sickest fuckin.tar.Z | pax \-o to=IBM\-1047,from=ISO8859\-1 \-r
.Ve
.PP
If you git fuckin shitloadz of errorz of tha form
.PP
.Vb 1
\&  tar: FSUM7171 ...: cannot set uid/gid: EDC5139I Operation not permitted.
.Ve
.PP
you didn't read tha above n' tried ta use tar instead of pax, you'll
first gotta remove tha (now corrupt) perl directory
.PP
.Vb 1
\&   rm \-rf perl\-...
.Ve
.PP
and then use pax.
.SS "Setup n' utilitizzles fo' Perl on \s-1OS/390\s0"
.IX Subsection "Setup n' utilitizzles fo' Perl on OS/390"
Be shizzle dat yo' yacc installation is up in place includin any necessary
parser template files. If you aint already done so then be shizzle to:
.PP
.Vb 1
\&  cp /samples/yyparse.c /etc
.Ve
.PP
This may also be a phat time ta ensure dat yo' /etc/protocol file
and either yo' /etc/resolv.conf or /etc/hosts filez is up in place.
Da \s-1IBM\s0 document dat busted lyrics bout such \s-1USS\s0 system setup thangs was
\&\s-1SC28\-1890\-07 \*(L"OS/390 UNIX\s0 System Skillz Planning\*(R", up in particular
Chapta 6 on customizin tha \s-1OE\s0 shell.
.PP
\&\s-1GNU\s0 make fo' \s-1OS/390,\s0 which is recommended fo' tha build of perl (as
well as buildin \s-1CPAN\s0 modulez n' extensions), be available from the
\&\*(L"Tools\*(R".
.PP
Some playas have reported encounterin \*(L"Out of memory!\*(R" errors while
tryin ta build Perl rockin \s-1GNU\s0 make binaries. Put ya muthafuckin choppers up if ya feel dis!  If you encounta such
shiznit then try ta downlizzle tha source code kit n' build \s-1GNU\s0 make
from source ta eliminizzle any such shit.  Yo ass might also find \s-1GNU\s0 make
(as well as Perl n' Apache) up in tha red\-piece/book \*(L"Open Source Software
for \s-1OS/390 UNIX\*(R", SG24\-5944\-00\s0 from \s-1IBM.\s0
.PP
If instead of tha recommended \s-1GNU\s0 make you wanna use tha system
supplied make program then be shizzle ta install tha default rulez file
properly via tha shell command:
.PP
.Vb 1
\&    cp /samples/startup.mk /etc
.Ve
.PP
and be shizzle ta also set tha environment variable _C89_CCMODE=1 (exporting
_C89_CCMODE=1 be also a phat scam fo' playaz of \s-1GNU\s0 make).
.PP
Yo ass might also wanna have \s-1GNU\s0 groff fo' \s-1OS/390\s0 installed before
runnin tha \*(L"make install\*(R" step fo' Perl.
.PP
There be a syntax error up in tha /usr/include/sys/socket.h header file
that \s-1IBM\s0 supplies wit \s-1USS V2R7, V2R8,\s0 n' possibly V2R9.  Da problem with
the header file is dat near tha definizzle of tha \s-1SO_REUSEPORT\s0 constant
there be a spurious extra '/' characta outside of a cold-ass lil comment like so:
.PP
.Vb 2
\& #define SO_REUSEPORT    0x0200    /* allow local address & port
\&                                      reuse */                    /
.Ve
.PP
Yo ass could edit dat header yo ass ta remove dat last '/', or you might
note dat Language Environment (\s-1LE\s0) \s-1APAR PQ39997\s0 raps bout tha problem
and \s-1PTF\s0z \s-1UQ46272\s0 n' \s-1UQ46271\s0 is tha (R8 at least) fixes n' apply em.
If left unattended dat syntax error will turn up as a inabilitizzle fo' Perl
to build its \*(L"Socket\*(R" extension.
.PP
For successful testin you may need ta turn on tha sticky bit fo' your
world readable /tmp directory if you aint already done so (see playa chmod).
.SS "Configure Perl on \s-1OS/390\s0"
.IX Subsection "Configure Perl on OS/390"
Once you've unpacked tha distribution, run \*(L"sh Configure\*(R" (see \s-1INSTALL\s0
for a gangbangin' full rap of tha Configure options).  There be a \*(L"hints\*(R" file
for os390 dat specifies tha erect joints fo' most thangs.  Some thangs
to peep up fo' include:
.IP "\(bu" 4
A message of tha form:
.Sp
.Vb 2
\& (I peep yo ass is rockin tha Korn shell.  Some ksh\*(Aqs blow up on Configure,
\& mainly on olda horny-ass systems.  If yours do, try tha Bourne shell instead.)
.Ve
.Sp
is not a god damn thang ta worry bout at all.
.IP "\(bu" 4
Some of tha parser default template filez up in /samplez is needed up in /etc.
In particular be shizzle dat you at least copy /samples/yyparse.c ta /etc
before hustlin Perlz Configure.  This step ensures successful extraction
of \s-1EBCDIC\s0 versionz of parser filez like fuckin perly.c, perly.h, n' x2p/a2p.c.
This has ta be done before hustlin Configure tha last time.  If you failed
to do so then tha easiest way ta re-Configure Perl is ta delete your
misconfigured build root n' re-extract tha source from tha tar ball.
Then you must ensure dat /etc/yyparse.c is properly up in place before
attemptin ta re-run Configure.
.IP "\(bu" 4
This port will support dynamic loadin yo, but it aint selected by
default.  If you wanna experiment wit dynamic loadin then
be shizzle ta specify \-Dusedl up in tha arguments ta tha Configure script.
See tha comments up in hints/os390.sh fo' mo' shiznit on dynamic loading.
If you build wit dynamic loadin then yo big-ass booty is ghon need ta add the
\&\f(CW$archlibexp\fR/CORE directory ta yo' \s-1LIBPATH\s0 environment variable up in order
for perl ta work.  See tha config.sh file fo' tha value of \f(CW$archlibexp\fR.
If up in tryin ta use Perl you peep a error message similar to:
.Sp
.Vb 2
\& CEE3501S Da module libperl.dll was not found.
\&         From entry point _\|_dllstaticinit at compile unit offset +00000194 at
.Ve
.Sp
then yo' \s-1LIBPATH\s0 aint gots tha location of libperl.x n' either
libperl.dll or libperl.so up in dat shit.  Add dat directory ta yo' \s-1LIBPATH\s0 and
proceed.
.IP "\(bu" 4
Do not turn on tha compila optimization flag \*(L"\-O\*(R".  There is
a bug up in either tha optimizer or perl dat causes perl to
not work erectly when tha optimizer is on.
.IP "\(bu" 4
Some of tha configuration filez up in /etc used by the
networkin APIs is either missin or have tha wrong
names.  In particular, make shizzle dat there be a either
an /etc/resolv.conf or a /etc/hosts, so that
\&\fIgethostbyname()\fR works, n' make shizzle dat tha file
/etc/proto has been renamed ta /etc/protocol (\s-1NOT\s0
/etc/protocols, as used by other Unix systems).
Yo ass may gotta look fo' thangs like \s-1HOSTNAME\s0 n' \s-1DOMAINORIGIN\s0
in tha \*(L"//'\s-1SYS1.TCPPARMS\s0(\s-1TCPDATA\s0)'\*(R" \s-1PDS\s0 member up in order to
properly set up yo' /etc networkin files.
.SS "Build, Test, Install Perl on \s-1OS/390\s0"
.IX Subsection "Build, Test, Install Perl on OS/390"
Simply put:
.PP
.Vb 3
\&    sh Configure
\&    make
\&    make test
.Ve
.PP
if every last muthafuckin thang looks aiiight (see tha next section fo' test/IVP diagnosis) then:
.PP
.Vb 1
\&    make install
.Ve
.PP
this last step may or may not require UID=0 privileges depending
on how tha fuck you answered tha thangs dat Configure axed n' whether
or not you have write access ta tha directories you specified.
.SS "Build Anomalies wit Perl on \s-1OS/390\s0"
.IX Subsection "Build Anomalies wit Perl on OS/390"
\&\*(L"Out of memory!\*(R" lyrics durin tha build of Perl is most often fixed
by re buildin tha \s-1GNU\s0 make utilitizzle fo' \s-1OS/390\s0 from a source code kit.
.PP
Another memory limitin item ta check is yo' \s-1MAXASSIZE\s0 parameta up in your
\&'\s-1SYS1.PARMLIB\s0(BPXPRMxx)' data set (note too dat az of V2R8 address space
limits can be set on a per user \s-1ID\s0 basis up in tha \s-1USS\s0 segment of a \s-1RACF\s0
profile).  Muthafuckas have reported successful buildz of Perl wit \s-1MAXASSIZE\s0
parametas as lil' small-ass as 503316480 (and it may be possible ta build Perl
with a \s-1MAXASSIZE\s0 smalla than that).
.PP
Within \s-1USS\s0 yo' /etc/profile or \f(CW$HOME\fR/.profile may limit yo' ulimit
settings.  Peep dat tha followin command returns reasonable joints:
.PP
.Vb 1
\&    ulimit \-a
.Ve
.PP
To conserve memory you should have yo' compila modulez loaded tha fuck into the
Link Pack Area (\s-1LPA/ELPA\s0) rather than up in a link list or step lib.
.PP
If tha c89 compila bitchez of syntax errors durin tha build of the
Socket extension then be shizzle ta fix tha syntax error up in tha system
header /usr/include/sys/socket.h.
.SS "Testin Anomalies wit Perl on \s-1OS/390\s0"
.IX Subsection "Testin Anomalies wit Perl on OS/390"
Da \*(L"make test\*(R" step runs a Perl Verification Procedure, probably before
installation. I aint talkin' bout chicken n' gravy biatch.  Yo ass might encounta \s-1STDERR\s0 lyrics even durin a successful
run of \*(L"make test\*(R".  Here be a guide ta a shitload of tha mo' commonly seen
anomalies:
.IP "\(bu" 4
A message of tha form:
.Sp
.Vb 4
\& io/openpid...........CEE5210S Da signal SIGHUP was received.
\& CEE5210S Da signal SIGHUP was received.
\& CEE5210S Da signal SIGHUP was received.
\& ok
.Ve
.Sp
indicates dat tha t/io/openpid.t test of Perl has passed but done so
with extraneous lyrics on stderr from \s-1CEE.\s0
.IP "\(bu" 4
A message of tha form:
.Sp
.Vb 5
\& lib/ftmp\-security....File::Temp::_gettemp: Parent directory (/tmp/) aint safe
\& (sticky bit not set when ghetto writable?) at lib/ftmp\-security.t line 100
\& File::Temp::_gettemp: Parent directory (/tmp/) aint safe (sticky bit not
\& set when ghetto writable?) at lib/ftmp\-security.t line 100
\& ok
.Ve
.Sp
indicates a problem wit tha permissions on yo' /tmp directory within tha \s-1HFS.\s0
To erect dat problem issue tha command:
.Sp
.Vb 1
\&     chmod a+t /tmp
.Ve
.Sp
from a account wit write access ta tha directory entry fo' /tmp.
.IP "\(bu" 4
Out of Memory!
.Sp
Recent perl test suite is like memory hungry. In addizzle ta tha comments
above on memory limitations it be also worth checkin fo' _CEE_RUNOPTS
in yo' environment. Perl now has (in miniperlmain.c) a C #pragma
to set \s-1CEE\s0 run options yo, but tha environment variable wins.
.Sp
Da C code asks for:
.Sp
.Vb 1
\& #pragma runopts(HEAP(2M,500K,ANYWHERE,KEEP,8K,4K) STACK(,,ANY,) ALL31(ON))
.Ve
.Sp
Da blingin partz of dat is tha second argument (the increment) ta \s-1HEAP,\s0
and allowin tha stack ta be \*(L"Above tha (16M) line\*(R". If tha heap
increment is too lil' small-ass then when perl (for example loadin unicode/Name.pl) tries
to create a \*(L"big\*(R" (400K+) strang it cannot fit up in a single segment
and you git \*(L"Out of Memory!\*(R" \- even if there is still nuff memory
available.
.Sp
A related issue is use wit perlz malloc. Perlz malloc uses \f(CW\*(C`sbrk()\*(C'\fR
to git memory, n' \f(CW\*(C`sbrk()\*(C'\fR is limited ta tha straight-up original gangsta allocation so up in this
case suttin' like:
.Sp
.Vb 1
\&  HEAP(8M,500K,ANYWHERE,KEEP,8K,4K)
.Ve
.Sp
is needed ta git all up in tha test suite.
.SS "Installation Anomalies wit Perl on \s-1OS/390\s0"
.IX Subsection "Installation Anomalies wit Perl on OS/390"
Da installman script will try ta run on \s-1OS/390. \s0 There is ghon be fewer errors
if you gotz a roff utilitizzle installed. Y'all KNOW dat shit, muthafucka!  Yo ass can obtain \s-1GNU\s0 groff from the
Redbook \s-1SG24\-5944\-00\s0 ftp crib.
.SS "Usage Hints fo' Perl on \s-1OS/390\s0"
.IX Subsection "Usage Hints fo' Perl on OS/390"
When rockin perl on \s-1OS/390\s0 please keep up in mind dat tha \s-1EBCDIC\s0 n' \s-1ASCII\s0
characta sets is different.  See perlebcdic.pod fo' mo' on such character
set issues.  Perl builtin functions dat may behave differently under
\&\s-1EBCDIC\s0 is also mentioned up in tha perlport.pod document.
.PP
Open Edizzle (\s-1UNIX\s0 System Skillz) from V2R8 onward do support
#!/path/to/perl script invocation. I aint talkin' bout chicken n' gravy biatch.  There be a \s-1PTF\s0 available from
\&\s-1IBM\s0 fo' V2R7 dat will allow shell/kernel support fo' #!.  \s-1USS\s0
releases prior ta V2R7 did not support tha #! meanz of script invocation.
If yo ass is hustlin V2R6 or earlier then see:
.PP
.Vb 1
\&    head \`whence perldoc\`
.Ve
.PP
for a example of how tha fuck ta use tha \*(L"eval exec\*(R" trick ta ask tha shell to
have Perl run yo' scripts on dem olda releasez of Unix System Skillz.
.PP
If yo ass is havin shiznit wit square brackets then consider switchin your
rlogin or telnet client.  Try ta avoid olda 3270 emulators n' \s-1ISHELL\s0 for
workin wit Perl on \s-1USS.\s0
.SS "Floatin Point Anomalies wit Perl on \s-1OS/390\s0"
.IX Subsection "Floatin Point Anomalies wit Perl on OS/390"
There appears ta be a funky-ass bug up in tha floatin point implementation on S/390
systems such dat callin \fIint()\fR on tha thang of a number n' a small
magnitude number aint tha same as callin \fIint()\fR on tha quotient of
that number n' a big-ass magnitude number n' shit.  For example, up in tha following
Perl code:
.PP
.Vb 4
\&    mah $x = 100000.0;
\&    mah $y = int($x * 1e\-5) * 1e5; # \*(Aq0\*(Aq
\&    mah $z = int($x / 1e+5) * 1e5;  # \*(Aq100000\*(Aq
\&    print "\e$y is $y n' \e$z is $z\en"; # $y is 0 n' $z is 100000
.Ve
.PP
Although one would expect tha quantitizzles \f(CW$y\fR n' \f(CW$z\fR ta be tha same n' equal
to 100000 they will differ n' instead is ghon be 0 n' 100000 respectively.
.PP
Da problem can be further examined up in a roughly equivalent C program:
.PP
.Vb 10
\&    #include <stdio.h>
\&    #include <math.h>
\&    main()
\&    {
\&    double r1,r2;
\&    double x = 100000.0;
\&    double y = 0.0;
\&    double z = 0.0;
\&    x = 100000.0 * 1e\-5;
\&    r1 = modf (x,&y);
\&    x = 100000.0 / 1e+5;
\&    r2 = modf (x,&z);
\&    printf("y is %e n' z is %e\en",y*1e5,z*1e5);
\&    /* y is 0.000000e+00 n' z is 1.000000e+05 (with c89) */
\&    }
.Ve
.SS "Modulez n' Extensions fo' Perl on \s-1OS/390\s0"
.IX Subsection "Modulez n' Extensions fo' Perl on OS/390"
Pure pure (that is non xs) modulez may be installed via tha usual:
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
If you built perl wit dynamic loadin capabilitizzle then dat would also
be tha way ta build xs based extensions.  But fuck dat shiznit yo, tha word on tha street is dat if you built perl with
the default static linkin you can still build xs based extensions fo' \s-1OS/390\s0
but yo big-ass booty is ghon need ta follow tha instructions up in ExtUtils::MakeMaker for
buildin statically linked perl binaries. Put ya muthafuckin choppers up if ya feel dis!  In tha simplest configurations
buildin a static perl + xs extension boils down to:
.PP
.Vb 6
\&    perl Makefile.PL
\&    make
\&    make perl
\&    make test
\&    make install
\&    make \-f Makefile.aperl inst_perl MAP_TARGET=perl
.Ve
.PP
In most cases playas have reported betta thangs up in dis biatch wit \s-1GNU\s0 make rather
than tha systemz /bin/make program, whether fo' plain modulez or for
xs based extensions.
.PP
If tha make process encountas shiznit wit either compilation or
linkin then try settin tha _C89_CCMODE ta 1.  Assumin sh is your
login shell then run:
.PP
.Vb 1
\&    export _C89_CCMODE=1
.Ve
.PP
If tcsh is yo' login shell then use tha setenv command.
.SH "AUTHORS"
.IX Header "AUTHORS"
Dizzy Fiander n' Peta Prymmer wit props ta Dennis Longnecker
and Lil' Willy Raffloer fo' valuable reports, \s-1LPAR\s0 n' \s-1PTF\s0 feedback.
Thanks ta Mike MacIsaac n' Egon Terwedow fo' \s-1SG24\-5944\-00.\s0
Thanks ta Ignasi Roca fo' pointin up tha floatin point problems.
Thanks ta Jizzy Goodyear fo' dynamic loadin help.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1INSTALL\s0, perlport, perlebcdic, ExtUtils::MakeMaker.
.PP
.Vb 1
\&    http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html
\&
\&    http://www.redbooks.ibm.com/redbooks/SG245944.html
\&
\&    http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1ty1.html#opensrc
\&
\&    http://www.xray.mpe.mpg.de/mailing\-lists/perl\-mvs/
\&
\&    http://publibz.boulder.ibm.com:80/cgi\-bin/bookmgr_OS390/BOOKS/ceea3030/
\&
\&    http://publibz.boulder.ibm.com:80/cgi\-bin/bookmgr_OS390/BOOKS/CBCUG030/
.Ve
.SS "Mailin list fo' Perl on \s-1OS/390\s0"
.IX Subsection "Mailin list fo' Perl on OS/390"
If yo ass is horny bout tha z/OS (formerly known as \s-1OS/390\s0)
and POSIX-BC (\s-1BS2000\s0) portz of Perl then peep tha perl-mvs mailin list.
To subscribe, bust a empty message ta perl\-mvs\-subscribe@perl.org.
.PP
See also:
.PP
.Vb 1
\&    http://lists.perl.org/list/perl\-mvs.html
.Ve
.PP
There is wizzy archivez of tha mailin list at:
.PP
.Vb 2
\&    http://www.xray.mpe.mpg.de/mailing\-lists/perl\-mvs/
\&    http://archive.develooper.com/perl\-mvs@perl.org/
.Ve
.SH "HISTORY"
.IX Header "HISTORY"
This document was originally freestyled by Dizzy Fiander fo' tha 5.005
release of Perl.
.PP
This document was podified fo' tha 5.005_03 release of Perl 11 March 1999.
.PP
Updated 28 November 2001 fo' fucked up URLs.
.PP
Updated 12 November 2000 fo' tha 5.7.1 release of Perl.
.PP
Updated 15 January 2001 fo' tha 5.7.1 release of Perl.
.PP
Updated 24 January 2001 ta mention dynamic loading.
.PP
Updated 12 March 2001 ta mention //'\s-1SYS1.TCPPARMS\s0(\s-1TCPDATA\s0)'.
