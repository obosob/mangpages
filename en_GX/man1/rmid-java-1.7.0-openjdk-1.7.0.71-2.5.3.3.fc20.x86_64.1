." Copyright (c) 1998, 2011, Oracle and/or its affiliates fo' realz. All muthafuckin rights reserved.
." DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
."
." This code is free software; you can redistribute it and/or modify it
." under tha termz of tha GNU General Public License version 2 only, as
." published by tha Jacked Software Foundation.
."
." This code is distributed up in tha hope dat it is ghon be useful yo, but WITHOUT
." ANY WARRANTY; without even tha implied warranty of MERCHANTABILITY or
." FITNESS FOR A PARTICULAR PURPOSE.  See tha GNU General Public License
." version 2 fo' mo' details (a copy is included up in tha LICENSE file that
." accompanied dis code).
."
." Yo ass should have received a cold-ass lil copy of tha GNU General Public License version
." 2 along wit dis work; if not, write ta tha Jacked Software Foundation,
." Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
."
." Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
." or visit www.oracle.com if you need additionizzle shiznit or have any
." thangs.
."
.TH rmid 1 "16 Mar 2012"

.LP
.SH "Name"
rmid \- Da Java RMI Activation System Daemon
.LP
.LP
\f3rmid\fP starts tha activation system daemon dat allows objects ta be registered n' activated up in a virtual machine (VM).
.LP
.SH "SYNOPSIS"
.LP
.nf
\f3
.fl
rmid [options]
.fl
\fP
.fi

.LP
.SH "DESCRIPTION"
.LP
.LP
Da \f3rmid\fP tool starts tha activation system daemon. I aint talkin' bout chicken n' gravy biatch. Da activation system daemon must be started before activatable objects can be either registered wit tha activation system or activated up in a VM. Right back up in yo muthafuckin ass. See tha 
.na
\f2Java RMI Justification\fP @
.fi
http://docs.oracle.com/javase/7/docs/platform/rmi/spec/rmiTOC.html n' 
.na
\f2Activation tutorials\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/guides/rmi/activation/overview.html fo' details on how tha fuck ta write programs dat use activatable remote objects.
.LP
.LP
Da daemon can be started by executin tha \f2rmid\fP command, n' specifyin a securitizzle policy file, as bigs up:
.LP
.nf
\f3
.fl
    rmid \-J\-Djava.security.policy=rmid.policy
.fl
\fP
.fi

.LP
.LP
\f3Note:\fP When hustlin Sunz implementation of \f2rmid\fP, by default yo big-ass booty is ghon need ta specify a securitizzle policy file so dat \f2rmid\fP can verify whether or not tha shiznit up in each \f2ActivationGroupDesc\fP be allowed ta be used ta launch a VM fo' a activation group. Right back up in yo muthafuckin ass. Specifically, tha command n' options specified by tha \f2CommandEnvironment\fP n' any \f2Properties\fP passed ta a \f2ActivationGroupDesc\fPz constructor must now be explicitly allowed up in tha securitizzle policy file fo' \f2rmid\fP. Da value of tha \f2sun.rmi.activation.execPolicy\fP property dictates tha policy dat \f2rmid\fP uses ta determine whether or not tha shiznit up in a \f2ActivationGroupDesc\fP may be used ta launch a VM fo' a activation group.
.LP
.LP
Executin \f2rmid\fP by default
.LP
.RS 3
.TP 2
o
starts tha Activator n' a internal registry on tha default port, 1098, n' 
.TP 2
o
bindz a \f2ActivationSystem\fP ta tha name \f2java.rmi.activation.ActivationSystem\fP up in dis internal registry. 
.RE

.LP
.LP
To specify a alternate port fo' tha registry, you must specify tha \f2\-port\fP option when startin up \f2rmid\fP. For example,
.LP
.nf
\f3
.fl
    rmid \-J\-Djava.security.policy=rmid.policy \-port 1099
.fl
\fP
.fi

.LP
.LP
starts tha activation system daemon n' a registry on tha registryz default port, 1099.
.LP
.SS 
Startin rmid from inetd/xinetd
.LP
.LP
An alternatizzle ta startin \f2rmid\fP from tha command line is ta configure \f2inetd\fP (Solaris) or \f2xinetd\fP (Linux) ta start \f2rmid\fP on demand.
.LP
.LP
When \f2rmid\fP starts up, it attempts ta obtain a inherited channel (inherited from \f2inetd\fP/\f2xinetd\fP) by invokin tha \f2System.inheritedChannel\fP method. Y'all KNOW dat shit, muthafucka! If tha inherited channel is \f2null\fP or not a instizzle of \f2java.nio.channels.ServerSocketChannel\fP, then \f2rmid\fP assumes dat dat shiznit was not started by \f2inetd\fP/\f2xinetd\fP, n' it starts up as busted lyrics bout above.
.LP
.LP
If tha inherited channel be a \f2ServerSocketChannel\fP instance, then \f2rmid\fP uses tha \f2java.net.ServerSocket\fP obtained from tha \f2ServerSocketChannel\fP as tha server socket dat accepts requests fo' tha remote objects it exports, namely tha registry up in which tha \f2java.rmi.activation.ActivationSystem\fP is bound n' tha \f2java.rmi.activation.Activator\fP remote object. In dis mode, \f2rmid\fP behaves tha same ol' dirty as when it is started from tha command line, \f2except\fP:
.LP
.RS 3
.TP 2
o
Output printed ta \f2System.err\fP is repimped up ta a gangbangin' file. This file is located up in tha directory specified by tha \f2java.io.tmpdir\fP system property (typically \f2/var/tmp\fP or \f2/tmp\fP) wit tha prefix \f2"rmid\-err"\fP n' tha suffix \f2"tmp"\fP. 
.TP 2
o
Da \f2\-port\fP option is disallowed. Y'all KNOW dat shit, muthafucka! If dis option is specified, \f2rmid\fP will exit wit a error message. 
.TP 2
o
Da \f2\-log\fP option is required. Y'all KNOW dat shit, muthafucka! If dis option aint specified, \f2rmid\fP will exit wit a error message. 
.RE

.LP
.LP
See tha playa pages fo' \f2inetd\fP (Solaris) or \f2xinetd\fP (Linux) fo' details on how tha fuck ta configure skillz ta be started on demand.
.LP
.SH "OPTIONS"
.LP
.RS 3
.TP 3
\-C<someCommandLineOption> 
Specifies a option dat is passed as a cold-ass lil command\-line argument ta each lil pimp process (activation group) of \f2rmid\fP when dat process is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For example, you could pass a property ta each virtual machine spawned by tha activation system daemon: 
.nf
\f3
.fl
    rmid \-C\-Dsome.property=value
.fl
\fP
.fi
This mobilitizzle ta pass command\-line arguments ta lil pimp processes can be useful fo' debugging. For example, tha followin command: 
.nf
\f3
.fl
    rmid \-C\-Djava.rmi.server.logCalls=true
.fl
\fP
.fi
will enable server\-call loggin up in all lil pimp VMs. 
.LP
.TP 3
\-J<someCommandLineOption> 
Specifies a option dat is passed ta tha \f2java\fP interpreta hustlin \f2rmid\fP. For example, ta specify dat \f2rmid\fP bust a policy file named \f2rmid.policy\fP, tha \f2\-J\fP option can be used ta define tha \f2java.security.policy\fP property on \f2rmid\fPz command line, fo' example: 
.nf
\f3
.fl
    rmid \-J\-Djava.security.policy=rmid.policy
.fl
\fP
.fi
.TP 3
\-J\-Dsun.rmi.activation.execPolicy=<policy> 
Specifies tha policy dat \f2rmid\fP employs ta check commandz n' command\-line options used ta launch tha VM up in which a activation crew runs. Please note dat dis option exists only up in Sunz implementation of tha Java RMI activation daemon. I aint talkin' bout chicken n' gravy biatch. If dis property aint specified on tha command line, tha result is tha same ol' dirty as if \f2\-J\-Dsun.rmi.activation.execPolicy=default\fP was specified. Y'all KNOW dat shit, muthafucka! Da possible jointz of \f2<policy>\fP can be \f2default\fP, \f2<policyClassName>\fP, or \f2none\fP: 
.RS 3
.TP 2
o
\f3default (or if dis property is \fP\f4unspecified\fP\f3)\fP 
.LP
Da default \f2execPolicy\fP allows \f2rmid\fP ta execute commandz wit specific command\-line options only if \f2rmid\fP has been granted permission ta execute dem commandz n' options up in tha securitizzle policy file dat \f2rmid\fP uses. Only tha default activation crew implementation can be used wit tha \f2default\fP execution policy. 
.LP
\f2rmid\fP launches a VM fo' a activation crew rockin tha shiznit up in tha groupz registered activation crew descriptor, a \f2ActivationGroupDesc\fP. Da crew descriptor specifies a optionizzle \f2ActivationGroupDesc.CommandEnvironment\fP which includes tha \f2command\fP ta execute ta start tha activation crew as well as any command line \f2options\fP ta be added ta tha command line. By default, \f2rmid\fP uses tha \f2java\fP command found up in \f2java.home\fP. Da crew descriptor also gotz nuff \f2properties\fP overrides dat is added ta tha command line as options defined as: 
.nf
\f3
.fl
    \-D\fP\f4<property>\fP\f3=\fP\f4<value>\fP\f3
.fl
\fP
.fi
.LP
Da permission \f2com.sun.rmi.rmid.ExecPermission\fP is used ta grant \f2rmid\fP permission ta execute a cold-ass lil command, specified up in tha crew descriptorz \f2CommandEnvironment\fP ta launch a activation group. Da permission \f2com.sun.rmi.rmid.ExecOptionPermission\fP is used ta allow \f2rmid\fP ta use command\-line options, specified as propertizzles overrides up in tha crew descriptor or as options up in tha \f2CommandEnvironment\fP, when launchin tha activation group. 
.LP
When grantin \f2rmid\fP permission ta execute various commandz n' options, tha permissions \f2ExecPermission\fP n' \f2ExecOptionPermission\fP need ta be granted universally (i.e., granted ta all code sources). 
.RS 3
.TP 3
ExecPermission 
Da \f2ExecPermission\fP class represents permission fo' \f2rmid\fP ta execute a specific \f2command\fP ta launch a activation group. 
.LP
\f3Syntax\fP
.br
Da \f2name\fP of a \f2ExecPermission\fP is tha path name of a cold-ass lil command ta grant \f2rmid\fP permission ta execute fo' realz. A path name dat endz up in "/*" indicates all tha filez contained up in dat directory (where "/" is tha file\-separator character, \f2File.separatorChar\fP) fo' realz. A path name dat endz wit "/\-" indicates all filez n' subdirectories contained up in dat directory (recursively) fo' realz. A path name consistin of tha special token "<<ALL FILES>>" matches \f3any\fP file. 
.LP
\f3Note:\fP A path name consistin of a single "*" indicates all tha filez up in tha current directory, while a path name consistin of a single "\-" indicates all tha filez up in tha current directory n' (recursively) all filez n' subdirectories contained up in tha current directory.  
.TP 3
ExecOptionPermission 
Da \f2ExecOptionPermission\fP class represents permission fo' \f2rmid\fP ta bust a specific command\-line \f2option\fP when launchin a activation group. Da \f2name\fP of a \f2ExecOptionPermission\fP is tha value of a cold-ass lil command line option. I aint talkin' bout chicken n' gravy biatch. 
.LP
\f3Syntax\fP
.br
Options support a limited wildcard scheme fo' realz. An asterisk signifies a wildcard match, n' it may step tha fuck up as tha option name itself (i.e., it matches any option), or a asterisk may step tha fuck up all up in tha end of tha option name only if tha asterisk bigs up either a "." or "=". 
.LP
For example: "*" or "\-Dfoo.*" or "\-Da.b.c=*" is valid, "*foo" or "\-Da*b" or "ab*" is not.  
.TP 3
Policy file fo' rmid 
When grantin \f2rmid\fP permission ta execute various commandz n' options, tha permissions \f2ExecPermission\fP n' \f2ExecOptionPermission\fP need ta be granted universally (i.e., granted ta all code sources). Well shiiiit, it is safe ta grant these permissions universally cuz only \f2rmid\fP checks these permissions. 
.LP
An example policy file dat grants various execute permissions ta \f2rmid\fP is: 
.nf
\f3
.fl
grant {
.fl
    permission com.sun.rmi.rmid.ExecPermission
.fl
        "/files/apps/java/jdk1.7.0/solaris/bin/java";
.fl

.fl
    permission com.sun.rmi.rmid.ExecPermission
.fl
        "/files/apps/rmidcmds/*";
.fl

.fl
    permission com.sun.rmi.rmid.ExecOptionPermission
.fl
        "\-Djava.security.policy=/files/policies/group.policy";
.fl

.fl
    permission com.sun.rmi.rmid.ExecOptionPermission
.fl
        "\-Djava.security.debug=*";
.fl

.fl
    permission com.sun.rmi.rmid.ExecOptionPermission
.fl
        "\-Dsun.rmi.*";
.fl
};
.fl
\fP
.fi
Da first permission granted allow \f2rmid\fP ta execute tha 1.7.0 version of tha \f2java\fP command, specified by its explicit path name. Note dat by default, tha version of tha \f2java\fP command found up in \f2java.home\fP is used (the same one dat \f2rmid\fP uses), n' do not need ta be specified up in tha policy file. Da second permission allows \f2rmid\fP ta execute any command up in tha directory \f2/files/apps/rmidcmds\fP. 
.LP
Da third permission granted, a \f2ExecOptionPermission\fP, allows \f2rmid\fP ta launch a activation crew dat defines tha securitizzle policy file ta be \f2/files/policies/group.policy\fP. Da next permission allows tha \f2java.security.debug\fP property ta be used by a activation group. Da last permission allows any property up in tha \f2sun.rmi\fP property name hierarchy ta be used by activation groups. 
.LP
To start \f2rmid\fP wit a policy file, tha \f2java.security.policy\fP property need ta be specified on \f2rmid\fPz command line, fo' example: 
.LP
\f2rmid \-J\-Djava.security.policy=rmid.policy\fP  
.RE
.TP 2
o
\f4<policyClassName>\fP 
.LP
If tha default behavior aint flexible enough, a administrator can provide, when startin \f2rmid\fP, tha name of a cold-ass lil class whose \f2checkExecCommand\fP method is executed up in order ta check commandz ta be executed by rmid. Y'all KNOW dat shit, muthafucka! 
.LP
Da \f2policyClassName\fP specifies a hood class wit a public, no\-argument constructor n' a implementation of tha followin \f2checkExecCommand\fP method: 
.nf
\f3
.fl
    hood void checkExecCommand(ActivationGroupDesc desc,
.fl
                                 String[] command)
.fl
        throws SecurityException;
.fl
\fP
.fi
Before launchin a activation group, \f2rmid\fP calls tha policyz \f2checkExecCommand\fP method, passin it tha activation crew descriptor n' a array containin tha complete command ta launch tha activation group. If tha \f2checkExecCommand\fP throws a \f2SecurityException\fP, \f2rmid\fP aint gonna launch tha activation crew n' a \f2ActivationException\fP is ghon be thrown ta tha calla attemptin ta activate tha object. 
.TP 2
o
\f3none\fP 
.LP
If tha \f2sun.rmi.activation.execPolicy\fP property value is "none", then \f2rmid\fP aint gonna big-ass up any validation of commandz ta launch activation groups.  
.RE
.LP
.TP 3
\-log dir 
Specifies tha name of tha directory tha activation system daemon uses ta write its database n' associated shiznit. I aint talkin' bout chicken n' gravy biatch. Da log directory defaults ta bustin a gangbangin' finger-lickin' directory, \f2log\fP, up in tha directory up in which tha \f2rmid\fP command was executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.LP
.TP 3
\-port port 
Specifies tha port \f2rmid\fPz registry uses. Da activation system daemon bindz tha \f2ActivationSystem\fP, wit tha name \f2java.rmi.activation.ActivationSystem\fP, up in dis registry. Thus, tha \f2ActivationSystem\fP on tha local machine can be obtained rockin tha followin \f2Naming.lookup\fP method call: 
.nf
\f3
.fl
    import java.rmi.*; 
.fl
    import java.rmi.activation.*;
.fl

.fl
    ActivationSystem system; system = (ActivationSystem)
.fl
    Naming.lookup("//:\fP\f4port\fP/java.rmi.activation.ActivationSystem");
.fl
.fi
.TP 3
\-stop 
Stops tha current invocation of \f2rmid\fP, fo' a port specified by tha \f2\-port\fP option. I aint talkin' bout chicken n' gravy biatch. If no port is specified, it will stop tha \f2rmid\fP hustlin on port 1098. 
.RE

.LP
.SH "ENVIRONMENT VARIABLES"
.LP
.RS 3
.TP 3
CLASSPATH 
Used ta provide tha system a path ta user\-defined classes. Directories is separated by colons. For example: 
.nf
\f3
.fl
    .:/usr/local/java/classes
.fl
\fP
.fi
.RE

.LP
.SH "SEE ALSO"
.LP
.LP
rmic(1), 
.na
\f2CLASSPATH\fP @
.fi
http://docs.oracle.com/javase/7/docs/technotes/tools/index.html#classpath, java(1)
.LP
 
