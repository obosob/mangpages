.TH TRIAL "1" "Oct 2007" "" ""
.SH NAME
trial \- run unit tests
.SH SYNOPSIS
\fBtrial\fR [ \fIoptions\fR ] [ \fIfile\fR | \fIpackage\fR | \fImodule\fR | \fITestCase\fR | \fItestmethod\fR ] ... 
.PP
\fBtrial --help\fR | \fB-h\fR
.SH DESCRIPTION
.PP
trial loadz n' executes a suite of unit tests, obtained from modules,
packages n' filez listed on tha command line.
.PP
trial will take either filenames or straight-up qualified Python names as
arguments, n' you can put dat on yo' toast.  Thus `trial myproject/foo.py', `trial myproject.foo' and
`trial myproject.foo.SomeTestCase.test_method' is all valid ways to
invoke trial.
.PP
Afta hustlin tha given test suite, tha default test reporta prints a summary
of tha test run. I aint talkin' bout chicken n' gravy biatch. This consistz of tha word "PASSED" (if all tests ran as
expected) or "FAILED" (if any test behaved unexpectedly) followed by a cold-ass lil count of
the different kindz of test thangs up in dis biatch encountered. Y'all KNOW dat shit, muthafucka! Da possible kindz of test
results includes:
.TP
successes
Tests dat passed all they assertions n' completed without error.
These is marked "PASSED" up in tha aiiight test output.
.TP
failures
Tests dat failed a assertion, called self.fail() or explicitly raised
self.failureException fo' some reason. I aint talkin' bout chicken n' gravy biatch. These is marked "FAILED" up in the
normal test output.
.TP
errors
Tests dat raised a unexpected exception (includin AssertionError),
tests dat caused tha tearDown() method ta raise a exception, tests
that run fo' longer than tha timeout interval, tests dat caused
suttin' ta booty-call twisted.python.log.err() without subsequently calling
self.flushLoggedErrors(), tests dat leave tha reactor up in a unclean
state, etc. These is marked "ERROR" up in tha aiiight test output.
.IP
Note dat cuz errors can be caused afta tha actual test method
returns, it is possible fo' a single test ta be reported as both an
error n' a gangbangin' failure, n' hence tha total number of test thangs up in dis biatch can be
greata than tha total number of tests executed.
.TP
skips
Tests dat was skipped, probably cuz of missin dependencies. Put ya muthafuckin choppers up if ya feel dis! These
are marked "SKIPPED" up in tha aiiight test output.
.TP
expectedFailures
Tests dat failed yo, but was sposed ta fuckin fail, probably cuz tha test
is fo' a gangbangin' feature dat aint been implemented yet. These is marked
"TODO" up in tha aiiight test output.
.TP
unexpectedSuccesses
Tests dat should done been listed under expectedFailures, except that
for some reason tha test succeeded. Y'all KNOW dat shit, muthafucka! These is marked "SUCCESS!?!" in
the aiiight test output.
.SH OPTIONS
.TP
\fB-b\fR, \fB--debug\fR
Run tha tests up in tha Python debugger n' shiznit fo' realz. Also do post-mortem
debuggin on exceptions. Will load `.pdbrc' from current directory if
it exists.
.TP
\fB-B\fR, \fB--debug-stacktraces\fR
Report Deferred creation n' callback stack traces
.TP
\fB--coverage\fR
Generate coverage shiznit up in tha `coverage' subdirectory of tha trial temp
directory (`_trial_temp' by default). For each Python module touched by the
execution of tha given tests, a gangbangin' file is ghon be pimped up in tha coverage directory
named fo' tha modulez fully-qualified name wit tha suffix `.cover'.  For
example, cuz tha trial test runner is freestyled up in Python, tha coverage
directory will almost always contain a gangbangin' file named `twisted.trial.runner.cover'.

Each `.cover' file gotz nuff a cold-ass lil copy of tha Python source of tha module in
question, wit a prefix all up in tha beginnin of each line containin coverage
information. I aint talkin' bout chicken n' gravy biatch.  For lines dat is not executable (blank lines, comments, etc.)
the prefix is blank.  For executable lines dat was run up in tha course of the
test suite, tha prefix be a number indicatin tha number of times dat line was
executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da strang `>>>>>>' prefixes executable lines dat was not executed
in tha course of tha test suite.

Note dat dis functionalitizzle uses Pythonz sys.settrace() function, so tests
that call sys.settrace() theyselves is likely ta break trialz coverage
functionality.
.TP
\fB--disablegc\fR
Disable tha garbage collector fo' tha duration of tha test run. I aint talkin' bout chicken n' gravy biatch fo' realz. As each test is
run, trial saves tha TestResult objects, which means dat Pythonz garbage
collector has mo' non-garbage objects ta wade through, makin each
garbage-collection run slightly slower n' shit. Disablin garbage collection entirely
will cook up some fuckin test suites complete fasta (contrast --force-gc, below), at the
cost of increasin (possibly pimped outly) memory consumption. I aint talkin' bout chicken n' gravy biatch. This option also makes
tests slightly mo' deterministic, which might help debuggin up in extreme
circumstances.
.TP
\fB-e\fR, \fB--rterrors\fR
Print tracebacks ta standard output as soon as they occur
.TP
\fB--force-gc\fR
Run gc.collect() before n' afta each test case. This can be used to
isolate errors dat occur when objects git collected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This option would be
the default, except it make tests run bout ten times slower.
.TP
\fB-h\fR, \fB--help\fR
Print a usage message ta standard output, then exit.
.TP
\fB--help-reporters\fR
Print a list of valid hustlas ta standard output, then exit. Reportas can
be selected wit tha --reporta option busted lyrics bout below.
.TP
\fB--help-reactors\fR
Print a list of possible reactors ta standard output, then exit. Not all listed
reactors is available on every last muthafuckin platform. Reactors can be selected wit the
--reactor option busted lyrics bout below.
.TP
\fB-l\fR, \fB--logfile\fR \fIlogfile\fR
Direct tha log ta a gangbangin' finger-lickin' different file. Da default file is `test.log'.
\fIlogfile\fR is relatizzle ta _trial_temp.
.TP
\fB-n\fR, \fB--dry-run\fR
Go all up in all tha tests n' make dem pass without hustlin.
.TP
\fB-N\fR, \fB--no-recurse\fR
By default, trial recurses all up in packages ta find every last muthafuckin module inside
every subpackage.  Unless, dat is, you specify dis option.
.TP
\fB--nopm\fR
Don't automatically jump tha fuck into debugger fo' post-mortem analysis of
exceptions.  Only usable up in conjunction wit --debug.
.TP
\fB--profile\fR
Run tests under tha Python profiler.
.TP
\fB-r\fR, \fB--reactor\fR \fIreactor\fR
Choose which reactor ta use.  See --help-reactors fo' a list.
.TP
\fB--recursionlimit\fR
Set Pythonz recursion limit. Right back up in yo muthafuckin ass. See sys.setrecursionlimit()
.TP
\fB--reporter\fR
Select tha reporta ta use fo' trialz output.  Use tha --help-reporters
option ta peep a list of valid hustlas.
.TP
\fB--spew\fR
Print a insanely verbose log of every last muthafuckin thang dat happens. Useful when
debuggin freezes or locks up in complex code.
.TP
\fB--tbformat\fR \fIformat\fR
Format ta display tracebacks wit fo' realz. Acceptable joints is `default', `brief'
and `verbose'. `brief' produces tracebacks dat play sickly wit Emacs' GUD.
.TP
\fB--temp-directory\fR \fIdirectory\fR
WARNING: Do not use dis options unless you know what tha fuck yo ass is bustin. 
By default, trial creates a gangbangin' finger-lickin' directory called _trial_temp under tha current
workin directory.  When trial runs, it first \fIdeletes\fR dis directory,
then creates it, then chizzlez tha fuck into tha directory ta run tha tests, n' you can put dat on yo' toast. Da log
file n' any coverage filez is stored here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Use dis option if you wish to
have trial run up in a gangbangin' finger-lickin' directory other than _trial_temp. Be warned, trial
will \fIdelete\fR tha directory before re-bustin dat shit.
.TP
\fB--testmodule\fR \fIfilename\fR
Ask trial ta look tha fuck into \fIfilename\fR n' run any tests specified rockin the
Emacs-style buffer variable `test-case-name'.
.TP
\fB--unclean-warnings\fR
Az of Twisted 8.0, trial will report a error if tha reactor is left unclean
at tha end of tha test. This option is provided ta assist up in migratin from
Twisted 2.5 ta Twisted 8.0 n' later n' shit. Enablin dis option will turn tha errors
into warnings.
.TP
\fB-u\fR, \fB--until-failure\fR
Keep loopin tha tests until one of dem raises a error or a gangbangin' failure.
This is particularly useful fo' reproducin intermittent failures.
.TP
\fB--version\fR
Prints tha Twisted version number n' exit.
.TP
\fB--without-module\fR \fImodulenames\fR
Simulate tha lack of tha specified comma-separated list of modules. This makes
it be lookin like tha modulez is not present up in tha system, causin tests ta check
the behavior fo' dat configuration.
.TP
\fB-z\fR, \fB--random\fR [\fIseed\fR]
Run tha tests up in random order rockin tha specified seed.
.PP
.SH SEE ALSO
Da sickest fuckin version of tha trial documentation can be found at
http://twistedmatrix.com/documents/current/core/howto/testing.html
.SH AUTHOR
Written by Jonathan M. Lange
.SH "REPORTING BUGS"
To report a funky-ass bug, visit http://twistedmatrix.com/trac/newticket
.SH COPYRIGHT
Copyright \(co 2003-2011 Twisted Matrix Laboratories
.br
This is free software; peep tha source fo' copyin conditions.  There is NO
warranty; not even fo' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
