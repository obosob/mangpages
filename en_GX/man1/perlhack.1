.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACK 1"
.TH PERLHACK 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhack \- How tha fuck ta hack on Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document explains how tha fuck Perl pimpment works.  It includes details
about tha Perl 5 Portas email list, tha Perl repository, tha Perlbug
bug tracker, patch guidelines, n' commentary on Perl pimpment
philosophy.
.SH "SUPER QUICK PATCH GUIDE"
.IX Header "SUPER QUICK PATCH GUIDE"
If you just wanna submit a single lil' small-ass patch like a pod fix, a test
for a funky-ass bug, comment fixes, etc., itz easy as fuck  dawwwwg! Herez how:
.IP "\(bu" 4
Peep up tha source repository
.Sp
Da perl source is up in a git repository.  Yo ass can clone tha repository
with tha followin command:
.Sp
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.IP "\(bu" 4
Ensure you followin tha sickest fuckin lyrics
.Sp
In case tha lyrics up in dis guide has been updated recently, read the
latest version directly from tha perl source:
.Sp
.Vb 1
\&  % perldoc pod/perlhack.pod
.Ve
.IP "\(bu" 4
Make yo' chizzle
.Sp
Hack, hack, hack.
.IP "\(bu" 4
Test yo' chizzle
.Sp
Yo ass can run all tha tests wit tha followin commands:
.Sp
.Vb 2
\&  % ./Configure \-des \-Dusedevel
\&  % make test
.Ve
.Sp
Keep jackin until tha tests pass.
.IP "\(bu" 4
Commit yo' chizzle
.Sp
Committin yo' work will save tha chizzle \fIon yo' local system\fR:
.Sp
.Vb 1
\&  % git commit \-a \-m \*(AqCommit message goes here\*(Aq
.Ve
.Sp
Make shizzle tha commit message raps bout yo' chizzle up in a single
sentence.  For example, \*(L"Fixed spellin errors up in perlhack.pod\*(R".
.IP "\(bu" 4
Send yo' chizzle ta perlbug
.Sp
Da next step is ta submit yo' patch ta tha Perl core ticket system
via email.
.Sp
If yo' chizzlez is up in a single git commit, run tha followin commands
to write tha file as a \s-1MIME\s0 attachment n' bust it wit a meaningful
subject:
.Sp
.Vb 3
\&  % git format\-patch \-1 \-\-attach
\&  % ./perl \-Ilib utils/perlbug \-s "[PATCH] $(
\&        git log \-1 \-\-oneline HEAD)" \-f 0001\-*.patch
.Ve
.Sp
Da perlbug program will ask you all dem thangs bout yo' email
address n' tha patch you submitting.  Once you've answered dem it
will submit yo' patch via email.
.Sp
If yo' chizzlez is up in multiple commits, generate a patch file
containin dem all, n' attach that:
.Sp
.Vb 2
\&  % git format\-patch origin/blead \-\-attach \-\-stdout > patches
\&  % ./perl \-Ilib utils/perlbug \-f patches
.Ve
.Sp
When prompted, pick a subject dat summarizes yo' chizzlez overall and
has \*(L"[\s-1PATCH\s0]\*(R" all up in tha beginning.
.IP "\(bu" 4
Nuff props
.Sp
Da portas appreciate tha time you dropped helpin ta make Perl better.
Nuff props, nahmean biiiatch?
.IP "\(bu" 4
Next time
.Sp
Da next time you wish ta cook up a patch, you need ta start from the
latest perl up in a pristine state.  Peep you aint gots any local chizzles
or added filez up in yo' perl check-out which you wish ta keep, then run
these commands:
.Sp
.Vb 3
\&  % git pull
\&  % git reset \-\-hard origin/blead
\&  % git clean \-dxf
.Ve
.SH "BUG REPORTING"
.IX Header "BUG REPORTING"
If you wanna report a funky-ass bug up in Perl, you must use tha \fIperlbug\fR
command line tool.  This tool will ensure dat yo' bug report includes
all tha relevant system n' configuration shiznit.
.PP
To browse existin Perl bugs n' patches, you can use tha wizzy intercourse
at <http://rt.perl.org/>.
.PP
Please check tha archive of tha perl5\-portas list (see below) and/or
the bug trackin system before submittin a funky-ass bug report.  Often, you'll
find dat tha bug has been reported already.
.PP
Yo ass can log up in ta tha bug trackin system n' comment on existin bug
reports, n' you can put dat on yo' toast.  If you have additionizzle shiznit regardin a existin bug,
please add dat shit.  This will help tha portas fix tha bug.
.SH "PERL 5 PORTERS"
.IX Header "PERL 5 PORTERS"
Da perl5\-portas (p5p) mailin list is where tha Perl standard
distribution is maintained n' pimped. Y'all KNOW dat shit, muthafucka!  Da playas whoz ass maintain Perl
are also referred ta as tha \*(L"Perl 5 Porters\*(R", \*(L"p5p\*(R" or just the
\&\*(L"porters\*(R".
.PP
A searchable archive of tha list be available at
<http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/>.  There is
also another archive at
<http://archive.develooper.com/perl5\-porters@perl.org/>.
.SS "perl-changes mailin list"
.IX Subsection "perl-changes mailin list"
Da perl5\-changes mailin list receives a cold-ass lil copy of each patch dat gets
submitted ta tha maintenizzle n' pimpment branchez of tha perl
repository.  See <http://lists.perl.org/list/perl5\-changes.html> for
subscription n' archive shiznit.
.SS "#p5p on \s-1IRC\s0"
.IX Subsection "#p5p on IRC"
Many portas is also actizzle on tha <irc://irc.perl.org/#p5p> channel.
Feel free ta join tha channel n' ask thangs bout jackin on the
Perl core.
.SH "GETTING THE PERL SOURCE"
.IX Header "GETTING THE PERL SOURCE"
All of Perlz source code is kept centrally up in a Git repository at
\&\fIperl5.git.perl.org\fR.  Da repository gotz nuff nuff Perl revisions
from Perl 1 onwardz n' all tha revisions from Perforce, tha previous
version control system.
.PP
For much mo' detail on rockin git wit tha Perl repository, please see
perlgit.
.SS "Read access via Git"
.IX Subsection "Read access via Git"
Yo ass will need a cold-ass lil copy of Git fo' yo' computer n' shit.  Yo ass can fetch a cold-ass lil copy of
the repository rockin tha git protocol:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This clones tha repository n' cook up a local copy up in tha \fIperl\fR
directory.
.PP
If you cannot use tha git protocol fo' firewall reasons, you can also
clone via http, though dis is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SS "Read access via tha web"
.IX Subsection "Read access via tha web"
Yo ass may access tha repository over tha web.  This allows you ta browse
the tree, peep recent commits, subscribe ta \s-1RSS\s0 feedz fo' tha chizzles,
search fo' particular commits n' mo' n' mo' n' mo'.  Yo ass may access it at
<http://perl5.git.perl.org/perl.git>.  A mirror of tha repository is
found at <http://github.com/mirrors/perl>.
.SS "Read access via rsync"
.IX Subsection "Read access via rsync"
Yo ass can also chizzle ta use rsync ta git a cold-ass lil copy of tha current source
tree fo' tha bleadperl branch n' all maintenizzle branches:
.PP
.Vb 6
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-current .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.12.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.10.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.8.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.6.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.005xx .
.Ve
.PP
(Add tha \f(CW\*(C`\-\-delete\*(C'\fR option ta remove leftover files.)
.PP
To git a gangbangin' full list of tha available sync points:
.PP
.Vb 1
\&  % rsync perl5.git.perl.org::
.Ve
.SS "Write access via git"
.IX Subsection "Write access via git"
If you gotz a cold-ass lil commit bit, please peep perlgit fo' mo' details on
usin git.
.SH "PATCHING PERL"
.IX Header "PATCHING PERL"
If you plannin ta do mo' extensive work than a single lil' small-ass fix,
we encourage you ta read tha documentation below.  This will help you
focus yo' work n' make yo' patches easier ta incorporate tha fuck into the
Perl source.
.SS "Submittin patches"
.IX Subsection "Submittin patches"
If you gotz a lil' small-ass patch ta submit, please submit it via perlbug.  You
can also bust email directly ta perlbug@perl.org.  Please note that
lyrics busted ta perlbug may be held up in a moderation queue, so you
won't receive a response immediately.
.PP
You'll know yo' submission has been processed when you receive an
email from our ticket trackin system.  This email will hit you wit a
ticket number n' shit.  Once yo' patch has juiced it up ta tha ticket tracking
system, it will also be busted ta tha perl5\-porters@perl.org list.
.PP
Patches is reviewed n' discussed on tha p5p list.  Simple,
uncontroversial patches will probably be applied without any rap.
When tha patch be applied, tha ticket is ghon be updated n' you will
receive email.  In addition, a email is ghon be busted ta tha p5p list.
.PP
In other cases, tha patch will need mo' work or rap. I aint talkin' bout chicken n' gravy biatch.  That will
happen on tha p5p list.
.PP
Yo ass is encouraged ta participate up in tha rap n' advocate for
your patch.  Sometimes yo' patch may git lost up in tha shuffle.  It's
appropriate ta bust a reminder email ta p5p if no action has been taken
in a month.  Please remember dat tha Perl 5 pimpers is all
volunteers, n' be polite.
.PP
Changes is always applied directly ta tha main pimpment branch,
called \*(L"blead\*(R".  Some patches may be backported ta a maintenance
branch.  If you be thinkin yo' patch be appropriate fo' tha maintenance
branch (see \*(L"\s-1MAINTENANCE BRANCHES\*(R"\s0 up in perlpolicy), please explain why
when you submit dat shit.
.SS "Gettin yo' patch accepted"
.IX Subsection "Gettin yo' patch accepted"
If yo ass is submittin a cold-ass lil code patch there be nuff muthafuckin thangs dat you
can do ta help tha Perl 5 Portas accept yo' patch.
.PP
\fIPatch style\fR
.IX Subsection "Patch style"
.PP
If you used git ta check up tha Perl source, then rockin \f(CW\*(C`git
format\-patch\*(C'\fR will produce a patch up in a steez suitable fo' Perl.  The
\&\f(CW\*(C`format\-patch\*(C'\fR command produces one patch file fo' each commit you
made.  If you prefer ta bust a single patch fo' all commits, you can
use \f(CW\*(C`git diff\*(C'\fR.
.PP
.Vb 3
\&  % git checkout blead
\&  % git pull
\&  % git diff blead my\-branch\-name
.Ve
.PP
This produces a patch based on tha difference between blead n' your
current branch.  It aint nuthin but blingin ta make shizzle dat blead is up ta date
before producin tha diff, thatz why we call \f(CW\*(C`git pull\*(C'\fR first.
.PP
We straight fuckin recommend dat you use git if possible.  It will make your
life easier, n' ours as well.
.PP
But fuck dat shiznit yo, tha word on tha street is dat if you not rockin git, you can still produce a suitable
patch.  You'll need a pristine copy of tha Perl source ta diff against.
Da portas prefer unified diffs.  Usin \s-1GNU \s0\f(CW\*(C`diff\*(C'\fR, you can produce a
diff like this:
.PP
.Vb 1
\&  % diff \-Npurd perl.pristine perl.mine
.Ve
.PP
Make shizzle dat you \f(CW\*(C`make realclean\*(C'\fR up in yo' copy of Perl ta remove any
build artifacts, or you may git a cold-ass lil confusin result.
.PP
\fICommit message\fR
.IX Subsection "Commit message"
.PP
As you craft each patch you intend ta submit ta tha Perl core, it's
important ta write a phat commit message.  This is especially blingin
if yo' submission will consist of a seriez of commits.
.PP
Da first line of tha commit message should be a gangbangin' finger-lickin' dirty-ass short description
without a period. Y'all KNOW dat shit, muthafucka!  It should be no longer than tha subject line of an
email, 50 charactas bein a phat rule of thumb.
.PP
All dem Git tools (Gitweb, GitHub, git log \-\-pretty=oneline, ...) will
only display tha straight-up original gangsta line (cut off at 50 characters) when presenting
commit summaries.
.PP
Da commit message should include a thugged-out description of tha problem dat the
patch erects or freshly smoked up functionalitizzle dat tha patch adds.
.PP
As a general rule of thumb, yo' commit message should help a
programmer whoz ass knows tha Perl core quickly KNOW what tha fuck you were
tryin ta do, how tha fuck you was tryin ta do it, n' why tha chizzle matters
to Perl.
.IP "\(bu" 4
Why
.Sp
Yo crazy-ass commit message should describe why tha chizzle yo ass is makin is
important.  When one of mah thugs looks at yo' chizzle up in six months or six
years, yo' intent should be clear.
.Sp
If you deprecatin a gangbangin' feature wit tha intent of lata simplifying
another bit of code, say so.  If you fixin a performizzle problem or
addin a freshly smoked up feature ta support some other bit of tha core, mention
that.
.IP "\(bu" 4
What
.Sp
Yo crazy-ass commit message should describe what tha fuck part of tha Perl core you is
changin n' what tha fuck you expect yo' patch ta do.
.IP "\(bu" 4
How
.Sp
While it aint necessary fo' documentation chizzles, freshly smoked up tests or
trivial patches, itz often worth explainin how tha fuck yo' chizzle works.
Even if itz clear ta you todizzle, it may not be clear ta a porta next
month or next year.
.PP
A commit message aint intended ta take tha place of comments up in your
code.  Commit lyrics should describe tha chizzle you made, while code
comments should describe tha current state of tha code.
.PP
If you've just implemented a freshly smoked up feature, complete wit doc, tests and
well-commented code, a funky-ass brief commit message will often suffice.  If,
however, you've just chizzled a single characta deep up in tha parser or
lexer, you might need ta write a lil' small-ass novel ta ensure dat future
readaz KNOW what tha fuck you did n' why you done did dat shit.
.PP
\fIComments, Comments, Comments\fR
.IX Subsection "Comments, Comments, Comments"
.PP
Be shizzle ta adequately comment yo' code.  While commentin every last muthafuckin line
is unnecessary, anythang dat takes advantage of side effects of
operators, dat creates chizzlez dat is ghon be felt outside of the
function bein patched, or dat others may find confusin should be
documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If yo ass is goin ta err, it is betta ta err on tha side
of addin too nuff comments than too few.
.PP
Da dopest comments explain \fIwhy\fR tha code do what tha fuck it do, not \fIwhat
it do\fR.
.PP
\fIStyle\fR
.IX Subsection "Style"
.PP
In general, please follow tha particular steez of tha code yo ass is
patching.
.PP
In particular, follow these general guidelines fo' patchin Perl
sources:
.IP "\(bu" 4
8\-wide tabs (no exceptions!)
.IP "\(bu" 4
4\-wide indents fo' code, 2\-wide indents fo' nested \s-1CPP\s0 #defines
.IP "\(bu" 4
Try hard not ta exceed 79\-columns
.IP "\(bu" 4
\&\s-1ANSI C\s0 prototypes
.IP "\(bu" 4
Uncuddled elses n' \*(L"K&R\*(R" steez fo' indentin control constructs
.IP "\(bu" 4
No \*(C+ steez (//) comments
.IP "\(bu" 4
Mark places dat need ta be revisited wit \s-1XXX \s0(and revisit often!)
.IP "\(bu" 4
Openin brace lines up wit \*(L"if\*(R" when conditionizzle spans multiple lines;
should be at end-of-line otherwise
.IP "\(bu" 4
In function definitions, name starts up in column 0 (return value is on
previous line)
.IP "\(bu" 4
Single space afta keywordz dat is followed by parens, no space
between function name n' followin paren
.IP "\(bu" 4
Avoid assignments up in conditionals yo, but if they unavoidable, use
extra paren, e.g. \*(L"if (a && (b = c)) ...\*(R"
.IP "\(bu" 4
\&\*(L"return foo;\*(R" rather than \*(L"return(foo);\*(R"
.IP "\(bu" 4
\&\*(L"if (!foo) ...\*(R" rather than \*(L"if (foo == \s-1FALSE\s0) ...\*(R" etc.
.IP "\(bu" 4
Do not declare variablez rockin \*(L"register\*(R".  It may be counterproductive
with modern compilers, n' is deprecated up in \*(C+, under which tha Perl
source is regularly compiled.
.IP "\(bu" 4
In-line functions dat is up in headaz dat is accessible ta \s-1XS\s0 code
need ta be able ta compile without warnings wit commonly used extra
compilation flags, like fuckin gccs \f(CW\*(C`\-Wswitch\-default\*(C'\fR which warns
whenever a switch statement aint gots a \*(L"default\*(R" case.  Da use of
these extra flags is ta catch potential problems up in legal C code, and
is often used by Perl aggregators, like fuckin Linux distributors.
.PP
\fITest suite\fR
.IX Subsection "Test suite"
.PP
If yo' patch chizzlez code (rather than just changin documentation),
you should also include one or mo' test cases which illustrate tha bug
yo ass is fixin or validate tha freshly smoked up functionalitizzle you adding.  In
general, you should update a existin test file rather than create a
new one.
.PP
Yo crazy-ass test suite additions should generally follow these guidelines
(courtesy of Gurusamy Sarathy <gsar@activestate.com>):
.IP "\(bu" 4
Know what tha fuck you testing.  Read tha docs, n' tha source.
.IP "\(bu" 4
Tend ta fail, not succeed.
.IP "\(bu" 4
Interpret thangs up in dis biatch strictly.
.IP "\(bu" 4
Use unrelated features (this will flush up bizarre interactions).
.IP "\(bu" 4
Use non-standard idioms (otherwise yo ass is not testin \s-1TIMTOWTDI\s0).
.IP "\(bu" 4
Avoid rockin hardcoded test numbers whenever possible (the \s-1EXPECTED/GOT\s0
found up in t/op/tie.t is much mo' maintainable, n' gives betta failure
reports).
.IP "\(bu" 4
Give meaningful error lyrics when a test fails.
.IP "\(bu" 4
Avoid rockin qx// n' \fIsystem()\fR unless yo ass is testin fo' em.  If you
do use them, make shizzle dat you cover _all_ perl platforms.
.IP "\(bu" 4
Unlink any temporary filez you create.
.IP "\(bu" 4
Promote unforeseen warnings ta errors wit \f(CW$SIG\fR{_\|_WARN_\|_}.
.IP "\(bu" 4
Be shizzle ta use tha libraries n' modulez shipped wit tha version being
tested, not dem dat was already installed.
.IP "\(bu" 4
Add comments ta tha code explainin what tha fuck yo ass is testin for.
.IP "\(bu" 4
Make uppimpin tha '1..42' strang unnecessary.  Or make shizzle dat you
update dat shit.
.IP "\(bu" 4
Test _all_ behaviorz of a given operator, library, or function.
.Sp
Test all optionizzle arguments.
.Sp
Test return joints up in various contexts (boolean, scalar, list, lvalue).
.Sp
Use both global n' lexical variables.
.Sp
Don't forget tha exceptional, pathological cases.
.SS "Patchin a cold-ass lil core module"
.IX Subsection "Patchin a cold-ass lil core module"
This works just like patchin anythang else, wit one extra
consideration.
.PP
Modulez up in tha \fIcpan/\fR directory of tha source tree is maintained
outside of tha Perl core.  When tha lyricist thugged-out shiznit tha module, the
updates is simply copied tha fuck into tha core.  See dat module's
documentation or its listin on <http://search.cpan.org/> fo' more
information on reportin bugs n' submittin patches.
.PP
In most cases, patches ta modulez up in \fIcpan/\fR should be busted upstream
and should not be applied ta tha Perl core individually.  If a patch to
a file up in \fIcpan/\fR straight-up cannot wait fo' tha fix ta be made
upstream, busted out ta \s-1CPAN\s0 n' copied ta blead, you must add (or
update) a \f(CW\*(C`CUSTOMIZED\*(C'\fR entry up in tha \fI\*(L"Porting/Maintainers.pl\*(R"\fR file
to flag dat a local modification has been made.  See
\&\fI\*(L"Porting/Maintainers.pl\*(R"\fR fo' mo' details.
.PP
In contrast, modulez up in tha \fIdist/\fR directory is maintained up in the
core.
.SS "Uppimpin perldelta"
.IX Subsection "Uppimpin perldelta"
For chizzlez dope enough ta warrant a \fIpod/perldelta.pod\fR entry,
the portas will pimped outly appreciate it if you submit a thugged-out delta entry
along wit yo' actual chizzle.  Significant chizzlez include yo, but are
not limited to:
.IP "\(bu" 4
Adding, deprecating, or removin core features
.IP "\(bu" 4
Adding, deprecating, removing, or upgradin core or dual-life modules
.IP "\(bu" 4
Addin freshly smoked up core tests
.IP "\(bu" 4
Fixin securitizzle thangs n' user-visible bugs up in tha core
.IP "\(bu" 4
Changes dat might break existin code, either on tha perl or C level
.IP "\(bu" 4
Significant performizzle improvements
.IP "\(bu" 4
Adding, removing, or hella changin documentation up in the
\&\fIpod/\fR directory
.IP "\(bu" 4
Important platform-specific chizzles
.PP
Please make shizzle you add tha perldelta entry ta tha right section
within \fIpod/perldelta.pod\fR.  Mo' shiznit on how tha fuck ta write good
perldelta entries be available up in tha \f(CW\*(C`Style\*(C'\fR section of
\&\fIPorting/how_to_write_a_perldelta.pod\fR.
.SS "What make fo' a phat patch?"
.IX Subsection "What make fo' a phat patch?"
New features n' extensions ta tha language can be contentious.  There
is no specific set of criteria which determine what tha fuck features git added,
but here is some thangs ta consider when pimpin a patch:
.PP
\fIDo tha concept match tha general goalz of Perl?\fR
.IX Subsection "Do tha concept match tha general goalz of Perl?"
.PP
Our goals include yo, but is not limited to:
.IP "1." 4
Keep it fast, simple, n' useful.
.IP "2." 4
Keep features/concepts as orthogonal as possible.
.IP "3." 4
No arbitrary limits (platforms, data sizes, cultures).
.IP "4." 4
Keep it open n' bangin ta use/patch/advocate Perl all over dis biiiatch.
.IP "5." 4
Either assimilate freshly smoked up technologies, or build bridges ta em.
.PP
\fIWhere is tha implementation?\fR
.IX Subsection "Where is tha implementation?"
.PP
All tha rap up in tha ghetto is useless without a implementation. I aint talkin' bout chicken n' gravy biatch.  In
almost every last muthafuckin case, tha thug or playas whoz ass argue fo' a freshly smoked up feature
will be sposed ta fuckin be tha ones whoz ass implement dat shit.  Portas capable of
codin freshly smoked up features have they own agendas, n' is not available to
implement yo' (possibly good) idea.
.PP
\fIBackwardz compatibility\fR
.IX Subsection "Backwardz compatibility"
.PP
It aint nuthin but a cold-ass lil cardinal sin ta break existin Perl programs.  New warnings can
be contentious\*(--some say dat a program dat emits warnings is not
broken, while others say it is.  Addin keywordz has tha potential to
break programs, changin tha meanin of existin token sequences or
functions might break programs.
.PP
Da Perl 5 core includes mechanizzlez ta help portas make backwards
incompatible chizzlez mo' compatible like fuckin tha feature and
deprecate modules.  Please use dem when appropriate.
.PP
\fICould it be a module instead?\fR
.IX Subsection "Could it be a module instead?"
.PP
Perl 5 has extension mechanisms, modulez n' \s-1XS,\s0 specifically ta avoid
the need ta keep changin tha Perl interpreter n' shit.  Yo ass can write modules
that export functions, you can give dem functions prototypes so they
can be called like built-in functions, you can even write \s-1XS\s0 code to
mess wit tha runtime data structurez of tha Perl interpreta if you
wanna implement straight-up fucked up thangs.
.PP
Whenever possible, freshly smoked up features should be prototyped up in a \s-1CPAN\s0 module
before they is ghon be considered fo' tha core.
.PP
\fIIs tha feature generic enough?\fR
.IX Subsection "Is tha feature generic enough?"
.PP
Is dis suttin' dat only tha submitta wants added ta tha language,
or is it broadly useful?  Sometimes, instead of addin a gangbangin' feature wit a
tight focus, tha portas might decizzle ta wait until one of mah thugs implements
the mo' generalized feature.
.PP
\fIDo it potentially introduce freshly smoked up bugs?\fR
.IX Subsection "Do it potentially introduce freshly smoked up bugs?"
.PP
Radical rewritez of big-ass chunkz of tha Perl interpreta have the
potential ta introduce freshly smoked up bugs.
.PP
\fIHow tha fuck big-ass is it?\fR
.IX Subsection "How tha fuck big-ass is it?"
.PP
Da smalla n' mo' localized tha chizzle, tha mo' betta n' shit.  Similarly, a
seriez of lil' small-ass patches is pimped outly preferred over a single big-ass patch.
.PP
\fIDo it preclude other desirable features?\fR
.IX Subsection "Do it preclude other desirable features?"
.PP
A patch is likely ta be rejected if it closes off future avenues of
development.  For instance, a patch dat placed a legit n' final
interpretation on prototypes is likely ta be rejected cuz there are
still options fo' tha future of prototypes dat aint been addressed.
.PP
\fIIs tha implementation robust?\fR
.IX Subsection "Is tha implementation robust?"
.PP
Dope patches (tight code, complete, erect) stand mo' chizzle of going
in. I aint talkin' bout chicken n' gravy biatch.  Sloppy or incorrect patches might be placed on tha back burner
until tha pumpkin has time ta fix, or might be discarded altogether
without further notice.
.PP
\fIIs tha implementation generic enough ta be portable?\fR
.IX Subsection "Is tha implementation generic enough ta be portable?"
.PP
Da most shitty patches make use of system-specific features.  It aint nuthin but highly
unlikely dat non-portable additions ta tha Perl language will be
accepted.
.PP
\fIIs tha implementation tested?\fR
.IX Subsection "Is tha implementation tested?"
.PP
Patches which chizzle behaviour (fixin bugs or introducin new
features) must include regression tests ta verify dat every last muthafuckin thang works
as expected.
.PP
Without tests provided by tha original gangsta lyricist, how tha fuck can any suckas
changin perl up in tha future be shizzle dat they aint unwittingly
broken tha behaviour tha patch implements? And without tests, how tha fuck can
the patchz lyricist be Kool & Tha Gang dat his/her mad bullshit put tha fuck into the
patch won't be accidentally thrown away by one of mah thugs up in tha future?
.PP
\fIIs there enough documentation?\fR
.IX Subsection "Is there enough documentation?"
.PP
Patches without documentation is probably ill-thought up or
incomplete.  No features can be added or chizzled without documentation,
so submittin a patch fo' tha appropriate pod docs as well as the
source code is blingin.
.PP
\fIIs there another way ta do it?\fR
.IX Subsection "Is there another way ta do it?"
.PP
Larry holla'd "Although tha Perl Slogan is \fITherez Mo' Than One Way to
Do It\fR, I hesitate ta make 10 ways ta do something".  This be a tricky
heuristic ta navigate, though\*(--one manz essential addizzle be another
manz pointless cruft.
.PP
\fIDo it create too much work?\fR
.IX Subsection "Do it create too much work?"
.PP
Work fo' tha pumpking, work fo' Perl programmers, work fo' module
authors, ... Perl is supposed ta be easy as fuck .
.PP
\fIPatches drop a rhyme louder than lyrics\fR
.IX Subsection "Patches drop a rhyme louder than lyrics"
.PP
Workin code be always preferred ta pie-in-the-sky ideas.  A patch to
add a gangbangin' feature standz a much higher chizzle of makin it ta tha language
than do a random feature request, no matta how tha fuck fervently broke off some disrespec the
request might be.  This tizzles tha fuck into \*(L"Will it be useful?\*(R", as tha fact
that one of mah thugs took tha time ta make tha patch demonstrates a strong
desire fo' tha feature.
.SH "TESTING"
.IX Header "TESTING"
Da core uses tha same ol' dirty testin steez as tha rest of Perl, a simple
\&\*(L"ok/not ok\*(R" run all up in Test::Harnizz yo, but there be all dem special
considerations.
.PP
There is three ways ta write a test up in tha core: Test::Mo',
\&\fIt/test.pl\fR n' ad hoc \f(CW\*(C`print $test ? "ok 42\en" : "not aiiight 42\en"\*(C'\fR.
Da decision of which ta use dependz on what tha fuck part of tha test suite
yo ass is hustlin on. I aint talkin' bout chicken n' gravy biatch.  This be a measure ta prevent a high-level failure
(like fuckin Config.pm breaking) from causin basic functionalitizzle tests to
fail.
.PP
Da \fIt/test.pl\fR library serves up a shitload of tha features of
Test::Mo' yo, but avoidz loadin most modulez n' uses as few core
features as possible.
.PP
If you write yo' own test, use tha Test Anything
Protocol <http://testanything.org>.
.IP "\(bu" 4
\&\fIt/base\fR, \fIt/comp\fR n' \fIt/opbasic\fR
.Sp
Since our phat asses don't give a fuck if require works, or even subroutines, use ad hoc
tests fo' these three.  Step carefully ta avoid rockin tha feature being
tested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Tests up in \fIt/opbasic\fR, fo' instance, done been placed there
rather than up in \fIt/op\fR cuz they test functionalitizzle which
\&\fIt/test.pl\fR presumes has already been demonstrated ta work.
.IP "\(bu" 4
\&\fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR n' \fIt/op\fR
.Sp
Now dat basic \fIrequire()\fR n' subroutines is tested, you can use the
\&\fIt/test.pl\fR library.
.Sp
Yo ass can also use certain libraries like Config conditionally yo, but be
sure ta skip tha test gracefully if it aint there.
.IP "\(bu" 4
Everythang else
.Sp
Now dat tha core of Perl is tested, Test::Mo' can n' should be
used. Y'all KNOW dat shit, muthafucka!  Yo ass can also use tha full suite of core modulez up in tha tests.
.PP
When you say \*(L"make test\*(R", Perl uses tha \fIt/TEST\fR program ta run the
test suite (except under Win32 where it uses \fIt/harness\fR instead).
All tests is run from tha \fIt/\fR directory, \fBnot\fR tha directory which
gotz nuff tha test.  This causes some problems wit tha tests in
\&\fIlib/\fR, so herez some opportunitizzle fo' some patching.
.PP
Yo ass must be triply consciouz of cross-platform concerns.  This usually
boils down ta rockin File::Spec n' avoidin thangs like \f(CW\*(C`fork()\*(C'\fR
and \f(CW\*(C`system()\*(C'\fR unless straight-up necessary.
.ie n .SS "Special ""make test"" targets"
.el .SS "Special \f(CWmake test\fP targets"
.IX Subsection "Special make test targets"
There is various special make targets dat can be used ta test Perl
slightly differently than tha standard \*(L"test\*(R" target.  Not all dem are
sposed ta fuckin give a 100% success rate.  Many of dem have several
aliases, n' nuff of dem is not available on certain operating
systems.
.IP "\(bu" 4
test_porting
.Sp
This runs some basic sanitizzle tests on tha source tree n' helps catch
basic errors before you submit a patch.
.IP "\(bu" 4
minitest
.Sp
Run \fIminiperl\fR on \fIt/base\fR, \fIt/comp\fR, \fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR,
\&\fIt/op\fR, \fIt/uni\fR n' \fIt/mro\fR tests.
.IP "\(bu" 4
test.valgrind check.valgrind
.Sp
(Only up in Linux) Run all tha tests rockin tha memory leak + naughty
memory access tool \*(L"valgrind\*(R".  Da log filez is ghon be named
\&\fItestname.valgrind\fR.
.IP "\(bu" 4
test_harness
.Sp
Run tha test suite wit tha \fIt/harness\fR controllin program, instead
of \fIt/TEST\fR.  \fIt/harness\fR is mo' sophisticated, n' uses the
Test::Harnizz module, thus rockin dis test target supposes dat perl
mostly works.  Da main advantage fo' our purposes is dat it prints a
detailed summary of failed tests all up in tha end yo, but it ain't no stoppin cause I be still poppin'.  Also, unlike \fIt/TEST\fR,
it don't redirect stderr ta stdout.
.Sp
Note dat under Win32 \fIt/harness\fR be always used instead of \fIt/TEST\fR,
so there is no special \*(L"test_harness\*(R" target.
.Sp
Under Win32z \*(L"test\*(R" target you may use tha \s-1TEST_SWITCHES\s0 and
\&\s-1TEST_FILES\s0 environment variablez ta control tha behaviour of
\&\fIt/harness\fR.  This means you can say
.Sp
.Vb 2
\&    nmake test TEST_FILES="op/*.t"
\&    nmake test TEST_SWITCHES="\-torture" TEST_FILES="op/*.t"
.Ve
.IP "\(bu" 4
test-notty test_notty
.Sp
Sets \s-1PERL_SKIP_TTY_TEST\s0 ta legit before hustlin aiiight test.
.SS "Parallel tests"
.IX Subsection "Parallel tests"
Da core distribution can now run its regression tests up in parallel on
Unix-like platforms.  Instead of hustlin \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR
in yo' environment ta tha number of tests ta run up in parallel, n' run
\&\f(CW\*(C`make test_harness\*(C'\fR.  On a Bourne-like shell, dis can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harnizz  # Run 3 tests up in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself,
because TAP::Harnizz need ta be able ta schedule individual
non-conflictin test scripts itself, n' there is no standard intercourse
to \f(CW\*(C`make\*(C'\fR utilitizzles ta interact wit they thang schedulers.
.PP
Note dat currently some test scripts may fail when run up in parallel
(most notably \fIext/IO/t/io_dir.t\fR).  If necessary, run just the
failin scripts again n' again n' again sequentially n' peep if tha failures go away.
.SS "Hustlin tests by hand"
.IX Subsection "Hustlin tests by hand"
Yo ass can run part of tha test suite by hand by rockin one of the
followin commandz from tha \fIt/\fR directory:
.PP
.Vb 1
\&    ./perl \-I../lib TEST list\-of\-.t\-files
.Ve
.PP
or
.PP
.Vb 1
\&    ./perl \-I../lib harnizz list\-of\-.t\-files
.Ve
.PP
(If you don't specify test scripts, tha whole test suite is ghon be run.)
.SS "Usin \fIt/harness\fP fo' testing"
.IX Subsection "Usin t/harnizz fo' testing"
If you use \f(CW\*(C`harness\*(C'\fR fo' testing, you have nuff muthafuckin command line
options available ta yo thugged-out ass.  Da arguments is as bigs up, n' is up in the
order dat they must step tha fuck up if used together.
.PP
.Vb 2
\&    harnizz \-v \-torture \-re=pattern LIST OF FILES TO TEST
\&    harnizz \-v \-torture \-re LIST OF PATTERNS TO MATCH
.Ve
.PP
If \f(CW\*(C`LIST OF FILES TO TEST\*(C'\fR is omitted, tha file list is obtained from
the manifest.  Da file list may include shell wildcardz which will be
expanded out.
.IP "\(bu" 4
\&\-v
.Sp
Run tha tests under verbose mode so you can peep what tha fuck tests was run,
and debug output.
.IP "\(bu" 4
\&\-torture
.Sp
Run tha torture tests as well as tha aiiight set.
.IP "\(bu" 4
\&\-re=PATTERN
.Sp
Filta tha file list so dat all tha test filez run match \s-1PATTERN.\s0
Note dat dis form is distinct from tha \fB\-re \s-1LIST OF PATTERNS\s0\fR form
below up in dat it allows tha file list ta be provided as well.
.IP "\(bu" 4
\&\-re \s-1LIST OF PATTERNS\s0
.Sp
Filta tha file list so dat all tha test filez run match
/(LIST|OF|PATTERNS)/.  Note dat wit dis form tha patterns is joined
by '|' n' you cannot supply a list of files, instead tha test files
are obtained from tha \s-1MANIFEST.\s0
.PP
Yo ass can run a individual test by a cold-ass lil command similar to
.PP
.Vb 1
\&    ./perl \-I../lib path/to/foo.t
.Ve
.PP
except dat tha harnesses set up some environment variablez dat may
affect tha execution of tha test:
.IP "\(bu" 4
PERL_CORE=1
.Sp
indicates dat we hustlin dis test as part of tha perl core test
suite.  This is useful fo' modulez dat gotz a thugged-out dual game on \s-1CPAN.\s0
.IP "\(bu" 4
PERL_DESTRUCT_LEVEL=2
.Sp
is set ta 2 if it aint set already (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 up in perlhacktips).
.IP "\(bu" 4
\&\s-1PERL\s0
.Sp
(used only by \fIt/TEST\fR) if set, overrides tha path ta tha perl
executable dat should be used ta run tha tests (the default being
\&\fI./perl\fR).
.IP "\(bu" 4
\&\s-1PERL_SKIP_TTY_TEST\s0
.Sp
if set,  drops some lyrics ta ta skip tha tests dat need a terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  It aint nuthin but actually
set automatically by tha Makefile yo, but can also be forced artificially
by hustlin 'make test_notty'.
.PP
\fIOther environment variablez dat may influence tests\fR
.IX Subsection "Other environment variablez dat may influence tests"
.IP "\(bu" 4
PERL_TEST_Net_Ping
.Sp
Settin dis variable runs all tha Net::Pin modulez tests, otherwise
some tests dat interact wit tha outside ghetto is skipped. Y'all KNOW dat shit, muthafucka!  See
perl58delta.
.IP "\(bu" 4
\&\s-1PERL_TEST_NOVREXX\s0
.Sp
Settin dis variable skips tha vrexx.t tests fo' \s-1OS2::REXX.\s0
.IP "\(bu" 4
\&\s-1PERL_TEST_NUMCONVERTS\s0
.Sp
This sets a variable up in op/numconvert.t.
.IP "\(bu" 4
\&\s-1PERL_TEST_MEMORY\s0
.Sp
Settin dis variable includes tha tests up in \fIt/bigmem/\fR.  This should
be set ta tha number of gigabytez of memory available fo' testing, eg.
\&\f(CW\*(C`PERL_TEST_MEMORY=4\*(C'\fR indicates dat tests dat require 4GiB of
available memory can be run safely.
.PP
See also tha documentation fo' tha Test n' Test::Harnizz modules, for
more environment variablez dat affect testing.
.SH "MORE READING FOR GUTS HACKERS"
.IX Header "MORE READING FOR GUTS HACKERS"
To hack on tha Perl guts, you gonna need ta read tha followin thangs:
.IP "\(bu" 4
perlsource
.Sp
An overview of tha Perl source tree.  This will help you find tha files
yo ass is lookin for.
.IP "\(bu" 4
perlinterp
.Sp
An overview of tha Perl interpreta source code n' some details on how
Perl do what tha fuck it do.
.IP "\(bu" 4
perlhacktut
.Sp
This document strutts all up in tha creation of a lil' small-ass patch ta Perlz C
code.  If you just gettin started wit Perl core hacking, dis will
help you KNOW how tha fuck it works.
.IP "\(bu" 4
perlhacktips
.Sp
Mo' details on jackin tha Perl core.  This document focuses on lower
level details like fuckin how tha fuck ta write tests, compilation issues,
portability, debugging, etc.
.Sp
If you plan on bustin straight-up C hacking, make shizzle ta read all dis bullshit.
.IP "\(bu" 4
perlguts
.Sp
This iz of paramount importance, since itz tha documentation of what
goes where up in tha Perl source.  Read it over a cold-ass lil couple times n' it
might start ta make sense \- quit freakin' tha fuck up if it don't yet, cuz the
best way ta study it is ta read it up in conjunction wit pokin at Perl
source, n' we'll do dat lata on.
.Sp
Gisle Aass \*(L"illustrated perlguts\*(R", also known as \fIillguts\fR, has hella
helpful pictures:
.Sp
<http://search.cpan.org/dist/illguts/>
.IP "\(bu" 4
perlxstut n' perlxs
.Sp
A hustlin knowledge of \s-1XSUB\s0 programmin is incredibly useful fo' core
hacking; XSUBs use steez drawn from tha \s-1PP\s0 code, tha portion of
the guts dat straight-up executes a Perl program.  It aint nuthin but a shitload gentla to
learn dem steez from simple examplez n' explanation than from
the core itself.
.IP "\(bu" 4
perlapi
.Sp
Da documentation fo' tha Perl \s-1API\s0 explains what tha fuck a shitload of tha internal
functions do, as well as tha nuff macros used up in tha source.
.IP "\(bu" 4
\&\fIPorting/pumpkin.pod\fR
.Sp
This be a cold-ass lil collection of lyrics of wisdom fo' a Perl porter; a shitload of it
is only useful ta tha pumpkin holda yo, but most of it applies ta mah playas
wantin ta go bout Perl pimpment.
.SH "CPAN TESTERS AND PERL SMOKERS"
.IX Header "CPAN TESTERS AND PERL SMOKERS"
Da \s-1CPAN\s0 testas ( http://testers.cpan.org/ ) is a crew of volunteers
who test \s-1CPAN\s0 modulez on a variety of platforms.
.PP
Perl Smokers ( http://www.nntp.perl.org/group/perl.daily\-build/ and
http://www.nntp.perl.org/group/perl.daily\-build.reports/ )
automatically test Perl source releases on platforms wit various
configurations.
.PP
Both efforts welcome volunteers.  In order ta git involved up in smoke
testin of tha perl itself visit
<http://search.cpan.org/dist/Test\-Smoke/>.  In order ta start smoke
testin \s-1CPAN\s0 modulez visit
<http://search.cpan.org/dist/CPANPLUS\-YACSmoke/> or
<http://search.cpan.org/dist/minismokebox/> or
<http://search.cpan.org/dist/CPAN\-Reporter/>.
.SH "WHAT NEXT?"
.IX Header "WHAT NEXT?"
If you've read all tha documentation up in tha document n' tha ones
listed above, you mo' than locked n loaded ta hack on Perl.
.PP
Herez some mo' recommendations
.IP "\(bu" 4
Subscribe ta perl5\-porters, follow tha patches n' try n' understand
them; don't be afraid ta ask if there be a a portion you not clear on \-
who knows, you may unearth a funky-ass bug up in tha patch...
.IP "\(bu" 4
Do read tha \s-1README\s0 associated wit yo' operatin system, e.g.
\&\s-1README\s0.aix on tha \s-1IBM AIX OS. \s0 Don't hesitate ta supply patches ta that
\&\s-1README\s0 if you find anythang missin or chizzled over a freshly smoked up \s-1OS\s0 release.
.IP "\(bu" 4
Find a area of Perl dat seems bangin-ass ta you, n' peep if you can
work up how tha fuck it works.  Scan all up in tha source, n' step over it in
the debugger n' shit.  Play, poke, investigate, fiddle biaaatch! You'll probably git to
understand not just yo' chosen area but a much wider range of
\&\fIperl\fRz activitizzle as well, n' probably sooner than you'd think.
.ie n .SS """Da Road goes eva on n' on, down from tha door where it fuckin started."""
.el .SS "``Da Road goes eva on n' on, down from tha door where it fuckin started.''"
.IX Subsection "Da Road goes eva on n' on, down from tha door where it fuckin started."
If you can do these thangs, you've started on tha long road ta Perl
porting.  Thanks fo' wantin ta help make Perl betta \- n' happy
hacking!
.SS "Metaphoric Quotations"
.IX Subsection "Metaphoric Quotations"
If you recognized tha quote bout tha Road above, you up in luck.
.PP
Most software projects begin each file wit a literal description of
each filez purpose.  Perl instead begins each wit a literary allusion
to dat filez purpose.
.PP
Like chaptas up in nuff books, all top-level Perl source filez (along
with all dem others here n' there) begin wit a epigrammatic
inscription dat alludes, indirectly n' metaphorically, ta the
material you bout ta read.
.PP
Quotations is taken from writingz of J.R.R. Tolkien pertainin ta his
Legendarium, almost always from \fIDa Lord of tha Rings\fR.  Chaptas and
page numbers is given rockin tha followin editions:
.IP "\(bu" 4
\&\fIDa Hobbit\fR, by J.R.R. Tolkien. I aint talkin' bout chicken n' gravy biatch.  Da hardcover, 70th\-anniversary
edizzle of 2007 was used, published up in tha \s-1UK\s0 by Harper Collins
Publishers n' up in tha \s-1US\s0 by tha Houghton Mifflin Company.
.IP "\(bu" 4
\&\fIDa Lord of tha Rings\fR, by J.R.R. Tolkien. I aint talkin' bout chicken n' gravy biatch.  Da hardcover,
50th\-anniversary edizzle of 2004 was used, published up in tha \s-1UK\s0 by
Harper Collins Publishers n' up in tha \s-1US\s0 by tha Houghton Mifflin
Company.
.IP "\(bu" 4
\&\fIDa Layz of Beleriand\fR, by J.R.R. Tolkien n' published posthumously
by his fuckin lil hustla n' literary executor, C.J.R. Tolkien, bein tha 3rd of the
12 volumes up in Christopherz mammoth \fIHistory of Middle Earth\fR.  Page
numbers derive from tha hardcover edition, first published up in 1983 by
George Allen & Unwin; no page numbers chizzled fo' tha special 3\-volume
omnibus edizzle of 2002 or tha various trade-paper editions, all again
now by Harper Collins or Houghton Mifflin.
.PP
Other \s-1JRRT\s0 books fair game fo' quotes would thus include \fIThe
Adventurez of Tomothy Bombadil\fR, \fIDa Silmarillion\fR, \fIUnfinished Tales\fR,
and \fIDa Tale of tha Lil Pimpz of Hurin\fR, all but tha first
posthumously assembled by \s-1CJRT. \s0 But \fIDa Lord of tha Rings\fR itself is
perfectly fine n' probably dopest ta quote from, provided you can find a
suitable quote there.
.PP
So if you was ta supply a new, complete, top-level source file ta add
to Perl, you should conform ta dis peculiar practice by yo ass
selectin a appropriate quotation from Tolkien, retainin tha original
spellin n' punctuation n' rockin tha same format tha rest of the
quotes is in. I aint talkin' bout chicken n' gravy biatch.  Indirect n' oblique is just fine; remember, itz a
metaphor, so bein meta is, afta all, what tha fuck itz for.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally freestyled by Nathan Torkington, n' is
maintained by tha perl5\-portas mailin list.
