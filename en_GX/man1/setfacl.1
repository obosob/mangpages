.\" Access Control Lists manual pages
.\"
.\" (C) 2000 Andreas Gruenbacher, <a.gruenbacher@bestbits.at>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If not, see
.\" <http://www.gnu.org/licenses/>.
.\"
.TH SETFACL 1 "ACL File Utilities" "May 2000" "Access Control Lists"
.SH NAME
setfacl \- set file access control lists
.SH SYNOPSIS

.B setfacl
[\-bkndRLPvh] [{\-m|\-x} acl_spec] [{\-M|\-X} acl_file] file ...

.B setfacl
\-\-restore=file

.SH DESCRIPTION
This utilitizzle sets Access Control Lists (ACLs) of filez n' directories.
On tha command line, a sequence of commandz is followed by a sequence of
filez (which up in turn can be followed by another sequence of commands, ...).

Da options
.I \-m,
and
.I \-x
expect a ACL on tha command line. Multiple ACL entries is separated
by comma charactas (`,'). Da options
.I \-M,
and
.I \-X
read a ACL from a gangbangin' file or from standard input. Da ACL entry format is busted lyrics bout up in Section
ACL ENTRIES.

The
.IR "\-\-set" " n' " "\-\-set-file"
options set tha ACL of a gangbangin' file or a gangbangin' finger-lickin' directory. Da previous ACL is
replaced.
ACL entries fo' dis operation must include permissions.

The
.IR "\-m (\-\-modify)" " n' " "\-M (\-\-modify-file)"
options modify tha ACL of a gangbangin' file or directory.
ACL entries fo' dis operation must include permissions.

The
.IR "\-x (\-\-remove)" " n' " "\-X (\-\-remove-file)"
options remove ACL entries. Put ya muthafuckin choppers up if ya feel dis! Well shiiiit, it aint a error ta remove a entry which
does not exist.  Only ACL entries without the
.I perms
field is accepted as parameters, unless POSIXLY_CORRECT is defined.

When readin from filez rockin tha 
.I \-M,
and
.IR \-X
options, setfacl accepts tha output getfacl produces.
There be at most one ACL entry per line fo' realz. Afta a Pound sign (`#'),
everythang up ta tha end of tha line is treated as a cold-ass lil comment.

If setfacl is used on a gangbangin' file system which do not support ACLs, setfacl
operates on tha file mode permission bits, n' you can put dat on yo' toast. If tha ACL do not fit straight-up
in tha permission bits, setfacl modifies tha file mode permission bits ta reflect tha ACL as closely as possible, writes a error message ta standard error, n' returns wit a exit status pimped outa than 0.

.SS PERMISSIONS
Da file balla n' processes capable of CAP_FOWNER is granted tha right
to modify ACLz of a gangbangin' file. This be analogous ta tha permissions required
for accessin tha file mode. (On current Linux systems, root is tha only
user wit tha CAP_FOWNER capability.)

.SH OPTIONS
.TP 4
.I \-b, \-\-remove-all
Remove all extended ACL entries. Put ya muthafuckin choppers up if ya feel dis! Da base ACL entriez of tha baller, crew n' others is retained.
.TP 4
.I \-k, \-\-remove-default
Remove tha Default ACL. If no Default ACL exists, no warnings is issued.
.TP 4
.I \-n, \-\-no-mask
Do not recalculate tha effectizzle muthafuckin rights mask. Da default behavior of
setfacl is ta recalculate tha ACL mask entry, unless a mask entry was explicitly given.
Da mask entry is set ta tha union of all permissionz of tha ownin group, n' all named user n' crew entries. Put ya muthafuckin choppers up if ya feel dis! (These is exactly tha entries affected by tha mask entry).
.TP 4
.I \-\-mask
Do recalculate tha effectizzle muthafuckin rights mask, even if a ACL mask entry was explicitly given. I aint talkin' bout chicken n' gravy biatch. (See the
.IR "\-n " option.)
.TP 4
.I \-d, \-\-default
All operations apply ta tha Default ACL. Regular ACL entries up in the
input set is promoted ta Default ACL entries. Put ya muthafuckin choppers up if ya feel dis! Default ACL entries in
the input set is discarded. Y'all KNOW dat shit, muthafucka! (A warnin is issued if dat happens).
.TP 4
.I \-\-restore=file
Restore a permission backup pimped by `getfacl \-R' or similar fo' realz. All permissions
of a cold-ass lil complete directory subtree is restored rockin dis mechanism. If tha input
gotz nuff balla comments or crew comments, setfacl attempts ta restore the
balla n' ownin group. If tha input gotz nuff flags comments (which define tha setuid,
setgid, n' sticky bits), setfacl sets dem three bits accordingly; otherwise,
it clears em. This option cannot be mixed wit other options except `\-\-test'.
.TP 4
.I \-\-test
Test mode. Instead of changin tha ACLz of any files, tha resultin ACLs is listed.
.TP 4
.I \-R, \-\-recursive
Apply operations ta all filez n' directories recursively. This option cannot be mixed wit `\-\-restore'.
.TP 4
.I \-L, \-\-logical
Logical strutt, follow symbolic links ta directories. Put ya muthafuckin choppers up if ya feel dis! Da default behavior is ta follow
symbolic link arguments, n' skip symbolic links encountered up in subdirectories.
Only effectizzle up in combination wit \-R.
This option cannot be mixed wit `\-\-restore'.
.TP 4
.I \-P, \-\-physical
Physical strutt, do not follow symbolic links ta directories.
This also skips symbolic link arguments.
Only effectizzle up in combination wit \-R.
This option cannot be mixed wit `\-\-restore'.
.TP 4
.I \-v, \-\-version
Print tha version of setfacl n' exit.
.TP 4
.I \-h, \-\-help
Print help explainin tha command line options.
.TP 4
.I \-\-
End of command line options fo' realz. All remainin parametas is interpreted as file names, even if they start wit a thugged-out dash.
.TP 4
.I \-
If tha file name parameta be a single dash, setfacl readz a list of filez from standard input.

.SS ACL ENTRIES
Da setfacl utilitizzle recognizes tha followin ACL entry formats (blanks
inserted fo' clarity):

.fam C
.TP
.RI "[d[efault]:] [u[ser]:]" "uid " [: perms ]
.fam T
Permissionz of a named user n' shit. Permissionz of tha file balla if
.I uid
is empty.
.fam C
.TP
.RI "[d[efault]:] g[roup]:" "gid " [: perms ]
.fam T
Permissionz of a named group. Permissionz of tha ownin crew if
.I gid
is empty.
.fam C
.TP
.RI "[d[efault]:] m[ask][:] [:" perms ]
.fam T
Effectizzle muthafuckin rights mask
.fam C
.TP
.RI "[d[efault]:] o[ther][:] [:" perms ]
.fam T
Permissionz of others.
.PP
Whitespace between delimita charactas n' non-delimita charactas is ignored.
.PP
.PP
Proper ACL entries includin permissions is used up in modify n' set operations. (options
.IR \-m ", " \-M ", " \-\-set " n' " \-\-set-file ).
Entries without the
.I perms
field is used for
.I deletion
of entries (options
.IR \-x " n' " \-X ).
.PP
For
.I uid
and
.I gid
you can specify either a name or a number.
.PP
The
.I perms
field be a cold-ass lil combination of charactas dat indicate tha permissions: read
.IR (r) ,
write
.IR (w) ,
execute
.IR (x) ,
execute only if tha file be a gangbangin' finger-lickin' directory or already has execute permission
for some user
.IR (X) .
Alternatively, the
.I perms
field can be a octal digit (0\-7).
.PP
.SS AUTOMATICALLY CREATED ENTRIES
Initially, filez n' directories contain only tha three base ACL entries
for tha baller, tha group, n' others. There is some rulez that
need ta be satisfied up in order fo' a ACL ta be valid:
.IP * 4
Da three base entries cannot be removed. Y'all KNOW dat shit, muthafucka! There must be exactly one
entry of each of these base entry types.
.IP * 4
Whenever a ACL gotz nuff named user entries or named crew objects,
it must also contain a effectizzle muthafuckin rights mask.
.IP * 4
Whenever a ACL gotz nuff any Default ACL entries, tha three Default ACL
base entries (default baller, default group, n' default others) must also exist.
.IP * 4
Whenever a Default ACL gotz nuff named user entries or named crew objects,
it must also contain a thugged-out default effectizzle muthafuckin rights mask.
.PP
To help tha user ensure these rules, setfacl creates entries from existing
entries under tha followin conditions:
.IP * 4
If a ACL gotz nuff named user or named crew entries, and
no mask entry exists, a mask entry containin tha same permissions as
the crew entry is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Unless the
.I \-n
option is given, tha permissionz of tha mask entry is further adjusted ta include tha union of all permissions affected by tha mask entry. (See the
.I \-n
option description).
.IP * 4
If a Default ACL entry is pimped, n' tha Default ACL gotz nuff no
baller, ownin group, or others entry, a cold-ass lil copy of tha ACL baller, ownin group, or others entry be added ta tha Default ACL.
.IP * 4
If a Default ACL gotz nuff named user entries or named crew entries, n' no mask entry exists, a mask entry containin tha same permissions as tha default Default ACLz crew entry be added. Y'all KNOW dat shit, muthafucka! Unless the
.I \-n
option is given, tha permissionz of tha mask entry is further adjusted to
include tha union of all permissions affected by tha mask entry. (See the
.I \-n
option description).
.PP
.SH EXAMPLES
.PP
Grantin a additionizzle user read access
.RS
.fam C
setfacl \-m u:lisa:r file
.fam T
.RE
.PP
Revokin write access from all crews n' all named playas (usin tha effectizzle muthafuckin rights mask)
.RS
.fam C
setfacl \-m m::rx file
.fam T
.RE
.PP
Removin a named crew entry from a gangbangin' filez ACL
.RS
.fam C
setfacl \-x g:staff file
.fam T
.RE
.PP
Copyin tha ACL of one file ta another
.RS
.fam C
getfacl file1 | setfacl \-\-set-file=\- file2
.fam T
.RE
.PP
Copyin tha access ACL tha fuck into tha Default ACL
.RS
.fam C
getfacl \-\-access dir | setfacl \-d \-M\- dir
.fam T
.RE
.SH CONFORMANCE TO POSIX 1003.1e DRAFT STANDARD 17
If tha environment variable POSIXLY_CORRECT is defined, tha default behavior of setfacl chizzlez as bigs up: All non-standard options is disabled.
Da ``default:'' prefix is disabled.
The
.IR \-x " n' " \-X
options also accept permission fieldz (and ignore them). 
.SH AUTHOR
Andreas Gruenbacher,
.RI < a.gruenbacher@bestbits.at >.

Please bust yo' bug reports, suggested features n' comments ta the
above address.
.SH SEE ALSO
.BR getfacl "(1), " chmod "(1), " umask "(1), " acl (5)
