.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ASN1PARSE 1"
.TH ASN1PARSE 1 "2013-02-11" "1.0.1e" "OpenSSL"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
asn1parse \- ASN.1 parsin tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBopenssl\fR \fBasn1parse\fR
[\fB\-inform PEM|DER\fR]
[\fB\-in filename\fR]
[\fB\-out filename\fR]
[\fB\-noout\fR]
[\fB\-offset number\fR]
[\fB\-length number\fR]
[\fB\-i\fR]
[\fB\-oid filename\fR]
[\fB\-strparse offset\fR]
[\fB\-genstr string\fR]
[\fB\-genconf file\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Da \fBasn1parse\fR command be a gangbangin' finger-lickin' diagnostic utilitizzle dat can parse \s-1ASN.1\s0
structures. Well shiiiit, it can also be used ta extract data from \s-1ASN.1\s0 formatted data.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-inform\fR \fBDER|PEM\fR" 4
.IX Item "-inform DER|PEM"
the input format. \fB\s-1DER\s0\fR is binary format n' \fB\s-1PEM\s0\fR (the default) is base64
encoded.
.IP "\fB\-in filename\fR" 4
.IX Item "-in filename"
the input file, default is standard input
.IP "\fB\-out filename\fR" 4
.IX Item "-out filename"
output file ta place tha \s-1DER\s0 encoded data into. If this
option aint present then no data is ghon be output. This is most useful when
combined wit tha \fB\-strparse\fR option.
.IP "\fB\-noout\fR" 4
.IX Item "-noout"
don't output tha parsed version of tha input file.
.IP "\fB\-offset number\fR" 4
.IX Item "-offset number"
startin offset ta begin parsing, default is start of file.
.IP "\fB\-length number\fR" 4
.IX Item "-length number"
number of bytes ta parse, default is until end of file.
.IP "\fB\-i\fR" 4
.IX Item "-i"
indents tha output accordin ta tha \*(L"depth\*(R" of tha structures.
.IP "\fB\-oid filename\fR" 4
.IX Item "-oid filename"
a file containin additionizzle \s-1OBJECT\s0 IDENTIFIERs (OIDs). Da format of this
file is busted lyrics bout up in tha \s-1NOTES\s0 section below.
.IP "\fB\-strparse offset\fR" 4
.IX Item "-strparse offset"
parse tha contents octetz of tha \s-1ASN.1\s0 object startin at \fBoffset\fR. This
option can be used multiple times ta \*(L"drill down\*(R" tha fuck into a nested structure.
.IP "\fB\-genstr string\fR, \fB\-genconf file\fR" 4
.IX Item "-genstr string, -genconf file"
generate encoded data based on \fBstring\fR, \fBfile\fR or both using
\&\fIASN1_generate_nconf\fR\|(3) format. If \fBfile\fR only is
present then tha strang is obtained from tha default section rockin tha name
\&\fBasn1\fR. Da encoded data is passed all up in tha \s-1ASN1\s0 parser n' printed up as
though it came from a gangbangin' file, tha contents can thus be examined n' freestyled ta a
file rockin tha \fBout\fR option.
.SS "\s-1OUTPUT\s0"
.IX Subsection "OUTPUT"
Da output will typically contain lines like this:
.PP
.Vb 1
\&  0:d=0  hl=4 l= 681 cons: SEQUENCE
.Ve
.PP
\&.....
.PP
.Vb 10
\&  229:d=3  hl=3 l= 141 prim: BIT STRING        
\&  373:d=2  hl=3 l= 162 cons: cont [ 3 ]        
\&  376:d=3  hl=3 l= 159 cons: SEQUENCE          
\&  379:d=4  hl=2 l=  29 cons: SEQUENCE          
\&  381:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key Identifier
\&  386:d=5  hl=2 l=  22 prim: OCTET STRING      
\&  410:d=4  hl=2 l= 112 cons: SEQUENCE          
\&  412:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Authoritizzle Key Identifier
\&  417:d=5  hl=2 l= 105 prim: OCTET STRING      
\&  524:d=4  hl=2 l=  12 cons: SEQUENCE
.Ve
.PP
\&.....
.PP
This example is part of a self signed certificate. Each line starts wit the
offset up in decimal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. \fBd=XX\fR specifies tha current depth. Da depth is increased
within tha scope of any \s-1SET\s0 or \s-1SEQUENCE. \s0\fBhl=XX\fR gives tha header length
(tag n' length octets) of tha current type. \fBl=XX\fR gives tha length of
the contents octets.
.PP
Da \fB\-i\fR option can be used ta make tha output mo' readable.
.PP
Some knowledge of tha \s-1ASN.1\s0 structure is needed ta interpret tha output.
.PP
In dis example tha \s-1BIT STRING\s0 at offset 229 is tha certificate hood key.
Da contents octetz of dis will contain tha hood key shiznit. I aint talkin' bout chicken n' gravy biatch. This can
be examined rockin tha option \fB\-strparse 229\fR ta yield:
.PP
.Vb 3
\&    0:d=0  hl=3 l= 137 cons: SEQUENCE          
\&    3:d=1  hl=3 l= 129 prim: INTEGER           :E5D21E1F5C8D208EA7A2166C7FAF9F6BDF2059669C60876DDB70840F1A5AAFA59699FE471F379F1DD6A487E7D5409AB6A88D4A9746E24B91D8CF55DB3521015460C8EDE44EE8A4189F7A7BE77D6CD3A9AF2696F486855CF58BF0EDF2B4068058C7A947F52548DDF7E15E96B385F86422BEA9064A3EE9E1158A56E4A6F47E5897
\&  135:d=1  hl=2 l=   3 prim: INTEGER           :010001
.Ve
.SH "NOTES"
.IX Header "NOTES"
If a \s-1OID\s0 aint part of OpenSSLz internal table it is ghon be represented in
numerical form (for example 1.2.3.4). Da file passed ta tha \fB\-oid\fR option 
allows additionizzle OIDs ta be included. Y'all KNOW dat shit, muthafucka! Each line consistz of three columns,
the first column is tha \s-1OID\s0 up in numerical format n' should be followed by white
space. Da second column is tha \*(L"short name\*(R" which be a single word followed
by white space. Da final column is tha rest of tha line n' is the
\&\*(L"long name\*(R". \fBasn1parse\fR displays tha long name. Example:
.PP
\&\f(CW\*(C`1.2.3.4	shortName	A long name\*(C'\fR
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Parse a gangbangin' file:
.PP
.Vb 1
\& openssl asn1parse \-in file.pem
.Ve
.PP
Parse a \s-1DER\s0 file:
.PP
.Vb 1
\& openssl asn1parse \-inform DER \-in file.der
.Ve
.PP
Generate a simple UTF8String:
.PP
.Vb 1
\& openssl asn1parse \-genstr \*(AqUTF8:Wuz crackalackin' World\*(Aq
.Ve
.PP
Generate n' write up a UTF8String, don't print parsed output:
.PP
.Vb 1
\& openssl asn1parse \-genstr \*(AqUTF8:Wuz crackalackin' World\*(Aq \-noout \-out utf8.der
.Ve
.PP
Generate rockin a cold-ass lil config file:
.PP
.Vb 1
\& openssl asn1parse \-genconf asn1.cnf \-noout \-out asn1.der
.Ve
.PP
Example config file:
.PP
.Vb 1
\& asn1=SEQUENCE:seq_sect
\&
\& [seq_sect]
\&
\& field1=BOOL:TRUE
\& field2=EXP:0, UTF8:some random string
.Ve
.SH "BUGS"
.IX Header "BUGS"
There should be options ta chizzle tha format of output lines. Da output of some
\&\s-1ASN.1\s0 types aint well handled (if at all).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIASN1_generate_nconf\fR\|(3)
