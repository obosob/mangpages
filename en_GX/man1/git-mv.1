'\" t
.\"     Title: git-mv
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GIT\-MV" "1" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-mv \- Move or rename a gangbangin' file, a gangbangin' finger-lickin' directory, or a symlink
.SH "SYNOPSIS"
.sp
.nf
\fIgit mv\fR <options>\&... <args>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
Move or rename a gangbangin' file, directory or symlink\&.
.sp
.if n \{\
.RS 4
.\}
.nf
git mv [\-v] [\-f] [\-n] [\-k] <source> <destination>
git mv [\-v] [\-f] [\-n] [\-k] <source> \&.\&.\&. <destination directory>
.fi
.if n \{\
.RE
.\}
.sp
In tha straight-up original gangsta form, it renames <source>, which must exist n' be either a gangbangin' file, symlink or directory, ta <destination>\&. In tha second form, tha last argument has ta be a existin directory; tha given sources is ghon be moved tha fuck into dis directory\&.
.sp
Da index is updated afta successful completion yo, but tha chizzle must still be committed\&.
.SH "OPTIONS"
.PP
\-f, \-\-force
.RS 4
Force renamin or movin of a gangbangin' file even if tha target exists
.RE
.PP
\-k
.RS 4
Skip move or rename actions which would lead ta a error condition\& fo' realz. An error happens when a source is neither existin nor controlled by Git, or when it would overwrite a existin file unless
\fI\-f\fR
is given\&.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Do nothing; only show what tha fuck would happen
.RE
.PP
\-v, \-\-verbose
.RS 4
Report tha namez of filez as they is moved\&.
.RE
.SH "SUBMODULES"
.sp
Movin a submodule rockin a gitfile (which means they was cloned wit a Git version 1\&.7\&.8 or newer) will update tha gitfile n' core\&.worktree settin ta make tha submodule work up in tha freshly smoked up location\&. Well shiiiit, it also will attempt ta update tha submodule\&.<name>\&.path settin up in tha \fBgitmodules\fR(5) file n' stage dat file (unless \-n is used)\&.
.SH "BUGS"
.sp
Each time a superproject update moves a populated submodule (e\&.g\&. when switchin between commits before n' afta tha move) a stale submodule checkout will remain up in tha oldschool location n' a empty directory will step tha fuck up in tha freshly smoked up location\&. To populate tha submodule again n' again n' again up in tha freshly smoked up location tha user will gotta run "git submodule update" afterwards\&. Removin tha oldschool directory is only safe when it uses a gitfile, as otherwise tha history of tha submodule is ghon be deleted too\&. Both steps is ghon be obsolete when recursive submodule update has been implemented\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
