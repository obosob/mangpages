.TH CTAGS 1 "Version 5.8" "Darren Hiebert" "Exuberant Ctags"


.SH "NAME"
ctags \- Generate tag filez fo' source code


.SH SYNOPSIS
.TP 6
\fBctags\fP [\fBoptions\fP] [\fIfile(s)\fP]
.TP 6
\fBetags\fP [\fBoptions\fP] [\fIfile(s)\fP]


.SH "DESCRIPTION"
Da \fBctags\fP n' \fBetags\fP programs (hereinafta collectively referred to
as \fBctags\fP, except where distinguished) generate a index (or "tag") file
for a variety of language objects found up in \fIfile(s)\fP.
This tag file allows these shit ta be quickly n' easily located by a text
editor or other utilitizzle fo' realz. A "tag" signifies a language object fo' which an
index entry be available (or, alternatively, tha index entry pimped fo' that
object).

Alternatively, \fBctags\fP can generate a cold-ass lil cross reference file which lists, in
human readable form, shiznit bout tha various source objects found up in a
set of language files.

Tag index filez is supported by a shitload of editors, which allow tha user to
locate tha object associated wit a name appearin up in a source file n' jump
to tha file n' line which defines tha name. Those known bout all up in tha time of
this release are:

.RS 4
\fBVi\fP(1) n' its derivatives (e.g. Elvis, Vim, Vile, Lemmy),
\fBCRiSP\fP,
\fBEmacs\fP,
\fBFTE\fP (Foldin Text Editor),
\fBJED\fP,
\fBjEdit\fP,
\fBMined\fP,
\fBNEdit\fP (Nirvana Edit),
\fBTSE\fP (Da SemWare Editor),
\fBUltraEdit\fP,
\fBWorkSpace\fP,
\fBX2\fP,
\fBZeus\fP
.RE

\fBCtags\fP is capable of generatin different kindz of tags fo' each of many
different languages. For a cold-ass lil complete list of supported languages, tha names
by which they is recognized, n' tha kindz of tags which is generated for
each, peep tha \fB\-\-list\-languages\fP n' \fB\-\-list\-kinds\fP options.


.SH "SOURCE FILES"

Unless tha \fB\-\-language\-force\fP option is specified, tha language of each
source file be automatically selected based upon a mappin of file names to
languages. Da mappings up in effect fo' each language may be display rockin the
\fB\-\-list\-maps\fP option n' may be chizzled rockin tha \fB\-\-langmap\fP option.
On platforms which support it, if tha name of a gangbangin' file aint mapped
to a language n' tha file is executable, tha straight-up original gangsta line of tha file is
checked ta peep if tha file be a "#!" script fo' a recognized language.

By default, all other filez names is ignored. Y'all KNOW dat shit, muthafucka! This permits hustlin
\fBctags\fP on all filez up in either a single directory (e.g. "ctags *"), or on
all filez up in a entire source directory tree (e.g. "ctags \-R"), since only
those filez whose names is mapped ta languages is ghon be scanned.

[Da reason dat .h extensions is mapped ta C++ filez rather than C files
is cuz it is common ta use .h extensions up in C++, n' no harm thangs up in dis biatch in
treatin dem as C++ files.]


.SH "OPTIONS"

Despite tha wealth of available options, defaults is set so dat \fBctags\fP
is most commonly executed without any options (e.g. "ctags *", or "ctags \-R"),
which will create a tag file up in tha current directory fo' all recognized
source files. Da options busted lyrics bout below is provided merely ta allow custom
tailorin ta hook up special needs.

Note dat spaces separatin tha single-letta options from they parameters
are optional.

Note also dat tha boolean parametas ta tha long form options (those
beginnin wit "\-\-" n' dat take a "\fI[=yes\fP|\fIno]\fP" parameter) may
be omitted, up in which case "\fB=\fP\fIyes\fP" is implied. Y'all KNOW dat shit, muthafucka! (e.g. \fB\-\-sort\fP
is equivalent ta \fB\-\-sort\fP=\fIyes\fP). Note further dat "=\fI1\fP" and
"=\fIon\fP" is considered synonyms fo' "=\fIyes\fP", n' dat "=\fI0\fP"
and "=\fIoff\fP" is considered synonyms fo' "=\fIno\fP".

Some options is either ignored or useful only when used while hustlin in
etags mode (see \fB\-e\fP option). Right back up in yo muthafuckin ass. Such options is ghon be noted.

Most options may step tha fuck up anywhere on tha command line, affectin only them
filez which follow tha option. I aint talkin' bout chicken n' gravy biatch fo' realz. A few options, however, must step tha fuck up before the
first file name n' is ghon be noted as such.

Options takin language names will accept dem names up in either upper or lower
case. Right back up in yo muthafuckin ass. See tha \fB\-\-list\-languages\fP option fo' a cold-ass lil complete list of the
built-in language names.

.TP 5
.B \-a
Equivalent ta \fB\-\-append\fP.

.TP 5
.B \-B
Use backward searchin patterns (e.g. ?pattern?). [Ignored up in etags mode]

.TP 5
.B \-e
Enable etags mode, which will create a tag file fo' use wit tha Emacs editor.
Alternatively, if \fBctags\fP is invoked by a name containin tha string
"etags" (either by renaming, or bustin a link to, tha executable), etags
mode is ghon be enabled. Y'all KNOW dat shit, muthafucka! This option must step tha fuck up before tha straight-up original gangsta file name.

.TP 5
.BI \-f " tagfile"
Use tha name specified by \fItagfile\fP fo' tha tag file (default is "tags",
or "TAGS" when hustlin up in etags mode). If \fItagfile\fP is specified as
"\-", then tha tag file is freestyled ta standard output instead. Y'all KNOW dat shit, muthafucka! \fBCtags\fP
will stubbornly refuse ta take ordaz if \fItagfile\fP exists n' its first
line gotz nuff suttin' other than a valid tags line. This will save yo' neck
if you mistakenly type "ctags \-f *.c", which would otherwise overwrite your
first C file wit tha tags generated by tha rest son! It will also refuse to
accept a multi-characta file name which begins wit a '\-' (dash) character,
since dis most likely means dat you left up tha tag file name n' this
option tried ta grab tha next option as tha file name. If you straight-up want to
name yo' output tag file "\-ugly", specify it as "./\-ugly". This option must
appear before tha straight-up original gangsta file name. If dis option is specified mo' than once,
only tha last will apply.

.TP 5
.B \-F
Use forward searchin patterns (e.g. /pattern/) (default).
[Ignored up in etags mode]

.TP 5
.BI \-h  " list"
Specifies a list of file extensions, separated by periods, which is ta be
interpreted as include (or header) files. To indicate filez havin no
extension, bust a period not followed by a non-period characta (e.g. ".",
"..x", ".x."). This option only affects how tha fuck tha scopin of a particular kinds
of tags is interpreted (i.e. whether or not they is considered as globally
visible or visible only within tha file up in which they is defined); it do
not map tha extension ta any particular language fo' realz. Any tag which is located in
a non-include file n' cannot be peeped (e.g. linked to) from another file is
considered ta have file-limited (e.g. static) scope. No kind of tag appearing
in a include file is ghon be considered ta have file-limited scope. If tha first
characta up in tha list be a plus sign, then tha extensions up in tha list will be
appended ta tha current list; otherwise, tha list will replace tha current
list. Right back up in yo muthafuckin ass. See, also, tha \fB\-\-file\-scope\fP option. I aint talkin' bout chicken n' gravy biatch. Da default list is
".h.H.hh.hpp.hxx.h++.inc.def". To restore tha default list, specify \fB\-h\fP
\fIdefault\fP. Note dat if a extension supplied ta dis option is not
already mapped ta a particular language (see \fBSOURCE FILES\fP, above), you
will also need ta use either tha \fB\-\-langmap\fP or \fB\-\-language\-force\fP
option.

.TP 5
.BI \-I " identifier\-list"
Specifies a list of identifiers which is ta be specially handled while
parsin C n' C++ source files. This option is specifically provided ta handle
special cases arisin all up in tha use of preprocessor macros. When the
identifiers listed is simple identifiers, these identifiers is ghon be ignored
durin parsin of tha source files. If a identifier is suffixed wit a '+'
character, \fBctags\fP will also ignore any parenthesis-enclosed argument list
which may immediately follow tha identifier up in tha source files. If two
identifiers is separated wit tha '=' character, tha straight-up original gangsta identifiers is
replaced by tha second identifiers fo' parsin purposes. Da list of
identifiers may be supplied directly on tha command line or read up in from a
separate file. If tha straight-up original gangsta characta of \fIidentifier\-list\fP is '@', '.' or
a pathname separator ('/' or '\\'), or tha straight-up original gangsta two charactas specify a
drive letta (e.g. "C:"), tha parameta \fIidentifier\-list\fP will be
interpreted as a gangbangin' filename from which ta read a list of identifiers, one per
input line. Otherwise, \fIidentifier\-list\fP be a list of identifiers (or
identifier pairs) ta be specially handled, each delimited by a either a cold-ass lil comma
or by white space (in which case tha list should be quoted ta keep tha entire
list as one command line argument). Multiple \fB\-I\fP options may be supplied.
To clear tha list of ignore identifiers, supply a single dash ("\-") for
\fIidentifier\-list\fP.

This feature is useful when preprocessor macros is used up in such a way that
they cause syntactic mad drama cuz of they presence. Git tha fuck outta mah grill wit dat bullshit, dis is tha best
way of hustlin round a fuckin shitload of problems caused by tha presence of
syntax-bustin macros up in source filez (see \fBCAVEATS\fP, below). Right back up in yo muthafuckin ass. Some
examplez will illustrate dis point.

.RS 8
int foo ARGDECL4(void *, ptr, long int, nbytes)
.RE

.IP
In tha above example, tha macro "ARGDECL4" would be mistakenly interpreted to
be tha name of tha function instead of tha erect name of "foo". Right back up in yo muthafuckin ass. Specifying
\fB\-I\fP \fIARGDECL4\fP thangs up in dis biatch up in tha erect behavior.

.RS 8
/* creates a RCS version strang up in module */
.br
MODULE_VERSION("$Revision: 690 $")
.RE

.IP
In tha above example tha macro invocation looks too much like a gangbangin' function
definizzle cuz it aint followed by a semicolon (indeed, it could even be
followed by a global variable definizzle dat would look much like a K&R style
function parameta declaration). In fact, dis seemin function definition
could possibly even cause tha rest of tha file ta be skipped over while trying
to complete tha definition. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Specifyin \fB\-I\fP \fIMODULE_VERSION+\fP would
avoid such a problem.

.RS 8
CLASS Example {
.br
    // yo' content here
.br
};
.RE

.IP
Da example above uses "CLASS" as a preprocessor macro which expandz to
suttin' different fo' each platform. For instizzle CLASS may be defined as
"class __declspec(dllexport)" on Win32 platforms n' simply "class" on UNIX.
Normally, tha absence of tha C++ keyword "class" would cause tha source file
to be incorrectly parsed. Y'all KNOW dat shit, muthafucka! Correct behavior can be restored by specifying
\fB\-I\fP \fICLASS=class\fP.

.TP 5
.BI \-L " file"
Read from \fIfile\fP a list of file names fo' which tags should be generated.
If \fIfile\fP is specified as "\-", then file names is read from standard
input. File names read rockin dis option is processed followin file names
appearin on tha command line. Options is also accepted up in dis input. If
this option is specified mo' than once, only tha last will apply. \fBNote:\fP
\fIfile\fP is read up in line-oriented mode, where a freshly smoked up line is tha only
delimita n' non-trailin white space is considered significant, up in order
that file names containin spaces may be supplied (however, trailin white
space is stripped from lines); dis can affect how tha fuck options is parsed if
included up in tha input.

.TP 5
.B \-n
Equivalent ta \fB\-\-excmd\fP=\fInumber\fP.

.TP 5
.B \-N
Equivalent ta \fB\-\-excmd\fP=\fIpattern\fP.

.TP 5
.BI \-o " tagfile"
Equivalent ta \fB\-f\fP \fItagfile\fP.

.TP 5
.B \-R
Equivalent ta \fB\-\-recurse\fP.

.TP 5
.B \-u
Equivalent ta \fB\-\-sort\fP=\fIno\fP (i.e. "unsorted").

.TP 5
.B \-V
Equivalent ta \fB\-\-verbose\fP.

.TP 5
.B \-w
This option is silently ignored fo' backward-compatibilitizzle wit tha ctags
of SVR4 Unix.

.TP 5
.B \-x
Print a tabular, human-readable cross reference (xref) file ta standard output
instead of generatin a tag file. Da shiznit contained up in tha output
includes: tha tag name; tha kind of tag; tha line number, file name, and
source line (with extra white space condensed) of tha file which defines the
tag. No tag file is freestyled n' all options affectin tag file output will be
ignored. Y'all KNOW dat shit, muthafucka! Example applications fo' dis feature is generatin a listin of all
functions located up in a source file (e.g. \fBctags \-x \-\-c\-kinds\fP=\fIf\fP
\fIfile\fP), or generatin a list of all externally visible global variables
located up in a source file (e.g. \fBctags \-x \-\-c\-kinds\fP=\fIv\fP
\fB\-\-file\-scope\fP=\fIno file\fP). This option must step tha fuck up before tha first
file name.

.TP 5
\fB\-\-append\fP[=\fIyes\fP|\fIno\fP]
Indicates whether tags generated from tha specified filez should be appended
to dem already present up in tha tag file or should replace em. This option
is off by default. This option must step tha fuck up before tha straight-up original gangsta file name.

.TP 5
\fB\-\-etags\-include\fP=\fIfile\fP
Include a reference ta \fIfile\fP up in tha tag file. This option may be
specified as nuff times as desired. Y'all KNOW dat shit, muthafucka! This supports Emacs' capabilitizzle ta use a
tag file which "includes" other tag files. [Available only up in etags mode]

.TP 5
\fB\-\-exclude\fP=[\fIpattern\fP]
Add \fIpattern\fP ta a list of excluded filez n' directories. Put ya muthafuckin choppers up if ya feel dis! This option
may be specified as nuff times as desired. Y'all KNOW dat shit, muthafucka! For each file name considered by
\fBctags\fP, each \fIpattern\fP specified rockin dis option is ghon be compared
against both tha complete path (e.g. some/path/base.ext) n' tha base name
(e.g. base.ext) of tha file, thus allowin patterns which match a given file
name irrespectizzle of its path, or match only a specific path. If appropriate
support be available from tha runtime library of yo' C compiler, then
\fIpattern\fP may contain tha usual shell wildcardz (not regular expressions)
common on Unix (be shizzle ta quote tha option parameta ta protect tha wildcards
from bein expanded by tha shell before bein passed ta \fBctags\fP; also be
aware dat wildcardz can match tha slash character, '/'). Yo ass can determine if
shell wildcardz is available on yo' platform by examinin tha output of the
\fB\-\-version\fP option, which will include "+wildcards" up in tha compiled
feature list; otherwise, \fIpattern\fP is matched against file names rockin a
simple textual comparison.

If \fIpattern\fP begins wit tha characta '@', then tha rest of tha string
is interpreted as a gangbangin' file name from which ta read exclusion patterns, one per
line. If \fIpattern\fP is empty, tha list of excluded patterns is cleared.
Note dat at program startup, tha default exclude list gotz nuff "EIFGEN",
"SCCS", "RCS", n' "CVS", which is namez of directories fo' which it is
generally not desirable ta descend while processin tha \fB\-\-recurse\fP
option.

.TP 5
\fB\-\-excmd\fP=\fItype\fP
Determines tha type of EX command used ta locate tags up in tha source file.
[Ignored up in etags mode]

Da valid joints fo' \fItype\fP (either tha entire word or tha straight-up original gangsta letta is
accepted) are:

.RS 5
.TP 9
.I number
Use only line numbers up in tha tag file fo' locatin tags. This has four
advantages:
.PD 0
.RS 9
.TP 4
1.
Significantly reduces tha size of tha resultin tag file.
.TP 4
2.
Eliminates failures ta find tags cuz tha line definin tha tag has
changed, causin tha pattern match ta fail (note dat some editors, such as
\fBvim\fP, is able ta recover up in nuff such instances).
.TP 4
3.
Eliminates findin identical matchin yo, but incorrect, source lines (see
\fBBUGS\fP, below).
.TP 4
4.
Retains separate entries up in tha tag file fo' lines which is identical in
content. In \fIpattern\fP mode, duplicate entries is dropped cuz the
search patterns they generate is identical, makin tha duplicate entries
useless.
.RE
.PD 1

.IP
But fuck dat shiznit yo, tha word on tha street is dat dis option has one dope drawback: chizzlez ta tha source files
can cause tha line numbers recorded up in tha tag file ta no longer correspond
to tha lines up in tha source file, causin jumps ta some tags ta miss tha target
definizzle by one or mo' lines. Basically, dis option is dopest used when the
source code ta which it be applied aint subject ta chizzle. Right back up in yo muthafuckin ass. Selectin this
option type causes tha followin options ta be ignored: \fB\-BF\fP.

.TP 9
.I pattern
Use only search patterns fo' all tags, rather than tha line numbers usually
used fo' macro definitions. This has tha advantage of not referencin obsolete
line numbers when lines done been added or removed since tha tag file was
generated.

.TP 9
.I mixed
In dis mode, patterns is generally used wit all dem exceptions. For C, line
numbers is used fo' macro definizzle tags. This was tha default format
generated by tha original gangsta \fBctags\fP n' is, therefore, retained as the
default fo' dis option. I aint talkin' bout chicken n' gravy biatch. For Fortran, line numbers is used fo' common blocks
because they correspondin source lines is generally identical, making
pattern searches useless fo' findin all matches.
.RE

.TP 5
\fB\-\-extra\fP=\fI[+|\-]flags\fP
Specifies whether ta include extra tag entries fo' certain kindz of
information. I aint talkin' bout chicken n' gravy biatch. Da parameta \fIflags\fP be a set of one-letta flags, each
representin one kind of extra tag entry ta include up in tha tag file. If
\fIflags\fP is preceded by by either tha '+' or '\-' character, tha effect of
each flag be added to, or removed from, dem currently enabled; otherwise the
flags replace any current settings. Da meanin of each flag be as bigs up:

.PP
.RS 8
.TP 4
.I f
Include a entry fo' tha base file name of every last muthafuckin source file (e.g.
"example.c"), which addresses tha straight-up original gangsta line of tha file.
.TP 4
.I q
Include a extra class-qualified tag entry fo' each tag which be a member
of a cold-ass lil class (for languages fo' which dis shiznit is extracted; currently
C++, Eiffel, n' Java). Da actual form of tha qualified tag dependz upon the
language from which tha tag was derived (usin a gangbangin' form dat is most natural for
how qualified calls is specified up in tha language). For C++, it is up in tha form
"class::member"; fo' Eiffel n' Java, it is up in tha form "class.member". This
may allow easier location of a specific tags when multiple occurrencez of a
tag name occur up in tha tag file. Note, however, dat dis could potentially
more than double tha size of tha tag file.
.RE

.TP 5
\fB\-\-fields\fP=\fI[+|\-]flags\fP
Specifies tha available extension fieldz which is ta be included up in the
entriez of tha tag file (see \fBTAG FILE FORMAT\fP, below, fo' more
information). Da parameta \fIflags\fP be a set of one-letta flags, each
representin one type of extension field ta include, wit tha following
meanings (disabled by default unless indicated):

.PP
.PD 0
.RS 8
.TP 4
.I a
Access (or export) of class members
.TP 4
.I f
File-restricted scopin [enabled]
.TP 4
.I i
Inheritizzle shiznit
.TP 4
.I k
Kind of tag as a single letta [enabled]
.TP 4
.I K
Kind of tag as full name
.TP 4
.I l
Language of source file containin tag
.TP 4
.I m
Implementation shiznit
.TP 4
.I n
Line number of tag definition
.TP 4
.I s
Scope of tag definizzle [enabled]
.TP 4
.I S
Signature of routine (e.g. prototype or parameta list)
.TP 4
.I z
Include tha "kind:" key up in kind field
.TP 4
.I t
Type n' name of a variable or typedef as "typeref:" field [enabled]
.PD 1
.RE

.RS 5
Each letta or crew of lettas may be preceded by either '+' ta add it ta the
default set, or '\-' ta exclude dat shit. In tha absence of any precedin '+' or '\-'
sign, only dem kindz explicitly listed up in \fIflags\fP is ghon be included in
the output (i.e. overridin tha default set). This option is ignored if the
option \fB\-\-format\fP=\fI1\fP has been specified. Y'all KNOW dat shit, muthafucka! Da default value 
of dis option is \fIfkst\fP.
.RE

.TP 5
\fB\-\-file\-scope\fP[=\fIyes\fP|\fIno\fP]
Indicates whether tags scoped only fo' a single file (i.e. tags which cannot
be peeped outside of tha file up in which they is defined, like fuckin "static" tags)
should be included up in tha output. Right back up in yo muthafuckin ass. See, also, tha \fB\-h\fP option. I aint talkin' bout chicken n' gravy biatch. This option
is enabled by default.

.TP 5
\fB\-\-filter\fP[=\fIyes\fP|\fIno\fP]
Causes \fBctags\fP ta behave as a gangbangin' filter, readin source file names from
standard input n' printin they tags ta standard output on a gangbangin' file-by-file
basis. If \fB\-\-sorted\fP is enabled, tags is sorted only within tha source
file up in which they is defined. Y'all KNOW dat shit, muthafucka! File names is read from standard input in
line-oriented input mode (see note fo' \fB\-L\fP option) n' only afta file
names listed on tha command line or from any file supplied rockin tha \fB\-L\fP
option. I aint talkin' bout chicken n' gravy biatch. When dis option is enabled, tha options \fB\-f\fP, \fB\-o\fP,
and \fB\-\-totals\fP is ignored. Y'all KNOW dat shit, muthafucka! This option is like esoteric n' is disabled
by default. This option must step tha fuck up before tha straight-up original gangsta file name.

.TP 5
\fB\-\-filter\-terminator\fP=\fIstring\fP
Specifies a strang ta print ta standard output followin tha tags fo' each
file name parsed when tha \fB\-\-filter\fP option is enabled. Y'all KNOW dat shit, muthafucka! This may permit an
application readin tha output of ctags ta determine when tha output fo' each
file is finished. Y'all KNOW dat shit, muthafucka! Note dat if tha file name read be a gangbangin' finger-lickin' directory and
\fB\-\-recurse\fP is enabled, dis strang is ghon be printed only one once at the
end of all tags found fo' by descendin tha directory. This strang will always
be separated from tha last tag line fo' tha file by its terminatin newline.
This option is like esoteric n' is empty by default. This option must appear
before tha straight-up original gangsta file name.

.TP 5
\fB\-\-format\fP=\fIlevel\fP
Change tha format of tha output tag file. Currently tha only valid joints for
\fIlevel\fP is \fI1\fP or \fI2\fP. Level 1 specifies tha original gangsta tag file
format n' level 2 specifies a freshly smoked up extended format containin extension fields
(but up in a manner which retains backward-compatibilitizzle wit original
\fBvi\fP(1) implementations). Da default level is 2. This option must appear
before tha straight-up original gangsta file name. [Ignored up in etags mode]

.TP 5
.B \-\-help
Prints ta standard output a thugged-out detailed usage description, n' then exits.

.TP 5
\fB\-\-if0\fP[=\fIyes\fP|\fIno\fP]
Indicates a preference as ta whether code within a "#if 0" branch of a
preprocessor conditionizzle should be examined fo' non-macro tags (macro tags are
always included). Because tha intent of dis construct is ta disable code, the
default value of dis option is \fIno\fP. Note dat dis indicates a
preference only n' do not guarantee skippin code within a "#if 0" branch,
since tha fall-back algorithm used ta generate tags when preprocessor
conditionals is too complex bigs up all branchez of a cold-ass lil conditional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This
option is disabled by default.

.TP 5
\fB\-\-<LANG>\-kinds\fP=\fI[+|\-]kinds\fP
Specifies a list of language-specific kindz of tags (or kinds) ta include in
the output file fo' a particular language, where \fB<LANG>\fP is
case-insensitizzle n' is one of tha built-in language names (see the
\fB\-\-list\-languages\fP option fo' a cold-ass lil complete list). Da parameta \fIkinds\fP
is a crew of one-letta flags designatin kindz of tags (particular ta the
language) ta either include or exclude from tha output. Da specific sets of
flags recognized fo' each language, they meanings n' defaults may be list
usin tha \fB\-\-list\-kinds\fP option. I aint talkin' bout chicken n' gravy biatch. Each letta or crew of lettas may be
preceded by either '+' ta add it to, or '\-' ta remove it from, tha default
set. In tha absence of any precedin '+' or '\-' sign, only dem kinds
explicitly listed up in \fIkinds\fP is ghon be included up in tha output (i.e.
overridin tha default fo' tha specified language).

As a example fo' tha C language, up in order ta add prototypes n' external
variable declarations ta tha default set of tag kindz yo, but exclude macros,
use \fB\-\-c\-kinds\fP=\fI+px\-d\fP; ta include only tags fo' functions, use
\fB\-\-c\-kinds\fP=\fIf\fP.

.TP 5
\fB\-\-langdef\fP=\fIname\fP
Defines a freshly smoked up user-defined language, \fIname\fP, ta be parsed wit regular
expressions. Once defined, \fIname\fP may be used up in other options taking
language names. Da typical use of dis option is ta first define the
language, then map file names ta it rockin \fI\-\-langmap\fP, then specify
regular expressions rockin \fI\-\-regex\-<LANG>\fP ta define how tha fuck its tags are
found.

.TP 5
\fB\-\-langmap\fP=\fImap[,map[...]]\fP
Controls how tha fuck file names is mapped ta languages (see tha \fB\-\-list\-maps\fP
option). Each comma-separated \fImap\fP consistz of tha language name (either
a built-in or user-defined language), a cold-ass lil colon, n' a list of file extensions
and/or file name patterns fo' realz. A file extension is specified by precedin the
extension wit a period (e.g. ".c") fo' realz. A file name pattern is specified by
enclosin tha pattern up in parentheses (e.g. "([Mm]akefile)"). If appropriate
support be available from tha runtime library of yo' C compiler, then the
file name pattern may contain tha usual shell wildcardz common on Unix (be
sure ta quote tha option parameta ta protect tha wildcardz from being
expanded by tha shell before bein passed ta \fBctags\fP). Yo ass can determine
if shell wildcardz is available on yo' platform by examinin tha output of
the \fB\-\-version\fP option, which will include "+wildcards" up in tha compiled
feature list; otherwise, tha file name patterns is matched against file names
usin a simple textual comparison. I aint talkin' bout chicken n' gravy biatch. When mappin a gangbangin' file extension, it will
first be unmapped from any other languages.

If tha straight-up original gangsta characta up in a map be a plus sign, then tha extensions n' file
name patterns up in dat map is ghon be appended ta tha current map fo' that
language; otherwise, tha map will replace tha current map. For example, to
specify dat only filez wit extensionz of .c n' .x is ta be treated as C
language files, use "\fB\-\-langmap\fP=\fIc:.c.x\fP"; ta also add filez with
extensionz of .j as Java language files, specify
"\fB\-\-langmap\fP=\fIc:.c.x,java:+.j\fP". To map makefilez (e.g. files
named either "Makefile", "makefile", or havin tha extension ".mak") ta a
language called "make", specify "\fB\-\-langmap\fP=\fImake:([Mm]akefile).mak\fP".
To map filez havin no extension, specify a period not followed by a
non-period characta (e.g. ".", "..x", ".x."). To clear tha mappin fo' a
particular language (thus inhibitin automatic generation of tags fo' that
language), specify a empty extension list (e.g.
"\fB\-\-langmap\fP=\fIfortran:\fP"). To restore tha default language mappings
for all a particular language, supply tha keyword "default" fo' tha mapping.
To specify restore tha default language mappings fo' all languages, specify
"\fB\-\-langmap\fP=\fIdefault\fP". Note dat file extensions is tested before
file name patterns when inferrin tha language of a gangbangin' file.

.TP 5
\fB\-\-language\-force\fP=\fIlanguage\fP
By default, \fBctags\fP automatically selects tha language of a source file,
ignorin dem filez whose language cannot be determined (see
\fBSOURCE FILES\fP, above). This option forces tha specified \fIlanguage\fP
(case-insensitive; either built-in or user-defined) ta be used fo' every
supplied file instead of automatically selectin tha language based upon its
extension. I aint talkin' bout chicken n' gravy biatch. In addition, tha special value \fIauto\fP indicates dat the
language should be automatically selected (which effectively disablez this
option).

.TP 5
\fB\-\-languages\fP=\fI[+|\-]list\fP
Specifies tha languages fo' which tag generation is enabled, wit \fIlist\fP
containin a cold-ass lil comma-separated list of language names (case-insensitive; either
built-in or user-defined). If tha straight-up original gangsta language of \fIlist\fP aint preceded
by either a '+' or '\-', tha current list is ghon be cleared before addin or
removin tha languages up in \fIlist\fP. Until a '\-' is encountered, each
language up in tha list is ghon be added ta tha current list fo' realz. As either tha '+' or
\&'\-' is encountered up in tha list, tha languages followin it is added or
removed from tha current list, respectively. Thus, it becomes simple to
replace tha current list wit a freshly smoked up one, or ta add or remove languages from
the current list. Da actual list of filez fo' which tags is ghon be generated
dependz upon tha language extension mappin up in effect (see tha \fB\-\-langmap\fP
option). Note dat all languages, includin user-defined languages is enabled
unless explicitly disabled rockin dis option. I aint talkin' bout chicken n' gravy biatch. Language names included in
\fIlist\fP may be any built-in language or one previously defined with
\fB\-\-langdef\fP. Da default is "all", which be also accepted as a valid
argument. Right back up in yo muthafuckin ass. See tha \fB\-\-list\-languages\fP option fo' a cold-ass lil complete list of the
built-in language names.

.TP 5
\fB\-\-license\fP
Prints a summary of tha software license ta standard output, n' then exits.

.TP 5
\fB\-\-line\-directives\fP[=\fIyes\fP|\fIno\fP]
Specifies whether "#line" directives should be recognized. Y'all KNOW dat shit, muthafucka! These is present
in tha output of preprocessors n' contain tha line number, n' possibly the
file name, of tha original gangsta source file(s) from which tha preprocessor output
file was generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. When enabled, dis option will cause \fBctags\fP to
generate tag entries marked wit tha file names n' line numberz of their
locations original gangsta source file(s), instead of they actual locations up in the
preprocessor output. Da actual file names placed tha fuck into tha tag file will have
the same leadin path components as tha preprocessor output file, since it is
assumed dat tha original gangsta source filez is located relatizzle ta the
preprocessor output file (unless, of course, tha #line directizzle specifies an
absolute path). This option is off by default. \fBNote:\fP This option is
generally only useful when used together wit tha \fB\-\-excmd\fP=\fInumber\fP
(\fB\-n\fP) option. I aint talkin' bout chicken n' gravy biatch fo' realz. Also, you may gotta use either tha \fB\-\-langmap\fP or
\fB\-\-language\-force\fP option if tha extension of tha preprocessor output file
is not known ta \fBctags\fP.

.TP 5
\fB\-\-links\fP[=\fIyes\fP|\fIno\fP]
Indicates whether symbolic links (if supported) should be followed. Y'all KNOW dat shit, muthafucka! When
disabled, symbolic links is ignored. Y'all KNOW dat shit, muthafucka! This option is on by default.

.TP 5
\fB\-\-list\-kinds\fP[=\fIlanguage\fP|\fIall\fP]
Lists tha tag kindz recognized fo' either tha specified language or all
languages, n' then exits, n' you can put dat on yo' toast. Each kind of tag recorded up in tha tag file is
represented by a one-letta flag, which be also used ta filta tha tags placed
into tha output all up in use of tha \fB\-\-<LANG>\-kinds\fP option. I aint talkin' bout chicken n' gravy biatch. Note dat some
languages and/or tag kindz may be implemented rockin regular expressions and
may not be available if regex support aint compiled tha fuck into \fBctags\fP (see
the \fB\-\-regex\-<LANG>\fP option). Each kind listed is enabled unless followed
by "[off]".

.TP 5
\fB\-\-list\-maps\fP[=\fIlanguage\fP|\fIall\fP]
Lists tha file extensions n' file name patterns which associate a gangbangin' file name
with a language fo' either tha specified language or all languages, n' then
exits, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See tha \fB\-\-langmap\fP option, n' \fBSOURCE FILES\fP, above.

.TP 5
\fB\-\-list\-languages\fP
Lists tha namez of tha languages understood by \fBctags\fP, n' then exits.
These language names is case insensitizzle n' may be used up in the
\fB\-\-language\-force\fP, \fB\-\-languages\fP, \fB\-\-<LANG>\-kinds\fP, and
\fB\-\-regex\-<LANG>\fP options.

.TP 5
\fB\-\-options\fP=\fIfile\fP
Read additionizzle options from \fIfile\fP. Da file should contain one option
per line fo' realz. As a special case, if
\fB\-\-options\fP=\fINONE\fP is specified as tha straight-up original gangsta option on tha command
line, it will disable tha automatic readin of any configuration options from
either a gangbangin' file or tha environment (see \fBFILES\fP).

.TP 5
\fB\-\-recurse\fP[=\fIyes\fP|\fIno\fP]
Recurse tha fuck into directories encountered up in tha list of supplied files. If the
list of supplied filez is empty n' no file list is specified wit the
\fB\-L\fP option, then tha current directory (i.e. ".") be assumed. Y'all KNOW dat shit, muthafucka! Symbolic
links is followed. Y'all KNOW dat shit, muthafucka! If you don't like these behaviors, either explicitly
specify tha filez or pipe tha output of \fBfind\fP(1) tha fuck into \fBctags \-L\-\fP
instead. Y'all KNOW dat shit, muthafucka! \fBNote:\fP This option aint supported on all platforms at present.
It be available if tha output of tha \fB\-\-help\fP option includes dis option.
See, also, tha \fB\-\-exclude\fP ta limit recursion.

.TP 5
\fB\-\-regex\-<LANG>\fP=\fI/regexp/replacement/[kind\-spec/][flags]\fP
Da \fI/regexp/replacement/\fP pair define a regular expression replacement
pattern, similar up in steez ta \fBsed\fP substitution commands, wit which to
generate tags from source filez mapped ta tha named language, \fB<LANG>\fP,
(case-insensitive; either a funky-ass built-in or user-defined language). Da regular
expression, \fIregexp\fP, defines a extended regular expression (roughly that
used by \fBegrep\fP(1)), which is used ta locate a single source line
containin a tag n' may specify tab charactas rockin \\t. When a matching
line is found, a tag is ghon be generated fo' tha name defined by
\fIreplacement\fP, which generally will contain tha special back-references
\\1 all up in \\9 ta refer ta matchin sub-expression crews within
\fIregexp\fP. Da '/' separator charactas shown up in tha parameta ta the
option can straight-up be replaced by any character n' shit. Note dat whichever
separator characta is used will gotta be escaped wit a funky-ass backslash ('\\')
characta wherever it is used up in tha parameta as suttin' other than a
separator. Shiiit, dis aint no joke. Da regular expression defined by dis option be added ta the
current list of regular expressions fo' tha specified language unless the
parameta is omitted, up in which case tha current list is cleared.

Unless modified by \fIflags\fP, \fIregexp\fP is interpreted as a Posix
extended regular expression. I aint talkin' bout chicken n' gravy biatch. Da \fIreplacement\fP should expand fo' all
matchin lines ta a non-empty strang of characters, or a warnin message will
be reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. An optionizzle kind specifier fo' tags matchin \fIregexp\fP may
follow \fIreplacement\fP, which will determine what tha fuck kind of tag is reported in
the "kind" extension field (see \fBTAG FILE FORMAT\fP, below). Da full form
of \fIkind\-spec\fP is up in tha form of a single letter, a cold-ass lil comma, a name (without
spaces), a cold-ass lil comma, a thugged-out description, followed by a separator, which specify
the short n' long formz of tha kind value n' its textual description
(displayed rockin \fB\-\-list\-kinds\fP). Either tha kind name and/or the
description may be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If \fIkind\-spec\fP is omitted, it defaults to
"\fIr,regex\fP". Finally, \fIflags\fP is one or mo' single-letta characters
havin tha followin effect upon tha interpretation of \fIregexp\fP:

.PP
.RS 8
.TP 4
.I b
Da pattern is interpreted as a Posix basic regular expression.
.TP 4
.I e
Da pattern is interpreted as a Posix extended regular expression (default).
.TP 4
.I i
Da regular expression is ta be applied up in a cold-ass lil case-insensitizzle manner.
.RE

.RS 5
Note dat dis option be available only if \fBctags\fP was compiled with
support fo' regular expressions, which dependz upon yo' platform. Yo ass can
determine if support fo' regular expressions is compiled up in by examinin the
output of tha \fB\-\-version\fP option, which will include "+regex" up in the
compiled feature list.

For mo' shiznit on tha regular expressions used by \fBctags\fP, see
either tha \fBregex(5,7)\fP playa page, or tha GNU info documentation fo' regex
(e.g. "info regex").
.RE

.TP 5
\fB\-\-sort\fP[=\fIyes\fP|\fIno\fP|\fIfoldcase\fP]
Indicates whether tha tag file should be sorted on tha tag name (default is
\fIyes\fP). Note dat tha original gangsta \fBvi\fP(1) required sorted tags. 
Da \fIfoldcase\fP value specifies case insensitizzle (or case-folded) sorting.
Fast binary searchez of tag filez sorted wit case-foldin will require
special support from tools rockin tag files, like fuckin dat found up in tha ctags
readtags library, or Vim version 6.2 or higher (usin "set ignorecase"). This
option must step tha fuck up before tha straight-up original gangsta file name. [Ignored up in etags mode]

.TP 5
\fB\-\-tag\-relative\fP[=\fIyes\fP|\fIno\fP]
Indicates dat tha file paths recorded up in tha tag file should be relatizzle to
the directory containin tha tag file, rather than relatizzle ta tha current
directory, unless tha filez supplied on tha command line is specified with
absolute paths. This option must step tha fuck up before tha straight-up original gangsta file name. The
default is \fIyes\fP when hustlin up in etags mode (see tha \fB\-e\fP
option), \fIno\fP otherwise.

.TP 5
\fB\-\-totals\fP[=\fIyes\fP|\fIno\fP]
Prints statistics bout tha source filez read n' tha tag file freestyled during
the current invocation of \fBctags\fP. This option is off by default.
This option must step tha fuck up before tha straight-up original gangsta file name.

.TP 5
\fB\-\-verbose\fP[=\fIyes\fP|\fIno\fP]
Enable verbose mode. This prints up shiznit on option processin n' a
brief message describin what tha fuck action is bein taken fo' each file considered
by \fBctags\fP. Normally, \fBctags\fP do not read command line arguments
until afta options is read from tha configuration filez (see \fBFILES\fP,
below) n' tha \fBCTAGS\fP environment variable. But fuck dat shiznit yo, tha word on tha street is dat if dis option is
the first argument on tha command line, it will take effect before any options
are read from these sources. Da default is \fIno\fP.

.TP 5
\fB\-\-version\fP
Prints a version identifier fo' \fBctags\fP ta standard output, n' then
exits, n' you can put dat on yo' toast. This is guaranteed ta always contain tha strang "Exuberant Ctags".


.SH "OPERATIONAL DETAILS"

As \fBctags\fP considaz each file name up in turn, it tries ta determine the
language of tha file by applyin tha followin three tests up in order: if the
file extension has been mapped ta a language, if tha file name matches a gangbangin' finger-lickin' dirty-ass shell
pattern mapped ta a language, n' finally if tha file is executable n' its
first line specifies a interpreta rockin tha Unix-style "#!" justification
(if supported on tha platform). If a language was identified, tha file is
opened n' then tha appropriate language parser is called ta operate on the
currently open file. Da parser parses all up in tha file n' addz a entry to
the tag file fo' each language object it is freestyled ta handle. Right back up in yo muthafuckin ass. See
\fBTAG FILE FORMAT\fP, below, fo' details on these entries.

This implementation of \fBctags\fP imposes no formattin requirements on C
code as do legacy implementations. Older implementationz of ctags tended to
rely upon certain formattin assumptions up in order ta help it resolve coding
dilemmas caused by preprocessor conditionals.

In general, \fBctags\fP tries ta be smart-ass bout conditionizzle preprocessor
directives. If a preprocessor conditionizzle is encountered within a statement
which defines a tag, \fBctags\fP bigs up only tha straight-up original gangsta branch of that
conditionizzle (except up in tha special case of "#if 0", up in which case it bigs up
only tha last branch). Da reason fo' dis is dat failin ta pursue only one
branch can result up in ambiguous syntax, as up in tha followin example:

.RS
#ifdef TWO_ALTERNATIVES
.br
struct {
.br
#else
.br
union {
.br
#endif
.RS 4
short a;
.br
long b;
.RE
}
.RE

Both branches cannot be followed, or braces become unbalanced n' \fBctags\fP
would be unable ta make sense of tha syntax.

If tha application of dis heuristic fails ta properly parse a gangbangin' file,
generally cuz of fucked up n' inconsistent pairin within tha conditionals,
\fBctags\fP will retry tha file rockin a gangbangin' finger-lickin' different heuristic which do not
selectively follow conditionizzle preprocessor branches yo, but instead falls back
to relyin upon a cold-ass lil closin brace ("}") up in column 1 as indicatin tha end of a
block once any brace imbalizzle thangs up in dis biatch from followin a #if conditionizzle branch.

\fBCtags\fP will also try ta specially handle arguments lists enclosed in
double setz of parentheses up in order ta accept tha followin conditional
construct:

.RS
extern void foo __ARGS((int one, char two));
.RE

Any name immediately precedin tha "((" is ghon be automatically ignored and
the previous name is ghon be used.

C++ operator definitions is specially handled. Y'all KNOW dat shit, muthafucka! In order fo' consistency with
all typez of operators (overloaded n' conversion), tha operator name up in the
tag file will always be preceded by tha strang "operator " (i.e. even if the
actual operator definizzle was freestyled as "operator<<").

Afta bustin or appendin ta tha tag file, it is sorted by tha tag name,
removin identical tag lines.


.SH "TAG FILE FORMAT"

When not hustlin up in etags mode, each entry up in tha tag file consistz of a
separate line, each lookin like dis up in da most thugged-out general case:

.RS 1
tag_name<TAB>file_name<TAB>ex_cmd;"<TAB>extension_fields
.RE

Da fieldz n' separatorz of these lines is specified as bigs up:

.PD 0
.RS 4
.TP 4
1.
tag name
.TP 4
2.
single tab character
.TP 4
3.
name of tha file up in which tha object associated wit tha tag is located
.TP 4
4.
single tab character
.TP 4
5.
EX command used ta locate tha tag within tha file; generally a search pattern
(either /pattern/ or ?pattern?) or line number (see \fB\-\-excmd\fP). Tag file
format 2 (see \fB\-\-format\fP) extendz dis EX command under certain
circumstances ta include a set of extension fieldz (busted lyrics bout below) embedded
in a EX comment immediately appended ta tha EX command, which leaves it
backward-compatible wit original gangsta \fBvi\fP(1) implementations.
.RE
.PD 1

A few special tags is freestyled tha fuck into tha tag file fo' internal purposes. These
tags is composed up in such a way dat they always sort ta tha top of tha file.
Therefore, tha straight-up original gangsta two charactaz of these tags is used a magic number to
detect a tag file fo' purposez of determinin whether a valid tag file is
bein overwritten rather than a source file.

Note dat tha name of each source file is ghon be recorded up in tha tag file
exactly as it appears on tha command line. Therefore, if tha path you
specified on tha command line was relatizzle ta tha current directory, then it
will be recorded up in dat same manner up in tha tag file. Right back up in yo muthafuckin ass. See, however, the
\fB\-\-tag\-relative\fP option fo' how tha fuck dis behavior can be modified.

Extension fieldz is tab-separated key-value pairs appended ta tha end of the
EX command as a cold-ass lil comment, as busted lyrics bout above. These key value pairs step tha fuck up in
the general form "\fIkey\fP:\fIvalue\fP". Their presence up in tha linez of the
tag file is controlled by tha \fB\-\-fields\fP option. I aint talkin' bout chicken n' gravy biatch. Da possible keys and
the meanin of they joints is as bigs up:

.TP 12
.I access
Indicates tha visibilitizzle of dis class member, where \fIvalue\fP is specific
to tha language.

.TP 12
.I file
Indicates dat tha tag has file-limited visibility. This key has no
correspondin value.

.TP 12
.I kind
Indicates tha type, or kind, of tag. Its value is either one of the
correspondin one-letta flags busted lyrics bout under tha various
\fB\-\-<LANG>\-kinds\fP options above, or a gangbangin' full name. Well shiiiit, it is permitted (and is,
in fact, tha default) fo' tha key portion of dis field ta be omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. The
optionizzle behaviors is controlled wit tha \fB\-\-fields\fP option.

.TP 12
.I implementation
When present, dis indicates a limited implementation (abstract vs. concrete)
of a routine or class, where \fIvalue\fP is specific ta tha language
("virtual" or "pure virtual" fo' C++; "abstract" fo' Java).

.TP 12
.I inherits
When present, \fIvalue\fP. be a cold-ass lil comma-separated list of classes from which
this class is derived (i.e. inherits from).

.TP 12
.I signature
When present, \fIvalue\fP be a language-dependent representation of the
signature of a routine fo' realz. A routine signature up in its complete form specifies the
return type of a routine n' its formal argument list. This extension field is
presently supported only fo' C-based languages n' do not include tha return
type.

.PP
In addition, shiznit on tha scope of tha tag definizzle may be available,
with tha key portion equal ta some language-dependent construct name n' its
value tha name declared fo' dat construct up in tha program. This scope entry
indicates tha scope up in which tha tag was found. Y'all KNOW dat shit, muthafucka! For example, a tag generated
for a C structure member would gotz a scope lookin like "struct:myStruct".


.SH "HOW TO USE WITH VI"
Vi will, by default, expect a tag file by tha name "tags" up in tha current
directory. Once tha tag file is built, tha followin commandz exercise tha tag
indexin feature:
.TP 12
.B vi \-t tag
Start vi n' posizzle tha cursor all up in tha file n' line where "tag" is defined.
.TP 12
.B :ta tag
Find a tag.
.TP 12
.B Ctrl-]
Find tha tag under tha cursor.
.TP 12
.B Ctrl-T
Return ta previous location before jump ta tag (not widely implemented).


.SH "HOW TO USE WITH GNU EMACS"
Emacs will, by default, expect a tag file by tha name "TAGS" up in tha current
directory. Once tha tag file is built, tha followin commandz exercise the
tag indexin feature:
.TP 10
.B "M-x visit\-tags\-table <RET> FILE <RET>"
Select tha tag file, "FILE", ta use.
.TP 10
.B "M-. [TAG] <RET>"
Find tha straight-up original gangsta definizzle of TAG. Da default tag is tha identifier under the
cursor.
.TP 10
.B "M-*"
Pop back ta where you previously invoked "M-.".
.TP 10
.B "C-u M-."
Find tha next definizzle fo' tha last tag.

.PP
For mo' commands, peep tha \fITags\fP topic up in tha Emacs info document.


.SH "HOW TO USE WITH NEDIT"
NEdit version 5.1 n' lata can handle tha freshly smoked up extended tag file format (see
\fB\-\-format\fP). To make NEdit use tha tag file, select "File\->Load Tags
File". To jump ta tha definizzle fo' a tag, highlight tha word, tha press
Ctrl-D. NEdit 5.1 can can read multiple tag filez from different directories.
Settin tha X resource nedit.tagFile ta tha name of a tag file instructs NEdit
to automatically load dat tag file at startup time.


.SH "CAVEATS"
Because \fBctags\fP is neither a preprocessor nor a cold-ass lil compiler, use of
preprocessor macros can fool \fBctags\fP tha fuck into either missin tags or
improperly generatin inappropriate tags fo' realz. Although \fBctags\fP has been
designed ta handle certain common cases, dis is tha single freshest cause of
reported problems. In particular, tha use of preprocessor constructs which
alta tha textual syntax of C can fool \fBctags\fP. Yo ass can work round many
such problems by rockin tha \fB\-I\fP option.

Note dat since \fBctags\fP generates patterns fo' locatin tags (see
the \fB\-\-excmd\fP option), it is entirely possible dat tha wack line may be
found by yo' editor if there exists another source line which is identical to
the line containin tha tag. Da followin example demonstrates dis condition:

.RS
int variable;

/* ... */
.br
void foo(variable)
.br
int variable;
.br
{
.RS 4
/* ... */
.RE
}
.RE

Dependin upon which editor you use n' where up in tha code you happen ta be, it
is possible dat tha search pattern may locate tha local parameta declaration
in foo() before it findz tha actual global variable definition, since the
lines (and therefore they search patterns is identical). This can be avoided
by use of tha \fB\-\-excmd\fP=\fIn\fP option.


.SH "BUGS"
\fBCtags\fP has mo' options than \fBls\fP(1).

When parsin a C++ member function definizzle (e.g. "className::function"),
\fBctags\fP cannot determine whether tha scope specifier be a cold-ass lil class name or a
namespace specifier n' always lists it as a cold-ass lil class name up in tha scope portion
of tha extension fieldz fo' realz. Also, if a C++ function is defined outside of the
class declaration (the usual case), tha access justification (i.e. public,
protected, or private) n' implementation shiznit (e.g. virtual, pure
virtual) contained up in tha function declaration is not known when tha tag is
generated fo' tha function definition. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it will, however be available for
prototypes (e.g \fB\-\-c++\-kinds\fP=\fI+p\fP).

No qualified tags is generated fo' language objects inherited tha fuck into a cold-ass lil class.


.SH "ENVIRONMENT VARIABLES"

.TP 8
.B CTAGS
If dis environment variable exists, it is ghon be sposed ta fuckin contain a set of
default options which is read when \fBctags\fP starts, afta the
configuration filez listed up in \fBFILES\fP, below, is read yo, but before any
command line options is read. Y'all KNOW dat shit, muthafucka! Options appearin on tha command line will
override options specified up in dis variable. Only options is ghon be read from
this variable. Note dat all white space up in dis variable is considered a
separator, makin it impossible ta pass a option parameta containin an
embedded space. If dis be a problem, bust a cold-ass lil configuration file instead.

.TP 8
.B ETAGS
Similar ta tha \fBCTAGS\fP variable above, dis variable, if found, will be
read when \fBetags\fP starts, n' you can put dat on yo' toast. If dis variable aint found, \fBetags\fP will
try ta use \fBCTAGS\fP instead.

.TP 8
.B TMPDIR
On Unix-like hosts where mkstemp() be available, tha value of dis variable
specifies tha directory up in which ta place temporary files. This can be useful
if tha size of a temporary file becomes too big-ass ta fit on tha partition
holdin tha default temporary directory defined at compilation time.
\fBctags\fP creates temporary filez only if either (1) a emacs-style tag file
is bein generated, (2) tha tag file is bein busted ta standard output, or (3)
the program was compiled ta use a internal sort algorithm ta sort tha tag
filez instead of tha the sort utilitizzle of tha operatin system. If tha sort
utilitizzle of tha operatin system is bein used, it will generally observe this
variable also. Note dat if \fBctags\fP is setuid, tha value of TMPDIR will be
ignored.


.SH "FILES"
.PD 0
.I /ctags.cnf (on MSDOS, MSWindows only)
.br
.I /etc/ctags.conf
.br
.I /usr/local/etc/ctags.conf
.br
.I $HOME/.ctags
.br
.I $HOME/ctags.cnf (on MSDOS, MSWindows only)
.br
.I .ctags
.br
.I ctags.cnf (on MSDOS, MSWindows only)
.IP
If any of these configuration filez exist, each is ghon be sposed ta fuckin contain a
set of default options which is read up in tha order listed when \fBctags\fP
starts yo, but before tha \fBCTAGS\fP environment variable is read or any command
line options is read. Y'all KNOW dat shit, muthafucka! This make it possible ta set up crib-wide, personal
or project-level defaults, n' you can put dat on yo' toast. Well shiiiit, it is possible ta compile \fBctags\fP ta read an
additionizzle configuration file before any of dem shown above, which will be
indicated if tha output produced by tha \fB\-\-version\fP option lists the
"custom-conf" feature. Options appearin up in tha \fBCTAGS\fP environment
variable or on tha command line will override options specified up in these
files. Only options is ghon be read from these files. Note dat tha option files
are read up in line-oriented mode up in which spaces is dope (since
shell quotin aint possible). Each line of tha file is read as one command
line parameta (as if it was quoted wit single quotes). Therefore, use new
lines ta indicate separate command-line arguments.
.PD 1

.TP
.I tags
Da default tag file pimped by \fBctags\fP.
.TP
.I TAGS
Da default tag file pimped by \fBetags\fP.

.SH "SEE ALSO"
Da straight-up legit Exuberant Ctags wizzy joint at:

.RS
http://ctags.sourceforge.net
.RE

Also \fBex\fP(1), \fBvi\fP(1), \fBelvis\fP, or, betta yet, \fBvim\fP, the
straight-up legit editor of \fBctags\fP. For mo' shiznit on \fBvim\fP, peep tha VIM
Pages wizzy joint at:

.RS
http://www.vim.org/
.RE


.SH "AUTHOR"
Darren Hiebert <dhiebert at users.sourceforge.net>
.br
http://DarrenHiebert.com/


.SH "MOTIVATION"
"Think ye at all timez of renderin some steez ta every last muthafuckin gangmember of tha human
race."

"All effort n' exertion put forth by playa from tha fullnizz of his thugged-out ass is
worship, if it is prompted by tha highest motives n' tha will ta do service
to humanity."

.RS
\-\- From tha Baha'i Writings
.RE


.SH "CREDITS"
This version of \fBctags\fP was originally derived from n' inspired by the
ctags program by Steve Kirkendall <kirkenda@cs.pdx.edu> dat comes wit the
Lizzy vi clone (though virtually none of tha original gangsta code remains).

Credit be also due Bram Moolenaar <Bram@vim.org>, tha lyricist of \fBvim\fP, who
has devoted so much of his cold-ass time n' juice both ta pimpin tha editor as a
service ta others, n' ta helpin tha orphanz of Uganda.

Da section entitled "HOW TO USE WITH GNU EMACS" was shamelessly jacked from
the info page fo' GNU \fBetags\fP.
