.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL58DELTA 1"
.TH PERL58DELTA 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl58delta \- what tha fuck is freshly smoked up fo' perl v5.8.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.6.0 release and
the 5.8.0 release.
.PP
Many of tha bug fixes up in 5.8.0 was already peeped up in tha 5.6.1
maintenizzle release since tha two releases was kept closely
coordinated (while 5.8.0 was still called 5.7.something).
.PP
Changes dat was integrated tha fuck into tha 5.6.1 release is marked \f(CW\*(C`[561]\*(C'\fR.
Many of these chizzlez done been further pimped since 5.6.1 was busted out,
those is marked \f(CW\*(C`[561+]\*(C'\fR.
.PP
Yo ass can peep tha list of chizzlez up in tha 5.6.1 release (both from the
5.005_03 release n' tha 5.6.0 release) by readin perl561delta.
.SH "Highlights In 5.8.0"
.IX Header "Highlights In 5.8.0"
.IP "\(bu" 4
Betta Unicode support
.IP "\(bu" 4
New \s-1IO\s0 Implementation
.IP "\(bu" 4
New Thread Implementation
.IP "\(bu" 4
Betta Numeric Accuracy
.IP "\(bu" 4
Safe Signals
.IP "\(bu" 4
Many New Modules
.IP "\(bu" 4
Mo' Extensive Regression Testing
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
.SS "Binary Incompatibility"
.IX Subsection "Binary Incompatibility"
\&\fBPerl 5.8 aint binary compatible wit earlier releasez of Perl.\fR
.PP
\&\fBYo ass gotta recompile yo' \s-1XS\s0 modules.\fR
.PP
(Pure Perl modulez should continue ta work.)
.PP
Da major reason fo' tha discontinuitizzle is tha freshly smoked up \s-1IO\s0 architecture
called PerlIO.  PerlIO is tha default configuration cuz without
it nuff freshly smoked up featurez of Perl 5.8 cannot be used. Y'all KNOW dat shit, muthafucka!  In other lyrics:
you just gotta recompile yo' modulez containin \s-1XS\s0 code, sorry
about dis shit.
.PP
In future releasez of Perl, non-PerlIO aware \s-1XS\s0 modulez may become
completely unsupported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This shouldn't be too hard as fuck fo' module
authors, however: PerlIO has been designed as a thugged-out drop-in replacement
(at tha source code level) fo' tha stdio intercourse.
.PP
Dependin on yo' platform, there be also other reasons why
we decided ta break binary compatibility, please read on.
.SS "64\-bit platforms n' malloc"
.IX Subsection "64-bit platforms n' malloc"
If yo' pointas is 64 bits wide, tha Perl malloc is no longer being
used cuz it do not work well wit 8\-byte pointers.  Also,
usually tha system mallocs on such platforms is much betta optimized
for such big-ass memory models than tha Perl malloc.  Some memory-hungry
Perl applications like tha \s-1PDL\s0 don't work well wit Perlz malloc.
Finally, other applications than Perl (like fuckin mod_perl) tend ta prefer
the system malloc.  Such platforms include Alpha n' 64\-bit \s-1HPPA,
MIPS, PPC,\s0 n' Sparc.
.SS "\s-1AIX\s0 Dynaloading"
.IX Subsection "AIX Dynaloading"
Da \s-1AIX\s0 dynaloadin now uses up in \s-1AIX\s0 releases 4.3 n' newer tha native
dlopen intercourse of \s-1AIX\s0 instead of tha oldschool emulated intercourse.  This
change will probably break backward compatibilitizzle wit compiled
modules.  Da chizzle was made ta make Perl mo' compliant wit other
applications like mod_perl which is rockin tha \s-1AIX\s0 natizzle intercourse.
.ie n .SS "Attributes fo' ""my"" variablez now handled at run-time"
.el .SS "Attributes fo' \f(CWmy\fP variablez now handled at run-time"
.IX Subsection "Attributes fo' mah variablez now handled at run-time"
Da \f(CW\*(C`my EXPR : ATTRS\*(C'\fR syntax now applies variable attributes at
run-time.  (Subroutine n' \f(CW\*(C`our\*(C'\fR variablez still git attributes applied
at compile-time.)  See attributes fo' additionizzle details.  In particular,
however, dis allows variable attributes ta be useful fo' \f(CW\*(C`tie\*(C'\fR intercourses,
which was a thugged-out deficiency of earlier releases.  Note dat tha freshly smoked up semantics
doesn't work wit tha Attribute::Handlezs module (az of version 0.76).
.SS "Socket Extension Dynamic up in \s-1VMS\s0"
.IX Subsection "Socket Extension Dynamic up in VMS"
Da Socket extension is now dynamically loaded instead of being
statically built in. I aint talkin' bout chicken n' gravy biatch.  This may or may not be a problem wit ancient
\&\s-1TCP/IP\s0 stackz of \s-1VMS:\s0 our phat asses do not know since we weren't able ta test
Perl up in such configurations.
.SS "IEEE-format Floatin Point Default on OpenVMS Alpha"
.IX Subsection "IEEE-format Floatin Point Default on OpenVMS Alpha"
Perl now uses \s-1IEEE\s0 format (T_FLOAT) as tha default internal floating
point format on OpenVMS Alpha, potentially breakin binary compatibility
with external libraries or existin data.  G_FLOAT is still available as
a configuration option. I aint talkin' bout chicken n' gravy biatch.  Da default on \s-1VAX \s0(D_FLOAT) has not chizzled.
.ie n .SS "New Unicode Semantics (no mo' ""use utf8"", almost)"
.el .SS "New Unicode Semantics (no mo' \f(CWuse utf8\fP, almost)"
.IX Subsection "New Unicode Semantics (no mo' use utf8, almost)"
Previously up in Perl 5.6 ta use Unicode one would say \*(L"use utf8\*(R" and
then tha operations (like strang concatenation) was Unicode-aware
in dat lexical scope.
.PP
This was found ta be a inconvenient intercourse, n' up in Perl 5.8 the
Unicode model has straight-up chizzled: now tha \*(L"Unicodeness\*(R" is bound
to tha data itself, n' fo' most of tha time \*(L"use utf8\*(R" aint needed
at all.  Da only remainin use of \*(L"use utf8\*(R" is when tha Perl script
itself has been freestyled up in tha \s-1UTF\-8\s0 encodin of Unicode.  (\s-1UTF\-8\s0 has
not been made tha default since there be nuff Perl scripts up there
that is rockin various nationistic eight-bit characta sets, which would
be illegal up in \s-1UTF\-8.\s0)
.PP
See perluniintro fo' tha explanation of tha current model,
and utf8 fo' tha current use of tha utf8 pragma.
.SS "New Unicode Properties"
.IX Subsection "New Unicode Properties"
Unicode \fIscripts\fR is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Right back up in yo muthafuckin ass. Scripts is similar ta (and superior
to) Unicode \fIblocks\fR. Da difference between scripts n' blocks is that
scripts is tha glyphs used by a language or a crew of languages, while
the blocks is mo' artificial groupingz of (mostly) 256 charactas based
on tha Unicode numbering.
.PP
In general, scripts is mo' inclusive yo, but not universally so. For
example, while tha script \f(CW\*(C`Latin\*(C'\fR includes all tha Latin charactas and
their various diacritic-adorned versions, it do not include tha various
punctuation or digits (since they is not solely \f(CW\*(C`Latin\*(C'\fR).
.PP
A number of other propertizzles is now supported, includin \f(CW\*(C`\ep{L&}\*(C'\fR,
\&\f(CW\*(C`\ep{Any}\*(C'\fR \f(CW\*(C`\ep{Assigned}\*(C'\fR, \f(CW\*(C`\ep{Unassigned}\*(C'\fR, \f(CW\*(C`\ep{Blank}\*(C'\fR [561] and
\&\f(CW\*(C`\ep{SpacePerl}\*(C'\fR [561] (along wit they \f(CW\*(C`\eP{...}\*(C'\fR versions, of course).
See perlunicode fo' details, n' mo' additions.
.PP
Da \f(CW\*(C`In\*(C'\fR or \f(CW\*(C`Is\*(C'\fR prefix ta names used wit tha \f(CW\*(C`\ep{...}\*(C'\fR n' \f(CW\*(C`\eP{...}\*(C'\fR
are now almost always optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da only exception is dat a \f(CW\*(C`In\*(C'\fR prefix
is required ta signify a Unicode block when a funky-ass block name conflicts wit a
script name. For example, \f(CW\*(C`\ep{Tibetan}\*(C'\fR refers ta tha script, while
\&\f(CW\*(C`\ep{InTibetan}\*(C'\fR refers ta tha block. When there is no name conflict, you
can omit tha \f(CW\*(C`In\*(C'\fR from tha block name (e.g. \f(CW\*(C`\ep{BraillePatterns}\*(C'\fR) yo, but
to be safe, itz probably dopest ta always use tha \f(CW\*(C`In\*(C'\fR).
.SS "\s-1REF\s0(...) Instead Of \s-1SCALAR\s0(...)"
.IX Subsection "REF(...) Instead Of SCALAR(...)"
A reference ta a reference now stringifies as \*(L"\s-1REF\s0(0x81485ec)\*(R" instead
of \*(L"\s-1SCALAR\s0(0x81485ec)\*(R" up in order ta be mo' consistent wit tha return
value of \fIref()\fR.
.SS "pack/unpack D/F recycled"
.IX Subsection "pack/unpack D/F recycled"
Da undocumented pack/unpack template lettas D/F done been recycled
for betta use: now they stand fo' long double (if supported by the
platform) n' \s-1NV \s0(Perl internal floatin point type).  (They used
to be aliases fo' d/f yo, but you never knew dis shit.)
.SS "\fIglob()\fP now returns filenames up in alphabetical order"
.IX Subsection "glob() now returns filenames up in alphabetical order"
Da list of filenames from \fIglob()\fR (or <...>) is now by default sorted
alphabetically ta be csh-compliant (which is what tha fuck happened before
in most Unix platforms).  (\fIbsd_glob()\fR do still sort platform
natively, \s-1ASCII\s0 or \s-1EBCDIC,\s0 unless \s-1GLOB_ALPHASORT\s0 is specified.) [561]
.SS "Deprecations"
.IX Subsection "Deprecations"
.IP "\(bu" 4
Da semantics of bless(\s-1REF, REF\s0) was unclear n' until one of mah thugs proves
it ta cook up some fuckin sense, it is forbidden.
.IP "\(bu" 4
Da obsolete chat2 library dat should never done been allowed
to escape tha laboratory has been decommissioned.
.IP "\(bu" 4
Usin chdir("") or chdir(undef) instead of explicit \fIchdir()\fR is
doubtful naaahhmean?  A failure (think chdir(\fIsome_function()\fR) can lead into
unintended \fIchdir()\fR ta tha home directory, therefore dis behaviour
is deprecated.
.IP "\(bu" 4
Da builtin \fIdump()\fR function has probably outlived most of its
usefulness.  Da core-dumpin functionalitizzle will remain up in future
available as a explicit call ta \f(CW\*(C`CORE::dump()\*(C'\fR yo, but up in future
releases tha behaviour of a unqualified \f(CW\*(C`dump()\*(C'\fR call may chizzle.
.IP "\(bu" 4
Da straight-up dusty examplez up in tha eg/ directory done been removed.
Suggestions fo' freshly smoked up shiny examplez welcome but tha main issue is that
the examplez need ta be documented, tested n' (most blinginly)
maintained.
.IP "\(bu" 4
Da (bogus) escape sequences \e8 n' \e9 now give a optionizzle warning
(\*(L"Unrecognized escape passed through\*(R").  There is no need ta \e\-escape
any \f(CW\*(C`\ew\*(C'\fR character.
.IP "\(bu" 4
Da *glob{\s-1FILEHANDLE\s0} is deprecated, use *glob{\s-1IO\s0} instead.
.IP "\(bu" 4
Da \f(CW\*(C`package;\*(C'\fR syntax (\f(CW\*(C`package\*(C'\fR without a argument) has been
deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Its semantics was never dat clear n' its
implementation even less so.  If you have used dat feature to
disallow all but straight-up qualified variables, \f(CW\*(C`use strict;\*(C'\fR instead.
.IP "\(bu" 4
Da unimplemented \s-1POSIX\s0 regex features [[.cc.]] n' [[=c=]] is still
recognised but now cause fatal errors.  Da previous behaviour of
ignorin dem by default n' warnin if axed was unacceptable
since it, up in a way, falsely promised dat tha features could be used.
.IP "\(bu" 4
In future releases, non-PerlIO aware \s-1XS\s0 modulez may become straight-up
unsupported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Since PerlIO be a thugged-out drop-in replacement fo' stdio at the
source code level, dis shouldn't be dat drastic a cold-ass lil chizzle.
.IP "\(bu" 4
Previous versionz of perl n' some readingz of some sectionz of Camel
\&\s-1III\s0 implied dat tha \f(CW\*(C`:raw\*(C'\fR \*(L"discipline\*(R" was tha inverse of \f(CW\*(C`:crlf\*(C'\fR.
Turnin off \*(L"clrfness\*(R" is no longer enough ta cook up a stream truly
binary. Right back up in yo muthafuckin ass. So tha PerlIO \f(CW\*(C`:raw\*(C'\fR layer (or \*(L"discipline\*(R", ta use tha Camel
bookz olda terminology) is now formally defined as bein equivalent
to binmode(\s-1FH\s0) \- which is up in turn defined as bustin whatever is
necessary ta pass each byte as-is without any translation. I aint talkin' bout chicken n' gravy biatch.  In
particular binmode(\s-1FH\s0) \- n' hence \f(CW\*(C`:raw\*(C'\fR \- will now turn off both
\&\s-1CRLF\s0 n' \s-1UTF\-8\s0 translation n' remove other layers (e.g. :\fIencoding()\fR)
which would modify byte stream.
.IP "\(bu" 4
Da current user-visible implementation of pseudo-hashes (the weird
use of tha straight-up original gangsta array element) is deprecated startin from Perl 5.8.0
and is ghon be removed up in Perl 5.10.0, n' tha feature will be
implemented differently.  Not only is tha current intercourse rather
ugly yo, but tha current implementation slows down aiiight array n' hash
use like noticeably. Da \f(CW\*(C`fields\*(C'\fR pragma intercourse will remain
available.  Da \fIrestricted hashes\fR intercourse is sposed ta fuckin
be tha replacement intercourse (see Hash::Util).  If yo' existing
programs dependz on tha underlyin implementation, consider using
Class::PseudoHash from \s-1CPAN.\s0
.IP "\(bu" 4
Da syntaxes \f(CW\*(C`@a\->[...]\*(C'\fR n'  \f(CW\*(C`%h\->{...}\*(C'\fR have now been deprecated.
.IP "\(bu" 4
Afta muthafuckin yearz of trying, suidperl is considered ta be too complex to
ever be considered truly secure.  Da suidperl functionalitizzle is likely
to be removed up in a gangbangin' future release.
.IP "\(bu" 4
Da 5.005 threadz model (module \f(CW\*(C`Thread\*(C'\fR) is deprecated n' expected
to be removed up in Perl 5.10.  Multithreaded code should be migrated to
the freshly smoked up ithreadz model (see threads, threads::shared and
perlthrtut).
.IP "\(bu" 4
Da long deprecated uppercase aliases fo' tha strang comparison
operators (\s-1EQ, NE, LT, LE, GE, GT\s0) have now been removed.
.IP "\(bu" 4
Da tr///C n' tr///U features done been removed n' aint gonna return;
the intercourse was a mistake.  Sorry bout dis shit.  For similar
functionality, peep pack('U0', ...) n' pack('C0', ...). [561]
.IP "\(bu" 4
Earlier Perls treated \*(L"sub foo (@bar)\*(R" as equivalent ta \*(L"sub foo (@)\*(R".
Da prototypes is now checked betta at compile-time fo' invalid
syntax.  An optionizzle warnin is generated (\*(L"Illegal characta in
prototype...\*(R")  but dis may be upgraded ta a gangbangin' fatal error up in a gangbangin' future
release.
.IP "\(bu" 4
Da \f(CW\*(C`exec LIST\*(C'\fR n' \f(CW\*(C`system LIST\*(C'\fR operations now produce warnings on
tainted data n' up in some future release they will produce fatal errors.
.IP "\(bu" 4
Da existin behaviour when localisin tied arrays n' hashes is wrong,
and is ghon be chizzled up in a gangbangin' future release, so do not rely on tha existing
behaviour. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. See \*(L"Localisin Tied Arrays n' Hashes Is Broken\*(R".
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Overhaul"
.IX Subsection "Unicode Overhaul"
Unicode up in general should be now much mo' usable than up in Perl 5.6.0
(or even up in 5.6.1).  Unicode can be used up in hash keys, Unicode in
regular expressions should work now, Unicode up in tr/// should work now,
Unicode up in I/O should work now, nahmeean?  See perluniintro fo' introduction
and perlunicode fo' details.
.IP "\(bu" 4
Da Unicode Characta Database comin wit Perl has been upgraded
to Unicode 3.2.0.  For mo' shiznit, peep http://www.unicode.org/ .
[561+] (5.6.1 has \s-1UCD 3.0.1.\s0)
.IP "\(bu" 4
For pimpers horny bout enhancin Perlz Unicode capabilities:
almost all tha \s-1UCD\s0 filez is included wit tha Perl distribution in
the \fIlib/unicore\fR subdirectory.  Da most notable omission, fo' space
considerations, is tha Unihan database.
.IP "\(bu" 4
Da propertizzles \ep{Blank} n' \ep{SpacePerl} done been added. Y'all KNOW dat shit, muthafucka! \*(L"Blank\*(R" is like
C \fIisblank()\fR, dat is, it gotz nuff only \*(L"horizontal whitespace\*(R" (the space
characta is, tha newline aint), n' tha \*(L"SpacePerl\*(R" is tha Unicode
equivalent of \f(CW\*(C`\es\*(C'\fR (\ep{Space} aint, since dat includes tha vertical
tabulator character, whereas \f(CW\*(C`\es\*(C'\fR don't.)
.Sp
See \*(L"New Unicode Properties\*(R" earlier up in dis document fo' additional
information on chizzlez wit Unicode properties.
.SS "PerlIO is Now Da Default"
.IX Subsection "PerlIO is Now Da Default"
.IP "\(bu" 4
\&\s-1IO\s0 is now by default done via PerlIO rather than systemz \*(L"stdio\*(R".
PerlIO allows \*(L"layers\*(R" ta be \*(L"pushed\*(R" onto a gangbangin' file handle ta alta the
handlez behaviour. Shiiit, dis aint no joke.  Layers can be specified at open time via 3\-arg
form of open:
.Sp
.Vb 1
\&   open($fh,\*(Aq>:crlf :utf8\*(Aq, $path) || ...
.Ve
.Sp
or on already opened handlez via extended \f(CW\*(C`binmode\*(C'\fR:
.Sp
.Vb 1
\&   binmode($fh,\*(Aq:encoding(iso\-8859\-7)\*(Aq);
.Ve
.Sp
Da built-in layers are: unix (low level read/write), stdio (as in
previous Perls), perlio (re-implementation of stdio bufferin up in a
portable manner), crlf (does \s-1CRLF\s0 <=> \*(L"\en\*(R" translation as on Win32,
but available on any platform).  A mmap layer may be available if
platform supports it (mostly Unixes).
.Sp
Layers ta be applied by default may be specified via tha 'open' pragma.
.Sp
See \*(L"Installation n' Configuration Improvements\*(R" fo' tha effects
of PerlIO on yo' architecture name.
.IP "\(bu" 4
If yo' platform supports \fIfork()\fR, you can use tha list form of \f(CW\*(C`open\*(C'\fR
for pipes.  For example:
.Sp
.Vb 1
\&    open KID_PS, "\-|", "ps", "aux" or take a thugged-out dirtnap $!;
.Ve
.Sp
forks tha \fIps\fR\|(1) command (without spawnin a gangbangin' finger-lickin' dirty-ass shell, as there be more
than three arguments ta \fIopen()\fR), n' readz its standard output via the
\&\f(CW\*(C`KID_PS\*(C'\fR filehandle.  See perlipc.
.IP "\(bu" 4
File handlez can be marked as acceptin Perlz internal encodin of Unicode
(\s-1UTF\-8\s0 or UTF-EBCDIC dependin on platform) by a pseudo layer \*(L":utf8\*(R" :
.Sp
.Vb 1
\&   open($fh,">:utf8","Uni.txt");
.Ve
.Sp
Note fo' \s-1EBCDIC\s0 users: tha pseudo layer \*(L":utf8\*(R" is erroneously named
for you since it aint \s-1UTF\-8\s0 what tha fuck yo big-ass booty is ghon be gettin but instead
UTF-EBCDIC.  See perlunicode, utf8, and
http://www.unicode.org/unicode/reports/tr16/ fo' mo' shiznit.
In future releases dis namin may chizzle.  See perluniintro
for mo' shiznit bout \s-1UTF\-8.\s0
.IP "\(bu" 4
If yo' environment variablez (\s-1LC_ALL, LC_CTYPE, LANG\s0) be lookin like you
wanna use \s-1UTF\-8 \s0(any of tha variablez match \f(CW\*(C`/utf\-?8/i\*(C'\fR), your
\&\s-1STDIN, STDOUT, STDERR\s0 handlez n' tha default open layer (see open)
are marked as \s-1UTF\-8.  \s0(This feature, like other freshly smoked up features that
combine Unicode n' I/O, work only if yo ass is rockin PerlIO yo, but that's
the default.)
.Sp
Note dat afta dis Perl straight-up do assume dat every last muthafuckin thang is \s-1UTF\-8:\s0
for example if some input handle is not, Perl will probably straight-up soon
diss bout tha input data like dis \*(L"Malformed \s-1UTF\-8 ...\*(R"\s0 since
any oldschool eight-bit data aint legal \s-1UTF\-8.\s0
.Sp
Note fo' code authors: if you wanna enable yo' playas ta use \s-1UTF\-8\s0
as they default encodin  but up in yo' code still have eight-bit I/O streams
(like fuckin images or zip files), you need ta explicitly \fIopen()\fR or \fIbinmode()\fR
with \f(CW\*(C`:bytes\*(C'\fR (see \*(L"open\*(R" up in perlfunc n' \*(L"binmode\*(R" up in perlfunc), or you
can just use \f(CW\*(C`binmode(FH)\*(C'\fR (nice fo' pre\-5.8.0 backward compatibility).
.IP "\(bu" 4
File handlez can translate characta encodings from/to Perlz internal
Unicode form on read/write via tha \*(L":\fIencoding()\fR\*(R" layer.
.IP "\(bu" 4
File handlez can be opened ta \*(L"in memory\*(R" filez held up in Perl scalars via:
.Sp
.Vb 1
\&   open($fh,\*(Aq>\*(Aq, \e$variable) || ...
.Ve
.IP "\(bu" 4
Anonymous temporary filez is available without need to
\&'use FileHandle' or other module via
.Sp
.Vb 1
\&   open($fh,"+>", undef) || ...
.Ve
.Sp
That be a literal undef, not a undefined value.
.SS "ithreads"
.IX Subsection "ithreads"
Da freshly smoked up interpreta threadz (\*(L"ithreads\*(R" fo' short) implementation of
multithreading, by Arthur Bergman, replaces tha oldschool \*(L"5.005 threads\*(R"
implementation. I aint talkin' bout chicken n' gravy biatch.  In tha ithreadz model any data pluggin between
threadz must be explicit, as opposed ta tha model where data sharing
was implicit.  See threadz n' threads::shared, and
perlthrtut.
.PP
As a part of tha ithreadz implementation Perl will also use
any necessary n' detectable reentrant libc intercourses.
.SS "Restricted Hashes"
.IX Subsection "Restricted Hashes"
A restricted hash is restricted ta a cold-ass lil certain set of keys, no keys
outside tha set can be added. Y'all KNOW dat shit, muthafucka!  Also individual keys can be restricted
so dat tha key cannot be deleted n' tha value cannot be chizzled.
No freshly smoked up syntax is involved: tha Hash::Util module is tha intercourse.
.SS "Safe Signals"
.IX Subsection "Safe Signals"
Perl used ta be fragile up in dat signals arrivin at inopportune moments
could corrupt Perlz internal state.  Now Perl postpones handlin of
signals until itz safe (between opcodes).
.PP
This chizzle may have surprisin side effects cuz signals no longer
interrupt Perl instantly.  Perl will now first finish whatever it was
doing, like finishin a internal operation (like \fIsort()\fR) or an
external operation (like a I/O operation), n' only then peep any
arrived signals (and before startin tha next operation).  No mo' corrupt
internal state since tha current operation be always finished first,
but tha signal may take mo' time ta git heard. Y'all KNOW dat shit, muthafucka!  Note dat breaking
out from potentially blockin operations should still work, though.
.SS "Understandin of Numbers"
.IX Subsection "Understandin of Numbers"
In general a shitload of fixin has happened up in tha area of Perl's
understandin of numbers, both integer n' floatin point.  Since in
many systems tha standard number parsin functions like \f(CW\*(C`strtoul()\*(C'\fR
and \f(CW\*(C`atof()\*(C'\fR seem ta have bugs, Perl tries ta work round their
deficiencies. Put ya muthafuckin choppers up if ya feel dis!  This thangs up in dis biatch hopefully up in mo' accurate numbers.
.PP
Perl now tries internally ta use integer joints up in numeric conversions
and basic arithmetics (+ \- * /) if tha arguments is integers, and
tries also ta keep tha thangs up in dis biatch stored internally as integers.
This chizzle leadz ta often slightly fasta n' always less lossy
arithmetics. (Previously Perl always preferred floatin point numbers
in its math.)
.SS "Arrays now always interpolate tha fuck into double-quoted strings [561]"
.IX Subsection "Arrays now always interpolate tha fuck into double-quoted strings [561]"
In double-quoted strings, arrays now interpolate, no matta what.  The
behavior up in earlier versionz of perl 5 was dat arrays would interpolate
into strings if tha array had been mentioned before tha strang was
compiled, n' otherwise Perl would raise a gangbangin' fatal compile-time error.
In versions 5.000 all up in 5.003, tha error was
.PP
.Vb 1
\&        Literal @example now requires backslash
.Ve
.PP
In versions 5.004_01 all up in 5.6.0, tha error was
.PP
.Vb 1
\&        In string, @example now must be freestyled as \e@example
.Ve
.PP
Da scam here was ta git playas tha fuck into tha g-thang of writing
\&\f(CW"fred\e@example.com"\fR when they wanted a literal \f(CW\*(C`@\*(C'\fR sign, just as
they have always freestyled \f(CW"Give me back mah \e$5"\fR when they wanted a
literal \f(CW\*(C`$\*(C'\fR sign.
.PP
Startin wit 5.6.1, when Perl now sees a \f(CW\*(C`@\*(C'\fR sign up in a
double-quoted string, it \fIalways\fR attempts ta interpolate a array,
regardless of whether or not tha array has been used or declared
already.  Da fatal error has been downgraded ta a optionizzle warning:
.PP
.Vb 1
\&        Possible unintended interpolation of @example up in string
.Ve
.PP
This warns you dat \f(CW"fred@example.com"\fR is goin ta turn into
\&\f(CW\*(C`fred.com\*(C'\fR if you don't backslash tha \f(CW\*(C`@\*(C'\fR.
See http://perl.plover.com/at\-error.html fo' mo' details
about tha history here.
.SS "Miscellaneous Chizzles"
.IX Subsection "Miscellaneous Chizzles"
.IP "\(bu" 4
\&\s-1AUTOLOAD\s0 is now lvaluable, meanin dat you can add tha :lvalue attribute
to \s-1AUTOLOAD\s0 subroutines n' you can assign ta tha \s-1AUTOLOAD\s0 return value.
.IP "\(bu" 4
Da \f(CW$Config\fR{byteorder} (and correspondin \s-1BYTEORDER\s0 up in config.h) was
previously wack up in platforms if sizeof(long) was 4 yo, but sizeof(\s-1IV\s0)
was 8.  Da byteorder was only sizeof(long) bytes long (1234 or 4321),
but now it is erectly sizeof(\s-1IV\s0) bytes long, (12345678 or 87654321).
(This problem didn't affect Windows platforms.)
.Sp
Also, \f(CW$Config\fR{byteorder} is now computed dynamically\*(--this is more
robust wit \*(L"fat binaries\*(R" where a executable image gotz nuff binaries
for mo' than one binary platform, n' when cross-compiling.
.IP "\(bu" 4
\&\f(CW\*(C`perl \-d:Module=arg,arg,arg\*(C'\fR now works (previously one couldn't pass
in multiple arguments.)
.IP "\(bu" 4
\&\f(CW\*(C`do\*(C'\fR followed by a funky-ass bareword now ensures dat dis bareword aint
a keyword (to avoid a funky-ass bug where \f(CW\*(C`do q(foo.pl)\*(C'\fR tried ta booty-call a
subroutine called \f(CW\*(C`q\*(C'\fR).  This means dat fo' example instead of
\&\f(CW\*(C`do format()\*(C'\fR you must write \f(CW\*(C`do &format()\*(C'\fR.
.IP "\(bu" 4
Da builtin \fIdump()\fR now gives a optionizzle warning
\&\f(CW\*(C`dump() betta freestyled as CORE::dump()\*(C'\fR,
meanin dat by default \f(CW\*(C`dump(...)\*(C'\fR is resolved as tha builtin
\&\fIdump()\fR which dumps core n' aborts, not as (possibly) user-defined
\&\f(CW\*(C`sub dump\*(C'\fR.  To call tha latter, qualify tha call as \f(CW\*(C`&dump(...)\*(C'\fR.
(Da whole \fIdump()\fR feature is ta considered deprecated, n' possibly
removed/changed up in future releases.)
.IP "\(bu" 4
\&\fIchomp()\fR n' \fIchop()\fR is now overridable.  Note, however, dat their
prototype (as given by \f(CW\*(C`prototype("CORE::chomp")\*(C'\fR is undefined,
because it cannot be expressed n' therefore one cannot straight-up write
replacements ta override these builtins.
.IP "\(bu" 4
\&\s-1END\s0 blocks is now run even if you exit/die up in a \s-1BEGIN\s0 block.
Internally, tha execution of \s-1END\s0 blocks is now controlled by
PL_exit_flags & \s-1PERL_EXIT_DESTRUCT_END.\s0 This enablez tha new
behaviour fo' Perl embedders. This will default up in 5.10. Right back up in yo muthafuckin ass. See
perlembed.
.IP "\(bu" 4
Formats now support zero-padded decimal fields.
.IP "\(bu" 4
Although \*(L"you shouldn't do that\*(R", dat shiznit was possible ta write code that
dependz on Perlz hashed key order (Data::Dumper do this).  Da new
algorithm \*(L"One-at-a-Time\*(R" produces a gangbangin' finger-lickin' different hashed key order.
Mo' details is up in \*(L"Performizzle Enhancements\*(R".
.IP "\(bu" 4
lstat(\s-1FILEHANDLE\s0) now gives a warnin cuz tha operation make no sense.
In future releases dis may become a gangbangin' fatal error.
.IP "\(bu" 4
Spurious syntax errors generated up in certain thangs, when \fIglob()\fR
caused File::Glob ta be loaded fo' tha last time, done been fixed. Y'all KNOW dat shit, muthafucka! [561]
.IP "\(bu" 4
Lvalue subroutines can now return \f(CW\*(C`undef\*(C'\fR up in list context.  However,
the lvalue subroutine feature still remains experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  [561+]
.IP "\(bu" 4
A lost warnin \*(L"Can't declare ... dereference up in my\*(R" has been
restored (Perl had it earlier but it became lost up in lata releases.)
.IP "\(bu" 4
A freshly smoked up special regular expression variable has been introduced:
\&\f(CW$^N\fR, which gotz nuff da most thugged-out-recently closed crew (submatch).
.IP "\(bu" 4
\&\f(CW\*(C`no Module;\*(C'\fR do not produce a error even if Module aint gots an
\&\fIunimport()\fR method. Y'all KNOW dat shit, muthafucka!  This parallels tha behavior of \f(CW\*(C`use\*(C'\fR vis-a-vis
\&\f(CW\*(C`import\*(C'\fR. [561]
.IP "\(bu" 4
Da numerical comparison operators return \f(CW\*(C`undef\*(C'\fR if either operand
is a NaN.  Previously tha behaviour was unspecified.
.IP "\(bu" 4
\&\f(CW\*(C`our\*(C'\fR can now have a experimenstrual optionizzle attribute \f(CW\*(C`unique\*(C'\fR that
affects how tha fuck global variablez is shared among multiple interpreters,
see \*(L"our\*(R" up in perlfunc.
.IP "\(bu" 4
Da followin builtin functions is now overridable: \fIeach()\fR, \fIkeys()\fR,
\&\fIpop()\fR, \fIpush()\fR, \fIshift()\fR, \fIsplice()\fR, \fIunshift()\fR. [561]
.IP "\(bu" 4
\&\f(CW\*(C`pack() / unpack()\*(C'\fR can now crew template lettas wit \f(CW\*(C`()\*(C'\fR n' then
apply repetition/count modifiers on tha groups.
.IP "\(bu" 4
\&\f(CW\*(C`pack() / unpack()\*(C'\fR can now process tha Perl internal numeric types:
IVs, UVs, NVs\*(-- n' also long doubles, if supported by tha platform.
Da template lettas is \f(CW\*(C`j\*(C'\fR, \f(CW\*(C`J\*(C'\fR, \f(CW\*(C`F\*(C'\fR, n' \f(CW\*(C`D\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`pack(\*(AqU0a*\*(Aq, ...)\*(C'\fR can now be used ta force a strang ta \s-1UTF\-8.\s0
.IP "\(bu" 4
my _\|_PACKAGE_\|_ \f(CW$obj\fR now works. [561]
.IP "\(bu" 4
\&\fIPOSIX::sleep()\fR now returns tha number of \fIunslept\fR seconds
(as tha \s-1POSIX\s0 standard says), as opposed ta \fICORE::sleep()\fR which
returns tha number of slept seconds.
.IP "\(bu" 4
\&\fIprintf()\fR n' \fIsprintf()\fR now support parameta reorderin rockin the
\&\f(CW\*(C`%\ed+\e$\*(C'\fR n' \f(CW\*(C`*\ed+\e$\*(C'\fR syntaxes.  For example
.Sp
.Vb 1
\&    printf "%2\e$s %1\e$s\en", "foo", "bar";
.Ve
.Sp
will print \*(L"bar foo\en\*(R".  This feature helps up in writing
internationalised software, n' up in general when tha order
of tha parametas can vary.
.IP "\(bu" 4
Da (\e&) prototype now works properly. [561]
.IP "\(bu" 4
prototype(\e[$@%&]) is now available ta implicitly create references
(useful fo' example if you wanna emulate tha \fItie()\fR intercourse).
.IP "\(bu" 4
A freshly smoked up command-line option, \f(CW\*(C`\-t\*(C'\fR be available.  It be the
lil brutha of \f(CW\*(C`\-T\*(C'\fR: instead of dyin on taint violations,
lexical warnings is given. I aint talkin' bout chicken n' gravy biatch.  \fBThis is only meant as a temporary
debuggin aid while securin tha code of oldschool legacy applications.
This aint a substitute fo' \-T.\fR
.IP "\(bu" 4
In other taint hype, tha \f(CW\*(C`exec LIST\*(C'\fR n' \f(CW\*(C`system LIST\*(C'\fR have now been
considered too risky (think \f(CW\*(C`exec @ARGV\*(C'\fR: it can start any program
with any arguments), n' now tha holla'd forms cause a warnin under
lexical warnings.  Yo ass should carefully launder tha arguments to
guarantee they validity.  In future releasez of Perl tha forms will
become fatal errors so consider startin launderin now, nahmeean?
.IP "\(bu" 4
Tied hash intercourses is now required ta have tha \s-1EXISTS\s0 n' \s-1DELETE\s0
methodz (either own or inherited).
.IP "\(bu" 4
If tr/// is just countin characters, it don't attempt to
modify its target.
.IP "\(bu" 4
\&\fIuntie()\fR will now call a \s-1\fIUNTIE\s0()\fR hook if it exists, n' you can put dat on yo' toast.  See perltie
for details. [561]
.IP "\(bu" 4
\&\*(L"utime\*(R" up in perlfunc now supports \f(CW\*(C`utime undef, undef, @files\*(C'\fR ta chizzle the
file timestamps ta tha current time.
.IP "\(bu" 4
Da rulez fo' allowin underscores (underbars) up in numeric constants
have been chillaxed n' simplified: now you can have a underscore
simply \fBbetween digits\fR.
.IP "\(bu" 4
Rather than relyin on Cz argv[0] (which may not contain a gangbangin' full pathname)
where possible $^X is now set by askin tha operatin system.
(eg by readin \fI/proc/self/exe\fR on Linux, \fI/proc/curproc/file\fR on FreeBSD)
.IP "\(bu" 4
A freshly smoked up variable, \f(CW\*(C`${^TAINT}\*(C'\fR, indicates whether taint mode is enabled.
.IP "\(bu" 4
Yo ass can now override tha \fIreadline()\fR builtin, n' dis overrides also
the <\s-1FILEHANDLE\s0> angle bracket operator.
.IP "\(bu" 4
Da command-line options \-s n' \-F is now recognized on tha shebang
(#!) line.
.IP "\(bu" 4
Use of tha \f(CW\*(C`/c\*(C'\fR match modifier without a accompanyin \f(CW\*(C`/g\*(C'\fR modifier
elicits a freshly smoked up warning: \f(CW\*(C`Use of /c modifier is meaningless without /g\*(C'\fR.
.Sp
Use of \f(CW\*(C`/c\*(C'\fR up in substitutions, even wit \f(CW\*(C`/g\*(C'\fR, elicits
\&\f(CW\*(C`Use of /c modifier is meaningless up in s///\*(C'\fR.
.Sp
Use of \f(CW\*(C`/g\*(C'\fR wit \f(CW\*(C`split\*(C'\fR elicits \f(CW\*(C`Use of /g modifier is meaningless
in split\*(C'\fR.
.IP "\(bu" 4
Support fo' tha \f(CW\*(C`CLONE\*(C'\fR special subroutine had been added.
With ithreads, when a freshly smoked up thread is pimped, all Perl data is cloned,
however non-Perl data cannot be cloned automatically.  In \f(CW\*(C`CLONE\*(C'\fR you
can do whatever you need ta do, like fo' example handle tha clonin of
non-Perl data, if necessary.  \f(CW\*(C`CLONE\*(C'\fR is ghon be executed once fo' every
package dat has it defined or inherited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It is ghon be called up in the
context of tha freshly smoked up thread, so all modifications is made up in tha freshly smoked up area.
.Sp
See perlmod
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "New Modulez n' Pragmata"
.IX Subsection "New Modulez n' Pragmata"
.IP "\(bu" 4
\&\f(CW\*(C`Attribute::Handlezs\*(C'\fR, originally by Damian Conway n' now maintained
by Arthur Bergman, allows a cold-ass lil class ta define attribute handlezs.
.Sp
.Vb 3
\&    package MyPack;
\&    use Attribute::Handlezs;
\&    sub Wolf :ATTR(SCALAR) { print "howl!\en" }
\&
\&    # later, up in some package rockin or inheritin from MyPack...
\&
\&    mah MyPack $Fluffy : Wolf; # tha attribute handlez Wolf is ghon be called
.Ve
.Sp
Both variablez n' routines can have attribute handlezs.  Handlezs can
be specific ta type (\s-1SCALAR, ARRAY, HASH,\s0 or \s-1CODE\s0), or specific ta the
exact compilation phase (\s-1BEGIN, CHECK, INIT,\s0 or \s-1END\s0).
See Attribute::Handlezs.
.IP "\(bu" 4
\&\f(CW\*(C`B::Concise\*(C'\fR, by Stephen McCamant, be a freshly smoked up compila backend for
walkin tha Perl syntax tree, printin concise info bout ops.
Da output is highly customisable.  See B::Concise. [561+]
.IP "\(bu" 4
Da freshly smoked up bignum, bigint, n' bigrat pragmas, by Tels, implement
transparent bignum support (usin tha Math::BigInt, Math::BigFloat,
and Math::BigRat backends).
.IP "\(bu" 4
\&\f(CW\*(C`Class::ISA\*(C'\fR, by Shizzle Burke, be a module fo' reportin tha search
path fo' a cold-ass lil classs \s-1ISA\s0 tree.  See Class::ISA.
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR now has a split personality: if possible, a \s-1XS\s0 extension is
used, (this will hopefully be faster, mo' secure, n' mo' robust)
but if not possible, tha familiar Perl implementation is used.
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR, originally by Kenneth Albanowski n' now
maintained by Pizzle Marquess, has been added. Y'all KNOW dat shit, muthafucka!  It be primarily used
by \f(CW\*(C`h2xs\*(C'\fR ta enhizzle portabilitizzle of \s-1XS\s0 modulez between different
versionz of Perl.  See Devel::PPPort.
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR, frontend module fo' calculatin digests (checksums), from
Gisle Aas, has been added. Y'all KNOW dat shit, muthafucka!  See Digest.
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR fo' calculatin \s-1MD5\s0 digests (checksums) as defined in
\&\s-1RFC 1321,\s0 from Gisle Aas, has been added. Y'all KNOW dat shit, muthafucka!  See Digest::MD5.
.Sp
.Vb 1
\&    use Digest::MD5 \*(Aqmd5_hex\*(Aq;
\&
\&    $digest = md5_hex("Thirsty Camel");
\&
\&    print $digest, "\en"; # 01d19d9d2045e005c3f1b80e8b164de1
.Ve
.Sp
\&\s-1NOTE:\s0 tha \f(CW\*(C`MD5\*(C'\fR backward compatibilitizzle module is deliberately not
included since its further use is discouraged.
.Sp
See also PerlIO::via::QuotedPrint.
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR, originally by Nick Ing-Simmons n' now maintained by Dan
Kogai, serves up a mechanizzle ta translate between different character
encodings.  Support fo' Unicode, \s-1ISO\-8859\-1,\s0 n' \s-1ASCII\s0 is compiled in
to tha module.  Several other encodings (like tha rest of the
\&\s-1ISO\-8859,\s0 CP*/Win*, Mac, \s-1KOI8\-R,\s0 three variants \s-1EBCDIC,\s0 Chinese,
Japanese, n' Korean encodings) is included n' can be loaded at
runtime.  (For space considerations, tha phattest Chinese encodings
have been separated tha fuck into they own \s-1CPAN\s0 module, Encode::HanExtra,
which Encode will use if available).  See Encode.
.Sp
Any encodin supported by Encode module be also available ta the
\&\*(L":\fIencoding()\fR\*(R" layer if PerlIO is used.
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util\*(C'\fR is tha intercourse ta tha freshly smoked up \fIrestricted hashes\fR
feature.  (Implemented by Jeffrey Friedl, Nick Ing-Simmons, and
Mike Schwern.)  See Hash::Util.
.IP "\(bu" 4
\&\f(CW\*(C`I18N::Langinfo\*(C'\fR can be used ta query locale shiznit.
See I18N::Langinfo.
.IP "\(bu" 4
\&\f(CW\*(C`I18N::LangTags\*(C'\fR, by Shizzle Burke, has functions fo' dealin with
RFC3066\-style language tags.  See I18N::LangTags.
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR, by Nicholas Clark, be a freshly smoked up tool fo' extension
writas fo' generatin \s-1XS\s0 code ta import C header constants.
See ExtUtils::Constant.
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR, by Damian Conway, be a easy as fuck -to-use frontend to
Filter::Util::Call.  See Filter::Simple.
.Sp
.Vb 1
\&    # up in MyFilter.pm:
\&
\&    package MyFilter;
\&
\&    use Filter::Simple sub {
\&        while (my ($from, $to) = splice @_, 0, 2) {
\&                s/$from/$to/g;
\&        }
\&    };
\&
\&    1;
\&
\&    # up in user\*(Aqs code:
\&
\&    use MyFilta qr/red/ => \*(Aqgreen\*(Aq;
\&
\&    print "red\en";   # dis code is filtered, will print "green\en"
\&    print "bored\en"; # dis code is filtered, will print "bogreen\en"
\&
\&    no MyFilter;
\&
\&    print "red\en";   # dis code aint filtered, will print "red\en"
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`File::Temp\*(C'\fR, by Slim Tim Jenness, allows one ta create temporary files
and directories up in a easy as fuck , portable, n' secure way.  See File::Temp.
[561+]
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Util::Call\*(C'\fR, by Pizzle Marquess, serves up you wit the
framework ta write \fIsource filters\fR up in Perl.  For most uses, the
frontend Filter::Simple is ta be preferred. Y'all KNOW dat shit, muthafucka!  See Filter::Util::Call.
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR, by Ilya Zakharevich, be a freshly smoked up pragma fo' conditionizzle inclusion
of modules.
.IP "\(bu" 4
libnet, by Graham Barr, be a cold-ass lil collection of perl5 modulez related
to network programming.  See Net::FTP, Net::NNTP, Net::Ping
(not part of libnet yo, but related), Net::POP3, Net::SMTP,
and Net::Time.
.Sp
Perl installation leaves libnet unconfigured; use \fIlibnetcfg\fR
to configure dat shit.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR, by Graham Barr, be a selection of general-utility
list subroutines, like fuckin \fIsum()\fR, \fImin()\fR, \fIfirst()\fR, n' \fIshuffle()\fR.
See List::Util.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Constants\*(C'\fR, \f(CW\*(C`Locale::Country\*(C'\fR, \f(CW\*(C`Locale::Currency\*(C'\fR
\&\f(CW\*(C`Locale::Language\*(C'\fR, n' Locale::Script, by Neil Bowers, have
been added. Y'all KNOW dat shit, muthafucka!  They provide tha codes fo' various locale standards, such
as \*(L"fr\*(R" fo' France, \*(L"usd\*(R" fo' \s-1US\s0 Dollar, n' \*(L"ja\*(R" fo' Japanese.
.Sp
.Vb 1
\&    use Locale::Country;
\&
\&    $country = code2country(\*(Aqjp\*(Aq);               # $country gets \*(AqJapan\*(Aq
\&    $code    = ghetto2code(\*(AqNorway\*(Aq);           # $code gets \*(Aqno\*(Aq
.Ve
.Sp
See Locale::Constants, Locale::Country, Locale::Currency,
and Locale::Language.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext\*(C'\fR, by Shizzle Burke, be a localization framework.  See
Locale::Maketext, n' Locale::Maketext::TPJ13.  Da latta be an
article bout software localization, originally published up in Da Perl
Journal #13, n' republished here wit kind permission.
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigRat\*(C'\fR fo' big-ass rationizzle numbers, ta accompany Math::BigInt and
Math::BigFloat, from Tels.  See Math::BigRat.
.IP "\(bu" 4
\&\f(CW\*(C`Memoize\*(C'\fR can make yo' functions fasta by tradin space fo' time,
from Mark-Jizzo Dominus.  See Memoize.
.IP "\(bu" 4
\&\f(CW\*(C`MIME::Base64\*(C'\fR, by Gisle Aas, allows you ta encode data up in base64,
as defined up in \s-1RFC 2045 \- \s0\fI\s-1MIME \s0(Multipurpose Internizzle Mail
Extensions)\fR.
.Sp
.Vb 1
\&    use MIME::Base64;
\&
\&    $encoded = encode_base64(\*(AqAladdin:open sesame\*(Aq);
\&    $decoded = decode_base64($encoded);
\&
\&    print $encoded, "\en"; # "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
.Ve
.Sp
See MIME::Base64.
.IP "\(bu" 4
\&\f(CW\*(C`MIME::QuotedPrint\*(C'\fR, by Gisle Aas, allows you ta encode data
in quoted-printable encoding, as defined up in \s-1RFC 2045 \- \s0\fI\s-1MIME
\&\s0(Multipurpose Internizzle Mail Extensions)\fR.
.Sp
.Vb 1
\&    use MIME::QuotedPrint;
\&
\&    $encoded = encode_qp("\exDE\exAD\exBE\exEF");
\&    $decoded = decode_qp($encoded);
\&
\&    print $encoded, "\en"; # "=DE=AD=BE=EF\en"
\&    print $decoded, "\en"; # "\exDE\exAD\exBE\exEF\en"
.Ve
.Sp
See also PerlIO::via::QuotedPrint.
.IP "\(bu" 4
\&\f(CW\*(C`NEXT\*(C'\fR, by Damian Conway, be a pseudo-class fo' method redispatch.
See \s-1NEXT\s0.
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR be a freshly smoked up pragma fo' settin tha default I/O layers
for \fIopen()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR, by Nick Ing-Simmons, serves up tha implementation
of \s-1IO\s0 ta \*(L"in memory\*(R" Perl scalars as discussed above.  It also serves
as a example of a loadable PerlIO layer n' shit.  Other future possibilities
include PerlIO::Array n' PerlIO::Code.  See PerlIO::scalar.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR, by Nick Ing-Simmons, acts as a PerlIO layer n' wraps
PerlIO layer functionalitizzle provided by a cold-ass lil class (typically implemented
in Perl code).
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via::QuotedPrint\*(C'\fR, by Elizabeth Mattijsen, be a example
of a \f(CW\*(C`PerlIO::via\*(C'\fR class:
.Sp
.Vb 2
\&    use PerlIO::via::QuotedPrint;
\&    open($fh,">:via(QuotedPrint)",$path);
.Ve
.Sp
This will automatically convert every last muthafuckin thang output ta \f(CW$fh\fR to
Quoted-Printable.  See PerlIO::via n' PerlIO::via::QuotedPrint.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::ParseLink\*(C'\fR, by Russ Allbery, has been added,
to parse L<> links up in podz as busted lyrics bout up in tha new
perlpodspec.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Text::Overstrike\*(C'\fR, by Joe Smizzle, has been added.
It converts \s-1POD\s0 data ta formatted overstrike text.
See Pod::Text::Overstrike. [561+]
.IP "\(bu" 4
\&\f(CW\*(C`Scalar::Util\*(C'\fR be a selection of general-utilitizzle scalar subroutines,
like fuckin \fIblessed()\fR, \fIreftype()\fR, n' \fItainted()\fR.  See Scalar::Util.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR be a freshly smoked up pragma fo' controllin tha behaviour of \fIsort()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR gives persistence ta Perl data structures by allowin the
storage n' retrieval of Perl data ta n' from filez up in a gangbangin' fast and
compact binary format.  Because up in effect Storable do serialisation
of Perl data structures, wit it you can also clone deep, hierarchical
datastructures.  Storable was originally pimped by Raphael Manfredi,
but it is now maintained by Abhijit Menon-Sen. I aint talkin' bout chicken n' gravy biatch.  Storable has been
enhanced ta KNOW tha two freshly smoked up hash features, Unicode keys and
restricted hashes.  See Storable.
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR, by Damian Conway, has been added. Y'all KNOW dat shit, muthafucka!  Just by saying
.Sp
.Vb 1
\&    use Switch;
.Ve
.Sp
you have \f(CW\*(C`switch\*(C'\fR n' \f(CW\*(C`case\*(C'\fR available up in Perl.
.Sp
.Vb 1
\&    use Switch;
\&
\&    switch ($val) {
\&
\&                case 1          { print "number 1" }
\&                case "a"        { print "strin a" }
\&                case [1..10,42] { print "number up in list" }
\&                case (@array)   { print "number up in list" }
\&                case /\ew+/      { print "pattern" }
\&                case qr/\ew+/    { print "pattern" }
\&                case (%hash)    { print "entry up in hash" }
\&                case (\e%hash)   { print "entry up in hash" }
\&                case (\e&sub)    { print "arg ta subroutine" }
\&                else            { print "previous case not true" }
\&    }
.Ve
.Sp
See Switch.
.IP "\(bu" 4
\&\f(CW\*(C`Test::Mo'\*(C'\fR, by Mike Schwern, is yet another framework fo' writing
test scripts, mo' extensive than Test::Simple.  See Test::Mo'.
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR, by Mike Schwern, has basic utilitizzles fo' writing
tests, n' you can put dat on yo' toast.   See Test::Simple.
.IP "\(bu" 4
\&\f(CW\*(C`Text::Balanced\*(C'\fR, by Damian Conway, has been added, fo' extracting
delimited text sequences from strings.
.Sp
.Vb 1
\&    use Text::Balanced \*(Aqextract_delimited\*(Aq;
\&
\&    ($a, $b) = extract_delimited("\*(Aqnever say never\*(Aq, he never holla'd", "\*(Aq", \*(Aq\*(Aq);
.Ve
.Sp
\&\f(CW$a\fR is ghon be \*(L"'never say never'\*(R", \f(CW$b\fR is ghon be ', he never holla'd'.
.Sp
In addizzle ta \fIextract_delimited()\fR, there be also \fIextract_bracketed()\fR,
\&\fIextract_quotelike()\fR, \fIextract_codeblock()\fR, \fIextract_variable()\fR,
\&\fIextract_tagged()\fR, \fIextract_multiple()\fR, \fIgen_delimited_pat()\fR, and
\&\fIgen_extract_tagged()\fR.  With these, you can implement rather advanced
parsin algorithms.  See Text::Balanced.
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR, by Arthur Bergman, be a intercourse ta interpreta threads.
Interpreta threadz (ithreads) is tha freshly smoked up thread model introduced in
Perl 5.6 but only available as a internal intercourse fo' extension
writas (and fo' Win32 Perl fo' \f(CW\*(C`fork()\*(C'\fR emulation).  See threads,
threads::shared, n' perlthrtut.
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR, by Arthur Bergman, allows data pluggin for
interpreta threads.  See threads::shared.
.IP "\(bu" 4
\&\f(CW\*(C`Tie::File\*(C'\fR, by Mark-Jizzo Dominus, associates a Perl array wit the
linez of a gangbangin' file.  See Tie::File.
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize\*(C'\fR, by Ilya Zakharevich, serves up on-demand loaded hashes.
See Tie::Memoize.
.IP "\(bu" 4
\&\f(CW\*(C`Tie::RefHash::Nestable\*(C'\fR, by Edward Avis, allows storin hash
references (unlike tha standard Tie::RefHash)  Da module is contained
within Tie::RefHash.  See Tie::RefHash.
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR, by Douglas E. Wegscheid, serves up high resolution
timin (ualarm, usleep, n' gettimeofday).  See Time::HiRes.
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR offers a queryin intercourse ta tha Unicode Character
Database.  See Unicode::UCD.
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\*(C'\fR, by \s-1SADAHIRO\s0 Tomoyuki, implements tha \s-1UCA
\&\s0(Unicode Collation Algorithm) fo' sortin Unicode strings.
See Unicode::Collate.
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Normalize\*(C'\fR, by \s-1SADAHIRO\s0 Tomoyuki, implements tha various
Unicode normalization forms.  See Unicode::Normalize.
.IP "\(bu" 4
\&\f(CW\*(C`XS::APItest\*(C'\fR, by Slim Tim Jenness, be a test extension dat exercises \s-1XS\s0
APIs.  Currently only \f(CW\*(C`printf()\*(C'\fR is tested: how tha fuck ta output various
basic data types from \s-1XS.\s0
.IP "\(bu" 4
\&\f(CW\*(C`XS::Typemap\*(C'\fR, by Slim Tim Jenness, be a test extension dat exercises
\&\s-1XS\s0 typemaps.  Nothang gets installed yo, but tha code is worth studying
for extension writers.
.SS "Updated And Improved Modulez n' Pragmata"
.IX Subsection "Updated And Improved Modulez n' Pragmata"
.IP "\(bu" 4
Da followin independently supported modulez done been updated ta the
newest versions from \s-1CPAN: CGI, CPAN,\s0 DB_File, File::Spec, File::Temp,
Getopt::Long, Math::BigFloat, Math::BigInt, tha podlators bundle
(Pod::Man, Pod::Text), Pod::LaTeX [561+], Pod::Parser, Storable,
Term::ANSIColor, Test, Text\-Tabs+Wrap.
.IP "\(bu" 4
\&\fIattributes::reftype()\fR now works on tied arguments.
.IP "\(bu" 4
AutoLoader can now be disabled wit \f(CW\*(C`no AutoLoader;\*(C'\fR.
.IP "\(bu" 4
B::Deparse has been hella enhanced by Robin Houston. I aint talkin' bout chicken n' gravy biatch.  It can
now deparse almost all of tha standard test suite (so dat tha tests
still succeed).  There be a make target \*(L"test.deparse\*(R" fo' tryin this
out.
.IP "\(bu" 4
Carp now has betta intercourse documentation, n' tha \f(CW@CARP_NOT\fR
interface has been added ta git optionizzle control over where errors
are reported independently of \f(CW@ISA\fR, by Lil' Bow Wow Tilly.
.IP "\(bu" 4
Class::Struct can now define tha classes up in compile time.
.IP "\(bu" 4
Class::Struct now assigns tha array/hash element if tha accessor
is called wit a array/hash element as tha \fBsole\fR argument.
.IP "\(bu" 4
Da return value of \fICwd::fastcwd()\fR is now tainted.
.IP "\(bu" 4
Data::Dumper now has a option ta sort hashes.
.IP "\(bu" 4
Data::Dumper now has a option ta dump code references
usin B::Deparse.
.IP "\(bu" 4
DB_File now supports newer Berkeley \s-1DB\s0 versions, among
other improvements.
.IP "\(bu" 4
Devel::Peek now has a intercourse fo' tha Perl memory statistics
(this works only if yo ass is rockin perlz malloc, n' if you have
compiled wit debugging).
.IP "\(bu" 4
Da Gangsta module can now be used without tha inhyped performance
hit by saying
.Sp
.Vb 1
\&        use Gangsta \*(Aq\-no_match_vars\*(Aq;
.Ve
.Sp
(Assuming, of course, dat you don't need tha shitsome variables
\&\f(CW\*(C`$\`\*(C'\fR, \f(CW$&\fR, or \f(CW\*(C`$\*(Aq\*(C'\fR.)  Also, introduced \f(CW@LAST_MATCH_START\fR and
\&\f(CW@LAST_MATCH_END\fR Gangsta aliases fo' \f(CW\*(C`@\-\*(C'\fR n' \f(CW\*(C`@+\*(C'\fR.
.IP "\(bu" 4
ExtUtils::MakeMaker has been hella cleaned up n' fixed.
Da enhanced version has also been backported ta earlier releases
of Perl n' submitted ta \s-1CPAN\s0 so dat tha earlier releases can
trip off tha fixes.
.IP "\(bu" 4
Da argumentz of \fIWriteMakefile()\fR up in Makefile.PL is now checked
for sanitizzle much mo' carefully than before.  This may cause new
warnings when modulez is bein installed. Y'all KNOW dat shit, muthafucka!  See ExtUtils::MakeMaker
for mo' details.
.IP "\(bu" 4
ExtUtils::MakeMaker now uses File::Spec internally, which hopefully
leadz ta betta portability.
.IP "\(bu" 4
Fcntl, Socket, n' Sys::Syslog done been rewritten by Nicholas Clark
to use tha new-style constant dispatch section (see ExtUtils::Constant).
This means dat they is ghon be mo' robust n' hopefully faster.
.IP "\(bu" 4
File::Find now \fIchdir()\fRs erectly when chasin symbolic links. [561]
.IP "\(bu" 4
File::Find now has pre\- n' post-processin callbacks.  It also
correctly chizzlez directories when chasin symbolic links.  Callbacks
(naughtily) exitin wit \*(L"next;\*(R" instead of \*(L"return;\*(R" now work.
.IP "\(bu" 4
File::Find is now (again) reentrant.  It also has been made
more portable.
.IP "\(bu" 4
Da warnings issued by File::Find now belong ta they own category.
Yo ass can enable/disable dem wit \f(CW\*(C`use/no warnings \*(AqFile::Find\*(Aq;\*(C'\fR.
.IP "\(bu" 4
\&\fIFile::Glob::glob()\fR has been renamed ta \fIFile::Glob::bsd_glob()\fR
because tha name clashes wit tha builtin \fIglob()\fR.  Da older
name is still available fo' compatibilitizzle yo, but is deprecated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
File::Glob now supports \f(CW\*(C`GLOB_LIMIT\*(C'\fR constant ta limit tha size of
the returned list of filenames.
.IP "\(bu" 4
IPC::Open3 now allows tha use of numeric file descriptors.
.IP "\(bu" 4
IO::Socket now has a \fIatmark()\fR method, which returns legit if tha socket
is positioned all up in tha out-of-band mark.  Da method be also exportable
as a \fIsockatmark()\fR function.
.IP "\(bu" 4
IO::Socket::INET failed ta open tha specified port if tha steez name
was not known. I aint talkin' bout chicken n' gravy biatch.  It now erectly uses tha supplied port number as is. [561]
.IP "\(bu" 4
IO::Socket::INET has support fo' tha ReusePort option (if your
platform supports it).  Da Reuse option now has a alias, ReuseAddr.
For clarity, you may wanna prefer ReuseAddr.
.IP "\(bu" 4
IO::Socket::INET now supports a value of zero fo' \f(CW\*(C`LocalPort\*(C'\fR
(usually meanin dat tha operatin system will make one up.)
.IP "\(bu" 4
\&'use lib' now works identically ta \f(CW@INC\fR.  Removin directories
with 'no lib' now works.
.IP "\(bu" 4
Math::BigFloat n' Math::BigInt have undergone a gangbangin' full rewrite by Tels.
They is now magnitudes faster, n' they support various bignum
libraries like fuckin \s-1GMP\s0 n' \s-1PARI\s0 as they backends.
.IP "\(bu" 4
Math::Complex handlez inf, NaN etc., better.
.IP "\(bu" 4
Net::Pin has been considerably enhanced by Rob Brown: multihomin is
now supported, Win32 functionalitizzle is better, there is now time
measurin functionalitizzle (optionally high-resolution using
Time::HiRes), n' there is now \*(L"external\*(R" protocol which uses
Net::Ping::External module which runs yo' external pin utilitizzle and
parses tha output.  A version of Net::Ping::External be available in
\&\s-1CPAN.\s0
.Sp
Note dat a shitload of tha Net::Pin tests is disabled when hustlin
under tha Perl distribution since one cannot assume one or more
of tha following: enabled echo port at localhost, full Internet
connectivity, or sympathetic firewalls.  Yo ass can set tha environment
variable PERL_TEST_Net_Pin ta \*(L"1\*(R" (one) before hustlin tha Perl test
suite ta enable all tha Net::Pin tests.
.IP "\(bu" 4
\&\fIPOSIX::sigaction()\fR is now much mo' flexible n' robust.
Yo ass can now install coderef handlezs, '\s-1DEFAULT\s0', n' '\s-1IGNORE\s0'
handlezs, installin freshly smoked up handlezs was not atomic.
.IP "\(bu" 4
In Safe, \f(CW%INC\fR is now localised up in a Safe compartment so that
use/require work.
.IP "\(bu" 4
In SDBM_File on dosish platforms, some keys went missin cuz of
lack of support fo' filez wit \*(L"holes\*(R".  A workaround fo' tha problem
has been added.
.IP "\(bu" 4
In Search::Dict one can now gotz a pre-processin hook fo' the
lines bein searched.
.IP "\(bu" 4
Da Shell module now has a \s-1OO\s0 intercourse.
.IP "\(bu" 4
In Sys::Syslog there is now a gangbangin' failover mechanizzle dat will go
all up in alternatizzle connection mechanizzlez until tha message
is successfully logged.
.IP "\(bu" 4
Da Test module has been hella enhanced.
.IP "\(bu" 4
\&\fITime::Local::timelocal()\fR do not handle fractionizzle secondz no mo'.
Da rationale is dat neither do \fIlocaltime()\fR, n' \fItimelocal()\fR and
\&\fIlocaltime()\fR is supposed ta be inversez of each other.
.IP "\(bu" 4
Da vars pragma now supports declarin straight-up qualified variables.
(Somethang dat \f(CW\*(C`our()\*(C'\fR do not n' aint gonna support.)
.IP "\(bu" 4
Da \f(CW\*(C`utf8::\*(C'\fR name space (as up in tha pragma) serves up various
Perl-callable functions ta provide low level access ta Perl's
internal Unicode representation. I aint talkin' bout chicken n' gravy biatch.  At tha moment only \fIlength()\fR
has been implemented.
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
.IP "\(bu" 4
Emacs perl mode (emacs/cperl\-mode.el) has been updated ta version
4.31.
.IP "\(bu" 4
\&\fIemacs/e2ctags.pl\fR is now much faster.
.IP "\(bu" 4
\&\f(CW\*(C`enc2xs\*(C'\fR be a tool fo' playas addin they own encodings ta the
Encode module.
.IP "\(bu" 4
\&\f(CW\*(C`h2ph\*(C'\fR now supports C trigraphs.
.IP "\(bu" 4
\&\f(CW\*(C`h2xs\*(C'\fR now produces a template \s-1README.\s0
.IP "\(bu" 4
\&\f(CW\*(C`h2xs\*(C'\fR now uses \f(CW\*(C`Devel::PPPort\*(C'\fR fo' betta portabilitizzle between
different versionz of Perl.
.IP "\(bu" 4
\&\f(CW\*(C`h2xs\*(C'\fR uses tha freshly smoked up ExtUtils::Constant module
which will affect newly pimped extensions dat define constants.
Since tha freshly smoked up code is mo' erect (if you have two constants where the
first one be a prefix of tha second one, tha straight-up original gangsta constant \fBnever\fR
got defined), less lossy (it uses integers fo' integer constant,
as opposed ta tha oldschool code dat used floatin point numbers even for
integer constants), n' slightly faster, you might wanna consider
regeneratin yo' extension code (the freshly smoked up scheme make regenerating
easy).  h2xs now also supports C trigraphs.
.IP "\(bu" 4
\&\f(CW\*(C`libnetcfg\*(C'\fR has been added ta configure libnet.
.IP "\(bu" 4
\&\f(CW\*(C`perlbug\*(C'\fR is now much mo' robust.  It also sendz tha bug report to
perl.org, not perl.com.
.IP "\(bu" 4
\&\f(CW\*(C`perlcc\*(C'\fR has been rewritten n' its user intercourse (that is,
command line) is much mo' like dat of tha Unix C compiler, cc.
(Da perlbc tools has been removed. Y'all KNOW dat shit, muthafucka!  Use \f(CW\*(C`perlcc \-B\*(C'\fR instead.)
\&\fBNote dat perlcc is still considered straight-up experimenstrual and
unsupported.\fR [561]
.IP "\(bu" 4
\&\f(CW\*(C`perlivp\*(C'\fR be a freshly smoked up Installation Verification Procedure utility
for hustlin any time afta installin Perl.
.IP "\(bu" 4
\&\f(CW\*(C`piconv\*(C'\fR be a implementation of tha characta conversion utility
\&\f(CW\*(C`iconv\*(C'\fR, demonstratin tha freshly smoked up Encode module.
.IP "\(bu" 4
\&\f(CW\*(C`pod2html\*(C'\fR now allows specifyin a cold-ass lil cache directory.
.IP "\(bu" 4
\&\f(CW\*(C`pod2html\*(C'\fR now produces \s-1XHTML 1.0.\s0
.IP "\(bu" 4
\&\f(CW\*(C`pod2html\*(C'\fR now understandz \s-1POD\s0 freestyled rockin different line endings
(PC-like \s-1CRLF\s0 versus Unix-like \s-1LF\s0 versus MacClassic-like \s-1CR\s0).
.IP "\(bu" 4
\&\f(CW\*(C`s2p\*(C'\fR has been straight-up rewritten up in Perl.  (It be up in fact a gangbangin' full
implementation of sed up in Perl: you can use tha sed functionalitizzle by
usin tha \f(CW\*(C`psed\*(C'\fR utility.)
.IP "\(bu" 4
\&\f(CW\*(C`xsubpp\*(C'\fR now understandz \s-1POD\s0 documentation embedded up in tha *.xs
files. [561]
.IP "\(bu" 4
\&\f(CW\*(C`xsubpp\*(C'\fR now supports tha \s-1OUT\s0 keyword.
.SH "New Documentation"
.IX Header "New Documentation"
.IP "\(bu" 4
perl56delta details tha chizzlez between tha 5.005 release n' the
5.6.0 release.
.IP "\(bu" 4
perlclib documents tha internal replacements fo' standard C library
functions.  (Interestin only fo' extension writas n' Perl core
hackers.) [561+]
.IP "\(bu" 4
perldebtut be a Perl debuggin tutorial. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. [561+]
.IP "\(bu" 4
perlebcdic gotz nuff considerations fo' hustlin Perl on \s-1EBCDIC\s0
platforms. [561+]
.IP "\(bu" 4
perlintro be a gentle introduction ta Perl.
.IP "\(bu" 4
perliol documents tha internalz of PerlIO wit layers.
.IP "\(bu" 4
perlmodstyle be a steez guide fo' freestylin modules.
.IP "\(bu" 4
perlnewmod  drops some lyrics ta bout freestylin n' submittin a freshly smoked up module. [561+]
.IP "\(bu" 4
perlpacktut be a \fIpack()\fR tutorial.
.IP "\(bu" 4
perlpod has been rewritten ta be clearer n' ta record tha best
practices gathered over tha years.
.IP "\(bu" 4
perlpodspec be a mo' formal justification of tha pod format,
mainly of interest fo' writaz of pod applications, not to
people freestylin up in pod.
.IP "\(bu" 4
perlretut be a regular expression tutorial. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. [561+]
.IP "\(bu" 4
perlrequick be a regular expressions quick-start guide.
Yes, much quicker than perlretut. [561]
.IP "\(bu" 4
perltodo has been updated.
.IP "\(bu" 4
perltootc has been renamed as perltooc (to not ta conflict
with perltoot up in filesystems restricted ta \*(L"8.3\*(R" names).
.IP "\(bu" 4
perluniintro be a introduction ta rockin Unicode up in Perl.
(perlunicode is mo' of a thugged-out detailed reference n' background
information)
.IP "\(bu" 4
perlutil explains tha command line utilitizzles packaged wit tha Perl
distribution. I aint talkin' bout chicken n' gravy biatch. [561+]
.PP
Da followin platform-specific documents is available before
the installation as \s-1README.\s0\fIplatform\fR, n' afta tha installation
as perl\fIplatform\fR:
.PP
.Vb 5
\&    perlaix perlamiga perlapollo perlbeos perlbs2000
\&    perlce perlcygwin perldgux perldos perlepoc perlfreebsd perlhpux
\&    perlhurd perlirix perlmachten perlmacos perlmint perlmpeix
\&    perlnetware perlos2 perlos390 perlplan9 perlqnx perlsolaris
\&    perltru64 perluts perlvmesa perlvms perlvos perlwin32
.Ve
.PP
These documents probably detail one or mo' of tha followin subjects:
configuring, building, testing, installing, n' sometimes also using
Perl on tha holla'd platform.
.PP
Eastside Asian Perl playas is now welcomed up in they own languages:
\&\s-1README\s0.jp (Japanese), \s-1README\s0.ko (Korean), \s-1README\s0.cn (simplified
Chinese) n' \s-1README\s0.tw (traditionizzle Chinese), which is freestyled in
normal pod but encoded up in EUC-JP, EUC-KR, EUC-CN n' Big5.  These
will git installed as
.PP
.Vb 1
\&   perljp perlko perlcn perltw
.Ve
.IP "\(bu" 4
Da documentation fo' tha POSIX-BC platform is called \*(L"\s-1BS2000\*(R",\s0 ta avoid
confusion wit tha Perl \s-1POSIX\s0 module.
.IP "\(bu" 4
Da documentation fo' tha WinCE platform is called perlce (\s-1README\s0.ce
in tha source code kit), ta avoid mad drama wit tha perlwin32
documentation on 8.3\-restricted filesystems.
.SH "Performizzle Enhancements"
.IX Header "Performizzle Enhancements"
.IP "\(bu" 4
\&\fImap()\fR could git pathologically slow when tha result list it generates
is larger than tha source list.  Da performizzle has been improved for
common scenarios. [561]
.IP "\(bu" 4
\&\fIsort()\fR be also straight-up reentrant, up in tha sense dat tha sort function
can itself call \fIsort()\fR.  This did not work reliably up in previous
releases. [561]
.IP "\(bu" 4
\&\fIsort()\fR has been chizzled ta use primarily mergesort internally as
opposed ta tha earlier quicksort.  For straight-up lil' small-ass lists dis may
result up in slightly slower sortin times yo, but up in general tha speedup
should be at least 20%.  Additionizzle bonuses is dat da most thugged-out shitty case
behaviour of \fIsort()\fR is now betta (in computa science terms it now
runs up in time O(N log N), as opposed ta quicksortz Theta(N**2)
worst-case run time behaviour), n' dat \fIsort()\fR is now stable
(meanin dat elements wit identical keys will stay ordered as they
were before tha sort).  See tha \f(CW\*(C`sort\*(C'\fR pragma fo' shiznit.
.Sp
Da rap up in mo' detail: suppose you wanna serve yo ass a lil
slice of Pi.
.Sp
.Vb 1
\&    @digits = ( 3,1,4,1,5,9 );
.Ve
.Sp
A numerical sort of tha digits will yield (1,1,3,4,5,9), as expected.
Which \f(CW1\fR comes first is hard ta know, since one \f(CW1\fR looks pretty
much like any other n' shit.  Yo ass can regard dis as straight-up trivial,
or somewhat profound. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat if you just wanna sort tha even
digits ahead of tha odd ones, then what tha fuck will
.Sp
.Vb 1
\&    sort { ($a % 2) <=> ($b % 2) } @digits;
.Ve
.Sp
yield?  Da only even digit, \f(CW4\fR, will come first.  But how tha fuck about
the odd numbers, which all compare equal?  With tha quicksort algorithm
used ta implement Perl 5.6 n' earlier, tha order of tizzles is left up
to tha sort.  So, as you add mo' n' mo' digitz of Pi, tha order
in which tha sorted even n' odd digits step tha fuck up will chizzle.
and, fo' sufficiently big-ass slicez of Pi, tha quicksort algorithm
in Perl 5.8 won't return tha same thangs up in dis biatch even if reinvoked wit the
same input.  Da justification fo' dis rests wit quicksort's
worst case behavior. Shiiit, dis aint no joke.  If you run
.Sp
.Vb 1
\&   sort { $a <=> $b } ( 1 .. $N , 1 .. $N );
.Ve
.Sp
(suttin' you might approximate if you wanted ta merge two sorted
arrays rockin sort), doublin \f(CW$N\fR don't just double tha quicksort time,
it \fIquadruples\fR dat shit.  Quicksort has a most shitty case run time dat can
grow like N**2, so-called \fIquadratic\fR behaviour, n' it can happen
on patterns dat may well arise up in aiiight use.  Yo ass won't notice this
for lil' small-ass arrays yo, but you \fIwill\fR notice it wit larger arrays,
and you may not live long enough fo' tha sort ta complete on arrays
of a mazillion elements, n' you can put dat on yo' toast.  So tha 5.8 quicksort scramblez big-ass arrays
before sortin them, as a statistical defence against quadratic behaviour.
But dat means if you sort tha same big-ass array twice, tizzles may be
broken up in different ways.
.Sp
Because of tha unpredictabilitizzle of tie-breakin order, n' tha quadratic
worst-case behaviour, quicksort was \fIalmost\fR replaced straight-up with
a stable mergesort.  \fIStable\fR means dat tizzles is fucked up ta preserve
the original gangsta order of appearizzle up in tha input array.  So
.Sp
.Vb 1
\&    sort { ($a % 2) <=> ($b % 2) } (3,1,4,1,5,9);
.Ve
.Sp
will yield (4,3,1,1,5,9), guaranteed. Y'all KNOW dat shit, muthafucka!  Da even n' odd numbers
appear up in tha output up in tha same order they rocked up in tha input.
Mergesort has most shitty case O(N log N) behaviour, tha dopest value
attainable.  And, ironically, dis mergesort do particularly
well where quicksort goes quadratic:  mergesort sorts (1..$N, 1..$N)
in O(N) time.  But quicksort was rescued all up in tha last moment cuz
it is fasta than mergesort on certain inputs n' platforms.
For example, if you straight-up \fIdon't\fR care bout tha order of even
and odd digits, quicksort will run up in O(N) time; itz straight-up good
at sortin nuff repetitionz of a lil' small-ass number of distinct elements.
Da quicksort divide n' conquer game works well on platforms
with relatively small, straight-up fast, caches.  Eventually, tha problem gets
whittled down ta one dat fits up in tha cache, from which point it
benefits from tha increased memory speed.
.Sp
Quicksort was rescued by implementin a sort pragma ta control aspects
of tha sort.  Da \fBstable\fR subpragma forces stable behaviour,
regardless of algorithm.  Da \fB_quicksort\fR n' \fB_mergesort\fR
subpragmas is heavy-handed ways ta select tha underlyin implementation.
Da leadin \f(CW\*(C`_\*(C'\fR be a reminder dat these subpragmas may not survive
beyond 5.8.  Mo' appropriate mechanizzlez fo' selectin tha implementation
exist yo, but they wouldn't have arrived up in time ta save quicksort.
.IP "\(bu" 4
Hashes now use Bob Jenkins \*(L"One-at-a-Time\*(R" hashin key algorithm
( http://burtleburtle.net/bob/hash/doobs.html ).  This algorithm is
reasonably fast while producin a much betta spread of joints than
the oldschool hashin algorithm (originally by Chris Torek, lata tweaked by
Ilya Zakharevich).  Hash joints output from tha algorithm on a hash of
all 3\-char printable \s-1ASCII\s0 keys comes much closer ta passin the
\&\s-1DIEHARD\s0 random number generation tests, n' you can put dat on yo' toast.  Accordin ta perlbench, this
change has not affected tha overall speed of Perl.
.IP "\(bu" 4
\&\fIunshift()\fR should now be noticeably faster.
.SH "Installation n' Configuration Improvements"
.IX Header "Installation n' Configuration Improvements"
.SS "Generic Improvements"
.IX Subsection "Generic Improvements"
.IP "\(bu" 4
\&\s-1INSTALL\s0 now explains how tha fuck you can configure Perl ta use 64\-bit
integers even on non\-64\-bit platforms.
.IP "\(bu" 4
Policy.sh policy chizzle: if yo ass is reusin a Policy.sh file
(see \s-1INSTALL\s0) n' you use Configure \-Dprefix=/foo/bar n' up in tha old
Policy \f(CW$prefix\fR eq \f(CW$siteprefix\fR n' \f(CW$prefix\fR eq \f(CW$vendorprefix\fR, all of
them will now be chizzled ta tha freshly smoked up prefix, /foo/bar. Shiiit, dis aint no joke.  (Previously
only \f(CW$prefix\fR chizzled.)  If you do not like dis freshly smoked up behaviour,
specify prefix, cribprefix, n' vendorprefix explicitly.
.IP "\(bu" 4
A freshly smoked up optionizzle location fo' Perl libraries, otherlibdirs, be available.
It can be used fo' example fo' vendor add-ons without disturbin Perl's
own library directories.
.IP "\(bu" 4
In nuff platforms, tha vendor-supplied 'cc' is too stripped-down to
build Perl (basically, 'cc' don't do \s-1ANSI C\s0).  If dis seems
to be tha case n' 'cc' do not seem ta be tha \s-1GNU C\s0 compiler
\&'gcc', a automatic attempt is made ta find n' use 'gcc' instead.
.IP "\(bu" 4
gcc need ta closely track tha operatin system release ta avoid
build problems. If Configure findz dat gcc was built fo' a gangbangin' finger-lickin' different
operatin system release than is hustlin, it now gives a cold-ass lil clearly visible
warnin dat there may be shiznit ahead.
.IP "\(bu" 4
Since Perl 5.8 aint binary-compatible wit previous releases
of Perl, Configure no longer suggests includin tha 5.005
modulez up in \f(CW@INC\fR.
.IP "\(bu" 4
Configure \f(CW\*(C`\-S\*(C'\fR can now run non-interactively. [561]
.IP "\(bu" 4
Configure support fo' pdp11\-style memory models has been removed due
to obsolescence. [561]
.IP "\(bu" 4
configure.gnu now works wit options wit whitespace up in em.
.IP "\(bu" 4
installperl now outputs every last muthafuckin thang ta \s-1STDERR.\s0
.IP "\(bu" 4
Because PerlIO is now tha default on most platforms, \*(L"\-perlio\*(R" don't
get appended ta tha \f(CW$Config\fR{archname} (also known as $^O) no mo'.
Instead, if you explicitly chizzle not ta use perlio (Configure command
line option \-Uuseperlio), yo big-ass booty is ghon git \*(L"\-stdio\*(R" appended.
.IP "\(bu" 4
Another chizzle related ta tha architecture name is dat \*(L"\-64all\*(R"
(\-Duse64bitall, or \*(L"maximally 64\-bit\*(R") be appended only if your
pointas is 64 bits wide.  (To be exact, tha use64bitall is ignored.)
.IP "\(bu" 4
In \s-1AFS\s0 installations, one can configure tha root of tha \s-1AFS\s0 ta be
somewhere else than tha default \fI/afs\fR by rockin tha Configure
parameta \f(CW\*(C`\-Dafsroot=/some/where/else\*(C'\fR.
.IP "\(bu" 4
\&\s-1APPLLIB_EXP,\s0 a lesser-known configuration-time definition, has been
documented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It can be used ta prepend crib-specific directories
to Perlz default search path (@INC); peep \s-1INSTALL\s0 fo' shiznit.
.IP "\(bu" 4
Da version of Berkeley \s-1DB\s0 used when tha Perl (and, presumably, the
DB_File extension) was built is now available as
\&\f(CW@Config{qw(db_version_major db_version_minor db_version_patch)}\fR
from Perl n' as \f(CW\*(C`DB_VERSION_MAJOR_CFG DB_VERSION_MINOR_CFG
DB_VERSION_PATCH_CFG\*(C'\fR from C.
.IP "\(bu" 4
Buildin Berkeley \s-1DB3\s0 fo' compatibilitizzle modes fo' \s-1DB, NDBM,\s0 n' \s-1ODBM\s0
has been documented up in \s-1INSTALL.\s0
.IP "\(bu" 4
If you have \s-1CPAN\s0 access (either network or a local copy like fuckin a
CD-ROM) you can durin specify extra modulez ta Configure ta build and
install wit Perl rockin tha \-Dextras=...  option. I aint talkin' bout chicken n' gravy biatch.  See \s-1INSTALL\s0 for
more details.
.IP "\(bu" 4
In addizzle ta config.over, a freshly smoked up override file, config.arch, is
available.  This file is supposed ta be used by hints file writers
for architecture-wide chizzlez (as opposed ta config.over which is
for crib-wide chizzles).
.IP "\(bu" 4
If yo' file system supports symbolic links, you can build Perl outside
of tha source directory by
.Sp
.Vb 3
\&        mkdir perl/build/directory
\&        cd perl/build/directory
\&        sh /path/to/perl/source/Configure \-Dmksymlinks ...
.Ve
.Sp
This will create up in perl/build/directory a tree of symbolic links
pointin ta filez up in /path/to/perl/source.  Da original gangsta filez is left
unaffected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Afta Configure has finished, you can just say
.Sp
.Vb 1
\&        make all test
.Ve
.Sp
and Perl is ghon be built n' tested, all up in perl/build/directory.
[561]
.IP "\(bu" 4
For Perl pimpers, nuff muthafuckin freshly smoked up make targets fo' profiling
and debuggin done been added; peep perlhack.
.RS 4
.IP "\(bu" 8
Use of tha \fIgprof\fR tool ta flava Perl has been documented in
perlhack.  There be a make target called \*(L"perl.gprof\*(R" for
generatin a gprofiled Perl executable.
.IP "\(bu" 8
If you have \s-1GCC 3,\s0 there be a make target called \*(L"perl.gcov\*(R" for
bustin a gcoved Perl executable fo' coverage analysis.  See
perlhack.
.IP "\(bu" 8
If yo ass is on \s-1IRIX\s0 or Tru64 platforms, freshly smoked up profiling/debuggin options
have been added; peep perlhack fo' mo' shiznit bout pixie and
Third Degree.
.RE
.RS 4
.RE
.IP "\(bu" 4
Guidelinez of how tha fuck ta construct minimal Perl installations have
been added ta \s-1INSTALL.\s0
.IP "\(bu" 4
Da Thread extension is now not built at all under ithreads
(\f(CW\*(C`Configure \-Duseithreads\*(C'\fR) cuz it wouldn't work anyway (the
Thread extension requires bein Configured wit \f(CW\*(C`\-Duse5005threads\*(C'\fR).
.Sp
\&\fBNote dat tha 5.005 threadz is unsupported n' deprecated: if you
have code freestyled fo' tha oldschool threadz you should migrate it ta the
new ithreadz model.\fR
.IP "\(bu" 4
Da Gconvert macro ($Config{d_Gconvert}) used by perl fo' stringifying
floating-point numbers is now mo' picky bout rockin sprintf %.*g
rulez fo' tha conversion. I aint talkin' bout chicken n' gravy biatch.  Some platforms dat used ta use gcvt may
now resort ta tha slower sprintf.
.IP "\(bu" 4
Da obsolete method of bustin a special (e.g., debugging) flavor
of perl by saying
.Sp
.Vb 1
\&        make LIBPERL=libperld.a
.Ve
.Sp
has been removed. Y'all KNOW dat shit, muthafucka! Use \-DDEBUGGING instead.
.SS "New Or Improved Platforms"
.IX Subsection "New Or Improved Platforms"
For tha list of platforms known ta support Perl,
see \*(L"Supported Platforms\*(R" up in perlport.
.IP "\(bu" 4
\&\s-1AIX\s0 dynamic loadin should be now betta supported.
.IP "\(bu" 4
\&\s-1AIX\s0 should now work betta wit gcc, threads, n' 64\-bitness.  Also the
long doublez support up in \s-1AIX\s0 should be betta now, nahmeean?  See perlaix.
.IP "\(bu" 4
AtheOS ( http://www.atheos.cx/ ) be a freshly smoked up platform.
.IP "\(bu" 4
BeOS has been reclaimed.
.IP "\(bu" 4
Da \s-1DG/UX\s0 platform now supports 5.005\-style threads.
See perldgux.
.IP "\(bu" 4
Da DYNIX/ptx platform (also known as dynixptx) is supported at or
near osvers 4.5.2.
.IP "\(bu" 4
\&\s-1EBCDIC\s0 platforms (z/OS (also known as \s-1OS/390\s0), POSIX-BC, n' \s-1VM/ESA\s0)
have been regained. Y'all KNOW dat shit, muthafucka!  Many test suite tests still fail n' the
co-existence of Unicode n' \s-1EBCDIC\s0 aint like settled yo, but the
situation is much betta than wit Perl 5.6.  See perlos390,
perlbs2000 (for POSIX-BC), n' perlvmesa fo' mo' shiznit.
(\fBNote:\fR support fo' \s-1VM/ESA\s0 was removed up in Perl v5.18.0. Da relevant
information was up in \fI\s-1README\s0.vmesa\fR)
.IP "\(bu" 4
Buildin perl wit \-Duseithreadz or \-Duse5005threadz now works under
HP-UX 10.20 (previously it only hit dat shiznit under 10.30 or later). Yo ass will
need a thread library package installed. Y'all KNOW dat shit, muthafucka! See \s-1README\s0.hpux. [561]
.IP "\(bu" 4
Mac \s-1OS\s0 Funky-Ass is now supported up in tha mainstream source package
(MacPerl haz of course been available since perl 5.004 but now the
source code basez of standard Perl n' MacPerl done been synchronised)
[561]
.IP "\(bu" 4
Mac \s-1OS X \s0(or Darwin) should now be able ta build Perl even on \s-1HFS+\s0
filesystems.  (Da case-insensitivitizzle used ta confuse tha Perl build
process.)
.IP "\(bu" 4
\&\s-1NCR\s0 MP-RAS is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
All tha NetBSD specific patches (except fo' tha installation
specific ones) done been merged back ta tha main distribution.
.IP "\(bu" 4
NetWare from Novell is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See perlnetware.
.IP "\(bu" 4
NonStop-UX is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
\&\s-1NEC\s0 SUPER-UX is now supported.
.IP "\(bu" 4
All tha OpenBSD specific patches (except fo' tha installation
specific ones) done been merged back ta tha main distribution.
.IP "\(bu" 4
Perl has been tested wit tha \s-1GNU\s0 pth userlevel thread package
( http://www.gnu.org/software/pth/pth.html ).  All thread tests
of Perl now work yo, but not without addin some \fIyield()\fRs ta tha tests,
so while pth (and other userlevel thread implementations) can be
considered ta be \*(L"working\*(R" wit Perl ithreads, keep up in mind the
possible non-preemptabilitizzle of tha underlyin thread implementation.
.IP "\(bu" 4
Stratus \s-1VOS\s0 is now supported rockin Perlz natizzle build method
(Configure).  This is tha recommended method ta build Perl on
\&\s-1VOS. \s0 Da olda methods, which build miniperl, is still
available.  See perlvos. [561+]
.IP "\(bu" 4
Da Amdahl \s-1UTS\s0 Unix mainframe platform is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
WinCE is now supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See perlce.
.IP "\(bu" 4
z/OS (formerly known as \s-1OS/390,\s0 formerly known as \s-1MVS OE\s0) now has
support fo' dynamic loading.  This aint selected by default,
however, you must specify \-Dusedl up in tha argumentz of Configure. [561]
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Numerous memory leaks n' uninitialized memory accesses have been
hunted down. I aint talkin' bout chicken n' gravy biatch.  Most blinginly, anonymous subs used ta leak quite
a bit. [561]
.IP "\(bu" 4
Da autouse pragma didn't work fo' Multi::Part::Function::Names.
.IP "\(bu" 4
\&\fIcaller()\fR could cause core dumps up in certain thangs.  Carp was
sometimes affected by dis problem.  In particular, \fIcaller()\fR now
returns a subroutine name of \f(CW\*(C`(unknown)\*(C'\fR fo' subroutines dat have
been removed from tha symbol table.
.IP "\(bu" 4
chop(@list) up in list context returned tha charactas chopped in
reverse order n' shit.  This has been reversed ta be up in tha right order n' shit. [561]
.IP "\(bu" 4
Configure no longer includes tha \s-1DBM\s0 libraries (dbm, gdbm, db, ndbm)
when buildin tha Perl binary.  Da only exception ta dis is SunOS 4.x,
which needz em. [561]
.IP "\(bu" 4
Da behaviour of non-decimal but numeric strang constants such as
\&\*(L"0x23\*(R" was platform-dependent: up in some platforms dat was peeped as 35,
in some as 0, up in some as a gangbangin' floatin point number (don't ask).  This
was caused by Perlz rockin tha operatin system libraries up in a thang
where tha result of tha strang ta number conversion is undefined: now
Perl consistently handlez such strings as zero up in numeric contexts.
.IP "\(bu" 4
Several debugger fixes: exit code now reflects tha script exit code,
condizzle \f(CW"0"\fR now treated erectly, tha \f(CW\*(C`d\*(C'\fR command now checks
line number, \f(CW$.\fR no longer gets corrupted, n' all debugger output
now goes erectly ta tha socket if RemotePort is set. [561]
.IP "\(bu" 4
Da debugger (perl5db.pl) has been modified ta present a more
consistent commandz intercourse, via (CommandSet=580).  perl5db.t was
also added ta test tha chizzles, n' as a placeholda fo' further tests.
.Sp
See perldebug.
.IP "\(bu" 4
Da debugger has a freshly smoked up \f(CW\*(C`dumpDepth\*(C'\fR option ta control tha maximum
depth ta which nested structures is dumped. Y'all KNOW dat shit, muthafucka!  Da \f(CW\*(C`x\*(C'\fR command has
been extended so dat \f(CW\*(C`x N EXPR\*(C'\fR dumps up tha value of \fI\s-1EXPR\s0\fR ta a
depth of at most \fIN\fR levels.
.IP "\(bu" 4
Da debugger can now show lexical variablez if you have tha \s-1CPAN\s0
module PadWalker installed.
.IP "\(bu" 4
Da order of DESTROYs has been made mo' predictable.
.IP "\(bu" 4
Perl 5.6.0 could emit spurious warnings bout redefinizzle of
\&\fIdl_error()\fR when statically buildin extensions tha fuck into perl.
This has been erected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
dprofpp \-R didn't work.
.IP "\(bu" 4
\&\f(CW*foo{FORMAT}\fR now works.
.IP "\(bu" 4
Infinitizzle is now recognized as a number.
.IP "\(bu" 4
UNIVERSAL::isa no longer caches methodz incorrectly.  (This broke
the Tk extension wit 5.6.0.) [561]
.IP "\(bu" 4
Lexicals I: lexicals outside a eval "\*(L" weren't resolved
correctly inside a subroutine definizzle inside tha eval \*(R"\*(L" if they
were not already referenced up in tha top level of tha eval\*(R""ed code.
.IP "\(bu" 4
Lexicals \s-1II:\s0 lexicals leaked at file scope tha fuck into subroutines that
were declared before tha lexicals.
.IP "\(bu" 4
Lexical warnings now propagatin erectly between scopes
and tha fuck into \f(CW\*(C`eval "..."\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`use warnings qw(FATAL all)\*(C'\fR did not work as intended. Y'all KNOW dat shit, muthafucka!  This has been
corrected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
\&\fIwarnings::enabled()\fR now reports tha state of $^W erectly if tha caller
aint rockin lexical warnings. [561]
.IP "\(bu" 4
Line renumberin wit eval n' \f(CW\*(C`#line\*(C'\fR now works. [561]
.IP "\(bu" 4
Fixed a shitload of memory leaks, especially up in eval "".
.IP "\(bu" 4
Localised tied variablez no longer leak memory
.Sp
.Vb 2
\&    use Tie::Hash;
\&    tie mah %tied_hash => \*(AqTie::StdHash\*(Aq;
\&
\&    ...
\&
\&    # Used ta leak memory every last muthafuckin time local() was called;
\&    # up in a loop, dis added up.
\&    local($tied_hash{Foo}) = 1;
.Ve
.IP "\(bu" 4
Localised hash elements (and \f(CW%ENV\fR) is erectly unlocalised ta not
exist, if they didn't before they was localised.
.Sp
.Vb 2
\&    use Tie::Hash;
\&    tie mah %tied_hash => \*(AqTie::StdHash\*(Aq;
\&
\&    ...
\&
\&    # Nothang has set tha FOO element so far
\&
\&    { local $tied_hash{FOO} = \*(AqBar\*(Aq }
\&
\&    # This used ta print yo, but not now, nahmeean?
\&    print "exists!\en" if exists $tied_hash{FOO};
.Ve
.Sp
As a side effect of dis fix, tied hash intercourses \fBmust\fR define
the \s-1EXISTS\s0 n' \s-1DELETE\s0 methods.
.IP "\(bu" 4
\&\fImkdir()\fR now ignores trailin slashes up in tha directory name,
as mandated by \s-1POSIX.\s0
.IP "\(bu" 4
Some versionz of glibc gotz a gangbangin' fucked up \fImodfl()\fR.  This affects builds
with \f(CW\*(C`\-Duselongdouble\*(C'\fR.  This version of Perl detects dis brokenness
and has a workaround fo' dat shit.  Da glibc release 2.2.2 is known ta have
fixed tha \fImodfl()\fR bug.
.IP "\(bu" 4
Moduluz of unsigned numbers now works (4063328477 % 65535 used to
return 27406, instead of 27047). [561]
.IP "\(bu" 4
Some \*(L"not a number\*(R" warnings introduced up in 5.6.0 eliminated ta be
more compatible wit 5.005.  Infinitizzle is now recognised as a number n' shit. [561]
.IP "\(bu" 4
Numeric conversions did not recognize chizzlez up in tha strang value
properly up in certain circumstances. [561]
.IP "\(bu" 4
Attributes (like fuckin :shared) didn't work wit \fIour()\fR.
.IP "\(bu" 4
\&\fIour()\fR variablez aint gonna cause bogus \*(L"Variable aint gonna stay shared\*(R"
warnings. [561]
.IP "\(bu" 4
\&\*(L"our\*(R" variablez of tha same name declared up in two siblin blocks
resulted up in bogus warnings bout \*(L"redeclaration\*(R" of tha variables.
Da problem has been erected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
pack \*(L"Z\*(R" now erectly terminates tha strang wit \*(L"\e0\*(R".
.IP "\(bu" 4
Fix password routines which up in some shadow password platforms
(e.g yo. HP-UX) caused \fIgetpwent()\fR ta return every last muthafuckin other entry.
.IP "\(bu" 4
Da \s-1PERL5OPT\s0 environment variable (for passin command line arguments
to Perl) didn't work fo' mo' than a single crew of options. [561]
.IP "\(bu" 4
\&\s-1PERL5OPT\s0 wit embedded spaces didn't work.
.IP "\(bu" 4
\&\fIprintf()\fR no longer resets tha numeric locale ta \*(L"C\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`qw(a\e\eb)\*(C'\fR now parses erectly as \f(CW\*(Aqa\e\eb\*(Aq\fR: dat is, as three
characters, not four. Shiiit, dis aint no joke. [561]
.IP "\(bu" 4
\&\fIpos()\fR did not return tha erect value within s///ge up in earlier
versions.  This is now handled erectly. [561]
.IP "\(bu" 4
Printin quadz (64\-bit integers) wit printf/sprintf now works
without tha q L ll prefixes (assumin yo ass is on a quad-capable platform).
.IP "\(bu" 4
Regular expressions on references n' overloaded scalars now work. [561+]
.IP "\(bu" 4
Right-hand side magic (\s-1GMAGIC\s0) could up in nuff cases like fuckin string
concatenation be invoked too nuff times.
.IP "\(bu" 4
\&\fIscalar()\fR now forces scalar context even when used up in void context.
.IP "\(bu" 4
\&\s-1SOCKS\s0 support is now much mo' robust.
.IP "\(bu" 4
\&\fIsort()\fR arguments is now compiled up in tha right wantarray context
(they was accidentally rockin tha context of tha \fIsort()\fR itself).
Da comparison block is now run up in scalar context, n' tha arguments
to be sorted is always provided list context. [561]
.IP "\(bu" 4
Changed tha \s-1POSIX\s0 characta class \f(CW\*(C`[[:space:]]\*(C'\fR ta include tha (very
rarely used) vertical tab character n' shit.  Added a freshly smoked up POSIX-ish character
class \f(CW\*(C`[[:blank:]]\*(C'\fR which standz fo' horizontal whitespace
(currently, tha space n' tha tab).
.IP "\(bu" 4
Da taintin behaviour of \fIsprintf()\fR has been rationalized. Y'all KNOW dat shit, muthafucka!  It do
not taint tha result of floatin point formats no mo', makin the
behaviour consistent wit dat of strang interpolation. I aint talkin' bout chicken n' gravy biatch. [561]
.IP "\(bu" 4
Some casez of inconsistent taint propagation (like fuckin within hash
values) done been fixed.
.IP "\(bu" 4
Da \s-1RE\s0 engine found up in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These is now handled mo' betta n' shit. [561]
.IP "\(bu" 4
Regular expression debug output (whether all up in \f(CW\*(C`use re \*(Aqdebug\*(Aq\*(C'\fR
or via \f(CW\*(C`\-Dr\*(C'\fR) now looks mo' betta n' shit. [561]
.IP "\(bu" 4
Multi-line matches like \f(CW\*(C`"a\enxb\en" =~ /(?!\eA)x/m\*(C'\fR was flawed. Y'all KNOW dat shit, muthafucka!  The
bug has been fixed. Y'all KNOW dat shit, muthafucka! [561]
.IP "\(bu" 4
Use of $& could trigger a cold-ass lil core dump under some thangs.  This
is now avoided. Y'all KNOW dat shit, muthafucka! [561]
.IP "\(bu" 4
Da regular expression captured submatches ($1, \f(CW$2\fR, ...) is now
more consistently unset if tha match fails, instead of leavin false
data lyin round up in em. [561]
.IP "\(bu" 4
\&\fIreadline()\fR on filez opened up in \*(L"slurp\*(R" mode could return a extra
"" (blank line) all up in tha end up in certain thangs.  This has been
corrected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 4
Autovivification of symbolic referencez of special variablez busted lyrics about
in perlvar (as up in \f(CW\*(C`${$num}\*(C'\fR) was accidentally disabled. Y'all KNOW dat shit, muthafucka!  This works
again now, nahmeean? [561]
.IP "\(bu" 4
Sys::Syslog ignored tha \f(CW\*(C`LOG_AUTH\*(C'\fR constant.
.IP "\(bu" 4
\&\f(CW$AUTOLOAD\fR, \fIsort()\fR, \fIlock()\fR, n' spawnin subprocesses
in multiple threadz simultaneously is now thread-safe.
.IP "\(bu" 4
Tie::Arrayz \s-1SPLICE\s0 method was broken.
.IP "\(bu" 4
Allow a read-only strang on tha left-hand side of a non-modifyin tr///.
.IP "\(bu" 4
If \f(CW\*(C`STDERR\*(C'\fR is tied, warnings caused by \f(CW\*(C`warn\*(C'\fR n' \f(CW\*(C`die\*(C'\fR now
correctly pass ta dat shit.
.IP "\(bu" 4
Several Unicode fixes.
.RS 4
.IP "\(bu" 8
BOMs (byte order marks) all up in tha beginnin of Perl files
(scripts, modules) should now be transparently skipped.
\&\s-1UTF\-16\s0 n' \s-1UCS\-2\s0 encoded Perl filez should now be read erectly.
.IP "\(bu" 8
Da characta tablez done been updated ta Unicode 3.2.0.
.IP "\(bu" 8
Comparin wit utf8 data do not magically upgrade non\-utf8 data
into utf8.  (This was a problem fo' example if you was mixin data
from I/O n' Unicode data: yo' output might have gots magically encoded
as \s-1UTF\-8.\s0)
.IP "\(bu" 8
Generatin illegal Unicode code points like fuckin U+FFFE, or tha \s-1UTF\-16\s0
surrogates, now also generates a optionizzle warning.
.IP "\(bu" 8
\&\f(CW\*(C`IsAlnum\*(C'\fR, \f(CW\*(C`IsAlpha\*(C'\fR, n' \f(CW\*(C`IsWord\*(C'\fR now match titlecase.
.IP "\(bu" 8
Concatenation wit tha \f(CW\*(C`.\*(C'\fR operator or via variable interpolation,
\&\f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`reverse\*(C'\fR, \f(CW\*(C`quotemeta\*(C'\fR, tha \f(CW\*(C`x\*(C'\fR operator,
substitution wit \f(CW\*(C`s///\*(C'\fR, single-quoted \s-1UTF\-8,\s0 should now work.
.IP "\(bu" 8
Da \f(CW\*(C`tr///\*(C'\fR operator now works.  Note dat tha \f(CW\*(C`tr///CU\*(C'\fR
functionalitizzle has been removed (but peep pack('U0', ...)).
.IP "\(bu" 8
\&\f(CW\*(C`eval "v200"\*(C'\fR now works.
.IP "\(bu" 8
Perl 5.6.0 parsed m/\ex{ab}/ incorrectly, leadin ta spurious warnings.
This has been erected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. [561]
.IP "\(bu" 8
Zero entries was missin from tha Unicode classes like fuckin \f(CW\*(C`IsDigit\*(C'\fR.
.RE
.RS 4
.RE
.IP "\(bu" 4
Big-Ass unsigned numbers (those above 2**31) could sometimes lose their
unsignedness, causin bogus thangs up in dis biatch up in arithmetic operations. [561]
.IP "\(bu" 4
Da Perl parser has been stress tested rockin both random input and
Markov chain input n' tha few found crashes n' lockups have been
fixed.
.SS "Platform Specific Chizzlez n' Fixes"
.IX Subsection "Platform Specific Chizzlez n' Fixes"
.IP "\(bu" 4
\&\s-1BSDI 4\s0.*
.Sp
Perl now works on post\-4.0 BSD/OSes.
.IP "\(bu" 4
All BSDs
.Sp
Settin \f(CW$0\fR now works (as much as possible; peep perlvar fo' details).
.IP "\(bu" 4
Cygwin
.Sp
Numerous thugged-out shit; currently synchronised wit Cygwin 1.3.10.
.IP "\(bu" 4
Previously DYNIX/ptx had problems up in its Configure probe fo' non-blockin I/O.
.IP "\(bu" 4
\&\s-1EPOC\s0
.Sp
\&\s-1EPOC\s0 now betta supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See \s-1README\s0.epoc. [561]
.IP "\(bu" 4
FreeBSD 3.*
.Sp
Perl now works on post\-3.0 FreeBSDs.
.IP "\(bu" 4
HP-UX
.Sp
\&\s-1README\s0.hpux updated; \f(CW\*(C`Configure \-Duse64bitall\*(C'\fR now works;
now uses HP-UX malloc instead of Perl malloc.
.IP "\(bu" 4
\&\s-1IRIX\s0
.Sp
Numerous compilation flag n' hint enhancements; accidental mixing
of 32\-bit n' 64\-bit libraries (a doomed attempt) made much harder.
.IP "\(bu" 4
Linux
.RS 4
.IP "\(bu" 8
Long doublez should now work (see \s-1INSTALL\s0). [561]
.IP "\(bu" 8
Linux previously had problems related ta sockaddrlen when using
\&\fIaccept()\fR, \fIrecvfrom()\fR (in Perl: \fIrecv()\fR), \fIgetpeername()\fR, and
\&\fIgetsockname()\fR.
.RE
.RS 4
.RE
.IP "\(bu" 4
Mac \s-1OS\s0 Classic
.Sp
Compilation of tha standard Perl distribution up in Mac \s-1OS\s0 Funky-Ass should
now work if you have tha Metrowerks pimpment environment n' the
missin Mac-specific toolkit bits, n' you can put dat on yo' toast.  Contact tha macperl mailin list
for details.
.IP "\(bu" 4
MPE/iX
.Sp
MPE/iX update afta Perl 5.6.0.  See \s-1README\s0.mpeix. [561]
.IP "\(bu" 4
NetBSD/threads: try installin tha \s-1GNU\s0 pth (should be up in the
packages collection, or http://www.gnu.org/software/pth/),
and Configure wit \-Duseithreads.
.IP "\(bu" 4
NetBSD/sparc
.Sp
Perl now works on NetBSD/sparc.
.IP "\(bu" 4
\&\s-1OS/2\s0
.Sp
Now works wit usethreadz (see \s-1INSTALL\s0). [561]
.IP "\(bu" 4
Solaris
.Sp
64\-bitnizz rockin tha Sun Workshop compila now works.
.IP "\(bu" 4
Stratus \s-1VOS\s0
.Sp
Da natizzle build method requires at least \s-1VOS\s0 Release 14.5.0
and \s-1GNU \*(C+/GNU\s0 Tools 2.0.1 or later n' shit.  Da Perl pack function
now maps overflowed joints ta +infinitizzle n' underflowed joints
to \-infinity.
.IP "\(bu" 4
Tru64 (aka Digital \s-1UNIX,\s0 aka \s-1DEC OSF/1\s0)
.Sp
Da operatin system version letta now recorded up in \f(CW$Config\fR{osvers}.
Allow compilin wit gcc (previously explicitly forbidden).  Compiling
with gcc still not recommended cuz buggy code thangs up in dis biatch, even with
gcc 2.95.2.
.IP "\(bu" 4
Unicos
.Sp
Fixed various alignment problems dat lead tha fuck into core dumps either
durin build or later; no longer takes a thugged-out dirt nap on math errors at runtime;
now rockin full quad integers (64 bits), previously was using
only 46 bit integers fo' speed.
.IP "\(bu" 4
\&\s-1VMS\s0
.Sp
See \*(L"Socket Extension Dynamic up in \s-1VMS\*(R"\s0 n' \*(L"IEEE-format Floatin Point
Default on OpenVMS Alpha\*(R" fo' blingin chizzlez not otherwise listed here.
.Sp
\&\fIchdir()\fR now works betta despite a \s-1CRT\s0 bug; now works wit \s-1MULTIPLICITY
\&\s0(see \s-1INSTALL\s0); now works wit Perlz malloc.
.Sp
Da taintin of \f(CW%ENV\fR elements via \f(CW\*(C`keys\*(C'\fR or \f(CW\*(C`values\*(C'\fR was previously
unimplemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It now works as documented.
.Sp
Da \f(CW\*(C`waitpid\*(C'\fR emulation has been improved. Y'all KNOW dat shit, muthafucka!  Da most shitty bug (now fixed)
was dat a pid of \-1 would cause a wildcard search of all processes on
the system.
.Sp
POSIX-style signals is now emulated much betta on \s-1VMS\s0 versions prior
to 7.0.
.Sp
Da \f(CW\*(C`system\*(C'\fR function n' backticks operator have improved
functionalitizzle n' betta error handling. [561]
.Sp
File access tests now use current process privileges rather than the
userz default privileges, which could sometimes result up in a mismatch
between reported access n' actual access.  This improvement is only
available on \s-1VMS\s0 v6.0 n' later.
.Sp
There be a freshly smoked up \f(CW\*(C`kill\*(C'\fR implementation based on \f(CW\*(C`sys$sigprc\*(C'\fR dat allows
olda \s-1VMS\s0 systems (pre\-7.0) ta use \f(CW\*(C`kill\*(C'\fR ta bust signals rather than
simply force exit.  This implementation also allows lata systems to
call \f(CW\*(C`kill\*(C'\fR from within a signal handlez.
.Sp
Iteratizzle logical name translations is now limited ta 10 iterations in
imitation of \s-1SHOW LOGICAL\s0 n' other OpenVMS facilities.
.IP "\(bu" 4
Windows
.RS 4
.IP "\(bu" 8
Signal handlin now works betta than it used to.  It be now implemented
usin a Windows message loop, n' is therefore less prone ta random
crashes.
.IP "\(bu" 8
\&\fIfork()\fR emulation is now mo' robust yo, but still continues ta git a gangbangin' few
esoteric bugs n' caveats, n' you can put dat on yo' toast.  See perlfork fo' details. [561+]
.IP "\(bu" 8
A failed (pseudo)fork now returns undef n' sets errno ta \s-1EAGAIN.\s0 [561]
.IP "\(bu" 8
Da followin modulez now work on Windows:
.Sp
.Vb 4
\&    ExtUtils::Embed         [561]
\&    IO::Pipe
\&    IO::Poll
\&    Net::Ping
.Ve
.IP "\(bu" 8
\&\fIIO::File::new_tmpfile()\fR is no longer limited ta 32767 invocations
per-process.
.IP "\(bu" 8
Betta \fIchdir()\fR return value fo' a non-existent directory.
.IP "\(bu" 8
Compilin perl rockin tha 64\-bit Platform \s-1SDK\s0 tools is now supported.
.IP "\(bu" 8
Da \fIWin32::SetChildShowWindow()\fR builtin can be used ta control the
visibilitizzle of windows pimped by lil pimp processes.  See Win32 for
details.
.IP "\(bu" 8
Non-blockin waits fo' lil pimp processes (or pseudo-processes) are
supported via \f(CW\*(C`waitpid($pid, &POSIX::WNOHANG)\*(C'\fR.
.IP "\(bu" 8
Da behavior of \fIsystem()\fR wit multiple arguments has been rationalized.
Each unquoted argument is ghon be automatically quoted ta protect whitespace,
and any existin whitespace up in tha arguments is ghon be preserved. Y'all KNOW dat shit, muthafucka!  This
improves tha portabilitizzle of system(@args) by avoidin tha need for
Windows \f(CW\*(C`cmd\*(C'\fR shell specific quotin up in perl programs.
.Sp
Note dat dis means dat some scripts dat may have relied on earlier
buggy behavior may no longer work erectly.  For example,
\&\f(CW\*(C`system("nmake /nologo", @args)\*(C'\fR will now attempt ta run tha file
\&\f(CW\*(C`nmake /nologo\*(C'\fR n' will fail when such a gangbangin' file aint found.
On tha other hand, perl will now execute code such as
\&\f(CW\*(C`system("c:/Program Files/MyApp/foo.exe", @args)\*(C'\fR erectly.
.IP "\(bu" 8
Da perl header filez no longer suppress common warnings from the
Microsizzlez Visual \*(C+ compila n' shit.  This means dat additionizzle warnings may
now show up when compilin \s-1XS\s0 code.
.IP "\(bu" 8
Borland \*(C+ v5.5 is now a supported compila dat can build Perl.
But fuck dat shiznit yo, tha word on tha street is dat tha generated binaries continue ta be incompatible wit them
generated by tha other supported compilaz (\s-1GCC\s0 n' Visual \*(C+). [561]
.IP "\(bu" 8
Dupin socket handlez wit open(F, \*(L">&MYSOCK\*(R") now works under Windows 9x.
[561]
.IP "\(bu" 8
Current directory entries up in \f(CW%ENV\fR is now erectly propagated ta child
processes. [561]
.IP "\(bu" 8
New \f(CW%ENV\fR entries now propagate ta subprocesses. [561]
.IP "\(bu" 8
\&\fIWin32::GetCwd()\fR erectly returns C:\e instead of C: when all up in tha drive root.
Other bugs up in \fIchdir()\fR n' \fICwd::cwd()\fR have also been fixed. Y'all KNOW dat shit, muthafucka! [561]
.IP "\(bu" 8
Da makefilez now default ta tha features enabled up in ActiveState ActivePerl
(a ghettofab Win32 binary distribution). [561]
.IP "\(bu" 8
\&\s-1HTML\s0 filez will now be installed up in c:\eperl\ehtml instead of
c:\eperl\elib\epod\ehtml
.IP "\(bu" 8
\&\s-1REG_EXPAND_SZ\s0 keys is now allowed up in registry settings used by perl. [561]
.IP "\(bu" 8
Can now \fIsend()\fR from all threads, not just tha straight-up original gangsta one. [561]
.IP "\(bu" 8
ExtUtils::MakeMaker now uses \f(CW$ENV\fR{\s-1LIB\s0} ta search fo' libraries. Put ya muthafuckin choppers up if ya feel dis! [561]
.IP "\(bu" 8
Less stack reserved per thread so dat mo' threadz can run
concurrently. (Still 16M per thread.) [561]
.IP "\(bu" 8
\&\f(CW\*(C`File::Spec\->tmpdir()\*(C'\fR now prefers C:/temp over /tmp
(works betta when perl is hustlin as service).
.IP "\(bu" 8
Betta \s-1UNC\s0 path handlin under ithreads. [561]
.IP "\(bu" 8
\&\fIwait()\fR, \fIwaitpid()\fR, n' backticks now return tha erect exit status
under Windows 9x. [561]
.IP "\(bu" 8
A socket handle leak up in \fIaccept()\fR has been fixed. Y'all KNOW dat shit, muthafucka! [561]
.RE
.RS 4
.RE
.SH "New or Chizzled Diagnostics"
.IX Header "New or Chizzled Diagnostics"
Please peep perldiag fo' mo' details.
.IP "\(bu" 4
Ambiguous range up in tha transliteration operator (like a\-z\-9) now
gives a warning.
.IP "\(bu" 4
chdir("") n' chdir(undef) now give a thugged-out deprecation warnin cuz they
cause a possible unintentionizzle chdir ta tha home directory.
Say \fIchdir()\fR if you straight-up mean dis shit.
.IP "\(bu" 4
Two freshly smoked up debuggin options done been added: if you have compiled your
Perl wit debugging, you can use tha \-DT [561] n' \-DR options ta trace
tokenisin n' ta add reference counts ta displayin variables,
respectively.
.IP "\(bu" 4
Da lexical warnings category \*(L"deprecated\*(R" is no longer a sub-category
of tha \*(L"syntax\*(R" category. Well shiiiit, it is now a top-level category up in its own
right.
.IP "\(bu" 4
Unadorned \fIdump()\fR will now give a warnin suggestin to
use explicit \fICORE::dump()\fR if thatz what tha fuck straight-up is meant.
.IP "\(bu" 4
Da \*(L"Unrecognized escape\*(R" warnin has been extended ta include \f(CW\*(C`\e8\*(C'\fR,
\&\f(CW\*(C`\e9\*(C'\fR, n' \f(CW\*(C`\e_\*(C'\fR.  There is no need ta escape any of tha \f(CW\*(C`\ew\*(C'\fR characters.
.IP "\(bu" 4
All regular expression compilation error lyrics is now hopefully
easier ta KNOW both cuz tha error message now comes before
the failed regex n' cuz tha deal wit failure is now clearly
marked by a \f(CW\*(C`<\-\- HERE\*(C'\fR marker.
.IP "\(bu" 4
Various I/O (and socket) functions like \fIbinmode()\fR, \fIclose()\fR, n' so
forth now mo' consistently warn if they is used illogically either
on a yet unopened or on a already closed filehandle (or socket).
.IP "\(bu" 4
Usin \fIlstat()\fR on a gangbangin' filehandle now gives a warning.  (It aint nuthin but a non-sensical
thang ta do.)
.IP "\(bu" 4
Da \f(CW\*(C`\-M\*(C'\fR n' \f(CW\*(C`\-m\*(C'\fR options now warn if you didn't supply tha module name.
.IP "\(bu" 4
If you up in \f(CW\*(C`use\*(C'\fR specify a required minimum version, modulez matching
the name n' but not definin a \f(CW$VERSION\fR will cause a gangbangin' fatal failure.
.IP "\(bu" 4
Usin wack offset fo' \fIvec()\fR up in lvalue context is now a warnable offense.
.IP "\(bu" 4
Odd number of arguments ta overload::constant now elicits a warning.
.IP "\(bu" 4
Odd number of elements up in anonymous hash now elicits a warning.
.IP "\(bu" 4
Da various \*(L"opened only for\*(R", \*(L"on closed\*(R", \*(L"never opened\*(R" warnings
drop tha \f(CW\*(C`main::\*(C'\fR prefix fo' filehandlez up in tha \f(CW\*(C`main\*(C'\fR package,
for example \f(CW\*(C`STDIN\*(C'\fR instead of \f(CW\*(C`main::STDIN\*(C'\fR.
.IP "\(bu" 4
Subroutine prototypes is now checked mo' carefully, you may
get warnings fo' example if you have used non-prototype characters.
.IP "\(bu" 4
If a attempt ta bust a (non-blessed) reference as a array index
is made, a warnin is given.
.IP "\(bu" 4
\&\f(CW\*(C`push @a;\*(C'\fR n' \f(CW\*(C`unshift @a;\*(C'\fR (with no joints ta push or unshift)
now give a warning.  This may be a problem fo' generated n' eval'ed
code.
.IP "\(bu" 4
If you try ta \*(L"pack\*(R" up in perlfunc a number less than 0 or larger than 255
usin tha \f(CW"C"\fR format yo big-ass booty is ghon git a optionizzle warning.  Similarly
for tha \f(CW"c"\fR format n' a number less than \-128 or mo' than 127.
.IP "\(bu" 4
pack \f(CW\*(C`P\*(C'\fR format now demandz a explicit size.
.IP "\(bu" 4
unpack \f(CW\*(C`w\*(C'\fR now warnz of unterminated compressed integers.
.IP "\(bu" 4
Warnings relatin ta tha use of PerlIO done been added.
.IP "\(bu" 4
Certain regex modifiers like fuckin \f(CW\*(C`(?o)\*(C'\fR make sense only if applied to
the entire regex.  Yo ass will git a optionizzle warnin if you try ta do
otherwise.
.IP "\(bu" 4
Variable length lookbehind has not yet been implemented, tryin to
use it will tell dis shit.
.IP "\(bu" 4
Usin arrays or hashes as references (e.g. \f(CW\*(C`%foo\->{bar}\*(C'\fR
has been deprecated fo' a while.  Now yo big-ass booty is ghon git a optionizzle warning.
.IP "\(bu" 4
Warnings relatin ta tha use of tha freshly smoked up restricted hashes feature
have been added.
.IP "\(bu" 4
Self-tizzlez of arrays n' hashes is not supported n' fatal errors
will happen even at a attempt ta do so.
.IP "\(bu" 4
Usin \f(CW\*(C`sort\*(C'\fR up in scalar context now thangs a optionizzle warning.
This didn't do anythang useful, as tha sort was not performed.
.IP "\(bu" 4
Usin tha /g modifier up in \fIsplit()\fR is meaningless n' will cause a warning.
.IP "\(bu" 4
Usin \fIsplice()\fR past tha end of a array now causes a warning.
.IP "\(bu" 4
Malformed Unicode encodings (\s-1UTF\-8\s0 n' \s-1UTF\-16\s0) cause a shitload of warnings,
as do tryin ta use \s-1UTF\-16\s0 surrogates (which is unimplemented).
.IP "\(bu" 4
Tryin ta use Unicode charactas on a I/O stream without markin the
streamz encodin (usin \fIopen()\fR or \fIbinmode()\fR) will cause \*(L"Wide character\*(R"
warnings.
.IP "\(bu" 4
Use of v\-strings up in use/require causes a (backward) portabilitizzle warning.
.IP "\(bu" 4
Warnings relatin ta tha use interpreta threadz n' they shared data
have been added.
.SH "Changed Internals"
.IX Header "Changed Internals"
.IP "\(bu" 4
PerlIO is now tha default.
.IP "\(bu" 4
perlapi.pod (a companion ta perlguts) now attempts ta document the
internal \s-1API.\s0
.IP "\(bu" 4
Yo ass can now build a straight-up minimal perl called microperl.
Buildin microperl do not require even hustlin Configure;
\&\f(CW\*(C`make \-f Makefile.micro\*(C'\fR should be enough cause I gots dem finger-lickin' chickens wit tha siz-auce.  Beware: microperl makes
many assumptions, a shitload of which may be too bold; tha resulting
executable may crash or otherwise misbehave up in wondrous ways.
For careful hackers only.
.IP "\(bu" 4
Added \fIrsignal()\fR, \fIwhichsig()\fR, \fIdo_join()\fR, op_clear, op_null,
\&\fIptr_table_clear()\fR, \fIptr_table_free()\fR, \fIsv_setref_uv()\fR, n' nuff muthafuckin \s-1UTF\-8\s0
interfaces ta tha publicised \s-1API. \s0 For tha full list of tha available
APIs peep perlapi.
.IP "\(bu" 4
Made possible ta propagate customised exceptions via \fIcroak()\fRing.
.IP "\(bu" 4
Now xsubs can have attributes just like subs.  (Well, at least the
built-in attributes.)
.IP "\(bu" 4
dTHR n' djSP done been obsoleted; tha forma removed (because it's
a no-op) n' tha latta replaced wit dSP.
.IP "\(bu" 4
\&\s-1PERL_OBJECT\s0 has been straight-up removed.
.IP "\(bu" 4
Da \s-1MAGIC\s0 constants (e.g. \f(CW\*(AqP\*(Aq\fR) done been macrofied
(e.g. \f(CW\*(C`PERL_MAGIC_TIED\*(C'\fR) fo' betta source code readability
and maintainability.
.IP "\(bu" 4
Da regex compila now maintains a structure dat identifies nodes in
the compiled bytecode wit tha correspondin syntactic featurez of the
original gangsta regex expression. I aint talkin' bout chicken n' gravy biatch.  Da shiznit be attached ta tha new
\&\f(CW\*(C`offsets\*(C'\fR gangmember of tha \f(CW\*(C`struct regexp\*(C'\fR. Right back up in yo muthafuckin ass. See perldebguts fo' more
complete shiznit.
.IP "\(bu" 4
Da C code has been made much mo' \f(CW\*(C`gcc \-Wall\*(C'\fR clean. I aint talkin' bout chicken n' gravy biatch.  Some warning
lyrics still remain up in some platforms, so if yo ass is compilin with
gcc you may peep some warnings bout dubious practices.  Da warnings
are bein hit dat shiznit on.
.IP "\(bu" 4
\&\fIperly.c\fR, \fIsv.c\fR, n' \fIsv.h\fR have now been extensively commented.
.IP "\(bu" 4
Documentation on how tha fuck ta use tha Perl source repository has been added
to \fIPorting/repository.pod\fR.
.IP "\(bu" 4
There is now nuff muthafuckin profilin make targets.
.SH "Securitizzle Vulnerabilitizzle Closed [561]"
.IX Header "Securitizzle Vulnerabilitizzle Closed [561]"
(This chizzle was already made up in 5.7.0 but bears repeatin here.)
(5.7.0 came up before 5.6.1: tha pimpment branch 5.7 busted out
earlier than tha maintenizzle branch 5.6)
.PP
A potential securitizzle vulnerabilitizzle up in tha optionizzle suidperl component
of Perl was identified up in August 2000.  suidperl is neither built nor
installed by default.  Az of November 2001 tha only known vulnerable
platform is Linux, most likely all Linux distributions.  \s-1CERT\s0 and
various vendors n' distributors done been alerted bout tha vulnerability.
See http://www.cpan.org/src/5.0/sperl\-2000\-08\-05/sperl\-2000\-08\-05.txt
for mo' shiznit.
.PP
Da problem was caused by Perl tryin ta report a suspected security
exploit attempt rockin a external program, /bin/mail.  On Linux
platforms tha /bin/mail program had a undocumented feature which
when combined wit suidperl gave access ta a root shell, resultin in
a straight-up compromise instead of reportin tha exploit attempt.  If you
don't have /bin/mail, or if you have 'safe setuid scripts', or if
suidperl aint installed, yo ass is safe.
.PP
Da exploit attempt reportin feature has been straight-up removed from
Perl 5.8.0 (and tha maintenizzle release 5.6.1, n' dat shiznit was removed also
from all tha Perl 5.7 releases), so dat particular vulnerability
aint there no mo'.  But fuck dat shiznit yo, tha word on tha street is dat further securitizzle vulnerabilitizzles are,
unfortunately, always possible.  Da suidperl functionalitizzle is most
probably goin ta be removed up in Perl 5.10.  In any case, suidperl
should only be used by securitizzle smart-ass muthafuckas whoz ass know exactly what tha fuck they are
fuckin wit n' why they is rockin suidperl instead of some other solution
like fuckin sudo ( peep http://www.courtesan.com/sudo/ ).
.SH "New Tests"
.IX Header "New Tests"
Several freshly smoked up tests done been added, especially fo' tha \fIlib\fR and
\&\fIext\fR subsections.  There is now bout 69 000 individual tests
(spread over bout 700 test scripts), up in tha regression suite (5.6.1
has bout 11 700 tests, up in 258 test scripts)  Da exact numbers depend
on tha platform n' Perl configuration used. Y'all KNOW dat shit, muthafucka!  Many of tha freshly smoked up tests
are of course introduced by tha freshly smoked up modulez yo, but still up in general Perl
is now mo' thoroughly tested.
.PP
Because of tha big-ass number of tests, hustlin tha regression suite
will take considerably longer time than it used to: expect tha suite
to take up ta 4\-5 times longer ta run than up in perl 5.6.  On a straight-up
fast machine you can hope ta finish tha suite up in bout 6\-8 minutes
(wallclock time).
.PP
Da tests is now reported up in a gangbangin' finger-lickin' different order than up in earlier Perls.
(This happens cuz tha test scripts from under t/lib done been moved
to be closer ta tha library/extension they is testing.)
.SH "Known Problems"
.IX Header "Known Problems"
.SS "Da Compila Suite Is Still Straight-up Experimental"
.IX Subsection "Da Compila Suite Is Still Straight-up Experimental"
Da compila suite is slowly gettin betta but it continues ta be
highly experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Use up in thang environments is discouraged.
.SS "Localisin Tied Arrays n' Hashes Is Broken"
.IX Subsection "Localisin Tied Arrays n' Hashes Is Broken"
.Vb 1
\&    local %tied_array;
.Ve
.PP
doesn't work as one would expect: tha oldschool value is restored
incorrectly.  This is ghon be chizzled up in a gangbangin' future release yo, but our phat asses don't
know yet what tha fuck tha freshly smoked up semantics will exactly be.  In any case, the
change will break existin code dat relies on tha current
(ill-defined) semantics, so just avoid bustin dis up in general.
.SS "Buildin Extensions Can Fail Because Of Largefiles"
.IX Subsection "Buildin Extensions Can Fail Because Of Largefiles"
Some extensions like mod_perl is known ta have thangs with
`largefiles', a cold-ass lil chizzle brought by Perl 5.6.0 up in which file offsets
default ta 64 bits wide, where supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Modulez may fail ta compile
at all, or they may compile n' work incorrectly.  Currently, there
is no phat solution fo' tha problem yo, but Configure now provides
appropriate non-largefile ccflags, ldflags, libswanted, n' libs
in tha \f(CW%Config\fR hash (e.g., \f(CW$Config\fR{ccflags_nolargefiles}) so the
extensions dat is havin problems can try configurin theyselves
without tha largefileness.  This be admittedly not a cold-ass lil clean solution,
and tha solution may not even work at all.  One potential failure is
whether one can (or, if one can, whether itz a phat scam to) link
together at all binaries wit different scams bout file offsets;
all dis is platform-dependent.
.ie n .SS "Modifyin $_ Inside for(..)"
.el .SS "Modifyin \f(CW$_\fP Inside for(..)"
.IX Subsection "Modifyin $_ Inside for(..)"
.Vb 1
\&   fo' (1..5) { $_++ }
.Ve
.PP
works without complaint.  It shouldn't.  (Yo ass should be able to
modify only lvalue elements inside tha loops.)  Yo ass can peep the
correct behaviour by replacin tha 1..5 wit 1, 2, 3, 4, 5.
.SS "mod_perl 1.26 Don't Build With Threaded Perl"
.IX Subsection "mod_perl 1.26 Don't Build With Threaded Perl"
Use mod_perl 1.27 or higher.
.SS "lib/ftmp\-securitizzle tests warn 'system possibly insecure'"
.IX Subsection "lib/ftmp-securitizzle tests warn 'system possibly insecure'"
Don't panic.  Read tha 'make test' section of \s-1INSTALL\s0 instead.
.SS "libwww-perl (\s-1LWP\s0) fails base/date #51"
.IX Subsection "libwww-perl (LWP) fails base/date #51"
Use libwww-perl 5.65 or later.
.SS "\s-1PDL\s0 failin some tests"
.IX Subsection "PDL failin some tests"
Use \s-1PDL 2.3.4\s0 or later.
.SS "Perl_get_sv"
.IX Subsection "Perl_get_sv"
Yo ass may git errors like 'Undefined symbol \*(L"Perl_get_sv\*(R"' or \*(L"can't
resolve symbol 'Perl_get_sv'\*(R", or tha symbol may be \*(L"Perl_sv_2pv\*(R".
This probably means dat yo ass is tryin ta use a olda shared Perl
library (or extensions linked wit such) wit Perl 5.8.0 executable.
Perl used ta have such a subroutine yo, but dat is no mo' tha case.
Peep yo' shared library path, n' any shared Perl libraries up in them
directories.
.PP
Sometimes dis problem may also indicate a partial Perl 5.8.0
installation, peep \*(L"Mac \s-1OS X\s0 dyld undefined symbols\*(R" fo' an
example n' how tha fuck ta deal wit dat shit.
.SS "Self-tyin Problems"
.IX Subsection "Self-tyin Problems"
Self-tyin of arrays n' hashes is fucked up in rather deep and
hard-to-fix ways.  As a stop-gap measure ta avoid playas from getting
frustrated all up in tha mysterious thangs up in dis biatch (core dumps, most often), it is
forbidden fo' now (you will git a gangbangin' fatal error even from a attempt).
.PP
A chizzle ta self-tyin of globs has caused dem ta be recursively
referenced (see: \*(L"Two-Phased Garbage Collection\*(R" up in perlobj).  You
will now need a explicit untie ta destroy a self-tied glob.  This
behaviour may be fixed at a lata date.
.PP
Self-tyin of scalars n' \s-1IO\s0 thangies works.
.SS "ext/threads/t/libc"
.IX Subsection "ext/threads/t/libc"
If dis test fails, it indicates dat yo' libc (C library) is not
threadsafe.  This particular test stress tests tha \fIlocaltime()\fR call to
smoke up whether it is threadsafe.  See perlthrtut fo' mo' shiznit.
.SS "Failure of Thread (5.005\-style) tests"
.IX Subsection "Failure of Thread (5.005-style) tests"
\&\fBNote dat support fo' 5.005\-style threadin is deprecated,
experimenstrual n' practically unsupported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  In 5.10, it is expected
to be removed. Y'all KNOW dat shit, muthafucka!  Yo ass should migrate yo' code ta ithreads.\fR
.PP
Da followin tests is known ta fail cuz of fundamenstrual problems in
the 5.005 threadin implementation. I aint talkin' bout chicken n' gravy biatch. These is not freshly smoked up failures\*(--Perl
5.005_0x has tha same ol' dirty bugs yo, but didn't have these tests.
.PP
.Vb 10
\& ../ext/B/t/xref.t                    255 65280    14   12  85.71%  3\-14
\& ../ext/List/Util/t/first.t           255 65280     7    4  57.14%  2 5\-7
\& ../lib/English.t                       2   512    54    2   3.70%  2\-3
\& ../lib/FileCache.t                                 5    1  20.00%  5
\& ../lib/Filter/Simple/t/data.t                      6    3  50.00%  1\-3
\& ../lib/Filter/Simple/t/filter_only.                9    3  33.33%  1\-2 5
\& ../lib/Math/BigInt/t/bare_mbf.t                 1627    4   0.25%  8 11 1626\-1627
\& ../lib/Math/BigInt/t/bigfltpm.t                 1629    4   0.25%  10 13 1628\-
\&                                                                    1629
\& ../lib/Math/BigInt/t/sub_mbf.t                  1633    4   0.24%  8 11 1632\-1633
\& ../lib/Math/BigInt/t/with_sub.t                 1628    4   0.25%  9 12 1627\-1628
\& ../lib/Tie/File/t/31_autodefer.t     255 65280    65   32  49.23%  34\-65
\& ../lib/autouse.t                                  10    1  10.00%  4
\& op/flip.t                                         15    1   6.67%  15
.Ve
.PP
These failures is unlikely ta git fixed as 5.005\-style threads
are considered fundamentally broken. I aint talkin' bout chicken n' gravy biatch.  (Basically what tha fuck happens is that
competin threadz can corrupt shared global state, one phat example
bein regular expression enginez state.)
.SS "Timin problems"
.IX Subsection "Timin problems"
Da followin tests may fail intermittently cuz of timing
problems, fo' example if tha system is heavily loaded.
.PP
.Vb 5
\&    t/op/alarm.t
\&    ext/Time/HiRes/HiRes.t
\&    lib/Benchmark.t
\&    lib/Memoize/t/expmod_t.t
\&    lib/Memoize/t/speed.t
.Ve
.PP
In case of failure please try hustlin dem manually, fo' example
.PP
.Vb 1
\&    ./perl \-Ilib ext/Time/HiRes/HiRes.t
.Ve
.SS "Tied/Magical Array/Hash Elements Do Not Autovivify"
.IX Subsection "Tied/Magical Array/Hash Elements Do Not Autovivify"
For aiiight arrays \f(CW\*(C`$foo = \e$bar[1]\*(C'\fR will assign \f(CW\*(C`undef\*(C'\fR to
\&\f(CW$bar[1]\fR (assumin dat it didn't exist before) yo, but for
tied/magical arrays n' hashes such autovivification do not happen
because there is currently no way ta catch tha reference creation.
Da same problem affects slicin over non-existent indices/keys of
a tied/magical array/hash.
.SS "Unicode up in package/class n' subroutine names do not work"
.IX Subsection "Unicode up in package/class n' subroutine names do not work"
One can have Unicode up in identifier names yo, but not up in package/class or
subroutine names.  While some limited functionalitizzle towardz dis do
exist az of Perl 5.8.0, dat is mo' accidental than designed; use of
Unicode fo' tha holla'd purposes is unsupported.
.PP
One reason of dis unfinishednizz is its (currently) inherent
unportability: since both package names n' subroutine names may
need ta be mapped ta file n' directory names, tha Unicode capability
of tha filesystem becomes blingin\*(-- n' there unfortunately aren't
portable lyrics.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
.IP "\(bu" 4
If rockin tha \s-1AIX\s0 natizzle make command, instead of just \*(L"make\*(R" issue
\&\*(L"make all\*(R".  In some setups tha forma has been known ta spuriously
also try ta run \*(L"make install\*(R".  Alternatively, you may wanna use
\&\s-1GNU\s0 make.
.IP "\(bu" 4
In \s-1AIX 4.2,\s0 Perl extensions dat use \*(C+ functions dat use statics
may have problems up in dat tha statics is not gettin initialized.
In newer \s-1AIX\s0 releases, dis has been solved by linkin Perl with
the libC_r library yo, but unfortunately up in \s-1AIX 4.2\s0 tha holla'd library
has a obscure bug where tha various functions related ta time
(like fuckin \fItime()\fR n' \fIgettimeofday()\fR) return fucked up joints, and
therefore up in \s-1AIX 4.2\s0 Perl aint linked against libC_r.
.IP "\(bu" 4
vac 5.0.0.0 May Produce Buggy Code For Perl
.Sp
Da \s-1AIX C\s0 compila vac version 5.0.0.0 may produce buggy code,
resultin up in all dem random tests failin when run as part of \*(L"make
test\*(R" yo, but when tha failin tests is run by hand, they succeed.
We suggest upgradin ta at least vac version 5.0.1.0, dat has been
known ta compile Perl erectly.  \*(L"lslpp \-L|grep vac.C\*(R" will tell
you tha vac version. I aint talkin' bout chicken n' gravy biatch.  See \s-1README\s0.aix.
.IP "\(bu" 4
If buildin threaded Perl, you may git compilation warnin from pp_sys.c:
.Sp
.Vb 1
\&  "pp_sys.c", line 4651.39: 1506\-280 (W) Function argument assignment between types "unsigned char*" n' "const void*" aint allowed.
.Ve
.Sp
This is harmless; it is caused by tha \fIgetnetbyaddr()\fR n' \fIgetnetbyaddr_r()\fR
havin slightly different types fo' they first argument.
.SS "Alpha systems wit oldschool gccs fail nuff muthafuckin tests"
.IX Subsection "Alpha systems wit oldschool gccs fail nuff muthafuckin tests"
If you peep op/pack, op/pat, op/regexp, or ext/Storable tests failing
in a Linux/alpha or *BSD/Alpha, itz probably time ta upgrade yo' gcc.
gccs prior ta 2.95.3 is definitely not phat enough, n' gcc 3.1 may
be even mo' betta n' shit.  (RedHat Linux/alpha wit gcc 3.1 reported no problems,
as did Linux 2.4.18 wit gcc 2.95.4.)  (In Tru64, it is preferable to
use tha bundled C compiler.)
.SS "AmigaOS"
.IX Subsection "AmigaOS"
Perl 5.8.0 don't build up in AmigaOS.  It broke at some point during
the ithreadz work n' we could not find Amiga smart-ass muthafuckas ta unbreak the
problems.  Perl 5.6.1 still works fo' AmigaOS (as do tha 5.7.2
development release).
.SS "BeOS"
.IX Subsection "BeOS"
Da followin tests fail on 5.8.0 Perl up in BeOS Personal 5.03:
.PP
.Vb 6
\& t/op/lfs............................FAILED at test 17
\& t/op/magic..........................FAILED at test 24
\& ext/Fcntl/t/syslfs..................FAILED at test 17
\& ext/File/Glob/t/basic...............FAILED at test 3
\& ext/POSIX/t/sigaction...............FAILED at test 13
\& ext/POSIX/t/waitpid.................FAILED at test 1
.Ve
.PP
(\fBNote:\fR mo' shiznit was available up in \fI\s-1README\s0.beos\fR until support for
BeOS was removed up in Perl v5.18.0)
.ie n .SS "Cygwin ""unable ta remap"""
.el .SS "Cygwin ``unable ta remap''"
.IX Subsection "Cygwin unable ta remap"
For example when buildin tha Tk extension fo' Cygwin,
you may git a error message sayin \*(L"unable ta remap\*(R".
This is known problem wit Cygwin, n' a workaround is
detailed up in here: http://sources.redhat.com/ml/cygwin/2001\-12/msg00894.html
.SS "Cygwin ndbm tests fail on \s-1FAT\s0"
.IX Subsection "Cygwin ndbm tests fail on FAT"
One can build but not install (or test tha build of) tha NDBM_File
on \s-1FAT\s0 filesystems.  Installation (or build) on \s-1NTFS\s0 works fine.
If one attempts tha test on a \s-1FAT\s0 install (or build) tha following
failures is expected:
.PP
.Vb 6
\& ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1\-2 4 16\-71
\& ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
\& ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
\& ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7\-11
\& ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1\-4
\& run/fresh_perl.t                          97    1   1.03%  91
.Ve
.PP
NDBM_File fails n' ODBM_File just coredumps.
.PP
If you intend ta run only on \s-1FAT \s0(or if rockin AnyDBM_File on \s-1FAT\s0),
run Configure wit tha \-Ui_ndbm n' \-Ui_dbm options ta prevent
NDBM_File n' ODBM_File bein built.
.SS "\s-1DJGPP\s0 Failures"
.IX Subsection "DJGPP Failures"
.Vb 8
\& t/op/stat............................FAILED at test 29
\& lib/File/Find/t/find.................FAILED at test 1
\& lib/File/Find/t/taint................FAILED at test 1
\& lib/h2xs.............................FAILED at test 15
\& lib/Pod/t/eol........................FAILED at test 1
\& lib/Test/Harness/t/strap\-analyze.....FAILED at test 8
\& lib/Test/Harness/t/test\-harness......FAILED at test 23
\& lib/Test/Simple/t/exit...............FAILED at test 1
.Ve
.PP
Da above failures is known az of 5.8.0 wit natizzle buildz wit long
filenames yo, but there be all dem mo' if hustlin under dosemu cuz of
limitations (and maybe bugs) of dosemu:
.PP
.Vb 2
\& t/comp/cpp...........................FAILED at test 3
\& t/op/inccode.........................(crash)
.Ve
.PP
and all dem lib/ExtUtils tests, n' nuff muthafuckin hundred Encode/t/Aliases.t
failures dat work fine wit long filenames.  So you straight-up might
prefer natizzle buildz n' long filenames.
.SS "FreeBSD built wit ithreadz coredumps readin big-ass directories"
.IX Subsection "FreeBSD built wit ithreadz coredumps readin big-ass directories"
This be a known bug up in FreeBSD 4.5z \fIreaddir_r()\fR, it has been fixed in
FreeBSD 4.6 (see perlfreebsd (\s-1README\s0.freebsd)).
.SS "FreeBSD Failin locale Test 117 For \s-1ISO 8859\-15\s0 Locales"
.IX Subsection "FreeBSD Failin locale Test 117 For ISO 8859-15 Locales"
Da \s-1ISO 8859\-15\s0 localez may fail tha locale test 117 up in FreeBSD.
This is caused by tha charactas \exFF (y wit diaeresis) n' \exBE
(Y wit diaeresis) not behavin erectly when bein matched
case-insensitively.  Apparently dis problem has been fixed in
the sickest fuckin FreeBSD releases.
( http://www.freebsd.org/cgi/query\-pr.cgi?pr=34308 )
.SS "\s-1IRIX\s0 fails ext/List/Util/t/shuffle.t or Digest::MD5"
.IX Subsection "IRIX fails ext/List/Util/t/shuffle.t or Digest::MD5"
\&\s-1IRIX\s0 wit MIPSpro 7.3.1.2m or 7.3.1.3m compila may fail tha List::Util
test ext/List/Util/t/shuffle.t by dumpin core.  This seems ta be
a compila error since if compiled wit gcc no core dump ensues, and
no failures done been peeped on tha holla'd test on any other platform.
.PP
Similarly, buildin tha Digest::MD5 extension has been
known ta fail wit \*(L"*** Termination code 139 (bu21)\*(R".
.PP
Da cure is ta drop optimization level (Configure \-Doptimize=\-O2).
.SS "HP-UX lib/posix Subtest 9 Fails When LP64\-Configured"
.IX Subsection "HP-UX lib/posix Subtest 9 Fails When LP64-Configured"
If perl is configured wit \-Duse64bitall, tha successful result of the
subtest 10 of lib/posix may arrive before tha successful result of the
subtest 9, which confuses tha test harnizz so much dat it be thinkin the
subtest 9 failed.
.SS "Linux wit glibc 2.2.5 fails t/op/int subtest #6 wit \-Duse64bitint"
.IX Subsection "Linux wit glibc 2.2.5 fails t/op/int subtest #6 wit -Duse64bitint"
This be a known bug up in tha glibc 2.2.5 wit long long integers.
( http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=65612 )
.SS "Linux With Sfio Fails op/misc Test 48"
.IX Subsection "Linux With Sfio Fails op/misc Test 48"
No known fix.
.SS "Mac \s-1OS X\s0"
.IX Subsection "Mac OS X"
Please remember ta set yo' environment variable \s-1LC_ALL\s0 ta \*(L"C\*(R"
(setenv \s-1LC_ALL C\s0) before hustlin \*(L"make test\*(R" ta avoid a shitload of
warnings bout tha fucked up localez of Mac \s-1OS X.\s0
.PP
Da followin tests is known ta fail up in Mac \s-1OS X 10.1.5\s0 cuz of
buggy (old) implementationz of Berkeley \s-1DB\s0 included up in Mac \s-1OS X:\s0
.PP
.Vb 4
\& Failed Test                 Stat Wstat Total Fail  Failed  List of Failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& ../ext/DB_File/t/db\-btree.t    0    11    ??   ??       %  ??
\& ../ext/DB_File/t/db\-recno.t              149    3   2.01%  61 63 65
.Ve
.PP
If yo ass is buildin on a \s-1UFS\s0 partition, yo big-ass booty is ghon also probably see
t/op/stat.t subtest #9 fail.  This is caused by Darwinz \s-1UFS\s0 not
supportin inode chizzle time.
.PP
Also tha ext/POSIX/t/posix.t subtest #10 fails but it is skipped for
now cuz tha failure is Applez fault, not Perlz (blocked signals
are lost).
.PP
If you Configure wit ithreads, ext/threads/t/libc.t will fail fo' realz. Again,
this aint Perlz fault\*(-- tha libc of Mac \s-1OS X\s0 aint threadsafe
(in dis particular test, tha \fIlocaltime()\fR call is found ta be
threadunsafe.)
.SS "Mac \s-1OS X\s0 dyld undefined symbols"
.IX Subsection "Mac OS X dyld undefined symbols"
If afta installin Perl 5.8.0 yo ass is gettin warnings bout missing
symbols, fo' example
.PP
.Vb 3
\&    dyld: perl Undefined symbols
\&    _perl_sv_2pv
\&    _perl_get_sv
.Ve
.PP
you probably have a oldschool pre\-Perl\-5.8.0 installation (or partz of one)
in /Library/Perl (the undefined symbols used ta exist up in pre\-5.8.0 Perls).
It seems dat fo' some reason \*(L"make install\*(R" don't always straight-up
overwrite tha filez up in /Library/Perl.  Yo ass can move tha oldschool Perl
shared library outta tha way like this:
.PP
.Vb 2
\&    cd /Library/Perl/darwin/CORE
\&    mv libperl.dylib libperlold.dylib
.Ve
.PP
and then reissue \*(L"make install\*(R".  Note dat tha above of course is
extremely disruptizzle fo' anythang rockin tha /usr/local/bin/perl.
If dat don't help, you may gotta try removin all tha .bundle
filez from beneath /Library/Perl, n' again n' again n' again \*(L"make install\*(R"\-ing.
.SS "\s-1OS/2\s0 Test Failures"
.IX Subsection "OS/2 Test Failures"
Da followin tests is known ta fail on \s-1OS/2 \s0(for clarity
only tha failures is shown, not tha full error lyrics):
.PP
.Vb 6
\& ../lib/ExtUtils/t/Mkbootstrap.t    1   256    18    1   5.56%  8
\& ../lib/ExtUtils/t/Packlist.t       1   256    34    1   2.94%  17
\& ../lib/ExtUtils/t/basic.t          1   256    17    1   5.88%  14
\& lib/os2_process.t                  2   512   227    2   0.88%  174 209
\& lib/os2_process_kid.t                        227    2   0.88%  174 209
\& lib/rx_cmprt.t                   255 65280    18    3  16.67%  16\-18
.Ve
.SS "op/sprintf tests 91, 129, n' 130"
.IX Subsection "op/sprintf tests 91, 129, n' 130"
Da op/sprintf tests 91, 129, n' 130 is known ta fail on some platforms.
Examplez include any platform rockin sfio, n' Compaq/Tandemz NonStop-UX.
.PP
Test 91 is known ta fail on \s-1QNX6 \s0(nto), cuz \f(CW\*(C`sprintf \*(Aq%e\*(Aq,0\*(C'\fR
incorrectly produces \f(CW0.000000e+0\fR instead of \f(CW0.000000e+00\fR.
.PP
For tests 129 n' 130, tha failin platforms do not comply with
the \s-1ANSI C\s0 Standard: lines 19ff on page 134 of \s-1ANSI X3.159 1989,\s0 to
be exact.  (They produce suttin' other than \*(L"1\*(R" n' \*(L"\-1\*(R" when
formattin 0.6 n' \-0.6 rockin tha printf format \*(L"%.0f\*(R"; most often,
they produce \*(L"0\*(R" n' \*(L"\-0\*(R".)
.SS "\s-1SCO\s0"
.IX Subsection "SCO"
Da socketpair tests is known ta be unaiiight up in \s-1SCO 3\s0.2v5.0.4:
.PP
.Vb 1
\& ext/Socket/socketpair.t...............FAILED tests 15\-45
.Ve
.SS "Solaris 2.5"
.IX Subsection "Solaris 2.5"
In case yo ass is still rockin Solaris 2.5 (aka SunOS 5.5), you may
experience failures (the test core dumping) up in lib/locale.t.
Da suggested cure is ta upgrade yo' Solaris.
.SS "Solaris x86 Fails Tests With \-Duse64bitint"
.IX Subsection "Solaris x86 Fails Tests With -Duse64bitint"
Da followin tests is known ta fail up in Solaris x86 wit Perl
configured ta use 64 bit integers:
.PP
.Vb 2
\& ext/Data/Dumper/t/dumper.............FAILED at test 268
\& ext/Devel/Peek/Peek..................FAILED at test 7
.Ve
.SS "SUPER-UX (\s-1NEC SX\s0)"
.IX Subsection "SUPER-UX (NEC SX)"
Da followin tests is known ta fail on SUPER-UX:
.PP
.Vb 11
\& op/64bitint...........................FAILED tests 29\-30, 32\-33, 35\-36
\& op/arith..............................FAILED tests 128\-130
\& op/pack...............................FAILED tests 25\-5625
\& op/pow................................
\& op/taint..............................# msgsnd failed
\& ../ext/IO/lib/IO/t/io_poll............FAILED tests 3\-4
\& ../ext/IPC/SysV/ipcsysv...............FAILED tests 2, 5\-6
\& ../ext/IPC/SysV/t/msg.................FAILED tests 2, 4\-6
\& ../ext/Socket/socketpair..............FAILED tests 12
\& ../lib/IPC/SysV.......................FAILED tests 2, 5\-6
\& ../lib/warnings.......................FAILED tests 115\-116, 118\-119
.Ve
.PP
Da op/pack failure (\*(L"Cannot compress wack numbers at op/pack.t line 126\*(R")
is straight-up but az of yet unsolved. Y'all KNOW dat shit, muthafucka!  It points at some problems wit the
signednizz handlin of tha C compiler, as do tha 64bitint, arith, n' pow
failures.  Most of tha rest point at problems wit SysV \s-1IPC.\s0
.SS "Term::ReadKey not hustlin on Win32"
.IX Subsection "Term::ReadKey not hustlin on Win32"
Use Term::ReadKey 2.20 or later.
.SS "UNICOS/mk"
.IX Subsection "UNICOS/mk"
.IP "\(bu" 4
Durin Configure, tha test
.Sp
.Vb 1
\&    Guessin which symbols yo' C compila n' preprocessor define...
.Ve
.Sp
will probably fail wit error lyrics like
.Sp
.Vb 2
\&    CC\-20 cc: ERROR File = try.c, Line = 3
\&      Da identifier "bad" is undefined.
\&
\&      wack switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
\&      ^
\&
\&    CC\-65 cc: ERROR File = try.c, Line = 3
\&      A semicolon is expected at dis point.
.Ve
.Sp
This is caused by a funky-ass bug up in tha awk utilitizzle of UNICOS/mk.  Yo ass can ignore
the error yo, but it do cause a slight problem: you cannot fully
benefit from tha h2ph utilitizzle (see h2ph) dat can be used to
convert C headaz ta Perl libraries, mainly used ta be able ta access
from Perl tha constants defined rockin C preprocessor, cpp.  Because of
the above error, partz of tha converted headaz is ghon be invisible.
Luckily, these minutes tha need fo' h2ph is rare.
.IP "\(bu" 4
If buildin Perl wit interpreta threadz (ithreads), the
\&\fIgetgrent()\fR, \fIgetgrnam()\fR, n' \fIgetgrgid()\fR functions cannot return the
list of tha crew thugz cuz of a funky-ass bug up in tha multithreaded support of
UNICOS/mk.  What dis means is dat up in list context tha functions will
return only three joints, not four.
.SS "\s-1UTS\s0"
.IX Subsection "UTS"
There is all dem known test failures.  (\fBNote:\fR tha relevant shiznit was
available up in \fI\s-1README\s0.uts\fR until support fo' \s-1UTS\s0 was removed up in Perl
v5.18.0)
.SS "\s-1VOS \s0(Stratus)"
.IX Subsection "VOS (Stratus)"
When Perl is built rockin tha natizzle build process on \s-1VOS\s0 Release
14.5.0 n' \s-1GNU \*(C+/GNU\s0 Tools 2.0.1, all attempted tests either
pass or result up in \s-1TODO \s0(ignored) failures.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
There should be no reported test failures wit a thugged-out default configuration,
though there be a fuckin shitload of tests marked \s-1TODO\s0 dat point ta areas
needin further debuggin and/or portin work.
.SS "Win32"
.IX Subsection "Win32"
In multi-CPU boxes, there be some problems wit tha I/O buffering:
some output may step tha fuck up twice.
.SS "XML::Parser not working"
.IX Subsection "XML::Parser not working"
Use XML::Parser 2.31 or later.
.SS "z/OS (\s-1OS/390\s0)"
.IX Subsection "z/OS (OS/390)"
z/OS has rather nuff test failures but tha thang is straight-up much
betta than dat shiznit was up in 5.6.0; itz just dat all kindsa muthafuckin freshly smoked up modulez and
tests done been added.
.PP
.Vb 10
\& Failed Test                   Stat Wstat Total Fail  Failed  List of Failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& ../ext/Data/Dumper/t/dumper.t              357    8   2.24%  311 314 325 327
\&                                                              331 333 337 339
\& ../ext/IO/lib/IO/t/io_unix.t                 5    4  80.00%  2\-5
\& ../ext/Storable/t/downgrade.t   12  3072   169   12   7.10%  14\-15 46\-47 78\-79
\&                                                              110\-111 150 161
\& ../lib/ExtUtils/t/Constant.t   121 30976    48   48 100.00%  1\-48
\& ../lib/ExtUtils/t/Embed.t                    9    9 100.00%  1\-9
\& op/pat.t                                   922    7   0.76%  665 776 785 832\-
\&                                                              834 845
\& op/sprintf.t                               224    3   1.34%  98 100 136
\& op/tr.t                                     97    5   5.15%  63 71\-74
\& uni/fold.t                                 780    6   0.77%  61 169 196 661
\&                                                              710\-711
.Ve
.PP
Da failures up in dumper.t n' downgrade.t is problems up in tha tests,
those up in io_unix n' sprintf is problems up in tha \s-1USS \s0(\s-1UDP\s0 sockets and
printf formats).  Da pat, tr, n' fold failures is genuine Perl
problems caused by \s-1EBCDIC \s0(and up in tha pat n' fold cases, combining
that wit Unicode).  Da Constant n' Embed is probably problems in
the tests (since they test Perlz mobilitizzle ta build extensions, and
that seems ta be hustlin reasonably well.)
.SS "Unicode Support on \s-1EBCDIC\s0 Still Spotty"
.IX Subsection "Unicode Support on EBCDIC Still Spotty"
Though mostly working, Unicode support still has problem spots on
\&\s-1EBCDIC\s0 platforms.  One such known spot is tha \f(CW\*(C`\ep{}\*(C'\fR n' \f(CW\*(C`\eP{}\*(C'\fR
regular expression constructs fo' code points less than 256: the
\&\f(CW\*(C`pP\*(C'\fR is testin fo' Unicode code points, not knowin bout \s-1EBCDIC.\s0
.SS "Seen In Perl 5.7 But Gone Now"
.IX Subsection "Seen In Perl 5.7 But Gone Now"
\&\f(CW\*(C`Time::Piece\*(C'\fR (previously known as \f(CW\*(C`Time::Object\*(C'\fR) was removed
because dat shiznit was felt dat it didn't have enough value up in it ta be a
core module.  It be still a useful module, though, n' be available
from tha \s-1CPAN.\s0
.PP
Perl 5.8 unfortunately do not build no mo' on AmigaOS; dis broke
accidentally at some point.  Since there be not dat nuff Amiga
developers available, we could not git dis fixed n' tested up in time
for 5.8.0.  Perl 5.6.1 still works fo' AmigaOS (as do tha 5.7.2
development release).
.PP
Da \f(CW\*(C`PerlIO::Scalar\*(C'\fR n' \f(CW\*(C`PerlIO::Via\*(C'\fR (capitalised) was renamed as
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR n' \f(CW\*(C`PerlIO::via\*(C'\fR (all lowercase) just before 5.8.0.
Da main rationale was ta have all core PerlIO layers ta have all
lowercase names.  Da \*(L"plugins\*(R" is named as usual, fo' example
\&\f(CW\*(C`PerlIO::via::QuotedPrint\*(C'\fR.
.PP
Da \f(CW\*(C`threads::shared::queue\*(C'\fR n' \f(CW\*(C`threads::shared::semaphore\*(C'\fR were
renamed as \f(CW\*(C`Thread::Queue\*(C'\fR n' \f(CW\*(C`Thread::Semaphore\*(C'\fR just before 5.8.0.
Da main rationale was ta have thread modulez ta obey aiiight naming,
\&\f(CW\*(C`Thread::\*(C'\fR (the \f(CW\*(C`threads\*(C'\fR n' \f(CW\*(C`threads::shared\*(C'\fR theyselves are
more pragma-like, they affect compile-time, so they stay lowercase).
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release.  Be shizzle ta trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analysed by tha Perl portin crew.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' exhaustizzle details on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Jarkko Hietaniemi <\fIjhi@iki.fi\fR>.
