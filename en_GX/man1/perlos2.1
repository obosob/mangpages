.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOS2 1"
.TH PERLOS2 1 "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlos2 \- Perl under OS/2, DOS, Win0.3*, Win0.95 n' WinNT.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
One can read dis document up in tha followin formats:
.PP
.Vb 4
\&        playa perlos2
\&        view perl perlos2
\&        explorer perlos2.html
\&        info perlos2
.Ve
.PP
to list some (not all may be available simultaneously), or it may
be read \fIas is\fR: either as \fI\s-1README\s0.os2\fR, or \fIpod/perlos2.pod\fR.
.PP
To read tha \fI.INF\fR version of documentation (\fBvery\fR recommended)
outside of \s-1OS/2,\s0 one needz a \s-1IBM\s0z reader (may be available on \s-1IBM\s0
ftp cribs (?)  (\s-1URL\s0 mah playas?)) or shipped wit \s-1PC DOS 7.0\s0 n' \s-1IBM\s0's
Visual Age \*(C+ 3.5.
.PP
A copy of a Win* viewer is contained up in tha \*(L"Just add \s-1OS/2\s0 Warp\*(R" package
.PP
.Vb 1
\&  ftp://ftp.software.ibm.com/ps/products/os2/tools/jaow/jaow.zip
.Ve
.PP
in \fI?:\eJUST_ADD\eview.exe\fR. This gives one a access ta \s-1EMX\s0z 
\&\fI.INF\fR docs as well (text form be available up in \fI/emx/doc\fR up in 
\&\s-1EMX\s0z distribution).  There be also a gangbangin' finger-lickin' different viewer named xview.
.PP
Note dat if you have \fIlynx.exe\fR or \fInetscape.exe\fR installed, you can follow \s-1WWW\s0 links
from dis document up in \fI.INF\fR format. If you have \s-1EMX\s0 docs installed 
correctly, you can follow library links (you need ta have \f(CW\*(C`view emxbook\*(C'\fR
workin by settin \f(CW\*(C`EMXBOOK\*(C'\fR environment variable as it is busted lyrics about
in \s-1EMX\s0 docs).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Target"
.IX Subsection "Target"
Da target is ta make \s-1OS/2\s0 one of tha dopest supported platform for
using/building/developin Perl n' \fIPerl applications\fR, as well as
make Perl tha dopest language ta use under \s-1OS/2.\s0 Da secondary target is
to try ta make dis work under \s-1DOS\s0 n' Win* as well (but not \fBtoo\fR hard).
.PP
Da current state is like close ta dis target. Known limitations:
.IP "\(bu" 5
Some *nix programs use \fIfork()\fR a lot; wit da most thugged-outly useful flavors of
perl fo' \s-1OS/2 \s0(there is nuff muthafuckin built simultaneously) dis is
supported; but some flavors do not support dis (e.g., when Perl is
called from inside \s-1REXX\s0).  Usin \fIfork()\fR after
\&\fIuse\fRin dynamically loadin extensions would not work wit \fIvery\fR old
versionz of \s-1EMX.\s0
.IP "\(bu" 5
Yo ass need a separate perl executable \fIperl_\|_.exe\fR (see \*(L"perl_\|_.exe\*(R")
if you wanna use \s-1PM\s0 code up in yo' application (as Perl/Tk or OpenGL
Perl modulez do) without havin a text-mode window present.
.Sp
While rockin tha standard \fIperl.exe\fR from a text-mode window is possible
too, I have peeped cases when dis causes degradation of tha system stability.
Usin \fIperl_\|_.exe\fR avoidz such a thugged-out degradation.
.IP "\(bu" 5
There is no simple way ta access \s-1WPS\s0 objects, n' you can put dat on yo' toast. Da only way I know
is via \f(CW\*(C`OS2::REXX\*(C'\fR n' \f(CW\*(C`SOM\*(C'\fR extensions (see \s-1OS2::REXX\s0, \s-1SOM\s0).
But fuck dat shiznit yo, tha word on tha street is dat our phat asses aint gots access to
convenience methodz of Object-REXX. (Is it possible at all, biatch? I know
of no Object-REXX \s-1API.\s0)  Da \f(CW\*(C`SOM\*(C'\fR extension (currently up in alpha-text)
may eventually remove dis shortcoming; however, cuz of tha fact that
\&\s-1DII\s0 aint supported by tha \f(CW\*(C`SOM\*(C'\fR module, rockin \f(CW\*(C`SOM\*(C'\fR aint as
convenient as one wanna dat shit.
.PP
Please keep dis list up-to-date by informin me bout other items.
.SS "Other OSes"
.IX Subsection "Other OSes"
Since \s-1OS/2\s0 port of perl uses a remarkable \s-1EMX\s0 environment, it can
run (and build extensions, n' \- possibly \- be built itself) under any
environment which can run \s-1EMX.\s0 Da current list is \s-1DOS,\s0
DOS\-inside\-OS/2, Win0.3*, Win0.95 n' WinNT. Out of nuff perl flavors,
only one works, peep \*(L"perl_.exe\*(R".
.PP
Note dat not all featurez of Perl is available under these
environments, n' you can put dat on yo' toast. This dependz on tha features tha \fIextender\fR \- most
probably \s-1RSX \-\s0 decided ta implement.
.PP
Cf. \*(L"Prerequisites\*(R".
.SS "Prerequisites"
.IX Subsection "Prerequisites"
.IP "\s-1EMX\s0" 6
.IX Item "EMX"
\&\s-1EMX\s0 runtime is required (may be substituted by \s-1RSX\s0). Note that
it is possible ta make \fIperl_.exe\fR ta run under \s-1DOS\s0 without any
external support by bindin \fIemx.exe\fR/\fIrsx.exe\fR ta it, peep \f(CW\*(C`emxbind\*(C'\fR. Note
that under \s-1DOS\s0 fo' dopest thangs up in dis biatch one should use \s-1RSX\s0 runtime, which
has much mo' functions hustlin (like \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`popen\*(C'\fR n' so on). In
fact \s-1RSX\s0 is required if there is no \s-1VCPI\s0 present. Note the
\&\s-1RSX\s0 requires \s-1DPMI. \s0 Many implementationz of \s-1DPMI\s0 is known ta be hella
buggy, beware!
.Sp
Only tha sickest fuckin runtime is supported, currently \f(CW\*(C`0.9d fix 03\*(C'\fR. Perl may run
under earlier versionz of \s-1EMX,\s0 but dis aint tested.
.Sp
One can git different partz of \s-1EMX\s0 from, say
.Sp
.Vb 2
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/
\&  http://hobbes.nmsu.edu/h\-browse.php?dir=/pub/os2/dev/emx/v0.9d/
.Ve
.Sp
Da runtime component should have tha name \fIemxrt.zip\fR.
.Sp
\&\fB\s-1NOTE\s0\fR. When rockin \fIemx.exe\fR/\fIrsx.exe\fR, it is enough ta have dem on yo' path. One
does not need ta specify dem explicitly (though this
.Sp
.Vb 1
\&  emx perl_.exe \-de 0
.Ve
.Sp
will work as well.)
.IP "\s-1RSX\s0" 6
.IX Item "RSX"
To run Perl on \s-1DPMI\s0 platforms one needz \s-1RSX\s0 runtime. This is
needed under DOS\-inside\-OS/2, Win0.3*, Win0.95 n' WinNT (see 
\&\*(L"Other OSes\*(R"). \s-1RSX\s0 would not work wit \s-1VCPI\s0
only, as \s-1EMX\s0 would, it requires \s-1DMPI.\s0
.Sp
Havin \s-1RSX\s0 n' tha sickest fuckin \fIsh.exe\fR one gets a gangbangin' straight-up functional
\&\fB*nix\fR\-ish environment under \s-1DOS,\s0 say, \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`\`\`\*(C'\fR and
pipe\-\f(CW\*(C`open\*(C'\fR work. In fact, MakeMaker works (for static build), so one
can have Perl pimpment environment under \s-1DOS. \s0
.Sp
One can git \s-1RSX\s0 from, say
.Sp
.Vb 2
\&  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/contrib/
.Ve
.Sp
Contact tha lyricist on \f(CW\*(C`rainer@mathematik.uni\-bielefeld.de\*(C'\fR.
.Sp
Da sickest fuckin \fIsh.exe\fR wit \s-1DOS\s0 hooks be available in
.Sp
.Vb 1
\&  http://www.ilyaz.org/software/os2/
.Ve
.Sp
as \fIsh_dos.zip\fR or under similar names startin wit \f(CW\*(C`sh\*(C'\fR, \f(CW\*(C`pdksh\*(C'\fR etc.
.IP "\s-1HPFS\s0" 6
.IX Item "HPFS"
Perl do not care bout file systems yo, but tha perl library gotz nuff
many filez wit long names, so ta install it intact one needz a gangbangin' file
system which supports long file names.
.Sp
Note dat if you do not plan ta build tha perl itself, it may be
possible ta fool \s-1EMX\s0 ta truncate file names. This aint supported,
read \s-1EMX\s0 docs ta peep how tha fuck ta do dat shit.
.IP "pdksh" 6
.IX Item "pdksh"
To start external programs wit fucked up command lines (like with
pipes up in between, and/or quotin of arguments), Perl uses a external
shell. With \s-1EMX\s0 port such shell should be named \fIsh.exe\fR, n' located
either up in tha wired-in-during-compile locations (usually \fIF:/bin\fR),
or up in configurable location (see \*(L"\s-1PERL_SH_DIR\*(R"\s0).
.Sp
For dopest thangs up in dis biatch use \s-1EMX\s0 pdksh. Da standard binary (5.2.14 or later) runs
under \s-1DOS \s0(with \*(L"\s-1RSX\*(R"\s0) as well, see
.Sp
.Vb 1
\&  http://www.ilyaz.org/software/os2/
.Ve
.SS "Startin Perl programs under \s-1OS/2 \s0(and \s-1DOS\s0 and...)"
.IX Subsection "Startin Perl programs under OS/2 (and DOS and...)"
Start yo' Perl program \fIfoo.pl\fR wit arguments \f(CW\*(C`arg1 arg2 arg3\*(C'\fR the
same way as on any other platform, by
.PP
.Vb 1
\&        perl foo.pl arg1 arg2 arg3
.Ve
.PP
If you wanna specify perl options \f(CW\*(C`\-my_opts\*(C'\fR ta tha perl itself (as
opposed ta yo' program), use
.PP
.Vb 1
\&        perl \-my_opts foo.pl arg1 arg2 arg3
.Ve
.PP
Alternately, if you use OS/2\-ish shell, like \s-1CMD\s0 or 4os2, put
the followin all up in tha start of yo' perl script:
.PP
.Vb 1
\&        extproc perl \-S \-my_opts
.Ve
.PP
rename yo' program ta \fIfoo.cmd\fR, n' start it by typing
.PP
.Vb 1
\&        foo arg1 arg2 arg3
.Ve
.PP
Note dat cuz of wack \s-1OS/2\s0 limitations tha full path of tha perl
script aint available when you use \f(CW\*(C`extproc\*(C'\fR, thus yo ass is forced to
use \f(CW\*(C`\-S\*(C'\fR perl switch, n' yo' script should be on tha \f(CW\*(C`PATH\*(C'\fR fo' realz. As a plus
side, if you know a gangbangin' full path ta yo' script, you may still start it
with
.PP
.Vb 1
\&        perl ../../blah/foo.cmd arg1 arg2 arg3
.Ve
.PP
(note dat tha argument \f(CW\*(C`\-my_opts\*(C'\fR is taken care of by tha \f(CW\*(C`extproc\*(C'\fR line
in yo' script, peep "\f(CW\*(C`extproc\*(C'\fR on tha straight-up original gangsta line").
.PP
To KNOW what tha fuck tha above \fImagic\fR do, read perl docs bout \f(CW\*(C`\-S\*(C'\fR
switch \- peep perlrun, n' cmdref bout \f(CW\*(C`extproc\*(C'\fR:
.PP
.Vb 4
\&        view perl perlrun
\&        playa perlrun
\&        view cmdref extproc
\&        help extproc
.Ve
.PP
or whatever method you prefer.
.PP
There is also endless possibilitizzles ta use \fIexecutable extensions\fR of
4os2, \fIassociations\fR of \s-1WPS\s0 n' so on... But fuck dat shiznit yo, tha word on tha street is dat if you use
*nixish shell (like \fIsh.exe\fR supplied up in tha binary distribution),
you need ta follow tha syntax specified up in \*(L"Command Switches\*(R" up in perlrun.
.PP
Note dat \fB\-S\fR switch supports scripts wit additionizzle extensions 
\&\fI.cmd\fR, \fI.btm\fR, \fI.bat\fR, \fI.pl\fR as well.
.SS "Startin \s-1OS/2 \s0(and \s-1DOS\s0) programs under Perl"
.IX Subsection "Startin OS/2 (and DOS) programs under Perl"
This is what tha fuck \fIsystem()\fR (see \*(L"system\*(R" up in perlfunc), \f(CW\*(C`\`\`\*(C'\fR (see
\&\*(L"I/O Operators\*(R" up in perlop), n' \fIopen pipe\fR (see \*(L"open\*(R" up in perlfunc)
are for. Shiiit, dis aint no joke. (Avoid \fIexec()\fR (see \*(L"exec\*(R" up in perlfunc) unless you know what tha fuck you
do).
.PP
Note however dat ta use a shitload of these operators you need ta have a
sh-syntax shell installed (see \*(L"Pdksh\*(R", 
\&\*(L"Frequently axed thangs\*(R"), n' perl should be able ta find it
(see \*(L"\s-1PERL_SH_DIR\*(R"\s0).
.PP
Da cases when tha shell is used are:
.IP "1." 4
One-argument \fIsystem()\fR (see \*(L"system\*(R" up in perlfunc), \fIexec()\fR (see \*(L"exec\*(R" up in perlfunc)
with redirection or shell meta-characters;
.IP "2." 4
Pipe-open (see \*(L"open\*(R" up in perlfunc) wit tha command which gotz nuff redirection 
or shell meta-characters;
.IP "3." 4
Backticks \f(CW\*(C`\`\`\*(C'\fR (see \*(L"I/O Operators\*(R" up in perlop) wit tha command which gotz nuff
redirection or shell meta-characters;
.IP "4." 4
If tha executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR be a script
with tha \*(L"magic\*(R" \f(CW\*(C`#!\*(C'\fR line or \f(CW\*(C`extproc\*(C'\fR line which specifies shell;
.IP "5." 4
If tha executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR be a script
without \*(L"magic\*(R" line, n' \f(CW$ENV{EXECSHELL}\fR is set ta shell;
.IP "6." 4
If tha executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR is not
found (is not dis remark obsolete?);
.IP "7." 4
For globbin (see \*(L"glob\*(R" up in perlfunc, \*(L"I/O Operators\*(R" up in perlop)
(obsolete, biatch? Perl uses builtin globbin nowadays...).
.PP
For tha sake of speed fo' a cold-ass lil common case, up in tha above algorithms 
backslashes up in tha command name is not considered as shell metacharacters.
.PP
Perl starts scripts which begin wit cookies
\&\f(CW\*(C`extproc\*(C'\fR or \f(CW\*(C`#!\*(C'\fR directly, without a intervention of shell.  Perl uses the
same algorithm ta find tha executable as \fIpdksh\fR: if tha path
on \f(CW\*(C`#!\*(C'\fR line do not work, n' gotz nuff \f(CW\*(C`/\*(C'\fR, then tha directory
part of tha executable is ignored, n' tha executable
is searched up in \fI.\fR n' on \f(CW\*(C`PATH\*(C'\fR.  To find arguments fo' these scripts
Perl uses a gangbangin' finger-lickin' different algorithm than \fIpdksh\fR: up ta 3 arguments is 
recognized, n' trailin whitespace is stripped.
.PP
If a script
does not contain such a cold-ass lil cooky, then ta avoid callin \fIsh.exe\fR, Perl uses
the same algorithm as \fIpdksh\fR: if \f(CW$ENV{EXECSHELL}\fR is set, the
script is given as tha straight-up original gangsta argument ta dis command, if not set, then
\&\f(CW\*(C`$ENV{COMSPEC} /c\*(C'\fR is used (or a hardwired guess if \f(CW$ENV{COMSPEC}\fR is
not set).
.PP
When startin scripts directly, Perl uses exactly tha same algorithm as fo' 
the search of script given by \fB\-S\fR command-line option: it will look in
the current directory, then on componentz of \f(CW$ENV{PATH}\fR rockin tha 
followin order of appended extensions: no extension, \fI.cmd\fR, \fI.btm\fR, 
\&\fI.bat\fR, \fI.pl\fR.
.PP
Note dat Perl will start ta look fo' scripts only if \s-1OS/2\s0 cannot start the
specified application, thus \f(CW\*(C`system \*(Aqblah\*(Aq\*(C'\fR aint gonna look fo' a script if 
there be a executable file \fIblah.exe\fR \fIanywhere\fR on \f(CW\*(C`PATH\*(C'\fR.  In
other lyrics, \f(CW\*(C`PATH\*(C'\fR is essentially searched twice: once by tha \s-1OS\s0 for
an executable, then by Perl fo' scripts.
.PP
Note also dat executable filez on \s-1OS/2\s0 can have a arbitrary extension, 
but \fI.exe\fR is ghon be automatically appended if no dot is present up in tha name.  
Da workaround be as simple as that:  since \fIblah.\fR n' \fIblah\fR denote tha 
same file (at list on \s-1FAT\s0 n' \s-1HPFS\s0 file systems), ta start a executable residin up in file \fIn:/bin/blah\fR (no 
extension) give a argument \f(CW\*(C`n:/bin/blah.\*(C'\fR (dot appended) ta \fIsystem()\fR.
.PP
Perl will start \s-1PM\s0 programs from \s-1VIO \s0(=text\-mode) Perl process up in a
separate \s-1PM\s0 session;
the opposite aint true: when you start a non-PM program from a \s-1PM\s0
Perl process, Perl would not run it up in a separate session. I aint talkin' bout chicken n' gravy biatch.  If a separate
session is desired, either ensure
that shell is ghon be used, as up in \f(CW\*(C`system \*(Aqcmd /c myprog\*(Aq\*(C'\fR, or start it using
optionizzle arguments ta \fIsystem()\fR documented up in \f(CW\*(C`OS2::Process\*(C'\fR module.  This
is considered ta be a gangbangin' feature.
.SH "Frequently axed thangs"
.IX Header "Frequently axed thangs"
.ie n .SS """It do not work"""
.el .SS "``It do not work''"
.IX Subsection "It do not work"
Perl binary distributions come wit a \fItestperl.cmd\fR script which tries
to detect common problems wit misconfigured installations.  There be a
pretty big-ass chizzle it will discover which step of tha installation you
managed ta goof.  \f(CW\*(C`;\-)\*(C'\fR
.SS "I cannot run external programs"
.IX Subsection "I cannot run external programs"
.IP "\(bu" 4
Did yo dirty ass run yo' programs wit \f(CW\*(C`\-w\*(C'\fR switch, biatch? See 
\&\*(L"Startin \s-1OS/2 \s0(and \s-1DOS\s0) programs under Perl\*(R".
.IP "\(bu" 4
Do you try ta run \fIinternal\fR shell commands, like \f(CW\*(C`\`copy a funky-ass b\`\*(C'\fR
(internal fo' \fIcmd.exe\fR), or \f(CW\*(C`\`glob a*b\`\*(C'\fR (internal fo' ksh), biatch? You
need ta specify yo' shell explicitly, like \f(CW\*(C`\`cmd /c copy a funky-ass b\`\*(C'\fR,
since Perl cannot deduce which commandz is internal ta yo' shell.
.SS "I cannot embed perl tha fuck into mah program, or use \fIperl.dll\fP from mah program."
.IX Subsection "I cannot embed perl tha fuck into mah program, or use perl.dll from mah program."
.ie n .IP "Is yo' program EMX-compiled wit ""\-Zmt \-Zcrtdll""?" 4
.el .IP "Is yo' program EMX-compiled wit \f(CW\-Zmt \-Zcrtdll\fR?" 4
.IX Item "Is yo' program EMX-compiled wit -Zmt -Zcrtdll?"
Well, nowadays Perl \s-1DLL\s0 should be usable from a gangbangin' finger-lickin' differently compiled
program like a muthafucka...  If you can run Perl code from \s-1REXX\s0 scripts (see
\&\s-1OS2::REXX\s0), then there be some other aspect of interaction which
are overlooked by tha current hackish code ta support
differently-compiled principal programs.
.Sp
If every last muthafuckin thang else fails, you need ta build a stand-alone \s-1DLL\s0 for
perl. Contact me, I done did it once. Right back up in yo muthafuckin ass. Sockets would not work, as a shitload of
other stuff.
.IP "Did yo dirty ass use ExtUtils::Embed?" 4
.IX Item "Did yo dirty ass use ExtUtils::Embed?"
Some time ago I had reports it do not work.  Nowadays it is checked
in tha Perl test suite, so grep \fI./t\fR subdirectory of tha build tree
(as well as \fI*.t\fR filez up in tha \fI./lib\fR subdirectory) ta find how tha fuck it
should be done \*(L"correctly\*(R".
.ie n .SS """\`\`"" n' pipe\-""open"" do not work under \s-1DOS.\s0"
.el .SS "\f(CW\`\`\fP n' pipe\-\f(CWopen\fP do not work under \s-1DOS.\s0"
.IX Subsection " n' pipe-open do not work under DOS."
This may a variant of just \*(L"I cannot run external programs\*(R", or a
deeper problem. Basically: you \fIneed\fR \s-1RSX \s0(see \*(L"Prerequisites\*(R")
for these commandz ta work, n' you may need a port of \fIsh.exe\fR which
understandz command arguments, n' you can put dat on yo' toast. One of such ports is listed in
\&\*(L"Prerequisites\*(R" under \s-1RSX.\s0 Do not forget ta set variable
\&\f(CW"PERL_SH_DIR"\fR as well.
.PP
\&\s-1DPMI\s0 is required fo' \s-1RSX.\s0
.ie n .SS "Cannot start ""find.exe ""pattern"" file"""
.el .SS "Cannot start \f(CWfind.exe ``pattern'' file\fP"
.IX Subsection "Cannot start find.exe ""pattern"" file"
Da whole scam of tha \*(L"standard C \s-1API\s0 ta start applications\*(R" is that
the forms \f(CW\*(C`foo\*(C'\fR n' \f(CW"foo"\fR of program arguments is straight-up
interchangeable.  \fIfind\fR breaks dis paradigm;
.PP
.Vb 2
\&  find "pattern" file
\&  find pattern file
.Ve
.PP
are not equivalent; \fIfind\fR cannot be started directly rockin tha above
\&\s-1API. \s0 One needz a way ta surround tha doublequotes up in some other
quotin construction, necessarily havin a extra non-Unixish shell in
between.
.PP
Use one of
.PP
.Vb 2
\&  system \*(Aqcmd\*(Aq, \*(Aq/c\*(Aq, \*(Aqfind "pattern" file\*(Aq;
\&  \`cmd /c \*(Aqfind "pattern" file\*(Aq\`
.Ve
.PP
This would start \fIfind.exe\fR via \fIcmd.exe\fR via \f(CW\*(C`sh.exe\*(C'\fR via
\&\f(CW\*(C`perl.exe\*(C'\fR yo, but dis be a price ta pay if you wanna use
non-conformin program.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Automatic binary installation"
.IX Subsection "Automatic binary installation"
Da most convenient way of installin a funky-ass binary distribution of perl is via perl installer
\&\fIinstall.exe\fR. Just follow tha instructions, n' 99% of the
installation blues would go away.
.PP
Note however, dat you need ta have \fIunzip.exe\fR on yo' path, and
\&\s-1EMX\s0 environment \fIrunning\fR. Da latta means dat if you just
installed \s-1EMX,\s0 n' made all tha needed chizzlez ta \fIConfig.sys\fR,
you may need ta reboot up in between. I aint talkin' bout chicken n' gravy biatch. Peep \s-1EMX\s0 runtime by hustlin
.PP
.Vb 1
\&        emxrev
.Ve
.PP
Binary installa also creates a gangbangin' folda on yo' desktop wit some useful
objects, n' you can put dat on yo' toast.  If you need ta chizzle some aspectz of tha work of tha binary
installer, feel free ta edit tha file \fIPerl.pkg\fR.  This may be useful
e.g., if you need ta run tha installa nuff times n' do not want to
make nuff interactizzle chizzlez up in tha \s-1GUI.\s0
.PP
\&\fBThings not taken care of by automatic binary installation:\fR
.ie n .IP """PERL_BADLANG""" 15
.el .IP "\f(CWPERL_BADLANG\fR" 15
.IX Item "PERL_BADLANG"
may be needed if you chizzle yo' codepage \fIafter\fR perl installation,
and tha freshly smoked up value aint supported by \s-1EMX.\s0 See \*(L"\s-1PERL_BADLANG\*(R"\s0.
.ie n .IP """PERL_BADFREE""" 15
.el .IP "\f(CWPERL_BADFREE\fR" 15
.IX Item "PERL_BADFREE"
see \*(L"\s-1PERL_BADFREE\*(R"\s0.
.IP "\fIConfig.pm\fR" 15
.IX Item "Config.pm"
This file resides somewhere deep up in tha location you installed your
perl library, find it up by
.Sp
.Vb 1
\&  perl \-MConfig \-le "print $INC{\*(AqConfig.pm\*(Aq}"
.Ve
.Sp
While most blingin joints up in dis file \fIare\fR updated by tha binary
installer, a shitload of dem may need ta be hand-edited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. I know no such
data, please keep me informed if you find one.  Mo'over, manual
changes ta tha installed version may need ta be accompanied by a edit
of dis file.
.PP
\&\fB\s-1NOTE\s0\fR. Because of a typo tha binary installa of 5.00305
would install a variable \f(CW\*(C`PERL_SHPATH\*(C'\fR tha fuck into \fIConfig.sys\fR. Please
remove dis variable n' put \f(CW"PERL_SH_DIR"\fR instead.
.SS "Manual binary installation"
.IX Subsection "Manual binary installation"
Az of version 5.00305, \s-1OS/2\s0 perl binary distribution comes split
into 11 components, n' you can put dat on yo' toast. Unfortunately, ta enable configurable binary
installation, tha file paths up in tha zip filez is not absolute yo, but
relatizzle ta some directory.
.PP
Note dat tha extraction wit tha stored paths is still necessary
(default wit unzip, specify \f(CW\*(C`\-d\*(C'\fR ta pkunzip). But fuck dat shiznit yo, tha word on tha street is dat you
need ta know where ta extract tha files. Yo ass need also ta manually
change entries up in \fIConfig.sys\fR ta reflect where did you put the
files. Note dat if you have some primitizzle unzipper (like
\&\f(CW\*(C`pkunzip\*(C'\fR), you may git a shitload of warnings/errors during
unzipping. Upgrade ta \f(CW\*(C`(w)unzip\*(C'\fR.
.PP
Below is tha sample of what tha fuck ta do ta reproduce tha configuration on my
machine.  In \fI\s-1VIEW.EXE\s0\fR you can press \f(CW\*(C`Ctrl\-Insert\*(C'\fR now, and
cut-and-paste from tha resultin file \- pimped up in tha directory you
started \fI\s-1VIEW.EXE\s0\fR from.
.PP
For each component, we mention environment variablez related ta each
installation directory.  Either chizzle directories ta match your
valuez of tha variables, or create/append\-to variablez ta take into
account tha directories.
.IP "Perl \s-1VIO\s0 n' \s-1PM\s0 executablez (dynamically linked)" 3
.IX Item "Perl VIO n' PM executablez (dynamically linked)"
.Vb 2
\&  unzip perl_exc.zip *.exe *.ico \-d f:/emx.add/bin
\&  unzip perl_exc.zip *.dll \-d f:/emx.add/dll
.Ve
.Sp
(have tha directories wit \f(CW\*(C`*.exe\*(C'\fR on \s-1PATH,\s0 n' \f(CW\*(C`*.dll\*(C'\fR on
\&\s-1LIBPATH\s0);
.IP "Perl_ \s-1VIO\s0 executable (statically linked)" 3
.IX Item "Perl_ VIO executable (statically linked)"
.Vb 1
\&  unzip perl_aou.zip \-d f:/emx.add/bin
.Ve
.Sp
(have tha directory on \s-1PATH\s0);
.IP "Executablez fo' Perl utilities" 3
.IX Item "Executablez fo' Perl utilities"
.Vb 1
\&  unzip perl_utl.zip \-d f:/emx.add/bin
.Ve
.Sp
(have tha directory on \s-1PATH\s0);
.IP "Main Perl library" 3
.IX Item "Main Perl library"
.Vb 1
\&  unzip perl_mlb.zip \-d f:/perllib/lib
.Ve
.Sp
If dis directory is exactly tha same as tha prefix which was compiled
into \fIperl.exe\fR, you do not need ta chizzle
anything. But fuck dat shiznit yo, tha word on tha street is dat fo' perl ta find tha library if you bust a gangbangin' finger-lickin' different
path, you need to
\&\f(CW\*(C`set PERLLIB_PREFIX\*(C'\fR up in \fIConfig.sys\fR, peep \*(L"\s-1PERLLIB_PREFIX\*(R"\s0.
.IP "Additionizzle Perl modules" 3
.IX Item "Additionizzle Perl modules"
.Vb 1
\&  unzip perl_ste.zip \-d f:/perllib/lib/site_perl/5.18.4/
.Ve
.Sp
Same remark as above applies. Put ya muthafuckin choppers up if ya feel dis!  Additionally, if dis directory is not
one of directories on \f(CW@INC\fR (and \f(CW@INC\fR is hyped up by \f(CW\*(C`PERLLIB_PREFIX\*(C'\fR), you
need ta put this
directory n' subdirectory \fI./os2\fR up in \f(CW\*(C`PERLLIB\*(C'\fR or \f(CW\*(C`PERL5LIB\*(C'\fR
variable. Do not use \f(CW\*(C`PERL5LIB\*(C'\fR unless you have it set already. Right back up in yo muthafuckin ass. See
\&\*(L"\s-1ENVIRONMENT\*(R"\s0 up in perl.
.Sp
\&\fB[Peep whether dis extraction directory is still applicable with
the freshly smoked up directory structure layout!]\fR
.IP "Tools ta compile Perl modules" 3
.IX Item "Tools ta compile Perl modules"
.Vb 1
\&  unzip perl_blb.zip \-d f:/perllib/lib
.Ve
.Sp
Same remark as fo' \fIperl_ste.zip\fR.
.IP "Manpages fo' Perl n' utilities" 3
.IX Item "Manpages fo' Perl n' utilities"
.Vb 1
\&  unzip perl_man.zip \-d f:/perllib/man
.Ve
.Sp
This directory should betta be on \f(CW\*(C`MANPATH\*(C'\fR. Yo ass need ta have a
workin \fIman\fR ta access these files.
.IP "Manpages fo' Perl modules" 3
.IX Item "Manpages fo' Perl modules"
.Vb 1
\&  unzip perl_mam.zip \-d f:/perllib/man
.Ve
.Sp
This directory should betta be on \f(CW\*(C`MANPATH\*(C'\fR. Yo ass need ta have a
workin playa ta access these files.
.IP "Source fo' Perl documentation" 3
.IX Item "Source fo' Perl documentation"
.Vb 1
\&  unzip perl_pod.zip \-d f:/perllib/lib
.Ve
.Sp
This is used by tha \f(CW\*(C`perldoc\*(C'\fR program (see perldoc), n' may be used to
generate \s-1HTML\s0 documentation usable by \s-1WWW\s0 browsers, and
documentation up in zillionz of other formats: \f(CW\*(C`info\*(C'\fR, \f(CW\*(C`LaTeX\*(C'\fR,
\&\f(CW\*(C`Acrobat\*(C'\fR, \f(CW\*(C`FrameMaker\*(C'\fR n' so on. I aint talkin' bout chicken n' gravy biatch.  [Use programs such as
\&\fIpod2latex\fR etc.]
.IP "Perl manual up in \fI.INF\fR format" 3
.IX Item "Perl manual up in .INF format"
.Vb 1
\&  unzip perl_inf.zip \-d d:/os2/book
.Ve
.Sp
This directory should betta be on \f(CW\*(C`BOOKSHELF\*(C'\fR.
.IP "Pdksh" 3
.IX Item "Pdksh"
.Vb 1
\&  unzip perl_sh.zip \-d f:/bin
.Ve
.Sp
This is used by perl ta run external commandz which explicitly
require shell, like tha commandz rockin \fIredirection\fR n' \fIshell
metacharacters\fR. Well shiiiit, it be also used instead of explicit \fI/bin/sh\fR.
.Sp
Set \f(CW\*(C`PERL_SH_DIR\*(C'\fR (see \*(L"\s-1PERL_SH_DIR\*(R"\s0) if you move \fIsh.exe\fR from
the above location.
.Sp
\&\fBNote.\fR It may be possible ta use some other sh-compatible shell (untested).
.PP
Afta you installed tha components you needed n' updated the
\&\fIConfig.sys\fR correspondingly, you need ta hand-edit
\&\fIConfig.pm\fR. This file resides somewhere deep up in tha location you
installed yo' perl library, find it up by
.PP
.Vb 1
\&  perl \-MConfig \-le "print $INC{\*(AqConfig.pm\*(Aq}"
.Ve
.PP
Yo ass need ta erect all tha entries which be lookin like file paths (they
currently start wit \f(CW\*(C`f:/\*(C'\fR).
.SS "\fBWarning\fP"
.IX Subsection "Warning"
Da automatic n' manual perl installation leave precompiled paths
inside perl executables. While these paths is overwriteable (see
\&\*(L"\s-1PERLLIB_PREFIX\*(R"\s0, \*(L"\s-1PERL_SH_DIR\*(R"\s0), some playas may prefer
binary editin of paths inside tha executables/DLLs.
.SH "Accessin documentation"
.IX Header "Accessin documentation"
Dependin on how tha fuck you built/installed perl you may have (otherwise
identical) Perl documentation up in tha followin formats:
.SS "\s-1OS/2 \s0\fI.INF\fP file"
.IX Subsection "OS/2 .INF file"
Most probably da most thugged-out convenient form. Under \s-1OS/2\s0 view it as
.PP
.Vb 4
\&  view perl
\&  view perl perlfunc
\&  view perl less
\&  view perl ExtUtils::MakeMaker
.Ve
.PP
(currently tha last two may hit a wack location yo, but dis may improve
soon). Under Win* peep \*(L"\s-1SYNOPSIS\*(R"\s0.
.PP
If you wanna build tha docs yo ass, n' have \fI\s-1OS/2\s0 toolkit\fR, run
.PP
.Vb 1
\&        pod2ipf > perl.ipf
.Ve
.PP
in \fI/perllib/lib/pod\fR directory, then
.PP
.Vb 1
\&        ipfc /inf perl.ipf
.Ve
.PP
(Expect a shitload of errors durin tha both steps.) Now move it on your
\&\s-1BOOKSHELF\s0 path.
.SS "Plain text"
.IX Subsection "Plain text"
If you have perl documentation up in tha source form, perl utilities
installed, n' \s-1GNU\s0 groff installed, you may use
.PP
.Vb 3
\&        perldoc perlfunc
\&        perldoc less
\&        perldoc ExtUtils::MakeMaker
.Ve
.PP
to access tha perl documentation up in tha text form (note dat you may get
betta thangs up in dis biatch rockin perl manpages).
.PP
Alternately, try hustlin pod2text on \fI.pod\fR files.
.SS "Manpages"
.IX Subsection "Manpages"
If you have \fIman\fR installed on yo' system, n' you installed perl
manpages, use suttin' like this:
.PP
.Vb 3
\&        playa perlfunc
\&        playa 3 less
\&        playa ExtUtils.MakeMaker
.Ve
.PP
to access documentation fo' different componentz of Perl. Right back up in yo muthafuckin ass. Start with
.PP
.Vb 1
\&        playa perl
.Ve
.PP
Note dat dot (\fI.\fR) is used as a package separator fo' documentation
for packages, n' as usual, sometimes you need ta give tha section \- \f(CW3\fR
above \- ta avoid shadowin by tha \fI\fIless\fI\|(1) manpage\fR.
.PP
Make shizzle dat tha directory \fBabove\fR tha directory wit manpages is
on our \f(CW\*(C`MANPATH\*(C'\fR, like this
.PP
.Vb 1
\&  set MANPATH=c:/man;f:/perllib/man
.Ve
.PP
for Perl manpages up in \f(CW\*(C`f:/perllib/man/man1/\*(C'\fR etc.
.SS "\s-1HTML\s0"
.IX Subsection "HTML"
If you have some \s-1WWW\s0 browser available, installed tha Perl
documentation up in tha source form, n' Perl utilities, you can build
\&\s-1HTML\s0 docs. Cd ta directory wit \fI.pod\fR files, n' do like this
.PP
.Vb 2
\&        cd f:/perllib/lib/pod
\&        pod2html
.Ve
.PP
Afta dis you can direct yo' browser tha file \fIperl.html\fR up in this
directory, n' go ahead wit readin docs, like this:
.PP
.Vb 1
\&        explore file:///f:/perllib/lib/pod/perl.html
.Ve
.PP
Alternatively you may be able ta git these docs prebuilt from \s-1CPAN.\s0
.ie n .SS "\s-1GNU \s0""info"" files"
.el .SS "\s-1GNU \s0\f(CWinfo\fP files"
.IX Subsection "GNU info files"
Userz of Emacs would appreciate it straight-up much, especially with
\&\f(CW\*(C`CPerl\*(C'\fR mode loaded. Y'all KNOW dat shit, muthafucka! Yo ass need ta git sickest fuckin \f(CW\*(C`pod2texi\*(C'\fR from \f(CW\*(C`CPAN\*(C'\fR,
or, alternately, tha prebuilt info pages.
.SS "\fI\s-1PDF\s0\fP files"
.IX Subsection "PDF files"
for \f(CW\*(C`Acrobat\*(C'\fR is available on \s-1CPAN \s0(may be fo' slightly olda version of
perl).
.ie n .SS """LaTeX"" docs"
.el .SS "\f(CWLaTeX\fP docs"
.IX Subsection "LaTeX docs"
can be constructed rockin \f(CW\*(C`pod2latex\*(C'\fR.
.SH "BUILD"
.IX Header "BUILD"
Here our phat asses say shit bout how tha fuck ta build Perl under \s-1OS/2.\s0
.SS "Da short story"
.IX Subsection "Da short story"
Assume dat yo ass be a seasoned porter, so is shizzle dat all tha necessary
tools is already present on yo' system, n' you know how tha fuck ta git tha Perl
source distribution. I aint talkin' bout chicken n' gravy biatch.  Untar it, chizzle ta tha extract directory, and
.PP
.Vb 7
\&  gnupatch \-p0 < os2\ediff.configure
\&  sh Configure \-des \-D prefix=f:/perllib
\&  make
\&  make test
\&  make install
\&  make aout_test
\&  make aout_install
.Ve
.PP
This puts tha executablez up in f:/perllib/bin. I aint talkin' bout chicken n' gravy biatch.  Manually move dem ta the
\&\f(CW\*(C`PATH\*(C'\fR, manually move tha built \fIperl*.dll\fR ta \f(CW\*(C`LIBPATH\*(C'\fR (here for
Perl \s-1DLL \s0\fI*\fR be a not-very-meaningful hex checksum), n' run
.PP
.Vb 1
\&  make installcmd INSTALLCMDDIR=d:/ir/on/path
.Ve
.PP
Assumin dat tha \f(CW\*(C`man\*(C'\fR\-filez was put on a appropriate location,
this completes tha installation of minimal Perl system.  (Da binary
distribution gotz nuff also a shitload of additionizzle modules, n' the
documentation up in \s-1INF\s0 format.)
.PP
What bigs up be a thugged-out detailed guide all up in these steps.
.SS "Prerequisites"
.IX Subsection "Prerequisites"
Yo ass need ta have tha sickest fuckin \s-1EMX\s0 pimpment environment, tha full
\&\s-1GNU\s0 tool suite (gawk renamed ta awk, n' \s-1GNU \s0\fIfind.exe\fR
earlier on path than tha \s-1OS/2 \s0\fIfind.exe\fR, same wit \fIsort.exe\fR, to
check use
.PP
.Vb 2
\&  find \-\-version
\&  sort \-\-version
.Ve
.PP
). Yo ass need tha sickest fuckin version of \fIpdksh\fR installed as \fIsh.exe\fR.
.PP
Peep dat you have \fB\s-1BSD\s0\fR libraries n' headaz installed, n' \- 
optionally \- Berkeley \s-1DB\s0 headaz n' libraries, n' crypt.
.PP
Possible locations ta git tha files:
.PP
.Vb 4
\&  ftp://ftp.uni\-heidelberg.de/pub/os2/unix/
\&  http://hobbes.nmsu.edu/h\-browse.php?dir=/pub/os2
\&  http://cd.textfiles.com/hobbesos29804/disk1/DEV32/
\&  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/
.Ve
.PP
It be reported dat tha followin archives contain enough utils to
build perl: \fIgnufutil.zip\fR, \fIgnusutil.zip\fR, \fIgnututil.zip\fR, \fIgnused.zip\fR,
\&\fIgnupatch.zip\fR, \fIgnuawk.zip\fR, \fIgnumake.zip\fR, \fIgnugrep.zip\fR, \fIbsddev.zip\fR and
\&\fIksh527rt.zip\fR (or a lata version).  Note dat all these utilitizzles are
known ta be available from \s-1LEO:\s0
.PP
.Vb 1
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/
.Ve
.PP
Note also dat tha \fIdb.lib\fR n' \fIdb.a\fR from tha \s-1EMX\s0 distribution
are not suitable fo' multi-threaded compile (even single-threaded
flavor of Perl uses multi-threaded C \s-1RTL,\s0 for
compatibilitizzle wit XFree86\-OS/2). Git a cold-ass lil erected one from
.PP
.Vb 1
\&  http://www.ilyaz.org/software/os2/db_mt.zip
.Ve
.PP
If you have \fIexactly tha same version of Perl\fR installed already,
make shizzle dat no copies or perl is currently hustlin.  Lata steps
of tha build may fail since a olda version of \fIperl.dll\fR loaded into
memory may be found. Y'all KNOW dat shit, muthafucka!  Hustlin \f(CW\*(C`make test\*(C'\fR becomes meaningless, since
the test is checkin a previous build of perl (this thang is detected
and reported by \fIlib/os2_base.t\fR test).  Do not forget ta unset
\&\f(CW\*(C`PERL_EMXLOAD_SEC\*(C'\fR up in environment.
.PP
Also make shizzle dat you have \fI/tmp\fR directory on tha current drive,
and \fI.\fR directory up in yo' \f(CW\*(C`LIBPATH\*(C'\fR. One may try ta erect the
latta condizzle by
.PP
.Vb 1
\&  set BEGINLIBPATH .\e.
.Ve
.PP
if you use suttin' like \fI\s-1CMD.EXE\s0\fR or sickest fuckin versions of
\&\fI4os2.exe\fR.  (Settin \s-1BEGINLIBPATH\s0 ta just \f(CW\*(C`.\*(C'\fR is ignored by the
\&\s-1OS/2\s0 kernel.)
.PP
Make shizzle yo' gcc is phat fo' \f(CW\*(C`\-Zomf\*(C'\fR linking: run \f(CW\*(C`omflibs\*(C'\fR
script up in \fI/emx/lib\fR directory.
.PP
Peep dat you have link386 installed. Y'all KNOW dat shit, muthafucka! Well shiiiit, it comes standard wit \s-1OS/2,\s0
but may be not installed cuz of customization. I aint talkin' bout chicken n' gravy biatch. If typing
.PP
.Vb 1
\&  link386
.Ve
.PP
shows you aint gots it, do \fISelectizzle install\fR, n' chizzle \f(CW\*(C`Link
object modules\*(C'\fR up in \fIOptionizzle system utilities/Mo'\fR. If you git into
link386 prompts, press \f(CW\*(C`Ctrl\-C\*(C'\fR ta exit.
.SS "Gettin perl source"
.IX Subsection "Gettin perl source"
Yo ass need ta fetch tha sickest fuckin perl source (includin pimpers
releases). With some probabilitizzle it is located in
.PP
.Vb 2
\&  http://www.cpan.org/src/
\&  http://www.cpan.org/src/unsupported
.Ve
.PP
If not, you may need ta dig up in tha indices ta find it up in tha directory
of tha current maintainer.
.PP
Quick cycle of pimpers release may break tha \s-1OS/2\s0 build time to
time, lookin into
.PP
.Vb 1
\&  http://www.cpan.org/ports/os2/
.Ve
.PP
may indicate tha sickest fuckin release which was publicly busted out by the
maintainer n' shit. Note dat tha release may include some additionizzle patches
to apply ta tha current source of perl.
.PP
Extract it like this
.PP
.Vb 1
\&  tar vzxf perl5.00409.tar.gz
.Ve
.PP
Yo ass may peep a message bout errors while extractin \fIConfigure\fR. This is
because there be a cold-ass lil conflict wit a similarly-named file \fIconfigure\fR.
.PP
Change ta tha directory of extraction.
.SS "Application of tha patches"
.IX Subsection "Application of tha patches"
Yo ass need ta apply tha patches up in \fI./os2/diff.*\fR like this:
.PP
.Vb 1
\&  gnupatch \-p0 < os2\ediff.configure
.Ve
.PP
Yo ass may also need ta apply tha patches supplied wit tha binary
distribution of perl.  It also make sense ta look on the
perl5\-portas mailin list fo' tha sickest fuckin OS/2\-related patches (see
<http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/>).  Such
patches probably contain strings \f(CW\*(C`/os2/\*(C'\fR n' \f(CW\*(C`patch\*(C'\fR, so it makes
sense lookin fo' these strings.
.SS "Hand-editing"
.IX Subsection "Hand-editing"
Yo ass may look tha fuck into tha file \fI./hints/os2.sh\fR n' erect anything
wrong you find there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. I do not expect it is needed anywhere.
.SS "Making"
.IX Subsection "Making"
.Vb 1
\&  sh Configure \-des \-D prefix=f:/perllib
.Ve
.PP
\&\f(CW\*(C`prefix\*(C'\fR means: where ta install tha resultin perl library. Giving
correct prefix you may avoid tha need ta specify \f(CW\*(C`PERLLIB_PREFIX\*(C'\fR,
see \*(L"\s-1PERLLIB_PREFIX\*(R"\s0.
.PP
\&\fIIgnore tha message bout missin \f(CI\*(C`ln\*(C'\fI, n' bout \f(CI\*(C`\-c\*(C'\fI option to
tr\fR. Da latta is most probably already fixed, if you peep it n' can trace
where tha latta spurious warnin be reppin, please inform mah dirty ass.
.PP
Now
.PP
.Vb 1
\&  make
.Ve
.PP
At some moment tha built may die, reportin a \fIversion mismatch\fR or
\&\fIunable ta run \fIperl\fI\fR.  This means dat you aint gots \fI.\fR in
your \s-1LIBPATH,\s0 so \fIperl.exe\fR cannot find tha needed \fIperl67B2.dll\fR (treat
these hex digits as line noise).  Afta dis is fixed tha build
should finish without a shitload of fuss.
.SS "Testing"
.IX Subsection "Testing"
Now run
.PP
.Vb 1
\&  make test
.Ve
.PP
All tests should succeed (with a shitload of dem skipped).  If you have the
same version of Perl installed, it is crucial dat you have \f(CW\*(C`.\*(C'\fR early
in yo' \s-1LIBPATH \s0(or up in \s-1BEGINLIBPATH\s0), otherwise yo' tests will most
probably test tha wack version of Perl.
.PP
Some tests may generate extra lyrics similar to
.ie n .IP "All dem ""bad free""" 4
.el .IP "All dem \f(CWbad free\fR" 4
.IX Item "All dem wack free"
in database tests related ta Berkeley \s-1DB. \s0\fIThis should be fixed already.\fR
If it persists, you may disable dis warnings, peep \*(L"\s-1PERL_BADFREE\*(R"\s0.
.IP "Process terminated by \s-1SIGTERM/SIGINT\s0" 4
.IX Item "Process terminated by SIGTERM/SIGINT"
This be a standard message issued by \s-1OS/2\s0 applications. *nix
applications take a thugged-out dirtnap up in silence. Well shiiiit, it is considered ta be a gangbangin' feature. One can
easily disable dis by appropriate sighandlezs.
.Sp
However tha test engine bleedz these message ta screen up in unexpected
moments, n' you can put dat on yo' toast. Two lyrics of dis kind \fIshould\fR be present during
testing.
.PP
To git finer test reports, call
.PP
.Vb 1
\&  perl t/harness
.Ve
.PP
Da report wit \fIio/pipe.t\fR failin may be lookin like this:
.PP
.Vb 5
\&  Failed Test  Status Wstat Total Fail  Failed  List of failed
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  io/pipe.t                    12    1   8.33%  9
\&  7 tests skipped, plus 56 subtests skipped.
\&  Failed 1/195 test scripts, 99.49% aiiight. 1/6542 subtests failed, 99.98% aiiight.
.Ve
.PP
Da reasons fo' most blingin skipped tests are:
.IP "\fIop/fs.t\fR" 8
.IX Item "op/fs.t"
.RS 8
.PD 0
.IP "18" 4
.IX Item "18"
.PD
Checks \f(CW\*(C`atime\*(C'\fR n' \f(CW\*(C`mtime\*(C'\fR of \f(CW\*(C`stat()\*(C'\fR \- unfortunately, \s-1HPFS\s0
provides only 2sec time granularitizzle (for compatibilitizzle wit \s-1FAT\s0?).
.IP "25" 4
.IX Item "25"
Checks \f(CW\*(C`truncate()\*(C'\fR on a gangbangin' filehandle just opened fo' write \- I do not
know why dis should or should not work.
.RE
.RS 8
.RE
.IP "\fIop/stat.t\fR" 8
.IX Item "op/stat.t"
Checks \f(CW\*(C`stat()\*(C'\fR. Tests:
.RS 8
.IP "4" 4
.IX Item "4"
Checks \f(CW\*(C`atime\*(C'\fR n' \f(CW\*(C`mtime\*(C'\fR of \f(CW\*(C`stat()\*(C'\fR \- unfortunately, \s-1HPFS\s0
provides only 2sec time granularitizzle (for compatibilitizzle wit \s-1FAT\s0?).
.RE
.RS 8
.RE
.SS "Installin tha built perl"
.IX Subsection "Installin tha built perl"
If you aint yet moved \f(CW\*(C`perl*.dll\*(C'\fR onto \s-1LIBPATH,\s0 do it now, nahmeean?
.PP
Run
.PP
.Vb 1
\&  make install
.Ve
.PP
It would put tha generated filez tha fuck into needed locations. Manually put
\&\fIperl.exe\fR, \fIperl_\|_.exe\fR n' \fIperl_\|_\|_.exe\fR ta a location on your
\&\s-1PATH, \s0\fIperl.dll\fR ta a location on yo' \s-1LIBPATH.\s0
.PP
Run
.PP
.Vb 1
\&  make installcmd INSTALLCMDDIR=d:/ir/on/path
.Ve
.PP
to convert perl utilitizzles ta \fI.cmd\fR filez n' put dem on
\&\s-1PATH.\s0 Yo ass need ta put \fI.EXE\fR\-utilitizzles on path manually. They are
installed up in \f(CW\*(C`$prefix/bin\*(C'\fR, here \f(CW$prefix\fR is what tha fuck you gave to
\&\fIConfigure\fR, peep \*(L"Making\*(R".
.PP
If you use \f(CW\*(C`man\*(C'\fR, either move tha installed \fI*/man/\fR directories to
your \f(CW\*(C`MANPATH\*(C'\fR, or modify \f(CW\*(C`MANPATH\*(C'\fR ta match tha location. I aint talkin' bout chicken n' gravy biatch.  (One
could have avoided dis by providin a cold-ass lil erect \f(CW\*(C`manpath\*(C'\fR option to
\&\fI./Configure\fR, or editin \fI./config.sh\fR between configurin and
makin steps.)
.ie n .SS """a.out""\-style build"
.el .SS "\f(CWa.out\fP\-style build"
.IX Subsection "a.out-style build"
Proceed as above yo, but make \fIperl_.exe\fR (see \*(L"perl_.exe\*(R") by
.PP
.Vb 1
\&  make perl_
.Ve
.PP
test n' install by
.PP
.Vb 2
\&  make aout_test
\&  make aout_install
.Ve
.PP
Manually put \fIperl_.exe\fR ta a location on yo' \s-1PATH.\s0
.PP
\&\fBNote.\fR Da build process fo' \f(CW\*(C`perl_\*(C'\fR \fIdoes not know\fR bout all the
dependencies, so you should make shizzle dat anythang is up-to-date,
say, by bustin
.PP
.Vb 1
\&  make perl_dll
.Ve
.PP
first.
.SH "Buildin a funky-ass binary distribution"
.IX Header "Buildin a funky-ass binary distribution"
[This section serves up a gangbangin' finger-lickin' dirty-ass short overview only...]
.PP
Buildin should proceed differently dependin on whether tha version of perl
you install be already present n' used on yo' system, or be a freshly smoked up version
not yet used. Y'all KNOW dat shit, muthafucka!  Da description below assumes dat tha version is new, so
installin its DLLs n' \fI.pm\fR filez aint gonna disrupt tha operation of your
system even if some intermediate steps is not yet straight-up working.
.PP
Da other cases require a lil bit mo' convoluted procedures.  Below I
suppose dat tha current version of Perl is \f(CW5.8.2\fR, so tha executablez are
named accordingly.
.IP "1." 4
Fully build n' test tha Perl distribution. I aint talkin' bout chicken n' gravy biatch.  Make shizzle dat no tests are
failin wit \f(CW\*(C`test\*(C'\fR n' \f(CW\*(C`aout_test\*(C'\fR targets; fix tha bugs up in Perl and
the Perl test suite detected by these tests, n' you can put dat on yo' toast.  Make shizzle dat \f(CW\*(C`all_test\*(C'\fR
make target runs as clean as possible.  Peep dat \fIos2/perlrexx.cmd\fR
runs fine.
.IP "2." 4
Fully install Perl, includin \f(CW\*(C`installcmd\*(C'\fR target.  Copy tha generated DLLs
to \f(CW\*(C`LIBPATH\*(C'\fR; copy tha numbered Perl executablez (as up in \fIperl5.8.2.exe\fR)
to \f(CW\*(C`PATH\*(C'\fR; copy \f(CW\*(C`perl_.exe\*(C'\fR ta \f(CW\*(C`PATH\*(C'\fR as \f(CW\*(C`perl_5.8.2.exe\*(C'\fR.  Think whether
you need backward-compatibilitizzle DLLs.  In most cases you do not need ta install
them yet; but sometime dis may simplify tha followin steps.
.IP "3." 4
Make shizzle dat \f(CW\*(C`CPAN.pm\*(C'\fR can downlizzle filez from \s-1CPAN. \s0 If not, you may need
to manually install \f(CW\*(C`Net::FTP\*(C'\fR.
.IP "4." 4
Install tha bundle \f(CW\*(C`Bundle::OS2_default\*(C'\fR
.Sp
.Vb 1
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_1
.Ve
.Sp
This may take a cold-ass lil couple minutes on 1GHz processor (when run tha last time).
And dis should not be necessarily a smooth procedure.  Some modulez may not
specify required dependencies, so one may need ta repeat dis procedure several
times until tha thangs up in dis biatch stabilize.
.Sp
.Vb 2
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_2
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_3
.Ve
.Sp
Even afta they stabilize, some tests may fail.
.Sp
Fix as nuff discovered bugs as possible.  Document all tha bugs which is not
fixed, n' all tha failures wit unknown reasons.  Inspect tha produced logs
\&\fI00cpan_i_1\fR ta find suspiciously skipped tests, n' other fishy events.
.Sp
Keep it realz in mind dat \fIinstallation\fR of some modulez may fail too: fo' example,
the DLLs ta update may be already loaded by \fI\s-1CPAN\s0.pm\fR.  Inspect tha \f(CW\*(C`install\*(C'\fR
logs (in tha example above \fI00cpan_i_1\fR etc) fo' errors, n' install thangs
manually, as in
.Sp
.Vb 2
\&  cd $CPANHOME/.cpan/build/Digest\-MD5\-2.31
\&  make install
.Ve
.Sp
Some distributions may fail some tests yo, but you may wanna install them
anyway (as above, or via \f(CW\*(C`force install\*(C'\fR command of \f(CW\*(C`CPAN.pm\*(C'\fR shell-mode).
.Sp
Since dis procedure may take like a long-ass time ta complete, it make sense
to \*(L"freeze\*(R" yo' \s-1CPAN\s0 configuration by disablin periodic thugged-out shiznit of the
local copy of \s-1CPAN\s0 index: set \f(CW\*(C`index_expire\*(C'\fR ta some big-ass value (I use 365),
then save tha settings
.Sp
.Vb 2
\&  CPAN> o conf index_expire 365
\&  CPAN> o conf commit
.Ve
.Sp
Reset back ta tha default value \f(CW1\fR when yo ass is finished.
.IP "5." 4
When satisfied wit tha thangs up in dis biatch, rerun tha \f(CW\*(C`installcmd\*(C'\fR target.  Now you
can copy \f(CW\*(C`perl5.8.2.exe\*(C'\fR ta \f(CW\*(C`perl.exe\*(C'\fR, n' install tha other OMF-build
executables: \f(CW\*(C`perl_\|_.exe\*(C'\fR etc.  They is locked n loaded ta be used.
.IP "6." 4
Change ta tha \f(CW\*(C`./pod\*(C'\fR directory of tha build tree, downlizzle tha Perl logo
\&\fICamelGrayBig.BMP\fR, n' run
.Sp
.Vb 2
\&  ( perl2ipf > perl.ipf ) |& tee 00ipf
\&  ipfc /INF perl.ipf |& tee 00inf
.Ve
.Sp
This produces tha Perl docs online book \f(CW\*(C`perl.INF\*(C'\fR.  Install up in on
\&\f(CW\*(C`BOOKSHELF\*(C'\fR path.
.IP "7." 4
Now is tha time ta build statically linked executable \fIperl_.exe\fR which
includes newly-installed via \f(CW\*(C`Bundle::OS2_default\*(C'\fR modules.  Bustin testing
via \f(CW\*(C`CPAN.pm\*(C'\fR is goin ta be painfully slow, since it statically links
a freshly smoked up executable per \s-1XS\s0 extension.
.Sp
Here be a possible workaround: create a toplevel \fIMakefile.PL\fR in
\&\fI\f(CI$CPANHOME\fI/.cpan/build/\fR wit contents bein (compare wit \*(L"Making
executablez wit a cold-ass lil custom collection of statically loaded extensions\*(R")
.Sp
.Vb 2
\&  use ExtUtils::MakeMaker;
\&  WriteMakefile NAME => \*(Aqdummy\*(Aq;
.Ve
.Sp
execute dis as
.Sp
.Vb 2
\&  perl_5.8.2.exe Makefile.PL <nul |& tee 00aout_c1
\&  make \-k all test <nul |& 00aout_t1
.Ve
.Sp
Again, dis procedure should not be straight-up smooth.  Some \f(CW\*(C`Makefile.PL\*(C'\fR's
in subdirectories may be buggy, n' would not run as \*(L"child\*(R" scripts, n' you can put dat on yo' toast.  The
interdependency of modulez can strike you; however, since non-XS modules
are already installed, tha prerequisitez of most modulez gotz a straight-up good
chizzle ta be present.
.Sp
If you discover some glitches, move directoriez of problematic modulez ta a
different location; if these modulez is non-XS modules, you may just ignore
them \- they is already installed; tha remaining, \s-1XS,\s0 modulez you need to
install manually one by one.
.Sp
Afta each such removal you need ta rerun tha \f(CW\*(C`Makefile.PL\*(C'\fR/\f(CW\*(C`make\*(C'\fR process;
usually dis procedure converges soon. I aint talkin' bout chicken n' gravy biatch.  (But be shizzle ta convert all the
necessary external C libraries from \fI.lib\fR format ta \fI.a\fR format: run one of
.Sp
.Vb 2
\&  emxaout foo.lib
\&  emximp \-o foo.a foo.lib
.Ve
.Sp
whichever be appropriate.)  Also, make shizzle dat tha DLLs fo' external
libraries is usable wit with executablez compiled without \f(CW\*(C`\-Zmtd\*(C'\fR options.
.Sp
When yo ass is shizzle dat only all dem subdirectories
lead ta failures, you may wanna add \f(CW\*(C`\-j4\*(C'\fR option ta \f(CW\*(C`make\*(C'\fR ta speed up
skippin subdirectories wit already finished build.
.Sp
When yo ass is satisfied wit tha thangs up in dis biatch of tests, install tha build C libraries
for extensions:
.Sp
.Vb 1
\&  make install |& tee 00aout_i
.Ve
.Sp
Now you can rename tha file \fI./perl.exe\fR generated durin tha last phase
to \fIperl_5.8.2.exe\fR; place it on \f(CW\*(C`PATH\*(C'\fR; if there be a inter-dependency
between some \s-1XS\s0 modules, you may need ta repeat tha \f(CW\*(C`test\*(C'\fR/\f(CW\*(C`install\*(C'\fR loop
with dis freshly smoked up executable n' some excluded modulez \- until tha procedure
converges.
.Sp
Now you have all tha necessary \fI.a\fR libraries fo' these Perl modulez up in the
places where Perl builder can find dat shit.  Use tha perl builder: chizzle ta an
empty directory, create a \*(L"dummy\*(R" \fIMakefile.PL\fR again, n' run
.Sp
.Vb 2
\&  perl_5.8.2.exe Makefile.PL |& tee 00c
\&  make perl                  |& tee 00p
.Ve
.Sp
This should create a executable \fI./perl.exe\fR wit all tha statically loaded
extensions built in. I aint talkin' bout chicken n' gravy biatch.  Compare tha generated \fIperlmain.c\fR filez ta make sure
that durin tha iterations tha number of loaded extensions only increases.
Rename \fI./perl.exe\fR ta \fIperl_5.8.2.exe\fR on \f(CW\*(C`PATH\*(C'\fR.
.Sp
When it converges, you gots a gangbangin' functionizzle variant of \fIperl_5.8.2.exe\fR; copy it
to \f(CW\*(C`perl_.exe\*(C'\fR.  Yo ass is done wit generation of tha local Perl installation.
.IP "8." 4
Make shizzle dat tha installed modulez is straight-up installed up in tha location
of tha freshly smoked up Perl, n' is not inherited from entriez of \f(CW@INC\fR given for
inheritizzle from tha olda versionz of Perl: set \f(CW\*(C`PERLLIB_582_PREFIX\*(C'\fR to
redirect tha freshly smoked up version of Perl ta a freshly smoked up location, n' copy tha installed
filez ta dis freshly smoked up location. I aint talkin' bout chicken n' gravy biatch.  Redo tha tests ta make shizzle dat tha versions of
modulez inherited from olda versionz of Perl is not needed.
.Sp
Actually, tha log output of \fIpod2ipf\fR\|(1) durin tha step 6 gives a straight-up detailed
info bout which modulez is loaded from which place; so you may use it as
an additionizzle verification tool.
.Sp
Peep dat some temporary filez did not make tha fuck into tha perl install tree.
Run suttin' like this
.Sp
.Vb 1
\&  pfind . \-f "!(/\e.(pm|pl|ix|al|h|a|lib|txt|pod|imp|bs|dll|ld|bs|inc|xbm|yml|cgi|uu|e2x|skip|packlist|eg|cfg|html|pub|enc|all|ini|po|pot)$/i or /^\ew+$/") | less
.Ve
.Sp
in tha install tree (both top one n' \fIsitelib\fR one).
.Sp
Compress all tha DLLs wit \fIlxlite\fR.  Da tiny \fI.exe\fR can be compressed with
\&\f(CW\*(C`/c:max\*(C'\fR (the bug only appears when there be a gangbangin' fixup up in tha last 6 bytez of a
page (?); since tha tiny executablez is much smalla than a page, tha bug
will not hit).  Do not compress \f(CW\*(C`perl_.exe\*(C'\fR \- it would not work under \s-1DOS.\s0
.IP "9." 4
Now you can generate tha binary distribution. I aint talkin' bout chicken n' gravy biatch.  This is done by hustlin the
test of tha \s-1CPAN\s0 distribution \f(CW\*(C`OS2::SoftInstaller\*(C'\fR.  Tune up tha file
\&\fItest.pl\fR ta suit tha layout of current version of Perl first.  Do not
forget ta pack tha necessary external DLLs accordingly.  Include the
description of tha bugs n' test suite failures you could not fix.  Include
the small-stack versionz of Perl executablez from Perl build directory.
.Sp
Include \fIperl5.def\fR so dat playas can relink tha perl \s-1DLL\s0 preserving
the binary compatibility, or can create compatibilitizzle DLLs.  Include tha diff
filez (\f(CW\*(C`diff \-pu oldschool new\*(C'\fR) of fixes you did so dat playas can rebuild your
version. I aint talkin' bout chicken n' gravy biatch.  Include \fIperl5.map\fR so dat one can use remote debugging.
.IP "10." 4
Smoke up what tha fuck you did wit tha other people.  Relax.  Trip off fruitz of yo' work.
.IP "11." 4
Brace yo ass fo' props, bug reports, don't give a fuck bout mail n' spam comin as result
of tha previous step.  No phat deed should remain unpunished!
.SH "Buildin custom \fI.EXE\fP files"
.IX Header "Buildin custom .EXE files"
Da Perl executablez can be easily rebuilt at any moment.  Mo'over, one can
use tha \fIembedding\fR intercourse (see perlembed) ta make straight-up customized
executables.
.SS "Makin executablez wit a cold-ass lil custom collection of statically loaded extensions"
.IX Subsection "Makin executablez wit a cold-ass lil custom collection of statically loaded extensions"
It be a lil bit easier ta do so while \fIdecreasing\fR tha list of statically
loaded extensions.  Us dudes say shit bout dis case only here.
.IP "1." 4
Change ta a empty directory, n' create a placeholda <Makefile.PL>:
.Sp
.Vb 2
\&  use ExtUtils::MakeMaker;
\&  WriteMakefile NAME => \*(Aqdummy\*(Aq;
.Ve
.IP "2." 4
Run it wit tha flavor of Perl (\fIperl.exe\fR or \fIperl_.exe\fR) you want to
rebuild.
.Sp
.Vb 1
\&  perl_ Makefile.PL
.Ve
.IP "3." 4
Ask it ta create freshly smoked up Perl executable:
.Sp
.Vb 1
\&  make perl
.Ve
.Sp
(you may need ta manually add \f(CW\*(C`PERLTYPE=\-DPERL_CORE\*(C'\fR ta dis commandline on
some versionz of Perl; tha symptom is dat tha command-line globbin do not
work from \s-1OS/2\s0 shells wit tha newly-compiled executable; check with
.Sp
.Vb 1
\&  .\eperl.exe \-wle "print fo' @ARGV" *
.Ve
.Sp
).
.IP "4." 4
Da previous step pimped \fIperlmain.c\fR which gotz nuff a list of \fInewXS()\fR calls
near tha end yo, but it ain't no stoppin cause I be still poppin'.  Removin unnecessary calls, n' rerunning
.Sp
.Vb 1
\&  make perl
.Ve
.Sp
will produce a cold-ass lil customized executable.
.SS "Makin executablez wit a cold-ass lil custom search-paths"
.IX Subsection "Makin executablez wit a cold-ass lil custom search-paths"
Da default perl executable is flexible enough ta support most usages.
But fuck dat shiznit yo, tha word on tha street is dat one may want suttin' yet mo' flexible; fo' example, one may want
to find Perl \s-1DLL\s0 relatively ta tha location of tha \s-1EXE\s0 file; or one may want
to ignore tha environment when settin tha Perl-library search patch, etc.
.PP
If you fill laid back wit \fIembedding\fR intercourse (see perlembed), such
things is easy as fuck  ta do repeatin tha steps outlined up in \*(L"Making
executablez wit a cold-ass lil custom collection of statically loaded extensions\*(R", and
fuckin wit mo' comprehensive edits ta \fImain()\fR of \fIperlmain.c\fR.  Da playas with
lil desire ta KNOW Perl can just rename \fImain()\fR, n' do necessary
modification up in a cold-ass lil custom \fImain()\fR which calls tha renamed function up in appropriate
time.
.PP
But fuck dat shiznit yo, tha word on tha street is dat there be a third way: perl \s-1DLL\s0 exports tha \fImain()\fR function n' several
callbacks ta customize tha search path.  Below be a cold-ass lil complete example of a
\&\*(L"Perl loader\*(R" which
.IP "1." 4
Looks fo' Perl \s-1DLL\s0 up in tha directory \f(CW\*(C`$exedir/../dll\*(C'\fR;
.IP "2." 4
Prependz tha above directory ta \f(CW\*(C`BEGINLIBPATH\*(C'\fR;
.IP "3." 4
Fails if tha Perl \s-1DLL\s0 found via \f(CW\*(C`BEGINLIBPATH\*(C'\fR is different from what tha fuck was
loaded on step 1; e.g., another process could have loaded it from \f(CW\*(C`LIBPATH\*(C'\fR
or from a gangbangin' finger-lickin' different value of \f(CW\*(C`BEGINLIBPATH\*(C'\fR.  In these cases one needz to
modify tha settin of tha system so dat dis other process either do not
run, or loadz tha \s-1DLL\s0 from \f(CW\*(C`BEGINLIBPATH\*(C'\fR wit \f(CW\*(C`LIBPATHSTRICT=T\*(C'\fR (available
with kernels afta September 2000).
.IP "4." 4
Loadz Perl library from \f(CW\*(C`$exedir/../dll/lib/\*(C'\fR.
.IP "5." 4
Uses Bourne shell from \f(CW\*(C`$exedir/../dll/sh/ksh.exe\*(C'\fR.
.PP
For dopest thangs up in dis biatch compile tha C file below wit tha same options as tha Perl
\&\s-1DLL. \s0 But fuck dat shiznit yo, tha word on tha street is dat a shitload of functionalitizzle will work even if tha executable is not
an \s-1EMX\s0 applications, e.g., if compiled with
.PP
.Vb 1
\&  gcc \-Wall \-DDOSISH \-DOS2=1 \-O2 \-s \-Zomf \-Zsys perl\-starter.c \-DPERL_DLL_BASENAME=\e"perl312F\e" \-Zstack 8192 \-Zlinker /PM:VIO
.Ve
.PP
Here is tha sample C file:
.PP
.Vb 5
\&  #define INCL_DOS
\&  #define INCL_NOPM
\&  /* These is needed fo' compile if os2.h includes os2tk.h, not os2emx.h */
\&  #define INCL_DOSPROCESS
\&  #include <os2.h>
\&
\&  #include "EXTERN.h"
\&  #define PERL_IN_MINIPERLMAIN_C
\&  #include "perl.h"
\&
\&  static char *me;
\&  HMODULE handle;
\&
\&  static void
\&  die_with(char *msg1, char *msg2, char *msg3, char *msg4)
\&  {
\&     ULONG c;
\&     char *s = " error: ";
\&
\&     DosWrite(2, me, strlen(me), &c);
\&     DosWrite(2, s, strlen(s), &c);
\&     DosWrite(2, msg1, strlen(msg1), &c);
\&     DosWrite(2, msg2, strlen(msg2), &c);
\&     DosWrite(2, msg3, strlen(msg3), &c);
\&     DosWrite(2, msg4, strlen(msg4), &c);
\&     DosWrite(2, "\er\en", 2, &c);
\&     exit(255);
\&  }
\&
\&  typedef ULONG (*fill_extLibpath_t)(int type, char *pre, char *post, int replace, char *msg);
\&  typedef int (*main_t)(int type, char *argv[], char *env[]);
\&  typedef int (*handlez_t)(void* data, int which);
\&
\&  #ifndef PERL_DLL_BASENAME
\&  #  define PERL_DLL_BASENAME "perl"
\&  #endif
\&
\&  static HMODULE
\&  load_perl_dll(char *basename)
\&  {
\&      char buf[300], fail[260];
\&      STRLEN l, dirl;
\&      fill_extLibpath_t f;
\&      ULONG rc_fullname;
\&      HMODULE handle, handle1;
\&
\&      if (_execname(buf, sizeof(buf) \- 13) != 0)
\&          die_with("Can\*(Aqt find full path: ", strerror(errno), "", "");
\&      /* XXXX Fill \*(Aqme\*(Aq wit freshly smoked up value */
\&      l = strlen(buf);
\&      while (l && buf[l\-1] != \*(Aq/\*(Aq && buf[l\-1] != \*(Aq\e\e\*(Aq)
\&          l\-\-;
\&      dirl = l \- 1;
\&      strcpy(buf + l, basename);
\&      l += strlen(basename);
\&      strcpy(buf + l, ".dll");
\&      if ( (rc_fullname = DosLoadModule(fail, sizeof fail, buf, &handle)) != 0
\&           && DosLoadModule(fail, sizeof fail, basename, &handle) != 0 )
\&          die_with("Can\*(Aqt load DLL ", buf, "", "");
\&      if (rc_fullname)
\&          return handle;                /* was loaded wit short name; all is fine */
\&      if (DosQueryProcAddr(handle, 0, "fill_extLibpath", (PFN*)&f))
\&          die_with(buf, ": DLL exports no symbol ", "fill_extLibpath", "");
\&      buf[dirl] = 0;
\&      if (f(0 /*BEGINLIBPATH*/, buf /* prepend */, NULL /* append */,
\&            0 /* keep oldschool value */, me))
\&          die_with(me, ": prependin BEGINLIBPATH", "", "");
\&      if (DosLoadModule(fail, sizeof fail, basename, &handle1) != 0)
\&          die_with(me, ": findin perl DLL again n' again n' again via BEGINLIBPATH", "", "");
\&      buf[dirl] = \*(Aq\e\e\*(Aq;     
\&      if (handle1 != handle) {
\&          if (DosQueryModuleName(handle1, sizeof(fail), fail))
\&              strcpy(fail, "???");
\&          die_with(buf, ":\en\etperl DLL via BEGINLIBPATH is different: \en\et",
\&                   fail,
\&                   "\en\etYo ass may need ta manipulate global BEGINLIBPATH n' LIBPATHSTRICT"
\&                   "\en\etso dat tha other copy is loaded via BEGINLIBPATH.");
\&      }
\&      return handle;
\&  }
\&
\&  int
\&  main(int argc, char **argv, char **env)
\&  {
\&      main_t f;
\&      handlez_t h;
\&
\&      me = argv[0];
\&      /**/
\&      handle = load_perl_dll(PERL_DLL_BASENAME);
\&
\&      if (DosQueryProcAddr(handle, 0, "Perl_OS2_handlez_install", (PFN*)&h))
\&          die_with(PERL_DLL_BASENAME, ": DLL exports no symbol ", "Perl_OS2_handlez_install", "");
\&      if ( !h((void *)"~installprefix", Perlos2_handlez_perllib_from)
\&           || !h((void *)"~dll", Perlos2_handlez_perllib_to)
\&           || !h((void *)"~dll/sh/ksh.exe", Perlos2_handlez_perl_sh) )
\&          die_with(PERL_DLL_BASENAME, ": Can\*(Aqt install @INC manglers", "", "");
\&
\&      if (DosQueryProcAddr(handle, 0, "dll_perlmain", (PFN*)&f))
\&          die_with(PERL_DLL_BASENAME, ": DLL exports no symbol ", "dll_perlmain", "");
\&      return f(argc, argv, env);
\&  }
.Ve
.SH "Build FAQUIZZY"
.IX Header "Build FAQUIZZY"
.ie n .SS "Some ""/"" became ""\e"" up in pdksh."
.el .SS "Some \f(CW/\fP became \f(CW\e\fP up in pdksh."
.IX Subsection "Some / became up in pdksh."
Yo ass gotz a straight-up oldschool pdksh. Right back up in yo muthafuckin ass. See \*(L"Prerequisites\*(R".
.ie n .SS "\*(Aqerrno\*(Aq \- unresolved external"
.el .SS "\f(CW\*(Aqerrno\*(Aq\fP \- unresolved external"
.IX Subsection "errno - unresolved external"
Yo ass aint gots MT-safe \fIdb.lib\fR. Right back up in yo muthafuckin ass. See \*(L"Prerequisites\*(R".
.SS "Problems wit tr or sed"
.IX Subsection "Problems wit tr or sed"
reported wit straight-up oldschool version of tr n' sed.
.SS "Some problem (forget which ;\-)"
.IX Subsection "Some problem (forget which ;-)"
Yo ass have a olda version of \fIperl.dll\fR on yo' \s-1LIBPATH,\s0 which
broke tha build of extensions.
.SS "Library ... not found"
.IX Subsection "Library ... not found"
Yo ass did not run \f(CW\*(C`omflibs\*(C'\fR. Right back up in yo muthafuckin ass. See \*(L"Prerequisites\*(R".
.SS "Segfault up in make"
.IX Subsection "Segfault up in make"
Yo ass use a oldschool version of \s-1GNU\s0 make. Right back up in yo muthafuckin ass. See \*(L"Prerequisites\*(R".
.SS "op/sprintf test failure"
.IX Subsection "op/sprintf test failure"
This can result from a funky-ass bug up in emx sprintf which was fixed up in 0.9d fix 03.
.SH "Specific (mis)featurez of OS/2 port"
.IX Header "Specific (mis)featurez of OS/2 port"
.ie n .SS """setpriority"", ""getpriority"""
.el .SS "\f(CWsetpriority\fP, \f(CWgetpriority\fP"
.IX Subsection "setpriority, getpriority"
Note dat these functions is compatible wit *nix, not wit tha older
portz of '94 \- 95. Da prioritizzles is absolute, go from 32 ta \-95,
lower is quicker n' shit. 0 is tha default priority.
.PP
\&\fB\s-1WARNING\s0\fR.  Callin \f(CW\*(C`getpriority\*(C'\fR on a non-existin process could lock
the system before Warp3 fixpak22.  Startin wit Warp3, Perl will use
a workaround: it aborts \fIgetpriority()\fR if tha process aint present.
This aint possible on olda versions \f(CW\*(C`2.*\*(C'\fR, n' has a race
condizzle anyway.
.ie n .SS """system()"""
.el .SS "\f(CWsystem()\fP"
.IX Subsection "system()"
Multi-argument form of \f(CW\*(C`system()\*(C'\fR allows a additionizzle numeric
argument. Da meanin of dis argument is busted lyrics bout in
OS2::Process.
.PP
When findin a program ta run, Perl first asks tha \s-1OS\s0 ta look fo' executables
on \f(CW\*(C`PATH\*(C'\fR (\s-1OS/2\s0 addz extension \fI.exe\fR if no extension is present).
If not found, it looks fo' a script wit possible extensions 
added up in dis order: no extension, \fI.cmd\fR, \fI.btm\fR, 
\&\fI.bat\fR, \fI.pl\fR.  If found, Perl checks tha start of tha file fo' magic
strings \f(CW"#!"\fR n' \f(CW"extproc "\fR.  If found, Perl uses tha rest of the
first line as tha beginnin of tha command line ta run dis script.  The
only manglin done ta tha straight-up original gangsta line is extraction of arguments (currently
up ta 3), n' ignorin of tha path-part of tha \*(L"interpreter\*(R" name if it can't
be found rockin tha full path.
.PP
E.g., \f(CW\*(C`system \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq\*(C'\fR may lead Perl ta finding
\&\fIC:/emx/bin/foo.cmd\fR wit tha straight-up original gangsta line being
.PP
.Vb 1
\& extproc /bin/bash    \-x   \-c
.Ve
.PP
If \fI/bin/bash.exe\fR aint found, then Perl looks fo' a executable \fIbash.exe\fR on
\&\f(CW\*(C`PATH\*(C'\fR.  If found up in \fIC:/emx.add/bin/bash.exe\fR, then tha above \fIsystem()\fR is
translated to
.PP
.Vb 1
\&  system qw(C:/emx.add/bin/bash.exe \-x \-c C:/emx/bin/foo.cmd bar baz)
.Ve
.PP
One additionizzle translation is performed: instead of \fI/bin/sh\fR Perl uses
the hardwired-or-customized shell (see \f(CW"PERL_SH_DIR"\fR).
.PP
Da above search fo' \*(L"interpreter\*(R" is recursive: if \fIbash\fR executable is not
found yo, but \fIbash.btm\fR is found, Perl will rewind its first line etc.
Da only hardwired limit on tha recursion depth is implicit: there be a limit
4 on tha number of additionizzle arguments banged before tha actual arguments
given ta \fIsystem()\fR.  In particular, if no additionizzle arguments is specified
on tha \*(L"magic\*(R" first lines, then tha limit on tha depth is 4.
.PP
If Perl findz dat tha found executable iz of \s-1PM\s0 type when the
current session is not, it will start tha freshly smoked up process up in a separate session of
necessary type.  Call via \f(CW\*(C`OS2::Process\*(C'\fR ta disable dis magic.
.PP
\&\fB\s-1WARNING\s0\fR.  Cuz of tha busted lyrics bout logic, you need ta explicitly
specify \fI.com\fR extension if needed. Y'all KNOW dat shit, muthafucka!  Mo'over, if tha executable
\&\fIperl5.6.1\fR is requested, Perl aint gonna look fo' \fIperl5.6.1.exe\fR.
[This may chizzle up in tha future.]
.ie n .SS """extproc"" on tha straight-up original gangsta line"
.el .SS "\f(CWextproc\fP on tha straight-up original gangsta line"
.IX Subsection "extproc on tha straight-up original gangsta line"
If tha straight-up original gangsta charz of a Perl script is \f(CW"extproc "\fR, dis line is treated
as \f(CW\*(C`#!\*(C'\fR\-line, thus all tha switches on dis line is processed (twice
if script was started via cmd.exe).  See \*(L"\s-1DESCRIPTION\*(R"\s0 up in perlrun.
.SS "Additionizzle modules:"
.IX Subsection "Additionizzle modules:"
OS2::Process, \s-1OS2::DLL\s0, \s-1OS2::REXX\s0, OS2::PrfDB, OS2::ExtAttr. Shiiit, dis aint no joke. These
modulez provide access ta additionizzle numeric argument fo' \f(CW\*(C`system\*(C'\fR
and ta tha shiznit bout tha hustlin process,
to DLLs havin functions wit \s-1REXX\s0 signature n' ta tha \s-1REXX\s0 runtime, to
\&\s-1OS/2\s0 databases up in tha \fI.INI\fR format, n' ta Extended Attributes.
.PP
Two additionizzle extensions by Andreas Kaiser, \f(CW\*(C`OS2::UPM\*(C'\fR, and
\&\f(CW\*(C`OS2::FTP\*(C'\fR, is included tha fuck into \f(CW\*(C`ILYAZ\*(C'\fR directory, mirrored on \s-1CPAN.\s0
Other OS/2\-related extensions is available like a muthafucka.
.SS "Prebuilt methods:"
.IX Subsection "Prebuilt methods:"
.ie n .IP """File::Copy::syscopy""" 4
.el .IP "\f(CWFile::Copy::syscopy\fR" 4
.IX Item "File::Copy::syscopy"
used by \f(CW\*(C`File::Copy::copy\*(C'\fR, peep File::Copy.
.ie n .IP """DynaLoader::mod2fname""" 4
.el .IP "\f(CWDynaLoader::mod2fname\fR" 4
.IX Item "DynaLoader::mod2fname"
used by \f(CW\*(C`DynaLoader\*(C'\fR fo' \s-1DLL\s0 name mangling.
.ie n .IP """Cwd::current_drive()""" 4
.el .IP "\f(CWCwd::current_drive()\fR" 4
.IX Item "Cwd::current_drive()"
Self explanatory.
.ie n .IP """Cwd::sys_chdir(name)""" 4
.el .IP "\f(CWCwd::sys_chdir(name)\fR" 4
.IX Item "Cwd::sys_chdir(name)"
leaves drive as it is.
.ie n .IP """Cwd::change_drive(name)""" 4
.el .IP "\f(CWCwd::change_drive(name)\fR" 4
.IX Item "Cwd::change_drive(name)"
changes tha \*(L"current\*(R" drive.
.ie n .IP """Cwd::sys_is_absolute(name)""" 4
.el .IP "\f(CWCwd::sys_is_absolute(name)\fR" 4
.IX Item "Cwd::sys_is_absolute(name)"
means has drive letta n' is_rooted.
.ie n .IP """Cwd::sys_is_rooted(name)""" 4
.el .IP "\f(CWCwd::sys_is_rooted(name)\fR" 4
.IX Item "Cwd::sys_is_rooted(name)"
means has leadin \f(CW\*(C`[/\e\e]\*(C'\fR (maybe afta a thugged-out drive-letter:).
.ie n .IP """Cwd::sys_is_relative(name)""" 4
.el .IP "\f(CWCwd::sys_is_relative(name)\fR" 4
.IX Item "Cwd::sys_is_relative(name)"
means chizzlez wit current dir.
.ie n .IP """Cwd::sys_cwd(name)""" 4
.el .IP "\f(CWCwd::sys_cwd(name)\fR" 4
.IX Item "Cwd::sys_cwd(name)"
Interface ta cwd from \s-1EMX.\s0 Used by \f(CW\*(C`Cwd::cwd\*(C'\fR.
.ie n .IP """Cwd::sys_abspath(name, dir)""" 4
.el .IP "\f(CWCwd::sys_abspath(name, dir)\fR" 4
.IX Item "Cwd::sys_abspath(name, dir)"
Straight-Up straight-up odious function ta implement. Returns absolute name of
file which would have \f(CW\*(C`name\*(C'\fR if \s-1CWD\s0 was \f(CW\*(C`dir\*(C'\fR.  \f(CW\*(C`Dir\*(C'\fR defaults ta the
current dir.
.ie n .IP """Cwd::extLibpath([type])""" 4
.el .IP "\f(CWCwd::extLibpath([type])\fR" 4
.IX Item "Cwd::extLibpath([type])"
Git current value of extended library search path. If \f(CW\*(C`type\*(C'\fR is
present n' positive, works wit \f(CW\*(C`END_LIBPATH\*(C'\fR, if negative, works
with \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, otherwise wit \f(CW\*(C`BEGIN_LIBPATH\*(C'\fR.
.ie n .IP """Cwd::extLibpath_set( path [, type ] )""" 4
.el .IP "\f(CWCwd::extLibpath_set( path [, type ] )\fR" 4
.IX Item "Cwd::extLibpath_set( path [, type ] )"
Set current value of extended library search path. If \f(CW\*(C`type\*(C'\fR is
present n' positive, works wit <\s-1END_LIBPATH\s0>, if negative, works
with \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, otherwise wit \f(CW\*(C`BEGIN_LIBPATH\*(C'\fR.
.ie n .IP """OS2::Error(do_harderror,do_exception)""" 4
.el .IP "\f(CWOS2::Error(do_harderror,do_exception)\fR" 4
.IX Item "OS2::Error(do_harderror,do_exception)"
Returns	\f(CW\*(C`undef\*(C'\fR if dat shiznit was not called yet, otherwise bit 1 is
set if on tha previous call do_harderror was enabled, bit
2 is set if on previous call do_exception was enabled.
.Sp
This function enables/disablez error popups associated wit 
hardware errors (Disk not locked n loaded etc.) n' software exceptions.
.Sp
I know of no way ta smoke up tha state of popups \fIbefore\fR tha straight-up original gangsta call
to dis function.
.ie n .IP """OS2::Errors2Drive(drive)""" 4
.el .IP "\f(CWOS2::Errors2Drive(drive)\fR" 4
.IX Item "OS2::Errors2Drive(drive)"
Returns \f(CW\*(C`undef\*(C'\fR if dat shiznit was not called yet, otherwise return false if errors
were not axed ta be freestyled ta a hard drive, or tha drive letta if
this was requested.
.Sp
This function may redirect error popups associated wit hardware errors
(Disk not locked n loaded etc.) n' software exceptions ta tha file \s-1POPUPLOG.OS2\s0 at
the root directory of tha specified drive.  Overrides \fIOS2::Error()\fR specified
by individual programs.  Given argument undef will disable redirection.
.Sp
Has global effect, persists afta tha application exits.
.Sp
I know of no way ta smoke up tha state of redirection of popups ta tha disk
\&\fIbefore\fR tha straight-up original gangsta call ta dis function.
.IP "\fIOS2::SysInfo()\fR" 4
.IX Item "OS2::SysInfo()"
Returns a hash wit system shiznit. I aint talkin' bout chicken n' gravy biatch. Da keyz of tha hash are
.Sp
.Vb 8
\&        MAX_PATH_LENGTH, MAX_TEXT_SESSIONS, MAX_PM_SESSIONS,
\&        MAX_VDM_SESSIONS, BOOT_DRIVE, DYN_PRI_VARIATION,
\&        MAX_WAIT, MIN_SLICE, MAX_SLICE, PAGE_SIZE,
\&        VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION,
\&        MS_COUNT, TIME_LOW, TIME_HIGH, TOTPHYSMEM, TOTRESMEM,
\&        TOTAVAILMEM, MAXPRMEM, MAXSHMEM, TIMER_INTERVAL,
\&        MAX_COMP_LENGTH, FOREGROUND_FS_SESSION,
\&        FOREGROUND_PROCESS
.Ve
.IP "\fIOS2::BootDrive()\fR" 4
.IX Item "OS2::BootDrive()"
Returns a letta without colon.
.ie n .IP """OS2::MorphPM(serve)"", ""OS2::UnMorphPM(serve)""" 4
.el .IP "\f(CWOS2::MorphPM(serve)\fR, \f(CWOS2::UnMorphPM(serve)\fR" 4
.IX Item "OS2::MorphPM(serve), OS2::UnMorphPM(serve)"
Transforms tha current application tha fuck into a \s-1PM\s0 application n' back.
Da argument legit means dat a real message loop is goin ta be served.
\&\fIOS2::MorphPM()\fR returns tha \s-1PM\s0 message queue handle as a integer.
.Sp
See \*(L"Centralized pimpment of resources\*(R" fo' additionizzle details.
.ie n .IP """OS2::Serve_Lyrics(force)""" 4
.el .IP "\f(CWOS2::Serve_Lyrics(force)\fR" 4
.IX Item "OS2::Serve_Lyrics(force)"
Fake on-demand retrieval of outstandin \s-1PM\s0 lyrics.  If \f(CW\*(C`force\*(C'\fR is false,
will not dispatch lyrics if a real message loop is known to
be present.  Returns number of lyrics retrieved.
.Sp
Dies wit \*(L"QUITing...\*(R" if \s-1WM_QUIT\s0 message is obtained.
.ie n .IP """OS2::Process_Lyrics(force [, cnt])""" 4
.el .IP "\f(CWOS2::Process_Lyrics(force [, cnt])\fR" 4
.IX Item "OS2::Process_Lyrics(force [, cnt])"
Retrieval of \s-1PM\s0 lyrics until window creation/destruction. I aint talkin' bout chicken n' gravy biatch.  
If \f(CW\*(C`force\*(C'\fR is false, aint gonna dispatch lyrics if a real message loop
is known ta be present.
.Sp
Returns chizzle up in number of windows.  If \f(CW\*(C`cnt\*(C'\fR is given,
it is incremented by tha number of lyrics retrieved.
.Sp
Dies wit \*(L"QUITing...\*(R" if \s-1WM_QUIT\s0 message is obtained.
.ie n .IP """OS2::_control87(new,mask)""" 4
.el .IP "\f(CWOS2::_control87(new,mask)\fR" 4
.IX Item "OS2::_control87(new,mask)"
the same as \fI_control87\fR\|(3) of \s-1EMX. \s0 Takes integers as arguments, returns
the previous coprocessor control word as a integer n' shit.  Only bits up in \f(CW\*(C`new\*(C'\fR which
are present up in \f(CW\*(C`mask\*(C'\fR is chizzled up in tha control word.
.IP "\fIOS2::get_control87()\fR" 4
.IX Item "OS2::get_control87()"
gets tha coprocessor control word as a integer.
.ie n .IP """OS2::set_control87_em(new=MCW_EM,mask=MCW_EM)""" 4
.el .IP "\f(CWOS2::set_control87_em(new=MCW_EM,mask=MCW_EM)\fR" 4
.IX Item "OS2::set_control87_em(new=MCW_EM,mask=MCW_EM)"
Da variant of \fIOS2::_control87()\fR wit default joints phat for
handlin exception mask: if no \f(CW\*(C`mask\*(C'\fR, uses exception mask part of \f(CW\*(C`new\*(C'\fR
only.  If no \f(CW\*(C`new\*(C'\fR, disablez all tha floatin point exceptions.
.Sp
See \*(L"Misfeatures\*(R" fo' details.
.ie n .IP """OS2::DLLname([how [, \e&xsub]])""" 4
.el .IP "\f(CWOS2::DLLname([how [, \e&xsub]])\fR" 4
.IX Item "OS2::DLLname([how [, &xsub]])"
Gives tha shiznit bout tha Perl \s-1DLL\s0 or tha \s-1DLL\s0 containin tha C
function bound ta by \f(CW&xsub\fR.  Da meanin of \f(CW\*(C`how\*(C'\fR is: default (2):
full name; 0: handle; 1: module name.
.PP
(Note dat a shitload of these may be moved ta different libraries \-
eventually).
.SS "Prebuilt variables:"
.IX Subsection "Prebuilt variables:"
.ie n .IP "$OS2::emx_rev" 4
.el .IP "\f(CW$OS2::emx_rev\fR" 4
.IX Item "$OS2::emx_rev"
numeric value is tha same ol' dirty as _emx_rev of \s-1EMX,\s0 a strang value tha same
as _emx_vprt (similar ta \f(CW\*(C`0.9c\*(C'\fR).
.ie n .IP "$OS2::emx_env" 4
.el .IP "\f(CW$OS2::emx_env\fR" 4
.IX Item "$OS2::emx_env"
same as _emx_env of \s-1EMX,\s0 a number similar ta 0x8001.
.ie n .IP "$OS2::os_ver" 4
.el .IP "\f(CW$OS2::os_ver\fR" 4
.IX Item "$OS2::os_ver"
a number \f(CW\*(C`OS_MAJOR + 0.001 * OS_MINOR\*(C'\fR.
.ie n .IP "$OS2::is_aout" 4
.el .IP "\f(CW$OS2::is_aout\fR" 4
.IX Item "$OS2::is_aout"
true if tha Perl library was compiled up in \s-1AOUT\s0 format.
.ie n .IP "$OS2::can_fork" 4
.el .IP "\f(CW$OS2::can_fork\fR" 4
.IX Item "$OS2::can_fork"
true if tha current executable be a \s-1AOUT EMX\s0 executable, so Perl can
fork.  Do not use this, use tha portable check for
\&\f(CW$Config::Config\fR{dfork}.
.ie n .IP "$OS2::nsyserror" 4
.el .IP "\f(CW$OS2::nsyserror\fR" 4
.IX Item "$OS2::nsyserror"
This variable (default is 1) controls whether ta enforce tha contents
of $^E ta start wit \f(CW\*(C`SYS0003\*(C'\fR\-like id. Y'all KNOW dat shit, muthafucka!  If set ta 0, then tha string
value of $^E is what tha fuck be available from tha \s-1OS/2\s0 message file.  (Some
lyrics up in dis file have a \f(CW\*(C`SYS0003\*(C'\fR\-like id prepended, some not.)
.SS "Misfeatures"
.IX Subsection "Misfeatures"
.IP "\(bu" 4
Since \fIflock\fR\|(3) is present up in \s-1EMX,\s0 but aint functional, it is 
emulated by perl.  To disable tha emulations, set environment variable
\&\f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.IP "\(bu" 4
Here is tha list of thangs which may be \*(L"broken\*(R" on
\&\s-1EMX \s0(from \s-1EMX\s0 docs):
.RS 4
.IP "\(bu" 4
Da functions \fIrecvmsg\fR\|(3), \fIsendmsg\fR\|(3), n' \fIsocketpair\fR\|(3) is not
implemented.
.IP "\(bu" 4
\&\fIsock_init\fR\|(3) aint required n' not implemented.
.IP "\(bu" 4
\&\fIflock\fR\|(3) aint yet implemented (dummy function).  (Perl has a workaround.)
.IP "\(bu" 4
\&\fIkill\fR\|(3):  Special treatment of PID=0, PID=1 n' PID=\-1 aint implemented.
.IP "\(bu" 4
\&\fIwaitpid\fR\|(3):
.Sp
.Vb 3
\&      WUNTRACED
\&              Not implemented.
\&      waitpid() aint implemented fo' wack jointz of PID.
.Ve
.RE
.RS 4
.Sp
Note dat \f(CW\*(C`kill \-9\*(C'\fR do not work wit tha current version of \s-1EMX.\s0
.RE
.IP "\(bu" 4
See \*(L"Text-mode filehandles\*(R".
.IP "\(bu" 4
Unix-domain sockets on \s-1OS/2\s0 live up in a pseudo-file-system \f(CW\*(C`/sockets/...\*(C'\fR.
To avoid a gangbangin' failure ta create a socket wit a name of a gangbangin' finger-lickin' different form,
\&\f(CW"/socket/"\fR is prepended ta tha socket name (unless it starts wit this
already).
.Sp
This may lead ta problems lata up in case tha socket be accessed via the
\&\*(L"usual\*(R" file-system calls rockin tha \*(L"initial\*(R" name.
.IP "\(bu" 4
Apparently, \s-1IBM\s0 used a cold-ass lil compila (for some period of time round '95?) which
changes \s-1FP\s0 mask right n' left.  This aint \fIthat\fR wack fo' \s-1IBM\s0's
programs yo, but tha same compila was used fo' DLLs which is used with
general-purpose applications.  When these DLLs is used, tha state of
floating-point flags up in tha application aint predictable.
.Sp
What tha fuck iz much worse, some DLLs chizzle tha floatin point flags when in
\&\fI_DLLInitTerm()\fR (e.g., \fI\s-1TCP32IP\s0\fR).  This means dat even if you do not \fIcall\fR
any function up in tha \s-1DLL,\s0 just tha act of loadin dis \s-1DLL\s0 will reset your
flags.  What tha fuck iz worse, tha same compila was used ta compile some \s-1HOOK\s0 DLLs.
Given dat \s-1HOOK\s0 dlls is executed up in tha context of \fIall\fR tha applications
in tha system, dis means a cold-ass lil complete unpredictabilitizzle of floatin point
flags on systems rockin such \s-1HOOK\s0 DLLs.  E.g., \fI\s-1GAMESRVR.DLL\s0\fR of \fB\s-1DIVE\s0\fR
origin chizzlez tha floatin point flags on each write ta tha \s-1TTY\s0 of a \s-1VIO
\&\s0(windowed text-mode) applications.
.Sp
Some other (not straight-up debugged) thangs when \s-1FP\s0 flags chizzle include
some vizzle drivers (?), n' some operations related ta creation of tha windows.
Muthafuckas whoz ass code \fBOpenGL\fR may have mo' experience on all dis bullshit.
.Sp
Perl is generally used up in tha thang when all tha floating-point
exceptions is ignored, as is tha default under \s-1EMX. \s0 If they is not ignored,
some benign Perl programs would git a \f(CW\*(C`SIGFPE\*(C'\fR n' would take a thugged-out dirtnap a wack dirtnap.
.Sp
To circumvent this, Perl uses two hacks.  They help against \fIone\fR type of
damage only: \s-1FP\s0 flags chizzled when loadin a \s-1DLL.\s0
.Sp
One of tha hacks is ta disable floatin point exceptions on Perl startup (as
is tha default wit \s-1EMX\s0).  This helps only wit compile-time-linked DLLs
changin tha flags before \fImain()\fR had a cold-ass lil chizzle ta be called.
.Sp
Da other hack is ta restore \s-1FP\s0 flags afta a cold-ass lil call ta \fIdlopen()\fR.  This helps
against similar damage done by DLLs \fI_DLLInitTerm()\fR at runtime.  Currently
no way ta switch these hacks off is provided.
.SS "Modifications"
.IX Subsection "Modifications"
Perl modifies some standard C library calls up in tha followin ways:
.ie n .IP """popen""" 9
.el .IP "\f(CWpopen\fR" 9
.IX Item "popen"
\&\f(CW\*(C`my_popen\*(C'\fR uses \fIsh.exe\fR if shell is required, cf. \*(L"\s-1PERL_SH_DIR\*(R"\s0.
.ie n .IP """tmpnam""" 9
.el .IP "\f(CWtmpnam\fR" 9
.IX Item "tmpnam"
is pimped rockin \f(CW\*(C`TMP\*(C'\fR or \f(CW\*(C`TEMP\*(C'\fR environment variable, via
\&\f(CW\*(C`tempnam\*(C'\fR.
.ie n .IP """tmpfile""" 9
.el .IP "\f(CWtmpfile\fR" 9
.IX Item "tmpfile"
If tha current directory aint writable, file is pimped rockin modified
\&\f(CW\*(C`tmpnam\*(C'\fR, so there may be a race condition.
.ie n .IP """ctermid""" 9
.el .IP "\f(CWctermid\fR" 9
.IX Item "ctermid"
a dummy implementation.
.ie n .IP """stat""" 9
.el .IP "\f(CWstat\fR" 9
.IX Item "stat"
\&\f(CW\*(C`os2_stat\*(C'\fR special-cases \fI/dev/tty\fR n' \fI/dev/con\fR.
.ie n .IP """mkdir"", ""rmdir""" 9
.el .IP "\f(CWmkdir\fR, \f(CWrmdir\fR" 9
.IX Item "mkdir, rmdir"
these \s-1EMX\s0 functions do not work if tha path gotz nuff a trailin \f(CW\*(C`/\*(C'\fR.
Perl gotz nuff a workaround fo' all dis bullshit.
.ie n .IP """flock""" 9
.el .IP "\f(CWflock\fR" 9
.IX Item "flock"
Since \fIflock\fR\|(3) is present up in \s-1EMX,\s0 but aint functional, it is 
emulated by perl.  To disable tha emulations, set environment variable
\&\f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.SS "Identifyin DLLs"
.IX Subsection "Identifyin DLLs"
All tha DLLs built wit tha current versionz of Perl have \s-1ID\s0 strings
identifyin tha name of tha extension, its version, n' tha version
of Perl required fo' dis \s-1DLL. \s0 Run \f(CW\*(C`bldlevel DLL\-name\*(C'\fR ta find this
info.
.SS "Centralized pimpment of resources"
.IX Subsection "Centralized pimpment of resources"
Since ta booty-call certain \s-1OS/2 API\s0 one need ta gotz a cold-ass lil erectly initialized
\&\f(CW\*(C`Win\*(C'\fR subsystem, OS/2\-specific extensions may require gettin \f(CW\*(C`HAB\*(C'\fRs and
\&\f(CW\*(C`HMQ\*(C'\fRs.  If a extension would do it on its own, another extension could
fail ta initialize.
.PP
Perl serves up a cold-ass lil centralized pimpment of these resources:
.ie n .IP """HAB""" 4
.el .IP "\f(CWHAB\fR" 4
.IX Item "HAB"
To git tha \s-1HAB,\s0 tha extension should call \f(CW\*(C`hab = perl_hab_GET()\*(C'\fR up in C.  After
this call is performed, \f(CW\*(C`hab\*(C'\fR may be accessed as \f(CW\*(C`Perl_hab\*(C'\fR.  There is
no need ta release tha \s-1HAB\s0 afta it is used.
.Sp
If by some reasons \fIperl.h\fR cannot be included, use
.Sp
.Vb 1
\&  extern int Perl_hab_GET(void);
.Ve
.Sp
instead.
.ie n .IP """HMQ""" 4
.el .IP "\f(CWHMQ\fR" 4
.IX Item "HMQ"
There is two cases:
.RS 4
.IP "\(bu" 4
the extension needz a \f(CW\*(C`HMQ\*(C'\fR only cuz some \s-1API\s0 aint gonna work otherwise.
Use \f(CW\*(C`serve = 0\*(C'\fR below.
.IP "\(bu" 4
the extension needz a \f(CW\*(C`HMQ\*(C'\fR since it wants ta engage up in a \s-1PM\s0 event loop.
Use \f(CW\*(C`serve = 1\*(C'\fR below.
.RE
.RS 4
.Sp
To git a \f(CW\*(C`HMQ\*(C'\fR, tha extension should call \f(CW\*(C`hmq = perl_hmq_GET(serve)\*(C'\fR up in C.
Afta dis call is performed, \f(CW\*(C`hmq\*(C'\fR may be accessed as \f(CW\*(C`Perl_hmq\*(C'\fR.
.Sp
To signal ta Perl dat \s-1HMQ\s0 aint needed any more, call
\&\f(CW\*(C`perl_hmq_UNSET(serve)\*(C'\fR.  Perl process will automatically morph/unmorph itself
into/from a \s-1PM\s0 process if \s-1HMQ\s0 is needed/not\-needed. Y'all KNOW dat shit, muthafucka!  Perl will automatically
enable/disable \f(CW\*(C`WM_QUIT\*(C'\fR message durin shutdown if tha message queue is
served/not\-served.
.Sp
\&\fB\s-1NOTE\s0\fR.  If durin a gangbangin' finger-lickin' dirty-ass shutdown there be a message queue which did not disable
\&\s-1WM_QUIT,\s0 n' which did not process tha received \s-1WM_QUIT\s0 message, the
shutdown is ghon be automatically shut down. I aint talkin' bout chicken n' gravy biatch.  Do not call \f(CWperl_hmq_GET(1)\fR
unless yo ass is goin ta process lyrics on a orderly basis.
.RE
.IP "Treatin errors reported by \s-1OS/2 API\s0" 4
.IX Item "Treatin errors reported by OS/2 API"
There is two principal conventions (it is useful ta booty-call dem \f(CW\*(C`Dos*\*(C'\fR
and \f(CW\*(C`Win*\*(C'\fR \- though dis part of tha function signature aint always
determined by tha name of tha \s-1API\s0) of reportin tha error conditions
of \s-1OS/2 API. \s0 Most of \f(CW\*(C`Dos*\*(C'\fR APIs report tha error code as tha result
of tha call (so 0 means success, n' there be nuff typez of errors).
Most of \f(CW\*(C`Win*\*(C'\fR \s-1API\s0 report success/fail via tha result being
\&\f(CW\*(C`TRUE\*(C'\fR/\f(CW\*(C`FALSE\*(C'\fR; ta find tha reason fo' tha failure one should call
\&\fIWinGetLastError()\fR \s-1API.\s0
.Sp
Some \f(CW\*(C`Win*\*(C'\fR entry points also overload a \*(L"meaningful\*(R" return value
with tha error indicator; havin a 0 return value indicates a error.
Yet some other \f(CW\*(C`Win*\*(C'\fR entry points overload thangs even more, n' 0
return value may mean a successful call returnin a valid value 0, as
well as a error condition; up in tha case of a 0 return value one should
call \fIWinGetLastError()\fR \s-1API\s0 ta distinguish a successful call from a
failin one.
.Sp
By convention, all tha calls ta \s-1OS/2 API\s0 should indicate their
failures by resettin $^E.  All tha Perl-accessible functions which
call \s-1OS/2 API\s0 may be fucked up tha fuck into two classes: some \fIdie()\fRs when a \s-1API\s0
error is encountered, tha other report tha error via a gangbangin' false return
value (of course, dis do not concern Perl-accessible functions
which \fIexpect\fR a gangbangin' failure of tha \s-1OS/2 API\s0 call, havin some workarounds
coded).
.Sp
Obviously, up in tha thang of tha last type of tha signature of a \s-1OS/2
API,\s0 it is must mo' convenient fo' tha playas if tha failure is
indicated by \fIdie()\fRing: one do not need ta check $^E ta know that
suttin' went wrong.  If, however, dis solution aint desirable by
some reason, tha code up in question should reset $^E ta 0 before making
this \s-1OS/2 API\s0 call, so dat tha calla of dis Perl-accessible
function has a cold-ass lil chizzle ta distinguish a success\-but\-0\-return value from
a failure.  (One may return undef as a alternatizzle way of reporting
an error.)
.Sp
Da macros ta simplify dis type of error propagation are
.RS 4
.ie n .IP """CheckOSError(expr)""" 4
.el .IP "\f(CWCheckOSError(expr)\fR" 4
.IX Item "CheckOSError(expr)"
Returns legit on error, sets $^E.  Expects \fIexpr()\fR be a cold-ass lil call of
\&\f(CW\*(C`Dos*\*(C'\fR\-style \s-1API.\s0
.ie n .IP """CheckWinError(expr)""" 4
.el .IP "\f(CWCheckWinError(expr)\fR" 4
.IX Item "CheckWinError(expr)"
Returns legit on error, sets $^E.  Expects \fIexpr()\fR be a cold-ass lil call of
\&\f(CW\*(C`Win*\*(C'\fR\-style \s-1API.\s0
.ie n .IP """SaveWinError(expr)""" 4
.el .IP "\f(CWSaveWinError(expr)\fR" 4
.IX Item "SaveWinError(expr)"
Returns \f(CW\*(C`expr\*(C'\fR, sets $^E from \fIWinGetLastError()\fR if \f(CW\*(C`expr\*(C'\fR is false.
.ie n .IP """SaveCroakWinError(expr,die,name1,name2)""" 4
.el .IP "\f(CWSaveCroakWinError(expr,die,name1,name2)\fR" 4
.IX Item "SaveCroakWinError(expr,die,name1,name2)"
Returns \f(CW\*(C`expr\*(C'\fR, sets $^E from \fIWinGetLastError()\fR if \f(CW\*(C`expr\*(C'\fR is false,
and \fIdie()\fRs if \f(CW\*(C`die\*(C'\fR n' $^E is true.  Da message ta take a thugged-out dirtnap is the
concatenated strings \f(CW\*(C`name1\*(C'\fR n' \f(CW\*(C`name2\*(C'\fR, separated by \f(CW": "\fR from
the contentz of $^E.
.ie n .IP """WinError_2_Perl_rc""" 4
.el .IP "\f(CWWinError_2_Perl_rc\fR" 4
.IX Item "WinError_2_Perl_rc"
Sets \f(CW\*(C`Perl_rc\*(C'\fR ta tha return value of \fIWinGetLastError()\fR.
.ie n .IP """FillWinError""" 4
.el .IP "\f(CWFillWinError\fR" 4
.IX Item "FillWinError"
Sets \f(CW\*(C`Perl_rc\*(C'\fR ta tha return value of \fIWinGetLastError()\fR, n' sets $^E
to tha correspondin value.
.ie n .IP """FillOSError(rc)""" 4
.el .IP "\f(CWFillOSError(rc)\fR" 4
.IX Item "FillOSError(rc)"
Sets \f(CW\*(C`Perl_rc\*(C'\fR ta \f(CW\*(C`rc\*(C'\fR, n' sets $^E ta tha correspondin value.
.RE
.RS 4
.RE
.IP "Loadin DLLs n' ordinals up in DLLs" 4
.IX Item "Loadin DLLs n' ordinals up in DLLs"
Some DLLs is only present up in some versionz of \s-1OS/2,\s0 or up in some
configurationz of \s-1OS/2. \s0 Some exported entry points is present only
in DLLs shipped wit some versionz of \s-1OS/2. \s0 If these DLLs n' entry
points was linked directly fo' a Perl executable/DLL or from a Perl
extensions, dis binary would work only wit tha specified
versions/setups.  Even if these entry points was not needed, the
\&\fIload\fR of tha executable (or \s-1DLL\s0) would fail.
.Sp
For example, nuff newer useful APIs is not present up in \s-1OS/2\s0 v2; many
PM-related APIs require DLLs not available on floppy-boot setup.
.Sp
To make these calls fail \fIonly when tha calls is executed\fR, one
should call these \s-1API\s0 via a thugged-out dynamic linkin \s-1API. \s0 There be a subsystem
in Perl ta simplify such type of calls.  A big-ass number of entry
points available fo' such linkin is provided (see \f(CW\*(C`entries_ordinals\*(C'\fR
\&\- n' also \f(CW\*(C`PMWIN_entries\*(C'\fR \- up in \fIos2ish.h\fR).  These ordinals can be
accessed via tha APIs:
.Sp
.Vb 6
\&  CallORD(), DeclFuncByORD(), DeclVoidFuncByORD(),
\&  DeclOSFuncByORD(), DeclWinFuncByORD(), AssignFuncPByORD(),
\&  DeclWinFuncByORD_CACHE(), DeclWinFuncByORD_CACHE_survive(),
\&  DeclWinFuncByORD_CACHE_resetError_survive(),
\&  DeclWinFunc_CACHE(), DeclWinFunc_CACHE_resetError(),
\&  DeclWinFunc_CACHE_survive(), DeclWinFunc_CACHE_resetError_survive()
.Ve
.Sp
See tha header filez n' tha C code up in tha supplied OS/2\-related
modulez fo' tha details on usage of these functions.
.Sp
Some of these functions also combine dynaloadin semantic wit the
error-propagation semantic discussed above.
.SH "Perl flavors"
.IX Header "Perl flavors"
Because of idiosyncrasiez of \s-1OS/2\s0 one cannot have all tha eggs up in the
same basket (though \s-1EMX\s0 environment tries hard ta overcome this
limitations, so tha thang may somehow improve). There is 4
executablez fo' Perl provided by tha distribution:
.SS "\fIperl.exe\fP"
.IX Subsection "perl.exe"
Da main workhorse. This be a cold-ass lil chimera executable: it is compiled as an
\&\f(CW\*(C`a.out\*(C'\fR\-style executable yo, but is linked wit \f(CW\*(C`omf\*(C'\fR\-style dynamic
library \fIperl.dll\fR, n' wit dynamic \s-1CRT DLL.\s0 This executable be a
\&\s-1VIO\s0 application.
.PP
It can load perl dynamic extensions, n' it can \fIfork()\fR.
.PP
\&\fBNote.\fR Keep it realz in mind dat \fIfork()\fR is needed ta open a pipe ta yo ass.
.SS "\fIperl_.exe\fP"
.IX Subsection "perl_.exe"
This be a statically linked \f(CW\*(C`a.out\*(C'\fR\-style executable. Well shiiiit, it cannot
load dynamic Perl extensions. Da executable supplied up in binary
distributions has a shitload of extensions prebuilt, thus tha above restriction is 
important only if you use custom-built extensions. This executable be a \s-1VIO\s0
application.
.PP
\&\fIThis is tha only executable wit do not require \s-1OS/2.\s0\fR The
friendz locked tha fuck into \f(CW\*(C`M$\*(C'\fR ghetto would appreciate tha fact dat this
executable runs under \s-1DOS,\s0 Win0.3*, Win0.95 n' WinNT wit an
appropriate extender n' shit. Right back up in yo muthafuckin ass. See \*(L"Other OSes\*(R".
.SS "\fIperl_\|_.exe\fP"
.IX Subsection "perl__.exe"
This is tha same ol' dirty executable as \fIperl_\|_\|_.exe\fR yo, but it aint nuthin but a \s-1PM\s0
application.
.PP
\&\fBNote.\fR Usually (unless explicitly repimped up durin tha startup)
\&\s-1STDIN, STDERR,\s0 n' \s-1STDOUT\s0 of a \s-1PM\s0
application is repimped up ta \fInul\fR. But fuck dat shiznit yo, tha word on tha street is dat it is possible ta \fIsee\fR
them if you start \f(CW\*(C`perl_\|_.exe\*(C'\fR from a \s-1PM\s0 program which emulates a
console window, like \fIShell mode\fR of Emacs or \s-1EPM.\s0 Thus it \fIis
possible\fR ta use Perl debugger (see perldebug) ta debug yo' \s-1PM\s0
application (but beware of tha message loop lockups \- dis will not
work if you gotz a message queue ta serve, unless you hook tha serving
into tha \fIgetc()\fR function of tha debugger).
.PP
Another way ta peep tha output of a \s-1PM\s0 program is ta run it as
.PP
.Vb 1
\&  pm_prog args 2>&1 | pussaaaaay \-
.Ve
.PP
with a gangbangin' finger-lickin' dirty-ass shell \fIdifferent\fR from \fIcmd.exe\fR, so dat it do not create
a link between a \s-1VIO\s0 session n' tha session of \f(CW\*(C`pm_porg\*(C'\fR.  (Such a link
closes tha \s-1VIO\s0 window.)  E.g., dis works wit \fIsh.exe\fR \- or wit Perl!
.PP
.Vb 2
\&  open P, \*(Aqpm_prog args 2>&1 |\*(Aq or die;
\&  print while <P>;
.Ve
.PP
Da flavor \fIperl_\|_.exe\fR is required if you wanna start yo' program without
a \s-1VIO\s0 window present yo, but not \f(CW\*(C`detach\*(C'\fRed (run \f(CW\*(C`help detach\*(C'\fR fo' mo' info).
Straight-up useful fo' extensions which use \s-1PM,\s0 like \f(CW\*(C`Perl/Tk\*(C'\fR or \f(CW\*(C`OpenGL\*(C'\fR.
.PP
Note also dat tha differences between \s-1PM\s0 n' \s-1VIO\s0 executablez is only
in tha \fIdefault\fR behaviour. Shiiit, dis aint no joke.  One can start \fIany\fR executable in
\&\fIany\fR kind of session by rockin tha arguments \f(CW\*(C`/fs\*(C'\fR, \f(CW\*(C`/pm\*(C'\fR or
\&\f(CW\*(C`/win\*(C'\fR switchez of tha command \f(CW\*(C`start\*(C'\fR (of \fI\s-1CMD.EXE\s0\fR or a similar
shell).  Alternatively, one can use tha numeric first argument of the
\&\f(CW\*(C`system\*(C'\fR Perl function (see OS2::Process).
.SS "\fIperl_\|_\|_.exe\fP"
.IX Subsection "perl___.exe"
This be a \f(CW\*(C`omf\*(C'\fR\-style executable which is dynamically linked to
\&\fIperl.dll\fR n' \s-1CRT DLL. I\s0 know no advantagez of dis executable
over \f(CW\*(C`perl.exe\*(C'\fR yo, but it cannot \fIfork()\fR at all. Well, one advantage is
that tha build process aint so convoluted as wit \f(CW\*(C`perl.exe\*(C'\fR.
.PP
It be a \s-1VIO\s0 application.
.SS "Why strange names?"
.IX Subsection "Why strange names?"
Since Perl processes tha \f(CW\*(C`#!\*(C'\fR\-line (cf. 
\&\*(L"\s-1DESCRIPTION\*(R"\s0 up in perlrun, \*(L"Command Switches\*(R" up in perlrun,
\&\*(L"No Perl script found up in input\*(R" up in perldiag), it should know when a
program \fIis a Perl\fR. There is some namin convention which allows
Perl ta distinguish erect lines from wack ones. Da above names are
almost tha only names allowed by dis convention which do not contain
digits (which have straight-up different semantics).
.SS "Why dynamic linking?"
.IX Subsection "Why dynamic linking?"
Well, havin nuff muthafuckin executablez dynamically linked ta tha same huge
library has its advantages yo, but dis would not substantiate the
additionizzle work ta make it compile. Da reason is tha fucked up-to-developers
but straight-up quick n' convenient-to-users \*(L"hard\*(R" dynamic linkin used by \s-1OS/2.\s0
.PP
There is two distinctizzle featurez of tha dyna-linkin model of \s-1OS/2:\s0
first, all tha references ta external functions is resolved all up in tha compile time;
second, there is no runtime fixup of tha DLLs afta they is loaded tha fuck into memory.
Da first feature be a enormous advantage over other models: it avoids
conflicts when nuff muthafuckin DLLs used by a application export entries with
the same name.  In such cases \*(L"other\*(R" modelz of dyna-linkin just chizzle
between these two entry points rockin some random criterion \- wit predictable
disastas as thangs up in dis biatch.  But it is tha second feature which requires tha build
of \fIperl.dll\fR.
.PP
Da address tablez of DLLs is patched only once, when they are
loaded. Y'all KNOW dat shit, muthafucka! Da addressez of tha entry points tha fuck into DLLs is guaranteed ta be
the same fo' all tha programs which use tha same \s-1DLL. \s0 This removes the
runtime fixup \- once \s-1DLL\s0 is loaded, its code is read-only.
.PP
While dis allows some (significant?) performizzle advantages, dis make game
much harder fo' pimpers, since tha above scheme make it impossible
for a \s-1DLL\s0 ta be \*(L"linked\*(R" ta a symbol up in tha \fI.EXE\fR file.  Indeed, this
would need a \s-1DLL\s0 ta have different relocations tablez fo' the
(different) executablez which use dis \s-1DLL.\s0
.PP
But fuck dat shiznit yo, tha word on tha street is dat a thugged-out dynamically loaded Perl extension is forced ta use some symbols
from tha perl
executable, e.g., ta know how tha fuck ta find tha arguments ta tha functions:
the arguments live on tha perl
internal evaluation stack. Da solution is ta put tha main code of
the interpreta tha fuck into a \s-1DLL,\s0 n' make tha \fI.EXE\fR file which just loads
this \s-1DLL\s0 tha fuck into memory n' supplies command-arguments, n' you can put dat on yo' toast.  Da extension \s-1DLL\s0
cannot link ta symbols up in \fI.EXE\fR yo, but it has no problem linking
to symbols up in tha \fI.DLL\fR.
.PP
This \fIgreatly\fR increases tha load time fo' tha application (as well as
complexitizzle of tha compilation). Right back up in yo muthafuckin ass. Since interpreta is up in a \s-1DLL,\s0
the C \s-1RTL\s0 is basically forced ta reside up in a \s-1DLL\s0 as well (otherwise
extensions would not be able ta use \s-1CRT\s0).  There is some advantages if
you use different flavorz of perl, like fuckin hustlin \fIperl.exe\fR and
\&\fIperl_\|_.exe\fR simultaneously: they share tha memory of \fIperl.dll\fR.
.PP
\&\fB\s-1NOTE\s0\fR.  There is one additionizzle effect which make DLLs mo' wasteful:
DLLs is loaded up in tha shared memory region, which be a scarse resource
given tha 512M barrier of tha \*(L"standard\*(R" \s-1OS/2\s0 virtual memory.  Da code of
\&\fI.EXE\fR filez be also shared by all tha processes which use tha particular
\&\fI.EXE\fR yo, but they is \*(L"shared up in tha private address space of tha process\*(R";
this is possible cuz tha address at which different sections
of tha \fI.EXE\fR file is loaded is decided at compile-time, thus all the
processes have these sections loaded at same addresses, n' no fixup
of internal links inside tha \fI.EXE\fR is needed.
.PP
Since DLLs may be loaded at run time, ta have tha same mechanizzle fo' DLLs
one need ta have tha address range of \fIany of tha loaded\fR DLLs up in the
system ta be available \fIin all tha processes\fR which did not load a particular
\&\s-1DLL\s0 yet.  This is why tha DLLs is mapped ta tha shared memory region.
.SS "Why chimera build?"
.IX Subsection "Why chimera build?"
Current \s-1EMX\s0 environment do not allow DLLs compiled rockin Unixish
\&\f(CW\*(C`a.out\*(C'\fR format ta export symbols fo' data (or at least some types of
data). This forces \f(CW\*(C`omf\*(C'\fR\-style compile of \fIperl.dll\fR.
.PP
Current \s-1EMX\s0 environment do not allow \fI.EXE\fR filez compiled in
\&\f(CW\*(C`omf\*(C'\fR format ta \fIfork()\fR. \fIfork()\fR is needed fo' exactly three Perl
operations:
.IP "\(bu" 4
explicit \fIfork()\fR up in tha script,
.IP "\(bu" 4
\&\f(CW\*(C`open FH, "|\-"\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`open FH, "\-|"\*(C'\fR, up in other lyrics, openin pipes ta itself.
.PP
While these operations is not thangz of game n' dirtnap, they are
needed fo' a shitload of
useful scripts, n' you can put dat on yo' toast. This forces \f(CW\*(C`a.out\*(C'\fR\-style compile of
\&\fIperl.exe\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Here our slick asses list environment variablez wit is either \s-1OS/2\-\s0 n' \s-1DOS\-\s0 and
Win*\-specific, or is mo' blingin under \s-1OS/2\s0 than under other OSes.
.ie n .SS """PERLLIB_PREFIX"""
.el .SS "\f(CWPERLLIB_PREFIX\fP"
.IX Subsection "PERLLIB_PREFIX"
Specific fo' \s-1EMX\s0 port. Right back up in yo muthafuckin ass. Should have tha form
.PP
.Vb 1
\&  path1;path2
.Ve
.PP
or
.PP
.Vb 1
\&  path1 path2
.Ve
.PP
If tha beginnin of some prebuilt path matches \fIpath1\fR, it is
substituted wit \fIpath2\fR.
.PP
Should be used if tha perl library is moved from tha default
location up in preference ta \f(CW\*(C`PERL(5)LIB\*(C'\fR, since dis would not leave wrong
entries up in \f(CW@INC\fR.  For example, if tha compiled version of perl looks fo' \f(CW@INC\fR
in \fIf:/perllib/lib\fR, n' you wanna install tha library in
\&\fIh:/opt/gnu\fR, do
.PP
.Vb 1
\&  set PERLLIB_PREFIX=f:/perllib/lib;h:/opt/gnu
.Ve
.PP
This will cause Perl wit tha prebuilt \f(CW@INC\fR of
.PP
.Vb 5
\&  f:/perllib/lib/5.00553/os2
\&  f:/perllib/lib/5.00553
\&  f:/perllib/lib/site_perl/5.00553/os2
\&  f:/perllib/lib/site_perl/5.00553
\&  .
.Ve
.PP
to use tha followin \f(CW@INC:\fR
.PP
.Vb 5
\&  h:/opt/gnu/5.00553/os2
\&  h:/opt/gnu/5.00553
\&  h:/opt/gnu/site_perl/5.00553/os2
\&  h:/opt/gnu/site_perl/5.00553
\&  .
.Ve
.ie n .SS """PERL_BADLANG"""
.el .SS "\f(CWPERL_BADLANG\fP"
.IX Subsection "PERL_BADLANG"
If 0, perl ignores \fIsetlocale()\fR failing. May be useful wit some
strange \fIlocale\fRs.
.ie n .SS """PERL_BADFREE"""
.el .SS "\f(CWPERL_BADFREE\fP"
.IX Subsection "PERL_BADFREE"
If 0, perl would not warn of up in case of unwarranted \fIfree()\fR. With older
perls dis might be
useful up in conjunction wit tha module DB_File, which was buggy when
dynamically linked n' OMF-built.
.PP
Should not be set wit newer Perls, since dis may hide some \fIreal\fR problems.
.ie n .SS """PERL_SH_DIR"""
.el .SS "\f(CWPERL_SH_DIR\fP"
.IX Subsection "PERL_SH_DIR"
Specific fo' \s-1EMX\s0 port. Gives tha directory part of tha location for
\&\fIsh.exe\fR.
.ie n .SS """USE_PERL_FLOCK"""
.el .SS "\f(CWUSE_PERL_FLOCK\fP"
.IX Subsection "USE_PERL_FLOCK"
Specific fo' \s-1EMX\s0 port. Right back up in yo muthafuckin ass. Since \fIflock\fR\|(3) is present up in \s-1EMX,\s0 but aint 
functional, it is emulated by perl.  To disable tha emulations, set 
environment variable \f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.ie n .SS """TMP"" or ""TEMP"""
.el .SS "\f(CWTMP\fP or \f(CWTEMP\fP"
.IX Subsection "TMP or TEMP"
Specific fo' \s-1EMX\s0 port. Used as storage place fo' temporary files.
.SH "Evolution"
.IX Header "Evolution"
Here our slick asses list major chizzlez which could make you by surprise.
.SS "Text-mode filehandles"
.IX Subsection "Text-mode filehandles"
Startin from version 5.8, Perl uses a funky-ass builtin translation layer for
text-mode files.  This replaces tha efficient well-tested \s-1EMX\s0 layer by
some code which should be dopest characterized as a \*(L"quick hack\*(R".
.PP
In addizzle ta possible bugs n' a inabilitizzle ta follow chizzlez ta the
translation policy wit off/on switchez of \s-1TERMIO\s0 translation, this
introduces a straight-up incompatible chizzle: before \fIsysread()\fR on
text-mode filehandlez would go all up in tha translation layer, now it
would not.
.SS "Priorities"
.IX Subsection "Priorities"
\&\f(CW\*(C`setpriority\*(C'\fR n' \f(CW\*(C`getpriority\*(C'\fR is not compatible wit earlier
ports by Andreas Kaiser n' shit. Right back up in yo muthafuckin ass. See \f(CW"setpriority, getpriority"\fR.
.SS "\s-1DLL\s0 name mangling: pre 5.6.2"
.IX Subsection "DLL name mangling: pre 5.6.2"
With tha release 5.003_01 tha dynamically loadable libraries
should be rebuilt when a gangbangin' finger-lickin' different version of Perl is compiled. Y'all KNOW dat shit, muthafucka! In particular,
DLLs (includin \fIperl.dll\fR) is now pimped wit tha names
which contain a cold-ass lil checksum, thus allowin workaround fo' \s-1OS/2\s0 scheme of
cachin DLLs.
.PP
It may be possible ta code a simple workaround which would
.IP "\(bu" 4
find tha oldschool DLLs lookin all up in tha oldschool \f(CW@INC\fR;
.IP "\(bu" 4
mangle tha names accordin ta tha scheme of freshly smoked up perl n' copy tha DLLs to
these names;
.IP "\(bu" 4
edit tha internal \f(CW\*(C`LX\*(C'\fR tablez of \s-1DLL\s0 ta reflect tha chizzle of tha name
(probably not needed fo' Perl extension DLLs, since tha internally coded names
are not used fo' \*(L"specific\*(R" DLLs, they used only fo' \*(L"global\*(R" DLLs).
.IP "\(bu" 4
edit tha internal \f(CW\*(C`IMPORT\*(C'\fR tablez n' chizzle tha name of tha \*(L"old\*(R"
\&\fIperl????.dll\fR ta tha \*(L"new\*(R" \fIperl????.dll\fR.
.SS "\s-1DLL\s0 name mangling: 5.6.2 n' beyond"
.IX Subsection "DLL name mangling: 5.6.2 n' beyond"
In fact manglin of \fIextension\fR DLLs was done cuz of misunderstanding
of tha \s-1OS/2\s0 dynaloadin model.  \s-1OS/2 \s0(effectively) maintains two
different tablez of loaded \s-1DLL:\s0
.IP "Global DLLs" 4
.IX Item "Global DLLs"
those loaded by tha base name from \f(CW\*(C`LIBPATH\*(C'\fR; includin them
associated at link time;
.IP "specific DLLs" 4
.IX Item "specific DLLs"
loaded by tha full name.
.PP
When resolvin a request fo' a global \s-1DLL,\s0 tha table of already-loaded
specific DLLs is (effectively) ignored; moreover, specific DLLs are
\&\fIalways\fR loaded from tha prescribed path.
.PP
There is/was a minor twist which make dis scheme fragile: what tha fuck ta do
with DLLs loaded from
.ie n .IP """BEGINLIBPATH"" n' ""ENDLIBPATH""" 4
.el .IP "\f(CWBEGINLIBPATH\fR n' \f(CWENDLIBPATH\fR" 4
.IX Item "BEGINLIBPATH n' ENDLIBPATH"
(which depend on tha process)
.ie n .IP "\fI.\fR from ""LIBPATH""" 4
.el .IP "\fI.\fR from \f(CWLIBPATH\fR" 4
.IX Item ". from LIBPATH"
which \fIeffectively\fR dependz on tha process (although \f(CW\*(C`LIBPATH\*(C'\fR is the
same fo' all tha processes).
.PP
Unless \f(CW\*(C`LIBPATHSTRICT\*(C'\fR is set ta \f(CW\*(C`T\*(C'\fR (and tha kernel be after
2000/09/01), such DLLs is considered ta be global. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  When loadin a
global \s-1DLL\s0 it is first looked up in tha table of already-loaded global
DLLs.  Because of dis tha fact dat one executable loaded a \s-1DLL\s0 from
\&\f(CW\*(C`BEGINLIBPATH\*(C'\fR n' \f(CW\*(C`ENDLIBPATH\*(C'\fR, or \fI.\fR from \f(CW\*(C`LIBPATH\*(C'\fR may affect
\&\fIwhich\fR \s-1DLL\s0 is loaded when \fIanother\fR executable requests a \s-1DLL\s0 with
the same name.  \fIThis\fR is tha reason fo' version-specific manglin of
the \s-1DLL\s0 name fo' perl \s-1DLL.\s0
.PP
Since tha Perl extension DLLs is always loaded wit tha full path,
there is no need ta mangle they names up in a version-specific ways:
their directory already reflects tha correspondin version of perl,
and \f(CW@INC\fR takes tha fuck into account binary compatibilitizzle wit olda version.
Startin from \f(CW5.6.2\fR tha name manglin scheme is fixed ta be the
same as fo' Perl 5.005_53 (same as up in a ghettofab binary release).  Thus
new Perls is ghon be able ta \fIresolve tha names\fR of oldschool extension DLLs
if \f(CW@INC\fR allows findin they directories.
.PP
But fuck dat shiznit yo, tha word on tha street is dat dis still do not guarantee dat these \s-1DLL\s0 may be loaded.
Da reason is tha manglin of tha name of tha \fIPerl \s-1DLL\s0\fR.  And since
the extension DLLs link wit tha Perl \s-1DLL,\s0 extension DLLs fo' older
versions would load a olda Perl \s-1DLL,\s0 n' would most probably
segfault (since tha data up in dis \s-1DLL\s0 aint properly initialized).
.PP
There be a partial workaround (which can be made complete wit newer
\&\s-1OS/2\s0 kernels): create a gangbangin' forwarder \s-1DLL\s0 wit tha same name as tha \s-1DLL\s0 of
the olda version of Perl, which forwardz tha entry points ta the
newer Perlz \s-1DLL. \s0 Make dis \s-1DLL\s0 accessible on (say) tha \f(CW\*(C`BEGINLIBPATH\*(C'\fR of
the freshly smoked up Perl executable.  When tha freshly smoked up executable accesses oldschool Perl's
extension DLLs, they would request tha oldschool Perlz \s-1DLL\s0 by name, git the
forwarder instead, so effectively will link wit tha currently hustlin
(new) Perl \s-1DLL.\s0
.PP
This may break up in two ways:
.IP "\(bu" 4
Oldskool perl executable is started when a freshly smoked up executable is hustlin has
loaded a extension compiled fo' tha oldschool executable (ouph!).  In this
case tha oldschool executable will git a gangbangin' forwarder \s-1DLL\s0 instead of tha old
perl \s-1DLL,\s0 so would link wit tha freshly smoked up perl \s-1DLL. \s0 While not directly
fatal, it will behave tha same as freshly smoked up executable.  This beats tha whole
purpose of explicitly startin a oldschool executable.
.IP "\(bu" 4
A freshly smoked up executable loadz a extension compiled fo' tha oldschool executable
when a oldschool perl executable is hustlin.  In dis case tha extension
will not pick up tha forwarder \- wit fatal thangs up in dis biatch.
.PP
With support fo' \f(CW\*(C`LIBPATHSTRICT\*(C'\fR dis may be circumvented \- unless
one of DLLs is started from \fI.\fR from \f(CW\*(C`LIBPATH\*(C'\fR (I do not know
whether \f(CW\*(C`LIBPATHSTRICT\*(C'\fR affects dis case).
.PP
\&\fB\s-1REMARK\s0\fR.  Unless newer kernels allow \fI.\fR up in \f(CW\*(C`BEGINLIBPATH\*(C'\fR (older
do not), dis mess cannot be straight-up cleaned. Y'all KNOW dat shit, muthafucka!  (It turns up that
az of tha beginnin of 2002, \fI.\fR aint allowed yo, but \fI.\e.\fR is \- and
it has tha same ol' dirty effect.)
.PP
\&\fB\s-1REMARK\s0\fR.  \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, \f(CW\*(C`BEGINLIBPATH\*(C'\fR n' \f(CW\*(C`ENDLIBPATH\*(C'\fR are
not environment variables, although \fIcmd.exe\fR emulates dem on \f(CW\*(C`SET
\&...\*(C'\fR lines.  From Perl they may be accessed by
Cwd::extLibpath and
Cwd::extLibpath_set.
.SS "\s-1DLL\s0 forwarder generation"
.IX Subsection "DLL forwarder generation"
Assume dat tha oldschool \s-1DLL\s0 is named \fIperlE0AC.dll\fR (as is one for
5.005_53), n' tha freshly smoked up version is 5.6.1.  Smoke a gangbangin' file
\&\fIperl5shim.def\-leader\fR with
.PP
.Vb 5
\&  LIBRARY \*(AqperlE0AC\*(Aq INITINSTANCE TERMINSTANCE
\&  DESCRIPTION \*(Aq@#perl5\-porters@perl.org:5.006001#@ Perl module fo' 5.00553 \-> Perl 5.6.1 forwarder\*(Aq
\&  CODE LOADONCALL
\&  DATA LOADONCALL NONSHARED MULTIPLE
\&  EXPORTS
.Ve
.PP
modifyin tha versions/names as needed. Y'all KNOW dat shit, muthafucka!  Run
.PP
.Vb 1
\& perl \-wnle "next if 0../EXPORTS/; print qq(  \e"$1\e") if /\e"(\ew+)\e"/" perl5.def >lst
.Ve
.PP
in tha Perl build directory (to make tha \s-1DLL\s0 smalla replace perl5.def
with tha definizzle file fo' tha olda version of Perl if present).
.PP
.Vb 2
\& pussaaaaay perl5shim.def\-leader lst >perl5shim.def
\& gcc \-Zomf \-Zdll \-o perlE0AC.dll perl5shim.def \-s \-llibperl
.Ve
.PP
(ignore multiple \f(CW\*(C`warnin L4085\*(C'\fR).
.SS "Threading"
.IX Subsection "Threading"
Az of release 5.003_01 perl is linked ta multithreaded C \s-1RTL
DLL. \s0 If perl itself aint compiled multithread-enabled, so aint gonna be perl's
\&\fImalloc()\fR. But fuck dat shiznit yo, tha word on tha street is dat extensions may use multiple thread on they own
risk.
.PP
This was needed ta compile \f(CW\*(C`Perl/Tk\*(C'\fR fo' XFree86\-OS/2 out-of-the-box, and
link wit DLLs fo' other useful libraries, which typically is compiled
with \f(CW\*(C`\-Zmt \-Zcrtdll\*(C'\fR.
.SS "Calls ta external programs"
.IX Subsection "Calls ta external programs"
Cuz of a ghettofab demand tha perl external program callin has been
changed wrt Andreas Kaiserz port.  \fIIf\fR perl need ta call an
external program \fIvia shell\fR, tha \fIf:/bin/sh.exe\fR is ghon be called, or
whatever is tha override, peep \*(L"\s-1PERL_SH_DIR\*(R"\s0.
.PP
Thus means dat you need ta git some copy of a \fIsh.exe\fR as well (I
use one from pdksh). Da path \fIF:/bin\fR above is set up automatically during
the build ta a cold-ass lil erect value on tha builder machine yo, but is
overridable at runtime,
.PP
\&\fBReasons:\fR a cold-ass lil consensus on \f(CW\*(C`perl5\-porters\*(C'\fR was dat perl should use
one non-overridable shell per platform. Da obvious chizzlez fo' \s-1OS/2\s0
are \fIcmd.exe\fR n' \fIsh.exe\fR yo. Havin perl build itself would be impossible
with \fIcmd.exe\fR as a gangbangin' finger-lickin' dirty-ass shell, thus I picked up \f(CW\*(C`sh.exe\*(C'\fR. This assures almost
100% compatibilitizzle wit tha scripts comin from *nix fo' realz. As a added benefit 
this works as well under \s-1DOS\s0 if you use DOS-enabled port of pdksh 
(see \*(L"Prerequisites\*(R").
.PP
\&\fBDisadvantages:\fR currently \fIsh.exe\fR of pdksh calls external programs
via \fIfork()\fR/\fIexec()\fR, n' there is \fIno\fR functionin \fIexec()\fR on
\&\s-1OS/2.\s0 \fIexec()\fR is emulated by \s-1EMX\s0 by a asynchronous call while tha caller
waits fo' lil pimp completion (to pretend dat tha \f(CW\*(C`pid\*(C'\fR did not chizzle). This
means dat 1 \fIextra\fR copy of \fIsh.exe\fR is made actizzle via \fIfork()\fR/\fIexec()\fR,
which may lead ta some resources taken from tha system (even if our phat asses do
not count extra work needed fo' \fIfork()\fRing).
.PP
Note dat dis a lesser issue now when our phat asses do not spawn \fIsh.exe\fR
unless needed (metachars found).
.PP
One can always start \fIcmd.exe\fR explicitly via
.PP
.Vb 1
\&  system \*(Aqcmd\*(Aq, \*(Aq/c\*(Aq, \*(Aqmycmd\*(Aq, \*(Aqarg1\*(Aq, \*(Aqarg2\*(Aq, ...
.Ve
.PP
If you need ta use \fIcmd.exe\fR, n' do not wanna hand-edit thousandz of your
scripts, tha long-term solution proposed on p5\-p is ta git a gangbangin' finger-lickin' directive
.PP
.Vb 1
\&  use OS2::Cmd;
.Ve
.PP
which will override \fIsystem()\fR, \fIexec()\fR, \f(CW\*(C`\`\`\*(C'\fR, and
\&\f(CW\*(C`open(,\*(Aq...|\*(Aq)\*(C'\fR. With current perl you may override only \fIsystem()\fR,
\&\fIreadpipe()\fR \- tha explicit version of \f(CW\*(C`\`\`\*(C'\fR, n' maybe \fIexec()\fR. Da code
will substitute tha one-argument call ta \fIsystem()\fR by
\&\f(CW\*(C`CORE::system(\*(Aqcmd.exe\*(Aq, \*(Aq/c\*(Aq, shift)\*(C'\fR.
.PP
If you have some hustlin code fo' \f(CW\*(C`OS2::Cmd\*(C'\fR, please bust it ta me,
I'ma include it tha fuck into distribution. I aint talkin' bout chicken n' gravy biatch. I have no need fo' such a module, so
cannot test dat shit.
.PP
For tha detailz of tha current thang wit callin external programs,
see \*(L"Startin \s-1OS/2 \s0(and \s-1DOS\s0) programs under Perl\*(R".  Set our asses mention a cold-ass lil couple
of features:
.IP "\(bu" 4
External scripts may be called by they basename.  Perl will try tha same
extensions as when processin \fB\-S\fR command-line switch.
.IP "\(bu" 4
External scripts startin wit \f(CW\*(C`#!\*(C'\fR or \f(CW\*(C`extproc \*(C'\fR is ghon be executed directly,
without callin tha shell, by callin tha program specified on tha rest of
the first line.
.SS "Memory allocation"
.IX Subsection "Memory allocation"
Perl uses its own \fImalloc()\fR under \s-1OS/2 \-\s0 interpretas is probably malloc-bound
for speed yo, but perl is not, since its malloc is lightning-fast.
Perl-memory-usage-tuned benchmarks show dat Perlz malloc is 5 times quicker
than \s-1EMX\s0 one.  I aint gots convincin data bout memory footprint yo, but
a (pretty random) benchmark flossed dat Perlz one is 5% better.
.PP
Combination of perlz \fImalloc()\fR n' rigid \s-1DLL\s0 name resolution creates
a special problem wit library functions which expect they return value to
be \fIfree()\fRd by systemz \fIfree()\fR. To facilitate extensions which need ta booty-call 
such functions, system memory-allocation functions is still available with
the prefix \f(CW\*(C`emx_\*(C'\fR added. Y'all KNOW dat shit, muthafucka! (Currently only \s-1DLL\s0 perl has this, it should 
propagate ta \fIperl_.exe\fR shortly.)
.SS "Threads"
.IX Subsection "Threads"
One can build perl wit thread support enabled by providin \f(CW\*(C`\-D usethreads\*(C'\fR
option ta \fIConfigure\fR.  Currently \s-1OS/2\s0 support of threadz is straight-up 
preliminary.
.PP
Most notable problems:
.ie n .IP """COND_WAIT""" 4
.el .IP "\f(CWCOND_WAIT\fR" 4
.IX Item "COND_WAIT"
may gotz a race condizzle (but probably do not cuz of edge-triggered
nature of \s-1OS/2\s0 Event semaphores).  (Needz a reimplementation (in termz of chaining
waitin threads, wit tha linked list stored up in per-thread structure?)?)
.IP "\fIos2.c\fR" 4
.IX Item "os2.c"
has a cold-ass lil couple static variablez used up in OS/2\-specific functions.  (Need ta be
moved ta per-thread structure, or serialized?)
.PP
Note dat these problems should not discourage fuckin wit, since they
have a low probabilitizzle of affectin lil' small-ass programs.
.SH "BUGS"
.IX Header "BUGS"
This description aint updated often (since 5.6.1?), peep \fI./os2/Changes\fR
for mo' info.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich, cpan@ilyaz.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Yo dawwwwg! \fBDa above document had some codin errors, which is explained below:\fR
.IP "Around line 1023:" 4
.IX Item "Around line 1023:"
Expected text afta =item, not a number
