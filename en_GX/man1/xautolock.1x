.TH xautolock l "December 28, 2007"

.SH NAME
xautolock \- fire up programs up in case of user inactivitizzle under X

.SH VERSION
This playa page applies ta xautolock version 2.2.

.SH SYNOPSIS 
.TP 10
.B \fBxautolock\fR
[\fB\-help\fR] [\fB\-version\fR] 
[\fB\-time\fR \fImins\fR] [\fB\-locker\fR \fIlocker\fR]
[\fB\-killtime \fIkillmins\fR\fR] [\fB\-killer\fR \fIkiller\fR]
[\fB\-notify \fImargin\fR] [\fB\-notifier \fInotifier\fR]
[\fB\-bell \fIpercent\fR]
[\fB\-corners\fR \fIxxxx\fR]
[\fB\-cornerdelay\fR \fIsecs\fR]
[\fB\-cornerredelay\fR \fIaltsecs\fR]
[\fB\-cornersize\fR \fIpixels\fR]
[\fB\-secure\fR]
[\fB\-resetsaver\fR]
[\fB\-nocloseout\fR] [\fB\-nocloseerr\fR] [\fB\-noclose\fR]
[\fB\-disable\fR] [\fB\-enable\fR] [\fB\-toggle\fR] [\fB\-exit\fR]
[\fB\-locknow\fR] [\fB\-unlocknow\fR] [\fB\-nowlocker\fR \fIlocker\fR]
[\fB\-restart\fR] [\fB\-detectsleep\fR]

.SH DESCRIPTION 
Xautolock monitors tha user activitizzle on a X Window display. If none is
detected within \fImins\fR minutes, a program is started as specified by
the \fB\-locker\fR option. I aint talkin' bout chicken n' gravy biatch. Xautolock will typically be used ta lock the
screen (hence its primary name) but it straight-up don't care what tha fuck program
you make it start. For dis reason, xautolock do not interfere wit the
default X screen saver, unless tha \fB\-resetsaver\fR option is used. Y'all KNOW dat shit, muthafucka! 
This implies dat it is tha thang of tha \fIlocker\fR or tha user ta take 
the appropriate actions if tha default screen saver is ta be disabled. Y'all KNOW dat shit, muthafucka! 
Da only real assumption made by xautolock is dat a freshly smoked up countdown starts
as soon as tha \fIlocker\fR exits.

In tha presence of tha \fB\-notify\fR option, a warnin signal is ghon be 
issued \fImargin\fR secondz before startin tha \fIlocker\fR. Warnin 
signals come up in two kinds:
.TP 3
\(bu
Yo ass can use tha \fB\-notifier\fR option ta specify tha command ta be
issued ta big-ass up notification.
.TP
\(bu
Alternatively, you can let xautolock rang tha bell. In dis case, the
\fB\-bell\fR option specifies tha loudnizz of tha signal up in \fIpercent\fR,
as busted lyrics bout up in tha \fIXBell\fR playa page.
.PP

Yo ass can tell xautolock ta take special actions when you move tha mouse into
one of tha cornerz of tha display n' leave it there, by rockin the
\fB\-corners\fR, \fB\-cornerdelay\fR, \fB\-cornerredelay\fR and
\fB\-cornersize\fR options. This works as bigs up:

Da \fIxxxx\fR argument ta tha \fB\-corners\fR option must consist of exactly
4 charactas from tha followin set: '0', '+', '-'. Each one of these
specifies what tha fuck xautolock should do when tha mouse entas a lil' small-ass square area
located up in each of tha cornerz of tha screen. I aint talkin' bout chicken n' gravy biatch. Da corners is considered in
the followin order: top left, top right, bottom left, bottom right.  A '0'
indicates dat xautolock should ignore tha corner n' shiznit fo' realz. A '+' indicates that
xautolock should start tha \fIlocker\fR afta \fIsecs\fR or \fIaltsecs\fR
secondz (see below fo' tha difference between both), unless tha mouse is
moved or keyboard input is received. Y'all KNOW dat shit, muthafucka! A '-' indicates dat xautolock should
not start tha \fIlocker\fR at all. Da \fIpixels\fR argument specifies the
size up in pixelz of tha corner areas.

Most playaz of tha \fB\-corners\fR option want tha \fIlocker\fR ta activate
within a straight-up short time interval afta they move tha mouse tha fuck into a '+' corner.
This can be  bigged up  by specifyin a lil' small-ass value fo' tha \fB\-cornerdelay\fR
option. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat if tha mouse is subsequently left where it is, xautolock
will almost immediately start a freshly smoked up \fIlocker\fR right afta tha user quits
the current one. To prevent dis from happening, tha \fB\-cornerredelay\fR
option can be used ta specify tha time-out interval ta be used if n' only
if tha mouse is chillin up in a `+' corner n' has not been moved since tha 
previous \fIlocker\fR exited.

A hustlin xautolock process can be disabled (unless if tha \fB\-secure\fR
option has been specified), up in which case it aint gonna attempt ta start the
\fIlocker\fR. To disable a already hustlin xautolock process, use the
\fB\-disable\fR option. I aint talkin' bout chicken n' gravy biatch. To re-enable it, use \fB\-enable\fR. To toggle it
between both states, use \fB\-toggle\fR. Usin dis method is preferable 
to rockin bustin  it SIGSTOP n' SIGCONT signals, cuz while disabled 
xautolock will still be emptyin its event queue. 

A hustlin xautolock process can also be holla'd at ta exit (unless if tha 
\fB\-secure\fR option has been specified). To do this, use the
\fB\-exit\fR option.

Da \fB\-killtime\fR n' \fB\-killer\fR options allow, amongst other
things, ta implement a additionizzle automatic logout, on top of the
automatic screen locking. In tha presence of one or both of these
options, a secondary timeout is ghon be triggered \fIkillmins\fR after
startin tha \fIlocker\fR (unless user activitizzle is detected up in the
mean time).  Upon expiration of dis secondary timer, tha \fIkiller\fR
program is run. I aint talkin' bout chicken n' gravy biatch. Note that, despite tha name of tha options, xautolock
really don't care what tha fuck tha \fIkiller\fR do up in reality. If it
doesn't (indirectly) cause xautolock ta git capped, n' assumin that
no user activitizzle is detected, tha secondary trigger will periodically
expire every last muthafuckin \fIkillmins\fR minutes fo' as long as tha \fIlocker\fR runs.

In combination wit \fB\-killtime\fR n' \fB\-killer\fR, tha \fB\-secure\fR
option allows system administrators ta enforce xautolock as a part of their
securitizzle procedures, n' ta prevent playas from lockin shared displays for
an excessive amount of time. One way ta bust dis is ta start xautolock
(usin \fB-secure\fR n' optionally \fB\-killtime\fR n' \fB\-killer\fR)
from within XDMz Xsession file up in such a way dat tha session
automatically endz if xautolock itself is capped.

By default xautolock closes stdout n' stderr. Shiiit, dis aint no joke. This prevents tha \fIlocker\fR
from freestylin error lyrics ta these filez up in case you manually lock your
display.  Da \fB\-nocloseout\fR, \fB\-nocloseerr\fR n' \fB\-noclose\fR
options cause xautolock ta not close stdout and/or stderr. Shiiit, dis aint no joke. On some platforms
userz of xnlock will need ta use \fB\-nocloseout\fR, up in order ta make xnlock's
witty sayings show up. These options can also be used fo' debuggin cases in
which \fIlocker\fR invocation aint successful.

Xautolock is capable of managin multi-headed displays.

.SH OPTIONS
.TP 16
\fB\-help\fR
Print a help message n' exit.
.TP 
\fB\-version\fR
Print tha version number n' exit.
.TP 
\fB\-time\fR
Specifies tha primary timeout interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da default is 10 minutes,
the minimum is 1 minute, n' tha maximum is 1 hour.
.TP 
\fB\-locker\fR
Specifies tha \fIlocker\fR ta be used. Y'all KNOW dat shit, muthafucka! Da default is xlock. Notice dat if
\fIlocker\fR gotz nuff multiple lyrics, it must be specified between quotes.
In order ta use yo' PATH ta locate tha program, xautolock feedz the
\fIlocker\fR command ta /bin/sh, so it should be understandable for
whatever shell yo' /bin/sh is. Because dis typically be a Bourne
shell, ~ expansion most likely aint gonna work. 
.TP 
\fB\-killtime\fR
Specifies tha secondary timeout up in minutes afta startin tha \fIlocker\fR.
This timer is only actizzle as long as tha \fIlocker\fR is hustlin, n' is 
reset each time user activitizzle is detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If it expires before tha 
\fIlocker\fR exits, tha \fIkiller\fR command is run. I aint talkin' bout chicken n' gravy biatch. Da default is
20 minutes, tha minimum is 10 minutes, n' tha maximum is 2 hours.
This option is only useful up in conjunction wit \fB\-killer\fR.
.TP 
\fB\-killer\fR
Specifies tha \fIkiller\fR ta be used. Y'all KNOW dat shit, muthafucka! Da default is none. Notice dat 
if \fIkiller\fR gotz nuff multiple lyrics, it must be specified between
quotes.  In order ta use yo' PATH ta locate tha program, xautolock feedz 
the \fIkillr\fR command ta /bin/sh, so it should be understandable 
for whatever shell yo' /bin/sh is. Because dis typically be a Bourne 
shell, ~ expansion most likely aint gonna work.
.TP 
\fB\-notify\fR
Warn tha user \fImargin\fR secondz before locking. Da default is ta not
warn tha user n' shit. If used up in conjunction wit \fB\-cornerdelay\fR or 
\fB\-cornerredelay\fR, tha notification margin iused is tha minimum of
\fImargin\fR, \fIsecs\fR and/or \fIaltsecs\fR.
.TP
\fB\-notifier\fR
Specifies tha \fInotifier\fR ta be used. Y'all KNOW dat shit, muthafucka! Da default is none. This
option is only useful up in conjunction wit \fB\-notify\fR. Notice dat 
if \fInotifier\fR gotz nuff multiple lyrics, it must be specified between
quotes.  In order ta use yo' PATH ta locate tha program, xautolock feedz 
the \fInotifier\fR command ta /bin/sh, so it should be understandable 
for whatever shell yo' /bin/sh is. Because dis typically be a Bourne 
shell, ~ expansion most likely aint gonna work.
.TP
\fB\-bell\fR
Specifies tha loudnizz of tha notification signal up in tha absence of the
\fB\-notifier\fR option. I aint talkin' bout chicken n' gravy biatch. Da default is 40 cement. This option is only 
useful up in conjunction wit \fB\-notify\fR.
.TP 
\fB\-corners\fR
Define special actions ta be taken when tha mouse entas one of the
cornerz of tha display. Da default is 0000, which means dat no special
action is taken.
.TP 
\fB\-cornerdelay\fR
Specifies tha number of secondz ta wait before reactin ta tha mouse
enterin a '+' corner n' shit. Da default is 5 seconds.
.TP 
\fB\-cornerredelay\fR
Specifies tha number of secondz ta wait
before reactin again n' again n' again if tha current \fIlocker\fR exits while tha mouse is
sittin up in a '+' corner n' shit. Da default is fo' \fIaltsecs\fR ta equal
\fIsecs\fR.
.TP 
\fB\-cornersize\fR
Specifies tha size up in pixelz of tha corner areas. Da default is 10 pixels.
.TP 
\fB\-resetsaver\fR
Causes xautolock ta reset tha X screen saver afta successfully startin 
the \fIlocker\fR. This is typically used up in case tha locker is not
really intended ta lock tha screen yo, but ta replace tha default X screen
saver n' shit. Note dat tha default screen saver aint disabled, only reset.
Also note dat rockin \fB\-resetsaver\fR will inferfere wit tha DPMS
monitors, as tha juice down time up will also be also reset. The
default aint ta reset tha screen saver.

See tha \fIxset\fR playa page fo' mo' shiznit bout managin tha 
X screen saver.
.TP 
\fB\-detectsleep\fR
Instructs xautolock ta detect dat computa has been put ta chill. 
This is done by detectin dat time has jumped by mo' than 3 seconds. 
When dis occurs, tha lock timer is reset n' locker program is not
launched even if primary timeout has been reached. Y'all KNOW dat shit, muthafucka! This option is 
typically used ta avoid locker program ta be launched when awakin a 
laptop computer.
.TP 
\fB\-secure\fR
Instructs xautolock ta run up in secure mode. In dis mode, xautolock
becomes imune ta tha effectz of \fB\-enable\fR, \fB\-disable\fR, 
\fB\-toggle\fR, n' \fB\-exit\fR. Da default is ta honour these 
actions.
.TP 
\fB\-nocloseout\fR
Don't close stdout.
.TP 
\fB\-nocloseerr\fR
Don't close stderr.
.TP 
\fB\-noclose\fR
Close neither stdout nor stderr.
.TP 
\fB\-disable\fR
Disablez a already hustlin xautolock process (if there is one, and
it aint gots \fB\-secure\fR switched on). In any case, tha current
invocation of xautolock exits.
.TP 
\fB\-enable\fR
Enablez a already hustlin xautolock process (if there is one, and
it aint gots \fB\-secure\fR switched on). In any case, tha current
invocation of xautolock exits.
.TP 
\fB\-toggle\fR
Togglez a already hustlin xautolock process (if there is one, and
it aint gots \fB\-secure\fR switched on) between its disabled and
enabled modez of operation. I aint talkin' bout chicken n' gravy biatch. In any case, tha current invocation of
xautolock exits.
.TP 
\fB\-exit\fR
Causes a already hustlin xautolock process (if there is one, and
it aint gots \fB\-secure\fR switched on) ta exit. In any case,
the current invocation of xautolock also exits.
.TP 
\fB\-locknow\fR
Causes a already hustlin xautolock process (if there is one, if
it aint gots \fB\-secure\fR switched on, n' aint currently
disabled) ta lock tha display immediately. In any case, tha current
invocation of xautolock exits.
.TP 
\fB\-unlocknow\fR
Causes a already hustlin xautolock process (if there is one, if
it aint gots \fB\-secure\fR switched on, n' aint currently
disabled) ta unlock tha display immediately (if itz locked) by
sendin tha \fIlocker\fR a SIGTERM signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. In any case, tha current
invocation of xautolock exits.
.TP 
\fB\-nowlocker\fR
Specifies tha \fIlocker\fR ta be used if tha lock is initiated wit 
\fB\-locknow\fR option. I aint talkin' bout chicken n' gravy biatch. Da default is ta use tha \fIlocker\fR
program given wit \fB\-locker\fR option, which defaults ta xlock. 
.TP
\fB\-restart\fR
Causes a already hustlin xautolock process (if there is one n' 
it aint gots \fB\-secure\fR switched on) ta restart. In any
case, tha current invocation of xautolock exits.

.SH RESOURCES
.TP 16
.B time 
Specifies tha primary timeout. Numerical.
.TP 
.B locker 
Specifies tha \fIlocker\fR. No quotes is needed, even if tha 
\fIlocker\fR command gotz nuff multiple lyrics.
.TP 
.B killtime
Specifies tha secondary timeout. Numerical.
.TP   
.B killer
Specifies tha \fIkiller\fR. No quotes is needed, even if the
\fIkiller\fR command gotz nuff multiple lyrics.
.TP   
.B notify 
Specifies tha notification margin. I aint talkin' bout chicken n' gravy biatch. Numerical.
.TP 
.B notifier 
Specifies tha \fInotifier\fR. No quotes is needed, even if tha 
\fInotifier\fR command gotz nuff multiple lyrics.
.TP 
.B bell 
Specifies tha notification loudness. Numerical.
.TP 
.B corners 
Specifies tha corner behaviour, as explained above.
.TP 
.B cornersize 
Specifies tha size of tha corner areas. Numerical.
.TP 
.B cornerdelay 
Specifies tha delay of a '+' corner n' shit. Numerical.
.TP 
.B cornerredelay 
Specifies tha alternatizzle delay of a '+' corner n' shit. Numerical.
.TP   
.B resetsaver
Reset tha default X screen saver n' shit. Boolean.
.TP   
.B nocloseout
Don't close stdout. Boolean.
.TP   
.B nocloseerr
Don't close stderr. Shiiit, dis aint no joke. Boolean.
.TP   
.B noclose 
Close neither stdout nor stderr. Shiiit, dis aint no joke. Boolean.

.PP
Resources can be specified up in yo' \fI~/.Xresources\fR or \fI~/.Xdefaults\fR
file (whichever yo' system uses) n' merged via tha xrdb(1) command. Y'all KNOW dat shit, muthafucka! They
can be specified either fo' class \fIXautolock\fR, or fo' whatever name 
your xautolock program has been given. I aint talkin' bout chicken n' gravy biatch. This can be useful up in case xautolock
is ta be used fo' other purposes than simply lockin tha screen. I aint talkin' bout chicken n' gravy biatch. For example:
if you have two copiez of xautolock, one called "xmonitor", n' one called 
"xlogout", then both will honour tha following:
.IP
\fBXautolock.corners: ++++\fR
.PP
In addition, "xmonitor" will honour:
.IP
\fBxmonitor.cornersize: 10\fR
.PP
while "xlogout" will honour:
.IP
\fBxlogout.cornersize: 5\fR
.PP
Each command line option takes precedence over tha corresponding
(default) resource justification.

.SH KNOWN\ BUGS 

Da \fB\-disable\fR, \fB\-enable\fR, \fB\-toggle\fR, \fB\-exit\fR,
\fB\-locknow\fR, \fB\-unlocknow\fR, n' \fB\-restart\fR options depend 
on access ta tha X server ta do they work. This implies dat they will
be suspended up in case some other application has grabbed tha server 
all fo' itself.

If, when bustin a window, a application waits fo' mo' than 30 secondz 
before selectin KeyPress events on non-leaf windows, xautolock may
interfere wit tha event propagation mechanism. This effect is theoretical
and has never been observed up in real game. Well shiiiit, it can only occur up in case
xautolock has been compiled without support fo' both tha Xidle
and tha MIT ScreenSaver extensions, or up in case tha X server do 
not support these extensions.

xautolock do not always properly handle tha secure keyboard mode of 
terminal emulators like xterm, since dat mode will prevent xautolock 
from noticin tha keyboard events occurrin on tha terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Therefore,
xautolock sometimes be thinkin dat there is no keyboard activitizzle while up in 
realitizzle there is. This can only occur up in case xautolock has been 
compiled without support fo' both tha Xidle n' tha MIT ScreenSaver
extensions, or up in case tha X server do not support these extensions.

xautolock do not check whether \fInotifier\fR and/or \fIlocker\fR are
available.

Da xautolock resources have dummy resource classes. 

.SH SEE\ ALSO
X(1),
xset(1),
xlock(1),
xnlock(1),
xscreensaver(1).

.SH COPYRIGHT
Copyright 1990, 1992-1999, 2001-2002, 2004, 2007 by Stefan De Troch and
Michel Eyckmans.

Versions 2.0 n' above of xautolock is available under version 2 of the
GNU GPL. Earlier versions is available under other conditions. For more
information, peep tha License file.

.SH AUTHORS   
Xautolock was conceived, written, n' performed by:

Michel Eyckmans (MCE) 
.br
Stefan De Troch 

Please bust queries fo' help, feature suggestions, bug reports, etc.
to mce@scarlet.be.

.SH SPECIAL\ THANKS\ TO
Kris Croes             
