.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL589DELTA 1"
.TH PERL589DELTA 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl589delta \- what tha fuck is freshly smoked up fo' perl v5.8.9
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document raps bout differences between tha 5.8.8 release and
the 5.8.9 release.
.SH "Notice"
.IX Header "Notice"
Da 5.8.9 release is ghon be tha last dope release of tha 5.8.x
series fo' realz. Any future releasez of 5.8.x will likely only be ta deal with
securitizzle issues, n' platform build failures yo. Hence you should look to
migratin ta 5.10.x, if you aint started already.
See \*(L"Known Problems\*(R" fo' mo' shiznit.
.SH "Incompatible Chizzles"
.IX Header "Incompatible Chizzles"
A particular construction up in tha source code of extensions freestyled up in \*(C+
may need changing. Right back up in yo muthafuckin ass. See \*(L"Changed Internals\*(R" fo' mo' details fo' realz. All
extensions freestyled up in C, most freestyled up in \*(C+, n' all existin compiled
extensions is unaffected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This was necessary ta improve \*(C+ support.
.PP
Other than this, there be no chizzlez intentionally incompatible wit 5.8.8.
If any exist, they is bugs n' reports is welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Characta Database 5.1.0."
.IX Subsection "Unicode Characta Database 5.1.0."
Da copy of tha Unicode Characta Database included up in Perl 5.8 has
been updated ta 5.1.0 from 4.1.0. Right back up in yo muthafuckin ass. See
<http://www.unicode.org/versions/Unicode5.1.0/#NotableChanges> fo' the
notable chizzles.
.SS "stat n' \-X on directory handles"
.IX Subsection "stat n' -X on directory handles"
It be now possible ta booty-call \f(CW\*(C`stat\*(C'\fR n' tha \f(CW\*(C`\-X\*(C'\fR filestat operators on
directory handlez fo' realz. As both directory n' file handlez is barewords, there
can be ambiguitizzles over which was intended. Y'all KNOW dat shit, muthafucka! In these thangs tha file
handle semantics is preferred. Y'all KNOW dat shit, muthafucka! Both also treat \f(CW*FILE{IO}\fR filehandles
like \f(CW*FILE\fR filehandles.
.ie n .SS "Source filtas up in @INC"
.el .SS "Source filtas up in \f(CW@INC\fP"
.IX Subsection "Source filtas up in @INC"
It aint nuthin but possible ta enhizzle tha mechanizzle of subroutine hooks up in \f(CW@INC\fR by
addin a source filta on top of tha filehandle opened n' returned by the
hook. This feature was planned a long-ass time ago yo, but wasn't like working
until now, nahmeean? Right back up in yo muthafuckin ass. See \*(L"require\*(R" up in perlfunc fo' details. (Nicholas Clark)
.SS "Exceptions up in constant folding"
.IX Subsection "Exceptions up in constant folding"
Da constant foldin routine is now wrapped up in a exception handlez, and
if foldin throws a exception (like fuckin attemptin ta evaluate 0/0), perl
now retains tha current optree, rather than abortin tha whole program.
Without dis chizzle, programs would not compile if they had expressions that
happened ta generate exceptions, even though dem expressions was up in code
that could never be reached at runtime. (Nicholas Clark, Dizzle Mitchell)
.ie n .SS """no VERSION"""
.el .SS "\f(CWno VERSION\fP"
.IX Subsection "no VERSION"
Yo ass can now use \f(CW\*(C`no\*(C'\fR followed by a version number ta specify dat you
wanna bust a version of perl olda than tha specified one.
.SS "Improved internal \s-1UTF\-8\s0 cachin code"
.IX Subsection "Improved internal UTF-8 cachin code"
Da code dat caches calculated \s-1UTF\-8\s0 byte offsets fo' characta offsets for
a strang has been re-written. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Several bugs done been located n' eliminated,
and tha code now make betta use of tha shiznit it has, so should be
fasta n' shit. In particular, it don't scan ta tha end of a strang before
calculatin a offset within tha string, which should speed up some operations
on long strings. Well shiiiit, it is now possible ta disable tha cachin code at run time,
to verify dat it aint tha cause of suspected problems.
.SS "Runtime relocatable installations"
.IX Subsection "Runtime relocatable installations"
There is now \fIConfigure\fR support fo' bustin a perl tree dat is relocatable
at run time. peep \*(L"Relocatable installations\*(R".
.SS "New internal variables"
.IX Subsection "New internal variables"
.ie n .IP """${^CHILD_ERROR_NATIVE}""" 4
.el .IP "\f(CW${^CHILD_ERROR_NATIVE}\fR" 4
.IX Item "${^CHILD_ERROR_NATIVE}"
This variable gives tha natizzle status returned by tha last pipe close,
backtick command, successful call ta \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR, or from the
\&\f(CW\*(C`system\*(C'\fR operator. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. See perlvar fo' details. (Contributed by Gisle Aas.)
.ie n .IP """${^UTF8CACHE}""" 4
.el .IP "\f(CW${^UTF8CACHE}\fR" 4
.IX Item "${^UTF8CACHE}"
This variable controls tha state of tha internal \s-1UTF\-8\s0 offset cachin code.
1 fo' on (the default), 0 fo' off, \-1 ta debug tha cachin code by checking
all its thangs up in dis biatch against linear scans, n' panickin on any discrepancy.
.ie n .SS """readpipe"" is now overridable"
.el .SS "\f(CWreadpipe\fP is now overridable"
.IX Subsection "readpipe is now overridable"
Da built-in function \f(CW\*(C`readpipe\*(C'\fR is now overridable. Overridin it permits
also ta override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (also known as \f(CW\*(C`\`\`\*(C'\fR).
.SS "simple exception handlin macros"
.IX Subsection "simple exception handlin macros"
Perl 5.8.9 (and 5.10.0 onwards) now serves up a cold-ass lil couple macros ta do hella
basic exception handlin up in \s-1XS\s0 modules. Yo ass can use these macros if you call
code dat may \f(CW\*(C`croak\*(C'\fR yo, but you need ta do some cleanup before givin control
back ta Perl. Right back up in yo muthafuckin ass. See \*(L"Exception Handling\*(R" up in perlguts fo' mo' details.
.SS "\-D option enhancements"
.IX Subsection "-D option enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\-Dq\*(C'\fR suppresses tha \fI\s-1EXECUTING...\s0\fR message when hustlin under \f(CW\*(C`\-D\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Dl\*(C'\fR logs runops loop entry n' exit, n' jump level popping.
.IP "\(bu" 4
\&\f(CW\*(C`\-Dv\*(C'\fR displays tha process id as part of tha trace output.
.SS "XS-assisted \s-1SWASHGET\s0"
.IX Subsection "XS-assisted SWASHGET"
Some pure-perl code dat tha regexp engine was rockin ta retrieve Unicode
propertizzles n' transliteration mappings has been reimplemented up in \s-1XS\s0
for fasta execution.
(\s-1SADAHIRO\s0 Tomoyuki)
.SS "Constant subroutines"
.IX Subsection "Constant subroutines"
Da interpreta internals now support a gangbangin' far mo' memory efficient form of
inlineable constants, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Storin a reference ta a cold-ass lil constant value up in a symbol
table is equivalent ta a gangbangin' full typeglob referencin a cold-ass lil constant subroutine,
but rockin bout 400 bytes less memory. This proxy constant subroutine is
automatically upgraded ta a real typeglob wit subroutine if necessary.
Da approach taken be analogous ta tha existin space optimisation for
subroutine stub declarations, which is stored as plain scalars up in place
of tha full typeglob.
.PP
But fuck dat shiznit yo, tha word on tha street is dat ta aid backwardz compatibilitizzle of existin code, which (wrongly)
does not expect anythang other than typeglobs up in symbol tables, not a god damn thang in
core uses dis feature, other than tha regression tests.
.PP
Stubs fo' prototyped subroutines done been stored up in symbol tablez as plain
strings, n' stubs fo' unprototyped subroutines as tha number \-1, since 5.005,
so code which assumes dat tha core only places typeglobs up in symbol tables
has been makin incorrect assumptions fo' over 10 years.
.SH "New Platforms"
.IX Header "New Platforms"
Compile support added for:
.IP "\(bu" 4
DragonFlyBSD
.IP "\(bu" 4
MidnightBSD
.IP "\(bu" 4
MirOS \s-1BSD\s0
.IP "\(bu" 4
\&\s-1RISC OS \s0
.IP "\(bu" 4
Cray XT4/Catamount
.SH "Modulez n' Pragmata"
.IX Header "Modulez n' Pragmata"
.SS "New Modules"
.IX Subsection "New Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR be a simple framework ta create modulez dat accept
pluggable sub-modules. Da bundled version is 3.8
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR be a hash of hashes dat is keyed on perl version as
indicated up in \f(CW$]\fR. Da bundled version is 2.17
.IP "\(bu" 4
\&\f(CW\*(C`Win32API::File\*(C'\fR now available up in core on Microsizzlez Windows. Da bundled
version is 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`Devel::InnerPackage\*(C'\fR findz all tha packages defined by a single file. Well shiiiit, it is
part of tha \f(CW\*(C`Module::Pluggable\*(C'\fR distribution. I aint talkin' bout chicken n' gravy biatch. Da bundled version is 0.3
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`attributes\*(C'\fR upgraded ta version 0.09
.IP "\(bu" 4
\&\f(CW\*(C`AutoLoader\*(C'\fR upgraded ta version 5.67
.IP "\(bu" 4
\&\f(CW\*(C`AutoSplit\*(C'\fR upgraded ta 1.06
.IP "\(bu" 4
\&\f(CW\*(C`autouse\*(C'\fR upgraded ta version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`B\*(C'\fR upgraded from 1.09_01 ta 1.19
.RS 4
.IP "\(bu" 4
provides freshly smoked up pad related abstraction macros \f(CW\*(C`B::NV::COP_SEQ_RANGE_LOW\*(C'\fR,
\&\f(CW\*(C`B::NV::COP_SEQ_RANGE_HIGH\*(C'\fR, \f(CW\*(C`B::NV::PARENT_PAD_INDEX\*(C'\fR,
\&\f(CW\*(C`B::NV::PARENT_FAKELEX_FLAGS\*(C'\fR, which hides tha difference up in storage in
5.10.0 n' later.
.IP "\(bu" 4
provides \f(CW\*(C`B::sub_generation\*(C'\fR, which exposes \f(CW\*(C`PL_sub_generation\*(C'\fR
.IP "\(bu" 4
provides \f(CW\*(C`B::GV::isGV_with_GP\*(C'\fR, which on pre\-5.10 perls always returns true.
.IP "\(bu" 4
New type \f(CW\*(C`B::HE\*(C'\fR added wit methodz \f(CW\*(C`VAL\*(C'\fR, \f(CW\*(C`HASH\*(C'\fR n' \f(CW\*(C`SVKEY_force\*(C'\fR
.IP "\(bu" 4
Da \f(CW\*(C`B::GVf_IMPORTED_CV\*(C'\fR flag is now set erectly when a proxy
constant subroutine is imported.
.IP "\(bu" 4
bugs fixed up in tha handlin of \f(CW\*(C`PMOP\*(C'\fRs.
.IP "\(bu" 4
\&\f(CW\*(C`B::BM::PREVIOUS\*(C'\fR returns now \f(CW\*(C`U32\*(C'\fR, not \f(CW\*(C`U16\*(C'\fR.
\&\f(CW\*(C`B::CV::START\*(C'\fR n' \f(CW\*(C`B:CV::ROOT\*(C'\fR return now \f(CW\*(C`NULL\*(C'\fR on a \s-1XSUB,
\&\s0\f(CW\*(C`B::CV::XSUB\*(C'\fR n' \f(CW\*(C`B::CV::XSUBANY\*(C'\fR return 0 on a non-XSUB.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::C\*(C'\fR upgraded ta 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Concise\*(C'\fR upgraded ta 0.76
.RS 4
.IP "\(bu" 4
new option \f(CW\*(C`\-src\*(C'\fR causes tha renderin of each statement (startin with
the nextstate \s-1OP\s0) ta be preceded by tha straight-up original gangsta line of source code that
generates dat shit.
.IP "\(bu" 4
new option \f(CW\*(C`\-stash="somepackage"\*(C'\fR, \f(CW\*(C`require\*(C'\fRs \*(L"somepackage\*(R", n' then renders
each function defined up in its namespace.
.IP "\(bu" 4
now has documentation of detailed hint symbols.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Debug\*(C'\fR upgraded ta version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR upgraded ta version 0.87
.RS 4
.IP "\(bu" 4
properly deparse \f(CW\*(C`print readpipe $x, $y\*(C'\fR.
.IP "\(bu" 4
now handlez \f(CW\*(C`\*(Aq\*(Aq\-\*(C'\fR()>, \f(CW\*(C`::()\*(C'\fR, \f(CW\*(C`sub :: {}\*(C'\fR, \fIetc.\fR erectly [\s-1RT\s0 #43010].
All bugs up in parsin these kindz of syntax is now fixed:
.Sp
.Vb 5
\&    perl \-MO=Deparse \-e \*(Aq"my %h = "\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aq::\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub :: {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqpackage a; sub a::b::c {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub the::main::road {}\*(Aq
.Ve
.IP "\(bu" 4
does \fBnot\fR deparse \f(CW$^H{v_string}\fR, which be automatically set by the
internals.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Lint\*(C'\fR upgraded ta version 1.11
.IP "\(bu" 4
\&\f(CW\*(C`B::Terse\*(C'\fR upgraded ta version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`base\*(C'\fR upgraded ta version 2.13
.RS 4
.IP "\(bu" 4
loadin a module via base.pm would mask a global \f(CW$SIG{_\|_DIE_\|_}\fR up in that
module.
.IP "\(bu" 4
push all classes at once up in \f(CW@ISA\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Benchmark\*(C'\fR upgraded ta version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`bigint\*(C'\fR upgraded ta 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bignum\*(C'\fR upgraded ta 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bigrat\*(C'\fR upgraded ta 0.23
.IP "\(bu" 4
\&\f(CW\*(C`blib\*(C'\fR upgraded ta 0.04
.IP "\(bu" 4
\&\f(CW\*(C`Carp\*(C'\fR upgraded ta version 1.10
.Sp
Da argument backtrace code now shows \f(CW\*(C`undef\*(C'\fR as \f(CW\*(C`undef\*(C'\fR,
instead of a strang \fI\*(L"undef\*(R"\fR.
.IP "\(bu" 4
\&\f(CW\*(C`CGI\*(C'\fR upgraded ta version 3.42
.IP "\(bu" 4
\&\f(CW\*(C`charnames\*(C'\fR upgraded ta 1.06
.IP "\(bu" 4
\&\f(CW\*(C`constant\*(C'\fR upgraded ta version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR upgraded ta version 1.9301
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR upgraded ta version 3.29 wit some platform specific
improvements (includin fo' \s-1VMS\s0).
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR upgraded ta version 2.121_17
.RS 4
.IP "\(bu" 4
Fixes hash iterator current posizzle wit tha pure Perl version [\s-1RT\s0 #40668]
.IP "\(bu" 4
Performizzle enhancements, which is ghon be most evident on platforms where
repeated calls ta Cz \f(CW\*(C`realloc()\*(C'\fR is slow, like fuckin Win32.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB_File\*(C'\fR upgraded ta version 1.817
.IP "\(bu" 4
\&\f(CW\*(C`DB_Filter\*(C'\fR upgraded ta version 0.02
.IP "\(bu" 4
\&\f(CW\*(C`Devel::DProf\*(C'\fR upgraded ta version 20080331.00
.IP "\(bu" 4
\&\f(CW\*(C`Devel::Peek\*(C'\fR upgraded ta version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR upgraded ta version 3.14
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR upgraded ta version 1.16
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR upgraded ta version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR upgraded ta version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`DirHandle\*(C'\fR upgraded ta version 1.02
.RS 4
.IP "\(bu" 4
now localises \f(CW$.\fR, \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, n' \f(CW$?\fR before closin the
directory handle ta suppress leakin any side effectz of warnings bout it
already bein closed.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DynaLoader\*(C'\fR upgraded ta version 1.09
.Sp
\&\f(CW\*(C`DynaLoader\*(C'\fR can now dynamically load a loadable object from a gangbangin' file wit a
non-default file extension.
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR upgraded ta version 2.26
.Sp
\&\f(CW\*(C`Encode::Alias\*(C'\fR includes a gangbangin' fix fo' encodin \*(L"646\*(R" on Solaris (betta known as
\&\s-1ASCII\s0).
.IP "\(bu" 4
\&\f(CW\*(C`English\*(C'\fR upgraded ta version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Errno\*(C'\fR upgraded ta version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`Exporter\*(C'\fR upgraded ta version 5.63
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Command\*(C'\fR upgraded ta version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR upgraded ta version 0.21
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Embed\*(C'\fR upgraded ta version 1.28
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Install\*(C'\fR upgraded ta version 1.50_01
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Installed\*(C'\fR upgraded ta version 1.43
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgraded ta version 6.48
.RS 4
.IP "\(bu" 4
support fo' \f(CW\*(C`INSTALLSITESCRIPT\*(C'\fR n' \f(CW\*(C`INSTALLVENDORSCRIPT\*(C'\fR
configuration.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Manifest\*(C'\fR upgraded ta version 1.55
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::ParseXS\*(C'\fR upgraded ta version 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Fatal\*(C'\fR upgraded ta version 1.06
.RS 4
.IP "\(bu" 4
allows built-ins up in \f(CW\*(C`CORE::GLOBAL\*(C'\fR ta be made fatal.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Fcntl\*(C'\fR upgraded ta version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`fields\*(C'\fR upgraded ta version 2.12
.IP "\(bu" 4
\&\f(CW\*(C`File::Basename\*(C'\fR upgraded ta version 2.77
.IP "\(bu" 4
\&\f(CW\*(C`FileCache\*(C'\fR upgraded ta version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`File::Compare\*(C'\fR upgraded ta 1.1005
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR upgraded ta 2.13
.RS 4
.IP "\(bu" 4
now uses 3\-arg open.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::DosGlob\*(C'\fR upgraded ta 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR upgraded ta version 1.13
.IP "\(bu" 4
\&\f(CW\*(C`File::Glob\*(C'\fR upgraded ta version 1.06
.RS 4
.IP "\(bu" 4
fixes spurious thangs up in dis biatch wit brackets inside braces.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Path\*(C'\fR upgraded ta version 2.07_02
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\*(C'\fR upgraded ta version 3.29
.RS 4
.IP "\(bu" 4
improved handlin of wack arguments.
.IP "\(bu" 4
some platform specific improvements (includin fo' \s-1VMS\s0 n' Cygwin), with
an optimisation on \f(CW\*(C`abs2rel\*(C'\fR when handlin both relatizzle arguments.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::stat\*(C'\fR upgraded ta version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Temp\*(C'\fR upgraded ta version 0.20
.IP "\(bu" 4
\&\f(CW\*(C`filetest\*(C'\fR upgraded ta version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Util::Call\*(C'\fR upgraded ta version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR upgraded ta version 0.83
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR upgraded ta version 1.49
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR upgraded ta version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Long\*(C'\fR upgraded ta version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Std\*(C'\fR upgraded ta version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util\*(C'\fR upgraded ta version 0.06
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR upgraded ta version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`IO\*(C'\fR upgraded ta version 1.23
.Sp
Reduced number of calls ta \f(CW\*(C`getpeername\*(C'\fR up in \f(CW\*(C`IO::Socket\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open\*(C'\fR upgraded ta version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR upgraded ta version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::SysV\*(C'\fR upgraded ta version 2.00
.IP "\(bu" 4
\&\f(CW\*(C`lib\*(C'\fR upgraded ta version 0.61
.RS 4
.IP "\(bu" 4
avoid warnin bout loadin \fI.par\fR files.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`libnet\*(C'\fR upgraded ta version 1.22
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR upgraded ta 1.19
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext\*(C'\fR upgraded ta 1.13
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigFloat\*(C'\fR upgraded ta version 1.60
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt\*(C'\fR upgraded ta version 1.89
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigRat\*(C'\fR upgraded ta version 0.22
.RS 4
.IP "\(bu" 4
implements freshly smoked up \f(CW\*(C`as_float\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Complex\*(C'\fR upgraded ta version 1.54.
.IP "\(bu" 4
\&\f(CW\*(C`Math::Trig\*(C'\fR upgraded ta version 1.18.
.IP "\(bu" 4
\&\f(CW\*(C`NDBM_File\*(C'\fR upgraded ta version 1.07
.RS 4
.IP "\(bu" 4
improve \fIg++\fR handlin fo' systems rockin \s-1GDBM\s0 compatibilitizzle headers.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Net::Ping\*(C'\fR upgraded ta version 2.35
.IP "\(bu" 4
\&\f(CW\*(C`NEXT\*(C'\fR upgraded ta version 0.61
.RS 4
.IP "\(bu" 4
fix nuff muthafuckin bugs wit \f(CW\*(C`NEXT\*(C'\fR when hustlin wit \f(CW\*(C`AUTOLOAD\*(C'\fR, \f(CW\*(C`eval\*(C'\fR block, and
within overloaded stringification.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ODBM_File\*(C'\fR upgraded ta 1.07
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR upgraded ta 1.06
.IP "\(bu" 4
\&\f(CW\*(C`ops\*(C'\fR upgraded ta 1.02
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::encoding\*(C'\fR upgraded ta version 0.11
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR upgraded ta version 0.06
.RS 4
.IP "\(bu" 4
[\s-1RT\s0 #40267] \f(CW\*(C`PerlIO::scalar\*(C'\fR don't respect readonly-ness.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR upgraded ta version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Html\*(C'\fR upgraded ta version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Parser\*(C'\fR upgraded ta version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Usage\*(C'\fR upgraded ta version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR upgraded ta version 1.15
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR constants dat duplicate dem up in \f(CW\*(C`Fcntl\*(C'\fR is now imported from
\&\f(CW\*(C`Fcntl\*(C'\fR n' re-exported, rather than bein duplicated by \f(CW\*(C`POSIX\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::remove\*(C'\fR can remove empty directories.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR less thuggy ta booty-call multiple times.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::SigRt\*(C'\fR added, which serves up access ta \s-1POSIX\s0 realtime signal
functionalitizzle on systems dat support dat shit.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`re\*(C'\fR upgraded ta version 0.06_01
.IP "\(bu" 4
\&\f(CW\*(C`Safe\*(C'\fR upgraded ta version 2.16
.IP "\(bu" 4
\&\f(CW\*(C`Scalar::Util\*(C'\fR upgraded ta 1.19
.IP "\(bu" 4
\&\f(CW\*(C`SDBM_File\*(C'\fR upgraded ta version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`SelfLoader\*(C'\fR upgraded ta version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`Shell\*(C'\fR upgraded ta version 0.72
.IP "\(bu" 4
\&\f(CW\*(C`sigtrap\*(C'\fR upgraded ta version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Socket\*(C'\fR upgraded ta version 1.81
.RS 4
.IP "\(bu" 4
this fixes a optimistic use of \f(CW\*(C`gethostbyname\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR upgraded ta 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR upgraded ta version 2.13
.IP "\(bu" 4
\&\f(CW\*(C`Sys::Syslog\*(C'\fR upgraded ta version 0.27
.IP "\(bu" 4
\&\f(CW\*(C`Term::ANSIColor\*(C'\fR upgraded ta version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::Cap\*(C'\fR upgraded ta version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::ReadLine\*(C'\fR upgraded ta version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Test::Builder\*(C'\fR upgraded ta version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Harness\*(C'\fR upgraded version ta 2.64
.RS 4
.IP "\(bu" 4
this make it able ta handle newlines.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::Mo'\*(C'\fR upgraded ta version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR upgraded ta version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Text::Balanced\*(C'\fR upgraded ta version 1.98
.IP "\(bu" 4
\&\f(CW\*(C`Text::ParseWords\*(C'\fR upgraded ta version 3.27
.IP "\(bu" 4
\&\f(CW\*(C`Text::Soundex\*(C'\fR upgraded ta version 3.03
.IP "\(bu" 4
\&\f(CW\*(C`Text::Tabs\*(C'\fR upgraded ta version 2007.1117
.IP "\(bu" 4
\&\f(CW\*(C`Text::Wrap\*(C'\fR upgraded ta version 2006.1117
.IP "\(bu" 4
\&\f(CW\*(C`Thread\*(C'\fR upgraded ta version 2.01
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Semaphore\*(C'\fR upgraded ta version 2.09
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Queue\*(C'\fR upgraded ta version 2.11
.RS 4
.IP "\(bu" 4
added capabilitizzle ta add complex structures (e.g., hash of hashes) ta queues.
.IP "\(bu" 4
added capabilitizzle ta dequeue multiple shit at once.
.IP "\(bu" 4
added freshly smoked up methodz ta inspect n' manipulate queues:  \f(CW\*(C`peek\*(C'\fR, \f(CW\*(C`insert\*(C'\fR and
\&\f(CW\*(C`extract\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Handle\*(C'\fR upgraded ta version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Hash\*(C'\fR upgraded ta version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize\*(C'\fR upgraded ta version 1.1
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize::EXISTS\*(C'\fR now erectly caches its thangs up in dis biatch.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::RefHash\*(C'\fR upgraded ta version 1.38
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Scalar\*(C'\fR upgraded ta version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`Tie::StdHandle\*(C'\fR upgraded ta version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Time::gmtime\*(C'\fR upgraded ta version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Time::Local\*(C'\fR upgraded ta version 1.1901
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR upgraded ta version 1.9715 wit various build improvements 
(includin \s-1VMS\s0) n' minor platform-specific bug fixes (including
for HP-UX 11 ia64).
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR upgraded ta 1.71
.RS 4
.IP "\(bu" 4
new thread state shiznit methods: \f(CW\*(C`is_running\*(C'\fR, \f(CW\*(C`is_detached\*(C'\fR
and \f(CW\*(C`is_joinable\*(C'\fR.  \f(CW\*(C`list\*(C'\fR method enhanced ta return hustlin or joinable
threads.
.IP "\(bu" 4
new thread signal method: \f(CW\*(C`kill\*(C'\fR
.IP "\(bu" 4
added capabilitizzle ta specify thread stack size.
.IP "\(bu" 4
added capabilitizzle ta control thread exitin behavior. Shiiit, dis aint no joke.  Added a freshly smoked up \f(CW\*(C`exit\*(C'\fR
method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR upgraded ta version 1.27
.RS 4
.IP "\(bu" 4
smalla n' fasta implementation dat eliminates one internal structure and
the consequent level of indirection.
.IP "\(bu" 4
user locks is now stored up in a less thuggy manner.
.IP "\(bu" 4
new function \f(CW\*(C`shared_clone\*(C'\fR creates a cold-ass lil copy of a object leaving
shared elements as-is n' deep-clonin non-shared elements.
.IP "\(bu" 4
added freshly smoked up \f(CW\*(C`is_shared\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Normalize\*(C'\fR upgraded ta version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR upgraded ta version 0.25
.IP "\(bu" 4
\&\f(CW\*(C`warnings\*(C'\fR upgraded ta version 1.05_01
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded ta version 0.38
.RS 4
.IP "\(bu" 4
added freshly smoked up function \f(CW\*(C`GetCurrentProcessId\*(C'\fR which returns tha regular Windows
process identifier of tha current process, even when called from within a gangbangin' fork.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR upgraded ta version 0.10
.IP "\(bu" 4
\&\f(CW\*(C`XS::APItest\*(C'\fR n' \f(CW\*(C`XS::Typemap\*(C'\fR is fo' internal use only n' hence
no longer installed. Y'all KNOW dat shit, muthafucka! Many mo' tests done been added ta \f(CW\*(C`XS::APItest\*(C'\fR.
.SH "Utilitizzle Chizzles"
.IX Header "Utilitizzle Chizzles"
.SS "debugger upgraded ta version 1.31"
.IX Subsection "debugger upgraded ta version 1.31"
.IP "\(bu" 4
Andreas Ko\*:nig contributed two functions ta save n' load tha debugger
history.
.IP "\(bu" 4
\&\f(CW\*(C`NEXT::AUTOLOAD\*(C'\fR no longer emits warnings under tha debugger.
.IP "\(bu" 4
Da debugger should now erectly find tty tha thang on \s-1OS X 10.5\s0 n' \s-1VMS\s0
when tha program \f(CW\*(C`fork\*(C'\fRs.
.IP "\(bu" 4
\&\s-1LVALUE\s0 subs now work inside tha debugger.
.SS "\fIperlthanks\fP"
.IX Subsection "perlthanks"
Perl 5.8.9 addz a freshly smoked up utilitizzle \fIperlthanks\fR, which be a variant of \fIperlbug\fR,
but fo' bustin  non-bug-reports ta tha authors n' maintainerz of Perl.
Gettin not a god damn thang but bug reports can become a lil' bit demoralisin \- we'll peep if
this chizzlez thangs.
.SS "\fIperlbug\fP"
.IX Subsection "perlbug"
\&\fIperlbug\fR now checks if you reportin on some non-core module n' suggests
you report it ta tha \s-1CPAN\s0 lyricist instead.
.SS "\fIh2xs\fP"
.IX Subsection "h2xs"
.IP "\(bu" 4
won't define a empty strang as a cold-ass lil constant [\s-1RT\s0 #25366]
.IP "\(bu" 4
has examplez fo' \f(CW\*(C`h2xs \-X\*(C'\fR
.SS "\fIh2ph\fP"
.IX Subsection "h2ph"
.IP "\(bu" 4
now attempts ta deal sensibly wit tha difference up in path implications
between \f(CW""\fR n' \f(CW\*(C`<>\*(C'\fR quotin up in \f(CW\*(C`#include\*(C'\fR statements.
.IP "\(bu" 4
now generates erect code fo' \f(CW\*(C`#if defined A || defined B\*(C'\fR
[\s-1RT\s0 #39130]
.SH "New Documentation"
.IX Header "New Documentation"
As usual, tha documentation received its share of erections, clarifications
and other nitfixes. Mo' \f(CW\*(C`\*(C'\fR tags was added fo' indexing.
.IX Xref "..."
.PP
perlunitut be a tutorial freestyled by Juerd Waalboer on Unicode-related
terminologizzle n' how tha fuck ta erectly handle Unicode up in Perl scripts.
.PP
perlunicode is updated up in section user defined properties.
.PP
perluniintro has been updated up in tha example of detectin data dat is not
valid up in particular encoding.
.PP
perlcommunitizzle serves up a overview of tha Perl Communitizzle along wit further
resources.
.PP
\&\s-1CORE\s0 documents tha pseudo-namespace fo' Perlz core routines.
.SH "Changes ta Existin Documentation"
.IX Header "Changes ta Existin Documentation"
perlglossary addz \fIdeprecated modulez n' features\fR n' \fIto be dropped modules\fR.
.PP
perlhack has been updated n' added resources on smoke testing.
.PP
Da Perl FAQUIZZYs (\fIperlfaq1\fR..\fIperlfaq9\fR) done been updated.
.PP
perlcheat is updated wit betta details on \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR, n' \f(CW\*(C`\es\*(C'\fR.
.PP
perldebug is updated wit shiznit on how tha fuck ta booty-call tha debugger.
.PP
perldiag documentation updated wit \fIsubroutine wit a ampersand\fR on the
argument ta \f(CW\*(C`exists\*(C'\fR n' \f(CW\*(C`delete\*(C'\fR n' also nuff muthafuckin terminologizzle thugged-out shiznit on
warnings.
.PP
perlfork documents tha limitation of \f(CW\*(C`exec\*(C'\fR inside pseudo-processes.
.PP
perlfunc:
.IP "\(bu" 4
Documentation is fixed up in section \f(CW\*(C`caller\*(C'\fR n' \f(CW\*(C`pop\*(C'\fR.
.IP "\(bu" 4
Function \f(CW\*(C`alarm\*(C'\fR now mentions \f(CW\*(C`Time::HiRes::ualarm\*(C'\fR up in preference
to \f(CW\*(C`select\*(C'\fR.
.IP "\(bu" 4
Regardin precedence up in \f(CW\*(C`\-X\*(C'\fR, filetest operators is tha same as unary
operators yo, but not regardin parsin n' parentheses (spotted by Eirik Berg
Hanssen).
.IP "\(bu" 4
\&\f(CW\*(C`reverse\*(C'\fR function documentation received scalar context examples.
.PP
perllocale documentation be adjusted fo' number localization and
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR ta fix Debian bug #379463.
.PP
perlmodlib is updated wit \f(CW\*(C`CPAN::API::HOWTO\*(C'\fR and
\&\f(CW\*(C`Sys::Syslog::win32::Win32\*(C'\fR
.PP
perlre documentation updated ta reflect tha differences between
\&\f(CW\*(C`[[:xxxxx:]]\*(C'\fR n' \f(CW\*(C`\ep{IsXxxxx}\*(C'\fR matches fo' realz. Also added section on \f(CW\*(C`/g\*(C'\fR and
\&\f(CW\*(C`/c\*(C'\fR modifiers.
.PP
perlreguts describe tha internalz of tha regular expressions engine. Well shiiiit, it has
been contributed by Yves Orton.
.PP
perlrebackslash raps bout all perl regular expression backslash n' escape
sequences.
.PP
perlrecharclass raps bout tha syntax n' use of characta classes in
Perl Regular Expressions.
.PP
perlrun is updated ta clarify on tha hash seed \fI\s-1PERL_HASH_SEED\s0\fR fo' realz. Also more
information up in options \f(CW\*(C`\-x\*(C'\fR n' \f(CW\*(C`\-u\*(C'\fR.
.PP
perlsub example is updated ta bust a lexical variable fo' \f(CW\*(C`opendir\*(C'\fR syntax.
.PP
perlvar fixes mad drama bout real \s-1GID \s0\f(CW$(\fR n' effectizzle \s-1GID \s0\f(CW$)\fR.
.PP
Perl thread tutorial example is fixed up in section
\&\*(L"Queues: Passin Data Around\*(R" up in perlthrtut n' perlthrtut.
.PP
perlhack documentation extensively improved by Jarkko Hietaniemi n' others.
.PP
perltoot serves up shiznit on modifyin \f(CW@UNIVERSAL::ISA\fR.
.PP
perlport documentation extended ta include different \f(CW\*(C`kill(\-9, ...)\*(C'\fR
semantics on Windows. Well shiiiit, it also clearly states \f(CW\*(C`dump\*(C'\fR aint supported on Win32
and cygwin.
.PP
\&\fI\s-1INSTALL\s0\fR has been updated n' modernised.
.SH "Performizzle Enhancements"
.IX Header "Performizzle Enhancements"
.IP "\(bu" 4
Da default since perl 5.000 has been fo' perl ta create a empty scalar
with every last muthafuckin freshly smoked up typeglob. Da increased use of lexical variablez means that
most is now unused. Y'all KNOW dat shit, muthafucka! Thanks ta Nicholas Clarkz efforts, Perl can now be
compiled wit \f(CW\*(C`\-DPERL_DONT_CREATE_GVSV\*(C'\fR ta avoid bustin these empty scalars.
This will hella decrease tha number of scalars allocated fo' all
configurations, n' tha number of scalars dat need ta be copied fo' ithread
creation. I aint talkin' bout chicken n' gravy biatch. Whilst dis option is binary compatible wit existin perl
installations, it do chizzle a long-standin assumption bout the
internals, hence it aint enabled by default, as some third jam code may
rely on tha oldschool behaviour.
.Sp
Us thugs would recommend testin wit dis configuration on freshly smoked up deployments of
perl, particularly fo' multi-threaded servers, ta peep whether all third party
code is compatible wit it, as dis configuration may give useful performance
improvements, n' you can put dat on yo' toast. For existin installations we would not recommend changin to
this configuration unless thorough testin is performed before deployment.
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR no longer uses \f(CW$&\fR, which thangs up in dis biatch up in big-ass speedups
for regexp matchin up in all code rockin dat shit.
.IP "\(bu" 4
Regular expressions classez of a single characta is now treated tha same as
if tha characta had been used as a literal, meanin dat code dat uses
char-classes as a escapin mechanizzle will peep a speedup. (Yves Orton)
.IP "\(bu" 4
Creatin anonymous array n' hash references (ie. \f(CW\*(C`[]\*(C'\fR n' \f(CW\*(C`{}\*(C'\fR) now incurs
no mo' overhead than bustin a anonymous list or hash. Nicholas Clark
provided chizzlez wit a savin of two ops n' one stack push, which was measured
as a slightly betta than 5% improvement fo' these operations.
.IP "\(bu" 4
Many calls ta \f(CW\*(C`strlen()\*(C'\fR done been eliminated, either cuz tha length was
already known, or by adoptin or enhancin APIs dat pass lengths. This has
been aided by tha adoption of a \f(CW\*(C`my_sprintf()\*(C'\fR wrapper, which returns the
correct C89 value \- tha length of tha formatted string. Previously we could
not rely on tha return value of \f(CW\*(C`sprintf()\*(C'\fR, cuz on some ancient but
extant platforms it still returns \f(CW\*(C`char *\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`index\*(C'\fR is now fasta if tha search strang is stored up in \s-1UTF\-8\s0 but only gotz nuff
charactas up in tha Latin\-1 range.
.IP "\(bu" 4
Da Unicode swatch cache inside tha regexp engine is now used. Y'all KNOW dat shit, muthafucka! (the lookup had
a key mismatch, present since tha initial implementation). [\s-1RT\s0 #42839]
.SH "Installation n' Configuration Improvements"
.IX Header "Installation n' Configuration Improvements"
.SS "Relocatable installations"
.IX Subsection "Relocatable installations"
There is now \fIConfigure\fR support fo' bustin a relocatable perl tree. If
you \fIConfigure\fR wit \f(CW\*(C`\-Duserelocatableinc\*(C'\fR, then tha paths up in \f(CW@INC\fR (and
everythang else up in \f(CW%Config\fR) can be optionally located via tha path of the
\&\fIperl\fR executable.
.PP
At start time, if any paths up in \f(CW@INC\fR or \f(CW\*(C`Config\*(C'\fR dat \fIConfigure\fR marked
as relocatable (by startin dem wit \f(CW".../"\fR), then they is prefixed the
directory of \f(CW$^X\fR. This allows tha relocation can be configured on a
per-directory basis, although tha default wit \f(CW\*(C`\-Duserelocatableinc\*(C'\fR is that
everythang is relocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da initial install is done ta tha original gangsta configured
prefix.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
\&\fIConfigure\fR is now betta at removin temporary files. Tomothy Callaway
(from RedHat) also contributed patches dat complete tha set of flags
passed ta tha compila n' tha linker, up in particular dat \f(CW\*(C`\-fPIC\*(C'\fR is now
enabled on Linux. Well shiiiit, it will also croak when yo' \fI/dev/null\fR aint a thugged-out device.
.PP
A freshly smoked up configuration variable \f(CW\*(C`d_pseudofork\*(C'\fR has been ta \fIConfigure\fR, n' is
available as  \f(CW$Config{d_pseudofork}\fR up in tha \f(CW\*(C`Config\*(C'\fR module. This
distinguishes real \f(CW\*(C`fork\*(C'\fR support from tha pseudofork emulation used on
Windows platforms.
.PP
\&\fIConfig.pod\fR n' \fIconfig.sh\fR is now placed erectly fo' cross-compilation.
.PP
\&\f(CW$Config{useshrplib}\fR is now 'true' rather than 'yes' when rockin a gangbangin' finger-lickin' dirty-ass shared perl
library.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
Parallel make should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed ta run up in parallel.
.PP
Many compilation warnings done been cleaned up fo' realz. A straight-up stubborn compiler
warnin up in \f(CW\*(C`S_emulate_eaccess()\*(C'\fR was capped afta six attempts.
\&\fIg++\fR support has been tuned, especially fo' FreeBSD.
.PP
\&\fImkppport\fR has been integrated, n' all \fIppport.h\fR filez up in tha core will now
be autogenerated at build time (and removed durin cleanup).
.SS "Installation improvements."
.IX Subsection "Installation improvements."
\&\fIinstallman\fR now works wit \f(CW\*(C`\-Duserelocatableinc\*(C'\fR n' \f(CW\*(C`DESTDIR\*(C'\fR.
.PP
\&\fIinstallperl\fR no longer installs:
.IP "\(bu" 4
static library filez of statically linked extensions when a gangbangin' finger-lickin' dirty-ass shared perl library
is bein used. Y'all KNOW dat shit, muthafucka! (They is not needed. Y'all KNOW dat shit, muthafucka! See \*(L"Windows\*(R" below).
.IP "\(bu" 4
\&\fI\s-1SIGNATURE\s0\fR n' \fIPAUSE*.pub\fR (\s-1CPAN\s0 files)
.IP "\(bu" 4
\&\fI\s-1NOTES\s0\fR n' \fI\s-1PATCHING\s0\fR (ExtUtils files)
.IP "\(bu" 4
\&\fIperlld\fR n' \fIld2\fR (Cygwin files)
.SS "Platform Specific Chizzles"
.IX Subsection "Platform Specific Chizzles"
There is improved hints fo' \s-1AIX,\s0 Cygwin, \s-1DEC/OSF,\s0 FreeBSD, \s-1HP/UX,\s0 Irix 6
Linux, MachTen, NetBSD, \s-1OS/390, QNX, SCO,\s0 Solaris, SunOS, System V Release 5.x
(UnixWare 7, OpenUNIX 8), Ultrix, \s-1UMIPS,\s0 uts n' \s-1VOS.\s0
.PP
\fIFreeBSD\fR
.IX Subsection "FreeBSD"
.IP "\(bu" 4
Drop \f(CW\*(C`\-std=c89\*(C'\fR n' \f(CW\*(C`\-ansi\*(C'\fR if rockin \f(CW\*(C`long long\*(C'\fR as tha main integral type,
else up in FreeBSD 6.2 (and like other releases), system headaz do not
declare some functions required by perl.
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
Startin wit Solaris 10, our phat asses do not want versioned shared libraries, cuz
those often indicate a private use only library. These problems could often
be triggered when SUNWbdb (Berkeley \s-1DB\s0) was installed. Y'all KNOW dat shit, muthafucka! Hence if Solaris 10
is detected set \f(CW\*(C`ignore_versioned_solibs=y\*(C'\fR.
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Allow \s-1IEEE\s0 math ta be deselected on OpenVMS I64 (but it remains tha default).
.IP "\(bu" 4
Record \s-1IEEE\s0 usage up in \f(CW\*(C`config.h\*(C'\fR
.IP "\(bu" 4
Help olda \s-1VMS\s0 compilaz by rockin \f(CW\*(C`ccflags\*(C'\fR when buildin \f(CW\*(C`munchconfig.exe\*(C'\fR.
.IP "\(bu" 4
Don't try ta build oldschool \f(CW\*(C`Thread\*(C'\fR extension on \s-1VMS\s0 when \f(CW\*(C`\-Duseithreads\*(C'\fR has
been chosen.
.IP "\(bu" 4
Passin a raw strang of \*(L"NaN\*(R" ta \fInawk\fR causes a cold-ass lil core dump \- so tha string
has been chizzled ta \*(L"*NaN*\*(R"
.IP "\(bu" 4
\&\fIt/op/stat.t\fR tests will now test hard links on \s-1VMS\s0 if they is supported.
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
When rockin a gangbangin' finger-lickin' dirty-ass shared perl library \fIinstallperl\fR no longer installs static
library files, import library filez n' export library filez (of statically
linked extensions) n' empty bootstrap filez (of dynamically linked
extensions). This fixes a problem buildin PAR-Packer on Win32 wit a thugged-out debug
build of perl.
.IP "\(bu" 4
Various improvements ta tha win32 build process, includin support fo' Visual
\&\*(C+ 2005 Express Edizzle (aka Visual \*(C+ 8.x).
.IP "\(bu" 4
\&\fIperl.exe\fR will now have a icon if built wit MinGW or Borland.
.IP "\(bu" 4
Improvements ta tha perl\-static.exe build process.
.IP "\(bu" 4
Add Win32 makefile option ta link all extensions statically.
.IP "\(bu" 4
Da \fIWinCE\fR directory has been merged tha fuck into tha \fIWin32\fR directory.
.IP "\(bu" 4
\&\f(CW\*(C`setlocale\*(C'\fR tests done been re-enabled fo' Windows \s-1XP\s0 onwards.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Unicode"
.IX Subsection "Unicode"
Many nuff bugs related ta tha internal Unicode implementation (\s-1UTF\-8\s0) have
been fixed. Y'all KNOW dat shit, muthafucka! In particular, long standin bugs related ta returnin Unicode
via \f(CW\*(C`tie\*(C'\fR, overloadin or \f(CW$@\fR is now gone, a shitload of which was never
reported.
.PP
\&\f(CW\*(C`unpack\*(C'\fR will internally convert tha strang back from \s-1UTF\-8\s0 on numeric types.
This be a cold-ass lil compromise between tha full consistency now up in 5.10, n' tha current
behaviour, which is often used as a \*(L"feature\*(R" on strang types.
.PP
Usin \f(CW\*(C`:crlf\*(C'\fR n' \f(CW\*(C`UTF\-16\*(C'\fR \s-1IO\s0 layers together will now work.
.PP
Fixed problems wit \f(CW\*(C`split\*(C'\fR, Unicode \f(CW\*(C`/\es+/\*(C'\fR n' \f(CW\*(C`/ \e0/\*(C'\fR.
.PP
Fixed bug \s-1RT\s0 #40641 \- encodin of Unicode charactas up in regular expressions.
.PP
Fixed a funky-ass bug where rockin certain patterns up in a regexp hustled ta a panic.
[\s-1RT\s0 #45337]
.PP
Perl no longer segfaults (due ta infinite internal recursion) if tha locale's
characta aint \s-1UTF\-8\s0 [\s-1RT\s0 #41442]:
.PP
.Vb 2
\&    use open \*(Aq:locale\*(Aq;
\&    print STDERR "\ex{201e}"; # &bdquo;
.Ve
.SS "PerlIO"
.IX Subsection "PerlIO"
Inconsistencies done been fixed up in tha reference countin PerlIO uses ta keep
track of Unix file descriptors, n' tha \s-1API\s0 used by \s-1XS\s0 code ta manage getting
and releasin \f(CW\*(C`FILE *\*(C'\fRs
.SS "Magic"
.IX Subsection "Magic"
Several bugs done been fixed up in Magic, tha internal system used ta implement
features like fuckin \f(CW\*(C`tie\*(C'\fR, taintin n' threadz sharing.
.PP
\&\f(CW\*(C`undef @array\*(C'\fR on a tied array now erectly calls tha \f(CW\*(C`CLEAR\*(C'\fR method.
.PP
Some of tha bitwise ops was not checkin whether they arguments was magical
before rockin em. [\s-1RT\s0 #24816]
.PP
Magic is no longer invoked twice by tha expression \f(CW\*(C`\e&$x\*(C'\fR
.PP
A bug wit assignin big-ass numbers n' taintin has been resolved.
[\s-1RT\s0 #40708]
.PP
A freshly smoked up entry has been added ta tha \s-1MAGIC\s0 vtable \- \f(CW\*(C`svt_local\*(C'\fR. This is used
when copyin magic ta tha freshly smoked up value durin \f(CW\*(C`local\*(C'\fR, allowin certain problems
with localisin shared variablez ta be resolved.
.PP
For tha implementation details, peep \*(L"Magic Virtual Tables\*(R" up in perlguts.
.SS "Reblessin overloaded objects now works"
.IX Subsection "Reblessin overloaded objects now works"
Internally, perl object-nizz is on tha referent, not tha reference, even
though methodz can only be called via a reference. But fuck dat shiznit yo, tha word on tha street is dat tha original
implementation of overloadin stored flags related ta overloadin on the
reference, relyin on tha flags bein copied when tha reference was copied,
or set all up in tha creation of a freshly smoked up reference. This manifests up in a funky-ass bug \- if you
rebless a object from a cold-ass lil class dat has overloading, tha fuck into one dat do not,
then any other existin references be thinkin dat they (still) point ta an
overloaded object, chizzle these C code paths, n' then throw errors.
Analogously, blessin tha fuck into a overloaded class when other references exist will
result up in dem not rockin overloading.
.PP
Da implementation has been fixed fo' 5.10 yo, but dis fix chizzlez tha semantics
of flag bits, so aint binary compatible, so can't be applied ta 5.8.9.
But fuck dat shiznit yo, tha word on tha street is dat 5.8.9 has a work-around dat implements tha same ol' dirty bug fix. If the
referent has multiple references, then all tha other references is located and
corrected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A full search be avoided whenever possible by scannin lexicals
outwardz from tha current subroutine, n' tha argument stack.
.PP
A certain well known Linux vendor applied incomplete versionz of dis bug fix
to they \fI/usr/bin/perl\fR n' then prematurely closed bug reports about
performizzle thangs without consultin back upstream. This not bein enough,
they then proceeded ta ignore tha necessary fixes ta these unreleased chizzles
for 11 months, until massive heat was applied by they long-suffering
payin hustlas, catalysed by tha failings bein featured on a prominent blog
and Slashdot.
.ie n .SS """strict"" now propagates erectly tha fuck into strang evals"
.el .SS "\f(CWstrict\fP now propagates erectly tha fuck into strang evals"
.IX Subsection "strict now propagates erectly tha fuck into strang evals"
Under 5.8.8 n' earlier:
.PP
.Vb 3
\&    $ perl5.8.8 \-e \*(Aquse strict; eval "use foo bar" or take a thugged-out dirtnap $@\*(Aq
\&    Can\*(Aqt locate foo.pm up in @INC (@INC gotz nuff: ... .) at (eval 1) line 2.
\&    BEGIN failed\-\-compilation aborted at (eval 1) line 2.
.Ve
.PP
Under 5.8.9 n' later:
.PP
.Vb 2
\&    $ perl5.8.9 \-e \*(Aquse strict; eval "use foo bar" or take a thugged-out dirtnap $@\*(Aq
\&    Bareword "bar" not allowed while "strict subs" up in use at (eval 1) line 1.
.Ve
.PP
This may cause problems wit programs dat parse tha error message n' rely
on tha buggy behaviour.
.SS "Other fixes"
.IX Subsection "Other fixes"
.IP "\(bu" 4
Da tokenizer no longer treats \f(CW\*(C`=cute\*(C'\fR (and other lyrics beginning
with \f(CW\*(C`=cut\*(C'\fR) as a synonym fo' \f(CW\*(C`=cut\*(C'\fR.
.IP "\(bu" 4
Callin \f(CW\*(C`CORE::require\*(C'\fR
.Sp
\&\f(CW\*(C`CORE::require\*(C'\fR n' \f(CW\*(C`CORE::do\*(C'\fR was always parsed as \f(CW\*(C`require\*(C'\fR n' \f(CW\*(C`do\*(C'\fR
when they was overridden. I aint talkin' bout chicken n' gravy biatch. This is now fixed.
.IP "\(bu" 4
Stopped memory leak on long \fI/etc/groups\fR entries.
.IP "\(bu" 4
\&\f(CW\*(C`while (my $x ...) { ...; redo }\*(C'\fR shouldn't \f(CW\*(C`undef $x\*(C'\fR.
.Sp
In tha presence of \f(CW\*(C`my\*(C'\fR up in tha conditionizzle of a \f(CW\*(C`while()\*(C'\fR, \f(CW\*(C`until()\*(C'\fR,
or \f(CW\*(C`for(;;)\*(C'\fR loop, we now add a extra scope ta tha body so dat \f(CW\*(C`redo\*(C'\fR
doesn't \f(CW\*(C`undef\*(C'\fR tha lexical.
.IP "\(bu" 4
Da \f(CW\*(C`encoding\*(C'\fR pragma now erectly ignores anythang followin a \f(CW\*(C`@\*(C'\fR 
characta up in tha \f(CW\*(C`LC_ALL\*(C'\fR n' \f(CW\*(C`LANG\*(C'\fR environment variables. [\s-1RT\s0 # 49646]
.IP "\(bu" 4
A segfault observed wit some \fIgcc\fR 3.3 optimisations is resolved.
.IP "\(bu" 4
A possible segfault when \f(CW\*(C`unpack\*(C'\fR used up in scalar context wit \f(CW\*(C`()\*(C'\fR groups
is resolved. Y'all KNOW dat shit, muthafucka! [\s-1RT\s0 #50256]
.IP "\(bu" 4
Resolved issue where \f(CW$!\fR could be chizzled by a signal handlez interrupting
a \f(CW\*(C`system\*(C'\fR call.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #37886, symbolic dereferencin was allowed up in tha argument of
\&\f(CW\*(C`defined\*(C'\fR even under tha influence of \f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #43207, where \f(CW\*(C`lc\*(C'\fR/\f(CW\*(C`uc\*(C'\fR inside \f(CW\*(C`sort\*(C'\fR affected tha return
value.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #45607, where \f(CW\*(C`*{"BONK"} = \e&{"BONK"}\*(C'\fR didn't work erectly.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #35878, croakin from a \s-1XSUB\s0 called via \f(CW\*(C`goto &xsub\*(C'\fR corrupts perl
internals.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #32539, \fIDynaLoader.o\fR is moved tha fuck into \fIlibperl.so\fR ta avoid the
need ta statically link DynaLoader tha fuck into tha stub perl executable. With this
\&\fIlibperl.so\fR serves up every last muthafuckin thang needed ta git a gangbangin' functionizzle embedded perl
interpreta ta run.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #36267 so dat assignin ta a tied hash don't chizzle the
underlyin hash.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #6006, regexp replaces rockin big-ass replacement variables
fail a shitload of tha time, \fIi.e.\fR when substitution gotz nuff something
like \f(CW\*(C`${10}\*(C'\fR (note tha bracket) instead of just \f(CW$10\fR.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #45053, \f(CW\*(C`Perl_newCONSTSUB()\*(C'\fR is now thread safe.
.SS "Platform Specific Fixes"
.IX Subsection "Platform Specific Fixes"
\fIDarwin / MacOS X\fR
.IX Subsection "Darwin / MacOS X"
.IP "\(bu" 4
Various improvements ta 64 bit builds.
.IP "\(bu" 4
Mutex protection added up in \f(CW\*(C`PerlIOStdio_close()\*(C'\fR ta avoid race conditions.
Hopefully dis fixes failures up in tha threadz tests \fIfree.t\fR n' \fIblocks.t\fR.
.IP "\(bu" 4
Added forked terminal support ta tha debugger, wit tha mobilitizzle ta update the
window title.
.PP
\fI\s-1OS/2\s0\fR
.IX Subsection "OS/2"
.IP "\(bu" 4
A build problem wit specifyin \f(CW\*(C`USE_MULTI\*(C'\fR n' \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX\*(C'\fR upgraded ta version 1.04
.PP
\fITru64\fR
.IX Subsection "Tru64"
.IP "\(bu" 4
Aligned floatin point build policies fo' \fIcc\fR n' \fIgcc\fR.
.PP
\fIRedHat Linux\fR
.IX Subsection "RedHat Linux"
.IP "\(bu" 4
Revisited a patch from 5.6.1 fo' \s-1RH7.2\s0 fo' Intelz \fIicc\fR [\s-1RT\s0 #7916], added an
additionizzle check fo' \f(CW$Config{gccversion}\fR.
.PP
\fISolaris/i386\fR
.IX Subsection "Solaris/i386"
.IP "\(bu" 4
Use \f(CW\*(C`\-DPTR_IS_LONG\*(C'\fR when rockin 64 bit integers
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Fixed \f(CW\*(C`PerlIO::Scalar\*(C'\fR in-memory file record-style reads.
.IP "\(bu" 4
pipe shutdown at process exit should now be mo' robust.
.IP "\(bu" 4
Bugs up in \s-1VMS\s0 exit handlin tickled by \f(CW\*(C`Test::Harness\*(C'\fR 2.64 done been fixed.
.IP "\(bu" 4
Fix \f(CW\*(C`fcntl()\*(C'\fR lockin capabilitizzle test up in \fIconfigure.com\fR.
.IP "\(bu" 4
Replaced \f(CW\*(C`shrplib=\*(Aqdefine\*(Aq\*(C'\fR wit \f(CW\*(C`useshrplib=\*(Aqtrue\*(Aq\*(C'\fR on \s-1VMS.\s0
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR used ta fail when tha target directory be a funky-ass bare drive letta and
\&\f(CW\*(C`no_chdir\*(C'\fR is 1 (the default is 0). [\s-1RT\s0 #41555]
.IP "\(bu" 4
A build problem wit specifyin \f(CW\*(C`USE_MULTI\*(C'\fR n' \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
Da process id is no longer truncated ta 16 bits on some Windows platforms
( http://bugs.activestate.com/show_bug.cgi?id=72443 )
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #54828 up in \fIperlio.c\fR where callin \f(CW\*(C`binmode\*(C'\fR on Win32 n' Cygwin
may cause a segmentation fault.
.SS "Smalla fixes"
.IX Subsection "Smalla fixes"
.IP "\(bu" 4
It be now possible ta overload \f(CW\*(C`eq\*(C'\fR when rockin \f(CW\*(C`nomethod\*(C'\fR.
.IP "\(bu" 4
Various problems rockin \f(CW\*(C`overload\*(C'\fR wit 64 bit integers erected.
.IP "\(bu" 4
Da reference count of \f(CW\*(C`PerlIO\*(C'\fR file descriptors is now erectly handled.
.IP "\(bu" 4
On \s-1VMS,\s0 escaped dots is ghon be preserved when converted ta Unix syntax.
.IP "\(bu" 4
\&\f(CW\*(C`keys %+\*(C'\fR no longer throws a \f(CW\*(Aqambiguous\*(Aq\fR warning.
.IP "\(bu" 4
Usin \f(CW\*(C`#!perl \-d\*(C'\fR could trigger a assertion, which has been fixed.
.IP "\(bu" 4
Don't stringify tied code references up in \f(CW@INC\fR when callin \f(CW\*(C`require\*(C'\fR.
.IP "\(bu" 4
Code references up in \f(CW@INC\fR report tha erect file name when \f(CW\*(C`_\|_FILE_\|_\*(C'\fR is
used.
.IP "\(bu" 4
Width n' precision up in sprintf didn't handle charactas above 255 erectly.
[\s-1RT\s0 #40473]
.IP "\(bu" 4
List slices wit indices outta range now work mo' consistently.
[\s-1RT\s0 #39882]
.IP "\(bu" 4
A chizzle introduced wit perl 5.8.1 broke tha parsin of argumentz of tha form
\&\f(CW\*(C`\-foo=bar\*(C'\fR wit tha \f(CW\*(C`\-s\*(C'\fR on tha <#!> line. This has been fixed. Y'all KNOW dat shit, muthafucka! See
http://bugs.activestate.com/show_bug.cgi?id=43483
.IP "\(bu" 4
\&\f(CW\*(C`tr///\*(C'\fR is now threadsafe. Previously dat shiznit was storin a swash inside its \s-1OP,\s0
rather than up in a pad.
.IP "\(bu" 4
\&\fIpod2html\fR labels anchors mo' consistently n' handlez nested definition
lists better.
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR cleanup veto has been extended ta include \f(CW\*(C`perl_free()\*(C'\fR and
\&\f(CW\*(C`perl_destruct()\*(C'\fR
.IP "\(bu" 4
On some systems, chizzlez ta \f(CW$ENV{TZ}\fR would not always be
respected by tha underlyin calls ta \f(CW\*(C`localtime_r()\*(C'\fR.  Perl now
forces tha inspection of tha environment on these systems.
.IP "\(bu" 4
Da special variable \f(CW$^R\fR is now mo' consistently set when executing
regexps rockin tha \f(CW\*(C`(?{...})\*(C'\fR construct.  In particular, it will still
be set even if backreferences or optionizzle sub-patterns \f(CW\*(C`(?:...)?\*(C'\fR are
used.
.SH "New or Chizzled Diagnostics"
.IX Header "New or Chizzled Diagnostics"
.ie n .SS "panic: sv_chop %s"
.el .SS "panic: sv_chop \f(CW%s\fP"
.IX Subsection "panic: sv_chop %s"
This freshly smoked up fatal error occurs when tha C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was passed a
posizzle dat aint within tha scalarz strang buffer n' shit. This is caused by
buggy \s-1XS\s0 code, n' at dis point recovery aint possible.
.SS "Maximal count of pendin signals (%s) exceeded"
.IX Subsection "Maximal count of pendin signals (%s) exceeded"
This freshly smoked up fatal error occurs when tha perl process has ta abort due to
too nuff pendin signals, which is bound ta prevent perl from being
able ta handle further incomin signals safely.
.ie n .SS "panic: attempt ta booty-call %s up in %s"
.el .SS "panic: attempt ta booty-call \f(CW%s\fP up in \f(CW%s\fP"
.IX Subsection "panic: attempt ta booty-call %s up in %s"
This freshly smoked up fatal error occurs when tha \s-1ACL\s0 version file test operator is used
where it aint available on tha current platform. Earlier checks mean that
it should never be possible ta git all dis bullshit.
.SS "\s-1FETCHSIZE\s0 returned a wack value"
.IX Subsection "FETCHSIZE returned a wack value"
New error indicatin dat a tied array has fronted ta git a negative
number of elements.
.ie n .SS "Can't upgrade %s (%d) ta %d"
.el .SS "Can't upgrade \f(CW%s\fP (%d) ta \f(CW%d\fP"
.IX Subsection "Can't upgrade %s (%d) ta %d"
Previously tha internal error from tha \s-1SV\s0 upgrade code was tha less informative
\&\fICan't upgrade dat kind of scalar\fR. Well shiiiit, it now reports tha current internal type,
and tha freshly smoked up type requested.
.ie n .SS "%s argument aint a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.el .SS "\f(CW%s\fP argument aint a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.IX Subsection "%s argument aint a HASH or ARRAY element or a subroutine"
This error, thrown if a invalid argument is provided ta \f(CW\*(C`exists\*(C'\fR now
correctly includes \*(L"or a subroutine\*(R". [\s-1RT\s0 #38955]
.ie n .SS "Cannot make tha non-overridable builtin %s fatal"
.el .SS "Cannot make tha non-overridable builtin \f(CW%s\fP fatal"
.IX Subsection "Cannot make tha non-overridable builtin %s fatal"
This error up in \f(CW\*(C`Fatal\*(C'\fR previously did not show tha name of tha builtin in
question (now represented by \f(CW%s\fR above).
.ie n .SS "Unrecognized characta '%s' up in column %d"
.el .SS "Unrecognized characta '%s' up in column \f(CW%d\fP"
.IX Subsection "Unrecognized characta '%s' up in column %d"
This error previously did not state tha column.
.SS "Offset outside string"
.IX Subsection "Offset outside string"
This can now also be generated by a \f(CW\*(C`seek\*(C'\fR on a gangbangin' file handle using
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR.
.SS "Invalid escape up in tha specified encodin up in regexp; marked by <\-\- \s-1HERE\s0 up in m/%s/"
.IX Subsection "Invalid escape up in tha specified encodin up in regexp; marked by <-- HERE up in m/%s/"
New error, introduced as part of tha fix ta \s-1RT\s0 #40641 ta handle encoding
of Unicode charactas up in regular expression comments.
.SS "Yo crazy-ass machine don't support dump/undump."
.IX Subsection "Yo crazy-ass machine don't support dump/undump."
A mo' informatizzle fatal error issued when callin \f(CW\*(C`dump\*(C'\fR on Win32 and
Cygwin. I aint talkin' bout chicken n' gravy biatch. (Given dat tha purpose of \f(CW\*(C`dump\*(C'\fR is ta abort wit a cold-ass lil core dump,
and core dumps can't be produced on these platforms, dis is mo' useful than
silently exiting.)
.SH "Changed Internals"
.IX Header "Changed Internals"
Da perl sources can now be compiled wit a \*(C+ compila instead of a C
compila n' shiznit fo' realz. A necessary implementation details is dat under \*(C+, tha macro
\&\f(CW\*(C`XS\*(C'\fR used ta define XSUBs now includes a \f(CW\*(C`extern "C"\*(C'\fR definition. I aint talkin' bout chicken n' gravy biatch fo' realz. A side
effect of dis is dat \fB\*(C+\fR code dat used tha construction
.PP
.Vb 1
\&    typedef XS(SwigPerlWrapper);
.Ve
.PP
now need ta be written
.PP
.Vb 1
\&    typedef XSPROTO(SwigPerlWrapper);
.Ve
.PP
usin tha freshly smoked up \f(CW\*(C`XSPROTO\*(C'\fR macro, up in order ta compile. C extensions are
unaffected, although C extensions is encouraged ta use \f(CW\*(C`XSPROTO\*(C'\fR like a muthafucka.
This chizzle was present up in tha 5.10.0 release of perl, so any actively
maintained code dat happened ta use dis construction should already have
been adapted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Code dat needz changin will fail wit a cold-ass lil compilation error.
.PP
\&\f(CW\*(C`set\*(C'\fR magic on localizing/assignin ta a magic variable will now only
trigger fo' \fIcontainer magics\fR, i.e. it will fo' \f(CW%ENV\fR or \f(CW%SIG\fR
but not fo' \f(CW$#array\fR.
.PP
Da freshly smoked up \s-1API\s0 macro \f(CW\*(C`newSVpvs()\*(C'\fR can be used up in place of constructions such as
\&\f(CW\*(C`newSVpvn("ISA", 3)\*(C'\fR. Well shiiiit, it takes a single strang constant, n' at C compile
time determines its length.
.PP
Da freshly smoked up \s-1API\s0 function \f(CW\*(C`Perl_newSV_type()\*(C'\fR can be used as a mo' efficient
replacement of tha common idiom
.PP
.Vb 2
\&    sv = newSV(0);
\&    sv_upgrade(sv, type);
.Ve
.PP
Similarly \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR can be used ta combine
\&\f(CW\*(C`Perl_newSVpv()\*(C'\fR wit \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR or tha equivalent
\&\f(CW\*(C`Perl_sv_newmortal()\*(C'\fR wit \f(CW\*(C`Perl_sv_setpvn()\*(C'\fR
.PP
Two freshly smoked up macros \f(CW\*(C`mPUSHs()\*(C'\fR n' \f(CW\*(C`mXPUSHs()\*(C'\fR is added, ta make it easier to
push mortal SVs onto tha stack. They was then used ta fix nuff muthafuckin bugs where
values on tha stack had not been mortalised.
.PP
A \f(CW\*(C`Perl_signbit()\*(C'\fR function was added ta test tha sign of a \f(CW\*(C`NV\*(C'\fR. Well shiiiit, it 
maps ta tha system one when available.
.PP
\&\f(CW\*(C`Perl_av_reify()\*(C'\fR, \f(CW\*(C`Perl_lex_end()\*(C'\fR, \f(CW\*(C`Perl_mod()\*(C'\fR, \f(CW\*(C`Perl_op_clear()\*(C'\fR,
\&\f(CW\*(C`Perl_pop_return()\*(C'\fR, \f(CW\*(C`Perl_qerror()\*(C'\fR, \f(CW\*(C`Perl_setdefout()\*(C'\fR,
\&\f(CW\*(C`Perl_vivify_defelem()\*(C'\fR n' \f(CW\*(C`Perl_yylex()\*(C'\fR is now visible ta extensions.
This was required ta allow \f(CW\*(C`Data::Alias\*(C'\fR ta work on Windows.
.PP
\&\f(CW\*(C`Perl_find_runcv()\*(C'\fR is now visible ta perl core extensions. This was required
to allow \f(CW\*(C`Sub::Current\*(C'\fR ta work on Windows.
.PP
\&\f(CW\*(C`ptr_table*\*(C'\fR functions is now available up in unthreaded perl. \f(CW\*(C`Storable\*(C'\fR
takes advantage of all dis bullshit.
.PP
There done been nuff lil' small-ass cleanups made ta tha internals. In particular,
\&\f(CW\*(C`Perl_sv_upgrade()\*(C'\fR has been simplified considerably, wit a straight-through
code path dat uses \f(CW\*(C`memset()\*(C'\fR n' \f(CW\*(C`memcpy()\*(C'\fR ta initialise tha freshly smoked up body,
rather than assignment via multiple temporary variables. Well shiiiit, it has also
benefited from simplification n' de-duplication of tha arena pimpment
code.
.PP
All dem lil' small-ass improvements up in tha code base was made cuz of reports from
the Coveritizzle static code analyzer.
.PP
Corrected use n' documentation of \f(CW\*(C`Perl_gv_stashpv()\*(C'\fR, \f(CW\*(C`Perl_gv_stashpvn()\*(C'\fR,
\&\f(CW\*(C`Perl_gv_stashsv()\*(C'\fR functions (last parameta be a funky-ass bitmask, not boolean).
.PP
\&\f(CW\*(C`PERL_SYS_INIT\*(C'\fR, \f(CW\*(C`PERL_SYS_INIT3\*(C'\fR n' \f(CW\*(C`PERL_SYS_TERM\*(C'\fR macros have been
changed tha fuck into functions.
.PP
\&\f(CW\*(C`PERLSYS_TERM\*(C'\fR no longer requires a cold-ass lil context. \f(CW\*(C`PerlIO_teardown()\*(C'\fR
is now called without a cold-ass lil context, n' debuggin output up in dis function has
been disabled cuz dat required dat a interpreta was present, a invalid
assumption at termination time.
.PP
All compile time options which affect binary compatibilitizzle done been grouped
together tha fuck into a global variable (\f(CW\*(C`PL_bincompat_options\*(C'\fR).
.PP
Da jointz of \f(CW\*(C`PERL_REVISION\*(C'\fR, \f(CW\*(C`PERL_VERSION\*(C'\fR n' \f(CW\*(C`PERL_SUBVERSION\*(C'\fR are
now baked tha fuck into global variablez (and hence tha fuck into any shared perl library).
Additionally under \f(CW\*(C`MULTIPLICITY\*(C'\fR, tha perl executable now recordz tha size of
the interpreta structure (total, n' fo' dis version). Coupled with
\&\f(CW\*(C`PL_bincompat_options\*(C'\fR dis will allow 5.8.10 (and later), when compiled wit a
shared perl library, ta big-ass up sanitizzle checks up in \f(CW\*(C`main()\*(C'\fR ta verify dat the
shared library is indeed binary compatible.
.PP
Symbolic references can now have embedded NULs. Da freshly smoked up hood function
\&\f(CW\*(C`Perl_get_cvn_flags()\*(C'\fR can be used up in extensions if you gotta handle em.
.SS "Macro cleanups"
.IX Subsection "Macro cleanups"
Da core code, n' \s-1XS\s0 code up in \fIext\fR dat aint dual-lived on \s-1CPAN,\s0 no longer
uses tha macros \f(CW\*(C`PL_na\*(C'\fR, \f(CW\*(C`NEWSV()\*(C'\fR, \f(CW\*(C`Null()\*(C'\fR, \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR,
\&\f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR \fIetc\fR. Their use is discouraged up in freshly smoked up code,
particularly \f(CW\*(C`PL_na\*(C'\fR, which be a lil' small-ass performizzle hit.
.SH "New Tests"
.IX Header "New Tests"
Many modulez updated from \s-1CPAN\s0 incorporate freshly smoked up tests, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Some core specific
tests done been added:
.IP "ext/DynaLoader/t/DynaLoader.t" 4
.IX Item "ext/DynaLoader/t/DynaLoader.t"
Tests fo' tha \f(CW\*(C`DynaLoader\*(C'\fR module.
.IP "t/comp/fold.t" 4
.IX Item "t/comp/fold.t"
Tests fo' compile-time constant folding.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Tests incorporated from 5.10.0 which check dat there is no unexpected
interaction between tha internal types \f(CW\*(C`PVBM\*(C'\fR n' \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/lib/proxy_constant_subs.t" 4
.IX Item "t/lib/proxy_constant_subs.t"
Tests fo' tha freshly smoked up form of constant subroutines.
.IP "t/op/attrhand.t" 4
.IX Item "t/op/attrhand.t"
Tests fo' \f(CW\*(C`Attribute::Handlezs\*(C'\fR.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests fo' \f(CW\*(C`dbmopen\*(C'\fR.
.IP "t/op/inccode\-tie.t" 4
.IX Item "t/op/inccode-tie.t"
Calls all tests up in \fIt/op/inccode.t\fR afta first tyin \f(CW@INC\fR.
.IP "t/op/incfilter.t" 4
.IX Item "t/op/incfilter.t"
Tests fo' source filtas returned from code references up in \f(CW@INC\fR.
.IP "t/op/kill0.t" 4
.IX Item "t/op/kill0.t"
Tests fo' \s-1RT\s0 #30970.
.IP "t/op/qrstack.t" 4
.IX Item "t/op/qrstack.t"
Tests fo' \s-1RT\s0 #41484.
.IP "t/op/qr.t" 4
.IX Item "t/op/qr.t"
Tests fo' tha \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/regexp_qr_embed.t" 4
.IX Item "t/op/regexp_qr_embed.t"
Tests fo' tha \f(CW\*(C`qr//\*(C'\fR construct within another regexp.
.IP "t/op/regexp_qr.t" 4
.IX Item "t/op/regexp_qr.t"
Tests fo' tha \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/rxcode.t" 4
.IX Item "t/op/rxcode.t"
Tests fo' \s-1RT\s0 #32840.
.IP "t/op/studytied.t" 4
.IX Item "t/op/studytied.t"
Tests fo' \f(CW\*(C`study\*(C'\fR on tied scalars.
.IP "t/op/substT.t" 4
.IX Item "t/op/substT.t"
Tests fo' \f(CW\*(C`subst\*(C'\fR run under \f(CW\*(C`\-T\*(C'\fR mode.
.IP "t/op/symbolcache.t" 4
.IX Item "t/op/symbolcache.t"
Tests fo' \f(CW\*(C`undef\*(C'\fR n' \f(CW\*(C`delete\*(C'\fR on stash entries dat is bound to
subroutines or methods.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Tests fo' \f(CW\*(C`Perl_sv_upgrade()\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
\&\s-1MRO\s0 tests fo' \f(CW\*(C`isa\*(C'\fR n' package aliases.
.IP "t/pod/twice.t" 4
.IX Item "t/pod/twice.t"
Tests fo' callin \f(CW\*(C`Pod::Parser\*(C'\fR twice.
.IP "t/run/cloexec.t" 4
.IX Item "t/run/cloexec.t"
Tests fo' inheritin file descriptors across \f(CW\*(C`exec\*(C'\fR (close-on-exec).
.IP "t/uni/cache.t" 4
.IX Item "t/uni/cache.t"
Tests fo' tha \s-1UTF\-8\s0 cachin code.
.IP "t/uni/chr.t" 4
.IX Item "t/uni/chr.t"
Test dat strange encodings do not upset \f(CW\*(C`Perl_pp_chr()\*(C'\fR.
.IP "t/uni/greek.t" 4
.IX Item "t/uni/greek.t"
Tests fo' \s-1RT\s0 #40641.
.IP "t/uni/latin2.t" 4
.IX Item "t/uni/latin2.t"
Tests fo' \s-1RT\s0 #40641.
.IP "t/uni/overload.t" 4
.IX Item "t/uni/overload.t"
Tests fo' returnin Unicode from overloaded joints.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Tests fo' returnin Unicode from tied variables.
.SH "Known Problems"
.IX Header "Known Problems"
There is no known freshly smoked up bugs.
.PP
But fuck dat shiznit yo, tha word on tha street is dat programs dat rely on bugs dat done been fixed gonna git problems.
Also, nuff bug fixes present up in 5.10.0 can't be back-ported ta tha 5.8.x
branch, cuz they require chizzlez dat is binary incompatible, or cuz
the code chizzlez is too big-ass n' hence too risky ta incorporate.
.PP
Our thugged-out asses have only limited volunteer labour, n' tha maintenizzle burden is
gettin mo' n' mo' n' mo' complex yo. Hence dis is ghon be tha last significant
release of tha 5.8.x series fo' realz. Any future releasez of 5.8.x will likely
only be ta deal wit securitizzle issues, n' platform build
failures yo. Hence you should look ta migratin ta 5.10.x, if you have
not started already fo' realz. Alternatively, if bidnizz requirements constrain
you ta continue ta use 5.8.x, you may wish ta consider commercial
support from firms like fuckin ActiveState.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "Win32"
.IX Subsection "Win32"
\&\f(CW\*(C`readdir()\*(C'\fR, \f(CW\*(C`cwd()\*(C'\fR, \f(CW$^X\fR n' \f(CW@INC\fR now use tha alternate (short)
filename if tha long name is outside tha current codepage (Jan Dubois).
.PP
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded ta version 0.38. Now has a thugged-out documented 'WinVista' response
from \f(CW\*(C`GetOSName\*(C'\fR n' support fo' Vistaz privilege elevation up in \f(CW\*(C`IsAdminUser\*(C'\fR.
Support fo' Unicode charactas up in path names. Improved cygwin n' Win64
compatibility.
.IP "\(bu" 4
\&\f(CW\*(C`Win32API\*(C'\fR updated ta 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`killpg()\*(C'\fR support added ta \f(CW\*(C`MSWin32\*(C'\fR (Jan Dubois).
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec::Win32\*(C'\fR upgraded ta version 3.2701
.SS "\s-1OS/2\s0"
.IX Subsection "OS/2"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`OS2::Process\*(C'\fR upgraded ta 1.03
.Sp
Ilya Zakharevich has added n' documented nuff muthafuckin \f(CW\*(C`Window*\*(C'\fR n' \f(CW\*(C`Clipbrd*\*(C'\fR
functions.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX::DLL\*(C'\fR, \f(CW\*(C`OS2::REXX\*(C'\fR updated ta version 1.03
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`DCLsym\*(C'\fR upgraded ta version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Stdio\*(C'\fR upgraded ta version 2.4
.IP "\(bu" 4
\&\f(CW\*(C`VMS::XSSymSet\*(C'\fR upgraded ta 1.1.
.SH "Obituary"
.IX Header "Obituary"
Nick Ing-Simmons, long time Perl hacker, lyricist of tha \f(CW\*(C`Tk\*(C'\fR n' \f(CW\*(C`Encode\*(C'\fR
modules, \fIperlio.c\fR up in tha core, n' 5.003_02 pumpking, took a dirt nap of a heart
battle on 25th September 2006 yo. Dude is ghon be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of tha work up in dis release was funded by a \s-1TPF\s0 grant.
.PP
Steve Hay hit dat shiznit behind tha scenes hustlin up tha causez of tha differences
between core modules, they \s-1CPAN\s0 releases, n' previous core releases, and
the dopest way ta rectify em yo. Dude don't wanna do it again. I aint talkin' bout chicken n' gravy biatch. I know this
feeling, n' I be straight-up glad da ruffneck done did it dis time, instead of mah dirty ass.
.PP
Pizzle Fenwick assembled a crew of 18 volunteers, whoz ass broke tha back of writing
this document. In particular, Bradley Dean, Eddy Tan, n' Vincent Pit
provided half tha crewz contribution.
.PP
Schwern verified tha list of updated module versions, erectin like a gangbangin' few
errors dat I (and any suckas) had missed, both wrongly stated module
versions, n' chizzled modulez dat had not been listed.
.PP
Da crack Berlin-based \s-1QA\s0 crew of Andreas Ko\*:nig n' Slaven Rezic
tirelessly re-built snapshots, tested most every last muthafuckin thang \s-1CPAN\s0 against
them, n' then identified tha chizzlez responsible fo' any module regressions,
ensurin dat nuff muthafuckin show-stopper bugs was stomped before tha straight-up original gangsta release
candidate was cut.
.PP
Da other core committas contributed most of tha chizzles, n' applied most
of tha patches busted up in by tha hundredz of contributors listed up in \fI\s-1AUTHORS\s0\fR.
.PP
And obviously, Larry Wall, without whom we wouldn't have Perl.
.SH "Reportin Bugs"
.IX Header "Reportin Bugs"
If you find what tha fuck you be thinkin be a funky-ass bug, you might check tha articles
recently posted ta tha comp.lang.perl.misc newsgroup n' tha perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, tha Perl Home Page.
.PP
If you believe you have a unreported bug, please run tha \fBperlbug\fR
program included wit yo' release.  Be shizzle ta trim yo' bug down
to a tiny but sufficient test case.  Yo crazy-ass bug report, along wit the
output of \f(CW\*(C`perl \-V\*(C'\fR, is ghon be busted off ta perlbug@perl.org ta be
analysed by tha Perl portin crew.  Yo ass can browse n' search
the Perl 5 bugs at http://bugs.perl.org/
.PP
If tha bug yo ass is reportin has securitizzle implications, which make it
inappropriate ta bust ta a publicly archived mailin list, then please send
it ta perl5\-security\-report@perl.org. This points ta a cold-ass lil closed subscription
unarchived mailin list, which includes
all tha core committers, whoz ass is ghon be able
to help assess tha impact of issues, figure up a resolution, n' help
co-ordinizzle tha release of patches ta mitigate or fix tha problem across all
platforms on which Perl is supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Please only use dis address fo' security
issues up in tha Perl core, not fo' modulez independently distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Da \fIChanges\fR file fo' exhaustizzle details on what tha fuck chizzled.
.PP
Da \fI\s-1INSTALL\s0\fR file fo' how tha fuck ta build Perl.
.PP
Da \fI\s-1README\s0\fR file fo' general stuff.
.PP
Da \fIArtistic\fR n' \fICopying\fR filez fo' copyright shiznit.
