.TH cmakevars 1 "February 11, 2014" "cmake 2.8.12.2"
.SH NAME
.PP
cmakevars \- Reference of CMake variables.

.SH VARIABLES THAT PROVIDE INFORMATION
.PP
variablez defined by cmake, dat give shiznit bout tha project, n' cmake

.TP
.B CMAKE_AR
Name of archivin tool fo' static libraries.

This specifies tha name of tha program dat creates archive or static libraries.

.TP
.B CMAKE_ARGC
Number of command line arguments passed ta CMake up in script mode.

When run up in \-P script mode, CMake sets dis variable ta tha number of command line arguments, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See also CMAKE_ARGV0, 1, 2 ...

.TP
.B CMAKE_ARGV0
Command line argument passed ta CMake up in script mode.

When run up in \-P script mode, CMake sets dis variable ta tha straight-up original gangsta command line argument. Well shiiiit, it then also sets CMAKE_ARGV1, CMAKE_ARGV2, ... n' so on, up ta tha number of command line arguments given. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. See also CMAKE_ARGC.

.TP
.B CMAKE_BINARY_DIR
Da path ta tha top level of tha build tree.

This is tha full path ta tha top level of tha current CMake build tree. For a in\-source build, dis would be tha same as CMAKE_SOURCE_DIR.

.TP
.B CMAKE_BUILD_TOOL
Tool used fo' tha actual build process.

This variable is set ta tha program dat is ghon be needed ta build tha output of CMake.   If tha generator selected was Visual Studio 6, tha CMAKE_BUILD_TOOL is ghon be set ta msdev, fo' Unix Makefilez it is ghon be set ta make or gmake, n' fo' Visual Studio 7 it set ta devenv.  For NMake Makefilez tha value is nmake. This can be useful fo' addin special flags n' commandz based on tha final build environment.

.TP
.B CMAKE_CACHEFILE_DIR
Da directory wit tha CMakeCache.txt file.

This is tha full path ta tha directory dat has tha CMakeCache.txt file up in dat shit.  This is tha same ol' dirty as CMAKE_BINARY_DIR.

.TP
.B CMAKE_CACHE_MAJOR_VERSION
Major version of CMake used ta create tha CMakeCache.txt file

This stores tha major version of CMake used ta write a CMake cache file. Well shiiiit, it is only different when a gangbangin' finger-lickin' different version of CMake is run on a previously pimped cache file.

.TP
.B CMAKE_CACHE_MINOR_VERSION
Minor version of CMake used ta create tha CMakeCache.txt file

This stores tha minor version of CMake used ta write a CMake cache file. Well shiiiit, it is only different when a gangbangin' finger-lickin' different version of CMake is run on a previously pimped cache file.

.TP
.B CMAKE_CACHE_PATCH_VERSION
Patch version of CMake used ta create tha CMakeCache.txt file

This stores tha patch version of CMake used ta write a CMake cache file. Well shiiiit, it is only different when a gangbangin' finger-lickin' different version of CMake is run on a previously pimped cache file.

.TP
.B CMAKE_CFG_INTDIR
Build\-time reference ta per\-configuration output subdirectory.

For natizzle build systems supportin multiple configurations up in tha build tree (like fuckin Visual Studio n' Xcode), tha value be a reference ta a funky-ass build\-time variable specifyin tha name of tha per\-configuration output subdirectory.  On Makefile generators dis evaluates ta "." cuz there is only one configuration up in a funky-ass build tree.  Example joints:


.nf
  $(IntDir)        = Visual Studio 6
  $(OutDir)        = Visual Studio 7, 8, 9
  $(Configuration) = Visual Studio 10
  $(CONFIGURATION) = Xcode
  .                = Make\-based tools
.fi

Since these joints is evaluated by tha natizzle build system, dis variable is suitable only fo' use up in command lines dat is ghon be evaluated at build time.  Example of intended usage:


.nf
  add_executable(mytool mytool.c)
  add_custom_command(
    OUTPUT out.txt
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool
            ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt
    DEPENDS mytool in.txt
    )
  add_custom_target(drive ALL DEPENDS out.txt)
.fi

Note dat CMAKE_CFG_INTDIR is no longer necessary fo' dis purpose but has been left fo' compatibilitizzle wit existin projects, n' you can put dat on yo' toast.  Instead add_custom_command() recognizes executable target names up in its COMMAND option, so "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool" can be replaced by just "mytool".


This variable is read\-only.  Settin it is undefined behavior. Shiiit, dis aint no joke.  In multi\-configuration build systems tha value of dis variable is passed as tha value of preprocessor symbol "CMAKE_INTDIR" ta tha compilation of all source files.

.TP
.B CMAKE_COMMAND
Da full path ta tha cmake executable.

This is tha full path ta tha CMake executable cmake which is useful from custom commandz dat wanna use tha cmake \-E option fo' portable system commands.  (e.g. /usr/local/bin/cmake

.TP
.B CMAKE_CROSSCOMPILING
Is CMake currently cross compiling.

This variable is ghon be set ta legit by CMake if CMake is cross compiling. Right back up in yo muthafuckin ass. Specifically if tha build platform is different from tha target platform.

.TP
.B CMAKE_CTEST_COMMAND
Full path ta ctest command installed wit cmake.

This is tha full path ta tha CTest executable ctest which is useful from custom commandz dat wanna use tha cmake \-E option fo' portable system commands.

.TP
.B CMAKE_CURRENT_BINARY_DIR
Da path ta tha binary directory currently bein processed.

This tha full path ta tha build directory dat is currently bein processed by cmake.  Each directory added by add_subdirectory will create a funky-ass binary directory up in tha build tree, n' as it is bein processed dis variable is ghon be set.  For in\-source buildz dis is tha current source directory bein processed.

.TP
.B CMAKE_CURRENT_LIST_DIR
Full directory of tha listfile currently bein processed.

As CMake processes tha listfilez up in yo' project dis variable will always be set ta tha directory where tha listfile which is currently bein processed (CMAKE_CURRENT_LIST_FILE) is located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da value has dynamic scope.  When CMake starts processin commandz up in a source file it sets dis variable ta tha directory where dis file is located. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  When CMake finishes processin commandz from tha file it restores tha previous value.  Therefore tha value of tha variable inside a macro or function is tha directory of tha file invokin tha bottom\-most entry on tha call stack, not tha directory of tha file containin tha macro or function definition.


See also CMAKE_CURRENT_LIST_FILE.

.TP
.B CMAKE_CURRENT_LIST_FILE
Full path ta tha listfile currently bein processed.

As CMake processes tha listfilez up in yo' project dis variable will always be set ta tha one currently bein processed. Y'all KNOW dat shit, muthafucka!  Da value has dynamic scope.  When CMake starts processin commandz up in a source file it sets dis variable ta tha location of tha file.  When CMake finishes processin commandz from tha file it restores tha previous value.  Therefore tha value of tha variable inside a macro or function is tha file invokin tha bottom\-most entry on tha call stack, not tha file containin tha macro or function definition.


See also CMAKE_PARENT_LIST_FILE.

.TP
.B CMAKE_CURRENT_LIST_LINE
Da line number of tha current file bein processed.

This is tha line number of tha file currently bein processed by cmake.

.TP
.B CMAKE_CURRENT_SOURCE_DIR
Da path ta tha source directory currently bein processed.

This tha full path ta tha source directory dat is currently bein processed by cmake.  

.TP
.B CMAKE_DL_LIBS
Name of library containin dlopen n' dlcose.

Da name of tha library dat has dlopen n' dlclose up in it, probably \-ldl on most UNIX machines.

.TP
.B CMAKE_EDIT_COMMAND
Full path ta cmake\-gui or ccmake.

This is tha full path ta tha CMake executable dat can graphically edit tha cache.  For example, cmake\-gui, ccmake, or cmake \-i.

.TP
.B CMAKE_EXECUTABLE_SUFFIX
Da suffix fo' executablez on dis platform.

Da suffix ta use fo' tha end of a executable filename if any, .exe on Windows.


CMAKE_EXECUTABLE_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_EXTRA_GENERATOR
Da extra generator used ta build tha project.

When rockin tha Eclipse, CodeBlocks or KDevelop generators, CMake generates Makefilez (CMAKE_GENERATOR) n' additionally project filez fo' tha respectizzle IDE. This IDE project file generator is stored up in CMAKE_EXTRA_GENERATOR (e.g. "Eclipse CDT4").

.TP
.B CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES
Additionizzle suffixes fo' shared libraries.

Extensions fo' shared libraries other than dat specified by CMAKE_SHARED_LIBRARY_SUFFIX, if any.  CMake uses dis ta recognize external shared library filez durin analysiz of libraries linked by a target.

.TP
.B CMAKE_GENERATOR
Da generator used ta build tha project.

Da name of tha generator dat is bein used ta generate tha build files.  (e.g. "Unix Makefiles", "Visual Studio 6", etc.)

.TP
.B CMAKE_GENERATOR_TOOLSET
Natizzle build system toolset name specified by user.

Some CMake generators support a toolset name ta be given ta tha natizzle build system ta chizzle a cold-ass lil compila n' shit.  If tha user specifies a toolset name (e.g. via tha cmake \-T option) tha value is ghon be available up in dis variable.

.TP
.B CMAKE_HOME_DIRECTORY
Path ta top of source tree.

This is tha path ta tha top level of tha source tree.

.TP
.B CMAKE_IMPORT_LIBRARY_PREFIX
Da prefix fo' import libraries dat you link to.

Da prefix ta use fo' tha name of a import library if used on dis platform.


CMAKE_IMPORT_LIBRARY_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_IMPORT_LIBRARY_SUFFIX
Da suffix fo' import libraries dat you link to.

Da suffix ta use fo' tha end of a import library filename if used on dis platform.


CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_LINK_LIBRARY_SUFFIX
Da suffix fo' libraries dat you link to.

Da suffix ta use fo' tha end of a library filename, .lib on Windows.

.TP
.B CMAKE_MAJOR_VERSION
Da Major version of cmake (i.e. tha 2 up in 2.X.X)

This specifies tha major version of tha CMake executable bein run.

.TP
.B CMAKE_MAKE_PROGRAM
See CMAKE_BUILD_TOOL.

This variable is round fo' backwardz compatibility, peep CMAKE_BUILD_TOOL.

.TP
.B CMAKE_MINIMUM_REQUIRED_VERSION
Version specified ta cmake_minimum_required command

Variable containin tha VERSION component specified up in tha cmake_minimum_required command.

.TP
.B CMAKE_MINOR_VERSION
Da Minor version of cmake (i.e. tha 4 up in X.4.X).

This specifies tha minor version of tha CMake executable bein run.

.TP
.B CMAKE_PARENT_LIST_FILE
Full path ta tha CMake file dat included tha current one.

While processin a CMake file loaded by include() or find_package() dis variable gotz nuff tha full path ta tha file includin dat shit.  Da top of tha include stack be always tha CMakeLists.txt fo' tha current directory.  See also CMAKE_CURRENT_LIST_FILE.

.TP
.B CMAKE_PATCH_VERSION
Da patch version of cmake (i.e. tha 3 up in X.X.3).

This specifies tha patch version of tha CMake executable bein run.

.TP
.B CMAKE_PROJECT_NAME
Da name of tha current project.

This specifies name of tha current project from tha closest inherited PROJECT command.

.TP
.B CMAKE_RANLIB
Name of randomizin tool fo' static libraries.

This specifies name of tha program dat randomizes libraries on UNIX, not used on Windows yo, but may be present.

.TP
.B CMAKE_ROOT
Install directory fo' hustlin cmake.

This is tha install root fo' tha hustlin CMake n' tha Modulez directory can be found here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. This is commonly used up in dis format: ${CMAKE_ROOT}/Modules

.TP
.B CMAKE_SCRIPT_MODE_FILE
Full path ta tha \-P script file currently bein processed.

When run up in \-P script mode, CMake sets dis variable ta tha full path of tha script file. When run ta configure a CMakeLists.txt file, dis variable aint set.

.TP
.B CMAKE_SHARED_LIBRARY_PREFIX
Da prefix fo' shared libraries dat you link to.

Da prefix ta use fo' tha name of a gangbangin' finger-lickin' dirty-ass shared library, lib on UNIX.


CMAKE_SHARED_LIBRARY_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SHARED_LIBRARY_SUFFIX
Da suffix fo' shared libraries dat you link to.

Da suffix ta use fo' tha end of a gangbangin' finger-lickin' dirty-ass shared library filename, .dll on Windows.


CMAKE_SHARED_LIBRARY_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SHARED_MODULE_PREFIX
Da prefix fo' loadable modulez dat you link to.

Da prefix ta use fo' tha name of a loadable module on dis platform.


CMAKE_SHARED_MODULE_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SHARED_MODULE_SUFFIX
Da suffix fo' shared libraries dat you link to.

Da suffix ta use fo' tha end of a loadable module filename on dis platform


CMAKE_SHARED_MODULE_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_SIZEOF_VOID_P
Size of a void pointer.

This is set ta tha size of a pointa on tha machine, n' is determined by a try compile. If a 64 bit size is found, then tha library search path is modified ta look fo' 64 bit libraries first.

.TP
.B CMAKE_SKIP_RPATH
If true, do not add run time path shiznit.

If dis is set ta TRUE, then tha rpath shiznit aint added ta compiled executables.  Da default is ta add rpath shiznit if tha platform supports dat shit.  This allows fo' easy as fuck  hustlin from tha build tree.  To omit RPATH up in tha install step yo, but not tha build step, use CMAKE_SKIP_INSTALL_RPATH instead.

.TP
.B CMAKE_SOURCE_DIR
Da path ta tha top level of tha source tree.

This is tha full path ta tha top level of tha current CMake source tree. For a in\-source build, dis would be tha same as CMAKE_BINARY_DIR.

.TP
.B CMAKE_STANDARD_LIBRARIES
Libraries linked tha fuck into every last muthafuckin executable n' shared library.

This is tha list of libraries dat is linked tha fuck into all executablez n' libraries.

.TP
.B CMAKE_STATIC_LIBRARY_PREFIX
Da prefix fo' static libraries dat you link to.

Da prefix ta use fo' tha name of a static library, lib on UNIX.


CMAKE_STATIC_LIBRARY_PREFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_STATIC_LIBRARY_SUFFIX
Da suffix fo' static libraries dat you link to.

Da suffix ta use fo' tha end of a static library filename, .lib on Windows.


CMAKE_STATIC_LIBRARY_SUFFIX_<LANG> overrides dis fo' language <LANG>.

.TP
.B CMAKE_TWEAK_VERSION
Da tweak version of cmake (i.e. tha 1 up in X.X.X.1).

This specifies tha tweak version of tha CMake executable bein run. I aint talkin' bout chicken n' gravy biatch.  Releases use tweak < 20000000 n' pimpment versions use tha date format CCYYMMDD fo' tha tweak level.

.TP
.B CMAKE_VERBOSE_MAKEFILE
Smoke verbose makefilez if on.

This variable defaults ta false. Yo ass can set dis variable ta legit ta make CMake produce verbose makefilez dat show each command line as it is used.

.TP
.B CMAKE_VERSION
Da full version of cmake up in major.minor.patch[.tweak[\-id]] format.

This specifies tha full version of tha CMake executable bein run. I aint talkin' bout chicken n' gravy biatch.  This variable is defined by versions 2.6.3 n' higher n' shit.  See variablez CMAKE_MAJOR_VERSION, CMAKE_MINOR_VERSION, CMAKE_PATCH_VERSION, n' CMAKE_TWEAK_VERSION fo' individual version components, n' you can put dat on yo' toast.  Da [\-id] component appears up in non\-release versions n' may be arbitrary text.

.TP
.B CMAKE_VS_PLATFORM_TOOLSET
Visual Studio Platform Toolset name.

VS 10 n' above use MSBuild under tha hood n' support multiple compila toolchains.  CMake may specify a toolset explicitly, like fuckin "v110" fo' VS 11 or "Windows7.1SDK" fo' 64\-bit support up in VS 10 Express.  CMake serves up tha name of tha chosen toolset up in dis variable.

.TP
.B CMAKE_XCODE_PLATFORM_TOOLSET
Xcode compila selection.

Xcode supports selection of a cold-ass lil compila from one of tha installed toolsets, n' you can put dat on yo' toast.  CMake serves up tha name of tha chosen toolset up in dis variable, if any is explicitly selected (e.g. via tha cmake \-T option).

.TP
.B PROJECT_BINARY_DIR
Full path ta build directory fo' project.

This is tha binary directory of da most thugged-out recent PROJECT command.

.TP
.B PROJECT_NAME
Name of tha project given ta tha project command.

This is tha name given ta da most thugged-out recent PROJECT command.

.TP
.B PROJECT_SOURCE_DIR
Top level source directory fo' tha current project.

This is tha source directory of da most thugged-out recent PROJECT command.

.TP
.B [Project name]_BINARY_DIR
Top level binary directory fo' tha named project.

A variable is pimped wit tha name used up in tha PROJECT command, n' is tha binary directory fo' tha project.   This can be useful when SUBDIR is used ta connect nuff muthafuckin projects.

.TP
.B [Project name]_SOURCE_DIR
Top level source directory fo' tha named project.

A variable is pimped wit tha name used up in tha PROJECT command, n' is tha source directory fo' tha project.   This can be useful when add_subdirectory is used ta connect nuff muthafuckin projects.

.SH VARIABLES THAT CHANGE BEHAVIOR
.TP
.B BUILD_SHARED_LIBS
Global flag ta cause add_library ta create shared libraries if on.

If present n' true, dis will cause all libraries ta be built shared unless tha library was explicitly added as a static library.  This variable is often added ta projects as a OPTION so dat each user of a project can decizzle if they wanna build tha project rockin shared or static libraries.

.TP
.B CMAKE_ABSOLUTE_DESTINATION_FILES
List of filez which done been installed rockin  a ABSOLUTE DESTINATION path.

This variable is defined by CMake\-generated cmake_install.cmake scripts, n' you can put dat on yo' toast. Well shiiiit, it can be used (read\-only) by programs or scripts dat source dem install scripts, n' you can put dat on yo' toast. This is used by some CPack generators (e.g. RPM).

.TP
.B CMAKE_AUTOMOC_RELAXED_MODE
Switch between strict n' chillaxed automoc mode.

By default, automoc behaves exactly as busted lyrics bout up in tha documentation of tha AUTOMOC target property.  When set ta TRUE, it accepts mo' input n' tries ta find tha erect input file fo' moc even if it differs from tha documented behaviour. Shiiit, dis aint no joke.  In dis mode it e.g. also checks whether a header file is intended ta be processed by moc when a "foo.moc" file has been included.


Relaxed mode has ta be enabled fo' KDE4 compatibility.

.TP
.B CMAKE_BACKWARDS_COMPATIBILITY
Version of cmake required ta build project

From tha deal wit view of backwardz compatibility, dis specifies what tha fuck version of CMake should be supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. By default dis value is tha version number of CMake dat yo ass is hustlin. Yo ass can set dis ta a olda version of CMake ta support deprecated commandz of CMake up in projects dat was freestyled ta use olda versionz of CMake. This can be set by tha user or set all up in tha beginnin of a CMakeLists file.

.TP
.B CMAKE_BUILD_TYPE
Specifies tha build type on single\-configuration generators.

This statically specifies what tha fuck build type (configuration) is ghon be built up in dis build tree. Possible joints is empty, Debug, Release, RelWithDebInfo n' MinSizeRel.  This variable is only meaningful ta single\-configuration generators (like fuckin make n' Ninja) i.e. dem which chizzle a single configuration when CMake runs ta generate a funky-ass build tree as opposed ta multi\-configuration generators which offer selection of tha build configuration within tha generated build environment.  There is nuff per\-config propertizzles n' variablez (usually followin clean SOME_VAR_<CONFIG> order conventions), like fuckin CMAKE_C_FLAGS_<CONFIG>, specified as uppercase: CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL].  For example, up in a funky-ass build tree configured ta build type Debug, CMake will peep ta havin CMAKE_C_FLAGS_DEBUG settings git added ta tha CMAKE_C_FLAGS settings.  See also CMAKE_CONFIGURATION_TYPES.

.TP
.B CMAKE_COLOR_MAKEFILE
Enablez color output when rockin tha Makefile generator.

When enabled, tha generated Makefilez will produce colored output.  Default is ON.

.TP
.B CMAKE_CONFIGURATION_TYPES
Specifies tha available build types on multi\-config generators.

This specifies what tha fuck build types (configurations) is ghon be available like fuckin Debug, Release, RelWithDebInfo etc.  This has reasonable defaults on most platforms yo, but can be extended ta provide other build types.  See also CMAKE_BUILD_TYPE fo' detailz of managin configuration data, n' CMAKE_CFG_INTDIR.

.TP
.B CMAKE_DEBUG_TARGET_PROPERTIES
Enablez tracin output fo' target properties.

This variable can be populated wit a list of propertizzles ta generate debug output fo' when evaluatin target properties. Put ya muthafuckin choppers up if ya feel dis!  Currently it can only be used when evaluatin tha INCLUDE_DIRECTORIES, COMPILE_DEFINITIONS n' COMPILE_OPTIONS target properties. Put ya muthafuckin choppers up if ya feel dis!  In dat case, it outputs a funky-ass backtrace fo' each entry up in tha target property.  Default is unset.

.TP
.B CMAKE_DISABLE_FIND_PACKAGE_<PackageName>
Variable fo' disablin find_package() calls.

Every non\-REQUIRED find_package() call up in a project can be disabled by settin tha variable CMAKE_DISABLE_FIND_PACKAGE_<PackageName> ta TRUE. This can be used ta build a project without a optionizzle package, although dat package is installed.


This switch should be used durin tha initial CMake run. I aint talkin' bout chicken n' gravy biatch. Otherwise if tha package has already been found up in a previous CMake run, tha variablez which done been stored up in tha cache will still be there, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  In dat case it is recommended ta remove tha cache variablez fo' dis package from tha cache rockin tha cache editor or cmake \-U

.TP
.B CMAKE_ERROR_DEPRECATED
Whether ta issue deprecation errors fo' macros n' functions.

If TRUE, dis can be used by macros n' functions ta issue fatal errors when deprecated macros or functions is used. Y'all KNOW dat shit, muthafucka!  This variable is FALSE by default.

.TP
.B CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
Ask cmake_install.cmake script ta error up as soon as a gangbangin' file wit absolute INSTALL DESTINATION is encountered.

Da fatal error is emitted before tha installation of tha offendin file takes place. This variable is used by CMake\-generated cmake_install.cmake scripts, n' you can put dat on yo' toast. If one sets dis variable ta ON while hustlin tha script, it may git fatal error lyrics from tha script.

.TP
.B CMAKE_FIND_LIBRARY_PREFIXES
Prefixes ta prepend when lookin fo' libraries.

This specifies what tha fuck prefixes ta add ta library names when tha find_library command looks fo' libraries. Put ya muthafuckin choppers up if ya feel dis! On UNIX systems dis is typically lib, meanin dat when tryin ta find tha foo library it will look fo' libfoo.

.TP
.B CMAKE_FIND_LIBRARY_SUFFIXES
Suffixes ta append when lookin fo' libraries.

This specifies what tha fuck suffixes ta add ta library names when tha find_library command looks fo' libraries. Put ya muthafuckin choppers up if ya feel dis! On Windows systems dis is typically .lib n' .dll, meanin dat when tryin ta find tha foo library it will look fo' foo.dll etc.

.TP
.B CMAKE_FIND_PACKAGE_WARN_NO_MODULE
Tell find_package ta warn if called without a explicit mode.

If find_package is called without a explicit mode option (MODULE, CONFIG or NO_MODULE) n' no Find<pkg>.cmake module is up in CMAKE_MODULE_PATH then CMake implicitly assumes dat tha calla intendz ta search fo' a package configuration file.  If no package configuration file is found then tha wordin of tha failure message must account fo' both tha case dat tha package is straight-up missin n' tha case dat tha project has a funky-ass bug n' failed ta provide tha intended Find module.  If instead tha calla specifies a explicit mode option then tha failure message can be mo' specific.


Set CMAKE_FIND_PACKAGE_WARN_NO_MODULE ta TRUE ta tell find_package ta warn when it implicitly assumes Config mode.  This helps pimpers enforce use of a explicit mode up in all calls ta find_package within a project.

.TP
.B CMAKE_IGNORE_PATH
Path ta be ignored by FIND_XXX() commands.

Specifies directories ta be ignored by searches up in FIND_XXX() commands.  This is useful up in cross\-compiled environments where some system directories contain incompatible but possibly linkable libraries. Put ya muthafuckin choppers up if ya feel dis! For example, on cross\-compiled clusta environments, dis allows a user ta ignore directories containin libraries meant fo' tha front\-end machine dat modulez like FindX11 (and others) would normally search.  By default dis is empty; it is intended ta be set by tha project.  Note dat CMAKE_IGNORE_PATH takes a list of directory names, NOT a list of prefixes. If you wanna ignore paths under prefixes (bin, include, lib, etc.), you gonna need ta specify dem explicitly.  See also CMAKE_PREFIX_PATH, CMAKE_LIBRARY_PATH, CMAKE_INCLUDE_PATH, CMAKE_PROGRAM_PATH.

.TP
.B CMAKE_INCLUDE_PATH
Path used fo' searchin by FIND_FILE() n' FIND_PATH().

Specifies a path which is ghon be used both by FIND_FILE() n' FIND_PATH(). Both commandz will check each of tha contained directories fo' tha existence of tha file which is currently searched. Y'all KNOW dat shit, muthafucka! By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_INCLUDE_PATH, CMAKE_PREFIX_PATH.

.TP
.B CMAKE_INSTALL_DEFAULT_COMPONENT_NAME
Default component used up in install() commands.

If a install() command is used without tha COMPONENT argument, these filez is ghon be grouped tha fuck into a thugged-out default component. Da name of dis default install component is ghon be taken from dis variable.  It defaults ta "Unspecified".

.TP
.B CMAKE_INSTALL_PREFIX
Install directory used by install.

If "make install" is invoked or INSTALL is built, dis directory is prepended onto all install directories. Put ya muthafuckin choppers up if ya feel dis! This variable defaults ta /usr/local on UNIX n' c:/Program Filez on Windows.


On UNIX one can use tha DESTDIR mechanizzle up in order ta relocate tha whole installation. I aint talkin' bout chicken n' gravy biatch.  DESTDIR means DESTination DIRectory. Well shiiiit, it is commonly used by makefile playas up in order ta install software at non\-default location. I aint talkin' bout chicken n' gravy biatch.  It be probably invoked like this:


.nf
 make DESTDIR=/home/john install
.fi

which will install tha concerned software rockin tha installation prefix, e.g. "/usr/local" prepended wit tha DESTDIR value which finally gives "/home/john/usr/local".


WARNING: DESTDIR may not be used on Windows cuz installation prefix probably gotz nuff a thugged-out drive letta like up in "C:/Program Files" which cannot be prepended wit some other prefix.


Da installation prefix be also added ta CMAKE_SYSTEM_PREFIX_PATH so dat find_package, find_program, find_library, find_path, n' find_file will search tha prefix fo' other software.

.TP
.B CMAKE_LIBRARY_PATH
Path used fo' searchin by FIND_LIBRARY().

Specifies a path which is ghon be used by FIND_LIBRARY(). FIND_LIBRARY() will check each of tha contained directories fo' tha existence of tha library which is currently searched. Y'all KNOW dat shit, muthafucka! By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_LIBRARY_PATH, CMAKE_PREFIX_PATH.

.TP
.B CMAKE_MFC_FLAG
Tell cmake ta use MFC fo' a executable or dll.

This can be set up in a CMakeLists.txt file n' will enable MFC up in tha application. I aint talkin' bout chicken n' gravy biatch.  It should be set ta 1 fo' tha static MFC library, n' 2 fo' tha shared MFC library.  This is used up in Visual Studio 6 n' 7 project files.   Da CMakeSetup dialog used MFC n' tha CMakeLists.txt be lookin like this:


.nf
  add_definitions(\-D_AFXDLL)
  set(CMAKE_MFC_FLAG 2)
  add_executable(CMakeSetup WIN32 ${SRCS})
.fi

.TP
.B CMAKE_MODULE_PATH
List of directories ta search fo' CMake modules.

Commandz like include() n' find_package() search fo' filez up in directories listed by dis variable before checkin tha default modulez dat come wit CMake.

.TP
.B CMAKE_NOT_USING_CONFIG_FLAGS
Skip _BUILD_TYPE flags if true.

This be a internal flag used by tha generators up in CMake ta tell CMake ta skip tha _BUILD_TYPE flags.

.TP
.B CMAKE_POLICY_DEFAULT_CMP<NNNN>
Default fo' CMake Policy CMP<NNNN> when it is otherwise left unset.

Commandz cmake_minimum_required(VERSION) n' cmake_policy(VERSION) by default leave policies introduced afta tha given version unset.  Set CMAKE_POLICY_DEFAULT_CMP<NNNN> ta OLD or NEW ta specify tha default fo' policy CMP<NNNN>, where <NNNN> is tha policy number.


This variable should not be set by a project up in CMake code; use cmake_policy(SET) instead. Y'all KNOW dat shit, muthafucka!  Users hustlin CMake may set dis variable up in tha cache (e.g. \-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>) ta set a policy not otherwise set by tha project.  Set ta OLD ta on tha down-low a policy warnin while rockin oldschool behavior or ta NEW ta try buildin tha project wit freshly smoked up behavior.

.TP
.B CMAKE_PREFIX_PATH
Path used fo' searchin by FIND_XXX(), wit appropriate suffixes added.

Specifies a path which is ghon be used by tha FIND_XXX() commands. Well shiiiit, it gotz nuff tha "base" directories, tha FIND_XXX() commandz append appropriate subdirectories ta tha base directories. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. So FIND_PROGRAM() addz /bin ta each of tha directories up in tha path, FIND_LIBRARY() appendz /lib ta each of tha directories, n' FIND_PATH() n' FIND_FILE() append /include . By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH, CMAKE_INCLUDE_PATH, CMAKE_LIBRARY_PATH, CMAKE_PROGRAM_PATH.

.TP
.B CMAKE_PROGRAM_PATH
Path used fo' searchin by FIND_PROGRAM().

Specifies a path which is ghon be used by FIND_PROGRAM(). FIND_PROGRAM() will check each of tha contained directories fo' tha existence of tha program which is currently searched. Y'all KNOW dat shit, muthafucka! By default it is empty, it is intended ta be set by tha project. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PROGRAM_PATH,  CMAKE_PREFIX_PATH.

.TP
.B CMAKE_SKIP_INSTALL_ALL_DEPENDENCY
Don't make tha install target depend on tha all target.

By default, tha "install" target dependz on tha "all" target.  This has tha effect, dat when "make install" is invoked or INSTALL is built, first tha "all" target is built, then tha installation starts, n' you can put dat on yo' toast.  If CMAKE_SKIP_INSTALL_ALL_DEPENDENCY is set ta TRUE, dis dependency aint pimped, so tha installation process will start immediately, independent from whether tha project has been straight-up built or not.

.TP
.B CMAKE_SYSTEM_IGNORE_PATH
Path ta be ignored by FIND_XXX() commands.

Specifies directories ta be ignored by searches up in FIND_XXX() commands.  This is useful up in cross\-compiled environments where some system directories contain incompatible but possibly linkable libraries. Put ya muthafuckin choppers up if ya feel dis! For example, on cross\-compiled clusta environments, dis allows a user ta ignore directories containin libraries meant fo' tha front\-end machine dat modulez like FindX11 (and others) would normally search.  By default dis gotz nuff a list of directories containin incompatible binaries fo' tha host system.  See also CMAKE_SYSTEM_PREFIX_PATH, CMAKE_SYSTEM_LIBRARY_PATH, CMAKE_SYSTEM_INCLUDE_PATH, n' CMAKE_SYSTEM_PROGRAM_PATH.

.TP
.B CMAKE_SYSTEM_INCLUDE_PATH
Path used fo' searchin by FIND_FILE() n' FIND_PATH().

Specifies a path which is ghon be used both by FIND_FILE() n' FIND_PATH(). Both commandz will check each of tha contained directories fo' tha existence of tha file which is currently searched. Y'all KNOW dat shit, muthafucka! By default it gotz nuff tha standard directories fo' tha current system. Well shiiiit, it is NOT intended ta be modified by tha project, use CMAKE_INCLUDE_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH.

.TP
.B CMAKE_SYSTEM_LIBRARY_PATH
Path used fo' searchin by FIND_LIBRARY().

Specifies a path which is ghon be used by FIND_LIBRARY(). FIND_LIBRARY() will check each of tha contained directories fo' tha existence of tha library which is currently searched. Y'all KNOW dat shit, muthafucka! By default it gotz nuff tha standard directories fo' tha current system. Well shiiiit, it is NOT intended ta be modified by tha project, use CMAKE_LIBRARY_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH.

.TP
.B CMAKE_SYSTEM_PREFIX_PATH
Path used fo' searchin by FIND_XXX(), wit appropriate suffixes added.

Specifies a path which is ghon be used by tha FIND_XXX() commands. Well shiiiit, it gotz nuff tha "base" directories, tha FIND_XXX() commandz append appropriate subdirectories ta tha base directories. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. So FIND_PROGRAM() addz /bin ta each of tha directories up in tha path, FIND_LIBRARY() appendz /lib ta each of tha directories, n' FIND_PATH() n' FIND_FILE() append /include . By default dis gotz nuff tha standard directories fo' tha current system n' tha CMAKE_INSTALL_PREFIX.  It be NOT intended ta be modified by tha project, use CMAKE_PREFIX_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_INCLUDE_PATH, CMAKE_SYSTEM_LIBRARY_PATH, CMAKE_SYSTEM_PROGRAM_PATH, n' CMAKE_SYSTEM_IGNORE_PATH.

.TP
.B CMAKE_SYSTEM_PROGRAM_PATH
Path used fo' searchin by FIND_PROGRAM().

Specifies a path which is ghon be used by FIND_PROGRAM(). FIND_PROGRAM() will check each of tha contained directories fo' tha existence of tha program which is currently searched. Y'all KNOW dat shit, muthafucka! By default it gotz nuff tha standard directories fo' tha current system. Well shiiiit, it is NOT intended ta be modified by tha project, use CMAKE_PROGRAM_PATH fo' all dis bullshit. Right back up in yo muthafuckin ass. See also CMAKE_SYSTEM_PREFIX_PATH.

.TP
.B CMAKE_USER_MAKE_RULES_OVERRIDE
Specify a CMake file dat overrides platform shiznit.

CMake loadz tha specified file while enablin support fo' each language from either tha project() or enable_language() commands.  It be loaded afta CMakez builtin compila n' platform shiznit modulez done been loaded but before tha shiznit is used. Y'all KNOW dat shit, muthafucka!  Da file may set platform shiznit variablez ta override CMakez defaults.


This feature is intended fo' use only up in overridin shiznit variablez dat must be set before CMake buildz its first test project ta check dat tha compila fo' a language works.  It should not be used ta load a gangbangin' file up in cases dat a aiiight include() will work.  Use it only as a last resort fo' behavior dat cannot be  bigged up  any other way.  For example, one may set CMAKE_C_FLAGS_INIT ta chizzle tha default value used ta initialize CMAKE_C_FLAGS before it is cached. Y'all KNOW dat shit, muthafucka!  Da override file should NOT be used ta set anythang dat could be set afta languages is enabled, like fuckin variablez like CMAKE_RUNTIME_OUTPUT_DIRECTORY dat affect tha placement of binaries. Put ya muthafuckin choppers up if ya feel dis!  Hype set up in tha file is ghon be used fo' try_compile n' try_run buildz like a muthafucka.

.TP
.B CMAKE_WARN_DEPRECATED
Whether ta issue deprecation warnings fo' macros n' functions.

If TRUE, dis can be used by macros n' functions ta issue deprecation warnings.  This variable is FALSE by default.

.TP
.B CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
Ask cmake_install.cmake script ta warn each time a gangbangin' file wit absolute INSTALL DESTINATION is encountered.

This variable is used by CMake\-generated cmake_install.cmake scripts, n' you can put dat on yo' toast. If one sets dis variable ta ON while hustlin tha script, it may git warnin lyrics from tha script.

.SH VARIABLES THAT DESCRIBE THE SYSTEM
.TP
.B APPLE
True if hustlin on Mac OS X.

Set ta legit on Mac OS X.

.TP
.B BORLAND
True if tha Borland compila is bein used.

This is set ta legit if tha Borland compila is bein used.

.TP
.B CMAKE_CL_64
Usin tha 64 bit compila from Microsoft

Set ta legit when rockin tha 64 bit cl compila from Microsoft.

.TP
.B CMAKE_COMPILER_2005
Usin tha Visual Studio 2005 compila from Microsoft

Set ta legit when rockin tha Visual Studio 2005 compila from Microsoft.

.TP
.B CMAKE_HOST_APPLE
True fo' Applez OS X operatin systems.

Set ta legit when tha host system is Applez OS X.

.TP
.B CMAKE_HOST_SYSTEM
Name of system cmake is bein run on.

Da same as CMAKE_SYSTEM but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_SYSTEM_NAME
Name of tha OS CMake is hustlin on.

Da same as CMAKE_SYSTEM_NAME but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_SYSTEM_PROCESSOR
Da name of tha CPU CMake is hustlin on.

Da same as CMAKE_SYSTEM_PROCESSOR but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_SYSTEM_VERSION
OS version CMake is hustlin on.

Da same as CMAKE_SYSTEM_VERSION but fo' tha host system instead of tha target system when cross compiling.

.TP
.B CMAKE_HOST_UNIX
True fo' UNIX n' UNIX like operatin systems.

Set ta legit when tha host system is UNIX or UNIX like (i.e fo' realz. APPLE n' CYGWIN).

.TP
.B CMAKE_HOST_WIN32
True on windows systems, includin win64.

Set ta legit when tha host system is Windows n' on Cygwin.

.TP
.B CMAKE_LIBRARY_ARCHITECTURE
Target architecture library directory name, if detected.

This is tha value of CMAKE_<lang>_LIBRARY_ARCHITECTURE as detected fo' one of tha enabled languages.

.TP
.B CMAKE_LIBRARY_ARCHITECTURE_REGEX
Regex matchin possible target architecture library directory names.

This is used ta detect CMAKE_<lang>_LIBRARY_ARCHITECTURE from tha implicit linker search path by matchin tha <arch> name.

.TP
.B CMAKE_OBJECT_PATH_MAX
Maximum object file full\-path length allowed by natizzle build tools.

CMake computes fo' every last muthafuckin source file a object file name dat is unique ta tha source file n' deterministic wit respect ta tha full path ta tha source file.  This allows multiple source filez up in a target ta share tha same name if they lie up in different directories without rebuildin when one be added or removed. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat it can produce long full paths up in all dem cases, so CMake shortens tha path rockin a hashin scheme when tha full path ta a object file exceedz a limit.  CMake has a funky-ass built\-in limit fo' each platform dat is sufficient fo' common tools yo, but some natizzle tools may gotz a lower limit.  This variable may be set ta specify tha limit explicitly.  Da value must be a integer no less than 128.

.TP
.B CMAKE_SYSTEM
Name of system cmake is compilin for.

This variable is tha composite of CMAKE_SYSTEM_NAME n' CMAKE_SYSTEM_VERSION, like dis ${CMAKE_SYSTEM_NAME}\-${CMAKE_SYSTEM_VERSION}.  If CMAKE_SYSTEM_VERSION aint set, then CMAKE_SYSTEM is tha same ol' dirty as CMAKE_SYSTEM_NAME.

.TP
.B CMAKE_SYSTEM_NAME
Name of tha OS CMake is buildin for.

This is tha name of tha operatin system on which CMake is targeting.   On systems dat have tha uname command, dis variable is set ta tha output of uname \-s.  Linux, Windows,  n' Darwin fo' Mac OS X is tha joints found  on tha big-ass three operatin systems.

.TP
.B CMAKE_SYSTEM_PROCESSOR
Da name of tha CPU CMake is buildin for.

On systems dat support uname, dis variable is set ta tha output of uname \-p, on windows it is set ta tha value of tha environment variable PROCESSOR_ARCHITECTURE

.TP
.B CMAKE_SYSTEM_VERSION
OS version CMake is buildin for.

A numeric version strang fo' tha system, on systems dat support uname, dis variable is set ta tha output of uname \-r. Shiiit, dis aint no joke. On other systems dis is set ta major\-minor version numbers.

.TP
.B CYGWIN
True fo' Cygwin.

Set ta legit when rockin Cygwin.

.TP
.B ENV
Access environment variables.

Use tha syntax $ENV{VAR} ta read environment variable VAR.  See also tha set() command ta set ENV{VAR}.

.TP
.B MSVC
True when rockin Microsizzlez Visual C

Set ta legit when tha compila is some version of Microsizzlez Visual C.

.TP
.B MSVC10
True when rockin Microsizzlez Visual C 10.0

Set ta legit when tha compila is version 10.0 of Microsizzlez Visual C.

.TP
.B MSVC11
True when rockin Microsizzlez Visual C 11.0

Set ta legit when tha compila is version 11.0 of Microsizzlez Visual C.

.TP
.B MSVC12
True when rockin Microsizzlez Visual C 12.0

Set ta legit when tha compila is version 12.0 of Microsizzlez Visual C.

.TP
.B MSVC60
True when rockin Microsizzlez Visual C 6.0

Set ta legit when tha compila is version 6.0 of Microsizzlez Visual C.

.TP
.B MSVC70
True when rockin Microsizzlez Visual C 7.0

Set ta legit when tha compila is version 7.0 of Microsizzlez Visual C.

.TP
.B MSVC71
True when rockin Microsizzlez Visual C 7.1

Set ta legit when tha compila is version 7.1 of Microsizzlez Visual C.

.TP
.B MSVC80
True when rockin Microsizzlez Visual C 8.0

Set ta legit when tha compila is version 8.0 of Microsizzlez Visual C.

.TP
.B MSVC90
True when rockin Microsizzlez Visual C 9.0

Set ta legit when tha compila is version 9.0 of Microsizzlez Visual C.

.TP
.B MSVC_IDE
True when rockin tha Microsizzlez Visual C IDE

Set ta legit when tha target platform is tha Microsizzlez Visual C IDE, as opposed ta tha command line compiler.

.TP
.B MSVC_VERSION
Da version of Microsizzlez Visual C/C++ bein used if any.

Known version numbers are:


.nf
  1200 = VS  6.0
  1300 = VS  7.0
  1310 = VS  7.1
  1400 = VS  8.0
  1500 = VS  9.0
  1600 = VS 10.0
  1700 = VS 11.0
  1800 = VS 12.0
.fi

.TP
.B UNIX
True fo' UNIX n' UNIX like operatin systems.

Set ta legit when tha target system is UNIX or UNIX like (i.e fo' realz. APPLE n' CYGWIN).

.TP
.B WIN32
True on windows systems, includin win64.

Set ta legit when tha target system is Windows.

.TP
.B XCODE_VERSION
Version of Xcode (Xcode generator only).

Under tha Xcode generator, dis is tha version of Xcode as specified up in "Xcode.app/Contents/version.plist" (like fuckin "3.1.2").

.SH VARIABLES THAT CONTROL THE BUILD
.TP
.B CMAKE_<CONFIG>_POSTFIX
Default filename postfix fo' libraries under configuration <CONFIG>.

When a non\-executable target is pimped its <CONFIG>_POSTFIX target property is initialized wit tha value of dis variable if it is set.

.TP
.B CMAKE_<LANG>_VISIBILITY_PRESET
Default value fo' <LANG>_VISIBILITY_PRESET of targets.

This variable is used ta initialize tha <LANG>_VISIBILITY_PRESET property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_ARCHIVE_OUTPUT_DIRECTORY
Where ta put all tha ARCHIVE targets when built.

This variable is used ta initialize tha ARCHIVE_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_AUTOMOC
Whether ta handle moc automatically fo' Qt targets.

This variable is used ta initialize tha AUTOMOC property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_AUTOMOC_MOC_OPTIONS
Additionizzle options fo' moc when rockin automoc (see CMAKE_AUTOMOC).

This variable is used ta initialize tha AUTOMOC_MOC_OPTIONS property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_BUILD_WITH_INSTALL_RPATH
Use tha install path fo' tha RPATH

Normally CMake uses tha build tree fo' tha RPATH when buildin executablez etc on systems dat use RPATH. When tha software is installed tha executablez etc is relinked by CMake ta have tha install RPATH. If dis variable is set ta legit then tha software be always built wit tha install path fo' tha RPATH n' do not need ta be relinked when installed.

.TP
.B CMAKE_DEBUG_POSTFIX
See variable CMAKE_<CONFIG>_POSTFIX.

This variable be a special case of tha more\-general CMAKE_<CONFIG>_POSTFIX variable fo' tha DEBUG configuration.

.TP
.B CMAKE_EXE_LINKER_FLAGS
Linker flags ta be used ta create executables.

These flags is ghon be used by tha linker when bustin a executable.

.TP
.B CMAKE_EXE_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a executable.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin executables.

.TP
.B CMAKE_Fortran_FORMAT
Set ta FIXED or FREE ta indicate tha Fortran source layout.

This variable is used ta initialize tha Fortran_FORMAT property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_Fortran_MODULE_DIRECTORY
Fortran module output directory.

This variable is used ta initialize tha Fortran_MODULE_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_GNUtoMS
Convert GNU import libraries (.dll.a) ta MS format (.lib).

This variable is used ta initialize tha GNUtoMS property on targets when they is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_INCLUDE_CURRENT_DIR
Automatically add tha current source\- n' build directories ta tha include path.

If dis variable is enabled, CMake automatically addz up in each directory ${CMAKE_CURRENT_SOURCE_DIR} n' ${CMAKE_CURRENT_BINARY_DIR} ta tha include path fo' dis directory. These additionizzle include directories do not propagate down ta subdirectories. Put ya muthafuckin choppers up if ya feel dis! This is useful mainly fo' out\-of\-source builds, where filez generated tha fuck into tha build tree is included by filez located up in tha source tree.


By default CMAKE_INCLUDE_CURRENT_DIR is OFF.

.TP
.B CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE
Automatically add tha current source\- n' build directories ta tha INTERFACE_INCLUDE_DIRECTORIES.

If dis variable is enabled, CMake automatically addz fo' each shared library target, static library target, module target n' executable target, ${CMAKE_CURRENT_SOURCE_DIR} n' ${CMAKE_CURRENT_BINARY_DIR} ta tha INTERFACE_INCLUDE_DIRECTORIES.By default CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE is OFF.

.TP
.B CMAKE_INSTALL_NAME_DIR
Mac OS X directory name fo' installed targets.

CMAKE_INSTALL_NAME_DIR is used ta initialize tha INSTALL_NAME_DIR property on all targets, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. See dat target property fo' mo' shiznit.

.TP
.B CMAKE_INSTALL_RPATH
Da rpath ta use fo' installed targets.

A semicolon\-separated list specifyin tha rpath ta use up in installed targets (for platforms dat support it).  This is used ta initialize tha target property INSTALL_RPATH fo' all targets.

.TP
.B CMAKE_INSTALL_RPATH_USE_LINK_PATH
Add paths ta linker search n' installed rpath.

CMAKE_INSTALL_RPATH_USE_LINK_PATH be a funky-ass boolean dat if set ta legit will append directories up in tha linker search path n' outside tha project ta tha INSTALL_RPATH.  This is used ta initialize tha target property INSTALL_RPATH_USE_LINK_PATH fo' all targets.

.TP
.B CMAKE_LIBRARY_OUTPUT_DIRECTORY
Where ta put all tha LIBRARY targets when built.

This variable is used ta initialize tha LIBRARY_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_LIBRARY_PATH_FLAG
Da flag ta be used ta add a library search path ta a cold-ass lil compiler.

Da flag is ghon be used ta specify a library directory ta tha compila n' shit.  On most compilaz dis is "\-L".

.TP
.B CMAKE_LINK_DEF_FILE_FLAG  
Linker flag ta be used ta specify a .def file fo' dll creation.

Da flag is ghon be used ta add a .def file when bustin a thugged-out dll on Windows; dis is only defined on Windows.

.TP
.B CMAKE_LINK_DEPENDS_NO_SHARED
Whether ta skip link dependencies on shared library files.

This variable initializes tha LINK_DEPENDS_NO_SHARED property on targets when they is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_LINK_INTERFACE_LIBRARIES
Default value fo' LINK_INTERFACE_LIBRARIES of targets.

This variable is used ta initialize tha LINK_INTERFACE_LIBRARIES property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_LINK_LIBRARY_FILE_FLAG
Flag ta be used ta link a library specified by a path ta its file.

Da flag is ghon be used before a library file path is given ta tha linker n' shit.  This is needed only on straight-up few platforms.

.TP
.B CMAKE_LINK_LIBRARY_FLAG
Flag ta be used ta link a library tha fuck into a executable.

Da flag is ghon be used ta specify a library ta link ta a executable.  On most compilaz dis is "\-l".

.TP
.B CMAKE_MACOSX_BUNDLE
Default value fo' MACOSX_BUNDLE of targets.

This variable is used ta initialize tha MACOSX_BUNDLE property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_MODULE_LINKER_FLAGS
Linker flags ta be used ta create modules.

These flags is ghon be used by tha linker when bustin a module.

.TP
.B CMAKE_MODULE_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a module.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin modules.

.TP
.B CMAKE_NO_BUILTIN_CHRPATH
Do not use tha builtin ELF editor ta fix RPATHs on installation.

When a ELF binary need ta gotz a gangbangin' finger-lickin' different RPATH afta installation than it do up in tha build tree, CMake uses a funky-ass builtin editor ta chizzle tha RPATH up in tha installed copy.  If dis variable is set ta legit then CMake will relink tha binary before installation instead of rockin its builtin editor.

.TP
.B CMAKE_PDB_OUTPUT_DIRECTORY
Where ta put all tha MS debug symbol filez from linker.

This variable is used ta initialize tha PDB_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_POSITION_INDEPENDENT_CODE
Default value fo' POSITION_INDEPENDENT_CODE of targets.

This variable is used ta initialize tha POSITION_INDEPENDENT_CODE property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_RUNTIME_OUTPUT_DIRECTORY
Where ta put all tha RUNTIME targets when built.

This variable is used ta initialize tha RUNTIME_OUTPUT_DIRECTORY property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_SHARED_LINKER_FLAGS
Linker flags ta be used ta create shared libraries.

These flags is ghon be used by tha linker when bustin a gangbangin' finger-lickin' dirty-ass shared library.

.TP
.B CMAKE_SHARED_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a gangbangin' finger-lickin' dirty-ass shared library.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin shared libraries.

.TP
.B CMAKE_SKIP_BUILD_RPATH
Do not include RPATHs up in tha build tree.

Normally CMake uses tha build tree fo' tha RPATH when buildin executablez etc on systems dat use RPATH. When tha software is installed tha executablez etc is relinked by CMake ta have tha install RPATH. If dis variable is set ta legit then tha software be always built wit no RPATH.

.TP
.B CMAKE_SKIP_INSTALL_RPATH
Do not include RPATHs up in tha install tree.

Normally CMake uses tha build tree fo' tha RPATH when buildin executablez etc on systems dat use RPATH. When tha software is installed tha executablez etc is relinked by CMake ta have tha install RPATH. If dis variable is set ta legit then tha software be always installed without RPATH, even if RPATH is enabled when building.  This can be useful fo' example ta allow hustlin tests from tha build directory wit RPATH enabled before tha installation step.  To omit RPATH up in both tha build n' install steps, use CMAKE_SKIP_RPATH instead.

.TP
.B CMAKE_STATIC_LINKER_FLAGS
Linker flags ta be used ta create static libraries.

These flags is ghon be used by tha linker when bustin a static library.

.TP
.B CMAKE_STATIC_LINKER_FLAGS_<CONFIG>
Flags ta be used when linkin a static library.

Same as CMAKE_C_FLAGS_* but used by tha linker when bustin static libraries.

.TP
.B CMAKE_TRY_COMPILE_CONFIGURATION
Build configuration used fo' try_compile n' try_run projects.

Projects built by try_compile n' try_run is built synchronously durin tha CMake configuration step.  Therefore a specific build configuration must be chosen even if tha generated build system supports multiple configurations.

.TP
.B CMAKE_USE_RELATIVE_PATHS
Use relatizzle paths (May not work!).

If dis is set ta TRUE, then CMake will use relatizzle paths between tha source n' binary tree.  This option do not work fo' mo' fucked up projects, n' relatizzle paths is used when possible.  In general, it aint possible ta move CMake generated makefilez ta a gangbangin' finger-lickin' different location regardless of tha value of dis variable.

.TP
.B CMAKE_VISIBILITY_INLINES_HIDDEN
Default value fo' VISIBILITY_INLINES_HIDDEN of targets.

This variable is used ta initialize tha VISIBILITY_INLINES_HIDDEN property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B CMAKE_WIN32_EXECUTABLE
Default value fo' WIN32_EXECUTABLE of targets.

This variable is used ta initialize tha WIN32_EXECUTABLE property on all tha targets, n' you can put dat on yo' toast.  See dat target property fo' additionizzle shiznit.

.TP
.B EXECUTABLE_OUTPUT_PATH
Oldskool executable location variable.

Da target property RUNTIME_OUTPUT_DIRECTORY supercedes dis variable fo' a target if it is set.  Executable targets is otherwise placed up in dis directory.

.TP
.B LIBRARY_OUTPUT_PATH
Oldskool library location variable.

Da target propertizzles ARCHIVE_OUTPUT_DIRECTORY, LIBRARY_OUTPUT_DIRECTORY, n' RUNTIME_OUTPUT_DIRECTORY supercede dis variable fo' a target if they is set.  Library targets is otherwise placed up in dis directory.

.SH VARIABLES FOR LANGUAGES
.TP
.B CMAKE_<LANG>_ARCHIVE_APPEND
Rule variable ta append ta a static archive.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta append ta a static archive.  It be used up in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on some platforms up in order ta support big-ass object counts, n' you can put dat on yo' toast.  See also CMAKE_<LANG>_ARCHIVE_CREATE n' CMAKE_<LANG>_ARCHIVE_FINISH.

.TP
.B CMAKE_<LANG>_ARCHIVE_CREATE
Rule variable ta create a freshly smoked up static archive.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a static archive.  It be used up in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on some platforms up in order ta support big-ass object counts, n' you can put dat on yo' toast.  See also CMAKE_<LANG>_ARCHIVE_APPEND n' CMAKE_<LANG>_ARCHIVE_FINISH.

.TP
.B CMAKE_<LANG>_ARCHIVE_FINISH
Rule variable ta finish a existin static archive.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta finish a static archive.  It be used up in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on some platforms up in order ta support big-ass object counts, n' you can put dat on yo' toast.  See also CMAKE_<LANG>_ARCHIVE_CREATE n' CMAKE_<LANG>_ARCHIVE_APPEND.

.TP
.B CMAKE_<LANG>_COMPILER
Da full path ta tha compila fo' LANG.

This is tha command dat is ghon be used as tha <LANG> compila n' shit.  Once set, you can not chizzle dis variable.

.TP
.B CMAKE_<LANG>_COMPILER_ABI
An internal variable subject ta chizzle.

This is used up in determinin tha compila ABI n' is subject ta chizzle.

.TP
.B CMAKE_<LANG>_COMPILER_ID
Compila identification string.

A short strang unique ta tha compila vendor. Shiiit, dis aint no joke.  Possible joints include:


.nf
  Absoft = Absoft Fortran (absoft.com)
  ADSP = Analog VisualDSP++ (analog.com)
  Clang = LLVM Clang (clang.llvm.org)
  Cray = Cray Compila (cray.com)
  Embarcadero, Borland = Embarcadero (embarcadero.com)
  G95 = G95 Fortran (g95.org)
  GNU = GNU Compila Collection (gcc.gnu.org)
  HP = Hewlett\-Packard Compila (hp.com)
  Intel = Intel Compila (intel.com)
  MIPSpro = SGI MIPSpro (sgi.com)
  MSVC = Microsizzlez Visual Studio (microsoft.com)
  PGI = Da Portland Group (pgroup.com)
  PathScale = PathScale (pathscale.com)
  SDCC = Lil Small-Ass Device C Compila (sdcc.sourceforge.net)
  SunPro = Oracle Solaris Studio (oracle.com)
  TI = Texas Instruments (ti.com)
  TinyCC = Tiny C Compila (tinycc.org)
  Watcom = Open Watcom (openwatcom.org)
  XL, VisualAge, zOS = IBM XL (ibm.com)
.fi

This variable aint guaranteed ta be defined fo' all compilaz or languages.

.TP
.B CMAKE_<LANG>_COMPILER_LOADED
Defined ta legit if tha language is enabled.

When language <LANG> is enabled by project() or enable_language() dis variable is defined ta 1.

.TP
.B CMAKE_<LANG>_COMPILER_VERSION
Compila version string.

Compila version up in major[.minor[.patch[.tweak]]] format.  This variable aint guaranteed ta be defined fo' all compilaz or languages.

.TP
.B CMAKE_<LANG>_COMPILE_OBJECT
Rule variable ta compile a single object file.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta compile a single object file fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_CREATE_SHARED_LIBRARY
Rule variable ta create a gangbangin' finger-lickin' dirty-ass shared library.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a gangbangin' finger-lickin' dirty-ass shared library fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_CREATE_SHARED_MODULE
Rule variable ta create a gangbangin' finger-lickin' dirty-ass shared module.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a gangbangin' finger-lickin' dirty-ass shared library fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_CREATE_STATIC_LIBRARY
Rule variable ta create a static library.

This be a rule variable dat  drops some lyrics ta CMake how tha fuck ta create a static library fo' tha language <LANG>.

.TP
.B CMAKE_<LANG>_FLAGS
Flags fo' all build types.

<LANG> flags used regardless of tha value of CMAKE_BUILD_TYPE.

.TP
.B CMAKE_<LANG>_FLAGS_DEBUG
Flags fo' Debug build type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is Debug.

.TP
.B CMAKE_<LANG>_FLAGS_MINSIZEREL
Flags fo' MinSizeRel build type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is MinSizeRel.Short fo' minimum size release.

.TP
.B CMAKE_<LANG>_FLAGS_RELEASE
Flags fo' Release build type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is Release

.TP
.B CMAKE_<LANG>_FLAGS_RELWITHDEBINFO
Flags fo' RelWithDebInfo type or configuration.

<LANG> flags used when CMAKE_BUILD_TYPE is RelWithDebInfo.  Short fo' Release With Debug Information.

.TP
.B CMAKE_<LANG>_IGNORE_EXTENSIONS
File extensions dat should be ignored by tha build.

This be a list of file extensions dat may be part of a project fo' a given language but is not compiled.

.TP
.B CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES
Directories implicitly searched by tha compila fo' header files.

CMake do not explicitly specify these directories on compila command lines fo' language <LANG>.  This prevents system include directories from bein treated as user include directories on some compilers.

.TP
.B CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES
Implicit linker search path detected fo' language <LANG>.

Compilaz typically pass directories containin language runtime libraries n' default library search paths when they invoke a linker n' shit.  These paths is implicit linker search directories fo' tha compilerz language.  CMake automatically detects these directories fo' each language n' reports tha thangs up in dis biatch up in dis variable.


When a library up in one of these directories is given by full path ta target_link_libraries() CMake will generate tha \-l<name> form on link lines ta ensure tha linker searches its implicit directories fo' tha library.  Note dat some toolchains read implicit directories from a environment variable like fuckin LIBRARY_PATH so keep its value consistent when operatin up in a given build tree.

.TP
.B CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES
Implicit linker framework search path detected fo' language <LANG>.

These paths is implicit linker framework search directories fo' tha compilerz language.  CMake automatically detects these directories fo' each language n' reports tha thangs up in dis biatch up in dis variable.

.TP
.B CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES
Implicit link libraries n' flags detected fo' language <LANG>.

Compilaz typically pass language runtime library names n' other flags when they invoke a linker n' shit.  These flags is implicit link options fo' tha compilerz language.  CMake automatically detects these libraries n' flags fo' each language n' reports tha thangs up in dis biatch up in dis variable.

.TP
.B CMAKE_<LANG>_LIBRARY_ARCHITECTURE
Target architecture library directory name detected fo' <lang>.

If tha <lang> compila passes ta tha linker a architecture\-specific system library search directory like fuckin <prefix>/lib/<arch> dis variable gotz nuff tha <arch> name if/as detected by CMake.

.TP
.B CMAKE_<LANG>_LINKER_PREFERENCE
Preference value fo' linker language selection.

Da "linker language" fo' executable, shared library, n' module targets is tha language whose compila will invoke tha linker n' shit.  Da LINKER_LANGUAGE target property sets tha language explicitly.  Otherwise, tha linker language is dat whose linker preference value is highest among languages compiled n' linked tha fuck into tha target.  See also tha CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES variable.

.TP
.B CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES
True if CMAKE_<LANG>_LINKER_PREFERENCE propagates across targets.

This is used when CMake selects a linker language fo' a target.  Languages compiled directly tha fuck into tha target is always considered. Y'all KNOW dat shit, muthafucka!  A language compiled tha fuck into static libraries linked by tha target is considered if dis variable is true.

.TP
.B CMAKE_<LANG>_LINK_EXECUTABLE 
Rule variable ta link a executable.

Rule variable ta link a executable fo' tha given language.

.TP
.B CMAKE_<LANG>_OUTPUT_EXTENSION
Extension fo' tha output of a cold-ass lil compile fo' a single file.

This is tha extension fo' a object file fo' tha given <LANG>. For example .obj fo' C on Windows.

.TP
.B CMAKE_<LANG>_PLATFORM_ID
An internal variable subject ta chizzle.

This is used up in determinin tha platform n' is subject ta chizzle.

.TP
.B CMAKE_<LANG>_SIZEOF_DATA_PTR
Size of pointer\-to\-data types fo' language <LANG>.

This holdz tha size (in bytes) of pointer\-to\-data types up in tha target platform ABI.  It be defined fo' languages C n' CXX (C++).

.TP
.B CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS
Extensionz of source filez fo' tha given language.

This is tha list of extensions fo' a given languagez source files.

.TP
.B CMAKE_COMPILER_IS_GNU<LANG>
True if tha compila is GNU.

If tha selected <LANG> compila is tha GNU compila then dis is TRUE, if not it is FALSE.  Unlike tha other per\-language variables, dis uses tha GNU syntax fo' identifyin languages instead of tha CMake syntax. Recognized jointz of tha <LANG> suffix are:


.nf
  CC = C compiler
  CXX = C++ compiler
  G77 = Fortran compiler
.fi

.TP
.B CMAKE_Fortran_MODDIR_DEFAULT
Fortran default module output directory.

Most Fortran compilaz write .mod filez ta tha current hustlin directory.  For dem dat do not, dis is set ta "." n' used when tha Fortran_MODULE_DIRECTORY target property aint set.

.TP
.B CMAKE_Fortran_MODDIR_FLAG
Fortran flag fo' module output directory.

This stores tha flag needed ta pass tha value of tha Fortran_MODULE_DIRECTORY target property ta tha compiler.

.TP
.B CMAKE_Fortran_MODOUT_FLAG
Fortran flag ta enable module output.

Most Fortran compilaz write .mod filez up by default.  For others, dis stores tha flag needed ta enable module output.

.TP
.B CMAKE_INTERNAL_PLATFORM_ABI
An internal variable subject ta chizzle.

This is used up in determinin tha compila ABI n' is subject ta chizzle.

.TP
.B CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>
Specify a CMake file dat overrides platform shiznit fo' <LANG>.

This be a language\-specific version of CMAKE_USER_MAKE_RULES_OVERRIDE loaded only when enablin language <LANG>.

.SH COPYRIGHT
.PP
Copyright 2000\-2012 Kitware, Inc., Insight Software Consortium.  All muthafuckin rights reserved.

.PP
Redistribution n' use up in source n' binary forms, wit or without modification, is permitted provided dat tha followin conditions is met:

.PP
Redistributionz of source code must retain tha above copyright notice, dis list of conditions n' tha followin disclaimer.

.PP
Redistributions up in binary form must reproduce tha above copyright notice, dis list of conditions n' tha followin disclaimer up in tha documentation and/or other shiznit provided wit tha distribution.

.PP
Neither tha namez of Kitware, Inc., tha Insight Software Consortium, nor tha namez of they contributors may be used ta endorse or promote shizzle derived from dis software without specific prior freestyled permission.

.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.SH SEE ALSO
.PP
Da followin resources is available ta git help rockin CMake:

.TP
.B Home Page
http://www.cmake.org

Da primary startin point fo' peepin' bout CMake.

.TP
.B Frequently Axed Questions
http://www.cmake.org/Wiki/CMake_FAQ

A Wiki is provided containin lyrics ta frequently axed thangs. 

.TP
.B Online Documentation
http://www.cmake.org/HTML/Documentation.html

Links ta available documentation may be found on dis wizzy page.

.TP
.B Mailin List
http://www.cmake.org/HTML/MailingLists.html

For help n' rap bout rockin cmake, a mailin list is provided at cmake@cmake.org. Da list is member\-post\-only but one may sign up on tha CMake wizzy page. Please first read tha full documentation at http://www.cmake.org before postin thangs ta tha list.

