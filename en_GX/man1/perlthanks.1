.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLBUG 1"
.TH PERLBUG 1 "2014-10-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlbug \- how tha fuck ta submit bug reports on Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBperlbug\fR
.PP
\&\fBperlbug\fR [\ \fB\-v\fR\ ] [\ \fB\-a\fR\ \fIaddress\fR\ ] [\ \fB\-s\fR\ \fIsubject\fR\ ]
[\ \fB\-b\fR\ \fIbody\fR\ |\ \fB\-f\fR\ \fIinputfile\fR\ ] [\ \fB\-F\fR\ \fIoutputfile\fR\ ]
[\ \fB\-r\fR\ \fIreturnaddress\fR\ ]
[\ \fB\-e\fR\ \fIeditor\fR\ ] [\ \fB\-c\fR\ \fIadminaddress\fR\ |\ \fB\-C\fR\ ]
[\ \fB\-S\fR\ ] [\ \fB\-t\fR\ ]  [\ \fB\-d\fR\ ]  [\ \fB\-A\fR\ ]  [\ \fB\-h\fR\ ] [\ \fB\-T\fR\ ]
.PP
\&\fBperlbug\fR [\ \fB\-v\fR\ ] [\ \fB\-r\fR\ \fIreturnaddress\fR\ ]
 [\ \fB\-A\fR\ ] [\ \fB\-ok\fR\ |\ \fB\-okay\fR\ |\ \fB\-nok\fR\ |\ \fB\-nokay\fR\ ]
.PP
\&\fBperlthanks\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program is designed ta help you generate n' bust bug reports
(and thank-you notes) bout perl5 n' tha modulez which shizzle wit dat shit.
.PP
In most cases, you can just run it interactively from a cold-ass lil command
line without any special arguments n' follow tha prompts.
.PP
If you have found a funky-ass bug wit a non-standard port (one dat was not
part of tha \fIstandard distribution\fR), a funky-ass binary distribution, or a
non-core module (like fuckin Tk, \s-1DBI,\s0 etc), then please peep the
documentation dat came wit dat distribution ta determine the
correct place ta report bugs.
.PP
If yo ass is unable ta bust yo' report rockin \fBperlbug\fR (most likely
because yo' system aint gots a way ta bust mail dat perlbug
recognizes), you may be able ta use dis tool ta compose yo' report
and save it ta a gangbangin' file which you can then bust ta \fBperlbug@perl.org\fR
usin yo' regular mail client.
.PP
In off tha hook cases, \fBperlbug\fR may not work well enough on yo' system
to guide you all up in composin a funky-ass bug report. In dem cases, you
may be able ta use \fBperlbug \-d\fR ta git system configuration
information ta include up in a manually composed bug report to
\&\fBperlbug@perl.org\fR.
.PP
When reportin a funky-ass bug, please run all up in dis checklist:
.IP "What version of Perl yo ass is hustlin?" 4
.IX Item "What version of Perl yo ass is hustlin?"
Type \f(CW\*(C`perl \-v\*(C'\fR all up in tha command line ta smoke up.
.IP "Is you hustlin tha sickest fuckin busted out version of perl?" 4
.IX Item "Is you hustlin tha sickest fuckin busted out version of perl?"
Look at http://www.perl.org/ ta smoke up.  If yo ass is not rockin the
latest busted out version, please try ta replicate yo' bug on the
latest stable release.
.Sp
Note dat reports bout bugs up in oldschool versionz of Perl, especially
those which indicate you aint also tested tha current stable
release of Perl, is likely ta receive less attention from the
volunteers whoz ass build n' maintain Perl than reports bout bugs in
the current release.
.Sp
This tool aint appropriate fo' reportin bugs up in any version
prior ta Perl 5.0.
.IP "Is you shizzle what tha fuck you have be a funky-ass bug?" 4
.IX Item "Is you shizzle what tha fuck you have be a funky-ass bug?"
A dope number of tha bug reports we git turn up ta be
documented features up in Perl.  Make shizzle tha issue you've run into
aint intentionizzle by glancin all up in tha documentation dat comes
with tha Perl distribution.
.Sp
Given tha sheer volume of Perl documentation, dis aint a trivial
undertakin yo, but if you can point ta documentation dat suggests
the behaviour you seein is \fIwrong\fR, yo' issue is likely to
receive mo' attention. I aint talkin' bout chicken n' gravy biatch. Yo ass may wanna start wit \fBperldoc\fR
perltrap fo' pointas ta common traps dat freshly smoked up (and experienced)
Perl programmers run into.
.Sp
If you unsure of tha meanin of a error message you've run
across, \fBperldoc\fR perldiag fo' a explanation. I aint talkin' bout chicken n' gravy biatch.  If tha message
aint up in perldiag, it probably aint generated by Perl.  Yo ass may
have luck consultin yo' operatin system documentation instead.
.Sp
If yo ass is on a non-UNIX platform \fBperldoc\fR perlport, as some
features may be unimplemented or work differently.
.Sp
Yo ass may be able ta figure up whatz goin wack rockin tha Perl
debugger n' shit.  For shiznit bout how tha fuck ta use tha debugger \fBperldoc\fR
perldebug.
.IP "Do you gotz a proper test case?" 4
.IX Item "Do you gotz a proper test case?"
Da easier it is ta reproduce yo' bug, tha mo' likely it will be
fixed \*(-- if no muthafucka can duplicate yo' problem, it probably won't be 
addressed.
.Sp
A phat test case has most of these attributes: short, simple code;
few dependencies on external commands, modules, or libraries; no
platform-dependent code (unless itz a platform-specific bug);
clear, simple documentation.
.Sp
A phat test case be almost always a phat muthafucka ta be included in
Perlz test suite.  If you have tha time, consider freestylin yo' test case so
that it can be easily included tha fuck into tha standard test suite.
.IP "Has you done included all relevant shiznit?" 4
.IX Item "Has you done included all relevant shiznit?"
Be shizzle ta include tha \fBexact\fR error lyrics, if any.
\&\*(L"Perl gave a error\*(R" aint a exact error message.
.Sp
If you git a cold-ass lil core dump (or equivalent), you may bust a thugged-out debugger
(\fBdbx\fR, \fBgdb\fR, etc) ta produce a stack trace ta include up in tha bug
report.
.Sp
\&\s-1NOTE:\s0 unless yo' Perl has been compiled wit debug info
(often \fB\-g\fR), tha stack trace is likely ta be somewhat hard ta use
because it will most probably contain only tha function names n' not
their arguments, n' you can put dat on yo' toast.  If possible, recompile yo' Perl wit debug info and
reproduce tha crash n' tha stack trace.
.IP "Yo ass betta describe tha bug up in plain Gangsta?" 4
.IX Item "Yo ass betta describe tha bug up in plain Gangsta?"
Da easier it is ta KNOW a reproducible bug, tha mo' likely
it is ghon be fixed. Y'all KNOW dat shit, muthafucka!  Any insight you can provide tha fuck into tha problem
will help a pimped out deal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  In other lyrics, try ta analyze tha problem
(to tha extent you can) n' report yo' discoveries.
.IP "Yo ass betta fix tha bug yo ass?" 4
.IX Item "Yo ass betta fix tha bug yo ass?"
A bug report which \fIincludes a patch ta fix it\fR will almost
definitely be fixed. Y'all KNOW dat shit, muthafucka!  When bustin  a patch, please use tha \f(CW\*(C`diff\*(C'\fR
program wit tha \f(CW\*(C`\-u\*(C'\fR option ta generate \*(L"unified\*(R" diff files.
Bug reports wit patches is likely ta receive hella more
attention n' interest than dem without patches.
.Sp
Yo crazy-ass patch may be returned wit requests fo' chizzles, or requests fo' more
detailed explanations bout yo' fix.
.Sp
Here is all dem hints fo' bustin high-qualitizzle patches:
.Sp
Make shizzle tha patch aint reversed (the first argument ta diff is
typically tha original gangsta file, tha second argument yo' chizzled file).
Make shizzle you test yo' patch by applyin it wit tha \f(CW\*(C`patch\*(C'\fR
program before you bust it on its way.  Try ta follow tha same style
as tha code yo ass is tryin ta patch.  Make shizzle yo' patch straight-up
does work (\f(CW\*(C`make test\*(C'\fR, if tha thang you patchin is covered
by Perlz test suite).
.ie n .IP "Yo ass betta use ""perlbug"" ta submit tha report?" 4
.el .IP "Yo ass betta use \f(CWperlbug\fR ta submit tha report?" 4
.IX Item "Yo ass betta use perlbug ta submit tha report?"
\&\fBperlbug\fR will, amongst other thangs, ensure yo' report includes
crucial shiznit bout yo' version of perl.  If \f(CW\*(C`perlbug\*(C'\fR is
unable ta mail yo' report afta you have typed it in, you may have
to compose tha message yo ass, add tha output produced by \f(CW\*(C`perlbug
\&\-d\*(C'\fR n' email it ta \fBperlbug@perl.org\fR.  If, fo' some reason, you
cannot run \f(CW\*(C`perlbug\*(C'\fR at all on yo' system, be shizzle ta include the
entire output produced by hustlin \f(CW\*(C`perl \-V\*(C'\fR (note tha uppercase V).
.Sp
Whether you use \f(CW\*(C`perlbug\*(C'\fR or bust tha email manually, please make
your Subject line informative.  \*(L"a bug\*(R" aint informative.  Neither
is \*(L"perl crashes\*(R" nor is \*(L"\s-1HELP\s0!!!\*(R".  These don't help.  A compact
description of whatz wack is fine.
.ie n .IP "Yo ass betta use ""perlbug"" ta submit a thank-you note?" 4
.el .IP "Yo ass betta use \f(CWperlbug\fR ta submit a thank-you note?" 4
.IX Item "Yo ass betta use perlbug ta submit a thank-you note?"
Yes, you can do dis by either rockin tha \f(CW\*(C`\-T\*(C'\fR option, or by invoking
the program as \f(CW\*(C`perlthanks\*(C'\fR. Thank-you notes is good. Y'all KNOW dat shit, muthafucka! I be fly as a gangbangin' falcon, soarin all up in tha sky dawwwwg! Well shiiiit, it make people
smile.
.PP
Havin done yo' bit, please be prepared ta wait, ta be holla'd at the
bug is up in yo' code, or possibly ta git no reply at all.  The
volunteers whoz ass maintain Perl is busy folks, so if yo' problem is
an obvious bug up in yo' own code, is hard as fuck ta KNOW or is
a duplicate of a existin report, you may not receive a personal
reply.
.PP
If it is blingin ta you dat yo' bug be fixed, do monitor the
perl5\-porters@perl.org mailin list n' tha commit logs ta pimpment
versionz of Perl, n' encourage tha maintainers wit kind lyrics or
offerz of frosty beverages.  (Please do be kind ta tha maintainers.
Harassin or flamin dem is likely ta have tha opposite effect of
the one you want.)
.PP
Feel free ta update tha ticket bout yo' bug on http://rt.perl.org
if a freshly smoked up version of Perl is busted out n' yo' bug is still present.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a\fR" 8
.IX Item "-a"
Address ta bust tha report to.  Defaults ta \fBperlbug@perl.org\fR.
.IP "\fB\-A\fR" 8
.IX Item "-A"
Don't bust a funky-ass bug received acknowledgement ta tha reply address.
Generally it is only a sensible ta use dis option if yo ass be a
perl maintainer actively watchin perl portas fo' yo' message to
arrive.
.IP "\fB\-b\fR" 8
.IX Item "-b"
Body of tha report.  If not included on tha command line, or
in a gangbangin' file wit \fB\-f\fR, yo big-ass booty is ghon git a cold-ass lil chizzle ta edit tha message.
.IP "\fB\-C\fR" 8
.IX Item "-C"
Don't bust copy ta administrator.
.IP "\fB\-c\fR" 8
.IX Item "-c"
Address ta bust copy of report to.  Defaults ta tha address of the
local perl administrator (recorded when perl was built).
.IP "\fB\-d\fR" 8
.IX Item "-d"
Data mode (the default if you redirect or pipe output).  This prints out
your configuration data, without mailin anything.  Yo ass can use this
with \fB\-v\fR ta git mo' complete data.
.IP "\fB\-e\fR" 8
.IX Item "-e"
Editor ta use.
.IP "\fB\-f\fR" 8
.IX Item "-f"
File containin tha body of tha report.  Use dis ta quickly bust a
prepared message.
.IP "\fB\-F\fR" 8
.IX Item "-F"
File ta output tha thangs up in dis biatch ta instead of bustin  as a email. Useful
particularly when hustlin perlbug on a machine wit no direct internet
connection.
.IP "\fB\-h\fR" 8
.IX Item "-h"
Prints a funky-ass brief summary of tha options.
.IP "\fB\-ok\fR" 8
.IX Item "-ok"
Report successful build on dis system ta perl porters. Forces \fB\-S\fR
and \fB\-C\fR. Forces n' supplies joints fo' \fB\-s\fR n' \fB\-b\fR. Only
prompts fo' a return address if it cannot guess it (for use with
\&\fBmake\fR) yo. Honors return address specified wit \fB\-r\fR.  Yo ass can use this
with \fB\-v\fR ta git mo' complete data.   Only cook up a report if this
system is less than 60 minutes old.
.IP "\fB\-okay\fR" 8
.IX Item "-okay"
As \fB\-ok\fR except it will report on olda systems.
.IP "\fB\-nok\fR" 8
.IX Item "-nok"
Report unsuccessful build on dis system.  Forces \fB\-C\fR.  Forces and
supplies a value fo' \fB\-s\fR, then requires you ta edit tha report
and say what tha fuck went wrong.  Alternatively, a prepared report may be
supplied rockin \fB\-f\fR.  Only prompts fo' a return address if it
cannot guess it (for use wit \fBmake\fR) yo. Honors return address
specified wit \fB\-r\fR.  Yo ass can use dis wit \fB\-v\fR ta git more
complete data.  Only cook up a report if dis system is less than 60
days old.
.IP "\fB\-nokay\fR" 8
.IX Item "-nokay"
As \fB\-nok\fR except it will report on olda systems.
.IP "\fB\-r\fR" 8
.IX Item "-r"
Yo crazy-ass return address.  Da program will ask you ta confirm its default
if you don't use dis option.
.IP "\fB\-S\fR" 8
.IX Item "-S"
Send without askin fo' confirmation.
.IP "\fB\-s\fR" 8
.IX Item "-s"
Subject ta include wit tha message.  Yo ass is ghon be prompted if you don't
supply one on tha command line.
.IP "\fB\-t\fR" 8
.IX Item "-t"
Test mode.  Da target address defaults ta \fBperlbug\-test@perl.org\fR.
.IP "\fB\-T\fR" 8
.IX Item "-T"
Send a thank-you note instead of a funky-ass bug report.
.IP "\fB\-v\fR" 8
.IX Item "-v"
Include verbose configuration data up in tha report.
.SH "AUTHORS"
.IX Header "AUTHORS"
Kenneth Albanowski (<kjahds@kjahds.com>), subsequently
\&\fIdoc\fRtored by Gurusamy Sarathy (<gsar@activestate.com>),
Tomothy Christiansen (<tchrist@perl.com>), Nathan Torkington
(<gnat@frii.com>), Charlez F. Randall (<cfr@pobox.com>),
Mike Guy (<mjtg@cam.ac.uk>), Dominic Dunlop
(<domo@computer.org>), Hugo van der Sanden (<hv@crypt.org>),
Jarkko Hietaniemi (<jhi@iki.fi>), Chris Nandor
(<pudge@pobox.com>), Jizzle Orwant (<orwant@media.mit.edu>,
Slick Rick Foley (<richard.foley@rfi.net>), n' Jizzy Vincent
(<jesse@bestpractical.com>).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIperldebug\fR\|(1), \fIperldiag\fR\|(1), \fIperlport\fR\|(1), \fIperltrap\fR\|(1),
\&\fIdiff\fR\|(1), \fIpatch\fR\|(1), \fIdbx\fR\|(1), \fIgdb\fR\|(1)
.SH "BUGS"
.IX Header "BUGS"
None known (guess what tha fuck must done been used ta report them?)
