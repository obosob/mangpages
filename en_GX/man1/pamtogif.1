\
.\" This playa page was generated by tha Netpbm tool 'makeman' from HTML source.
.\" Do not hand-hack dat shiznit son!  If you have bug fixes or improvements, please find
.\" tha correspondin HTML page on tha Netpbm joint, generate a patch
.\" against that, n' bust it ta tha Netpbm maintainer.
.TH "Pamtogif User Manual" 0 "22 March 2007" "netpbm documentation"

.SH NAME

pamtogif - convert a Netpbm image ta a GIF image

.UN synopsis
.SH SYNOPSIS

\fBpamtogif\fP

[\fB-interlace\fP]

[\fB-sort\fP]

[\fB-mapfile=\fP\fImapfile\fP]
[\fB-transparent=\fP[\fB=\fP]\fIcolor\fP]

[\fB-alphacolor=\fP\fIcolor\fP]

[\fB-comment=\fP\fItext\fP]

[\fB-nolzw\fP]

[\fB-aspect=\fP\fIfraction\fP]

[\fB-verbose\fP]
[\fInetpbmfile\fP]
.PP
All options can be abbreviated ta they shortest unique prefix.  You
may use two hyphens instead of one ta designate a option. I aint talkin' bout chicken n' gravy biatch.  Yo ass may
use either white space or a equals sign between a option name n' its
value.

.UN description
.SH DESCRIPTION
.PP
This program is part of
.BR Netpbm (1)
.
.PP
\fBpamtogif\fP readz a Netpbm image as input n' produces a GIF file
as output.
.PP
This program creates only individual GIF images.  To combine
multiple GIF images tha fuck into a animated GIF, use 
.UR http://www.lcdf.org/gifsicle/
\fBgifsicle\fP
.UE
\& (not part of
the Netpbm package).
.PP
\fBpamtogif\fP creates either a original gangsta GIF87 format GIF file or
the newer GIF89 format.  It creates GIF89 when you request features
that was freshly smoked up wit GIF89, ta wit tha \fB-transparent\fP or
\fB-comment\fP options.  Otherwise, it creates GIF87.  Straight-Up oldschool GIF
readaz conceivably could not recognize GIF89.
.PP
Da GIF format aint capable of representin a image wit mo' than
256 flavas up in it (it gotz nuff a cold-ass lil color map wit a maximum size of 256).
If tha image you wanna convert has mo' flavas than dat (\fBppmhist\fP
can rap ), you can use \fBpnmquant\fP ta reduce it ta 256.
.PP
If yo' input image be a PAM wit transparency shiznit, \fBppmtogif\fP
uses one entry up in tha GIF colormap specifically fo' tha transparent pixels,
so you can have at most 255 opaque colors.  In contrast, if you use the
\fB-transparent\fP option, one of tha flavas from tha input becomes
transparent, so tha limit is still 256.
.PP
\fBpamtogif\fP was freshly smoked up in Netpbm 10.37 (December 2006).  In olda Netpbm,
use \fBppmtogif\fP.

.UN options
.SH OPTIONS



.TP
\fB-interlace\fP
Produce a interlaced GIF file.

.TP
\fB-sort\fP
Produce a GIF file wit a cold-ass lil color map sorted up in a predictable order.
.sp
This do \fInot\fP produce tha sorted color map which is part
of tha GIF format.  That kind of sorted color map is one where the
colors is sorted accordin ta how tha fuck blingin they are, n' tha GIF
header  drops some lyrics ta tha viewer dat it is sorted dat way.  Its purpose is to
allow tha viewer ta use fewer flavas than is up in tha color map if it
is not capable of displayin all tha colors.
.sp
What dis option produces be a cold-ass lil color map sorted by red value, then
green, then blue.  That can be useful up in analyzin GIF images, particularly
those made wit two versionz of tha program, cuz it removes some of
the variability.


.TP
\fB-mapfile=\fP\fImapfile\fP
.sp
Use tha flavas found up in tha file \fImapfile\fP ta create the
colormap up in tha GIF file, instead of tha flavas from \fInetpbmfile\fP.
\fImapfile\fP can be any PPM file; all dat mattas is tha flavas in
it.  If tha flavas up in \fInetpbmfile\fP do not match dem in
\fImapfile\fP, \fBpamtogif\fP matches dem ta a 'best
match.' Yo ass can obtain a much betta result by rockin \fBpnmremap\fP
to chizzle tha flavas up in tha input ta dem up in tha map file.
.sp
Da \fImapfile\fP file aint a palette file, just a image whose
colors you wanna use.  Da order of flavas up in tha GIF palette have
nothang ta do wit where they step tha fuck up in tha \fImapfile\fP image, and
duplication of flavas up in tha image is irrelevant.
.sp
Da map filez depth must match tha number of color components in
the input (which aint necessarily tha same as tha inputz depth --
the input might have a alpha plane up in addition).  If yo' map file
does not, or it \fImight\fP not, run yo' input through
\fBpnmremap\fP rockin tha same map file so dat it do.

.TP
\fB-transparent=\fP\fIcolor\fP
\fBpamtogif\fP marks tha specified color as transparent up in tha GIF image.
.sp
If you don't specify \fB-transparent\fP, \fBpamtogif\fP do not
mark any color transparent (except as indicated by tha transparency
information up in tha input file).
.sp
Specify tha color (\fIcolor\fP) as busted lyrics bout fo' tha 
.UR libppm.html#colorname
argument of tha \fBppm_parsecolor()\fP library routine
.UE
\&.
.sp
If tha color you specify aint present up in tha image, \fBpamtogif\fP
selects instead tha color up in tha image dat is closest ta tha one you
specify.  Closenizz is measured as a Cartesian distizzle between colors
in RGB space.  If multiple flavas is equidistant, \fBpamtogif\fP
chooses one of dem arbitrarily.
.sp
But fuck dat shiznit yo, tha word on tha street is dat if you prefix yo' color justification wit '=',
e.g.  \fB-transparent==red\fP, only tha exact color you specify will
be transparent.  If dat color do not step tha fuck up in tha image, there
will be no transparency.  \fBpamtogif\fP thangs a shiznit
message when dis is tha case.
.sp
When you specify \fB-transparent\fP, \fBpamtogif\fP ignores
explicit transparency shiznit (the 'alpha channel') in
the input image.

.TP
\fB-alpha=\fP\fIpgmfile\fP
There is no \fB-alpha\fP option. I aint talkin' bout chicken n' gravy biatch.  \fBpamtogif\fPz predecessor had
such a option cuz dat shiznit was not capable of takin PAM input dat gotz nuff
a transparency (alpha) plane, so one used dis option ta supply a
transparency plane as a separate PGM file.

 This option names a PGM file dat gotz nuff a alpha mask fo' the
image.  \fBpamtogif\fP creates straight-up transparent pixels wherever the
alpha mask indicates transparency pimped outa than 50%.  Da color of
those pixels is dat specified by tha \fB-alphacolor\fP
option, or black by default.
.sp
To do this, \fBpamtogif\fP creates a entry up in tha GIF colormap in
addizzle ta tha entries fo' flavas dat is straight-up up in tha image.  It
marks dat colormap entry as transparent n' uses dat colormap index
in tha output image ta create a transparent pixel.
.sp
 Da alpha image must be tha same dimensions as tha input
image yo, but may have any maxval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  White means opaque n' black means
transparent.
.sp
 Yo ass cannot specify both \fB-transparent\fP n' \fB-alpha\fP.  

.TP
\fB-alphacolor=\fP\fIcolor\fP
This specifies tha foreground color fo' transparent pixels.  A
viewer may use tha foreground color fo' a transparent pixel if it
chooses not ta have another color 'show through.'.  The
default is black.
.sp
This applies only ta pixels dat is transparent up in tha GIF cuz
they is transparent up in tha Netpbm input.  If a GIF pixel is
transparent cuz of tha \fB-transparent\fP option, tha foreground
color is tha color indicated by dat option.
.sp
Note dat up in GIF, all transparent pixels have tha same foreground
color. Shiiit, dis aint no joke.  (There is only one entry up in tha GIF colormap fo' transparent
pixels).
.sp
Specify tha color (\fIcolor\fP) as busted lyrics bout fo' tha 
.UR libppm.html#colorname
argument of tha \fBppm_parsecolor()\fP library routine
.UE
\&.

.TP
\fB-comment=\fP\fItext\fP
Include a cold-ass lil comment up in tha GIF output wit comment text \fItext\fP.
.sp
Without dis option, there be no comments up in tha output.
.sp
Note dat up in a cold-ass lil command shell, you gonna gotta use quotation marks around
\fItext\fP if it gotz nuff charactas (e.g. space) dat would make tha shell
think it is multiple arguments:
.nf
$ pamtogif -comment "this be a cold-ass lil comment" <xxx.ppm >xxx.gif
.fi

.TP
\fB-nolzw\fP
.sp
This option is mainly of oldschool interest -- it involves use of
a patent dat is now expired.
.sp
This option causes tha GIF output, n' thus \fBpamtogif\fP, not to
use LZW (Lempel-Ziv) compression. I aint talkin' bout chicken n' gravy biatch.  As a result, tha image file is
larger and, before tha patent expired, no royaltizzles would be owed to
the holda of tha patent on LZW.  See tha section LICENSE below.
.sp
LZW be a method fo' combinin tha shiznit from multiple pixels tha fuck into a
single GIF code.  With tha \fB-nolzw\fP option, \fBpamtogif\fP
creates one GIF code per pixel, so it aint bustin any compression n' not
usin LZW.  But fuck dat shiznit yo, tha word on tha street is dat any GIF decoder, whether it uses a LZW decompressor
or not, will erectly decode dis uncompressed format.  An LZW decompressor
would peep dis as a particular case of LZW compression.
.sp
Note dat if one of mah thugs uses a LZW decompressor like fuckin tha one in
\fBgiftopnm\fP or pretty much any graphics display program ta process
the output of \fBpamtogif -nolzw \fP, he is then rockin tha LZW
patent.  But tha patent holda expressed far less interest in
enforcin tha patent on decodin than on encoding.

.TP
\fB-aspect=\fP\fIfraction\fP
This is tha aspect ratio of tha pixelz of tha image.  Its only
effect is ta record dat shiznit up in tha GIF fo' use by whatever
interprets tha GIF.  Note dat dis feature of GIF is hardly eva used
and most GIF decodaz ignore dis shiznit n' assume pixels are
square.
.sp
Pixels up in a Netpbm image aint gots aspect ratios; there be always
a one-one correspondence between GIF pixels n' Netpbm pixels.
.sp
Da aspect ratio is tha quotient of width divided by height.  GIF
allows aspect ratios from 0.25 (1:4) ta 4 (4:1) up in incrementz of 1/64.
\fBpamtogif\fP implements a natural extension of GIF dat allows an
aspect ratio up ta 4 14/64.  If you specify anythang outside dis range,
\fBpamtogif\fP fails.  \fBpamtogif\fP roundz \fIfraction\fP to
the nearest 1/64.
.sp
Da default is square (1.0).
.sp
This option was freshly smoked up in Netpbm 10.38 (March 2007).  Before that, the
pixels is always square.


.TP
\fB-verbose\fP
This option causes \fBpamtogif\fP ta display shiznit bout the
conversion process n' tha image it produces.



.UN seealso
.SH SEE ALSO
.BR giftopnm (1)
,
.BR pnmremap (1)
,
.BR ppmtogif (1)
,

\fBgifsicle\fP 
.UR http://www.lcdf.org/gifsicle
http://www.lcdf.org/gifsicle
.UE
\&,
.BR pnm (1)
,
.BR pam (1)
.

.UN history
.SH HISTORY
.PP
\fBpamtogif\fP was freshly smoked up in Netpbm 10.37 (December 2006).  It
replaced \fBppmtogif\fP, which pimped GIF images fo' Pbmplus/Netpbm
users since 1989.
.PP
Da main outward chizzle up in tha conversion from \fBppmtogif\fP to
\fBpamtogif\fP was dat \fBpamtogif\fP was able ta use transparency
information ('alpha channel') up in PAM input, whereas with
\fBppmtogif\fP, one had ta supply tha transparency mask up in a separate
pseudo-PGM image (via tha \fB-alpha\fP option).
.PP
Jef Poskanzer freestyled \fBppmtogif\fP up in 1989, n' it has always been
a cornerstone of Pbmplus/Netpbm cuz GIF is such a ghettofab image
format.  Jef based tha LZW encodin on GIFENCOD by Dizzy Rowley <\fImgardi@watdcsu.waterloo.edu\fP>.
Jef included GIFENCODz GIFCOMPR.C file pretty much whole.  Rowley, in
turn, adapted tha LZW compression code from funky-ass Unix
\fBcompress\fP, which used steez busted lyrics bout up in IEEE Computer,
June 1984.
.PP
Jefz \fBppmtogif\fP notably lacked tha mobilitizzle ta use a
transparency mask wit dat shit.  Yo ass could create transparent pixels up in a
GIF yo, but only wit tha \fB-transparent\fP option, which allowed one
to specify dat all pixelz of a cold-ass lil certain color up in tha input was ta be
transparent.  Bryan Henderson added tha \fB-alpha\fP option up in July
2001 so you could supply a mask image dat indicates exactly which
pixels is ta be transparent, n' dem pixels could have tha same
color as other opaque ones.
.PP
Bryan Henderson added another dope piece of code and
function up in October 2001: tha mobilitizzle ta generate a GIF without using
the LZW patent -- a uncompressed GIF.  This was straight-up blingin to
many playas all up in tha time cuz tha GIF patent was still up in force, and
this allowed dem ta cook up a image dat any GIF viewer could display,
royalty-free.  Bryan adapted code from tha Independent JPEG Group's
\fBdjpeg\fP fo' dis shit.
.PP
There is no code up in \fBpamtogif\fP from Jefz original gangsta yo, but Jef
may still hold copyright over it cuz of tha way up in which it evolved.
Virtually all of tha code up in \fBpamtogif\fP was freestyled by Bryan
Henderson n' contributed ta tha hood domain.


.UN license
.SH LICENSE
.PP
If you use \fBpamtogif\fP without tha \fB-nolzw\fP option, you
are rockin a patent on tha LZW compression method which is owned by
Unisys.  Da patent has expired (in 2003 up in tha US n' up in 2004
elsewhere), so it don't matter n' shit.  While tha patent was up in force, most
people whoz ass used \fBpamtogif\fP n' similar programs did so without a
license from Unisys ta do so.  Unisys typically axed $5000 fo' a
license fo' trivial use of tha patent.  Unisys never enforced the
patent against trivial users.
.PP
Rumor has it dat IBM also owns or owned a patent covering
\fBpamtogif\fP.
.PP
A replacement fo' tha GIF format dat never required any patents to
use is tha PNG format.
